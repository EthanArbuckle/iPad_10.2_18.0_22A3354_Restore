_QWORD *sub_1C5D609EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, unsigned int a10, unsigned __int8 a11)
{
  __int16 v14;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 **v29;
  uint64_t v30;
  BOOL v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *i;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51[2];
  uint64_t v52[2];
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  void *v56;
  uint64_t v57;
  _QWORD v58[18];

  v14 = a3;
  v16 = a10;
  v17 = a9;
  v18 = a11;
  v58[16] = *MEMORY[0x1E0C80C00];
  v52[0] = a2;
  v52[1] = a3;
  v51[0] = (uint64_t)a4;
  v51[1] = a5;
  v50 = a11;
  v53 = v55;
  v54 = 0x2000000000;
  sub_1C5D3E710(&v53, 311, a2, a3, a7, a8);
  if ((_BYTE)a4)
    v19 = a4;
  else
    v19 = a5;
  v20 = v54;
  if (v54 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 4);
    v20 = v54;
  }
  *((_DWORD *)v53 + v20) = v19;
  v21 = (v54 + 1);
  LODWORD(v54) = v21;
  if (v21 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v21 + 1, 4);
    LODWORD(v21) = v54;
  }
  *((_DWORD *)v53 + v21) = HIDWORD(v19);
  LODWORD(v54) = v54 + 1;
  v22 = sub_1C636CBE0(*(_DWORD *)(a6 + 8), a2, v14, (uint64_t)a4, a5, v17, v16, v18);
  v23 = v54;
  if (v54 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 4);
    v23 = v54;
  }
  *((_DWORD *)v53 + v23) = v22;
  v24 = (v54 + 1);
  LODWORD(v54) = v24;
  v25 = *(_DWORD *)(v17 + 16);
  v26 = a1;
  if (v24 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v24 + 1, 4);
    LODWORD(v24) = v54;
  }
  *((_DWORD *)v53 + v24) = v25;
  v27 = (v54 + 1);
  LODWORD(v54) = v27;
  v28 = *(unsigned __int16 *)(v17 + 32);
  if (v27 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v27 + 1, 4);
    LODWORD(v27) = v54;
  }
  *((_DWORD *)v53 + v27) = v28;
  LODWORD(v54) = v54 + 1;
  v49 = 0;
  v29 = sub_1C6365B08(a1, (uint64_t)&v53, a6, &v49);
  if (v29)
  {
    v32 = v29;
    v33 = v29[12];
    v34 = *(unsigned __int8 *)(v17 + 34);
    if (v34 >= v33[34])
    {
      v33[34] = v34;
      v35 = *(_OWORD *)v17;
      *(_QWORD *)(v33 + 13) = *(_QWORD *)(v17 + 13);
      *(_OWORD *)v33 = v35;
    }
  }
  else
  {
    v56 = a4;
    v57 = a5;
    if ((v16 & 0xFFFFFFFD) != 0)
    {
      v38 = (uint64_t)a7;
      v37 = a8;
    }
    else
    {
      v38 = (uint64_t)a7;
      v37 = a8;
      if (sub_1C6131264((unsigned __int8 *)&v56, v30, v31) == 3)
      {
        if (v16 <= 1)
          v16 = 1;
        else
          v16 = 3;
      }
    }
    a10 = v16;
    LODWORD(v56) = *(_DWORD *)(a6 + 8);
    v32 = (_QWORD *)sub_1C636CC78(a1, (int *)&v56, (unsigned __int8 **)a6, v52, v51, &a9, (__int16 *)&a10, &v50);
    sub_1C5D42768(a1, (uint64_t)v32, v38, v37);
    v39 = *(_DWORD *)(a1 + 340) + 1;
    v40 = *(_DWORD *)(a1 + 336);
    if (v39 > 2 * v40)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v40, (uint64_t)off_1E8198CA0);
      v56 = v58;
      v57 = 0x2000000000;
      v41 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v32, (unsigned int *)&v56));
      if (v56 != v58)
        free(v56);
      v26 = a1;
      v39 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v41 = v49;
    }
    v42 = *(_QWORD *)v41;
    if (!*(_QWORD *)v41)
      v42 = v41 | 1;
    *v32 = v42;
    *(_QWORD *)v41 = v32;
    v44 = *(_QWORD *)(v26 + 208);
    v43 = v26 + 208;
    *(_DWORD *)(v43 + 132) = v39;
    v32[1] = v44;
    v32[2] = v43;
    *(_QWORD *)(v44 + 8) = v32 + 1;
    *(_QWORD *)v43 = v32 + 1;
    for (i = *(_QWORD **)(v43 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v32);
  }
  if (v53 != v55)
    free(v53);
  return v32;
}

unsigned __int8 **sub_1C5D60DE8(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  __int16 v9;
  unsigned __int16 v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 **v23;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[128];
  void *v41;
  uint64_t v42;
  _QWORD v43[17];

  v9 = a5;
  v11 = a3;
  v43[16] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  if (*(unsigned __int8 *)(a4 + 16 * (a5 - 1)) == 172)
    goto LABEL_2;
  v36 = &v38;
  v37 = 0x2000000000;
  sub_1C5D3E710(&v36, a3, a4, a5, a6, a7);
  v25 = *(void **)(a2 + 64);
  v41 = v25;
  if (v25)
    llvm::MetadataTracking::track((uint64_t)&v41, (unsigned __int8 *)v25, 2);
  LODWORD(v42) = *(_DWORD *)(a2 + 60);
  v23 = sub_1C6365B08(a1, (uint64_t)&v36, (uint64_t)&v41, &v35);
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, (unsigned __int8 *)v41);
  if (v23)
  {
    v26 = *(void **)(a2 + 64);
    v41 = v26;
    if (v26)
      llvm::MetadataTracking::track((uint64_t)&v41, (unsigned __int8 *)v26, 2);
    LODWORD(v42) = *(_DWORD *)(a2 + 60);
    sub_1C5D611F0(a1, (uint64_t)v23, (uint64_t)&v41);
    if (v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, (unsigned __int8 *)v41);
  }
  if (v36 != &v38)
    free(v36);
  if (!v23)
  {
LABEL_2:
    if (!sub_1C5D3DF28(a1, a2))
      v35 = 0;
    *(_WORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 40) = a4;
    *(_WORD *)(a2 + 58) = v9;
    v36 = v40;
    v37 = (uint64_t)v40;
    v38 = 16;
    v39 = 0;
    if (*(_WORD *)(a2 + 56))
    {
      v14 = *(_QWORD *)(a2 + 32);
      v15 = (_QWORD *)(v14 + 40 * *(unsigned __int16 *)(a2 + 56));
      v16 = v14 + 32;
      do
      {
        v18 = (_QWORD *)(v16 - 32);
        v17 = *(_QWORD *)(v16 - 32);
        if (v17)
        {
          **(_QWORD **)(v16 - 8) = *(_QWORD *)v16;
          if (*(_QWORD *)v16)
            *(_QWORD *)(*(_QWORD *)v16 + 24) = *(_QWORD *)(v16 - 8);
        }
        *v18 = 0;
        *(_DWORD *)(v16 - 24) = 0;
        if (!*(_QWORD *)(v17 + 48))
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v36, v17);
        v16 += 40;
      }
      while (v18 + 5 != v15);
      v11 = *(_WORD *)(a2 + 24);
    }
    if ((v11 & 0x8000) != 0)
    {
      *(_QWORD *)(a2 + 80) = 0;
      *(_DWORD *)(a2 + 88) = 0;
    }
    sub_1C5D3E404(a1, a2);
    sub_1C5D42768(a1, a2, (uint64_t)a6, a7);
    if (HIDWORD(v38) != v39)
    {
      v41 = v43;
      v42 = 0x1000000000;
      if ((void *)v37 == v36)
        v27 = HIDWORD(v38);
      else
        v27 = v38;
      if ((_DWORD)v27)
      {
        v28 = 8 * v27;
        v29 = (unint64_t *)v37;
        while (*v29 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v29;
          v28 -= 8;
          if (!v28)
            goto LABEL_57;
        }
      }
      else
      {
        v29 = (unint64_t *)v37;
      }
      v30 = (unint64_t *)(v37 + 8 * v27);
      if (v29 != v30)
      {
        v31 = 0;
        v32 = *v29;
LABEL_49:
        if (!*(_QWORD *)(v32 + 48))
        {
          if (v31 >= HIDWORD(v42))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v43, v31 + 1, 8);
            v31 = v42;
          }
          *((_QWORD *)v41 + v31) = v32;
          v31 = v42 + 1;
          LODWORD(v42) = v42 + 1;
        }
        v33 = v29 + 1;
        while (v33 != v30)
        {
          v34 = *v33++;
          v32 = v34;
          if (v34 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v29 = v33 - 1;
            goto LABEL_49;
          }
        }
      }
LABEL_57:
      sub_1C63653B4((_QWORD *)a1, (uint64_t)&v41);
      if (v41 != v43)
        free(v41);
    }
    v19 = v35;
    if (v35)
    {
      v20 = *(_DWORD *)(a1 + 340) + 1;
      v21 = *(_DWORD *)(a1 + 336);
      if (v20 > 2 * v21)
      {
        llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v21, (uint64_t)off_1E8198CA0);
        v41 = v43;
        v42 = 0x2000000000;
        v19 = *(_QWORD *)(a1 + 328)
            + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, a2, (unsigned int *)&v41));
        if (v41 != v43)
          free(v41);
        v20 = *(_DWORD *)(a1 + 340) + 1;
      }
      *(_DWORD *)(a1 + 340) = v20;
      v22 = *(_QWORD *)v19;
      if (!*(_QWORD *)v19)
        v22 = v19 | 1;
      *(_QWORD *)a2 = v22;
      *(_QWORD *)v19 = a2;
    }
    if ((void *)v37 != v36)
      free((void *)v37);
    return (unsigned __int8 **)a2;
  }
  return v23;
}

uint64_t sub_1C5D611F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  v6 = (unsigned __int8 **)(a2 + 64);
  v5 = *(unsigned __int8 **)(a2 + 64);
  v14 = v5;
  if (v5 && (llvm::MetadataTracking::track((uint64_t)&v14, v5, 2), v14))
  {
    if (!*(_DWORD *)(a1 + 64) && *(unsigned __int8 **)a3 != v14)
    {
      v13 = 0;
      if (&v13 != v6)
      {
        if (*v6)
        {
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
          v12 = v13;
          *v6 = v13;
          if (v12)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v13, v12, (uint64_t)v6);
            v13 = 0;
          }
        }
        else
        {
          *v6 = 0;
        }
      }
    }
    v8 = v14;
    v9 = *(_DWORD *)(a2 + 60);
    if (*(_DWORD *)(a3 + 8) < v9)
      v9 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a2 + 60) = v9;
    if (v8)
      llvm::MetadataTracking::untrack((uint64_t)&v14, v8);
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 60);
    if (*(_DWORD *)(a3 + 8) < v10)
      v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a2 + 60) = v10;
  }
  return a2;
}

unsigned __int8 **sub_1C5D612E0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[7];

  v16[6] = *MEMORY[0x1E0C80C00];
  v4 = dword_1C866E490[*(__int16 *)(a2 + 24) - 101];
  sub_1C5D6146C((uint64_t)a1, a2, 1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  v14 = v16;
  v15 = 0x300000000;
  v5 = *(unsigned __int16 *)(a2 + 56);
  v6 = v5 - 1;
  if (v5 != 1)
  {
    v10 = 0;
    v11 = 40;
    do
    {
      v12 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + v11);
      if (v10 >= HIDWORD(v15))
      {
        v13 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + v11);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v10 + 1, 16);
        v12 = v13;
        v10 = v15;
      }
      *((_OWORD *)v14 + v10) = v12;
      v10 = v15 + 1;
      LODWORD(v15) = v15 + 1;
      v11 += 40;
      --v6;
    }
    while (v6);
  }
  v7 = sub_1C636D7B0(**(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8));
  v8 = sub_1C5D60DE8((uint64_t)a1, a2, v4, v7, 1, (uint64_t *)v14, v15);
  if (v8 == (unsigned __int8 **)a2)
  {
    *(_DWORD *)(a2 + 28) = -1;
  }
  else
  {
    sub_1C636595C((uint64_t)a1, a2, (uint64_t)v8);
    sub_1C6365540(a1, a2);
  }
  if (v14 != v16)
    free(v14);
  return v8;
}

void sub_1C5D6146C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 != a4 || a3 != a5)
  {
    if (*(_WORD *)(a2 + 58) == 1)
    {
      sub_1C636EE88(a1, a2, a3, a4, a5);
    }
    else
    {
      sub_1C5D55498(a1, a2, a3, a4, a5, 0, 0, 1);
      v10 = *(_QWORD *)(a2 + 48);
      v24 = 0;
      v25 = v10;
      v11 = *(_QWORD *)(a1 + 656);
      *(_QWORD *)(a1 + 656) = &v19;
      v19 = &off_1E8198C40;
      v20 = v11;
      v21 = a1;
      v22 = &v25;
      v23 = &v24;
      if (v10)
      {
        v12 = (uint64_t *)(a4 + 48);
        do
        {
          v13 = 0;
          v14 = *(_QWORD *)(v10 + 16);
          while (1)
          {
            if (*(_DWORD *)(v10 + 8) == a3)
            {
              v15 = v10;
              if ((v13 & 1) == 0)
              {
                sub_1C5D3DF28(a1, v14);
                v15 = v25;
              }
              v25 = *(_QWORD *)(v15 + 32);
              if (*(_QWORD *)v10)
              {
                **(_QWORD **)(v10 + 24) = *(_QWORD *)(v10 + 32);
                v16 = *(_QWORD *)(v10 + 32);
                if (v16)
                  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v10 + 24);
              }
              *(_QWORD *)v10 = a4;
              *(_DWORD *)(v10 + 8) = a5;
              if (a4)
              {
                v17 = *v12;
                *(_QWORD *)(v10 + 32) = *v12;
                if (v17)
                  *(_QWORD *)(v17 + 24) = v10 + 32;
                *(_QWORD *)(v10 + 24) = v12;
                *v12 = v10;
              }
              if (((*(unsigned __int8 *)(a4 + 26) >> 2) & 1) != (*(_BYTE *)(a2 + 26) & 4) >> 2)
                sub_1C636DBBC(a1, v14);
              v13 = 1;
            }
            else
            {
              v25 = *(_QWORD *)(v10 + 32);
            }
            v18 = v24;
            v10 = v25;
            if (v25 == v24)
              break;
            if (*(_QWORD *)(v25 + 16) != v14)
              goto LABEL_25;
          }
          v18 = v25;
LABEL_25:
          if ((v13 & 1) != 0)
          {
            sub_1C5D3E484(a1, v14);
            v18 = v24;
            v10 = v25;
          }
        }
        while (v10 != v18);
      }
      if (*(_QWORD *)(a1 + 192) == a2 && *(_DWORD *)(a1 + 200) == a3)
      {
        *(_QWORD *)(a1 + 192) = a4;
        *(_DWORD *)(a1 + 200) = a5;
      }
      *(_QWORD *)(v21 + 656) = v20;
    }
  }
}

_QWORD *sub_1C5D61678(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *i;
  int v22;
  uint64_t v23;
  uint64_t v24[2];
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v24[0] = a4;
  v24[1] = a5;
  v12 = *(unsigned __int8 *)(a4 + 16 * (a5 - 1));
  v23 = 0;
  if (v12 == 172)
    goto LABEL_2;
  v25 = v27;
  v26 = 0x2000000000;
  sub_1C5D3E710(&v25, (unsigned __int16)~(_WORD)a2, a4, a5, a6, a7);
  v23 = 0;
  v13 = sub_1C6365B08(a1, (uint64_t)&v25, a3, &v23);
  if (v13)
    sub_1C5D611F0(a1, (uint64_t)v13, a3);
  if (v25 != v27)
    free(v25);
  if (!v13)
  {
LABEL_2:
    LODWORD(v25) = ~a2;
    v22 = *(_DWORD *)(a3 + 8);
    v13 = (_QWORD *)sub_1C636E5D0(a1, &v25, &v22, (unsigned __int8 **)a3, v24);
    sub_1C5D42768(a1, (uint64_t)v13, (uint64_t)a6, a7);
    if (v12 != 172)
    {
      v14 = *(_DWORD *)(a1 + 340) + 1;
      v15 = *(_DWORD *)(a1 + 336);
      if (v14 > 2 * v15)
      {
        llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v15, (uint64_t)off_1E8198CA0);
        v25 = v27;
        v26 = 0x2000000000;
        v16 = *(_QWORD *)(a1 + 328)
            + 8
            * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v13, (unsigned int *)&v25));
        if (v25 != v27)
          free(v25);
        v14 = *(_DWORD *)(a1 + 340) + 1;
      }
      else
      {
        v16 = v23;
      }
      *(_DWORD *)(a1 + 340) = v14;
      v17 = *(_QWORD *)v16;
      if (!*(_QWORD *)v16)
        v17 = v16 | 1;
      *v13 = v17;
      *(_QWORD *)v16 = v13;
    }
    v19 = *(_QWORD *)(a1 + 208);
    v18 = (_QWORD *)(a1 + 208);
    v13[1] = v19;
    v13[2] = v18;
    *(_QWORD *)(v19 + 8) = v13 + 1;
    *v18 = v13 + 1;
    for (i = (_QWORD *)v18[56]; i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v13);
  }
  return v13;
}

unsigned __int8 **sub_1C5D618C0(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, __int16 a7)
{
  unsigned __int8 **v7;
  unsigned __int8 **v11;
  _QWORD v12[2];
  uint64_t v13;
  void *v14[2];
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(a3 + 16 * (a4 - 1)) == 172)
    return 0;
  v14[0] = v15;
  v14[1] = (void *)0x2000000000;
  sub_1C5D3E710(v14, a2, a3, a4, a5, a6);
  v12[0] = 0;
  v12[1] = 0;
  v11 = sub_1C6365B08(a1, (uint64_t)v14, (uint64_t)v12, &v13);
  v7 = v11;
  if (v11)
    *((_WORD *)v11 + 36) &= a7 | 0xF001;
  if (v14[0] != v15)
    free(v14[0]);
  if (!v7)
    return 0;
  return v7;
}

void sub_1C5D619A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::MDNode *appended;
  void *v31;
  uint64_t v32;
  _BYTE v33[24];
  void *v34;
  uint64_t v35;
  _BYTE v36[48];
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 26) & 1) != 0)
  {
    v4 = v39;
    v37 = v39;
    v38 = 0x200000000;
    v5 = *(_QWORD *)(a1 + 616);
    v6 = sub_1C5D05F58(v5 + 688, a2);
    if (*(_QWORD *)(v5 + 688) + 40 * *(unsigned int *)(v5 + 704) != v6)
    {
      v7 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(v6 + 8);
        v9 = &v8[v7];
        do
        {
          v10 = *v8;
          if (!*(_BYTE *)(*v8 + 62) && *(_WORD *)(a2 + 24) == 56)
          {
            v11 = *(uint64_t **)(a2 + 32);
            v12 = *v11;
            v13 = v11[1];
            v14 = v11[5];
            if (!sub_1C5D583CC(a1, *v11))
            {
              if (sub_1C5D583CC(a1, v14))
              {
                v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
                v16 = (uint64_t *)(v15 + 24);
                if (*(_DWORD *)(v15 + 32) >= 0x41u)
                  v16 = (uint64_t *)*v16;
                v28 = (uint64_t)v4;
                v29 = *v16;
                appended = *(llvm::MDNode **)(v10 + 40);
                v17 = *(_BYTE **)(v10 + 8);
                v18 = &v17[24 * *(_QWORD *)v10];
                v34 = v36;
                v35 = 0x200000000;
                sub_1C5ADC700((unsigned int *)&v34, v17, v18);
                v19 = v35;
                if ((_DWORD)v35)
                {
                  v22 = 0;
                  v23 = 0;
                  do
                  {
                    if (!*(_DWORD *)((char *)v34 + v22))
                    {
                      v24 = (char *)v34 + v22;
                      if (*(_QWORD *)((char *)v34 + v22 + 8) == a2)
                      {
                        *(_DWORD *)v24 = 0;
                        *((_QWORD *)v24 + 1) = v12;
                        *((_DWORD *)v24 + 4) = v13;
                        v31 = v33;
                        v32 = 0x300000000;
                        llvm::DIExpression::appendOffset((uint64_t)&v31, v29);
                        appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v31, v32, v23, 1);
                        if (v31 != v33)
                          free(v31);
                        v19 = v35;
                      }
                    }
                    ++v23;
                    v22 += 24;
                  }
                  while (v23 < v19);
                }
                else
                {
                  v19 = 0;
                }
                v20 = sub_1C636EC58(a1, *(_QWORD *)(v10 + 32), (uint64_t)appended, v34, v19, *(const void **)(v10 + 24), *(_QWORD *)(v10 + 16), *(_BYTE *)(v10 + 60), (unsigned __int8 **)(v10 + 48), *(_DWORD *)(v10 + 56), *(_BYTE *)(v10 + 61));
                v21 = v38;
                v4 = (_QWORD *)v28;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v28, v38 + 1, 8);
                  v21 = v38;
                }
                v37[v21] = v20;
                LODWORD(v38) = v38 + 1;
                *(_WORD *)(v10 + 62) = 257;
                if (v34 != v36)
                  free(v34);
              }
            }
          }
          ++v8;
        }
        while (v8 != v9);
      }
    }
    v25 = v37;
    if ((_DWORD)v38)
    {
      v26 = 8 * v38;
      do
      {
        v27 = (_QWORD *)*v25++;
        sub_1C636ED38(a1, v27, 0);
        v26 -= 8;
      }
      while (v26);
      v25 = v37;
    }
    if (v25 != v4)
      free(v25);
  }
}

_QWORD *sub_1C5D61CAC(_QWORD *result)
{
  *result = &off_1E8198BC8;
  *(_QWORD *)(result[2] + 656) = result[1];
  return result;
}

uint64_t sub_1C5D61CC4(uint64_t a1, uint64_t a2)
{
  unsigned int *v5;
  unsigned int *v6;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 1520))(*(_QWORD *)(a1 + 24)) & 1) != 0)
    return 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 1504))(*(_QWORD *)(a1 + 24), a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72)) & 1) == 0)
  {
    if (!*(_WORD *)(a2 + 56))
      return 0;
    v5 = *(unsigned int **)(a2 + 32);
    v6 = &v5[10 * *(unsigned __int16 *)(a2 + 56)];
    while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v5 + 40) + 16 * v5[2]) == 1
         || (*(_BYTE *)(*(_QWORD *)v5 + 26) & 4) == 0)
    {
      v5 += 10;
      if (v5 == v6)
        return 0;
    }
  }
  return 1;
}

void sub_1C5D61D68(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t (***v18)();
  char *v19;
  __int128 v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  uint64_t v41;
  void **p_base;
  void *__base;
  uint64_t v44;
  _QWORD v45[14];

  v7 = a1;
  v45[12] = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = a2[1];
  v10 = *a3;
  v11 = a3[1];
  if (a4 == 1)
  {
    sub_1C5D6146C(a1, v8, v9, v10, v11);
  }
  else
  {
    sub_1C5D55498(a1, v8, v9, v10, v11, 0, 0, 1);
    __base = v45;
    v44 = 0x400000000;
    v12 = 0;
    if (a4)
    {
      v13 = 0;
      do
      {
        v14 = &a2[2 * v13];
        v15 = *(_QWORD *)(*v14 + 48);
        if (v15)
        {
          v16 = *((_DWORD *)v14 + 2);
          do
          {
            if (*(_DWORD *)(v15 + 8) == v16)
            {
              v40 = 0;
              v41 = 0;
              v39 = *(uint64_t (***)())(v15 + 16);
              LODWORD(v40) = v13;
              v41 = v15;
              v17 = (char *)__base;
              if (v12 >= HIDWORD(v44))
              {
                v21 = v12 + 1;
                if (__base <= &v39 && (char *)__base + 24 * v12 > (char *)&v39)
                {
                  v22 = (char *)&v39 - (_BYTE *)__base;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v45, v21, 24);
                  v17 = (char *)__base;
                  v18 = (uint64_t (***)())((char *)__base + v22);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v45, v21, 24);
                  v18 = &v39;
                  v17 = (char *)__base;
                }
              }
              else
              {
                v18 = &v39;
              }
              v19 = &v17[24 * v44];
              v20 = *(_OWORD *)v18;
              *((_QWORD *)v19 + 2) = v18[2];
              *(_OWORD *)v19 = v20;
              v12 = v44 + 1;
              LODWORD(v44) = v44 + 1;
            }
            v15 = *(_QWORD *)(v15 + 32);
          }
          while (v15);
        }
        ++v13;
      }
      while (v13 != a4);
      if (v12 >= 2)
      {
        qsort(__base, v12, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C5D65018);
        v12 = v44;
      }
    }
    v23 = *(_QWORD *)(v7 + 656);
    *(_QWORD *)(v7 + 656) = &v39;
    v39 = &off_1E8198C78;
    v40 = v23;
    v41 = v7;
    p_base = &__base;
    if (v12)
    {
      v24 = 0;
      do
      {
        v25 = *((_QWORD *)__base + 3 * v24);
        if (v25)
        {
          sub_1C5D3DF28(v7, *((_QWORD *)__base + 3 * v24));
          v26 = (char *)__base;
          v27 = v24 + 1;
          while (1)
          {
            v28 = &v26[24 * v27 - 24];
            v29 = *((unsigned int *)v28 + 2);
            v30 = *((_QWORD *)v28 + 2);
            if (*(_QWORD *)v30)
            {
              **(_QWORD **)(v30 + 24) = *(_QWORD *)(v30 + 32);
              v31 = *(_QWORD *)(v30 + 32);
              if (v31)
                *(_QWORD *)(v31 + 24) = *(_QWORD *)(v30 + 24);
            }
            v32 = &a3[2 * v29];
            v33 = *v32;
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v32 + 2);
            *(_QWORD *)v30 = v33;
            v34 = *v32;
            if (v34)
            {
              v37 = *(_QWORD *)(v34 + 48);
              v35 = (_QWORD *)(v34 + 48);
              v36 = v37;
              *(_QWORD *)(v30 + 32) = v37;
              if (v37)
                *(_QWORD *)(v36 + 24) = v30 + 32;
              *(_QWORD *)(v30 + 24) = v35;
              *v35 = v30;
            }
            if (v12 == v27)
              break;
            v26 = (char *)__base;
            v38 = *((_QWORD *)__base + 3 * v27++);
            if (v38 != v25)
            {
              v24 = v27 - 1;
              goto LABEL_36;
            }
          }
          v24 = v12;
LABEL_36:
          sub_1C5D3E484(v7, v25);
        }
        else
        {
          ++v24;
        }
      }
      while (v24 != v12);
      v23 = v40;
      v7 = v41;
    }
    *(_QWORD *)(v7 + 656) = v23;
    if (__base != v45)
      free(__base);
  }
}

_QWORD *sub_1C5D620A8(_QWORD *result)
{
  *result = &off_1E8198BC8;
  *(_QWORD *)(result[2] + 656) = result[1];
  return result;
}

uint64_t sub_1C5D620C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v1 = (uint64_t *)(a1 + 208);
  v2 = *(uint64_t **)(a1 + 216);
  if (v2 == (uint64_t *)(a1 + 208))
  {
    result = 0;
    v5 = v2;
  }
  else
  {
    result = 0;
    v5 = v2;
    do
    {
      v6 = (uint64_t *)v2[1];
      v7 = v2 - 1;
      if (!v2)
        v7 = 0;
      if (*((_WORD *)v7 + 28))
      {
        *((_DWORD *)v7 + 7) = *((unsigned __int16 *)v7 + 28);
      }
      else
      {
        *((_DWORD *)v7 + 7) = result;
        v8 = v7 + 1;
        if (!v2)
          v8 = 0;
        if (v8 != v5)
        {
          v9 = v8 - 1;
          if (v2)
            v10 = v9;
          else
            v10 = 0;
          v12 = v10[1];
          v13 = (_QWORD *)v10[2];
          v11 = v10 + 1;
          *v13 = v12;
          *(_QWORD *)(v12 + 8) = v13;
          *v11 = 0;
          v11[1] = 0;
          v14 = *v5;
          *v11 = *v5;
          v11[1] = (uint64_t)v5;
          *(_QWORD *)(v14 + 8) = v11;
          *v5 = (uint64_t)v11;
          v5 = v11;
        }
        result = (result + 1);
        v5 = (uint64_t *)v5[1];
      }
      v2 = v6;
    }
    while (v6 != v1);
    v2 = *(uint64_t **)(a1 + 216);
  }
  while (v2 != v1)
  {
    v15 = v2 - 1;
    if (!v2)
      v15 = 0;
    for (i = v15[6]; i; i = *(_QWORD *)(i + 32))
    {
      v17 = *(_QWORD *)(i + 16);
      if (*(_DWORD *)(v17 + 28) == 1)
      {
        *(_DWORD *)(v17 + 28) = result;
        v18 = (_QWORD *)(v17 + 8);
        if ((uint64_t *)(v17 + 8) != v5)
        {
          v19 = *(_QWORD *)(v17 + 8);
          v20 = *(_QWORD **)(v17 + 16);
          *v20 = v19;
          *(_QWORD *)(v19 + 8) = v20;
          *v18 = 0;
          *(_QWORD *)(v17 + 16) = 0;
          v21 = *v5;
          *(_QWORD *)(v17 + 8) = *v5;
          *(_QWORD *)(v17 + 16) = v5;
          *(_QWORD *)(v21 + 8) = v18;
          *v5 = (uint64_t)v18;
          v5 = (uint64_t *)(v17 + 8);
        }
        result = (result + 1);
        v5 = (uint64_t *)v5[1];
      }
      else
      {
        --*(_DWORD *)(v17 + 28);
      }
    }
    v2 = (uint64_t *)v2[1];
  }
  return result;
}

uint64_t sub_1C5D621EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  if (*(_WORD *)(a1 + 24) != 173)
    return 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  if (*(_WORD *)(v6 + 24) == 216)
  {
    do
    {
      v7 = *(_DWORD **)(v6 + 32);
      v6 = *(_QWORD *)v7;
    }
    while (*(_WORD *)(*(_QWORD *)v7 + 24) == 216);
    LODWORD(v7) = v7[2];
  }
  else
  {
    v7 = *(_DWORD **)(v5 + 48);
  }
  v12 = v6;
  LODWORD(v13) = (_DWORD)v7;
  v8 = sub_1C6329368((unsigned int *)&v12, a2, a3);
  result = sub_1C5D4F7E8(v12, v13, a3, 1);
  if (result)
  {
    v9 = *(_QWORD *)(result + 80);
    v10 = (llvm::APInt *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) > 0x40u)
      v11 = llvm::APInt::countTrailingOnesSlowCase(v10);
    else
      v11 = __clz(__rbit64(~*(_QWORD *)v10));
    return v11 >= v8;
  }
  return result;
}

uint64_t sub_1C5D622B8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  const char *v10;
  llvm::Type *v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a1;
  v13 = a2;
  v4 = sub_1C6329368((unsigned int *)&v12, a2, a3);
  result = sub_1C5D4F7E8(v12, v13, a3, 0);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 80);
    v8 = (llvm::APInt *)(v7 + 24);
    v9 = *(_DWORD *)(v7 + 32);
    if (v9 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9 - 1)
        return 0;
    }
    else if (*(_QWORD *)v8 != 1)
    {
      return 0;
    }
    v11 = sub_1C4916CF4(v6, 0);
    if ((_DWORD)v10 == 1)
    return v11 == (llvm::Type *)v4;
  }
  return result;
}

uint64_t sub_1C5D62374(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm::APInt *v10;
  const char *v11;
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  if (*(_WORD *)(a1 + 24) == 216)
  {
    do
    {
      v4 = *(unsigned int **)(a1 + 32);
      a1 = *(_QWORD *)v4;
    }
    while (*(_WORD *)(*(_QWORD *)v4 + 24) == 216);
    a2 = v4[2];
  }
  v13 = a1;
  LODWORD(v14) = a2;
  v5 = sub_1C6329368((unsigned int *)&v13, a2, a3);
  result = sub_1C5D4F7E8(v13, v14, a3, 0);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 80);
    v9 = *(_DWORD *)(v8 + 32);
    if (v9)
    {
      v10 = (llvm::APInt *)(v8 + 24);
      if (v9 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v10) != v9)
          return 0;
      }
      else if (*(_QWORD *)v10 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
      {
        return 0;
      }
    }
    v12 = sub_1C4916CF4(v7, 0);
    if ((_DWORD)v11 == 1)
    return v12 == (llvm::Type *)v5;
  }
  return result;
}

uint64_t sub_1C5D62468(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  int i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  for (i = 1 - a4; ; ++i)
  {
    v6 = *a1;
    if (*a1 == a2 && *((_DWORD *)a1 + 2) == a3)
      return 1;
    if (i == 1)
      return 0;
    v7 = *(unsigned __int16 *)(v6 + 24);
    if (v7 != 253)
      break;
    v8 = *(_QWORD *)(v6 + 96);
    if ((*(_WORD *)(v8 + 36) & 0xE00) != 0 || (*(_WORD *)(v8 + 32) & 4) != 0)
      return 0;
    a1 = *(uint64_t **)(v6 + 32);
  }
  if (v7 != 2)
    return 0;
  v9 = *(_OWORD **)(v6 + 32);
  v10 = *(unsigned __int16 *)(v6 + 56);
  if (v10)
  {
    v11 = 40 * v10;
    v12 = (char *)v9;
    while (*(_QWORD *)v12 != a2 || *((_DWORD *)v12 + 2) != a3)
    {
      v12 += 40;
      v11 -= 40;
      if (!v11)
      {
        v12 = (char *)v9 + 40 * v10;
        break;
      }
    }
  }
  else
  {
    v12 = (char *)v9;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v12 - (char *)v9) >> 3) == v10 || (v14 = *(_QWORD *)(a2 + 48)) == 0)
  {
LABEL_29:
    if (!(_DWORD)v10)
      return 1;
    goto LABEL_30;
  }
  v15 = 1;
  do
  {
    if (*(_DWORD *)(v14 + 8) == a3)
    {
      if (!v15)
        goto LABEL_29;
      v15 = 0;
    }
    v14 = *(_QWORD *)(v14 + 32);
  }
  while (v14);
  result = 1;
  if ((_DWORD)v10 && v15)
  {
LABEL_30:
    v16 = a3;
    v17 = -i;
    v18 = 40 * v10 - 40;
    do
    {
      v19 = *v9;
      v9 = (_OWORD *)((char *)v9 + 40);
      v21 = v19;
      result = sub_1C5D62468(&v21, a2, v16, v17);
      if (!(_DWORD)result)
        break;
      v20 = v18;
      v18 -= 40;
    }
    while (v20);
  }
  return result;
}

uint64_t *sub_1C5D625F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  BOOL v5;
  unsigned int v6;
  unint64_t EVT;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unsigned int v85;
  uint64_t v86;
  llvm *v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  __int128 v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[64];
  void *v99;
  uint64_t v100;
  _QWORD v101[18];

  v101[16] = *MEMORY[0x1E0C80C00];
  v95 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v6 = sub_1C612FE00((llvm::EVT *)&v95, (const char *)a2);
  if ((_BYTE)v95)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v95);
    v9 = 0;
    v88 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v95 + 1) + 24), 0, v5);
    v88 = v8;
    v9 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v87 = (llvm *)(v9 | EVT);
  v10 = *(unsigned __int8 **)(a2 + 64);
  v93 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v93, v10, 2);
  v94 = *(_DWORD *)(a2 + 60);
  v99 = v101;
  v100 = 0x800000000;
  v11 = *(unsigned __int16 *)(a2 + 56);
  v96 = v98;
  v97 = 0x400000000;
  sub_1C4825C80((unsigned int *)&v96, v11, 0, 0);
  if (v6 >= a3)
    v13 = a3;
  else
    v13 = v6;
  if (a3)
    v14 = v13;
  else
    v14 = v6;
  if (a3)
    v15 = a3;
  else
    v15 = v6;
  v85 = v15;
  v86 = v14;
  if ((_DWORD)v14)
  {
    for (i = 0; i != v86; ++i)
    {
      if (*(_WORD *)(a2 + 56))
      {
        v26 = 0;
        v27 = 0;
        v28 = 40 * *(unsigned __int16 *)(a2 + 56);
        do
        {
          v29 = (uint64_t *)(*(_QWORD *)(a2 + 32) + v27);
          v30 = *v29;
          v31 = v29[1];
          v32 = (uint64_t *)(*(_QWORD *)(*v29 + 40) + 16 * v31);
          v34 = *v32;
          v33 = v32[1];
          v91 = v34;
          v92 = v33;
          if ((_BYTE)v34)
          {
            if (v34 - 15 < 0x9C)
            {
              v35 = sub_1C47F37A0((unsigned __int8 *)&v91);
              v36 = 0;
              v37 = 0;
LABEL_33:
              v41 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272);
              v42 = sub_1C6366AB4(a1, i, (const llvm::APInt *)&v93, (llvm *)v41, 0, 0, 0);
              v45 = *(_QWORD *)(a1 + 832);
              if (v45)
                LOWORD(v45) = *(_WORD *)(v45 + 8);
              v46 = sub_1C5D56C70(a1, 148, (const llvm::APInt *)&v93, (llvm *)(v36 | v35), v37, v30, v31, v44, (uint64_t)v42, v43, v45);
              v47 = (char *)v96 + v26;
              *(_QWORD *)v47 = v46;
              *((_DWORD *)v47 + 2) = v48;
              goto LABEL_30;
            }
          }
          else if ((*(_DWORD *)(v33 + 8) & 0xFE) == 0x12)
          {
            v39 = llvm::EVT::getEVT(*(llvm::EVT **)(v33 + 24), 0, v12);
            v37 = v40;
            v36 = v39 & 0xFFFFFFFFFFFFFF00;
            v35 = v39;
            goto LABEL_33;
          }
          v38 = (char *)v96 + v26;
          *(_QWORD *)v38 = v30;
          *((_DWORD *)v38 + 2) = v31;
LABEL_30:
          v27 += 40;
          v26 += 16;
        }
        while (v28 != v27);
      }
      v49 = *(unsigned __int16 *)(a2 + 24);
      if ((v49 - 175) >= 5)
      {
        if ((_DWORD)v49 == 191)
        {
          v70 = *(_QWORD *)(a1 + 832);
          if (v70)
            v71 = *(unsigned __int16 *)(v70 + 8);
          else
            v71 = 0;
          v72 = (uint64_t *)v96;
          v73 = v97;
          v74 = a1;
          v75 = 190;
        }
        else
        {
          if ((_DWORD)v49 == 204)
          {
            v63 = *((_QWORD *)v96 + 2);
            v65 = *(_QWORD *)(v63 + 80);
            v64 = *(_QWORD *)(v63 + 88);
            v91 = v65;
            v92 = v64;
            if ((_BYTE)v65)
            {
              LOBYTE(v66) = sub_1C47F37A0((unsigned __int8 *)&v91);
              v69 = 0;
              v68 = 0;
            }
            else
            {
              v66 = llvm::EVT::getEVT(*(llvm::EVT **)(v64 + 24), 0, v12);
              v68 = v67;
              v69 = v66 & 0xFFFFFFFFFFFFFF00;
            }
            v76 = *(unsigned __int16 *)(a2 + 24);
            v77 = *(_QWORD *)v96;
            v78 = *((_QWORD *)v96 + 1);
            v79 = sub_1C6367494(a1, v69 | v66, v68);
            v82 = *(_QWORD *)(a1 + 832);
            if (v82)
              LOWORD(v82) = *(_WORD *)(v82 + 8);
            v57 = sub_1C5D56C70(a1, v76, (const llvm::APInt *)&v93, v87, v88, v77, v78, v81, v79, v80, v82);
            goto LABEL_40;
          }
          v72 = (uint64_t *)v96;
          v73 = v97;
          v71 = *(unsigned __int16 *)(a2 + 72);
          v74 = a1;
          v75 = *(unsigned __int16 *)(a2 + 24);
        }
        v57 = sub_1C636D0C8(v74, (const char *)v75, (const llvm::APInt *)&v93, v87, v88, v72, v73, v71);
      }
      else
      {
        v50 = *(_QWORD *)v96;
        v51 = *((_QWORD *)v96 + 1);
        v52 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v96 + 40) + 16 * v51);
        v53 = sub_1C5D43BB0(a1, *v52, v52[1], *((_QWORD *)v96 + 2), *((_QWORD *)v96 + 3));
        v56 = *(_QWORD *)(a1 + 832);
        if (v56)
          LOWORD(v56) = *(_WORD *)(v56 + 8);
        v57 = sub_1C5D56C70(a1, v49, (const llvm::APInt *)&v93, v87, v88, v50, v51, v55, v53, v54, v56);
      }
LABEL_40:
      v59 = v57;
      v60 = v58;
      v61 = v100;
      if (v100 >= (unint64_t)HIDWORD(v100))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, (uint64_t)v101, v100 + 1, 16);
        v61 = v100;
      }
      v62 = (uint64_t **)((char *)v99 + 16 * v61);
      *v62 = v59;
      v62[1] = v60;
      LODWORD(v100) = v100 + 1;
    }
  }
  v16 = v85 - v86;
  if (v85 > v86)
  {
    do
    {
      v17 = sub_1C61312D0(a1, v87, v88);
      v19 = v18;
      v20 = v100;
      if (v100 >= (unint64_t)HIDWORD(v100))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, (uint64_t)v101, v100 + 1, 16);
        v20 = v100;
      }
      v21 = (char *)v99 + 16 * v20;
      *v21 = v17;
      v21[1] = v19;
      LODWORD(v100) = v100 + 1;
      --v16;
    }
    while (v16);
  }
  v23 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), (uint64_t)v87, v88, v85, 0);
  v24 = *(_QWORD *)(a1 + 832);
  if (v24)
    v25 = *(unsigned __int16 *)(v24 + 8);
  else
    v25 = 0;
  v83 = sub_1C636D0C8(a1, (const char *)0x92, (const llvm::APInt *)&v93, v23, v22, (uint64_t *)v99, v100, v25);
  if (v96 != v98)
    free(v96);
  if (v99 != v101)
    free(v99);
  if (v93)
    llvm::MetadataTracking::untrack((uint64_t)&v93, v93);
  return v83;
}

void sub_1C5D62B4C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t **a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t EVT;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  llvm *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  llvm *v33;
  uint64_t v34;
  uint64_t v35;
  llvm *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unsigned int v71;
  unsigned int v73;
  llvm *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned __int8 *v78;
  int v79;
  _QWORD v80[2];
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[128];
  void *v86;
  uint64_t v87;
  _BYTE v88[128];
  void *v89[2];
  _BYTE v90[128];
  void *v91[2];
  _BYTE v92[128];
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v77 = *(unsigned __int16 *)(a2 + 24);
  v7 = *(uint64_t **)(a2 + 40);
  v8 = v7[1];
  v81 = *v7;
  v82 = v8;
  v10 = v7[2];
  v9 = v7[3];
  v80[0] = v10;
  v80[1] = v9;
  if ((_BYTE)v81)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v81);
    v14 = 0;
    v75 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v8 + 24), 0, a3);
    v75 = v13;
    v14 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v74 = (llvm *)(v14 | EVT);
  if ((_BYTE)v10)
  {
    LOBYTE(v15) = sub_1C47F37A0((unsigned __int8 *)v80);
    v18 = 0;
    v17 = 0;
  }
  else
  {
    v15 = llvm::EVT::getEVT(*(llvm::EVT **)(v9 + 24), 0, v12);
    v17 = v16;
    v18 = v15 & 0xFFFFFFFFFFFFFF00;
  }
  v19 = (llvm *)(v18 | v15);
  v20 = *(unsigned __int8 **)(a2 + 64);
  v78 = v20;
  if (v20)
    llvm::MetadataTracking::track((uint64_t)&v78, v20, 2);
  v79 = *(_DWORD *)(a2 + 60);
  v21 = sub_1C612FE00((llvm::EVT *)&v81, (const char *)v20);
  if (v21 >= a3)
    v22 = a3;
  else
    v22 = v21;
  if (a3)
    v23 = v22;
  else
    v23 = v21;
  if (a3)
    v24 = a3;
  else
    v24 = v21;
  v71 = v24;
  v91[0] = v92;
  v91[1] = (void *)0x800000000;
  v89[0] = v90;
  v89[1] = (void *)0x800000000;
  sub_1C5D63080(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), (uint64_t)v91, 0, v23, 0, 0);
  sub_1C5D63080(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), (uint64_t)v89, 0, v23, 0, 0);
  v25 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, llvm *, uint64_t))(**(_QWORD **)(a1 + 24) + 400))(*(_QWORD *)(a1 + 24), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, *(_QWORD *)(a1 + 56), v74, v75);
  v76 = sub_1C636A8B4(a1, (uint64_t)v74, v75, v25, v26);
  v73 = v23;
  v86 = v88;
  v87 = 0x800000000;
  v83 = v85;
  v84 = 0x800000000;
  if (v23)
  {
    v41 = v27;
    v42 = 0;
    do
    {
      v43 = *(_QWORD *)((char *)v91[0] + v42 + 8);
      v45 = *(_QWORD *)((char *)v89[0] + v42);
      v44 = *(_QWORD *)((char *)v89[0] + v42 + 8);
      v93 = *(_QWORD *)((char *)v91[0] + v42);
      v94 = v43;
      v95 = v45;
      v96 = v44;
      v46 = *(_QWORD *)(a1 + 832);
      if (v46)
        v47 = *(_WORD *)(v46 + 8);
      else
        v47 = 0;
      v48 = sub_1C636D410(a1, (const char *)v77, (const llvm::APInt *)&v78, v76, v41, &v93, 2, v47);
      v50 = v49;
      v51 = sub_1C6366888(a1, 1, (const llvm::APInt *)&v78, (_BOOL8)v19, v17, v81, v82);
      v53 = v52;
      v54 = sub_1C6366AB4(a1, 0, (const llvm::APInt *)&v78, v19, v17, 0, 0);
      v57 = sub_1C4815A8C(a1, (const llvm::APInt *)&v78, v19, v17, (uint64_t)v48, 1, v51, v53, (uint64_t)v54, v55, v56);
      v59 = v58;
      v60 = v87;
      if (v87 >= (unint64_t)HIDWORD(v87))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 16);
        v60 = v87;
      }
      v61 = (uint64_t **)((char *)v86 + 16 * v60);
      *v61 = v48;
      v61[1] = v50;
      LODWORD(v87) = v87 + 1;
      v62 = v84;
      if (v84 >= (unint64_t)HIDWORD(v84))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
        v62 = v84;
      }
      v63 = (uint64_t **)((char *)v83 + 16 * v62);
      *v63 = v57;
      v63[1] = v59;
      LODWORD(v84) = v84 + 1;
      v42 += 16;
    }
    while (16 * v73 != v42);
  }
  v28 = v71 - v73;
  v29 = sub_1C61312D0(a1, v74, v75);
  sub_1C63299CC((unsigned int *)&v86, v28, (uint64_t)v29, v30);
  v31 = sub_1C61312D0(a1, v19, v17);
  sub_1C63299CC((unsigned int *)&v83, v28, (uint64_t)v31, v32);
  v33 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), (uint64_t)v74, v75, v71, 0);
  v35 = v34;
  v36 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), (uint64_t)v19, v17, v71, 0);
  v38 = v37;
  v39 = *(_QWORD *)(a1 + 832);
  if (v39)
    v40 = *(unsigned __int16 *)(v39 + 8);
  else
    v40 = 0;
  v64 = sub_1C636D0C8(a1, (const char *)0x92, (const llvm::APInt *)&v78, v33, v35, (uint64_t *)v86, v87, v40);
  v66 = v65;
  v67 = *(_QWORD *)(a1 + 832);
  if (v67)
    v68 = *(unsigned __int16 *)(v67 + 8);
  else
    v68 = 0;
  v69 = sub_1C636D0C8(a1, (const char *)0x92, (const llvm::APInt *)&v78, v36, v38, (uint64_t *)v83, v84, v68);
  *a4 = v64;
  a4[1] = v66;
  a4[2] = v69;
  a4[3] = v70;
  if (v83 != v85)
    free(v83);
  if (v86 != v88)
    free(v86);
  if (v89[0] != v90)
    free(v89[0]);
  if (v91[0] != v92)
    free(v91[0]);
  if (v78)
    llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
}

uint64_t sub_1C5D63080(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, int a6, llvm *a7, uint64_t a8)
{
  int v10;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  int i;
  __int128 v31;

  v10 = a6;
  v15 = result;
  v31 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  if (!a6)
  {
    result = sub_1C612FE00((llvm::EVT *)&v31, (const char *)a2);
    v10 = result;
  }
  if (!(a7 | (unint64_t)a8))
  {
    if ((_BYTE)v31)
    {
      result = sub_1C47F37A0((unsigned __int8 *)&v31);
      v16 = 0;
      a8 = 0;
    }
    else
    {
      result = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v31 + 1) + 24), 0, a3);
      a8 = v17;
      v16 = result & 0xFFFFFFFFFFFFFF00;
    }
    a7 = (llvm *)(v16 | result);
  }
  v18 = *(unsigned __int8 **)(a2 + 64);
  v29 = v18;
  if (v18)
    result = llvm::MetadataTracking::track((uint64_t)&v29, v18, 2);
  for (i = *(_DWORD *)(a2 + 60); v10; --v10)
  {
    v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 24) + 72))(*(_QWORD *)(v15 + 24), *(_QWORD *)(**(_QWORD **)(v15 + 40) + 40) + 272);
    v20 = sub_1C6366AB4(v15, a5, (const llvm::APInt *)&v29, (llvm *)v19, 0, 0, 0);
    v23 = *(_QWORD *)(v15 + 832);
    if (v23)
      LOWORD(v23) = *(_WORD *)(v23 + 8);
    result = (uint64_t)sub_1C5D56C70(v15, 148, (const llvm::APInt *)&v29, a7, a8, a2, a3, v22, (uint64_t)v20, v21, v23);
    v24 = result;
    v26 = v25;
    v27 = *(unsigned int *)(a4 + 8);
    if (v27 >= *(unsigned int *)(a4 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v27 + 1, 16);
      v27 = *(unsigned int *)(a4 + 8);
    }
    v28 = (uint64_t *)(*(_QWORD *)a4 + 16 * v27);
    *v28 = v24;
    v28[1] = v26;
    ++*(_DWORD *)(a4 + 8);
    ++a5;
  }
  if (v29)
    return llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  return result;
}

uint64_t sub_1C5D63254(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v12;
  const char *v13;
  uint64_t result;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v17[7];
  uint64_t v18[7];
  __int128 v19;

  if ((*(_BYTE *)(a2 + 26) & 8) != 0)
    return 0;
  if ((*(_BYTE *)(a3 + 26) & 8) != 0)
    return 0;
  if ((*(_WORD *)(*(_QWORD *)(a2 + 96) + 36) & 0xF00) != 0)
    return 0;
  if ((*(_WORD *)(a2 + 26) & 0x380) != 0)
    return 0;
  if ((*(_WORD *)(a3 + 26) & 0x380) != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)v7 != *(_QWORD *)v8 || *(_DWORD *)(v7 + 8) != *(_DWORD *)(v8 + 8))
    return 0;
  v19 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v12 = (_BYTE)v19
      ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v19)
      : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v19);
  if ((_DWORD)v13 == 1)
  {
    v15 = v12;
    v12 = v15;
  }
  if (a4 != (unint64_t)v12 >> 3)
    return 0;
  sub_1C5D657F8(a3, a1, (uint64_t)v18);
  sub_1C5D657F8(a2, a1, (uint64_t)v17);
  v16 = 0;
  LODWORD(result) = sub_1C5D653D4(v18, v17, a1, &v16);
  if (v16 == a5 * a4)
    return result;
  else
    return 0;
}

uint64_t sub_1C5D633A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int PointerTypeSizeInBits;
  const llvm::DataLayout *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  unint64_t v16;
  int v17;
  char v18;
  int v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  int8x8_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  const llvm::DataLayout *v33[5];
  char v34;

  v31 = 0;
  v32 = 0;
  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t **, uint64_t *))(**(_QWORD **)(a1 + 24) + 1720))(*(_QWORD *)(a1 + 24), a2, &v32, &v31))goto LABEL_18;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40);
  v5 = (uint64_t)v32;
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(v4 + 272, *v32);
  v28 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits > 0x40)
  {
    v26 = PointerTypeSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
    v30 = v26;
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, 0, 0);
    v5 = (uint64_t)v32;
    v4 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40);
  }
  else
  {
    v30 = PointerTypeSizeInBits;
    v27 = 0;
    v29 = 0;
  }
  if (!v5 || *(unsigned __int8 *)(v5 + 16) < 0x1Cu || (v7 = (const llvm::DataLayout *)v5, !*(_QWORD *)(v5 + 40)))
    v7 = 0;
  v33[0] = (const llvm::DataLayout *)(v4 + 272);
  v33[1] = 0;
  v33[3] = 0;
  v33[4] = 0;
  v33[2] = v7;
  v34 = 1;
  sub_1C4F82B7C(v5, &v27, 0, v33);
  v8 = v28;
  if (v28 > 0x40)
  {
    v9 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v27);
    if (v9)
      goto LABEL_9;
    goto LABEL_16;
  }
  v9 = __clz(__rbit64(~*(_QWORD *)&v27));
  if (!v9)
  {
LABEL_16:
    if (v30 >= 0x41 && v29)
    {
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      v8 = v28;
    }
    if (v8 >= 0x41 && *(_QWORD *)&v27)
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v27, 0x1000C8000313F17);
LABEL_18:
    v14 = *(unsigned __int16 *)(a2 + 24);
    if (v14 == 39 || v14 == 15)
    {
      v16 = 0;
      v17 = *(_DWORD *)(a2 + 76);
    }
    else
    {
      v20 = sub_1C6368DC4(a1, a2);
      if (!v20
        || ((v21 = *(_QWORD **)(a2 + 32), v22 = *(unsigned __int16 *)(*v21 + 24), v22 != 39)
          ? (v23 = v22 == 15)
          : (v23 = 1),
            !v23))
      {
LABEL_25:
        v12 = 0;
        v13 = 0;
        return v12 | (v13 << 8);
      }
      v17 = *(_DWORD *)(*v21 + 76);
      v24 = *(_QWORD *)(v21[5] + 80);
      v25 = (unint64_t *)(v24 + 24);
      if (*(_DWORD *)(v24 + 32) >= 0x41u)
        v25 = (unint64_t *)*v25;
      v16 = *v25;
    }
    if (v17 != 0x80000000)
    {
      v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 8)
                     + 40 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 32) + v17)
                     + 16);
      v13 = 1;
      v12 = 63 - __clz(((1 << v18) | v16) & -(uint64_t)((1 << v18) | v16));
      return v12 | (v13 << 8);
    }
    goto LABEL_25;
  }
LABEL_9:
  if (v9 >= 0x1F)
    v10 = 31;
  else
    v10 = v9;
  v11 = __clz((v31 | (1 << v10)) & -(v31 | (1 << v10)));
  if (v30 >= 0x41 && v29)
  {
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    v8 = v28;
  }
  v12 = 63 - v11;
  if (v8 >= 0x41 && *(_QWORD *)&v27)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v27, 0x1000C8000313F17);
  v13 = 1;
  return v12 | (v13 << 8);
}

uint64_t *sub_1C5D636A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const llvm::APInt *a6@<X5>, uint64_t **a7@<X8>)
{
  uint64_t v12;
  llvm *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *result;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  llvm *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a4;
  v38 = a5;
  v12 = *(_QWORD *)(a2 + 40) + 16 * a3;
  v13 = *(llvm **)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v35 = *(llvm **)v12;
  v36 = v14;
  v17 = sub_1C52B71D4((unsigned __int8 *)&v37) >> 1;
  if ((_BYTE)v37)
  {
    if (v37 - 15 >= 0x69)
      goto LABEL_3;
LABEL_11:
    v21 = (uint64_t)sub_1C6366AB4(a1, v17, a6, v13, v14, 0, 0);
    v23 = v24;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v38 + 8) == 18)
    goto LABEL_11;
LABEL_3:
  v18 = sub_1C6131328((unsigned __int8 *)&v35, v15, v16);
  v34 = v18;
  if (v18 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v33, v17, 0);
  }
  else
  {
    v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
    if (!v18)
      LODWORD(v19) = 0;
    v33 = v19 & v17;
  }
  v21 = sub_1C5C9E150(a1, a6, (uint64_t)v13, v14, (llvm::APInt *)&v33);
  v23 = v22;
  if (v34 >= 0x41 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
LABEL_12:
  v25 = *(_QWORD *)(a1 + 832);
  if (v25)
    LOWORD(v25) = *(_WORD *)(v25 + 8);
  v27 = sub_1C5D56C70(a1, 169, a6, v35, v36, a2, a3, v20, v21, v23, v25);
  v29 = v28;
  v30 = *(_QWORD *)(a1 + 832);
  if (v30)
    LOWORD(v30) = *(_WORD *)(v30 + 8);
  result = sub_1C5D56C70(a1, 85, a6, v35, v36, a2, a3, v26, v21, v23, v30);
  *a7 = v27;
  a7[1] = v29;
  a7[2] = result;
  a7[3] = v32;
  return result;
}

uint64_t *sub_1C5D63864(uint64_t a1, unsigned int *a2, const llvm::APInt *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  unint64_t EVT;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  llvm *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];

  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 16 * a2[2]);
  v8 = *v6;
  v7 = v6[1];
  v32[0] = v8;
  v32[1] = v7;
  v9 = *(llvm::LLVMContext **)(a1 + 56);
  if ((_BYTE)v8)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)v32);
    v13 = 0;
    v12 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v7 + 24), 0, (BOOL)a3);
    v12 = (uint64_t)v11;
    v13 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v14 = v13 | EVT;
  v15 = sub_1C612FE00((llvm::EVT *)v32, v11);
  v16 = v15 | ((unint64_t)v15 >> 1) | ((v15 | ((unint64_t)v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = (llvm *)sub_1C4816F98(v9, v14, v12, ((v17 >> 16) | v17) + 1, 0);
  v20 = v19;
  v21 = sub_1C61312D0(a1, v18, v19);
  v23 = v22;
  v25 = *(_QWORD *)a2;
  v24 = *((_QWORD *)a2 + 1);
  v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272);
  v27 = sub_1C6366AB4(a1, 0, a3, (llvm *)v26, 0, 0, 0);
  v30 = *(_QWORD *)(a1 + 832);
  if (v30)
    LOWORD(v30) = *(_WORD *)(v30 + 8);
  return sub_1C5D58E08(a1, (const char *)0x96, a3, v18, v20, (uint64_t)v21, v23, v29, v25, v24, (uint64_t)v27, v28, SHIDWORD(v28), v30);
}

uint64_t sub_1C5D639D4(uint64_t a1, llvm::APInt *this, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::APInt *v18;
  _DWORD *v19;
  unsigned int v21;
  unsigned int v22;

  v6 = *(unsigned __int16 *)(a1 + 56);
  if (a3)
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 64) = v6;
    if ((_DWORD)v6)
    {
      v7 = (unint64_t)(v6 + 63) >> 6;
      if (v7 > *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, (unint64_t)(v6 + 63) >> 6, 8);
        v8 = *(unsigned int *)(a3 + 8);
        v10 = *(_DWORD *)(a3 + 64);
        v9 = *(_DWORD *)(a3 + 8);
      }
      else
      {
        v8 = 0;
        v9 = 0;
        LOBYTE(v10) = v6;
      }
      v11 = *(_QWORD *)a3;
      bzero((void *)(*(_QWORD *)a3 + 8 * v8), 8 * v7);
      *(_DWORD *)(a3 + 8) = v9 + v7;
      if ((v10 & 0x3F) != 0)
        *(_QWORD *)(v11 + 8 * (v9 + v7) - 8) &= ~(-1 << (v10 & 0x3F));
    }
  }
  v12 = *((_DWORD *)this + 2);
  if (v12 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(this) == v12)
      return 0;
  }
  else if (!*(_QWORD *)this)
  {
    return 0;
  }
  if (!(_DWORD)v6)
    goto LABEL_30;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  result = 0;
  do
  {
    v17 = v15 >> 6;
    if (v12 >= 0x41)
      v18 = (llvm::APInt *)(*(_QWORD *)this + 8 * v17);
    else
      v18 = this;
    if ((*(_QWORD *)v18 & (1 << v15)) != 0)
    {
      v19 = (_DWORD *)(*(_QWORD *)(a1 + 32) + v14);
      if (*(_WORD *)(*(_QWORD *)v19 + 24) == 51)
      {
        if (a3)
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) |= 1 << v15;
      }
      else if (result)
      {
        if (result != *(_QWORD *)v19 || v16 != v19[2])
          return 0;
      }
      else
      {
        result = *(_QWORD *)v19;
        v16 = v19[2];
      }
    }
    ++v15;
    v14 += 40;
  }
  while (v6 != v15);
  if (!result)
  {
LABEL_30:
    if (v12 > 0x40)
    {
      v22 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
    }
    else
    {
      v21 = __clz(__rbit64(*(_QWORD *)this));
      if (v12 >= v21)
        v22 = v21;
      else
        v22 = v12;
    }
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40 * v22);
  }
  return result;
}

void sub_1C5D63BB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_1C63716C0(a1, a2, a3);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        v9 = *(_DWORD *)(a3 + 8);
        if (*(_DWORD *)(v8 + 8) > 0x40u || v9 > 0x40)
        {
          if (v8 != a3)
          {
            llvm::APInt::reallocate(v8, v9);
            v10 = *(unsigned int *)(v8 + 8);
            if (v10 <= 0x40)
              *(_QWORD *)v8 = *(_QWORD *)a3;
            else
              memcpy(*(void **)v8, *(const void **)a3, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          *(_QWORD *)v8 = *(_QWORD *)a3;
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
        }
        v8 += 16;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v11 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v16 = *(_QWORD *)a1 + 16 * v6 - 8;
        v17 = 16 * a2 - 16 * v6;
        v18 = (unsigned int *)v16;
        do
        {
          v19 = *v18;
          v18 -= 4;
          if (v19 >= 0x41)
          {
            v20 = *(_QWORD *)(v16 - 8);
            if (v20)
              MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
          }
          v16 = (uint64_t)v18;
          v17 += 16;
        }
        while (v17);
      }
    }
    else
    {
      v12 = (unsigned int *)(*(_QWORD *)a1 + 16 * v6 + 8);
      do
      {
        v13 = *(_DWORD *)(a3 + 8);
        *v12 = v13;
        if (v13 > 0x40)
        {
          v14 = (void *)operator new[]();
          *((_QWORD *)v12 - 1) = v14;
          memcpy(v14, *(const void **)a3, (((unint64_t)*v12 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *((_QWORD *)v12 - 1) = *(_QWORD *)a3;
        }
        v12 += 4;
      }
      while (!__CFADD__(v11++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t *sub_1C5D63D84(uint64_t *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a2 != a3)
  {
    v3 = a2 >> 6;
    if (a2 >> 6 == a3 >> 6)
    {
      v4 = (1 << a3) + (-1 << a2);
      v5 = *result;
LABEL_4:
      *(_QWORD *)(v5 + 8 * v3) |= v4;
      return result;
    }
    v5 = *result;
    *(_QWORD *)(*result + 8 * v3) |= -1 << a2;
    v6 = (a2 + 63) & 0xFFFFFFC0;
    if (v6 + 64 <= a3)
    {
      do
      {
        *(_QWORD *)(v5 + 8 * (v6 >> 6)) = -1;
        v7 = v6 + 64;
        v8 = v6 + 128;
        v6 += 64;
      }
      while (v8 <= a3);
    }
    else
    {
      v7 = (a2 + 63) & 0xFFFFFFC0;
    }
    if (v7 < a3)
    {
      v4 = ~(-1 << a3);
      v3 = v7 >> 6;
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t *sub_1C5D63E30(uint64_t a1, const llvm::APInt *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;

  v6 = *(unsigned int *)(a3 + 8);
  if (v6 >= 0x10000)
  {
    do
    {
      v7 = *(_QWORD *)(a1 + 832);
      if (v7)
        v8 = *(unsigned __int16 *)(v7 + 8);
      else
        v8 = 0;
      v9 = v6 - 0xFFFF;
      *(_QWORD *)&v15 = sub_1C636D0C8(a1, (const char *)2, a2, (llvm *)1, 0, (uint64_t *)(*(_QWORD *)a3 + 16 * (v6 - 0xFFFF)), 0xFFFFLL, v8);
      *((_QWORD *)&v15 + 1) = v10;
      *(_DWORD *)(a3 + 8) = v9;
      if (*(_DWORD *)(a3 + 12) <= v9)
      {
        sub_1C5979F58(a3, &v15);
        v11 = *(_DWORD *)(a3 + 8);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)a3 + 16 * v9) = v15;
        v11 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v11;
      }
      v6 = v11;
    }
    while (HIWORD(v11));
  }
  v12 = *(_QWORD *)(a1 + 832);
  if (v12)
    v13 = *(unsigned __int16 *)(v12 + 8);
  else
    v13 = 0;
  return sub_1C636D0C8(a1, (const char *)2, a2, (llvm *)1, 0, *(uint64_t **)a3, v6, v13);
}

void sub_1C5D63F3C(uint64_t a1, const llvm::APInt *a2, uint64_t a3, unsigned int a4, unsigned int a5, _QWORD *a6, _QWORD *a7)
{
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD v44[34];

  v44[32] = *MEMORY[0x1E0C80C00];
  v42 = v44;
  v43 = 0x1000000000;
  v13 = a5 - a4;
  if (a5 <= a4)
  {
    v21 = 0;
    v22 = v44;
  }
  else
  {
    v15 = a3 + 16;
    v16 = 16 * a4;
    do
    {
      v17 = *(_OWORD *)(*a6 + v16);
      v18 = *(unsigned int *)(a3 + 8);
      if (v18 >= *(unsigned int *)(a3 + 12))
      {
        v40 = v15;
        v38 = *(_OWORD *)(*a6 + v16);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v15, v18 + 1, 16);
        v17 = v38;
        v15 = v40;
        v18 = *(unsigned int *)(a3 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a3 + 16 * v18) = v17;
      ++*(_DWORD *)(a3 + 8);
      v19 = *(_OWORD *)(*a6 + v16);
      v20 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        v41 = v15;
        v39 = *(_OWORD *)(*a6 + v16);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 16);
        v19 = v39;
        v15 = v41;
        v20 = v43;
      }
      *(_OWORD *)&v42[2 * v20] = v19;
      v21 = (v43 + 1);
      LODWORD(v43) = v43 + 1;
      v16 += 16;
      --v13;
    }
    while (v13);
    v22 = v42;
  }
  v23 = *(_QWORD *)(a1 + 832);
  if (v23)
    v24 = *(unsigned __int16 *)(v23 + 8);
  else
    v24 = 0;
  v25 = sub_1C636D0C8(a1, (const char *)2, a2, (llvm *)1, 0, v22, v21, v24);
  v27 = a5 >= a4;
  v28 = a5 - a4;
  if (v28 != 0 && v27)
  {
    v29 = (uint64_t)v25;
    v30 = v26;
    v31 = 16 * a4;
    do
    {
      v32 = *(_QWORD *)(*a7 + v31);
      if (*(_WORD *)(v32 + 24) != 254)
        v32 = 0;
      v33 = sub_1C5D5DBA0(a1, v29, v30, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v32 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v32 + 32) + 48), *(_QWORD *)(*(_QWORD *)(v32 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v32 + 32) + 88), *(_QWORD *)(v32 + 80), *(_QWORD *)(v32 + 88), *(_QWORD *)(v32 + 96));
      v35 = v34;
      v36 = *(unsigned int *)(a3 + 8);
      if (v36 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v36 + 1, 16);
        v36 = *(unsigned int *)(a3 + 8);
      }
      v37 = (_QWORD *)(*(_QWORD *)a3 + 16 * v36);
      *v37 = v33;
      v37[1] = v35;
      ++*(_DWORD *)(a3 + 8);
      v31 += 16;
      --v28;
    }
    while (v28);
  }
  if (v42 != v44)
    free(v42);
}

_QWORD *sub_1C5D641AC(uint64_t a1, unint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  llvm::Type *v10;
  uint64_t v11;
  BOOL v12;
  llvm::APInt *v13;
  int v14;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  const char *v19;
  const llvm::APInt *v20;
  unint64_t v21;
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  llvm::EVT *v25;
  uint64_t ExtendedSizeInBits;
  const char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  llvm *v35;
  uint64_t v36;
  llvm::ValueHandleBase *v37;
  uint64_t v38;
  int v39;
  llvm::LLVMContext *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  const llvm::APFloat *v44;
  llvm *v45;
  uint64_t v46;
  llvm::APFloatBase *v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const llvm::APInt *v64;
  llvm *v65;
  uint64_t v66;
  unint64_t v67;
  llvm::ValueHandleBase *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t ExtendedIntegerVT;
  uint64_t v77;
  llvm::LLVMContext *v78;
  uint64_t v79;
  unsigned int v80;
  const llvm::APInt *v81;
  unsigned int v82;
  llvm *v83;
  uint64_t v84;
  llvm *v85;
  uint64_t v86;
  uint64_t v87[3];

  v87[2] = *MEMORY[0x1E0C80C00];
  v83 = a3;
  v84 = a4;
  v10 = sub_1C6131328((unsigned __int8 *)&v83, a2, (BOOL)a3);
  v13 = v10;
  v14 = *(unsigned __int16 *)(a1 + 24);
  if (v14 != 35 && v14 != 11)
  {
    v21 = sub_1C6131264((unsigned __int8 *)&v83, v11, v12);
    v23 = (llvm *)v21;
    v24 = v22;
    v85 = (llvm *)v21;
    v86 = v22;
    if ((_BYTE)v21)
    {
      if (v21 - 120 < 0x20
        || v21 - 2 < 6
        || v21 - 15 < 0x3C)
      {
        goto LABEL_60;
      }
      v25 = *(llvm::EVT **)(a5 + 56);
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v85);
    }
    else
    {
      if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12)
        v39 = *(unsigned __int8 *)(**(_QWORD **)(v22 + 16) + 8);
      else
        v39 = *(_DWORD *)(v22 + 8);
      if (v39 == 13)
      {
LABEL_60:
        v48 = *(_QWORD *)(a5 + 832);
        if (v48)
          v49 = *(_WORD *)(v48 + 8);
        else
          v49 = 0;
        v50 = a2 & 0xFFFFFFFF00000000;
        v38 = (uint64_t)sub_1C5D52060(a5, 199, a6, v23, v24, a1, a2, v49);
        v53 = v51;
        if (v13 >= 9)
        {
          v80 = 8;
          v79 = 1;
          llvm::APInt::getSplat(v13, (llvm::APInt *)&v79, (uint64_t)&v81);
          if (v80 >= 0x41 && v79)
            MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
          v65 = v85;
          v66 = v86;
          v67 = v53 | v50;
          v68 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a5 + 56), (llvm::LLVMContext *)&v81, v64);
          v69 = sub_1C5D3FAF8(a5, (uint64_t)v68, a6, v65, v66, 0, 0);
          v72 = *(_QWORD *)(a5 + 832);
          if (v72)
            LOWORD(v72) = *(_WORD *)(v72 + 8);
          v38 = (uint64_t)sub_1C5D56C70(a5, 58, a6, v65, v66, v38, v67, v71, (uint64_t)v69, v70, v72);
          v53 = v51;
          if (v82 >= 0x41 && v81)
            MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
        }
        v54 = *(_QWORD *)(v38 + 40);
        v55 = v53;
        v56 = (unsigned __int8 *)(v54 + 16 * v53);
        v57 = *v56;
        v58 = v83;
        if (v83 == v57)
        {
          if ((_BYTE)v83)
            goto LABEL_80;
          v59 = *((_QWORD *)v56 + 1);
          v60 = v84;
          if (v84 == v59)
            goto LABEL_80;
        }
        else
        {
          if ((_BYTE)v83)
          {
            if (v83 - 120 < 0x20
              || v83 - 2 < 6
              || v83 - 15 < 0x3C)
            {
              goto LABEL_78;
            }
            goto LABEL_91;
          }
          v60 = v84;
        }
        if ((*(_DWORD *)(v60 + 8) & 0xFE) == 0x12)
          v61 = *(unsigned __int8 *)(**(_QWORD **)(v60 + 16) + 8);
        else
          v61 = *(_DWORD *)(v60 + 8);
        if (v61 == 13)
        {
          v58 = 0;
LABEL_78:
          if (v58 != v57)
          {
            v62 = v84;
            return sub_1C5CA0FB8(a5, v83, v62, a6, v38, v55 | v50);
          }
          v58 = v57;
LABEL_80:
          if (v58)
            return (_QWORD *)v38;
          v62 = v84;
          if (v84 == *(_QWORD *)(v54 + 16 * v55 + 8))
            return (_QWORD *)v38;
          return sub_1C5CA0FB8(a5, v83, v62, a6, v38, v55 | v50);
        }
LABEL_91:
        v73 = sub_1C6131264((unsigned __int8 *)&v83, v51, v52);
        v38 = sub_1C6367DA8(a5, v73, v74, v38, v53 | v50);
        v54 = *(_QWORD *)(v38 + 40);
        v55 = v75;
        v58 = v83;
        v57 = *(unsigned __int8 *)(v54 + 16 * v75);
        goto LABEL_78;
      }
      v25 = *(llvm::EVT **)(a5 + 56);
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v85);
    }
    v40 = (llvm::LLVMContext *)ExtendedSizeInBits;
    if ((_DWORD)v27 == 1)
    {
      v78 = (llvm::LLVMContext *)ExtendedSizeInBits;
      v40 = v78;
    }
    if ((int)v40 <= 31)
    {
      switch((_DWORD)v40)
      {
        case 1:
          v41 = 0;
          v24 = 0;
          v42 = 2;
          goto LABEL_59;
        case 0x10:
          v41 = 0;
          v24 = 0;
          v42 = 4;
          goto LABEL_59;
        case 8:
          v41 = 0;
          v24 = 0;
          v42 = 3;
          goto LABEL_59;
      }
    }
    else
    {
      switch((_DWORD)v40)
      {
        case 0x20:
          v41 = 0;
          v24 = 0;
          v42 = 5;
LABEL_59:
          v23 = (llvm *)(v42 | v41);
          v85 = (llvm *)(v42 | v41);
          v86 = v24;
          goto LABEL_60;
        case 0x40:
          v41 = 0;
          v24 = 0;
          v42 = 6;
          goto LABEL_59;
        case 0x80:
          v41 = 0;
          v24 = 0;
          v42 = 7;
          goto LABEL_59;
      }
    }
    ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(v25, v40);
    v24 = v77;
    v41 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
    v42 = ExtendedIntegerVT;
    goto LABEL_59;
  }
  llvm::APInt::getSplat(v10, (llvm::APInt *)(*(_QWORD *)(a1 + 80) + 24), (uint64_t)&v81);
  if (!(_BYTE)v83)
  {
    v28 = v84;
    if ((*(_DWORD *)(v84 + 8) & 0xFE) == 0x12)
      v29 = *(unsigned __int8 *)(**(_QWORD **)(v84 + 16) + 8);
    else
      v29 = *(_DWORD *)(v84 + 8);
    if (v29 == 13)
    {
      v18 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v83);
      goto LABEL_23;
    }
LABEL_49:
    sub_1C632993C((uint64_t)v83, v28, v16);
    if (v43 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v86, (uint64_t)&unk_1C866F1C0, (uint64_t)&v81);
    else
      llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v86, v43, &v81);
    v45 = v83;
    v46 = v84;
    v47 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a5 + 56), (llvm::LLVMContext *)&v85, v44);
    v38 = (uint64_t)sub_1C6366D64(a5, (uint64_t)v47, a6, v45, v46, 0);
    if ((_UNKNOWN *)v86 == &unk_1C866F1C0)
    {
      sub_1C4773C74(v87);
    }
    else if ((*(_DWORD *)(v86 + 8) - 64) <= 0xFFFFFF7F && v87[0])
    {
      MEMORY[0x1CAA32F9C](v87[0], 0x1000C8000313F17);
    }
    goto LABEL_32;
  }
  v17 = v83 - 120 >= 0x20 && v83 - 2 >= 6;
  if (v17 && v83 - 15 >= 0x3C)
  {
    v28 = v84;
    goto LABEL_49;
  }
  v18 = sub_1C47A8C74((unsigned __int8 *)&v83);
LABEL_23:
  v30 = v18;
  if ((_DWORD)v19 == 1)
  if (v30 <= 0x40)
  {
    v32 = *(_QWORD *)(a1 + 80);
    v33 = *(_DWORD *)(v32 + 32);
    if (v33 > 0x40)
      v34 = **(_QWORD **)(v32 + 24);
    else
      v34 = (uint64_t)(*(_QWORD *)(v32 + 24) << -(char)v33) >> -(char)v33;
    v31 = (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 1096))(*(_QWORD *)(a5 + 24), v34) ^ 1;
  }
  else
  {
    v31 = 1;
  }
  v35 = v83;
  v36 = v84;
  v37 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a5 + 56), (llvm::LLVMContext *)&v81, v20);
  v38 = (uint64_t)sub_1C5D3FAF8(a5, (uint64_t)v37, a6, v35, v36, 0, v31);
LABEL_32:
  if (v82 >= 0x41 && v81)
    MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
  return (_QWORD *)v38;
}

void sub_1C5D6481C(_QWORD *a1)
{
  *a1 = &off_1E8198BC8;
  *(_QWORD *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D64844(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t i;

  v2 = *(uint64_t **)(result + 24);
  v3 = *(_QWORD **)(result + 32);
  for (i = *v2; i != *v3 && *(_QWORD *)(i + 16) == a2; *v2 = i)
    i = *(_QWORD *)(i + 32);
  return result;
}

void sub_1C5D64874(_QWORD *a1)
{
  *a1 = &off_1E8198BC8;
  *(_QWORD *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D6489C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 24);
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)v2;
    v5 = 24 * v3;
    do
    {
      if (*v4 == a2)
        *v4 = 0;
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return result;
}

_QWORD *sub_1C5D648D4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63704E8(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C5D64998(const void **a1, const void **a2)
{
  size_t v4;
  const void *v5;
  const void *v6;
  size_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  size_t v15;
  int v16;
  BOOL v17;

  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = a2[1];
  if ((v4 & 0x80u) == 0)
    v6 = a2;
  else
    v6 = *a2;
  if ((v4 & 0x80u) == 0)
    v7 = v4 & 0x7F;
  else
    v7 = (size_t)a2[1];
  v8 = *((char *)a1 + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = (size_t)a1[1];
  if (v8 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v7 >= v9)
    v11 = v9;
  else
    v11 = v7;
  v12 = memcmp(v10, v6, v11);
  v13 = v9 < v7;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  if ((v4 & 0x80u) != 0)
    v4 = (size_t)v5;
  if (v9 >= v4)
    v15 = v4;
  else
    v15 = v9;
  v16 = memcmp(v6, v10, v15);
  v17 = v4 < v9;
  if (v16)
    v17 = v16 < 0;
  return !v17 && *((_DWORD *)a1 + 6) < *((_DWORD *)a2 + 6);
}

void sub_1C5D64A88(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C637079C(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 48 * v4;
      do
      {
        *v5 = -4096;
        v5 += 6;
        v6 -= 48;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(48 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 48 * v10;
        do
        {
          *v9 = -4096;
          v9 += 6;
          v11 -= 48;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

_QWORD *sub_1C5D64B94(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  unsigned __int8 *v6;
  uint64_t **v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;

  v7 = a1 + 1;
  v6 = (unsigned __int8 *)a1[1];
  if (v6)
  {
    v8 = *((_QWORD *)a2 + 1);
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = v6;
        v11 = v6[32];
        v12 = v10[5];
        v13 = v8 < v12;
        if (v9 != v11)
          v13 = v9 < v11;
        if (!v13)
          break;
        v6 = (unsigned __int8 *)*v10;
        v7 = (uint64_t **)v10;
        if (!*v10)
          goto LABEL_15;
      }
      v14 = v12 < v8;
      v15 = v9 == v11 ? v14 : v11 < v9;
      if (v15 != 1)
        break;
      v6 = (unsigned __int8 *)v10[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v10 + 1);
        goto LABEL_15;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_15:
    v16 = v10;
    v10 = operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = **a4;
    v10[6] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v16;
    *v7 = v10;
    v17 = (uint64_t *)**a1;
    v18 = v10;
    if (v17)
    {
      *a1 = v17;
      v18 = *v7;
    }
    sub_1C4768E74(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void sub_1C5D64CB0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5D64CC4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8198CC8;
  return result;
}

void sub_1C5D64CE8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8198CC8;
}

uint64_t sub_1C5D64D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::APInt *v3;
  unsigned int v4;
  BOOL v5;
  int v6;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v3 = (llvm::APInt *)(v2 + 24);
  v4 = *(_DWORD *)(v2 + 32);
  if (v4 > 0x40)
    v5 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
  else
    v5 = *(_QWORD *)v3 == 0;
  v6 = v5;
  return v6 ^ 1u;
}

char **sub_1C5D64D4C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        v6 = *(_QWORD *)&v2[v4 - 16];
        if (v6)
        {
          v7 = v4;
          v8 = v2;
          MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
          v4 = v7;
          v2 = v8;
        }
      }
      v4 -= 16;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C5D64DE4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5D64DF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8198D10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5D64E30(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8198D10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C5D64E50(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v4;
  llvm::APInt *v5;
  llvm::Type *v6;
  unsigned int v7;

  if (!*(_QWORD *)a2)
    return 1;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = (llvm::APInt *)(v4 + 24);
  v6 = sub_1C6329368((unsigned int *)(a1 + 8), a2, a3);
  v7 = *(_DWORD *)(v4 + 32);
  if (v7 >= 0x41)
  {
    if (v7 - llvm::APInt::countLeadingZerosSlowCase(v5) > 0x40)
      return 1;
    v5 = *(llvm::APInt **)v5;
  }
  return *(_QWORD *)v5 >= (unint64_t)v6;
}

unsigned int *sub_1C5D64EC4(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = result[2];
  if (*(_QWORD *)result + 8 * v6 == a2)
    return sub_1C63715C0(result, a3);
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    do
    {
      ++v7;
      v8 = *(_QWORD *)(v8 + 32);
    }
    while (v8);
  }
  v9 = (a2 - v5) >> 3;
  if (v7 + v6 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7 + v6, 8);
    v5 = *(_QWORD *)v4;
    v6 = v4[2];
  }
  v10 = (char *)(v5 + 8 * v9);
  v11 = (char *)(v5 + 8 * v6);
  v12 = (v11 - v10) >> 3;
  if (v12 >= v7)
  {
    v13 = &v11[-8 * v7];
    result = sub_1C6177054(v4, v13, (char *)(v5 + 8 * v6));
    if (v13 != v10)
      result = (unsigned int *)memmove(&v11[-(v13 - v10)], v10, v13 - v10);
    while (v3)
    {
      *(_QWORD *)v10 = *(_QWORD *)(v3 + 16);
      v10 += 8;
      v3 = *(_QWORD *)(v3 + 32);
    }
  }
  else
  {
    v4[2] = v6 + v7;
    if (v9 != v6)
    {
      result = (unsigned int *)memcpy((void *)(v5 + 8 * (v6 + v7) - 8 * v12), v10, v11 - v10);
      do
      {
        *(_QWORD *)v10 = *(_QWORD *)(v3 + 16);
        v10 += 8;
        v3 = *(_QWORD *)(v3 + 32);
        --v12;
      }
      while (v12);
    }
    for (; v3; v3 = *(_QWORD *)(v3 + 32))
    {
      *(_QWORD *)v11 = *(_QWORD *)(v3 + 16);
      v11 += 8;
    }
  }
  return result;
}

uint64_t sub_1C5D65018(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

_QWORD *sub_1C5D65034(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3)
{
  unsigned __int8 *v5;
  uint64_t **v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = (unsigned __int8 *)a1[1];
  if (v5)
  {
    v7 = *((_QWORD *)a2 + 1);
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = v5;
        v10 = v5[32];
        v11 = v9[5];
        v12 = v7 < v11;
        if (v8 != v10)
          v12 = v8 < v10;
        if (!v12)
          break;
        v5 = (unsigned __int8 *)*v9;
        v6 = (uint64_t **)v9;
        if (!*v9)
          goto LABEL_15;
      }
      v13 = v11 < v7;
      v14 = v8 == v10 ? v13 : v10 < v8;
      if (v14 != 1)
        break;
      v5 = (unsigned __int8 *)v9[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v9 + 1);
        goto LABEL_15;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_15:
    v15 = v9;
    v9 = operator new(0x30uLL);
    *((_OWORD *)v9 + 2) = *a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v15;
    *v6 = v9;
    v16 = (uint64_t *)**a1;
    v17 = v9;
    if (v16)
    {
      *a1 = v16;
      v17 = *v6;
    }
    sub_1C4768E74(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void **sub_1C5D65144()
{
  void **v0;
  _DWORD *v1;
  int v2;
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _BYTE v14[7];

  v0 = (void **)operator new();
  v1 = operator new(0xB30uLL);
  v2 = 0;
  *v0 = v1;
  v0[1] = v1;
  v0[2] = v1 + 716;
  do
  {
    v3 = (unint64_t)v0[2];
    if ((unint64_t)v1 < v3)
    {
      *(_BYTE *)v1 = v2;
      v1[1] = *(_DWORD *)&v14[3];
      *(_DWORD *)((char *)v1 + 1) = *(_DWORD *)v14;
      *((_QWORD *)v1 + 1) = 0;
      v4 = (char *)(v1 + 4);
      goto LABEL_20;
    }
    v5 = *v0;
    v6 = ((char *)v1 - (_BYTE *)*v0) >> 4;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60)
      abort();
    v8 = v3 - (_QWORD)v5;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 60)
        sub_1C4764EE4();
      v10 = (char *)operator new(16 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[16 * v6];
    v12 = &v10[16 * v9];
    *v11 = v2;
    *((_QWORD *)v11 + 1) = 0;
    v4 = v11 + 16;
    if (v1 == v5)
    {
      *v0 = v11;
      v0[1] = v4;
      v0[2] = v12;
LABEL_19:
      operator delete(v1);
      goto LABEL_20;
    }
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v1 - 1);
      v11 -= 16;
      v1 -= 4;
    }
    while (v1 != v5);
    v1 = *v0;
    *v0 = v11;
    v0[1] = v4;
    v0[2] = v12;
    if (v1)
      goto LABEL_19;
LABEL_20:
    v0[1] = v4;
    ++v2;
    v1 = v4;
  }
  while (v2 != 179);
  return v0;
}

void **sub_1C5D652B0(void **result)
{
  void **v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C5D652F8()
{
  int v1;
  int *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = &v1;
  v4.n128_u64[0] = (unint64_t)"Gang up loads and stores generated by inlining of memcpy";
  v4.n128_u64[1] = 56;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED825050, "enable-memcpy-dag-opt", &v3, (_BYTE **)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED825050, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Number limit for gluing ld/st of memcpy.";
  v4.n128_u64[1] = 40;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED825110, "ldstmemcpy-glue-max", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED825110, &dword_1C475E000);
}

uint64_t sub_1C5D653D4(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v4 = *a1;
  v5 = *a2;
  if (*a1)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  if (!*((_BYTE *)a1 + 40) || *((_BYTE *)a2 + 40) == 0)
    return 0;
  v8 = a2[4] - a1[4];
  *a4 = v8;
  if (a2[2] != a1[2]
    || *((_DWORD *)a2 + 6) != *((_DWORD *)a1 + 6)
    || *((unsigned __int8 *)a2 + 48) != *((unsigned __int8 *)a1 + 48))
  {
    return 0;
  }
  if (v5 == v4 && *((_DWORD *)a2 + 2) == *((_DWORD *)a1 + 2))
    return 1;
  v9 = *(unsigned __int16 *)(v4 + 24);
  v10 = v9 > 0x26;
  v11 = (1 << v9) & 0x6000006000;
  if (v10 || v11 == 0)
  {
    v13 = *a1;
  }
  else
  {
    v13 = *a1;
    if (*a1)
    {
      v14 = *(unsigned __int16 *)(v5 + 24);
      if (v14 <= 0x26 && ((1 << v14) & 0x6000006000) != 0)
      {
        v15 = *a2;
        if (*a2)
        {
          if (*(_QWORD *)(v13 + 80) == *(_QWORD *)(v15 + 80))
          {
            v16 = *(_QWORD *)(v15 + 88);
            v17 = *(_QWORD *)(v13 + 88);
LABEL_43:
            v27 = v16 + v8 - v17;
            goto LABEL_44;
          }
        }
      }
    }
  }
  v18 = *(unsigned __int16 *)(v13 + 24);
  if (v18 == 41 || v18 == 17)
  {
    v19 = *(unsigned __int16 *)(v5 + 24);
    if (v19 == 41 || v19 == 17)
    {
      v20 = *(_DWORD *)(v13 + 88);
      v21 = *(_DWORD *)(v5 + 88);
      if (((v21 ^ v20) & 0x80000000) == 0 && *(_QWORD *)(v13 + 80) == *(_QWORD *)(v5 + 80))
      {
        v27 = v8 + (v21 & 0x7FFFFFFF) - (v20 & 0x7FFFFFFF);
LABEL_44:
        *a4 = v27;
        return 1;
      }
    }
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 56);
  if (v18 != 39 && v18 != 15)
    return 0;
  v23 = *(unsigned __int16 *)(v5 + 24);
  if (v23 != 39 && v23 != 15)
    return 0;
  v24 = *(_DWORD *)(v13 + 76);
  v25 = *(_DWORD *)(v5 + 76);
  if (v24 == v25)
    return 1;
  if ((v24 & 0x80000000) == 0)
    return 0;
  result = 0;
  v28 = *(_DWORD *)(v22 + 32);
  if (v25 >= -v28 && v25 < 0 && v24 >= -v28)
  {
    v29 = *(_QWORD *)(v22 + 8);
    v16 = *(_QWORD *)(v29 + 40 * (v28 + v25));
    v17 = *(_QWORD *)(v29 + 40 * (v28 + v24));
    goto LABEL_43;
  }
  return result;
}

uint64_t sub_1C5D655C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char *a8)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  int v19;
  int v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41[7];
  uint64_t v42[7];

  sub_1C5D657F8(a1, a7, (uint64_t)v42);
  sub_1C5D657F8(a4, a7, (uint64_t)v41);
  v15 = v42[0];
  if (!v42[0])
    return 0;
  v16 = v41[0];
  if (!v41[0])
    return 0;
  v40 = 0;
  if (!a3 || !a6 || !sub_1C5D653D4(v42, v41, a7, &v40))
  {
    v18 = *(unsigned __int16 *)(v15 + 24);
    if (v18 == 15 || v18 == 39)
    {
      v19 = *(unsigned __int16 *)(v16 + 24);
      if (v19 == 39 || v19 == 15)
      {
        if (v15 == v16)
        {
          v16 = v15;
        }
        else
        {
          v21 = *(_DWORD *)(v15 + 76);
          if ((v21 & 0x80000000) == 0)
          {
            v22 = 0;
            goto LABEL_67;
          }
          v22 = 0;
          v38 = -*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 40) + 56) + 32);
          if (v21 < v38)
            goto LABEL_67;
          v22 = 0;
          v39 = *(_DWORD *)(v16 + 76);
          if ((v39 & 0x80000000) == 0 || v39 < v38)
            goto LABEL_67;
        }
      }
    }
    v24 = *(unsigned __int16 *)(v16 + 24);
    v25 = v18 == 39 || v18 == 15;
    v26 = (_DWORD)v24 == 39 || v24 == 15;
    v27 = (v18 < 0x27) & (0x6000006000uLL >> v18);
    v28 = v18 == 17 || v18 == 41;
    v29 = v28;
    v30 = v25 | v27;
    if (v28)
      v30 = 1;
    v31 = (v24 < 0x27) & (0x6000006000uLL >> v24);
    v32 = v24 == 17 || v24 == 41;
    v33 = v32;
    v34 = v26 | v31;
    if (v32)
      v34 = 1;
    if (v30 == 1 && v34 != 0)
    {
      v22 = 0;
      if (v25 != v26 || ((v27 ^ v31) & 1) != 0 || ((v29 ^ v33) & 1) != 0)
        goto LABEL_67;
      if ((v27 & v31) == 1)
      {
        v36 = *(_QWORD *)(v15 + 80);
        v37 = *(_QWORD *)(v16 + 80);
        if (v36 != v37 && *(_BYTE *)(v36 + 16) != 1)
        {
          v22 = 0;
          result = 0;
          if (*(_BYTE *)(v37 + 16) == 1)
            return result;
LABEL_67:
          *a8 = v22;
          return 1;
        }
      }
    }
    return 0;
  }
  if ((v40 & 0x8000000000000000) == 0 && a2 != -1)
  {
    v17 = a2 <= v40;
    goto LABEL_22;
  }
  result = 0;
  if (v40 < 0 && a5 != -1)
  {
    v17 = (v40 + a5 < 0) ^ __OFADD__(v40, a5) | (v40 + a5 == 0);
LABEL_22:
    if (v17)
      v22 = 0;
    else
      v22 = 1;
    goto LABEL_67;
  }
  return result;
}

uint64_t sub_1C5D657F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _QWORD *v56;
  unsigned int *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  int v64;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;

  v3 = result;
  v5 = *(unsigned __int16 *)(result + 24);
  if (!result || (v5 - 255) < 0xFFFFFFFE)
  {
    if (!result || (v5 & 0xFFFE) != 0x138)
    {
      *(_QWORD *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      return result;
    }
    v6 = *(_QWORD *)(result + 88);
    *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(result + 32) + 40);
    v7 = (_QWORD *)(a3 + 16);
    if (v6 < 0)
    {
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 0;
      *v7 = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    }
    *v7 = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v6;
LABEL_7:
    *(_BYTE *)(a3 + 40) = 1;
    *(_BYTE *)(a3 + 48) = 0;
    return result;
  }
  v9 = (_QWORD *)sub_1C6131AB0(result);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 1712))(*(_QWORD *)(a2 + 24), *v9, v9[1]);
  v10 = result;
  v12 = v11;
  v13 = (*(unsigned __int16 *)(v3 + 26) >> 7) & 7;
  if (v13 != 2)
  {
    if (v13 != 1)
    {
      v20 = 0;
      goto LABEL_35;
    }
    v14 = 120;
    if (*(_WORD *)(v3 + 24) == 253)
      v14 = 80;
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + v14);
    v16 = *(unsigned __int16 *)(v15 + 24);
    if (v16 == 35 || v16 == 11)
    {
      v18 = *(_QWORD *)(v15 + 80);
      v19 = *(_DWORD *)(v18 + 32);
      if (v19 > 0x40)
        v20 = **(_QWORD **)(v18 + 24);
      else
        v20 = (uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v19) >> -(char)v19;
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  v21 = 120;
  if (*(_WORD *)(v3 + 24) == 253)
    v21 = 80;
  v22 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + v21);
  v23 = *(unsigned __int16 *)(v22 + 24);
  if (v23 != 35 && v23 != 11)
  {
LABEL_31:
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_7;
  }
  v25 = *(_QWORD *)(v22 + 80);
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 > 0x40)
    v27 = **(_QWORD **)(v25 + 24);
  else
    v27 = (uint64_t)(*(_QWORD *)(v25 + 24) << -(char)v26) >> -(char)v26;
  v20 = -v27;
LABEL_35:
  while (1)
  {
    v28 = *(unsigned __int16 *)(v10 + 24);
    if ((v28 - 253) >= 2)
      break;
    v36 = *(unsigned __int16 *)(v10 + 26);
    if ((v36 & 0x380) == 0 || (_DWORD)v12 != (v28 == 253))
      goto LABEL_81;
    v37 = v28 == 253 ? 80 : 120;
    v38 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + v37);
    v39 = *(unsigned __int16 *)(v38 + 24);
    if (v39 != 35 && v39 != 11)
      goto LABEL_81;
    v41 = *(_QWORD *)(v38 + 80);
    v42 = *(_DWORD *)(v41 + 32);
    if (v42 > 0x40)
      v43 = **(_QWORD **)(v41 + 24);
    else
      v43 = (uint64_t)(*(_QWORD *)(v41 + 24) << -(char)v42) >> -(char)v42;
    v50 = (v36 >> 7) & 7;
    if (v50 == 4 || v50 == 2)
      v20 -= v43;
    else
      v20 += v43;
    v51 = *(_QWORD *)(a2 + 24);
    result = sub_1C6131AB0(v10);
LABEL_75:
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v51 + 1712))(v51, *(_QWORD *)result, *(_QWORD *)(result + 8));
    v10 = result;
    v12 = v12 & 0xFFFFFFFF00000000 | v52;
  }
  if (v28 == 56)
  {
    result = *(_QWORD *)(v10 + 32);
    v44 = *(_QWORD *)(result + 40);
    v45 = *(unsigned __int16 *)(v44 + 24);
    if (v45 != 35 && v45 != 11)
      goto LABEL_79;
    v47 = *(_QWORD *)(v44 + 80);
    v48 = *(_DWORD *)(v47 + 32);
    if (v48 > 0x40)
      v49 = **(_QWORD **)(v47 + 24);
    else
      v49 = (uint64_t)(*(_QWORD *)(v47 + 24) << -(char)v48) >> -(char)v48;
    v20 += v49;
    v51 = *(_QWORD *)(a2 + 24);
    goto LABEL_75;
  }
  if (v28 != 172)
    goto LABEL_77;
  v29 = *(uint64_t **)(v10 + 32);
  v30 = v29[5];
  v31 = *(unsigned __int16 *)(v30 + 24);
  if (v31 != 35 && v31 != 11)
    goto LABEL_81;
  result = sub_1C63686D8(a2, *v29, v29[1], *(_QWORD *)(v30 + 80) + 24, 0);
  if ((result & 1) != 0)
  {
    v33 = *(_QWORD *)(v30 + 80);
    v34 = *(_DWORD *)(v33 + 32);
    if (v34 > 0x40)
      v35 = **(_QWORD **)(v33 + 24);
    else
      v35 = (uint64_t)(*(_QWORD *)(v33 + 24) << -(char)v34) >> -(char)v34;
    v20 += v35;
    v51 = *(_QWORD *)(a2 + 24);
    result = *(_QWORD *)(v10 + 32);
    goto LABEL_75;
  }
  v28 = *(unsigned __int16 *)(v10 + 24);
LABEL_77:
  if (v28 != 56)
  {
LABEL_81:
    v53 = 0;
    v54 = 0;
    v55 = 0;
LABEL_82:
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v53;
    *(_QWORD *)(a3 + 24) = v54;
    goto LABEL_83;
  }
  result = *(_QWORD *)(v10 + 32);
  v44 = *(_QWORD *)(result + 40);
  v45 = *(unsigned __int16 *)(v44 + 24);
LABEL_79:
  if (v45 == 58)
  {
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v20;
    goto LABEL_7;
  }
  if (v45 == 198)
  {
    v56 = *(_QWORD **)(v44 + 32);
    v58 = *v56;
    v57 = (unsigned int *)(v56 + 1);
    v44 = v58;
    v59 = *(unsigned __int16 *)(v58 + 24);
  }
  else
  {
    v57 = (unsigned int *)(result + 48);
    v59 = v45;
  }
  v10 = *(_QWORD *)result;
  v60 = *(_QWORD *)(result + 8);
  v61 = *v57;
  if (v59 == 56)
  {
    v62 = *(unsigned int **)(v44 + 32);
    v63 = *((_QWORD *)v62 + 5);
    v64 = *(unsigned __int16 *)(v63 + 24);
    if (v64 == 35 || v64 == 11)
    {
      v66 = *(_QWORD *)(v63 + 80);
      v67 = *(_DWORD *)(v66 + 32);
      if (v67 > 0x40)
        v68 = **(_QWORD **)(v66 + 24);
      else
        v68 = (uint64_t)(*(_QWORD *)(v66 + 24) << -(char)v67) >> -(char)v67;
      v20 += v68;
      v53 = *(_QWORD *)v62;
      v55 = *(unsigned __int16 *)(*(_QWORD *)v62 + 24) == 198;
      if (*(_WORD *)(*(_QWORD *)v62 + 24) == 198)
      {
        v62 = *(unsigned int **)(v53 + 32);
        v53 = *(_QWORD *)v62;
      }
      v54 = v62[2];
      v12 = v12 & 0xFFFFFFFF00000000 | *(_QWORD *)(result + 8);
      goto LABEL_82;
    }
  }
  v55 = v45 == 198;
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v60;
  *(_QWORD *)(a3 + 16) = v44;
  *(_QWORD *)(a3 + 24) = v61;
LABEL_83:
  *(_QWORD *)(a3 + 32) = v20;
  *(_BYTE *)(a3 + 40) = 1;
  *(_BYTE *)(a3 + 48) = v55;
  return result;
}

void sub_1C5D65C60(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  size_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  __int16 v25;
  int v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  const char *v34;
  const char *v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  int v38;
  _QWORD *v39;
  __int128 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  const char *v44;
  __int16 v45;
  unsigned __int16 v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  unsigned int v52;
  int v53;
  unsigned __int16 v54;
  int v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  int v58;
  int v59;
  char *v60;
  __int128 v61;
  const char *v62;
  int v63;
  int v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  int v67;
  int v68;
  unsigned __int16 v69;
  unsigned int v70;
  int v71;
  unsigned __int16 v72;
  unsigned __int16 v73;
  unsigned __int16 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  const char *v78;
  size_t v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  const std::string::value_type *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  std::string *v96;
  std::string::size_type v97;
  std::string *v98;
  std::string::size_type v99;
  std::string v100;
  std::string v101;
  char v102;
  uint64_t v103;

  v5 = (char *)a3;
  v103 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)(a1 + 24);
  switch(*(_WORD *)(a1 + 24))
  {
    case 1:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28261;
      v15 = "EntryToken";
      goto LABEL_426;
    case 2:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1919906915;
      v24 = "TokenFactor";
      goto LABEL_421;
    case 3:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29816;
      v15 = "AssertSext";
      goto LABEL_426;
    case 4:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29816;
      v15 = "AssertZext";
      goto LABEL_426;
    case 5:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1852270956;
      v24 = "AssertAlign";
      goto LABEL_421;
    case 6:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 27491;
      v15 = "BasicBlock";
      goto LABEL_426;
    case 7:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 101;
      v16 = "ValueType";
      goto LABEL_445;
    case 8:
      __asm { BR              X10 }
      return;
    case 9:
      *((_BYTE *)a3 + 23) = 8;
      v17 = 0x747369676552;
      goto LABEL_322;
    case 0xA:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1802723661;
      v34 = "RegisterMask";
      goto LABEL_435;
    case 0xB:
      if ((*(_BYTE *)(a1 + 26) & 8) != 0)
      {
        v13 = "OpaqueConstant";
        goto LABEL_456;
      }
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x746E6174736E6F43;
LABEL_447:
      *(_QWORD *)v5 = v18;
      v5[8] = 0;
      return;
    case 0xC:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 20550;
      v15 = "ConstantFP";
      goto LABEL_426;
    case 0xD:
      v19 = "GlobalAddress";
      goto LABEL_437;
    case 0xE:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "GlobalTLSAddress";
      goto LABEL_324;
    case 0xF:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 30821;
      v15 = "FrameIndex";
      goto LABEL_426;
    case 0x10:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 101;
      v16 = "JumpTable";
      goto LABEL_445;
    case 0x11:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1819242320;
      v34 = "ConstantPool";
      goto LABEL_435;
    case 0x12:
      v13 = "ExternalSymbol";
      goto LABEL_456;
    case 0x13:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1936942450;
      v34 = "BlockAddress";
      goto LABEL_435;
    case 0x14:
      *((_BYTE *)a3 + 23) = 20;
      *((_DWORD *)a3 + 4) = 1936942450;
      v43 = "PtrAuthGlobalAddress";
      goto LABEL_459;
    case 0x15:
      *((_BYTE *)a3 + 23) = 19;
      *(_DWORD *)((char *)a3 + 15) = 1162625601;
      v22 = "GLOBAL_OFFSET_TABLE";
      goto LABEL_360;
    case 0x16:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 82;
      v16 = "FRAMEADDR";
      goto LABEL_445;
    case 0x17:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 21060;
      v15 = "RETURNADDR";
      goto LABEL_426;
    case 0x18:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "ADDROFRETURNADDR";
      goto LABEL_324;
    case 0x19:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 89;
      v16 = "SPONENTRY";
      goto LABEL_445;
    case 0x1A:
      v19 = "LOCAL_RECOVER";
      goto LABEL_437;
    case 0x1B:
      v19 = "READ_REGISTER";
      goto LABEL_437;
    case 0x1C:
      v13 = "WRITE_REGISTER";
      goto LABEL_456;
    case 0x1D:
      *((_BYTE *)a3 + 23) = 20;
      *((_DWORD *)a3 + 4) = 1413829446;
      v43 = "FRAME_TO_ARGS_OFFSET";
      goto LABEL_459;
    case 0x1E:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1095123807;
      v34 = "EH_DWARF_CFA";
      goto LABEL_435;
    case 0x1F:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 78;
      v16 = "EH_RETURN";
      goto LABEL_445;
    case 0x20:
      v13 = "EH_SJLJ_SETJMP";
      goto LABEL_456;
    case 0x21:
      v21 = "EH_SJLJ_LONGJMP";
      goto LABEL_327;
    case 0x22:
      v44 = "EH_SJLJ_SETUP_DISPATCH";
      goto LABEL_449;
    case 0x23:
      if ((*(_BYTE *)(a1 + 26) & 8) != 0)
      {
        *((_BYTE *)a3 + 23) = 20;
        *((_DWORD *)a3 + 4) = 1953390964;
        v43 = "OpaqueTargetConstant";
        goto LABEL_459;
      }
      v13 = "TargetConstant";
LABEL_456:
      *((_BYTE *)a3 + 23) = 14;
      *a3 = *(_QWORD *)v13;
      *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v13 + 6);
      *((_BYTE *)a3 + 14) = 0;
      return;
    case 0x24:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "TargetConstantFP";
      goto LABEL_324;
    case 0x25:
      *((_BYTE *)a3 + 23) = 19;
      *(_DWORD *)((char *)a3 + 15) = 1936942450;
      v22 = "TargetGlobalAddress";
      goto LABEL_360;
    case 0x26:
      v44 = "TargetGlobalTLSAddress";
      goto LABEL_449;
    case 0x27:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "TargetFrameIndex";
      goto LABEL_324;
    case 0x28:
      v21 = "TargetJumpTable";
      goto LABEL_327;
    case 0x29:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 27759;
      v23 = "TargetConstantPool";
      goto LABEL_368;
    case 0x2A:
      *((_BYTE *)a3 + 23) = 20;
      *((_DWORD *)a3 + 4) = 1819239021;
      v43 = "TargetExternalSymbol";
      goto LABEL_459;
    case 0x2B:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 29555;
      v23 = "TargetBlockAddress";
      goto LABEL_368;
    case 0x2C:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x6C6F626D7953434DLL;
      goto LABEL_447;
    case 0x2D:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2019910766;
      v24 = "TargetIndex";
      goto LABEL_421;
    case 0x2E:
    case 0x2F:
    case 0x30:
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40 * ((_DWORD)v6 != 46)) + 80);
      v8 = (_QWORD *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u)
        v8 = (_QWORD *)*v8;
      v9 = (_QWORD *)*v8;
      if (*v8 <= 0x30EC)
      {
        v10 = off_1E814EB28[*v8];
        if (!v10)
        {
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_QWORD *)v5 + 2) = 0;
          return;
        }
        v11 = strlen(v10);
        if (v11 <= 0x7FFFFFFFFFFFFFF7)
        {
          v12 = v11;
          if (v11 >= 0x17)
          {
            v81 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17)
              v81 = v11 | 7;
            v82 = v81 + 1;
            v83 = (char *)operator new(v81 + 1);
            *((_QWORD *)v5 + 1) = v12;
            *((_QWORD *)v5 + 2) = v82 | 0x8000000000000000;
            *(_QWORD *)v5 = v83;
            v5 = v83;
          }
          else
          {
            v5[23] = v11;
            if (!v11)
              goto LABEL_472;
          }
          memmove(v5, v10, v12);
LABEL_472:
          v5[v12] = 0;
          return;
        }
LABEL_502:
        abort();
      }
      if (a2)
      {
        v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
        if (v14)
          (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v14 + 16))(v14, v9, 0, 0);
      }
      else
      {
        v5[23] = 17;
        *((_WORD *)v5 + 8) = 99;
        v35 = "Unknown intrinsic";
LABEL_454:
        *(_OWORD *)v5 = *(_OWORD *)v35;
      }
      return;
    case 0x31:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 103;
      v16 = "CopyToReg";
      goto LABEL_445;
    case 0x32:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1734693485;
      v24 = "CopyFromReg";
      goto LABEL_421;
    case 0x33:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1701080693;
      v25 = 102;
      goto LABEL_390;
    case 0x34:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1701147238;
      v45 = 25978;
      goto LABEL_408;
    case 0x35:
      v21 = "extract_element";
      goto LABEL_327;
    case 0x36:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29289;
      v15 = "build_pair";
      goto LABEL_426;
    case 0x37:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1936029036;
      v34 = "merge_values";
      goto LABEL_435;
    case 0x38:
      *((_BYTE *)a3 + 23) = 3;
      v46 = 25697;
      goto LABEL_224;
    case 0x39:
      *((_BYTE *)a3 + 23) = 3;
      v47 = 6452595;
      goto LABEL_233;
    case 0x3A:
      *((_BYTE *)a3 + 23) = 3;
      v37 = 30061;
      goto LABEL_230;
    case 0x3B:
      *((_BYTE *)a3 + 23) = 4;
      v48 = 1986618470;
      goto LABEL_137;
    case 0x3C:
      *((_BYTE *)a3 + 23) = 4;
      v49 = 1986618470;
      goto LABEL_139;
    case 0x3D:
      *((_BYTE *)a3 + 23) = 4;
      v48 = 1835364966;
LABEL_137:
      v26 = v48 + 13;
      goto LABEL_330;
    case 0x3E:
      *((_BYTE *)a3 + 23) = 4;
      v49 = 1835364966;
LABEL_139:
      v26 = v49 + 15;
      goto LABEL_330;
    case 0x3F:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      v16 = "smul_lohi";
      goto LABEL_445;
    case 0x40:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      v16 = "umul_lohi";
      goto LABEL_445;
    case 0x41:
      *((_BYTE *)a3 + 23) = 7;
      v50 = 25715;
      goto LABEL_144;
    case 0x42:
      *((_BYTE *)a3 + 23) = 7;
      v50 = 25717;
LABEL_144:
      *(_DWORD *)v5 = v50 | 0x76690000;
      v51 = 29302;
      goto LABEL_405;
    case 0x43:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1702063201;
      v24 = "carry_false";
      goto LABEL_421;
    case 0x44:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1667523681;
      goto LABEL_330;
    case 0x45:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1667396979;
      goto LABEL_330;
    case 0x46:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1701078113;
      goto LABEL_330;
    case 0x47:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1700951411;
      goto LABEL_330;
    case 0x48:
      *((_BYTE *)a3 + 23) = 8;
      v52 = 1667523681;
      goto LABEL_150;
    case 0x49:
      *((_BYTE *)a3 + 23) = 8;
      v52 = 1667396979;
LABEL_150:
      v18 = v52 | 0x7972726100000000;
      goto LABEL_447;
    case 0x4A:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2037543521;
      v24 = "saddo_carry";
      goto LABEL_421;
    case 0x4B:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2037543521;
      v24 = "ssubo_carry";
      goto LABEL_421;
    case 0x4C:
      *((_BYTE *)a3 + 23) = 5;
      v27 = 24947;
      goto LABEL_152;
    case 0x4D:
      *((_BYTE *)a3 + 23) = 5;
      v27 = 24949;
LABEL_152:
      v53 = v27 | 0x64640000;
      goto LABEL_157;
    case 0x4E:
      *((_BYTE *)a3 + 23) = 5;
      v28 = 29555;
      goto LABEL_154;
    case 0x4F:
      *((_BYTE *)a3 + 23) = 5;
      v28 = 29557;
LABEL_154:
      v53 = v28 | 0x62750000;
      goto LABEL_157;
    case 0x50:
      *((_BYTE *)a3 + 23) = 5;
      v29 = 28019;
      goto LABEL_156;
    case 0x51:
      *((_BYTE *)a3 + 23) = 5;
      v29 = 28021;
LABEL_156:
      v53 = v29 | 0x6C750000;
LABEL_157:
      *(_DWORD *)v5 = v53;
      v25 = 111;
      goto LABEL_390;
    case 0x52:
      *((_BYTE *)a3 + 23) = 7;
      v54 = 24947;
      goto LABEL_160;
    case 0x53:
      *((_BYTE *)a3 + 23) = 7;
      v54 = 24949;
LABEL_160:
      *(_DWORD *)v5 = v54 | 0x64640000;
      v31 = 29540;
      goto LABEL_163;
    case 0x54:
      *((_BYTE *)a3 + 23) = 7;
      v30 = 29555;
      goto LABEL_44;
    case 0x55:
      *((_BYTE *)a3 + 23) = 7;
      v30 = 29557;
LABEL_44:
      *(_DWORD *)v5 = v30 | 0x62750000;
      v31 = 29538;
      goto LABEL_163;
    case 0x56:
      *((_BYTE *)a3 + 23) = 7;
      v32 = 29555;
      goto LABEL_162;
    case 0x57:
      *((_BYTE *)a3 + 23) = 7;
      v32 = 29557;
LABEL_162:
      *(_DWORD *)v5 = v32 | 0x6C680000;
      v31 = 29548;
LABEL_163:
      v55 = v31 | 0x74610000;
      goto LABEL_428;
    case 0x58:
      *((_BYTE *)a3 + 23) = 7;
      v56 = 28019;
      goto LABEL_166;
    case 0x59:
      *((_BYTE *)a3 + 23) = 7;
      v56 = 28021;
LABEL_166:
      *(_DWORD *)v5 = v56 | 0x6C750000;
      v57 = 26220;
      goto LABEL_171;
    case 0x5A:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      v15 = "smulfixsat";
      goto LABEL_426;
    case 0x5B:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      v15 = "umulfixsat";
      goto LABEL_426;
    case 0x5C:
      *((_BYTE *)a3 + 23) = 7;
      v33 = 25715;
      goto LABEL_170;
    case 0x5D:
      *((_BYTE *)a3 + 23) = 7;
      v33 = 25717;
LABEL_170:
      *(_DWORD *)v5 = v33 | 0x76690000;
      v57 = 26230;
LABEL_171:
      v55 = v57 | 0x78690000;
      goto LABEL_428;
    case 0x5E:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      v15 = "sdivfixsat";
      goto LABEL_426;
    case 0x5F:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      v15 = "udivfixsat";
      goto LABEL_426;
    case 0x60:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1684300134;
      goto LABEL_330;
    case 0x61:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1651864422;
      goto LABEL_330;
    case 0x62:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1819635046;
      goto LABEL_330;
    case 0x63:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1986618470;
      goto LABEL_330;
    case 0x64:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1835364966;
      goto LABEL_330;
    case 0x65:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684300134;
      v24 = "strict_fadd";
      goto LABEL_421;
    case 0x66:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1651864422;
      v24 = "strict_fsub";
      goto LABEL_421;
    case 0x67:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1819635046;
      v24 = "strict_fmul";
      goto LABEL_421;
    case 0x68:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1986618470;
      v24 = "strict_fdiv";
      goto LABEL_421;
    case 0x69:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1835364966;
      v24 = "strict_frem";
      goto LABEL_421;
    case 0x6A:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 24941;
      v15 = "strict_fma";
      goto LABEL_426;
    case 0x6B:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1953657203;
      v34 = "strict_fsqrt";
      goto LABEL_435;
    case 0x6C:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2003791974;
      v24 = "strict_fpow";
      goto LABEL_421;
    case 0x6D:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1769434992;
      v34 = "strict_fpowi";
      goto LABEL_435;
    case 0x6E:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1852404582;
      v24 = "strict_fsin";
      goto LABEL_421;
    case 0x6F:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1936679782;
      v24 = "strict_fcos";
      goto LABEL_421;
    case 0x70:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1886938470;
      v24 = "strict_fexp";
      goto LABEL_421;
    case 0x71:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 846231653;
      v34 = "strict_fexp2";
      goto LABEL_435;
    case 0x72:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1735355494;
      v24 = "strict_flog";
      goto LABEL_421;
    case 0x73:
      v19 = "strict_flog10";
      goto LABEL_437;
    case 0x74:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 845639532;
      v34 = "strict_flog2";
      goto LABEL_435;
    case 0x75:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1953393010;
      v34 = "strict_frint";
      goto LABEL_435;
    case 0x76:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      v35 = "strict_fnearbyint";
      goto LABEL_454;
    case 0x77:
      v13 = "strict_fmaxnum";
      goto LABEL_456;
    case 0x78:
      v13 = "strict_fminnum";
      goto LABEL_456;
    case 0x79:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1818846563;
      v34 = "strict_fceil";
      goto LABEL_435;
    case 0x7A:
      v19 = "strict_ffloor";
      goto LABEL_437;
    case 0x7B:
      v19 = "strict_fround";
      goto LABEL_437;
    case 0x7C:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 110;
      v35 = "strict_froundeven";
      goto LABEL_454;
    case 0x7D:
      v19 = "strict_ftrunc";
      goto LABEL_437;
    case 0x7E:
      v19 = "strict_lround";
      goto LABEL_437;
    case 0x7F:
      v13 = "strict_llround";
      goto LABEL_456;
    case 0x80:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1953393010;
      v34 = "strict_lrint";
      goto LABEL_435;
    case 0x81:
      v19 = "strict_llrint";
      goto LABEL_437;
    case 0x82:
      v21 = "strict_fmaximum";
      goto LABEL_327;
    case 0x83:
      v21 = "strict_fminimum";
      goto LABEL_327;
    case 0x84:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      v35 = "strict_fp_to_sint";
      goto LABEL_454;
    case 0x85:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      v35 = "strict_fp_to_uint";
      goto LABEL_454;
    case 0x86:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 112;
      v35 = "strict_sint_to_fp";
      goto LABEL_454;
    case 0x87:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 112;
      v35 = "strict_uint_to_fp";
      goto LABEL_454;
    case 0x88:
      v21 = "strict_fp_round";
      goto LABEL_327;
    case 0x89:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "strict_fp_extend";
      goto LABEL_324;
    case 0x8A:
      v19 = "strict_fsetcc";
      goto LABEL_437;
    case 0x8B:
      v13 = "strict_fsetccs";
      goto LABEL_456;
    case 0x8D:
      *((_BYTE *)a3 + 23) = 3;
      v36 = 28006;
      goto LABEL_232;
    case 0x8E:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1684106598;
      goto LABEL_330;
    case 0x8F:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 110;
      v16 = "fcopysign";
      goto LABEL_445;
    case 0x90:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x6E67697374656766;
      goto LABEL_447;
    case 0x91:
      v19 = "fcanonicalize";
      goto LABEL_437;
    case 0x92:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1380930627;
      v34 = "BUILD_VECTOR";
      goto LABEL_435;
    case 0x93:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      v35 = "insert_vector_elt";
      goto LABEL_454;
    case 0x94:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 29804;
      v23 = "extract_vector_elt";
      goto LABEL_368;
    case 0x95:
      v13 = "concat_vectors";
      goto LABEL_456;
    case 0x96:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "insert_subvector";
      goto LABEL_324;
    case 0x97:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 114;
      v35 = "extract_subvector";
      goto LABEL_454;
    case 0x98:
      v13 = "vector_reverse";
      goto LABEL_456;
    case 0x99:
      v13 = "vector_shuffle";
      goto LABEL_456;
    case 0x9A:
      v19 = "vector_splice";
      goto LABEL_437;
    case 0x9B:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "scalar_to_vector";
      goto LABEL_324;
    case 0x9C:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1919906915;
      v34 = "splat_vector";
      goto LABEL_435;
    case 0x9D:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 29556;
      v23 = "splat_vector_parts";
      goto LABEL_368;
    case 0x9E:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1919906915;
      v24 = "step_vector";
      goto LABEL_421;
    case 0x9F:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1751938413;
      v25 = 117;
      goto LABEL_390;
    case 0xA0:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1751938413;
      v25 = 115;
      goto LABEL_390;
    case 0xA1:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      v16 = "avgfloors";
      goto LABEL_445;
    case 0xA2:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 117;
      v16 = "avgflooru";
      goto LABEL_445;
    case 0xA3:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x736C696563677661;
      goto LABEL_447;
    case 0xA4:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x756C696563677661;
      goto LABEL_447;
    case 0xA5:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1935958625;
      goto LABEL_330;
    case 0xA6:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1969513057;
      goto LABEL_330;
    case 0xA7:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1852403059;
      goto LABEL_330;
    case 0xA8:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 2019650931;
      goto LABEL_330;
    case 0xA9:
      *((_BYTE *)a3 + 23) = 4;
      v58 = 1852403059;
      goto LABEL_222;
    case 0xAA:
      *((_BYTE *)a3 + 23) = 4;
      v58 = 2019650931;
LABEL_222:
      v26 = v58 + 2;
      goto LABEL_330;
    case 0xAB:
      *((_BYTE *)a3 + 23) = 3;
      v46 = 28257;
LABEL_224:
      v47 = v46 | 0x640000;
      goto LABEL_233;
    case 0xAC:
      *((_BYTE *)a3 + 23) = 2;
      v42 = 29295;
      goto LABEL_226;
    case 0xAD:
      *((_BYTE *)a3 + 23) = 3;
      v47 = 7499640;
      goto LABEL_233;
    case 0xAE:
      *((_BYTE *)a3 + 23) = 3;
      v47 = 7561825;
      goto LABEL_233;
    case 0xAF:
      *((_BYTE *)a3 + 23) = 3;
      v37 = 26739;
      goto LABEL_230;
    case 0xB0:
      *((_BYTE *)a3 + 23) = 3;
      v36 = 29299;
LABEL_232:
      v47 = v36 | 0x610000;
      goto LABEL_233;
    case 0xB1:
      *((_BYTE *)a3 + 23) = 3;
      v37 = 29299;
LABEL_230:
      v47 = v37 | 0x6C0000;
LABEL_233:
      *(_DWORD *)v5 = v47;
      return;
    case 0xB2:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1819570034;
      goto LABEL_330;
    case 0xB3:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1920233330;
      goto LABEL_330;
    case 0xB4:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1818784614;
      goto LABEL_330;
    case 0xB5:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1919447910;
      goto LABEL_330;
    case 0xB6:
      *((_BYTE *)a3 + 23) = 5;
      v59 = 1635218274;
      goto LABEL_239;
    case 0xB7:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 2054452323;
      goto LABEL_330;
    case 0xB8:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 2053928035;
      goto LABEL_330;
    case 0xB9:
      *((_BYTE *)a3 + 23) = 5;
      v59 = 1869640803;
LABEL_239:
      *(_DWORD *)v5 = v59;
      v25 = 112;
      goto LABEL_390;
    case 0xBA:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25971;
      v15 = "bitreverse";
      goto LABEL_426;
    case 0xBB:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1769103728;
      v45 = 31092;
      goto LABEL_408;
    case 0xBC:
      v21 = "cttz_zero_undef";
      goto LABEL_327;
    case 0xBD:
      v21 = "ctlz_zero_undef";
      goto LABEL_327;
    case 0xBE:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1701602675;
      v45 = 29795;
      goto LABEL_408;
    case 0xBF:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1818588022;
      v55 = 1952671084;
      goto LABEL_428;
    case 0xC0:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 99;
      v16 = "select_cc";
      goto LABEL_445;
    case 0xC1:
      *((_BYTE *)a3 + 23) = 5;
      v38 = 1668572531;
      goto LABEL_304;
    case 0xC2:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 31090;
      v15 = "setcccarry";
      goto LABEL_426;
    case 0xC3:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      v16 = "shl_parts";
      goto LABEL_445;
    case 0xC4:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      v16 = "sra_parts";
      goto LABEL_445;
    case 0xC5:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      v16 = "srl_parts";
      goto LABEL_445;
    case 0xC6:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684956532;
      v24 = "sign_extend";
      goto LABEL_421;
    case 0xC7:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684956532;
      v24 = "zero_extend";
      goto LABEL_421;
    case 0xC8:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25710;
      v15 = "any_extend";
      goto LABEL_426;
    case 0xC9:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x657461636E757274;
      goto LABEL_447;
    case 0xCA:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28774;
      v15 = "sint_to_fp";
      goto LABEL_426;
    case 0xCB:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28774;
      v15 = "uint_to_fp";
      goto LABEL_426;
    case 0xCC:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 103;
      v35 = "sign_extend_inreg";
      goto LABEL_454;
    case 0xCD:
      v60 = (char *)operator new(0x19uLL);
      *(_QWORD *)v5 = v60;
      v61 = xmmword_1C640C6A0;
      v62 = "any_extend_vector_inreg";
      goto LABEL_363;
    case 0xCE:
      v39 = operator new(0x20uLL);
      *(_QWORD *)v5 = v39;
      v40 = xmmword_1C640C690;
      v41 = "sign_extend_vector_inreg";
      goto LABEL_339;
    case 0xCF:
      v39 = operator new(0x20uLL);
      *(_QWORD *)v5 = v39;
      v40 = xmmword_1C640C690;
      v41 = "zero_extend_vector_inreg";
      goto LABEL_339;
    case 0xD0:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29806;
      v15 = "fp_to_sint";
      goto LABEL_426;
    case 0xD1:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29806;
      v15 = "fp_to_uint";
      goto LABEL_426;
    case 0xD2:
      v13 = "fp_to_sint_sat";
      goto LABEL_456;
    case 0xD3:
      v13 = "fp_to_uint_sat";
      goto LABEL_456;
    case 0xD4:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x646E756F725F7066;
      goto LABEL_447;
    case 0xD5:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29540;
      v15 = "flt_rounds";
      goto LABEL_426;
    case 0xD6:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1735289188;
      v34 = "set_rounding";
      goto LABEL_435;
    case 0xD7:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 100;
      v16 = "fp_extend";
      goto LABEL_445;
    case 0xD8:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1668573538;
      v55 = 1953718627;
      goto LABEL_428;
    case 0xD9:
      v19 = "addrspacecast";
      goto LABEL_437;
    case 0xDA:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28774;
      v15 = "fp16_to_fp";
      goto LABEL_426;
    case 0xDB:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 13873;
      v15 = "fp_to_fp16";
      goto LABEL_426;
    case 0xDC:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 112;
      v35 = "strict_fp16_to_fp";
      goto LABEL_454;
    case 0xDD:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 54;
      v35 = "strict_fp_to_fp16";
      goto LABEL_454;
    case 0xDE:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1734700646;
      goto LABEL_330;
    case 0xDF:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1935827302;
      goto LABEL_330;
    case 0xE0:
      *((_BYTE *)a3 + 23) = 5;
      v63 = 1920037734;
      goto LABEL_301;
    case 0xE1:
      *((_BYTE *)a3 + 23) = 5;
      v63 = 1919050598;
      goto LABEL_301;
    case 0xE2:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1852404582;
      goto LABEL_330;
    case 0xE3:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1936679782;
      goto LABEL_330;
    case 0xE4:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 2003791974;
      v25 = 105;
      goto LABEL_390;
    case 0xE5:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 2003791974;
      goto LABEL_330;
    case 0xE6:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1735355494;
      goto LABEL_330;
    case 0xE7:
      *((_BYTE *)a3 + 23) = 5;
      v64 = 1735355494;
      goto LABEL_277;
    case 0xE8:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1735355494;
      v45 = 12337;
      goto LABEL_408;
    case 0xE9:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1886938470;
      goto LABEL_330;
    case 0xEA:
      *((_BYTE *)a3 + 23) = 5;
      v64 = 1886938470;
LABEL_277:
      *(_DWORD *)v5 = v64;
      v25 = 50;
      goto LABEL_390;
    case 0xEB:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1768252262;
      v25 = 108;
      goto LABEL_390;
    case 0xEC:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1970435174;
      v45 = 25454;
      goto LABEL_408;
    case 0xED:
      *((_BYTE *)a3 + 23) = 5;
      v65 = 29286;
      goto LABEL_287;
    case 0xEE:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29806;
      v15 = "fnearbyint";
      goto LABEL_426;
    case 0xEF:
      *((_BYTE *)a3 + 23) = 6;
      v66 = 29286;
      goto LABEL_284;
    case 0xF0:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28261;
      v15 = "froundeven";
      goto LABEL_426;
    case 0xF1:
      *((_BYTE *)a3 + 23) = 6;
      v67 = 1869375078;
      goto LABEL_398;
    case 0xF2:
      *((_BYTE *)a3 + 23) = 6;
      v66 = 29292;
LABEL_284:
      v68 = v66 | 0x756F0000;
      goto LABEL_384;
    case 0xF3:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1869769836;
      v55 = 1684960623;
      goto LABEL_428;
    case 0xF4:
      *((_BYTE *)a3 + 23) = 5;
      v65 = 29292;
LABEL_287:
      v63 = v65 | 0x6E690000;
      goto LABEL_301;
    case 0xF5:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1769106540;
      v45 = 29806;
      goto LABEL_408;
    case 0xF6:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1852403046;
      v69 = 28270;
      goto LABEL_291;
    case 0xF7:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 2019650918;
      v69 = 28280;
LABEL_291:
      v55 = v69 | 0x6D750000;
      goto LABEL_428;
    case 0xF8:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1701143913;
      v34 = "fminnum_ieee";
      goto LABEL_435;
    case 0xF9:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1701143913;
      v34 = "fmaxnum_ieee";
      goto LABEL_435;
    case 0xFA:
      *((_BYTE *)a3 + 23) = 8;
      v70 = 1852403046;
      goto LABEL_295;
    case 0xFB:
      *((_BYTE *)a3 + 23) = 8;
      v70 = 2019650918;
LABEL_295:
      v18 = v70 | 0x6D756D6900000000;
      goto LABEL_447;
    case 0xFC:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1852404582;
      v55 = 1936679790;
      goto LABEL_428;
    case 0xFD:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1684107116;
      goto LABEL_330;
    case 0xFE:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1919906931;
      v25 = 101;
      goto LABEL_390;
    case 0xFF:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 25455;
      v23 = "dynamic_stackalloc";
      goto LABEL_368;
    case 0x100:
      *((_BYTE *)a3 + 23) = 2;
      v42 = 29282;
LABEL_226:
      *(_WORD *)v5 = v42;
      v5[2] = 0;
      return;
    case 0x101:
      *((_BYTE *)a3 + 23) = 5;
      v71 = 1852404322;
      goto LABEL_316;
    case 0x102:
      *((_BYTE *)a3 + 23) = 5;
      v63 = 1784640098;
LABEL_301:
      *(_DWORD *)v5 = v63;
      v25 = 116;
      goto LABEL_390;
    case 0x103:
      *((_BYTE *)a3 + 23) = 6;
      v68 = 1868788322;
      goto LABEL_384;
    case 0x104:
      *((_BYTE *)a3 + 23) = 5;
      v38 = 1667199586;
LABEL_304:
      *(_DWORD *)v5 = v38;
      v25 = 99;
      goto LABEL_390;
    case 0x105:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 109;
      v16 = "inlineasm";
      goto LABEL_445;
    case 0x106:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1919049581;
      v34 = "inlineasm_br";
      goto LABEL_435;
    case 0x107:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x6C6562616C5F6865;
      goto LABEL_447;
    case 0x108:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "annotation_label";
      goto LABEL_324;
    case 0x109:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x7465726863746163;
      goto LABEL_447;
    case 0x10A:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29797;
      v15 = "cleanupret";
      goto LABEL_426;
    case 0x10B:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 101;
      v16 = "stacksave";
      goto LABEL_445;
    case 0x10C:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1701998452;
      v34 = "stackrestore";
      goto LABEL_435;
    case 0x10D:
      v19 = "callseq_start";
      goto LABEL_437;
    case 0x10E:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684956511;
      v24 = "callseq_end";
      goto LABEL_421;
    case 0x10F:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1918984566;
      v25 = 103;
      goto LABEL_390;
    case 0x110:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1868783990;
      v45 = 31088;
      goto LABEL_408;
    case 0x111:
      *((_BYTE *)a3 + 23) = 5;
      v71 = 1852137846;
LABEL_316:
      *(_DWORD *)v5 = v71;
      v25 = 100;
      goto LABEL_390;
    case 0x112:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1953718646;
      v55 = 1953653108;
      goto LABEL_428;
    case 0x113:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28789;
      v15 = "call_setup";
      goto LABEL_426;
    case 0x114:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25455;
      v15 = "call_alloc";
      goto LABEL_426;
    case 0x115:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x65756C6156637253;
      goto LABEL_447;
    case 0x116:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1867400269;
      v45 = 25956;
      goto LABEL_408;
    case 0x117:
      *((_BYTE *)a3 + 23) = 8;
      v17 = 0x6B72614D4350;
LABEL_322:
      v18 = v17 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
      goto LABEL_447;
    case 0x118:
      *((_BYTE *)a3 + 23) = 16;
      v20 = "ReadCycleCounter";
LABEL_324:
      *(_OWORD *)v5 = *(_OWORD *)v20;
      v5[16] = 0;
      return;
    case 0x119:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25956;
      v15 = "handlenode";
      goto LABEL_426;
    case 0x11A:
      v21 = "init_trampoline";
LABEL_327:
      *((_BYTE *)a3 + 23) = 15;
      *a3 = *(_QWORD *)v21;
      *(_QWORD *)((char *)a3 + 7) = *(_QWORD *)(v21 + 7);
      *((_BYTE *)a3 + 15) = 0;
      return;
    case 0x11B:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 101;
      v35 = "adjust_trampoline";
      goto LABEL_454;
    case 0x11C:
      *((_BYTE *)a3 + 23) = 4;
      v26 = 1885434484;
LABEL_330:
      *(_DWORD *)v5 = v26;
      v5[4] = 0;
      return;
    case 0x11D:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      v16 = "debugtrap";
      goto LABEL_445;
    case 0x11E:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      v16 = "ubsantrap";
      goto LABEL_445;
    case 0x11F:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x6863746566657250;
      goto LABEL_447;
    case 0x121:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1701015141;
      v24 = "AtomicFence";
      goto LABEL_421;
    case 0x122:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25697;
      v15 = "AtomicLoad";
      goto LABEL_426;
    case 0x123:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1701998452;
      v24 = "AtomicStore";
      goto LABEL_421;
    case 0x124:
      v19 = "AtomicCmpSwap";
      goto LABEL_437;
    case 0x125:
      v39 = operator new(0x20uLL);
      *(_QWORD *)v5 = v39;
      v40 = xmmword_1C640C690;
      v41 = "AtomicCmpSwapWithSuccess";
LABEL_339:
      *(_OWORD *)(v5 + 8) = v40;
      *(_OWORD *)v39 = *(_OWORD *)v41;
      v39[2] = *((_QWORD *)v41 + 2);
      *((_BYTE *)v39 + 24) = 0;
      return;
    case 0x126:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28769;
      v15 = "AtomicSwap";
      goto LABEL_426;
    case 0x127:
      v19 = "AtomicLoadAdd";
      goto LABEL_437;
    case 0x128:
      v19 = "AtomicLoadSub";
      goto LABEL_437;
    case 0x129:
      v19 = "AtomicLoadAnd";
      goto LABEL_437;
    case 0x12A:
      v19 = "AtomicLoadClr";
      goto LABEL_437;
    case 0x12B:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1917805665;
      v34 = "AtomicLoadOr";
      goto LABEL_435;
    case 0x12C:
      v19 = "AtomicLoadXor";
      goto LABEL_437;
    case 0x12D:
      v13 = "AtomicLoadNand";
      goto LABEL_456;
    case 0x12E:
      v19 = "AtomicLoadMin";
      goto LABEL_437;
    case 0x12F:
      v19 = "AtomicLoadMax";
      goto LABEL_437;
    case 0x130:
      v13 = "AtomicLoadUMin";
      goto LABEL_456;
    case 0x131:
      v13 = "AtomicLoadUMax";
      goto LABEL_456;
    case 0x132:
      v13 = "AtomicLoadFAdd";
      goto LABEL_456;
    case 0x134:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684107116;
      v24 = "masked_load";
      goto LABEL_421;
    case 0x135:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1701998452;
      v34 = "masked_store";
      goto LABEL_435;
    case 0x136:
      v19 = "masked_gather";
      goto LABEL_437;
    case 0x137:
      v13 = "masked_scatter";
      goto LABEL_456;
    case 0x138:
      v13 = "lifetime.start";
      goto LABEL_456;
    case 0x139:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1684956462;
      v34 = "lifetime.end";
      goto LABEL_435;
    case 0x13A:
      *((_BYTE *)a3 + 23) = 19;
      *(_DWORD *)((char *)a3 + 15) = 1953653108;
      v22 = "gc_transition.start";
LABEL_360:
      *(_OWORD *)v5 = *(_OWORD *)v22;
      v5[19] = 0;
      return;
    case 0x13B:
      *((_BYTE *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 100;
      v35 = "gc_transition.end";
      goto LABEL_454;
    case 0x13C:
      v60 = (char *)operator new(0x19uLL);
      *(_QWORD *)v5 = v60;
      v61 = xmmword_1C640C6A0;
      v62 = "get.dynamic.area.offset";
LABEL_363:
      *(_OWORD *)(v5 + 8) = v61;
      *(_OWORD *)v60 = *(_OWORD *)v62;
      *(_QWORD *)(v60 + 15) = *(_QWORD *)(v62 + 15);
      v60[23] = 0;
      return;
    case 0x13D:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1700949874;
      v24 = "pseudoprobe";
      goto LABEL_421;
    case 0x13E:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1633907574;
      v45 = 25964;
      goto LABEL_408;
    case 0x13F:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 25700;
      v23 = "vecreduce_seq_fadd";
      goto LABEL_368;
    case 0x140:
      *((_BYTE *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 27765;
      v23 = "vecreduce_seq_fmul";
LABEL_368:
      *(_OWORD *)v5 = *(_OWORD *)v23;
      v5[18] = 0;
      return;
    case 0x141:
      v13 = "vecreduce_fadd";
      goto LABEL_456;
    case 0x142:
      v13 = "vecreduce_fmul";
      goto LABEL_456;
    case 0x143:
      v13 = "vecreduce_fmax";
      goto LABEL_456;
    case 0x144:
      v13 = "vecreduce_fmin";
      goto LABEL_456;
    case 0x145:
      v19 = "vecreduce_add";
      goto LABEL_437;
    case 0x146:
      v19 = "vecreduce_mul";
      goto LABEL_437;
    case 0x147:
      v19 = "vecreduce_and";
      goto LABEL_437;
    case 0x148:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1919901541;
      v34 = "vecreduce_or";
      goto LABEL_435;
    case 0x149:
      v19 = "vecreduce_xor";
      goto LABEL_437;
    case 0x14A:
      v13 = "vecreduce_smax";
      goto LABEL_456;
    case 0x14B:
      v13 = "vecreduce_smin";
      goto LABEL_456;
    case 0x14C:
      v13 = "vecreduce_umax";
      goto LABEL_456;
    case 0x14D:
      v13 = "vecreduce_umin";
      goto LABEL_456;
    case 0x14E:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1633644662;
      v45 = 25700;
      goto LABEL_408;
    case 0x14F:
      *((_BYTE *)a3 + 23) = 6;
      v68 = 1633644662;
LABEL_384:
      *(_DWORD *)v5 = v68;
      v45 = 25710;
      goto LABEL_408;
    case 0x150:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1633644662;
      v72 = 29537;
      goto LABEL_387;
    case 0x151:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1818194038;
      v72 = 29548;
LABEL_387:
      v55 = v72 | 0x72680000;
      goto LABEL_428;
    case 0x152:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1834971254;
      v45 = 27765;
      goto LABEL_408;
    case 0x153:
      *((_BYTE *)a3 + 23) = 5;
      *(_DWORD *)a3 = 1868525686;
      v25 = 114;
LABEL_390:
      *((_WORD *)v5 + 2) = v25;
      return;
    case 0x154:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1935634550;
      v73 = 25715;
      goto LABEL_403;
    case 0x155:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1935634550;
      v45 = 27752;
      goto LABEL_408;
    case 0x156:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1935634550;
      v51 = 29299;
      goto LABEL_405;
    case 0x157:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1935634550;
      v45 = 25205;
      goto LABEL_408;
    case 0x158:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1969188982;
      v73 = 25717;
      goto LABEL_403;
    case 0x159:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1969188982;
      v51 = 29301;
      goto LABEL_405;
    case 0x15A:
      *((_BYTE *)a3 + 23) = 6;
      v67 = 2019520630;
LABEL_398:
      *(_DWORD *)v5 = v67;
      v45 = 29295;
      goto LABEL_408;
    case 0x15B:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1717530742;
      v55 = 1684300134;
      goto LABEL_428;
    case 0x15C:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1717530742;
      v55 = 1651864422;
      goto LABEL_428;
    case 0x15D:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1717530742;
      v55 = 1819635046;
      goto LABEL_428;
    case 0x15E:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1717530742;
      v73 = 25702;
LABEL_403:
      v55 = v73 | 0x76690000;
      goto LABEL_428;
    case 0x15F:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1717530742;
      v51 = 29286;
LABEL_405:
      v55 = v51 | 0x6D650000;
      goto LABEL_428;
    case 0x160:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1717530742;
      v55 = 1734700646;
      goto LABEL_428;
    case 0x161:
      *((_BYTE *)a3 + 23) = 6;
      *(_DWORD *)a3 = 1717530742;
      v45 = 24941;
LABEL_408:
      *((_WORD *)v5 + 2) = v45;
      v5[6] = 0;
      return;
    case 0x162:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      v16 = "vp_fptoui";
      goto LABEL_445;
    case 0x163:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      v16 = "vp_fptosi";
      goto LABEL_445;
    case 0x164:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      v16 = "vp_uitofp";
      goto LABEL_445;
    case 0x165:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      v16 = "vp_sitofp";
      goto LABEL_445;
    case 0x166:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25454;
      v15 = "vp_fptrunc";
      goto LABEL_426;
    case 0x167:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x74786570665F7076;
      goto LABEL_447;
    case 0x168:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x636E7572745F7076;
      goto LABEL_447;
    case 0x169:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 2053075062;
      v74 = 25978;
      goto LABEL_418;
    case 0x16A:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1935634550;
      v74 = 25971;
LABEL_418:
      v55 = v74 | 0x74780000;
      goto LABEL_428;
    case 0x16B:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1953393007;
      v24 = "vp_ptrtoint";
      goto LABEL_421;
    case 0x16C:
      *((_BYTE *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1920233583;
      v24 = "vp_inttoptr";
LABEL_421:
      *(_QWORD *)v5 = *(_QWORD *)v24;
      v5[11] = 0;
      return;
    case 0x16D:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x63637465735F7076;
      goto LABEL_447;
    case 0x16E:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x65726F74735F7076;
      goto LABEL_447;
    case 0x16F:
      v75 = (char *)operator new(0x20uLL);
      *(_QWORD *)v5 = v75;
      *(_OWORD *)(v5 + 8) = xmmword_1C640C6B0;
      strcpy(v75, "experimental_vp_strided_store");
      return;
    case 0x170:
      *((_BYTE *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29285;
      v15 = "vp_scatter";
LABEL_426:
      *(_QWORD *)v5 = *(_QWORD *)v15;
      v5[10] = 0;
      return;
    case 0x171:
      *((_BYTE *)a3 + 23) = 7;
      *(_DWORD *)a3 = 1818194038;
      v55 = 1684107116;
LABEL_428:
      *(_DWORD *)(v5 + 3) = v55;
      v5[7] = 0;
      return;
    case 0x172:
      v76 = (char *)operator new(0x20uLL);
      *(_QWORD *)v5 = v76;
      *(_OWORD *)(v5 + 8) = xmmword_1C6613080;
      strcpy(v76, "experimental_vp_strided_load");
      return;
    case 0x173:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 114;
      v16 = "vp_gather";
      goto LABEL_445;
    case 0x174:
      v19 = "vp_reduce_add";
      goto LABEL_437;
    case 0x175:
      v19 = "vp_reduce_mul";
      goto LABEL_437;
    case 0x176:
      v19 = "vp_reduce_and";
      goto LABEL_437;
    case 0x177:
      *((_BYTE *)a3 + 23) = 12;
      *((_DWORD *)a3 + 2) = 1919901541;
      v34 = "vp_reduce_or";
LABEL_435:
      *(_QWORD *)v5 = *(_QWORD *)v34;
      v5[12] = 0;
      return;
    case 0x178:
      v19 = "vp_reduce_xor";
LABEL_437:
      *((_BYTE *)a3 + 23) = 13;
      *a3 = *(_QWORD *)v19;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)(v19 + 5);
      *((_BYTE *)a3 + 13) = 0;
      return;
    case 0x179:
      v13 = "vp_reduce_smax";
      goto LABEL_456;
    case 0x17A:
      v13 = "vp_reduce_smin";
      goto LABEL_456;
    case 0x17B:
      v13 = "vp_reduce_umax";
      goto LABEL_456;
    case 0x17C:
      v13 = "vp_reduce_umin";
      goto LABEL_456;
    case 0x17D:
      v13 = "vp_reduce_fmax";
      goto LABEL_456;
    case 0x17E:
      v13 = "vp_reduce_fmin";
      goto LABEL_456;
    case 0x17F:
    case 0x180:
      v13 = "vp_reduce_fadd";
      goto LABEL_456;
    case 0x181:
    case 0x182:
      v13 = "vp_reduce_fmul";
      goto LABEL_456;
    case 0x183:
      *((_BYTE *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 116;
      v16 = "vp_select";
LABEL_445:
      *(_QWORD *)v5 = *(_QWORD *)v16;
      return;
    case 0x184:
      *((_BYTE *)a3 + 23) = 8;
      v18 = 0x656772656D5F7076;
      goto LABEL_447;
    case 0x185:
      v44 = "experimental_vp_splice";
LABEL_449:
      *(_OWORD *)v5 = *(_OWORD *)v44;
      *(_QWORD *)(v5 + 14) = *(_QWORD *)(v44 + 14);
      *((_WORD *)v5 + 11) = 5632;
      return;
    default:
      if (v6 > 0x185)
      {
        if ((v6 & 0x8000) != 0)
        {
          if (!a2)
            goto LABEL_492;
          v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2[5] + 16) + 104))(*(_QWORD *)(a2[5] + 16));
          LODWORD(v6) = *(unsigned __int16 *)(a1 + 24);
          if (v84 && *(_DWORD *)(v84 + 48) > (__int16)~(_WORD)v6)
          {
            v85 = *(_QWORD *)(v84 + 24);
            if (!v85)
            {
              v80 = 0;
              v5[23] = 0;
              goto LABEL_491;
            }
            v78 = (const char *)(v85 + *(unsigned int *)(*(_QWORD *)(v84 + 16) + 4 * (__int16)~(_WORD)v6));
LABEL_464:
            v79 = strlen(v78);
            if (v79 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_502;
            v80 = v79;
            if (v79 >= 0x17)
            {
              v92 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v79 | 7) != 0x17)
                v92 = v79 | 7;
              v93 = v92 + 1;
              v94 = (char *)operator new(v92 + 1);
              *((_QWORD *)v5 + 1) = v80;
              *((_QWORD *)v5 + 2) = v93 | 0x8000000000000000;
              *(_QWORD *)v5 = v94;
              v5 = v94;
            }
            else
            {
              v5[23] = v79;
              if (!v79)
                goto LABEL_491;
            }
            memmove(v5, v78, v80);
LABEL_491:
            v5[v80] = 0;
            return;
          }
          if (*(_WORD *)(a1 + 24))
          {
LABEL_492:
            v89 = (char *)&v103;
            v95 = v6;
            do
            {
              *--v89 = (v95 % 0xA) | 0x30;
              v87 = v95 > 9;
              v95 /= 0xAuLL;
            }
            while (v87);
          }
          else
          {
            v89 = &v102;
            v102 = 48;
          }
          sub_1C4E61270(&v100, v89, (char *)&v103, (char *)&v103 - v89);
          v88 = "<<Unknown Machine Node #";
        }
        else if (a2)
        {
          v77 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 1984))(a2[3]);
          if (v77)
          {
            v78 = (const char *)v77;
            goto LABEL_464;
          }
          v90 = *(unsigned __int16 *)(a1 + 24);
          if (*(_WORD *)(a1 + 24))
          {
            v91 = &v101.__r_.__value_.__s.__data_[21];
            do
            {
              *--v91 = (v90 % 0xA) | 0x30;
              v87 = v90 > 9;
              v90 /= 0xAuLL;
            }
            while (v87);
          }
          else
          {
            v91 = &v101.__r_.__value_.__s.__data_[20];
            v101.__r_.__value_.__s.__data_[20] = 48;
          }
          sub_1C4E61270(&v100, v91, &v101.__r_.__value_.__s.__data_[21], (char *)&v101.__r_.__value_.__r.__words[2] + 5 - v91);
          v88 = "<<Unknown Target Node #";
        }
        else
        {
          v86 = 0;
          do
          {
            v101.__r_.__value_.__s.__data_[v86-- + 20] = (v6 % 0xA) | 0x30;
            v87 = v6 > 9;
            v6 /= 0xAuLL;
          }
          while (v87);
          sub_1C4E61270(&v100, &v101.__r_.__value_.__s.__data_[v86 + 21], &v101.__r_.__value_.__s.__data_[21], -v86);
          v88 = "<<Unknown Node #";
        }
        v96 = std::string::insert(&v100, 0, v88);
        v97 = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        v98 = std::string::append(&v101, ">>");
        v99 = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)v5 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        *((_QWORD *)v5 + 2) = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        return;
      }
      *((_BYTE *)a3 + 23) = 20;
      *((_DWORD *)a3 + 4) = 1044276580;
      v43 = "<<Unknown DAG Node>>";
LABEL_459:
      *(_OWORD *)v5 = *(_OWORD *)v43;
      v5[20] = 0;
      return;
  }
}

void sub_1C5D68948(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  void **v11;
  size_t v12;
  _QWORD v13[2];
  void *__p[2];
  char v15;

  if (*(_WORD *)(a1 + 58))
  {
    v4 = 0;
    v5 = 16 * *(unsigned __int16 *)(a1 + 58);
    do
    {
      if (v4)
      {
        v6 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v6)
        {
          llvm::raw_ostream::write(this, ",", 1uLL);
        }
        else
        {
          *v6 = 44;
          ++*((_QWORD *)this + 4);
        }
      }
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(v7 + v4);
      if (v8 == 1)
      {
        v9 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
        {
          *v9 = 26723;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "ch", 2uLL);
        }
      }
      else
      {
        v10 = *(_QWORD *)(v7 + v4 + 8);
        v13[0] = v8;
        v13[1] = v10;
        llvm::EVT::getEVTString((llvm::EVT *)v13, (uint64_t)__p);
        if (v15 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        if (v15 >= 0)
          v12 = v15 & 0x7F;
        else
          v12 = (size_t)__p[1];
        llvm::raw_ostream::write(this, (const char *)v11, v12);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      v4 += 16;
    }
    while (v5 != v4);
  }
}

double sub_1C5D68A98(uint64_t a1, llvm::raw_ostream *this, uint64_t a3, double result)
{
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  uint64_t **v20;
  _BYTE *v21;
  _DWORD *v22;
  int v23;
  uint64_t **v24;
  _BYTE *v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  const char *v29;
  llvm::raw_ostream *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t **v35;
  uint64_t *v36;
  _BYTE *v37;
  uint64_t *v38;
  int v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::detail::DoubleAPFloat *v46;
  void *v47;
  _WORD *v48;
  const char *v49;
  llvm::raw_ostream *v50;
  size_t v51;
  _BYTE *v52;
  unint64_t v53;
  llvm::raw_ostream *v54;
  int v55;
  _BYTE *v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  llvm::raw_ostream *v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  const void *v64;
  size_t v65;
  size_t v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  const char *v70;
  llvm::raw_ostream *v71;
  size_t v72;
  _BYTE *v73;
  unsigned int v74;
  int v75;
  _QWORD *v76;
  const char *v77;
  llvm::raw_ostream *v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  const char *v82;
  llvm::raw_ostream *v83;
  size_t v84;
  _BYTE *v85;
  unint64_t v86;
  uint64_t v87;
  const char *v88;
  size_t v89;
  uint64_t v90;
  const char *v91;
  _BYTE *v92;
  unsigned int v93;
  _QWORD *v94;
  const char *v95;
  llvm::raw_ostream *v96;
  size_t v97;
  _BYTE *v98;
  _BYTE *v99;
  unint64_t v100;
  llvm::raw_ostream *v101;
  int v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t ***v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t ****v110;
  uint64_t ***v111;
  int v112;
  int v113;
  _BYTE *v114;
  const char *p_p;
  size_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _WORD *v122;
  size_t v123;
  size_t v124;
  const char *v125;
  llvm::raw_ostream *v126;
  size_t v127;
  int v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  _DWORD *v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  size_t v137;
  int v138;
  const char *v139;
  int v140;
  const char *v141;
  _WORD *v142;
  void *v143;
  size_t v144;
  _BYTE *v145;
  void *v146;
  size_t v147;
  _DWORD *v148;
  _BYTE *v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  size_t v154;
  uint64_t v155;
  const char *v156;
  size_t v157;
  size_t v158;
  int64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  size_t v164;
  uint64_t v165;
  const char *v166;
  _WORD *v167;
  size_t v168;
  size_t v169;
  char *v170;
  char v171;
  llvm::raw_ostream *v172;
  char v173;
  _BYTE *v174;
  _BYTE *v175;
  _BYTE *v176;
  const char *v177;
  llvm::raw_ostream *v178;
  size_t v179;
  size_t *v180;
  const void *v181;
  size_t v182;
  size_t v183;
  _BYTE *v184;
  unint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  unint64_t v189;
  llvm::raw_ostream *v190;
  int v191;
  _BYTE *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  llvm::raw_ostream *v210;
  unint64_t v211;
  _BYTE *v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  _BYTE *v217;
  _BYTE *v218;
  _BYTE *v219;
  int v220;
  _BYTE *v221;
  _DWORD *v222;
  _BYTE *v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  _DWORD *v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  _BYTE *v235;
  _WORD *v236;
  _BYTE *v237;
  unsigned int v238[6];
  void *__p;
  __int128 v240;
  _QWORD v241[6];

  v241[5] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a1 + 72) & 2) != 0)
  {
    v7 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v7 > 3uLL)
    {
      *v7 = 2004184608;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " nuw", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 4) != 0)
  {
    v8 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 3uLL)
    {
      *v8 = 2004053536;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " nsw", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 8) != 0)
  {
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 5)
    {
      *(_WORD *)(v9 + 4) = 29795;
      *(_DWORD *)v9 = 1635280160;
      *((_QWORD *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, " exact", 6uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x10) != 0)
  {
    v10 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 4)
    {
      *(_BYTE *)(v10 + 4) = 110;
      *(_DWORD *)v10 = 1634627104;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " nnan", 5uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x20) != 0)
  {
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 4)
    {
      *(_BYTE *)(v11 + 4) = 102;
      *(_DWORD *)v11 = 1852403232;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " ninf", 5uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x40) != 0)
  {
    v12 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v12 > 3uLL)
    {
      *v12 = 2054385184;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " nsz", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x80) != 0)
  {
    v13 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v13) > 4)
    {
      *(_BYTE *)(v13 + 4) = 112;
      *(_DWORD *)v13 = 1668440352;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " arcp", 5uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    v14 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 8)
    {
      *(_BYTE *)(v14 + 8) = 116;
      *(_QWORD *)v14 = *(_QWORD *)" contract";
      *((_QWORD *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, " contract", 9uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    v15 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v15 > 3uLL)
    {
      *v15 = 1852203296;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " afn", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x400) != 0)
  {
    v16 = (_QWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v16 > 7uLL)
    {
      *v16 = 0x636F737361657220;
      *((_QWORD *)this + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(this, " reassoc", 8uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x800) != 0)
  {
    v17 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v17) > 0xA)
    {
      *(_DWORD *)(v17 + 7) = 1953523043;
      *(_QWORD *)v17 = *(_QWORD *)" nofpexcept";
      *((_QWORD *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, " nofpexcept", 0xBuLL);
    }
  }
  if (*(__int16 *)(a1 + 24) < 0)
  {
    v20 = (uint64_t **)(a1 + 88);
    if (!*(_DWORD *)(a1 + 88))
      goto LABEL_364;
    v21 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v21)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
      v22 = (_DWORD *)*((_QWORD *)this + 4);
    }
    else
    {
      *v21 = 60;
      v22 = (_DWORD *)(*((_QWORD *)this + 4) + 1);
      *((_QWORD *)this + 4) = v22;
    }
    if (*((_QWORD *)this + 3) - (_QWORD)v22 > 3uLL)
    {
      *v22 = 980247885;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, "Mem:", 4uLL);
    }
    v23 = *(_DWORD *)v20;
    if (*(_DWORD *)v20)
    {
      if (v23 == 1)
      {
        v24 = (uint64_t **)(a1 + 80);
      }
      else
      {
        v24 = (uint64_t **)(*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8);
        v20 = &v24[v23];
      }
      v36 = *v24;
      v35 = v24 + 1;
      sub_1C5D6AF58(this, v36, a3);
      while (v35 != v20)
      {
        v37 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v37)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
        }
        else
        {
          *v37 = 32;
          ++*((_QWORD *)this + 4);
        }
        v38 = *v35++;
        sub_1C5D6AF58(this, v38, a3);
      }
    }
    goto LABEL_360;
  }
  v18 = *(unsigned __int16 *)(a1 + 24);
  if (v18 <= 0xFD)
  {
    switch(*(_WORD *)(a1 + 24))
    {
      case 6:
        v104 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v104)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v104 = 60;
          ++*((_QWORD *)this + 4);
        }
        v105 = *(uint64_t ****)(*(_QWORD *)(a1 + 80) + 16);
        if (!v105)
          goto LABEL_359;
        if ((*((_BYTE *)v105 + 23) & 0x10) == 0)
          goto LABEL_353;
        v106 = ***v105;
        v107 = *(_QWORD *)(v106 + 152);
        v108 = *(unsigned int *)(v106 + 168);
        if (!(_DWORD)v108)
          goto LABEL_350;
        LODWORD(v109) = (v108 - 1) & ((v105 >> 4) ^ (v105 >> 9));
        v110 = (uint64_t ****)(v107 + 16 * v109);
        v111 = *v110;
        if (*v110 == v105)
          goto LABEL_351;
        v112 = 1;
        while (v111 != (uint64_t ***)-4096)
        {
          v113 = v109 + v112++;
          v109 = v113 & (v108 - 1);
          v111 = *(uint64_t ****)(v107 + 16 * v109);
          if (v111 == v105)
          {
            v110 = (uint64_t ****)(v107 + 16 * v109);
            goto LABEL_351;
          }
        }
LABEL_350:
        v110 = (uint64_t ****)(v107 + 16 * v108);
LABEL_351:
        v180 = (size_t *)v110[1];
        v183 = *v180;
        v181 = v180 + 2;
        v182 = v183;
        v184 = (_BYTE *)*((_QWORD *)this + 4);
        if (v183 <= *((_QWORD *)this + 3) - (_QWORD)v184)
        {
          if (v182)
          {
            memcpy(v184, v181, v182);
            v184 = (_BYTE *)(*((_QWORD *)this + 4) + v182);
            *((_QWORD *)this + 4) = v184;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, (const char *)v181, v182);
LABEL_353:
          v184 = (_BYTE *)*((_QWORD *)this + 4);
        }
        if (*((_BYTE **)this + 3) == v184)
        {
          v34 = " ";
          goto LABEL_358;
        }
        *v184 = 32;
        goto LABEL_502;
      case 7:
        v114 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v114)
        {
          llvm::raw_ostream::write(this, ":", 1uLL);
        }
        else
        {
          *v114 = 58;
          ++*((_QWORD *)this + 4);
        }
        *(_OWORD *)v238 = *(_OWORD *)(a1 + 80);
        llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
        if (v240 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        if (v240 >= 0)
          v116 = HIBYTE(v240) & 0x7F;
        else
          v116 = v240;
        llvm::raw_ostream::write(this, p_p, v116);
        if (SHIBYTE(v240) < 0)
          operator delete(__p);
        goto LABEL_364;
      case 8:
      case 0xA:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x2B:
      case 0x2C:
        goto LABEL_444;
      case 9:
        v98 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v98 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((_QWORD *)this + 4) = v98 + 1;
          *v98 = 32;
        }
        v128 = *(_DWORD *)(a1 + 76);
        if (a3)
          v129 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 40) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 16));
        else
          v129 = 0;
        v132 = operator new(0x28uLL);
        *(_QWORD *)v132 = &off_1E814D010;
        v132[2] = v128;
        *((_QWORD *)v132 + 2) = v129;
        v132[6] = 0;
        *((_QWORD *)v132 + 4) = 0;
        sub_1C52C9630((llvm::raw_ostream *)v132, this);
        (*(void (**)(_DWORD *))(*(_QWORD *)v132 + 40))(v132);
        goto LABEL_364;
      case 0xB:
      case 0x23:
        v19 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v19 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 60);
        }
        else
        {
          *((_QWORD *)this + 4) = v19 + 1;
          *v19 = 60;
        }
        v117 = *(_QWORD *)(a1 + 80) + 24;
        __p = v241;
        v240 = xmmword_1C64638D0;
        llvm::APInt::toString(v117, &__p, 0xAu, 1, 0);
        llvm::raw_ostream::write(this, (const char *)__p, v240);
        if (__p != v241)
          free(__p);
        goto LABEL_337;
      case 0xC:
      case 0x24:
        v43 = *(void **)(*(_QWORD *)(a1 + 80) + 32);
        if (v43 == &unk_1C866F184)
        {
          v121 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v121 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 60);
          }
          else
          {
            *((_QWORD *)this + 4) = v121 + 1;
            *v121 = 60;
          }
          v133 = llvm::APFloat::convertToFloat((llvm::APFloat *)(*(_QWORD *)(a1 + 80) + 24));
        }
        else
        {
          if (v43 != &unk_1C866F198)
          {
            v44 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v44) > 8)
            {
              *(_BYTE *)(v44 + 8) = 40;
              *(_QWORD *)v44 = *(_QWORD *)"<APFloat(";
              *((_QWORD *)this + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(this, "<APFloat(", 9uLL);
            }
            v45 = *(_QWORD *)(a1 + 80);
            v47 = *(void **)(v45 + 32);
            v46 = (llvm::detail::DoubleAPFloat *)(v45 + 32);
            if (v47 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v46, v238);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v46, v238);
            __p = v241;
            v240 = xmmword_1C64638D0;
            llvm::APInt::toString((uint64_t)v238, &__p, 0xAu, 0, 0);
            llvm::raw_ostream::write(this, (const char *)__p, v240);
            if (__p != v241)
              free(__p);
            if (v238[2] >= 0x41 && *(_QWORD *)v238)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v238, 0x1000C8000313F17);
            v48 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v48 <= 1uLL)
            {
              v49 = ")>";
              v50 = this;
              v51 = 2;
              goto LABEL_363;
            }
            *v48 = 15913;
            v208 = *((_QWORD *)this + 4) + 2;
            goto LABEL_408;
          }
          v131 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v131 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 60);
          }
          else
          {
            *((_QWORD *)this + 4) = v131 + 1;
            *v131 = 60;
          }
          v133 = llvm::APFloat::convertToDouble((llvm::APFloat *)(*(_QWORD *)(a1 + 80) + 24));
        }
        llvm::write_double(this, 0, 0, 0, v133);
        goto LABEL_337;
      case 0xD:
      case 0xE:
      case 0x25:
      case 0x26:
        v159 = *(_QWORD *)(a1 + 88);
        v160 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v160 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 60);
        }
        else
        {
          *((_QWORD *)this + 4) = v160 + 1;
          *v160 = 60;
        }
        llvm::Value::printAsOperand(*(llvm::Value **)(a1 + 80), this, 1, 0);
        v174 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v174 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 62);
        }
        else
        {
          *((_QWORD *)this + 4) = v174 + 1;
          *v174 = 62;
        }
        v176 = (_BYTE *)*((_QWORD *)this + 3);
        v175 = (_BYTE *)*((_QWORD *)this + 4);
        goto LABEL_347;
      case 0xF:
      case 0x27:
        v58 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v58)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v58 = 60;
          ++*((_QWORD *)this + 4);
        }
        v59 = *(int *)(a1 + 76);
        if ((v59 & 0x80000000) != 0)
        {
          v59 = -(uint64_t)v59;
          v60 = this;
          v61 = 1;
        }
        else
        {
          v60 = this;
          v61 = 0;
        }
        sub_1C5E21910(v60, v59, 0, 0, v61);
        goto LABEL_360;
      case 0x10:
      case 0x28:
        v52 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v52)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v52 = 60;
          ++*((_QWORD *)this + 4);
        }
        v53 = *(int *)(a1 + 76);
        if ((v53 & 0x80000000) != 0)
        {
          v53 = -(uint64_t)v53;
          v54 = this;
          v55 = 1;
        }
        else
        {
          v54 = this;
          v55 = 0;
        }
        sub_1C5E21910(v54, v53, 0, 0, v55);
        v56 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v56)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *v56 = 62;
          ++*((_QWORD *)this + 4);
        }
        v57 = *(unsigned int *)(a1 + 80);
        if ((_DWORD)v57)
          goto LABEL_419;
        goto LABEL_364;
      case 0x11:
      case 0x29:
        v39 = *(_DWORD *)(a1 + 88);
        v40 = v39 & 0x7FFFFFFF;
        v42 = (_BYTE *)*((_QWORD *)this + 3);
        v41 = (_BYTE *)*((_QWORD *)this + 4);
        if (v39 < 0)
        {
          if (v42 == v41)
          {
            llvm::raw_ostream::write(this, "<", 1uLL);
          }
          else
          {
            *v41 = 60;
            ++*((_QWORD *)this + 4);
          }
          (*(void (**)(_QWORD, llvm::raw_ostream *))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), this);
        }
        else
        {
          if (v42 == v41)
          {
            llvm::raw_ostream::write(this, "<", 1uLL);
          }
          else
          {
            *v41 = 60;
            ++*((_QWORD *)this + 4);
          }
          llvm::Value::print(*(llvm::Value **)(a1 + 80), this, 0);
        }
        v118 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v118)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *v118 = 62;
          ++*((_QWORD *)this + 4);
        }
        v120 = *((_QWORD *)this + 3);
        v119 = *((_QWORD *)this + 4);
        if ((_DWORD)v40)
        {
          if ((unint64_t)(v120 - v119) > 2)
          {
            *(_BYTE *)(v119 + 2) = 32;
            *(_WORD *)v119 = 11040;
            *((_QWORD *)this + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(this, " + ", 3uLL);
          }
          sub_1C5E21910(this, v40, 0, 0, 0);
        }
        else
        {
          if (v120 == v119)
          {
            llvm::raw_ostream::write(this, " ", 1uLL);
          }
          else
          {
            *(_BYTE *)v119 = 32;
            ++*((_QWORD *)this + 4);
          }
          sub_1C5E21FD4(this, 0, 0, 0, 0);
        }
        goto LABEL_418;
      case 0x12:
      case 0x2A:
        v62 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v62)
        {
          llvm::raw_ostream::write(this, "'", 1uLL);
          v63 = (_BYTE *)*((_QWORD *)this + 4);
        }
        else
        {
          *v62 = 39;
          v63 = (_BYTE *)(*((_QWORD *)this + 4) + 1);
          *((_QWORD *)this + 4) = v63;
        }
        v64 = *(const void **)(a1 + 80);
        if (v64)
        {
          v65 = strlen(*(const char **)(a1 + 80));
          v66 = v65;
          if (v65 <= *((_QWORD *)this + 3) - (_QWORD)v63)
          {
            if (v65)
            {
              memcpy(v63, v64, v65);
              v63 = (_BYTE *)(*((_QWORD *)this + 4) + v66);
              *((_QWORD *)this + 4) = v63;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, (const char *)v64, v65);
            v63 = (_BYTE *)*((_QWORD *)this + 4);
          }
        }
        if (*((_BYTE **)this + 3) == v63)
        {
          llvm::raw_ostream::write(this, "'", 1uLL);
        }
        else
        {
          *v63 = 39;
          ++*((_QWORD *)this + 4);
        }
        v57 = *(unsigned int *)(a1 + 88);
        if ((_DWORD)v57)
          goto LABEL_419;
        goto LABEL_364;
      case 0x2D:
        v99 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v99)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v99 = 60;
          ++*((_QWORD *)this + 4);
        }
        v100 = *(int *)(a1 + 80);
        if ((v100 & 0x80000000) != 0)
        {
          v100 = -(uint64_t)v100;
          v101 = this;
          v102 = 1;
        }
        else
        {
          v101 = this;
          v102 = 0;
        }
        sub_1C5E21910(v101, v100, 0, 0, v102);
        v103 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v103 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 43);
        }
        else
        {
          *((_QWORD *)this + 4) = v103 + 1;
          *v103 = 43;
        }
        llvm::raw_ostream::operator<<(this, *(_QWORD *)(a1 + 88));
        v130 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v130)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *v130 = 62;
          ++*((_QWORD *)this + 4);
        }
        v57 = *(unsigned int *)(a1 + 76);
        if ((_DWORD)v57)
          goto LABEL_419;
        goto LABEL_364;
      default:
        if (v18 == 253)
        {
          v92 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v92)
          {
            llvm::raw_ostream::write(this, "<", 1uLL);
          }
          else
          {
            *v92 = 60;
            ++*((_QWORD *)this + 4);
          }
          sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
          v68 = *(unsigned __int16 *)(a1 + 26);
          v93 = (v68 >> 10) & 3;
          switch(v93)
          {
            case 3u:
              v161 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v161) <= 5)
              {
                v95 = ", zext";
                goto LABEL_310;
              }
              *(_WORD *)(v161 + 4) = 29816;
              v233 = 1702502444;
              break;
            case 2u:
              v161 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v161) <= 5)
              {
                v95 = ", sext";
LABEL_310:
                v96 = this;
                v97 = 6;
                goto LABEL_311;
              }
              *(_WORD *)(v161 + 4) = 29816;
              v233 = 1702043692;
              break;
            case 1u:
              v94 = (_QWORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v94 <= 7uLL)
              {
                v95 = ", anyext";
                v96 = this;
                v97 = 8;
LABEL_311:
                llvm::raw_ostream::write(v96, v95, v97);
LABEL_312:
                v162 = *((_QWORD *)this + 4);
                if ((unint64_t)(*((_QWORD *)this + 3) - v162) <= 5)
                {
                  v70 = " from ";
                  v71 = this;
                  v72 = 6;
                  goto LABEL_314;
                }
                *(_WORD *)(v162 + 4) = 8301;
                *(_DWORD *)v162 = 1869768224;
                v225 = *((_QWORD *)this + 4) + 6;
                goto LABEL_504;
              }
              *v94 = 0x747865796E61202CLL;
              v232 = *((_QWORD *)this + 4) + 8;
LABEL_532:
              *((_QWORD *)this + 4) = v232;
              goto LABEL_312;
            default:
              goto LABEL_324;
          }
          *(_DWORD *)v161 = v233;
          v232 = *((_QWORD *)this + 4) + 6;
          goto LABEL_532;
        }
        if (v18 != 153)
          goto LABEL_444;
        v212 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v212)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v212 = 60;
          ++*((_QWORD *)this + 4);
        }
        v213 = sub_1C612FE00(*(llvm::EVT **)(a1 + 40), (const char *)this);
        if (!v213)
          goto LABEL_360;
        v214 = 0;
        v215 = 4 * v213;
        break;
    }
    while (1)
    {
      v216 = *(unsigned int *)(*(_QWORD *)(a1 + 80) + v214);
      if (!v214)
        goto LABEL_435;
      v217 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v217)
        break;
      *v217 = 44;
      ++*((_QWORD *)this + 4);
      if ((v216 & 0x80000000) != 0)
      {
LABEL_438:
        v218 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v218)
        {
          llvm::raw_ostream::write(this, "u", 1uLL);
        }
        else
        {
          *v218 = 117;
          ++*((_QWORD *)this + 4);
        }
        goto LABEL_440;
      }
LABEL_436:
      sub_1C5E21910(this, v216, 0, 0, 0);
LABEL_440:
      v214 += 4;
      if (v215 == v214)
        goto LABEL_360;
    }
    llvm::raw_ostream::write(this, ",", 1uLL);
LABEL_435:
    if ((v216 & 0x80000000) != 0)
      goto LABEL_438;
    goto LABEL_436;
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x133u)
  {
    switch(*(_WORD *)(a1 + 24))
    {
      case 0x134:
        v25 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v25)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v25 = 60;
          ++*((_QWORD *)this + 4);
        }
        sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
        v26 = *(unsigned __int16 *)(a1 + 26);
        v27 = (v26 >> 10) & 3;
        switch(v27)
        {
          case 3u:
            v151 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v151) <= 5)
            {
              v29 = ", zext";
              goto LABEL_277;
            }
            *(_WORD *)(v151 + 4) = 29816;
            v230 = 1702502444;
            break;
          case 2u:
            v151 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v151) <= 5)
            {
              v29 = ", sext";
LABEL_277:
              v30 = this;
              v31 = 6;
              goto LABEL_278;
            }
            *(_WORD *)(v151 + 4) = 29816;
            v230 = 1702043692;
            break;
          case 1u:
            v28 = (_QWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v28 <= 7uLL)
            {
              v29 = ", anyext";
              v30 = this;
              v31 = 8;
LABEL_278:
              llvm::raw_ostream::write(v30, v29, v31);
              goto LABEL_279;
            }
            *v28 = 0x747865796E61202CLL;
            v231 = *((_QWORD *)this + 4) + 8;
LABEL_527:
            *((_QWORD *)this + 4) = v231;
LABEL_279:
            v152 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v152) > 5)
            {
              *(_WORD *)(v152 + 4) = 8301;
              *(_DWORD *)v152 = 1869768224;
              *((_QWORD *)this + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(this, " from ", 6uLL);
            }
            *(_OWORD *)v238 = *(_OWORD *)(a1 + 80);
            llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
            if (v240 >= 0)
              v153 = (const char *)&__p;
            else
              v153 = (const char *)__p;
            if (v240 >= 0)
              v154 = HIBYTE(v240) & 0x7F;
            else
              v154 = v240;
            llvm::raw_ostream::write(this, v153, v154);
            if (SHIBYTE(v240) < 0)
              operator delete(__p);
            v26 = *(unsigned __int16 *)(a1 + 26);
LABEL_290:
            v155 = ((v26 >> 7) & 7) - 1;
            if (v155 > 3)
              v156 = "";
            else
              v156 = off_1E8198DA8[v155];
            v122 = (_WORD *)*((_QWORD *)this + 4);
            if (*v156)
            {
              if (*((_QWORD *)this + 3) - (_QWORD)v122 > 1uLL)
              {
                *v122 = 8236;
                v122 = (_WORD *)(*((_QWORD *)this + 4) + 2);
                *((_QWORD *)this + 4) = v122;
              }
              else
              {
                llvm::raw_ostream::write(this, ", ", 2uLL);
                v122 = (_WORD *)*((_QWORD *)this + 4);
              }
              v157 = strlen(v156);
              v158 = v157;
              if (v157 <= *((_QWORD *)this + 3) - (_QWORD)v122)
              {
                if (v157)
                {
                  memcpy(v122, v156, v157);
                  v122 = (_WORD *)(*((_QWORD *)this + 4) + v158);
                  *((_QWORD *)this + 4) = v122;
                }
              }
              else
              {
                llvm::raw_ostream::write(this, v156, v157);
                v122 = (_WORD *)*((_QWORD *)this + 4);
              }
            }
            if ((*(_WORD *)(a1 + 26) & 0x1000) != 0)
            {
              if (*((_QWORD *)this + 3) - (_QWORD)v122 > 0xAuLL)
              {
                *(_DWORD *)((char *)v122 + 7) = 1735289188;
                *(_QWORD *)v122 = *(_QWORD *)", expanding";
                v122 = (_WORD *)(*((_QWORD *)this + 4) + 11);
LABEL_510:
                *((_QWORD *)this + 4) = v122;
              }
              else
              {
                v125 = ", expanding";
                v126 = this;
                v127 = 11;
LABEL_301:
                llvm::raw_ostream::write(v126, v125, v127);
                v122 = (_WORD *)*((_QWORD *)this + 4);
              }
            }
LABEL_302:
            if (*((_WORD **)this + 3) != v122)
            {
              *(_BYTE *)v122 = 62;
LABEL_407:
              v208 = *((_QWORD *)this + 4) + 1;
LABEL_408:
              *((_QWORD *)this + 4) = v208;
              goto LABEL_364;
            }
            goto LABEL_362;
          default:
            goto LABEL_290;
        }
        *(_DWORD *)v151 = v230;
        v231 = *((_QWORD *)this + 4) + 6;
        goto LABEL_527;
      case 0x135:
        v85 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v85)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v85 = 60;
          ++*((_QWORD *)this + 4);
        }
        sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
        v86 = *(unsigned __int16 *)(a1 + 26);
        if ((v86 & 0x400) != 0)
        {
          v87 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v87) > 0xA)
          {
            *(_DWORD *)(v87 + 7) = 544175136;
            *(_QWORD *)v87 = *(_QWORD *)", trunc to ";
            *((_QWORD *)this + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(this, ", trunc to ", 0xBuLL);
          }
          *(_OWORD *)v238 = *(_OWORD *)(a1 + 80);
          llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
          if (v240 >= 0)
            v88 = (const char *)&__p;
          else
            v88 = (const char *)__p;
          if (v240 >= 0)
            v89 = HIBYTE(v240) & 0x7F;
          else
            v89 = v240;
          llvm::raw_ostream::write(this, v88, v89);
          if (SHIBYTE(v240) < 0)
            operator delete(__p);
          v86 = *(unsigned __int16 *)(a1 + 26);
        }
        v90 = ((v86 >> 7) & 7) - 1;
        if (v90 > 3)
          v91 = "";
        else
          v91 = off_1E8198DA8[v90];
        v122 = (_WORD *)*((_QWORD *)this + 4);
        if (*v91)
        {
          if (*((_QWORD *)this + 3) - (_QWORD)v122 > 1uLL)
          {
            *v122 = 8236;
            v122 = (_WORD *)(*((_QWORD *)this + 4) + 2);
            *((_QWORD *)this + 4) = v122;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
            v122 = (_WORD *)*((_QWORD *)this + 4);
          }
          v123 = strlen(v91);
          v124 = v123;
          if (v123 <= *((_QWORD *)this + 3) - (_QWORD)v122)
          {
            if (v123)
            {
              memcpy(v122, v91, v123);
              v122 = (_WORD *)(*((_QWORD *)this + 4) + v124);
              *((_QWORD *)this + 4) = v122;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, v91, v123);
            v122 = (_WORD *)*((_QWORD *)this + 4);
          }
        }
        if ((*(_WORD *)(a1 + 26) & 0x800) == 0)
          goto LABEL_302;
        if (*((_QWORD *)this + 3) - (_QWORD)v122 <= 0xCuLL)
        {
          v125 = ", compressing";
          v126 = this;
          v127 = 13;
          goto LABEL_301;
        }
        qmemcpy(v122, ", compressing", 13);
        v122 = (_WORD *)(*((_QWORD *)this + 4) + 13);
        goto LABEL_510;
      case 0x136:
        v73 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v73)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v73 = 60;
          ++*((_QWORD *)this + 4);
        }
        sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
        v74 = *(unsigned __int16 *)(a1 + 26);
        v75 = (v74 >> 10) & 3;
        switch(v75)
        {
          case 3:
            v134 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v134) <= 5)
            {
              v77 = ", zext";
              goto LABEL_236;
            }
            *(_WORD *)(v134 + 4) = 29816;
            v229 = 1702502444;
            break;
          case 2:
            v134 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v134) <= 5)
            {
              v77 = ", sext";
LABEL_236:
              v78 = this;
              v79 = 6;
              goto LABEL_237;
            }
            *(_WORD *)(v134 + 4) = 29816;
            v229 = 1702043692;
            break;
          case 1:
            v76 = (_QWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v76 <= 7uLL)
            {
              v77 = ", anyext";
              v78 = this;
              v79 = 8;
LABEL_237:
              llvm::raw_ostream::write(v78, v77, v79);
              goto LABEL_238;
            }
            *v76 = 0x747865796E61202CLL;
            v228 = *((_QWORD *)this + 4) + 8;
            goto LABEL_522;
          default:
            goto LABEL_250;
        }
        *(_DWORD *)v134 = v229;
        v228 = *((_QWORD *)this + 4) + 6;
LABEL_522:
        *((_QWORD *)this + 4) = v228;
LABEL_238:
        v135 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v135) > 5)
        {
          *(_WORD *)(v135 + 4) = 8301;
          *(_DWORD *)v135 = 1869768224;
          v224 = *((_QWORD *)this + 4) + 6;
LABEL_506:
          *((_QWORD *)this + 4) = v224;
        }
        else
        {
          v82 = " from ";
          v83 = this;
          v84 = 6;
LABEL_240:
          llvm::raw_ostream::write(v83, v82, v84);
        }
        *(_OWORD *)v238 = *(_OWORD *)(a1 + 80);
        llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
        if (v240 >= 0)
          v136 = (const char *)&__p;
        else
          v136 = (const char *)__p;
        if (v240 >= 0)
          v137 = HIBYTE(v240) & 0x7F;
        else
          v137 = v240;
        llvm::raw_ostream::write(this, v136, v137);
        if (SHIBYTE(v240) < 0)
          operator delete(__p);
        LOWORD(v74) = *(_WORD *)(a1 + 26);
LABEL_250:
        v138 = v74 & 0x300;
        if ((v74 & 0x300) != 0)
          v139 = "unsigned";
        else
          v139 = "signed";
        v140 = v74 & 0x280;
        if ((v74 & 0x280) != 0)
          v141 = "unscaled";
        else
          v141 = "scaled";
        v142 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v142 > 1uLL)
        {
          *v142 = 8236;
          v143 = (void *)(*((_QWORD *)this + 4) + 2);
          *((_QWORD *)this + 4) = v143;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
          v143 = (void *)*((_QWORD *)this + 4);
        }
        if (v138)
          v144 = 8;
        else
          v144 = 6;
        if (v144 <= *((_QWORD *)this + 3) - (_QWORD)v143)
        {
          memcpy(v143, v139, v144);
          v145 = (_BYTE *)(*((_QWORD *)this + 4) + v144);
          *((_QWORD *)this + 4) = v145;
        }
        else
        {
          llvm::raw_ostream::write(this, v139, v144);
          v145 = (_BYTE *)*((_QWORD *)this + 4);
        }
        if (*((_BYTE **)this + 3) == v145)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
          v146 = (void *)*((_QWORD *)this + 4);
        }
        else
        {
          *v145 = 32;
          v146 = (void *)(*((_QWORD *)this + 4) + 1);
          *((_QWORD *)this + 4) = v146;
        }
        if (v140)
          v147 = 8;
        else
          v147 = 6;
        if (v147 <= *((_QWORD *)this + 3) - (_QWORD)v146)
        {
          memcpy(v146, v141, v147);
          v148 = (_DWORD *)(*((_QWORD *)this + 4) + v147);
          *((_QWORD *)this + 4) = v148;
        }
        else
        {
          llvm::raw_ostream::write(this, v141, v147);
          v148 = (_DWORD *)*((_QWORD *)this + 4);
        }
        if (*((_QWORD *)this + 3) - (_QWORD)v148 > 6uLL)
        {
          *(_DWORD *)((char *)v148 + 3) = 1952805734;
          *v148 = 1717989152;
          v149 = (_BYTE *)(*((_QWORD *)this + 4) + 7);
          *((_QWORD *)this + 4) = v149;
        }
        else
        {
          llvm::raw_ostream::write(this, " offset", 7uLL);
          v149 = (_BYTE *)*((_QWORD *)this + 4);
        }
        v150 = (_BYTE *)*((_QWORD *)this + 3);
LABEL_361:
        if (v150 != v149)
        {
          *v149 = 62;
          goto LABEL_407;
        }
LABEL_362:
        v49 = ">";
        v50 = this;
        v51 = 1;
        goto LABEL_363;
      case 0x137:
        v80 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v80)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v80 = 60;
          ++*((_QWORD *)this + 4);
        }
        sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
        LOWORD(v74) = *(_WORD *)(a1 + 26);
        if ((v74 & 0x400) == 0)
          goto LABEL_250;
        v81 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v81) <= 0xA)
        {
          v82 = ", trunc to ";
          v83 = this;
          v84 = 11;
          goto LABEL_240;
        }
        *(_DWORD *)(v81 + 7) = 544175136;
        *(_QWORD *)v81 = *(_QWORD *)", trunc to ";
        v224 = *((_QWORD *)this + 4) + 11;
        goto LABEL_506;
      default:
        goto LABEL_444;
    }
  }
  if (v18 == 254)
  {
    v67 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v67)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *v67 = 60;
      ++*((_QWORD *)this + 4);
    }
    sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
    v68 = *(unsigned __int16 *)(a1 + 26);
    if ((v68 & 0x400) == 0)
      goto LABEL_324;
    v69 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v69) <= 0xA)
    {
      v70 = ", trunc to ";
      v71 = this;
      v72 = 11;
LABEL_314:
      llvm::raw_ostream::write(v71, v70, v72);
      goto LABEL_315;
    }
    *(_DWORD *)(v69 + 7) = 544175136;
    *(_QWORD *)v69 = *(_QWORD *)", trunc to ";
    v225 = *((_QWORD *)this + 4) + 11;
LABEL_504:
    *((_QWORD *)this + 4) = v225;
LABEL_315:
    *(_OWORD *)v238 = *(_OWORD *)(a1 + 80);
    llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
    if (v240 >= 0)
      v163 = (const char *)&__p;
    else
      v163 = (const char *)__p;
    if (v240 >= 0)
      v164 = HIBYTE(v240) & 0x7F;
    else
      v164 = v240;
    llvm::raw_ostream::write(this, v163, v164);
    if (SHIBYTE(v240) < 0)
      operator delete(__p);
    v68 = *(unsigned __int16 *)(a1 + 26);
LABEL_324:
    v165 = ((v68 >> 7) & 7) - 1;
    if (v165 > 3)
      v166 = "";
    else
      v166 = off_1E8198DA8[v165];
    v167 = (_WORD *)*((_QWORD *)this + 4);
    if (*v166)
    {
      if (*((_QWORD *)this + 3) - (_QWORD)v167 > 1uLL)
      {
        *v167 = 8236;
        v167 = (_WORD *)(*((_QWORD *)this + 4) + 2);
        *((_QWORD *)this + 4) = v167;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        v167 = (_WORD *)*((_QWORD *)this + 4);
      }
      v168 = strlen(v166);
      v169 = v168;
      if (v168 <= *((_QWORD *)this + 3) - (_QWORD)v167)
      {
        if (v168)
        {
          memcpy(v167, v166, v168);
          v167 = (_WORD *)(*((_QWORD *)this + 4) + v169);
          *((_QWORD *)this + 4) = v167;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v166, v168);
        v167 = (_WORD *)*((_QWORD *)this + 4);
      }
    }
    if (*((_WORD **)this + 3) != v167)
    {
      *(_BYTE *)v167 = 62;
      goto LABEL_407;
    }
    goto LABEL_362;
  }
  if (v18 == 277 || v18 == 278)
  {
    v33 = *((_QWORD *)this + 3);
    v32 = *((_QWORD *)this + 4);
    if (!*(_QWORD *)(a1 + 80))
    {
      if ((unint64_t)(v33 - v32) > 5)
      {
        *(_WORD *)(v32 + 4) = 15980;
        *(_DWORD *)v32 = 1819635260;
        v208 = *((_QWORD *)this + 4) + 6;
        goto LABEL_408;
      }
      v49 = "<null>";
      v50 = this;
      v51 = 6;
LABEL_363:
      llvm::raw_ostream::write(v50, v49, v51);
      goto LABEL_364;
    }
    if (v33 == v32)
    {
      v34 = "<";
LABEL_358:
      llvm::raw_ostream::write(this, v34, 1uLL);
    }
    else
    {
      *(_BYTE *)v32 = 60;
LABEL_502:
      ++*((_QWORD *)this + 4);
    }
LABEL_359:
    llvm::write_hex(this, *(_QWORD *)(a1 + 80), 3, 0, 0);
    goto LABEL_360;
  }
LABEL_444:
  if (sub_1C6133268(a1))
  {
    v219 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v219)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *v219 = 60;
      ++*((_QWORD *)this + 4);
    }
    sub_1C5D6AF58(this, *(uint64_t **)(a1 + 96), a3);
LABEL_360:
    v150 = (_BYTE *)*((_QWORD *)this + 3);
    v149 = (_BYTE *)*((_QWORD *)this + 4);
    goto LABEL_361;
  }
  v220 = *(unsigned __int16 *)(a1 + 24);
  if (v220 == 217)
  {
    v223 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v223 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 91);
    }
    else
    {
      *((_QWORD *)this + 4) = v223 + 1;
      *v223 = 91;
    }
    sub_1C5E21910(this, *(unsigned int *)(a1 + 76), 0, 0, 0);
    v227 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v227 > 3uLL)
    {
      *v227 = 540945696;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " -> ", 4uLL);
    }
    v211 = *(unsigned int *)(a1 + 80);
    v210 = this;
LABEL_422:
    sub_1C5E21910(v210, v211, 0, 0, 0);
    v170 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v170 < *((_QWORD *)this + 3))
    {
      *((_QWORD *)this + 4) = v170 + 1;
      v171 = 93;
      goto LABEL_424;
    }
    v172 = this;
    v173 = 93;
LABEL_426:
    llvm::raw_ostream::write(v172, v173);
    goto LABEL_364;
  }
  if (v220 == 43 || v220 == 19)
  {
    v159 = *(_QWORD *)(a1 + 88);
    v235 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v235)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *v235 = 60;
      ++*((_QWORD *)this + 4);
    }
    llvm::Value::printAsOperand(*(llvm::Value **)(*(_QWORD *)(a1 + 80) - 64), this, 0, 0);
    v236 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v236 > 1uLL)
    {
      *v236 = 8236;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ", ", 2uLL);
    }
    llvm::Value::printAsOperand(*(llvm::Value **)(*(_QWORD *)(a1 + 80) - 32), this, 0, 0);
    v237 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v237)
    {
      llvm::raw_ostream::write(this, ">", 1uLL);
      v175 = (_BYTE *)*((_QWORD *)this + 4);
    }
    else
    {
      *v237 = 62;
      v175 = (_BYTE *)(*((_QWORD *)this + 4) + 1);
      *((_QWORD *)this + 4) = v175;
    }
    v176 = (_BYTE *)*((_QWORD *)this + 3);
LABEL_347:
    if (v159 < 1)
    {
      if (v176 == v175)
      {
        v177 = " ";
        v178 = this;
        v179 = 1;
        goto LABEL_416;
      }
      *v175 = 32;
      v234 = *((_QWORD *)this + 4) + 1;
    }
    else
    {
      if ((unint64_t)(v176 - v175) <= 2)
      {
        v177 = " + ";
        v178 = this;
        v179 = 3;
LABEL_416:
        llvm::raw_ostream::write(v178, v177, v179);
        goto LABEL_417;
      }
      v175[2] = 32;
      *(_WORD *)v175 = 11040;
      v234 = *((_QWORD *)this + 4) + 3;
    }
    *((_QWORD *)this + 4) = v234;
LABEL_417:
    llvm::raw_ostream::operator<<(this, v159);
LABEL_418:
    v57 = *(unsigned int *)(a1 + 96);
    if (!(_DWORD)v57)
      goto LABEL_364;
LABEL_419:
    v209 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v209) > 4)
    {
      *(_BYTE *)(v209 + 4) = 61;
      *(_DWORD *)v209 = 1179933472;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " [TF=", 5uLL);
    }
    v210 = this;
    v211 = v57;
    goto LABEL_422;
  }
  if ((v220 & 0xFFFE) != 0x138)
  {
    if (v220 != 5)
      goto LABEL_364;
    v226 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v226 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 60);
    }
    else
    {
      *((_QWORD *)this + 4) = v226 + 1;
      *v226 = 60;
    }
    sub_1C5E21910(this, 1 << *(_BYTE *)(a1 + 76), 0, 0, 0);
LABEL_337:
    v170 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v170 < *((_QWORD *)this + 3))
    {
      *((_QWORD *)this + 4) = v170 + 1;
      v171 = 62;
LABEL_424:
      *v170 = v171;
      goto LABEL_364;
    }
    v172 = this;
    v173 = 62;
    goto LABEL_426;
  }
  if ((*(_QWORD *)(a1 + 88) & 0x8000000000000000) == 0)
  {
    v221 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v221)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *v221 = 60;
      ++*((_QWORD *)this + 4);
    }
    llvm::raw_ostream::operator<<(this, *(_QWORD *)(a1 + 88));
    v222 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v222 > 3uLL)
    {
      *v222 = 544175136;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " to ", 4uLL);
    }
    llvm::raw_ostream::operator<<(this, *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 88));
    goto LABEL_360;
  }
LABEL_364:
  if (!byte_1ED825250)
    return result;
  v185 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v185)
  {
    v186 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v186) > 5)
    {
      *(_WORD *)(v186 + 4) = 15684;
      *(_DWORD *)v186 = 1380932384;
      *((_QWORD *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, " [ORD=", 6uLL);
    }
    sub_1C5E21910(this, v185, 0, 0, 0);
    v187 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v187 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 93);
    }
    else
    {
      *((_QWORD *)this + 4) = v187 + 1;
      *v187 = 93;
    }
  }
  if (*(_DWORD *)(a1 + 28) != -1)
  {
    v188 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v188) > 4)
    {
      *(_BYTE *)(v188 + 4) = 61;
      *(_DWORD *)v188 = 1145658144;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " [ID=", 5uLL);
    }
    v189 = *(int *)(a1 + 28);
    if ((v189 & 0x80000000) != 0)
    {
      v189 = -(uint64_t)v189;
      v190 = this;
      v191 = 1;
    }
    else
    {
      v190 = this;
      v191 = 0;
    }
    sub_1C5E21910(v190, v189, 0, 0, v191);
    v192 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v192 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 93);
    }
    else
    {
      *((_QWORD *)this + 4) = v192 + 1;
      *v192 = 93;
    }
  }
  v193 = *(unsigned __int16 *)(a1 + 24);
  if (v193 <= 0x24 && ((1 << v193) & 0x1800001800) != 0)
  {
    if (!a3)
      goto LABEL_391;
  }
  else
  {
    v200 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v200) > 4)
    {
      *(_BYTE *)(v200 + 4) = 58;
      *(_DWORD *)v200 = 1142956832;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " # D:", 5uLL);
    }
    sub_1C5E21910(this, ((unint64_t)*(unsigned __int8 *)(a1 + 26) >> 2) & 1, 0, 0, 0);
    if (!a3)
      goto LABEL_391;
  }
  v194 = *(_QWORD *)(a3 + 616);
  v195 = sub_1C5D05F58(v194 + 688, a1);
  if (*(_QWORD *)(v194 + 688) + 40 * *(unsigned int *)(v194 + 704) != v195 && *(_DWORD *)(v195 + 16))
  {
    v196 = (_OWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v196 > 0xFuLL)
    {
      *v196 = *(_OWORD *)" [NoOfDbgValues=";
      *((_QWORD *)this + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(this, " [NoOfDbgValues=", 0x10uLL);
    }
    v197 = *(_QWORD *)(a3 + 616);
    v198 = sub_1C5D05F58(v197 + 688, a1);
    if (*(_QWORD *)(v197 + 688) + 40 * *(unsigned int *)(v197 + 704) == v198)
      v199 = 0;
    else
      v199 = *(unsigned int *)(v198 + 16);
    sub_1C5E21910(this, v199, 0, 0, 0);
    v202 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v202 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 93);
    }
    else
    {
      *((_QWORD *)this + 4) = v202 + 1;
      *v202 = 93;
    }
    v203 = *(_QWORD *)(a3 + 616);
    v204 = sub_1C5D05F58(v203 + 688, a1);
    if (*(_QWORD *)(v203 + 688) + 40 * *(unsigned int *)(v203 + 704) != v204)
    {
      v205 = *(unsigned int *)(v204 + 16);
      if ((_DWORD)v205)
      {
        v206 = *(uint64_t **)(v204 + 8);
        v207 = 8 * v205;
        do
        {
          if (!*(_BYTE *)(*v206 + 62))
            sub_1C63719C4(*v206, this);
          ++v206;
          v207 -= 8;
        }
        while (v207);
      }
    }
    return result;
  }
LABEL_391:
  if ((*(_BYTE *)(a1 + 26) & 1) != 0)
  {
    v201 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v201) > 0x11)
    {
      *(_WORD *)(v201 + 16) = 23856;
      result = *(double *)" [NoOfDbgValues>0]";
      *(_OWORD *)v201 = *(_OWORD *)" [NoOfDbgValues>0]";
      *((_QWORD *)this + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(this, " [NoOfDbgValues>0]", 0x12uLL);
    }
  }
  return result;
}

void sub_1C5D6AF58(llvm::raw_ostream *a1, uint64_t *a2, uint64_t a3)
{
  const llvm::Function **v6;
  uint64_t v7;
  const llvm::Function *v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::LLVMContextImpl *v11;

  if (a3)
  {
    v6 = *(const llvm::Function ***)(a3 + 40);
    v7 = *((_QWORD *)*v6 + 5);
    v8 = v6[7];
    v9 = (*(uint64_t (**)(const llvm::Function *))(*(_QWORD *)v6[2] + 104))(v6[2]);
    sub_1C5D6BA90(a1, a2, v6, v7, v8, v9, *(uint64_t **)(a3 + 56));
  }
  else
  {
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v11);
    sub_1C5D6BA90(a1, a2, 0, 0, 0, 0, (uint64_t *)&v11);
    llvm::LLVMContext::~LLVMContext(&v11, v10);
  }
}

llvm *sub_1C5D6B01C(llvm *a1)
{
  llvm *v2;
  llvm *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  llvm *v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream **v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream **v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  llvm *result;
  _BYTE *v28;

  v2 = llvm::dbgs(a1);
  v3 = v2;
  v4 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 32;
    *(_OWORD *)v4 = *(_OWORD *)"SelectionDAG has ";
    *((_QWORD *)v2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v2, "SelectionDAG has ", 0x11uLL);
  }
  v5 = (_QWORD *)((char *)a1 + 208);
  v6 = -1;
  v7 = (_QWORD *)((char *)a1 + 208);
  do
  {
    v7 = (_QWORD *)v7[1];
    ++v6;
  }
  while (v7 != v5);
  sub_1C5E21910(v3, v6, 0, 0, 0);
  v8 = (_QWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v8 > 7uLL)
  {
    *v8 = 0xA3A7365646F6E20;
    *((_QWORD *)v3 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v3, " nodes:\n", 8uLL);
  }
  for (i = (_QWORD *)*((_QWORD *)a1 + 27); i != v5; i = (_QWORD *)i[1])
  {
    if (i)
      v10 = (uint64_t)(i - 1);
    else
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 48);
    if ((!v11 || *(_QWORD *)(v11 + 32))
      && v10 != *((_QWORD *)a1 + 24)
      && (!sub_1C5D6B304(v10, (uint64_t)a1) || !*(_QWORD *)(v10 + 48)))
    {
      sub_1C5D6B3A0(v10, 2u, a1);
    }
  }
  v12 = (llvm *)*((_QWORD *)a1 + 24);
  if (v12)
    v12 = sub_1C5D6B3A0((uint64_t)v12, 2u, a1);
  v13 = llvm::dbgs(v12);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if (*((_BYTE **)v13 + 3) == v14)
  {
    v13 = llvm::raw_ostream::write(v13, "\n", 1uLL);
  }
  else
  {
    *v14 = 10;
    ++*((_QWORD *)v13 + 4);
  }
  if (byte_1ED825250)
  {
    if (*(_DWORD *)(*((_QWORD *)a1 + 77) + 104))
    {
      v13 = llvm::dbgs(v13);
      v15 = (void *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v15 > 0xCuLL)
      {
        qmemcpy(v15, "SDDbgValues:\n", 13);
        *((_QWORD *)v13 + 4) += 13;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, "SDDbgValues:\n", 0xDuLL);
      }
    }
    v16 = *((_QWORD *)a1 + 77);
    v17 = *(unsigned int *)(v16 + 104);
    if ((_DWORD)v17)
    {
      v18 = *(llvm::raw_ostream ***)(v16 + 96);
      v19 = 8 * v17;
      do
      {
        v20 = *v18++;
        v13 = sub_1C6371D34(v20);
        v19 -= 8;
      }
      while (v19);
      v16 = *((_QWORD *)a1 + 77);
    }
    if (*(_DWORD *)(v16 + 376))
    {
      v13 = llvm::dbgs(v13);
      v21 = *((_QWORD *)v13 + 4);
      if ((unint64_t)(*((_QWORD *)v13 + 3) - v21) > 0x12)
      {
        *(_DWORD *)(v21 + 15) = 171602789;
        *(_OWORD *)v21 = *(_OWORD *)"Byval SDDbgValues:\n";
        *((_QWORD *)v13 + 4) += 19;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, "Byval SDDbgValues:\n", 0x13uLL);
      }
    }
    v22 = *((_QWORD *)a1 + 77);
    v23 = *(unsigned int *)(v22 + 376);
    if ((_DWORD)v23)
    {
      v24 = *(llvm::raw_ostream ***)(v22 + 368);
      v25 = 8 * v23;
      do
      {
        v26 = *v24++;
        v13 = sub_1C6371D34(v26);
        v25 -= 8;
      }
      while (v25);
    }
  }
  result = llvm::dbgs(v13);
  v28 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v28)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v28 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

BOOL sub_1C5D6B304(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _BOOL8 result;

  if (!a2 || !byte_1ED825250)
  {
    if (*(_WORD *)(a1 + 24) == 1)
      return 0;
    return *(_WORD *)(a1 + 56) == 0;
  }
  v3 = *(_QWORD *)(a2 + 616);
  v4 = sub_1C5D05F58(v3 + 688, a1);
  v5 = *(_QWORD *)(v3 + 688) + 40 * *(unsigned int *)(v3 + 704) != v4 && *(_DWORD *)(v4 + 16) != 0;
  result = 0;
  if (!v5 && *(_WORD *)(a1 + 24) != 1)
    return *(_WORD *)(a1 + 56) == 0;
  return result;
}

llvm *sub_1C5D6B3A0(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  llvm *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;

  v5 = (llvm *)a1;
  if (*(_WORD *)(a1 + 56))
  {
    v6 = *(uint64_t **)(a1 + 32);
    v7 = 40 * *(unsigned __int16 *)(a1 + 56);
    do
    {
      a1 = sub_1C5D6B304(*v6, (uint64_t)a3);
      if ((a1 & 1) == 0)
      {
        a1 = *v6;
        v8 = *(_QWORD *)(*v6 + 48);
        if (v8)
        {
          if (!*(_QWORD *)(v8 + 32))
            a1 = sub_1C5D6B3A0();
        }
      }
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  v9 = llvm::dbgs((llvm *)a1);
  llvm::raw_ostream::indent(v9, a2);
  return sub_1C6371874(v5, a3);
}

double sub_1C5D6B43C(unint64_t a1, llvm::raw_ostream *a2, _QWORD *a3)
{
  _WORD *v6;
  void (**v7)(void);
  uint64_t v8;
  const char *v9;
  size_t v10;
  double v11;
  void *__p;
  size_t v14;
  char v15;
  void **p_p;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  p_p = &__p;
  __p = &off_1E8198D70;
  v14 = a1;
  llvm::write_hex(a2, a1, 3, 0, 0);
  v6 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8250;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ": ", 2uLL);
  }
  if (p_p == &__p)
  {
    v7 = (void (**)(void))((char *)__p + 32);
  }
  else
  {
    if (!p_p)
      goto LABEL_8;
    v7 = (void (**)(void))((char *)*p_p + 40);
  }
  (*v7)();
LABEL_8:
  sub_1C5D68948(a1, a2);
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 32;
    *(_WORD *)v8 = 15648;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, " = ", 3uLL);
  }
  sub_1C5D65C60(a1, a3, &__p);
  if (v15 >= 0)
    v9 = (const char *)&__p;
  else
    v9 = (const char *)__p;
  if (v15 >= 0)
    v10 = v15 & 0x7F;
  else
    v10 = v14;
  llvm::raw_ostream::write(a2, v9, v10);
  if (v15 < 0)
    operator delete(__p);
  return sub_1C5D68A98(a1, a2, (uint64_t)a3, v11);
}

void sub_1C5D6B5E0(llvm::raw_ostream *a1, unint64_t a2, unsigned int a3, _QWORD *a4, llvm::SmallPtrSetImplBase *a5)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1C4774094(a5, a2);
  if (v10)
  {
    llvm::raw_ostream::indent(a1, a3);
    sub_1C5D6B43C(a2, a1, a4);
    if (*(_WORD *)(a2 + 56))
    {
      v11 = 0;
      v12 = 40 * *(unsigned __int16 *)(a2 + 56);
      do
      {
        v13 = (_BYTE *)*((_QWORD *)a1 + 4);
        if (v11)
        {
          if (*((_BYTE **)a1 + 3) == v13)
          {
            llvm::raw_ostream::write(a1, ",", 1uLL);
            v13 = (_BYTE *)*((_QWORD *)a1 + 4);
          }
          else
          {
            *v13 = 44;
            v13 = (_BYTE *)(*((_QWORD *)a1 + 4) + 1);
            *((_QWORD *)a1 + 4) = v13;
          }
        }
        if (*((_BYTE **)a1 + 3) == v13)
        {
          llvm::raw_ostream::write(a1, " ", 1uLL);
        }
        else
        {
          *v13 = 32;
          ++*((_QWORD *)a1 + 4);
        }
        v14 = (unint64_t *)(*(_QWORD *)(a2 + 32) + v11);
        v15 = *v14;
        if (sub_1C5D6B888(a1, a4, *v14, v14[1]))
          sub_1C4774094(a5, v15);
        v11 += 40;
      }
      while (v12 != v11);
    }
    v16 = (_BYTE *)*((_QWORD *)a1 + 4);
    if (*((_BYTE **)a1 + 3) == v16)
    {
      llvm::raw_ostream::write(a1, "\n", 1uLL);
    }
    else
    {
      *v16 = 10;
      ++*((_QWORD *)a1 + 4);
    }
    v17 = *(unsigned __int16 *)(a2 + 56);
    if (*(_WORD *)(a2 + 56))
    {
      v18 = *(uint64_t **)(a2 + 32);
      v19 = a3 + 2;
      v20 = 40 * v17;
      do
      {
        v21 = *v18;
        v18 += 5;
        sub_1C5D6B5E0(a1, v21, v19, a4, a5);
        v20 -= 40;
      }
      while (v20);
    }
  }
}

void sub_1C5D6B79C(llvm::raw_ostream *a1, unint64_t a2, _QWORD *a3, int a4, unsigned int a5)
{
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  if (a4)
  {
    llvm::raw_ostream::indent(a1, a5);
    sub_1C63718D8(a2, a1, a3);
    v10 = *(unsigned __int16 *)(a2 + 56);
    if (*(_WORD *)(a2 + 56))
    {
      v11 = *(unsigned int **)(a2 + 32);
      v12 = (a4 - 1);
      v13 = a5 + 2;
      v14 = 40 * v10;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 16 * v11[2]) != 1)
        {
          v15 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v15 >= *((_QWORD *)a1 + 3))
          {
            llvm::raw_ostream::write(a1, 10);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v15 + 1;
            *v15 = 10;
          }
          sub_1C5D6B79C(a1, *(_QWORD *)v11, a3, v12, v13);
        }
        v11 += 10;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t sub_1C5D6B888(llvm::raw_ostream *this, _QWORD *a2, unint64_t a3, unsigned int a4)
{
  const char *v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (**v12)(void);
  double v13;
  uint64_t result;
  _BYTE *v15;
  void *__p;
  size_t v17;
  char v18;
  void **p_p;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 5)
    {
      result = 0;
      *(_WORD *)(v11 + 4) = 15980;
      *(_DWORD *)v11 = 1819635260;
      *((_QWORD *)this + 4) += 6;
      return result;
    }
    llvm::raw_ostream::write(this, "<null>", 6uLL);
    return 0;
  }
  if (!sub_1C5D6B304(a3, (uint64_t)a2))
  {
    p_p = &__p;
    __p = &off_1E8198D70;
    v17 = a3;
    llvm::write_hex(this, a3, 3, 0, 0);
    if (p_p == &__p)
    {
      v12 = (void (**)(void))((char *)__p + 32);
    }
    else
    {
      if (!p_p)
        goto LABEL_22;
      v12 = (void (**)(void))((char *)*p_p + 40);
    }
    (*v12)();
LABEL_22:
    if (a4)
    {
      v15 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v15 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 58);
      }
      else
      {
        *((_QWORD *)this + 4) = v15 + 1;
        *v15 = 58;
      }
      sub_1C5E21910(this, a4, 0, 0, 0);
    }
    return 0;
  }
  sub_1C5D65C60(a3, a2, &__p);
  if (v18 >= 0)
    v8 = (const char *)&__p;
  else
    v8 = (const char *)__p;
  if (v18 >= 0)
    v9 = v18 & 0x7F;
  else
    v9 = v17;
  llvm::raw_ostream::write(this, v8, v9);
  v10 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v10 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 58);
  }
  else
  {
    *((_QWORD *)this + 4) = v10 + 1;
    *v10 = 58;
  }
  if (v18 < 0)
    operator delete(__p);
  sub_1C5D68948(a3, this);
  sub_1C5D68A98(a3, this, (uint64_t)a2, v13);
  return 1;
}

void sub_1C5D6BA90(llvm::raw_ostream *a1, uint64_t *a2, const llvm::Function **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t *a7)
{
  void *v12[2];
  const llvm::Function *v13[2];
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13[0] = (const llvm::Function *)&off_1E814DC18;
  v13[1] = 0;
  v14 = a4 != 0;
  v15 = 1;
  v20 = 0;
  v19 = 0;
  v17 = 0;
  v18 = 0;
  v16 = a4;
  if (a3)
    llvm::ModuleSlotTracker::incorporateFunction(v13, *a3);
  v12[0] = v13;
  v12[1] = 0;
  llvm::MachineMemOperand::print(a2, a1, (llvm::ModuleSlotTracker *)v13, (uint64_t)v12, a7, a5, a6);
  if (v12[0] != v13)
    free(v12[0]);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v13);
}

void sub_1C5D6BB90()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5D6BBA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8198D70;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5D6BBD8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8198D70;
  a2[1] = v2;
  return result;
}

llvm::raw_ostream *sub_1C5D6BBF4(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::write_hex(a2, *(_QWORD *)(a1 + 8), 3, 0, 0);
}

uint64_t sub_1C5D6BC10()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Display more information when dumping selection DAG nodes.";
  *((_QWORD *)&v1 + 1) = 58;
  sub_1C61B2D38((uint64_t)&unk_1ED8251D0, "dag-dump-verbose", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8251D0, &dword_1C475E000);
}

BOOL sub_1C5D6BC80(uint64_t a1, llvm::MachineFunction *this)
{
  uint64_t v2;
  uint64_t v4;
  const llvm::Function *v5;
  BOOL v6;
  int v7;
  int v8;
  char **v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t FunctionInfo;
  void **v18;
  void *v19;
  llvm::GCModuleInfo *v20;
  llvm::OptimizationRemarkEmitter *v21;
  llvm::OptimizationRemarkEmitter *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t AnalysisPass;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char **v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  llvm::Instruction *v59;
  unsigned int SuccessorNumber;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  void *v73;
  int v74;
  char **v75;
  char *v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  llvm::MachineBasicBlock *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  int *v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  int *v97;
  int *v98;
  uint64_t v99;
  int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  const llvm::TargetRegisterInfo *v109;
  uint64_t v110;
  llvm::MachineBasicBlock *v111;
  unint64_t FirstTerminator;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  int *v118;
  int v119;
  int v120;
  unsigned int v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  _DWORD *v128;
  unsigned __int8 **v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  uint64_t i;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int RegSizeInBits;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t j;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t **v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  llvm::Function *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unsigned __int8 v236;
  unsigned __int8 *v237[2];
  int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  void *v245;
  void *__src;
  uint64_t v247;
  uint64_t v248;
  int v249;
  char v250;
  int v251;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v2 = **((_QWORD **)this + 45);
  if ((v2 & 0x80) != 0)
    return (v2 & 0x80) == 0;
  v4 = a1;
  v227 = **((_QWORD **)this + 45);
  v5 = *(const llvm::Function **)this;
  *(_QWORD *)(a1 + 280) = this;
  v6 = llvm::MachineFunction::useDebugInstrRef(this);
  *(_BYTE *)(v4 + 424) = v6;
  *(_BYTE *)(*(_QWORD *)(v4 + 296) + 650) = v6;
  llvm::TargetMachine::resetTargetOptions(*(llvm::TargetMachine **)(v4 + 248), v5);
  v7 = *(_DWORD *)(v4 + 328);
  if (v7)
  {
    if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)v4, v5))
      v8 = 0;
    else
      v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v228 = v5;
  sub_1C6373458((uint64_t)&v234, v4, v8);
  *(_QWORD *)(v4 + 336) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 280) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(v4 + 280) + 16));
  *(_QWORD *)(v4 + 344) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 280) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v4 + 280) + 16));
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(*(_QWORD *)(v4 + 280) + 40);
  v9 = **(char ****)(v4 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::TargetLibraryInfoWrapperPass::ID);
  v11 = (uint64_t *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v12 = &v239;
  v237[0] = 0;
  v237[1] = 0;
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v241 = 0;
  v242 = 0;
  v243 = 0;
  v244 = 0;
  llvm::TargetLibraryAnalysis::run((uint64_t)(v11 + 4), (uint64_t)v5, (uint64_t)&v245);
  v11[30] = (uint64_t)v245;
  v13 = (void **)(v11 + 30);
  if (*((_BYTE *)v11 + 320))
  {
    if (v13 == &v245)
    {
LABEL_23:
      *((_DWORD *)v11 + 78) = v251;
      goto LABEL_24;
    }
    v14 = (void **)(v11 + 31);
    v15 = v247;
    v16 = *((unsigned int *)v11 + 64);
    if (v16 >= v247)
    {
      if ((_DWORD)v247)
        memmove(*v14, __src, 8 * v247);
      goto LABEL_22;
    }
    if (*((_DWORD *)v11 + 65) < v247)
    {
      *((_DWORD *)v11 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 + 31), (uint64_t)(v11 + 33), v15, 8);
    }
    else if ((_DWORD)v16)
    {
      memmove(*v14, __src, 8 * v16);
      goto LABEL_20;
    }
    v16 = 0;
LABEL_20:
    if (v16 != v247)
      memcpy((char *)*v14 + 8 * v16, (char *)__src + 8 * v16, 8 * v247 - 8 * v16);
LABEL_22:
    *((_DWORD *)v11 + 64) = v15;
    goto LABEL_23;
  }
  v78 = v11 + 33;
  v11[31] = (uint64_t)(v11 + 33);
  v65 = (void **)(v11 + 31);
  v11[32] = 0x600000000;
  v64 = v247;
  if ((_DWORD)v247 && v65 != &__src)
  {
    if (v247 >= 7)
    {
LABEL_413:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v65, (uint64_t)v78, v64, 8);
      v222 = v247;
      if (!(_DWORD)v247)
      {
LABEL_416:
        *((_DWORD *)v11 + 64) = v64;
        goto LABEL_417;
      }
      v78 = *v65;
    }
    else
    {
      v222 = v247;
    }
    memcpy(v78, __src, 8 * v222);
    goto LABEL_416;
  }
LABEL_417:
  *((_DWORD *)v11 + 78) = v251;
  *((_BYTE *)v11 + 320) = 1;
LABEL_24:
  if (__src != &v248)
    free(__src);
  MEMORY[0x1CAA32FB4](v242, 8);
  sub_1C4D8B440(v12);
  sub_1C4D8B52C((uint64_t *)v237);
  *(_QWORD *)(v4 + 256) = v13;
  if ((*((_WORD *)v228 + 9) & 0x4000) != 0)
  {
    v18 = **(void ****)(v4 + 8);
    do
    {
      v19 = *v18;
      v18 += 2;
    }
    while (v19 != &llvm::GCModuleInfo::ID);
    v20 = (llvm::GCModuleInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::GCModuleInfo::ID);
    FunctionInfo = llvm::GCModuleInfo::getFunctionInfo(v20, v228);
  }
  else
  {
    FunctionInfo = 0;
  }
  *(_QWORD *)(v4 + 320) = FunctionInfo;
  v21 = (llvm::OptimizationRemarkEmitter *)operator new();
  v22 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v21, v228);
  v245 = 0;
  v23 = *(_QWORD *)(v4 + 432);
  *(_QWORD *)(v4 + 432) = v22;
  if (v23)
  {
    sub_1C4EF268C(v4 + 432, v23);
    v24 = v245;
    v245 = 0;
    if (v24)
      sub_1C4EF268C((uint64_t)&v245, (uint64_t)v24);
  }
  v25 = *(_QWORD *)(v4 + 8);
  v12 = *(uint64_t **)(v25 + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v12, llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
    v25 = *(_QWORD *)(v4 + 8);
    v12 = *(uint64_t **)(v25 + 24);
  }
  v27 = (void *)(AnalysisPass + 32);
  if (!AnalysisPass)
    v27 = 0;
  v232 = v27;
  v28 = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v12, llvm::LoopInfoWrapperPass::ID, 1);
  v29 = 0;
  if (v28)
  {
    v29 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v28 + 96))(v28, llvm::LoopInfoWrapperPass::ID);
    v25 = *(_QWORD *)(v4 + 8);
  }
  v30 = *(char ***)v25;
  do
  {
    v31 = *v30;
    v30 += 2;
  }
  while (v31 != llvm::ProfileSummaryInfoWrapperPass::ID);
  v32 = v29 + 32;
  if (!v29)
    v32 = 0;
  v230 = v32;
  v33 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v30 - 1) + 96))(*(v30 - 1), llvm::ProfileSummaryInfoWrapperPass::ID);
  v34 = 0;
  v225 = *(_QWORD *)(v33 + 32);
  if (*(_QWORD *)(v225 + 8))
  {
    if (*(_DWORD *)(v4 + 328))
    {
      v35 = **(char ****)(v4 + 8);
      do
      {
        v36 = *v35;
        v35 += 2;
      }
      while (v36 != llvm::LazyBlockFrequencyInfoPass::ID);
      v37 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v35 - 1) + 96))(*(v35 - 1), llvm::LazyBlockFrequencyInfoPass::ID);
      v34 = sub_1C619C0A4(v37 + 32);
    }
    else
    {
      v34 = 0;
    }
  }
  v224 = v34;
  v226 = v4;
  v38 = (char *)*((_QWORD *)v228 + 10);
  v229 = (char *)v228 + 72;
  if (v38 != (char *)v228 + 72)
  {
    v11 = &v248;
    v12 = (uint64_t *)&v249;
    do
    {
      if (v38)
        v39 = (uint64_t)(v38 - 24);
      else
        v39 = 0;
      v40 = *(_QWORD *)(v39 + 48);
      v41 = v40 - 24;
      if (v40)
        v42 = v40 - 24;
      else
        v42 = 0;
      if (!v40 || *(_BYTE *)(v42 + 16) != 83)
        goto LABEL_108;
      v43 = *(_BYTE *)(v40 - 8) == 83;
      do
      {
        if (!v43)
          break;
        v44 = *(_DWORD *)(v41 + 20) & 0x7FFFFFF;
        if (!(_DWORD)v44)
        {
LABEL_99:
          v40 = *(_QWORD *)(v40 + 8);
          goto LABEL_102;
        }
        v45 = 0;
        v46 = 0;
        v4 = 32 * v44;
        while (1)
        {
          v47 = *(_DWORD *)(v41 + 20);
          if ((v47 & 0x40000000) != 0)
            v48 = *(_QWORD *)(v41 - 8);
          else
            v48 = v41 - 32 * (v47 & 0x7FFFFFF);
          v49 = *(_QWORD *)(v48 + v46);
          if (v49)
            v50 = *(_BYTE *)(v49 + 16) == 5;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_87;
          v245 = &v249;
          __src = &v249;
          v247 = 4;
          LODWORD(v248) = 0;
          v51 = sub_1C53774DC(v49, (llvm::SmallPtrSetImplBase *)&v245);
          if (__src != v245)
            break;
          if (v51)
            goto LABEL_75;
LABEL_87:
          v46 += 32;
          v45 += 8;
          if (v4 == v46)
            goto LABEL_99;
        }
        free(__src);
        if (!v51)
          goto LABEL_87;
LABEL_75:
        v52 = *(_DWORD *)(v41 + 20);
        if ((v52 & 0x40000000) != 0)
          v53 = *(_QWORD *)(v41 - 8);
        else
          v53 = v41 - 32 * (v52 & 0x7FFFFFF);
        v54 = *(_QWORD *)(v53 + 32 * *(unsigned int *)(v41 + 60) + v45);
        v55 = *(_QWORD *)(v54 + 40);
        if (v55 == v54 + 40)
        {
          v56 = 0;
        }
        else
        {
          v56 = v55 - 24;
          if (!v55)
            v56 = 0;
          if (*(unsigned __int8 *)(v56 + 16) - 29 >= 0xB)
            v56 = 0;
        }
        v57 = *(unsigned __int8 *)(v56 + 16);
        if (v57 != 30)
          __asm { BR              X12 }
        if ((*(_DWORD *)(v56 + 20) & 0x7FFFFFF) != 3)
          goto LABEL_87;
        if (v55 == v54 + 40)
        {
          v59 = 0;
        }
        else
        {
          if (v55)
            v58 = (unsigned __int8 *)(v55 - 24);
          else
            v58 = 0;
          if (v58[16] - 29 >= 0xB)
            v59 = 0;
          else
            v59 = (llvm::Instruction *)v58;
        }
        SuccessorNumber = llvm::GetSuccessorNumber(v54, v39);
        v245 = v232;
        __src = 0;
        v247 = v230;
        v249 = 1;
        v248 = 0;
        v250 = 1;
        LOWORD(v240) = 257;
        llvm::SplitCriticalEdge(v59, SuccessorNumber, (uint64_t)&v245, (llvm::Twine *)v237);
        v40 = *(_QWORD *)(v39 + 48);
LABEL_102:
        v61 = v40 - 24;
        if (!v40)
          v61 = 0;
        v62 = *(unsigned __int8 *)(v61 + 16);
        v43 = v62 == 83;
        if (v62 == 83)
          v41 = v61;
        else
          v41 = 0;
      }
      while (v40);
LABEL_108:
      v38 = (char *)*((_QWORD *)v38 + 1);
    }
    while (v38 != v229);
  }
  v63 = v226;
  v64 = *(_QWORD *)(v226 + 296);
  v65 = *(void ***)(v226 + 280);
  v66 = *(_QWORD *)(v226 + 432);
  v67 = *(_QWORD *)(v226 + 256);
  v68 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(v226 + 8) + 24), &llvm::LegacyDivergenceAnalysis::ID, 1);
  if (v68)
    v69 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v68 + 96))(v68, &llvm::LegacyDivergenceAnalysis::ID);
  else
    v69 = 0;
  v13 = (void **)v228;
  sub_1C6365EC0(v64, (uint64_t)v65, v66, v226, v67, v69, v225, v224);
  sub_1C5CC6B04(*(uint64_t ***)(v226 + 264), (uint64_t *)v228, *(uint64_t **)(v226 + 280), *(_QWORD *)(v226 + 296));
  llvm::SwiftErrorValueTracking::setFunction(*(llvm::SwiftErrorValueTracking **)(v226 + 272), *(llvm::MachineFunction **)(v226 + 280));
  if (byte_1ED8254C0)
  {
    if (!*(_DWORD *)(v226 + 328))
    {
      v71 = 0;
      *(_QWORD *)(*(_QWORD *)(v226 + 264) + 32) = 0;
      goto LABEL_124;
    }
    v72 = **(void ****)(v226 + 8);
    do
    {
      v73 = *v72;
      v72 += 2;
    }
    while (v73 != &llvm::BranchProbabilityInfoWrapperPass::ID);
    v70 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v72 - 1) + 96))(*(v72 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID)+ 32;
  }
  else
  {
    v70 = 0;
  }
  v74 = *(_DWORD *)(v226 + 328);
  *(_QWORD *)(*(_QWORD *)(v226 + 264) + 32) = v70;
  if (v74)
  {
    v75 = **(char ****)(v226 + 8);
    do
    {
      v76 = *v75;
      v75 += 2;
    }
    while (v76 != llvm::AAResultsWrapperPass::ID);
    v71 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v75 - 1) + 96))(*(v75 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  }
  else
  {
    v71 = 0;
  }
LABEL_124:
  *(_QWORD *)(v226 + 312) = v71;
  sub_1C635C258(*(_QWORD **)(v226 + 304), *(_QWORD *)(v226 + 320), v71, *(_QWORD *)(v226 + 256));
  *(_BYTE *)(*(_QWORD *)(v226 + 280) + 354) = 0;
  *(_BYTE *)(*(_QWORD *)(v226 + 264) + 49) = 0;
  if (!*(_DWORD *)(v226 + 328))
    goto LABEL_156;
  v77 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v226 + 344) + 1776))(*(_QWORD *)(v226 + 344));
  v78 = *(_BYTE **)(v226 + 264);
  if (!v77)
  {
    v88 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v226 + 280) + 328);
    if (!v78[49])
      goto LABEL_157;
    goto LABEL_155;
  }
  v78[49] = 1;
  v79 = *((_QWORD *)v228 + 10);
  if ((char *)v79 == v229)
  {
LABEL_154:
    v88 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v226 + 280) + 328);
LABEL_155:
    (*(void (**)(_QWORD, llvm::MachineBasicBlock *))(**(_QWORD **)(v226 + 344) + 1792))(*(_QWORD *)(v226 + 344), v88);
    goto LABEL_157;
  }
  while (1)
  {
    if (v79)
      v80 = v79 - 24;
    else
      v80 = 0;
    v83 = *(_QWORD *)(v80 + 40);
    v82 = v80 + 40;
    v81 = v83;
    if (v83 != v82)
    {
      v84 = v81 - 24;
      if (!v81)
        v84 = 0;
      if (*(_BYTE *)(v84 + 16) != 30)
      {
        switch(*(_BYTE *)(v84 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_413;
          case 0x1F:
            v87 = (*(_DWORD *)(v84 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_147;
          case 0x20:
          case 0x26:
            v87 = (*(_DWORD *)(v84 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_147;
          case 0x21:
          case 0x25:
            goto LABEL_135;
          case 0x24:
            v87 = *(_WORD *)(v84 + 18) & 1;
            goto LABEL_147;
          case 0x27:
            v87 = *(_DWORD *)(v84 + 80) + 1;
LABEL_147:
            if (!v87)
              goto LABEL_138;
            goto LABEL_135;
          default:
            goto LABEL_138;
        }
      }
      goto LABEL_135;
    }
    v81 = v82;
LABEL_138:
    if (v81)
      v85 = v81 - 24;
    else
      v85 = 0;
    if (*(unsigned __int8 *)(v85 + 16) - 29 >= 0xB)
      v85 = 0;
    v86 = *(unsigned __int8 *)(v85 + 16);
    if (v86 != 29 && v86 != 35)
      break;
LABEL_135:
    v79 = *(_QWORD *)(v79 + 8);
    if ((char *)v79 == v229)
      goto LABEL_154;
  }
  v78[49] = 0;
LABEL_156:
  v88 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v226 + 280) + 328);
LABEL_157:
  sub_1C5D6D28C(v226, (llvm::Type **)v228);
  if (*(_BYTE *)(v226 + 352) && byte_1ED825400)
  {
    LODWORD(__src) = 7;
    BYTE4(__src) = 1;
    v245 = &unk_1E814E8A0;
    v247 = (uint64_t)v228;
    llvm::LLVMContext::diagnose(**(_QWORD **)v228, (const llvm::DiagnosticInfo *)&v245);
  }
  v89 = *(_QWORD *)(v226 + 280);
  v90 = *(_QWORD **)(v89 + 40);
  v91 = *(_QWORD *)(v226 + 264);
  v92 = *(_DWORD *)(v91 + 384);
  v93 = *(int **)(v91 + 376);
  v94 = *(unsigned int *)(v91 + 392);
  v95 = &v93[2 * v94];
  if (v92)
  {
    if ((_DWORD)v94)
    {
      v96 = 8 * v94;
      v97 = v93;
      while (*v97 >= 0xFFFFFFFE)
      {
        v97 += 2;
        v96 -= 8;
        if (!v96)
          goto LABEL_165;
      }
    }
    else
    {
      v97 = v93;
    }
  }
  else
  {
LABEL_165:
    v97 = &v93[2 * v94];
  }
  v98 = &v93[2 * v94];
  v233 = (uint64_t)v88;
  if (v97 != v98)
  {
    do
    {
      v99 = *v97;
      v100 = v97;
      do
      {
        LODWORD(v245) = v100[1];
        v100 = sub_1C49781B4((uint64_t *)(*(_QWORD *)(v226 + 264) + 376), &v245);
      }
      while (v98 != v100);
      v101 = v245;
      if ((v99 & 0x80000000) != 0 && (v245 & 0x80000000) != 0)
      {
        sub_1C51A3F30(v90, (int)v245, *(_QWORD *)(v90[3] + 16 * (v245 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v90[3] + 16 * (v99 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
        v101 = v245;
      }
      if (!sub_1C4778650((uint64_t)v90, v101))
        llvm::MachineRegisterInfo::clearKillFlags((uint64_t)v90, v99);
      v102 = v245;
      v103 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v90 + 16) + 176))(*(_QWORD *)(*v90 + 16));
      if ((v99 & 0x80000000) != 0)
        v104 = (uint64_t *)(v90[3] + 16 * (v99 & 0x7FFFFFFF) + 8);
      else
        v104 = (uint64_t *)(v90[34] + 8 * v99);
      v105 = *v104;
      if (*v104)
      {
        do
        {
          v106 = *(_QWORD *)(v105 + 24);
          if (v102 - 1 <= 0x3FFFFFFE)
            llvm::MachineOperand::substPhysReg((unsigned int *)v105, v102, v103);
          else
            llvm::MachineOperand::setReg(v105, v102);
          v105 = v106;
        }
        while (v106);
      }
      v107 = (unsigned int *)(v97 + 2);
      while (v107 != (unsigned int *)v95)
      {
        v108 = *v107;
        v107 += 2;
        if (v108 <= 0xFFFFFFFD)
        {
          v97 = (int *)(v107 - 2);
          goto LABEL_188;
        }
      }
      v97 = v95;
LABEL_188:
      ;
    }
    while (v97 != v98);
    v89 = *(_QWORD *)(v226 + 280);
  }
  v109 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v89 + 16) + 176))(*(_QWORD *)(v89 + 16));
  llvm::MachineRegisterInfo::EmitLiveInCopies(*(llvm::MachineRegisterInfo **)(v226 + 288), v88, v109, *(const llvm::TargetInstrInfo **)(v226 + 336));
  v110 = *(_QWORD *)(v226 + 264);
  if (!*(_BYTE *)(v110 + 49))
    goto LABEL_212;
  v245 = &v247;
  __src = (void *)0x400000000;
  v111 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 41);
  while (2)
  {
    if (v111 != (llvm::MachineFunction *)((char *)this + 320))
    {
      if (*((_QWORD *)v111 + 11) == *((_QWORD *)v111 + 12))
      {
        FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v111);
        if ((llvm::MachineBasicBlock *)((char *)v111 + 48) != (llvm::MachineBasicBlock *)FirstTerminator)
        {
          v113 = *(_QWORD *)(*(_QWORD *)(FirstTerminator + 16) + 8);
          if ((*(_WORD *)(FirstTerminator + 44) & 0xC) != 0 && (*(_WORD *)(FirstTerminator + 44) & 4) == 0)
          {
            if ((v113 & 0x20) != 0)
            {
LABEL_202:
              v115 = __src;
              if (__src >= (unint64_t)HIDWORD(__src))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v245, (uint64_t)&v247, __src + 1, 8);
                v115 = __src;
              }
              *((_QWORD *)v245 + v115) = v111;
              LODWORD(__src) = (_DWORD)__src + 1;
            }
            else
            {
              while ((*(_WORD *)(FirstTerminator + 44) & 8) != 0)
              {
                FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
                if ((*(_BYTE *)(*(_QWORD *)(FirstTerminator + 16) + 8) & 0x20) != 0)
                  goto LABEL_202;
              }
            }
          }
          else if ((v113 & 0x20) != 0)
          {
            goto LABEL_202;
          }
        }
      }
      v111 = (llvm::MachineBasicBlock *)*((_QWORD *)v111 + 1);
      continue;
    }
    break;
  }
  (*(void (**)(_QWORD, llvm::MachineBasicBlock *, void **))(**(_QWORD **)(v226 + 344) + 1800))(*(_QWORD *)(v226 + 344), v88, &v245);
  if (v245 != &v247)
    free(v245);
  v110 = *(_QWORD *)(v226 + 264);
LABEL_212:
  v245 = 0;
  __src = 0;
  LODWORD(v247) = 0;
  if (*(_DWORD *)(v110 + 232))
  {
    v116 = *(_QWORD *)(v226 + 288);
    v117 = *(int **)(v116 + 456);
    v118 = *(int **)(v116 + 464);
    if (v118 != v117)
    {
      while (2)
      {
        v119 = *v117;
        v120 = v117[1];
        LODWORD(v237[0]) = *v117;
        HIDWORD(v237[0]) = v120;
        if (v120)
        {
          if (!(_DWORD)v247)
          {
            v128 = 0;
            goto LABEL_229;
          }
          v121 = (v247 - 1) & (37 * v119);
          v122 = (char *)v245 + 8 * v121;
          v123 = *v122;
          if (v119 != *v122)
          {
            v124 = 0;
            v125 = 1;
            while (v123 != -1)
            {
              if (v124)
                v126 = 0;
              else
                v126 = v123 == -2;
              if (v126)
                v124 = v122;
              v127 = v121 + v125++;
              v121 = v127 & (v247 - 1);
              v122 = (char *)v245 + 8 * v121;
              v123 = *v122;
              if (v119 == *v122)
                goto LABEL_230;
            }
            if (v124)
              v128 = v124;
            else
              v128 = v122;
LABEL_229:
            v129 = (unsigned __int8 **)sub_1C476C0AC((uint64_t)&v245, (uint64_t)v237, v237, v128);
            *v129 = v237[0];
          }
        }
LABEL_230:
        v117 += 2;
        if (v117 == v118)
          break;
        continue;
      }
    }
  }
  v130 = llvm::MachineFunction::useDebugInstrRef(*(llvm::MachineFunction **)(v226 + 280));
  v131 = *(unsigned int *)(*(_QWORD *)(v226 + 264) + 232);
  if ((_DWORD)v131)
  {
    v132 = v130;
    for (i = 0; i != v131; ++i)
    {
      v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 264) + 224) + 8 * (v131 + ~(_DWORD)i));
      v135 = *(_QWORD *)(v134 + 32);
      if (*(_BYTE *)v135 == 5)
        v136 = (*(uint64_t (**)(const llvm::TargetRegisterInfo *, _QWORD))(*(_QWORD *)v109 + 552))(v109, *(_QWORD *)(v63 + 280));
      else
        v136 = *(_DWORD *)(v135 + 4);
      if (v136 - 1 <= 0x3FFFFFFE)
      {
        v137 = *(uint64_t **)(v233 + 56);
        v138 = *(_QWORD *)(v233 + 40);
        *(_QWORD *)(v134 + 24) = v138;
        v139 = *(_QWORD *)(v138 + 32);
        v140 = *(unsigned int *)(v134 + 40);
        if ((_DWORD)v140)
        {
          v152 = *(_QWORD *)(v134 + 32);
          v153 = *(_QWORD *)(v139 + 40);
          v154 = 32 * v140;
          do
          {
            if (!*(_BYTE *)v152)
            {
              v155 = *(unsigned int *)(v152 + 4);
              if ((int)v155 >= 0)
                v156 = (uint64_t *)(*(_QWORD *)(v153 + 272) + 8 * v155);
              else
                v156 = (uint64_t *)(*(_QWORD *)(v153 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
              v157 = *v156;
              if (*v156)
              {
                v158 = *(_QWORD *)(v157 + 16);
                *(_QWORD *)(v157 + 16) = v152;
                *(_QWORD *)(v152 + 16) = v158;
                if ((*(_BYTE *)(v152 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v152 + 24) = v157;
                }
                else
                {
                  *(_QWORD *)(v152 + 24) = 0;
                  v156 = (uint64_t *)(v158 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v152 + 16) = v152;
                *(_QWORD *)(v152 + 24) = 0;
              }
              *v156 = v152;
            }
            v152 += 32;
            v154 -= 32;
          }
          while (v154);
        }
        v141 = *(_QWORD *)(v139 + 728);
        if (v141)
          goto LABEL_241;
        goto LABEL_242;
      }
      v143 = *(_QWORD *)(v63 + 288);
      if ((v136 & 0x80000000) != 0)
        v144 = (uint64_t *)(*(_QWORD *)(v143 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
      else
        v144 = (uint64_t *)(*(_QWORD *)(v143 + 272) + 8 * v136);
      v145 = *v144;
      if (v145)
      {
        if ((*(_BYTE *)(v145 + 3) & 1) != 0)
        {
          v63 = v226;
        }
        else
        {
          v145 = *(_QWORD *)(v145 + 24);
          v63 = v226;
          if (!v145 || (*(_BYTE *)(v145 + 3) & 1) == 0)
            goto LABEL_247;
        }
        v180 = *(_QWORD *)(v145 + 8);
        if (v180)
        {
          v181 = v180;
          if ((*(_BYTE *)v180 & 4) == 0)
          {
            v181 = v180;
            if ((*(_WORD *)(v180 + 44) & 8) != 0)
            {
              v181 = v180;
              do
                v181 = *(_QWORD *)(v181 + 8);
              while ((*(_WORD *)(v181 + 44) & 8) != 0);
            }
          }
          v137 = *(uint64_t **)(v181 + 8);
          v182 = *(_QWORD *)(*(_QWORD *)(v180 + 24) + 40);
          *(_QWORD *)(v134 + 24) = v182;
          v183 = *(_QWORD *)(v182 + 32);
          v184 = *(unsigned int *)(v134 + 40);
          if ((_DWORD)v184)
          {
            v185 = *(_QWORD *)(v134 + 32);
            v186 = *(_QWORD *)(v183 + 40);
            v187 = 32 * v184;
            do
            {
              if (!*(_BYTE *)v185)
              {
                v188 = *(unsigned int *)(v185 + 4);
                if ((int)v188 >= 0)
                  v189 = (uint64_t *)(*(_QWORD *)(v186 + 272) + 8 * v188);
                else
                  v189 = (uint64_t *)(*(_QWORD *)(v186 + 24) + 16 * (v188 & 0x7FFFFFFF) + 8);
                v190 = *v189;
                if (*v189)
                {
                  v191 = *(_QWORD *)(v190 + 16);
                  *(_QWORD *)(v190 + 16) = v185;
                  *(_QWORD *)(v185 + 16) = v191;
                  if ((*(_BYTE *)(v185 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v185 + 24) = v190;
                  }
                  else
                  {
                    *(_QWORD *)(v185 + 24) = 0;
                    v189 = (uint64_t *)(v191 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v185 + 16) = v185;
                  *(_QWORD *)(v185 + 24) = 0;
                }
                *v189 = v185;
              }
              v185 += 32;
              v187 -= 32;
            }
            while (v187);
          }
          v141 = *(_QWORD *)(v183 + 728);
          v63 = v226;
          if (!v141)
            goto LABEL_242;
LABEL_241:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 24))(v141, v134);
LABEL_242:
          v142 = *v137 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v134 = v142 | *(_QWORD *)v134 & 7;
          *(_QWORD *)(v134 + 8) = v137;
          *(_QWORD *)(v142 + 8) = v134;
          *v137 = *v137 & 7 | v134;
        }
      }
LABEL_247:
      if (!v132)
      {
        if ((_DWORD)v247)
        {
          LODWORD(v146) = (v247 - 1) & (37 * v136);
          v147 = (char *)v245 + 8 * v146;
          v148 = *(_DWORD *)v147;
          if (v136 == *(_DWORD *)v147)
            goto LABEL_250;
          v178 = 1;
          while (v148 != -1)
          {
            v179 = v146 + v178++;
            v146 = v179 & (v247 - 1);
            v148 = *((_DWORD *)v245 + 2 * v146);
            if (v136 == v148)
            {
              v147 = (char *)v245 + 8 * v146;
              goto LABEL_250;
            }
          }
        }
        v147 = (char *)v245 + 8 * v247;
LABEL_250:
        if ((char *)v245 + 8 * v247 != v147)
        {
          v149 = *(_QWORD *)(v63 + 288);
          v150 = *((unsigned int *)v147 + 1);
          if ((v150 & 0x80000000) != 0)
            v151 = (uint64_t *)(*(_QWORD *)(v149 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
          else
            v151 = (uint64_t *)(*(_QWORD *)(v149 + 272) + 8 * v150);
          v159 = *v151;
          if (v159)
          {
            if ((*(_BYTE *)(v159 + 3) & 1) != 0
              || (v159 = *(_QWORD *)(v159 + 24)) != 0 && (*(_BYTE *)(v159 + 3) & 1) != 0)
            {
              v160 = *(_QWORD *)(v159 + 8);
            }
            else
            {
              v160 = 0;
            }
            v63 = v226;
          }
          else
          {
            v160 = 0;
          }
          v161 = **(unsigned __int16 **)(v134 + 16);
          v162 = *(_QWORD *)(v134 + 32);
          v231 = *(_QWORD *)(v162 + ((unint64_t)(v161 != 14) << 6) + 16);
          v163 = 96;
          if (v161 == 14)
            v163 = 32;
          v164 = *(_QWORD *)(v162 + v163 + 16);
          v165 = *(unsigned __int8 **)(v134 + 56);
          v237[0] = v165;
          if (v165)
          {
            llvm::MetadataTracking::track((uint64_t)v237, v165, 2);
            v161 = **(unsigned __int16 **)(v134 + 16);
          }
          v167 = v161 == 13 && (v166 = *(unsigned __int8 **)(v134 + 32), v166[32] == 1) && *v166 == 0;
          if (!v160 || (*(_BYTE *)v160 & 4) == 0)
          {
            while ((*(_WORD *)(v160 + 44) & 8) != 0)
              v160 = *(_QWORD *)(v160 + 8);
          }
          llvm::BuildMI(v233, *(unint64_t **)(v160 + 8), v237, *(_QWORD *)(*(_QWORD *)(v63 + 336) + 8) + 624, v167, *((_DWORD *)v147 + 1), v231, v164);
          v168 = *(_QWORD *)(v63 + 288);
          v169 = *((unsigned int *)v147 + 1);
          if ((v169 & 0x80000000) != 0)
            v170 = (uint64_t *)(*(_QWORD *)(v168 + 24) + 16 * (v169 & 0x7FFFFFFF) + 8);
          else
            v170 = (uint64_t *)(*(_QWORD *)(v168 + 272) + 8 * v169);
          v171 = *v170;
          if (v171)
          {
            while ((*(_BYTE *)(v171 + 3) & 1) != 0)
            {
              v171 = *(_QWORD *)(v171 + 24);
              if (!v171)
                goto LABEL_307;
            }
            v172 = 0;
            while (1)
            {
              v173 = *(_QWORD *)(v171 + 8);
              do
                v171 = *(_QWORD *)(v171 + 24);
              while (v171 && ((*(_BYTE *)(v171 + 3) & 1) != 0 || *(_QWORD *)(v171 + 8) == v173));
              v174 = **(unsigned __int16 **)(v173 + 16);
              if ((v174 - 13) >= 2)
              {
                if (v174 != 19 || v172 != 0)
                  break;
                v172 = v173;
                if (*(_QWORD *)(v173 + 24) != v233)
                  break;
              }
              if (!v171)
              {
                if (v172)
                {
                  RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits((uint64_t)v109, v169, (uint64_t)v90);
                  if (RegSizeInBits == llvm::TargetRegisterInfo::getRegSizeInBits((uint64_t)v109, *(_DWORD *)(*(_QWORD *)(v172 + 32) + 4), (uint64_t)v90))
                  {
                    llvm::BuildMI(*(llvm::MachineFunction **)(v63 + 280), v237, *(_QWORD *)(*(_QWORD *)(v63 + 336) + 8) + 624, v167, *(_DWORD *)(*(_QWORD *)(v172 + 32) + 4), v231, v164);
                    sub_1C49879A4((uint64_t *)(v233 + 40), v172, v177);
                  }
                }
                break;
              }
            }
          }
LABEL_307:
          if (v237[0])
            llvm::MetadataTracking::untrack((uint64_t)v237, v237[0]);
        }
      }
    }
  }
  if (*(_BYTE *)(v63 + 424))
    llvm::MachineFunction::finalizeDebugInstrRefs(*(llvm::MachineFunction **)(v63 + 280));
  v192 = *(_QWORD *)(v63 + 280);
  v193 = *(_QWORD *)(v192 + 328);
  if (v193 != v192 + 320)
  {
    v194 = *(_QWORD *)(v192 + 56);
    v195 = *(unsigned __int8 *)(v194 + 62);
    while (1)
    {
      if (v195 && *(_BYTE *)(v192 + 354))
        goto LABEL_367;
      v196 = *(_QWORD *)(v193 + 56);
      if (v196 != v193 + 48)
        break;
LABEL_366:
      v193 = *(_QWORD *)(v193 + 8);
      if (v193 == v192 + 320)
        goto LABEL_367;
    }
    v197 = *(_QWORD *)(*(_QWORD *)(v63 + 336) + 8);
    while (2)
    {
      v198 = **(unsigned __int16 **)(v196 + 16);
      if ((*(_QWORD *)(v197 + 48 * **(unsigned __int16 **)(v196 + 16) + 8) & 0xA0) == 0x80)
      {
        v195 = 1;
        *(_BYTE *)(v194 + 62) = 1;
        if ((v198 - 1) <= 1)
          goto LABEL_357;
      }
      else if ((v198 - 1) <= 1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v196 + 32) + 48) & 2) != 0)
        {
          v195 = 1;
          *(_BYTE *)(v194 + 62) = 1;
        }
LABEL_357:
        *(_BYTE *)(v192 + 354) = 1;
      }
      if ((*(_BYTE *)v196 & 4) == 0)
      {
        while ((*(_WORD *)(v196 + 44) & 8) != 0)
          v196 = *(_QWORD *)(v196 + 8);
      }
      v196 = *(_QWORD *)(v196 + 8);
      if (v196 == v193 + 48)
        goto LABEL_366;
      continue;
    }
  }
LABEL_367:
  *(_BYTE *)(v192 + 353) = llvm::Function::callsFunctionThatReturnsTwice(v228);
  v199 = *(_QWORD *)(v63 + 248);
  v200 = *(_DWORD *)(v199 + 484);
  v201 = *(_DWORD *)(v199 + 488) & 0xFFFFFFEF;
  if (v200 == 15 && v201 == 0)
  {
    v203 = *(_QWORD *)(*(_QWORD *)(v63 + 280) + 32);
    if (!*(_BYTE *)(v203 + 2109))
    {
      for (j = *((_QWORD *)v228 + 10); (char *)j != v229; j = *(_QWORD *)(j + 8))
      {
        v208 = j - 24;
        if (!j)
          v208 = 0;
        v209 = v208 + 40;
        v210 = *(_QWORD *)(v208 + 48);
        if (v210 != v209)
        {
          while (1)
          {
            v220 = (_DWORD *)(v210 - 24);
            if (!v210)
              v220 = 0;
            v221 = (*(_DWORD *)(*(_QWORD *)v220 + 8) & 0xFE) == 0x12
                 ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v220 + 16) + 8)
                 : *(_DWORD *)(*(_QWORD *)v220 + 8);
            if (v221 < 7)
              break;
            v211 = v220[5];
            if ((v211 & 0x40000000) != 0)
            {
              v213 = (uint64_t **)*((_QWORD *)v220 - 1);
              v212 = v211 & 0x7FFFFFF;
            }
            else
            {
              v212 = v211 & 0x7FFFFFF;
              v213 = (uint64_t **)&v220[-8 * v212];
            }
            if (v212)
            {
              v214 = 32 * v212;
              do
              {
                v215 = **v213;
                v216 = (*(_DWORD *)(v215 + 8) & 0xFE) == 0x12
                     ? *(unsigned __int8 *)(**(_QWORD **)(v215 + 16) + 8)
                     : *(_DWORD *)(v215 + 8);
                if (v216 < 7)
                  goto LABEL_407;
                v213 += 4;
                v214 -= 32;
              }
              while (v214);
            }
            v210 = *(_QWORD *)(v210 + 8);
            v217 = j - 24;
            if (!j)
              v217 = 0;
            v218 = v217 + 40;
            while (v210 == v218)
            {
              j = *(_QWORD *)(j + 8);
              if ((char *)j == v229)
                goto LABEL_373;
              v219 = j - 24;
              if (!j)
                v219 = 0;
              v218 = v219 + 40;
              v210 = *(_QWORD *)(v219 + 48);
            }
            if ((char *)j == v229)
              goto LABEL_373;
          }
LABEL_407:
          *(_BYTE *)(v203 + 2109) = 1;
          break;
        }
      }
    }
  }
LABEL_373:
  sub_1C5CC8114(*(_QWORD *)(v63 + 264));
  MEMORY[0x1CAA32FB4](v245, 4);
  v204 = v234;
  v205 = v235;
  if (*(_DWORD *)(v234 + 328) != v235)
  {
    *(_DWORD *)(v234 + 328) = v235;
    v206 = *(_QWORD *)(v204 + 248);
    *(_DWORD *)(v206 + 552) = v205;
    *(_WORD *)(v206 + 1020) = *(_WORD *)(v206 + 1020) & 0xF7FF | (v236 << 11);
  }
  LOBYTE(v2) = v227;
  return (v2 & 0x80) == 0;
}

void sub_1C5D6D28C(uint64_t a1, llvm::Type **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Type *v8;
  char *v9;
  int v10;
  int v11;
  unsigned int v12;
  char **v13;
  char *v14;
  char **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  llvm::Type ***v24;
  llvm::Type **v25;
  llvm::Type ***v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  _QWORD *v36;
  llvm::MachineBasicBlock *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::DataLayout *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t *v72;
  const char *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  llvm::MDNode *v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  int64_t v86;
  unint64_t v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  void **v91;
  void *v92;
  _QWORD *v93;
  char *v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  BOOL v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t mm;
  uint64_t v112;
  uint64_t v113;
  uint64_t nn;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *j;
  uint64_t v119;
  _QWORD *v120;
  llvm::MachineInstr *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  llvm::Value **v136;
  llvm::Value *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  const llvm::Value *v142;
  unsigned int v143;
  uint64_t k;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  llvm::MachineFunction *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t m;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  char isNullValue;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  llvm::Type *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  llvm::MachineBasicBlock *v188;
  int v189;
  char *v190;
  char v191;
  BOOL v192;
  uint64_t v193;
  int v194;
  uint64_t *v195;
  _QWORD *v196;
  llvm::MachineInstr *v197;
  int v198;
  char *v199;
  unint64_t v200;
  void **v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  llvm::MachineInstr *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  llvm::MachineFunction *v211;
  int v212;
  llvm::MachineBasicBlock *v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  llvm::MachineInstr *v220;
  unint64_t *SplitPointForStackProtector;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v225;
  unint64_t *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  llvm::MachineBasicBlock **v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  _DWORD *n;
  llvm::MachineFunction *v276;
  llvm::MachineInstr *v277;
  uint64_t v278;
  int v279;
  llvm::MachineBasicBlock *v280;
  int v281;
  llvm::MachineBasicBlock *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  llvm::MachineBasicBlock *v286;
  _QWORD *v287;
  _QWORD *v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t ii;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  llvm::MachineFunction *v333;
  uint64_t v334;
  uint64_t v335;
  llvm::MachineInstr *v336;
  uint64_t v337;
  int v338;
  llvm::MachineBasicBlock *v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  int v343;
  llvm::MachineBasicBlock *v344;
  uint64_t v345;
  unsigned __int8 **v346;
  unsigned __int8 **v347;
  uint64_t jj;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  llvm::MachineBasicBlock *v366;
  uint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t kk;
  int v372;
  unsigned int v374;
  llvm::MachineFunction *v375;
  uint64_t v376;
  unsigned int v377;
  uint64_t v378;
  int v379;
  void *v380;
  unsigned __int8 **v381;
  unsigned __int8 *v382;
  unsigned __int8 **v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  llvm::MachineBasicBlock *v395;
  _BOOL4 v396;
  char *v397;
  char v398;
  BOOL v399;
  uint64_t v400;
  char *v401;
  unint64_t v402;
  void **v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  void *v407;
  unsigned __int16 v408;
  unsigned __int16 v409;
  unint64_t v410;
  char *v411;
  _QWORD *v412;
  _QWORD *v413;
  char *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  char *v419;
  uint64_t v420;
  _QWORD *v421;
  _QWORD *v422;
  unsigned __int16 v423;
  char *v424;
  char *v425;
  _QWORD *v426;
  _QWORD *v427;
  int v428;
  unint64_t *v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  llvm::MachineFunction *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char v450;
  llvm::MachineBasicBlock *v451;
  const llvm::BasicBlock *v452;
  _QWORD *v453;
  char **v454;
  llvm::Type ***v455;
  llvm::Type **v456;
  llvm::Type **v457;
  unsigned int v458;
  uint64_t v459;
  llvm::Value *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  _QWORD *v465;
  char *v466;
  llvm::StackProtector *v467;
  char *v468;
  uint64_t *v469;
  uint64_t v470;
  llvm::MachineBasicBlock *v471;
  uint64_t v472;
  uint64_t v473;
  unsigned __int16 v474;
  uint64_t v475;
  void *v476;
  uint64_t v477;
  uint64_t v478;
  _QWORD *v479;
  unsigned __int8 *v480;
  void *v481[2];
  char v482;
  void *__p;
  char v484;
  void *v485;
  _QWORD *v486;
  uint64_t v487;
  char *v488;
  uint64_t v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  char v495;
  uint64_t v496;
  int v497;
  void **v498;
  __int128 v499;
  llvm::MachineBasicBlock *v500;
  uint64_t v501;
  int v502;
  int v503;
  const char *v504;
  const char *v505;
  uint64_t v506;
  char v507;
  char v508;
  void *v509;
  uint64_t v510;
  _BYTE v511[256];
  char v512;
  int v513;
  _QWORD *v514;
  uint64_t v515;

  v515 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 352) = 0;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 248) + 1020) & 0x800) != 0)
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 1992))(*(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 256));
    v4 = (uint64_t *)v5;
    if (v5)
      *(_BYTE *)(v5 + 129) = *(_BYTE *)(a1 + 424);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)&v499 = a2;
  v486 = 0;
  v487 = 0;
  v485 = 0;
  sub_1C4DC1ECC((char **)&v485, (uint64_t)&v499);
  v6 = *(_QWORD *)(a1 + 264);
  v7 = *(_QWORD *)(v6 + 56);
  v8 = a2[10];
  v9 = (char *)v8 - 24;
  if (!v8)
    v9 = 0;
  *(_QWORD *)&v499 = v9;
  v10 = *(_DWORD *)(v6 + 72);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = ((v9 >> 4) ^ (v9 >> 9)) & (v10 - 1);
    v13 = (char **)(v7 + 16 * v12);
    v14 = *v13;
    if (v9 == *v13)
      goto LABEL_17;
    v15 = 0;
    v16 = 1;
    while (v14 != (char *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (char *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (char **)(v7 + 16 * (v18 & v11));
      v14 = *v13;
      if (v9 == *v13)
        goto LABEL_17;
    }
    if (v15)
      v454 = v15;
    else
      v454 = v13;
  }
  else
  {
    v454 = 0;
  }
  v13 = (char **)sub_1C47AD254((_DWORD *)(v6 + 56), (uint64_t)&v499, &v499, v454);
  *v13 = (char *)v499;
  v13[1] = 0;
  v6 = *(_QWORD *)(a1 + 264);
LABEL_17:
  *(_QWORD *)(v6 + 640) = v13[1];
  *(_QWORD *)(*(_QWORD *)(a1 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 640) + 56);
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 80) = *(_QWORD *)(a1 + 264);
  v469 = v4;
  if (!v4)
  {
    sub_1C5D3533C((_QWORD *)a1, (uint64_t)a2);
    goto LABEL_64;
  }
  sub_1C5CC1314(v4);
  if ((sub_1C632A258((uint64_t)v4) & 1) == 0)
  {
    *(_BYTE *)(a1 + 352) = 1;
    if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
      goto LABEL_36;
    v19 = **(_QWORD **)*a2;
    *(_QWORD *)&v499 = a2;
    v20 = *(_DWORD *)(v19 + 2496);
    if (v20)
    {
      v21 = *(_QWORD *)(v19 + 2480);
      v22 = v20 - 1;
      v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
      v24 = (llvm::Type ***)(v21 + 40 * v23);
      v25 = *v24;
      if (*v24 == a2)
        goto LABEL_31;
      v26 = 0;
      v27 = 1;
      while (v25 != (llvm::Type **)-4096)
      {
        if (v26)
          v28 = 0;
        else
          v28 = v25 == (llvm::Type **)-8192;
        if (v28)
          v26 = v24;
        v29 = v23 + v27++;
        v23 = v29 & v22;
        v24 = (llvm::Type ***)(v21 + 40 * v23);
        v25 = *v24;
        if (*v24 == a2)
          goto LABEL_31;
      }
      if (v26)
        v455 = v26;
      else
        v455 = v24;
    }
    else
    {
      v455 = 0;
    }
    v24 = (llvm::Type ***)sub_1C541AB24(v19 + 2480, (uint64_t)&v499, (uint64_t *)&v499, v455);
    v456 = (llvm::Type **)v499;
    v24[3] = 0;
    v24[4] = 0;
    *v24 = v456;
    v24[1] = (llvm::Type **)(v24 + 3);
    v24[2] = (llvm::Type **)0x100000000;
LABEL_31:
    v30 = *((unsigned int *)v24 + 4);
    if ((_DWORD)v30)
    {
      v31 = v24[1] + 1;
      v32 = 16 * v30;
      LODWORD(v33) = 0;
      while (*((_DWORD *)v31 - 2))
      {
        v34 = 0;
        v31 += 2;
        v32 -= 16;
        if (!v32)
          goto LABEL_38;
      }
      v33 = *v31;
      if (*v31)
      {
        v34 = *v31;
        if (*(_BYTE *)v33 != 15)
          v34 = *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8));
        LODWORD(v33) = *(_DWORD *)(v33 + 28);
        goto LABEL_38;
      }
LABEL_37:
      v34 = 0;
LABEL_38:
      v35 = a2[10];
      if (v35)
        v36 = (_QWORD *)((char *)v35 - 24);
      else
        v36 = 0;
      v37 = (llvm::MachineBasicBlock *)v36[7];
      DWORD2(v499) = 10;
      BYTE12(v499) = 2;
      v500 = v37;
      v501 = v34;
      v502 = v33;
      v503 = 0;
      v504 = "sdagisel";
      v505 = "FastISelFailure";
      v506 = 15;
      v507 = 0;
      v508 = 0;
      v509 = v511;
      v510 = 0x400000000;
      v512 = 0;
      v513 = -1;
      v514 = v36;
      *(_QWORD *)&v499 = &off_1E814E538;
      v490 = "FastISel didn't lower all arguments: ";
      v491 = 37;
      sub_1C53B17B4((uint64_t)&v509, (const void **)&v490);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v481, "Prototype", 9uLL, *a2);
      sub_1C47E3888((uint64_t)&v499, (uint64_t)v481);
      if (v484 < 0)
        operator delete(__p);
      if (v482 < 0)
        operator delete(v481[0]);
      sub_1C5D70480(**(uint64_t *****)(a1 + 280), *(llvm::OptimizationRemarkEmitter **)(a1 + 432), (llvm::DiagnosticInfoOptimizationBase *)&v499, dword_1ED825340 > 1);
      sub_1C5D3533C((_QWORD *)a1, (uint64_t)a2);
      v38 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(v38 + 192) = sub_1C635C3F4(*(_QWORD *)(a1 + 304));
      *(_DWORD *)(v38 + 200) = v39;
      sub_1C635C2BC(*(_QWORD *)(a1 + 304));
      sub_1C5D6F9FC(a1, v40, v41, v42, v43, v44, v45, v46);
      *(_QWORD *)&v499 = &off_1E814E790;
      v47 = (char *)v509;
      if ((_DWORD)v510)
      {
        v48 = (unint64_t)v510 << 6;
        do
        {
          v49 = (void **)&v47[v48];
          if (v47[v48 - 17] < 0)
            operator delete(*(v49 - 5));
          if (*((char *)v49 - 41) < 0)
            operator delete(*(v49 - 8));
          v48 -= 64;
        }
        while (v48);
        v47 = (char *)v509;
      }
      if (v47 != v511)
        free(v47);
      v4 = v469;
      goto LABEL_56;
    }
LABEL_36:
    LODWORD(v33) = 0;
    goto LABEL_37;
  }
LABEL_56:
  v50 = *(_QWORD *)(a1 + 264);
  v51 = *(_QWORD **)(*(_QWORD *)(v50 + 640) + 56);
  v52 = *(_QWORD **)(v50 + 648);
  if (v52 == v51)
  {
    v4[17] = 0;
    v4[18] = 0;
  }
  else
  {
    v53 = *v52 & 0xFFFFFFFFFFFFFFF8;
    if (!v53 || (*(_BYTE *)v53 & 4) == 0)
    {
      while ((*(_WORD *)(v53 + 44) & 4) != 0)
        v53 = *(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8;
    }
    v4[17] = v53;
    v4[18] = v53;
  }
LABEL_64:
  v54 = *(_QWORD *)(a1 + 272);
  v55 = **(_QWORD **)(a1 + 304);
  if (v55)
  {
    v56 = *(unsigned __int8 **)(v55 + 48);
    v480 = v56;
    if (v56)
      llvm::MetadataTracking::track((uint64_t)&v480, v56, 2);
  }
  else
  {
    v480 = 0;
  }
  v57 = llvm::SwiftErrorValueTracking::createEntriesInEntryBlock(v54, &v480);
  if (v480)
    llvm::MetadataTracking::untrack((uint64_t)&v480, v480);
  if (v4 && ((v57 ^ 1) & 1) == 0)
  {
    v58 = **(_QWORD **)(*(_QWORD *)(a1 + 264) + 648) & 0xFFFFFFFFFFFFFFF8;
    if (!v58 || (*(_BYTE *)v58 & 4) == 0)
    {
      while ((*(_WORD *)(v58 + 44) & 4) != 0)
        v58 = *(_QWORD *)v58 & 0xFFFFFFFFFFFFFFF8;
    }
    v4[17] = v58;
    v4[18] = v58;
  }
  v457 = a2;
  v475 = a1;
  v59 = *(_QWORD *)(a1 + 264);
  v60 = *(_QWORD *)v59 + 72;
  v61 = *(_QWORD *)(*(_QWORD *)v59 + 80);
  if (v61 != v60)
  {
    v62 = *(_QWORD *)(v59 + 8);
    v63 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v62 + 40) + 272);
    v470 = v62 + 768;
    do
    {
      v64 = v61 - 24;
      if (!v61)
        v64 = 0;
      v65 = v64 + 40;
      for (i = *(_QWORD *)(v64 + 48); i != v65; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v67 = i - 24;
        else
          v67 = 0;
        v68 = sub_1C5021D50(v67);
        if (v68)
          v69 = v67;
        else
          v69 = 0;
        if (i && v68)
        {
          v70 = *(unsigned __int8 **)(*(_QWORD *)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF)) + 24);
          v71 = *v70;
          if (v71 <= 0x22)
          {
            if (v71 == 32)
            {
              v70 = (unsigned __int8 *)**((_QWORD **)v70 + 3);
            }
            else if (((1 << v71) & 0x6FFFFFFF0) != 0)
            {
              continue;
            }
          }
          v72 = (uint64_t *)*((_QWORD *)v70 + 16);
          if (!v72)
            continue;
          sub_1C4768AD0((uint64_t)v63, *v72);
          v76 = v75;
          if ((_DWORD)v73 == 1)
          DWORD2(v499) = v76;
          if (v76 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v499, 0, 0);
          else
            *(_QWORD *)&v499 = 0;
          v77 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v72, v63, (const void **)&v499, 0, 0, 0, v74);
          v78 = v77[16];
          if (v77 && v78 == 59)
          {
            v476 = v77;
            v490 = 0;
            if (sub_1C47A82D8(v59 + 176, &v476, &v490)
              && v490 != (void *)(*(_QWORD *)(v59 + 176) + 16 * *(unsigned int *)(v59 + 192)))
            {
              v79 = *((_DWORD *)v490 + 2);
              goto LABEL_105;
            }
            goto LABEL_115;
          }
          if (v77)
            v84 = v78 == 21;
          else
            v84 = 0;
          if (!v84)
            goto LABEL_115;
          v79 = sub_1C632BB28(v59, (uint64_t)v77);
LABEL_105:
          if (v79 == 0x7FFFFFFF)
          {
LABEL_115:
            if (DWORD2(v499) >= 0x41)
            {
              if ((_QWORD)v499)
                MEMORY[0x1CAA32F9C](v499, 0x1000C8000313F17);
            }
            continue;
          }
          v80 = *(_DWORD *)(v69 + 20) & 0x7FFFFFF;
          v81 = -v80;
          v82 = *(llvm::MDNode **)(*(_QWORD *)(v69 - 32 * v80 + 64) + 24);
          if (DWORD2(v499) > 0x40)
          {
            v85 = 0;
            v86 = ((unint64_t)DWORD2(v499) + 63) >> 6;
            do
            {
              v101 = v86-- < 1;
              if (v101)
                break;
              v87 = *(_QWORD *)(v499 + 8 * v86);
              v85 += __clz(v87);
            }
            while (!v87);
            v88 = DWORD2(v499) | 0xFFFFFFC0;
            if ((BYTE8(v499) & 0x3F) == 0)
              v88 = 0;
            if (v85 + v88 == DWORD2(v499))
              goto LABEL_128;
            v83 = *(_QWORD *)v499;
          }
          else
          {
            v83 = v499;
            if (!(_QWORD)v499)
              goto LABEL_128;
          }
          v82 = llvm::DIExpression::prepend(v82, 0, v83);
          v81 = -(uint64_t)(*(_DWORD *)(v69 + 20) & 0x7FFFFFF);
LABEL_128:
          v89 = *(char **)(v69 + 48);
          v490 = *(void **)(*(_QWORD *)(v69 + 32 * v81 + 32) + 24);
          v476 = v82;
          LODWORD(v479) = v79;
          v488 = v89;
          sub_1C62708E4(v470, &v490, (uint64_t *)&v476, (int *)&v479, (uint64_t *)&v488);
          goto LABEL_115;
        }
      }
      v61 = *(_QWORD *)(v61 + 8);
    }
    while (v61 != v60);
  }
  v90 = v475;
  v91 = **(void ****)(v475 + 8);
  do
  {
    v92 = *v91;
    v91 += 2;
  }
  while (v92 != &llvm::StackProtector::ID);
  v467 = (llvm::StackProtector *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v91 - 1) + 96))(*(v91 - 1), &llvm::StackProtector::ID);
  v94 = (char *)v485;
  v93 = v486;
  v95 = v469;
  if (v486 != v485)
  {
    v465 = (_QWORD *)(v475 + 380);
    v466 = (char *)v485;
    while (1)
    {
      v96 = (_QWORD *)*(v93 - 1);
      v479 = v96;
      v468 = (char *)(v93 - 1);
      if (*(_DWORD *)(v90 + 328))
        break;
LABEL_183:
      v117 = v96 + 5;
      for (j = (_QWORD *)v96[6]; j != v117; j = (_QWORD *)j[1])
      {
        v119 = (uint64_t)(j - 3);
        if (j)
          v120 = j - 3;
        else
          v120 = 0;
        if (*((_BYTE *)v120 + 16) != 83)
          goto LABEL_191;
      }
      v119 = 0;
LABEL_191:
      *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = sub_1C61294C8((_DWORD *)(*(_QWORD *)(v90 + 264) + 56), &v479)[1];
      v122 = *(_QWORD *)(v90 + 264);
      v123 = *(_QWORD *)(v122 + 640);
      if (!v123)
        goto LABEL_467;
      *(_QWORD *)(v122 + 648) = v123 + 48;
      v124 = *(_QWORD **)(v90 + 264);
      *(_QWORD *)((char *)v124 + 772) = 0;
      v125 = v479;
      v126 = v479[6];
      v127 = v126 - 24;
      if (!v126)
        v127 = 0;
      if (*(_BYTE *)(v127 + 16) == 83)
      {
        v128 = v475 + 360;
        do
        {
          v126 = *(_QWORD *)(v126 + 8);
          v129 = v126 - 24;
          if (!v126)
            v129 = 0;
        }
        while (*(_BYTE *)(v129 + 16) == 83);
      }
      else
      {
        v128 = v475 + 360;
      }
      v130 = *(unsigned __int8 *)(v126 - 8) - 38;
      v101 = v130 > 0x38;
      v131 = (1 << v130) & 0x100060000000001;
      if (!v101 && v131 != 0)
      {
        v133 = (_QWORD *)v124[80];
        v476 = v133;
        v134 = *v124;
        v135 = *(_DWORD *)(*v124 + 20);
        if ((v135 & 0x40000000) != 0)
          v136 = *(llvm::Value ***)(v134 - 8);
        else
          v136 = (llvm::Value **)(v134 - 32 * (v135 & 0x7FFFFFF));
        v137 = *v136;
        v138 = v133[2];
        v139 = *(_QWORD *)(v90 + 344);
        v140 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v90 + 296) + 40) + 40) + 272, 0);
        v141 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v139 + 424))(v139, v140, 0);
        v143 = llvm::classifyEHPersonality(v137, v142);
        if (v143 - 7 <= 3)
        {
          for (k = *(_QWORD *)(v138 + 48); ; k = *(_QWORD *)(k + 8))
          {
            if (k == v138 + 40)
              goto LABEL_271;
            v145 = k - 24;
            v146 = k ? k - 24 : 0;
            if (*(_BYTE *)(v146 + 16) != 83)
              break;
          }
          if (*(_BYTE *)(k - 8) != 80)
            goto LABEL_271;
          v150 = *(_QWORD *)(k - 16);
          if (!v150)
            goto LABEL_271;
          while (1)
          {
            v151 = *(_QWORD *)(v150 + 24);
            if (*(_BYTE *)(v151 + 16) == 84)
            {
              v152 = *(_QWORD *)(v151 - 32);
              if (v152)
              {
                if (!*(_BYTE *)(v152 + 16)
                  && *(_QWORD *)(v152 + 24) == *(_QWORD *)(v151 + 72)
                  && (*(_BYTE *)(v152 + 33) & 0x20) != 0
                  && (*(_DWORD *)(v152 + 36) & 0xFFFFFFFE) == 0x3E)
                {
                  break;
                }
              }
            }
            v150 = *(_QWORD *)(v150 + 8);
            if (!v150)
              goto LABEL_271;
          }
          v408 = (*(uint64_t (**)(_QWORD, llvm::Value *))(**(_QWORD **)(v90 + 344) + 712))(*(_QWORD *)(v90 + 344), v137);
          v409 = v408;
          v411 = (char *)v133[20];
          v410 = v133[21];
          v474 = v408;
          if ((unint64_t)v411 >= v410)
          {
            v463 = v141;
            v412 = v133;
            v414 = (char *)v133[19];
            v415 = (v411 - v414) >> 4;
            v416 = v415 + 1;
            if ((unint64_t)(v415 + 1) >> 60)
              abort();
            v417 = v410 - (_QWORD)v414;
            if (v417 >> 3 > v416)
              v416 = v417 >> 3;
            if ((unint64_t)v417 >= 0x7FFFFFFFFFFFFFF0)
              v418 = 0xFFFFFFFFFFFFFFFLL;
            else
              v418 = v416;
            if (v418)
            {
              if (v418 >> 60)
                sub_1C4764EE4();
              v423 = v408;
              v461 = v418;
              v419 = (char *)operator new(16 * v418);
              v418 = v461;
              v409 = v423;
            }
            else
            {
              v419 = 0;
            }
            v424 = &v419[16 * v415];
            *(_WORD *)v424 = v409;
            *((_QWORD *)v424 + 1) = -1;
            v425 = v424;
            if (v411 == v414)
            {
              v426 = v412;
            }
            else
            {
              do
              {
                *((_OWORD *)v425 - 1) = *((_OWORD *)v411 - 1);
                v425 -= 16;
                v411 -= 16;
              }
              while (v411 != v414);
              v426 = v412;
              v411 = (char *)v412[19];
            }
            v413 = v424 + 16;
            v426[19] = v425;
            v426[20] = v424 + 16;
            v426[21] = &v419[16 * v418];
            v141 = v463;
            if (v411)
              operator delete(v411);
            v128 = v475 + 360;
          }
          else
          {
            v412 = v133;
            *(_WORD *)v411 = v408;
            *((_QWORD *)v411 + 1) = -1;
            v413 = v411 + 16;
          }
          v412[20] = v413;
          v427 = v412;
          v428 = sub_1C632BB88(*(_QWORD *)(v90 + 264), v145, v141);
          v429 = *(unint64_t **)(*(_QWORD *)(v90 + 264) + 648);
          v430 = **(_QWORD **)(v90 + 304);
          v464 = v428;
          if (!v430)
          {
            v488 = 0;
            goto LABEL_548;
          }
          v431 = *(char **)(v430 + 48);
          v488 = v431;
          if (v431)
          {
            llvm::MetadataTracking::track((uint64_t)&v488, (unsigned __int8 *)v431, 2);
            v432 = *(_QWORD *)(*(_QWORD *)(v90 + 336) + 8) + 912;
            v433 = (llvm::MachineFunction *)v427[4];
            v490 = v488;
            if (v488)
              llvm::MetadataTracking::track((uint64_t)&v490, (unsigned __int8 *)v488, 2);
          }
          else
          {
LABEL_548:
            v432 = *(_QWORD *)(*(_QWORD *)(v90 + 336) + 8) + 912;
            v433 = (llvm::MachineFunction *)v427[4];
            v490 = 0;
          }
          v434 = *((_QWORD *)v433 + 28);
          if (v434)
            *((_QWORD *)v433 + 28) = *(_QWORD *)v434;
          else
            v434 = sub_1C484358C((uint64_t)v433 + 128, 72, 3);
          *(_QWORD *)&v499 = v490;
          if (v490)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v490, (unsigned __int8 *)v490, (uint64_t)&v499);
            v490 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v434, v433, v432, (unsigned __int8 **)&v499, 0);
          if ((_QWORD)v499)
            llvm::MetadataTracking::untrack((uint64_t)&v499, (unsigned __int8 *)v499);
          if (v490)
            llvm::MetadataTracking::untrack((uint64_t)&v490, (unsigned __int8 *)v490);
          v435 = v427[5];
          *(_QWORD *)(v434 + 24) = v435;
          v436 = *(_QWORD *)(v435 + 32);
          v437 = *(unsigned int *)(v434 + 40);
          if ((_DWORD)v437)
          {
            v441 = *(_QWORD *)(v434 + 32);
            v442 = *(_QWORD *)(v436 + 40);
            v443 = 32 * v437;
            do
            {
              if (!*(_BYTE *)v441)
              {
                v444 = *(unsigned int *)(v441 + 4);
                if ((int)v444 >= 0)
                  v445 = (uint64_t *)(*(_QWORD *)(v442 + 272) + 8 * v444);
                else
                  v445 = (uint64_t *)(*(_QWORD *)(v442 + 24) + 16 * (v444 & 0x7FFFFFFF) + 8);
                v446 = *v445;
                if (*v445)
                {
                  v447 = *(_QWORD *)(v446 + 16);
                  *(_QWORD *)(v446 + 16) = v441;
                  *(_QWORD *)(v441 + 16) = v447;
                  if ((*(_BYTE *)(v441 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v441 + 24) = v446;
                  }
                  else
                  {
                    *(_QWORD *)(v441 + 24) = 0;
                    v445 = (uint64_t *)(v447 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v441 + 16) = v441;
                  *(_QWORD *)(v441 + 24) = 0;
                }
                *v445 = v441;
              }
              v441 += 32;
              v443 -= 32;
            }
            while (v443);
          }
          v438 = *(_QWORD *)(v436 + 728);
          if (v438)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v438 + 24))(v438, v434);
          v439 = *v429 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v434 = v439 | *(_QWORD *)v434 & 7;
          *(_QWORD *)(v434 + 8) = v429;
          *(_QWORD *)(v439 + 8) = v434;
          *v429 = *v429 & 7 | v434;
          *((_QWORD *)&v499 + 1) = 0;
          v500 = 0;
          v501 = 0;
          DWORD1(v499) = v464;
          LODWORD(v499) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v433, (const llvm::MachineOperand *)&v499);
          HIDWORD(v499) = 0;
          v500 = 0;
          v501 = 0;
          *(_QWORD *)((char *)&v499 + 4) = v474;
          LODWORD(v499) = 0x4000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v433, (const llvm::MachineOperand *)&v499);
          if (v488)
            llvm::MetadataTracking::untrack((uint64_t)&v488, (unsigned __int8 *)v488);
          goto LABEL_271;
        }
        v458 = v143;
        v462 = v141;
        v471 = llvm::MachineFunction::addLandingPad(*(llvm::MachineFunction **)(v90 + 280), (llvm::MachineBasicBlock *)v133);
        v147 = *(_QWORD *)(*(_QWORD *)(v90 + 336) + 8);
        v148 = *(unint64_t **)(*(_QWORD *)(v90 + 264) + 648);
        v149 = **(_QWORD **)(v90 + 304);
        v459 = v138;
        v460 = v137;
        if (!v149)
        {
          v488 = 0;
          goto LABEL_229;
        }
        v153 = *(char **)(v149 + 48);
        v488 = v153;
        if (v153)
        {
          llvm::MetadataTracking::track((uint64_t)&v488, (unsigned __int8 *)v153, 2);
          v154 = (llvm::MachineFunction *)v133[4];
          v490 = v488;
          if (v488)
            llvm::MetadataTracking::track((uint64_t)&v490, (unsigned __int8 *)v488, 2);
        }
        else
        {
LABEL_229:
          v154 = (llvm::MachineFunction *)v133[4];
          v490 = 0;
        }
        v155 = *((_QWORD *)v154 + 28);
        if (v155)
          *((_QWORD *)v154 + 28) = *(_QWORD *)v155;
        else
          v155 = sub_1C484358C((uint64_t)v154 + 128, 72, 3);
        *(_QWORD *)&v499 = v490;
        if (v490)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v490, (unsigned __int8 *)v490, (uint64_t)&v499);
          v490 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v155, v154, v147 + 192, (unsigned __int8 **)&v499, 0);
        if ((_QWORD)v499)
          llvm::MetadataTracking::untrack((uint64_t)&v499, (unsigned __int8 *)v499);
        if (v490)
          llvm::MetadataTracking::untrack((uint64_t)&v490, (unsigned __int8 *)v490);
        v156 = v133[5];
        *(_QWORD *)(v155 + 24) = v156;
        v157 = *(_QWORD *)(v156 + 32);
        v158 = *(unsigned int *)(v155 + 40);
        if ((_DWORD)v158)
        {
          v388 = *(_QWORD *)(v155 + 32);
          v389 = *(_QWORD *)(v157 + 40);
          v390 = 32 * v158;
          do
          {
            if (!*(_BYTE *)v388)
            {
              v391 = *(unsigned int *)(v388 + 4);
              if ((int)v391 >= 0)
                v392 = (uint64_t *)(*(_QWORD *)(v389 + 272) + 8 * v391);
              else
                v392 = (uint64_t *)(*(_QWORD *)(v389 + 24) + 16 * (v391 & 0x7FFFFFFF) + 8);
              v393 = *v392;
              if (*v392)
              {
                v394 = *(_QWORD *)(v393 + 16);
                *(_QWORD *)(v393 + 16) = v388;
                *(_QWORD *)(v388 + 16) = v394;
                if ((*(_BYTE *)(v388 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v388 + 24) = v393;
                }
                else
                {
                  *(_QWORD *)(v388 + 24) = 0;
                  v392 = (uint64_t *)(v394 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v388 + 16) = v388;
                *(_QWORD *)(v388 + 24) = 0;
              }
              *v392 = v388;
            }
            v388 += 32;
            v390 -= 32;
          }
          while (v390);
        }
        v159 = *(_QWORD *)(v157 + 728);
        if (v159)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v159 + 24))(v159, v155);
        v160 = *v148 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v155 = v160 | *(_QWORD *)v155 & 7;
        *(_QWORD *)(v155 + 8) = v148;
        *(_QWORD *)(v160 + 8) = v155;
        *v148 = *v148 & 7 | v155;
        v500 = v471;
        LODWORD(v501) = 0;
        v499 = 0xFuLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v155, v154, (const llvm::MachineOperand *)&v499);
        if (v488)
          llvm::MetadataTracking::untrack((uint64_t)&v488, (unsigned __int8 *)v488);
        v161 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v90 + 280) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v90 + 280) + 16));
        v162 = (int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v161 + 48))(v161, *(_QWORD *)(v90 + 280));
        if (v162)
          sub_1C4963F5C(*(_QWORD *)(*(_QWORD *)(v90 + 280) + 40) + 280, v162, 0xFFFFFFFF);
        if (v458 == 12)
        {
          for (m = *(_QWORD *)(v459 + 48); m != v459 + 40; m = *(_QWORD *)(m + 8))
          {
            v164 = m - 24;
            if (!m)
              v164 = 0;
            if (*(_BYTE *)(v164 + 16) != 83)
            {
              if (*(_BYTE *)(m - 8) == 80)
              {
                v169 = v133[4];
                v170 = *(_DWORD *)(m - 4) & 0x7FFFFFF;
                if (v170 != 2
                  || (isNullValue = llvm::Constant::isNullValue(*(llvm::Constant **)(m - 88)),
                      v170 = *(_DWORD *)(m - 4) & 0x7FFFFFF,
                      (isNullValue & 1) == 0))
                {
                  if (v170 != 1)
                  {
                    v172 = *(_QWORD *)(m - 16);
                    if (v172)
                    {
                      while (1)
                      {
                        v173 = *(_QWORD *)(v172 + 24);
                        if (*(_BYTE *)(v173 + 16) == 84)
                        {
                          v174 = *(_QWORD *)(v173 - 32);
                          if (v174)
                          {
                            if (!*(_BYTE *)(v174 + 16)
                              && *(_QWORD *)(v174 + 24) == *(_QWORD *)(v173 + 72)
                              && (*(_BYTE *)(v174 + 33) & 0x20) != 0
                              && *(_DWORD *)(v174 + 36) == 11060)
                            {
                              break;
                            }
                          }
                        }
                        v172 = *(_QWORD *)(v172 + 8);
                        if (!v172)
                          goto LABEL_271;
                      }
                      v420 = *(_QWORD *)(v173 - 32 * (*(_DWORD *)(v173 + 20) & 0x7FFFFFF) + 32);
                      v421 = (_QWORD *)(v420 + 24);
                      if (*(_DWORD *)(v420 + 32) >= 0x41u)
                      {
                        v422 = v133;
                        v421 = (_QWORD *)*v421;
                      }
                      else
                      {
                        v422 = v133;
                      }
                      v440 = (_QWORD *)*v421;
                      *(_QWORD *)&v499 = v422;
                      *((_DWORD *)sub_1C6128C08((uint64_t *)(v169 + 560), &v499) + 2) = (_DWORD)v440;
                    }
                  }
                }
              }
              break;
            }
          }
        }
        else
        {
          v165 = *(_QWORD *)(v90 + 280);
          v166 = sub_1C635A728((uint64_t *)(*(_QWORD *)(v90 + 304) + 936), &v476);
          llvm::MachineFunction::setCallSiteLandingPad(v165, (uint64_t)v471, (_BYTE *)v166[1], *((unsigned int *)v166 + 4));
          v167 = (*(uint64_t (**)(_QWORD, llvm::Value *))(**(_QWORD **)(v90 + 344) + 712))(*(_QWORD *)(v90 + 344), v460);
          if (v167)
            *(_DWORD *)(*(_QWORD *)(v90 + 264) + 772) = llvm::MachineBasicBlock::addLiveIn(v476, v167, v462);
          v168 = (*(uint64_t (**)(_QWORD, llvm::Value *))(**(_QWORD **)(v90 + 344) + 720))(*(_QWORD *)(v90 + 344), v460);
          if (v168)
            *(_DWORD *)(*(_QWORD *)(v90 + 264) + 776) = llvm::MachineBasicBlock::addLiveIn(v476, v168, v462);
        }
LABEL_271:
        v125 = v479;
        v95 = v469;
      }
      v175 = v119 + 24;
      if (v95)
      {
        v176 = v457[10];
        if (v176)
          v177 = (_QWORD *)((char *)v176 - 24);
        else
          v177 = 0;
        if (v125 != v177)
          sub_1C5CC1314(v95);
        llvm::SwiftErrorValueTracking::preassignVRegs(*(_QWORD *)(v90 + 272), *(const llvm::MachineBasicBlock **)(*(_QWORD *)(v90 + 264) + 640), v119 + 24, (uint64_t)v117);
        if ((_QWORD *)v175 != v117)
        {
          while (1)
          {
            if (*v117)
              v178 = *v117 - 24;
            else
              v178 = 0;
            if ((sub_1C5D70608(v178, *(_QWORD *)(v90 + 264)) & 1) == 0)
            {
              v179 = sub_1C477672C(v128, v178);
              v180 = *(_QWORD *)(v90 + 368);
              v181 = 376;
              if (v180 == *(_QWORD *)(v90 + 360))
                v181 = 380;
              if (v179 == (_QWORD *)(v180 + 8 * *(unsigned int *)(v90 + v181)))
              {
                sub_1C632A368((uint64_t)v469);
                if (sub_1C5CC5E40((uint64_t)v469, v178))
                {
                  v182 = v178;
                  while (v182 != v119)
                  {
                    v183 = *(_QWORD *)(v182 + 24);
                    if (v183)
                      v182 = v183 - 24;
                    else
                      v182 = 0;
                    if ((sub_1C5D70608(v182, *(_QWORD *)(v90 + 264)) & 1) == 0)
                      goto LABEL_297;
                  }
                  v182 = v119;
LABEL_297:
                  if (v182 != v178 && *(_BYTE *)(v182 + 16) == 60)
                  {
                    v184 = *(_QWORD *)(v182 + 8);
                    if (v184)
                    {
                      if (!*(_QWORD *)(v184 + 8) && sub_1C5CC6784(v469, v182, v178))
                        v117 = *(_QWORD **)(v182 + 32);
                    }
                  }
                }
                else
                {
                  *(_BYTE *)(v90 + 352) = 1;
                  if (*(_BYTE *)(v178 + 16) != 84 || sub_1C50A011C(v178) || sub_1C4E9AE24(v178) || sub_1C5458950(v178))
                  {
                    v385 = *(_QWORD *)(v178 + 48);
                    if (v385)
                    {
                      v386 = *(_QWORD *)(v385 - 8 * *(unsigned int *)(v385 + 8));
                      if (*(_BYTE *)v386 != 15)
                        v386 = *(_QWORD *)(v386 - 8 * *(unsigned int *)(v386 + 8));
                      v387 = *(_DWORD *)(v385 + 4);
                      LODWORD(v385) = *(unsigned __int16 *)(v385 + 2);
                    }
                    else
                    {
                      v386 = 0;
                      v387 = 0;
                    }
                    v395 = (llvm::MachineBasicBlock *)v479[7];
                    DWORD2(v499) = 10;
                    BYTE12(v499) = 2;
                    v500 = v395;
                    v501 = v386;
                    v502 = v387;
                    v503 = v385;
                    v504 = "sdagisel";
                    v505 = "FastISelFailure";
                    v506 = 15;
                    v507 = 0;
                    v508 = 0;
                    v509 = v511;
                    v510 = 0x400000000;
                    v512 = 0;
                    v513 = -1;
                    v514 = v479;
                    *(_QWORD *)&v499 = &off_1E814E538;
                    if (*(unsigned __int8 *)(v178 + 16) - 29 > 0xA)
                    {
                      v396 = dword_1ED825340 != 0;
                      v490 = "FastISel missed";
                      v491 = 15;
                      sub_1C53B17B4((uint64_t)&v509, (const void **)&v490);
                    }
                    else
                    {
                      v490 = "FastISel missed terminator";
                      v491 = 26;
                      sub_1C53B17B4((uint64_t)&v509, (const void **)&v490);
                      v396 = dword_1ED825340 > 2;
                    }
                    if ((llvm::OptimizationRemarkMissed::isEnabled((llvm::LLVMContext ****)&v499) & 1) != 0
                      || dword_1ED825340)
                    {
                      v476 = 0;
                      v477 = 0;
                      v478 = 0;
                      LODWORD(v491) = 0;
                      v495 = 0;
                      v496 = 0;
                      v490 = &unk_1E81A7208;
                      v498 = &v476;
                      v497 = 0;
                      v493 = 0;
                      v494 = 0;
                      v492 = 0;
                      llvm::Value::print((llvm::Value *)v178, (llvm::raw_ostream *)&v490, 0);
                      v488 = ": ";
                      v489 = 2;
                      sub_1C53B17B4((uint64_t)&v509, (const void **)&v488);
                      v397 = (char *)v498;
                      v398 = *((_BYTE *)v498 + 23);
                      v399 = v398 < 0;
                      if (v398 < 0)
                        v397 = (char *)*v498;
                      v400 = v398 & 0x7F;
                      if (v399)
                        v400 = (uint64_t)v498[1];
                      v488 = v397;
                      v489 = v400;
                      sub_1C53B17B4((uint64_t)&v509, (const void **)&v488);
                      v490 = off_1E81A6E70;
                      if (v497 == 1 && v492)
                        MEMORY[0x1CAA32F9C](v492, 0x1000C8077774924);
                      if (SHIBYTE(v478) < 0)
                        operator delete(v476);
                    }
                    sub_1C5D70480(**(uint64_t *****)(v90 + 280), *(llvm::OptimizationRemarkEmitter **)(v90 + 432), (llvm::DiagnosticInfoOptimizationBase *)&v499, v396);
                    *(_QWORD *)&v499 = &off_1E814E790;
                    v401 = (char *)v509;
                    if ((_DWORD)v510)
                    {
                      v402 = (unint64_t)v510 << 6;
                      do
                      {
                        v403 = (void **)&v401[v402];
                        if (v401[v402 - 17] < 0)
                          operator delete(*(v403 - 5));
                        if (*((char *)v403 - 41) < 0)
                          operator delete(*(v403 - 8));
                        v402 -= 64;
                      }
                      while (v402);
                      v401 = (char *)v509;
                    }
                    if (v401 != v511)
                      free(v401);
                    break;
                  }
                  v185 = *(_QWORD *)(v178 + 48);
                  if (v185)
                  {
                    v186 = *(_QWORD *)(v185 - 8 * *(unsigned int *)(v185 + 8));
                    if (*(_BYTE *)v186 != 15)
                      v186 = *(_QWORD *)(v186 - 8 * *(unsigned int *)(v186 + 8));
                    v187 = *(_DWORD *)(v185 + 4);
                    LODWORD(v185) = *(unsigned __int16 *)(v185 + 2);
                  }
                  else
                  {
                    v186 = 0;
                    v187 = 0;
                  }
                  v188 = (llvm::MachineBasicBlock *)v479[7];
                  DWORD2(v499) = 10;
                  BYTE12(v499) = 2;
                  v500 = v188;
                  v501 = v186;
                  v502 = v187;
                  v503 = v185;
                  v504 = "sdagisel";
                  v505 = "FastISelFailure";
                  v506 = 15;
                  v507 = 0;
                  v508 = 0;
                  v509 = v511;
                  v510 = 0x400000000;
                  v512 = 0;
                  v513 = -1;
                  v514 = v479;
                  *(_QWORD *)&v499 = &off_1E814E538;
                  v490 = "FastISel missed call";
                  v491 = 20;
                  sub_1C53B17B4((uint64_t)&v509, (const void **)&v490);
                  if ((llvm::OptimizationRemarkMissed::isEnabled((llvm::LLVMContext ****)&v499) & 1) != 0
                    || (v189 = 0, dword_1ED825340))
                  {
                    v476 = 0;
                    v477 = 0;
                    v478 = 0;
                    LODWORD(v491) = 0;
                    v495 = 0;
                    v496 = 0;
                    v490 = &unk_1E81A7208;
                    v498 = &v476;
                    v497 = 0;
                    v493 = 0;
                    v494 = 0;
                    v492 = 0;
                    llvm::Value::print((llvm::Value *)v178, (llvm::raw_ostream *)&v490, 0);
                    v488 = ": ";
                    v489 = 2;
                    sub_1C53B17B4((uint64_t)&v509, (const void **)&v488);
                    v190 = (char *)v498;
                    v191 = *((_BYTE *)v498 + 23);
                    v192 = v191 < 0;
                    if (v191 < 0)
                      v190 = (char *)*v498;
                    v193 = v191 & 0x7F;
                    if (v192)
                      v193 = (uint64_t)v498[1];
                    v488 = v190;
                    v489 = v193;
                    sub_1C53B17B4((uint64_t)&v509, (const void **)&v488);
                    v490 = off_1E81A6E70;
                    if (v497 == 1 && v492)
                      MEMORY[0x1CAA32F9C](v492, 0x1000C8077774924);
                    if (SHIBYTE(v478) < 0)
                      operator delete(v476);
                    v189 = dword_1ED825340;
                  }
                  sub_1C5D70480(**(uint64_t *****)(v90 + 280), *(llvm::OptimizationRemarkEmitter **)(v90 + 432), (llvm::DiagnosticInfoOptimizationBase *)&v499, v189 > 2);
                  v194 = *(unsigned __int8 *)(*(_QWORD *)v178 + 8);
                  if (v194 != 7 && v194 != 12)
                  {
                    if (*(_QWORD *)(v178 + 8))
                    {
                      v195 = (uint64_t *)(*(_QWORD *)(v90 + 264) + 80);
                      v490 = (void *)v178;
                      v196 = sub_1C6128C08(v195, &v490);
                      if (!*((_DWORD *)v196 + 2))
                        *((_DWORD *)v196 + 2) = sub_1C632BA34(*(_QWORD *)(v90 + 264), (const llvm::Value *)v178);
                    }
                  }
                  LOBYTE(v490) = 0;
                  v197 = *(llvm::MachineInstr **)(*(_QWORD *)(v90 + 264) + 648);
                  sub_1C6372354((_QWORD *)v90, v178 + 24, (uint64_t)v117, &v490);
                  v198 = v490;
                  if ((_BYTE)v490)
                  {
                    sub_1C632A774(v469, v197, (llvm::MachineInstr *)(*(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48));
                    v117 = (_QWORD *)*v117;
                  }
                  *(_QWORD *)&v499 = &off_1E814E790;
                  v199 = (char *)v509;
                  if ((_DWORD)v510)
                  {
                    v200 = (unint64_t)v510 << 6;
                    do
                    {
                      v201 = (void **)&v199[v200];
                      if (v199[v200 - 17] < 0)
                        operator delete(*(v201 - 5));
                      if (*((char *)v201 - 41) < 0)
                        operator delete(*(v201 - 8));
                      v200 -= 64;
                    }
                    while (v200);
                    v199 = (char *)v509;
                    v128 = v475 + 360;
                  }
                  if (v199 != v511)
                    free(v199);
                  if (v198)
                    break;
                }
              }
            }
            v117 = (_QWORD *)*v117;
            if (v117 == (_QWORD *)v175)
            {
              v117 = (_QWORD *)(v119 + 24);
              break;
            }
          }
        }
        v95 = v469;
        sub_1C632A368((uint64_t)v469);
        v125 = v479;
      }
      if (*((_BYTE *)v467 + 312) && !*((_BYTE *)v467 + 313))
      {
        v448 = v125[5];
        if (v448)
          v449 = v448 - 24;
        else
          v449 = 0;
        if (*(unsigned __int8 *)(v449 + 16) - 29 >= 0xB)
          v449 = 0;
        if (*(_BYTE *)(v449 + 16) == 29)
        {
          v450 = (*(uint64_t (**)(_QWORD, llvm::Type *))(**(_QWORD **)(v90 + 344) + 792))(*(_QWORD *)(v90 + 344), v457[5]) != 0;
          v451 = (llvm::MachineBasicBlock *)(*(_QWORD *)(v90 + 304) + 864);
          v452 = (const llvm::BasicBlock *)v479;
          v453 = sub_1C61294C8((_DWORD *)(*(_QWORD *)(v90 + 264) + 56), &v479);
          sub_1C62701FC(v451, v452, (llvm::MachineBasicBlock *)v453[1], v450);
        }
      }
      if ((_QWORD *)v175 != v117)
      {
        LOBYTE(v499) = 0;
        sub_1C6372354((_QWORD *)v90, v175, (uint64_t)v117, &v499);
        if (v95)
        {
          if ((_BYTE)v499)
          {
            v219 = *(_QWORD *)(v90 + 264);
            v121 = (llvm::MachineInstr *)(*(_QWORD *)(v219 + 640) + 48);
            v220 = *(llvm::MachineInstr **)(v219 + 648);
            if (v220 != v121)
              sub_1C632A774(v95, v220, v121);
          }
        }
      }
      if (v95)
        sub_1C5CC1364((uint64_t)v95);
      v202 = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 752) - *(_QWORD *)(*(_QWORD *)(v90 + 264) + 744);
      if ((v202 & 0xFFFFFFFF0) != 0)
      {
        v203 = 0;
        v204 = (v202 >> 4);
        do
        {
          v205 = *(_QWORD *)(v90 + 264);
          v206 = *(_QWORD *)(v205 + 744);
          v207 = *(llvm::MachineInstr **)(v206 + 16 * v203);
          v208 = *(_QWORD *)(v205 + 640);
          v209 = *(_QWORD **)(v208 + 88);
          v210 = *(_QWORD **)(v208 + 96);
          if (v209 != v210)
          {
            while (*v209 != *((_QWORD *)v207 + 3))
            {
              if (++v209 == v210)
              {
                v209 = v210;
                break;
              }
            }
          }
          if (v209 != v210)
          {
            v211 = *(llvm::MachineFunction **)(v90 + 280);
            v212 = *(_DWORD *)(v206 + 16 * v203 + 8);
            *((_QWORD *)&v499 + 1) = 0;
            DWORD1(v499) = v212;
            LODWORD(v499) = 0;
            v500 = 0;
            v501 = 0;
            llvm::MachineInstr::addOperand(v207, v211, (const llvm::MachineOperand *)&v499);
            v213 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v90 + 264) + 640);
            *((_QWORD *)&v499 + 1) = 0;
            v500 = v213;
            LODWORD(v499) = 4;
            llvm::MachineInstr::addOperand(v207, v211, (const llvm::MachineOperand *)&v499);
          }
          ++v203;
        }
        while (v203 != v204);
      }
      v214 = *(_QWORD *)(v90 + 304);
      v215 = *(unint64_t **)(v214 + 864);
      if (v215)
      {
        v216 = *(unint64_t **)(v214 + 872);
        v217 = *(_QWORD *)(v214 + 880);
        if (v216)
        {
          if (!v217)
            goto LABEL_377;
          SplitPointForStackProtector = (unint64_t *)llvm::findSplitPointForStackProtector(*(llvm **)(v214 + 864), *(llvm::MachineBasicBlock **)(v90 + 336), v121);
          v223 = v215 + 6;
          if (v216 != v215 && v223 != SplitPointForStackProtector)
          {
            v225 = v216[5];
            v226 = SplitPointForStackProtector;
            do
            {
              v226[3] = v225;
              v226 = (unint64_t *)v226[1];
            }
            while (v226 != v223);
            sub_1C4785D30(v216 + 6, SplitPointForStackProtector, v215 + 6);
          }
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = v215;
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = v223;
          sub_1C6360EE4(*(_QWORD *)(v90 + 304), *(_QWORD *)(v90 + 304) + 864, (uint64_t)v215, v222);
          v227 = *(_QWORD *)(v90 + 296);
          *(_QWORD *)(v227 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
          *(_DWORD *)(v227 + 200) = v228;
          sub_1C635C2BC(*(_QWORD *)(v90 + 304));
          sub_1C5D6F9FC(v90, v229, v230, v231, v232, v233, v234, v235);
          v236 = *(_QWORD *)(v90 + 304);
          v237 = *(_QWORD *)(v236 + 880);
          v239 = *(_QWORD *)(v237 + 48);
          v238 = v237 + 48;
          if (v238 == (v239 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = *(_QWORD *)(v236 + 880);
            *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = v238;
            sub_1C6361558(*(uint64_t **)(v90 + 304));
            goto LABEL_375;
          }
        }
        else
        {
          if (v217)
            goto LABEL_377;
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = v215;
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = llvm::findSplitPointForStackProtector((llvm *)v215, *(llvm::MachineBasicBlock **)(v90 + 336), v121);
          sub_1C6360EE4(*(_QWORD *)(v90 + 304), *(_QWORD *)(v90 + 304) + 864, (uint64_t)v215, v218);
LABEL_375:
          v240 = *(_QWORD *)(v90 + 296);
          *(_QWORD *)(v240 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
          *(_DWORD *)(v240 + 200) = v241;
          sub_1C635C2BC(*(_QWORD *)(v90 + 304));
          sub_1C5D6F9FC(v90, v242, v243, v244, v245, v246, v247, v248);
          v236 = *(_QWORD *)(v90 + 304);
        }
        *(_OWORD *)(v236 + 864) = 0u;
        v214 = *(_QWORD *)(v90 + 304);
      }
LABEL_377:
      v249 = *(_QWORD *)(v214 + 856);
      v251 = *(_QWORD *)(v249 + 64);
      v250 = (uint64_t *)(v249 + 64);
      v252 = *(v250 - 1);
      v472 = v251;
      if (v252 != v251)
      {
        do
        {
          if (!*(_BYTE *)(v252 + 45))
          {
            *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = *(_QWORD *)(v252 + 48);
            *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48;
            sub_1C636172C(*(_QWORD *)(v90 + 304), v252, *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640));
            v290 = *(_QWORD *)(v90 + 296);
            *(_QWORD *)(v290 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
            *(_DWORD *)(v290 + 200) = v291;
            sub_1C635C2BC(*(_QWORD *)(v90 + 304));
            sub_1C5D6F9FC(v90, v292, v293, v294, v295, v296, v297, v298);
          }
          v253 = *(unsigned int *)(v252 + 72);
          if ((_DWORD)v253)
          {
            v254 = 0;
            v255 = *(_DWORD *)(v252 + 176);
            v256 = 32 * v253;
            v257 = 32 * v253 - 32;
            v258 = v253 - 2;
            while (1)
            {
              v259 = *(_QWORD *)(v252 + 64) + v254;
              v260 = *(_DWORD *)(v259 + 24);
              v100 = v255 >= v260;
              v261 = v255 - v260;
              v255 = v100 ? v261 : 0;
              *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = *(_QWORD *)(v259 + 8);
              *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48;
              if (v258 || !(*(unsigned __int8 *)(v252 + 46) | *(unsigned __int8 *)(v252 + 184)))
              {
                v262 = *(_QWORD *)(v252 + 64);
                v263 = (llvm::MachineBasicBlock **)(v262 + v254 + 40);
                if (v257 == v254)
                  v263 = (llvm::MachineBasicBlock **)(v252 + 56);
              }
              else
              {
                v262 = *(_QWORD *)(v252 + 64);
                v263 = (llvm::MachineBasicBlock **)(v262 + v254 + 48);
              }
              sub_1C5D2179C(*(_QWORD *)(v90 + 304), v252, *v263, v255, *(_DWORD *)(v252 + 40), v262 + v254, *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640));
              v264 = *(_QWORD *)(v90 + 296);
              *(_QWORD *)(v264 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
              *(_DWORD *)(v264 + 200) = v265;
              sub_1C635C2BC(*(_QWORD *)(v90 + 304));
              sub_1C5D6F9FC(v90, v266, v267, v268, v269, v270, v271, v272);
              if (!v258)
              {
                if (*(unsigned __int8 *)(v252 + 46) | *(unsigned __int8 *)(v252 + 184))
                  break;
              }
              v254 += 32;
              --v258;
              if (v256 == v254)
                goto LABEL_393;
            }
            --*(_DWORD *)(v252 + 72);
          }
LABEL_393:
          v273 = *(_QWORD *)(v90 + 264);
          v274 = *(_DWORD **)(v273 + 744);
          for (n = *(_DWORD **)(v273 + 752); v274 != n; v90 = v475)
          {
            v276 = *(llvm::MachineFunction **)(v90 + 280);
            v277 = *(llvm::MachineInstr **)v274;
            v278 = *(_QWORD *)(*(_QWORD *)v274 + 24);
            if (v278 == *(_QWORD *)(v252 + 56))
            {
              v279 = v274[2];
              *((_QWORD *)&v499 + 1) = 0;
              DWORD1(v499) = v279;
              LODWORD(v499) = 0;
              v500 = 0;
              v501 = 0;
              llvm::MachineInstr::addOperand(v277, v276, (const llvm::MachineOperand *)&v499);
              v280 = *(llvm::MachineBasicBlock **)(v252 + 48);
              *((_QWORD *)&v499 + 1) = 0;
              v500 = v280;
              LODWORD(v499) = 4;
              llvm::MachineInstr::addOperand(v277, v276, (const llvm::MachineOperand *)&v499);
              if (!*(_BYTE *)(v252 + 46))
              {
                v281 = v274[2];
                *((_QWORD *)&v499 + 1) = 0;
                DWORD1(v499) = v281;
                LODWORD(v499) = 0;
                v500 = 0;
                v501 = 0;
                llvm::MachineInstr::addOperand(v277, v276, (const llvm::MachineOperand *)&v499);
                v282 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v252 + 64) + 32 * *(unsigned int *)(v252 + 72) - 24);
                *((_QWORD *)&v499 + 1) = 0;
                v500 = v282;
                LODWORD(v499) = 4;
                llvm::MachineInstr::addOperand(v277, v276, (const llvm::MachineOperand *)&v499);
              }
            }
            v283 = *(unsigned int *)(v252 + 72);
            if ((_DWORD)v283)
            {
              v284 = *(_QWORD *)(v252 + 64);
              v285 = v284 + 32 * v283;
              do
              {
                v286 = *(llvm::MachineBasicBlock **)(v284 + 8);
                v287 = (_QWORD *)*((_QWORD *)v286 + 11);
                v288 = (_QWORD *)*((_QWORD *)v286 + 12);
                if (v287 != v288)
                {
                  while (*v287 != v278)
                  {
                    if (++v287 == v288)
                    {
                      v287 = (_QWORD *)*((_QWORD *)v286 + 12);
                      break;
                    }
                  }
                }
                if (v287 != v288)
                {
                  v289 = v274[2];
                  *((_QWORD *)&v499 + 1) = 0;
                  DWORD1(v499) = v289;
                  LODWORD(v499) = 0;
                  v500 = 0;
                  v501 = 0;
                  llvm::MachineInstr::addOperand(v277, v276, (const llvm::MachineOperand *)&v499);
                  *((_QWORD *)&v499 + 1) = 0;
                  v500 = v286;
                  LODWORD(v499) = 4;
                  llvm::MachineInstr::addOperand(v277, v276, (const llvm::MachineOperand *)&v499);
                }
                v284 += 32;
              }
              while (v284 != v285);
            }
            v274 += 4;
          }
          v252 += 192;
        }
        while (v252 != v472);
        v299 = *(_QWORD *)(*(_QWORD *)(v90 + 304) + 856);
        v300 = *(_QWORD *)(v299 + 64);
        v250 = (uint64_t *)(v299 + 64);
        v252 = v300;
        v301 = *(v250 - 1);
        if (v300 != v301)
        {
          do
          {
            v252 -= 192;
            sub_1C62158C4(v252);
          }
          while (v252 != v301);
          v252 = v301;
        }
      }
      *v250 = v252;
      v302 = *(_QWORD *)(*(_QWORD *)(v90 + 304) + 856);
      v304 = *(_QWORD *)(v302 + 32);
      v303 = *(_QWORD *)(v302 + 40);
      v305 = -858993459 * ((unint64_t)(v303 - v304) >> 4);
      if ((_DWORD)v305)
      {
        for (ii = 0; ii != v305; ++ii)
        {
          v307 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 304) + 856) + 32);
          v308 = v307 + 80 * ii;
          v309 = *(_QWORD *)(v90 + 264);
          if (!*(_BYTE *)(v308 + 48))
          {
            *(_QWORD *)(v309 + 640) = *(_QWORD *)(v308 + 40);
            *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48;
            v310 = *(_QWORD *)(v90 + 304);
            v311 = *(_QWORD *)(*(_QWORD *)(v310 + 856) + 32) + 80 * ii;
            sub_1C63609DC(v310, v311 + 56, v311, *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640));
            v312 = *(_QWORD *)(v90 + 296);
            *(_QWORD *)(v312 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
            *(_DWORD *)(v312 + 200) = v313;
            sub_1C635C2BC(*(_QWORD *)(v90 + 304));
            sub_1C5D6F9FC(v90, v314, v315, v316, v317, v318, v319, v320);
            v307 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 304) + 856) + 32);
            v309 = *(_QWORD *)(v90 + 264);
          }
          *(_QWORD *)(v309 + 640) = *(_QWORD *)(v307 + 80 * ii + 64);
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48;
          sub_1C6360848(*(_QWORD *)(v90 + 304), (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 304) + 856) + 32) + 80 * ii + 56));
          v321 = *(_QWORD *)(v90 + 296);
          *(_QWORD *)(v321 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
          *(_DWORD *)(v321 + 200) = v322;
          sub_1C635C2BC(*(_QWORD *)(v90 + 304));
          sub_1C5D6F9FC(v90, v323, v324, v325, v326, v327, v328, v329);
          v330 = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 752) - *(_QWORD *)(*(_QWORD *)(v90 + 264) + 744);
          if ((v330 & 0xFFFFFFFF0) != 0)
          {
            v331 = 0;
            v332 = (v330 >> 4);
            do
            {
              v333 = *(llvm::MachineFunction **)(v90 + 280);
              v334 = *(_QWORD *)(v90 + 264);
              v335 = *(_QWORD *)(v334 + 744);
              v336 = *(llvm::MachineInstr **)(v335 + 16 * v331);
              v337 = *((_QWORD *)v336 + 3);
              if (v337 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 304) + 856) + 32) + 80 * ii + 72))
              {
                v338 = *(_DWORD *)(v335 + 16 * v331 + 8);
                *((_QWORD *)&v499 + 1) = 0;
                DWORD1(v499) = v338;
                LODWORD(v499) = 0;
                v500 = 0;
                v501 = 0;
                llvm::MachineInstr::addOperand(v336, v333, (const llvm::MachineOperand *)&v499);
                v339 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 304) + 856) + 32)
                                                   + 80 * ii
                                                   + 40);
                *((_QWORD *)&v499 + 1) = 0;
                v500 = v339;
                LODWORD(v499) = 4;
                llvm::MachineInstr::addOperand(v336, v333, (const llvm::MachineOperand *)&v499);
                v334 = *(_QWORD *)(v90 + 264);
              }
              v340 = *(_QWORD *)(v334 + 640);
              v341 = *(_QWORD **)(v340 + 88);
              v342 = *(_QWORD **)(v340 + 96);
              if (v341 != v342)
              {
                while (*v341 != v337)
                {
                  if (++v341 == v342)
                  {
                    v341 = v342;
                    break;
                  }
                }
              }
              if (v341 != v342)
              {
                v343 = *(_DWORD *)(*(_QWORD *)(v334 + 744) + 16 * v331 + 8);
                *((_QWORD *)&v499 + 1) = 0;
                DWORD1(v499) = v343;
                LODWORD(v499) = 0;
                v500 = 0;
                v501 = 0;
                llvm::MachineInstr::addOperand(v336, v333, (const llvm::MachineOperand *)&v499);
                v344 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v90 + 264) + 640);
                *((_QWORD *)&v499 + 1) = 0;
                v500 = v344;
                LODWORD(v499) = 4;
                llvm::MachineInstr::addOperand(v336, v333, (const llvm::MachineOperand *)&v499);
              }
              ++v331;
            }
            while (v331 != v332);
          }
        }
        v302 = *(_QWORD *)(*(_QWORD *)(v90 + 304) + 856);
        v304 = *(_QWORD *)(v302 + 32);
        v303 = *(_QWORD *)(v302 + 40);
      }
      for (; v303 != v304; v303 = sub_1C61996A0(v303 - 80))
        ;
      *(_QWORD *)(v302 + 40) = v304;
      v345 = *(_QWORD *)(*(_QWORD *)(v90 + 304) + 856);
      v347 = *(unsigned __int8 ***)(v345 + 8);
      v346 = *(unsigned __int8 ***)(v345 + 16);
      v473 = -1171354717 * ((unint64_t)((char *)v346 - (char *)v347) >> 3);
      if ((_DWORD)v473)
      {
        for (jj = 0; jj != v473; ++jj)
        {
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 304)
                                                                                          + 856)
                                                                              + 8)
                                                                  + 88 * jj
                                                                  + 48);
          *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48;
          v490 = &v492;
          v349 = *(_QWORD *)(v90 + 304);
          v350 = *(_QWORD *)(v349 + 856);
          v492 = *(_QWORD *)(*(_QWORD *)(v350 + 8) + 88 * jj + 32);
          v491 = 0x200000001;
          v351 = *(_QWORD *)(v350 + 8);
          v352 = v351 + 88 * jj;
          v354 = *(_QWORD *)(v352 + 32);
          v353 = *(_QWORD *)(v352 + 40);
          if (v354 != v353)
          {
            v493 = v353;
            LODWORD(v491) = 2;
            v351 = *(_QWORD *)(v350 + 8);
          }
          sub_1C63600E8(v349, v351 + 88 * jj, *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640));
          v355 = *(_QWORD *)(v90 + 296);
          *(_QWORD *)(v355 + 192) = sub_1C635C370(*(_QWORD *)(v90 + 304));
          *(_DWORD *)(v355 + 200) = v356;
          sub_1C635C2BC(*(_QWORD *)(v90 + 304));
          sub_1C5D6F9FC(v90, v357, v358, v359, v360, v361, v362, v363);
          v364 = v491;
          if ((_DWORD)v491)
          {
            v365 = 0;
            v366 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v90 + 264) + 640);
            do
            {
              *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) = *((_QWORD *)v490 + v365);
              *(_QWORD *)(*(_QWORD *)(v90 + 264) + 648) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640) + 48;
              v367 = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 640);
              v368 = (_QWORD *)*((_QWORD *)v366 + 11);
              v369 = (_QWORD *)*((_QWORD *)v366 + 12);
              if (v368 != v369)
              {
                while (*v368 != v367)
                {
                  if (++v368 == v369)
                  {
                    v368 = (_QWORD *)*((_QWORD *)v366 + 12);
                    break;
                  }
                }
              }
              if (v368 != v369)
              {
                v370 = v367 + 48;
                for (kk = *(_QWORD *)(v367 + 56); kk != v370; kk = *(_QWORD *)(kk + 8))
                {
                  v372 = **(unsigned __int16 **)(kk + 16);
                  if (v372 != 69 && v372 != 0)
                    break;
                  v374 = 0;
                  v375 = *(llvm::MachineFunction **)(v90 + 280);
                  v376 = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 744);
                  do
                  {
                    v377 = v374;
                    v378 = *(_QWORD *)(v376 + 16 * v374++);
                  }
                  while (v378 != kk);
                  v379 = *(_DWORD *)(v376 + 16 * v377 + 8);
                  *((_QWORD *)&v499 + 1) = 0;
                  DWORD1(v499) = v379;
                  LODWORD(v499) = 0;
                  v500 = 0;
                  v501 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)kk, v375, (const llvm::MachineOperand *)&v499);
                  *((_QWORD *)&v499 + 1) = 0;
                  v500 = v366;
                  LODWORD(v499) = 4;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)kk, v375, (const llvm::MachineOperand *)&v499);
                  if (!kk || (*(_BYTE *)kk & 4) == 0)
                  {
                    while ((*(_WORD *)(kk + 44) & 8) != 0)
                      kk = *(_QWORD *)(kk + 8);
                  }
                }
              }
              ++v365;
            }
            while (v365 != v364);
          }
          if (v490 != &v492)
            free(v490);
        }
        v345 = *(_QWORD *)(*(_QWORD *)(v90 + 304) + 856);
        v347 = *(unsigned __int8 ***)(v345 + 8);
        v346 = *(unsigned __int8 ***)(v345 + 16);
        v94 = v466;
      }
      else
      {
        v94 = v466;
      }
      if (v346 != v347)
      {
        v381 = v346 - 2;
        do
        {
          if (*v381)
            llvm::MetadataTracking::untrack((uint64_t)v381, *v381);
          v382 = *(v381 - 2);
          if (v382)
            llvm::MetadataTracking::untrack((uint64_t)(v381 - 2), v382);
          v383 = v381 - 9;
          v381 -= 11;
        }
        while (v383 != v347);
      }
      *(_QWORD *)(v345 + 16) = v347;
      *(_QWORD *)(*(_QWORD *)(v90 + 264) + 752) = *(_QWORD *)(*(_QWORD *)(v90 + 264) + 744);
      v380 = *(void **)(v90 + 368);
      v95 = v469;
      if (v380 != *(void **)(v90 + 360))
      {
        v384 = *(unsigned int *)(v90 + 376);
        if (v384 >= 0x21 && 4 * (*(_DWORD *)(v90 + 380) - *(_DWORD *)(v90 + 384)) < v384)
        {
          free(v380);
          v404 = *(_DWORD *)(v90 + 380) - *(_DWORD *)(v90 + 384);
          v405 = 1 << (33 - __clz(v404 - 1));
          if (v404 <= 0x10)
            v406 = 32;
          else
            v406 = v405;
          *(_DWORD *)(v90 + 376) = v406;
          *v465 = 0;
          v407 = malloc_type_malloc(8 * v406, 0x4065EBACuLL);
          if (!v407)
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          *(_QWORD *)(v90 + 368) = v407;
          memset(v407, 255, 8 * *(unsigned int *)(v90 + 376));
          goto LABEL_467;
        }
        memset(v380, 255, 8 * v384);
      }
      *v465 = 0;
LABEL_467:
      v93 = v468;
      if (v468 == v94)
        goto LABEL_134;
    }
    v97 = v96[1];
    if (v97)
    {
      while (1)
      {
        v98 = *(_QWORD *)(v97 + 24);
        v99 = *(unsigned __int8 *)(v98 + 16);
        v100 = v98 && v99 >= 0x1C;
        v101 = !v100 || v99 - 29 > 0xA;
        if (!v101)
          break;
        v97 = *(_QWORD *)(v97 + 8);
        if (!v97)
          goto LABEL_174;
      }
      v102 = *(_QWORD *)(v98 + 40);
LABEL_152:
      v103 = *(_QWORD *)(v90 + 264);
      v104 = sub_1C477672C(v103 + 680, v102);
      v105 = *(_QWORD *)(v103 + 688);
      if (v105 == *(_QWORD *)(v103 + 680))
        v106 = 700;
      else
        v106 = 696;
      if (v104 == (_QWORD *)(v105 + 8 * *(unsigned int *)(v103 + v106)))
      {
        if ((_QWORD *)v479[5] != v479 + 5)
        {
          for (mm = v479[6]; ; mm = *(_QWORD *)(v112 + 32))
          {
            v112 = mm - 24;
            v113 = mm ? mm - 24 : 0;
            if (!mm || *(_BYTE *)(v113 + 16) != 83)
              break;
            sub_1C6372700(*(_QWORD *)(v90 + 264), mm - 24);
          }
        }
        goto LABEL_182;
      }
      while (1)
      {
        v97 = *(_QWORD *)(v97 + 8);
        if (!v97)
          break;
        v107 = *(_QWORD *)(v97 + 24);
        v108 = *(unsigned __int8 *)(v107 + 16);
        if (v107)
          v109 = v108 >= 0x1C;
        else
          v109 = 0;
        if (v109 && v108 - 29 <= 0xA)
        {
          v102 = *(_QWORD *)(v107 + 40);
          goto LABEL_152;
        }
      }
      v96 = v479;
    }
LABEL_174:
    if ((_QWORD *)v96[5] != v96 + 5)
    {
      for (nn = v96[6]; ; nn = *(_QWORD *)(v115 + 32))
      {
        v115 = nn - 24;
        v116 = nn ? nn - 24 : 0;
        if (!nn || *(_BYTE *)(v116 + 16) != 83)
          break;
        sub_1C5CC8534(*(_QWORD *)(v90 + 264), (llvm::EVT ***)(nn - 24));
      }
    }
LABEL_182:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)(v90 + 264) + 680), (uint64_t)v479);
    v96 = v479;
    goto LABEL_183;
  }
LABEL_134:
  llvm::StackProtector::copyToMachineFrameInfo((uint64_t)v467, *(llvm::MachineFrameInfo **)(*(_QWORD *)(v90 + 280) + 56));
  llvm::SwiftErrorValueTracking::propagateVRegs(*(llvm::SwiftErrorValueTracking **)(v90 + 272));
  if (v95)
    (*(void (**)(uint64_t *))(*v95 + 8))(v95);
  sub_1C635C30C(*(_QWORD *)(v90 + 304));
  *(_QWORD *)(*(_QWORD *)(v90 + 304) + 880) = 0;
  if (v485)
  {
    v486 = v485;
    operator delete(v485);
  }
}

uint64_t sub_1C5D6F9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Timer *v39;
  uint64_t (**v40)();
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  llvm::ScheduleDAG *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Timer *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  llvm::Timer *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t (**v66)();
  uint64_t (**v67)();
  uint64_t v68;
  llvm::Timer **v69;
  _BYTE v70[128];
  llvm::Timer *v71;
  uint64_t v72;
  uint64_t v73[9];
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 296) + 651) = 0;
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "combine1", 8uLL, "DAG Combining 1", 0xFuLL, "sdag", 4uLL, a8, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  sub_1C5C5B3D4(*(_QWORD *)(a1 + 296), 0, *(_QWORD *)(a1 + 312), *(_DWORD *)(a1 + 328));
  if (v71)
    llvm::Timer::stopTimer(v71);
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "legalize_types", 0xEuLL, "Type Legalization", 0x11uLL, "sdag", 4uLL, v9, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  v11 = sub_1C6348498(*(_QWORD *)(a1 + 296));
  if (v71)
    llvm::Timer::stopTimer(v71);
  *(_BYTE *)(*(_QWORD *)(a1 + 296) + 651) = 1;
  if (v11)
  {
    llvm::NamedRegionTimer::NamedRegionTimer(&v71, "combine_lt", 0xAuLL, "DAG Combining after legalize types", 0x22uLL, "sdag", 4uLL, v10, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
    sub_1C5C5B3D4(*(_QWORD *)(a1 + 296), 1, *(_QWORD *)(a1 + 312), *(_DWORD *)(a1 + 328));
    if (v71)
      llvm::Timer::stopTimer(v71);
  }
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "legalize_vec", 0xCuLL, "Vector Legalization", 0x13uLL, "sdag", 4uLL, v10, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  v13 = sub_1C5CF1028(*(_QWORD **)(a1 + 296));
  if (v71)
    llvm::Timer::stopTimer(v71);
  if (v13)
  {
    llvm::NamedRegionTimer::NamedRegionTimer(&v71, "legalize_types2", 0xFuLL, "Type Legalization 2", 0x13uLL, "sdag", 4uLL, v12, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
    sub_1C6348498(*(_QWORD *)(a1 + 296));
    if (v71)
      llvm::Timer::stopTimer(v71);
    llvm::NamedRegionTimer::NamedRegionTimer(&v71, "combine_lv", 0xAuLL, "DAG Combining after legalize vectors", 0x24uLL, "sdag", 4uLL, v14, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
    sub_1C5C5B3D4(*(_QWORD *)(a1 + 296), 2, *(_QWORD *)(a1 + 312), *(_DWORD *)(a1 + 328));
    if (v71)
      llvm::Timer::stopTimer(v71);
  }
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "legalize", 8uLL, "DAG Legalization", 0x10uLL, "sdag", 4uLL, v12, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  sub_1C5CCE684(*(_QWORD **)(a1 + 296));
  if (v71)
    llvm::Timer::stopTimer(v71);
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "verify-nobrcond1", 0x10uLL, "Verify No Brcond 1", 0x12uLL, "sdag", 4uLL, v15, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  sub_1C6372548(*(_QWORD **)(a1 + 296), 0);
  if (v71)
    llvm::Timer::stopTimer(v71);
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "combine2", 8uLL, "DAG Combining 2", 0xFuLL, "sdag", 4uLL, v16, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  sub_1C5C5B3D4(*(_QWORD *)(a1 + 296), 3, *(_QWORD *)(a1 + 312), *(_DWORD *)(a1 + 328));
  if (v71)
    llvm::Timer::stopTimer(v71);
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "verify-nobrcond2", 0x10uLL, "Verify No Brcond 2", 0x12uLL, "sdag", 4uLL, v17, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  sub_1C6372548(*(_QWORD **)(a1 + 296), 1);
  if (v71)
    llvm::Timer::stopTimer(v71);
  if (*(_DWORD *)(a1 + 328))
  {
    v66 = (uint64_t (**)())v70;
    v67 = (uint64_t (**)())v70;
    v68 = 16;
    LODWORD(v69) = 0;
    v71 = (llvm::Timer *)v73;
    v73[0] = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 192);
    v72 = 0x8000000001;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v66, v73[0]);
    v63 = 1;
    v62 = 0;
    v65 = 1;
    v64 = 0;
    v19 = v72;
    while (1)
    {
      v20 = *((_QWORD *)v71 + v19 - 1);
      LODWORD(v72) = v19 - 1;
      if (*(_WORD *)(v20 + 56))
      {
        v21 = *(_QWORD *)(v20 + 32);
        v22 = 40 * *(unsigned __int16 *)(v20 + 56);
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 16 * *(unsigned int *)(v21 + 8)) == 1)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v66, *(_QWORD *)v21);
            if (v23)
            {
              v24 = *(_QWORD *)v21;
              v25 = v72;
              if (v72 >= (unint64_t)HIDWORD(v72))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, (uint64_t)v73, v72 + 1, 8);
                v25 = v72;
              }
              *((_QWORD *)v71 + v25) = v24;
              LODWORD(v72) = v72 + 1;
            }
          }
          v21 += 40;
          v22 -= 40;
        }
        while (v22);
      }
      if (*(_WORD *)(v20 + 24) != 49)
        goto LABEL_46;
      v26 = *(_QWORD **)(v20 + 32);
      v27 = *(_DWORD *)(v26[5] + 76);
      if ((v27 & 0x80000000) == 0)
        goto LABEL_46;
      v28 = v26[10];
      v29 = v26[11];
      v30 = (unsigned __int8 *)(*(_QWORD *)(v28 + 40) + 16 * v29);
      v31 = *v30;
      if (*v30)
      {
        v32 = (v31 - 120) >= 0x20 && (v31 - 2) >= 6;
        if (!v32 || (v31 - 15) < 0x3C)
          goto LABEL_48;
      }
      else
      {
        v33 = *((_QWORD *)v30 + 1);
        if ((*(_DWORD *)(v33 + 8) & 0xFE) == 0x12)
          v34 = *(unsigned __int8 *)(**(_QWORD **)(v33 + 16) + 8);
        else
          v34 = *(_DWORD *)(v33 + 8);
        if (v34 == 13)
        {
LABEL_48:
          v35 = sub_1C6368B30(*(_QWORD *)(a1 + 296), v28, v29, 0);
          sub_1C6368768(*(_QWORD *)(a1 + 296), v28, v29, 0, (uint64_t)&v58);
          if (v63 >= 0x41 && v62)
            MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
          v62 = v58;
          v63 = v59;
          v59 = 0;
          if (v65 >= 0x41 && v64)
          {
            MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
            v64 = v60;
            v65 = v61;
            v61 = 0;
            if (v59 >= 0x41 && v58)
              MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
          }
          else
          {
            v64 = v60;
            v65 = v61;
          }
          sub_1C6372438(*(_QWORD *)(a1 + 264), v27, v35, (llvm::APInt *)&v62);
        }
      }
LABEL_46:
      v19 = v72;
      if (!(_DWORD)v72)
      {
        if (v65 >= 0x41 && v64)
          MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
        if (v63 >= 0x41 && v62)
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
        if (v71 != (llvm::Timer *)v73)
          free(v71);
        if (v67 != v66)
          free(v67);
        break;
      }
    }
  }
  llvm::NamedRegionTimer::NamedRegionTimer(&v58, "isel", 4uLL, "Instruction Selection", 0x15uLL, "sdag", 4uLL, v18, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  *(_DWORD *)(a1 + 440) = sub_1C5D620C0(*(_QWORD *)(a1 + 296));
  sub_1C6329230((uint64_t)&v71, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 192), *(_QWORD *)(*(_QWORD *)(a1 + 296) + 200));
  v36 = *(_QWORD *)(a1 + 296);
  v37 = *(_QWORD *)(v36 + 192);
  if (v37)
    v38 = v37 + 8;
  else
    v38 = 0;
  v39 = *(llvm::Timer **)(v38 + 8);
  v40 = *(uint64_t (***)())(v36 + 656);
  *(_QWORD *)(v36 + 656) = &v66;
  v66 = &off_1E8199088;
  v67 = v40;
  v68 = v36;
  v69 = &v62;
  if (v39 == *(llvm::Timer **)(v36 + 216))
  {
    v41 = v36;
  }
  else
  {
    do
    {
      v39 = *(llvm::Timer **)v39;
      v62 = v39;
      v42 = (unsigned __int8 **)((char *)v39 - 8);
      if (v39)
        v43 = (uint64_t)v39 - 8;
      else
        v43 = 0;
      if (*(_QWORD *)(v43 + 48))
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 344) + 184290) && sub_1C6141934(v43))
        {
          v44 = *(unsigned __int16 *)(v43 + 24);
          v45 = (v44 - 126) > 0xD || ((1 << (v44 - 126)) & 0x330F) == 0;
          v46 = v45
              ? *(unsigned __int8 **)(v43 + 40)
              : (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 32) + 40) + 40)
                                  + 16 * *(unsigned int *)(*(_QWORD *)(v43 + 32) + 48));
          v47 = *v46;
          if (!v47
            || v44 <= 0x185
            && *(_BYTE *)(*(_QWORD *)(a1 + 344) + 390 * v47 + v44 + 3862) == 2)
          {
            v42 = sub_1C5D612E0(*(_QWORD **)(a1 + 296), v43);
          }
        }
        (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)a1 + 200))(a1, v42);
        v36 = *(_QWORD *)(a1 + 296);
        v39 = v62;
      }
    }
    while (v39 != *(llvm::Timer **)(v36 + 216));
    v40 = v67;
    v41 = v68;
  }
  v48 = v74;
  *(_QWORD *)(v36 + 192) = v73[8];
  *(_DWORD *)(v36 + 200) = v48;
  *(_QWORD *)(v41 + 656) = v40;
  sub_1C636F550((uint64_t)&v71);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  if (v58)
    llvm::Timer::stopTimer(v58);
  v49 = (llvm::ScheduleDAG *)xmmword_1ED825580(a1, *(unsigned int *)(a1 + 328));
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "sched", 5uLL, "Instruction Scheduling", 0x16uLL, "sdag", 4uLL, v50, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  v51 = *(_QWORD *)(a1 + 296);
  *((_QWORD *)v49 + 77) = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 640);
  *((_QWORD *)v49 + 78) = v51;
  v52 = llvm::ScheduleDAG::clearDAG(v49);
  *((_QWORD *)v49 + 81) = *((_QWORD *)v49 + 80);
  (*(void (**)(llvm::ScheduleDAG *, __n128))(*(_QWORD *)v49 + 88))(v49, v52);
  if (v71)
    llvm::Timer::stopTimer(v71);
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 640);
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "emit", 4uLL, "Instruction Creation", 0x14uLL, "sdag", 4uLL, v53, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  v56 = (*(uint64_t (**)(llvm::ScheduleDAG *, uint64_t))(*(_QWORD *)v49 + 96))(v49, *(_QWORD *)(a1 + 264) + 648);
  *(_QWORD *)(*(_QWORD *)(a1 + 264) + 640) = v56;
  if (v71)
    llvm::Timer::stopTimer(v71);
  if (v54 != v56)
    sub_1C6361BA8(*(_QWORD *)(a1 + 304), v54, v56);
  llvm::NamedRegionTimer::NamedRegionTimer(&v71, "cleanup", 7uLL, "Instruction Scheduling Cleanup", 0x1EuLL, "sdag", 4uLL, v55, "Instruction Selection and Scheduling", 0x24uLL, llvm::TimePassesIsEnabled);
  (*(void (**)(llvm::ScheduleDAG *))(*(_QWORD *)v49 + 8))(v49);
  if (v71)
    llvm::Timer::stopTimer(v71);
  return sub_1C6366090(*(_QWORD *)(a1 + 296));
}

_QWORD *sub_1C5D70464(_QWORD *result)
{
  *result = &off_1E8198BC8;
  *(_QWORD *)(result[2] + 656) = result[1];
  return result;
}

unint64_t sub_1C5D70480(uint64_t ***a1, llvm::OptimizationRemarkEmitter *a2, llvm::DiagnosticInfoOptimizationBase *this, int a4)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  char *v17;
  uint64_t **v18;
  uint64_t **v19;
  void **v20;
  const void *v21;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  void *v27[2];
  char v28;
  const void *v29[2];

  if (*((_QWORD *)this + 3))
    v7 = a4 == 0;
  else
    v7 = 0;
  if (v7)
    goto LABEL_20;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v18 = 0;
    v17 = &byte_1C871356D;
    goto LABEL_14;
  }
  v8 = ***a1;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if (!(_DWORD)v10)
    goto LABEL_12;
  LODWORD(v11) = (v10 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v12 = (uint64_t ****)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != a1)
  {
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == a1)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_13;
      }
    }
LABEL_12:
    v12 = (uint64_t ****)(v9 + 16 * v10);
  }
LABEL_13:
  v16 = v12[1];
  v19 = *v16;
  v17 = (char *)(v16 + 2);
  v18 = v19;
LABEL_14:
  v24 = 1283;
  v23[0] = " (in function: ";
  v23[2] = v17;
  v23[3] = v18;
  v25[0] = v23;
  v25[2] = ")";
  v26 = 770;
  llvm::Twine::str((llvm::Twine *)v25, v27);
  v20 = (void **)v27[0];
  if (v28 >= 0)
    v20 = v27;
  v21 = (const void *)(v28 & 0x7F);
  if (v28 < 0)
    v21 = v27[1];
  v29[0] = v20;
  v29[1] = v21;
  sub_1C53B17B4((uint64_t)this + 80, v29);
  if (v28 < 0)
    operator delete(v27[0]);
LABEL_20:
  if (a4)
  {
    llvm::DiagnosticInfoOptimizationBase::getMsg(this, (uint64_t)v23);
    v26 = 260;
    v25[0] = v23;
    llvm::report_fatal_error((uint64_t)v25, 1);
  }
  return llvm::OptimizationRemarkEmitter::emit(a2, this);
}

uint64_t sub_1C5D70608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a1 + 16) - 33;
  if (v4 > 0x37)
    goto LABEL_5;
  if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v7 = *(_QWORD *)(a1 + 64);
    if (!v7 || (*(_BYTE *)(v7 + 17) & 0x30) == 0)
    {
      v8 = *(_DWORD *)(a1 + 20);
      if (v8 < 0)
      {
        v9 = a1 - 32 * (v8 & 0x7FFFFFF);
        v12 = *(_QWORD *)(v9 - 8);
        v10 = v9 - 8;
        v11 = v12;
        if (v12)
        {
          v13 = -v11;
          do
          {
            v14 = *(_DWORD *)(*(_QWORD *)(v10 + v13) + 8);
            v15 = v14 > 7;
            v16 = (1 << v14) & 0x83;
            if (v15 || v16 == 0)
              return 0;
            v13 += 16;
          }
          while (v13);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0)
      {
        result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44);
        if (!(_DWORD)result)
          return result;
      }
    }
    goto LABEL_5;
  }
  if (v4 != 27)
  {
    if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x808001D0000010) == 0)
      goto LABEL_5;
    return 0;
  }
  if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
    return 0;
LABEL_5:
  if (*(unsigned __int8 *)(a1 + 16) - 29 < 0xB)
    return 0;
  if (sub_1C4D99D08(a1))
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 16) - 38;
  if (v5 < 0x39 && ((0x100060000000001uLL >> v5) & 1) != 0)
    return 0;
  v18 = 0;
  v19 = a1;
  return sub_1C61252B8((uint64_t *)(a2 + 80), &v19, &v18) ^ 1;
}

void sub_1C5D70778(uint64_t *a1, uint64_t a2, const llvm::APInt *a3)
{
  char *v5;
  char **v6;
  uint64_t v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  _OWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _OWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  char **v81;
  const llvm::APInt *v82;
  uint64_t v83;
  void *__p;
  char *v86;
  uint64_t v87;

  v5 = *(char **)a2;
  v6 = (char **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = operator new(0x10uLL);
  *(_OWORD *)v8 = *(_OWORD *)v5;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v8 + 4;
  *v6 = (char *)(v8 + 4);
  v9 = (char *)operator new(0x20uLL);
  v10 = v9 + 32;
  *((_OWORD *)v9 + 1) = *((_OWORD *)v5 + 1);
  *((_DWORD *)v9 + 2) = v8[2];
  *(_QWORD *)v9 = *(_QWORD *)v8;
  *(_QWORD *)a2 = v9;
  *v6 = v9 + 32;
  *(_QWORD *)(a2 + 16) = v9 + 32;
  operator delete(v8);
  v11 = *(_QWORD *)(a2 + 16);
  *v6 = v9 + 32;
  v12 = v5 + 32;
  if ((unint64_t)(v9 + 32) < v11)
  {
    *(_OWORD *)v10 = *v12;
    v13 = v9 + 48;
    goto LABEL_19;
  }
  v14 = *(char **)a2;
  v15 = (uint64_t)&v10[-*(_QWORD *)a2] >> 4;
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 60)
    goto LABEL_97;
  v17 = v11 - (_QWORD)v14;
  if (v17 >> 3 > v16)
    v16 = v17 >> 3;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
    v18 = 0xFFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 60)
      goto LABEL_98;
    v19 = (char *)operator new(16 * v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = &v19[16 * v15];
  v11 = (unint64_t)&v19[16 * v18];
  *(_OWORD *)v20 = *v12;
  v13 = v20 + 16;
  if (v10 == v14)
  {
    *(_QWORD *)a2 = v20;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v11;
LABEL_18:
    operator delete(v10);
    v11 = *(_QWORD *)(a2 + 16);
    goto LABEL_19;
  }
  do
  {
    v21 = *((_QWORD *)v10 - 2);
    v10 -= 16;
    *((_QWORD *)v20 - 2) = v21;
    v20 -= 16;
    *((_DWORD *)v20 + 2) = *((_DWORD *)v10 + 2);
  }
  while (v10 != v14);
  v10 = *(char **)a2;
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v11;
  if (v10)
    goto LABEL_18;
LABEL_19:
  *v6 = v13;
  v22 = v5 + 48;
  if ((unint64_t)v13 < v11)
  {
    *(_OWORD *)v13 = *v22;
    v23 = v13 + 16;
    v24 = a1;
    goto LABEL_38;
  }
  v25 = *(char **)a2;
  v26 = (uint64_t)&v13[-*(_QWORD *)a2] >> 4;
  v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 60)
    goto LABEL_97;
  v28 = v11 - (_QWORD)v25;
  if (v28 >> 3 > v27)
    v27 = v28 >> 3;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
    v29 = 0xFFFFFFFFFFFFFFFLL;
  else
    v29 = v27;
  if (v29)
  {
    if (v29 >> 60)
      goto LABEL_98;
    v30 = (char *)operator new(16 * v29);
  }
  else
  {
    v30 = 0;
  }
  v31 = &v30[16 * v26];
  v32 = &v30[16 * v29];
  *(_OWORD *)v31 = *v22;
  v23 = v31 + 16;
  if (v13 == v25)
  {
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = v32;
    v24 = a1;
LABEL_37:
    operator delete(v13);
    goto LABEL_38;
  }
  v24 = a1;
  do
  {
    v33 = *((_QWORD *)v13 - 2);
    v13 -= 16;
    *((_QWORD *)v31 - 2) = v33;
    v31 -= 16;
    *((_DWORD *)v31 + 2) = *((_DWORD *)v13 + 2);
  }
  while (v13 != v25);
  v13 = *(char **)a2;
  *(_QWORD *)a2 = v31;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v32;
  if (v13)
    goto LABEL_37;
LABEL_38:
  *v6 = v23;
  v83 = v7;
  v34 = (v7 - (uint64_t)v5) >> 4;
  v35 = v34
      - (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v5[16 * (v34 - 1)] + 40)
                            + 16 * *(unsigned int *)&v5[16 * (v34 - 1) + 8]) == 172);
  if (v35 != 4)
  {
    v40 = 4;
    do
    {
      v41 = &v5[16 * v40];
      v42 = *(_QWORD *)(*(_QWORD *)v41 + 80);
      v43 = (_QWORD *)(v42 + 24);
      if (*(_DWORD *)(v42 + 32) >= 0x41u)
        v43 = (_QWORD *)*v43;
      v44 = *(_DWORD *)v43;
      if ((v44 & 7) == 6)
      {
        if ((v44 & 0x80000000) != 0)
        {
          v46 = *(_QWORD *)(*((_QWORD *)v5 + 8) + 80);
          v47 = (_QWORD *)(v46 + 24);
          if (*(_DWORD *)(v46 + 32) >= 0x41u)
            v47 = (_QWORD *)*v47;
          v48 = HIWORD(v44) & 0x7FFF;
          v44 = *(_DWORD *)v47;
          if (v48)
          {
            v49 = 4;
            do
            {
              v49 += ((unsigned __int16)v44 >> 3) + 1;
              v50 = *(_QWORD *)(*(_QWORD *)&v5[16 * v49] + 80);
              v51 = (_QWORD *)(v50 + 24);
              if (*(_DWORD *)(v50 + 32) >= 0x41u)
                v51 = (_QWORD *)*v51;
              v44 = *(_DWORD *)v51;
              --v48;
            }
            while (v48);
          }
        }
        v52 = HIWORD(v44) & 0x7FFF;
        __p = 0;
        v86 = 0;
        v87 = 0;
        if ((*(unsigned int (**)(uint64_t *, char *, uint64_t, void **))(*v24 + 208))(v24, &v5[16 * v40 + 16], v52, &__p))
        {
          llvm::report_fatal_error((llvm *)"Could not match memory address.  Inline asm failure!", (const char *)1);
        }
        v53 = sub_1C6366AB4(v24[37], ((unint64_t)(v86 - (_BYTE *)__p) >> 1) & 0xFFFFFFF8 | ((_DWORD)v52 << 16) | 6, a3, (llvm *)5, 0, 1, 0);
        v55 = v53;
        v57 = *(char **)(a2 + 8);
        v56 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v57 >= v56)
        {
          v81 = v6;
          v82 = a3;
          v59 = *(char **)a2;
          v60 = (uint64_t)&v57[-*(_QWORD *)a2] >> 4;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60)
            goto LABEL_97;
          v62 = v56 - (_QWORD)v59;
          if (v62 >> 3 > v61)
            v61 = v62 >> 3;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
            v61 = 0xFFFFFFFFFFFFFFFLL;
          v80 = v61;
          if (v61)
          {
            if (v61 >> 60)
              goto LABEL_98;
            v63 = v53;
            v64 = v54;
            v65 = (char *)operator new(16 * v61);
            v54 = v64;
            v55 = v63;
          }
          else
          {
            v65 = 0;
          }
          v66 = &v65[16 * v60];
          *(_QWORD *)v66 = v55;
          *((_QWORD *)v66 + 1) = v54;
          v67 = v66;
          if (v57 == v59)
          {
            v6 = v81;
            a3 = v82;
            v68 = v80;
          }
          else
          {
            v68 = v80;
            v6 = v81;
            do
            {
              v69 = *((_QWORD *)v57 - 2);
              v57 -= 16;
              v70 = *((_DWORD *)v57 + 2);
              *((_QWORD *)v67 - 2) = v69;
              v67 -= 16;
              *((_DWORD *)v67 + 2) = v70;
            }
            while (v57 != v59);
            v57 = *(char **)a2;
            a3 = v82;
          }
          v58 = v66 + 16;
          *(_QWORD *)a2 = v67;
          *(_QWORD *)(a2 + 8) = v66 + 16;
          *(_QWORD *)(a2 + 16) = &v65[16 * v68];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_QWORD *)v57 = v53;
          *((_QWORD *)v57 + 1) = v54;
          v58 = v57 + 16;
        }
        *(_QWORD *)(a2 + 8) = v58;
        sub_1C5D3AB1C(a2, v58, (char *)__p, v86, (v86 - (_BYTE *)__p) >> 4);
        if (__p)
        {
          v86 = (char *)__p;
          operator delete(__p);
        }
        v40 += 2;
        v24 = a1;
      }
      else
      {
        v45 = (unsigned __int16)v44 >> 3;
        sub_1C5D3AB1C(a2, *(char **)(a2 + 8), v41, &v41[16 * ((unsigned __int16)v44 >> 3) + 16], (16 * ((unsigned __int16)v44 >> 3) + 16) >> 4);
        v40 += v45 + 1;
      }
    }
    while (v40 != v35);
  }
  if (v34 != v35)
  {
    v36 = (_OWORD *)(v83 - 16);
    v38 = *(char **)(a2 + 8);
    v37 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v38 < v37)
    {
      *(_OWORD *)v38 = *v36;
      v39 = v38 + 16;
LABEL_94:
      *v6 = v39;
      goto LABEL_95;
    }
    v71 = *(char **)a2;
    v72 = (uint64_t)&v38[-*(_QWORD *)a2] >> 4;
    v73 = v72 + 1;
    if (!((unint64_t)(v72 + 1) >> 60))
    {
      v74 = v37 - (_QWORD)v71;
      if (v74 >> 3 > v73)
        v73 = v74 >> 3;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
        v75 = 0xFFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (!v75)
      {
        v76 = 0;
        goto LABEL_89;
      }
      if (!(v75 >> 60))
      {
        v76 = (char *)operator new(16 * v75);
LABEL_89:
        v77 = &v76[16 * v72];
        *(_OWORD *)v77 = *v36;
        v39 = v77 + 16;
        if (v38 != v71)
        {
          do
          {
            v78 = *((_QWORD *)v38 - 2);
            v38 -= 16;
            v79 = *((_DWORD *)v38 + 2);
            *((_QWORD *)v77 - 2) = v78;
            v77 -= 16;
            *((_DWORD *)v77 + 2) = v79;
          }
          while (v38 != v71);
          v38 = *(char **)a2;
        }
        *(_QWORD *)a2 = v77;
        *(_QWORD *)(a2 + 8) = v39;
        *(_QWORD *)(a2 + 16) = &v76[16 * v75];
        if (v38)
          operator delete(v38);
        goto LABEL_94;
      }
LABEL_98:
      sub_1C4764EE4();
    }
LABEL_97:
    abort();
  }
LABEL_95:
  operator delete(v5);
}

void sub_1C5D70D6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v28[4];
  uint64_t (**v29)();
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[4] = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x400000000;
  v6 = *(unsigned int *)(a5 + 8);
  if (!(_DWORD)v6)
    goto LABEL_30;
  for (i = 0; i != v6; ++i)
  {
    v12 = *(_QWORD *)(*(_QWORD *)a5 + 8 * i);
    if (v12 && (v12 != a2 || (a6 & 1) == 0))
    {
      v13 = *(unsigned __int16 *)(v12 + 58);
      v14 = v13 - 1;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 40) + 16 * (v13 - 1));
      v16 = v13 - 2;
      if (v15 != 172)
        v16 = v14;
      v17 = *(_QWORD *)(a1 + 296);
      v18 = v16;
      v28[0] = &off_1E81991B0;
      v28[1] = a5;
      v28[3] = v28;
      v29 = &off_1E8198C00;
      v19 = *(_QWORD *)(v17 + 656);
      *(_QWORD *)(v17 + 656) = &v29;
      v30 = v19;
      v31 = v17;
      v32[0] = &off_1E81991B0;
      v32[1] = a5;
      v33 = v32;
      if (*(_WORD *)(v12 + 24) != 2)
      {
        sub_1C5D6146C(v17, v12, v18, a3, a4);
        sub_1C63725DC(a3);
      }
      if (v12 != a2 && !*(_QWORD *)(v12 + 48))
      {
        v20 = v34;
        v21 = v35;
        v22 = (char *)v34;
        if ((_DWORD)v35)
        {
          v23 = 8 * v35;
          v22 = (char *)v34;
          while (*(_QWORD *)v22 != v12)
          {
            v22 += 8;
            v23 -= 8;
            if (!v23)
            {
              v22 = (char *)v34 + 8 * v35;
              break;
            }
          }
        }
        if (v35 == (v22 - (_BYTE *)v34) >> 3)
        {
          if (v35 >= HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 8);
            v20 = v34;
            v21 = v35;
          }
          v20[v21] = v12;
          LODWORD(v35) = v35 + 1;
        }
      }
      v29 = &off_1E8198C00;
      v24 = v33;
      if (v33 == v32)
      {
        v24 = v32;
        v25 = 4;
      }
      else
      {
        if (!v33)
        {
LABEL_26:
          *(_QWORD *)(v31 + 656) = v30;
          continue;
        }
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_26;
    }
  }
  if ((_DWORD)v35)
    sub_1C63653B4(*(_QWORD **)(a1 + 296), (uint64_t)&v34);
LABEL_30:
  if (v34 != v36)
    free(v34);
}

void sub_1C5D70FDC(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int i;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  int v29;
  int v30;
  unsigned int *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  void *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  char v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  llvm *v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  char v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v92;
  int v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  char *v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v115;
  uint64_t v116;
  int v118;
  char v119;
  unint64_t v120;
  int v121;
  unsigned int v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  int v131;
  char v132;
  uint64_t *v133;
  uint64_t v134;
  int v135;
  BOOL v136;
  uint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  __int128 v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  BOOL v160;
  unsigned int v161;
  unsigned int *v162;
  uint64_t *v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t *v171;
  int v172;
  unsigned __int8 v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  char v178;
  int v179;
  unint64_t v180;
  int v181;
  char v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  int v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  unint64_t v204;
  int v205;
  int v206;
  void *v207;
  int v208;
  char v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v214;
  char *v215;
  __int128 v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int j;
  int v228;
  _QWORD *v229;
  unsigned int v230;
  int v231;
  char v232;
  uint64_t *v233;
  uint64_t v234;
  int v235;
  int v237;
  char v238;
  uint64_t *v239;
  uint64_t v240;
  int v241;
  int v243;
  char v244;
  unint64_t v245;
  int v246;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  void *v253;
  int v254;
  __int128 v255;
  int v256;
  void **v257;
  char *v258;
  uint64_t *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  int k;
  int v270;
  uint64_t v271;
  int v272;
  char v273;
  __int128 v274;
  unsigned int v275;
  int m;
  char v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  int v289;
  int v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  unint64_t v305;
  void *v306;
  unsigned __int16 *v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  unint64_t v313;
  char *v314;
  __int128 v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  int v323;
  void *v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  char v329;
  llvm *v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  void *v335;
  llvm *v336;
  void *v337;
  char *v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  int v343;
  llvm *v344;
  llvm *v345;
  uint64_t v346;
  uint64_t v347;
  size_t v348;
  const void *v349;
  size_t v350;
  llvm::raw_ostream *v351;
  unsigned int v352;
  char *v353;
  char *v354;
  unint64_t v355;
  uint64_t v356;
  int v357;
  int v358;
  char v359;
  char *v360;
  char *v361;
  llvm *v362;
  llvm *v363;
  uint64_t v364;
  size_t v365;
  size_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  unsigned int v376;
  _QWORD *v377;
  int v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  __int16 v382;
  unsigned int v383;
  unsigned __int8 **v384;
  int v385;
  int v386;
  uint64_t (***v387)();
  uint64_t v388;
  _BOOL4 v390;
  unint64_t v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  char *v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  int v406;
  uint64_t v407;
  int v408;
  char v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  char *v414;
  uint64_t v415;
  char *v416;
  _QWORD *v417;
  uint64_t v418;
  uint64_t *v419;
  llvm *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  __int16 v424;
  uint64_t v425;
  uint64_t *v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  unsigned int v432;
  unsigned int v433;
  int v434;
  int v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  __int128 v439;
  int v440;
  unint64_t v441;
  __int128 v442;
  unsigned int v443;
  char v444;
  unint64_t v445;
  _BOOL4 v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  unint64_t v457;
  uint64_t (**v458)();
  __int128 v459;
  uint64_t (***v460)();
  void *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t (**v464)();
  __int128 v465;
  uint64_t (***v466)();
  void *v467;
  uint64_t v468;
  _BYTE v469[24];
  void *v470;
  uint64_t v471;
  _BYTE v472[16];
  void *v473;
  uint64_t v474;
  _BYTE v475[192];
  void *v476;
  uint64_t v477;
  _BYTE v478[1088];
  void *__src;
  uint64_t v480;
  _QWORD v481[16];
  void *v482;
  uint64_t v483;
  _BYTE v484[128];
  void *v485[2];
  uint64_t v486;
  int v487;
  _DWORD v488[16];
  uint64_t v489;
  int v490;
  uint64_t v491;
  int v492;
  BOOL v493;
  uint64_t v494;

  v8 = a3;
  v9 = a2;
  v10 = a1;
  v494 = *MEMORY[0x1E0C80C00];
  v457 = a2;
  v11 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 1:
    case 2:
    case 6:
    case 9:
    case 0xA:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x31:
    case 0x32:
      goto LABEL_5;
    case 3:
    case 4:
    case 5:
      v12 = *(uint64_t **)(a2 + 32);
      v13 = *v12;
      sub_1C5D6146C(*(_QWORD *)(a1 + 296), a2, 0, *v12, v12[1]);
      sub_1C63725DC(v13);
      sub_1C6365540(*(_QWORD **)(v10 + 296), v9);
      return;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
      goto LABEL_9;
    case 0x1B:
      sub_1C6372D5C(a1, a2);
      return;
    case 0x1C:
      sub_1C6372E6C(a1, a2);
      return;
    case 0x33:
      sub_1C636E190(*(_QWORD **)(a1 + 296), a2, 10, **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8));
      return;
    case 0x34:
      v417 = *(_QWORD **)(a1 + 296);
      v419 = *(uint64_t **)(a2 + 32);
      v418 = *(_QWORD *)(a2 + 40);
      v420 = *(llvm **)v418;
      v421 = *(_QWORD *)(v418 + 8);
      v422 = *v419;
      v423 = v419[1];
      v424 = 19;
      goto LABEL_709;
    default:
      v14 = (v11 - 261);
      if (v14 > 0x38)
        goto LABEL_9;
      if (((1 << (v11 - 5)) & 0x11800000012000CLL) != 0)
      {
LABEL_5:
        *(_DWORD *)(a2 + 28) = -1;
        return;
      }
      if (((1 << (v11 - 5)) & 3) != 0)
      {
        sub_1C6372C2C((uint64_t *)a1, a2);
        return;
      }
      if (v14 != 27)
      {
LABEL_9:
        __src = v481;
        v481[0] = a2;
        v481[1] = 0;
        v480 = 0x800000001;
        v476 = v478;
        v477 = 0x800000000;
        v473 = v475;
        v474 = 0x800000000;
        v470 = v472;
        v471 = 0x200000000;
        v467 = v469;
        v468 = 0x300000000;
        v15 = *(_QWORD *)(a1 + 448);
        v16 = *(_QWORD *)(a1 + 456);
        if (v15 == v16)
        {
          if (*a3 != 31)
            goto LABEL_25;
          for (i = 1; ; i = v18 + 2 + v20)
          {
            v18 = i + 1;
            v19 = (char)v8[i];
            LODWORD(v20) = v19;
            if (v19 < 0)
            {
              v20 = v19 & 0x7F;
              v21 = 7;
              do
              {
                v22 = v8[v18++];
                v20 |= (unint64_t)(v22 & 0x7F) << v21;
                v21 += 7;
              }
              while (v22 < 0);
            }
            if (!(_DWORD)v20)
              break;
            v23 = v8[v18] | ((unint64_t)v8[v18 + 1] << 8);
            v24 = (*(_QWORD *)(v10 + 456) - v15) >> 2;
            if (v24 <= v23)
            {
              v25 = 2 * v23 + 2;
              if (v25 <= v24)
              {
                if (v25 < v24)
                  *(_QWORD *)(v10 + 456) = v15 + 4 * v25;
              }
              else
              {
                sub_1C4D63CD0((char **)(v10 + 448), v25 - v24);
                v15 = *(_QWORD *)(v10 + 448);
              }
            }
            *(_DWORD *)(v15 + 4 * v23) = v18 + 2;
          }
          v11 = *(unsigned __int16 *)(v9 + 24);
          v16 = *(_QWORD *)(v10 + 456);
        }
        if (v11 < (v16 - v15) >> 2)
        {
          v26 = *(_DWORD *)(v15 + 4 * v11);
          goto LABEL_26;
        }
LABEL_25:
        v26 = 0;
LABEL_26:
        v27 = 0;
        v453 = 0;
        v454 = 0;
        v455 = 0;
        v28 = 0;
LABEL_27:
        while (2)
        {
          v29 = v8[v26];
          v30 = v26 + 1;
          switch(v8[v26])
          {
            case 0:
              while (2)
              {
                v26 = v30 + 1;
                LODWORD(v69) = v8[v30];
                if ((char)v8[v30] < 0)
                {
                  v69 &= 0x7Fu;
                  v70 = 7;
                  do
                  {
                    v71 = v8[v26++];
                    v69 |= (unint64_t)(v71 & 0x7F) << v70;
                    v70 += 7;
                  }
                  while (v71 < 0);
                }
                if (!(_DWORD)v69)
                  goto LABEL_562;
                v30 = v69 + v26;
                v72 = v8[v26];
                v73 = v26 + 1;
                switch(v8[v26])
                {
                  case 0x16:
                    v101 = (char *)v473 + 24 * v8[v73];
                    if (*(_QWORD *)v101 != v9 || *((_DWORD *)v101 + 2) != (_DWORD)v28)
                      continue;
                    goto LABEL_410;
                  case 0x17:
                  case 0x18:
                  case 0x19:
                  case 0x1A:
                    v85 = v72 - 23;
                    if (v85 >= *(unsigned __int16 *)(v9 + 56))
                      continue;
                    v86 = *(_QWORD *)(v9 + 32) + 40 * v85;
                    v87 = (char *)v473 + 24 * v8[v73];
                    if (*(_QWORD *)v87 != *(_QWORD *)v86 || *((_DWORD *)v87 + 2) != *(_DWORD *)(v86 + 8))
                      continue;
                    goto LABEL_410;
                  case 0x1B:
                    if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 240))(v10, v8[v73]) & 1) == 0)continue;
                    goto LABEL_410;
                  case 0x1C:
                    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 248))(v10, v9, v8[v73]) & 1) == 0)continue;
                    goto LABEL_410;
                  case 0x1E:
                    if ((v8[v73] | (v8[v26 + 2] << 8)) != *(unsigned __int16 *)(v9 + 24))
                      continue;
                    goto LABEL_561;
                  case 0x20:
                    v78 = v8[v73];
                    v79 = (unsigned __int8 *)(*(_QWORD *)(v9 + 40) + 16 * v28);
                    goto LABEL_93;
                  case 0x21:
                    v102 = v8[v26 + 2];
                    v103 = (unsigned __int8 *)(*(_QWORD *)(v9 + 40) + 16 * v8[v73]);
                    v104 = *v103;
                    if (v102 == v104)
                    {
                      if (v8[v26 + 2] || !*((_QWORD *)v103 + 1))
                        goto LABEL_561;
                      continue;
                    }
                    if (v102 != 254)
                      continue;
                    v116 = *((_QWORD *)v103 + 1);
                    if (v104 != (*(unsigned __int8 (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 344)
                                                                                            + 32))(*(_QWORD *)(v10 + 344), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272, 0))continue;
                    if (v116 && v104 == 0)
                      continue;
LABEL_561:
                    v26 += 3;
                    if (!v30)
                      goto LABEL_562;
                    goto LABEL_412;
                  case 0x23:
                  case 0x24:
                  case 0x25:
                  case 0x26:
                  case 0x27:
                  case 0x28:
                  case 0x29:
                  case 0x2A:
                    v74 = v72 - 35;
                    if (v74 >= *(unsigned __int16 *)(v9 + 56))
                      continue;
                    v75 = *(_QWORD *)(v9 + 32) + 40 * v74;
                    v76 = *(_QWORD *)v75;
                    v77 = *(unsigned int *)(v75 + 8);
                    v78 = v8[v73];
                    v79 = (unsigned __int8 *)(*(_QWORD *)(v76 + 40) + 16 * v77);
LABEL_93:
                    v80 = *v79;
                    if (v78 == v80)
                    {
                      if (v78 || !*((_QWORD *)v79 + 1))
                        goto LABEL_410;
                      continue;
                    }
                    if (v78 != 254)
                      continue;
                    v88 = *(_QWORD *)(v10 + 344);
                    v89 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272;
                    v90 = *((_QWORD *)v79 + 1);
                    goto LABEL_106;
                  case 0x2B:
                    v92 = v26 + 2;
                    v93 = (char)v8[v73];
                    v94 = v8[v73];
                    if (v93 < 0)
                    {
                      v94 &= 0x7Fu;
                      v118 = 7;
                      do
                      {
                        v119 = v8[v92];
                        v26 = v92 + 1;
                        v94 |= (unint64_t)(v119 & 0x7F) << v118;
                        v118 += 7;
                        ++v92;
                      }
                      while (v119 < 0);
                    }
                    else
                    {
                      v26 += 2;
                    }
                    v120 = 0x8000000000000000;
                    if (v94 != 1)
                      v120 = -(uint64_t)(v94 >> 1);
                    if ((v94 & 1) != 0)
                      v112 = v120;
                    else
                      v112 = v94 >> 1;
                    v121 = *(unsigned __int16 *)(v9 + 24);
                    if (v121 != 35 && v121 != 11)
                      continue;
                    v115 = *(_QWORD *)(v9 + 80);
                    goto LABEL_179;
                  case 0x2C:
                  case 0x2D:
                  case 0x2E:
                  case 0x2F:
                  case 0x30:
                    v81 = v72 - 44;
                    if (v81 >= *(unsigned __int16 *)(v9 + 56))
                      continue;
                    v82 = v26 + 2;
                    v83 = (char)v8[v73];
                    v84 = v8[v73];
                    if (v83 < 0)
                    {
                      v84 &= 0x7Fu;
                      v108 = 7;
                      do
                      {
                        v109 = v8[v82];
                        v26 = v82 + 1;
                        v84 |= (unint64_t)(v109 & 0x7F) << v108;
                        v108 += 7;
                        ++v82;
                      }
                      while (v109 < 0);
                    }
                    else
                    {
                      v26 += 2;
                    }
                    v110 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40 * v81);
                    v111 = 0x8000000000000000;
                    if (v84 != 1)
                      v111 = -(uint64_t)(v84 >> 1);
                    v112 = (v84 & 1) != 0 ? v111 : v84 >> 1;
                    v113 = *(unsigned __int16 *)(v110 + 24);
                    if (v113 != 35 && v113 != 11)
                      continue;
                    v115 = *(_QWORD *)(v110 + 80);
LABEL_179:
                    v123 = *(_DWORD *)(v115 + 32);
                    if (v123 > 0x40)
                      v124 = **(_QWORD **)(v115 + 24);
                    else
                      v124 = (uint64_t)(*(_QWORD *)(v115 + 24) << -(char)v123) >> -(char)v123;
                    if (v124 == v112)
                      goto LABEL_411;
                    continue;
                  case 0x31:
                    v95 = *(_DWORD *)(v9 + 76);
                    goto LABEL_117;
                  case 0x32:
                    if (*(unsigned __int16 *)(v9 + 56) < 3u)
                      continue;
                    v95 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 80) + 76);
LABEL_117:
                    if (v95 == v8[v73])
                      goto LABEL_410;
                    continue;
                  case 0x33:
                    v99 = v8[v73];
                    v80 = *(unsigned __int8 *)(v9 + 80);
                    if (v99 == v80)
                    {
                      if (v99)
                        v100 = 1;
                      else
                        v100 = *(_QWORD *)(v9 + 88) == 0;
                      if (v100)
                        goto LABEL_410;
                      continue;
                    }
                    if (v99 != 254)
                      continue;
                    v88 = *(_QWORD *)(v10 + 344);
                    v89 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272;
                    v90 = *(_QWORD *)(v9 + 88);
LABEL_106:
                    if (v80 != (*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, v89, 0))continue;
                    if (v90 && v80 == 0)
                      continue;
LABEL_410:
                    v26 += 2;
LABEL_411:
                    if (!v30)
                      goto LABEL_562;
LABEL_412:
                    v485[1] = &v487;
                    v486 = 0x400000000;
                    v489 = 0;
                    v490 = 0;
                    v491 = 0;
                    v492 = 0;
                    LODWORD(v485[0]) = v30;
                    sub_1C612E234((unsigned int *)&v485[1], __src, (_BYTE *)__src + 16 * v480);
                    v488[14] = v474;
                    v488[15] = v471;
                    v489 = v454;
                    v490 = v455;
                    v491 = v27;
                    v492 = v453;
                    v493 = (_DWORD)v468 != 0;
                    v256 = v477;
                    v257 = v485;
                    v258 = (char *)v476;
                    if (v477 >= HIDWORD(v477))
                    {
                      v452 = v27;
                      v390 = v476 <= v485 && (char *)v476 + 136 * v477 > (char *)v485;
                      v446 = v390;
                      if (v390)
                        v391 = 0xF0F0F0F0F0F0F0F1 * (((char *)v485 - (_BYTE *)v476) >> 3);
                      else
                        v391 = -1;
                      v441 = v391;
                      v482 = 0;
                      v392 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v476, v477 + 1, 136, (unint64_t *)&v482);
                      v258 = v392;
                      v393 = (char *)v476;
                      if ((_DWORD)v477)
                      {
                        v394 = (char *)v476 + 136 * v477;
                        v395 = (char *)v476 + 8;
                        v396 = v392;
                        do
                        {
                          v397 = v395 - 8;
                          *(_DWORD *)v396 = *((_DWORD *)v395 - 2);
                          *((_QWORD *)v396 + 1) = v396 + 24;
                          *((_QWORD *)v396 + 2) = 0x400000000;
                          if (*((_DWORD *)v395 + 2))
                            sub_1C62F45E8((uint64_t)(v396 + 8), (uint64_t)v395);
                          v398 = *((_OWORD *)v395 + 5);
                          v399 = *((_OWORD *)v395 + 6);
                          *(_OWORD *)(v396 + 113) = *(_OWORD *)(v395 + 105);
                          *(_OWORD *)(v396 + 104) = v399;
                          *(_OWORD *)(v396 + 88) = v398;
                          v396 += 136;
                          v395 += 136;
                        }
                        while (v397 + 136 != v394);
                        v393 = (char *)v476;
                        if ((_DWORD)v477)
                        {
                          v400 = 136 * v477;
                          do
                          {
                            v401 = *(char **)&v393[v400 - 128];
                            if (&v393[v400 - 112] != v401)
                              free(v401);
                            v400 -= 136;
                          }
                          while (v400);
                          v393 = (char *)v476;
                        }
                      }
                      v402 = (int)v482;
                      if (v393 != v478)
                        free(v393);
                      v476 = v258;
                      HIDWORD(v477) = v402;
                      if (v446)
                        v257 = (void **)&v258[136 * v441];
                      else
                        v257 = v485;
                      v259 = (uint64_t *)&v258[136 * v441 + 16];
                      if (!v446)
                        v259 = &v486;
                      v256 = v477;
                      v27 = v452;
                    }
                    else
                    {
                      v259 = &v486;
                    }
                    v260 = &v258[136 * v256];
                    *(_DWORD *)v260 = *(_DWORD *)v257;
                    *((_QWORD *)v260 + 2) = 0x400000000;
                    *((_QWORD *)v260 + 1) = v260 + 24;
                    v261 = (uint64_t)(v260 + 8);
                    if (*(_DWORD *)v259)
                      sub_1C6273000(v261, (uint64_t)(v257 + 1));
                    v262 = &v258[136 * v256];
                    v263 = *(_OWORD *)(v257 + 11);
                    v264 = *(_OWORD *)(v257 + 13);
                    *(_OWORD *)(v262 + 113) = *(_OWORD *)((char *)v257 + 113);
                    *(_OWORD *)(v262 + 104) = v264;
                    *(_OWORD *)(v262 + 88) = v263;
                    LODWORD(v477) = v477 + 1;
                    a1 = (uint64_t)v485[1];
                    if (v485[1] != &v487)
                      free(v485[1]);
                    break;
                  case 0x35:
                    v105 = v26 + 2;
                    v106 = (char)v8[v73];
                    v107 = v106;
                    if (v106 < 0)
                    {
                      v107 = v106 & 0x7F;
                      v131 = 7;
                      do
                      {
                        v132 = v8[v105];
                        v26 = v105 + 1;
                        v107 |= (unint64_t)(v132 & 0x7F) << v131;
                        v131 += 7;
                        ++v105;
                      }
                      while (v132 < 0);
                    }
                    else
                    {
                      v26 += 2;
                    }
                    if (*(_WORD *)(v9 + 24) != 171)
                      continue;
                    v133 = *(uint64_t **)(v9 + 32);
                    v134 = v133[5];
                    v135 = *(unsigned __int16 *)(v134 + 24);
                    v136 = v135 == 35 || v135 == 11;
                    if (!v136 || !sub_1C63727A4(v10, *v133, v133[1], *(_QWORD *)(v134 + 80), v107))
                      continue;
                    goto LABEL_411;
                  case 0x36:
                    v96 = v26 + 2;
                    v97 = (char)v8[v73];
                    v98 = v97;
                    if (v97 < 0)
                    {
                      v98 = v97 & 0x7F;
                      v125 = 7;
                      do
                      {
                        v126 = v8[v96];
                        v26 = v96 + 1;
                        v98 |= (unint64_t)(v126 & 0x7F) << v125;
                        v125 += 7;
                        ++v96;
                      }
                      while (v126 < 0);
                    }
                    else
                    {
                      v26 += 2;
                    }
                    if (*(_WORD *)(v9 + 24) != 172)
                      continue;
                    v127 = *(uint64_t **)(v9 + 32);
                    v128 = v127[5];
                    v129 = *(unsigned __int16 *)(v128 + 24);
                    v130 = v129 == 35 || v129 == 11;
                    if (!v130 || !sub_1C63729A4(v10, *v127, v127[1], *(_QWORD *)(v128 + 80), v98))
                      continue;
                    goto LABEL_411;
                  default:
                    goto LABEL_411;
                }
                goto LABEL_27;
              }
            case 1:
              if (v480 < 2)
                v137 = 0;
              else
                v137 = *((_QWORD *)__src + 2 * v480 - 4);
              v485[0] = (void *)v9;
              v485[1] = v28;
              v486 = v137;
              goto LABEL_320;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              if (v29 - 2 >= *(unsigned __int16 *)(v9 + 56))
                goto LABEL_562;
              *(_OWORD *)v485 = *(_OWORD *)(*(_QWORD *)(v9 + 32) + 40 * (v29 - 2));
              v486 = v9;
LABEL_320:
              a1 = sub_1C4DC1E54((uint64_t)&v473, (unint64_t)v485);
              v215 = (char *)v473 + 24 * v474;
              v216 = *(_OWORD *)a1;
              *((_QWORD *)v215 + 2) = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v215 = v216;
              LODWORD(v474) = v474 + 1;
              goto LABEL_321;
            case 0xA:
              a1 = sub_1C6133268(v9);
              ++v26;
              if (!(_DWORD)a1)
                continue;
              v26 = v30;
              if (!v9)
                continue;
              v340 = *(_QWORD *)(v9 + 96);
              v341 = v471;
              if (v471 >= (unint64_t)HIDWORD(v471))
              {
                a1 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v470, (uint64_t)v472, v471 + 1, 8);
                v341 = v471;
              }
              *((_QWORD *)v470 + v341) = v340;
              LODWORD(v471) = v471 + 1;
              goto LABEL_321;
            case 0xB:
              ++v26;
              if (!*(_WORD *)(v9 + 56))
                continue;
              v143 = *(_QWORD *)(v9 + 32) + 40 * (*(unsigned __int16 *)(v9 + 56) - 1);
              v144 = *(_QWORD *)v143;
              v145 = *(unsigned int *)(v143 + 8);
              v146 = v453;
              if (*(unsigned __int8 *)(*(_QWORD *)(v144 + 40) + 16 * v145) == 172)
                v146 = v145;
              v453 = v146;
              if (*(unsigned __int8 *)(*(_QWORD *)(v144 + 40) + 16 * v145) == 172)
                v27 = v144;
              goto LABEL_321;
            case 0xC:
              if (*(unsigned __int16 *)(v9 + 56) <= v8[v30])
                goto LABEL_562;
              v147 = *(_QWORD *)(v9 + 32) + 40 * v8[v30];
              v9 = *(_QWORD *)v147;
              v28 = (void *)*(unsigned int *)(v147 + 8);
              v148 = v480;
              if (v480 >= (unint64_t)HIDWORD(v480))
              {
                a1 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v481, v480 + 1, 16);
                v148 = v480;
              }
              v26 += 2;
              v149 = (uint64_t *)((char *)__src + 16 * v148);
              *v149 = v9;
              v149[1] = (uint64_t)v28;
              LODWORD(v480) = v480 + 1;
              continue;
            case 0xD:
            case 0xE:
            case 0xF:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
              if (v29 - 13 >= *(unsigned __int16 *)(v9 + 56))
                goto LABEL_562;
              v35 = *(_QWORD *)(v9 + 32) + 40 * (v29 - 13);
              v9 = *(_QWORD *)v35;
              v28 = (void *)*(unsigned int *)(v35 + 8);
              v36 = v480;
              if (v480 >= (unint64_t)HIDWORD(v480))
              {
                a1 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v481, v480 + 1, 16);
                v36 = v480;
              }
              v37 = (uint64_t *)((char *)__src + 16 * v36);
              *v37 = v9;
              v37[1] = (uint64_t)v28;
              LODWORD(v480) = v480 + 1;
              goto LABEL_321;
            case 0x15:
              LODWORD(v480) = v480 - 1;
              v150 = (char *)__src + 16 * v480;
              v9 = *((_QWORD *)v150 - 2);
              v28 = (void *)*((unsigned int *)v150 - 2);
              goto LABEL_321;
            case 0x16:
              v63 = (char *)v473 + 24 * v8[v30];
              if (*(_QWORD *)v63 != v9)
                goto LABEL_562;
              v26 += 2;
              if (*((_DWORD *)v63 + 2) != (_DWORD)v28)
                goto LABEL_562;
              continue;
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
              if (v29 - 23 >= *(unsigned __int16 *)(v9 + 56))
                goto LABEL_562;
              v40 = *(_QWORD *)(v9 + 32) + 40 * (v29 - 23);
              v41 = (char *)v473 + 24 * v8[v30];
              if (*(_QWORD *)v41 != *(_QWORD *)v40)
                goto LABEL_562;
              v26 += 2;
              if (*((_DWORD *)v41 + 2) != *(_DWORD *)(v40 + 8))
                goto LABEL_562;
              continue;
            case 0x1B:
              v26 += 2;
              a1 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 240))(v10, v8[v30]);
              if ((a1 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x1C:
              v26 += 2;
              a1 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 248))(v10, v9, v8[v30]);
              if ((a1 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x1D:
              v138 = v8[v30];
              v139 = v26 + 2;
              v485[0] = &v486;
              v485[1] = (void *)0x800000000;
              if (v138)
              {
                v140 = 0;
                do
                {
                  v141 = *(_OWORD *)((char *)v473 + 24 * v8[v139]);
                  if (v140 >= HIDWORD(v485[1]))
                  {
                    v442 = *(_OWORD *)((char *)v473 + 24 * v8[v139]);
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v485, (uint64_t)&v486, v140 + 1, 16);
                    v141 = v442;
                    v140 = v485[1];
                  }
                  *((_OWORD *)v485[0] + v140) = v141;
                  v140 = ++LODWORD(v485[1]);
                  ++v139;
                  --v138;
                }
                while (v138);
              }
              v142 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)v10 + 256))(v10, v9, v8[v139], v485);
              a1 = (uint64_t)v485[0];
              if (v485[0] != &v486)
                free(v485[0]);
              v26 = v139 + 1;
              if ((v142 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x1E:
              v67 = v26 + 2;
              v26 += 3;
              v62 = v8[v30] | (v8[v67] << 8);
              v68 = *(unsigned __int16 *)(v9 + 24);
              goto LABEL_300;
            case 0x1F:
              v56 = *(unsigned __int16 *)(v9 + 24);
              while (1)
              {
                v57 = v30 + 1;
                LODWORD(v58) = v8[v30];
                if ((char)v8[v30] < 0)
                {
                  v58 &= 0x7Fu;
                  v59 = 7;
                  do
                  {
                    v60 = v8[v57++];
                    v58 |= (unint64_t)(v60 & 0x7F) << v59;
                    v59 += 7;
                  }
                  while (v60 < 0);
                }
                if (!(_DWORD)v58)
                  goto LABEL_562;
                v61 = v8[v57] | (v8[v57 + 1] << 8);
                if (v61 == v56)
                  LODWORD(v58) = 0;
                v30 = v57 + v58 + 2;
                if (v61 == v56)
                  goto LABEL_321;
              }
            case 0x20:
              v26 += 2;
              v32 = v8[v30];
              v33 = (unsigned __int8 *)(*(_QWORD *)(v9 + 40) + 16 * v28);
              goto LABEL_271;
            case 0x21:
              v189 = v26 + 2;
              v26 += 3;
              v32 = v8[v189];
              v33 = (unsigned __int8 *)(*(_QWORD *)(v9 + 40) + 16 * v8[v30]);
LABEL_271:
              v34 = *v33;
              if (v32 != v34)
                goto LABEL_277;
              v190 = *((_QWORD *)v33 + 1);
              if (v32)
                v191 = 1;
              else
                v191 = v190 == 0;
              if (!v191)
                goto LABEL_562;
              continue;
            case 0x22:
              v173 = *(_BYTE *)(*(_QWORD *)(v9 + 40) + 16 * v28);
              while (1)
              {
                v174 = v30 + 1;
                v175 = (char)v8[v30];
                LODWORD(v176) = v8[v30];
                if (v175 < 0)
                {
                  v176 &= 0x7Fu;
                  v177 = 7;
                  do
                  {
                    v178 = v8[v174++];
                    v176 |= (unint64_t)(v178 & 0x7F) << v177;
                    v177 += 7;
                  }
                  while (v178 < 0);
                }
                if (!(_DWORD)v176)
                  goto LABEL_562;
                a1 = v8[v174];
                if ((_DWORD)a1 == 254)
                  a1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 344) + 32))(*(_QWORD *)(v10 + 344), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272, 0);
                if (a1 == v173)
                  v179 = 0;
                else
                  v179 = v176;
                v30 = v174 + 1 + v179;
                if (a1 == v173)
                {
LABEL_321:
                  v26 = v30;
                  goto LABEL_27;
                }
              }
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2A:
              if (v29 - 35 >= *(unsigned __int16 *)(v9 + 56))
                goto LABEL_562;
              v31 = (unsigned int *)(*(_QWORD *)(v9 + 32) + 40 * (v29 - 35));
              v26 += 2;
              v32 = v8[v30];
              v33 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v31 + 40) + 16 * v31[2]);
              v34 = *v33;
              if (v32 == v34)
              {
                if (!v32 && *((_QWORD *)v33 + 1))
                  goto LABEL_562;
                continue;
              }
LABEL_277:
              if (v32 == 254)
              {
                v192 = *((_QWORD *)v33 + 1);
                a1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 344) + 32))(*(_QWORD *)(v10 + 344), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272, 0);
                if (v34 == a1 && (v34 || v192 == 0))
                  continue;
              }
              goto LABEL_562;
            case 0x2B:
              v203 = v26 + 2;
              v204 = v8[v30];
              if ((char)v8[v30] < 0)
              {
                v204 &= 0x7Fu;
                v243 = 7;
                do
                {
                  v244 = v8[v203];
                  v26 = v203 + 1;
                  v204 |= (unint64_t)(v244 & 0x7F) << v243;
                  v243 += 7;
                  ++v203;
                }
                while (v244 < 0);
              }
              else
              {
                v26 += 2;
              }
              v245 = 0x8000000000000000;
              if (v204 != 1)
                v245 = -(uint64_t)(v204 >> 1);
              if ((v204 & 1) != 0)
                v211 = v245;
              else
                v211 = v204 >> 1;
              v246 = *(unsigned __int16 *)(v9 + 24);
              if (v246 != 35 && v246 != 11)
                goto LABEL_562;
              v214 = *(_QWORD *)(v9 + 80);
              goto LABEL_397;
            case 0x2C:
            case 0x2D:
            case 0x2E:
            case 0x2F:
            case 0x30:
              if (v29 - 44 >= *(unsigned __int16 *)(v9 + 56))
                goto LABEL_562;
              v38 = v26 + 2;
              v39 = v8[v30];
              if ((char)v8[v30] < 0)
              {
                v39 &= 0x7Fu;
                v208 = 7;
                do
                {
                  v209 = v8[v38];
                  v26 = v38 + 1;
                  v39 |= (unint64_t)(v209 & 0x7F) << v208;
                  v208 += 7;
                  ++v38;
                }
                while (v209 < 0);
              }
              else
              {
                v26 += 2;
              }
              v210 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40 * (v29 - 44));
              v211 = 0x8000000000000000;
              if (v39 != 1)
                v211 = -(uint64_t)(v39 >> 1);
              if ((v39 & 1) == 0)
                v211 = v39 >> 1;
              v212 = *(unsigned __int16 *)(v210 + 24);
              if (v212 != 35 && v212 != 11)
                goto LABEL_562;
              v214 = *(_QWORD *)(v210 + 80);
LABEL_397:
              v248 = *(_DWORD *)(v214 + 32);
              if (v248 > 0x40)
                v249 = **(_QWORD **)(v214 + 24);
              else
                v249 = (uint64_t)(*(_QWORD *)(v214 + 24) << -(char)v248) >> -(char)v248;
              if (v249 != v211)
                goto LABEL_562;
              continue;
            case 0x31:
              v62 = *(_DWORD *)(v9 + 76);
              goto LABEL_299;
            case 0x32:
              if (*(unsigned __int16 *)(v9 + 56) < 3u)
                goto LABEL_562;
              v62 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 80) + 76);
LABEL_299:
              v26 += 2;
              v68 = v8[v30];
LABEL_300:
              if (v62 != v68)
                goto LABEL_562;
              continue;
            case 0x33:
              v26 += 2;
              v158 = v8[v30];
              v159 = *(unsigned __int8 *)(v9 + 80);
              if (v158 != v159)
              {
                if (v158 != 254)
                  goto LABEL_562;
                v218 = *(_QWORD *)(v9 + 88);
                a1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 344) + 32))(*(_QWORD *)(v10 + 344), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272, 0);
                if (v159 != a1 || !v159 && v218)
                  goto LABEL_562;
                continue;
              }
              if (v158)
                v160 = 1;
              else
                v160 = *(_QWORD *)(v9 + 88) == 0;
              if (v160)
                continue;
              goto LABEL_562;
            case 0x34:
              v151 = v27;
              v152 = v8[v30];
              v153 = v8[v26 + 2];
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 280))(v10))
              {
                v154 = (_QWORD *)operator new();
                v155 = *(_QWORD *)(v10 + 296);
                v154[1] = *(_QWORD *)(v155 + 656);
                v154[2] = v155;
                *(_QWORD *)(v155 + 656) = v154;
                *v154 = &off_1E81990C0;
                v154[3] = &v457;
                v154[4] = &v473;
                v154[5] = &v476;
              }
              else
              {
                v154 = 0;
              }
              a1 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, void **))(*(_QWORD *)v10 + 264))(v10, v457, *((_QWORD *)v473 + 3 * v153 + 2), *((_QWORD *)v473 + 3 * v153), *((_QWORD *)v473 + 3 * v153 + 1), v152, &v473);
              v217 = a1;
              if (v154)
                a1 = (*(uint64_t (**)(_QWORD *))(*v154 + 8))(v154);
              v26 += 3;
              v27 = v151;
              if ((v217 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x35:
              v156 = v26 + 2;
              v157 = v8[v30];
              if ((char)v8[v30] < 0)
              {
                v157 &= 0x7Fu;
                v237 = 7;
                do
                {
                  v238 = v8[v156];
                  v26 = v156 + 1;
                  v157 |= (unint64_t)(v238 & 0x7F) << v237;
                  v237 += 7;
                  ++v156;
                }
                while (v238 < 0);
              }
              else
              {
                v26 += 2;
              }
              if (*(_WORD *)(v9 + 24) != 171)
                goto LABEL_562;
              v239 = *(uint64_t **)(v9 + 32);
              v240 = v239[5];
              v241 = *(unsigned __int16 *)(v240 + 24);
              if (v241 != 35 && v241 != 11)
                goto LABEL_562;
              a1 = sub_1C63727A4(v10, *v239, v239[1], *(_QWORD *)(v240 + 80), v157);
              if ((a1 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x36:
              v50 = v26 + 2;
              v51 = v8[v30];
              if ((char)v8[v30] < 0)
              {
                v51 &= 0x7Fu;
                v231 = 7;
                do
                {
                  v232 = v8[v50];
                  v26 = v50 + 1;
                  v51 |= (unint64_t)(v232 & 0x7F) << v231;
                  v231 += 7;
                  ++v50;
                }
                while (v232 < 0);
              }
              else
              {
                v26 += 2;
              }
              if (*(_WORD *)(v9 + 24) != 172)
                goto LABEL_562;
              v233 = *(uint64_t **)(v9 + 32);
              v234 = v233[5];
              v235 = *(unsigned __int16 *)(v234 + 24);
              if (v235 != 35 && v235 != 11)
                goto LABEL_562;
              a1 = sub_1C63729A4(v10, *v233, v233[1], *(_QWORD *)(v234 + 80), v51);
              if ((a1 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x37:
              a1 = sub_1C5D3D948(v9, 0, (BOOL)a3);
              goto LABEL_82;
            case 0x38:
              a1 = sub_1C5D3DBE0(v9, 0, (BOOL)a3);
LABEL_82:
              ++v26;
              if ((a1 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x39:
              if ((_DWORD)v480 == 2)
                goto LABEL_254;
              v219 = 1;
              do
              {
                v220 = *(_QWORD *)(*((_QWORD *)__src + 2 * v219) + 48);
                if (v220)
                {
                  v221 = 0;
                  do
                  {
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v220 + 40) + 16 * *(unsigned int *)(v220 + 8)) != 1)
                    {
                      if (v221)
                        goto LABEL_562;
                      v221 = 1;
                    }
                    v220 = *(_QWORD *)(v220 + 32);
                  }
                  while (v220);
                }
                ++v219;
              }
              while ((_DWORD)v480 - 1 != (_DWORD)v219);
LABEL_254:
              if (!(*(unsigned int (**)(uint64_t, uint64_t, void *, _QWORD, unint64_t))(*(_QWORD *)v10 + 216))(v10, v9, v28, *((_QWORD *)__src + 2 * v480 - 4), v457)|| !*(_DWORD *)(v10 + 328))
              {
                goto LABEL_562;
              }
              v180 = v457;
              v181 = *(unsigned __int16 *)(v457 + 58);
              v182 = 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(v457 + 40) + 16 * (v181 - 1)) == 172)
              {
                do
                {
                  v183 = *(_QWORD *)(v180 + 48);
                  if (!v183)
                    break;
                  v184 = v181 - 1;
                  while (*(_DWORD *)(v183 + 8) != v184)
                  {
                    v183 = *(_QWORD *)(v183 + 32);
                    if (!v183)
                      goto LABEL_264;
                  }
                  v185 = *(_QWORD *)(v183 + 16);
                  if (!v185)
                    break;
                  v182 = 0;
                  v181 = *(unsigned __int16 *)(v185 + 58);
                  v180 = v185;
                }
                while (*(unsigned __int8 *)(*(_QWORD *)(v185 + 40) + 16 * (v181 - 1)) == 172);
              }
LABEL_264:
              v186 = *((_QWORD *)__src + 2 * v480 - 4);
              v485[0] = v488;
              v485[1] = v488;
              v486 = 16;
              v487 = 0;
              v482 = v484;
              v483 = 0x1000000000;
              v187 = *(_QWORD *)(v9 + 48);
              if (v187)
              {
                while (*(_QWORD *)(v187 + 16) == v186)
                {
                  v187 = *(_QWORD *)(v187 + 32);
                  if (!v187)
                  {
                    v188 = 1;
                    goto LABEL_485;
                  }
                }
              }
              v445 = v180;
              v450 = v27;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)v485, v186);
              if (*(_WORD *)(v186 + 56))
              {
                v293 = *(_QWORD *)(v186 + 32);
                v294 = v293 + 40 * *(unsigned __int16 *)(v186 + 56);
                do
                {
                  v295 = *(_QWORD *)v293;
                  if (*(_QWORD *)v293 != v9
                    && (v182 & (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v293 + 40)
                                                          + 16 * *(unsigned int *)(v293 + 8)) == 1)) == 0)
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)v485, *(_QWORD *)v293);
                    if (v296)
                    {
                      v297 = v483;
                      if (v483 >= (unint64_t)HIDWORD(v483))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v482, (uint64_t)v484, v483 + 1, 8);
                        v297 = v483;
                      }
                      *((_QWORD *)v482 + v297) = v295;
                      LODWORD(v483) = v483 + 1;
                    }
                  }
                  v293 += 40;
                }
                while (v293 != v294);
              }
              v27 = v450;
              if (v445 != v186 && *(_WORD *)(v445 + 56))
              {
                v298 = *(_QWORD *)(v445 + 32);
                v299 = v298 + 40 * *(unsigned __int16 *)(v445 + 56);
                do
                {
                  v300 = *(_QWORD *)v298;
                  if (*(_QWORD *)v298 != v9
                    && (v182 & (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v298 + 40)
                                                          + 16 * *(unsigned int *)(v298 + 8)) == 1)) == 0)
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)v485, *(_QWORD *)v298);
                    if (v301)
                    {
                      v302 = v483;
                      if (v483 >= (unint64_t)HIDWORD(v483))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v482, (uint64_t)v484, v483 + 1, 8);
                        v302 = v483;
                      }
                      *((_QWORD *)v482 + v302) = v300;
                      LODWORD(v483) = v483 + 1;
                    }
                  }
                  v298 += 40;
                }
                while (v298 != v299);
              }
              v188 = sub_1C5CB0A7C(v9, (uint64_t)v485, (unsigned int *)&v482, 0, 1) ^ 1;
              if (v482 != v484)
                free(v482);
LABEL_485:
              a1 = (uint64_t)v485[1];
              if (v485[1] != v485[0])
                free(v485[1]);
              v26 = v30;
              if ((v188 & 1) == 0)
                goto LABEL_562;
              continue;
            case 0x3A:
            case 0x3B:
              v290 = v26 + 3;
              v291 = v8[v26 + 2];
              v292 = v27;
              if ((char)v8[v26 + 2] < 0)
              {
                v291 &= 0x7Fu;
                v328 = 7;
                do
                {
                  v329 = v8[v290];
                  v26 = v290 + 1;
                  v291 |= (unint64_t)(v329 & 0x7F) << v328;
                  v328 += 7;
                  ++v290;
                }
                while (v329 < 0);
              }
              else
              {
                v26 += 3;
              }
              v330 = (llvm *)v8[v30];
              v331 = 0x8000000000000000;
              if (v291 != 1)
                v331 = -(uint64_t)(v291 >> 1);
              if ((v291 & 1) == 0)
                v331 = v291 >> 1;
              if (v29 == 58)
                v332 = v331;
              else
                v332 = v291;
              v333 = *(_QWORD *)(v10 + 296);
              v334 = v457;
              v335 = *(void **)(v457 + 64);
              v482 = v335;
              if (v335)
              {
                v336 = v330;
                llvm::MetadataTracking::track((uint64_t)&v482, (unsigned __int8 *)v335, 2);
                v330 = v336;
              }
              LODWORD(v483) = *(_DWORD *)(v334 + 60);
              v485[0] = sub_1C6366AB4(v333, v332, (const llvm::APInt *)&v482, v330, 0, 1, 0);
              v485[1] = v337;
              v486 = 0;
              a1 = sub_1C4DC1E54((uint64_t)&v473, (unint64_t)v485);
              v338 = (char *)v473 + 24 * v474;
              v339 = *(_OWORD *)a1;
              *((_QWORD *)v338 + 2) = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v338 = v339;
              LODWORD(v474) = v474 + 1;
              if (v482)
                a1 = llvm::MetadataTracking::untrack((uint64_t)&v482, (unsigned __int8 *)v482);
              goto LABEL_589;
            case 0x3C:
              v64 = v26 + 2;
              v65 = (llvm *)v8[v30];
              v26 += 3;
              v66 = v8[v64];
              goto LABEL_305;
            case 0x3D:
              v65 = (llvm *)v8[v30];
              v205 = v8[v26 + 2];
              v206 = v26 + 3;
              v26 += 4;
              v66 = v205 | (v8[v206] << 8);
LABEL_305:
              v485[0] = (void *)sub_1C5D428B0(*(_QWORD *)(v10 + 296), v66, v65, 0);
              v485[1] = v207;
              v486 = 0;
              a1 = sub_1C4DC1E54((uint64_t)&v473, (unint64_t)v485);
              v55 = (char *)v473 + 24 * v474;
              goto LABEL_409;
            case 0x3E:
              v161 = v8[v30];
              v162 = (unsigned int *)((char *)v473 + 24 * v161);
              v163 = *(uint64_t **)v162;
              v165 = v162[2];
              v164 = v162[3];
              v166 = *(unsigned __int16 *)(*(_QWORD *)v162 + 24);
              if (v166 == 12)
              {
                v443 = v164;
                v447 = v27;
                v250 = v163[10];
                v251 = *(_QWORD *)(v10 + 296);
                v252 = v457;
                v253 = *(void **)(v457 + 64);
                v485[0] = v253;
                if (v253)
                {
                  v438 = v251;
                  llvm::MetadataTracking::track((uint64_t)v485, (unsigned __int8 *)v253, 2);
                  v251 = v438;
                }
                LODWORD(v485[1]) = *(_DWORD *)(v252 + 60);
                v171 = sub_1C6366D64(v251, v250, (const llvm::APInt *)v485, *(llvm **)(v163[5] + 16 * v165), *(_QWORD *)(v163[5] + 16 * v165 + 8), 1);
              }
              else
              {
                if (v166 != 11)
                  goto LABEL_408;
                v443 = v164;
                v447 = v27;
                v167 = v163[10];
                v168 = *(_QWORD *)(v10 + 296);
                v169 = v457;
                v170 = *(void **)(v457 + 64);
                v485[0] = v170;
                if (v170)
                {
                  v437 = v168;
                  llvm::MetadataTracking::track((uint64_t)v485, (unsigned __int8 *)v170, 2);
                  v168 = v437;
                }
                LODWORD(v485[1]) = *(_DWORD *)(v169 + 60);
                v171 = sub_1C5D3FAF8(v168, v167, (const llvm::APInt *)v485, *(llvm **)(v163[5] + 16 * v165), *(_QWORD *)(v163[5] + 16 * v165 + 8), 1, 0);
              }
              v163 = v171;
              v254 = v172;
              if (v485[0])
                llvm::MetadataTracking::untrack((uint64_t)v485, (unsigned __int8 *)v485[0]);
              LODWORD(v165) = v254;
              v27 = v447;
              v164 = v443;
LABEL_408:
              v26 += 2;
              v485[0] = v163;
              v485[1] = (void *)__PAIR64__(v164, v165);
              v486 = *((_QWORD *)v473 + 3 * v161 + 2);
              a1 = sub_1C4DC1E54((uint64_t)&v473, (unint64_t)v485);
              v55 = (char *)v473 + 24 * v474;
LABEL_409:
              v255 = *(_OWORD *)a1;
              *((_QWORD *)v55 + 2) = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v55 = v255;
              LODWORD(v474) = v474 + 1;
              continue;
            case 0x3F:
              v26 += 2;
              v194 = v8[v30];
              v195 = v468;
              if (!v194)
                goto LABEL_362;
              v196 = 0;
              while (1)
              {
                v197 = v8[v26];
                v198 = *((_QWORD *)v473 + 3 * v8[v26]);
                if (v195 >= HIDWORD(v468))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v467, (uint64_t)v469, v195 + 1, 8);
                  v195 = v468;
                }
                *((_QWORD *)v467 + v195) = v198;
                v195 = v468 + 1;
                LODWORD(v468) = v195;
                if (*((_QWORD *)v467 + v195 - 1) != v457)
                {
                  v199 = (char *)v473 + 24 * v197;
                  v200 = *(_QWORD *)(*(_QWORD *)v199 + 48);
                  if (!v200)
                    goto LABEL_56;
                  v201 = v199[2];
                  v202 = 1;
                  do
                  {
                    if (*(_DWORD *)(v200 + 8) == v201)
                    {
                      if (!v202)
                        goto LABEL_56;
                      --v202;
                    }
                    v200 = *(_QWORD *)(v200 + 32);
                  }
                  while (v200);
                  if (v202)
                    goto LABEL_56;
                }
                ++v26;
                if (++v196 == v194)
                {
LABEL_362:
                  if (!v195)
                    goto LABEL_562;
                  a1 = (uint64_t)sub_1C5D73D50((unsigned int *)&v467, *(_QWORD *)(v10 + 296));
                  v455 = v230;
                  goto LABEL_58;
                }
              }
            case 0x40:
            case 0x41:
            case 0x42:
              v42 = v29 - 64;
              v43 = *((_QWORD *)v473 + 3 * v42);
              v44 = v468;
              if (v468 >= (unint64_t)HIDWORD(v468))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v467, (uint64_t)v469, v468 + 1, 8);
                v44 = v468;
              }
              *((_QWORD *)v467 + v44) = v43;
              LODWORD(v468) = v468 + 1;
              if (*((_QWORD *)v467 + v468 - 1) == v457)
                goto LABEL_57;
              v45 = (char *)v473 + 24 * v42;
              v46 = *(_QWORD *)(*(_QWORD *)v45 + 48);
              if (!v46)
                goto LABEL_56;
              v47 = v45[2];
              v48 = 1;
              do
              {
                if (*(_DWORD *)(v46 + 8) == v47)
                {
                  if (!v48)
                    goto LABEL_56;
                  --v48;
                }
                v46 = *(_QWORD *)(v46 + 32);
              }
              while (v46);
              if (v48)
              {
LABEL_56:
                LODWORD(v468) = 0;
LABEL_562:
                v352 = v477;
                while (1)
                {
                  if (!v352)
                    sub_1C5D74164((_QWORD **)v10, v457);
                  v353 = (char *)v476 + 136 * v352;
                  sub_1C612E83C((uint64_t)&v473, *((unsigned int *)v353 - 12));
                  LODWORD(v480) = 0;
                  a1 = (uint64_t)sub_1C612E234((unsigned int *)&__src, *((_BYTE **)v353 - 16), (_BYTE *)(*((_QWORD *)v353 - 16) + 16 * *((unsigned int *)v353 - 30)));
                  v354 = (char *)__src + 16 * v480;
                  v9 = *((_QWORD *)v354 - 2);
                  v28 = (void *)*((unsigned int *)v354 - 2);
                  v355 = *((unsigned int *)v353 - 11);
                  if ((_DWORD)v471 != (_DWORD)v355)
                    sub_1C6154790((uint64_t)&v470, v355);
                  v356 = *((unsigned int *)v353 - 34);
                  v454 = *((_QWORD *)v353 - 5);
                  v455 = *((unsigned int *)v353 - 8);
                  v27 = *((_QWORD *)v353 - 3);
                  v453 = *((unsigned int *)v353 - 4);
                  if (!*(v353 - 8))
                    LODWORD(v468) = 0;
                  v26 = v356 + 1;
                  v357 = (char)v8[v356];
                  LODWORD(v356) = v8[v356];
                  if (v357 < 0)
                  {
                    v356 &= 0x7Fu;
                    v358 = 7;
                    do
                    {
                      v359 = v8[v26++];
                      v356 |= (unint64_t)(v359 & 0x7F) << v358;
                      v358 += 7;
                    }
                    while (v359 < 0);
                    if ((_DWORD)v356)
                    {
LABEL_576:
                      *((_DWORD *)v353 - 34) = v356 + v26;
                      goto LABEL_27;
                    }
                  }
                  else if ((_DWORD)v356)
                  {
                    goto LABEL_576;
                  }
                  v352 = v477 - 1;
                  LODWORD(v477) = v352;
                  v360 = (char *)v476 + 136 * v352;
                  v361 = (char *)*((_QWORD *)v360 + 1);
                  if (v361 != v360 + 24)
                  {
                    free(v361);
                    v352 = v477;
                  }
                }
              }
LABEL_57:
              a1 = (uint64_t)sub_1C5D73D50((unsigned int *)&v467, *(_QWORD *)(v10 + 296));
              v455 = v49;
              ++v26;
LABEL_58:
              v454 = a1;
              if (!a1)
                goto LABEL_562;
              continue;
            case 0x43:
            case 0x44:
              v288 = v26 + 3;
              v289 = v8[v26 + 2];
              v449 = v27;
              if (v29 == 68)
              {
                v26 += 4;
                v289 |= v8[v288] << 8;
              }
              else
              {
                v26 += 3;
              }
              v319 = v8[v30];
              v320 = *(_QWORD *)(v10 + 296);
              if (v454)
                v321 = v454;
              else
                v321 = v320 + 112;
              v322 = v457;
              if (v454)
                v323 = v455;
              else
                v323 = 0;
              v324 = *(void **)(v457 + 64);
              v485[0] = v324;
              if (v324)
              {
                v456 = v323;
                v325 = v289;
                llvm::MetadataTracking::track((uint64_t)v485, (unsigned __int8 *)v324, 2);
                v289 = v325;
                v323 = v456;
              }
              LODWORD(v485[1]) = *(_DWORD *)(v322 + 60);
              a1 = (uint64_t)sub_1C6132BA0(v320, v321, v323, (const llvm::APInt *)v485, v289, *((_QWORD *)v473 + 3 * v319), *((_QWORD *)v473 + 3 * v319 + 1), a8, v449, v453);
              v27 = a1;
              v327 = v326;
              if (v485[0])
                a1 = llvm::MetadataTracking::untrack((uint64_t)v485, (unsigned __int8 *)v485[0]);
              v454 = v27;
              v455 = v327;
              v453 = 1;
              continue;
            case 0x45:
              v52 = v26 + 2;
              v26 += 3;
              v53 = (char *)v473 + 24 * v8[v52];
              v485[0] = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 272))(v10, *v53, v53[1], v8[v30]);
              v485[1] = v54;
              v486 = 0;
              a1 = sub_1C4DC1E54((uint64_t)&v473, (unint64_t)v485);
              v55 = (char *)v473 + 24 * v474;
              goto LABEL_409;
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
              v448 = v27;
              v222 = v26 + 4;
              v223 = v29 - 75;
              if ((v29 - 75) > 2)
              {
                v223 = v29 - 71;
                if ((v29 - 71) > 2)
                {
                  v223 = v8[v222];
                  v222 = v26 + 5;
                }
              }
              v435 = v8[v30];
              v224 = v26 + 3;
              v225 = v8[v26 + 2];
              v226 = v8[v224];
              v482 = v484;
              v483 = 0x400000000;
              for (j = 0; v223; --v223)
              {
                v228 = v8[v222];
                if (v228 == 254)
                {
                  LOBYTE(v228) = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 344) + 32))(*(_QWORD *)(v10 + 344), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v10 + 296) + 40) + 40) + 272, 0);
                  j = v483;
                }
                if (j >= HIDWORD(v483))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v482, (uint64_t)v484, j + 1, 16);
                  j = v483;
                }
                v229 = (char *)v482 + 16 * j;
                *v229 = v228;
                v229[1] = 0;
                j = v483 + 1;
                LODWORD(v483) = v483 + 1;
                ++v222;
              }
              if ((v226 & 1) != 0)
              {
                if (j >= HIDWORD(v483))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v482, (uint64_t)v484, j + 1, 16);
                  j = v483;
                }
                *((_OWORD *)v482 + j) = xmmword_1C64169E0;
                j = v483 + 1;
                LODWORD(v483) = v483 + 1;
              }
              if ((v226 & 4) != 0)
              {
                if (j >= HIDWORD(v483))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v482, (uint64_t)v484, j + 1, 16);
                  j = v483;
                }
                *((_OWORD *)v482 + j) = xmmword_1C866D130;
                j = v483 + 1;
                LODWORD(v483) = v483 + 1;
              }
              v431 = v225;
              if (j == 2)
              {
                v265 = sub_1C636A8B4(*(_QWORD *)(v10 + 296), *(_QWORD *)v482, *((_QWORD *)v482 + 1), *((_QWORD *)v482 + 2), *((_QWORD *)v482 + 3));
              }
              else
              {
                if (j == 1)
                {
                  v428 = 1;
                  v429 = sub_1C636D7B0(*(llvm **)v482, *((_QWORD *)v482 + 1));
                  goto LABEL_421;
                }
                v265 = sub_1C636AB20(*(_QWORD *)(v10 + 296), (uint64_t *)v482, j);
              }
              v428 = v266;
              v429 = v265;
LABEL_421:
              v267 = v8[v222];
              v26 = v222 + 1;
              v485[0] = &v486;
              v485[1] = (void *)0x800000000;
              v268 = 0;
              if (v267)
              {
                for (k = 0; k != v267; ++k)
                {
                  v270 = v26 + 1;
                  LODWORD(v271) = v8[v26];
                  if ((char)v8[v26] < 0)
                  {
                    v271 &= 0x7Fu;
                    v272 = 7;
                    do
                    {
                      v273 = v8[v270];
                      v26 = v270 + 1;
                      v271 |= (unint64_t)(v273 & 0x7F) << v272;
                      v272 += 7;
                      ++v270;
                    }
                    while (v273 < 0);
                  }
                  else
                  {
                    ++v26;
                  }
                  v274 = *(_OWORD *)((char *)v473 + 24 * v271);
                  if (v268 >= HIDWORD(v485[1]))
                  {
                    v439 = *(_OWORD *)((char *)v473 + 24 * v271);
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v485, (uint64_t)&v486, v268 + 1, 16);
                    v274 = v439;
                    v268 = v485[1];
                  }
                  *((_OWORD *)v485[0] + v268) = v274;
                  v268 = ++LODWORD(v485[1]);
                }
              }
              v444 = v226;
              v440 = v226 & 1;
              if ((v226 & 0x70) != 0)
              {
                v275 = (v226 & 1) + ((v226 >> 4) & 7) - 1;
                for (m = *(unsigned __int16 *)(v457 + 56); m != v275; ++v275)
                {
                  v278 = (_QWORD *)(*(_QWORD *)(v457 + 32) + 40 * v275);
                  v280 = *v278;
                  v279 = v278[1];
                  if (*(unsigned __int8 *)(*(_QWORD *)(*v278 + 40) + 16 * v279) == 172)
                    break;
                  if (v268 >= HIDWORD(v485[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v485, (uint64_t)&v486, v268 + 1, 16);
                    v268 = v485[1];
                  }
                  v281 = (char *)v485[0] + 16 * v268;
                  *v281 = v280;
                  v281[1] = v279;
                  v268 = ++LODWORD(v485[1]);
                }
              }
              if (!v440)
              {
                v27 = v448;
                v277 = v444;
                if ((v444 & 2) == 0)
                  goto LABEL_447;
LABEL_443:
                if (v27)
                {
                  if (v268 >= HIDWORD(v485[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v485, (uint64_t)&v486, v268 + 1, 16);
                    v268 = v485[1];
                  }
                  v283 = (uint64_t *)((char *)v485[0] + 16 * v268);
                  *v283 = v27;
                  v283[1] = v453;
                  ++LODWORD(v485[1]);
                }
                goto LABEL_447;
              }
              v27 = v448;
              v277 = v444;
              if (v268 >= HIDWORD(v485[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v485, (uint64_t)&v486, v268 + 1, 16);
                v268 = v485[1];
              }
              v282 = (uint64_t *)((char *)v485[0] + 16 * v268);
              *v282 = v454;
              v282[1] = v455;
              v268 = ++LODWORD(v485[1]);
              if ((v444 & 2) != 0)
                goto LABEL_443;
LABEL_447:
              if (!(_DWORD)v468)
              {
                v434 = 1;
                goto LABEL_491;
              }
              v284 = (uint64_t *)v467;
              v285 = 8 * v468;
              break;
            case 0x4E:
              v403 = v8[v30];
              if (v403)
              {
                v404 = 0;
                v405 = v26 + 2;
                do
                {
                  v406 = v405 + 1;
                  LODWORD(v407) = v8[v405];
                  if ((char)v8[v405] < 0)
                  {
                    v407 &= 0x7Fu;
                    v408 = 7;
                    do
                    {
                      v409 = v8[v406];
                      v405 = v406 + 1;
                      v407 |= (unint64_t)(v409 & 0x7F) << v408;
                      v408 += 7;
                      ++v406;
                    }
                    while (v409 < 0);
                  }
                  else
                  {
                    ++v405;
                  }
                  v410 = (uint64_t *)((char *)v473 + 24 * v407);
                  v411 = *v410;
                  sub_1C5D6146C(*(_QWORD *)(v10 + 296), v457, v404, *v410, v410[1]);
                  sub_1C63725DC(v411);
                  ++v404;
                }
                while (v404 != v403);
              }
              sub_1C5D70D6C(v10, v457, v454, v455, (uint64_t)&v467, 0);
              v412 = v457;
              if (*(unsigned __int8 *)(*(_QWORD *)(v457 + 40)
                                      + 16 * (*(unsigned __int16 *)(v457 + 58) - 1)) == 172
                && v27 != 0)
              {
                sub_1C5D6146C(*(_QWORD *)(v10 + 296), v457, *(unsigned __int16 *)(v457 + 58) - 1, v27, v453);
                sub_1C63725DC(v27);
                v412 = v457;
              }
              sub_1C6365540(*(_QWORD **)(v10 + 296), v412);
              goto LABEL_686;
            case 0x4F:
              v292 = v27;
              v342 = v8[v30];
              v343 = v8[v26 + 2];
              v344 = llvm::dbgs((llvm *)a1);
              v345 = v344;
              v346 = *((_QWORD *)v344 + 4);
              if ((unint64_t)(*((_QWORD *)v344 + 3) - v346) > 8)
              {
                *(_BYTE *)(v346 + 8) = 32;
                *(_QWORD *)v346 = *(_QWORD *)"COVERED: ";
                *((_QWORD *)v344 + 4) += 9;
              }
              else
              {
                llvm::raw_ostream::write(v344, "COVERED: ", 9uLL);
              }
              v347 = v342 | (v343 << 8);
              v349 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 224))(v10, v347);
              v350 = v348;
              v351 = (llvm::raw_ostream *)*((_QWORD *)v345 + 4);
              if (v348 <= *((_QWORD *)v345 + 3) - (_QWORD)v351)
              {
                if (v348)
                {
                  memcpy(v351, v349, v348);
                  v351 = (llvm::raw_ostream *)(*((_QWORD *)v345 + 4) + v350);
                  *((_QWORD *)v345 + 4) = v351;
                }
              }
              else
              {
                llvm::raw_ostream::write(v345, (const char *)v349, v348);
                v351 = (llvm::raw_ostream *)*((_QWORD *)v345 + 4);
              }
              if (*((llvm::raw_ostream **)v345 + 3) == v351)
              {
                v351 = llvm::raw_ostream::write(v345, "\n", 1uLL);
              }
              else
              {
                *(_BYTE *)v351 = 10;
                ++*((_QWORD *)v345 + 4);
              }
              v362 = llvm::dbgs(v351);
              v363 = v362;
              v364 = *((_QWORD *)v362 + 4);
              if ((unint64_t)(*((_QWORD *)v362 + 3) - v364) > 9)
              {
                *(_WORD *)(v364 + 8) = 8250;
                *(_QWORD *)v364 = *(_QWORD *)"INCLUDED: ";
                *((_QWORD *)v362 + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(v362, "INCLUDED: ", 0xAuLL);
              }
              a3 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, v347);
              v366 = v365;
              a1 = *((_QWORD *)v363 + 4);
              if (v365 <= *((_QWORD *)v363 + 3) - a1)
              {
                if (v365)
                {
                  memcpy((void *)a1, a3, v365);
                  a1 = *((_QWORD *)v363 + 4) + v366;
                  *((_QWORD *)v363 + 4) = a1;
                }
              }
              else
              {
                llvm::raw_ostream::write(v363, a3, v365);
                a1 = *((_QWORD *)v363 + 4);
              }
              v26 += 3;
              if (*((_QWORD *)v363 + 3) == a1)
              {
                a1 = (uint64_t)llvm::raw_ostream::write(v363, "\n", 1uLL);
              }
              else
              {
                *(_BYTE *)a1 = 10;
                ++*((_QWORD *)v363 + 4);
              }
LABEL_589:
              v27 = v292;
              continue;
            default:
              goto LABEL_562;
          }
          break;
        }
        while (1)
        {
          v286 = *v284;
          if (*(__int16 *)(*v284 + 24) < 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 336) + 8)
                           + 48 * (*(unsigned __int16 *)(*v284 + 24) ^ 0xFFFFu)
                           + 10) & 0x20) == 0)
              goto LABEL_455;
          }
          else
          {
            v287 = *(unsigned __int16 *)(*v284 + 24);
            if (v287 < 0x186)
            {
              if (!sub_1C6141934(*v284))
                goto LABEL_455;
            }
            else if (v287 <= 0x315)
            {
              goto LABEL_455;
            }
          }
          if ((*(_WORD *)(v286 + 72) & 0x800) == 0)
          {
            v434 = 0;
LABEL_490:
            v27 = v448;
LABEL_491:
            v436 = v435 | (v431 << 8);
            v303 = v29 - 78;
            if ((v29 - 78) <= 0xFFFFFFFB)
            {
              v304 = *(_QWORD *)(v10 + 296);
              v305 = v457;
              v306 = *(void **)(v457 + 64);
              v461 = v306;
              if (v306)
                llvm::MetadataTracking::track((uint64_t)&v461, (unsigned __int8 *)v306, 2);
              LODWORD(v462) = *(_DWORD *)(v305 + 60);
              v307 = (unsigned __int16 *)sub_1C5D61678(v304, v436, (uint64_t)&v461, v429, v428, (uint64_t *)v485[0], LODWORD(v485[1]));
              if (v461)
                llvm::MetadataTracking::untrack((uint64_t)&v461, (unsigned __int8 *)v461);
              v308 = v483;
              v277 = v444;
              if ((_DWORD)v483)
              {
                v309 = v303;
                v310 = 0;
                v311 = 0;
                do
                {
                  v312 = *((unsigned __int8 *)v482 + v310);
                  if (v312 == 1)
                    break;
                  if (v312 == 172)
                    break;
                  v461 = v307;
                  LODWORD(v462) = v311;
                  v463 = 0;
                  v313 = sub_1C4DC1E54((uint64_t)&v473, (unint64_t)&v461);
                  v314 = (char *)v473 + 24 * v474;
                  v315 = *(_OWORD *)v313;
                  *((_QWORD *)v314 + 2) = *(_QWORD *)(v313 + 16);
                  *(_OWORD *)v314 = v315;
                  LODWORD(v474) = v474 + 1;
                  ++v311;
                  v310 += 16;
                }
                while (v308 != v311);
                v27 = v448;
                v303 = v309;
                v277 = v444;
              }
              if (v434)
              {
LABEL_503:
                if ((__int16)v307[12] < 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 336) + 8) + 48 * (v307[12] ^ 0xFFFFu) + 10) & 0x20) == 0)
                    goto LABEL_509;
                  goto LABEL_508;
                }
                v316 = v307[12];
                if (v316 >= 0x186)
                {
                  if (v316 <= 0x315)
                    goto LABEL_509;
LABEL_508:
                  v307[36] |= 0x801u;
                  goto LABEL_509;
                }
                if (sub_1C6141934((uint64_t)v307))
                  goto LABEL_508;
              }
LABEL_509:
              if ((v277 & 4) != 0)
              {
                v453 = (v483 - 1);
                if (v440)
                  v317 = (uint64_t)v307;
                else
                  v317 = v454;
                v318 = v455;
                if (v440)
                  v318 = (v483 - 2);
                v454 = v317;
                v455 = v318;
                v27 = (uint64_t)v307;
              }
              else if (v440)
              {
                v454 = (uint64_t)v307;
                v455 = (v483 - 1);
              }
              if ((v277 & 8) == 0)
              {
LABEL_519:
                if (v303 >= 0xFFFFFFFC)
                  sub_1C5D70D6C(v10, (uint64_t)v307, v454, v455, (uint64_t)&v467, 1);
                if (v485[0] != &v486)
                  free(v485[0]);
                a1 = (uint64_t)v482;
                if (v482 != v484)
                  free(v482);
                if (v303 >= 0xFFFFFFFC)
                {
LABEL_686:
                  if (v467 != v469)
                    free(v467);
                  if (v470 != v472)
                    free(v470);
                  if (v473 != v475)
                    free(v473);
                  v414 = (char *)v476;
                  if ((_DWORD)v477)
                  {
                    v415 = 136 * v477;
                    do
                    {
                      v416 = *(char **)&v414[v415 - 128];
                      if (&v414[v415 - 112] != v416)
                        free(v416);
                      v415 -= 136;
                    }
                    while (v415);
                    v414 = (char *)v476;
                  }
                  if (v414 != v478)
                    free(v414);
                  if (__src != v481)
                    free(__src);
                  return;
                }
                goto LABEL_27;
              }
              v375 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 336) + 8) + 48 * v436 + 8);
              v461 = &v463;
              v462 = 0x400000000;
              if (!(_DWORD)v471)
              {
                v376 = 0;
                v377 = &v463;
LABEL_610:
                sub_1C636E10C(*(void **)(v10 + 296), (uint64_t)v307, v377, v376);
                if (v461 != &v463)
                  free(v461);
                goto LABEL_519;
              }
              v433 = v303;
              v451 = v27;
              v376 = 0;
              v379 = (char *)v470;
              v380 = 8 * v471;
              while (2)
              {
                v381 = *(_QWORD *)v379;
                v382 = *(_WORD *)(*(_QWORD *)v379 + 32);
                if ((v382 & 1) != 0)
                {
                  if ((v375 & 0x80000) == 0)
                    goto LABEL_608;
                }
                else if ((v382 & 2) != 0 && (v375 & 0x100000) == 0)
                {
                  goto LABEL_608;
                }
                if (v376 >= HIDWORD(v462))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v461, (uint64_t)&v463, v376 + 1, 8);
                  v376 = v462;
                }
                *((_QWORD *)v461 + v376) = v381;
                v376 = v462 + 1;
                LODWORD(v462) = v462 + 1;
LABEL_608:
                v379 += 8;
                v380 -= 8;
                if (!v380)
                {
                  v377 = v461;
                  v27 = v451;
                  v303 = v433;
                  goto LABEL_610;
                }
                continue;
              }
            }
            v432 = v29 - 78;
            v367 = *(_QWORD *)(v10 + 296);
            v458 = &off_1E81991F8;
            *(_QWORD *)&v459 = v10;
            *((_QWORD *)&v459 + 1) = &v467;
            v460 = &v458;
            v368 = *(_QWORD *)(v367 + 656);
            *(_QWORD *)(v367 + 656) = &v461;
            v461 = &off_1E8198C00;
            v462 = v368;
            v466 = &v464;
            v463 = v367;
            v464 = &off_1E81991F8;
            v465 = v459;
            v369 = v457;
            v370 = *(unsigned __int16 *)(v457 + 58);
            v371 = v370 - 1;
            v372 = *(_QWORD *)(v457 + 40);
            v373 = *(unsigned __int8 *)(v372 + 16 * (v370 - 1));
            if (v373 == 172)
            {
              if (v370 == 1)
              {
                v374 = -1;
              }
              else
              {
                v383 = v370 - 2;
                if (*(_BYTE *)(v372 + 16 * v383) == 1)
                  v374 = v383;
                else
                  v374 = -1;
              }
              v427 = v374;
            }
            else
            {
              if (v373 == 1)
                v378 = v370 - 1;
              else
                v378 = -1;
              v427 = v378;
              v371 = -1;
            }
            v384 = sub_1C5D60DE8(v367, v457, ~(_WORD)v436, v429, v428, (uint64_t *)v485[0], LODWORD(v485[1]));
            v307 = (unsigned __int16 *)v384;
            if (v384 == (unsigned __int8 **)v369)
              *(_DWORD *)(v369 + 28) = -1;
            v430 = v369;
            v385 = *((unsigned __int16 *)v384 + 29);
            if ((v277 & 4) != 0 && v371 != -1 && v371 != v385 - 1)
            {
              sub_1C5D6146C(*(_QWORD *)(v10 + 296), v430, v371, (uint64_t)v384, v385 - 1);
              sub_1C63725DC((uint64_t)v307);
            }
            if (v440 && v427 != -1)
            {
              v386 = (v277 & 4) != 0 ? -2 : -1;
              if (v427 != v386 + v385)
              {
                sub_1C5D6146C(*(_QWORD *)(v10 + 296), v430, v427, (uint64_t)v307, v386 + v385);
                sub_1C63725DC((uint64_t)v307);
              }
            }
            v303 = v432;
            if (v307 == (unsigned __int16 *)v430)
            {
              sub_1C63725DC(v430);
            }
            else
            {
              sub_1C636595C(*(_QWORD *)(v10 + 296), v430, (uint64_t)v307);
              sub_1C63725DC((uint64_t)v307);
              sub_1C6365540(*(_QWORD **)(v10 + 296), v430);
            }
            v461 = &off_1E8198C00;
            v387 = v466;
            if (v466 == &v464)
            {
              v388 = 4;
              v387 = &v464;
LABEL_638:
              (*v387)[v388]();
            }
            else if (v466)
            {
              v388 = 5;
              goto LABEL_638;
            }
            *(_QWORD *)(v463 + 656) = v462;
            if (v434)
              goto LABEL_503;
            goto LABEL_509;
          }
LABEL_455:
          ++v284;
          v285 -= 8;
          if (!v285)
          {
            v434 = 1;
            goto LABEL_490;
          }
        }
      }
      v417 = *(_QWORD **)(a1 + 296);
      v426 = *(uint64_t **)(a2 + 32);
      v425 = *(_QWORD *)(a2 + 40);
      v420 = *(llvm **)v425;
      v421 = *(_QWORD *)(v425 + 8);
      v422 = *v426;
      v423 = v426[1];
      v424 = 24;
LABEL_709:
      sub_1C636E24C(v417, a2, v424, v420, v421, v422, v423);
      return;
  }
}

uint64_t *sub_1C5D73D50(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  void (**v20)(void);
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[128];
  __int128 v36;
  _QWORD v37[3];
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[48];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[9];

  v44[8] = *MEMORY[0x1E0C80C00];
  v31 = v35;
  v32 = v35;
  v33 = 16;
  v34 = 0;
  v42 = v44;
  v43 = 0x800000000;
  v39 = v41;
  v40 = 0x300000000;
  v3 = a1[2];
  if ((_DWORD)v3 == 1)
  {
    v4 = **(uint64_t ***)(**(_QWORD **)a1 + 32);
    goto LABEL_35;
  }
  v6 = operator new(0x20uLL);
  *v6 = &off_1E81990F8;
  v6[1] = &v31;
  v6[2] = v37;
  v6[3] = &v39;
  v38 = v6;
  if ((_DWORD)v3)
  {
    v7 = *(uint64_t **)a1;
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      v10 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
        v10 = v43;
      }
      v42[v10] = v9;
      LODWORD(v43) = v43 + 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v31, v9);
      ++v7;
      v8 -= 8;
    }
    while (v8);
    while ((_DWORD)v43)
    {
      v11 = v42[v43 - 1];
      LODWORD(v43) = v43 - 1;
      v36 = *(_OWORD *)*(_QWORD *)(v11 + 32);
      if (!v38)
        sub_1C485C2F0();
      (*(void (**)(_QWORD *, __int128 *))(*v38 + 48))(v38, &v36);
    }
  }
  if (!(_DWORD)v40)
  {
    v4 = (uint64_t *)(a2 + 112);
    goto LABEL_28;
  }
  if (v32 == v31)
    goto LABEL_14;
  if (v33 < 0x21 || 4 * (HIDWORD(v33) - v34) >= v33)
  {
    memset(v32, 255, 8 * v33);
LABEL_14:
    HIDWORD(v33) = 0;
    v34 = 0;
    goto LABEL_15;
  }
  free(v32);
  v27 = 1 << (33 - __clz(HIDWORD(v33) - v34 - 1));
  v28 = (HIDWORD(v33) - v34) > 0x10;
  HIDWORD(v33) = 0;
  v34 = 0;
  if (v28)
    v29 = v27;
  else
    v29 = 32;
  LODWORD(v33) = v29;
  v30 = malloc_type_malloc(8 * v29, 0x4065EBACuLL);
  if (!v30)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v32 = v30;
  memset(v30, 255, 8 * v33);
LABEL_15:
  if ((_DWORD)v40)
  {
    v12 = (uint64_t *)v39;
    v13 = v43;
    v14 = 16 * v40;
    do
    {
      v15 = *v12;
      if (v13 >= HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v13 + 1, 8);
        v13 = v43;
      }
      v42[v13] = v15;
      v13 = v43 + 1;
      LODWORD(v43) = v43 + 1;
      v12 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  v16 = a1[2];
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)a1;
    v18 = 8 * v16;
    while ((sub_1C5CB0A7C(*v17, (uint64_t)&v31, (unsigned int *)&v42, 0x2000u, 1) & 1) == 0)
    {
      ++v17;
      v18 -= 8;
      if (!v18)
        goto LABEL_24;
    }
    v4 = 0;
  }
  else
  {
LABEL_24:
    v19 = v40;
    if ((_DWORD)v40 == 1)
    {
      v4 = *(uint64_t **)v39;
    }
    else
    {
      v22 = **(_QWORD **)a1;
      v23 = *(unsigned __int8 **)(v22 + 64);
      *(_QWORD *)&v36 = v23;
      if (v23)
      {
        llvm::MetadataTracking::track((uint64_t)&v36, v23, 2);
        v19 = v40;
      }
      DWORD2(v36) = *(_DWORD *)(v22 + 60);
      v24 = v19;
      v25 = *(_QWORD *)(a2 + 832);
      if (v25)
        v26 = *(unsigned __int16 *)(v25 + 8);
      else
        v26 = 0;
      v4 = sub_1C636D0C8(a2, (const char *)2, (const llvm::APInt *)&v36, (llvm *)1, 0, (uint64_t *)v39, v24, v26);
      if ((_QWORD)v36)
        llvm::MetadataTracking::untrack((uint64_t)&v36, (unsigned __int8 *)v36);
    }
  }
LABEL_28:
  if (v38 == v37)
  {
    v20 = (void (**)(void))(v37[0] + 32);
  }
  else
  {
    if (!v38)
      goto LABEL_33;
    v20 = (void (**)(void))(*v38 + 40);
  }
  (*v20)();
LABEL_33:
  if (v39 != v41)
    free(v39);
LABEL_35:
  if (v42 != v44)
    free(v42);
  if (v32 != v31)
    free(v32);
  return v4;
}

void sub_1C5D74164(_QWORD **a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  size_t v25;
  size_t *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void *__p[2];
  char v31;
  __int16 v32;
  void *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  char v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  _QWORD v42[3];

  memset(v42, 0, sizeof(v42));
  v34 = 0;
  v38 = 0;
  v39 = 0;
  v33 = &unk_1E81A7208;
  v41 = v42;
  v40 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v33, "Cannot select: ", 0xFuLL);
  if (*(unsigned __int16 *)(a2 + 24) - 46 >= 3)
  {
    sub_1C5D6B79C((llvm::raw_ostream *)&v33, a2, a1[37], 10, 0);
    if ((unint64_t)(v36 - v37) > 0xD)
    {
      qmemcpy(v37, "\nIn function: ", 14);
      v37 += 14;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v33, "\nIn function: ", 0xEuLL);
    }
    v11 = (uint64_t ***)*a1[35];
    if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
    {
      v12 = ***v11;
      v13 = *(_QWORD *)(v12 + 152);
      v14 = *(unsigned int *)(v12 + 168);
      if ((_DWORD)v14)
      {
        LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        v16 = (uint64_t ****)(v13 + 16 * v15);
        v17 = *v16;
        if (*v16 != v11)
        {
          v18 = 1;
          do
          {
            if (v17 == (uint64_t ***)-4096)
              goto LABEL_33;
            v19 = v15 + v18++;
            v15 = v19 & (v14 - 1);
            v17 = *(uint64_t ****)(v13 + 16 * v15);
          }
          while (v17 != v11);
          v16 = (uint64_t ****)(v13 + 16 * v15);
        }
      }
      else
      {
LABEL_33:
        v16 = (uint64_t ****)(v13 + 16 * v14);
      }
      v26 = (size_t *)v16[1];
      v29 = *v26;
      v27 = v26 + 2;
      v28 = v29;
      if (v29 <= v36 - v37)
      {
        if (v28)
        {
          memcpy(v37, v27, v28);
          v37 += v28;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v33, (const char *)v27, v28);
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32)
                               + 40
                               * (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40)
                                           + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8)) == 1))
                   + 80);
    v5 = (_QWORD *)(v4 + 24);
    if (*(_DWORD *)(v4 + 32) >= 0x41u)
      v5 = (_QWORD *)*v5;
    v6 = (_QWORD *)*v5;
    v7 = *v5;
    if (*v5 > 0x30EC)
    {
      v20 = (*(uint64_t (**)(_QWORD *))(*a1[31] + 56))(a1[31]);
      v21 = v37;
      v22 = v36 - v37;
      if (v20)
      {
        v23 = v20;
        if (v22 > 0x11)
        {
          *((_WORD *)v37 + 8) = 9504;
          *v21 = *(_OWORD *)"target intrinsic %";
          v37 += 18;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v33, "target intrinsic %", 0x12uLL);
        }
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v23 + 16))(__p, v23, v6, 0, 0);
        if (v31 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        if (v31 >= 0)
          v25 = v31 & 0x7F;
        else
          v25 = (size_t)__p[1];
        llvm::raw_ostream::write((llvm::raw_ostream *)&v33, (const char *)v24, v25);
        if (v31 < 0)
          operator delete(__p[0]);
      }
      else
      {
        if (v22 > 0x12)
        {
          *(_DWORD *)(v37 + 15) = 589325161;
          *v21 = *(_OWORD *)"unknown intrinsic #";
          v37 += 19;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v33, "unknown intrinsic #", 0x13uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&v33, v7, 0, 0, 0);
      }
    }
    else
    {
      v8 = v37;
      if ((unint64_t)(v36 - v37) > 0xA)
      {
        *(_DWORD *)(v37 + 7) = 622879593;
        *v8 = *(_QWORD *)"intrinsic %";
        v37 += 11;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v33, "intrinsic %", 0xBuLL);
      }
      v9 = off_1E814EB28[v7];
      if (v9)
      {
        v10 = strlen(v9);
        if (v10 <= v36 - v37)
        {
          if (v10)
          {
            memcpy(v37, v9, v10);
            v37 += v10;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v33, v9, v10);
        }
      }
    }
    if (v36 == v37)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v33, " ", 1uLL);
    else
      *v37++ = 32;
    sub_1C5D6B79C((llvm::raw_ostream *)&v33, a2, a1[37], 10, 0);
  }
  v32 = 260;
  __p[0] = v41;
  llvm::report_fatal_error((uint64_t)__p, 1);
}

_QWORD *sub_1C5D74598(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8198F08;
  v2 = a1 + 81;
  v3 = (_QWORD *)a1[84];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  qword_1ED8369E8 = 0;
  a1[20] = off_1E8198F70;
  a1[21] = &off_1E8198FF8;
  v5 = (_QWORD *)a1[23];
  if (v5 != a1 + 25)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5D74628(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5D74644(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2);
}

void sub_1C5D74658(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  _QWORD v19[6];
  char v20;

  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a5;
  v19[3] = a6;
  v20 = 1;
  v19[4] = &off_1E8199048;
  v19[5] = a4;
  v10 = (unint64_t *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = (char *)v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v16 = v11 + 1;
    v17 = v9 + 56 * v11 > (unint64_t)v19;
    if (v9 <= (unint64_t)v19 && v17)
    {
      v18 = (char *)v19 - v9;
      sub_1C63733A4(a1 + 16, v16);
      v9 = *v10;
      v12 = &v18[*v10];
    }
    else
    {
      sub_1C63733A4(a1 + 16, v16);
      v9 = *v10;
      v12 = (char *)v19;
    }
  }
  v13 = v9 + 56 * *(unsigned int *)(a1 + 24);
  v14 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 32) = &off_1E8199068;
  v15 = *((_QWORD *)v12 + 5);
  *(_BYTE *)(v13 + 48) = v12[48];
  *(_QWORD *)(v13 + 32) = &off_1E8199048;
  *(_QWORD *)(v13 + 40) = v15;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL sub_1C5D74764(_DWORD *a1)
{
  unsigned int v1;
  int v4;
  int v5;
  _DWORD *v6;

  if (a1[2] > 0x40u)
  {
    v6 = a1;
    v4 = a1[2];
    v5 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a1);
    a1 = v6;
    if (v5 == v4)
      goto LABEL_3;
    return 0;
  }
  if (*(_QWORD *)a1)
    return 0;
LABEL_3:
  v1 = a1[6];
  if (v1 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 4)) == v1;
  else
    return *((_QWORD *)a1 + 2) == 0;
}

void sub_1C5D747EC(_QWORD *a1)
{
  *a1 = &off_1E8198BC8;
  *(_QWORD *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D74818(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(result + 24);
  v3 = a2 + 8;
  if (!a2)
    v3 = 0;
  if (*v2 == v3)
    *v2 = *(_QWORD *)(v3 + 8);
  return result;
}

_QWORD *sub_1C5D74844(_QWORD *result)
{
  *result = &off_1E8198BC8;
  *(_QWORD *)(result[2] + 656) = result[1];
  return result;
}

void sub_1C5D74860(_QWORD *a1)
{
  *a1 = &off_1E8198BC8;
  *(_QWORD *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5D7488C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if (a3 && (*(__int16 *)(a3 + 24) & 0x80000000) == 0)
  {
    v3 = (_QWORD *)result[3];
    if (*v3 == a2)
      *v3 = a3;
    v4 = result[4];
    v5 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)v4;
      v7 = 24 * v5;
      do
      {
        if (*v6 == a2)
          *v6 = a3;
        v6 += 3;
        v7 -= 24;
      }
      while (v7);
    }
    v8 = (uint64_t *)result[5];
    v9 = *((_DWORD *)v8 + 2);
    if (v9)
    {
      v10 = *v8;
      v11 = v10 + 136 * v9;
      do
      {
        v12 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v12)
        {
          v13 = *(_QWORD **)(v10 + 8);
          v14 = 16 * v12;
          do
          {
            if (*v13 == a2)
              *v13 = a3;
            v13 += 2;
            v14 -= 16;
          }
          while (v14);
        }
        v10 += 136;
      }
      while (v10 != v11);
    }
  }
  return result;
}

void sub_1C5D74938()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5D7494C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E81990F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5D7498C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81990F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::SmallPtrSetImplBase **sub_1C5D749B4(llvm::SmallPtrSetImplBase **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::SmallPtrSetImplBase **v4;
  char v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  llvm::SmallPtrSetImplBase *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;

  v2 = *a2;
  v3 = a2[1];
  if (*(_BYTE *)(*(_QWORD *)(*a2 + 40) + 16 * v3) == 1 && *(_WORD *)(v2 + 24) != 1)
  {
    v4 = result;
    result = (llvm::SmallPtrSetImplBase **)sub_1C4774094(result[1], *a2);
    if (v5)
    {
      if (*(_WORD *)(v2 + 24) == 2)
      {
        v6 = *(unsigned __int16 *)(v2 + 56);
        if (*(_WORD *)(v2 + 56))
        {
          v7 = *(__int128 **)(v2 + 32);
          v8 = 40 * v6;
          while (1)
          {
            v9 = v4[2];
            v14 = *v7;
            v10 = *((_QWORD *)v9 + 3);
            if (!v10)
              break;
            result = (llvm::SmallPtrSetImplBase **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 48))(v10, &v14);
            v7 = (__int128 *)((char *)v7 + 40);
            v8 -= 40;
            if (!v8)
              return result;
          }
          sub_1C485C2F0();
          return (llvm::SmallPtrSetImplBase **)sub_1C5D74AB8();
        }
      }
      else
      {
        v11 = (uint64_t)v4[3];
        v12 = *(unsigned int *)(v11 + 8);
        if (v12 >= *(_DWORD *)(v11 + 12))
        {
          result = (llvm::SmallPtrSetImplBase **)llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v11 + 16, v12 + 1, 16);
          LODWORD(v12) = *(_DWORD *)(v11 + 8);
        }
        v13 = (uint64_t *)(*(_QWORD *)v11 + 16 * v12);
        *v13 = v2;
        v13[1] = v3;
        ++*(_DWORD *)(v11 + 8);
      }
    }
  }
  return result;
}

__n128 sub_1C5D74AB8(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED825440, "use-mbpi", 8uLL);
  result = *a1;
  xmmword_1ED825460 = (__int128)*a1;
  v7 = *a2;
  byte_1ED8254C0 = **a2;
  byte_1ED8254D1 = 1;
  byte_1ED8254D0 = *v7;
  word_1ED82544A = (32 * (*a3 & 3)) | word_1ED82544A & 0xFF9F;
  return result;
}

__n128 sub_1C5D74B3C(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED825500, "pre-RA-sched", 0xCuLL);
  v6 = *a1;
  xmmword_1ED825580 = (uint64_t (*)(_QWORD, _QWORD))**a1;
  byte_1ED825598 = 1;
  qword_1ED825590 = *v6;
  word_1ED82550A = (32 * (*a2 & 3)) | word_1ED82550A & 0xFF9F;
  result = *a3;
  xmmword_1ED825520 = (__int128)*a3;
  return result;
}

void sub_1C5D74BC0()
{
  uint64_t i;

  for (i = qword_1ED8369D8; i; i = *(_QWORD *)i)
    sub_1C5D74658((uint64_t)&unk_1ED8255A8, *(unsigned __int8 **)(i + 8), *(_QWORD *)(i + 16), *(_QWORD *)(i + 40), *(_QWORD *)(i + 24), *(_QWORD *)(i + 32));
  qword_1ED8369E8 = (uint64_t)&qword_1ED8255A0;
}

void sub_1C5D74C18(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        sub_1C5D39B2C(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_1C5D74C90(_OWORD *result, __int128 *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v7;
  __int128 v8;

  if (a4)
  {
    v7 = result;
    result = operator new(16 * a4);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    while (a2 != a3)
    {
      v8 = *a2;
      a2 = (__int128 *)((char *)a2 + 40);
      *result++ = v8;
    }
    v7[1] = result;
  }
  return result;
}

void sub_1C5D74CF4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5D74D08(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81991B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5D74D3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81991B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5D74D58(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = *(_QWORD **)v2;
    v6 = 8 * v3;
    do
    {
      if (*v5 == v4)
        *v5 = 0;
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_1C5D74D94()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5D74DA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81991F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5D74DE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81991F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C5D74E00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v3 = *a2;
  sub_1C5D619A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 296), *a2);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(char **)v4;
  v6 = *(unsigned int *)(v4 + 8);
  v7 = *(char **)v4;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v7 = *(char **)v4;
    while (*(_QWORD *)v7 != v3)
    {
      v7 += 8;
      v8 -= 8;
      if (!v8)
      {
        v7 = (char *)(*(_QWORD *)v4 + 8 * v6);
        break;
      }
    }
  }
  v9 = (v7 - v5) >> 3;
  v10 = v7 + 8;
  if (v9 != v6 && v10 != (_QWORD *)(*(_QWORD *)v4 + 8 * v6))
  {
    v12 = 8 * v6 - 8 * v9 - 8;
    do
    {
      if (*v10 != v3)
      {
        *(_QWORD *)v7 = *v10;
        v7 += 8;
      }
      ++v10;
      v12 -= 8;
    }
    while (v12);
    v5 = *(char **)v4;
  }
  *(_DWORD *)(v4 + 8) = (unint64_t)(v7 - v5) >> 3;
}

uint64_t sub_1C5D74EBC()
{
  __n128 v1;
  int v2;
  double (*v3)(uint64_t, uint64_t);
  double (**v4)(uint64_t, uint64_t);

  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Enable abort calls when \"fast\" instruction selection fails to lower an instructio"
                                     "n: 0 disable the abort, 1 will abort but for args, calls and terminators, 2 will al"
                                     "so abort for argument lowering, and 3 will never fallback to SelectionDAG.";
  v1.n128_u64[1] = 238;
  sub_1C63734A8(&v4, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED8252C0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Emit a diagnostic when \"fast\" instruction selection falls back to SelectionDAG.";
  v1.n128_u64[1] = 79;
  sub_1C61B2D38((uint64_t)algn_1ED825380, "fast-isel-report-on-fallback", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, algn_1ED825380, &dword_1C475E000);
  v1.n128_u64[0] = (unint64_t)"use Machine Branch Probability Info";
  v1.n128_u64[1] = 35;
  LOBYTE(v2) = 1;
  v4 = (double (**)(uint64_t, uint64_t))&v2;
  LODWORD(v3) = 1;
  sub_1C6373560(&v1, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED825440, &dword_1C475E000);
  v3 = sub_1C6371EA4;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Instruction schedulers available (before register allocation):";
  v1.n128_u64[1] = 62;
  sub_1C6373604((uint64_t **)&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C6371FF4, &qword_1ED825500, &dword_1C475E000);
  sub_1C5D03BD8(qword_1ED825290, "default", "Best scheduler for the target", (uint64_t)sub_1C6371EA4);
  return __cxa_atexit((void (*)(void *))sub_1C5D03B70, qword_1ED825290, &dword_1C475E000);
}

void sub_1C5D75034(uint64_t a1, llvm::Twine *a2, llvm::Twine *a3, char a4, llvm::Twine *a5)
{
  void *v9;
  uint64_t v10;
  const std::error_category *v11;
  uint64_t v12;
  int v13;
  llvm::raw_ostream *v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  void *v19;
  _BYTE *v20;
  _BYTE *v21;
  void **v22;
  size_t v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  void **v27;
  size_t v28;
  llvm::raw_ostream *v29;
  void *v30;
  llvm *v31;
  llvm::raw_ostream *v32;
  _QWORD *v33;
  void *v34;
  int v35;
  void *__p[2];
  uint64_t v37;
  void **v38;
  const std::error_category *v39;
  __int16 v40;
  int v41;
  void *v42[2];
  char v43;
  __int128 v44;
  uint64_t v45;

  llvm::Twine::str(a2, __p);
  v9 = (void *)HIBYTE(v37);
  if (v37 < 0)
    v9 = __p[1];
  v41 = 0;
  if (v9)
  {
    v40 = 260;
    v38 = __p;
    *(_QWORD *)&v44 = llvm::sys::fs::openFile((unsigned __int8 *)&v38, &v41, 0, 2, 1, 438);
    *((_QWORD *)&v44 + 1) = v10;
    v11 = std::generic_category();
    v38 = (void **)17;
    v39 = v11;
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, void ***))(**((_QWORD **)&v44 + 1) + 32))(*((_QWORD *)&v44 + 1), v44, &v38);
    if ((v12 & 1) != 0
      || (v12 = ((uint64_t (*)(const std::error_category *, __int128 *, _QWORD))v39->equivalent_0)(v39, &v44, v38), (v12 & 1) != 0))
    {
      v18 = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
      v19 = (void *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0x17uLL)
      {
        qmemcpy(v19, "file exists, overwriting", 24);
        v20 = (_BYTE *)(*((_QWORD *)v18 + 4) + 24);
        *((_QWORD *)v18 + 4) = v20;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v18, "file exists, overwriting", 0x18uLL);
        v20 = (_BYTE *)*((_QWORD *)v18 + 4);
      }
      v21 = (_BYTE *)*((_QWORD *)v18 + 3);
    }
    else
    {
      v13 = v44;
      v14 = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
      v15 = (char *)*((_QWORD *)v14 + 4);
      v16 = *((_QWORD *)v14 + 3) - (_QWORD)v15;
      if (v13)
      {
        if (v16 > 0x16)
        {
          qmemcpy(v15, "error writing into file", 23);
          v17 = (_BYTE *)(*((_QWORD *)v14 + 4) + 23);
          *((_QWORD *)v14 + 4) = v17;
        }
        else
        {
          v14 = llvm::raw_ostream::write(v14, "error writing into file", 0x17uLL);
          v17 = (_BYTE *)*((_QWORD *)v14 + 4);
        }
        if (*((_BYTE **)v14 + 3) == v17)
        {
          llvm::raw_ostream::write(v14, "\n", 1uLL);
        }
        else
        {
          *v17 = 10;
          ++*((_QWORD *)v14 + 4);
        }
        goto LABEL_41;
      }
      if (v16 > 0x21)
      {
        qmemcpy(v15, "writing to the newly created file ", 34);
        *((_QWORD *)v14 + 4) += 34;
      }
      else
      {
        v14 = llvm::raw_ostream::write(v14, "writing to the newly created file ", 0x22uLL);
      }
      if (v37 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if (v37 >= 0)
        v23 = HIBYTE(v37) & 0x7F;
      else
        v23 = (size_t)__p[1];
      v18 = llvm::raw_ostream::write(v14, (const char *)v22, v23);
      v21 = (_BYTE *)*((_QWORD *)v18 + 3);
      v20 = (_BYTE *)*((_QWORD *)v18 + 4);
    }
    if (v21 == v20)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *v20 = 10;
      ++*((_QWORD *)v18 + 4);
    }
  }
  else
  {
    llvm::Twine::str(a5, v42);
    v40 = 260;
    v38 = v42;
    llvm::createGraphFilename((llvm::Twine *)&v38, &v41, &v44);
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v44;
    v37 = v45;
    HIBYTE(v45) = 0;
    LOBYTE(v44) = 0;
    if (v43 < 0)
      operator delete(v42[0]);
  }
  v24 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v38, v41, 1, 0, 0);
  if (v41 == -1)
  {
    v25 = (llvm::raw_ostream *)llvm::errs(v24);
    v26 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 0x13)
    {
      *(_DWORD *)(v26 + 16) = 656434540;
      *(_OWORD *)v26 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v25 + 4) += 20;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v25, "error opening file '", 0x14uLL);
    }
    if (v37 >= 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    if (v37 >= 0)
      v28 = HIBYTE(v37) & 0x7F;
    else
      v28 = (size_t)__p[1];
    v29 = llvm::raw_ostream::write(v25, (const char *)v27, v28);
    v30 = (void *)*((_QWORD *)v29 + 4);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 0xEuLL)
    {
      qmemcpy(v30, "' for writing!\n", 15);
      *((_QWORD *)v29 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v29, "' for writing!\n", 0xFuLL);
    }
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v38);
  }
  else
  {
    *(_QWORD *)&v44 = &v38;
    *((_QWORD *)&v44 + 1) = a1;
    BYTE1(v45) = a4;
    LOBYTE(v45) = 0;
    llvm::Twine::str(a3, v42);
    v31 = sub_1C6373C58((uint64_t)&v44, (uint64_t)v42);
    if (v43 < 0)
      operator delete(v42[0]);
    v32 = (llvm::raw_ostream *)llvm::errs(v31);
    v33 = (_QWORD *)*((_QWORD *)v32 + 4);
    if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 7uLL)
    {
      *v33 = 0xA202E656E6F6420;
      *((_QWORD *)v32 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v32, " done. \n", 8uLL);
    }
    v34 = __p[0];
    v35 = SHIBYTE(v37);
    __p[1] = 0;
    v37 = 0;
    __p[0] = 0;
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v38);
    if (v35 < 0)
      operator delete(v34);
  }
LABEL_41:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
}

void sub_1C5D75498(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _WORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  void **v10;
  size_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;
  void *__p[2];
  char v16;
  void (**v17)(llvm::raw_ostream *__hidden);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  void **v25;
  void *v26[2];
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v18 = 0;
  v22 = 0;
  v23 = 0;
  v17 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v25 = v26;
  v24 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v17, "SU(", 3uLL);
  sub_1C5E21910((llvm::raw_ostream *)&v17, *((unsigned int *)a2 + 48), 0, 0, 0);
  v6 = (_WORD *)v21;
  if ((unint64_t)(v20 - v21) > 2)
  {
    *(_BYTE *)(v21 + 2) = 32;
    *v6 = 14889;
    v21 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v17, "): ", 3uLL);
  }
  v7 = *a2;
  if (*a2)
  {
    v8 = 0;
    v28 = v30;
    v29 = 0x400000000;
    do
    {
      if (v8 >= HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v8 + 1, 8);
        v8 = v29;
      }
      *((_QWORD *)v28 + v8) = v7;
      v8 = v29 + 1;
      LODWORD(v29) = v29 + 1;
      if (!*(_WORD *)(v7 + 56))
        break;
      v9 = (unsigned int *)(*(_QWORD *)(v7 + 32) + 40 * (*(unsigned __int16 *)(v7 + 56) - 1));
      v7 = *(_QWORD *)v9;
    }
    while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v9 + 40) + 16 * v9[2]) == 172);
    if (v8)
    {
      do
      {
        sub_1C6373A90(__p, *((_QWORD *)v28 + v8 - 1), *(_QWORD **)(a1 + 624));
        if (v16 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        if (v16 >= 0)
          v11 = v16 & 0x7F;
        else
          v11 = (size_t)__p[1];
        llvm::raw_ostream::write((llvm::raw_ostream *)&v17, (const char *)v10, v11);
        if (v16 < 0)
          operator delete(__p[0]);
        LODWORD(v29) = v29 - 1;
        if (!(_DWORD)v29)
          break;
        v12 = (_DWORD *)v21;
        if ((unint64_t)(v20 - v21) > 4)
        {
          *(_BYTE *)(v21 + 4) = 32;
          *v12 = 538976266;
          v21 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v17, "\n    ", 5uLL);
        }
        v8 = v29;
      }
      while ((_DWORD)v29);
    }
    if (v28 != v30)
      free(v28);
  }
  else
  {
    v13 = v21;
    if ((unint64_t)(v20 - v21) > 0xC)
    {
      *(_QWORD *)v21 = *(_QWORD *)"CROSS RC COPY";
      *(_QWORD *)(v13 + 5) = *(_QWORD *)" RC COPY";
      v21 += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v17, "CROSS RC COPY", 0xDuLL);
    }
  }
  if (*((char *)v25 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a3, *v25, (unint64_t)v25[1]);
  }
  else
  {
    v14 = *(_OWORD *)v25;
    *(_QWORD *)(a3 + 16) = v25[2];
    *(_OWORD *)a3 = v14;
  }
  v17 = off_1E81A6E70;
  if (v24 == 1 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8077774924);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_1C5D757E0(uint64_t a1, llvm::raw_ostream **a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  void *v19[2];
  char v20[24];
  char v21;
  std::string __p;

  if (*(_QWORD *)(a1 + 624))
  {
    v21 = 16;
    strcpy(v20, "\tplaintext=circle");
    strcpy((char *)v19, "GraphRoot");
    v4 = *a2;
    v5 = *((_QWORD *)*a2 + 4);
    if ((unint64_t)(*((_QWORD *)*a2 + 3) - v5) > 4)
    {
      *(_BYTE *)(v5 + 4) = 101;
      *(_DWORD *)v5 = 1685016073;
      *((_QWORD *)v4 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v4, "\tNode", 5uLL);
    }
    llvm::write_hex(v4, 0, 3, 0, 0);
    v6 = (_WORD *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 1uLL)
    {
      *v6 = 8283;
      *((_QWORD *)v4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v4, "[ ", 2uLL);
    }
    v7 = llvm::raw_ostream::write(*a2, &v20[1], 0x10uLL);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if (*((_BYTE **)v7 + 3) == v8)
    {
      llvm::raw_ostream::write(v7, ",", 1uLL);
    }
    else
    {
      *v8 = 44;
      ++*((_QWORD *)v7 + 4);
    }
    v9 = *a2;
    v10 = *((_QWORD *)*a2 + 4);
    if ((unint64_t)(*((_QWORD *)*a2 + 3) - v10) > 8)
    {
      *(_BYTE *)(v10 + 8) = 34;
      *(_QWORD *)v10 = *(_QWORD *)" label =\"";
      *((_QWORD *)v9 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v9, " label =\"", 9uLL);
    }
    v11 = *a2;
    llvm::DOT::EscapeString((char *)v19, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v11, (const char *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = *a2;
    v15 = (_DWORD *)*((_QWORD *)*a2 + 4);
    if (*((_QWORD *)*a2 + 3) - (_QWORD)v15 > 3uLL)
    {
      *v15 = 171662626;
      *((_QWORD *)v14 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v14, "\"];\n", 4uLL);
    }
    if (v20[0] < 0)
      operator delete(v19[0]);
    if (v21 < 0)
      operator delete(*(void **)&v20[1]);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 192);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 28);
      if (v17 != -1)
      {
        v18 = *(_QWORD *)(a1 + 48) + 272 * v17;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C640C6A0;
        strcpy(__p.__r_.__value_.__l.__data_, "color=blue,style=dashed");
        sub_1C6373B80(a2, v18, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C5D75AA8(llvm::raw_ostream **a1, uint64_t a2)
{
  char *Name;
  unint64_t v5;
  char *v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string *p_p;
  size_t size;
  _DWORD *v22;
  llvm::raw_ostream *v23;
  void *v24;
  char v25;
  int v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _QWORD *v29;
  std::string *v30;
  size_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  size_t v34;
  llvm::raw_ostream *v35;
  _QWORD *v36;
  std::string *v37;
  size_t v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  std::string __p;
  void **__dst;
  size_t v45;
  int64_t v46;

  Name = llvm::Value::getName(**(llvm::Value ***)(*(_QWORD *)a1[1] + 40));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = Name;
  v7 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v45 = v7;
    v46 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v46) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *(_BYTE *)(a2 + 23);
  v12 = v11;
  v13 = v11 & 0x7F;
  if (v12 < 0)
    v13 = *(_QWORD *)(a2 + 8);
  if (v13)
  {
    v14 = *a1;
    v15 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v15) > 8)
    {
      *(_BYTE *)(v15 + 8) = 34;
      *(_QWORD *)v15 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v14 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    v16 = (char *)a2;
  }
  else
  {
    v17 = v45;
    if (v46 >= 0)
      v17 = HIBYTE(v46) & 0x7F;
    v14 = *a1;
    v18 = *((_QWORD *)*a1 + 4);
    v19 = *((_QWORD *)*a1 + 3) - v18;
    if (!v17)
    {
      if (v19 > 0x11)
      {
        *(_WORD *)(v18 + 16) = 2683;
        *(_OWORD *)v18 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)v14 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(*a1, "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_33;
    }
    if (v19 > 8)
    {
      *(_BYTE *)(v18 + 8) = 34;
      *(_QWORD *)v18 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v14 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
    }
    v16 = (char *)&__dst;
  }
  llvm::DOT::EscapeString(v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v14, (const char *)p_p, size);
  v22 = (_DWORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v22 > 3uLL)
  {
    *v22 = 175841314;
    *((_QWORD *)v14 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v14, "\" {\n", 4uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_33:
  v23 = *a1;
  v24 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v24 > 0xEuLL)
  {
    qmemcpy(v24, "\trankdir=\"BT\";\n", 15);
    *((_QWORD *)v23 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v23, "\trankdir=\"BT\";\n", 0xFuLL);
  }
  v25 = *(_BYTE *)(a2 + 23);
  v26 = v25;
  v27 = v25 & 0x7F;
  if (v26 < 0)
    v27 = *(_QWORD *)(a2 + 8);
  if (v27)
  {
    v28 = *a1;
    v29 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v29 > 7uLL)
    {
      *v29 = 0x223D6C6562616C09;
      *((_QWORD *)v28 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v31 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v28, (const char *)v30, v31);
    v32 = *((_QWORD *)v28 + 4);
    if ((unint64_t)(*((_QWORD *)v28 + 3) - v32) <= 2)
    {
      v33 = v28;
LABEL_61:
      llvm::raw_ostream::write(v33, "\";\n", 3uLL);
      goto LABEL_62;
    }
    *(_BYTE *)(v32 + 2) = 10;
    *(_WORD *)v32 = 15138;
    *((_QWORD *)v28 + 4) += 3;
    goto LABEL_62;
  }
  v34 = HIBYTE(v46) & 0x7F;
  if (v46 < 0)
    v34 = v45;
  if (v34)
  {
    v35 = *a1;
    v36 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v36 > 7uLL)
    {
      *v36 = 0x223D6C6562616C09;
      *((_QWORD *)v35 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(*a1, "\tlabel=\"", 8uLL);
    }
    llvm::DOT::EscapeString((char *)&__dst, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v38 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v35, (const char *)v37, v38);
    v39 = *((_QWORD *)v35 + 4);
    if ((unint64_t)(*((_QWORD *)v35 + 3) - v39) <= 2)
    {
      v33 = v35;
      goto LABEL_61;
    }
    *(_BYTE *)(v39 + 2) = 10;
    *(_WORD *)v39 = 15138;
    *((_QWORD *)v35 + 4) += 3;
LABEL_62:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v40 = *a1;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(v40, (const char *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v41 = *a1;
  v42 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v42)
  {
    llvm::raw_ostream::write(v41, "\n", 1uLL);
  }
  else
  {
    *v42 = 10;
    ++*((_QWORD *)v41 + 4);
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
}

void sub_1C5D75FA4(uint64_t a1, llvm::raw_ostream **a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  void *v18[2];
  char v19[24];
  char v20;
  std::string __p;

  v20 = 16;
  strcpy(v19, "\tplaintext=circle");
  strcpy((char *)v18, "GraphRoot");
  v4 = *a2;
  v5 = *((_QWORD *)*a2 + 4);
  if ((unint64_t)(*((_QWORD *)*a2 + 3) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1685016073;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, 0, 3, 0, 0);
  v6 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8283;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, "[ ", 2uLL);
  }
  v7 = llvm::raw_ostream::write(*a2, &v19[1], 0x10uLL);
  v8 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (*((_BYTE **)v7 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, ",", 1uLL);
  }
  else
  {
    *v8 = 44;
    ++*((_QWORD *)v7 + 4);
  }
  v9 = *a2;
  v10 = *((_QWORD *)*a2 + 4);
  if ((unint64_t)(*((_QWORD *)*a2 + 3) - v10) > 8)
  {
    *(_BYTE *)(v10 + 8) = 34;
    *(_QWORD *)v10 = *(_QWORD *)" label =\"";
    *((_QWORD *)v9 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v9, " label =\"", 9uLL);
  }
  v11 = *a2;
  llvm::DOT::EscapeString((char *)v18, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v11, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = *a2;
  v15 = (_DWORD *)*((_QWORD *)*a2 + 4);
  if (*((_QWORD *)*a2 + 3) - (_QWORD)v15 > 3uLL)
  {
    *v15 = 171662626;
    *((_QWORD *)v14 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v14, "\"];\n", 4uLL);
  }
  if (v19[0] < 0)
    operator delete(v18[0]);
  if (v20 < 0)
    operator delete(*(void **)&v19[1]);
  v16 = *(_QWORD *)(a1 + 192);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 200);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C640C6A0;
    strcpy(__p.__r_.__value_.__l.__data_, "color=blue,style=dashed");
    sub_1C5D77278((llvm::raw_ostream *)a2, 0, -1, v16, v17, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D76254(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  const char *v20;
  int v21;
  unsigned int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  llvm::raw_ostream *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  _WORD *v30;
  int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  std::string::size_type size;
  _BYTE *v39;
  std::string *p_p;
  size_t v41;
  _DWORD *v42;
  std::string *v43;
  size_t v44;
  int v45;
  _OWORD *v46;
  unint64_t v47;
  const char *v48;
  size_t v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  char v52;
  const char *v53;
  size_t v54;
  _BYTE *v55;
  const char *v56;
  size_t v57;
  char v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  llvm::raw_ostream *v61;
  std::string *v62;
  size_t v63;
  void *v64;
  llvm::raw_ostream *v65;
  std::string *v66;
  size_t v67;
  char v68;
  std::string::size_type v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  std::string *v72;
  size_t v73;
  llvm::raw_ostream *v74;
  _WORD *v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  llvm::raw_ostream *v82;
  _WORD *v83;
  _BYTE *v84;
  std::string *v85;
  size_t v86;
  llvm::raw_ostream *v87;
  uint64_t v88;
  llvm::raw_ostream *v89;
  _BYTE *v90;
  llvm::raw_ostream *v91;
  _WORD *v92;
  unint64_t v93;
  const char *v94;
  size_t v95;
  llvm::raw_ostream *v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  unint64_t v106;
  void (**v107)(llvm::raw_ostream *__hidden);
  int v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  char v112;
  uint64_t v113;
  int v114;
  void **v115;
  void *v116[2];
  uint64_t v117;
  void *v118[2];
  char v119;
  std::string __p;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  int v125;
  std::string *v126;
  std::string v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v119 = 13;
  strcpy((char *)v118, "shape=Mrecord");
  v4 = *(llvm::raw_ostream **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1685016073;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x3D65706168735B20;
    *((_QWORD *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  v7 = *(llvm::raw_ostream **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24) - v8;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v9 <= 4)
    {
      v10 = "none,";
      v11 = 5;
      goto LABEL_10;
    }
    *(_BYTE *)(v8 + 4) = 44;
    *(_DWORD *)v8 = 1701736302;
    v104 = *((_QWORD *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = "record,";
      v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)v8 = 1868785010;
    v104 = *((_QWORD *)v7 + 4) + 7;
  }
  *((_QWORD *)v7 + 4) = v104;
LABEL_11:
  if (v119 >= 0)
    v12 = v119 & 0x7F;
  else
    v12 = (size_t)v118[1];
  if (v12)
  {
    if (v119 >= 0)
      v13 = (const char *)v118;
    else
      v13 = (const char *)v118[0];
    v14 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v13, v12);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *v15 = 44;
      ++*((_QWORD *)v14 + 4);
    }
  }
  v16 = *(llvm::raw_ostream **)a1;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)v17 = 1700946284;
    *((_QWORD *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v21 = *(unsigned __int16 *)(a2 + 56);
    if (*(_WORD *)(a2 + 56))
    {
      v24 = v21 - 1;
      if ((v21 - 1) >= 0x3F)
        v24 = 63;
      v22 = v24 + 1;
      v23 = v22 != v21;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    if (v22 <= 1)
      v25 = 1;
    else
      v25 = v22;
    v26 = *(llvm::raw_ostream **)a1;
    v27 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v27 > 0x30uLL)
    {
      qmemcpy(v27, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v28 = (void *)(*((_QWORD *)v26 + 4) + 49);
      *((_QWORD *)v26 + 4) = v28;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v28 = (void *)*((_QWORD *)v26 + 4);
    }
    v29 = (v25 + v23);
    if (*((_QWORD *)v26 + 3) - (_QWORD)v28 > 0x2EuLL)
    {
      qmemcpy(v28, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v26 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v26, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1C5E21910(v26, v29, 0, 0, 0);
    v30 = (_WORD *)*((_QWORD *)v26 + 4);
    if (*((_QWORD *)v26 + 3) - (_QWORD)v30 <= 1uLL)
    {
      v20 = "\">";
      v18 = v26;
      goto LABEL_39;
    }
    *v30 = 15906;
    *((_QWORD *)v26 + 4) += 2;
  }
  else
  {
    v18 = *(llvm::raw_ostream **)a1;
    v19 = *(_WORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v19 <= 1uLL)
    {
      v20 = "\"{";
LABEL_39:
      llvm::raw_ostream::write(v18, v20, 2uLL);
      goto LABEL_40;
    }
    *v19 = 31522;
    *((_QWORD *)v18 + 4) += 2;
  }
LABEL_40:
  v116[0] = 0;
  v116[1] = 0;
  v117 = 0;
  v108 = 0;
  v112 = 0;
  v113 = 0;
  v107 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v115 = v116;
  v114 = 0;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  v31 = *(unsigned __int16 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 16))
    llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "</tr><tr>", 9uLL);
  if (!v31)
    goto LABEL_121;
  v106 = a2;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  do
  {
    v35 = &v127.__r_.__value_.__s.__data_[21];
    v36 = v34;
    if (v34)
    {
      do
      {
        *--v35 = (v36 % 0xA) | 0x30;
        v37 = v36 > 9;
        v36 /= 0xAuLL;
      }
      while (v37);
    }
    else
    {
      v127.__r_.__value_.__s.__data_[20] = 48;
      v35 = &v127.__r_.__value_.__s.__data_[20];
    }
    sub_1C4E61270(&__p, v35, &v127.__r_.__value_.__s.__data_[21], (char *)&v127.__r_.__value_.__r.__words[2] + 5 - v35);
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v39 = v111;
      if (*(_BYTE *)(a1 + 16))
      {
        if ((unint64_t)(v110 - v111) > 0x16)
        {
          *(_OWORD *)v111 = *(_OWORD *)"<td colspan=\"1\" port=\"s";
          *(_QWORD *)(v39 + 15) = *(_QWORD *)" port=\"s";
          v111 += 23;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "<td colspan=\"1\" port=\"s", 0x17uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&v107, v32, 0, 0, 0);
        if ((unint64_t)(v110 - v111) > 1)
        {
          *(_WORD *)v111 = 15906;
          v111 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "\">", 2uLL);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v41 = __p.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v107, (const char *)p_p, v41);
        v42 = v111;
        if ((unint64_t)(v110 - v111) > 4)
        {
          v111[4] = 62;
          *v42 = 1685335868;
          v111 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "</td>", 5uLL);
        }
      }
      else
      {
        if (v32)
        {
          if (v110 == v111)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "|", 1uLL);
            v39 = v111;
          }
          else
          {
            *v111 = 124;
            v39 = ++v111;
          }
        }
        if ((unint64_t)(v110 - v39) > 1)
        {
          *(_WORD *)v39 = 29500;
          v111 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v107, "<s", 2uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&v107, v32, 0, 0, 0);
        if (v110 == v111)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v107, ">", 1uLL);
        else
          *v111++ = 62;
        llvm::DOT::EscapeString((char *)&__p, &v127);
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v127;
        else
          v43 = (std::string *)v127.__r_.__value_.__r.__words[0];
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = *((_BYTE *)&v127.__r_.__value_.__s + 23) & 0x7F;
        else
          v44 = v127.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v107, (const char *)v43, v44);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
      }
      v33 = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v45 = v34 + 1;
    if ((_DWORD)v34 + 1 == v31)
      break;
    v34 = (v34 + 1);
    ++v32;
  }
  while (v32 != 64);
  if (((v45 != v31) & v33) != 0)
  {
    v46 = v111;
    v47 = v110 - v111;
    a2 = v106;
    if (*(_BYTE *)(a1 + 16))
    {
      if (v47 <= 0x2B)
      {
        v48 = "<td colspan=\"1\" port=\"s64\">truncated...</td>";
        v49 = 44;
        goto LABEL_99;
      }
      *(_OWORD *)v111 = *(_OWORD *)"<td colspan=\"1\" port=\"s64\">truncated...</td>";
      qmemcpy(v46 + 1, "port=\"s64\">truncated...</td>", 28);
      v105 = v111 + 44;
    }
    else
    {
      if (v47 <= 0x11)
      {
        v48 = "|<s64>truncated...";
        v49 = 18;
LABEL_99:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v107, v48, v49);
        goto LABEL_100;
      }
      *((_WORD *)v111 + 8) = 11822;
      *v46 = *(_OWORD *)"|<s64>truncated...";
      v105 = v111 + 18;
    }
    v111 = v105;
  }
  else
  {
    a2 = v106;
    if ((v33 & 1) == 0)
      goto LABEL_121;
  }
LABEL_100:
  v50 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    v58 = *((_BYTE *)v115 + 23);
    if (v58 >= 0)
      v56 = (const char *)v115;
    else
      v56 = (const char *)*v115;
    if (v58 >= 0)
      v57 = v58 & 0x7F;
    else
      v57 = (size_t)v115[1];
  }
  else
  {
    v51 = (_BYTE *)*((_QWORD *)v50 + 4);
    if (*((_BYTE **)v50 + 3) == v51)
    {
      v50 = llvm::raw_ostream::write(v50, "{", 1uLL);
    }
    else
    {
      *v51 = 123;
      ++*((_QWORD *)v50 + 4);
    }
    v52 = *((_BYTE *)v115 + 23);
    if (v52 >= 0)
      v53 = (const char *)v115;
    else
      v53 = (const char *)*v115;
    if (v52 >= 0)
      v54 = v52 & 0x7F;
    else
      v54 = (size_t)v115[1];
    v50 = llvm::raw_ostream::write(v50, v53, v54);
    v55 = (_BYTE *)*((_QWORD *)v50 + 4);
    if (*((_BYTE **)v50 + 3) != v55)
    {
      *v55 = 125;
      ++*((_QWORD *)v50 + 4);
      goto LABEL_118;
    }
    v56 = "}";
    v57 = 1;
  }
  llvm::raw_ostream::write(v50, v56, v57);
LABEL_118:
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_132;
  v59 = *(llvm::raw_ostream **)a1;
  v60 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v60)
  {
    llvm::raw_ostream::write(v59, "|", 1uLL);
  }
  else
  {
    *v60 = 124;
    ++*((_QWORD *)v59 + 4);
  }
LABEL_121:
  if (!*(_BYTE *)(a1 + 16))
  {
    v61 = *(llvm::raw_ostream **)a1;
    sub_1C6373A90(&v127, a2, **(_QWORD ***)(a1 + 8));
    llvm::DOT::EscapeString((char *)&v127, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = &__p;
    else
      v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v63 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v61, (const char *)v62, v63);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    {
      v64 = (void *)v127.__r_.__value_.__r.__words[0];
LABEL_140:
      operator delete(v64);
      goto LABEL_141;
    }
    goto LABEL_141;
  }
LABEL_132:
  v65 = *(llvm::raw_ostream **)a1;
  sub_1C6373A90(&__p, a2, **(_QWORD ***)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = &__p;
  else
    v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v67 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v65, (const char *)v66, v67);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v64 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_140;
  }
LABEL_141:
  memset(&v127, 0, sizeof(v127));
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v123 = 0;
  v124 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v126 = &v127;
  v125 = 0;
  v121 = 0;
  v122 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  llvm::write_hex((llvm::raw_ostream *)&__p, a2, 3, 0, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v125 == 1 && __p.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  v68 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  v69 = *((_BYTE *)&v127.__r_.__value_.__s + 23) & 0x7F;
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v69 = v127.__r_.__value_.__l.__size_;
  if (v69)
  {
    v70 = *(llvm::raw_ostream **)a1;
    v71 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v71)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "|", 1uLL);
    }
    else
    {
      *v71 = 124;
      ++*((_QWORD *)v70 + 4);
    }
    llvm::DOT::EscapeString((char *)&v127, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v72 = &__p;
    else
      v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v73 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v70, (const char *)v72, v73);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v68 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  }
  if (v68 < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  v74 = *(llvm::raw_ostream **)a1;
  v75 = *(_WORD **)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v75 > 1uLL)
  {
    *v75 = 31612;
    *((_QWORD *)v74 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v74, "|{", 2uLL);
  }
  v76 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    v77 = 0;
    v78 = v76 - 1;
    if ((v76 - 1) >= 0x3F)
      v78 = 63;
    v79 = (v78 + 1);
    do
    {
      if (v77)
      {
        v80 = *(llvm::raw_ostream **)a1;
        v81 = *(_BYTE **)(*(_QWORD *)a1 + 32);
        if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v81)
        {
          llvm::raw_ostream::write(v80, "|", 1uLL);
        }
        else
        {
          *v81 = 124;
          ++*((_QWORD *)v80 + 4);
        }
      }
      v82 = *(llvm::raw_ostream **)a1;
      v83 = *(_WORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v83 > 1uLL)
      {
        *v83 = 25660;
        *((_QWORD *)v82 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<d", 2uLL);
      }
      sub_1C5E21910(v82, v77, 0, 0, 0);
      v84 = (_BYTE *)*((_QWORD *)v82 + 4);
      if (*((_BYTE **)v82 + 3) == v84)
      {
        llvm::raw_ostream::write(v82, ">", 1uLL);
      }
      else
      {
        *v84 = 62;
        ++*((_QWORD *)v82 + 4);
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * v77);
      llvm::EVT::getEVTString((llvm::EVT *)&__p, (uint64_t)&v127);
      llvm::DOT::EscapeString((char *)&v127, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &__p;
      else
        v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        v86 = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v82, (const char *)v85, v86);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v127.__r_.__value_.__l.__data_);
      ++v77;
    }
    while (v79 != v77);
    if ((_DWORD)v79 != v76)
    {
      v87 = *(llvm::raw_ostream **)a1;
      v88 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v88) > 0x11)
      {
        *(_WORD *)(v88 + 16) = 11822;
        *(_OWORD *)v88 = *(_OWORD *)"|<d64>truncated...";
        *((_QWORD *)v87 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v87, "|<d64>truncated...", 0x12uLL);
      }
    }
  }
  v89 = *(llvm::raw_ostream **)a1;
  v90 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v90)
  {
    llvm::raw_ostream::write(v89, "}", 1uLL);
  }
  else
  {
    *v90 = 125;
    ++*((_QWORD *)v89 + 4);
  }
  v91 = *(llvm::raw_ostream **)a1;
  v92 = *(_WORD **)(*(_QWORD *)a1 + 32);
  v93 = *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v92;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v93 <= 0xD)
    {
      v94 = "</tr></table>>";
      v95 = 14;
LABEL_196:
      llvm::raw_ostream::write(v91, v94, v95);
      goto LABEL_197;
    }
    qmemcpy(v92, "</tr></table>>", 14);
    v103 = *((_QWORD *)v91 + 4) + 14;
  }
  else
  {
    if (v93 <= 1)
    {
      v94 = "}\"";
      v95 = 2;
      goto LABEL_196;
    }
    *v92 = 8829;
    v103 = *((_QWORD *)v91 + 4) + 2;
  }
  *((_QWORD *)v91 + 4) = v103;
LABEL_197:
  v96 = *(llvm::raw_ostream **)a1;
  v97 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v97) > 2)
  {
    *(_BYTE *)(v97 + 2) = 10;
    *(_WORD *)v97 = 15197;
    *((_QWORD *)v96 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v96, "];\n", 3uLL);
  }
  v98 = *(unsigned __int16 *)(a2 + 56);
  if (*(_WORD *)(a2 + 56))
  {
    v99 = 0;
    v100 = 0;
    do
    {
      sub_1C5D7711C((llvm::raw_ostream *)a1, a2, v99, a2, v100);
      v101 = v100 + 1;
      v100 = v100 & 0xFFFFFFFF00000000 | (v100 + 1);
      if (v99 == 63)
        break;
      ++v99;
    }
    while (v101 != v98);
  }
  else
  {
    v100 = 0;
  }
  if ((_DWORD)v100 != v98)
  {
    do
    {
      sub_1C5D7711C((llvm::raw_ostream *)a1, a2, 64, a2, v100);
      v102 = v100 + 1;
      v100 = v100 & 0xFFFFFFFF00000000 | (v100 + 1);
    }
    while (v102 != v98);
  }
  v107 = off_1E81A6E70;
  if (v114 == 1 && v109)
    MEMORY[0x1CAA32F9C](v109, 0x1000C8077774924);
  if (SHIBYTE(v117) < 0)
    operator delete(v116[0]);
  if (v119 < 0)
    operator delete(v118[0]);
}

void sub_1C5D7711C(llvm::raw_ostream *a1, unint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + 32);
  v6 = a5;
  v7 = *(_QWORD *)(v5 + 40 * a5);
  if (v7)
  {
    v13 = *(_DWORD *)(v5 + 40 * a5 + 8);
    if (a5)
    {
      v14 = (char *)&v20;
      do
      {
        *--v14 = (v6 % 0xA) | 0x30;
        v15 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v15);
    }
    else
    {
      v14 = &v19;
      v19 = 48;
    }
    sub_1C4E61270(__p, v14, (char *)&v20, (char *)&v20 - v14);
    if ((v18 & 0x80u) == 0)
      v16 = v18;
    else
      v16 = (unint64_t)__p[1];
    if ((char)v18 < 0)
      operator delete(__p[0]);
    if (!v16)
      a3 = -1;
    sub_1C6373CD4((char *)__p, a4, a5);
    sub_1C5D77278(a1, a2, a3, v7, v13, (uint64_t)__p);
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
}

llvm::raw_ostream *sub_1C5D77278(llvm::raw_ostream *result, unint64_t a2, int a3, unint64_t a4, int a5, uint64_t a6)
{
  llvm::raw_ostream **v10;
  unint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  _QWORD *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  char v20;
  int v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  char v25;
  BOOL v26;
  const char *v27;
  size_t v28;
  size_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  _WORD *v32;

  if (a3 <= 64)
  {
    v10 = (llvm::raw_ostream **)result;
    if (a5 >= 64)
      v11 = 64;
    else
      v11 = a5;
    v12 = *(llvm::raw_ostream **)result;
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 4)
    {
      *(_BYTE *)(v13 + 4) = 101;
      *(_DWORD *)v13 = 1685016073;
      *((_QWORD *)v12 + 4) += 5;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v12, "\tNode", 5uLL);
    }
    llvm::write_hex(v12, a2, 3, 0, 0);
    if ((a3 & 0x80000000) == 0)
    {
      v14 = *v10;
      v15 = (_WORD *)*((_QWORD *)*v10 + 4);
      if (*((_QWORD *)*v10 + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 29498;
        *((_QWORD *)v14 + 4) += 2;
      }
      else
      {
        v14 = llvm::raw_ostream::write(v14, ":s", 2uLL);
      }
      sub_1C5E21910(v14, a3, 0, 0, 0);
    }
    v16 = *v10;
    v17 = (_QWORD *)*((_QWORD *)*v10 + 4);
    if (*((_QWORD *)*v10 + 3) - (_QWORD)v17 > 7uLL)
    {
      *v17 = 0x65646F4E203E2D20;
      *((_QWORD *)v16 + 4) += 8;
    }
    else
    {
      v16 = llvm::raw_ostream::write(v16, " -> Node", 8uLL);
    }
    llvm::write_hex(v16, a4, 3, 0, 0);
    if ((v11 & 0x80000000) == 0)
    {
      v18 = *v10;
      v19 = (_WORD *)*((_QWORD *)*v10 + 4);
      if (*((_QWORD *)*v10 + 3) - (_QWORD)v19 > 1uLL)
      {
        *v19 = 25658;
        *((_QWORD *)v18 + 4) += 2;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v18, ":d", 2uLL);
      }
      sub_1C5E21910(v18, v11, 0, 0, 0);
    }
    v20 = *(_BYTE *)(a6 + 23);
    v21 = v20;
    v22 = v20 & 0x7F;
    if (v21 < 0)
      v22 = *(_QWORD *)(a6 + 8);
    if (v22)
    {
      v23 = *v10;
      v24 = (_BYTE *)*((_QWORD *)*v10 + 4);
      if (*((_BYTE **)*v10 + 3) == v24)
      {
        v23 = llvm::raw_ostream::write(v23, "[", 1uLL);
      }
      else
      {
        *v24 = 91;
        ++*((_QWORD *)v23 + 4);
      }
      v25 = *(_BYTE *)(a6 + 23);
      v26 = v25 < 0;
      if (v25 >= 0)
        v27 = (const char *)a6;
      else
        v27 = *(const char **)a6;
      v28 = v25 & 0x7F;
      if (v26)
        v29 = *(_QWORD *)(a6 + 8);
      else
        v29 = v28;
      v30 = llvm::raw_ostream::write(v23, v27, v29);
      v31 = (_BYTE *)*((_QWORD *)v30 + 4);
      if (*((_BYTE **)v30 + 3) == v31)
      {
        llvm::raw_ostream::write(v30, "]", 1uLL);
      }
      else
      {
        *v31 = 93;
        ++*((_QWORD *)v30 + 4);
      }
    }
    result = *v10;
    v32 = (_WORD *)*((_QWORD *)*v10 + 4);
    if (*((_QWORD *)*v10 + 3) - (_QWORD)v32 > 1uLL)
    {
      *v32 = 2619;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, ";\n", 2uLL);
    }
  }
  return result;
}

void ***sub_1C5D7751C(void ***result)
{
  void ***v1;
  void **v2;

  v1 = result;
  v2 = *result;
  if ((*result & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    result = (void ***)MEMORY[0x1CAA32FC0](v2, 0x1080C40EF38A13ELL);
  }
  *v1 = (void **)1;
  return result;
}

void *sub_1C5D77578(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t FirstNonPHI;
  uint64_t v7;
  uint64_t i;
  _OWORD *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t j;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  unsigned __int8 **v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  unsigned __int8 **v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unsigned __int8 **v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  BOOL v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  char v80;
  uint64_t *v81;
  int v82;
  unint64_t v83;
  int v84;
  __int128 *v85;
  unsigned __int8 *v86;
  int v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  unsigned int *v110;
  uint64_t *v111;
  int v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  void **v124;
  void *v125;
  uint64_t v126;
  __int16 v127;
  unsigned __int8 **v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t **v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  void **v145;
  void *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  void **v156;
  void *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  _QWORD *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  void **v168;
  void *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  _QWORD *v174;
  unsigned int v175;
  uint64_t v176;
  _QWORD *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  __int128 v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t **v185;
  uint64_t v186;
  uint64_t **v187;
  unint64_t v188;
  unsigned int v189;
  char *v190;
  char *v191;
  unint64_t v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int16 *v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  void **v202;
  void *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int16 *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  llvm::GCRelocateInst **v214;
  uint64_t v215;
  llvm::GCRelocateInst *v216;
  unsigned __int8 *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  llvm::GCRelocateInst **v223;
  uint64_t v224;
  llvm::EVT ***v225;
  unsigned __int8 *v226;
  uint64_t v227;
  uint64_t v228;
  llvm::EVT **v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  unsigned __int8 **v234;
  unsigned __int8 *v235;
  __int128 v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned __int8 **v240;
  uint64_t v241;
  unsigned __int8 *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t **v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  unsigned __int16 **v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  int v259;
  unsigned __int8 **v260;
  unsigned __int8 *v261;
  uint64_t v262;
  __int16 v263;
  int v264;
  uint64_t v265;
  uint64_t v267;
  llvm::GCRelocateInst **v268;
  uint64_t v269;
  llvm::GCRelocateInst *v270;
  unsigned __int8 *BasePtr;
  uint64_t v272;
  unsigned __int8 *DerivedPtr;
  uint64_t v274;
  __int128 v275;
  unsigned __int16 *v276;
  void *v277;
  uint64_t *v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285[2];
  int v286;
  _QWORD v287[2];
  unsigned __int8 *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  void **v292;
  unsigned __int8 **v293;
  uint64_t *v294;
  int *v295;
  void ***v296;
  int *v297;
  void **v298;
  int v299;
  unsigned __int8 *v300;
  uint64_t v301;
  int v302;
  int v303;
  void *v304;
  uint64_t v305;
  _QWORD v306[31];
  void *v307;
  uint64_t v308;
  _BYTE v309[376];
  void *v310;
  uint64_t v311;
  _BYTE v312[128];
  void *v313;
  uint64_t v314;
  _BYTE v315[256];
  void *v316;
  uint64_t v317;
  _BYTE v318[160];
  void *__src;
  uint64_t v320;
  unsigned __int16 *v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  _BYTE v325[128];
  _QWORD **v326;
  _QWORD *v327[4];

  v327[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v284 = a1 + 248;
  sub_1C6373D90((unsigned int *)(a1 + 248));
  *(_DWORD *)(a1 + 280) = 0;
  sub_1C5D7751C((void ***)(a1 + 272));
  sub_1C496F5AC((unint64_t *)(a1 + 272), *(unsigned int *)(*(_QWORD *)(a1 + 912) + 432), 0);
  v316 = v318;
  v317 = 0xA00000000;
  v313 = v315;
  v314 = 0x1000000000;
  v310 = v312;
  v311 = 0x1000000000;
  v285[0] = 0;
  v285[1] = 0;
  v286 = 0;
  v4 = *(_BYTE *)(a2 + 4352);
  v303 = dword_1ED8259A8;
  v323 = v325;
  v324 = 0x800000000;
  v327[1] = 0;
  v327[0] = 0;
  v326 = v327;
  if (!byte_1ED8258E8)
  {
    v5 = *(_QWORD *)(a2 + 448);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 16) == 33)
      {
        FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v5 - 64));
        v7 = *(unsigned int *)(a2 + 296);
        if ((_DWORD)v7)
        {
          v267 = FirstNonPHI;
          v268 = *(llvm::GCRelocateInst ***)(a2 + 288);
          v269 = 8 * v7;
          do
          {
            v270 = *v268;
            if (*((_QWORD *)*v268 - 4 * (*((_DWORD *)*v268 + 5) & 0x7FFFFFF)) == v267)
            {
              BasePtr = (unsigned __int8 *)llvm::GCRelocateInst::getBasePtr(*v268);
              v304 = sub_1C635FDC4(a1, BasePtr);
              v305 = v272;
              sub_1C5D79760((uint64_t)&v323, (uint64_t *)&v304);
              DerivedPtr = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(v270);
              v304 = sub_1C635FDC4(a1, DerivedPtr);
              v305 = v274;
              sub_1C5D79760((uint64_t)&v323, (uint64_t *)&v304);
            }
            ++v268;
            v269 -= 8;
          }
          while (v269);
        }
      }
    }
  }
  v304 = (void *)1;
  for (i = 8; i != 264; i += 32)
  {
    v9 = (_OWORD *)((char *)&v304 + i);
    *v9 = xmmword_1C6429E90;
    v9[1] = xmmword_1C6429E90;
  }
  v307 = v309;
  v308 = 0x1000000000;
  v300 = 0;
  v301 = 0;
  v302 = 0;
  v299 = 0;
  v298 = &v323;
  v291 = a1;
  v292 = &v304;
  v293 = &v300;
  v294 = v285;
  v295 = &v303;
  v296 = &v298;
  v297 = &v299;
  v10 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned __int8 ***)(a2 + 144);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      sub_1C5D79DCC((uint64_t)&v291, v13);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v14)
  {
    v15 = *(unsigned __int8 ***)a2;
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      sub_1C5D79DCC((uint64_t)&v291, v17);
      v16 -= 8;
    }
    while (v16);
  }
  v18 = *(_QWORD *)(a2 + 4344);
  if (v18)
  {
    v19 = *(unsigned __int8 ***)(a2 + 4336);
    for (j = 32 * v18; j; j -= 32)
    {
      v21 = *v19;
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
      v23 = sub_1C635FDC4(a1, *v19);
      if (*(_BYTE *)(v23[5] + 16 * v24) && *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)(v23[5] + 16 * v24) + 96))
      {
        if (sub_1C5D7988C(*(_QWORD *)v21, *(_QWORD *)(a1 + 928)))
        {
          v25 = sub_1C635FDC4(a1, v21);
          if ((sub_1C6374940(v285[0], v286, (unint64_t)v25, v26, &__src) & 1) != 0)
            goto LABEL_23;
        }
        else if ((v4 & 2) != 0 || byte_1ED825828)
        {
          goto LABEL_23;
        }
      }
      sub_1C5D79F88(v21, (unint64_t *)a1);
LABEL_23:
      v19 += 4;
    }
  }
  v27 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v27)
  {
    v28 = *(unsigned __int8 ***)(a2 + 144);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      v31 = sub_1C635FDC4(a1, *v28);
      if ((sub_1C6374940(v285[0], v286, (unint64_t)v31, v32, &__src) & 1) == 0)
        sub_1C5D79F88(v30, (unint64_t *)a1);
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v33 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v33)
  {
    v34 = *(unsigned __int8 ***)a2;
    v35 = 8 * v33;
    do
    {
      v36 = *v34;
      v37 = sub_1C635FDC4(a1, *v34);
      if ((sub_1C6374940(v285[0], v286, (unint64_t)v37, v38, &__src) & 1) == 0)
        sub_1C5D79F88(v36, (unint64_t *)a1);
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  sub_1C5D78DD4((uint64_t)&v316, (uint64_t *)a1, *(int *)(a2 + 4344));
  v39 = *(_QWORD *)(a2 + 4344);
  if (v39)
  {
    v64 = *(uint64_t **)(a2 + 4336);
    v65 = 32 * v39;
    do
    {
      v66 = (unsigned __int8 *)*v64;
      if (*v64)
        v67 = *(_BYTE *)(*v64 + 16) == 21;
      else
        v67 = 0;
      if (!v67
        || (v68 = sub_1C632BB28(*(_QWORD *)(a1 + 912), *v64), v68 == 0x7FFFFFFF)
        || (v69 = v68,
            v70 = *(_QWORD *)(a1 + 832),
            v71 = *(_QWORD *)(**(_QWORD **)(v70 + 40) + 40),
            v72 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v70 + 24) + 32))(*(_QWORD *)(v70 + 24), v71 + 272, *(unsigned int *)(v71 + 276)), (v73 = sub_1C5D406AC(v70, v69, (llvm *)v72, 0, 0)) == 0))
      {
        v73 = (uint64_t)sub_1C635FDC4(a1, v66);
      }
      v75 = v73;
      v76 = v74;
      v77 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
      v78 = sub_1C635FDC4(a1, v66);
      if (*(_BYTE *)(v78[5] + 16 * v79) && *(_QWORD *)(v77 + 8 * *(unsigned __int8 *)(v78[5] + 16 * v79) + 96))
      {
        if (sub_1C5D7988C(*(_QWORD *)v66, *(_QWORD *)(a1 + 928)))
        {
          v81 = sub_1C635FDC4(a1, v66);
          v80 = sub_1C6374940(v285[0], v286, (unint64_t)v81, v82, &__src) ^ 1;
        }
        else
        {
          v80 = (v4 & 2) == 0 && byte_1ED825828 == 0;
        }
      }
      else
      {
        v80 = 1;
      }
      sub_1C5D7A10C(v75, v76, v80, (uint64_t)&v316, (uint64_t)&v310, a1);
      v64 += 4;
      v65 -= 32;
    }
    while (v65);
  }
  sub_1C5D78DD4((uint64_t)&v316, (uint64_t *)a1, v308);
  if ((_DWORD)v308)
  {
    v40 = (unint64_t *)v307;
    v41 = (unint64_t *)((char *)v307 + 16 * v308);
    do
    {
      v42 = *v40;
      v43 = v40[1];
      v40 += 2;
      v44 = sub_1C6374940(v285[0], v286, v42, v43, &__src);
      sub_1C5D7A10C(v42, v43, v44 ^ 1, (uint64_t)&v316, (uint64_t)&v310, a1);
    }
    while (v40 != v41);
  }
  sub_1C6374848((char *)&v304);
  __src = &v321;
  v320 = 0x1000000000;
  if ((_DWORD)v308)
    sub_1C62F45E8((uint64_t)&__src, (uint64_t)&v307);
  sub_1C62F45E8((uint64_t)&v313, (uint64_t)&__src);
  if (__src != &v321)
    free(__src);
  __src = &v321;
  v320 = 0x400000000;
  v45 = *(_QWORD *)(a2 + 440);
  if (v45)
  {
    v46 = *(unsigned __int8 ***)(a2 + 432);
    v47 = 32 * v45;
    do
    {
      v48 = sub_1C635FDC4(a1, *v46);
      v49 = *((unsigned __int16 *)v48 + 12);
      if (v49 == 39 || v49 == 15)
      {
        v51 = (uint64_t)v48;
        v52 = *(_QWORD *)(a1 + 832);
        v53 = *((_DWORD *)v48 + 19);
        v54 = *(_QWORD *)(**(_QWORD **)(v52 + 40) + 40);
        v55 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v52 + 24) + 32))(*(_QWORD *)(v52 + 24), v54 + 272, *(unsigned int *)(v54 + 276));
        v56 = sub_1C5D406AC(v52, v53, (llvm *)v55, 0, 1);
        v58 = v57;
        v59 = v320;
        if (v320 >= (unint64_t)HIDWORD(v320))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v321, v320 + 1, 16);
          v59 = v320;
        }
        v60 = (uint64_t *)((char *)__src + 16 * v59);
        *v60 = v56;
        v60[1] = v58;
        LODWORD(v320) = v320 + 1;
        sub_1C5D7A804(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 40), v51);
        v62 = v61;
        v63 = v311;
        if (v311 >= (unint64_t)HIDWORD(v311))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v310, (uint64_t)v312, v311 + 1, 8);
          v63 = v311;
        }
        *((_QWORD *)v310 + v63) = v62;
        LODWORD(v311) = v311 + 1;
      }
      v46 += 4;
      v47 -= 32;
    }
    while (v47);
    LODWORD(v45) = v320;
  }
  sub_1C5D78DD4((uint64_t)&v316, (uint64_t *)a1, v45);
  sub_1C612E234((unsigned int *)&v316, __src, (_BYTE *)__src + 16 * v320);
  sub_1C5D78DD4((uint64_t)&v316, (uint64_t *)a1, *(unsigned int *)(a2 + 152));
  v83 = *(_QWORD *)a1;
  v84 = *(_DWORD *)(a1 + 816);
  *(_QWORD *)&v290 = 0;
  DWORD2(v290) = v84;
  if (v83)
  {
    v85 = (__int128 *)(v83 + 48);
    if (v85 != &v290)
    {
      v86 = *(unsigned __int8 **)v85;
      *(_QWORD *)&v290 = v86;
      if (v86)
        llvm::MetadataTracking::track((uint64_t)&v290, v86, 2);
    }
  }
  if (*(_DWORD *)(a2 + 152))
  {
    v90 = 0;
    do
    {
      v288 = (unsigned __int8 *)sub_1C635FDC4(a1, *(unsigned __int8 **)(*(_QWORD *)a2 + 8 * v90));
      v289 = v91;
      v92 = *(_QWORD *)(a1 + 832);
      v93 = sub_1C63748C8((uint64_t)&v300, (uint64_t)&v288);
      v94 = sub_1C6366AB4(v92, *(unsigned int *)(v93 + 16), (const llvm::APInt *)&v290, (llvm *)6, 0, 1, 0);
      v96 = v95;
      v97 = v317;
      if (v317 >= (unint64_t)HIDWORD(v317))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v316, (uint64_t)v318, v317 + 1, 16);
        v97 = v317;
      }
      v98 = (char *)v316 + 16 * v97;
      *v98 = v94;
      v98[1] = v96;
      LODWORD(v317) = v317 + 1;
      v287[0] = sub_1C635FDC4(a1, *(unsigned __int8 **)(*(_QWORD *)(a2 + 144) + 8 * v90));
      v287[1] = v99;
      v100 = *(_QWORD *)(a1 + 832);
      v101 = sub_1C63748C8((uint64_t)&v300, (uint64_t)v287);
      v102 = sub_1C6366AB4(v100, *(unsigned int *)(v101 + 16), (const llvm::APInt *)&v290, (llvm *)6, 0, 1, 0);
      v104 = v103;
      v105 = v317;
      if (v317 >= (unint64_t)HIDWORD(v317))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v316, (uint64_t)v318, v317 + 1, 16);
        v105 = v317;
      }
      v106 = (char *)v316 + 16 * v105;
      *v106 = v102;
      v106[1] = v104;
      LODWORD(v317) = v317 + 1;
      ++v90;
    }
    while (v90 < *(unsigned int *)(a2 + 152));
  }
  if ((_QWORD)v290)
    llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
  if (__src != &v321)
    free(__src);
  MEMORY[0x1CAA32FB4](v300, 8);
  if (v307 != v309)
    free(v307);
  if ((v304 & 1) == 0)
    MEMORY[0x1CAA32FB4](v305, 8);
  sub_1C47655E8((uint64_t)&v326, v327[0]);
  if (v323 != v325)
    free(v323);
  *(_QWORD *)(a2 + 480) = sub_1C635C370(a1);
  *(_DWORD *)(a2 + 488) = v87;
  sub_1C6363864(a1, a2 + 480, *(_QWORD *)(a2 + 4368), (uint64_t)&v304);
  v88 = v306[0];
  if (*(_BYTE *)(*(_QWORD *)(a2 + 496) + 8) != 7)
  {
    v89 = *(unsigned __int16 *)(v306[0] + 24);
    if (v89 == 253)
    {
      v88 = **(_QWORD **)(v306[0] + 32);
    }
    else
    {
      while (v89 == 50)
      {
        v88 = **(_QWORD **)(v88 + 32);
        v89 = *(unsigned __int16 *)(v88 + 24);
      }
    }
  }
  v107 = **(_QWORD **)(v88 + 32);
  v108 = *(uint64_t ***)(v107 + 32);
  v109 = v108[1];
  if (*(_WORD *)(v107 + 56)
    && (v110 = (unsigned int *)&v108[5 * *(unsigned __int16 *)(v107 + 56) - 5],
        v111 = *(uint64_t **)v110,
        *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v110 + 40) + 16 * v110[2]) == 172))
  {
    v281 = v110[2];
    v112 = 0;
  }
  else
  {
    v111 = 0;
    v281 = 0;
    v112 = 1;
  }
  v277 = v304;
  v113 = *v108;
  v283 = v107;
  v280 = *(_QWORD *)(a2 + 4352);
  if ((v280 & 1) != 0)
  {
    v304 = v306;
    v306[0] = v113;
    v306[1] = v109;
    v278 = v109;
    v305 = 0x800000001;
    v115 = *(_QWORD *)(a2 + 464);
    if (v115)
    {
      v128 = *(unsigned __int8 ***)(a2 + 456);
      v129 = 32 * v115;
      do
      {
        v130 = *v128;
        v131 = sub_1C635FDC4(a1, *v128);
        v133 = v132;
        v134 = v305;
        if (v305 >= (unint64_t)HIDWORD(v305))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v305 + 1, 16);
          v134 = v305;
        }
        v135 = (uint64_t **)((char *)v304 + 16 * v134);
        *v135 = v131;
        v135[1] = v133;
        v116 = v305 + 1;
        LODWORD(v305) = v305 + 1;
        if (*(_BYTE *)(*(_QWORD *)v130 + 8) == 15)
        {
          v136 = sub_1C5D435A0(*(_QWORD *)(a1 + 832), (uint64_t)v130);
          v138 = v137;
          v139 = v305;
          if (v305 >= (unint64_t)HIDWORD(v305))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v305 + 1, 16);
            v139 = v305;
          }
          v140 = (unint64_t *)((char *)v304 + 16 * v139);
          *v140 = v136;
          v140[1] = v138;
          v116 = v305 + 1;
          LODWORD(v305) = v305 + 1;
        }
        v128 += 4;
        v129 -= 32;
      }
      while (v129);
    }
    else
    {
      v116 = 1;
    }
    v107 = v283;
    if ((v112 & 1) == 0)
    {
      if (v116 >= HIDWORD(v305))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v116 + 1, 16);
        v116 = v305;
      }
      v117 = (uint64_t **)((char *)v304 + 16 * v116);
      *v117 = v111;
      v117[1] = (uint64_t *)v281;
      LODWORD(v305) = v305 + 1;
    }
    v118 = sub_1C636A8B4(*(_QWORD *)(a1 + 832), 1, 0, 172, 0);
    v120 = v119;
    v121 = *(_QWORD *)(a1 + 832);
    v122 = *(_QWORD *)a1;
    v123 = *(_DWORD *)(a1 + 816);
    __src = 0;
    LODWORD(v320) = v123;
    if (v122)
    {
      v124 = (void **)(v122 + 48);
      if (v124 != &__src)
      {
        v125 = *v124;
        __src = v125;
        if (v125)
          llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v125, 2);
      }
    }
    v126 = *(_QWORD *)(v121 + 832);
    if (v126)
      v127 = *(_WORD *)(v126 + 8);
    else
      v127 = 0;
    v113 = sub_1C636D410(v121, (const char *)0x13A, (const llvm::APInt *)&__src, v118, v120, (uint64_t *)v304, v305, v127);
    if (__src)
      llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
    if (v304 != v306)
      free(v304);
    v114 = (unint64_t)v278 & 0xFFFFFFFF00000000;
    v281 = 1;
    v111 = v113;
  }
  else
  {
    v114 = (unint64_t)v108[1];
  }
  v304 = v306;
  v305 = 0x2800000000;
  v141 = *(_QWORD *)(a1 + 832);
  v142 = *(unsigned int *)(a2 + 472);
  v143 = *(_QWORD *)a1;
  v144 = *(_DWORD *)(a1 + 816);
  __src = 0;
  LODWORD(v320) = v144;
  if (v143)
  {
    v145 = (void **)(v143 + 48);
    if (v145 != &__src)
    {
      v146 = *v145;
      __src = v146;
      if (v146)
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v146, 2);
    }
  }
  v147 = sub_1C6366AB4(v141, v142, (const llvm::APInt *)&__src, (llvm *)6, 0, 1, 0);
  v149 = v148;
  v150 = v305;
  if (v305 >= HIDWORD(v305))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v305 + 1, 16);
    v150 = v305;
  }
  v151 = (char *)v304 + 16 * v150;
  *v151 = v147;
  v151[1] = v149;
  LODWORD(v305) = v305 + 1;
  if (__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  v152 = *(_QWORD *)(a1 + 832);
  v153 = *(unsigned int *)(a2 + 4360);
  v154 = *(_QWORD *)a1;
  v155 = *(_DWORD *)(a1 + 816);
  __src = 0;
  LODWORD(v320) = v155;
  if (v154)
  {
    v156 = (void **)(v154 + 48);
    if (v156 != &__src)
    {
      v157 = *v156;
      __src = v157;
      if (v157)
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v157, 2);
    }
  }
  v158 = sub_1C6366AB4(v152, v153, (const llvm::APInt *)&__src, (llvm *)5, 0, 1, 0);
  v160 = v159;
  v161 = v305;
  if (v305 >= HIDWORD(v305))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v305 + 1, 16);
    v161 = v305;
  }
  v162 = (char *)v304 + 16 * v161;
  *v162 = v158;
  v162[1] = v160;
  LODWORD(v305) = v305 + 1;
  if (__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  if (v112)
    v163 = -3;
  else
    v163 = -4;
  v164 = v163 + *(unsigned __int16 *)(v107 + 56);
  v165 = *(_QWORD *)(a1 + 832);
  v166 = *(_QWORD *)a1;
  v167 = *(_DWORD *)(a1 + 816);
  __src = 0;
  LODWORD(v320) = v167;
  if (v166)
  {
    v168 = (void **)(v166 + 48);
    if (v168 != &__src)
    {
      v169 = *v168;
      __src = v169;
      if (v169)
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v169, 2);
    }
  }
  v170 = sub_1C6366AB4(v165, v164, (const llvm::APInt *)&__src, (llvm *)5, 0, 1, 0);
  v172 = v171;
  v173 = v305;
  if (v305 >= HIDWORD(v305))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v305 + 1, 16);
    v173 = v305;
  }
  v174 = (char *)v304 + 16 * v173;
  *v174 = v170;
  v174[1] = v172;
  v175 = v305 + 1;
  LODWORD(v305) = v305 + 1;
  if (__src)
  {
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
    v175 = v305;
  }
  v176 = *(_QWORD *)(*(_QWORD *)(v107 + 32) + 40);
  if (v175 >= HIDWORD(v305))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v175 + 1, 16);
    v175 = v305;
  }
  v177 = (char *)v304 + 16 * v175;
  *v177 = v176;
  v177[1] = 0;
  v178 = v305 + 1;
  LODWORD(v305) = v305 + 1;
  v179 = *(_QWORD *)(v107 + 32);
  v180 = -80;
  if (v112)
    v180 = -40;
  v181 = (char *)(v179 + 40 * *(unsigned __int16 *)(v107 + 56) + v180);
  sub_1C480BFA4((unsigned int *)&v304, (uint64_t)v304 + 16 * v178, (char *)(v179 + 80), v181);
  sub_1C5D78DD4((uint64_t)&v304, (uint64_t *)a1, *(unsigned int *)(a2 + 512));
  sub_1C5D78DD4((uint64_t)&v304, (uint64_t *)a1, *(_QWORD *)(a2 + 4352));
  sub_1C6370800((unsigned int *)&v304, (uint64_t)v304 + 16 * v305, v316, (_BYTE *)v316 + 16 * v317);
  v182 = *(_OWORD *)v181;
  v183 = v305;
  if (v305 >= HIDWORD(v305))
  {
    v279 = *(_OWORD *)v181;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v305 + 1, 16);
    v182 = v279;
    v183 = v305;
  }
  *((_OWORD *)v304 + v183) = v182;
  v184 = (v305 + 1);
  LODWORD(v305) = v184;
  if (v184 >= HIDWORD(v305))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v184 + 1, 16);
    LODWORD(v184) = v305;
  }
  v185 = (uint64_t **)((char *)v304 + 16 * v184);
  *v185 = v113;
  v185[1] = (uint64_t *)v114;
  v186 = (v305 + 1);
  LODWORD(v305) = v305 + 1;
  if (v111)
  {
    if (v186 >= HIDWORD(v305))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)v306, v186 + 1, 16);
      LODWORD(v186) = v305;
    }
    v187 = (uint64_t **)((char *)v304 + 16 * v186);
    *v187 = v111;
    v187[1] = (uint64_t *)v281;
    LODWORD(v305) = v305 + 1;
  }
  v188 = (unint64_t)v325;
  v323 = v325;
  v324 = 0x800000000;
  v189 = v314;
  if ((_DWORD)v314)
  {
    v190 = (char *)v313;
    v191 = (char *)v313 + 16 * v314;
    do
    {
      v192 = *(_QWORD *)v190;
      v193 = *((unsigned int *)v190 + 2);
      if (sub_1C6374940(v285[0], v286, *(_QWORD *)v190, *((_DWORD *)v190 + 2), &__src))
      {
        v194 = *(_OWORD *)(*(_QWORD *)(v192 + 40) + 16 * v193);
        v195 = v324;
        if (v324 >= (unint64_t)HIDWORD(v324))
        {
          v282 = *(_OWORD *)(*(_QWORD *)(v192 + 40) + 16 * v193);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v323, (uint64_t)v325, v324 + 1, 16);
          v194 = v282;
          v195 = v324;
        }
        *((_OWORD *)v323 + v195) = v194;
        LODWORD(v324) = v324 + 1;
      }
      v190 += 16;
    }
    while (v190 != v191);
    v189 = v324;
    if (v324 >= HIDWORD(v324))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v323, (uint64_t)v325, v324 + 1, 16);
      v189 = v324;
    }
  }
  *((_OWORD *)v323 + v189) = xmmword_1C64169E0;
  v196 = (v324 + 1);
  LODWORD(v324) = v196;
  if (v196 >= HIDWORD(v324))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v323, (uint64_t)v325, v196 + 1, 16);
    LODWORD(v196) = v324;
  }
  *((_OWORD *)v323 + v196) = xmmword_1C866D130;
  v197 = (unsigned __int16 *)v324;
  v198 = v324 + 1;
  LODWORD(v324) = v324 + 1;
  v199 = *(_QWORD *)(a1 + 832);
  v200 = *(_QWORD *)a1;
  v201 = *(_DWORD *)(a1 + 816);
  __src = 0;
  LODWORD(v320) = v201;
  if (v200)
  {
    v202 = (void **)(v200 + 48);
    if (v202 != &__src)
    {
      v203 = *v202;
      __src = v203;
      if (v203)
      {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v203, 2);
        v198 = v324;
      }
    }
  }
  v276 = v197;
  v204 = (uint64_t *)v304;
  v205 = v305;
  v206 = sub_1C636AB20(v199, (uint64_t *)v323, v198);
  v208 = (unsigned __int16 *)sub_1C5D61678(v199, 31, (uint64_t)&__src, v206, v207, v204, v205);
  if (__src)
    llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
  sub_1C636E10C(*(void **)(a1 + 832), (uint64_t)v208, v310, v311);
  v291 = 0;
  v292 = 0;
  LODWORD(v293) = 0;
  v209 = *(unsigned int *)(a2 + 296);
  if ((_DWORD)v209)
  {
    v223 = *(llvm::GCRelocateInst ***)(a2 + 288);
    v224 = 8 * v209;
    do
    {
      v225 = (llvm::EVT ***)*v223;
      v226 = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(*v223);
      v300 = (unsigned __int8 *)sub_1C635FDC4(a1, v226);
      v301 = v227;
      if (sub_1C6374940(v285[0], v286, (unint64_t)v300, v227, &__src))
      {
        __src = 0;
        if ((sub_1C632C56C(&v291, (uint64_t)&v300, (uint64_t *)&__src) & 1) == 0)
        {
          v228 = *(unsigned int *)(sub_1C63748C8((uint64_t)v285, (uint64_t)&v300) + 16);
          v229 = *v225;
          v230 = sub_1C632B874(*(_QWORD *)(a1 + 912), *v225, 0);
          sub_1C635BCC4((uint64_t)&__src, *(llvm::EVT **)(*(_QWORD *)(a1 + 832) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), v230, (uint64_t)v229, 0);
          v231 = *(_QWORD *)(a1 + 832);
          v290 = *(_OWORD *)(v231 + 192);
          v232 = *(_QWORD *)a1;
          v233 = *(_DWORD *)(a1 + 816);
          v288 = 0;
          LODWORD(v289) = v233;
          if (v232)
          {
            v234 = (unsigned __int8 **)(v232 + 48);
            if (v234 != &v288)
            {
              v235 = *v234;
              v288 = v235;
              if (v235)
                llvm::MetadataTracking::track((uint64_t)&v288, v235, 2);
            }
          }
          v188 = v188 & 0xFFFFFFFF00000000 | v228;
          sub_1C5D12FF0((uint64_t)&__src, (uint64_t)v208, v188, (_QWORD *)v231, (const llvm::APInt *)&v288, (uint64_t *)&v290, 0, 0, 0xC8u);
          if (v288)
            llvm::MetadataTracking::untrack((uint64_t)&v288, v288);
          v236 = v290;
          v237 = *(unsigned int *)(a1 + 392);
          if (v237 >= *(unsigned int *)(a1 + 396))
          {
            v275 = v290;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 384, a1 + 400, v237 + 1, 16);
            v236 = v275;
            v237 = *(unsigned int *)(a1 + 392);
          }
          *(_OWORD *)(*(_QWORD *)(a1 + 384) + 16 * v237) = v236;
          ++*(_DWORD *)(a1 + 392);
          *(_DWORD *)(sub_1C6374B1C(&v291, (uint64_t)&v300) + 16) = v230;
          sub_1C63640DC((uint64_t)&__src);
        }
      }
      ++v223;
      v224 -= 8;
    }
    while (v224);
  }
  v210 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)&v290 = v210;
  v211 = sub_1C63063F0(*(_QWORD *)(a1 + 912) + 152, (uint64_t *)&v290);
  v212 = *(unsigned int *)(a2 + 296);
  if ((_DWORD)v212)
  {
    v213 = (uint64_t)(v211 + 1);
    v214 = *(llvm::GCRelocateInst ***)(a2 + 288);
    v215 = 8 * v212;
    do
    {
      v216 = *v214;
      v217 = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(*v214);
      v288 = v217;
      __src = sub_1C635FDC4(a1, v217);
      v320 = v218;
      v219 = sub_1C6373E0C(v284, (unint64_t)__src, v218);
      if (sub_1C6374940(v285[0], v286, (unint64_t)__src, v320, &v300))
      {
        v220 = *(unsigned int *)(sub_1C6374B1C(&v291, (uint64_t)&__src) + 16);
        v221 = 2;
      }
      else if (v219)
      {
        v220 = *(unsigned int *)(v219 + 76);
        v221 = 1;
      }
      else
      {
        if (*((_QWORD *)v216 + 5) != *(_QWORD *)(v210 + 40))
          sub_1C635FFB4(a1, v217);
        v221 = 0;
        v220 = 0xFFFFFFFFLL;
      }
      sub_1C6374B88(v213, (uint64_t *)&v288)[1] = v221 | (v220 << 32);
      ++v214;
      v215 -= 8;
    }
    while (v215);
  }
  if ((v280 & 1) != 0)
  {
    __src = &v321;
    v321 = v208;
    v322 = ((_DWORD)v276 - 1);
    v320 = 0x800000001;
    v238 = *(_QWORD *)(a2 + 464);
    if (v238)
    {
      v240 = *(unsigned __int8 ***)(a2 + 456);
      v241 = 32 * v238;
      do
      {
        v242 = *v240;
        v243 = sub_1C635FDC4(a1, *v240);
        v245 = v244;
        v246 = v320;
        if (v320 >= (unint64_t)HIDWORD(v320))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v321, v320 + 1, 16);
          v246 = v320;
        }
        v247 = (uint64_t **)((char *)__src + 16 * v246);
        *v247 = v243;
        v247[1] = v245;
        v239 = v320 + 1;
        LODWORD(v320) = v320 + 1;
        if (*(_BYTE *)(*(_QWORD *)v242 + 8) == 15)
        {
          v248 = sub_1C5D435A0(*(_QWORD *)(a1 + 832), (uint64_t)v242);
          v250 = v249;
          v251 = v320;
          if (v320 >= (unint64_t)HIDWORD(v320))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v321, v320 + 1, 16);
            v251 = v320;
          }
          v252 = (unint64_t *)((char *)__src + 16 * v251);
          *v252 = v248;
          v252[1] = v250;
          v239 = v320 + 1;
          LODWORD(v320) = v320 + 1;
        }
        v240 += 4;
        v241 -= 32;
      }
      while (v241);
      if (v239 >= HIDWORD(v320))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v321, v239 + 1, 16);
        v239 = v320;
      }
    }
    else
    {
      v239 = 1;
    }
    v222 = v283;
    v253 = (unsigned __int16 **)((char *)__src + 16 * v239);
    *v253 = v208;
    v253[1] = v276;
    LODWORD(v320) = v320 + 1;
    v254 = sub_1C636A8B4(*(_QWORD *)(a1 + 832), 1, 0, 172, 0);
    v256 = v255;
    v257 = *(_QWORD *)(a1 + 832);
    v258 = *(_QWORD *)a1;
    v259 = *(_DWORD *)(a1 + 816);
    v300 = 0;
    LODWORD(v301) = v259;
    if (v258)
    {
      v260 = (unsigned __int8 **)(v258 + 48);
      if (v260 != &v300)
      {
        v261 = *v260;
        v300 = v261;
        if (v261)
          llvm::MetadataTracking::track((uint64_t)&v300, v261, 2);
      }
    }
    v262 = *(_QWORD *)(v257 + 832);
    if (v262)
      v263 = *(_WORD *)(v262 + 8);
    else
      v263 = 0;
    v208 = (unsigned __int16 *)sub_1C636D410(v257, (const char *)0x13B, (const llvm::APInt *)&v300, v254, v256, (uint64_t *)__src, v320, v263);
    if (v300)
      llvm::MetadataTracking::untrack((uint64_t)&v300, v300);
    if (__src != &v321)
      free(__src);
  }
  else
  {
    v222 = v283;
  }
  v264 = v208[29];
  __src = v208;
  LODWORD(v320) = v264 - 2;
  v321 = v208;
  LODWORD(v322) = v264 - 1;
  sub_1C636F034(*(_QWORD *)(a1 + 832), v222, (uint64_t *)&__src);
  v265 = *(_QWORD *)(a1 + 832);
  sub_1C5D3DF28(v265, v222);
  sub_1C63655F0(v265, v222);
  sub_1C635C3F4(a1);
  MEMORY[0x1CAA32FB4](v291, 8);
  if (v323 != v325)
    free(v323);
  if (v304 != v306)
    free(v304);
  MEMORY[0x1CAA32FB4](v285[0], 8);
  if (v310 != v312)
    free(v310);
  if (v313 != v315)
    free(v313);
  if (v316 != v318)
    free(v316);
  return v277;
}

void *sub_1C5D78DD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned __int8 **v8;
  BOOL v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  int v23;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 204);
  v22 = 0;
  v23 = v7;
  v9 = v6 == 0;
  v8 = (unsigned __int8 **)(v6 + 48);
  v9 = v9 || v8 == &v22;
  if (!v9)
  {
    v10 = *v8;
    v22 = v10;
    if (v10)
      llvm::MetadataTracking::track((uint64_t)&v22, v10, 2);
  }
  v11 = sub_1C6366AB4(a2[104], 2, (const llvm::APInt *)&v22, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a1 + 8);
  if (v14 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a1 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a1 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  ++*(_DWORD *)(a1 + 8);
  result = sub_1C6366AB4(a2[104], a3, (const llvm::APInt *)&v22, (llvm *)6, 0, 1, 0);
  v17 = result;
  v19 = v18;
  v20 = *(unsigned int *)(a1 + 8);
  if (v20 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a1 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a1 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  ++*(_DWORD *)(a1 + 8);
  if (v22)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  return result;
}

uint64_t sub_1C5D78F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t ParamElementType;
  uint64_t *v20;
  uint64_t *v21;
  llvm::GCRelocateInst *v22;
  uint64_t v23;
  unsigned __int8 *DerivedPtr;
  uint64_t v25;
  uint64_t BasePtr;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  BOOL v58;
  _QWORD *v59;
  llvm::EVT **v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  unsigned __int8 **v65;
  unsigned __int8 *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t **v73;
  uint64_t *v74;
  _QWORD *v75;
  int v76;
  int v77;
  _QWORD *v78;
  uint64_t v80;
  __int128 v81;
  unsigned __int8 *v82;
  int v83;
  uint64_t v84[3];
  uint64_t *v85;
  uint64_t *v86;
  void *v87[2];
  _BYTE v88[128];
  _QWORD **v89;
  _QWORD *v90[2];
  _BYTE *v91;
  uint64_t v92;
  _BYTE v93[128];
  _BYTE *v94;
  uint64_t v95;
  _BYTE v96[17];
  _BYTE *v97;
  uint64_t v98;
  _BYTE v99[128];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD v119[194];
  _QWORD v120[66];
  _QWORD v121[194];
  _BYTE v122[96];
  __int128 v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v80 = v5;
  v7 = v6;
  v8 = v4;
  v127 = *MEMORY[0x1E0C80C00];
  v10 = sub_1C635FDC4(v4, *(unsigned __int8 **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 64));
  v11 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
  v12 = (_QWORD *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v12 = (_QWORD *)*v12;
  if (*(_DWORD *)v12)
  {
    v13 = v10[5] + 16 * v9;
    v10 = sub_1C61312D0(*(_QWORD *)(v8 + 832), *(llvm **)v13, *(_QWORD *)(v13 + 8));
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 832);
  v91 = v93;
  v92 = 0x1000000000;
  v94 = v96;
  v95 = 0x1000000000;
  v97 = v99;
  v98 = 0x1000000000;
  v100 = 0u;
  v101 = 0u;
  v102 = 0;
  v103 = -1;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 32;
  v108 = 0xFFFFFFFFLL;
  v109 = 0;
  v110 = 0;
  v111 = 0u;
  v112 = 0;
  v113 = v15;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = v119;
  v118 = 0x2000000000;
  v119[192] = v120;
  v119[193] = 0x2000000000;
  v120[64] = v121;
  v120[65] = 0x2000000000;
  v121[192] = v122;
  v121[193] = 0x400000000;
  v122[64] = 0;
  v122[88] = 0;
  v123 = 0u;
  v124 = -1;
  v125 = -1;
  v126 = 0;
  v16 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 96);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  v18 = *(_DWORD *)v17;
  ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v7 + 64), 2);
  sub_1C6363EB0(v8, (uint64_t)&v104, v7, 5u, v18, (uint64_t)v10, v14, **(_QWORD **)(ParamElementType + 16), 0);
  v87[0] = v88;
  v87[1] = (void *)0x800000000;
  v90[0] = 0;
  v90[1] = 0;
  v89 = v90;
  sub_1C57D75E8(v7, &v85);
  v20 = v85;
  v21 = v86;
  if (v85 != v86)
  {
    do
    {
      v22 = (llvm::GCRelocateInst *)*v20;
      v23 = v98;
      if (v98 >= (unint64_t)HIDWORD(v98))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v98 + 1, 8);
        v23 = v98;
      }
      *(_QWORD *)&v97[8 * v23] = v22;
      LODWORD(v98) = v98 + 1;
      DerivedPtr = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(v22);
      v84[0] = (uint64_t)sub_1C635FDC4(v8, DerivedPtr);
      v84[1] = v25;
      if ((sub_1C5D79760((uint64_t)v87, v84) & 0x100000000) != 0)
      {
        BasePtr = llvm::GCRelocateInst::getBasePtr(v22);
        v27 = v92;
        if (v92 >= (unint64_t)HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v93, v92 + 1, 8);
          v27 = v92;
        }
        *(_QWORD *)&v91[8 * v27] = BasePtr;
        LODWORD(v92) = v92 + 1;
        v28 = llvm::GCRelocateInst::getDerivedPtr(v22);
        v29 = v95;
        if (v95 >= (unint64_t)HIDWORD(v95))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, (uint64_t)v96, v95 + 1, 8);
          v29 = v95;
        }
        *(_QWORD *)&v94[8 * v29] = v28;
        LODWORD(v95) = v95 + 1;
      }
      ++v20;
    }
    while (v20 != v21);
    v20 = v85;
  }
  if (v20)
  {
    v86 = v20;
    operator delete(v20);
  }
  v30 = (uint64_t **)sub_1C6373E78(v7);
  v31 = sub_1C6373EC0(v7);
  if (v30 != (uint64_t **)v31)
  {
    v51 = (uint64_t **)v31;
    do
    {
      v52 = *v30;
      if (sub_1C5D7988C(**v30, *(_QWORD *)(v8 + 928)))
      {
        v85 = sub_1C635FDC4(v8, (unsigned __int8 *)v52);
        v86 = v53;
        if ((sub_1C5D79760((uint64_t)v87, (uint64_t *)&v85) & 0x100000000) != 0)
        {
          v54 = v92;
          if (v92 >= (unint64_t)HIDWORD(v92))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v93, v92 + 1, 8);
            v54 = v92;
          }
          *(_QWORD *)&v91[8 * v54] = v52;
          v55 = v95;
          LODWORD(v92) = v92 + 1;
          if (v95 >= (unint64_t)HIDWORD(v95))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, (uint64_t)v96, v95 + 1, 8);
            v55 = v95;
          }
          *(_QWORD *)&v94[8 * v55] = v52;
          LODWORD(v95) = v95 + 1;
        }
      }
      v30 += 4;
    }
    while (v30 != v51);
  }
  v32 = sub_1C63249D0(v7);
  v33 = sub_1C6324A18(v7);
  *(_QWORD *)&v100 = v32;
  *((_QWORD *)&v100 + 1) = (v33 - v32) >> 5;
  *(_QWORD *)&v101 = v7;
  v34 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
  v35 = (_QWORD *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u)
    v35 = (_QWORD *)*v35;
  v103 = *v35;
  v36 = sub_1C6373E78(v7);
  v37 = sub_1C6373EC0(v7);
  *(_QWORD *)&v123 = v36;
  *((_QWORD *)&v123 + 1) = (v37 - v36) >> 5;
  v38 = sub_1C6373F0C(v7);
  v39 = sub_1C6373F54(v7);
  *((_QWORD *)&v101 + 1) = v38;
  v102 = (v39 - v38) >> 5;
  v40 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
  v41 = *(_QWORD *)(v40 + 128);
  v42 = (uint64_t *)(v41 + 24);
  if (*(_DWORD *)(v41 + 32) >= 0x41u)
    v42 = (uint64_t *)*v42;
  v124 = *v42;
  v43 = *(_QWORD *)(v40 + 32);
  v44 = (_QWORD *)(v43 + 24);
  if (*(_DWORD *)(v43 + 32) >= 0x41u)
    v44 = (_QWORD *)*v44;
  v125 = *v44;
  v126 = v80;
  v45 = sub_1C5D77578(v8, (uint64_t)&v91);
  v47 = v46;
  v48 = *(_QWORD *)(v7 + 8);
  if (v48)
  {
    v50 = 0;
    v49 = 0;
    do
    {
      v56 = *(_QWORD *)(v48 + 24);
      v57 = sub_1C5458950(v56);
      if (v56)
        v58 = !v57;
      else
        v58 = 1;
      if (!v58)
      {
        if (*(_QWORD *)(v56 + 40) == *(_QWORD *)(v7 + 40))
          v49 = v56;
        else
          v50 = v56;
      }
      v48 = *(_QWORD *)(v48 + 8);
    }
    while (v48);
  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  if (v49 | v50)
  {
    if (v49)
    {
      v85 = (uint64_t *)v7;
      v59 = sub_1C6364290((uint64_t *)(v8 + 8), &v85);
      v59[1] = v45;
      *((_DWORD *)v59 + 4) = v47;
    }
    if (v50)
    {
      v60 = *(llvm::EVT ***)v50;
      v61 = sub_1C632B874(*(_QWORD *)(v8 + 912), v60, 0);
      sub_1C635BCC4((uint64_t)&v85, *(llvm::EVT **)(*(_QWORD *)(v8 + 832) + 56), *(_QWORD *)(*(_QWORD *)(v8 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v8 + 832) + 40) + 40) + 272), v61, (uint64_t)v60, ((unint64_t)*(unsigned __int16 *)(v7 + 18) >> 2) & 0x3FF | 0x100000000);
      v62 = *(_QWORD **)(v8 + 832);
      *(_OWORD *)v84 = (unint64_t)(v62 + 14);
      v63 = *(_QWORD *)v8;
      v64 = *(_DWORD *)(v8 + 816);
      v82 = 0;
      v83 = v64;
      if (v63)
      {
        v65 = (unsigned __int8 **)(v63 + 48);
        if (v65 != &v82)
        {
          v66 = *v65;
          v82 = v66;
          if (v66)
            llvm::MetadataTracking::track((uint64_t)&v82, v66, 2);
        }
      }
      sub_1C5D12FF0((uint64_t)&v85, (uint64_t)v45, v47, v62, (const llvm::APInt *)&v82, v84, 0, 0, 0xC8u);
      if (v82)
        llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
      v67 = *(_OWORD *)v84;
      v68 = *(unsigned int *)(v8 + 392);
      if (v68 >= *(_DWORD *)(v8 + 396))
      {
        v81 = *(_OWORD *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 384, v8 + 400, v68 + 1, 16);
        v67 = v81;
        LODWORD(v68) = *(_DWORD *)(v8 + 392);
      }
      *(_OWORD *)(*(_QWORD *)(v8 + 384) + 16 * v68) = v67;
      ++*(_DWORD *)(v8 + 392);
      v69 = (uint64_t *)(*(_QWORD *)(v8 + 912) + 80);
      v82 = (unsigned __int8 *)v7;
      *((_DWORD *)sub_1C6128C08(v69, &v82) + 2) = v61;
      sub_1C63640DC((uint64_t)&v85);
    }
  }
  else
  {
    v70 = *(_QWORD *)(v8 + 832);
    v71 = *(_QWORD *)v8;
    v72 = *(_DWORD *)(v8 + 816);
    v85 = 0;
    LODWORD(v86) = v72;
    if (v71)
    {
      v73 = (uint64_t **)(v71 + 48);
      if (v73 != &v85)
      {
        v74 = *v73;
        v85 = v74;
        if (v74)
          llvm::MetadataTracking::track((uint64_t)&v85, (unsigned __int8 *)v74, 2);
      }
    }
    v75 = sub_1C63662D4(v70, -1, (const llvm::APInt *)&v85, 0);
    v77 = v76;
    v84[0] = v7;
    v78 = sub_1C6364290((uint64_t *)(v8 + 8), v84);
    v78[1] = v75;
    *((_DWORD *)v78 + 4) = v77;
    if (v85)
      llvm::MetadataTracking::untrack((uint64_t)&v85, (unsigned __int8 *)v85);
  }
  sub_1C47655E8((uint64_t)&v89, v90[0]);
  if (v87[0] != v88)
    free(v87[0]);
  return sub_1C6374AB8((uint64_t)&v91);
}

unint64_t sub_1C5D79760(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v13;

  if (*(_QWORD *)(a1 + 160))
  {
    sub_1C6329FC8(a1 + 144, a2, a2);
    return ((unint64_t)v13 << 32) | 1;
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = 16 * v5;
      v8 = (_DWORD *)(v4 + 8);
      while (*((_QWORD *)v8 - 1) != v6 || *v8 != *((_DWORD *)a2 + 2))
      {
        v8 += 4;
        v7 -= 16;
        if (!v7)
          goto LABEL_7;
      }
      if (v7)
        return 1;
LABEL_7:
      if (v5 <= 7)
        goto LABEL_11;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5 - 16);
        sub_1C6329FC8(a1 + 144, v9, v9);
        LODWORD(v5) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v5;
      }
      while ((_DWORD)v5);
      sub_1C6329FC8(a1 + 144, a2, a2);
    }
    else
    {
      v6 = *a2;
LABEL_11:
      v10 = a2[1];
      if (v5 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 16);
        v4 = *(_QWORD *)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      v11 = (uint64_t *)(v4 + 16 * v5);
      *v11 = v6;
      v11[1] = v10;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

BOOL sub_1C5D7988C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  unsigned __int16 v4;
  BOOL v5;

  v2 = a1;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    v3 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 8);
  else
    v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 15)
  {
    v5 = 1;
    if (a2)
    {
      v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), a1);
      v2 = v4 != 0;
      if (v4 > 0xFFu)
        v5 = 0;
    }
    return v2 || v5;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1C5D79914(uint64_t a1, llvm::GCRelocateInst *this)
{
  unsigned __int8 *DerivedPtr;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *FixedStack;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _OWORD *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t ExtendedSizeInBits;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  __int128 v70;
  _OWORD v71[12];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  DerivedPtr = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(this);
  v5 = *(_QWORD *)(a1 + 912) + 152;
  *(_QWORD *)&v71[0] = llvm::GCProjectionInst::getStatepoint(this);
  v6 = sub_1C63063F0(v5, (uint64_t *)v71);
  *(_QWORD *)&v71[0] = 0;
  v7 = sub_1C6144BDC(v6[1], *((_DWORD *)v6 + 6), (uint64_t)DerivedPtr, v71);
  v8 = *(_QWORD *)&v71[0];
  if (!v7)
    v8 = v6[1] + 16 * *((unsigned int *)v6 + 6);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 == 1)
  {
    v21 = *(_DWORD *)(v8 + 12);
    v22 = *(_QWORD *)(a1 + 832);
    v23 = *(_QWORD *)(**(_QWORD **)(v22 + 40) + 40);
    v24 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v22 + 24) + 32))(*(_QWORD *)(v22 + 24), v23 + 272, *(unsigned int *)(v23 + 276));
    v25 = sub_1C5D406AC(v22, v21, (llvm *)v24, 0, 1);
    v66 = v26;
    v67 = v25;
    v27 = *(_QWORD **)(a1 + 832);
    v28 = v27[25];
    v65 = v27[24];
    v29 = v27[5];
    v30 = *(_QWORD *)(v29 + 56);
    FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v29 + 432), v21);
    v32 = (unint64_t)FixedStack | 4;
    if (FixedStack)
      v33 = *((_DWORD *)FixedStack + 3);
    else
      v33 = 0;
    v34 = *(_QWORD *)(v30 + 8) + 40 * (*(_DWORD *)(v30 + 32) + v21);
    v35 = *(_QWORD *)(v34 + 8);
    v36 = *(_BYTE *)(v34 + 16);
    v37 = sub_1C484358C(v29 + 128, 80, 3);
    v38 = v37;
    v39 = ((unint64_t)(v35 & 0x1FFFFFFF) << 6) | 1;
    if (v35 == -1)
      v39 = 0;
    *(_QWORD *)v37 = v32;
    *(_QWORD *)(v37 + 8) = 0;
    *(_DWORD *)(v37 + 16) = v33;
    *(_BYTE *)(v37 + 20) = 0;
    *(_QWORD *)(v37 + 24) = v39;
    *(_WORD *)(v37 + 32) = 1;
    *(_BYTE *)(v37 + 34) = v36;
    *(_OWORD *)(v37 + 40) = 0u;
    *(_OWORD *)(v37 + 56) = 0u;
    *(_QWORD *)(v37 + 72) = 0;
    *(_WORD *)(v37 + 36) = 1;
    v40 = sub_1C47A7FD0(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(_QWORD *)this, 0);
    v42 = v41;
    v43 = *(_QWORD *)(a1 + 832);
    v44 = *(_QWORD *)a1;
    v45 = *(_DWORD *)(a1 + 816);
    *(_QWORD *)&v71[0] = 0;
    DWORD2(v71[0]) = v45;
    if (v44)
    {
      v46 = (_OWORD *)(v44 + 48);
      if (v46 != v71)
      {
        v47 = *(unsigned __int8 **)v46;
        *(_QWORD *)&v71[0] = v47;
        if (v47)
          llvm::MetadataTracking::track((uint64_t)v71, v47, 2);
      }
    }
    v48 = sub_1C636B420(v43, v40, v42, (uint64_t)v71, v65, v28, v67, v66, v38);
    v50 = v49;
    if (*(_QWORD *)&v71[0])
      llvm::MetadataTracking::untrack((uint64_t)v71, *(unsigned __int8 **)&v71[0]);
    v51 = *(unsigned int *)(a1 + 112);
    if (v51 >= *(_DWORD *)(a1 + 116))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v51 + 1, 16);
      LODWORD(v51) = *(_DWORD *)(a1 + 112);
    }
    v52 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 16 * v51);
    *v52 = v48;
    v52[1] = 1;
    ++*(_DWORD *)(a1 + 112);
    *(_QWORD *)&v71[0] = this;
    result = sub_1C6364290((uint64_t *)(a1 + 8), v71);
    result[1] = v48;
    *((_DWORD *)result + 4) = v50;
  }
  else if (v9 == 2)
  {
    sub_1C635BCC4((uint64_t)v71, *(llvm::EVT **)(*(_QWORD *)(a1 + 832) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), *(_DWORD *)(v8 + 12), *(_QWORD *)this, 0);
    v10 = *(_QWORD *)(a1 + 832);
    v70 = *(_OWORD *)(v10 + 192);
    v11 = *(_QWORD *)(a1 + 912);
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD *)(a1 + 816);
    v68 = 0;
    v69 = v13;
    if (v12)
    {
      v14 = (unsigned __int8 **)(v12 + 48);
      if (v14 != &v68)
      {
        v15 = *v14;
        v68 = v15;
        if (v15)
          llvm::MetadataTracking::track((uint64_t)&v68, v15, 2);
      }
    }
    v16 = sub_1C5D10D34((uint64_t)v71, (_QWORD *)v10, v11, (const llvm::APInt *)&v68, (uint64_t *)&v70, 0, 0);
    v18 = v17;
    if (v68)
      llvm::MetadataTracking::untrack((uint64_t)&v68, v68);
    v68 = (unsigned __int8 *)this;
    v19 = sub_1C6364290((uint64_t *)(a1 + 8), &v68);
    v19[1] = v16;
    *((_DWORD *)v19 + 4) = v18;
    return (_QWORD *)sub_1C63640DC((uint64_t)v71);
  }
  else
  {
    v53 = sub_1C635FDC4(a1, DerivedPtr);
    v55 = v53;
    v56 = v54;
    if (*((_WORD *)v53 + 12) != 51)
      goto LABEL_36;
    v71[0] = *(_OWORD *)(v53[5] + 16 * v54);
    if (LOBYTE(v71[0]))
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v71);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v71);
    v59 = ExtendedSizeInBits;
    if ((_DWORD)v58 == 1)
    if (v59 <= 0x40)
    {
      v60 = *(_QWORD *)(a1 + 832);
      v61 = (unsigned __int8 *)v55[8];
      *(_QWORD *)&v71[0] = v61;
      if (v61)
        llvm::MetadataTracking::track((uint64_t)v71, v61, 2);
      DWORD2(v71[0]) = *((_DWORD *)v55 + 15);
      v62 = sub_1C6366AB4(v60, 4278124286, (const llvm::APInt *)v71, (llvm *)6, 0, 1, 0);
      v64 = v63;
      *(_QWORD *)&v70 = this;
      result = sub_1C6364290((uint64_t *)(a1 + 8), &v70);
      result[1] = v62;
      *((_DWORD *)result + 4) = v64;
      if (*(_QWORD *)&v71[0])
        return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)v71, *(unsigned __int8 **)&v71[0]);
    }
    else
    {
LABEL_36:
      *(_QWORD *)&v71[0] = this;
      result = sub_1C6364290((uint64_t *)(a1 + 8), v71);
      result[1] = v55;
      *((_DWORD *)result + 4) = v56;
    }
  }
  return result;
}

unint64_t sub_1C5D79DCC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t **v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  _DWORD *v20;
  int v21;
  _QWORD v22[2];
  _BYTE v23[24];

  v3 = sub_1C635FDC4(*(_QWORD *)a1, a2);
  v5 = v4;
  v22[0] = v3;
  v22[1] = v4;
  v6 = *(_QWORD *)(a1 + 8);
  result = sub_1C6374404((uint64_t)v23, v6, (uint64_t)v22);
  if (v23[16])
  {
    v8 = *(unsigned int *)(v6 + 272);
    if (v8 >= *(_DWORD *)(v6 + 276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 264, v6 + 280, v8 + 1, 16);
      LODWORD(v8) = *(_DWORD *)(v6 + 272);
    }
    v9 = (uint64_t **)(*(_QWORD *)(v6 + 264) + 16 * v8);
    *v9 = v3;
    v9[1] = v5;
    ++*(_DWORD *)(v6 + 272);
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 272) - 1;
    result = sub_1C63748C8(*(_QWORD *)(a1 + 16), (uint64_t)v22);
    *(_DWORD *)(result + 16) = v10;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) != **(_DWORD **)(a1 + 32))
    {
      v11 = (unsigned __int8 *)(v3[5] + 16 * v5);
      if (*v11)
      {
        if (*v11 - 15 < 0x9C)
          return result;
      }
      else if ((*(_DWORD *)(*((_QWORD *)v11 + 1) + 8) & 0xFE) == 0x12)
      {
        return result;
      }
      v12 = **(uint64_t ***)(a1 + 40);
      if (v12[20])
      {
        v13 = (uint64_t *)v12[19];
        if (v13)
        {
          while (1)
          {
            v14 = v13[4];
            if (v14 <= (unint64_t)v3)
            {
              if (v14 < (unint64_t)v3)
                goto LABEL_16;
              v15 = *((_DWORD *)v13 + 10);
              if (v15 <= v5)
                break;
            }
LABEL_17:
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_24;
          }
          if (v15 >= v5)
            return result;
LABEL_16:
          ++v13;
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      v16 = *((unsigned int *)v12 + 2);
      if (!(_DWORD)v16)
        goto LABEL_24;
      v17 = *v12;
      v18 = 16 * v16;
      v19 = (uint64_t **)(v17 + 8);
      while (*(v19 - 1) != v3 || *(_DWORD *)v19 != (_DWORD)v5)
      {
        v19 += 2;
        v18 -= 16;
        if (!v18)
          goto LABEL_24;
      }
      if (!v18)
      {
LABEL_24:
        result = sub_1C5D7AB1C((uint64_t)v3, v5);
        if ((result & 1) == 0)
        {
          v20 = *(_DWORD **)(a1 + 48);
          v21 = (*v20)++;
          result = sub_1C63748C8(*(_QWORD *)(a1 + 24), (uint64_t)v22);
          *(_DWORD *)(result + 16) = v21;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C5D79F88(unsigned __int8 *a1, unint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD v26[2];

  v4 = sub_1C635FDC4((uint64_t)a2, a1);
  v6 = v5;
  result = sub_1C5D7AB1C((uint64_t)v4, v5);
  if ((result & 1) == 0)
  {
    v8 = (uint64_t)(a2 + 31);
    result = sub_1C6373E0C((uint64_t)(a2 + 31), (unint64_t)v4, v6);
    if (!result)
    {
      result = sub_1C5D7ABD4((uint64_t)a1, (uint64_t)a2, 6);
      if (HIDWORD(result))
      {
        v9 = result;
        v10 = a2[114];
        v11 = *(_QWORD *)(v10 + 424);
        v12 = *(unsigned int *)(v10 + 432);
        if ((_DWORD)v12)
        {
          v13 = 4 * v12;
          v14 = *(_DWORD **)(v10 + 424);
          v15 = (_DWORD *)(v11 + 4 * v12);
          while (*v14 != (_DWORD)result)
          {
            ++v14;
            v13 -= 4;
            if (!v13)
            {
              v14 = v15;
              break;
            }
          }
        }
        else
        {
          v14 = *(_DWORD **)(v10 + 424);
        }
        v16 = (unint64_t)v14 - v11;
        v17 = v16 >> 2;
        v18 = a2[34];
        if ((v18 & 1) != 0)
          v19 = (v18 >> 1) & ~(-1 << (v18 >> 58)) & (1 << v17);
        else
          v19 = *(_QWORD *)(*(_QWORD *)v18 + 8 * ((v16 >> 8) & 0x3FFFFFF)) & (1 << v17);
        if (!v19)
        {
          sub_1C496F8DC(a2 + 34, v17);
          v20 = a2[104];
          v21 = *(_QWORD *)(**(_QWORD **)(v20 + 40) + 40);
          v22 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v20 + 24) + 32))(*(_QWORD *)(v20 + 24), v21 + 272, *(unsigned int *)(v21 + 276));
          v23 = sub_1C5D406AC(v20, v9, (llvm *)v22, 0, 1);
          v25 = v24;
          v26[0] = v4;
          v26[1] = v6;
          result = sub_1C6374660(v8, (uint64_t)v26);
          *(_QWORD *)(result + 16) = v23;
          *(_DWORD *)(result + 24) = v25;
        }
      }
    }
  }
  return result;
}

void sub_1C5D7A10C(unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  llvm::detail::DoubleAPFloat *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *FixedStack;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 *v78;
  unsigned __int8 *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  int v92;
  __int128 v93;

  if (sub_1C5D7AB1C(a1, a2))
  {
    v12 = *(unsigned __int16 *)(a1 + 24);
    if (v12 <= 0x22)
    {
      if (v12 == 11)
      {
LABEL_22:
        v27 = *(_QWORD *)(a1 + 80);
        v28 = *(_DWORD *)(v27 + 32);
        if (v28 > 0x40)
          v29 = **(_QWORD **)(v27 + 24);
        else
          v29 = (uint64_t)(*(_QWORD *)(v27 + 24) << -(char)v28) >> -(char)v28;
        v34 = a4;
        v35 = (uint64_t *)a6;
        goto LABEL_34;
      }
      if (v12 == 12)
      {
LABEL_24:
        v30 = *(_QWORD *)(a1 + 80);
        v32 = *(void **)(v30 + 32);
        v31 = (llvm::detail::DoubleAPFloat *)(v30 + 32);
        if (v32 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v31, (unsigned int *)&v93);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v31, (unsigned int *)&v93);
        v33 = (uint64_t *)&v93;
        if (DWORD2(v93) >= 0x41)
          v33 = (uint64_t *)v93;
        sub_1C5D78DD4(a4, (uint64_t *)a6, *v33);
        if (DWORD2(v93) >= 0x41)
        {
          if ((_QWORD)v93)
            MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
        }
        return;
      }
      if (v12 != 15)
        return;
    }
    else
    {
      if (*(unsigned __int16 *)(a1 + 24) <= 0x26u)
      {
        if (v12 != 35)
        {
          if (v12 != 36)
            return;
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      if (v12 == 51)
      {
        v34 = a4;
        v35 = (uint64_t *)a6;
        v29 = 4278124286;
LABEL_34:
        sub_1C5D78DD4(v34, v35, v29);
        return;
      }
      if (v12 != 39)
        return;
    }
    v15 = *(_QWORD *)(a6 + 832);
    v16 = *(_DWORD *)(a1 + 76);
    v17 = *(_QWORD *)(**(_QWORD **)(v15 + 40) + 40);
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v15 + 24) + 32))(*(_QWORD *)(v15 + 24), v17 + 272, *(unsigned int *)(v17 + 276));
    v19 = sub_1C5D406AC(v15, v16, (llvm *)v18, 0, 1);
    v21 = v20;
    v22 = *(unsigned int *)(a4 + 8);
    if (v22 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v22 + 1, 16);
      LODWORD(v22) = *(_DWORD *)(a4 + 8);
    }
    v23 = (uint64_t *)(*(_QWORD *)a4 + 16 * v22);
    *v23 = v19;
    v23[1] = v21;
    ++*(_DWORD *)(a4 + 8);
    sub_1C5D7A804(*(_QWORD *)(*(_QWORD *)(a6 + 832) + 40), a1);
    v25 = v24;
    v26 = *(unsigned int *)(a5 + 8);
    if (v26 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v26 + 1, 8);
      LODWORD(v26) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v26) = v25;
    ++*(_DWORD *)(a5 + 8);
  }
  else if ((a3 & 1) != 0)
  {
    v36 = sub_1C635C370(a6);
    v92 = v37;
    v38 = sub_1C6373E0C(a6 + 248, a1, a2);
    v40 = v39;
    if (v38)
    {
      v41 = v38;
      v42 = 0;
    }
    else
    {
      v93 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 832) + 40) + 56);
      v49 = sub_1C47C1C70((unsigned __int8 *)&v93);
      if ((_DWORD)v48 == 1)
      v50 = *(_QWORD *)(a6 + 272);
      if ((v50 & 1) != 0)
        v51 = v50 >> 58;
      else
        v51 = *(unsigned int *)(v50 + 64);
      v52 = *(unsigned int *)(a6 + 280);
      if (v51 <= v52)
      {
LABEL_57:
        v90 = (unint64_t *)(a6 + 272);
        v87 = sub_1C5D44240(*(_QWORD *)(a6 + 832), v93, *((uint64_t *)&v93 + 1), 1u);
        v58 = *(_DWORD *)(v87 + 76);
        *(_BYTE *)(*(_QWORD *)(v47 + 8) + 40 * (*(_DWORD *)(v47 + 32) + v58) + 19) = 1;
        v59 = *(_QWORD *)(a6 + 912);
        v60 = *(unsigned int *)(v59 + 432);
        if (v60 >= *(_DWORD *)(v59 + 436))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v59 + 424, v59 + 440, v60 + 1, 4);
          LODWORD(v60) = *(_DWORD *)(v59 + 432);
        }
        *(_DWORD *)(*(_QWORD *)(v59 + 424) + 4 * v60) = v58;
        ++*(_DWORD *)(v59 + 432);
        v61 = *v90;
        if ((*v90 & 1) != 0)
          v61 >>= 58;
        else
          LODWORD(v61) = *(_DWORD *)(v61 + 64);
        v62 = v87;
        sub_1C496F5AC(v90, (v61 + 1), 1);
      }
      else
      {
        v53 = *(_QWORD *)(a6 + 912);
        v54 = v49;
        while (1)
        {
          v55 = v52;
          v56 = (v50 >> 1) & ~(-1 << (v50 >> 58));
          if ((v50 & 1) == 0)
          {
            v55 = v52 & 0x3F;
            v56 = *(_QWORD *)(*(_QWORD *)v50 + 8 * (v52 >> 6));
          }
          if (((v56 >> v55) & 1) == 0)
          {
            v57 = *(_DWORD *)(*(_QWORD *)(v53 + 424) + 4 * v52);
            if (*(_QWORD *)(*(_QWORD *)(v47 + 8) + 40 * (*(_DWORD *)(v47 + 32) + v57) + 8) == v54)
              break;
          }
          *(_DWORD *)(a6 + 280) = ++v52;
          if (v51 == v52)
            goto LABEL_57;
        }
        sub_1C496F8DC((unint64_t *)(a6 + 272), v52);
        v62 = sub_1C5D406AC(*(_QWORD *)(a6 + 832), v57, (llvm *)v93, *((uint64_t *)&v93 + 1), 0);
      }
      v63 = *(_DWORD *)(v62 + 76);
      v64 = *(_QWORD *)(a6 + 832);
      v65 = *(_QWORD *)(**(_QWORD **)(v64 + 40) + 40);
      v66 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v64 + 24) + 32))(*(_QWORD *)(v64 + 24), v65 + 272, *(unsigned int *)(v65 + 276));
      v41 = sub_1C5D406AC(v64, v63, (llvm *)v66, 0, 1);
      v88 = v67;
      v40 = v40 & 0xFFFFFFFF00000000 | v67;
      v68 = *(_QWORD *)(*(_QWORD *)(a6 + 832) + 40);
      v83 = *(_QWORD *)(v68 + 56);
      v91 = v68;
      FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v68 + 432), v63);
      v85 = (unint64_t)FixedStack | 4;
      v89 = (uint64_t)v36;
      if (FixedStack)
        v84 = *((_DWORD *)FixedStack + 3);
      else
        v84 = 0;
      v70 = *(_QWORD *)(v83 + 8) + 40 * (*(_DWORD *)(v83 + 32) + v63);
      v71 = *(_QWORD *)(v70 + 8);
      v86 = *(_BYTE *)(v70 + 16);
      v72 = sub_1C484358C(v91 + 128, 80, 3);
      v73 = v72;
      v74 = ((unint64_t)(v71 & 0x1FFFFFFF) << 6) | 1;
      if (v71 == -1)
        v74 = 0;
      *(_QWORD *)v72 = v85;
      *(_QWORD *)(v72 + 8) = 0;
      *(_DWORD *)(v72 + 16) = v84;
      *(_BYTE *)(v72 + 20) = 0;
      *(_QWORD *)(v72 + 24) = v74;
      *(_WORD *)(v72 + 32) = 2;
      *(_BYTE *)(v72 + 34) = v86;
      *(_OWORD *)(v72 + 40) = 0u;
      *(_OWORD *)(v72 + 56) = 0u;
      *(_QWORD *)(v72 + 72) = 0;
      *(_WORD *)(v72 + 36) = 1;
      v75 = *(_QWORD *)(a6 + 832);
      v76 = *(_QWORD *)a6;
      v77 = *(_DWORD *)(a6 + 816);
      *(_QWORD *)&v93 = 0;
      DWORD2(v93) = v77;
      if (v76)
      {
        v78 = (__int128 *)(v76 + 48);
        if (v78 != &v93)
        {
          v79 = *(unsigned __int8 **)v78;
          *(_QWORD *)&v93 = v79;
          if (v79)
            llvm::MetadataTracking::track((uint64_t)&v93, v79, 2);
        }
      }
      v36 = sub_1C5D5D774(v75, v89, v92, (uint64_t)&v93, a1, a2, v41, v40, v73);
      v92 = v80;
      if ((_QWORD)v93)
        llvm::MetadataTracking::untrack((uint64_t)&v93, (unsigned __int8 *)v93);
      sub_1C5D7A804(v91, v41);
      v42 = v81;
      *(_QWORD *)&v93 = a1;
      *((_QWORD *)&v93 + 1) = a2;
      v82 = sub_1C6374660(a6 + 248, (uint64_t)&v93);
      *(_QWORD *)(v82 + 16) = v41;
      *(_DWORD *)(v82 + 24) = v88;
    }
    v43 = *(unsigned int *)(a4 + 8);
    if (v43 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v43 + 1, 16);
      LODWORD(v43) = *(_DWORD *)(a4 + 8);
    }
    v44 = (uint64_t *)(*(_QWORD *)a4 + 16 * v43);
    *v44 = v41;
    v44[1] = v40;
    ++*(_DWORD *)(a4 + 8);
    if (v42)
    {
      v45 = *(unsigned int *)(a5 + 8);
      if (v45 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v45 + 1, 8);
        LODWORD(v45) = *(_DWORD *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v45) = v42;
      ++*(_DWORD *)(a5 + 8);
    }
    v46 = *(_QWORD *)(a6 + 832);
    *(_QWORD *)(v46 + 192) = v36;
    *(_DWORD *)(v46 + 200) = v92;
  }
  else
  {
    v13 = *(unsigned int *)(a4 + 8);
    if (v13 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v13 + 1, 16);
      LODWORD(v13) = *(_DWORD *)(a4 + 8);
    }
    v14 = (unint64_t *)(*(_QWORD *)a4 + 16 * v13);
    *v14 = a1;
    v14[1] = a2;
    ++*(_DWORD *)(a4 + 8);
  }
}

double sub_1C5D7A804(uint64_t a1, uint64_t a2)
{
  uint64_t *FixedStack;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  double result;

  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a1 + 432), *(_DWORD *)(a2 + 76));
  if (FixedStack)
    v5 = *((_DWORD *)FixedStack + 3);
  else
    v5 = 0;
  v6 = (unint64_t)FixedStack | 4;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
     + 40 * (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 32) + *(_DWORD *)(a2 + 76));
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_BYTE *)(v7 + 16);
  v10 = sub_1C484358C(a1 + 128, 80, 3);
  *(_QWORD *)v10 = v6;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = ((unint64_t)(v8 & 0x1FFFFFFF) << 6) | 1;
  *(_DWORD *)(v10 + 16) = v5;
  if (v8 == -1)
    v11 = 0;
  *(_BYTE *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 24) = v11;
  *(_WORD *)(v10 + 32) = 7;
  *(_BYTE *)(v10 + 34) = v9;
  result = 0.0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_QWORD *)(v10 + 72) = 0;
  *(_WORD *)(v10 + 36) = 1;
  return result;
}

uint64_t sub_1C5D7A8CC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5D7AA4C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    if (*(_QWORD *)(a1 + v8 + 8))
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + v8 + 16) > 0xFFFFFFFD;
    if (!v10)
      *v9++ = *(_OWORD *)(a1 + v8 + 8);
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5D7AA4C(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5D7AA4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_OWORD *)(result + 8);
    v9 = (_OWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_13;
    v8 = *(_OWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = xmmword_1C6429E90;
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_DWORD *)(a2 + 8);
    if (*(_QWORD *)a2)
      v12 = 0;
    else
      v12 = v11 > 0xFFFFFFFD;
    if (!v12)
    {
      v15 = 0;
      result = sub_1C63744CC((uint64_t)v5, v10, v11, &v15);
      v13 = (unint64_t *)v15;
      v14 = *(_QWORD *)a2;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      *v13 = v14;
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

unint64_t sub_1C5D7AB1C(uint64_t a1, unsigned int a2)
{
  int v3;
  unint64_t result;
  unint64_t ExtendedSizeInBits;
  const char *v6;
  unsigned int v7;
  unint64_t v8;
  __int128 v9;

  v3 = *(unsigned __int16 *)(a1 + 24);
  result = 1;
  if (v3 != 15 && v3 != 39)
  {
    v9 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
    if ((_BYTE)v9)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v9);
    else
      ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v9);
    if ((_DWORD)v6 == 1)
    {
      v8 = ExtendedSizeInBits;
      ExtendedSizeInBits = v8;
    }
    if (ExtendedSizeInBits > 0x40)
      return 0;
    v7 = *(unsigned __int16 *)(a1 + 24);
    if (v7 > 0x33)
      return 0;
    else
      return (0x8001800001800uLL >> v7) & 1;
  }
  return result;
}

unint64_t sub_1C5D7ABD4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _BOOL4 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t DerivedPtr;
  int v20;
  BOOL v21;
  uint64_t Statepoint;

  v3 = (a3 - 1);
  if (a3 < 1)
    goto LABEL_26;
  v6 = sub_1C4E9AE24(a1);
  if (a1 && v6)
  {
    v17 = *(_QWORD *)(a2 + 912) + 152;
    Statepoint = llvm::GCProjectionInst::getStatepoint((llvm::GCProjectionInst *)a1);
    v18 = sub_1C63063F0(v17, &Statepoint);
    DerivedPtr = llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)a1);
    Statepoint = 0;
    v20 = sub_1C6144BDC(v18[1], *((_DWORD *)v18 + 6), DerivedPtr, &Statepoint);
    v10 = 0;
    LOBYTE(v8) = 0;
    v9 = 0;
    if (v20)
      v21 = Statepoint == v18[1] + 16 * *((unsigned int *)v18 + 6);
    else
      v21 = 1;
    if (!v21)
    {
      if (*(_DWORD *)(Statepoint + 8) != 1)
        goto LABEL_26;
      v8 = *(unsigned int *)(Statepoint + 12);
      v9 = v8 >> 8;
LABEL_25:
      v10 = 0x100000000;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v7 == 77)
    {
      v8 = sub_1C5D7ABD4(*(_QWORD *)(a1 - 32), a2, v3);
      v9 = v8 >> 8;
      v10 = v8 & 0x100000000;
      return v8 | (unint64_t)v10 | (v9 << 8);
    }
    v10 = 0;
    LOBYTE(v8) = 0;
    v9 = 0;
    if (a1 && v7 == 83)
    {
      v11 = *(_DWORD *)(a1 + 20);
      if ((v11 & 0x40000000) == 0)
      {
        v12 = v11 & 0x7FFFFFF;
        v13 = (_QWORD *)(a1 - 32 * v12);
        if (!v12)
          goto LABEL_26;
LABEL_13:
        LODWORD(v9) = 0;
        v14 = 0;
        v15 = 32 * v12;
        v16 = 1;
        while (1)
        {
          v8 = sub_1C5D7ABD4(*v13, a2, v3);
          if (!HIDWORD(v8) || (v16 & 1) == 0 && (v14 | ((_DWORD)v9 << 8)) != (_DWORD)v8)
            goto LABEL_26;
          v16 = 0;
          v9 = v8 >> 8;
          v13 += 4;
          v14 = v8;
          v15 -= 32;
          if (!v15)
            goto LABEL_25;
        }
      }
      v13 = *(_QWORD **)(a1 - 8);
      v12 = v11 & 0x7FFFFFF;
      if (v12)
        goto LABEL_13;
LABEL_26:
      v10 = 0;
      LOBYTE(v8) = 0;
      v9 = 0;
    }
  }
  return v8 | (unint64_t)v10 | (v9 << 8);
}

_OWORD *sub_1C5D7AD88(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = xmmword_1C6429E90;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        v15 = *(_DWORD *)(v13 + 8);
        if (*(_QWORD *)v13)
          v16 = 0;
        else
          v16 = v15 > 0xFFFFFFFD;
        if (!v16)
        {
          v21 = 0;
          sub_1C63746D8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v21);
          v17 = v21;
          v18 = *(_QWORD *)v13;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v17 = v18;
          *(_OWORD *)(v17 + 16) = *(_OWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = 32 * v19;
    do
    {
      *result = xmmword_1C6429E90;
      result += 2;
      v20 -= 32;
    }
    while (v20);
  }
  return result;
}

char *sub_1C5D7AED4(char *result)
{
  char *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  char *v9;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 264;
    *(_QWORD *)result = 1;
    v7 = result + 8;
    do
LABEL_10:
      *v7++ = xmmword_1C6429E90;
    while (v7 != v6);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v5 == *((_DWORD *)result + 4))
    {
      *(_QWORD *)result = 0;
      if (!(_DWORD)v5)
        return result;
      v7 = (_OWORD *)*((_QWORD *)result + 1);
      v6 = &v7[v5];
      goto LABEL_10;
    }
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 8);
  }
  if (v5 <= 0x10)
  {
    *(_QWORD *)v1 = 1;
  }
  else
  {
    *(_DWORD *)v1 &= ~1u;
    result = (char *)operator new(16 * v5, (std::align_val_t)8uLL);
    *((_QWORD *)v1 + 1) = result;
    *((_QWORD *)v1 + 2) = v5;
    v8 = *(_DWORD *)v1;
    *(_QWORD *)v1 = *(_DWORD *)v1 & 1;
    if ((v8 & 1) == 0)
    {
      v9 = &result[16 * v5];
      goto LABEL_22;
    }
  }
  result = v1 + 8;
  v9 = v1 + 264;
  do
  {
LABEL_22:
    *(_OWORD *)result = xmmword_1C6429E90;
    result += 16;
  }
  while (result != v9);
  return result;
}

_OWORD *sub_1C5D7AFEC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_1C6429E90;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        v15 = *(_DWORD *)(v13 + 8);
        if (*(_QWORD *)v13)
          v16 = 0;
        else
          v16 = v15 > 0xFFFFFFFD;
        if (!v16)
        {
          v21 = 0;
          sub_1C6374940(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v21);
          v17 = v21;
          v18 = *(_QWORD *)v13;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v17 = v18;
          *(_DWORD *)(v17 + 16) = *(_DWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = 24 * v19;
    do
    {
      *result = xmmword_1C6429E90;
      result = (_OWORD *)((char *)result + 24);
      v20 -= 24;
    }
    while (v20);
  }
  return result;
}

unsigned int *sub_1C5D7B148(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 32 * v2;
      do
      {
        *v6 = xmmword_1C6429E90;
        v6 += 2;
        v7 -= 32;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(32 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *(_OWORD *)result = xmmword_1C6429E90;
          result += 8;
          v11 -= 32;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t sub_1C5D7B24C()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Allow using registers for non pointer deopt args";
  v1.n128_u64[1] = 48;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8257A8, "use-registers-for-deopt-values", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8257A8, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Allow using registers for gc pointer in landing pad";
  v1.n128_u64[1] = 51;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED825868, "use-registers-for-gc-values-in-landing-pad", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED825868, &dword_1C475E000);
  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Max number of VRegs allowed to pass GC pointer meta args in";
  v1.n128_u64[1] = 59;
  sub_1C61798D0((uint64_t)&unk_1ED825928, "max-registers-for-gc-values", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED825928, &dword_1C475E000);
}

void sub_1C5D7B380(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, int a12)
{
  unint64_t v13;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  __int16 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  unsigned __int8 v42;
  size_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int16 v76;
  __int16 v77;
  uint64_t v78;
  size_t v79;
  int v80;
  void *__p;
  void *v82;
  char *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD v90[194];
  _QWORD v91[66];
  _QWORD v92[194];
  _BYTE v93[96];
  uint64_t v94;

  v13 = a7;
  v15 = a2;
  v94 = *MEMORY[0x1E0C80C00];
  v72 = a4;
  v73 = a5;
  v17 = a2 + 112;
  if (a11)
    v17 = a11;
  v62 = v17;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  sub_1C5CC5540((uint64_t)&v69, a7);
  if (v13)
  {
    v18 = 0;
    v19 = 0;
    v65 = a6;
    v66 = v13;
    do
    {
      v67 = v19;
      v20 = (unsigned int *)(a6 + 16 * v18);
      v21 = *(_QWORD *)v20;
      v22 = v20[2];
      v74 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 40) + 16 * v22);
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v74, *(llvm::LLVMContext **)(v15 + 56));
      v68 = v23;
      v24 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 928))(a1, *(_QWORD *)(*(_QWORD *)(v21 + 40) + 16 * v22), *(_QWORD *)(*(_QWORD *)(v21 + 40) + 16 * v22 + 8), *(_BYTE *)(a8 + 32) & 1);
      if (v24)
        v25 = 0;
      else
        v25 = 2;
      v26 = v25 | v24;
      if ((*(_BYTE *)(a8 + 32) & 0x10) != 0
        && !(*(unsigned int (**)(unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 936))(a1, *(_QWORD *)(*(_QWORD *)a8 + 16 * v18), *(_QWORD *)(*(_QWORD *)a8 + 16 * v18 + 8)))
      {
        v26 = 0;
      }
      v27 = v70;
      if (v70 >= v71)
      {
        v29 = v15;
        v30 = a1;
        v31 = a8;
        v32 = (char *)v69;
        v33 = 0xAAAAAAAAAAAAAAABLL * ((v70 - (_BYTE *)v69) >> 4);
        v34 = v33 + 1;
        if (v33 + 1 > 0x555555555555555)
          abort();
        if (0x5555555555555556 * ((v71 - (_BYTE *)v69) >> 4) > v34)
          v34 = 0x5555555555555556 * ((v71 - (_BYTE *)v69) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v71 - (_BYTE *)v69) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v35 = 0x555555555555555;
        else
          v35 = v34;
        if (v35)
        {
          if (v35 > 0x555555555555555)
            sub_1C4764EE4();
          v36 = (char *)operator new(48 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[48 * v33];
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = v21;
        *((_DWORD *)v37 + 4) = v22;
        *((_DWORD *)v37 + 5) = 0;
        *((_QWORD *)v37 + 3) = v68;
        *((_WORD *)v37 + 16) = v26;
        *((_WORD *)v37 + 17) = 0;
        *((_QWORD *)v37 + 5) = 0;
        v38 = v37;
        a8 = v31;
        if (v27 != v32)
        {
          do
          {
            v39 = *((_OWORD *)v27 - 3);
            v40 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v38 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v38 - 1) = v40;
            *((_OWORD *)v38 - 3) = v39;
            v38 -= 48;
            v27 -= 48;
          }
          while (v27 != v32);
          v27 = v32;
        }
        a1 = v30;
        v28 = v37 + 48;
        v69 = v38;
        v70 = v37 + 48;
        v71 = &v36[48 * v35];
        v15 = v29;
        if (v27)
          operator delete(v27);
        a6 = v65;
        v13 = v66;
      }
      else
      {
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v27 + 1) = v21;
        *((_DWORD *)v27 + 4) = v22;
        *((_DWORD *)v27 + 5) = 0;
        *((_QWORD *)v27 + 3) = v68;
        *((_WORD *)v27 + 16) = v26;
        *((_WORD *)v27 + 17) = 0;
        v28 = v27 + 48;
        *((_QWORD *)v27 + 5) = 0;
      }
      v70 = v28;
      v18 = (v67 + 1);
      v19 = v67 + 1;
    }
    while (v13 > v18);
  }
  if (a3 == 637)
    llvm::report_fatal_error((llvm *)"Unsupported library call operation!", (const char *)1);
  v41 = *(char **)&a1[8 * a3 + 174048];
  v42 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(**(_QWORD **)(v15 + 40) + 40) + 272, 0);
  v43 = sub_1C63675D8(v15, v41, v42, 0);
  v45 = v44;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v72, *(llvm::LLVMContext **)(v15 + 56));
  v46 = v15;
  v48 = v47;
  *(_QWORD *)&v74 = 0;
  DWORD2(v74) = 0;
  v75 = 0;
  v76 = v76 & 0xFC00 | 0x20;
  v77 = 0;
  v78 = 0xFFFFFFFFLL;
  v79 = 0;
  v80 = 0;
  __p = 0;
  v82 = 0;
  v83 = 0;
  v84 = v46;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = v90;
  v89 = 0x2000000000;
  v90[192] = v91;
  v90[193] = 0x2000000000;
  v91[64] = v92;
  v91[65] = 0x2000000000;
  v92[192] = v93;
  v92[193] = 0x400000000;
  v93[64] = 0;
  v93[88] = 0;
  v49 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 928))(a1, v72, v73, *(_BYTE *)(a8 + 32) & 1);
  v50 = v49 ^ 1;
  if ((*(_BYTE *)(a8 + 32) & 0x10) != 0)
  {
    v51 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 936))(a1, *(_QWORD *)(a8 + 16), *(_QWORD *)(a8 + 24));
    v50 &= v51;
    LOWORD(v49) = v51 & v49;
  }
  if (&v85 != (unsigned __int8 **)a10)
  {
    if (v85)
      llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
    v52 = *(unsigned __int8 **)a10;
    v85 = v52;
    if (v52)
      llvm::MetadataTracking::track((uint64_t)&v85, v52, 2);
  }
  v53 = *(_DWORD *)(a10 + 8);
  *(_QWORD *)&v74 = v62;
  if (a11)
    v54 = a12;
  else
    v54 = 0;
  DWORD2(v74) = v54;
  v55 = *(unsigned int *)&a1[4 * a3 + 181700];
  v75 = v48;
  v79 = v43;
  v86 = v53;
  v80 = v45;
  v57 = v69;
  v56 = v70;
  LODWORD(v78) = -1431655765 * ((unint64_t)(v70 - (_BYTE *)v69) >> 4);
  HIDWORD(v78) = v55;
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
    v57 = v69;
    v56 = v70;
  }
  __p = v57;
  v82 = v56;
  v83 = v71;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  (***(void (****)(_QWORD, _QWORD, uint64_t, void **))(v84 + 24))(*(_QWORD *)(v84 + 24), *(_QWORD *)(v84 + 40), v55, &__p);
  v58 = *(unsigned __int8 *)(a8 + 32);
  v59 = v58 >> 2;
  v60 = v58 >> 1;
  HIBYTE(v77) = (v58 & 8) != 0;
  if (v50)
    v61 = 2;
  else
    v61 = 0;
  v76 = v61 & 0xFFCF | v49 & 0xFFCF | v76 & 0xFFCC | (16 * (v60 & 1)) & 0xDF | (32 * (v59 & 1));
  sub_1C5D1FE10(a1, (uint64_t)&v74, a9);
  sub_1C632CB64(&v74);
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
}

BOOL sub_1C5D7B8E8(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL8 result;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  const char *v21;
  unint64_t v23;
  unsigned __int8 v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char **v45;
  char v46;
  char v47;
  uint64_t ExtendedSizeInBits;
  const char *v49;
  unint64_t v50;
  unsigned int v51;
  _BYTE v54[7];
  __int128 v55;
  __int128 v56;

  if (!(*(unsigned __int8 *)(a4 + 11) | *(unsigned __int8 *)(a4 + 8))
    && *(unsigned __int8 *)(a4 + 14) < *(unsigned __int8 *)(a4 + 9))
  {
    return 0;
  }
  *(_QWORD *)&v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 672))(a1, a4, a7);
  *((_QWORD *)&v56 + 1) = v11;
  v51 = a5;
  if (v56 == 1)
  {
    LOBYTE(v56) = 6;
    *((_QWORD *)&v56 + 1) = 0;
    if (!*(_BYTE *)(a4 + 8))
    {
      v46 = 6;
      while (1)
      {
        v47 = *(_BYTE *)(a4 + 9);
        if (v46)
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v56);
        else
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
        v50 = ExtendedSizeInBits;
        if ((_DWORD)v49 == 1)
        if (1 << v47 >= v50 >> 3
          || ((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 648))(a1, v56, *((_QWORD *)&v56 + 1), a5, *(unsigned __int8 *)(a4 + 9), 0, 0) & 1) != 0)
        {
          break;
        }
        v46 = v56 - 1;
        LOBYTE(v56) = v56 - 1;
        *((_QWORD *)&v56 + 1) = 0;
      }
    }
    v12 = 6;
    a5 = a5;
    while (!v12 || !*(_QWORD *)(a1 + 8 * v12 + 96))
      --v12;
    if (v56 != v12 && sub_1C50989E0((unsigned __int8 *)&v56, v12, 0))
    {
      LOBYTE(v56) = v12;
      *((_QWORD *)&v56 + 1) = 0;
    }
  }
  v13 = *(_QWORD *)a4;
  if (!*(_QWORD *)a4)
    return 1;
  v14 = 0;
  v15 = a2;
  do
  {
    if ((_BYTE)v56)
      v16 = sub_1C47A8C74((unsigned __int8 *)&v56);
    else
      v16 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
    v18 = v16;
    if ((_DWORD)v17 == 1)
    for (i = (v18 >> 3); i > v13; i = v33)
    {
      v55 = v56;
      if ((_BYTE)v56)
      {
        if (v56 - 8 >= 0xA3)
          goto LABEL_44;
        v20 = sub_1C47A8C74((unsigned __int8 *)&v56);
      }
      else
      {
        if ((*(_DWORD *)(*((_QWORD *)&v56 + 1) + 8) & 0xFE) != 0x12
          && *(_DWORD *)(*((_QWORD *)&v56 + 1) + 8) >= 7u)
        {
LABEL_44:
          while (1)
          {
            v27 = v55 - 1;
            LOBYTE(v55) = v55 - 1;
            *((_QWORD *)&v55 + 1) = 0;
            if (v27 == 3)
              goto LABEL_48;
            if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 688))(a1, v27))
            {
              v25 = v55;
              goto LABEL_47;
            }
          }
        }
        v20 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
      }
      v23 = v20;
      if ((_DWORD)v21 == 1)
      if (v23 <= 0x40)
        v24 = 5;
      else
        v24 = 6;
      LOBYTE(v55) = v24;
      DWORD1(v55) = *(_DWORD *)&v54[3];
      *(_DWORD *)((char *)&v55 + 1) = *(_DWORD *)v54;
      *((_QWORD *)&v55 + 1) = 0;
      v25 = v24;
      if (v24 != 1 && !*(_QWORD *)(a1 + 8 * v24 + 96)
        || (*(unsigned __int8 *)(a1 + 390 * v24 + 4116) | 4) != 4
        || (v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1),
            v25 = v55,
            (v26 & 1) == 0))
      {
        if (v25 != 6
          || !*(_QWORD *)(a1 + 184)
          || (*(unsigned __int8 *)(a1 + 8406) | 4) != 4
          || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, 11))
        {
          goto LABEL_44;
        }
        LOBYTE(v55) = 11;
        *((_QWORD *)&v55 + 1) = 0;
LABEL_48:
        v28 = sub_1C47A8C74((unsigned __int8 *)&v55);
        goto LABEL_49;
      }
LABEL_47:
      if (v25)
        goto LABEL_48;
      v28 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v55);
LABEL_49:
      v30 = v28;
      if ((_DWORD)v29 == 1)
      v54[0] = 0;
      if (v14 && *(_BYTE *)(a4 + 10) && (v30 >> 3) < v13)
      {
        v31 = *(_BYTE *)(a4 + 8) ? 0 : *(_BYTE *)(a4 + 9);
        v32 = !(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)a1 + 648))(a1, v56, *((_QWORD *)&v56 + 1), a5, v31, 0, v54)|| v54[0] == 0;
        LODWORD(v33) = v13;
        if (!v32)
          continue;
      }
      v33 = v30 >> 3;
      v56 = v55;
    }
    result = ++v14 <= a3;
    if (v14 > a3)
      break;
    v35 = (_OWORD *)v15[1];
    v34 = v15[2];
    if ((unint64_t)v35 >= v34)
    {
      v37 = (_OWORD *)*v15;
      v38 = v35 - v37;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        abort();
      v40 = v34 - (_QWORD)v37;
      if (v40 >> 3 > v39)
        v39 = v40 >> 3;
      v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v39;
      if (v41)
      {
        if (v41 >> 60)
          sub_1C4764EE4();
        v42 = (char *)operator new(16 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[16 * v38];
      *(_OWORD *)v43 = v56;
      v44 = v43;
      if (v35 == v37)
      {
        v45 = (char **)a2;
      }
      else
      {
        do
        {
          *((_OWORD *)v44 - 1) = *(v35 - 1);
          v44 -= 16;
          --v35;
        }
        while (v35 != v37);
        v45 = (char **)a2;
        v35 = (_OWORD *)*a2;
      }
      v36 = v43 + 16;
      *v45 = v44;
      v45[1] = v43 + 16;
      v45[2] = &v42[16 * v41];
      if (v35)
        operator delete(v35);
      a5 = v51;
      result = v14 <= a3;
    }
    else
    {
      *v35 = v56;
      v36 = v35 + 1;
    }
    a2[1] = v36;
    v15 = a2;
    v13 -= i;
  }
  while (v13);
  return result;
}

uint64_t sub_1C5D7BE14(uint64_t a1, uint64_t a2, const llvm::KnownBits *a3, uint64_t a4, char **a5, const void **a6, uint64_t a7, unsigned int a8, char a9)
{
  llvm::Type *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  size_t v24;
  char *v25;
  size_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  llvm::APInt *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  llvm::detail::DoubleAPFloat *v38;
  void *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm *v51;
  unsigned int v52;
  _QWORD *v53;
  unsigned int v54;
  _QWORD *v55;
  const void **v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  int v65;
  uint64_t *v66;
  unsigned int v67;
  __int128 *v68;
  __int16 v69;
  int v70;
  int v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x8_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned int v93;
  int v94;
  int64_t v95;
  BOOL v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  int8x8_t v105;
  uint64_t *v106;
  int v107;
  int v108;
  int v109;
  BOOL v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  void *v115;
  llvm::APInt *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const llvm::KnownBits *v122;
  const llvm::KnownBits *v123;
  unsigned __int16 v124;
  void **v125;
  void **v126;
  uint64_t *v127;
  const llvm::KnownBits *v128;
  const llvm::KnownBits *v129;
  unsigned __int16 v130;
  char v131;
  int v132;
  __int128 *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  __int128 v137;
  int8x8_t v138;
  unsigned int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  _OWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  __int128 *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  llvm *v167;
  llvm::APInt *v168;
  uint64_t v169;
  BOOL v170;
  llvm::APInt *v171;
  uint64_t v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  llvm **v179;
  uint64_t v180;
  llvm *v181;
  uint64_t *v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  llvm *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  int v195;
  uint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int8x8_t v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint8x8_t v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  int64_t v219;
  unint64_t v220;
  unsigned int v221;
  uint64_t v224;
  int v225;
  BOOL v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  llvm::APInt *v232;
  int v233;
  int v234;
  int64_t v235;
  unint64_t v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  unint64_t v245;
  int8x8_t *v246;
  int8x8_t v247;
  uint8x8_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t **v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  unsigned int v262;
  llvm::APInt *v263;
  llvm::APInt *v264;
  uint64_t v265;
  BOOL v266;
  unsigned int v267;
  size_t v268;
  unint64_t v269;
  uint64_t *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  int v278;
  int64_t v279;
  unint64_t v280;
  unsigned int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  int v286;
  int v287;
  uint64_t *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  __int16 v292;
  unint64_t v293;
  _QWORD *v294;
  BOOL v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  _QWORD *v301;
  int v302;
  int64_t v303;
  unint64_t v304;
  unsigned int v305;
  _QWORD *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  int v315;
  unint64_t v316;
  _QWORD *v317;
  char v318;
  unsigned int v319;
  uint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  const char *v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  const char *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  char *v336;
  int v337;
  int64_t v338;
  unint64_t v339;
  unsigned int v340;
  llvm::Type *v341;
  int v342;
  uint64_t *v343;
  const char *v344;
  unsigned int v345;
  unsigned int v346;
  uint64_t v347;
  unsigned int v348;
  int v349;
  uint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  BOOL v355;
  llvm::APInt *v357;
  uint64_t v358;
  uint64_t v359;
  _BOOL4 v360;
  int8x8_t v361;
  int v362;
  int v363;
  int64_t v364;
  unint64_t v365;
  unsigned int v366;
  llvm::APInt *v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  uint64_t v376;
  unsigned int v377;
  uint64_t v378;
  unsigned int v379;
  const char *v380;
  int v381;
  unsigned int v382;
  BOOL v383;
  unsigned int v384;
  unsigned int v385;
  char v386;
  unsigned __int8 *v387;
  int v388;
  uint64_t v389;
  int v390;
  void *v391;
  _QWORD *v392;
  unint64_t v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  __int16 v397;
  int v398;
  int64_t v399;
  unint64_t v400;
  unsigned int v401;
  int v402;
  char *v403;
  int v404;
  int64_t v405;
  unint64_t v406;
  unsigned int v407;
  uint64_t v408;
  llvm::Type *v409;
  int v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t *v413;
  unsigned int v414;
  unsigned int v415;
  unint64_t v416;
  int v417;
  uint64_t v418;
  int v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  uint64_t v423;
  void *v424;
  uint64_t *v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  BOOL v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  unint64_t v438;
  int v439;
  uint64_t v440;
  unint64_t **v441;
  unsigned int v442;
  unint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  unint64_t v453;
  const char *v454;
  unsigned int v455;
  int v456;
  char v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  unsigned int v462;
  uint64_t v463;
  unsigned int v464;
  llvm::APInt *v465;
  uint64_t v466;
  unint64_t v467;
  llvm::APInt *v468;
  uint64_t v469;
  unint64_t v470;
  _QWORD *v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t v475;
  int v476;
  int64_t v477;
  void *v478;
  unint64_t v479;
  unsigned int v480;
  uint64_t v481;
  void *v482;
  uint64_t v483;
  void *v484;
  uint64_t *v485;
  unint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t *v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  _BYTE *v493;
  unsigned int *v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  uint64_t v498;
  unsigned int v499;
  char *v500;
  unint64_t v501;
  uint64_t v502;
  unsigned int v503;
  uint64_t v504;
  int v505;
  int64_t v506;
  unint64_t v507;
  unsigned int v508;
  int v509;
  char *v510;
  int v511;
  int64_t v512;
  unint64_t v513;
  unsigned int v514;
  llvm::Type *v515;
  int v516;
  __int128 *v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  llvm::APInt *v521;
  _QWORD *v522;
  unsigned __int8 *v523;
  int v524;
  uint64_t v525;
  int v526;
  uint64_t **v527;
  unsigned int v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  unint64_t v535;
  uint64_t *v536;
  uint64_t *v537;
  uint64_t *v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int *v554;
  uint64_t v555;
  void **v556;
  void *v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  unint64_t v561;
  size_t v562;
  uint64_t *v563;
  unint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  _BOOL4 v567;
  uint64_t *v568;
  unint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  char v575;
  int v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  _QWORD *v581;
  uint64_t *v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  uint64_t *v587;
  unint64_t v588;
  uint64_t v589;
  uint8x8_t v590;
  unsigned int v591;
  int v592;
  unsigned int v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  uint64_t *v603;
  unint64_t v604;
  _QWORD *v605;
  uint64_t v606;
  _BOOL4 v607;
  uint64_t *v608;
  unint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  char v615;
  int v616;
  unsigned int v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  size_t v624;
  llvm::APInt *v625;
  uint64_t v626;
  unsigned int v627;
  uint64_t v628;
  llvm *v629;
  unsigned int v630;
  _QWORD *v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unsigned int v636;
  int v637;
  void *v638;
  int v639;
  void *v640;
  _QWORD *v641;
  unint64_t v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  __int16 v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int v649;
  char *v650;
  int v651;
  void *v652;
  llvm::APInt *v653;
  uint64_t v654;
  llvm *v655;
  _QWORD *v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  __int16 v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  BOOL v671;
  llvm::APInt *v673;
  uint64_t v674;
  size_t v675;
  uint64_t v676;
  unsigned int v677;
  uint64_t v678;
  llvm::APInt *v679;
  unsigned int v680;
  unsigned int v681;
  uint64_t v682;
  _QWORD *v683;
  _QWORD *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  llvm::APInt *v693;
  uint64_t v694;
  unint64_t v695;
  _QWORD *v696;
  unsigned int v697;
  int v698;
  int64_t v699;
  unint64_t v700;
  unsigned int v701;
  uint8x8_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t *v705;
  unint64_t v706;
  _QWORD *v707;
  uint64_t v708;
  _BOOL4 v709;
  const llvm::APInt **v710;
  uint64_t *v711;
  unint64_t v712;
  uint64_t *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  char v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  BOOL v723;
  int v724;
  BOOL v725;
  unsigned int v726;
  int v727;
  uint64_t *v728;
  int v729;
  uint64_t *v730;
  uint64_t v731;
  void *v732;
  uint64_t *v733;
  int v734;
  unsigned int v735;
  int v736;
  uint64_t v737;
  unint64_t v738;
  int v739;
  unsigned int v740;
  uint64_t *v741;
  unint64_t v742;
  _QWORD *v743;
  uint64_t v744;
  _BOOL4 v745;
  uint64_t *v746;
  unint64_t v747;
  uint64_t *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  char v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t *v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  llvm::APInt *v762;
  uint64_t v763;
  unint64_t v764;
  BOOL v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t v770;
  unint64_t v771;
  unsigned int v772;
  unsigned int v773;
  int v774;
  uint64_t *v775;
  unint64_t v776;
  _QWORD *v777;
  uint64_t v778;
  char v779;
  unsigned int v780;
  unint64_t v781;
  uint64_t v782;
  size_t v783;
  uint64_t v784;
  _QWORD *v785;
  unint64_t v786;
  uint64_t *v787;
  uint64_t v788;
  unsigned int v789;
  unsigned int v790;
  const void *v791;
  size_t v792;
  unsigned int v793;
  int v794;
  int64_t v795;
  unint64_t v796;
  unsigned int v797;
  uint64_t v798;
  uint64_t v799;
  unsigned int v800;
  BOOL v801;
  llvm *v802;
  uint64_t v803;
  _QWORD *v804;
  unint64_t v805;
  uint64_t v806;
  uint64_t *v807;
  uint64_t v808;
  unint64_t v809;
  uint64_t v810;
  unsigned int v811;
  uint64_t v812;
  char *v813;
  int v814;
  char *v815;
  int v816;
  int64_t v817;
  unint64_t v818;
  unsigned int v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t **v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  const void **v828;
  unint64_t v829;
  unint64_t v830;
  BOOL v831;
  __int128 *v832;
  uint64_t v833;
  void **v834;
  void *v835;
  uint64_t v836;
  uint64_t v837;
  llvm::APInt *v838;
  unint64_t **v839;
  unsigned int v840;
  unint64_t v841;
  int v842;
  BOOL v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  char v847;
  int v848;
  int v849;
  uint64_t *v850;
  unint64_t v851;
  _QWORD *v852;
  uint64_t v853;
  BOOL v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  const void *v862;
  uint64_t v863;
  uint64_t v864;
  llvm::Type *v865;
  int v866;
  llvm::Type *v867;
  int v868;
  llvm::APInt *v869;
  unsigned int v870;
  llvm::APInt *v871;
  uint64_t v872;
  int v873;
  uint64_t v874;
  int v875;
  void *v876;
  uint64_t v877;
  uint64_t *v878;
  int v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  char *v883;
  uint64_t v884;
  size_t v885;
  char *v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  unsigned int v890;
  unsigned int v891;
  int v892;
  int64_t v893;
  uint64_t *v894;
  int v895;
  uint64_t v896;
  void *v897;
  uint64_t v898;
  void *v899;
  int v900;
  int64_t v901;
  unint64_t v902;
  int v903;
  uint64_t v904;
  void *v905;
  uint64_t v906;
  void *v907;
  unsigned int v908;
  int v909;
  int64_t v910;
  unint64_t v911;
  unsigned int v912;
  int v913;
  int64_t v914;
  void *v915;
  unint64_t v916;
  unsigned int v917;
  _OWORD *v918;
  uint64_t v919;
  unint64_t v920;
  llvm::APInt *v921;
  llvm::APInt *v922;
  uint64_t v923;
  unint64_t v924;
  _QWORD *v925;
  int v926;
  int64_t v927;
  unint64_t v928;
  unsigned int v929;
  uint64_t v930;
  void *v931;
  uint64_t v932;
  void *v933;
  int v934;
  int64_t v935;
  unint64_t v936;
  unsigned int v937;
  uint64_t v938;
  void *v939;
  uint64_t v940;
  void *v941;
  uint64_t **v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  int *v946;
  uint64_t v947;
  uint64_t *v948;
  uint64_t v949;
  _QWORD *v950;
  int v951;
  int v952;
  uint64_t *v953;
  int v954;
  _QWORD *v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t *v962;
  int v963;
  int v964;
  size_t v965;
  size_t v966;
  llvm *v967;
  uint64_t v968;
  uint64_t v969;
  int v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  int64_t v975;
  unint64_t v976;
  unsigned int v977;
  uint64_t v978;
  int v979;
  uint64_t v980;
  int v981;
  uint64_t v982;
  _QWORD *v983;
  uint64_t v984;
  int v985;
  uint64_t v986;
  uint64_t *v987;
  int v988;
  int8x8_t v989;
  uint64_t v990;
  uint64_t v991;
  size_t v992;
  int v993;
  int v994;
  uint64_t v995;
  unsigned int v996;
  uint64_t v997;
  llvm::APInt *v998;
  uint64_t v999;
  unsigned int v1000;
  int v1001;
  int64_t v1002;
  unint64_t v1003;
  int v1004;
  uint64_t v1005;
  void *v1006;
  uint64_t v1007;
  void *v1008;
  llvm::Type *v1009;
  int v1010;
  llvm::Type *v1011;
  int v1012;
  uint64_t v1013;
  llvm *v1014;
  unsigned int v1015;
  unsigned int v1016;
  __int128 *v1017;
  uint64_t v1018;
  int v1019;
  BOOL v1020;
  llvm::Type *v1021;
  int v1022;
  llvm::Type *v1023;
  int v1024;
  uint64_t v1025;
  int v1026;
  uint64_t v1027;
  __int16 v1028;
  uint64_t v1029;
  int v1030;
  unint64_t v1031;
  uint64_t *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  int v1036;
  _QWORD *v1037;
  int v1038;
  BOOL v1039;
  int v1040;
  __int128 v1041;
  unsigned int v1042;
  uint64_t v1043;
  uint64_t v1044;
  llvm::APInt *v1045;
  uint64_t v1046;
  int v1047;
  uint64_t *v1048;
  int v1049;
  int v1050;
  int64_t v1051;
  unint64_t v1052;
  unsigned int v1053;
  uint64_t v1054;
  int v1055;
  uint64_t *v1056;
  int v1057;
  _QWORD *v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t *v1062;
  int v1063;
  int v1064;
  unsigned int v1065;
  unsigned int v1066;
  int v1067;
  uint64_t v1068;
  int v1069;
  void *v1070;
  int v1071;
  uint64_t v1072;
  _QWORD *v1073;
  uint64_t v1074;
  int v1075;
  uint64_t v1076;
  char v1077;
  int v1078;
  unint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t *v1084;
  uint64_t v1085;
  _DWORD *v1086;
  void *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t *v1092;
  int v1093;
  int v1094;
  int v1095;
  _QWORD *v1096;
  unint64_t v1097;
  uint64_t v1098;
  int v1099;
  uint64_t v1100;
  uint64_t *v1101;
  uint64_t v1102;
  unint64_t v1103;
  uint64_t v1104;
  _QWORD *v1105;
  int v1106;
  unsigned int v1107;
  unsigned int v1108;
  unsigned int v1109;
  unsigned int v1110;
  unsigned int v1111;
  unsigned int v1112;
  unint64_t v1113;
  int v1114;
  int64_t v1115;
  unint64_t v1116;
  unsigned int v1117;
  _QWORD *v1118;
  unint64_t v1119;
  uint64_t v1120;
  unsigned int v1121;
  unsigned int v1122;
  char *v1123;
  uint64_t v1124;
  int v1125;
  int v1126;
  unint64_t v1127;
  _QWORD *v1128;
  uint64_t *v1129;
  unint64_t v1130;
  uint64_t v1131;
  unsigned int v1132;
  int v1133;
  unint64_t v1134;
  _QWORD *v1135;
  uint64_t *v1136;
  unint64_t v1137;
  uint64_t v1138;
  unsigned int v1139;
  unsigned int v1140;
  BOOL v1141;
  int v1142;
  uint64_t *v1143;
  uint64_t v1144;
  unint64_t v1145;
  uint64_t v1146;
  uint64_t *v1147;
  int v1148;
  int v1149;
  uint64_t v1150;
  uint64_t v1151;
  void *v1152;
  void *v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  unint64_t v1157;
  unint64_t v1158;
  _QWORD *v1159;
  char v1160;
  unsigned int v1161;
  unsigned int v1162;
  unint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  size_t v1170;
  uint64_t *v1171;
  unint64_t v1172;
  _QWORD *v1173;
  uint64_t v1174;
  _BOOL4 v1175;
  uint64_t *v1176;
  unint64_t v1177;
  uint64_t *v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  char v1183;
  int v1184;
  uint64_t v1185;
  unint64_t v1186;
  void **v1187;
  void *v1188;
  int *v1189;
  uint64_t v1190;
  uint64_t v1191;
  int v1192;
  uint64_t *v1193;
  unint64_t v1194;
  _QWORD *v1195;
  uint64_t v1196;
  _BOOL4 v1197;
  uint64_t *v1198;
  unint64_t v1199;
  uint64_t *v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  char v1205;
  int v1206;
  uint64_t v1207;
  unint64_t v1208;
  uint64_t *v1209;
  unint64_t v1210;
  _QWORD *v1211;
  uint64_t v1212;
  _BOOL4 v1213;
  uint64_t *v1214;
  unint64_t v1215;
  uint64_t *v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  char v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  unint64_t v1225;
  unint64_t v1226;
  _QWORD *v1227;
  _QWORD *v1228;
  uint64_t v1229;
  _QWORD *v1230;
  uint64_t *v1231;
  unint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  unint64_t v1236;
  size_t v1237;
  int v1238;
  _QWORD *v1239;
  int v1240;
  uint64_t v1241;
  unint64_t v1242;
  uint64_t v1243;
  uint64_t *v1244;
  int v1245;
  uint64_t v1246;
  int v1247;
  void *ShiftAmountTy;
  char v1249;
  void *v1250;
  unint64_t v1251;
  unsigned int ExtendedSizeInBits;
  const char *v1253;
  uint64_t *v1254;
  unint64_t v1255;
  _QWORD *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  unsigned int v1264;
  uint64_t *v1265;
  uint64_t v1266;
  unint64_t v1267;
  llvm *v1268;
  uint64_t v1269;
  _QWORD *v1270;
  unint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t *v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  unsigned int v1278;
  unsigned int v1279;
  uint64_t *v1280;
  uint64_t v1281;
  unint64_t v1282;
  llvm *v1283;
  uint64_t v1284;
  _QWORD *v1285;
  unint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t *v1289;
  unint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  llvm::APInt *v1293;
  llvm::APInt *v1294;
  unsigned int v1296;
  unsigned int v1297;
  uint64_t *v1298;
  unint64_t v1299;
  _QWORD *v1300;
  uint64_t v1301;
  BOOL v1302;
  int8x8_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  _QWORD *v1307;
  uint64_t *v1308;
  unint64_t v1309;
  uint64_t v1310;
  unsigned int v1311;
  uint64_t v1312;
  __int128 v1313;
  _QWORD *v1314;
  unint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  uint64_t *v1319;
  int v1320;
  uint64_t v1321;
  uint64_t v1322;
  __int16 v1323;
  int v1324;
  int64_t v1325;
  unint64_t v1326;
  unsigned int v1327;
  unsigned int v1328;
  _QWORD *v1329;
  uint64_t *v1330;
  unint64_t v1331;
  uint64_t v1332;
  _QWORD *v1333;
  uint64_t *v1334;
  unint64_t v1335;
  uint64_t v1336;
  void *v1337;
  uint64_t *v1338;
  int v1339;
  unsigned int v1340;
  unsigned int v1341;
  _QWORD *v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  unsigned int v1346;
  _BOOL4 v1347;
  uint64_t v1348;
  __int16 v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t *v1354;
  unint64_t v1355;
  unint64_t v1356;
  const char *v1357;
  unsigned int v1358;
  char v1359;
  uint64_t v1360;
  __int16 v1361;
  int v1362;
  char v1363;
  unint64_t v1364;
  char *v1365;
  uint64_t v1366;
  _QWORD *v1367;
  uint64_t v1368;
  int v1369;
  unint64_t v1370;
  unsigned int v1371;
  int v1372;
  unsigned int v1373;
  unsigned int v1374;
  int v1375;
  int64_t v1376;
  unint64_t v1377;
  unsigned int v1378;
  _QWORD *v1379;
  unint64_t v1380;
  unint64_t v1381;
  uint64_t *v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  __int16 v1386;
  _QWORD *v1387;
  unint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  llvm *v1392;
  uint64_t v1393;
  _QWORD *v1394;
  unint64_t v1395;
  unint64_t v1396;
  uint64_t *v1397;
  uint64_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  __int16 v1401;
  _QWORD *v1402;
  uint64_t *v1403;
  unint64_t v1404;
  uint64_t v1405;
  size_t v1406;
  unint64_t v1407;
  uint64_t *v1408;
  uint64_t v1409;
  int v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t *v1413;
  int v1414;
  uint64_t v1415;
  unsigned int v1416;
  _QWORD *v1417;
  int v1418;
  int64_t v1419;
  unint64_t v1420;
  unsigned int v1421;
  uint64_t v1422;
  llvm *v1423;
  uint64_t v1424;
  _QWORD *v1425;
  unint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  int v1429;
  unsigned int v1430;
  unsigned int v1431;
  const char *v1432;
  unsigned int v1433;
  _QWORD *v1434;
  unint64_t v1435;
  uint64_t v1436;
  int v1437;
  uint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  uint64_t *v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  unsigned int v1445;
  uint64_t v1446;
  uint64_t v1447;
  unsigned int v1448;
  _QWORD *v1449;
  uint64_t *v1450;
  unint64_t v1451;
  uint64_t v1452;
  _QWORD *v1453;
  uint64_t *v1454;
  unint64_t v1455;
  uint64_t v1456;
  uint64_t *v1457;
  unint64_t v1458;
  _QWORD *v1459;
  uint64_t v1460;
  uint64_t *v1461;
  unint64_t v1462;
  _QWORD *v1463;
  uint64_t v1464;
  uint64_t *v1465;
  unint64_t v1466;
  _QWORD *v1467;
  uint64_t v1468;
  uint64_t *v1469;
  unint64_t v1470;
  _QWORD *v1471;
  uint64_t v1472;
  uint64_t *v1473;
  unint64_t v1474;
  _QWORD *v1475;
  uint64_t v1476;
  uint64_t *v1477;
  unint64_t v1478;
  _QWORD *v1479;
  uint64_t v1480;
  uint64_t *v1481;
  unint64_t v1482;
  _QWORD *v1483;
  uint64_t v1484;
  uint64_t *v1485;
  unint64_t v1486;
  _QWORD *v1487;
  uint64_t v1488;
  uint64_t *v1489;
  unint64_t v1490;
  _QWORD *v1491;
  uint64_t v1492;
  uint64_t *v1493;
  unint64_t v1494;
  _QWORD *v1495;
  uint64_t v1496;
  _QWORD *v1497;
  uint64_t *v1498;
  unint64_t v1499;
  uint64_t v1500;
  _QWORD *v1501;
  uint64_t *v1502;
  unint64_t v1503;
  uint64_t v1504;
  uint64_t *v1505;
  unint64_t v1506;
  _QWORD *v1507;
  uint64_t v1508;
  uint64_t *v1509;
  unint64_t v1510;
  _QWORD *v1511;
  uint64_t v1512;
  uint64_t *v1513;
  unint64_t v1514;
  _QWORD *v1515;
  uint64_t v1516;
  int v1517;
  int v1518;
  int v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  unint64_t __n;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  const void **v1529;
  int v1530;
  uint64_t v1531;
  llvm::APInt *v1532;
  llvm::APInt *v1533;
  uint64_t v1534;
  llvm::Type *v1535;
  unint64_t v1536;
  unsigned int v1537;
  unsigned int v1538[2];
  uint64_t v1539;
  llvm::APInt *v1540;
  void *v1541;
  unsigned int v1542;
  void *v1543;
  unsigned int v1544;
  int v1545[4];
  uint64_t v1546;
  int v1547;
  void *v1548;
  unsigned int v1549;
  void *v1550;
  unsigned int v1551;
  void *v1552;
  unsigned int v1553;
  void *v1554;
  unsigned int v1555;
  void *v1556;
  int v1557;
  void *v1558;
  unsigned int v1559;
  void *v1560;
  unsigned int v1561;
  void *v1562;
  uint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t **v1568;
  uint64_t v1569;
  void *__src[2];
  unint64_t v1571;
  unsigned int v1572;
  __int128 v1573;
  llvm *v1574;
  uint64_t v1575;
  unsigned __int8 *v1576;
  int v1577;
  char *v1578;
  unsigned int v1579;
  unint64_t v1580;
  unsigned int v1581;
  uint64_t v1582;
  unsigned int v1583;
  unint64_t v1584;
  unsigned int v1585;
  uint64_t v1586;
  const llvm::KnownBits *v1587;
  __int128 v1588;
  unint64_t v1589;
  unsigned int v1590;
  uint64_t v1591;

  v1591 = *MEMORY[0x1E0C80C00];
  v1586 = a2;
  v1587 = a3;
  v15 = (llvm::Type *)*(unsigned int *)(a4 + 8);
  v1583 = v15;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v1582, 0, 0);
    v1585 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&v1584, 0, 0);
  }
  else
  {
    v1585 = v15;
    v1582 = 0;
    v1584 = 0;
  }
  if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
    MEMORY[0x1CAA32F9C](*a6, 0x1000C8000313F17);
  *a6 = (const void *)v1582;
  *((_DWORD *)a6 + 2) = v1583;
  v1583 = 0;
  v16 = a6 + 2;
  if (*((_DWORD *)a6 + 6) >= 0x41u && *v16)
    MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
  a6[2] = (const void *)v1584;
  *((_DWORD *)a6 + 6) = v1585;
  v17 = v1586;
  v18 = (unsigned __int8 *)(*(_QWORD *)(v1586 + 40) + 16 * v1587);
  if (*v18)
  {
    if (*v18 - 120 < 0x33)
      return 0;
  }
  else if (*(_BYTE *)(*((_QWORD *)v18 + 1) + 8) == 19)
  {
    return 0;
  }
  v1537 = a8;
  v1534 = a1;
  v1535 = v15;
  v1530 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a7 + 40) + 40) + 272);
  v20 = *((unsigned int *)a5 + 2);
  v21 = *(unsigned int *)(a4 + 8);
  v1581 = v21;
  if (v21 > 0x40)
  {
    v24 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
    v22 = (_QWORD *)operator new[]();
    memcpy(v22, *(const void **)a4, v24);
    v23 = *((_DWORD *)a5 + 2);
  }
  else
  {
    v22 = *(_QWORD **)a4;
    v23 = v20;
  }
  v1580 = (unint64_t)v22;
  v1579 = v23;
  v1540 = (llvm::APInt *)a6;
  if (v23 > 0x40)
  {
    v26 = (((unint64_t)v23 + 63) >> 3) & 0x3FFFFFF8;
    v25 = (char *)operator new[]();
    memcpy(v25, *a5, v26);
  }
  else
  {
    v25 = *a5;
  }
  v1578 = v25;
  v27 = *(unsigned __int8 **)(v17 + 64);
  v1576 = v27;
  v28 = v17;
  if (v27)
  {
    llvm::MetadataTracking::track((uint64_t)&v1576, v27, 2);
    v28 = v1586;
  }
  v1577 = *(_DWORD *)(v17 + 60);
  v29 = *(unsigned __int16 *)(v28 + 24);
  switch(v29)
  {
    case 51:
      goto LABEL_61;
    case 12:
      v37 = *(_QWORD *)(v28 + 80);
      v39 = *(void **)(v37 + 32);
      v38 = (llvm::detail::DoubleAPFloat *)(v37 + 32);
      if (v39 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v38, (unsigned int *)&v1588);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v38, (unsigned int *)&v1588);
      v40 = DWORD2(v1588);
      v1583 = DWORD2(v1588);
      if (DWORD2(v1588) > 0x40)
      {
        v965 = (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8;
        v1582 = operator new[]();
        memcpy((void *)v1582, (const void *)v1588, v965);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1582);
        v40 = v1583;
        v42 = v1582;
      }
      else
      {
        if (DWORD2(v1588))
          v41 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1588);
        else
          v41 = 0;
        v42 = v41 & ~(_QWORD)v1588;
      }
      v43 = DWORD2(v1588);
      if (DWORD2(v1588) > 0x40)
      {
        v966 = (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8;
        v44 = (void *)operator new[]();
        memcpy(v44, (const void *)v1588, v966);
      }
      else
      {
        v44 = (void *)v1588;
      }
      if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
      *(_QWORD *)v1540 = v42;
      *((_DWORD *)v1540 + 2) = v40;
      if (*((_DWORD *)v1540 + 6) >= 0x41u && *v16)
        MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
      *((_QWORD *)v1540 + 2) = v44;
      *((_DWORD *)v1540 + 6) = v43;
      if (DWORD2(v1588) < 0x41)
        goto LABEL_61;
      v45 = v1588;
      if (!(_QWORD)v1588)
        goto LABEL_61;
LABEL_41:
      MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      goto LABEL_61;
    case 11:
      v30 = *(_QWORD *)(v28 + 80);
      v31 = *(unsigned int *)(v30 + 32);
      v1583 = v31;
      if (v31 > 0x40)
      {
        v1582 = operator new[]();
        memcpy((void *)v1582, *(const void **)(v30 + 24), ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1582);
        LODWORD(v31) = v1583;
        v34 = v1582;
        v32 = v1540;
      }
      else
      {
        v32 = v1540;
        if ((_DWORD)v31)
          v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
        else
          v33 = 0;
        v34 = v33 & ~*(_QWORD *)(v30 + 24);
      }
      v35 = *(unsigned int *)(v30 + 32);
      if (v35 > 0x40)
      {
        v36 = (void *)operator new[]();
        memcpy(v36, *(const void **)(v30 + 24), ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v36 = *(void **)(v30 + 24);
      }
      if (*((_DWORD *)v32 + 2) >= 0x41u && *(_QWORD *)v32)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v32, 0x1000C8000313F17);
      *(_QWORD *)v32 = v34;
      *((_DWORD *)v32 + 2) = v31;
      if (*((_DWORD *)v32 + 6) >= 0x41u && *v16)
        MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
      v19 = 0;
      *((_QWORD *)v32 + 2) = v36;
      *((_DWORD *)v32 + 6) = v35;
      goto LABEL_62;
  }
  v1529 = a6 + 2;
  v46 = *(_QWORD *)a7;
  v47 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a7 + 40) + 40);
  v48 = *(_QWORD *)(v28 + 48);
  v49 = *(_QWORD *)(v28 + 40) + 16 * v1587;
  v51 = *(llvm **)v49;
  v50 = *(_QWORD *)(v49 + 8);
  v1574 = *(llvm **)v49;
  v1575 = v50;
  if (v48)
    LOBYTE(v48) = *(_QWORD *)(v48 + 32) == 0;
  if ((v48 & 1) == 0 && (a9 & 1) == 0)
  {
    if (v1537)
    {
      sub_1C5D44BD8(v46, v28, (_BOOL8)v1587, (llvm::APInt *)&v1578, v1537, (uint64_t)&v1582);
      if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
      *(_QWORD *)v1540 = v1582;
      *((_DWORD *)v1540 + 2) = v1583;
      v1583 = 0;
      if (*((_DWORD *)v1540 + 6) < 0x41u || !*v1529)
      {
        *((_QWORD *)v1540 + 2) = v1584;
        *((_DWORD *)v1540 + 6) = v1585;
        goto LABEL_61;
      }
      MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
      v1140 = v1583;
      *((_QWORD *)v1540 + 2) = v1584;
      *((_DWORD *)v1540 + 6) = v1585;
      v1585 = 0;
      if (v1140 < 0x41)
        goto LABEL_61;
      v45 = v1582;
      if (!v1582)
        goto LABEL_61;
      goto LABEL_41;
    }
    v58 = (unint64_t)v1535;
    v1583 = v1535;
    if (v1535 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v1582, -1, 1);
      v57 = v1529;
    }
    else
    {
      v57 = v1529;
      if ((_DWORD)v1535)
        v59 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1535;
      else
        v59 = 0;
      v1582 = v59;
    }
    if (v1581 >= 0x41 && v1580)
      MEMORY[0x1CAA32F9C](v1580, 0x1000C8000313F17);
    v1580 = v1582;
    v1581 = v1583;
    v1583 = v20;
    if (v20 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v1582, -1, 1);
    }
    else
    {
      if ((_DWORD)v20)
        v60 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      else
        v60 = 0;
      v1582 = v60;
    }
    if (v1579 >= 0x41 && v1578)
      MEMORY[0x1CAA32F9C](v1578, 0x1000C8000313F17);
    v1578 = (char *)v1582;
    v1579 = v1583;
    v28 = v1586;
    v29 = *(unsigned __int16 *)(v1586 + 24);
LABEL_87:
    v1583 = 1;
    v1582 = 0;
    v1585 = 1;
    v1584 = 0;
    if (v29 > 57)
    {
      v61 = v47 + 272;
      switch(v29)
      {
        case 146:
          v75 = *(_QWORD *)a7;
          v77 = (uint64_t)v1587;
          v76 = v28;
          goto LABEL_149;
        case 147:
          v444 = *(uint64_t **)(v28 + 32);
          v445 = *v444;
          v446 = v444[1];
          *(_OWORD *)v1545 = *(_OWORD *)(v444 + 5);
          v447 = v444[10];
          v448 = *(unsigned __int16 *)(v447 + 24);
          if (v448 != 35 && v448 != 11)
            v447 = 0;
          v1573 = *(_OWORD *)(*(_QWORD *)(v445 + 40) + 16 * v446);
          v449 = v1579;
          LODWORD(v1569) = v1579;
          if (v1579 > 0x40)
          {
            v675 = (((unint64_t)v1579 + 63) >> 3) & 0x3FFFFFF8;
            v450 = operator new[]();
            memcpy((void *)v450, v1578, v675);
          }
          else
          {
            v450 = (uint64_t)v1578;
          }
          v676 = a7;
          v1568 = (uint64_t **)v450;
          if (!v447)
            goto LABEL_886;
          v678 = *(_QWORD *)(v447 + 80);
          v679 = (llvm::APInt *)(v678 + 24);
          v680 = sub_1C612FE00((llvm::EVT *)&v1573, (const char *)v27);
          v681 = *(_DWORD *)(v678 + 32);
          if (v681 < 0x41)
            goto LABEL_891;
          if (v681 - llvm::APInt::countLeadingZerosSlowCase(v679) <= 0x40)
          {
            v679 = *(llvm::APInt **)v679;
LABEL_891:
            if (*(_QWORD *)v679 < (unint64_t)v680)
            {
              v682 = *(_QWORD *)(v447 + 80);
              v683 = (_QWORD *)(v682 + 24);
              if (*(_DWORD *)(v682 + 32) >= 0x41u)
                v683 = (_QWORD *)*v683;
              v684 = (_QWORD *)*v683;
              v685 = 1 << *v683;
              v686 = ~v685;
              v687 = v684 >> 6;
              if (v449 > 0x40)
              {
                *(_QWORD *)(v450 + 8 * v687) &= v686;
              }
              else
              {
                v450 &= v686;
                v1568 = (uint64_t **)v450;
              }
              v813 = &v1578[8 * v687];
              if (v1579 < 0x41)
                v813 = (char *)&v1578;
              if ((*(_QWORD *)v813 & v685) == 0)
              {
                v814 = (int)v1587;
                *(_QWORD *)(v676 + 16) = v1586;
                *(_DWORD *)(v676 + 24) = v814;
                *(_QWORD *)(v676 + 32) = v445;
                *(_DWORD *)(v676 + 40) = v446;
                v19 = 1;
                goto LABEL_1539;
              }
            }
          }
LABEL_886:
          DWORD2(v1588) = 1;
          *(_QWORD *)&v1588 = 0;
          v1590 = 1;
          v1589 = 0;
          v677 = sub_1C6329368((unsigned int *)v1545, (uint64_t)v27, (BOOL)a3);
          if (v1581 >= v677)
          {
            if (v1581 > v677)
            {
              llvm::APInt::trunc((llvm::APInt *)&v1580, v677, (llvm::APInt *)&v1566);
            }
            else
            {
              LODWORD(v1567) = v1581;
              if (v1581 > 0x40)
              {
                v1566 = operator new[]();
                memcpy((void *)v1566, (const void *)v1580, (((unint64_t)v1567 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v1566 = v1580;
              }
            }
          }
          else
          {
            llvm::APInt::zext((llvm::APInt *)&v1580, v677, (uint64_t)&v1566);
          }
          if ((sub_1C6375E58(v1534, *(_QWORD *)v1545, *(_QWORD *)&v1545[2], &v1566, &v1588, v676, v1537 + 1, 0) & 1) != 0)
          {
            v19 = 1;
            goto LABEL_1534;
          }
          sub_1C4F9E728((llvm::APInt *)&v1588, v1535, __src);
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(void **)v1540 = __src[0];
          *((_DWORD *)v1540 + 2) = __src[1];
          LODWORD(__src[1]) = 0;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
          {
            MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
            v1445 = __src[1];
            *((_QWORD *)v1540 + 2) = v1571;
            *((_DWORD *)v1540 + 6) = v1572;
            v1572 = 0;
            if (v1445 >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          }
          else
          {
            *((_QWORD *)v1540 + 2) = v1571;
            *((_DWORD *)v1540 + 6) = v1572;
          }
          LODWORD(__src[1]) = 1;
          __src[0] = 0;
          v1572 = 1;
          v1571 = 0;
          v19 = sub_1C5D7BE14(v1534, v445, v446, &v1580, &v1568, __src, v676, v1537 + 1, 0);
          if ((v19 & 1) != 0)
            goto LABEL_1532;
          if (v449 <= 0x40)
          {
            if (!v450)
              goto LABEL_1532;
            goto LABEL_1525;
          }
          v1001 = 0;
          v1002 = (unint64_t)(v449 + 63) >> 6;
          do
          {
            v96 = v1002-- < 1;
            if (v96)
              break;
            v1003 = *(_QWORD *)(v450 + 8 * v1002);
            v1001 += __clz(v1003);
          }
          while (!v1003);
          v1004 = v449 | 0xFFFFFFC0;
          if ((v449 & 0x3F) == 0)
            v1004 = 0;
          if (v1001 + v1004 != (_DWORD)v449)
          {
LABEL_1525:
            v1005 = *((unsigned int *)v1540 + 2);
            if (v1005 > 0x40)
            {
              v1006 = (void *)operator new[]();
              memcpy(v1006, *(const void **)v1540, ((unint64_t)(v1005 + 63) >> 3) & 0x3FFFFFF8);
              v1489 = (uint64_t *)__src[0];
              v1490 = (unint64_t)(v1005 + 63) >> 6;
              v1491 = v1006;
              do
              {
                v1492 = *v1489++;
                *v1491++ &= v1492;
                --v1490;
              }
              while (v1490);
            }
            else
            {
              v1006 = (void *)((uint64_t)__src[0] & *(_QWORD *)v1540);
            }
            v1007 = *((unsigned int *)v1540 + 6);
            if (v1007 > 0x40)
            {
              v1008 = (void *)operator new[]();
              memcpy(v1008, *v1529, ((unint64_t)(v1007 + 63) >> 3) & 0x3FFFFFF8);
              v1493 = (uint64_t *)v1571;
              v1494 = (unint64_t)(v1007 + 63) >> 6;
              v1495 = v1008;
              do
              {
                v1496 = *v1493++;
                *v1495++ &= v1496;
                --v1494;
              }
              while (v1494);
            }
            else
            {
              v1008 = (void *)(v1571 & (unint64_t)*v1529);
            }
            if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
            *(_QWORD *)v1540 = v1006;
            *((_DWORD *)v1540 + 2) = v1005;
            if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
              MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
            *((_QWORD *)v1540 + 2) = v1008;
            *((_DWORD *)v1540 + 6) = v1007;
          }
LABEL_1532:
          if (v1572 >= 0x41 && v1571)
            MEMORY[0x1CAA32F9C](v1571, 0x1000C8000313F17);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
LABEL_1534:
          if (v1567 >= 0x41 && v1566)
            MEMORY[0x1CAA32F9C](v1566, 0x1000C8000313F17);
          if (v1590 >= 0x41 && v1589)
            MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
          if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
            MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
LABEL_1539:
          if (v449 >= 0x41 && v450)
            MEMORY[0x1CAA32F9C](v450, 0x1000C8000313F17);
          goto LABEL_2171;
        case 148:
          v429 = *(_QWORD *)(v28 + 32);
          *(_OWORD *)v1545 = *(_OWORD *)v429;
          v430 = *(_QWORD *)(v429 + 40);
          v431 = *(_QWORD *)(v429 + 48);
          v1588 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v1545 + 40) + 16 * v1545[2]);
          v432 = sub_1C52B71D4((unsigned __int8 *)&v1588);
          v435 = sub_1C6329368((unsigned int *)v1545, v433, v434);
          if (HIDWORD(v432) == 1)
            goto LABEL_974;
          v436 = v435;
          v437 = a7;
          DWORD2(v1573) = v432;
          if (v432 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1573, -1, 1);
          }
          else
          {
            if ((_DWORD)v432)
              v438 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v432;
            else
              v438 = 0;
            *(_QWORD *)&v1573 = v438;
          }
          v439 = *(unsigned __int16 *)(v430 + 24);
          if (v439 != 35 && v439 != 11)
            goto LABEL_1194;
          v440 = *(_QWORD *)(v430 + 80);
          v441 = (unint64_t **)(v440 + 24);
          v442 = *(_DWORD *)(v440 + 32);
          if (v442 >= 0x41)
          {
            if (v442 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v440 + 24)) >= 0x41)
              goto LABEL_1194;
            v443 = **v441;
          }
          else
          {
            v443 = (unint64_t)*v441;
          }
          if (v443 >= v432)
            goto LABEL_1194;
          DWORD2(v1588) = v432;
          if (v432 <= 0x40)
          {
            v844 = 0;
            v845 = 1 << v443;
LABEL_1189:
            v846 = v844 | v845;
            goto LABEL_1190;
          }
          llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
          LODWORD(v432) = DWORD2(v1588);
          v845 = 1 << v443;
          if (DWORD2(v1588) <= 0x40)
          {
            v844 = v1588;
            goto LABEL_1189;
          }
          v846 = v1588;
          *(_QWORD *)(v1588 + 8 * (v443 >> 6)) |= v845;
LABEL_1190:
          if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
            MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
          *(_QWORD *)&v1573 = v846;
          DWORD2(v1573) = v432;
LABEL_1194:
          LODWORD(v1569) = v1581;
          if (v1581 > 0x40)
          {
            v1568 = (uint64_t **)operator new[]();
            memcpy(v1568, (const void *)v1580, (((unint64_t)v1569 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1568 = (uint64_t **)v1580;
          }
          if (v1535 > v436)
          {
            llvm::APInt::trunc((llvm::APInt *)&v1568, v436, (llvm::APInt *)&v1588);
            if (v1569 >= 0x41 && v1568)
              MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
            v1568 = (uint64_t **)v1588;
            LODWORD(v1569) = DWORD2(v1588);
          }
          v847 = 0;
          if ((sub_1C5D7BE14(v1534, *(_QWORD *)v1545, *(_QWORD *)&v1545[2], &v1568, &v1573, &v1582, v437, v1537 + 1, 0) & 1) != 0)
            goto LABEL_1643;
          v848 = v1569;
          if (!(_DWORD)v1569)
            goto LABEL_1498;
          if (v1569 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1568) != v848)
              goto LABEL_1628;
          }
          else if (v1568 != (uint64_t **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1569))
          {
            goto LABEL_1628;
          }
LABEL_1498:
          v993 = DWORD2(v1573);
          if (!DWORD2(v1573))
            goto LABEL_1632;
          if (DWORD2(v1573) > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1573) == v993)
              goto LABEL_1632;
          }
          else if ((_QWORD)v1573 == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1573))
          {
            goto LABEL_1632;
          }
LABEL_1628:
          v1058 = sub_1C5D86770((unsigned int *)v1534, *(uint64_t *)v1545, *(_BOOL8 *)&v1545[2], (unsigned int *)&v1568, (unsigned int *)&v1573, *(_QWORD *)v437, v1537 + 1);
          if (v1058)
          {
            v1061 = *(_QWORD *)(*(_QWORD *)v437 + 832);
            if (v1061)
              LOWORD(v1061) = *(_WORD *)(v1061 + 8);
            v1062 = sub_1C5D56C70(*(_QWORD *)v437, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1058, v1059, v1060, v430, v431, v1061);
            v847 = 0;
            v1063 = (int)v1587;
            *(_QWORD *)(v437 + 16) = v1586;
            *(_DWORD *)(v437 + 24) = v1063;
            *(_QWORD *)(v437 + 32) = v1062;
            *(_DWORD *)(v437 + 40) = v1064;
            goto LABEL_1643;
          }
LABEL_1632:
          v1065 = v1583;
          if (*((_DWORD *)v1540 + 2) > 0x40u || v1583 > 0x40)
          {
            if (&v1582 != (uint64_t *)v1540)
            {
              llvm::APInt::reallocate((uint64_t)v1540, v1583);
              v1446 = *((unsigned int *)v1540 + 2);
              if (v1446 <= 0x40)
                *(_QWORD *)v1540 = v1582;
              else
                memcpy(*(void **)v1540, (const void *)v1582, ((unint64_t)(v1446 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(_QWORD *)v1540 = v1582;
            *((_DWORD *)v1540 + 2) = v1065;
          }
          v1066 = v1585;
          if (*((_DWORD *)v1540 + 6) > 0x40u || v1585 > 0x40)
          {
            if (&v1582 != (uint64_t *)v1540)
            {
              llvm::APInt::reallocate((uint64_t)v1529, v1585);
              v1447 = *((unsigned int *)v1540 + 6);
              if (v1447 <= 0x40)
                *v1529 = (const void *)v1584;
              else
                memcpy((void *)*v1529, (const void *)v1584, ((unint64_t)(v1447 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *((_QWORD *)v1540 + 2) = v1584;
            *((_DWORD *)v1540 + 6) = v1066;
          }
          if (v1535 > v436)
          {
            llvm::APInt::zext(v1540, v1535, (uint64_t)&v1588);
            llvm::APInt::zext((llvm::APInt *)v1529, v1535, (uint64_t)__src);
            v1067 = DWORD2(v1588);
            v1068 = v1588;
            v1069 = (int)__src[1];
            v1070 = __src[0];
            if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
            *(_QWORD *)v1540 = v1068;
            *((_DWORD *)v1540 + 2) = v1067;
            if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
              MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
            *((_QWORD *)v1540 + 2) = v1070;
            *((_DWORD *)v1540 + 6) = v1069;
          }
          v847 = 1;
LABEL_1643:
          if (v1569 >= 0x41 && v1568)
            MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
          if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
            MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
          a7 = v437;
          if ((v847 & 1) == 0)
            goto LABEL_2170;
          goto LABEL_934;
        case 149:
          v465 = v1540;
          v466 = *((unsigned int *)v1540 + 2);
          if (v466 > 0x40)
          {
            memset(*(void **)v1540, 255, ((unint64_t)(v466 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v466) = *((_DWORD *)v1540 + 2);
            if ((_DWORD)v466)
            {
LABEL_597:
              v467 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v466;
              if (v466 < 0x41)
              {
LABEL_598:
                v468 = v1540;
                goto LABEL_599;
              }
              v468 = (llvm::APInt *)(*(_QWORD *)v1540
                                   + 8 * ((((unint64_t)v466 + 63) >> 6) - 1));
LABEL_599:
              *(_QWORD *)v468 &= v467;
              v469 = *((unsigned int *)v1540 + 6);
              if (v469 > 0x40)
              {
                memset(*((void **)v1540 + 2), 255, ((unint64_t)(v469 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v469) = *((_DWORD *)v1540 + 6);
                if ((_DWORD)v469)
                {
LABEL_601:
                  v470 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v469;
                  if (v469 >= 0x41)
                  {
                    v471 = (char *)*v57 + 8 * (((unint64_t)v469 + 63) >> 6) - 8;
LABEL_603:
                    *v471 &= v470;
                    v1588 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v1586 + 32) + 40)
                                      + 16 * *(unsigned int *)(*(_QWORD *)(v1586 + 32) + 8));
                    v472 = *(unsigned __int16 *)(v1586 + 56);
                    v473 = sub_1C612FE00((llvm::EVT *)&v1588, (const char *)v27);
                    if (v472)
                    {
                      v474 = v473;
                      v475 = 0;
                      while (1)
                      {
                        llvm::APInt::extractBits((llvm::APInt *)&v1578, v474, v474 * v475, (unsigned int *)__src);
                        LOBYTE(v1517) = 0;
                        if ((sub_1C5D7BE14(v1534, *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 40 * v475), *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 40 * v475 + 8), &v1580, __src, &v1582, a7, v1537 + 1, v1517) & 1) != 0)
                        {
                          if (LODWORD(__src[1]) < 0x41)
                            goto LABEL_2170;
LABEL_1068:
                          v299 = __src[0];
                          if (!__src[0])
                            goto LABEL_2170;
LABEL_387:
                          MEMORY[0x1CAA32F9C](v299, 0x1000C8000313F17);
                          goto LABEL_2170;
                        }
                        if (LODWORD(__src[1]) > 0x40)
                          break;
                        if (__src[0])
                          goto LABEL_615;
LABEL_625:
                        if (++v475 == v472)
                          goto LABEL_934;
                      }
                      v476 = 0;
                      v477 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
                      v478 = __src[0];
                      do
                      {
                        v96 = v477-- < 1;
                        if (v96)
                          break;
                        v479 = *((_QWORD *)__src[0] + v477);
                        v476 += __clz(v479);
                      }
                      while (!v479);
                      v480 = LODWORD(__src[1]) | 0xFFFFFFC0;
                      if (((uint64_t)__src[1] & 0x3F) == 0)
                        v480 = 0;
                      if (v476 + v480 != LODWORD(__src[1]))
                      {
LABEL_615:
                        v481 = *((unsigned int *)v465 + 2);
                        if (v481 > 0x40)
                        {
                          v482 = (void *)operator new[]();
                          memcpy(v482, *(const void **)v465, ((unint64_t)(v481 + 63) >> 3) & 0x3FFFFFF8);
                          v485 = (uint64_t *)v1582;
                          v486 = (unint64_t)(v481 + 63) >> 6;
                          v487 = v482;
                          do
                          {
                            v488 = *v485++;
                            *v487++ &= v488;
                            --v486;
                          }
                          while (v486);
                          v465 = v1540;
                        }
                        else
                        {
                          v482 = (void *)(v1582 & *(_QWORD *)v465);
                        }
                        v483 = *((unsigned int *)v465 + 6);
                        if (v483 > 0x40)
                        {
                          v484 = (void *)operator new[]();
                          memcpy(v484, *v1529, ((unint64_t)(v483 + 63) >> 3) & 0x3FFFFFF8);
                          v489 = (uint64_t *)v1584;
                          v490 = (unint64_t)(v483 + 63) >> 6;
                          v491 = v484;
                          do
                          {
                            v492 = *v489++;
                            *v491++ &= v492;
                            --v490;
                          }
                          while (v490);
                        }
                        else
                        {
                          v484 = (void *)(v1584 & (unint64_t)*v1529);
                        }
                        v465 = v1540;
                        if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                          MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
                        *(_QWORD *)v1540 = v482;
                        *((_DWORD *)v1540 + 2) = v481;
                        if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
                          MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
                        *((_QWORD *)v1540 + 2) = v484;
                        *((_DWORD *)v1540 + 6) = v483;
                        if (LODWORD(__src[1]) < 0x41)
                          goto LABEL_625;
                        v478 = __src[0];
                      }
                      if (v478)
                        MEMORY[0x1CAA32F9C](v478, 0x1000C8000313F17);
                      goto LABEL_625;
                    }
LABEL_934:
                    v703 = *((unsigned int *)v1540 + 2);
                    if (v703 > 0x40)
                    {
                      v704 = operator new[]();
                      memcpy((void *)v704, *(const void **)v1540, ((unint64_t)(v703 + 63) >> 3) & 0x3FFFFFF8);
                      v705 = (uint64_t *)*((_QWORD *)v1540 + 2);
                      v706 = (unint64_t)(v703 + 63) >> 6;
                      v707 = (_QWORD *)v704;
                      do
                      {
                        v708 = *v705++;
                        *v707++ |= v708;
                        --v706;
                      }
                      while (v706);
                    }
                    else
                    {
                      v704 = *((_QWORD *)v1540 + 2) | *(_QWORD *)v1540;
                    }
                    if (v1581 > 0x40)
                    {
                      v711 = (uint64_t *)v1580;
                      v712 = (((unint64_t)v1581 + 63) >> 6) - 1;
                      v713 = (uint64_t *)v704;
                      v710 = (const llvm::APInt **)v1529;
                      do
                      {
                        v715 = *v711++;
                        v714 = v715;
                        v716 = *v713++;
                        v717 = v714 & ~v716;
                        v709 = v717 == 0;
                        v725 = v712-- != 0;
                        v718 = v725;
                      }
                      while (!v717 && (v718 & 1) != 0);
                    }
                    else
                    {
                      v709 = (v1580 & ~v704) == 0;
                      v710 = (const llvm::APInt **)v1529;
                    }
                    if (v703 >= 0x41 && v704)
                      MEMORY[0x1CAA32F9C](v704, 0x1000C8000313F17);
                    if (!v709)
                      goto LABEL_974;
                    v719 = v1586;
                    if (*(_WORD *)(v1586 + 56))
                    {
                      v720 = 0;
                      do
                      {
                        v721 = *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 40 * v720);
                        v722 = *(unsigned __int16 *)(v721 + 24);
                        v723 = v722 == 35 || v722 == 11;
                        if (v723 && (*(_BYTE *)(v721 + 26) & 8) != 0)
                          goto LABEL_974;
                        v724 = v720 + 1;
                        v720 = (v720 + 1);
                      }
                      while (v724 != *(unsigned __int16 *)(v1586 + 56));
                    }
                    if ((_BYTE)v1574)
                    {
                      v725 = ((_BYTE)v1574 - 120) >= 0x20u && ((_BYTE)v1574 - 2) >= 6u;
                      if (v725 && ((_BYTE)v1574 - 15) >= 0x3Cu)
                      {
                        if (((_BYTE)v1574 + 104) < 0x13u
                          || ((_BYTE)v1574 - 8) < 7u
                          || ((_BYTE)v1574 - 75) < 0x2Du)
                        {
                          goto LABEL_978;
                        }
                        goto LABEL_974;
                      }
                    }
                    else
                    {
                      if ((*(_DWORD *)(v1575 + 8) & 0xFE) == 0x12)
                        v726 = *(unsigned __int8 *)(**(_QWORD **)(v1575 + 16) + 8);
                      else
                        v726 = *(_DWORD *)(v1575 + 8);
                      if (v726 != 13)
                      {
                        if (v726 <= 6)
                        {
LABEL_978:
                          v728 = (uint64_t *)a7;
                          v729 = (int)v1587;
                          v730 = v728;
                          v731 = *v728;
                          sub_1C632993C((uint64_t)v1574, v1575, (BOOL)a3);
                          if (v732 == &unk_1C866F1C0)
                            llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v1588 + 1, (uint64_t)&unk_1C866F1C0, (uint64_t)v710);
                          else
                            llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)((char *)&v1588 + 8), v732, v710);
                          v733 = sub_1C6366D08(v731, (llvm::LLVMContext *)&v1588, (const llvm::APFloat *)&v1576, v1574, v1575, 0);
                          v730[2] = v719;
                          *((_DWORD *)v730 + 6) = v729;
                          v730[4] = (uint64_t)v733;
                          *((_DWORD *)v730 + 10) = v734;
                          if (*((_UNKNOWN **)&v1588 + 1) == &unk_1C866F1C0)
                          {
                            sub_1C4773C74((uint64_t *)&v1589);
                            goto LABEL_2170;
                          }
                          if ((*(_DWORD *)(*((_QWORD *)&v1588 + 1) + 8) - 64) <= 0xFFFFFF7F)
                          {
                            v299 = (void *)v1589;
                            if (v1589)
                              goto LABEL_387;
                          }
                          goto LABEL_2170;
                        }
LABEL_974:
                        v19 = 0;
                        goto LABEL_2171;
                      }
                    }
                    v727 = (int)v1587;
                    v373 = sub_1C63666FC(*(_QWORD *)a7, (llvm::LLVMContext *)v710, (const llvm::APInt *)&v1576, (uint64_t)v1574, v1575, 0, 0);
                    goto LABEL_976;
                  }
LABEL_602:
                  v471 = v57;
                  goto LABEL_603;
                }
              }
              else
              {
                *v57 = (const void *)-1;
                if ((_DWORD)v469)
                  goto LABEL_601;
              }
              v470 = 0;
              goto LABEL_602;
            }
          }
          else
          {
            *(_QWORD *)v1540 = -1;
            if ((_DWORD)v466)
              goto LABEL_597;
          }
          v467 = 0;
          goto LABEL_598;
        case 150:
          v459 = *(_QWORD *)(v28 + 32);
          *(_OWORD *)v1545 = *(_OWORD *)v459;
          v1573 = *(_OWORD *)(v459 + 40);
          v460 = *(_QWORD *)(*(_QWORD *)(v459 + 80) + 80);
          v461 = (_QWORD *)(v460 + 24);
          if (*(_DWORD *)(v460 + 32) >= 0x41u)
            v461 = (_QWORD *)*v461;
          v462 = *(_DWORD *)v461;
          v463 = v1573;
          v1588 = *(_OWORD *)(*(_QWORD *)(v1573 + 40) + 16 * DWORD2(v1573));
          v464 = sub_1C612FE00((llvm::EVT *)&v1588, (const char *)v27);
          llvm::APInt::extractBits((llvm::APInt *)&v1578, v464, v462, (unsigned int *)&v1568);
          LODWORD(v1567) = v1579;
          if (v1579 > 0x40)
          {
            v1566 = operator new[]();
            memcpy((void *)v1566, v1578, (((unint64_t)v1567 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1566 = (uint64_t)v1578;
          }
          DWORD2(v1588) = v464;
          if (v464 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
          else
            *(_QWORD *)&v1588 = 0;
          llvm::APInt::insertBits((void **)&v1566, (const llvm::APInt *)&v1588, v462);
          if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
            MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
          DWORD2(v1588) = 1;
          *(_QWORD *)&v1588 = 0;
          v1590 = 1;
          v1589 = 0;
          LODWORD(__src[1]) = 1;
          __src[0] = 0;
          v1572 = 1;
          v1571 = 0;
          v688 = v1537 + 1;
          v689 = *((_QWORD *)&v1573 + 1);
          v131 = 0;
          if ((sub_1C5D7BE14(v1534, v463, *((_QWORD *)&v1573 + 1), &v1580, &v1568, &v1588, a7, v688, 0) & 1) != 0)
            goto LABEL_1697;
          v690 = *(_QWORD *)&v1545[2];
          LOBYTE(v1521) = 0;
          v1539 = *(_QWORD *)v1545;
          v131 = 0;
          if ((sub_1C5D7BE14(v1534, *(_QWORD *)v1545, *(_QWORD *)&v1545[2], &v1580, &v1566, __src, a7, v688, v1521) & 1) != 0)
            goto LABEL_1697;
          v691 = *((unsigned int *)v1540 + 2);
          if (v691 > 0x40)
          {
            memset(*(void **)v1540, 255, ((unint64_t)(v691 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v691) = *((_DWORD *)v1540 + 2);
            if ((_DWORD)v691)
            {
LABEL_906:
              v692 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v691;
              if (v691 < 0x41)
              {
LABEL_907:
                v693 = v1540;
                goto LABEL_908;
              }
              v693 = (llvm::APInt *)(*(_QWORD *)v1540
                                   + 8 * ((((unint64_t)v691 + 63) >> 6) - 1));
LABEL_908:
              *(_QWORD *)v693 &= v692;
              v694 = *((unsigned int *)v1540 + 6);
              if (v694 > 0x40)
              {
                memset(*((void **)v1540 + 2), 255, ((unint64_t)(v694 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v694) = *((_DWORD *)v1540 + 6);
                if ((_DWORD)v694)
                {
LABEL_910:
                  v695 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v694;
                  if (v694 >= 0x41)
                  {
                    v696 = (char *)*v1529 + 8 * (((unint64_t)v694 + 63) >> 6) - 8;
LABEL_912:
                    *v696 &= v695;
                    if (v1569 > 0x40)
                    {
                      v892 = 0;
                      v893 = ((unint64_t)v1569 + 63) >> 6;
                      do
                      {
                        v96 = v893-- < 1;
                        if (v96)
                          break;
                        v894 = v1568[v893];
                        v892 += __clz((unint64_t)v894);
                      }
                      while (!v894);
                      v895 = v1569 | 0xFFFFFFC0;
                      if ((v1569 & 0x3F) == 0)
                        v895 = 0;
                      if (v892 + v895 == (_DWORD)v1569)
                      {
LABEL_1333:
                        if (v1567 > 0x40)
                        {
                          v900 = 0;
                          v901 = ((unint64_t)v1567 + 63) >> 6;
                          do
                          {
                            v96 = v901-- < 1;
                            if (v96)
                              break;
                            v902 = *(_QWORD *)(v1566 + 8 * v901);
                            v900 += __clz(v902);
                          }
                          while (!v902);
                          v903 = v1567 | 0xFFFFFFC0;
                          if ((v1567 & 0x3F) == 0)
                            v903 = 0;
                          if (v900 + v903 == (_DWORD)v1567)
                          {
LABEL_1349:
                            v908 = v1581;
                            if (v1581)
                            {
                              if (v1581 > 0x40)
                              {
                                if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1580) != v908)
                                  goto LABEL_1688;
                              }
                              else if (v1580 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1581)
                              {
                                goto LABEL_1688;
                              }
                            }
                            v994 = v1569;
                            if ((_DWORD)v1569)
                            {
                              if (v1569 > 0x40)
                              {
                                if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1568) != v994)
                                  goto LABEL_1688;
                              }
                              else if (v1568 != (uint64_t **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1569))
                              {
                                goto LABEL_1688;
                              }
                            }
                            v1071 = v1567;
                            if (!(_DWORD)v1567)
                              goto LABEL_1696;
                            if (v1567 > 0x40)
                            {
                              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1566) == v1071)
                                goto LABEL_1696;
                            }
                            else if (v1566 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1567)
                            {
                              goto LABEL_1696;
                            }
LABEL_1688:
                            v1079 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, v463, v689, (unsigned int *)&v1580, (unsigned int *)&v1568, *(_QWORD *)a7, v688);
                            v1564 = v1079;
                            v1565 = v1080;
                            v1081 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, v1539, v690, (unsigned int *)&v1580, (unsigned int *)&v1566, *(_QWORD *)a7, v688);
                            v1562 = (void *)v1081;
                            v1563 = v1083;
                            if (v1079 | v1081)
                            {
                              v1084 = (unint64_t *)&v1573;
                              if (v1079)
                                v1084 = &v1564;
                              v1085 = *v1084;
                              LODWORD(v1565) = *((_DWORD *)v1084 + 2);
                              v1564 = v1085;
                              v1086 = &v1562;
                              if (!v1081)
                                v1086 = v1545;
                              v1087 = *(void **)v1086;
                              LODWORD(v1563) = v1086[2];
                              v1562 = v1087;
                              v1088 = *(_QWORD *)(v1586 + 32);
                              v1089 = *(_QWORD *)(v1088 + 80);
                              v1090 = *(_QWORD *)(v1088 + 88);
                              v1091 = *(_QWORD *)(*(_QWORD *)a7 + 832);
                              if (v1091)
                                LOWORD(v1091) = *(_WORD *)(v1091 + 8);
                              v1092 = sub_1C5D58E08(*(_QWORD *)a7, (const char *)*(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1087, v1563, v1082, v1085, v1565, v1089, v1090, SHIDWORD(v1090), v1091);
                              v131 = 0;
                              v1093 = (int)v1587;
                              *(_QWORD *)(a7 + 16) = v1586;
                              *(_DWORD *)(a7 + 24) = v1093;
                              *(_QWORD *)(a7 + 32) = v1092;
                              *(_DWORD *)(a7 + 40) = v1094;
LABEL_1697:
                              if (v1572 >= 0x41 && v1571)
                                MEMORY[0x1CAA32F9C](v1571, 0x1000C8000313F17);
                              if (LODWORD(__src[1]) >= 0x41 && __src[0])
                                MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                              if (v1590 >= 0x41 && v1589)
                                MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
                              if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                                MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
                              if (v1567 >= 0x41 && v1566)
                                MEMORY[0x1CAA32F9C](v1566, 0x1000C8000313F17);
                              if (v1569 >= 0x41)
                              {
                                v527 = v1568;
                                if (v1568)
                                  goto LABEL_1706;
                              }
                              goto LABEL_256;
                            }
LABEL_1696:
                            v131 = 1;
                            goto LABEL_1697;
                          }
                        }
                        else if (!v1566)
                        {
                          goto LABEL_1349;
                        }
                        v904 = *((unsigned int *)v1540 + 2);
                        if (v904 > 0x40)
                        {
                          v905 = (void *)operator new[]();
                          memcpy(v905, *(const void **)v1540, ((unint64_t)(v904 + 63) >> 3) & 0x3FFFFFF8);
                          v1481 = (uint64_t *)__src[0];
                          v1482 = (unint64_t)(v904 + 63) >> 6;
                          v1483 = v905;
                          do
                          {
                            v1484 = *v1481++;
                            *v1483++ &= v1484;
                            --v1482;
                          }
                          while (v1482);
                        }
                        else
                        {
                          v905 = (void *)((uint64_t)__src[0] & *(_QWORD *)v1540);
                        }
                        v906 = *((unsigned int *)v1540 + 6);
                        if (v906 > 0x40)
                        {
                          v907 = (void *)operator new[]();
                          memcpy(v907, *v1529, ((unint64_t)(v906 + 63) >> 3) & 0x3FFFFFF8);
                          v1485 = (uint64_t *)v1571;
                          v1486 = (unint64_t)(v906 + 63) >> 6;
                          v1487 = v907;
                          do
                          {
                            v1488 = *v1485++;
                            *v1487++ &= v1488;
                            --v1486;
                          }
                          while (v1486);
                        }
                        else
                        {
                          v907 = (void *)(v1571 & (unint64_t)*v1529);
                        }
                        if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                          MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
                        *(_QWORD *)v1540 = v905;
                        *((_DWORD *)v1540 + 2) = v904;
                        if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
                          MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
                        *((_QWORD *)v1540 + 2) = v907;
                        *((_DWORD *)v1540 + 6) = v906;
                        goto LABEL_1349;
                      }
                    }
                    else if (!v1568)
                    {
                      goto LABEL_1333;
                    }
                    v896 = *((unsigned int *)v1540 + 2);
                    if (v896 > 0x40)
                    {
                      v897 = (void *)operator new[]();
                      memcpy(v897, *(const void **)v1540, ((unint64_t)(v896 + 63) >> 3) & 0x3FFFFFF8);
                      v1473 = (uint64_t *)v1588;
                      v1474 = (unint64_t)(v896 + 63) >> 6;
                      v1475 = v897;
                      do
                      {
                        v1476 = *v1473++;
                        *v1475++ &= v1476;
                        --v1474;
                      }
                      while (v1474);
                    }
                    else
                    {
                      v897 = (void *)(v1588 & *(_QWORD *)v1540);
                    }
                    v898 = *((unsigned int *)v1540 + 6);
                    if (v898 > 0x40)
                    {
                      v899 = (void *)operator new[]();
                      memcpy(v899, *v1529, ((unint64_t)(v898 + 63) >> 3) & 0x3FFFFFF8);
                      v1477 = (uint64_t *)v1589;
                      v1478 = (unint64_t)(v898 + 63) >> 6;
                      v1479 = v899;
                      do
                      {
                        v1480 = *v1477++;
                        *v1479++ &= v1480;
                        --v1478;
                      }
                      while (v1478);
                    }
                    else
                    {
                      v899 = (void *)(v1589 & (unint64_t)*v1529);
                    }
                    if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                      MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
                    *(_QWORD *)v1540 = v897;
                    *((_DWORD *)v1540 + 2) = v896;
                    if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
                      MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
                    *((_QWORD *)v1540 + 2) = v899;
                    *((_DWORD *)v1540 + 6) = v898;
                    goto LABEL_1333;
                  }
LABEL_911:
                  v696 = v1529;
                  goto LABEL_912;
                }
              }
              else
              {
                *v1529 = (const void *)-1;
                if ((_DWORD)v694)
                  goto LABEL_910;
              }
              v695 = 0;
              goto LABEL_911;
            }
          }
          else
          {
            *(_QWORD *)v1540 = -1;
            if ((_DWORD)v691)
              goto LABEL_906;
          }
          v692 = 0;
          goto LABEL_907;
        case 151:
          v140 = *(uint64_t **)(v28 + 32);
          v141 = *v140;
          v142 = v140[1];
          v143 = (uint64_t *)(*(_QWORD *)(*v140 + 40) + 16 * v142);
          v144 = *v143;
          if (*v143)
          {
            if (*v143 - 120 < 0x33)
              goto LABEL_934;
          }
          else if (*(_BYTE *)(v143[1] + 8) == 19)
          {
            goto LABEL_934;
          }
          v258 = *(_QWORD *)(v140[5] + 80);
          v259 = (_QWORD *)(v258 + 24);
          if (*(_DWORD *)(v258 + 32) >= 0x41u)
            v259 = (_QWORD *)*v259;
          v260 = (_QWORD *)*v259;
          v261 = v143[1];
          *(_QWORD *)&v1588 = v144;
          *((_QWORD *)&v1588 + 1) = v261;
          v262 = sub_1C612FE00((llvm::EVT *)&v1588, (const char *)v27);
          if (v1579 < v262)
          {
            llvm::APInt::zext((llvm::APInt *)&v1578, v262, (uint64_t)__src);
            v740 = __src[1];
          }
          else
          {
            LODWORD(__src[1]) = v1579;
            if (v1579 <= 0x40)
            {
              __src[0] = v1578;
              DWORD2(v1588) = v1579;
LABEL_996:
              *(void **)&v1588 = __src[0];
              goto LABEL_1105;
            }
            __src[0] = (void *)operator new[]();
            v740 = __src[1];
            memcpy(__src[0], v1578, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
          }
          DWORD2(v1588) = v740;
          if (v740 <= 0x40)
            goto LABEL_996;
          *(_QWORD *)&v1588 = operator new[]();
          memcpy((void *)v1588, __src[0], (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8);
LABEL_1105:
          sub_1C4888094((uint64_t)&v1588, v260);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          v131 = 0;
          if ((sub_1C5D7BE14(v1534, v141, v142, &v1580, &v1588, v1540, a7, v1537 + 1, 0) & 1) != 0)
            goto LABEL_255;
          v811 = v1581;
          if (!v1581)
            goto LABEL_1210;
          if (v1581 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1580) != v811)
              goto LABEL_1435;
          }
          else if (v1580 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1581)
          {
            goto LABEL_1435;
          }
LABEL_1210:
          v849 = DWORD2(v1588);
          if (!DWORD2(v1588))
            goto LABEL_934;
          if (DWORD2(v1588) > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1588) == v849)
              goto LABEL_1439;
          }
          else if ((_QWORD)v1588 == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1588))
          {
            goto LABEL_1439;
          }
LABEL_1435:
          v955 = sub_1C5D86770((unsigned int *)v1534, v141, v142, (unsigned int *)&v1580, (unsigned int *)&v1588, *(_QWORD *)a7, v1537 + 1);
          if (v955)
          {
            v958 = *(_QWORD *)(v1586 + 32);
            v959 = *(_QWORD *)(v958 + 40);
            v960 = *(_QWORD *)(v958 + 48);
            v961 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v961)
              LOWORD(v961) = *(_WORD *)(v961 + 8);
            v962 = sub_1C5D56C70(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v955, v956, v957, v959, v960, v961);
            v131 = 0;
            v963 = (int)v1587;
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v963;
            *(_QWORD *)(a7 + 32) = v962;
            *(_DWORD *)(a7 + 40) = v964;
            goto LABEL_255;
          }
LABEL_1439:
          v131 = 1;
          goto LABEL_255;
        case 152:
        case 154:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 174:
        case 183:
        case 184:
        case 187:
        case 188:
        case 189:
        case 191:
        case 194:
        case 195:
        case 196:
        case 197:
        case 202:
        case 203:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
          goto LABEL_218;
        case 153:
          v1588 = *(_OWORD *)*(_QWORD *)(v28 + 40);
          v494 = *(unsigned int **)(v28 + 80);
          v495 = sub_1C612FE00((llvm::EVT *)&v1588, (const char *)v27);
          DWORD2(v1588) = v20;
          if (v20 >= 0x41)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
            LODWORD(__src[1]) = v20;
            llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
            v497 = DWORD2(v1588);
            v496 = __src[1];
          }
          else
          {
            *(_QWORD *)&v1588 = 0;
            LODWORD(__src[1]) = v20;
            v496 = v20;
            v497 = v20;
            __src[0] = 0;
            if (!(_DWORD)v20)
              goto LABEL_1358;
          }
          v498 = 0;
          v499 = v1579;
          while (2)
          {
            v500 = &v1578[8 * (v498 >> 6)];
            if (v499 < 0x41)
              v500 = (char *)&v1578;
            if (((*(_QWORD *)v500 >> v498) & 1) == 0)
              goto LABEL_655;
            v501 = v494[v498];
            if ((v501 & 0x80000000) == 0)
            {
              if ((int)v501 >= (int)v20)
              {
                v503 = v501 - v20;
                v504 = 1 << (v501 - v20);
                if (v496 > 0x40)
                  *((_QWORD *)__src[0] + (v503 >> 6)) |= v504;
                else
                  __src[0] = (void *)((unint64_t)__src[0] | v504);
              }
              else
              {
                v502 = 1 << v501;
                if (v497 > 0x40)
                  *(_QWORD *)(v1588 + ((v501 >> 3) & 0x1FFFFFF8)) |= v502;
                else
                  *(_QWORD *)&v1588 = v1588 | v502;
              }
LABEL_655:
              if (v20 == ++v498)
                goto LABEL_1358;
              continue;
            }
            break;
          }
          if (v497 > 0x40)
          {
            bzero((void *)v1588, (((unint64_t)v497 + 63) >> 3) & 0x3FFFFFF8);
            v496 = __src[1];
          }
          else
          {
            *(_QWORD *)&v1588 = 0;
          }
          if (v496 > 0x40)
            bzero(__src[0], (((unint64_t)v496 + 63) >> 3) & 0x3FFFFFF8);
          else
            __src[0] = 0;
LABEL_1358:
          if (DWORD2(v1588) > 0x40)
          {
            v909 = 0;
            v910 = ((unint64_t)DWORD2(v1588) + 63) >> 6;
            do
            {
              v96 = v910-- < 1;
              if (v96)
                break;
              v911 = *(_QWORD *)(v1588 + 8 * v910);
              v909 += __clz(v911);
            }
            while (!v911);
            v912 = DWORD2(v1588) | 0xFFFFFFC0;
            if ((BYTE8(v1588) & 0x3F) == 0)
              v912 = 0;
            if (v909 + v912 != DWORD2(v1588))
              goto LABEL_1377;
          }
          else if ((_QWORD)v1588)
          {
            goto LABEL_1377;
          }
          if (LODWORD(__src[1]) > 0x40)
          {
            v913 = 0;
            v914 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
            v915 = __src[0];
            do
            {
              v96 = v914-- < 1;
              if (v96)
                break;
              v916 = *((_QWORD *)__src[0] + v914);
              v913 += __clz(v916);
            }
            while (!v916);
            v917 = LODWORD(__src[1]) | 0xFFFFFFC0;
            if (((uint64_t)__src[1] & 0x3F) == 0)
              v917 = 0;
            if (v913 + v917 == LODWORD(__src[1]))
            {
              v131 = 1;
              goto LABEL_1429;
            }
          }
          else if (!__src[0])
          {
            v131 = 1;
            goto LABEL_255;
          }
LABEL_1377:
          v918 = *(_OWORD **)(v1586 + 32);
          *(_OWORD *)v1545 = *v918;
          v1573 = *(_OWORD *)((char *)v918 + 40);
          v919 = *((unsigned int *)v1540 + 2);
          if (v919 > 0x40)
          {
            memset(*(void **)v1540, 255, ((unint64_t)(v919 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v919) = *((_DWORD *)v1540 + 2);
            if ((_DWORD)v919)
            {
LABEL_1379:
              v920 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v919;
              if (v919 < 0x41)
              {
LABEL_1380:
                v921 = v1540;
                v922 = v1540;
                goto LABEL_1381;
              }
              v921 = v1540;
              v922 = (llvm::APInt *)(*(_QWORD *)v1540
                                   + 8 * ((((unint64_t)v919 + 63) >> 6) - 1));
LABEL_1381:
              *(_QWORD *)v922 &= v920;
              v923 = *((unsigned int *)v921 + 6);
              if (v923 > 0x40)
              {
                memset(*((void **)v1540 + 2), 255, ((unint64_t)(v923 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v923) = *((_DWORD *)v1540 + 6);
                if ((_DWORD)v923)
                {
LABEL_1383:
                  v924 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v923;
                  if (v923 >= 0x41)
                  {
                    v925 = (char *)*v1529 + 8 * (((unint64_t)v923 + 63) >> 6) - 8;
LABEL_1385:
                    *v925 &= v924;
                    if (DWORD2(v1588) > 0x40)
                    {
                      v926 = 0;
                      v927 = ((unint64_t)DWORD2(v1588) + 63) >> 6;
                      do
                      {
                        v96 = v927-- < 1;
                        if (v96)
                          break;
                        v928 = *(_QWORD *)(v1588 + 8 * v927);
                        v926 += __clz(v928);
                      }
                      while (!v928);
                      v929 = DWORD2(v1588) | 0xFFFFFFC0;
                      if ((BYTE8(v1588) & 0x3F) == 0)
                        v929 = 0;
                      if (v926 + v929 == DWORD2(v1588))
                        goto LABEL_1402;
                    }
                    else if (!(_QWORD)v1588)
                    {
                      goto LABEL_1402;
                    }
                    if ((sub_1C5D7BE14(v1534, *(_QWORD *)v1545, *(_QWORD *)&v1545[2], &v1580, &v1588, &v1582, a7, v1537 + 1, 0) & 1) != 0)goto LABEL_1412;
                    v930 = *((unsigned int *)v1540 + 2);
                    if (v930 > 0x40)
                    {
                      v931 = (void *)operator new[]();
                      memcpy(v931, *(const void **)v1540, ((unint64_t)(v930 + 63) >> 3) & 0x3FFFFFF8);
                      v1457 = (uint64_t *)v1582;
                      v1458 = (unint64_t)(v930 + 63) >> 6;
                      v1459 = v931;
                      do
                      {
                        v1460 = *v1457++;
                        *v1459++ &= v1460;
                        --v1458;
                      }
                      while (v1458);
                    }
                    else
                    {
                      v931 = (void *)(v1582 & *(_QWORD *)v1540);
                    }
                    v932 = *((unsigned int *)v1540 + 6);
                    if (v932 > 0x40)
                    {
                      v933 = (void *)operator new[]();
                      memcpy(v933, *v1529, ((unint64_t)(v932 + 63) >> 3) & 0x3FFFFFF8);
                      v1461 = (uint64_t *)v1584;
                      v1462 = (unint64_t)(v932 + 63) >> 6;
                      v1463 = v933;
                      do
                      {
                        v1464 = *v1461++;
                        *v1463++ &= v1464;
                        --v1462;
                      }
                      while (v1462);
                    }
                    else
                    {
                      v933 = (void *)(v1584 & (unint64_t)*v1529);
                    }
                    if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                      MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
                    *(_QWORD *)v1540 = v931;
                    *((_DWORD *)v1540 + 2) = v930;
                    if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
                      MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
                    *((_QWORD *)v1540 + 2) = v933;
                    *((_DWORD *)v1540 + 6) = v932;
LABEL_1402:
                    if (LODWORD(__src[1]) > 0x40)
                    {
                      v934 = 0;
                      v935 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
                      do
                      {
                        v96 = v935-- < 1;
                        if (v96)
                          break;
                        v936 = *((_QWORD *)__src[0] + v935);
                        v934 += __clz(v936);
                      }
                      while (!v936);
                      v937 = LODWORD(__src[1]) | 0xFFFFFFC0;
                      if (((uint64_t)__src[1] & 0x3F) == 0)
                        v937 = 0;
                      if (v934 + v937 == LODWORD(__src[1]))
                        goto LABEL_1420;
                    }
                    else if (!__src[0])
                    {
LABEL_1420:
                      v942 = (uint64_t **)sub_1C5D86770((unsigned int *)v1534, *(uint64_t *)v1545, *(_BOOL8 *)&v1545[2], (unsigned int *)&v1580, (unsigned int *)&v1588, *(_QWORD *)a7, v1537 + 1);
                      v1568 = v942;
                      v1569 = v943;
                      v944 = (uint64_t)sub_1C5D86770((unsigned int *)v1534, v1573, *((_BOOL8 *)&v1573 + 1), (unsigned int *)&v1580, (unsigned int *)__src, *(_QWORD *)a7, v1537 + 1);
                      v1566 = v944;
                      v1567 = v945;
                      if ((unint64_t)v942 | v944)
                      {
                        v946 = (int *)&v1568;
                        if (!v942)
                          v946 = v1545;
                        v947 = *(_QWORD *)v946;
                        v1545[2] = v946[2];
                        *(_QWORD *)v1545 = v947;
                        v948 = &v1566;
                        if (!v944)
                          v948 = (uint64_t *)&v1573;
                        v949 = *v948;
                        DWORD2(v1573) = *((_DWORD *)v948 + 2);
                        *(_QWORD *)&v1573 = v949;
                        v950 = sub_1C5D41DE4(*(_QWORD *)a7, v1574, v1575, (uint64_t)&v1576, v947, v1545[2], v949, DWORD2(v1573), v494, v495);
                        v131 = 0;
                        v951 = (int)v1587;
                        *(_QWORD *)(a7 + 16) = v1586;
                        *(_DWORD *)(a7 + 24) = v951;
                        *(_QWORD *)(a7 + 32) = v950;
                        *(_DWORD *)(a7 + 40) = v952;
                      }
                      else
                      {
                        v131 = 1;
                      }
LABEL_1427:
                      if (LODWORD(__src[1]) < 0x41)
                        goto LABEL_255;
                      v915 = __src[0];
LABEL_1429:
                      if (v915)
                        MEMORY[0x1CAA32F9C](v915, 0x1000C8000313F17);
LABEL_255:
                      if (DWORD2(v1588) >= 0x41)
                      {
                        v527 = (uint64_t **)v1588;
                        if ((_QWORD)v1588)
LABEL_1706:
                          MEMORY[0x1CAA32F9C](v527, 0x1000C8000313F17);
                      }
LABEL_256:
                      if ((v131 & 1) == 0)
                        goto LABEL_2170;
                      goto LABEL_934;
                    }
                    LOBYTE(v1517) = 0;
                    if ((sub_1C5D7BE14(v1534, v1573, *((_QWORD *)&v1573 + 1), &v1580, __src, &v1582, a7, v1537 + 1, v1517) & 1) == 0)
                    {
                      v938 = *((unsigned int *)v1540 + 2);
                      if (v938 > 0x40)
                      {
                        v939 = (void *)operator new[]();
                        memcpy(v939, *(const void **)v1540, ((unint64_t)(v938 + 63) >> 3) & 0x3FFFFFF8);
                        v1465 = (uint64_t *)v1582;
                        v1466 = (unint64_t)(v938 + 63) >> 6;
                        v1467 = v939;
                        do
                        {
                          v1468 = *v1465++;
                          *v1467++ &= v1468;
                          --v1466;
                        }
                        while (v1466);
                      }
                      else
                      {
                        v939 = (void *)(v1582 & *(_QWORD *)v1540);
                      }
                      v940 = *((unsigned int *)v1540 + 6);
                      if (v940 > 0x40)
                      {
                        v941 = (void *)operator new[]();
                        memcpy(v941, *v1529, ((unint64_t)(v940 + 63) >> 3) & 0x3FFFFFF8);
                        v1469 = (uint64_t *)v1584;
                        v1470 = (unint64_t)(v940 + 63) >> 6;
                        v1471 = v941;
                        do
                        {
                          v1472 = *v1469++;
                          *v1471++ &= v1472;
                          --v1470;
                        }
                        while (v1470);
                      }
                      else
                      {
                        v941 = (void *)(v1584 & (unint64_t)*v1529);
                      }
                      if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                        MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
                      *(_QWORD *)v1540 = v939;
                      *((_DWORD *)v1540 + 2) = v938;
                      if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
                        MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
                      *((_QWORD *)v1540 + 2) = v941;
                      *((_DWORD *)v1540 + 6) = v940;
                      goto LABEL_1420;
                    }
LABEL_1412:
                    v131 = 0;
                    goto LABEL_1427;
                  }
LABEL_1384:
                  v925 = v1529;
                  goto LABEL_1385;
                }
              }
              else
              {
                *v1529 = (const void *)-1;
                if ((_DWORD)v923)
                  goto LABEL_1383;
              }
              v924 = 0;
              goto LABEL_1384;
            }
          }
          else
          {
            *(_QWORD *)v1540 = -1;
            if ((_DWORD)v919)
              goto LABEL_1379;
          }
          v920 = 0;
          goto LABEL_1380;
        case 155:
          v493 = &v1578;
          if (v1579 >= 0x41)
            v493 = v1578;
          if ((*v493 & 1) == 0)
          {
            v287 = (int)v1587;
            v373 = (uint64_t)sub_1C61312D0(*(_QWORD *)a7, v1574, v1575);
            goto LABEL_494;
          }
          DWORD2(v1588) = 1;
          *(_QWORD *)&v1588 = 0;
          v1590 = 1;
          v1589 = 0;
          *(_OWORD *)v1545 = *(_OWORD *)*(_QWORD *)(v28 + 32);
          v697 = sub_1C6329368((unsigned int *)v1545, (uint64_t)v27, (BOOL)a3);
          if (v1581 < v697)
          {
            llvm::APInt::zext((llvm::APInt *)&v1580, v697, (uint64_t)&v1573);
          }
          else
          {
            DWORD2(v1573) = v1581;
            if (v1581 > 0x40)
            {
              *(_QWORD *)&v1573 = operator new[]();
              memcpy((void *)v1573, (const void *)v1580, (((unint64_t)DWORD2(v1573) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *(_QWORD *)&v1573 = v1580;
            }
          }
          if ((sub_1C6375E58(v1534, *(_QWORD *)v1545, *(_QWORD *)&v1545[2], &v1573, &v1588, a7, v1537 + 1, 0) & 1) != 0)
          {
            if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
              MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
            goto LABEL_384;
          }
          v815 = v1578;
          if (v1579 < 0x41)
            goto LABEL_1135;
          v816 = 0;
          v817 = ((unint64_t)v1579 + 63) >> 6;
          do
          {
            v96 = v817-- < 1;
            if (v96)
              break;
            v818 = *(_QWORD *)&v1578[8 * v817];
            v816 += __clz(v818);
          }
          while (!v818);
          v819 = v1579 | 0xFFFFFFC0;
          if ((v1579 & 0x3F) == 0)
            v819 = 0;
          if (v1579 - v816 - v819 <= 0x40)
          {
            v815 = *(char **)v1578;
LABEL_1135:
            if (v815 == (char *)1)
            {
              sub_1C4F9E728((llvm::APInt *)&v1588, v1535, __src);
              if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
              *(void **)v1540 = __src[0];
              *((_DWORD *)v1540 + 2) = __src[1];
              LODWORD(__src[1]) = 0;
              if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
              {
                MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
                v1448 = __src[1];
                *((_QWORD *)v1540 + 2) = v1571;
                *((_DWORD *)v1540 + 6) = v1572;
                v1572 = 0;
                if (v1448 >= 0x41 && __src[0])
                  MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
              }
              else
              {
                *((_QWORD *)v1540 + 2) = v1571;
                *((_DWORD *)v1540 + 6) = v1572;
              }
            }
          }
          if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
            MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
          if (v1590 >= 0x41 && v1589)
            MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
LABEL_144:
          v114 = DWORD2(v1588);
          goto LABEL_145;
        case 169:
          v117 = *(uint64_t **)(v28 + 32);
          v118 = *v117;
          v119 = v117[1];
          v120 = v117[5];
          v121 = v117[6];
          sub_1C5D44BD8(*(_QWORD *)a7, *v117, v119, (llvm::APInt *)&v1578, v1537 + 1, (uint64_t)&v1588);
          sub_1C5D44BD8(*(_QWORD *)a7, v120, v121, (llvm::APInt *)&v1578, v1537 + 1, (uint64_t)__src);
          llvm::KnownBits::umin((const void **)&v1588, (const void **)__src, v122, (uint64_t)v1545);
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(_QWORD *)v1540 = *(_QWORD *)v1545;
          *((_DWORD *)v1540 + 2) = v1545[2];
          v1545[2] = 0;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v57)
          {
            MEMORY[0x1CAA32F9C](*v57, 0x1000C8000313F17);
            v1373 = v1545[2];
            *((_QWORD *)v1540 + 2) = v1546;
            *((_DWORD *)v1540 + 6) = v1547;
            v1547 = 0;
            if (v1373 >= 0x41 && *(_QWORD *)v1545)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
          }
          else
          {
            *((_QWORD *)v1540 + 2) = v1546;
            *((_DWORD *)v1540 + 6) = v1547;
          }
          v124 = llvm::KnownBits::ugt((const void **)&v1588, (const void **)__src, v123);
          if (v124 >= 0x100u)
            goto LABEL_164;
          v125 = __src;
          v126 = (void **)&v1588;
          goto LABEL_162;
        case 170:
          v127 = *(uint64_t **)(v28 + 32);
          v118 = *v127;
          v119 = v127[1];
          v120 = v127[5];
          v121 = v127[6];
          sub_1C5D44BD8(*(_QWORD *)a7, *v127, v119, (llvm::APInt *)&v1578, v1537 + 1, (uint64_t)&v1588);
          sub_1C5D44BD8(*(_QWORD *)a7, v120, v121, (llvm::APInt *)&v1578, v1537 + 1, (uint64_t)__src);
          llvm::KnownBits::umax((const void **)&v1588, (const void **)__src, v128, (uint64_t)v1545);
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(_QWORD *)v1540 = *(_QWORD *)v1545;
          *((_DWORD *)v1540 + 2) = v1545[2];
          v1545[2] = 0;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v57)
          {
            MEMORY[0x1CAA32F9C](*v57, 0x1000C8000313F17);
            v1374 = v1545[2];
            *((_QWORD *)v1540 + 2) = v1546;
            *((_DWORD *)v1540 + 6) = v1547;
            v1547 = 0;
            if (v1374 >= 0x41 && *(_QWORD *)v1545)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
          }
          else
          {
            *((_QWORD *)v1540 + 2) = v1546;
            *((_DWORD *)v1540 + 6) = v1547;
          }
          v124 = llvm::KnownBits::ugt((const void **)__src, (const void **)&v1588, v129);
          if (v124 >= 0x100u)
          {
LABEL_164:
            v132 = v124 ^ 1;
          }
          else
          {
            v125 = (void **)&v1588;
            v126 = __src;
LABEL_162:
            v130 = llvm::KnownBits::ugt((const void **)v125, (const void **)v126, a3);
            if (v130 < 0x100u)
            {
              v131 = 1;
              goto LABEL_252;
            }
            v132 = v130;
          }
          v131 = 0;
          v225 = (int)v1587;
          v226 = v132 == 0;
          if (v132)
            v227 = v118;
          else
            v227 = v120;
          if (v226)
            v228 = v121;
          else
            v228 = v119;
          *(_QWORD *)(a7 + 16) = v1586;
          *(_DWORD *)(a7 + 24) = v225;
          *(_QWORD *)(a7 + 32) = v227;
          *(_DWORD *)(a7 + 40) = v228;
LABEL_252:
          if (v1572 >= 0x41 && v1571)
            MEMORY[0x1CAA32F9C](v1571, 0x1000C8000313F17);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (v1590 >= 0x41 && v1589)
            MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
          goto LABEL_255;
        case 171:
          v145 = *(_OWORD **)(v28 + 32);
          *(_OWORD *)__src = *v145;
          *(_OWORD *)v1545 = *(_OWORD *)((char *)v145 + 40);
          v147 = *(_QWORD *)v1545;
          v146 = *(_QWORD *)&v1545[2];
          v148 = sub_1C5D4F7E8(*(uint64_t *)v1545, v1545[2], 0, 0);
          if (!v148)
            goto LABEL_1849;
          v149 = v148;
          v150 = __src[1];
          v1533 = (llvm::APInt *)__src[0];
          sub_1C5D44BD8(*(_QWORD *)a7, (uint64_t)__src[0], (_BOOL8)__src[1], (llvm::APInt *)&v1578, v1537, (uint64_t)&v1588);
          v151 = DWORD2(v1588);
          if (DWORD2(v1588) > 0x40)
          {
            v268 = (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8;
            v153 = (void *)operator new[]();
            memcpy(v153, (const void *)v1588, v268);
            v152 = v1580;
            v269 = (unint64_t)(v151 + 63) >> 6;
            v270 = (uint64_t *)v1580;
            v271 = v153;
            do
            {
              v272 = *v270++;
              *v271++ &= v272;
              --v269;
            }
            while (v269);
          }
          else
          {
            v152 = v1580;
            v153 = (void *)(v1580 & v1588);
          }
          v273 = *(_QWORD *)(v149 + 80);
          v274 = *(unsigned int *)(v273 + 32);
          v1561 = v274;
          if (v274 <= 0x40)
          {
            v275 = ~*(_QWORD *)(v273 + 24);
            v276 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v274;
            if (!(_DWORD)v274)
              v276 = 0;
            v277 = v276 & v275;
            v1560 = (void *)(v276 & v275);
            v1561 = 0;
            goto LABEL_349;
          }
          v1560 = (void *)operator new[]();
          memcpy(v1560, *(const void **)(v273 + 24), ((unint64_t)(v274 + 63) >> 3) & 0x3FFFFFF8);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1560);
          v274 = v1561;
          v277 = (unint64_t)v1560;
          v1561 = 0;
          if (v274 <= 0x40)
          {
            v152 = v1580;
LABEL_349:
            v277 &= v152;
            goto LABEL_370;
          }
          v293 = 0;
          v294 = (_QWORD *)v1580;
          do
          {
            *(_QWORD *)(v277 + v293) &= v294[v293 / 8];
            v293 += 8;
          }
          while ((((unint64_t)(v274 + 63) >> 3) & 0x3FFFFFF8) != v293);
LABEL_370:
          if (v151 > 0x40)
            v295 = memcmp(v153, (const void *)v277, ((unint64_t)(v151 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v295 = v153 == (void *)v277;
          v296 = v295;
          if (v274 >= 0x41 && v277)
            MEMORY[0x1CAA32F9C](v277, 0x1000C8000313F17);
          if (v151 >= 0x41 && v153)
            MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
          v298 = v1586;
          v297 = (uint64_t)v1587;
          if (v296)
          {
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v297;
            *(_QWORD *)(a7 + 32) = v1533;
            *(_DWORD *)(a7 + 40) = (_DWORD)v150;
LABEL_384:
            if (v1590 >= 0x41 && v1589)
              MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
LABEL_385:
            if (DWORD2(v1588) < 0x41)
              goto LABEL_2170;
            v299 = (void *)v1588;
            if (!(_QWORD)v1588)
              goto LABEL_2170;
            goto LABEL_387;
          }
          LODWORD(v666) = DWORD2(v1588);
          v1559 = DWORD2(v1588);
          if (DWORD2(v1588) > 0x40)
          {
            v792 = (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8;
            v1558 = (void *)operator new[]();
            memcpy(v1558, (const void *)v1588, v792);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1558);
            v666 = v1559;
            v668 = (unint64_t)v1558;
            v1559 = 0;
            if (v666 > 0x40)
            {
              v850 = (uint64_t *)v1580;
              v851 = (unint64_t)(v666 + 63) >> 6;
              v852 = v1558;
              do
              {
                v853 = *v850++;
                *v852++ &= v853;
                --v851;
              }
              while (v851);
LABEL_1216:
              DWORD2(v1573) = v666;
              *(_QWORD *)&v1573 = v668;
              v854 = sub_1C63758D8(v1534, v298, v297, (uint64_t)&v1573, (uint64_t)&v1578, (uint64_t *)a7);
              if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
                MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
              if (v854)
                goto LABEL_384;
              if (sub_1C5D621EC((uint64_t)v1533, (uint64_t)v150, 0))
              {
                v856 = *((_QWORD *)v1533 + 6);
                if (v856)
                {
                  v857 = 1;
                  do
                  {
                    if (*(_DWORD *)(v856 + 8) == (_DWORD)v150)
                    {
                      if (!v857)
                        goto LABEL_1847;
                      --v857;
                    }
                    v856 = *(_QWORD *)(v856 + 32);
                  }
                  while (v856);
                  if (!v857)
                  {
                    v858 = *(_QWORD *)(v149 + 80);
                    v859 = *(unsigned int *)(v858 + 32);
                    v1557 = v859;
                    if (v859 > 0x40)
                    {
                      v1556 = (void *)operator new[]();
                      memcpy(v1556, *(const void **)(v858 + 24), ((unint64_t)(v859 + 63) >> 3) & 0x3FFFFFF8);
                      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1556);
                      LODWORD(v859) = v1557;
                      v862 = v1556;
                    }
                    else
                    {
                      v860 = ~*(_QWORD *)(v858 + 24);
                      v861 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v859;
                      if (!(_DWORD)v859)
                        v861 = 0;
                      v862 = (const void *)(v861 & v860);
                      v1556 = (void *)(v861 & v860);
                    }
                    v1557 = 0;
                    if (v1590 > 0x40)
                      v1141 = memcmp((const void *)v1589, v862, (((unint64_t)v1590 + 63) >> 3) & 0x3FFFFFF8) == 0;
                    else
                      v1141 = v1589 == (_QWORD)v862;
                    v1142 = v1141;
                    if (v859 >= 0x41 && v862)
                      MEMORY[0x1CAA32F9C](v862, 0x1000C8000313F17);
                    if (v1142)
                    {
                      v1143 = (uint64_t *)*((_QWORD *)v1533 + 4);
                      v1144 = *v1143;
                      v1145 = v1143[1];
                      v1146 = *(_QWORD *)(*(_QWORD *)a7 + 832);
                      if (v1146)
                        LOWORD(v1146) = *(_WORD *)(v1146 + 8);
                      v1147 = sub_1C5D56C70(*(_QWORD *)a7, 173, (const llvm::APInt *)&v1576, v1574, v1575, v1144, v1145, v855, v147, v146, v1146);
                      v1148 = (int)v1587;
                      *(_QWORD *)(a7 + 16) = v1586;
                      *(_DWORD *)(a7 + 24) = v1148;
                      *(_QWORD *)(a7 + 32) = v1147;
                      *(_DWORD *)(a7 + 40) = v1149;
                      goto LABEL_384;
                    }
                  }
                }
              }
LABEL_1847:
              if (v1590 >= 0x41 && v1589)
                MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
              if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
LABEL_1849:
              v1150 = v1537 + 1;
              v1151 = v147;
              if ((sub_1C5D7BE14(v1534, v147, v146, &v1580, &v1578, v1540, a7, v1150, 0) & 1) != 0)
                goto LABEL_2170;
              v1153 = __src[0];
              v1152 = __src[1];
              v1154 = *((unsigned int *)v1540 + 2);
              v1555 = v1154;
              if (v1154 > 0x40)
              {
                v1554 = (void *)operator new[]();
                memcpy(v1554, *(const void **)v1540, ((unint64_t)(v1154 + 63) >> 3) & 0x3FFFFFF8);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1554);
                v1154 = v1555;
                v1157 = (unint64_t)v1554;
                v1555 = 0;
                if (v1154 > 0x40)
                {
                  v1158 = 0;
                  v1159 = (_QWORD *)v1580;
                  do
                  {
                    *(_QWORD *)(v1157 + v1158) &= v1159[v1158 / 8];
                    v1158 += 8;
                  }
                  while ((((unint64_t)(v1154 + 63) >> 3) & 0x3FFFFFF8) != v1158);
LABEL_1858:
                  DWORD2(v1588) = v1154;
                  *(_QWORD *)&v1588 = v1157;
                  LOBYTE(v1523) = 0;
                  v1160 = sub_1C5D7BE14(v1534, v1153, v1152, &v1588, &v1578, &v1582, a7, v1150, v1523);
                  if (v1154 >= 0x41 && v1157)
                    MEMORY[0x1CAA32F9C](v1157, 0x1000C8000313F17);
                  if ((v1160 & 1) != 0)
                    goto LABEL_2170;
                  v1161 = v1581;
                  if (v1581)
                  {
                    if (v1581 > 0x40)
                    {
                      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1580) != v1161)
                        goto LABEL_1872;
                    }
                    else if (v1580 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1581)
                    {
                      goto LABEL_1872;
                    }
                  }
                  v1162 = v1579;
                  if (!v1579)
                    goto LABEL_1873;
                  if (v1579 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1578) == v1162)
                      goto LABEL_1873;
                  }
                  else if (v1578 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1579))
                  {
                    goto LABEL_1873;
                  }
LABEL_1872:
                  v1163 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, (uint64_t)v1153, (_BOOL8)v1152, (unsigned int *)&v1580, (unsigned int *)&v1578, *(_QWORD *)a7, v1150);
                  *(_QWORD *)&v1588 = v1163;
                  *((_QWORD *)&v1588 + 1) = v1164;
                  v1165 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, v1151, v146, (unsigned int *)&v1580, (unsigned int *)&v1578, *(_QWORD *)a7, v1150);
                  *(_QWORD *)&v1573 = v1165;
                  *((_QWORD *)&v1573 + 1) = v1167;
                  if (v1163 | v1165)
                  {
                    v1187 = (void **)&v1588;
                    if (!v1163)
                      v1187 = __src;
                    v1188 = *v1187;
                    LODWORD(__src[1]) = *((_DWORD *)v1187 + 2);
                    __src[0] = v1188;
                    v1189 = v1545;
                    if (v1165)
                      v1189 = (int *)&v1573;
                    v1190 = *(_QWORD *)v1189;
                    v1545[2] = v1189[2];
                    *(_QWORD *)v1545 = v1190;
                    v309 = a7;
                    v1191 = *(_QWORD *)(*(_QWORD *)a7 + 832);
                    if (v1191)
                      LOWORD(v1191) = *(_WORD *)(v1191 + 8);
                    v314 = sub_1C5D56C70(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1188, (unint64_t)__src[1], v1166, v1190, *(unint64_t *)&v1545[2], v1191);
LABEL_1899:
                    v1192 = (int)v1587;
                    *(_QWORD *)(v309 + 16) = v1586;
                    *(_DWORD *)(v309 + 24) = v1192;
                    *(_QWORD *)(v309 + 32) = v314;
                    *(_DWORD *)(v309 + 40) = v315;
                    goto LABEL_2170;
                  }
LABEL_1873:
                  v969 = a7;
                  v1168 = v1583;
                  if (v1583 > 0x40)
                  {
                    v1170 = (((unint64_t)v1583 + 63) >> 3) & 0x3FFFFFF8;
                    v1169 = operator new[]();
                    memcpy((void *)v1169, (const void *)v1582, v1170);
                    v1171 = (uint64_t *)*v1529;
                    v1172 = (unint64_t)(v1168 + 63) >> 6;
                    v1173 = (_QWORD *)v1169;
                    do
                    {
                      v1174 = *v1171++;
                      *v1173++ |= v1174;
                      --v1172;
                    }
                    while (v1172);
                  }
                  else
                  {
                    v1169 = (unint64_t)*v1529 | v1582;
                  }
                  if (v1581 > 0x40)
                  {
                    v1176 = (uint64_t *)v1580;
                    v1177 = (((unint64_t)v1581 + 63) >> 6) - 1;
                    v1178 = (uint64_t *)v1169;
                    do
                    {
                      v1180 = *v1176++;
                      v1179 = v1180;
                      v1181 = *v1178++;
                      v1182 = v1179 & ~v1181;
                      v1175 = v1182 == 0;
                      v725 = v1177-- != 0;
                      v1183 = v725;
                    }
                    while (!v1182 && (v1183 & 1) != 0);
                  }
                  else
                  {
                    v1175 = (v1580 & ~v1169) == 0;
                  }
                  if (v1168 >= 0x41 && v1169)
                    MEMORY[0x1CAA32F9C](v1169, 0x1000C8000313F17);
                  if (v1175)
                  {
                    v1184 = (int)v1587;
                    *(_QWORD *)(a7 + 16) = v1586;
                    *(_DWORD *)(a7 + 24) = v1184;
                    *(_QWORD *)(a7 + 32) = v1153;
                    *(_DWORD *)(a7 + 40) = (_DWORD)v1152;
                    goto LABEL_2170;
                  }
                  v1185 = *((unsigned int *)v1540 + 2);
                  if (v1185 > 0x40)
                  {
                    v1186 = operator new[]();
                    memcpy((void *)v1186, *(const void **)v1540, ((unint64_t)(v1185 + 63) >> 3) & 0x3FFFFFF8);
                    v1193 = (uint64_t *)v1584;
                    v1194 = (unint64_t)(v1185 + 63) >> 6;
                    v1195 = (_QWORD *)v1186;
                    do
                    {
                      v1196 = *v1193++;
                      *v1195++ |= v1196;
                      --v1194;
                    }
                    while (v1194);
                  }
                  else
                  {
                    v1186 = v1584 | *(_QWORD *)v1540;
                  }
                  if (v1581 > 0x40)
                  {
                    v1198 = (uint64_t *)v1580;
                    v1199 = (((unint64_t)v1581 + 63) >> 6) - 1;
                    v1200 = (uint64_t *)v1186;
                    do
                    {
                      v1202 = *v1198++;
                      v1201 = v1202;
                      v1203 = *v1200++;
                      v1204 = v1201 & ~v1203;
                      v1197 = v1204 == 0;
                      v725 = v1199-- != 0;
                      v1205 = v725;
                    }
                    while (!v1204 && (v1205 & 1) != 0);
                  }
                  else
                  {
                    v1197 = (v1580 & ~v1186) == 0;
                  }
                  if (v1185 >= 0x41 && v1186)
                    MEMORY[0x1CAA32F9C](v1186, 0x1000C8000313F17);
                  if (v1197)
                  {
                    v1206 = (int)v1587;
                    *(_QWORD *)(a7 + 16) = v1586;
                    *(_DWORD *)(a7 + 24) = v1206;
                    *(_QWORD *)(a7 + 32) = v1151;
                    *(_DWORD *)(a7 + 40) = v146;
                    goto LABEL_2170;
                  }
                  v1207 = *((unsigned int *)v1540 + 2);
                  if (v1207 > 0x40)
                  {
                    v1208 = operator new[]();
                    memcpy((void *)v1208, *(const void **)v1540, ((unint64_t)(v1207 + 63) >> 3) & 0x3FFFFFF8);
                    v1209 = (uint64_t *)v1582;
                    v1210 = (unint64_t)(v1207 + 63) >> 6;
                    v1211 = (_QWORD *)v1208;
                    do
                    {
                      v1212 = *v1209++;
                      *v1211++ |= v1212;
                      --v1210;
                    }
                    while (v1210);
                  }
                  else
                  {
                    v1208 = v1582 | *(_QWORD *)v1540;
                  }
                  if (v1581 > 0x40)
                  {
                    v1214 = (uint64_t *)v1580;
                    v1215 = (((unint64_t)v1581 + 63) >> 6) - 1;
                    v1216 = (uint64_t *)v1208;
                    do
                    {
                      v1218 = *v1214++;
                      v1217 = v1218;
                      v1219 = *v1216++;
                      v1220 = v1217 & ~v1219;
                      v1213 = v1220 == 0;
                      v725 = v1215-- != 0;
                      v1221 = v725;
                    }
                    while (!v1220 && (v1221 & 1) != 0);
                  }
                  else
                  {
                    v1213 = (v1580 & ~v1208) == 0;
                  }
                  if (v1207 >= 0x41 && v1208)
                    MEMORY[0x1CAA32F9C](v1208, 0x1000C8000313F17);
                  v1223 = v1586;
                  v1222 = (uint64_t)v1587;
                  if (v1213)
                  {
                    v1105 = sub_1C6366AB4(*(_QWORD *)a7, 0, (const llvm::APInt *)&v1576, v1574, v1575, 0, 0);
                    *(_QWORD *)(a7 + 16) = v1223;
                    *(_DWORD *)(a7 + 24) = v1222;
LABEL_1719:
                    *(_QWORD *)(v969 + 32) = v1105;
                    *(_DWORD *)(v969 + 40) = v1106;
                    goto LABEL_2170;
                  }
                  LODWORD(v1224) = v1583;
                  v1553 = v1583;
                  if (v1583 > 0x40)
                  {
                    v1237 = (((unint64_t)v1583 + 63) >> 3) & 0x3FFFFFF8;
                    v1552 = (void *)operator new[]();
                    memcpy(v1552, (const void *)v1582, v1237);
                    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1552);
                    v1224 = v1553;
                    v1226 = (unint64_t)v1552;
                    v1553 = 0;
                    if (v1224 > 0x40)
                    {
                      v1298 = (uint64_t *)v1580;
                      v1299 = (unint64_t)(v1224 + 63) >> 6;
                      v1300 = v1552;
                      do
                      {
                        v1301 = *v1298++;
                        *v1300++ &= v1301;
                        --v1299;
                      }
                      while (v1299);
                      goto LABEL_2016;
                    }
                  }
                  else
                  {
                    v1225 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1583;
                    if (!v1583)
                      v1225 = 0;
                    v1226 = v1225 & ~v1582;
                    v1552 = (void *)v1226;
                    v1553 = 0;
                  }
                  v1226 &= v1580;
LABEL_2016:
                  DWORD2(v1588) = v1224;
                  *(_QWORD *)&v1588 = v1226;
                  v1302 = sub_1C63758D8(v1534, v1223, v1222, (uint64_t)&v1588, (uint64_t)&v1578, (uint64_t *)a7);
                  if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                    MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
                  if (v1302
                    || sub_1C6375BAC(v1586, v1587, v1535, (llvm::APInt *)&v1580, a7, v1303))
                  {
                    goto LABEL_2170;
                  }
                  v1304 = *((unsigned int *)v1540 + 2);
                  if (v1304 > 0x40)
                  {
                    v1449 = *(_QWORD **)v1540;
                    v1450 = (uint64_t *)v1582;
                    v1451 = (unint64_t)(v1304 + 63) >> 6;
                    do
                    {
                      v1452 = *v1450++;
                      *v1449++ |= v1452;
                      --v1451;
                    }
                    while (v1451);
                  }
                  else
                  {
                    *(_QWORD *)v1540 |= v1582;
                  }
                  v1305 = *((unsigned int *)v1540 + 6);
                  if (v1305 > 0x40)
                  {
                    v1453 = *v1529;
                    v1454 = (uint64_t *)v1584;
                    v1455 = (unint64_t)(v1305 + 63) >> 6;
                    do
                    {
                      v1456 = *v1454++;
                      *v1453++ &= v1456;
                      --v1455;
                    }
                    while (v1455);
                  }
                  else
                  {
                    *v1529 = (const void *)((unint64_t)*v1529 & v1584);
                  }
                  goto LABEL_934;
                }
              }
              else
              {
                v1155 = ~*(_QWORD *)v1540;
                if ((_DWORD)v1154)
                  v1156 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1154;
                else
                  v1156 = 0;
                v1157 = v1156 & v1155;
                v1554 = (void *)(v1156 & v1155);
                v1555 = 0;
              }
              v1157 &= v1580;
              goto LABEL_1858;
            }
          }
          else
          {
            v667 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1588);
            if (!DWORD2(v1588))
              v667 = 0;
            v668 = v667 & ~(_QWORD)v1588;
            v1558 = (void *)v668;
            v1559 = 0;
          }
          v668 &= v1580;
          goto LABEL_1216;
        case 172:
          v154 = *(__int128 **)(v28 + 32);
          v1588 = *v154;
          *(_OWORD *)__src = *(__int128 *)((char *)v154 + 40);
          v64 = (uint64_t *)__src[0];
          v63 = __src[1];
          v155 = v1537 + 1;
          if ((sub_1C5D7BE14(v1534, __src[0], __src[1], &v1580, &v1578, v1540, a7, v155, 0) & 1) != 0)
            goto LABEL_2170;
          v156 = *((_QWORD *)&v1588 + 1);
          v157 = v1588;
          v158 = *((unsigned int *)v1540 + 6);
          v1551 = v158;
          if (v158 <= 0x40)
          {
            v159 = ~(unint64_t)*v1529;
            if ((_DWORD)v158)
              v160 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v158;
            else
              v160 = 0;
            v161 = v160 & v159;
            v1550 = (void *)(v160 & v159);
            v1551 = 0;
            goto LABEL_351;
          }
          v1550 = (void *)operator new[]();
          memcpy(v1550, *v1529, ((unint64_t)(v158 + 63) >> 3) & 0x3FFFFFF8);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1550);
          v158 = v1551;
          v161 = (unint64_t)v1550;
          v1551 = 0;
          if (v158 <= 0x40)
          {
LABEL_351:
            v161 &= v1580;
            goto LABEL_406;
          }
          v316 = 0;
          v317 = (_QWORD *)v1580;
          do
          {
            *(_QWORD *)(v161 + v316) &= v317[v316 / 8];
            v316 += 8;
          }
          while ((((unint64_t)(v158 + 63) >> 3) & 0x3FFFFFF8) != v316);
LABEL_406:
          v1545[2] = v158;
          *(_QWORD *)v1545 = v161;
          LOBYTE(v1520) = 0;
          v318 = sub_1C5D7BE14(v1534, v157, v156, v1545, &v1578, &v1582, a7, v155, v1520);
          if (v158 >= 0x41 && v161)
            MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
          if ((v318 & 1) != 0)
            goto LABEL_2170;
          v319 = v1581;
          if (!v1581)
            goto LABEL_524;
          if (v1581 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1580) != v319)
              goto LABEL_724;
          }
          else if (v1580 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1581)
          {
LABEL_724:
            v529 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, v157, v156, (unsigned int *)&v1580, (unsigned int *)&v1578, *(_QWORD *)a7, v155);
            *(_QWORD *)v1545 = v529;
            *(_QWORD *)&v1545[2] = v552;
            v531 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, (uint64_t)v64, (_BOOL8)v63, (unsigned int *)&v1580, (unsigned int *)&v1578, *(_QWORD *)a7, v155);
            *(_QWORD *)&v1573 = v531;
            *((_QWORD *)&v1573 + 1) = v553;
            if (v529 | v531)
            {
LABEL_725:
              v554 = v1545;
              if (!v529)
                v554 = (int *)&v1588;
              v555 = *(_QWORD *)v554;
              DWORD2(v1588) = v554[2];
              *(_QWORD *)&v1588 = v555;
              v556 = __src;
              if (v531)
                v556 = (void **)&v1573;
              v557 = *v556;
              LODWORD(__src[1]) = *((_DWORD *)v556 + 2);
              __src[0] = v557;
              v558 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v558)
                LOWORD(v558) = *(_WORD *)(v558 + 8);
              v373 = (uint64_t)sub_1C5D56C70(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, v555, *((unint64_t *)&v1588 + 1), v532, (uint64_t)v557, (unint64_t)__src[1], v558);
              v559 = (int)v1587;
              *(_QWORD *)(a7 + 16) = v1586;
              *(_DWORD *)(a7 + 24) = v559;
              goto LABEL_977;
            }
            goto LABEL_732;
          }
LABEL_524:
          v384 = v1579;
          if (v1579)
          {
            if (v1579 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1578) != v384)
                goto LABEL_724;
            }
            else if (v1578 != (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1579))
            {
              goto LABEL_724;
            }
          }
LABEL_732:
          v560 = v1585;
          if (v1585 > 0x40)
          {
            v562 = (((unint64_t)v1585 + 63) >> 3) & 0x3FFFFFF8;
            v561 = operator new[]();
            memcpy((void *)v561, (const void *)v1584, v562);
            v563 = *(uint64_t **)v1540;
            v564 = (unint64_t)(v560 + 63) >> 6;
            v565 = (_QWORD *)v561;
            do
            {
              v566 = *v563++;
              *v565++ |= v566;
              --v564;
            }
            while (v564);
          }
          else
          {
            v561 = *(_QWORD *)v1540 | v1584;
          }
          if (v1581 > 0x40)
          {
            v568 = (uint64_t *)v1580;
            v569 = (((unint64_t)v1581 + 63) >> 6) - 1;
            v570 = (uint64_t *)v561;
            do
            {
              v572 = *v568++;
              v571 = v572;
              v573 = *v570++;
              v574 = v571 & ~v573;
              v567 = v574 == 0;
              v725 = v569-- != 0;
              v575 = v725;
            }
            while (!v574 && (v575 & 1) != 0);
          }
          else
          {
            v567 = (v1580 & ~v561) == 0;
          }
          if (v560 >= 0x41 && v561)
            MEMORY[0x1CAA32F9C](v561, 0x1000C8000313F17);
          if (v567)
          {
            v576 = (int)v1587;
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v576;
            *(_QWORD *)(a7 + 32) = v157;
            *(_DWORD *)(a7 + 40) = v156;
            goto LABEL_2170;
          }
          v577 = *((unsigned int *)v1540 + 6);
          if (v577 > 0x40)
          {
            v578 = operator new[]();
            memcpy((void *)v578, *v1529, ((unint64_t)(v577 + 63) >> 3) & 0x3FFFFFF8);
            v603 = (uint64_t *)v1582;
            v604 = (unint64_t)(v577 + 63) >> 6;
            v605 = (_QWORD *)v578;
            do
            {
              v606 = *v603++;
              *v605++ |= v606;
              --v604;
            }
            while (v604);
          }
          else
          {
            v578 = v1582 | (unint64_t)*v1529;
          }
          if (v1581 > 0x40)
          {
            v608 = (uint64_t *)v1580;
            v609 = (((unint64_t)v1581 + 63) >> 6) - 1;
            v610 = (uint64_t *)v578;
            do
            {
              v612 = *v608++;
              v611 = v612;
              v613 = *v610++;
              v614 = v611 & ~v613;
              v607 = v614 == 0;
              v725 = v609-- != 0;
              v615 = v725;
            }
            while (!v614 && (v615 & 1) != 0);
          }
          else
          {
            v607 = (v1580 & ~v578) == 0;
          }
          if (v577 >= 0x41 && v578)
            MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
          v616 = (int)v1587;
          if (v607)
          {
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v616;
LABEL_91:
            *(_QWORD *)(a7 + 32) = v64;
            *(_DWORD *)(a7 + 40) = (_DWORD)v63;
            goto LABEL_2170;
          }
          if (sub_1C63758D8(v1534, v1586, (uint64_t)v1587, (uint64_t)&v1580, (uint64_t)&v1578, (uint64_t *)a7)
            || sub_1C6375BAC(v1586, v1587, v1535, (llvm::APInt *)&v1580, a7, v989))
          {
            goto LABEL_2170;
          }
          v990 = *((unsigned int *)v1540 + 2);
          if (v990 > 0x40)
          {
            v1497 = *(_QWORD **)v1540;
            v1498 = (uint64_t *)v1582;
            v1499 = (unint64_t)(v990 + 63) >> 6;
            do
            {
              v1500 = *v1498++;
              *v1497++ &= v1500;
              --v1499;
            }
            while (v1499);
          }
          else
          {
            *(_QWORD *)v1540 &= v1582;
          }
          v991 = *((unsigned int *)v1540 + 6);
          if (v991 > 0x40)
          {
            v1501 = *v1529;
            v1502 = (uint64_t *)v1584;
            v1503 = (unint64_t)(v991 + 63) >> 6;
            do
            {
              v1504 = *v1502++;
              *v1501++ |= v1504;
              --v1503;
            }
            while (v1503);
          }
          else
          {
            *v1529 = (const void *)((unint64_t)*v1529 | v1584);
          }
          goto LABEL_934;
        case 173:
          v133 = *(__int128 **)(v28 + 32);
          v1588 = *v133;
          *(_OWORD *)__src = *(__int128 *)((char *)v133 + 40);
          v135 = __src[0];
          v134 = __src[1];
          v136 = v1537 + 1;
          if ((sub_1C5D7BE14(v1534, __src[0], __src[1], &v1580, &v1578, v1540, a7, v136, 0) & 1) != 0)
            goto LABEL_2170;
          v137 = v1588;
          LOBYTE(v1519) = 0;
          if ((sub_1C5D7BE14(v1534, v1588, *((_QWORD *)&v1588 + 1), &v1580, &v1578, &v1582, a7, v136, v1519) & 1) != 0)
            goto LABEL_2170;
          v139 = v1581;
          if (!v1581)
            goto LABEL_520;
          if (v1581 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1580) != v139)
              goto LABEL_704;
          }
          else if (v1580 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1581)
          {
            goto LABEL_704;
          }
LABEL_520:
          v382 = v1579;
          if (!v1579)
          {
LABEL_706:
            v528 = v1535;
            goto LABEL_707;
          }
          if (v1579 > 0x40)
            v383 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1578) == v382;
          else
            v383 = v1578 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1579);
          v528 = v1535;
          if (!v383)
          {
LABEL_704:
            v529 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, v137, *((_BOOL8 *)&v137 + 1), (unsigned int *)&v1580, (unsigned int *)&v1578, *(_QWORD *)a7, v136);
            *(_QWORD *)v1545 = v529;
            *(_QWORD *)&v1545[2] = v530;
            v531 = (unint64_t)sub_1C5D86770((unsigned int *)v1534, (uint64_t)__src[0], (_BOOL8)__src[1], (unsigned int *)&v1580, (unsigned int *)&v1578, *(_QWORD *)a7, v136);
            *(_QWORD *)&v1573 = v531;
            *((_QWORD *)&v1573 + 1) = v533;
            if (v529 | v531)
              goto LABEL_725;
            v139 = v1581;
            goto LABEL_706;
          }
LABEL_707:
          if (v139 > 0x40)
          {
            v535 = ((unint64_t)v139 + 63) >> 6;
            v536 = (uint64_t *)v1580;
            v537 = *(uint64_t **)v1540;
            v538 = (uint64_t *)v1580;
            v539 = v535;
            while (1)
            {
              v541 = *v538++;
              v540 = v541;
              v542 = *v537++;
              if ((v540 & ~v542) != 0)
                break;
              if (!--v539)
                goto LABEL_715;
            }
            v544 = (uint64_t *)v1582;
            while (1)
            {
              v546 = *v536++;
              v545 = v546;
              v547 = *v544++;
              if ((v545 & ~v547) != 0)
                break;
              if (!--v535)
                goto LABEL_710;
            }
          }
          else
          {
            if ((v1580 & ~*(_QWORD *)v1540) == 0)
            {
LABEL_715:
              v543 = (int)v1587;
              *(_QWORD *)(a7 + 16) = v1586;
              *(_DWORD *)(a7 + 24) = v543;
              *(_QWORD *)(a7 + 32) = v137;
              *(_DWORD *)(a7 + 40) = DWORD2(v137);
              goto LABEL_2170;
            }
            if ((v1580 & ~v1582) == 0)
            {
LABEL_710:
              v534 = (int)v1587;
              *(_QWORD *)(a7 + 16) = v1586;
              *(_DWORD *)(a7 + 24) = v534;
              *(_QWORD *)(a7 + 32) = v135;
LABEL_711:
              *(_DWORD *)(a7 + 40) = (_DWORD)v134;
              goto LABEL_2170;
            }
          }
          if ((sub_1C6375BAC(v1586, v1587, v528, (llvm::APInt *)&v1580, a7, v138) & 1) != 0)
            goto LABEL_2170;
          v549 = (uint64_t *)a7;
          v550 = *((unsigned int *)v1540 + 2);
          if (v550 > 0x40)
          {
            v551 = operator new[]();
            memcpy((void *)v551, *(const void **)v1540, ((unint64_t)(v550 + 63) >> 3) & 0x3FFFFFF8);
            v741 = (uint64_t *)v1582;
            v742 = (unint64_t)(v550 + 63) >> 6;
            v743 = (_QWORD *)v551;
            do
            {
              v744 = *v741++;
              *v743++ |= v744;
              --v742;
            }
            while (v742);
          }
          else
          {
            v551 = v1582 | *(_QWORD *)v1540;
          }
          if (v1581 > 0x40)
          {
            v746 = (uint64_t *)v1580;
            v747 = (((unint64_t)v1581 + 63) >> 6) - 1;
            v748 = (uint64_t *)v551;
            do
            {
              v750 = *v746++;
              v749 = v750;
              v751 = *v748++;
              v752 = v749 & ~v751;
              v745 = v752 == 0;
              v725 = v747-- != 0;
              v753 = v725;
            }
            while (!v752 && (v753 & 1) != 0);
          }
          else
          {
            v745 = (v1580 & ~v551) == 0;
          }
          if (v550 >= 0x41 && v551)
            MEMORY[0x1CAA32F9C](v551, 0x1000C8000313F17);
          if (v745)
          {
            v755 = v1586;
            v754 = (int)v1587;
            v756 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v756)
              LOWORD(v756) = *(_WORD *)(v756 + 8);
            v757 = sub_1C5D56C70(*(_QWORD *)a7, 172, (const llvm::APInt *)&v1576, v1574, v1575, v137, *((unint64_t *)&v137 + 1), v548, (uint64_t)v135, (unint64_t)v134, v756);
            *(_QWORD *)(a7 + 16) = v755;
LABEL_1021:
            *((_DWORD *)v549 + 6) = v754;
LABEL_1022:
            v549[4] = (uint64_t)v757;
            *((_DWORD *)v549 + 10) = v758;
            goto LABEL_2170;
          }
          v759 = sub_1C5D4E5B0((uint64_t)v135, v134, (llvm::APInt *)&v1578, 0, 0);
          v760 = v1534;
          if (!v759)
            goto LABEL_1720;
          v761 = *(_QWORD *)(v759 + 80);
          v762 = (llvm::APInt *)(v761 + 24);
          v763 = *(unsigned int *)(v761 + 32);
          if (v763 > 0x40)
          {
            v764 = *(_QWORD *)v762;
            if (memcmp(*(const void **)v762, (const void *)v1584, ((unint64_t)(v763 + 63) >> 3) & 0x3FFFFFF8))
            {
              v842 = llvm::APInt::countTrailingOnesSlowCase(v762);
              v766 = (uint64_t *)v764;
              if (v842 == (_DWORD)v763)
                goto LABEL_1238;
              goto LABEL_1179;
            }
            v1234 = *(_QWORD *)a7;
            v1549 = v763;
            v1548 = (void *)operator new[]();
            memcpy(v1548, *(const void **)v762, ((unint64_t)(v763 + 63) >> 3) & 0x3FFFFFF8);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1548);
            v763 = v1549;
            v1236 = (unint64_t)v1548;
            v1549 = 0;
            if (v763 > 0x40)
            {
              v1254 = (uint64_t *)v1580;
              v1255 = (unint64_t)(v763 + 63) >> 6;
              v1256 = v1548;
              do
              {
                v1257 = *v1254++;
                *v1256++ &= v1257;
                --v1255;
              }
              while (v1255);
              goto LABEL_1973;
            }
          }
          else
          {
            v764 = *(_QWORD *)v762;
            if (*(_QWORD *)v762 != v1584)
            {
              if ((_DWORD)v763)
                v765 = v764 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v763;
              else
                v765 = 1;
              if (v765)
                goto LABEL_1241;
              v766 = *(uint64_t **)v762;
LABEL_1179:
              if (v1581 > 0x40)
              {
                v1031 = ((unint64_t)v1581 + 63) >> 6;
                v1032 = (uint64_t *)v1580;
                while (1)
                {
                  v1034 = *v1032++;
                  v1033 = v1034;
                  v1035 = *v766++;
                  if ((v1033 & ~v1035) != 0)
                    break;
                  if (!--v1031)
                    goto LABEL_1593;
                }
              }
              else if ((v1580 & ~v764) == 0)
              {
LABEL_1593:
                v757 = sub_1C6366760(*(_QWORD *)a7, (const llvm::APInt *)&v1576, v137, *((unint64_t *)&v137 + 1), v1574, v1575);
                v1036 = (int)v1587;
                *(_QWORD *)(a7 + 16) = v1586;
                *(_DWORD *)(a7 + 24) = v1036;
                goto LABEL_1022;
              }
              if (v763 <= 0x40)
              {
                v843 = v764 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v763;
                goto LABEL_1239;
              }
LABEL_1238:
              v843 = llvm::APInt::countTrailingOnesSlowCase(v762) == (_DWORD)v763;
LABEL_1239:
              v760 = v1534;
              if (!v843)
              {
LABEL_1720:
                if (sub_1C63758D8(v760, v1586, (uint64_t)v1587, (uint64_t)&v1580, (uint64_t)&v1578, (uint64_t *)a7))
                  goto LABEL_2170;
              }
LABEL_1241:
              llvm::KnownBits::operator^=((const void **)v1540, &v1582);
              goto LABEL_934;
            }
            v1234 = *(_QWORD *)a7;
            v1235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v763;
            if (!(_DWORD)v763)
              v1235 = 0;
            v1236 = v1235 & ~v764;
            v1548 = (void *)v1236;
            v1549 = 0;
          }
          v1236 &= v1580;
LABEL_1973:
          v1545[2] = v763;
          *(_QWORD *)v1545 = v1236;
          v1259 = sub_1C63666FC(v1234, (llvm::LLVMContext *)v1545, (const llvm::APInt *)&v1576, (uint64_t)v1574, v1575, 0, 0);
          v1261 = v1260;
          if (v1545[2] >= 0x41u && *(_QWORD *)v1545)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
          if (v1549 >= 0x41 && v1548)
            MEMORY[0x1CAA32F9C](v1548, 0x1000C8000313F17);
          v1262 = v1586;
          v754 = (int)v1587;
          v1263 = *(_QWORD *)(*v549 + 832);
          if (v1263)
            LOWORD(v1263) = *(_WORD *)(v1263 + 8);
          v757 = sub_1C5D56C70(*v549, 171, (const llvm::APInt *)&v1576, v1574, v1575, v137, *((unint64_t *)&v137 + 1), v1258, v1259, v1261, v1263);
          v549[2] = v1262;
          goto LABEL_1021;
        case 175:
          v162 = *(_QWORD *)(v28 + 32);
          v163 = *(_QWORD *)v162;
          v164 = *(_QWORD *)(v162 + 8);
          v165 = *(_QWORD *)(*(_QWORD *)(v162 + 40) + 40) + 16 * *(unsigned int *)(v162 + 48);
          v167 = *(llvm **)v165;
          v166 = *(_QWORD *)(v165 + 8);
          v168 = sub_1C5D4E50C(*(_QWORD *)a7, v28, (_BOOL8)v1587, (llvm::APInt *)&v1578);
          if (!v168)
            goto LABEL_481;
          if (*((_DWORD *)v168 + 2) >= 0x41u)
            v168 = *(llvm::APInt **)v168;
          v171 = *(llvm::APInt **)v168;
          v172 = v1534;
          v173 = v1537;
          if (!*(_QWORD *)v168)
            goto LABEL_491;
          v174 = *(unsigned __int16 *)(v163 + 24);
          if (v174 != 177)
            goto LABEL_461;
          DWORD2(v1588) = (_DWORD)v1535;
          if (v1535 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
          else
            *(_QWORD *)&v1588 = 0;
          sub_1C4912E54(&v1588, 0, v171);
          if (v1581 > 0x40)
          {
            v353 = 0;
            v175 = v1588;
            do
            {
              v354 = *(_QWORD *)(v1588 + v353) & *(_QWORD *)(v1580 + v353);
              v176 = v354 != 0;
              if (v354)
                v355 = 1;
              else
                v355 = ((((unint64_t)v1581 + 63) >> 3) & 0x3FFFFFF8) - 8 == v353;
              v353 += 8;
            }
            while (!v355);
          }
          else
          {
            v175 = v1588;
            v176 = ((unint64_t)v1588 & v1580) != 0;
          }
          if (DWORD2(v1588) >= 0x41 && v175 != 0)
            MEMORY[0x1CAA32F9C](v175, 0x1000C8000313F17);
          if (!v176)
          {
            v357 = sub_1C5D4E50C(*(_QWORD *)a7, v163, v164, (llvm::APInt *)&v1578);
            if (v357)
            {
              v967 = v167;
              v968 = v166;
              v969 = a7;
              if (*((_DWORD *)v357 + 2) >= 0x41u)
                v357 = *(llvm::APInt **)v357;
              v970 = (_DWORD)v171 - *(_DWORD *)v357;
              if (v970 >= 0)
                v971 = v970;
              else
                v971 = (*(_DWORD *)v357 - (_DWORD)v171);
              if (v970 >= 0)
                v972 = 175;
              else
                v972 = 177;
              v973 = *(_QWORD *)a7;
LABEL_1716:
              v1096 = sub_1C6366AB4(v973, v971, (const llvm::APInt *)&v1576, v967, v968, 0, 0);
              v1100 = v1586;
              v1099 = (int)v1587;
              v1101 = *(uint64_t **)(v163 + 32);
              v1102 = *v1101;
              v1103 = v1101[1];
              v1104 = *(_QWORD *)(*(_QWORD *)v969 + 832);
              if (v1104)
                LOWORD(v1104) = *(_WORD *)(v1104 + 8);
              v1105 = sub_1C5D56C70(*(_QWORD *)v969, v972, (const llvm::APInt *)&v1576, v1574, v1575, v1102, v1103, v1098, (uint64_t)v1096, v1097, v1104);
              *(_QWORD *)(v969 + 16) = v1100;
              *(_DWORD *)(v969 + 24) = v1099;
              goto LABEL_1719;
            }
          }
          v174 = *(unsigned __int16 *)(v163 + 24);
LABEL_461:
          if (v174 != 200)
            goto LABEL_462;
          v767 = v166;
          v768 = a7;
          v769 = *(uint64_t **)(v163 + 32);
          v770 = *v769;
          v771 = v769[1];
          v1588 = *(_OWORD *)(*(_QWORD *)(*v769 + 40) + 16 * v771);
          v772 = sub_1C6131328((unsigned __int8 *)&v1588, v169, v170);
          v773 = v772;
          if (v171 >= v772)
            goto LABEL_1462;
          if (v1581 > 0x40)
          {
            v974 = 0;
            v975 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v975-- < 1;
              if (v96)
                break;
              v976 = *(_QWORD *)(v1580 + 8 * v975);
              v974 += __clz(v976);
            }
            while (!v976);
            v977 = v1581 | 0xFFFFFFC0;
            if ((v1581 & 0x3F) == 0)
              v977 = 0;
            v774 = v974 + v977;
          }
          else
          {
            v774 = v1581 + __clz(v1580) - 64;
          }
          if (v1581 - v774 > v772
            || !(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1534 + 1744))(v1534, 175, v1588, *((_QWORD *)&v1588 + 1)))
          {
LABEL_1462:
            v978 = *(_QWORD *)(v163 + 48);
            if (!v978)
              goto LABEL_1477;
            v979 = 1;
            do
            {
              if (*(_DWORD *)(v978 + 8) == (_DWORD)v164)
              {
                if (!v979)
                  goto LABEL_1477;
                --v979;
              }
              v978 = *(_QWORD *)(v978 + 32);
            }
            while (v978);
            if (v979)
              goto LABEL_1477;
            if (*(_WORD *)(v770 + 24) != 177)
              goto LABEL_1477;
            v980 = *(_QWORD *)(v770 + 48);
            if (!v980)
              goto LABEL_1477;
            v981 = 1;
            do
            {
              if (*(_DWORD *)(v980 + 8) == (_DWORD)v771)
              {
                if (!v981)
                  goto LABEL_1477;
                --v981;
              }
              v980 = *(_QWORD *)(v980 + 32);
            }
            while (v980);
            if (v981)
              goto LABEL_1477;
            v1293 = sub_1C5D4E50C(*(_QWORD *)v768, v770, v771, (llvm::APInt *)&v1578);
            if (!v1293)
              goto LABEL_1477;
            if (*((_DWORD *)v1293 + 2) >= 0x41u)
              v1293 = *(llvm::APInt **)v1293;
            v1294 = *(llvm::APInt **)v1293;
            if (*(_QWORD *)v1293 >= v171 || v1294 >= v773)
              goto LABEL_1477;
            if (v1581 > 0x40)
            {
              v1375 = 0;
              v1376 = ((unint64_t)v1581 + 63) >> 6;
              do
              {
                v96 = v1376-- < 1;
                if (v96)
                  break;
                v1377 = *(_QWORD *)(v1580 + 8 * v1376);
                v1375 += __clz(v1377);
              }
              while (!v1377);
              v1378 = v1581 | 0xFFFFFFC0;
              if ((v1581 & 0x3F) == 0)
                v1378 = 0;
              if (v1581 - v1375 - v1378 > v773 + v171 - v1294)
                goto LABEL_1477;
              v1297 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580);
            }
            else
            {
              if (64 - __clz(v1580) > v773 + v171 - v1294)
                goto LABEL_1477;
              v1296 = __clz(__rbit64(v1580));
              if (v1581 >= v1296)
                v1297 = v1296;
              else
                v1297 = v1581;
            }
            if (v1297 >= v171)
            {
              v1379 = sub_1C6366AB4(*(_QWORD *)v768, ((_DWORD)v171 - (_DWORD)v1294), (const llvm::APInt *)&v1576, v167, v767, 0, 0);
              v1381 = v1380;
              v1382 = *(uint64_t **)(v770 + 32);
              v1383 = *v1382;
              v1384 = v1382[1];
              v1385 = *(_QWORD *)(*(_QWORD *)v768 + 832);
              if (v1385)
                v1386 = *(_WORD *)(v1385 + 8);
              else
                v1386 = 0;
              v1441 = sub_1C5D52060(*(_QWORD *)v768, 200, (const llvm::APInt *)&v1576, v1574, v1575, v1383, v1384, v1386);
              v1443 = v1586;
              v1320 = (int)v1587;
              v1444 = *(_QWORD *)(*(_QWORD *)v768 + 832);
              if (v1444)
                LOWORD(v1444) = *(_WORD *)(v1444 + 8);
              v1338 = sub_1C5D56C70(*(_QWORD *)v768, 175, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1441, v1440, v1442, (uint64_t)v1379, v1381, v1444);
              *(_QWORD *)(v768 + 16) = v1443;
LABEL_2076:
              *(_DWORD *)(v768 + 24) = v1320;
              *(_QWORD *)(v768 + 32) = v1338;
              *(_DWORD *)(v768 + 40) = v1339;
              goto LABEL_2170;
            }
LABEL_1477:
            a7 = v768;
            v172 = v1534;
            v173 = v1537;
LABEL_462:
            v358 = v1581;
            DWORD2(v1588) = v1581;
            if (v1581 > 0x40)
            {
              v992 = (((unint64_t)v1581 + 63) >> 3) & 0x3FFFFFF8;
              v359 = operator new[]();
              *(_QWORD *)&v1588 = v359;
              memcpy((void *)v359, (const void *)v1580, v992);
              llvm::APInt::tcShiftRight((llvm::APInt *)v359, (unint64_t *)((unint64_t)(v358 + 63) >> 6), v171);
            }
            else if (v1581 == (_DWORD)v171)
            {
              v359 = 0;
              *(_QWORD *)&v1588 = 0;
            }
            else
            {
              v359 = v1580 >> (char)v171;
              *(_QWORD *)&v1588 = v1580 >> (char)v171;
            }
            v360 = 0;
            if ((sub_1C5D7BE14(v172, v163, v164, &v1588, &v1578, v1540, a7, v173 + 1, 0) & 1) == 0)
            {
              sub_1C4888094((uint64_t)v1540, v171);
              sub_1C4888094((uint64_t)v1529, v171);
              sub_1C4912E54(v1540, 0, v171);
              if (v1581 > 0x40)
              {
                v363 = 0;
                v364 = ((unint64_t)v1581 + 63) >> 6;
                do
                {
                  v96 = v364-- < 1;
                  if (v96)
                    break;
                  v365 = *(_QWORD *)(v1580 + 8 * v364);
                  v363 += __clz(v365);
                }
                while (!v365);
                v366 = v1581 | 0xFFFFFFC0;
                if ((v1581 & 0x3F) == 0)
                  v366 = 0;
                v362 = v363 + v366;
              }
              else
              {
                v362 = v1581 + __clz(v1580) - 64;
              }
              v360 = v1581 - v362 <= v171
                  || (sub_1C6375BAC(v1586, v1587, v1535, (llvm::APInt *)&v1580, a7, v361) & 1) == 0;
            }
            if (v358 >= 0x41 && v359)
              MEMORY[0x1CAA32F9C](v359, 0x1000C8000313F17);
            if (!v360)
              goto LABEL_2170;
LABEL_481:
            v367 = sub_1C5D4E8BC(*(_QWORD *)a7, v1586, (_BOOL8)v1587, (llvm::APInt *)&v1578);
            if (v367)
            {
              if (*((_DWORD *)v367 + 2) >= 0x41u)
                v367 = *(llvm::APInt **)v367;
              v368 = *(_DWORD *)v367;
              v369 = sub_1C5D4F9D8(*(_QWORD *)a7, v163, v164, (unsigned int *)&v1578, v1537 + 1);
              if (v1581 > 0x40)
              {
                v371 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580);
              }
              else
              {
                v370 = __clz(__rbit64(v1580));
                v371 = v1581 >= v370 ? v370 : v1581;
              }
              if (v369 > v368 && v369 - v368 >= v1535 - v371)
              {
LABEL_491:
                v372 = (int)v1587;
                *(_QWORD *)(a7 + 16) = v1586;
                *(_DWORD *)(a7 + 24) = v372;
                *(_QWORD *)(a7 + 32) = v163;
                *(_DWORD *)(a7 + 40) = v164;
                goto LABEL_2170;
              }
            }
            goto LABEL_934;
          }
          ShiftAmountTy = (void *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1534, v1588, *((uint64_t *)&v1588 + 1), v61, 1);
          v1249 = (char)ShiftAmountTy;
          __src[0] = ShiftAmountTy;
          __src[1] = v1250;
          v1545[2] = (int)v1535;
          if (v1535 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v1545, v171, 0);
          }
          else
          {
            v1251 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1535;
            if (!(_DWORD)v1535)
              LODWORD(v1251) = 0;
            *(_QWORD *)v1545 = v1251 & v171;
          }
          if (v1249)
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
          else
            ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          v1311 = ExtendedSizeInBits;
          if ((_DWORD)v1253 == 1)
          if (v1545[2] > 0x40u)
          {
            v1324 = 0;
            v1325 = ((unint64_t)v1545[2] + 63) >> 6;
            do
            {
              v96 = v1325-- < 1;
              if (v96)
                break;
              v1326 = *(_QWORD *)(*(_QWORD *)v1545 + 8 * v1325);
              v1324 += __clz(v1326);
            }
            while (!v1326);
            v1327 = v1545[2] | 0xFFFFFFC0;
            if ((v1545[2] & 0x3F) == 0)
              v1327 = 0;
            v1328 = v1545[2] - v1324 - v1327;
            if (*(_QWORD *)v1545)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
            if (v1328 <= v1311)
              goto LABEL_2048;
          }
          else if (64 - __clz(*(unint64_t *)v1545) <= v1311)
          {
LABEL_2048:
            v1312 = *(_QWORD *)v768;
            v1313 = v1588;
            v1314 = sub_1C6366AB4(*(_QWORD *)v768, v171, (const llvm::APInt *)&v1576, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
            v1317 = *(_QWORD *)(v1312 + 832);
            if (v1317)
              LOWORD(v1317) = *(_WORD *)(v1317 + 8);
            v1319 = sub_1C5D56C70(v1312, 175, (const llvm::APInt *)&v1576, (llvm *)v1313, *((uint64_t *)&v1313 + 1), v770, v771, v1316, (uint64_t)v1314, v1315, v1317);
            v1321 = v1586;
            v1320 = (int)v1587;
            v1322 = *(_QWORD *)(*(_QWORD *)v768 + 832);
            if (v1322)
              v1323 = *(_WORD *)(v1322 + 8);
            else
              v1323 = 0;
            v1338 = sub_1C5D52060(*(_QWORD *)v768, 200, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1319, v1318, v1323);
            *(_QWORD *)(v768 + 16) = v1321;
            goto LABEL_2076;
          }
          *(_OWORD *)__src = v1588;
          goto LABEL_2048;
        case 176:
          v187 = *(_QWORD *)(v28 + 32);
          v64 = *(uint64_t **)v187;
          v63 = *(void **)(v187 + 8);
          v188 = *(_QWORD *)(v187 + 40);
          v189 = *(_QWORD *)(v187 + 48);
          v190 = *(_QWORD *)(v188 + 40) + 16 * v189;
          v191 = *(llvm **)v190;
          v192 = *(_QWORD *)(v190 + 8);
          v193 = a7;
          if (v1581 > 0x40)
          {
            v195 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580);
          }
          else
          {
            v194 = __clz(__rbit64(v1580));
            if (v1581 >= v194)
              v195 = v194;
            else
              v195 = v1581;
          }
          v229 = v1537 + 1;
          if (sub_1C5D4F9D8(*(_QWORD *)a7, (uint64_t)v64, (_BOOL8)v63, (unsigned int *)&v1578, v229) >= (int)v1535 - v195)
          {
            v233 = (int)v1587;
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v233;
            *(_QWORD *)(a7 + 32) = v64;
            *(_DWORD *)(a7 + 40) = (_DWORD)v63;
            goto LABEL_2170;
          }
          if (v1581 > 0x40)
          {
            v278 = 0;
            v279 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v279-- < 1;
              if (v96)
                break;
              v280 = *(_QWORD *)(v1580 + 8 * v279);
              v278 += __clz(v280);
            }
            while (!v280);
            v281 = v1581 | 0xFFFFFFC0;
            if ((v1581 & 0x3F) == 0)
              v281 = 0;
            if (v278 + v281 != v1581 - 1)
            {
LABEL_262:
              v182 = sub_1C5D87C40(v1586, v1587, *(_QWORD *)a7, v1534, (uint64_t)&v1580, (llvm::APInt *)&v1578, v229);
              v184 = v231;
              v185 = v1586;
              v186 = (int)v1587;
              if (v182)
              {
LABEL_192:
                *(_QWORD *)(a7 + 16) = v185;
                *(_DWORD *)(a7 + 24) = v186;
                *(_QWORD *)(a7 + 32) = v182;
                v19 = 1;
                *(_DWORD *)(a7 + 40) = v184;
                goto LABEL_2171;
              }
              v232 = sub_1C5D4E50C(*(_QWORD *)a7, v1586, (_BOOL8)v1587, (llvm::APInt *)&v1578);
              if (!v232)
                goto LABEL_934;
              if (*((_DWORD *)v232 + 2) >= 0x41u)
                v232 = *(llvm::APInt **)v232;
              *(_QWORD *)v1538 = *(_QWORD *)v232;
              if (!*(_QWORD *)v232)
              {
LABEL_90:
                v65 = (int)v1587;
                *(_QWORD *)(a7 + 16) = v1586;
                *(_DWORD *)(a7 + 24) = v65;
                goto LABEL_91;
              }
              DWORD2(v1588) = v1581;
              if (v1581 > 0x40)
              {
                *(_QWORD *)&v1588 = operator new[]();
                memcpy((void *)v1588, (const void *)v1580, (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                *(_QWORD *)&v1588 = v1580;
              }
              sub_1C4888094((uint64_t)&v1588, v1538[0]);
              if ((*(_WORD *)(v1586 + 72) & 8) != 0)
                sub_1C4912E54(&v1588, 0, v1538[0]);
              if (v1581 > 0x40)
              {
                v794 = 0;
                v795 = ((unint64_t)v1581 + 63) >> 6;
                do
                {
                  v96 = v795-- < 1;
                  if (v96)
                    break;
                  v796 = *(_QWORD *)(v1580 + 8 * v795);
                  v794 += __clz(v796);
                }
                while (!v796);
                if ((v1581 & 0x3F) != 0)
                  v797 = v1581 | 0xFFFFFFC0;
                else
                  v797 = 0;
                v793 = v794 + v797;
              }
              else
              {
                v793 = v1581 + __clz(v1580) - 64;
              }
              if (v793 < v1538[0])
              {
                v798 = 1 << (BYTE8(v1588) - 1);
                if (DWORD2(v1588) > 0x40)
                  *(_QWORD *)(v1588 + 8 * ((DWORD2(v1588) - 1) >> 6)) |= v798;
                else
                  *(_QWORD *)&v1588 = v1588 | v798;
              }
              v386 = 0;
              if ((sub_1C5D7BE14(v1534, v64, v63, &v1588, &v1578, v1540, a7, v229, 0) & 1) != 0)
              {
LABEL_1623:
                if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                  MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
                a7 = v193;
                goto LABEL_2169;
              }
              v864 = *((unsigned int *)v1540 + 2);
              if (v864 > 0x40)
              {
                llvm::APInt::tcShiftRight(*(llvm::APInt **)v1540, (unint64_t *)((unint64_t)(v864 + 63) >> 6), v1538[0]);
              }
              else if ((_DWORD)v864 == v1538[0])
              {
                *(_QWORD *)v1540 = 0;
              }
              else
              {
                *(_QWORD *)v1540 >>= SLOBYTE(v1538[0]);
              }
              v995 = *((unsigned int *)v1540 + 6);
              if (v995 > 0x40)
              {
                llvm::APInt::tcShiftRight((llvm::APInt *)*v1529, (unint64_t *)((unint64_t)(v995 + 63) >> 6), v1538[0]);
              }
              else if ((_DWORD)v995 == v1538[0])
              {
                *v1529 = 0;
              }
              else
              {
                *v1529 = (const void *)((unint64_t)*v1529 >> SLOBYTE(v1538[0]));
              }
              v996 = (_DWORD)v1535 + ~v1538[0];
              v997 = v996 >> 6;
              if (*((_DWORD *)v1540 + 2) >= 0x41u)
                v998 = (llvm::APInt *)(*(_QWORD *)v1540 + 8 * v997);
              else
                v998 = v1540;
              v999 = 1 << v996;
              if ((*(_QWORD *)v998 & (1 << v996)) != 0)
                goto LABEL_1621;
              if (v1581 > 0x40)
              {
                v1050 = 0;
                v1051 = ((unint64_t)v1581 + 63) >> 6;
                do
                {
                  v96 = v1051-- < 1;
                  if (v96)
                    break;
                  v1052 = *(_QWORD *)(v1580 + 8 * v1051);
                  v1050 += __clz(v1052);
                }
                while (!v1052);
                v1053 = (v1581 & 0x3F) != 0 ? v1581 | 0xFFFFFFC0 : 0;
                v1000 = v1050 + v1053;
              }
              else
              {
                v1000 = v1581 + __clz(v1580) - 64;
              }
              if (v1000 >= v1538[0])
              {
LABEL_1621:
                v1054 = v1586;
                v1055 = (int)v1587;
                v1056 = sub_1C5D56C70(*(_QWORD *)v193, 177, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v64, (unint64_t)v63, v863, v188, v189, *(_WORD *)(v1586 + 72) & 8 | 1u);
LABEL_1622:
                v386 = 0;
                *(_QWORD *)(v193 + 16) = v1054;
                *(_DWORD *)(v193 + 24) = v1055;
                *(_QWORD *)(v193 + 32) = v1056;
                *(_DWORD *)(v193 + 40) = v1057;
                goto LABEL_1623;
              }
              v1238 = sub_1C614D48C((unsigned int *)&v1580);
              if ((v1238 & 0x80000000) == 0)
              {
                v1387 = sub_1C6366AB4(*(_QWORD *)v193, ((_DWORD)v1535 + ~v1238), (const llvm::APInt *)&v1576, v191, v192, 0, 0);
                v1054 = v1586;
                v1055 = (int)v1587;
                v1390 = *(_QWORD *)(*(_QWORD *)v193 + 832);
                if (v1390)
                  LOWORD(v1390) = *(_WORD *)(v1390 + 8);
                v1056 = sub_1C5D56C70(*(_QWORD *)v193, 177, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v64, (unint64_t)v63, v1389, (uint64_t)v1387, v1388, v1390);
                goto LABEL_1622;
              }
              LODWORD(a3) = *((_DWORD *)v1540 + 6);
              v1239 = (_QWORD *)(*((_QWORD *)v1540 + 2) + 8 * v997);
              if (a3 < 0x41)
                v1239 = v1529;
              if ((*v1239 & v999) != 0)
                sub_1C4912E54(v1529, (_DWORD)a3 - v1538[0], a3);
              v1240 = DWORD2(v1588);
              if (DWORD2(v1588))
              {
                if (DWORD2(v1588) > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1588) != v1240)
                    goto LABEL_2090;
                }
                else if ((_QWORD)v1588 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1588))
                {
LABEL_2090:
                  v1342 = sub_1C5D86770((unsigned int *)v1534, (uint64_t)v64, (_BOOL8)v63, (unsigned int *)&v1588, (unsigned int *)&v1578, *(_QWORD *)v193, v229);
                  if (v1342)
                  {
                    v1345 = *(_QWORD *)(*(_QWORD *)v193 + 832);
                    if (v1345)
                      LOWORD(v1345) = *(_WORD *)(v1345 + 8);
                    v1056 = sub_1C5D56C70(*(_QWORD *)v193, 176, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1342, v1343, v1344, v188, v189, v1345);
                    v1054 = v1586;
                    v1055 = (int)v1587;
                    goto LABEL_1622;
                  }
                  goto LABEL_2094;
                }
              }
              v1340 = v1579;
              if (v1579)
              {
                if (v1579 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1578) != v1340)
                    goto LABEL_2090;
                }
                else if (v1578 != (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1579))
                {
                  goto LABEL_2090;
                }
              }
LABEL_2094:
              v386 = 1;
              goto LABEL_1623;
            }
          }
          else if (v1580 != 1)
          {
            goto LABEL_262;
          }
          v283 = v1586;
          v282 = (int)v1587;
          v284 = *(_QWORD *)(*(_QWORD *)v193 + 832);
          if (v284)
            LOWORD(v284) = *(_WORD *)(v284 + 8);
          v285 = sub_1C5D56C70(*(_QWORD *)v193, 177, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v64, (unint64_t)v63, v230, v188, v189, v284);
          *(_QWORD *)(v193 + 16) = v283;
          *(_DWORD *)(v193 + 24) = v282;
LABEL_361:
          *(_QWORD *)(v193 + 32) = v285;
          *(_DWORD *)(v193 + 40) = v286;
          goto LABEL_2170;
        case 177:
          v177 = *(_QWORD *)(v28 + 32);
          v178 = *(_QWORD *)v177;
          v134 = *(void **)(v177 + 8);
          v179 = (llvm **)(*(_QWORD *)(*(_QWORD *)(v177 + 40) + 40) + 16 * *(unsigned int *)(v177 + 48));
          v181 = *v179;
          v180 = (uint64_t)v179[1];
          v182 = sub_1C5D87C40(v28, v1587, *(_QWORD *)a7, v1534, (uint64_t)&v1580, (llvm::APInt *)&v1578, v1537 + 1);
          v184 = v183;
          v185 = v1586;
          v186 = (int)v1587;
          if (v182)
            goto LABEL_192;
          v263 = sub_1C5D4E50C(*(_QWORD *)a7, v1586, (_BOOL8)v1587, (llvm::APInt *)&v1578);
          if (!v263)
            goto LABEL_934;
          if (*((_DWORD *)v263 + 2) >= 0x41u)
            v263 = *(llvm::APInt **)v263;
          v264 = *(llvm::APInt **)v263;
          if (!*(_QWORD *)v263)
          {
            v381 = (int)v1587;
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v381;
            *(_QWORD *)(a7 + 32) = v178;
            goto LABEL_711;
          }
          if (*(_WORD *)(v178 + 24) != 175)
            goto LABEL_874;
          DWORD2(v1588) = (_DWORD)v1535;
          if (v1535 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
            sub_1C4912E54(&v1588, DWORD2(v1588) - (_DWORD)v264, DWORD2(v1588));
          }
          else
          {
            *(_QWORD *)&v1588 = 0;
            sub_1C4912E54(&v1588, (_DWORD)v1535 - (_DWORD)v264, v1535);
          }
          if (v1581 > 0x40)
          {
            v669 = 0;
            v265 = v1588;
            do
            {
              v670 = *(_QWORD *)(v1588 + v669) & *(_QWORD *)(v1580 + v669);
              v266 = v670 != 0;
              if (v670)
                v671 = 1;
              else
                v671 = ((((unint64_t)v1581 + 63) >> 3) & 0x3FFFFFF8) - 8 == v669;
              v669 += 8;
            }
            while (!v671);
          }
          else
          {
            v265 = v1588;
            v266 = ((unint64_t)v1588 & v1580) != 0;
          }
          if (DWORD2(v1588) >= 0x41 && v265 != 0)
            MEMORY[0x1CAA32F9C](v265, 0x1000C8000313F17);
          if (v266 || (v673 = sub_1C5D4E50C(*(_QWORD *)a7, v178, (_BOOL8)v134, (llvm::APInt *)&v1578)) == 0)
          {
LABEL_874:
            DWORD2(v1588) = v1581;
            if (v1581 > 0x40)
            {
              *(_QWORD *)&v1588 = operator new[]();
              memcpy((void *)v1588, (const void *)v1580, (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *(_QWORD *)&v1588 = v1580;
            }
            sub_1C4888094((uint64_t)&v1588, v264);
            if ((*(_WORD *)(v1586 + 72) & 8) != 0)
              sub_1C4912E54(&v1588, 0, v264);
            v241 = sub_1C5D7BE14(v1534, v178, v134, &v1588, &v1578, v1540, a7, v1537 + 1, 0);
            if ((v241 & 1) == 0)
            {
              v674 = *((unsigned int *)v1540 + 2);
              if (v674 > 0x40)
              {
                llvm::APInt::tcShiftRight(*(llvm::APInt **)v1540, (unint64_t *)((unint64_t)(v674 + 63) >> 6), v264);
              }
              else if ((_DWORD)v674 == (_DWORD)v264)
              {
                *(_QWORD *)v1540 = 0;
              }
              else
              {
                *(_QWORD *)v1540 >>= (char)v264;
              }
              v799 = *((unsigned int *)v1540 + 6);
              if (v799 > 0x40)
              {
                llvm::APInt::tcShiftRight((llvm::APInt *)*v1529, (unint64_t *)((unint64_t)(v799 + 63) >> 6), v264);
              }
              else if ((_DWORD)v799 == (_DWORD)v264)
              {
                *v1529 = 0;
              }
              else
              {
                *v1529 = (const void *)((unint64_t)*v1529 >> (char)v264);
              }
              sub_1C4912E54(v1540, *((_DWORD *)v1540 + 2) - (_DWORD)v264, *((_DWORD *)v1540 + 2));
            }
            goto LABEL_294;
          }
          v968 = v180;
          v163 = v178;
          v969 = a7;
          if (*((_DWORD *)v673 + 2) >= 0x41u)
            v673 = *(llvm::APInt **)v673;
          v1095 = (_DWORD)v264 - *(_DWORD *)v673;
          if (v1095 >= 0)
            v971 = v1095;
          else
            v971 = (*(_DWORD *)v673 - (_DWORD)v264);
          if (v1095 >= 0)
            v972 = 177;
          else
            v972 = 175;
          v973 = *(_QWORD *)a7;
          v967 = v181;
          goto LABEL_1716;
        case 178:
        case 179:
          v62 = *(_QWORD *)(v28 + 32);
          v64 = *(uint64_t **)v62;
          v63 = *(void **)(v62 + 8);
          v1588 = *(_OWORD *)(v62 + 40);
          if ((_DWORD)v58 == sub_1C5D4F9D8(*(_QWORD *)a7, (uint64_t)v64, (_BOOL8)v63, (unsigned int *)&v1578, v1537 + 1))goto LABEL_90;
          v202 = sub_1C5D4E5B0(v1588, DWORD2(v1588), (llvm::APInt *)&v1578, 0, 0);
          if (!v202)
            goto LABEL_933;
          v205 = llvm::APInt::urem((uint64_t **)(*(_QWORD *)(v202 + 80) + 24), v58);
          v206 = v205;
          v207 = v58 - v205;
          if (v29 == 178)
            v208 = v205;
          else
            v208 = v207;
          llvm::APInt::rotr((llvm::APInt *)&v1580, v208, (uint64_t)__src);
          v209 = 0;
          if ((sub_1C5D7BE14(v1534, v64, v63, __src, &v1578, &v1582, a7, v1537 + 1, 0) & 1) != 0)
            goto LABEL_929;
          if (!v206)
          {
            v350 = v1586;
            v351 = (int)v1587;
            goto LABEL_441;
          }
          v210 = *(unsigned __int8 *)(a7 + 9);
          if (!*(_BYTE *)(a7 + 9))
            goto LABEL_212;
          if (!(_BYTE)v1574)
            goto LABEL_928;
          v211 = v1574;
          if (v1574 != 1 && !*(_QWORD *)(v1534 + 8 * v1574 + 96)
            || *(_BYTE *)(v1534 + 390 * v1574 + 4037))
          {
            goto LABEL_782;
          }
LABEL_212:
          v212 = v1581;
          if (v1581 > 0x40)
          {
            v214 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580);
          }
          else
          {
            v213 = __clz(__rbit64(v1580));
            if (v1581 >= v213)
              v214 = v213;
            else
              v214 = v1581;
          }
          if (v214 >= v208)
          {
            v982 = *(_QWORD *)(v1588 + 40) + 16 * DWORD2(v1588);
            v983 = sub_1C6366AB4(*(_QWORD *)a7, v208, (const llvm::APInt *)&v1576, *(llvm **)v982, *(_QWORD *)(v982 + 8), 0, 0);
            *(_QWORD *)&v1588 = v983;
            DWORD2(v1588) = v985;
            v350 = v1586;
            v351 = (int)v1587;
            v986 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v986)
              LOWORD(v986) = *(_WORD *)(v986 + 8);
            v64 = sub_1C5D56C70(*(_QWORD *)a7, 175, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v64, (unint64_t)v63, v984, (uint64_t)v983, *((unint64_t *)&v1588 + 1), v986);
            LODWORD(v63) = v203;
            goto LABEL_441;
          }
          if (v210)
          {
            v211 = v1574;
LABEL_782:
            if (!(_DWORD)v211)
              goto LABEL_928;
            if ((_DWORD)v211 != 1)
            {
              v209 = 1;
              if (!*(_QWORD *)(v1534 + 8 * v211 + 96))
              {
LABEL_929:
                if (LODWORD(__src[1]) >= 0x41 && __src[0])
                  MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                LODWORD(v58) = (_DWORD)v1535;
                if (!v209)
                  goto LABEL_2170;
LABEL_933:
                v204.i32[0] = v58;
                v702 = (uint8x8_t)vcnt_s8(v204);
                v702.i16[0] = vaddlv_u8(v702);
                if (v702.i32[0] == 1)
                {
                  v735 = sub_1C6329368((unsigned int *)&v1588, v203, (BOOL)a3);
                  v736 = v58;
                  v593 = v735;
                  v737 = (v736 - 1);
                  LODWORD(__src[1]) = v735;
                  if (v735 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)__src, v737, 0);
                    v593 = __src[1];
                  }
                  else
                  {
                    v738 = v735 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v735 : 0;
                    __src[0] = (void *)(v738 & v737);
                  }
                  v599 = *((_QWORD *)&v1588 + 1);
                  v598 = v1588;
                  LOBYTE(v1517) = 0;
                  v595 = v1534;
                  v601 = a7;
                  v600 = v1537 + 1;
LABEL_989:
                  v739 = sub_1C5D7BE14(v595, v598, v599, __src, &v1578, &v1582, v601, v600, v1517);
                  if (v593 >= 0x41 && __src[0])
                    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                  if (v739)
                  {
LABEL_2170:
                    v19 = 1;
LABEL_2171:
                    if (v1585 >= 0x41 && v1584)
                      MEMORY[0x1CAA32F9C](v1584, 0x1000C8000313F17);
                    if (v1583 >= 0x41 && v1582)
                      MEMORY[0x1CAA32F9C](v1582, 0x1000C8000313F17);
                    goto LABEL_62;
                  }
                }
                goto LABEL_934;
              }
            }
            if (*(_BYTE *)(v1534 + 390 * v211 + 4039))
            {
LABEL_928:
              v209 = 1;
              goto LABEL_929;
            }
            v212 = v1581;
          }
          if (v212 > 0x40)
          {
            v698 = 0;
            v699 = ((unint64_t)v212 + 63) >> 6;
            do
            {
              v96 = v699-- < 1;
              if (v96)
                break;
              v700 = *(_QWORD *)(v1580 + 8 * v699);
              v698 += __clz(v700);
            }
            while (!v700);
            v701 = v212 | 0xFFFFFFC0;
            if ((v212 & 0x3F) == 0)
              v701 = 0;
            v602 = v698 + v701;
          }
          else
          {
            v602 = v212 + __clz(v1580) - 64;
          }
          if (v29 == 178)
            v203 = v207;
          else
            v203 = v206;
          if (v602 < v203)
            goto LABEL_928;
          v1072 = *(_QWORD *)(v1588 + 40) + 16 * DWORD2(v1588);
          v1073 = sub_1C6366AB4(*(_QWORD *)a7, v203, (const llvm::APInt *)&v1576, *(llvm **)v1072, *(_QWORD *)(v1072 + 8), 0, 0);
          *(_QWORD *)&v1588 = v1073;
          DWORD2(v1588) = v1075;
          v350 = v1586;
          v351 = (int)v1587;
          v1076 = *(_QWORD *)(*(_QWORD *)a7 + 832);
          if (v1076)
            LOWORD(v1076) = *(_WORD *)(v1076 + 8);
          v64 = sub_1C5D56C70(*(_QWORD *)a7, 177, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v64, (unint64_t)v63, v1074, (uint64_t)v1073, *((unint64_t *)&v1588 + 1), v1076);
          LODWORD(v63) = v203;
LABEL_441:
          v209 = 0;
          *(_QWORD *)(a7 + 16) = v350;
          *(_DWORD *)(a7 + 24) = v351;
          *(_QWORD *)(a7 + 32) = v64;
          *(_DWORD *)(a7 + 40) = (_DWORD)v63;
          goto LABEL_929;
        case 180:
        case 181:
          v78 = *(uint64_t **)(v28 + 32);
          v80 = *v78;
          v79 = v78[1];
          v82 = v78[5];
          v81 = v78[6];
          v1588 = *((_OWORD *)v78 + 5);
          v83 = sub_1C5D4E5B0(v1588, DWORD2(v1588), (llvm::APInt *)&v1578, 0, 0);
          if (!v83)
            goto LABEL_772;
          v86 = llvm::APInt::urem((uint64_t **)(*(_QWORD *)(v83 + 80) + 24), v58);
          v87 = v58;
          v88 = v86;
          if (!v86)
          {
            if (v29 == 180)
              v242 = v80;
            else
              v242 = v82;
            if (v29 == 180)
              v243 = v79;
            else
              v243 = v81;
            if ((sub_1C5D7BE14(v1534, v242, v243, &v1580, &v1578, v1540, a7, v1537 + 1, 0) & 1) == 0)
              goto LABEL_934;
            goto LABEL_2170;
          }
          v1525 = v82;
          v1526 = v81;
          v89 = v87 - v86;
          if (v29 == 180)
            v90 = v86;
          else
            v90 = v87 - v86;
          v91 = v1581;
          LODWORD(__src[1]) = v1581;
          if (v1581 > 0x40)
          {
            __n = (((unint64_t)v1581 + 63) >> 3) & 0x3FFFFFF8;
            v1531 = operator new[]();
            __src[0] = (void *)v1531;
            v92 = (_QWORD *)v1580;
            memcpy((void *)v1531, (const void *)v1580, __n);
            llvm::APInt::tcShiftRight((llvm::APInt *)v1531, (unint64_t *)((unint64_t)(v91 + 63) >> 6), v90);
          }
          else
          {
            v92 = (_QWORD *)v1580;
            if (v1581 == v90)
            {
              v1531 = 0;
              __src[0] = 0;
            }
            else
            {
              v1531 = v1580 >> v90;
              __src[0] = (void *)(v1580 >> v90);
            }
          }
          if (v29 == 180)
            v93 = v89;
          else
            v93 = v88;
          v1545[2] = v1581;
          if (v1581 > 0x40)
          {
            *(_QWORD *)v1545 = operator new[]();
            memcpy(*(void **)v1545, (const void *)v1580, (((unint64_t)v1545[2] + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)v1545 = v92;
          }
          v255 = v93;
          sub_1C4888094((uint64_t)v1545, v93);
          v256 = 0;
          if ((sub_1C5D7BE14(v1534, v80, v79, __src, &v1578, &v1582, a7, v1537 + 1, 0) & 1) == 0)
          {
            LOBYTE(v1517) = 0;
            v256 = 0;
            if ((sub_1C5D7BE14(v1534, v1525, v1526, v1545, &v1578, v1540, a7, v1537 + 1, v1517) & 1) == 0)
            {
              sub_1C4888094((uint64_t)&v1584, v90);
              sub_1C4888094((uint64_t)&v1582, v90);
              v257 = *((unsigned int *)v1540 + 6);
              if (v257 > 0x40)
              {
                llvm::APInt::tcShiftRight((llvm::APInt *)*v1529, (unint64_t *)((unint64_t)(v257 + 63) >> 6), v255);
              }
              else if ((_DWORD)v257 == v255)
              {
                *v1529 = 0;
              }
              else
              {
                *v1529 = (const void *)((unint64_t)*v1529 >> v255);
              }
              v579 = *((unsigned int *)v1540 + 2);
              if (v579 > 0x40)
              {
                llvm::APInt::tcShiftRight(*(llvm::APInt **)v1540, (unint64_t *)((unint64_t)(v579 + 63) >> 6), v255);
              }
              else if ((_DWORD)v579 == v255)
              {
                *(_QWORD *)v1540 = 0;
              }
              else
              {
                *(_QWORD *)v1540 >>= v255;
              }
              v580 = *((unsigned int *)v1540 + 6);
              if (v580 > 0x40)
              {
                v581 = *v1529;
                v582 = (uint64_t *)v1584;
                v583 = (unint64_t)(v580 + 63) >> 6;
                do
                {
                  v584 = *v582++;
                  *v581++ |= v584;
                  --v583;
                }
                while (v583);
              }
              else
              {
                *v1529 = (const void *)((unint64_t)*v1529 | v1584);
              }
              v585 = *((unsigned int *)v1540 + 2);
              if (v585 > 0x40)
              {
                v586 = *(_QWORD **)v1540;
                v587 = (uint64_t *)v1582;
                v588 = (unint64_t)(v585 + 63) >> 6;
                v256 = 1;
                do
                {
                  v589 = *v587++;
                  *v586++ |= v589;
                  --v588;
                }
                while (v588);
              }
              else
              {
                *(_QWORD *)v1540 |= v1582;
                v256 = 1;
              }
            }
          }
          if (v1545[2] >= 0x41u && *(_QWORD *)v1545)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
          LODWORD(v58) = (_DWORD)v1535;
          if (v91 >= 0x41 && v1531)
            MEMORY[0x1CAA32F9C](v1531, 0x1000C8000313F17);
          if ((v256 & 1) == 0)
            goto LABEL_2170;
LABEL_772:
          v85.i32[0] = v58;
          v590 = (uint8x8_t)vcnt_s8(v85);
          v590.i16[0] = vaddlv_u8(v590);
          if (v590.i32[0] != 1)
            goto LABEL_934;
          v591 = sub_1C6329368((unsigned int *)&v1588, v84, (BOOL)a3);
          v592 = v58;
          v593 = v591;
          v594 = (v592 - 1);
          LODWORD(__src[1]) = v591;
          if (v591 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)__src, v594, 0);
            v593 = __src[1];
            v595 = v1534;
            v596 = v1537;
          }
          else
          {
            v595 = v1534;
            v596 = v1537;
            if (v593)
              v597 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v593;
            else
              v597 = 0;
            __src[0] = (void *)(v597 & v594);
          }
          v599 = *((_QWORD *)&v1588 + 1);
          v598 = v1588;
          v600 = v596 + 1;
          LOBYTE(v1517) = 0;
          v601 = a7;
          goto LABEL_989;
        case 182:
          v196 = *(uint64_t **)(v28 + 32);
          v198 = *v196;
          v197 = v196[1];
          if (v1581 > 0x40)
          {
            v234 = 0;
            v235 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v235-- < 1;
              if (v96)
                break;
              v236 = *(_QWORD *)(v1580 + 8 * v235);
              v234 += __clz(v236);
            }
            while (!v236);
            if ((v1581 & 0x3F) != 0)
              v237 = v1581 | 0xFFFFFFC0;
            else
              v237 = 0;
            v199 = v234 + v237;
            v201 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580);
          }
          else
          {
            v199 = v1581 + __clz(v1580) - 64;
            v200 = __clz(__rbit64(v1580));
            if (v1581 >= v200)
              v201 = v200;
            else
              v201 = v1581;
          }
          v238 = v199 & 0xFFFFFFF8;
          v239 = v201 & 0xFFFFFFF8;
          if ((_DWORD)v1535 - (v238 + (v201 & 0xFFFFFFF8)) == 8)
          {
            v240 = v238 <= v239 ? 175 : 177;
            if (!*(_BYTE *)(a7 + 9)
              || (_BYTE)v1574
              && (v1574 == 1 || *(_QWORD *)(v1534 + 8 * v1574 + 96))
              && !*(_BYTE *)(v1534 + 390 * v1574 + v240 + 3862))
            {
              v629 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1534, (uint64_t)v1574, v1575, v61, 1);
              v630 = v238 - v239;
              if (v238 <= v239)
                v630 = v239 - v238;
              v631 = sub_1C6366AB4(*(_QWORD *)a7, v630 & 0xFFFFFFF8, (const llvm::APInt *)&v1576, v629, v628, 0, 0);
              v309 = a7;
              v634 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v634)
                LOWORD(v634) = *(_WORD *)(v634 + 8);
              v314 = sub_1C5D56C70(*(_QWORD *)a7, v240, (const llvm::APInt *)&v1576, v1574, v1575, v198, v197, v633, (uint64_t)v631, v632, v634);
              goto LABEL_1899;
            }
          }
          llvm::APInt::byteSwap((llvm::APInt *)&v1580, (llvm::APInt *)&v1588);
          v241 = sub_1C5D7BE14(v1534, v198, v197, &v1588, &v1578, &v1582, a7, v1537 + 1, 0);
          if ((v241 & 1) == 0)
          {
            llvm::APInt::byteSwap((llvm::APInt *)&v1584, (llvm::APInt *)__src);
            if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
              MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
            *((void **)v1540 + 2) = __src[0];
            *((_DWORD *)v1540 + 6) = __src[1];
            llvm::APInt::byteSwap((llvm::APInt *)&v1582, (llvm::APInt *)__src);
            if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
            *(void **)v1540 = __src[0];
            *((_DWORD *)v1540 + 2) = __src[1];
          }
LABEL_294:
          if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
            MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
          if ((v241 & 1) != 0)
            goto LABEL_2170;
          goto LABEL_934;
        case 185:
          if (v1581 > 0x40)
          {
            v218 = 0;
            v219 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v219-- < 1;
              if (v96)
                break;
              v220 = *(_QWORD *)(v1580 + 8 * v219);
              v218 += __clz(v220);
            }
            while (!v220);
            v221 = v1581 | 0xFFFFFFC0;
            if ((v1581 & 0x3F) == 0)
              v221 = 0;
            v110 = v218 + v221 == v1581 - 1;
          }
          else
          {
            v110 = v1580 == 1;
          }
          if (!v110 || *(_BYTE *)(a7 + 9) != 0)
            goto LABEL_363;
          if ((_BYTE)v1574)
          {
            if (v1574 - 15 < 0x9C)
              goto LABEL_363;
            v224 = v1575;
          }
          else
          {
            v224 = v1575;
            if ((*(_DWORD *)(v1575 + 8) & 0xFE) == 0x12)
              goto LABEL_363;
          }
          v287 = (int)v1587;
          v288 = *(uint64_t **)(v28 + 32);
          v289 = *v288;
          v290 = v288[1];
          v291 = *(_QWORD *)(*(_QWORD *)a7 + 832);
          if (v291)
            v292 = *(_WORD *)(v291 + 8);
          else
            v292 = 0;
          v373 = (uint64_t)sub_1C5D52060(*(_QWORD *)a7, 187, (const llvm::APInt *)&v1576, v1574, v224, v289, v290, v292);
LABEL_494:
          *(_QWORD *)(a7 + 16) = v28;
          *(_DWORD *)(a7 + 24) = v287;
          goto LABEL_977;
        case 186:
          v111 = *(uint64_t **)(v28 + 32);
          v112 = *v111;
          v113 = v111[1];
          llvm::APInt::reverseBits((llvm::APInt *)&v1580, (llvm::APInt *)&v1588);
          if ((sub_1C5D7BE14(v1534, v112, v113, &v1588, &v1578, &v1582, a7, v1537 + 1, 0) & 1) != 0)
            goto LABEL_385;
          llvm::APInt::reverseBits((llvm::APInt *)&v1584, (llvm::APInt *)__src);
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v57)
            MEMORY[0x1CAA32F9C](*v57, 0x1000C8000313F17);
          *((void **)v1540 + 2) = __src[0];
          *((_DWORD *)v1540 + 6) = __src[1];
          llvm::APInt::reverseBits((llvm::APInt *)&v1582, (llvm::APInt *)__src);
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(void **)v1540 = __src[0];
          *((_DWORD *)v1540 + 2) = __src[1];
          goto LABEL_144;
        case 190:
          if ((sub_1C6375E58(v1534, *(_QWORD *)(*(_QWORD *)(v28 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v28 + 32) + 88), &v1580, v1540, a7, v1537 + 1, 0) & 1) != 0)goto LABEL_2170;
          v420 = a7;
          if ((sub_1C6375E58(v1534, *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 48), &v1580, &v1582, a7, v1537 + 1, 0) & 1) != 0|| sub_1C63758D8(v1534, v1586, (uint64_t)v1587, (uint64_t)&v1580, (uint64_t)&v1578, (uint64_t *)a7))
          {
            goto LABEL_2170;
          }
          v421 = *((unsigned int *)v1540 + 2);
          if (v421 > 0x40)
          {
            v422 = (void *)operator new[]();
            memcpy(v422, *(const void **)v1540, ((unint64_t)(v421 + 63) >> 3) & 0x3FFFFFF8);
            v1505 = (uint64_t *)v1582;
            v1506 = (unint64_t)(v421 + 63) >> 6;
            v1507 = v422;
            do
            {
              v1508 = *v1505++;
              *v1507++ &= v1508;
              --v1506;
            }
            while (v1506);
          }
          else
          {
            v422 = (void *)(v1582 & *(_QWORD *)v1540);
          }
          v423 = *((unsigned int *)v1540 + 6);
          if (v423 <= 0x40)
            goto LABEL_663;
          v424 = (void *)operator new[]();
          memcpy(v424, *v1529, ((unint64_t)(v423 + 63) >> 3) & 0x3FFFFFF8);
          v425 = (uint64_t *)v1584;
          v426 = (unint64_t)(v423 + 63) >> 6;
          v427 = v424;
          do
          {
            v428 = *v425++;
            *v427++ &= v428;
            --v426;
          }
          while (v426);
          goto LABEL_664;
        case 192:
          if ((sub_1C6375E58(v1534, *(_QWORD *)(*(_QWORD *)(v28 + 32) + 120), *(_QWORD *)(*(_QWORD *)(v28 + 32) + 128), &v1580, v1540, a7, v1537 + 1, 0) & 1) != 0)goto LABEL_2170;
          v420 = a7;
          if ((sub_1C6375E58(v1534, *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 88), &v1580, &v1582, a7, v1537 + 1, 0) & 1) != 0|| sub_1C63758D8(v1534, v1586, (uint64_t)v1587, (uint64_t)&v1580, (uint64_t)&v1578, (uint64_t *)a7))
          {
            goto LABEL_2170;
          }
          v421 = *((unsigned int *)v1540 + 2);
          if (v421 > 0x40)
          {
            v422 = (void *)operator new[]();
            memcpy(v422, *(const void **)v1540, ((unint64_t)(v421 + 63) >> 3) & 0x3FFFFFF8);
            v1509 = (uint64_t *)v1582;
            v1510 = (unint64_t)(v421 + 63) >> 6;
            v1511 = v422;
            do
            {
              v1512 = *v1509++;
              *v1511++ &= v1512;
              --v1510;
            }
            while (v1510);
          }
          else
          {
            v422 = (void *)(v1582 & *(_QWORD *)v1540);
          }
          v423 = *((unsigned int *)v1540 + 6);
          if (v423 > 0x40)
          {
            v424 = (void *)operator new[]();
            memcpy(v424, *v1529, ((unint64_t)(v423 + 63) >> 3) & 0x3FFFFFF8);
            v1513 = (uint64_t *)v1584;
            v1514 = (unint64_t)(v423 + 63) >> 6;
            v1515 = v424;
            do
            {
              v1516 = *v1513++;
              *v1515++ &= v1516;
              --v1514;
            }
            while (v1514);
          }
          else
          {
LABEL_663:
            v424 = (void *)(v1584 & (unint64_t)*v1529);
          }
LABEL_664:
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(_QWORD *)v1540 = v422;
          *((_DWORD *)v1540 + 2) = v421;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
            MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
          *((_QWORD *)v1540 + 2) = v424;
          *((_DWORD *)v1540 + 6) = v423;
          a7 = v420;
          goto LABEL_934;
        case 193:
          v517 = *(__int128 **)(v28 + 32);
          v1588 = *v517;
          v518 = *((_QWORD *)v517 + 5);
          v519 = *((_QWORD *)v517 + 6);
          v520 = *(_DWORD *)(*((_QWORD *)v517 + 10) + 76);
          if (v1581 > 0x40)
          {
            v521 = v1540;
            if (((*(_QWORD *)(v1580 + 8 * ((v1581 - 1) >> 6)) >> (v1581 - 1)) & 1) == 0)
              goto LABEL_1597;
            v1430 = v1581 - 1;
            if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580) != v1430)
              goto LABEL_1597;
          }
          else
          {
            v521 = v1540;
            if (v1580 != 1 << (v1581 - 1))
              goto LABEL_1597;
          }
          if (sub_1C6329368((unsigned int *)&v1588, (uint64_t)v27, (BOOL)a3) != v1535)
            goto LABEL_1597;
          v522 = (_QWORD *)(*(_QWORD *)(v1588 + 40) + 16 * DWORD2(v1588));
          if (sub_1C6329468((unsigned int *)v1534, *v522, v522[1]) != 2 || v520 != 20)
            goto LABEL_1597;
          v523 = (unsigned __int8 *)(*(_QWORD *)(v518 + 40) + 16 * v519);
          v524 = *v523;
          if (*v523)
          {
            v521 = v1540;
            if ((v524 - 120) >= 0x20
              && (v524 - 2) >= 6
              && (v524 - 15) >= 0x3C)
            {
              goto LABEL_1597;
            }
          }
          else
          {
            v525 = *((_QWORD *)v523 + 1);
            if ((*(_DWORD *)(v525 + 8) & 0xFE) == 0x12)
              v526 = *(unsigned __int8 *)(**(_QWORD **)(v525 + 16) + 8);
            else
              v526 = *(_DWORD *)(v525 + 8);
            v521 = v1540;
            if (v526 != 13)
              goto LABEL_1597;
          }
          if (sub_1C6368AD4(v518) || sub_1C5D3DBE0(v518, 1, v1039))
          {
            v1040 = (int)v1587;
            v1041 = v1588;
            *(_QWORD *)(a7 + 16) = v1586;
            *(_DWORD *)(a7 + 24) = v1040;
            *(_QWORD *)(a7 + 32) = v1041;
            *(_DWORD *)(a7 + 40) = DWORD2(v1041);
            goto LABEL_2170;
          }
LABEL_1597:
          v1037 = (_QWORD *)(*(_QWORD *)(v1588 + 40) + 16 * DWORD2(v1588));
          v1038 = sub_1C6329468((unsigned int *)v1534, *v1037, v1037[1]);
          if (v1535 >= 2 && v1038 == 1)
            sub_1C4912E54(v521, 1u, *((_DWORD *)v521 + 2));
          goto LABEL_934;
        case 198:
        case 206:
          v343 = *(uint64_t **)(v28 + 32);
          v322 = *v343;
          v321 = v343[1];
          *(_OWORD *)v1545 = *(_OWORD *)(*(_QWORD *)(*v343 + 40) + 16 * v321);
          v345 = sub_1C6131328((unsigned __int8 *)v1545, (uint64_t)v27, (BOOL)a3);
          if (LOBYTE(v1545[0]))
          {
            if (LOBYTE(v1545[0]) - 15 >= 0x9C)
            {
LABEL_437:
              v346 = 1;
              goto LABEL_438;
            }
          }
          else if ((*(_DWORD *)(*(_QWORD *)&v1545[2] + 8) & 0xFE) != 0x12)
          {
            goto LABEL_437;
          }
          v346 = sub_1C612FE00((llvm::EVT *)v1545, v344);
LABEL_438:
          v347 = v1534;
          v348 = v1537;
          if (v1581 > 0x40)
          {
            v505 = 0;
            v506 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v506-- < 1;
              if (v96)
                break;
              v507 = *(_QWORD *)(v1580 + 8 * v506);
              v505 += __clz(v507);
            }
            while (!v507);
            v508 = v1581 | 0xFFFFFFC0;
            if ((v1581 & 0x3F) == 0)
              v508 = 0;
            v349 = v505 + v508;
          }
          else
          {
            v349 = v1581 + __clz(v1580) - 64;
          }
          v509 = *(unsigned __int16 *)(v1586 + 24);
          if (v1581 - v349 > v345)
            goto LABEL_674;
          if (v1530 || v509 != 206)
            goto LABEL_1575;
          v510 = v1578;
          if (v1579 < 0x41)
            goto LABEL_687;
          v511 = 0;
          v512 = ((unint64_t)v1579 + 63) >> 6;
          do
          {
            v96 = v512-- < 1;
            if (v96)
              break;
            v513 = *(_QWORD *)&v1578[8 * v512];
            v511 += __clz(v513);
          }
          while (!v513);
          v514 = v1579 | 0xFFFFFFC0;
          if ((v1579 & 0x3F) == 0)
            v514 = 0;
          v347 = v1534;
          v348 = v1537;
          if (v1579 - v511 - v514 <= 0x40)
          {
            v510 = *(char **)v1578;
LABEL_687:
            if (v510 == (char *)1)
            {
              v408 = a7;
              v515 = (_BYTE)v1574
                   ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v1574)
                   : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1574);
              v1021 = v515;
              v1022 = v516;
              v1023 = LOBYTE(v1545[0])
                    ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v1545)
                    : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1545);
              v110 = v1021 == v1023;
              v347 = v1534;
              v348 = v1537;
              if (v110 && v1022 == v1024)
                goto LABEL_1777;
            }
          }
LABEL_1575:
          if (v509 == 206)
            v1013 = 205;
          else
            v1013 = 200;
          v1014 = v1574;
          LODWORD(v58) = (_DWORD)v1535;
          if (!*(_BYTE *)(a7 + 9)
            || (_BYTE)v1574
            && (v1574 == 1 || *(_QWORD *)(v347 + 8 * v1574 + 96))
            && !*(_BYTE *)(v347 + 390 * v1574 + v1013 + 3862))
          {
            goto LABEL_1583;
          }
LABEL_674:
          llvm::APInt::trunc((llvm::APInt *)&v1580, v345, (llvm::APInt *)&v1573);
          if (v1579 < v346)
          {
            llvm::APInt::zext((llvm::APInt *)&v1578, v346, (uint64_t)&v1568);
          }
          else
          {
            LODWORD(v1569) = v1579;
            if (v1579 > 0x40)
            {
              v1568 = (uint64_t **)operator new[]();
              memcpy(v1568, v1578, (((unint64_t)v1569 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1568 = (uint64_t **)v1578;
            }
          }
          v647 = 1 << (v345 - 1);
          if (DWORD2(v1573) > 0x40)
            *(_QWORD *)(v1573 + 8 * ((v345 - 1) >> 6)) |= v647;
          else
            *(_QWORD *)&v1573 = v1573 | v647;
          v648 = v348 + 1;
          v386 = 0;
          if ((sub_1C5D7BE14(v1534, v322, v321, &v1573, &v1568, v1540, a7, v648, 0) & 1) != 0)
            goto LABEL_1484;
          llvm::APInt::sext(v1540, v58, (llvm::APInt *)&v1588);
          llvm::APInt::sext((llvm::APInt *)v1529, v58, (llvm::APInt *)__src);
          v649 = DWORD2(v1588);
          v650 = (char *)v1588;
          v651 = (int)__src[1];
          v652 = __src[0];
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(_QWORD *)v1540 = v650;
          *((_DWORD *)v1540 + 2) = v649;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
          {
            MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
            v649 = *((_DWORD *)v1540 + 2);
            v650 = *(char **)v1540;
          }
          *((_QWORD *)v1540 + 2) = v652;
          *((_DWORD *)v1540 + 6) = v651;
          v653 = (llvm::APInt *)&v650[8 * ((v649 - 1) >> 6)];
          if (v649 < 0x41)
            v653 = v1540;
          if (((*(_QWORD *)v653 >> (v649 - 1)) & 1) != 0
            && (v509 != 206 ? (v654 = 199) : (v654 = 207),
                (v655 = v1574, !*(_BYTE *)(a7 + 9))
             || (_BYTE)v1574
             && (v1574 == 1 || *(_QWORD *)(v1534 + 8 * v1574 + 96))
             && !*(_BYTE *)(v1534 + 390 * v1574 + v654 + 3862)))
          {
            v660 = v1586;
            v661 = (int)v1587;
            v662 = *(_QWORD *)a7;
            v663 = v1575;
            v812 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v812)
              v665 = *(_WORD *)(v812 + 8);
            else
              v665 = 0;
            v658 = v322;
            v659 = v321;
          }
          else
          {
            v656 = sub_1C5D86770((unsigned int *)v1534, v322, v321, (unsigned int *)&v1573, (unsigned int *)&v1568, *(_QWORD *)a7, v648);
            if (!v656)
            {
              v386 = 1;
LABEL_1484:
              if (v1569 >= 0x41 && v1568)
                MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
LABEL_2166:
              if (DWORD2(v1573) >= 0x41)
              {
                v1337 = (void *)v1573;
                if ((_QWORD)v1573)
LABEL_2168:
                  MEMORY[0x1CAA32F9C](v1337, 0x1000C8000313F17);
              }
LABEL_2169:
              if ((v386 & 1) == 0)
                goto LABEL_2170;
              goto LABEL_934;
            }
            v658 = (uint64_t)v656;
            v659 = v657;
            v660 = v1586;
            v661 = (int)v1587;
            v662 = *(_QWORD *)a7;
            v654 = *(unsigned __int16 *)(v1586 + 24);
            v655 = v1574;
            v663 = v1575;
            v664 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v664)
              v665 = *(_WORD *)(v664 + 8);
            else
              v665 = 0;
          }
          v987 = sub_1C5D52060(v662, v654, (const llvm::APInt *)&v1576, v655, v663, v658, v659, v665);
          v386 = 0;
          *(_QWORD *)(a7 + 16) = v660;
          *(_DWORD *)(a7 + 24) = v661;
          *(_QWORD *)(a7 + 32) = v987;
          *(_DWORD *)(a7 + 40) = v988;
          goto LABEL_1484;
        case 199:
        case 207:
          v320 = *(uint64_t **)(v28 + 32);
          v322 = *v320;
          v321 = v320[1];
          *(_OWORD *)v1545 = *(_OWORD *)(*(_QWORD *)(*v320 + 40) + 16 * v321);
          v324 = sub_1C6131328((unsigned __int8 *)v1545, (uint64_t)v27, (BOOL)a3);
          if (LOBYTE(v1545[0]))
          {
            if (LOBYTE(v1545[0]) - 15 >= 0x9C)
            {
LABEL_416:
              v325 = 1;
              goto LABEL_417;
            }
          }
          else if ((*(_DWORD *)(*(_QWORD *)&v1545[2] + 8) & 0xFE) != 0x12)
          {
            goto LABEL_416;
          }
          v325 = sub_1C612FE00((llvm::EVT *)v1545, v323);
LABEL_417:
          v326 = v1534;
          v327 = v1537;
          if (v1581 > 0x40)
          {
            v398 = 0;
            v399 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v399-- < 1;
              if (v96)
                break;
              v400 = *(_QWORD *)(v1580 + 8 * v399);
              v398 += __clz(v400);
            }
            while (!v400);
            v401 = v1581 | 0xFFFFFFC0;
            if ((v1581 & 0x3F) == 0)
              v401 = 0;
            v328 = v398 + v401;
          }
          else
          {
            v328 = v1581 + __clz(v1580) - 64;
          }
          if (v1581 - v328 > v324)
            goto LABEL_542;
          v402 = *(unsigned __int16 *)(v1586 + 24);
          if (v1530 || v402 != 207)
            goto LABEL_1548;
          v403 = v1578;
          if (v1579 < 0x41)
            goto LABEL_555;
          v404 = 0;
          v405 = ((unint64_t)v1579 + 63) >> 6;
          do
          {
            v96 = v405-- < 1;
            if (v96)
              break;
            v406 = *(_QWORD *)&v1578[8 * v405];
            v404 += __clz(v406);
          }
          while (!v406);
          v407 = v1579 | 0xFFFFFFC0;
          if ((v1579 & 0x3F) == 0)
            v407 = 0;
          v326 = v1534;
          v327 = v1537;
          if (v1579 - v404 - v407 <= 0x40)
          {
            v403 = *(char **)v1578;
LABEL_555:
            if (v403 == (char *)1)
            {
              v408 = a7;
              v409 = (_BYTE)v1574
                   ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v1574)
                   : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1574);
              v1009 = v409;
              v1010 = v410;
              v1011 = LOBYTE(v1545[0])
                    ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v1545)
                    : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1545);
              v326 = v1534;
              v327 = v1537;
              if (v1009 == v1011 && v1010 == v1012)
              {
LABEL_1777:
                v1025 = v1586;
                v1026 = (int)v1587;
                v1029 = sub_1C6367DA8(*(_QWORD *)a7, (uint64_t)v1574, v1575, v322, v321);
LABEL_1587:
                *(_QWORD *)(v408 + 16) = v1025;
                *(_DWORD *)(v408 + 24) = v1026;
                *(_QWORD *)(v408 + 32) = v1029;
                v19 = 1;
                *(_DWORD *)(v408 + 40) = v1030;
                goto LABEL_2171;
              }
            }
          }
LABEL_1548:
          if (v402 == 207)
            v1013 = 205;
          else
            v1013 = 200;
          v1014 = v1574;
          if (!*(_BYTE *)(a7 + 9)
            || (_BYTE)v1574
            && (v1574 == 1 || *(_QWORD *)(v326 + 8 * v1574 + 96))
            && !*(_BYTE *)(v326 + 390 * v1574 + v1013 + 3862))
          {
LABEL_1583:
            v1025 = v1586;
            v1026 = (int)v1587;
            v408 = a7;
            v1027 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v1027)
              v1028 = *(_WORD *)(v1027 + 8);
            else
              v1028 = 0;
            v1029 = (uint64_t)sub_1C5D52060(*(_QWORD *)a7, v1013, (const llvm::APInt *)&v1576, v1014, v1575, v322, v321, v1028);
            goto LABEL_1587;
          }
LABEL_542:
          llvm::APInt::trunc((llvm::APInt *)&v1580, v324, (llvm::APInt *)&v1573);
          if (v1579 < v325)
          {
            llvm::APInt::zext((llvm::APInt *)&v1578, v325, (uint64_t)&v1568);
          }
          else
          {
            LODWORD(v1569) = v1579;
            if (v1579 > 0x40)
            {
              v1568 = (uint64_t **)operator new[]();
              memcpy(v1568, v1578, (((unint64_t)v1569 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1568 = (uint64_t **)v1578;
            }
          }
          v635 = v327 + 1;
          v131 = 0;
          if ((sub_1C5D7BE14(v1534, v322, v321, &v1573, &v1568, v1540, a7, v635, 0) & 1) != 0)
            goto LABEL_1262;
          v636 = *((_DWORD *)v1540 + 2);
          llvm::APInt::zext(v1540, v1535, (uint64_t)&v1588);
          sub_1C4912E54(&v1588, v636, DWORD2(v1588));
          v637 = DWORD2(v1588);
          if (DWORD2(v1588) > 0x40)
          {
            v1406 = (((unint64_t)DWORD2(v1588) + 63) >> 3) & 0x3FFFFFF8;
            v638 = (void *)operator new[]();
            memcpy(v638, (const void *)v1588, v1406);
          }
          else
          {
            v638 = (void *)v1588;
          }
          llvm::APInt::zext((llvm::APInt *)v1529, v1535, (uint64_t)__src);
          v639 = (int)__src[1];
          v640 = __src[0];
          LODWORD(__src[1]) = 0;
          if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
            MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(_QWORD *)v1540 = v638;
          *((_DWORD *)v1540 + 2) = v637;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
            MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
          *((_QWORD *)v1540 + 2) = v640;
          *((_DWORD *)v1540 + 6) = v639;
          v641 = sub_1C5D86770((unsigned int *)v1534, v322, v321, (unsigned int *)&v1573, (unsigned int *)&v1568, *(_QWORD *)a7, v635);
          if (!v641)
            goto LABEL_1259;
          v643 = v1586;
          v644 = (int)v1587;
          v645 = *(_QWORD *)(*(_QWORD *)a7 + 832);
          if (v645)
            v646 = *(_WORD *)(v645 + 8);
          else
            v646 = 0;
          goto LABEL_1261;
        case 200:
        case 205:
          v329 = *(uint64_t **)(v28 + 32);
          v331 = *v329;
          v330 = v329[1];
          *(_OWORD *)v1545 = *(_OWORD *)(*(_QWORD *)(*v329 + 40) + 16 * v330);
          v333 = sub_1C6131328((unsigned __int8 *)v1545, (uint64_t)v27, (BOOL)a3);
          if (LOBYTE(v1545[0]))
          {
            if (LOBYTE(v1545[0]) - 15 >= 0x9C)
            {
LABEL_421:
              v334 = 1;
              goto LABEL_422;
            }
          }
          else if ((*(_DWORD *)(*(_QWORD *)&v1545[2] + 8) & 0xFE) != 0x12)
          {
            goto LABEL_421;
          }
          v334 = sub_1C612FE00((llvm::EVT *)v1545, v332);
LABEL_422:
          v335 = v1537;
          if (v1530 || *(_WORD *)(v1586 + 24) != 205)
            goto LABEL_1248;
          v336 = v1578;
          if (v1579 < 0x41)
            goto LABEL_432;
          v337 = 0;
          v338 = ((unint64_t)v1579 + 63) >> 6;
          do
          {
            v96 = v338-- < 1;
            if (v96)
              break;
            v339 = *(_QWORD *)&v1578[8 * v338];
            v337 += __clz(v339);
          }
          while (!v339);
          v340 = v1579 | 0xFFFFFFC0;
          if ((v1579 & 0x3F) == 0)
            v340 = 0;
          if (v1579 - v337 - v340 <= 0x40)
          {
            v336 = *(char **)v1578;
LABEL_432:
            if (v336 == (char *)1)
            {
              v341 = (_BYTE)v1574
                   ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v1574)
                   : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1574);
              v865 = v341;
              v866 = v342;
              v867 = LOBYTE(v1545[0])
                   ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v1545)
                   : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1545);
              v335 = v1537;
              if (v865 == v867 && v866 == v868)
              {
                v719 = v1586;
                v727 = (int)v1587;
                v373 = sub_1C6367DA8(*(_QWORD *)a7, (uint64_t)v1574, v1575, v331, v330);
LABEL_976:
                *(_QWORD *)(a7 + 16) = v719;
                *(_DWORD *)(a7 + 24) = v727;
LABEL_977:
                *(_QWORD *)(a7 + 32) = v373;
                *(_DWORD *)(a7 + 40) = v374;
                goto LABEL_2170;
              }
            }
          }
LABEL_1248:
          llvm::APInt::trunc((llvm::APInt *)&v1580, v333, (llvm::APInt *)&v1573);
          if (v1579 < v334)
          {
            llvm::APInt::zext((llvm::APInt *)&v1578, v334, (uint64_t)&v1568);
            v869 = (llvm::APInt *)v1529;
            v871 = v1540;
            v870 = v1535;
          }
          else
          {
            LODWORD(v1569) = v1579;
            v869 = (llvm::APInt *)v1529;
            v870 = v1535;
            if (v1579 > 0x40)
            {
              v1568 = (uint64_t **)operator new[]();
              memcpy(v1568, v1578, (((unint64_t)v1569 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1568 = (uint64_t **)v1578;
            }
            v871 = v1540;
          }
          v872 = v335 + 1;
          v131 = 0;
          if ((sub_1C5D7BE14(v1534, v331, v330, &v1573, &v1568, v871, a7, v872, 0) & 1) == 0)
          {
            llvm::APInt::zext(v871, v870, (uint64_t)&v1588);
            llvm::APInt::zext(v869, v870, (uint64_t)__src);
            v873 = DWORD2(v1588);
            v874 = v1588;
            v875 = (int)__src[1];
            v876 = __src[0];
            if (*((_DWORD *)v871 + 2) >= 0x41u && *(_QWORD *)v871)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v871, 0x1000C8000313F17);
            *(_QWORD *)v871 = v874;
            *((_DWORD *)v871 + 2) = v873;
            if (*((_DWORD *)v871 + 6) >= 0x41u && *(_QWORD *)v869)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v869, 0x1000C8000313F17);
            *((_QWORD *)v871 + 2) = v876;
            *((_DWORD *)v871 + 6) = v875;
            v641 = sub_1C5D86770((unsigned int *)v1534, v331, v330, (unsigned int *)&v1573, (unsigned int *)&v1568, *(_QWORD *)a7, v872);
            if (v641)
            {
              v643 = v1586;
              v644 = (int)v1587;
              v877 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v877)
                v646 = *(_WORD *)(v877 + 8);
              else
                v646 = 0;
LABEL_1261:
              v878 = sub_1C5D52060(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v641, v642, v646);
              v131 = 0;
              *(_QWORD *)(a7 + 16) = v643;
              *(_DWORD *)(a7 + 24) = v644;
              *(_QWORD *)(a7 + 32) = v878;
              *(_DWORD *)(a7 + 40) = v879;
            }
            else
            {
LABEL_1259:
              v131 = 1;
            }
          }
LABEL_1262:
          if (v1569 >= 0x41 && v1568)
            MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
          if (DWORD2(v1573) >= 0x41)
          {
            v527 = (uint64_t **)v1573;
            if ((_QWORD)v1573)
              goto LABEL_1706;
          }
          goto LABEL_256;
        case 201:
          *(_OWORD *)v1545 = *(_OWORD *)*(_QWORD *)(v28 + 32);
          v385 = sub_1C6329368((unsigned int *)v1545, (uint64_t)v27, (BOOL)a3);
          llvm::APInt::zext((llvm::APInt *)&v1580, v385, (uint64_t)&v1573);
          v386 = 0;
          if ((sub_1C5D7BE14(v1534, *(_QWORD *)v1545, *(_QWORD *)&v1545[2], &v1573, &v1578, v1540, a7, v1537 + 1, 0) & 1) != 0)
            goto LABEL_2166;
          v387 = (unsigned __int8 *)a7;
          llvm::APInt::trunc(v1540, v58, (llvm::APInt *)&v1588);
          llvm::APInt::trunc((llvm::APInt *)v1529, v58, (llvm::APInt *)__src);
          v388 = DWORD2(v1588);
          v389 = v1588;
          v390 = (int)__src[1];
          v391 = __src[0];
          if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
          *(_QWORD *)v1540 = v389;
          *((_DWORD *)v1540 + 2) = v388;
          if (*((_DWORD *)v1540 + 6) >= 0x41u && *v1529)
            MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
          *((_QWORD *)v1540 + 2) = v391;
          *((_DWORD *)v1540 + 6) = v390;
          v392 = sub_1C5D86770((unsigned int *)v1534, *(uint64_t *)v1545, *(_BOOL8 *)&v1545[2], (unsigned int *)&v1573, (unsigned int *)&v1578, *(_QWORD *)a7, v1537 + 1);
          if (v392)
          {
            v395 = v1586;
            v394 = (int)v1587;
            v396 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v396)
              v397 = *(_WORD *)(v396 + 8);
            else
              v397 = 0;
            v953 = sub_1C5D52060(*(_QWORD *)a7, 201, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v392, v393, v397);
            v386 = 0;
            *(_QWORD *)(a7 + 16) = v395;
            *(_DWORD *)(a7 + 24) = v394;
            *(_QWORD *)(a7 + 32) = v953;
            *(_DWORD *)(a7 + 40) = v954;
            goto LABEL_2166;
          }
          v836 = *(_QWORD *)v1545;
          v837 = *(_QWORD *)(*(_QWORD *)v1545 + 48);
          if (!v837 || *(_QWORD *)(v837 + 32) || *(_WORD *)(*(_QWORD *)v1545 + 24) != 177)
            goto LABEL_2164;
          if (!*(_BYTE *)(a7 + 8))
            goto LABEL_1171;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, llvm *, uint64_t))(*(_QWORD *)v1534 + 1744))(v1534, 177, v1574, v1575))goto LABEL_2164;
          v836 = *(_QWORD *)v1545;
LABEL_1171:
          v838 = sub_1C5D4E50C(*(_QWORD *)a7, v836, *(_BOOL8 *)&v1545[2], (llvm::APInt *)&v1578);
          if (!v838)
            goto LABEL_2164;
          v839 = (unint64_t **)v838;
          v840 = *((_DWORD *)v838 + 2);
          if (v840 >= 0x41)
          {
            if (v840 - llvm::APInt::countLeadingZerosSlowCase(v838) >= 0x41)
              goto LABEL_2164;
            v841 = **v839;
          }
          else
          {
            v841 = *(_QWORD *)v838;
          }
          if (v841 >= (unint64_t)v1535)
            goto LABEL_2164;
          v1278 = (_DWORD)v1535 - v385;
          DWORD2(v1588) = v385;
          if (v385 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
            v385 = DWORD2(v1588);
          }
          else
          {
            *(_QWORD *)&v1588 = 0;
          }
          sub_1C4912E54(&v1588, v1278 + v385, v385);
          if (DWORD2(v1588) > 0x40)
          {
            llvm::APInt::tcShiftRight((llvm::APInt *)v1588, (unint64_t *)(((unint64_t)DWORD2(v1588) + 63) >> 6), v841);
          }
          else if (DWORD2(v1588) == (_DWORD)v841)
          {
            *(_QWORD *)&v1588 = 0;
          }
          else
          {
            *(_QWORD *)&v1588 = (unint64_t)v1588 >> v841;
          }
          llvm::APInt::trunc((llvm::APInt *)&v1588, v1535, (llvm::APInt *)__src);
          if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
            MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
          *(void **)&v1588 = __src[0];
          v1362 = (int)__src[1];
          DWORD2(v1588) = __src[1];
          if (LODWORD(__src[1]) >= 0x41)
          {
            v1364 = LODWORD(__src[1]) + 63;
            v1365 = (char *)operator new[]();
            memcpy(v1365, (const void *)v1588, (v1364 >> 3) & 0x3FFFFFF8);
            v1366 = 0;
            v1367 = (_QWORD *)v1580;
            v1368 = v1364 >> 6;
            do
            {
              *(_QWORD *)&v1365[v1366 * 8] &= v1367[v1366];
              ++v1366;
            }
            while (v1364 >> 6 != v1366);
            v1369 = 0;
            do
            {
              v96 = v1368-- < 1;
              if (v96)
                break;
              v1370 = *(_QWORD *)&v1365[8 * v1368];
              v1369 += __clz(v1370);
            }
            while (!v1370);
            v1371 = v1362 | 0xFFFFFFC0;
            if ((v1362 & 0x3F) == 0)
              v1371 = 0;
            v1372 = v1369 + v1371;
            MEMORY[0x1CAA32F9C](v1365, 0x1000C8000313F17);
            v1363 = 0;
            if (v1372 != v1362)
            {
LABEL_2159:
              if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
              if ((v1363 & 1) != 0)
              {
                v386 = 0;
LABEL_2165:
                a7 = (uint64_t)v387;
                goto LABEL_2166;
              }
LABEL_2164:
              v386 = 1;
              goto LABEL_2165;
            }
          }
          else if ((v1580 & (unint64_t)__src[0]) != 0)
          {
            v1363 = 0;
            goto LABEL_2159;
          }
          v1391 = *(_QWORD *)v387;
          v1392 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1534, (uint64_t)v1574, v1575, v61, v387[8]);
          v1394 = sub_1C6366AB4(v1391, v841, (const llvm::APInt *)&v1576, v1392, v1393, 0, 0);
          v1396 = v1395;
          v1397 = *(uint64_t **)(*(_QWORD *)v1545 + 32);
          v1398 = *v1397;
          v1399 = v1397[1];
          v1400 = *(_QWORD *)(*(_QWORD *)v387 + 832);
          if (v1400)
            v1401 = *(_WORD *)(v1400 + 8);
          else
            v1401 = 0;
          v1408 = sub_1C5D52060(*(_QWORD *)v387, 201, (const llvm::APInt *)&v1576, v1574, v1575, v1398, v1399, v1401);
          v1411 = v1586;
          v1410 = (int)v1587;
          v1412 = *(_QWORD *)(*(_QWORD *)v387 + 832);
          if (v1412)
            LOWORD(v1412) = *(_WORD *)(v1412 + 8);
          v1413 = sub_1C5D56C70(*(_QWORD *)v387, 177, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1408, v1407, v1409, (uint64_t)v1394, v1396, v1412);
          *((_QWORD *)v387 + 2) = v1411;
          *((_DWORD *)v387 + 6) = v1410;
          *((_QWORD *)v387 + 4) = v1413;
          *((_DWORD *)v387 + 10) = v1414;
          v1363 = 1;
          goto LABEL_2159;
        case 204:
          v411 = *(_QWORD *)(v28 + 32);
          v413 = *(uint64_t **)v411;
          v412 = *(_QWORD *)(v411 + 8);
          v1588 = *(_OWORD *)(*(_QWORD *)(v411 + 40) + 80);
          v414 = sub_1C6131328((unsigned __int8 *)&v1588, (uint64_t)v27, (BOOL)a3);
          v415 = v1581;
          if (v1581 > 0x40)
          {
            v1415 = a7;
            v1417 = (_QWORD *)v1580;
            if (((*(_QWORD *)(v1580 + 8 * ((v1581 - 1) >> 6)) >> (v1581 - 1)) & 1) == 0)
            {
LABEL_2274:
              a7 = v1415;
              goto LABEL_2275;
            }
            v1416 = v1581 - 1;
            v110 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580) == v1416;
            a7 = v1415;
            if (!v110)
            {
LABEL_2275:
              v1418 = 0;
              v1419 = ((unint64_t)v415 + 63) >> 6;
              do
              {
                v96 = v1419-- < 1;
                if (v96)
                  break;
                v1420 = v1417[v1419];
                v1418 += __clz(v1420);
              }
              while (!v1420);
              v1421 = v415 | 0xFFFFFFC0;
              if ((v415 & 0x3F) == 0)
                v1421 = 0;
              v417 = v1418 + v1421;
LABEL_561:
              if (v415 - v417 <= v414)
              {
                v418 = v1586;
                v419 = (int)v1587;
LABEL_563:
                *(_QWORD *)(a7 + 16) = v418;
                *(_DWORD *)(a7 + 24) = v419;
                *(_QWORD *)(a7 + 32) = v413;
                v19 = 1;
                *(_DWORD *)(a7 + 40) = v412;
                goto LABEL_2171;
              }
              LODWORD(__src[1]) = v415;
              if (v415 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
              else
                __src[0] = 0;
              sub_1C4912E54(__src, 0, v414);
              if (LODWORD(__src[1]) > 0x40)
              {
                v1402 = __src[0];
                v1403 = (uint64_t *)v1580;
                v1404 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
                do
                {
                  v1405 = *v1403++;
                  *v1402++ &= v1405;
                  --v1404;
                }
                while (v1404);
                v1042 = v414 - 1;
                v1043 = 1 << (v414 - 1);
                *((_QWORD *)__src[0] + ((v414 - 1) >> 6)) |= v1043;
              }
              else
              {
                v1042 = v414 - 1;
                v1043 = 1 << (v414 - 1);
                __src[0] = (void *)((unint64_t)__src[0] & v1580 | v1043);
              }
              v386 = 0;
              if ((sub_1C6375E58(v1534, v413, v412, __src, v1540, a7, v1537 + 1, 0) & 1) != 0)
              {
LABEL_2071:
                if (LODWORD(__src[1]) >= 0x41)
                {
                  v1337 = __src[0];
                  if (__src[0])
                    goto LABEL_2168;
                }
                goto LABEL_2169;
              }
              v1044 = v1042 >> 6;
              if (*((_DWORD *)v1540 + 2) >= 0x41u)
                v1045 = (llvm::APInt *)(*(_QWORD *)v1540 + 8 * v1044);
              else
                v1045 = v1540;
              if ((*(_QWORD *)v1045 & v1043) != 0)
              {
                v1046 = v1586;
                v1047 = (int)v1587;
                v1048 = sub_1C5D3F9A0(*(_QWORD *)a7, (uint64_t)v413, v412, (const llvm::APInt *)&v1576, v1588, *((uint64_t *)&v1588 + 1));
                v386 = 0;
                *(_QWORD *)(a7 + 16) = v1046;
                *(_DWORD *)(a7 + 24) = v1047;
                *(_QWORD *)(a7 + 32) = v1048;
                *(_DWORD *)(a7 + 40) = v1049;
                goto LABEL_2071;
              }
              v1545[2] = (int)v1535;
              if (v1535 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)v1545, 0, 0);
              else
                *(_QWORD *)v1545 = 0;
              sub_1C4912E54(v1545, 0, v414);
              a3 = (const llvm::KnownBits *)*((unsigned int *)v1540 + 6);
              v1227 = (_QWORD *)(*((_QWORD *)v1540 + 2) + 8 * v1044);
              if (a3 < 0x41)
                v1227 = v1529;
              if ((*v1227 & v1043) != 0)
              {
                sub_1C4912E54(v1529, v414, a3);
                v1228 = v1540;
                v1229 = *((unsigned int *)v1540 + 2);
                if (v1229 >= 0x41)
                {
                  v1230 = *(_QWORD **)v1540;
                  v1231 = *(uint64_t **)v1545;
                  v1232 = (unint64_t)(v1229 + 63) >> 6;
                  do
                  {
                    v1233 = *v1231++;
                    *v1230++ &= v1233;
                    --v1232;
                  }
                  while (v1232);
                  goto LABEL_2067;
                }
              }
              else
              {
                v1306 = *((unsigned int *)v1540 + 2);
                if (v1306 > 0x40)
                {
                  v1329 = *(_QWORD **)v1540;
                  v1330 = *(uint64_t **)v1545;
                  v1331 = (unint64_t)(v1306 + 63) >> 6;
                  do
                  {
                    v1332 = *v1330++;
                    *v1329++ &= v1332;
                    --v1331;
                  }
                  while (v1331);
                }
                else
                {
                  *(_QWORD *)v1540 &= *(_QWORD *)v1545;
                }
                v1228 = v1529;
                if (a3 >= 0x41)
                {
                  v1333 = *v1529;
                  v1334 = *(uint64_t **)v1545;
                  v1335 = ((unint64_t)a3 + 63) >> 6;
                  do
                  {
                    v1336 = *v1334++;
                    *v1333++ &= v1336;
                    --v1335;
                  }
                  while (v1335);
                  goto LABEL_2067;
                }
              }
              *v1228 &= *(_QWORD *)v1545;
LABEL_2067:
              if (v1545[2] >= 0x41u && *(_QWORD *)v1545)
                MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
              v386 = 1;
              goto LABEL_2071;
            }
          }
          else
          {
            v416 = v1580;
            if (v1580 != 1 << (v1581 - 1))
            {
LABEL_560:
              v417 = v415 + __clz(v416) - 64;
              goto LABEL_561;
            }
          }
          v1415 = a7;
          if (sub_1C6368C68(*(_QWORD *)a7, (uint64_t)v413, v412, (unsigned int *)&v1578, v1537 + 1) > v414)
          {
            v1422 = *(_QWORD *)a7;
            v1423 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1534, (uint64_t)v1574, v1575, v61, 1);
            v1425 = sub_1C6366AB4(v1422, v1535 - v414, (const llvm::APInt *)&v1576, v1423, v1424, 0, 0);
            v418 = v1586;
            v419 = (int)v1587;
            v1428 = *(_QWORD *)(*(_QWORD *)a7 + 832);
            if (v1428)
              LOWORD(v1428) = *(_WORD *)(v1428 + 8);
            v413 = sub_1C5D56C70(*(_QWORD *)a7, 175, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v413, v412, v1427, (uint64_t)v1425, v1426, v1428);
            LODWORD(v412) = v1429;
            goto LABEL_563;
          }
          v415 = v1581;
          if (v1581 <= 0x40)
          {
            v416 = v1580;
            goto LABEL_560;
          }
          v1417 = (_QWORD *)v1580;
          goto LABEL_2274;
        case 216:
          v451 = *(uint64_t **)(v28 + 32);
          v452 = *v451;
          v453 = v451[1];
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*v451 + 40) + 16 * v453);
          v455 = sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v27, (BOOL)a3);
          if (*(_BYTE *)(a7 + 9))
            goto LABEL_588;
          v193 = a7;
          if ((_BYTE)v1574)
          {
            LODWORD(v58) = (_DWORD)v1535;
            if (v1574 - 15 < 0x9C)
              goto LABEL_588;
          }
          else
          {
            LODWORD(v58) = (_DWORD)v1535;
            if ((*(_DWORD *)(v1575 + 8) & 0xFE) == 0x12)
              goto LABEL_588;
          }
          v456 = LOBYTE(__src[0]);
          if (LOBYTE(__src[0]))
          {
            LODWORD(v58) = (_DWORD)v1535;
            if (LOBYTE(__src[0]) - 15 < 0x9C)
              goto LABEL_589;
          }
          else
          {
            LODWORD(v58) = (_DWORD)v1535;
            if ((*((_DWORD *)__src[1] + 2) & 0xFE) == 0x12)
              goto LABEL_588;
          }
          v1015 = sub_1C6131A64((unsigned int *)&v1586);
          if ((_DWORD)v454 == 1)
          DWORD2(v1588) = v1015;
          if (v1015 > 0x40)
          {
            v1017 = &v1588;
            llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
            v1016 = v1015 - 1;
            if (DWORD2(v1588) >= 0x41)
              v1017 = (__int128 *)(v1588 + 8 * (v1016 >> 6));
            v1015 = DWORD2(v1588);
          }
          else
          {
            *(_QWORD *)&v1588 = 0;
            LOBYTE(v1016) = v1015 - 1;
            v1017 = &v1588;
          }
          *(_QWORD *)v1017 |= 1 << v1016;
          if (v1581 > 0x40)
          {
            v1018 = v1588;
            if (!memcmp((const void *)v1580, (const void *)v1588, (((unint64_t)v1581 + 63) >> 3) & 0x3FFFFFF8))
            {
LABEL_1564:
              if (LOBYTE(__src[0]))
              {
                v1019 = 1;
                if (LOBYTE(__src[0]) - 8 < 7 || (LOBYTE(__src[0]) - 75) < 0x2Du)
                {
LABEL_2113:
                  if (v1015 >= 0x41 && v1018)
                    MEMORY[0x1CAA32F9C](v1018, 0x1000C8000313F17);
                  LODWORD(v58) = (_DWORD)v1535;
                  if (v1019)
                  {
                    if ((_BYTE)v1574)
                    {
                      if (v1574 == 1
                        || (v1347 = 0, *(_QWORD *)(v1534 + 8 * v1574 + 96)))
                      {
                        v1347 = (*(_BYTE *)(v1534 + 390 * v1574 + 4006) & 0xFB) == 0;
                      }
                    }
                    else
                    {
                      v1347 = 0;
                    }
                    v1348 = *(_QWORD *)(v1534 + 136);
                    if (v1348)
                      LODWORD(v1348) = (*(_BYTE *)(v1534 + 5956) & 0xFB) == 0;
                    LODWORD(v58) = (_DWORD)v1535;
                    if ((_BYTE)v1574)
                    {
                      if (v1347 | v1348)
                      {
                        v456 = LOBYTE(__src[0]);
                        if ((LOBYTE(__src[0]) | 4) != 0xD)
                        {
                          v1349 = 0;
                          v1350 = *(_QWORD *)a7;
                          if (v1347)
                            v1351 = (uint64_t)v1574;
                          else
                            v1351 = 5;
                          if (v1347)
                            v1352 = v1575;
                          else
                            v1352 = 0;
                          v1353 = *(_QWORD *)(v1350 + 832);
                          if (v1353)
                            v1349 = *(_WORD *)(v1353 + 8);
                          v1354 = sub_1C5D52060(v1350, 144, (const llvm::APInt *)&v1576, (llvm *)v1351, v1352, v452, v453, v1349);
                          v1356 = v1355;
                          v1358 = sub_1C6131A64((unsigned int *)&v1586);
                          if ((_DWORD)v1357 == 1)
                          v1359 = v1358 < 0x21 || v1347;
                          if ((v1359 & 1) == 0)
                          {
                            v1360 = *(_QWORD *)(*(_QWORD *)v193 + 832);
                            if (v1360)
                              v1361 = *(_WORD *)(v1360 + 8);
                            else
                              v1361 = 0;
                            v1354 = sub_1C5D52060(*(_QWORD *)v193, 199, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1354, v1356, v1361);
                            v1356 = v1356 & 0xFFFFFFFF00000000 | v1431;
                          }
                          v1433 = sub_1C6131A64((unsigned int *)&v1586);
                          if ((_DWORD)v1432 == 1)
                          v1434 = sub_1C6366AB4(*(_QWORD *)v193, v1433 - 1, (const llvm::APInt *)&v1576, v1574, v1575, 0, 0);
                          v1438 = v1586;
                          v1437 = (int)v1587;
                          v1439 = *(_QWORD *)(*(_QWORD *)v193 + 832);
                          if (v1439)
                            LOWORD(v1439) = *(_WORD *)(v1439 + 8);
                          v285 = sub_1C5D56C70(*(_QWORD *)v193, 175, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1354, v1356, v1436, (uint64_t)v1434, v1435, v1439);
                          *(_QWORD *)(v193 + 16) = v1438;
                          *(_DWORD *)(v193 + 24) = v1437;
                          goto LABEL_361;
                        }
                        goto LABEL_589;
                      }
                    }
                  }
LABEL_588:
                  v456 = LOBYTE(__src[0]);
                  if (!LOBYTE(__src[0]))
                  {
                    v457 = 1;
                    v458 = 1;
                    if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12)
                    {
LABEL_1060:
                      if (v1530)
                        goto LABEL_1062;
                      v790 = v455 / v58;
                      if (v455 % v58)
                        goto LABEL_1062;
                      if ((v458 & 1) != 0)
                      {
                        if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12)
                        {
LABEL_1275:
                          v880 = 1;
                          goto LABEL_1276;
                        }
                      }
                      else if ((v456 - 15) >= 0x9C)
                      {
                        goto LABEL_1275;
                      }
                      v880 = sub_1C612FE00((llvm::EVT *)__src, v454);
LABEL_1276:
                      v1545[2] = v455;
                      if (v455 > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)v1545, 0, 0);
                      else
                        *(_QWORD *)v1545 = 0;
                      DWORD2(v1573) = v880;
                      if (v880 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v1573, 0, 0);
                        if (!(_DWORD)v20)
                          goto LABEL_1289;
                      }
                      else
                      {
                        *(_QWORD *)&v1573 = 0;
                        if (!(_DWORD)v20)
                          goto LABEL_1289;
                      }
                      v881 = 0;
                      v882 = DWORD2(v1573);
                      do
                      {
                        if (v1579 >= 0x41)
                          v883 = &v1578[8 * (v881 >> 6)];
                        else
                          v883 = (char *)&v1578;
                        if (((*(_QWORD *)v883 >> v881) & 1) != 0)
                        {
                          llvm::APInt::insertBits((void **)v1545, (const llvm::APInt *)&v1580, v881 % v790 * (_DWORD)v1535);
                          v884 = 1 << (v881 / v790);
                          if (v882 > 0x40)
                            *(_QWORD *)(v1573 + 8 * ((v881 / v790) >> 6)) |= v884;
                          else
                            *(_QWORD *)&v1573 = v1573 | v884;
                        }
                        ++v881;
                      }
                      while ((_DWORD)v20 != v881);
LABEL_1289:
                      if (LOBYTE(__src[0]))
                      {
                        if (LOBYTE(__src[0]) - 15 >= 0x9C)
                          goto LABEL_1669;
                      }
                      else if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12)
                      {
                        goto LABEL_1669;
                      }
                      DWORD2(v1588) = 1;
                      *(_QWORD *)&v1588 = 0;
                      LODWORD(v1569) = 1;
                      v1568 = 0;
                      v1077 = sub_1C5D88238((unsigned int *)v1534, v452, v453, (uint64_t)&v1573, &v1588, &v1568, a7, v1537 + 1, 0);
                      if (v1569 >= 0x41 && v1568)
                        MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
                      if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                        MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
                      if ((v1077 & 1) != 0)
                      {
                        v1078 = 1;
                        goto LABEL_1671;
                      }
LABEL_1669:
                      DWORD2(v1588) = 1;
                      *(_QWORD *)&v1588 = 0;
                      v1590 = 1;
                      v1589 = 0;
                      LOBYTE(v1517) = 0;
                      v1078 = sub_1C5D7BE14(v1534, v452, v453, v1545, &v1573, &v1588, a7, v1537 + 1, v1517);
                      if (v1590 >= 0x41 && v1589)
                        MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
                      if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                        MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
LABEL_1671:
                      if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
                        MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
                      if (v1545[2] >= 0x41u && *(_QWORD *)v1545)
                        MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
                      if (v1078)
                        goto LABEL_2170;
                      goto LABEL_1062;
                    }
                    goto LABEL_1059;
                  }
LABEL_589:
                  v457 = 0;
                  v458 = 0;
                  if ((v456 - 15) >= 0x9C)
                    goto LABEL_1060;
LABEL_1059:
                  v789 = v58 / v455;
                  v458 = v457;
                  if (v58 % v455)
                    goto LABEL_1060;
                  v1528 = a7;
                  v1107 = sub_1C612FE00((llvm::EVT *)__src, v454);
                  v1545[2] = v455;
                  if (v455 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)v1545, 0, 0);
                  else
                    *(_QWORD *)v1545 = 0;
                  DWORD2(v1573) = v1107;
                  if (v1107 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1573, 0, 0);
                  else
                    *(_QWORD *)&v1573 = 0;
                  if (v1535 >= v455)
                  {
                    v1108 = 0;
                    v1109 = v1545[2];
                    v1536 = ((unint64_t)v1545[2] + 63) >> 6;
                    v1110 = DWORD2(v1573);
                    while (1)
                    {
                      v1111 = v789 + ~v1108;
                      if (!v1530)
                        v1111 = v1108;
                      llvm::APInt::extractBits((llvm::APInt *)&v1580, v455, v1111 * v455, (unsigned int *)&v1588);
                      v1112 = DWORD2(v1588);
                      if (DWORD2(v1588) > 0x40)
                        break;
                      v1113 = v1588;
                      if ((_QWORD)v1588)
                        goto LABEL_1739;
LABEL_1756:
                      if (++v1108 == v789)
                        goto LABEL_1757;
                    }
                    v1114 = 0;
                    v1115 = ((unint64_t)DWORD2(v1588) + 63) >> 6;
                    v1113 = v1588;
                    do
                    {
                      v96 = v1115-- < 1;
                      if (v96)
                        break;
                      v1116 = *(_QWORD *)(v1588 + 8 * v1115);
                      v1114 += __clz(v1116);
                    }
                    while (!v1116);
                    v1117 = DWORD2(v1588) | 0xFFFFFFC0;
                    if ((BYTE8(v1588) & 0x3F) == 0)
                      v1117 = 0;
                    if (v1114 + v1117 != DWORD2(v1588))
                    {
LABEL_1739:
                      if (v1109 > 0x40)
                      {
                        v1118 = *(_QWORD **)v1545;
                        v1119 = v1536;
                        do
                        {
                          v1120 = *(_QWORD *)v1113;
                          v1113 += 8;
                          *v1118++ |= v1120;
                          --v1119;
                        }
                        while (v1119);
                      }
                      else
                      {
                        *(_QWORD *)v1545 |= v1113;
                      }
                      if ((_DWORD)v20)
                      {
                        v1121 = 0;
                        v1122 = v1579;
                        do
                        {
                          v1123 = &v1578[8 * (v1121 >> 6)];
                          if (v1122 < 0x41)
                            v1123 = (char *)&v1578;
                          if (((*(_QWORD *)v1123 >> v1121) & 1) != 0)
                          {
                            v1124 = 1 << (v1108 + v1121 * v789);
                            if (v1110 > 0x40)
                              *(_QWORD *)(v1573 + 8 * ((v1108 + v1121 * v789) >> 6)) |= v1124;
                            else
                              *(_QWORD *)&v1573 = v1573 | v1124;
                          }
                          ++v1121;
                        }
                        while ((_DWORD)v20 != v1121);
                      }
                      if (v1112 < 0x41)
                        goto LABEL_1756;
                      v1113 = v1588;
                    }
                    if (v1113)
                      MEMORY[0x1CAA32F9C](v1113, 0x1000C8000313F17);
                    goto LABEL_1756;
                  }
LABEL_1757:
                  v1125 = 1;
                  LODWORD(v1569) = 1;
                  v1568 = 0;
                  LODWORD(v1567) = 1;
                  v1566 = 0;
                  if ((sub_1C5D88238((unsigned int *)v1534, v452, v453, (uint64_t)&v1573, &v1568, &v1566, v1528, v1537 + 1, 0) & 1) == 0)
                  {
                    DWORD2(v1588) = 1;
                    *(_QWORD *)&v1588 = 0;
                    v1590 = 1;
                    v1589 = 0;
                    LOBYTE(v1522) = 0;
                    v1125 = sub_1C5D7BE14(v1534, v452, v453, v1545, &v1573, &v1588, v1528, v1537 + 1, v1522);
                    if (v1590 >= 0x41 && v1589)
                      MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
                    if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
                      MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
                  }
                  if (v1567 >= 0x41 && v1566)
                    MEMORY[0x1CAA32F9C](v1566, 0x1000C8000313F17);
                  if (v1569 >= 0x41 && v1568)
                    MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
                  if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
                    MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
                  if (v1545[2] >= 0x41u && *(_QWORD *)v1545)
                    MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
                  a7 = v1528;
                  if (v1125)
                    goto LABEL_2170;
LABEL_1062:
                  if (!v1537)
                    goto LABEL_934;
                  sub_1C5D44BD8(*(_QWORD *)a7, v1586, (_BOOL8)v1587, (llvm::APInt *)&v1578, v1537, (uint64_t)&v1588);
                  v116 = v1540;
                  if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
                    MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
                  *(_QWORD *)v1540 = v1588;
                  *((_DWORD *)v1540 + 2) = DWORD2(v1588);
                  DWORD2(v1588) = 0;
                  if (*((_DWORD *)v1540 + 6) < 0x41u || (v791 = *v1529) == 0)
                  {
LABEL_151:
                    *((_QWORD *)v116 + 2) = v1589;
                    *((_DWORD *)v116 + 6) = v1590;
                    goto LABEL_974;
                  }
LABEL_2098:
                  MEMORY[0x1CAA32F9C](v791, 0x1000C8000313F17);
                  v1346 = DWORD2(v1588);
                  *((_QWORD *)v116 + 2) = v1589;
                  *((_DWORD *)v116 + 6) = v1590;
                  v1590 = 0;
                  if (v1346 >= 0x41 && (_QWORD)v1588)
                    MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
                  goto LABEL_974;
                }
                v1020 = (LOBYTE(__src[0]) + 104) >= 0x13u;
              }
              else
              {
                if ((*((_DWORD *)__src[1] + 2) & 0xFE) == 0x12)
                  v1341 = *(unsigned __int8 *)(**((_QWORD **)__src[1] + 2) + 8);
                else
                  v1341 = *((_DWORD *)__src[1] + 2);
                v1020 = v1341 >= 7;
              }
              v1019 = !v1020;
              goto LABEL_2113;
            }
          }
          else
          {
            v1018 = v1588;
            if (v1580 == (_QWORD)v1588)
              goto LABEL_1564;
          }
          v1019 = 0;
          goto LABEL_2113;
        default:
          if (v29 != 58)
          {
            if (v29 != 253)
              goto LABEL_218;
            if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1534 + 1688))(v1534, v28))
            {
              if (*(_WORD *)(v1586 + 24) == 253 && (~*(unsigned __int16 *)(v1586 + 26) & 0xC00) == 0 && !(_DWORD)v1587)
              {
                v1588 = *(_OWORD *)(v28 + 80);
                v267 = sub_1C6131328((unsigned __int8 *)&v1588, v74, (BOOL)a3);
                sub_1C4912E54(v1540, v267, *((_DWORD *)v1540 + 2));
                goto LABEL_974;
              }
              goto LABEL_934;
            }
            v75 = *(_QWORD *)a7;
            v76 = v1586;
            v77 = (uint64_t)v1587;
LABEL_149:
            sub_1C5D44BD8(v75, v76, v77, (llvm::APInt *)&v1578, v1537, (uint64_t)&v1588);
            v116 = v1540;
            if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
            *(_QWORD *)v1540 = v1588;
            *((_DWORD *)v1540 + 2) = DWORD2(v1588);
            DWORD2(v1588) = 0;
            if (*((_DWORD *)v1540 + 6) < 0x41u)
              goto LABEL_151;
            v791 = *v57;
            if (!*v57)
              goto LABEL_151;
            goto LABEL_2098;
          }
          if (v1581 > 0x40)
          {
            v244 = 0;
            v245 = ((unint64_t)v1581 + 63) >> 6;
            v246 = (int8x8_t *)v1580;
            do
            {
              v247 = *v246++;
              v248 = (uint8x8_t)vcnt_s8(v247);
              v248.i16[0] = vaddlv_u8(v248);
              v244 += v248.i32[0];
              --v245;
            }
            while (v245);
            v66 = (uint64_t *)v1534;
            v67 = v1537;
            if (v244 == 1)
            {
              v217 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1580);
LABEL_311:
              v249 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v28 + 32) + 48), (llvm::APInt *)&v1578, 0, 0);
              if (v249)
              {
                v250 = *(_QWORD *)(v249 + 80);
                v251 = (unint64_t **)(v250 + 24);
                v252 = *(_DWORD *)(v250 + 32);
                if (v252 > 0x40)
                {
                  v254 = llvm::APInt::countTrailingZerosSlowCase(v251);
                }
                else
                {
                  v253 = __clz(__rbit64((unint64_t)*v251));
                  v254 = v252 >= v253 ? v253 : v252;
                }
                if (v254 == v217)
                {
                  v802 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v66, (uint64_t)v1574, v1575, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a7 + 40) + 40) + 272, 1);
                  v804 = sub_1C6366AB4(*(_QWORD *)a7, v217, (const llvm::APInt *)&v1576, v802, v803, 0, 0);
                  v309 = a7;
                  v807 = *(uint64_t **)(v1586 + 32);
                  v808 = *v807;
                  v809 = v807[1];
                  v810 = *(_QWORD *)(*(_QWORD *)a7 + 832);
                  if (v810)
                    LOWORD(v810) = *(_WORD *)(v810 + 8);
                  v314 = sub_1C5D56C70(*(_QWORD *)a7, 175, (const llvm::APInt *)&v1576, v1574, v1575, v808, v809, v806, (uint64_t)v804, v805, v810);
                  goto LABEL_1899;
                }
              }
            }
          }
          else
          {
            v215 = (uint8x8_t)vcnt_s8((int8x8_t)v1580);
            v215.i16[0] = vaddlv_u8(v215);
            v66 = (uint64_t *)v1534;
            v67 = v1537;
            if (v215.u32[0] == 1)
            {
              v216 = __clz(__rbit64(v1580));
              if (v1581 >= v216)
                v217 = v216;
              else
                v217 = v1581;
              goto LABEL_311;
            }
          }
          v28 = v1586;
          v300 = *(_QWORD *)(v1586 + 32);
          if (*(_QWORD *)v300 != *(_QWORD *)(v300 + 40) || *(_DWORD *)(v300 + 8) != *(_DWORD *)(v300 + 48))
            goto LABEL_94;
          v301 = (_QWORD *)v1580;
          if (v1581 >= 0x41)
          {
            v302 = 0;
            v303 = ((unint64_t)v1581 + 63) >> 6;
            do
            {
              v96 = v303-- < 1;
              if (v96)
                break;
              v304 = *(_QWORD *)(v1580 + 8 * v303);
              v302 += __clz(v304);
            }
            while (!v304);
            v305 = v1581 | 0xFFFFFFC0;
            if ((v1581 & 0x3F) == 0)
              v305 = 0;
            if (v1581 - v302 - v305 > 0x40)
              goto LABEL_94;
            v301 = *(_QWORD **)v1580;
          }
          if ((unint64_t)v301 > 3)
            goto LABEL_94;
          v306 = sub_1C6366AB4(*(_QWORD *)a7, 1, (const llvm::APInt *)&v1576, v1574, v1575, 0, 0);
          v309 = a7;
          v310 = *(uint64_t **)(v1586 + 32);
          v311 = *v310;
          v312 = v310[1];
          v313 = *(_QWORD *)(*(_QWORD *)a7 + 832);
          if (v313)
            LOWORD(v313) = *(_WORD *)(v313 + 8);
          v314 = sub_1C5D56C70(*(_QWORD *)a7, 171, (const llvm::APInt *)&v1576, v1574, v1575, v311, v312, v308, (uint64_t)v306, v307, v313);
          goto LABEL_1899;
      }
    }
    if ((v29 - 56) < 2)
    {
      v66 = (uint64_t *)v1534;
      v67 = v1537;
LABEL_94:
      v68 = *(__int128 **)(v28 + 32);
      v1588 = *v68;
      *(_OWORD *)__src = *(__int128 *)((char *)v68 + 40);
      v69 = *(_WORD *)(v28 + 72);
      if (v1581 > 0x40)
      {
        v94 = 0;
        v95 = ((unint64_t)v1581 + 63) >> 6;
        do
        {
          v96 = v95-- < 1;
          if (v96)
            break;
          v97 = *(_QWORD *)(v1580 + 8 * v95);
          v94 += __clz(v97);
        }
        while (!v97);
        if ((v1581 & 0x3F) != 0)
          v98 = v1581 | 0xFFFFFFC0;
        else
          v98 = 0;
        v70 = v94 + v98;
      }
      else
      {
        v70 = v1581 + __clz(v1580) - 64;
      }
      v99 = v58 - v70;
      v1545[2] = v58;
      if (v58 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v1545, 0, 0);
      else
        *(_QWORD *)v1545 = 0;
      sub_1C4912E54(v1545, 0, v58 - v70);
      v100 = *((_QWORD *)&v1588 + 1);
      v101 = v67 + 1;
      v1532 = (llvm::APInt *)v1588;
      if ((sub_1C5D7BE14(v66, v1588, *((_QWORD *)&v1588 + 1), v1545, &v1578, &v1582, a7, v101, 0) & 1) != 0
        || (v103 = __src[0],
            v104 = __src[1],
            LOBYTE(v1518) = 0,
            (sub_1C5D7BE14(v66, __src[0], __src[1], v1545, &v1578, &v1582, a7, v101, v1518) & 1) != 0)
        || sub_1C6375BAC(v1586, v1587, v58, (llvm::APInt *)&v1580, a7, v105))
      {
        if ((v69 & 6) == 0)
        {
LABEL_128:
          v109 = 1;
LABEL_129:
          if (v1545[2] >= 0x41u && *(_QWORD *)v1545)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
          if (v109)
            goto LABEL_2170;
          v28 = v1586;
          v29 = *(unsigned __int16 *)(v1586 + 24);
          goto LABEL_218;
        }
        v106 = sub_1C5D56C70(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1532, v100, v102, (uint64_t)__src[0], (unint64_t)__src[1], v69 & 0xFFF8 | 1u);
LABEL_127:
        v108 = (int)v1587;
        *(_QWORD *)(a7 + 16) = v1586;
        *(_DWORD *)(a7 + 24) = v108;
        *(_QWORD *)(a7 + 32) = v106;
        *(_DWORD *)(a7 + 40) = v107;
        goto LABEL_128;
      }
      v352 = v1545[2];
      if (v1545[2])
      {
        if (v1545[2] > 0x40u)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1545) != v352)
          {
LABEL_1148:
            v820 = (unint64_t)sub_1C5D86770((unsigned int *)v66, (uint64_t)v1532, v100, (unsigned int *)v1545, (unsigned int *)&v1578, *(_QWORD *)a7, v101);
            *(_QWORD *)&v1573 = v820;
            *((_QWORD *)&v1573 + 1) = v821;
            v822 = (uint64_t **)sub_1C5D86770((unsigned int *)v66, (uint64_t)v103, (_BOOL8)v104, (unsigned int *)v1545, (unsigned int *)&v1578, *(_QWORD *)a7, v101);
            v1568 = v822;
            v1569 = v824;
            if (!(v820 | (unint64_t)v822))
              goto LABEL_1149;
            v832 = &v1573;
            if (!v820)
              v832 = &v1588;
            v833 = *(_QWORD *)v832;
            DWORD2(v1588) = *((_DWORD *)v832 + 2);
            *(_QWORD *)&v1588 = v833;
            v834 = (void **)&v1568;
            if (!v822)
              v834 = __src;
            v835 = *v834;
            LODWORD(__src[1]) = *((_DWORD *)v834 + 2);
            __src[0] = v835;
            v106 = sub_1C5D56C70(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, v833, *((unint64_t *)&v1588 + 1), v823, (uint64_t)v835, (unint64_t)__src[1], v69 & 0xFFF8 | 1u);
            goto LABEL_127;
          }
        }
        else if (*(_QWORD *)v1545 != 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v1545[2]))
        {
          goto LABEL_1148;
        }
      }
      v800 = v1579;
      if (!v1579
        || (v1579 > 0x40
          ? (v801 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1578) == v800)
          : (v801 = v1578 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1579)),
            v66 = (uint64_t *)v1534,
            v801))
      {
LABEL_1149:
        v825 = sub_1C5D4F7E8((uint64_t)v103, v104, 0, 0);
        DWORD2(v1573) = (_DWORD)v1535;
        if (v1535 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1573, 0, 0);
          sub_1C4912E54(&v1573, DWORD2(v1573) - v70, DWORD2(v1573));
        }
        else
        {
          *(_QWORD *)&v1573 = 0;
          sub_1C4912E54(&v1573, v99, v1535);
        }
        if (v825)
        {
          v826 = *(_QWORD *)(v825 + 80);
          v827 = *(unsigned int *)(v826 + 32);
          if ((_DWORD)v827)
          {
            v828 = (const void **)(v826 + 24);
            if (v827 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v826 + 24)) != (_DWORD)v827
                && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v828) != (_DWORD)v827 - 1)
              {
                v885 = ((unint64_t)(v827 + 63) >> 3) & 0x3FFFFFF8;
                v886 = (char *)operator new[]();
                memcpy(v886, *v828, v885);
                v887 = 0;
                v888 = v1573;
                do
                {
                  *(_QWORD *)&v886[v887] |= *(_QWORD *)(v888 + v887);
                  v887 += 8;
                }
                while (v885 != v887);
                LODWORD(v1569) = v827;
                v1568 = (uint64_t **)v886;
                v889 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1568);
                MEMORY[0x1CAA32F9C](v886, 0x1000C8000313F17);
                if (v889 == (_DWORD)v827)
                {
LABEL_1962:
                  v1241 = sub_1C63293BC(*(_QWORD *)a7, (const llvm::APInt *)&v1576, (_BOOL8)v1574, v1575, 0, 0);
                  v1244 = sub_1C5D56C70(*(_QWORD *)a7, *(unsigned __int16 *)(v1586 + 24), (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1532, v100, v1243, v1241, v1242, v69 & 0xFFF8 | 1u);
                  v1246 = v1586;
                  v1247 = (int)v1587;
LABEL_2001:
                  *(_QWORD *)(a7 + 16) = v1246;
                  *(_DWORD *)(a7 + 24) = v1247;
                  *(_QWORD *)(a7 + 32) = v1244;
                  *(_DWORD *)(a7 + 40) = v1245;
                  v109 = 1;
                  goto LABEL_1317;
                }
              }
            }
            else
            {
              v829 = (unint64_t)*v828;
              v830 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v827;
              v831 = *v828 == (const void *)v830 || v829 == 1;
              if (!v831 && ((unint64_t)v1573 | v829) == v830)
                goto LABEL_1962;
            }
          }
        }
        v1568 = (uint64_t **)&v1573;
        if ((_BYTE)v1574)
        {
          if (v1574 == 1 || (v109 = 0, *(_QWORD *)(v1534 + 8 * v1574 + 96)))
          {
            if ((*(unsigned __int8 *)(v1534 + 390 * v1574 + 4037) | 4) != 4
              || *(_WORD *)(v1586 + 24) != 56)
            {
              goto LABEL_1316;
            }
            v890 = sub_1C5D8C23C(&v1568, (uint64_t)v1532, v100);
            if (v890)
            {
              v1264 = v890;
              v1265 = (uint64_t *)*((_QWORD *)v1532 + 4);
              v1266 = *v1265;
              v1267 = v1265[1];
              v1268 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1534, (uint64_t)v1574, v1575, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a7 + 40) + 40) + 272, 1);
              v1270 = sub_1C6366AB4(*(_QWORD *)a7, v1264, (const llvm::APInt *)&v1576, v1268, v1269, 0, 0);
              v1273 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v1273)
                LOWORD(v1273) = *(_WORD *)(v1273 + 8);
              v1274 = sub_1C5D56C70(*(_QWORD *)a7, 175, (const llvm::APInt *)&v1576, v1574, v1575, v1266, v1267, v1272, (uint64_t)v1270, v1271, v1273);
              v1277 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v1277)
                LOWORD(v1277) = *(_WORD *)(v1277 + 8);
              v1244 = sub_1C5D56C70(*(_QWORD *)a7, 57, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v103, (unint64_t)v104, v1276, (uint64_t)v1274, v1275, v1277);
            }
            else
            {
              v891 = sub_1C5D8C23C(&v1568, (uint64_t)v103, (int)v104);
              if (!v891)
              {
LABEL_1316:
                v109 = 0;
                goto LABEL_1317;
              }
              v1279 = v891;
              v1280 = (uint64_t *)*((_QWORD *)v103 + 4);
              v1281 = *v1280;
              v1282 = v1280[1];
              v1283 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1534, (uint64_t)v1574, v1575, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a7 + 40) + 40) + 272, 1);
              v1285 = sub_1C6366AB4(*(_QWORD *)a7, v1279, (const llvm::APInt *)&v1576, v1283, v1284, 0, 0);
              v1288 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v1288)
                LOWORD(v1288) = *(_WORD *)(v1288 + 8);
              v1289 = sub_1C5D56C70(*(_QWORD *)a7, 175, (const llvm::APInt *)&v1576, v1574, v1575, v1281, v1282, v1287, (uint64_t)v1285, v1286, v1288);
              v1292 = *(_QWORD *)(*(_QWORD *)a7 + 832);
              if (v1292)
                LOWORD(v1292) = *(_WORD *)(v1292 + 8);
              v1244 = sub_1C5D56C70(*(_QWORD *)a7, 57, (const llvm::APInt *)&v1576, v1574, v1575, (uint64_t)v1532, v100, v1291, (uint64_t)v1289, v1290, v1292);
            }
            v1246 = v1586;
            v1247 = (int)v1587;
            goto LABEL_2001;
          }
        }
        else
        {
          v109 = 0;
        }
LABEL_1317:
        if (DWORD2(v1573) >= 0x41 && (_QWORD)v1573)
          MEMORY[0x1CAA32F9C](v1573, 0x1000C8000313F17);
        goto LABEL_129;
      }
      goto LABEL_1148;
    }
    if (v29 != 4)
    {
      if (v29 != 54)
      {
LABEL_218:
        if (v29 >= 0x186)
        {
          if (((*(uint64_t (**)(uint64_t, uint64_t, const llvm::KnownBits *, unint64_t *, char **, llvm::APInt *, uint64_t, _QWORD))(*(_QWORD *)v1534 + 1664))(v1534, v28, v1587, &v1580, &v1578, v1540, a7, v1537) & 1) != 0)goto LABEL_2170;
          goto LABEL_934;
        }
LABEL_363:
        sub_1C5D44BD8(*(_QWORD *)a7, v28, (_BOOL8)v1587, (llvm::APInt *)&v1578, v1537, (uint64_t)&v1588);
        if (*((_DWORD *)v1540 + 2) >= 0x41u && *(_QWORD *)v1540)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
        *(_QWORD *)v1540 = v1588;
        *((_DWORD *)v1540 + 2) = DWORD2(v1588);
        DWORD2(v1588) = 0;
        if (*((_DWORD *)v1540 + 6) < 0x41u || !*v1529)
        {
          *((_QWORD *)v1540 + 2) = v1589;
          *((_DWORD *)v1540 + 6) = v1590;
          goto LABEL_934;
        }
        MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
        v114 = DWORD2(v1588);
        *((_QWORD *)v1540 + 2) = v1589;
        *((_DWORD *)v1540 + 6) = v1590;
        v1590 = 0;
LABEL_145:
        if (v114 < 0x41)
          goto LABEL_934;
        v115 = (void *)v1588;
        if (!(_QWORD)v1588)
          goto LABEL_934;
        goto LABEL_147;
      }
      *(_OWORD *)v1545 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v28 + 32) + 40)
                                   + 16 * *(unsigned int *)(*(_QWORD *)(v28 + 32) + 8));
      v375 = sub_1C6131328((unsigned __int8 *)v1545, (uint64_t)v27, (BOOL)a3);
      DWORD2(v1588) = v1581;
      if (v1581 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v1588, 0, 0);
      else
        *(_QWORD *)&v1588 = 0;
      sub_1C4912E54(&v1588, 0, v375);
      if (DWORD2(v1588) > 0x40)
      {
        v1307 = (_QWORD *)v1588;
        v1308 = (uint64_t *)v1580;
        v1309 = ((unint64_t)DWORD2(v1588) + 63) >> 6;
        v376 = v1534;
        v377 = v1537;
        do
        {
          v1310 = *v1308++;
          *v1307++ &= v1310;
          --v1309;
        }
        while (v1309);
      }
      else
      {
        *(_QWORD *)&v1588 = v1588 & v1580;
        v376 = v1534;
        v377 = v1537;
      }
      llvm::APInt::trunc((llvm::APInt *)&v1588, v375, (llvm::APInt *)&v1573);
      if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
        MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
      llvm::APInt::getHiBits((llvm::APInt *)&v1580, v375, (uint64_t)&v1588);
      llvm::APInt::trunc((llvm::APInt *)&v1588, v375, (llvm::APInt *)&v1568);
      if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
        MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
      DWORD2(v1588) = 1;
      *(_QWORD *)&v1588 = 0;
      v1590 = 1;
      v1589 = 0;
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      v1572 = 1;
      v1571 = 0;
      v378 = v377 + 1;
      if ((sub_1C6375E58(v376, **(_QWORD **)(v1586 + 32), *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 8), &v1573, &v1588, a7, v378, 0) & 1) != 0|| (sub_1C6375E58(v376, *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1586 + 32) + 48), &v1568, __src, a7, v378, 0) & 1) != 0)
      {
        if (v1572 >= 0x41 && v1571)
          MEMORY[0x1CAA32F9C](v1571, 0x1000C8000313F17);
        if (LODWORD(__src[1]) >= 0x41 && __src[0])
          MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
        if (v1590 >= 0x41 && v1589)
          MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
        if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
          MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
        if (v1569 >= 0x41 && v1568)
          MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
        if (DWORD2(v1573) < 0x41)
          goto LABEL_2170;
        v299 = (void *)v1573;
        if (!(_QWORD)v1573)
          goto LABEL_2170;
        goto LABEL_387;
      }
      llvm::APInt::zext((llvm::APInt *)&v1588, v1535, (uint64_t)&v1566);
      llvm::APInt::zext((llvm::APInt *)__src, v1535, (uint64_t)&v1562);
      LODWORD(v1565) = v1563;
      if (v1563 > 0x40)
      {
        v1564 = operator new[]();
        memcpy((void *)v1564, v1562, (((unint64_t)v1565 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v1564 = (unint64_t)v1562;
      }
      sub_1C4888094((uint64_t)&v1564, v375);
      v1126 = v1565;
      if (v1565 > 0x40)
      {
        v1128 = (_QWORD *)v1564;
        v1129 = (uint64_t *)v1566;
        v1130 = ((unint64_t)v1565 + 63) >> 6;
        do
        {
          v1131 = *v1129++;
          *v1128++ |= v1131;
          --v1130;
        }
        while (v1130);
        v1127 = v1564;
      }
      else
      {
        v1127 = v1564 | v1566;
        v1564 |= v1566;
      }
      LODWORD(v1565) = 0;
      if (*((_DWORD *)v1540 + 2) > 0x40u && *(_QWORD *)v1540)
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)v1540, 0x1000C8000313F17);
        v1132 = v1565;
        *(_QWORD *)v1540 = v1127;
        *((_DWORD *)v1540 + 2) = v1126;
        if (v1132 >= 0x41 && v1564)
          MEMORY[0x1CAA32F9C](v1564, 0x1000C8000313F17);
      }
      else
      {
        *(_QWORD *)v1540 = v1127;
        *((_DWORD *)v1540 + 2) = v1126;
      }
      if (v1563 >= 0x41 && v1562)
        MEMORY[0x1CAA32F9C](v1562, 0x1000C8000313F17);
      if (v1567 >= 0x41 && v1566)
        MEMORY[0x1CAA32F9C](v1566, 0x1000C8000313F17);
      llvm::APInt::zext((llvm::APInt *)&v1589, v1535, (uint64_t)&v1566);
      llvm::APInt::zext((llvm::APInt *)&v1571, v1535, (uint64_t)&v1562);
      LODWORD(v1565) = v1563;
      if (v1563 > 0x40)
      {
        v1564 = operator new[]();
        memcpy((void *)v1564, v1562, (((unint64_t)v1565 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v1564 = (unint64_t)v1562;
      }
      sub_1C4888094((uint64_t)&v1564, v375);
      v1133 = v1565;
      if (v1565 > 0x40)
      {
        v1135 = (_QWORD *)v1564;
        v1136 = (uint64_t *)v1566;
        v1137 = ((unint64_t)v1565 + 63) >> 6;
        do
        {
          v1138 = *v1136++;
          *v1135++ |= v1138;
          --v1137;
        }
        while (v1137);
        v1134 = v1564;
      }
      else
      {
        v1134 = v1564 | v1566;
        v1564 |= v1566;
      }
      LODWORD(v1565) = 0;
      if (*((_DWORD *)v1540 + 6) > 0x40u && *v1529)
      {
        MEMORY[0x1CAA32F9C](*v1529, 0x1000C8000313F17);
        v1139 = v1565;
        *((_QWORD *)v1540 + 2) = v1134;
        *((_DWORD *)v1540 + 6) = v1133;
        if (v1139 >= 0x41 && v1564)
          MEMORY[0x1CAA32F9C](v1564, 0x1000C8000313F17);
      }
      else
      {
        *((_QWORD *)v1540 + 2) = v1134;
        *((_DWORD *)v1540 + 6) = v1133;
      }
      if (v1563 >= 0x41 && v1562)
        MEMORY[0x1CAA32F9C](v1562, 0x1000C8000313F17);
      if (v1567 >= 0x41 && v1566)
        MEMORY[0x1CAA32F9C](v1566, 0x1000C8000313F17);
      if (v1572 >= 0x41 && v1571)
        MEMORY[0x1CAA32F9C](v1571, 0x1000C8000313F17);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      if (v1590 >= 0x41 && v1589)
        MEMORY[0x1CAA32F9C](v1589, 0x1000C8000313F17);
      if (DWORD2(v1588) >= 0x41 && (_QWORD)v1588)
        MEMORY[0x1CAA32F9C](v1588, 0x1000C8000313F17);
      if (v1569 >= 0x41 && v1568)
        MEMORY[0x1CAA32F9C](v1568, 0x1000C8000313F17);
      if (DWORD2(v1573) < 0x41)
        goto LABEL_934;
      v115 = (void *)v1573;
      if (!(_QWORD)v1573)
        goto LABEL_934;
LABEL_147:
      MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
      goto LABEL_934;
    }
    v1588 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 40) + 80);
    if ((_BYTE)v1588)
      v379 = sub_1C47A8C74((unsigned __int8 *)&v1588);
    else
      v379 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1588);
    v617 = v379;
    if ((_DWORD)v380 == 1)
    LODWORD(__src[1]) = (_DWORD)v1535;
    if (v1535 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
    else
      __src[0] = 0;
    sub_1C4912E54(__src, 0, v617);
    v618 = *(uint64_t **)(v1586 + 32);
    v619 = *v618;
    v620 = v618[1];
    LODWORD(v621) = __src[1];
    v1544 = __src[1];
    if (LODWORD(__src[1]) > 0x40)
    {
      v624 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
      v1543 = (void *)operator new[]();
      memcpy(v1543, __src[0], v624);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1543);
      v621 = v1544;
      v623 = (uint64_t)v1543;
      v1544 = 0;
      if (v621 > 0x40)
      {
        v775 = (uint64_t *)v1580;
        v776 = (unint64_t)(v621 + 63) >> 6;
        v777 = v1543;
        do
        {
          v778 = *v775++;
          *v777++ |= v778;
          --v776;
        }
        while (v776);
        v625 = v1540;
        v626 = v1534;
        v627 = v1537;
LABEL_1037:
        v1545[2] = v621;
        *(_QWORD *)v1545 = v623;
        v779 = sub_1C6375E58(v626, v619, v620, v1545, v625, a7, v627 + 1, 0);
        if (v621 >= 0x41 && *(_QWORD *)v1545)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v1545, 0x1000C8000313F17);
        if ((v779 & 1) != 0)
        {
          if (LODWORD(__src[1]) >= 0x41)
            goto LABEL_1068;
          goto LABEL_2170;
        }
        v780 = __src[1];
        v1542 = __src[1];
        if (LODWORD(__src[1]) > 0x40)
        {
          v783 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v1541 = (void *)operator new[]();
          memcpy(v1541, __src[0], v783);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1541);
          v780 = v1542;
          v782 = (uint64_t)v1541;
        }
        else
        {
          v781 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
          if (!LODWORD(__src[1]))
            v781 = 0;
          v782 = v781 & ~(uint64_t)__src[0];
        }
        v784 = *((unsigned int *)v1540 + 2);
        if (v784 > 0x40)
        {
          v785 = *(_QWORD **)v1540;
          v786 = (unint64_t)(v784 + 63) >> 6;
          v787 = (uint64_t *)v782;
          do
          {
            v788 = *v787++;
            *v785++ |= v788;
            --v786;
          }
          while (v786);
        }
        else
        {
          *(_QWORD *)v1540 |= v782;
        }
        if (v780 >= 0x41 && v782)
          MEMORY[0x1CAA32F9C](v782, 0x1000C8000313F17);
        if (LODWORD(__src[1]) < 0x41)
          goto LABEL_934;
        v115 = __src[0];
        if (!__src[0])
          goto LABEL_934;
        goto LABEL_147;
      }
    }
    else
    {
      if (LODWORD(__src[1]))
        v622 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
      else
        v622 = 0;
      v623 = v622 & ~(uint64_t)__src[0];
      v1543 = (void *)v623;
      v1544 = 0;
    }
    v625 = v1540;
    v626 = v1534;
    v627 = v1537;
    v623 |= v1580;
    goto LABEL_1037;
  }
  v1527 = a7;
  v52 = *(_DWORD *)(a4 + 8);
  if (v52 < 0x41 || v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) <= 0x40)
  {
    v53 = *(_QWORD **)a4;
    if (v52 < 0x41)
      v53 = (_QWORD *)a4;
    if (!*v53)
      goto LABEL_96;
  }
  v54 = *((_DWORD *)a5 + 2);
  if (v54 < 0x41 || v54 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5) <= 0x40)
  {
    v55 = *a5;
    if (v54 < 0x41)
      v55 = a5;
    if (!*v55)
    {
LABEL_96:
      v71 = (int)v1587;
      v72 = sub_1C61312D0(v46, v51, v50);
      *(_QWORD *)(v1527 + 16) = v28;
      *(_DWORD *)(v1527 + 24) = v71;
      *(_QWORD *)(v1527 + 32) = v72;
      *(_DWORD *)(v1527 + 40) = v73;
      v19 = 1;
      goto LABEL_62;
    }
  }
  if (v1537 <= 5)
  {
    a7 = v1527;
    v57 = v1529;
    v58 = (unint64_t)v1535;
    goto LABEL_87;
  }
LABEL_61:
  v19 = 0;
LABEL_62:
  if (v1576)
    llvm::MetadataTracking::untrack((uint64_t)&v1576, v1576);
  if (v1579 >= 0x41 && v1578)
    MEMORY[0x1CAA32F9C](v1578, 0x1000C8000313F17);
  if (v1581 >= 0x41 && v1580)
    MEMORY[0x1CAA32F9C](v1580, 0x1000C8000313F17);
  return v19;
}

_QWORD *sub_1C5D86770(unsigned int *a1, uint64_t a2, _BOOL8 a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v11;
  llvm::Type *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  int v39;
  unsigned int *v40;
  llvm::Type *v41;
  int v42;
  __int128 *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  llvm::APInt *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unsigned int *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  llvm::APInt *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  unint64_t v100;
  unsigned int *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL4 v114;
  unint64_t v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  char v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  unint64_t v143;
  unsigned int *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL4 v157;
  unint64_t v158;
  unsigned int *v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  llvm::Type *v167;
  int v168;
  llvm::Type *v169;
  uint64_t v170;
  BOOL v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  BOOL v176;
  const char *v177;
  uint64_t v178;
  int v179;
  __int128 *v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  int64_t v194;
  BOOL v195;
  unint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  unsigned __int8 *v204;
  uint64_t *v205;
  uint64_t v206;
  llvm *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  unsigned int v235;
  unint64_t v236;
  int v237;
  int64_t v238;
  unint64_t v239;
  unsigned int v240;
  _QWORD *v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  unsigned __int8 *v252;
  int v253;
  BOOL v254;
  uint64_t v255;
  int v256;
  BOOL v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  _QWORD *v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265[2];
  unsigned int v266;
  unint64_t v267;
  char v268;
  int v269;
  uint64_t v270;
  unsigned int v271;
  unint64_t __src;
  char __srcd;
  char __srca;
  unsigned int __srcb;
  uint64_t __srcc;
  __int128 v277;
  unint64_t v278;
  unsigned int v279;
  _QWORD *v280;
  unsigned int v281;
  uint64_t v282;
  unsigned int v283;
  unint64_t v284;
  unsigned int v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;

  if (a7 > 5)
    return 0;
  v288 = v7;
  v289 = v8;
  v11 = *(unsigned __int16 *)(a2 + 24);
  if (v11 == 51)
    return 0;
  v18 = (llvm::Type *)a4[2];
  if (v18 < 0x41
    || v18 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) <= 0x40)
  {
    v19 = *(unsigned int **)a4;
    if (v18 < 0x41)
      v19 = a4;
    if (!*(_QWORD *)v19)
      goto LABEL_56;
  }
  v20 = a5[2];
  if (v20 < 0x41
    || v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5) <= 0x40)
  {
    v21 = *(unsigned int **)a5;
    if (v20 < 0x41)
      v21 = a5;
    if (!*(_QWORD *)v21)
    {
LABEL_56:
      v67 = *(_QWORD *)(a2 + 40) + 16 * a3;
      return sub_1C61312D0(a6, *(llvm **)v67, *(_QWORD *)(v67 + 8));
    }
  }
  if (v11 > 192)
  {
    if (v11 <= 204)
    {
      if (v11 == 193)
      {
        v55 = *(__int128 **)(a2 + 32);
        v287 = *v55;
        v56 = *((_QWORD *)v55 + 5);
        v57 = *((_QWORD *)v55 + 6);
        v58 = *(_DWORD *)(*((_QWORD *)v55 + 10) + 76);
        if (v18 > 0x40)
        {
          if (((*(_QWORD *)(*(_QWORD *)a4 + 8 * (((_DWORD)v18 - 1) >> 6)) >> (v18 - 1)) & 1) == 0
            || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4) != (_DWORD)v18 - 1)
          {
            goto LABEL_317;
          }
        }
        else if (*(_QWORD *)a4 != 1 << (v18 - 1))
        {
          v25 = 0;
          v59 = 0;
          v60 = 0;
          v30 = 0;
          LODWORD(v26) = 1;
          LODWORD(v61) = 1;
          v31 = 1;
          LODWORD(v62) = 1;
          goto LABEL_320;
        }
        if (sub_1C6329368((unsigned int *)&v287, a2, a3) != v18)
          goto LABEL_317;
        v250 = (_QWORD *)(*(_QWORD *)(v287 + 40) + 16 * DWORD2(v287));
        if (sub_1C6329468(a1, *v250, v250[1]) != 2 || v58 != 20)
          goto LABEL_317;
        v252 = (unsigned __int8 *)(*(_QWORD *)(v56 + 40) + 16 * v57);
        v253 = *v252;
        if (*v252)
        {
          v254 = (v253 - 120) >= 0x20 && (v253 - 2) >= 6;
          if (v254 && (v253 - 15) >= 0x3C)
            goto LABEL_317;
        }
        else
        {
          v255 = *((_QWORD *)v252 + 1);
          if ((*(_DWORD *)(v255 + 8) & 0xFE) == 0x12)
            v256 = *(unsigned __int8 *)(**(_QWORD **)(v255 + 16) + 8);
          else
            v256 = *(_DWORD *)(v255 + 8);
          if (v256 != 13)
            goto LABEL_317;
        }
        if (sub_1C6368AD4(v56))
          return (_QWORD *)v287;
        LODWORD(v26) = 1;
        if ((sub_1C5D3DBE0(v56, 1, v257) & 1) != 0)
          return (_QWORD *)v287;
        v25 = 0;
        v59 = 0;
        v60 = 0;
        v30 = 0;
        goto LABEL_319;
      }
      if (v11 == 204)
      {
        v180 = *(__int128 **)(a2 + 32);
        v287 = *v180;
        v277 = *(_OWORD *)(*((_QWORD *)v180 + 5) + 80);
        v181 = sub_1C6131328((unsigned __int8 *)&v277, a2, a3);
        v182 = a4[2];
        if (v182 > 0x40)
          v183 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
        else
          v183 = v182 + __clz(*(_QWORD *)a4) - 64;
        if (v182 - v183 <= v181
          || sub_1C5D4F9D8(a6, v287, *((_BOOL8 *)&v287 + 1), a5, (a7 + 1)) >= v18 - v181 + 1)
        {
          return (_QWORD *)v287;
        }
        goto LABEL_317;
      }
      goto LABEL_138;
    }
    v32 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272);
    if ((v11 - 205) < 3)
    {
      v33 = *(uint64_t **)(a2 + 32);
      v34 = *(_QWORD *)(a2 + 40);
      v36 = *v33;
      v35 = v33[1];
      v37 = *(_OWORD *)(*(_QWORD *)(*v33 + 40) + 16 * v35);
      v277 = v37;
      v38 = *(_OWORD *)(v34 + 16 * a3);
      v286 = v38;
      if (v32)
        goto LABEL_317;
      if (v20 >= 0x41)
      {
        v268 = v38;
        __srcd = v37;
        v39 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5);
        LOBYTE(v38) = v268;
        LOBYTE(v37) = __srcd;
        if ((v20 - v39) > 0x40)
          goto LABEL_317;
      }
      v40 = *(unsigned int **)a5;
      if (v20 < 0x41)
        v40 = a5;
      if (*(_QWORD *)v40 != 1)
        goto LABEL_317;
      __srca = v37;
      v41 = (_BYTE)v38
          ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v286)
          : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v286);
      v167 = v41;
      v168 = v42;
      v169 = __srca
           ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v277)
           : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v277);
      if (v167 != v169 || v168 != (_DWORD)v170)
        goto LABEL_317;
      v172 = a4[2];
      v173 = v172 > 0x40
           ? llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4)
           : v172 + __clz(*(_QWORD *)a4) - 64;
      if ((unint64_t)sub_1C6131328((unsigned __int8 *)&v277, v170, v171) < v172 - v173)
        goto LABEL_317;
      v226 = *((_QWORD *)&v286 + 1);
      v225 = v286;
      v227 = a6;
      v228 = v36;
      v229 = v35;
      goto LABEL_258;
    }
    if (v11 != 216)
      goto LABEL_138;
    v63 = *(uint64_t **)(a2 + 32);
    v64 = *v63;
    v65 = v63[1];
    while (*(_WORD *)(v64 + 24) == 216)
    {
      v66 = *(uint64_t **)(v64 + 32);
      v64 = *v66;
      v65 = v65 & 0xFFFFFFFF00000000 | *((unsigned int *)v66 + 2);
    }
    v79 = (uint64_t *)(*(_QWORD *)(v64 + 40) + 16 * v65);
    v81 = *v79;
    v80 = v79[1];
    *(_QWORD *)&v277 = v81;
    *((_QWORD *)&v277 + 1) = v80;
    v82 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
    v84 = *v82;
    v83 = v82[1];
    *(_QWORD *)&v286 = v84;
    *((_QWORD *)&v286 + 1) = v83;
    if (v81 == v84 && ((_BYTE)v81 || v80 == v83))
    {
      *(_QWORD *)&v287 = v64;
      *((_QWORD *)&v287 + 1) = v65;
      return (_QWORD *)v287;
    }
    v269 = v32;
    v174 = sub_1C6131328((unsigned __int8 *)&v277, a2, a3);
    __srcb = sub_1C6131328((unsigned __int8 *)&v286, v175, v176);
    if (v174 == __srcb)
    {
      v178 = sub_1C5D86770(a1, v64, v65, a4, a5, a6, (a7 + 1));
      if (v178)
      {
        v228 = v178;
        v229 = (uint64_t)v177;
        v226 = *((_QWORD *)&v286 + 1);
        v225 = v286;
        v227 = a6;
LABEL_258:
        v231 = sub_1C6367DA8(v227, v225, v226, v228, v229);
        goto LABEL_259;
      }
    }
    if ((_BYTE)v277)
    {
      v179 = v269;
      if (v277 - 15 >= 0x9C)
      {
LABEL_214:
        if (v179)
          goto LABEL_317;
        goto LABEL_215;
      }
    }
    else
    {
      v179 = v269;
      if ((*(_DWORD *)(*((_QWORD *)&v277 + 1) + 8) & 0xFE) != 0x12)
        goto LABEL_214;
    }
    v216 = __srcb / v174;
    if (__srcb % v174)
      goto LABEL_214;
    v264 = sub_1C612FE00((llvm::EVT *)&v277, v177);
    v285 = v174;
    v266 = v174;
    if (v174 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v284, 0, 0);
    else
      v284 = 0;
    v283 = v264;
    if (v264 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v282, 0, 0);
    else
      v282 = 0;
    if (v174 > __srcb)
    {
LABEL_295:
      v223 = sub_1C5D86770(a1, v64, v65, &v284, &v282, a6, (a7 + 1));
      if (v223)
        goto LABEL_308;
      if (v283 >= 0x41 && v282)
        MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
      if (v285 >= 0x41 && v284)
        MEMORY[0x1CAA32F9C](v284, 0x1000C8000313F17);
      v174 = v266;
      if (v269)
        goto LABEL_317;
LABEL_215:
      v217 = v174 / __srcb;
      if (v174 % __srcb)
        goto LABEL_317;
      if ((_BYTE)v277)
      {
        if (v277 - 15 >= 0x9C)
        {
LABEL_218:
          v218 = 1;
          goto LABEL_219;
        }
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v277 + 1) + 8) & 0xFE) != 0x12)
      {
        goto LABEL_218;
      }
      v218 = sub_1C612FE00((llvm::EVT *)&v277, v177);
      v217 = v174 / __srcb;
LABEL_219:
      v285 = v174;
      if (v174 > 0x40)
      {
        v258 = v218;
        v259 = v217;
        llvm::APInt::initSlowCase((llvm::APInt *)&v284, 0, 0);
        v218 = v258;
        v217 = v259;
      }
      else
      {
        v284 = 0;
      }
      v283 = v218;
      if (v218 > 0x40)
      {
        v260 = v217;
        llvm::APInt::initSlowCase((llvm::APInt *)&v282, 0, 0);
        v217 = v260;
        if (!(_DWORD)v20)
          goto LABEL_233;
      }
      else
      {
        v282 = 0;
        if (!(_DWORD)v20)
          goto LABEL_233;
      }
      v219 = 0;
      v271 = v217;
      do
      {
        if (a5[2] >= 0x41)
          v220 = (unsigned int *)(*(_QWORD *)a5 + 8 * (v219 >> 6));
        else
          v220 = a5;
        if (((*(_QWORD *)v220 >> v219) & 1) != 0)
        {
          v221 = v219 / v217;
          llvm::APInt::insertBits((void **)&v284, (const llvm::APInt *)a4, v219 % v217 * __srcb);
          v222 = 1 << v221;
          if (v283 > 0x40)
            *(_QWORD *)(v282 + 8 * (v221 >> 6)) |= v222;
          else
            v282 |= v222;
          v217 = v271;
        }
        ++v219;
      }
      while ((_DWORD)v20 != v219);
LABEL_233:
      v223 = sub_1C5D86770(a1, v64, v65, &v284, &v282, a6, (a7 + 1));
      if (!v223)
      {
        if (v283 >= 0x41 && v282)
          MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
        if (v285 < 0x41)
          goto LABEL_317;
        v224 = v284;
        if (!v284)
          goto LABEL_317;
        goto LABEL_307;
      }
LABEL_308:
      *(_QWORD *)&v287 = sub_1C6367DA8(a6, v286, *((uint64_t *)&v286 + 1), v223, (uint64_t)v177);
      *((_QWORD *)&v287 + 1) = v249;
      if (v283 >= 0x41 && v282)
        MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
      if (v285 < 0x41 || !v284)
        return (_QWORD *)v287;
      goto LABEL_250;
    }
    v233 = 0;
    while (1)
    {
      v234 = v216 + ~v233;
      if (!v269)
        v234 = v233;
      llvm::APInt::extractBits((llvm::APInt *)a4, v266, v234 * v266, (unsigned int *)&v280);
      v235 = v281;
      if (v281 > 0x40)
        break;
      v236 = (unint64_t)v280;
      if (v280)
        goto LABEL_277;
LABEL_294:
      if (++v233 == v216)
        goto LABEL_295;
    }
    v237 = 0;
    v238 = ((unint64_t)v281 + 63) >> 6;
    v236 = (unint64_t)v280;
    do
    {
      v195 = v238-- < 1;
      if (v195)
        break;
      v239 = v280[v238];
      v237 += __clz(v239);
    }
    while (!v239);
    v240 = v281 | 0xFFFFFFC0;
    if ((v281 & 0x3F) == 0)
      v240 = 0;
    if (v237 + v240 != v281)
    {
LABEL_277:
      if (v285 > 0x40)
      {
        v241 = (_QWORD *)v284;
        v242 = ((unint64_t)v285 + 63) >> 6;
        do
        {
          v243 = *(_QWORD *)v236;
          v236 += 8;
          *v241++ |= v243;
          --v242;
        }
        while (v242);
      }
      else
      {
        v284 |= v236;
      }
      if ((_DWORD)v20)
      {
        v244 = 0;
        v245 = a5[2];
        v246 = v283;
        do
        {
          v247 = (unsigned int *)(*(_QWORD *)a5 + 8 * (v244 >> 6));
          if (v245 < 0x41)
            v247 = a5;
          if (((*(_QWORD *)v247 >> v244) & 1) != 0)
          {
            v248 = 1 << (v233 + v244 * v216);
            if (v246 > 0x40)
              *(_QWORD *)(v282 + 8 * ((v233 + v244 * v216) >> 6)) |= v248;
            else
              v282 |= v248;
          }
          ++v244;
        }
        while ((_DWORD)v20 != v244);
      }
      if (v235 < 0x41)
        goto LABEL_294;
      v236 = (unint64_t)v280;
    }
    if (v236)
      MEMORY[0x1CAA32F9C](v236, 0x1000C8000313F17);
    goto LABEL_294;
  }
  if (v11 > 170)
  {
    switch(v11)
    {
      case 171:
        v22 = (a7 + 1);
        sub_1C5D44BD8(a6, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), (llvm::APInt *)a5, v22, (uint64_t)&v277);
        v23 = v277;
        v24 = DWORD2(v277);
        *(_QWORD *)v265 = v278;
        v262 = v279;
        sub_1C5D44BD8(a6, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), (llvm::APInt *)a5, v22, (uint64_t)&v277);
        v25 = v277;
        v26 = DWORD2(v277);
        v27 = (uint64_t *)v278;
        v28 = v279;
        v267 = v23;
        __src = v278;
        if (v24 > 0x40)
        {
          v261 = (_QWORD *)v277;
          v29 = operator new[]();
          memcpy((void *)v29, (const void *)v23, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
          v110 = (unint64_t)(v24 + 63) >> 6;
          v111 = (_QWORD *)v29;
          do
          {
            v112 = *v27++;
            *v111++ |= v112;
            --v110;
          }
          while (v110);
          v31 = v24;
          v30 = *(_QWORD *)v265;
          v25 = (unint64_t)v261;
        }
        else
        {
          v29 = v278 | v23;
          v30 = *(_QWORD *)v265;
          v31 = v24;
        }
        LODWORD(v61) = v28;
        v113 = a4[2];
        LODWORD(v62) = v262;
        if (v113 > 0x40)
        {
          v115 = (unint64_t)(v113 + 63) >> 6;
          v116 = *(unsigned int **)a4;
          v117 = v115 - 1;
          v118 = (uint64_t *)v29;
          do
          {
            v120 = *(_QWORD *)v116;
            v116 += 2;
            v119 = v120;
            v121 = *v118++;
            v122 = v119 & ~v121;
            v114 = v122 == 0;
            v254 = v117-- != 0;
            v123 = v254;
          }
          while (!v122 && (v123 & 1) != 0);
        }
        else
        {
          v114 = (*(_QWORD *)a4 & ~v29) == 0;
        }
        if (v31 >= 0x41 && v29)
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
        if (v114)
          goto LABEL_113;
        if (v26 > 0x40)
        {
          v124 = operator new[]();
          memcpy((void *)v124, (const void *)v25, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
          v152 = (unint64_t)(v26 + 63) >> 6;
          v30 = *(_QWORD *)v265;
          v153 = *(uint64_t **)v265;
          v154 = (_QWORD *)v124;
          do
          {
            v155 = *v153++;
            *v154++ |= v155;
            --v152;
          }
          while (v152);
        }
        else
        {
          v124 = v25 | v30;
        }
        v156 = a4[2];
        if (v156 > 0x40)
        {
          v158 = (unint64_t)(v156 + 63) >> 6;
          v159 = *(unsigned int **)a4;
          v160 = v158 - 1;
          v161 = (uint64_t *)v124;
          v60 = v267;
          do
          {
            v163 = *(_QWORD *)v159;
            v159 += 2;
            v162 = v163;
            v164 = *v161++;
            v165 = v162 & ~v164;
            v157 = v165 == 0;
            v254 = v160-- != 0;
            v166 = v254;
          }
          while (!v165 && (v166 & 1) != 0);
        }
        else
        {
          v157 = (*(_QWORD *)a4 & ~v124) == 0;
          v60 = v267;
        }
        if (v26 >= 0x41 && v124)
          MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
        if (!v157)
          goto LABEL_172;
        goto LABEL_156;
      case 172:
        sub_1C5D44BD8(a6, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), (llvm::APInt *)a5, (a7 + 1), (uint64_t)&v277);
        v267 = v277;
        v263 = DWORD2(v277);
        v72 = v278;
        v62 = v279;
        sub_1C5D44BD8(a6, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), (llvm::APInt *)a5, (a7 + 1), (uint64_t)&v277);
        v25 = v277;
        LODWORD(v26) = DWORD2(v277);
        __src = v278;
        v61 = v279;
        if (v62 > 0x40)
        {
          v73 = operator new[]();
          memcpy((void *)v73, (const void *)v72, ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8);
          v94 = (unint64_t)(v62 + 63) >> 6;
          v95 = (_QWORD *)v25;
          v96 = (_QWORD *)v73;
          do
          {
            v97 = *(_QWORD *)v25;
            v25 += 8;
            *v96++ |= v97;
            --v94;
          }
          while (v94);
          v30 = v72;
          v25 = (unint64_t)v95;
        }
        else
        {
          v73 = v277 | v72;
          v30 = v72;
        }
        v31 = v263;
        v98 = a4[2];
        if (v98 > 0x40)
        {
          v100 = (unint64_t)(v98 + 63) >> 6;
          v101 = *(unsigned int **)a4;
          v102 = v100 - 1;
          v103 = (uint64_t *)v73;
          do
          {
            v105 = *(_QWORD *)v101;
            v101 += 2;
            v104 = v105;
            v106 = *v103++;
            v107 = v104 & ~v106;
            v99 = v107 == 0;
            v254 = v102-- != 0;
            v108 = v254;
          }
          while (!v107 && (v108 & 1) != 0);
        }
        else
        {
          v99 = (*(_QWORD *)a4 & ~v73) == 0;
        }
        if (v62 >= 0x41 && v73)
          MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
        if (v99)
        {
LABEL_113:
          v287 = *(_OWORD *)*(_QWORD *)(a2 + 32);
          v60 = v267;
LABEL_157:
          v59 = (llvm::APInt *)__src;
          goto LABEL_321;
        }
        if (v61 > 0x40)
        {
          v109 = operator new[]();
          memcpy((void *)v109, (const void *)__src, ((v61 + 63) >> 3) & 0x3FFFFFF8);
          v137 = (v61 + 63) >> 6;
          v60 = v267;
          v138 = (uint64_t *)v267;
          v139 = (_QWORD *)v109;
          do
          {
            v140 = *v138++;
            *v139++ |= v140;
            --v137;
          }
          while (v137);
          v31 = v263;
        }
        else
        {
          v60 = v267;
          v109 = __src | v267;
        }
        v141 = a4[2];
        if (v141 > 0x40)
        {
          v143 = (unint64_t)(v141 + 63) >> 6;
          v144 = *(unsigned int **)a4;
          v145 = v143 - 1;
          v146 = (uint64_t *)v109;
          do
          {
            v148 = *(_QWORD *)v144;
            v144 += 2;
            v147 = v148;
            v149 = *v146++;
            v150 = v147 & ~v149;
            v142 = v150 == 0;
            v254 = v145-- != 0;
            v151 = v254;
          }
          while (!v150 && (v151 & 1) != 0);
        }
        else
        {
          v142 = (*(_QWORD *)a4 & ~v109) == 0;
        }
        if (v61 >= 0x41 && v109)
          MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
        if (v142)
        {
LABEL_156:
          v287 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + 40);
          goto LABEL_157;
        }
LABEL_172:
        v59 = (llvm::APInt *)__src;
        break;
      case 173:
        v68 = (a7 + 1);
        sub_1C5D44BD8(a6, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), (llvm::APInt *)a5, v68, (uint64_t)&v277);
        v61 = v277;
        v69 = DWORD2(v277);
        v70 = (_QWORD *)v278;
        LODWORD(v62) = v279;
        sub_1C5D44BD8(a6, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), (llvm::APInt *)a5, v68, (uint64_t)&v277);
        v25 = v277;
        LODWORD(v26) = DWORD2(v277);
        v59 = (llvm::APInt *)v278;
        v71 = a4[2];
        if (v71 <= 0x40)
        {
          v30 = (unint64_t)v70;
          v31 = v69;
          v60 = v61;
          if ((*(_QWORD *)a4 & ~(_QWORD)v277) != 0)
          {
            LODWORD(v61) = v279;
            if ((*(_QWORD *)a4 & ~v60) != 0)
              break;
LABEL_60:
            v287 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + 40);
            goto LABEL_321;
          }
LABEL_80:
          v287 = *(_OWORD *)*(_QWORD *)(a2 + 32);
          LODWORD(v61) = v279;
          goto LABEL_321;
        }
        v86 = (unint64_t)(v71 + 63) >> 6;
        v87 = *(unsigned int **)a4;
        v88 = *(unsigned int **)a4;
        v89 = (uint64_t *)v277;
        v90 = v86;
        v30 = (unint64_t)v70;
        v31 = v69;
        v60 = v61;
        while (1)
        {
          v92 = *(_QWORD *)v88;
          v88 += 2;
          v91 = v92;
          v93 = *v89++;
          if ((v91 & ~v93) != 0)
            break;
          if (!--v90)
            goto LABEL_80;
        }
        v125 = (uint64_t *)v61;
        LODWORD(v61) = v279;
        while (1)
        {
          v127 = *(_QWORD *)v87;
          v87 += 2;
          v126 = v127;
          v128 = *v125++;
          if ((v126 & ~v128) != 0)
            goto LABEL_320;
          if (!--v86)
            goto LABEL_60;
        }
      case 175:
        v59 = sub_1C5D4E8BC(a6, a2, a3, (llvm::APInt *)a5);
        if (!v59)
          goto LABEL_140;
        v287 = *(_OWORD *)*(_QWORD *)(a2 + 32);
        if (*((_DWORD *)v59 + 2) >= 0x41u)
          v59 = *(llvm::APInt **)v59;
        v74 = *(_DWORD *)v59;
        v75 = sub_1C5D4F9D8(a6, v287, *((_BOOL8 *)&v287 + 1), a5, (a7 + 1));
        v76 = a4[2];
        if (v76 > 0x40)
        {
          v78 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4);
        }
        else
        {
          v77 = __clz(__rbit64(*(_QWORD *)a4));
          if (v76 >= v77)
            v78 = v77;
          else
            v78 = a4[2];
        }
        if (v75 > v74 && v75 - v74 >= v18 - v78)
          return (_QWORD *)v287;
        goto LABEL_317;
      default:
        goto LABEL_138;
    }
LABEL_320:
    v287 = 0uLL;
LABEL_321:
    if (v61 >= 0x41 && v59)
      MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    if (v26 >= 0x41 && v25)
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    if (v62 >= 0x41 && v30)
      MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    if (v31 < 0x41 || !v60)
      return (_QWORD *)v287;
LABEL_250:
    MEMORY[0x1CAA32F9C]();
    return (_QWORD *)v287;
  }
  switch(v11)
  {
    case 147:
      v43 = *(__int128 **)(a2 + 32);
      v287 = *v43;
      v44 = *((_QWORD *)v43 + 10);
      v45 = *(unsigned __int16 *)(v44 + 24);
      v46 = v45 == 35 || v45 == 11;
      if (!v46)
        v44 = 0;
      v277 = *(_OWORD *)(*(_QWORD *)(v287 + 40) + 16 * DWORD2(v287));
      if (v44)
      {
        v47 = *(_QWORD *)(v44 + 80);
        v48 = (llvm::APInt *)(v47 + 24);
        v49 = sub_1C612FE00((llvm::EVT *)&v277, (const char *)a2);
        v50 = *(_DWORD *)(v47 + 32);
        if (v50 < 0x41)
        {
LABEL_40:
          if (*(_QWORD *)v48 < (unint64_t)v49)
          {
            v51 = *(_QWORD *)(v44 + 80);
            v52 = (_QWORD *)(v51 + 24);
            if (*(_DWORD *)(v51 + 32) >= 0x41u)
              v52 = (_QWORD *)*v52;
            v53 = (_QWORD *)*v52;
            v54 = a5[2] >= 0x41 ? (unsigned int *)(*(_QWORD *)a5 + 8 * (v53 >> 6)) : a5;
            if (((*(_QWORD *)v54 >> (char)v53) & 1) == 0)
              return (_QWORD *)v287;
          }
          goto LABEL_317;
        }
        if (v50 - llvm::APInt::countLeadingZerosSlowCase(v48) <= 0x40)
        {
          v48 = *(llvm::APInt **)v48;
          goto LABEL_40;
        }
      }
LABEL_317:
      v25 = 0;
      v59 = 0;
      goto LABEL_318;
    case 150:
      v184 = *(uint64_t **)(a2 + 32);
      v185 = v184[5];
      v186 = v184[6];
      v187 = *(_QWORD *)(v184[10] + 80);
      v188 = (_QWORD *)(v187 + 24);
      __srcc = *v184;
      if (*(_DWORD *)(v187 + 32) >= 0x41u)
        v188 = (_QWORD *)*v188;
      v270 = v184[1];
      v189 = (_QWORD *)*v188;
      v277 = *(_OWORD *)(*(_QWORD *)(v185 + 40) + 16 * v186);
      v190 = sub_1C612FE00((llvm::EVT *)&v277, (const char *)a2);
      llvm::APInt::extractBits((llvm::APInt *)a5, v190, v189, (unsigned int *)&v277);
      v191 = DWORD2(v277);
      v192 = v277;
      if (DWORD2(v277) >= 0x41)
      {
        v193 = 0;
        v194 = ((unint64_t)DWORD2(v277) + 63) >> 6;
        do
        {
          v195 = v194-- < 1;
          if (v195)
            break;
          v196 = *(_QWORD *)(v277 + 8 * v194);
          v193 += __clz(v196);
        }
        while (!v196);
        v197 = DWORD2(v277) | 0xFFFFFFC0;
        if ((BYTE8(v277) & 0x3F) == 0)
          v197 = 0;
        if (DWORD2(v277) - v193 - v197 > 0x40)
        {
LABEL_199:
          if (!v189 && *(_WORD *)(__srcc + 24) == 51)
          {
            v198 = sub_1C5D86770(a1, v185, v186, a4, &v277, a6, (a7 + 1));
            if (v198)
            {
              v201 = v198;
              v202 = v199;
              v203 = (const char *)*(unsigned __int16 *)(a2 + 24);
              v204 = *(unsigned __int8 **)(a2 + 64);
              *(_QWORD *)&v286 = v204;
              if (v204)
                llvm::MetadataTracking::track((uint64_t)&v286, v204, 2);
              DWORD2(v286) = *(_DWORD *)(a2 + 60);
              v205 = *(uint64_t **)(a2 + 32);
              v206 = *(_QWORD *)(a2 + 40) + 16 * a3;
              v207 = *(llvm **)v206;
              v208 = *(_QWORD *)(v206 + 8);
              v209 = *v205;
              v210 = v205[1];
              v211 = v205[10];
              v212 = v205[11];
              v213 = *(_QWORD *)(a6 + 832);
              if (v213)
                LOWORD(v213) = *(_WORD *)(v213 + 8);
              *(_QWORD *)&v287 = sub_1C5D58E08(a6, v203, (const llvm::APInt *)&v286, v207, v208, v209, v210, v200, v201, v202, v211, v212, SHIDWORD(v212), v213);
              *((_QWORD *)&v287 + 1) = v214;
              if ((_QWORD)v286)
                llvm::MetadataTracking::untrack((uint64_t)&v286, (unsigned __int8 *)v286);
              v191 = DWORD2(v277);
LABEL_248:
              if (v191 < 0x41 || !(_QWORD)v277)
                return (_QWORD *)v287;
              goto LABEL_250;
            }
            v191 = DWORD2(v277);
          }
          if (v191 < 0x41)
            goto LABEL_317;
          v224 = v277;
          if (!(_QWORD)v277)
            goto LABEL_317;
LABEL_307:
          MEMORY[0x1CAA32F9C](v224, 0x1000C8000313F17);
          goto LABEL_317;
        }
        v192 = *(_QWORD *)v277;
      }
      if (!v192)
      {
        *(_QWORD *)&v287 = __srcc;
        *((_QWORD *)&v287 + 1) = v270;
        goto LABEL_248;
      }
      goto LABEL_199;
    case 153:
      v277 = *(_OWORD *)*(_QWORD *)(a2 + 40);
      v129 = *(_QWORD *)(a2 + 80);
      sub_1C612FE00((llvm::EVT *)&v277, (const char *)a2);
      if ((_DWORD)v20)
      {
        v130 = 0;
        v131 = 1;
        v132 = 1;
        v133 = 1;
        do
        {
          while (1)
          {
            v134 = *(unsigned int *)(v129 + 4 * v130);
            if ((v134 & 0x80000000) != 0)
              break;
            v135 = (unsigned int *)(*(_QWORD *)a5 + 8 * (v130 >> 6));
            if (a5[2] < 0x41)
              v135 = a5;
            if (((*(_QWORD *)v135 >> v130) & 1) == 0)
              break;
            v133 = 0;
            v132 &= v130 == v134;
            v131 &= v130 == (_DWORD)v134 - (_DWORD)v20;
            v46 = v20 - 1 == v130++;
            if (v46)
              goto LABEL_210;
          }
          ++v130;
        }
        while (v20 != v130);
        if ((v133 & 1) != 0)
          goto LABEL_254;
LABEL_210:
        if ((v132 & 1) != 0)
        {
          return (_QWORD *)*(_OWORD *)*(_QWORD *)(a2 + 32);
        }
        else
        {
          if ((v131 & 1) == 0)
            goto LABEL_317;
          return (_QWORD *)*(_OWORD *)(*(_QWORD *)(a2 + 32) + 40);
        }
      }
LABEL_254:
      v230 = *(_QWORD *)(a2 + 40) + 16 * a3;
      v231 = (uint64_t)sub_1C61312D0(a6, *(llvm **)v230, *(_QWORD *)(v230 + 8));
LABEL_259:
      *(_QWORD *)&v287 = v231;
      *((_QWORD *)&v287 + 1) = v232;
      return (_QWORD *)v287;
  }
LABEL_138:
  if (v11 < 0x186)
    goto LABEL_317;
  v59 = (llvm::APInt *)(*(uint64_t (**)(unsigned int *, uint64_t, _BOOL8, unsigned int *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1672))(a1, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)&v287 = v59;
  *((_QWORD *)&v287 + 1) = v136;
  if (!v59)
  {
LABEL_140:
    v25 = 0;
LABEL_318:
    v60 = 0;
    v30 = 0;
    LODWORD(v26) = 1;
LABEL_319:
    LODWORD(v61) = 1;
    v31 = 1;
    LODWORD(v62) = 1;
    goto LABEL_320;
  }
  return (_QWORD *)v287;
}

uint64_t *sub_1C5D87C40(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::APInt *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  llvm::APInt *v16;
  unsigned int v17;
  uint64_t v18;
  __int128 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm *v46;
  llvm::LLVMContext *v47;
  llvm::Type *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int16 v65;
  uint64_t ExtendedIntegerVT;
  uint64_t v67;
  int v68;
  int v69;
  unsigned __int8 *v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v74;
  _QWORD v75[3];
  __int128 v76;
  __int128 v77;

  v14 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), a6, 0, 0);
  if (!v14)
    return 0;
  v15 = *(_QWORD *)(v14 + 80);
  v16 = (llvm::APInt *)(v15 + 24);
  v17 = *(_DWORD *)(v15 + 32);
  if (v17 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v16) != v17 - 1)
      return 0;
  }
  else if (*(_QWORD *)v16 != 1)
  {
    return 0;
  }
  v18 = **(_QWORD **)(a1 + 32);
  if (*(_WORD *)(v18 + 24) != 56)
    return 0;
  v19 = *(__int128 **)(v18 + 32);
  v77 = *v19;
  v76 = *(__int128 *)((char *)v19 + 40);
  v75[0] = a6;
  v75[1] = &v77;
  v75[2] = &v76;
  if (*(_WORD *)(v77 + 24) == 56
    && (sub_1C5DA51BC((uint64_t)v75, **(_QWORD **)(v77 + 32), *(_QWORD *)(*(_QWORD *)(v77 + 32) + 8), *(_QWORD *)(*(_QWORD *)(v77 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v77 + 32) + 48), v76, DWORD2(v76)) & 1) != 0)
  {
    v68 = 1;
  }
  else if (*(_WORD *)(v76 + 24) == 56)
  {
    v68 = sub_1C5DA51BC((uint64_t)v75, **(_QWORD **)(v76 + 32), *(_QWORD *)(*(_QWORD *)(v76 + 32) + 8), *(_QWORD *)(*(_QWORD *)(v76 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v76 + 32) + 48), v77, DWORD2(v77));
  }
  else
  {
    v68 = 0;
  }
  v69 = *(unsigned __int16 *)(a1 + 24);
  v20 = sub_1C5D4F9D8(a3, v77, *((_BOOL8 *)&v77 + 1), (unsigned int *)a6, a7);
  v21 = sub_1C5D4F9D8(a3, v76, *((_BOOL8 *)&v76 + 1), (unsigned int *)a6, a7);
  if (v21 >= v20)
    v22 = v20;
  else
    v22 = v21;
  sub_1C5D44BD8(a3, v77, *((_BOOL8 *)&v77 + 1), a6, a7, (uint64_t)&v72);
  v23 = DWORD2(v72);
  if (DWORD2(v72) > 0x40)
  {
    v24 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v72);
  }
  else if (DWORD2(v72))
  {
    v24 = __clz(~((_QWORD)v72 << -BYTE8(v72)));
  }
  else
  {
    v24 = 0;
  }
  if (v74 >= 0x41 && v73)
  {
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
    v23 = DWORD2(v72);
  }
  if (v23 >= 0x41 && (_QWORD)v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  sub_1C5D44BD8(a3, v76, *((_BOOL8 *)&v76 + 1), a6, a7, (uint64_t)&v72);
  v27 = DWORD2(v72);
  if (DWORD2(v72) > 0x40)
  {
    v28 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v72);
  }
  else if (DWORD2(v72))
  {
    v28 = __clz(~((_QWORD)v72 << -BYTE8(v72)));
  }
  else
  {
    v28 = 0;
  }
  if (v74 >= 0x41 && v73)
  {
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
    v27 = DWORD2(v72);
  }
  v29 = v22 - 1;
  if (v27 >= 0x41 && (_QWORD)v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  if (v28 >= v24)
    v28 = v24;
  if (v69 != 176)
  {
    if (!v28 || v29 >= v28)
    {
      if (!v29)
        return 0;
      v30 = *(_DWORD *)(a5 + 8);
      v31 = v30 - 1;
      v32 = (_QWORD *)(v30 >= 0x41 ? *(_QWORD *)a5 + 8 * ((v30 - 1) >> 6) : a5);
      if (((*v32 >> v31) & 1) != 0)
        return 0;
      goto LABEL_45;
    }
LABEL_44:
    v35 = 162;
    v36 = 199;
    v37 = 164;
    goto LABEL_46;
  }
  if (v28 >= 2 && v29 < v28)
    goto LABEL_44;
  if (!v29)
    return 0;
LABEL_45:
  v35 = 161;
  v36 = 198;
  v37 = 163;
  v28 = v29;
LABEL_46:
  if (v68)
    v38 = v37;
  else
    v38 = v35;
  v72 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
  LODWORD(v39) = sub_1C6131328((unsigned __int8 *)&v72, v25, v26) - v28;
  if (v39 <= 8)
    v39 = 8;
  else
    v39 = v39;
  v40 = (v39 - 1) | ((unint64_t)(v39 - 1) >> 1) | (((v39 - 1) | ((unint64_t)(v39 - 1) >> 1)) >> 2);
  v41 = v40 | (v40 >> 4) | ((v40 | (v40 >> 4)) >> 8);
  v42 = (v41 >> 16) | v41;
  if (v42 > 62)
  {
    if (v42 == 63)
    {
      v43 = 0;
      v44 = 0;
      v45 = 6;
      goto LABEL_61;
    }
    if (v42 == 127)
    {
      v43 = 0;
      v44 = 0;
      v45 = 7;
      goto LABEL_61;
    }
  }
  else
  {
    switch(v42)
    {
      case 31:
        v43 = 0;
        v44 = 0;
        v45 = 5;
        goto LABEL_61;
      case 15:
        v43 = 0;
        v44 = 0;
        v45 = 4;
        goto LABEL_61;
      case 7:
        v43 = 0;
        v44 = 0;
        v45 = 3;
        goto LABEL_61;
    }
  }
  ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a3 + 56), (llvm::LLVMContext *)(v42 + 1));
  v44 = v67;
  v43 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
  v45 = ExtendedIntegerVT;
LABEL_61:
  v46 = (llvm *)(v45 | v43);
  if ((_BYTE)v72)
  {
    if (v72 - 15 >= 0x9C)
      goto LABEL_64;
    goto LABEL_63;
  }
  if ((*(_DWORD *)(*((_QWORD *)&v72 + 1) + 8) & 0xFE) == 0x12)
  {
LABEL_63:
    v47 = *(llvm::LLVMContext **)(a3 + 56);
    v48 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)&v72);
    v46 = (llvm *)sub_1C47AC578(v47, (uint64_t)v46, v44, v48);
    v44 = v49;
  }
LABEL_64:
  if (!(_BYTE)v46
    || v46 != 1 && !*(_QWORD *)(a4 + 8 * v46 + 96)
    || (*(_BYTE *)(a4 + 390 * v46 + v38 + 3862) & 0xFB) != 0)
  {
    return 0;
  }
  v50 = *(unsigned __int8 **)(a1 + 64);
  v70 = v50;
  if (v50)
    llvm::MetadataTracking::track((uint64_t)&v70, v50, 2);
  v71 = *(_DWORD *)(a1 + 60);
  v51 = *(_QWORD *)(a3 + 832);
  if (v51)
    v52 = *(_WORD *)(v51 + 8);
  else
    v52 = 0;
  v53 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v70, v46, v44, v77, *((unint64_t *)&v77 + 1), v52);
  v55 = v54;
  v56 = *(_QWORD *)(a3 + 832);
  if (v56)
    v57 = *(_WORD *)(v56 + 8);
  else
    v57 = 0;
  v58 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v70, v46, v44, v76, *((unint64_t *)&v76 + 1), v57);
  v61 = *(_QWORD *)(a3 + 832);
  if (v61)
    LOWORD(v61) = *(_WORD *)(v61 + 8);
  v63 = sub_1C5D56C70(a3, v38, (const llvm::APInt *)&v70, v46, v44, (uint64_t)v53, v55, v60, (uint64_t)v58, v59, v61);
  v64 = *(_QWORD *)(a3 + 832);
  if (v64)
    v65 = *(_WORD *)(v64 + 8);
  else
    v65 = 0;
  v33 = sub_1C5D52060(a3, v36, (const llvm::APInt *)&v70, (llvm *)v72, *((uint64_t *)&v72 + 1), (uint64_t)v63, v62, v65);
  if (v70)
    llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
  return v33;
}

uint64_t sub_1C5D88238(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, unsigned int a8, char a9)
{
  unint64_t v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  void **p_b;
  void *v27;
  int v28;
  int64_t v29;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  void *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v85;
  _QWORD **v86;
  unsigned int v87;
  _QWORD *v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  _BYTE *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  void *v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v111;
  char v112;
  uint64_t v113;
  void *v114;
  size_t v115;
  uint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  void *v124;
  void *v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  unsigned int v129;
  char v130;
  void *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  void *v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  void *v146;
  _QWORD *v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  void *v153;
  int v154;
  unsigned int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  llvm::Type *v160;
  char *v161;
  char *v162;
  void *v163;
  unsigned int v164;
  _QWORD *v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unsigned int v181;
  size_t v182;
  unsigned int v183;
  uint64_t v184;
  llvm::EVT **v185;
  void *v186;
  unint64_t EVT;
  const char *v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  unsigned int v205;
  BOOL v206;
  uint64_t v207;
  uint64_t v208;
  BOOL v209;
  char *v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  unsigned int v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  llvm::APInt **v220;
  llvm::APInt **v221;
  void *v222;
  uint64_t v223;
  int v224;
  unsigned __int8 *v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  size_t v229;
  int v230;
  unsigned int v231;
  int v232;
  char v233;
  char v234;
  void *v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  unint64_t v242;
  void **v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  unsigned int v256;
  void *v257;
  unsigned int v258;
  unsigned int v259;
  void *v260;
  uint64_t *v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  _QWORD *v269;
  int v270;
  void *v271;
  char v272;
  char v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  char v279;
  char v280;
  _DWORD *v281;
  char v282;
  unint64_t v283;
  void **v284;
  unsigned int v285;
  void **v286;
  void **v287;
  BOOL v288;
  BOOL v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unint64_t v295;
  unint64_t v296;
  void **v297;
  uint64_t v298;
  _QWORD *v299;
  void **v300;
  char *v301;
  char *v302;
  unsigned int v303;
  uint64_t v304;
  void **v305;
  _QWORD *v306;
  uint64_t v307;
  char v308;
  uint64_t *v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  void **v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  char *v317;
  _QWORD *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  void *v325;
  _QWORD *v326;
  int v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  void *v331;
  int v332;
  int64_t v333;
  unint64_t v334;
  unsigned int v335;
  uint64_t v336;
  llvm::Type *v337;
  int v338;
  int v339;
  int v340;
  BOOL v341;
  uint64_t v342;
  unsigned __int8 *v343;
  llvm *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t *v362;
  int v363;
  int64_t v364;
  unint64_t v365;
  unsigned int v366;
  void *v367;
  void *v368;
  unsigned int v369;
  char v370;
  uint64_t v371;
  BOOL v372;
  unsigned int i;
  uint64_t v374;
  void **v375;
  uint64_t v376;
  void **v377;
  void **v378;
  int v379;
  unsigned int v380;
  char v381;
  int v382;
  unsigned int v383;
  uint64_t v384;
  void **v385;
  uint64_t v386;
  int v387;
  int v388;
  _QWORD *v389;
  int v390;
  int v391;
  _QWORD *v392;
  llvm::Type *v393;
  int v394;
  int v395;
  int v396;
  void *v397;
  int v398;
  int64_t v399;
  unint64_t v400;
  unsigned int v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  int v405;
  unsigned __int8 *v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void **v411;
  unsigned __int8 *v412;
  void **v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  const char *v417;
  unsigned __int8 *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  int v425;
  int v426;
  int v427;
  _QWORD *v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  int v443;
  int v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  int v462;
  _QWORD *v463;
  int v464;
  int v465;
  uint64_t *v466;
  unsigned int v467;
  void **v468;
  int v469;
  int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t v475;
  void **v476;
  uint64_t v477;
  _QWORD *v478;
  unint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  unsigned int v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  int v489;
  unsigned int v490;
  unint64_t v491;
  _BOOL8 v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int v495;
  int v496;
  uint64_t v497;
  int v498;
  uint64_t v499;
  llvm *v500;
  size_t __n;
  unsigned int __na;
  unsigned int __nb;
  uint64_t v504;
  unsigned __int8 v505;
  char *v506;
  uint64_t v507;
  unsigned int v508;
  unsigned int v509;
  llvm::APInt *v510;
  unsigned int v511;
  llvm::APInt *v512;
  void *v513;
  int v514;
  unsigned __int8 *v515;
  int v516;
  __int128 v517;
  unsigned __int8 *v518;
  uint64_t v519;
  void *v520;
  unsigned int v521;
  void *v522[2];
  void *v523;
  unsigned int v524;
  void *__src[2];
  _QWORD v526[7];
  unsigned __int8 *v527;
  int v528;
  void *__b;
  unsigned int v530;
  int v531;
  __int128 v532;
  unsigned int v533;
  uint64_t v534;
  uint64_t v535;
  void *v536[2];
  uint64_t *v537;
  int v538;
  void *v539[2];
  uint64_t v540;
  unsigned int v541;
  uint64_t v542;

  v542 = *MEMORY[0x1E0C80C00];
  v534 = a2;
  v535 = a3;
  v533 = a8;
  v532 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v531 = *(unsigned __int16 *)(a2 + 24);
  v14 = *(unsigned int *)(a4 + 8);
  v15 = v14;
  v530 = *(_DWORD *)(a4 + 8);
  if (v14 > 0x40)
  {
    __b = (void *)operator new[]();
    memcpy(__b, *(const void **)a4, ((v14 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v539[1]) = v14;
    llvm::APInt::initSlowCase((llvm::APInt *)v539, 0, 0);
  }
  else
  {
    __b = *(void **)a4;
    LODWORD(v539[1]) = v14;
    v539[0] = 0;
  }
  if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
    MEMORY[0x1CAA32F9C](*a6, 0x1000C8000313F17);
  v16 = v539[0];
  *a6 = v539[0];
  v17 = v539[1];
  *((_DWORD *)a6 + 2) = v539[1];
  if (*((_DWORD *)a5 + 2) > 0x40u || v17 > 0x40)
  {
    if (a5 != a6)
    {
      llvm::APInt::reallocate((uint64_t)a5, v17);
      v34 = *((unsigned int *)a5 + 2);
      if (v34 <= 0x40)
        *a5 = *a6;
      else
        memcpy((void *)*a5, (const void *)*a6, ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *a5 = v16;
    *((_DWORD *)a5 + 2) = *((_DWORD *)a6 + 2);
  }
  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a7 + 24) + 1600))(*(_QWORD *)(*(_QWORD *)a7 + 24), v534, v535, a7))goto LABEL_41;
  if ((_BYTE)v532)
  {
    if (v532 - 120 < 0x33)
      goto LABEL_41;
  }
  else if (*(_BYTE *)(*((_QWORD *)&v532 + 1) + 8) == 19)
  {
LABEL_41:
    v21 = 0;
    goto LABEL_42;
  }
  if (*(_WORD *)(v534 + 24) == 51)
  {
    v19 = *((unsigned int *)a5 + 2);
    if (v19 > 0x40)
    {
      memset((void *)*a5, 255, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v19) = *((_DWORD *)a5 + 2);
      if ((_DWORD)v19)
      {
LABEL_19:
        v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
        if (v19 >= 0x41)
          a5 = (_QWORD *)(*a5 + 8 * ((((unint64_t)v19 + 63) >> 6) - 1));
        goto LABEL_21;
      }
    }
    else
    {
      *a5 = -1;
      if ((_DWORD)v19)
        goto LABEL_19;
    }
    v20 = 0;
LABEL_21:
    v21 = 0;
    *a5 &= v20;
    goto LABEL_42;
  }
  v22 = *(_QWORD *)(v534 + 48);
  if (v22)
    LOBYTE(v22) = *(_QWORD *)(v22 + 32) == 0;
  v23 = v530;
  if ((v22 & 1) == 0 && (a9 & 1) == 0)
  {
    if (v530 > 0x40)
    {
      memset(__b, 255, (((unint64_t)v530 + 63) >> 3) & 0x3FFFFFF8);
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v530;
      p_b = (void **)((char *)__b + 8 * (((unint64_t)v530 + 63) >> 6) - 8);
      v24 = (uint64_t)*p_b;
    }
    else
    {
      v24 = -1;
      __b = (void *)-1;
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v530;
      if (!v530)
        v25 = 0;
      p_b = &__b;
    }
    *p_b = (void *)(v24 & v25);
    v23 = v530;
  }
  v27 = __b;
  if (v23 < 0x41)
  {
LABEL_39:
    if (v27)
      goto LABEL_40;
    v49 = *((unsigned int *)a5 + 2);
    if (v49 > 0x40)
    {
      memset((void *)*a5, 255, ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v49) = *((_DWORD *)a5 + 2);
      if ((_DWORD)v49)
      {
LABEL_58:
        v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
        if (v49 >= 0x41)
          a5 = (_QWORD *)(*a5 + 8 * ((((unint64_t)v49 + 63) >> 6) - 1));
        goto LABEL_60;
      }
    }
    else
    {
      *a5 = -1;
      if ((_DWORD)v49)
        goto LABEL_58;
    }
    v50 = 0;
LABEL_60:
    *a5 &= v50;
    v51 = v534;
    v52 = v535;
    v53 = sub_1C61312D0(*(_QWORD *)a7, (llvm *)v532, *((uint64_t *)&v532 + 1));
    *(_QWORD *)(a7 + 16) = v51;
    *(_DWORD *)(a7 + 24) = v52;
    *(_QWORD *)(a7 + 32) = v53;
    *(_DWORD *)(a7 + 40) = v54;
    v21 = 1;
    goto LABEL_42;
  }
  v28 = 0;
  v29 = ((unint64_t)v23 + 63) >> 6;
  do
  {
    v30 = v29-- < 1;
    if (v30)
      break;
    v31 = *((_QWORD *)__b + v29);
    v28 += __clz(v31);
  }
  while (!v31);
  v32 = v23 | 0xFFFFFFC0;
  if ((v23 & 0x3F) == 0)
    v32 = 0;
  if (v23 - v28 - v32 <= 0x40)
  {
    v27 = *(void **)__b;
    goto LABEL_39;
  }
LABEL_40:
  if (v533 > 5)
    goto LABEL_41;
  v35 = v534;
  v36 = *(unsigned __int8 **)(v534 + 64);
  v527 = v36;
  if (v36)
    llvm::MetadataTracking::track((uint64_t)&v527, v36, 2);
  v528 = *(_DWORD *)(v35 + 60);
  v37 = sub_1C6131328((unsigned __int8 *)&v532, (uint64_t)v36, v18);
  v40 = v37;
  v41 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a7 + 40) + 40) + 272);
  v526[0] = a1;
  v526[1] = &__b;
  v526[2] = a7;
  v526[3] = &v533;
  v526[4] = &v531;
  v526[5] = &v534;
  v526[6] = &v532;
  if (v531 <= 145)
  {
    if (v531 > 95)
    {
      if ((v531 - 96) < 5)
        goto LABEL_63;
LABEL_166:
      v127 = v534;
      if (*(unsigned __int16 *)(v534 + 24) < 0x186u)
      {
        LODWORD(v539[1]) = 1;
        v539[0] = 0;
        v541 = 1;
        v540 = 0;
        LODWORD(v536[1]) = v37;
        if (v37 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v536, -1, 1);
          v127 = v534;
          v129 = v536[1];
        }
        else
        {
          if (v37)
            v128 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v37);
          else
            v128 = 0;
          v129 = v37;
          v536[0] = v128;
        }
        v130 = sub_1C5D7BE14(a1, v127, v535, v536, a4, v539, a7, v533, a9);
        if (v129 >= 0x41 && v536[0])
          MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
        if (v541 >= 0x41 && v540)
          MEMORY[0x1CAA32F9C](v540, 0x1000C8000313F17);
        if (LODWORD(v539[1]) >= 0x41 && v539[0])
          MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
        if ((v130 & 1) == 0)
          goto LABEL_197;
      }
      else if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 1656))(a1) & 1) == 0)
      {
        goto LABEL_197;
      }
      goto LABEL_473;
    }
    switch(v531)
    {
      case '8':
        v105 = *(uint64_t **)(v534 + 32);
        v106 = *v105;
        v107 = v105[1];
        v108 = v105[5];
        v109 = *((_DWORD *)v105 + 12);
        if (v106 == v108 && v109 == (_DWORD)v107)
        {
          v111 = *(_QWORD *)(v106 + 48);
          if (v111)
          {
            do
            {
              if (*(_QWORD *)(v111 + 16) != v534)
                goto LABEL_63;
              v111 = *(_QWORD *)(v111 + 32);
            }
            while (v111);
            LODWORD(v539[1]) = 1;
            v539[0] = 0;
            LODWORD(v536[1]) = 1;
            v536[0] = 0;
            v112 = sub_1C5D88238(a1);
            if (LODWORD(v536[1]) >= 0x41 && v536[0])
              MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
            if (LODWORD(v539[1]) >= 0x41 && v539[0])
              MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
            if ((v112 & 1) != 0)
              goto LABEL_473;
          }
        }
        break;
      case '9':
        break;
      case ':':
LABEL_90:
        v66 = *(uint64_t **)(v534 + 32);
        v67 = *v66;
        v68 = v66[1];
        v69 = v66[5];
        v70 = v66[6];
        LODWORD(v539[1]) = 1;
        v539[0] = 0;
        LODWORD(v536[1]) = 1;
        v536[0] = 0;
        if ((sub_1C5D88238(a1) & 1) != 0 || (sub_1C5D88238(a1) & 1) != 0)
        {
LABEL_92:
          if (LODWORD(v536[1]) >= 0x41 && v536[0])
            MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
          if (LODWORD(v539[1]) >= 0x41)
          {
            v71 = v539[0];
            if (v539[0])
LABEL_97:
              MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
          }
          goto LABEL_473;
        }
        v121 = *((unsigned int *)a6 + 2);
        if (v121 > 0x40)
        {
          v165 = (_QWORD *)*a6;
          v166 = (uint64_t *)v536[0];
          v167 = (unint64_t)(v121 + 63) >> 6;
          do
          {
            v168 = *v166++;
            *v165++ |= v168;
            --v167;
          }
          while (v167);
        }
        else
        {
          *a6 |= (unint64_t)v536[0];
        }
        v169 = *((unsigned int *)a5 + 2);
        if (v169 > 0x40)
        {
          v170 = (_QWORD *)*a5;
          v171 = (uint64_t *)v539[0];
          v172 = (unint64_t)(v169 + 63) >> 6;
          do
          {
            v173 = *v171++;
            *v170++ &= v173;
            --v172;
          }
          while (v172);
        }
        else
        {
          *a5 &= (unint64_t)v539[0];
          LODWORD(v121) = *((_DWORD *)a6 + 2);
        }
        v514 = v121;
        if (v121 > 0x40)
        {
          v176 = (((unint64_t)v121 + 63) >> 3) & 0x3FFFFFF8;
          v513 = (void *)operator new[]();
          memcpy(v513, (const void *)*a6, v176);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v513);
          LODWORD(v121) = v514;
          v175 = (unint64_t)v513;
          LODWORD(v169) = *((_DWORD *)a5 + 2);
        }
        else
        {
          v174 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v121;
          if (!(_DWORD)v121)
            v174 = 0;
          v175 = v174 & ~*a6;
        }
        if (v169 > 0x40)
        {
          v177 = (_QWORD *)*a5;
          v178 = ((unint64_t)v169 + 63) >> 6;
          v179 = (uint64_t *)v175;
          do
          {
            v180 = *v179++;
            *v177++ &= v180;
            --v178;
          }
          while (v178);
        }
        else
        {
          *a5 &= v175;
        }
        if (v121 >= 0x41 && v175)
          MEMORY[0x1CAA32F9C](v175, 0x1000C8000313F17);
        v181 = v530;
        if (v530)
        {
          if (v530 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v181)
              goto LABEL_289;
          }
          else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v530))
          {
            goto LABEL_289;
          }
          if (sub_1C5D8C504((uint64_t)v526, v67, v68, v69, v70))
            goto LABEL_92;
        }
LABEL_289:
        if (LODWORD(v536[1]) >= 0x41 && v536[0])
          MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
        if (LODWORD(v539[1]) >= 0x41 && v539[0])
          MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
        goto LABEL_197;
      default:
        goto LABEL_166;
    }
LABEL_63:
    v55 = *(uint64_t **)(v534 + 32);
    v56 = *v55;
    v57 = v55[1];
    v59 = v55[5];
    v58 = v55[6];
    v60 = 1;
    LODWORD(__src[1]) = 1;
    __src[0] = 0;
    v524 = 1;
    v523 = 0;
    if ((sub_1C5D88238(a1) & 1) != 0)
      goto LABEL_71;
    LODWORD(v522[1]) = 1;
    v522[0] = 0;
    v521 = 1;
    v520 = 0;
    if ((sub_1C5D88238(a1) & 1) != 0)
    {
LABEL_65:
      if (v521 >= 0x41 && v520)
        MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
      if (LODWORD(v522[1]) >= 0x41 && v522[0])
        MEMORY[0x1CAA32F9C](v522[0], 0x1000C8000313F17);
LABEL_71:
      if (v524 >= 0x41 && v523)
        MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      if (v60 == 2)
        goto LABEL_197;
      goto LABEL_473;
    }
    v492 = v57;
    v493 = v56;
    v494 = v59;
    v164 = v521;
    if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
      MEMORY[0x1CAA32F9C](*a6, 0x1000C8000313F17);
    *a6 = (unint64_t)v523 & (unint64_t)v520;
    *((_DWORD *)a6 + 2) = v164;
    __n = *(_QWORD *)a7;
    v507 = v534;
    v184 = *(_QWORD *)(v534 + 40) + 16 * v535;
    v186 = *(void **)v184;
    v185 = *(llvm::EVT ***)(v184 + 8);
    v539[0] = v186;
    v539[1] = v185;
    if ((_BYTE)v186)
    {
      v505 = sub_1C47F37A0((unsigned __int8 *)v539);
      v189 = 0;
      v512 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(v185[3], 0, v61);
      v512 = (llvm::APInt *)v188;
      v189 = EVT & 0xFFFFFFFFFFFFFF00;
      v505 = EVT;
    }
    v190 = sub_1C612FE00((llvm::EVT *)v539, v188);
    v192 = v190;
    LODWORD(v519) = v190;
    if (v190 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v518, 0, 0);
      v495 = v519;
      goto LABEL_303;
    }
    v518 = 0;
    v495 = v190;
    if (v190)
    {
LABEL_303:
      v193 = 0;
      v194 = 0;
      v196 = v505;
      v195 = v507;
      v197 = v192;
      v497 = v192;
      v500 = (llvm *)(v189 | v505);
      while (1)
      {
        v198 = v194 >> 6;
        v199 = LODWORD(v522[1]) >= 0x41 ? (char *)v522[0] + 8 * v198 : (char *)v522;
        v200 = 1 << v194;
        if ((*(_QWORD *)v199 & (1 << v194)) != 0)
        {
          v226 = sub_1C61312D0(__n, v500, (uint64_t)v512);
          v197 = v497;
          v196 = v505;
          v195 = v507;
          v203 = (uint64_t)v226;
          v201 = v227;
        }
        else
        {
          v201 = 0;
          v202 = **(_QWORD **)(v195 + 32);
          if (v202)
          {
            v203 = 0;
            if (*(_WORD *)(v202 + 24) == 146)
            {
              v204 = (uint64_t *)(*(_QWORD *)(v202 + 32) + v193);
              v203 = *v204;
              v201 = v204[1];
              v205 = *(unsigned __int16 *)(*v204 + 24);
              v206 = v205 == 35 || v205 == 11;
              v207 = v206 ? *v204 : 0;
              v30 = v205 > 0x33;
              v208 = (1 << v205) & 0x8001000001000;
              v209 = v30 || v208 == 0;
              if (v209 && (!v207 || (*(_BYTE *)(v207 + 26) & 8) != 0))
              {
                v201 = 0;
                v203 = 0;
              }
            }
          }
          else
          {
            v203 = 0;
          }
        }
        v210 = LODWORD(__src[1]) >= 0x41 ? (char *)__src[0] + 8 * v198 : (char *)__src;
        if ((*(_QWORD *)v210 & v200) != 0)
          break;
        v211 = *(_QWORD *)(*(_QWORD *)(v195 + 32) + 40);
        if (v211 && *(_WORD *)(v211 + 24) == 146)
        {
          v212 = (uint64_t *)(*(_QWORD *)(v211 + 32) + v193);
          v214 = *v212;
          v213 = v212[1];
          v215 = *(unsigned __int16 *)(*v212 + 24);
          v216 = v215 == 35 || v215 == 11;
          v217 = v216 ? *v212 : 0;
          v30 = v215 > 0x33;
          v218 = (1 << v215) & 0x8001000001000;
          v219 = v30 || v218 == 0;
          if (!v219 || v217 && (*(_BYTE *)(v217 + 26) & 8) == 0)
            goto LABEL_341;
        }
LABEL_361:
        ++v194;
        v193 += 40;
        if (v197 == v194)
          goto LABEL_370;
      }
      v228 = sub_1C61312D0(__n, v500, (uint64_t)v512);
      v197 = v497;
      v196 = v505;
      v195 = v507;
      v214 = (uint64_t)v228;
LABEL_341:
      if (v203)
      {
        if (v214)
        {
          v220 = (llvm::APInt **)(*(_QWORD *)(v203 + 40) + 16 * v201);
          if (*(unsigned __int8 *)v220 == v196 && (v196 || v220[1] == v512))
          {
            v221 = (llvm::APInt **)(*(_QWORD *)(v214 + 40) + 16 * v213);
            if (*(unsigned __int8 *)v221 == v196 && (v196 || v221[1] == v512))
            {
              v491 = v213;
              v490 = *(unsigned __int16 *)(v195 + 24);
              v222 = *(void **)(v195 + 64);
              v536[0] = v222;
              if (v222)
                llvm::MetadataTracking::track((uint64_t)v536, (unsigned __int8 *)v222, 2);
              LODWORD(v536[1]) = *(_DWORD *)(v507 + 60);
              v223 = *(_QWORD *)(__n + 832);
              if (v223)
                LOWORD(v223) = *(_WORD *)(v223 + 8);
              v224 = *((unsigned __int16 *)sub_1C5D56C70(__n, v490, (const llvm::APInt *)v536, v500, (uint64_t)v512, v203, v201, v191, v214, v491, v223)+ 12);
              if (v536[0])
                llvm::MetadataTracking::untrack((uint64_t)v536, (unsigned __int8 *)v536[0]);
              v196 = v505;
              v195 = v507;
              v197 = v497;
              if (v224 == 51)
              {
                v225 = &v518[8 * v198];
                if (v495 < 0x41)
                  v225 = (unsigned __int8 *)&v518;
                *(_QWORD *)v225 |= v200;
              }
            }
          }
        }
      }
      goto LABEL_361;
    }
    v495 = 0;
LABEL_370:
    if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
      MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
    *a5 = v518;
    *((_DWORD *)a5 + 2) = v495;
    v231 = v530;
    if (v530)
    {
      if (v530 <= 0x40)
      {
        if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v530))
          goto LABEL_381;
LABEL_379:
        if (sub_1C5D8C504((uint64_t)v526, v493, v492, v494, v58))
        {
          v60 = 1;
          goto LABEL_65;
        }
        goto LABEL_381;
      }
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) != v231)
        goto LABEL_379;
    }
LABEL_381:
    v60 = 2;
    goto LABEL_65;
  }
  switch(v531)
  {
    case 146:
      v89 = v530;
      if (!v530)
        goto LABEL_244;
      if (v530 > 0x40)
      {
        v155 = v37;
        v156 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b);
        v40 = v155;
        if (v156 == v89)
        {
LABEL_244:
          if (!(_DWORD)v14)
            goto LABEL_197;
          v158 = 0;
          v159 = 0;
          v160 = (llvm::Type *)v40;
          while (1)
          {
            *(_OWORD *)v539 = *(_OWORD *)(*(_QWORD *)(v534 + 32) + v158);
            if (*((_WORD *)v539[0] + 12) == 51)
            {
              v161 = (char *)a5;
              if (*((_DWORD *)a5 + 2) >= 0x41u)
              {
                v162 = (char *)*a5;
LABEL_249:
                v161 = &v162[8 * (v159 >> 6)];
              }
            }
            else
            {
              if (v160 != sub_1C6329368((unsigned int *)v539, v38, (BOOL)v39))
                goto LABEL_251;
              v163 = v539[0];
              if (!sub_1C6368AD4((uint64_t)v539[0]) && !sub_1C636F3A8((uint64_t)v163))
                goto LABEL_251;
              v161 = (char *)a6;
              if (*((_DWORD *)a6 + 2) >= 0x41u)
              {
                v162 = (char *)*a6;
                goto LABEL_249;
              }
            }
            *(_QWORD *)v161 |= 1 << v159;
LABEL_251:
            ++v159;
            v158 += 40;
            if (v14 == v159)
              goto LABEL_197;
          }
        }
      }
      else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v530))
      {
        goto LABEL_244;
      }
      if (*(_WORD *)(v534 + 56))
      {
        v38 = *(_QWORD *)(v534 + 32);
        v39 = (char *)(v38 + 40 * *(unsigned __int16 *)(v534 + 56));
        v157 = v38;
        while (*(_QWORD *)v38 == *(_QWORD *)v157 && *(_DWORD *)(v38 + 8) == *(_DWORD *)(v157 + 8))
        {
          v157 += 40;
          if ((char *)v157 == v39)
            goto LABEL_244;
        }
        v509 = v40;
        v539[0] = &v540;
        v539[1] = (void *)0x2000000000;
        sub_1C6132D88((unsigned int *)v539, (char *)v38, v39);
        if ((_DWORD)v14)
        {
          v307 = 0;
          v308 = 0;
LABEL_583:
          v309 = (uint64_t *)v539[0];
          v310 = 16 * v307++;
          do
          {
            v311 = v307 - 1;
            v312 = (v307 - 1) >> 6;
            v313 = (void **)((char *)__b + 8 * v312);
            if (v530 < 0x41)
              v313 = &__b;
            v314 = 1 << v311;
            if (((unint64_t)*v313 & (1 << v311)) == 0
              && *(_WORD *)(*(_QWORD *)((char *)v539[0] + v310) + 24) != 51)
            {
              v315 = *(_QWORD *)(*(_QWORD *)v539[0] + 40) + 16 * *((unsigned int *)v539[0] + 2);
              v316 = sub_1C61312D0(*(_QWORD *)a7, *(llvm **)v315, *(_QWORD *)(v315 + 8));
              v317 = (char *)v539[0] + v310;
              *(_QWORD *)v317 = v316;
              *((_DWORD *)v317 + 2) = v38;
              if (*((_DWORD *)a5 + 2) >= 0x41u)
                v318 = (_QWORD *)(*a5 + 8 * v312);
              else
                v318 = a5;
              *v318 |= v314;
              v308 = 1;
              if (v307 == v14)
              {
                v309 = (uint64_t *)v539[0];
                goto LABEL_861;
              }
              goto LABEL_583;
            }
            ++v307;
            v310 += 16;
          }
          while (v307 - v14 != 1);
          if ((v308 & 1) == 0)
          {
            v370 = 0;
            goto LABEL_755;
          }
LABEL_861:
          v447 = v534;
          v446 = v535;
          v448 = *(_QWORD *)(*(_QWORD *)a7 + 832);
          v449 = v448 ? *(unsigned __int16 *)(v448 + 8) : 0;
          v466 = sub_1C636D0C8(*(_QWORD *)a7, (const char *)0x92, (const llvm::APInt *)&v527, (llvm *)v532, *((uint64_t *)&v532 + 1), v309, LODWORD(v539[1]), v449);
          *(_QWORD *)(a7 + 16) = v447;
          *(_DWORD *)(a7 + 24) = v446;
          *(_QWORD *)(a7 + 32) = v466;
          *(_DWORD *)(a7 + 40) = v38;
          v370 = 1;
        }
        else
        {
          v370 = 0;
        }
        v309 = (uint64_t *)v539[0];
LABEL_755:
        if (v309 != &v540)
          free(v309);
        v40 = v509;
        if ((v370 & 1) != 0)
          goto LABEL_473;
      }
      goto LABEL_244;
    case 147:
      v78 = v534;
      v79 = *(uint64_t **)(v534 + 32);
      v81 = *v79;
      v80 = v79[1];
      v82 = v79[10];
      v83 = *(unsigned __int16 *)(v82 + 24);
      if (v83 != 35 && v83 != 11)
        goto LABEL_229;
      v510 = (llvm::APInt *)v79[5];
      v85 = *(_QWORD *)(v82 + 80);
      v86 = (_QWORD **)(v85 + 24);
      v87 = *(_DWORD *)(v85 + 32);
      if (v87 >= 0x41)
      {
        if (v87 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v85 + 24)) >= 0x41)
          goto LABEL_229;
        v88 = (_QWORD *)**v86;
      }
      else
      {
        v88 = *v86;
      }
      if ((unint64_t)v88 < v14)
      {
        v150 = v88 >> 6;
        v151 = (void **)((char *)__b + 8 * v150);
        v504 = v530;
        if (v530 < 0x41)
          v151 = &__b;
        v152 = 1 << (char)v88;
        if (((unint64_t)*v151 & (1 << (char)v88)) == 0)
        {
          v232 = v535;
          *(_QWORD *)(a7 + 16) = v78;
          *(_DWORD *)(a7 + 24) = v232;
          *(_QWORD *)(a7 + 32) = v81;
          *(_DWORD *)(a7 + 40) = v80;
          goto LABEL_473;
        }
        LODWORD(v539[1]) = v530;
        if (v530 > 0x40)
        {
          v235 = (void *)operator new[]();
          memcpy(v235, __b, ((unint64_t)(v504 + 63) >> 3) & 0x3FFFFFF8);
          v236 = *((_QWORD *)v235 + v150) & ~v152;
          v153 = v235;
          *((_QWORD *)v235 + v150) = v236;
        }
        else
        {
          v153 = (void *)((unint64_t)__b & ~v152);
        }
        v539[0] = v153;
        if ((sub_1C5D88238(a1) & 1) != 0)
        {
          v154 = 1;
        }
        else
        {
          sub_1C62C45DC(a5, v88, *((unsigned __int16 *)v510 + 12) == 51);
          v379 = sub_1C6368AD4((uint64_t)v510) || sub_1C636F3A8((uint64_t)v510);
          sub_1C62C45DC(a6, v88, v379);
          v154 = 2;
        }
        if (v504 >= 0x41 && v153)
          goto LABEL_391;
        goto LABEL_392;
      }
LABEL_229:
      LODWORD(v539[1]) = 1;
      v539[0] = 0;
      LODWORD(v536[1]) = 1;
      v536[0] = 0;
      if (sub_1C5D88238(a1))
        v154 = 1;
      else
        v154 = 2;
      if (LODWORD(v536[1]) >= 0x41 && v536[0])
        MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
      if (LODWORD(v539[1]) >= 0x41 && v539[0])
LABEL_391:
        MEMORY[0x1CAA32F9C]();
LABEL_392:
      if (v154 == 2)
        goto LABEL_197;
      goto LABEL_473;
    case 148:
    case 152:
    case 154:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 174:
      goto LABEL_166;
    case 149:
      *(_OWORD *)v539 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v534 + 32) + 40)
                                  + 16 * *(unsigned int *)(*(_QWORD *)(v534 + 32) + 8));
      v248 = *(unsigned __int16 *)(v534 + 56);
      v249 = sub_1C612FE00((llvm::EVT *)v539, (const char *)v38);
      if (!v248)
        goto LABEL_197;
      v250 = v249;
      v251 = 0;
      v252 = 0;
      while (1)
      {
        llvm::APInt::extractBits((llvm::APInt *)&__b, v250, v251, (unsigned int *)v536);
        LODWORD(__src[1]) = 1;
        __src[0] = 0;
        v524 = 1;
        v523 = 0;
        if ((sub_1C5D88238(a1) & 1) != 0)
          break;
        llvm::APInt::insertBits((void **)a5, (const llvm::APInt *)__src, v251);
        llvm::APInt::insertBits((void **)a6, (const llvm::APInt *)&v523, v251);
        if (v524 >= 0x41 && v523)
          MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
        if (LODWORD(__src[1]) >= 0x41 && __src[0])
          MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
        if (LODWORD(v536[1]) >= 0x41 && v536[0])
          MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
        v252 += 40;
        v251 += v250;
        if (40 * v248 == v252)
          goto LABEL_197;
      }
      if (v524 >= 0x41 && v523)
        MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      if (LODWORD(v536[1]) < 0x41)
        goto LABEL_473;
      v71 = v536[0];
      if (!v536[0])
        goto LABEL_473;
      goto LABEL_97;
    case 150:
      v253 = *(_QWORD *)(v534 + 32);
      *(_OWORD *)v539 = *(_OWORD *)v253;
      *(_OWORD *)v536 = *(_OWORD *)(v253 + 40);
      v254 = *(_QWORD *)(*(_QWORD *)(v253 + 80) + 80);
      v255 = (_QWORD *)(v254 + 24);
      if (*(_DWORD *)(v254 + 32) >= 0x41u)
        v255 = (_QWORD *)*v255;
      v256 = *(_DWORD *)v255;
      v257 = v536[0];
      *(_OWORD *)__src = *(_OWORD *)(*((_QWORD *)v536[0] + 5) + 16 * LODWORD(v536[1]));
      v258 = sub_1C612FE00((llvm::EVT *)__src, (const char *)v38);
      llvm::APInt::extractBits((llvm::APInt *)&__b, v258, v256, (unsigned int *)__src);
      v524 = v530;
      if (v530 > 0x40)
      {
        v523 = (void *)operator new[]();
        memcpy(v523, __b, (((unint64_t)v524 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v523 = __b;
      }
      LODWORD(v522[1]) = v258;
      if (v258 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v522, 0, 0);
      else
        v522[0] = 0;
      llvm::APInt::insertBits(&v523, (const llvm::APInt *)v522, v256);
      if (LODWORD(v522[1]) >= 0x41 && v522[0])
        MEMORY[0x1CAA32F9C](v522[0], 0x1000C8000313F17);
      LODWORD(v522[1]) = 1;
      v522[0] = 0;
      v521 = 1;
      v520 = 0;
      v271 = v536[1];
      v272 = 0;
      if ((sub_1C5D88238(a1) & 1) != 0)
        goto LABEL_785;
      if (v524 > 0x40)
      {
        v363 = 0;
        v364 = ((unint64_t)v524 + 63) >> 6;
        do
        {
          v30 = v364-- < 1;
          if (v30)
            break;
          v365 = *((_QWORD *)v523 + v364);
          v363 += __clz(v365);
        }
        while (!v365);
        v366 = v524 | 0xFFFFFFC0;
        if ((v524 & 0x3F) == 0)
          v366 = 0;
        if (v363 + v366 != v524)
          goto LABEL_699;
      }
      else if (v523)
      {
        goto LABEL_699;
      }
      if (*((_WORD *)v539[0] + 12) != 51)
      {
        v451 = v534;
        v450 = v535;
        v452 = *(_QWORD *)a7;
        v453 = v532;
        v455 = sub_1C61312D0(*(_QWORD *)a7, (llvm *)v532, *((uint64_t *)&v532 + 1));
        v457 = *(_QWORD *)(v534 + 32);
        v458 = *(_QWORD *)(v457 + 80);
        v459 = *(_QWORD *)(v457 + 88);
        v460 = *(_QWORD *)(v452 + 832);
        if (v460)
          LOWORD(v460) = *(_WORD *)(v460 + 8);
        v461 = sub_1C5D58E08(v452, (const char *)0x96, (const llvm::APInt *)&v527, (llvm *)v453, *((uint64_t *)&v453 + 1), (uint64_t)v455, v454, v456, (uint64_t)v257, (uint64_t)v271, v458, v459, SHIDWORD(v459), v460);
        v272 = 0;
        *(_QWORD *)(a7 + 16) = v451;
        *(_DWORD *)(a7 + 24) = v450;
        *(_QWORD *)(a7 + 32) = v461;
        *(_DWORD *)(a7 + 40) = v462;
LABEL_785:
        if (v521 >= 0x41 && v520)
          MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
        if (LODWORD(v522[1]) >= 0x41 && v522[0])
          MEMORY[0x1CAA32F9C](v522[0], 0x1000C8000313F17);
        if (v524 >= 0x41 && v523)
          MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
        if (LODWORD(__src[1]) >= 0x41 && __src[0])
          MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
        if ((v272 & 1) != 0)
          goto LABEL_197;
        goto LABEL_473;
      }
LABEL_699:
      v367 = v539[0];
      v368 = v539[1];
      v272 = 0;
      if ((sub_1C5D88238(a1) & 1) != 0)
        goto LABEL_785;
      llvm::APInt::insertBits((void **)a5, (const llvm::APInt *)v522, v256);
      llvm::APInt::insertBits((void **)a6, (const llvm::APInt *)&v520, v256);
      v369 = v524;
      if (v524)
      {
        if (v524 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v523) != v369)
            goto LABEL_841;
        }
        else if (v523 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v524))
        {
          goto LABEL_841;
        }
      }
      v382 = (int)__src[1];
      if (!LODWORD(__src[1]))
        goto LABEL_784;
      if (LODWORD(__src[1]) > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__src) == v382)
          goto LABEL_784;
      }
      else if (__src[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1])))
      {
        goto LABEL_784;
      }
LABEL_841:
      v406 = (unsigned __int8 *)sub_1C6375FC8(a1, (uint64_t)v367, (_BOOL8)v368, (unsigned int *)&v523, *(_QWORD *)a7, v533 + 1);
      v518 = v406;
      v519 = v407;
      v408 = (unint64_t)sub_1C6375FC8(a1, (uint64_t)v257, (_BOOL8)v271, (unsigned int *)__src, *(_QWORD *)a7, v533 + 1);
      *(_QWORD *)&v517 = v408;
      *((_QWORD *)&v517 + 1) = v410;
      if ((unint64_t)v406 | v408)
      {
        v411 = (void **)&v518;
        if (!v406)
          v411 = v539;
        v412 = (unsigned __int8 *)*v411;
        LODWORD(v519) = *((_DWORD *)v411 + 2);
        v518 = v412;
        v413 = (void **)&v517;
        if (!v408)
          v413 = v536;
        v414 = *((_DWORD *)v413 + 2);
        *(_QWORD *)&v517 = *v413;
        DWORD2(v517) = v414;
        v415 = *(_QWORD *)a7;
        v416 = v534;
        v417 = (const char *)*(unsigned __int16 *)(v534 + 24);
        v418 = *(unsigned __int8 **)(v534 + 64);
        v515 = v418;
        v419 = v534;
        if (v418)
        {
          llvm::MetadataTracking::track((uint64_t)&v515, v418, 2);
          v419 = v534;
        }
        v516 = *(_DWORD *)(v416 + 60);
        v420 = *(_QWORD *)(v419 + 32);
        v421 = *(_QWORD *)(v420 + 80);
        v422 = *(_QWORD *)(v420 + 88);
        v423 = *(_QWORD *)(v415 + 832);
        if (v423)
          LOWORD(v423) = *(_WORD *)(v423 + 8);
        v424 = sub_1C5D58E08(v415, v417, (const llvm::APInt *)&v515, (llvm *)v532, *((uint64_t *)&v532 + 1), (uint64_t)v518, v519, v409, v517, *((uint64_t *)&v517 + 1), v421, v422, SHIDWORD(v422), v423);
        v426 = v425;
        if (v515)
          llvm::MetadataTracking::untrack((uint64_t)&v515, v515);
        v272 = 0;
        v427 = v535;
        *(_QWORD *)(a7 + 16) = v534;
        *(_DWORD *)(a7 + 24) = v427;
        *(_QWORD *)(a7 + 32) = v424;
        *(_DWORD *)(a7 + 40) = v426;
        goto LABEL_785;
      }
LABEL_784:
      v272 = 1;
      goto LABEL_785;
    case 151:
      v90 = *(uint64_t **)(v534 + 32);
      v91 = *v90;
      v92 = v90[1];
      v93 = *(_QWORD *)(*v90 + 40) + 16 * v92;
      v94 = *(void **)v93;
      if (*(_QWORD *)v93)
      {
        if (*(_QWORD *)v93 - 120 < 0x33)
          goto LABEL_197;
      }
      else if (*(_BYTE *)(*(_QWORD *)(v93 + 8) + 8) == 19)
      {
        goto LABEL_197;
      }
      v138 = *(_QWORD *)(v90[5] + 80);
      v139 = (_QWORD *)(v138 + 24);
      if (*(_DWORD *)(v138 + 32) >= 0x41u)
        v139 = (_QWORD *)*v139;
      v140 = (_QWORD *)*v139;
      v141 = *(void **)(v93 + 8);
      v539[0] = v94;
      v539[1] = v141;
      v142 = sub_1C612FE00((llvm::EVT *)v539, (const char *)v38);
      if (v530 < v142)
      {
        llvm::APInt::zext((llvm::APInt *)&__b, v142, (uint64_t)v536);
        v274 = v536[1];
      }
      else
      {
        LODWORD(v536[1]) = v530;
        if (v530 <= 0x40)
        {
          v536[0] = __b;
          LODWORD(v539[1]) = v530;
LABEL_495:
          v539[0] = v536[0];
          goto LABEL_650;
        }
        v536[0] = (void *)operator new[]();
        v274 = v536[1];
        memcpy(v536[0], __b, (((unint64_t)LODWORD(v536[1]) + 63) >> 3) & 0x3FFFFFF8);
      }
      LODWORD(v539[1]) = v274;
      if (v274 <= 0x40)
        goto LABEL_495;
      v539[0] = (void *)operator new[]();
      memcpy(v539[0], v536[0], (((unint64_t)LODWORD(v539[1]) + 63) >> 3) & 0x3FFFFFF8);
LABEL_650:
      sub_1C4888094((uint64_t)v539, v140);
      if (LODWORD(v536[1]) >= 0x41 && v536[0])
        MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
      LODWORD(v536[1]) = 1;
      v536[0] = 0;
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      v329 = 0;
      if ((sub_1C5D88238(a1) & 1) != 0)
        goto LABEL_726;
      llvm::APInt::extractBits((llvm::APInt *)v536, v15, v140, (unsigned int *)&v523);
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
      *a5 = v523;
      *((_DWORD *)a5 + 2) = v524;
      llvm::APInt::extractBits((llvm::APInt *)__src, v15, v140, (unsigned int *)&v523);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x1CAA32F9C](*a6, 0x1000C8000313F17);
      *a6 = v523;
      *((_DWORD *)a6 + 2) = v524;
      v330 = v530;
      if (!v530)
        goto LABEL_725;
      if (v530 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v330)
          goto LABEL_725;
      }
      else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v530))
      {
        goto LABEL_725;
      }
      v428 = sub_1C6375FC8(a1, v91, v92, (unsigned int *)v539, *(_QWORD *)a7, v533 + 1);
      if (v428)
      {
        v431 = (uint64_t)v428;
        v432 = v429;
        v433 = *(_QWORD *)a7;
        v434 = v534;
        v435 = *(unsigned __int16 *)(v534 + 24);
        v436 = *(void **)(v534 + 64);
        v523 = v436;
        v437 = v534;
        if (v436)
        {
          llvm::MetadataTracking::track((uint64_t)&v523, (unsigned __int8 *)v436, 2);
          v437 = v534;
        }
        v524 = *(_DWORD *)(v434 + 60);
        v438 = *(_QWORD *)(v437 + 32);
        v439 = *(_QWORD *)(v438 + 40);
        v440 = *(_QWORD *)(v438 + 48);
        v441 = *(_QWORD *)(v433 + 832);
        if (v441)
          LOWORD(v441) = *(_WORD *)(v441 + 8);
        v442 = sub_1C5D56C70(v433, v435, (const llvm::APInt *)&v523, (llvm *)v532, *((uint64_t *)&v532 + 1), v431, v432, v430, v439, v440, v441);
        v444 = v443;
        if (v523)
          llvm::MetadataTracking::untrack((uint64_t)&v523, (unsigned __int8 *)v523);
        v329 = 0;
        v445 = v535;
        *(_QWORD *)(a7 + 16) = v534;
        *(_DWORD *)(a7 + 24) = v445;
        *(_QWORD *)(a7 + 32) = v442;
        *(_DWORD *)(a7 + 40) = v444;
LABEL_726:
        if (LODWORD(__src[1]) >= 0x41 && __src[0])
          MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
        if (LODWORD(v536[1]) >= 0x41 && v536[0])
          MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
        if (LODWORD(v539[1]) >= 0x41 && v539[0])
          MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
        if ((v329 & 1) != 0)
          goto LABEL_197;
        goto LABEL_473;
      }
LABEL_725:
      v329 = 1;
      goto LABEL_726;
    case 153:
      *(_OWORD *)v539 = *(_OWORD *)*(_QWORD *)(v534 + 40);
      v237 = *(unsigned int **)(v534 + 80);
      v238 = sub_1C612FE00((llvm::EVT *)v539, (const char *)v38);
      LODWORD(v536[1]) = v14;
      if (v14 >= 0x41)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v536, 0, 0);
        LODWORD(__src[1]) = v14;
        llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
        v15 = __src[1];
      }
      else
      {
        v536[0] = 0;
        LODWORD(__src[1]) = v14;
        __src[0] = 0;
        if (!(_DWORD)v14)
        {
          v247 = 1;
          goto LABEL_497;
        }
      }
      v239 = 0;
      v240 = v530;
      v241 = v536[1];
      do
      {
        v242 = v237[v239];
        if ((v242 & 0x80000000) == 0)
        {
          v243 = (void **)((char *)__b + 8 * (v239 >> 6));
          if (v240 < 0x41)
            v243 = &__b;
          if ((((unint64_t)*v243 >> v239) & 1) != 0)
          {
            if ((int)v242 >= (int)v14)
            {
              v245 = v242 - v14;
              v246 = 1 << (v242 - v14);
              if (v15 > 0x40)
                *((_QWORD *)__src[0] + (v245 >> 6)) |= v246;
              else
                __src[0] = (void *)((unint64_t)__src[0] | v246);
            }
            else
            {
              v244 = 1 << v242;
              if (v241 > 0x40)
                *(_QWORD *)((char *)v536[0] + ((v242 >> 3) & 0x1FFFFFF8)) |= v244;
              else
                v536[0] = (void *)((unint64_t)v536[0] | v244);
            }
          }
        }
        ++v239;
      }
      while (v14 != v239);
      v247 = 0;
LABEL_497:
      v47 = 1;
      v524 = 1;
      v523 = 0;
      LODWORD(v522[1]) = 1;
      v522[0] = 0;
      v521 = 1;
      v520 = 0;
      LODWORD(v519) = 1;
      v518 = 0;
      if ((sub_1C5D88238(a1) & 1) != 0 || (sub_1C5D88238(a1) & 1) != 0)
        goto LABEL_563;
      v539[0] = &v540;
      v539[1] = (void *)0x2000000000;
      if (v238 >= 0x21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v539, (uint64_t)&v540, v238, 4);
        v275 = v539[1];
        v277 = (uint64_t *)v539[0];
      }
      else
      {
        v275 = 0;
        v276 = 0;
        v277 = &v540;
        if (!v238)
          goto LABEL_502;
      }
      memcpy((char *)v277 + 4 * v275, v237, 4 * v238);
      v276 = (int)v539[1];
LABEL_502:
      LODWORD(v539[1]) = v276 + v238;
      if ((v247 & 1) != 0)
        goto LABEL_560;
      v278 = 0;
      v279 = 0;
      v280 = 1;
      v281 = v539[0];
      v282 = 1;
      do
      {
        v283 = v281[v278];
        if ((v283 & 0x80000000) != 0)
          goto LABEL_527;
        if (v530 >= 0x41)
          v284 = (void **)((char *)__b + 8 * (v278 >> 6));
        else
          v284 = &__b;
        if ((((unint64_t)*v284 >> v278) & 1) != 0)
        {
          v285 = v283 - v14;
          if ((int)v283 >= (int)v14)
          {
            if (v521 >= 0x41)
              v287 = (void **)((char *)v520 + 8 * (v285 >> 6));
            else
              v287 = &v520;
            if ((((unint64_t)*v287 >> v285) & 1) == 0)
              goto LABEL_520;
          }
          else
          {
            if (v524 >= 0x41)
              v286 = (void **)((char *)v523 + ((v283 >> 3) & 0x1FFFFFF8));
            else
              v286 = &v523;
            if ((((unint64_t)*v286 >> v283) & 1) == 0)
              goto LABEL_520;
          }
        }
        LODWORD(v283) = -1;
        v281[v278] = -1;
        v279 = 1;
LABEL_520:
        v288 = v278 == v283 || (v283 & 0x80000000) != 0;
        v280 &= v288;
        v289 = v278 == (_DWORD)v283 - (_DWORD)v14 || (v283 & 0x80000000) != 0;
        v282 &= v289;
LABEL_527:
        ++v278;
      }
      while (v14 != v278);
      if (v280 & 1 | ((v279 & 1) == 0) | v282 & 1
        || *(_BYTE *)(a7 + 9)
        || (v463 = sub_1C6376074((uint64_t)a1, (llvm *)v532, *((uint64_t *)&v532 + 1), (uint64_t)&v527, **(_QWORD **)(v534 + 32), *(_QWORD *)(*(_QWORD *)(v534 + 32) + 8), *(_QWORD *)(*(_QWORD *)(v534 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v534 + 32) + 48), v281, LODWORD(v539[1]), *(_QWORD *)a7)) == 0)
      {
        v290 = 0;
        v291 = v521;
        v292 = v519;
        v293 = v524;
        v294 = v522[1];
        while (1)
        {
          v295 = v237[v290];
          if ((v295 & 0x80000000) != 0)
          {
            v301 = (char *)a5;
            if (*((_DWORD *)a5 + 2) >= 0x41u)
            {
              v302 = (char *)*a5;
LABEL_557:
              v301 = &v302[8 * (v290 >> 6)];
            }
          }
          else
          {
            if ((int)v295 >= (int)v14)
            {
              v303 = v295 - v14;
              v304 = v303 >> 6;
              v305 = (void **)((char *)v520 + 8 * v304);
              if (v291 < 0x41)
                v305 = &v520;
              v298 = 1 << v303;
              if (((unint64_t)*v305 & v298) != 0)
              {
                if (*((_DWORD *)a5 + 2) >= 0x41u)
                  v306 = (_QWORD *)(*a5 + 8 * (v290 >> 6));
                else
                  v306 = a5;
                *v306 |= 1 << v290;
              }
              v300 = (void **)&v518[8 * v304];
              if (v292 < 0x41)
                v300 = (void **)&v518;
            }
            else
            {
              v296 = v295 >> 6;
              v297 = (void **)((char *)v523 + 8 * (v295 >> 6));
              if (v293 < 0x41)
                v297 = &v523;
              v298 = 1 << v295;
              if (((unint64_t)*v297 & v298) != 0)
              {
                if (*((_DWORD *)a5 + 2) >= 0x41u)
                  v299 = (_QWORD *)(*a5 + 8 * (v290 >> 6));
                else
                  v299 = a5;
                *v299 |= 1 << v290;
              }
              v300 = (void **)((char *)v522[0] + 8 * v296);
              if (v294 < 0x41)
                v300 = v522;
            }
            if (((unint64_t)*v300 & v298) == 0)
              goto LABEL_559;
            v301 = (char *)a6;
            if (*((_DWORD *)a6 + 2) >= 0x41u)
            {
              v302 = (char *)*a6;
              goto LABEL_557;
            }
          }
          *(_QWORD *)v301 |= 1 << v290;
LABEL_559:
          if (v14 == ++v290)
          {
LABEL_560:
            v47 = 2;
            goto LABEL_561;
          }
        }
      }
      v465 = v535;
      *(_QWORD *)(a7 + 16) = v534;
      *(_DWORD *)(a7 + 24) = v465;
      *(_QWORD *)(a7 + 32) = v463;
      *(_DWORD *)(a7 + 40) = v464;
      v47 = 1;
LABEL_561:
      if (v539[0] != &v540)
        free(v539[0]);
LABEL_563:
      if (v519 >= 0x41 && v518)
        MEMORY[0x1CAA32F9C](v518, 0x1000C8000313F17);
      if (v521 >= 0x41 && v520)
        MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
      if (LODWORD(v522[1]) >= 0x41 && v522[0])
        MEMORY[0x1CAA32F9C](v522[0], 0x1000C8000313F17);
      if (v524 >= 0x41 && v523)
        MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      if (LODWORD(v536[1]) >= 0x41)
      {
        v131 = v536[0];
        if (v536[0])
LABEL_195:
          MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
      }
LABEL_196:
      if (v47 != 2)
        goto LABEL_473;
LABEL_197:
      if (v530 > 0x40)
      {
        v132 = ((unint64_t)v530 + 63) >> 6;
        v133 = (uint64_t *)__b;
        v134 = (uint64_t *)*a5;
        while (1)
        {
          v136 = *v133++;
          v135 = v136;
          v137 = *v134++;
          if ((v135 & ~v137) != 0)
            break;
          if (!--v132)
            goto LABEL_472;
        }
LABEL_199:
        v21 = 0;
      }
      else
      {
        if (((unint64_t)__b & ~*a5) != 0)
          goto LABEL_199;
LABEL_472:
        v267 = v534;
        v268 = v535;
        v269 = sub_1C61312D0(*(_QWORD *)a7, (llvm *)v532, *((uint64_t *)&v532 + 1));
        *(_QWORD *)(a7 + 16) = v267;
        *(_DWORD *)(a7 + 24) = v268;
        *(_QWORD *)(a7 + 32) = v269;
        *(_DWORD *)(a7 + 40) = v270;
LABEL_473:
        v21 = 1;
      }
LABEL_474:
      if (v527)
        llvm::MetadataTracking::untrack((uint64_t)&v527, v527);
LABEL_42:
      if (v530 >= 0x41 && __b)
        MEMORY[0x1CAA32F9C](__b, 0x1000C8000313F17);
      return v21;
    case 155:
      v95 = &__b;
      if (v530 >= 0x41)
        v95 = __b;
      if ((*v95 & 1) != 0)
      {
        v96 = **(_QWORD **)(v534 + 32);
        if (*(_WORD *)(v96 + 24) != 148)
          goto LABEL_774;
        v97 = *(_QWORD **)(v96 + 32);
        v98 = v97[5];
        *(_OWORD *)v539 = *(_OWORD *)(*(_QWORD *)(*v97 + 40) + 16 * v97[1]);
        v99 = sub_1C52B71D4((unsigned __int8 *)v539);
        v21 = (v99 & 0xFFFFFFFF00000000) != 0x100000000;
        if ((v99 & 0xFFFFFFFF00000000) == 0x100000000)
          goto LABEL_474;
        v100 = v99;
        if (!sub_1C6368AD4(v98))
          goto LABEL_774;
        LODWORD(v536[1]) = v100;
        if (v100 >= 0x41)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v536, 0, 0);
          v102 = v536[1];
          if (LODWORD(v536[1]) > 0x40)
          {
            v103 = v536[0];
            *(_QWORD *)v536[0] |= 1uLL;
LABEL_128:
            v104 = *((_DWORD *)a5 + 2);
            if (v104 >= v100)
            {
              if (v104 > v100)
                llvm::APInt::trunc((llvm::APInt *)a5, v100, (llvm::APInt *)__src);
              else
                sub_1C5DD14E0((uint64_t)__src, (uint64_t)a5);
            }
            else
            {
              llvm::APInt::zext((llvm::APInt *)a5, v100, (uint64_t)__src);
            }
            v380 = *((_DWORD *)a6 + 2);
            if (v380 >= v100)
            {
              if (v380 > v100)
                llvm::APInt::trunc((llvm::APInt *)a6, v100, (llvm::APInt *)&v523);
              else
                sub_1C5DD14E0((uint64_t)&v523, (uint64_t)a6);
            }
            else
            {
              llvm::APInt::zext((llvm::APInt *)a6, v100, (uint64_t)&v523);
            }
            v381 = sub_1C5D88238(a1);
            if (v524 >= 0x41 && v523)
              MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            if (v102 >= 0x41)
              MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
            if ((v381 & 1) != 0)
              goto LABEL_474;
LABEL_774:
            sub_1C4912E54(a5, *((_DWORD *)a5 + 2) - v14 + 1, *((_DWORD *)a5 + 2));
            goto LABEL_197;
          }
          v101 = (unint64_t)v536[0];
        }
        else
        {
          v101 = 0;
          v102 = v100;
        }
        v103 = (void *)(v101 | 1);
        v536[0] = (void *)(v101 | 1);
        goto LABEL_128;
      }
      v265 = *((unsigned int *)a5 + 2);
      if (v265 > 0x40)
      {
        memset((void *)*a5, 255, ((unint64_t)(v265 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v265) = *((_DWORD *)a5 + 2);
        if ((_DWORD)v265)
        {
LABEL_469:
          v266 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v265;
          if (v265 >= 0x41)
            a5 = (_QWORD *)(*a5 + 8 * ((((unint64_t)v265 + 63) >> 6) - 1));
          goto LABEL_471;
        }
      }
      else
      {
        *a5 = -1;
        if ((_DWORD)v265)
          goto LABEL_469;
      }
      v266 = 0;
LABEL_471:
      *a5 &= v266;
      goto LABEL_472;
    case 171:
      goto LABEL_90;
    case 172:
    case 173:
      goto LABEL_63;
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
      v42 = *(uint64_t **)(v534 + 32);
      v43 = *v42;
      v44 = v42[1];
      v45 = v42[5];
      v46 = v42[6];
      v47 = 1;
      LODWORD(v539[1]) = 1;
      v539[0] = 0;
      LODWORD(v536[1]) = 1;
      v536[0] = 0;
      if ((sub_1C5D88238(a1) & 1) != 0)
        goto LABEL_190;
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      v524 = 1;
      v523 = 0;
      if ((sub_1C5D88238(a1) & 1) != 0)
        goto LABEL_184;
      v48 = v524;
      if (*((_DWORD *)a6 + 2) > 0x40u)
      {
        if (&v523 != a6)
        {
          llvm::APInt::reallocate((uint64_t)a6, v524);
          v328 = *((unsigned int *)a6 + 2);
          if (v328 <= 0x40)
            *a6 = v523;
          else
            memcpy((void *)*a6, v523, ((unint64_t)(v328 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else
      {
        *a6 = v523;
        *((_DWORD *)a6 + 2) = v48;
      }
      v113 = LODWORD(__src[1]);
      if (LODWORD(__src[1]) > 0x40)
      {
        v115 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
        v114 = (void *)operator new[]();
        memcpy(v114, __src[0], v115);
        v116 = (uint64_t *)v539[0];
        v117 = (unint64_t)(v113 + 63) >> 6;
        v118 = v114;
        do
        {
          v119 = *v116++;
          *v118++ &= v119;
          --v117;
        }
        while (v117);
      }
      else
      {
        v114 = (void *)((uint64_t)v539[0] & (uint64_t)__src[0]);
      }
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
      *a5 = v114;
      *((_DWORD *)a5 + 2) = v113;
      v120 = v530;
      if (!v530)
        goto LABEL_183;
      if (v530 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v120)
          goto LABEL_183;
      }
      else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v530))
      {
        goto LABEL_183;
      }
      if (sub_1C5D8C504((uint64_t)v526, v43, v44, v45, v46))
      {
        v47 = 1;
        goto LABEL_184;
      }
LABEL_183:
      v47 = 2;
LABEL_184:
      if (v524 >= 0x41 && v523)
        MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
LABEL_190:
      if (LODWORD(v536[1]) >= 0x41 && v536[0])
        MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
      if (LODWORD(v539[1]) >= 0x41)
      {
        v131 = v539[0];
        if (v539[0])
          goto LABEL_195;
      }
      goto LABEL_196;
    default:
      v62 = v531 + 58;
      if ((v531 - 198) > 0x12)
        goto LABEL_162;
      if (((1 << v62) & 0xB) != 0)
      {
        if ((sub_1C5D88238(a1) & 1) != 0)
          goto LABEL_473;
        v63 = v534;
        if (*(_WORD *)(v534 + 24) != 199)
          goto LABEL_197;
        if (v530 > 0x40)
        {
          v143 = 0;
          v64 = (char *)*a5;
          while ((*(_QWORD *)((_BYTE *)__b + v143) & ~*(_QWORD *)&v64[v143]) == 0)
          {
            v143 += 8;
            if (((((unint64_t)v530 + 63) >> 3) & 0x3FFFFFF8) == v143)
              goto LABEL_213;
          }
        }
        else
        {
          v64 = (char *)*a5;
          if (((unint64_t)__b & ~*a5) == 0)
          {
LABEL_213:
            v144 = v535;
            v145 = *(_QWORD *)a7;
            v146 = *(void **)(v534 + 64);
            v539[0] = v146;
            if (v146)
              llvm::MetadataTracking::track((uint64_t)v539, (unsigned __int8 *)v146, 2);
            LODWORD(v539[1]) = *(_DWORD *)(v63 + 60);
            v147 = sub_1C6366AB4(v145, 0, (const llvm::APInt *)v539, (llvm *)v532, *((uint64_t *)&v532 + 1), 0, 0);
            *(_QWORD *)(a7 + 16) = v63;
            *(_DWORD *)(a7 + 24) = v144;
            *(_QWORD *)(a7 + 32) = v147;
            *(_DWORD *)(a7 + 40) = v148;
            if (v539[0])
              llvm::MetadataTracking::untrack((uint64_t)v539, (unsigned __int8 *)v539[0]);
            goto LABEL_473;
          }
        }
        v65 = *((unsigned int *)a5 + 2);
        if (v65 > 0x40)
          bzero(v64, ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8);
        else
          *a5 = 0;
        goto LABEL_197;
      }
      if (v531 == 216)
      {
        v72 = *(uint64_t **)(v534 + 32);
        v74 = *v72;
        v73 = v72[1];
        v75 = *(_QWORD *)(v74 + 40) + 16 * v73;
        v77 = *(void **)v75;
        v76 = *(_DWORD **)(v75 + 8);
        v536[0] = v77;
        v536[1] = v76;
        if ((_BYTE)v77)
        {
          if (v77 - 15 >= 0x9C)
            goto LABEL_197;
        }
        else if ((v76[2] & 0xFE) != 0x12)
        {
          goto LABEL_197;
        }
        v149 = v37;
        v499 = v73;
        v511 = sub_1C612FE00((llvm::EVT *)v536, (const char *)v38);
        if (v511 == (_DWORD)v14)
        {
          v21 = sub_1C5D88238(a1);
          goto LABEL_474;
        }
        LODWORD(__src[1]) = 1;
        __src[0] = 0;
        v524 = 1;
        v523 = 0;
        v508 = 1;
        LODWORD(v522[1]) = 1;
        v522[0] = 0;
        __na = v14 / v511;
        if (v14 % v511)
        {
          v506 = 0;
LABEL_491:
          __nb = v511 / v14;
          if (v511 % v14)
          {
LABEL_492:
            v273 = 1;
LABEL_742:
            if (LODWORD(v522[1]) >= 0x41 && v522[0])
              MEMORY[0x1CAA32F9C](v522[0], 0x1000C8000313F17);
            if (v524 >= 0x41 && v523)
              MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
            if (v508 >= 0x41 && v506)
              MEMORY[0x1CAA32F9C](v506, 0x1000C8000313F17);
            if ((v273 & 1) != 0)
              goto LABEL_197;
            goto LABEL_473;
          }
          llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)&__b, (const llvm::APInt *)v511, (llvm::APInt *)v539);
          if (v508 >= 0x41 && v506)
            MEMORY[0x1CAA32F9C](v506, 0x1000C8000313F17);
          v506 = (char *)v539[0];
          __src[0] = v539[0];
          v508 = v539[1];
          LODWORD(__src[1]) = v539[1];
          if ((sub_1C5D88238(a1) & 1) != 0)
          {
LABEL_741:
            v273 = 0;
            goto LABEL_742;
          }
          v383 = 0;
          while (1)
          {
            v384 = v383 >> 6;
            v385 = &__b;
            if (v530 >= 0x41)
              v385 = (void **)((char *)__b + 8 * v384);
            v386 = 1 << v383;
            if (((unint64_t)*v385 & (1 << v383)) == 0)
              goto LABEL_825;
            llvm::APInt::extractBits((llvm::APInt *)&v523, __nb, v383 * __nb, (unsigned int *)v539);
            v387 = (int)v539[1];
            if (!LODWORD(v539[1]))
              goto LABEL_810;
            if (LODWORD(v539[1]) <= 0x40)
              break;
            v388 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v539);
            if (v539[0])
              MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
            if (v388 == v387)
              goto LABEL_810;
LABEL_814:
            llvm::APInt::extractBits((llvm::APInt *)v522, __nb, v383 * __nb, (unsigned int *)v539);
            v390 = (int)v539[1];
            if (!LODWORD(v539[1]))
              goto LABEL_821;
            if (LODWORD(v539[1]) > 0x40)
            {
              v391 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v539);
              if (v539[0])
                MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
              if (v391 != v390)
                goto LABEL_825;
LABEL_821:
              if (*((_DWORD *)a5 + 2) >= 0x41u)
                v392 = (_QWORD *)(*a5 + 8 * v384);
              else
                v392 = a5;
              *v392 |= v386;
              goto LABEL_825;
            }
            if (v539[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v539[1])))
              goto LABEL_821;
LABEL_825:
            if ((_DWORD)v14 == ++v383)
              goto LABEL_492;
          }
          if (v539[0] != (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v539[1])))
            goto LABEL_814;
LABEL_810:
          if (*((_DWORD *)a6 + 2) >= 0x41u)
            v389 = (_QWORD *)(*a6 + 8 * v384);
          else
            v389 = a6;
          *v389 |= v386;
          goto LABEL_814;
        }
        llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)&__b, (const llvm::APInt *)v511, (llvm::APInt *)v539);
        v506 = (char *)v539[0];
        __src[0] = v539[0];
        v508 = v539[1];
        LODWORD(__src[1]) = v539[1];
        if ((sub_1C5D88238(a1) & 1) != 0)
          goto LABEL_741;
        if (v41)
        {
LABEL_708:
          for (i = 0; i != v511; ++i)
          {
            v374 = i >> 6;
            v375 = (void **)&v506[8 * v374];
            if (v508 < 0x41)
              v375 = __src;
            v376 = 1 << i;
            if (((1 << i) & (unint64_t)*v375) != 0)
            {
              v377 = &v523;
              if (v524 >= 0x41)
                v377 = (void **)((char *)v523 + 8 * v374);
              if (((unint64_t)*v377 & v376) != 0)
                sub_1C4912E54(a6, i * __na, __na + i * __na);
              v378 = v522;
              if (LODWORD(v522[1]) >= 0x41)
                v378 = (void **)((char *)v522[0] + 8 * v374);
              if (((unint64_t)*v378 & v376) != 0)
                sub_1C4912E54(a5, i * __na, __na + i * __na);
            }
          }
          goto LABEL_491;
        }
        v521 = sub_1C6131328((unsigned __int8 *)v536, v371, v372);
        if (v521 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v520, 0, 0);
          if ((_DWORD)v14)
          {
LABEL_875:
            v467 = 0;
            do
            {
              if (v530 >= 0x41)
                v468 = (void **)((char *)__b + 8 * (v467 >> 6));
              else
                v468 = &__b;
              if ((((unint64_t)*v468 >> v467) & 1) != 0)
                sub_1C4912E54(&v520, v467 % __na * v149, v467 % __na * v149 + v149);
              ++v467;
            }
            while ((_DWORD)v14 != v467);
          }
        }
        else
        {
          v520 = 0;
          if ((_DWORD)v14)
            goto LABEL_875;
        }
        LODWORD(v539[1]) = 1;
        v539[0] = 0;
        v541 = 1;
        v540 = 0;
        if ((sub_1C5D7BE14(a1, v74, v499, &v520, __src, v539, a7, v533 + 1, 0) & 1) != 0)
        {
          if (v541 >= 0x41 && v540)
            MEMORY[0x1CAA32F9C](v540, 0x1000C8000313F17);
          if (LODWORD(v539[1]) >= 0x41 && v539[0])
            MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
          if (v521 >= 0x41 && v520)
            MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
          goto LABEL_741;
        }
        if (v511 > v14)
        {
LABEL_909:
          if (v541 >= 0x41 && v540)
            MEMORY[0x1CAA32F9C](v540, 0x1000C8000313F17);
          if (LODWORD(v539[1]) >= 0x41 && v539[0])
            MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
          if (v521 >= 0x41 && v520)
            MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
          goto LABEL_708;
        }
        v469 = 0;
        while (1)
        {
          llvm::APInt::extractBits((llvm::APInt *)v539, v149, v469 * v149, (unsigned int *)&v518);
          v498 = v519;
          if (!(_DWORD)v519)
            goto LABEL_900;
          if (v519 > 0x40)
            break;
          if (v518 == (unsigned __int8 *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v519))
            goto LABEL_900;
LABEL_908:
          if (++v469 == __na)
            goto LABEL_909;
        }
        v496 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v518);
        if (v518)
          MEMORY[0x1CAA32F9C](v518, 0x1000C8000313F17);
        if (v496 != v498)
          goto LABEL_908;
LABEL_900:
        v470 = 0;
        v471 = v530;
        v472 = *((_DWORD *)a6 + 2);
        v473 = v511;
        do
        {
          v474 = v469 + v470 * __na;
          v475 = v474 >> 6;
          v476 = (void **)((char *)__b + 8 * v475);
          if (v471 < 0x41)
            v476 = &__b;
          v477 = 1 << v474;
          if ((v477 & (unint64_t)*v476) != 0)
          {
            v478 = (_QWORD *)(*a6 + 8 * v475);
            if (v472 < 0x41)
              v478 = a6;
            *v478 |= v477;
          }
          ++v470;
          --v473;
        }
        while (v473);
        goto LABEL_908;
      }
      if (((1 << v62) & 0x380) == 0)
      {
LABEL_162:
        if (v531 != 191)
          goto LABEL_166;
        v122 = 1;
        LODWORD(v539[1]) = 1;
        v539[0] = 0;
        LODWORD(v536[1]) = 1;
        v536[0] = 0;
        if ((sub_1C5D88238(a1) & 1) != 0)
        {
LABEL_459:
          if (LODWORD(v536[1]) >= 0x41 && v536[0])
            MEMORY[0x1CAA32F9C](v536[0], 0x1000C8000313F17);
          if (LODWORD(v539[1]) >= 0x41 && v539[0])
            MEMORY[0x1CAA32F9C](v539[0], 0x1000C8000313F17);
          if (v122 == 2)
            goto LABEL_197;
          goto LABEL_473;
        }
        v123 = v530;
        LODWORD(__src[1]) = v530;
        if (v530 > 0x40)
        {
          v182 = (((unint64_t)v530 + 63) >> 3) & 0x3FFFFFF8;
          v125 = (void *)operator new[]();
          __src[0] = v125;
          v124 = __b;
          memcpy(v125, __b, v182);
          v126 = v530;
          v524 = v530;
          if (v530 > 0x40)
          {
            v229 = (((unint64_t)v530 + 63) >> 3) & 0x3FFFFFF8;
            v124 = (void *)operator new[]();
            v523 = v124;
            memcpy(v124, __b, v229);
LABEL_366:
            v122 = 1;
            LODWORD(v522[1]) = 1;
            v522[0] = 0;
            v521 = 1;
            v520 = 0;
            LODWORD(v519) = 1;
            v518 = 0;
            DWORD2(v517) = 1;
            *(_QWORD *)&v517 = 0;
            if ((sub_1C5D88238(a1) & 1) == 0 && (sub_1C5D88238(a1) & 1) == 0)
            {
              v230 = (int)v522[1];
              if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
                MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
              *a5 = (unint64_t)v518 & (unint64_t)v522[0];
              *((_DWORD *)a5 + 2) = v230;
              v259 = v521;
              if (v521 > 0x40)
              {
                v260 = (void *)operator new[]();
                memcpy(v260, v520, (((unint64_t)v521 + 63) >> 3) & 0x3FFFFFF8);
                v261 = (uint64_t *)v517;
                v262 = ((unint64_t)v521 + 63) >> 6;
                v263 = v260;
                do
                {
                  v264 = *v261++;
                  *v263++ &= v264;
                  --v262;
                }
                while (v262);
              }
              else
              {
                v260 = (void *)(v517 & (unint64_t)v520);
              }
              if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
                MEMORY[0x1CAA32F9C](*a6, 0x1000C8000313F17);
              *a6 = v260;
              *((_DWORD *)a6 + 2) = v259;
              v122 = 2;
            }
            if (DWORD2(v517) >= 0x41 && (_QWORD)v517)
              MEMORY[0x1CAA32F9C](v517, 0x1000C8000313F17);
            if (v519 >= 0x41 && v518)
              MEMORY[0x1CAA32F9C](v518, 0x1000C8000313F17);
            if (v521 >= 0x41 && v520)
              MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
            if (LODWORD(v522[1]) >= 0x41 && v522[0])
              MEMORY[0x1CAA32F9C](v522[0], 0x1000C8000313F17);
            if (v126 >= 0x41 && v124)
              MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
            if (v123 >= 0x41 && v125)
              MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
            goto LABEL_459;
          }
        }
        else
        {
          v124 = __b;
          __src[0] = __b;
          v524 = v530;
          v125 = __b;
          v126 = v530;
        }
        v523 = v124;
        goto LABEL_366;
      }
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      v524 = 1;
      v523 = 0;
      *(_OWORD *)v522 = *(_OWORD *)*(_QWORD *)(v534 + 32);
      *(_OWORD *)v539 = *(_OWORD *)(*((_QWORD *)v522[0] + 5) + 16 * LODWORD(v522[1]));
      v183 = sub_1C612FE00((llvm::EVT *)v539, (const char *)v38);
      if (v530 < v183)
      {
        llvm::APInt::zext((llvm::APInt *)&__b, v183, (uint64_t)&v520);
      }
      else
      {
        v521 = v530;
        if (v530 > 0x40)
        {
          v520 = (void *)operator new[]();
          memcpy(v520, __b, (((unint64_t)v521 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v520 = __b;
        }
      }
      v233 = sub_1C5D88238(a1);
      v234 = 0;
      if ((v233 & 1) != 0)
        goto LABEL_626;
      if (v524 >= v14)
      {
        if (v524 > v14)
        {
          llvm::APInt::trunc((llvm::APInt *)&v523, v14, (llvm::APInt *)v539);
        }
        else
        {
          LODWORD(v539[1]) = v524;
          if (v524 > 0x40)
          {
            v539[0] = (void *)operator new[]();
            memcpy(v539[0], v523, (((unint64_t)LODWORD(v539[1]) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v539[0] = v523;
          }
        }
      }
      else
      {
        llvm::APInt::zext((llvm::APInt *)&v523, v14, (uint64_t)v539);
      }
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x1CAA32F9C](*a6, 0x1000C8000313F17);
      *a6 = v539[0];
      *((_DWORD *)a6 + 2) = v539[1];
      if (LODWORD(__src[1]) >= v14)
      {
        if (LODWORD(__src[1]) > v14)
        {
          llvm::APInt::trunc((llvm::APInt *)__src, v14, (llvm::APInt *)v539);
        }
        else
        {
          LODWORD(v539[1]) = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v539[0] = (void *)operator new[]();
            memcpy(v539[0], __src[0], (((unint64_t)LODWORD(v539[1]) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v539[0] = __src[0];
          }
        }
      }
      else
      {
        llvm::APInt::zext((llvm::APInt *)__src, v14, (uint64_t)v539);
      }
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
      *a5 = v539[0];
      *((_DWORD *)a5 + 2) = v539[1];
      if (v41)
        goto LABEL_610;
      if (*(_WORD *)(v534 + 24) != 205)
        goto LABEL_610;
      v393 = sub_1C6131A64((unsigned int *)&v534);
      v395 = v394;
      if (v393 != sub_1C6131A64((unsigned int *)v522) || v395 != v396)
        goto LABEL_610;
      v397 = v520;
      if (v521 < 0x41)
        goto LABEL_839;
      v398 = 0;
      v399 = ((unint64_t)v521 + 63) >> 6;
      do
      {
        v30 = v399-- < 1;
        if (v30)
          break;
        v400 = *((_QWORD *)v520 + v399);
        v398 += __clz(v400);
      }
      while (!v400);
      v401 = v521 | 0xFFFFFFC0;
      if ((v521 & 0x3F) == 0)
        v401 = 0;
      if (v521 - v398 - v401 <= 0x40)
      {
        v397 = *(void **)v520;
LABEL_839:
        if (v397 == (void *)1)
        {
          v402 = v534;
          v403 = v535;
          v404 = sub_1C6367DA8(*(_QWORD *)a7, v532, *((uint64_t *)&v532 + 1), (uint64_t)v522[0], (uint64_t)v522[1]);
          v234 = 0;
          *(_QWORD *)(a7 + 16) = v402;
          *(_DWORD *)(a7 + 24) = v403;
          *(_QWORD *)(a7 + 32) = v404;
          *(_DWORD *)(a7 + 40) = v405;
          goto LABEL_626;
        }
      }
LABEL_610:
      v319 = v534;
      if (*(_WORD *)(v534 + 24) != 207)
        goto LABEL_625;
      if (v530 > 0x40)
      {
        v322 = 0;
        v320 = (char *)*a5;
        while ((*(_QWORD *)((_BYTE *)__b + v322) & ~*(_QWORD *)&v320[v322]) == 0)
        {
          v322 += 8;
          if (((((unint64_t)v530 + 63) >> 3) & 0x3FFFFFF8) == v322)
            goto LABEL_618;
        }
      }
      else
      {
        v320 = (char *)*a5;
        if (((unint64_t)__b & ~*a5) == 0)
        {
LABEL_618:
          v323 = v535;
          v324 = *(_QWORD *)a7;
          v325 = *(void **)(v534 + 64);
          v539[0] = v325;
          if (v325)
            llvm::MetadataTracking::track((uint64_t)v539, (unsigned __int8 *)v325, 2);
          LODWORD(v539[1]) = *(_DWORD *)(v319 + 60);
          v326 = sub_1C6366AB4(v324, 0, (const llvm::APInt *)v539, (llvm *)v532, *((uint64_t *)&v532 + 1), 0, 0);
          *(_QWORD *)(a7 + 16) = v319;
          *(_DWORD *)(a7 + 24) = v323;
          *(_QWORD *)(a7 + 32) = v326;
          *(_DWORD *)(a7 + 40) = v327;
          if (v539[0])
            llvm::MetadataTracking::untrack((uint64_t)v539, (unsigned __int8 *)v539[0]);
          goto LABEL_622;
        }
      }
      v321 = *((unsigned int *)a5 + 2);
      if (v321 > 0x40)
        bzero(v320, ((unint64_t)(v321 + 63) >> 3) & 0x3FFFFFF8);
      else
        *a5 = 0;
      if (v41)
      {
LABEL_625:
        v234 = 1;
        goto LABEL_626;
      }
      v331 = v520;
      if (v521 >= 0x41)
      {
        v332 = 0;
        v333 = ((unint64_t)v521 + 63) >> 6;
        do
        {
          v30 = v333-- < 1;
          if (v30)
            break;
          v334 = *((_QWORD *)v520 + v333);
          v332 += __clz(v334);
        }
        while (!v334);
        v335 = v521 | 0xFFFFFFC0;
        if ((v521 & 0x3F) == 0)
          v335 = 0;
        if (v521 - v332 - v335 > 0x40)
          goto LABEL_625;
        v331 = *(void **)v520;
      }
      if (v331 != (void *)1)
        goto LABEL_625;
      if (*((_WORD *)v522[0] + 12) != 171)
        goto LABEL_625;
      v336 = *((_QWORD *)v522[0] + 6);
      if (!v336)
        goto LABEL_625;
      do
      {
        if (*(_QWORD *)(v336 + 16) != v534)
          goto LABEL_625;
        v336 = *(_QWORD *)(v336 + 32);
      }
      while (v336);
      v337 = sub_1C6131A64((unsigned int *)&v534);
      v339 = v338;
      if (v337 != sub_1C6131A64((unsigned int *)v522) || v339 != v340)
        goto LABEL_625;
      v342 = v534;
      v343 = *(unsigned __int8 **)(v534 + 64);
      v518 = v343;
      if (v343)
        llvm::MetadataTracking::track((uint64_t)&v518, v343, 2);
      LODWORD(v519) = *(_DWORD *)(v342 + 60);
      v517 = *(_OWORD *)(*((_QWORD *)v522[0] + 5) + 16 * LODWORD(v522[1]));
      v344 = (llvm *)sub_1C6131264((unsigned __int8 *)&v517, (uint64_t)v343, v341);
      v346 = v345;
      v539[0] = &v540;
      v539[1] = (void *)0x300000000;
      v347 = sub_1C63293BC(*(_QWORD *)a7, (const llvm::APInt *)&v518, (_BOOL8)v344, v345, 0, 0);
      v349 = v348;
      v350 = v539[1];
      if (LODWORD(v539[1]) >= HIDWORD(v539[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v539, (uint64_t)&v540, LODWORD(v539[1]) + 1, 16);
        v350 = v539[1];
      }
      v351 = (uint64_t *)((char *)v539[0] + 16 * v350);
      *v351 = v347;
      v351[1] = v349;
      ++LODWORD(v539[1]);
      v352 = sub_1C6366AB4(*(_QWORD *)a7, 0, (const llvm::APInt *)&v518, v344, v346, 0, 0);
      sub_1C63299CC((unsigned int *)v539, v183 - 1, (uint64_t)v352, v353);
      v354 = 0;
      v355 = *(_QWORD *)(*(_QWORD *)a7 + 832);
      if (v355)
        v354 = *(unsigned __int16 *)(v355 + 8);
      v356 = sub_1C636D0C8(*(_QWORD *)a7, (const char *)0x92, (const llvm::APInt *)&v518, (llvm *)v517, *((uint64_t *)&v517 + 1), (uint64_t *)v539[0], LODWORD(v539[1]), v354);
      v357 = *(_QWORD *)a7;
      v358 = *((_QWORD *)v522[0] + 4);
      v536[0] = *(void **)(v358 + 40);
      LODWORD(v536[1]) = *(_DWORD *)(v358 + 48);
      v537 = v356;
      v538 = v359;
      v362 = sub_1C5D53628(v357, 171, (const char *)&v518, (llvm *)v517, *((uint64_t *)&v517 + 1), (uint64_t)v536, 2);
      if (v362)
      {
        v479 = v360;
        v480 = (uint64_t *)*((_QWORD *)v522[0] + 4);
        v481 = *v480;
        v482 = v480[1];
        v483 = *(_QWORD *)(*(_QWORD *)a7 + 832);
        if (v483)
          LOWORD(v483) = *(_WORD *)(v483 + 8);
        v484 = sub_1C5D56C70(*(_QWORD *)a7, 171, (const llvm::APInt *)&v518, (llvm *)v517, *((uint64_t *)&v517 + 1), v481, v482, v361, (uint64_t)v362, v360, v483);
        v486 = v534;
        v487 = v535;
        v488 = sub_1C6367DA8(*(_QWORD *)a7, v532, *((uint64_t *)&v532 + 1), (uint64_t)v484, v479 & 0xFFFFFFFF00000000 | v485);
        *(_QWORD *)(a7 + 16) = v486;
        *(_DWORD *)(a7 + 24) = v487;
        *(_QWORD *)(a7 + 32) = v488;
        *(_DWORD *)(a7 + 40) = v489;
      }
      if (v539[0] != &v540)
        free(v539[0]);
      if (v518)
        llvm::MetadataTracking::untrack((uint64_t)&v518, v518);
      if (!v362)
        goto LABEL_625;
LABEL_622:
      v234 = 0;
LABEL_626:
      if (v521 >= 0x41 && v520)
        MEMORY[0x1CAA32F9C](v520, 0x1000C8000313F17);
      if (v524 >= 0x41 && v523)
        MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      if ((v234 & 1) != 0)
        goto LABEL_197;
      goto LABEL_473;
  }
}

unint64_t sub_1C5D8C23C(uint64_t ***a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  unint64_t v13;
  int8x8_t *v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int64_t v28;
  unint64_t v30;
  int v31;
  void *v32;
  unsigned int v33;
  void *__src;
  unsigned int v35;

  if (*(_WORD *)(a2 + 24) != 58)
    return 0;
  v3 = *(_QWORD *)(a2 + 48);
  if (!v3)
    return 0;
  v5 = 1;
  do
  {
    if (*(_DWORD *)(v3 + 8) == a3)
    {
      if (!v5)
        return 0;
      --v5;
    }
    v3 = *(_QWORD *)(v3 + 32);
  }
  while (v3);
  if (v5)
    return 0;
  v8 = sub_1C5D4F7E8(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0, 0);
  if (!v8 || (*(_BYTE *)(v8 + 26) & 8) != 0)
    return 0;
  v9 = *(_QWORD *)(v8 + 80);
  v6 = v9 + 24;
  v10 = *(unsigned int *)(v9 + 32);
  if (v10 <= 0x40)
  {
    if ((*(_QWORD *)v6 & (*(_QWORD *)v6 - 1)) != 0)
    {
      v11 = (void *)((unint64_t)**a1 | *(_QWORD *)v6);
      goto LABEL_22;
    }
    return 0;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 24)) == (_DWORD)v10)
    return 0;
  v12 = 0;
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = *(int8x8_t **)v6;
  v15 = v13;
  do
  {
    v16 = *v14++;
    v17 = (uint8x8_t)vcnt_s8(v16);
    v17.i16[0] = vaddlv_u8(v17);
    v12 += v17.i32[0];
    --v15;
  }
  while (v15);
  if (v12 == 1)
    return 0;
  v11 = (void *)operator new[]();
  memcpy(v11, *(const void **)v6, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
  v18 = **a1;
  v19 = v11;
  do
  {
    v20 = *v18++;
    *v19++ |= v20;
    --v13;
  }
  while (v13);
LABEL_22:
  v35 = v10;
  __src = v11;
  v21 = sub_1C57EDD40((llvm::APInt *)&__src);
  v22 = v21;
  if (v21)
  {
    v33 = v35;
    if (v35 > 0x40)
    {
      v24 = (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8;
      v32 = (void *)operator new[]();
      memcpy(v32, __src, v24);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v32);
    }
    else
    {
      if (v35)
        v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
      else
        v23 = 0;
      v32 = (void *)(v23 & ~(unint64_t)__src);
    }
    llvm::APInt::operator++((uint64_t)&v32);
    v25 = v33;
    v33 = 0;
    if (v25 > 0x40)
    {
      v27 = 0;
      v28 = (unint64_t)(v25 + 63) >> 6;
      do
      {
        if (v28-- < 1)
          break;
        v30 = *((_QWORD *)v32 + v28);
        v27 += __clz(v30);
      }
      while (!v30);
      v31 = v25 | 0xFFFFFFC0;
      if ((v25 & 0x3F) == 0)
        v31 = 0;
      v26 = v27 + v31;
      if (v32)
      {
        MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        if (v33 >= 0x41)
        {
          if (v32)
            MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      v26 = v25 + __clz((unint64_t)v32) - 64;
    }
    v6 = (v25 + ~v26);
  }
  if (v35 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (!v22)
    return 0;
  return v6;
}

BOOL sub_1C5D8C504(uint64_t a1, uint64_t a2, _BOOL8 a3, uint64_t a4, _BOOL8 a5)
{
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;

  v10 = *(unsigned int **)a1;
  v11 = (uint64_t)sub_1C6375FC8(*(unsigned int **)a1, a2, a3, *(unsigned int **)(a1 + 8), **(_QWORD **)(a1 + 16), (**(_DWORD **)(a1 + 24) + 1));
  v13 = v12;
  v16 = (uint64_t)sub_1C6375FC8(v10, a4, a5, *(unsigned int **)(a1 + 8), **(_QWORD **)(a1 + 16), (**(_DWORD **)(a1 + 24) + 1));
  result = (v11 | v16) != 0;
  if (v11 | v16)
  {
    v18 = v14;
    v19 = **(_QWORD **)(a1 + 16);
    v20 = *(uint64_t **)(a1 + 40);
    v21 = **(unsigned int **)(a1 + 32);
    v22 = *v20;
    v23 = *(unsigned __int8 **)(*v20 + 64);
    v42 = v23;
    if (v23)
    {
      v40 = v13;
      v41 = v19;
      v24 = v21;
      llvm::MetadataTracking::track((uint64_t)&v42, v23, 2);
      v21 = v24;
      v13 = v40;
      v19 = v41;
    }
    v43 = *(_DWORD *)(v22 + 60);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(llvm **)v25;
    v27 = *(_QWORD *)(v25 + 8);
    if (v11)
      v28 = v11;
    else
      v28 = a2;
    if (v11)
      v29 = v13;
    else
      v29 = a3;
    if (v16)
      v30 = v16;
    else
      v30 = a4;
    if (v16)
      v31 = v18;
    else
      v31 = a5;
    v32 = *(_QWORD *)(v19 + 832);
    if (v32)
      LOWORD(v32) = *(_WORD *)(v32 + 8);
    v33 = sub_1C5D56C70(v19, v21, (const llvm::APInt *)&v42, v26, v27, v28, v29, v15, v30, v31, v32);
    v35 = v34;
    if (v42)
      llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
    v36 = *(_QWORD *)(a1 + 16);
    v37 = *(uint64_t **)(a1 + 40);
    v39 = *v37;
    v38 = v37[1];
    *(_QWORD *)(v36 + 16) = v39;
    *(_DWORD *)(v36 + 24) = v38;
    *(_QWORD *)(v36 + 32) = v33;
    *(_DWORD *)(v36 + 40) = v35;
    return (v11 | v16) != 0;
  }
  return result;
}

_QWORD *sub_1C5D8C678(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  return sub_1C4912E54(a3, 0, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 56) + 8)+ 40 * (*(_DWORD *)(*(_QWORD *)(a4 + 56) + 32) + a2)+ 16));
}

uint64_t sub_1C5D8C6A0(unsigned int *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  llvm::APInt *v10;
  unsigned int v11;

  if (!a2)
    return 0;
  v4 = *(unsigned __int16 *)(a2 + 24);
  v5 = a2;
  if (v4 == 11 || v4 == 35)
  {
LABEL_11:
    v8 = sub_1C6329468(a1, **(_QWORD **)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8));
    v9 = *(_QWORD *)(v5 + 80);
    v10 = (llvm::APInt *)(v9 + 24);
    v11 = *(_DWORD *)(v9 + 32);
    if (v8)
    {
      if (v11 > 0x40)
        return llvm::APInt::countLeadingZerosSlowCase(v10) == v11;
      else
        return *(_QWORD *)v10 == 0;
    }
    else
    {
      if (v11 >= 0x41)
        v10 = *(llvm::APInt **)v10;
      return (*(_BYTE *)v10 & 1) == 0;
    }
  }
  if (v4 != 146)
    return 0;
  result = sub_1C6367A48(a2, 0);
  if (result)
  {
    v5 = result;
    v7 = *(unsigned __int16 *)(result + 24);
    if (v7 != 35 && v7 != 11)
      return 0;
    goto LABEL_11;
  }
  return result;
}

BOOL sub_1C5D8C780(int8x8_t *a1, uint64_t a2)
{
  uint64_t v2;
  int8x8_t *v3;
  uint8x8_t v4;
  int8x8_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  int v12;
  int8x8_t v13;
  uint8x8_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int8x8_t v18;
  uint8x8_t v19;

  v2 = a1[1].u32[0];
  if (v2 > 0x40)
  {
    v7 = (int8x8_t *)*a1;
    v3 = *(int8x8_t **)a2;
    v8 = (unint64_t)(v2 + 63) >> 6;
    v9 = v8;
    while (v9 * 8)
    {
      v10 = *(_QWORD *)(*(_QWORD *)a1 - 8 + v9 * 8);
      v11 = v3[--v9];
      if (v10 != *(_QWORD *)&v11)
      {
        if (v10 <= *(_QWORD *)&v11)
          return 0;
        v12 = 0;
        do
        {
          v13 = *v7++;
          v14 = (uint8x8_t)vcnt_s8(v13);
          v14.i16[0] = vaddlv_u8(v14);
          v12 += v14.i32[0];
          --v8;
        }
        while (v8);
        if (v12 != 1)
          return 0;
        goto LABEL_14;
      }
    }
    return 0;
  }
  v3 = *(int8x8_t **)a2;
  v4 = (uint8x8_t)vcnt_s8(*a1);
  v4.i16[0] = vaddlv_u8(v4);
  if (*(_QWORD *)a1 <= *(_QWORD *)a2 || v4.u32[0] != 1)
    return 0;
LABEL_14:
  v15 = *(unsigned int *)(a2 + 8);
  if (v15 > 0x40)
  {
    v16 = 0;
    v17 = (unint64_t)(v15 + 63) >> 6;
    do
    {
      v18 = *v3++;
      v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      v16 += v19.i32[0];
      --v17;
    }
    while (v17);
    return v16 == 1;
  }
  else
  {
    return v3 && ((unint64_t)v3 & ((unint64_t)&v3[-1] + 7)) == 0;
  }
}

uint64_t sub_1C5D8C870(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 48);
  if (!v3)
    return 0;
  v6 = 1;
  do
  {
    if (*(_DWORD *)(v3 + 8) == a3)
    {
      if (!v6)
        return 0;
      --v6;
    }
    v3 = *(_QWORD *)(v3 + 32);
  }
  while (v3);
  if (v6)
    return 0;
  v8 = *(unsigned __int16 *)(a2 + 24);
  if ((_DWORD)v8 == 175)
  {
    v9 = 177;
  }
  else
  {
    if ((_DWORD)v8 != 177)
      return 0;
    v9 = 175;
  }
  **(_DWORD **)a1 = v9;
  v10 = *(uint64_t **)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *v10;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)v10 + 2);
  *(_QWORD *)v11 = v12;
  v13 = sub_1C5D4F7E8(**(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1, 1);
  if (!v13)
    return 0;
  v14 = v13;
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(v15 + 40);
  *(_DWORD *)(v16 + 8) = *(_DWORD *)(v15 + 48);
  *(_QWORD *)v16 = v17;
  v18 = sub_1C5D4F7E8(**(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 1, 1);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _DWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 352))(*(_QWORD *)(a1 + 32), **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v18, v14, **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v8, **(_DWORD **)a1, *(_QWORD *)(a1 + 40));
}

uint64_t *sub_1C5D8C994(unsigned int *a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8, char a9, uint64_t a10, const llvm::APInt *a11)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::APInt *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm *v51;
  uint64_t v52;
  uint64_t v53;
  const llvm::APInt *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  llvm::APInt *v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  const char *v79;
  BOOL v80;
  llvm::APInt *v81;
  uint64_t v82;
  llvm::APInt *v83;
  llvm *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  llvm::APInt *v93;
  int v94;
  _BYTE *v95;
  int v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _QWORD *v103;
  int v104;
  const char *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  llvm::APInt *v112;
  unsigned int v113;
  int v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  llvm::APInt *v120;
  unsigned int v121;
  BOOL v122;
  int v123;
  llvm *v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  const llvm::APInt *v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  llvm *v135;
  uint64_t v136;
  uint64_t *v137;
  unint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  llvm *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  const char *v156;
  unsigned int v157;
  __int128 v158;
  unsigned int v159;
  uint64_t v160;
  _BOOL4 v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  llvm::APInt *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int *v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t *v174;
  unsigned int v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  const char *v188;
  uint64_t v189;
  BOOL v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  _QWORD *v194;
  BOOL v196;
  int v197;
  BOOL v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  unsigned int v204;
  llvm::APInt *v205;
  int v206;
  llvm::APInt *v207;
  unint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  llvm *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  llvm *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  _QWORD *v239;
  unint64_t v240;
  unsigned int v241;
  unsigned int v242;
  const char *v243;
  unsigned int v244;
  int v245;
  char v246;
  _BOOL8 v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  uint64_t *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  void *v265;
  llvm::APInt *v266;
  unsigned int v267;
  uint8x8_t v268;
  uint64_t v269;
  uint64_t v270;
  llvm::APInt *v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  _BOOL4 v276;
  llvm::LLVMContext *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  int v282;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  llvm *v288;
  uint64_t v289;
  unsigned int v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  BOOL v296;
  uint64_t *v297;
  unint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t v310;
  int v311;
  uint64_t ExtendedSizeInBits;
  const llvm::APInt *v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  llvm *v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  __int16 v328;
  llvm *v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  llvm::APInt *v341;
  unsigned int v342;
  unsigned int v343;
  uint8x8_t v344;
  __int32 v345;
  unint64_t v346;
  int8x8_t *v347;
  int8x8_t v348;
  uint8x8_t v349;
  unsigned int v350;
  uint8x8_t v351;
  unsigned int v352;
  unint64_t v353;
  int8x8_t *v354;
  int8x8_t v355;
  uint8x8_t v356;
  __int128 v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v368;
  llvm::APInt *v369;
  llvm::Type *v370;
  unsigned int v371;
  unsigned int v372;
  uint64_t v373;
  unsigned int v374;
  llvm *v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  llvm::APInt *v390;
  uint64_t v391;
  uint64_t v392;
  BOOL v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  llvm *v400;
  uint64_t v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  __int128 *v408;
  unsigned int v409;
  void *v410;
  unint64_t v411;
  __int128 *v412;
  void *v413;
  unint64_t v414;
  unsigned int v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  const void **v419;
  _QWORD *v420;
  uint64_t v421;
  int v422;
  llvm *ShiftAmountTy;
  llvm::APInt *v424;
  unsigned int v425;
  _QWORD *v426;
  uint64_t v427;
  const void **v428;
  uint64_t v429;
  const void *v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  void *v438;
  uint64_t v439;
  unsigned int v440;
  __int128 v441;
  __int128 v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  void *v453;
  _BOOL4 v454;
  llvm::Type *v455;
  uint64_t v456;
  BOOL v457;
  unsigned int v458;
  uint64_t *v459;
  unsigned int v460;
  void *v461;
  uint64_t v462;
  BOOL v463;
  char v464;
  uint64_t v465;
  void *v466;
  _BOOL4 v467;
  unsigned int v468;
  unsigned int v469;
  unint64_t v470;
  unsigned int v471;
  llvm *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  void *v481;
  uint64_t v482;
  BOOL v483;
  char v484;
  unsigned int v485;
  uint64_t v486;
  llvm::APInt *v487;
  unsigned int v488;
  uint64_t v489;
  BOOL v490;
  const llvm::APInt *v491;
  _BOOL4 v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t *v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t *v507;
  uint64_t *v508;
  _BOOL4 v509;
  unint64_t v510;
  int v511;
  unint64_t v512;
  int v513;
  uint64_t *v514;
  uint64_t v515;
  const llvm::APInt *v516;
  _QWORD *v517;
  unsigned int v519;
  const void *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD **v528;
  unsigned int v529;
  _QWORD *v530;
  const char *v531;
  __int128 *v532;
  uint64_t v533;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  __int16 v541;
  uint64_t v542;
  uint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t *v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t *v567;
  unint64_t v568;
  unint64_t v569;
  _QWORD *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  unsigned int v577;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint8x8_t v584;
  uint64_t v585;
  const char *v586;
  uint64_t v587;
  int v588;
  unint64_t v589;
  uint8x8_t v590;
  uint64_t v591;
  llvm::APInt *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  unsigned int v603;
  _QWORD *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unsigned int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  llvm *v615;
  uint64_t v616;
  llvm *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  unsigned int v632;
  const void *v633;
  uint64_t v634;
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  unsigned int v642;
  unsigned int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int v649;
  int v650;
  unsigned int v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint8x8_t v657;
  int v658;
  __int128 v659;
  __int128 v660;
  uint64_t *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  __int128 v669;
  __int128 v670;
  uint64_t *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  int8x8_t *v679;
  int v680;
  unint64_t v681;
  int8x8_t v682;
  uint8x8_t v683;
  llvm *v684;
  unsigned int *v685;
  uint64_t v686;
  int v688;
  uint64_t v689;
  unsigned int v690;
  llvm::APInt *v691;
  unsigned int v692;
  BOOL v693;
  uint64_t v694;
  uint64_t v695;
  BOOL v696;
  uint64_t v697;
  __int16 v698;
  int v699;
  uint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  unsigned int v703;
  _QWORD *v704;
  llvm *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  int8x8_t *v716;
  int8x8_t v717;
  uint8x8_t v718;
  uint64_t v719;
  int v720;
  unsigned int v721;
  uint64_t v722;
  llvm::APInt *v723;
  llvm *v724;
  unsigned int v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  int v729;
  uint64_t v731;
  const void **v732;
  uint64_t v733;
  unsigned int v734;
  void *v735;
  uint64_t v736;
  void *v737;
  int v738;
  unsigned int v739;
  unsigned int v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  int v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unsigned int v748;
  uint64_t v749;
  llvm *v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  __int16 v754;
  uint64_t v755;
  char v756;
  uint64_t v757;
  char v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  __int128 v762;
  uint64_t *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  BOOL v769;
  unsigned int v770;
  int v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int v775;
  unsigned int v776;
  unsigned __int8 *v777;
  int v778;
  uint64_t v779;
  int v780;
  BOOL v781;
  uint64_t v782;
  int v783;
  uint64_t v785;
  int v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t *v794;
  uint64_t v795;
  int v796;
  int v798;
  uint64_t v799;
  llvm *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  void *v811;
  int v812;
  uint64_t v814;
  __int128 v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  void *v820;
  uint64_t v821;
  const char *v822;
  unint64_t v823;
  uint64_t v824;
  unsigned int v825;
  uint64_t v826;
  uint64_t v827;
  int v828;
  int v829;
  __int128 v830;
  __int128 v831;
  _QWORD *v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  _QWORD *v839;
  __int128 v840;
  _QWORD *v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  __int128 v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t *v856;
  uint64_t v857;
  unint64_t *v858;
  unint64_t v859;
  unint64_t *v860;
  unint64_t v861;
  unint64_t v862;
  unint64_t v863;
  _BOOL4 v864;
  unint64_t v865;
  uint64_t *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t *v875;
  unint64_t v876;
  unint64_t *v877;
  unint64_t v878;
  unint64_t v879;
  unint64_t v880;
  _BOOL4 v881;
  unint64_t v882;
  uint64_t *v883;
  unint64_t v884;
  _QWORD *v885;
  uint64_t v886;
  uint64_t *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t *v895;
  uint64_t v896;
  size_t v897;
  char *v898;
  uint64_t v899;
  char *v900;
  int v901;
  unsigned int v902;
  uint64_t v903;
  int v904;
  llvm::APInt *v905;
  BOOL v906;
  uint64_t ExtendedIntegerVT;
  uint64_t v908;
  BOOL v909;
  uint64_t *v910;
  uint64_t v911;
  unint64_t v912;
  _QWORD *v913;
  unint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  __int128 v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  char v927;
  unsigned int v928;
  uint64_t v929;
  _QWORD *v930;
  uint64_t v931;
  uint64_t v932;
  __int128 v933;
  uint64_t *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unsigned int v939;
  int v940;
  int v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t *v944;
  uint64_t *v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  unsigned int v950;
  void *v951;
  unint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  unint64_t v958;
  _QWORD *v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t *v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t *v974;
  uint64_t *v975;
  uint64_t *v976;
  unint64_t v977;
  size_t v978;
  void *v979;
  uint64_t *v980;
  unint64_t v981;
  uint64_t *v982;
  uint64_t v983;
  unsigned int v984;
  llvm *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  _QWORD *v990;
  unint64_t v991;
  unint64_t v992;
  __int128 v993;
  llvm *v994;
  uint64_t v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  __int16 v999;
  uint64_t v1000;
  uint64_t *v1001;
  uint64_t v1002;
  uint64_t v1003;
  _QWORD *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unsigned int v1011;
  int v1012;
  unsigned int v1013;
  uint64_t v1014;
  int v1015;
  __int128 v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  __int16 v1023;
  __int16 v1024;
  unsigned int v1025;
  unsigned int __n;
  signed int __na;
  uint64_t v1028;
  unsigned int v1029;
  uint64_t v1030;
  uint64_t v1031;
  void *v1032;
  llvm *v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  void *v1037;
  unsigned int v1038;
  llvm *v1039;
  llvm *v1040;
  llvm *v1041;
  llvm::APInt *v1042;
  unsigned int v1043;
  llvm::APInt *v1044;
  unsigned int v1045;
  uint64_t v1046;
  llvm::APInt *v1047;
  const void **v1048;
  llvm::APInt *v1049;
  llvm::APInt *v1050;
  llvm::APInt *v1051;
  unsigned int v1052;
  void *v1056;
  unsigned int v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  unint64_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  uint64_t *v1066;
  unint64_t v1067;
  uint64_t v1068;
  BOOL v1069;
  void *v1070;
  unsigned int v1071;
  void *__s2;
  unsigned int v1073;
  uint64_t v1074;
  unsigned int v1075;
  uint64_t v1076;
  unsigned int v1077;
  uint64_t v1078;
  unint64_t v1079;
  __int128 v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unsigned int v1084;
  llvm *v1085;
  uint64_t v1086;
  unsigned int v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  BOOL *v1092;
  __int128 *v1093;
  unsigned int *v1094;
  __int128 v1095;
  int8x8_t *v1096;
  unsigned int v1097;
  uint64_t v1098;

  v13 = a4;
  v1098 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v1089 = a2;
  *((_QWORD *)&v1089 + 1) = a3;
  *(_QWORD *)&v1088 = a4;
  *((_QWORD *)&v1088 + 1) = a5;
  v1087 = a8;
  v16 = *(_QWORD *)(a10 + 16);
  v1047 = *(llvm::APInt **)(**(_QWORD **)(v16 + 40) + 40);
  v17 = *(_QWORD *)(a4 + 40) + 16 * a5;
  v19 = *(llvm **)v17;
  v18 = *(_QWORD *)(v17 + 8);
  v1085 = *(llvm **)v17;
  v1086 = v18;
  v20 = sub_1C5D443A8((_QWORD *)v16, a2, a3, a4, a5, a6, a7, a8, a11);
  if (v20)
    return v20;
  v1042 = (llvm::APInt *)v18;
  v1030 = a3;
  v1033 = a2;
  v1046 = v16;
  v21 = sub_1C5D4F7E8(v13, a5, 0, 1);
  v22 = a7;
  v23 = sub_1C5D4F7E8(a6, a7, 0, 1);
  v24 = (a8 >> 1) & 2 | a8 & 0xFFFFFFF9 | (4 * ((a8 >> 1) & 1));
  v25 = a5;
  if (v21)
  {
    if ((_BYTE)v19)
      v26 = v19 - 120 < 0x33;
    else
      v26 = *((unsigned __int8 *)v1042 + 8) == 19;
    if (v26 && v23 != 0)
      goto LABEL_18;
    if (*(int *)(a10 + 8) >= 2)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 16 * a5);
      if (((a1[23 * v24 + 42897 + (v31 >> 3)] >> (4 * (v31 & 7))) & 0xF) != 0)
        goto LABEL_18;
    }
    v46 = sub_1C6367818((_QWORD *)v1046, v24);
    v49 = *(_QWORD *)(v1046 + 832);
    if (v49)
      LOWORD(v49) = *(_WORD *)(v49 + 8);
    v50 = a6;
    v52 = a3;
    v51 = a2;
    v1021 = v47;
    v1023 = v49;
    *((_QWORD *)&v1016 + 1) = a5;
    v1019 = v46;
    *(_QWORD *)&v1016 = v13;
    v54 = a11;
    v53 = v1046;
LABEL_45:
    v55 = a7;
    return sub_1C5D58E08(v53, (const char *)0xC1, v54, v51, v52, v50, v55, v48, v1016, *((uint64_t *)&v1016 + 1), v1019, v1021, SHIDWORD(v1021), v1023);
  }
  if (!v23)
  {
    if (*(int *)(a10 + 8) < 2
      || (v27 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 16 * a5),
          ((a1[23 * v24 + 42897 + (v27 >> 3)] >> (4 * (v27 & 7))) & 0xF) == 0))
    {
      v28 = sub_1C636D7B0(v19, (uint64_t)v1042);
      v29 = a6;
      *(_QWORD *)&v1090 = a6;
      DWORD2(v1090) = a7;
      *(_QWORD *)&v1091 = v1088;
      DWORD2(v1091) = DWORD2(v1088);
      if (sub_1C636E804(v1046, 0x39u, v28, 1, (uint64_t *)&v1090, 2))
      {
        v579 = sub_1C636D7B0(v1085, v1086);
        *(_QWORD *)&v1095 = v1088;
        DWORD2(v1095) = DWORD2(v1088);
        v1096 = (int8x8_t *)a6;
        v1097 = a7;
        v25 = *((_QWORD *)&v1088 + 1);
        v1030 = *((_QWORD *)&v1089 + 1);
        v1033 = (llvm *)v1089;
        v13 = v1088;
        if (sub_1C636E804(v1046, 0x39u, v579, 1, (uint64_t *)&v1095, 2))
          goto LABEL_19;
        v580 = sub_1C6367818((_QWORD *)v1046, v24);
        v582 = *(_QWORD *)(v1046 + 832);
        if (v582)
          LOWORD(v582) = *(_WORD *)(v582 + 8);
        v1021 = v581;
        v1023 = v582;
        v1019 = v580;
        v1016 = v1088;
        v54 = a11;
        v53 = v1046;
        v52 = *((_QWORD *)&v1089 + 1);
        v51 = (llvm *)v1089;
        v50 = a6;
        goto LABEL_45;
      }
      v25 = *((_QWORD *)&v1088 + 1);
      v1030 = *((_QWORD *)&v1089 + 1);
      v1033 = (llvm *)v1089;
      v13 = v1088;
    }
  }
LABEL_18:
  v29 = a6;
LABEL_19:
  v32 = v1087;
  if (v1087 == 22 || v1087 == 17)
  {
    v33 = sub_1C5D4F7E8(v29, a7, 1, 0);
    if (v33)
    {
      v35 = *(_QWORD *)(v33 + 80);
      v36 = (llvm::APInt *)(v35 + 24);
      v37 = *(_DWORD *)(v35 + 32);
      if (v37 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v35 + 24)) != v37
          && llvm::APInt::countTrailingOnesSlowCase(v36) != v37)
        {
          goto LABEL_56;
        }
      }
      else if (v37 && *(_QWORD *)v36 && *(_QWORD *)v36 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v37)
      {
        goto LABEL_56;
      }
      v38 = *(unsigned __int16 *)(v13 + 24);
      if ((v38 & 0xFFFE) == 0xB2)
      {
        v39 = *(_QWORD *)(v13 + 32);
        v40 = *(uint64_t **)v39;
        if (*(_QWORD *)v39)
        {
          v64 = *(_QWORD *)(v39 + 8);
          goto LABEL_53;
        }
      }
      v41 = *(_QWORD *)(v13 + 48);
      if (!v41)
        goto LABEL_56;
      v42 = *(_QWORD *)(v13 + 40) + 16 * v25;
      v44 = *(llvm **)v42;
      v43 = *(_QWORD *)(v42 + 8);
      v45 = 1;
      do
      {
        if (*(_DWORD *)(v41 + 8) == (_DWORD)v25)
        {
          if (!v45)
            goto LABEL_56;
          --v45;
        }
        v41 = *(_QWORD *)(v41 + 32);
      }
      while (v41);
      if (v38 != 172 || v45)
        goto LABEL_56;
      if (v37 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v36) != v37)
          goto LABEL_56;
      }
      else if (*(_QWORD *)v36)
      {
        goto LABEL_56;
      }
      v56 = *(uint64_t **)(v13 + 32);
      v57 = *v56;
      if ((*(_WORD *)(*v56 + 24) & 0xFFFE) == 0xB2)
      {
        v58 = *(uint64_t **)(v57 + 32);
        v59 = *v58;
        if (*v58)
        {
          v62 = v58[1];
          v57 = v56[5];
          v63 = v56[6];
          goto LABEL_754;
        }
      }
      v60 = v56[5];
      if ((*(_WORD *)(v60 + 24) & 0xFFFE) == 0xB2)
      {
        v61 = *(uint64_t **)(v60 + 32);
        v59 = *v61;
        if (*v61)
        {
          v62 = v61[1];
          v63 = v56[1];
LABEL_754:
          v593 = *(_QWORD *)(v1046 + 832);
          if (v593)
            LOWORD(v593) = *(_WORD *)(v593 + 8);
          v40 = sub_1C5D56C70(v1046, 172, a11, v44, v43, v59, v62, v34, v57, v63, v593);
          v64 = v594;
LABEL_53:
          v65 = sub_1C6367818((_QWORD *)v1046, v1087);
          v68 = *(_QWORD *)(v1046 + 832);
          if (v68)
            LOWORD(v68) = *(_WORD *)(v68 + 8);
          v20 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v1033, v1030, (uint64_t)v40, v64, v67, v29, a7, v65, v66, SHIDWORD(v66), v68);
          if (v20)
            return v20;
        }
      }
    }
LABEL_56:
    v32 = v1087;
    v25 = *((_QWORD *)&v1088 + 1);
    v1030 = *((_QWORD *)&v1089 + 1);
    v1033 = (llvm *)v1089;
    v13 = v1088;
  }
  *(_QWORD *)&v1090 = v13;
  *((_QWORD *)&v1090 + 1) = v25;
  if (v32 == 22 || v32 == 17)
  {
    v70 = sub_1C5D4F7E8(v29, a7, 1, 0);
    if (v70)
    {
      v73 = *(_QWORD *)(v70 + 80);
      v74 = (llvm::APInt *)(v73 + 24);
      v75 = *(_DWORD *)(v73 + 32);
      if (v75 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v74) != v75)
          goto LABEL_75;
      }
      else if (*(_QWORD *)v74)
      {
        goto LABEL_75;
      }
      v76 = *(_QWORD *)(v1090 + 48);
      if (v76)
      {
        v77 = 1;
        do
        {
          if (*(_DWORD *)(v76 + 8) == DWORD2(v1090))
          {
            if (!v77)
              goto LABEL_75;
            --v77;
          }
          v76 = *(_QWORD *)(v76 + 32);
        }
        while (v76);
        if (!v77 && (*(_WORD *)(v1090 + 24) & 0xFFFE) == 0xB4)
        {
          v525 = sub_1C6329368((unsigned int *)&v1090, v71, v72);
          v526 = sub_1C5D4F7E8(*(_QWORD *)(*(_QWORD *)(v1090 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v1090 + 32) + 88), 0, 0);
          if (v526)
          {
            v527 = *(_QWORD *)(v526 + 80);
            v528 = (_QWORD **)(v527 + 24);
            v529 = *(_DWORD *)(v527 + 32);
            if (v529 >= 0x41)
            {
              v611 = v529 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v527 + 24));
              v29 = a6;
              if (v611 >= 0x41)
                goto LABEL_75;
              v530 = (_QWORD *)**v528;
              if ((unint64_t)v530 >= v525)
                goto LABEL_75;
            }
            else
            {
              v530 = *v528;
              v29 = a6;
              if ((unint64_t)*v528 >= v525)
                goto LABEL_75;
            }
            if (*(_WORD *)(v1090 + 24) == 181)
              LODWORD(v530) = v525 - (_DWORD)v530;
            v612 = *(_QWORD *)(v1090 + 32);
            v613 = *(_QWORD *)(v1090 + 40) + 16 * DWORD2(v1090);
            v615 = *(llvm **)v613;
            v614 = *(_QWORD *)(v613 + 8);
            v616 = *(_QWORD *)(*(_QWORD *)(v612 + 80) + 40) + 16 * *(unsigned int *)(v612 + 88);
            v617 = *(llvm **)v616;
            v618 = *(_QWORD *)(v616 + 8);
            v620 = *(_QWORD *)v612;
            v619 = *(_QWORD *)(v612 + 8);
            v621 = *(_QWORD *)(v612 + 40);
            v622 = *(_QWORD *)(v612 + 48);
            if (*(_WORD *)(*(_QWORD *)v612 + 24) != 172)
              goto LABEL_787;
            v623 = *(_QWORD *)(v620 + 48);
            if (!v623)
              goto LABEL_787;
            v624 = v622;
            v625 = 1;
            do
            {
              if (*(_DWORD *)(v623 + 8) == (_DWORD)v619)
              {
                if (!v625)
                  goto LABEL_787;
                --v625;
              }
              v623 = *(_QWORD *)(v623 + 32);
            }
            while (v623);
            if (v625)
              goto LABEL_787;
            v626 = a7;
            v627 = *(_QWORD *)(v620 + 32);
            v628 = *(_QWORD *)v627;
            if (*(_QWORD *)v627 == v621 && *(_DWORD *)(v627 + 8) == (_DWORD)v622)
            {
              v955 = *(_QWORD *)(v627 + 40);
              v627 += 40;
              v628 = v955;
            }
            else
            {
              v29 = a6;
              if (*(_QWORD *)(v627 + 40) != v621 || *(_DWORD *)(v627 + 48) != (_DWORD)v622)
              {
LABEL_787:
                if (*(_WORD *)(v621 + 24) != 172)
                  goto LABEL_75;
                v629 = *(_QWORD *)(v621 + 48);
                if (!v629)
                  goto LABEL_75;
                v624 = v619;
                v630 = 1;
                do
                {
                  if (*(_DWORD *)(v629 + 8) == (_DWORD)v622)
                  {
                    if (!v630)
                      goto LABEL_75;
                    --v630;
                  }
                  v629 = *(_QWORD *)(v629 + 32);
                }
                while (v629);
                if (v630)
                  goto LABEL_75;
                v626 = a7;
                v627 = *(_QWORD *)(v621 + 32);
                v628 = *(_QWORD *)v627;
                if (*(_QWORD *)v627 == v620 && *(_DWORD *)(v627 + 8) == (_DWORD)v619)
                {
                  v957 = *(_QWORD *)(v627 + 40);
                  v627 += 40;
                  v628 = v957;
                }
                else
                {
                  v29 = a6;
                  if (*(_QWORD *)(v627 + 40) != v620 || *(_DWORD *)(v627 + 48) != (_DWORD)v619)
                    goto LABEL_75;
                }
                LODWORD(v530) = v525 - (_DWORD)v530;
                v956 = 177;
                goto LABEL_1285;
              }
            }
            v956 = 175;
            v620 = v621;
LABEL_1285:
            v958 = *(unsigned int *)(v627 + 8);
            v959 = sub_1C6366AB4(v1046, v530, a11, v617, v618, 0, 0);
            v962 = *(_QWORD *)(v1046 + 832);
            if (v962)
              LOWORD(v962) = *(_WORD *)(v962 + 8);
            v964 = sub_1C5D56C70(v1046, v956, a11, v615, v614, v628, v958, v961, (uint64_t)v959, v960, v962);
            v966 = *(_QWORD *)(v1046 + 832);
            if (v966)
              LOWORD(v966) = *(_WORD *)(v966 + 8);
            v967 = sub_1C5D56C70(v1046, 172, a11, v615, v614, (uint64_t)v964, v963, v965, v620, v624, v966);
            v969 = v968;
            v970 = sub_1C6367818((_QWORD *)v1046, v32);
            v973 = *(_QWORD *)(v1046 + 832);
            if (v973)
              LOWORD(v973) = *(_WORD *)(v973 + 8);
            v22 = v626;
            v29 = a6;
            v20 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v1033, v1030, (uint64_t)v967, v969, v972, a6, v626, v970, v971, SHIDWORD(v971), v973);
            if (v20)
              return v20;
          }
        }
      }
    }
  }
LABEL_75:
  v78 = sub_1C5D4F7E8(v29, v22, 0, 0);
  v81 = v1047;
  if (!v78)
    goto LABEL_104;
  v82 = *(_QWORD *)(v78 + 80);
  v83 = (llvm::APInt *)(v82 + 24);
  v85 = *((_QWORD *)&v1089 + 1);
  v84 = (llvm *)v1089;
  v87 = DWORD2(v1088);
  v86 = v1088;
  v1090 = v1088;
  if (*(_WORD *)(v1088 + 24) == 201)
  {
    v88 = *(_QWORD *)(v1088 + 48);
    if (v88)
    {
      v89 = 1;
      do
      {
        if (*(_DWORD *)(v88 + 8) == DWORD2(v1088))
        {
          if (!v89)
            goto LABEL_88;
          --v89;
        }
        v88 = *(_QWORD *)(v88 + 32);
      }
      while (v88);
      if (!v89)
      {
        if ((_BYTE)v1089)
        {
          if (v1089 - 15 >= 0x9C)
          {
LABEL_561:
            v455 = sub_1C6329368((unsigned int *)&v1090, (uint64_t)v79, v80);
            v458 = sub_1C6329368(*(unsigned int **)(v1090 + 32), v456, v457);
            v85 = *((_QWORD *)&v1089 + 1);
            v84 = (llvm *)v1089;
            v83 = (llvm::APInt *)(v82 + 24);
            v81 = v1047;
            if ((unint64_t)v455 > 31 - __clz(v458))
            {
              v459 = *(uint64_t **)(v1090 + 32);
              v86 = *v459;
              v87 = *((_DWORD *)v459 + 2);
            }
          }
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v1089 + 1) + 8) & 0xFE) != 0x12)
        {
          goto LABEL_561;
        }
      }
    }
  }
LABEL_88:
  if (*(_WORD *)(v86 + 24) != 185)
    goto LABEL_96;
  v90 = *(_QWORD *)(v86 + 48);
  if (!v90)
    goto LABEL_96;
  v91 = 1;
  do
  {
    if (*(_DWORD *)(v90 + 8) == v87)
    {
      if (!v91)
        goto LABEL_96;
      --v91;
    }
    v90 = *(_QWORD *)(v90 + 32);
  }
  while (v90);
  if (v91)
    goto LABEL_96;
  v133 = *(_QWORD *)(v86 + 32);
  v134 = *(_QWORD *)(v86 + 40) + 16 * v87;
  v135 = *(llvm **)v134;
  v136 = *(_QWORD *)(v134 + 8);
  v137 = *(uint64_t **)v133;
  v138 = *(_QWORD *)(v133 + 8);
  v139 = v84;
  if ((_BYTE)v84)
  {
    if (v84 - 15 >= 0x9C)
      goto LABEL_226;
  }
  else if ((*(_DWORD *)(v85 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_226;
  }
  if (*(_QWORD *)v134)
  {
    v189 = *(_QWORD *)v134;
    if (v135 == 1 || (v189 ? (v190 = *(_QWORD *)&a1[2 * v189 + 24] == 0) : (v190 = 1), !v190))
    {
      if (!*((_BYTE *)a1 + 390 * v189 + 4047))
        goto LABEL_96;
    }
  }
LABEL_226:
  if (v1087 == 12 || v1087 == 10)
  {
    v1034 = v85;
    v1039 = v84;
    v1044 = v83;
    v191 = (*(uint64_t (**)(unsigned int *, llvm *, uint64_t, _QWORD))(*(_QWORD *)a1 + 240))(a1, v135, v136, v1087);
    if (v1087 == 12)
      v192 = v191 + 1;
    else
      v192 = v191;
    v193 = *(_DWORD *)(v82 + 32);
    if (v193 >= 0x41)
    {
      v197 = llvm::APInt::countLeadingZerosSlowCase(v1044);
      v83 = v1044;
      v81 = v1047;
      if (v193 - v197 > 0x40)
        goto LABEL_96;
      v194 = **(_QWORD ***)v1044;
      v198 = v1087 == 12 && v194 == 0;
      v196 = v198;
      if ((unint64_t)v194 > v192)
        goto LABEL_96;
    }
    else
    {
      v83 = v1044;
      v194 = *(_QWORD **)v1044;
      v196 = v1087 == 12 && v194 == 0;
      v81 = v1047;
      if ((unint64_t)v194 > v192)
        goto LABEL_96;
    }
    if (!v196)
    {
      v199 = (_DWORD)v194 - (v1087 == 12);
      v200 = sub_1C63293BC(v1046, a11, (_BOOL8)v135, v136, 0, 0);
      if (v199)
      {
        v595 = v200;
        v596 = v201;
        v203 = (_QWORD *)v1046;
        do
        {
          v597 = v203[104];
          if (v597)
            LOWORD(v597) = *(_WORD *)(v597 + 8);
          v598 = sub_1C5D56C70(v1046, 56, a11, v135, v136, (uint64_t)v137, v138, v202, v595, v596, v597);
          v601 = *(_QWORD *)(v1046 + 832);
          if (v601)
            LOWORD(v601) = *(_WORD *)(v601 + 8);
          v203 = (_QWORD *)v1046;
          v137 = sub_1C5D56C70(v1046, 171, a11, v135, v136, (uint64_t)v137, v138, v600, (uint64_t)v598, v599, v601);
          v138 = v138 & 0xFFFFFFFF00000000 | v602;
          --v199;
        }
        while (v199);
      }
      else
      {
        v203 = (_QWORD *)v1046;
      }
      if (v1087 == 12)
        v603 = 17;
      else
        v603 = 22;
      v604 = sub_1C6366AB4((uint64_t)v203, 0, a11, v135, v136, 0, 0);
      v606 = v605;
      v607 = sub_1C6367818(v203, v603);
      v610 = v203[104];
      if (v610)
        LOWORD(v610) = *(_WORD *)(v610 + 8);
      v29 = a6;
      v566 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v1039, v1034, (uint64_t)v137, v138, v609, (uint64_t)v604, v606, v607, v608, SHIDWORD(v608), v610);
      goto LABEL_769;
    }
LABEL_96:
    v29 = a6;
    goto LABEL_97;
  }
  if (v1087 != 22 && v1087 != 17)
    goto LABEL_96;
  v204 = *(_DWORD *)(v82 + 32);
  if (v204 >= 0x41)
  {
    v205 = v83;
    v1035 = v85;
    v1040 = v84;
    v206 = llvm::APInt::countLeadingZerosSlowCase(v83);
    v85 = v1035;
    v84 = v1040;
    v83 = v205;
    v81 = v1047;
    if (v204 - v206 > 0x40)
      goto LABEL_96;
  }
  v207 = *(llvm::APInt **)v83;
  if (v204 < 0x41)
    v207 = v83;
  if (*(_QWORD *)v207 != 1)
    goto LABEL_96;
  if (v139)
  {
    if ((v139 - 15) < 0x9C)
      goto LABEL_704;
  }
  else if ((*(_DWORD *)(v85 + 8) & 0xFE) == 0x12)
  {
    goto LABEL_704;
  }
  if (v135 == 1)
  {
    if (!(_BYTE)v135)
      goto LABEL_704;
  }
  else
  {
    if (!(_BYTE)v135)
      goto LABEL_704;
    if (!*(_QWORD *)&a1[2 * v135 + 24] || v135 == 0)
      goto LABEL_704;
  }
  if ((*((unsigned __int8 *)a1 + 390 * v135 + 4047) | 4) == 4)
    goto LABEL_96;
LABEL_704:
  v1036 = v85;
  v1041 = v84;
  v1044 = v83;
  v535 = sub_1C6366AB4(v1046, 0, a11, v135, v136, 0, 0);
  v1028 = v536;
  v1031 = (uint64_t)v535;
  v537 = sub_1C63293BC(v1046, a11, (_BOOL8)v135, v136, 0, 0);
  v539 = v538;
  __n = sub_1C6365158(v1087, v135, v136);
  v541 = 0;
  v542 = *(_QWORD *)(v1046 + 832);
  if (v542)
    v541 = *(_WORD *)(v542 + 8);
  v543 = sub_1C5D56C70(v1046, 56, a11, v135, v136, (uint64_t)v137, v138, v540, v537, v539, v541);
  v546 = *(_QWORD *)(v1046 + 832);
  if (v546)
    LOWORD(v546) = *(_WORD *)(v546 + 8);
  v547 = sub_1C5D56C70(v1046, 171, a11, v135, v136, (uint64_t)v137, v138, v545, (uint64_t)v543, v544, v546);
  v549 = v548;
  v550 = sub_1C6367818((_QWORD *)v1046, __n);
  v553 = *(_QWORD *)(v1046 + 832);
  if (v553)
    LOWORD(v553) = *(_WORD *)(v553 + 8);
  v554 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v1041, v1036, (uint64_t)v137, v138, v552, v1031, v1028, v550, v551, SHIDWORD(v551), v553);
  v556 = v555;
  v557 = sub_1C6367818((_QWORD *)v1046, v1087);
  v560 = *(_QWORD *)(v1046 + 832);
  if (v560)
    LOWORD(v560) = *(_WORD *)(v560 + 8);
  v561 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v1041, v1036, (uint64_t)v547, v549, v559, v1031, v1028, v557, v558, SHIDWORD(v558), v560);
  if (v1087 == 17)
    v564 = 171;
  else
    v564 = 172;
  v565 = *(_QWORD *)(v1046 + 832);
  if (v565)
    LOWORD(v565) = *(_WORD *)(v565 + 8);
  v29 = a6;
  v566 = sub_1C5D56C70(v1046, v564, a11, v1041, v1036, (uint64_t)v554, v556, v563, (uint64_t)v561, v562, v565);
LABEL_769:
  v308 = v566;
  v81 = v1047;
  v83 = v1044;
  if (v566)
    return v308;
LABEL_97:
  if (*(_WORD *)(v1088 + 24) != 177)
    goto LABEL_104;
  v92 = *(_DWORD *)(v82 + 32);
  if (v92 > 0x40)
  {
    v93 = v83;
    v94 = llvm::APInt::countLeadingZerosSlowCase(v83);
    v83 = v93;
    v81 = v1047;
    if (v94 != v92 && v94 != v92 - 1)
      goto LABEL_104;
  }
  else if (*(_QWORD *)v83 >= 2uLL)
  {
    goto LABEL_104;
  }
  if (*(_WORD *)(**(_QWORD **)(v1088 + 32) + 24) == 184)
  {
    v266 = v83;
    v267 = sub_1C6329368((unsigned int *)&v1088, (uint64_t)v79, v80);
    v81 = v1047;
    v268 = (uint8x8_t)vcnt_s8((int8x8_t)v267);
    v268.i16[0] = vaddlv_u8(v268);
    if (v268.i32[0] == 1)
    {
      v269 = sub_1C5D4F7E8(*(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 48), 0, 0);
      v81 = v1047;
      if (v269)
      {
        if (v1087 == 22 || v1087 == 17)
        {
          v270 = *(_QWORD *)(v269 + 80);
          v271 = (llvm::APInt *)(v270 + 24);
          v272 = sub_1C6329368((unsigned int *)&v1088, (uint64_t)v79, v80);
          v273 = *(_DWORD *)(v270 + 32);
          if (v273 >= 0x41)
          {
            v274 = v273 - llvm::APInt::countLeadingZerosSlowCase(v271);
            v29 = a6;
            v81 = v1047;
            if (v274 > 0x40)
              goto LABEL_104;
            v271 = *(llvm::APInt **)v271;
          }
          v29 = a6;
          v81 = v1047;
          if (*(_QWORD *)v271 == 31 - __clz(v272))
          {
            v275 = *(_DWORD *)(v82 + 32);
            if (v275 >= 0x41)
            {
              if (v275 - llvm::APInt::countLeadingZerosSlowCase(v266) > 0x40)
              {
                v276 = 0;
                goto LABEL_1215;
              }
              v266 = *(llvm::APInt **)v266;
            }
            v276 = *(_QWORD *)v266 == 0;
LABEL_1215:
            if (v276 != (v1087 != 17))
              v928 = 22;
            else
              v928 = 17;
            v1087 = v928;
            v929 = *(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088);
            v930 = sub_1C6366AB4(v1046, 0, a11, *(llvm **)v929, *(_QWORD *)(v929 + 8), 0, 0);
            v932 = v931;
            v933 = v1089;
            v934 = *(uint64_t **)(**(_QWORD **)(v1088 + 32) + 32);
            v764 = *v934;
            v765 = v934[1];
            v935 = sub_1C6367818((_QWORD *)v1046, v1087);
            v937 = *(_QWORD *)(v1046 + 832);
            if (v937)
              LOWORD(v937) = *(_WORD *)(v937 + 8);
            v1021 = v936;
            v1023 = v937;
            *((_QWORD *)&v1016 + 1) = v932;
            v1019 = v935;
            *(_QWORD *)&v1016 = v930;
            v54 = a11;
            v53 = v1046;
            v52 = *((_QWORD *)&v933 + 1);
            v51 = (llvm *)v933;
            goto LABEL_992;
          }
        }
      }
    }
  }
LABEL_104:
  v95 = (char *)v81 + 272;
  v96 = *(unsigned __int16 *)(v29 + 24);
  if (v96 != 35 && v96 != 11)
    goto LABEL_438;
  v97 = *(_QWORD *)(v29 + 80);
  v98 = (unint64_t *)(v97 + 24);
  if ((v1087 == 22 || v1087 == 17) && !*(_DWORD *)(a10 + 8))
  {
    v99 = *(_QWORD *)(v1088 + 48);
    if (v99)
    {
      if (!*(_QWORD *)(v99 + 32))
      {
        v277 = sub_1C6131A64((unsigned int *)&v1088);
        if ((_DWORD)v79 == 1)
        v278 = 0;
        v279 = 0;
        v280 = *(unsigned __int16 *)(v1088 + 24);
        if (v280 > 0xC6)
        {
          if (v280 != 253)
          {
            if (v280 == 199)
            {
              v277 = sub_1C6131A64(*(unsigned int **)(v1088 + 32));
              if ((_DWORD)v79 == 1)
              v533 = *(_QWORD *)(v1088 + 32);
              v279 = *(_QWORD *)v533;
              v278 = *(_DWORD *)(v533 + 8);
            }
            goto LABEL_820;
          }
          v311 = (*(unsigned __int16 *)(v1088 + 26) >> 10) & 3;
          if (v311 != 2)
          {
            if (v311 != 3)
            {
LABEL_739:
              v279 = 0;
              v278 = 0;
              goto LABEL_820;
            }
            v1090 = *(_OWORD *)(v1088 + 80);
            if ((_BYTE)v1090)
              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v1090);
            else
              ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1090);
            v277 = (llvm::LLVMContext *)ExtendedSizeInBits;
            if ((_DWORD)v79 == 1)
            v279 = v1088;
            v278 = DWORD2(v1088);
LABEL_820:
            v649 = *(_DWORD *)(v97 + 32);
            if (v649 > 0x40)
              v650 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v97 + 24));
            else
              v650 = v649 + __clz(*v98) - 64;
            v651 = v649 - v650;
            if (!(_DWORD)v277)
              goto LABEL_111;
            goto LABEL_824;
          }
          v1090 = *(_OWORD *)(v1088 + 80);
          if ((_BYTE)v1090)
            v585 = sub_1C47A8C74((unsigned __int8 *)&v1090);
          else
            v585 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1090);
          v277 = (llvm::LLVMContext *)v585;
          if ((_DWORD)v586 == 1)
          v532 = &v1088;
        }
        else
        {
          if (v280 == 171)
          {
            v281 = *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40);
            v282 = *(unsigned __int16 *)(v281 + 24);
            if (v282 != 35 && v282 != 11)
              goto LABEL_739;
            v284 = *(_QWORD *)(v281 + 80);
            v1084 = *(_DWORD *)(v284 + 32);
            if (v1084 > 0x40)
            {
              v1083 = operator new[]();
              memcpy((void *)v1083, *(const void **)(v284 + 24), (((unint64_t)v1084 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1083 = *(_QWORD *)(v284 + 24);
            }
            llvm::APInt::operator+=((uint64_t)&v1083, 1uLL);
            v583 = v1084;
            v1084 = 0;
            if (v583 > 0x40)
            {
              v587 = 0;
              v588 = 0;
              v589 = ((unint64_t)(v583 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                v590 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v1083 + v587));
                v590.i16[0] = vaddlv_u8(v590);
                v588 += v590.i32[0];
                v587 += 8;
              }
              while (v589 != v587);
              if (v1083)
              {
                MEMORY[0x1CAA32F9C](v1083, 0x1000C8000313F17);
                if (v1084 >= 0x41)
                {
                  if (v1083)
                    MEMORY[0x1CAA32F9C](v1083, 0x1000C8000313F17);
                }
              }
              if (v588 != 1)
                goto LABEL_739;
            }
            else
            {
              v584 = (uint8x8_t)vcnt_s8((int8x8_t)v1083);
              v584.i16[0] = vaddlv_u8(v584);
              if (v584.u32[0] != 1)
                goto LABEL_739;
            }
            v591 = *(_QWORD *)(v281 + 80);
            v592 = (llvm::APInt *)(v591 + 24);
            if (*(_DWORD *)(v591 + 32) > 0x40u)
              v277 = (llvm::LLVMContext *)llvm::APInt::countTrailingOnesSlowCase(v592);
            else
              v277 = (llvm::LLVMContext *)__clz(__rbit64(~*(_QWORD *)v592));
            v631 = *(_QWORD *)(v1088 + 32);
            v279 = *(_QWORD *)v631;
            v278 = *(_DWORD *)(v631 + 8);
            goto LABEL_820;
          }
          if (v280 != 198)
            goto LABEL_820;
          v277 = sub_1C6131A64(*(unsigned int **)(v1088 + 32));
          if ((_DWORD)v531 == 1)
          v532 = *(__int128 **)(v1088 + 32);
        }
        v278 = *((_DWORD *)v532 + 2);
        v279 = *(_QWORD *)v532;
        v655 = *(_DWORD *)(v97 + 32);
        v651 = v655 - sub_1C4959174((llvm::APInt *)(v97 + 24)) + 1;
        if (!(_DWORD)v277)
          goto LABEL_111;
LABEL_824:
        if (v277 >= *(_DWORD *)(v97 + 32) || v277 < v651)
          goto LABEL_111;
        if ((int)v277 <= 31)
        {
          switch((_DWORD)v277)
          {
            case 1:
              v652 = 0;
              v653 = 0;
              v654 = 2;
              goto LABEL_857;
            case 0x10:
              v652 = 0;
              v653 = 0;
              v654 = 4;
              goto LABEL_857;
            case 8:
              v652 = 0;
              v653 = 0;
              v654 = 3;
              goto LABEL_857;
          }
        }
        else
        {
          switch((_DWORD)v277)
          {
            case 0x20:
              v652 = 0;
              v653 = 0;
              v654 = 5;
              goto LABEL_857;
            case 0x40:
              v652 = 0;
              v653 = 0;
              v654 = 6;
              goto LABEL_857;
            case 0x80:
              v652 = 0;
              v653 = 0;
              v654 = 7;
              goto LABEL_857;
          }
        }
        ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v1046 + 56), v277);
        v653 = v908;
        v652 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
        v654 = ExtendedIntegerVT;
LABEL_857:
        v684 = (llvm *)(v654 | v652);
        if (!(*(unsigned int (**)(unsigned int *, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 1744))(a1, 193, v654 | v652, v653))
        {
          v685 = *(unsigned int **)(v1088 + 32);
          v686 = *(_QWORD *)v685;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v685 + 40) + 16 * v685[2]) != 2 || v1089 != 2)
            goto LABEL_111;
          if (*(_WORD *)(v686 + 24) != 193)
            goto LABEL_111;
          v688 = *(unsigned __int16 *)(v1088 + 24);
          if ((v688 & 0xFFFE) != 0xC6)
            goto LABEL_111;
          if (sub_1C5D8C6A0(a1, a6))
          {
            v689 = *(_QWORD *)(a6 + 80);
            v690 = *(_DWORD *)(v689 + 32);
            v308 = (uint64_t *)v686;
          }
          else
          {
            v694 = *(_QWORD *)(v1088 + 40);
            v79 = *(const char **)v694;
            if (*(_QWORD *)v694 == 2)
            {
              v695 = *(_QWORD *)(a6 + 80);
              v691 = (llvm::APInt *)(v695 + 24);
              v690 = *(_DWORD *)(v695 + 32);
              if (v690 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v695 + 24)) != v690 - 1)
                  goto LABEL_111;
                v692 = v1087;
                v693 = v1087 == 17;
LABEL_879:
                v699 = llvm::APInt::countLeadingZerosSlowCase(v691);
                v696 = v699 == v690;
                v308 = (uint64_t *)v686;
                if (v699 == v690)
                {
LABEL_880:
                  if (v693)
                    goto LABEL_1132;
                }
LABEL_881:
                if (v696 || v692 != 22)
                  return v308;
LABEL_1132:
                v838 = v308[4];
                v142 = *(uint64_t **)v838;
                v839 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v838 + 40) + 16 * *(unsigned int *)(v838 + 8));
                v175 = sub_1C6365158(*(_DWORD *)(*(_QWORD *)(v838 + 80) + 76), *v839, v839[1]);
                v147 = *((_QWORD *)&v1089 + 1);
                v146 = (llvm *)v1089;
                v148 = *(_QWORD *)(v838 + 8);
                v173 = *(uint64_t **)(v838 + 40);
                v174 = *(uint64_t **)(v838 + 48);
                goto LABEL_197;
              }
              if (*(_QWORD *)v691 != 1)
                goto LABEL_111;
              v308 = (uint64_t *)v686;
              v692 = v1087;
              v693 = v1087 == 17;
LABEL_873:
              v696 = *(_QWORD *)v691 == 0;
              if (!*(_QWORD *)v691)
                goto LABEL_880;
              goto LABEL_881;
            }
            v904 = sub_1C6329468(a1, (char)v79, *(_QWORD *)(v694 + 8));
            v689 = *(_QWORD *)(a6 + 80);
            v905 = (llvm::APInt *)(v689 + 24);
            v690 = *(_DWORD *)(v689 + 32);
            if (v904 == 1)
            {
              if (v690 > 0x40)
                v906 = llvm::APInt::countLeadingZerosSlowCase(v905) == v690 - 1;
              else
                v906 = *(_QWORD *)v905 == 1;
              v926 = v906;
              if (v688 == 198)
              {
                v308 = (uint64_t *)v686;
                if (**(_BYTE **)(a6 + 40) == 2)
                  goto LABEL_111;
              }
              else
              {
                v308 = (uint64_t *)v686;
                if (!v926)
                  goto LABEL_111;
              }
            }
            else
            {
              if (v690)
              {
                if (v690 > 0x40)
                  v909 = llvm::APInt::countTrailingOnesSlowCase(v905) == v690;
                else
                  v909 = *(_QWORD *)v905 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v690;
                v927 = v909;
              }
              else
              {
                v927 = 1;
              }
              if (v688 != 198)
                goto LABEL_111;
              v308 = (uint64_t *)v686;
              if ((v927 & 1) == 0)
                goto LABEL_111;
            }
          }
          v691 = (llvm::APInt *)(v689 + 24);
          v692 = v1087;
          v693 = v1087 == 17;
          if (v690 > 0x40)
            goto LABEL_879;
          goto LABEL_873;
        }
        v697 = *(_QWORD *)(v1046 + 832);
        if (v697)
          v698 = *(_WORD *)(v697 + 8);
        else
          v698 = 0;
        v700 = sub_1C5D52060(v1046, 201, a11, v684, v653, v279, v278, v698);
        v702 = v701;
        if ((_DWORD)v277 != 1)
          goto LABEL_893;
        v703 = *(_DWORD *)(v97 + 32);
        v704 = (_QWORD *)(v97 + 24);
        if (v703 >= 0x41)
        {
          if (v703 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v97 + 24)) > 0x40)
            goto LABEL_893;
          v704 = (_QWORD *)*v98;
        }
        if (*v704 == 1)
        {
          v706 = *((_QWORD *)&v1089 + 1);
          v705 = (llvm *)v1089;
          v707 = (uint64_t)sub_1C6366AB4(v1046, 0, a11, (llvm *)2, 0, 0, 0);
          v709 = v708;
          if (v1087 == 17)
            v710 = 22;
          else
            v710 = 17;
LABEL_897:
          v712 = sub_1C6367818((_QWORD *)v1046, v710);
          v714 = *(_QWORD *)(v1046 + 832);
          if (v714)
            LOWORD(v714) = *(_WORD *)(v714 + 8);
          v1021 = v713;
          v1023 = v714;
          *((_QWORD *)&v1016 + 1) = v709;
          v1019 = v712;
          *(_QWORD *)&v1016 = v707;
          v54 = a11;
          v53 = v1046;
          v51 = v705;
          v52 = v706;
          goto LABEL_900;
        }
LABEL_893:
        llvm::APInt::trunc((llvm::APInt *)(v97 + 24), v277, (llvm::APInt *)&v1090);
        v707 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, (uint64_t)v684, v653, 0, 0);
        v709 = v711;
        if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
          MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
        v706 = *((_QWORD *)&v1089 + 1);
        v705 = (llvm *)v1089;
        v710 = v1087;
        goto LABEL_897;
      }
    }
  }
LABEL_111:
  v100 = a10;
  if (!*(_DWORD *)(a10 + 8) && v1087 - 18 >= 4)
  {
    v101 = v1088;
    if (*(_WORD *)(v1088 + 24) == 171)
    {
      v102 = *(_DWORD *)(v97 + 32);
      v103 = (_QWORD *)(v97 + 24);
      if (v102 >= 0x41)
      {
        if (v102 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v97 + 24)) > 0x40)
          goto LABEL_118;
        v103 = (_QWORD *)*v98;
      }
      if (!*v103)
      {
        v181 = *(_QWORD *)(v101 + 48);
        if (v181)
        {
          if (!*(_QWORD *)(v181 + 32))
          {
            v182 = *(_QWORD **)(v101 + 32);
            v183 = *v182;
            if (*(_WORD *)(*v182 + 24) == 253)
            {
              v184 = *(_QWORD *)(v183 + 48);
              if (v184)
              {
                if (!*(_QWORD *)(v184 + 32))
                {
                  v185 = *(unsigned __int16 *)(v182[5] + 24);
                  if (v185 == 35 || v185 == 11)
                  {
                    DWORD2(v1095) = 1;
                    *(_QWORD *)&v1095 = 0;
                    if ((*(_WORD *)(*(_QWORD *)(v183 + 96) + 36) & 0xF00) == 0
                      && (*(_BYTE *)(v183 + 26) & 8) == 0
                      && (*(_WORD *)(v183 + 26) & 0x380) == 0)
                    {
                      v1038 = sub_1C6131A64((unsigned int *)&v1088);
                      if ((_DWORD)v79 == 1)
                      v1043 = v1038;
                      if ((*(_WORD *)(v183 + 26) & 0xC00) != 0)
                      {
                        v1090 = *(_OWORD *)(v183 + 80);
                        v186 = (_BYTE)v1090
                             ? sub_1C47A8C74((unsigned __int8 *)&v1090)
                             : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1090);
                        v1043 = v186;
                        if ((_DWORD)v79 == 1)
                      }
                      v100 = a10;
                      if (v1043 >= 0x10)
                      {
                        v1032 = 0;
                        v1037 = 0;
                        v1025 = 0;
                        __na = 0;
                        v938 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40) + 80);
                        v1029 = 1;
                        v939 = v1043;
                        while (1)
                        {
                          v1052 = v939;
                          DWORD2(v1090) = v1038;
                          if (v1038 > 0x40)
                            llvm::APInt::initSlowCase((llvm::APInt *)&v1090, 0, 0);
                          else
                            *(_QWORD *)&v1090 = 0;
                          v939 >>= 1;
                          sub_1C4912E54(&v1090, 0, v1052 >> 1);
                          if (v1052 >> 1 > v1043)
                            goto LABEL_1263;
                          v940 = 0;
                          if (v1043 / v939 <= 1)
                            v941 = 1;
                          else
                            v941 = v1043 / v939;
                          while (1)
                          {
                            v942 = *(unsigned int *)(v938 + 32);
                            if (v942 > 0x40)
                            {
                              v943 = (unint64_t)(v942 + 63) >> 6;
                              v944 = *(uint64_t **)(v938 + 24);
                              v945 = (uint64_t *)v1090;
                              while (1)
                              {
                                v947 = *v944++;
                                v946 = v947;
                                v948 = *v945++;
                                if ((v946 & ~v948) != 0)
                                  goto LABEL_1248;
                                if (!--v943)
                                  goto LABEL_1253;
                              }
                            }
                            if ((*(_QWORD *)(v938 + 24) & ~(_QWORD)v1090) == 0)
                              break;
LABEL_1248:
                            sub_1C4888094((uint64_t)&v1090, v939);
                            if (++v940 == v941)
                              goto LABEL_1263;
                          }
LABEL_1253:
                          if (*v95)
                            v949 = v1043 / v939 + ~v940;
                          else
                            v949 = v940;
                          v950 = v940 * (v939 & 0x7FFFFFF8);
                          if (v942 > 0x40)
                          {
                            v951 = (void *)operator new[]();
                            memcpy(v951, *(const void **)(v938 + 24), ((unint64_t)(v942 + 63) >> 3) & 0x3FFFFFF8);
                            v1032 = v951;
                            llvm::APInt::tcShiftRight((llvm::APInt *)v951, (unint64_t *)((unint64_t)(v942 + 63) >> 6), v950);
                          }
                          else if ((_DWORD)v942 == v950)
                          {
                            v1032 = 0;
                          }
                          else
                          {
                            v1032 = (void *)(*(_QWORD *)(v938 + 24) >> v950);
                          }
                          if (v1029 >= 0x41 && v1037)
                            MEMORY[0x1CAA32F9C](v1037, 0x1000C8000313F17);
                          v1025 = v949 * (v1052 >> 4);
                          __na = v939;
                          *(_QWORD *)&v1095 = v1032;
                          DWORD2(v1095) = v942;
                          v1037 = v1032;
                          v1029 = v942;
LABEL_1263:
                          if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
                            MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
                          if (v1052 <= 0x1F)
                          {
                            if (!__na)
                              goto LABEL_1310;
                            if (__na <= 31)
                            {
                              switch(__na)
                              {
                                case 1:
                                  v952 = 0;
                                  v953 = 0;
                                  v954 = 2;
                                  goto LABEL_1308;
                                case 16:
                                  v952 = 0;
                                  v953 = 0;
                                  v954 = 4;
                                  goto LABEL_1308;
                                case 8:
                                  v952 = 0;
                                  v953 = 0;
                                  v954 = 3;
                                  goto LABEL_1308;
                              }
                            }
                            else
                            {
                              switch(__na)
                              {
                                case 32:
                                  v952 = 0;
                                  v953 = 0;
                                  v954 = 5;
LABEL_1308:
                                  v1081 = v954 | v952;
                                  v1082 = v953;
                                  if (!sub_1C5098958((unsigned __int8 *)&v1081)
                                    || !(*(unsigned int (**)(unsigned int *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 624))(a1, v183, 0, v1081, v1082))
                                  {
LABEL_1310:
                                    v100 = a10;
                                    if (v1029 >= 0x41 && v1032)
                                      MEMORY[0x1CAA32F9C](v1032, 0x1000C8000313F17);
                                    goto LABEL_118;
                                  }
                                  v980 = *(uint64_t **)(v183 + 32);
                                  v982 = (uint64_t *)v980[5];
                                  v981 = v980[6];
                                  if (v1025)
                                  {
                                    v983 = v1025;
                                    v982 = sub_1C6369954(v1046, (uint64_t)v982, v981, v1025, 0, a11, 0);
                                    v981 = v981 & 0xFFFFFFFF00000000 | v984;
                                    v980 = *(uint64_t **)(v183 + 32);
                                  }
                                  else
                                  {
                                    v983 = 0;
                                  }
                                  v985 = (llvm *)v1081;
                                  v986 = v1082;
                                  v987 = *v980;
                                  v988 = v980[1];
                                  sub_1C4824250(*(uint64_t **)(v183 + 96), v983, (uint64_t)&v1080);
                                  v989 = *(unsigned __int8 *)(*(_QWORD *)(v183 + 96) + 34) | 0x100;
                                  v1090 = 0u;
                                  v1091 = 0u;
                                  v990 = sub_1C63681B0(v1046, (uint64_t)v985, v986, (uint64_t)a11, v987, v988, (uint64_t)v982, v981, &v1080, v989, SHIDWORD(v989), 0, (uint64_t)&v1090, 0);
                                  v992 = v991;
                                  v993 = v1089;
                                  v994 = (llvm *)v1081;
                                  v995 = v1082;
                                  llvm::APInt::trunc((llvm::APInt *)&v1095, __na, (llvm::APInt *)&v1090);
                                  v996 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, v1081, v1082, 0, 0);
                                  v999 = 0;
                                  v1000 = *(_QWORD *)(v1046 + 832);
                                  if (v1000)
                                    v999 = *(_WORD *)(v1000 + 8);
                                  v1001 = sub_1C5D56C70(v1046, 171, a11, v994, v995, (uint64_t)v990, v992, v998, v996, v997, v999);
                                  v1003 = v1002;
                                  v1004 = sub_1C6366AB4(v1046, 0, a11, (llvm *)v1081, v1082, 0, 0);
                                  v1006 = v1005;
                                  v1007 = sub_1C6367818((_QWORD *)v1046, v1087);
                                  v1010 = *(_QWORD *)(v1046 + 832);
                                  if (v1010)
                                    LOWORD(v1010) = *(_WORD *)(v1010 + 8);
                                  v895 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v993, *((uint64_t *)&v993 + 1), (uint64_t)v1001, v1003, v1009, (uint64_t)v1004, v1006, v1007, v1008, SHIDWORD(v1008), v1010);
                                  if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
                                    MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
                                  if (DWORD2(v1095) < 0x41)
                                    return v895;
                                  v896 = v1095;
                                  if (!(_QWORD)v1095)
                                    return v895;
LABEL_1168:
                                  MEMORY[0x1CAA32F9C](v896, 0x1000C8000313F17);
                                  return v895;
                                case 64:
                                  v952 = 0;
                                  v953 = 0;
                                  v954 = 6;
                                  goto LABEL_1308;
                                case 128:
                                  v952 = 0;
                                  v953 = 0;
                                  v954 = 7;
                                  goto LABEL_1308;
                              }
                            }
                            v1014 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v1046 + 56), (llvm::LLVMContext *)__na);
                            v952 = v1014 & 0xFFFFFFFFFFFFFF00;
                            v954 = v1014;
                            goto LABEL_1308;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_118:
  v104 = *(unsigned __int16 *)(v1088 + 24);
  if (v104 != 204)
  {
    v29 = a6;
    if (v104 == 199)
    {
      v106 = sub_1C6131A64(*(unsigned int **)(v1088 + 32));
      if ((_DWORD)v105 == 1)
      v107 = *(_DWORD *)(v97 + 32);
      v108 = v106 - v107;
      DWORD2(v1090) = v107;
      if (v107 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1090, 0, 0);
        v107 = DWORD2(v1090);
      }
      else
      {
        *(_QWORD *)&v1090 = 0;
      }
      sub_1C4912E54(&v1090, v108 + v107, v107);
      v109 = *(unsigned int *)(v97 + 32);
      if (v109 > 0x40)
      {
        v208 = (unint64_t)(v109 + 63) >> 6;
        v209 = (uint64_t *)*v98;
        v210 = (uint64_t *)v1090;
        v211 = v208 - 1;
        do
        {
          v213 = *v209++;
          v212 = v213;
          v214 = *v210++;
          v215 = v214 & v212;
          v110 = v215 != 0;
          if (v215)
            v216 = 1;
          else
            v216 = v211 == 0;
          --v211;
        }
        while (!v216);
      }
      else
      {
        v110 = ((unint64_t)v1090 & *v98) != 0;
      }
      if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
        MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
      if (v110)
      {
        switch(v1087)
        {
          case 0xAu:
          case 0xBu:
          case 0x11u:
            v218 = *((_QWORD *)&v1089 + 1);
            v217 = (llvm *)v1089;
            v219 = v1046;
            v220 = 0;
            goto LABEL_362;
          case 0xCu:
          case 0xDu:
          case 0x16u:
            v218 = *((_QWORD *)&v1089 + 1);
            v217 = (llvm *)v1089;
            v219 = v1046;
            v220 = 1;
LABEL_362:
            v313 = a11;
            return sub_1C6366AB4(v219, v220, v313, v217, v218, 0, 0);
          case 0x12u:
          case 0x13u:
            v468 = *(_DWORD *)(v97 + 32);
            v469 = v468 - 1;
            if (v468 >= 0x41)
              v98 = (unint64_t *)(*v98 + 8 * (v469 >> 6));
            v313 = a11;
            v219 = v1046;
            v470 = *v98;
            goto LABEL_598;
          case 0x14u:
          case 0x15u:
            v471 = *(_DWORD *)(v97 + 32);
            v469 = v471 - 1;
            if (v471 >= 0x41)
              v98 = (unint64_t *)(*v98 + 8 * (v469 >> 6));
            v313 = a11;
            v219 = v1046;
            v470 = ~*v98;
LABEL_598:
            v220 = (v470 >> v469) & 1;
            v218 = *((_QWORD *)&v1089 + 1);
            v217 = (llvm *)v1089;
            return sub_1C6366AB4(v219, v220, v313, v217, v218, 0, 0);
          default:
            goto LABEL_381;
        }
      }
      if (v1087 <= 0x16 && ((1 << v1087) & 0x423C00) != 0)
      {
        v222 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)(v1088 + 32) + 40)
                         + 16 * *(unsigned int *)(*(_QWORD *)(v1088 + 32) + 8));
        v223 = *v222;
        v224 = v222[1];
        if (*(int *)(v100 + 8) < 2
          || *v222
          && ((v295 = *v222, v223 == 1)
           || (v295 ? (v296 = *(_QWORD *)&a1[2 * v295 + 24] == 0) : (v296 = 1), !v296))
          && !*((_BYTE *)a1 + 390 * v295 + 4055)
          && ((a1[23 * v1087 + 42897 + (v223 >> 3)] >> (4 * (v223 & 7))) & 0xF) == 0)
        {
          v225 = (llvm *)(*(uint64_t (**)(unsigned int *, _BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, v95, *(_QWORD *)(v1046 + 56), v223, v224);
          v227 = v226;
          llvm::APInt::trunc((llvm::APInt *)(v97 + 24), v106, (llvm::APInt *)&v1090);
          v228 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, v223, v224, 0, 0);
          v230 = v229;
          if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
            MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
          v231 = *(uint64_t **)(v1088 + 32);
          v232 = *v231;
          v233 = v231[1];
          v234 = sub_1C6367818((_QWORD *)v1046, v1087);
          v237 = *(_QWORD *)(v1046 + 832);
          if (v237)
            LOWORD(v237) = *(_WORD *)(v237 + 8);
          v238 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v225, v227, v232, v233, v236, v228, v230, v234, v235, SHIDWORD(v235), v237);
          v239 = (_QWORD *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
          return sub_1C6366608(v1046, (uint64_t)v238, v240, a11, (llvm *)v1089, *((uint64_t *)&v1089 + 1), *v239, v239[1]);
        }
      }
      goto LABEL_381;
    }
LABEL_129:
    v111 = *(_QWORD *)(v29 + 80);
    v112 = (llvm::APInt *)(v111 + 24);
    v113 = *(_DWORD *)(v111 + 32);
    if (v113 > 0x40)
    {
      v114 = llvm::APInt::countLeadingZerosSlowCase(v112);
      if (v114 != v113 && v114 != v113 - 1)
        goto LABEL_381;
    }
    else if (*(_QWORD *)v112 >= 2uLL)
    {
      goto LABEL_381;
    }
    if (v1087 != 22 && v1087 != 17)
      goto LABEL_381;
    v115 = (uint64_t *)v1088;
    if (*(_WORD *)(v1088 + 24) == 193 && (_BYTE)v1089 && *(_QWORD *)&a1[2 * v1089 + 24])
    {
      v116 = (uint64_t *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
      v117 = *v116;
      if (v1089 != *v116)
      {
        v132 = sub_1C632979C((unsigned __int8 *)&v1089, v117, v116[1]);
        v115 = (uint64_t *)v1088;
        if (!v132)
          goto LABEL_166;
        LOBYTE(v117) = *(_BYTE *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
      }
      if (v117 == 2
        || (v140 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v115[4] + 40) + 16 * *(unsigned int *)(v115[4] + 8)),
            sub_1C6329468(a1, *v140, v140[1]) == 1))
      {
        v118 = v1087;
        v119 = *(_QWORD *)(v29 + 80);
        v120 = (llvm::APInt *)(v119 + 24);
        v121 = *(_DWORD *)(v119 + 32);
        if (v121 > 0x40)
          v122 = llvm::APInt::countLeadingZerosSlowCase(v120) == v121 - 1;
        else
          v122 = *(_QWORD *)v120 == 1;
        v123 = v122;
        if ((v118 != 17) != v123)
        {
          v125 = *((_QWORD *)&v1089 + 1);
          v124 = (llvm *)v1089;
          v127 = *((_QWORD *)&v1088 + 1);
          v126 = (uint64_t *)v1088;
          v128 = v1046;
          v129 = *(_QWORD *)(v1046 + 832);
          if (v129)
            v130 = *(_WORD *)(v129 + 8);
          else
            v130 = 0;
          v131 = a11;
          return sub_1C5D52060(v128, 201, v131, v124, v125, (uint64_t)v126, v127, v130);
        }
        v115 = (uint64_t *)v1088;
        v141 = *(_QWORD *)(v1088 + 32);
        v142 = *(uint64_t **)v141;
        v143 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v141 + 40) + 16 * *(unsigned int *)(v141 + 8));
        v144 = *v143;
        v145 = sub_1C6365158(*(_DWORD *)(*(_QWORD *)(v141 + 80) + 76), *v143, v143[1]);
        v79 = (const char *)v145;
        if (*(int *)(v100 + 8) < 2
          || ((a1[23 * v145 + 42897 + (v144 >> 3)] >> (4 * (v144 & 7))) & 0xF) == 0)
        {
          v147 = *((_QWORD *)&v1089 + 1);
          v146 = (llvm *)v1089;
          v148 = *(_QWORD *)(v141 + 8);
          v150 = *(_QWORD *)(v141 + 40);
          v149 = *(_QWORD *)(v141 + 48);
          v151 = sub_1C6367818((_QWORD *)v1046, v145);
          v153 = *(_QWORD *)(v1046 + 832);
          if (v153)
            LOWORD(v153) = *(_WORD *)(v153 + 8);
          v1021 = v152;
          v1023 = v153;
          *((_QWORD *)&v1016 + 1) = v149;
          v1019 = v151;
          *(_QWORD *)&v1016 = v150;
          goto LABEL_165;
        }
      }
      else
      {
        v115 = (uint64_t *)v1088;
      }
    }
LABEL_166:
    v154 = *((unsigned __int16 *)v115 + 12);
    if (v154 == 171)
    {
      v165 = v115[4];
      if (*(_WORD *)(*(_QWORD *)v165 + 24) != 173)
        goto LABEL_183;
      v166 = *(_QWORD *)(*(_QWORD *)v165 + 32);
      v155 = *(_QWORD *)(v165 + 40);
      if (v155 != *(_QWORD *)(v166 + 40) || *(_DWORD *)(v165 + 48) != *(_DWORD *)(v166 + 48))
        goto LABEL_183;
    }
    else
    {
      if (v154 != 173)
        goto LABEL_183;
      v155 = *(_QWORD *)(v115[4] + 40);
    }
    if (sub_1C636F474(v155))
    {
      v157 = sub_1C6131A64((unsigned int *)&v1088);
      if ((_DWORD)v156 == 1)
      v158 = v1088;
      DWORD2(v1090) = v157;
      if (v157 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1090, 0, 0);
        v159 = DWORD2(v1090);
      }
      else
      {
        *(_QWORD *)&v1090 = 0;
        v159 = v157;
      }
      sub_1C4912E54(&v1090, v159 - v157 + 1, v159);
      v161 = sub_1C63686D8(v1046, v158, *((_BOOL8 *)&v158 + 1), (uint64_t)&v1090, 0);
      if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
        MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
      v100 = a10;
      if (v161)
      {
        if (*(_WORD *)(v1088 + 24) == 173)
        {
          v162 = *(_QWORD *)(v1088 + 32);
          v142 = *(uint64_t **)v162;
          v148 = *(unsigned int *)(v162 + 8);
          v163 = (_QWORD *)v1046;
          v164 = a7;
        }
        else
        {
          v163 = (_QWORD *)v1046;
          v286 = *(_QWORD *)(v1046 + 832);
          v164 = a7;
          if (v286)
            LOWORD(v286) = *(_WORD *)(v286 + 8);
          v285 = *(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088);
          v142 = sub_1C5D56C70(v1046, 171, a11, *(llvm **)v285, *(_QWORD *)(v285 + 8), **(_QWORD **)(**(_QWORD **)(v1088 + 32) + 32), *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v1088 + 32) + 32) + 8), v160, *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 48), v286);
          v148 = v287;
        }
        v289 = *((_QWORD *)&v1089 + 1);
        v288 = (llvm *)v1089;
        if (v1087 == 17)
          v290 = 22;
        else
          v290 = 17;
        v291 = v163;
        goto LABEL_332;
      }
LABEL_381:
      v339 = v1088;
      if (*(_WORD *)(v1088 + 24) == 62)
      {
        v340 = *(_QWORD *)(v29 + 80);
        v341 = (llvm::APInt *)(v340 + 24);
        v342 = *(_DWORD *)(v340 + 32);
        if (v342 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v341) != v342)
            goto LABEL_411;
        }
        else if (*(_QWORD *)v341)
        {
          goto LABEL_411;
        }
        v343 = v1087;
        if (v1087 != 22 && v1087 != 17)
        {
LABEL_412:
          if ((v343 == 22 || v343 == 17) && *(_WORD *)(v1088 + 24) == 176)
          {
            v365 = *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40);
            v366 = *(unsigned __int16 *)(v365 + 24);
            if (v366 == 35 || v366 == 11)
            {
              v368 = *(_QWORD *)(v365 + 80);
              v369 = (llvm::APInt *)(v368 + 24);
              v370 = sub_1C6131328((unsigned __int8 *)&v1085, (uint64_t)v79, v80);
              v371 = *(_DWORD *)(v368 + 32);
              if (v371 >= 0x41)
              {
                v372 = v371 - llvm::APInt::countLeadingZerosSlowCase(v369);
                v29 = a6;
                if (v372 > 0x40)
                  goto LABEL_437;
                v369 = *(llvm::APInt **)v369;
              }
              else
              {
                v29 = a6;
              }
              if (*(llvm::Type **)v369 == (llvm::Type *)((char *)v370 - 1))
              {
                v373 = *(_QWORD *)(v29 + 80);
                v374 = *(_DWORD *)(v373 + 32);
                if (!v374)
                  goto LABEL_426;
                v390 = (llvm::APInt *)(v373 + 24);
                if (v374 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase(v390) != v374)
                    goto LABEL_437;
                }
                else if (*(_QWORD *)v390 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v374)
                {
                  goto LABEL_437;
                }
LABEL_426:
                v376 = *((_QWORD *)&v1089 + 1);
                v375 = (llvm *)v1089;
                v377 = *(uint64_t **)(v1088 + 32);
                v378 = *v377;
                v379 = v377[1];
                v380 = (_QWORD *)v1046;
                v381 = sub_1C6366AB4(v1046, 0, a11, v1085, v1086, 0, 0);
                v383 = v382;
                if (v1087 == 17)
                  v384 = 20;
                else
                  v384 = 19;
                goto LABEL_429;
              }
            }
          }
LABEL_437:
          v20 = sub_1C63769B8((llvm *)v1089, *((uint64_t *)&v1089 + 1), v1088, *((uint64_t *)&v1088 + 1), v29, a7, v1087, v100, a11);
          if (v20)
            return v20;
LABEL_438:
          v391 = sub_1C5D4F7E8(v29, a7, 0, 0);
          if (!v391)
            goto LABEL_439;
          v403 = v391;
          v404 = *(_QWORD *)(v391 + 80);
          v1090 = *(_OWORD *)*(_QWORD *)(v391 + 40);
          v405 = sub_1C6131328((unsigned __int8 *)&v1090, v392, v393);
          v406 = v405;
          if (v1087 - 18 > 3)
          {
            DWORD2(v1090) = v405;
            if (v405 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1090, 0, 0);
              v410 = (void *)v1090;
              *(_QWORD *)&v1095 = v1090;
              v409 = DWORD2(v1090);
              DWORD2(v1095) = DWORD2(v1090);
              DWORD2(v1090) = v406;
              llvm::APInt::initSlowCase((llvm::APInt *)&v1090, -1, 1);
            }
            else
            {
              *(_QWORD *)&v1095 = 0;
              v409 = DWORD2(v1090);
              DWORD2(v1095) = DWORD2(v1090);
              DWORD2(v1090) = v405;
              if (v405)
                v414 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v405;
              else
                v414 = 0;
              v410 = 0;
              *(_QWORD *)&v1090 = v414;
            }
            v413 = (void *)v1090;
            v1081 = v1090;
            v406 = DWORD2(v1090);
          }
          else
          {
            DWORD2(v1090) = v405;
            if (v405 > 0x40)
            {
              v408 = &v1090;
              llvm::APInt::initSlowCase((llvm::APInt *)&v1090, 0, 0);
              v409 = DWORD2(v1090);
              v407 = v406 - 1;
              if (DWORD2(v1090) >= 0x41)
                v408 = (__int128 *)(v1090 + 8 * (v407 >> 6));
            }
            else
            {
              *(_QWORD *)&v1090 = 0;
              LOBYTE(v407) = v405 - 1;
              v408 = &v1090;
              v409 = v405;
            }
            *(_QWORD *)v408 |= 1 << v407;
            v410 = (void *)v1090;
            *(_QWORD *)&v1095 = v1090;
            DWORD2(v1095) = v409;
            DWORD2(v1090) = v406;
            if (v406 > 0x40)
            {
              v412 = &v1090;
              llvm::APInt::initSlowCase((llvm::APInt *)&v1090, -1, 1);
              LODWORD(v411) = v406 - 1;
              if (DWORD2(v1090) >= 0x41)
                v412 = (__int128 *)(v1090 + 8 * (v411 >> 6));
              v406 = DWORD2(v1090);
            }
            else
            {
              if (v406)
                v411 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v406;
              else
                v411 = 0;
              *(_QWORD *)&v1090 = v411;
              LOBYTE(v411) = v406 - 1;
              v412 = &v1090;
            }
            *(_QWORD *)v412 &= ~(1 << v411);
            v413 = (void *)v1090;
            v1081 = v1090;
          }
          LODWORD(v1082) = v406;
          v1048 = (const void **)(v404 + 24);
          v415 = v1087;
          if (v1087 == 19 || v1087 == 11)
          {
            v416 = *(unsigned int *)(v404 + 32);
            if (v416 > 0x40)
            {
              v417 = (void *)*v1048;
              if (!memcmp(*v1048, v410, ((unint64_t)(v416 + 63) >> 3) & 0x3FFFFFF8))
                goto LABEL_521;
            }
            else
            {
              v417 = (void *)*v1048;
              if (*v1048 == v410)
                goto LABEL_521;
            }
            if ((_BYTE)v1089)
            {
              if (v1089 - 15 < 0x9C)
                goto LABEL_513;
LABEL_493:
              v1077 = v416;
              if (v416 > 0x40)
              {
                v1076 = operator new[]();
                memcpy((void *)v1076, *v1048, (((unint64_t)v1077 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v1076 = (uint64_t)v417;
              }
              llvm::APInt::operator-=((uint64_t)&v1076, 1uLL);
              v435 = v1077;
              DWORD2(v1090) = v1077;
              *(_QWORD *)&v1090 = v1076;
              v1077 = 0;
              if (v1087 == 19)
                v436 = 18;
              else
                v436 = 10;
              if (*(int *)(a10 + 8) >= 2
                && ((*(unsigned int *)((char *)&a1[23 * v436 + 42897]
                                     + (((unint64_t)v1089 >> 1) & 0x7C)) >> (4 * (v1089 & 7))) & 0xF) != 0)
              {
                if (v435 < 0x41)
                {
LABEL_512:
                  v415 = v1087;
                  goto LABEL_513;
                }
              }
              else
              {
                if ((*(_BYTE *)(v403 + 26) & 8) == 0)
                  goto LABEL_536;
                if (v435 <= 0x40)
                {
                  if ((*(unsigned int (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 1080))(a1, v1076 << -(char)v435 >> -(char)v435))
                  {
                    goto LABEL_536;
                  }
                  goto LABEL_512;
                }
              }
              if (v1076)
                MEMORY[0x1CAA32F9C]();
              goto LABEL_512;
            }
            if ((*(_DWORD *)(*((_QWORD *)&v1089 + 1) + 8) & 0xFE) != 0x12)
              goto LABEL_493;
          }
LABEL_513:
          if (v415 != 21 && v415 != 13)
            goto LABEL_544;
          v437 = *(unsigned int *)(v404 + 32);
          if (v437 > 0x40)
          {
            v438 = (void *)*v1048;
            if (memcmp(*v1048, v413, ((unint64_t)(v437 + 63) >> 3) & 0x3FFFFFF8))
              goto LABEL_517;
          }
          else
          {
            v438 = (void *)*v1048;
            if (*v1048 != v413)
            {
LABEL_517:
              if ((_BYTE)v1089)
              {
                if (v1089 - 15 < 0x9C)
                  goto LABEL_544;
                goto LABEL_523;
              }
              if ((*(_DWORD *)(*((_QWORD *)&v1089 + 1) + 8) & 0xFE) != 0x12)
              {
LABEL_523:
                v1075 = v437;
                if (v437 > 0x40)
                {
                  v1074 = operator new[]();
                  memcpy((void *)v1074, *v1048, (((unint64_t)v1075 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v1074 = (uint64_t)v438;
                }
                llvm::APInt::operator+=((uint64_t)&v1074, 1uLL);
                v440 = v1075;
                DWORD2(v1090) = v1075;
                *(_QWORD *)&v1090 = v1074;
                v1075 = 0;
                if (v1087 == 21)
                  v436 = 20;
                else
                  v436 = 12;
                if (*(int *)(a10 + 8) >= 2
                  && ((*(unsigned int *)((char *)&a1[23 * v436 + 42897]
                                       + (((unint64_t)v1089 >> 1) & 0x7C)) >> (4 * (v1089 & 7))) & 0xF) != 0)
                {
                  if (v440 < 0x41)
                    goto LABEL_543;
LABEL_541:
                  if (v1074)
                    MEMORY[0x1CAA32F9C]();
                  goto LABEL_543;
                }
                if ((*(_BYTE *)(v403 + 26) & 8) != 0)
                {
                  if (v440 > 0x40)
                    goto LABEL_541;
                  if (!(*(unsigned int (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 1080))(a1, v1074 << -(char)v440 >> -(char)v440))
                  {
LABEL_543:
                    v415 = v1087;
                    goto LABEL_544;
                  }
                }
LABEL_536:
                v441 = v1089;
                v442 = v1088;
                v443 = (uint64_t *)(*(_QWORD *)(a6 + 40) + 16 * a7);
                v444 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, *v443, v443[1], 0, 0);
                v446 = v445;
                v447 = sub_1C6367818((_QWORD *)v1046, v436);
                v450 = *(_QWORD *)(v1046 + 832);
                if (v450)
                  LOWORD(v450) = *(_WORD *)(v450 + 8);
                v308 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v441, *((uint64_t *)&v441 + 1), v442, *((uint64_t *)&v442 + 1), v449, v444, v446, v447, v448, SHIDWORD(v448), v450);
                if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
                {
                  v451 = v308;
                  MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
                  v308 = v451;
                }
                goto LABEL_649;
              }
LABEL_544:
              if (v415 == 20 || v415 == 12)
              {
                v452 = *(unsigned int *)(v404 + 32);
                if (v452 > 0x40)
                {
                  v453 = (void *)*v1048;
                  if (!memcmp(*v1048, v410, ((unint64_t)(v452 + 63) >> 3) & 0x3FFFFFF8))
                    goto LABEL_584;
                }
                else
                {
                  v453 = (void *)*v1048;
                  if (*v1048 == v410)
                    goto LABEL_584;
                }
                if ((_BYTE)v1089)
                  v454 = v1089 - 15 < 0x9C;
                else
                  v454 = (*(_DWORD *)(*((_QWORD *)&v1089 + 1) + 8) & 0xFE) == 18;
                if (!v454 || *(int *)(a10 + 8) <= 1)
                {
                  if (v452 > 0x40)
                  {
                    if (!memcmp(v453, v413, ((unint64_t)(v452 + 63) >> 3) & 0x3FFFFFF8))
                      goto LABEL_601;
                  }
                  else if (v453 == v413)
                  {
LABEL_601:
                    v473 = *((_QWORD *)&v1089 + 1);
                    v472 = (llvm *)v1089;
                    v475 = *((_QWORD *)&v1088 + 1);
                    v474 = v1088;
                    v476 = sub_1C6367818((_QWORD *)v1046, 0x16u);
                    v479 = *(_QWORD *)(v1046 + 832);
                    if (v479)
                      LOWORD(v479) = *(_WORD *)(v479 + 8);
                    v1022 = v477;
                    v1024 = v479;
                    v1018 = a7;
                    v1020 = v476;
                    v1017 = a6;
LABEL_815:
                    v439 = (uint64_t)sub_1C5D58E08(v1046, (const char *)0xC1, a11, v472, v473, v474, v475, v478, v1017, v1018, v1020, v1022, SHIDWORD(v1022), v1024);
                    goto LABEL_648;
                  }
                  v1073 = v409;
                  if (v409 > 0x40)
                  {
                    __s2 = (void *)operator new[]();
                    memcpy(__s2, v410, (((unint64_t)v1073 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    __s2 = v410;
                  }
                  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
                  v460 = v1073;
                  v461 = __s2;
                  v1073 = 0;
                  v462 = *(unsigned int *)(v404 + 32);
                  if (v462 > 0x40)
                    v463 = memcmp(*v1048, __s2, ((unint64_t)(v462 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  else
                    v463 = *v1048 == __s2;
                  v464 = v463;
                  if (v460 >= 0x41)
                  {
                    if (v461)
                    {
                      MEMORY[0x1CAA32F9C](v461, 0x1000C8000313F17);
                      if (v1073 >= 0x41)
                      {
                        if (__s2)
                          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
                      }
                    }
                  }
                  if ((v464 & 1) != 0)
                  {
                    v659 = v1089;
                    v660 = v1088;
                    v661 = (uint64_t *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
                    v662 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1095, a11, *v661, v661[1], 0, 0);
                    v664 = v663;
                    v665 = sub_1C6367818((_QWORD *)v1046, 0x11u);
                    v668 = *(_QWORD *)(v1046 + 832);
                    if (v668)
                      LOWORD(v668) = *(_WORD *)(v668 + 8);
                    v439 = (uint64_t)sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v659, *((uint64_t *)&v659 + 1), v660, *((uint64_t *)&v660 + 1), v667, v662, v664, v665, v666, SHIDWORD(v666), v668);
                    goto LABEL_648;
                  }
                  v415 = v1087;
                }
              }
              if (v415 != 18 && v415 != 10)
                goto LABEL_618;
              v465 = *(unsigned int *)(v404 + 32);
              if (v465 > 0x40)
              {
                v466 = (void *)*v1048;
                if (memcmp(*v1048, v413, ((unint64_t)(v465 + 63) >> 3) & 0x3FFFFFF8))
                {
LABEL_581:
                  if ((_BYTE)v1089)
                    v467 = v1089 - 15 < 0x9C;
                  else
                    v467 = (*(_DWORD *)(*((_QWORD *)&v1089 + 1) + 8) & 0xFE) == 18;
                  if (!v467 || *(int *)(a10 + 8) <= 1)
                  {
                    if (v465 > 0x40)
                    {
                      if (!memcmp(v466, v410, ((unint64_t)(v465 + 63) >> 3) & 0x3FFFFFF8))
                        goto LABEL_601;
                    }
                    else if (v466 == v410)
                    {
                      goto LABEL_601;
                    }
                    v1071 = v406;
                    if (v406 > 0x40)
                    {
                      v1070 = (void *)operator new[]();
                      memcpy(v1070, v413, (((unint64_t)v1071 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v1070 = v413;
                    }
                    llvm::APInt::operator-=((uint64_t)&v1070, 1uLL);
                    v480 = v1071;
                    v481 = v1070;
                    v1071 = 0;
                    v482 = *(unsigned int *)(v404 + 32);
                    if (v482 > 0x40)
                      v483 = memcmp(*v1048, v1070, ((unint64_t)(v482 + 63) >> 3) & 0x3FFFFFF8) == 0;
                    else
                      v483 = *v1048 == v1070;
                    v484 = v483;
                    if (v480 >= 0x41)
                    {
                      if (v481)
                      {
                        MEMORY[0x1CAA32F9C](v481, 0x1000C8000313F17);
                        if (v1071 >= 0x41)
                        {
                          if (v1070)
                            MEMORY[0x1CAA32F9C](v1070, 0x1000C8000313F17);
                        }
                      }
                    }
                    if ((v484 & 1) == 0)
                    {
                      v415 = v1087;
                      goto LABEL_618;
                    }
                    v669 = v1089;
                    v670 = v1088;
                    v671 = (uint64_t *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
                    v672 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1081, a11, *v671, v671[1], 0, 0);
                    v674 = v673;
                    v675 = sub_1C6367818((_QWORD *)v1046, 0x11u);
                    v678 = *(_QWORD *)(v1046 + 832);
                    if (v678)
                      LOWORD(v678) = *(_WORD *)(v678 + 8);
                    v308 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v669, *((uint64_t *)&v669 + 1), v670, *((uint64_t *)&v670 + 1), v677, v672, v674, v675, v676, SHIDWORD(v676), v678);
                    v406 = v1082;
LABEL_649:
                    if (v406 >= 0x41 && v1081)
                    {
                      v507 = v308;
                      MEMORY[0x1CAA32F9C](v1081, 0x1000C8000313F17);
                      v308 = v507;
                    }
                    if (DWORD2(v1095) < 0x41)
                      return v308;
                    v310 = v1095;
                    if (!(_QWORD)v1095)
                      return v308;
                    goto LABEL_654;
                  }
LABEL_618:
                  if (v415 != 22 && v415 != 17)
                    goto LABEL_655;
                  v485 = *(_DWORD *)(v404 + 32);
                  if (v485 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v1048) != v485)
                      goto LABEL_624;
                  }
                  else if (*v1048)
                  {
                    goto LABEL_624;
                  }
                  v439 = (uint64_t)sub_1C6376DC4((llvm *)v1089, *((uint64_t *)&v1089 + 1), v1088, SDWORD2(v1088), a6, a7, v415, *(_QWORD **)(a10 + 16), a11);
                  if (v439)
                    goto LABEL_648;
LABEL_624:
                  v1069 = 0;
                  v486 = *(_QWORD *)(v403 + 80);
                  v487 = (llvm::APInt *)(v486 + 24);
                  v488 = *(_DWORD *)(v486 + 32);
                  if (v488 > 0x40)
                  {
                    v490 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v486 + 24)) == v488;
                    v1069 = v490;
                    v492 = llvm::APInt::countTrailingOnesSlowCase(v487) == v488;
                    v491 = a11;
                  }
                  else
                  {
                    v489 = *(_QWORD *)v487;
                    v490 = *(_QWORD *)v487 == 0;
                    v1069 = v490;
                    v491 = a11;
                    if (!v488)
                    {
LABEL_630:
                      v493 = *(_QWORD *)(v1088 + 48);
                      if (v493)
                      {
                        v494 = 1;
                        do
                        {
                          if (*(_DWORD *)(v493 + 8) == DWORD2(v1088))
                          {
                            if (!v494)
                              goto LABEL_655;
                            --v494;
                          }
                          v493 = *(_QWORD *)(v493 + 32);
                        }
                        while (v493);
                        if (!v494)
                        {
                          v1068 = v1046;
                          *(_QWORD *)&v1090 = &v1088;
                          *((_QWORD *)&v1090 + 1) = v1046;
                          *(_QWORD *)&v1091 = v491;
                          *((_QWORD *)&v1091 + 1) = &v1085;
                          v1092 = &v1069;
                          v1093 = &v1089;
                          v1094 = &v1087;
                          v1078 = 0;
                          LODWORD(v1079) = 0;
                          v1066 = 0;
                          LODWORD(v1067) = 0;
                          if (sub_1C5D924EC(&v1068, v1088, *((_BOOL8 *)&v1088 + 1), (uint64_t)&v1078, (uint64_t)&v1066))
                          {
                            v495 = v1078;
                            v496 = v1079;
                            v497 = v1066;
                            v498 = v1067;
LABEL_647:
                            v439 = (uint64_t)sub_1C5D9270C((uint64_t)&v1090, v495, v496, (uint64_t)v497, v498);
                            goto LABEL_648;
                          }
                          if (*(unsigned __int16 *)(v1088 + 24) - 171 <= 1)
                          {
                            v1064 = 0;
                            LODWORD(v1065) = 0;
                            v1062 = 0;
                            LODWORD(v1063) = 0;
                            v1060 = 0;
                            LODWORD(v1061) = 0;
                            v1058 = 0;
                            LODWORD(v1059) = 0;
                            if (sub_1C5D924EC(&v1068, **(_QWORD **)(v1088 + 32), *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 8), (uint64_t)&v1064, (uint64_t)&v1060))
                            {
                              if (sub_1C5D924EC(&v1068, *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 48), (uint64_t)&v1062, (uint64_t)&v1058))
                              {
                                v500 = *(_QWORD *)(v1046 + 832);
                                if (v500)
                                  LOWORD(v500) = *(_WORD *)(v500 + 8);
                                v502 = sub_1C5D56C70(v1046, *(unsigned __int16 *)(v1088 + 24), v491, v1085, v1086, v1064, v1065, v499, v1062, v1063, v500);
                                v504 = v503;
                                v505 = *(_QWORD *)(v1046 + 832);
                                if (v505)
                                  LOWORD(v505) = *(_WORD *)(v505 + 8);
                                v497 = sub_1C5D56C70(v1046, *(unsigned __int16 *)(v1088 + 24), a11, v1085, v1086, v1060, v1061, v501, v1058, v1059, v505);
                                v498 = v506;
                                v495 = (uint64_t)v502;
                                v496 = v504;
                                goto LABEL_647;
                              }
                            }
                          }
                        }
                      }
LABEL_655:
                      if ((_BYTE)v1089)
                        v509 = v1089 - 15 < 0x9C;
                      else
                        v509 = (*(_DWORD *)(*((_QWORD *)&v1089 + 1) + 8) & 0xFE) == 18;
                      if (v509 && *(_DWORD *)(a10 + 8) > 1)
                      {
LABEL_1331:
                        if (v406 >= 0x41 && v413)
                          MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
                        if (v409 >= 0x41 && v410)
                          MEMORY[0x1CAA32F9C](v410, 0x1000C8000313F17);
                        v29 = a6;
LABEL_439:
                        v394 = *(unsigned __int16 *)(v29 + 24);
                        v395 = a10;
                        if (v394 != 35 && v394 != 11)
                          goto LABEL_971;
                        v396 = *(_QWORD *)(v1046 + 24);
                        v397 = *(_QWORD *)(a6 + 80);
                        v398 = *(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088);
                        v400 = *(llvm **)v398;
                        v399 = *(_QWORD *)(v398 + 8);
                        if ((_BYTE)v1089)
                          v401 = sub_1C47A8C74((unsigned __int8 *)&v1089);
                        else
                          v401 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1089);
                        v418 = v401;
                        if ((_DWORD)v402 == 1)
                        v419 = (const void **)(v397 + 24);
                        if (v418 != 1)
                        {
                          v420 = (_QWORD *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
                          if (sub_1C6329468(a1, *v420, v420[1]) != 1)
                            goto LABEL_905;
                        }
                        if (v1087 != 22 && v1087 != 17
                          || (v1089 != v400
                           || !(_BYTE)v1089 && *((_QWORD *)&v1089 + 1) != v399)
                          && (!(_BYTE)v1089
                           || !*(_QWORD *)&a1[2 * v1089 + 24]
                           || (v1089 != v400
                            || !(_BYTE)v400 && *((_QWORD *)&v1089 + 1) != v399)
                           && !sub_1C632979C((unsigned __int8 *)&v1089, (uint64_t)v400, v399)))
                        {
                          goto LABEL_905;
                        }
                        if (*(_WORD *)(v1088 + 24) != 171)
                          goto LABEL_905;
                        v421 = *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40);
                        v422 = *(unsigned __int16 *)(v421 + 24);
                        if (v422 != 35 && v422 != 11)
                          goto LABEL_905;
                        ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1, (uint64_t)v400, v399, (uint64_t)v95, *(_DWORD *)(a10 + 8) != 0);
                        v1049 = v424;
                        if (v1087 == 17)
                        {
                          v656 = *(_QWORD *)(v421 + 80);
                          v429 = *(unsigned int *)(v397 + 32);
                          if (v429 <= 0x40)
                          {
                            v430 = *v419;
                            if (*v419 != *(const void **)(v656 + 24))
                              goto LABEL_905;
                            goto LABEL_843;
                          }
                          v679 = (int8x8_t *)*v419;
                          if (memcmp(*v419, *(const void **)(v656 + 24), ((unint64_t)(v429 + 63) >> 3) & 0x3FFFFFF8))
                          {
                            goto LABEL_905;
                          }
                          v658 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v397 + 24));
                          v680 = 0;
                          v681 = (unint64_t)(v429 + 63) >> 6;
                          do
                          {
                            v682 = *v679++;
                            v683 = (uint8x8_t)vcnt_s8(v682);
                            v683.i16[0] = vaddlv_u8(v683);
                            v680 += v683.i32[0];
                            --v681;
                          }
                          while (v681);
                        }
                        else
                        {
                          if (v1087 != 22)
                            goto LABEL_905;
                          v425 = *(_DWORD *)(v397 + 32);
                          v426 = (_QWORD *)(v397 + 24);
                          if (v425 >= 0x41)
                          {
                            if (v425 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v397 + 24)) > 0x40)
                              goto LABEL_905;
                            v426 = *v419;
                          }
                          if (*v426)
                          {
LABEL_905:
                            v720 = *(_DWORD *)(v397 + 32);
                            v395 = a10;
                            if (v720 - sub_1C4959174((llvm::APInt *)(v397 + 24)) + 1 > 0x40)
                              goto LABEL_971;
                            v721 = *(_DWORD *)(v397 + 32);
                            v722 = v721 > 0x40
                                 ? *(_QWORD *)*v419
                                 : (uint64_t)((_QWORD)*v419 << -(char)v721) >> -(char)v721;
                            if (((*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 1080))(a1, v722) & 1) != 0)goto LABEL_971;
                            v724 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1, (uint64_t)v400, v399, (uint64_t)v95, *(_DWORD *)(a10 + 8) != 0);
                            v725 = v1087;
                            if (v1087 != 22 && v1087 != 17)
                              goto LABEL_929;
                            if (*(_WORD *)(v1088 + 24) != 171)
                              goto LABEL_971;
                            v726 = *(_QWORD *)(v1088 + 48);
                            if (!v726)
                              goto LABEL_971;
                            v727 = 1;
                            do
                            {
                              if (*(_DWORD *)(v726 + 8) == DWORD2(v1088))
                              {
                                if (!v727)
                                  goto LABEL_929;
                                --v727;
                              }
                              v726 = *(_QWORD *)(v726 + 32);
                            }
                            while (v726);
                            if (!v727)
                            {
                              v728 = *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40);
                              v729 = *(unsigned __int16 *)(v728 + 24);
                              if (v729 == 35 || v729 == 11)
                              {
                                v731 = *(_QWORD *)(v728 + 80);
                                v732 = (const void **)(v731 + 24);
                                v1050 = v723;
                                if (sub_1C57EDD40((llvm::APInt *)(v731 + 24)))
                                {
                                  v733 = *(unsigned int *)(v731 + 32);
                                  if (v733 >= 0x41)
                                  {
                                    v897 = ((unint64_t)(v733 + 63) >> 3) & 0x3FFFFFF8;
                                    v898 = (char *)operator new[]();
                                    memcpy(v898, *v732, v897);
                                    v899 = 0;
                                    v900 = (char *)*v419;
                                    do
                                    {
                                      *(_QWORD *)&v898[v899] &= *(_QWORD *)&v900[v899];
                                      v899 += 8;
                                    }
                                    while (v897 != v899);
                                    v901 = memcmp(v898, *v419, v897);
                                    MEMORY[0x1CAA32F9C](v898, 0x1000C8000313F17);
                                    v395 = a10;
                                    if (!v901)
                                    {
                                      LODWORD(v733) = *(_DWORD *)(v731 + 32);
                                      if (v733 > 0x40)
                                      {
                                        v903 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v731 + 24));
                                        goto LABEL_1190;
                                      }
LABEL_1174:
                                      v902 = __clz(__rbit64((unint64_t)*v732));
                                      if (v733 >= v902)
                                        v903 = v902;
                                      else
                                        v903 = v733;
LABEL_1190:
                                      v395 = a10;
                                      if (((*(uint64_t (**)(uint64_t, llvm *, uint64_t, uint64_t))(*(_QWORD *)v396 + 1456))(v396, v400, v399, v903) & 1) == 0)
                                      {
                                        v910 = *(uint64_t **)(v1088 + 32);
                                        v911 = *v910;
                                        v912 = v910[1];
                                        v913 = sub_1C6366AB4(v1046, v903, a11, v724, (uint64_t)v1050, 0, 0);
                                        v916 = *(_QWORD *)(v1046 + 832);
                                        if (v916)
                                          LOWORD(v916) = *(_WORD *)(v916 + 8);
                                        v700 = sub_1C5D56C70(v1046, 177, a11, v400, v399, v911, v912, v915, (uint64_t)v913, v914, v916);
                                        v702 = v917;
                                        v918 = *(unsigned int *)(v397 + 32);
                                        DWORD2(v1090) = v918;
                                        if (v918 > 0x40)
                                        {
                                          v977 = v918 + 63;
                                          v978 = ((unint64_t)(v918 + 63) >> 3) & 0x3FFFFFF8;
                                          v979 = (void *)operator new[]();
                                          *(_QWORD *)&v1090 = v979;
                                          memcpy(v979, *v419, v978);
                                          llvm::APInt::tcShiftRight((llvm::APInt *)v979, (unint64_t *)(v977 >> 6), v903);
                                        }
                                        else if ((_DWORD)v918 == (_DWORD)v903)
                                        {
                                          *(_QWORD *)&v1090 = 0;
                                        }
                                        else
                                        {
                                          *(_QWORD *)&v1090 = (unint64_t)*v419 >> v903;
                                        }
                                        v919 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, (uint64_t)v400, v399, 0, 0);
                                        v921 = v920;
                                        if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
                                          MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
                                        v922 = v1089;
                                        v923 = sub_1C6367818((_QWORD *)v1046, v1087);
                                        v925 = *(_QWORD *)(v1046 + 832);
                                        if (v925)
                                          LOWORD(v925) = *(_WORD *)(v925 + 8);
                                        v1021 = v924;
                                        v1023 = v925;
                                        *((_QWORD *)&v1016 + 1) = v921;
                                        v1019 = v923;
                                        *(_QWORD *)&v1016 = v919;
                                        v54 = a11;
                                        v53 = v1046;
                                        v52 = *((_QWORD *)&v922 + 1);
                                        v51 = (llvm *)v922;
LABEL_900:
                                        v50 = (uint64_t)v700;
                                        v55 = v702;
                                        return sub_1C5D58E08(v53, (const char *)0xC1, v54, v51, v52, v50, v55, v48, v1016, *((uint64_t *)&v1016 + 1), v1019, v1021, SHIDWORD(v1021), v1023);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v395 = a10;
                                    if (((unint64_t)*v419 & ~(unint64_t)*v732) == 0)
                                      goto LABEL_1174;
                                  }
                                }
                              }
                            }
                            else
                            {
LABEL_929:
                              if (v1087 - 10 <= 3)
                              {
                                v734 = *(_DWORD *)(v397 + 32);
                                DWORD2(v1090) = v734;
                                v1051 = v723;
                                if (v734 > 0x40)
                                {
                                  v735 = (void *)operator new[]();
                                  *(_QWORD *)&v1090 = v735;
                                  v734 = DWORD2(v1090);
                                  memcpy(v735, *v419, (((unint64_t)DWORD2(v1090) + 63) >> 3) & 0x3FFFFFF8);
                                }
                                else
                                {
                                  v735 = (void *)*v419;
                                  *(_QWORD *)&v1090 = *v419;
                                }
                                if (v725 == 13 || v725 == 10)
                                {
                                  if (*(_DWORD *)(v397 + 32) > 0x40u)
                                    v736 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v397 + 24));
                                  else
                                    v736 = __clz(__rbit64(~(unint64_t)*v419));
                                  v1057 = v734;
                                  if (v734 > 0x40)
                                  {
                                    v1056 = (void *)operator new[]();
                                    memcpy(v1056, (const void *)v1090, (((unint64_t)v1057 + 63) >> 3) & 0x3FFFFFF8);
                                  }
                                  else
                                  {
                                    v1056 = v735;
                                  }
                                  llvm::APInt::operator+=((uint64_t)&v1056, 1uLL);
                                  v734 = v1057;
                                  v737 = v1056;
                                  v1057 = 0;
                                  if (DWORD2(v1090) > 0x40 && (_QWORD)v1090)
                                  {
                                    MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
                                    *(_QWORD *)&v1090 = v737;
                                    DWORD2(v1090) = v734;
                                    if (v1057 < 0x41)
                                    {
                                      v395 = a10;
                                    }
                                    else
                                    {
                                      v395 = a10;
                                      if (v1056)
                                      {
                                        MEMORY[0x1CAA32F9C](v1056, 0x1000C8000313F17);
                                        v734 = DWORD2(v1090);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    *(_QWORD *)&v1090 = v1056;
                                    DWORD2(v1090) = v734;
                                  }
                                  if (v1087 == 13)
                                    v738 = 12;
                                  else
                                    v738 = 11;
                                  v1045 = v738;
                                }
                                else
                                {
                                  v1045 = v1087;
                                  v739 = *(_DWORD *)(v397 + 32);
                                  if (v739 > 0x40)
                                  {
                                    v736 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v397 + 24));
                                  }
                                  else
                                  {
                                    v740 = __clz(__rbit64((unint64_t)*v419));
                                    if (v739 >= v740)
                                      v736 = v740;
                                    else
                                      v736 = v739;
                                  }
                                }
                                if (v734 > 0x40)
                                {
                                  llvm::APInt::tcShiftRight((llvm::APInt *)v1090, (unint64_t *)(((unint64_t)v734 + 63) >> 6), v736);
                                }
                                else if (v734 == (_DWORD)v736)
                                {
                                  *(_QWORD *)&v1090 = 0;
                                }
                                else
                                {
                                  *(_QWORD *)&v1090 = (unint64_t)v1090 >> v736;
                                }
                                if ((_DWORD)v736)
                                {
                                  v741 = DWORD2(v1090);
                                  if (v741 - sub_1C4959174((llvm::APInt *)&v1090) + 1 <= 0x40)
                                  {
                                    v742 = DWORD2(v1090) > 0x40
                                         ? *(_QWORD *)v1090
                                         : (uint64_t)((_QWORD)v1090 << -BYTE8(v1090)) >> -BYTE8(v1090);
                                    v395 = a10;
                                    if ((*(unsigned int (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 1080))(a1, v742))
                                    {
                                      if (((*(uint64_t (**)(uint64_t, llvm *, uint64_t, uint64_t))(*(_QWORD *)v396 + 1456))(v396, v400, v399, v736) & 1) == 0)
                                      {
                                        v840 = v1088;
                                        v841 = sub_1C6366AB4(v1046, v736, a11, v724, (uint64_t)v1051, 0, 0);
                                        v844 = *(_QWORD *)(v1046 + 832);
                                        if (v844)
                                          LOWORD(v844) = *(_WORD *)(v844 + 8);
                                        v845 = sub_1C5D56C70(v1046, 177, a11, v400, v399, v840, *((unint64_t *)&v840 + 1), v843, (uint64_t)v841, v842, v844);
                                        v847 = v846;
                                        v848 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, (uint64_t)v400, v399, 0, 0);
                                        v850 = v849;
                                        v851 = v1089;
                                        v852 = sub_1C6367818((_QWORD *)v1046, v1045);
                                        v855 = *(_QWORD *)(v1046 + 832);
                                        if (v855)
                                          LOWORD(v855) = *(_WORD *)(v855 + 8);
                                        v856 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v851, *((uint64_t *)&v851 + 1), (uint64_t)v845, v847, v854, v848, v850, v852, v853, SHIDWORD(v853), v855);
                                        goto LABEL_1166;
                                      }
                                    }
                                  }
                                }
                                if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
                                  MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
                              }
                            }
LABEL_971:
                            v142 = (uint64_t *)v1088;
                            v743 = *(unsigned __int16 *)(v1088 + 24);
                            v164 = a7;
                            if ((_DWORD)v743 == 12)
                              goto LABEL_1010;
                            if ((_DWORD)v743 == 36)
                              goto LABEL_1010;
                            v744 = *(unsigned __int16 *)(a6 + 24);
                            if (v744 != 36 && v744 != 12)
                              goto LABEL_1010;
                            if (v1087 - 7 <= 1)
                            {
                              v147 = *((_QWORD *)&v1089 + 1);
                              v146 = (llvm *)v1089;
                              v148 = *((_QWORD *)&v1088 + 1);
                              v745 = sub_1C6367818((_QWORD *)v1046, v1087);
                              v747 = *(_QWORD *)(v1046 + 832);
                              if (v747)
                                LOWORD(v747) = *(_WORD *)(v747 + 8);
                              v1021 = v746;
                              v1023 = v747;
                              *((_QWORD *)&v1016 + 1) = v148;
                              v1019 = v745;
                              *(_QWORD *)&v1016 = v142;
LABEL_165:
                              v54 = a11;
                              v53 = v1046;
                              v51 = v146;
                              v52 = v147;
LABEL_336:
                              v50 = (uint64_t)v142;
                              v55 = v148;
                              return sub_1C5D58E08(v53, (const char *)0xC1, v54, v51, v52, v50, v55, v48, v1016, *((uint64_t *)&v1016 + 1), v1019, v1021, SHIDWORD(v1021), v1023);
                            }
                            if ((_DWORD)v743 == 222)
                            {
                              v748 = (v1087 >> 1) & 2 | v1087 & 0xFFFFFFF9 | (4 * ((v1087 >> 1) & 1));
                              v749 = *(_QWORD *)(v1088 + 40);
                              v750 = *(llvm **)(v749 + 16 * DWORD2(v1088));
                              if (*(int *)(v395 + 8) < 2
                                || (v751 = v750 >> 3,
                                    v752 = 15 << (4 * (v750 & 7)),
                                    (a1[23 * v748 + 42897 + v751] & v752) == 0))
                              {
                                v753 = *(_QWORD *)(v1046 + 832);
                                if (v753)
                                  v754 = *(_WORD *)(v753 + 8);
                                else
                                  v754 = 0;
                                v759 = sub_1C5D52060(v1046, 222, a11, v750, *(_QWORD *)(v749 + 16 * DWORD2(v1088) + 8), a6, a7, v754);
                                v761 = v760;
                                v762 = v1089;
                                v763 = *(uint64_t **)(v1088 + 32);
                                v764 = *v763;
                                v765 = v763[1];
                                v766 = sub_1C6367818((_QWORD *)v1046, v748);
                                v768 = *(_QWORD *)(v1046 + 832);
                                if (v768)
                                  LOWORD(v768) = *(_WORD *)(v768 + 8);
                                v1021 = v767;
                                v1023 = v768;
                                *((_QWORD *)&v1016 + 1) = v761;
                                v1019 = v766;
                                *(_QWORD *)&v1016 = v759;
                                v54 = a11;
                                v53 = v1046;
                                v52 = *((_QWORD *)&v762 + 1);
                                v51 = (llvm *)v762;
LABEL_992:
                                v50 = v764;
                                v55 = v765;
                                return sub_1C5D58E08(v53, (const char *)0xC1, v54, v51, v52, v50, v55, v48, v1016, *((uint64_t *)&v1016 + 1), v1019, v1021, SHIDWORD(v1021), v1023);
                              }
                            }
                            else
                            {
                              v755 = *(_QWORD *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
                              v756 = 4 * (v755 & 7);
                              v751 = v755 >> 3;
                              v752 = 15 << v756;
                            }
                            if ((a1[23 * v1087 + 42897 + v751] & v752) == 0)
                              goto LABEL_1010;
                            v757 = *(_QWORD *)(a6 + 80);
                            v758 = *(_UNKNOWN **)(v757 + 32) == &unk_1C866F1C0
                                 ? *(_BYTE *)(*(_QWORD *)(v757 + 40) + 28)
                                 : *(_BYTE *)(v757 + 52);
                            if ((v758 & 7) != 0)
                              goto LABEL_1010;
                            if ((int)v1087 > 8)
                            {
                              if (v1087 == 9)
                              {
                                v769 = (v758 & 8) == 0;
                                v770 = 13;
                                v771 = 11;
                              }
                              else
                              {
                                if (v1087 != 14)
                                  goto LABEL_1010;
                                v769 = (v758 & 8) == 0;
                                v770 = 10;
                                v771 = 12;
                              }
                            }
                            else
                            {
                              if (v1087 != 1)
                              {
                                if (v1087 == 6)
                                {
                                  v769 = (v758 & 8) == 0;
                                  v770 = 2;
                                  v771 = 4;
                                  goto LABEL_1004;
                                }
LABEL_1010:
                                if ((_QWORD)v1088 == a6 && DWORD2(v1088) == (_DWORD)a7)
                                {
                                  v775 = (v1087 >> 3) & 3;
                                  if (v775 == 2 || v775 == (v1087 & 1))
                                  {
                                    v248 = *((_QWORD *)&v1089 + 1);
                                    v247 = v1089;
                                    v249 = (char)v1085;
                                    v250 = v1086;
                                    v251 = v1046;
                                    v246 = v1087 & 1;
                                    return (uint64_t *)sub_1C6366888(v251, v246, a11, v247, v248, v249, v250);
                                  }
                                  v776 = v775 ? 8 : 7;
                                  if (v776 != v1087)
                                  {
                                    if (*(int *)(v395 + 8) < 2
                                      || (v790 = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 16 * a7),
                                          ((a1[23 * v776 + 42897 + (v790 >> 3)] >> (4 * (v790 & 7))) & 0xF) == 0))
                                    {
                                      v289 = *((_QWORD *)&v1089 + 1);
                                      v288 = (llvm *)v1089;
                                      v148 = *((_QWORD *)&v1088 + 1);
                                      v163 = (_QWORD *)v1046;
                                      v291 = (_QWORD *)v1046;
                                      v290 = v776;
LABEL_332:
                                      v292 = sub_1C6367818(v291, v290);
                                      v294 = v163[104];
                                      if (v294)
                                        LOWORD(v294) = *(_WORD *)(v294 + 8);
                                      v1021 = v293;
                                      v1023 = v294;
                                      *((_QWORD *)&v1016 + 1) = v164;
                                      v1019 = v292;
                                      *(_QWORD *)&v1016 = a6;
                                      goto LABEL_335;
                                    }
                                  }
                                }
                                if (v1087 != 22 && v1087 != 17)
                                  goto LABEL_1033;
                                v777 = (unsigned __int8 *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
                                v778 = *v777;
                                if (*v777)
                                {
                                  v781 = (v778 - 120) >= 0x20 && (v778 - 2) >= 6;
                                  if (!v781 || (v778 - 15) < 0x3C)
                                    goto LABEL_1053;
                                }
                                else
                                {
                                  v779 = *((_QWORD *)v777 + 1);
                                  if ((*(_DWORD *)(v779 + 8) & 0xFE) == 0x12)
                                    v780 = *(unsigned __int8 *)(**(_QWORD **)(v779 + 16) + 8);
                                  else
                                    v780 = *(_DWORD *)(v779 + 8);
                                  if (v780 == 13)
                                  {
LABEL_1053:
                                    if ((v743 - 56) >= 2 && (_DWORD)v743 != 173)
                                    {
LABEL_1122:
                                      v829 = *(unsigned __int16 *)(a6 + 24);
                                      if ((v829 - 56) < 2 || v829 == 173)
                                      {
                                        v20 = sub_1C6376FA4((uint64_t *)a1, (llvm *)v1089, *((uint64_t *)&v1089 + 1), a6, a7, v1088, DWORD2(v1088), v1087, a11, v395);
                                        if (v20)
                                          return v20;
                                      }
                                      v20 = sub_1C63764D0(a1, v1089, *((_BOOL8 *)&v1089 + 1), v1088, *((unint64_t *)&v1088 + 1), a6, a7, v1087, a11, v395);
                                      if (v20)
                                        return v20;
                                      v142 = (uint64_t *)v1088;
                                      v743 = *(unsigned __int16 *)(v1088 + 24);
                                      goto LABEL_1033;
                                    }
                                    v787 = *(unsigned __int16 *)(a6 + 24);
                                    if ((_DWORD)v743 == v787)
                                    {
                                      v788 = *(_QWORD *)(v1088 + 32);
                                      v789 = *(_QWORD *)(a6 + 32);
                                      v142 = *(uint64_t **)v788;
                                      v173 = *(uint64_t **)v789;
                                      if (*(_QWORD *)v788 == *(_QWORD *)v789
                                        && *(_DWORD *)(v788 + 8) == *(_DWORD *)(v789 + 8))
                                      {
                                        v376 = *((_QWORD *)&v1089 + 1);
                                        v375 = (llvm *)v1089;
                                        v378 = *(_QWORD *)(v788 + 40);
                                        v379 = *(_QWORD *)(v788 + 48);
                                        v381 = *(_QWORD **)(v789 + 40);
                                        v383 = *(_QWORD *)(v789 + 48);
                                        v380 = (_QWORD *)v1046;
                                        v385 = (_QWORD *)v1046;
                                        v384 = v1087;
                                        goto LABEL_430;
                                      }
                                      if (*(_QWORD *)(v788 + 40) == *(_QWORD *)(v789 + 40)
                                        && *(_DWORD *)(v788 + 48) == *(_DWORD *)(v789 + 48))
                                      {
                                        v147 = *((_QWORD *)&v1089 + 1);
                                        v146 = (llvm *)v1089;
                                        v148 = *(_QWORD *)(v788 + 8);
                                        v174 = *(uint64_t **)(v789 + 8);
                                        v176 = v1046;
                                        v177 = (_QWORD *)v1046;
                                        v175 = v1087;
                                        goto LABEL_198;
                                      }
                                      if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)a1 + 1128))(a1))
                                      {
                                        v791 = *(_QWORD *)(v1088 + 32);
                                        v792 = *(_QWORD *)(a6 + 32);
                                        v142 = *(uint64_t **)v791;
                                        v173 = *(uint64_t **)(v792 + 40);
                                        if (*(uint64_t **)v791 == v173
                                          && *(_DWORD *)(v791 + 8) == *(_DWORD *)(v792 + 48))
                                        {
                                          v376 = *((_QWORD *)&v1089 + 1);
                                          v375 = (llvm *)v1089;
                                          v378 = *(_QWORD *)(v791 + 40);
                                          v379 = *(_QWORD *)(v791 + 48);
                                          v381 = *(_QWORD **)v792;
                                          v383 = *(_QWORD *)(v792 + 8);
                                          v384 = v1087;
                                          v380 = (_QWORD *)v1046;
LABEL_429:
                                          v385 = v380;
LABEL_430:
                                          v386 = sub_1C6367818(v385, v384);
                                          v389 = v380[104];
                                          if (v389)
                                            LOWORD(v389) = *(_WORD *)(v389 + 8);
                                          return sub_1C5D58E08(v1046, (const char *)0xC1, a11, v375, v376, v378, v379, v388, (uint64_t)v381, v383, v386, v387, SHIDWORD(v387), v389);
                                        }
                                        if (*(_QWORD *)(v791 + 40) == *(_QWORD *)v792
                                          && *(_DWORD *)(v791 + 48) == *(_DWORD *)(v792 + 8))
                                        {
                                          v147 = *((_QWORD *)&v1089 + 1);
                                          v146 = (llvm *)v1089;
                                          v148 = *(_QWORD *)(v791 + 8);
                                          v174 = *(uint64_t **)(v792 + 48);
                                          v175 = v1087;
LABEL_197:
                                          v176 = v1046;
                                          v177 = (_QWORD *)v1046;
LABEL_198:
                                          v178 = sub_1C6367818(v177, v175);
                                          v180 = *(_QWORD *)(v176 + 832);
                                          if (v180)
                                            LOWORD(v180) = *(_WORD *)(v180 + 8);
                                          v1021 = v179;
                                          v1023 = v180;
                                          *((_QWORD *)&v1016 + 1) = v174;
                                          v1019 = v178;
                                          *(_QWORD *)&v1016 = v173;
                                          goto LABEL_165;
                                        }
                                      }
                                      v787 = *(unsigned __int16 *)(a6 + 24);
                                    }
                                    if (v787 != 35 && v787 != 11)
                                    {
LABEL_1121:
                                      v20 = sub_1C6376FA4((uint64_t *)a1, (llvm *)v1089, *((uint64_t *)&v1089 + 1), v1088, DWORD2(v1088), a6, a7, v1087, a11, v395);
                                      if (v20)
                                        return v20;
                                      goto LABEL_1122;
                                    }
                                    v793 = v1088;
                                    v794 = *(uint64_t **)(v1088 + 32);
                                    v795 = v794[5];
                                    v796 = *(unsigned __int16 *)(v795 + 24);
                                    if (v796 != 35 && v796 != 11)
                                    {
LABEL_1092:
                                      v812 = *(unsigned __int16 *)(*v794 + 24);
                                      if ((v812 == 35 || v812 == 11) && *(_WORD *)(v1088 + 24) == 57)
                                      {
                                        v814 = *(_QWORD *)(v1088 + 48);
                                        if (v814)
                                        {
                                          if (!*(_QWORD *)(v814 + 32))
                                          {
                                            v815 = v1089;
                                            v816 = v794[6];
                                            v817 = *(_QWORD *)(*v794 + 80);
                                            v818 = *(unsigned int *)(v817 + 32);
                                            if (v818 >= 0x41)
                                            {
                                              v820 = (void *)operator new[]();
                                              memcpy(v820, *(const void **)(v817 + 24), ((unint64_t)(v818 + 63) >> 3) & 0x3FFFFFF8);
                                              v857 = 0;
                                              v858 = *(unint64_t **)(*(_QWORD *)(a6 + 80) + 24);
                                              v859 = (unint64_t)(v818 + 63) >> 6;
                                              v860 = (unint64_t *)v820;
                                              v861 = v859;
                                              do
                                              {
                                                v862 = *v858++;
                                                v863 = *v860 - v862;
                                                v864 = *v860 < v862;
                                                v865 = *v860 + ~v862;
                                                if (v857)
                                                {
                                                  v857 = v865 >= *v860;
                                                }
                                                else
                                                {
                                                  v865 = v863;
                                                  v857 = v864;
                                                }
                                                *v860++ = v865;
                                                --v861;
                                              }
                                              while (v861);
                                              *((_QWORD *)v820 + (v859 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v818;
                                              v793 = v1088;
                                            }
                                            else
                                            {
                                              v819 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v818;
                                              if (!(_DWORD)v818)
                                                v819 = 0;
                                              v820 = (void *)(v819 & (*(_QWORD *)(v817 + 24)
                                                                    - *(_QWORD *)(*(_QWORD *)(a6 + 80) + 24)));
                                            }
                                            DWORD2(v1090) = v818;
                                            *(_QWORD *)&v1090 = v820;
                                            v866 = (uint64_t *)(*(_QWORD *)(v793 + 40) + 16 * DWORD2(v1088));
                                            v867 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, *v866, v866[1], 0, 0);
                                            v869 = v868;
                                            v870 = sub_1C6367818((_QWORD *)v1046, v1087);
                                            v873 = *(_QWORD *)(v1046 + 832);
                                            if (v873)
                                              LOWORD(v873) = *(_WORD *)(v873 + 8);
                                            v856 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v815, *((uint64_t *)&v815 + 1), v795, v816, v872, v867, v869, v870, v871, SHIDWORD(v871), v873);
                                            goto LABEL_1166;
                                          }
                                        }
                                      }
                                      v1090 = *(_OWORD *)*(_QWORD *)(a6 + 40);
                                      if ((_BYTE)v1090)
                                        v821 = sub_1C47A8C74((unsigned __int8 *)&v1090);
                                      else
                                        v821 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1090);
                                      v823 = v821;
                                      if ((_DWORD)v822 == 1)
                                      if (v823 <= 0x40)
                                      {
                                        v824 = *(_QWORD *)(a6 + 80);
                                        v825 = *(_DWORD *)(v824 + 32);
                                        v826 = v825 > 0x40
                                             ? **(_QWORD **)(v824 + 24)
                                             : (uint64_t)(*(_QWORD *)(v824 + 24) << -(char)v825) >> -(char)v825;
                                        if ((*(unsigned int (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 1080))(a1, v826))
                                        {
                                          v827 = *(_QWORD *)(v1088 + 48);
                                          if (!v827)
                                            goto LABEL_1122;
                                          v828 = 1;
                                          do
                                          {
                                            if (*(_DWORD *)(v827 + 8) == DWORD2(v1088))
                                            {
                                              if (!v828)
                                                goto LABEL_1122;
                                              --v828;
                                            }
                                            v827 = *(_QWORD *)(v827 + 32);
                                          }
                                          while (v827);
                                          if (v828)
                                            goto LABEL_1122;
                                        }
                                      }
                                      goto LABEL_1121;
                                    }
                                    v798 = *(unsigned __int16 *)(v1088 + 24);
                                    if (v798 == 173)
                                    {
                                      v808 = *(_QWORD *)(v1088 + 48);
                                      if (!v808 || *(_QWORD *)(v808 + 32))
                                        goto LABEL_1092;
                                      v801 = *((_QWORD *)&v1089 + 1);
                                      v800 = (llvm *)v1089;
                                      v802 = *v794;
                                      v803 = v794[1];
                                      v809 = *(_QWORD *)(v795 + 80);
                                      v810 = *(unsigned int *)(v809 + 32);
                                      if (v810 > 0x40)
                                      {
                                        v811 = (void *)operator new[]();
                                        memcpy(v811, *(const void **)(v809 + 24), ((unint64_t)(v810 + 63) >> 3) & 0x3FFFFFF8);
                                        v883 = *(uint64_t **)(*(_QWORD *)(a6 + 80) + 24);
                                        v884 = (unint64_t)(v810 + 63) >> 6;
                                        v885 = v811;
                                        do
                                        {
                                          v886 = *v883++;
                                          *v885++ ^= v886;
                                          --v884;
                                        }
                                        while (v884);
                                        v793 = v1088;
                                      }
                                      else
                                      {
                                        v811 = (void *)(*(_QWORD *)(*(_QWORD *)(a6 + 80) + 24) ^ *(_QWORD *)(v809 + 24));
                                      }
                                      DWORD2(v1090) = v810;
                                      *(_QWORD *)&v1090 = v811;
                                    }
                                    else
                                    {
                                      if (v798 != 56)
                                        goto LABEL_1092;
                                      v799 = *(_QWORD *)(v1088 + 48);
                                      if (!v799 || *(_QWORD *)(v799 + 32))
                                        goto LABEL_1092;
                                      v801 = *((_QWORD *)&v1089 + 1);
                                      v800 = (llvm *)v1089;
                                      v802 = *v794;
                                      v803 = v794[1];
                                      v804 = *(_QWORD *)(a6 + 80);
                                      v805 = *(unsigned int *)(v804 + 32);
                                      if (v805 >= 0x41)
                                      {
                                        v807 = (void *)operator new[]();
                                        memcpy(v807, *(const void **)(v804 + 24), ((unint64_t)(v805 + 63) >> 3) & 0x3FFFFFF8);
                                        v874 = 0;
                                        v875 = *(unint64_t **)(*(_QWORD *)(v795 + 80) + 24);
                                        v876 = (unint64_t)(v805 + 63) >> 6;
                                        v877 = (unint64_t *)v807;
                                        v878 = v876;
                                        do
                                        {
                                          v879 = *v875++;
                                          v880 = *v877 - v879;
                                          v881 = *v877 < v879;
                                          v882 = *v877 + ~v879;
                                          if (v874)
                                          {
                                            v874 = v882 >= *v877;
                                          }
                                          else
                                          {
                                            v882 = v880;
                                            v874 = v881;
                                          }
                                          *v877++ = v882;
                                          --v878;
                                        }
                                        while (v878);
                                        *((_QWORD *)v807 + (v876 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v805;
                                        v793 = v1088;
                                      }
                                      else
                                      {
                                        v806 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v805;
                                        if (!(_DWORD)v805)
                                          v806 = 0;
                                        v807 = (void *)(v806 & (*(_QWORD *)(v804 + 24)
                                                              - *(_QWORD *)(*(_QWORD *)(v795 + 80) + 24)));
                                      }
                                      DWORD2(v1090) = v805;
                                      *(_QWORD *)&v1090 = v807;
                                    }
                                    v887 = (uint64_t *)(*(_QWORD *)(v793 + 40) + 16 * DWORD2(v1088));
                                    v888 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1090, a11, *v887, v887[1], 0, 0);
                                    v890 = v889;
                                    v891 = sub_1C6367818((_QWORD *)v1046, v1087);
                                    v894 = *(_QWORD *)(v1046 + 832);
                                    if (v894)
                                      LOWORD(v894) = *(_WORD *)(v894 + 8);
                                    v856 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, v800, v801, v802, v803, v893, v888, v890, v891, v892, SHIDWORD(v892), v894);
LABEL_1166:
                                    v895 = v856;
                                    if (DWORD2(v1090) < 0x41)
                                      return v895;
                                    v896 = v1090;
                                    if (!(_QWORD)v1090)
                                      return v895;
                                    goto LABEL_1168;
                                  }
                                }
LABEL_1033:
                                if ((v743 - 61) <= 1)
                                {
                                  v782 = v142[6];
                                  if (v782)
                                  {
                                    v783 = 1;
                                    do
                                    {
                                      if (*(_DWORD *)(v782 + 8) == DWORD2(v1088))
                                      {
                                        if (!v783)
                                          goto LABEL_1148;
                                        --v783;
                                      }
                                      v782 = *(_QWORD *)(v782 + 32);
                                    }
                                    while (v782);
                                    if (!v783 && (v1087 == 22 || v1087 == 17))
                                    {
                                      v785 = *(_QWORD *)(**(_QWORD **)(v1046 + 40) + 112);
                                      if (((*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, v1089, *((_QWORD *)&v1089 + 1), v785) & 1) == 0&& (!v785 || (*(char *)(v785 + 13) & 0x80000000) == 0))
                                      {
                                        v786 = *(unsigned __int16 *)(v1088 + 24);
                                        if (v786 == 61)
                                        {
                                          v20 = sub_1C63772E4((uint64_t *)a1, v1089, *((_BOOL8 *)&v1089 + 1), v1088, DWORD2(v1088), a6, a7, v1087, (uint64_t *)a10, a11);
                                          if (v20)
                                            return v20;
                                        }
                                        else if (v786 == 62)
                                        {
                                          v20 = sub_1C637720C((uint64_t *)a1, v1089, *((_BOOL8 *)&v1089 + 1), v1088, DWORD2(v1088), a6, a7, v1087, (uint64_t *)a10, a11);
                                          if (v20)
                                            return v20;
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_1148:
                                v1090 = *(_OWORD *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
                                if (sub_1C6131264((unsigned __int8 *)&v1090, v743, v393) != 2)
                                  return 0;
                                v308 = 0;
                                if (a9)
                                  __asm { BR              X10 }
                                return v308;
                              }
                              v769 = (v758 & 8) == 0;
                              v770 = 5;
                              v771 = 3;
                            }
LABEL_1004:
                            if (v769)
                              v770 = v771;
                            if ((a1[23 * v770 + 42897 + v751] & v752) == 0)
                            {
                              v289 = *((_QWORD *)&v1089 + 1);
                              v288 = (llvm *)v1089;
                              v148 = *((_QWORD *)&v1088 + 1);
                              v772 = sub_1C6367818((_QWORD *)v1046, v770);
                              v774 = *(_QWORD *)(v1046 + 832);
                              if (v774)
                                LOWORD(v774) = *(_WORD *)(v774 + 8);
                              v1021 = v773;
                              v1023 = v774;
                              *((_QWORD *)&v1016 + 1) = a7;
                              v1019 = v772;
                              *(_QWORD *)&v1016 = a6;
LABEL_335:
                              v54 = a11;
                              v53 = v1046;
                              v51 = v288;
                              v52 = v289;
                              goto LABEL_336;
                            }
                            goto LABEL_1010;
                          }
                          v427 = *(_QWORD *)(v421 + 80);
                          v428 = (const void **)(v427 + 24);
                          v429 = *(unsigned int *)(v427 + 32);
                          if (v429 <= 0x40)
                          {
                            v430 = *v428;
LABEL_843:
                            v657 = (uint8x8_t)vcnt_s8((int8x8_t)v430);
                            v657.i16[0] = vaddlv_u8(v657);
                            if (v657.u32[0] != 1)
                              goto LABEL_905;
                            v658 = v429 + __clz((unint64_t)v430) - 64;
LABEL_904:
                            v719 = (v429 + ~v658);
                            if (((*(uint64_t (**)(uint64_t, llvm *, uint64_t, uint64_t))(*(_QWORD *)v396 + 1456))(v396, v400, v399, v719) & 1) != 0)goto LABEL_905;
                            v830 = v1089;
                            v831 = v1088;
                            v832 = sub_1C6366AB4(v1046, v719, a11, ShiftAmountTy, (uint64_t)v1049, 0, 0);
                            v835 = *(_QWORD *)(v1046 + 832);
                            if (v835)
                              LOWORD(v835) = *(_WORD *)(v835 + 8);
                            v126 = sub_1C5D56C70(v1046, 177, a11, v400, v399, v831, *((unint64_t *)&v831 + 1), v834, (uint64_t)v832, v833, v835);
                            v127 = v836;
                            v837 = *(_QWORD *)(v1046 + 832);
                            if (v837)
                              v130 = *(_WORD *)(v837 + 8);
                            else
                              v130 = 0;
                            v131 = a11;
                            v128 = v1046;
                            v125 = *((_QWORD *)&v830 + 1);
                            v124 = (llvm *)v830;
                            return sub_1C5D52060(v128, 201, v131, v124, v125, (uint64_t)v126, v127, v130);
                          }
                          v658 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v427 + 24));
                          v680 = 0;
                          v715 = (unint64_t)(v429 + 63) >> 6;
                          v716 = (int8x8_t *)*v428;
                          do
                          {
                            v717 = *v716++;
                            v718 = (uint8x8_t)vcnt_s8(v717);
                            v718.i16[0] = vaddlv_u8(v718);
                            v680 += v718.i32[0];
                            --v715;
                          }
                          while (v715);
                        }
                        if (v680 != 1)
                          goto LABEL_905;
                        goto LABEL_904;
                      }
                      switch(v1087)
                      {
                        case 0xAu:
                          v519 = *(_DWORD *)(v404 + 32);
                          if (v519 <= 0x40)
                          {
                            v520 = *v1048;
                            v521 = ~(-1 << (v519 - 1));
                            goto LABEL_810;
                          }
                          v1013 = v519 - 1;
                          if (((*((_QWORD *)*v1048 + ((v519 - 1) >> 6)) >> (v519 - 1)) & 1) != 0)
                            goto LABEL_1331;
                          v1015 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1048);
                          goto LABEL_1347;
                        case 0xBu:
                          v643 = *(_DWORD *)(v404 + 32);
                          if (v643 > 0x40)
                          {
                            v1013 = v643 - 1;
                            if (((*((_QWORD *)*v1048 + ((v643 - 1) >> 6)) >> (v643 - 1)) & 1) == 0)
                              goto LABEL_1331;
                            v1015 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1048);
LABEL_1347:
                            if (v1015 != v1013)
                              goto LABEL_1331;
                          }
                          else
                          {
                            v520 = *v1048;
                            v521 = 1 << (v643 - 1);
LABEL_810:
                            if (v520 != (const void *)v521)
                              goto LABEL_1331;
                          }
                          v473 = *((_QWORD *)&v1089 + 1);
                          v472 = (llvm *)v1089;
                          v475 = *((_QWORD *)&v1088 + 1);
                          v474 = v1088;
                          v644 = *(_QWORD *)(a6 + 40) + 16 * a7;
                          v637 = v1046;
                          v638 = (uint64_t)sub_1C6366AB4(v1046, 0, a11, *(llvm **)v644, *(_QWORD *)(v644 + 8), 0, 0);
                          v640 = v645;
                          v641 = (_QWORD *)v1046;
                          v642 = 20;
                          goto LABEL_812;
                        case 0xCu:
                          v632 = *(_DWORD *)(v404 + 32);
                          if (v632 <= 0x40)
                          {
                            v633 = *v1048;
                            v634 = 1 << (v632 - 1);
                            goto LABEL_806;
                          }
                          v1011 = v632 - 1;
                          if (((*((_QWORD *)*v1048 + ((v632 - 1) >> 6)) >> (v632 - 1)) & 1) == 0)
                            goto LABEL_1331;
                          v1012 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1048);
                          goto LABEL_1351;
                        case 0xDu:
                          v635 = *(_DWORD *)(v404 + 32);
                          if (v635 > 0x40)
                          {
                            v1011 = v635 - 1;
                            if (((*((_QWORD *)*v1048 + ((v635 - 1) >> 6)) >> (v635 - 1)) & 1) != 0)
                              goto LABEL_1331;
                            v1012 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1048);
LABEL_1351:
                            if (v1012 != v1011)
                              goto LABEL_1331;
                          }
                          else
                          {
                            v633 = *v1048;
                            v634 = ~(-1 << (v635 - 1));
LABEL_806:
                            if (v633 != (const void *)v634)
                              goto LABEL_1331;
                          }
                          v473 = *((_QWORD *)&v1089 + 1);
                          v472 = (llvm *)v1089;
                          v475 = *((_QWORD *)&v1088 + 1);
                          v474 = v1088;
                          v636 = *(_QWORD *)(a6 + 40) + 16 * a7;
                          v637 = v1046;
                          v638 = sub_1C63293BC(v1046, a11, *(_QWORD *)v636, *(_QWORD *)(v636 + 8), 0, 0);
                          v640 = v639;
                          v641 = (_QWORD *)v1046;
                          v642 = 18;
LABEL_812:
                          v646 = sub_1C6367818(v641, v642);
                          v648 = *(_QWORD *)(v637 + 832);
                          if (v648)
                            LOWORD(v648) = *(_WORD *)(v648 + 8);
                          v1022 = v647;
                          v1024 = v648;
                          v1018 = v640;
                          v1020 = v646;
                          v1017 = v638;
                          goto LABEL_815;
                        default:
                          goto LABEL_1331;
                      }
                    }
                    v492 = v489 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v488;
                  }
                  if (!v490 && !v492)
                    goto LABEL_655;
                  goto LABEL_630;
                }
              }
              else
              {
                v466 = (void *)*v1048;
                if (*v1048 != v413)
                  goto LABEL_581;
              }
LABEL_584:
              v439 = (uint64_t)sub_1C6366AB4(v1046, 0, a11, (llvm *)v1089, *((uint64_t *)&v1089 + 1), 0, 0);
              goto LABEL_648;
            }
          }
LABEL_521:
          v439 = sub_1C6366888(v1046, 1, a11, v1089, *((uint64_t *)&v1089 + 1), (char)v1085, v1086);
LABEL_648:
          v308 = (uint64_t *)v439;
          goto LABEL_649;
        }
        sub_1C6368768(v1046, **(_QWORD **)(v339 + 32), *(_QWORD *)(*(_QWORD *)(v339 + 32) + 8), 0, (uint64_t)&v1090);
        sub_1C6368768(v1046, *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1088 + 32) + 48), 0, (uint64_t)&v1095);
        if (DWORD2(v1090) > 0x40)
        {
          v345 = 0;
          v346 = ((unint64_t)DWORD2(v1090) + 63) >> 6;
          v347 = (int8x8_t *)v1090;
          do
          {
            v348 = *v347++;
            v349 = (uint8x8_t)vcnt_s8(v348);
            v349.i16[0] = vaddlv_u8(v349);
            v345 += v349.i32[0];
            --v346;
          }
          while (v346);
        }
        else
        {
          v344 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v1090);
          v344.i16[0] = vaddlv_u8(v344);
          v345 = v344.i32[0];
        }
        if (DWORD2(v1090) - v345 == 1)
        {
          v350 = v1097;
          if (v1097 > 0x40)
          {
            v352 = 0;
            v353 = ((unint64_t)v1097 + 63) >> 6;
            v354 = v1096;
            do
            {
              v355 = *v354++;
              v356 = (uint8x8_t)vcnt_s8(v355);
              v356.i16[0] = vaddlv_u8(v356);
              v352 += v356.i32[0];
              --v353;
            }
            while (v353);
          }
          else
          {
            v351 = (uint8x8_t)vcnt_s8((int8x8_t)v1096);
            v351.i16[0] = vaddlv_u8(v351);
            v352 = v351.i32[0];
          }
          if (v352 >= 2)
          {
            v357 = v1089;
            v358 = *(uint64_t **)(v1088 + 32);
            v359 = *v358;
            v360 = v358[1];
            v361 = sub_1C6367818((_QWORD *)v1046, v1087);
            v364 = *(_QWORD *)(v1046 + 832);
            if (v364)
              LOWORD(v364) = *(_WORD *)(v364 + 8);
            v308 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v357, *((uint64_t *)&v357 + 1), v359, v360, v363, a6, a7, v361, v362, SHIDWORD(v362), v364);
            if (v1097 >= 0x41 && v1096)
            {
              v974 = v308;
              MEMORY[0x1CAA32F9C](v1096, 0x1000C8000313F17);
              v308 = v974;
            }
            if (DWORD2(v1095) >= 0x41 && (_QWORD)v1095)
            {
              v975 = v308;
              MEMORY[0x1CAA32F9C](v1095, 0x1000C8000313F17);
              v308 = v975;
            }
            if (DWORD2(v1091) >= 0x41 && (_QWORD)v1091)
            {
              v976 = v308;
              MEMORY[0x1CAA32F9C](v1091, 0x1000C8000313F17);
              v308 = v976;
            }
            if (DWORD2(v1090) < 0x41)
              return v308;
            v310 = v1090;
            if (!(_QWORD)v1090)
              return v308;
LABEL_654:
            v508 = v308;
            MEMORY[0x1CAA32F9C](v310, 0x1000C8000313F17);
            return v508;
          }
        }
        else
        {
          v350 = v1097;
        }
        if (v350 >= 0x41 && v1096)
          MEMORY[0x1CAA32F9C](v1096, 0x1000C8000313F17);
        if (DWORD2(v1095) >= 0x41 && (_QWORD)v1095)
          MEMORY[0x1CAA32F9C](v1095, 0x1000C8000313F17);
        if (DWORD2(v1091) >= 0x41 && (_QWORD)v1091)
          MEMORY[0x1CAA32F9C](v1091, 0x1000C8000313F17);
        if (DWORD2(v1090) >= 0x41 && (_QWORD)v1090)
          MEMORY[0x1CAA32F9C](v1090, 0x1000C8000313F17);
      }
LABEL_411:
      v343 = v1087;
      goto LABEL_412;
    }
LABEL_183:
    v167 = *(_QWORD *)(v29 + 80);
    v168 = (llvm::APInt *)(v167 + 24);
    v169 = *(_DWORD *)(v167 + 32);
    if (v169 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v168) != v169 - 1)
        goto LABEL_381;
    }
    else if (*(_QWORD *)v168 != 1)
    {
      goto LABEL_381;
    }
    v170 = *((_QWORD *)&v1088 + 1);
    if (v154 == 201)
    {
      v171 = (unsigned int *)v115[4];
      v115 = *(uint64_t **)v171;
      v170 = *((_QWORD *)&v1088 + 1) & 0xFFFFFFFF00000000 | v171[2];
      v154 = *(unsigned __int16 *)(*(_QWORD *)v171 + 24);
    }
    if (v154 == 173)
    {
      v172 = (uint64_t **)v115[4];
      v142 = *v172;
      if (*((_WORD *)*v172 + 12) == 193)
      {
        v173 = v172[5];
        if (*((_WORD *)v173 + 12) == 193)
        {
          v148 = (uint64_t)v172[1];
          v174 = v172[6];
          if (*(_BYTE *)(v115[5] + 16 * v170) == 2
            || (v314 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v142[4] + 40) + 16 * *(unsigned int *)(v142[4] + 8)),
                sub_1C6329468(a1, *v314, v314[1]) == 1)
            && (v315 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v173[4] + 40) + 16 * *(unsigned int *)(v173[4] + 8)),
                sub_1C6329468(a1, *v315, v315[1]) == 1))
          {
            if (v1087 == 17)
              v175 = 22;
            else
              v175 = 17;
            v1087 = v175;
            v147 = *((_QWORD *)&v1089 + 1);
            v146 = (llvm *)v1089;
            goto LABEL_197;
          }
        }
      }
      v154 = *((unsigned __int16 *)v115 + 12);
    }
    if (v154 == 4)
    {
      if (*(_BYTE *)(*(_QWORD *)(v115[4] + 40) + 80) != 2)
        goto LABEL_381;
      v330 = *((_QWORD *)&v1089 + 1);
      v329 = (llvm *)v1089;
      v331 = v115[5] + 16 * v170;
      v332 = sub_1C6366AB4(v1046, 0, a11, *(llvm **)v331, *(_QWORD *)(v331 + 8), 0, 0);
      v334 = v333;
      if (v1087 == 17)
        v335 = 22;
      else
        v335 = 17;
      v336 = sub_1C6367818((_QWORD *)v1046, v335);
      v338 = *(_QWORD *)(v1046 + 832);
      if (!v338)
      {
LABEL_728:
        v1021 = v337;
        v1023 = v338;
        *((_QWORD *)&v1016 + 1) = v334;
        v1019 = v336;
        *(_QWORD *)&v1016 = v332;
        v54 = a11;
        v53 = v1046;
        v51 = v329;
        v52 = v330;
        v50 = (uint64_t)v115;
        v55 = v170;
        return sub_1C5D58E08(v53, (const char *)0xC1, v54, v51, v52, v50, v55, v48, v1016, *((uint64_t *)&v1016 + 1), v1019, v1021, SHIDWORD(v1021), v1023);
      }
LABEL_727:
      LOWORD(v338) = *(_WORD *)(v338 + 8);
      goto LABEL_728;
    }
    if (v154 != 171 || !sub_1C636F474(*(_QWORD *)(v115[4] + 40)))
      goto LABEL_381;
    v316 = (uint64_t *)(v115[5] + 16 * v170);
    v318 = *v316;
    v317 = v316[1];
    *(_QWORD *)&v1090 = v318;
    *((_QWORD *)&v1090 + 1) = v317;
    v319 = *((_QWORD *)&v1089 + 1);
    v320 = v1089;
    v321 = v318;
    if (v318 == v1089 && ((_BYTE)v318 || v317 == *((_QWORD *)&v1089 + 1)))
    {
      *(_QWORD *)&v1095 = v318;
      *((_QWORD *)&v1095 + 1) = v317;
    }
    else
    {
      if (sub_1C50989E0((unsigned __int8 *)&v1090, v1089, *((uint64_t *)&v1089 + 1)))
      {
        v323 = *((_QWORD *)&v1089 + 1);
        v322 = (llvm *)v1089;
        v324 = (uint64_t *)v115[4];
        v325 = *v324;
        v326 = v324[1];
        v327 = *(_QWORD *)(v1046 + 832);
        if (v327)
          v328 = *(_WORD *)(v327 + 8);
        else
          v328 = 0;
        v522 = v1046;
        v523 = v1046;
        v524 = 201;
LABEL_720:
        v567 = sub_1C5D52060(v523, v524, a11, v322, v323, v325, v326, v328);
        v569 = v568;
        v570 = sub_1C6366AB4(v522, 1, a11, (llvm *)v1089, *((uint64_t *)&v1089 + 1), 0, 0);
        v573 = *(_QWORD *)(v522 + 832);
        if (v573)
          LOWORD(v573) = *(_WORD *)(v573 + 8);
        v516 = a11;
        v517 = (_QWORD *)v1046;
        v115 = sub_1C5D56C70(v1046, 171, a11, v322, v323, (uint64_t)v567, v569, v572, (uint64_t)v570, v571, v573);
        v170 = v170 & 0xFFFFFFFF00000000 | v574;
LABEL_723:
        v330 = *((_QWORD *)&v1089 + 1);
        v329 = (llvm *)v1089;
        v575 = v115[5] + 16 * v170;
        v332 = sub_1C6366AB4((uint64_t)v517, 0, v516, *(llvm **)v575, *(_QWORD *)(v575 + 8), 0, 0);
        v334 = v576;
        if (v1087 == 17)
          v577 = 22;
        else
          v577 = 17;
        v336 = sub_1C6367818(v517, v577);
        v338 = v517[104];
        if (!v338)
          goto LABEL_728;
        goto LABEL_727;
      }
      v431 = (uint64_t *)(v115[5] + 16 * v170);
      v432 = *v431;
      v317 = v431[1];
      v319 = *((_QWORD *)&v1089 + 1);
      v320 = v1089;
      v321 = v1089;
      *(_QWORD *)&v1095 = v432;
      *((_QWORD *)&v1095 + 1) = v317;
      if (v1089 != v432)
      {
        v1090 = v1089;
        if ((_BYTE)v432)
        {
          v433 = sub_1C47A8C74((unsigned __int8 *)&v1095);
          goto LABEL_662;
        }
LABEL_661:
        v433 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1095);
LABEL_662:
        v510 = v433;
        v511 = v434;
        if ((_BYTE)v320)
          v512 = sub_1C47A8C74((unsigned __int8 *)&v1090);
        else
          v512 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1090);
        if ((v511 != 1 || v513 == 1) && v510 < v512)
        {
          v323 = *((_QWORD *)&v1089 + 1);
          v322 = (llvm *)v1089;
          v514 = (uint64_t *)v115[4];
          v325 = *v514;
          v326 = v514[1];
          v515 = *(_QWORD *)(v1046 + 832);
          if (v515)
            v328 = *(_WORD *)(v515 + 8);
          else
            v328 = 0;
          v522 = v1046;
          v523 = v1046;
          v524 = 200;
          goto LABEL_720;
        }
LABEL_669:
        v516 = a11;
        v517 = (_QWORD *)v1046;
        goto LABEL_723;
      }
    }
    if (v321 || v317 == v319)
      goto LABEL_669;
    *(_QWORD *)&v1090 = v320;
    *((_QWORD *)&v1090 + 1) = v319;
    goto LABEL_661;
  }
  v29 = a6;
  if (v1087 != 22 && v1087 != 17
    || ((*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, llvm *, uint64_t))(*(_QWORD *)a1 + 1208))(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40) + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40) + 88), v1085, v1086) & 1) != 0)
  {
    goto LABEL_129;
  }
  v1090 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v1088 + 32) + 40) + 80);
  if ((_BYTE)v1090)
    v187 = sub_1C47A8C74((unsigned __int8 *)&v1090);
  else
    v187 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1090);
  v241 = v187;
  if ((_DWORD)v188 == 1)
  v1095 = *(_OWORD *)(*(_QWORD *)(v1088 + 40) + 16 * DWORD2(v1088));
  if ((_BYTE)v1095)
    v242 = sub_1C47A8C74((unsigned __int8 *)&v1095);
  else
    v242 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1095);
  v244 = v242;
  if ((_DWORD)v243 == 1)
  v245 = *(_DWORD *)(v97 + 32);
  if (v245 - sub_1C4959174((llvm::APInt *)(v97 + 24)) + 1 > v241)
  {
    v246 = v1087 == 22;
    v248 = *((_QWORD *)&v1089 + 1);
    v247 = v1089;
    v249 = (char)v1085;
    v250 = v1086;
    v251 = v1046;
    return (uint64_t *)sub_1C6366888(v251, v246, a11, v247, v248, v249, v250);
  }
  LODWORD(v1082) = v244;
  if (v244 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v1081, 0, 0);
  else
    v1081 = 0;
  sub_1C4912E54(&v1081, 0, v241);
  v252 = v1095;
  v253 = *(uint64_t **)(v1088 + 32);
  v254 = *v253;
  v255 = v253[1];
  v256 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1081, a11, v1095, *((uint64_t *)&v1095 + 1), 0, 0);
  v259 = *(_QWORD *)(v1046 + 832);
  if (v259)
    LOWORD(v259) = *(_WORD *)(v259 + 8);
  v260 = sub_1C5D56C70(v1046, 171, a11, (llvm *)v252, *((uint64_t *)&v252 + 1), v254, v255, v258, v256, v257, v259);
  v262 = v261;
  if (!*(_BYTE *)(a10 + 12))
    sub_1C5C5B004(*(_QWORD *)a10, (uint64_t)v260);
  v263 = v1089;
  v264 = *(unsigned int *)(v97 + 32);
  if (v264 > 0x40)
  {
    v265 = (void *)operator new[]();
    memcpy(v265, (const void *)*v98, ((unint64_t)(v264 + 63) >> 3) & 0x3FFFFFF8);
    v297 = (uint64_t *)v1081;
    v298 = (unint64_t)(v264 + 63) >> 6;
    v299 = v265;
    do
    {
      v300 = *v297++;
      *v299++ &= v300;
      --v298;
    }
    while (v298);
  }
  else
  {
    v265 = (void *)(v1081 & *v98);
  }
  LODWORD(v1079) = v264;
  v1078 = (uint64_t)v265;
  v301 = sub_1C63666FC(v1046, (llvm::LLVMContext *)&v1078, a11, v1095, *((uint64_t *)&v1095 + 1), 0, 0);
  v303 = v302;
  v304 = sub_1C6367818((_QWORD *)v1046, v1087);
  v307 = *(_QWORD *)(v1046 + 832);
  if (v307)
    LOWORD(v307) = *(_WORD *)(v307 + 8);
  v308 = sub_1C5D58E08(v1046, (const char *)0xC1, a11, (llvm *)v263, *((uint64_t *)&v263 + 1), (uint64_t)v260, v262, v306, v301, v303, v304, v305, SHIDWORD(v305), v307);
  if (v1079 >= 0x41 && v1078)
  {
    v309 = v308;
    MEMORY[0x1CAA32F9C](v1078, 0x1000C8000313F17);
    v308 = v309;
  }
  if (v1082 >= 0x41)
  {
    v310 = v1081;
    if (v1081)
      goto LABEL_654;
  }
  return v308;
}

uint64_t sub_1C5D924EC(uint64_t *a1, uint64_t a2, _BOOL8 a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD v38[2];

  v38[0] = a2;
  v38[1] = a3;
  v8 = sub_1C6329368((unsigned int *)v38, a2, a3);
  v9 = v8;
  if (*(_WORD *)(v38[0] + 24) != 172 || (v8 & 1) != 0)
    return 0;
  v12 = *(uint64_t **)(v38[0] + 32);
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[5];
  v35 = v12[6];
  v16 = v8 >> 1;
  v37 = v8;
  if (v8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, 0, 0);
    v9 = v37;
  }
  else
  {
    v36 = 0;
  }
  sub_1C4912E54(&v36, v9 - v16, v9);
  if (*(_WORD *)(v15 + 24) == 175)
  {
    v17 = (uint64_t **)(v15 + 32);
    v18 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40);
    v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 == 35 || v19 == 11)
    {
      v21 = *(_QWORD *)(v18 + 80);
      v22 = (_QWORD *)(v21 + 24);
      v23 = *(_DWORD *)(v21 + 32);
      if (v23 >= 0x41)
      {
        if (v23 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v21 + 24)) > 0x40)
          goto LABEL_18;
        v22 = (_QWORD *)*v22;
      }
      if (*v22 == v16 && sub_1C63686D8(*a1, v13, v14, (uint64_t)&v36, 0))
      {
        v15 = v13;
        goto LABEL_36;
      }
    }
  }
LABEL_18:
  if (*(_WORD *)(v13 + 24) != 175)
    goto LABEL_28;
  v25 = *(_QWORD *)(v13 + 32);
  v24 = (uint64_t **)(v13 + 32);
  v26 = *(_QWORD *)(v25 + 40);
  v27 = *(unsigned __int16 *)(v26 + 24);
  if (v27 != 35 && v27 != 11)
    goto LABEL_28;
  v29 = *(_QWORD *)(v26 + 80);
  v30 = (_QWORD *)(v29 + 24);
  v31 = *(_DWORD *)(v29 + 32);
  if (v31 < 0x41)
    goto LABEL_27;
  if (v31 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v29 + 24)) <= 0x40)
  {
    v30 = (_QWORD *)*v30;
LABEL_27:
    if (*v30 != v16)
      goto LABEL_28;
    LODWORD(v14) = v35;
    v33 = sub_1C63686D8(*a1, v15, v35, (uint64_t)&v36, 0);
    v11 = 0;
    v17 = v24;
    if (!v33)
      goto LABEL_29;
LABEL_36:
    *(_QWORD *)a4 = v15;
    *(_DWORD *)(a4 + 8) = v14;
    v34 = **v17;
    *(_DWORD *)(a5 + 8) = *((_DWORD *)*v17 + 2);
    *(_QWORD *)a5 = v34;
    v11 = 1;
    goto LABEL_29;
  }
LABEL_28:
  v11 = 0;
LABEL_29:
  if (v37 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  return v11;
}

uint64_t *sub_1C5D9270C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  const llvm::APInt *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  llvm *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void *v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  void *__src;
  unsigned int v56;

  v10 = sub_1C6329368(*(unsigned int **)a1, a2, a3);
  v11 = v10 >> 1;
  v56 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v10 = v56;
  }
  else
  {
    __src = 0;
  }
  sub_1C4912E54(&__src, v10 - v11, v10);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v56;
  v52 = v56;
  if (v56 > 0x40)
  {
    v16 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
    v51 = (void *)operator new[]();
    memcpy(v51, __src, v16);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v51);
    v13 = v52;
    v15 = (unint64_t)v51;
  }
  else
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
    if (!v56)
      v14 = 0;
    v15 = v14 & ~(unint64_t)__src;
  }
  v54 = v13;
  v53 = v15;
  v18 = sub_1C63666FC(v12, (llvm::LLVMContext *)&v53, *(const llvm::APInt **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0, 0);
  v20 = v19;
  if (v54 >= 0x41 && v53)
    MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(llvm **)v22;
  v24 = *(_QWORD *)(v22 + 8);
  v25 = *(_QWORD *)(v21 + 832);
  if (v25)
    LOWORD(v25) = *(_WORD *)(v25 + 8);
  v26 = sub_1C5D56C70(v21, 171, *(const llvm::APInt **)(a1 + 16), v23, v24, a4, a5, v17, v18, v20, v25);
  v29 = *(_QWORD *)(a1 + 24);
  if (**(_BYTE **)(a1 + 32))
    v30 = 172;
  else
    v30 = 171;
  v31 = *(_QWORD *)(a1 + 8);
  v32 = *(llvm **)v29;
  v33 = *(_QWORD *)(v29 + 8);
  v34 = *(_QWORD *)(v31 + 832);
  if (v34)
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  v35 = sub_1C5D56C70(v31, v30, *(const llvm::APInt **)(a1 + 16), v32, v33, a2, a3, v28, (uint64_t)v26, v27, v34);
  v37 = v36;
  if (**(_BYTE **)(a1 + 32))
  {
    v18 = (uint64_t)sub_1C6366AB4(*(_QWORD *)(a1 + 8), 0, *(const llvm::APInt **)(a1 + 16), **(llvm ***)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0, 0);
    v20 = v38;
  }
  v39 = *(_QWORD **)(a1 + 8);
  v40 = *(const llvm::APInt **)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 40);
  v42 = *(unsigned int **)(a1 + 48);
  v44 = *(llvm **)v41;
  v43 = *(_QWORD *)(v41 + 8);
  v45 = sub_1C6367818(v39, *v42);
  v48 = v39[104];
  if (v48)
    LOWORD(v48) = *(_WORD *)(v48 + 8);
  v49 = sub_1C5D58E08((uint64_t)v39, (const char *)0xC1, v40, v44, v43, (uint64_t)v35, v37, v47, v18, v20, v45, v46, SHIDWORD(v46), v48);
  if (v56 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v49;
}

uint64_t sub_1C5D929A0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  int v18;
  unsigned int v20;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1712))(a1, a2, 0);
  result = 0;
  v9 = *(unsigned __int16 *)(v7 + 24);
  if (v9 <= 0x38)
  {
    if (((1 << v9) & 0x6000006000) != 0)
    {
      v11 = *(_QWORD *)(v7 + 80);
      v10 = *(_QWORD *)(v7 + 88);
      *a3 = v11;
LABEL_4:
      *a4 += v10;
      return 1;
    }
    if (v9 == 56)
    {
      v12 = *(_QWORD **)(v7 + 32);
      v13 = *v12;
      v14 = v12[5];
      if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 1720))(a1, *v12, a3, a4))
      {
        v15 = *(unsigned __int16 *)(v14 + 24);
        if (v15 != 35 && v15 != 11)
          return 0;
        v17 = *(_QWORD *)(v14 + 80);
LABEL_21:
        v20 = *(_DWORD *)(v17 + 32);
        if (v20 > 0x40)
          v10 = **(_QWORD **)(v17 + 24);
        else
          v10 = (uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v20) >> -(char)v20;
        goto LABEL_4;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 1720))(a1, v14, a3, a4);
      if ((_DWORD)result)
      {
        v18 = *(unsigned __int16 *)(v13 + 24);
        if (v18 != 35 && v18 != 11)
          return 0;
        v17 = *(_QWORD *)(v13 + 80);
        goto LABEL_21;
      }
    }
  }
  return result;
}

void sub_1C5D92ADC(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  char v6;
  int v7;
  unint64_t v8;
  char *v9;
  int v10;
  uint64_t i;
  uint64_t v17;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  int v93;
  unsigned __int8 *v94;
  int v95;

  v6 = *(_BYTE *)(a4 + 23);
  v7 = v6;
  v8 = v6 & 0x7E;
  if (v7 < 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 > 1)
    return;
  v9 = v7 >= 0 ? (char *)a4 : *(char **)a4;
  v10 = *v9;
  if ((v10 - 88) > 0x1B || ((1 << (v10 - 88)) & 0x8420001) == 0)
    return;
  for (i = 0; ; i += v30)
  {
    v17 = *(unsigned __int16 *)(a2 + 24);
    if ((_DWORD)v17 == 35 || (_DWORD)v17 == 11)
    {
      if (v10 == 115)
        goto LABEL_20;
      v75 = *(_DWORD *)(*(_QWORD *)(a2 + 80) + 32);
      v76 = sub_1C6329468(a1, 6, 0);
      v77 = *(_QWORD *)(a2 + 80);
      v78 = (uint64_t *)(v77 + 24);
      v79 = *(_DWORD *)(v77 + 32);
      if (v75 == 1 && v76 == 1)
      {
        if (v79 < 0x41)
        {
LABEL_109:
          v81 = *v78;
LABEL_110:
          v82 = v81 + i;
          v83 = *(unsigned __int8 **)(a2 + 64);
          v94 = v83;
          if (v83)
            llvm::MetadataTracking::track((uint64_t)&v94, v83, 2);
          v95 = *(_DWORD *)(a2 + 60);
          v33 = sub_1C6366AB4(a6, v82, (const llvm::APInt *)&v94, (llvm *)6, 0, 1, 0);
          v35 = v84;
          v37 = a5[1];
          v85 = (unint64_t)a5[2];
          if ((unint64_t)v37 < v85)
          {
LABEL_48:
            *(_QWORD *)v37 = v33;
            *((_QWORD *)v37 + 1) = v35;
            v38 = v37 + 16;
          }
          else
          {
            v86 = *a5;
            v87 = (v37 - *a5) >> 4;
            v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 60)
              goto LABEL_126;
            v89 = v85 - (_QWORD)v86;
            if (v89 >> 3 > v88)
              v88 = v89 >> 3;
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
              v90 = 0xFFFFFFFFFFFFFFFLL;
            else
              v90 = v88;
            if (v90)
            {
              if (v90 >> 60)
                goto LABEL_127;
              v91 = (char *)operator new(16 * v90);
            }
            else
            {
              v91 = 0;
            }
            v59 = &v91[16 * v87];
            v60 = &v91[16 * v90];
            *(_QWORD *)v59 = v33;
            *((_QWORD *)v59 + 1) = v35;
            v38 = v59 + 16;
            if (v37 != v86)
            {
              do
              {
                v92 = *((_QWORD *)v37 - 2);
                v37 -= 16;
                v93 = *((_DWORD *)v37 + 2);
                *((_QWORD *)v59 - 2) = v92;
                v59 -= 16;
                *((_DWORD *)v59 + 2) = v93;
              }
              while (v37 != v86);
LABEL_75:
              v37 = *a5;
            }
LABEL_76:
            *a5 = v59;
            a5[1] = v38;
            a5[2] = v60;
            if (v37)
              operator delete(v37);
          }
          a5[1] = v38;
          if (v94)
            llvm::MetadataTracking::untrack((uint64_t)&v94, v94);
          return;
        }
      }
      else if (v79 <= 0x40)
      {
        v81 = *v78 << -(char)v79 >> -(char)v79;
        goto LABEL_110;
      }
      v78 = (uint64_t *)*v78;
      goto LABEL_109;
    }
    if (v10 == 110)
      goto LABEL_24;
LABEL_20:
    if (v17 > 0x2B)
      goto LABEL_24;
    if (((1 << v17) & 0x6000006000) != 0)
    {
      v31 = *(_QWORD *)(a2 + 80);
      v32 = *(unsigned __int8 **)(a2 + 64);
      v94 = v32;
      if (v32)
        llvm::MetadataTracking::track((uint64_t)&v94, v32, 2);
      v95 = *(_DWORD *)(a2 + 60);
      v33 = sub_1C6366FFC(a6, v31, (uint64_t)&v94, **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), *(_QWORD *)(a2 + 88) + i, 1, 0);
      v35 = v34;
      v37 = a5[1];
      v36 = (unint64_t)a5[2];
      if ((unint64_t)v37 < v36)
        goto LABEL_48;
      v45 = *a5;
      v46 = (v37 - *a5) >> 4;
      v47 = v46 + 1;
      if (!((unint64_t)(v46 + 1) >> 60))
      {
        v48 = v36 - (_QWORD)v45;
        if (v48 >> 3 > v47)
          v47 = v48 >> 3;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (!(v49 >> 60))
          {
            v50 = (char *)operator new(16 * v49);
            goto LABEL_73;
          }
LABEL_127:
          sub_1C4764EE4();
        }
        v50 = 0;
LABEL_73:
        v59 = &v50[16 * v46];
        v60 = &v50[16 * v49];
        *(_QWORD *)v59 = v33;
        *((_QWORD *)v59 + 1) = v35;
        v38 = v59 + 16;
        if (v37 != v45)
        {
          do
          {
            v61 = *((_QWORD *)v37 - 2);
            v37 -= 16;
            v62 = *((_DWORD *)v37 + 2);
            *((_QWORD *)v59 - 2) = v61;
            v59 -= 16;
            *((_DWORD *)v59 + 2) = v62;
          }
          while (v37 != v45);
          goto LABEL_75;
        }
        goto LABEL_76;
      }
LABEL_126:
      abort();
    }
    if (((1 << v17) & 0x80000080000) != 0)
    {
      v39 = sub_1C5D431E4(a6, *(_QWORD *)(a2 + 80), **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), *(_QWORD *)(a2 + 88) + i, 1, *(_DWORD *)(a2 + 96));
      v41 = v39;
      v42 = v40;
      v44 = a5[1];
      v43 = (unint64_t)a5[2];
      if ((unint64_t)v44 < v43)
      {
        *(_QWORD *)v44 = v39;
        *((_QWORD *)v44 + 1) = v40;
        goto LABEL_62;
      }
      v53 = *a5;
      v54 = (v44 - *a5) >> 4;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60)
        goto LABEL_126;
      v56 = v43 - (_QWORD)v53;
      if (v56 >> 3 > v55)
        v55 = v56 >> 3;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
        v57 = 0xFFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        if (v57 >> 60)
          goto LABEL_127;
        v58 = (char *)operator new(16 * v57);
      }
      else
      {
        v58 = 0;
      }
      v69 = &v58[16 * v54];
      v70 = &v58[16 * v57];
      *(_QWORD *)v69 = v41;
      *((_QWORD *)v69 + 1) = v42;
      v52 = v69 + 16;
      if (v44 != v53)
      {
        do
        {
          v71 = *((_QWORD *)v44 - 2);
          v44 -= 16;
          v72 = *((_DWORD *)v44 + 2);
          *((_QWORD *)v69 - 2) = v71;
          v69 -= 16;
          *((_DWORD *)v69 + 2) = v72;
        }
        while (v44 != v53);
LABEL_96:
        v44 = *a5;
      }
LABEL_97:
      *a5 = v69;
      a5[1] = v52;
      a5[2] = v70;
      if (v44)
        operator delete(v44);
      goto LABEL_99;
    }
    if (v17 == 6)
      break;
LABEL_24:
    if ((v17 & 0xFFFE) != 0x38)
      return;
    v19 = *(unsigned int **)(a2 + 32);
    v20 = *(_QWORD *)v19;
    v21 = *(unsigned __int16 *)(*(_QWORD *)v19 + 24);
    if (v21 == 35 || v21 == 11)
    {
      a2 = *((_QWORD *)v19 + 5);
      v23 = v19 + 12;
    }
    else
    {
      if ((_DWORD)v17 != 56)
        return;
      v24 = *((_QWORD *)v19 + 5);
      v25 = *(unsigned __int16 *)(v24 + 24);
      if (v25 != 35 && v25 != 11)
        return;
      v23 = v19 + 2;
      a2 = v20;
      v20 = v24;
    }
    v27 = *(_QWORD *)(v20 + 80);
    v28 = *(_DWORD *)(v27 + 32);
    if (v28 > 0x40)
      v29 = **(_QWORD **)(v27 + 24);
    else
      v29 = (uint64_t)(*(_QWORD *)(v27 + 24) << -(char)v28) >> -(char)v28;
    a3 = a3 & 0xFFFFFFFF00000000 | *v23;
    if ((_DWORD)v17 == 56)
      v30 = v29;
    else
      v30 = -v29;
  }
  v44 = a5[1];
  v51 = (unint64_t)a5[2];
  if ((unint64_t)v44 >= v51)
  {
    v63 = *a5;
    v64 = (v44 - *a5) >> 4;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 60)
      goto LABEL_126;
    v66 = v51 - (_QWORD)v63;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
      v67 = 0xFFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 60)
        goto LABEL_127;
      v68 = (char *)operator new(16 * v67);
    }
    else
    {
      v68 = 0;
    }
    v69 = &v68[16 * v64];
    v70 = &v68[16 * v67];
    *(_QWORD *)v69 = a2;
    *((_QWORD *)v69 + 1) = a3;
    v52 = v69 + 16;
    if (v44 != v63)
    {
      do
      {
        v73 = *((_QWORD *)v44 - 2);
        v44 -= 16;
        v74 = *((_DWORD *)v44 + 2);
        *((_QWORD *)v69 - 2) = v73;
        v69 -= 16;
        *((_DWORD *)v69 + 2) = v74;
      }
      while (v44 != v63);
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  *(_QWORD *)v44 = a2;
  *((_QWORD *)v44 + 1) = a3;
LABEL_62:
  v52 = v44 + 16;
LABEL_99:
  a5[1] = v52;
}

uint64_t sub_1C5D9305C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 **v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t *v23;
  unsigned __int8 *v24[2];

  if (a4)
  {
    if (*a3 == 123)
    {
      v6 = a4 - 2;
      v24[0] = a3 + 1;
      v24[1] = (unsigned __int8 *)(a4 - 2);
      v7 = *(uint64_t **)(a2 + 240);
      v23 = *(uint64_t **)(a2 + 248);
      if (v7 != v23)
      {
        v9 = 0;
        v10 = 0;
        v11 = a5;
        while (1)
        {
          v12 = *v7;
          if (llvm::TargetLoweringBase::isLegalRC(a1, a2, *v7))
          {
            v13 = *(unsigned __int16 ***)v12;
            if (*(_WORD *)(*(_QWORD *)v12 + 20))
              break;
          }
LABEL_20:
          if (++v7 == v23)
            return v9;
        }
        v14 = *v13;
        v15 = (uint64_t)&(*v13)[*(unsigned __int16 *)(*(_QWORD *)v12 + 20)];
        while (1)
        {
          v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 512))(a2, *v14);
          if (v6 == v17 && !llvm::StringRef::compare_insensitive(v24, v16, v17))
          {
            v18 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 264)
                                      + 24
                                      * (*(unsigned __int16 *)(*(_QWORD *)v12 + 24)
                                       + *(_DWORD *)(a2 + 272)
                                       * ((*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3))
                                      + 16);
            do
            {
              v20 = *v18++;
              v19 = v20;
            }
            while (v20 != 1 && v19 != v11);
            if (v19 != 1)
              return *v14;
            if (!v10)
            {
              v10 = v12;
              v9 = *v14;
            }
          }
          if (++v14 == (unsigned __int16 *)v15)
            goto LABEL_20;
        }
      }
    }
  }
  return 0;
}

void sub_1C5D931D0(uint64_t a1@<X0>, llvm::DataLayout *a2@<X1>, llvm::AttributeList *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  llvm::AttributeList *v28;
  uint64_t ParamElementType;
  unsigned int v30;
  BOOL v31;
  uint64_t PointerAlignElem;
  char VT;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  int v38;
  const char *v39;
  BOOL v40;
  _QWORD *v41;
  _DWORD *v42;
  int v43;
  int v44;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  llvm::InlineAsm::ConstraintInfo *v48;
  uint64_t v49;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  llvm::InlineAsm::ConstraintInfo *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  llvm::AttributeList *v104;
  unsigned int v105;
  uint64_t v106;
  void *__p;
  uint64_t *v109;
  void **v110;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v9 = *(a4 - 4);
  v12 = *(char **)(v9 + 48);
  v10 = v9 + 48;
  v11 = v12;
  v13 = *(_BYTE *)(v10 + 23);
  if (v13 >= 0)
    v14 = (char *)v10;
  else
    v14 = v11;
  v15 = *(_QWORD *)(v10 + 8);
  if (v13 >= 0)
    v16 = v13 & 0x7F;
  else
    v16 = v15;
  llvm::InlineAsm::ParseConstraints(v14, v16, (uint64_t *)&__p);
  v17 = (uint64_t *)__p;
  v18 = v109;
  v106 = a1;
  if (__p != v109)
  {
    v105 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      sub_1C6377594(a5, v17);
      v22 = a5[1];
      v23 = v105;
      if ((uint64_t)(*(_QWORD *)(v22 - 72) - *(_QWORD *)(v22 - 80)) >> 5 > (unint64_t)v105)
        v23 = (uint64_t)(*(_QWORD *)(v22 - 72) - *(_QWORD *)(v22 - 80)) >> 5;
      v105 = v23;
      *(_BYTE *)(v22 - 8) = 1;
      v24 = *(_DWORD *)(v22 - 128);
      if (!v24)
        break;
      if (v24 != 1)
        goto LABEL_17;
      if (*(_BYTE *)(v22 - 115))
      {
        v25 = &a4[-4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF)];
        v26 = 4 * v19;
LABEL_16:
        *(_QWORD *)(v22 - 16) = v25[v26];
        goto LABEL_17;
      }
      v36 = *a4;
      if (*a4 && *(_BYTE *)(v36 + 8) == 16)
        v37 = sub_1C47A7FD0(v106, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * v20), 0);
      else
        v37 = (*(uint64_t (**)(uint64_t, llvm::DataLayout *))(*(_QWORD *)v106 + 568))(v106, a2);
      *(_BYTE *)(v22 - 8) = v37;
      ++v20;
LABEL_17:
      v27 = *(uint64_t **)(v22 - 16);
      if (v27)
      {
        v28 = a3;
        if (*(_BYTE *)(v22 - 115))
          ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(a4 + 8), v19);
        else
          ParamElementType = *v27;
        v30 = *(_DWORD *)(ParamElementType + 8);
        if (ParamElementType)
          v31 = *(_DWORD *)(ParamElementType + 8) == 16;
        else
          v31 = 0;
        if (v31 && *(_DWORD *)(ParamElementType + 12) == 1)
        {
          ParamElementType = **(_QWORD **)(ParamElementType + 16);
          v30 = *(_DWORD *)(ParamElementType + 8);
        }
        if ((v30 & 0xFE) != 0x12)
        {
          if (v30 <= 0x15u)
          {
            if (((1 << v30) & 0x20AC7F) != 0)
              goto LABEL_30;
            if (((1 << v30) & 0x30000) != 0)
              goto LABEL_52;
          }
          if (v30 == 21)
          {
LABEL_52:
            if ((llvm::Type::isSizedDerivedType(ParamElementType, 0) & 1) != 0)
            {
              sub_1C4768AD0((uint64_t)a2, ParamElementType);
              if ((_DWORD)v39 == 1)
              {
                v44 = v38;
                v38 = v44;
              }
              v40 = (v38 - 1) > 0x3F || ((1 << (v38 - 1)) & 0x8000000080008081) == 0;
              if (!v40 || v38 == 128)
              {
                v41 = *(_QWORD **)ParamElementType;
                LODWORD(v110) = v38;
                if (v38 <= 63)
                {
                  if (v38 > 31)
                  {
                    if (v38 == 32)
                    {
                      v35 = (_QWORD *)(*v41 + 1960);
                      goto LABEL_37;
                    }
                    goto LABEL_83;
                  }
                  switch(v38)
                  {
                    case 16:
                      v35 = (_QWORD *)(*v41 + 1936);
                      break;
                    case 8:
                      v35 = (_QWORD *)(*v41 + 1912);
                      break;
                    case 1:
                      v35 = (_QWORD *)(*v41 + 1888);
                      break;
                    default:
                      goto LABEL_83;
                  }
                }
                else
                {
                  if (v38 == 64)
                  {
                    v35 = (_QWORD *)(*v41 + 1984);
                    goto LABEL_37;
                  }
                  if (v38 == 128)
                  {
                    v35 = (_QWORD *)(*v41 + 2008);
                    goto LABEL_37;
                  }
LABEL_83:
                  v42 = sub_1C5270984(*v41 + 2168, &v110);
                  v35 = (_QWORD *)*((_QWORD *)v42 + 1);
                  if (!v35)
                  {
                    v35 = (_QWORD *)sub_1C484358C(*v41 + 2040, 24, 3);
                    v43 = (int)v110;
                    *v35 = v41;
                    v35[2] = 0;
                    v35[1] = (v43 << 8) | 0xDu;
                    *((_QWORD *)v42 + 1) = v35;
                  }
                }
LABEL_37:
                VT = llvm::MVT::getVT((uint64_t)v35, 1, v21);
LABEL_38:
                *(_BYTE *)(v22 - 8) = VT;
              }
              ++v19;
              a3 = v28;
              goto LABEL_40;
            }
            v30 = *(_DWORD *)(ParamElementType + 8);
          }
        }
LABEL_30:
        if (v30 != 15)
        {
          v35 = (_QWORD *)ParamElementType;
          goto LABEL_37;
        }
        PointerAlignElem = llvm::DataLayout::getPointerAlignElem(a2, v30 >> 8);
        VT = 0;
        v34 = *(_DWORD *)(PointerAlignElem + 4);
        if (v34 > 31)
        {
          switch(v34)
          {
            case 32:
              VT = 5;
              break;
            case 64:
              VT = 6;
              break;
            case 128:
              VT = 7;
              break;
          }
        }
        else
        {
          switch(v34)
          {
            case 1:
              VT = 2;
              break;
            case 8:
              VT = 3;
              break;
            case 16:
              VT = 4;
              break;
          }
        }
        goto LABEL_38;
      }
LABEL_40:
      v17 += 10;
      if (v17 == v18)
      {
        v17 = (uint64_t *)__p;
        a1 = v106;
        goto LABEL_86;
      }
    }
    v25 = &a4[-4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF)];
    v26 = 4 * v19;
    goto LABEL_16;
  }
  v105 = 0;
LABEL_86:
  v45 = a5;
  if (v17)
  {
    v46 = v109;
    v47 = v17;
    if (v109 != v17)
    {
      do
      {
        v110 = (void **)(v46 - 4);
        sub_1C50107D8(&v110);
        v110 = (void **)(v46 - 8);
        sub_1C4765410(&v110);
        v46 -= 10;
      }
      while (v46 != v17);
      v47 = __p;
    }
    v109 = v17;
    operator delete(v47);
  }
  v49 = *a5;
  v48 = (llvm::InlineAsm::ConstraintInfo *)a5[1];
  if ((llvm::InlineAsm::ConstraintInfo *)*a5 != v48 && v105 != 0)
  {
    v104 = a3;
    v51 = 0;
    v52 = 0;
    v53 = -1;
    while (1)
    {
      v54 = *v45;
      v55 = v45[1] - *v45;
      if ((v55 & 0x7FFFFFFF80) == 0)
      {
        v57 = 0;
        goto LABEL_123;
      }
      v56 = 0;
      v57 = 0;
      v58 = (v55 >> 7);
      while (1)
      {
        v59 = v54 + v56;
        if (*(_DWORD *)(v54 + v56) == 2)
          goto LABEL_119;
        v60 = *(int *)(v59 + 8);
        if ((_DWORD)v60 != -1)
        {
          v61 = (unsigned __int8 *)(v54 + v56 + 120);
          v62 = *v61;
          v63 = v54 + (v60 << 7);
          v66 = *(unsigned __int8 *)(v63 + 120);
          v65 = (unsigned __int8 *)(v63 + 120);
          v64 = v66;
          if (v62 != v66)
          {
            if ((v62 - 2) < 6 || (v62 - 15) < 0x3Cu)
            {
              if ((v64 + 104) <= 0xDFu
                && (v64 - 8) <= 0xF9u
                && (v64 - 75) < 0xC4u)
              {
                break;
              }
            }
            else
            {
              v67 = v62 - 120;
              if ((v64 - 2) < 6 || (v64 - 15) < 0x3Cu)
              {
                if (v67 >= 0x20u)
                  break;
              }
              else if (v67 < 0x20u != (v64 - 120) < 0x20)
              {
                break;
              }
            }
            v68 = sub_1C47A8C74(v61);
            v70 = v69;
            v72 = v68 == sub_1C47A8C74(v65) && v70 == v71;
            a1 = v106;
            v45 = a5;
            if (!v72)
              break;
          }
        }
        v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2016))(a1, v59, v52);
        if (v73 == -1)
          break;
        v54 = *v45;
        v57 += v73;
LABEL_119:
        v56 += 128;
        if (!--v58)
          goto LABEL_123;
      }
      v57 = -1;
LABEL_123:
      if (v57 > v53)
      {
        v53 = v57;
        v51 = v52;
      }
      v52 = (v52 + 1);
      if ((_DWORD)v52 == v105)
      {
        v49 = *v45;
        v48 = (llvm::InlineAsm::ConstraintInfo *)v45[1];
        if ((llvm::InlineAsm::ConstraintInfo *)*v45 == v48)
        {
          v48 = (llvm::InlineAsm::ConstraintInfo *)*v45;
          a3 = v104;
        }
        else
        {
          v74 = (llvm::InlineAsm::ConstraintInfo *)*v45;
          a3 = v104;
          do
          {
            if (*(_DWORD *)v74 != 2)
              llvm::InlineAsm::ConstraintInfo::selectAlternative(v74, v51);
            v74 = (llvm::InlineAsm::ConstraintInfo *)((char *)v74 + 128);
          }
          while (v74 != v48);
        }
        break;
      }
    }
  }
  v75 = (unint64_t)v48 - v49;
  if ((((unint64_t)v48 - v49) & 0x7FFFFFFF80) != 0)
  {
    v76 = 0;
    v77 = (v75 >> 7);
    do
    {
      v78 = v49 + v76;
      v79 = *(int *)(v49 + v76 + 8);
      if ((_DWORD)v79 != -1)
      {
        v80 = v49 + (v79 << 7);
        v81 = (unsigned __int8 *)(v80 + 120);
        if (*(unsigned __int8 *)(v78 + 120) != *(unsigned __int8 *)(v80 + 120))
        {
          v82 = *(_BYTE *)(v49 + v76 + 103);
          if (v82 >= 0)
            v83 = v49 + v76 + 80;
          else
            v83 = *(_QWORD *)(v49 + v76 + 80);
          if (v82 >= 0)
            v84 = v82 & 0x7F;
          else
            v84 = *(_QWORD *)(v49 + v76 + 88);
          (*(void (**)(uint64_t, llvm::AttributeList *, uint64_t, uint64_t))(*(_QWORD *)a1 + 2048))(a1, a3, v83, v84);
          v86 = v85;
          v89 = *(_QWORD *)(v80 + 80);
          v88 = v80 + 80;
          v87 = v89;
          v90 = *(_BYTE *)(v88 + 23);
          v91 = v90;
          if (v90 >= 0)
            v92 = v88;
          else
            v92 = v87;
          v93 = v90 & 0x7F;
          if (v91 >= 0)
            v94 = v93;
          else
            v94 = *(_QWORD *)(v88 + 8);
          (*(void (**)(uint64_t, llvm::AttributeList *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 2048))(a1, a3, v92, v94, *v81);
          v96 = *(unsigned __int8 *)(v78 + 120);
          v97 = v96 - 2;
          v98 = v96 - 15;
          v99 = (v96 - 120) < 0x20;
          if (v98 < 0x3C)
            v99 = 1;
          if (v97 < 6)
            v99 = 1;
          v100 = *v81;
          v101 = v100 - 2;
          v102 = v100 - 15;
          v103 = (v100 - 120) < 0x20;
          if (v102 < 0x3C)
            v103 = 1;
          if (v101 < 6)
            v103 = 1;
          if (v99 != v103 || v86 != v95)
            llvm::report_fatal_error((llvm *)"Unsupported asm: input constraint with a matching output constraint of incompatible type!", (const char *)1);
        }
      }
      v76 += 128;
      --v77;
    }
    while (v77);
  }
}

uint64_t sub_1C5D93968(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v11;
  uint64_t *v12;
  int v13;

  v3 = a2[6];
  v4 = (unint64_t)(a2[7] - v3) >> 5;
  v5 = v3 + 32 * a3 + 8;
  if ((int)v4 <= a3)
    v6 = (uint64_t **)(a2 + 2);
  else
    v6 = (uint64_t **)v5;
  v7 = *v6;
  v8 = v6[1];
  if (*v6 == v8)
    return 0xFFFFFFFFLL;
  LODWORD(v11) = -1;
  do
  {
    v12 = v7;
    if (*((char *)v7 + 23) < 0)
      v12 = (uint64_t *)*v7;
    v13 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)a1 + 2024))(a1, a2, v12);
    if (v13 <= (int)v11)
      v11 = v11;
    else
      v11 = v13;
    v7 += 3;
  }
  while (v7 != v8);
  return v11;
}

uint64_t sub_1C5D93A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const std::string *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v31;
  int v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  int v44;
  int v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  int v52;
  char v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;

  v5 = a2;
  v8 = a2 + 16;
  v7 = *(const std::string **)(a2 + 16);
  v9 = *(_QWORD *)(v8 + 8) - (_QWORD)v7;
  if (v9 == 24)
  {
    std::string::operator=((std::string *)(v5 + 80), v7);
    v10 = *(_BYTE *)(v5 + 103);
    v11 = v10 < 0;
    if (v10 >= 0)
      v12 = v5 + 80;
    else
      v12 = *(_QWORD *)(v5 + 80);
    v13 = v10 & 0x7F;
    if (v11)
      v14 = *(_QWORD *)(v5 + 88);
    else
      v14 = v13;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2040))(a1, v12, v14);
    v16 = result;
    goto LABEL_50;
  }
  v61 = -1431655765 * (v9 >> 3);
  if (!(_DWORD)v61)
  {
    v22 = 0;
    v16 = 6;
    goto LABEL_49;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v60 = -1;
  v16 = 6;
  v58 = v5;
  while (1)
  {
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 16) + v20);
    v24 = *((_BYTE *)v23 + 23);
    if (v24 >= 0)
      v25 = *(_QWORD *)(v5 + 16) + v20;
    else
      v25 = *v23;
    if (v24 >= 0)
      v26 = v24 & 0x7F;
    else
      v26 = v23[1];
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2040))(a1, v25, v26);
    if (*(_BYTE *)(v5 + 13))
      v28 = v27 == 2;
    else
      v28 = 1;
    if (!v28 && v27 != 0 && v27 != 1)
      goto LABEL_46;
    v31 = v27;
    if ((v27 & 0xFFFFFFFE) == 4 && a3 != 0)
      break;
    if (v27 != 2 || *(_DWORD *)(v5 + 8) == -1)
      goto LABEL_42;
LABEL_46:
    ++v21;
    v20 += 24;
    if (v61 == v21)
      goto LABEL_47;
  }
  v59 = v16;
  v34 = v22;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v35 = *(_QWORD *)(v5 + 16) + v20;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 2072);
  v37 = a1;
  v38 = a1;
  v39 = a4;
  v40 = a4;
  v41 = a5;
  v36(v38, a3, v40, v35, &v62, a5);
  v43 = v62;
  v42 = v63;
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  v28 = v43 == v42;
  v22 = v34;
  v16 = v59;
  a5 = v41;
  a4 = v39;
  a1 = v37;
  v5 = v58;
  if (v28)
  {
LABEL_42:
    v44 = dword_1C866EC24[v31];
    v45 = v60;
    v46 = v44 <= v60;
    if (v44 > v60)
      v45 = dword_1C866EC24[v31];
    v60 = v45;
    if (!v46)
    {
      v16 = v31;
      v22 = v21;
    }
    goto LABEL_46;
  }
  v16 = v31;
  v22 = v21;
LABEL_47:
  v7 = *(const std::string **)(v5 + 16);
LABEL_49:
  result = (uint64_t)std::string::operator=((std::string *)(v5 + 80), &v7[v22]);
LABEL_50:
  *(_DWORD *)(v5 + 104) = v16;
  v47 = *(_BYTE *)(v5 + 103);
  if (v47 >= 0)
    v48 = v47 & 0x7F;
  else
    v48 = *(_QWORD *)(v5 + 88);
  if (v48 == 1)
  {
    v49 = v47 >= 0 ? *(unsigned __int8 *)(v5 + 103) : *(_QWORD *)(v5 + 88);
    v50 = v47 >= 0 ? (const void *)(v5 + 80) : *(const void **)(v5 + 80);
    result = memcmp(v50, "X", v49 != 0);
    if (v49 == 1 && !(_DWORD)result)
    {
      v51 = *(_QWORD *)(v5 + 112);
      if (v51)
      {
        v52 = *(unsigned __int8 *)(v51 + 16);
        if (v52 > 15)
        {
          if (v52 == 16)
            return result;
          if (v52 != 22)
            goto LABEL_66;
        }
        else
        {
          if (!v52)
            return result;
          if (v52 != 4)
          {
LABEL_66:
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2064))(a1, *(unsigned __int8 *)(v5 + 120), 0);
            if (result)
            {
              MEMORY[0x1CAA32ABC](v5 + 80, result);
              v53 = *(_BYTE *)(v5 + 103);
              v54 = v53 < 0;
              if (v53 >= 0)
                v55 = v5 + 80;
              else
                v55 = *(_QWORD *)(v5 + 80);
              v56 = v53 & 0x7F;
              if (v54)
                v57 = *(_QWORD *)(v5 + 88);
              else
                v57 = v56;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2040))(a1, v55, v57);
              *(_DWORD *)(v5 + 104) = result;
            }
            return result;
          }
        }
        return MEMORY[0x1CAA32ABC](v5 + 80, "i");
      }
    }
  }
  return result;
}

uint64_t *sub_1C5D93D30(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  const char *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  void (**v25)(void);
  uint64_t *v26;
  uint64_t ExtendedSizeInBits;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  int v63;
  void (**v64)(void);
  uint64_t v65;
  __int16 v66;
  uint64_t *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  __int16 v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  __int128 v77;
  unsigned int v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unint64_t v165;
  __int128 v166;
  _QWORD v167[2];
  llvm *ShiftAmountTy;
  uint64_t v169;
  _QWORD v170[2];
  __int128 v171;
  unsigned __int8 *v172;
  int v173;
  char v174;
  _QWORD v175[2];
  llvm *v176;
  uint64_t v177;
  _QWORD v178[2];
  _QWORD v179[3];
  _QWORD *v180;
  void *v181[2];
  _BYTE v182[256];
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void **v186;
  void *v187;
  uint64_t v188;
  _BYTE v189[9];
  void *v190;
  unsigned int v191[66];
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(a2 + 64);
  v172 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v172, v10, 2);
  v173 = *(_DWORD *)(a2 + 60);
  v171 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v170[0] = sub_1C6131264((unsigned __int8 *)&v171, (uint64_t)v10, a3);
  v170[1] = v11;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, v171, *((uint64_t *)&v171 + 1), *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
  v169 = v12;
  v167[0] = sub_1C6131264((unsigned __int8 *)&ShiftAmountTy, v12, v13);
  v167[1] = v14;
  v17 = sub_1C6131328((unsigned __int8 *)&v171, v14, v15);
  LOBYTE(v166) = 0;
  *((_QWORD *)&v166 + 1) = 0;
  v18 = v171;
  if ((_BYTE)v171 && a1[v171 + 12])
  {
LABEL_5:
    v163 = a5;
    if ((*(_WORD *)(a2 + 72) & 8) == 0)
    {
      v164 = a4;
      v161 = v17;
      v190 = &v191[2];
      *(_QWORD *)v191 = 0x1000000000;
      v187 = v189;
      v188 = 0x1000000000;
      v183 = &v185;
      v184 = 0x1000000000;
      v181[0] = v182;
      v181[1] = (void *)0x1000000000;
      v19 = *(uint64_t **)(a2 + 32);
      v20 = v19[1];
      v162 = *v19;
      v21 = v19[5];
      v22 = v19[6];
      v23 = operator new(0x48uLL);
      *v23 = &off_1E8199B70;
      v23[1] = &v190;
      v23[2] = a3;
      v23[3] = &v172;
      v23[4] = v170;
      v23[5] = &v187;
      v23[6] = &v183;
      v23[7] = v167;
      v23[8] = v181;
      v180 = v23;
      v24 = sub_1C6364CB8(v21, v22, (uint64_t)v179, 0);
      if (v180 == v179)
      {
        v25 = (void (**)(void))(v179[0] + 32);
      }
      else
      {
        if (!v180)
          goto LABEL_16;
        v25 = (void (**)(void))(*v180 + 40);
      }
      (*v25)();
LABEL_16:
      if (!v24)
        goto LABEL_28;
      v28 = *(unsigned __int16 *)(v21 + 24);
      if (v28 == 156)
      {
        v29 = sub_1C5CA0F18(a3, (llvm *)v171, *((uint64_t *)&v171 + 1), (const llvm::APInt *)&v172, *(_QWORD *)v190, *((_QWORD *)v190 + 1));
        v30 = v35;
        v158 = sub_1C5CA0F18(a3, (llvm *)v171, *((uint64_t *)&v171 + 1), (const llvm::APInt *)&v172, *(_QWORD *)v187, *((_QWORD *)v187 + 1));
        v159 = v36;
        v31 = sub_1C5CA0F18(a3, ShiftAmountTy, v169, (const llvm::APInt *)&v172, *(_QWORD *)v183, *((_QWORD *)v183 + 1));
        v32 = v37;
        v38 = sub_1C5CA0F18(a3, (llvm *)v171, *((uint64_t *)&v171 + 1), (const llvm::APInt *)&v172, *(_QWORD *)v181[0], *((_QWORD *)v181[0] + 1));
      }
      else
      {
        if (v28 != 146)
        {
          v29 = *(uint64_t **)v190;
          v30 = *((unsigned int *)v190 + 2);
          v158 = *(uint64_t **)v187;
          v159 = *((unsigned int *)v187 + 2);
          v31 = *(uint64_t **)v183;
          v32 = *((unsigned int *)v183 + 2);
          v33 = *(uint64_t **)v181[0];
          v34 = *((unsigned int *)v181[0] + 2);
          goto LABEL_22;
        }
        v123 = *(_QWORD *)(a3 + 832);
        if (v123)
          v124 = *(unsigned __int16 *)(v123 + 8);
        else
          v124 = 0;
        v29 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t *)v190, v191[0], v124);
        LODWORD(v30) = v128;
        v129 = *(_QWORD *)(a3 + 832);
        if (v129)
          v130 = *(unsigned __int16 *)(v129 + 8);
        else
          v130 = 0;
        v131 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t *)v187, v188, v130);
        v133 = *(_QWORD *)(a3 + 832);
        v158 = v131;
        if (v133)
          v134 = *(unsigned __int16 *)(v133 + 8);
        else
          v134 = 0;
        v30 = v30;
        v135 = v132;
        v31 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v172, ShiftAmountTy, v169, (uint64_t *)v183, v184, v134);
        v32 = v136;
        v137 = *(_QWORD *)(a3 + 832);
        v159 = v135;
        if (v137)
          v138 = *(unsigned __int16 *)(v137 + 8);
        else
          v138 = 0;
        v38 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t *)v181[0], LODWORD(v181[1]), v138);
      }
      v33 = v38;
      v34 = v39;
LABEL_22:
      v160 = v34;
      if (!(_BYTE)v171 || !a1[v171 + 12])
      {
        v65 = *(_QWORD *)(a3 + 832);
        v156 = v32;
        v157 = (uint64_t)v33;
        if (v65)
          v66 = *(_WORD *)(v65 + 8);
        else
          v66 = 0;
        v67 = sub_1C5D52060(a3, 198, (const llvm::APInt *)&v172, (llvm *)v166, *((uint64_t *)&v166 + 1), v162, v20, v66);
        v69 = v68;
        v70 = *(_QWORD *)(a3 + 832);
        if (v70)
          v71 = *(_WORD *)(v70 + 8);
        else
          v71 = 0;
        v72 = sub_1C5D52060(a3, 198, (const llvm::APInt *)&v172, (llvm *)v166, *((uint64_t *)&v166 + 1), (uint64_t)v29, v30, v71);
        v75 = *(_QWORD *)(a3 + 832);
        if (v75)
          LOWORD(v75) = *(_WORD *)(v75 + 8);
        v76 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v172, (llvm *)v166, *((uint64_t *)&v166 + 1), (uint64_t)v67, v69 | v20 & 0xFFFFFFFF00000000, v74, (uint64_t)v72, v73, v75);
        v77 = v166;
        v79 = v78;
        v80 = sub_1C6366C2C(a3, v161, v166, *((uint64_t *)&v166 + 1), (const llvm::APInt *)&v172, 1);
        v83 = *(_QWORD *)(a3 + 832);
        if (v83)
          LOWORD(v83) = *(_WORD *)(v83 + 8);
        v42 = (uint64_t)v31;
        v85 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v172, (llvm *)v77, *((uint64_t *)&v77 + 1), (uint64_t)v76, v79, v82, (uint64_t)v80, v81, v83);
        v86 = *(_QWORD *)(a3 + 832);
        if (v86)
          v87 = *(_WORD *)(v86 + 8);
        else
          v87 = 0;
        v48 = v163;
        v45 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t)v85, v84, v87);
        v47 = v93;
        if (!v45)
          goto LABEL_40;
        goto LABEL_77;
      }
      if (sub_1C5CA00A8((uint64_t)a1, 0xA0u, v171, *((uint64_t *)&v171 + 1), v164))
      {
        v156 = v32;
        v157 = (uint64_t)v33;
        v41 = *(_QWORD *)(a3 + 832);
        v42 = (uint64_t)v31;
        if (v41)
          LOWORD(v41) = *(_WORD *)(v41 + 8);
        v45 = sub_1C5D56C70(a3, 160, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), v162, v20, v40, (uint64_t)v29, v30, v41);
        v47 = v46;
        v48 = v163;
        if (!v45)
          goto LABEL_40;
        goto LABEL_77;
      }
      if (sub_1C5CA00A8((uint64_t)a1, 0x3Fu, v171, *((uint64_t *)&v171 + 1), v164))
      {
        v156 = v32;
        v157 = (uint64_t)v33;
        v42 = (uint64_t)v31;
        v125 = sub_1C636A8B4(a3, v171, *((uint64_t *)&v171 + 1), v171, *((uint64_t *)&v171 + 1));
        v45 = sub_1C636D6B4(a3, (const char *)0x3F, (const llvm::APInt *)&v172, v125, v126, v162, v20, v127, (uint64_t)v29, v30);
        v47 = 1;
        v48 = v163;
        if (!v45)
        {
LABEL_40:
          v26 = 0;
          goto LABEL_41;
        }
LABEL_77:
        v94 = *(unsigned int *)(v48 + 8);
        if (v94 >= *(_DWORD *)(v48 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v94 + 1, 8);
          LODWORD(v94) = *(_DWORD *)(v48 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v48 + 8 * v94) = v45;
        ++*(_DWORD *)(v48 + 8);
        v95 = *(_QWORD *)(a3 + 832);
        if (v95)
          LOWORD(v95) = *(_WORD *)(v95 + 8);
        v97 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), v162, v20, v44, (uint64_t)v158, v159, v95);
        v99 = v98;
        v100 = *(unsigned int *)(v48 + 8);
        if (v100 >= *(_DWORD *)(v48 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v100 + 1, 8);
          LODWORD(v100) = *(_DWORD *)(v48 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v48 + 8 * v100) = v97;
        ++*(_DWORD *)(v48 + 8);
        v101 = *(_QWORD *)(a3 + 832);
        if (v101)
          LOWORD(v101) = *(_WORD *)(v101 + 8);
        v103 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t)v45, v47, v96, (uint64_t)v97, v99, v101);
        v105 = v47 & 0xFFFFFFFF00000000 | v104;
        v106 = *(unsigned int *)(v48 + 8);
        if (v106 >= *(_DWORD *)(v48 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v106 + 1, 8);
          LODWORD(v106) = *(_DWORD *)(v48 + 8);
        }
        v107 = v47 & 0xFFFFFFFF00000000;
        *(_QWORD *)(*(_QWORD *)v48 + 8 * v106) = v103;
        ++*(_DWORD *)(v48 + 8);
        v108 = *(_QWORD *)(a3 + 832);
        if (v108)
          LOWORD(v108) = *(_WORD *)(v108 + 8);
        v109 = sub_1C5D56C70(a3, 176, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t)v103, v105, v102, v42, v156, v108);
        v111 = v110 | v107;
        v112 = *(unsigned int *)(v48 + 8);
        if (v112 >= *(_DWORD *)(v48 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v112 + 1, 8);
          LODWORD(v112) = *(_DWORD *)(v48 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v48 + 8 * v112) = v109;
        ++*(_DWORD *)(v48 + 8);
        v113 = sub_1C6366AB4(a3, v161 - 1, (const llvm::APInt *)&v172, ShiftAmountTy, v169, 0, 0);
        v116 = *(_QWORD *)(a3 + 832);
        if (v116)
          LOWORD(v116) = *(_WORD *)(v116 + 8);
        v165 = v111;
        v140 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t)v109, v111, v115, (uint64_t)v113, v114, v116);
        v142 = v141;
        v143 = *(unsigned int *)(v48 + 8);
        if (v143 >= *(_DWORD *)(v48 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v143 + 1, 8);
          LODWORD(v143) = *(_DWORD *)(v48 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v48 + 8 * v143) = v140;
        ++*(_DWORD *)(v48 + 8);
        v144 = *(_QWORD *)(a3 + 832);
        if (v144)
          LOWORD(v144) = *(_WORD *)(v144 + 8);
        v146 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t)v140, v142, v139, v157, v160, v144);
        v148 = v142 & 0xFFFFFFFF00000000 | v147;
        v149 = *(unsigned int *)(v48 + 8);
        if (v149 >= *(_DWORD *)(v48 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v149 + 1, 8);
          LODWORD(v149) = *(_DWORD *)(v48 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v48 + 8 * v149) = v146;
        ++*(_DWORD *)(v48 + 8);
        v150 = *(_QWORD *)(a3 + 832);
        if (v150)
          LOWORD(v150) = *(_WORD *)(v150 + 8);
        v26 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v172, (llvm *)v171, *((uint64_t *)&v171 + 1), (uint64_t)v109, v165, v145, (uint64_t)v146, v148, v150);
LABEL_41:
        if (v181[0] != v182)
          free(v181[0]);
        if (v183 != &v185)
          free(v183);
        if (v187 != v189)
          free(v187);
        v49 = v190;
        if (v190 != &v191[2])
        {
LABEL_48:
          free(v49);
          goto LABEL_49;
        }
        goto LABEL_49;
      }
LABEL_28:
      v26 = 0;
      goto LABEL_41;
    }
    v51 = *(_QWORD *)(a2 + 32);
    v52 = *(_OWORD **)(a2 + 40);
    v54 = *(uint64_t **)v51;
    v53 = *(_QWORD *)(v51 + 8);
    v55 = *(_QWORD *)(v51 + 40);
    v56 = *(_QWORD *)(v51 + 48);
    *(_OWORD *)v181 = *v52;
    v178[0] = sub_1C6131264((unsigned __int8 *)v181, (uint64_t)v16, v18);
    v178[1] = v57;
    v176 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v181[0], (uint64_t)v181[1], *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
    v177 = v58;
    v175[0] = sub_1C6131264((unsigned __int8 *)&v176, v58, v59);
    v175[1] = v60;
    v174 = 0;
    v190 = &v191[2];
    *(_QWORD *)v191 = 0x1000000000;
    v187 = v189;
    v188 = 0x1000000000;
    v61 = (void **)operator new(0x40uLL);
    *v61 = &off_1E8199AE0;
    v61[1] = &v174;
    v61[2] = &v190;
    v61[3] = (void *)a3;
    v61[4] = &v172;
    v61[5] = v175;
    v61[6] = &v187;
    v61[7] = v178;
    v186 = v61;
    v63 = sub_1C6364CB8(v55, v56, (uint64_t)&v183, 0);
    if (v186 == &v183)
    {
      v64 = (void (**)(void))((char *)v183 + 32);
    }
    else
    {
      if (!v186)
        goto LABEL_70;
      v64 = (void (**)(void))((char *)*v186 + 40);
    }
    (*v64)();
LABEL_70:
    if (!v63)
    {
      v26 = 0;
      goto LABEL_102;
    }
    v88 = *(unsigned __int16 *)(v55 + 24);
    if (v88 == 156)
    {
      v89 = sub_1C5CA0F18(a3, v176, v177, (const llvm::APInt *)&v172, *(_QWORD *)v190, *((_QWORD *)v190 + 1));
      v90 = v117;
      v118 = sub_1C5CA0F18(a3, (llvm *)v181[0], (uint64_t)v181[1], (const llvm::APInt *)&v172, *(_QWORD *)v187, *((_QWORD *)v187 + 1));
    }
    else
    {
      if (v88 != 146)
      {
        v89 = *(uint64_t **)v190;
        v90 = *((unsigned int *)v190 + 2);
        v91 = *(_QWORD *)v187;
        v92 = *((unsigned int *)v187 + 2);
LABEL_95:
        if (v174)
        {
          v54 = sub_1C5D56C70(a3, 176, (const llvm::APInt *)&v172, (llvm *)v181[0], (uint64_t)v181[1], (uint64_t)v54, v53, v62, (uint64_t)v89, v90, 9);
          v53 = v53 & 0xFFFFFFFF00000000 | v120;
          v121 = *(unsigned int *)(a5 + 8);
          if (v121 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v121 + 1, 8);
            LODWORD(v121) = *(_DWORD *)(a5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v121) = v54;
          ++*(_DWORD *)(a5 + 8);
        }
        v122 = *(_QWORD *)(a3 + 832);
        if (v122)
          LOWORD(v122) = *(_WORD *)(v122 + 8);
        v26 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v172, (llvm *)v181[0], (uint64_t)v181[1], (uint64_t)v54, v53, v62, v91, v92, v122);
LABEL_102:
        if (v187 != v189)
          free(v187);
        v49 = v190;
        if (v190 != &v191[2])
          goto LABEL_48;
        goto LABEL_49;
      }
      v151 = *(_QWORD *)(a3 + 832);
      if (v151)
        v152 = *(unsigned __int16 *)(v151 + 8);
      else
        v152 = 0;
      v89 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v172, v176, v177, (uint64_t *)v190, v191[0], v152);
      v90 = v153;
      v154 = *(_QWORD *)(a3 + 832);
      if (v154)
        v155 = *(unsigned __int16 *)(v154 + 8);
      else
        v155 = 0;
      v118 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v172, (llvm *)v181[0], (uint64_t)v181[1], (uint64_t *)v187, v188, v155);
    }
    v91 = (uint64_t)v118;
    v92 = v119;
    goto LABEL_95;
  }
  if (!(_BYTE)v171)
  {
    v26 = 0;
    goto LABEL_49;
  }
  v26 = 0;
  if (v171 - 15 < 0x9C)
    goto LABEL_49;
  if (*((_BYTE *)a1 + v171 + 173796) != 1)
    goto LABEL_37;
  llvm::TargetLoweringBase::getTypeConversion((unint64_t)a1, *(llvm::EVT **)(a3 + 56), v171, *((uint64_t *)&v171 + 1), (uint64_t)&v190);
  v166 = *(_OWORD *)v191;
  if (LOBYTE(v191[0]))
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v166);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v166);
  v43 = ExtendedSizeInBits;
  if ((_DWORD)v16 == 1)
  if (v43 < 2 * v17)
  {
LABEL_37:
    v26 = 0;
    goto LABEL_49;
  }
  if (!(_BYTE)v166)
  {
    v26 = 0;
    goto LABEL_49;
  }
  if (v166 == 1 || (v26 = 0, a1[v166 + 12]))
  {
    if (!*((_BYTE *)a1 + 390 * v166 + 3920))
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_49:
  if (v172)
    llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
  return v26;
}

uint64_t *sub_1C5D94A78(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  void (**v21)(void);
  uint64_t *v22;
  uint64_t ExtendedSizeInBits;
  const char *v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  llvm *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  llvm *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD v110[7];
  char v111;
  __int128 v112;
  unsigned int v113;
  _QWORD v114[2];
  llvm *ShiftAmountTy;
  uint64_t v116;
  _QWORD v117[2];
  __int128 v118;
  unsigned __int8 *v119;
  int v120;
  char v121;
  _QWORD v122[3];
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  _BYTE v126[256];
  void *v127;
  uint64_t v128;
  _BYTE v129[256];
  void *v130;
  uint64_t v131;
  _BYTE v132[9];
  void *v133;
  unsigned int v134[66];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v121 = a4;
  v9 = *(unsigned __int8 **)(a2 + 64);
  v119 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v119, v9, 2);
  v120 = *(_DWORD *)(a2 + 60);
  v118 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v117[0] = sub_1C6131264((unsigned __int8 *)&v118, (uint64_t)v9, a3);
  v117[1] = v10;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, v118, *((uint64_t *)&v118 + 1), *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
  v116 = v11;
  v114[0] = sub_1C6131264((unsigned __int8 *)&ShiftAmountTy, v11, v12);
  v114[1] = v13;
  v113 = sub_1C6131328((unsigned __int8 *)&v118, v13, v14);
  LOBYTE(v112) = 0;
  *((_QWORD *)&v112 + 1) = 0;
  if ((_BYTE)v118 && a1[v118 + 12])
  {
LABEL_5:
    v111 = 0;
    v133 = &v134[2];
    *(_QWORD *)v134 = 0x1000000000;
    v130 = v132;
    v131 = 0x1000000000;
    v127 = v129;
    v128 = 0x1000000000;
    v124 = v126;
    v125 = 0x1000000000;
    v15 = *(uint64_t **)(a2 + 32);
    v108 = *v15;
    v109 = v15[1];
    v16 = v15[5];
    v17 = v15[6];
    v18 = operator new(0x58uLL);
    *v18 = &off_1E8199BB8;
    v18[1] = &v133;
    v18[2] = a3;
    v18[3] = &v119;
    v18[4] = v114;
    v18[5] = &v127;
    v18[6] = v117;
    v18[7] = &v124;
    v18[8] = &v113;
    v18[9] = &v130;
    v18[10] = &v111;
    v123 = v18;
    v107 = v17;
    v20 = sub_1C6364CB8(v16, v17, (uint64_t)v122, 0);
    if (v123 == v122)
    {
      v21 = (void (**)(void))(v122[0] + 32);
    }
    else
    {
      if (!v123)
        goto LABEL_15;
      v21 = (void (**)(void))(*v123 + 40);
    }
    (*v21)();
LABEL_15:
    if (!v20)
    {
LABEL_26:
      v22 = 0;
LABEL_27:
      if (v124 != v126)
        free(v124);
      if (v127 != v129)
        free(v127);
      if (v130 != v132)
        free(v130);
      if (v133 != &v134[2])
        free(v133);
      goto LABEL_45;
    }
    v25 = *(unsigned __int16 *)(v16 + 24);
    v104 = v16;
    if (v25 == 156)
    {
      v27 = sub_1C5CA0F18(a3, ShiftAmountTy, v116, (const llvm::APInt *)&v119, *(_QWORD *)v133, *((_QWORD *)v133 + 1));
      v28 = v32;
      v29 = sub_1C5CA0F18(a3, (llvm *)v118, *((uint64_t *)&v118 + 1), (const llvm::APInt *)&v119, *(_QWORD *)v127, *((_QWORD *)v127 + 1));
      v30 = v33;
      v102 = sub_1C5CA0F18(a3, (llvm *)v118, *((uint64_t *)&v118 + 1), (const llvm::APInt *)&v119, *(_QWORD *)v124, *((_QWORD *)v124 + 1));
      v26 = v34;
      v35 = sub_1C5CA0F18(a3, ShiftAmountTy, v116, (const llvm::APInt *)&v119, *(_QWORD *)v130, *((_QWORD *)v130 + 1));
    }
    else
    {
      if (v25 != 146)
      {
        v26 = 0;
        v102 = 0;
        v27 = *(uint64_t **)v133;
        v28 = *((unsigned int *)v133 + 2);
        v29 = *(uint64_t **)v127;
        v30 = *((unsigned int *)v127 + 2);
        v106 = *(_QWORD *)v130;
        v31 = *((unsigned int *)v130 + 2);
        goto LABEL_21;
      }
      v57 = *(_QWORD *)(a3 + 832);
      if (v57)
        v58 = *(unsigned __int16 *)(v57 + 8);
      else
        v58 = 0;
      v27 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v119, ShiftAmountTy, v116, (uint64_t *)v133, v134[0], v58);
      v60 = v59;
      v61 = *(_QWORD *)(a3 + 832);
      if (v61)
        v62 = *(unsigned __int16 *)(v61 + 8);
      else
        v62 = 0;
      v29 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), (uint64_t *)v127, v128, v62);
      v64 = *(_QWORD *)(a3 + 832);
      if (v64)
        v65 = *(unsigned __int16 *)(v64 + 8);
      else
        v65 = 0;
      v28 = v60;
      v30 = v63;
      v66 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), (uint64_t *)v124, v125, v65);
      v26 = v67;
      v68 = *(_QWORD *)(a3 + 832);
      v102 = v66;
      if (v68)
        v69 = *(unsigned __int16 *)(v68 + 8);
      else
        v69 = 0;
      v35 = sub_1C636D0C8(a3, (const char *)0x92, (const llvm::APInt *)&v119, ShiftAmountTy, v116, (uint64_t *)v130, v131, v69);
    }
    v106 = (uint64_t)v35;
    v31 = v36;
LABEL_21:
    v105 = v31;
    v37 = *(_QWORD *)(a3 + 832);
    if (v37)
      LOWORD(v37) = *(_WORD *)(v37 + 8);
    v38 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), v108, v109, v19, (uint64_t)v27, v28, v37);
    v40 = v109 & 0xFFFFFFFF00000000 | v39;
    v41 = *(unsigned int *)(a5 + 8);
    if (v41 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v41 + 1, 8);
      LODWORD(v41) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v41) = v38;
    ++*(_DWORD *)(a5 + 8);
    v110[0] = a1;
    v110[1] = &v118;
    v110[2] = a3;
    v110[3] = &v119;
    v110[4] = &v112;
    v110[5] = &v113;
    v110[6] = &v121;
    v42 = sub_1C5D953C4((uint64_t)v110, (uint64_t)v38, v40, (uint64_t)v29, v30);
    if (!v42)
      goto LABEL_26;
    v47 = v42;
    v48 = v109 & 0xFFFFFFFF00000000;
    v49 = v43 | v109 & 0xFFFFFFFF00000000;
    v50 = *(unsigned int *)(a5 + 8);
    if (v50 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v50 + 1, 8);
      LODWORD(v50) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v50) = v47;
    ++*(_DWORD *)(a5 + 8);
    if (!v111)
    {
LABEL_85:
      v84 = *(_QWORD *)(a3 + 832);
      if (v84)
        LOWORD(v84) = *(_WORD *)(v84 + 8);
      v85 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), (uint64_t)v47, v49, v44, v106, v105, v84);
      v87 = v86;
      v88 = *(unsigned int *)(a5 + 8);
      if (v88 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v88 + 1, 8);
        LODWORD(v88) = *(_DWORD *)(a5 + 8);
      }
      v89 = v87 | v48;
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v88) = v85;
      ++*(_DWORD *)(a5 + 8);
      v90 = (llvm *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, *(_QWORD *)(a3 + 56), v118, *((_QWORD *)&v118 + 1));
      v92 = v91;
      v93 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), 0, 0);
      v95 = v94;
      v96 = sub_1C6367818((_QWORD *)a3, 0x11u);
      v99 = *(_QWORD *)(a3 + 832);
      if (v99)
        LOWORD(v99) = *(_WORD *)(v99 + 8);
      v100 = sub_1C5D58E08(a3, (const char *)0xC1, (const llvm::APInt *)&v119, v90, v92, v104, v107, v98, (uint64_t)v93, v95, v96, v97, SHIDWORD(v97), v99);
      v22 = sub_1C4815A8C(a3, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), (uint64_t)v100, v101, v108, v109, (uint64_t)v85, v89, SHIDWORD(v89));
      goto LABEL_27;
    }
    v51 = *(_QWORD *)(a3 + 832);
    if (v51)
      LOWORD(v51) = *(_WORD *)(v51 + 8);
    v52 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), v108, v109, v44, (uint64_t)v47, v49, v51);
    v54 = v53;
    v55 = *(unsigned int *)(a5 + 8);
    if (v55 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v55 + 1, 8);
      LODWORD(v55) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v55) = v52;
    ++*(_DWORD *)(a5 + 8);
    if ((_BYTE)v118)
    {
      if (v118 - 15 >= 0x9C)
      {
        v56 = *((_QWORD *)&v118 + 1);
LABEL_75:
        v73 = v56;
        v103 = (llvm *)v118;
        v74 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v119, ShiftAmountTy, v116, 0, 0);
        v77 = *(_QWORD *)(a3 + 832);
        if (v77)
          LOWORD(v77) = *(_WORD *)(v77 + 8);
        v70 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v119, v103, v73, (uint64_t)v52, v54, v76, (uint64_t)v74, v75, v77);
        goto LABEL_78;
      }
    }
    else
    {
      v56 = *((_QWORD *)&v118 + 1);
      if ((*(_DWORD *)(*((_QWORD *)&v118 + 1) + 8) & 0xFE) != 0x12)
        goto LABEL_75;
    }
    v70 = sub_1C5D953C4((uint64_t)v110, (uint64_t)v52, v54, (uint64_t)v102, v26);
LABEL_78:
    v78 = (uint64_t)v70;
    v79 = v54 & 0xFFFFFFFF00000000 | v71;
    v80 = *(unsigned int *)(a5 + 8);
    if (v80 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v80 + 1, 8);
      LODWORD(v80) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v80) = v78;
    ++*(_DWORD *)(a5 + 8);
    v81 = *(_QWORD *)(a3 + 832);
    if (v81)
      LOWORD(v81) = *(_WORD *)(v81 + 8);
    v47 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v119, (llvm *)v118, *((uint64_t *)&v118 + 1), v78, v79, v72, (uint64_t)v47, v49, v81);
    v49 = v82 | v48;
    v83 = *(unsigned int *)(a5 + 8);
    if (v83 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v83 + 1, 8);
      LODWORD(v83) = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v83) = v47;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_85;
  }
  if (!(_BYTE)v118)
  {
    v22 = 0;
    goto LABEL_45;
  }
  v22 = 0;
  if (v118 - 15 < 0x9C)
    goto LABEL_45;
  if (*((_BYTE *)a1 + v118 + 173796) != 1)
    goto LABEL_43;
  llvm::TargetLoweringBase::getTypeConversion((unint64_t)a1, *(llvm::EVT **)(a3 + 56), v118, *((uint64_t *)&v118 + 1), (uint64_t)&v133);
  v112 = *(_OWORD *)v134;
  if (LOBYTE(v134[0]))
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v112);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v112);
  v45 = ExtendedSizeInBits;
  if ((_DWORD)v24 == 1)
  if (v45 < 2 * v113)
  {
LABEL_43:
    v22 = 0;
    goto LABEL_45;
  }
  if (!(_BYTE)v112)
  {
    v22 = 0;
    goto LABEL_45;
  }
  if (v112 == 1 || (v22 = 0, a1[v112 + 12]))
  {
    if (!*((_BYTE *)a1 + 390 * v112 + 3920))
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_45:
  if (v119)
    llvm::MetadataTracking::untrack((uint64_t)&v119, v119);
  return v22;
}

uint64_t *sub_1C5D953C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int16 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  const llvm::APInt *v43;
  uint64_t *v44;
  uint64_t v45;
  llvm *v46;
  unsigned int v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  llvm *v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  const llvm::APInt *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v10 = *(_QWORD **)(a1 + 8);
  if (*v10 && (v11 = *(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)a1 + 8 * *v10 + 96)))
  {
    if (sub_1C5CA00A8(*(_QWORD *)a1, 0x9Fu, *v10, v10[1], **(unsigned __int8 **)(a1 + 48)))
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(llvm **)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(_QWORD *)(v13 + 832);
      if (v17)
        LOWORD(v17) = *(_WORD *)(v17 + 8);
      return sub_1C5D56C70(v13, 159, *(const llvm::APInt **)(a1 + 24), v15, v16, a2, a3, v12, a4, a5, v17);
    }
    else if (sub_1C5CA00A8(v11, 0x40u, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(unsigned __int8 **)(a1 + 48)))
    {
      v62 = *(_QWORD *)(a1 + 16);
      v61 = *(const llvm::APInt **)(a1 + 24);
      v63 = sub_1C636A8B4(v62, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      return sub_1C636D6B4(v62, (const char *)0x40, v61, v63, v64, a2, a3, v65, a4, a5);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(llvm **)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v19 + 832);
    if (v23)
      v24 = *(_WORD *)(v23 + 8);
    else
      v24 = 0;
    v25 = a3 & 0xFFFFFFFF00000000;
    v26 = sub_1C5D52060(v19, 199, *(const llvm::APInt **)(a1 + 24), v21, v22, a2, a3, v24);
    v28 = v27;
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_QWORD *)(a1 + 32);
    v31 = *(llvm **)v30;
    v32 = *(_QWORD *)(v30 + 8);
    v33 = a5 & 0xFFFFFFFF00000000;
    v34 = *(_QWORD *)(v29 + 832);
    if (v34)
      v35 = *(_WORD *)(v34 + 8);
    else
      v35 = 0;
    v38 = sub_1C5D52060(v29, 199, *(const llvm::APInt **)(a1 + 24), v31, v32, a4, a5, v35);
    v39 = *(_QWORD *)(a1 + 16);
    v40 = *(_QWORD *)(v39 + 832);
    if (v40)
      LOWORD(v40) = *(_WORD *)(v40 + 8);
    v41 = sub_1C5D56C70(v39, 58, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v26, v28 | v25, v37, (uint64_t)v38, v36 | v33, v40);
    v42 = *(_QWORD *)(a1 + 16);
    v43 = *(const llvm::APInt **)(a1 + 24);
    v44 = *(uint64_t **)(a1 + 32);
    v46 = (llvm *)*v44;
    v45 = v44[1];
    v48 = v47 | v33;
    v49 = sub_1C6366C2C(v42, **(unsigned int **)(a1 + 40), *v44, v45, v43, 1);
    v52 = *(_QWORD *)(v42 + 832);
    if (v52)
      LOWORD(v52) = *(_WORD *)(v52 + 8);
    v54 = sub_1C5D56C70(v42, 177, v43, v46, v45, (uint64_t)v41, v48, v51, (uint64_t)v49, v50, v52);
    v55 = *(_QWORD *)(a1 + 16);
    v56 = *(_QWORD *)(a1 + 8);
    v57 = *(llvm **)v56;
    v58 = *(_QWORD *)(v56 + 8);
    v59 = *(_QWORD *)(v55 + 832);
    if (v59)
      v60 = *(_WORD *)(v59 + 8);
    else
      v60 = 0;
    return sub_1C5D52060(v55, 201, *(const llvm::APInt **)(a1 + 24), v57, v58, (uint64_t)v54, v53 | v33, v60);
  }
}

uint64_t sub_1C5D95640(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  __int128 *v11;
  uint64_t result;
  uint64_t (**v13)(void);
  __int128 *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  void (**v20)(void);
  uint64_t (**v21)(void);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (**v25)(void);
  _QWORD v26[2];
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  __int128 *v31;
  _QWORD v32[3];
  _QWORD *v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD *)a3[3];
  if (v10)
  {
    if (v10 == a3)
    {
      v33 = v32;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v32);
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v33 = 0;
  }
  v11 = sub_1C637AA14((__int128 *)a1, a2, v32);
  result = (uint64_t)v33;
  if (v33 == v32)
  {
    v13 = (uint64_t (**)(void))(v32[0] + 32);
  }
  else
  {
    if (!v33)
      goto LABEL_11;
    v13 = (uint64_t (**)(void))(*v33 + 40);
  }
  result = (*v13)();
LABEL_11:
  v14 = (__int128 *)(a1 + 16 * a2);
  if (v11 == v14)
    goto LABEL_43;
  v15 = (_QWORD *)a3[3];
  if (!v15)
  {
    v30 = 0;
    v31 = v11;
LABEL_20:
    v35 = 0;
    goto LABEL_21;
  }
  if (v15 == a3)
  {
    v30 = v29;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v29);
    v16 = v30;
  }
  else
  {
    v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    v30 = v16;
  }
  v31 = v11;
  if (!v16)
    goto LABEL_20;
  if (v16 == v29)
  {
    v35 = &v34;
    (*(void (**)(_QWORD *, __int128 *))(v29[0] + 24))(v29, &v34);
  }
  else
  {
    v35 = (__int128 *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
  }
LABEL_21:
  v36 = v31;
  if (a2)
  {
    v17 = (__int128 *)a1;
    while (1)
    {
      v18 = *((_QWORD *)v17 + 1);
      if (*(_QWORD *)v36 != *(_QWORD *)v17 || *((_DWORD *)v36 + 2) != (_DWORD)v18)
      {
        v26[0] = *(_QWORD *)v17;
        v26[1] = v18;
        if (!v35)
          goto LABEL_64;
        if (!(*(unsigned int (**)(__int128 *, _QWORD *))(*(_QWORD *)v35 + 48))(v35, v26))
          break;
      }
      if (++v17 == v14)
        goto LABEL_28;
    }
    v19 = 0;
  }
  else
  {
LABEL_28:
    v19 = 1;
  }
  if (v35 == &v34)
  {
    v20 = (void (**)(void))(v34 + 32);
  }
  else
  {
    if (!v35)
      goto LABEL_35;
    v20 = (void (**)(void))(*(_QWORD *)v35 + 40);
  }
  (*v20)();
LABEL_35:
  result = (uint64_t)v30;
  if (v30 == v29)
  {
    v21 = (uint64_t (**)(void))(v29[0] + 32);
    goto LABEL_39;
  }
  if (v30)
  {
    v21 = (uint64_t (**)(void))(*v30 + 40);
LABEL_39:
    result = (*v21)();
  }
  if (v19)
  {
    v22 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      a5 = *((_DWORD *)v11 + 2);
      goto LABEL_45;
    }
  }
LABEL_43:
  if (!a4)
    return result;
  v22 = a4;
LABEL_45:
  v23 = (_QWORD *)a3[3];
  if (v23)
  {
    if (v23 == a3)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v27);
      if (!a2)
        goto LABEL_57;
    }
    else
    {
      v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
      if (!a2)
        goto LABEL_57;
    }
LABEL_52:
    v24 = 16 * a2;
    while (1)
    {
      v34 = *(_OWORD *)a1;
      if (!v28)
        break;
      if ((*(unsigned int (**)(_QWORD *, __int128 *))(*v28 + 48))(v28, &v34))
      {
        *(_QWORD *)a1 = v22;
        *(_DWORD *)(a1 + 8) = a5;
      }
      a1 += 16;
      v24 -= 16;
      if (!v24)
        goto LABEL_57;
    }
LABEL_64:
    sub_1C485C2F0();
  }
  v28 = 0;
  if (a2)
    goto LABEL_52;
LABEL_57:
  result = (uint64_t)v28;
  if (v28 == v27)
  {
    v25 = (uint64_t (**)(void))(v27[0] + 32);
  }
  else
  {
    if (!v28)
      return result;
    v25 = (uint64_t (**)(void))(*v28 + 40);
  }
  return (*v25)();
}

uint64_t *sub_1C5D959A8(uint64_t *a1, uint64_t a2, _BOOL8 a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, uint64_t a9, const llvm::APInt *a10, uint64_t a11)
{
  _BOOL8 v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::APInt *v25;
  unsigned int v26;
  _BOOL8 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  void (**v34)(void);
  uint64_t *v35;
  int v37;
  int v38;
  const llvm::APInt *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  BOOL v71;
  _QWORD *v72;
  void (**v73)(_QWORD *);
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  _QWORD *v78;
  void (**v79)(_QWORD *);
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  _QWORD *v84;
  void (**v85)(_QWORD *);
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t *v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  llvm *v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  char v157;
  char v158;
  char v159;
  char v160;
  __int16 v161;
  llvm *v162;
  uint64_t v163;
  llvm *ShiftAmountTy;
  uint64_t v165;
  llvm *v166;
  uint64_t v167;
  __int128 v168;
  _QWORD v169[3];
  _QWORD *v170;
  _QWORD v171[3];
  _QWORD *v172;
  _QWORD v173[3];
  _QWORD *v174;
  _QWORD v175[3];
  _QWORD *v176;
  void *v177;
  uint64_t v178;
  _BYTE v179[256];
  void *v180;
  uint64_t v181;
  _BYTE v182[256];
  void *v183;
  uint64_t v184;
  _BYTE v185[256];
  void *v186;
  uint64_t v187;
  _QWORD v188[34];

  v15 = a3;
  v188[32] = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)(a9 + 16);
  v168 = *(_OWORD *)(*(_QWORD *)(a4 + 40) + 16 * a5);
  v166 = (llvm *)sub_1C6131264((unsigned __int8 *)&v168, a2, a3);
  v167 = v19;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, v168, *((uint64_t *)&v168 + 1), *(_QWORD *)(**(_QWORD **)(v18 + 40) + 40) + 272, *(_DWORD *)(a9 + 8) != 0);
  v165 = v20;
  v162 = (llvm *)sub_1C6131264((unsigned __int8 *)&ShiftAmountTy, v20, v21);
  v163 = v22;
  if (*(int *)(a9 + 8) >= 2)
  {
    if (!(_BYTE)v168)
      return 0;
    if (v168 == 1)
    {
      v27 = v15;
    }
    else
    {
      v27 = v15;
      v35 = 0;
      if (!a1[v168 + 12])
        return v35;
    }
    v15 = v27;
    if ((*((unsigned __int8 *)a1 + 390 * v168 + 3920) | 4) != 4)
      return 0;
  }
  v23 = sub_1C5D4F7E8(a6, a7, 0, 0);
  if (!v23)
    return 0;
  v24 = *(_QWORD *)(v23 + 80);
  v25 = (llvm::APInt *)(v24 + 24);
  v26 = *(_DWORD *)(v24 + 32);
  if (v26 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v25) == v26)
      goto LABEL_10;
    return 0;
  }
  if (*(_QWORD *)v25)
    return 0;
LABEL_10:
  v150 = a8;
  v149 = (llvm *)a2;
  v154 = v15;
  v161 = 0;
  v160 = 1;
  v159 = 0;
  v158 = 0;
  v157 = 1;
  v186 = v188;
  v187 = 0x1000000000;
  v183 = v185;
  v184 = 0x1000000000;
  v180 = v182;
  v181 = 0x1000000000;
  v177 = v179;
  v178 = 0x1000000000;
  v28 = *(uint64_t **)(a4 + 32);
  v152 = v28[1];
  v153 = *v28;
  v30 = v28[5];
  v29 = v28[6];
  v31 = operator new(0x78uLL);
  *v31 = &off_1E8199C90;
  v31[1] = (char *)&v161 + 1;
  v31[2] = &v161;
  v31[3] = &v160;
  v31[4] = &v159;
  v31[5] = &v157;
  v31[6] = &v158;
  v31[7] = &v186;
  v31[8] = v18;
  v31[9] = a10;
  v31[10] = &v166;
  v31[11] = &v183;
  v31[12] = &v180;
  v31[13] = &v162;
  v31[14] = &v177;
  v176 = v31;
  v151 = v30;
  v148 = v29;
  v33 = sub_1C6364CB8(v30, v29, (uint64_t)v175, 0);
  if (v176 == v175)
  {
    v34 = (void (**)(void))(v175[0] + 32);
  }
  else
  {
    if (!v176)
      goto LABEL_20;
    v34 = (void (**)(void))(*v176 + 40);
  }
  (*v34)();
LABEL_20:
  if (v160)
    v37 = 0;
  else
    v37 = v33;
  if (v37 != 1)
  {
    v35 = 0;
    goto LABEL_150;
  }
  v35 = 0;
  if (!v157)
  {
    v38 = *(unsigned __int16 *)(v151 + 24);
    if (v38 == 156)
    {
      v39 = a10;
      v40 = sub_1C5CA0F18(v18, (llvm *)v168, *((uint64_t *)&v168 + 1), a10, *(_QWORD *)v186, *((_QWORD *)v186 + 1));
      v41 = v45;
      v42 = sub_1C5CA0F18(v18, (llvm *)v168, *((uint64_t *)&v168 + 1), a10, *(_QWORD *)v183, *((_QWORD *)v183 + 1));
      v146 = v46;
      v47 = sub_1C5CA0F18(v18, ShiftAmountTy, v165, a10, *(_QWORD *)v180, *((_QWORD *)v180 + 1));
      v142 = v48;
      v143 = (uint64_t)v47;
      v43 = sub_1C5CA0F18(v18, (llvm *)v168, *((uint64_t *)&v168 + 1), a10, *(_QWORD *)v177, *((_QWORD *)v177 + 1));
LABEL_29:
      v44 = v49;
LABEL_30:
      v50 = *(_QWORD *)(v18 + 832);
      v144 = v44;
      v51 = (uint64_t)v43;
      if (v50)
        LOWORD(v50) = *(_WORD *)(v50 + 8);
      v53 = sub_1C5D56C70(v18, 58, v39, (llvm *)v168, *((uint64_t *)&v168 + 1), v153, v152, v32, (uint64_t)v40, v41, v50);
      v55 = v54;
      v56 = *(unsigned int *)(a11 + 8);
      if (v56 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v56 + 1, 8);
        LODWORD(v56) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v56) = v53;
      ++*(_DWORD *)(a11 + 8);
      if (v158)
      {
        if (*(int *)(a9 + 8) >= 2)
        {
          if (!(_BYTE)v168)
            goto LABEL_86;
          if (v168 != 1)
          {
            v35 = 0;
            if (!a1[v168 + 12])
              goto LABEL_150;
          }
          v39 = a10;
          if ((*((unsigned __int8 *)a1 + 390 * v168 + 3918) | 4) != 4)
          {
LABEL_52:
            v35 = 0;
            goto LABEL_150;
          }
        }
        v57 = *(_QWORD *)(v18 + 832);
        if (v57)
          LOWORD(v57) = *(_WORD *)(v57 + 8);
        v53 = sub_1C5D56C70(v18, 56, v39, (llvm *)v168, *((uint64_t *)&v168 + 1), (uint64_t)v53, v55, v52, (uint64_t)v42, v146, v57);
        v55 = v55 & 0xFFFFFFFF00000000 | v58;
        v59 = *(unsigned int *)(a11 + 8);
        v60 = v154;
        if (v59 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v59 + 1, 8);
          LODWORD(v59) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v59) = v53;
        ++*(_DWORD *)(a11 + 8);
      }
      else
      {
        v60 = v154;
      }
      if (v159)
      {
        if (*(int *)(a9 + 8) >= 2)
        {
          if (!(_BYTE)v168)
            goto LABEL_86;
          if (v168 != 1)
          {
            v35 = 0;
            if (!a1[v168 + 12])
              goto LABEL_150;
          }
          v60 = v154;
          v39 = a10;
          if ((*((unsigned __int8 *)a1 + 390 * v168 + 4041) | 4) != 4)
            goto LABEL_52;
        }
        v61 = *(_QWORD *)(v18 + 832);
        if (v61)
          LOWORD(v61) = *(_WORD *)(v61 + 8);
        v53 = sub_1C5D56C70(v18, 179, v39, (llvm *)v168, *((uint64_t *)&v168 + 1), (uint64_t)v53, v55, v52, v143, v142, v61);
        v55 = v55 & 0xFFFFFFFF00000000 | v62;
        v63 = *(unsigned int *)(a11 + 8);
        if (v63 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v63 + 1, 8);
          LODWORD(v63) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v63) = v53;
        ++*(_DWORD *)(a11 + 8);
      }
      if (v150 == 17)
        v64 = 13;
      else
        v64 = 10;
      v65 = sub_1C6367818((_QWORD *)v18, v64);
      v68 = *(_QWORD *)(v18 + 832);
      if (v68)
        LOWORD(v68) = *(_WORD *)(v68 + 8);
      v69 = sub_1C5D58E08(v18, (const char *)0xC1, v39, v149, v60, (uint64_t)v53, v55, v67, v51, v144, v65, v66, SHIDWORD(v66), v68);
      if (!HIBYTE(v161))
      {
        v35 = v69;
        goto LABEL_150;
      }
      if ((_BYTE)v168)
      {
        if (v168 != 1)
        {
          v35 = 0;
          if (!a1[v168 + 12])
            goto LABEL_150;
        }
        if ((*((unsigned __int8 *)a1 + 390 * v168 + 3879) | 4) != 4
          || v168 != 1 && !a1[v168 + 12]
          || (*((unsigned __int8 *)a1 + 390 * v168 + 4033) | 4) != 4
          || v168 != 1 && !a1[v168 + 12]
          || v150 <= 0x185 && (*((_BYTE *)a1 + 390 * v168 + v150 + 3862) & 0xFB) != 0)
        {
          goto LABEL_52;
        }
        if ((_BYTE)v149)
        {
          if (v149 != 1)
          {
            v35 = 0;
            if (!a1[v149 + 12])
              goto LABEL_150;
          }
          if ((*((unsigned __int8 *)a1 + 390 * v149 + 4053) | 4) == 4)
          {
            v145 = v70;
            v147 = (uint64_t)v69;
            v98 = *(unsigned int *)(a11 + 8);
            if (v98 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v98 + 1, 8);
              LODWORD(v98) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v98) = v147;
            ++*(_DWORD *)(a11 + 8);
            v99 = sub_1C6131328((unsigned __int8 *)&v166, v70, v71);
            v100 = v99;
            v156 = v99;
            if (v99 > 0x40)
            {
              v102 = &v155;
              llvm::APInt::initSlowCase((llvm::APInt *)&v155, 0, 0);
              v101 = v100 - 1;
              if (v156 >= 0x41)
                v102 = (unint64_t *)(v155 + 8 * (v101 >> 6));
            }
            else
            {
              v155 = 0;
              LOBYTE(v101) = v99 - 1;
              v102 = &v155;
            }
            *v102 |= 1 << v101;
            v105 = sub_1C63666FC(v18, (llvm::LLVMContext *)&v155, a10, v168, *((uint64_t *)&v168 + 1), 0, 0);
            v106 = v103;
            if (v156 >= 0x41 && v155)
              MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
            v107 = sub_1C6131328((unsigned __int8 *)&v166, v103, v104);
            v108 = v107;
            v156 = v107;
            if (v107 > 0x40)
            {
              v110 = &v155;
              llvm::APInt::initSlowCase((llvm::APInt *)&v155, -1, 1);
              LODWORD(v109) = v108 - 1;
              if (v156 >= 0x41)
                v110 = (unint64_t *)(v155 + 8 * (v109 >> 6));
            }
            else
            {
              if (v107)
                v109 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v107;
              else
                v109 = 0;
              v155 = v109;
              LOBYTE(v109) = v107 - 1;
              v110 = &v155;
            }
            *v110 &= ~(1 << v109);
            v113 = sub_1C63666FC(v18, (llvm::LLVMContext *)&v155, a10, v168, *((uint64_t *)&v168 + 1), 0, 0);
            v114 = v111;
            if (v156 >= 0x41 && v155)
              MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
            v156 = sub_1C6131328((unsigned __int8 *)&v166, v111, v112);
            if (v156 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v155, 0, 0);
            else
              v155 = 0;
            v115 = sub_1C63666FC(v18, (llvm::LLVMContext *)&v155, a10, v168, *((uint64_t *)&v168 + 1), 0, 0);
            v117 = v116;
            if (v156 >= 0x41 && v155)
              MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
            v118 = sub_1C6367818((_QWORD *)v18, 0x11u);
            v121 = *(_QWORD *)(v18 + 832);
            if (v121)
              LOWORD(v121) = *(_WORD *)(v121 + 8);
            v123 = sub_1C5D58E08(v18, (const char *)0xC1, a10, v149, v154, v151, v148, v120, v105, v106, v118, v119, SHIDWORD(v119), v121);
            v125 = v124;
            v126 = *(unsigned int *)(a11 + 8);
            if (v126 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v126 + 1, 8);
              LODWORD(v126) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v126) = v123;
            ++*(_DWORD *)(a11 + 8);
            v127 = *(_QWORD *)(v18 + 832);
            if (v127)
              LOWORD(v127) = *(_WORD *)(v127 + 8);
            v128 = sub_1C5D56C70(v18, 171, a10, (llvm *)v168, *((uint64_t *)&v168 + 1), v153, v152, v122, v113, v114, v127);
            v130 = v129;
            v131 = *(unsigned int *)(a11 + 8);
            if (v131 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v131 + 1, 8);
              LODWORD(v131) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v131) = v128;
            ++*(_DWORD *)(a11 + 8);
            v132 = sub_1C6367818((_QWORD *)v18, v150);
            v135 = *(_QWORD *)(v18 + 832);
            if (v135)
              LOWORD(v135) = *(_WORD *)(v135 + 8);
            v137 = sub_1C5D58E08(v18, (const char *)0xC1, a10, v149, v154, (uint64_t)v128, v130, v134, v115, v117, v132, v133, SHIDWORD(v133), v135);
            v139 = v138;
            v140 = *(unsigned int *)(a11 + 8);
            if (v140 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v140 + 1, 8);
              LODWORD(v140) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v140) = v137;
            ++*(_DWORD *)(a11 + 8);
            v141 = *(_QWORD *)(v18 + 832);
            if (v141)
              LOWORD(v141) = *(_WORD *)(v141 + 8);
            v35 = sub_1C5D58E08(v18, (const char *)0xBF, a10, v149, v154, (uint64_t)v123, v125, v136, (uint64_t)v137, v139, v147, v145, SHIDWORD(v145), v141);
            goto LABEL_150;
          }
          goto LABEL_52;
        }
      }
LABEL_86:
      v35 = 0;
      goto LABEL_150;
    }
    v39 = a10;
    if (v38 != 146)
    {
      v40 = *(uint64_t **)v186;
      v41 = *((unsigned int *)v186 + 2);
      v42 = *(uint64_t **)v183;
      v146 = *((unsigned int *)v183 + 2);
      v142 = *((unsigned int *)v180 + 2);
      v143 = *(_QWORD *)v180;
      v43 = *(uint64_t **)v177;
      v44 = *((unsigned int *)v177 + 2);
      goto LABEL_30;
    }
    if (!(_BYTE)v161)
      goto LABEL_100;
    v173[0] = &off_1E8199C48;
    v173[1] = sub_1C6368AD4;
    v174 = v173;
    sub_1C5D95640((uint64_t)v186, v187, v173, 0, 0);
    v72 = v174;
    if (v174 == v173)
    {
      v73 = (void (**)(_QWORD *))(v173[0] + 32);
      v72 = v173;
    }
    else
    {
      if (!v174)
        goto LABEL_90;
      v73 = (void (**)(_QWORD *))(*v174 + 40);
    }
    (*v73)(v72);
LABEL_90:
    v74 = v183;
    v75 = v184;
    v171[0] = &off_1E8199C48;
    v171[1] = sub_1C636F400;
    v172 = v171;
    v76 = sub_1C6366AB4(v18, 0, a10, v166, v167, 0, 0);
    sub_1C5D95640((uint64_t)v74, v75, v171, (uint64_t)v76, v77);
    v78 = v172;
    if (v172 == v171)
    {
      v79 = (void (**)(_QWORD *))(v171[0] + 32);
      v78 = v171;
    }
    else
    {
      if (!v172)
      {
LABEL_95:
        v80 = v180;
        v81 = v181;
        v169[0] = &off_1E8199C48;
        v169[1] = sub_1C636F400;
        v170 = v169;
        v39 = a10;
        v82 = sub_1C6366AB4(v18, 0, a10, v162, v163, 0, 0);
        sub_1C5D95640((uint64_t)v80, v81, v169, (uint64_t)v82, v83);
        v84 = v170;
        if (v170 == v169)
        {
          v85 = (void (**)(_QWORD *))(v169[0] + 32);
          v84 = v169;
LABEL_99:
          (*v85)(v84);
          goto LABEL_100;
        }
        if (v170)
        {
          v85 = (void (**)(_QWORD *))(*v170 + 40);
          goto LABEL_99;
        }
LABEL_100:
        v86 = *(_QWORD *)(v18 + 832);
        if (v86)
          v87 = *(unsigned __int16 *)(v86 + 8);
        else
          v87 = 0;
        v40 = sub_1C636D0C8(v18, (const char *)0x92, v39, (llvm *)v168, *((uint64_t *)&v168 + 1), (uint64_t *)v186, v187, v87);
        LODWORD(v41) = v88;
        v89 = *(_QWORD *)(v18 + 832);
        if (v89)
          v90 = *(unsigned __int16 *)(v89 + 8);
        else
          v90 = 0;
        v42 = sub_1C636D0C8(v18, (const char *)0x92, v39, (llvm *)v168, *((uint64_t *)&v168 + 1), (uint64_t *)v183, v184, v90);
        v92 = *(_QWORD *)(v18 + 832);
        if (v92)
          v93 = *(unsigned __int16 *)(v92 + 8);
        else
          v93 = 0;
        v41 = v41;
        v146 = v91;
        v94 = sub_1C636D0C8(v18, (const char *)0x92, v39, ShiftAmountTy, v165, (uint64_t *)v180, v181, v93);
        v142 = v95;
        v143 = (uint64_t)v94;
        v96 = *(_QWORD *)(v18 + 832);
        if (v96)
          v97 = *(unsigned __int16 *)(v96 + 8);
        else
          v97 = 0;
        v43 = sub_1C636D0C8(v18, (const char *)0x92, v39, (llvm *)v168, *((uint64_t *)&v168 + 1), (uint64_t *)v177, v178, v97);
        goto LABEL_29;
      }
      v79 = (void (**)(_QWORD *))(*v172 + 40);
    }
    (*v79)(v78);
    goto LABEL_95;
  }
LABEL_150:
  if (v177 != v179)
    free(v177);
  if (v180 != v182)
    free(v180);
  if (v183 != v185)
    free(v183);
  if (v186 != v188)
    free(v186);
  return v35;
}

uint64_t *sub_1C5D96814(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, int *a7, unsigned int a8)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  BOOL v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  int v115;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  int v131;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  int v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  BOOL v159;
  BOOL v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  int v167;
  _BOOL4 v169;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  int v190;
  _BOOL4 v192;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  int v210;
  BOOL v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t v223;
  llvm::detail::DoubleAPFloat *v224;
  llvm::detail::DoubleAPFloat *v225;
  llvm::detail::DoubleAPFloat *v226;
  __int16 v227;
  uint64_t v228;
  llvm *v229;
  int v230;
  int v231;
  uint64_t v232[2];
  uint64_t v233;
  unsigned __int8 *v234;
  int v235;
  void *v236;
  uint64_t v237;
  uint64_t *v238;
  int v239;
  char v240;
  unsigned int *v241;
  uint64_t *v242;
  int v243;
  char v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  int v248;
  char v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int16 *)(a2 + 24);
  if ((_DWORD)v10 == 222)
  {
    *a7 = 0;
    return **(uint64_t ***)(a2 + 32);
  }
  if (a8 > 6)
    return 0;
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 40) + 16 * a3;
  v228 = *(_QWORD *)(v19 + 8);
  v229 = *(llvm **)v19;
  v20 = 1;
  if (!v18)
  {
LABEL_9:
    v21 = 1;
    goto LABEL_11;
  }
  while (*(_DWORD *)(v18 + 8) != a3)
  {
LABEL_8:
    v18 = *(_QWORD *)(v18 + 32);
    if (!v18)
      goto LABEL_9;
  }
  if (v20)
  {
    --v20;
    goto LABEL_8;
  }
  v21 = 0;
LABEL_11:
  v227 = *(_WORD *)(a2 + 72);
  v22 = *a4;
  if (v20)
    v23 = 0;
  else
    v23 = v21;
  if ((_DWORD)v10 != 12 && (v23 & 1) == 0)
  {
    if ((_DWORD)v10 != 215)
      return 0;
    v24 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8));
    if (!(*(unsigned int (**)(uint64_t, llvm *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1288))(a1, v229, v228, *v24, v24[1]))return 0;
  }
  v26 = a8 + 1;
  v27 = *(unsigned __int8 **)(a2 + 64);
  v234 = v27;
  if (v27)
    llvm::MetadataTracking::track((uint64_t)&v234, v27, 2);
  v235 = *(_DWORD *)(a2 + 60);
  v232[0] = (uint64_t)v232;
  v232[1] = (uint64_t)v232;
  v233 = 0;
  if ((int)v10 <= 140)
  {
    if ((int)v10 > 97)
    {
      if ((v10 - 98) >= 2)
        goto LABEL_190;
      v69 = *(uint64_t **)(a2 + 32);
      v70 = *v69;
      v71 = v69[1];
      v72 = v69[5];
      v225 = (llvm::detail::DoubleAPFloat *)v69[6];
      v231 = 2;
      v217 = v71;
      v219 = v70;
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1808))(a1);
      v222 = v74;
      if (v73)
      {
        v215 = v72;
        v75 = v26;
        v76 = operator new(0x88uLL);
        *v76 = 0;
        v76[1] = 0;
        sub_1C6329230((uint64_t)(v76 + 2), v73, v222);
        v77 = v232[0];
        *v76 = v232[0];
        v76[1] = v232;
        *(_QWORD *)(v77 + 8) = v76;
        v232[0] = (uint64_t)v76;
        v26 = v75;
        v72 = v215;
        ++v233;
      }
      v230 = 2;
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::detail::DoubleAPFloat *, _QWORD *, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 1808))(a1, v72, v225, a4, a5, a6, &v230, v26);
      v80 = v79;
      sub_1C637AB34(v232);
      if (!v73 || v231 > v230)
      {
        v82 = sub_1C5D56858(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0);
        if (v82)
        {
          v84 = *(_QWORD *)(v82 + 80);
          LODWORD(v237) = 64;
          v236 = (void *)0x4000000000000000;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v245, (const llvm::APInt **)&v236);
          v237 = v245;
          v238 = v246;
          v239 = (int)v247;
          v240 = BYTE4(v247) & 0xF;
          llvm::APFloat::convert((uint64_t)&v236, *(void **)(v84 + 32), 1, &v245);
          v85 = sub_1C47ECB98(v84 + 24, (uint64_t)&v236);
          if ((_UNKNOWN *)v237 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v238);
          }
          else if ((*(_DWORD *)(v237 + 8) - 64) <= 0xFFFFFF7F && v238)
          {
            MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
          }
          if (v85 && *(_WORD *)(a2 + 24) == 98)
            goto LABEL_190;
        }
        if (!v78)
          goto LABEL_190;
        *a7 = v230;
        v11 = sub_1C5D56C70((uint64_t)a4, v10, (const llvm::APInt *)&v234, v229, v228, v219, v217, v83, v78, v80, v227);
        v88 = (uint64_t *)v73 == v11 && (_DWORD)v222 == v86;
        if (!v73)
          goto LABEL_293;
        if (v88)
          goto LABEL_293;
        v78 = v73;
        if (*(_QWORD *)(v73 + 48))
          goto LABEL_293;
LABEL_198:
        v161 = a4;
        v162 = v78;
        goto LABEL_199;
      }
      *a7 = v231;
      v157 = sub_1C5D56C70((uint64_t)a4, v10, (const llvm::APInt *)&v234, v229, v228, v73, v222, v81, v72, (unint64_t)v225, v227);
      v11 = v157;
      v159 = (_DWORD)v80 == v158;
LABEL_192:
      v160 = v159 && v78 == (_QWORD)v157;
      if (v160 || !v78 || *(_QWORD *)(v78 + 48))
        goto LABEL_293;
      goto LABEL_198;
    }
    if ((_DWORD)v10 != 12)
    {
      if ((_DWORD)v10 != 96)
      {
        if ((_DWORD)v10 != 97 || !(*(_WORD *)(v22 + 1020) & 0x10 | v227 & 0x40))
          goto LABEL_190;
        v57 = *(uint64_t **)(a2 + 32);
        v58 = *v57;
        v59 = v57[1];
        v11 = (uint64_t *)v57[5];
        v60 = v57[6];
        v61 = sub_1C5D56858(*v57, v59, 1);
        if (v61)
        {
          v63 = *(_QWORD *)(v61 + 80);
          v64 = *(_UNKNOWN **)(v63 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v63 + 40) : v63 + 24;
          if ((*(_BYTE *)(v64 + 28) & 7) == 3)
          {
            *a7 = 0;
            goto LABEL_293;
          }
        }
        *a7 = 1;
        v153 = sub_1C5D56C70((uint64_t)a4, 97, (const llvm::APInt *)&v234, v229, v228, (uint64_t)v11, v60, v62, v58, v59, v227);
LABEL_292:
        v11 = v153;
        goto LABEL_293;
      }
      if (!(*(_WORD *)(v22 + 1020) & 0x10 | v227 & 0x40)
        || (_DWORD)a5
        && (!(_BYTE)v229
         || v229 != 1 && !*(_QWORD *)(a1 + 8 * v229 + 96)
         || !(_BYTE)v229
         || (*(unsigned __int8 *)(a1 + 390 * v229 + 3959) | 4) != 4))
      {
        goto LABEL_190;
      }
      v96 = *(uint64_t **)(a2 + 32);
      v98 = *v96;
      v97 = v96[1];
      v223 = v96[6];
      v226 = (llvm::detail::DoubleAPFloat *)v96[5];
      LODWORD(v236) = 2;
      v99 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD *, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 1808))(a1, v98, v97, a4, a5, a6, &v236, v26);
      v101 = v100;
      if (v99)
      {
        v220 = v97;
        v102 = v98;
        v103 = v26;
        v104 = operator new(0x88uLL);
        *v104 = 0;
        v104[1] = 0;
        sub_1C6329230((uint64_t)(v104 + 2), v99, v101);
        v105 = v232[0];
        *v104 = v232[0];
        v104[1] = v232;
        *(_QWORD *)(v105 + 8) = v104;
        v232[0] = (uint64_t)v104;
        v26 = v103;
        v98 = v102;
        v97 = v220;
        ++v233;
      }
      LODWORD(v245) = 2;
      v78 = (*(uint64_t (**)(uint64_t, llvm::detail::DoubleAPFloat *, unint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1808))(a1, v226, v223, a4, a5, a6, &v245, v26);
      v107 = v106;
      sub_1C637AB34(v232);
      if (!v99 || (int)v236 > (int)v245)
      {
        if (!v78)
          goto LABEL_190;
        *a7 = v245;
        v11 = sub_1C5D56C70((uint64_t)a4, 97, (const llvm::APInt *)&v234, v229, v228, v78, v107, v108, v98, v97, v227);
        v111 = (uint64_t *)v99 == v11 && (_DWORD)v101 == v109;
        if (!v99)
          goto LABEL_293;
        if (v111)
          goto LABEL_293;
        v78 = v99;
        if (*(_QWORD *)(v99 + 48))
          goto LABEL_293;
        goto LABEL_198;
      }
      *a7 = (int)v236;
      v157 = sub_1C5D56C70((uint64_t)a4, 97, (const llvm::APInt *)&v234, v229, v228, v99, v101, v108, (uint64_t)v226, v223, v227);
      v11 = v157;
      v159 = (_DWORD)v107 == v212;
      goto LABEL_192;
    }
    if ((_BYTE)v229
      && (v229 == 1 || (_BYTE)v229 && *(_QWORD *)(a1 + 8 * v229 + 96))
      && !*(_BYTE *)(a1 + 390 * v229 + 3874))
    {
LABEL_148:
      v128 = *(_QWORD *)(a2 + 80);
      v129 = *(_QWORD *)(v128 + 32);
      if ((_UNKNOWN *)v129 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v237, (const llvm::detail::DoubleAPFloat *)(v128 + 32));
      }
      else
      {
        v237 = *(_QWORD *)(v128 + 32);
        if ((*(_DWORD *)(v129 + 8) + 64) >= 0x80)
          v238 = (uint64_t *)operator new[]();
        v130 = *(_BYTE *)(v128 + 52);
        v131 = v130 & 7;
        v240 = v240 & 0xF0 | v130 & 0xF;
        v239 = *(_DWORD *)(v128 + 48);
        v133 = (v130 & 6) != 0 && v131 != 3;
        if (v131 == 1 || v133)
        {
          v134 = *(unsigned int *)(v237 + 8);
          if ((v134 - 64) <= 0xFFFFFF7F)
            v135 = v238;
          else
            v135 = (uint64_t *)&v238;
          v138 = *(uint64_t **)(v128 + 40);
          v137 = (uint64_t *)(v128 + 40);
          v136 = v138;
          if ((*(_DWORD *)(*(v137 - 1) + 8) - 64) >= 0xFFFFFF80)
            v136 = v137;
          if (v134 <= 0xFFFFFFBF)
          {
            v139 = (unint64_t)(v134 + 64) >> 6;
            do
            {
              v140 = *v136++;
              *v135++ = v140;
              --v139;
            }
            while (v139);
          }
        }
      }
      if ((_UNKNOWN *)v237 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v237);
      else
        v240 ^= 8u;
      v141 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v236, (const llvm::APFloat *)&v234, v229, v228, 0);
      v11 = v141;
      v143 = *(_QWORD *)(a2 + 48);
      if (!v143)
        goto LABEL_183;
      v144 = 1;
      do
      {
        if (*(_DWORD *)(v143 + 8) == a3)
        {
          if (!v144)
            goto LABEL_183;
          --v144;
        }
        v143 = *(_QWORD *)(v143 + 32);
      }
      while (v143);
      if (v144)
      {
LABEL_183:
        v156 = v141[6];
        if (!v156)
        {
LABEL_186:
          v145 = 1;
LABEL_187:
          if ((_UNKNOWN *)v237 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v238);
          }
          else if ((*(_DWORD *)(v237 + 8) - 64) <= 0xFFFFFF7F && v238)
          {
            MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
          }
          if ((v145 & 1) == 0)
            goto LABEL_293;
          goto LABEL_190;
        }
        while (*(_DWORD *)(v156 + 8) != v142)
        {
          v156 = *(_QWORD *)(v156 + 32);
          if (!v156)
            goto LABEL_186;
        }
      }
      v145 = 0;
      *a7 = 1;
      goto LABEL_187;
    }
    v112 = *(_QWORD *)(a2 + 80);
    v113 = *(_QWORD *)(v112 + 32);
    if ((_UNKNOWN *)v113 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241, (const llvm::detail::DoubleAPFloat *)(v112 + 32));
    }
    else
    {
      v241 = *(unsigned int **)(v112 + 32);
      if ((*(_DWORD *)(v113 + 8) + 64) >= 0x80)
        v242 = (uint64_t *)operator new[]();
      v114 = *(_BYTE *)(v112 + 52);
      v115 = v114 & 7;
      v244 = v244 & 0xF0 | v114 & 0xF;
      v243 = *(_DWORD *)(v112 + 48);
      v117 = (v114 & 6) != 0 && v115 != 3;
      if (v115 == 1 || v117)
      {
        v118 = v241[2];
        if ((v118 - 64) <= 0xFFFFFF7F)
          v119 = v242;
        else
          v119 = (uint64_t *)&v242;
        v122 = *(uint64_t **)(v112 + 40);
        v121 = (uint64_t *)(v112 + 40);
        v120 = v122;
        if ((*(_DWORD *)(*(v121 - 1) + 8) - 64) >= 0xFFFFFF80)
          v120 = v121;
        if (v118 <= 0xFFFFFFBF)
        {
          v123 = (unint64_t)(v118 + 64) >> 6;
          do
          {
            v124 = *v120++;
            *v119++ = v124;
            --v123;
          }
          while (v123);
        }
      }
    }
    v125 = v241;
    if (v241 == (unsigned int *)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v241);
      v125 = v241;
      if (v241 == (unsigned int *)&unk_1C866F1C0)
      {
        v126 = (uint64_t)v242;
        v242 = 0;
        v125 = &unk_1C866F1C0;
LABEL_143:
        v237 = (uint64_t)v125;
        v238 = (uint64_t *)v126;
        v241 = (unsigned int *)&unk_1C866F210;
        v127 = (*(uint64_t (**)(uint64_t, void **, llvm *, uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, &v236, v229, v228, a6);
        if ((_UNKNOWN *)v237 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v238);
        }
        else if ((*(_DWORD *)(v237 + 8) - 64) <= 0xFFFFFF7F && v238)
        {
          MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
        }
        if (v241 == (unsigned int *)&unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v242);
        }
        else if (v241[2] - 64 <= 0xFFFFFF7F && v242)
        {
          MEMORY[0x1CAA32F9C](v242, 0x1000C8000313F17);
        }
        if ((a5 ^ 1 | v127) != 1)
          goto LABEL_190;
        goto LABEL_148;
      }
    }
    else
    {
      v244 ^= 8u;
    }
    v126 = (uint64_t)v242;
    v239 = v243;
    v240 = v240 & 0xF0 | v244 & 0xF;
    goto LABEL_143;
  }
  if ((int)v10 > 211)
  {
    if ((_DWORD)v10 == 212)
    {
      v146 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 1808))(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a4, a5, a6, a7, v26);
      if (!v146)
        goto LABEL_190;
      v149 = *(_QWORD *)(a2 + 32);
      v150 = *(_QWORD *)(v149 + 40);
      v151 = *(_QWORD *)(v149 + 48);
      v152 = a4[104];
      if (v152)
        LOWORD(v152) = *(_WORD *)(v152 + 8);
      v153 = sub_1C5D56C70((uint64_t)a4, 212, (const llvm::APInt *)&v234, v229, v228, v146, v147, v148, v150, v151, v152);
    }
    else
    {
      if ((_DWORD)v10 != 215 && (_DWORD)v10 != 226)
        goto LABEL_190;
      v65 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 1808))(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a4, a5, a6, a7, v26);
      if (!v65)
        goto LABEL_190;
      v67 = a4[104];
      if (v67)
        v68 = *(_WORD *)(v67 + 8);
      else
        v68 = 0;
      v153 = sub_1C5D52060((uint64_t)a4, v10, (const llvm::APInt *)&v234, v229, v228, v65, v66, v68);
    }
    goto LABEL_292;
  }
  if ((v10 - 141) < 2)
  {
    if (*(_WORD *)(v22 + 1020) & 0x10 | v227 & 0x40)
    {
      v28 = *(uint64_t **)(a2 + 32);
      v29 = *v28;
      v30 = v28[1];
      v31 = v28[6];
      v224 = (llvm::detail::DoubleAPFloat *)v28[5];
      v32 = v28[10];
      v33 = v28[11];
      LODWORD(v236) = 2;
      v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 1808))(a1, v32, v33, a4, a5, a6, &v236, v26);
      if (v34)
      {
        v216 = v31;
        v218 = v30;
        v36 = v35;
        v37 = v34;
        v221 = v26;
        v38 = operator new(0x88uLL);
        *v38 = 0;
        v38[1] = 0;
        v214 = v37;
        v39 = v37;
        v40 = v36;
        sub_1C6329230((uint64_t)(v38 + 2), v39, v36);
        v41 = v232[0];
        *v38 = v232[0];
        v38[1] = v232;
        *(_QWORD *)(v41 + 8) = v38;
        v232[0] = (uint64_t)v38;
        v42 = v221;
        ++v233;
        LODWORD(v245) = 2;
        v213 = v29;
        v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 1808))(a1, v29, v218, a4, a5, a6, &v245, v221);
        v45 = v44;
        if (v43)
        {
          v46 = operator new(0x88uLL);
          *v46 = 0;
          v46[1] = 0;
          sub_1C6329230((uint64_t)(v46 + 2), v43, v45);
          v47 = v232[0];
          *v46 = v232[0];
          v46[1] = v232;
          *(_QWORD *)(v47 + 8) = v46;
          v232[0] = (uint64_t)v46;
          v42 = v221;
          ++v233;
        }
        v231 = 2;
        v48 = (*(uint64_t (**)(uint64_t, llvm::detail::DoubleAPFloat *, uint64_t, _QWORD *, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 1808))(a1, v224, v216, a4, a5, a6, &v231, v42);
        v50 = v49;
        sub_1C637AB34(v232);
        if (v43 && (v52 = v245, (int)v245 <= v231))
        {
          if ((int)v236 < (int)v245)
            v52 = (int)v236;
          *a7 = v52;
          v209 = sub_1C5D58E08((uint64_t)a4, (const char *)v10, (const llvm::APInt *)&v234, v229, v228, v43, v45, v51, (uint64_t)v224, v216, v214, v40, SHIDWORD(v40), v227);
          v11 = v209;
          v211 = (_DWORD)v50 == v210 && v48 == (_QWORD)v209;
          if (v211 || !v48 || *(_QWORD *)(v48 + 48))
            goto LABEL_293;
        }
        else
        {
          if (!v48)
            goto LABEL_190;
          v53 = (int)v236;
          if ((int)v236 >= v231)
            v53 = v231;
          *a7 = v53;
          v11 = sub_1C5D58E08((uint64_t)a4, (const char *)v10, (const llvm::APInt *)&v234, v229, v228, v213, v218, v51, v48, v50, v214, v40, SHIDWORD(v40), v227);
          v56 = (uint64_t *)v43 == v11 && (_DWORD)v45 == v54;
          if (!v43)
            goto LABEL_293;
          if (v56)
            goto LABEL_293;
          v48 = v43;
          if (*(_QWORD *)(v43 + 48))
            goto LABEL_293;
        }
        v161 = a4;
        v162 = v48;
LABEL_199:
        sub_1C6365540(v161, v162);
        goto LABEL_293;
      }
    }
LABEL_190:
    v11 = 0;
    goto LABEL_293;
  }
  if ((_DWORD)v10 != 146)
    goto LABEL_190;
  v89 = *(_QWORD *)(a2 + 32);
  if (*(_WORD *)(a2 + 56))
  {
    v90 = 40 * *(unsigned __int16 *)(a2 + 56);
    v91 = *(_QWORD *)(a2 + 32);
    do
    {
      v92 = *(unsigned __int16 *)(*(_QWORD *)v91 + 24);
      v93 = v92 > 0x33;
      v94 = (1 << v92) & 0x8001000001000;
      if (v93 || v94 == 0)
        goto LABEL_190;
      v91 += 40;
      v90 -= 40;
    }
    while (v90);
  }
  if ((_BYTE)v229
    && (v229 == 1 || (_BYTE)v229 && *(_QWORD *)(a1 + 8 * v229 + 96))
    && !*(_BYTE *)(a1 + 390 * v229 + 3874))
  {
    if (!*(_WORD *)(a2 + 56) || !*(_BYTE *)(a1 + 390 * v229 + 4008))
      goto LABEL_181;
  }
  else if (!*(_WORD *)(a2 + 56))
  {
    goto LABEL_181;
  }
  v163 = v89 + 40 * *(unsigned __int16 *)(a2 + 56);
  while (2)
  {
    if (*(_WORD *)(*(_QWORD *)v89 + 24) == 51)
      goto LABEL_232;
    v164 = *(_QWORD *)(*(_QWORD *)v89 + 80);
    v165 = *(_QWORD *)(v164 + 32);
    if ((_UNKNOWN *)v165 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v246, (const llvm::detail::DoubleAPFloat *)(v164 + 32));
    }
    else
    {
      v246 = *(uint64_t **)(v164 + 32);
      if ((*(_DWORD *)(v165 + 8) + 64) >= 0x80)
        v247 = (uint64_t *)operator new[]();
      v166 = *(_BYTE *)(v164 + 52);
      v167 = v166 & 7;
      v249 = v249 & 0xF0 | v166 & 0xF;
      v248 = *(_DWORD *)(v164 + 48);
      v169 = (v166 & 6) != 0 && v167 != 3;
      if (v167 == 1 || v169)
      {
        v171 = *((unsigned int *)v246 + 2);
        v172 = (uint64_t *)&v247;
        if ((v171 - 64) <= 0xFFFFFF7F)
          v172 = v247;
        v175 = *(uint64_t **)(v164 + 40);
        v174 = (uint64_t *)(v164 + 40);
        v173 = v175;
        if ((*(_DWORD *)(*(v174 - 1) + 8) - 64) >= 0xFFFFFF80)
          v173 = v174;
        if (v171 <= 0xFFFFFFBF)
        {
          v176 = (unint64_t)(v171 + 64) >> 6;
          do
          {
            v177 = *v173++;
            *v172++ = v177;
            --v176;
          }
          while (v176);
        }
      }
    }
    v178 = (uint64_t)v246;
    if (v246 != (uint64_t *)&unk_1C866F1C0)
    {
      v249 ^= 8u;
      goto LABEL_226;
    }
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v246);
    v178 = (uint64_t)v246;
    if (v246 == (uint64_t *)&unk_1C866F1C0)
    {
      v180 = (uint64_t)v247;
      v247 = 0;
      v237 = (uint64_t)&unk_1C866F1C0;
      v238 = (uint64_t *)v180;
    }
    else
    {
LABEL_226:
      v237 = v178;
      v238 = v247;
      v239 = v248;
      v240 = v240 & 0xF0 | v249 & 0xF;
    }
    v246 = (uint64_t *)&unk_1C866F210;
    v179 = (*(uint64_t (**)(uint64_t, void **, llvm *, uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, &v236, v229, v228, a6);
    if ((_UNKNOWN *)v237 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v238);
    }
    else if ((*(_DWORD *)(v237 + 8) - 64) <= 0xFFFFFF7F && v238)
    {
      MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
    }
    if (v246 == (uint64_t *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v247);
    }
    else if ((*((_DWORD *)v246 + 2) - 64) <= 0xFFFFFF7F && v247)
    {
      MEMORY[0x1CAA32F9C](v247, 0x1000C8000313F17);
    }
    if (v179)
    {
LABEL_232:
      v89 += 40;
      if (v89 == v163)
        goto LABEL_181;
      continue;
    }
    break;
  }
  if ((a5 & 1) != 0)
    goto LABEL_190;
LABEL_181:
  v236 = &v238;
  v237 = 0x400000000;
  if (*(_WORD *)(a2 + 56))
  {
    v181 = *(_QWORD **)(a2 + 32);
    v182 = &v181[5 * *(unsigned __int16 *)(a2 + 56)];
    do
    {
      v184 = *v181;
      v183 = v181[1];
      if (*(_WORD *)(*v181 + 24) == 51)
      {
        v185 = v237;
        if (v237 >= (unint64_t)HIDWORD(v237))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, (uint64_t)&v238, v237 + 1, 16);
          v185 = v237;
        }
        v186 = (char *)v236 + 16 * v185;
        *v186 = v184;
        v186[1] = v183;
        LODWORD(v237) = v237 + 1;
      }
      else
      {
        v187 = *(_QWORD *)(v184 + 80);
        v188 = *(_QWORD *)(v187 + 32);
        if ((_UNKNOWN *)v188 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v246, (const llvm::detail::DoubleAPFloat *)(v187 + 32));
        }
        else
        {
          v246 = *(uint64_t **)(v187 + 32);
          if ((*(_DWORD *)(v188 + 8) + 64) >= 0x80)
            v247 = (uint64_t *)operator new[]();
          v189 = *(_BYTE *)(v187 + 52);
          v190 = v189 & 7;
          v249 = v249 & 0xF0 | v189 & 0xF;
          v248 = *(_DWORD *)(v187 + 48);
          v192 = (v189 & 6) != 0 && v190 != 3;
          if (v190 == 1 || v192)
          {
            v194 = *((unsigned int *)v246 + 2);
            v195 = (uint64_t *)&v247;
            if ((v194 - 64) <= 0xFFFFFF7F)
              v195 = v247;
            v198 = *(uint64_t **)(v187 + 40);
            v197 = (uint64_t *)(v187 + 40);
            v196 = v198;
            if ((*(_DWORD *)(*(v197 - 1) + 8) - 64) >= 0xFFFFFF80)
              v196 = v197;
            if (v194 <= 0xFFFFFFBF)
            {
              v199 = (unint64_t)(v194 + 64) >> 6;
              do
              {
                v200 = *v196++;
                *v195++ = v200;
                --v199;
              }
              while (v199);
            }
          }
        }
        if (v246 == (uint64_t *)&unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v246);
        else
          v249 ^= 8u;
        v201 = *(_QWORD *)(v184 + 40) + 16 * v183;
        v202 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v245, (const llvm::APFloat *)&v234, *(llvm **)v201, *(_QWORD *)(v201 + 8), 0);
        v204 = v203;
        v205 = v237;
        if (v237 >= (unint64_t)HIDWORD(v237))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, (uint64_t)&v238, v237 + 1, 16);
          v205 = v237;
        }
        v206 = (uint64_t **)((char *)v236 + 16 * v205);
        *v206 = v202;
        v206[1] = v204;
        LODWORD(v237) = v237 + 1;
        if (v246 == (uint64_t *)&unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v247);
        }
        else if ((*((_DWORD *)v246 + 2) - 64) <= 0xFFFFFF7F && v247)
        {
          MEMORY[0x1CAA32F9C](v247, 0x1000C8000313F17);
        }
      }
      v181 += 5;
    }
    while (v181 != v182);
    v155 = (uint64_t *)v236;
    v154 = v237;
  }
  else
  {
    v154 = 0;
    v155 = (uint64_t *)&v238;
  }
  *a7 = 1;
  v207 = a4[104];
  if (v207)
    v208 = *(unsigned __int16 *)(v207 + 8);
  else
    v208 = 0;
  v11 = sub_1C636D0C8((uint64_t)a4, (const char *)0x92, (const llvm::APInt *)&v234, v229, v228, v155, v154, v208);
  if (v236 != &v238)
    free(v236);
LABEL_293:
  sub_1C637AB34(v232);
  if (v234)
    llvm::MetadataTracking::untrack((uint64_t)&v234, v234);
  return v11;
}

uint64_t sub_1C5D97CD8(uint64_t *a1, uint64_t a2, llvm *a3, uint64_t a4, const llvm::APInt *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, llvm *a12, uint64_t a13, uint64_t a14, int a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t *a22,uint64_t a23)
{
  BOOL v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const llvm::APInt *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t **v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t **v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  llvm *ShiftAmountTy;
  const llvm::APInt *v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  __int16 v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t *v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t v121;
  __int16 v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  llvm *v157;
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  uint64_t *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t **v176;
  unsigned int v177;
  uint64_t *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  __int16 v182;
  unsigned int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t *v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int v207;
  int v208;
  _QWORD *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  uint64_t v216;
  uint64_t *v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  __int16 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int16 v225;
  uint64_t *v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t v229;
  __int16 v230;
  unsigned int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  int v240;
  int v241;
  _QWORD *v242;
  int v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t *v246;
  int v247;
  unint64_t v248;
  uint64_t v249;
  __int16 v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t **v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t *v268;
  int v269;
  int v270;
  unsigned int v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  unsigned int v291;
  unint64_t v292;
  llvm *v293;
  uint64_t v294;
  uint64_t v295;
  __int16 v296;
  uint64_t v297;
  uint64_t *v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  __int16 v302;
  unsigned int v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  unsigned int v316;
  unint64_t v317;
  llvm *v318;
  uint64_t v319;
  uint64_t v320;
  __int16 v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  unsigned int v327;
  uint64_t *v328;
  unsigned int v329;
  unint64_t v330;
  llvm *v331;
  uint64_t v332;
  uint64_t v333;
  __int16 v334;
  uint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  __int16 v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t **v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t *v352;
  uint64_t v353;
  __int16 v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  unint64_t v364;
  unsigned int v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unsigned int v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unsigned int v377;
  unint64_t v378;
  llvm *v379;
  unsigned int v380;
  unint64_t v381;
  const llvm::APInt *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _BOOL4 v387;
  _BOOL4 v388;
  _BOOL4 v389;
  uint64_t *v390;
  int v391;
  unsigned int v392;
  unint64_t v393;
  unsigned int v394;
  uint64_t *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unsigned int v399;
  llvm *v400;
  uint64_t v401;
  llvm *v402;
  uint64_t v403;

  v27 = (char)a12;
  v402 = a3;
  v403 = a4;
  v400 = a12;
  v401 = a13;
  if (!a15)
  {
    v31 = 1;
    v27 = 1;
    v29 = 1;
    v28 = 1;
    goto LABEL_22;
  }
  if (!(_BYTE)a12)
  {
    v28 = 0;
    v29 = 0;
LABEL_12:
    v31 = 0;
    goto LABEL_15;
  }
  if (a12 != 1 && (!a1[a12 + 12] || a12 == 0))
  {
    v28 = 0;
    v29 = 0;
    v27 = 0;
    goto LABEL_12;
  }
  v32 = (char *)a1 + 390 * a12;
  v29 = (v32[4022] & 0xFB) == 0;
  v28 = (v32[4021] & 0xFB) == 0;
  v27 = (v32[3925] & 0xFB) == 0;
  v33 = v32[3926];
  if (!v33)
  {
    v31 = 1;
    goto LABEL_22;
  }
  v31 = v33 == 4;
  if (v28)
    goto LABEL_22;
LABEL_15:
  if (!v29 && !v31 && !v27)
    return 0;
LABEL_22:
  v388 = v28;
  v389 = v31;
  v387 = v29;
  v391 = a2;
  v392 = sub_1C6131328((unsigned __int8 *)&v402, a2, (BOOL)a3);
  v394 = sub_1C6131328((unsigned __int8 *)&v400, v36, v37);
  v38 = a16;
  v39 = a20;
  v41 = sub_1C636A8B4(a14, (uint64_t)v400, v401, (uint64_t)v400, v401);
  v42 = v40;
  if ((unint64_t)a16 | (unint64_t)a20)
  {
    v44 = a21;
    v45 = a17;
    if (a16)
      goto LABEL_37;
    return 0;
  }
  if (!(_BYTE)v400)
    return 0;
  v43 = a5;
  if (v400 != 1)
  {
    v34 = 0;
    if (!a1[v400 + 12])
      return v34;
  }
  if ((*((unsigned __int8 *)a1 + 390 * v400 + 4063) | 4) != 4)
    return 0;
  v46 = *(_QWORD *)(a14 + 832);
  v383 = v41;
  v47 = v46 ? *(_WORD *)(v46 + 8) : 0;
  a5 = v43;
  v385 = v40;
  v38 = sub_1C5D52060(a14, 201, v43, v400, v401, a6, a7, v47);
  v48 = *(_QWORD *)(a14 + 832);
  v45 = v49;
  v50 = v48 ? *(_WORD *)(v48 + 8) : 0;
  v39 = sub_1C5D52060(a14, 201, a5, v400, v401, a9, a10, v50);
  v41 = v383;
  v42 = v385;
  if (!v38)
    return 0;
LABEL_37:
  v384 = v41;
  v399 = v392;
  v377 = v44;
  v380 = v45;
  v386 = v42;
  if (v392 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v398, 0, 0);
    v51 = v399;
  }
  else
  {
    v398 = 0;
    v51 = v392;
  }
  v52 = a17 & 0xFFFFFFFF00000000;
  v53 = a21 & 0xFFFFFFFF00000000;
  sub_1C4912E54(&v398, v51 - v394, v51);
  v382 = a5;
  if (sub_1C63686D8(a14, a6, a7, (uint64_t)&v398, 0))
  {
    if (sub_1C63686D8(a14, a9, a10, (uint64_t)&v398, 0))
    {
      v55 = v380 | v52;
      v56 = v377 | v53;
      if (v389)
      {
        v65 = sub_1C636D6B4(a14, (const char *)0x40, v382, v384, v386, (uint64_t)v38, v380, v54, (uint64_t)v39, v377);
        v63 = v107;
        v67 = 1;
        v61 = v65;
LABEL_48:
        v68 = a11;
        v69 = *(unsigned int *)(a11 + 8);
        v70 = (_DWORD *)(a11 + 8);
        if (v69 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v69 + 1, 16);
          v68 = a11;
          LODWORD(v69) = *(_DWORD *)(a11 + 8);
        }
        v71 = (uint64_t **)(*(_QWORD *)v68 + 16 * v69);
        *v71 = v61;
        v71[1] = (uint64_t *)v63;
        v72 = *(_DWORD *)(v68 + 12);
        v73 = (*(_DWORD *)(v68 + 8) + 1);
        *(_DWORD *)(v68 + 8) = v73;
        if (v73 >= v72)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, v68 + 16, v73 + 1, 16);
          v68 = a11;
          LODWORD(v73) = *(_DWORD *)(a11 + 8);
        }
        v74 = (uint64_t **)(*(_QWORD *)v68 + 16 * v73);
        *v74 = v65;
        v74[1] = (uint64_t *)v67;
        ++*(_DWORD *)(v68 + 8);
        if (v391 == 58)
          goto LABEL_136;
        v75 = sub_1C6366AB4(a14, 0, v382, v400, v401, 0, 0);
        v76 = a11;
        v78 = v77;
        v79 = *(unsigned int *)(a11 + 8);
        if (v79 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v79 + 1, 16);
          v76 = a11;
          LODWORD(v79) = *(_DWORD *)(a11 + 8);
        }
        v80 = (uint64_t **)(*(_QWORD *)v76 + 16 * v79);
        *v80 = v75;
        v80[1] = (uint64_t *)v78;
        goto LABEL_74;
      }
      v57 = a14;
      if (v388)
      {
        v58 = *(_QWORD *)(a14 + 832);
        if (v58)
          LOWORD(v58) = *(_WORD *)(v58 + 8);
        v356 = v377 | v53;
        v59 = (uint64_t)v39;
        v61 = sub_1C5D56C70(a14, 58, v382, v400, v401, (uint64_t)v38, v380 | v52, v54, (uint64_t)v39, v356, v58);
        v63 = v62;
        v64 = *(_QWORD *)(a14 + 832);
        if (v64)
          LOWORD(v64) = *(_WORD *)(v64 + 8);
        v65 = sub_1C5D56C70(a14, 159, v382, v400, v401, (uint64_t)v38, v55, v60, v59, v56, v64);
        v67 = v66;
        goto LABEL_48;
      }
      v388 = 0;
    }
    else
    {
      v57 = a14;
    }
  }
  else
  {
    v57 = a14;
  }
  v375 = a17 & 0xFFFFFFFF00000000;
  if ((_BYTE)v402)
    v81 = v402 - 15 < 0x9C;
  else
    v81 = (*(_DWORD *)(v403 + 8) & 0xFE) == 18;
  if (v391 == 58 && !v81)
  {
    v82 = sub_1C6368B30(v57, a6, a7, 0);
    v57 = a14;
    if (v82 > v394)
    {
      v83 = sub_1C6368B30(a14, a9, a10, 0);
      v57 = a14;
      if (v83 > v394)
      {
        v85 = v380 | v52;
        v86 = v377 | v53;
        if (v27)
        {
          v75 = sub_1C636D6B4(a14, (const char *)0x3F, v382, v384, v386, (uint64_t)v38, v380, v84, (uint64_t)v39, v377);
          v92 = v114;
          v78 = 1;
          v90 = v75;
LABEL_71:
          v76 = a11;
          v95 = *(unsigned int *)(a11 + 8);
          v70 = (_DWORD *)(a11 + 8);
          if (v95 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v95 + 1, 16);
            v76 = a11;
            LODWORD(v95) = *(_DWORD *)(a11 + 8);
          }
          v96 = (uint64_t **)(*(_QWORD *)v76 + 16 * v95);
          *v96 = v90;
          v96[1] = (uint64_t *)v92;
LABEL_74:
          v97 = *(_DWORD *)(v76 + 12);
          v98 = (*(_DWORD *)(v76 + 8) + 1);
          *(_DWORD *)(v76 + 8) = v98;
LABEL_132:
          if (v98 >= v97)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, v76 + 16, v98 + 1, 16);
            v76 = a11;
            LODWORD(v98) = *(_DWORD *)(a11 + 8);
          }
          v175 = *(_QWORD *)v76;
LABEL_135:
          v176 = (uint64_t **)(v175 + 16 * v98);
          *v176 = v75;
          v176[1] = (uint64_t *)v78;
          ++*v70;
LABEL_136:
          v34 = 1;
          goto LABEL_151;
        }
        if (v387)
        {
          v87 = *(_QWORD *)(a14 + 832);
          if (v87)
            LOWORD(v87) = *(_WORD *)(v87 + 8);
          v357 = v377 | v53;
          v88 = (uint64_t)v39;
          v90 = sub_1C5D56C70(a14, 58, v382, v400, v401, (uint64_t)v38, v380 | v375, v84, (uint64_t)v39, v357, v87);
          v92 = v91;
          v93 = *(_QWORD *)(a14 + 832);
          if (v93)
            LOWORD(v93) = *(_WORD *)(v93 + 8);
          v75 = sub_1C5D56C70(a14, 160, v382, v400, v401, (uint64_t)v38, v85, v89, v88, v86, v93);
          v78 = v94;
          goto LABEL_71;
        }
      }
    }
  }
  v34 = a18;
  v365 = a19;
  v367 = a19 & 0xFFFFFFFF00000000;
  v369 = a23;
  v371 = a23 & 0xFFFFFFFF00000000;
  v99 = v57;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v402, v403, *(_QWORD *)(**(_QWORD **)(v57 + 40) + 40) + 272, 1);
  v101 = v382;
  v103 = sub_1C6366AB4(v99, v392 - v394, v382, ShiftAmountTy, v102, 0, 0);
  v106 = (uint64_t)v103;
  v395 = a22;
  if (a18 | (unint64_t)a22)
    goto LABEL_100;
  if (!(_BYTE)v402)
    goto LABEL_150;
  if (v402 == 1 || (v34 = 0, a1[v402 + 12]))
  {
    if ((*((unsigned __int8 *)a1 + 390 * v402 + 4039) | 4) != 4 || !(_BYTE)v400)
      goto LABEL_150;
    if (v400 == 1 || (v34 = 0, a1[v400 + 12]))
    {
      if ((*((unsigned __int8 *)a1 + 390 * v400 + 4063) | 4) != 4)
        goto LABEL_150;
      v108 = v104;
      v109 = *(_QWORD *)(a14 + 832);
      if (v109)
        LOWORD(v109) = *(_WORD *)(v109 + 8);
      v111 = sub_1C5D56C70(a14, 177, v382, v402, v403, a6, a7, v105, (uint64_t)v103, v104, v109);
      v112 = *(_QWORD *)(a14 + 832);
      if (v112)
        v113 = *(_WORD *)(v112 + 8);
      else
        v113 = 0;
      v116 = sub_1C5D52060(a14, 201, v382, v400, v401, (uint64_t)v111, v110 | v367, v113);
      v365 = v117;
      v118 = *(_QWORD *)(a14 + 832);
      if (v118)
        LOWORD(v118) = *(_WORD *)(v118 + 8);
      v120 = sub_1C5D56C70(a14, 177, v382, v402, v403, a9, a10, v115, v106, v108, v118);
      v121 = *(_QWORD *)(a14 + 832);
      if (v121)
        v122 = *(_WORD *)(v121 + 8);
      else
        v122 = 0;
      v101 = v382;
      v395 = sub_1C5D52060(a14, 201, v382, v400, v401, (uint64_t)v120, v119 | v371, v122);
      v369 = v123;
      v104 = v108;
      v34 = (uint64_t)v116;
LABEL_100:
      if (v34)
      {
        v124 = v380 | v375;
        v125 = v377 | v53;
        if (v389)
        {
          v396 = v34;
          v364 = v104;
          v393 = v377 | v53;
          v397 = v380 | v375;
          v133 = sub_1C636D6B4(a14, (const char *)0x40, v101, v384, v386, (uint64_t)v38, v380, v105, (uint64_t)v39, v377);
          v130 = v177;
          v135 = 1;
          v128 = v133;
        }
        else
        {
          if (!v388)
            goto LABEL_150;
          v126 = *(_QWORD *)(a14 + 832);
          v364 = v104;
          v396 = v34;
          if (v126)
            LOWORD(v126) = *(_WORD *)(v126 + 8);
          v128 = sub_1C5D56C70(a14, 58, v101, v400, v401, (uint64_t)v38, v124, v105, (uint64_t)v39, v125, v126);
          v130 = v129;
          v131 = *(_QWORD *)(a14 + 832);
          if (v131)
            LOWORD(v131) = *(_WORD *)(v131 + 8);
          v393 = v125;
          v397 = v380 | v375;
          v133 = sub_1C5D56C70(a14, 159, v382, v400, v401, (uint64_t)v38, v124, v127, (uint64_t)v39, v125, v131);
          v135 = v134;
        }
        v136 = a11;
        v137 = *(unsigned int *)(a11 + 8);
        v70 = (_DWORD *)(a11 + 8);
        if (v137 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v137 + 1, 16);
          v136 = a11;
          LODWORD(v137) = *(_DWORD *)(a11 + 8);
        }
        v138 = (uint64_t **)(*(_QWORD *)v136 + 16 * v137);
        *v138 = v128;
        v138[1] = (uint64_t *)v130;
        ++*(_DWORD *)(v136 + 8);
        if (v391 == 58)
        {
          v141 = *(_QWORD *)(a14 + 832);
          if (v141)
            LOWORD(v141) = *(_WORD *)(v141 + 8);
          v161 = sub_1C5D56C70(a14, 58, v382, v400, v401, (uint64_t)v38, v397, v132, (uint64_t)v395, v369 | v371, v141);
          v163 = v162;
          v164 = *(_QWORD *)(a14 + 832);
          if (v164)
            LOWORD(v164) = *(_WORD *)(v164 + 8);
          v166 = sub_1C5D56C70(a14, 58, v382, v400, v401, v396, v365 | v367, v160, (uint64_t)v39, v393, v164);
          v168 = v167;
          v169 = *(_QWORD *)(a14 + 832);
          if (v169)
            LOWORD(v169) = *(_WORD *)(v169 + 8);
          v171 = sub_1C5D56C70(a14, 56, v382, v400, v401, (uint64_t)v133, v135, v165, (uint64_t)v161, v163 | v371, v169);
          v173 = *(_QWORD *)(a14 + 832);
          if (v173)
            LOWORD(v173) = *(_WORD *)(v173 + 8);
          v75 = sub_1C5D56C70(a14, 56, v382, v400, v401, (uint64_t)v171, v170, v172, (uint64_t)v166, v168 | v367, v173);
          v78 = v174;
          v76 = a11;
          v98 = *(unsigned int *)(a11 + 8);
          v97 = *(_DWORD *)(a11 + 12);
          goto LABEL_132;
        }
        v139 = *(_QWORD *)(a14 + 832);
        if (v139)
          v140 = *(_WORD *)(v139 + 8);
        else
          v140 = 0;
        v142 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v133, v135, v140);
        v378 = v144;
        v381 = v369 | v371;
        if (v389)
        {
          v372 = (uint64_t)v142;
          v374 = v106;
          v370 = (uint64_t)v39;
          v151 = a14;
          v376 = (uint64_t)v38;
          v152 = sub_1C636D6B4(a14, (const char *)0x40, v382, v384, v386, (uint64_t)v38, v397, v143, (uint64_t)v395, v381);
          v149 = v199;
          v154 = 1;
          v147 = v152;
          goto LABEL_123;
        }
        if (v388)
        {
          v372 = (uint64_t)v142;
          v374 = v106;
          v370 = (uint64_t)v39;
          v376 = (uint64_t)v38;
          v145 = *(_QWORD *)(a14 + 832);
          if (v145)
            LOWORD(v145) = *(_WORD *)(v145 + 8);
          v147 = sub_1C5D56C70(a14, 58, v382, v400, v401, (uint64_t)v38, v397, v143, (uint64_t)v395, v381, v145);
          v149 = v148;
          v150 = *(_QWORD *)(a14 + 832);
          if (v150)
            LOWORD(v150) = *(_WORD *)(v150 + 8);
          v151 = a14;
          v152 = sub_1C5D56C70(a14, 159, v382, v400, v401, (uint64_t)v38, v397, v146, (uint64_t)v395, v381, v150);
          v154 = v153;
LABEL_123:
          v155 = v149;
          v157 = v402;
          v156 = v403;
          v158 = *(_QWORD *)(v151 + 832);
          if (v158)
            v159 = *(_WORD *)(v158 + 8);
          else
            v159 = 0;
          v178 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v147, v155, v159);
          v180 = v179;
          v181 = *(_QWORD *)(a14 + 832);
          if (v181)
            v182 = *(_WORD *)(v181 + 8);
          else
            v182 = 0;
          v184 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v152, v154, v182);
          v186 = *(_QWORD *)(a14 + 832);
          if (v186)
            LOWORD(v186) = *(_WORD *)(v186 + 8);
          v187 = sub_1C5D56C70(a14, 175, v382, v402, v403, (uint64_t)v184, v183, v185, v374, v364, v186);
          v190 = *(_QWORD *)(a14 + 832);
          if (v190)
            LOWORD(v190) = *(_WORD *)(v190 + 8);
          v191 = sub_1C5D56C70(a14, 172, v382, v402, v403, (uint64_t)v178, v180, v189, (uint64_t)v187, v188, v190);
          v194 = *(_QWORD *)(a14 + 832);
          if (v194)
            LOWORD(v194) = *(_WORD *)(v194 + 8);
          v196 = sub_1C5D56C70(a14, 56, v382, v157, v156, v372, v378, v193, (uint64_t)v191, v192, v194);
          v198 = v197;
          v373 = v365 | v367;
          if (v389)
          {
            v200 = sub_1C636D6B4(a14, (const char *)0x40, v382, v384, v386, v396, v373, v195, v370, v393);
            v202 = v201;
            v366 = 1;
            v363 = v200;
          }
          else
          {
            if (!v388)
              goto LABEL_150;
            v203 = *(_QWORD *)(a14 + 832);
            if (v203)
              LOWORD(v203) = *(_WORD *)(v203 + 8);
            v363 = sub_1C5D56C70(a14, 58, v382, v400, v401, v396, v373, v195, v370, v393, v203);
            v202 = v205;
            v206 = *(_QWORD *)(a14 + 832);
            if (v206)
              LOWORD(v206) = *(_WORD *)(v206 + 8);
            v200 = sub_1C5D56C70(a14, 159, v382, v400, v401, v396, v373, v204, v370, v393, v206);
            v366 = v207;
          }
          v368 = v378 & 0xFFFFFFFF00000000;
          v208 = v198;
          v209 = sub_1C6366AB4(a14, 0, v382, v400, v401, 0, 0);
          v358 = v210;
          v359 = (uint64_t)v209;
          v379 = (llvm *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, llvm *, uint64_t))(*a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a14 + 40) + 40) + 272, *(_QWORD *)(a14 + 56), v402, v403);
          v212 = v211;
          if ((_BYTE)v402
            && (v402 == 1 || a1[v402 + 12])
            && (*((unsigned __int8 *)a1 + 390 * v402 + 3930) | 4) == 4
            && (v402 == 1 || a1[v402 + 12])
            && (*((unsigned __int8 *)a1 + 390 * v402 + 3932) | 4) == 4)
          {
            v213 = sub_1C636A8B4(a14, (uint64_t)v402, v403, 172, 0);
            v361 = v214;
            v215 = 0;
            v216 = *(_QWORD *)(a14 + 832);
            if (v216)
              v215 = *(_WORD *)(v216 + 8);
            v217 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v363, v202, v215);
            v219 = v218;
            v220 = *(_QWORD *)(a14 + 832);
            if (v220)
              v221 = *(_WORD *)(v220 + 8);
            else
              v221 = 0;
            v272 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v200, v366, v221);
            v274 = *(_QWORD *)(a14 + 832);
            if (v274)
              LOWORD(v274) = *(_WORD *)(v274 + 8);
            v275 = sub_1C5D56C70(a14, 175, v382, v402, v403, (uint64_t)v272, v271, v273, v374, v364, v274);
            v278 = *(_QWORD *)(a14 + 832);
            if (v278)
              LOWORD(v278) = *(_WORD *)(v278 + 8);
            v279 = sub_1C5D56C70(a14, 172, v382, v402, v403, (uint64_t)v217, v219, v277, (uint64_t)v275, v276, v278);
            v246 = sub_1C636D6B4(a14, (const char *)0x44, v382, v213, v361, (uint64_t)v196, v208, v281, (uint64_t)v279, v280);
            v247 = 1;
          }
          else
          {
            v222 = sub_1C636A8B4(a14, (uint64_t)v402, v403, (uint64_t)v379, v211);
            v360 = v223;
            v362 = v222;
            v224 = *(_QWORD *)(a14 + 832);
            if (v224)
              v225 = *(_WORD *)(v224 + 8);
            else
              v225 = 0;
            v226 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v363, v202, v225);
            v228 = v227;
            v229 = *(_QWORD *)(a14 + 832);
            if (v229)
              v230 = *(_WORD *)(v229 + 8);
            else
              v230 = 0;
            v232 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v200, v366, v230);
            v234 = *(_QWORD *)(a14 + 832);
            if (v234)
              LOWORD(v234) = *(_WORD *)(v234 + 8);
            v235 = sub_1C5D56C70(a14, 175, v382, v402, v403, (uint64_t)v232, v231, v233, v374, v364, v234);
            v238 = *(_QWORD *)(a14 + 832);
            if (v238)
              LOWORD(v238) = *(_WORD *)(v238 + 8);
            v239 = sub_1C5D56C70(a14, 172, v382, v402, v403, (uint64_t)v226, v228, v237, (uint64_t)v235, v236, v238);
            v241 = v240;
            v242 = sub_1C6366AB4(a14, 0, v382, v379, v212, 0, 0);
            v246 = sub_1C636D72C(a14, (const char *)0x48, v382, v362, v360, (uint64_t)v196, v208, v244, (uint64_t)v239, v241, (uint64_t)v242, v243);
            v247 = 0;
          }
          v248 = v245 | v368;
          v249 = *(_QWORD *)(a14 + 832);
          if (v249)
            v250 = *(_WORD *)(v249 + 8);
          else
            v250 = 0;
          v252 = sub_1C5D52060(a14, 201, v382, v400, v401, (uint64_t)v246, v248, v250);
          v254 = v253;
          v255 = *(unsigned int *)(a11 + 8);
          if (v255 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v255 + 1, 16);
            LODWORD(v255) = *(_DWORD *)(a11 + 8);
          }
          v256 = (uint64_t **)(*(_QWORD *)a11 + 16 * v255);
          *v256 = v252;
          v256[1] = v254;
          ++*(_DWORD *)(a11 + 8);
          v257 = *(_QWORD *)(a14 + 832);
          if (v257)
            LOWORD(v257) = *(_WORD *)(v257 + 8);
          v259 = sub_1C5D56C70(a14, 177, v382, v402, v403, (uint64_t)v246, v248, v251, v374, v364, v257);
          v261 = v260;
          if (v391 == 63)
          {
            if (!v27)
            {
              if (!v387)
                goto LABEL_150;
              v262 = 160;
              goto LABEL_197;
            }
            v282 = 63;
          }
          else
          {
            if (!v389)
            {
              if (!v388)
                goto LABEL_150;
              v262 = 159;
LABEL_197:
              v263 = *(_QWORD *)(a14 + 832);
              if (v263)
                LOWORD(v263) = *(_WORD *)(v263 + 8);
              v390 = sub_1C5D56C70(a14, 58, v382, v400, v401, v396, v373, v258, (uint64_t)v395, v381, v263);
              v266 = v265;
              v267 = *(_QWORD *)(a14 + 832);
              if (v267)
                LOWORD(v267) = *(_WORD *)(v267 + 8);
              v268 = sub_1C5D56C70(a14, v262, v382, v400, v401, v396, v373, v264, (uint64_t)v395, v381, v267);
              v270 = v269;
              goto LABEL_212;
            }
            v282 = 64;
          }
          v268 = sub_1C636D6B4(a14, (const char *)v282, v382, v384, v386, v396, v373, v258, (uint64_t)v395, v381);
          v266 = v283;
          v270 = 1;
          v390 = v268;
LABEL_212:
          if (v247)
            v284 = 172;
          else
            v284 = (uint64_t)v379;
          if (v247)
            v285 = 0;
          else
            v285 = v212;
          if (v247)
            v286 = 70;
          else
            v286 = 72;
          v287 = sub_1C636A8B4(a14, (uint64_t)v400, v401, v284, v285);
          v290 = sub_1C636D72C(a14, (const char *)v286, v382, v287, v288, (uint64_t)v268, v270, v289, v359, v358, (uint64_t)v246, 1);
          v292 = v291;
          v293 = v402;
          v294 = v403;
          v295 = *(_QWORD *)(a14 + 832);
          if (v295)
            v296 = *(_WORD *)(v295 + 8);
          else
            v296 = 0;
          v297 = v261;
          v298 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v390, v266, v296);
          v300 = v299;
          v301 = *(_QWORD *)(a14 + 832);
          if (v301)
            v302 = *(_WORD *)(v301 + 8);
          else
            v302 = 0;
          v304 = sub_1C5D52060(a14, 199, v382, v402, v403, (uint64_t)v290, v292, v302);
          v306 = *(_QWORD *)(a14 + 832);
          if (v306)
            LOWORD(v306) = *(_WORD *)(v306 + 8);
          v307 = sub_1C5D56C70(a14, 175, v382, v402, v403, (uint64_t)v304, v303, v305, v374, v364, v306);
          v310 = *(_QWORD *)(a14 + 832);
          if (v310)
            LOWORD(v310) = *(_WORD *)(v310 + 8);
          v311 = sub_1C5D56C70(a14, 172, v382, v402, v403, (uint64_t)v298, v300, v309, (uint64_t)v307, v308, v310);
          v314 = *(_QWORD *)(a14 + 832);
          if (v314)
            LOWORD(v314) = *(_WORD *)(v314 + 8);
          v315 = sub_1C5D56C70(a14, 56, v382, v293, v294, (uint64_t)v259, v297 | v368, v313, (uint64_t)v311, v312, v314);
          v317 = v316 | v368;
          if (v391 == 63)
          {
            v318 = v402;
            v319 = v403;
            v320 = *(_QWORD *)(a14 + 832);
            if (v320)
              v321 = *(_WORD *)(v320 + 8);
            else
              v321 = 0;
            v322 = sub_1C5D52060(a14, 199, v382, v402, v403, v370, v393, v321);
            v325 = *(_QWORD *)(a14 + 832);
            if (v325)
              LOWORD(v325) = *(_WORD *)(v325 + 8);
            v326 = sub_1C5D56C70(a14, 57, v382, v318, v319, (uint64_t)v315, v317, v324, (uint64_t)v322, v323, v325);
            v328 = sub_1C47DF81C((_QWORD *)a14, v382, v396, v373, v359, v358, (uint64_t)v326, v327, (uint64_t)v315, v317, SHIDWORD(v317), 0x14u);
            v330 = v329 | v368;
            v331 = v402;
            v332 = v403;
            v333 = *(_QWORD *)(a14 + 832);
            if (v333)
              v334 = *(_WORD *)(v333 + 8);
            else
              v334 = 0;
            v335 = sub_1C5D52060(a14, 199, v382, v402, v403, v376, v397, v334);
            v338 = *(_QWORD *)(a14 + 832);
            if (v338)
              LOWORD(v338) = *(_WORD *)(v338 + 8);
            v339 = sub_1C5D56C70(a14, 57, v382, v331, v332, (uint64_t)v328, v330, v337, (uint64_t)v335, v336, v338);
            v315 = sub_1C47DF81C((_QWORD *)a14, v382, (uint64_t)v395, v381, v359, v358, (uint64_t)v339, v340, (uint64_t)v328, v330, SHIDWORD(v330), 0x14u);
            v317 = v341 | v368;
          }
          v342 = *(_QWORD *)(a14 + 832);
          if (v342)
            v343 = *(_WORD *)(v342 + 8);
          else
            v343 = 0;
          v345 = sub_1C5D52060(a14, 201, v382, v400, v401, (uint64_t)v315, v317, v343);
          v347 = v346;
          v348 = *(unsigned int *)(a11 + 8);
          if (v348 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v348 + 1, 16);
            LODWORD(v348) = *(_DWORD *)(a11 + 8);
          }
          v349 = (uint64_t **)(*(_QWORD *)a11 + 16 * v348);
          *v349 = v345;
          v349[1] = v347;
          ++*(_DWORD *)(a11 + 8);
          v350 = *(_QWORD *)(a14 + 832);
          if (v350)
            LOWORD(v350) = *(_WORD *)(v350 + 8);
          v352 = sub_1C5D56C70(a14, 177, v382, v402, v403, (uint64_t)v315, v317, v344, v374, v364, v350);
          v353 = *(_QWORD *)(a14 + 832);
          if (v353)
            v354 = *(_WORD *)(v353 + 8);
          else
            v354 = 0;
          v75 = sub_1C5D52060(a14, 201, v382, v400, v401, (uint64_t)v352, v351 | v368, v354);
          v78 = v355;
          v98 = *(unsigned int *)(a11 + 8);
          if (v98 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v98 + 1, 16);
            LODWORD(v98) = *(_DWORD *)(a11 + 8);
          }
          v175 = *(_QWORD *)a11;
          goto LABEL_135;
        }
LABEL_150:
        v34 = 0;
      }
    }
  }
LABEL_151:
  if (v399 >= 0x41 && v398)
    MEMORY[0x1CAA32F9C](v398, 0x1000C8000313F17);
  return v34;
}

uint64_t *sub_1C5D99590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int8x8_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;
  uint64_t v27;
  uint64_t *v28;
  uint8x8_t v30;
  BOOL v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  unsigned int v56;
  llvm *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int8x8_t v69;
  uint8x8_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  unsigned int v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  __int16 v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  unsigned __int8 *v153;
  int v154;
  llvm *v155;
  uint64_t v156;

  v6 = *(_QWORD *)(a2 + 40);
  v8 = *(llvm **)v6;
  v7 = *(_QWORD *)(v6 + 8);
  v155 = v8;
  v156 = v7;
  if (!(_BYTE)v8)
  {
    if ((*(_DWORD *)(v7 + 8) & 0xFE) != 0x12)
      goto LABEL_14;
    return 0;
  }
  if (v8 - 15 < 0x9C)
  {
    v9 = v8;
    v10 = *(_QWORD *)(a1 + 8 * v8 + 96);
    v11 = !v9 || v10 == 0;
    if (v11
      || (*(unsigned __int8 *)(a1 + 390 * v9 + 4037) | 4) != 4
      || (*(unsigned __int8 *)(a1 + 390 * v9 + 4039) | 4) != 4
      || (*(unsigned __int8 *)(a1 + 390 * v9 + 3919) | 4) != 4)
    {
      return 0;
    }
    v12 = *(unsigned __int8 *)(a1 + 390 * v9 + 4034);
    v32 = v12 > 4;
    v13 = (1 << v12) & 0x13;
    if (v32 || v13 == 0)
      return 0;
  }
LABEL_14:
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(uint64_t **)v15;
  v149 = *(_QWORD *)(v15 + 8);
  v151 = *(_QWORD *)(v15 + 40);
  v148 = *(_QWORD *)(v15 + 48);
  v18 = *(_QWORD *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 88);
  v19 = sub_1C6131328((unsigned __int8 *)&v155, a2, a3);
  v21 = *(unsigned __int16 *)(a2 + 24);
  v22 = *(unsigned __int8 **)(a2 + 64);
  v153 = v22;
  v23 = v21;
  if (v22)
  {
    llvm::MetadataTracking::track((uint64_t)&v153, v22, 2);
    v23 = *(unsigned __int16 *)(a2 + 24);
  }
  v154 = *(_DWORD *)(a2 + 60);
  v24 = *(_QWORD *)(v18 + 40) + 16 * v17;
  v26 = *(llvm **)v24;
  v25 = *(_QWORD *)(v24 + 8);
  if (v21 == 180)
    v27 = 181;
  else
    v27 = 180;
  if ((_BYTE)v155)
  {
    if (v155 == 1)
    {
      if (v23 > 0x185)
        goto LABEL_39;
    }
    else if (!*(_QWORD *)(a1 + 8 * v155 + 96) || v23 >= 0x186)
    {
      goto LABEL_39;
    }
    if ((*(_BYTE *)(a1 + 390 * v155 + v23 + 3862) & 0xFB) != 0
      && (v155 == 1 || *(_QWORD *)(a1 + 8 * v155 + 96)))
    {
      v20.i32[0] = v19;
      v30 = (uint8x8_t)vcnt_s8(v20);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = (*(_BYTE *)(a1 + 390 * v155 + v27 + 3862) & 0xFB) != 0 || v19 == 0;
      v32 = v31 || v30.i32[0] > 1u;
      if (!v32)
      {
        if (sub_1C5D99DFC(v18, v17, v19))
        {
          v117 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v153, v26, v25, 0, 0);
          v119 = *(_QWORD *)(a3 + 832);
          if (v119)
            LOWORD(v119) = *(_WORD *)(v119 + 8);
          v121 = v148;
          v120 = v149;
          v122 = (uint64_t *)v151;
          v123 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v117, v116, v118, v18, v17, v119);
        }
        else
        {
          v126 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v153, v26, v25, 0, 0);
          v129 = (uint64_t)v126;
          v130 = v127;
          v131 = *(_QWORD *)(a3 + 832);
          if (v21 == 180)
          {
            if (v131)
              LOWORD(v131) = *(_WORD *)(v131 + 8);
            v152 = sub_1C5D58E08(a3, (const char *)0xB5, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v149, v128, v151, v148, (uint64_t)v126, v127, SHIDWORD(v127), v131);
            v121 = v148 & 0xFFFFFFFF00000000 | v133;
            v134 = *(_QWORD *)(a3 + 832);
            if (v134)
              LOWORD(v134) = *(_WORD *)(v134 + 8);
            v16 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v149, v132, v129, v130, v134);
            v120 = v149 & 0xFFFFFFFF00000000 | v135;
            v122 = v152;
          }
          else
          {
            if (v131)
              LOWORD(v131) = *(_WORD *)(v131 + 8);
            v147 = sub_1C5D58E08(a3, (const char *)0xB4, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v149, v128, v151, v148, (uint64_t)v126, v127, SHIDWORD(v127), v131);
            v150 = v149 & 0xFFFFFFFF00000000 | v137;
            v138 = *(_QWORD *)(a3 + 832);
            if (v138)
              LOWORD(v138) = *(_WORD *)(v138 + 8);
            v122 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v153, v155, v156, v151, v148, v136, v129, v130, v138);
            v121 = v148 & 0xFFFFFFFF00000000 | v139;
            v16 = v147;
            v120 = v150;
          }
          v123 = sub_1C6366760(a3, (const llvm::APInt *)&v153, v18, v17, v26, v25);
        }
        v140 = v17 & 0xFFFFFFFF00000000 | v124;
        v141 = *(_QWORD *)(a3 + 832);
        if (v141)
          LOWORD(v141) = *(_WORD *)(v141 + 8);
        v114 = sub_1C5D58E08(a3, (const char *)v27, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v120, v125, (uint64_t)v122, v121, (uint64_t)v123, v140, SHIDWORD(v140), v141);
        goto LABEL_91;
      }
    }
  }
LABEL_39:
  if (sub_1C5D99DFC(v18, v17, v19))
  {
    v33 = sub_1C6366AB4(a3, v19, (const llvm::APInt *)&v153, v26, v25, 0, 0);
    v36 = (uint64_t)v33;
    v37 = v34;
    v38 = *(_QWORD *)(a3 + 832);
    if (v38)
      LOWORD(v38) = *(_WORD *)(v38 + 8);
    v39 = sub_1C5D56C70(a3, 62, (const llvm::APInt *)&v153, v26, v25, v18, v17, v35, (uint64_t)v33, v34, v38);
    v42 = v39;
    v43 = v40;
    v44 = *(_QWORD *)(a3 + 832);
    if (v44)
      LOWORD(v44) = *(_WORD *)(v44 + 8);
    v45 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v153, v26, v25, v36, v37, v41, (uint64_t)v39, v40, v44);
    v48 = v45;
    v49 = v46;
    if (v21 == 180)
      v50 = (uint64_t)v42;
    else
      v50 = (uint64_t)v45;
    if (v21 == 180)
      v51 = v43;
    else
      v51 = v46;
    v52 = *(_QWORD *)(a3 + 832);
    if (v52)
      LOWORD(v52) = *(_WORD *)(v52 + 8);
    v54 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v149, v47, v50, v51, v52);
    v56 = v55;
    v57 = v155;
    v58 = v156;
    if (v21 == 180)
      v59 = (uint64_t)v48;
    else
      v59 = (uint64_t)v42;
    if (v21 == 180)
      v60 = v49;
    else
      v60 = v43;
    v61 = *(_QWORD *)(a3 + 832);
    if (v61)
      LOWORD(v61) = *(_WORD *)(v61 + 8);
    v62 = v148;
    v63 = (uint64_t *)v151;
    v143 = v60;
    v144 = v61;
    v142 = v59;
  }
  else
  {
    v64 = sub_1C6366AB4(a3, v19 - 1, (const llvm::APInt *)&v153, v26, v25, 0, 0);
    v67 = (uint64_t)v64;
    v68 = v65;
    v69.i32[0] = v19;
    v70 = (uint8x8_t)vcnt_s8(v69);
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.i32[0] == 1)
    {
      v71 = *(_QWORD *)(a3 + 832);
      v72 = v149;
      if (v71)
        LOWORD(v71) = *(_WORD *)(v71 + 8);
      v73 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v153, v26, v25, v18, v17, v66, (uint64_t)v64, v65, v71);
      v145 = v74;
      v146 = (uint64_t)v73;
      v76 = sub_1C6366760(a3, (const llvm::APInt *)&v153, v18, v17, v26, v25);
      v78 = *(_QWORD *)(a3 + 832);
      if (v78)
        LOWORD(v78) = *(_WORD *)(v78 + 8);
      v79 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v153, v26, v25, (uint64_t)v76, v75, v77, v67, v68, v78);
    }
    else
    {
      v81 = sub_1C6366AB4(a3, v19, (const llvm::APInt *)&v153, v26, v25, 0, 0);
      v84 = *(_QWORD *)(a3 + 832);
      if (v84)
        LOWORD(v84) = *(_WORD *)(v84 + 8);
      v72 = v149;
      v85 = sub_1C5D56C70(a3, 62, (const llvm::APInt *)&v153, v26, v25, v18, v17, v83, (uint64_t)v81, v82, v84);
      v88 = *(_QWORD *)(a3 + 832);
      if (v88)
        LOWORD(v88) = *(_WORD *)(v88 + 8);
      v145 = v86;
      v146 = (uint64_t)v85;
      v79 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v153, v26, v25, v67, v68, v87, (uint64_t)v85, v86, v88);
    }
    v89 = (uint64_t)v79;
    v90 = v80;
    v91 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v153, v26, v25, 0, 0);
    v94 = (uint64_t)v91;
    v95 = v92;
    if (v21 != 180)
    {
      v103 = *(_QWORD *)(a3 + 832);
      if (v103)
        LOWORD(v103) = *(_WORD *)(v103 + 8);
      v105 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v72, v93, (uint64_t)v91, v92, v103);
      v107 = *(_QWORD *)(a3 + 832);
      if (v107)
        LOWORD(v107) = *(_WORD *)(v107 + 8);
      v54 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v105, v104, v106, v89, v90, v107);
      v56 = v108;
      v57 = v155;
      v58 = v156;
      v109 = *(_QWORD *)(a3 + 832);
      if (v109)
        LOWORD(v109) = *(_WORD *)(v109 + 8);
      v144 = v109;
      v142 = v146;
      v143 = v145;
      v102 = a3;
      v63 = (uint64_t *)v151;
      v62 = v148;
      goto LABEL_88;
    }
    v96 = *(_QWORD *)(a3 + 832);
    if (v96)
      LOWORD(v96) = *(_WORD *)(v96 + 8);
    v54 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v16, v72, v93, v146, v145, v96);
    v56 = v98;
    v99 = *(_QWORD *)(a3 + 832);
    if (v99)
      LOWORD(v99) = *(_WORD *)(v99 + 8);
    v63 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v153, v155, v156, v151, v148, v97, v94, v95, v99);
    v62 = v100;
    v57 = v155;
    v58 = v156;
    v101 = *(_QWORD *)(a3 + 832);
    if (v101)
      LOWORD(v101) = *(_WORD *)(v101 + 8);
    v143 = v90;
    v144 = v101;
    v142 = v89;
  }
  v102 = a3;
LABEL_88:
  v110 = sub_1C5D56C70(v102, 177, (const llvm::APInt *)&v153, v57, v58, (uint64_t)v63, v62, v53, v142, v143, v144);
  v113 = *(_QWORD *)(a3 + 832);
  if (v113)
    LOWORD(v113) = *(_WORD *)(v113 + 8);
  v114 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v153, v155, v156, (uint64_t)v54, v56, v112, (uint64_t)v110, v111, v113);
LABEL_91:
  v28 = v114;
  if (v153)
    llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
  return v28;
}

uint64_t sub_1C5D99DFC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  void (**v4)(void);
  uint64_t (**v6)();
  int v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E8199B28;
  v7 = a3;
  v8 = &v6;
  v3 = sub_1C6364CB8(a1, a2, (uint64_t)&v6, 1);
  if (v8 == &v6)
  {
    v4 = (void (**)(void))(v6 + 4);
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = (void (**)(void))(*v8 + 5);
LABEL_5:
    (*v4)();
  }
  return v3;
}

uint64_t *sub_1C5D99EA4(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4)
{
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t v23;
  BOOL v24;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  __int128 v101;

  v101 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v8 = sub_1C6131328((unsigned __int8 *)&v101, a2, a3);
  v9 = *(unsigned __int16 *)(a2 + 24);
  v10 = *(uint64_t **)(a2 + 32);
  v96 = v10[1];
  v97 = *v10;
  v11 = v10[5];
  v12 = v10[6];
  v13 = *(unsigned __int8 **)(a2 + 64);
  v99 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v99, v13, 2);
  v100 = *(_DWORD *)(a2 + 60);
  v14 = *(_QWORD *)(v11 + 40) + 16 * v12;
  v15 = *(llvm **)v14;
  v16 = a4;
  v98 = *(_QWORD *)(v14 + 8);
  v17 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v99, *(llvm **)v14, v98, 0, 0);
  if (v9 == 178)
    v21 = 179;
  else
    v21 = 178;
  if (!(_BYTE)v101)
  {
    if (!a3 && (*(_DWORD *)(*((_QWORD *)&v101 + 1) + 8) & 0xFE) == 0x12)
      goto LABEL_57;
    goto LABEL_36;
  }
  v22 = *(unsigned __int16 *)(a2 + 24);
  if (v101 == 1)
  {
    if (v22 > 0x185)
      goto LABEL_26;
  }
  else if (!*(_QWORD *)(a1 + 8 * v101 + 96) || v22 >= 0x186)
  {
    goto LABEL_26;
  }
  if ((*(_BYTE *)(a1 + 390 * v101 + v22 + 3862) & 0xFB) != 0
    && (v101 == 1 || *(_QWORD *)(a1 + 8 * v101 + 96)))
  {
    v20.i32[0] = v8;
    v23 = (uint8x8_t)vcnt_s8(v20);
    v23.i16[0] = vaddlv_u8(v23);
    v24 = (*(_BYTE *)(a1 + 390 * v101 + v21 + 3862) & 0xFB) != 0 || v8 == 0;
    if (!v24 && v23.i32[0] <= 1u)
    {
      v62 = *(_QWORD *)(v16 + 832);
      if (v62)
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      v63 = sub_1C5D56C70(v16, 57, (const llvm::APInt *)&v99, v15, v98, (uint64_t)v17, v18, v19, v11, v12, v62);
      v66 = *(_QWORD *)(v16 + 832);
      if (v66)
        LOWORD(v66) = *(_WORD *)(v66 + 8);
      v61 = sub_1C5D56C70(v16, v21, (const llvm::APInt *)&v99, (llvm *)v101, *((uint64_t *)&v101 + 1), v97, v96, v65, (uint64_t)v63, v64, v66);
      goto LABEL_64;
    }
  }
LABEL_26:
  if ((v101 + 85) >= 0x64u && !a3)
  {
    v26 = 0;
    if (!*(_QWORD *)(a1 + 8 * v101 + 96))
      goto LABEL_65;
    if ((*(unsigned __int8 *)(a1 + 390 * v101 + 4037) | 4) == 4
      && (*(unsigned __int8 *)(a1 + 390 * v101 + 4039) | 4) == 4
      && (*(unsigned __int8 *)(a1 + 390 * v101 + 3919) | 4) == 4)
    {
      v27 = *(unsigned __int8 *)(a1 + 390 * v101 + 4034);
      if (v27 > 4)
        goto LABEL_58;
      v26 = 0;
      if (((1 << v27) & 0x13) == 0)
        goto LABEL_65;
      v28 = *(unsigned __int8 *)(a1 + 390 * v101 + 4033);
      if (v28 > 4)
      {
LABEL_58:
        v26 = 0;
        goto LABEL_65;
      }
      v26 = 0;
      if (((1 << v28) & 0x13) == 0)
        goto LABEL_65;
      goto LABEL_36;
    }
LABEL_57:
    v26 = 0;
    goto LABEL_65;
  }
LABEL_36:
  v29 = (uint64_t)v17;
  v30 = v18;
  if (v9 == 178)
    v31 = 175;
  else
    v31 = 177;
  if (v9 == 178)
    v32 = 177;
  else
    v32 = 175;
  v93 = v32;
  v33 = sub_1C6366AB4(v16, v8 - 1, (const llvm::APInt *)&v99, v15, v98, 0, 0);
  v94 = v35;
  v95 = (uint64_t)v33;
  v36.i32[0] = v8;
  v37 = (uint8x8_t)vcnt_s8(v36);
  v37.i16[0] = vaddlv_u8(v37);
  if (v37.i32[0] == 1)
  {
    v38 = *(_QWORD *)(v16 + 832);
    if (v38)
      LOWORD(v38) = *(_WORD *)(v38 + 8);
    v40 = sub_1C5D56C70(v16, 57, (const llvm::APInt *)&v99, v15, v98, v29, v30, v34, v11, v12, v38);
    v42 = v41;
    v43 = *(_QWORD *)(v16 + 832);
    if (v43)
      LOWORD(v43) = *(_WORD *)(v43 + 8);
    v44 = sub_1C5D56C70(v16, 171, (const llvm::APInt *)&v99, v15, v98, v11, v12, v39, v95, v94, v43);
    v47 = *(_QWORD *)(v16 + 832);
    if (v47)
      LOWORD(v47) = *(_WORD *)(v47 + 8);
    v49 = sub_1C5D56C70(v16, v31, (const llvm::APInt *)&v99, (llvm *)v101, *((uint64_t *)&v101 + 1), v97, v96, v46, (uint64_t)v44, v45, v47);
    v51 = v50;
    v52 = *(_QWORD *)(v16 + 832);
    if (v52)
      LOWORD(v52) = *(_WORD *)(v52 + 8);
    v53 = sub_1C5D56C70(v16, 171, (const llvm::APInt *)&v99, v15, v98, (uint64_t)v40, v42, v48, v95, v94, v52);
    v56 = *(_QWORD *)(v16 + 832);
    if (v56)
      LOWORD(v56) = *(_WORD *)(v56 + 8);
    v57 = sub_1C5D56C70(v16, v93, (const llvm::APInt *)&v99, (llvm *)v101, *((uint64_t *)&v101 + 1), v97, v96, v55, (uint64_t)v53, v54, v56);
  }
  else
  {
    v68 = sub_1C6366AB4(v16, v8, (const llvm::APInt *)&v99, v15, v98, 0, 0);
    v71 = *(_QWORD *)(v16 + 832);
    if (v71)
      LOWORD(v71) = *(_WORD *)(v71 + 8);
    v72 = sub_1C5D56C70(v16, 62, (const llvm::APInt *)&v99, v15, v98, v11, v12, v70, (uint64_t)v68, v69, v71);
    v75 = (uint64_t)v72;
    v76 = v73;
    v77 = *(_QWORD *)(v16 + 832);
    if (v77)
      LOWORD(v77) = *(_WORD *)(v77 + 8);
    v49 = sub_1C5D56C70(v16, v31, (const llvm::APInt *)&v99, (llvm *)v101, *((uint64_t *)&v101 + 1), v97, v96, v74, (uint64_t)v72, v73, v77);
    v51 = v79;
    v80 = *(_QWORD *)(v16 + 832);
    if (v80)
      LOWORD(v80) = *(_WORD *)(v80 + 8);
    v81 = sub_1C5D56C70(v16, 57, (const llvm::APInt *)&v99, v15, v98, v95, v94, v78, v75, v76, v80);
    v83 = v82;
    v84 = sub_1C6366AB4(v16, 1, (const llvm::APInt *)&v99, v15, v98, 0, 0);
    v87 = v101;
    v88 = *(_QWORD *)(v16 + 832);
    if (v88)
      LOWORD(v88) = *(_WORD *)(v88 + 8);
    v90 = sub_1C5D56C70(v16, v93, (const llvm::APInt *)&v99, (llvm *)v101, *((uint64_t *)&v101 + 1), v97, v96, v86, (uint64_t)v84, v85, v88);
    v92 = *(_QWORD *)(v16 + 832);
    if (v92)
      LOWORD(v92) = *(_WORD *)(v92 + 8);
    v57 = sub_1C5D56C70(v16, v93, (const llvm::APInt *)&v99, (llvm *)v87, *((uint64_t *)&v87 + 1), (uint64_t)v90, v89, v91, (uint64_t)v81, v83, v92);
  }
  v60 = *(_QWORD *)(v16 + 832);
  if (v60)
    LOWORD(v60) = *(_WORD *)(v60 + 8);
  v61 = sub_1C5D56C70(v16, 172, (const llvm::APInt *)&v99, (llvm *)v101, *((uint64_t *)&v101 + 1), (uint64_t)v49, v51, v59, (uint64_t)v57, v58, v60);
LABEL_64:
  v26 = v61;
LABEL_65:
  if (v99)
    llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
  return v26;
}

uint64_t sub_1C5D9A4BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  llvm *v15;
  unsigned __int8 *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t ShiftAmountTy;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  llvm *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  int v129;
  int v130;
  _QWORD *v131;
  int v132;
  int v133;
  _QWORD *v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  llvm *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  llvm *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  _QWORD *v168;
  uint64_t v169;
  unsigned int v170;
  unsigned __int8 *v171;
  int v172;
  unsigned __int8 v173[32];

  v8 = sub_1C6141934(a2);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = *(_OWORD *)(*(_QWORD *)(*v10 + 40) + 16 * v11);
  *(_OWORD *)v173 = v13;
  v15 = *(llvm **)v9;
  v14 = *(_QWORD *)(v9 + 8);
  v16 = *(unsigned __int8 **)(a2 + 64);
  v171 = v16;
  if (v16)
  {
    v167 = v13;
    llvm::MetadataTracking::track((uint64_t)&v171, v16, 2);
    LOBYTE(v13) = v167;
  }
  v172 = *(_DWORD *)(a2 + 60);
  v17 = v13 == 10 && v15 == 6;
  if (!v17 || sub_1C6141934(a2))
  {
    v18 = 0;
  }
  else
  {
    v22 = sub_1C6131328(v173, v20, v21);
    v25 = (llvm *)sub_1C612ED80((llvm::EVT *)v173, v23, v24);
    v27 = v26;
    ShiftAmountTy = llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v25, v26, *(_QWORD *)(**(_QWORD **)(a4 + 40) + 40) + 272, 1);
    v164 = v29;
    v165 = ShiftAmountTy;
    v157 = sub_1C6366AB4(a4, 2139095040, (const llvm::APInt *)&v171, v25, v27, 0, 0);
    v146 = v30;
    v168 = sub_1C6366AB4(a4, 23, (const llvm::APInt *)&v171, v25, v27, 0, 0);
    v166 = v31;
    v32 = sub_1C6366AB4(a4, 127, (const llvm::APInt *)&v171, v25, v27, 0, 0);
    v170 = v22;
    v160 = v33;
    v162 = (uint64_t)v32;
    if (v22 > 0x40)
    {
      v35 = &v169;
      llvm::APInt::initSlowCase((llvm::APInt *)&v169, 0, 0);
      v34 = v22 - 1;
      if (v170 >= 0x41)
        v35 = (uint64_t *)(v169 + 8 * (v34 >> 6));
    }
    else
    {
      v169 = 0;
      LOBYTE(v34) = v22 - 1;
      v35 = &v169;
    }
    *v35 |= 1 << v34;
    v36 = sub_1C63666FC(a4, (llvm::LLVMContext *)&v169, (const llvm::APInt *)&v171, (uint64_t)v25, v27, 0, 0);
    v155 = v37;
    if (v170 >= 0x41 && v169)
      MEMORY[0x1CAA32F9C](v169, 0x1000C8000313F17);
    v38 = sub_1C6366AB4(a4, v22 - 1, (const llvm::APInt *)&v171, v25, v27, 0, 0);
    v147 = v39;
    v148 = (uint64_t)v38;
    v40 = sub_1C6366AB4(a4, 0x7FFFFFLL, (const llvm::APInt *)&v171, v25, v27, 0, 0);
    v41 = *(_QWORD *)(a4 + 832);
    v151 = v42;
    v153 = (uint64_t)v40;
    if (v41)
      v43 = *(_WORD *)(v41 + 8);
    else
      v43 = 0;
    v46 = sub_1C5D52060(a4, 216, (const llvm::APInt *)&v171, v25, v27, v12, v11, v43);
    v47 = *(_QWORD *)(a4 + 832);
    v48 = v36;
    if (v47)
      LOWORD(v47) = *(_WORD *)(v47 + 8);
    v144 = (uint64_t)v157;
    v158 = v44;
    v49 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v46, v44, v45, v144, v146, v47);
    v51 = v50;
    v52 = sub_1C6366544(a4, (uint64_t)v168, v166, (uint64_t)&v171, v165, v164);
    v55 = *(_QWORD *)(a4 + 832);
    if (v55)
      LOWORD(v55) = *(_WORD *)(v55 + 8);
    v57 = sub_1C5D56C70(a4, 177, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v49, v51, v54, v52, v53, v55);
    v59 = *(_QWORD *)(a4 + 832);
    if (v59)
      LOWORD(v59) = *(_WORD *)(v59 + 8);
    v60 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v57, v56, v58, v162, v160, v59);
    v161 = v62;
    v163 = (uint64_t)v60;
    v63 = *(_QWORD *)(a4 + 832);
    if (v63)
      LOWORD(v63) = *(_WORD *)(v63 + 8);
    v64 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v46, v158, v61, v48, v155, v63);
    v66 = v65;
    v67 = sub_1C6366544(a4, v148, v147, (uint64_t)&v171, v165, v164);
    v70 = *(_QWORD *)(a4 + 832);
    if (v70)
      LOWORD(v70) = *(_WORD *)(v70 + 8);
    v71 = sub_1C5D56C70(a4, 176, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v64, v66, v69, v67, v68, v70);
    v73 = v72;
    v74 = sub_1C6366480(a4, (uint64_t)v71, v72, (uint64_t)&v171, (uint64_t)v15, v14);
    v76 = *(_QWORD *)(a4 + 832);
    v156 = v74;
    v149 = v77;
    if (v76)
      LOWORD(v76) = *(_WORD *)(v76 + 8);
    v78 = sub_1C5D56C70(a4, 171, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v46, v158, v75, v153, v151, v76);
    v80 = v79;
    v81 = sub_1C6366AB4(a4, 0x800000, (const llvm::APInt *)&v171, v25, v27, 0, 0);
    v84 = *(_QWORD *)(a4 + 832);
    if (v84)
      LOWORD(v84) = *(_WORD *)(v84 + 8);
    v85 = sub_1C5D56C70(a4, 172, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v78, v80, v83, (uint64_t)v81, v82, v84);
    v87 = v86;
    v89 = sub_1C6366544(a4, (uint64_t)v85, v86, (uint64_t)&v171, (uint64_t)v15, v14);
    v91 = v87 & 0xFFFFFFFF00000000 | v90;
    v92 = *(_QWORD *)(a4 + 832);
    if (v92)
      LOWORD(v92) = *(_WORD *)(v92 + 8);
    v93 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)&v171, v25, v27, v163, v161, v88, (uint64_t)v168, v166, v92);
    v95 = sub_1C6366544(a4, (uint64_t)v93, v94, (uint64_t)&v171, v165, v164);
    v98 = *(_QWORD *)(a4 + 832);
    if (v98)
      LOWORD(v98) = *(_WORD *)(v98 + 8);
    v99 = v73 & 0xFFFFFFFF00000000 | v149;
    v154 = v89;
    v100 = sub_1C5D56C70(a4, 175, (const llvm::APInt *)&v171, v15, v14, v89, v91, v97, v95, v96, v98);
    v102 = *(_QWORD *)(a4 + 832);
    v152 = v103;
    v104 = (uint64_t)v100;
    if (v102)
      LOWORD(v102) = *(_WORD *)(v102 + 8);
    v105 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)&v171, v25, v27, (uint64_t)v168, v166, v101, v163, v161, v102);
    v107 = sub_1C6366544(a4, (uint64_t)v105, v106, (uint64_t)&v171, v165, v164);
    v110 = *(_QWORD *)(a4 + 832);
    v159 = v99;
    v145 = v25;
    v150 = v87 & 0xFFFFFFFF00000000;
    if (v110)
      LOWORD(v110) = *(_WORD *)(v110 + 8);
    v111 = sub_1C5D56C70(a4, 177, (const llvm::APInt *)&v171, v15, v14, v154, v91, v109, v107, v108, v110);
    v113 = v112;
    v114 = *(_QWORD *)(v104 + 40) + 16 * v152;
    v116 = *(llvm **)v114;
    v115 = *(_QWORD *)(v114 + 8);
    v117 = sub_1C6367818((_QWORD *)a4, 0x12u);
    v121 = sub_1C63698B8(a4, (const char *)0xC0, (const llvm::APInt *)&v171, v116, v115, v163, v161, v119, (uint64_t)v168, v166, v104, v152, (uint64_t)v111, v113, v117, v118);
    v123 = *(_QWORD *)(a4 + 832);
    if (v123)
      LOWORD(v123) = *(_WORD *)(v123 + 8);
    v125 = sub_1C5D56C70(a4, 173, (const llvm::APInt *)&v171, v15, v14, (uint64_t)v121, v120 | v150, v122, v156, v159, v123);
    v127 = *(_QWORD *)(a4 + 832);
    if (v127)
      LOWORD(v127) = *(_WORD *)(v127 + 8);
    v128 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)&v171, v15, v14, (uint64_t)v125, v124, v126, v156, v159, v127);
    v130 = v129;
    v131 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v171, v145, v27, 0, 0);
    v133 = v132;
    v134 = sub_1C6366AB4(a4, 0, (const llvm::APInt *)&v171, v15, v14, 0, 0);
    v136 = v135;
    v137 = v134[5] + 16 * v135;
    v138 = *(llvm **)v137;
    v139 = *(_QWORD *)(v137 + 8);
    v140 = sub_1C6367818((_QWORD *)a4, 0x14u);
    *(_QWORD *)a3 = sub_1C63698B8(a4, (const char *)0xC0, (const llvm::APInt *)&v171, v138, v139, v163, v161, v142, (uint64_t)v131, v133, (uint64_t)v134, v136, (uint64_t)v128, v130, v140, v141);
    *(_DWORD *)(a3 + 8) = v143;
    v18 = 1;
  }
  if (v171)
    llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
  return v18;
}

uint64_t sub_1C5D9AC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  _BOOL4 v10;
  __int128 *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  char v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  int v47;
  uint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __int16 v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  __int16 v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  __int16 v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t *v108;
  unsigned int v109;
  int v110;
  uint64_t *v111;
  int v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  llvm *v117;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  unsigned __int8 *v124;
  int v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  int v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  char v134[8];
  uint64_t v135;
  uint64_t v136[4];

  v136[2] = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 **)(a2 + 64);
  v124 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v124, v9, 2);
  v125 = *(_DWORD *)(a2 + 60);
  v10 = sub_1C6141934(a2);
  v11 = *(__int128 **)(a2 + 40);
  v12 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = (_QWORD *)(*(_QWORD *)(*v12 + 40) + 16 * v13);
  v16 = v15[1];
  *(_QWORD *)&v123 = *v15;
  *((_QWORD *)&v123 + 1) = v16;
  v122 = *v11;
  v17 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, *(_QWORD *)(a5 + 56));
  v19 = v18;
  v117 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, *(_QWORD *)(a5 + 56), v122, *((_QWORD *)&v122 + 1));
  v21 = v20;
  v22 = sub_1C6141934(a2);
  if ((_BYTE)v122)
  {
    if (v122 - 15 >= 0x9C)
      goto LABEL_22;
  }
  else if ((*(_DWORD *)(*((_QWORD *)&v122 + 1) + 8) & 0xFE) != 0x12)
  {
    goto LABEL_22;
  }
  if (!(_BYTE)v122 || v122 != 1 && !*(_QWORD *)(a1 + 8 * v122 + 96))
    goto LABEL_13;
  v24 = 208;
  if (v22)
    v24 = 132;
  if ((*(_BYTE *)(a1 + 390 * v122 + v24 + 3862) & 0xFB) != 0
    || !(_BYTE)v123
    || v123 != 1 && !*(_QWORD *)(a1 + 8 * v123 + 96))
  {
LABEL_13:
    v25 = 0;
    goto LABEL_14;
  }
  v25 = 0;
  v27 = *(unsigned __int8 *)(a1 + 390 * v123 + 4035);
  if (v27 <= 4 && ((1 << v27) & 0x13) != 0)
  {
LABEL_22:
    sub_1C632993C(v123, *((uint64_t *)&v123 + 1), v23);
    v29 = v28;
    DWORD2(v126) = sub_1C6131328((unsigned __int8 *)&v123, v30, v31);
    if (DWORD2(v126) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v126, 0, 0);
    else
      *(_QWORD *)&v126 = 0;
    if (v29 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v135, (uint64_t)&unk_1C866F1C0, (uint64_t)&v126);
    else
      llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v135, v29, (const llvm::APInt **)&v126);
    if (DWORD2(v126) >= 0x41 && (_QWORD)v126)
      MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
    v116 = a3;
    v34 = sub_1C6131328((unsigned __int8 *)&v122, v32, v33);
    v35 = v34;
    v121 = v34;
    if (v34 > 0x40)
    {
      v37 = &v120;
      llvm::APInt::initSlowCase((llvm::APInt *)&v120, 0, 0);
      v36 = v35 - 1;
      if (v121 >= 0x41)
        v37 = (uint64_t *)(v120 + 8 * (v36 >> 6));
    }
    else
    {
      v120 = 0;
      LOBYTE(v36) = v34 - 1;
      v37 = &v120;
    }
    *v37 |= 1 << v36;
    v38 = sub_1C4959BCC((uint64_t)v134, (uint64_t)&v120, 0, 1);
    v39 = sub_1C6141934(a2);
    if ((v38 & 4) != 0)
    {
      if (v39)
      {
        v126 = v122;
        v25 = 1;
        LOBYTE(v127) = 1;
        v128 = 0;
        v44 = *(_QWORD *)(a2 + 32);
        v45 = *(_DWORD *)(v44 + 8);
        *(_QWORD *)&v131 = *(_QWORD *)v44;
        DWORD2(v131) = v45;
        v132 = v14;
        LODWORD(v133) = v13;
        v46 = sub_1C6366344(a5, (const char *)0x84, (const llvm::APInt *)&v124, (uint64_t *)&v126, 2, (uint64_t *)&v131, 2);
        *(_QWORD *)v116 = v46;
        *(_DWORD *)(v116 + 8) = v47;
        *(_QWORD *)a4 = v46;
        *(_DWORD *)(a4 + 8) = 1;
LABEL_45:
        if (v121 >= 0x41 && v120)
          MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
        if ((_UNKNOWN *)v135 == &unk_1C866F1C0)
        {
          sub_1C4773C74(v136);
        }
        else if ((*(_DWORD *)(v135 + 8) - 64) <= 0xFFFFFF7F && v136[0])
        {
          MEMORY[0x1CAA32F9C](v136[0], 0x1000C8000313F17);
        }
        goto LABEL_14;
      }
      v41 = *(_QWORD *)(a5 + 832);
      if (v41)
        v42 = *(_WORD *)(v41 + 8);
      else
        v42 = 0;
      *(_QWORD *)v116 = sub_1C5D52060(a5, 208, (const llvm::APInt *)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), v14, v13, v42);
      *(_DWORD *)(v116 + 8) = v43;
    }
    else
    {
      if (!(_BYTE)v123 || v123 != 1 && !*(_QWORD *)(a1 + 8 * v123 + 96))
        goto LABEL_38;
      v40 = 97;
      if (v39)
        v40 = 102;
      if ((*(_BYTE *)(a1 + 390 * v123 + v40 + 3862) & 0xFB) != 0)
      {
LABEL_38:
        v25 = 0;
        goto LABEL_45;
      }
      v48 = sub_1C6366D08(a5, (llvm::LLVMContext *)v134, (const llvm::APFloat *)&v124, (llvm *)v123, *((uint64_t *)&v123 + 1), 0);
      v114 = v49;
      if (sub_1C6141934(a2))
      {
        v51 = sub_1C47F4CEC((_QWORD *)a5, (const llvm::APInt *)&v124, v17, v19, v14, v13, (uint64_t)v48, v114, 0x14u, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), HIDWORD(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)), 1);
        *(_QWORD *)a4 = v51;
        *(_DWORD *)(a4 + 8) = 1;
      }
      else
      {
        v52 = sub_1C6367818((_QWORD *)a5, 0x14u);
        v55 = *(_QWORD *)(a5 + 832);
        if (v55)
          LOWORD(v55) = *(_WORD *)(v55 + 8);
        v51 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v124, v17, v19, v14, v13, v54, (uint64_t)v48, v114, v52, v53, SHIDWORD(v53), v55);
      }
      v56 = v50;
      if (sub_1C6141934(a2)
        || (*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 1040))(a1, v123, *((_QWORD *)&v123 + 1), v122, *((_QWORD *)&v122 + 1), 0))
      {
        v57 = v123;
        v58 = sub_1C5D404C4(a5, (const llvm::APInt *)&v124, v123, *((uint64_t *)&v123 + 1), 0, 0.0);
        v113 = sub_1C4815A8C(a5, (const llvm::APInt *)&v124, (llvm *)v57, *((uint64_t *)&v57 + 1), (uint64_t)v51, v56, (uint64_t)v58, v59, (uint64_t)v48, v114, SHIDWORD(v114));
        v115 = v60;
        v61 = sub_1C6366608(a5, (uint64_t)v51, v56, (const llvm::APInt *)&v124, v117, v21, v122, *((uint64_t *)&v122 + 1));
        v63 = v62;
        v64 = v122;
        v65 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), 0, 0);
        v67 = v66;
        v68 = sub_1C63666FC(a5, (llvm::LLVMContext *)&v120, (const llvm::APInt *)&v124, v122, *((uint64_t *)&v122 + 1), 0, 0);
        v71 = sub_1C4815A8C(a5, (const llvm::APInt *)&v124, (llvm *)v64, *((uint64_t *)&v64 + 1), (uint64_t)v61, v63, (uint64_t)v65, v67, v68, v69, v70);
        v73 = v72;
        if (sub_1C6141934(a2))
        {
          v131 = v123;
          LOBYTE(v132) = 1;
          v133 = 0;
          *(_QWORD *)&v126 = *(_QWORD *)a4;
          DWORD2(v126) = *(_DWORD *)(a4 + 8);
          v127 = v14;
          LODWORD(v128) = v13;
          v129 = v113;
          v130 = v115;
          v111 = sub_1C6366344(a5, (const char *)0x66, (const llvm::APInt *)&v124, (uint64_t *)&v131, 2, (uint64_t *)&v126, 3);
          v126 = v122;
          LOBYTE(v127) = 1;
          v128 = 0;
          *(_QWORD *)&v131 = v111;
          *((_QWORD *)&v131 + 1) = 1;
          v132 = (uint64_t)v111;
          LODWORD(v133) = v112;
          v81 = sub_1C6366344(a5, (const char *)0x84, (const llvm::APInt *)&v124, (uint64_t *)&v126, 2, (uint64_t *)&v131, 2);
          *(_QWORD *)a4 = v81;
          *(_DWORD *)(a4 + 8) = 1;
        }
        else
        {
          v75 = *(_QWORD *)(a5 + 832);
          if (v75)
            LOWORD(v75) = *(_WORD *)(v75 + 8);
          v77 = sub_1C5D56C70(a5, 97, (const llvm::APInt *)&v124, (llvm *)v123, *((uint64_t *)&v123 + 1), v14, v13, v74, (uint64_t)v113, v115, v75);
          v78 = *(_QWORD *)(a5 + 832);
          if (v78)
            v79 = *(_WORD *)(v78 + 8);
          else
            v79 = 0;
          v81 = sub_1C5D52060(a5, 208, (const llvm::APInt *)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), (uint64_t)v77, v76, v79);
        }
        v83 = *(_QWORD *)(a5 + 832);
        if (v83)
          LOWORD(v83) = *(_WORD *)(v83 + 8);
        *(_QWORD *)v116 = sub_1C5D56C70(a5, 173, (const llvm::APInt *)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), (uint64_t)v81, v80, v82, (uint64_t)v71, v73, v83);
        *(_DWORD *)(v116 + 8) = v84;
        v25 = 1;
        goto LABEL_45;
      }
      v85 = *(_QWORD *)(a5 + 832);
      if (v85)
        v86 = *(_WORD *)(v85 + 8);
      else
        v86 = 0;
      v87 = sub_1C5D52060(a5, 208, (const llvm::APInt *)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), v14, v13, v86);
      v89 = v122;
      v90 = *(_QWORD *)(a5 + 832);
      v119 = v91;
      v92 = (uint64_t)v87;
      if (v90)
        LOWORD(v90) = *(_WORD *)(v90 + 8);
      v94 = sub_1C5D56C70(a5, 97, (const llvm::APInt *)&v124, (llvm *)v123, *((uint64_t *)&v123 + 1), v14, v13, v88, (uint64_t)v48, v114, v90);
      v95 = *(_QWORD *)(a5 + 832);
      if (v95)
        v96 = *(_WORD *)(v95 + 8);
      else
        v96 = 0;
      v97 = sub_1C5D52060(a5, 208, (const llvm::APInt *)&v124, (llvm *)v89, *((uint64_t *)&v89 + 1), (uint64_t)v94, v93, v96);
      v99 = v98;
      v100 = v122;
      v101 = sub_1C63666FC(a5, (llvm::LLVMContext *)&v120, (const llvm::APInt *)&v124, v122, *((uint64_t *)&v122 + 1), 0, 0);
      v104 = *(_QWORD *)(a5 + 832);
      if (v104)
        LOWORD(v104) = *(_WORD *)(v104 + 8);
      v105 = sub_1C5D56C70(a5, 173, (const llvm::APInt *)&v124, (llvm *)v100, *((uint64_t *)&v100 + 1), (uint64_t)v97, v99, v103, v101, v102, v104);
      v107 = v99 & 0xFFFFFFFF00000000 | v106;
      v108 = sub_1C6366608(a5, (uint64_t)v51, v56, (const llvm::APInt *)&v124, v117, v21, v122, *((uint64_t *)&v122 + 1));
      *(_QWORD *)v116 = sub_1C4815A8C(a5, (const llvm::APInt *)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), (uint64_t)v108, v109, v92, v119, (uint64_t)v105, v107, SHIDWORD(v107));
      *(_DWORD *)(v116 + 8) = v110;
    }
    v25 = 1;
    goto LABEL_45;
  }
LABEL_14:
  if (v124)
    llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
  return v25;
}

uint64_t *sub_1C5D9B624(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  uint64_t *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int8 *v33;
  int v34;

  v10 = a1;
  v11 = *(unsigned __int8 **)(a2 + 64);
  v33 = v11;
  if (v11)
    a1 = llvm::MetadataTracking::track((uint64_t)&v33, v11, 2);
  v34 = *(_DWORD *)(a2 + 60);
  v12 = *(unsigned __int16 *)(a2 + 24);
  if (v12 == 246)
    v13 = 248;
  else
    v13 = 249;
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(llvm **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_QWORD *)v14;
  if (!v17)
  {
    if (*(_BYTE *)(v16 + 8) != 19)
    {
      v18 = v15;
      goto LABEL_19;
    }
LABEL_33:
    llvm::report_fatal_error((llvm *)"Expanding fminnum/fmaxnum for scalable vectors is undefined.", (const char *)1);
  }
  if ((v17 - 120) < 0x33)
    goto LABEL_33;
  v18 = v15;
  if ((v17 == 1 || *(_QWORD *)(v10 + 8 * v15 + 96))
    && (*(_BYTE *)(v10 + 390 * v15 + v13 + 3862) & 0xFB) == 0)
  {
    v19 = *(uint64_t **)(a2 + 32);
    v21 = (uint64_t *)*v19;
    v20 = v19[1];
    v23 = (uint64_t *)v19[5];
    v22 = v19[6];
    v24 = *(unsigned __int16 *)(a2 + 72);
    if ((v24 & 0x10) == 0)
    {
      if ((sub_1C5D51784(a3, *v19, v19[1], 1, 0) & 1) == 0)
      {
        v21 = sub_1C5D52060((uint64_t)a3, 145, (const llvm::APInt *)&v33, v15, v16, (uint64_t)v21, v20, *(_WORD *)(a2 + 72));
        v20 = v20 & 0xFFFFFFFF00000000 | v25;
      }
      v26 = sub_1C5D51784(a3, (uint64_t)v23, v22, 1, 0);
      v24 = *(unsigned __int16 *)(a2 + 72);
      if ((v26 & 1) == 0)
      {
        v23 = sub_1C5D52060((uint64_t)a3, 145, (const llvm::APInt *)&v33, v15, v16, (uint64_t)v23, v22, v24);
        v22 = v22 & 0xFFFFFFFF00000000 | v27;
        v24 = *(unsigned __int16 *)(a2 + 72);
      }
    }
    v28 = sub_1C5D56C70((uint64_t)a3, v13, (const llvm::APInt *)&v33, v15, v16, (uint64_t)v21, v20, v24, (uint64_t)v23, v22, v24);
    goto LABEL_28;
  }
LABEL_19:
  v29 = *(_WORD *)(a2 + 72);
  if ((v29 & 0x10) != 0)
  {
    v30 = v12 == 246 ? 250 : 251;
    if ((v17 == 1 || v17 && *(_QWORD *)(v10 + 8 * v18 + 96))
      && (*(_BYTE *)(v10 + 390 * v18 + v30 + 3862) & 0xFB) == 0)
    {
      v28 = sub_1C5D56C70((uint64_t)a3, v30, (const llvm::APInt *)&v33, v15, v16, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a8, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), v29);
LABEL_28:
      v31 = v28;
      goto LABEL_29;
    }
  }
  v31 = sub_1C63789F8(a1, a2, a3);
LABEL_29:
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  return v31;
}

uint64_t *sub_1C5D9B888(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  llvm *ShiftAmountTy;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  llvm::Type *v16;
  llvm::APInt *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  llvm *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  llvm *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  unint64_t v69;
  llvm *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  llvm *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  llvm *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  llvm *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;

  v6 = *(unsigned __int8 **)(a2 + 64);
  v112 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v112, v6, 2);
  v113 = *(_DWORD *)(a2 + 60);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(v7 + 8);
  v110 = *(llvm **)v7;
  v111 = v8;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v110, v8, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
  v11 = v10;
  v12 = *(uint64_t **)(a2 + 32);
  v14 = *v12;
  v13 = v12[1];
  v16 = sub_1C6131328((unsigned __int8 *)&v110, v10, v15);
  v17 = v16;
  v18 = 0;
  if (v16 <= 0x80 && (v16 & 7) == 0)
  {
    if ((_BYTE)v110)
    {
      if (v110 - 15 <= 0x9B)
      {
        v19 = v111;
        goto LABEL_9;
      }
    }
    else
    {
      v19 = v111;
      if ((*(_DWORD *)(v111 + 8) & 0xFE) == 0x12)
      {
LABEL_9:
        if (!sub_1C5D9BF54((uint64_t)a1, (uint64_t)v110, v19))
        {
          v18 = 0;
          goto LABEL_11;
        }
      }
    }
    v107 = 8;
    v106 = 85;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v106, (uint64_t)&v108);
    v21 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v108, (const llvm::APInt *)&v112, (uint64_t)v110, v111, 0, 0);
    v23 = v22;
    if (v109 >= 0x41 && v108)
      MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
    if (v107 >= 0x41 && v106)
      MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
    v107 = 8;
    v106 = 51;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v106, (uint64_t)&v108);
    v24 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v108, (const llvm::APInt *)&v112, (uint64_t)v110, v111, 0, 0);
    v104 = v25;
    v105 = v24;
    if (v109 >= 0x41 && v108)
      MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
    if (v107 >= 0x41 && v106)
      MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
    v107 = 8;
    v106 = 15;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v106, (uint64_t)&v108);
    v26 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v108, (const llvm::APInt *)&v112, (uint64_t)v110, v111, 0, 0);
    v102 = v27;
    v103 = v26;
    if (v109 >= 0x41 && v108)
      MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
    if (v107 >= 0x41 && v106)
      MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
    v107 = 8;
    v106 = 1;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v106, (uint64_t)&v108);
    v28 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v108, (const llvm::APInt *)&v112, (uint64_t)v110, v111, 0, 0);
    v97 = v29;
    v98 = v28;
    if (v109 >= 0x41 && v108)
      MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
    if (v107 >= 0x41 && v106)
      MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
    v30 = v110;
    v31 = v111;
    v32 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v112, ShiftAmountTy, v11, 0, 0);
    v35 = *(_QWORD *)(a3 + 832);
    if (v35)
      LOWORD(v35) = *(_WORD *)(v35 + 8);
    v37 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v112, v30, v31, v14, v13, v34, (uint64_t)v32, v33, v35);
    v39 = *(_QWORD *)(a3 + 832);
    if (v39)
      LOWORD(v39) = *(_WORD *)(v39 + 8);
    v40 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v112, v30, v31, (uint64_t)v37, v36, v38, v21, v23, v39);
    v43 = *(_QWORD *)(a3 + 832);
    if (v43)
      LOWORD(v43) = *(_WORD *)(v43 + 8);
    v45 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v112, v30, v31, v14, v13, v42, (uint64_t)v40, v41, v43);
    v47 = v13 & 0xFFFFFFFF00000000 | v46;
    v48 = v111;
    v49 = *(_QWORD *)(a3 + 832);
    if (v49)
      LOWORD(v49) = *(_WORD *)(v49 + 8);
    v101 = v110;
    v50 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v112, v110, v111, (uint64_t)v45, v47, v44, v105, v104, v49);
    v99 = v51;
    v100 = (uint64_t)v50;
    v53 = v110;
    v52 = v111;
    v54 = sub_1C6366AB4(a3, 2, (const llvm::APInt *)&v112, ShiftAmountTy, v11, 0, 0);
    v57 = *(_QWORD *)(a3 + 832);
    if (v57)
      LOWORD(v57) = *(_WORD *)(v57 + 8);
    v59 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v112, v53, v52, (uint64_t)v45, v47, v56, (uint64_t)v54, v55, v57);
    v61 = *(_QWORD *)(a3 + 832);
    if (v61)
      LOWORD(v61) = *(_WORD *)(v61 + 8);
    v62 = v13 & 0xFFFFFFFF00000000;
    v63 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v112, v53, v52, (uint64_t)v59, v58, v60, v105, v104, v61);
    v66 = *(_QWORD *)(a3 + 832);
    if (v66)
      LOWORD(v66) = *(_WORD *)(v66 + 8);
    v67 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v112, v101, v48, v100, v99, v65, (uint64_t)v63, v64, v66);
    v69 = v68 | v62;
    v70 = v110;
    v71 = v111;
    v72 = sub_1C6366AB4(a3, 4, (const llvm::APInt *)&v112, ShiftAmountTy, v11, 0, 0);
    v75 = *(_QWORD *)(a3 + 832);
    if (v75)
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    v76 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v112, v70, v71, (uint64_t)v67, v69, v74, (uint64_t)v72, v73, v75);
    v79 = *(_QWORD *)(a3 + 832);
    if (v79)
      LOWORD(v79) = *(_WORD *)(v79 + 8);
    v81 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v112, v70, v71, (uint64_t)v67, v69, v78, (uint64_t)v76, v77, v79);
    v83 = *(_QWORD *)(a3 + 832);
    if (v83)
      LOWORD(v83) = *(_WORD *)(v83 + 8);
    v18 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v112, v70, v71, (uint64_t)v81, v80, v82, v103, v102, v83);
    v86 = v85 | v62;
    if (v17 >= 9)
    {
      v87 = v110;
      v88 = v111;
      v89 = *(_QWORD *)(a3 + 832);
      if (v89)
        LOWORD(v89) = *(_WORD *)(v89 + 8);
      v90 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v112, v110, v111, (uint64_t)v18, v86, v84, v98, v97, v89);
      v92 = v91;
      v93 = sub_1C6366AB4(a3, ((_DWORD)v17 - 8), (const llvm::APInt *)&v112, ShiftAmountTy, v11, 0, 0);
      v96 = *(_QWORD *)(a3 + 832);
      if (v96)
        LOWORD(v96) = *(_WORD *)(v96 + 8);
      v18 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v112, v87, v88, (uint64_t)v90, v92, v95, (uint64_t)v93, v94, v96);
    }
  }
LABEL_11:
  if (v112)
    llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
  return v18;
}

uint64_t sub_1C5D9BF54(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v4 = sub_1C6131328((unsigned __int8 *)v8, a2, a3);
  if (LOBYTE(v8[0])
    && (LOBYTE(v8[0]) == 1 || !(v5 = *(_QWORD *)(a1 + 8 * LOBYTE(v8[0]) + 96) == 0))
    && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 3918) | 4) == 4
    && (LOBYTE(v8[0]) == 1 || *(_QWORD *)(a1 + 8 * LOBYTE(v8[0]) + 96))
    && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 3919) | 4) == 4
    && (LOBYTE(v8[0]) == 1 || *(_QWORD *)(a1 + 8 * LOBYTE(v8[0]) + 96))
    && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 4039) | 4) == 4
    && (v4 == 8
     || (LOBYTE(v8[0]) == 1 || *(_QWORD *)(a1 + 8 * LOBYTE(v8[0]) + 96))
     && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 3920) | 4) == 4)
    && (LOBYTE(v8[0]) == 1 || *(_QWORD *)(a1 + 8 * LOBYTE(v8[0]) + 96))
    && (v6 = *(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 4033), v6 <= 4))
  {
    return (0x13u >> v6) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_1C5D9C098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int8x8_t v11;
  unsigned int v12;
  int v13;
  llvm *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  llvm *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm *v43;
  uint64_t v44;
  unint64_t v45;
  llvm *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t *v51;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  __int128 v81;
  unsigned __int8 *v82;
  int v83;

  v6 = *(unsigned __int8 **)(a2 + 64);
  v82 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v82, v6, 2);
  v83 = *(_DWORD *)(a2 + 60);
  v7 = *(uint64_t **)(a2 + 32);
  v81 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v9 = *v7;
  v8 = v7[1];
  v10 = sub_1C6131328((unsigned __int8 *)&v81, (uint64_t)v6, a3);
  v12 = v10;
  v13 = *(unsigned __int16 *)(a2 + 24);
  v14 = (llvm *)v81;
  v15 = v81;
  if (v13 == 188)
  {
    if (!(_BYTE)v81)
      goto LABEL_13;
    if ((v81 == 1 || *(_QWORD *)(a1 + 8 * v81 + 96))
      && (*(unsigned __int8 *)(a1 + 390 * v81 + 4045) | 4) == 4)
    {
      v16 = *((_QWORD *)&v81 + 1);
      v17 = *(_QWORD *)(a3 + 832);
      if (v17)
        v18 = *(_WORD *)(v17 + 8);
      else
        v18 = 0;
      v41 = a3;
      v42 = 183;
      v43 = (llvm *)v81;
      v44 = v9;
      v45 = v8;
      goto LABEL_64;
    }
  }
  if ((_BYTE)v81)
  {
    if ((v81 == 1 || *(_QWORD *)(a1 + 8 * v81 + 96))
      && (*(unsigned __int8 *)(a1 + 390 * v81 + 4050) | 4) == 4)
    {
      v46 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, *(_QWORD *)(a3 + 56), v81, *((_QWORD *)&v81 + 1));
      v48 = v47;
      v49 = *(_QWORD *)(a3 + 832);
      if (v49)
        v50 = *(_WORD *)(v49 + 8);
      else
        v50 = 0;
      v53 = sub_1C5D52060(a3, 188, (const llvm::APInt *)&v82, (llvm *)v81, *((uint64_t *)&v81 + 1), v9, v8, v50);
      v55 = v54;
      v56 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v82, (llvm *)v81, *((uint64_t *)&v81 + 1), 0, 0);
      v58 = v57;
      v59 = sub_1C6367818((_QWORD *)a3, 0x11u);
      v62 = 0;
      v63 = *(_QWORD *)(a3 + 832);
      if (v63)
        v62 = *(_WORD *)(v63 + 8);
      v64 = sub_1C5D58E08(a3, (const char *)0xC1, (const llvm::APInt *)&v82, v46, v48, v9, v8, v61, (uint64_t)v56, v58, v59, v60, SHIDWORD(v60), v62);
      v66 = v65;
      v67 = v81;
      v68 = sub_1C6366AB4(a3, v12, (const llvm::APInt *)&v82, (llvm *)v81, *((uint64_t *)&v81 + 1), 0, 0);
      v51 = sub_1C4815A8C(a3, (const llvm::APInt *)&v82, (llvm *)v67, *((uint64_t *)&v67 + 1), (uint64_t)v64, v66, (uint64_t)v68, v69, (uint64_t)v53, v55, SHIDWORD(v55));
      goto LABEL_65;
    }
    if (v81 - 15 >= 0x9C)
      goto LABEL_45;
    goto LABEL_18;
  }
LABEL_13:
  if ((*(_DWORD *)(*((_QWORD *)&v81 + 1) + 8) & 0xFE) != 0x12)
    goto LABEL_45;
LABEL_18:
  v11.i32[0] = v10;
  v19 = (uint8x8_t)vcnt_s8(v11);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.i32[0] != 1)
  {
LABEL_56:
    v21 = 0;
    goto LABEL_66;
  }
  if ((_BYTE)v81)
  {
    if (v81 == 1 || (v20 = *(_QWORD *)(a1 + 8 * v81 + 96)) != 0)
    {
      if ((*(unsigned __int8 *)(a1 + 390 * v81 + 4047) | 4) == 4)
        goto LABEL_29;
      if (v81 == 1)
      {
LABEL_26:
        if ((*(unsigned __int8 *)(a1 + 390 * v81 + 4046) | 4) == 4)
          goto LABEL_29;
        goto LABEL_27;
      }
      v20 = *(_QWORD *)(a1 + 8 * v81 + 96);
    }
    if (!v20)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_27:
  if (!sub_1C5D9BF54(a1, v81, *((_BOOL8 *)&v81 + 1)))
    goto LABEL_56;
  v14 = (llvm *)v81;
  v15 = v81;
LABEL_29:
  if (!(_BYTE)v14)
  {
    v21 = (uint64_t *)v14;
    goto LABEL_66;
  }
  if (v14 == 1)
  {
    if (!v15)
      goto LABEL_56;
  }
  else
  {
    v21 = 0;
    if (!v15 || !*(_QWORD *)(a1 + 8 * v15 + 96))
      goto LABEL_66;
  }
  if ((*(unsigned __int8 *)(a1 + 390 * v15 + 3919) | 4) != 4
    || v14 != 1 && !*(_QWORD *)(a1 + 8 * v15 + 96))
  {
    goto LABEL_56;
  }
  v21 = 0;
  v22 = *(unsigned __int8 *)(a1 + 390 * v15 + 4033);
  if (v22 <= 4 && ((1 << v22) & 0x13) != 0)
  {
    if (v14 != 1 && !*(_QWORD *)(a1 + 8 * v15 + 96))
      goto LABEL_56;
    v21 = 0;
    v23 = *(unsigned __int8 *)(a1 + 390 * v15 + 4035);
    if (v23 <= 4 && ((1 << v23) & 0x13) != 0)
    {
LABEL_45:
      v24 = *((_QWORD *)&v81 + 1);
      v80 = sub_1C6366760(a3, (const llvm::APInt *)&v82, v9, v8, v14, *((uint64_t *)&v81 + 1));
      v26 = v25;
      v27 = v81;
      v28 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v82, (llvm *)v81, *((uint64_t *)&v81 + 1), 0, 0);
      v31 = *(_QWORD *)(a3 + 832);
      if (v31)
        LOWORD(v31) = *(_WORD *)(v31 + 8);
      v32 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v82, (llvm *)v27, *((uint64_t *)&v27 + 1), v9, v8, v30, (uint64_t)v28, v29, v31);
      v35 = *(_QWORD *)(a3 + 832);
      if (v35)
        LOWORD(v35) = *(_WORD *)(v35 + 8);
      v36 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v82, v14, v24, (uint64_t)v80, v26, v34, (uint64_t)v32, v33, v35);
      v38 = v37;
      v39 = (llvm *)v81;
      if ((_BYTE)v81
        && (v81 == 1 || *(_QWORD *)(a1 + 8 * v81 + 96))
        && !*(_BYTE *)(a1 + 390 * v81 + 4046)
        && *(_BYTE *)(a1 + 390 * v81 + 4047))
      {
        v70 = *((_QWORD *)&v81 + 1);
        v71 = sub_1C6366AB4(a3, v12, (const llvm::APInt *)&v82, (llvm *)v81, *((uint64_t *)&v81 + 1), 0, 0);
        v73 = v72;
        v74 = *(_QWORD *)(a3 + 832);
        if (v74)
          v75 = *(_WORD *)(v74 + 8);
        else
          v75 = 0;
        v76 = sub_1C5D52060(a3, 184, (const llvm::APInt *)&v82, (llvm *)v81, *((uint64_t *)&v81 + 1), (uint64_t)v36, v38, v75);
        v79 = *(_QWORD *)(a3 + 832);
        if (v79)
          LOWORD(v79) = *(_WORD *)(v79 + 8);
        v51 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v82, v39, v70, (uint64_t)v71, v73, v78, (uint64_t)v76, v77, v79);
        goto LABEL_65;
      }
      v16 = *((_QWORD *)&v81 + 1);
      v40 = *(_QWORD *)(a3 + 832);
      if (v40)
        v18 = *(_WORD *)(v40 + 8);
      else
        v18 = 0;
      v41 = a3;
      v42 = 185;
      v43 = (llvm *)v81;
      v44 = (uint64_t)v36;
      v45 = v38;
LABEL_64:
      v51 = sub_1C5D52060(v41, v42, (const llvm::APInt *)&v82, v43, v16, v44, v45, v18);
LABEL_65:
      v21 = v51;
    }
  }
LABEL_66:
  if (v82)
    llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
  return v21;
}

uint64_t *sub_1C5D9C6B8(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  BOOL v13;
  llvm *ShiftAmountTy;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  uint64_t *v43;
  llvm::Type *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;

  v8 = *(unsigned __int8 **)(a2 + 64);
  v70 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v70, v8, 2);
  v71 = *(_DWORD *)(a2 + 60);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(llvm **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v68 = v11;
  v69 = v10;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v11, v10, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
  v15 = v12;
  v16 = *(uint64_t **)(a2 + 32);
  v18 = *v16;
  v17 = v16[1];
  if ((a4 & 1) == 0)
  {
    if (!(_BYTE)v11)
    {
LABEL_23:
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        goto LABEL_44;
      goto LABEL_48;
    }
    if (v11 == 1)
    {
      if (*((_BYTE *)a1 + 390 * v11 + 3919))
        goto LABEL_48;
      if (*((_BYTE *)a1 + 390 * v11 + 4030))
      {
LABEL_17:
        if (!*((_BYTE *)a1 + 390 * v11 + 4031))
        {
          v29 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v70, v11, v10, 0, 0);
          v31 = *(_QWORD *)(a3 + 832);
          if (v31)
            LOWORD(v31) = *(_WORD *)(v31 + 8);
          v32 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v70, v11, v10, (uint64_t)v29, v28, v30, v18, v17, v31);
          v35 = *(_QWORD *)(a3 + 832);
          if (v35)
            LOWORD(v35) = *(_WORD *)(v35 + 8);
          v27 = sub_1C5D56C70(a3, 169, (const llvm::APInt *)&v70, v11, v10, v18, v17, v34, (uint64_t)v32, v33, v35);
          goto LABEL_64;
        }
LABEL_32:
        if (v11 - 15 >= 0x9C)
          goto LABEL_48;
        if (a1[v11 + 12] && (*((unsigned __int8 *)a1 + 390 * v11 + 4038) | 4) == 4)
        {
          v37 = (char *)a1 + 390 * v11;
          v38 = (a4 & 1) != 0 ? v37[3919] : v37[3918];
          if ((v38 | 4) == 4)
          {
            v39 = *((unsigned __int8 *)a1 + 390 * v11 + 4035);
            v40 = v39 > 4;
            v41 = (1 << v39) & 0x13;
            if (!v40 && v41 != 0)
              goto LABEL_48;
          }
        }
LABEL_44:
        v43 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      if (!a1[v11 + 12])
        goto LABEL_32;
      v36 = (char *)a1 + 390 * v11;
      if (v36[3919] || *((_BYTE *)a1 + 390 * v11 + 4030))
      {
        if (v36[3919])
          goto LABEL_32;
        goto LABEL_17;
      }
    }
    v61 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v70, v11, v10, 0, 0);
    v63 = *(_QWORD *)(a3 + 832);
    if (v63)
      LOWORD(v63) = *(_WORD *)(v63 + 8);
    v64 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v70, v11, v10, (uint64_t)v61, v60, v62, v18, v17, v63);
    v67 = *(_QWORD *)(a3 + 832);
    if (v67)
      LOWORD(v67) = *(_WORD *)(v67 + 8);
    v27 = sub_1C5D56C70(a3, 168, (const llvm::APInt *)&v70, v11, v10, v18, v17, v66, (uint64_t)v64, v65, v67);
    goto LABEL_64;
  }
  if (!(_BYTE)v11)
    goto LABEL_23;
  if (v11 == 1)
  {
    if (!*((_BYTE *)a1 + 390 * v11 + 3919))
      goto LABEL_7;
LABEL_48:
    v45 = sub_1C6131328((unsigned __int8 *)&v68, v12, v13);
    v46 = sub_1C6366AB4(a3, (uint64_t)v45 - 1, (const llvm::APInt *)&v70, ShiftAmountTy, v15, 0, 0);
    v49 = *(_QWORD *)(a3 + 832);
    if (v49)
      LOWORD(v49) = *(_WORD *)(v49 + 8);
    v50 = sub_1C5D56C70(a3, 176, (const llvm::APInt *)&v70, v11, v10, v18, v17, v48, (uint64_t)v46, v47, v49);
    v53 = (uint64_t)v50;
    v54 = v51;
    v55 = *(_QWORD *)(a3 + 832);
    if (v55)
      LOWORD(v55) = *(_WORD *)(v55 + 8);
    v56 = sub_1C5D56C70(a3, 173, (const llvm::APInt *)&v70, v68, v69, v18, v17, v52, (uint64_t)v50, v51, v55);
    v59 = *(_QWORD *)(a3 + 832);
    if ((a4 & 1) != 0)
    {
      if (v59)
        LOWORD(v59) = *(_WORD *)(v59 + 8);
      v27 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v70, v68, v69, v53, v54, v58, (uint64_t)v56, v57, v59);
    }
    else
    {
      if (v59)
        LOWORD(v59) = *(_WORD *)(v59 + 8);
      v27 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v70, v68, v69, (uint64_t)v56, v57, v58, v53, v54, v59);
    }
    goto LABEL_64;
  }
  if (!a1[v11 + 12] || *((_BYTE *)a1 + 390 * v11 + 3919))
    goto LABEL_32;
LABEL_7:
  if (*((_BYTE *)a1 + 390 * v11 + 4029))
    goto LABEL_32;
  v20 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v70, v11, v10, 0, 0);
  v22 = *(_QWORD *)(a3 + 832);
  if (v22)
    LOWORD(v22) = *(_WORD *)(v22 + 8);
  v23 = sub_1C5D56C70(a3, 57, (const llvm::APInt *)&v70, v11, v10, (uint64_t)v20, v19, v21, v18, v17, v22);
  v26 = *(_QWORD *)(a3 + 832);
  if (v26)
    LOWORD(v26) = *(_WORD *)(v26 + 8);
  v27 = sub_1C5D56C70(a3, 167, (const llvm::APInt *)&v70, v11, v10, v18, v17, v25, (uint64_t)v23, v24, v26);
LABEL_64:
  v43 = v27;
LABEL_45:
  if (v70)
    llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
  return v43;
}

_QWORD *sub_1C5D9CB70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  llvm *ShiftAmountTy;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  llvm::Type *v16;
  llvm::APInt *v17;
  uint8x8_t v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;
  _QWORD *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  llvm *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  llvm *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  llvm *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  unint64_t v69;
  llvm *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  unint64_t v78;
  llvm *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  llvm *v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  llvm *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unsigned int v108;
  unint64_t v109;
  llvm *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  unsigned int v117;
  unint64_t v118;
  llvm *v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  llvm *v130;
  uint64_t v131;
  unsigned int v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  llvm *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unsigned int v148;
  unint64_t v149;
  llvm *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  unsigned int v157;
  unint64_t v158;
  llvm *v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  llvm *v184;
  uint64_t v185;
  unsigned __int8 *v186;
  int v187;

  v6 = *(unsigned __int8 **)(a2 + 64);
  v186 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v186, v6, 2);
  v187 = *(_DWORD *)(a2 + 60);
  v8 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(v7 + 8);
  v184 = *(llvm **)v7;
  v185 = v9;
  v11 = *(uint64_t **)v8;
  v10 = *(_QWORD *)(v8 + 8);
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v184, v9, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
  v14 = v13;
  v16 = sub_1C6131328((unsigned __int8 *)&v184, v13, v15);
  v17 = v16;
  if (v16 < 8
    || (v18 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v18.i16[0] = vaddlv_u8(v18), v18.i32[0] > 1u))
  {
    v22 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v186, v184, v185, 0, 0);
    if ((_DWORD)v17)
    {
      v170 = v10;
      v171 = (uint64_t)v11;
      v172 = v14;
      v173 = ShiftAmountTy;
      v23 = 0;
      v24 = (_DWORD)v17 - 1;
      v25 = 1 - (_DWORD)v17;
      v26 = (_DWORD)v17 - 1;
      v27 = v21;
      do
      {
        v174 = v27;
        v175 = (uint64_t)v22;
        v28 = v184;
        v29 = v185;
        if (v23 >= v24)
          v30 = v25;
        else
          v30 = v26;
        if (v23 >= v24)
          v31 = 177;
        else
          v31 = 175;
        v32 = sub_1C6366AB4(a3, v30, (const llvm::APInt *)&v186, ShiftAmountTy, v172, 0, 0);
        v35 = *(_QWORD *)(a3 + 832);
        if (v35)
          LOWORD(v35) = *(_WORD *)(v35 + 8);
        v36 = sub_1C5D56C70(a3, v31, (const llvm::APInt *)&v186, v28, v29, v171, v170, v34, (uint64_t)v32, v33, v35);
        v38 = v37;
        v183 = v17;
        if (v17 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v182, 1, 0);
        else
          v182 = 1;
        sub_1C4888094((uint64_t)&v182, v24);
        v39 = v184;
        v40 = v185;
        v41 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v182, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
        v44 = *(_QWORD *)(a3 + 832);
        if (v44)
          LOWORD(v44) = *(_WORD *)(v44 + 8);
        v45 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v39, v40, (uint64_t)v36, v38, v43, v41, v42, v44);
        v48 = *(_QWORD *)(a3 + 832);
        if (v48)
          LOWORD(v48) = *(_WORD *)(v48 + 8);
        ShiftAmountTy = v173;
        v22 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v186, v184, v185, v175, v174, v47, (uint64_t)v45, v46, v48);
        v27 = v49;
        if (v183 >= 0x41 && v182)
          MEMORY[0x1CAA32F9C](v182, 0x1000C8000313F17);
        ++v23;
        v26 -= 2;
        v25 += 2;
        --v24;
      }
      while (v17 != v23);
    }
  }
  else
  {
    v181 = 8;
    v180 = 15;
    llvm::APInt::getSplat(v16, (llvm::APInt *)&v180, (uint64_t)&v182);
    if (v181 >= 0x41 && v180)
      MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
    v179 = 8;
    v178 = 51;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v178, (uint64_t)&v180);
    if (v179 >= 0x41 && v178)
      MEMORY[0x1CAA32F9C](v178, 0x1000C8000313F17);
    v177 = 8;
    v176 = 85;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v176, (uint64_t)&v178);
    if (v177 >= 0x41 && v176)
      MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
    if (v17 >= 9)
    {
      v19 = *(_QWORD *)(a3 + 832);
      if (v19)
        v20 = *(_WORD *)(v19 + 8);
      else
        v20 = 0;
      v11 = sub_1C5D52060(a3, 182, (const llvm::APInt *)&v186, v184, v185, (uint64_t)v11, v10, v20);
      LODWORD(v10) = v50;
    }
    v51 = v10;
    v52 = v184;
    v53 = v185;
    v54 = sub_1C6366AB4(a3, 4, (const llvm::APInt *)&v186, ShiftAmountTy, v14, 0, 0);
    v57 = *(_QWORD *)(a3 + 832);
    if (v57)
      LOWORD(v57) = *(_WORD *)(v57 + 8);
    v58 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v186, v52, v53, (uint64_t)v11, v10, v56, (uint64_t)v54, v55, v57);
    v60 = v59;
    v62 = v184;
    v61 = v185;
    v63 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v182, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
    v66 = *(_QWORD *)(a3 + 832);
    if (v66)
      LOWORD(v66) = *(_WORD *)(v66 + 8);
    v67 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v62, v61, (uint64_t)v58, v60, v65, v63, v64, v66);
    v69 = v68;
    v70 = v184;
    v71 = v185;
    v72 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v182, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
    v75 = *(_QWORD *)(a3 + 832);
    if (v75)
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    v76 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v70, v71, (uint64_t)v11, v51, v74, v72, v73, v75);
    v78 = v77;
    v79 = v184;
    v80 = v185;
    v81 = sub_1C6366AB4(a3, 4, (const llvm::APInt *)&v186, ShiftAmountTy, v14, 0, 0);
    v84 = *(_QWORD *)(a3 + 832);
    if (v84)
      LOWORD(v84) = *(_WORD *)(v84 + 8);
    v85 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v186, v79, v80, (uint64_t)v76, v78, v83, (uint64_t)v81, v82, v84);
    v88 = *(_QWORD *)(a3 + 832);
    if (v88)
      LOWORD(v88) = *(_WORD *)(v88 + 8);
    v89 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v186, v184, v185, (uint64_t)v67, v69, v87, (uint64_t)v85, v86, v88);
    v90 = v184;
    v91 = v185;
    v93 = v92;
    v94 = sub_1C6366AB4(a3, 2, (const llvm::APInt *)&v186, ShiftAmountTy, v14, 0, 0);
    v97 = *(_QWORD *)(a3 + 832);
    if (v97)
      LOWORD(v97) = *(_WORD *)(v97 + 8);
    v98 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v186, v90, v91, (uint64_t)v89, v93, v96, (uint64_t)v94, v95, v97);
    v100 = v99;
    v102 = v184;
    v101 = v185;
    v103 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v180, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
    v106 = *(_QWORD *)(a3 + 832);
    if (v106)
      LOWORD(v106) = *(_WORD *)(v106 + 8);
    v107 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v102, v101, (uint64_t)v98, v100, v105, v103, v104, v106);
    v109 = v108;
    v110 = v184;
    v111 = v185;
    v112 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v180, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
    v115 = *(_QWORD *)(a3 + 832);
    if (v115)
      LOWORD(v115) = *(_WORD *)(v115 + 8);
    v116 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v110, v111, (uint64_t)v89, v93, v114, v112, v113, v115);
    v118 = v117;
    v119 = v184;
    v120 = v185;
    v121 = sub_1C6366AB4(a3, 2, (const llvm::APInt *)&v186, ShiftAmountTy, v14, 0, 0);
    v124 = *(_QWORD *)(a3 + 832);
    if (v124)
      LOWORD(v124) = *(_WORD *)(v124 + 8);
    v125 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v186, v119, v120, (uint64_t)v116, v118, v123, (uint64_t)v121, v122, v124);
    v128 = *(_QWORD *)(a3 + 832);
    if (v128)
      LOWORD(v128) = *(_WORD *)(v128 + 8);
    v129 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v186, v184, v185, (uint64_t)v107, v109, v127, (uint64_t)v125, v126, v128);
    v130 = v184;
    v131 = v185;
    v133 = v132;
    v134 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v186, ShiftAmountTy, v14, 0, 0);
    v137 = *(_QWORD *)(a3 + 832);
    if (v137)
      LOWORD(v137) = *(_WORD *)(v137 + 8);
    v138 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v186, v130, v131, (uint64_t)v129, v133, v136, (uint64_t)v134, v135, v137);
    v140 = v139;
    v142 = v184;
    v141 = v185;
    v143 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v178, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
    v146 = *(_QWORD *)(a3 + 832);
    if (v146)
      LOWORD(v146) = *(_WORD *)(v146 + 8);
    v147 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v142, v141, (uint64_t)v138, v140, v145, v143, v144, v146);
    v149 = v148;
    v150 = v184;
    v151 = v185;
    v152 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v178, (const llvm::APInt *)&v186, (uint64_t)v184, v185, 0, 0);
    v155 = *(_QWORD *)(a3 + 832);
    if (v155)
      LOWORD(v155) = *(_WORD *)(v155 + 8);
    v156 = sub_1C5D56C70(a3, 171, (const llvm::APInt *)&v186, v150, v151, (uint64_t)v129, v133, v154, v152, v153, v155);
    v158 = v157;
    v159 = v184;
    v160 = v185;
    v161 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v186, ShiftAmountTy, v14, 0, 0);
    v164 = *(_QWORD *)(a3 + 832);
    if (v164)
      LOWORD(v164) = *(_WORD *)(v164 + 8);
    v165 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v186, v159, v160, (uint64_t)v156, v158, v163, (uint64_t)v161, v162, v164);
    v168 = *(_QWORD *)(a3 + 832);
    if (v168)
      LOWORD(v168) = *(_WORD *)(v168 + 8);
    v22 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v186, v184, v185, (uint64_t)v147, v149, v167, (uint64_t)v165, v166, v168);
    if (v179 >= 0x41 && v178)
      MEMORY[0x1CAA32F9C](v178, 0x1000C8000313F17);
    if (v181 >= 0x41 && v180)
      MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
    if (v183 >= 0x41 && v182)
      MEMORY[0x1CAA32F9C](v182, 0x1000C8000313F17);
  }
  if (v186)
    llvm::MetadataTracking::untrack((uint64_t)&v186, v186);
  return v22;
}

void sub_1C5D9D4DC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t ExtendedSizeInBits;
  const char *v19;
  const char *v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  const char *v55;
  llvm::LLVMContext *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  const char *v60;
  unsigned int v61;
  llvm *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  __int16 v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  __int16 v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t ExtendedIntegerVT;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  llvm *v118;
  unint64_t v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  llvm *v124;
  uint64_t v125;
  __int128 v126;
  _QWORD v127[2];
  unsigned __int8 *v128;
  int v129;
  void *v130;
  uint64_t v131;
  _BYTE v132[128];
  __int128 v133;
  _OWORD v134[8];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 **)(a1 + 64);
  v128 = v5;
  if (v5)
    llvm::MetadataTracking::track((uint64_t)&v128, v5, 2);
  v129 = *(_DWORD *)(a1 + 60);
  v6 = *(uint64_t **)(a1 + 32);
  v7 = *(__int128 **)(a1 + 40);
  v114 = *v6;
  v115 = v6[1];
  v9 = (uint64_t *)v6[5];
  v8 = v6[6];
  v10 = *(_QWORD *)(a1 + 88);
  v127[0] = *(_QWORD *)(a1 + 80);
  v127[1] = v10;
  v126 = *v7;
  if (!LOBYTE(v127[0]))
  {
    if (*(_BYTE *)(v10 + 8) != 19)
      goto LABEL_5;
LABEL_9:
    llvm::report_fatal_error((llvm *)"Cannot scalarize scalable vector loads", (const char *)1);
  }
  if (LOBYTE(v127[0]) - 120 < 0x33)
    goto LABEL_9;
LABEL_5:
  v119 = ((unint64_t)*(unsigned __int16 *)(a1 + 26) >> 10) & 3;
  v11 = sub_1C612FE00((llvm::EVT *)v127, (const char *)v5);
  v124 = (llvm *)sub_1C6131264((unsigned __int8 *)v127, v12, v13);
  v125 = v14;
  v16 = sub_1C6131264((unsigned __int8 *)&v126, v14, v15);
  v117 = v17;
  v118 = (llvm *)v16;
  if (sub_1C6329ADC((llvm::EVT *)&v124))
  {
    if ((_BYTE)v124)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v124);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v124);
    v26 = ExtendedSizeInBits;
    if ((_DWORD)v19 == 1)
    *(_QWORD *)&v133 = v134;
    *((_QWORD *)&v133 + 1) = 0x800000000;
    v130 = v132;
    v131 = 0x800000000;
    if ((_DWORD)v11)
    {
      v111 = a3;
      v29 = 0;
      v30 = v26 >> 3;
      v31 = (v26 >> 3);
      v32 = v11;
      do
      {
        sub_1C4824250(*(uint64_t **)(a1 + 96), v29, (uint64_t)&v121);
        v33 = *(_QWORD *)(a1 + 96);
        v34 = *(unsigned __int8 *)(v33 + 34);
        v35 = *(_WORD *)(v33 + 32);
        v36 = *(_OWORD *)(v33 + 56);
        v120[0] = *(_OWORD *)(v33 + 40);
        v120[1] = v36;
        v11 = v11 & 0xFFFFFFFFFFFF0000 | v34 | 0x100;
        v38 = sub_1C636B4C8(a2, v119, (uint64_t)&v128, (uint64_t)v118, v117, v114, v115, v37, (uint64_t)v9, v8, &v121, (uint64_t)v124, v125, v11, SHIDWORD(v11), v35, (uint64_t)v120);
        v9 = sub_1C6369954(a2, (uint64_t)v9, v8, v31, 0, (const llvm::APInt *)&v128, 3);
        v40 = v39;
        v41 = DWORD2(v133);
        if (DWORD2(v133) >= (unint64_t)HIDWORD(v133))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, (uint64_t)v134, DWORD2(v133) + 1, 16);
          v41 = DWORD2(v133);
        }
        v42 = (_QWORD *)(v133 + 16 * v41);
        *v42 = v38;
        v42[1] = 0;
        ++DWORD2(v133);
        v43 = v131;
        if (v131 >= (unint64_t)HIDWORD(v131))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, (uint64_t)v132, v131 + 1, 16);
          v43 = v131;
        }
        v8 = v8 & 0xFFFFFFFF00000000 | v40;
        v44 = (char *)v130 + 16 * v43;
        *v44 = v38;
        v44[1] = 1;
        v27 = (v131 + 1);
        LODWORD(v131) = v131 + 1;
        v29 += v30;
        --v32;
      }
      while (v32);
      v28 = (uint64_t *)v130;
      a3 = v111;
    }
    else
    {
      v27 = 0;
      v28 = (uint64_t *)v132;
    }
    v45 = *(_QWORD *)(a2 + 832);
    if (v45)
      v46 = *(unsigned __int16 *)(v45 + 8);
    else
      v46 = 0;
    v47 = sub_1C636D0C8(a2, (const char *)2, (const llvm::APInt *)&v128, (llvm *)1, 0, v28, v27, v46);
    v49 = v48;
    v50 = 0;
    v51 = *(_QWORD *)(a2 + 832);
    if (v51)
      v50 = *(unsigned __int16 *)(v51 + 8);
    *a3 = sub_1C636D0C8(a2, (const char *)0x92, (const llvm::APInt *)&v128, (llvm *)v126, *((uint64_t *)&v126 + 1), (uint64_t *)v133, DWORD2(v133), v50);
    a3[1] = v52;
    a3[2] = v47;
    a3[3] = v49;
    if (v130 != v132)
      free(v130);
    v53 = (void *)v133;
    if ((_OWORD *)v133 == v134)
      goto LABEL_100;
LABEL_99:
    free(v53);
    goto LABEL_100;
  }
  v21 = sub_1C47C1C70((unsigned __int8 *)v127);
  if ((_DWORD)v20 == 1)
  v22 = 8 * v21;
  if (8 * v21 > 63)
  {
    if (v22 == 64)
    {
      v23 = 0;
      v24 = 0;
      v25 = 6;
      goto LABEL_42;
    }
    if (v22 == 128)
    {
      v23 = 0;
      v24 = 0;
      v25 = 7;
      goto LABEL_42;
    }
  }
  else
  {
    switch(v22)
    {
      case 0x20u:
        v23 = 0;
        v24 = 0;
        v25 = 5;
        goto LABEL_42;
      case 0x10u:
        v23 = 0;
        v24 = 0;
        v25 = 4;
        goto LABEL_42;
      case 8u:
        v23 = 0;
        v24 = 0;
        v25 = 3;
        goto LABEL_42;
    }
  }
  ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a2 + 56), (llvm::LLVMContext *)(8 * v21));
  v24 = v106;
  v23 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
  v25 = ExtendedIntegerVT;
LABEL_42:
  if (LOBYTE(v127[0]))
    v54 = sub_1C47A8C74((unsigned __int8 *)v127);
  else
    v54 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v127);
  v56 = (llvm::LLVMContext *)v54;
  if ((_DWORD)v55 == 1)
  v112 = a3;
  v110 = v11;
  if ((int)v56 <= 31)
  {
    switch((_DWORD)v56)
    {
      case 1:
        v57 = 0;
        v109 = 0;
        v58 = 2;
        goto LABEL_58;
      case 0x10:
        v57 = 0;
        v109 = 0;
        v58 = 4;
        goto LABEL_58;
      case 8:
        v57 = 0;
        v109 = 0;
        v58 = 3;
        goto LABEL_58;
    }
  }
  else
  {
    switch((_DWORD)v56)
    {
      case 0x20:
        v57 = 0;
        v109 = 0;
        v58 = 5;
        goto LABEL_58;
      case 0x40:
        v57 = 0;
        v109 = 0;
        v58 = 6;
        goto LABEL_58;
      case 0x80:
        v57 = 0;
        v109 = 0;
        v58 = 7;
        goto LABEL_58;
    }
  }
  v107 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a2 + 56), v56);
  v109 = v108;
  v57 = v107 & 0xFFFFFFFFFFFFFF00;
  v58 = v107;
LABEL_58:
  if ((_BYTE)v124)
    v59 = sub_1C47A8C74((unsigned __int8 *)&v124);
  else
    v59 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v124);
  v61 = v59;
  v62 = (llvm *)(v25 | v23);
  if ((_DWORD)v60 == 1)
  DWORD2(v133) = v22;
  if (v22 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v133, 0, 0);
  else
    *(_QWORD *)&v133 = 0;
  v63 = v58 | v57;
  sub_1C4912E54(&v133, 0, v61);
  v113 = sub_1C63666FC(a2, (llvm::LLVMContext *)&v133, (const llvm::APInt *)&v128, (uint64_t)v62, v24, 0, 0);
  v66 = v65;
  if (DWORD2(v133) >= 0x41 && (_QWORD)v133)
    MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
  v67 = *(_QWORD *)(a1 + 96);
  v122 = *(_OWORD *)v67;
  v123 = *(_QWORD *)(v67 + 16);
  v68 = *(unsigned __int8 *)(v67 + 34);
  v69 = *(_WORD *)(v67 + 32);
  v70 = *(_OWORD *)(v67 + 56);
  v133 = *(_OWORD *)(v67 + 40);
  v134[0] = v70;
  v72 = sub_1C636B4C8(a2, 1, (uint64_t)&v128, (uint64_t)v62, v24, v114, v115, v64, (uint64_t)v9, v8, &v122, v63, v109, (unsigned __int16)v68 | 0x100u, (v68 | 0x100uLL) >> 32, v69, (uint64_t)&v133);
  *(_QWORD *)&v133 = v134;
  *((_QWORD *)&v133 + 1) = 0x800000000;
  if (v110)
  {
    v75 = v71;
    v76 = 0;
    v77 = v110 - 1;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a2 + 40) + 40) + 272))
        v78 = v77;
      else
        v78 = v76;
      if ((_BYTE)v124)
        v79 = sub_1C47A8C74((unsigned __int8 *)&v124);
      else
        v79 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v124);
      v81 = v79;
      if ((_DWORD)v80 == 1)
      v82 = sub_1C6366C2C(a2, v81 * v78, (uint64_t)v62, v24, (const llvm::APInt *)&v128, 0);
      v85 = *(_QWORD *)(a2 + 832);
      if (v85)
        LOWORD(v85) = *(_WORD *)(v85 + 8);
      v87 = sub_1C5D56C70(a2, 177, (const llvm::APInt *)&v128, v62, v24, (uint64_t)v72, v75, v84, (uint64_t)v82, v83, v85);
      v89 = *(_QWORD *)(a2 + 832);
      if (v89)
        LOWORD(v89) = *(_WORD *)(v89 + 8);
      v91 = sub_1C5D56C70(a2, 171, (const llvm::APInt *)&v128, v62, v24, (uint64_t)v87, v86, v88, v113, v66, v89);
      v92 = *(_QWORD *)(a2 + 832);
      if (v92)
        v93 = *(_WORD *)(v92 + 8);
      else
        v93 = 0;
      v95 = sub_1C5D52060(a2, 201, (const llvm::APInt *)&v128, v124, v125, (uint64_t)v91, v90, v93);
      v96 = v94;
      if ((_DWORD)v119)
      {
        v97 = *(_QWORD *)(a2 + 832);
        if (v97)
          v98 = *(_WORD *)(v97 + 8);
        else
          v98 = 0;
        v95 = sub_1C5D52060(a2, dword_1C866EC40[v119 - 1], (const llvm::APInt *)&v128, v118, v117, (uint64_t)v95, v94, v98);
        v96 = v96 & 0xFFFFFFFF00000000 | v99;
      }
      v100 = DWORD2(v133);
      if (DWORD2(v133) >= (unint64_t)HIDWORD(v133))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, (uint64_t)v134, DWORD2(v133) + 1, 16);
        v100 = DWORD2(v133);
      }
      v101 = (uint64_t **)(v133 + 16 * v100);
      *v101 = v95;
      v101[1] = (uint64_t *)v96;
      v73 = ++DWORD2(v133);
      ++v76;
      --v77;
    }
    while (v77 != -1);
    v74 = (uint64_t *)v133;
  }
  else
  {
    v73 = 0;
    v74 = (uint64_t *)v134;
  }
  v102 = *(_QWORD *)(a2 + 832);
  if (v102)
    v103 = *(unsigned __int16 *)(v102 + 8);
  else
    v103 = 0;
  *v112 = sub_1C636D0C8(a2, (const char *)0x92, (const llvm::APInt *)&v128, (llvm *)v126, *((uint64_t *)&v126 + 1), v74, v73, v103);
  v112[1] = v104;
  v112[2] = v72;
  v112[3] = (uint64_t *)1;
  v53 = (void *)v133;
  if ((_OWORD *)v133 != v134)
    goto LABEL_99;
LABEL_100:
  if (v128)
    llvm::MetadataTracking::untrack((uint64_t)&v128, v128);
}

uint64_t *sub_1C5D9DD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  const char *v10;
  unsigned int v11;
  uint64_t ExtendedSizeInBits;
  const char *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  llvm::LLVMContext *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  llvm *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  __int128 *v51;
  uint64_t v52;
  __int16 v53;
  __int128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t ExtendedIntegerVT;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  llvm *v98;
  unint64_t v99;
  uint64_t v100;
  _OWORD v101[2];
  _BYTE v102[24];
  __int128 v103;
  uint64_t v104;
  llvm *v105;
  const char *v106;
  __int128 v107;
  _QWORD v108[2];
  unsigned __int8 *v109;
  int v110;
  __int128 v111;
  _OWORD v112[8];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 **)(a2 + 64);
  v109 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v109, v4, 2);
  v110 = *(_DWORD *)(a2 + 60);
  v5 = *(uint64_t **)(a2 + 32);
  v90 = v5[1];
  v92 = v5[10];
  v93 = *v5;
  v91 = v5[11];
  v99 = v5[6];
  v100 = v5[5];
  v6 = *(_QWORD *)(a2 + 88);
  v108[0] = *(_QWORD *)(a2 + 80);
  v108[1] = v6;
  if (!LOBYTE(v108[0]))
  {
    if (*(_BYTE *)(v6 + 8) != 19)
      goto LABEL_5;
LABEL_9:
    llvm::report_fatal_error((llvm *)"Cannot scalarize scalable vector stores", (const char *)1);
  }
  if (LOBYTE(v108[0]) - 120 < 0x33)
    goto LABEL_9;
LABEL_5:
  v107 = *(_OWORD *)(*(_QWORD *)(v100 + 40) + 16 * v99);
  v7 = sub_1C6131264((unsigned __int8 *)&v107, (uint64_t)v4, a3);
  v97 = v8;
  v98 = (llvm *)v7;
  v105 = (llvm *)sub_1C6131264((unsigned __int8 *)v108, v8, v9);
  v106 = v10;
  v11 = sub_1C612FE00((llvm::EVT *)v108, v10);
  if (sub_1C6329ADC((llvm::EVT *)&v105))
  {
    if ((_BYTE)v105)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v105);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v105);
    v16 = ExtendedSizeInBits;
    if ((_DWORD)v13 == 1)
    *(_QWORD *)&v111 = v112;
    *((_QWORD *)&v111 + 1) = 0x800000000;
    if (v11)
    {
      v23 = 0;
      v24 = 0;
      v95 = v16 >> 3;
      do
      {
        v25 = sub_1C6366C9C(a3, v24, (uint64_t)&v109, 0);
        v28 = *(_QWORD *)(a3 + 832);
        if (v28)
          LOWORD(v28) = *(_WORD *)(v28 + 8);
        v29 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v109, v98, v97, v100, v99, v27, v25, v26, v28);
        v31 = v30;
        v32 = sub_1C6369954(a3, v92, v91, v23, 0, (const llvm::APInt *)&v109, 3);
        v34 = v33;
        sub_1C4824250(*(uint64_t **)(a2 + 96), v23, (uint64_t)v102);
        v35 = *(_QWORD *)(a2 + 96);
        v36 = *(unsigned __int8 *)(v35 + 34);
        v37 = *(_WORD *)(v35 + 32);
        v38 = *(_OWORD *)(v35 + 56);
        v101[0] = *(_OWORD *)(v35 + 40);
        v101[1] = v38;
        v39 = sub_1C636B9CC(a3, v93, v90, (uint64_t)&v109, (uint64_t)v29, v31, (uint64_t)v32, v34, (uint64_t)v102, (uint64_t)v105, (uint64_t)v106, v36, SHIDWORD(v36), v37, (uint64_t)v101);
        v41 = v40;
        v42 = DWORD2(v111);
        if (DWORD2(v111) >= (unint64_t)HIDWORD(v111))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v112, DWORD2(v111) + 1, 16);
          v42 = DWORD2(v111);
        }
        v43 = (_QWORD *)(v111 + 16 * v42);
        *v43 = v39;
        v43[1] = v41;
        v17 = ++DWORD2(v111);
        ++v24;
        v23 += v95;
      }
      while (v11 != v24);
      v18 = (uint64_t *)v111;
    }
    else
    {
      v17 = 0;
      v18 = (uint64_t *)v112;
    }
    v44 = *(_QWORD *)(a3 + 832);
    if (v44)
      v45 = *(unsigned __int16 *)(v44 + 8);
    else
      v45 = 0;
    v46 = sub_1C636D0C8(a3, (const char *)2, (const llvm::APInt *)&v109, (llvm *)1, 0, v18, v17, v45);
    if ((_OWORD *)v111 != v112)
      free((void *)v111);
    goto LABEL_45;
  }
  if (LOBYTE(v108[0]))
    v14 = sub_1C47A8C74((unsigned __int8 *)v108);
  else
    v14 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v108);
  v19 = (llvm::LLVMContext *)v14;
  if ((_DWORD)v15 == 1)
  if ((int)v19 <= 31)
  {
    switch((_DWORD)v19)
    {
      case 1:
        v20 = 0;
        v21 = 0;
        v22 = 2;
        goto LABEL_43;
      case 0x10:
        v20 = 0;
        v21 = 0;
        v22 = 4;
        goto LABEL_43;
      case 8:
        v20 = 0;
        v21 = 0;
        v22 = 3;
        goto LABEL_43;
    }
LABEL_73:
    ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a3 + 56), v19);
    v21 = v89;
    v20 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
    v22 = ExtendedIntegerVT;
    goto LABEL_43;
  }
  if ((_DWORD)v19 != 32)
  {
    if ((_DWORD)v19 == 64)
    {
      v20 = 0;
      v21 = 0;
      v22 = 6;
      goto LABEL_43;
    }
    if ((_DWORD)v19 == 128)
    {
      v20 = 0;
      v21 = 0;
      v22 = 7;
      goto LABEL_43;
    }
    goto LABEL_73;
  }
  v20 = 0;
  v21 = 0;
  v22 = 5;
LABEL_43:
  v47 = (llvm *)(v22 | v20);
  v48 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v109, (llvm *)(v22 | v20), v21, 0, 0);
  v50 = v49;
  if (v11)
  {
    v56 = 0;
    v57 = v11;
    do
    {
      v96 = (uint64_t)v48;
      v58 = sub_1C6366C9C(a3, v56, (uint64_t)&v109, 0);
      v61 = *(_QWORD *)(a3 + 832);
      if (v61)
        LOWORD(v61) = *(_WORD *)(v61 + 8);
      v63 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v109, v98, v97, v100, v99, v60, v58, v59, v61);
      v64 = *(_QWORD *)(a3 + 832);
      if (v64)
        v65 = *(_WORD *)(v64 + 8);
      else
        v65 = 0;
      v67 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v109, v105, (uint64_t)v106, (uint64_t)v63, v62, v65);
      v68 = *(_QWORD *)(a3 + 832);
      if (v68)
        v69 = *(_WORD *)(v68 + 8);
      else
        v69 = 0;
      v70 = v21;
      v71 = sub_1C5D52060(a3, 199, (const llvm::APInt *)&v109, v47, v21, (uint64_t)v67, v66, v69);
      v73 = v72;
      if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272))
        v74 = (v57 - 1);
      else
        v74 = v56;
      if ((_BYTE)v105)
        v75 = sub_1C47A8C74((unsigned __int8 *)&v105);
      else
        v75 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v105);
      v77 = v75;
      if ((_DWORD)v76 == 1)
      v78 = v77 * v74;
      v21 = v70;
      v79 = sub_1C6366AB4(a3, v78, (const llvm::APInt *)&v109, v47, v70, 0, 0);
      v82 = *(_QWORD *)(a3 + 832);
      if (v82)
        LOWORD(v82) = *(_WORD *)(v82 + 8);
      v83 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v109, v47, v70, (uint64_t)v71, v73, v81, (uint64_t)v79, v80, v82);
      v86 = *(_QWORD *)(a3 + 832);
      if (v86)
        LOWORD(v86) = *(_WORD *)(v86 + 8);
      v48 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v109, v47, v70, v96, v50, v85, (uint64_t)v83, v84, v86);
      v50 = v50 & 0xFFFFFFFF00000000 | v87;
      ++v56;
      --v57;
    }
    while (v57);
  }
  v51 = *(__int128 **)(a2 + 96);
  v103 = *v51;
  v104 = *((_QWORD *)v51 + 2);
  v52 = *((unsigned __int8 *)v51 + 34);
  v53 = *((_WORD *)v51 + 16);
  v54 = *(__int128 *)((char *)v51 + 56);
  v111 = *(__int128 *)((char *)v51 + 40);
  v112[0] = v54;
  v46 = sub_1C636B75C(a3, v93, v90, (uint64_t)&v109, (uint64_t)v48, v50, v92, v91, (uint64_t)&v103, v52, SHIDWORD(v52), v53, (uint64_t)&v111);
LABEL_45:
  if (v109)
    llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
  return v46;
}

void sub_1C5D9E418(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  llvm *v13;
  unsigned __int8 *v14;
  llvm::EVT *v15;
  uint64_t ExtendedSizeInBits;
  const char *v17;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  unsigned int v24;
  llvm::LLVMContext *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  int v47;
  const char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  llvm *v55;
  uint64_t v56;
  uint64_t v57;
  llvm *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int128 v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t *FixedStack;
  int v78;
  uint64_t *v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  llvm::LLVMContext *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  __int128 v132;
  llvm *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  __int128 v141;
  llvm *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned int v147;
  unsigned int v148;
  __int16 v149;
  __int128 v150;
  unsigned int v151;
  uint64_t *v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  __int16 v156;
  __int128 v157;
  uint64_t v158;
  unsigned int v159;
  unint64_t v160;
  uint64_t *v161;
  llvm *ShiftAmountTy;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  unsigned int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t ExtendedIntegerVT;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t **v191;
  _QWORD *v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  int v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  int v219;
  char v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  unsigned __int8 v225;
  unsigned __int8 *v226;
  int v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  char v232;
  __int128 v233;
  _OWORD v234[8];
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v211 = *v8;
  v209 = v8[1];
  v11 = (uint64_t *)v8[5];
  v10 = v8[6];
  v13 = *(llvm **)v9;
  v12 = *(_QWORD *)(v9 + 8);
  v228 = *(_OWORD *)(a2 + 80);
  v14 = *(unsigned __int8 **)(a2 + 64);
  v226 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v226, v14, 2);
  v227 = *(_DWORD *)(a2 + 60);
  v207 = *(_QWORD *)(a3 + 40);
  v210 = a2;
  if ((_BYTE)v13)
  {
    if (((_BYTE)v13 - 8) < 0xA3u)
      goto LABEL_5;
  }
  else if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12 || *(_DWORD *)(v12 + 8) <= 6u)
  {
LABEL_5:
    v15 = *(llvm::EVT **)(a3 + 56);
    if ((_BYTE)v228)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v228);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v228);
    v22 = (llvm::LLVMContext *)ExtendedSizeInBits;
    if ((_DWORD)v17 == 1)
    if ((int)v22 <= 31)
    {
      switch((_DWORD)v22)
      {
        case 1:
          v23 = 2;
          goto LABEL_34;
        case 0x10:
          v23 = 4;
          goto LABEL_34;
        case 8:
          v23 = 3;
          goto LABEL_34;
      }
    }
    else
    {
      switch((_DWORD)v22)
      {
        case 0x20:
          v23 = 5;
LABEL_34:
          v31 = 0;
          v32 = v23;
LABEL_35:
          if (a1[v32 + 12] && (_BYTE)v228 && a1[v228 + 12])
          {
            if ((*((unsigned __int8 *)a1 + 390 * v32 + 4115) | 4) != 4
              && v228 - 15 < 0x9C)
            {
              sub_1C5D9D4DC(a2, a3, (uint64_t **)a4);
              goto LABEL_41;
            }
            v34 = sub_1C636B420(a3, v23, v31, (uint64_t)&v226, v211, v209, (uint64_t)v11, v10, *(_QWORD *)(a2 + 96));
            v35 = *(_QWORD *)(a3 + 832);
            if (v35)
              v36 = *(_WORD *)(v35 + 8);
            else
              v36 = 0;
            v37 = sub_1C5D52060(a3, 216, (const llvm::APInt *)&v226, (llvm *)v228, *((uint64_t *)&v228 + 1), (uint64_t)v34, v33, v36);
            v39 = v38;
            if (v228 == v13)
            {
              if ((_BYTE)v13 || *((_QWORD *)&v228 + 1) == v12)
              {
LABEL_64:
                *(_QWORD *)a4 = v37;
                *(_QWORD *)(a4 + 8) = v39;
                *(_QWORD *)(a4 + 16) = v34;
                *(_QWORD *)(a4 + 24) = 1;
                goto LABEL_41;
              }
            }
            else if ((_BYTE)v13)
            {
              if (((_BYTE)v13 + 104) < 0x13u
                || ((_BYTE)v13 - 8) < 7u
                || ((_BYTE)v13 - 75) < 0x2Du)
              {
LABEL_59:
                v40 = 215;
                goto LABEL_60;
              }
LABEL_55:
              v40 = 200;
LABEL_60:
              v42 = *(_QWORD *)(a3 + 832);
              if (v42)
                v43 = *(_WORD *)(v42 + 8);
              else
                v43 = 0;
              v37 = sub_1C5D52060(a3, v40, (const llvm::APInt *)&v226, v13, v12, (uint64_t)v37, v39, v43);
              v39 = v39 & 0xFFFFFFFF00000000 | v44;
              goto LABEL_64;
            }
            v41 = *(_DWORD *)(v12 + 8);
            if ((v41 & 0xFE) == 0x12)
              v41 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
            if (v41 <= 6u)
              goto LABEL_59;
            goto LABEL_55;
          }
LABEL_74:
          v225 = sub_1C47A8BD8((unint64_t)a1, *(llvm::EVT **)(a3 + 56), v23, v31);
          v47 = sub_1C47C1C70((unsigned __int8 *)&v228);
          if ((_DWORD)v46 == 1)
          v192 = (_QWORD *)a4;
          v49 = sub_1C47A8C74(&v225);
          if ((_DWORD)v48 == 1)
          v189 = (uint64_t)v13;
          v190 = v12;
          v186 = v47;
          v202 = v49 >> 3;
          v50 = (v47 + (v49 >> 3) - 1) / (v49 >> 3);
          v51 = sub_1C5D442D8(a3, v228, *((uint64_t *)&v228 + 1), v225, 0);
          v53 = v52;
          v205 = *(_DWORD *)(v51 + 76);
          *(_QWORD *)&v233 = v234;
          *((_QWORD *)&v233 + 1) = 0x800000000;
          v54 = v11[5] + 16 * v10;
          v55 = *(llvm **)v54;
          v56 = *(_QWORD *)(v54 + 8);
          v57 = *(_QWORD *)(v51 + 40) + 16 * v52;
          v58 = *(llvm **)v57;
          v59 = *(_QWORD *)(v57 + 8);
          v60 = (v49 >> 3);
          v61 = sub_1C6366AB4(a3, v60, (const llvm::APInt *)&v226, v55, v56, 0, 0);
          v198 = v62;
          v200 = (uint64_t)v61;
          v63 = sub_1C6366AB4(a3, v60, (const llvm::APInt *)&v226, v58, v59, 0, 0);
          v193 = v64;
          v195 = (uint64_t)v63;
          v187 = v53;
          v188 = v51;
          v65 = 0;
          if (v50 < 2)
          {
            v68 = (uint64_t *)v51;
            LODWORD(v67) = v53;
          }
          else
          {
            v66 = v50 - 1;
            v67 = v53;
            v68 = (uint64_t *)v51;
            do
            {
              v69 = v225;
              sub_1C4824250(*(uint64_t **)(v210 + 96), v65, (uint64_t)&v224);
              v70 = *(_QWORD *)(v210 + 96);
              v71 = *(unsigned __int8 *)(v70 + 34);
              v72 = *(_WORD *)(v70 + 32);
              v73 = *(_OWORD *)(v70 + 56);
              v222 = *(_OWORD *)(v70 + 40);
              v223 = v73;
              v50 = v50 & 0xFFFFFFFFFFFF0000 | v71 | 0x100;
              v74 = sub_1C63681B0(a3, v69, 0, (uint64_t)&v226, v211, v209, (uint64_t)v11, v10, &v224, v50, SHIDWORD(v50), v72, (uint64_t)&v222, 0);
              v76 = v75;
              FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v207 + 432), v205);
              if (FixedStack)
                v78 = *((_DWORD *)FixedStack + 3);
              else
                v78 = 0;
              v222 = 0u;
              v223 = 0u;
              v229 = (unint64_t)FixedStack | 4;
              v230 = v65;
              v231 = v78;
              v232 = 0;
              v79 = (uint64_t *)(v74[5] + 16 * v76);
              sub_1C6365BD8(a3, *v79, v79[1]);
              v82 = sub_1C636B75C(a3, (uint64_t)v74, 1, (uint64_t)&v226, (uint64_t)v74, v76, (uint64_t)v68, v67, (uint64_t)&v229, v80, 0, 0, (uint64_t)&v222);
              v84 = v83;
              v85 = DWORD2(v233);
              if (DWORD2(v233) >= (unint64_t)HIDWORD(v233))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)v234, DWORD2(v233) + 1, 16);
                v85 = DWORD2(v233);
              }
              v86 = (_QWORD *)(v233 + 16 * v85);
              *v86 = v82;
              v86[1] = v84;
              ++DWORD2(v233);
              v65 += v202;
              v87 = v11[5] + 16 * v10;
              v11 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v226, *(llvm **)v87, *(_QWORD *)(v87 + 8), (uint64_t)v11, v10, v81, v200, v198, 3);
              v10 = v10 & 0xFFFFFFFF00000000 | v88;
              v89 = v68[5] + 16 * v67;
              v68 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v226, *(llvm **)v89, *(_QWORD *)(v89 + 8), (uint64_t)v68, v67, v90, v195, v193, 3);
              v67 = v67 & 0xFFFFFFFF00000000 | v91;
              --v66;
            }
            while (v66);
          }
          v92 = (llvm::LLVMContext *)(8 * (v186 - v65));
          if ((int)v92 > 63)
          {
            if ((_DWORD)v92 == 64)
            {
              v93 = 0;
              v203 = 0;
              v94 = 6;
              goto LABEL_97;
            }
            if ((_DWORD)v92 == 128)
            {
              v93 = 0;
              v203 = 0;
              v94 = 7;
              goto LABEL_97;
            }
          }
          else
          {
            switch((_DWORD)v92)
            {
              case 0x20:
                v93 = 0;
                v203 = 0;
                v94 = 5;
LABEL_97:
                v95 = v94 | v93;
                v96 = v225;
                v97 = v65;
                sub_1C4824250(*(uint64_t **)(v210 + 96), v65, (uint64_t)&v221);
                v98 = *(_QWORD *)(v210 + 96);
                v99 = *(unsigned __int8 *)(v98 + 34);
                v100 = *(_WORD *)(v98 + 32);
                v101 = *(_OWORD *)(v98 + 56);
                v222 = *(_OWORD *)(v98 + 40);
                v223 = v101;
                v103 = sub_1C636B4C8(a3, 1, (uint64_t)&v226, v96, 0, v211, v209, v102, (uint64_t)v11, v10, &v221, v95, v203, (unsigned __int16)v99 | 0x100u, (v99 | 0x100uLL) >> 32, v100, (uint64_t)&v222);
                v105 = v104;
                v106 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v207 + 432), v205);
                if (v106)
                  v107 = *((_DWORD *)v106 + 3);
                else
                  v107 = 0;
                v222 = 0u;
                v223 = 0u;
                v229 = (unint64_t)v106 | 4;
                v230 = v97;
                v231 = v107;
                v232 = 0;
                sub_1C6365BD8(a3, v95, v203);
                v109 = sub_1C636B9CC(a3, (uint64_t)v103, 1, (uint64_t)&v226, (uint64_t)v103, v105, (uint64_t)v68, v67, (uint64_t)&v229, v95, v203, v108, 0, 0, (uint64_t)&v222);
                v111 = v110;
                v112 = DWORD2(v233);
                if (DWORD2(v233) >= HIDWORD(v233))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)v234, DWORD2(v233) + 1, 16);
                  v112 = DWORD2(v233);
                }
                v113 = (_QWORD *)(v233 + 16 * v112);
                *v113 = v109;
                v113[1] = v111;
                v114 = ++DWORD2(v233);
                v115 = *(_QWORD *)(a3 + 832);
                if (v115)
                  v116 = *(unsigned __int16 *)(v115 + 8);
                else
                  v116 = 0;
                v117 = sub_1C636D0C8(a3, (const char *)2, (const llvm::APInt *)&v226, (llvm *)1, 0, (uint64_t *)v233, v114, v116);
                v119 = v118;
                v120 = (*(unsigned __int16 *)(v210 + 26) >> 10) & 3;
                v121 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v207 + 432), v205);
                *(_QWORD *)&v218 = (unint64_t)v121 | 4;
                *((_QWORD *)&v218 + 1) = 0;
                v220 = 0;
                if (v121)
                  v123 = *((_DWORD *)v121 + 3);
                else
                  v123 = 0;
                v219 = v123;
                v222 = 0u;
                v223 = 0u;
                *v192 = sub_1C636B4C8(a3, v120, (uint64_t)&v226, v189, v190, (uint64_t)v117, v119, v122, v188, v187, &v218, v228, *((uint64_t *)&v228 + 1), 0, 0, 0, (uint64_t)&v222);
                v192[1] = v105 & 0xFFFFFFFF00000000 | v124;
                v192[2] = v117;
                v192[3] = v119;
                if ((_OWORD *)v233 != v234)
                  free((void *)v233);
                goto LABEL_41;
              case 0x10:
                v93 = 0;
                v203 = 0;
                v94 = 4;
                goto LABEL_97;
              case 8:
                v93 = 0;
                v203 = 0;
                v94 = 3;
                goto LABEL_97;
            }
          }
          ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a3 + 56), v92);
          v203 = v181;
          v93 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
          v94 = ExtendedIntegerVT;
          goto LABEL_97;
        case 0x40:
          v23 = 6;
          goto LABEL_34;
        case 0x80:
          v23 = 7;
          goto LABEL_34;
      }
    }
    v23 = llvm::EVT::getExtendedIntegerVT(v15, v22);
    v31 = v45;
    v32 = v23;
    if (!(_BYTE)v23)
      goto LABEL_74;
    goto LABEL_35;
  }
  if ((_BYTE)v228)
    v19 = sub_1C47A8C74((unsigned __int8 *)&v228);
  else
    v19 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v228);
  v24 = v19;
  if ((_DWORD)v20 == 1)
  v25 = (llvm::LLVMContext *)(v24 >> 1);
  v191 = (uint64_t **)a4;
  v208 = (uint64_t)v25;
  v26 = (uint64_t)v13;
  v27 = v12;
  if (v24 >> 1 <= 0x1F)
  {
    switch((_DWORD)v25)
    {
      case 1:
        v28 = 0;
        v29 = 0;
        v30 = 2;
        goto LABEL_110;
      case 0x10:
        v28 = 0;
        v29 = 0;
        v30 = 4;
        goto LABEL_110;
      case 8:
        v28 = 0;
        v29 = 0;
        v30 = 3;
        goto LABEL_110;
    }
LABEL_128:
    v182 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a3 + 56), v25);
    v28 = v182 & 0xFFFFFFFFFFFFFF00;
    v30 = v182;
    goto LABEL_110;
  }
  if ((_DWORD)v25 != 32)
  {
    if ((_DWORD)v25 == 64)
    {
      v28 = 0;
      v29 = 0;
      v30 = 6;
      goto LABEL_110;
    }
    if ((_DWORD)v25 == 128)
    {
      v28 = 0;
      v29 = 0;
      v30 = 7;
      goto LABEL_110;
    }
    goto LABEL_128;
  }
  v28 = 0;
  v29 = 0;
  v30 = 5;
LABEL_110:
  v125 = v30 | v28;
  v126 = *(_QWORD *)(a2 + 96);
  if (((*(unsigned __int16 *)(a2 + 26) >> 10) & 3) != 0)
    v127 = (*(unsigned __int16 *)(a2 + 26) >> 10) & 3;
  else
    v127 = 3;
  v128 = (__int128 *)(v126 + 40);
  v129 = *(unsigned __int8 *)(v126 + 34) | 0x100;
  v130 = v24 >> 4;
  v204 = v125;
  v206 = v10 & 0xFFFFFFFF00000000;
  v199 = v129;
  v201 = v29;
  if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272))
  {
    v213 = *(_OWORD *)v126;
    v214 = *(_QWORD *)(v126 + 16);
    v149 = *(_WORD *)(v126 + 32);
    v150 = v128[1];
    v233 = *v128;
    v234[0] = v150;
    v197 = sub_1C636B4C8(a3, v127, (uint64_t)&v226, v26, v12, v211, v209, v21, (uint64_t)v11, v10, &v213, v125, v29, v129, SHIDWORD(v129), v149, (uint64_t)&v233);
    v148 = v151;
    v152 = sub_1C6369954(a3, (uint64_t)v11, v10, v130, 0, (const llvm::APInt *)&v226, 3);
    v154 = v153 | v206;
    sub_1C4824250(*(uint64_t **)(a2 + 96), v130, (uint64_t)&v212);
    v155 = *(_QWORD *)(a2 + 96);
    v156 = *(_WORD *)(v155 + 32);
    v157 = *(_OWORD *)(v155 + 56);
    v233 = *(_OWORD *)(v155 + 40);
    v234[0] = v157;
    v184 = (uint64_t)v152;
    v185 = v154;
    v146 = v197;
    v142 = (llvm *)v26;
    v144 = sub_1C636B4C8(a3, 3, (uint64_t)&v226, v26, v12, v211, v209, v158, v184, v185, &v212, v204, v201, v199, SHIDWORD(v199), v156, (uint64_t)&v233);
    v135 = v159;
  }
  else
  {
    v216 = *(_OWORD *)v126;
    v217 = *(_QWORD *)(v126 + 16);
    v131 = *(_WORD *)(v126 + 32);
    v132 = v128[1];
    v233 = *v128;
    v234[0] = v132;
    v133 = (llvm *)v26;
    v196 = v127;
    v194 = sub_1C636B4C8(a3, 3, (uint64_t)&v226, v26, v27, v211, v209, v21, (uint64_t)v11, v10, &v216, v125, v29, v129, SHIDWORD(v129), v131, (uint64_t)&v233);
    v135 = v134;
    v136 = sub_1C6369954(a3, (uint64_t)v11, v10, v130, 0, (const llvm::APInt *)&v226, 3);
    v138 = v137 | v206;
    sub_1C4824250(*(uint64_t **)(a2 + 96), v130, (uint64_t)&v215);
    v139 = *(_QWORD *)(a2 + 96);
    v140 = *(_WORD *)(v139 + 32);
    v141 = *(_OWORD *)(v139 + 56);
    v233 = *(_OWORD *)(v139 + 40);
    v234[0] = v141;
    v183 = (uint64_t)v136;
    v142 = v133;
    v143 = (uint64_t)v133;
    v144 = v194;
    v146 = sub_1C636B4C8(a3, v196, (uint64_t)&v226, v143, v27, v211, v209, v145, v183, v138, &v215, v204, v201, v199, SHIDWORD(v199), v140, (uint64_t)&v233);
    v148 = v147;
  }
  v160 = v135;
  v161 = (uint64_t *)(v146[5] + 16 * v148);
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, *v161, v161[1], *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 1);
  v164 = sub_1C6366AB4(a3, v208, (const llvm::APInt *)&v226, ShiftAmountTy, v163, 0, 0);
  v167 = *(_QWORD *)(a3 + 832);
  if (v167)
    LOWORD(v167) = *(_WORD *)(v167 + 8);
  v169 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v226, v142, v27, (uint64_t)v146, v148, v166, (uint64_t)v164, v165, v167);
  v171 = v168;
  v172 = *(_QWORD *)(a3 + 832);
  if (v172)
    LOWORD(v172) = *(_WORD *)(v172 + 8);
  v174 = sub_1C5D56C70(a3, 172, (const llvm::APInt *)&v226, v142, v27, (uint64_t)v169, v168, v170, (uint64_t)v144, v160, v172);
  v176 = v171 & 0xFFFFFFFF00000000 | v175;
  v177 = *(_QWORD *)(a3 + 832);
  if (v177)
    LOWORD(v177) = *(_WORD *)(v177 + 8);
  v178 = sub_1C5D56C70(a3, 2, (const llvm::APInt *)&v226, (llvm *)1, 0, (uint64_t)v144, 1uLL, v173, (uint64_t)v146, 1uLL, v177);
  *v191 = v174;
  v191[1] = (uint64_t *)v176;
  v191[2] = v178;
  v191[3] = v179;
LABEL_41:
  if (v226)
    llvm::MetadataTracking::untrack((uint64_t)&v226, v226);
}

uint64_t *sub_1C5D9F230(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  llvm::EVT *v15;
  uint64_t ExtendedIntegerVT;
  const char *v17;
  llvm::LLVMContext *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int ExtendedSizeInBits;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  llvm *ShiftAmountTy;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  __int128 *v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  __int16 v45;
  __int128 v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v54;
  __int16 v55;
  uint64_t *v56;
  __int128 *v57;
  unsigned int v58;
  uint64_t v59;
  llvm::EVT *v60;
  uint64_t v61;
  const char *v62;
  llvm::LLVMContext *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  int v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *FixedStack;
  unint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  char v82;
  int v83;
  uint64_t v84;
  llvm *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  _QWORD *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  llvm::LLVMContext *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  int v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  llvm *v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[24];
  __int128 v163;
  uint64_t v164;
  _BYTE v165[24];
  __int128 v166;
  int v167;
  char v168;
  _BYTE v169[24];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  int v173;
  char v174;
  unsigned __int8 v175;
  __int128 v176;
  uint64_t v177;
  unsigned __int8 *v178;
  int v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _OWORD v183[8];
  uint64_t v184;

  v3 = a3;
  v184 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(a2 + 32);
  v154 = *v6;
  v156 = v6[1];
  v7 = (uint64_t *)v6[10];
  v8 = v6[11];
  v10 = v6[5];
  v9 = v6[6];
  v11 = *(_OWORD *)(*(_QWORD *)(v10 + 40) + 16 * v9);
  v158 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 96) + 34);
  v161 = *(_QWORD *)(a3 + 40);
  v12 = *(_OWORD *)(a2 + 80);
  v180 = v12;
  v181 = v11;
  v13 = *(unsigned __int8 **)(a2 + 64);
  v178 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v178, v13, 2);
    v14 = v180;
  }
  else
  {
    v14 = v12;
  }
  v179 = *(_DWORD *)(a2 + 60);
  if (v14)
  {
    if ((v14 - 8) >= 0xA3u)
      goto LABEL_23;
  }
  else if ((*(_DWORD *)(*((_QWORD *)&v180 + 1) + 8) & 0xFE) != 0x12
         && *(_DWORD *)(*((_QWORD *)&v180 + 1) + 8) > 6u)
  {
LABEL_23:
    *(_QWORD *)&v170 = sub_1C632C870((unsigned __int8 *)&v180, *(llvm::EVT **)(v3 + 56));
    *((_QWORD *)&v170 + 1) = v22;
    if ((_BYTE)v170)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v170);
    else
      ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v170);
    v24 = ExtendedSizeInBits;
    v25 = ExtendedSizeInBits;
    v26 = (uint64_t *)(*(_QWORD *)(v10 + 40) + 16 * v9);
    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, *v26, v26[1], *(_QWORD *)(**(_QWORD **)(v3 + 40) + 40) + 272, 1);
    v29 = sub_1C6366AB4(v3, v25, (const llvm::APInt *)&v178, ShiftAmountTy, v28, 0, 0);
    v32 = *(_QWORD *)(v3 + 832);
    if (v32)
      LOWORD(v32) = *(_WORD *)(v32 + 8);
    v33 = sub_1C5D56C70(v3, 177, (const llvm::APInt *)&v178, (llvm *)v181, *((uint64_t *)&v181 + 1), v10, v9, v31, (uint64_t)v29, v30, v32);
    v35 = (uint64_t)v33;
    v148 = v34;
    if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v3 + 40) + 40) + 272))
      v36 = (uint64_t)v33;
    else
      v36 = v10;
    if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v3 + 40) + 40) + 272))
      v37 = v34;
    else
      v37 = v9;
    v38 = *(__int128 **)(a2 + 96);
    v163 = *v38;
    v164 = *((_QWORD *)v38 + 2);
    LOWORD(v38) = *((_WORD *)v38 + 16);
    v182 = 0u;
    v183[0] = 0u;
    v39 = sub_1C636B9CC(v3, v154, v156, (uint64_t)&v178, v36, v37, (uint64_t)v7, v8, (uint64_t)&v163, v170, *((uint64_t *)&v170 + 1), v158, SHIDWORD(v158), (__int16)v38, (uint64_t)&v182);
    v150 = v40;
    v152 = (uint64_t)v39;
    v41 = sub_1C6369954(v3, (uint64_t)v7, v8, v24 >> 3, 0, (const llvm::APInt *)&v178, 3);
    v43 = v42;
    if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v3 + 40) + 40) + 272))
      v35 = v10;
    else
      LODWORD(v9) = v148;
    sub_1C4824250(*(uint64_t **)(a2 + 96), v24 >> 3, (uint64_t)v162);
    v44 = *(_QWORD *)(a2 + 96);
    v45 = *(_WORD *)(v44 + 32);
    v46 = *(_OWORD *)(v44 + 56);
    v182 = *(_OWORD *)(v44 + 40);
    v183[0] = v46;
    v47 = sub_1C636B9CC(v3, v154, v156, (uint64_t)&v178, v35, v9, (uint64_t)v41, v43, (uint64_t)v162, v170, *((uint64_t *)&v170 + 1), v158, SHIDWORD(v158), v45, (uint64_t)&v182);
    v50 = *(_QWORD *)(v3 + 832);
    if (v50)
      LOWORD(v50) = *(_WORD *)(v50 + 8);
    v51 = sub_1C5D56C70(v3, 2, (const llvm::APInt *)&v178, (llvm *)1, 0, v152, v150, v49, (uint64_t)v47, v48, v50);
    goto LABEL_47;
  }
  v15 = *(llvm::EVT **)(v3 + 56);
  if ((_BYTE)v181)
    ExtendedIntegerVT = sub_1C47A8C74((unsigned __int8 *)&v181);
  else
    ExtendedIntegerVT = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v181);
  v18 = (llvm::LLVMContext *)ExtendedIntegerVT;
  if ((_DWORD)v17 == 1)
  if ((int)v18 <= 31)
  {
    switch((_DWORD)v18)
    {
      case 1:
        v19 = 0;
        v20 = 2;
        v21 = 2;
        goto LABEL_42;
      case 0x10:
        v19 = 0;
        v20 = 4;
        v21 = 4;
        goto LABEL_42;
      case 8:
        v19 = 0;
        v20 = 3;
        v21 = 3;
        goto LABEL_42;
    }
  }
  else
  {
    switch((_DWORD)v18)
    {
      case 0x20:
        v19 = 0;
        v20 = 5;
        v21 = 5;
        goto LABEL_42;
      case 0x40:
        v19 = 0;
        v20 = 6;
        v21 = 6;
        goto LABEL_42;
      case 0x80:
        v19 = 0;
        v20 = 7;
        v21 = 7;
        goto LABEL_42;
    }
  }
  ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(v15, v18);
  v21 = ExtendedIntegerVT;
  if (!(_BYTE)ExtendedIntegerVT)
    goto LABEL_60;
  v20 = ExtendedIntegerVT;
  v19 = v59;
LABEL_42:
  if (a1[v21 + 12])
  {
    if ((*((unsigned __int8 *)a1 + 390 * v21 + 4116) | 4) != 4)
    {
      if ((_BYTE)v180)
      {
        if (v180 - 15 < 0x9C)
        {
LABEL_46:
          v51 = sub_1C5D9DD98(ExtendedIntegerVT, a2, v3);
LABEL_47:
          v52 = v51;
          goto LABEL_48;
        }
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v180 + 1) + 8) & 0xFE) == 0x12)
      {
        goto LABEL_46;
      }
    }
    v54 = *(_QWORD *)(v3 + 832);
    if (v54)
      v55 = *(_WORD *)(v54 + 8);
    else
      v55 = 0;
    v56 = sub_1C5D52060(v3, 216, (const llvm::APInt *)&v178, (llvm *)v20, v19, v10, v9, v55);
    v57 = *(__int128 **)(a2 + 96);
    v176 = *v57;
    v177 = *((_QWORD *)v57 + 2);
    LOWORD(v57) = *((_WORD *)v57 + 16);
    v182 = 0u;
    v183[0] = 0u;
    v52 = sub_1C636B75C(v3, v154, v156, (uint64_t)&v178, (uint64_t)v56, v58, (uint64_t)v7, v8, (uint64_t)&v176, v158, SHIDWORD(v158), (__int16)v57, (uint64_t)&v182);
    goto LABEL_48;
  }
LABEL_60:
  v60 = *(llvm::EVT **)(v3 + 56);
  if ((_BYTE)v180)
    v61 = sub_1C47A8C74((unsigned __int8 *)&v180);
  else
    v61 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v180);
  v63 = (llvm::LLVMContext *)v61;
  if ((_DWORD)v62 == 1)
  if ((int)v63 <= 31)
  {
    switch((_DWORD)v63)
    {
      case 1:
        v64 = 0;
        v65 = 0;
        v66 = 2;
        goto LABEL_76;
      case 0x10:
        v64 = 0;
        v65 = 0;
        v66 = 4;
        goto LABEL_76;
      case 8:
        v64 = 0;
        v65 = 0;
        v66 = 3;
        goto LABEL_76;
    }
  }
  else
  {
    switch((_DWORD)v63)
    {
      case 0x20:
        v64 = 0;
        v65 = 0;
        v66 = 5;
        goto LABEL_76;
      case 0x40:
        v64 = 0;
        v65 = 0;
        v66 = 6;
        goto LABEL_76;
      case 0x80:
        v64 = 0;
        v65 = 0;
        v66 = 7;
        goto LABEL_76;
    }
  }
  v138 = llvm::EVT::getExtendedIntegerVT(v60, v63);
  v65 = v139;
  v64 = v138 & 0xFFFFFFFFFFFFFF00;
  v66 = v138;
LABEL_76:
  v175 = sub_1C47A8BD8((unint64_t)a1, v60, v66 | v64, v65);
  v67 = v7[5] + 16 * v8;
  v159 = *(llvm **)v67;
  v145 = *(_QWORD *)(v67 + 8);
  v69 = sub_1C47C1C70((unsigned __int8 *)&v180);
  if ((_DWORD)v68 == 1)
  v71 = sub_1C47A8C74(&v175);
  if ((_DWORD)v70 == 1)
  v147 = v71 >> 3;
  v140 = (v69 + (v71 >> 3) - 1) / (v71 >> 3);
  v72 = sub_1C5D442D8(v3, v180, *((uint64_t *)&v180 + 1), v175, 0);
  v74 = v73;
  v75 = v72;
  v151 = *(_DWORD *)(v72 + 76);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v161 + 432), v151);
  v153 = a2;
  v141 = v69;
  v77 = v71;
  if (FixedStack)
    v78 = *((_DWORD *)FixedStack + 3);
  else
    v78 = 0;
  v79 = v180;
  v182 = 0u;
  v183[0] = 0u;
  v170 = (unint64_t)FixedStack | 4;
  LODWORD(v171) = v78;
  BYTE4(v171) = 0;
  sub_1C6365BD8(v3, v180, *((uint64_t *)&v180 + 1));
  v80 = v10;
  v81 = (uint64_t *)v75;
  v155 = sub_1C636B9CC(v3, v154, v156, (uint64_t)&v178, v80, v9, v75, v74, (uint64_t)&v170, v79, *((uint64_t *)&v79 + 1), v82, 0, 0, (uint64_t)&v182);
  v149 = v83;
  v84 = *(_QWORD *)(v75 + 40) + 16 * v74;
  v85 = *(llvm **)v84;
  v86 = *(_QWORD *)(v84 + 8);
  v87 = sub_1C6366AB4(v3, (v77 >> 3), (const llvm::APInt *)&v178, v159, v145, 0, 0);
  v144 = v88;
  v146 = (uint64_t)v87;
  v89 = sub_1C6366AB4(v3, (v77 >> 3), (const llvm::APInt *)&v178, v85, v86, 0, 0);
  v142 = v90;
  v143 = (uint64_t)v89;
  *(_QWORD *)&v182 = v183;
  *((_QWORD *)&v182 + 1) = 0x800000000;
  if (v140 < 2)
  {
    v91 = 0;
  }
  else
  {
    v91 = 0;
    v92 = v140 - 1;
    v160 = v3;
    do
    {
      v93 = v175;
      v94 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v161 + 432), v151);
      *(_QWORD *)&v172 = (unint64_t)v94 | 4;
      *((_QWORD *)&v172 + 1) = v91;
      v174 = 0;
      if (v94)
        v95 = *((_DWORD *)v94 + 3);
      else
        v95 = 0;
      v173 = v95;
      v171 = 0u;
      v170 = 0u;
      v157 = (uint64_t)v81;
      v96 = sub_1C63681B0(v160, v93, 0, (uint64_t)&v178, (uint64_t)v155, v149, (uint64_t)v81, v74, &v172, 0, 0, 0, (uint64_t)&v170, 0);
      v98 = v97;
      sub_1C4824250(*(uint64_t **)(v153 + 96), v91, (uint64_t)v169);
      v99 = *(_QWORD *)(v153 + 96);
      v100 = *(unsigned __int8 *)(v99 + 34);
      LOWORD(v99) = *(_WORD *)(v99 + 32);
      v171 = 0u;
      v170 = 0u;
      v102 = sub_1C636B75C(v160, (uint64_t)v96, 1, (uint64_t)&v178, (uint64_t)v96, v98, (uint64_t)v7, v8, (uint64_t)v169, v100, SHIDWORD(v100), v99, (uint64_t)&v170);
      v104 = v103;
      v105 = DWORD2(v182);
      if (DWORD2(v182) >= (unint64_t)HIDWORD(v182))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v183, DWORD2(v182) + 1, 16);
        v105 = DWORD2(v182);
      }
      v106 = (_QWORD *)(v182 + 16 * v105);
      *v106 = v102;
      v106[1] = v104;
      ++DWORD2(v182);
      v91 += v147;
      v107 = *(_QWORD *)(v157 + 40) + 16 * v74;
      v3 = v160;
      v81 = sub_1C5D56C70(v160, 56, (const llvm::APInt *)&v178, *(llvm **)v107, *(_QWORD *)(v107 + 8), v157, v74, v101, v143, v142, 3);
      v74 = v74 & 0xFFFFFFFF00000000 | v108;
      v109 = v7[5] + 16 * v8;
      v7 = sub_1C5D56C70(v160, 56, (const llvm::APInt *)&v178, *(llvm **)v109, *(_QWORD *)(v109 + 8), (uint64_t)v7, v8, v110, v146, v144, 3);
      v8 = v8 & 0xFFFFFFFF00000000 | v111;
      --v92;
    }
    while (v92);
  }
  v112 = (llvm::LLVMContext *)(8 * (v141 - v91));
  if ((int)v112 > 63)
  {
    v113 = v153;
    if ((_DWORD)v112 == 64)
    {
      v114 = 0;
      v115 = 0;
      v116 = 6;
      goto LABEL_101;
    }
    if ((_DWORD)v112 == 128)
    {
      v114 = 0;
      v115 = 0;
      v116 = 7;
      goto LABEL_101;
    }
LABEL_115:
    v136 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v3 + 56), v112);
    v115 = v137;
    v114 = v136 & 0xFFFFFFFFFFFFFF00;
    v116 = v136;
    goto LABEL_101;
  }
  v113 = v153;
  if ((_DWORD)v112 != 32)
  {
    if ((_DWORD)v112 == 16)
    {
      v114 = 0;
      v115 = 0;
      v116 = 4;
      goto LABEL_101;
    }
    if ((_DWORD)v112 == 8)
    {
      v114 = 0;
      v115 = 0;
      v116 = 3;
      goto LABEL_101;
    }
    goto LABEL_115;
  }
  v114 = 0;
  v115 = 0;
  v116 = 5;
LABEL_101:
  v117 = v116 | v114;
  v118 = v175;
  v119 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v161 + 432), v151);
  *(_QWORD *)&v166 = (unint64_t)v119 | 4;
  *((_QWORD *)&v166 + 1) = v91;
  v168 = 0;
  if (v119)
    v121 = *((_DWORD *)v119 + 3);
  else
    v121 = 0;
  v167 = v121;
  v171 = 0u;
  v170 = 0u;
  v122 = sub_1C636B4C8(v3, 1, (uint64_t)&v178, v118, 0, (uint64_t)v155, v149, v120, (uint64_t)v81, v74, &v166, v117, v115, 0, 0, 0, (uint64_t)&v170);
  v124 = v123;
  sub_1C4824250(*(uint64_t **)(v113 + 96), v91, (uint64_t)v165);
  v125 = *(_QWORD *)(v113 + 96);
  v126 = *(unsigned __int8 *)(v125 + 34);
  v127 = *(_WORD *)(v125 + 32);
  v170 = *(_OWORD *)(v125 + 40);
  v171 = *(_OWORD *)(v125 + 56);
  v128 = sub_1C636B9CC(v3, (uint64_t)v122, 1, (uint64_t)&v178, (uint64_t)v122, v124, (uint64_t)v7, v8, (uint64_t)v165, v117, v115, v126, SHIDWORD(v126), v127, (uint64_t)&v170);
  v130 = v129;
  v131 = DWORD2(v182);
  if (DWORD2(v182) >= HIDWORD(v182))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v183, DWORD2(v182) + 1, 16);
    v131 = DWORD2(v182);
  }
  v132 = (_QWORD *)(v182 + 16 * v131);
  *v132 = v128;
  v132[1] = v130;
  v133 = ++DWORD2(v182);
  v134 = *(_QWORD *)(v3 + 832);
  if (v134)
    v135 = *(unsigned __int16 *)(v134 + 8);
  else
    v135 = 0;
  v52 = sub_1C636D0C8(v3, (const char *)2, (const llvm::APInt *)&v178, (llvm *)1, 0, (uint64_t *)v182, v133, v135);
  if ((_OWORD *)v182 != v183)
    free((void *)v182);
LABEL_48:
  if (v178)
    llvm::MetadataTracking::untrack((uint64_t)&v178, v178);
  return v52;
}

uint64_t *sub_1C5D9FE70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, llvm *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::LLVMContext *v15;
  unint64_t EVT;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v23[0] = a5;
  v23[1] = a6;
  v15 = *(llvm::LLVMContext **)(a2 + 56);
  if ((_BYTE)a5)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)v23);
    v17 = 0;
    v18 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a6 + 24), 0, a3);
    v18 = v19;
    v17 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v20 = sub_1C4816F98(v15, v17 | EVT, v18, 1u, 0);
  return sub_1C5D9FF38(v20, a2, a3, a4, a5, a6, v20, v21, a7, a8);
}

uint64_t *sub_1C5D9FF38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, llvm *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t EVT;
  uint64_t v20;
  unint64_t v21;
  uint64_t ExtendedSizeInBits;
  unint64_t v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  llvm *v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  uint64_t v66;
  unsigned int v67;
  const char *v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v87;
  unsigned int v88;
  llvm *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  _QWORD v101[2];
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  llvm *v110;
  uint64_t v111;
  llvm *v112;
  uint64_t v113;

  v106 = a5;
  v107 = a6;
  v104 = a7;
  v105 = a8;
  v13 = *(unsigned __int8 **)(a9 + 64);
  v102 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v102, v13, 2);
  v103 = *(_DWORD *)(a9 + 60);
  v14 = (uint64_t *)(*(_QWORD *)(a3 + 40) + 16 * a4);
  v16 = sub_1C6366544(a2, a9, a10, (uint64_t)&v102, *v14, v14[1]);
  v18 = v17;
  if ((_BYTE)v106)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v106);
    v21 = 0;
    v20 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v107 + 24), 0, v15);
    v21 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v101[0] = v21 | EVT;
  v101[1] = v20;
  v96 = a4;
  if ((_BYTE)EVT)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v101);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v101);
  v97 = ExtendedSizeInBits;
  v98 = a10 & 0xFFFFFFFF00000000;
  v23 = v18 | a10 & 0xFFFFFFFF00000000;
  v24 = v106;
  v25 = v107;
  v26 = sub_1C52B71D4((unsigned __int8 *)&v104);
  v112 = v24;
  v113 = v25;
  v27 = sub_1C52B71D4((unsigned __int8 *)&v112);
  v28 = v27;
  v29 = *(_QWORD *)(v16 + 40) + 16 * v18;
  v31 = *(_QWORD *)(v29 + 8);
  v110 = *(llvm **)v29;
  v30 = v110;
  v111 = v31;
  if ((_BYTE)v112)
  {
    if (v112 - 120 >= 0x33)
    {
LABEL_23:
      if (v27 && (v27 & (v27 - 1)) == 0 && (_DWORD)v26 == 1)
      {
        if ((_BYTE)v110)
          v45 = sub_1C47A8C74((unsigned __int8 *)&v110);
        else
          v45 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v110);
        v87 = v45;
        v36 = v96;
        v37 = a3;
        if ((_DWORD)v46 == 1)
        v88 = __clz(v28) ^ 0x1F;
        v109 = v87;
        if (v87 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v108, 0, 0);
        else
          v108 = 0;
        sub_1C4912E54(&v108, 0, v88);
        v89 = v110;
        v90 = v111;
        v91 = sub_1C63666FC(a2, (llvm::LLVMContext *)&v108, (const llvm::APInt *)&v102, (uint64_t)v110, v111, 0, 0);
        v94 = *(_QWORD *)(a2 + 832);
        if (v94)
          LOWORD(v94) = *(_WORD *)(v94 + 8);
        v16 = (uint64_t)sub_1C5D56C70(a2, 171, (const llvm::APInt *)&v102, v89, v90, v16, v23, v93, v91, v92, v94);
        LODWORD(v23) = v95;
        if (v109 >= 0x41 && v108)
          MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
      }
      else
      {
        if (v27 >= v26)
          v38 = v27 - v26;
        else
          v38 = 0;
        v39 = sub_1C6366AB4(a2, v38, (const llvm::APInt *)&v102, v110, v31, 0, 0);
        v42 = *(_QWORD *)(a2 + 832);
        if (v42)
          LOWORD(v42) = *(_WORD *)(v42 + 8);
        v37 = a3;
        v16 = (uint64_t)sub_1C5D56C70(a2, 169, (const llvm::APInt *)&v102, v30, v31, v16, v23, v41, (uint64_t)v39, v40, v42);
        LODWORD(v23) = v43;
        v36 = v96;
      }
      goto LABEL_52;
    }
  }
  else if (*(_BYTE *)(v113 + 8) != 19)
  {
    goto LABEL_23;
  }
  if ((v26 & 0xFFFFFFFF00000000) == 0x100000000)
    goto LABEL_23;
  v32 = *(unsigned __int16 *)(v16 + 24);
  if (v32 != 35 && v32 != 11)
    goto LABEL_30;
  v34 = *(_QWORD *)(v16 + 80);
  v35 = (_QWORD *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u)
    v35 = (_QWORD *)*v35;
  if (*v35 + (unint64_t)(v26 - 1) < v27)
  {
    v36 = v96;
    v37 = a3;
  }
  else
  {
LABEL_30:
    if ((_BYTE)v110)
      v44 = sub_1C47A8C74((unsigned __int8 *)&v110);
    else
      v44 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v110);
    v109 = v44;
    if (v44 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v108, v28, 0);
    }
    else
    {
      v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      if (!v44)
        LODWORD(v47) = 0;
      v108 = v47 & v28;
    }
    v48 = sub_1C5C9E150(a2, (const llvm::APInt *)&v102, (uint64_t)v30, v31, (llvm::APInt *)&v108);
    v50 = v49;
    if (v109 >= 0x41 && v108)
      MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
    if (v26 <= v28)
      v51 = 57;
    else
      v51 = 85;
    v53 = v110;
    v52 = v111;
    v54 = sub_1C6366AB4(a2, v26, (const llvm::APInt *)&v102, v110, v111, 0, 0);
    v57 = *(_QWORD *)(a2 + 832);
    if (v57)
      LOWORD(v57) = *(_WORD *)(v57 + 8);
    v37 = a3;
    v58 = sub_1C5D56C70(a2, v51, (const llvm::APInt *)&v102, v53, v52, v48, v50, v56, (uint64_t)v54, v55, v57);
    v61 = *(_QWORD *)(a2 + 832);
    if (v61)
      LOWORD(v61) = *(_WORD *)(v61 + 8);
    v36 = v96;
    v16 = (uint64_t)sub_1C5D56C70(a2, 169, (const llvm::APInt *)&v102, v110, v111, v16, v23, v60, (uint64_t)v58, v59, v61);
    LODWORD(v23) = v62;
  }
LABEL_52:
  v63 = v23;
  v64 = *(_QWORD *)(v16 + 40) + 16 * v23;
  v65 = *(llvm **)v64;
  v66 = *(_QWORD *)(v64 + 8);
  v112 = *(llvm **)v64;
  v113 = v66;
  if ((_BYTE)v104)
  {
    if (v104 - 120 >= 0x33)
      goto LABEL_71;
  }
  else if (*(_BYTE *)(v105 + 8) != 19)
  {
    goto LABEL_71;
  }
  if ((_BYTE)v65)
    v67 = sub_1C47A8C74((unsigned __int8 *)&v112);
  else
    v67 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v112);
  v69 = v67;
  if ((_DWORD)v68 == 1)
  v100 = v69;
  if (v69 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v99, 1, 0);
  }
  else
  {
    v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v69;
    if (!v69)
      LOBYTE(v70) = 0;
    v99 = v70 & 1;
  }
  v71 = sub_1C5C9E150(a2, (const llvm::APInt *)&v102, (uint64_t)v65, v66, (llvm::APInt *)&v99);
  v74 = *(_QWORD *)(a2 + 832);
  if (v74)
    LOWORD(v74) = *(_WORD *)(v74 + 8);
  v16 = (uint64_t)sub_1C5D56C70(a2, 58, (const llvm::APInt *)&v102, v65, v66, v16, v63 | v98, v73, v71, v72, v74);
  v76 = v75;
  if (v100 >= 0x41 && v99)
    MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
  v65 = v112;
  v66 = v113;
  v63 = v76;
LABEL_71:
  v77 = sub_1C6366AB4(a2, (v97 >> 3), (const llvm::APInt *)&v102, v65, v66, 0, 0);
  v80 = *(_QWORD *)(a2 + 832);
  if (v80)
    LOWORD(v80) = *(_WORD *)(v80 + 8);
  v81 = sub_1C5D56C70(a2, 58, (const llvm::APInt *)&v102, v65, v66, v16, v63 | v98, v79, (uint64_t)v77, v78, v80);
  v83 = *(_QWORD *)(v37 + 40) + 16 * v36;
  v85 = sub_1C5D56C70(a2, 56, (const llvm::APInt *)&v102, *(llvm **)v83, *(_QWORD *)(v83 + 8), v37, v36, v84, (uint64_t)v81, v82 | v98, 0);
  if (v102)
    llvm::MetadataTracking::untrack((uint64_t)&v102, v102);
  return v85;
}

uint64_t sub_1C5DA05AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t ***v18;
  char *v19;
  uint64_t **v20;
  uint64_t **v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  int v28;
  _QWORD *v29;
  size_t v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  void *__p[2];
  char v38;
  unsigned __int8 *v39;
  int v40;
  const char *v41;
  int v42;
  uint64_t v43;
  _BYTE v44[12];
  size_t v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[194];
  _QWORD v57[66];
  _QWORD v58[194];
  _BYTE v59[96];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, 0);
  v7 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a3 + 56) + 1912), 0);
  v8 = *(unsigned __int8 **)(a2 + 64);
  v39 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v39, v8, 2);
  v40 = *(_DWORD *)(a2 + 60);
  v9 = *(uint64_t ****)(a2 + 80);
  if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
  {
    v10 = ***v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_11:
        v18 = v14[1];
        v21 = *v18;
        v19 = (char *)(v18 + 2);
        v20 = v21;
        goto LABEL_12;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_11;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_11;
  }
  v20 = 0;
  v19 = &byte_1C871356D;
LABEL_12:
  *(_WORD *)&v44[8] = 1283;
  v41 = "__emutls_v.";
  v43 = (uint64_t)v19;
  *(_QWORD *)v44 = v20;
  llvm::Twine::str((llvm::Twine *)&v41, __p);
  if (v38 >= 0)
    v22 = (unsigned __int8 *)__p;
  else
    v22 = (unsigned __int8 *)__p[0];
  if (v38 >= 0)
    v23 = v38 & 0x7F;
  else
    v23 = (unint64_t)__p[1];
  v24 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) + 112), v22, v23);
  if (!v24 || (v25 = v24, *(_BYTE *)(v24 + 16) != 3))
    v25 = 0;
  v26 = sub_1C6366FFC(a3, v25, (uint64_t)&v39, (llvm *)v6, 0, 0, 0, 0);
  v28 = v27;
  v29 = operator new(0x30uLL);
  *v29 = 0;
  v29[1] = v26;
  *((_DWORD *)v29 + 4) = v28;
  *((_DWORD *)v29 + 5) = 0;
  v29[3] = v7;
  *((_DWORD *)v29 + 8) = 0;
  v29[5] = 0;
  v30 = sub_1C63675D8(a3, "__emutls_get_address", v6, 0);
  v32 = v31;
  v33 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  *(_DWORD *)v44 = 32;
  *(_QWORD *)&v44[4] = 0xFFFFFFFFLL;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = a3;
  v52 = 0;
  v53 = 0;
  v54 = v56;
  v55 = 0x2000000000;
  v56[192] = v57;
  v56[193] = 0x2000000000;
  v57[64] = v58;
  v57[65] = 0x2000000000;
  v58[192] = v59;
  v58[193] = 0x400000000;
  v59[64] = 0;
  v59[88] = 0;
  v51 = v39;
  if (v39)
  {
    llvm::MetadataTracking::track((uint64_t)&v51, v39, 2);
    v33 = v47;
  }
  v41 = (const char *)(a3 + 112);
  v42 = 0;
  v43 = v7;
  v45 = v30;
  v52 = v40;
  v46 = v32;
  *(_QWORD *)&v44[4] = 1;
  if (v33)
  {
    v48 = v33;
    operator delete(v33);
  }
  v47 = (char *)v29;
  v48 = (char *)(v29 + 6);
  v49 = (char *)(v29 + 6);
  (***(void (****)(_QWORD, _QWORD, _QWORD, void **))(v50 + 24))(*(_QWORD *)(v50 + 24), *(_QWORD *)(v50 + 40), 0, (void **)&v47);
  sub_1C5D1FE10(a1, (uint64_t)&v41, (uint64_t)&v36);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 61) = 257;
  v34 = v36;
  sub_1C632CB64(&v41);
  if (v38 < 0)
    operator delete(__p[0]);
  if (v39)
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  return v34;
}

void sub_1C5DA0948(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;

  v3 = *(unsigned __int16 *)(a2 + 24);
  v4 = *(unsigned __int8 **)(a2 + 64);
  v5 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v5, v4, 2);
  v6 = *(_DWORD *)(a2 + 60);
  __asm { BR              X10 }
}

uint64_t *sub_1C5DA09D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23[14];

  if (v5)
  {
    if ((v5 - 15) >= 0x9C)
      goto LABEL_14;
    v8 = !(_BYTE)v4 || *(_QWORD *)(v6 + 8 * v4 + 96) == 0;
    if (!v8 && (*(unsigned __int8 *)(v6 + 390 * v4 + 4053) | 4) == 4)
      goto LABEL_14;
LABEL_10:
    v9 = sub_1C5D625F4(v2, v7, 0);
    goto LABEL_11;
  }
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    goto LABEL_10;
LABEL_14:
  v12 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, llvm *, uint64_t))(*(_QWORD *)v6 + 400))(v6, *(_QWORD *)(**(_QWORD **)(v2 + 40) + 40) + 272, *(_QWORD *)(v2 + 56), v4, v3);
  v14 = v13;
  v15 = sub_1C6367818((_QWORD *)v2, 0x14u);
  v18 = *(_QWORD *)(v2 + 832);
  if (v18)
    LOWORD(v18) = *(_WORD *)(v18 + 8);
  v19 = sub_1C5D58E08(v2, (const char *)0xC1, (const llvm::APInt *)v23, v12, v14, v1, v0, v17, v21, v22, v15, v16, SHIDWORD(v16), v18);
  v9 = sub_1C4815A8C(v2, (const llvm::APInt *)v23, v4, v3, (uint64_t)v19, v20, v1, v0, v21, v22, SHIDWORD(v22));
LABEL_11:
  v10 = v9;
  if (v23[0])
    llvm::MetadataTracking::untrack((uint64_t)v23, v23[0]);
  return v10;
}

uint64_t *sub_1C5DA0CBC(unsigned int *a1, uint64_t a2, _BOOL8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  BOOL v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int16 v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned __int8 *v99;
  int v100;
  __int128 v101;

  v8 = a3;
  v11 = *(unsigned __int16 *)(a2 + 24);
  v12 = *(__int128 **)(a2 + 32);
  v101 = *v12;
  v13 = *((_QWORD *)v12 + 5);
  v14 = *((_QWORD *)v12 + 6);
  v15 = v101;
  v16 = *(_QWORD *)(v101 + 40) + 16 * DWORD2(v101);
  v17 = *(llvm **)v16;
  v18 = *(_QWORD *)(v16 + 8);
  v19 = *(unsigned __int8 **)(a2 + 64);
  v99 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v99, v19, 2);
    v8 = a3;
  }
  v100 = *(_DWORD *)(a2 + 60);
  if (v11 != 85)
  {
    if (v11 == 82)
    {
      v23 = 76;
    }
    else
    {
      if (v11 != 84)
      {
        if ((_BYTE)v17)
        {
          if (v17 != 1 && (v24 = *(_QWORD *)&a1[2 * v17 + 24] == 0)
            || *((_BYTE *)a1 + 390 * v17 + 4031))
          {
            v22 = 1;
            v23 = 77;
            goto LABEL_27;
          }
          v76 = v8;
          v77 = sub_1C6366760(v8, (const llvm::APInt *)&v99, v13, v14, v17, v18);
          v80 = *(_QWORD *)(v76 + 832);
          if (v80)
            LOWORD(v80) = *(_WORD *)(v80 + 8);
          v45 = sub_1C5D56C70(v76, 169, (const llvm::APInt *)&v99, v17, v18, v15, *((unint64_t *)&v101 + 1), v79, (uint64_t)v77, v78, v80);
          v48 = v81;
          v82 = *(_QWORD *)(v76 + 832);
          if (v82)
            LOWORD(v82) = *(_WORD *)(v82 + 8);
          v92 = v14;
          v93 = v82;
          v91 = v13;
          v50 = v76;
          v51 = 56;
LABEL_41:
          v52 = v17;
          v53 = v18;
LABEL_42:
          v42 = sub_1C5D56C70(v50, v51, (const llvm::APInt *)&v99, v52, v53, (uint64_t)v45, v48, v46, v91, v92, v93);
          goto LABEL_46;
        }
        v22 = 1;
        v23 = 77;
LABEL_44:
        if ((*(_DWORD *)(v18 + 8) & 0xFE) != 0x12)
          goto LABEL_33;
LABEL_45:
        v42 = sub_1C5D625F4(v8, a2, 0);
        goto LABEL_46;
      }
      v23 = 78;
    }
    v22 = 0;
    if ((_BYTE)v17)
      goto LABEL_27;
    goto LABEL_44;
  }
  if (!(_BYTE)v17)
  {
    v22 = 0;
    v23 = 79;
    goto LABEL_44;
  }
  if ((v17 == 1 || !(v21 = *(_QWORD *)&a1[2 * v17 + 24] == 0))
    && !*((_BYTE *)a1 + 390 * v17 + 4032))
  {
    v43 = *(_QWORD *)(v8 + 832);
    if (v43)
      LOWORD(v43) = *(_WORD *)(v43 + 8);
    v44 = v8;
    v45 = sub_1C5D56C70(v8, 170, (const llvm::APInt *)&v99, v17, v18, v15, *((unint64_t *)&v101 + 1), a8, v13, v14, v43);
    v48 = v47;
    v49 = *(_QWORD *)(v44 + 832);
    if (v49)
      LOWORD(v49) = *(_WORD *)(v49 + 8);
    v92 = v14;
    v93 = v49;
    v91 = v13;
    v50 = v44;
    v51 = 57;
    goto LABEL_41;
  }
  v22 = 0;
  v23 = 79;
LABEL_27:
  if (v17 - 15 < 0x9C)
  {
    v25 = !(_BYTE)v17 || *(_QWORD *)&a1[2 * v17 + 24] == 0;
    if (v25 || (*((unsigned __int8 *)a1 + 390 * v17 + 4053) | 4) != 4)
      goto LABEL_45;
  }
LABEL_33:
  v26 = v8;
  v95 = sub_1C6329368((unsigned int *)&v101, (uint64_t)v19, a3);
  v27 = v18;
  v28 = (*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, llvm *, uint64_t))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(v26 + 40) + 40) + 272, *(_QWORD *)(v26 + 56), v17, v18);
  v30 = sub_1C636A8B4(v26, (uint64_t)v17, v18, v28, v29);
  v33 = sub_1C636D6B4(v26, (const char *)v23, (const llvm::APInt *)&v99, v30, v31, v101, SDWORD2(v101), v32, v13, v14);
  v94 = v34;
  v35 = sub_1C6366AB4(v26, 0, (const llvm::APInt *)&v99, v17, v18, 0, 0);
  v37 = v36;
  v96 = v26;
  v38 = sub_1C63293BC(v26, (const llvm::APInt *)&v99, (_BOOL8)v17, v27, 0, 0);
  if (v22)
  {
    v40 = v38;
    v41 = v39;
    if (sub_1C6329468(a1, (char)v17, v27) != 2)
    {
      v42 = sub_1C4815A8C(v96, (const llvm::APInt *)&v99, v17, v27, (uint64_t)v33, 1, v40, v41, (uint64_t)v33, 0, 0);
LABEL_46:
      v54 = v42;
      goto LABEL_47;
    }
    v83 = sub_1C6366480(v96, (uint64_t)v33, 1, (uint64_t)&v99, (uint64_t)v17, v27);
    v85 = *(_QWORD *)(v96 + 832);
    if (v85)
      LOWORD(v85) = *(_WORD *)(v85 + 8);
    v92 = v84;
    v93 = v85;
    v91 = v83;
    v50 = v96;
    v51 = 172;
    v52 = v17;
    v53 = v27;
    v45 = v33;
    goto LABEL_73;
  }
  v56 = (uint64_t)v33;
  v57 = v27;
  if (v11 == 85)
  {
    if (sub_1C6329468(a1, (char)v17, v27) != 2)
    {
      v42 = sub_1C4815A8C(v96, (const llvm::APInt *)&v99, v17, v27, v56, 1, (uint64_t)v35, v37, v56, 0, 0);
      goto LABEL_46;
    }
    v86 = sub_1C6366480(v96, v56, 1, (uint64_t)&v99, (uint64_t)v17, v27);
    v88 = sub_1C6366760(v96, (const llvm::APInt *)&v99, v86, v87, v17, v27);
    v90 = *(_QWORD *)(v96 + 832);
    if (v90)
      LOWORD(v90) = *(_WORD *)(v90 + 8);
    v92 = v89;
    v93 = v90;
    v91 = (uint64_t)v88;
    v50 = v96;
    v51 = 171;
    v52 = v17;
    v53 = v27;
    v45 = (uint64_t *)v56;
LABEL_73:
    v48 = 0;
    goto LABEL_42;
  }
  v58 = v95;
  v98 = v95;
  if (v95 > 0x40)
  {
    v61 = &v97;
    llvm::APInt::initSlowCase((llvm::APInt *)&v97, 0, 0);
    v60 = v95 - 1;
    if (v98 >= 0x41)
      v61 = (uint64_t *)(v97 + 8 * (v60 >> 6));
    v59 = v57;
    v58 = v95;
    v62 = v96;
  }
  else
  {
    v59 = v27;
    v97 = 0;
    LOBYTE(v60) = v95 - 1;
    v61 = &v97;
    v62 = v96;
  }
  *v61 |= 1 << v60;
  v63 = sub_1C63666FC(v62, (llvm::LLVMContext *)&v97, (const llvm::APInt *)&v99, (uint64_t)v17, v59, 0, 0);
  v65 = v64;
  v66 = sub_1C6366AB4(v96, v58 - 1, (const llvm::APInt *)&v99, v17, v59, 0, 0);
  v69 = *(_QWORD *)(v96 + 832);
  if (v69)
    LOWORD(v69) = *(_WORD *)(v69 + 8);
  v71 = sub_1C5D56C70(v96, 176, (const llvm::APInt *)&v99, v17, v59, v56, 0, v68, (uint64_t)v66, v67, v69);
  v73 = *(_QWORD *)(v96 + 832);
  if (v73)
    LOWORD(v73) = *(_WORD *)(v73 + 8);
  v74 = sub_1C5D56C70(v96, 173, (const llvm::APInt *)&v99, v17, v59, (uint64_t)v71, v70, v72, v63, v65, v73);
  v54 = sub_1C4815A8C(v96, (const llvm::APInt *)&v99, v17, v59, v56, 1, (uint64_t)v74, v94 & 0xFFFFFFFF00000000 | v75, v56, 0, 0);
  if (v98 >= 0x41 && v97)
    MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
LABEL_47:
  if (v99)
    llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
  return v54;
}

uint64_t *sub_1C5DA1354(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  llvm *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  llvm *ShiftAmountTy;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t *v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  int v105;
  int v106;
  llvm *v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  llvm *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  llvm *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  llvm *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  _QWORD *v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  llvm *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  char v176;
  uint64_t v177;
  unint64_t *v178;
  uint64_t v179;
  unsigned int v180;
  llvm *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  llvm *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t v201;
  unsigned int v202;
  llvm *v203;
  uint64_t v204;
  unsigned __int8 *v205;
  int v206;

  v6 = *(unsigned __int8 **)(a2 + 64);
  v205 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v205, v6, 2);
  v206 = *(_DWORD *)(a2 + 60);
  v7 = *(uint64_t **)(a2 + 32);
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[5];
  v11 = v7[6];
  v12 = *(_QWORD *)(*v7 + 40) + 16 * v8;
  v13 = *(_QWORD *)(v12 + 8);
  v203 = *(llvm **)v12;
  v204 = v13;
  v14 = *(_QWORD *)(v7[10] + 80);
  v15 = (_QWORD *)(v14 + 24);
  if (*(_DWORD *)(v14 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  v16 = (_QWORD *)*v15;
  v17 = *(unsigned __int16 *)(a2 + 24);
  v18 = v17 & 0xFFFFFFFD;
  v196 = (llvm *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a3 + 40) + 40) + 272, *(_QWORD *)(a3 + 56));
  v20 = v19;
  v22 = sub_1C6131328((unsigned __int8 *)&v203, v19, v21);
  if ((_DWORD)v16)
  {
    v24 = v203;
    v25 = v203;
    v26 = v203;
LABEL_7:
    v27 = v25;
    goto LABEL_8;
  }
  if ((v17 & 0xFFFE) != 0x5A)
  {
    v24 = v203;
    v25 = v203;
    if (!(_BYTE)v203)
      goto LABEL_35;
    v26 = v203;
    if ((v203 == 1 || a1[v203 + 12])
      && (*((unsigned __int8 *)a1 + 390 * v203 + 3920) | 4) == 4)
    {
      v35 = *(_QWORD *)(a3 + 832);
      if (v35)
        LOWORD(v35) = *(_WORD *)(v35 + 8);
      v36 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v205, v203, v204, v9, v8, v23, v10, v11, v35);
      goto LABEL_45;
    }
    goto LABEL_7;
  }
  if ((v17 | 2) != 0x5A)
  {
    v24 = v203;
    v27 = v203;
    v26 = v203;
LABEL_57:
    v25 = v24;
    if (!(_BYTE)v24)
      goto LABEL_21;
    if (v24 == 1)
    {
      if (!v26)
      {
        v192 = v20;
        v26 = 0;
        if (v18 == 88)
          v28 = 63;
        else
          v28 = 64;
        if (v18 == 88)
          v29 = 160;
        else
          v29 = 159;
        v25 = 1;
        v30 = v204;
        goto LABEL_17;
      }
    }
    else if (!v26 || !a1[v26 + 12])
    {
      goto LABEL_8;
    }
    if ((*((unsigned __int8 *)a1 + 390 * v26 + 3943) | 4) == 4)
    {
      v55 = v22;
      v56 = sub_1C636A8B4(a3, (uint64_t)v24, v204, (uint64_t)v196, v20);
      v59 = sub_1C636D6B4(a3, (const char *)0x51, (const llvm::APInt *)&v205, v56, v57, v9, v8, v58, v10, v11);
      v202 = v55;
      if (v55 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v201, -1, 1);
      }
      else
      {
        v60 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
        if (!v55)
          v60 = 0;
        v201 = v60;
      }
      v61 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v31 = sub_1C4815A8C(a3, (const llvm::APInt *)&v205, v203, v204, (uint64_t)v59, 1, v61, v62, (uint64_t)v59, 0, 0);
LABEL_87:
      if (v202 >= 0x41 && v201)
        MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  v24 = v203;
  v26 = v203;
  v27 = v203;
  if ((_BYTE)v203
    && (v203 == 1 || a1[v203 + 12])
    && (*((unsigned __int8 *)a1 + 390 * v203 + 3942) | 4) == 4)
  {
    v67 = v22;
    v68 = sub_1C636A8B4(a3, (uint64_t)v203, v204, (uint64_t)v196, v20);
    v188 = sub_1C636D6B4(a3, (const char *)0x50, (const llvm::APInt *)&v205, v68, v69, v9, v8, v70, v10, v11);
    v72 = v71;
    v73 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v205, v203, v204, 0, 0);
    v74 = v67;
    v202 = v67;
    v193 = v20;
    v182 = v75;
    v185 = (uint64_t)v73;
    if (v67 >= 0x41)
    {
      v191 = a3;
      v173 = v11;
      v174 = v10;
      v175 = v67;
      llvm::APInt::initSlowCase((llvm::APInt *)&v201, 0, 0);
      v176 = v67 - 1;
      v177 = (v67 - 1) >> 6;
      if (v202 >= 0x41)
        v178 = (unint64_t *)(v201 + 8 * v177);
      else
        v178 = &v201;
      v76 = 1 << v176;
      *v178 |= 1 << v176;
      v200 = v175;
      v78 = &v199;
      llvm::APInt::initSlowCase((llvm::APInt *)&v199, -1, 1);
      if (v200 >= 0x41)
        v78 = (unint64_t *)(v199 + 8 * v177);
      v10 = v174;
      v11 = v173;
      a3 = v191;
    }
    else
    {
      v76 = 1 << (v67 - 1);
      v201 = v76;
      v200 = v74;
      v77 = 0xFFFFFFFFFFFFFFFFLL >> ((v74 - 1) & 0x3F ^ 0x3F);
      if (!v74)
        v77 = 0;
      v199 = v77;
      v78 = &v199;
    }
    *v78 &= ~v76;
    v79 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
    v81 = v80;
    v83 = sub_1C63666FC(a3, (llvm::LLVMContext *)&v199, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
    v85 = v84;
    v86 = *(_QWORD *)(a3 + 832);
    if (v86)
      LOWORD(v86) = *(_WORD *)(v86 + 8);
    v87 = sub_1C5D56C70(a3, 173, (const llvm::APInt *)&v205, v203, v204, v9, v8, v82, v10, v11, v86);
    v89 = v88;
    v90 = sub_1C6367818((_QWORD *)a3, 0x14u);
    v93 = *(_QWORD *)(a3 + 832);
    if (v93)
      LOWORD(v93) = *(_WORD *)(v93 + 8);
    v94 = sub_1C5D58E08(a3, (const char *)0xC1, (const llvm::APInt *)&v205, v196, v193, (uint64_t)v87, v89, v92, v185, v182, v90, v91, SHIDWORD(v91), v93);
    v96 = sub_1C4815A8C(a3, (const llvm::APInt *)&v205, v203, v204, (uint64_t)v94, v95, v79, v81, v83, v85, SHIDWORD(v85));
    v31 = sub_1C4815A8C(a3, (const llvm::APInt *)&v205, v203, v204, (uint64_t)v188, 1, (uint64_t)v96, v72 & 0xFFFFFFFF00000000 | v97, (uint64_t)v188, 0, 0);
    if (v200 >= 0x41 && v199)
      MEMORY[0x1CAA32F9C](v199, 0x1000C8000313F17);
    goto LABEL_87;
  }
  v25 = v203;
  if ((v17 | 2) != 0x5A)
    goto LABEL_57;
LABEL_8:
  v192 = v20;
  if (v18 == 88)
    v28 = 63;
  else
    v28 = 64;
  if (v18 == 88)
    v29 = 160;
  else
    v29 = 159;
  if (!v25 || (v30 = v204, v25 != 1) && !a1[v26 + 12])
  {
LABEL_21:
    if (v27)
    {
      if ((v27 - 15) < 0x9C)
      {
LABEL_23:
        v31 = 0;
        goto LABEL_24;
      }
LABEL_36:
      llvm::report_fatal_error((llvm *)"Unable to expand fixed point multiplication.", (const char *)1);
    }
LABEL_35:
    if ((*(_DWORD *)(v204 + 8) & 0xFE) == 0x12)
      goto LABEL_23;
    goto LABEL_36;
  }
LABEL_17:
  if ((*((_BYTE *)a1 + 390 * v26 + v28 + 3862) & 0xFB) != 0)
  {
    if (v25 != 1 && !a1[v26 + 12] || (*((_BYTE *)a1 + 390 * v26 + v29 + 3862) & 0xFB) != 0)
      goto LABEL_21;
    v189 = a3;
    v33 = *(_QWORD *)(a3 + 832);
    v34 = v22;
    if (v33)
      LOWORD(v33) = *(_WORD *)(v33 + 8);
    v37 = sub_1C5D56C70(v189, 58, (const llvm::APInt *)&v205, v24, v30, v9, v8, v23, v10, v11, v33);
    v39 = *(_QWORD *)(v189 + 832);
    v184 = (uint64_t)v37;
    v187 = v40;
    if (v39)
      LOWORD(v39) = *(_WORD *)(v39 + 8);
    v31 = sub_1C5D56C70(v189, v29, (const llvm::APInt *)&v205, v203, v204, v9, v8, v38, v10, v11, v39);
    v42 = v41;
  }
  else
  {
    v63 = a3;
    v34 = v22;
    v64 = sub_1C636A8B4(v63, (uint64_t)v24, v30, (uint64_t)v24, v30);
    v189 = v63;
    v31 = sub_1C636D6B4(v63, (const char *)v28, (const llvm::APInt *)&v205, v64, v65, v9, v8, v66, v10, v11);
    v184 = (uint64_t)v31;
    v187 = 0;
    v42 = 1;
  }
  if ((_DWORD)v16 != v34)
  {
    v180 = v34;
    v43 = (_QWORD *)v189;
    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v203, v204, *(_QWORD *)(**(_QWORD **)(v189 + 40) + 40) + 272, 1);
    v46 = v45;
    v47 = v204;
    v181 = v203;
    v48 = sub_1C6366AB4(v189, v16, (const llvm::APInt *)&v205, ShiftAmountTy, v45, 0, 0);
    v51 = *(_QWORD *)(v189 + 832);
    if (v51)
      LOWORD(v51) = *(_WORD *)(v51 + 8);
    v52 = v184;
    v53 = sub_1C5D58E08(v189, (const char *)0xB5, (const llvm::APInt *)&v205, v181, v47, (uint64_t)v31, v42, v50, v184, v187, (uint64_t)v48, v49, SHIDWORD(v49), v51);
    if ((v17 & 0xFFFE) != 0x5A)
    {
      v31 = v53;
      goto LABEL_24;
    }
    v183 = v54;
    if ((v17 | 2) == 0x5A)
    {
      v202 = v180;
      v179 = (uint64_t)v53;
      if (v180 > 0x40)
      {
        v99 = &v201;
        llvm::APInt::initSlowCase((llvm::APInt *)&v201, 0, 0);
        v98 = v180 - 1;
        if (v202 >= 0x41)
          v99 = (unint64_t *)(v201 + 8 * (v98 >> 6));
        v52 = v184;
      }
      else
      {
        v201 = 0;
        LOBYTE(v98) = v180 - 1;
        v99 = &v201;
      }
      *v99 |= 1 << v98;
      v100 = sub_1C63666FC(v189, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v190 = v101;
      if (v202 >= 0x41 && v201)
        MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
      v202 = v180;
      if (v180 > 0x40)
      {
        v103 = &v201;
        llvm::APInt::initSlowCase((llvm::APInt *)&v201, -1, 1);
        LODWORD(v102) = v180 - 1;
        if (v202 >= 0x41)
          v103 = (unint64_t *)(v201 + 8 * (v102 >> 6));
        v52 = v184;
      }
      else
      {
        v102 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v180;
        if (!v180)
          v102 = 0;
        v201 = v102;
        LOBYTE(v102) = v180 - 1;
        v103 = &v201;
      }
      *v103 &= ~(1 << v102);
      v104 = sub_1C63666FC((uint64_t)v43, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v106 = v105;
      if (v202 >= 0x41 && v201)
        MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
      if (!(_DWORD)v16)
      {
        v186 = v104;
        v107 = v203;
        v108 = v204;
        v109 = sub_1C6366AB4((uint64_t)v43, v180 - 1, (const llvm::APInt *)&v205, ShiftAmountTy, v46, 0, 0);
        v112 = v43[104];
        if (v112)
          LOWORD(v112) = *(_WORD *)(v112 + 8);
        v113 = sub_1C5D56C70((uint64_t)v43, 176, (const llvm::APInt *)&v205, v107, v108, v52, v187, v111, (uint64_t)v109, v110, v112);
        v115 = v114;
        v116 = sub_1C6367818(v43, 0x16u);
        v119 = v43[104];
        v120 = v106;
        if (v119)
          LOWORD(v119) = *(_WORD *)(v119 + 8);
        v160 = sub_1C5D58E08((uint64_t)v43, (const char *)0xC1, (const llvm::APInt *)&v205, v196, v192, (uint64_t)v31, v42, v118, (uint64_t)v113, v115, v116, v117, SHIDWORD(v117), v119);
        v195 = v161;
        v198 = (uint64_t)v160;
        v162 = sub_1C6366AB4((uint64_t)v43, 0, (const llvm::APInt *)&v205, v203, v204, 0, 0);
        v164 = v163;
        v165 = *(_QWORD *)(v100 + 40) + 16 * v190;
        v167 = *(llvm **)v165;
        v166 = *(_QWORD *)(v165 + 8);
        v168 = sub_1C6367818(v43, 0x14u);
        v171 = sub_1C63698B8((uint64_t)v43, (const char *)0xC0, (const llvm::APInt *)&v205, v167, v166, (uint64_t)v31, v42, v170, (uint64_t)v162, v164, v100, v190, v186, v120, v168, v169);
        v36 = sub_1C4815A8C((uint64_t)v43, (const llvm::APInt *)&v205, v203, v204, v198, v195, (uint64_t)v171, v172, v179, v183, SHIDWORD(v183));
LABEL_45:
        v31 = v36;
        goto LABEL_24;
      }
      v202 = v180;
      v135 = v106;
      if (v180 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v201, 0, 0);
      else
        v201 = 0;
      v197 = v100;
      sub_1C4912E54(&v201, 0, (_DWORD)v16 - 1);
      v136 = sub_1C63666FC((uint64_t)v43, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v138 = v137;
      if (v202 >= 0x41 && v201)
        MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
      v139 = v135;
      v140 = *(_QWORD *)(v104 + 40) + 16 * v135;
      v141 = v104;
      v142 = *(llvm **)v140;
      v143 = *(_QWORD *)(v140 + 8);
      v144 = sub_1C6367818(v43, 0x12u);
      v194 = sub_1C63698B8((uint64_t)v43, (const char *)0xC0, (const llvm::APInt *)&v205, v142, v143, (uint64_t)v31, v42, v146, v136, v138, v141, v139, v179, v183, v144, v145);
      v148 = v147;
      v149 = v180;
      v202 = v180;
      if (v180 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v201, 0, 0);
        v149 = v202;
      }
      else
      {
        v201 = 0;
      }
      v150 = v148;
      sub_1C4912E54(&v201, ~v180 + (_DWORD)v16 + v149, v149);
      v151 = sub_1C63666FC((uint64_t)v43, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v153 = v152;
      if (v202 >= 0x41 && v201)
        MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
      v154 = *(_QWORD *)(v197 + 40) + 16 * v190;
      v155 = *(llvm **)v154;
      v156 = *(_QWORD *)(v154 + 8);
      v157 = sub_1C6367818(v43, 0x14u);
      v31 = sub_1C63698B8((uint64_t)v43, (const char *)0xC0, (const llvm::APInt *)&v205, v155, v156, (uint64_t)v31, v42, v159, v151, v153, v197, v190, (uint64_t)v194, v150, v157, v158);
    }
    else
    {
      v202 = v180;
      v121 = (uint64_t)v53;
      if (v180 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v201, -1, 1);
        v200 = v180;
        llvm::APInt::initSlowCase((llvm::APInt *)&v199, 0, 0);
      }
      else
      {
        v122 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v180;
        if (!v180)
          v122 = 0;
        v201 = v122;
        v200 = v180;
        v199 = 0;
      }
      sub_1C4912E54(&v199, 0, v16);
      v123 = sub_1C63666FC(v189, (llvm::LLVMContext *)&v199, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v125 = v124;
      if (v200 >= 0x41 && v199)
        MEMORY[0x1CAA32F9C](v199, 0x1000C8000313F17);
      v126 = sub_1C63666FC(v189, (llvm::LLVMContext *)&v201, (const llvm::APInt *)&v205, (uint64_t)v203, v204, 0, 0);
      v128 = v127;
      v129 = *(_QWORD *)(v126 + 40) + 16 * v127;
      v130 = *(llvm **)v129;
      v131 = *(_QWORD *)(v129 + 8);
      v132 = sub_1C6367818((_QWORD *)v189, 0xAu);
      v31 = sub_1C63698B8(v189, (const char *)0xC0, (const llvm::APInt *)&v205, v130, v131, (uint64_t)v31, v42, v134, v123, v125, v126, v128, v121, v183, v132, v133);
      if (v202 >= 0x41 && v201)
        MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
    }
  }
LABEL_24:
  if (v205)
    llvm::MetadataTracking::untrack((uint64_t)&v205, v205);
  return v31;
}

uint64_t *sub_1C5DA21E8(uint64_t *a1, int a2, const llvm::APInt *a3, uint64_t a4, _BOOL8 a5, uint64_t a6, _BOOL8 a7, unsigned int a8, uint64_t a9)
{
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL8 v24;
  unsigned int v25;
  uint64_t *v26;
  _BOOL8 v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm *ShiftAmountTy;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  llvm *v116;
  uint64_t v117;
  uint64_t v118;
  llvm *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v124;
  llvm *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;

  v15 = a1;
  v16 = *(_QWORD *)(a4 + 40) + 16 * a5;
  v17 = a2 & 0xFFFFFFFD;
  v124 = *(_QWORD *)(v16 + 8);
  v125 = *(llvm **)v16;
  v18 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a9 + 40) + 40) + 272, *(_QWORD *)(a9 + 56));
  v118 = v19;
  v119 = (llvm *)v18;
  v120 = a5;
  v122 = (uint64_t *)a4;
  if (v17 == 92)
  {
    v20 = sub_1C6368B30(a9, a4, a5, 0) - 1;
  }
  else
  {
    v21 = v15;
    v22 = a8;
    v23 = v17;
    v24 = a7;
    sub_1C6368768(a9, a4, a5, 0, (uint64_t)&v126);
    v25 = v127;
    if (v127 > 0x40)
    {
      v20 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v126);
    }
    else if (v127)
    {
      v20 = __clz(~(v126 << -(char)v127));
    }
    else
    {
      v20 = 0;
    }
    if (v129 >= 0x41 && v128)
    {
      MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
      v25 = v127;
    }
    if (v25 >= 0x41 && v126)
      MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
    a7 = v24;
    v17 = v23;
    a8 = v22;
    v15 = v21;
  }
  v26 = (uint64_t *)a6;
  v27 = a7;
  sub_1C6368768(a9, a6, a7, 0, (uint64_t)&v126);
  v28 = v127;
  if (v127 > 0x40)
    v29 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v126);
  else
    v29 = __clz(__rbit64(~v126));
  if (v129 >= 0x41 && v128)
  {
    MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
    v28 = v127;
  }
  if (v28 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  if (a2 == 94)
    v30 = a8 + 1;
  else
    v30 = a8;
  if (v29 + v20 < v30)
    return 0;
  v32 = v26;
  if (v20 >= a8)
    v33 = a8;
  else
    v33 = v20;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v15, (uint64_t)v125, v124, *(_QWORD *)(**(_QWORD **)(a9 + 40) + 40) + 272, 1);
  v37 = v34;
  if ((_DWORD)v33)
  {
    v114 = v34;
    v116 = ShiftAmountTy;
    v46 = sub_1C6366AB4(a9, v33, a3, ShiftAmountTy, v34, 0, 0);
    v49 = *(_QWORD *)(a9 + 832);
    v38 = v120;
    v40 = v27;
    if (v49)
      LOWORD(v49) = *(_WORD *)(v49 + 8);
    v122 = sub_1C5D56C70(a9, 175, a3, v125, v124, (uint64_t)v122, v120, v48, (uint64_t)v46, v47, v49);
    v37 = v114;
    ShiftAmountTy = v116;
  }
  else
  {
    v38 = v120;
    v39 = v120;
    v40 = v27;
  }
  if (v20 < a8)
  {
    v50 = v39;
    v51 = a8 - v33;
    if (v17 == 92)
      v52 = 176;
    else
      v52 = 177;
    v53 = sub_1C6366AB4(a9, v51, a3, ShiftAmountTy, v37, 0, 0);
    v56 = *(_QWORD *)(a9 + 832);
    v42 = (uint64_t)v122;
    if (v56)
      LOWORD(v56) = *(_WORD *)(v56 + 8);
    v32 = sub_1C5D56C70(a9, v52, a3, v125, v124, (uint64_t)v32, v40, v55, (uint64_t)v53, v54, v56);
    v41 = v57;
    v39 = v50;
  }
  else
  {
    v41 = v40;
    v42 = (uint64_t)v122;
  }
  v43 = v40 & 0xFFFFFFFF00000000;
  if (v17 == 92)
  {
    v117 = (uint64_t)v32;
    if ((_BYTE)v125
      && v15[v125 + 12]
      && (*((unsigned __int8 *)v15 + 390 * v125 + 3927) | 4) == 4)
    {
      v58 = v42;
      v59 = (uint64_t)v32;
      v60 = v125;
      v61 = v39;
      v62 = sub_1C636A8B4(a9, (uint64_t)v125, v124, (uint64_t)v125, v124);
      v63 = v38 & 0xFFFFFFFF00000000 | v61;
      v64 = v41 | v43;
      v67 = sub_1C636D6B4(a9, (const char *)0x41, a3, v62, v65, v58, v63, v66, v59, v41);
      v115 = 0;
      v68 = 1;
      v121 = v67;
    }
    else
    {
      v63 = v38 & 0xFFFFFFFF00000000 | v39;
      v64 = v41 | v43;
      v69 = *(_QWORD *)(a9 + 832);
      if (v69)
        LOWORD(v69) = *(_WORD *)(v69 + 8);
      v60 = v125;
      v121 = sub_1C5D56C70(a9, 59, a3, v125, v124, v42, v63, v36, v117, v41 | v43, v69);
      v115 = v71;
      v72 = *(_QWORD *)(a9 + 832);
      if (v72)
        LOWORD(v72) = *(_WORD *)(v72 + 8);
      v67 = sub_1C5D56C70(a9, 61, a3, v125, v124, v42, v63, v70, v117, v41 | v43, v72);
      v68 = v73;
    }
    v74 = sub_1C6366AB4(a9, 0, a3, v60, v124, 0, 0);
    v76 = v75;
    v77 = sub_1C6367818((_QWORD *)a9, 0x16u);
    v80 = 0;
    v81 = *(_QWORD *)(a9 + 832);
    if (v81)
      v80 = *(_WORD *)(v81 + 8);
    v82 = sub_1C5D58E08(a9, (const char *)0xC1, a3, v119, v118, (uint64_t)v67, v68, v79, (uint64_t)v74, v76, v77, v78, SHIDWORD(v78), v80);
    v84 = v83;
    v85 = sub_1C6367818((_QWORD *)a9, 0x14u);
    v88 = *(_QWORD *)(a9 + 832);
    if (v88)
      LOWORD(v88) = *(_WORD *)(v88 + 8);
    v89 = sub_1C5D58E08(a9, (const char *)0xC1, a3, v119, v118, (uint64_t)v122, v63, v87, (uint64_t)v74, v76, v85, v86, SHIDWORD(v86), v88);
    v91 = v90;
    v92 = sub_1C6367818((_QWORD *)a9, 0x14u);
    v95 = *(_QWORD *)(a9 + 832);
    if (v95)
      LOWORD(v95) = *(_WORD *)(v95 + 8);
    v96 = sub_1C5D58E08(a9, (const char *)0xC1, a3, v119, v118, v117, v64, v94, (uint64_t)v74, v76, v92, v93, SHIDWORD(v93), v95);
    v99 = *(_QWORD *)(a9 + 832);
    if (v99)
      LOWORD(v99) = *(_WORD *)(v99 + 8);
    v100 = sub_1C5D56C70(a9, 173, a3, v119, v118, (uint64_t)v89, v91, v98, (uint64_t)v96, v97, v99);
    v102 = v101;
    v103 = sub_1C6366AB4(a9, 1, a3, v125, v124, 0, 0);
    v106 = *(_QWORD *)(a9 + 832);
    if (v106)
      LOWORD(v106) = *(_WORD *)(v106 + 8);
    v108 = sub_1C5D56C70(a9, 57, a3, v125, v124, (uint64_t)v121, v115, v105, (uint64_t)v103, v104, v106);
    v110 = v109;
    v111 = *(_QWORD *)(a9 + 832);
    if (v111)
      LOWORD(v111) = *(_WORD *)(v111 + 8);
    v112 = sub_1C5D56C70(a9, 171, a3, v119, v118, (uint64_t)v82, v84, v107, (uint64_t)v100, v102, v111);
    return sub_1C4815A8C(a9, a3, v125, v124, (uint64_t)v112, v113, (uint64_t)v108, v110, (uint64_t)v121, v115, SHIDWORD(v115));
  }
  else
  {
    v44 = v38 & 0xFFFFFFFF00000000 | v39;
    v45 = *(_QWORD *)(a9 + 832);
    if (v45)
      LOWORD(v45) = *(_WORD *)(v45 + 8);
    return sub_1C5D56C70(a9, 60, a3, v125, v124, v42, v44, v36, (uint64_t)v32, v41 | v43, v45);
  }
}

uint64_t *sub_1C5DA28DC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *result;
  uint64_t v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  llvm *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  llvm *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  int v53;
  llvm *v54;
  uint64_t v55;
  unsigned __int8 *v57;
  int v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int8 **)(a2 + 64);
  v57 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v57, v12, 2);
  v58 = *(_DWORD *)(a2 + 60);
  v14 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_QWORD *)(v14 + 40);
  v18 = *(_QWORD *)(v14 + 48);
  v19 = *(unsigned __int16 *)(a2 + 24);
  if (v19 == 77)
    v20 = 72;
  else
    v20 = 73;
  if (*(_QWORD *)v13)
  {
    v21 = *(_QWORD *)v13;
    if (((_DWORD)v21 == 1 || *(_QWORD *)(a1 + 8 * v21 + 96))
      && (*(_BYTE *)(a1 + 390 * *(_QWORD *)v13 + v20 + 3862) & 0xFB) == 0)
    {
      v22 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v57, *(llvm **)(v13 + 16), *(_QWORD *)(v13 + 24), 0, 0);
      v23 = 0;
      v24 = *(_QWORD *)(a2 + 40);
      v25 = *(unsigned __int16 *)(a2 + 58);
      v59 = v15;
      v60 = v16;
      v61 = v17;
      v62 = v18;
      v63 = v22;
      v64 = v26;
      v27 = *(_QWORD *)(a5 + 832);
      if (v27)
        v23 = *(_WORD *)(v27 + 8);
      result = sub_1C636D410(a5, (const char *)v20, (const llvm::APInt *)&v57, v24, v25, (uint64_t *)&v59, 3, v23);
      *a3 = (uint64_t)result;
      *((_DWORD *)a3 + 2) = 0;
      *(_QWORD *)a4 = result;
      *(_DWORD *)(a4 + 8) = 1;
      goto LABEL_27;
    }
  }
  if (v19 == 77)
    v29 = 56;
  else
    v29 = 57;
  v30 = v15[5] + 16 * v16;
  v31 = *(llvm **)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_QWORD *)(a5 + 832);
  if (v33)
    LOWORD(v33) = *(_WORD *)(v33 + 8);
  v55 = v16;
  *a3 = (uint64_t)sub_1C5D56C70(a5, v29, (const llvm::APInt *)&v57, v31, v32, (uint64_t)v15, v16, a8, v17, v18, v33);
  *((_DWORD *)a3 + 2) = v34;
  v35 = *(_QWORD **)(a2 + 40);
  v36 = v35[3];
  v54 = (llvm *)v35[2];
  v37 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, *(_QWORD *)(a5 + 56), *v35, v35[1]);
  v39 = v38;
  if (v19 != 77)
  {
    v43 = 10;
LABEL_23:
    v44 = a4;
    v45 = v36;
    v46 = v54;
    v41 = *a3;
    v40 = a3[1];
    goto LABEL_24;
  }
  if (!sub_1C636F474(v17))
  {
    v43 = 12;
    goto LABEL_23;
  }
  v41 = *a3;
  v40 = a3[1];
  v15 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v57, **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), 0, 0);
  v55 = v42;
  v43 = 17;
  v44 = a4;
  v45 = v36;
  v46 = v54;
LABEL_24:
  v47 = sub_1C6367818((_QWORD *)a5, v43);
  v50 = *(_QWORD *)(a5 + 832);
  if (v50)
    LOWORD(v50) = *(_WORD *)(v50 + 8);
  v51 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v57, v37, v39, v41, v40, v49, (uint64_t)v15, v55, v47, v48, SHIDWORD(v48), v50);
  result = sub_1C6366608(a5, (uint64_t)v51, v52, (const llvm::APInt *)&v57, v46, v45, (char)v46, v45);
  *(_QWORD *)v44 = result;
  *(_DWORD *)(v44 + 8) = v53;
LABEL_27:
  if (v57)
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  return result;
}

uint64_t *sub_1C5DA2BD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  llvm *v26;
  uint64_t v27;
  llvm *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  llvm *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *result;
  int v77;
  llvm *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v83;
  int v84;

  v12 = *(unsigned __int8 **)(a2 + 64);
  v83 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v83, v12, 2);
  v84 = *(_DWORD *)(a2 + 60);
  v13 = *(uint64_t **)(a2 + 32);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[5];
  v17 = v13[6];
  v18 = *(unsigned __int16 *)(a2 + 24);
  if (v18 == 76)
    v19 = 56;
  else
    v19 = 57;
  v20 = *(_QWORD *)(v14 + 40) + 16 * v15;
  v21 = *(llvm **)v20;
  v22 = *(_QWORD *)(v20 + 8);
  v23 = *(_QWORD *)(a5 + 832);
  if (v23)
    LOWORD(v23) = *(_WORD *)(v23 + 8);
  v79 = v17;
  v80 = v16;
  *a3 = (uint64_t)sub_1C5D56C70(a5, v19, (const llvm::APInt *)&v83, v21, v22, v14, v15, a8, v16, v17, v23);
  *((_DWORD *)a3 + 2) = v24;
  v25 = *(_QWORD **)(a2 + 40);
  v26 = (llvm *)v25[2];
  v81 = v25[3];
  v28 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, *(_QWORD *)(a5 + 56), *v25, v25[1]);
  v30 = v29;
  if (v18 == 76)
    v31 = 82;
  else
    v31 = 84;
  v32 = *(_QWORD *)(v14 + 40) + 16 * v15;
  v33 = *(llvm **)v32;
  if (!*(_QWORD *)v32
    || *(_QWORD *)v32 != 1
    && (*(_QWORD *)v32
      ? (v34 = *(_QWORD *)(a1 + 8 * *(_QWORD *)v32 + 96) == 0)
      : (v34 = 1),
        v34)
    || *(_BYTE *)(a1 + 390 * *(_QWORD *)v32 + v31 + 3862))
  {
    v78 = v26;
    v53 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v83, v33, *(_QWORD *)(v32 + 8), 0, 0);
    v55 = v54;
    v57 = *a3;
    v56 = a3[1];
    v58 = sub_1C6367818((_QWORD *)a5, 0x14u);
    v61 = 0;
    v62 = *(_QWORD *)(a5 + 832);
    if (v62)
      v61 = *(_WORD *)(v62 + 8);
    v63 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v83, v28, v30, v57, v56, v60, v14, v15, v58, v59, SHIDWORD(v59), v61);
    v65 = v64;
    if (v18 == 76)
      v66 = 20;
    else
      v66 = 18;
    v67 = sub_1C6367818((_QWORD *)a5, v66);
    v70 = *(_QWORD *)(a5 + 832);
    if (v70)
      LOWORD(v70) = *(_WORD *)(v70 + 8);
    v51 = v81;
    v72 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v83, v28, v30, v80, v79, v69, (uint64_t)v53, v55, v67, v68, SHIDWORD(v68), v70);
    v74 = *(_QWORD *)(a5 + 832);
    if (v74)
      LOWORD(v74) = *(_WORD *)(v74 + 8);
    v50 = a4;
    v52 = v78;
    v47 = sub_1C5D56C70(a5, 173, (const llvm::APInt *)&v83, v28, v30, (uint64_t)v72, v71, v73, (uint64_t)v63, v65, v74);
    v49 = v75;
  }
  else
  {
    v35 = *(_QWORD *)(v32 + 8);
    v36 = *(_QWORD *)(a5 + 832);
    if (v36)
      LOWORD(v36) = *(_WORD *)(v36 + 8);
    v37 = v26;
    v38 = sub_1C5D56C70(a5, v31, (const llvm::APInt *)&v83, v33, v35, v14, v15, v27, v80, v79, v36);
    v40 = v39;
    v42 = *a3;
    v41 = a3[1];
    v43 = sub_1C6367818((_QWORD *)a5, 0x16u);
    v46 = *(_QWORD *)(a5 + 832);
    if (v46)
      LOWORD(v46) = *(_WORD *)(v46 + 8);
    v47 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v83, v28, v30, v42, v41, v45, (uint64_t)v38, v40, v43, v44, SHIDWORD(v44), v46);
    v49 = v48;
    v51 = v81;
    v50 = a4;
    v52 = v37;
  }
  result = sub_1C6366608(a5, (uint64_t)v47, v49, (const llvm::APInt *)&v83, v52, v51, (char)v52, v51);
  *(_QWORD *)v50 = result;
  *(_DWORD *)(v50 + 8) = v77;
  if (v83)
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
  return result;
}

uint64_t sub_1C5DA2F18(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  llvm::EVT *v20;
  llvm::LLVMContext *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t *v26;
  int8x8_t *v27;
  uint64_t v28;
  uint8x8_t v29;
  llvm *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int8x8_t *v34;
  int8x8_t v35;
  uint8x8_t v36;
  llvm *ShiftAmountTy;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  llvm *v61;
  int v62;
  llvm::LLVMContext *v63;
  llvm::Type *v64;
  llvm::LLVMContext *v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  llvm *v69;
  uint64_t v70;
  const char *v71;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t **v86;
  uint64_t v87;
  BOOL v88;
  uint64_t *v89;
  llvm *v90;
  uint64_t *v91;
  int v92;
  uint64_t *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t *v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  unsigned int v115;
  BOOL v116;
  llvm::Type *v117;
  llvm *v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  llvm *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  unsigned __int8 v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  llvm *v140;
  unsigned __int8 v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  uint64_t *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t *v154;
  llvm *v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  int v181;
  unint64_t ExtendedSizeInBits;
  int v183;
  uint64_t v184;
  __int16 v185;
  int v186;
  uint64_t ExtendedIntegerVT;
  uint64_t v188;
  int v189;
  uint64_t *v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t *v199;
  _QWORD v200[2];
  char v201;
  uint64_t v202;
  char v203;
  _QWORD v204[2];
  char v205;
  uint64_t v206;
  char v207;
  llvm *v208;
  uint64_t v209;
  llvm *v210;
  uint64_t v211;
  unsigned __int8 *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 **)(a2 + 64);
  v212 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v212, v9, 2);
  v213 = *(_DWORD *)(a2 + 60);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(v10 + 8);
  v210 = *(llvm **)v10;
  v211 = v11;
  v194 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 400))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, *(_QWORD *)(a5 + 56));
  v12 = *(uint64_t **)(a2 + 32);
  v196 = v13;
  v197 = *v12;
  v198 = v12[1];
  v14 = v12[5];
  v15 = v12[6];
  v16 = *(unsigned __int16 *)(a2 + 24);
  v17 = sub_1C5D4F7E8(v14, v15, 0, 0);
  if (v17)
  {
    v26 = *(int8x8_t **)(v17 + 80);
    v27 = v26 + 3;
    v28 = v26[4].u32[0];
    if (v28 > 0x40)
    {
      v32 = 0;
      v33 = (unint64_t)(v28 + 63) >> 6;
      v34 = (int8x8_t *)*v27;
      do
      {
        v35 = *v34++;
        v36 = (uint8x8_t)vcnt_s8(v35);
        v36.i16[0] = vaddlv_u8(v36);
        v32 += v36.i32[0];
        --v33;
      }
      while (v33);
      if (v32 != 1)
        goto LABEL_4;
      if (v16 == 80)
      {
        v30 = (llvm *)v194;
        if (((*(_QWORD *)(*(_QWORD *)v27 + 8 * ((v28 - 1) >> 6)) >> (v28 - 1)) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v26[3]) == (_DWORD)v28 - 1)
        {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
    else
    {
      v29 = (uint8x8_t)vcnt_s8(*v27);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] != 1)
        goto LABEL_4;
      if (v16 == 80)
      {
        v30 = (llvm *)v194;
        if (*v27 == 1 << (v28 - 1))
        {
LABEL_11:
          v31 = 177;
LABEL_21:
          ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v210, v211, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, 1);
          v39 = v38;
          v40 = v26[4].u32[0];
          if (v40 > 0x40)
            v41 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v26[3]);
          else
            v41 = v40 + __clz((unint64_t)*v27) - 64;
          v42 = sub_1C6366AB4(a5, v40 + ~v41, (const llvm::APInt *)&v212, ShiftAmountTy, v39, 0, 0);
          v45 = (uint64_t)v42;
          v46 = v43;
          v47 = *(_QWORD *)(a5 + 832);
          if (v47)
            LOWORD(v47) = *(_WORD *)(v47 + 8);
          v48 = sub_1C5D56C70(a5, 175, (const llvm::APInt *)&v212, v210, v211, v197, v198, v44, (uint64_t)v42, v43, v47);
          *a3 = v48;
          *((_DWORD *)a3 + 2) = v50;
          v51 = *(_QWORD *)(a5 + 832);
          if (v51)
            LOWORD(v51) = *(_WORD *)(v51 + 8);
          v52 = sub_1C5D56C70(a5, v31, (const llvm::APInt *)&v212, v210, v211, (uint64_t)v48, (unint64_t)a3[1], v49, v45, v46, v51);
          v54 = v53;
          v55 = sub_1C6367818((_QWORD *)a5, 0x16u);
          v58 = *(_QWORD *)(a5 + 832);
          if (v58)
            LOWORD(v58) = *(_WORD *)(v58 + 8);
          *(_QWORD *)a4 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v212, v30, v196, (uint64_t)v52, v54, v57, v197, v198, v55, v56, SHIDWORD(v56), v58);
          *(_DWORD *)(a4 + 8) = v59;
          goto LABEL_31;
        }
LABEL_17:
        v31 = 176;
        goto LABEL_21;
      }
    }
    v31 = 177;
    v30 = (llvm *)v194;
    goto LABEL_21;
  }
LABEL_4:
  v20 = *(llvm::EVT **)(a5 + 56);
  v21 = (llvm::LLVMContext *)(2 * sub_1C6131328((unsigned __int8 *)&v210, v18, v19));
  if ((int)v21 > 63)
  {
    if ((_DWORD)v21 == 64)
    {
      v23 = 0;
      v24 = 0;
      v25 = 6;
      goto LABEL_36;
    }
    if ((_DWORD)v21 == 128)
    {
      v23 = 0;
      v24 = 0;
      v25 = 7;
      goto LABEL_36;
    }
  }
  else
  {
    switch((_DWORD)v21)
    {
      case 0x20:
        v23 = 0;
        v24 = 0;
        v25 = 5;
        goto LABEL_36;
      case 0x10:
        v23 = 0;
        v24 = 0;
        v25 = 4;
        goto LABEL_36;
      case 8:
        v23 = 0;
        v24 = 0;
        v25 = 3;
        goto LABEL_36;
    }
  }
  ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(v20, v21);
  v24 = v188;
  v23 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
  v25 = ExtendedIntegerVT;
LABEL_36:
  v61 = (llvm *)(v25 | v23);
  v192 = a4;
  if (!(_BYTE)v210)
  {
    if ((*(_DWORD *)(v211 + 8) & 0xFE) != 0x12)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (v210 - 15 < 0x9C)
  {
LABEL_38:
    v62 = v16;
    v63 = *(llvm::LLVMContext **)(a5 + 56);
    v64 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)&v210);
    v65 = v63;
    v16 = v62;
    v61 = (llvm *)sub_1C47AC578(v65, (uint64_t)v61, v24, v64);
    v24 = v66;
  }
LABEL_39:
  v193 = v16;
  v67 = v16 == 80;
  v69 = v210;
  v68 = v211;
  if ((_BYTE)v210)
  {
    v70 = dword_1C866EC0C[3 * v67];
    if (v210 == 1 || a1[v210 + 12])
    {
      if (v70 > 0x185 || (*((_BYTE *)a1 + 390 * v210 + v70 + 3862) & 0xFB) == 0)
      {
        v76 = *(_QWORD *)(a5 + 832);
        if (v76)
          LOWORD(v76) = *(_WORD *)(v76 + 8);
        v77 = sub_1C5D56C70(a5, 58, (const llvm::APInt *)&v212, v210, v211, v197, v198, v22, v14, v15, v76);
        v80 = v79;
        v81 = *(_QWORD *)(a5 + 832);
        v82 = v77;
        if (v81)
          LOWORD(v81) = *(_WORD *)(v81 + 8);
        v86 = a3;
        v89 = sub_1C5D56C70(a5, v70, (const llvm::APInt *)&v212, v210, v211, v197, v198, v78, v14, v15, v81);
        v90 = (llvm *)v194;
LABEL_104:
        v152 = v87;
        *v86 = v82;
        *((_DWORD *)v86 + 2) = v80;
        if (v193 == 80)
        {
          v153 = (char *)sub_1C6131328((unsigned __int8 *)&v210, v87, v88) - 1;
          v154 = (uint64_t *)(v82[5] + 16 * v80);
          v155 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, *v154, v154[1], *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, 1);
          v157 = sub_1C6366AB4(a5, (uint64_t)v153, (const llvm::APInt *)&v212, v155, v156, 0, 0);
          v160 = *(_QWORD *)(a5 + 832);
          if (v160)
            LOWORD(v160) = *(_WORD *)(v160 + 8);
          v161 = v196;
          v162 = v192;
          v163 = sub_1C5D56C70(a5, 176, (const llvm::APInt *)&v212, v210, v211, (uint64_t)v82, v80, v159, (uint64_t)v157, v158, v160);
          v165 = v164;
        }
        else
        {
          v163 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v212, v210, v211, 0, 0);
          v165 = v166;
          v161 = v196;
          v162 = v192;
        }
        v167 = sub_1C6367818((_QWORD *)a5, 0x16u);
        v170 = *(_QWORD *)(a5 + 832);
        if (v170)
          LOWORD(v170) = *(_WORD *)(v170 + 8);
        v171 = sub_1C5D58E08(a5, (const char *)0xC1, (const llvm::APInt *)&v212, v90, v161, (uint64_t)v89, v152, v169, (uint64_t)v163, v165, v167, v168, SHIDWORD(v168), v170);
        *(_QWORD *)v162 = v171;
        *(_DWORD *)(v162 + 8) = v172;
        v173 = *(_QWORD *)(a2 + 40);
        v174 = *(_QWORD *)(v173 + 24);
        v208 = *(llvm **)(v173 + 16);
        v209 = v174;
        v175 = (uint64_t *)(v171[5] + 16 * v172);
        v177 = *v175;
        v176 = v175[1];
        if (v208 == v177)
        {
          if ((_BYTE)v208 || v174 == v176)
          {
LABEL_31:
            v60 = 1;
            goto LABEL_52;
          }
          v214 = v177;
          v215 = v176;
        }
        else
        {
          v214 = v177;
          v215 = v176;
          if ((_BYTE)v208)
          {
            v178 = sub_1C47A8C74((unsigned __int8 *)&v208);
LABEL_118:
            v180 = v178;
            v181 = v179;
            if ((_BYTE)v177)
              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v214);
            else
              ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v214);
            if ((v181 != 1 || v183 == 1) && v180 < ExtendedSizeInBits)
            {
              v184 = *(_QWORD *)(a5 + 832);
              if (v184)
                v185 = *(_WORD *)(v184 + 8);
              else
                v185 = 0;
              *(_QWORD *)v162 = sub_1C5D52060(a5, 201, (const llvm::APInt *)&v212, v208, v209, *(_QWORD *)v162, *(_QWORD *)(v162 + 8), v185);
              *(_DWORD *)(v162 + 8) = v186;
            }
            goto LABEL_31;
          }
        }
        v178 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v208);
        goto LABEL_118;
      }
      v71 = (const char *)dword_1C866EC0C[3 * v67 + 1];
      if ((v210 == 1 || a1[v210 + 12])
        && (v71[(_QWORD)a1 + 390 * v210 + 3862] & 0xFB) == 0)
      {
        v95 = sub_1C636A8B4(a5, (uint64_t)v210, v211, (uint64_t)v210, v211);
        v82 = sub_1C636D6B4(a5, v71, (const llvm::APInt *)&v212, v95, v96, v197, v198, v97, v14, v15);
        v80 = v98;
        v87 = 1;
        v89 = v82;
LABEL_103:
        v90 = (llvm *)v194;
        v86 = a3;
        goto LABEL_104;
      }
    }
  }
  if ((_BYTE)v61 && a1[v61 + 12])
  {
    v83 = dword_1C866EC0C[3 * v67 + 2];
    v84 = *(_QWORD *)(a5 + 832);
    if (v84)
      v85 = *(_WORD *)(v84 + 8);
    else
      v85 = 0;
    v99 = sub_1C5D52060(a5, dword_1C866EC0C[3 * v67 + 2], (const llvm::APInt *)&v212, v61, v24, v197, v198, v85);
    v101 = v198 & 0xFFFFFFFF00000000 | v100;
    v102 = *(_QWORD *)(a5 + 832);
    if (v102)
      v103 = *(_WORD *)(v102 + 8);
    else
      v103 = 0;
    v104 = sub_1C5D52060(a5, v83, (const llvm::APInt *)&v212, v61, v24, v14, v15, v103);
    v107 = v15 & 0xFFFFFFFF00000000 | v106;
    v108 = *(_QWORD *)(a5 + 832);
    if (v108)
      LOWORD(v108) = *(_WORD *)(v108 + 8);
    v110 = sub_1C5D56C70(a5, 58, (const llvm::APInt *)&v212, v61, v24, (uint64_t)v99, v101, v105, (uint64_t)v104, v107, v108);
    v111 = v109;
    v112 = *(_QWORD *)(a5 + 832);
    if (v112)
      v113 = *(_WORD *)(v112 + 8);
    else
      v113 = 0;
    v199 = sub_1C5D52060(a5, 201, (const llvm::APInt *)&v212, v210, v211, (uint64_t)v110, v109, v113);
    v115 = v114;
    v117 = sub_1C6131328((unsigned __int8 *)&v210, v114, v116);
    v118 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v61, v24, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, 1);
    v120 = sub_1C6366AB4(a5, (uint64_t)v117, (const llvm::APInt *)&v212, v118, v119, 0, 0);
    v123 = v210;
    v124 = v211;
    v125 = *(_QWORD *)(a5 + 832);
    if (v125)
      LOWORD(v125) = *(_WORD *)(v125 + 8);
    v127 = sub_1C5D56C70(a5, 177, (const llvm::APInt *)&v212, v61, v24, (uint64_t)v110, v111, v122, (uint64_t)v120, v121, v125);
    v128 = *(_QWORD *)(a5 + 832);
    if (v128)
      v129 = *(_WORD *)(v128 + 8);
    else
      v129 = 0;
    v86 = a3;
    v89 = sub_1C5D52060(a5, 201, (const llvm::APInt *)&v212, v123, v124, (uint64_t)v127, v126, v129);
    v80 = v115;
    v90 = (llvm *)v194;
    v82 = v199;
    goto LABEL_104;
  }
  if (!(_BYTE)v210)
  {
    if ((*(_DWORD *)(v211 + 8) & 0xFE) == 0x12)
      goto LABEL_51;
    goto LABEL_58;
  }
  if (v210 - 15 >= 0x9C)
  {
LABEL_58:
    if (v61 == 7)
      v73 = 16;
    else
      v73 = 637;
    v74 = ((_BYTE)v61 - 4);
    if (v74 < 3)
      v73 = v74 + 13;
    v191 = v73;
    if (v193 == 80)
    {
      if ((_BYTE)v210)
      {
        v75 = sub_1C47A8C74((unsigned __int8 *)&v210);
        v69 = v210;
        v68 = v211;
      }
      else
      {
        v75 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v210);
      }
      v130 = v75 - 1;
      v131 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, 0);
      v132 = sub_1C6366AB4(a5, v130, (const llvm::APInt *)&v212, (llvm *)v131, 0, 0, 0);
      v135 = 0;
      v136 = *(_QWORD *)(a5 + 832);
      if (v136)
        v135 = *(_WORD *)(v136 + 8);
      v137 = sub_1C5D56C70(a5, 176, (const llvm::APInt *)&v212, v69, v68, v197, v198, v134, (uint64_t)v132, v133, v135);
      v189 = v138;
      v190 = v137;
      v140 = v210;
      v139 = v211;
      v141 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272, 0);
      v142 = sub_1C6366AB4(a5, v130, (const llvm::APInt *)&v212, (llvm *)v141, 0, 0, 0);
      v145 = 0;
      v146 = *(_QWORD *)(a5 + 832);
      if (v146)
        v145 = *(_WORD *)(v146 + 8);
      v93 = sub_1C5D56C70(a5, 176, (const llvm::APInt *)&v212, v140, v139, v14, v15, v144, (uint64_t)v142, v143, v145);
    }
    else
    {
      v91 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v212, v210, v211, 0, 0);
      v189 = v92;
      v190 = v91;
      v93 = sub_1C6366AB4(a5, 0, (const llvm::APInt *)&v212, v210, v211, 0, 0);
    }
    v147 = v93;
    v148 = v94;
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 1920))(a1, *(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272))
    {
      v214 = v197;
      LODWORD(v215) = v198;
      v216 = (uint64_t)v190;
      v217 = v189;
      v218 = v14;
      v219 = v15;
      v220 = (uint64_t)v147;
      v221 = v148;
      v204[0] = 0;
      v204[1] = 0;
      v205 = 0;
      v206 = 0;
      v207 = (v193 == 80) | 0xC;
      sub_1C5D7B380((unsigned __int8 *)a1, a5, v191, (uint64_t)v61, v24, (uint64_t)&v214, 4uLL, (uint64_t)v204, (uint64_t)&v208, (uint64_t)&v212, 0, 0);
    }
    else
    {
      v214 = (uint64_t)v190;
      LODWORD(v215) = v189;
      v216 = v197;
      v217 = v198;
      v218 = (uint64_t)v147;
      v219 = v148;
      v220 = v14;
      v221 = v15;
      v200[0] = 0;
      v200[1] = 0;
      v201 = 0;
      v202 = 0;
      v203 = (v193 == 80) | 0xC;
      sub_1C5D7B380((unsigned __int8 *)a1, a5, v191, (uint64_t)v61, v24, (uint64_t)&v214, 4uLL, (uint64_t)v200, (uint64_t)&v208, (uint64_t)&v212, 0, 0);
    }
    v149 = *((_QWORD *)v208 + 4);
    v150 = v149 + 40 * (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272) == 0);
    v151 = 48;
    if (!*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272))
      v151 = 8;
    v80 = *(_DWORD *)(v149 + v151);
    v82 = *(uint64_t **)(v149 + 40 * *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a5 + 40) + 40) + 272));
    v87 = *(unsigned int *)(v150 + 8);
    v89 = *(uint64_t **)v150;
    goto LABEL_103;
  }
LABEL_51:
  v60 = 0;
LABEL_52:
  if (v212)
    llvm::MetadataTracking::untrack((uint64_t)&v212, v212);
  return v60;
}

uint64_t *sub_1C5DA3BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v8;
  uint64_t v9;
  llvm **v10;
  uint64_t v11;
  llvm *v12;
  int v13;
  const char *v14;
  BOOL v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const char *v22;
  unint64_t EVT;
  const char *v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  llvm *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  llvm *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  llvm *v42;
  uint64_t v43;
  __int128 v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 **)(a2 + 64);
  v45 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v45, v8, 2);
  v46 = *(_DWORD *)(a2 + 60);
  v9 = sub_1C6365070(*(unsigned __int16 *)(a2 + 24));
  v44 = *(_OWORD *)*(_QWORD *)(a2 + 32);
  v10 = (llvm **)(*(_QWORD *)(v44 + 40) + 16 * DWORD2(v44));
  v12 = *v10;
  v11 = (uint64_t)v10[1];
  v42 = v12;
  v43 = v11;
  if ((_BYTE)v12)
  {
    if (v12 - 120 >= 0x33)
      goto LABEL_5;
LABEL_18:
    llvm::report_fatal_error((llvm *)"Expanding reductions for scalable vectors is undefined.", (const char *)1);
  }
  if (*(_BYTE *)(v11 + 8) == 19)
    goto LABEL_18;
LABEL_5:
  v13 = sub_1C52B71D4((unsigned __int8 *)&v42);
  if ((v13 & (v13 - 1)) == 0 && sub_1C612FE00((llvm::EVT *)&v42, v14) >= 2)
  {
    do
    {
      v16 = (llvm *)sub_1C52B7018((uint64_t)&v42, *(llvm::LLVMContext **)(a3 + 56), v15);
      v18 = v17;
      if (v16 != 1 && (!(_BYTE)v16 || !*(_QWORD *)(a1 + 8 * v16 + 96))
        || v9 <= 0x185
        && (*(_BYTE *)(a1 + 390 * v16 + v9 + 3862) & 0xFB) != 0)
      {
        break;
      }
      sub_1C63493B4(a3, (unsigned int *)&v44, (const llvm::APInt *)&v45, (uint64_t)&v47);
      v20 = *(_QWORD *)(a3 + 832);
      if (v20)
        LOWORD(v20) = *(_WORD *)(v20 + 8);
      v3 = v3 & 0xFFFFFFFF00000000 | v48;
      v4 = v4 & 0xFFFFFFFF00000000 | v50;
      v21 = sub_1C5D56C70(a3, v9, (const llvm::APInt *)&v45, v16, v18, (uint64_t)v47, v3, v19, v49, v4, v20);
      v43 = v18;
      *(_QWORD *)&v44 = v21;
      DWORD2(v44) = (_DWORD)v22;
      v42 = v16;
    }
    while (sub_1C612FE00((llvm::EVT *)&v42, v22) > 1);
  }
  if ((_BYTE)v42)
  {
    v25 = sub_1C47F37A0((unsigned __int8 *)&v42);
    v27 = 0;
    v26 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v43 + 24), 0, v15);
    v25 = EVT;
    v26 = (uint64_t)v24;
    v27 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v28 = sub_1C612FE00((llvm::EVT *)&v42, v24);
  v47 = &v49;
  v48 = 0x800000000;
  sub_1C5D63080(a3, v44, *((unint64_t *)&v44 + 1), (uint64_t)&v47, 0, v28, 0, 0);
  v31 = *(uint64_t **)v47;
  v30 = *((_QWORD *)v47 + 1);
  if (v28 >= 2)
  {
    v32 = 0;
    v33 = (llvm *)(v27 | v25);
    v34 = 16 * v28 - 16;
    do
    {
      v31 = sub_1C5D56C70(a3, v9, (const llvm::APInt *)&v45, v33, v26, (uint64_t)v31, v30, v29, *(_QWORD *)((char *)v47 + v32 + 16), *(_QWORD *)((char *)v47 + v32 + 24), *(_WORD *)(a2 + 72));
      v30 = v30 & 0xFFFFFFFF00000000 | v35;
      v32 += 16;
    }
    while (v34 != v32);
  }
  v36 = *(_QWORD *)(a2 + 40);
  v37 = *(llvm **)v36;
  v38 = *(_QWORD *)(v36 + 8);
  if (v25 != *(_QWORD *)v36 || !v25 && v26 != v38)
  {
    v39 = *(_QWORD *)(a3 + 832);
    if (v39)
      v40 = *(_WORD *)(v39 + 8);
    else
      v40 = 0;
    v31 = sub_1C5D52060(a3, 200, (const llvm::APInt *)&v45, v37, v38, (uint64_t)v31, v30, v40);
  }
  if (v47 != &v49)
    free(v47);
  if (v45)
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  return v31;
}

uint64_t sub_1C5DA3F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  llvm *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;

  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(llvm **)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(unsigned __int8 **)(a2 + 64);
  v38 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v38, v15, 2);
  v39 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(a2 + 24) == 61)
    v16 = 59;
  else
    v16 = 60;
  if (*(_WORD *)(a2 + 24) == 61)
    v17 = 65;
  else
    v17 = 66;
  if (!(_BYTE)v13)
    goto LABEL_14;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[5];
  v22 = v18[6];
  if (v13 != 1 && !*(_QWORD *)(a1 + 8 * v13 + 96))
    goto LABEL_14;
  if ((*(_BYTE *)(a1 + 390 * v13 + v17 + 3862) & 0xFB) != 0)
  {
    if ((*(_BYTE *)(a1 + 390 * v13 + v16 + 3862) & 0xFB) != 0)
    {
LABEL_14:
      v23 = 0;
      goto LABEL_22;
    }
    v24 = *(_QWORD *)(a4 + 832);
    if (v24)
      LOWORD(v24) = *(_WORD *)(v24 + 8);
    v26 = sub_1C5D56C70(a4, v16, (const llvm::APInt *)&v38, v13, v14, v19, v20, a8, v21, v22, v24);
    v28 = *(_QWORD *)(a4 + 832);
    if (v28)
      LOWORD(v28) = *(_WORD *)(v28 + 8);
    v29 = sub_1C5D56C70(a4, 58, (const llvm::APInt *)&v38, v13, v14, (uint64_t)v26, v25, v27, v21, v22, v28);
    v32 = *(_QWORD *)(a4 + 832);
    if (v32)
      LOWORD(v32) = *(_WORD *)(v32 + 8);
    *(_QWORD *)a3 = sub_1C5D56C70(a4, 57, (const llvm::APInt *)&v38, v13, v14, v19, v20, v31, (uint64_t)v29, v30, v32);
    *(_DWORD *)(a3 + 8) = v33;
    v23 = 1;
  }
  else
  {
    v35 = sub_1C636A8B4(a4, (uint64_t)v13, v14, (uint64_t)v13, v14);
    *(_QWORD *)a3 = sub_1C636D6B4(a4, (const char *)v17, (const llvm::APInt *)&v38, v35, v36, v19, v20, v37, v21, v22);
    v23 = 1;
    *(_DWORD *)(a3 + 8) = 1;
  }
LABEL_22:
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  return v23;
}

uint64_t *sub_1C5DA4114(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  char *v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  BOOL v42;
  void *v43;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t *v69;
  int v70;
  int v71;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  int v92;
  uint64_t v93;
  llvm *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  llvm *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  llvm *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  uint64_t v119;
  int v120;
  char *v121;
  unsigned int v122;
  char *v123;
  unsigned int v124;
  __int128 v125;
  __int128 v126;
  unsigned __int8 *v127;
  int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134[4];

  v134[2] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a2 + 24);
  v6 = *(unsigned __int8 **)(a2 + 64);
  v127 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v127, v6, 2);
  v128 = *(_DWORD *)(a2 + 60);
  v7 = *(uint64_t **)(a2 + 32);
  v9 = *v7;
  v8 = v7[1];
  v10 = *(_QWORD *)(*v7 + 40) + 16 * v8;
  v11 = *(llvm **)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v125 = *(_OWORD *)(v7[5] + 80);
  v126 = v13;
  v14 = sub_1C6131328((unsigned __int8 *)&v125, (uint64_t)v6, (BOOL)a3);
  v18 = sub_1C6131328((unsigned __int8 *)&v126, v15, v16);
  v122 = 1;
  v121 = 0;
  if (v5 == 210)
  {
    LODWORD(v130) = v14;
    if (v14 > 0x40)
    {
      v20 = (char *)&v129;
      llvm::APInt::initSlowCase((llvm::APInt *)&v129, 0, 0);
      v19 = v14 - 1;
      if (v130 >= 0x41)
        v20 = &v129[8 * (v19 >> 6)];
    }
    else
    {
      v129 = 0;
      LOBYTE(v19) = v14 - 1;
      v20 = (char *)&v129;
    }
    *(_QWORD *)v20 |= 1 << v19;
    v21 = v130;
    if (v130 < v18)
    {
      llvm::APInt::sext((llvm::APInt *)&v129, v18, (llvm::APInt *)&v132);
      v22 = v132;
      v21 = v133;
    }
    else
    {
      LODWORD(v133) = v130;
      if (v130 > 0x40)
      {
        v22 = (char *)operator new[]();
        v132 = v22;
        v27 = v133;
        memcpy(v22, v129, (((unint64_t)v133 + 63) >> 3) & 0x3FFFFFF8);
        v21 = v27;
      }
      else
      {
        v22 = v129;
        v132 = v129;
      }
    }
    v123 = v22;
    v124 = v21;
    LODWORD(v133) = 0;
    if (v130 >= 0x41 && v129)
      MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
    LODWORD(v130) = v14;
    if (v14 > 0x40)
    {
      v29 = (char *)&v129;
      llvm::APInt::initSlowCase((llvm::APInt *)&v129, -1, 1);
      LODWORD(v28) = v14 - 1;
      if (v130 >= 0x41)
        v29 = &v129[8 * (v28 >> 6)];
    }
    else
    {
      v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
      if (!v14)
        v28 = 0;
      v129 = (char *)v28;
      LOBYTE(v28) = v14 - 1;
      v29 = (char *)&v129;
    }
    *(_QWORD *)v29 &= ~(1 << v28);
    v30 = v130;
    if (v130 < v18)
    {
      llvm::APInt::sext((llvm::APInt *)&v129, v18, (llvm::APInt *)&v132);
      v31 = v132;
      v30 = v133;
    }
    else
    {
      LODWORD(v133) = v130;
      if (v130 > 0x40)
      {
        v31 = (char *)operator new[]();
        v132 = v31;
        v32 = v133;
        memcpy(v31, v129, (((unint64_t)v133 + 63) >> 3) & 0x3FFFFFF8);
        v30 = v32;
      }
      else
      {
        v31 = v129;
        v132 = v129;
      }
    }
    v121 = v31;
    v122 = v30;
  }
  else
  {
    LODWORD(v130) = v14;
    if (v14 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v129, 0, 0);
      v23 = v130;
    }
    else
    {
      v129 = 0;
      v23 = v14;
    }
    if (v23 < v18)
    {
      llvm::APInt::zext((llvm::APInt *)&v129, v18, (uint64_t)&v132);
      v24 = v132;
      v23 = v133;
    }
    else
    {
      LODWORD(v133) = v23;
      if (v23 > 0x40)
      {
        v24 = (char *)operator new[]();
        v132 = v24;
        v23 = v133;
        memcpy(v24, v129, (((unint64_t)v133 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v24 = v129;
        v132 = v129;
      }
    }
    v123 = v24;
    v124 = v23;
    LODWORD(v133) = 0;
    if (v130 >= 0x41 && v129)
      MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
    LODWORD(v130) = v14;
    if (v14 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v129, -1, 1);
      v14 = v130;
    }
    else
    {
      if (v14)
        v25 = (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v14);
      else
        v25 = 0;
      v129 = v25;
    }
    if (v14 < v18)
    {
      llvm::APInt::zext((llvm::APInt *)&v129, v18, (uint64_t)&v132);
      v26 = v132;
      v14 = v133;
    }
    else
    {
      LODWORD(v133) = v14;
      if (v14 > 0x40)
      {
        v26 = (char *)operator new[]();
        v132 = v26;
        v14 = v133;
        memcpy(v26, v129, (((unint64_t)v133 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v26 = v129;
        v132 = v129;
      }
    }
    v121 = v26;
    v122 = v14;
  }
  LODWORD(v133) = 0;
  if (v130 >= 0x41 && v129)
    MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
  v33 = v11;
  if (v11 == 9)
  {
    v34 = a3[104];
    if (v34)
      v35 = *(_WORD *)(v34 + 8);
    else
      v35 = 0;
    v38 = sub_1C5D52060((uint64_t)a3, 215, (const llvm::APInt *)&v127, (llvm *)0xA, 0, v9, v8, v35);
    v37 = v8 & 0xFFFFFFFF00000000 | v39;
    v36 = (uint64_t)v38;
    v40 = v38[5] + 16 * v39;
    v11 = *(llvm **)v40;
    v12 = *(_QWORD *)(v40 + 8);
    v33 = *(_QWORD *)v40;
  }
  else
  {
    v36 = v9;
    v37 = v8;
  }
  v120 = v5;
  sub_1C632993C((uint64_t)v11, v12, v17);
  sub_1C4DF9184(&v133, v41);
  sub_1C632993C((uint64_t)v11, v12, v42);
  sub_1C4DF9184(&v130, v43);
  v44 = sub_1C4959BCC((uint64_t)&v132, (uint64_t)&v123, v5 == 210, 0);
  v45 = sub_1C4959BCC((uint64_t)&v129, (uint64_t)&v121, v5 == 210, 0);
  v46 = sub_1C6366D08((uint64_t)a3, (llvm::LLVMContext *)&v132, (const llvm::APFloat *)&v127, v11, v12, 0);
  v48 = v47;
  v49 = sub_1C6366D08((uint64_t)a3, (llvm::LLVMContext *)&v129, (const llvm::APFloat *)&v127, v11, v12, 0);
  if (v11 == 1)
  {
    v52 = a1;
  }
  else
  {
    v52 = a1;
    if (!(_BYTE)v11 || !*(_QWORD *)(a1 + 8 * v33 + 96))
    {
LABEL_86:
      v117 = v50;
      v119 = (uint64_t)v49;
      v73 = sub_1C63666FC((uint64_t)a3, (llvm::LLVMContext *)&v123, (const llvm::APInt *)&v127, v126, *((uint64_t *)&v126 + 1), 0, 0);
      v114 = v74;
      v75 = sub_1C63666FC((uint64_t)a3, (llvm::LLVMContext *)&v121, (const llvm::APInt *)&v127, v126, *((uint64_t *)&v126 + 1), 0, 0);
      v115 = v76;
      v116 = v75;
      if (v120 == 210)
        v77 = 208;
      else
        v77 = 209;
      v78 = a3[104];
      if (v78)
        v79 = *(_WORD *)(v78 + 8);
      else
        v79 = 0;
      v80 = v36;
      v81 = sub_1C5D52060((uint64_t)a3, v77, (const llvm::APInt *)&v127, (llvm *)v126, *((uint64_t *)&v126 + 1), v36, v37, v79);
      v83 = v82;
      v84 = *(_QWORD *)(v73 + 40) + 16 * v114;
      v113 = *(llvm **)v84;
      v85 = v73;
      v86 = *(_QWORD *)(v84 + 8);
      v87 = sub_1C6367818(a3, 0xCu);
      v110 = (uint64_t)v46;
      v112 = v48;
      v57 = v80;
      v58 = v37;
      v90 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v127, v113, v86, v80, v37, v89, v110, v112, v85, v114, (uint64_t)v81, v83, v87, v88);
      v92 = v91;
      v93 = *(_QWORD *)(v116 + 40) + 16 * v115;
      v94 = *(llvm **)v93;
      v95 = *(_QWORD *)(v93 + 8);
      v96 = sub_1C6367818(a3, 2u);
      v69 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v127, v94, v95, v57, v37, v98, v119, v117, v116, v115, (uint64_t)v90, v92, v96, v97);
      v71 = v99;
      goto LABEL_71;
    }
  }
  if (*(_BYTE *)(v52 + 390 * v33 + 4108))
    goto LABEL_86;
  v53 = ((v44 | v45) >> 4) & 1;
  if (*(_BYTE *)(v52 + 390 * v33 + 4109))
    LOBYTE(v53) = 1;
  if ((v53 & 1) != 0)
    goto LABEL_86;
  v54 = a3[104];
  v55 = v50;
  v56 = (uint64_t)v49;
  if (v54)
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  v111 = v48;
  v109 = (uint64_t)v46;
  v57 = v36;
  v58 = v37;
  v60 = sub_1C5D56C70((uint64_t)a3, 247, (const llvm::APInt *)&v127, v11, v12, v36, v37, v51, v109, v111, v54);
  v62 = a3[104];
  if (v62)
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  v63 = sub_1C5D56C70((uint64_t)a3, 246, (const llvm::APInt *)&v127, v11, v12, (uint64_t)v60, v37 & 0xFFFFFFFF00000000 | v59, v61, v56, v55, v62);
  v65 = v64 | v37 & 0xFFFFFFFF00000000;
  if (v120 == 210)
    v66 = 208;
  else
    v66 = 209;
  v67 = a3[104];
  if (v67)
    v68 = *(_WORD *)(v67 + 8);
  else
    v68 = 0;
  v69 = sub_1C5D52060((uint64_t)a3, v66, (const llvm::APInt *)&v127, (llvm *)v126, *((uint64_t *)&v126 + 1), (uint64_t)v63, v65, v68);
  v71 = v70;
LABEL_71:
  if (v120 == 210)
  {
    v100 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v127, (llvm *)v126, *((uint64_t *)&v126 + 1), 0, 0);
    v102 = v101;
    v103 = v100[5] + 16 * v101;
    v104 = *(llvm **)v103;
    v105 = *(_QWORD *)(v103 + 8);
    v106 = sub_1C6367818(a3, 8u);
    v69 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v127, v104, v105, v57, v58, v108, v57, v58, (uint64_t)v100, v102, (uint64_t)v69, v71, v106, v107);
  }
  if ((_UNKNOWN *)v130 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v131);
  }
  else if ((*(_DWORD *)(v130 + 8) - 64) <= 0xFFFFFF7F && v131)
  {
    MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v133 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v134);
  }
  else if ((*(_DWORD *)(v133 + 8) - 64) <= 0xFFFFFF7F && v134[0])
  {
    MEMORY[0x1CAA32F9C](v134[0], 0x1000C8000313F17);
  }
  if (v122 >= 0x41 && v121)
    MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
  if (v124 >= 0x41 && v123)
    MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
  if (v127)
    llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
  return v69;
}

BOOL sub_1C5DA4B34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v33;
  __int128 v34;
  __int128 v35;

  v13 = a2[3];
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 40) + 16 * a5[2]);
  v15 = *(_DWORD *)(*(_QWORD *)a7 + 76);
  *a13 = 0;
  v16 = v14 >> 3;
  v17 = (15 << (4 * (v14 & 7))) & *(_DWORD *)(v13 + 92 * v15 + 4 * v16 + 171588);
  if (v17)
  {
    v22 = (v15 >> 1) & 2 | v15 & 0xFFFFFFF9 | (4 * ((v15 >> 1) & 1));
    if ((*(_DWORD *)(v13 + 92 * v22 + 4 * v16 + 171588) & (11 << (4 * (v14 & 7)))) != 0)
    {
      v33 = 11 << (4 * (v14 & 7));
      v25 = sub_1C6365158(v15, v14, 0);
      v26 = v25;
      v27 = *(_DWORD *)(v13 + 92 * v25 + 4 * v16 + 171588);
      v28 = v27 & v33;
      if ((v27 & v33) != 0)
      {
        v26 = (v25 >> 1) & 2 | v25 & 0xFFFFFFF9 | (4 * ((v25 >> 1) & 1));
        v27 = *(_DWORD *)(v13 + 92 * v26 + 4 * v16 + 171588);
      }
      if ((v27 & v33) != 0)
        __asm { BR              X10 }
      v29 = v28;
      *(_QWORD *)a7 = sub_1C6367818(a2, v26);
      a7[2] = v30;
      *a13 = 1;
      if (v29)
      {
        v35 = *(_OWORD *)a5;
        v31 = *(_DWORD *)(a6 + 8);
        *(_QWORD *)a5 = *(_QWORD *)a6;
        a5[2] = v31;
        *(_QWORD *)a6 = v35;
        *(_DWORD *)(a6 + 8) = DWORD2(v35);
      }
    }
    else
    {
      v34 = *(_OWORD *)a5;
      v23 = *(_DWORD *)(a6 + 8);
      *(_QWORD *)a5 = *(_QWORD *)a6;
      a5[2] = v23;
      *(_QWORD *)a6 = v34;
      *(_DWORD *)(a6 + 8) = DWORD2(v34);
      *(_QWORD *)a7 = sub_1C6367818(a2, v22);
      a7[2] = v24;
    }
  }
  return v17 != 0;
}

uint64_t sub_1C5DA51BC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  uint64_t v15;
  llvm::APInt *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APInt *v20;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v14 = sub_1C5D4E5B0(a2, a3, *(llvm::APInt **)a1, 0, 0);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 80);
    v16 = (llvm::APInt *)(v15 + 24);
    v17 = *(_DWORD *)(v15 + 32);
    if (v17 <= 0x40)
    {
      if (*(_QWORD *)v16 != 1)
        goto LABEL_4;
LABEL_12:
      v26 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)v26 = a4;
      *(_DWORD *)(v26 + 8) = a5;
      goto LABEL_15;
    }
    if (llvm::APInt::countLeadingZerosSlowCase(v16) == v17 - 1)
      goto LABEL_12;
  }
LABEL_4:
  v18 = sub_1C5D4E5B0(a4, a5, *(llvm::APInt **)a1, 0, 0);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 80);
    v20 = (llvm::APInt *)(v19 + 24);
    v21 = *(_DWORD *)(v19 + 32);
    if (v21 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v20) != v21 - 1)
        goto LABEL_7;
    }
    else if (*(_QWORD *)v20 != 1)
    {
      goto LABEL_7;
    }
    v27 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v27 = a2;
    *(_DWORD *)(v27 + 8) = a3;
LABEL_15:
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)v28 = a6;
    goto LABEL_18;
  }
LABEL_7:
  result = sub_1C5D4E5B0(a6, a7, *(llvm::APInt **)a1, 0, 0);
  if (!result)
    return result;
  v23 = *(_QWORD *)(result + 80);
  v24 = (llvm::APInt *)(v23 + 24);
  v25 = *(_DWORD *)(v23 + 32);
  if (v25 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v24) != v25 - 1)
      return 0;
  }
  else if (*(_QWORD *)v24 != 1)
  {
    return 0;
  }
  v29 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v29 = a2;
  *(_DWORD *)(v29 + 8) = a3;
  v28 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v28 = a4;
  a7 = a5;
LABEL_18:
  *(_DWORD *)(v28 + 8) = a7;
  return 1;
}

void sub_1C5DA5340()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5DA5354(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E8199AE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_1C5DA53A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E8199AE0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5DA53DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  void *v12;
  unint64_t *v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  int64_t v17;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *__src;
  unsigned int v53;
  unint64_t *v54;
  unsigned int v55;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4 = (const void **)(v3 + 24);
  v5 = *(unsigned int *)(v3 + 32);
  if (v5 <= 0x40)
  {
    v6 = (unint64_t)*v4;
    if (*v4)
    {
      v53 = v5;
      __src = (void *)v6;
      v7 = __clz(__rbit64(v6));
      if (v5 >= v7)
        v8 = v7;
      else
        v8 = v5;
      if (v8)
      {
        v9 = (uint64_t)(v6 << -(char)v5) >> -(char)v5;
        if (v5 <= v7)
          v10 = 63;
        else
          v10 = v8;
        __src = (void *)((v9 >> v10) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v5));
        **(_BYTE **)(a1 + 8) = 1;
      }
      v51 = v5;
      goto LABEL_17;
    }
    return 0;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) == (_DWORD)v5)
    return 0;
  v53 = v5;
  __src = (void *)operator new[]();
  memcpy(__src, *v4, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
  v8 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__src);
  if (!v8)
  {
    v51 = v5;
LABEL_18:
    v12 = (void *)operator new[]();
    v50 = v12;
    memcpy(v12, __src, (((unint64_t)v5 + 63) >> 3) & 0x3FFFFFF8);
    goto LABEL_19;
  }
  llvm::APInt::ashrSlowCase((unsigned int *)&__src, v8);
  LODWORD(v5) = v53;
  **(_BYTE **)(a1 + 8) = 1;
  v51 = v5;
  if (v5 >= 0x41)
    goto LABEL_18;
LABEL_17:
  v12 = __src;
  v50 = __src;
LABEL_19:
  v13 = 0;
  v14 = 1;
  while (1)
  {
    llvm::APInt::operator*((uint64_t)&__src, &v50, (uint64_t)&v54);
    if (v14 >= 0x41 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
    v13 = v54;
    v14 = v55;
    v15 = v54;
    if (v55 < 0x41)
      break;
    v16 = 0;
    v17 = ((unint64_t)v55 + 63) >> 6;
    do
    {
      if (v17-- < 1)
        break;
      v19 = v54[v17];
      v16 += __clz(v19);
    }
    while (!v19);
    v20 = v55 | 0xFFFFFFC0;
    if ((v55 & 0x3F) == 0)
      v20 = 0;
    if (v55 - (v20 + v16) < 0x41)
    {
      v15 = (_QWORD *)*v54;
      break;
    }
LABEL_32:
    v21 = v53;
    v47 = v53;
    if (v53 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 2, 0);
      v21 = v47;
      if (v47 >= 0x41)
      {
        v25 = 0;
        v24 = (unint64_t)v46;
        v26 = ((unint64_t)v47 + 63) >> 6;
        v27 = v46;
        v28 = v13;
        v29 = v26;
        do
        {
          v30 = *v28++;
          v31 = *v27 - v30;
          v32 = *v27 < v30;
          v33 = *v27 + ~v30;
          if (v25)
          {
            v25 = v33 >= *v27;
          }
          else
          {
            v33 = v31;
            v25 = v32;
          }
          *v27++ = v33;
          --v29;
        }
        while (v29);
        *(_QWORD *)(v24 + 8 * (v26 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
        goto LABEL_39;
      }
    }
    else
    {
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      if (!v53)
        LOBYTE(v22) = 0;
      v46 = (unint64_t *)(v22 & 2);
    }
    v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
    if (!v21)
      v23 = 0;
    v24 = v23 & ((char *)v46 - (char *)v13);
    v46 = (unint64_t *)v24;
LABEL_39:
    v49 = v21;
    v48 = v24;
    v47 = 0;
    llvm::APInt::operator*((uint64_t)&v50, &v48, (uint64_t)&v54);
    if (v5 >= 0x41 && v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    v12 = v54;
    v50 = v54;
    LODWORD(v5) = v55;
    v51 = v55;
    if (v21 >= 0x41)
    {
      if (v48)
        MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
    }
  }
  if (v15 != (_QWORD *)1)
    goto LABEL_32;
  v34 = *(_QWORD *)(a1 + 16);
  v36 = sub_1C6366AB4(*(_QWORD *)(a1 + 24), v8, *(const llvm::APInt **)(a1 + 32), **(llvm ***)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 0, 0);
  v37 = *(unsigned int *)(v34 + 8);
  if (v37 >= *(_DWORD *)(v34 + 12))
  {
    v45 = v35;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v34, v34 + 16, v37 + 1, 16);
    v35 = v45;
    LODWORD(v37) = *(_DWORD *)(v34 + 8);
  }
  v38 = (_QWORD *)(*(_QWORD *)v34 + 16 * v37);
  *v38 = v36;
  v38[1] = v35;
  ++*(_DWORD *)(v34 + 8);
  v39 = *(_QWORD *)(a1 + 48);
  v40 = sub_1C63666FC(*(_QWORD *)(a1 + 24), (llvm::LLVMContext *)&v50, *(const llvm::APInt **)(a1 + 32), **(_QWORD **)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, 0);
  v42 = v41;
  v43 = *(unsigned int *)(v39 + 8);
  if (v43 >= *(_DWORD *)(v39 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v39, v39 + 16, v43 + 1, 16);
    LODWORD(v43) = *(_DWORD *)(v39 + 8);
  }
  v44 = (uint64_t *)(*(_QWORD *)v39 + 16 * v43);
  *v44 = v40;
  v44[1] = v42;
  ++*(_DWORD *)(v39 + 8);
  if (v51 >= 0x41 && v50)
    MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
  if (v14 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  if (v53 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return 1;
}

void sub_1C5DA58A8()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C5DA58BC(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E8199B28;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5DA58F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E8199B28;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C5DA5914(uint64_t a1, uint64_t a2)
{
  return !*(_QWORD *)a2
      || llvm::APInt::urem((uint64_t **)(*(_QWORD *)(*(_QWORD *)a2 + 80) + 24), *(unsigned int *)(a1 + 8)) != 0;
}

uint64_t sub_1C5DA5950(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  void **v22;

  v2 = (a1[1] - *a1) >> 7;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 57)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 6 > v3)
    v3 = v6 >> 6;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80)
    v7 = 0x1FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 57)
      sub_1C4764EE4();
    v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t)&v8[128 * v2];
  v10 = &v8[128 * v7];
  sub_1C5DA5B20(v9, a2);
  v11 = v9 + 128;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (!v13)
      return v9 + 128;
    goto LABEL_19;
  }
  v14 = 0;
  do
  {
    v15 = v9 + v14;
    v16 = &v13[v14];
    v17 = *(_QWORD *)&v13[v14 - 128];
    *(_QWORD *)(v15 - 122) = *(_QWORD *)&v13[v14 - 122];
    *(_QWORD *)(v15 - 128) = v17;
    *(_QWORD *)(v15 - 104) = 0;
    *(_QWORD *)(v15 - 96) = 0;
    *(_OWORD *)(v15 - 112) = *(_OWORD *)&v13[v14 - 112];
    *(_QWORD *)(v15 - 96) = *(_QWORD *)&v13[v14 - 96];
    *((_QWORD *)v16 - 13) = 0;
    *((_QWORD *)v16 - 12) = 0;
    *((_QWORD *)v16 - 14) = 0;
    LOBYTE(v17) = v13[v14 - 88];
    *(_QWORD *)(v15 - 72) = 0;
    *(_QWORD *)(v15 - 64) = 0;
    *(_BYTE *)(v15 - 88) = v17;
    *(_OWORD *)(v15 - 80) = *(_OWORD *)&v13[v14 - 80];
    *(_QWORD *)(v15 - 64) = *(_QWORD *)&v13[v14 - 64];
    *((_QWORD *)v16 - 10) = 0;
    *((_QWORD *)v16 - 9) = 0;
    *((_QWORD *)v16 - 8) = 0;
    *(_DWORD *)(v15 - 56) = *(_DWORD *)&v13[v14 - 56];
    v18 = *(_OWORD *)&v13[v14 - 48];
    *(_QWORD *)(v15 - 32) = *(_QWORD *)&v13[v14 - 32];
    *(_OWORD *)(v15 - 48) = v18;
    *((_QWORD *)v16 - 5) = 0;
    *((_QWORD *)v16 - 4) = 0;
    *((_QWORD *)v16 - 6) = 0;
    v19 = *(_OWORD *)&v13[v14 - 24];
    *(_BYTE *)(v15 - 8) = v13[v14 - 8];
    *(_OWORD *)(v15 - 24) = v19;
    v14 -= 128;
  }
  while (&v13[v14] != v12);
  v13 = (char *)*a1;
  v20 = (void **)a1[1];
  *a1 = v9 + v14;
  a1[1] = v11;
  for (a1[2] = (uint64_t)v10; v20 != (void **)v13; v20 -= 16)
  {
    if (*((char *)v20 - 25) < 0)
      operator delete(*(v20 - 6));
    v22 = v20 - 10;
    sub_1C50107D8(&v22);
    v22 = v20 - 14;
    sub_1C4765410(&v22);
  }
  if (v13)
LABEL_19:
    operator delete(v13);
  return v9 + 128;
}

void sub_1C5DA5B20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  char v11;
  _QWORD v12[3];
  int v13;
  void **v14;

  v2 = a2[4];
  v3 = *((_OWORD *)a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  v11 = *((_BYTE *)a2 + 40);
  v4 = v11;
  v5 = a2[8];
  v6 = *((_OWORD *)a2 + 3);
  a2[7] = 0;
  a2[8] = 0;
  a2[6] = 0;
  v13 = *((_DWORD *)a2 + 18);
  v7 = v13;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
  *(_DWORD *)(a1 + 8) = v9;
  *(_QWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  memset(v10, 0, sizeof(v10));
  *(_BYTE *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  memset(v12, 0, sizeof(v12));
  *(_DWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  v14 = (void **)v12;
  sub_1C50107D8(&v14);
  v14 = (void **)v10;
  sub_1C4765410(&v14);
}

void sub_1C5DA5C04()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5DA5C18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E8199B70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C5DA5C68(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E8199B70;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5DA5CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t **v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4 = (uint64_t **)(v3 + 24);
  v5 = *(_DWORD *)(v3 + 32);
  if (v5 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) == v5)
      return 0;
  }
  else if (!*v4)
  {
    return 0;
  }
  llvm::SignedDivisionByConstantInfo::get((llvm::SignedDivisionByConstantInfo *)(v3 + 24), (uint64_t)&v43);
  v7 = *(_DWORD *)(v3 + 32);
  if (v7 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) != v7 - 1
      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v3 + 24)) != v7)
    {
      if (!sub_1C49591DC((llvm::APInt *)(v3 + 24)))
        goto LABEL_24;
LABEL_20:
      v13 = v44 - 1;
      v14 = &v43;
      if (v44 >= 0x41)
        v14 = &v43[v13 >> 6];
      if (((*v14 >> v13) & 1) != 0)
      {
        v17 = -1;
        v11 = 1;
      }
      else
      {
LABEL_24:
        v15 = *(_DWORD *)(v3 + 32);
        v16 = v15 - 1;
        if (v15 >= 0x41)
          v4 = (uint64_t **)&(*v4)[v16 >> 6];
        if ((((unint64_t)*v4 >> v16) & 1) != 0)
          v11 = sub_1C49591DC((llvm::APInt *)&v43) << 63 >> 63;
        else
          v11 = 0;
        v17 = -1;
      }
      goto LABEL_33;
    }
    v11 = **v4;
  }
  else
  {
    v8 = *v4;
    if (v7)
      v9 = v8 == (uint64_t *)1;
    else
      v9 = 1;
    if (!v9 && v8 != (uint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
      goto LABEL_20;
    v11 = (uint64_t)((_QWORD)v8 << (64 - v7)) >> (64 - v7);
  }
  v12 = v44;
  if (v44 > 0x40)
  {
    *v43 = 0;
    bzero(v43 + 1, (((unint64_t)(v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    v43 = 0;
  }
  v17 = 0;
  v45 = 0;
  v11 = (int)v11;
LABEL_33:
  v18 = *(_QWORD *)(a1 + 8);
  v19 = sub_1C63666FC(*(_QWORD *)(a1 + 16), (llvm::LLVMContext *)&v43, *(const llvm::APInt **)(a1 + 24), **(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  v21 = *(unsigned int *)(v18 + 8);
  if (v21 >= *(_DWORD *)(v18 + 12))
  {
    v39 = v20;
    v40 = v19;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v18 + 16, v21 + 1, 16);
    v20 = v39;
    v19 = v40;
    LODWORD(v21) = *(_DWORD *)(v18 + 8);
  }
  v22 = (uint64_t *)(*(_QWORD *)v18 + 16 * v21);
  *v22 = v19;
  v22[1] = v20;
  ++*(_DWORD *)(v18 + 8);
  v23 = *(_QWORD *)(a1 + 40);
  v25 = sub_1C6366AB4(*(_QWORD *)(a1 + 16), v11, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  v26 = *(unsigned int *)(v23 + 8);
  if (v26 >= *(_DWORD *)(v23 + 12))
  {
    v41 = v24;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, v26 + 1, 16);
    v24 = v41;
    LODWORD(v26) = *(_DWORD *)(v23 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)v23 + 16 * v26);
  *v27 = v25;
  v27[1] = v24;
  ++*(_DWORD *)(v23 + 8);
  v28 = *(_QWORD *)(a1 + 48);
  v30 = sub_1C6366AB4(*(_QWORD *)(a1 + 16), v45, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, 0);
  v31 = *(unsigned int *)(v28 + 8);
  if (v31 >= *(_DWORD *)(v28 + 12))
  {
    v42 = v29;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v28, v28 + 16, v31 + 1, 16);
    v29 = v42;
    LODWORD(v31) = *(_DWORD *)(v28 + 8);
  }
  v32 = (_QWORD *)(*(_QWORD *)v28 + 16 * v31);
  *v32 = v30;
  v32[1] = v29;
  ++*(_DWORD *)(v28 + 8);
  v33 = *(_QWORD *)(a1 + 64);
  v34 = sub_1C6366AB4(*(_QWORD *)(a1 + 16), v17, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  v36 = v35;
  v37 = *(unsigned int *)(v33 + 8);
  if (v37 >= *(_DWORD *)(v33 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v33, v33 + 16, v37 + 1, 16);
    LODWORD(v37) = *(_DWORD *)(v33 + 8);
  }
  v38 = (_QWORD *)(*(_QWORD *)v33 + 16 * v37);
  *v38 = v34;
  v38[1] = v36;
  ++*(_DWORD *)(v33 + 8);
  if (v44 >= 0x41)
  {
    if (v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  }
  return 1;
}

void sub_1C5DA6020()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5DA6034(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E8199BB8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5DA608C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E8199BB8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1C5DA60CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void **v4;
  unsigned int v5;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  uint64_t v50;
  void *__src;
  unsigned int v52;
  uint64_t v53;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4 = (const void **)(v3 + 24);
  v5 = *(_DWORD *)(v3 + 32);
  if (v5 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) == v5)
      return 0;
  }
  else if (!*v4)
  {
    return 0;
  }
  llvm::UnsignedDivisonByConstantInfo::get((llvm::UnsignedDivisonByConstantInfo *)(v3 + 24), 0, (uint64_t)&__src);
  if (!(_BYTE)v53)
    goto LABEL_22;
  v7 = *(_DWORD *)(v3 + 32);
  if (v7 <= 0x40)
  {
    v8 = (unint64_t)*v4;
    if ((*v4 & 1) == 0)
    {
      v9 = __clz(__rbit64(v8));
      if (v7 >= v9)
        v10 = v9;
      else
        v10 = v7;
      v47 = *(_DWORD *)(v3 + 32);
      if (v7 == (_DWORD)v10)
        v46 = 0;
      else
        v46 = v8 >> v10;
      goto LABEL_15;
    }
LABEL_22:
    v10 = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)*v4 & 1) != 0)
    goto LABEL_22;
  v10 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v3 + 24));
  v47 = v7;
  v46 = operator new[]();
  v11 = v7 + 63;
  memcpy((void *)v46, *v4, (v11 >> 3) & 0x3FFFFFF8);
  llvm::APInt::tcShiftRight((llvm::APInt *)v46, (unint64_t *)(v11 >> 6), v10);
LABEL_15:
  llvm::UnsignedDivisonByConstantInfo::get((llvm::UnsignedDivisonByConstantInfo *)&v46, (const llvm::APInt *)v10, (uint64_t)&v48);
  if (v52 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = v48;
  v52 = v49;
  v49 = 0;
  v53 = v50;
  if (v47 >= 0x41 && v46)
    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  v10 = v10;
LABEL_23:
  v49 = v52;
  if (v52 > 0x40)
  {
    v12 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
    v48 = (void *)operator new[]();
    memcpy(v48, __src, v12);
  }
  else
  {
    v48 = __src;
  }
  if ((_BYTE)v53)
  {
    v13 = *(_DWORD *)(v3 + 32);
    if (v13 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) != v13 - 1)
        goto LABEL_29;
    }
    else if (*v4 != (const void *)1)
    {
LABEL_29:
      v14 = 0;
      v15 = HIDWORD(v53) - 1;
      v16 = 1;
      goto LABEL_32;
    }
  }
  v16 = 0;
  v14 = 1;
  v15 = HIDWORD(v53);
LABEL_32:
  v17 = *(_QWORD *)(a1 + 8);
  v18 = sub_1C6366AB4(*(_QWORD *)(a1 + 16), v10, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  v20 = v19;
  v21 = *(unsigned int *)(v17 + 8);
  if (v21 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v17, v17 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(v17 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)v17 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  ++*(_DWORD *)(v17 + 8);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = sub_1C63666FC(*(_QWORD *)(a1 + 16), (llvm::LLVMContext *)&v48, *(const llvm::APInt **)(a1 + 24), **(_QWORD **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 0, 0);
  v26 = v25;
  v27 = *(unsigned int *)(v23 + 8);
  if (v27 >= *(_DWORD *)(v23 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, v27 + 1, 16);
    LODWORD(v27) = *(_DWORD *)(v23 + 8);
  }
  v28 = (uint64_t *)(*(_QWORD *)v23 + 16 * v27);
  *v28 = v24;
  v28[1] = v26;
  ++*(_DWORD *)(v23 + 8);
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(a1 + 56);
  v31 = **(_DWORD **)(a1 + 64);
  if ((v14 & 1) != 0)
  {
    v47 = **(_DWORD **)(a1 + 64);
    if (v31 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    else
      v46 = 0;
    goto LABEL_42;
  }
  v32 = v31 - 1;
  v47 = **(_DWORD **)(a1 + 64);
  if (v31 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    v34 = 1 << v32;
    if (v47 > 0x40)
    {
      *(_QWORD *)(v46 + 8 * (v32 >> 6)) |= v34;
      goto LABEL_42;
    }
    v33 = v46;
  }
  else
  {
    v33 = 0;
    v34 = 1 << v32;
  }
  v46 = v33 | v34;
LABEL_42:
  v35 = sub_1C63666FC(v29, (llvm::LLVMContext *)&v46, *(const llvm::APInt **)(a1 + 24), **(_QWORD **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 0, 0);
  v37 = v36;
  v38 = *(unsigned int *)(v30 + 8);
  if (v38 >= *(_DWORD *)(v30 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v30, v30 + 16, v38 + 1, 16);
    LODWORD(v38) = *(_DWORD *)(v30 + 8);
  }
  v39 = (uint64_t *)(*(_QWORD *)v30 + 16 * v38);
  *v39 = v35;
  v39[1] = v37;
  ++*(_DWORD *)(v30 + 8);
  if (v47 >= 0x41 && v46)
    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  v40 = *(_QWORD *)(a1 + 72);
  v41 = sub_1C6366AB4(*(_QWORD *)(a1 + 16), v15, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  v43 = v42;
  v44 = *(unsigned int *)(v40 + 8);
  if (v44 >= *(_DWORD *)(v40 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v40, v40 + 16, v44 + 1, 16);
    LODWORD(v44) = *(_DWORD *)(v40 + 8);
  }
  v45 = (_QWORD *)(*(_QWORD *)v40 + 16 * v44);
  *v45 = v41;
  v45[1] = v43;
  ++*(_DWORD *)(v40 + 8);
  **(_BYTE **)(a1 + 80) |= v16;
  if (v49 >= 0x41 && v48)
    MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
  if (v52 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return 1;
}

void sub_1C5DA6604()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5DA6618(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x78uLL);
  *(_QWORD *)v2 = &off_1E8199C00;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C5DA6680(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_1E8199C00;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1C5DA66D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  char *v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  int v18;
  _BYTE *v19;
  char v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  int64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  BOOL *v30;
  unint64_t v31;
  llvm::APInt **v32;
  llvm::APInt *v33;
  llvm::APInt *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int ExtendedSizeInBits;
  const char *v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  llvm::APInt *v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  _QWORD *v75;
  unsigned int v76;
  _QWORD *v77;
  unsigned int v78;
  void *v79;
  unsigned int v80;

  v4 = *a3;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v6 = (const void **)(v5 + 24);
  v7 = *(unsigned int *)(v5 + 32);
  if (v7 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v5 + 24)) == (_DWORD)v7)
      return 0;
  }
  else if (!*v6)
  {
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 80);
  v10 = (unint64_t *)(v9 + 24);
  v11 = *(_DWORD *)(v9 + 32);
  if (v11 > 0x40)
    v12 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 24)) == v11;
  else
    v12 = *v10 == 0;
  v13 = v12;
  v14 = *(char **)(a1 + 8);
  if (!*v14)
    v13 = 0;
  *v14 = v13;
  if (v7 > 0x40)
  {
    v64 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v64)
      {
        v67 = 0;
        goto LABEL_111;
      }
      v65 = *(_QWORD *)((char *)*v6 + v64 - 8);
      v66 = *(_QWORD *)(*v10 - 8 + v64);
      v64 -= 8;
    }
    while (v65 == v66);
    if (v65 > v66)
      v67 = 1;
    else
      v67 = -1;
LABEL_111:
    v15 = v67 < 1;
    **(_BYTE **)(a1 + 16) |= v15;
    v16 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v5 + 24)) == (_DWORD)v7 - 1;
  }
  else
  {
    v15 = (unint64_t)*v6 <= *v10;
    **(_BYTE **)(a1 + 16) |= v15;
    v16 = *v6 == (const void *)1;
  }
  v17 = v16;
  v18 = v17 | v15;
  **(_BYTE **)(a1 + 24) |= v17 | v15;
  **(_BYTE **)(a1 + 32) &= v17 | v15;
  if (v11 <= 0x40)
  {
    if (!*v10)
      goto LABEL_26;
LABEL_22:
    v19 = *(_BYTE **)(a1 + 40);
    if (*v19)
      v20 = v18;
    else
      v20 = 0;
    *v19 = v20;
    goto LABEL_26;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 24)) != v11)
    goto LABEL_22;
LABEL_26:
  if (v7 > 0x40)
  {
    v24 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v5 + 24));
    v80 = v7;
    v79 = (void *)operator new[]();
    memcpy(v79, *v6, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    v26 = (unint64_t)(v7 + 63) >> 6;
    llvm::APInt::tcShiftRight((llvm::APInt *)v79, (unint64_t *)v26, v24);
    v27 = 0;
    **(_BYTE **)(a1 + 48) |= v24 != 0;
    do
    {
      v36 = v26-- < 1;
      if (v36)
        break;
      v28 = *((_QWORD *)v79 + v26);
      v27 += __clz(v28);
    }
    while (!v28);
    v29 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0)
      v29 = 0;
    v25 = v27 + v29 == (_DWORD)v7 - 1;
  }
  else
  {
    v21 = (unint64_t)*v6;
    v22 = __clz(__rbit64((unint64_t)*v6));
    v80 = v7;
    v23 = v21 >> v22;
    if (v7 <= v22)
      v23 = 0;
    if (v7 >= v22)
      v24 = v22;
    else
      v24 = v7;
    v79 = (void *)v23;
    **(_BYTE **)(a1 + 48) |= v24 != 0;
    v25 = v79 == (void *)1;
  }
  v30 = *(BOOL **)(a1 + 56);
  if (!*v30)
    v25 = 0;
  *v30 = v25;
  v31 = *(unsigned int *)(v5 + 32);
  llvm::APInt::zext((llvm::APInt *)&v79, v31 + 1, (uint64_t)&v73);
  v72 = v31 + 1;
  if ((v31 + 1) > 0x40)
  {
    v32 = &v71;
    llvm::APInt::initSlowCase((llvm::APInt *)&v71, 0, 0);
    if (v72 >= 0x41)
      v32 = (llvm::APInt **)((char *)v71 + ((v31 >> 3) & 0x1FFFFFF8));
  }
  else
  {
    v71 = 0;
    v32 = &v71;
  }
  *v32 = (llvm::APInt *)((unint64_t)*v32 | (1 << v31));
  llvm::APInt::multiplicativeInverse((llvm::APInt *)&v73, (const void **)&v71, (llvm::APInt *)&v75);
  llvm::APInt::trunc((llvm::APInt *)&v75, v31, (llvm::APInt *)&v77);
  if (v76 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  if (v74 >= 0x41 && v73)
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  v76 = 1;
  v75 = 0;
  v74 = 1;
  v73 = 0;
  v72 = v31;
  if (v31 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v71, -1, 1);
  }
  else
  {
    if ((_DWORD)v31)
      v34 = (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v31);
    else
      v34 = 0;
    v71 = v34;
  }
  llvm::APInt::udivrem(&v71, (const llvm::APInt *)(v5 + 24), (const llvm::APInt *)&v75, (llvm::APInt *)&v73, v33);
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  v35 = *(unsigned int *)(v9 + 32);
  if (v35 > 0x40)
  {
    v68 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
    while (v68)
    {
      v69 = *(_QWORD *)(*v10 - 8 + v68);
      v70 = *(_QWORD *)(v73 - 8 + v68);
      v68 -= 8;
      v36 = v69 > v70;
      if (v69 != v70)
        goto LABEL_61;
    }
  }
  else
  {
    v36 = *v10 > v73;
LABEL_61:
    if (v36)
      llvm::APInt::operator-=((uint64_t)&v75, 1uLL);
  }
  if (v18)
  {
    v37 = v78;
    if (v78 > 0x40)
    {
      *v77 = 0;
      bzero(v77 + 1, (((unint64_t)(v37 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      v77 = 0;
    }
    v38 = v76;
    if (v76 > 0x40)
    {
      *v75 = -1;
      bzero(v75 + 1, (((unint64_t)(v38 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v76)
        v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
      else
        v39 = 0;
      v75 = (_QWORD *)v39;
    }
    v24 = -1;
  }
  v40 = *(_QWORD *)(a1 + 64);
  v41 = sub_1C63666FC(*(_QWORD *)(a1 + 72), (llvm::LLVMContext *)&v77, *(const llvm::APInt **)(a1 + 80), **(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8), 0, 0);
  v43 = v42;
  v44 = *(unsigned int *)(v40 + 8);
  if (v44 >= *(_DWORD *)(v40 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v40, v40 + 16, v44 + 1, 16);
    LODWORD(v44) = *(_DWORD *)(v40 + 8);
  }
  v45 = (uint64_t *)(*(_QWORD *)v40 + 16 * v44);
  *v45 = v41;
  v45[1] = v43;
  ++*(_DWORD *)(v40 + 8);
  v46 = *(_QWORD *)(a1 + 72);
  v48 = *(_QWORD *)(a1 + 96);
  v47 = *(unsigned __int8 **)(a1 + 104);
  if (*v47)
    ExtendedSizeInBits = sub_1C47A8C74(v47);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v47);
  v51 = ExtendedSizeInBits;
  if ((_DWORD)v50 == 1)
  v72 = v51;
  if (v51 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v71, v24, 0);
  }
  else
  {
    if (v51)
      v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
    else
      LODWORD(v52) = 0;
    v71 = (llvm::APInt *)(v52 & v24);
  }
  v53 = sub_1C63666FC(v46, (llvm::LLVMContext *)&v71, *(const llvm::APInt **)(a1 + 80), **(_QWORD **)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8), 0, 0);
  v55 = v54;
  v56 = *(unsigned int *)(v48 + 8);
  if (v56 >= *(_DWORD *)(v48 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v48 + 16, v56 + 1, 16);
    LODWORD(v56) = *(_DWORD *)(v48 + 8);
  }
  v57 = (uint64_t *)(*(_QWORD *)v48 + 16 * v56);
  *v57 = v53;
  v57[1] = v55;
  ++*(_DWORD *)(v48 + 8);
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  v58 = *(_QWORD *)(a1 + 112);
  v59 = sub_1C63666FC(*(_QWORD *)(a1 + 72), (llvm::LLVMContext *)&v75, *(const llvm::APInt **)(a1 + 80), **(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8), 0, 0);
  v61 = v60;
  v62 = *(unsigned int *)(v58 + 8);
  if (v62 >= *(_DWORD *)(v58 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v58, v58 + 16, v62 + 1, 16);
    LODWORD(v62) = *(_DWORD *)(v58 + 8);
  }
  v63 = (uint64_t *)(*(_QWORD *)v58 + 16 * v62);
  *v63 = v59;
  v63[1] = v61;
  ++*(_DWORD *)(v58 + 8);
  if (v74 >= 0x41 && v73)
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  if (v76 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  if (v78 >= 0x41 && v77)
    MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
  if (v80 >= 0x41)
  {
    if (v79)
      MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
  }
  return 1;
}

void sub_1C5DA6EC4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5DA6ED8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x78uLL);
  *(_QWORD *)v2 = &off_1E8199C90;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C5DA6F40(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_1E8199C90;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1C5DA6F90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;
  unint64_t v9;
  BOOL *v10;
  BOOL v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  char v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *p_src;
  int v32;
  int64_t v33;
  unint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned int ExtendedSizeInBits;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  int v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  BOOL *v91;
  BOOL v93;
  unint64_t v94;
  _QWORD *v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  char *v104;
  char *v105;
  unsigned int v106;
  void *__src;
  unsigned int v108;
  _QWORD *v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  void *v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v116;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4 = (const void **)(v3 + 24);
  v5 = *(unsigned int *)(v3 + 32);
  if (v5 <= 0x40)
  {
    v6 = (uint64_t)*v4;
    if (*v4)
    {
      v114 = *(_DWORD *)(v3 + 32);
      v113 = (void *)v6;
      goto LABEL_7;
    }
    return 0;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 24)) == (_DWORD)v5)
    return 0;
  v114 = v5;
  v6 = operator new[]();
  v113 = (void *)v6;
  memcpy((void *)v6, *v4, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
LABEL_7:
  v8 = (void **)(v6 + 8 * ((v5 - 1) >> 6));
  if (v5 < 0x41)
    v8 = &v113;
  if ((((unint64_t)*v8 >> (v5 - 1)) & 1) != 0)
  {
    if (v5 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v113);
    }
    else
    {
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      if (!(_DWORD)v5)
        v9 = 0;
      v113 = (void *)(v9 & ~v6);
    }
    llvm::APInt::operator++((uint64_t)&v113);
    LODWORD(v5) = v114;
  }
  if (v5 >= 0x41)
  {
    v82 = v5 - 1;
    v83 = ((*((_QWORD *)v113 + ((v5 - 1) >> 6)) >> (v5 - 1)) & 1) != 0
       && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v113) == v82;
    v84 = 0;
    **(_BYTE **)(a1 + 8) |= v83;
    v85 = ((unint64_t)v5 + 63) >> 6;
    v86 = v85;
    do
    {
      v21 = v86-- < 1;
      if (v21)
        break;
      v87 = *((_QWORD *)v113 + v86);
      v84 += __clz(v87);
    }
    while (!v87);
    v88 = 0;
    v89 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0)
      v89 = 0;
    **(_BYTE **)(a1 + 16) |= v84 + v89 == v82;
    do
    {
      v21 = v85-- < 1;
      if (v21)
        break;
      v90 = *((_QWORD *)v113 + v85);
      v88 += __clz(v90);
    }
    while (!v90);
    v91 = *(BOOL **)(a1 + 24);
    v93 = v88 + v89 == v82 && *v91;
    *v91 = v93;
    v15 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v113);
    v112 = v5;
    v111 = operator new[]();
    v94 = v5 + 63;
    v95 = v113;
    memcpy((void *)v111, v113, (v94 >> 3) & 0x3FFFFFF8);
    llvm::APInt::tcShiftRight((llvm::APInt *)v111, (unint64_t *)(v94 >> 6), v15);
    v13 = v95;
  }
  else
  {
    **(_BYTE **)(a1 + 8) |= v113 == (void *)(1 << (v5 - 1));
    **(_BYTE **)(a1 + 16) |= v113 == (void *)1;
    v10 = *(BOOL **)(a1 + 24);
    v12 = v113 == (void *)1 && *v10;
    *v10 = v12;
    v13 = v113;
    v14 = __clz(__rbit64((unint64_t)v113));
    if (v5 >= v14)
      v15 = v14;
    else
      v15 = v5;
    v112 = v5;
    if ((_DWORD)v5 == v15)
    {
      v111 = 0;
      LODWORD(v5) = v15;
    }
    else
    {
      v111 = (unint64_t)v113 >> v15;
    }
  }
  v16 = v114;
  v17 = v114 - 1;
  if (v114 <= 0x40)
  {
    if (v13 == (_QWORD *)(1 << v17))
      goto LABEL_30;
    goto LABEL_29;
  }
  if (((v13[v17 >> 6] >> v17) & 1) == 0
    || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v113) != v17)
  {
LABEL_29:
    **(_BYTE **)(a1 + 32) |= v15 != 0;
  }
LABEL_30:
  if (v5 > 0x40)
  {
    v19 = 0;
    v20 = ((unint64_t)v5 + 63) >> 6;
    do
    {
      v21 = v20-- < 1;
      if (v21)
        break;
      v22 = *(_QWORD *)(v111 + 8 * v20);
      v19 += __clz(v22);
    }
    while (!v22);
    v23 = v5 | 0xFFFFFFC0;
    if ((v5 & 0x3F) == 0)
      v23 = 0;
    v18 = v19 + v23 == (_DWORD)v5 - 1;
  }
  else
  {
    v18 = v111 == 1;
  }
  v24 = v18;
  v25 = *(char **)(a1 + 40);
  if (!*v25)
    v24 = 0;
  *v25 = v24;
  llvm::APInt::zext((llvm::APInt *)&v111, v16 + 1, (uint64_t)&__src);
  v106 = v16 + 1;
  if ((v16 + 1) > 0x40)
  {
    v26 = (char *)&v105;
    llvm::APInt::initSlowCase((llvm::APInt *)&v105, 0, 0);
    if (v106 >= 0x41)
      v26 = &v105[(v16 >> 3) & 0x1FFFFFF8];
  }
  else
  {
    v105 = 0;
    v26 = (char *)&v105;
  }
  *(_QWORD *)v26 |= 1 << v16;
  llvm::APInt::multiplicativeInverse((llvm::APInt *)&__src, (const void **)&v105, (llvm::APInt *)&v115);
  llvm::APInt::trunc((llvm::APInt *)&v115, v16, (llvm::APInt *)&v109);
  if (v116 >= 0x41 && v115)
    MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
  if (v106 >= 0x41 && v105)
    MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
  if (v108 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  v116 = v16;
  if (v16 > 0x40)
  {
    v28 = &v115;
    llvm::APInt::initSlowCase((llvm::APInt *)&v115, -1, 1);
    if (v116 >= 0x41)
      v28 = (unint64_t *)(v115 + 8 * (v17 >> 6));
  }
  else
  {
    if ((_DWORD)v16)
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    else
      v27 = 0;
    v115 = v27;
    v28 = &v115;
  }
  *v28 &= ~(1 << v17);
  llvm::APInt::udiv((llvm::APInt *)&v115, (const llvm::APInt *)&v111, (llvm::APInt *)&__src);
  if (v116 >= 0x41 && v115)
    MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
  v29 = v108;
  v30 = v15 - v108;
  v116 = v108;
  if (v108 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v115, 0, 0);
    v29 = v116;
  }
  else
  {
    v115 = 0;
  }
  sub_1C4912E54(&v115, v30 + v29, v29);
  if (v108 > 0x40)
  {
    v97 = __src;
    v98 = (uint64_t *)v115;
    v99 = ((unint64_t)v108 + 63) >> 6;
    do
    {
      v100 = *v98++;
      *v97++ &= v100;
      --v99;
    }
    while (v99);
  }
  else
  {
    __src = (void *)((unint64_t)__src & v115);
  }
  if (v116 >= 0x41 && v115)
    MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
  if (v114 <= 0x40)
  {
    if (v113 == (void *)(1 << (v114 - 1)))
      goto LABEL_79;
LABEL_68:
    if (v108 >= 0x41)
    {
      v32 = 0;
      p_src = __src;
      v33 = ((unint64_t)v108 + 63) >> 6;
      do
      {
        v21 = v33-- < 1;
        if (v21)
          break;
        v34 = *((_QWORD *)__src + v33);
        v32 += __clz(v34);
      }
      while (!v34);
      v35 = v108 | 0xFFFFFFC0;
      if ((v108 & 0x3F) == 0)
        v35 = 0;
      if (v108 - v32 - v35 > 0x40)
      {
        v36 = 1;
        goto LABEL_78;
      }
    }
    else
    {
      p_src = &__src;
    }
    v36 = *p_src != 0;
LABEL_78:
    **(_BYTE **)(a1 + 48) |= v36;
    goto LABEL_79;
  }
  if (((*((_QWORD *)v113 + ((v114 - 1) >> 6)) >> (v114 - 1)) & 1) == 0)
    goto LABEL_68;
  v96 = v114 - 1;
  if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v113) != v96)
    goto LABEL_68;
LABEL_79:
  v37 = v108;
  if (v108 > 0x40)
  {
    v41 = v108 + 63;
    v104 = (char *)operator new[]();
    memcpy(v104, __src, (v41 >> 3) & 0x3FFFFFF8);
    llvm::APInt::tcMultiplyPart((llvm::APInt *)v104, (unint64_t *)v104, (const unint64_t *)2, 0, v41 >> 6, v41 >> 6, 0);
    v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
    v40 = (uint64_t *)&v104[8 * (v41 >> 6) - 8];
    v38 = *v40;
  }
  else
  {
    v38 = 2 * (_QWORD)__src;
    v104 = (char *)(2 * (_QWORD)__src);
    v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v108;
    if (!v108)
      v39 = 0;
    v40 = (uint64_t *)&v104;
  }
  *v40 = v38 & v39;
  v106 = v37;
  v105 = v104;
  v103 = v16;
  if (v16 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v102, 0, 0);
    v43 = 1 << v15;
    if (v103 > 0x40)
    {
      *(_QWORD *)(v102 + 8 * (v15 >> 6)) |= v43;
      goto LABEL_87;
    }
    v42 = v102;
  }
  else
  {
    v42 = 0;
    v43 = 1 << v15;
  }
  v102 = v42 | v43;
LABEL_87:
  llvm::APInt::udiv((llvm::APInt *)&v105, (const llvm::APInt *)&v102, (llvm::APInt *)&v115);
  if (v103 >= 0x41 && v102)
    MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
  if (v106 >= 0x41 && v105)
    MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
  if (v114 > 0x40)
  {
    v44 = 0;
    v45 = ((unint64_t)v114 + 63) >> 6;
    do
    {
      v21 = v45-- < 1;
      if (v21)
        break;
      v46 = *((_QWORD *)v113 + v45);
      v44 += __clz(v46);
    }
    while (!v46);
    v47 = v114 | 0xFFFFFFC0;
    if ((v114 & 0x3F) == 0)
      v47 = 0;
    if (v44 + v47 != v114 - 1)
      goto LABEL_116;
    goto LABEL_102;
  }
  if (v113 == (void *)1)
  {
LABEL_102:
    v48 = v110;
    if (v110 > 0x40)
    {
      *v109 = 0;
      bzero(v109 + 1, (((unint64_t)(v48 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      v109 = 0;
    }
    v49 = v108;
    if (v108 > 0x40)
    {
      *(_QWORD *)__src = -1;
      bzero((char *)__src + 8, (((unint64_t)(v49 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v108)
        v50 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v108);
      else
        v50 = 0;
      __src = v50;
    }
    v51 = v116;
    if (v116 > 0x40)
    {
      *(_QWORD *)v115 = -1;
      bzero((void *)(v115 + 8), (((unint64_t)(v51 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v116)
        v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v116;
      else
        v52 = 0;
      v115 = v52;
    }
    v15 = -1;
  }
LABEL_116:
  v53 = *(_QWORD *)(a1 + 56);
  v55 = sub_1C63666FC(*(_QWORD *)(a1 + 64), (llvm::LLVMContext *)&v109, *(const llvm::APInt **)(a1 + 72), **(_QWORD **)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), 0, 0);
  v56 = *(unsigned int *)(v53 + 8);
  if (v56 >= *(_DWORD *)(v53 + 12))
  {
    v80 = v54;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v53, v53 + 16, v56 + 1, 16);
    v54 = v80;
    LODWORD(v56) = *(_DWORD *)(v53 + 8);
  }
  v57 = (uint64_t *)(*(_QWORD *)v53 + 16 * v56);
  *v57 = v55;
  v57[1] = v54;
  ++*(_DWORD *)(v53 + 8);
  v58 = *(_QWORD *)(a1 + 88);
  v60 = sub_1C63666FC(*(_QWORD *)(a1 + 64), (llvm::LLVMContext *)&__src, *(const llvm::APInt **)(a1 + 72), **(_QWORD **)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), 0, 0);
  v61 = *(unsigned int *)(v58 + 8);
  if (v61 >= *(_DWORD *)(v58 + 12))
  {
    v81 = v59;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v58, v58 + 16, v61 + 1, 16);
    v59 = v81;
    LODWORD(v61) = *(_DWORD *)(v58 + 8);
  }
  v62 = (uint64_t *)(*(_QWORD *)v58 + 16 * v61);
  *v62 = v60;
  v62[1] = v59;
  ++*(_DWORD *)(v58 + 8);
  v63 = *(_QWORD *)(a1 + 64);
  v65 = *(_QWORD *)(a1 + 96);
  v64 = *(unsigned __int8 **)(a1 + 104);
  if (*v64)
    ExtendedSizeInBits = sub_1C47A8C74(v64);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v64);
  if ((_DWORD)v67 == 1)
  {
    v101 = ExtendedSizeInBits;
    ExtendedSizeInBits = v101;
  }
  v106 = ExtendedSizeInBits;
  if (ExtendedSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v105, v15, 0);
  }
  else
  {
    if (ExtendedSizeInBits)
      v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)ExtendedSizeInBits;
    else
      LODWORD(v68) = 0;
    v105 = (char *)(v68 & v15);
  }
  v69 = sub_1C63666FC(v63, (llvm::LLVMContext *)&v105, *(const llvm::APInt **)(a1 + 72), **(_QWORD **)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8), 0, 0);
  v71 = v70;
  v72 = *(unsigned int *)(v65 + 8);
  if (v72 >= *(_DWORD *)(v65 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v65, v65 + 16, v72 + 1, 16);
    LODWORD(v72) = *(_DWORD *)(v65 + 8);
  }
  v73 = (uint64_t *)(*(_QWORD *)v65 + 16 * v72);
  *v73 = v69;
  v73[1] = v71;
  ++*(_DWORD *)(v65 + 8);
  if (v106 >= 0x41 && v105)
    MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
  v74 = *(_QWORD *)(a1 + 112);
  v75 = sub_1C63666FC(*(_QWORD *)(a1 + 64), (llvm::LLVMContext *)&v115, *(const llvm::APInt **)(a1 + 72), **(_QWORD **)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), 0, 0);
  v77 = v76;
  v78 = *(unsigned int *)(v74 + 8);
  if (v78 >= *(_DWORD *)(v74 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v74, v74 + 16, v78 + 1, 16);
    LODWORD(v78) = *(_DWORD *)(v74 + 8);
  }
  v79 = (uint64_t *)(*(_QWORD *)v74 + 16 * v78);
  *v79 = v75;
  v79[1] = v77;
  ++*(_DWORD *)(v74 + 8);
  if (v116 >= 0x41 && v115)
    MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
  if (v108 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v110 >= 0x41 && v109)
    MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
  if (v112 >= 0x41 && v111)
    MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
  if (v114 >= 0x41)
  {
    if (v113)
      MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
  }
  return 1;
}

const char *llvm_blake3_version()
{
  return "1.3.1";
}

double llvm_blake3_hasher_init_keyed(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  double result;

  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) = 16;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

double llvm_blake3_hasher_init_derive_key_raw(uint64_t a1, int *a2, unint64_t a3)
{
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  _OWORD v8[119];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[0] = xmmword_1C866EC4C;
  v8[1] = unk_1C866EC5C;
  memset((char *)&v8[8] + 8, 0, 376);
  v8[2] = xmmword_1C866EC4C;
  v8[3] = unk_1C866EC5C;
  memset(&v8[4], 0, 74);
  BYTE10(v8[8]) = 32;
  llvm_blake3_hasher_update((uint64_t)v8, a2, a3, (__n128)xmmword_1C866EC4C);
  llvm_blake3_hasher_finalize_seek((unsigned __int8 *)v8, 0, (char *)v7, 0x20uLL);
  v4 = v7[0];
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) = 64;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

double llvm_blake3_hasher_update(uint64_t a1, int *__src, unint64_t a3, __n128 a4)
{
  unint64_t v4;
  int *v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  size_t v12;
  _OWORD *v13;
  unsigned __int8 v14;
  int *v15;
  unint64_t v16;
  size_t v17;
  __int128 *v18;
  unsigned __int8 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t v24;
  __int128 v25;
  unsigned __int32 v26;
  unsigned __int32 v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint8x8_t v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  unint64_t i;
  int *v57;
  char v58;
  size_t v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  unsigned __int32 v62;
  unsigned __int32 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned __int32 v69;
  int v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  int *v81;
  unsigned __int8 v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 v85;
  unint64_t v86;
  unint64_t v87;
  uint64x2_t v88;
  int64x2_t v89;
  int32x2_t v90;
  int64x2_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t *v94;
  __int128 v95;
  __int128 v96;
  _OWORD *v97;
  uint8x8_t v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  unsigned __int8 v112;
  uint8x8_t v113;
  unsigned int v114;
  int v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  int v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  size_t v127;
  unsigned __int8 v128;
  char v129;
  size_t v130;
  unsigned int v131;
  unsigned __int32 v132;
  int v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  int v140;
  int *v142;
  uint64_t v143;
  unsigned __int32 v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  int *v148;
  int *v149;
  int64x2_t v150;
  _BYTE v151[32];
  _BYTE v152[40];
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  _BYTE v156[32];
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  __n128 v163;
  __int128 v164;
  _BYTE v165[40];
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  _OWORD v169[2];
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return a4.n128_f64[0];
  v4 = a3;
  v5 = __src;
  v7 = (int *)(a1 + 32);
  v8 = *(unsigned __int8 *)(a1 + 137);
  v9 = *(unsigned __int8 *)(a1 + 136);
  v142 = (int *)(a1 + 32);
  if (!(v9 + (v8 << 6)))
    goto LABEL_27;
  if (1024 - (v9 + (v8 << 6)) >= a3)
    v10 = a3;
  else
    v10 = 1024 - (v9 + (v8 << 6));
  if (!*(_BYTE *)(a1 + 136))
  {
    v16 = v10;
    v15 = __src;
LABEL_13:
    if (v16 < 0x41)
    {
      v14 = 0;
    }
    else
    {
      do
      {
        sub_1C637AC64(v7, v15, 64, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 138) | (v8 == 0));
        LOBYTE(v8) = *(_BYTE *)(a1 + 137) + 1;
        *(_BYTE *)(a1 + 137) = v8;
        v15 += 16;
        v16 -= 64;
      }
      while (v16 > 0x40);
      v14 = *(_BYTE *)(a1 + 136);
    }
    goto LABEL_18;
  }
  v11 = (int *)(a1 + 32);
  if (64 - v9 >= v10)
    v12 = v10;
  else
    v12 = 64 - v9;
  v13 = (_OWORD *)(a1 + 72);
  memcpy((void *)(a1 + 72 + v9), __src, v12);
  v14 = *(_BYTE *)(a1 + 136) + v12;
  *(_BYTE *)(a1 + 136) = v14;
  v15 = (int *)((char *)v5 + v12);
  v16 = v10 - v12;
  if (v10 != v12)
  {
    v7 = v11;
    sub_1C637AC64(v11, (int *)(a1 + 72), 64, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 138) | (*(_BYTE *)(a1 + 137) == 0));
    LOBYTE(v8) = *(_BYTE *)(a1 + 137) + 1;
    *(_BYTE *)(a1 + 137) = v8;
    *(_BYTE *)(a1 + 136) = 0;
    *v13 = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    goto LABEL_13;
  }
  v7 = v11;
LABEL_18:
  if (64 - (unint64_t)v14 >= v16)
    v17 = v16;
  else
    v17 = 64 - v14;
  v18 = (__int128 *)(a1 + 72);
  memcpy((void *)(a1 + 72 + v14), v15, v17);
  v19 = *(_BYTE *)(a1 + 136) + v17;
  *(_BYTE *)(a1 + 136) = v19;
  v4 -= v10;
  if (!v4)
    return a4.n128_f64[0];
  v20 = *((_OWORD *)v7 + 1);
  *(_OWORD *)v156 = *(_OWORD *)v7;
  *(_OWORD *)&v156[16] = v20;
  v21 = *(_OWORD *)(a1 + 88);
  v158 = *v18;
  v159 = v21;
  v22 = *(_OWORD *)(a1 + 120);
  v160 = *(_OWORD *)(a1 + 104);
  v148 = (int *)((char *)v5 + v10);
  v23 = *(_BYTE *)(a1 + 138) | (*(_BYTE *)(a1 + 137) == 0) | 2;
  v24 = *(_QWORD *)(a1 + 64);
  v161 = v22;
  v162 = v19;
  v157 = v24;
  BYTE1(v162) = v23;
  v25 = *((_OWORD *)v7 + 1);
  v163 = *(__n128 *)v156;
  v164 = v25;
  sub_1C637AC64((int *)&v163, (int *)&v158, v19, v24, v23);
  v26 = v163.n128_u32[0];
  v27 = v163.n128_u32[1];
  v28 = v163.n128_u32[2];
  v29 = v163.n128_u32[3];
  v30 = v164;
  v31 = DWORD1(v164);
  v32 = DWORD2(v164);
  v33 = HIDWORD(v164);
  v34 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 64));
  v34.i16[0] = vaddlv_u8(v34);
  v35 = v34.i32[0];
  v36 = *(unsigned __int8 *)(a1 + 144);
  if (v34.i32[0] < v36)
  {
    v37 = v164;
    v146 = v4;
    v38 = *(unsigned __int8 *)(a1 + 144);
    do
    {
      v39 = *(unsigned __int8 *)(a1 + 138);
      v40 = *(_OWORD *)(a1 + 16);
      v41 = a1 + 32 * v38;
      v163 = *(__n128 *)a1;
      v164 = v40;
      v42 = *(_OWORD *)(v41 + 97);
      *(_OWORD *)&v165[8] = *(_OWORD *)(v41 + 81);
      *(_OWORD *)&v165[24] = v42;
      v43 = *(_OWORD *)(v41 + 129);
      v166 = *(_OWORD *)(v41 + 113);
      v167 = v43;
      v168 = 64;
      *(_QWORD *)v165 = 0;
      *(_DWORD *)((char *)&v168 + 1) = v39 | 4;
      v44 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v151 = *(_OWORD *)a1;
      *(_OWORD *)&v151[16] = v44;
      sub_1C637AC64((int *)v151, (int *)&v165[8], 64, 0, v39 | 4);
      v45 = *(_DWORD *)&v151[4];
      *(_DWORD *)(v41 + 81) = *(_DWORD *)v151;
      *(_DWORD *)(v41 + 85) = v45;
      v46 = *(_DWORD *)&v151[28];
      *(_DWORD *)(v41 + 105) = *(_DWORD *)&v151[24];
      *(_OWORD *)(v41 + 89) = *(_OWORD *)&v151[8];
      *(_DWORD *)(v41 + 109) = v46;
      LOBYTE(v36) = *(_BYTE *)(a1 + 144) - 1;
      *(_BYTE *)(a1 + 144) = v36;
      v38 = v36;
    }
    while (v35 < v36);
    v4 = v146;
    v7 = v142;
    v33 = HIDWORD(v37);
    v32 = DWORD2(v37);
    v31 = DWORD1(v37);
    v30 = v37;
  }
  v47 = a1 + 32 * v36;
  *(_DWORD *)(v47 + 145) = v26;
  *(_DWORD *)(v47 + 149) = v27;
  *(_DWORD *)(v47 + 153) = v28;
  *(_DWORD *)(v47 + 157) = v29;
  *(_DWORD *)(v47 + 161) = v30;
  *(_DWORD *)(v47 + 165) = v31;
  *(_DWORD *)(v47 + 169) = v32;
  *(_DWORD *)(v47 + 173) = v33;
  *(_BYTE *)(a1 + 144) = v36 + 1;
  ++*(_QWORD *)(a1 + 64);
  *v18 = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  a4 = *(__n128 *)a1;
  v48 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a1;
  *((_OWORD *)v7 + 1) = v48;
  *(_WORD *)(a1 + 136) = 0;
  v5 = v148;
LABEL_27:
  if (v4 >= 0x401)
  {
    v49 = *(_QWORD *)(a1 + 64);
    v150 = vdupq_n_s64(2uLL);
    do
    {
      v50 = 1 << (__clz(v4 | 1) ^ 0x3Fu);
      do
      {
        v51 = v50;
        v52 = v50 - 1;
        v50 >>= 1;
      }
      while ((v52 & (v49 << 10)) != 0);
      v147 = v4;
      v149 = v5;
      if (v51 > 0x400)
      {
        v82 = *(_BYTE *)(a1 + 138);
        v83 = sub_1C5DA8EFC((uint64_t)v5, v51, (const float *)a1, v49, v82, (uint64_t)&v163);
        if ((unint64_t)(v83 - 3) <= 1)
        {
          v84 = v83;
          v85 = v82 | 4;
          do
          {
            v86 = 0;
            memset(v169, 0, sizeof(v169));
            v87 = (v84 - 2) >> 1;
            v88 = (uint64x2_t)vdupq_n_s64(v87);
            v89 = (int64x2_t)xmmword_1C64632D0;
            do
            {
              v90 = vmovn_s64((int64x2_t)vcgeq_u64(v88, (uint64x2_t)v89));
              v91 = vshlq_n_s64(v89, 6uLL);
              if ((v90.i8[0] & 1) != 0)
                *(_QWORD *)&v169[v86 / 2] = (char *)&v163 + v91.i64[0];
              if ((v90.i8[4] & 1) != 0)
                *((_QWORD *)&v169[v86 / 2] + 1) = (char *)&v163 + v91.i64[1];
              v86 += 2;
              v89 = vaddq_s64(v89, v150);
            }
            while ((v87 & 0x7FFFFFFFFFFFFFFELL) + 2 != v86);
            v92 = v87 + 1;
            sub_1C5DA927C((int *)v169, v87 + 1, 1, (const float *)a1, 0, 0, v85, 0, 0, (int64x2_t *)v156);
            v93 = ((v84 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2 >= v84;
            v84 = v87 + 1;
            if (!v93)
            {
              v94 = &v163.n128_u64[8 * v92];
              v95 = *(_OWORD *)v94;
              v96 = *((_OWORD *)v94 + 1);
              v97 = &v156[32 * v92];
              *v97 = v95;
              v97[1] = v96;
              v84 = v87 + 2;
            }
            __memcpy_chk();
          }
          while (v84 - 3 < 2);
        }
        *(__n128 *)v151 = v163;
        *(_OWORD *)&v151[16] = v164;
        *(_OWORD *)v152 = *(_OWORD *)v165;
        *(_OWORD *)&v152[16] = *(_OWORD *)&v165[16];
        v98 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 64));
        v98.i16[0] = vaddlv_u8(v98);
        v99 = v98.i32[0];
        v100 = *(unsigned __int8 *)(a1 + 144);
        v80 = v147;
        v81 = v149;
        if (v98.i32[0] < v100)
        {
          v101 = *(unsigned __int8 *)(a1 + 144);
          do
          {
            v102 = *(unsigned __int8 *)(a1 + 138);
            v103 = *(_OWORD *)(a1 + 16);
            v104 = a1 + 32 * v101;
            v163 = *(__n128 *)a1;
            v164 = v103;
            v105 = *(_OWORD *)(v104 + 97);
            *(_OWORD *)&v165[8] = *(_OWORD *)(v104 + 81);
            *(_OWORD *)&v165[24] = v105;
            v106 = *(_OWORD *)(v104 + 129);
            v166 = *(_OWORD *)(v104 + 113);
            v167 = v106;
            v168 = 64;
            *(_QWORD *)v165 = 0;
            *(_DWORD *)((char *)&v168 + 1) = v102 | 4;
            v107 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)v156 = *(_OWORD *)a1;
            *(_OWORD *)&v156[16] = v107;
            sub_1C637AC64((int *)v156, (int *)&v165[8], 64, 0, v102 | 4);
            v108 = *(_DWORD *)&v156[4];
            *(_DWORD *)(v104 + 81) = *(_DWORD *)v156;
            *(_DWORD *)(v104 + 85) = v108;
            v109 = *(_DWORD *)&v156[28];
            *(_DWORD *)(v104 + 105) = *(_DWORD *)&v156[24];
            *(_OWORD *)(v104 + 89) = *(_OWORD *)&v156[8];
            *(_DWORD *)(v104 + 109) = v109;
            LOBYTE(v100) = *(_BYTE *)(a1 + 144) - 1;
            *(_BYTE *)(a1 + 144) = v100;
            v101 = v100;
          }
          while (v99 < v100);
        }
        v110 = a1 + 32 * v100;
        v111 = *(_OWORD *)&v151[16];
        *(_OWORD *)(v110 + 145) = *(_OWORD *)v151;
        *(_OWORD *)(v110 + 161) = v111;
        v112 = v100 + 1;
        *(_BYTE *)(a1 + 144) = v112;
        v113 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(a1 + 64) + (v51 >> 11)));
        v113.i16[0] = vaddlv_u8(v113);
        v114 = v113.i32[0];
        if (v113.i32[0] < v112)
        {
          v115 = v112;
          do
          {
            v116 = *(unsigned __int8 *)(a1 + 138);
            v117 = *(_OWORD *)(a1 + 16);
            v118 = a1 + 32 * v115;
            v163 = *(__n128 *)a1;
            v164 = v117;
            v119 = *(_OWORD *)(v118 + 97);
            *(_OWORD *)&v165[8] = *(_OWORD *)(v118 + 81);
            *(_OWORD *)&v165[24] = v119;
            v120 = *(_OWORD *)(v118 + 129);
            v166 = *(_OWORD *)(v118 + 113);
            v167 = v120;
            v168 = 64;
            *(_QWORD *)v165 = 0;
            *(_DWORD *)((char *)&v168 + 1) = v116 | 4;
            v121 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)v156 = *(_OWORD *)a1;
            *(_OWORD *)&v156[16] = v121;
            sub_1C637AC64((int *)v156, (int *)&v165[8], 64, 0, v116 | 4);
            v122 = *(_DWORD *)&v156[4];
            *(_DWORD *)(v118 + 81) = *(_DWORD *)v156;
            *(_DWORD *)(v118 + 85) = v122;
            v123 = *(_DWORD *)&v156[28];
            *(_DWORD *)(v118 + 105) = *(_DWORD *)&v156[24];
            *(_OWORD *)(v118 + 89) = *(_OWORD *)&v156[8];
            *(_DWORD *)(v118 + 109) = v123;
            v112 = *(_BYTE *)(a1 + 144) - 1;
            *(_BYTE *)(a1 + 144) = v112;
            v115 = v112;
          }
          while (v114 < v112);
        }
        v124 = a1 + 32 * v112;
        a4.n128_u64[0] = *(_QWORD *)v152;
        v125 = *(_OWORD *)&v152[16];
        *(_OWORD *)(v124 + 145) = *(_OWORD *)v152;
        *(_OWORD *)(v124 + 161) = v125;
        *(_BYTE *)(a1 + 144) = v112 + 1;
      }
      else
      {
        v53 = 0;
        v54 = *(_BYTE *)(a1 + 138);
        v55 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v156 = *(_OWORD *)a1;
        *(_OWORD *)&v156[16] = v55;
        v158 = 0u;
        v159 = 0u;
        v160 = 0u;
        v161 = 0u;
        v162 = 0;
        BYTE2(v162) = v54;
        v157 = v49;
        i = v51;
        v57 = v5;
        if (v51 >= 0x41)
        {
          v58 = 0;
          v57 = v5;
          for (i = v51; i > 0x40; i -= 64)
          {
            sub_1C637AC64((int *)v156, v57, 64, v157, BYTE2(v162) | (v58 == 0));
            v58 = ++BYTE1(v162);
            v57 += 16;
          }
          v53 = v162;
        }
        if (64 - v53 >= i)
          v59 = i;
        else
          v59 = 64 - v53;
        memcpy((char *)&v158 + v53, v57, v59);
        *(_OWORD *)v151 = *(_OWORD *)v156;
        *(_OWORD *)&v151[16] = *(_OWORD *)&v156[16];
        *(_OWORD *)&v152[8] = v158;
        *(_OWORD *)&v152[24] = v159;
        v153 = v160;
        v154 = v161;
        LOBYTE(v162) = v162 + v59;
        v155 = v162;
        *(_QWORD *)v152 = v157;
        *(_DWORD *)((char *)&v155 + 1) = (BYTE2(v162) | (BYTE1(v162) == 0)) | 2;
        v163 = *(__n128 *)v156;
        v164 = *(_OWORD *)&v156[16];
        sub_1C637AC64((int *)&v163, (int *)&v152[8], v162, v157, *(int *)((char *)&v155 + 1));
        v60 = v163.n128_u32[0];
        v61 = v163.n128_u32[1];
        v62 = v163.n128_u32[2];
        v63 = v163.n128_u32[3];
        v64 = v164;
        v65 = DWORD1(v164);
        v66 = DWORD2(v164);
        v67 = HIDWORD(v164);
        a4.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v157);
        a4.n128_u16[0] = vaddlv_u8((uint8x8_t)a4.n128_u64[0]);
        v68 = a4.n128_u32[0];
        v69 = *(unsigned __int8 *)(a1 + 144);
        if (a4.n128_u32[0] < v69)
        {
          v143 = *(uint64_t *)((char *)v163.n128_i64 + 4);
          v144 = v163.n128_u32[3];
          v145 = v164;
          v70 = *(unsigned __int8 *)(a1 + 144);
          do
          {
            v71 = *(unsigned __int8 *)(a1 + 138);
            v72 = *(_OWORD *)(a1 + 16);
            v73 = a1 + 32 * v70;
            v163 = *(__n128 *)a1;
            v164 = v72;
            v74 = *(_OWORD *)(v73 + 97);
            *(_OWORD *)&v165[8] = *(_OWORD *)(v73 + 81);
            *(_OWORD *)&v165[24] = v74;
            v75 = *(_OWORD *)(v73 + 129);
            v166 = *(_OWORD *)(v73 + 113);
            v167 = v75;
            v168 = 64;
            *(_QWORD *)v165 = 0;
            *(_DWORD *)((char *)&v168 + 1) = v71 | 4;
            v76 = *(_OWORD *)(a1 + 16);
            v169[0] = *(_OWORD *)a1;
            v169[1] = v76;
            sub_1C637AC64((int *)v169, (int *)&v165[8], 64, 0, v71 | 4);
            v77 = DWORD1(v169[0]);
            *(_DWORD *)(v73 + 81) = v169[0];
            *(_DWORD *)(v73 + 85) = v77;
            v78 = HIDWORD(v169[1]);
            *(_DWORD *)(v73 + 105) = DWORD2(v169[1]);
            a4.n128_u64[0] = *((_QWORD *)&v169[0] + 1);
            *(_OWORD *)(v73 + 89) = *(_OWORD *)((char *)v169 + 8);
            *(_DWORD *)(v73 + 109) = v78;
            LOBYTE(v69) = *(_BYTE *)(a1 + 144) - 1;
            *(_BYTE *)(a1 + 144) = v69;
            v70 = v69;
          }
          while (v68 < v69);
          v66 = DWORD2(v145);
          v67 = HIDWORD(v145);
          v64 = v145;
          v65 = DWORD1(v145);
          v62 = HIDWORD(v143);
          v63 = v144;
          v61 = v143;
        }
        v79 = a1 + 32 * v69;
        *(_DWORD *)(v79 + 145) = v60;
        *(_DWORD *)(v79 + 149) = v61;
        *(_DWORD *)(v79 + 153) = v62;
        *(_DWORD *)(v79 + 157) = v63;
        *(_DWORD *)(v79 + 161) = v64;
        *(_DWORD *)(v79 + 165) = v65;
        *(_DWORD *)(v79 + 169) = v66;
        *(_DWORD *)(v79 + 173) = v67;
        *(_BYTE *)(a1 + 144) = v69 + 1;
        v80 = v147;
        v81 = v149;
      }
      v49 = *(_QWORD *)(a1 + 64) + (v51 >> 10);
      *(_QWORD *)(a1 + 64) = v49;
      v5 = (int *)((char *)v81 + v51);
      v4 = v80 - v51;
    }
    while (v4 > 0x400);
  }
  if (v4)
  {
    v126 = *(unsigned __int8 *)(a1 + 136);
    if (*(_BYTE *)(a1 + 136))
    {
      if (64 - v126 >= v4)
        v127 = v4;
      else
        v127 = 64 - v126;
      memcpy((void *)(a1 + 72 + v126), v5, v127);
      v128 = *(_BYTE *)(a1 + 136) + v127;
      *(_BYTE *)(a1 + 136) = v128;
      v5 = (int *)((char *)v5 + v127);
      v4 -= v127;
      if (!v4)
        goto LABEL_75;
      sub_1C637AC64(v142, (int *)(a1 + 72), 64, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 138) | (*(_BYTE *)(a1 + 137) == 0));
      ++*(_BYTE *)(a1 + 137);
      *(_BYTE *)(a1 + 136) = 0;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
    }
    if (v4 < 0x41)
    {
      v128 = 0;
    }
    else
    {
      v129 = *(_BYTE *)(a1 + 137);
      do
      {
        sub_1C637AC64(v142, v5, 64, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 138) | (v129 == 0));
        v129 = *(_BYTE *)(a1 + 137) + 1;
        *(_BYTE *)(a1 + 137) = v129;
        v5 += 16;
        v4 -= 64;
      }
      while (v4 > 0x40);
      v128 = *(_BYTE *)(a1 + 136);
    }
LABEL_75:
    if (64 - (unint64_t)v128 >= v4)
      v130 = v4;
    else
      v130 = 64 - v128;
    memcpy((void *)(a1 + v128 + 72), v5, v130);
    *(_BYTE *)(a1 + 136) += v130;
    a4.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)(a1 + 64));
    a4.n128_u16[0] = vaddlv_u8((uint8x8_t)a4.n128_u64[0]);
    v131 = a4.n128_u32[0];
    v132 = *(unsigned __int8 *)(a1 + 144);
    if (a4.n128_u32[0] < v132)
    {
      do
      {
        v133 = *(unsigned __int8 *)(a1 + 138);
        v134 = *(_OWORD *)(a1 + 16);
        v135 = a1 + 32 * (int)v132;
        v163 = *(__n128 *)a1;
        v164 = v134;
        v136 = *(_OWORD *)(v135 + 97);
        *(_OWORD *)&v165[8] = *(_OWORD *)(v135 + 81);
        *(_OWORD *)&v165[24] = v136;
        v137 = *(_OWORD *)(v135 + 129);
        v166 = *(_OWORD *)(v135 + 113);
        v167 = v137;
        v168 = 64;
        *(_QWORD *)v165 = 0;
        *(_DWORD *)((char *)&v168 + 1) = v133 | 4;
        v138 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v156 = *(_OWORD *)a1;
        *(_OWORD *)&v156[16] = v138;
        sub_1C637AC64((int *)v156, (int *)&v165[8], 64, 0, v133 | 4);
        v139 = *(_DWORD *)&v156[4];
        *(_DWORD *)(v135 + 81) = *(_DWORD *)v156;
        *(_DWORD *)(v135 + 85) = v139;
        v140 = *(_DWORD *)&v156[28];
        *(_DWORD *)(v135 + 105) = *(_DWORD *)&v156[24];
        a4.n128_u64[0] = *(_QWORD *)&v156[8];
        *(_OWORD *)(v135 + 89) = *(_OWORD *)&v156[8];
        *(_DWORD *)(v135 + 109) = v140;
        LOBYTE(v140) = *(_BYTE *)(a1 + 144) - 1;
        *(_BYTE *)(a1 + 144) = v140;
        v132 = v140;
      }
      while (v131 < v140);
    }
  }
  return a4.n128_f64[0];
}

double llvm_blake3_hasher_init_derive_key(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return llvm_blake3_hasher_init_derive_key_raw(a1, (int *)__s, v4);
}

unsigned __int8 *llvm_blake3_hasher_finalize_seek(unsigned __int8 *result, unint64_t a2, char *a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int128 v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[5];
  _BYTE v33[64];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return result;
  v4 = a4;
  v7 = result;
  v8 = result[144];
  if (result[144])
  {
    v31 = 0u;
    memset(v32, 0, sizeof(v32));
    v30 = 0u;
    v9 = result[137];
    v10 = result[136];
    if (v10 + (v9 << 6))
    {
      v14 = *((_QWORD *)result + 8);
      v11 = result[138] | ((_DWORD)v9 == 0) | 2;
      *(_DWORD *)((char *)&v32[4] + 10) = 0;
      HIWORD(v32[4]) = 0;
      v22 = *((_OWORD *)result + 3);
      v30 = *((_OWORD *)result + 2);
      v31 = v22;
      *(_OWORD *)((char *)v32 + 8) = *(_OWORD *)(result + 72);
      *(_OWORD *)((char *)&v32[1] + 8) = *(_OWORD *)(result + 88);
      *(_OWORD *)((char *)&v32[2] + 8) = *(_OWORD *)(result + 104);
      *(_OWORD *)((char *)&v32[3] + 8) = *(_OWORD *)(result + 120);
      *(_QWORD *)&v32[0] = v14;
      BYTE8(v32[4]) = v10;
      BYTE9(v32[4]) = v11;
    }
    else
    {
      v11 = result[138] | 4;
      *(_DWORD *)((char *)&v32[4] + 10) = 0;
      HIWORD(v32[4]) = 0;
      v12 = *((_OWORD *)result + 1);
      v30 = *(_OWORD *)result;
      v31 = v12;
      LOBYTE(v10) = 64;
      BYTE8(v32[4]) = 64;
      BYTE9(v32[4]) = v11;
      v8 -= 2;
      v13 = &result[32 * v8];
      *(_OWORD *)((char *)v32 + 8) = *(_OWORD *)(v13 + 145);
      *(_OWORD *)((char *)&v32[1] + 8) = *(_OWORD *)(v13 + 161);
      *(_OWORD *)((char *)&v32[2] + 8) = *(_OWORD *)(v13 + 177);
      *(_OWORD *)((char *)&v32[3] + 8) = *(_OWORD *)(v13 + 193);
      if (!v8)
        goto LABEL_15;
      v14 = 0;
    }
    v23 = 32 * v8 + 113;
    do
    {
      --v8;
      v28 = *(_OWORD *)&v7[v23];
      v29 = *(_OWORD *)&v7[v23 + 16];
      *(_OWORD *)v33 = v30;
      *(_OWORD *)&v33[16] = v31;
      sub_1C637AC64((int *)v33, (int *)v32 + 2, v10, v14, v11);
      v14 = 0;
      DWORD2(v32[2]) = *(_DWORD *)v33;
      WORD6(v32[2]) = *(_WORD *)&v33[4];
      *(_QWORD *)((char *)&v32[2] + 14) = *(_QWORD *)&v33[6];
      *(_DWORD *)((char *)&v32[3] + 6) = *(_DWORD *)&v33[14];
      *(_QWORD *)((char *)&v32[3] + 10) = *(_QWORD *)&v33[18];
      *(_DWORD *)((char *)&v32[4] + 2) = *(_DWORD *)&v33[26];
      WORD3(v32[4]) = *(_WORD *)&v33[30];
      v11 = v7[138] | 4;
      *(_DWORD *)((char *)&v32[4] + 10) = 0;
      HIWORD(v32[4]) = 0;
      v24 = *((_OWORD *)v7 + 1);
      v30 = *(_OWORD *)v7;
      v31 = v24;
      *(_QWORD *)&v32[0] = 0;
      *(_OWORD *)((char *)v32 + 8) = v28;
      *(_OWORD *)((char *)&v32[1] + 8) = v29;
      LOBYTE(v10) = 64;
      BYTE8(v32[4]) = 64;
      v23 -= 32;
      BYTE9(v32[4]) = v11;
    }
    while (v8);
LABEL_15:
    v25 = a2 >> 6;
    v26 = a2 & 0x3F;
    do
    {
      sub_1C637BA8C(&v30, (int *)v32 + 2, BYTE8(v32[4]), v25, BYTE9(v32[4]) | 8, (uint64_t)v33);
      if (v4 >= 64 - v26)
        v27 = 64 - v26;
      else
        v27 = v4;
      result = (unsigned __int8 *)memcpy(a3, &v33[v26], v27);
      v26 = 0;
      a3 += v27;
      ++v25;
      v4 -= v27;
    }
    while (v4);
    return result;
  }
  v15 = result[138] | (result[137] == 0) | 2;
  v16 = result[136];
  v17 = *((_QWORD *)result + 8);
  *((_QWORD *)&v32[4] + 1) = 0;
  v18 = *((_OWORD *)result + 3);
  v30 = *((_OWORD *)result + 2);
  v31 = v18;
  *(_OWORD *)((char *)v32 + 8) = *(_OWORD *)(result + 72);
  *(_OWORD *)((char *)&v32[1] + 8) = *(_OWORD *)(result + 88);
  *(_OWORD *)((char *)&v32[2] + 8) = *(_OWORD *)(result + 104);
  *(_OWORD *)((char *)&v32[3] + 8) = *(_OWORD *)(result + 120);
  BYTE8(v32[4]) = v16;
  v19 = a2 >> 6;
  *(_QWORD *)&v32[0] = v17;
  v20 = a2 & 0x3F;
  BYTE9(v32[4]) = v15;
  do
  {
    sub_1C637BA8C(&v30, (int *)v32 + 2, BYTE8(v32[4]), v19, BYTE9(v32[4]) | 8, (uint64_t)v33);
    if (v4 >= 64 - v20)
      v21 = 64 - v20;
    else
      v21 = v4;
    result = (unsigned __int8 *)memcpy(a3, &v33[v20], v21);
    v20 = 0;
    a3 += v21;
    ++v19;
    v4 -= v21;
  }
  while (v4);
  return result;
}

double llvm_blake3_hasher_reset(uint64_t a1)
{
  __int128 v1;
  double result;

  v1 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 48) = v1;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_1C5DA8EFC(uint64_t a1, unint64_t a2, const float *a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  int *v31;
  char v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  size_t v38;
  uint64_t v39;
  int v40;
  int v41;
  __int128 v43;
  __int128 v44;
  _BYTE v45[40];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[4];
  uint64_t v53;
  _OWORD v54[2];
  _BYTE v55[32];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x1000)
  {
    memset(v54, 0, sizeof(v54));
    v18 = 0;
    if (a2 < 0x400)
    {
      v17 = 0;
      v22 = a2;
    }
    else
    {
      v19 = (a2 - 1024) >> 10;
      v20 = v19 + 1;
      v21 = v54;
      do
      {
        *v21++ = a1 + v18;
        v18 += 1024;
        --v20;
      }
      while (v20);
      v17 = v19 + 1;
      v22 = a2 - v18;
    }
    sub_1C5DA927C((int *)v54, v17, 16, a3, a4, 1u, a5, 1, 2, (int64x2_t *)a6);
    if (v18 < a2)
    {
      v29 = *(_OWORD *)a3;
      v30 = *((_OWORD *)a3 + 1);
      v48 = 0;
      v43 = v29;
      v44 = v30;
      BYTE2(v48) = a5;
      memset(&v45[8], 0, 32);
      v46 = 0u;
      v47 = 0u;
      v31 = (int *)(a1 + v18);
      *(_QWORD *)v45 = v17 + a4;
      if (v22 < 0x41)
      {
        v33 = 0;
      }
      else
      {
        v32 = 0;
        do
        {
          sub_1C637AC64((int *)&v43, v31, 64, *(uint64_t *)v45, BYTE2(v48) | (v32 == 0));
          v32 = ++BYTE1(v48);
          v31 += 16;
          v22 -= 64;
        }
        while (v22 > 0x40);
        v33 = v48;
      }
      if (64 - v33 >= v22)
        v38 = v22;
      else
        v38 = 64 - v33;
      memcpy(&v45[v33 + 8], v31, v38);
      v49 = v43;
      v50 = v44;
      v52[0] = *(_OWORD *)&v45[8];
      v52[1] = *(_OWORD *)&v45[24];
      v52[2] = v46;
      v52[3] = v47;
      LOBYTE(v48) = v48 + v38;
      v53 = v48;
      v51 = *(_QWORD *)v45;
      *(_DWORD *)((char *)&v53 + 1) = (BYTE2(v48) | (BYTE1(v48) == 0)) | 2;
      v39 = a6 + 32 * v17;
      *(_OWORD *)v55 = v43;
      *(_OWORD *)&v55[16] = v44;
      sub_1C637AC64((int *)v55, (int *)v52, v48, *(uint64_t *)v45, *(int *)((char *)&v53 + 1));
      v40 = *(_DWORD *)&v55[4];
      *(_DWORD *)v39 = *(_DWORD *)v55;
      *(_DWORD *)(v39 + 4) = v40;
      *(_OWORD *)(v39 + 8) = *(_OWORD *)&v55[8];
      v41 = *(_DWORD *)&v55[28];
      *(_DWORD *)(v39 + 24) = *(_DWORD *)&v55[24];
      *(_DWORD *)(v39 + 28) = v41;
      goto LABEL_26;
    }
  }
  else
  {
    v12 = a1 + (1024 << (__clz(((a2 - 1) >> 10) | 1) ^ 0x3Fu));
    v13 = sub_1C5DA8EFC(a1);
    v14 = sub_1C5DA8EFC(v12);
    if (v13 == 1)
    {
      v15 = v44;
      *(_OWORD *)a6 = v43;
      *(_OWORD *)(a6 + 16) = v15;
      v16 = *(_OWORD *)&v45[16];
      *(_OWORD *)(a6 + 32) = *(_OWORD *)v45;
      *(_OWORD *)(a6 + 48) = v16;
      return 2;
    }
    v23 = v14 + v13;
    v49 = 0u;
    v50 = 0u;
    if ((unint64_t)(v14 + v13) < 2)
    {
      v17 = 0;
      v26 = 0;
    }
    else
    {
      v24 = (unint64_t)(v14 + v13 - 2) >> 1;
      v25 = v24 + 1;
      v26 = 2 * v24 + 2;
      v27 = &v49;
      v28 = &v43;
      do
      {
        *(_QWORD *)v27 = v28;
        v27 = (__int128 *)((char *)v27 + 8);
        v28 += 4;
        --v25;
      }
      while (v25);
      v17 = v24 + 1;
    }
    sub_1C5DA927C((int *)&v49, v17, 1, a3, 0, 0, a5 | 4, 0, 0, (int64x2_t *)a6);
    if (v26 < v23)
    {
      v34 = &v43 + 4 * v17;
      v35 = *v34;
      v36 = v34[1];
      v37 = (_OWORD *)(a6 + 32 * v17);
      *v37 = v35;
      v37[1] = v36;
LABEL_26:
      ++v17;
    }
  }
  return v17;
}

int *sub_1C5DA927C(int *result, unint64_t a2, uint64_t a3, const float *a4, uint64_t a5, unsigned int a6, unsigned __int8 a7, char a8, char a9, int64x2_t *a10)
{
  unint64_t v12;
  int *v13;
  uint64_t v15;
  uint64_t v16;
  const float *v17;
  int32x4_t v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  const float *v22;
  int32x4_t v23;
  const float *v24;
  int32x4_t v25;
  const float *v26;
  int32x4_t v27;
  const float *v28;
  int32x4_t v29;
  const float *v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  char v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int64x2_t v54;
  int32x4_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int64x2_t v60;
  int32x4_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int64x2_t v67;
  int32x4_t v68;
  int64x2_t v69;
  int32x4_t v70;
  int64x2_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int64x2_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int32x4_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  int32x4_t v538;
  int32x4_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int32x4_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int32x4_t v565;
  int32x4_t v566;
  int32x4_t v567;
  int32x4_t v568;
  int32x4_t v569;
  int32x4_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int32x4_t v579;
  int32x4_t v580;
  int32x4_t v581;
  int32x4_t v582;
  int32x4_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  int32x4_t v588;
  int32x4_t v589;
  int32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int32x4_t v597;
  int32x4_t v598;
  int32x4_t v599;
  int32x4_t v600;
  int32x4_t v601;
  int32x4_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int32x4_t v605;
  int32x4_t v606;
  int32x4_t v607;
  int32x4_t v608;
  int32x4_t v609;
  int32x4_t v610;
  int32x4_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int32x4_t v614;
  int32x4_t v615;
  int32x4_t v616;
  int32x4_t v617;
  int32x4_t v618;
  int32x4_t v619;
  int32x4_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t v640;
  int32x4_t v641;
  int32x4_t v642;
  int32x4_t v643;
  int32x4_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int32x4_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int32x4_t v661;
  int32x4_t v662;
  int32x4_t v663;
  int32x4_t v664;
  int32x4_t v665;
  int32x4_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  int32x4_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int32x4_t v677;
  int32x4_t v678;
  int32x4_t v679;
  int32x4_t v680;
  int32x4_t v681;
  int32x4_t v682;
  int32x4_t v683;
  int32x4_t v684;
  int32x4_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int32x4_t v688;
  int32x4_t v689;
  int32x4_t v690;
  int32x4_t v691;
  int32x4_t v692;
  int32x4_t v693;
  int32x4_t v694;
  int32x4_t v695;
  int32x4_t v696;
  int32x4_t v697;
  int32x4_t v698;
  int32x4_t v699;
  int32x4_t v700;
  int32x4_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int32x4_t v709;
  int32x4_t v710;
  int32x4_t v711;
  int32x4_t v712;
  int32x4_t v713;
  int32x4_t v714;
  int32x4_t v715;
  int32x4_t v716;
  int32x4_t v717;
  int32x4_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int32x4_t v721;
  int32x4_t v722;
  int32x4_t v723;
  int32x4_t v724;
  int32x4_t v725;
  int32x4_t v726;
  int32x4_t v727;
  int32x4_t v728;
  int32x4_t v729;
  int32x4_t v730;
  int32x4_t v731;
  int8x16_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int8x16_t v735;
  int32x4_t v736;
  int32x4_t v737;
  int32x4_t v738;
  int32x4_t v739;
  int32x4_t v740;
  int32x4_t v741;
  int32x4_t v742;
  int32x4_t v743;
  int8x16_t v744;
  int8x16_t v745;
  int8x16_t v746;
  int8x16_t v747;
  int32x4_t v748;
  int32x4_t v749;
  int32x4_t v750;
  int32x4_t v751;
  int64x2_t v752;
  int64x2_t v753;
  int64x2_t v754;
  int64x2_t v755;
  int64x2_t v756;
  int64x2_t v757;
  int64x2_t v758;
  int64x2_t v759;
  int64x2_t v760;
  int64x2_t v761;
  int64x2_t v762;
  int64x2_t v763;
  unsigned __int8 v764;
  int *v765;
  int64x2_t v766;
  uint64_t v767;
  uint64_t v768;
  unsigned __int8 i;
  uint64_t v770;
  int64x2_t v771;
  uint64_t v772;
  int32x4_t v774;
  int32x4_t v775;
  int32x4_t v776;
  int32x4_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int32x4_t v780;
  int32x4_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int64x2_t v786;
  int64x2_t v787;
  uint64_t v788;

  v12 = a2;
  v13 = result;
  v788 = *MEMORY[0x1E0C80C00];
  v772 = a6;
  if (a2 >= 4)
  {
    v15 = 2;
    if (!a6)
      v15 = 0;
    v16 = 3;
    if (!a6)
      v16 = 0;
    v776 = vdupq_n_s32(0x6A09E667u);
    v777 = vdupq_n_s32(0xA54FF53A);
    v774 = vdupq_n_s32(0x3C6EF372u);
    v775 = vdupq_n_s32(0xBB67AE85);
    do
    {
      v17 = a4;
      v18 = (int32x4_t)vld1q_dup_f32(v17++);
      v19 = (int32x4_t)vld1q_dup_f32(v17);
      v20 = a4 + 2;
      v21 = (int32x4_t)vld1q_dup_f32(v20);
      v22 = a4 + 3;
      v23 = (int32x4_t)vld1q_dup_f32(v22);
      v24 = a4 + 4;
      v25 = (int32x4_t)vld1q_dup_f32(v24);
      v26 = a4 + 5;
      v27 = (int32x4_t)vld1q_dup_f32(v26);
      v28 = a4 + 6;
      v29 = (int32x4_t)vld1q_dup_f32(v28);
      v30 = a4 + 7;
      v31 = (int32x4_t)vld1q_dup_f32(v30);
      if (a3)
      {
        v32.i64[0] = a5;
        v32.i64[1] = a5 + a6;
        v33.i32[0] = a5;
        v33.i32[1] = a5 + a6;
        v33.i32[2] = a5 + v15;
        v34.i64[0] = a5 + v15;
        v34.i64[1] = a5 + v16;
        v33.i32[3] = a5 + v16;
        v779 = v33;
        v778 = (int8x16_t)vuzp2q_s32(v32, v34);
        v35 = *((_QWORD *)v13 + 1) + 32;
        v36 = *(_QWORD *)v13 + 32;
        v37 = *((_QWORD *)v13 + 3) + 32;
        v38 = *((_QWORD *)v13 + 2) + 32;
        v39 = a3;
        v40 = a8 | a7;
        do
        {
          if (--v39)
            v41 = 0;
          else
            v41 = a9;
          v42 = *(int32x4_t *)(v36 - 32);
          v43 = *(int32x4_t *)(v36 - 16);
          v44 = *(int32x4_t *)(v35 - 32);
          v45 = *(int32x4_t *)(v35 - 16);
          v46 = *(int32x4_t *)(v38 - 32);
          v47 = *(int32x4_t *)(v38 - 16);
          v48 = *(int32x4_t *)(v37 - 32);
          v49 = *(int32x4_t *)(v37 - 16);
          v50 = *(int32x4_t *)(v36 + 16);
          v51 = *(int32x4_t *)(v35 + 16);
          v52 = *(int32x4_t *)(v38 + 16);
          v53 = *(int32x4_t *)(v37 + 16);
          v54 = (int64x2_t)vtrn1q_s32(v42, v44);
          v55 = vtrn2q_s32(v42, v44);
          v56 = (int64x2_t)vtrn1q_s32(v46, v48);
          v57 = (int64x2_t)vtrn2q_s32(v46, v48);
          v58 = (int32x4_t)vzip2q_s64(v54, v56);
          v59 = (int32x4_t)vzip2q_s64((int64x2_t)v55, v57);
          v60 = (int64x2_t)vtrn1q_s32(v43, v45);
          v61 = vtrn2q_s32(v43, v45);
          v62 = (int64x2_t)vtrn1q_s32(v47, v49);
          v63 = (int64x2_t)vtrn2q_s32(v47, v49);
          v780 = (int32x4_t)vzip2q_s64(v60, v62);
          v54.i64[1] = v56.i64[0];
          v64 = (int32x4_t)v54;
          v60.i64[1] = v62.i64[0];
          v65 = (int32x4_t)v60;
          v66 = (int32x4_t)vzip2q_s64((int64x2_t)v61, v63);
          v55.i64[1] = v57.i64[0];
          v67 = (int64x2_t)vtrn1q_s32(*(int32x4_t *)v36, *(int32x4_t *)v35);
          v68 = vtrn2q_s32(*(int32x4_t *)v36, *(int32x4_t *)v35);
          v69 = (int64x2_t)vtrn1q_s32(*(int32x4_t *)v38, *(int32x4_t *)v37);
          v61.i64[1] = v63.i64[0];
          v70 = v61;
          v781 = v61;
          v782 = v64;
          v71 = (int64x2_t)vtrn2q_s32(*(int32x4_t *)v38, *(int32x4_t *)v37);
          v72 = (int32x4_t)vzip2q_s64(v67, v69);
          v61.i64[0] = v67.i64[0];
          v73 = (int32x4_t)vzip2q_s64((int64x2_t)v68, v71);
          v61.i64[1] = v69.i64[0];
          v74 = vtrn1q_s32(v50, v51);
          v75 = vtrn2q_s32(v50, v51);
          v76 = (int8x16_t)vtrn1q_s32(v52, v53);
          v68.i64[1] = v71.i64[0];
          v77 = (int64x2_t)vtrn2q_s32(v52, v53);
          v783 = (int32x4_t)vzip2q_s64((int64x2_t)v74, (int64x2_t)v76);
          v78 = (int32x4_t)vzip2q_s64((int64x2_t)v75, v77);
          v74.i64[1] = v76.i64[0];
          v75.i64[1] = v77.i64[0];
          v79 = vaddq_s32(vaddq_s32(v18, v25), v64);
          v80 = v64;
          v81 = vaddq_s32(vaddq_s32(v19, v27), v58);
          v82 = vaddq_s32(vaddq_s32(v21, v29), v65);
          v83 = v65;
          v84 = vaddq_s32(vaddq_s32(v23, v31), v780);
          v85 = (int32x4_t)veorq_s8((int8x16_t)v79, v779);
          v86 = (int32x4_t)veorq_s8((int8x16_t)v81, v778);
          v76.i64[0] = 0x4000000040;
          v76.i64[1] = 0x4000000040;
          v87 = (int32x4_t)veorq_s8((int8x16_t)v82, v76);
          v88 = (int32x4_t)veorq_s8((int8x16_t)v84, (int8x16_t)vdupq_n_s32((v41 | v40)));
          v89 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v85, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v85, 0x10uLL));
          v90 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v86, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v86, 0x10uLL));
          v91 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v87, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v87, 0x10uLL));
          v92 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v88, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v88, 0x10uLL));
          v93 = vaddq_s32(v89, v776);
          v94 = vaddq_s32(v90, v775);
          v95 = vaddq_s32(v91, v774);
          v96 = (int32x4_t)veorq_s8((int8x16_t)v93, (int8x16_t)v25);
          v97 = (int32x4_t)veorq_s8((int8x16_t)v94, (int8x16_t)v27);
          v98 = (int32x4_t)veorq_s8((int8x16_t)v95, (int8x16_t)v29);
          v99 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v96, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v96, 0xCuLL));
          v100 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v97, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v97, 0xCuLL));
          v101 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v98, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v98, 0xCuLL));
          v102 = vaddq_s32(v92, v777);
          v103 = (int32x4_t)veorq_s8((int8x16_t)v102, (int8x16_t)v31);
          v104 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v103, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v103, 0xCuLL));
          v105 = vaddq_s32(vaddq_s32(v79, v55), v99);
          v106 = (int32x4_t)veorq_s8((int8x16_t)v105, (int8x16_t)v89);
          v107 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v106, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v106, 8uLL));
          v108 = vaddq_s32(vaddq_s32(v81, v59), v100);
          v109 = (int32x4_t)veorq_s8((int8x16_t)v108, (int8x16_t)v90);
          v110 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v109, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v109, 8uLL));
          v111 = vaddq_s32(vaddq_s32(v82, v70), v101);
          v112 = (int32x4_t)veorq_s8((int8x16_t)v111, (int8x16_t)v91);
          v113 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v112, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v112, 8uLL));
          v114 = vaddq_s32(vaddq_s32(v84, v66), v104);
          v115 = (int32x4_t)veorq_s8((int8x16_t)v114, (int8x16_t)v92);
          v116 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v115, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v115, 8uLL));
          v117 = vaddq_s32(v107, v93);
          v118 = (int32x4_t)veorq_s8((int8x16_t)v117, (int8x16_t)v99);
          v119 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v118, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v118, 7uLL));
          v120 = vaddq_s32(v110, v94);
          v121 = (int32x4_t)veorq_s8((int8x16_t)v120, (int8x16_t)v100);
          v122 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v121, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v121, 7uLL));
          v123 = vaddq_s32(v113, v95);
          v124 = (int32x4_t)veorq_s8((int8x16_t)v123, (int8x16_t)v101);
          v125 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v124, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v124, 7uLL));
          v126 = vaddq_s32(v116, v102);
          v127 = (int32x4_t)veorq_s8((int8x16_t)v126, (int8x16_t)v104);
          v128 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v127, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v127, 7uLL));
          v129 = vaddq_s32(vaddq_s32(v61, v105), v122);
          v130 = (int32x4_t)veorq_s8((int8x16_t)v116, (int8x16_t)v129);
          v131 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v130, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v130, 0x10uLL));
          v132 = vaddq_s32(vaddq_s32(v72, v108), v125);
          v133 = (int32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)v107);
          v134 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v133, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v133, 0x10uLL));
          v135 = vaddq_s32(vaddq_s32(v74, v111), v128);
          v136 = (int32x4_t)veorq_s8((int8x16_t)v135, (int8x16_t)v110);
          v137 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v136, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v136, 0x10uLL));
          v138 = vaddq_s32(vaddq_s32(v783, v114), v119);
          v139 = (int32x4_t)veorq_s8((int8x16_t)v138, (int8x16_t)v113);
          v140 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v139, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v139, 0x10uLL));
          v141 = vaddq_s32(v131, v123);
          v142 = (int32x4_t)veorq_s8((int8x16_t)v141, (int8x16_t)v122);
          v143 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v142, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v142, 0xCuLL));
          v144 = vaddq_s32(v134, v126);
          v145 = (int32x4_t)veorq_s8((int8x16_t)v144, (int8x16_t)v125);
          v146 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v145, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v145, 0xCuLL));
          v147 = vaddq_s32(v137, v117);
          v148 = (int32x4_t)veorq_s8((int8x16_t)v147, (int8x16_t)v128);
          v149 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v148, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v148, 0xCuLL));
          v150 = vaddq_s32(v140, v120);
          v151 = (int32x4_t)veorq_s8((int8x16_t)v150, (int8x16_t)v119);
          v152 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v151, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v151, 0xCuLL));
          v153 = vaddq_s32(vaddq_s32(v129, v68), v143);
          v154 = (int32x4_t)veorq_s8((int8x16_t)v153, (int8x16_t)v131);
          v155 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v154, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v154, 8uLL));
          v156 = vaddq_s32(vaddq_s32(v132, v73), v146);
          v157 = (int32x4_t)veorq_s8((int8x16_t)v156, (int8x16_t)v134);
          v158 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v157, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v157, 8uLL));
          v159 = vaddq_s32(vaddq_s32(v135, v75), v149);
          v160 = (int32x4_t)veorq_s8((int8x16_t)v159, (int8x16_t)v137);
          v161 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v160, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v160, 8uLL));
          v162 = vaddq_s32(vaddq_s32(v138, v78), v152);
          v163 = (int32x4_t)veorq_s8((int8x16_t)v162, (int8x16_t)v140);
          v164 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v163, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v163, 8uLL));
          v165 = vaddq_s32(v155, v141);
          v166 = (int32x4_t)veorq_s8((int8x16_t)v165, (int8x16_t)v143);
          v167 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v166, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v166, 7uLL));
          v168 = vaddq_s32(v161, v147);
          v169 = (int32x4_t)veorq_s8((int8x16_t)v168, (int8x16_t)v149);
          v170 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v169, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v169, 7uLL));
          v171 = vaddq_s32(v158, v144);
          v172 = (int32x4_t)veorq_s8((int8x16_t)v171, (int8x16_t)v146);
          v173 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v172, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v172, 7uLL));
          v174 = vaddq_s32(v164, v150);
          v175 = (int32x4_t)veorq_s8((int8x16_t)v174, (int8x16_t)v152);
          v176 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v175, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v175, 7uLL));
          v177 = vaddq_s32(vaddq_s32(v153, v58), v176);
          v178 = (int32x4_t)veorq_s8((int8x16_t)v177, (int8x16_t)v158);
          v179 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v178, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v178, 0x10uLL));
          v180 = vaddq_s32(vaddq_s32(v156, v59), v167);
          v181 = (int32x4_t)veorq_s8((int8x16_t)v161, (int8x16_t)v180);
          v182 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v181, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v181, 0x10uLL));
          v784 = v66;
          v183 = vaddq_s32(vaddq_s32(v159, v66), v173);
          v184 = (int32x4_t)veorq_s8((int8x16_t)v183, (int8x16_t)v164);
          v185 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v184, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v184, 0x10uLL));
          v186 = vaddq_s32(vaddq_s32(v162, v83), v170);
          v187 = (int32x4_t)veorq_s8((int8x16_t)v186, (int8x16_t)v155);
          v188 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v187, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v187, 0x10uLL));
          v189 = vaddq_s32(v179, v168);
          v190 = (int32x4_t)veorq_s8((int8x16_t)v189, (int8x16_t)v176);
          v191 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v190, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v190, 0xCuLL));
          v192 = vaddq_s32(v182, v174);
          v193 = (int32x4_t)veorq_s8((int8x16_t)v192, (int8x16_t)v167);
          v194 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v193, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v193, 0xCuLL));
          v195 = vaddq_s32(v185, v165);
          v196 = (int32x4_t)veorq_s8((int8x16_t)v195, (int8x16_t)v173);
          v197 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v196, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v196, 0xCuLL));
          v198 = vaddq_s32(v188, v171);
          v199 = (int32x4_t)veorq_s8((int8x16_t)v198, (int8x16_t)v170);
          v200 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v199, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v199, 0xCuLL));
          v201 = vaddq_s32(vaddq_s32(v177, v780), v191);
          v202 = (int32x4_t)veorq_s8((int8x16_t)v201, (int8x16_t)v179);
          v203 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v202, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v202, 8uLL));
          v204 = vaddq_s32(vaddq_s32(v180, v72), v194);
          v205 = (int32x4_t)veorq_s8((int8x16_t)v204, (int8x16_t)v182);
          v206 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v205, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v205, 8uLL));
          v207 = vaddq_s32(vaddq_s32(v183, v80), v197);
          v208 = (int32x4_t)veorq_s8((int8x16_t)v207, (int8x16_t)v185);
          v209 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v208, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v208, 8uLL));
          v210 = vaddq_s32(vaddq_s32(v186, v75), v200);
          v211 = (int32x4_t)veorq_s8((int8x16_t)v210, (int8x16_t)v188);
          v212 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v211, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v211, 8uLL));
          v213 = vaddq_s32(v203, v189);
          v214 = (int32x4_t)veorq_s8((int8x16_t)v213, (int8x16_t)v191);
          v215 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v214, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v214, 7uLL));
          v216 = vaddq_s32(v206, v192);
          v217 = (int32x4_t)veorq_s8((int8x16_t)v216, (int8x16_t)v194);
          v218 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v217, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v217, 7uLL));
          v219 = vaddq_s32(v209, v195);
          v220 = (int32x4_t)veorq_s8((int8x16_t)v219, (int8x16_t)v197);
          v221 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v220, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v220, 7uLL));
          v222 = vaddq_s32(v212, v198);
          v223 = (int32x4_t)veorq_s8((int8x16_t)v222, (int8x16_t)v200);
          v224 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v223, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v223, 7uLL));
          v225 = vaddq_s32(vaddq_s32(v201, v55), v218);
          v226 = (int32x4_t)veorq_s8((int8x16_t)v212, (int8x16_t)v225);
          v227 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v226, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v226, 0x10uLL));
          v228 = vaddq_s32(vaddq_s32(v204, v74), v221);
          v229 = (int32x4_t)veorq_s8((int8x16_t)v228, (int8x16_t)v203);
          v230 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v229, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v229, 0x10uLL));
          v231 = vaddq_s32(vaddq_s32(v207, v68), v224);
          v232 = (int32x4_t)veorq_s8((int8x16_t)v231, (int8x16_t)v206);
          v233 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v232, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v232, 0x10uLL));
          v234 = vaddq_s32(vaddq_s32(v210, v78), v215);
          v235 = (int32x4_t)veorq_s8((int8x16_t)v234, (int8x16_t)v209);
          v236 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v235, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v235, 0x10uLL));
          v237 = vaddq_s32(v227, v219);
          v238 = (int32x4_t)veorq_s8((int8x16_t)v237, (int8x16_t)v218);
          v239 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v238, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v238, 0xCuLL));
          v240 = vaddq_s32(v233, v213);
          v241 = (int32x4_t)veorq_s8((int8x16_t)v240, (int8x16_t)v224);
          v242 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v241, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v241, 0xCuLL));
          v243 = vaddq_s32(v230, v222);
          v244 = (int32x4_t)veorq_s8((int8x16_t)v243, (int8x16_t)v221);
          v245 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v244, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v244, 0xCuLL));
          v246 = vaddq_s32(v236, v216);
          v247 = (int32x4_t)veorq_s8((int8x16_t)v246, (int8x16_t)v215);
          v248 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v247, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v247, 0xCuLL));
          v249 = vaddq_s32(vaddq_s32(v225, v73), v239);
          v250 = (int32x4_t)veorq_s8((int8x16_t)v249, (int8x16_t)v227);
          v251 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v250, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v250, 8uLL));
          v252 = vaddq_s32(vaddq_s32(v228, v781), v245);
          v253 = (int32x4_t)veorq_s8((int8x16_t)v252, (int8x16_t)v230);
          v254 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v253, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v253, 8uLL));
          v255 = vaddq_s32(vaddq_s32(v231, v783), v242);
          v256 = (int32x4_t)veorq_s8((int8x16_t)v255, (int8x16_t)v233);
          v257 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v256, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v256, 8uLL));
          v258 = vaddq_s32(vaddq_s32(v234, v61), v248);
          v259 = (int32x4_t)veorq_s8((int8x16_t)v258, (int8x16_t)v236);
          v260 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v259, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v259, 8uLL));
          v261 = vaddq_s32(v251, v237);
          v262 = (int32x4_t)veorq_s8((int8x16_t)v261, (int8x16_t)v239);
          v263 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v262, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v262, 7uLL));
          v264 = vaddq_s32(v254, v243);
          v265 = (int32x4_t)veorq_s8((int8x16_t)v264, (int8x16_t)v245);
          v266 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v265, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v265, 7uLL));
          v267 = vaddq_s32(v257, v240);
          v268 = (int32x4_t)veorq_s8((int8x16_t)v267, (int8x16_t)v242);
          v269 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v268, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v268, 7uLL));
          v270 = vaddq_s32(v260, v246);
          v271 = (int32x4_t)veorq_s8((int8x16_t)v270, (int8x16_t)v248);
          v272 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v271, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v271, 7uLL));
          v273 = vaddq_s32(vaddq_s32(v249, v59), v272);
          v274 = (int32x4_t)veorq_s8((int8x16_t)v273, (int8x16_t)v254);
          v275 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v274, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v274, 0x10uLL));
          v276 = vaddq_s32(vaddq_s32(v252, v72), v263);
          v277 = (int32x4_t)veorq_s8((int8x16_t)v257, (int8x16_t)v276);
          v278 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v277, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v277, 0x10uLL));
          v279 = vaddq_s32(vaddq_s32(v255, v75), v266);
          v280 = (int32x4_t)veorq_s8((int8x16_t)v279, (int8x16_t)v260);
          v281 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v280, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v280, 0x10uLL));
          v282 = vaddq_s32(vaddq_s32(v258, v66), v269);
          v283 = (int32x4_t)veorq_s8((int8x16_t)v282, (int8x16_t)v251);
          v284 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v283, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v283, 0x10uLL));
          v285 = vaddq_s32(v275, v267);
          v286 = (int32x4_t)veorq_s8((int8x16_t)v285, (int8x16_t)v272);
          v287 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v286, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v286, 0xCuLL));
          v288 = vaddq_s32(v278, v270);
          v289 = (int32x4_t)veorq_s8((int8x16_t)v288, (int8x16_t)v263);
          v290 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v289, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v289, 0xCuLL));
          v291 = vaddq_s32(v281, v261);
          v292 = (int32x4_t)veorq_s8((int8x16_t)v291, (int8x16_t)v266);
          v293 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v292, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v292, 0xCuLL));
          v294 = vaddq_s32(v284, v264);
          v295 = (int32x4_t)veorq_s8((int8x16_t)v294, (int8x16_t)v269);
          v296 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v295, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v295, 0xCuLL));
          v785 = v83;
          v297 = vaddq_s32(vaddq_s32(v273, v83), v287);
          v298 = (int32x4_t)veorq_s8((int8x16_t)v297, (int8x16_t)v275);
          v299 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v298, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v298, 8uLL));
          v300 = vaddq_s32(vaddq_s32(v276, v74), v290);
          v301 = (int32x4_t)veorq_s8((int8x16_t)v300, (int8x16_t)v278);
          v302 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v301, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v301, 8uLL));
          v303 = vaddq_s32(vaddq_s32(v279, v58), v293);
          v304 = (int32x4_t)veorq_s8((int8x16_t)v303, (int8x16_t)v281);
          v305 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v304, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v304, 8uLL));
          v306 = vaddq_s32(vaddq_s32(v282, v783), v296);
          v307 = (int32x4_t)veorq_s8((int8x16_t)v306, (int8x16_t)v284);
          v308 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v307, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v307, 8uLL));
          v309 = vaddq_s32(v299, v285);
          v310 = (int32x4_t)veorq_s8((int8x16_t)v309, (int8x16_t)v287);
          v311 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v310, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v310, 7uLL));
          v312 = vaddq_s32(v302, v288);
          v313 = (int32x4_t)veorq_s8((int8x16_t)v312, (int8x16_t)v290);
          v314 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v313, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v313, 7uLL));
          v315 = vaddq_s32(v305, v291);
          v316 = (int32x4_t)veorq_s8((int8x16_t)v315, (int8x16_t)v293);
          v317 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v316, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v316, 7uLL));
          v318 = vaddq_s32(v308, v294);
          v319 = (int32x4_t)veorq_s8((int8x16_t)v318, (int8x16_t)v296);
          v320 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v319, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v319, 7uLL));
          v321 = vaddq_s32(vaddq_s32(v297, v780), v314);
          v322 = (int32x4_t)veorq_s8((int8x16_t)v308, (int8x16_t)v321);
          v323 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v322, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v322, 0x10uLL));
          v324 = vaddq_s32(vaddq_s32(v300, v68), v317);
          v325 = (int32x4_t)veorq_s8((int8x16_t)v324, (int8x16_t)v299);
          v326 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v325, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v325, 0x10uLL));
          v327 = vaddq_s32(vaddq_s32(v303, v73), v320);
          v328 = (int32x4_t)veorq_s8((int8x16_t)v327, (int8x16_t)v302);
          v329 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v328, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v328, 0x10uLL));
          v330 = vaddq_s32(vaddq_s32(v306, v61), v311);
          v331 = (int32x4_t)veorq_s8((int8x16_t)v330, (int8x16_t)v305);
          v332 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v331, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v331, 0x10uLL));
          v333 = vaddq_s32(v323, v315);
          v334 = (int32x4_t)veorq_s8((int8x16_t)v333, (int8x16_t)v314);
          v335 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v334, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v334, 0xCuLL));
          v336 = vaddq_s32(v326, v318);
          v337 = (int32x4_t)veorq_s8((int8x16_t)v336, (int8x16_t)v317);
          v338 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v337, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v337, 0xCuLL));
          v339 = vaddq_s32(v329, v309);
          v340 = (int32x4_t)veorq_s8((int8x16_t)v339, (int8x16_t)v320);
          v341 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v340, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v340, 0xCuLL));
          v342 = vaddq_s32(v332, v312);
          v343 = (int32x4_t)veorq_s8((int8x16_t)v342, (int8x16_t)v311);
          v344 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v343, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v343, 0xCuLL));
          v345 = vaddq_s32(vaddq_s32(v321, v781), v335);
          v346 = (int32x4_t)veorq_s8((int8x16_t)v345, (int8x16_t)v323);
          v347 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v346, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v346, 8uLL));
          v348 = vaddq_s32(vaddq_s32(v324, v782), v338);
          v349 = (int32x4_t)veorq_s8((int8x16_t)v348, (int8x16_t)v326);
          v350 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v349, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v349, 8uLL));
          v351 = vaddq_s32(vaddq_s32(v327, v78), v341);
          v352 = (int32x4_t)veorq_s8((int8x16_t)v351, (int8x16_t)v329);
          v353 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v352, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v352, 8uLL));
          v354 = vaddq_s32(vaddq_s32(v330, v55), v344);
          v355 = (int32x4_t)veorq_s8((int8x16_t)v354, (int8x16_t)v332);
          v356 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v355, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v355, 8uLL));
          v357 = vaddq_s32(v347, v333);
          v358 = (int32x4_t)veorq_s8((int8x16_t)v357, (int8x16_t)v335);
          v359 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v358, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v358, 7uLL));
          v360 = vaddq_s32(v350, v336);
          v361 = (int32x4_t)veorq_s8((int8x16_t)v360, (int8x16_t)v338);
          v362 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v361, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v361, 7uLL));
          v363 = vaddq_s32(v353, v339);
          v364 = (int32x4_t)veorq_s8((int8x16_t)v363, (int8x16_t)v341);
          v365 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v364, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v364, 7uLL));
          v366 = vaddq_s32(v356, v342);
          v367 = (int32x4_t)veorq_s8((int8x16_t)v366, (int8x16_t)v344);
          v368 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v367, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v367, 7uLL));
          v369 = vaddq_s32(vaddq_s32(v345, v72), v368);
          v370 = (int32x4_t)veorq_s8((int8x16_t)v369, (int8x16_t)v350);
          v371 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v370, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0x10uLL));
          v372 = vaddq_s32(vaddq_s32(v348, v74), v359);
          v373 = (int32x4_t)veorq_s8((int8x16_t)v353, (int8x16_t)v372);
          v374 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v373, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0x10uLL));
          v375 = vaddq_s32(vaddq_s32(v351, v783), v362);
          v376 = (int32x4_t)veorq_s8((int8x16_t)v375, (int8x16_t)v356);
          v377 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v376, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v376, 0x10uLL));
          v378 = vaddq_s32(vaddq_s32(v354, v75), v365);
          v379 = (int32x4_t)veorq_s8((int8x16_t)v378, (int8x16_t)v347);
          v380 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v379, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v379, 0x10uLL));
          v381 = vaddq_s32(v371, v363);
          v382 = (int32x4_t)veorq_s8((int8x16_t)v381, (int8x16_t)v368);
          v383 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v382, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v382, 0xCuLL));
          v384 = vaddq_s32(v374, v366);
          v385 = (int32x4_t)veorq_s8((int8x16_t)v384, (int8x16_t)v359);
          v386 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v385, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v385, 0xCuLL));
          v387 = vaddq_s32(v377, v357);
          v388 = (int32x4_t)veorq_s8((int8x16_t)v387, (int8x16_t)v362);
          v389 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v388, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v388, 0xCuLL));
          v390 = vaddq_s32(v380, v360);
          v391 = (int32x4_t)veorq_s8((int8x16_t)v390, (int8x16_t)v365);
          v392 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v391, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v391, 0xCuLL));
          v393 = vaddq_s32(vaddq_s32(v369, v66), v383);
          v394 = (int32x4_t)veorq_s8((int8x16_t)v393, (int8x16_t)v371);
          v395 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v394, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v394, 8uLL));
          v396 = vaddq_s32(vaddq_s32(v372, v68), v386);
          v397 = (int32x4_t)veorq_s8((int8x16_t)v396, (int8x16_t)v374);
          v398 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v397, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v397, 8uLL));
          v399 = vaddq_s32(vaddq_s32(v375, v59), v389);
          v400 = (int32x4_t)veorq_s8((int8x16_t)v399, (int8x16_t)v377);
          v401 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v400, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v400, 8uLL));
          v402 = vaddq_s32(vaddq_s32(v378, v78), v392);
          v403 = (int32x4_t)veorq_s8((int8x16_t)v402, (int8x16_t)v380);
          v404 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v403, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v403, 8uLL));
          v405 = vaddq_s32(v395, v381);
          v406 = (int32x4_t)veorq_s8((int8x16_t)v405, (int8x16_t)v383);
          v407 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v406, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v406, 7uLL));
          v408 = vaddq_s32(v398, v384);
          v409 = (int32x4_t)veorq_s8((int8x16_t)v408, (int8x16_t)v386);
          v410 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v409, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v409, 7uLL));
          v411 = vaddq_s32(v401, v387);
          v412 = (int32x4_t)veorq_s8((int8x16_t)v411, (int8x16_t)v389);
          v413 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v412, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v412, 7uLL));
          v414 = vaddq_s32(v404, v390);
          v415 = (int32x4_t)veorq_s8((int8x16_t)v414, (int8x16_t)v392);
          v416 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v415, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v415, 7uLL));
          v417 = vaddq_s32(vaddq_s32(v393, v83), v410);
          v418 = (int32x4_t)veorq_s8((int8x16_t)v404, (int8x16_t)v417);
          v419 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v418, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v418, 0x10uLL));
          v420 = vaddq_s32(vaddq_s32(v396, v73), v413);
          v421 = (int32x4_t)veorq_s8((int8x16_t)v420, (int8x16_t)v395);
          v422 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v421, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v421, 0x10uLL));
          v423 = vaddq_s32(vaddq_s32(v399, v781), v416);
          v424 = (int32x4_t)veorq_s8((int8x16_t)v423, (int8x16_t)v398);
          v425 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v424, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v424, 0x10uLL));
          v426 = vaddq_s32(vaddq_s32(v402, v55), v407);
          v427 = (int32x4_t)veorq_s8((int8x16_t)v426, (int8x16_t)v401);
          v428 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v427, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v427, 0x10uLL));
          v429 = vaddq_s32(v419, v411);
          v430 = (int32x4_t)veorq_s8((int8x16_t)v429, (int8x16_t)v410);
          v431 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v430, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v430, 0xCuLL));
          v432 = vaddq_s32(v422, v414);
          v433 = (int32x4_t)veorq_s8((int8x16_t)v432, (int8x16_t)v413);
          v434 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v433, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v433, 0xCuLL));
          v435 = vaddq_s32(v425, v405);
          v436 = (int32x4_t)veorq_s8((int8x16_t)v435, (int8x16_t)v416);
          v437 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v436, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v436, 0xCuLL));
          v438 = vaddq_s32(v428, v408);
          v439 = (int32x4_t)veorq_s8((int8x16_t)v438, (int8x16_t)v407);
          v440 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v439, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v439, 0xCuLL));
          v441 = vaddq_s32(vaddq_s32(v417, v782), v431);
          v442 = (int32x4_t)veorq_s8((int8x16_t)v441, (int8x16_t)v419);
          v443 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v442, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v442, 8uLL));
          v444 = vaddq_s32(vaddq_s32(v420, v58), v434);
          v445 = (int32x4_t)veorq_s8((int8x16_t)v444, (int8x16_t)v422);
          v446 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v445, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v445, 8uLL));
          v447 = vaddq_s32(vaddq_s32(v423, v61), v437);
          v448 = (int32x4_t)veorq_s8((int8x16_t)v447, (int8x16_t)v425);
          v449 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v448, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v448, 8uLL));
          v450 = vaddq_s32(vaddq_s32(v426, v780), v440);
          v451 = (int32x4_t)veorq_s8((int8x16_t)v450, (int8x16_t)v428);
          v452 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v451, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v451, 8uLL));
          v453 = vaddq_s32(v443, v429);
          v454 = (int32x4_t)veorq_s8((int8x16_t)v453, (int8x16_t)v431);
          v455 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v454, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v454, 7uLL));
          v456 = vaddq_s32(v449, v435);
          v457 = (int32x4_t)veorq_s8((int8x16_t)v456, (int8x16_t)v437);
          v458 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v457, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v457, 7uLL));
          v459 = vaddq_s32(v446, v432);
          v460 = (int32x4_t)veorq_s8((int8x16_t)v459, (int8x16_t)v434);
          v461 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v460, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v460, 7uLL));
          v462 = vaddq_s32(v452, v438);
          v463 = (int32x4_t)veorq_s8((int8x16_t)v462, (int8x16_t)v440);
          v464 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v463, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v463, 7uLL));
          v465 = vaddq_s32(vaddq_s32(v441, v74), v464);
          v466 = (int32x4_t)veorq_s8((int8x16_t)v465, (int8x16_t)v446);
          v467 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v466, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v466, 0x10uLL));
          v468 = vaddq_s32(vaddq_s32(v444, v68), v455);
          v469 = (int32x4_t)veorq_s8((int8x16_t)v449, (int8x16_t)v468);
          v470 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v469, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v469, 0x10uLL));
          v471 = vaddq_s32(vaddq_s32(v447, v78), v461);
          v472 = (int32x4_t)veorq_s8((int8x16_t)v471, (int8x16_t)v452);
          v473 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v472, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v472, 0x10uLL));
          v474 = vaddq_s32(vaddq_s32(v450, v783), v458);
          v475 = (int32x4_t)veorq_s8((int8x16_t)v474, (int8x16_t)v443);
          v476 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v475, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v475, 0x10uLL));
          v477 = vaddq_s32(v467, v456);
          v478 = (int32x4_t)veorq_s8((int8x16_t)v477, (int8x16_t)v464);
          v479 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v478, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v478, 0xCuLL));
          v480 = vaddq_s32(v470, v462);
          v481 = (int32x4_t)veorq_s8((int8x16_t)v480, (int8x16_t)v455);
          v482 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v481, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v481, 0xCuLL));
          v483 = vaddq_s32(v473, v453);
          v484 = (int32x4_t)veorq_s8((int8x16_t)v483, (int8x16_t)v461);
          v485 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v484, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v484, 0xCuLL));
          v486 = vaddq_s32(v476, v459);
          v487 = (int32x4_t)veorq_s8((int8x16_t)v486, (int8x16_t)v458);
          v488 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v487, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v487, 0xCuLL));
          v489 = vaddq_s32(vaddq_s32(v465, v75), v479);
          v490 = (int32x4_t)veorq_s8((int8x16_t)v489, (int8x16_t)v467);
          v491 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v490, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v490, 8uLL));
          v492 = vaddq_s32(vaddq_s32(v468, v73), v482);
          v493 = (int32x4_t)veorq_s8((int8x16_t)v492, (int8x16_t)v470);
          v494 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v493, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v493, 8uLL));
          v495 = vaddq_s32(vaddq_s32(v471, v72), v485);
          v496 = (int32x4_t)veorq_s8((int8x16_t)v495, (int8x16_t)v473);
          v497 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v496, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v496, 8uLL));
          v498 = vaddq_s32(vaddq_s32(v474, v61), v488);
          v499 = (int32x4_t)veorq_s8((int8x16_t)v498, (int8x16_t)v476);
          v500 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v499, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v499, 8uLL));
          v501 = vaddq_s32(v491, v477);
          v502 = (int32x4_t)veorq_s8((int8x16_t)v501, (int8x16_t)v479);
          v503 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v502, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v502, 7uLL));
          v504 = vaddq_s32(v494, v480);
          v505 = (int32x4_t)veorq_s8((int8x16_t)v504, (int8x16_t)v482);
          v506 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v505, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v505, 7uLL));
          v507 = vaddq_s32(v497, v483);
          v508 = (int32x4_t)veorq_s8((int8x16_t)v507, (int8x16_t)v485);
          v509 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v508, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v508, 7uLL));
          v510 = vaddq_s32(v500, v486);
          v511 = (int32x4_t)veorq_s8((int8x16_t)v510, (int8x16_t)v488);
          v512 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v511, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v511, 7uLL));
          v513 = vaddq_s32(vaddq_s32(v489, v66), v506);
          v514 = (int32x4_t)veorq_s8((int8x16_t)v500, (int8x16_t)v513);
          v515 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v514, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v514, 0x10uLL));
          v516 = vaddq_s32(vaddq_s32(v492, v781), v509);
          v517 = (int32x4_t)veorq_s8((int8x16_t)v516, (int8x16_t)v491);
          v518 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v517, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v517, 0x10uLL));
          v519 = vaddq_s32(vaddq_s32(v495, v782), v512);
          v520 = (int32x4_t)veorq_s8((int8x16_t)v519, (int8x16_t)v494);
          v521 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v520, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v520, 0x10uLL));
          v522 = vaddq_s32(vaddq_s32(v498, v780), v503);
          v523 = (int32x4_t)veorq_s8((int8x16_t)v522, (int8x16_t)v497);
          v524 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v523, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v523, 0x10uLL));
          v525 = vaddq_s32(v515, v507);
          v526 = (int32x4_t)veorq_s8((int8x16_t)v525, (int8x16_t)v506);
          v527 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v526, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v526, 0xCuLL));
          v528 = vaddq_s32(v521, v501);
          v529 = (int32x4_t)veorq_s8((int8x16_t)v528, (int8x16_t)v512);
          v530 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v529, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v529, 0xCuLL));
          v531 = vaddq_s32(v518, v510);
          v532 = (int32x4_t)veorq_s8((int8x16_t)v531, (int8x16_t)v509);
          v533 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v532, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v532, 0xCuLL));
          v534 = vaddq_s32(v524, v504);
          v535 = (int32x4_t)veorq_s8((int8x16_t)v534, (int8x16_t)v503);
          v536 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v535, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v535, 0xCuLL));
          v537 = vaddq_s32(vaddq_s32(v513, v58), v527);
          v538 = (int32x4_t)veorq_s8((int8x16_t)v537, (int8x16_t)v515);
          v539 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v538, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v538, 8uLL));
          v540 = vaddq_s32(vaddq_s32(v516, v59), v533);
          v541 = (int32x4_t)veorq_s8((int8x16_t)v540, (int8x16_t)v518);
          v542 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v541, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v541, 8uLL));
          v543 = vaddq_s32(vaddq_s32(v519, v55), v530);
          v544 = (int32x4_t)veorq_s8((int8x16_t)v543, (int8x16_t)v521);
          v545 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v544, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v544, 8uLL));
          v546 = vaddq_s32(vaddq_s32(v522, v83), v536);
          v547 = (int32x4_t)veorq_s8((int8x16_t)v546, (int8x16_t)v524);
          v548 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v547, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v547, 8uLL));
          v549 = vaddq_s32(v539, v525);
          v550 = (int32x4_t)veorq_s8((int8x16_t)v549, (int8x16_t)v527);
          v551 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v550, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v550, 7uLL));
          v552 = vaddq_s32(v542, v531);
          v553 = (int32x4_t)veorq_s8((int8x16_t)v552, (int8x16_t)v533);
          v554 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v553, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v553, 7uLL));
          v555 = vaddq_s32(v545, v528);
          v556 = (int32x4_t)veorq_s8((int8x16_t)v555, (int8x16_t)v530);
          v557 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v556, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v556, 7uLL));
          v558 = vaddq_s32(v548, v534);
          v559 = (int32x4_t)veorq_s8((int8x16_t)v558, (int8x16_t)v536);
          v560 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v559, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v559, 7uLL));
          v561 = vaddq_s32(vaddq_s32(v537, v68), v560);
          v562 = (int32x4_t)veorq_s8((int8x16_t)v561, (int8x16_t)v542);
          v563 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v562, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v562, 0x10uLL));
          v564 = vaddq_s32(vaddq_s32(v540, v73), v551);
          v565 = (int32x4_t)veorq_s8((int8x16_t)v545, (int8x16_t)v564);
          v566 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v565, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v565, 0x10uLL));
          v567 = vaddq_s32(vaddq_s32(v543, v61), v554);
          v568 = (int32x4_t)veorq_s8((int8x16_t)v567, (int8x16_t)v548);
          v569 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v568, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0x10uLL));
          v570 = vaddq_s32(vaddq_s32(v546, v78), v557);
          v571 = (int32x4_t)veorq_s8((int8x16_t)v570, (int8x16_t)v539);
          v572 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v571, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v571, 0x10uLL));
          v573 = vaddq_s32(v563, v555);
          v574 = (int32x4_t)veorq_s8((int8x16_t)v573, (int8x16_t)v560);
          v575 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v574, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v574, 0xCuLL));
          v576 = vaddq_s32(v566, v558);
          v577 = (int32x4_t)veorq_s8((int8x16_t)v576, (int8x16_t)v551);
          v578 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v577, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v577, 0xCuLL));
          v579 = vaddq_s32(v569, v549);
          v580 = (int32x4_t)veorq_s8((int8x16_t)v579, (int8x16_t)v554);
          v581 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v580, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v580, 0xCuLL));
          v582 = vaddq_s32(v572, v552);
          v583 = (int32x4_t)veorq_s8((int8x16_t)v582, (int8x16_t)v557);
          v584 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v583, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v583, 0xCuLL));
          v585 = vaddq_s32(vaddq_s32(v561, v783), v575);
          v586 = (int32x4_t)veorq_s8((int8x16_t)v585, (int8x16_t)v563);
          v587 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v586, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v586, 8uLL));
          v588 = vaddq_s32(vaddq_s32(v564, v781), v578);
          v589 = (int32x4_t)veorq_s8((int8x16_t)v588, (int8x16_t)v566);
          v590 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v589, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v589, 8uLL));
          v591 = vaddq_s32(vaddq_s32(v567, v74), v581);
          v592 = (int32x4_t)veorq_s8((int8x16_t)v591, (int8x16_t)v569);
          v593 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v592, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v592, 8uLL));
          v594 = vaddq_s32(vaddq_s32(v570, v55), v584);
          v595 = (int32x4_t)veorq_s8((int8x16_t)v594, (int8x16_t)v572);
          v596 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v595, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v595, 8uLL));
          v597 = vaddq_s32(v587, v573);
          v598 = (int32x4_t)veorq_s8((int8x16_t)v597, (int8x16_t)v575);
          v599 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v598, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v598, 7uLL));
          v600 = vaddq_s32(v590, v576);
          v601 = (int32x4_t)veorq_s8((int8x16_t)v600, (int8x16_t)v578);
          v602 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v601, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v601, 7uLL));
          v603 = vaddq_s32(v593, v579);
          v604 = (int32x4_t)veorq_s8((int8x16_t)v603, (int8x16_t)v581);
          v605 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v604, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v604, 7uLL));
          v606 = vaddq_s32(v596, v582);
          v607 = (int32x4_t)veorq_s8((int8x16_t)v606, (int8x16_t)v584);
          v608 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v607, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v607, 7uLL));
          v609 = vaddq_s32(vaddq_s32(v585, v75), v602);
          v610 = (int32x4_t)veorq_s8((int8x16_t)v596, (int8x16_t)v609);
          v611 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v610, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v610, 0x10uLL));
          v612 = vaddq_s32(vaddq_s32(v588, v782), v605);
          v613 = (int32x4_t)veorq_s8((int8x16_t)v612, (int8x16_t)v587);
          v614 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v613, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v613, 0x10uLL));
          v615 = vaddq_s32(vaddq_s32(v591, v58), v608);
          v616 = (int32x4_t)veorq_s8((int8x16_t)v615, (int8x16_t)v590);
          v617 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v616, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v616, 0x10uLL));
          v618 = vaddq_s32(vaddq_s32(v594, v83), v599);
          v619 = (int32x4_t)veorq_s8((int8x16_t)v618, (int8x16_t)v593);
          v620 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v619, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v619, 0x10uLL));
          v621 = vaddq_s32(v611, v603);
          v622 = (int32x4_t)veorq_s8((int8x16_t)v621, (int8x16_t)v602);
          v623 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v622, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v622, 0xCuLL));
          v624 = vaddq_s32(v614, v606);
          v625 = (int32x4_t)veorq_s8((int8x16_t)v624, (int8x16_t)v605);
          v626 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v625, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v625, 0xCuLL));
          v627 = vaddq_s32(v617, v597);
          v628 = (int32x4_t)veorq_s8((int8x16_t)v627, (int8x16_t)v608);
          v629 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v628, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v628, 0xCuLL));
          v630 = vaddq_s32(v620, v600);
          v631 = (int32x4_t)veorq_s8((int8x16_t)v630, (int8x16_t)v599);
          v632 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v631, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v631, 0xCuLL));
          v633 = vaddq_s32(vaddq_s32(v609, v59), v623);
          v634 = (int32x4_t)veorq_s8((int8x16_t)v633, (int8x16_t)v611);
          v635 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v634, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v634, 8uLL));
          v636 = vaddq_s32(vaddq_s32(v612, v72), v626);
          v637 = (int32x4_t)veorq_s8((int8x16_t)v636, (int8x16_t)v614);
          v638 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v637, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v637, 8uLL));
          v639 = vaddq_s32(vaddq_s32(v615, v780), v629);
          v640 = (int32x4_t)veorq_s8((int8x16_t)v639, (int8x16_t)v617);
          v641 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v640, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v640, 8uLL));
          v642 = vaddq_s32(vaddq_s32(v618, v66), v632);
          v643 = (int32x4_t)veorq_s8((int8x16_t)v642, (int8x16_t)v620);
          v644 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v643, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v643, 8uLL));
          v645 = vaddq_s32(v635, v621);
          v646 = (int32x4_t)veorq_s8((int8x16_t)v645, (int8x16_t)v623);
          v647 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v646, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v646, 7uLL));
          v648 = vaddq_s32(v641, v627);
          v649 = (int32x4_t)veorq_s8((int8x16_t)v648, (int8x16_t)v629);
          v650 = vaddq_s32(v633, v73);
          v651 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v649, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v649, 7uLL));
          v652 = vaddq_s32(v638, v624);
          v653 = (int32x4_t)veorq_s8((int8x16_t)v652, (int8x16_t)v626);
          v654 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v653, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v653, 7uLL));
          v655 = vaddq_s32(v644, v630);
          v656 = (int32x4_t)veorq_s8((int8x16_t)v655, (int8x16_t)v632);
          v657 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v656, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v656, 7uLL));
          v658 = vaddq_s32(v650, v657);
          v659 = vaddq_s32(vaddq_s32(v636, v781), v647);
          v660 = vaddq_s32(vaddq_s32(v639, v55), v654);
          v661 = vaddq_s32(vaddq_s32(v642, v61), v651);
          v662 = (int32x4_t)veorq_s8((int8x16_t)v658, (int8x16_t)v638);
          v663 = (int32x4_t)veorq_s8((int8x16_t)v641, (int8x16_t)v659);
          v664 = (int32x4_t)veorq_s8((int8x16_t)v660, (int8x16_t)v644);
          v665 = (int32x4_t)veorq_s8((int8x16_t)v661, (int8x16_t)v635);
          v666 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v662, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v662, 0x10uLL));
          v667 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v663, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v663, 0x10uLL));
          v668 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v664, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v664, 0x10uLL));
          v669 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v665, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v665, 0x10uLL));
          v670 = vaddq_s32(v667, v655);
          v671 = vaddq_s32(v669, v652);
          v672 = vaddq_s32(v666, v648);
          v673 = (int32x4_t)veorq_s8((int8x16_t)v670, (int8x16_t)v647);
          v674 = (int32x4_t)veorq_s8((int8x16_t)v671, (int8x16_t)v651);
          v675 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v673, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v673, 0xCuLL));
          v676 = (int32x4_t)veorq_s8((int8x16_t)v672, (int8x16_t)v657);
          v677 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v674, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v674, 0xCuLL));
          v678 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v676, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v676, 0xCuLL));
          v679 = vaddq_s32(v668, v645);
          v680 = (int32x4_t)veorq_s8((int8x16_t)v679, (int8x16_t)v654);
          v681 = vaddq_s32(v658, v78);
          v682 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v680, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v680, 0xCuLL));
          v683 = vaddq_s32(v681, v678);
          v684 = vaddq_s32(vaddq_s32(v659, v782), v675);
          v685 = vaddq_s32(vaddq_s32(v660, v68), v682);
          v686 = vaddq_s32(vaddq_s32(v661, v780), v677);
          v687 = (int32x4_t)veorq_s8((int8x16_t)v683, (int8x16_t)v666);
          v688 = (int32x4_t)veorq_s8((int8x16_t)v684, (int8x16_t)v667);
          v689 = (int32x4_t)veorq_s8((int8x16_t)v685, (int8x16_t)v668);
          v690 = (int32x4_t)veorq_s8((int8x16_t)v686, (int8x16_t)v669);
          v691 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v687, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v687, 8uLL));
          v692 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v688, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v688, 8uLL));
          v693 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v689, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v689, 8uLL));
          v694 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v690, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v690, 8uLL));
          v695 = vaddq_s32(v691, v672);
          v696 = vaddq_s32(v692, v670);
          v697 = vaddq_s32(v693, v679);
          v698 = vaddq_s32(v694, v671);
          v699 = (int32x4_t)veorq_s8((int8x16_t)v695, (int8x16_t)v678);
          v700 = (int32x4_t)veorq_s8((int8x16_t)v696, (int8x16_t)v675);
          v701 = (int32x4_t)veorq_s8((int8x16_t)v697, (int8x16_t)v682);
          v702 = (int32x4_t)veorq_s8((int8x16_t)v698, (int8x16_t)v677);
          v703 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v699, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v699, 7uLL));
          v704 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v700, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v700, 7uLL));
          v705 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v701, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v701, 7uLL));
          v706 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v702, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v702, 7uLL));
          v707 = vaddq_s32(vaddq_s32(v683, v783), v704);
          v708 = vaddq_s32(vaddq_s32(v684, v58), v705);
          v709 = vaddq_s32(vaddq_s32(v685, v59), v706);
          v710 = vaddq_s32(vaddq_s32(v686, v784), v703);
          v711 = (int32x4_t)veorq_s8((int8x16_t)v694, (int8x16_t)v707);
          v712 = (int32x4_t)veorq_s8((int8x16_t)v709, (int8x16_t)v692);
          v713 = (int32x4_t)veorq_s8((int8x16_t)v708, (int8x16_t)v691);
          v714 = (int32x4_t)veorq_s8((int8x16_t)v710, (int8x16_t)v693);
          v715 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v711, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v711, 0x10uLL));
          v716 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v713, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v713, 0x10uLL));
          v717 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v712, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v712, 0x10uLL));
          v718 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v714, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v714, 0x10uLL));
          v719 = vaddq_s32(v715, v697);
          v720 = (int32x4_t)veorq_s8((int8x16_t)v719, (int8x16_t)v704);
          v721 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v720, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v720, 0xCuLL));
          v722 = vaddq_s32(v717, v695);
          v723 = (int32x4_t)veorq_s8((int8x16_t)v722, (int8x16_t)v706);
          v724 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v723, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v723, 0xCuLL));
          v725 = vaddq_s32(v716, v698);
          v726 = (int32x4_t)veorq_s8((int8x16_t)v725, (int8x16_t)v705);
          v727 = vaddq_s32(v708, v74);
          v728 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v726, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v726, 0xCuLL));
          v729 = vaddq_s32(v718, v696);
          v730 = (int32x4_t)veorq_s8((int8x16_t)v729, (int8x16_t)v703);
          v731 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v730, 0x14uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v730, 0xCuLL));
          v732 = (int8x16_t)vaddq_s32(vaddq_s32(v707, v72), v721);
          v733 = (int8x16_t)vaddq_s32(v727, v728);
          v734 = (int8x16_t)vaddq_s32(vaddq_s32(v709, v785), v724);
          v735 = (int8x16_t)vaddq_s32(vaddq_s32(v710, v75), v731);
          v736 = (int32x4_t)veorq_s8(v732, (int8x16_t)v715);
          v737 = (int32x4_t)veorq_s8(v733, (int8x16_t)v716);
          v738 = (int32x4_t)veorq_s8(v734, (int8x16_t)v717);
          v739 = (int32x4_t)veorq_s8(v735, (int8x16_t)v718);
          v740 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v736, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v736, 8uLL));
          v741 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v738, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v738, 8uLL));
          v742 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v737, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v737, 8uLL));
          v743 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v739, 0x18uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v739, 8uLL));
          v744 = (int8x16_t)vaddq_s32(v740, v719);
          v745 = (int8x16_t)vaddq_s32(v741, v722);
          v746 = (int8x16_t)vaddq_s32(v742, v725);
          v747 = (int8x16_t)vaddq_s32(v743, v729);
          v748 = (int32x4_t)veorq_s8(v744, (int8x16_t)v721);
          v749 = (int32x4_t)veorq_s8(v746, (int8x16_t)v728);
          v750 = (int32x4_t)veorq_s8(v745, (int8x16_t)v724);
          v751 = (int32x4_t)veorq_s8(v747, (int8x16_t)v731);
          v18 = (int32x4_t)veorq_s8(v745, v732);
          v19 = (int32x4_t)veorq_s8(v733, v747);
          v21 = (int32x4_t)veorq_s8(v734, v744);
          v23 = (int32x4_t)veorq_s8(v746, v735);
          v25 = (int32x4_t)veorq_s8((int8x16_t)v742, vorrq_s8((int8x16_t)vshlq_n_s32(v751, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v751, 7uLL)));
          v27 = (int32x4_t)veorq_s8((int8x16_t)v741, vorrq_s8((int8x16_t)vshlq_n_s32(v748, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v748, 7uLL)));
          v29 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vshlq_n_s32(v749, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v749, 7uLL)), (int8x16_t)v743);
          v31 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vshlq_n_s32(v750, 0x19uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v750, 7uLL)), (int8x16_t)v740);
          v35 += 64;
          v36 += 64;
          v37 += 64;
          v38 += 64;
          v40 = a7;
        }
        while (v39);
      }
      v752 = (int64x2_t)vtrn1q_s32(v18, v19);
      v753 = (int64x2_t)vtrn2q_s32(v18, v19);
      v754 = (int64x2_t)vtrn1q_s32(v21, v23);
      v755 = (int64x2_t)vtrn2q_s32(v21, v23);
      v756 = vzip2q_s64(v752, v754);
      v752.i64[1] = v754.i64[0];
      v757 = vzip2q_s64(v753, v755);
      v753.i64[1] = v755.i64[0];
      v758 = (int64x2_t)vtrn1q_s32(v25, v27);
      v759 = (int64x2_t)vtrn2q_s32(v25, v27);
      v760 = (int64x2_t)vtrn1q_s32(v29, v31);
      v761 = (int64x2_t)vtrn2q_s32(v29, v31);
      v762 = vzip2q_s64(v758, v760);
      v758.i64[1] = v760.i64[0];
      v763 = vzip2q_s64(v759, v761);
      v759.i64[1] = v761.i64[0];
      *a10 = v752;
      a10[1] = v758;
      a10[2] = v753;
      a10[3] = v759;
      a10[4] = v756;
      a10[5] = v762;
      a10[6] = v757;
      a10[7] = v763;
      if (a6)
        a5 += 4;
      v13 += 8;
      v12 -= 4;
      a10 += 8;
    }
    while (v12 > 3);
  }
  if (v12)
  {
    v764 = a8 | a7;
    do
    {
      v765 = *(int **)v13;
      v766 = *(int64x2_t *)(a4 + 4);
      v786 = *(int64x2_t *)a4;
      v787 = v766;
      v767 = a3;
      v768 = a3;
      for (i = v764; ; i = a7)
      {
        v770 = v768 - 1;
        if (v768 != 1)
          break;
        i |= a9;
LABEL_23:
        result = sub_1C637AC64(v786.i32, v765, 64, a5, i);
        v765 += 16;
        v768 = v770;
      }
      if (v768)
        goto LABEL_23;
      v771 = v787;
      *a10 = v786;
      a10[1] = v771;
      a10 += 2;
      a5 += v772;
      v13 += 2;
      --v12;
      a3 = v767;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::AArch64::getDefaultFPU(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v11;
  int v12;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v28;
  BOOL v34;
  BOOL v36;
  _BOOL4 v37;
  uint64_t v39;
  int v40;
  char v54;
  int v60;
  int v61;
  char v62;
  char v63;
  BOOL v64;
  char v65;

  v3 = 0x100000016;
  if (a2 != 7)
  {
    switch(a2)
    {
      case 9:
        if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 49)
        {
          v5 = 0;
          v7 = 0;
          v9 = 0;
          v8 = 1;
          goto LABEL_132;
        }
        v5 = 0;
        v11 = *(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 50;
        v8 = 1;
        if (!v11)
        {
          v6 = 0;
          v12 = 0;
          goto LABEL_139;
        }
        v6 = 0x100000015;
        v7 = 0;
        v9 = 0;
        goto LABEL_141;
      case 10:
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13363)
          goto LABEL_130;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619)
          goto LABEL_130;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109)
          goto LABEL_130;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
          goto LABEL_130;
        v18 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133;
        if (v18
          || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v19 = *(unsigned __int16 *)(a1 + 8) == 13622) : (v19 = 0),
              v19
           || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v20 = *(unsigned __int16 *)(a1 + 8) == 12855) : (v20 = 0),
               v20
            || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v21 = *(unsigned __int16 *)(a1 + 8) == 13111) : (v21 = 0),
                v21
             || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v22 = *(unsigned __int16 *)(a1 + 8) == 13623) : (v22 = 0),
                 v22
              || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v23 = *(unsigned __int16 *)(a1 + 8) == 13879) : (v23 = 0),
                  v23
               || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v24 = *(unsigned __int16 *)(a1 + 8) == 14135) : (v24 = 0),
                   v24
                || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v25 = *(unsigned __int16 *)(a1 + 8) == 14391) : (v25 = 0),
                    v25))))))))
        {
LABEL_130:
          v5 = 0;
          v12 = 0;
          v8 = 0;
          goto LABEL_138;
        }
        if (*(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12856)
        {
          v5 = 0;
          v7 = 0;
          v9 = 0;
          v8 = 0;
        }
        else
        {
          v5 = 0;
          if (*(_QWORD *)a1 != 0x782D786574726F63 || *(_WORD *)(a1 + 8) != 25393)
          {
            v6 = 0;
            v12 = 0;
            v8 = 0;
            goto LABEL_139;
          }
          v7 = 0;
          v9 = 0;
          v8 = 0;
        }
LABEL_132:
        v6 = 0x100000016;
        goto LABEL_141;
      case 11:
        v28 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x303135612D786574;
        v5 = !v28;
        v6 = 0x100000015;
        if (v28)
          goto LABEL_94;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x633837612D786574)
        {
          v5 = 0;
          v8 = 0;
          v12 = 1;
          goto LABEL_138;
        }
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x303137612D786574)
        {
          v5 = 0;
        }
        else
        {
          v6 = 0;
LABEL_94:
          if (v5)
          {
            if ((*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 3) != 0x31652D6573726576)
              && (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 3) != 0x316E2D6573726576)
              && (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 3) != 0x326E2D6573726576))
            {
              v34 = *(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x31762D6573726576;
              v12 = 1;
              if (!v34)
              {
                v5 = 0;
                v8 = 0;
                goto LABEL_139;
              }
            }
            v5 = 1;
LABEL_135:
            v6 = 0x100000016;
            goto LABEL_9;
          }
        }
        v8 = 0;
        v12 = 1;
        goto LABEL_139;
      case 12:
        v12 = 0;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869430)
        {
          v8 = 0;
          v5 = 1;
LABEL_138:
          v6 = 0x100000016;
        }
        else
        {
          v36 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687;
          v5 = 1;
          if (!v36)
          {
            v6 = 0;
            v37 = 0;
            v9 = 0;
            v7 = 1;
            goto LABEL_217;
          }
          v6 = 0x100000016;
          v8 = 0;
        }
LABEL_139:
        v7 = v5;
        v9 = v12;
        goto LABEL_140;
      case 15:
        v5 = 0;
        if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 7) == 0x6276743231352D65)
          goto LABEL_135;
        v6 = 0;
        v7 = 0;
        v9 = 0;
        v8 = 0;
        goto LABEL_141;
      default:
        v5 = a2 == 8;
        if (a2 != 8)
        {
          v7 = 0;
          v9 = 0;
          v8 = 0;
          v6 = 0;
          goto LABEL_141;
        }
        if (*(_QWORD *)a1 == 0x37612D656C707061)
          goto LABEL_260;
        v7 = 0;
        v9 = 0;
        v8 = 0;
        v6 = 0;
        v5 = 1;
        goto LABEL_141;
    }
  }
  if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949)
    return LODWORD((&off_1E8199CC8)[9 * a3 + 6]);
  v5 = 0;
  if (*(_DWORD *)a1 ^ 0x6C637963 | *(_DWORD *)(a1 + 3) ^ 0x656E6F6C)
    v6 = 0;
  else
    v6 = 0x100000016;
LABEL_9:
  v7 = 0;
  v8 = 0;
  v9 = v5;
LABEL_140:
  v5 = 0;
LABEL_141:
  v39 = v6 & 0x100000000;
  v37 = (v6 & 0xFF00000000) == 0 && v5;
  v5 = (v6 & 0xFF00000000) == 0;
  if (v37 && (*(_QWORD *)a1 == 0x38612D656C707061 || *(_QWORD *)a1 == 0x39612D656C707061))
    goto LABEL_260;
  v40 = v39 ? 0 : v8;
  if (v40 == 1)
  {
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 48)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 49)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 50)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 51)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 52)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 53)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 54)
      goto LABEL_260;
  }
  if (v37
    && (*(_QWORD *)a1 == 0x316D2D656C707061
     || *(_QWORD *)a1 == 0x326D2D656C707061
     || *(_QWORD *)a1 == 0x34732D656C707061
     || *(_QWORD *)a1 == 0x35732D656C707061))
  {
    goto LABEL_260;
  }
  if (v40)
  {
    if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 51)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 52)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 53)
      goto LABEL_260;
  }
  if (a2 != 6 || v39)
  {
    if (a2 != 7 || v39)
    {
      v12 = 0;
      if (a2 != 4 || v39)
        goto LABEL_217;
      if (*(_DWORD *)a1 == 1870230123)
        goto LABEL_260;
    }
    else if (*(_DWORD *)a1 == 1752195443 && *(_DWORD *)(a1 + 3) == 1634888040)
    {
      goto LABEL_260;
    }
    v12 = 0;
  }
  else
  {
    if (*(_DWORD *)a1 == 1802264934 && *(_WORD *)(a1 + 4) == 29295)
      goto LABEL_260;
    v12 = 1;
  }
  v5 = 1;
LABEL_217:
  if (v7 && v5 && *(_QWORD *)a1 == 0x787265646E756874 && *(_DWORD *)(a1 + 8) == 960066610)
    goto LABEL_260;
  v54 = !v5;
  if (a2 != 13)
    v54 = 1;
  if ((v54 & 1) == 0 && *(_QWORD *)a1 == 0x787265646E756874 && *(_QWORD *)(a1 + 5) == 0x3031317433787265)
    goto LABEL_260;
  if (v37 && *(_QWORD *)a1 == 0x787265646E756874)
    goto LABEL_260;
  if ((v9 & v5) == 1)
  {
    if (*(_QWORD *)a1 == 0x787265646E756874 && *(_QWORD *)(a1 + 3) == 0x383874787265646ELL)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x787265646E756874 && *(_QWORD *)(a1 + 3) == 0x313874787265646ELL)
      goto LABEL_260;
    if (*(_QWORD *)a1 == 0x787265646E756874 && *(_QWORD *)(a1 + 3) == 0x333874787265646ELL)
      goto LABEL_260;
  }
  if (v12)
  {
    if (*(_DWORD *)a1 == 829846388 && *(_WORD *)(a1 + 4) == 12337)
      goto LABEL_260;
    v60 = *(_DWORD *)a1 ^ 0x6D726163;
    v61 = *(unsigned __int16 *)(a1 + 4) ^ 0x6C65;
    goto LABEL_257;
  }
  v62 = !v5;
  if (a2 == 5)
    v63 = v62;
  else
    v63 = 1;
  if ((v63 & 1) == 0)
  {
    v60 = *(_DWORD *)a1 ^ 0x66343661;
    v61 = *(unsigned __int8 *)(a1 + 4) ^ 0x78;
LABEL_257:
    v64 = (v60 | v61) == 0;
    goto LABEL_258;
  }
  if (a2 == 7)
    v65 = v62;
  else
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    v64 = (*(_DWORD *)a1 ^ 0x61766E69 | *(_DWORD *)(a1 + 3) ^ 0x64696C61) == 0;
    v3 = 0x100000000;
LABEL_258:
    if (!v64)
      v3 = v6;
    goto LABEL_260;
  }
  v3 = v6;
LABEL_260:
  if ((v3 & 0xFF00000000) != 0)
    return v3;
  else
    return 0;
}

uint64_t llvm::AArch64::getDefaultExtensions(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v19;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  int v41;
  BOOL v53;
  BOOL v56;
  BOOL v57;
  BOOL v58;

  if (a2 != 7)
  {
    v8 = 0;
    switch(a2)
    {
      case 4:
        v6 = 0;
        if (*(_DWORD *)a1 == 1870230123)
          goto LABEL_244;
        LOBYTE(v9) = 1;
        v10 = 0;
        goto LABEL_240;
      case 6:
        if (*(_DWORD *)a1 == 1802264934 && *(_WORD *)(a1 + 4) == 29295)
          goto LABEL_224;
        if (*(_DWORD *)a1 == 829846388 && *(_WORD *)(a1 + 4) == 12337)
        {
          v26 = 254;
          v6 = 136448;
          return v26 | v6;
        }
        if (*(_DWORD *)a1 != 1836212579 || *(_WORD *)(a1 + 4) != 27749)
          return 0;
        goto LABEL_246;
      case 8:
        switch(*(_QWORD *)a1)
        {
          case 0x37612D656C707061:
          case 0x38612D656C707061:
          case 0x39612D656C707061:
            v6 = 0;
            v26 = 29;
            return v26 | v6;
          case 0x316D2D656C707061:
            v6 = 154880;
            goto LABEL_260;
          case 0x326D2D656C707061:
            v6 = 1610874112;
            goto LABEL_260;
        }
        if (*(_QWORD *)a1 != 0x34732D656C707061 && *(_QWORD *)a1 != 0x35732D656C707061)
        {
          v8 = 1;
          goto LABEL_195;
        }
        goto LABEL_255;
      case 9:
        v6 = 1056000;
        if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 49)
          goto LABEL_250;
        if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 50)
        {
          v6 = 0x868BA1F00;
          goto LABEL_252;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 48)
        {
LABEL_224:
          v26 = 30;
          v6 = 4096;
          return v26 | v6;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 49)
        {
LABEL_246:
          v26 = 190;
          goto LABEL_254;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 50)
        {
LABEL_255:
          v26 = 190;
          goto LABEL_256;
        }
        v19 = *(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 51;
        v6 = 154880;
        if (v19)
          goto LABEL_260;
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 52)
          goto LABEL_260;
        v6 = 1610874112;
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 53)
          goto LABEL_260;
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 54)
          goto LABEL_260;
        if (*(_QWORD *)a1 != 0x6D2D736F6E797865 || *(_BYTE *)(a1 + 8) != 51)
        {
          v24 = *(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 52;
          if (v24 || (*(_QWORD *)a1 == 0x6D2D736F6E797865 ? (v25 = *(_BYTE *)(a1 + 8) == 53) : (v25 = 0), v25))
          {
            v26 = 190;
            v6 = 5376;
            return v26 | v6;
          }
LABEL_194:
          v8 = 0;
LABEL_195:
          if (a2 != 13
            || (*(_QWORD *)a1 == 0x787265646E756874 ? (v53 = *(_QWORD *)(a1 + 5) == 0x3031317433787265) : (v53 = 0),
                !v53))
          {
            if (!v8)
            {
              v6 = 0;
              goto LABEL_206;
            }
            v6 = 0;
            if (*(_QWORD *)a1 != 0x787265646E756874)
              goto LABEL_206;
            goto LABEL_244;
          }
          v26 = 159;
LABEL_256:
          v6 = 6400;
          return v26 | v6;
        }
        goto LABEL_243;
      case 10:
        v27 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13363;
        if (v27
          || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v28 = *(unsigned __int16 *)(a1 + 8) == 13619) : (v28 = 0),
              v28
           || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v29 = *(unsigned __int16 *)(a1 + 8) == 13109) : (v29 = 0), v29)))
        {
          v6 = 0;
          LOBYTE(v9) = 0;
          v10 = 30;
          goto LABEL_240;
        }
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
          goto LABEL_257;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133)
          goto LABEL_243;
        v6 = 1056000;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13622)
          goto LABEL_260;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12855)
          goto LABEL_243;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13111)
          goto LABEL_243;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623)
        {
LABEL_257:
          v26 = 190;
          v6 = 7424;
          return v26 | v6;
        }
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879)
          goto LABEL_260;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135)
          goto LABEL_260;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391)
          goto LABEL_250;
        if (*(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12856)
        {
          v6 = 3284224;
          v26 = 186;
          return v26 | v6;
        }
        if (*(_QWORD *)a1 != 0x782D786574726F63 || *(_WORD *)(a1 + 8) != 25393)
        {
          v41 = 0;
          v6 = 0;
          v10 = 0;
          goto LABEL_175;
        }
        v6 = 0x800101D00;
        goto LABEL_250;
      case 11:
        if (*(_QWORD *)a1 != 0x612D786574726F63 || *(_QWORD *)(a1 + 3) != 0x303135612D786574)
        {
          if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x633837612D786574)
          {
            v6 = 0x1800121D00;
          }
          else
          {
            if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x303137612D786574)
            {
              v6 = 0x1868AA1F00;
LABEL_252:
              v26 = 154;
              return v26 | v6;
            }
            v6 = 1056000;
            if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x31652D6573726576)
            {
LABEL_260:
              v26 = 190;
              return v26 | v6;
            }
            if (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 3) != 0x316E2D6573726576)
            {
              if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x326E2D6573726576)
              {
                v26 = 190;
                v6 = 1756897024;
                return v26 | v6;
              }
              if (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 3) != 0x31762D6573726576)
              {
                v6 = 0;
                v10 = 0;
                v41 = 1;
LABEL_175:
                v9 = 1;
                if (!v41)
                  goto LABEL_240;
                goto LABEL_227;
              }
LABEL_225:
              v6 = 1612062464;
            }
          }
LABEL_250:
          v26 = 254;
          return v26 | v6;
        }
        v9 = 0;
        v6 = 0x868BA1F00;
        v10 = 154;
LABEL_227:
        if (v9)
        {
          v56 = *(_QWORD *)a1 == 0x787265646E756874 && *(_QWORD *)(a1 + 3) == 0x383874787265646ELL;
          if (v56
            || (*(_QWORD *)a1 == 0x787265646E756874 ? (v57 = *(_QWORD *)(a1 + 3) == 0x313874787265646ELL) : (v57 = 0),
                v57
             || (*(_QWORD *)a1 == 0x787265646E756874 ? (v58 = *(_QWORD *)(a1 + 3) == 0x333874787265646ELL) : (v58 = 0),
                 v58)))
          {
LABEL_243:
            v6 = 0;
LABEL_244:
            v26 = 30;
            return v26 | v6;
          }
        }
LABEL_240:
        if ((v9 & 1) != 0)
          return 0;
        return v10 | v6 & 0xFFFFFFF00;
      case 12:
        v6 = 1056000;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869430)
          goto LABEL_260;
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687)
          goto LABEL_260;
        if (*(_QWORD *)a1 != 0x787265646E756874 || *(_DWORD *)(a1 + 8) != 960066610)
        {
          v6 = 0;
          goto LABEL_213;
        }
        v26 = 31;
LABEL_254:
        v6 = 4352;
        return v26 | v6;
      case 15:
        if (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 7) != 0x6276743231352D65)
          goto LABEL_194;
        goto LABEL_225;
      default:
        goto LABEL_195;
    }
  }
  if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949)
    return (uint64_t)(&off_1E8199CC8)[9 * a3 + 7];
  v4 = *(_DWORD *)a1 ^ 0x6C637963 | *(_DWORD *)(a1 + 3) ^ 0x656E6F6C;
  v5 = v4 != 0;
  v6 = 29;
  if (!v4)
    goto LABEL_214;
  v6 = 0;
  if (*(_DWORD *)a1 != 1752195443 || *(_DWORD *)(a1 + 3) != 1634888040)
  {
LABEL_206:
    if (a2 == 5)
    {
      if (*(_DWORD *)a1 != 1714697825 || *(_BYTE *)(a1 + 4) != 120)
        return 0;
      v26 = 190;
      v6 = 4864;
      return v26 | v6;
    }
LABEL_213:
    v5 = 1;
LABEL_214:
    if (a2 != 7 || !v5)
    {
      if (!v5)
        return v6;
      return 0;
    }
    if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625)
      return 0;
    v6 = 0;
    v26 = 1;
    return v26 | v6;
  }
  return 6622;
}

uint64_t llvm::AArch64::getCPUArchKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v33;
  _BOOL4 v34;
  BOOL v36;
  BOOL v37;
  BOOL v39;
  int v40;
  BOOL v46;
  BOOL v47;
  _BOOL4 v51;
  uint64_t v54;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char v59;
  char v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  _BOOL4 v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;

  v2 = 0x100000003;
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949)
      return 1;
    LOBYTE(v4) = 0;
    v5 = 0x100000001;
    if (*(_DWORD *)a1 ^ 0x6C637963 | *(_DWORD *)(a1 + 3) ^ 0x656E6F6C)
      v5 = 0;
LABEL_8:
    v6 = 0;
    v7 = 0;
    v8 = v4;
LABEL_147:
    LODWORD(v4) = 0;
    goto LABEL_148;
  }
  switch(a2)
  {
    case 9:
      if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 49)
      {
        v12 = 0;
        v34 = 0;
        v8 = 0;
        v6 = 0;
        LOBYTE(v4) = 0;
        v7 = 1;
        v5 = 0x100000003;
        goto LABEL_153;
      }
      LODWORD(v4) = 0;
      v10 = *(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 50;
      v7 = 1;
      if (!v10)
      {
        v11 = 0;
        LOBYTE(v12) = 0;
        goto LABEL_146;
      }
      v5 = 0x10000000ALL;
      v6 = 0;
      v8 = 0;
      goto LABEL_148;
    case 10:
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13363)
        goto LABEL_113;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619)
        goto LABEL_113;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109)
        goto LABEL_113;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
      {
        LODWORD(v4) = 0;
        LOBYTE(v12) = 0;
        v7 = 0;
LABEL_145:
        v11 = 0x100000003;
        goto LABEL_146;
      }
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133)
        goto LABEL_113;
      v11 = 0x100000003;
      v19 = *(_QWORD *)a1 ^ 0x612D786574726F63 | *(unsigned __int16 *)(a1 + 8) ^ 0x3536;
      if (v19)
        v20 = 0;
      else
        v20 = 0x100000003;
      if (!v19)
        goto LABEL_72;
      v21 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12855;
      if (v21
        || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v22 = *(unsigned __int16 *)(a1 + 8) == 13111) : (v22 = 0), v22))
      {
LABEL_113:
        LODWORD(v4) = 0;
        LOBYTE(v12) = 0;
        v7 = 0;
        v11 = 0x100000001;
        goto LABEL_146;
      }
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623)
        goto LABEL_295;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879)
        goto LABEL_295;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135)
        goto LABEL_295;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391)
        goto LABEL_295;
      v27 = *(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12856;
      v11 = v20;
      if (v27)
      {
        v12 = 0;
        v34 = 0;
        v7 = 0;
        v8 = 0;
        v6 = 0;
        LOBYTE(v4) = 0;
        v5 = 0x10000000ELL;
        goto LABEL_153;
      }
LABEL_72:
      v4 = HIDWORD(v11);
      if (HIDWORD(v11))
      {
LABEL_295:
        LODWORD(v4) = 0;
        LOBYTE(v12) = 0;
LABEL_296:
        v7 = 0;
        goto LABEL_146;
      }
      LOBYTE(v12) = 0;
      v7 = 0;
      v6 = 0;
      v8 = 0;
      v28 = *(_QWORD *)a1 == 0x782D786574726F63 && *(_WORD *)(a1 + 8) == 25393;
      v5 = 0x100000003;
      if (!v28)
      {
LABEL_146:
        v6 = v4;
        v8 = v12;
        v5 = v11;
        goto LABEL_147;
      }
LABEL_148:
      v12 = 0;
      v34 = (v5 & 0x300000000) == 0;
      if ((_DWORD)v4 && (v5 & 0x300000000) == 0)
      {
        if (*(_QWORD *)a1 == 0x38612D656C707061 || (v12 = 1, *(_QWORD *)a1 == 0x39612D656C707061))
        {
          v5 = 0x100000001;
          LOBYTE(v4) = 1;
LABEL_220:
          v51 = a2 == 6;
          goto LABEL_221;
        }
        v34 = 1;
      }
LABEL_153:
      v40 = v7 & v34;
      if (v40 == 1)
      {
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 48)
        {
LABEL_210:
          v5 = 0x100000001;
          goto LABEL_220;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 49)
        {
          v5 = 0x100000003;
          goto LABEL_220;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 50)
        {
          v5 = 0x100000004;
          goto LABEL_220;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 51)
        {
          v5 = 0x100000005;
          goto LABEL_220;
        }
        if (*(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 52)
          goto LABEL_211;
        v46 = *(_QWORD *)a1 == 0x31612D656C707061 && *(_BYTE *)(a1 + 8) == 53;
        if (v46 || (*(_QWORD *)a1 == 0x31612D656C707061 ? (v47 = *(_BYTE *)(a1 + 8) == 54) : (v47 = 0), v47))
        {
          v5 = 0x100000007;
          goto LABEL_220;
        }
      }
      if (!v12)
        goto LABEL_187;
      switch(*(_QWORD *)a1)
      {
        case 0x316D2D656C707061:
LABEL_211:
          v5 = 0x100000006;
          goto LABEL_220;
        case 0x326D2D656C707061:
          v5 = 0x100000007;
LABEL_217:
          v51 = a2 == 6;
          LOBYTE(v4) = 1;
          goto LABEL_221;
        case 0x34732D656C707061:
          v5 = 0x100000004;
          goto LABEL_217;
        case 0x35732D656C707061:
          v5 = 0x100000004;
          goto LABEL_220;
      }
LABEL_187:
      if (!v40)
        goto LABEL_200;
      if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 51)
        goto LABEL_210;
      if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 52)
        goto LABEL_291;
      if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 53)
        goto LABEL_291;
LABEL_200:
      v51 = a2 == 6;
      if (a2 == 6 && v34)
      {
        if (*(_DWORD *)a1 != 1802264934 || *(_WORD *)(a1 + 4) != 29295)
        {
          v51 = 1;
          goto LABEL_232;
        }
LABEL_287:
        v2 = 0x100000001;
        goto LABEL_291;
      }
LABEL_221:
      v54 = v5 & 0x100000000;
      if (a2 != 7 || v54)
      {
        if (a2 != 4 || v54 || *(_DWORD *)a1 != 1870230123)
          goto LABEL_232;
        goto LABEL_287;
      }
      if (*(_DWORD *)a1 == 1752195443 && *(_DWORD *)(a1 + 3) == 1634888040)
      {
LABEL_288:
        v2 = 0x100000004;
        goto LABEL_291;
      }
LABEL_232:
      v56 = v5 & 0x100000000;
      if (!v6
        || v56
        || (*(_QWORD *)a1 == 0x787265646E756874 ? (v57 = *(_DWORD *)(a1 + 8) == 960066610) : (v57 = 0), !v57))
      {
        if (a2 != 13
          || v56
          || (*(_QWORD *)a1 == 0x787265646E756874 ? (v58 = *(_QWORD *)(a1 + 5) == 0x3031317433787265) : (v58 = 0),
              !v58))
        {
          v59 = v4 ^ 1;
          if (v56)
            v59 = 1;
          if ((v59 & 1) != 0 || *(_QWORD *)a1 != 0x787265646E756874)
          {
            v60 = v8 ^ 1;
            if (v56)
              v60 = 1;
            if ((v60 & 1) != 0
              || (*(_QWORD *)a1 == 0x787265646E756874
                ? (v61 = *(_QWORD *)(a1 + 3) == 0x383874787265646ELL)
                : (v61 = 0),
                  !v61
               && (*(_QWORD *)a1 == 0x787265646E756874
                 ? (v62 = *(_QWORD *)(a1 + 3) == 0x313874787265646ELL)
                 : (v62 = 0),
                   !v62
                && (*(_QWORD *)a1 == 0x787265646E756874
                  ? (v63 = *(_QWORD *)(a1 + 3) == 0x333874787265646ELL)
                  : (v63 = 0),
                    !v63))))
            {
              if (v56)
                v64 = 0;
              else
                v64 = v51;
              if (!v64
                || (*(_DWORD *)a1 == 829846388 ? (v65 = *(unsigned __int16 *)(a1 + 4) == 12337) : (v65 = 0), !v65))
              {
                if (a2 != 5
                  || v56
                  || (*(_DWORD *)a1 == 1714697825 ? (v66 = *(_BYTE *)(a1 + 4) == 120) : (v66 = 0), !v66))
                {
                  if (!v64
                    || (*(_DWORD *)a1 == 1836212579 ? (v67 = *(unsigned __int16 *)(a1 + 4) == 27749) : (v67 = 0), !v67))
                  {
                    if (a2 != 7 || v56)
                    {
                      v2 = v5;
                    }
                    else
                    {
                      v2 = 0x100000000;
                      if (*(_DWORD *)a1 ^ 0x61766E69 | *(_DWORD *)(a1 + 3) ^ 0x64696C61)
                        v2 = v5;
                    }
                  }
                }
              }
              goto LABEL_291;
            }
          }
          goto LABEL_287;
        }
        goto LABEL_288;
      }
      v2 = 0x100000002;
LABEL_291:
      if ((v2 & 0xFF00000000) != 0)
        return v2;
      else
        return 0;
    case 11:
      v29 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x303135612D786574;
      LODWORD(v4) = !v29;
      if (v29)
      {
        v11 = 0x10000000ALL;
      }
      else
      {
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x633837612D786574)
        {
          LODWORD(v4) = 0;
          v7 = 0;
          LOBYTE(v12) = 1;
          goto LABEL_145;
        }
        if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x303137612D786574)
        {
          LODWORD(v4) = 0;
          v7 = 0;
          v11 = 0x10000000ALL;
          goto LABEL_143;
        }
        v11 = 0;
      }
      if ((_DWORD)v4)
      {
        v36 = *(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x31652D6573726576;
        if (v36
          || (*(_QWORD *)a1 == 0x65737265766F656ELL ? (v37 = *(_QWORD *)(a1 + 3) == 0x316E2D6573726576) : (v37 = 0),
              v37))
        {
          LODWORD(v4) = 0;
          v6 = 0;
          v7 = 0;
          v8 = 1;
          v5 = 0x100000003;
          goto LABEL_148;
        }
        if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x326E2D6573726576)
        {
          LODWORD(v4) = 0;
          v6 = 0;
          v7 = 0;
          v5 = 0x100000006;
          v8 = 1;
          goto LABEL_148;
        }
        v39 = *(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x31762D6573726576;
        LOBYTE(v12) = 1;
        if (!v39)
        {
          LODWORD(v4) = 0;
          goto LABEL_296;
        }
        v5 = 0x100000005;
        LOBYTE(v4) = 1;
        goto LABEL_8;
      }
      v7 = 0;
LABEL_143:
      LOBYTE(v12) = 1;
      goto LABEL_146;
    case 12:
      v12 = 0;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869430)
      {
        v7 = 0;
        LODWORD(v4) = 1;
        goto LABEL_145;
      }
      v33 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687;
      v34 = 1;
      if (!v33)
      {
        v5 = 0;
        v7 = 0;
        v8 = 0;
        v6 = 1;
        LOBYTE(v4) = 0;
        goto LABEL_153;
      }
      v11 = 0x100000003;
      LODWORD(v4) = 1;
      v7 = 0;
      goto LABEL_146;
    case 15:
      LODWORD(v4) = 0;
      if (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 7) != 0x6276743231352D65)
      {
        v5 = 0;
        v6 = 0;
        v8 = 0;
        v7 = 0;
        goto LABEL_148;
      }
      v5 = 0x100000005;
      goto LABEL_8;
    default:
      LODWORD(v4) = a2 == 8;
      v6 = 0;
      if (a2 != 8)
      {
        v8 = 0;
        v7 = 0;
        v5 = 0;
        goto LABEL_148;
      }
      LODWORD(v4) = 1;
      if (*(_QWORD *)a1 != 0x37612D656C707061)
      {
        v5 = 0;
        v8 = 0;
        v7 = 0;
        goto LABEL_148;
      }
      v5 = 0x100000001;
      v8 = 0;
      goto LABEL_220;
  }
}

BOOL llvm::AArch64::getExtensionFeatures(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  unint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  unint64_t v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  unint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  unint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  unint64_t v274;
  char *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  unint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  char *v293;
  unint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  unint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  unint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  unint64_t v324;
  char *v325;
  char *v326;
  char *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  unint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  char *v342;
  char *v343;
  unint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  char *v352;
  char *v353;
  unint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  unint64_t v364;
  char *v365;
  char *v366;
  char *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  char *v372;
  char *v373;
  unint64_t v374;
  char *v375;
  char *v376;
  char *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  unint64_t v384;
  char *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  unint64_t v394;
  char *v395;
  char *v396;
  char *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  unint64_t v404;
  char *v405;
  char *v406;
  char *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char *v412;
  char *v413;
  unint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  unint64_t v424;
  char *v425;
  char *v426;
  char *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char *v432;
  char *v433;

  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      v5 = a2[1];
      v4 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v4)
      {
        v7 = *a2;
        v8 = (v5 - *a2) >> 4;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60)
          goto LABEL_820;
        v10 = v4 - (_QWORD)v7;
        if (v10 >> 3 > v9)
          v9 = v10 >> 3;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v11 = 0xFFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          if (v11 >> 60)
            goto LABEL_821;
          v12 = (char *)operator new(16 * v11);
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[16 * v8];
        *(_QWORD *)v13 = "+crc";
        *((_QWORD *)v13 + 1) = 4;
        v6 = v13 + 16;
        if (v5 != v7)
        {
          do
          {
            *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
            v13 -= 16;
            v5 -= 16;
          }
          while (v5 != v7);
          v5 = *a2;
        }
        *a2 = v13;
        a2[1] = v6;
        a2[2] = &v12[16 * v11];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = "+crc";
        *((_QWORD *)v5 + 1) = 4;
        v6 = v5 + 16;
      }
      a2[1] = v6;
    }
    if ((a1 & 0x100) != 0)
    {
      v15 = a2[1];
      v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = *a2;
        v18 = (v15 - *a2) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          goto LABEL_820;
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 60)
            goto LABEL_821;
          v22 = (char *)operator new(16 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[16 * v18];
        *(_QWORD *)v23 = "+lse";
        *((_QWORD *)v23 + 1) = 4;
        v16 = v23 + 16;
        if (v15 != v17)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v15 - 1);
            v23 -= 16;
            v15 -= 16;
          }
          while (v15 != v17);
          v15 = *a2;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[16 * v21];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v15 = "+lse";
        *((_QWORD *)v15 + 1) = 4;
        v16 = v15 + 16;
      }
      a2[1] = v16;
    }
    if ((a1 & 0x1000) != 0)
    {
      v25 = a2[1];
      v24 = (unint64_t)a2[2];
      if ((unint64_t)v25 >= v24)
      {
        v27 = *a2;
        v28 = (v25 - *a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          goto LABEL_820;
        v30 = v24 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 60)
            goto LABEL_821;
          v32 = (char *)operator new(16 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[16 * v28];
        *(_QWORD *)v33 = "+rdm";
        *((_QWORD *)v33 + 1) = 4;
        v26 = v33 + 16;
        if (v25 != v27)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v25 - 1);
            v33 -= 16;
            v25 -= 16;
          }
          while (v25 != v27);
          v25 = *a2;
        }
        *a2 = v33;
        a2[1] = v26;
        a2[2] = &v32[16 * v31];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v25 = "+rdm";
        *((_QWORD *)v25 + 1) = 4;
        v26 = v25 + 16;
      }
      a2[1] = v26;
    }
    if ((a1 & 4) != 0)
    {
      v35 = a2[1];
      v34 = (unint64_t)a2[2];
      if ((unint64_t)v35 >= v34)
      {
        v37 = *a2;
        v38 = (v35 - *a2) >> 4;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60)
          goto LABEL_820;
        v40 = v34 - (_QWORD)v37;
        if (v40 >> 3 > v39)
          v39 = v40 >> 3;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v41 = 0xFFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 60)
            goto LABEL_821;
          v42 = (char *)operator new(16 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[16 * v38];
        *(_QWORD *)v43 = "+crypto";
        *((_QWORD *)v43 + 1) = 7;
        v36 = v43 + 16;
        if (v35 != v37)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v35 - 1);
            v43 -= 16;
            v35 -= 16;
          }
          while (v35 != v37);
          v35 = *a2;
        }
        *a2 = v43;
        a2[1] = v36;
        a2[2] = &v42[16 * v41];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v35 = "+crypto";
        *((_QWORD *)v35 + 1) = 7;
        v36 = v35 + 16;
      }
      a2[1] = v36;
    }
    if ((a1 & 0x2000) != 0)
    {
      v45 = a2[1];
      v44 = (unint64_t)a2[2];
      if ((unint64_t)v45 >= v44)
      {
        v47 = *a2;
        v48 = (v45 - *a2) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          goto LABEL_820;
        v50 = v44 - (_QWORD)v47;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v51 = 0xFFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 60)
            goto LABEL_821;
          v52 = (char *)operator new(16 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[16 * v48];
        *(_QWORD *)v53 = "+sm4";
        *((_QWORD *)v53 + 1) = 4;
        v46 = v53 + 16;
        if (v45 != v47)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v45 - 1);
            v53 -= 16;
            v45 -= 16;
          }
          while (v45 != v47);
          v45 = *a2;
        }
        *a2 = v53;
        a2[1] = v46;
        a2[2] = &v52[16 * v51];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_QWORD *)v45 = "+sm4";
        *((_QWORD *)v45 + 1) = 4;
        v46 = v45 + 16;
      }
      a2[1] = v46;
    }
    if ((a1 & 0x4000) != 0)
    {
      v55 = a2[1];
      v54 = (unint64_t)a2[2];
      if ((unint64_t)v55 >= v54)
      {
        v57 = *a2;
        v58 = (v55 - *a2) >> 4;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 60)
          goto LABEL_820;
        v60 = v54 - (_QWORD)v57;
        if (v60 >> 3 > v59)
          v59 = v60 >> 3;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
          v61 = 0xFFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          if (v61 >> 60)
            goto LABEL_821;
          v62 = (char *)operator new(16 * v61);
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[16 * v58];
        *(_QWORD *)v63 = "+sha3";
        *((_QWORD *)v63 + 1) = 5;
        v56 = v63 + 16;
        if (v55 != v57)
        {
          do
          {
            *((_OWORD *)v63 - 1) = *((_OWORD *)v55 - 1);
            v63 -= 16;
            v55 -= 16;
          }
          while (v55 != v57);
          v55 = *a2;
        }
        *a2 = v63;
        a2[1] = v56;
        a2[2] = &v62[16 * v61];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_QWORD *)v55 = "+sha3";
        *((_QWORD *)v55 + 1) = 5;
        v56 = v55 + 16;
      }
      a2[1] = v56;
    }
    if ((a1 & 0x8000) != 0)
    {
      v65 = a2[1];
      v64 = (unint64_t)a2[2];
      if ((unint64_t)v65 >= v64)
      {
        v67 = *a2;
        v68 = (v65 - *a2) >> 4;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 60)
          goto LABEL_820;
        v70 = v64 - (_QWORD)v67;
        if (v70 >> 3 > v69)
          v69 = v70 >> 3;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
          v71 = 0xFFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          if (v71 >> 60)
            goto LABEL_821;
          v72 = (char *)operator new(16 * v71);
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[16 * v68];
        *(_QWORD *)v73 = "+sha2";
        *((_QWORD *)v73 + 1) = 5;
        v66 = v73 + 16;
        if (v65 != v67)
        {
          do
          {
            *((_OWORD *)v73 - 1) = *((_OWORD *)v65 - 1);
            v73 -= 16;
            v65 -= 16;
          }
          while (v65 != v67);
          v65 = *a2;
        }
        *a2 = v73;
        a2[1] = v66;
        a2[2] = &v72[16 * v71];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *(_QWORD *)v65 = "+sha2";
        *((_QWORD *)v65 + 1) = 5;
        v66 = v65 + 16;
      }
      a2[1] = v66;
    }
    if ((a1 & 0x10000) != 0)
    {
      v75 = a2[1];
      v74 = (unint64_t)a2[2];
      if ((unint64_t)v75 >= v74)
      {
        v77 = *a2;
        v78 = (v75 - *a2) >> 4;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 60)
          goto LABEL_820;
        v80 = v74 - (_QWORD)v77;
        if (v80 >> 3 > v79)
          v79 = v80 >> 3;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
          v81 = 0xFFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        if (v81)
        {
          if (v81 >> 60)
            goto LABEL_821;
          v82 = (char *)operator new(16 * v81);
        }
        else
        {
          v82 = 0;
        }
        v83 = &v82[16 * v78];
        *(_QWORD *)v83 = "+aes";
        *((_QWORD *)v83 + 1) = 4;
        v76 = v83 + 16;
        if (v75 != v77)
        {
          do
          {
            *((_OWORD *)v83 - 1) = *((_OWORD *)v75 - 1);
            v83 -= 16;
            v75 -= 16;
          }
          while (v75 != v77);
          v75 = *a2;
        }
        *a2 = v83;
        a2[1] = v76;
        a2[2] = &v82[16 * v81];
        if (v75)
          operator delete(v75);
      }
      else
      {
        *(_QWORD *)v75 = "+aes";
        *((_QWORD *)v75 + 1) = 4;
        v76 = v75 + 16;
      }
      a2[1] = v76;
    }
    if ((a1 & 0x400) != 0)
    {
      v85 = a2[1];
      v84 = (unint64_t)a2[2];
      if ((unint64_t)v85 >= v84)
      {
        v87 = *a2;
        v88 = (v85 - *a2) >> 4;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 60)
          goto LABEL_820;
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 3 > v89)
          v89 = v90 >> 3;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
          v91 = 0xFFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          if (v91 >> 60)
            goto LABEL_821;
          v92 = (char *)operator new(16 * v91);
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[16 * v88];
        *(_QWORD *)v93 = "+dotprod";
        *((_QWORD *)v93 + 1) = 8;
        v86 = v93 + 16;
        if (v85 != v87)
        {
          do
          {
            *((_OWORD *)v93 - 1) = *((_OWORD *)v85 - 1);
            v93 -= 16;
            v85 -= 16;
          }
          while (v85 != v87);
          v85 = *a2;
        }
        *a2 = v93;
        a2[1] = v86;
        a2[2] = &v92[16 * v91];
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(_QWORD *)v85 = "+dotprod";
        *((_QWORD *)v85 + 1) = 8;
        v86 = v85 + 16;
      }
      a2[1] = v86;
    }
    if ((a1 & 8) != 0)
    {
      v95 = a2[1];
      v94 = (unint64_t)a2[2];
      if ((unint64_t)v95 >= v94)
      {
        v97 = *a2;
        v98 = (v95 - *a2) >> 4;
        v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 60)
          goto LABEL_820;
        v100 = v94 - (_QWORD)v97;
        if (v100 >> 3 > v99)
          v99 = v100 >> 3;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
          v101 = 0xFFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          if (v101 >> 60)
            goto LABEL_821;
          v102 = (char *)operator new(16 * v101);
        }
        else
        {
          v102 = 0;
        }
        v103 = &v102[16 * v98];
        *(_QWORD *)v103 = "+fp-armv8";
        *((_QWORD *)v103 + 1) = 9;
        v96 = v103 + 16;
        if (v95 != v97)
        {
          do
          {
            *((_OWORD *)v103 - 1) = *((_OWORD *)v95 - 1);
            v103 -= 16;
            v95 -= 16;
          }
          while (v95 != v97);
          v95 = *a2;
        }
        *a2 = v103;
        a2[1] = v96;
        a2[2] = &v102[16 * v101];
        if (v95)
          operator delete(v95);
      }
      else
      {
        *(_QWORD *)v95 = "+fp-armv8";
        *((_QWORD *)v95 + 1) = 9;
        v96 = v95 + 16;
      }
      a2[1] = v96;
    }
    if ((a1 & 0x10) != 0)
    {
      v105 = a2[1];
      v104 = (unint64_t)a2[2];
      if ((unint64_t)v105 >= v104)
      {
        v107 = *a2;
        v108 = (v105 - *a2) >> 4;
        v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 60)
          goto LABEL_820;
        v110 = v104 - (_QWORD)v107;
        if (v110 >> 3 > v109)
          v109 = v110 >> 3;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0)
          v111 = 0xFFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          if (v111 >> 60)
            goto LABEL_821;
          v112 = (char *)operator new(16 * v111);
        }
        else
        {
          v112 = 0;
        }
        v113 = &v112[16 * v108];
        *(_QWORD *)v113 = "+neon";
        *((_QWORD *)v113 + 1) = 5;
        v106 = v113 + 16;
        if (v105 != v107)
        {
          do
          {
            *((_OWORD *)v113 - 1) = *((_OWORD *)v105 - 1);
            v113 -= 16;
            v105 -= 16;
          }
          while (v105 != v107);
          v105 = *a2;
        }
        *a2 = v113;
        a2[1] = v106;
        a2[2] = &v112[16 * v111];
        if (v105)
          operator delete(v105);
      }
      else
      {
        *(_QWORD *)v105 = "+neon";
        *((_QWORD *)v105 + 1) = 5;
        v106 = v105 + 16;
      }
      a2[1] = v106;
    }
    if ((a1 & 0x20) != 0)
    {
      v115 = a2[1];
      v114 = (unint64_t)a2[2];
      if ((unint64_t)v115 >= v114)
      {
        v117 = *a2;
        v118 = (v115 - *a2) >> 4;
        v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) >> 60)
          goto LABEL_820;
        v120 = v114 - (_QWORD)v117;
        if (v120 >> 3 > v119)
          v119 = v120 >> 3;
        if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF0)
          v121 = 0xFFFFFFFFFFFFFFFLL;
        else
          v121 = v119;
        if (v121)
        {
          if (v121 >> 60)
            goto LABEL_821;
          v122 = (char *)operator new(16 * v121);
        }
        else
        {
          v122 = 0;
        }
        v123 = &v122[16 * v118];
        *(_QWORD *)v123 = "+fullfp16";
        *((_QWORD *)v123 + 1) = 9;
        v116 = v123 + 16;
        if (v115 != v117)
        {
          do
          {
            *((_OWORD *)v123 - 1) = *((_OWORD *)v115 - 1);
            v123 -= 16;
            v115 -= 16;
          }
          while (v115 != v117);
          v115 = *a2;
        }
        *a2 = v123;
        a2[1] = v116;
        a2[2] = &v122[16 * v121];
        if (v115)
          operator delete(v115);
      }
      else
      {
        *(_QWORD *)v115 = "+fullfp16";
        *((_QWORD *)v115 + 1) = 9;
        v116 = v115 + 16;
      }
      a2[1] = v116;
    }
    if ((a1 & 0x20000) != 0)
    {
      v125 = a2[1];
      v124 = (unint64_t)a2[2];
      if ((unint64_t)v125 >= v124)
      {
        v127 = *a2;
        v128 = (v125 - *a2) >> 4;
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 60)
          goto LABEL_820;
        v130 = v124 - (_QWORD)v127;
        if (v130 >> 3 > v129)
          v129 = v130 >> 3;
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
          v131 = 0xFFFFFFFFFFFFFFFLL;
        else
          v131 = v129;
        if (v131)
        {
          if (v131 >> 60)
            goto LABEL_821;
          v132 = (char *)operator new(16 * v131);
        }
        else
        {
          v132 = 0;
        }
        v133 = &v132[16 * v128];
        *(_QWORD *)v133 = "+fp16fml";
        *((_QWORD *)v133 + 1) = 8;
        v126 = v133 + 16;
        if (v125 != v127)
        {
          do
          {
            *((_OWORD *)v133 - 1) = *((_OWORD *)v125 - 1);
            v133 -= 16;
            v125 -= 16;
          }
          while (v125 != v127);
          v125 = *a2;
        }
        *a2 = v133;
        a2[1] = v126;
        a2[2] = &v132[16 * v131];
        if (v125)
          operator delete(v125);
      }
      else
      {
        *(_QWORD *)v125 = "+fp16fml";
        *((_QWORD *)v125 + 1) = 8;
        v126 = v125 + 16;
      }
      a2[1] = v126;
    }
    if ((a1 & 0x40) != 0)
    {
      v135 = a2[1];
      v134 = (unint64_t)a2[2];
      if ((unint64_t)v135 >= v134)
      {
        v137 = *a2;
        v138 = (v135 - *a2) >> 4;
        v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 60)
          goto LABEL_820;
        v140 = v134 - (_QWORD)v137;
        if (v140 >> 3 > v139)
          v139 = v140 >> 3;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0)
          v141 = 0xFFFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        if (v141)
        {
          if (v141 >> 60)
            goto LABEL_821;
          v142 = (char *)operator new(16 * v141);
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[16 * v138];
        *(_QWORD *)v143 = "+spe";
        *((_QWORD *)v143 + 1) = 4;
        v136 = v143 + 16;
        if (v135 != v137)
        {
          do
          {
            *((_OWORD *)v143 - 1) = *((_OWORD *)v135 - 1);
            v143 -= 16;
            v135 -= 16;
          }
          while (v135 != v137);
          v135 = *a2;
        }
        *a2 = v143;
        a2[1] = v136;
        a2[2] = &v142[16 * v141];
        if (v135)
          operator delete(v135);
      }
      else
      {
        *(_QWORD *)v135 = "+spe";
        *((_QWORD *)v135 + 1) = 4;
        v136 = v135 + 16;
      }
      a2[1] = v136;
    }
    if ((a1 & 0x80) != 0)
    {
      v145 = a2[1];
      v144 = (unint64_t)a2[2];
      if ((unint64_t)v145 >= v144)
      {
        v147 = *a2;
        v148 = (v145 - *a2) >> 4;
        v149 = v148 + 1;
        if ((unint64_t)(v148 + 1) >> 60)
          goto LABEL_820;
        v150 = v144 - (_QWORD)v147;
        if (v150 >> 3 > v149)
          v149 = v150 >> 3;
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
          v151 = 0xFFFFFFFFFFFFFFFLL;
        else
          v151 = v149;
        if (v151)
        {
          if (v151 >> 60)
            goto LABEL_821;
          v152 = (char *)operator new(16 * v151);
        }
        else
        {
          v152 = 0;
        }
        v153 = &v152[16 * v148];
        *(_QWORD *)v153 = "+ras";
        *((_QWORD *)v153 + 1) = 4;
        v146 = v153 + 16;
        if (v145 != v147)
        {
          do
          {
            *((_OWORD *)v153 - 1) = *((_OWORD *)v145 - 1);
            v153 -= 16;
            v145 -= 16;
          }
          while (v145 != v147);
          v145 = *a2;
        }
        *a2 = v153;
        a2[1] = v146;
        a2[2] = &v152[16 * v151];
        if (v145)
          operator delete(v145);
      }
      else
      {
        *(_QWORD *)v145 = "+ras";
        *((_QWORD *)v145 + 1) = 4;
        v146 = v145 + 16;
      }
      a2[1] = v146;
    }
    if ((a1 & 0x200) != 0)
    {
      v155 = a2[1];
      v154 = (unint64_t)a2[2];
      if ((unint64_t)v155 >= v154)
      {
        v157 = *a2;
        v158 = (v155 - *a2) >> 4;
        v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 60)
          goto LABEL_820;
        v160 = v154 - (_QWORD)v157;
        if (v160 >> 3 > v159)
          v159 = v160 >> 3;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF0)
          v161 = 0xFFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          if (v161 >> 60)
            goto LABEL_821;
          v162 = (char *)operator new(16 * v161);
        }
        else
        {
          v162 = 0;
        }
        v163 = &v162[16 * v158];
        *(_QWORD *)v163 = "+sve";
        *((_QWORD *)v163 + 1) = 4;
        v156 = v163 + 16;
        if (v155 != v157)
        {
          do
          {
            *((_OWORD *)v163 - 1) = *((_OWORD *)v155 - 1);
            v163 -= 16;
            v155 -= 16;
          }
          while (v155 != v157);
          v155 = *a2;
        }
        *a2 = v163;
        a2[1] = v156;
        a2[2] = &v162[16 * v161];
        if (v155)
          operator delete(v155);
      }
      else
      {
        *(_QWORD *)v155 = "+sve";
        *((_QWORD *)v155 + 1) = 4;
        v156 = v155 + 16;
      }
      a2[1] = v156;
    }
    if ((a1 & 0x800000) != 0)
    {
      v165 = a2[1];
      v164 = (unint64_t)a2[2];
      if ((unint64_t)v165 >= v164)
      {
        v167 = *a2;
        v168 = (v165 - *a2) >> 4;
        v169 = v168 + 1;
        if ((unint64_t)(v168 + 1) >> 60)
          goto LABEL_820;
        v170 = v164 - (_QWORD)v167;
        if (v170 >> 3 > v169)
          v169 = v170 >> 3;
        if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0)
          v171 = 0xFFFFFFFFFFFFFFFLL;
        else
          v171 = v169;
        if (v171)
        {
          if (v171 >> 60)
            goto LABEL_821;
          v172 = (char *)operator new(16 * v171);
        }
        else
        {
          v172 = 0;
        }
        v173 = &v172[16 * v168];
        *(_QWORD *)v173 = "+sve2";
        *((_QWORD *)v173 + 1) = 5;
        v166 = v173 + 16;
        if (v165 != v167)
        {
          do
          {
            *((_OWORD *)v173 - 1) = *((_OWORD *)v165 - 1);
            v173 -= 16;
            v165 -= 16;
          }
          while (v165 != v167);
          v165 = *a2;
        }
        *a2 = v173;
        a2[1] = v166;
        a2[2] = &v172[16 * v171];
        if (v165)
          operator delete(v165);
      }
      else
      {
        *(_QWORD *)v165 = "+sve2";
        *((_QWORD *)v165 + 1) = 5;
        v166 = v165 + 16;
      }
      a2[1] = v166;
    }
    if ((a1 & 0x1000000) != 0)
    {
      v175 = a2[1];
      v174 = (unint64_t)a2[2];
      if ((unint64_t)v175 >= v174)
      {
        v177 = *a2;
        v178 = (v175 - *a2) >> 4;
        v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 60)
          goto LABEL_820;
        v180 = v174 - (_QWORD)v177;
        if (v180 >> 3 > v179)
          v179 = v180 >> 3;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0)
          v181 = 0xFFFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          if (v181 >> 60)
            goto LABEL_821;
          v182 = (char *)operator new(16 * v181);
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[16 * v178];
        *(_QWORD *)v183 = "+sve2-aes";
        *((_QWORD *)v183 + 1) = 9;
        v176 = v183 + 16;
        if (v175 != v177)
        {
          do
          {
            *((_OWORD *)v183 - 1) = *((_OWORD *)v175 - 1);
            v183 -= 16;
            v175 -= 16;
          }
          while (v175 != v177);
          v175 = *a2;
        }
        *a2 = v183;
        a2[1] = v176;
        a2[2] = &v182[16 * v181];
        if (v175)
          operator delete(v175);
      }
      else
      {
        *(_QWORD *)v175 = "+sve2-aes";
        *((_QWORD *)v175 + 1) = 9;
        v176 = v175 + 16;
      }
      a2[1] = v176;
    }
    if ((a1 & 0x2000000) != 0)
    {
      v185 = a2[1];
      v184 = (unint64_t)a2[2];
      if ((unint64_t)v185 >= v184)
      {
        v187 = *a2;
        v188 = (v185 - *a2) >> 4;
        v189 = v188 + 1;
        if ((unint64_t)(v188 + 1) >> 60)
          goto LABEL_820;
        v190 = v184 - (_QWORD)v187;
        if (v190 >> 3 > v189)
          v189 = v190 >> 3;
        if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
          v191 = 0xFFFFFFFFFFFFFFFLL;
        else
          v191 = v189;
        if (v191)
        {
          if (v191 >> 60)
            goto LABEL_821;
          v192 = (char *)operator new(16 * v191);
        }
        else
        {
          v192 = 0;
        }
        v193 = &v192[16 * v188];
        *(_QWORD *)v193 = "+sve2-sm4";
        *((_QWORD *)v193 + 1) = 9;
        v186 = v193 + 16;
        if (v185 != v187)
        {
          do
          {
            *((_OWORD *)v193 - 1) = *((_OWORD *)v185 - 1);
            v193 -= 16;
            v185 -= 16;
          }
          while (v185 != v187);
          v185 = *a2;
        }
        *a2 = v193;
        a2[1] = v186;
        a2[2] = &v192[16 * v191];
        if (v185)
          operator delete(v185);
      }
      else
      {
        *(_QWORD *)v185 = "+sve2-sm4";
        *((_QWORD *)v185 + 1) = 9;
        v186 = v185 + 16;
      }
      a2[1] = v186;
    }
    if ((a1 & 0x4000000) != 0)
    {
      v195 = a2[1];
      v194 = (unint64_t)a2[2];
      if ((unint64_t)v195 >= v194)
      {
        v197 = *a2;
        v198 = (v195 - *a2) >> 4;
        v199 = v198 + 1;
        if ((unint64_t)(v198 + 1) >> 60)
          goto LABEL_820;
        v200 = v194 - (_QWORD)v197;
        if (v200 >> 3 > v199)
          v199 = v200 >> 3;
        if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF0)
          v201 = 0xFFFFFFFFFFFFFFFLL;
        else
          v201 = v199;
        if (v201)
        {
          if (v201 >> 60)
            goto LABEL_821;
          v202 = (char *)operator new(16 * v201);
        }
        else
        {
          v202 = 0;
        }
        v203 = &v202[16 * v198];
        *(_QWORD *)v203 = "+sve2-sha3";
        *((_QWORD *)v203 + 1) = 10;
        v196 = v203 + 16;
        if (v195 != v197)
        {
          do
          {
            *((_OWORD *)v203 - 1) = *((_OWORD *)v195 - 1);
            v203 -= 16;
            v195 -= 16;
          }
          while (v195 != v197);
          v195 = *a2;
        }
        *a2 = v203;
        a2[1] = v196;
        a2[2] = &v202[16 * v201];
        if (v195)
          operator delete(v195);
      }
      else
      {
        *(_QWORD *)v195 = "+sve2-sha3";
        *((_QWORD *)v195 + 1) = 10;
        v196 = v195 + 16;
      }
      a2[1] = v196;
    }
    if ((a1 & 0x8000000) != 0)
    {
      v205 = a2[1];
      v204 = (unint64_t)a2[2];
      if ((unint64_t)v205 >= v204)
      {
        v207 = *a2;
        v208 = (v205 - *a2) >> 4;
        v209 = v208 + 1;
        if ((unint64_t)(v208 + 1) >> 60)
          goto LABEL_820;
        v210 = v204 - (_QWORD)v207;
        if (v210 >> 3 > v209)
          v209 = v210 >> 3;
        if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF0)
          v211 = 0xFFFFFFFFFFFFFFFLL;
        else
          v211 = v209;
        if (v211)
        {
          if (v211 >> 60)
            goto LABEL_821;
          v212 = (char *)operator new(16 * v211);
        }
        else
        {
          v212 = 0;
        }
        v213 = &v212[16 * v208];
        *(_QWORD *)v213 = "+sve2-bitperm";
        *((_QWORD *)v213 + 1) = 13;
        v206 = v213 + 16;
        if (v205 != v207)
        {
          do
          {
            *((_OWORD *)v213 - 1) = *((_OWORD *)v205 - 1);
            v213 -= 16;
            v205 -= 16;
          }
          while (v205 != v207);
          v205 = *a2;
        }
        *a2 = v213;
        a2[1] = v206;
        a2[2] = &v212[16 * v211];
        if (v205)
          operator delete(v205);
      }
      else
      {
        *(_QWORD *)v205 = "+sve2-bitperm";
        *((_QWORD *)v205 + 1) = 13;
        v206 = v205 + 16;
      }
      a2[1] = v206;
    }
    if ((a1 & 0x800) != 0)
    {
      v215 = a2[1];
      v214 = (unint64_t)a2[2];
      if ((unint64_t)v215 >= v214)
      {
        v217 = *a2;
        v218 = (v215 - *a2) >> 4;
        v219 = v218 + 1;
        if ((unint64_t)(v218 + 1) >> 60)
          goto LABEL_820;
        v220 = v214 - (_QWORD)v217;
        if (v220 >> 3 > v219)
          v219 = v220 >> 3;
        if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0)
          v221 = 0xFFFFFFFFFFFFFFFLL;
        else
          v221 = v219;
        if (v221)
        {
          if (v221 >> 60)
            goto LABEL_821;
          v222 = (char *)operator new(16 * v221);
        }
        else
        {
          v222 = 0;
        }
        v223 = &v222[16 * v218];
        *(_QWORD *)v223 = "+rcpc";
        *((_QWORD *)v223 + 1) = 5;
        v216 = v223 + 16;
        if (v215 != v217)
        {
          do
          {
            *((_OWORD *)v223 - 1) = *((_OWORD *)v215 - 1);
            v223 -= 16;
            v215 -= 16;
          }
          while (v215 != v217);
          v215 = *a2;
        }
        *a2 = v223;
        a2[1] = v216;
        a2[2] = &v222[16 * v221];
        if (v215)
          operator delete(v215);
      }
      else
      {
        *(_QWORD *)v215 = "+rcpc";
        *((_QWORD *)v215 + 1) = 5;
        v216 = v215 + 16;
      }
      a2[1] = v216;
    }
    if ((a1 & 0x40000) != 0)
    {
      v225 = a2[1];
      v224 = (unint64_t)a2[2];
      if ((unint64_t)v225 >= v224)
      {
        v227 = *a2;
        v228 = (v225 - *a2) >> 4;
        v229 = v228 + 1;
        if ((unint64_t)(v228 + 1) >> 60)
          goto LABEL_820;
        v230 = v224 - (_QWORD)v227;
        if (v230 >> 3 > v229)
          v229 = v230 >> 3;
        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF0)
          v231 = 0xFFFFFFFFFFFFFFFLL;
        else
          v231 = v229;
        if (v231)
        {
          if (v231 >> 60)
            goto LABEL_821;
          v232 = (char *)operator new(16 * v231);
        }
        else
        {
          v232 = 0;
        }
        v233 = &v232[16 * v228];
        *(_QWORD *)v233 = "+rand";
        *((_QWORD *)v233 + 1) = 5;
        v226 = v233 + 16;
        if (v225 != v227)
        {
          do
          {
            *((_OWORD *)v233 - 1) = *((_OWORD *)v225 - 1);
            v233 -= 16;
            v225 -= 16;
          }
          while (v225 != v227);
          v225 = *a2;
        }
        *a2 = v233;
        a2[1] = v226;
        a2[2] = &v232[16 * v231];
        if (v225)
          operator delete(v225);
      }
      else
      {
        *(_QWORD *)v225 = "+rand";
        *((_QWORD *)v225 + 1) = 5;
        v226 = v225 + 16;
      }
      a2[1] = v226;
    }
    if ((a1 & 0x80000) != 0)
    {
      v235 = a2[1];
      v234 = (unint64_t)a2[2];
      if ((unint64_t)v235 >= v234)
      {
        v237 = *a2;
        v238 = (v235 - *a2) >> 4;
        v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60)
          goto LABEL_820;
        v240 = v234 - (_QWORD)v237;
        if (v240 >> 3 > v239)
          v239 = v240 >> 3;
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0)
          v241 = 0xFFFFFFFFFFFFFFFLL;
        else
          v241 = v239;
        if (v241)
        {
          if (v241 >> 60)
            goto LABEL_821;
          v242 = (char *)operator new(16 * v241);
        }
        else
        {
          v242 = 0;
        }
        v243 = &v242[16 * v238];
        *(_QWORD *)v243 = "+mte";
        *((_QWORD *)v243 + 1) = 4;
        v236 = v243 + 16;
        if (v235 != v237)
        {
          do
          {
            *((_OWORD *)v243 - 1) = *((_OWORD *)v235 - 1);
            v243 -= 16;
            v235 -= 16;
          }
          while (v235 != v237);
          v235 = *a2;
        }
        *a2 = v243;
        a2[1] = v236;
        a2[2] = &v242[16 * v241];
        if (v235)
          operator delete(v235);
      }
      else
      {
        *(_QWORD *)v235 = "+mte";
        *((_QWORD *)v235 + 1) = 4;
        v236 = v235 + 16;
      }
      a2[1] = v236;
    }
    if ((a1 & 0x100000) != 0)
    {
      v245 = a2[1];
      v244 = (unint64_t)a2[2];
      if ((unint64_t)v245 >= v244)
      {
        v247 = *a2;
        v248 = (v245 - *a2) >> 4;
        v249 = v248 + 1;
        if ((unint64_t)(v248 + 1) >> 60)
          goto LABEL_820;
        v250 = v244 - (_QWORD)v247;
        if (v250 >> 3 > v249)
          v249 = v250 >> 3;
        if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0)
          v251 = 0xFFFFFFFFFFFFFFFLL;
        else
          v251 = v249;
        if (v251)
        {
          if (v251 >> 60)
            goto LABEL_821;
          v252 = (char *)operator new(16 * v251);
        }
        else
        {
          v252 = 0;
        }
        v253 = &v252[16 * v248];
        *(_QWORD *)v253 = "+ssbs";
        *((_QWORD *)v253 + 1) = 5;
        v246 = v253 + 16;
        if (v245 != v247)
        {
          do
          {
            *((_OWORD *)v253 - 1) = *((_OWORD *)v245 - 1);
            v253 -= 16;
            v245 -= 16;
          }
          while (v245 != v247);
          v245 = *a2;
        }
        *a2 = v253;
        a2[1] = v246;
        a2[2] = &v252[16 * v251];
        if (v245)
          operator delete(v245);
      }
      else
      {
        *(_QWORD *)v245 = "+ssbs";
        *((_QWORD *)v245 + 1) = 5;
        v246 = v245 + 16;
      }
      a2[1] = v246;
    }
    if ((a1 & 0x200000) != 0)
    {
      v255 = a2[1];
      v254 = (unint64_t)a2[2];
      if ((unint64_t)v255 >= v254)
      {
        v257 = *a2;
        v258 = (v255 - *a2) >> 4;
        v259 = v258 + 1;
        if ((unint64_t)(v258 + 1) >> 60)
          goto LABEL_820;
        v260 = v254 - (_QWORD)v257;
        if (v260 >> 3 > v259)
          v259 = v260 >> 3;
        if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF0)
          v261 = 0xFFFFFFFFFFFFFFFLL;
        else
          v261 = v259;
        if (v261)
        {
          if (v261 >> 60)
            goto LABEL_821;
          v262 = (char *)operator new(16 * v261);
        }
        else
        {
          v262 = 0;
        }
        v263 = &v262[16 * v258];
        *(_QWORD *)v263 = "+sb";
        *((_QWORD *)v263 + 1) = 3;
        v256 = v263 + 16;
        if (v255 != v257)
        {
          do
          {
            *((_OWORD *)v263 - 1) = *((_OWORD *)v255 - 1);
            v263 -= 16;
            v255 -= 16;
          }
          while (v255 != v257);
          v255 = *a2;
        }
        *a2 = v263;
        a2[1] = v256;
        a2[2] = &v262[16 * v261];
        if (v255)
          operator delete(v255);
      }
      else
      {
        *(_QWORD *)v255 = "+sb";
        *((_QWORD *)v255 + 1) = 3;
        v256 = v255 + 16;
      }
      a2[1] = v256;
    }
    if ((a1 & 0x400000) != 0)
    {
      v265 = a2[1];
      v264 = (unint64_t)a2[2];
      if ((unint64_t)v265 >= v264)
      {
        v267 = *a2;
        v268 = (v265 - *a2) >> 4;
        v269 = v268 + 1;
        if ((unint64_t)(v268 + 1) >> 60)
          goto LABEL_820;
        v270 = v264 - (_QWORD)v267;
        if (v270 >> 3 > v269)
          v269 = v270 >> 3;
        if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF0)
          v271 = 0xFFFFFFFFFFFFFFFLL;
        else
          v271 = v269;
        if (v271)
        {
          if (v271 >> 60)
            goto LABEL_821;
          v272 = (char *)operator new(16 * v271);
        }
        else
        {
          v272 = 0;
        }
        v273 = &v272[16 * v268];
        *(_QWORD *)v273 = "+predres";
        *((_QWORD *)v273 + 1) = 8;
        v266 = v273 + 16;
        if (v265 != v267)
        {
          do
          {
            *((_OWORD *)v273 - 1) = *((_OWORD *)v265 - 1);
            v273 -= 16;
            v265 -= 16;
          }
          while (v265 != v267);
          v265 = *a2;
        }
        *a2 = v273;
        a2[1] = v266;
        a2[2] = &v272[16 * v271];
        if (v265)
          operator delete(v265);
      }
      else
      {
        *(_QWORD *)v265 = "+predres";
        *((_QWORD *)v265 + 1) = 8;
        v266 = v265 + 16;
      }
      a2[1] = v266;
    }
    if ((a1 & 0x20000000) != 0)
    {
      v275 = a2[1];
      v274 = (unint64_t)a2[2];
      if ((unint64_t)v275 >= v274)
      {
        v277 = *a2;
        v278 = (v275 - *a2) >> 4;
        v279 = v278 + 1;
        if ((unint64_t)(v278 + 1) >> 60)
          goto LABEL_820;
        v280 = v274 - (_QWORD)v277;
        if (v280 >> 3 > v279)
          v279 = v280 >> 3;
        if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF0)
          v281 = 0xFFFFFFFFFFFFFFFLL;
        else
          v281 = v279;
        if (v281)
        {
          if (v281 >> 60)
            goto LABEL_821;
          v282 = (char *)operator new(16 * v281);
        }
        else
        {
          v282 = 0;
        }
        v283 = &v282[16 * v278];
        *(_QWORD *)v283 = "+bf16";
        *((_QWORD *)v283 + 1) = 5;
        v276 = v283 + 16;
        if (v275 != v277)
        {
          do
          {
            *((_OWORD *)v283 - 1) = *((_OWORD *)v275 - 1);
            v283 -= 16;
            v275 -= 16;
          }
          while (v275 != v277);
          v275 = *a2;
        }
        *a2 = v283;
        a2[1] = v276;
        a2[2] = &v282[16 * v281];
        if (v275)
          operator delete(v275);
      }
      else
      {
        *(_QWORD *)v275 = "+bf16";
        *((_QWORD *)v275 + 1) = 5;
        v276 = v275 + 16;
      }
      a2[1] = v276;
    }
    if ((a1 & 0x40000000) != 0)
    {
      v285 = a2[1];
      v284 = (unint64_t)a2[2];
      if ((unint64_t)v285 >= v284)
      {
        v287 = *a2;
        v288 = (v285 - *a2) >> 4;
        v289 = v288 + 1;
        if ((unint64_t)(v288 + 1) >> 60)
          goto LABEL_820;
        v290 = v284 - (_QWORD)v287;
        if (v290 >> 3 > v289)
          v289 = v290 >> 3;
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF0)
          v291 = 0xFFFFFFFFFFFFFFFLL;
        else
          v291 = v289;
        if (v291)
        {
          if (v291 >> 60)
            goto LABEL_821;
          v292 = (char *)operator new(16 * v291);
        }
        else
        {
          v292 = 0;
        }
        v293 = &v292[16 * v288];
        *(_QWORD *)v293 = "+i8mm";
        *((_QWORD *)v293 + 1) = 5;
        v286 = v293 + 16;
        if (v285 != v287)
        {
          do
          {
            *((_OWORD *)v293 - 1) = *((_OWORD *)v285 - 1);
            v293 -= 16;
            v285 -= 16;
          }
          while (v285 != v287);
          v285 = *a2;
        }
        *a2 = v293;
        a2[1] = v286;
        a2[2] = &v292[16 * v291];
        if (v285)
          operator delete(v285);
      }
      else
      {
        *(_QWORD *)v285 = "+i8mm";
        *((_QWORD *)v285 + 1) = 5;
        v286 = v285 + 16;
      }
      a2[1] = v286;
    }
    if ((a1 & 0x80000000) != 0)
    {
      v295 = a2[1];
      v294 = (unint64_t)a2[2];
      if ((unint64_t)v295 >= v294)
      {
        v297 = *a2;
        v298 = (v295 - *a2) >> 4;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 60)
          goto LABEL_820;
        v300 = v294 - (_QWORD)v297;
        if (v300 >> 3 > v299)
          v299 = v300 >> 3;
        if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF0)
          v301 = 0xFFFFFFFFFFFFFFFLL;
        else
          v301 = v299;
        if (v301)
        {
          if (v301 >> 60)
            goto LABEL_821;
          v302 = (char *)operator new(16 * v301);
        }
        else
        {
          v302 = 0;
        }
        v303 = &v302[16 * v298];
        *(_QWORD *)v303 = "+f32mm";
        *((_QWORD *)v303 + 1) = 6;
        v296 = v303 + 16;
        if (v295 != v297)
        {
          do
          {
            *((_OWORD *)v303 - 1) = *((_OWORD *)v295 - 1);
            v303 -= 16;
            v295 -= 16;
          }
          while (v295 != v297);
          v295 = *a2;
        }
        *a2 = v303;
        a2[1] = v296;
        a2[2] = &v302[16 * v301];
        if (v295)
          operator delete(v295);
      }
      else
      {
        *(_QWORD *)v295 = "+f32mm";
        *((_QWORD *)v295 + 1) = 6;
        v296 = v295 + 16;
      }
      a2[1] = v296;
    }
    if ((a1 & 0x100000000) != 0)
    {
      v305 = a2[1];
      v304 = (unint64_t)a2[2];
      if ((unint64_t)v305 >= v304)
      {
        v307 = *a2;
        v308 = (v305 - *a2) >> 4;
        v309 = v308 + 1;
        if ((unint64_t)(v308 + 1) >> 60)
          goto LABEL_820;
        v310 = v304 - (_QWORD)v307;
        if (v310 >> 3 > v309)
          v309 = v310 >> 3;
        if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF0)
          v311 = 0xFFFFFFFFFFFFFFFLL;
        else
          v311 = v309;
        if (v311)
        {
          if (v311 >> 60)
            goto LABEL_821;
          v312 = (char *)operator new(16 * v311);
        }
        else
        {
          v312 = 0;
        }
        v313 = &v312[16 * v308];
        *(_QWORD *)v313 = "+f64mm";
        *((_QWORD *)v313 + 1) = 6;
        v306 = v313 + 16;
        if (v305 != v307)
        {
          do
          {
            *((_OWORD *)v313 - 1) = *((_OWORD *)v305 - 1);
            v313 -= 16;
            v305 -= 16;
          }
          while (v305 != v307);
          v305 = *a2;
        }
        *a2 = v313;
        a2[1] = v306;
        a2[2] = &v312[16 * v311];
        if (v305)
          operator delete(v305);
      }
      else
      {
        *(_QWORD *)v305 = "+f64mm";
        *((_QWORD *)v305 + 1) = 6;
        v306 = v305 + 16;
      }
      a2[1] = v306;
    }
    if ((a1 & 0x10000000) != 0)
    {
      v315 = a2[1];
      v314 = (unint64_t)a2[2];
      if ((unint64_t)v315 >= v314)
      {
        v317 = *a2;
        v318 = (v315 - *a2) >> 4;
        v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 60)
          goto LABEL_820;
        v320 = v314 - (_QWORD)v317;
        if (v320 >> 3 > v319)
          v319 = v320 >> 3;
        if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF0)
          v321 = 0xFFFFFFFFFFFFFFFLL;
        else
          v321 = v319;
        if (v321)
        {
          if (v321 >> 60)
            goto LABEL_821;
          v322 = (char *)operator new(16 * v321);
        }
        else
        {
          v322 = 0;
        }
        v323 = &v322[16 * v318];
        *(_QWORD *)v323 = "+tme";
        *((_QWORD *)v323 + 1) = 4;
        v316 = v323 + 16;
        if (v315 != v317)
        {
          do
          {
            *((_OWORD *)v323 - 1) = *((_OWORD *)v315 - 1);
            v323 -= 16;
            v315 -= 16;
          }
          while (v315 != v317);
          v315 = *a2;
        }
        *a2 = v323;
        a2[1] = v316;
        a2[2] = &v322[16 * v321];
        if (v315)
          operator delete(v315);
      }
      else
      {
        *(_QWORD *)v315 = "+tme";
        *((_QWORD *)v315 + 1) = 4;
        v316 = v315 + 16;
      }
      a2[1] = v316;
    }
    if ((a1 & 0x200000000) != 0)
    {
      v325 = a2[1];
      v324 = (unint64_t)a2[2];
      if ((unint64_t)v325 >= v324)
      {
        v327 = *a2;
        v328 = (v325 - *a2) >> 4;
        v329 = v328 + 1;
        if ((unint64_t)(v328 + 1) >> 60)
          goto LABEL_820;
        v330 = v324 - (_QWORD)v327;
        if (v330 >> 3 > v329)
          v329 = v330 >> 3;
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF0)
          v331 = 0xFFFFFFFFFFFFFFFLL;
        else
          v331 = v329;
        if (v331)
        {
          if (v331 >> 60)
            goto LABEL_821;
          v332 = (char *)operator new(16 * v331);
        }
        else
        {
          v332 = 0;
        }
        v333 = &v332[16 * v328];
        *(_QWORD *)v333 = "+ls64";
        *((_QWORD *)v333 + 1) = 5;
        v326 = v333 + 16;
        if (v325 != v327)
        {
          do
          {
            *((_OWORD *)v333 - 1) = *((_OWORD *)v325 - 1);
            v333 -= 16;
            v325 -= 16;
          }
          while (v325 != v327);
          v325 = *a2;
        }
        *a2 = v333;
        a2[1] = v326;
        a2[2] = &v332[16 * v331];
        if (v325)
          operator delete(v325);
      }
      else
      {
        *(_QWORD *)v325 = "+ls64";
        *((_QWORD *)v325 + 1) = 5;
        v326 = v325 + 16;
      }
      a2[1] = v326;
    }
    if ((a1 & 0x400000000) != 0)
    {
      v335 = a2[1];
      v334 = (unint64_t)a2[2];
      if ((unint64_t)v335 >= v334)
      {
        v337 = *a2;
        v338 = (v335 - *a2) >> 4;
        v339 = v338 + 1;
        if ((unint64_t)(v338 + 1) >> 60)
          goto LABEL_820;
        v340 = v334 - (_QWORD)v337;
        if (v340 >> 3 > v339)
          v339 = v340 >> 3;
        if ((unint64_t)v340 >= 0x7FFFFFFFFFFFFFF0)
          v341 = 0xFFFFFFFFFFFFFFFLL;
        else
          v341 = v339;
        if (v341)
        {
          if (v341 >> 60)
            goto LABEL_821;
          v342 = (char *)operator new(16 * v341);
        }
        else
        {
          v342 = 0;
        }
        v343 = &v342[16 * v338];
        *(_QWORD *)v343 = "+brbe";
        *((_QWORD *)v343 + 1) = 5;
        v336 = v343 + 16;
        if (v335 != v337)
        {
          do
          {
            *((_OWORD *)v343 - 1) = *((_OWORD *)v335 - 1);
            v343 -= 16;
            v335 -= 16;
          }
          while (v335 != v337);
          v335 = *a2;
        }
        *a2 = v343;
        a2[1] = v336;
        a2[2] = &v342[16 * v341];
        if (v335)
          operator delete(v335);
      }
      else
      {
        *(_QWORD *)v335 = "+brbe";
        *((_QWORD *)v335 + 1) = 5;
        v336 = v335 + 16;
      }
      a2[1] = v336;
    }
    if ((a1 & 0x800000000) != 0)
    {
      v345 = a2[1];
      v344 = (unint64_t)a2[2];
      if ((unint64_t)v345 >= v344)
      {
        v347 = *a2;
        v348 = (v345 - *a2) >> 4;
        v349 = v348 + 1;
        if ((unint64_t)(v348 + 1) >> 60)
          goto LABEL_820;
        v350 = v344 - (_QWORD)v347;
        if (v350 >> 3 > v349)
          v349 = v350 >> 3;
        if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFF0)
          v351 = 0xFFFFFFFFFFFFFFFLL;
        else
          v351 = v349;
        if (v351)
        {
          if (v351 >> 60)
            goto LABEL_821;
          v352 = (char *)operator new(16 * v351);
        }
        else
        {
          v352 = 0;
        }
        v353 = &v352[16 * v348];
        *(_QWORD *)v353 = "+pauth";
        *((_QWORD *)v353 + 1) = 6;
        v346 = v353 + 16;
        if (v345 != v347)
        {
          do
          {
            *((_OWORD *)v353 - 1) = *((_OWORD *)v345 - 1);
            v353 -= 16;
            v345 -= 16;
          }
          while (v345 != v347);
          v345 = *a2;
        }
        *a2 = v353;
        a2[1] = v346;
        a2[2] = &v352[16 * v351];
        if (v345)
          operator delete(v345);
      }
      else
      {
        *(_QWORD *)v345 = "+pauth";
        *((_QWORD *)v345 + 1) = 6;
        v346 = v345 + 16;
      }
      a2[1] = v346;
    }
    if ((a1 & 0x1000000000) != 0)
    {
      v355 = a2[1];
      v354 = (unint64_t)a2[2];
      if ((unint64_t)v355 >= v354)
      {
        v357 = *a2;
        v358 = (v355 - *a2) >> 4;
        v359 = v358 + 1;
        if ((unint64_t)(v358 + 1) >> 60)
          goto LABEL_820;
        v360 = v354 - (_QWORD)v357;
        if (v360 >> 3 > v359)
          v359 = v360 >> 3;
        if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFF0)
          v361 = 0xFFFFFFFFFFFFFFFLL;
        else
          v361 = v359;
        if (v361)
        {
          if (v361 >> 60)
            goto LABEL_821;
          v362 = (char *)operator new(16 * v361);
        }
        else
        {
          v362 = 0;
        }
        v363 = &v362[16 * v358];
        *(_QWORD *)v363 = "+flagm";
        *((_QWORD *)v363 + 1) = 6;
        v356 = v363 + 16;
        if (v355 != v357)
        {
          do
          {
            *((_OWORD *)v363 - 1) = *((_OWORD *)v355 - 1);
            v363 -= 16;
            v355 -= 16;
          }
          while (v355 != v357);
          v355 = *a2;
        }
        *a2 = v363;
        a2[1] = v356;
        a2[2] = &v362[16 * v361];
        if (v355)
          operator delete(v355);
      }
      else
      {
        *(_QWORD *)v355 = "+flagm";
        *((_QWORD *)v355 + 1) = 6;
        v356 = v355 + 16;
      }
      a2[1] = v356;
    }
    if ((a1 & 0x2000000000) != 0)
    {
      v365 = a2[1];
      v364 = (unint64_t)a2[2];
      if ((unint64_t)v365 >= v364)
      {
        v367 = *a2;
        v368 = (v365 - *a2) >> 4;
        v369 = v368 + 1;
        if ((unint64_t)(v368 + 1) >> 60)
          goto LABEL_820;
        v370 = v364 - (_QWORD)v367;
        if (v370 >> 3 > v369)
          v369 = v370 >> 3;
        if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF0)
          v371 = 0xFFFFFFFFFFFFFFFLL;
        else
          v371 = v369;
        if (v371)
        {
          if (v371 >> 60)
            goto LABEL_821;
          v372 = (char *)operator new(16 * v371);
        }
        else
        {
          v372 = 0;
        }
        v373 = &v372[16 * v368];
        *(_QWORD *)v373 = "+sme";
        *((_QWORD *)v373 + 1) = 4;
        v366 = v373 + 16;
        if (v365 != v367)
        {
          do
          {
            *((_OWORD *)v373 - 1) = *((_OWORD *)v365 - 1);
            v373 -= 16;
            v365 -= 16;
          }
          while (v365 != v367);
          v365 = *a2;
        }
        *a2 = v373;
        a2[1] = v366;
        a2[2] = &v372[16 * v371];
        if (v365)
          operator delete(v365);
      }
      else
      {
        *(_QWORD *)v365 = "+sme";
        *((_QWORD *)v365 + 1) = 4;
        v366 = v365 + 16;
      }
      a2[1] = v366;
    }
    if ((a1 & 0x4000000000) != 0)
    {
      v375 = a2[1];
      v374 = (unint64_t)a2[2];
      if ((unint64_t)v375 >= v374)
      {
        v377 = *a2;
        v378 = (v375 - *a2) >> 4;
        v379 = v378 + 1;
        if ((unint64_t)(v378 + 1) >> 60)
          goto LABEL_820;
        v380 = v374 - (_QWORD)v377;
        if (v380 >> 3 > v379)
          v379 = v380 >> 3;
        if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFF0)
          v381 = 0xFFFFFFFFFFFFFFFLL;
        else
          v381 = v379;
        if (v381)
        {
          if (v381 >> 60)
            goto LABEL_821;
          v382 = (char *)operator new(16 * v381);
        }
        else
        {
          v382 = 0;
        }
        v383 = &v382[16 * v378];
        *(_QWORD *)v383 = "+sme-f64";
        *((_QWORD *)v383 + 1) = 8;
        v376 = v383 + 16;
        if (v375 != v377)
        {
          do
          {
            *((_OWORD *)v383 - 1) = *((_OWORD *)v375 - 1);
            v383 -= 16;
            v375 -= 16;
          }
          while (v375 != v377);
          v375 = *a2;
        }
        *a2 = v383;
        a2[1] = v376;
        a2[2] = &v382[16 * v381];
        if (v375)
          operator delete(v375);
      }
      else
      {
        *(_QWORD *)v375 = "+sme-f64";
        *((_QWORD *)v375 + 1) = 8;
        v376 = v375 + 16;
      }
      a2[1] = v376;
    }
    if ((a1 & 0x8000000000) != 0)
    {
      v385 = a2[1];
      v384 = (unint64_t)a2[2];
      if ((unint64_t)v385 >= v384)
      {
        v387 = *a2;
        v388 = (v385 - *a2) >> 4;
        v389 = v388 + 1;
        if ((unint64_t)(v388 + 1) >> 60)
          goto LABEL_820;
        v390 = v384 - (_QWORD)v387;
        if (v390 >> 3 > v389)
          v389 = v390 >> 3;
        if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFF0)
          v391 = 0xFFFFFFFFFFFFFFFLL;
        else
          v391 = v389;
        if (v391)
        {
          if (v391 >> 60)
            goto LABEL_821;
          v392 = (char *)operator new(16 * v391);
        }
        else
        {
          v392 = 0;
        }
        v393 = &v392[16 * v388];
        *(_QWORD *)v393 = "+sme-i64";
        *((_QWORD *)v393 + 1) = 8;
        v386 = v393 + 16;
        if (v385 != v387)
        {
          do
          {
            *((_OWORD *)v393 - 1) = *((_OWORD *)v385 - 1);
            v393 -= 16;
            v385 -= 16;
          }
          while (v385 != v387);
          v385 = *a2;
        }
        *a2 = v393;
        a2[1] = v386;
        a2[2] = &v392[16 * v391];
        if (v385)
          operator delete(v385);
      }
      else
      {
        *(_QWORD *)v385 = "+sme-i64";
        *((_QWORD *)v385 + 1) = 8;
        v386 = v385 + 16;
      }
      a2[1] = v386;
    }
    if ((a1 & 0x10000000000) != 0)
    {
      v395 = a2[1];
      v394 = (unint64_t)a2[2];
      if ((unint64_t)v395 >= v394)
      {
        v397 = *a2;
        v398 = (v395 - *a2) >> 4;
        v399 = v398 + 1;
        if ((unint64_t)(v398 + 1) >> 60)
          goto LABEL_820;
        v400 = v394 - (_QWORD)v397;
        if (v400 >> 3 > v399)
          v399 = v400 >> 3;
        if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFF0)
          v401 = 0xFFFFFFFFFFFFFFFLL;
        else
          v401 = v399;
        if (v401)
        {
          if (v401 >> 60)
            goto LABEL_821;
          v402 = (char *)operator new(16 * v401);
        }
        else
        {
          v402 = 0;
        }
        v403 = &v402[16 * v398];
        *(_QWORD *)v403 = "+hbc";
        *((_QWORD *)v403 + 1) = 4;
        v396 = v403 + 16;
        if (v395 != v397)
        {
          do
          {
            *((_OWORD *)v403 - 1) = *((_OWORD *)v395 - 1);
            v403 -= 16;
            v395 -= 16;
          }
          while (v395 != v397);
          v395 = *a2;
        }
        *a2 = v403;
        a2[1] = v396;
        a2[2] = &v402[16 * v401];
        if (v395)
          operator delete(v395);
      }
      else
      {
        *(_QWORD *)v395 = "+hbc";
        *((_QWORD *)v395 + 1) = 4;
        v396 = v395 + 16;
      }
      a2[1] = v396;
    }
    if ((a1 & 0x20000000000) != 0)
    {
      v405 = a2[1];
      v404 = (unint64_t)a2[2];
      if ((unint64_t)v405 >= v404)
      {
        v407 = *a2;
        v408 = (v405 - *a2) >> 4;
        v409 = v408 + 1;
        if ((unint64_t)(v408 + 1) >> 60)
          goto LABEL_820;
        v410 = v404 - (_QWORD)v407;
        if (v410 >> 3 > v409)
          v409 = v410 >> 3;
        if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFF0)
          v411 = 0xFFFFFFFFFFFFFFFLL;
        else
          v411 = v409;
        if (v411)
        {
          if (v411 >> 60)
            goto LABEL_821;
          v412 = (char *)operator new(16 * v411);
        }
        else
        {
          v412 = 0;
        }
        v413 = &v412[16 * v408];
        *(_QWORD *)v413 = "+mops";
        *((_QWORD *)v413 + 1) = 5;
        v406 = v413 + 16;
        if (v405 != v407)
        {
          do
          {
            *((_OWORD *)v413 - 1) = *((_OWORD *)v405 - 1);
            v413 -= 16;
            v405 -= 16;
          }
          while (v405 != v407);
          v405 = *a2;
        }
        *a2 = v413;
        a2[1] = v406;
        a2[2] = &v412[16 * v411];
        if (v405)
          operator delete(v405);
      }
      else
      {
        *(_QWORD *)v405 = "+mops";
        *((_QWORD *)v405 + 1) = 5;
        v406 = v405 + 16;
      }
      a2[1] = v406;
    }
    if ((a1 & 0x40000000000) != 0)
    {
      v415 = a2[1];
      v414 = (unint64_t)a2[2];
      if ((unint64_t)v415 >= v414)
      {
        v417 = *a2;
        v418 = (v415 - *a2) >> 4;
        v419 = v418 + 1;
        if ((unint64_t)(v418 + 1) >> 60)
          goto LABEL_820;
        v420 = v414 - (_QWORD)v417;
        if (v420 >> 3 > v419)
          v419 = v420 >> 3;
        if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFF0)
          v421 = 0xFFFFFFFFFFFFFFFLL;
        else
          v421 = v419;
        if (v421)
        {
          if (v421 >> 60)
            goto LABEL_821;
          v422 = (char *)operator new(16 * v421);
        }
        else
        {
          v422 = 0;
        }
        v423 = &v422[16 * v418];
        *(_QWORD *)v423 = "+perfmon";
        *((_QWORD *)v423 + 1) = 8;
        v416 = v423 + 16;
        if (v415 != v417)
        {
          do
          {
            *((_OWORD *)v423 - 1) = *((_OWORD *)v415 - 1);
            v423 -= 16;
            v415 -= 16;
          }
          while (v415 != v417);
          v415 = *a2;
        }
        *a2 = v423;
        a2[1] = v416;
        a2[2] = &v422[16 * v421];
        if (v415)
          operator delete(v415);
      }
      else
      {
        *(_QWORD *)v415 = "+perfmon";
        *((_QWORD *)v415 + 1) = 8;
        v416 = v415 + 16;
      }
      a2[1] = v416;
    }
    if ((a1 & 0x80000000000) != 0)
    {
      v425 = a2[1];
      v424 = (unint64_t)a2[2];
      if ((unint64_t)v425 < v424)
      {
        *(_QWORD *)v425 = "+xs";
        *((_QWORD *)v425 + 1) = 3;
        v426 = v425 + 16;
LABEL_818:
        a2[1] = v426;
        return a1 != 0;
      }
      v427 = *a2;
      v428 = (v425 - *a2) >> 4;
      v429 = v428 + 1;
      if (!((unint64_t)(v428 + 1) >> 60))
      {
        v430 = v424 - (_QWORD)v427;
        if (v430 >> 3 > v429)
          v429 = v430 >> 3;
        if ((unint64_t)v430 >= 0x7FFFFFFFFFFFFFF0)
          v431 = 0xFFFFFFFFFFFFFFFLL;
        else
          v431 = v429;
        if (!v431)
        {
          v432 = 0;
          goto LABEL_813;
        }
        if (!(v431 >> 60))
        {
          v432 = (char *)operator new(16 * v431);
LABEL_813:
          v433 = &v432[16 * v428];
          *(_QWORD *)v433 = "+xs";
          *((_QWORD *)v433 + 1) = 3;
          v426 = v433 + 16;
          if (v425 != v427)
          {
            do
            {
              *((_OWORD *)v433 - 1) = *((_OWORD *)v425 - 1);
              v433 -= 16;
              v425 -= 16;
            }
            while (v425 != v427);
            v425 = *a2;
          }
          *a2 = v433;
          a2[1] = v426;
          a2[2] = &v432[16 * v431];
          if (v425)
            operator delete(v425);
          goto LABEL_818;
        }
LABEL_821:
        sub_1C4764EE4();
      }
LABEL_820:
      abort();
    }
  }
  return a1 != 0;
}

char *llvm::AArch64::getArchName(unsigned int a1)
{
  return (&off_1E8199CC8)[9 * a1];
}

char *llvm::AArch64::getCPUAttr(unsigned int a1)
{
  return (&off_1E8199CC8)[9 * a1 + 2];
}

char *llvm::AArch64::getSubArch(unsigned int a1)
{
  return (&off_1E8199CC8)[9 * a1 + 4];
}

uint64_t llvm::AArch64::getArchAttr(unsigned int a1)
{
  return *((unsigned int *)&off_1E8199CC8 + 18 * a1 + 17);
}

char *llvm::AArch64::getArchExtName(llvm::AArch64 *this)
{
  uint64_t v1;

  v1 = 0;
  while ((&off_1E819A100)[v1 + 2] != (char *)this)
  {
    v1 += 5;
    if (v1 == 225)
      return 0;
  }
  return (&off_1E819A100)[v1];
}

const char *llvm::AArch64::getArchExtFeature(char *__s1, size_t __n)
{
  size_t v4;
  uint64_t v5;
  char **v6;
  const char *v7;
  uint64_t v8;
  char **v9;

  v4 = __n - 2;
  if (__n >= 2 && *(_WORD *)__s1 == 28526)
  {
    v5 = 0;
    while (1)
    {
      v6 = &(&off_1E819A100)[v5];
      v7 = (&off_1E819A100)[v5 + 4];
      if (v7)
      {
        if ((char *)v4 == v6[1] && (__n < 3 || !memcmp(__s1 + 2, *v6, v4)))
          break;
      }
      v5 += 5;
      if (v5 == 225)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v8 = 0;
    while (1)
    {
      v9 = &(&off_1E819A100)[v8];
      v7 = (&off_1E819A100)[v8 + 3];
      if (v7)
      {
        if ((char *)__n == v9[1] && (!__n || !memcmp(__s1, *v9, __n)))
          break;
      }
      v8 += 5;
      if (v8 == 225)
        return 0;
    }
  }
  strlen(v7);
  return v7;
}

const char *llvm::AArch64::getDefaultCPU(uint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *result;

  v2 = llvm::AArch64::parseArch(a1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 0;
  result = "generic";
  while (LODWORD((&off_1E819A808)[v4 + 2]) != v3 || !*((_BYTE *)&off_1E819A808 + 8 * v4 + 20))
  {
    v4 += 4;
    if (v4 == 228)
      return result;
  }
  return (&off_1E819A808)[v4];
}

void *llvm::AArch64::fillValidCPUArchList(void *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char **v8;

  v1 = (uint64_t)result;
  v2 = 0;
  v3 = (uint64_t)result + 16;
  do
  {
    v4 = &(&off_1E819A808)[v2];
    if (LODWORD((&off_1E819A808)[v2 + 2]))
    {
      v5 = *v4;
      v6 = v4[1];
      v7 = *(unsigned int *)(v1 + 8);
      if (v7 >= *(unsigned int *)(v1 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v1, v3, v7 + 1, 16);
        v7 = *(unsigned int *)(v1 + 8);
      }
      v8 = (char **)(*(_QWORD *)v1 + 16 * v7);
      *v8 = v5;
      v8[1] = v6;
      ++*(_DWORD *)(v1 + 8);
    }
    v2 += 4;
  }
  while (v2 != 228);
  return result;
}

uint64_t llvm::AArch64::parseArchExt(void *__s1, size_t __n)
{
  uint64_t *i;
  uint64_t *v5;

  for (i = &qword_1E819A110; ; i += 5)
  {
    v5 = i - 2;
    if (__n == *(i - 1) && (!__n || !memcmp(__s1, (const void *)*(i - 2), __n)))
      break;
    if (v5 + 5 == (uint64_t *)&off_1E819A808)
      return 0;
  }
  return *i;
}

uint64_t llvm::ARM::parseArch(uint64_t a1, unint64_t a2)
{
  _BYTE *CanonicalArchName;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *ArchSynonym;
  size_t v11;
  size_t v12;
  uint64_t v13;
  int *i;
  size_t v15;
  int *v16;

  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  ArchSynonym = (const void *)llvm::ARM::getArchSynonym((uint64_t)CanonicalArchName, v3, v4, v5, v6, v7, v8, v9);
  v12 = v11;
  v13 = -(uint64_t)v11;
  for (i = &dword_1E819AF68; ; i += 18)
  {
    v15 = *((_QWORD *)i - 7);
    v16 = i - 16;
    if (v15 >= v12 && (!v12 || !memcmp((const void *)(*((_QWORD *)i - 8) + v15 + v13), ArchSynonym, v12)))
      break;
    if (v16 + 18 == (int *)off_1E819BAF8)
      return 0;
  }
  return *i;
}

_BYTE *llvm::ARM::getCanonicalArchName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v20 = a1;
  v21 = a2;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x32335F34366D7261)
    {
      v11 = 8;
      goto LABEL_59;
    }
    goto LABEL_11;
  }
  if (a2 >= 6)
  {
LABEL_11:
    if (*(_DWORD *)a1 == 913142369 && *(_WORD *)(a1 + 4) == 25908)
    {
      v11 = 6;
      goto LABEL_59;
    }
    if (*(_DWORD *)a1 == 913142369 && *(_BYTE *)(a1 + 4) == 52)
    {
LABEL_46:
      v11 = 5;
      goto LABEL_59;
    }
    if (a2 >= 0xA && *(_QWORD *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 12851)
    {
      v11 = 10;
      goto LABEL_59;
    }
    goto LABEL_24;
  }
  if (a2 != 5)
  {
    if (a2 < 3)
    {
      if (a2 != 2)
        return (_BYTE *)v3;
      goto LABEL_56;
    }
    if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
    {
LABEL_56:
      v11 = -1;
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (*(_DWORD *)a1 == 913142369 && *(_BYTE *)(a1 + 4) == 52)
    goto LABEL_46;
LABEL_24:
  if (*(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109)
  {
LABEL_57:
    v11 = 3;
    goto LABEL_59;
  }
  if (*(_DWORD *)a1 == 1836410996 && *(_BYTE *)(a1 + 4) == 98)
    goto LABEL_46;
  if (a2 < 7)
    goto LABEL_56;
  if (*(_DWORD *)a1 != 1668440417 || *(_DWORD *)(a1 + 3) != 875980899)
    goto LABEL_56;
  if (llvm::StringRef::find(&v20, "eb", 2uLL, 0) != -1)
    return &unk_1C876A9A6;
  v11 = 7;
  if (a2 >= 7)
    v12 = 7;
  else
    v12 = a2;
  if (a2 - v12 >= 3)
  {
    v11 = 10;
    if (*(unsigned __int16 *)(v3 + v12) ^ 0x625F | *(unsigned __int8 *)(v3 + v12 + 2) ^ 0x65)
      v11 = 7;
  }
LABEL_59:
  if (a2 >= v11)
    v14 = v11;
  else
    v14 = a2;
  if (a2 - v14 >= 2 && *(_WORD *)(v3 + v14) == 25189)
  {
    v11 += 2;
    v16 = a2;
LABEL_72:
    if (v16 >= v11)
      v17 = v11;
    else
      v17 = v16;
    v18 = (_BYTE *)(v3 + v17);
    v20 = v3 + v17;
    v21 = v16 - v17;
    if (v16 <= v11)
      return (_BYTE *)v3;
    if ((v16 - v17 < 2
       || *v18 == 118
       && ((char)v18[1] & 0x80000000) == 0
       && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18[1] + 60) & 0x400) != 0)
      && llvm::StringRef::find(&v20, "eb", 2uLL, 0) == -1)
    {
      return v18;
    }
    return &unk_1C876A9A6;
  }
LABEL_64:
  v15 = a2 - 2;
  if (a2 < a2 - 2)
    v15 = a2;
  if (*(_WORD *)(v3 + a2 - 2) == 25189)
    v16 = v15;
  else
    v16 = a2;
  if (v11 != -1)
    goto LABEL_72;
  return (_BYTE *)v3;
}

uint64_t llvm::ARM::getArchSynonym(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64x2_t v9;
  const char *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  int64x2_t v42;
  uint64_t v43;

  v41[0] = a1;
  v41[1] = a2;
  v43 = 0;
  v42 = 0uLL;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 == 13686)
      {
        v9 = vdupq_n_s64(3uLL);
        v10 = "v5t";
        goto LABEL_35;
      }
      break;
    case 3:
      if (*(_WORD *)a1 == 13686 && *(_BYTE *)(a1 + 2) == 101)
      {
        v9 = vdupq_n_s64(4uLL);
        v10 = "v5te";
        goto LABEL_35;
      }
      if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 106)
      {
        v9 = vdupq_n_s64(2uLL);
        v10 = "v6";
        goto LABEL_35;
      }
      if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 109)
        goto LABEL_31;
      if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 122)
        goto LABEL_25;
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x6C683676:
          v9 = vdupq_n_s64(3uLL);
          v10 = "v6k";
          goto LABEL_35;
        case 0x6D733676:
          goto LABEL_31;
        case 0x6B7A3676:
LABEL_25:
          v9 = vdupq_n_s64(4uLL);
          v10 = "v6kz";
          goto LABEL_35;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 762525302 && *(_BYTE *)(a1 + 4) == 109)
      {
LABEL_31:
        v9 = vdupq_n_s64(4uLL);
        v10 = "v6-m";
LABEL_35:
        v9.i64[0] = (uint64_t)v10;
        v42 = v9;
        LOBYTE(v43) = 1;
      }
      break;
    default:
      break;
  }
  v16 = sub_1C5DAF954((uint64_t)v41, "v7", 2, "v7a", 3, "v7hl", 4, a8, "v7l", 3, (uint64_t)"v7-a", 4);
  v17 = sub_1C5DAF8F0(v16, "v7r", 3, (uint64_t)"v7-r", 4);
  v18 = sub_1C5DAF8F0(v17, "v7m", 3, (uint64_t)"v7-m", 4);
  v19 = sub_1C5DAF8F0(v18, "v7em", 4, (uint64_t)"v7e-m", 5);
  v20 = sub_1C5DAF8F0(v19, "v8", 2, (uint64_t)"v8-a", 4);
  v22 = sub_1C5DAF954(v20, "v8a", 3, "v8l", 3, "aarch64", 7, v21, "arm64", 5, (uint64_t)"v8-a", 4);
  v23 = sub_1C5DAF8F0(v22, "v8.1a", 5, (uint64_t)"v8.1-a", 6);
  v24 = sub_1C5DAF8F0(v23, "v8.2a", 5, (uint64_t)"v8.2-a", 6);
  v25 = sub_1C5DAF8F0(v24, "v8.3a", 5, (uint64_t)"v8.3-a", 6);
  v26 = sub_1C5DAF8F0(v25, "v8.4a", 5, (uint64_t)"v8.4-a", 6);
  v27 = sub_1C5DAF8F0(v26, "v8.5a", 5, (uint64_t)"v8.5-a", 6);
  v28 = sub_1C5DAF8F0(v27, "v8.6a", 5, (uint64_t)"v8.6-a", 6);
  v29 = sub_1C5DAF8F0(v28, "v8.7a", 5, (uint64_t)"v8.7-a", 6);
  v30 = sub_1C5DAF8F0(v29, "v8.8a", 5, (uint64_t)"v8.8-a", 6);
  v31 = sub_1C5DAF8F0(v30, "v8r", 3, (uint64_t)"v8-r", 4);
  v32 = sub_1C5DAF8F0(v31, "v9", 2, (uint64_t)"v9-a", 4);
  v33 = sub_1C5DAF8F0(v32, "v9a", 3, (uint64_t)"v9-a", 4);
  v34 = sub_1C5DAF8F0(v33, "v9.1a", 5, (uint64_t)"v9.1-a", 6);
  v35 = sub_1C5DAF8F0(v34, "v9.2a", 5, (uint64_t)"v9.2-a", 6);
  v36 = sub_1C5DAF8F0(v35, "v9.3a", 5, (uint64_t)"v9.3-a", 6);
  v37 = sub_1C5DAF8F0(v36, "v8m.base", 8, (uint64_t)"v8-m.base", 9);
  v38 = sub_1C5DAF8F0(v37, "v8m.main", 8, (uint64_t)"v8-m.main", 9);
  v39 = sub_1C5DAF8F0(v38, "v8.1m.main", 10, (uint64_t)"v8.1-m.main", 11);
  if (*(_BYTE *)(v39 + 32))
    return *(_QWORD *)(v39 + 16);
  else
    return a1;
}

uint64_t sub_1C5DAF8F0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v7;

  if (!*(_BYTE *)(a1 + 32))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(_QWORD *)(a1 + 16) = a4;
      *(_QWORD *)(a1 + 24) = a5;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  return a1;
}

uint64_t sub_1C5DAF954(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = sub_1C5DAF8F0(a1, a2, a3, a11, a12);
  v17 = sub_1C5DAF8F0(v16, a4, a5, a11, a12);
  v18 = sub_1C5DAF8F0(v17, a6, a7, a11, a12);
  return sub_1C5DAF8F0(v18, a9, a10, a11, a12);
}

BOOL llvm::ARM::getFPUFeatures(unsigned int a1, const char ***a2)
{
  char **v3;
  int v4;
  _DWORD *v5;
  char **v6;
  const char *v7;
  size_t v8;
  unint64_t v9;
  const char **v10;
  const char **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  const char **v17;
  const char **v18;
  unint64_t v19;
  const char **v20;
  const char **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  char **v26;
  const char *v27;
  size_t v28;
  unint64_t v29;
  const char **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  const char **v37;
  const char **v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  const char **v44;
  char *v45;
  uint64_t v47;
  unsigned int v48;

  v48 = a1 - 1;
  if (a1 - 1 <= 0x16)
  {
    v47 = a1;
    v3 = &(&off_1E819BCA8)[4 * a1];
    v4 = *((_DWORD *)v3 + 5);
    v5 = (_DWORD *)v3 + 7;
    v6 = off_1E819BAF8;
    while (1)
    {
      if (v4 >= *((_DWORD *)v6 + 4) && *v5 <= *((_DWORD *)v6 + 5))
      {
        v7 = *v6;
        if (*v6)
          v8 = strlen(*v6);
        else
          v8 = 0;
        v10 = a2[1];
        v19 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v19)
        {
          v21 = *a2;
          v22 = ((char *)v10 - (char *)*a2) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
LABEL_85:
            abort();
          v24 = v19 - (_QWORD)v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v23;
          if (v15)
          {
            if (v15 >> 60)
LABEL_86:
              sub_1C4764EE4();
            v16 = (char *)operator new(16 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = (const char **)&v16[16 * v22];
          *v17 = v7;
          v17[1] = (const char *)v8;
          v18 = v17;
          if (v10 != v21)
          {
            do
            {
              *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
              v18 -= 2;
              v10 -= 2;
            }
            while (v10 != v21);
LABEL_39:
            v10 = *a2;
          }
LABEL_40:
          v20 = v17 + 2;
          *a2 = v18;
          a2[1] = v17 + 2;
          a2[2] = (const char **)&v16[16 * v15];
          if (v10)
            operator delete(v10);
          goto LABEL_42;
        }
      }
      else
      {
        v7 = v6[1];
        if (v7)
          v8 = strlen(v6[1]);
        else
          v8 = 0;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v11 = *a2;
          v12 = ((char *)v10 - (char *)*a2) >> 4;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60)
            goto LABEL_85;
          v14 = v9 - (_QWORD)v11;
          if (v14 >> 3 > v13)
            v13 = v14 >> 3;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            if (v15 >> 60)
              goto LABEL_86;
            v16 = (char *)operator new(16 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = (const char **)&v16[16 * v12];
          *v17 = v7;
          v17[1] = (const char *)v8;
          v18 = v17;
          if (v10 != v11)
          {
            do
            {
              *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
              v18 -= 2;
              v10 -= 2;
            }
            while (v10 != v11);
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      *v10 = v7;
      v10[1] = (const char *)v8;
      v20 = v10 + 2;
LABEL_42:
      a2[1] = v20;
      v6 += 3;
      if (v6 == &off_1E819BCA8)
      {
        v25 = (int)(&off_1E819BCA8)[4 * v47 + 3];
        v26 = off_1E819BFA8;
        while (1)
        {
          if (v25 >= *((_DWORD *)v26 + 4))
          {
            v27 = *v26;
            if (*v26)
              v28 = strlen(*v26);
            else
              v28 = 0;
            v36 = (unint64_t)a2[2];
            if ((unint64_t)v20 >= v36)
            {
              v38 = *a2;
              v39 = ((char *)v20 - (char *)*a2) >> 4;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 60)
                goto LABEL_85;
              v41 = v36 - (_QWORD)v38;
              if (v41 >> 3 > v40)
                v40 = v41 >> 3;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
                v42 = 0xFFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                if (v42 >> 60)
                  goto LABEL_86;
                v43 = (char *)operator new(16 * v42);
              }
              else
              {
                v43 = 0;
              }
              v44 = (const char **)&v43[16 * v39];
              v45 = &v43[16 * v42];
              *v44 = v27;
              v44[1] = (const char *)v28;
              v37 = v44 + 2;
              if (v20 != v38)
              {
                do
                {
                  *((_OWORD *)v44 - 1) = *((_OWORD *)v20 - 1);
                  v44 -= 2;
                  v20 -= 2;
                }
                while (v20 != v38);
                goto LABEL_79;
              }
LABEL_81:
              *a2 = v44;
              a2[1] = v37;
              a2[2] = (const char **)v45;
LABEL_82:
              operator delete(v20);
              goto LABEL_83;
            }
          }
          else
          {
            v27 = v26[1];
            if (v27)
              v28 = strlen(v26[1]);
            else
              v28 = 0;
            v29 = (unint64_t)a2[2];
            if ((unint64_t)v20 >= v29)
            {
              v30 = *a2;
              v31 = ((char *)v20 - (char *)*a2) >> 4;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 60)
                goto LABEL_85;
              v33 = v29 - (_QWORD)v30;
              if (v33 >> 3 > v32)
                v32 = v33 >> 3;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
                v34 = 0xFFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                if (v34 >> 60)
                  goto LABEL_86;
                v35 = (char *)operator new(16 * v34);
              }
              else
              {
                v35 = 0;
              }
              v44 = (const char **)&v35[16 * v31];
              v45 = &v35[16 * v34];
              *v44 = v27;
              v44[1] = (const char *)v28;
              v37 = v44 + 2;
              if (v20 == v30)
                goto LABEL_81;
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v20 - 1);
                v44 -= 2;
                v20 -= 2;
              }
              while (v20 != v30);
LABEL_79:
              v20 = *a2;
              *a2 = v44;
              a2[1] = v37;
              a2[2] = (const char **)v45;
              if (!v20)
                goto LABEL_83;
              goto LABEL_82;
            }
          }
          *v20 = v27;
          v20[1] = (const char *)v28;
          v37 = v20 + 2;
LABEL_83:
          a2[1] = v37;
          v26 += 3;
          v20 = v37;
          if (v26 == &off_1E819BFF0)
            return v48 < 0x17;
        }
      }
    }
  }
  return v48 < 0x17;
}

uint64_t llvm::ARM::parseArchISA(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 ^ 0x63726161 | *(_DWORD *)((char *)a1 + 3) ^ 0x34366863)
      v2 = 0;
    else
      v2 = 0x100000003;
  }
  else
  {
    v2 = 0;
  }
  if (a2 >= 5 && !HIDWORD(v2) && !(*(_DWORD *)a1 ^ 0x366D7261 | *((unsigned __int8 *)a1 + 4) ^ 0x34))
    v2 = 0x100000003;
  v3 = v2 & 0x100000000;
  if (a2 >= 5 && !v3 && (*(_DWORD *)a1 == 1836410996 ? (v4 = *((_BYTE *)a1 + 4) == 98) : (v4 = 0), v4))
  {
    v2 = 0x100000002;
  }
  else if (a2 >= 3 && !v3 && !(*a1 ^ 0x7261 | *((unsigned __int8 *)a1 + 2) ^ 0x6D))
  {
    v2 = 0x100000001;
  }
  if ((v2 & 0xFF00000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t llvm::ARM::getFPUSynonym(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];

  v24[0] = a1;
  v24[1] = a2;
  memset(&v24[2], 0, 24);
  v9 = sub_1C5DAF954((uint64_t)v24, "fpa", 3, "fpe2", 4, "fpe3", 4, a8, "maverick", 8, (uint64_t)"invalid", 7);
  v10 = sub_1C5DAF8F0(v9, "vfp2", 4, (uint64_t)"vfpv2", 5);
  v11 = sub_1C5DAF8F0(v10, "vfp3", 4, (uint64_t)"vfpv3", 5);
  v12 = sub_1C5DAF8F0(v11, "vfp4", 4, (uint64_t)"vfpv4", 5);
  v13 = sub_1C5DAF8F0(v12, "vfp3-d16", 8, (uint64_t)"vfpv3-d16", 9);
  v14 = sub_1C5DAF8F0(v13, "vfp4-d16", 8, (uint64_t)"vfpv4-d16", 9);
  v15 = sub_1C5DAF8F0(v14, "fp4-sp-d16", 10, (uint64_t)"fpv4-sp-d16", 11);
  v16 = sub_1C5DAF8F0(v15, "vfpv4-sp-d16", 12, (uint64_t)"fpv4-sp-d16", 11);
  v17 = sub_1C5DAF8F0(v16, "fp4-dp-d16", 10, (uint64_t)"vfpv4-d16", 9);
  v18 = sub_1C5DAF8F0(v17, "fpv4-dp-d16", 11, (uint64_t)"vfpv4-d16", 9);
  v19 = sub_1C5DAF8F0(v18, "fp5-sp-d16", 10, (uint64_t)"fpv5-sp-d16", 11);
  v20 = sub_1C5DAF8F0(v19, "fp5-dp-d16", 10, (uint64_t)"fpv5-d16", 8);
  v21 = sub_1C5DAF8F0(v20, "fpv5-dp-d16", 11, (uint64_t)"fpv5-d16", 8);
  v22 = sub_1C5DAF8F0(v21, "neon-vfpv3", 10, (uint64_t)"neon", 4);
  if (*(_BYTE *)(v22 + 32))
    return *(_QWORD *)(v22 + 16);
  else
    return a1;
}

uint64_t llvm::ARM::getFPUNeonSupportLevel(llvm::ARM *this)
{
  if (this <= 0x17)
    return LODWORD((&off_1E819BCA8)[4 * this + 3]);
  else
    return 0;
}

char *llvm::ARM::getFPUName(llvm::ARM *this)
{
  if (this <= 0x17)
    return (&off_1E819BCA8)[4 * this];
  else
    return 0;
}

uint64_t llvm::ARM::getFPUVersion(llvm::ARM *this)
{
  if (this <= 0x17)
    return *((unsigned int *)&off_1E819BCA8 + 8 * this + 5);
  else
    return 0;
}

uint64_t llvm::ARM::getFPURestriction(llvm::ARM *this)
{
  if (this <= 0x17)
    return *((unsigned int *)&off_1E819BCA8 + 8 * this + 7);
  else
    return 0;
}

uint64_t llvm::ARM::getDefaultFPU(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v12;
  _BOOL4 v15;
  int v16;
  _BOOL4 v18;
  int v23;
  _BOOL4 v25;
  int v31;
  _BOOL4 v34;
  int v39;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  int v48;
  int v49;
  BOOL v53;
  uint64_t v54;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v65;
  BOOL v99;
  BOOL v100;

  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949)
      return LODWORD((&off_1E819AF28)[9 * a3 + 6]);
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
LABEL_7:
    v9 = HIDWORD(v8) == 0;
LABEL_8:
    v10 = a2 == 10;
    if (a2 == 10 && v9)
    {
      if (*(_QWORD *)a1 == 0x696D6474376D7261 && *(_WORD *)(a1 + 8) == 29485)
        goto LABEL_405;
      v12 = v8 & 0x100000000;
      v10 = 1;
    }
    else
    {
      v12 = v8 & 0x100000000;
      if (a2 == 7 && !v12)
      {
        if (*(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315383)
          goto LABEL_405;
        if (*(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315639)
          goto LABEL_405;
        v12 = 0;
      }
    }
    v15 = v12 == 0;
    if (v12)
      v5 = 0;
    if (v5 == 1)
    {
      if (*(_DWORD *)a1 == 963474017)
        goto LABEL_405;
      v15 = 1;
    }
    v16 = v6 & v15;
    if ((v6 & v15) == 1 && *(_DWORD *)a1 == 963474017 && *(_WORD *)(a1 + 4) == 12338)
      goto LABEL_405;
    v18 = a2 == 7 && v15;
    if (v18)
    {
      if (*(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949315641)
        goto LABEL_405;
      if (*(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949446713)
        goto LABEL_405;
      if (*(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949316153)
        goto LABEL_405;
    }
    if (v16)
    {
      if (*(_DWORD *)a1 == 859402341 && *(_WORD *)(a1 + 4) == 12849)
        goto LABEL_405;
    }
    v23 = v4 & v15;
    if ((v4 & v15) == 1 && *(_QWORD *)a1 == 0x6D647430316D7261 && *(_BYTE *)(a1 + 8) == 105)
      goto LABEL_405;
    v25 = a2 == 5 && v15;
    if (v25 && *(_DWORD *)a1 == 963474017 && *(_BYTE *)(a1 + 4) == 101)
      goto LABEL_405;
    if (v23)
    {
      if (*(_QWORD *)a1 == 0x2D653634396D7261 && *(_BYTE *)(a1 + 8) == 115)
        goto LABEL_405;
      if (*(_QWORD *)a1 == 0x2D653636396D7261 && *(_BYTE *)(a1 + 8) == 115)
        goto LABEL_405;
      if (*(_QWORD *)a1 == 0x2D653836396D7261 && *(_BYTE *)(a1 + 8) == 115)
        goto LABEL_405;
    }
    if (v16)
    {
      if (*(_DWORD *)a1 == 829256289 && *(_WORD *)(a1 + 4) == 25904)
        goto LABEL_405;
    }
    v31 = v10 && v15;
    if (v31 == 1)
    {
      if (*(_QWORD *)a1 == 0x6A653632396D7261 && *(_WORD *)(a1 + 8) == 29485)
        goto LABEL_405;
      if (*(_QWORD *)a1 == 0x6A363331316D7261 && *(_WORD *)(a1 + 8) == 29485)
        goto LABEL_405;
      v15 = 1;
    }
    v34 = a2 == 11 && v15;
    if (v34 && *(_QWORD *)a1 == 0x6A363331316D7261 && *(_QWORD *)(a1 + 3) == 0x732D666A36333131)
      goto LABEL_410;
    if (v16)
    {
      if (*(_DWORD *)a1 == 1868787821 && *(_WORD *)(a1 + 4) == 25970)
        goto LABEL_410;
    }
    if (v34)
    {
      if (*(_QWORD *)a1 == 0x6F6E65726F63706DLL && *(_QWORD *)(a1 + 3) == 0x7066766F6E65726FLL)
        goto LABEL_405;
      if (*(_QWORD *)a1 == 0x6A363731316D7261 && *(_QWORD *)(a1 + 3) == 0x732D7A6A36373131)
        goto LABEL_405;
    }
    v39 = v7 & v15;
    if ((v7 & v15) == 1 && *(_QWORD *)a1 == 0x6A363731316D7261 && *(_DWORD *)(a1 + 8) == 1932355194)
      goto LABEL_410;
    if (v34 && *(_QWORD *)a1 == 0x74363531316D7261 && *(_QWORD *)(a1 + 3) == 0x732D327436353131)
      goto LABEL_405;
    if (v39)
    {
      if (*(_QWORD *)a1 == 0x74363531316D7261 && *(_DWORD *)(a1 + 8) == 1932355122)
      {
LABEL_410:
        v45 = 0x100000003;
        goto LABEL_406;
      }
    }
    if (v23)
    {
      if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 48)
        goto LABEL_405;
      v23 = 1;
    }
  }
  else
  {
    v8 = 0;
    v4 = 0;
    v9 = 1;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    switch(a2)
    {
      case 4:
        v4 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0x100000001;
        if (*(_DWORD *)a1 != 946696801)
          v8 = 0;
        v5 = 1;
        goto LABEL_7;
      case 5:
      case 7:
      case 10:
      case 11:
        goto LABEL_8;
      case 6:
        v4 = 0;
        v5 = 0;
        v7 = 0;
        v8 = 0x100000001;
        if (*(_DWORD *)a1 ^ 0x386D7261 | *(unsigned __int16 *)(a1 + 4) ^ 0x3031)
          v8 = 0;
        v6 = 1;
        goto LABEL_7;
      case 8:
        if (*(_QWORD *)a1 == 0x696D6474376D7261)
        {
          v34 = 0;
          v16 = 0;
          v5 = 0;
          v48 = 0;
          v49 = 0;
          v18 = 0;
          v23 = 0;
          v25 = 0;
          v31 = 0;
          v39 = 0;
          goto LABEL_174;
        }
        if (*(_QWORD *)a1 == 0x696D6474396D7261 || *(_QWORD *)a1 == 0x74303230316D7261)
          goto LABEL_405;
        v45 = 0x100000001;
        if (*(_QWORD *)a1 != 0x65303230316D7261 && *(_QWORD *)a1 != 0x65323230316D7261)
          v45 = 0;
        goto LABEL_406;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0x100000001;
        if (*(_QWORD *)a1 ^ 0x7261676E6F727473 | *(unsigned __int8 *)(a1 + 8) ^ 0x6DLL)
          v8 = 0;
        v4 = 1;
        goto LABEL_7;
      case 12:
        v4 = 0;
        v5 = 0;
        v6 = 0;
        v8 = 0x100000001;
        if (*(_QWORD *)a1 ^ 0x7261676E6F727473 | *(unsigned int *)(a1 + 8) ^ 0x3031316DLL)
          v8 = 0;
        v7 = 1;
        goto LABEL_7;
      case 13:
        v46 = *(_QWORD *)a1 == 0x7261676E6F727473 && *(_QWORD *)(a1 + 5) == 0x303031316D726167;
        if (v46
          || (*(_QWORD *)a1 == 0x7261676E6F727473 ? (v47 = *(_QWORD *)(a1 + 5) == 0x303131316D726167) : (v47 = 0),
              v47))
        {
          v34 = 0;
          v16 = 0;
          v5 = 0;
          v48 = 0;
          v18 = 0;
          v23 = 0;
          v25 = 0;
          v31 = 0;
          v39 = 0;
          v49 = 1;
LABEL_174:
          v8 = 0x100000001;
          if (!v49)
            break;
        }
        else
        {
          v34 = 0;
          v16 = 0;
          v5 = 0;
          v8 = 0;
          v18 = 0;
          v23 = 0;
          v25 = 0;
          v31 = 0;
          v39 = 0;
          v48 = 1;
        }
        if (v48)
        {
          if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_QWORD *)(a1 + 5) == 0x73756C70306D2D78)
            goto LABEL_405;
        }
        break;
      default:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        goto LABEL_8;
    }
  }
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 49)
      goto LABEL_405;
  }
  if (v25 && *(_DWORD *)a1 == 808477555 && *(_BYTE *)(a1 + 4) == 48)
    goto LABEL_405;
  v45 = 0x100000016;
  if (v23)
  {
    v53 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_BYTE *)(a1 + 8) == 53;
    v54 = 0x100000014;
    if (v53)
      goto LABEL_409;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_BYTE *)(a1 + 8) == 55)
      goto LABEL_409;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_BYTE *)(a1 + 8) == 56)
    {
      v45 = 0x100000012;
      goto LABEL_406;
    }
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_BYTE *)(a1 + 8) == 57)
    {
      v45 = 0x100000013;
      goto LABEL_406;
    }
  }
  if (v31)
  {
    v58 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12849;
    if (v58
      || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v59 = *(unsigned __int16 *)(a1 + 8) == 13617) : (v59 = 0),
          v59
       || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v60 = *(unsigned __int16 *)(a1 + 8) == 14129) : (v60 = 0), v60)))
    {
      v45 = 0x100000014;
      goto LABEL_406;
    }
  }
  if (v25 && *(_DWORD *)a1 == 1767993963 && *(_BYTE *)(a1 + 4) == 116)
  {
    v45 = 0x100000014;
    goto LABEL_406;
  }
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x722D786574726F63 && *(_BYTE *)(a1 + 8) == 52)
      goto LABEL_405;
  }
  if (v31)
  {
    if (*(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 26164)
    {
LABEL_412:
      v45 = 0x100000006;
      goto LABEL_406;
    }
  }
  if (v23)
  {
    if (*(_QWORD *)a1 != 0x722D786574726F63 || *(_BYTE *)(a1 + 8) != 53)
    {
      v65 = *(_QWORD *)a1 == 0x722D786574726F63 && *(_BYTE *)(a1 + 8) == 55;
      v54 = 0x100000007;
      if (!v65 && (*(_QWORD *)a1 != 0x722D786574726F63 || *(_BYTE *)(a1 + 8) != 56))
        goto LABEL_248;
LABEL_409:
      v45 = v54;
      goto LABEL_406;
    }
    goto LABEL_412;
  }
LABEL_248:
  if (v31)
  {
    if (*(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12853)
    {
LABEL_417:
      v45 = 0x100000015;
      goto LABEL_406;
    }
  }
  if (v25 && *(_DWORD *)a1 == 808674163 && *(_BYTE *)(a1 + 4) == 48)
    goto LABEL_405;
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 51)
      goto LABEL_405;
    if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 52)
    {
      v45 = 0x10000000CLL;
      goto LABEL_406;
    }
    if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 55)
    {
      v45 = 0x10000000DLL;
      goto LABEL_406;
    }
  }
  if (!v31)
    goto LABEL_280;
  if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13106)
  {
LABEL_405:
    v45 = 0x100000001;
    goto LABEL_406;
  }
  if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13107)
    goto LABEL_418;
LABEL_280:
  if (v34 && *(_QWORD *)a1 == 0x6D2D786574726F63 && *(_QWORD *)(a1 + 3) == 0x7035336D2D786574)
  {
LABEL_418:
    v45 = 0x10000000ELL;
    goto LABEL_406;
  }
  if (!v31)
  {
LABEL_326:
    if (v39)
    {
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687)
        goto LABEL_406;
    }
    if (v31)
    {
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135)
        goto LABEL_406;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391)
        goto LABEL_406;
    }
    if (!v34)
      goto LABEL_391;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x633837612D786574)
      goto LABEL_406;
    if (*(_QWORD *)a1 != 0x612D786574726F63 || *(_QWORD *)(a1 + 3) != 0x303137612D786574)
    {
LABEL_391:
      if (v23)
      {
        if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 49)
          goto LABEL_406;
      }
      if (v31)
      {
        if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_WORD *)(a1 + 8) == 25393)
          goto LABEL_406;
      }
      if (v34)
      {
        if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x316E2D6573726576)
          goto LABEL_406;
        if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x326E2D6573726576)
          goto LABEL_406;
        if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x31762D6573726576)
          goto LABEL_406;
      }
      if (v18 && *(_DWORD *)a1 == 1818458467 && *(_DWORD *)(a1 + 3) == 1701736300)
        goto LABEL_406;
      if (v23)
      {
        if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 51)
          goto LABEL_406;
        if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 52)
          goto LABEL_406;
        if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 53)
          goto LABEL_406;
      }
      if (v5 && *(_DWORD *)a1 == 1870230123)
        goto LABEL_406;
      if (!v16
        || (*(_DWORD *)a1 == 1835890537 ? (v99 = *(unsigned __int16 *)(a1 + 4) == 29816) : (v99 = 0),
            !v99 && (*(_DWORD *)a1 == 1633907576 ? (v100 = *(unsigned __int16 *)(a1 + 4) == 25964) : (v100 = 0), !v100)))
      {
        if (v25)
        {
          if (*(_DWORD *)a1 ^ 0x66697773 | *(unsigned __int8 *)(a1 + 4) ^ 0x74)
            v45 = v8;
          else
            v45 = 0x100000014;
        }
        else if (v18)
        {
          if (*(_DWORD *)a1 ^ 0x61766E69 | *(_DWORD *)(a1 + 3) ^ 0x64696C61)
            v45 = v8;
          else
            v45 = 0x100000000;
        }
        else
        {
          v45 = v8;
        }
        goto LABEL_406;
      }
      goto LABEL_405;
    }
    goto LABEL_417;
  }
  if (*(_QWORD *)a1 != 0x6D2D786574726F63 || *(_WORD *)(a1 + 8) != 13621)
  {
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12851)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12855)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13111)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623)
      goto LABEL_406;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879)
      goto LABEL_406;
    goto LABEL_326;
  }
  v45 = 0x100000010;
LABEL_406:
  if ((v45 & 0xFF00000000) != 0)
    return v45;
  else
    return 0;
}

char *llvm::ARM::getDefaultExtensions(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  char v5;
  char v6;
  char v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  char v12;
  char v15;
  char v16;
  char v21;
  char v23;
  uint64_t v25;
  _BOOL4 v26;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  _BOOL4 v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  _BOOL4 v56;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v66;
  BOOL v67;
  BOOL v70;
  int v71;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  char v83;
  uint64_t v94;
  uint64_t v95;
  char v100;
  char v101;
  BOOL v102;
  BOOL v103;

  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949)
      return (&off_1E819AF28)[9 * a3 + 7];
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
LABEL_7:
    v9 = !v8;
LABEL_8:
    v10 = a2 == 10;
    if (a2 == 10 && v9)
    {
      v8 = *(_QWORD *)a1 == 0x696D6474376D7261 && *(_WORD *)(a1 + 8) == 29485;
      v10 = 1;
    }
    else
    {
      v12 = v9 ^ 1;
      if (a2 != 7)
        v12 = 1;
      if ((v12 & 1) == 0)
        v8 = *(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315383;
      if (a2 == 7 && !v8)
        v8 = *(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315639;
    }
    v15 = v5 ^ 1;
    if (v8)
      v15 = 1;
    if ((v15 & 1) == 0)
    {
      v8 = *(_DWORD *)a1 == 963474017;
      v5 = 1;
    }
    v16 = v6 ^ 1;
    if (v8)
      v16 = 1;
    if ((v16 & 1) == 0)
      v8 = *(_DWORD *)a1 == 963474017 && *(_WORD *)(a1 + 4) == 12338;
    if (a2 == 7 && !v8)
      v8 = *(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949315641;
    if (a2 == 7 && !v8)
      v8 = *(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949446713;
    if (a2 == 7 && !v8)
      v8 = *(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949316153;
    v21 = v6 ^ 1;
    if (v8)
      v21 = 1;
    if ((v21 & 1) == 0)
      v8 = *(_DWORD *)a1 == 859402341 && *(_WORD *)(a1 + 4) == 12849;
    v23 = v4 ^ 1;
    if (v8)
      v23 = 1;
    if ((v23 & 1) == 0)
      v8 = *(_QWORD *)a1 == 0x6D647430316D7261 && *(_BYTE *)(a1 + 8) == 105;
    v25 = 0;
    v26 = a2 == 5;
    if (a2 == 5 && !v8)
    {
      v8 = *(_DWORD *)a1 == 963474017 && *(_BYTE *)(a1 + 4) == 101;
      v25 = 4 * v8;
      v26 = 1;
    }
    v28 = v4 ^ 1;
    if (v8)
      v29 = 1;
    else
      v29 = v4 ^ 1;
    if ((v29 & 1) == 0)
    {
      LOBYTE(v8) = *(_QWORD *)a1 == 0x2D653634396D7261 && *(_BYTE *)(a1 + 8) == 115;
      if (v8)
        v25 = 4;
    }
    if (v8)
      v28 = 1;
    if ((v28 & 1) == 0)
    {
      LOBYTE(v8) = *(_QWORD *)a1 == 0x2D653636396D7261 && *(_BYTE *)(a1 + 8) == 115;
      if (v8)
        v25 = 4;
    }
    v30 = v4 ^ 1;
    if (v8)
      v30 = 1;
    if ((v30 & 1) == 0)
    {
      LOBYTE(v8) = *(_QWORD *)a1 == 0x2D653836396D7261 && *(_BYTE *)(a1 + 8) == 115;
      if (v8)
        v25 = 4;
    }
    v31 = v6 ^ 1;
    if (v8)
      v31 = 1;
    if ((v31 & 1) == 0)
    {
      LOBYTE(v8) = *(_DWORD *)a1 == 829256289 && *(_WORD *)(a1 + 4) == 25904;
      if (v8)
        v25 = 4;
    }
    v32 = !v10;
    v33 = v8 || !v10;
    if ((v33 & 1) == 0)
    {
      LOBYTE(v8) = *(_QWORD *)a1 == 0x6A653632396D7261 && *(_WORD *)(a1 + 8) == 29485;
      if (v8)
        v25 = 4;
    }
    if (v8)
      v32 = 1;
    if ((v32 & 1) != 0)
    {
      v34 = 0;
    }
    else
    {
      v34 = 0;
      LOBYTE(v8) = *(_QWORD *)a1 == 0x6A363331316D7261 && *(_WORD *)(a1 + 8) == 29485;
      if (v8)
        v25 = 4;
      v10 = 1;
    }
  }
  else
  {
    v8 = 0;
    v9 = 1;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    switch(a2)
    {
      case 4:
        v4 = 0;
        v6 = 0;
        v7 = 0;
        v8 = *(_DWORD *)a1 == 946696801;
        v5 = 1;
        goto LABEL_7;
      case 5:
      case 7:
      case 10:
      case 11:
        goto LABEL_8;
      case 6:
        v4 = 0;
        v5 = 0;
        v7 = 0;
        v8 = *(_DWORD *)a1 == 946696801 && *(_WORD *)(a1 + 4) == 12337;
        v6 = 1;
        goto LABEL_7;
      case 8:
        if (*(_QWORD *)a1 == 0x696D6474376D7261 || *(_QWORD *)a1 == 0x696D6474396D7261)
        {
          v34 = 0;
          goto LABEL_174;
        }
        LOBYTE(v8) = *(_QWORD *)a1 == 0x74303230316D7261;
        if (*(_QWORD *)a1 == 0x74303230316D7261)
        {
          v25 = 0;
        }
        else
        {
          LOBYTE(v8) = *(_QWORD *)a1 == 0x65303230316D7261;
          v25 = 4 * v8;
        }
        v10 = 0;
        v7 = 0;
        v6 = 0;
        v5 = 0;
        v4 = 0;
        v34 = 0;
        v26 = 0;
        if (!v8)
        {
          LOBYTE(v8) = *(_QWORD *)a1 == 0x65323230316D7261;
          if (*(_QWORD *)a1 == 0x65323230316D7261)
            v25 = 4;
        }
        break;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = *(_QWORD *)a1 == 0x7261676E6F727473 && *(_BYTE *)(a1 + 8) == 109;
        v4 = 1;
        goto LABEL_7;
      case 12:
        v4 = 0;
        v5 = 0;
        v6 = 0;
        v8 = *(_QWORD *)a1 == 0x7261676E6F727473 && *(_DWORD *)(a1 + 8) == 808530285;
        v7 = 1;
        goto LABEL_7;
      case 13:
        if (*(_QWORD *)a1 == 0x7261676E6F727473 && *(_QWORD *)(a1 + 5) == 0x303031316D726167)
        {
          v34 = 1;
LABEL_174:
          LOBYTE(v8) = 1;
        }
        else
        {
          LOBYTE(v8) = *(_QWORD *)a1 == 0x7261676E6F727473 && *(_QWORD *)(a1 + 5) == 0x303131316D726167;
          v34 = 1;
        }
        v10 = 0;
        v7 = 0;
        v6 = 0;
        v5 = 0;
        v4 = 0;
        v26 = 0;
        v25 = 0;
        break;
      default:
        v4 = 0;
        v5 = 0;
        v6 = 0;
        v7 = 0;
        goto LABEL_8;
    }
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6A363331316D7261 && *(_QWORD *)(a1 + 3) == 0x732D666A36333131;
    if (v8)
      v25 = 4;
  }
  v41 = v6 ^ 1;
  if (v8)
    v41 = 1;
  if ((v41 & 1) == 0)
  {
    LOBYTE(v8) = *(_DWORD *)a1 == 1868787821 && *(_WORD *)(a1 + 4) == 25970;
    if (v8)
      v25 = 4;
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6F6E65726F63706DLL && *(_QWORD *)(a1 + 3) == 0x7066766F6E65726FLL;
    if (v8)
      v25 = 4;
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6A363731316D7261 && *(_QWORD *)(a1 + 3) == 0x732D7A6A36373131;
    if (v8)
      v25 = 5;
  }
  v42 = v7 ^ 1;
  if (v8)
    v42 = 1;
  if ((v42 & 1) == 0)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6A363731316D7261 && *(_DWORD *)(a1 + 8) == 1932355194;
    if (v8)
      v25 = 5;
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x74363531316D7261 && *(_QWORD *)(a1 + 3) == 0x732D327436353131;
    if (v8)
      v25 = 4;
  }
  v43 = v7 ^ 1;
  if (v8)
    v43 = 1;
  if ((v43 & 1) == 0)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x74363531316D7261 && *(_DWORD *)(a1 + 8) == 1932355122;
    if (v8)
      v25 = 4;
  }
  v44 = v4 ^ 1;
  if (v8)
    v44 = 1;
  if ((v44 & 1) == 0)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 48;
    if (v8)
      v25 = 0;
  }
  v45 = v34 ^ 1;
  if (v8)
    v45 = 1;
  if ((v45 & 1) == 0)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6D2D786574726F63 && *(_QWORD *)(a1 + 5) == 0x73756C70306D2D78;
    if (v8)
      v25 = 0;
  }
  v46 = v4 ^ 1;
  if (v8)
    v46 = 1;
  if ((v46 & 1) == 0)
  {
    LOBYTE(v8) = *(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 49;
    if (v8)
      v25 = 0;
  }
  v47 = !v26;
  if (v8)
    v47 = 1;
  if ((v47 & 1) == 0)
  {
    LOBYTE(v8) = *(_DWORD *)a1 == 808477555 && *(_BYTE *)(a1 + 4) == 48;
    if (v8)
      v25 = 0;
  }
  if (v8)
    v4 = 0;
  if (v4 == 1)
  {
    if (*(_QWORD *)a1 != 0x612D786574726F63 || *(_BYTE *)(a1 + 8) != 53)
    {
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_BYTE *)(a1 + 8) == 55)
        goto LABEL_428;
      if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_BYTE *)(a1 + 8) == 56)
      {
        v94 = 0;
        goto LABEL_433;
      }
      if (*(_QWORD *)a1 != 0x612D786574726F63 || *(_BYTE *)(a1 + 8) != 57)
        goto LABEL_246;
    }
    v94 = 64;
LABEL_433:
    v95 = 1280;
    return (char *)(v94 | v95);
  }
LABEL_246:
  v52 = !v8 && v10;
  if (v52)
  {
    v53 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12849;
    if (v53
      || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v54 = *(unsigned __int16 *)(a1 + 8) == 13617) : (v54 = 0),
          v54
       || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v55 = *(unsigned __int16 *)(a1 + 8) == 14129) : (v55 = 0), v55)))
    {
LABEL_428:
      v94 = 112;
LABEL_429:
      v95 = 1792;
      return (char *)(v94 | v95);
    }
  }
  v56 = !v8 && v26;
  if (v56 && *(_DWORD *)a1 == 1767993963 && *(_BYTE *)(a1 + 4) == 116)
  {
LABEL_491:
    v94 = 48;
    goto LABEL_492;
  }
  if (v4)
  {
    if (*(_QWORD *)a1 == 0x722D786574726F63 && *(_BYTE *)(a1 + 8) == 52)
      goto LABEL_431;
  }
  if (v52 && *(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 26164)
    goto LABEL_431;
  if (v4)
  {
    v60 = *(_QWORD *)a1 == 0x722D786574726F63 && *(_BYTE *)(a1 + 8) == 53;
    if (v60
      || (*(_QWORD *)a1 == 0x722D786574726F63 ? (v61 = *(_BYTE *)(a1 + 8) == 55) : (v61 = 0),
          v61 || (*(_QWORD *)a1 == 0x722D786574726F63 ? (v62 = *(_BYTE *)(a1 + 8) == 56) : (v62 = 0), v62)))
    {
      v94 = 112;
      goto LABEL_492;
    }
  }
  if (v52 && *(_QWORD *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12853)
  {
    v94 = 115;
    v95 = 1536;
    return (char *)(v94 | v95);
  }
  if (v56 && *(_DWORD *)a1 == 808674163 && *(_BYTE *)(a1 + 4) == 48)
    goto LABEL_435;
  if (v4)
  {
    if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 51)
      goto LABEL_435;
    v66 = *(_QWORD *)a1 == 0x6D2D786574726F63 && *(_BYTE *)(a1 + 8) == 52;
    if (v66 || (*(_QWORD *)a1 == 0x6D2D786574726F63 ? (v67 = *(_BYTE *)(a1 + 8) == 55) : (v67 = 0), v67))
    {
LABEL_431:
      v94 = 17;
LABEL_492:
      v95 = 1024;
      return (char *)(v94 | v95);
    }
  }
  if (!v52)
    goto LABEL_325;
  if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13106)
  {
LABEL_435:
    v95 = 0;
    v94 = 17;
    return (char *)(v94 | v95);
  }
  if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13107)
    goto LABEL_442;
LABEL_325:
  v70 = !v8 && a2 == 11;
  v71 = v70;
  if (v70 && *(_QWORD *)a1 == 0x6D2D786574726F63 && *(_QWORD *)(a1 + 3) == 0x7035336D2D786574)
  {
LABEL_442:
    v94 = 16;
    goto LABEL_492;
  }
  if (v52)
  {
    if (*(_QWORD *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
    {
      v94 = 152;
      v95 = 531456;
      return (char *)(v94 | v95);
    }
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12851)
      goto LABEL_495;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619)
      goto LABEL_495;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109)
      goto LABEL_495;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
    {
LABEL_494:
      v94 = 114;
      v95 = 16128;
      return (char *)(v94 | v95);
    }
    v78 = *(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133;
    if (v78
      || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v79 = *(unsigned __int16 *)(a1 + 8) == 12855) : (v79 = 0),
          v79
       || (*(_QWORD *)a1 == 0x612D786574726F63 ? (v80 = *(unsigned __int16 *)(a1 + 8) == 13111) : (v80 = 0), v80)))
    {
LABEL_495:
      v94 = 114;
      goto LABEL_429;
    }
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623)
      goto LABEL_494;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879)
      goto LABEL_494;
  }
  v83 = v7 ^ 1;
  if (v8)
    v83 = 1;
  if ((v83 & 1) == 0 && *(_QWORD *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687)
    goto LABEL_494;
  if (v52)
  {
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135)
      goto LABEL_494;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391)
      goto LABEL_494;
  }
  if (v71)
  {
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x633837612D786574)
      goto LABEL_494;
    if (*(_QWORD *)a1 == 0x612D786574726F63 && *(_QWORD *)(a1 + 3) == 0x303137612D786574)
    {
      v95 = 3356416;
      goto LABEL_498;
    }
  }
  if (v4)
  {
    if (*(_QWORD *)a1 == 0x782D786574726F63 && *(_BYTE *)(a1 + 8) == 49)
      goto LABEL_494;
  }
  if (v52 && *(_QWORD *)a1 == 0x782D786574726F63 && *(_WORD *)(a1 + 8) == 25393)
    goto LABEL_494;
  if (v71)
  {
    if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x316E2D6573726576)
      goto LABEL_494;
    if (*(_QWORD *)a1 != 0x65737265766F656ELL || *(_QWORD *)(a1 + 3) != 0x326E2D6573726576)
    {
      if (*(_QWORD *)a1 == 0x65737265766F656ELL && *(_QWORD *)(a1 + 3) == 0x31762D6573726576)
      {
        v94 = 114;
        v95 = 1064704;
        return (char *)(v94 | v95);
      }
      goto LABEL_450;
    }
    v95 = 3290880;
LABEL_498:
    v94 = 114;
    return (char *)(v94 | v95);
  }
  if (a2 == 7 && !v8 && *(_DWORD *)a1 == 1818458467 && *(_DWORD *)(a1 + 3) == 1701736300)
    goto LABEL_495;
LABEL_450:
  if (!v4)
    goto LABEL_463;
  if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 51)
    goto LABEL_495;
  if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 52)
    goto LABEL_494;
  if (*(_QWORD *)a1 == 0x6D2D736F6E797865 && *(_BYTE *)(a1 + 8) == 53)
    goto LABEL_494;
LABEL_463:
  v100 = v5 ^ 1;
  if (v8)
    v100 = 1;
  if ((v100 & 1) == 0 && *(_DWORD *)a1 == 1870230123)
    goto LABEL_495;
  v101 = v6 ^ 1;
  if (v8)
    v101 = 1;
  if ((v101 & 1) == 0)
  {
    v102 = *(_DWORD *)a1 == 1835890537 && *(_WORD *)(a1 + 4) == 29816;
    if (v102 || (*(_DWORD *)a1 == 1633907576 ? (v103 = *(unsigned __int16 *)(a1 + 4) == 25964) : (v103 = 0), v103))
    {
LABEL_490:
      v95 = 0;
      v94 = 1;
      return (char *)(v94 | v95);
    }
  }
  if (v56 && *(_DWORD *)a1 == 1718187891 && *(_BYTE *)(a1 + 4) == 116)
    goto LABEL_491;
  if (a2 == 7 && !v8)
  {
    if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625)
      return 0;
    goto LABEL_490;
  }
  if (v8)
    return (char *)(v8 | (unint64_t)(v25 << 8));
  return 0;
}

BOOL llvm::ARM::getHWDivFeatures(uint64_t a1, const char ***a2)
{
  unint64_t v4;
  const char **v5;
  const char *v6;
  const char **v7;
  const char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  const char **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  const char *v23;
  const char **v24;
  const char **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  const char **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;

  if (a1)
  {
    v5 = a2[1];
    v4 = (unint64_t)a2[2];
    if ((a1 & 0x20) != 0)
    {
      if ((unint64_t)v5 < v4)
      {
        v6 = "+hwdiv-arm";
        goto LABEL_7;
      }
      v14 = *a2;
      v15 = ((char *)v5 - (char *)*a2) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_73;
      v17 = v4 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          goto LABEL_74;
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      v21 = &v19[16 * v18];
      *(_QWORD *)v20 = "+hwdiv-arm";
      *((_QWORD *)v20 + 1) = 10;
      v7 = (const char **)(v20 + 16);
      if (v5 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
          v20 -= 16;
          v5 -= 2;
        }
        while (v5 != v14);
        goto LABEL_33;
      }
    }
    else
    {
      if ((unint64_t)v5 < v4)
      {
        v6 = "-hwdiv-arm";
LABEL_7:
        *v5 = v6;
        v5[1] = (const char *)10;
        v7 = v5 + 2;
        goto LABEL_36;
      }
      v8 = *a2;
      v9 = ((char *)v5 - (char *)*a2) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        goto LABEL_73;
      v11 = v4 - (_QWORD)v8;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          goto LABEL_74;
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v20 = &v13[16 * v9];
      v21 = &v13[16 * v12];
      *(_QWORD *)v20 = "-hwdiv-arm";
      *((_QWORD *)v20 + 1) = 10;
      v7 = (const char **)(v20 + 16);
      if (v5 != v8)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
          v20 -= 16;
          v5 -= 2;
        }
        while (v5 != v8);
LABEL_33:
        v5 = *a2;
      }
    }
    *a2 = (const char **)v20;
    a2[1] = v7;
    a2[2] = (const char **)v21;
    if (v5)
      operator delete(v5);
LABEL_36:
    a2[1] = v7;
    v22 = (unint64_t)a2[2];
    if ((a1 & 0x10) != 0)
    {
      if ((unint64_t)v7 < v22)
      {
        v23 = "+hwdiv";
        goto LABEL_41;
      }
      v31 = *a2;
      v32 = ((char *)v7 - (char *)*a2) >> 4;
      v33 = v32 + 1;
      if (!((unint64_t)(v32 + 1) >> 60))
      {
        v34 = v22 - (_QWORD)v31;
        if (v34 >> 3 > v33)
          v33 = v34 >> 3;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v35 = 0xFFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 60)
            goto LABEL_74;
          v36 = (char *)operator new(16 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[16 * v32];
        v38 = &v36[16 * v35];
        *(_QWORD *)v37 = "+hwdiv";
        *((_QWORD *)v37 + 1) = 6;
        v24 = (const char **)(v37 + 16);
        if (v7 != v31)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v7 - 1);
            v37 -= 16;
            v7 -= 2;
          }
          while (v7 != v31);
LABEL_67:
          v7 = *a2;
          *a2 = (const char **)v37;
          a2[1] = v24;
          a2[2] = (const char **)v38;
          if (!v7)
            goto LABEL_71;
          goto LABEL_70;
        }
LABEL_69:
        *a2 = (const char **)v37;
        a2[1] = v24;
        a2[2] = (const char **)v38;
LABEL_70:
        operator delete(v7);
        goto LABEL_71;
      }
    }
    else
    {
      if ((unint64_t)v7 < v22)
      {
        v23 = "-hwdiv";
LABEL_41:
        *v7 = v23;
        v7[1] = (const char *)6;
        v24 = v7 + 2;
LABEL_71:
        a2[1] = v24;
        return a1 != 0;
      }
      v25 = *a2;
      v26 = ((char *)v7 - (char *)*a2) >> 4;
      v27 = v26 + 1;
      if (!((unint64_t)(v26 + 1) >> 60))
      {
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (!v29)
        {
          v30 = 0;
LABEL_61:
          v37 = &v30[16 * v26];
          v38 = &v30[16 * v29];
          *(_QWORD *)v37 = "-hwdiv";
          *((_QWORD *)v37 + 1) = 6;
          v24 = (const char **)(v37 + 16);
          if (v7 != v25)
          {
            do
            {
              *((_OWORD *)v37 - 1) = *((_OWORD *)v7 - 1);
              v37 -= 16;
              v7 -= 2;
            }
            while (v7 != v25);
            goto LABEL_67;
          }
          goto LABEL_69;
        }
        if (!(v29 >> 60))
        {
          v30 = (char *)operator new(16 * v29);
          goto LABEL_61;
        }
LABEL_74:
        sub_1C4764EE4();
      }
    }
LABEL_73:
    abort();
  }
  return a1 != 0;
}

uint64_t llvm::ARM::getArchAttr(unsigned int a1)
{
  return *((unsigned int *)&off_1E819AF28 + 18 * a1 + 17);
}

char *llvm::ARM::getArchExtName(llvm::ARM *this)
{
  uint64_t v1;

  v1 = 0;
  while ((&off_1E819BFF0)[v1 + 2] != (char *)this)
  {
    v1 += 5;
    if (v1 == 190)
      return 0;
  }
  return (&off_1E819BFF0)[v1];
}

char *llvm::ARM::getArchExtFeature(char *__s1, size_t __n)
{
  size_t v2;
  char *v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  char **v9;
  uint64_t v10;

  v2 = __n;
  v3 = __s1;
  if (__n >= 2)
  {
    v5 = *(unsigned __int16 *)__s1;
    v4 = v5 == 28526;
    if (v5 == 28526)
    {
      v2 = __n - 2;
      v3 = __s1 + 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = &(&off_1E819BFF0)[v6];
    if ((&off_1E819BFF0)[v6 + 3])
    {
      if ((char *)v2 == v7[1] && (!v2 || !memcmp(v3, *v7, v2)))
        break;
    }
    v6 += 5;
    if (v6 == 190)
      return 0;
  }
  v9 = &(&off_1E819BFF0)[v6];
  v10 = 3;
  if (v4)
    v10 = 4;
  v8 = v9[v10];
  if (v8)
    strlen(v9[v10]);
  return v8;
}

BOOL llvm::ARM::appendArchExtFeatures(const char *a1, uint64_t a2, unsigned int a3, char *__s1, size_t __n, const char ***a6, unsigned int *a7)
{
  size_t v8;
  char *v9;
  const char **v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;
  const char ***v15;
  char **v16;
  _BOOL4 v17;
  char *v18;
  char *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  const char **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  const char **v30;
  const char **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v41;
  const char **v42;
  unsigned int DefaultFPU;
  unsigned int v45;
  uint64_t v46;
  char **v47;
  int v48;
  _DWORD *v49;
  const char **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unsigned int v57;
  unsigned int *v58;
  char *v59;
  char *v60;
  _BOOL4 v63;

  v8 = __n;
  v9 = __s1;
  v11 = a6[1];
  if (__n >= 2)
  {
    v63 = *(unsigned __int16 *)__s1 == 28526;
    if (*(_WORD *)__s1 == 28526)
    {
      v9 = __s1 + 2;
      v8 = __n - 2;
    }
  }
  else
  {
    v63 = 0;
  }
  v60 = (char *)((char *)v11 - (char *)*a6);
  for (i = &qword_1E819C000; ; i += 5)
  {
    v13 = i - 2;
    if (v8 == *(i - 1) && (!v8 || !memcmp(v9, (const void *)*(i - 2), v8)))
      break;
    if (v13 + 5 == (uint64_t *)&off_1E819C5E0)
      return 0;
  }
  v59 = v9;
  v14 = *i;
  v15 = a6;
  if (!*i)
    return 0;
  v57 = a3;
  v58 = a7;
  v16 = &off_1E819BFF0;
  v17 = v63;
  do
  {
    v18 = v16[2];
    v19 = (char *)((unint64_t)v18 & v14);
    if (v17)
    {
      if (v19 == (char *)v14)
      {
        v20 = v16[4];
        if (v20)
        {
          v21 = strlen(v16[4]);
          v22 = (unint64_t)v15[2];
          if ((unint64_t)v11 < v22)
            goto LABEL_29;
          v23 = *v15;
          v24 = ((char *)v11 - (char *)*v15) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            goto LABEL_103;
          v26 = v22 - (_QWORD)v23;
          if (v26 >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 60)
              goto LABEL_104;
            v28 = (char *)operator new(16 * v27);
          }
          else
          {
            v28 = 0;
          }
          v35 = &v28[16 * v24];
          *(_QWORD *)v35 = v20;
          *((_QWORD *)v35 + 1) = v21;
          v36 = v35;
          if (v11 != v23)
          {
            v15 = a6;
            do
            {
              *((_OWORD *)v36 - 1) = *((_OWORD *)v11 - 1);
              v36 -= 16;
              v11 -= 2;
            }
            while (v11 != v23);
            goto LABEL_48;
          }
          goto LABEL_49;
        }
      }
    }
    else if (v19 == v18)
    {
      v20 = v16[3];
      if (v20)
      {
        v21 = strlen(v16[3]);
        v29 = (unint64_t)v15[2];
        if ((unint64_t)v11 < v29)
        {
LABEL_29:
          *v11 = v20;
          v11[1] = (const char *)v21;
          v30 = v11 + 2;
LABEL_53:
          v15[1] = v30;
          v11 = v30;
          goto LABEL_54;
        }
        v31 = *v15;
        v32 = ((char *)v11 - (char *)*v15) >> 4;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 60)
          goto LABEL_103;
        v34 = v29 - (_QWORD)v31;
        if (v34 >> 3 > v33)
          v33 = v34 >> 3;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v33;
        if (v27)
        {
          if (v27 >> 60)
            goto LABEL_104;
          v28 = (char *)operator new(16 * v27);
        }
        else
        {
          v28 = 0;
        }
        v35 = &v28[16 * v32];
        *(_QWORD *)v35 = v20;
        *((_QWORD *)v35 + 1) = v21;
        v36 = v35;
        if (v11 != v31)
        {
          v15 = a6;
          do
          {
            *((_OWORD *)v36 - 1) = *((_OWORD *)v11 - 1);
            v36 -= 16;
            v11 -= 2;
          }
          while (v11 != v31);
LABEL_48:
          v11 = *v15;
LABEL_50:
          v30 = (const char **)(v35 + 16);
          *v15 = (const char **)v36;
          v15[1] = (const char **)(v35 + 16);
          v15[2] = (const char **)&v28[16 * v27];
          if (v11)
            operator delete(v11);
          v17 = v63;
          goto LABEL_53;
        }
LABEL_49:
        v15 = a6;
        goto LABEL_50;
      }
    }
LABEL_54:
    v16 += 5;
  }
  while (v16 != &off_1E819C5E0);
  if (a2)
    v37 = a1;
  else
    v37 = "generic";
  if (a2)
    v38 = a2;
  else
    v38 = 7;
  if (v8 == 2)
  {
    v39 = v58;
    if (*(_WORD *)v59 != 28774)
      return v60 != (char *)((char *)v11 - (char *)*v15);
    if (v17)
      DefaultFPU = 1;
    else
      DefaultFPU = llvm::ARM::getDefaultFPU((uint64_t)v37, v38, v57);
    goto LABEL_84;
  }
  v39 = v58;
  if (v8 != 5)
    return v60 != (char *)((char *)v11 - (char *)*v15);
  if (*(_DWORD *)v59 != 1680765030 || v59[4] != 112)
    return v60 != (char *)((char *)v11 - (char *)*v15);
  if (!v17)
  {
    v45 = llvm::ARM::getDefaultFPU((uint64_t)v37, v38, v57);
    if (((0x25300uLL >> v45) & 1) != 0)
    {
      v46 = 0;
      v47 = &(&off_1E819BCA8)[4 * v45];
      v48 = *((_DWORD *)v47 + 5);
      v49 = v47 + 3;
      while (*((_DWORD *)&off_1E819BCA8 + 2 * v46 + 5) != v48
           || LODWORD((&off_1E819BCA8)[v46 + 3]) != *v49
           || *((_DWORD *)&off_1E819BCA8 + 2 * v46 + 7) != 1)
      {
        v46 += 4;
        if (v46 == 96)
          goto LABEL_82;
      }
      DefaultFPU = (&off_1E819BCA8)[v46 + 2];
    }
    else
    {
LABEL_82:
      DefaultFPU = 0;
    }
LABEL_84:
    *v39 = DefaultFPU;
    return llvm::ARM::getFPUFeatures(DefaultFPU, v15);
  }
  v41 = (unint64_t)v15[2];
  if ((unint64_t)v11 >= v41)
  {
    v50 = *v15;
    v51 = ((char *)v11 - (char *)v50) >> 4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 60)
LABEL_103:
      abort();
    v53 = v41 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 >> 60)
LABEL_104:
        sub_1C4764EE4();
      v55 = (char *)operator new(16 * v54);
    }
    else
    {
      v55 = 0;
    }
    v56 = &v55[16 * v51];
    *(_QWORD *)v56 = "-fp64";
    *((_QWORD *)v56 + 1) = 5;
    v42 = (const char **)(v56 + 16);
    if (v11 == v50)
    {
      v15 = a6;
    }
    else
    {
      do
      {
        *((_OWORD *)v56 - 1) = *((_OWORD *)v11 - 1);
        v56 -= 16;
        v11 -= 2;
      }
      while (v11 != v50);
      v15 = a6;
      v11 = *a6;
    }
    *v15 = (const char **)v56;
    v15[1] = v42;
    v15[2] = (const char **)&v55[16 * v54];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v11 = "-fp64";
    v11[1] = (const char *)5;
    v42 = v11 + 2;
  }
  v15[1] = v42;
  return 1;
}

uint64_t llvm::ARM::parseArchExt(void *__s1, size_t __n)
{
  uint64_t *i;
  uint64_t *v5;

  for (i = &qword_1E819C000; ; i += 5)
  {
    v5 = i - 2;
    if (__n == *(i - 1) && (!__n || !memcmp(__s1, (const void *)*(i - 2), __n)))
      break;
    if (v5 + 5 == (uint64_t *)&off_1E819C5E0)
      return 0;
  }
  return *i;
}

void *llvm::ARM::fillValidCPUArchList(void *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char **v8;

  v1 = (uint64_t)result;
  v2 = 0;
  v3 = (uint64_t)result + 16;
  do
  {
    v4 = &(&off_1E819C5E0)[v2];
    if (LODWORD((&off_1E819C5E0)[v2 + 2]))
    {
      v5 = *v4;
      v6 = v4[1];
      v7 = *(unsigned int *)(v1 + 8);
      if (v7 >= *(unsigned int *)(v1 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v1, v3, v7 + 1, 16);
        v7 = *(unsigned int *)(v1 + 8);
      }
      v8 = (char **)(*(_QWORD *)v1 + 16 * v7);
      *v8 = v5;
      v8[1] = v6;
      ++*(_DWORD *)(v1 + 8);
    }
    v2 += 4;
  }
  while (v2 != 356);
  return result;
}

const char *llvm::ARM::computeDefaultTargetABI(llvm::Triple *a1)
{
  llvm::Triple *ArchName;
  unint64_t v4;
  const char *result;
  llvm::Triple *v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  const char *v10;

  if (*((_DWORD *)a1 + 11) == 5)
  {
    if (*((_DWORD *)a1 + 10) == 9 || *((_DWORD *)a1 + 9) == 0)
      return "aapcs";
    ArchName = llvm::Triple::getArchName(a1);
    if (llvm::ARM::parseArchProfile((uint64_t)ArchName, v4) == 3)
      return "aapcs";
    result = "aapcs";
    if (*((_DWORD *)a1 + 10) != 9 && *((_DWORD *)a1 + 9))
    {
      v6 = llvm::Triple::getArchName(a1);
      if (llvm::ARM::parseArchProfile((uint64_t)v6, v7) != 3)
      {
        if (*((_DWORD *)a1 + 7) == 22)
          return "aapcs16";
        else
          return "apcs-gnu";
      }
      return "aapcs";
    }
  }
  else
  {
    v8 = *((_DWORD *)a1 + 9);
    if (v8 == 15)
      return "aapcs";
    v9 = *((_DWORD *)a1 + 10) - 4;
    if (v9 < 0xB && ((0x6E3u >> v9) & 1) != 0)
    {
      return off_1E819D178[v9];
    }
    else
    {
      v10 = "aapcs";
      if (v8 == 13)
        v10 = "aapcs-linux";
      if (v8 == 12)
        return "apcs-gnu";
      else
        return v10;
    }
  }
  return result;
}

llvm::yaml::Stream *llvm::AMDGPU::HSAMD::fromString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::yaml::Stream *v4;
  llvm::yaml::Stream *v6[40];

  v6[39] = *(llvm::yaml::Stream **)MEMORY[0x1E0C80C00];
  llvm::yaml::Input::Input((uint64_t)v6, a1, a2, 0, 0, 0);
  llvm::yaml::Input::setCurrentDocument(v6);
  (*((void (**)(llvm::yaml::Stream **))v6[0] + 13))(v6);
  sub_1C5DB2FB0((uint64_t *)v6, a3);
  (*((void (**)(llvm::yaml::Stream **))v6[0] + 14))(v6);
  v4 = v6[13];
  llvm::yaml::Input::~Input((llvm::yaml::Input *)v6);
  return v4;
}

uint64_t llvm::AMDGPU::HSAMD::toString(uint64_t a1, uint64_t a2)
{
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13[3];
  int v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[80];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = a2;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v13[0] = (uint64_t)&off_1E81A6C18;
  v13[1] = 0;
  v13[2] = (uint64_t)&v4;
  v14 = 0x7FFFFFFF;
  v15 = v17;
  v16 = 0x800000000;
  memset(&v17[32], 0, 48);
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)v13);
  (*(void (**)(uint64_t *))(v13[0] + 104))(v13);
  sub_1C5DB2FB0(v13, a1);
  (*(void (**)(uint64_t *))(v13[0] + 112))(v13);
  llvm::yaml::Output::output((uint64_t)v13, "\n...\n", 5uLL);
  std::system_category();
  v13[0] = (uint64_t)&off_1E81A6C18;
  if (v15 != v17)
    free(v15);
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  return 0;
}

uint64_t sub_1C5DB2FB0(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  _QWORD *v35;
  void **v36;
  _DWORD *v37;
  uint64_t v38;
  char *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void **v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void **v54;
  void *v55;
  void **v56;
  void **v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void **v62;
  uint64_t v63;
  void **v64;
  void *v65;
  void *v66;
  uint64_t v67;
  char v68;
  int v69;
  void *v70;
  char v71;
  int v72;
  void *v73;
  void **v74;
  void **v75;
  void *v76;
  void **v77;
  uint64_t v78;
  unint64_t v79;
  void **v80;
  void **v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  void **v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  void **v94;
  char *v95;
  void **v96;
  unsigned int v97;
  _BYTE *v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  unsigned int v135;
  _BYTE *v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  int *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  int v158;
  BOOL v159;
  void **v160;
  void **v161;
  unint64_t *v162;
  unint64_t v163;
  char **v164;
  uint64_t v165;
  void **v166;
  void **v167;
  uint64_t v168;
  _QWORD *v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  std::string *v176;
  std::string v177;

  v177.__r_.__value_.__r.__words[0] = 0;
  LOBYTE(v176) = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t, _QWORD, std::string **, std::string *))(*a1 + 120))(a1, "Version", 1, 0, &v176, &v177))
  {
    sub_1C5DB4B4C(a1, a2);
    (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
  }
  memset(&v177, 0, sizeof(v177));
  v176 = 0;
  LOBYTE(v174) = 0;
  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  v5 = 0;
  if (v4)
  {
    v7 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v8 = v177.__r_.__value_.__r.__words[0];
    if (v6 - v7 != v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0])
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    if (v7 != v6)
    {
      while (1)
      {
        v9 = *(_BYTE *)(v7 + 23);
        v10 = v9 & 0x7F;
        if (v9 >= 0)
          v11 = v9 & 0x7F;
        else
          v11 = *(_QWORD *)(v7 + 8);
        v12 = *(_BYTE *)(v8 + 23);
        v13 = v12;
        v14 = v12 & 0x7F;
        if (v13 < 0)
          v14 = *(_QWORD *)(v8 + 8);
        if (v11 != v14)
          goto LABEL_24;
        if (v13 >= 0)
          v15 = (unsigned __int8 *)v8;
        else
          v15 = *(unsigned __int8 **)v8;
        if ((*(_BYTE *)(v7 + 23) & 0x80) != 0)
        {
          if (memcmp(*(const void **)v7, v15, *(_QWORD *)(v7 + 8)))
            goto LABEL_24;
        }
        else if ((v9 & 0x7F) != 0)
        {
          v16 = 0;
          while (*(unsigned __int8 *)(v7 + v16) == v15[v16])
          {
            if (v10 == ++v16)
              goto LABEL_22;
          }
          goto LABEL_24;
        }
LABEL_22:
        v7 += 24;
        v8 += 24;
        v5 = 1;
        if (v7 == v6)
          goto LABEL_25;
      }
    }
    v5 = 1;
  }
LABEL_25:
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, uint64_t *, std::string **))(*a1 + 120))(a1, "Printf", 0, v5, &v174, &v176))
  {
    sub_1C5711074(a1, (int64x2_t *)(a2 + 24));
    (*(void (**)(uint64_t *, std::string *))(*a1 + 128))(a1, v176);
  }
  else if ((std::string *)(a2 + 24) != &v177 && (_BYTE)v174)
  {
    sub_1C4D82E38(a2 + 24, (std::string *)v177.__r_.__value_.__l.__data_, (std::string *)v177.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 3));
  }
  v176 = &v177;
  sub_1C4765410((void ***)&v176);
  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 56)
    || (result = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1), (result & 1) == 0))
  {
    result = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    if (!(_DWORD)result || *(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 56))
    {
      v171 = 0;
      v170 = 0;
      result = (*(uint64_t (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "Kernels", 0, 0, &v170, &v171);
      if ((_DWORD)result)
      {
        LODWORD(v18) = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
          LODWORD(v18) = 954437177 * ((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
        if ((_DWORD)v18)
        {
          v19 = 0;
          v18 = v18;
          v168 = v18;
          v169 = (_QWORD *)a2;
          do
          {
            v172 = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v19, &v172))
            {
              v20 = *(void ***)(a2 + 48);
              v21 = *(void ***)(a2 + 56);
              v22 = 0x8E38E38E38E38E39 * (((char *)v21 - (char *)v20) >> 5);
              if (v22 <= v19)
              {
                v23 = v19 + 1;
                v24 = v19 + 1 - v22;
                v25 = v169[8];
                if (0x8E38E38E38E38E39 * ((v25 - (uint64_t)v21) >> 5) >= v24)
                {
                  v36 = &v21[36 * v24];
                  do
                  {
                    *((_OWORD *)v21 + 16) = 0uLL;
                    *((_OWORD *)v21 + 17) = 0uLL;
                    *((_OWORD *)v21 + 14) = 0uLL;
                    *((_OWORD *)v21 + 15) = 0uLL;
                    *((_OWORD *)v21 + 12) = 0uLL;
                    *((_OWORD *)v21 + 13) = 0uLL;
                    *((_OWORD *)v21 + 10) = 0uLL;
                    *((_OWORD *)v21 + 11) = 0uLL;
                    *((_OWORD *)v21 + 8) = 0uLL;
                    *((_OWORD *)v21 + 9) = 0uLL;
                    *((_OWORD *)v21 + 6) = 0uLL;
                    *((_OWORD *)v21 + 7) = 0uLL;
                    *((_OWORD *)v21 + 4) = 0uLL;
                    *((_OWORD *)v21 + 5) = 0uLL;
                    *((_OWORD *)v21 + 2) = 0uLL;
                    *((_OWORD *)v21 + 3) = 0uLL;
                    *(_OWORD *)v21 = 0uLL;
                    *((_OWORD *)v21 + 1) = 0uLL;
                    v37 = (_DWORD *)((char *)v21 + 282);
                    *((_WORD *)v21 + 143) = -1;
                    v21 += 36;
                    *v37 = -1;
                  }
                  while (v21 != v36);
                  v35 = v169;
                  v169[7] = v36;
                }
                else
                {
                  v26 = 0x8E38E38E38E38E39 * ((v25 - (uint64_t)v20) >> 5);
                  v27 = 2 * v26;
                  if (2 * v26 <= v23)
                    v27 = v19 + 1;
                  if (v26 >= 0x71C71C71C71C71)
                    v28 = 0xE38E38E38E38E3;
                  else
                    v28 = v27;
                  if (v28 > 0xE38E38E38E38E3)
LABEL_308:
                    sub_1C4764EE4();
                  v29 = (char *)operator new(288 * v28);
                  v30 = &v29[32 * (((char *)v21 - (char *)v20) >> 5)];
                  v31 = &v29[288 * v23];
                  v32 = v30;
                  do
                  {
                    *((_OWORD *)v32 + 16) = 0uLL;
                    *((_OWORD *)v32 + 17) = 0uLL;
                    *((_OWORD *)v32 + 14) = 0uLL;
                    *((_OWORD *)v32 + 15) = 0uLL;
                    *((_OWORD *)v32 + 12) = 0uLL;
                    *((_OWORD *)v32 + 13) = 0uLL;
                    *((_OWORD *)v32 + 10) = 0uLL;
                    *((_OWORD *)v32 + 11) = 0uLL;
                    *((_OWORD *)v32 + 8) = 0uLL;
                    *((_OWORD *)v32 + 9) = 0uLL;
                    *((_OWORD *)v32 + 6) = 0uLL;
                    *((_OWORD *)v32 + 7) = 0uLL;
                    *((_OWORD *)v32 + 4) = 0uLL;
                    *((_OWORD *)v32 + 5) = 0uLL;
                    *((_OWORD *)v32 + 2) = 0uLL;
                    *((_OWORD *)v32 + 3) = 0uLL;
                    *(_OWORD *)v32 = 0uLL;
                    *((_OWORD *)v32 + 1) = 0uLL;
                    v33 = v32 + 282;
                    *((_WORD *)v32 + 143) = -1;
                    v32 += 288;
                    *v33 = -1;
                  }
                  while (v32 != v31);
                  v34 = &v29[288 * v28];
                  if (v21 == v20)
                  {
                    v35 = v169;
                    v169[6] = v30;
                    v169[7] = v31;
                    v169[8] = v34;
                  }
                  else
                  {
                    v38 = 0;
                    do
                    {
                      v39 = &v30[v38 * 8];
                      v40 = &v21[v38];
                      v41 = (uint64_t)&v30[v38 * 8 - 288];
                      v42 = (uint64_t)&v21[v38 - 36];
                      v43 = *(_OWORD *)v42;
                      *(_QWORD *)(v41 + 16) = v21[v38 - 34];
                      *(_OWORD *)v41 = v43;
                      *(_QWORD *)(v42 + 8) = 0;
                      *(_QWORD *)(v42 + 16) = 0;
                      v44 = &v21[v38 - 33];
                      v45 = *(_OWORD *)v44;
                      v46 = v21[v38 - 31];
                      *(_QWORD *)v42 = 0;
                      *((_QWORD *)v39 - 31) = v46;
                      *(_OWORD *)&v30[v38 * 8 - 264] = v45;
                      *(v40 - 32) = 0;
                      *(v40 - 31) = 0;
                      *v44 = 0;
                      v47 = *(_OWORD *)&v21[v38 - 30];
                      *((_QWORD *)v39 - 28) = v21[v38 - 28];
                      *((_OWORD *)v39 - 15) = v47;
                      *(v40 - 29) = 0;
                      *(v40 - 28) = 0;
                      *(v40 - 30) = 0;
                      *(_OWORD *)(v39 - 216) = *(_OWORD *)&v21[v38 - 27];
                      *((_QWORD *)v39 - 25) = v21[v38 - 25];
                      *(v40 - 27) = 0;
                      *(v40 - 26) = 0;
                      *(v40 - 25) = 0;
                      *((_OWORD *)v39 - 12) = *(_OWORD *)&v21[v38 - 24];
                      *((_QWORD *)v39 - 22) = v21[v38 - 22];
                      *(v40 - 24) = 0;
                      *(v40 - 23) = 0;
                      *(v40 - 22) = 0;
                      *(_OWORD *)(v39 - 168) = *(_OWORD *)&v21[v38 - 21];
                      *((_QWORD *)v39 - 19) = v21[v38 - 19];
                      *(v40 - 21) = 0;
                      *(v40 - 20) = 0;
                      *(v40 - 19) = 0;
                      v48 = *(_OWORD *)&v21[v38 - 18];
                      *((_QWORD *)v39 - 16) = v21[v38 - 16];
                      *((_OWORD *)v39 - 9) = v48;
                      *(v40 - 17) = 0;
                      *(v40 - 16) = 0;
                      v49 = *(_OWORD *)&v21[v38 - 15];
                      v50 = v21[v38 - 13];
                      *(v40 - 18) = 0;
                      *((_QWORD *)v39 - 13) = v50;
                      *(_OWORD *)(v39 - 120) = v49;
                      *(v40 - 14) = 0;
                      *(v40 - 13) = 0;
                      v51 = *(_OWORD *)&v21[v38 - 12];
                      *(v40 - 15) = 0;
                      *((_OWORD *)v39 - 6) = v51;
                      *((_QWORD *)v39 - 10) = v21[v38 - 10];
                      *(v40 - 12) = 0;
                      *(v40 - 11) = 0;
                      *(v40 - 10) = 0;
                      v52 = *(_OWORD *)&v21[v38 - 9];
                      v53 = *(_OWORD *)&v21[v38 - 7];
                      *((_QWORD *)v39 - 5) = v21[v38 - 5];
                      *(_OWORD *)(v39 - 56) = v53;
                      *(_OWORD *)(v39 - 72) = v52;
                      *((_OWORD *)v39 - 2) = *(_OWORD *)&v21[v38 - 4];
                      *((_QWORD *)v39 - 2) = v21[v38 - 2];
                      *(v40 - 4) = 0;
                      *(v40 - 3) = 0;
                      *(v40 - 2) = 0;
                      *((_QWORD *)v39 - 1) = v21[v38 - 1];
                      v38 -= 36;
                    }
                    while (&v21[v38] != v20);
                    v35 = v169;
                    v21 = (void **)v169[6];
                    v54 = (void **)v169[7];
                    v169[6] = &v30[v38 * 8];
                    v169[7] = v31;
                    v169[8] = v34;
                    if (v54 != v21)
                    {
                      do
                      {
                        v55 = *(v54 - 4);
                        if (v55)
                        {
                          *(v54 - 3) = v55;
                          operator delete(v55);
                        }
                        v56 = (void **)*(v54 - 12);
                        if (v56)
                        {
                          v57 = (void **)*(v54 - 11);
                          v58 = *(v54 - 12);
                          if (v57 != v56)
                          {
                            do
                            {
                              if (*((char *)v57 - 33) < 0)
                                operator delete(*(v57 - 7));
                              if (*((char *)v57 - 57) < 0)
                                operator delete(*(v57 - 10));
                              v57 -= 10;
                            }
                            while (v57 != v56);
                            v58 = *(v54 - 12);
                          }
                          *(v54 - 11) = v56;
                          operator delete(v58);
                        }
                        if (*((char *)v54 - 97) < 0)
                          operator delete(*(v54 - 15));
                        if (*((char *)v54 - 121) < 0)
                          operator delete(*(v54 - 18));
                        v59 = *(v54 - 21);
                        if (v59)
                        {
                          *(v54 - 20) = v59;
                          operator delete(v59);
                        }
                        v60 = *(v54 - 24);
                        if (v60)
                        {
                          *(v54 - 23) = v60;
                          operator delete(v60);
                        }
                        v61 = *(v54 - 27);
                        if (v61)
                        {
                          *(v54 - 26) = v61;
                          operator delete(v61);
                        }
                        if (*((char *)v54 - 217) < 0)
                          operator delete(*(v54 - 30));
                        if (*((char *)v54 - 241) < 0)
                          operator delete(*(v54 - 33));
                        v62 = v54 - 36;
                        if (*((char *)v54 - 265) < 0)
                          operator delete(*v62);
                        v54 -= 36;
                      }
                      while (v62 != v21);
                    }
                  }
                  if (v21)
                    operator delete(v21);
                }
                v20 = (void **)v35[6];
              }
              v63 = (uint64_t)&v20[36 * v19];
              (*(void (**)(uint64_t *))(*a1 + 104))(a1);
              sub_1C629AE0C(a1, (uint64_t)"Name", v63, 1);
              sub_1C629AE0C(a1, (uint64_t)"SymbolName", v63 + 24, 1);
              memset(&v177, 0, sizeof(v177));
              sub_1C5DB4C50(a1, (uint64_t)"Language", v63 + 48, &v177);
              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v177.__r_.__value_.__l.__data_);
              memset(&v177, 0, sizeof(v177));
              sub_1C5DB4DAC(a1, (uint64_t)"LanguageVersion", (uint64_t)&v20[36 * v19 + 9], (uint64_t)&v177);
              if (v177.__r_.__value_.__r.__words[0])
              {
                v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                operator delete(v177.__r_.__value_.__l.__data_);
              }
              v64 = &v20[36 * v19];
              v65 = v64[12];
              v66 = v64[13];
              v67 = (uint64_t)(v64 + 12);
              if (v65 != v66 || v20[36 * v19 + 15] != v20[36 * v19 + 16])
                goto LABEL_104;
              v68 = *(_BYTE *)(v63 + 167);
              v69 = v68;
              v70 = (void *)(v68 & 0x7F);
              if (v69 < 0)
                v70 = v20[36 * v19 + 19];
              if (v70)
                goto LABEL_104;
              v71 = *(_BYTE *)(v63 + 191);
              v72 = v71;
              v73 = (void *)(v71 & 0x7F);
              if (v72 < 0)
                v73 = v20[36 * v19 + 22];
              if (v73 || ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
              {
LABEL_104:
                v176 = 0;
                v175 = 0;
                if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, std::string **))(*a1 + 120))(a1, "Attrs", 0, 0, &v175, &v176))
                {
                  (*(void (**)(uint64_t *))(*a1 + 104))(a1);
                  memset(&v177, 0, sizeof(v177));
                  sub_1C5DB4DAC(a1, (uint64_t)"ReqdWorkGroupSize", v67, (uint64_t)&v177);
                  if (v177.__r_.__value_.__r.__words[0])
                  {
                    v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  memset(&v177, 0, sizeof(v177));
                  sub_1C5DB4DAC(a1, (uint64_t)"WorkGroupSizeHint", (uint64_t)&v20[36 * v19 + 15], (uint64_t)&v177);
                  if (v177.__r_.__value_.__r.__words[0])
                  {
                    v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  memset(&v177, 0, sizeof(v177));
                  sub_1C5DB4C50(a1, (uint64_t)"VecTypeHint", (uint64_t)&v20[36 * v19 + 18], &v177);
                  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v177.__r_.__value_.__l.__data_);
                  memset(&v177, 0, sizeof(v177));
                  sub_1C5DB4C50(a1, (uint64_t)"RuntimeHandle", (uint64_t)&v20[36 * v19 + 21], &v177);
                  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v177.__r_.__value_.__l.__data_);
                  (*(void (**)(uint64_t *))(*a1 + 112))(a1);
                  (*(void (**)(uint64_t *, std::string *))(*a1 + 128))(a1, v176);
                }
              }
              v74 = &v20[36 * v19];
              v76 = v74[24];
              v75 = v74 + 24;
              v77 = v75 + 1;
              if ((v76 != v75[1] || ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
                && (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || *v75 != *v77))
              {
                v174 = 0;
                v173 = 0;
                if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "Args", 0, 0, &v173, &v174))
                {
                  LODWORD(v78) = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
                  v167 = v75 + 1;
                  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
                    LODWORD(v78) = -858993459 * ((unint64_t)((_BYTE *)*v77 - (_BYTE *)*v75) >> 4);
                  if ((_DWORD)v78)
                  {
                    v79 = 0;
                    v78 = v78;
                    v164 = (char **)&v20[36 * v19 + 26];
                    v165 = v78;
                    v166 = v75;
                    do
                    {
                      v176 = 0;
                      if ((*(unsigned int (**)(uint64_t *, unint64_t, std::string **))(*a1 + 32))(a1, v79, &v176))
                      {
                        v80 = (void **)*v167;
                        v81 = (void **)*v75;
                        v82 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)*v167 - (_BYTE *)v81) >> 4);
                        if (v82 <= v79)
                        {
                          v83 = v79 + 1 - v82;
                          if (0xCCCCCCCCCCCCCCCDLL * ((*v164 - (char *)v80) >> 4) >= v83)
                          {
                            v95 = (char *)&v80[10 * v83];
                            do
                            {
                              *((_OWORD *)v80 + 3) = 0uLL;
                              *((_OWORD *)v80 + 4) = 0uLL;
                              *((_OWORD *)v80 + 1) = 0uLL;
                              *((_OWORD *)v80 + 2) = 0uLL;
                              *(_OWORD *)v80 = 0uLL;
                              *((_BYTE *)v80 + 60) = -1;
                              *((_WORD *)v80 + 34) = -1;
                              *((_BYTE *)v80 + 70) = -1;
                              v80 += 10;
                            }
                            while (v80 != (void **)v95);
                            v90 = v166;
                            *v167 = v95;
                          }
                          else
                          {
                            v84 = 0x999999999999999ALL * ((*v164 - (char *)v81) >> 4);
                            if (v84 <= v79 + 1)
                              v84 = v79 + 1;
                            if (0xCCCCCCCCCCCCCCCDLL * ((*v164 - (char *)v81) >> 4) >= 0x199999999999999)
                              v84 = 0x333333333333333;
                            if (v84 > 0x333333333333333)
                              goto LABEL_308;
                            v163 = v84;
                            v85 = (char *)operator new(80 * v84);
                            v86 = &v85[80 * v82];
                            v87 = &v85[80 * v79 + 80];
                            v88 = v86;
                            do
                            {
                              *((_OWORD *)v88 + 3) = 0uLL;
                              *((_OWORD *)v88 + 4) = 0uLL;
                              *((_OWORD *)v88 + 1) = 0uLL;
                              *((_OWORD *)v88 + 2) = 0uLL;
                              *(_OWORD *)v88 = 0uLL;
                              v88[60] = -1;
                              *((_WORD *)v88 + 34) = -1;
                              v88[70] = -1;
                              v88 += 80;
                            }
                            while (v88 != v87);
                            v89 = &v85[80 * v163];
                            if (v80 == v81)
                            {
                              v90 = v166;
                              *v166 = v86;
                              *v167 = v87;
                              *v164 = v89;
                            }
                            else
                            {
                              do
                              {
                                v91 = *((_OWORD *)v80 - 5);
                                *((_QWORD *)v86 - 8) = *(v80 - 8);
                                *((_OWORD *)v86 - 5) = v91;
                                *(v80 - 9) = 0;
                                *(v80 - 8) = 0;
                                *(v80 - 10) = 0;
                                v92 = *(_OWORD *)(v80 - 7);
                                *((_QWORD *)v86 - 5) = *(v80 - 5);
                                *(_OWORD *)(v86 - 56) = v92;
                                *(v80 - 6) = 0;
                                *(v80 - 5) = 0;
                                *(v80 - 7) = 0;
                                v93 = *((_OWORD *)v80 - 2);
                                *(_OWORD *)(v86 - 21) = *(_OWORD *)((char *)v80 - 21);
                                *((_OWORD *)v86 - 2) = v93;
                                v86 -= 80;
                                v80 -= 10;
                              }
                              while (v80 != v81);
                              v90 = v166;
                              v80 = (void **)*v166;
                              v94 = (void **)*v167;
                              *v166 = v86;
                              *v167 = v87;
                              *v164 = v89;
                              while (v94 != v80)
                              {
                                if (*((char *)v94 - 33) < 0)
                                  operator delete(*(v94 - 7));
                                if (*((char *)v94 - 57) < 0)
                                  operator delete(*(v94 - 10));
                                v94 -= 10;
                              }
                            }
                            if (v80)
                              operator delete(v80);
                          }
                          v81 = (void **)*v90;
                        }
                        (*(void (**)(uint64_t *))(*a1 + 104))(a1);
                        memset(&v177, 0, sizeof(v177));
                        sub_1C5DB4C50(a1, (uint64_t)"Name", (uint64_t)&v81[10 * v79], &v177);
                        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v177.__r_.__value_.__l.__data_);
                        memset(&v177, 0, sizeof(v177));
                        sub_1C5DB4C50(a1, (uint64_t)"TypeName", (uint64_t)&v81[10 * v79 + 3], &v177);
                        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v177.__r_.__value_.__l.__data_);
                        v96 = &v81[10 * v79];
                        sub_1C6133C1C(a1, (uint64_t)"Size", (_DWORD *)v96 + 12, 1);
                        sub_1C6133C1C(a1, (uint64_t)"Align", (_DWORD *)v96 + 14, 1);
                        v177.__r_.__value_.__r.__words[0] = 0;
                        v175 = 0;
                        if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t, _QWORD, char *, std::string *))(*a1 + 120))(a1, "ValueKind", 1, 0, &v175, &v177))
                        {
                          (*(void (**)(uint64_t *))(*a1 + 160))(a1);
                          v97 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          v99 = *((unsigned __int8 *)v96 + 60);
                          v98 = (char *)v96 + 60;
                          if (v99)
                            v100 = 0;
                          else
                            v100 = v97;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "ByValue", v100))
                          {
                            *v98 = 0;
                          }
                          v101 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 1)
                            v102 = v101;
                          else
                            v102 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "GlobalBuffer", v102))
                          {
                            *v98 = 1;
                          }
                          v103 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 2)
                            v104 = v103;
                          else
                            v104 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "DynamicSharedPointer", v104))
                          {
                            *v98 = 2;
                          }
                          v105 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 3)
                            v106 = v105;
                          else
                            v106 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Sampler", v106))
                          {
                            *v98 = 3;
                          }
                          v107 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 4)
                            v108 = v107;
                          else
                            v108 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Image", v108))
                          {
                            *v98 = 4;
                          }
                          v109 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 5)
                            v110 = v109;
                          else
                            v110 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Pipe", v110))
                          {
                            *v98 = 5;
                          }
                          v111 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 6)
                            v112 = v111;
                          else
                            v112 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Queue", v112))
                          {
                            *v98 = 6;
                          }
                          v113 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 7)
                            v114 = v113;
                          else
                            v114 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenGlobalOffsetX", v114))
                          {
                            *v98 = 7;
                          }
                          v115 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 8)
                            v116 = v115;
                          else
                            v116 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenGlobalOffsetY", v116))
                          {
                            *v98 = 8;
                          }
                          v117 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 9)
                            v118 = v117;
                          else
                            v118 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenGlobalOffsetZ", v118))
                          {
                            *v98 = 9;
                          }
                          v119 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 10)
                            v120 = v119;
                          else
                            v120 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenNone", v120))
                          {
                            *v98 = 10;
                          }
                          v121 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 11)
                            v122 = v121;
                          else
                            v122 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenPrintfBuffer", v122))
                          {
                            *v98 = 11;
                          }
                          v123 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 15)
                            v124 = v123;
                          else
                            v124 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenHostcallBuffer", v124))
                          {
                            *v98 = 15;
                          }
                          v125 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 12)
                            v126 = v125;
                          else
                            v126 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenDefaultQueue", v126))
                          {
                            *v98 = 12;
                          }
                          v127 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 13)
                            v128 = v127;
                          else
                            v128 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenCompletionAction", v128))
                          {
                            *v98 = 13;
                          }
                          v129 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v98 == 14)
                            v130 = v129;
                          else
                            v130 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "HiddenMultiGridSyncArg", v130))
                          {
                            *v98 = 14;
                          }
                          (*(void (**)(uint64_t *))(*a1 + 184))(a1);
                          (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
                        }
                        v175 = 1;
                        v131 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                        if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
                        {
                          v177.__r_.__value_.__r.__words[0] = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, std::string *))(*a1 + 120))(a1, "ValueType", 0, v131, &v175, &v177))
                          {
                            if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) != 0)
                              goto LABEL_241;
                            v132 = a1[37];
                            if (!v132)
                              goto LABEL_241;
                            v152 = *(_QWORD *)(v132 + 8);
                            if (!v152 || *(_DWORD *)(v152 + 32) != 1)
                              goto LABEL_241;
                            v153 = *(int **)(v152 + 72);
                            v154 = *(_QWORD *)(v152 + 80);
                            v155 = v154;
                            do
                            {
                              v156 = v155;
                              if (!v155)
                                break;
                              --v155;
                            }
                            while (*((_BYTE *)v153 + v156 - 1) == 32);
                            if (v156 < v154)
                              v154 = v156;
                            if (v154 != 6
                              || ((v157 = *v153, v158 = *((unsigned __int16 *)v153 + 2), v157 == 1852796476)
                                ? (v159 = v158 == 15973)
                                : (v159 = 0),
                                  !v159))
                            {
LABEL_241:
                              (*(void (**)(uint64_t *))(*a1 + 160))(a1);
                              v133 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Struct", v133);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "I8", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "U8", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "I16", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "U16", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "F16", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "I32", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "U32", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "F32", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "I64", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "U64", 0);
                              (*(void (**)(uint64_t *))(*a1 + 16))(a1);
                              (*(void (**)(uint64_t *, const char *, _QWORD))(*a1 + 168))(a1, "F64", 0);
                              (*(void (**)(uint64_t *))(*a1 + 184))(a1);
                            }
                            (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
                          }
                        }
                        v134 = &v81[10 * v79];
                        LODWORD(v177.__r_.__value_.__l.__data_) = 0;
                        sub_1C6206640(a1, (uint64_t)"PointeeAlign", (_DWORD *)v134 + 16, &v177, 0);
                        v177.__r_.__value_.__r.__words[0] = 0;
                        v175 = 0;
                        v135 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                        v137 = *((unsigned __int8 *)v134 + 68);
                        v136 = (char *)v134 + 68;
                        if (v137 == 255)
                          v138 = v135;
                        else
                          v138 = 0;
                        if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, std::string *))(*a1 + 120))(a1, "AddrSpaceQual", 0, v138, &v175, &v177))
                        {
                          (*(void (**)(uint64_t *))(*a1 + 160))(a1);
                          v139 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v136)
                            v140 = 0;
                          else
                            v140 = v139;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Private", v140))
                          {
                            *v136 = 0;
                          }
                          v141 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v136 == 1)
                            v142 = v141;
                          else
                            v142 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Global", v142))
                          {
                            *v136 = 1;
                          }
                          v143 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v136 == 2)
                            v144 = v143;
                          else
                            v144 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Constant", v144))
                          {
                            *v136 = 2;
                          }
                          v145 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v136 == 3)
                            v146 = v145;
                          else
                            v146 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Local", v146))
                          {
                            *v136 = 3;
                          }
                          v147 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v136 == 4)
                            v148 = v147;
                          else
                            v148 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Generic", v148))
                          {
                            *v136 = 4;
                          }
                          v149 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
                          if (*v136 == 5)
                            v150 = v149;
                          else
                            v150 = 0;
                          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t))(*a1 + 168))(a1, "Region", v150))
                          {
                            *v136 = 5;
                          }
                          (*(void (**)(uint64_t *))(*a1 + 184))(a1);
                          (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
                        }
                        else if (v175)
                        {
                          *v136 = -1;
                        }
                        v151 = &v81[10 * v79];
                        v177.__r_.__value_.__s.__data_[0] = -1;
                        sub_1C5DB4EA4((uint64_t)a1, (uint64_t)"AccQual", (_BYTE *)v151 + 69, &v177);
                        v177.__r_.__value_.__s.__data_[0] = -1;
                        sub_1C5DB4EA4((uint64_t)a1, (uint64_t)"ActualAccQual", (_BYTE *)v151 + 70, &v177);
                        v175 = 0;
                        sub_1C6205D50((uint64_t)a1, (uint64_t)"IsConst", (_BYTE *)v151 + 71, &v175, 0);
                        v175 = 0;
                        sub_1C6205D50((uint64_t)a1, (uint64_t)"IsRestrict", (_BYTE *)v151 + 72, &v175, 0);
                        v175 = 0;
                        sub_1C6205D50((uint64_t)a1, (uint64_t)"IsVolatile", (_BYTE *)v151 + 73, &v175, 0);
                        v175 = 0;
                        sub_1C6205D50((uint64_t)a1, (uint64_t)"IsPipe", (_BYTE *)v151 + 74, &v175, 0);
                        (*(void (**)(uint64_t *))(*a1 + 112))(a1);
                        (*(void (**)(uint64_t *, std::string *))(*a1 + 40))(a1, v176);
                        v78 = v165;
                        v75 = v166;
                      }
                      ++v79;
                    }
                    while (v79 != v78);
                  }
                  (*(void (**)(uint64_t *))(*a1 + 48))(a1);
                  (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v174);
                }
              }
              v177.__r_.__value_.__r.__words[0] = 0;
              v175 = 0;
              if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, std::string *))(*a1 + 120))(a1, "CodeProps", 0, 0, &v175, &v177))
              {
                v162 = (unint64_t *)&v20[36 * v19];
                (*(void (**)(uint64_t *))(*a1 + 104))(a1);
                sub_1C6206E70((uint64_t)a1, (uint64_t)"KernargSegmentSize", v162 + 27, 1);
                sub_1C6133C1C(a1, (uint64_t)"GroupSegmentFixedSize", (_DWORD *)v162 + 56, 1);
                sub_1C6133C1C(a1, (uint64_t)"PrivateSegmentFixedSize", (_DWORD *)v162 + 57, 1);
                sub_1C6133C1C(a1, (uint64_t)"KernargSegmentAlign", (_DWORD *)v162 + 58, 1);
                sub_1C6133C1C(a1, (uint64_t)"WavefrontSize", (_DWORD *)v162 + 59, 1);
                LOWORD(v176) = 0;
                sub_1C5DB5068(a1, (uint64_t)"NumSGPRs", (_WORD *)v162 + 120, &v176);
                LOWORD(v176) = 0;
                sub_1C5DB5068(a1, (uint64_t)"NumVGPRs", (_WORD *)v162 + 121, &v176);
                LODWORD(v176) = 0;
                sub_1C6206640(a1, (uint64_t)"MaxFlatWorkGroupSize", (_DWORD *)v162 + 61, &v176, 0);
                LOBYTE(v174) = 0;
                sub_1C6205D50((uint64_t)a1, (uint64_t)"IsDynamicCallStack", (_BYTE *)v162 + 248, &v174, 0);
                LOBYTE(v174) = 0;
                sub_1C6205D50((uint64_t)a1, (uint64_t)"IsXNACKEnabled", (_BYTE *)v162 + 249, &v174, 0);
                LOWORD(v176) = 0;
                sub_1C5DB5068(a1, (uint64_t)"NumSpilledSGPRs", (_WORD *)v162 + 125, &v176);
                LOWORD(v176) = 0;
                sub_1C5DB5068(a1, (uint64_t)"NumSpilledVGPRs", (_WORD *)v162 + 126, &v176);
                (*(void (**)(uint64_t *))(*a1 + 112))(a1);
                (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
              }
              v160 = &v20[36 * v19];
              if (v160[32] != v160[33] || ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
              {
                v176 = 0;
                v175 = 0;
                if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, std::string **))(*a1 + 120))(a1, "DebugProps", 0, 0, &v175, &v176))
                {
                  (*(void (**)(uint64_t *))(*a1 + 104))(a1);
                  memset(&v177, 0, sizeof(v177));
                  sub_1C5DB4DAC(a1, (uint64_t)"DebuggerABIVersion", (uint64_t)(v160 + 32), (uint64_t)&v177);
                  if (v177.__r_.__value_.__r.__words[0])
                  {
                    v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  v161 = &v20[36 * v19];
                  LOWORD(v177.__r_.__value_.__l.__data_) = 0;
                  sub_1C5DB5068(a1, (uint64_t)"ReservedNumVGPRs", (_WORD *)v161 + 140, &v177);
                  LOWORD(v177.__r_.__value_.__l.__data_) = -1;
                  sub_1C5DB5068(a1, (uint64_t)"ReservedFirstVGPR", (_WORD *)v161 + 141, &v177);
                  LOWORD(v177.__r_.__value_.__l.__data_) = -1;
                  sub_1C5DB5068(a1, (uint64_t)"PrivateSegmentBufferSGPR", (_WORD *)v161 + 142, &v177);
                  LOWORD(v177.__r_.__value_.__l.__data_) = -1;
                  sub_1C5DB5068(a1, (uint64_t)"WavefrontPrivateSegmentOffsetSGPR", (_WORD *)v161 + 143, &v177);
                  (*(void (**)(uint64_t *))(*a1 + 112))(a1);
                  (*(void (**)(uint64_t *, std::string *))(*a1 + 128))(a1, v176);
                }
              }
              (*(void (**)(uint64_t *))(*a1 + 112))(a1);
              (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v172);
              v18 = v168;
              a2 = (uint64_t)v169;
            }
            ++v19;
          }
          while (v19 != v18);
        }
        (*(void (**)(uint64_t *))(*a1 + 48))(a1);
        return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v171);
      }
    }
  }
  return result;
}

uint64_t sub_1C5DB4B4C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t i;
  char *v7;
  unint64_t v8;
  uint64_t v10;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    v5 = ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 72))(a1, i, &v10))
      {
        v7 = *(char **)a2;
        v8 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
        if (v8 <= i)
        {
          sub_1C4D63CD0((char **)a2, i - v8 + 1);
          v7 = *(char **)a2;
        }
        sub_1C4832A78(a1, &v7[4 * i]);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, v10);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
}

std::string *sub_1C5DB4C50(uint64_t *a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  int v8;
  _BOOL8 v9;
  char v10;
  uint64_t v11;
  signed __int8 v12;
  int v13;
  std::string::size_type size;
  const std::string *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  std::string *result;
  char v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0;
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  v9 = 0;
  if (v8)
  {
    v10 = *(_BYTE *)(a3 + 23);
    if (v10 >= 0)
      v11 = v10 & 0x7F;
    else
      v11 = *(_QWORD *)(a3 + 8);
    v12 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    v13 = v12;
    size = v12 & 0x7F;
    if (v13 < 0)
      size = a4->__r_.__value_.__l.__size_;
    if (v11 == size)
    {
      if (v13 >= 0)
        v15 = a4;
      else
        v15 = (const std::string *)a4->__r_.__value_.__r.__words[0];
      if ((*(_BYTE *)(a3 + 23) & 0x80) != 0)
      {
        v9 = memcmp(*(const void **)a3, v15, *(_QWORD *)(a3 + 8)) == 0;
      }
      else if ((v10 & 0x7F) != 0)
      {
        v16 = (v10 & 0x7F) - 1;
        v17 = (unsigned __int8 *)a3;
        do
        {
          v19 = *v17++;
          v18 = v19;
          v21 = v15->__r_.__value_.__s.__data_[0];
          v15 = (const std::string *)((char *)v15 + 1);
          v20 = v21;
          v23 = v16-- != 0;
          v9 = v18 == v20;
        }
        while (v18 == v20 && v23);
      }
      else
      {
        v9 = 1;
      }
    }
    else
    {
      v9 = 0;
    }
  }
  result = (std::string *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _BOOL8, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, v9, &v25, &v26);
  if ((_DWORD)result)
  {
    sub_1C5710824(a1, a3);
    return (std::string *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v26);
  }
  else if (v25)
  {
    return std::string::operator=((std::string *)a3, a4);
  }
  return result;
}

_QWORD *sub_1C5DB4DAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  _BOOL8 v9;
  _QWORD *result;
  char v11;
  uint64_t v12;

  v9 = (*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1)
    && (v8 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3, v8 == *(_QWORD *)(a4 + 8) - *(_QWORD *)a4)
    && memcmp(*(const void **)a3, *(const void **)a4, v8) == 0;
  v12 = 0;
  v11 = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _BOOL8, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, v9, &v11, &v12);
  if ((_DWORD)result)
  {
    sub_1C5DB4B4C(a1, a3);
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v12);
  }
  else if (a3 != a4)
  {
    if (v11)
      return sub_1C4FCE520((_QWORD *)a3, *(char **)a4, *(char **)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  }
  return result;
}

uint64_t sub_1C5DB4EA4(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = 0;
  v19 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a3 == *a4)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v19, &v20);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a3)
      v12 = 0;
    else
      v12 = v11;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Default", v12))
      *a3 = 0;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a3 == 1)
      v14 = v13;
    else
      v14 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "ReadOnly", v14))
      *a3 = 1;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a3 == 2)
      v16 = v15;
    else
      v16 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "WriteOnly", v16))
      *a3 = 2;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a3 == 3)
      v18 = v17;
    else
      v18 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "ReadWrite", v18))
      *a3 = 3;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
  }
  else if (v19)
  {
    *a3 = *a4;
  }
  return result;
}

uint64_t sub_1C5DB5068(uint64_t *a1, uint64_t a2, _WORD *a3, _WORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0;
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if (*a3 == *a4)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, v9, &v11, &v12);
  if ((_DWORD)result)
  {
    sub_1C51F0450(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v12);
  }
  else if (v11)
  {
    *a3 = *a4;
  }
  return result;
}

uint64_t llvm::APFixedPoint::convert@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  size_t v23;
  uint64_t v24;
  int64_t v25;
  int v26;
  unint64_t v28;
  int v29;
  unsigned int v30;
  void **p_src;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  int v36;
  uint64_t v37;
  void **v38;
  void **v39;
  unsigned int v40;
  void *v41;
  uint64_t result;
  size_t v43;
  void **v44;
  void *v45;
  unsigned int v46;
  void *__s2;
  unsigned int v48;
  void *__src;
  unsigned int v50;
  unsigned __int8 v51;
  void *v52;
  unsigned int v53;
  void *v54;
  unsigned int v55;
  unsigned __int8 v56;

  v8 = *(unsigned int *)(a1 + 8);
  v50 = v8;
  if (v8 > 0x40)
  {
    v9 = (void *)operator new[]();
    memcpy(v9, *(const void **)a1, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v9 = *(void **)a1;
  }
  __src = v9;
  v51 = *(_BYTE *)(a1 + 12);
  v10 = *a2;
  v11 = HIWORD(*a2) & 0x1FFF;
  v12 = *(_WORD *)(a1 + 18) & 0x1FFF;
  if (a3)
    *a3 = 0;
  if (v11 <= v12)
  {
    sub_1C637D1AC((uint64_t)&__src, (*(_WORD *)(a1 + 18) & 0x1FFF) - v11);
  }
  else
  {
    sub_1C4FCFB60((llvm::APInt *)&__src, v8 + v11 - (*(_WORD *)(a1 + 18) & 0x1FFF), (uint64_t)&v54);
    if (v50 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    __src = v54;
    v50 = v55;
    v51 = v56;
    sub_1C4888094((uint64_t)&__src, v11 - (*(_WORD *)(a1 + 18) & 0x1FFF));
  }
  v13 = v50;
  v14 = HIWORD(*a2) & 0x1FFF;
  if ((*a2 & 0xA0000000) != 0)
    v15 = ~v14;
  else
    v15 = -v14;
  if (v50 >= v11 + (unsigned __int16)*a2 + v15)
    v16 = v11 + (unsigned __int16)*a2 + v15;
  else
    v16 = v50;
  v48 = v50;
  if (v50 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__s2, 0, 0);
    v13 = v48;
  }
  else
  {
    __s2 = 0;
  }
  sub_1C4912E54(&__s2, v16, v13);
  v17 = v50;
  if (v50 < 0x41)
  {
    v18 = __src;
    v19 = (unint64_t)__s2;
    v20 = (unint64_t)__s2 & (unint64_t)__src;
    v21 = (unint64_t)__s2 & (unint64_t)__src;
    v22 = __s2;
    if ((void *)((unint64_t)__s2 & (unint64_t)__src) == __s2)
      goto LABEL_51;
    goto LABEL_33;
  }
  v23 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
  v22 = (_QWORD *)operator new[]();
  v18 = __src;
  memcpy(v22, __src, v23);
  v24 = 0;
  v19 = (unint64_t)__s2;
  v25 = (unint64_t)(v17 + 63) >> 6;
  do
  {
    v22[v24] &= *(_QWORD *)(v19 + v24 * 8);
    ++v24;
  }
  while (v25 != v24);
  if (!memcmp(v22, (const void *)v19, v23))
    goto LABEL_51;
  v26 = 0;
  do
  {
    if (v25-- < 1)
      break;
    v28 = v22[v25];
    v26 += __clz(v28);
  }
  while (!v28);
  v29 = v17 | 0xFFFFFFC0;
  if ((v17 & 0x3F) == 0)
    v29 = 0;
  if ((v17 - v26 - v29) <= 0x40)
  {
    v21 = *v22;
    v20 = (unint64_t)v22;
LABEL_33:
    v22 = (_QWORD *)v20;
    if (!v21)
      goto LABEL_51;
  }
  if ((*((_BYTE *)a2 + 3) & 0x40) != 0)
  {
    if (v51)
      goto LABEL_41;
    v30 = v50 - 1;
    p_src = &__src;
    if (v50 >= 0x41)
      p_src = (void **)&v18[v30 >> 6];
    if ((((unint64_t)*p_src >> v30) & 1) != 0)
    {
      v32 = v48;
      if (v48 >= 0x41)
      {
        v43 = (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8;
        v18 = (_QWORD *)operator new[]();
        memcpy(v18, __s2, v43);
      }
      else
      {
        v18 = (_QWORD *)v19;
      }
    }
    else
    {
LABEL_41:
      v32 = v48;
      v46 = v48;
      if (v48 > 0x40)
      {
        v35 = (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8;
        v45 = (void *)operator new[]();
        memcpy(v45, __s2, v35);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v45);
        v32 = v46;
        v18 = v45;
      }
      else
      {
        v33 = ~v19;
        if (v48)
          v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
        else
          v34 = 0;
        v18 = (_QWORD *)(v34 & v33);
        v45 = (void *)(v34 & v33);
      }
      v46 = 0;
    }
    if (v50 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    __src = v18;
    v50 = v32;
  }
  else if (a3)
  {
    *a3 = 1;
  }
LABEL_51:
  v36 = v51;
  v37 = v50;
  if (!(*a2 & 0x20000000 | v51))
  {
    v38 = (void **)&v18[(v50 - 1) >> 6];
    if (v50 < 0x41)
      v38 = &__src;
    if ((((unint64_t)*v38 >> (v50 - 1)) & 1) == 0)
      goto LABEL_60;
    if ((*a2 & 0x40000000) == 0)
    {
      if (a3)
        *a3 = 1;
      goto LABEL_60;
    }
    if (v50 <= 0x40)
    {
      v18 = 0;
      __src = 0;
LABEL_60:
      if (v37 < (unsigned __int16)v10)
      {
        v39 = &v52;
        llvm::APInt::sext((llvm::APInt *)&__src, (unsigned __int16)v10, (llvm::APInt *)&v52);
        goto LABEL_75;
      }
      if (v37 <= (unsigned __int16)v10)
      {
        v53 = v37;
        if (v37 > 0x40)
        {
          v52 = (void *)operator new[]();
          memcpy(v52, __src, (((unint64_t)v53 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v52 = v18;
        }
        v39 = &v52;
        goto LABEL_75;
      }
      v39 = &v52;
      v44 = &v52;
LABEL_94:
      llvm::APInt::trunc((llvm::APInt *)&__src, (unsigned __int16)v10, (llvm::APInt *)v44);
      goto LABEL_75;
    }
    *v18 = 0;
    v18 = __src;
    bzero((char *)__src + 8, (((unint64_t)(v37 + 63) >> 3) - 8) & 0xFFFFFFF8);
    v36 = v51;
    LODWORD(v37) = v50;
  }
  if (!v36)
    goto LABEL_60;
  if (v37 < (unsigned __int16)v10)
  {
    v39 = &v54;
    llvm::APInt::zext((llvm::APInt *)&__src, (unsigned __int16)v10, (uint64_t)&v54);
    goto LABEL_75;
  }
  if (v37 > (unsigned __int16)v10)
  {
    v39 = &v54;
    v44 = &v54;
    goto LABEL_94;
  }
  v55 = v37;
  if (v37 > 0x40)
  {
    v54 = (void *)operator new[]();
    memcpy(v54, __src, (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v54 = v18;
  }
  v39 = &v54;
LABEL_75:
  v40 = *((_DWORD *)v39 + 2);
  v41 = *v39;
  if (v50 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = v41;
  v50 = v40;
  v51 = (*a2 & 0x20000000) == 0;
  result = sub_1C637F790(a4, (uint64_t)&__src, a2);
  if (v17 >= 0x41 && v22)
    result = MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  if (v48 >= 0x41)
  {
    result = (uint64_t)__s2;
    if (__s2)
      result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  if (v50 >= 0x41)
  {
    result = (uint64_t)__src;
    if (__src)
      return MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C5DB578C(uint64_t a1, llvm::APInt *this, unsigned int a3)
{
  unsigned int v5;
  _BYTE *v6;
  char v7;
  uint64_t v8;
  _BYTE *v9;
  llvm::APInt *v10;
  _BYTE v11[16];
  _BYTE v12[16];

  v5 = *((_DWORD *)this + 2);
  if (!*((_BYTE *)this + 12))
  {
    v6 = v11;
    if (v5 < a3)
    {
      llvm::APInt::sext(this, a3, (llvm::APInt *)v11);
      goto LABEL_4;
    }
    if (v5 <= a3)
    {
      v9 = v11;
      goto LABEL_7;
    }
    v10 = (llvm::APInt *)v11;
LABEL_9:
    llvm::APInt::trunc(this, a3, v10);
    goto LABEL_4;
  }
  v6 = v12;
  if (v5 >= a3)
  {
    if (v5 <= a3)
    {
      v9 = v12;
LABEL_7:
      sub_1C5DD14E0((uint64_t)v9, (uint64_t)this);
      goto LABEL_4;
    }
    v10 = (llvm::APInt *)v12;
    goto LABEL_9;
  }
  llvm::APInt::zext(this, a3, (uint64_t)v12);
LABEL_4:
  v7 = *((_BYTE *)this + 12);
  v8 = *(_QWORD *)v6;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v6 + 2);
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 12) = v7;
}

uint64_t llvm::APFixedPoint::compare(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  char v15;
  void *v16;
  unsigned int v17;
  unsigned __int8 v18;
  void *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **p_src;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  void **v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  void *v49;
  unsigned int v50;
  void *v51;
  unsigned int v52;
  unsigned __int8 v53;
  void *__src;
  unsigned int v55;
  char v56;
  void *v57;
  unsigned int v58;

  sub_1C637D224(&__src, a1);
  sub_1C637D224(&v51, a2);
  v4 = *(unsigned __int8 *)(a1 + 12);
  v5 = v53;
  v6 = *(_WORD *)(a2 + 18) & 0x1FFF;
  v7 = v52;
  if (*(_DWORD *)(a1 + 8) > v52)
    v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_WORD *)(a1 + 18) & 0x1FFF;
  v9 = v6 - v8;
  v10 = v8 >= v6;
  v11 = v8 - v6;
  if (!v10)
    v11 = v9;
  v12 = v11 + v7;
  if (v56)
  {
    if (v55 < v12)
    {
      llvm::APInt::zext((llvm::APInt *)&__src, v12, (uint64_t)&v57);
      goto LABEL_14;
    }
  }
  else if (v55 < v12)
  {
    llvm::APInt::sext((llvm::APInt *)&__src, v12, (llvm::APInt *)&v57);
    goto LABEL_14;
  }
  if (v55 > v12)
  {
    llvm::APInt::trunc((llvm::APInt *)&__src, v12, (llvm::APInt *)&v57);
  }
  else
  {
    v58 = v55;
    if (v55 > 0x40)
    {
      v13 = (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8;
      v57 = (void *)operator new[]();
      memcpy(v57, __src, v13);
    }
    else
    {
      v57 = __src;
    }
  }
LABEL_14:
  v14 = v58;
  v15 = v56;
  v16 = v57;
  if (v55 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = v16;
  v55 = v14;
  v56 = v15;
  if (v53)
  {
    if (v52 < v12)
    {
      llvm::APInt::zext((llvm::APInt *)&v51, v12, (uint64_t)&v57);
      goto LABEL_27;
    }
  }
  else if (v52 < v12)
  {
    llvm::APInt::sext((llvm::APInt *)&v51, v12, (llvm::APInt *)&v57);
    goto LABEL_27;
  }
  if (v52 > v12)
  {
    llvm::APInt::trunc((llvm::APInt *)&v51, v12, (llvm::APInt *)&v57);
  }
  else
  {
    v58 = v52;
    if (v52 > 0x40)
    {
      v57 = (void *)operator new[]();
      memcpy(v57, v51, (((unint64_t)v58 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v57 = v51;
    }
  }
LABEL_27:
  v17 = v58;
  v18 = v53;
  v19 = v57;
  if (v52 >= 0x41 && v51)
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  v51 = v19;
  v52 = v17;
  v53 = v18;
  v20 = *(_WORD *)(a1 + 18) & 0x1FFF;
  if (v20 <= v6)
    v21 = v6;
  else
    v21 = *(_WORD *)(a1 + 18) & 0x1FFF;
  v22 = v21 - v20;
  v50 = v55;
  if (v55 > 0x40)
  {
    v49 = (void *)operator new[]();
    memcpy(v49, __src, (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v49 = __src;
  }
  sub_1C4888094((uint64_t)&v49, v22);
  if (v55 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = v49;
  v55 = v50;
  v50 = 0;
  v48 = v52;
  if (v52 > 0x40)
  {
    v47 = operator new[]();
    memcpy((void *)v47, v51, (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v47 = (unint64_t)v51;
  }
  sub_1C4888094((uint64_t)&v47, v21 - v6);
  if (v52 >= 0x41 && v51)
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  v23 = v4 != 0;
  v51 = (void *)v47;
  v24 = v48;
  v52 = v48;
  v48 = 0;
  if (!(v5 | v4))
  {
    if (v55 <= 0x40)
    {
      v26 = -(uint64_t)v55;
      v27 = (uint64_t)((_QWORD)__src << v26) >> v26;
      v28 = (uint64_t)(v47 << v26) >> v26;
      if (v27 >= v28)
      {
        v25 = v27 > v28;
        goto LABEL_67;
      }
LABEL_66:
      v25 = 0xFFFFFFFFLL;
      goto LABEL_67;
    }
    v36 = *((_QWORD *)__src + ((v55 - 1) >> 6)) & (1 << (v55 - 1));
    v37 = (void **)(v47 + 8 * ((v24 - 1) >> 6));
    if (v24 < 0x41)
      v37 = &v51;
    if ((v36 != 0) == (((unint64_t)*v37 >> (v24 - 1)) & 1))
    {
      v38 = (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8;
      while (v38)
      {
        v39 = *(_QWORD *)((char *)__src + v38 - 8);
        v40 = *(_QWORD *)(v47 - 8 + v38);
        v38 -= 8;
        v35 = v39 > v40;
        if (v39 != v40)
        {
LABEL_93:
          if (v35)
            goto LABEL_60;
          goto LABEL_66;
        }
      }
      goto LABEL_100;
    }
    if (v36)
      goto LABEL_66;
    goto LABEL_60;
  }
  if (v4 && v5)
  {
    if (v55 <= 0x40)
      goto LABEL_49;
    v41 = (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8;
    while (v41)
    {
      v42 = *(_QWORD *)((char *)__src + v41 - 8);
      v43 = *(_QWORD *)(v47 - 8 + v41);
      v41 -= 8;
      v35 = v42 > v43;
      if (v42 != v43)
        goto LABEL_93;
    }
LABEL_100:
    v25 = 0;
    goto LABEL_67;
  }
  if (!v5)
    v23 = 1;
  if (!v23)
  {
    p_src = (void **)((char *)__src + 8 * ((v55 - 1) >> 6));
    if (v55 < 0x41)
      p_src = &__src;
    if ((((unint64_t)*p_src >> (v55 - 1)) & 1) != 0)
      goto LABEL_66;
    if (v55 <= 0x40)
    {
      if (v47 <= (unint64_t)__src)
      {
        v25 = v47 < (unint64_t)__src;
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    v44 = (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8;
    while (v44)
    {
      v45 = *(_QWORD *)((char *)__src + v44 - 8);
      v46 = *(_QWORD *)(v47 - 8 + v44);
      v44 -= 8;
      v35 = v45 > v46;
      if (v45 != v46)
        goto LABEL_93;
    }
    goto LABEL_100;
  }
  v29 = (void **)(v47 + 8 * ((v24 - 1) >> 6));
  if (v24 < 0x41)
    v29 = &v51;
  if ((((unint64_t)*v29 >> (v24 - 1)) & 1) != 0)
  {
LABEL_60:
    v25 = 1;
    goto LABEL_67;
  }
  if (v55 > 0x40)
  {
    v32 = (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8;
    while (v32)
    {
      v33 = *(_QWORD *)((char *)__src + v32 - 8);
      v34 = *(_QWORD *)(v47 - 8 + v32);
      v32 -= 8;
      v35 = v33 > v34;
      if (v33 != v34)
        goto LABEL_93;
    }
    goto LABEL_100;
  }
LABEL_49:
  if ((unint64_t)__src < v47)
    goto LABEL_66;
  v25 = (unint64_t)__src > v47;
LABEL_67:
  if (v24 >= 0x41 && v47)
    MEMORY[0x1CAA32F9C]();
  if (v55 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v25;
}

uint64_t llvm::FixedPointSemantics::getCommonSemantics(int *a1, unsigned int *a2)
{
  int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  __int16 v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;

  v2 = *a1;
  v3 = *a2;
  v4 = *a1 | *a2;
  v5 = (v4 & 0x40000000) == 0;
  v6 = (*a2 & 0x80000000) != 0 && v5;
  if ((*a2 & 0x80000000) != 0 && v5)
    v7 = 0x80000000;
  else
    v7 = 0;
  if (v2 >= 0)
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = (v4 & 0x20000000) == 0;
  if ((v4 & 0x20000000) != 0)
    v9 = 0x20000000;
  else
    v9 = 0;
  if (v8)
    v10 = v6;
  else
    v10 = 1;
  if (v8)
    v11 = v7;
  else
    v11 = 0;
  v12 = HIWORD(v3) & 0x1FFF;
  v13 = -v12;
  if ((v3 & 0xA0000000) != 0)
    v13 = ~v12;
  v14 = v13 + (unsigned __int16)v3;
  v15 = HIWORD(v2) & 0x1FFF;
  if ((v2 & 0xA0000000) != 0)
    v16 = ~v15;
  else
    v16 = -v15;
  v17 = v16 + (unsigned __int16)v2;
  if (v17 <= v14)
    LOWORD(v17) = v14;
  if (v15 <= v12)
    v18 = v12;
  else
    v18 = v15;
  v19 = (unsigned __int16)(v17 + v18 + v10) | (v18 << 16);
  if (v5)
    v20 = 0;
  else
    v20 = 0x40000000;
  return v19 | v9 | v20 | v11;
}

void *llvm::APFixedPoint::shl@<X0>(const void **this@<X0>, BOOL *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void *v9;
  unsigned __int16 *v10;
  int v11;
  unsigned int v12;
  void *v13;
  void **v14;
  void *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  void **v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  char v25;
  unint64_t v26;
  void *v27;
  BOOL *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  void *result;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  BOOL *v69;
  unint64_t v70;
  void *v71;
  unsigned int v72;
  void *__src;
  unsigned int v74;
  char v75;
  void *__dst;
  unsigned int v77;
  BOOL v78;
  void *v79;
  int v80;
  void *v81;
  int v82;
  void *v83;
  unsigned int v84;
  char v85;
  void *v86;
  unsigned int v87;
  void *v88;
  unsigned int v89;

  v8 = *((unsigned int *)this + 2);
  v84 = v8;
  if (v8 > 0x40)
  {
    v9 = (void *)operator new[]();
    memcpy(v9, *this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v9 = (void *)*this;
  }
  v83 = v9;
  v11 = *((_DWORD *)this + 4);
  v10 = (unsigned __int16 *)(this + 2);
  v85 = *((_BYTE *)v10 - 4);
  v12 = 2 * (unsigned __int16)v11;
  if ((v11 & 0x20000000) == 0)
  {
    if (v8 < v12)
    {
      v14 = &v79;
      llvm::APInt::zext((llvm::APInt *)&v83, v12, (uint64_t)&v79);
LABEL_17:
      if (v84 < 0x41)
        goto LABEL_20;
      v13 = v83;
      if (!v83)
        goto LABEL_20;
      goto LABEL_19;
    }
    v80 = v8;
    if (v8 <= 0x40)
    {
      v79 = v9;
      v14 = &v79;
      goto LABEL_21;
    }
    v79 = (void *)operator new[]();
    memcpy(v79, v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v13 = v83;
    v14 = &v79;
    if (!v83)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v8 < v12)
  {
    v14 = &v81;
    llvm::APInt::sext((llvm::APInt *)&v83, v12, (llvm::APInt *)&v81);
    goto LABEL_17;
  }
  v82 = v8;
  if (v8 <= 0x40)
  {
    v81 = v9;
    v14 = &v81;
    goto LABEL_21;
  }
  v81 = (void *)operator new[]();
  memcpy(v81, v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
  v13 = v83;
  v14 = &v81;
  if (v83)
LABEL_19:
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
LABEL_20:
  LODWORD(v8) = *((_DWORD *)v14 + 2);
LABEL_21:
  v15 = *v14;
  v83 = *v14;
  v84 = v8;
  *((_DWORD *)v14 + 2) = 0;
  if (v8 < a3)
    a3 = v8;
  v72 = v8;
  if (v8 > 0x40)
  {
    v15 = (void *)operator new[]();
    memcpy(v15, v83, (((unint64_t)v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  v71 = v15;
  sub_1C4888094((uint64_t)&v71, a3);
  v16 = v72;
  v77 = v72;
  v70 = (unint64_t)v71;
  __dst = v71;
  v17 = *(_DWORD *)v10;
  v78 = (*(_DWORD *)v10 & 0x20000000) == 0;
  llvm::APFixedPoint::getMax((int *)v10, (uint64_t)&v71);
  sub_1C637D224(&__src, (uint64_t)&v71);
  v18 = v74;
  if (!v75)
  {
    if (v74 < v12)
    {
      v19 = &v86;
      llvm::APInt::sext((llvm::APInt *)&__src, v12, (llvm::APInt *)&v86);
      goto LABEL_33;
    }
    if (v74 <= v12)
    {
      v87 = v74;
      if (v74 >= 0x41)
      {
        v86 = (void *)operator new[]();
        memcpy(v86, __src, (((unint64_t)v87 + 63) >> 3) & 0x3FFFFFF8);
        v19 = &v86;
        goto LABEL_33;
      }
      v68 = 0;
      goto LABEL_31;
    }
    v19 = &v86;
    v32 = &v86;
LABEL_87:
    llvm::APInt::trunc((llvm::APInt *)&__src, v12, (llvm::APInt *)v32);
    goto LABEL_33;
  }
  if (v74 >= v12)
  {
    if (v74 <= v12)
    {
      v89 = v74;
      if (v74 >= 0x41)
      {
        v88 = (void *)operator new[]();
        memcpy(v88, __src, (((unint64_t)v89 + 63) >> 3) & 0x3FFFFFF8);
        v19 = &v88;
        goto LABEL_33;
      }
      v68 = 1;
LABEL_31:
      v20 = (unint64_t)__src;
      goto LABEL_36;
    }
    v19 = &v88;
    v32 = &v88;
    goto LABEL_87;
  }
  v19 = &v88;
  llvm::APInt::zext((llvm::APInt *)&__src, v12, (uint64_t)&v88);
LABEL_33:
  v18 = *((_DWORD *)v19 + 2);
  v68 = v75;
  v20 = (unint64_t)*v19;
  if (v74 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_36:
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  llvm::APFixedPoint::getMin(v10, (uint64_t)&v71);
  sub_1C637D224(&__src, (uint64_t)&v71);
  v21 = v74;
  v69 = a2;
  if (!v75)
  {
    if (v74 < v12)
    {
      v22 = v20;
      v23 = a4;
      v24 = &v86;
      llvm::APInt::sext((llvm::APInt *)&__src, v12, (llvm::APInt *)&v86);
      goto LABEL_47;
    }
    if (v74 <= v12)
    {
      v87 = v74;
      if (v74 >= 0x41)
      {
        v22 = v20;
        v23 = a4;
        v86 = (void *)operator new[]();
        memcpy(v86, __src, (((unint64_t)v87 + 63) >> 3) & 0x3FFFFFF8);
        v24 = &v86;
        goto LABEL_47;
      }
      v25 = 0;
      goto LABEL_45;
    }
    v22 = v20;
    v23 = a4;
    v24 = &v86;
    v33 = &v86;
LABEL_89:
    llvm::APInt::trunc((llvm::APInt *)&__src, v12, (llvm::APInt *)v33);
    goto LABEL_47;
  }
  if (v74 >= v12)
  {
    if (v74 <= v12)
    {
      v89 = v74;
      if (v74 >= 0x41)
      {
        v22 = v20;
        v23 = a4;
        v88 = (void *)operator new[]();
        memcpy(v88, __src, (((unint64_t)v89 + 63) >> 3) & 0x3FFFFFF8);
        v24 = &v88;
        goto LABEL_47;
      }
      v25 = 1;
LABEL_45:
      v26 = (unint64_t)__src;
      goto LABEL_52;
    }
    v22 = v20;
    v23 = a4;
    v24 = &v88;
    v33 = &v88;
    goto LABEL_89;
  }
  v22 = v20;
  v23 = a4;
  v24 = &v88;
  llvm::APInt::zext((llvm::APInt *)&__src, v12, (uint64_t)&v88);
LABEL_47:
  v21 = *((_DWORD *)v24 + 2);
  v25 = v75;
  v26 = (unint64_t)*v24;
  if (v74 < 0x41)
  {
    a4 = v23;
  }
  else
  {
    a4 = v23;
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  v20 = v22;
LABEL_52:
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  if ((*((_BYTE *)v10 + 3) & 0x40) == 0)
  {
    v27 = (void *)v70;
    if ((v17 & 0x20000000) != 0)
    {
      v28 = v69;
      if (v16 > 0x40)
      {
        v34 = *(_QWORD *)(v70 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
        v35 = v26;
        if (v21 >= 0x41)
          v35 = *(_QWORD *)(v26 + 8 * ((v21 - 1) >> 6));
        if ((v34 != 0) == ((v35 & (1 << (v21 - 1))) != 0))
        {
          v42 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
          while (v42)
          {
            v43 = *(_QWORD *)(v70 - 8 + v42);
            v44 = *(_QWORD *)(v26 - 8 + v42);
            v42 -= 8;
            if (v43 != v44)
            {
              if (v43 <= v44)
                goto LABEL_68;
              break;
            }
          }
        }
        else if (v34)
        {
          goto LABEL_68;
        }
        v36 = v20;
        if (v18 >= 0x41)
          v36 = *(_QWORD *)(v20 + 8 * ((v18 - 1) >> 6));
        if ((v34 != 0) == ((v36 & (1 << (v18 - 1))) != 0))
        {
          v48 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v48)
            {
              LODWORD(v29) = 0;
              goto LABEL_82;
            }
            v49 = *(_QWORD *)(v70 - 8 + v48);
            v50 = *(_QWORD *)(v20 - 8 + v48);
            v48 -= 8;
            v51 = v49 > v50;
          }
          while (v49 == v50);
LABEL_179:
          if (v51)
            LODWORD(v29) = 1;
          else
            LODWORD(v29) = -1;
        }
        else if (v34)
        {
          LODWORD(v29) = -1;
        }
        else
        {
          LODWORD(v29) = 1;
        }
        goto LABEL_82;
      }
      v29 = (uint64_t)(v70 << -(char)v16) >> -(char)v16;
      if (v29 >= (uint64_t)(v26 << -(char)v16) >> -(char)v16)
      {
        v30 = (uint64_t)(v20 << (64 - v16)) >> (64 - v16);
        v51 = v29 < v30;
        LODWORD(v29) = v29 > v30;
        if (v51)
          LODWORD(v29) = -1;
        goto LABEL_82;
      }
    }
    else
    {
      v28 = v69;
      if (v16 > 0x40)
      {
        v29 = 8 * ((unint64_t)(v16 + 63) >> 6);
        v56 = (char *)(v70 - 8);
        v57 = v29;
        do
        {
          if (!v57)
            goto LABEL_177;
          v58 = *(_QWORD *)&v56[v57];
          v59 = *(_QWORD *)(v26 - 8 + v57);
          v57 -= 8;
        }
        while (v58 == v59);
        if (v58 > v59)
        {
LABEL_177:
          while (v29)
          {
            v60 = *(_QWORD *)&v56[v29];
            v61 = *(_QWORD *)(v20 - 8 + v29);
            v29 -= 8;
            v51 = v60 > v61;
            if (v60 != v61)
              goto LABEL_179;
          }
          goto LABEL_82;
        }
      }
      else if (v70 >= v26)
      {
        LODWORD(v29) = v70 > v20;
        if (v70 < v20)
          LODWORD(v29) = -1;
LABEL_82:
        LOBYTE(v29) = (int)v29 > 0;
        goto LABEL_128;
      }
    }
LABEL_68:
    LOBYTE(v29) = 1;
    goto LABEL_128;
  }
  v27 = (void *)v70;
  if ((v17 & 0x20000000) != 0)
  {
    if (v16 > 0x40)
    {
      v37 = *(_QWORD *)(v70 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
      v38 = v26;
      if (v21 >= 0x41)
        v38 = *(_QWORD *)(v26 + 8 * ((v21 - 1) >> 6));
      if ((v37 != 0) == ((v38 & (1 << (v21 - 1))) != 0))
      {
        v45 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
        while (v45)
        {
          v46 = *(_QWORD *)(v70 - 8 + v45);
          v47 = *(_QWORD *)(v26 - 8 + v45);
          v45 -= 8;
          if (v46 != v47)
          {
            if (v46 <= v47)
              goto LABEL_71;
            break;
          }
        }
      }
      else if (v37)
      {
        goto LABEL_124;
      }
      v39 = v20;
      if (v18 >= 0x41)
        v39 = *(_QWORD *)(v20 + 8 * ((v18 - 1) >> 6));
      v28 = v69;
      if ((v37 != 0) == ((v39 & (1 << (v18 - 1))) != 0))
      {
        v52 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
        while (v52)
        {
          v53 = *(_QWORD *)(v70 - 8 + v52);
          v54 = *(_QWORD *)(v20 - 8 + v52);
          v52 -= 8;
          v55 = v53 > v54;
          if (v53 != v54)
          {
LABEL_189:
            if (v55)
              goto LABEL_76;
            break;
          }
        }
      }
      else if (!v37)
      {
LABEL_76:
        if (v16 > 0x40 || v18 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&__dst, v18);
          LODWORD(v16) = v77;
          if (v77 <= 0x40)
          {
            __dst = (void *)v20;
            v27 = (void *)v20;
          }
          else
          {
            v27 = __dst;
            memcpy(__dst, (const void *)v20, (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          __dst = (void *)v20;
          v77 = v18;
          v27 = (void *)v20;
          LODWORD(v16) = v18;
        }
        LOBYTE(v29) = 0;
        v78 = v68;
        goto LABEL_128;
      }
      LOBYTE(v29) = 0;
      goto LABEL_128;
    }
    v29 = (uint64_t)(v70 << -(char)v16) >> -(char)v16;
    if (v29 < (uint64_t)(v26 << -(char)v16) >> -(char)v16)
    {
LABEL_71:
      if (v16 > 0x40 || v21 >= 0x41)
        goto LABEL_124;
      goto LABEL_73;
    }
    v31 = (uint64_t)(v20 << (64 - v16)) >> (64 - v16);
    v51 = v29 < v31;
    LODWORD(v29) = v29 > v31;
    if (!v51)
    {
LABEL_75:
      v28 = v69;
      if (!(_DWORD)v29)
        goto LABEL_128;
      goto LABEL_76;
    }
LABEL_85:
    LOBYTE(v29) = 0;
LABEL_127:
    v28 = v69;
    goto LABEL_128;
  }
  if (v16 <= 0x40)
  {
    if (v70 < v26)
    {
      if (v21 > 0x40)
      {
LABEL_124:
        llvm::APInt::reallocate((uint64_t)&__dst, v21);
        LODWORD(v16) = v77;
        if (v77 <= 0x40)
        {
          __dst = (void *)v26;
          v27 = (void *)v26;
        }
        else
        {
          v27 = __dst;
          memcpy(__dst, (const void *)v26, (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
        }
        goto LABEL_126;
      }
LABEL_73:
      __dst = (void *)v26;
      v77 = v21;
      v27 = (void *)v26;
      LODWORD(v16) = v21;
LABEL_126:
      LOBYTE(v29) = 0;
      v78 = v25;
      goto LABEL_127;
    }
    LODWORD(v29) = v70 > v20;
    if (v70 >= v20)
      goto LABEL_75;
    goto LABEL_85;
  }
  v29 = 8 * ((unint64_t)(v16 + 63) >> 6);
  v62 = (char *)(v70 - 8);
  v63 = v29;
  while (v63)
  {
    v64 = *(_QWORD *)&v62[v63];
    v65 = *(_QWORD *)(v26 - 8 + v63);
    v63 -= 8;
    if (v64 != v65)
    {
      if (v64 <= v65)
        goto LABEL_71;
      break;
    }
  }
  v28 = v69;
  while (v29)
  {
    v66 = *(_QWORD *)&v62[v29];
    v67 = *(_QWORD *)(v20 - 8 + v29);
    v29 -= 8;
    v55 = v66 > v67;
    if (v66 != v67)
      goto LABEL_189;
  }
LABEL_128:
  if (v28)
    *v28 = v29;
  v40 = *v10;
  if (v16 < v40)
  {
    llvm::APInt::sext((llvm::APInt *)&__dst, v40, (llvm::APInt *)&v71);
  }
  else if (v16 > v40)
  {
    llvm::APInt::trunc((llvm::APInt *)&__dst, v40, (llvm::APInt *)&v71);
  }
  else
  {
    v72 = v16;
    if (v16 > 0x40)
    {
      v71 = (void *)operator new[]();
      memcpy(v71, __dst, (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v71 = v27;
    }
  }
  result = (void *)sub_1C637F790(a4, (uint64_t)&v71, v10);
  if (v72 >= 0x41)
  {
    result = v71;
    if (v71)
      result = (void *)MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  }
  if (v21 >= 0x41 && v26)
    result = (void *)MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  if (v18 >= 0x41 && v20)
    result = (void *)MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  if (v77 >= 0x41)
  {
    result = __dst;
    if (__dst)
      result = (void *)MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  }
  if (v84 >= 0x41)
  {
    result = v83;
    if (v83)
      return (void *)MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  }
  return result;
}

BOOL sub_1C5DB6B3C(uint64_t a1)
{
  int v1;
  int v3;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v5 = 64;
  v4 = 0;
  v6 = 0;
  v1 = sub_1C4FCF8D8(a1, (uint64_t)&v4);
  if (v5 >= 0x41 && v4)
  {
    v3 = v1;
    MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
    v1 = v3;
  }
  return v1 != 0;
}

void llvm::APFixedPoint::convertToInt(llvm::APFixedPoint *this@<X0>, BOOL *a2@<X3>, unsigned int a3@<W1>, int a4@<W2>, uint64_t a5@<X8>)
{
  unsigned int v10;
  void **p_src;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  unsigned int v46;
  char v47;
  void *__src;
  unsigned int v49;
  char v50;
  void *v51;
  unsigned int v52;
  char v53;

  sub_1C637EF80((uint64_t)&__src, (uint64_t)this);
  v10 = *((unsigned __int16 *)this + 8);
  sub_1C57D4D3C(a3, a4 ^ 1, (uint64_t)&v45);
  sub_1C57D4DAC(a3, a4 ^ 1, (uint64_t)&v42);
  if (v10 >= a3)
  {
    if (v10 > a3)
    {
      sub_1C4FCFB60((llvm::APInt *)&v45, v10, (uint64_t)&v51);
      if (v46 >= 0x41 && v45)
        MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      v45 = (unint64_t)v51;
      v46 = v52;
      v47 = v53;
      sub_1C4FCFB60((llvm::APInt *)&v42, v10, (uint64_t)&v51);
      if (v43 >= 0x41 && v42)
        MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
      v42 = (unint64_t)v51;
      v43 = v52;
      v44 = v53;
    }
  }
  else
  {
    sub_1C4FCFB60((llvm::APInt *)&__src, a3, (uint64_t)&v51);
    if (v49 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    __src = v51;
    v49 = v52;
    v50 = v53;
  }
  if (a2)
  {
    if (!v50 && (a4 & 1) == 0)
    {
      p_src = (void **)((char *)__src + 8 * ((v49 - 1) >> 6));
      if (v49 < 0x41)
        p_src = &__src;
      if ((((unint64_t)*p_src >> (v49 - 1)) & 1) == 0)
      {
        if (v49 <= 0x40)
        {
          v12 = v42 < (unint64_t)__src;
LABEL_37:
          *a2 = v12;
          goto LABEL_38;
        }
        v33 = (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8;
        while (v33)
        {
          v34 = *(_QWORD *)((char *)__src + v33 - 8);
          v35 = *(_QWORD *)(v42 - 8 + v33);
          v33 -= 8;
          v13 = v34 > v35;
          if (v34 != v35)
            goto LABEL_26;
        }
LABEL_99:
        v12 = 0;
        goto LABEL_37;
      }
LABEL_36:
      v12 = 1;
      goto LABEL_37;
    }
    if (v50 && a4)
    {
      if (v49 <= 0x40)
      {
        v13 = (unint64_t)__src > v42;
LABEL_26:
        v12 = v13;
        goto LABEL_37;
      }
      v30 = (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8;
      while (v30)
      {
        v31 = *(_QWORD *)((char *)__src + v30 - 8);
        v32 = *(_QWORD *)(v42 - 8 + v30);
        v30 -= 8;
        v13 = v31 > v32;
        if (v31 != v32)
          goto LABEL_26;
      }
      goto LABEL_99;
    }
    if (v50)
    {
      if (v49 > 0x40)
      {
        v14 = 8 * (((unint64_t)v49 + 63) >> 6);
        v36 = (char *)__src - 8;
        v37 = v14;
        do
        {
          if (!v37)
            goto LABEL_94;
          v38 = *(_QWORD *)&v36[v37];
          v39 = *(_QWORD *)(v45 - 8 + v37);
          v37 -= 8;
        }
        while (v38 == v39);
        if (v38 <= v39)
          goto LABEL_36;
LABEL_94:
        while (v14)
        {
          v40 = *(_QWORD *)&v36[v14];
          v41 = *(_QWORD *)(v42 - 8 + v14);
          v14 -= 8;
          v29 = v40 > v41;
          if (v40 != v41)
            goto LABEL_96;
        }
      }
      else
      {
        if ((unint64_t)__src < v45)
          goto LABEL_36;
        LODWORD(v14) = (unint64_t)__src > v42;
        if ((unint64_t)__src < v42)
          LODWORD(v14) = -1;
      }
    }
    else if (v49 > 0x40)
    {
      v18 = *((_QWORD *)__src + ((v49 - 1) >> 6)) & (1 << (v49 - 1));
      v19 = v46 - 1;
      v20 = &v45;
      if (v46 >= 0x41)
        v20 = (unint64_t *)(v45 + 8 * (v19 >> 6));
      if ((v18 != 0) == ((*v20 >> v19) & 1))
      {
        v23 = (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8;
        while (v23)
        {
          v24 = *(_QWORD *)((char *)__src + v23 - 8);
          v25 = *(_QWORD *)(v45 - 8 + v23);
          v23 -= 8;
          if (v24 != v25)
          {
            if (v24 <= v25)
              goto LABEL_36;
            break;
          }
        }
      }
      else if (v18)
      {
        goto LABEL_36;
      }
      v21 = v43 - 1;
      v22 = &v42;
      if (v43 >= 0x41)
        v22 = (unint64_t *)(v42 + 8 * (v21 >> 6));
      if ((v18 != 0) == ((*v22 >> v21) & 1))
      {
        v26 = (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v26)
          {
            LODWORD(v14) = 0;
            goto LABEL_61;
          }
          v27 = *(_QWORD *)((char *)__src + v26 - 8);
          v28 = *(_QWORD *)(v42 - 8 + v26);
          v26 -= 8;
          v29 = v27 > v28;
        }
        while (v27 == v28);
LABEL_96:
        if (v29)
          LODWORD(v14) = 1;
        else
          LODWORD(v14) = -1;
      }
      else if (v18)
      {
        LODWORD(v14) = -1;
      }
      else
      {
        LODWORD(v14) = 1;
      }
    }
    else
    {
      v15 = (uint64_t)((_QWORD)__src << -(char)v49) >> -(char)v49;
      if (v15 < (uint64_t)(v45 << -(char)v49) >> -(char)v49)
        goto LABEL_36;
      v14 = (uint64_t)(v42 << (64 - v49)) >> (64 - v49);
      v13 = v15 < v14;
      LODWORD(v14) = v15 > v14;
      if (v13)
        LODWORD(v14) = -1;
    }
LABEL_61:
    v12 = (int)v14 > 0;
    goto LABEL_37;
  }
LABEL_38:
  v50 = a4 ^ 1;
  if ((a4 & 1) != 0)
  {
    if (v49 < a3)
    {
      llvm::APInt::sext((llvm::APInt *)&__src, a3, (llvm::APInt *)&v51);
      goto LABEL_47;
    }
  }
  else if (v49 < a3)
  {
    llvm::APInt::zext((llvm::APInt *)&__src, a3, (uint64_t)&v51);
    goto LABEL_47;
  }
  if (v49 > a3)
  {
    llvm::APInt::trunc((llvm::APInt *)&__src, a3, (llvm::APInt *)&v51);
  }
  else
  {
    v52 = v49;
    if (v49 > 0x40)
    {
      v51 = (void *)operator new[]();
      memcpy(v51, __src, (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v51 = __src;
    }
  }
LABEL_47:
  v16 = v50;
  v17 = v51;
  *(_DWORD *)(a5 + 8) = v52;
  *(_QWORD *)a5 = v17;
  *(_BYTE *)(a5 + 12) = v16;
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  if (v46 >= 0x41 && v45)
    MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
  if (v49 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

unsigned int *sub_1C5DB7164(unsigned int *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  char v8;
  unint64_t v9;

  v2 = this[2];
  if (v2 > 0x40)
    return llvm::APInt::ashrSlowCase(this, a2);
  v3 = (uint64_t)(*(_QWORD *)this << -(char)v2) >> -(char)v2;
  if (v2 == a2)
    v4 = 63;
  else
    v4 = a2;
  v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if (!v2)
    v5 = 0;
  v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if (v2)
    v7 = v2 == a2;
  else
    v7 = 1;
  if (v7)
    v8 = v4;
  else
    v8 = a2;
  if (v7)
    v9 = v5;
  else
    v9 = v6;
  *(_QWORD *)this = v9 & (v3 >> v8);
  return this;
}

uint64_t llvm::APFloatBase::EnumToSemantics(int a1)
{
  return (uint64_t)*(&off_1E819D1D0 + a1);
}

void *llvm::APFloatBase::IEEEhalf(llvm::APFloatBase *this)
{
  return &unk_1C866F15C;
}

void *llvm::APFloatBase::BFloat(llvm::APFloatBase *this)
{
  return &unk_1C866F170;
}

void *llvm::APFloatBase::IEEEsingle(llvm::APFloatBase *this)
{
  return &unk_1C866F184;
}

void *llvm::APFloatBase::IEEEdouble(llvm::APFloatBase *this)
{
  return &unk_1C866F198;
}

void *llvm::APFloatBase::IEEEquad(llvm::APFloatBase *this)
{
  return &unk_1C866F1AC;
}

void *llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return &unk_1C866F1C0;
}

void *llvm::APFloatBase::Float8E5M2(llvm::APFloatBase *this)
{
  return &unk_1C866F1D4;
}

void *llvm::APFloatBase::Float8E4M3FN(llvm::APFloatBase *this)
{
  return &unk_1C866F1E8;
}

void *llvm::APFloatBase::x87DoubleExtended(llvm::APFloatBase *this)
{
  return &unk_1C866F1FC;
}

uint64_t llvm::APFloatBase::SemanticsToEnum(void *a1)
{
  if (a1 == &unk_1C866F15C)
    return 0;
  if (a1 == &unk_1C866F170)
    return 1;
  if (a1 == &unk_1C866F184)
    return 2;
  if (a1 == &unk_1C866F198)
    return 3;
  if (a1 == &unk_1C866F1AC)
    return 4;
  if (a1 == &unk_1C866F1C0)
    return 5;
  if (a1 == &unk_1C866F1D4)
    return 6;
  if (a1 == &unk_1C866F1E8)
    return 7;
  return 8;
}

void *llvm::APFloatBase::Bogus(llvm::APFloatBase *this)
{
  return &unk_1C866F210;
}

uint64_t llvm::APFloatBase::semanticsPrecision(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

_QWORD *llvm::detail::IEEEFloat::initialize(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  *result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v2 = result;
    result = (_QWORD *)operator new[]();
    v2[1] = result;
  }
  return result;
}

_QWORD *llvm::detail::IEEEFloat::freeSignificand(_QWORD *this)
{
  if ((*(_DWORD *)(*this + 8) - 64) <= 0xFFFFFF7F)
  {
    this = (_QWORD *)this[1];
    if (this)
      JUMPOUT(0x1CAA32F9CLL);
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::assign(uint64_t this, const llvm::detail::IEEEFloat *a2)
{
  char v2;
  char v3;
  int v4;
  _BOOL4 v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *(_BYTE *)(this + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *(_BYTE *)(this + 20) = v2;
  v3 = *((_BYTE *)a2 + 20);
  v4 = v3 & 7;
  *(_BYTE *)(this + 20) = v2 & 0xF8 | v3 & 7;
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  v6 = (v3 & 6) != 0 && v4 != 3;
  if (v4 == 1 || v6)
  {
    v8 = *(_QWORD *)this;
    this += 8;
    v9 = *(unsigned int *)(v8 + 8);
    if ((v9 - 64) <= 0xFFFFFF7F)
      this = *(_QWORD *)this;
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
    v13 = (uint64_t *)*((_QWORD *)a2 + 1);
    v11 = (char *)a2 + 8;
    v12 = v13;
    if (v10 >= 0xFFFFFF80)
      v14 = (uint64_t *)v11;
    else
      v14 = v12;
    if (v9 <= 0xFFFFFFBF)
    {
      v15 = (unint64_t)(v9 + 64) >> 6;
      do
      {
        v16 = *v14++;
        *(_QWORD *)this = v16;
        this += 8;
        --v15;
      }
      while (v15);
    }
  }
  return this;
}

uint64_t *llvm::detail::IEEEFloat::copySignificand(llvm::detail::IEEEFloat *this, uint64_t **a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)this;
  result = (uint64_t *)((char *)this + 8);
  v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F)
    result = (uint64_t *)*result;
  v5 = *((_DWORD *)*a2 + 2) - 64;
  v8 = a2[1];
  v6 = (char *)(a2 + 1);
  v7 = v8;
  if (v5 >= 0xFFFFFF80)
    v9 = (uint64_t *)v6;
  else
    v9 = v7;
  if (v4 <= 0xFFFFFFBF)
  {
    v10 = (unint64_t)(v4 + 64) >> 6;
    do
    {
      v11 = *v9++;
      *result++ = v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::significandParts(llvm::detail::IEEEFloat *this)
{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)this;
  result = (uint64_t)this + 8;
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F)
    return *(_QWORD *)result;
  return result;
}

{
  uint64_t result;
  uint64_t v2;

  v2 = *(_QWORD *)this;
  result = (uint64_t)this + 8;
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F)
    return *(_QWORD *)result;
  return result;
}

unint64_t llvm::detail::IEEEFloat::makeNaN(int **this, int a2, int a3, const llvm::APInt *a4)
{
  llvm::detail::IEEEFloat *v4;
  char v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t result;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const llvm::APInt **v18;
  const llvm::APInt *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int i;
  unsigned int v23;
  unint64_t v24;
  unint64_t v26;
  const llvm::APInt *v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  char v33;
  llvm::detail::IEEEFloat *v35;
  int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;

  v4 = (llvm::detail::IEEEFloat *)this;
  if (a3)
    v5 = 9;
  else
    v5 = 1;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | v5;
  v6 = *this;
  v7 = (*this)[4];
  v8 = **this;
  if (v7 != 1)
    ++v8;
  *((_DWORD *)this + 4) = v8;
  v9 = v6[2];
  v10 = this + 1;
  if (v9 - 64 <= 0xFFFFFF7F)
    v10 = (_QWORD *)*v10;
  v11 = v9 + 64;
  v12 = (v9 + 64) >> 6;
  v48 = 0;
  if (v7 == 1)
  {
    v15 = v9 - 1;
    v47 = v9 - 1;
    if (v9 - 1 > 0x40)
    {
      v40 = (v9 + 64) >> 6;
      v43 = v10;
      v37 = v9;
      v31 = v9 + 64;
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, -1, 1);
      v11 = v31;
      v4 = (llvm::detail::IEEEFloat *)this;
      v9 = v37;
      v12 = v40;
      v10 = v43;
      result = v46;
      v15 = v47;
    }
    else if (v9 == 1)
    {
      result = 0;
    }
    else
    {
      result = 0xFFFFFFFFFFFFFFFFLL >> ~(v9 + 62);
    }
    a2 = 0;
    v48 = result;
    a4 = (const llvm::APInt *)&v48;
    v14 = v15;
LABEL_16:
    v16 = ((unint64_t)v14 + 63) >> 6;
    if (v12 > v16)
    {
      *v10 = 0;
      if (v11 >= 0x80)
      {
        v44 = v10;
        v30 = v15;
        v32 = a2;
        v29 = result;
        v35 = v4;
        v27 = a4;
        v41 = v12;
        v38 = v9;
        v28 = v14;
        v26 = ((unint64_t)v14 + 63) >> 6;
        bzero(v10 + 1, 8 * (v12 - 2) + 8);
        LODWORD(v16) = v26;
        a4 = v27;
        v14 = v28;
        v4 = v35;
        v9 = v38;
        v12 = v41;
        v10 = v44;
        v15 = v30;
        a2 = v32;
        result = v29;
      }
    }
    if (v14 >= 0x41)
      a4 = *(const llvm::APInt **)a4;
    if (v12 >= v16)
      v17 = v16;
    else
      v17 = v12;
    if ((_DWORD)v17)
    {
      v18 = (const llvm::APInt **)v10;
      do
      {
        v19 = *(const llvm::APInt **)a4;
        a4 = (const llvm::APInt *)((char *)a4 + 8);
        *v18++ = v19;
        --v17;
      }
      while (v17);
    }
    v6 = *(int **)v4;
    v20 = *(_DWORD *)(*(_QWORD *)v4 + 8);
    v21 = (v20 - 1) >> 6;
    v10[v21] &= ~(-1 << (v20 - 1));
    for (i = v21 + 1; (_DWORD)v12 != i; ++i)
      v10[i] = 0;
    v23 = v20 - 2;
    if (!a2)
      goto LABEL_40;
    goto LABEL_30;
  }
  if (a4)
  {
    result = 0;
    v14 = *((_DWORD *)a4 + 2);
    v15 = 1;
    goto LABEL_16;
  }
  *v10 = 0;
  if (v11 >= 0x80)
  {
    v33 = a2;
    v42 = v11 >> 6;
    v45 = v10;
    v36 = v6;
    v39 = v9;
    bzero(v10 + 1, 8 * (v12 - 2) + 8);
    v6 = v36;
    v9 = v39;
    v12 = v42;
    v10 = v45;
    LOBYTE(a2) = v33;
  }
  result = 0;
  v23 = v9 - 2;
  v15 = 1;
  v20 = v9;
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_30:
  v10[v23 >> 6] &= ~(1 << v23);
  if (v9 <= 0xFFFFFFBF)
  {
    v24 = *v10;
    if (*v10)
      goto LABEL_41;
    while (v12 - 1 != v24)
    {
      if (v10[++v24])
      {
        if (v24 >= v12)
          break;
        goto LABEL_41;
      }
    }
  }
  v23 = v20 - 3;
LABEL_40:
  v10[v23 >> 6] |= 1 << v23;
LABEL_41:
  if (v6 == (int *)&unk_1C866F1FC)
    v10[(v20 - 1) >> 6] |= 1 << (v20 - 1);
  if (v15 >= 0x41)
  {
    if (result)
      JUMPOUT(0x1CAA32F9CLL);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::exponentNaN(unsigned int **this)
{
  unsigned int v1;

  v1 = **this;
  if ((*this)[4] == 1)
    return v1;
  else
    return v1 + 1;
}

_QWORD *llvm::detail::IEEEFloat::operator=(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  char v4;
  int v5;
  _BOOL4 v7;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  if (result != a2)
  {
    v2 = *a2;
    if (*result != *a2)
    {
      if ((*(_DWORD *)(*result + 8) - 64) <= 0xFFFFFF7F)
      {
        v18 = result[1];
        if (v18)
        {
          v20 = a2;
          v22 = result;
          MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
          a2 = v20;
          result = v22;
          v2 = *v20;
        }
      }
      *result = v2;
      if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80)
      {
        v21 = a2;
        v23 = result;
        v19 = operator new[]();
        a2 = v21;
        result = v23;
        v23[1] = v19;
      }
    }
    v3 = *((_BYTE *)result + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
    *((_BYTE *)result + 20) = v3;
    v4 = *((_BYTE *)a2 + 20);
    v5 = v4 & 7;
    *((_BYTE *)result + 20) = v3 & 0xF8 | v4 & 7;
    *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
    v7 = (v4 & 6) != 0 && v5 != 3;
    if (v5 == 1 || v7)
    {
      v9 = result + 1;
      v10 = *(unsigned int *)(*result + 8);
      if ((v10 - 64) <= 0xFFFFFF7F)
        v9 = (_QWORD *)*v9;
      v11 = *(_DWORD *)(*a2 + 8) - 64;
      v14 = (uint64_t *)a2[1];
      v12 = a2 + 1;
      v13 = v14;
      if (v11 >= 0xFFFFFF80)
        v15 = v12;
      else
        v15 = v13;
      if (v10 <= 0xFFFFFFBF)
      {
        v16 = (unint64_t)(v10 + 64) >> 6;
        do
        {
          v17 = *v15++;
          *v9++ = v17;
          --v16;
        }
        while (v16);
      }
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::operator=(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_DWORD *)(*(_QWORD *)result + 8) - 64) <= 0xFFFFFF7F)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3)
    {
      v4 = a2;
      v5 = result;
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
      a2 = v4;
      result = v5;
    }
  }
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v2 = *(_BYTE *)(result + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
  *(_BYTE *)(result + 20) = v2;
  *(_BYTE *)(result + 20) = v2 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  *(_QWORD *)a2 = &unk_1C866F210;
  return result;
}

BOOL llvm::detail::IEEEFloat::isDenormal(llvm::detail::IEEEFloat *this)
{
  BOOL v1;
  int v3;
  _QWORD *v4;

  v1 = (*((_BYTE *)this + 20) & 6) == 0 || (*((_BYTE *)this + 20) & 7) == 3;
  if (v1 || *((_DWORD *)this + 4) != *(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)this + 8);
  v4 = (_QWORD *)((char *)this + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v4 = (_QWORD *)*v4;
  return ((v4[(v3 - 1) >> 6] >> (v3 - 1)) & 1) == 0;
}

uint64_t llvm::detail::IEEEFloat::significandMSB(llvm::detail::IEEEFloat *this)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  v1 = (_QWORD *)((char *)this + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v1 = (_QWORD *)*v1;
  v4 = (v3 + 64) >> 6;
  v5 = 64 - (v4 << 6);
  v6 = v4 - 1;
  while (1)
  {
    v7 = v1[v6];
    if (v7)
      break;
    v5 += 64;
    if (--v6 == -1)
      return 0xFFFFFFFFLL;
  }
  return (__clz(v7) - v5) ^ 0x3F;
}

BOOL llvm::detail::IEEEFloat::isSignificandAllOnes(llvm::detail::IEEEFloat *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *(_QWORD *)this;
  v1 = (uint64_t *)((char *)this + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v1 = (uint64_t *)*v1;
  v4 = v3 + 63;
  v5 = (v4 >> 6) - 1;
  if (v4 >> 6 == 1)
  {
    v5 = 0;
    return (v1[v5] | (-1 << v4)) == -1;
  }
  else
  {
    v7 = (v4 >> 6) - 1;
    v8 = v1;
    while (1)
    {
      v9 = *v8++;
      if (v9 != -1)
        break;
      if (!--v7)
        return (v1[v5] | (-1 << v4)) == -1;
    }
    return 0;
  }
}

BOOL llvm::detail::IEEEFloat::isLargest(llvm::detail::IEEEFloat *this)
{
  _DWORD *v1;
  _BOOL4 v3;

  v1 = *(_DWORD **)this;
  v3 = (*((_BYTE *)this + 20) & 6) != 0 && (*((_BYTE *)this + 20) & 7) != 3;
  if (*(_DWORD *)(*(_QWORD *)this + 16) == 1)
  {
    if (!v3 || *((_DWORD *)this + 4) != *v1)
      return 0;
    return llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(this);
  }
  else
  {
    if (!v3 || *((_DWORD *)this + 4) != *v1)
      return 0;
    return llvm::detail::IEEEFloat::isSignificandAllOnes(this);
  }
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t this, uint64_t **a2)
{
  uint64_t *v2;
  char v3;
  char v4;
  int v5;
  _BOOL4 v7;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::detail::IEEEFloat *v19;
  uint64_t v20;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  if ((*((_DWORD *)v2 + 2) + 64) >= 0x80)
  {
    v19 = (const llvm::detail::IEEEFloat *)a2;
    v20 = this;
    v18 = operator new[]();
    a2 = (uint64_t **)v19;
    this = v20;
    *(_QWORD *)(v20 + 8) = v18;
  }
  v3 = *(_BYTE *)(this + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *(_BYTE *)(this + 20) = v3;
  v4 = *((_BYTE *)a2 + 20);
  v5 = v4 & 7;
  *(_BYTE *)(this + 20) = v3 & 0xF8 | v4 & 7;
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  v7 = (v4 & 6) != 0 && v5 != 3;
  if (v5 == 1 || v7)
  {
    v9 = (_QWORD *)(this + 8);
    v10 = *(unsigned int *)(*(_QWORD *)this + 8);
    if ((v10 - 64) <= 0xFFFFFF7F)
      v9 = (_QWORD *)*v9;
    v11 = *((_DWORD *)*a2 + 2) - 64;
    v14 = a2[1];
    v12 = (char *)(a2 + 1);
    v13 = v14;
    if (v11 >= 0xFFFFFF80)
      v15 = (uint64_t *)v12;
    else
      v15 = v13;
    if (v10 <= 0xFFFFFFBF)
    {
      v16 = (unint64_t)(v10 + 64) >> 6;
      do
      {
        v17 = *v15++;
        *v9++ = v17;
        --v16;
      }
      while (v16);
    }
  }
  return this;
}

{
  uint64_t *v2;
  char v3;
  char v4;
  int v5;
  _BOOL4 v7;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::detail::IEEEFloat *v19;
  uint64_t v20;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  if ((*((_DWORD *)v2 + 2) + 64) >= 0x80)
  {
    v19 = (const llvm::detail::IEEEFloat *)a2;
    v20 = this;
    v18 = operator new[]();
    a2 = (uint64_t **)v19;
    this = v20;
    *(_QWORD *)(v20 + 8) = v18;
  }
  v3 = *(_BYTE *)(this + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *(_BYTE *)(this + 20) = v3;
  v4 = *((_BYTE *)a2 + 20);
  v5 = v4 & 7;
  *(_BYTE *)(this + 20) = v3 & 0xF8 | v4 & 7;
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  v7 = (v4 & 6) != 0 && v5 != 3;
  if (v5 == 1 || v7)
  {
    v9 = (_QWORD *)(this + 8);
    v10 = *(unsigned int *)(*(_QWORD *)this + 8);
    if ((v10 - 64) <= 0xFFFFFF7F)
      v9 = (_QWORD *)*v9;
    v11 = *((_DWORD *)*a2 + 2) - 64;
    v14 = a2[1];
    v12 = (char *)(a2 + 1);
    v13 = v14;
    if (v11 >= 0xFFFFFF80)
      v15 = (uint64_t *)v12;
    else
      v15 = v13;
    if (v10 <= 0xFFFFFFBF)
    {
      v16 = (unint64_t)(v10 + 64) >> 6;
      do
      {
        v17 = *v15++;
        *v9++ = v17;
        --v16;
      }
      while (v16);
    }
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::roundToIntegral(_BYTE *a1, int a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;

  v3 = a1[20] & 7;
  if (v3 == 1)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 16) == 1)
      return 0;
    v4 = *(_DWORD *)(*(_QWORD *)a1 + 8);
    v5 = v4 - 64;
    v6 = a1 + 8;
    v7 = a1 + 8;
    if ((v4 - 64) <= 0xFFFFFF7F)
      v7 = (_QWORD *)*v6;
    v8 = v4 - 2;
    v9 = (v4 - 2) >> 6;
    if ((v7[v9] & (1 << v8)) != 0)
      return 0;
    if (v5 <= 0xFFFFFF7F)
      v6 = (_QWORD *)*v6;
    v6[v9] |= 1 << v8;
    return 1;
  }
  else
  {
    if (v3 == 3 || v3 == 0)
      return 0;
    v13 = *(unsigned int *)(*(_QWORD *)a1 + 8);
    if (*((_DWORD *)a1 + 4) + 1 >= (int)v13)
      return 0;
    v15 = v13 | (v13 >> 1) | ((v13 | (v13 >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v17 = v16 | (v16 >> 16);
    v18 = v17 + 1;
    v33 = v17 + 1;
    if ((v17 + 1) > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, 1, 0);
      LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a1 + 8);
    }
    else
    {
      v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v17;
      if (v18)
        v20 = v19;
      else
        v20 = 0;
      v32 = v20 & 1;
    }
    v21 = (_QWORD *)sub_1C4888094((uint64_t)&v32, (int)v13 - 1);
    v22 = *(_QWORD *)a1;
    v28 = v22;
    v23 = *(_DWORD *)(v22 + 8);
    if ((v23 + 64) >= 0x80)
    {
      v21 = (_QWORD *)operator new[]();
      v29 = v21;
      v23 = *(_DWORD *)(v22 + 8);
    }
    v31 = 3;
    v30 = *(_DWORD *)(v22 + 4) - 1;
    if ((v23 - 64) < 0xFFFFFF80)
    {
      *v21 = 0;
      bzero(v21 + 1, 8 * (((v23 + 64) >> 6) - 2) + 8);
    }
    else
    {
      v29 = 0;
    }
    llvm::detail::IEEEFloat::convertFromAPInt((llvm::APInt *)&v28, (uint64_t)&v32, 0, 1);
    v24 = a1[20];
    v31 = v31 & 0xF7 | v24 & 8;
    v25 = (v24 >> 3) & 1;
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v28, a2, 0);
    v10 = v26;
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v28, a2, 1);
    v27 = a1[20];
    if (v25 != (v27 & 8) >> 3)
      a1[20] = v27 ^ 8;
    if ((*(_DWORD *)(v28 + 8) - 64) <= 0xFFFFFF7F && v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  return v10;
}

void llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1C5DB7F5C()
{
  unsigned int v0;

  return ~(v0 >> 2) & 2;
}

void llvm::detail::IEEEFloat::~IEEEFloat(llvm::detail::IEEEFloat *this)
{
  uint64_t v1;

  if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8000313F17);
  }
}

{
  uint64_t v1;

  if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8000313F17);
  }
}

BOOL llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;

  if (this == a2)
    return 1;
  if (*(_QWORD *)this != *(_QWORD *)a2)
    return 0;
  v2 = *((unsigned __int8 *)this + 20);
  v3 = *((unsigned __int8 *)a2 + 20);
  if ((v2 & 7) != (v3 & 7) || ((v3 ^ v2) & 8) != 0)
    return 0;
  v4 = 1;
  if ((v2 & 7) == 0 || (v2 & 7) == 3)
    return v4;
  if ((v2 & 6) != 0 && *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4))
    return 0;
  v5 = *(_DWORD *)(*(_QWORD *)this + 8);
  v6 = v5 - 64;
  v7 = (_QWORD *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v7 = (_QWORD *)*v7;
  v8 = v5 + 64;
  v11 = (char *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v10 = v11;
  if (v6 < 0xFFFFFF80)
    v9 = v10;
  return memcmp(v7, v9, (v8 >> 3) & 0x1FFFFFF8) == 0;
}

llvm::APInt *llvm::detail::IEEEFloat::IEEEFloat(llvm::APInt *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = a2;
  v4 = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v11 = a2;
    v12 = a3;
    v8 = operator new[]();
    a2 = v11;
    a3 = v12;
    *((_QWORD *)this + 1) = v8;
    v4 = *(_QWORD *)this;
  }
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | 2;
  v5 = *(_DWORD *)(v4 + 8);
  if ((v5 - 64) < 0xFFFFFF80)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 1);
    *v9 = 0;
    v10 = a2;
    v13 = a3;
    bzero(v9 + 1, 8 * (((v5 + 64) >> 6) - 2) + 8);
    a3 = v13;
    *((_DWORD *)this + 4) = *(_DWORD *)(v10 + 8) - 1;
    v6 = (_QWORD *)*((_QWORD *)this + 1);
  }
  else
  {
    v6 = (_QWORD *)((char *)this + 8);
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
  }
  *v6 = a3;
  llvm::detail::IEEEFloat::normalize(this, 1, 0);
  return this;
}

{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = a2;
  v4 = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v11 = a2;
    v12 = a3;
    v8 = operator new[]();
    a2 = v11;
    a3 = v12;
    *((_QWORD *)this + 1) = v8;
    v4 = *(_QWORD *)this;
  }
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | 2;
  v5 = *(_DWORD *)(v4 + 8);
  if ((v5 - 64) < 0xFFFFFF80)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 1);
    *v9 = 0;
    v10 = a2;
    v13 = a3;
    bzero(v9 + 1, 8 * (((v5 + 64) >> 6) - 2) + 8);
    a3 = v13;
    *((_DWORD *)this + 4) = *(_DWORD *)(v10 + 8) - 1;
    v6 = (_QWORD *)*((_QWORD *)this + 1);
  }
  else
  {
    v6 = (_QWORD *)((char *)this + 8);
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
  }
  *v6 = a3;
  llvm::detail::IEEEFloat::normalize(this, 1, 0);
  return this;
}

void llvm::detail::IEEEFloat::zeroSignificand(llvm::detail::IEEEFloat *this)
{
  int v1;
  _QWORD *v2;

  v1 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v1 - 64) >= 0xFFFFFF80)
  {
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v2 = (_QWORD *)*((_QWORD *)this + 1);
    *v2 = 0;
    bzero(v2 + 1, 8 * (((v1 + 64) >> 6) - 2) + 8);
  }
}

uint64_t llvm::detail::IEEEFloat::normalize(llvm::APInt *this, int a2, int a3)
{
  uint64_t result;
  llvm::APInt *v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  llvm::APInt *v12;
  unint64_t *v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  llvm::APInt *v20;
  uint64_t v21;
  unsigned int v22;
  llvm::APInt *v23;
  unsigned int v24;
  int v25;
  signed int v26;
  unsigned int v27;
  unint64_t *v28;
  int v29;
  int v30;
  int v31;
  llvm::APInt *v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  int v41;

  if ((*((_BYTE *)this + 20) & 6) == 0 || (*((_BYTE *)this + 20) & 7) == 3)
    return 0;
  v8 = (llvm::APInt *)((char *)this + 8);
  v9 = *(_DWORD **)this;
  v10 = *(_DWORD *)(*(_QWORD *)this + 8);
  v11 = v10 - 64;
  v12 = (llvm::APInt *)((char *)this + 8);
  if ((v10 - 64) <= 0xFFFFFF7F)
    v12 = *(llvm::APInt **)v8;
  v13 = (unint64_t *)((v10 + 64) >> 6);
  v14 = 64 - ((_DWORD)v13 << 6);
  v15 = (_DWORD)v13 - 1;
  while (1)
  {
    v16 = *((_QWORD *)v12 + v15);
    if (v16)
      break;
    v14 += 64;
    if (--v15 == -1)
      goto LABEL_14;
  }
  v17 = (__clz(v16) - v14) ^ 0x3F;
  v18 = v17 + 1;
  if (v17 == -1)
  {
LABEL_14:
    v18 = 0;
  }
  else
  {
    v24 = v18 - v10;
    v25 = *((_DWORD *)this + 4);
    if ((signed int)(v25 + v24) > *v9)
      return llvm::detail::IEEEFloat::handleOverflow((_DWORD **)this, a2);
    v26 = v9[1];
    if ((int)(v25 + v24) >= v26)
      v27 = v24;
    else
      v27 = v26 - v25;
    if ((v27 & 0x80000000) != 0)
    {
      if (v11 <= 0xFFFFFF7F)
        v8 = *(llvm::APInt **)v8;
      llvm::APInt::tcShiftLeft(v8, v13, -v27);
      result = 0;
      *((_DWORD *)this + 4) += v27;
      return result;
    }
    if (v27)
    {
      *((_DWORD *)this + 4) = v27 + v25;
      v28 = (unint64_t *)((char *)this + 8);
      if (v11 <= 0xFFFFFF7F)
        v28 = *(unint64_t **)v8;
      v29 = sub_1C5DBBD1C(v28, v13, v27);
      llvm::APInt::tcShiftRight((llvm::APInt *)v28, v13, v27);
      if (v29 == 2)
        v30 = 3;
      else
        v30 = v29;
      if (v29)
        v31 = v30;
      else
        v31 = 1;
      if (a3)
        a3 = v31;
      else
        a3 = v29;
      if (v18 >= v27)
        v18 -= v27;
      else
        v18 = 0;
      v9 = *(_DWORD **)this;
    }
  }
  v19 = v9[4];
  if (v19 == 1 && *((_DWORD *)this + 4) == *v9 && llvm::detail::IEEEFloat::isSignificandAllOnes(this))
    return llvm::detail::IEEEFloat::handleOverflow((_DWORD **)this, a2);
  if (!a3)
  {
    if (!v18)
    {
      result = 0;
      *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 3;
      return result;
    }
    return 0;
  }
  if (a2 != 1)
    __asm { BR              X10 }
  if (a3 == 2)
  {
    if ((*((_BYTE *)this + 20) & 7) != 3)
    {
      v20 = v8;
      if ((v9[2] - 64) <= 0xFFFFFF7F)
        v20 = *(llvm::APInt **)v8;
      if ((*(_BYTE *)v20 & 1) != 0)
      {
LABEL_25:
        if (!v18)
          *((_DWORD *)this + 4) = v9[1];
        v21 = v9[2];
        v22 = v21 - 64;
        if ((v21 - 64) > 0xFFFFFF7F)
        {
          v23 = v8;
          v32 = v8;
          if (v21 > 0xFFFFFFBF)
          {
LABEL_64:
            v36 = (unint64_t *)((v21 + 64) >> 6);
            v37 = 64 - ((_DWORD)v36 << 6);
            v38 = (_DWORD)v36 - 1;
            while (1)
            {
              v39 = *((_QWORD *)v32 + v38);
              if (v39)
                break;
              v37 += 64;
              if (--v38 == -1)
              {
                v40 = -1;
                goto LABEL_69;
              }
            }
            v40 = (__clz(v39) - v37) ^ 0x3F;
LABEL_69:
            if (v40 == (_DWORD)v21)
            {
              v41 = *((_DWORD *)this + 4);
              if (v41 == *v9)
              {
                *((_BYTE *)this + 20) &= 0xF8u;
                return 20;
              }
              *((_DWORD *)this + 4) = v41 + 1;
              if (v22 <= 0xFFFFFF7F)
                v8 = *(llvm::APInt **)v8;
              llvm::APInt::tcShiftRight(v8, v36, 1u);
              return 16;
            }
            v18 = v40 + 1;
            if (v19 != 1 || *((_DWORD *)this + 4) != *v9 || !llvm::detail::IEEEFloat::isSignificandAllOnes(this))
              goto LABEL_80;
            return llvm::detail::IEEEFloat::handleOverflow((_DWORD **)this, a2);
          }
        }
        else
        {
          v23 = *(llvm::APInt **)v8;
        }
        v33 = __CFADD__((*(_QWORD *)v23)++, 1);
        if (v33)
        {
          v34 = (_QWORD *)((char *)v23 + 8);
          v35 = ((unint64_t)(v21 + 64) >> 6) - 1;
          do
          {
            if (!v35)
              break;
            --v35;
            v33 = __CFADD__((*v34++)++, 1);
          }
          while (v33);
        }
        v32 = v8;
        if (v22 <= 0xFFFFFF7F)
          v32 = *(llvm::APInt **)v8;
        goto LABEL_64;
      }
    }
  }
  else if (a3 == 3)
  {
    goto LABEL_25;
  }
LABEL_80:
  if (v18 == v9[2])
    return 16;
  if (!v18)
    *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 3;
  return 24;
}

_QWORD *llvm::detail::IEEEFloat::IEEEFloat(_QWORD *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v5 = result;
    v3 = operator new[]();
    result = v5;
    v5[1] = v3;
    a2 = *v5;
  }
  *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xF0 | 3;
  v2 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    v4 = (_QWORD *)result[1];
    *v4 = 0;
    v6 = result;
    bzero(v4 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v6;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v5 = result;
    v3 = operator new[]();
    result = v5;
    v5[1] = v3;
    a2 = *v5;
  }
  *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xF0 | 3;
  v2 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    v4 = (_QWORD *)result[1];
    *v4 = 0;
    v6 = result;
    bzero(v4 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v6;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v5 = result;
    v3 = operator new[]();
    result = v5;
    v5[1] = v3;
    a2 = *v5;
  }
  *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xF0 | 3;
  v2 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    v4 = (_QWORD *)result[1];
    *v4 = 0;
    v6 = result;
    bzero(v4 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v6;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v5 = result;
    v3 = operator new[]();
    result = v5;
    v5[1] = v3;
    a2 = *v5;
  }
  *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xF0 | 3;
  v2 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    v4 = (_QWORD *)result[1];
    *v4 = 0;
    v6 = result;
    bzero(v4 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v6;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

void llvm::detail::IEEEFloat::makeZero(llvm::detail::IEEEFloat *this, int a2)
{
  char v2;
  int v3;
  _QWORD *v4;

  if (a2)
    v2 = 11;
  else
    v2 = 3;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | v2;
  v3 = *(_DWORD *)(*(_QWORD *)this + 8);
  *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)this + 4) - 1;
  if ((v3 - 64) < 0xFFFFFF80)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    *v4 = 0;
    bzero(v4 + 1, 8 * (((v3 + 64) >> 6) - 2) + 8);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &unk_1C866F210;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v2 = *(_BYTE *)(result + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
  *(_BYTE *)(result + 20) = v2;
  *(_BYTE *)(result + 20) = v2 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  *(_QWORD *)a2 = &unk_1C866F210;
  return result;
}

{
  char v2;

  *(_QWORD *)result = &unk_1C866F210;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v2 = *(_BYTE *)(result + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
  *(_BYTE *)(result + 20) = v2;
  *(_BYTE *)(result + 20) = v2 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  *(_QWORD *)a2 = &unk_1C866F210;
  return result;
}

uint64_t *llvm::detail::IEEEFloat::incrementSignificand(llvm::detail::IEEEFloat *this)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  result = (uint64_t *)((char *)this + 8);
  v3 = *(unsigned int *)(v2 + 8);
  if ((v3 - 64) > 0xFFFFFF7F)
  {
    if (v3 > 0xFFFFFFBF)
      return result;
  }
  else
  {
    result = (uint64_t *)*result;
  }
  v4 = __CFADD__((*result)++, 1);
  if (v4)
  {
    v5 = (unint64_t)(v3 + 64) >> 6;
    v6 = result + 1;
    v7 = v5 - 1;
    do
    {
      if (!v7)
        break;
      --v7;
      v4 = __CFADD__((*v6++)++, 1);
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::addSignificand(llvm::detail::IEEEFloat *this, uint64_t **a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;

  v3 = *(_QWORD *)this;
  v2 = (unint64_t *)((char *)this + 8);
  v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F)
    v2 = (unint64_t *)*v2;
  v5 = *((_DWORD *)*a2 + 2) - 64;
  v8 = a2[1];
  v6 = (char *)(a2 + 1);
  v7 = v8;
  if (v5 >= 0xFFFFFF80)
    v7 = (uint64_t *)v6;
  if (v4 > 0xFFFFFFBF)
    return 0;
  v9 = 0;
  v10 = (unint64_t)(v4 + 64) >> 6;
  do
  {
    v11 = *v7++;
    v12 = v11 + *v2;
    v13 = v12 + 1 <= *v2;
    if (v9)
    {
      ++v12;
      v9 = v13;
    }
    else
    {
      v9 = v12 < *v2;
    }
    *v2++ = v12;
    --v10;
  }
  while (v10);
  return v9;
}

uint64_t llvm::detail::IEEEFloat::subtractSignificand(llvm::detail::IEEEFloat *this, unint64_t **a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t v15;

  v4 = *(_QWORD *)this;
  v3 = (unint64_t *)((char *)this + 8);
  v5 = *(unsigned int *)(v4 + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v3 = (unint64_t *)*v3;
  v6 = *((_DWORD *)*a2 + 2) - 64;
  v9 = a2[1];
  v7 = (char *)(a2 + 1);
  v8 = v9;
  if (v6 >= 0xFFFFFF80)
    v10 = (unint64_t *)v7;
  else
    v10 = v8;
  if (v5 <= 0xFFFFFFBF)
  {
    v11 = (unint64_t)(v5 + 64) >> 6;
    do
    {
      v12 = *v10++;
      v13 = *v3 - v12;
      v14 = *v3 < v12;
      v15 = *v3 + ~v12;
      if (a3)
      {
        a3 = v15 >= *v3;
      }
      else
      {
        v15 = v13;
        a3 = v14;
      }
      *v3++ = v15;
      --v11;
    }
    while (v11);
  }
  return a3;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  unint64_t *v8;
  llvm::APInt *v9;
  unsigned int v10;
  unint64_t *v11;
  int v12;
  uint64_t v13;
  const unint64_t **v14;
  llvm::APInt **v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  llvm::APInt *v25;
  uint64_t v26;
  char v27;
  int v28;
  _BOOL4 v30;
  uint64_t v31;
  llvm::APInt **v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::APInt **v37;
  unint64_t v38;
  llvm::APInt *v39;
  int v40;
  llvm::APInt *v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t *v48;
  llvm::APInt *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v56;
  __int128 *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t **v61;
  llvm::APInt *v62;
  uint64_t v63;
  llvm::APInt *v64;
  int v65;
  char v66;
  __int128 v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v57 = (__int128 *)*a1;
  v6 = *(_DWORD *)(*a1 + 8);
  v7 = 2 * v6;
  v8 = (unint64_t *)((2 * v6 + 64) >> 6);
  v60 = 2 * v6 + 64;
  if (v60 < 0x140)
  {
    v9 = (llvm::APInt *)&v70;
    v10 = *(_DWORD *)(*a1 + 8);
  }
  else
  {
    v9 = (llvm::APInt *)operator new[]();
    v57 = (__int128 *)*a1;
    v10 = *(_DWORD *)(*a1 + 8);
  }
  v11 = a1 + 1;
  v61 = (unint64_t **)(a1 + 1);
  if (v10 - 64 <= 0xFFFFFF7F)
    v11 = *v61;
  v58 = v6;
  v59 = v10;
  v12 = (2 * v6) | 1;
  v13 = (v10 + 64) >> 6;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
    v14 = (const unint64_t **)(a2 + 8);
  else
    v14 = *(const unint64_t ***)(a2 + 8);
  llvm::APInt::tcFullMultiply(v9, v11, v14, (const unint64_t *)((v10 + 64) >> 6), (const unint64_t *)((v10 + 64) >> 6));
  v16 = 64 - ((_DWORD)v8 << 6);
  v17 = (_DWORD)v8 - 1;
  v62 = v9;
  while (1)
  {
    v18 = *((_QWORD *)v9 + v17);
    if (v18)
      break;
    v16 += 64;
    if (--v17 == -1)
    {
      v19 = -1;
      goto LABEL_14;
    }
  }
  v19 = (__clz(v18) - v16) ^ 0x3F;
LABEL_14:
  v20 = v19 + 1;
  v21 = *(_DWORD *)(a2 + 16) + *((_DWORD *)a1 + 4) + 2;
  *((_DWORD *)a1 + 4) = v21;
  if ((*(_BYTE *)(a3 + 20) & 7) == 3)
  {
    v22 = 0;
  }
  else
  {
    v56 = *v61;
    v23 = v7 - v20;
    if (v7 != v20)
    {
      llvm::APInt::tcShiftLeft(v62, v8, v23);
      *((_DWORD *)a1 + 4) = v21 - v23;
    }
    v24 = *((_DWORD *)v57 + 4);
    v67 = *v57;
    v68 = v24;
    DWORD2(v67) = v12;
    v25 = v62;
    if ((_DWORD)v8 == 1)
      v25 = *(llvm::APInt **)v62;
    *a1 = (unint64_t)&v67;
    a1[1] = (unint64_t)v25;
    v26 = *(_QWORD *)a3;
    v63 = v26;
    if ((*(_DWORD *)(v26 + 8) + 64) >= 0x80)
    {
      v15 = (llvm::APInt **)operator new[]();
      v64 = (llvm::APInt *)v15;
    }
    v27 = *(_BYTE *)(a3 + 20);
    v28 = v27 & 7;
    v66 = v27 & 0xF;
    v65 = *(_DWORD *)(a3 + 16);
    v30 = (v27 & 6) != 0 && v28 != 3;
    if (v28 == 1 || v30)
    {
      v31 = *(unsigned int *)(v26 + 8);
      v32 = (v31 - 64) <= 0xFFFFFF7F ? v15 : &v64;
      v33 = *(_DWORD *)(*(_QWORD *)a3 + 8) - 64;
      v36 = *(_QWORD *)(a3 + 8);
      v35 = a3 + 8;
      v34 = v36;
      v37 = (llvm::APInt **)(v33 >= 0xFFFFFF80 ? v35 : v34);
      if (v31 <= 0xFFFFFFBF)
      {
        v38 = (unint64_t)(v31 + 64) >> 6;
        do
        {
          v39 = *v37++;
          *v32++ = v39;
          --v38;
        }
        while (v38);
      }
    }
    llvm::detail::IEEEFloat::convert(&v63, (uint64_t)&v67, 0, &v69);
    ++v65;
    v40 = *(_DWORD *)(v63 + 8);
    if ((v40 - 64) <= 0xFFFFFF7F)
      v41 = v64;
    else
      v41 = (llvm::APInt *)&v64;
    llvm::APInt::tcShiftRight(v41, (unint64_t *)((v40 + 64) >> 6), 1u);
    v22 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat **)a1, (const llvm::detail::IEEEFloat *)&v63, 0);
    v42 = (_DWORD)v8 - 1;
    if ((_DWORD)v8 == 1)
      *(_QWORD *)v62 = *v61;
    *a1 = (unint64_t)v57;
    a1[1] = (unint64_t)v56;
    v43 = 64 - ((_DWORD)v8 << 6);
    while (1)
    {
      v44 = *((_QWORD *)v62 + v42);
      if (v44)
        break;
      v43 += 64;
      if (--v42 == -1)
      {
        v20 = 0;
        goto LABEL_48;
      }
    }
    v20 = ((__clz(v44) - v43) ^ 0x3F) + 1;
LABEL_48:
    if ((*(_DWORD *)(v63 + 8) - 64) <= 0xFFFFFF7F && v64)
      MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    v21 = *((_DWORD *)a1 + 4);
  }
  v45 = v21 + ~v58;
  *((_DWORD *)a1 + 4) = v45;
  v46 = v20 - v58;
  if (v20 <= v58)
  {
    v49 = v62;
  }
  else
  {
    v47 = v20 + 63;
    v48 = (unint64_t *)((v20 + 63) >> 6);
    v49 = v62;
    v50 = sub_1C5DBBD1C((unint64_t *)v62, v47 >> 6, v46);
    llvm::APInt::tcShiftRight(v62, v48, v46);
    if (v50 == 2)
      v51 = 3;
    else
      v51 = v50;
    if (v50)
      v52 = v51;
    else
      v52 = 1;
    if ((_DWORD)v22)
      v22 = v52;
    else
      v22 = v50;
    *((_DWORD *)a1 + 4) = v46 + v45;
  }
  if (v59 <= 0xFFFFFFBF)
  {
    v53 = (unint64_t *)v49;
    do
    {
      v54 = *v53++;
      *v11++ = v54;
      --v13;
    }
    while (v13);
  }
  if (v60 >= 0x140)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  return v22;
}

uint64_t llvm::detail::IEEEFloat::convert(uint64_t *a1, uint64_t a2, int a3, _BYTE *a4)
{
  int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  signed int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  _BOOL4 v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  signed int v43;
  int v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  _BOOL4 v51;
  llvm::APInt *v53;
  int v54;
  uint64_t v55;
  char v57;
  char v58;
  int v59;
  _QWORD *v60;
  unint64_t *v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;

  v4 = a3;
  v7 = *a1;
  v8 = *((_BYTE *)a1 + 20) & 7;
  if (v8 != 1 || *(_DWORD *)(v7 + 16) == 1)
  {
    v9 = 0;
  }
  else
  {
    v62 = *(_DWORD *)(v7 + 8);
    v63 = a1 + 1;
    if ((v62 - 64) <= 0xFFFFFF7F)
      v63 = (_QWORD *)*v63;
    v9 = ((v63[(v62 - 2) >> 6] >> (v62 - 2)) & 1) == 0;
  }
  v10 = 0;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = v11 + 64;
  v13 = *(_DWORD *)(v7 + 8);
  v14 = v11 - v13;
  if ((_UNKNOWN *)a2 == &unk_1C866F1FC || (_UNKNOWN *)v7 != &unk_1C866F1FC || v8 != 1)
    goto LABEL_12;
  if (v13 - 64 <= 0xFFFFFF7F)
  {
    v15 = *(_QWORD *)a1[1];
    if (v15 < 0)
      goto LABEL_10;
LABEL_11:
    v10 = 1;
    goto LABEL_12;
  }
  v15 = a1[1];
  if ((v15 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_10:
  if ((v15 & 0x4000000000000000) == 0)
    goto LABEL_11;
  v10 = 0;
LABEL_12:
  v66 = v10;
  v67 = *a1;
  v16 = v12 >> 6;
  v17 = (unint64_t *)((v13 + 64) >> 6);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_13:
    v18 = 0;
    goto LABEL_14;
  }
  if ((*((_BYTE *)a1 + 20) & 6) != 0 && v8 != 3)
  {
    v37 = v13 - 64;
    v38 = a1 + 1;
    if (v13 - 64 <= 0xFFFFFF7F)
      v38 = (_QWORD *)*v38;
    v39 = 64 - ((_DWORD)v17 << 6);
    v40 = (_DWORD)v17 - 1;
    while (1)
    {
      v41 = v38[v40];
      if (v41)
        break;
      v39 += 64;
      if (--v40 == -1)
      {
        v42 = -1;
        goto LABEL_59;
      }
    }
    v42 = (__clz(v41) - v39) ^ 0x3F;
LABEL_59:
    v43 = v42 + 1 - v13;
    v44 = *((_DWORD *)a1 + 4);
    v45 = *(_DWORD *)(a2 + 4);
    if (v43 + v44 < v45)
      v43 = v45 - v44;
    if (v43 <= v14)
      v43 = v14;
    if (v43 < 0)
    {
      v14 -= v43;
    }
    else
    {
      if (v42 + 1 > -v14)
      {
LABEL_113:
        v65 = a3;
        goto LABEL_114;
      }
      v43 = v42 + v14;
      v14 = -v42;
    }
    *((_DWORD *)a1 + 4) = v43 + v44;
    if ((v14 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_113;
  }
  if (v8 != 1 || *(_DWORD *)(v7 + 16) == 1)
    goto LABEL_13;
  v65 = a3;
  v37 = v13 - 64;
LABEL_114:
  v61 = (unint64_t *)(a1 + 1);
  if (v37 <= 0xFFFFFF7F)
    v61 = (unint64_t *)*v61;
  v18 = sub_1C5DBBD1C(v61, v17, -v14);
  llvm::APInt::tcShiftRight((llvm::APInt *)v61, v17, -v14);
  v4 = v65;
LABEL_14:
  if (v16 <= v17)
  {
    if (v16 == 1 && (_DWORD)v17 != 1)
    {
      v32 = *((_BYTE *)a1 + 20) & 7;
      v34 = (*((_BYTE *)a1 + 20) & 6) != 0 && v32 != 3;
      v35 = *(_DWORD *)(*a1 + 8) - 64;
      if (v32 == 1 || v34)
      {
        v46 = a1 + 1;
        if (v35 <= 0xFFFFFF7F)
          v46 = (_QWORD *)*v46;
        v36 = (_QWORD *)*v46;
      }
      else
      {
        v36 = 0;
      }
      if (v35 <= 0xFFFFFF7F)
      {
        v47 = a1[1];
        if (v47)
          MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
      }
      a1[1] = (uint64_t)v36;
    }
  }
  else
  {
    v64 = v9;
    v19 = v18;
    v20 = v4;
    v21 = (_QWORD *)operator new[]();
    v22 = v21;
    *v21 = 0;
    if (v12 >= 0x80)
      bzero(v21 + 1, 8 * (v16 - 2) + 8);
    v23 = *((_BYTE *)a1 + 20) & 7;
    v25 = (*((_BYTE *)a1 + 20) & 6) != 0 && v23 != 3;
    v26 = *(_DWORD *)(*a1 + 8) - 64;
    if (v23 == 1 || v25)
    {
      v27 = a1 + 1;
      if (v26 <= 0xFFFFFF7F)
        v27 = (uint64_t *)*v27;
      if (v13 <= 0xFFFFFFBF)
      {
        v28 = v22;
        do
        {
          v29 = *v27++;
          *v28++ = v29;
          v17 = (unint64_t *)((char *)v17 - 1);
        }
        while (v17);
      }
    }
    if (v26 <= 0xFFFFFF7F)
    {
      v30 = a1[1];
      if (v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    }
    a1[1] = (uint64_t)v22;
    v4 = v20;
    v18 = v19;
    v9 = v64;
  }
  *a1 = a2;
  v48 = *((unsigned __int8 *)a1 + 20);
  if (v14 >= 1)
  {
    v49 = v48 & 7;
    v50 = (v48 & 6) == 0 || v49 == 3;
    v51 = !v50;
    if (v49 == 1 || v51)
    {
      v53 = (llvm::APInt *)(a1 + 1);
      if ((*(_DWORD *)(a2 + 8) - 64) <= 0xFFFFFF7F)
        v53 = *(llvm::APInt **)v53;
      llvm::APInt::tcShiftLeft(v53, (unint64_t *)(v12 >> 6), v14);
      v48 = *((unsigned __int8 *)a1 + 20);
    }
  }
  v54 = v48 & 7;
  if ((v48 & 6) != 0 && v54 != 3)
  {
    v9 = llvm::detail::IEEEFloat::normalize((llvm::APInt *)a1, v4, v18);
    *a4 = (_DWORD)v9 != 0;
    return v9;
  }
  if ((v48 & 7) == 0)
  {
    if (*(_DWORD *)(*a1 + 16) == 1)
    {
      llvm::detail::IEEEFloat::makeNaN((int **)a1, 0, (v48 >> 3) & 1, 0);
      *a4 = 1;
      return 16;
    }
LABEL_96:
    v9 = 0;
    *a4 = 0;
    return v9;
  }
  if (v54 != 1)
    goto LABEL_96;
  v55 = *a1;
  if (*(_DWORD *)(*a1 + 16) == 1)
  {
    *a4 = *(_DWORD *)(v67 + 16) != 1;
    llvm::detail::IEEEFloat::makeNaN((int **)a1, 0, (*((unsigned __int8 *)a1 + 20) >> 3) & 1, 0);
  }
  else
  {
    if (v18)
      v57 = 1;
    else
      v57 = v66;
    *a4 = v57;
    if ((_UNKNOWN *)v55 == &unk_1C866F1FC)
      v58 = v66;
    else
      v58 = 1;
    if ((v58 & 1) == 0)
      *(_QWORD *)a1[1] |= 0x8000000000000000;
    if ((_DWORD)v9)
    {
      v59 = *(_DWORD *)(v55 + 8);
      v60 = a1 + 1;
      if ((v59 - 64) <= 0xFFFFFF7F)
        v60 = (_QWORD *)*v60;
      v9 = 1;
      v60[(v59 - 2) >> 6] |= 1 << (v59 - 2);
    }
  }
  return v9;
}

uint64_t llvm::detail::IEEEFloat::shiftSignificandRight(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  int v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t *v6;
  uint64_t v7;

  *((_DWORD *)this + 4) += a2;
  v3 = *(_DWORD *)(*(_QWORD *)this + 8);
  v4 = (unint64_t *)((char *)this + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v4 = (unint64_t *)*v4;
  v5 = v3 + 64;
  v6 = (unint64_t *)(v5 >> 6);
  v7 = sub_1C5DBBD1C(v4, v5 >> 6, a2);
  llvm::APInt::tcShiftRight((llvm::APInt *)v4, v6, a2);
  return v7;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSignificand(llvm::detail::IEEEFloat **this, const llvm::detail::IEEEFloat *a2, unsigned __int8 a3)
{
  llvm::detail::IEEEFloat *v4;
  int v5;
  int *v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _BOOL4 v15;
  unsigned int v16;
  unint64_t *v17;
  llvm::detail::IEEEFloat **v18;
  unsigned int v19;
  llvm::detail::IEEEFloat **v20;
  llvm::detail::IEEEFloat **v21;
  llvm::detail::IEEEFloat **v22;
  llvm::detail::IEEEFloat **v23;
  uint64_t v24;
  llvm::detail::IEEEFloat *v25;
  uint64_t v26;
  int v27;
  _BOOL4 v29;
  uint64_t v31;
  llvm::detail::IEEEFloat *v32;
  unsigned int v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unint64_t *v43;
  unsigned int v44;
  unint64_t *v45;
  llvm::APInt *v46;
  int v47;
  unint64_t *v48;
  unsigned int v49;
  int v50;
  unint64_t *v51;
  unsigned int v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unint64_t *v60;
  unsigned int v61;
  unint64_t *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  llvm::detail::IEEEFloat **v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  llvm::detail::IEEEFloat *v71;
  _BOOL4 v72;
  llvm::detail::IEEEFloat *v73;
  unsigned int v74;
  uint64_t *v75;
  llvm::detail::IEEEFloat *v76;
  int v77;
  char v78;

  v4 = (llvm::detail::IEEEFloat *)this;
  v6 = (int *)(this + 2);
  v5 = *((_DWORD *)this + 4);
  v7 = *((_BYTE *)a2 + 20);
  v8 = *((_DWORD *)a2 + 4);
  v9 = v8;
  v10 = v5 - v8;
  if ((((((v7 ^ *((_BYTE *)this + 20)) & 8) == 0) ^ a3) & 1) == 0)
  {
    v26 = *(_QWORD *)a2;
    v75 = (uint64_t *)v26;
    if ((*(_DWORD *)(v26 + 8) + 64) >= 0x80)
    {
      this = (llvm::detail::IEEEFloat **)operator new[]();
      v76 = (llvm::detail::IEEEFloat *)this;
      v7 = *((_BYTE *)a2 + 20);
      v9 = *((_DWORD *)a2 + 4);
    }
    v27 = v7 & 7;
    v78 = v7 & 0xF;
    v77 = v9;
    v29 = (v7 & 6) != 0 && v27 != 3;
    if (v27 == 1 || v29)
    {
      v31 = *(unsigned int *)(v26 + 8);
      v32 = (llvm::detail::IEEEFloat *)((v31 - 64) <= 0xFFFFFF7F ? this : &v76);
      v33 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
      v36 = (char *)*((_QWORD *)a2 + 1);
      v35 = (char *)a2 + 8;
      v34 = v36;
      v37 = v33 >= 0xFFFFFF80 ? v35 : v34;
      if (v31 <= 0xFFFFFFBF)
      {
        v38 = (unint64_t)(v31 + 64) >> 6;
        do
        {
          v39 = *(_QWORD *)v37;
          v37 += 8;
          *(_QWORD *)v32 = v39;
          v32 = (llvm::detail::IEEEFloat *)((char *)v32 + 8);
          --v38;
        }
        while (v38);
      }
    }
    if (v5 == v8)
    {
      v40 = 0;
    }
    else
    {
      v41 = v10 - 1;
      if (v10 < 1)
      {
        v6 = &v77;
        v58 = ~v10;
        *((_DWORD *)v4 + 4) += ~v10;
        v59 = *(_DWORD *)(*(_QWORD *)v4 + 8);
        v60 = (unint64_t *)((char *)v4 + 8);
        if ((v59 - 64) <= 0xFFFFFF7F)
          v60 = (unint64_t *)*v60;
        v61 = v59 + 64;
        v62 = (unint64_t *)(v61 >> 6);
        v40 = sub_1C5DBBD1C(v60, v61 >> 6, ~v10);
        llvm::APInt::tcShiftRight((llvm::APInt *)v60, v62, v58);
        v63 = *(_DWORD *)(v26 + 8);
        v48 = (unint64_t *)((v63 + 64) >> 6);
        if ((v63 - 64) >= 0xFFFFFF80)
          v46 = (llvm::APInt *)&v76;
        else
          v46 = v76;
      }
      else
      {
        v77 = v9 + v41;
        v42 = *(_DWORD *)(v26 + 8);
        if ((v42 - 64) <= 0xFFFFFF7F)
          v43 = (unint64_t *)v76;
        else
          v43 = (unint64_t *)&v76;
        v44 = v42 + 64;
        v45 = (unint64_t *)(v44 >> 6);
        v40 = sub_1C5DBBD1C(v43, v44 >> 6, v10 - 1);
        llvm::APInt::tcShiftRight((llvm::APInt *)v43, v45, v41);
        v46 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
        v47 = *(_DWORD *)(*(_QWORD *)v4 + 8);
        v48 = (unint64_t *)((v47 + 64) >> 6);
        if ((v47 - 64) <= 0xFFFFFF7F)
          v46 = *(llvm::APInt **)v46;
      }
      llvm::APInt::tcShiftLeft(v46, v48, 1u);
      --*v6;
    }
    v64 = llvm::detail::IEEEFloat::compareAbsoluteValue(v4, (const llvm::detail::IEEEFloat *)&v75);
    v65 = v40 != 0;
    if (v64)
    {
      llvm::detail::IEEEFloat::subtractSignificand(v4, (unint64_t **)&v75, v65);
    }
    else
    {
      v66 = *((unsigned int *)v75 + 2);
      if ((v66 - 64) >= 0xFFFFFF80)
        v67 = &v76;
      else
        v67 = (llvm::detail::IEEEFloat **)v76;
      if ((*(_DWORD *)(*(_QWORD *)v4 + 8) - 64) >= 0xFFFFFF80)
        v68 = (unint64_t *)((char *)v4 + 8);
      else
        v68 = (unint64_t *)*((_QWORD *)v4 + 1);
      if (v66 <= 0xFFFFFFBF)
      {
        v69 = (unint64_t)(v66 + 64) >> 6;
        do
        {
          v70 = *v68++;
          v71 = (llvm::detail::IEEEFloat *)((char *)*v67 - v70);
          v72 = (unint64_t)*v67 < v70;
          v73 = (llvm::detail::IEEEFloat *)((char *)*v67 + ~v70);
          if (v65)
          {
            v65 = v73 >= *v67;
          }
          else
          {
            v73 = v71;
            v65 = v72;
          }
          *v67++ = v73;
          --v69;
        }
        while (v69);
      }
      llvm::detail::IEEEFloat::copySignificand(v4, &v75);
      *((_BYTE *)v4 + 20) ^= 8u;
    }
    if (v40 == 3)
      v74 = 1;
    else
      v74 = v40;
    if (v40 == 1)
      v57 = 3;
    else
      v57 = v74;
    goto LABEL_84;
  }
  if (v10 >= 1)
  {
    v11 = *(_QWORD *)a2;
    v75 = (uint64_t *)v11;
    v12 = *(_DWORD *)(v11 + 8);
    if (v12 + 64 >= 0x80)
    {
      this = (llvm::detail::IEEEFloat **)operator new[]();
      v76 = (llvm::detail::IEEEFloat *)this;
      v7 = *((_BYTE *)a2 + 20);
      v9 = *((_DWORD *)a2 + 4);
      v12 = *(_DWORD *)(v11 + 8);
    }
    v13 = v7 & 7;
    v78 = v7 & 0xF;
    v15 = (v7 & 6) != 0 && v13 != 3;
    v16 = v12 - 64;
    if (v13 == 1 || v15)
    {
      v17 = (unint64_t *)&v76;
      if (v16 <= 0xFFFFFF7F)
        v18 = this;
      else
        v18 = &v76;
      v19 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
      v22 = (llvm::detail::IEEEFloat **)*((_QWORD *)a2 + 1);
      v21 = (llvm::detail::IEEEFloat **)((char *)a2 + 8);
      v20 = v22;
      if (v19 >= 0xFFFFFF80)
        v23 = v21;
      else
        v23 = v20;
      if (v12 >= 0xFFFFFFC0)
      {
        v77 = v9 + v10;
LABEL_56:
        v56 = (unint64_t *)((v12 + 64) >> 6);
        v57 = sub_1C5DBBD1C(v17, (v12 + 64) >> 6, v10);
        llvm::APInt::tcShiftRight((llvm::APInt *)v17, v56, v10);
        llvm::detail::IEEEFloat::addSignificand(v4, &v75);
LABEL_84:
        if ((*((_DWORD *)v75 + 2) - 64) <= 0xFFFFFF7F)
        {
          if (v76)
            MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
        }
        return v57;
      }
      v24 = (v12 + 64) >> 6;
      do
      {
        v25 = *v23++;
        *v18++ = v25;
        --v24;
      }
      while (v24);
    }
    v77 = v9 + v10;
    if (v16 <= 0xFFFFFF7F)
      v17 = (unint64_t *)v76;
    else
      v17 = (unint64_t *)&v76;
    goto LABEL_56;
  }
  v49 = v8 - v5;
  *((_DWORD *)this + 4) = v8;
  v50 = *((_DWORD *)*this + 2);
  v51 = (unint64_t *)(this + 1);
  if ((v50 - 64) <= 0xFFFFFF7F)
    v51 = (unint64_t *)*v51;
  v52 = v50 + 64;
  v53 = (unint64_t *)(v52 >> 6);
  v54 = sub_1C5DBBD1C(v51, v52 >> 6, v49);
  llvm::APInt::tcShiftRight((llvm::APInt *)v51, v53, v49);
  llvm::detail::IEEEFloat::addSignificand(v4, (uint64_t **)a2);
  return v54;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  const llvm::detail::IEEEFloat *v7;
  const llvm::detail::IEEEFloat *v8;
  llvm::detail::IEEEFloat *v9;
  llvm::detail::IEEEFloat *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  char v14;

  v2 = *(_QWORD *)this;
  v11 = v2;
  v3 = *(_DWORD *)(v2 + 8);
  v4 = (v3 + 64);
  if (v4 >= 0x80)
  {
    v7 = a2;
    v9 = this;
    v4 = operator new[]();
    a2 = v7;
    this = v9;
    v12 = v4;
    v3 = *(_DWORD *)(v2 + 8);
  }
  v14 = 3;
  v13 = *(_DWORD *)(v2 + 4) - 1;
  if ((v3 - 64) < 0xFFFFFF80)
  {
    *(_QWORD *)v4 = 0;
    v8 = a2;
    v10 = this;
    bzero((void *)(v4 + 8), 8 * (((v3 + 64) >> 6) - 2) + 8);
    a2 = v8;
    this = v10;
  }
  else
  {
    v12 = 0;
  }
  result = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (uint64_t)&v11);
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v12)
    {
      v6 = result;
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divideSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  _QWORD *v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  unint64_t v8;
  llvm::APInt *v9;
  llvm::APInt *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  llvm::APInt *v35;
  llvm::APInt *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)this + 8);
  v5 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (v5 - 64 <= 0xFFFFFF7F)
    v4 = (_QWORD *)*v4;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
    v6 = (char *)a2 + 8;
  else
    v6 = (char *)*((_QWORD *)a2 + 1);
  v7 = v5 + 64;
  v8 = (v5 + 64) >> 6;
  if (v5 + 64 >= 0xC0)
  {
    v9 = (llvm::APInt *)operator new[]();
    v10 = (llvm::APInt *)((char *)v9 + 8 * v8);
LABEL_10:
    v12 = 0;
    if (v8 <= 1)
      v13 = 1;
    else
      v13 = (v5 + 64) >> 6;
    v14 = 8 * v13;
    do
    {
      *(_QWORD *)((char *)v9 + v12) = v4[v12 / 8];
      *(_QWORD *)((char *)v10 + v12) = *(_QWORD *)&v6[v12];
      v4[v12 / 8] = 0;
      v12 += 8;
    }
    while (v14 != v12);
    v11 = *(_DWORD *)(*(_QWORD *)this + 8);
    goto LABEL_16;
  }
  v9 = (llvm::APInt *)v48;
  v10 = (llvm::APInt *)&v48[v8];
  if (v5 <= 0xFFFFFFBF)
    goto LABEL_10;
  v11 = *(_DWORD *)(*(_QWORD *)this + 8);
LABEL_16:
  v15 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 4) = v15;
  v16 = 64 - ((_DWORD)v8 << 6);
  v17 = v8 - 1;
  v18 = v8 - 1;
  while (1)
  {
    v19 = *((_QWORD *)v10 + v18);
    if (v19)
      break;
    v16 += 64;
    if (--v18 == -1)
    {
      v20 = 0;
      goto LABEL_21;
    }
  }
  v20 = (__clz(v19) - v16) ^ 0xFFFFFFC0;
LABEL_21:
  v21 = v11 + v20;
  if (v11 + v20)
  {
    *((_DWORD *)this + 4) = v21 + v15;
    llvm::APInt::tcShiftLeft(v10, (unint64_t *)(v7 >> 6), v21);
  }
  v22 = 64 - ((_DWORD)v8 << 6);
  while (1)
  {
    v23 = *((_QWORD *)v9 + v17);
    if (v23)
      break;
    v22 += 64;
    if (--v17 == -1)
    {
      v24 = 0;
      goto LABEL_28;
    }
  }
  v24 = (__clz(v23) - v22) ^ 0xFFFFFFC0;
LABEL_28:
  v25 = v11 + v24;
  if (v11 + v24)
  {
    *((_DWORD *)this + 4) -= v25;
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), v25);
  }
  v26 = (char *)v10 - 8;
  v27 = 8 * ((v5 + 64) >> 6);
  while (v27)
  {
    v28 = *(_QWORD *)((char *)v9 + v27 - 8);
    v29 = *(_QWORD *)&v26[v27];
    v27 -= 8;
    if (v28 != v29)
    {
      if (v28 <= v29)
      {
        --*((_DWORD *)this + 4);
        llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
      }
      break;
    }
  }
  v30 = 8 * v8;
  if (!v11)
    goto LABEL_49;
  do
  {
    v31 = 8 * v8;
    while (v31)
    {
      v32 = *(_QWORD *)((char *)v9 + v31 - 8);
      v33 = *(_QWORD *)&v26[v31];
      v31 -= 8;
      if (v32 != v33)
      {
        if (v32 <= v33)
        {
          --v11;
          goto LABEL_48;
        }
        break;
      }
    }
    if (v5 <= 0xFFFFFFBF)
    {
      v34 = 0;
      v35 = v9;
      v36 = v10;
      v37 = v7 >> 6;
      do
      {
        v38 = *(_QWORD *)v36;
        v36 = (llvm::APInt *)((char *)v36 + 8);
        v39 = *(_QWORD *)v35 - v38;
        v40 = *(_QWORD *)v35 < v38;
        v41 = *(_QWORD *)v35 + ~v38;
        if (v34)
        {
          v34 = v41 >= *(_QWORD *)v35;
        }
        else
        {
          v41 = v39;
          v34 = v40;
        }
        *(_QWORD *)v35 = v41;
        v35 = (llvm::APInt *)((char *)v35 + 8);
        --v37;
      }
      while (v37);
    }
    --v11;
    v4[v11 >> 6] |= 1 << v11;
LABEL_48:
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
  }
  while (v11);
  do
  {
LABEL_49:
    if (!v30)
    {
      v44 = 2;
      goto LABEL_62;
    }
    v42 = *(_QWORD *)((char *)v9 + v30 - 8);
    v43 = *(_QWORD *)&v26[v30];
    v30 -= 8;
  }
  while (v42 == v43);
  if (v42 > v43)
  {
    v44 = 3;
  }
  else
  {
    if (v5 > 0xFFFFFFBF)
      return 0;
    v45 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v44 = 1;
    }
    else
    {
      while (v8 - 1 != v45)
      {
        if (*((_QWORD *)v9 + ++v45))
          goto LABEL_61;
      }
      v45 = v7 >> 6;
LABEL_61:
      v44 = v45 < v8;
    }
  }
LABEL_62:
  if (v7 >= 0xC0)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17, v25);
  return v44;
}

uint64_t llvm::detail::IEEEFloat::significandLSB(llvm::detail::IEEEFloat *this)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  v1 = (unint64_t *)((char *)this + 8);
  v3 = *(unsigned int *)(v2 + 8);
  if ((v3 - 64) > 0xFFFFFF7F)
  {
    if (v3 > 0xFFFFFFBF)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v1 = (unint64_t *)*v1;
  }
  v4 = 0;
  v5 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    v7 = *v1++;
    v6 = v7;
    if (v7)
      break;
    v4 -= 64;
    if (!--v5)
      return 0xFFFFFFFFLL;
  }
  return __clz(__rbit64(v6)) - v4;
}

void llvm::detail::IEEEFloat::shiftSignificandLeft(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  llvm::APInt *v4;
  uint64_t v5;
  int v6;

  if (a2)
  {
    v5 = *(_QWORD *)this;
    v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    v6 = *(_DWORD *)(v5 + 8);
    if ((v6 - 64) <= 0xFFFFFF7F)
      v4 = *(llvm::APInt **)v4;
    llvm::APInt::tcShiftLeft(v4, (unint64_t *)((v6 + 64) >> 6), a2);
    *((_DWORD *)this + 4) -= a2;
  }
}

uint64_t llvm::detail::IEEEFloat::compareAbsoluteValue(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 < 1)
      return v2 >= 0;
    else
      return 2;
  }
  else
  {
    v4 = *(_QWORD *)this;
    v3 = (_QWORD *)((char *)this + 8);
    v5 = *(_DWORD *)(v4 + 8);
    if ((v5 - 64) <= 0xFFFFFF7F)
      v3 = (_QWORD *)*v3;
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
    v9 = (char *)*((_QWORD *)a2 + 1);
    v7 = (char *)a2 + 8;
    v8 = v9;
    if (v6 >= 0xFFFFFF80)
      v10 = v7;
    else
      v10 = v8;
    v11 = (v5 + 64) >> 6;
    v12 = v10 - 8;
    for (i = 8 * v11; ; i -= 8)
    {
      v14 = i;
      if (!i)
        break;
      v15 = v3[(unint64_t)i / 8 - 1];
      v16 = *(_QWORD *)&v12[i];
      if (v15 != v16)
      {
        if (v15 > v16)
          return 2;
        return v14 == 0;
      }
    }
    return v14 == 0;
  }
}

uint64_t llvm::detail::IEEEFloat::handleOverflow(_DWORD **a1, int a2)
{
  unsigned int v2;
  char v4;
  int *v5;
  unsigned int v6;
  void **v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  switch(a2)
  {
    case 1:
LABEL_2:
      v2 = *((unsigned __int8 *)a1 + 20);
      if ((*a1)[4] == 1)
        llvm::detail::IEEEFloat::makeNaN(a1, 0, (v2 >> 3) & 1, 0);
      else
        *((_BYTE *)a1 + 20) = v2 & 0xF8;
      return 20;
    case 2:
      v4 = *((_BYTE *)a1 + 20);
      if ((v4 & 8) == 0)
        goto LABEL_2;
      break;
    case 3:
      v4 = *((_BYTE *)a1 + 20);
      if ((v4 & 8) != 0)
        goto LABEL_2;
      break;
    case 4:
      goto LABEL_2;
    default:
      v4 = *((_BYTE *)a1 + 20);
      break;
  }
  *((_BYTE *)a1 + 20) = v4 & 0xF8 | 2;
  v5 = *a1;
  *((_DWORD *)a1 + 4) = **a1;
  v6 = v5[2];
  v7 = (void **)(a1 + 1);
  v8 = v6 - 64;
  if (v6 >= 0x40)
  {
    v10 = (char *)(a1 + 1);
    if (v8 <= 0xFFFFFF7F)
      v10 = (char *)*v7;
    v13 = v6 - 65;
    if (v6 >= 0x41)
    {
      memset(v10, 255, 8 * (v13 >> 6) + 8);
      v9 = (v13 >> 6) + 1;
      v11 = v8 - (v13 & 0xFFFFFFC0);
      goto LABEL_12;
    }
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (char *)(a1 + 1);
  }
  v11 = v5[2];
LABEL_12:
  v12 = (v6 + 64) >> 6;
  if (v11)
    *(_QWORD *)&v10[8 * v9++] = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (v9 < v12)
    bzero(&v10[8 * v9], 8 * (v12 + ~v9) + 8);
  if (v5[4] == 1)
  {
    if (v8 <= 0xFFFFFF7F)
      v7 = (void **)*v7;
    *v7 = (void *)((unint64_t)*v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return 16;
}

uint64_t llvm::detail::IEEEFloat::roundAwayFromZero(uint64_t *a1, int a2, int a3, unsigned int a4)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2 == 1)
  {
    if (a3 == 2)
    {
      if ((*((_BYTE *)a1 + 20) & 7) != 3)
      {
        v5 = *a1;
        v4 = a1 + 1;
        if ((*(_DWORD *)(v5 + 8) - 64) <= 0xFFFFFF7F)
          v4 = (_QWORD *)*v4;
        return (v4[a4 >> 6] >> a4) & 1;
      }
    }
    else if (a3 == 3)
    {
      return 1;
    }
    return 0;
  }
  return ((uint64_t (*)(void))((char *)&loc_1C5DBA4E0 + 4 * byte_1C866F0F5[a2]))();
}

void sub_1C5DBA548()
{
  JUMPOUT(0x1C5DBA534);
}

void llvm::detail::IEEEFloat::addOrSubtractSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

void sub_1C5DBA5B0()
{
  sub_1C5DBA5A0();
}

void sub_1C5DBA5B8()
{
  const llvm::detail::IEEEFloat *v0;
  uint64_t v1;
  int v2;
  char v3;

  llvm::detail::IEEEFloat::assign(v1, v0);
  if (v2 != (*((_BYTE *)v0 + 20) & 8) >> 3)
    v3 = 8;
  else
    v3 = 0;
  *(_BYTE *)(v1 + 20) = v3 | *(_BYTE *)(v1 + 20) & 0xF7;
  sub_1C5DBA5A0();
}

void sub_1C5DBA5F4()
{
  const llvm::detail::IEEEFloat *v0;
  _BYTE *v1;
  int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;

  llvm::detail::IEEEFloat::assign((uint64_t)v1, v0);
  if ((v1[20] & 7) == 1 && *(_DWORD *)(*(_QWORD *)v1 + 16) != 1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)v1 + 8);
    v3 = v2 - 64;
    v4 = v1 + 8;
    v5 = v1 + 8;
    if ((v2 - 64) <= 0xFFFFFF7F)
      v5 = (_QWORD *)*v4;
    v6 = v2 - 2;
    v7 = (v2 - 2) >> 6;
    if ((v5[v7] & (1 << v6)) == 0)
    {
      if (v3 <= 0xFFFFFF7F)
        v4 = (_QWORD *)*v4;
      v4[v7] |= 1 << v6;
    }
  }
  sub_1C5DBA5A0();
}

BOOL llvm::detail::IEEEFloat::isSignaling(llvm::detail::IEEEFloat *this)
{
  int v2;
  _QWORD *v3;

  if ((*((_BYTE *)this + 20) & 7) != 1 || *(_DWORD *)(*(_QWORD *)this + 16) == 1)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)this + 8);
  v3 = (_QWORD *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F)
    v3 = (_QWORD *)*v3;
  return ((v3[(v2 - 2) >> 6] >> (v2 - 2)) & 1) == 0;
}

_QWORD *llvm::detail::IEEEFloat::makeQuiet(_QWORD *this)
{
  int v1;
  _QWORD *v2;

  if (*(_DWORD *)(*this + 16) != 1)
  {
    v1 = *(_DWORD *)(*this + 8);
    v2 = this + 1;
    if ((v1 - 64) <= 0xFFFFFF7F)
      v2 = (_QWORD *)*v2;
    v2[(v1 - 2) >> 6] |= 1 << (v1 - 2);
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::multiplySpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v2;

  v2 = 4 * (*((_BYTE *)this + 20) & 7) + (*((_BYTE *)a2 + 20) & 7u);
  if ((_DWORD)v2 != 10)
    __asm { BR              X12 }
  return 0;
}

void sub_1C5DBA838(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = a1 & 0xF8 | 3;
  JUMPOUT(0x1C5DBA80CLL);
}

void sub_1C5DBA84C()
{
  int **v0;

  llvm::detail::IEEEFloat::makeNaN(v0, 0, 0, 0);
  JUMPOUT(0x1C5DBA80CLL);
}

void sub_1C5DBA868()
{
  const llvm::detail::IEEEFloat *v0;
  _BYTE *v1;
  char v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;

  llvm::detail::IEEEFloat::assign((uint64_t)v1, v0);
  v2 = v1[20] & 0xF7;
  v1[20] = v2;
  v1[20] = *((_BYTE *)v0 + 20) & 8 ^ v2;
  if ((v2 & 7) == 1 && *(_DWORD *)(*(_QWORD *)v1 + 16) != 1)
  {
    v3 = *(_DWORD *)(*(_QWORD *)v1 + 8);
    v4 = v3 - 64;
    v5 = v1 + 8;
    v6 = v1 + 8;
    if ((v3 - 64) <= 0xFFFFFF7F)
      v6 = (_QWORD *)*v5;
    v7 = v3 - 2;
    v8 = (v3 - 2) >> 6;
    if ((v6[v8] & (1 << v7)) == 0)
    {
      if (v4 <= 0xFFFFFF7F)
        v5 = (_QWORD *)*v5;
      v5[v8] |= 1 << v7;
      JUMPOUT(0x1C5DBA860);
    }
  }
  if ((*((_BYTE *)v0 + 20) & 7) == 1 && *(_DWORD *)(*(_QWORD *)v0 + 16) != 1)
    JUMPOUT(0x1C5DBA80CLL);
  JUMPOUT(0x1C5DBA808);
}

uint64_t llvm::detail::IEEEFloat::divideSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0;
  v4 = 4 * (*((_BYTE *)this + 20) & 7) + (*((_BYTE *)a2 + 20) & 7u);
  if ((_DWORD)v4 != 10)
    __asm { BR              X12 }
  return result;
}

void sub_1C5DBA9C4()
{
  int **v0;

  llvm::detail::IEEEFloat::makeNaN(v0, 0, 0, 0);
  JUMPOUT(0x1C5DBA99CLL);
}

void sub_1C5DBA9E0(unsigned int a1@<W8>)
{
  uint64_t v1;

  if (*(_DWORD *)(*(_QWORD *)v1 + 16) == 1)
    llvm::detail::IEEEFloat::makeNaN((int **)v1, 0, (a1 >> 3) & 1, 0);
  else
    *(_BYTE *)(v1 + 20) = a1 & 0xF8;
  JUMPOUT(0x1C5DBA99CLL);
}

uint64_t llvm::detail::IEEEFloat::changeSign(uint64_t this)
{
  *(_BYTE *)(this + 20) ^= 8u;
  return this;
}

void llvm::detail::IEEEFloat::addOrSubtract(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3, int a4)
{
  int v8;
  int v9;
  char v10;
  char v11;

  llvm::detail::IEEEFloat::addOrSubtractSpecials(a1, a2);
  if (v8 == 2)
  {
    v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat **)a1, a2, a4);
    llvm::detail::IEEEFloat::normalize(a1, a3, v9);
  }
  v10 = *((_BYTE *)a1 + 20);
  if ((v10 & 7) == 3)
  {
    v11 = *((_BYTE *)a2 + 20);
    if ((v11 & 7) != 3 || a4 != ((v11 ^ v10) & 8) >> 3)
      *((_BYTE *)a1 + 20) = v10 & 0xF7 | (8 * (a3 == 3));
  }
}

void llvm::detail::IEEEFloat::add(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  llvm::detail::IEEEFloat::addOrSubtract(a1, a2, a3, 0);
}

void llvm::detail::IEEEFloat::subtract(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  llvm::detail::IEEEFloat::addOrSubtract(a1, a2, a3, 1);
}

uint64_t llvm::detail::IEEEFloat::multiply(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  uint64_t result;
  int v8;

  *((_BYTE *)a1 + 20) ^= *((_BYTE *)a2 + 20) & 8;
  result = llvm::detail::IEEEFloat::multiplySpecials(a1, a2);
  if ((*((_BYTE *)a1 + 20) & 6) != 0 && (*((_BYTE *)a1 + 20) & 7) != 3)
  {
    v8 = llvm::detail::IEEEFloat::multiplySignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(a1, a3, v8);
    if (v8)
      return result | 0x10;
    else
      return result;
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divide(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  uint64_t result;
  int v8;

  *((_BYTE *)a1 + 20) ^= *((_BYTE *)a2 + 20) & 8;
  result = llvm::detail::IEEEFloat::divideSpecials(a1, a2);
  if ((*((_BYTE *)a1 + 20) & 6) != 0 && (*((_BYTE *)a1 + 20) & 7) != 3)
  {
    v8 = llvm::detail::IEEEFloat::divideSignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(a1, a3, v8);
    if (v8)
      return result | 0x10;
    else
      return result;
  }
  return result;
}

_QWORD *llvm::detail::IEEEFloat::remainder(__int128 **this, const llvm::detail::IEEEFloat *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  int v8;
  _BOOL4 v10;
  uint64_t v12;
  _QWORD *v13;
  const llvm::detail::IEEEFloat *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  int v22;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  _BOOL4 v39;
  uint64_t v40;
  _QWORD *v41;
  llvm::detail::IEEEFloat *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  int v55;
  _QWORD *v56;
  int v57;
  _QWORD *v58;
  char v59;
  int v60;
  char v61;
  char v62;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  char v71;
  __int128 v72;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  char v82;

  v4 = *((_BYTE *)this + 20);
  llvm::detail::IEEEFloat::remainderSpecials((llvm::detail::IEEEFloat *)this, a2);
  v6 = v5;
  if ((_DWORD)v5 != 2)
    return v6;
  v79 = *(_QWORD *)a2;
  if ((*(_DWORD *)(v79 + 8) + 64) >= 0x80)
  {
    v5 = (_QWORD *)operator new[]();
    v80 = v5;
  }
  v7 = *((_BYTE *)a2 + 20);
  v8 = v7 & 7;
  v82 = v7 & 0xF;
  v81 = *((_DWORD *)a2 + 4);
  v10 = (v7 & 6) != 0 && v8 != 3;
  if (v8 == 1 || v10)
  {
    v12 = *(unsigned int *)(v79 + 8);
    v13 = (v12 - 64) <= 0xFFFFFF7F ? v5 : &v80;
    v14 = (*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80
        ? (const llvm::detail::IEEEFloat *)((char *)a2 + 8)
        : (const llvm::detail::IEEEFloat *)*((_QWORD *)a2 + 1);
    if (v12 <= 0xFFFFFFBF)
    {
      v15 = (unint64_t)(v12 + 64) >> 6;
      do
      {
        v16 = *(_QWORD *)v14;
        v14 = (const llvm::detail::IEEEFloat *)((char *)v14 + 8);
        *v13++ = v16;
        --v15;
      }
      while (v15);
    }
  }
  llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)&v79, a2, 1, 0);
  if (!v17)
    llvm::detail::IEEEFloat::mod((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v79);
  v18 = *(_QWORD *)a2;
  v75 = v18;
  if ((*(_DWORD *)(v18 + 8) + 64) >= 0x80)
    v76 = (uint64_t *)operator new[]();
  v19 = *((_BYTE *)a2 + 20);
  v20 = v19 & 7;
  v21 = v78 & 0xF0 | v19 & 0xF;
  v78 = v21;
  v22 = *((_DWORD *)a2 + 4);
  v77 = v22;
  v24 = (v19 & 6) != 0 && v20 != 3;
  if (v20 == 1 || v24)
  {
    v25 = *(unsigned int *)(v18 + 8);
    v26 = (v25 - 64) <= 0xFFFFFF7F ? v76 : (uint64_t *)&v76;
    v27 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
    v30 = (char *)*((_QWORD *)a2 + 1);
    v29 = (char *)a2 + 8;
    v28 = v30;
    v31 = v27 >= 0xFFFFFF80 ? v29 : v28;
    if (v25 <= 0xFFFFFFBF)
    {
      v32 = (unint64_t)(v25 + 64) >> 6;
      do
      {
        v33 = *(_QWORD *)v31;
        v31 += 8;
        *v26++ = v33;
        --v32;
      }
      while (v32);
      v21 = v78;
    }
  }
  v78 = v21 & 0xF7;
  v34 = *((_BYTE *)this + 20) & 0xF7;
  *((_BYTE *)this + 20) = v34;
  v35 = (uint64_t)*this;
  v36 = *((_DWORD *)*this + 4);
  v72 = **this;
  *(int32x2_t *)&v72 = vadd_s32(*(int32x2_t *)&v72, (int32x2_t)0xFFFFFFFF00000001);
  v73 = v36;
  DWORD2(v72) += 2;
  v68 = v35;
  if ((*(_DWORD *)(v35 + 8) + 64) >= 0x80)
  {
    v69 = (_QWORD *)operator new[]();
    v34 = *((_BYTE *)this + 20);
  }
  v37 = v34 & 7;
  v71 = v71 & 0xF0 | v34 & 0xF;
  v70 = *((_DWORD *)this + 4);
  v39 = (v34 & 6) != 0 && v37 != 3;
  if (v37 == 1 || v39)
  {
    v40 = *(unsigned int *)(v35 + 8);
    v41 = (v40 - 64) <= 0xFFFFFF7F ? v69 : &v69;
    v42 = (*((_DWORD *)*this + 2) - 64) >= 0xFFFFFF80
        ? (llvm::detail::IEEEFloat *)(this + 1)
        : (llvm::detail::IEEEFloat *)this[1];
    if (v40 <= 0xFFFFFFBF)
    {
      v43 = (unint64_t)(v40 + 64) >> 6;
      do
      {
        v44 = *(_QWORD *)v42;
        v42 = (llvm::detail::IEEEFloat *)((char *)v42 + 8);
        *v41++ = v44;
        --v43;
      }
      while (v43);
    }
  }
  llvm::detail::IEEEFloat::convert(&v68, (uint64_t)&v72, 1, &v74);
  v64 = v18;
  if ((*(_DWORD *)(v18 + 8) + 64) >= 0x80)
    v65 = operator new[]();
  v45 = v21 & 7;
  v67 = v67 & 0xF0 | v21 & 7;
  v66 = v22;
  v47 = (v21 & 6) != 0 && v45 != 3;
  if (v45 == 1 || v47)
  {
    v48 = *(unsigned int *)(v18 + 8);
    if ((v48 - 64) <= 0xFFFFFF7F)
    {
      v49 = (uint64_t *)v65;
      v50 = v76;
LABEL_75:
      v51 = (unint64_t)(v48 + 64) >> 6;
      do
      {
        v52 = *v50++;
        *v49++ = v52;
        --v51;
      }
      while (v51);
      goto LABEL_77;
    }
    if (v48 <= 0xFFFFFFBF)
    {
      v49 = &v65;
      v50 = (uint64_t *)&v76;
      goto LABEL_75;
    }
  }
LABEL_77:
  v53 = v4 & 8;
  llvm::detail::IEEEFloat::convert(&v64, (uint64_t)&v72, 1, &v74);
  llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v68, 1, 0);
  v6 = v54;
  llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64);
  if (v55 == 2)
  {
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v75, 1, 1);
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64, 1, 1);
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64, 1, 1);
    v6 = v56;
    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64);
    if ((v57 - 1) <= 1)
    {
      llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v75, 1, 1);
      v6 = v58;
    }
  }
  v59 = *((_BYTE *)this + 20);
  v60 = v59 & 7;
  v61 = v59 ^ v53;
  v62 = v59 & 0xF7 | v53;
  if (v60 != 3)
    v62 = v61;
  *((_BYTE *)this + 20) = v62;
  if ((*(_DWORD *)(v64 + 8) - 64) <= 0xFFFFFF7F && v65)
    MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
  if ((*(_DWORD *)(v68 + 8) - 64) <= 0xFFFFFF7F && v69)
    MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
  if ((*(_DWORD *)(v18 + 8) - 64) <= 0xFFFFFF7F && v76)
    MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
  if ((*(_DWORD *)(v79 + 8) - 64) <= 0xFFFFFF7F && v80)
    MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
  return v6;
}

uint64_t llvm::detail::ilogb(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *((_BYTE *)this + 20) & 7;
  if (v2 == 3)
    return 2147483649;
  if ((*((_BYTE *)this + 20) & 7) == 0)
    return 0x7FFFFFFFLL;
  if (v2 == 1)
    return 0x80000000;
  if (!llvm::detail::IEEEFloat::isDenormal(this))
    return *((unsigned int *)this + 4);
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v7, (uint64_t **)this);
  v5 = *(_DWORD *)(*(_QWORD *)this + 8) - 1;
  v9 += v5;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v7, 1, 0);
  v6 = (v9 - v5);
  if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  return v6;
}

uint64_t llvm::detail::scalbn@<X0>(_DWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = **(_DWORD **)a1 + *(_DWORD *)(*(_QWORD *)a1 + 8) + ~*(_DWORD *)(*(_QWORD *)a1 + 4);
  v7 = -2 - v6;
  if (-2 - v6 <= a2)
    v7 = a2;
  if (v6 + 1 < v7)
    v8 = v6 + 1;
  else
    v8 = v7;
  a1[4] += v8;
  result = llvm::detail::IEEEFloat::normalize((llvm::APInt *)a1, a3, 0);
  v10 = *((_BYTE *)a1 + 20);
  v11 = *(_QWORD *)a1;
  if ((v10 & 7) == 1 && *(_DWORD *)(v11 + 16) != 1)
  {
    v12 = *(_DWORD *)(v11 + 8);
    v13 = a1 + 2;
    if ((v12 - 64) <= 0xFFFFFF7F)
      v13 = (_QWORD *)*v13;
    v13[(v12 - 2) >> 6] |= 1 << (v12 - 2);
    v10 = *((_BYTE *)a1 + 20);
  }
  v14 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v14;
  *(_DWORD *)(a4 + 16) = a1[4];
  *(_BYTE *)(a4 + 20) = *(_BYTE *)(a4 + 20) & 0xF0 | v10 & 0xF;
  *(_QWORD *)a1 = &unk_1C866F210;
  return result;
}

void llvm::detail::IEEEFloat::fusedMultiplyAdd(llvm::detail::IEEEFloat **this, const llvm::detail::IEEEFloat *a2, const llvm::detail::IEEEFloat *a3, int a4)
{
  unsigned __int8 *v6;
  char v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  llvm::detail::IEEEFloat *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  const llvm::detail::IEEEFloat *v26;
  uint64_t v27;
  llvm::detail::IEEEFloat *v28;
  int v29;
  char v30;

  v6 = (unsigned __int8 *)this;
  v7 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = *((_BYTE *)a2 + 20) & 8 ^ v7;
  v8 = v7 & 6;
  v9 = v7 & 7;
  if (v8)
    v10 = v9 == 3;
  else
    v10 = 1;
  if (v10
    || ((*((_BYTE *)a2 + 20) & 6) != 0 ? (v11 = (*((_BYTE *)a2 + 20) & 7) == 3) : (v11 = 1),
        v11 || (v12 = *((_BYTE *)a3 + 20), (v12 & 6) == 0)))
  {
    if (!llvm::detail::IEEEFloat::multiplySpecials((llvm::detail::IEEEFloat *)this, a2))
      llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)v6, a3, a4, 0);
  }
  else
  {
    v13 = *(_QWORD *)a3;
    v27 = v13;
    if ((*(_DWORD *)(v13 + 8) + 64) >= 0x80)
    {
      v26 = a2;
      this = (llvm::detail::IEEEFloat **)operator new[]();
      a2 = v26;
      v28 = (llvm::detail::IEEEFloat *)this;
      v12 = *((_BYTE *)a3 + 20);
      v14 = (v12 & 6) != 0;
    }
    else
    {
      v14 = 1;
    }
    v15 = v12 & 7;
    v30 = v12 & 0xF;
    v29 = *((_DWORD *)a3 + 4);
    v16 = v15 != 3 && v14;
    if (v15 == 1 || v16)
    {
      v17 = *(unsigned int *)(v13 + 8);
      v18 = (llvm::detail::IEEEFloat *)((v17 - 64) <= 0xFFFFFF7F ? this : &v28);
      v19 = (*(_DWORD *)(*(_QWORD *)a3 + 8) - 64) >= 0xFFFFFF80
          ? (uint64_t *)((char *)a3 + 8)
          : (uint64_t *)*((_QWORD *)a3 + 1);
      if (v17 <= 0xFFFFFFBF)
      {
        v20 = (unint64_t)(v17 + 64) >> 6;
        do
        {
          v21 = *v19++;
          *(_QWORD *)v18 = v21;
          v18 = (llvm::detail::IEEEFloat *)((char *)v18 + 8);
          --v20;
        }
        while (v20);
      }
    }
    v22 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)v6, (uint64_t)a2, (uint64_t)&v27);
    if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F && v28)
      MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    v23 = llvm::detail::IEEEFloat::normalize((llvm::APInt *)v6, a4, v22);
    if (v22)
      v23 |= 0x10u;
    v24 = v6[20];
    if ((v24 & 7) == 3 && (v23 & 8) == 0 && ((*((unsigned __int8 *)a3 + 20) ^ v24) & 8) != 0)
      v6[20] = v24 & 0xF7 | (8 * (a4 == 3));
  }
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt(llvm::APInt *this, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t *v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  const unint64_t *v19;
  llvm::APInt *v20;
  const unint64_t *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;

  v8 = *(unsigned int *)(a2 + 8);
  v9 = v8 + 63;
  v10 = (unint64_t)(v8 + 63) >> 6;
  v32 = *(_DWORD *)(a2 + 8);
  if (v8 > 0x40)
  {
    v11 = operator new[]();
    memcpy((void *)v11, *(const void **)a2, (v9 >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v11 = *(_QWORD *)a2;
  }
  v31 = v11;
  v12 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = v12 & 0xF7;
  if (!a3)
    goto LABEL_4;
  v26 = (void **)(v11 + 8 * ((v8 - 1) >> 6));
  if (v8 < 0x41)
    v26 = (void **)&v31;
  if ((((unint64_t)*v26 >> (v8 - 1)) & 1) != 0)
  {
    *((_BYTE *)this + 20) = v12 | 8;
    v30 = v8;
    if (v8 > 0x40)
    {
      v29 = (void *)operator new[]();
      memcpy(v29, (const void *)v11, (v9 >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v29);
    }
    else
    {
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      if (!(_DWORD)v8)
        v27 = 0;
      v29 = (void *)(v27 & ~v11);
    }
    llvm::APInt::operator++((uint64_t)&v29);
    v13 = v30;
    v28 = (uint64_t)v29;
    v30 = 0;
    if (v8 > 0x40 && v11)
    {
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
      v31 = v28;
      v32 = v13;
      if (v30 >= 0x41 && v29)
        MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
    else
    {
      v31 = (uint64_t)v29;
      v32 = v13;
    }
    v11 = v28;
  }
  else
  {
LABEL_4:
    v13 = v8;
  }
  if (v13 >= 0x41)
    v14 = (unint64_t *)v11;
  else
    v14 = (unint64_t *)&v31;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
  v15 = 64 - ((_DWORD)v10 << 6);
  v16 = v10 - 1;
  do
  {
    v17 = v14[v16];
    if (v17)
    {
      v18 = (__clz(v17) - v15) ^ 0x3F;
      goto LABEL_11;
    }
    v15 += 64;
    --v16;
  }
  while (v16 != -1);
  v18 = -1;
LABEL_11:
  v19 = (const unint64_t *)(v18 + 1);
  v20 = (llvm::APInt *)((char *)this + 8);
  v21 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)this + 8);
  if (((_DWORD)v21 - 64) <= 0xFFFFFF7F)
    v20 = *(llvm::APInt **)v20;
  v22 = (_DWORD)v19 - (_DWORD)v21;
  if (v19 >= v21)
  {
    *((_DWORD *)this + 4) = v18;
    v23 = sub_1C5DBBD1C(v14, v10, (int)v19 - (int)v21);
    llvm::APInt::tcExtract(v20, (unint64_t *)(((_DWORD)v21 + 64) >> 6), (uint64_t)v14, v21, v22);
  }
  else
  {
    *((_DWORD *)this + 4) = (_DWORD)v21 - 1;
    llvm::APInt::tcExtract(v20, (unint64_t *)(((_DWORD)v21 + 64) >> 6), (uint64_t)v14, v19, 0);
    v23 = 0;
  }
  v24 = llvm::detail::IEEEFloat::normalize(this, a4, v23);
  if (v13 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  return v24;
}

uint64_t llvm::detail::IEEEFloat::convertToSignExtendedInteger(unint64_t **a1, llvm::APInt *this, uint64_t a3, unsigned int a4, int a5, int a6, _BYTE *a7)
{
  unsigned int v7;
  uint64_t result;
  llvm::APInt *v11;
  unsigned int v13;
  unint64_t *v14;
  int v15;
  unint64_t **v17;
  const unint64_t *v18;
  unint64_t *v19;
  unsigned int v20;
  const unint64_t *v21;
  unint64_t *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unint64_t *v29;
  char *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  llvm::APInt *v42;
  unint64_t *v43;
  char *v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;

  *a7 = 0;
  v7 = *((_BYTE *)a1 + 20) & 7;
  if (v7 < 2)
    return 1;
  v11 = this;
  v13 = a4 + 63;
  v14 = (unint64_t *)((a4 + 63) >> 6);
  if (v7 == 3)
  {
    *(_QWORD *)this = 0;
    if (v13 >= 0x80)
      bzero((char *)this + 8, 8 * ((_DWORD)v14 - 2) + 8);
    LOBYTE(v15) = ((*((unsigned __int8 *)a1 + 20) >> 3) & 1) == 0;
    goto LABEL_7;
  }
  v17 = a1 + 1;
  v18 = (const unint64_t *)*((unsigned int *)*a1 + 2);
  v19 = (unint64_t *)(a1 + 1);
  if (((_DWORD)v18 - 64) <= 0xFFFFFF7F)
    v19 = *v17;
  v20 = *((_DWORD *)a1 + 4);
  if ((v20 & 0x80000000) != 0)
  {
    v50 = a5;
    *(_QWORD *)this = 0;
    if (v13 >= 0x80)
    {
      v49 = v13;
      v47 = (int)v18;
      bzero((char *)this + 8, 8 * ((_DWORD)v14 - 2) + 8);
      LODWORD(v18) = v47;
      v13 = v49;
    }
    v24 = (_DWORD)v18 + ~v20;
    if (!v24)
      goto LABEL_14;
    goto LABEL_18;
  }
  if (v20 >= a4)
    return 1;
  v48 = v13;
  v50 = a5;
  v21 = (const unint64_t *)(v20 + 1);
  v23 = (unint64_t *)(v13 >> 6);
  v24 = (_DWORD)v18 - (_DWORD)v21;
  if (v18 <= v21)
  {
    llvm::APInt::tcExtract(this, v23, (uint64_t)v19, v18, 0);
    llvm::APInt::tcShiftLeft(v11, v14, (_DWORD)v21 - *((_DWORD *)*a1 + 2));
    goto LABEL_34;
  }
  llvm::APInt::tcExtract(this, v23, (uint64_t)v19, v21, v24);
  v13 = v48;
  if (v24)
  {
LABEL_18:
    v48 = v13;
    v26 = *((_DWORD *)*a1 + 2);
    v27 = sub_1C5DBBD1C(v19, (v26 + 64) >> 6, v24);
    if (v27)
    {
      if (a6 != 1)
        __asm { BR              X11 }
      if (v27 != 2)
      {
        v13 = v48;
        v25 = v50;
        if (v27 == 3)
        {
LABEL_25:
          if (v13 < 0x40)
            return 1;
          if (__CFADD__((*(_QWORD *)v11)++, 1))
          {
            v29 = 0;
            v30 = (char *)v11 + 8;
            while ((unint64_t *)((char *)v14 - 1) != v29)
            {
              v31 = *(_QWORD *)&v30[8 * (_QWORD)v29];
              *(_QWORD *)&v30[8 * (_QWORD)v29] = v31 + 1;
              v29 = (unint64_t *)((char *)v29 + 1);
              if (v31 != -1)
              {
                if (v29 >= v14)
                  return 1;
                goto LABEL_37;
              }
            }
            return 1;
          }
        }
LABEL_37:
        v15 = 0;
        goto LABEL_38;
      }
      if ((*((_BYTE *)a1 + 20) & 7) != 3)
      {
        if ((v26 - 64) <= 0xFFFFFF7F)
          v17 = (unint64_t **)*v17;
        v13 = v48;
        v25 = v50;
        if ((((unint64_t)v17[v24 >> 6] >> v24) & 1) != 0)
          goto LABEL_25;
        goto LABEL_37;
      }
      v15 = 0;
LABEL_35:
      v13 = v48;
      v25 = v50;
      goto LABEL_38;
    }
LABEL_34:
    v15 = 1;
    goto LABEL_35;
  }
LABEL_14:
  v15 = 1;
  v25 = v50;
LABEL_38:
  v32 = 64 - ((_DWORD)v14 << 6);
  v33 = (_DWORD)v14 - 1;
  while (1)
  {
    v34 = *((_QWORD *)v11 + v33);
    if (v34)
      break;
    v32 += 64;
    if (--v33 == -1)
    {
      v35 = -1;
      goto LABEL_43;
    }
  }
  v35 = (__clz(v34) - v32) ^ 0x3F;
LABEL_43:
  v36 = v35 + 1;
  if ((*((_BYTE *)a1 + 20) & 8) == 0)
  {
    if (v36 < (v25 ^ 1) + a4)
    {
      result = 16;
    }
    else
    {
      v15 = 0;
      result = 1;
    }
    if (v15 == 1)
      goto LABEL_7;
    return result;
  }
  if ((v25 & 1) == 0)
  {
    if (v35 == -1)
      goto LABEL_62;
    return 1;
  }
  if (v36 == a4)
  {
    if (v13 < 0x40)
    {
LABEL_55:
      v41 = -1;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t *)v11;
      while (1)
      {
        v40 = *v38++;
        v39 = v40;
        if (v40)
          break;
        v37 -= 64;
        if (!(((unint64_t)v14 << 6) + v37))
          goto LABEL_55;
      }
      v41 = __clz(__rbit64(v39)) - v37;
    }
    if (v41 != v35)
      return 1;
    goto LABEL_62;
  }
  if (v36 > a4)
    return 1;
LABEL_62:
  if (v13 >= 0x40)
  {
    v42 = v11;
    v43 = v14;
    do
    {
      *(_QWORD *)v42 = ~*(_QWORD *)v42;
      v42 = (llvm::APInt *)((char *)v42 + 8);
      v43 = (unint64_t *)((char *)v43 - 1);
    }
    while (v43);
    v44 = (char *)v14 - 1;
    do
    {
      v45 = *(_QWORD *)v11 + 1;
      *(_QWORD *)v11 = v45;
      v11 = (llvm::APInt *)((char *)v11 + 8);
      if (v45)
        v46 = 1;
      else
        v46 = v44 == 0;
      --v44;
    }
    while (!v46);
  }
  if ((v15 & 1) != 0)
  {
    LOBYTE(v15) = 1;
LABEL_7:
    result = 0;
    *a7 = v15;
    return result;
  }
  return 16;
}

uint64_t sub_1C5DBBD1C(unint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  if (!a2)
    return 0;
  v3 = 0;
  v4 = a1;
  while (1)
  {
    v6 = *v4++;
    v5 = v6;
    if (v6)
      break;
    v3 -= 64;
    if (!(((unint64_t)a2 << 6) + v3))
      return 0;
  }
  v7 = __clz(__rbit64(v5));
  if (v7 - (int)v3 >= a3)
    return 0;
  if (v7 - a3 + 1 == (_DWORD)v3)
    return 2;
  if (a3 <= a2 << 6 && ((a1[(a3 - 1) >> 6] >> (a3 - 1)) & 1) != 0)
    return 3;
  return 1;
}

uint64_t llvm::detail::IEEEFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, unsigned int a4, int a5, int a6, _BYTE *a7)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v11 = llvm::detail::IEEEFloat::convertToSignExtendedInteger((unint64_t **)a1, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)v11 != 1)
    return v11;
  v12 = (a4 + 63) >> 6;
  if ((*(_BYTE *)(a1 + 20) & 7) != 1)
  {
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    {
      v13 = 0;
      LOBYTE(v14) = a5;
      if (!a5)
        goto LABEL_10;
    }
    else
    {
      v14 = a4 - a5;
      v15 = a4 - a5 - 65;
      if (a4 - a5 < 0x41)
      {
        v13 = 0;
        if (!v14)
          goto LABEL_10;
      }
      else
      {
        memset(a2, 255, 8 * (v15 >> 6) + 8);
        v13 = (v15 >> 6) + 1;
        v16 = v14 - (v15 & 0xFFFFFFC0);
        LOBYTE(v14) = v16 - 64;
        if (v16 == 64)
          goto LABEL_10;
      }
    }
    *((_QWORD *)a2 + v13++) = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    goto LABEL_10;
  }
  v13 = 0;
LABEL_10:
  if (v13 < v12)
    bzero((char *)a2 + 8 * v13, 8 * (v12 + ~v13) + 8);
  if ((*(_BYTE *)(a1 + 20) & 8) != 0 && a5)
    llvm::APInt::tcShiftLeft(a2, (unint64_t *)((a4 + 63) >> 6), a4 - 1);
  return v11;
}

uint64_t llvm::detail::IEEEFloat::convertFromUnsignedParts(llvm::APInt *this, unint64_t *a2, unsigned int a3, int a4)
{
  int v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  const unint64_t *v11;
  llvm::APInt *v12;
  const unint64_t *v13;
  unsigned int v14;
  int v15;

  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
  v7 = 64 - (a3 << 6);
  v8 = a3 - 1;
  do
  {
    v9 = a2[v8];
    if (v9)
    {
      v10 = (__clz(v9) - v7) ^ 0x3F;
      goto LABEL_4;
    }
    v7 += 64;
    --v8;
  }
  while (v8 != -1);
  v10 = -1;
LABEL_4:
  v11 = (const unint64_t *)(v10 + 1);
  v12 = (llvm::APInt *)((char *)this + 8);
  v13 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)this + 8);
  if (((_DWORD)v13 - 64) <= 0xFFFFFF7F)
    v12 = *(llvm::APInt **)v12;
  v14 = (_DWORD)v11 - (_DWORD)v13;
  if (v11 >= v13)
  {
    *((_DWORD *)this + 4) = v10;
    v15 = sub_1C5DBBD1C(a2, a3, (int)v11 - (int)v13);
    llvm::APInt::tcExtract(v12, (unint64_t *)(((_DWORD)v13 + 64) >> 6), (uint64_t)a2, v13, v14);
  }
  else
  {
    *((_DWORD *)this + 4) = (_DWORD)v13 - 1;
    llvm::APInt::tcExtract(v12, (unint64_t *)(((_DWORD)v13 + 64) >> 6), (uint64_t)a2, v11, 0);
    v15 = 0;
  }
  return llvm::detail::IEEEFloat::normalize(this, a4, v15);
}

uint64_t llvm::detail::IEEEFloat::convertFromSignExtendedInteger(llvm::APInt *this, void *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  const unint64_t *v14;
  llvm::APInt *v15;
  const unint64_t *v16;
  unsigned int v17;
  int v18;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  int v30;
  const unint64_t *v31;
  llvm::APInt *v32;
  const unint64_t *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;

  if (a4 && (v9 = a3 - 1, (*((_QWORD *)a2 + ((a3 - 1) & 0x3FFFFFF)) & 0x8000000000000000) != 0))
  {
    *((_BYTE *)this + 20) |= 8u;
    v20 = (unint64_t *)operator new[]();
    v21 = v20;
    if (a3)
    {
      memcpy(v20, a2, 8 * a3);
      v22 = v21;
      v23 = a3;
      do
      {
        *v22 = ~*v22;
        ++v22;
        --v23;
      }
      while (v23);
      v24 = a3 - 1;
      v25 = (uint64_t *)v21;
      do
      {
        v26 = *v25 + 1;
        *v25++ = v26;
        if (v26)
          v27 = 1;
        else
          v27 = v24 == 0;
        --v24;
      }
      while (!v27);
    }
    *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
    v28 = 64 - (a3 << 6);
    while (1)
    {
      v29 = v21[v9];
      if (v29)
        break;
      v28 += 64;
      if (--v9 == -1)
      {
        v30 = -1;
        goto LABEL_27;
      }
    }
    v30 = (__clz(v29) - v28) ^ 0x3F;
LABEL_27:
    v31 = (const unint64_t *)(v30 + 1);
    v32 = (llvm::APInt *)((char *)this + 8);
    v33 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)this + 8);
    if (((_DWORD)v33 - 64) <= 0xFFFFFF7F)
      v32 = *(llvm::APInt **)v32;
    v34 = (_DWORD)v31 - (_DWORD)v33;
    if (v31 >= v33)
    {
      *((_DWORD *)this + 4) = v30;
      v35 = sub_1C5DBBD1C(v21, a3, (int)v31 - (int)v33);
      llvm::APInt::tcExtract(v32, (unint64_t *)(((_DWORD)v33 + 64) >> 6), (uint64_t)v21, v33, v34);
    }
    else
    {
      *((_DWORD *)this + 4) = (_DWORD)v33 - 1;
      llvm::APInt::tcExtract(v32, (unint64_t *)(((_DWORD)v33 + 64) >> 6), (uint64_t)v21, v31, 0);
      v35 = 0;
    }
    v36 = llvm::detail::IEEEFloat::normalize(this, a5, v35);
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    return v36;
  }
  else
  {
    *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | 2;
    v10 = 64 - (a3 << 6);
    v11 = a3 - 1;
    while (1)
    {
      v12 = *((_QWORD *)a2 + v11);
      if (v12)
        break;
      v10 += 64;
      if (--v11 == -1)
      {
        v13 = -1;
        goto LABEL_8;
      }
    }
    v13 = (__clz(v12) - v10) ^ 0x3F;
LABEL_8:
    v14 = (const unint64_t *)(v13 + 1);
    v15 = (llvm::APInt *)((char *)this + 8);
    v16 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)this + 8);
    if (((_DWORD)v16 - 64) <= 0xFFFFFF7F)
      v15 = *(llvm::APInt **)v15;
    v17 = (_DWORD)v14 - (_DWORD)v16;
    if (v14 >= v16)
    {
      *((_DWORD *)this + 4) = v13;
      v18 = sub_1C5DBBD1C((unint64_t *)a2, a3, (int)v14 - (int)v16);
      llvm::APInt::tcExtract(v15, (unint64_t *)(((_DWORD)v16 + 64) >> 6), (uint64_t)a2, v16, v17);
    }
    else
    {
      *((_DWORD *)this + 4) = (_DWORD)v16 - 1;
      llvm::APInt::tcExtract(v15, (unint64_t *)(((_DWORD)v16 + 64) >> 6), (uint64_t)a2, v14, 0);
      v18 = 0;
    }
    return llvm::detail::IEEEFloat::normalize(this, a5, v18);
  }
}

uint64_t llvm::detail::IEEEFloat::convertFromZeroExtendedInteger(llvm::APInt *a1, uint64_t *a2, unsigned int a3, char a4, int a5)
{
  unsigned int v10;
  char v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  unint64_t *p_src;
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  const unint64_t *v22;
  llvm::APInt *v23;
  const unint64_t *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  void *v29;
  unsigned int v30;
  void *__src;
  unsigned int v32;

  v10 = (a3 + 63) >> 6;
  v32 = a3;
  llvm::APInt::initFromArray((unsigned int *)&__src, a2, v10);
  v11 = *((_BYTE *)a1 + 20);
  *((_BYTE *)a1 + 20) = v11 & 0xF7;
  if ((a4 & 1) == 0)
  {
    v15 = v32;
LABEL_9:
    v16 = __src;
    goto LABEL_17;
  }
  v12 = v32;
  if ((((unint64_t)a2[(a3 - 1) >> 6] >> (a3 - 1)) & 1) == 0)
  {
    v15 = v32;
    goto LABEL_9;
  }
  *((_BYTE *)a1 + 20) = v11 | 8;
  v30 = v12;
  if (v12 > 0x40)
  {
    v29 = (void *)operator new[]();
    v13 = __src;
    memcpy(v29, __src, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v29);
  }
  else
  {
    v13 = __src;
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    if (!(_DWORD)v12)
      v14 = 0;
    v29 = (void *)(v14 & ~(unint64_t)__src);
  }
  llvm::APInt::operator++((uint64_t)&v29);
  v15 = v30;
  v16 = v29;
  v30 = 0;
  if (v12 <= 0x40 || !v13)
  {
    __src = v29;
    v32 = v15;
    goto LABEL_17;
  }
  MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  __src = v16;
  v32 = v15;
  if (v30 >= 0x41 && v29)
  {
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    goto LABEL_9;
  }
LABEL_17:
  if (v15 >= 0x41)
    p_src = (unint64_t *)v16;
  else
    p_src = (unint64_t *)&__src;
  *((_BYTE *)a1 + 20) = *((_BYTE *)a1 + 20) & 0xF8 | 2;
  v18 = 64 - (v10 << 6);
  v19 = v10 - 1;
  while (1)
  {
    v20 = p_src[v19];
    if (v20)
      break;
    v18 += 64;
    if (--v19 == -1)
    {
      v21 = -1;
      goto LABEL_25;
    }
  }
  v21 = (__clz(v20) - v18) ^ 0x3F;
LABEL_25:
  v22 = (const unint64_t *)(v21 + 1);
  v23 = (llvm::APInt *)((char *)a1 + 8);
  v24 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)a1 + 8);
  if (((_DWORD)v24 - 64) <= 0xFFFFFF7F)
    v23 = *(llvm::APInt **)v23;
  v25 = (_DWORD)v22 - (_DWORD)v24;
  if (v22 >= v24)
  {
    *((_DWORD *)a1 + 4) = v21;
    v26 = sub_1C5DBBD1C(p_src, v10, (int)v22 - (int)v24);
    llvm::APInt::tcExtract(v23, (unint64_t *)(((_DWORD)v24 + 64) >> 6), (uint64_t)p_src, v24, v25);
  }
  else
  {
    *((_DWORD *)a1 + 4) = (_DWORD)v24 - 1;
    llvm::APInt::tcExtract(v23, (unint64_t *)(((_DWORD)v24 + 64) >> 6), (uint64_t)p_src, v22, 0);
    v26 = 0;
  }
  v27 = llvm::detail::IEEEFloat::normalize(a1, a5, v26);
  if (v15 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  return v27;
}

void llvm::detail::IEEEFloat::convertFromHexadecimalString(llvm::APInt *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  _QWORD *v11;
  int *v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char v16;
  unint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  const char *v40;
  __int16 v41;
  unsigned __int8 *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a1 + 20) = *((_BYTE *)a1 + 20) & 0xF8 | 2;
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v10 - 64) >= 0xFFFFFF80)
  {
    v13 = (char *)a1 + 8;
    *((_DWORD *)a1 + 4) = 0;
    v12 = (int *)((char *)a1 + 16);
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    v11 = (_QWORD *)*((_QWORD *)a1 + 1);
    *v11 = 0;
    bzero(v11 + 1, 8 * (((v10 + 64) >> 6) - 2) + 8);
    *((_DWORD *)a1 + 4) = 0;
    v12 = (int *)((char *)a1 + 16);
    v13 = (char *)*((_QWORD *)a1 + 1);
  }
  v14 = &a2[a3];
  v39 = 0;
  sub_1C5DBC994((uint64_t)&v42, a2, v14, &v39);
  v15 = v42;
  if ((v43 & 1) != 0)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v15;
    return;
  }
  if (v42 == v14)
  {
LABEL_40:
    v27 = "Hex strings require an exponent";
    goto LABEL_41;
  }
  v16 = 0;
  v17 = 0;
  v18 = (v10 & 0xFFFFFFC0) + 64;
  v19 = v39;
  v20 = v42;
  while (1)
  {
    v21 = *v20;
    if ((_DWORD)v21 == 46)
    {
      if (v19 != v14)
      {
        v27 = "String contains multiple dots";
        goto LABEL_41;
      }
      v39 = v20;
      v19 = v20++;
      goto LABEL_19;
    }
    v22 = word_1C85F7092[v21];
    if ((_DWORD)v22 == -1)
      break;
    ++v20;
    if (v18)
    {
      v18 -= 4;
      *(_QWORD *)&v13[8 * (v18 >> 6)] |= v22 << v18;
    }
    else
    {
      if ((v16 & 1) == 0)
      {
        if ((unint64_t)(v21 - 57) > 0xFFFFFFFFFFFFFFF6)
        {
          if ((v22 & 0xFFFFFFF7) != 0)
          {
            v17 = v17 & 0xFFFFFFFF00000000 | 1;
          }
          else
          {
            v23 = v20;
            if (v20 == v14)
            {
LABEL_44:
              v27 = "Invalid trailing hexadecimal fraction!";
              goto LABEL_41;
            }
            while (1)
            {
              v24 = *v23;
              if ((_DWORD)v24 != 48 && (_DWORD)v24 != 46)
                break;
              if (++v23 == v14)
                goto LABEL_44;
            }
            v25 = v17 & 0xFFFFFFFF00000000;
            if (word_1C85F7092[v24] == -1)
            {
              v17 = v25 | (2 * ((_DWORD)v21 != 48));
            }
            else
            {
              if ((_DWORD)v21 == 48)
                v26 = 1;
              else
                v26 = 3;
              v17 = v26 | v25;
            }
          }
        }
        else
        {
          v17 = v17 & 0xFFFFFFFF00000000 | 3;
        }
      }
      v18 = 0;
      v16 = 1;
    }
LABEL_19:
    if (v20 == v14)
      goto LABEL_40;
  }
  if (v20 == v14)
    goto LABEL_40;
  if ((v21 | 0x20) != 0x70)
  {
    v27 = "Invalid character in significand";
    goto LABEL_41;
  }
  if (v20 == a2 || v19 != v14 && v20 - a2 == 1)
  {
    v27 = "Significand has no digits";
    goto LABEL_41;
  }
  if (v20 == v15)
  {
LABEL_70:
    v38 = llvm::detail::IEEEFloat::normalize(a1, a4, v17);
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v38;
    return;
  }
  if (v19 == v14)
  {
    v39 = v20;
    LODWORD(v19) = (_DWORD)v20;
  }
  v31 = v20 + 1;
  if (v20 + 1 == v14 || ((v32 = *v31, v32 == 45) || v32 == 43) && (v31 = v20 + 2, v20 + 2 == v14))
  {
    v27 = "Exponent has no digits";
    goto LABEL_41;
  }
  if (v31 == v14)
  {
    v33 = 0;
LABEL_61:
    v35 = *(_DWORD *)(*(_QWORD *)a1 + 8)
        - (v10 & 0xFFFFFFC0)
        + 4 * ((_DWORD)v19 - (_DWORD)v15 + (((_DWORD)v19 - (_DWORD)v15) >> 31))
        - 65;
    if (v35 != (__int16)v35 || (v32 != 45 ? (v36 = v33) : (v36 = -v33), v37 = v36 + v35, v37 != (__int16)v37))
    {
LABEL_66:
      if (v32 == 45)
        v37 = -32768;
      else
        v37 = 0x7FFF;
    }
    *v12 = v37;
    goto LABEL_70;
  }
  v33 = 0;
  while (1)
  {
    v34 = (char)*v31 - 48;
    if (v34 > 9)
      break;
    v33 = v34 + 10 * v33;
    if (v33 >= 0x8000)
      goto LABEL_66;
    if (++v31 == v14)
      goto LABEL_61;
  }
  v27 = "Invalid character in exponent";
LABEL_41:
  v40 = v27;
  v41 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v29 = qword_1ED836B58[0];
  v30 = operator new();
  *(_QWORD *)v30 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v30 + 8));
  *(_QWORD *)(v30 + 32) = 3;
  *(_QWORD *)(v30 + 40) = v29;
  *(_BYTE *)(v30 + 48) = 1;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v30;
}

void sub_1C5DBC994(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  int64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  const char *v12;
  __int16 v13;

  *a4 = a3;
  if (a2 == a3)
    goto LABEL_15;
  v5 = a3 - a2;
  while (1)
  {
    v6 = *a2;
    if (v6 != 48)
      break;
    if (++a2 == a3)
      goto LABEL_5;
  }
  if (v6 != 46)
  {
LABEL_15:
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_QWORD *)a1 = a2;
  }
  else
  {
    *a4 = a2;
    if (v5 != 1)
    {
      v10 = a2 + 1;
      while (v10 != a3)
      {
        v11 = *v10++;
        if (v11 != 48)
        {
          a2 = v10 - 1;
          goto LABEL_15;
        }
      }
LABEL_5:
      a2 = a3;
      goto LABEL_15;
    }
    v12 = "Significand has no digits";
    v13 = 259;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v8 = qword_1ED836B58[0];
    v9 = operator new();
    *(_QWORD *)v9 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 3;
    *(_QWORD *)(v9 + 40) = v8;
    *(_BYTE *)(v9 + 48) = 1;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v9;
  }
}

void sub_1C5DBCAD8(uint64_t *a1, llvm::Twine *a2)
{
  unint64_t v5;
  uint64_t v6;

  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v5 = qword_1ED836B58[0];
  v6 = operator new();
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str(a2, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 3;
  *(_QWORD *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 48) = 1;
  *a1 = v6;
}

uint64_t llvm::detail::IEEEFloat::roundSignificandWithExponent()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unint64_t *v4;
  llvm::APInt *v5;
  _BOOL4 v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  llvm::APInt *v13;
  llvm::APInt *v14;
  unsigned int v15;
  int *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  const unint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  const unint64_t *v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  unint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  llvm::APInt *v41;
  const unint64_t *v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  const unint64_t *v50;
  llvm::APInt *v51;
  const unint64_t *v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  _BOOL4 v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  llvm::APInt *v78;
  int v79;
  unint64_t *v80;
  int v81;
  _QWORD *v83;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  _BOOL4 v91;
  int v92;
  unint64_t *v93;
  __int128 v94;
  int v95;
  unint64_t v96[600];
  __int128 *v97;
  uint64_t v98;
  int v99;
  char v100;
  int v101;
  __int128 v102;
  __int128 v103;
  _DWORD v104[7];
  uint64_t v105;
  _QWORD *v106;
  int v107;
  char v108;
  uint64_t v109;

  v0 = MEMORY[0x1E0C80A78]();
  v86 = v3;
  v93 = v4;
  v5 = (llvm::APInt *)v0;
  v109 = *MEMORY[0x1E0C80C00];
  v94 = xmmword_1C866F280;
  v95 = 0;
  v88 = v2;
  v7 = v2 == 1 || v2 == 4;
  v91 = v7;
  v92 = v1;
  v8 = (*(_DWORD *)(*(_QWORD *)v0 + 8) + 74) >> 6;
  if (v1 >= 0)
    v9 = v1;
  else
    v9 = -v1;
  v105 = 390625;
  memset(v104, 0, sizeof(v104));
  v103 = 0u;
  v102 = 0u;
  v10 = 1;
  v101 = 1;
  v96[0] = qword_1C866F240[v9 & 7];
  if (v9 >= 8)
  {
    v11 = v9 >> 3;
    v12 = v96;
    v13 = (llvm::APInt *)&v97;
    v14 = (llvm::APInt *)&v105;
    v15 = -1;
    v16 = &v101;
    while (1)
    {
      v17 = *v16;
      if ((_DWORD)v17)
      {
        if ((v11 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v19 = v10;
        v20 = (const unint64_t *)*(&v101 + v15);
        llvm::APInt::tcFullMultiply(v14, (unint64_t *)v14 - (_QWORD)v20, (const unint64_t **)v14 - (_QWORD)v20, v20, v20);
        v21 = 2 * (_DWORD)v20;
        v10 = v19;
        if (*((_QWORD *)v14 + v21 - 1))
          v17 = v21;
        else
          v17 = v21 - 1;
        *v16 = v17;
        if ((v11 & 1) != 0)
        {
LABEL_19:
          llvm::APInt::tcFullMultiply(v13, v12, (const unint64_t **)v14, (const unint64_t *)v10, (const unint64_t *)v17);
          v22 = v17 + v10 - 1;
          if (*((_QWORD *)v13 + v22))
            v10 = (v17 + v10);
          else
            v10 = v22;
          v18 = (unint64_t *)v13;
          v13 = (llvm::APInt *)v12;
          v12 = v18;
          goto LABEL_23;
        }
      }
      v18 = v12;
LABEL_23:
      v14 = (llvm::APInt *)((char *)v14 + 8 * v17);
      ++v15;
      ++v16;
      v23 = v11 >= 2;
      v11 >>= 1;
      if (!v23)
      {
        if (v18 != v96 && (_DWORD)v10)
        {
          v24 = v10;
          v25 = v96;
          do
          {
            v26 = *v18++;
            *v25++ = v26;
            --v24;
          }
          while (v24);
        }
        break;
      }
    }
  }
  v90 = v10 - 1;
  v85 = v10;
  v89 = 64 - ((_DWORD)v10 << 6);
  do
  {
    DWORD2(v94) = (v8 << 6) - 1;
    v27 = *(_DWORD *)(*(_QWORD *)v5 + 8);
    v105 = (uint64_t)&v94;
    v28 = (const unint64_t *)DWORD2(v94);
    if (v8 << 6 >= 0x80)
    {
      v106 = (_QWORD *)operator new[]();
      v28 = (const unint64_t *)DWORD2(v94);
    }
    v29 = v108 & 0xF0 | 3;
    v108 = v29;
    v107 = DWORD1(v94) - 1;
    v30 = (_DWORD)v28 - 64;
    if (((_DWORD)v28 - 64) < 0xFFFFFF80)
    {
      v83 = v106;
      v31 = ((_DWORD)v28 + 64) >> 6;
      *v106 = 0;
      bzero(v83 + 1, 8 * (v31 - 2) + 8);
      v29 = v108;
    }
    else
    {
      v31 = ((_DWORD)v28 + 64) >> 6;
      v106 = 0;
    }
    v108 = *((_BYTE *)v5 + 20) & 8 | v29 & 0xF0 | 3;
    v32 = v106;
    if (v30 >= 0xFFFFFF80)
      v33 = &v106;
    else
      v33 = v106;
    *v33 = 0;
    if (v30 >= 0xFFFFFF80)
    {
      v97 = &v94;
    }
    else
    {
      bzero(v32 + 1, 8 * (v31 - 2) + 8);
      v97 = &v94;
      v98 = operator new[]();
      v28 = (const unint64_t *)DWORD2(v94);
      v30 = DWORD2(v94) - 64;
    }
    v100 = v100 & 0xF0 | 3;
    v34 = &v98;
    if (v30 <= 0xFFFFFF7F)
      v34 = (uint64_t *)v98;
    v35 = (unint64_t *)(((_DWORD)v28 + 64) >> 6);
    *v34 = 0;
    if (((_DWORD)v28 + 64) >= 0x80)
      bzero(v34 + 1, 8 * ((_DWORD)v35 - 2) + 8);
    v36 = (v8 << 6) - 1 - v27;
    v108 = v108 & 0xF8 | 2;
    v37 = v86 - 1;
    v38 = 64 - (v86 << 6);
    while (1)
    {
      v39 = v93[v37];
      if (v39)
        break;
      v38 += 64;
      if (--v37 == -1)
      {
        v40 = -1;
        goto LABEL_48;
      }
    }
    v40 = (__clz(v39) - v38) ^ 0x3F;
LABEL_48:
    v41 = (llvm::APInt *)&v106;
    if (v30 <= 0xFFFFFF7F)
      v41 = (llvm::APInt *)v106;
    v42 = (const unint64_t *)(v40 + 1);
    v43 = (_DWORD)v42 - (_DWORD)v28;
    if (v42 >= v28)
    {
      v107 = v40;
      v44 = sub_1C5DBBD1C(v93, v86, (int)v42 - (int)v28);
      llvm::APInt::tcExtract(v41, v35, (uint64_t)v93, v28, v43);
    }
    else
    {
      v107 = (_DWORD)v28 - 1;
      llvm::APInt::tcExtract(v41, v35, (uint64_t)v93, v42, 0);
      v44 = 0;
    }
    v45 = llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v105, 1, v44);
    v100 = v100 & 0xF8 | 2;
    v46 = v90;
    v47 = v89;
    while (1)
    {
      v48 = v96[v46];
      if (v48)
        break;
      v47 += 64;
      if (--v46 == -1)
      {
        v49 = -1;
        goto LABEL_57;
      }
    }
    v49 = (__clz(v48) - v47) ^ 0x3F;
LABEL_57:
    v50 = (const unint64_t *)DWORD2(v94);
    v51 = (llvm::APInt *)&v98;
    if ((DWORD2(v94) - 64) <= 0xFFFFFF7F)
      v51 = (llvm::APInt *)v98;
    v52 = (const unint64_t *)(v49 + 1);
    v53 = (_DWORD)v52 - DWORD2(v94);
    if (v52 >= DWORD2(v94))
    {
      v99 = v49;
      v54 = sub_1C5DBBD1C(v96, v85, (int)v52 - DWORD2(v94));
      llvm::APInt::tcExtract(v51, (unint64_t *)(((_DWORD)v50 + 64) >> 6), (uint64_t)v96, v50, v53);
    }
    else
    {
      v99 = DWORD2(v94) - 1;
      llvm::APInt::tcExtract(v51, (unint64_t *)((DWORD2(v94) + 64) >> 6), (uint64_t)v96, v52, 0);
      v54 = 0;
    }
    v55 = llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v97, 1, v54);
    v107 += v92;
    if (v92 < 0)
    {
      v56 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v105, (const llvm::detail::IEEEFloat *)&v97);
      v59 = *(_DWORD *)(*(_QWORD *)v5 + 4);
      v58 = v36;
      v60 = v59 - v107;
      if (v59 > v107)
      {
        v58 = v60 + v36;
        if (v60 + v36 >= DWORD2(v94))
          v36 = DWORD2(v94);
        else
          v36 += v60;
      }
      v57 = 2 * ((v55 | v56) != 0);
    }
    else
    {
      v56 = llvm::detail::IEEEFloat::multiplySignificand((llvm::detail::IEEEFloat *)&v105, (const llvm::detail::IEEEFloat *)&v97);
      v57 = v55 != 0;
      v58 = v36;
    }
    v61 = v56 != 0;
    if (v45)
      ++v57;
    v62 = 2 * v61;
    v63 = v61 | (2 * v57);
    if (v57)
      v64 = v63;
    else
      v64 = v62;
    v65 = v105;
    v66 = v106;
    if ((*(_DWORD *)(v105 + 8) - 64) >= 0xFFFFFF80)
      v67 = (uint64_t *)&v106;
    else
      v67 = v106;
    v68 = (v36 - 1) >> 6;
    v69 = v67[v68] & (0xFFFFFFFFFFFFFFFFLL >> ((v36 - 1) & 0x3F ^ 0x3F));
    v70 = 1 << (v36 - 1);
    if (!v91)
      v70 = 0;
    if (v36 - 1 > 0x3F)
    {
      if (v69 == v70)
      {
        v72 = v68 - 1;
        while (v72)
        {
          if (v67[v72--])
            goto LABEL_91;
        }
        v71 = *v67;
      }
      else if (v69 == v70 - 1)
      {
        v74 = v68 - 1;
        while (v74)
        {
          v75 = v67[v74--];
          if (v75 != -1)
            goto LABEL_91;
        }
        v71 = -*v67;
      }
      else
      {
LABEL_91:
        v71 = -1;
      }
    }
    else
    {
      v71 = v69 - v70;
      if ((uint64_t)(v69 - v70) < 0)
        v71 = v70 - v69;
    }
    v76 = 2 * v71;
    if (2 * v71 >= v64)
    {
      v77 = *(_DWORD *)(*(_QWORD *)v5 + 8);
      v78 = (llvm::APInt *)((char *)v5 + 8);
      if ((v77 - 64) <= 0xFFFFFF7F)
        v78 = (llvm::APInt *)*((_QWORD *)v5 + 1);
      llvm::APInt::tcExtract(v78, (unint64_t *)((v77 + 64) >> 6), (uint64_t)v67, (const unint64_t *)(DWORD2(v94) - v36), v36);
      *((_DWORD *)v5 + 4) = v107 + v36 + *(_DWORD *)(*(_QWORD *)v5 + 8) - DWORD2(v94);
      v79 = *(_DWORD *)(v65 + 8);
      if ((v79 - 64) >= 0xFFFFFF80)
        v80 = (unint64_t *)&v106;
      else
        v80 = v66;
      v81 = sub_1C5DBBD1C(v80, (v79 + 64) >> 6, v58);
      v87 = llvm::detail::IEEEFloat::normalize(v5, v88, v81);
    }
    if ((*((_DWORD *)v97 + 2) - 64) <= 0xFFFFFF7F && v98)
      MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
    if ((*(_DWORD *)(v65 + 8) + 64) >= 0x80 && v66 != 0)
      MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
    v8 *= 2;
  }
  while (v76 < v64);
  return v87;
}

void llvm::detail::IEEEFloat::convertFromDecimalString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  const char *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  _BOOL4 v25;
  int v26;
  int v27;
  _DWORD *v28;
  llvm::APInt *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  _QWORD *v36;
  unint64_t v38;
  char *v39;
  int v40;
  char v41;
  unsigned int v42;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  unsigned __int8 *v48;
  _QWORD v49[4];
  __int16 v50;
  char *v51;
  unsigned __int8 v52;
  uint64_t v53;

  v7 = a2;
  v53 = *MEMORY[0x1E0C80C00];
  v10 = &a2[a3];
  v48 = &a2[a3];
  sub_1C5DBC994((uint64_t)&v51, a2, &a2[a3], &v48);
  v11 = v52;
  v12 = (uint64_t)v51;
  if ((v52 & 1) != 0)
  {
    if (v51)
    {
LABEL_68:
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v12;
      return;
    }
  }
  else
  {
    v13 = v48;
    if (v51 == (char *)v10)
    {
LABEL_19:
      v17 = 0;
      v18 = v10;
    }
    else
    {
      v14 = (unsigned __int8 *)v51;
      while (1)
      {
        v15 = *v14;
        if (v15 == 46)
        {
          if (v13 != v10)
          {
            v16 = "String contains multiple dots";
            goto LABEL_65;
          }
          v48 = v14;
          if (v14 + 1 == v10)
          {
            v17 = 0;
            v18 = v10;
LABEL_59:
            v13 = v14;
            goto LABEL_20;
          }
          v15 = v14[1];
          v13 = v14++;
        }
        if (((char)v15 - 58) < 0xFFFFFFF6)
          break;
        if (++v14 == v10)
          goto LABEL_19;
      }
      if (v14 == v10)
        goto LABEL_19;
      if ((v15 | 0x20) != 0x65)
      {
        v16 = "Invalid character in significand";
LABEL_65:
        v49[0] = v16;
        v50 = 259;
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v38 = qword_1ED836B58[0];
        v12 = operator new();
        *(_QWORD *)v12 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v49, (_QWORD *)(v12 + 8));
        *(_QWORD *)(v12 + 32) = 3;
        *(_QWORD *)(v12 + 40) = v38;
        *(_BYTE *)(v12 + 48) = 1;
        goto LABEL_68;
      }
      if (v14 == v7 || v13 != v10 && v14 - v7 == 1)
      {
        v16 = "Significand has no digits";
        goto LABEL_65;
      }
      v39 = (char *)(v14 + 1);
      if (v14 + 1 == v10 || ((v40 = *v39, v40 == 45) || v40 == 43) && v14 + 2 == v10)
      {
        v17 = 0;
      }
      else
      {
        if (v40 == 45 || (v41 = *v39, v40 == 43))
        {
          v39 = (char *)(v14 + 2);
          if (v14 + 2 != v10)
          {
            v41 = *v39;
            goto LABEL_77;
          }
          v16 = "Exponent has no digits";
          goto LABEL_65;
        }
LABEL_77:
        v42 = v41 - 48;
        if (v42 > 9)
        {
LABEL_78:
          v16 = "Invalid character in exponent";
          goto LABEL_65;
        }
        v46 = v39 + 1;
        while (v46 != (char *)v10)
        {
          v47 = *v46 - 48;
          if (v47 > 9)
            goto LABEL_78;
          v42 = v47 + 10 * v42;
          ++v46;
          if (v42 >> 6 >= 0x177)
          {
            v42 = 24000;
            break;
          }
        }
        if (v40 == 45)
          v17 = -v42;
        else
          v17 = v42;
      }
      if (v13 == v10)
      {
        v48 = v14;
        v18 = v14;
        goto LABEL_59;
      }
      v18 = v14;
    }
LABEL_20:
    if (v18 == (unsigned __int8 *)v51)
    {
      v11 = 0;
      v5 = (unsigned __int8 *)v51;
    }
    else
    {
      if (v18 != v7)
      {
LABEL_22:
        v19 = v18 - 1;
        while (v19 != v7)
        {
          v21 = *v19--;
          v20 = v21;
          if (v21 != 48)
          {
            if (v20 == 46)
            {
              v18 = v19 + 1;
              goto LABEL_22;
            }
            v5 = v19 + 1;
            goto LABEL_30;
          }
        }
      }
      v5 = v7;
LABEL_30:
      v22 = (_DWORD)v13 - (_DWORD)v5;
      v23 = v13 > (unsigned __int8 *)v51;
      v24 = v13 >= v5;
      v25 = v13 > v5;
      if (v24)
        v23 = 0;
      v11 = v17 + v22 - v25 + (_DWORD)v5 - (_DWORD)v51 - v23;
    }
  }
  if (v51 == (char *)v10 || (*v51 - 58) <= 0xFFFFFFF5)
  {
    v26 = 0;
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF8 | 3;
LABEL_63:
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v26;
    return;
  }
  if (v11 >= 51085)
    goto LABEL_37;
  v28 = *(_DWORD **)a1;
  if (v11 < -51082 || 28738 * v11 + 28738 <= 8651 * (v28[1] - v28[2]))
  {
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF8 | 2;
    v35 = v28[2];
    if ((v35 - 64) >= 0xFFFFFF80)
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      v36 = *(_QWORD **)(a1 + 8);
      *v36 = 0;
      bzero(v36 + 1, 8 * (((v35 + 64) >> 6) - 2) + 8);
    }
    v27 = llvm::detail::IEEEFloat::normalize((llvm::APInt *)a1, a4, 1);
    goto LABEL_62;
  }
  if (42039 * v11 - 42039 >= 12655 * *v28)
  {
LABEL_37:
    v27 = llvm::detail::IEEEFloat::handleOverflow((_DWORD **)a1, a4);
LABEL_62:
    v26 = v27;
    goto LABEL_63;
  }
  v29 = (llvm::APInt *)operator new[]();
  v30 = 0;
LABEL_42:
  v31 = 0;
  v32 = 1;
  while (1)
  {
    v33 = *v7;
    if (v33 == 46)
    {
      if (++v7 == v10)
      {
        v7 = v10;
LABEL_51:
        llvm::APInt::tcMultiplyPart(v29, (unint64_t *)v29, (const unint64_t *)v32, v31, v30, v30 + 1, 0);
        if (*((_QWORD *)v29 + v30))
          ++v30;
        if (v7 > v5)
        {
          *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF8 | 2;
          v26 = llvm::detail::IEEEFloat::roundSignificandWithExponent();
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
          goto LABEL_63;
        }
        goto LABEL_42;
      }
      LOBYTE(v33) = *v7;
    }
    v34 = (char)v33 - 48;
    if (v34 > 9)
      break;
    ++v7;
    v32 *= 10;
    v31 = 10 * v31 + v34;
    if (v7 > v5 || v32 >= 0x1999999999999999)
      goto LABEL_51;
  }
  MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17, v32, v31);
  v49[0] = "Invalid character in significand";
  v50 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v44 = qword_1ED836B58[0];
  v45 = operator new();
  *(_QWORD *)v45 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v49, (_QWORD *)(v45 + 8));
  *(_QWORD *)(v45 + 32) = 3;
  *(_QWORD *)(v45 + 40) = v44;
  *(_BYTE *)(v45 + 48) = 1;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v45;
}

uint64_t llvm::detail::IEEEFloat::convertFromStringSpecials(int **a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  int v6;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t v22;

  if (a3 < 3)
    return 0;
  if (a3 == 8)
  {
    if (*(_QWORD *)a2 == 0x5954494E49464E49)
    {
LABEL_28:
      llvm::detail::IEEEFloat::makeInf(a1, 0);
      return 1;
    }
LABEL_13:
    v6 = *a2;
    if (v6 != 45)
    {
      LODWORD(v3) = 0;
      goto LABEL_33;
    }
    ++a2;
    if (a3 == 9)
    {
      if (*(_QWORD *)a2 != 0x5954494E49464E49)
      {
LABEL_32:
        --a3;
        v6 = *a2;
        LODWORD(v3) = 1;
        goto LABEL_33;
      }
    }
    else
    {
      if (a3 != 4)
        goto LABEL_32;
      if ((*(_WORD *)a2 != 28265 || a2[2] != 102) && (*(_WORD *)a2 != 28233 || a2[2] != 102))
        goto LABEL_32;
    }
    v3 = 1;
    llvm::detail::IEEEFloat::makeInf(a1, 1);
    return v3;
  }
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1718503723)
      goto LABEL_28;
    goto LABEL_13;
  }
  if (a3 != 3)
    goto LABEL_13;
  if (*(_WORD *)a2 == 28265 && a2[2] == 102)
    goto LABEL_28;
  v3 = 0;
  v6 = *a2;
  if (v6 == 45)
    return v3;
  a3 = 3;
LABEL_33:
  if ((v6 | 0x20) == 0x73)
  {
    if (a3 < 4)
      return 0;
    ++a2;
    --a3;
  }
  if ((*(_WORD *)a2 != 24942 || a2[2] != 110) && (*(_WORD *)a2 != 24910 || a2[2] != 78))
    return 0;
  v12 = v6 & 0xFFFFFFDF;
  v13 = 3;
  if (a3 < 3)
    v13 = a3;
  v14 = &a2[v13];
  v15 = a3 - v13;
  v21 = &a2[v13];
  v22 = a3 - v13;
  if (a3 == v13)
  {
    llvm::detail::IEEEFloat::makeNaN(a1, v12 == 83, v3, 0);
    return 1;
  }
  v16 = *v14;
  if (v16 != 40)
    goto LABEL_54;
  if (v15 >= 3)
  {
    v17 = v15 - 1;
    if (v14[v15 - 1] == 41)
    {
      if (v15 < v17)
        v17 = v15;
      v15 = v17 - 1;
      v21 = v14 + 1;
      v22 = v17 - 1;
      v16 = *++v14;
LABEL_54:
      if (v16 == 48)
      {
        if (v15 >= 2 && __tolower((char)v14[1]) == 120)
        {
          v21 = v14 + 2;
          v22 = v15 - 2;
          v18 = 16;
        }
        else
        {
          v18 = 8;
        }
      }
      else
      {
        v18 = 10;
      }
      v20 = 1;
      v19 = 0;
      if ((llvm::StringRef::getAsInteger((llvm::StringRef *)&v21, v18, (llvm::APInt *)&v19) & 1) != 0)
      {
        if (v20 >= 0x41 && v19)
          MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
        return 0;
      }
      llvm::detail::IEEEFloat::makeNaN(a1, v12 == 83, v3, (const llvm::APInt *)&v19);
      if (v20 >= 0x41 && v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      return 1;
    }
  }
  return 0;
}

void llvm::detail::IEEEFloat::makeInf(int **this, int a2)
{
  int *v2;
  char v3;
  int v4;
  int *v5;

  v2 = *this;
  if ((*this)[4] == 1)
  {
    llvm::detail::IEEEFloat::makeNaN(this, 0, a2, 0);
  }
  else
  {
    if (a2)
      v3 = 8;
    else
      v3 = 0;
    *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | v3;
    *((_DWORD *)this + 4) = *v2 + 1;
    v4 = v2[2];
    if ((v4 - 64) < 0xFFFFFF80)
    {
      v5 = this[1];
      *(_QWORD *)v5 = 0;
      bzero(v5 + 2, 8 * (((v4 + 64) >> 6) - 2) + 8);
    }
    else
    {
      this[1] = 0;
    }
  }
}

void llvm::detail::IEEEFloat::convertFromString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  unsigned __int8 *v8;
  int v10;
  const char *v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;

  if (a3)
  {
    v7 = a3;
    v8 = a2;
    if (llvm::detail::IEEEFloat::convertFromStringSpecials((int **)a1, a2, a3))
    {
      *(_BYTE *)(a5 + 8) &= ~1u;
      *(_DWORD *)a5 = 0;
      return;
    }
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF7 | (8 * (*v8 == 45));
    v10 = *v8;
    if (v10 != 45 && v10 != 43)
      goto LABEL_5;
    if (--v7)
    {
      ++v8;
LABEL_5:
      if (v7 >= 2 && *v8 == 48 && (v8[1] | 0x20) == 0x78)
      {
        if (v7 == 2)
        {
          v15[0] = "Invalid string";
          v16 = 259;
          sub_1C5DBCAD8((uint64_t *)a5, (llvm::Twine *)v15);
          *(_BYTE *)(a5 + 8) |= 1u;
        }
        else
        {
          llvm::detail::IEEEFloat::convertFromHexadecimalString((llvm::APInt *)a1, v8 + 2, v7 - 2, a4, a5);
        }
      }
      else
      {
        llvm::detail::IEEEFloat::convertFromDecimalString(a1, v8, v7, a4, a5);
      }
      return;
    }
    v11 = "String has no digits";
  }
  else
  {
    v11 = "Invalid string length";
  }
  v15[0] = v11;
  v16 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v13 = qword_1ED836B58[0];
  v14 = operator new();
  *(_QWORD *)v14 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v15, (_QWORD *)(v14 + 8));
  *(_QWORD *)(v14 + 32) = 3;
  *(_QWORD *)(v14 + 40) = v13;
  *(_BYTE *)(v14 + 48) = 1;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v14;
}

uint64_t llvm::detail::IEEEFloat::convertToHexString(uint64_t a1, _BYTE *a2, unsigned int a3, int a4, int a5)
{
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  const char *v13;
  char v14;

  v6 = (int)a2;
  v7 = *(_BYTE *)(a1 + 20);
  if ((v7 & 8) != 0)
  {
    *a2++ = 45;
    v7 = *(_BYTE *)(a1 + 20);
  }
  switch(v7 & 7)
  {
    case 0:
      v8 = 0x7974696E69666E69;
      if (a4)
        v8 = 0x5954494E49464E49;
      *(_QWORD *)a2 = v8;
      a2 += 8;
      break;
    case 1:
      v13 = "nan";
      if (a4)
        v13 = "NAN";
      *(_WORD *)a2 = *(_WORD *)v13;
      a2[2] = v13[2];
      a2 += 3;
      break;
    case 2:
      a2 = llvm::detail::IEEEFloat::convertNormalToHexString(a1, a2, a3, a4, a5);
      break;
    case 3:
      *a2 = 48;
      if (a4)
        v9 = 88;
      else
        v9 = 120;
      a2[1] = v9;
      a2[2] = 48;
      if (a3 < 2)
      {
        v12 = a2 + 3;
      }
      else
      {
        v10 = a2 + 4;
        a2[3] = 46;
        v11 = a3 - 1;
        memset(a2 + 4, 48, v11);
        v12 = &v10[v11];
      }
      if (a4)
        v14 = 80;
      else
        v14 = 112;
      *v12 = v14;
      a2 = v12 + 2;
      v12[1] = 48;
      break;
    default:
      break;
  }
  *a2 = 0;
  return ((_DWORD)a2 - v6);
}

_BYTE *llvm::detail::IEEEFloat::convertNormalToHexString(uint64_t a1, _BYTE *a2, unsigned int a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  char v8;
  const char *v9;
  unint64_t **v10;
  unsigned int v11;
  unint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char v40;
  _BYTE *result;
  unsigned int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  char v50;
  _BYTE v53[40];
  uint64_t v54;

  v5 = a4;
  v6 = a3;
  v54 = *MEMORY[0x1E0C80C00];
  *a2 = 48;
  if (a4)
    v8 = 88;
  else
    v8 = 120;
  a2[1] = v8;
  if (a4)
    v9 = "0123456789ABCDEF0";
  else
    v9 = "0123456789abcdef0";
  v10 = (unint64_t **)(a1 + 8);
  v11 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (v11 - 64 > 0xFFFFFF7F)
  {
    v13 = (v11 + 64) >> 6;
    v14 = v11 + 3;
    v15 = (v11 + 3) & 0x3F;
    v16 = 64 - v15;
    if (v11 > 0xFFFFFFBF)
    {
      v20 = 1;
      v12 = (unint64_t *)(a1 + 8);
      goto LABEL_16;
    }
    v12 = (unint64_t *)(a1 + 8);
  }
  else
  {
    v12 = *v10;
    v13 = (v11 + 64) >> 6;
    v14 = v11 + 3;
    v15 = (v11 + 3) & 0x3F;
    v16 = 64 - v15;
  }
  v17 = 0;
  v18 = 0;
  while (1)
  {
    v19 = v12[v18];
    if (v19)
      break;
    ++v18;
    v17 += 64;
    if (v13 == v18)
    {
      v20 = 1;
      goto LABEL_16;
    }
  }
  v20 = -v17 - __clz(__rbit64(v19));
LABEL_16:
  v21 = (v11 + v20 + 6) >> 2;
  if (!a3)
  {
    LODWORD(v25) = 0;
    v6 = v21;
    goto LABEL_27;
  }
  if (v21 <= a3)
  {
    LODWORD(v25) = 0;
    goto LABEL_27;
  }
  v49 = v16;
  v50 = v15;
  v22 = v14 - 4 * a3;
  v24 = sub_1C5DBBD1C(v12, v13, v22);
  if (a5 != 1)
    __asm { BR              X11 }
  if (v24 == 2)
  {
    v16 = v49;
    v15 = v50;
    if ((*(_BYTE *)(a1 + 20) & 7) != 3)
    {
      if (v11 - 64 <= 0xFFFFFF7F)
        v10 = (unint64_t **)*v10;
      v25 = ((unint64_t)v10[v22 >> 6] >> v22) & 1;
      goto LABEL_24;
    }
  }
  else
  {
    v16 = v49;
    v15 = v50;
    if (v24 == 3)
    {
      LODWORD(v25) = 1;
      goto LABEL_24;
    }
  }
  LODWORD(v25) = 0;
LABEL_24:
  v5 = a4;
LABEL_27:
  v26 = 3;
  if (v11 + 66 >= 0x40 && v6)
  {
    v27 = (v11 + 66) >> 6;
    v28 = v16;
    v26 = 3;
    v29 = v15;
    while (1)
    {
      v30 = v27 - 1;
      if (v27 - 1 == v13)
        break;
      v31 = v12[v30] << v28;
      if (v27 != 1)
        goto LABEL_34;
LABEL_35:
      if (v6 >= 0x10)
        v32 = 16;
      else
        v32 = v6;
      v33 = v31 >> (-4 * v32);
      v34 = &a2[v26 - 1 + v32];
      v35 = v32;
      do
      {
        *v34-- = v9[v33 & 0xF];
        v33 >>= 4;
        --v35;
      }
      while (v35);
      v26 += v32;
      v6 -= v32;
      if (v30)
      {
        v27 = v30;
        if (v6)
          continue;
      }
      v36 = &a2[v26];
      if (!(_DWORD)v25)
        goto LABEL_43;
LABEL_45:
      v37 = v36 - 1;
      do
      {
        v38 = v9[word_1C85F7092[*v37] + 1];
        *v37-- = v38;
      }
      while (v38 == 48);
      goto LABEL_47;
    }
    v31 = 0;
    if (v27 == 1)
      goto LABEL_35;
LABEL_34:
    v31 |= v12[v27 - 2] >> v29;
    goto LABEL_35;
  }
  v36 = a2 + 3;
  if ((_DWORD)v25)
    goto LABEL_45;
LABEL_43:
  memset(v36, 48, v6);
  v26 += v6;
LABEL_47:
  v39 = &a2[v26];
  a2[2] = a2[3];
  if (v26 == 4)
    --v39;
  else
    a2[3] = 46;
  if (v5)
    v40 = 80;
  else
    v40 = 112;
  *v39 = v40;
  result = v39 + 1;
  v42 = *(_DWORD *)(a1 + 16);
  if ((v42 & 0x80000000) != 0)
  {
    v46 = 0;
    *result = 45;
    v47 = -v42;
    do
    {
      v53[v46++] = (v47 % 0xA) | 0x30;
      v44 = v47 > 9;
      v47 /= 0xAu;
    }
    while (v44);
    result = v39 + 2;
    v48 = v46 - 1;
    do
      *result++ = v53[v48--];
    while (v48 != -1);
  }
  else
  {
    v43 = 0;
    do
    {
      v53[v43++] = (v42 % 0xA) | 0x30;
      v44 = v42 > 9;
      v42 /= 0xAu;
    }
    while (v44);
    v45 = v43 - 1;
    do
      *result++ = v53[v45--];
    while (v45 != -1);
  }
  return result;
}

void sub_1C5DBE54C()
{
  JUMPOUT(0x1C5DBE290);
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3;
  int v4;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD __src[4];
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)this + 20);
  v4 = v3 & 7;
  if ((v3 & 6) == 0 || v4 == 3)
  {
    v14 = (v3 >> 3) & 1;
    if (v4 == 1)
      v15 = 0;
    else
      v15 = v14;
    v16 = *(_QWORD *)this;
    WORD2(__src[0]) = 0;
    LODWORD(__src[0]) = 0;
    v17 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v23 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v23;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    LOBYTE(__src[0]) = v4;
    BYTE1(__src[0]) = v15;
    *(_DWORD *)((char *)__src + 2) = *(_DWORD *)(v16 + 8);
    v18 = qword_1ED7EAC80 ^ *(unsigned int *)((char *)__src + 2);
    v19 = 0x9DDFEA08EB382D69 * (((8 * LODWORD(__src[0])) | 6) ^ v18);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) ^ ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) >> 47));
  }
  else
  {
    v6 = (v3 >> 3) & 1;
    v7 = *(_QWORD *)this;
    v8 = *(_DWORD *)(*(_QWORD *)this + 8);
    if ((v8 - 64) >= 0xFFFFFF80)
      v9 = (_QWORD *)((char *)this + 8);
    else
      v9 = (_QWORD *)*((_QWORD *)this + 1);
    v10 = sub_1C517D118(v9, (uint64_t)&v9[(v8 + 64) >> 6]);
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    memset(__src, 0, sizeof(__src));
    v11 = &unk_1ED7EA000;
    v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v12 & 1) == 0)
    {
      v24 = v10;
      v20 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v11 = &unk_1ED7EA000;
      v21 = v20;
      v10 = v24;
      if (v21)
      {
        v22 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v22 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v22;
        __cxa_guard_release(&qword_1ED7EAC88);
        v11 = (_QWORD *)&unk_1ED7EA000;
        v10 = v24;
      }
    }
    v28 = v11[400];
    LOBYTE(__src[0]) = v4;
    BYTE1(__src[0]) = v6;
    *(_DWORD *)((char *)__src + 2) = *(_DWORD *)(v7 + 8);
    *(_DWORD *)((char *)__src + 6) = *((_DWORD *)this + 4);
    *(_QWORD *)((char *)__src + 10) = v10;
    return sub_1C4E37BA0((char *)__src, 0, (char *)&__src[1] + 2, (char *)v26);
  }
}

uint64_t llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOWORD(v5) = 0;
      v7 = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        v8 = *(_QWORD *)this;
        this += 8;
        if ((*(_DWORD *)(v8 + 8) - 64) <= 0xFFFFFF7F)
          this = *(_QWORD *)this;
        v7 = *(_QWORD *)this;
      }
      else
      {
        v7 = 0;
      }
      LOWORD(v5) = 2047;
    }
  }
  else
  {
    LODWORD(v5) = *(_DWORD *)(this + 16) + 1023;
    v6 = (unint64_t *)(this + 8);
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
      v6 = (unint64_t *)*v6;
    v7 = *v6;
    if (*(_DWORD *)(this + 16) == -1022)
      v5 = (v7 >> 52) & 1;
  }
  *(_DWORD *)(a2 + 8) = 64;
  *(_QWORD *)a2 = (v2 << 60) & 0x8000000000000000 | ((unint64_t)(v5 & 0x7FF) << 52) | v7 & 0xFFFFFFFFFFFFFLL;
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloatAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      v3 = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        v7 = *(_QWORD *)this;
        this += 8;
        if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
          this = *(_QWORD *)this;
        v3 = *(_DWORD *)this;
      }
      LOBYTE(v5) = -1;
    }
  }
  else
  {
    v5 = *(_DWORD *)(this + 16) + 127;
    v6 = (_QWORD *)(this + 8);
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
      v6 = (_QWORD *)*v6;
    v3 = *(_DWORD *)v6;
    if (*(_DWORD *)(this + 16) == -126)
      LOBYTE(v5) = (v3 & 0x800000) != 0;
  }
  *(_DWORD *)(a2 + 8) = 32;
  *(_QWORD *)a2 = (v2 << 28) & 0x80000000 | (v5 << 23) | v3 & 0x7FFFFF;
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertHalfAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOWORD(v3) = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        v7 = *(_QWORD *)this;
        this += 8;
        if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
          this = *(_QWORD *)this;
        v3 = *(_DWORD *)this;
      }
      LOBYTE(v5) = 31;
    }
  }
  else
  {
    v5 = *(_DWORD *)(this + 16) + 15;
    v6 = (_QWORD *)(this + 8);
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
      v6 = (_QWORD *)*v6;
    v3 = *(_DWORD *)v6;
    if (*(_DWORD *)(this + 16) == -14)
      LOBYTE(v5) = (v3 & 0x400) != 0;
  }
  *(_DWORD *)(a2 + 8) = 16;
  *(_QWORD *)a2 = (((v2 >> 3) & 1) << 15) | ((v5 & 0x1F) << 10) | v3 & 0x3FF;
  return this;
}

uint64_t llvm::detail::IEEEFloat::bitcastToAPInt@<X0>(uint64_t this@<X0>, unsigned int *a2@<X8>)
{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;

  v2 = *(void **)this;
  if (*(_UNKNOWN **)this == &unk_1C866F15C)
  {
    v7 = *(unsigned __int8 *)(this + 20);
    v8 = v7 & 7;
    if ((v7 & 6) == 0 || v8 == 3)
    {
      if (v8 == 3)
      {
        LOBYTE(v10) = 0;
        LOWORD(v8) = 0;
      }
      else
      {
        if ((v7 & 7) != 0)
          v8 = *(_DWORD *)(this + 8);
        LOBYTE(v10) = 31;
      }
    }
    else
    {
      v10 = *(_DWORD *)(this + 16) + 15;
      v8 = *(_DWORD *)(this + 8);
      if (*(_DWORD *)(this + 16) == -14)
        LOBYTE(v10) = (*(_DWORD *)(this + 8) & 0x400) != 0;
    }
    v14 = (((v7 >> 3) & 1) << 15) | ((v10 & 0x1F) << 10) | v8 & 0x3FF;
    v15 = 16;
    goto LABEL_27;
  }
  if (v2 == &unk_1C866F170)
    return llvm::detail::IEEEFloat::convertBFloatAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &unk_1C866F184)
  {
    v11 = *(unsigned __int8 *)(this + 20);
    v12 = v11 & 7;
    if ((v11 & 6) == 0 || v12 == 3)
    {
      if (v12 == 3)
      {
        LOBYTE(v13) = 0;
        v12 = 0;
      }
      else
      {
        if ((v11 & 7) != 0)
          v12 = *(_DWORD *)(this + 8);
        LOBYTE(v13) = -1;
      }
    }
    else
    {
      v13 = *(_DWORD *)(this + 16) + 127;
      v12 = *(_DWORD *)(this + 8);
      if (*(_DWORD *)(this + 16) == -126)
        LOBYTE(v13) = (v12 & 0x800000) != 0;
    }
    v14 = (v11 << 28) & 0x80000000 | (v13 << 23) | v12 & 0x7FFFFF;
    v15 = 32;
    goto LABEL_27;
  }
  if (v2 == &unk_1C866F198)
  {
    v3 = *(unsigned __int8 *)(this + 20);
    v4 = v3 & 7;
    if ((v3 & 6) == 0 || v4 == 3)
    {
      if (v4 == 3)
      {
        LOWORD(v5) = 0;
        v6 = 0;
      }
      else
      {
        if ((v3 & 7) != 0)
          v6 = *(_QWORD *)(this + 8);
        else
          v6 = 0;
        LOWORD(v5) = 2047;
      }
    }
    else
    {
      LODWORD(v5) = *(_DWORD *)(this + 16) + 1023;
      v6 = *(_QWORD *)(this + 8);
      if (*(_DWORD *)(this + 16) == -1022)
        v5 = (v6 >> 52) & 1;
    }
    v14 = (v3 << 60) & 0x8000000000000000 | ((unint64_t)(v5 & 0x7FF) << 52) | v6 & 0xFFFFFFFFFFFFFLL;
    v15 = 64;
LABEL_27:
    a2[2] = v15;
    *(_QWORD *)a2 = v14;
    return this;
  }
  if (v2 == &unk_1C866F1AC)
    return (uint64_t)llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt((llvm::detail::IEEEFloat *)this, a2);
  if (v2 == &unk_1C866F22C)
    return (uint64_t)llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt((uint64_t **)this, a2);
  if (v2 == &unk_1C866F1D4)
    return llvm::detail::IEEEFloat::convertFloat8E5M2APFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &unk_1C866F1E8)
    return llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt(this, (uint64_t)a2);
  return (uint64_t)llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt((llvm::detail::IEEEFloat *)this, a2);
}

float llvm::detail::IEEEFloat::convertToFloat(llvm::detail::IEEEFloat *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v5;
  uint64_t *v6;
  unsigned int v7;

  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)this, (unsigned int *)&v6);
  if (v7 >= 0x41)
    v1 = v6;
  else
    v1 = (uint64_t *)&v6;
  v2 = *v1;
  if (v7 >= 0x41 && v6 != 0)
  {
    v5 = v2;
    MEMORY[0x1CAA32F9C]();
    LODWORD(v2) = v5;
  }
  return *(float *)&v2;
}

double llvm::detail::IEEEFloat::convertToDouble(llvm::detail::IEEEFloat *this)
{
  double *v1;
  double result;
  double v4;
  double *v5;
  unsigned int v6;

  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)this, (unsigned int *)&v5);
  if (v6 >= 0x41)
    v1 = v5;
  else
    v1 = (double *)&v5;
  result = *v1;
  if (v6 >= 0x41 && v5 != 0)
  {
    v4 = *v1;
    MEMORY[0x1CAA32F9C]();
    return v4;
  }
  return result;
}

void llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(int **this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  BOOL v12;
  BOOL v13;
  int v14;
  int *v15;
  int v16;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3;
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 & 0x7FFF;
  *this = (int *)&unk_1C866F1FC;
  v7 = (int *)operator new[]();
  this[1] = v7;
  v8 = (int *)(this + 1);
  v9 = *((_BYTE *)this + 20);
  v10 = (v5 >> 12) & 8;
  *((_BYTE *)this + 20) = v9 & 0xF7 | (v5 >> 12) & 8;
  if (v6 | v4)
  {
    if (v4 == 0x8000000000000000 && v6 == 0x7FFF)
    {
      llvm::detail::IEEEFloat::makeInf(this, v10 != 0);
    }
    else
    {
      v12 = v4 != 0x8000000000000000 && v6 == 0x7FFF;
      if (!v12 && (v4 < 0 || ((v5 & 0x7FFF) != 0 ? (v13 = v6 == 0x7FFF) : (v13 = 1), v13)))
      {
        *((_BYTE *)this + 20) = v9 & 0xF0 | (v5 >> 12) & 8 | 2;
        *((_DWORD *)this + 4) = v6 - 0x3FFF;
        if (((*this)[2] - 64) < 0xFFFFFF80)
          v8 = v7;
        *(_QWORD *)v8 = v4;
        *((_QWORD *)v8 + 1) = 0;
        if ((v5 & 0x7FFF) == 0)
          *((_DWORD *)this + 4) = -16382;
      }
      else
      {
        *((_BYTE *)this + 20) = v9 & 0xF0 | (v5 >> 12) & 8 | 1;
        v15 = *this;
        v16 = **this;
        if ((*this)[4] != 1)
          ++v16;
        *((_DWORD *)this + 4) = v16;
        if ((v15[2] - 64) < 0xFFFFFF80)
          v8 = v7;
        *(_QWORD *)v8 = v4;
        *((_QWORD *)v8 + 1) = 0;
      }
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v10 | v9 & 0xF0 | 3;
    v14 = (*this)[2];
    *((_DWORD *)this + 4) = (*this)[1] - 1;
    if ((v14 - 64) < 0xFFFFFF80)
    {
      *(_QWORD *)v7 = 0;
      bzero(v7 + 2, 8 * (((v14 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *(_QWORD *)v8 = 0;
    }
  }
}

void llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  const llvm::APInt *v4;
  const llvm::APInt *v5;
  const llvm::APInt *v7;
  int v8;
  const llvm::APInt *v9;
  uint64_t v10;
  char v11;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(const llvm::APInt **)v3;
  v5 = (const llvm::APInt *)*((_QWORD *)v3 + 1);
  LODWORD(v10) = 64;
  v9 = v4;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v9);
  llvm::detail::IEEEFloat::convert((uint64_t *)this, (uint64_t)&unk_1C866F22C, 1, &v11);
  if ((*((_BYTE *)this + 20) & 6) != 0 && (*((_BYTE *)this + 20) & 7) != 3)
  {
    v8 = 64;
    v7 = v5;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v9, &v7);
    llvm::detail::IEEEFloat::convert((uint64_t *)&v9, (uint64_t)&unk_1C866F22C, 1, &v11);
    llvm::detail::IEEEFloat::addOrSubtract(this, (const llvm::detail::IEEEFloat *)&v9, 1, 0);
    if ((*((_DWORD *)v9 + 2) - 64) <= 0xFFFFFF7F)
    {
      if (v10)
        MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    }
  }
}

void llvm::detail::IEEEFloat::initFromDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v2 = *a2;
  else
    v2 = (const llvm::APInt *)a2;
  v3 = *(_QWORD *)v2;
  v4 = (*(_QWORD *)v2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFLL;
  *(_QWORD *)this = &unk_1C866F198;
  v6 = *((_BYTE *)this + 20);
  v7 = v3 >> 60;
  *((_BYTE *)this + 20) = v6 & 0xF7 | v7 & 8;
  if (v4 | v5)
  {
    if (!v5 && v4 == 2047)
    {
      llvm::detail::IEEEFloat::makeInf((int **)this, v7 > 7);
      return;
    }
    v9 = v6 & 0xF0 | v7 & 8;
    if (v5 && v4 == 2047)
    {
      *((_BYTE *)this + 20) = v9 | 1;
      *((_DWORD *)this + 4) = 1024;
LABEL_17:
      *((_QWORD *)this + 1) = v5;
      return;
    }
    *((_BYTE *)this + 20) = v9 | 2;
    *((_DWORD *)this + 4) = v4 - 1023;
    *((_QWORD *)this + 1) = v5;
    if (v4)
    {
      v5 |= 0x10000000000000uLL;
      goto LABEL_17;
    }
    *((_DWORD *)this + 4) = -1022;
  }
  else
  {
    if (v7 <= 7)
      v8 = 3;
    else
      v8 = 11;
    *((_BYTE *)this + 20) = v8 | v6 & 0xF0;
    *((_DWORD *)this + 4) = -1023;
    *((_QWORD *)this + 1) = 0;
  }
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  return a1;
}

{
  llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  return a1;
}

void llvm::detail::IEEEFloat::initFromQuadrupleAPInt(int **this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  char v16;
  char v18;
  int v19;
  int *v20;
  int v21;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(int **)v3;
  v5 = *((_QWORD *)v3 + 1);
  v6 = HIWORD(v5) & 0x7FFF;
  v7 = v5 & 0xFFFFFFFFFFFFLL;
  *this = (int *)&unk_1C866F1AC;
  v8 = (int *)operator new[]();
  this[1] = v8;
  v9 = this + 1;
  v10 = *((_BYTE *)this + 20);
  v11 = v5 >> 60;
  *((_BYTE *)this + 20) = v10 & 0xF7 | (v5 >> 60) & 8;
  if (v6)
    v12 = 0;
  else
    v12 = v4 == 0;
  if (v12 && v7 == 0)
  {
    if (v11 <= 7)
      v18 = 3;
    else
      v18 = 11;
    *((_BYTE *)this + 20) = v10 & 0xF0 | v18;
    v19 = (*this)[2];
    *((_DWORD *)this + 4) = (*this)[1] - 1;
    if ((v19 - 64) < 0xFFFFFF80)
    {
      *(_QWORD *)v8 = 0;
      bzero(v8 + 2, 8 * (((v19 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *v9 = 0;
    }
    return;
  }
  if (v6 == 0x7FFF && v4 == 0 && v7 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v11 > 7);
    return;
  }
  v16 = v10 & 0xF0 | (v5 >> 60) & 8;
  if (v6 != 0x7FFF || ((unint64_t)v4 | v7) == 0)
  {
    *((_BYTE *)this + 20) = v16 | 2;
    *((_DWORD *)this + 4) = v6 - 0x3FFF;
    if (((*this)[2] - 64) > 0xFFFFFF7F)
    {
      this[1] = v4;
      this[2] = (int *)v7;
      v8 = (int *)(this + 1);
      if (v6)
        goto LABEL_25;
    }
    else
    {
      *(_QWORD *)v8 = v4;
      *((_QWORD *)v8 + 1) = v7;
      if (v6)
      {
LABEL_25:
        *((_QWORD *)v8 + 1) = v7 | 0x1000000000000;
        return;
      }
    }
    *((_DWORD *)this + 4) = -16382;
    return;
  }
  *((_BYTE *)this + 20) = v16 | 1;
  v20 = *this;
  v21 = **this;
  if ((*this)[4] != 1)
    ++v21;
  *((_DWORD *)this + 4) = v21;
  if ((v20[2] - 64) < 0xFFFFFF80)
    v9 = v8;
  *v9 = v4;
  v9[1] = v7;
}

void llvm::detail::IEEEFloat::initFromFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v2 = *a2;
  else
    v2 = (const llvm::APInt *)a2;
  v3 = *(_QWORD *)v2;
  v4 = (v3 >> 23);
  v5 = v3 & 0x7FFFFF;
  *(_QWORD *)this = &unk_1C866F184;
  v6 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = v6 & 0xF7 | (8 * ((int)v3 < 0));
  if (v4 | v3 & 0x7FFFFF)
  {
    if (!v5 && v4 == 255)
    {
      llvm::detail::IEEEFloat::makeInf((int **)this, v3 >> 31);
      return;
    }
    v8 = v6 & 0xF0 | (8 * ((int)v3 < 0));
    if (v5 && v4 == 255)
    {
      *((_BYTE *)this + 20) = v8 | 1;
      *((_DWORD *)this + 4) = 128;
      v9 = v3 & 0x7FFFFF;
LABEL_17:
      *((_QWORD *)this + 1) = v9;
      return;
    }
    *((_BYTE *)this + 20) = v8 | 2;
    *((_DWORD *)this + 4) = v4 - 127;
    v10 = v3 & 0x7FFFFF;
    *((_QWORD *)this + 1) = v10;
    if (v4)
    {
      v9 = v10 | 0x800000;
      goto LABEL_17;
    }
    *((_DWORD *)this + 4) = -126;
  }
  else
  {
    if ((int)v3 >= 0)
      v7 = 3;
    else
      v7 = 11;
    *((_BYTE *)this + 20) = v7 | v6 & 0xF0;
    *((_DWORD *)this + 4) = -127;
    *((_QWORD *)this + 1) = 0;
  }
}

void llvm::detail::IEEEFloat::initFromBFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v2;
  uint64_t v3;
  int v4;
  char v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v2 = *a2;
  else
    v2 = (const llvm::APInt *)a2;
  v3 = *(_QWORD *)v2;
  v4 = (v3 >> 7);
  *(_QWORD *)this = &unk_1C866F170;
  v5 = *((_BYTE *)this + 20);
  v6 = (v3 >> 12) & 8;
  *((_BYTE *)this + 20) = v5 & 0xF7 | (v3 >> 12) & 8;
  if (!(v4 | v3 & 0x7F))
  {
    *((_BYTE *)this + 20) = v6 | v5 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -127;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  if ((v3 & 0x7F) == 0 && v4 == 255)
  {
    llvm::detail::IEEEFloat::makeInf((int **)this, v6 != 0);
    return;
  }
  v7 = v5 & 0xF0 | (v3 >> 12) & 8;
  if ((v3 & 0x7F) != 0 && v4 == 255)
  {
    *((_BYTE *)this + 20) = v7 | 1;
    *((_DWORD *)this + 4) = 128;
    v8 = v3 & 0x7F;
LABEL_14:
    *((_QWORD *)this + 1) = v8;
    return;
  }
  *((_BYTE *)this + 20) = v7 | 2;
  *((_DWORD *)this + 4) = v4 - 127;
  v9 = v3 & 0x7F;
  *((_QWORD *)this + 1) = v9;
  if (v4)
  {
    v8 = v9 | 0x80;
    goto LABEL_14;
  }
  *((_DWORD *)this + 4) = -126;
}

void llvm::detail::IEEEFloat::initFromHalfAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  char v8;
  uint64_t v10;
  uint64_t v11;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v2 = *a2;
  else
    v2 = (const llvm::APInt *)a2;
  v3 = *(_QWORD *)v2;
  v4 = (v3 >> 10) & 0x1F;
  *(_QWORD *)this = &unk_1C866F15C;
  v5 = *((_BYTE *)this + 20);
  v6 = (v3 >> 12) & 8;
  *((_BYTE *)this + 20) = v5 & 0xF7 | (v3 >> 12) & 8;
  if (!(v4 | v3 & 0x3FF))
  {
    *((_BYTE *)this + 20) = v6 | v5 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -15;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  if ((v3 & 0x3FF) == 0 && v4 == 31)
  {
    llvm::detail::IEEEFloat::makeInf((int **)this, v6 != 0);
    return;
  }
  v8 = v5 & 0xF0 | (v3 >> 12) & 8;
  if ((v3 & 0x3FF) != 0 && v4 == 31)
  {
    *((_BYTE *)this + 20) = v8 | 1;
    *((_DWORD *)this + 4) = 16;
    v11 = v3 & 0x3FF;
    goto LABEL_18;
  }
  *((_BYTE *)this + 20) = v8 | 2;
  *((_DWORD *)this + 4) = v4 - 15;
  v10 = v3 & 0x3FF;
  *((_QWORD *)this + 1) = v10;
  if (v4)
  {
    v11 = v10 | 0x400;
LABEL_18:
    *((_QWORD *)this + 1) = v11;
    return;
  }
  *((_DWORD *)this + 4) = -14;
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v2 = *a2;
  else
    v2 = (const llvm::APInt *)a2;
  v3 = *(_QWORD *)v2;
  v4 = (v3 >> 2) & 0x1F;
  *(_QWORD *)this = &unk_1C866F1D4;
  v5 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = v5 & 0xF7 | (v3 >> 4) & 8;
  if (v4 | v3 & 3)
  {
    if ((v3 & 3) == 0 && v4 == 31)
    {
      llvm::detail::IEEEFloat::makeInf((int **)this, ((char)v3 >> 7) & 1);
      return;
    }
    v7 = v5 & 0xF0 | (v3 >> 4) & 8;
    if ((v3 & 3) != 0 && v4 == 31)
    {
      *((_BYTE *)this + 20) = v7 | 1;
      *((_DWORD *)this + 4) = 16;
      v10 = v3 & 3;
      goto LABEL_21;
    }
    *((_BYTE *)this + 20) = v7 | 2;
    *((_DWORD *)this + 4) = v4 - 15;
    v9 = v3 & 3;
    *((_QWORD *)this + 1) = v9;
    if (v4)
    {
      v10 = v9 | 4;
LABEL_21:
      *((_QWORD *)this + 1) = v10;
      return;
    }
    *((_DWORD *)this + 4) = -14;
  }
  else
  {
    if ((v3 & 0x80u) == 0)
      v11 = 3;
    else
      v11 = 11;
    *((_BYTE *)this + 20) = v11 | v5 & 0xF0;
    *((_DWORD *)this + 4) = -15;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (*(_DWORD *)(a2 + 8) >= 0x41u)
    v2 = *(uint64_t **)a2;
  else
    v2 = (uint64_t *)a2;
  v3 = *v2;
  v4 = (v3 >> 3) & 0xF;
  *(_QWORD *)result = &unk_1C866F1E8;
  v5 = *(_BYTE *)(result + 20);
  if (v4 | v3 & 7)
  {
    v6 = v5 & 0xF0 | ((char)v3 >> 4) & 8;
    if ((v3 & 7) == 7 && v4 == 15)
    {
      *(_BYTE *)(result + 20) = v6 | 1;
      *(_DWORD *)(result + 16) = 8;
      v9 = 7;
      goto LABEL_16;
    }
    *(_BYTE *)(result + 20) = v6 | 2;
    *(_DWORD *)(result + 16) = v4 - 7;
    v8 = v3 & 7;
    *(_QWORD *)(result + 8) = v8;
    if (v4)
    {
      v9 = v8 | 8;
LABEL_16:
      *(_QWORD *)(result + 8) = v9;
      return result;
    }
    *(_DWORD *)(result + 16) = -6;
  }
  else
  {
    if ((v3 & 0x80u) == 0)
      v10 = 3;
    else
      v10 = 11;
    *(_BYTE *)(result + 20) = v10 | v5 & 0xF0;
    *(_DWORD *)(result + 16) = -7;
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void llvm::detail::IEEEFloat::initFromAPInt(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &unk_1C866F15C)
  {
    llvm::detail::IEEEFloat::initFromHalfAPInt(a1, a3);
  }
  else if (a2 == &unk_1C866F170)
  {
    llvm::detail::IEEEFloat::initFromBFloatAPInt(a1, a3);
  }
  else if (a2 == &unk_1C866F184)
  {
    llvm::detail::IEEEFloat::initFromFloatAPInt(a1, a3);
  }
  else if (a2 == &unk_1C866F198)
  {
    llvm::detail::IEEEFloat::initFromDoubleAPInt(a1, a3);
  }
  else if (a2 == &unk_1C866F1FC)
  {
    llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt((int **)a1, a3);
  }
  else if (a2 == &unk_1C866F1AC)
  {
    llvm::detail::IEEEFloat::initFromQuadrupleAPInt((int **)a1, a3);
  }
  else if (a2 == &unk_1C866F22C)
  {
    llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(a1, a3);
  }
  else if (a2 == &unk_1C866F1D4)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(a1, a3);
  }
  else
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt((uint64_t)a1, (uint64_t)a3);
  }
}

void *llvm::detail::IEEEFloat::makeLargest(llvm::detail::IEEEFloat *this, int a2)
{
  char v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;

  if (a2)
    v3 = 10;
  else
    v3 = 2;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | v3;
  v4 = *(_QWORD *)this;
  *((_DWORD *)this + 4) = **(_DWORD **)this;
  v5 = *(_DWORD *)(v4 + 8);
  v6 = (_QWORD *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v6 = (_QWORD *)*v6;
  v7 = v5 + 64;
  v8 = ((v5 + 64) >> 6) - 1;
  result = memset(v6, 255, 8 * v8);
  v10 = *(_QWORD *)this;
  if ((v7 & 0xFFFFFFC0) - *(_DWORD *)(*(_QWORD *)this + 8) >= 0x40)
    v11 = 0;
  else
    v11 = 0xFFFFFFFFFFFFFFFFLL >> ((v7 & 0xC0u) - *(_BYTE *)(*(_QWORD *)this + 8));
  v6[v8] = v11;
  if (*(_DWORD *)(v10 + 16) == 1)
    *v6 &= ~1uLL;
  return result;
}

uint64_t *llvm::detail::IEEEFloat::makeSmallestNormalized(uint64_t *this, int a2)
{
  uint64_t v2;
  int v3;
  _QWORD **v4;
  char v5;
  int v6;
  int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;

  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
  v2 = *this;
  v3 = *(_DWORD *)(*this + 8);
  v4 = (_QWORD **)(this + 1);
  if ((v3 - 64) < 0xFFFFFF80)
  {
    v12 = (_QWORD **)(this + 1);
    v8 = *v4;
    *v8 = 0;
    v10 = (uint64_t)this;
    v11 = v2;
    v9 = a2;
    bzero(v8 + 1, 8 * (((v3 + 64) >> 6) - 2) + 8);
    this = (uint64_t *)v10;
    v2 = v11;
    v4 = v12;
    a2 = v9;
  }
  else
  {
    *v4 = 0;
  }
  if (a2)
    v5 = 8;
  else
    v5 = 0;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF7 | v5;
  v7 = *(_DWORD *)(v2 + 4);
  v6 = *(_DWORD *)(v2 + 8);
  *((_DWORD *)this + 4) = v7;
  if ((v6 - 64) <= 0xFFFFFF7F)
    v4 = (_QWORD **)*v4;
  v4[((v6 + 63) >> 6) - 1] = (_QWORD *)((unint64_t)v4[((v6 + 63) >> 6) - 1] | (1 << (v6 + 63)));
  return this;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, float a2)
{
  const llvm::APInt *v4;
  int v5;

  v5 = 32;
  v4 = (const llvm::APInt *)LODWORD(a2);
  llvm::detail::IEEEFloat::initFromFloatAPInt(this, &v4);
  return this;
}

{
  const llvm::APInt *v4;
  int v5;

  v5 = 32;
  v4 = (const llvm::APInt *)LODWORD(a2);
  llvm::detail::IEEEFloat::initFromFloatAPInt(this, &v4);
  return this;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, double a2)
{
  const llvm::APInt *v4;
  int v5;

  v5 = 64;
  v4 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v4);
  return this;
}

{
  const llvm::APInt *v4;
  int v5;

  v5 = 64;
  v4 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v4);
  return this;
}

void llvm::detail::IEEEFloat::toString(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  int v23;
  llvm::APInt *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  signed int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int64_t v40;
  BOOL v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  llvm::APInt *v59;
  int v60;
  int64_t v61;
  unint64_t v62;
  unsigned int v63;
  int *v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  int v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  char v80;
  int v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  size_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  uint64_t v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  char v118;
  void *v119;
  __int128 v120;
  uint64_t v121;
  int *v122;
  unsigned int v123;
  llvm::APInt *v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int v127;
  void *__dst;
  __int128 v129;
  _QWORD v130[34];

  v130[32] = *MEMORY[0x1E0C80C00];
  v9 = *(_BYTE *)(a1 + 20) & 7;
  if (v9 == 3)
  {
    v18 = a2[1];
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    {
      if (v18 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v18 + 1, 1);
        v18 = a2[1];
      }
      *(_BYTE *)(*a2 + v18) = 45;
      v18 = a2[1] + 1;
      a2[1] = v18;
    }
    if (a4)
    {
      if (v18 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v18 + 1, 1);
        v18 = a2[1];
      }
      *(_BYTE *)(*a2 + v18) = 48;
      v17 = a2[1] + 1;
      goto LABEL_65;
    }
    v28 = a2[2];
    if (a5)
    {
      if (v28 < v18 + 6)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v18 + 6, 1);
        v18 = a2[1];
      }
      v29 = *a2 + v18;
      *(_WORD *)(v29 + 4) = 12331;
      *(_DWORD *)v29 = 1160785456;
      v17 = a2[1] + 6;
      goto LABEL_65;
    }
    if (v28 < v18 + 3)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v18 + 3, 1);
      v18 = a2[1];
    }
    v35 = *a2 + v18;
    *(_BYTE *)(v35 + 2) = 48;
    *(_WORD *)v35 = 11824;
    v10 = a2[1] + 3;
    a2[1] = v10;
    if (a3 >= 2)
    {
      v36 = a3 - 1;
      if (v10 + v36 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + v36, 1);
        v10 = a2[1];
      }
      memset((void *)(*a2 + v10), 48, a3 - 1);
      v10 = a2[1] + v36;
      a2[1] = v10;
    }
    if (a2[2] < (unint64_t)(v10 + 4))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + 4, 1);
      v10 = a2[1];
    }
    v13 = *a2;
    v14 = 808463205;
    goto LABEL_64;
  }
  if (v9 == 1)
  {
    v15 = a2[1];
    if (a2[2] < (unint64_t)(v15 + 3))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v15 + 3, 1);
      v15 = a2[1];
    }
    v16 = *a2 + v15;
    *(_BYTE *)(v16 + 2) = 78;
    *(_WORD *)v16 = 24910;
    v17 = a2[1] + 3;
    goto LABEL_65;
  }
  if ((*(_BYTE *)(a1 + 20) & 7) == 0)
  {
    v10 = a2[1];
    v11 = a2[2];
    v12 = v10 + 4;
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    {
      if (v11 < v10 + 4)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v12, 1);
        v10 = a2[1];
      }
      v13 = *a2;
      v14 = 1718503725;
    }
    else
    {
      if (v11 < v10 + 4)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v12, 1);
        v10 = a2[1];
      }
      v13 = *a2;
      v14 = 1718503723;
    }
LABEL_64:
    *(_DWORD *)(v13 + v10) = v14;
    v17 = a2[1] + 4;
LABEL_65:
    a2[1] = v17;
    return;
  }
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    v20 = a2[1];
    if (v20 + 1 > (unint64_t)a2[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v20 + 1, 1);
      v20 = a2[1];
    }
    *(_BYTE *)(*a2 + v20) = 45;
    ++a2[1];
  }
  v21 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v22 = (uint64_t *)(a1 + 8);
  if ((v21 - 64) <= 0xFFFFFF7F)
    v22 = (uint64_t *)*v22;
  v23 = *(_DWORD *)(a1 + 16);
  v125 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  llvm::APInt::initFromArray((unsigned int *)&v124, v22, (v21 + 63) >> 6);
  if (!a3)
    a3 = 59 * *(_DWORD *)(*(_QWORD *)a1 + 8) / 0xC4u + 2;
  v25 = v125;
  if (v125 > 0x40)
  {
    v27 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v124);
    llvm::APInt::tcShiftRight(v124, (unint64_t *)((unint64_t)(v25 + 63) >> 6), v27);
  }
  else
  {
    v26 = __clz(__rbit64((unint64_t)v124));
    if (v125 >= v26)
      v27 = v26;
    else
      v27 = v125;
    if (v125 > v26)
      v124 = (llvm::APInt *)((unint64_t)v124 >> v27);
    else
      v124 = 0;
  }
  v30 = v23 - v21 + v27;
  v31 = v30 + 1;
  if (v30 != -1)
  {
    if (v31 < 1)
    {
      v32 = *(_DWORD *)(*(_QWORD *)a1 + 8) + (-137 * v31 + 136) / 59;
      llvm::APInt::zext((llvm::APInt *)&v124, v32, (uint64_t)&__dst);
      if (v125 >= 0x41 && v124)
        MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
      v33 = -v31;
      v124 = (llvm::APInt *)__dst;
      v125 = v129;
      LODWORD(v120) = v32;
      if (v32 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v119, 5, 0);
        v32 = v120;
      }
      else
      {
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
        if (!v32)
          LOBYTE(v34) = 0;
        v119 = (void *)(v34 & 5);
      }
      while (1)
      {
        if ((v33 & 1) != 0)
        {
          llvm::APInt::operator*((uint64_t)&v124, &v119, (uint64_t)&__dst);
          if (v125 >= 0x41 && v124)
            MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
          v124 = (llvm::APInt *)__dst;
          v125 = v129;
        }
        if (v33 < 2)
          break;
        llvm::APInt::operator*((uint64_t)&v119, &v119, (uint64_t)&__dst);
        if (v32 >= 0x41 && v119)
          MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
        v33 >>= 1;
        v119 = __dst;
        v32 = v129;
        LODWORD(v120) = v129;
      }
      if (v32 >= 0x41 && v119)
        MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
    }
    else
    {
      llvm::APInt::zext((llvm::APInt *)&v124, *(_DWORD *)(*(_QWORD *)a1 + 8) + v31, (uint64_t)&__dst);
      if (v125 >= 0x41 && v124)
        MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
      v124 = (llvm::APInt *)__dst;
      v125 = v129;
      sub_1C4888094((uint64_t)&v124, v31);
      v31 = 0;
    }
  }
  v37 = v125;
  if (v125 > 0x40)
  {
    v39 = 0;
    v40 = ((unint64_t)v125 + 63) >> 6;
    do
    {
      v41 = v40-- < 1;
      if (v41)
        break;
      v42 = *((_QWORD *)v124 + v40);
      v39 += __clz(v42);
    }
    while (!v42);
    v43 = v125 | 0xFFFFFFC0;
    if ((v125 & 0x3F) == 0)
      v43 = 0;
    v38 = v39 + v43;
  }
  else
  {
    v38 = v125 + __clz((unint64_t)v124) - 64;
  }
  v44 = v125 - v38;
  v45 = (196 * a3 + 58) / 0x3B;
  v46 = v44 >= v45;
  v47 = v44 - v45;
  if (v47 == 0 || !v46)
    goto LABEL_133;
  v48 = 59 * v47;
  if (v48 < 0xC4)
    goto LABEL_133;
  v49 = v48 / 0xC4;
  v31 += v48 / 0xC4;
  LODWORD(v120) = v125;
  if (v125 <= 0x40)
  {
    v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v125;
    if (v125)
      v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v125;
    else
      LOBYTE(v51) = 0;
    v119 = (void *)(v51 & 1);
    v127 = v125;
    goto LABEL_97;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v119, 1, 0);
  v37 = v125;
  v127 = v125;
  if (v125 <= 0x40)
  {
    v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v125;
LABEL_97:
    if (!v37)
      LOBYTE(v50) = 0;
    v126 = v50 & 0xA;
    goto LABEL_106;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v126, 10, 0);
  v37 = v127;
  while (1)
  {
LABEL_106:
    if ((v49 & 1) != 0)
    {
      llvm::APInt::operator*((uint64_t)&v119, &v126, (uint64_t)&__dst);
      if (v120 >= 0x41 && v119)
        MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
      v119 = __dst;
      LODWORD(v120) = v129;
    }
    if (v49 < 2)
      break;
    llvm::APInt::operator*((uint64_t)&v126, &v126, (uint64_t)&__dst);
    if (v37 >= 0x41 && v126)
      MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
    v49 >>= 1;
    v126 = (unint64_t)__dst;
    v37 = v129;
    v127 = v129;
  }
  llvm::APInt::udiv((llvm::APInt *)&v124, (const llvm::APInt *)&v119, (llvm::APInt *)&__dst);
  if (v125 >= 0x41 && v124)
    MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
  v124 = (llvm::APInt *)__dst;
  v125 = v129;
  if (v129 > 0x40)
  {
    v53 = 0;
    v54 = ((unint64_t)v129 + 63) >> 6;
    do
    {
      v41 = v54-- < 1;
      if (v41)
        break;
      v55 = *((_QWORD *)__dst + v54);
      v53 += __clz(v55);
    }
    while (!v55);
    v56 = v129 | 0xFFFFFFC0;
    if ((v129 & 0x3F) == 0)
      v56 = 0;
    v52 = v53 + v56;
  }
  else
  {
    v52 = v129 + __clz((unint64_t)__dst) - 64;
  }
  llvm::APInt::trunc((llvm::APInt *)&v124, v129 - v52, (llvm::APInt *)&__dst);
  if (v125 >= 0x41 && v124)
    MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
  v124 = (llvm::APInt *)__dst;
  v125 = v129;
  if (v127 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  if (v120 >= 0x41 && v119)
    MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
  v37 = v125;
LABEL_133:
  __dst = v130;
  v129 = xmmword_1C64638F0;
  v127 = v37;
  if (v37 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v126, 10, 0);
    v123 = v37;
    llvm::APInt::initSlowCase((llvm::APInt *)&v122, 0, 0);
  }
  else
  {
    if (v37)
      v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
    else
      LOBYTE(v57) = 0;
    v126 = v57 & 0xA;
    v123 = v37;
    v122 = 0;
  }
  LOBYTE(v58) = 1;
  while (1)
  {
    v59 = v124;
    if (v125 < 0x41)
      break;
    v60 = 0;
    v61 = ((unint64_t)v125 + 63) >> 6;
    do
    {
      v41 = v61-- < 1;
      if (v41)
        break;
      v62 = *((_QWORD *)v124 + v61);
      v60 += __clz(v62);
    }
    while (!v62);
    v63 = v125 | 0xFFFFFFC0;
    if ((v125 & 0x3F) == 0)
      v63 = 0;
    if (v125 - v60 - v63 <= 0x40)
    {
      v59 = *(llvm::APInt **)v124;
      break;
    }
LABEL_147:
    llvm::APInt::udivrem(&v124, (const llvm::APInt *)&v126, (const llvm::APInt *)&v124, (llvm::APInt *)&v122, v24);
    if (v123 >= 0x41)
      v64 = v122;
    else
      v64 = (int *)&v122;
    v65 = *v64;
    v58 = v58 & (*v64 == 0);
    if (v58 == 1)
    {
      ++v31;
    }
    else
    {
      v66 = v129;
      if ((unint64_t)(v129 + 1) > *((_QWORD *)&v129 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v130, v129 + 1, 1);
        v66 = v129;
      }
      *((_BYTE *)__dst + v66) = v65 + 48;
      *(_QWORD *)&v129 = v129 + 1;
    }
  }
  if (v59)
    goto LABEL_147;
  v67 = v129;
  v68 = v129 - a3;
  if (v129 > a3)
  {
    v69 = __dst;
    if (*((char *)__dst + (v68 - 1)) >= 53)
    {
      v71 = -a3;
      while (1)
      {
        v68 = (v129 + v71);
        v72 = *((unsigned __int8 *)__dst + v68);
        if (v72 != 57)
          break;
        v46 = __CFADD__(v71++, 1);
        if (v46)
          goto LABEL_171;
      }
      *((_BYTE *)__dst + v68) = v72 + 1;
      if (!v71)
      {
LABEL_171:
        v75 = 0;
        *(_QWORD *)&v129 = 0;
        if (!*((_QWORD *)&v129 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v130, 1uLL, 1);
          v75 = v129;
        }
        *((_BYTE *)__dst + v75) = 49;
        v76 = v129 + 1;
        LODWORD(v68) = v67;
        goto LABEL_178;
      }
      v73 = __dst;
      v74 = v129 - v68;
      if ((_QWORD)v129 != v68)
        memmove(__dst, (char *)__dst + v68, v129 - v68);
      v76 = &v73[v74] - (_BYTE *)__dst;
    }
    else
    {
      if (v68 < v129)
      {
        while (*((_BYTE *)__dst + v68) == 48)
        {
          if (v129 == ++v68)
          {
            LODWORD(v68) = v129;
            break;
          }
        }
      }
      v70 = v129 - v68;
      if ((_QWORD)v129 != v68)
        memmove(__dst, (char *)__dst + v68, v129 - v68);
      v76 = &v69[v70] - (_BYTE *)__dst;
    }
LABEL_178:
    v31 += v68;
    *(_QWORD *)&v129 = v76;
    v67 = v76;
  }
  if (!a4)
    goto LABEL_191;
  if (v31 < 0)
  {
    v81 = v31 + v67;
    if (((v31 + v67 - 1) & 0x80000000) != 0 && 1 - v81 > a4)
      goto LABEL_191;
    if (v81 < 1)
    {
      v113 = a2[1];
      if (v113 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v113 + 1, 1);
        v113 = a2[1];
      }
      *(_BYTE *)(*a2 + v113) = 48;
      v114 = a2[1];
      v115 = a2[2];
      v116 = v114 + 1;
      a2[1] = v114 + 1;
      if (v114 + 2 > v115)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v114 + 2, 1);
        v116 = a2[1];
      }
      *(_BYTE *)(*a2 + v116) = 46;
      v112 = a2[1] + 1;
      a2[1] = v112;
      if (v81)
      {
        do
        {
          if (v112 + 1 > (unint64_t)a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v112 + 1, 1);
            v112 = a2[1];
          }
          *(_BYTE *)(*a2 + v112) = 48;
          v112 = a2[1] + 1;
          a2[1] = v112;
          v46 = __CFADD__(v81++, 1);
        }
        while (!v46);
        v81 = 0;
      }
    }
    else
    {
      v107 = a2[1];
      v108 = v67 - 1;
      v109 = v31 + v67;
      do
      {
        v110 = *((_BYTE *)__dst + v108);
        if (v107 + 1 > (unint64_t)a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v107 + 1, 1);
          v107 = a2[1];
        }
        *(_BYTE *)(*a2 + v107) = v110;
        v111 = a2[1];
        v107 = v111 + 1;
        a2[1] = v111 + 1;
        --v108;
        --v109;
      }
      while (v109);
      if (v111 + 2 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v111 + 2, 1);
        v107 = a2[1];
      }
      *(_BYTE *)(*a2 + v107) = 46;
      v112 = a2[1] + 1;
      a2[1] = v112;
    }
    if (v81 != v67)
    {
      v117 = ~v81 + v67;
      do
      {
        v118 = *((_BYTE *)__dst + v117);
        if (v112 + 1 > (unint64_t)a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v112 + 1, 1);
          v112 = a2[1];
        }
        *(_BYTE *)(*a2 + v112) = v118;
        v112 = a2[1] + 1;
        a2[1] = v112;
        --v117;
      }
      while (v117 != -1);
    }
  }
  else
  {
    if (v31 <= a4 && v31 + v67 <= a3)
    {
      if (v67)
      {
        v77 = v67;
        v78 = a2[1];
        v79 = v67 - 1;
        do
        {
          v80 = *((_BYTE *)__dst + v79);
          if (v78 + 1 > (unint64_t)a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v78 + 1, 1);
            v78 = a2[1];
          }
          *(_BYTE *)(*a2 + v78) = v80;
          v78 = a2[1] + 1;
          a2[1] = v78;
          --v79;
          --v77;
        }
        while (v77);
      }
      if (v31)
      {
        v104 = a2[1];
        do
        {
          if (v104 + 1 > (unint64_t)a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v104 + 1, 1);
            v104 = a2[1];
          }
          *(_BYTE *)(*a2 + v104) = 48;
          v104 = a2[1] + 1;
          a2[1] = v104;
          --v31;
        }
        while (v31);
      }
      goto LABEL_235;
    }
LABEL_191:
    v82 = v67 - 1;
    v83 = *((_BYTE *)__dst + v67 - 1);
    v84 = a2[1];
    if (v84 + 1 > (unint64_t)a2[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + 1, 1);
      v84 = a2[1];
    }
    *(_BYTE *)(*a2 + v84) = v83;
    v85 = a2[1];
    v86 = a2[2];
    v87 = v85 + 1;
    a2[1] = v85 + 1;
    if (v85 + 2 > v86)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v85 + 2, 1);
      v87 = a2[1];
    }
    *(_BYTE *)(*a2 + v87) = 46;
    v88 = a2[1];
    v89 = v88 + 1;
    a2[1] = v88 + 1;
    if (v67 == 1 && (a5 & 1) != 0)
    {
      if (v88 + 2 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v88 + 2, 1);
        v89 = a2[1];
      }
      *(_BYTE *)(*a2 + v89) = 48;
      v89 = a2[1] + 1;
      a2[1] = v89;
    }
    else if (v67 != 1)
    {
      v105 = v67 - 2;
      do
      {
        v106 = *((_BYTE *)__dst + v105);
        if (v89 + 1 > (unint64_t)a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v89 + 1, 1);
          v89 = a2[1];
        }
        *(_BYTE *)(*a2 + v89) = v106;
        v89 = a2[1] + 1;
        a2[1] = v89;
        --v105;
      }
      while (v105 != -1);
    }
    if ((a5 & 1) != 0)
    {
      v90 = 69;
      goto LABEL_209;
    }
    if (a3 > v82)
    {
      v91 = a3 - v67 + 1;
      if (v89 + v91 > a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v89 + v91, 1);
        v89 = a2[1];
        if ((_DWORD)v91)
        {
LABEL_206:
          memset((void *)(*a2 + v89), 48, v91);
          v89 = a2[1];
        }
      }
      else if ((_DWORD)v91)
      {
        goto LABEL_206;
      }
      v89 += v91;
      a2[1] = v89;
    }
    v90 = 101;
LABEL_209:
    v92 = v82 + v31;
    if (v89 + 1 > (unint64_t)a2[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v89 + 1, 1);
      v89 = a2[1];
    }
    *(_BYTE *)(*a2 + v89) = v90;
    v93 = a2[1];
    v94 = a2[2];
    v95 = v93 + 1;
    a2[1] = v93 + 1;
    if (v92 < 0)
      v96 = 45;
    else
      v96 = 43;
    if (v93 + 2 > v94)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v93 + 2, 1);
      v95 = a2[1];
    }
    v97 = 0;
    *(_BYTE *)(*a2 + v95) = v96;
    ++a2[1];
    if (v92 >= 0)
      v98 = v92;
    else
      v98 = -v92;
    v119 = &v121;
    v120 = xmmword_1C85F9DD0;
    do
    {
      if (v97 + 1 > *((_QWORD *)&v120 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v119, &v121, v97 + 1, 1);
        v97 = v120;
      }
      *((_BYTE *)v119 + v97) = (v98 % 0xA) | 0x30;
      v99 = v120;
      v97 = v120 + 1;
      *(_QWORD *)&v120 = v120 + 1;
      v41 = v98 > 9;
      v98 /= 0xAu;
    }
    while (v41);
    if ((a5 & 1) == 0 && v97 <= 1)
    {
      if ((unint64_t)(v99 + 2) > *((_QWORD *)&v120 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v119, &v121, v99 + 2, 1);
        v97 = v120;
      }
      *((_BYTE *)v119 + v97) = 48;
      LODWORD(v97) = v120 + 1;
      *(_QWORD *)&v120 = v120 + 1;
    }
    v100 = v97;
    if ((_DWORD)v97)
    {
      v101 = a2[1];
      v102 = v97 - 1;
      do
      {
        v103 = *((_BYTE *)v119 + v102);
        if (v101 + 1 > (unint64_t)a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v101 + 1, 1);
          v101 = a2[1];
        }
        *(_BYTE *)(*a2 + v101) = v103;
        v101 = a2[1] + 1;
        a2[1] = v101;
        --v102;
        --v100;
      }
      while (v100);
    }
    if (v119 != &v121)
      free(v119);
  }
LABEL_235:
  if (v123 >= 0x41 && v122)
    MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
  if (v127 >= 0x41 && v126)
    MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
  if (__dst != v130)
    free(__dst);
  if (v125 >= 0x41 && v124)
    MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
}

uint64_t llvm::detail::IEEEFloat::getExactInverse(_BYTE *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unsigned int v26;
  char v27;
  _BYTE v28[8];
  uint64_t v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  if ((a1[20] & 6) == 0 || (a1[20] & 7) == 3)
    return 0;
  v4 = (void **)a1;
  v6 = (unint64_t *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v8 = v7 - 64;
  if (v7 - 64 <= 0xFFFFFF7F)
  {
    v6 = (unint64_t *)*v6;
    v9 = v7 + 64;
  }
  else
  {
    v9 = v7 + 64;
    if (v7 > 0xFFFFFFBF)
    {
LABEL_29:
      v14 = -1;
      goto LABEL_10;
    }
  }
  v10 = 0;
  v11 = (unint64_t)v9 >> 6;
  while (1)
  {
    v13 = *v6++;
    v12 = v13;
    if (v13)
      break;
    v10 -= 64;
    if (!--v11)
      goto LABEL_29;
  }
  v14 = __clz(__rbit64(v12)) - v10;
LABEL_10:
  if (v14 != v7 - 1)
    return 0;
  v24 = *(uint64_t **)a1;
  if (v9 >= 0x80)
  {
    v19 = v5;
    a1 = (_BYTE *)operator new[]();
    v25 = a1;
    v7 = *(_DWORD *)(v19 + 8);
    v8 = v7 - 64;
  }
  v27 = 2;
  v17 = &v25;
  v18 = &v25;
  if (v8 <= 0xFFFFFF7F)
    v18 = a1;
  *v18 = 0;
  if (v7 + 64 >= 0x80)
  {
    v21 = v7;
    v20 = v8;
    bzero(v18 + 1, 8 * (((v7 + 64) >> 6) - 2) + 8);
    v17 = &v25;
    v8 = v20;
    v7 = v21;
  }
  v26 = v7 - 1;
  if (v8 <= 0xFFFFFF7F)
    v17 = v25;
  *v17 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v24, 1, 0);
  if (llvm::detail::IEEEFloat::divide((llvm::detail::IEEEFloat *)&v24, (const llvm::detail::IEEEFloat *)v4, 1)|| llvm::detail::IEEEFloat::isDenormal((llvm::detail::IEEEFloat *)&v24))
  {
    v15 = 0;
  }
  else
  {
    if (a2)
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v22, &v24);
      sub_1C5DC0EE8((uint64_t)v28, (uint64_t)&v22, *v4);
      sub_1C48552C0(a2 + 8, (uint64_t)v29);
      sub_1C47A8258(v29);
      if ((*(_DWORD *)(v22 + 8) - 64) <= 0xFFFFFF7F)
      {
        if (v23)
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
      }
    }
    v15 = 1;
  }
  if ((*((_DWORD *)v24 + 2) - 64) <= 0xFFFFFF7F && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  return v15;
}

uint64_t sub_1C5DC0EE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;

  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)a2;
  v7 = v4;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 20) & 0xF;
  *(_QWORD *)a2 = &unk_1C866F210;
  llvm::APFloat::Storage::Storage(a1 + 8, &v6, a3);
  if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  return a1;
}

uint64_t llvm::detail::IEEEFloat::exponentInf(llvm::detail::IEEEFloat *this)
{
  return (**(_DWORD **)this + 1);
}

uint64_t llvm::detail::IEEEFloat::exponentZero(llvm::detail::IEEEFloat *this)
{
  return (*(_DWORD *)(*(_QWORD *)this + 4) - 1);
}

_QWORD *llvm::detail::frexp@<X0>(uint64_t *a1@<X0>, const llvm::detail::IEEEFloat *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  char v10;
  int v11;
  _BOOL4 v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  int v30;
  _BOOL4 v32;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  _BOOL4 v47;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  char v62;

  result = (_QWORD *)llvm::detail::ilogb((llvm::detail *)a1, a2);
  *(_DWORD *)a2 = (_DWORD)result;
  if ((_DWORD)result == 0x7FFFFFFF)
  {
    v28 = *a1;
    *(_QWORD *)a4 = *a1;
    if ((*(_DWORD *)(v28 + 8) + 64) >= 0x80)
    {
      result = (_QWORD *)operator new[]();
      *(_QWORD *)(a4 + 8) = result;
    }
    v29 = *((_BYTE *)a1 + 20);
    v30 = v29 & 7;
    *(_BYTE *)(a4 + 20) = *(_BYTE *)(a4 + 20) & 0xF0 | v29 & 0xF;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
    v32 = (v29 & 6) != 0 && v30 != 3;
    if (v30 == 1 || v32)
    {
      v34 = *(unsigned int *)(v28 + 8);
      v35 = (_QWORD *)(a4 + 8);
      if ((v34 - 64) <= 0xFFFFFF7F)
        v35 = (_QWORD *)*v35;
      v36 = *(_DWORD *)(*a1 + 8) - 64;
      v39 = (uint64_t *)a1[1];
      v38 = a1 + 1;
      v37 = v39;
      if (v36 >= 0xFFFFFF80)
        v40 = v38;
      else
        v40 = v37;
      if (v34 <= 0xFFFFFFBF)
      {
        v41 = (unint64_t)(v34 + 64) >> 6;
        do
        {
          v42 = *v40++;
          *v35++ = v42;
          --v41;
        }
        while (v41);
      }
    }
  }
  else
  {
    if ((_DWORD)result == -2147483647)
    {
      v27 = 0;
    }
    else
    {
      if ((_DWORD)result == 0x80000000)
      {
        v9 = *a1;
        *(_QWORD *)a4 = *a1;
        if ((*(_DWORD *)(v9 + 8) + 64) >= 0x80)
        {
          result = (_QWORD *)operator new[]();
          *(_QWORD *)(a4 + 8) = result;
        }
        v10 = *((_BYTE *)a1 + 20);
        v11 = v10 & 7;
        *(_BYTE *)(a4 + 20) = *(_BYTE *)(a4 + 20) & 0xF0 | v10 & 0xF;
        *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
        v13 = (v10 & 6) != 0 && v11 != 3;
        if (v11 == 1 || v13)
        {
          v14 = *(unsigned int *)(v9 + 8);
          v15 = (_QWORD *)(a4 + 8);
          if ((v14 - 64) <= 0xFFFFFF7F)
            v15 = (_QWORD *)*v15;
          v16 = *(_DWORD *)(*a1 + 8) - 64;
          v19 = (uint64_t *)a1[1];
          v18 = a1 + 1;
          v17 = v19;
          if (v16 >= 0xFFFFFF80)
            v20 = v18;
          else
            v20 = v17;
          if (v14 <= 0xFFFFFFBF)
          {
            v21 = (unint64_t)(v14 + 64) >> 6;
            do
            {
              v22 = *v20++;
              *v15++ = v22;
              --v21;
            }
            while (v21);
          }
        }
        if (*(_DWORD *)(v9 + 16) != 1)
        {
          v23 = *(_DWORD *)(v9 + 8);
          v26 = *(_QWORD *)(a4 + 8);
          v25 = a4 + 8;
          v24 = v26;
          if ((v23 - 64) >= 0xFFFFFF80)
            v24 = v25;
          *(_QWORD *)(v24 + 8 * ((v23 - 2) >> 6)) |= 1 << (v23 - 2);
        }
        return result;
      }
      v27 = (_DWORD)result + 1;
    }
    *(_DWORD *)a2 = v27;
    v43 = *a1;
    v59 = v43;
    if ((*(_DWORD *)(v43 + 8) + 64) >= 0x80)
    {
      v58 = v43;
      result = (_QWORD *)operator new[]();
      v43 = v58;
      v60 = result;
    }
    v44 = *((_BYTE *)a1 + 20);
    v45 = v44 & 7;
    v62 = v44 & 0xF;
    v61 = *((_DWORD *)a1 + 4);
    v47 = (v44 & 6) != 0 && v45 != 3;
    if (v45 == 1 || v47)
    {
      v49 = *(unsigned int *)(v43 + 8);
      v50 = (v49 - 64) <= 0xFFFFFF7F ? result : &v60;
      v51 = *(_DWORD *)(*a1 + 8) - 64;
      v54 = (uint64_t *)a1[1];
      v53 = a1 + 1;
      v52 = v54;
      v55 = v51 >= 0xFFFFFF80 ? v53 : v52;
      if (v49 <= 0xFFFFFFBF)
      {
        v56 = (unint64_t)(v49 + 64) >> 6;
        do
        {
          v57 = *v55++;
          *v50++ = v57;
          --v56;
        }
        while (v56);
      }
    }
    result = (_QWORD *)llvm::detail::scalbn(&v59, -*(_DWORD *)a2, a3, a4);
    if ((*(_DWORD *)(v59 + 8) - 64) <= 0xFFFFFF7F)
    {
      result = v60;
      if (v60)
        JUMPOUT(0x1CAA32F9CLL);
    }
  }
  return result;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = a2;
  v3 = operator new[]();
  *(_OWORD *)v3 = xmmword_1C85F9F80;
  *(_BYTE *)(v3 + 44) = *(_BYTE *)(v3 + 44) & 0xF0 | 3;
  *(_BYTE *)(v3 + 76) = *(_BYTE *)(v3 + 76) & 0xF0 | 3;
  *(_DWORD *)(v3 + 40) = -1023;
  *(_QWORD *)(v3 + 24) = &unk_1C866F198;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 72) = -1023;
  *(_QWORD *)(v3 + 56) = &unk_1C866F198;
  *(_QWORD *)(v3 + 64) = 0;
  a1[1] = v3 + 16;
  return a1;
}

{
  uint64_t v3;

  *a1 = a2;
  v3 = operator new[]();
  *(_OWORD *)v3 = xmmword_1C85F9F80;
  *(_BYTE *)(v3 + 44) = *(_BYTE *)(v3 + 44) & 0xF0 | 3;
  *(_BYTE *)(v3 + 76) = *(_BYTE *)(v3 + 76) & 0xF0 | 3;
  *(_DWORD *)(v3 + 40) = -1023;
  *(_QWORD *)(v3 + 24) = &unk_1C866F198;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 72) = -1023;
  *(_QWORD *)(v3 + 56) = &unk_1C866F198;
  *(_QWORD *)(v3 + 64) = 0;
  a1[1] = v3 + 16;
  return a1;
}

{
  uint64_t v3;

  *a1 = a2;
  v3 = operator new[]();
  *(_OWORD *)v3 = xmmword_1C85F9F80;
  llvm::detail::IEEEFloat::IEEEFloat((_QWORD *)(v3 + 24), (uint64_t)&unk_1C866F198);
  llvm::detail::IEEEFloat::IEEEFloat((_QWORD *)(v3 + 56), (uint64_t)&unk_1C866F198);
  a1[1] = v3 + 16;
  return a1;
}

{
  uint64_t v3;

  *a1 = a2;
  v3 = operator new[]();
  *(_OWORD *)v3 = xmmword_1C85F9F80;
  llvm::detail::IEEEFloat::IEEEFloat((_QWORD *)(v3 + 24), (uint64_t)&unk_1C866F198);
  llvm::detail::IEEEFloat::IEEEFloat((_QWORD *)(v3 + 56), (uint64_t)&unk_1C866F198);
  a1[1] = v3 + 16;
  return a1;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = a2;
  v5 = operator new[]();
  *(_OWORD *)v5 = xmmword_1C85F9F80;
  llvm::detail::IEEEFloat::IEEEFloat((llvm::APInt *)(v5 + 24), (uint64_t)&unk_1C866F198, a3);
  *(_BYTE *)(v5 + 76) = *(_BYTE *)(v5 + 76) & 0xF0 | 3;
  *(_DWORD *)(v5 + 72) = -1023;
  *(_QWORD *)(v5 + 56) = &unk_1C866F198;
  *(_QWORD *)(v5 + 64) = 0;
  a1[1] = v5 + 16;
  return a1;
}

{
  _OWORD *v5;
  _OWORD *v6;
  llvm::detail::IEEEFloat *v7;
  llvm::detail::IEEEFloat *v8;
  const llvm::APInt **v9;
  const llvm::APInt *v10;
  const llvm::APInt **v11;
  const llvm::APInt *v12;
  const llvm::APInt *v14;
  int v15;
  const llvm::APInt *v16;
  int v17;

  *a1 = a2;
  v5 = (_OWORD *)operator new[]();
  v6 = v5 + 1;
  v7 = (llvm::detail::IEEEFloat *)((char *)v5 + 24);
  *v5 = xmmword_1C85F9F80;
  v8 = (llvm::detail::IEEEFloat *)((char *)v5 + 56);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v9 = *(const llvm::APInt ***)a3;
  else
    v9 = (const llvm::APInt **)a3;
  v10 = *v9;
  v17 = 64;
  v16 = v10;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v7, &v16);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v11 = *(const llvm::APInt ***)a3;
  else
    v11 = (const llvm::APInt **)a3;
  v12 = v11[1];
  v15 = 64;
  v14 = v12;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, &v14);
  a1[1] = v6;
  return a1;
}

{
  uint64_t v5;

  *a1 = a2;
  v5 = operator new[]();
  *(_OWORD *)v5 = xmmword_1C85F9F80;
  llvm::detail::IEEEFloat::IEEEFloat((llvm::APInt *)(v5 + 24), (uint64_t)&unk_1C866F198, a3);
  llvm::detail::IEEEFloat::IEEEFloat((_QWORD *)(v5 + 56), (uint64_t)&unk_1C866F198);
  a1[1] = v5 + 16;
  return a1;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  *result = *a2;
  v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  *a2 = &unk_1C866F210;
  return result;
}

{
  uint64_t v2;

  *result = *a2;
  v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  *a2 = &unk_1C866F210;
  return result;
}

uint64_t llvm::detail::DoubleAPFloat::addImpl(uint64_t a1, llvm::detail::DoubleAPFloat *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::detail::DoubleAPFloat *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::detail::DoubleAPFloat *v12;
  char v13;
  int v14;
  _BOOL4 v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  char v27;
  int v28;
  _BOOL4 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  llvm::detail::IEEEFloat *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  const llvm::detail::DoubleAPFloat *v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  llvm::detail::DoubleAPFloat *v70;
  int v71;
  uint64_t v72;
  _BYTE *v73;
  llvm::detail::IEEEFloat *v74;
  uint64_t v75;
  char v76;
  int v77;
  _BOOL4 v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  _BYTE v103[8];
  uint64_t v104;
  _QWORD *v105;
  int v106;
  char v107;
  _BYTE v108[8];
  uint64_t v109;
  _QWORD *v110;
  int v111;
  char v112;
  _BYTE v113[8];
  void *v114;
  _BYTE *v115;
  int v116;
  char v117;
  uint64_t v118;

  v9 = a2;
  v10 = a1;
  v118 = *MEMORY[0x1E0C80C00];
  v12 = (llvm::detail::DoubleAPFloat *)((char *)a2 + 8);
  v11 = *((_QWORD *)a2 + 1);
  if ((_UNKNOWN *)v11 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v114, (llvm::detail::DoubleAPFloat *)((char *)a2 + 8));
  }
  else
  {
    v114 = (void *)*((_QWORD *)a2 + 1);
    if ((*(_DWORD *)(v11 + 8) + 64) >= 0x80)
    {
      a1 = operator new[]();
      v115 = (_BYTE *)a1;
    }
    v13 = *((_BYTE *)v9 + 28);
    v14 = v13 & 7;
    v117 = v13 & 0xF;
    v116 = *((_DWORD *)v9 + 6);
    v16 = (v13 & 6) != 0 && v14 != 3;
    if (v14 == 1 || v16)
    {
      v18 = *(unsigned int *)(v11 + 8);
      if ((v18 - 64) <= 0xFFFFFF7F)
        v19 = (_QWORD *)a1;
      else
        v19 = &v115;
      v20 = (uint64_t *)((char *)v9 + 16);
      if ((*(_DWORD *)(*((_QWORD *)v9 + 1) + 8) - 64) < 0xFFFFFF80)
        v20 = (uint64_t *)*((_QWORD *)v9 + 2);
      if (v18 <= 0xFFFFFFBF)
      {
        v21 = (unint64_t)(v18 + 64) >> 6;
        do
        {
          v22 = *v20++;
          *v19++ = v22;
          --v21;
        }
        while (v21);
      }
    }
  }
  v23 = sub_1C47B4138(v113, a4, a6);
  if (v114 == &unk_1C866F1C0)
    v24 = v115;
  else
    v24 = v113;
  v25 = v24[28];
  if ((v25 & 6) == 0)
  {
    if ((v25 & 7) != 0)
    {
      sub_1C48552C0(*(_QWORD *)(v10 + 8) + 8, (uint64_t)&v114);
      v60 = *(_QWORD *)(v10 + 8);
      v61 = *(_QWORD *)(v60 + 40);
      if ((_UNKNOWN *)v61 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v60 + 40), 0);
        goto LABEL_118;
      }
      *(_BYTE *)(v60 + 60) = *(_BYTE *)(v60 + 60) & 0xF0 | 3;
      *(_DWORD *)(v60 + 56) = *(_DWORD *)(v61 + 4) - 1;
      v62 = *(_DWORD *)(v61 + 8);
      if ((v62 - 64) >= 0xFFFFFF80)
      {
LABEL_73:
        *(_QWORD *)(v60 + 48) = 0;
        goto LABEL_118;
      }
    }
    else
    {
      v65 = (const llvm::detail::DoubleAPFloat *)(a4 + 8);
      v101 = a4 + 8;
      if (*(_UNKNOWN **)v12 == &unk_1C866F1C0)
        v66 = llvm::detail::DoubleAPFloat::compareAbsoluteValue(v12, v65);
      else
        v66 = llvm::detail::IEEEFloat::compareAbsoluteValue(v12, v65);
      v67 = v66;
      sub_1C4DF91B8((llvm::detail::IEEEFloat *)&v114, a5 + 8);
      v68 = sub_1C47B4138(v113, a3, a6);
      v100 = v67;
      v69 = v67 == 2;
      if (v67 == 2)
        v70 = (llvm::detail::DoubleAPFloat *)a4;
      else
        v70 = v9;
      if (!v69)
        v9 = (llvm::detail::DoubleAPFloat *)a4;
      v71 = sub_1C47B4138(v113, v70, a6);
      v72 = v71 | v68 | sub_1C47B4138(v113, v9, a6);
      if (v114 == &unk_1C866F1C0)
        v73 = v115;
      else
        v73 = v113;
      v74 = (llvm::detail::IEEEFloat *)(*(_QWORD *)(v10 + 8) + 8);
      if ((v73[28] & 6) != 0)
      {
        sub_1C4DF91B8(v74, (uint64_t)&v114);
        v75 = *(_QWORD *)(a3 + 8);
        if ((_UNKNOWN *)v75 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v109, (const llvm::detail::DoubleAPFloat *)(a3 + 8));
        }
        else
        {
          v109 = *(_QWORD *)(a3 + 8);
          if ((*(_DWORD *)(v75 + 8) + 64) >= 0x80)
            v110 = (_QWORD *)operator new[]();
          v76 = *(_BYTE *)(a3 + 28);
          v77 = v76 & 7;
          v112 = v112 & 0xF0 | v76 & 0xF;
          v111 = *(_DWORD *)(a3 + 24);
          v79 = (v76 & 6) != 0 && v77 != 3;
          if (v77 == 1 || v79)
          {
            v80 = *(unsigned int *)(v109 + 8);
            if ((v80 - 64) <= 0xFFFFFF7F)
              v81 = v110;
            else
              v81 = &v110;
            v84 = *(uint64_t **)(a3 + 16);
            v83 = (uint64_t *)(a3 + 16);
            v82 = v84;
            if ((*(_DWORD *)(*(v83 - 1) + 8) - 64) >= 0xFFFFFF80)
              v82 = v83;
            if (v80 <= 0xFFFFFFBF)
            {
              v85 = (unint64_t)(v80 + 64) >> 6;
              do
              {
                v86 = *v82++;
                *v81++ = v86;
                --v85;
              }
              while (v85);
            }
          }
        }
        v87 = sub_1C47B4138(v108, a5, a6);
        if (v100 == 2)
          v88 = (uint64_t)v12;
        else
          v88 = v101;
        sub_1C4DF91B8((llvm::detail::IEEEFloat *)(*(_QWORD *)(v10 + 8) + 40), v88);
        sub_1C48DB604(*(_QWORD *)(v10 + 8) + 32, (uint64_t)v113, a6);
        v90 = v89;
        v91 = sub_1C47B4138(*(_QWORD *)(v10 + 8) + 32, v70, a6);
        v53 = v87 | v90 | v91 | sub_1C47B4138(*(_QWORD *)(v10 + 8) + 32, v108, a6) | v72;
        sub_1C47A8258(&v109);
        goto LABEL_117;
      }
      sub_1C48552C0((uint64_t)v74, (uint64_t)&v114);
      v60 = *(_QWORD *)(v10 + 8);
      v96 = *(_QWORD *)(v60 + 40);
      if ((_UNKNOWN *)v96 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v60 + 40), 0);
        v23 = v72;
        goto LABEL_118;
      }
      *(_BYTE *)(v60 + 60) = *(_BYTE *)(v60 + 60) & 0xF0 | 3;
      *(_DWORD *)(v60 + 56) = *(_DWORD *)(v96 + 4) - 1;
      v62 = *(_DWORD *)(v96 + 8);
      v23 = v72;
      if ((v62 - 64) >= 0xFFFFFF80)
        goto LABEL_73;
    }
    v97 = *(_QWORD **)(v60 + 48);
    *v97 = 0;
    bzero(v97 + 1, 8 * (((v62 + 64) >> 6) - 2) + 8);
    goto LABEL_118;
  }
  v26 = *(_QWORD *)v12;
  if (*(_UNKNOWN **)v12 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v109, v12);
  }
  else
  {
    v109 = *(_QWORD *)v12;
    if ((*(_DWORD *)(v26 + 8) + 64) >= 0x80)
      v110 = (_QWORD *)operator new[]();
    v27 = *((_BYTE *)v9 + 28);
    v28 = v27 & 7;
    v112 = v112 & 0xF0 | v27 & 0xF;
    v111 = *((_DWORD *)v9 + 6);
    v30 = (v27 & 6) != 0 && v28 != 3;
    if (v28 == 1 || v30)
    {
      v31 = *(unsigned int *)(v109 + 8);
      if ((v31 - 64) <= 0xFFFFFF7F)
        v32 = v110;
      else
        v32 = &v110;
      v33 = (uint64_t *)((char *)v9 + 16);
      if ((*(_DWORD *)(*((_QWORD *)v9 + 1) + 8) - 64) < 0xFFFFFF80)
        v33 = (uint64_t *)*((_QWORD *)v9 + 2);
      if (v31 <= 0xFFFFFFBF)
      {
        v34 = (unint64_t)(v31 + 64) >> 6;
        do
        {
          v35 = *v33++;
          *v32++ = v35;
          --v34;
        }
        while (v34);
      }
    }
  }
  v36 = v23;
  sub_1C48DB604((uint64_t)v108, (uint64_t)v113, a6);
  v38 = v37;
  if ((_UNKNOWN *)v109 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v104, (const llvm::detail::DoubleAPFloat *)&v109);
  }
  else
  {
    v104 = v109;
    if ((*(_DWORD *)(v109 + 8) + 64) >= 0x80)
      v105 = (_QWORD *)operator new[]();
    v39 = v112 & 7;
    v107 = v107 & 0xF0 | v112 & 0xF;
    v106 = v111;
    v41 = (v112 & 6) != 0 && v39 != 3;
    if (v39 == 1 || v41)
    {
      v42 = *(unsigned int *)(v104 + 8);
      v43 = (v42 - 64) <= 0xFFFFFF7F ? v105 : &v105;
      v44 = (*(_DWORD *)(v109 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v110 : v110;
      if (v42 <= 0xFFFFFFBF)
      {
        v45 = (unint64_t)(v42 + 64) >> 6;
        do
        {
          v46 = *v44++;
          *v43++ = v46;
          --v45;
        }
        while (v45);
      }
    }
  }
  v47 = sub_1C47B4138(v103, a4, a6);
  v48 = sub_1C47B4138(v108, v113, a6);
  sub_1C48DB604((uint64_t)v108, (uint64_t)v9, a6);
  v50 = v49;
  sub_1C4DF8C2C((uint64_t)v108);
  v51 = sub_1C47B4138(v103, v108, a6);
  v52 = sub_1C47B4138(v103, a3, a6);
  v53 = v38 | v47 | v48 | v50 | v51 | v52 | sub_1C47B4138(v103, a5, a6) | v36;
  if ((_UNKNOWN *)v104 == &unk_1C866F1C0)
    v54 = v105;
  else
    v54 = v103;
  v55 = (llvm::detail::IEEEFloat *)(*(_QWORD *)(v10 + 8) + 8);
  if ((v54[28] & 0xF) != 3)
  {
    sub_1C4DF91B8(v55, (uint64_t)&v114);
    v23 = sub_1C47B4138(*(_QWORD *)(v10 + 8), v103, a6) | v53;
    v63 = *(_QWORD *)(v10 + 8);
    if (*(_UNKNOWN **)(v63 + 8) == &unk_1C866F1C0)
      v64 = *(_BYTE *)(*(_QWORD *)(v63 + 16) + 28);
    else
      v64 = *(_BYTE *)(v63 + 28);
    if ((v64 & 7u) >= 2)
    {
      sub_1C48552C0(v63 + 40, (uint64_t)&v114);
      sub_1C48DB604(*(_QWORD *)(v10 + 8) + 32, *(_QWORD *)(v10 + 8), a6);
      v53 = v92 | sub_1C47B4138(*(_QWORD *)(v10 + 8) + 32, v103, a6) | v23;
      v59 = 1;
      goto LABEL_116;
    }
    v93 = *(_QWORD *)(v63 + 40);
    if ((_UNKNOWN *)v93 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v63 + 40), 0);
    }
    else
    {
      *(_BYTE *)(v63 + 60) = *(_BYTE *)(v63 + 60) & 0xF0 | 3;
      *(_DWORD *)(v63 + 56) = *(_DWORD *)(v93 + 4) - 1;
      v94 = *(_DWORD *)(v93 + 8);
      if ((v94 - 64) >= 0xFFFFFF80)
      {
        v59 = 0;
        *(_QWORD *)(v63 + 48) = 0;
LABEL_115:
        v53 = v23;
        goto LABEL_116;
      }
      v99 = *(_QWORD **)(v63 + 48);
      *v99 = 0;
      bzero(v99 + 1, 8 * (((v94 + 64) >> 6) - 2) + 8);
    }
    v59 = 0;
    goto LABEL_115;
  }
  sub_1C48552C0((uint64_t)v55, (uint64_t)&v114);
  v56 = *(_QWORD *)(v10 + 8);
  v57 = *(_QWORD *)(v56 + 40);
  if ((_UNKNOWN *)v57 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v56 + 40), 0);
  }
  else
  {
    *(_BYTE *)(v56 + 60) = *(_BYTE *)(v56 + 60) & 0xF0 | 3;
    *(_DWORD *)(v56 + 56) = *(_DWORD *)(v57 + 4) - 1;
    v58 = *(_DWORD *)(v57 + 8);
    if ((v58 - 64) >= 0xFFFFFF80)
    {
      v23 = 0;
      v59 = 0;
      *(_QWORD *)(v56 + 48) = 0;
      goto LABEL_116;
    }
    v98 = *(_QWORD **)(v56 + 48);
    *v98 = 0;
    bzero(v98 + 1, 8 * (((v58 + 64) >> 6) - 2) + 8);
  }
  v23 = 0;
  v59 = 0;
LABEL_116:
  sub_1C47A8258(&v104);
  sub_1C47A8258(&v109);
  if (v59)
LABEL_117:
    v23 = v53;
LABEL_118:
  sub_1C47A8258((uint64_t *)&v114);
  return v23;
}

uint64_t llvm::detail::DoubleAPFloat::getCategory(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v1 + 8) == &unk_1C866F1C0)
    v1 = *(_QWORD *)(v1 + 16);
  return *(_BYTE *)(v1 + 28) & 7;
}

uint64_t llvm::detail::DoubleAPFloat::isNegative(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v1 + 8) == &unk_1C866F1C0)
    v1 = *(_QWORD *)(v1 + 16);
  return (*(unsigned __int8 *)(v1 + 28) >> 3) & 1;
}

void llvm::detail::DoubleAPFloat::makeNaN(llvm::detail::DoubleAPFloat *this, char a2, char a3, const llvm::APInt *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;

  sub_1C4DF8C5C(*((_QWORD *)this + 1), a2, a3, a4);
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 40);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v5 + 40), 0);
  }
  else
  {
    *(_BYTE *)(v5 + 60) = *(_BYTE *)(v5 + 60) & 0xF0 | 3;
    v8 = *(_DWORD *)(v6 + 4);
    v7 = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v5 + 56) = v8 - 1;
    if ((v7 - 64) < 0xFFFFFF80)
    {
      v9 = *(_QWORD **)(v5 + 48);
      *v9 = 0;
      bzero(v9 + 1, 8 * (((v7 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *(_QWORD *)(v5 + 48) = 0;
    }
  }
}

uint64_t llvm::detail::DoubleAPFloat::add(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return llvm::detail::DoubleAPFloat::addWithSpecial((int)a1, a1, a2, (llvm::detail::DoubleAPFloat *)a1, a3);
}

uint64_t llvm::detail::DoubleAPFloat::subtract(uint64_t *a1, int a2)
{
  int v4;
  uint64_t v5;

  sub_1C4DF8C2C(a1[1]);
  v4 = sub_1C4DF8C2C(a1[1] + 32);
  v5 = llvm::detail::DoubleAPFloat::addWithSpecial(v4, (int)a1, a2, (llvm::detail::DoubleAPFloat *)a1);
  sub_1C4DF8C2C(a1[1]);
  sub_1C4DF8C2C(a1[1] + 32);
  return v5;
}

uint64_t llvm::detail::DoubleAPFloat::changeSign(llvm::detail::DoubleAPFloat *this)
{
  sub_1C4DF8C2C(*((_QWORD *)this + 1));
  return sub_1C4DF8C2C(*((_QWORD *)this + 1) + 32);
}

uint64_t llvm::detail::DoubleAPFloat::multiply(llvm::detail::DoubleAPFloat *this, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  char v19;
  int v20;
  _BOOL4 v22;
  uint64_t v23;
  llvm::detail::DoubleAPFloat **v24;
  llvm::detail::DoubleAPFloat **v25;
  llvm::detail::DoubleAPFloat **v26;
  llvm::detail::DoubleAPFloat **v27;
  unint64_t v28;
  llvm::detail::DoubleAPFloat *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  _BOOL4 v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  _BOOL4 v49;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  _BOOL4 v63;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  _BOOL4 v74;
  uint64_t v75;
  char *v76;
  llvm::detail::DoubleAPFloat **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unsigned int v82;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  _BOOL4 v89;
  uint64_t v90;
  _QWORD *v91;
  llvm::detail::DoubleAPFloat **v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  _BOOL4 v98;
  uint64_t v99;
  _QWORD *v100;
  llvm::detail::DoubleAPFloat **v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  _BOOL4 v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  _BOOL4 v119;
  uint64_t *v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  int v137;
  char v138[8];
  uint64_t v139;
  _QWORD *v140;
  int v141;
  char v142;
  char v143[8];
  uint64_t v144;
  _QWORD *v145;
  int v146;
  char v147;
  char v148[8];
  llvm::detail::IEEEFloat *v149;
  _QWORD *v150;
  int v151;
  char v152;
  char v153[8];
  uint64_t v154;
  char *v155;
  int v156;
  char v157;
  char v158[8];
  uint64_t v159;
  uint64_t v160;
  int v161;
  char v162;
  char v163[8];
  uint64_t v164;
  uint64_t v165;
  int v166;
  char v167;
  uint64_t v168;
  _QWORD *v169;
  int v170;
  char v171;
  uint64_t v172;
  llvm::detail::DoubleAPFloat *v173;
  int v174;
  char v175;
  uint64_t v176;

  v4 = a2;
  v5 = this;
  v176 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = v6;
  if ((_UNKNOWN *)v7 == &unk_1C866F1C0)
    v8 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v8 + 28) & 7) == 1)
    goto LABEL_137;
  v9 = a2[1];
  v10 = *(void **)(v9 + 8);
  v11 = v9;
  if (v10 == &unk_1C866F1C0)
    v11 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v11 + 28) & 7) == 1)
    goto LABEL_159;
  v12 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v7 == &unk_1C866F1C0)
    v12 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v12 + 28) & 7) == 3)
  {
    v13 = a2[1];
    if (v10 == &unk_1C866F1C0)
      v13 = *(_QWORD *)(v9 + 16);
    if ((*(_BYTE *)(v13 + 28) & 7) == 0)
      goto LABEL_19;
  }
  v14 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v7 == &unk_1C866F1C0)
    v14 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v14 + 28) & 7) == 0)
  {
    v15 = a2[1];
    if (v10 == &unk_1C866F1C0)
      v15 = *(_QWORD *)(v9 + 16);
    if ((*(_BYTE *)(v15 + 28) & 7) == 3)
    {
LABEL_19:
      llvm::detail::DoubleAPFloat::makeNaN(this, 0, 0, 0);
      return 0;
    }
  }
  v16 = (_UNKNOWN *)v7 == &unk_1C866F1C0 ? *(_BYTE *)(*(_QWORD *)(v6 + 16) + 28) : *(_BYTE *)(v6 + 28);
  v17 = v16 & 7;
  if (v17 == 3 || !v17)
  {
LABEL_137:
    a2 = (uint64_t *)this;
LABEL_159:
    llvm::detail::DoubleAPFloat::operator=((uint64_t *)this, a2);
    return 0;
  }
  if (v10 == &unk_1C866F1C0)
    v9 = *(_QWORD *)(v9 + 16);
  v18 = *(_BYTE *)(v9 + 28) & 7;
  if (v18 == 3 || !v18)
    goto LABEL_159;
  if ((_UNKNOWN *)v7 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v172, (const llvm::detail::DoubleAPFloat *)(v6 + 8));
  }
  else
  {
    v172 = *(_QWORD *)(v6 + 8);
    if ((*(_DWORD *)(v7 + 8) + 64) >= 0x80)
    {
      this = (llvm::detail::DoubleAPFloat *)operator new[]();
      v173 = this;
    }
    v19 = *(_BYTE *)(v6 + 28);
    v20 = v19 & 7;
    v175 = v19 & 0xF;
    v174 = *(_DWORD *)(v6 + 24);
    v22 = (v19 & 6) != 0 && v20 != 3;
    if (v20 == 1 || v22)
    {
      v23 = *(unsigned int *)(v7 + 8);
      if ((v23 - 64) <= 0xFFFFFF7F)
        v24 = (llvm::detail::DoubleAPFloat **)this;
      else
        v24 = &v173;
      v27 = *(llvm::detail::DoubleAPFloat ***)(v6 + 16);
      v26 = (llvm::detail::DoubleAPFloat **)(v6 + 16);
      v25 = v27;
      if ((*((_DWORD *)*(v26 - 1) + 2) - 64) >= 0xFFFFFF80)
        v25 = v26;
      if (v23 <= 0xFFFFFFBF)
      {
        v28 = (unint64_t)(v23 + 64) >> 6;
        do
        {
          v29 = *v25++;
          *v24++ = v29;
          --v28;
        }
        while (v28);
      }
    }
  }
  v30 = *((_QWORD *)v5 + 1);
  v31 = *(_QWORD *)(v30 + 40);
  if ((_UNKNOWN *)v31 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v168, (const llvm::detail::DoubleAPFloat *)(v30 + 40));
  }
  else
  {
    v168 = *(_QWORD *)(v30 + 40);
    if ((*(_DWORD *)(v31 + 8) + 64) >= 0x80)
      v169 = (_QWORD *)operator new[]();
    v32 = *(_BYTE *)(v30 + 60);
    v33 = v32 & 7;
    v171 = v171 & 0xF0 | v32 & 0xF;
    v170 = *(_DWORD *)(v30 + 56);
    v35 = (v32 & 6) != 0 && v33 != 3;
    if (v33 == 1 || v35)
    {
      v37 = *(unsigned int *)(v168 + 8);
      if ((v37 - 64) <= 0xFFFFFF7F)
        v38 = v169;
      else
        v38 = &v169;
      v41 = *(uint64_t **)(v30 + 48);
      v40 = (uint64_t *)(v30 + 48);
      v39 = v41;
      if ((*(_DWORD *)(*(v40 - 1) + 8) - 64) >= 0xFFFFFF80)
        v39 = v40;
      if (v37 <= 0xFFFFFFBF)
      {
        v42 = (unint64_t)(v37 + 64) >> 6;
        do
        {
          v43 = *v39++;
          *v38++ = v43;
          --v42;
        }
        while (v42);
      }
    }
  }
  v44 = v4[1];
  v45 = *(_QWORD *)(v44 + 8);
  if ((_UNKNOWN *)v45 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v164, (const llvm::detail::DoubleAPFloat *)(v44 + 8));
  }
  else
  {
    v164 = *(_QWORD *)(v44 + 8);
    if ((*(_DWORD *)(v45 + 8) + 64) >= 0x80)
      v165 = operator new[]();
    v167 = v167 & 0xF7 | *(_BYTE *)(v44 + 28) & 8;
    v46 = *(_BYTE *)(v44 + 28);
    v47 = v46 & 7;
    v167 = v167 & 0xF8 | v46 & 7;
    v166 = *(_DWORD *)(v44 + 24);
    v49 = (v46 & 6) != 0 && v47 != 3;
    if (v47 == 1 || v49)
    {
      v51 = *(unsigned int *)(v164 + 8);
      if ((v51 - 64) <= 0xFFFFFF7F)
        v52 = (uint64_t *)v165;
      else
        v52 = &v165;
      v55 = *(uint64_t **)(v44 + 16);
      v54 = (uint64_t *)(v44 + 16);
      v53 = v55;
      if ((*(_DWORD *)(*(v54 - 1) + 8) - 64) >= 0xFFFFFF80)
        v53 = v54;
      if (v51 <= 0xFFFFFFBF)
      {
        v56 = (unint64_t)(v51 + 64) >> 6;
        do
        {
          v57 = *v53++;
          *v52++ = v57;
          --v56;
        }
        while (v56);
      }
    }
  }
  v58 = v4[1];
  v59 = *(_QWORD *)(v58 + 40);
  if ((_UNKNOWN *)v59 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v159, (const llvm::detail::DoubleAPFloat *)(v58 + 40));
  }
  else
  {
    v159 = *(_QWORD *)(v58 + 40);
    if ((*(_DWORD *)(v59 + 8) + 64) >= 0x80)
      v160 = operator new[]();
    v60 = *(_BYTE *)(v58 + 60);
    v61 = v60 & 7;
    v162 = v162 & 0xF0 | v60 & 0xF;
    v161 = *(_DWORD *)(v58 + 56);
    v63 = (v60 & 6) != 0 && v61 != 3;
    if (v61 == 1 || v63)
    {
      v65 = *(unsigned int *)(v159 + 8);
      if ((v65 - 64) <= 0xFFFFFF7F)
        v66 = (uint64_t *)v160;
      else
        v66 = &v160;
      v69 = *(uint64_t **)(v58 + 48);
      v68 = (uint64_t *)(v58 + 48);
      v67 = v69;
      if ((*(_DWORD *)(*(v68 - 1) + 8) - 64) >= 0xFFFFFF80)
        v67 = v68;
      if (v65 <= 0xFFFFFFBF)
      {
        v70 = (unint64_t)(v65 + 64) >> 6;
        do
        {
          v71 = *v67++;
          *v66++ = v71;
          --v70;
        }
        while (v70);
      }
    }
  }
  if ((_UNKNOWN *)v172 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v154, (const llvm::detail::DoubleAPFloat *)&v172);
  }
  else
  {
    v154 = v172;
    if ((*(_DWORD *)(v172 + 8) + 64) >= 0x80)
      v155 = (char *)operator new[]();
    v72 = v175 & 7;
    v157 = v157 & 0xF0 | v175 & 0xF;
    v156 = v174;
    v74 = (v175 & 6) != 0 && v72 != 3;
    if (v72 == 1 || v74)
    {
      v75 = *(unsigned int *)(v154 + 8);
      v76 = (v75 - 64) <= 0xFFFFFF7F ? v155 : (char *)&v155;
      v77 = (*(_DWORD *)(v172 + 8) - 64) >= 0xFFFFFF80 ? &v173 : (llvm::detail::DoubleAPFloat **)v173;
      if (v75 <= 0xFFFFFFBF)
      {
        v78 = (unint64_t)(v75 + 64) >> 6;
        do
        {
          v79 = (uint64_t)*v77++;
          *(_QWORD *)v76 = v79;
          v76 += 8;
          --v78;
        }
        while (v78);
      }
    }
  }
  v80 = sub_1C48DB628(v153, v163, a3);
  if ((_UNKNOWN *)v154 == &unk_1C866F1C0)
    v81 = v155;
  else
    v81 = v153;
  v82 = v81[28] & 7;
  if (v82 > 3 || v82 == 2)
  {
    if ((_UNKNOWN *)v172 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v149, (const llvm::detail::DoubleAPFloat *)&v172);
    }
    else
    {
      v149 = (llvm::detail::IEEEFloat *)v172;
      if ((*(_DWORD *)(v172 + 8) + 64) >= 0x80)
        v150 = (_QWORD *)operator new[]();
      v87 = v175 & 7;
      v152 = v152 & 0xF0 | v175 & 0xF;
      v151 = v174;
      v89 = (v175 & 6) != 0 && v87 != 3;
      if (v87 == 1 || v89)
      {
        v90 = *((unsigned int *)v149 + 2);
        v91 = (v90 - 64) <= 0xFFFFFF7F ? v150 : &v150;
        v92 = (*(_DWORD *)(v172 + 8) - 64) >= 0xFFFFFF80 ? &v173 : (llvm::detail::DoubleAPFloat **)v173;
        if (v90 <= 0xFFFFFFBF)
        {
          v93 = (unint64_t)(v90 + 64) >> 6;
          do
          {
            v94 = (uint64_t)*v92++;
            *v91++ = v94;
            --v93;
          }
          while (v93);
        }
      }
    }
    sub_1C4DF8C2C((uint64_t)v153);
    if (v149 == (llvm::detail::IEEEFloat *)&unk_1C866F1C0)
      v95 = llvm::detail::DoubleAPFloat::fusedMultiplyAdd((llvm::detail::DoubleAPFloat *)&v149, (llvm::detail::DoubleAPFloat *)&v164, (llvm::detail::DoubleAPFloat *)&v154, a3);
    else
      llvm::detail::IEEEFloat::fusedMultiplyAdd(&v149, (const llvm::detail::IEEEFloat *)&v164, (const llvm::detail::IEEEFloat *)&v154, a3);
    v137 = v95;
    sub_1C4DF8C2C((uint64_t)v153);
    if ((_UNKNOWN *)v172 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v144, (const llvm::detail::DoubleAPFloat *)&v172);
    }
    else
    {
      v144 = v172;
      if ((*(_DWORD *)(v172 + 8) + 64) >= 0x80)
        v145 = (_QWORD *)operator new[]();
      v96 = v175 & 7;
      v147 = v147 & 0xF0 | v175 & 0xF;
      v146 = v174;
      v98 = (v175 & 6) != 0 && v96 != 3;
      if (v96 == 1 || v98)
      {
        v99 = *(unsigned int *)(v144 + 8);
        v100 = (v99 - 64) <= 0xFFFFFF7F ? v145 : &v145;
        v101 = (*(_DWORD *)(v172 + 8) - 64) >= 0xFFFFFF80 ? &v173 : (llvm::detail::DoubleAPFloat **)v173;
        if (v99 <= 0xFFFFFFBF)
        {
          v102 = (unint64_t)(v99 + 64) >> 6;
          do
          {
            v103 = (uint64_t)*v101++;
            *v100++ = v103;
            --v102;
          }
          while (v102);
        }
      }
    }
    v136 = sub_1C48DB628(v143, v158, a3);
    if ((_UNKNOWN *)v168 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v139, (const llvm::detail::DoubleAPFloat *)&v168);
    }
    else
    {
      v139 = v168;
      if ((*(_DWORD *)(v168 + 8) + 64) >= 0x80)
        v140 = (_QWORD *)operator new[]();
      v104 = v171 & 7;
      v142 = v142 & 0xF0 | v171 & 0xF;
      v141 = v170;
      v106 = (v171 & 6) != 0 && v104 != 3;
      if (v104 == 1 || v106)
      {
        v107 = *(unsigned int *)(v139 + 8);
        v108 = (v107 - 64) <= 0xFFFFFF7F ? v140 : &v140;
        v109 = (*(_DWORD *)(v168 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v169 : v169;
        if (v107 <= 0xFFFFFFBF)
        {
          v110 = (unint64_t)(v107 + 64) >> 6;
          do
          {
            v111 = *v109++;
            *v108++ = v111;
            --v110;
          }
          while (v110);
        }
      }
    }
    v112 = sub_1C48DB628(v138, v163, a3);
    sub_1C47B4138((uint64_t)v143, (uint64_t)v138, a3);
    v114 = v113;
    sub_1C47B4138((uint64_t)v148, (uint64_t)v143, a3);
    v116 = v115;
    sub_1C47A8258(&v139);
    sub_1C47A8258(&v144);
    if ((_UNKNOWN *)v154 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v144, (const llvm::detail::DoubleAPFloat *)&v154);
    }
    else
    {
      v144 = v154;
      if ((*(_DWORD *)(v154 + 8) + 64) >= 0x80)
        v145 = (_QWORD *)operator new[]();
      v117 = v157 & 7;
      v147 = v147 & 0xF0 | v157 & 0xF;
      v146 = v156;
      v119 = (v157 & 6) != 0 && v117 != 3;
      if (v117 == 1 || v119)
      {
        v120 = (uint64_t *)&v155;
        v121 = *(unsigned int *)(v144 + 8);
        if ((v121 - 64) <= 0xFFFFFF7F)
          v122 = v145;
        else
          v122 = &v145;
        if ((*(_DWORD *)(v154 + 8) - 64) < 0xFFFFFF80)
          v120 = (uint64_t *)v155;
        if (v121 <= 0xFFFFFFBF)
        {
          v123 = (unint64_t)(v121 + 64) >> 6;
          do
          {
            v124 = *v120++;
            *v122++ = v124;
            --v123;
          }
          while (v123);
        }
      }
    }
    sub_1C47B4138((uint64_t)v143, (uint64_t)v148, a3);
    v80 = v137 | v136 | v112 | v114 | v116 | v125 | v80;
    sub_1C4DF91B8((llvm::detail::IEEEFloat *)(*((_QWORD *)v5 + 1) + 8), (uint64_t)&v144);
    if ((_UNKNOWN *)v144 == &unk_1C866F1C0)
      v126 = (char *)v145;
    else
      v126 = v143;
    if ((v126[28] & 6) != 0)
    {
      sub_1C48DB604((uint64_t)v153, (uint64_t)v143, a3);
      v128 = v127;
      sub_1C47B4138((uint64_t)v153, (uint64_t)v148, a3);
      v80 = v128 | v129 | v80;
      sub_1C4DF91B8((llvm::detail::IEEEFloat *)(*((_QWORD *)v5 + 1) + 40), (uint64_t)&v154);
    }
    else
    {
      v130 = *((_QWORD *)v5 + 1);
      v131 = *(_QWORD *)(v130 + 40);
      if ((_UNKNOWN *)v131 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v130 + 40), 0);
      }
      else
      {
        *(_BYTE *)(v130 + 60) = *(_BYTE *)(v130 + 60) & 0xF0 | 3;
        *(_DWORD *)(v130 + 56) = *(_DWORD *)(v131 + 4) - 1;
        v132 = *(_DWORD *)(v131 + 8);
        if ((v132 - 64) < 0xFFFFFF80)
        {
          v135 = *(_QWORD **)(v130 + 48);
          *v135 = 0;
          bzero(v135 + 1, 8 * (((v132 + 64) >> 6) - 2) + 8);
        }
        else
        {
          *(_QWORD *)(v130 + 48) = 0;
        }
      }
    }
    sub_1C47A8258(&v144);
    sub_1C47A8258((uint64_t *)&v149);
  }
  else
  {
    sub_1C4DF91B8((llvm::detail::IEEEFloat *)(*((_QWORD *)v5 + 1) + 8), (uint64_t)&v154);
    v84 = *((_QWORD *)v5 + 1);
    v85 = *(_QWORD *)(v84 + 40);
    if ((_UNKNOWN *)v85 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v84 + 40), 0);
    }
    else
    {
      *(_BYTE *)(v84 + 60) = *(_BYTE *)(v84 + 60) & 0xF0 | 3;
      *(_DWORD *)(v84 + 56) = *(_DWORD *)(v85 + 4) - 1;
      v86 = *(_DWORD *)(v85 + 8);
      if ((v86 - 64) < 0xFFFFFF80)
      {
        v134 = *(_QWORD **)(v84 + 48);
        *v134 = 0;
        bzero(v134 + 1, 8 * (((v86 + 64) >> 6) - 2) + 8);
      }
      else
      {
        *(_QWORD *)(v84 + 48) = 0;
      }
    }
  }
  sub_1C47A8258(&v154);
  sub_1C47A8258(&v159);
  sub_1C47A8258(&v164);
  sub_1C47A8258(&v168);
  sub_1C47A8258(&v172);
  return v80;
}

uint64_t llvm::detail::DoubleAPFloat::divide(llvm::detail::DoubleAPFloat *a1, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::APInt *v14;
  unsigned int v15;
  _OWORD v16[2];
  _BYTE v17[8];
  uint64_t v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (unsigned int *)v16);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v18, (const llvm::APInt **)v16);
  if (DWORD2(v16[0]) >= 0x41 && *(_QWORD *)&v16[0])
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v16[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (unsigned int *)&v14);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v16 + 8), &v14);
  v6 = sub_1C47B1140(v17, v16, a3);
  sub_1C47A8258((uint64_t *)v16 + 1);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if ((_UNKNOWN *)v18[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v18, (unsigned int *)&v14);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v18, (unsigned int *)&v14);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)&unk_1C866F1C0, (uint64_t)&v14);
  v7 = (uint64_t *)((char *)a1 + 8);
  if (v16 == (_OWORD *)a1)
  {
    v8 = *v7;
    *v7 = 0;
    if (v8)
    {
      v9 = v8 - 16;
      v10 = *(_QWORD *)(v8 - 8);
      if (v10)
      {
        v11 = v8 - 24;
        v12 = 32 * v10;
        do
        {
          sub_1C47A8258((uint64_t *)(v11 + v12));
          v12 -= 32;
        }
        while (v12);
      }
      MEMORY[0x1CAA32F9C](v9, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v7);
    *(_OWORD *)a1 = v16[0];
    *(_QWORD *)&v16[0] = &unk_1C866F210;
    *((_QWORD *)&v16[0] + 1) = 0;
  }
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  sub_1C47A8258(v18);
  return v6;
}

unsigned int *llvm::detail::DoubleAPFloat::bitcastToAPInt@<X0>(llvm::detail::DoubleAPFloat *this@<X0>, unsigned int *a2@<X8>)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::detail::DoubleAPFloat *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v6 = *(void **)(v4 + 8);
  v5 = (llvm::detail::DoubleAPFloat *)(v4 + 8);
  if (v6 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((uint64_t *)&v17, v5);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v17);
  v7 = v18;
  v8 = (uint64_t)v17;
  v9 = (uint64_t *)&v17;
  if (v18 >= 0x41)
    v9 = v17;
  v19[0] = *v9;
  v10 = *((_QWORD *)this + 1);
  v12 = *(void **)(v10 + 40);
  v11 = (llvm::detail::DoubleAPFloat *)(v10 + 40);
  if (v12 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((uint64_t *)&v15, v11);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v11, (unsigned int *)&v15);
  if (v16 >= 0x41)
    v13 = v15;
  else
    v13 = (uint64_t *)&v15;
  v19[1] = *v13;
  if (v16 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C]();
  if (v7 >= 0x41 && v8)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  a2[2] = 128;
  return llvm::APInt::initFromArray(a2, v19, 2u);
}

uint64_t llvm::detail::DoubleAPFloat::remainder(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::APInt *v12;
  unsigned int v13;
  _OWORD v14[2];
  _BYTE v15[8];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (unsigned int *)v14);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v16, (const llvm::APInt **)v14);
  if (DWORD2(v14[0]) >= 0x41 && *(_QWORD *)&v14[0])
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v14[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (unsigned int *)&v12);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v14 + 8), &v12);
  v4 = sub_1C6187518(v15, v14);
  sub_1C47A8258((uint64_t *)v14 + 1);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if ((_UNKNOWN *)v16[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v16, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v16, (unsigned int *)&v12);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, (uint64_t)&unk_1C866F1C0, (uint64_t)&v12);
  v5 = (uint64_t *)((char *)this + 8);
  if (v14 == (_OWORD *)this)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      v7 = v6 - 16;
      v8 = *(_QWORD *)(v6 - 8);
      if (v8)
      {
        v9 = v6 - 24;
        v10 = 32 * v8;
        do
        {
          sub_1C47A8258((uint64_t *)(v9 + v10));
          v10 -= 32;
        }
        while (v10);
      }
      MEMORY[0x1CAA32F9C](v7, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v5);
    *(_OWORD *)this = v14[0];
    *(_QWORD *)&v14[0] = &unk_1C866F210;
    *((_QWORD *)&v14[0] + 1) = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  sub_1C47A8258(v16);
  return v4;
}

uint64_t llvm::detail::DoubleAPFloat::mod(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::APInt *v12;
  unsigned int v13;
  _OWORD v14[2];
  _BYTE v15[8];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (unsigned int *)v14);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v16, (const llvm::APInt **)v14);
  if (DWORD2(v14[0]) >= 0x41 && *(_QWORD *)&v14[0])
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v14[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (unsigned int *)&v12);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v14 + 8), &v12);
  v4 = sub_1C6187438(v15, v14);
  sub_1C47A8258((uint64_t *)v14 + 1);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if ((_UNKNOWN *)v16[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v16, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v16, (unsigned int *)&v12);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, (uint64_t)&unk_1C866F1C0, (uint64_t)&v12);
  v5 = (uint64_t *)((char *)this + 8);
  if (v14 == (_OWORD *)this)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      v7 = v6 - 16;
      v8 = *(_QWORD *)(v6 - 8);
      if (v8)
      {
        v9 = v6 - 24;
        v10 = 32 * v8;
        do
        {
          sub_1C47A8258((uint64_t *)(v9 + v10));
          v10 -= 32;
        }
        while (v10);
      }
      MEMORY[0x1CAA32F9C](v7, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v5);
    *(_OWORD *)this = v14[0];
    *(_QWORD *)&v14[0] = &unk_1C866F210;
    *((_QWORD *)&v14[0] + 1) = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  sub_1C47A8258(v16);
  return v4;
}

uint64_t llvm::detail::DoubleAPFloat::fusedMultiplyAdd(llvm::detail::DoubleAPFloat *a1, llvm::detail::DoubleAPFloat *a2, llvm::detail::DoubleAPFloat *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::APInt *v17;
  unsigned int v18;
  const llvm::APInt *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22[3];
  _OWORD v23[2];
  llvm::detail::IEEEFloat *v24[4];

  v24[3] = *(llvm::detail::IEEEFloat **)MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (unsigned int *)v23);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v24, (const llvm::APInt **)v23);
  if (DWORD2(v23[0]) >= 0x41 && *(_QWORD *)&v23[0])
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v23[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (unsigned int *)&v19);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v23 + 8), &v19);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a3, (unsigned int *)&v17);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v22, &v17);
  if ((_UNKNOWN *)v24[0] == &unk_1C866F1C0)
    v8 = llvm::detail::DoubleAPFloat::fusedMultiplyAdd(v24, (char *)v23 + 8, v22, a4);
  else
    llvm::detail::IEEEFloat::fusedMultiplyAdd(v24, (const llvm::detail::IEEEFloat *)((char *)v23 + 8), (const llvm::detail::IEEEFloat *)v22, a4);
  v9 = v8;
  sub_1C47A8258(v22);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  sub_1C47A8258((uint64_t *)v23 + 1);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if ((_UNKNOWN *)v24[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v24, (unsigned int *)&v21);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v24, (unsigned int *)&v21);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v23, (uint64_t)&unk_1C866F1C0, (uint64_t)&v21);
  v10 = (uint64_t *)((char *)a1 + 8);
  if (v23 == (_OWORD *)a1)
  {
    v11 = *v10;
    *v10 = 0;
    if (v11)
    {
      v12 = v11 - 16;
      v13 = *(_QWORD *)(v11 - 8);
      if (v13)
      {
        v14 = v11 - 24;
        v15 = 32 * v13;
        do
        {
          sub_1C47A8258((uint64_t *)(v14 + v15));
          v15 -= 32;
        }
        while (v15);
      }
      MEMORY[0x1CAA32F9C](v12, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v10);
    *(_OWORD *)a1 = v23[0];
    *(_QWORD *)&v23[0] = &unk_1C866F210;
    *((_QWORD *)&v23[0] + 1) = 0;
  }
  if (LODWORD(v22[0]) >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  sub_1C47A8258((uint64_t *)v24);
  return v9;
}

uint64_t llvm::detail::DoubleAPFloat::roundToIntegral(llvm::detail::DoubleAPFloat *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[8];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (unsigned int *)&v14);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v16, (const llvm::APInt **)&v14);
  if (DWORD2(v14) >= 0x41 && (_QWORD)v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  v4 = sub_1C4DF8890(v15, a2);
  if ((_UNKNOWN *)v16[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v16, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v16, (unsigned int *)&v12);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v14, (uint64_t)&unk_1C866F1C0, (uint64_t)&v12);
  v5 = (uint64_t *)((char *)a1 + 8);
  if (&v14 == (__int128 *)a1)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      v7 = v6 - 16;
      v8 = *(_QWORD *)(v6 - 8);
      if (v8)
      {
        v9 = v6 - 24;
        v10 = 32 * v8;
        do
        {
          sub_1C47A8258((uint64_t *)(v9 + v10));
          v10 -= 32;
        }
        while (v10);
      }
      MEMORY[0x1CAA32F9C](v7, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v5);
    *(_OWORD *)a1 = v14;
    *(_QWORD *)&v14 = &unk_1C866F210;
    *((_QWORD *)&v14 + 1) = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  sub_1C47A8258(v16);
  return v4;
}

void llvm::detail::DoubleAPFloat::makeInf(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;

  sub_1C47A8F34(*((_QWORD *)this + 1));
  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 40);
  if ((_UNKNOWN *)v3 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v2 + 40), 0);
  }
  else
  {
    *(_BYTE *)(v2 + 60) = *(_BYTE *)(v2 + 60) & 0xF0 | 3;
    v5 = *(_DWORD *)(v3 + 4);
    v4 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v2 + 56) = v5 - 1;
    if ((v4 - 64) < 0xFFFFFF80)
    {
      v6 = *(_QWORD **)(v2 + 48);
      *v6 = 0;
      bzero(v6 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *(_QWORD *)(v2 + 48) = 0;
    }
  }
}

void llvm::detail::DoubleAPFloat::makeSmallest(llvm::detail::DoubleAPFloat *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;

  sub_1C6128DCC(*((_QWORD *)this + 1), a2);
  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 40);
  if ((_UNKNOWN *)v4 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v3 + 40), 0);
  }
  else
  {
    *(_BYTE *)(v3 + 60) = *(_BYTE *)(v3 + 60) & 0xF0 | 3;
    v6 = *(_DWORD *)(v4 + 4);
    v5 = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v3 + 56) = v6 - 1;
    if ((v5 - 64) < 0xFFFFFF80)
    {
      v7 = *(_QWORD **)(v3 + 48);
      *v7 = 0;
      bzero(v7 + 1, 8 * (((v5 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *(_QWORD *)(v3 + 48) = 0;
    }
  }
}

void llvm::detail::DoubleAPFloat::makeSmallestNormalized(llvm::detail::DoubleAPFloat *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v9 = 64;
  v8 = 0x360000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v10, (const llvm::APInt **)&v8);
  sub_1C48552C0(*((_QWORD *)this + 1) + 8, (uint64_t)v10);
  sub_1C47A8258(v10);
  if (a2)
    sub_1C4DF8C2C(*((_QWORD *)this + 1));
  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(v4 + 40);
  if ((_UNKNOWN *)v5 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)(v4 + 40), 0);
  }
  else
  {
    *(_BYTE *)(v4 + 60) = *(_BYTE *)(v4 + 60) & 0xF0 | 3;
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(v5 + 4) - 1;
    v6 = *(_DWORD *)(v5 + 8);
    if ((v6 - 64) < 0xFFFFFF80)
    {
      v7 = *(_QWORD **)(v4 + 48);
      *v7 = 0;
      bzero(v7 + 1, 8 * (((v6 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *(_QWORD *)(v4 + 48) = 0;
    }
  }
}

uint64_t llvm::detail::DoubleAPFloat::compare(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t result;

  result = sub_1C47B415C(*((_QWORD *)this + 1), *((_QWORD *)a2 + 1));
  if ((_DWORD)result == 1)
    return sub_1C47B415C(*((_QWORD *)this + 1) + 32, *((_QWORD *)a2 + 1) + 32);
  return result;
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v3;
  llvm::detail *v4;
  void *v5;
  unint64_t v6;
  const llvm::detail::DoubleAPFloat *v7;
  uint64_t v8;
  llvm::detail *v9;
  void *v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return sub_1C6381268(this);
  v5 = *(void **)(v3 + 8);
  v4 = (llvm::detail *)(v3 + 8);
  if (v5 == &unk_1C866F1C0)
    v6 = llvm::detail::hash_value(v4, a2);
  else
    v6 = llvm::detail::hash_value(v4, a2);
  v14 = v6;
  v8 = *((_QWORD *)this + 1);
  v10 = *(void **)(v8 + 40);
  v9 = (llvm::detail *)(v8 + 40);
  if (v10 == &unk_1C866F1C0)
    v11 = llvm::detail::hash_value(v9, v7);
  else
    v11 = llvm::detail::hash_value(v9, v7);
  v13 = v11;
  return sub_1C5BE8AA8((uint64_t *)&v14, (uint64_t *)&v13);
}

unint64_t llvm::hash_value(uint64_t a1, const llvm::detail::DoubleAPFloat *a2)
{
  llvm::detail *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::hash_value(v2, a2);
  else
    return llvm::detail::hash_value(v2, a2);
}

uint64_t *llvm::detail::DoubleAPFloat::convertFromString@<X0>(__int128 *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  _BYTE v21[8];
  uint64_t v22[2];
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22[0] = (uint64_t)&unk_1C866F22C;
  v10 = (_QWORD *)operator new[]();
  v22[1] = (uint64_t)v10;
  v24 = 3;
  v23 = -970;
  *v10 = 0;
  v10[1] = 0;
  llvm::APFloat::convertFromString((uint64_t)v21, a2, a3, a4, a5);
  if ((_UNKNOWN *)v22[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v22, (unsigned int *)&v18);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v22, (unsigned int *)&v18);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v20, (uint64_t)&unk_1C866F1C0, (uint64_t)&v18);
  v11 = (uint64_t *)a1 + 1;
  if (&v20 == a1)
  {
    v12 = *v11;
    *v11 = 0;
    if (v12)
    {
      v13 = v12 - 16;
      v14 = *(_QWORD *)(v12 - 8);
      if (v14)
      {
        v15 = v12 - 24;
        v16 = 32 * v14;
        do
        {
          sub_1C47A8258((uint64_t *)(v15 + v16));
          v16 -= 32;
        }
        while (v16);
      }
      MEMORY[0x1CAA32F9C](v13, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v11);
    *a1 = v20;
    *(_QWORD *)&v20 = &unk_1C866F210;
    *((_QWORD *)&v20 + 1) = 0;
  }
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  return sub_1C47A8258(v22);
}

void llvm::APFloat::convertFromString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void *v6;

  v6 = *(void **)(a1 + 8);
  v5 = a1 + 8;
  if (v6 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::convertFromString(v5);
  else
    llvm::detail::IEEEFloat::convertFromString(v5, a2, a3, a4, a5);
}

uint64_t llvm::detail::DoubleAPFloat::next(llvm::detail::DoubleAPFloat *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[8];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (unsigned int *)&v14);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v16, (const llvm::APInt **)&v14);
  if (DWORD2(v14) >= 0x41 && (_QWORD)v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  v4 = sub_1C612A0E4(v15, a2);
  if ((_UNKNOWN *)v16[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v16, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v16, (unsigned int *)&v12);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v14, (uint64_t)&unk_1C866F1C0, (uint64_t)&v12);
  v5 = (uint64_t *)((char *)this + 8);
  if (&v14 == (__int128 *)this)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      v7 = v6 - 16;
      v8 = *(_QWORD *)(v6 - 8);
      if (v8)
      {
        v9 = v6 - 24;
        v10 = 32 * v8;
        do
        {
          sub_1C47A8258((uint64_t *)(v9 + v10));
          v10 -= 32;
        }
        while (v10);
      }
      MEMORY[0x1CAA32F9C](v7, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v5);
    *(_OWORD *)this = v14;
    *(_QWORD *)&v14 = &unk_1C866F210;
    *((_QWORD *)&v14 + 1) = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  sub_1C47A8258(v16);
  return v4;
}

uint64_t llvm::detail::DoubleAPFloat::convertFromAPInt(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  _BYTE v20[8];
  uint64_t v21[2];
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21[0] = (uint64_t)&unk_1C866F22C;
  v8 = (_QWORD *)operator new[]();
  v21[1] = (uint64_t)v8;
  v23 = 3;
  v22 = -970;
  *v8 = 0;
  v8[1] = 0;
  v9 = sub_1C4959BCC(v20, a2, a3, a4);
  if ((_UNKNOWN *)v21[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v21, (unsigned int *)&v17);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v21, (unsigned int *)&v17);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v19, (uint64_t)&unk_1C866F1C0, (uint64_t)&v17);
  v10 = (uint64_t *)a1 + 1;
  if (&v19 == a1)
  {
    v11 = *v10;
    *v10 = 0;
    if (v11)
    {
      v12 = v11 - 16;
      v13 = *(_QWORD *)(v11 - 8);
      if (v13)
      {
        v14 = v11 - 24;
        v15 = 32 * v13;
        do
        {
          sub_1C47A8258((uint64_t *)(v14 + v15));
          v15 -= 32;
        }
        while (v15);
      }
      MEMORY[0x1CAA32F9C](v12, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v10);
    *a1 = v19;
    *(_QWORD *)&v19 = &unk_1C866F210;
    *((_QWORD *)&v19 + 1) = 0;
  }
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  sub_1C47A8258(v21);
  return v9;
}

uint64_t llvm::detail::DoubleAPFloat::convertFromSignExtendedInteger(__int128 *a1, void *a2, unsigned int a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22[2];
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22[0] = (uint64_t)&unk_1C866F22C;
  v10 = (_QWORD *)operator new[]();
  v22[1] = (uint64_t)v10;
  v24 = 3;
  v23 = -970;
  *v10 = 0;
  v10[1] = 0;
  v11 = llvm::detail::IEEEFloat::convertFromSignExtendedInteger((llvm::APInt *)v22, a2, a3, a4, a5);
  if ((_UNKNOWN *)v22[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v22, (unsigned int *)&v19);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v22, (unsigned int *)&v19);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v21, (uint64_t)&unk_1C866F1C0, (uint64_t)&v19);
  v12 = (uint64_t *)a1 + 1;
  if (&v21 == a1)
  {
    v13 = *v12;
    *v12 = 0;
    if (v13)
    {
      v14 = v13 - 16;
      v15 = *(_QWORD *)(v13 - 8);
      if (v15)
      {
        v16 = v13 - 24;
        v17 = 32 * v15;
        do
        {
          sub_1C47A8258((uint64_t *)(v16 + v17));
          v17 -= 32;
        }
        while (v17);
      }
      MEMORY[0x1CAA32F9C](v14, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v12);
    *a1 = v21;
    *(_QWORD *)&v21 = &unk_1C866F210;
    *((_QWORD *)&v21 + 1) = 0;
  }
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  sub_1C47A8258(v22);
  return v11;
}

uint64_t llvm::detail::DoubleAPFloat::convertFromZeroExtendedInteger(__int128 *a1, uint64_t *a2, unsigned int a3, char a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22[2];
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22[0] = (uint64_t)&unk_1C866F22C;
  v10 = (_QWORD *)operator new[]();
  v22[1] = (uint64_t)v10;
  v24 = 3;
  v23 = -970;
  *v10 = 0;
  v10[1] = 0;
  v11 = llvm::detail::IEEEFloat::convertFromZeroExtendedInteger((llvm::APInt *)v22, a2, a3, a4, a5);
  if ((_UNKNOWN *)v22[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v22, (unsigned int *)&v19);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v22, (unsigned int *)&v19);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v21, (uint64_t)&unk_1C866F1C0, (uint64_t)&v19);
  v12 = (uint64_t *)a1 + 1;
  if (&v21 == a1)
  {
    v13 = *v12;
    *v12 = 0;
    if (v13)
    {
      v14 = v13 - 16;
      v15 = *(_QWORD *)(v13 - 8);
      if (v15)
      {
        v16 = v13 - 24;
        v17 = 32 * v15;
        do
        {
          sub_1C47A8258((uint64_t *)(v16 + v17));
          v17 -= 32;
        }
        while (v17);
      }
      MEMORY[0x1CAA32F9C](v14, 0x1072C801E5F02E8);
    }
  }
  else
  {
    sub_1C4773C74(v12);
    *a1 = v21;
    *(_QWORD *)&v21 = &unk_1C866F210;
    *((_QWORD *)&v21 + 1) = 0;
  }
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  sub_1C47A8258(v22);
  return v11;
}

uint64_t llvm::detail::DoubleAPFloat::convertToHexString(llvm::detail::DoubleAPFloat *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  const llvm::APInt *v12;
  unsigned int v13;
  uint64_t v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (unsigned int *)&v12);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v14, &v12);
  if ((_UNKNOWN *)v14[0] == &unk_1C866F1C0)
    v9 = llvm::detail::DoubleAPFloat::convertToHexString(v14, a2, a3, a4, a5);
  else
    v9 = llvm::detail::IEEEFloat::convertToHexString((uint64_t)v14, a2, a3, a4, a5);
  v10 = v9;
  sub_1C47A8258(v14);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  return v10;
}

BOOL llvm::detail::DoubleAPFloat::isDenormal(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  int v7;
  _BYTE v8[8];
  uint64_t v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v3 = v2;
  if (*(_UNKNOWN **)(v2 + 8) == &unk_1C866F1C0)
    v3 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v3 + 28) & 7) != 2)
    return 0;
  if ((((uint64_t (*)(void))sub_1C4773C58)() & 1) != 0 || (sub_1C4773C58(*((_QWORD *)this + 1) + 32) & 1) != 0)
    return 1;
  v6 = *((_QWORD *)this + 1);
  sub_1C63813B4((uint64_t)v8, v6, v6 + 32);
  sub_1C47B415C(v6, (uint64_t)v8);
  v4 = v7 != 1;
  sub_1C47A8258(v9);
  return v4;
}

BOOL llvm::detail::DoubleAPFloat::isSmallest(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v2 + 8) == &unk_1C866F1C0)
    v2 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 7) != 2)
    return 0;
  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v12, this);
  v5 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v5 + 8) == &unk_1C866F1C0)
    v5 = *(_QWORD *)(v5 + 16);
  llvm::detail::DoubleAPFloat::makeSmallest((llvm::detail::DoubleAPFloat *)&v12, (*(_BYTE *)(v5 + 28) & 8) != 0);
  sub_1C47B415C(v13, *((_QWORD *)this + 1));
  if (v6 == 1)
    sub_1C47B415C(v13 + 32, *((_QWORD *)this + 1) + 32);
  v3 = v6 == 1;
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    v8 = v7 - 16;
    v9 = *(_QWORD *)(v7 - 8);
    if (v9)
    {
      v10 = v7 - 24;
      v11 = 32 * v9;
      do
      {
        sub_1C47A8258((uint64_t *)(v10 + v11));
        v11 -= 32;
      }
      while (v11);
    }
    MEMORY[0x1CAA32F9C](v8, 0x1072C801E5F02E8);
  }
  return v3;
}

BOOL llvm::detail::DoubleAPFloat::isLargest(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v2 + 8) == &unk_1C866F1C0)
    v2 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 7) != 2)
    return 0;
  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v12, this);
  v5 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v5 + 8) == &unk_1C866F1C0)
    v5 = *(_QWORD *)(v5 + 16);
  llvm::detail::DoubleAPFloat::makeLargest((llvm::detail::DoubleAPFloat *)&v12, (*(unsigned __int8 *)(v5 + 28) >> 3) & 1);
  sub_1C47B415C(v13, *((_QWORD *)this + 1));
  if (v6 == 1)
    sub_1C47B415C(v13 + 32, *((_QWORD *)this + 1) + 32);
  v3 = v6 == 1;
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    v8 = v7 - 16;
    v9 = *(_QWORD *)(v7 - 8);
    if (v9)
    {
      v10 = v7 - 24;
      v11 = 32 * v9;
      do
      {
        sub_1C47A8258((uint64_t *)(v10 + v11));
        v11 -= 32;
      }
      while (v11);
    }
    MEMORY[0x1CAA32F9C](v8, 0x1072C801E5F02E8);
  }
  return v3;
}

uint64_t llvm::detail::DoubleAPFloat::isInteger(llvm::detail::DoubleAPFloat *this)
{
  uint64_t result;

  result = sub_1C627A4E0(*((_QWORD *)this + 1));
  if ((_DWORD)result)
    return sub_1C627A4E0(*((_QWORD *)this + 1) + 32);
  return result;
}

uint64_t llvm::detail::DoubleAPFloat::getExactInverse(llvm::detail::DoubleAPFloat *this, llvm::APFloat *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8[3];
  const llvm::APInt *v9;
  uint64_t v10[2];
  int v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (unsigned int *)&v9);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v14, &v9);
  if (LODWORD(v10[0]) >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  if (a2)
  {
    v10[0] = (uint64_t)&unk_1C866F22C;
    v3 = (_QWORD *)operator new[]();
    v10[1] = (uint64_t)v3;
    v12 = 3;
    v11 = -970;
    *v3 = 0;
    v3[1] = 0;
    v4 = sub_1C5375770(v13, &v9);
    if ((_UNKNOWN *)v10[0] == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v10, (unsigned int *)&v6);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v10, (unsigned int *)&v6);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, (uint64_t)&unk_1C866F1C0, (uint64_t)&v6);
    sub_1C48552C0((uint64_t)a2 + 8, (uint64_t)v8);
    sub_1C47A8258(v8);
    if (v7 >= 0x41 && v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
    sub_1C47A8258(v10);
  }
  else
  {
    v4 = sub_1C5375770(v13, 0);
  }
  sub_1C47A8258(v14);
  return v4;
}

uint64_t *llvm::detail::frexp@<X0>(uint64_t a1@<X0>, const llvm::detail::IEEEFloat *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  _BOOL4 v18;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44[3];
  __int128 v45;
  uint64_t *v46;
  int v47;
  char v48;
  char v49[8];
  __int128 v50;
  uint64_t v51;

  v4 = a3;
  v51 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  v10 = *(void **)(v8 + 8);
  v9 = (uint64_t *)(v8 + 8);
  if (v10 == &unk_1C866F1C0)
  {
    v11 = llvm::detail::frexp(&v45, v9, a2, a3);
    v50 = v45;
  }
  else
  {
    llvm::detail::frexp(v9, a2, a3, (uint64_t)&v45);
    v11 = (uint64_t *)sub_1C5DC0EE8((uint64_t)v49, (uint64_t)&v45, (void *)*v9);
    if ((*(_DWORD *)(v45 + 8) - 64) <= 0xFFFFFF7F)
    {
      v11 = (uint64_t *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
        v11 = (uint64_t *)MEMORY[0x1CAA32F9C](*((_QWORD *)&v45 + 1), 0x1000C8000313F17);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 40);
  if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v45 + 8), (const llvm::detail::DoubleAPFloat *)(v12 + 40));
  }
  else
  {
    *((_QWORD *)&v45 + 1) = *(_QWORD *)(v12 + 40);
    if ((*(_DWORD *)(v13 + 8) + 64) >= 0x80)
    {
      v37 = v12;
      v11 = (uint64_t *)operator new[]();
      v12 = v37;
      v46 = v11;
      v14 = v48 & 0xF0;
    }
    else
    {
      v14 = 0;
    }
    v15 = *(_BYTE *)(v12 + 60);
    v16 = v15 & 7;
    v48 = v15 & 0xF | v14;
    v47 = *(_DWORD *)(v12 + 56);
    v18 = (v15 & 6) != 0 && v16 != 3;
    if (v16 == 1 || v18)
    {
      v20 = *(unsigned int *)(*((_QWORD *)&v45 + 1) + 8);
      if ((v20 - 64) <= 0xFFFFFF7F)
        v21 = (uint64_t **)v11;
      else
        v21 = &v46;
      v24 = *(uint64_t **)(v12 + 48);
      v22 = (uint64_t *)(v12 + 48);
      v23 = v24;
      if ((*(_DWORD *)(*(v22 - 1) + 8) - 64) < 0xFFFFFF80)
        v22 = v23;
      if (v20 <= 0xFFFFFFBF)
      {
        v25 = (unint64_t)(v20 + 64) >> 6;
        do
        {
          v26 = (uint64_t *)*v22++;
          *v21++ = v26;
          --v25;
        }
        while (v25);
      }
    }
  }
  v27 = *(_QWORD *)(a1 + 8);
  if (*(_UNKNOWN **)(v27 + 8) == &unk_1C866F1C0)
    v27 = *(_QWORD *)(v27 + 16);
  if ((*(_BYTE *)(v27 + 28) & 7) == 2)
  {
    if (*((_UNKNOWN **)&v45 + 1) == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v39, (const llvm::detail::DoubleAPFloat *)((char *)&v45 + 8));
    }
    else
    {
      v39 = *((_QWORD *)&v45 + 1);
      if ((*(_DWORD *)(*((_QWORD *)&v45 + 1) + 8) + 64) >= 0x80)
        v40 = operator new[]();
      v28 = v48 & 7;
      v42 = v42 & 0xF0 | v48 & 0xF;
      v41 = v47;
      v30 = (v48 & 6) != 0 && v28 != 3;
      if (v28 == 1 || v30)
      {
        v31 = *(unsigned int *)(v39 + 8);
        if ((v31 - 64) <= 0xFFFFFF7F)
          v32 = (uint64_t *)v40;
        else
          v32 = &v40;
        if ((*(_DWORD *)(*((_QWORD *)&v45 + 1) + 8) - 64) >= 0xFFFFFF80)
          v33 = (uint64_t *)&v46;
        else
          v33 = v46;
        if (v31 <= 0xFFFFFFBF)
        {
          v34 = (unint64_t)(v31 + 64) >> 6;
          do
          {
            v35 = *v33++;
            *v32++ = v35;
            --v34;
          }
          while (v34);
        }
      }
    }
    sub_1C4DF8EAC(&v43, &v38, -*(_DWORD *)a2, v4);
    sub_1C48552C0((uint64_t)&v45 + 8, (uint64_t)v44);
    sub_1C47A8258(v44);
    sub_1C47A8258(&v39);
  }
  llvm::detail::DoubleAPFloat::DoubleAPFloat(a4, (uint64_t)&unk_1C866F1C0, (uint64_t)v49, (uint64_t)&v45);
  sub_1C47A8258((uint64_t *)&v45 + 1);
  return sub_1C47A8258((uint64_t *)&v50);
}

uint64_t llvm::APFloat::Storage::Storage(uint64_t a1, uint64_t *a2, void *a3)
{
  char v4;
  uint64_t v6;
  void *v7;
  int v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  if (a3 == &unk_1C866F1C0)
  {
    v6 = *a2;
    v7 = (void *)a2[1];
    v8 = *((_DWORD *)a2 + 4);
    v9 = *((_BYTE *)a2 + 20);
    *a2 = (uint64_t)&unk_1C866F210;
    v10 = v6;
    v11 = v7;
    LODWORD(v12) = v8;
    BYTE4(v12) = v9 & 0xF;
    llvm::APFloat::Storage::Storage(v16, &v10);
    if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F && v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
    v14 = 3;
    v13 = -1023;
    v11 = &unk_1C866F198;
    v12 = 0;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)a1, (uint64_t)&unk_1C866F1C0, (uint64_t)v15, (uint64_t)&v10);
    sub_1C47A8258((uint64_t *)&v11);
    sub_1C47A8258(v16);
  }
  else
  {
    *(_QWORD *)a1 = &unk_1C866F210;
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v4 = *(_BYTE *)(a1 + 20) & 0xF8 | *((_BYTE *)a2 + 20) & 7;
    *(_BYTE *)(a1 + 20) = v4;
    *(_BYTE *)(a1 + 20) = v4 & 0xF7 | *((_BYTE *)a2 + 20) & 8;
    *a2 = (uint64_t)&unk_1C866F210;
  }
  return a1;
}

uint64_t llvm::APFloat::APFloat(uint64_t a1, void *a2, unsigned __int8 *a3, unint64_t a4)
{
  __int128 *v7;
  char v8;
  char *v9;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = (__int128 *)sub_1C4DF9184((_QWORD *)(a1 + 8), a2);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::convertFromString(v7, a3, a4, 1, (uint64_t)&v13);
  else
    llvm::detail::IEEEFloat::convertFromString((uint64_t)v7, a3, a4, 1, (uint64_t)&v13);
  v8 = v14;
  if ((v14 & 1) != 0)
  {
    v9 = v13;
    v13 = 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = v9;
  sub_1C4D62BD4(&v11, &v12);
  if (v11)
    (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
  if ((v8 & 1) != 0 && v13)
    (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

{
  __int128 *v7;
  char v8;
  char *v9;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = (__int128 *)sub_1C4DF9184((_QWORD *)(a1 + 8), a2);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::convertFromString(v7, a3, a4, 1, (uint64_t)&v13);
  else
    llvm::detail::IEEEFloat::convertFromString((uint64_t)v7, a3, a4, 1, (uint64_t)&v13);
  v8 = v14;
  if ((v14 & 1) != 0)
  {
    v9 = v13;
    v13 = 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = v9;
  sub_1C4D62BD4(&v11, &v12);
  if (v11)
    (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
  if ((v8 & 1) != 0 && v13)
    (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

uint64_t llvm::APFloat::convert(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  char v22[8];
  uint64_t v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v5 = a1 + 8;
  v4 = *(void **)(a1 + 8);
  if (v4 == a2)
  {
    v9 = 0;
    *a4 = 0;
  }
  else
  {
    if (a2 != &unk_1C866F1C0 && v4 != &unk_1C866F1C0)
      return llvm::detail::IEEEFloat::convert((uint64_t *)(a1 + 8), (uint64_t)a2, a3, a4);
    if (a2 != &unk_1C866F1C0 || v4 == &unk_1C866F1C0)
    {
      v9 = llvm::detail::IEEEFloat::convert((uint64_t *)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)a2, a3, a4);
      v11 = *(_DWORD **)(a1 + 8);
      v12 = v5;
      if (v11 == (_DWORD *)&unk_1C866F1C0)
      {
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *(_DWORD **)(v13 + 8);
        v12 = v13 + 8;
        v11 = v14;
      }
      v15 = *(_QWORD *)(v12 + 8);
      v16 = v11;
      v17 = v15;
      v18 = *(_DWORD *)(v12 + 16);
      v19 = *(_BYTE *)(v12 + 20) & 0xF;
      *(_QWORD *)v12 = &unk_1C866F210;
      sub_1C5DC0EE8((uint64_t)v22, (uint64_t)&v16, a2);
      sub_1C48552C0(v5, (uint64_t)v23);
      sub_1C47A8258(v23);
      if ((v16[2] - 64) > 0xFFFFFF7F)
        return v9;
      v10 = v17;
      if (!v17)
        return v9;
    }
    else
    {
      v9 = llvm::detail::IEEEFloat::convert((uint64_t *)(a1 + 8), (uint64_t)&unk_1C866F22C, a3, a4);
      llvm::detail::IEEEFloat::bitcastToAPInt(v5, (unsigned int *)&v20);
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v23, (uint64_t)&unk_1C866F1C0, (uint64_t)&v20);
      sub_1C48552C0(v5, (uint64_t)v23);
      sub_1C47A8258(v23);
      if (v21 < 0x41)
        return v9;
      v10 = v20;
      if (!v20)
        return v9;
    }
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  return v9;
}

void llvm::APFloat::getAllOnesValue(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  const llvm::APInt *v4;
  llvm::detail::IEEEFloat *v5;
  uint64_t v6;
  const llvm::APInt *v8;
  unsigned int v9;

  v2 = a1;
  v3 = a1[3];
  v9 = v3;
  if (v3 > 0x40)
  {
    v6 = a2;
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, -1, 1);
    a2 = v6;
    v2 = a1;
  }
  else
  {
    if (v3)
      v4 = (const llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v3);
    else
      v4 = 0;
    v8 = v4;
  }
  v5 = (llvm::detail::IEEEFloat *)(a2 + 8);
  if (v2 == (unsigned int *)&unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v5, (uint64_t)&unk_1C866F1C0, (uint64_t)&v8);
  else
    llvm::detail::IEEEFloat::initFromAPInt(v5, v2, &v8);
  if (v9 >= 0x41)
  {
    if (v8)
      JUMPOUT(0x1CAA32F9CLL);
  }
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a2 + 8);
  v13 = v15;
  v14 = 0x400000000;
  sub_1C4765AA4((char *)&v13, (unint64_t)(v8 + 63) >> 6, 0);
  v9 = sub_1C47A8BBC(a1, (llvm::APInt *)v13, v14, v8, *(_BYTE *)(a2 + 12) == 0, a3, a4);
  v12 = v8;
  llvm::APInt::initFromArray((unsigned int *)&v11, (uint64_t *)v13, v14);
  if (*(_DWORD *)(a2 + 8) >= 0x41u && *(_QWORD *)a2)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a2, 0x1000C8000313F17);
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  if (v13 != v15)
    free(v13);
  return v9;
}

double llvm::APFloat::convertToDouble(llvm::APFloat *this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  _BOOL4 v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  double *v14;
  double v15;
  uint64_t v17;
  llvm::APFloat *v18;
  char v19;
  double *v20;
  unsigned int v21;
  double *v22;
  void *v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v1 == &unk_1C866F198)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)this + 8, (unsigned int *)&v22);
    if (v23 > 0x40)
    {
      v15 = *v22;
      MEMORY[0x1CAA32F9C]();
    }
    else
    {
      return *(double *)&v22;
    }
  }
  else
  {
    if ((_UNKNOWN *)v1 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v23, (llvm::APFloat *)((char *)this + 8));
    }
    else
    {
      v23 = (void *)*((_QWORD *)this + 1);
      v2 = *(unsigned int *)(v1 + 8);
      if ((v2 + 64) >= 0x80)
      {
        v17 = v1;
        v18 = this;
        v2 = operator new[]();
        v1 = v17;
        this = v18;
        v24 = v2;
      }
      v3 = *((_BYTE *)this + 28);
      v4 = v3 & 7;
      v26 = v3 & 0xF;
      v25 = *((_DWORD *)this + 6);
      v6 = (v3 & 6) != 0 && v4 != 3;
      if (v4 == 1 || v6)
      {
        v7 = *(unsigned int *)(v1 + 8);
        if ((v7 - 64) > 0xFFFFFF7F)
          v2 = (uint64_t)&v24;
        v10 = (uint64_t *)*((_QWORD *)this + 2);
        v8 = (char *)this + 16;
        v9 = v10;
        if ((*(_DWORD *)(*((_QWORD *)v8 - 1) + 8) - 64) >= 0xFFFFFF80)
          v9 = (uint64_t *)v8;
        if (v7 <= 0xFFFFFFBF)
        {
          v11 = (unint64_t)(v7 + 64) >> 6;
          do
          {
            v12 = *v9++;
            *(_QWORD *)v2 = v12;
            v2 += 8;
            --v11;
          }
          while (v11);
        }
      }
    }
    llvm::APFloat::convert((uint64_t)&v22, &unk_1C866F198, 1, &v19);
    if (v23 == &unk_1C866F1C0)
      v13 = (void **)(v24 + 8);
    else
      v13 = &v23;
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v13, (unsigned int *)&v20);
    if (v21 >= 0x41)
      v14 = v20;
    else
      v14 = (double *)&v20;
    v15 = *v14;
    if (v21 >= 0x41 && v20)
      MEMORY[0x1CAA32F9C]();
    sub_1C47A8258((uint64_t *)&v23);
  }
  return v15;
}

float llvm::APFloat::convertToFloat(llvm::APFloat *this)
{
  const llvm::detail::DoubleAPFloat *v1;
  void *v2;
  llvm::detail::IEEEFloat *v4;
  float v5;
  char v6;
  _BYTE v7[8];
  uint64_t v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v1 = (llvm::APFloat *)((char *)this + 8);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2 == &unk_1C866F184)
    return llvm::detail::IEEEFloat::convertToFloat((llvm::APFloat *)((char *)this + 8));
  if (v2 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8, v1);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v8, (uint64_t **)v1);
  llvm::APFloat::convert((uint64_t)v7, &unk_1C866F184, 1, &v6);
  if ((_UNKNOWN *)v8[0] == &unk_1C866F1C0)
    v4 = (llvm::detail::IEEEFloat *)(v8[1] + 8);
  else
    v4 = (llvm::detail::IEEEFloat *)v8;
  v5 = llvm::detail::IEEEFloat::convertToFloat(v4);
  sub_1C47A8258(v8);
  return v5;
}

void llvm::APInt::initSlowCase(llvm::APInt *this, uint64_t a2, int a3)
{
  llvm::APInt *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = this;
  v6 = (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8;
  v7 = (_QWORD *)operator new[]();
  bzero(v7, v6);
  *(_QWORD *)v5 = v7;
  *v7 = a2;
  v8 = *((unsigned int *)v5 + 2);
  if (a2 < 0 && a3 && v8 >= 0x41)
  {
    v9 = 8;
    do
    {
      *(_QWORD *)(*(_QWORD *)v5 + v9) = -1;
      v9 += 8;
    }
    while (8 * ((unint64_t)(v8 + 63) >> 6) != v9);
  }
  if ((_DWORD)v8)
  {
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (v8 >= 0x41)
      v5 = (llvm::APInt *)(*(_QWORD *)v5 + 8 * (((unint64_t)(v8 + 63) >> 6) - 1));
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)v5 &= v10;
}

void *llvm::APInt::initSlowCase(llvm::APInt *this, const void **a2)
{
  void *v4;

  v4 = (void *)operator new[]();
  *(_QWORD *)this = v4;
  return memcpy(v4, *a2, (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8);
}

unsigned int *llvm::APInt::initFromArray(unsigned int *result, uint64_t *a2, unsigned int a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v4 = result;
  v5 = result[2];
  if (v5 > 0x40)
  {
    v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v6 = operator new[]();
    bzero((void *)v6, v8);
    *(_QWORD *)v4 = v6;
    v9 = v4[2];
    v10 = (unint64_t)(v9 + 63) >> 6;
    if (v10 >= a3)
      LODWORD(v10) = a3;
    result = (unsigned int *)memcpy((void *)v6, a2, (8 * v10));
    LODWORD(v5) = v9;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)result = *a2;
  }
  if (!(_DWORD)v5)
  {
    v11 = 0;
    goto LABEL_8;
  }
  v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
  if (v5 <= 0x40)
  {
LABEL_8:
    *(_QWORD *)v4 = v11 & v6;
    return result;
  }
  v12 = (((unint64_t)v5 + 63) >> 6) - 1;
  *(_QWORD *)(v6 + 8 * v12) &= v11;
  return result;
}

unsigned int *llvm::APInt::APInt(unsigned int *a1, unsigned int a2, uint64_t *a3, unsigned int a4)
{
  a1[2] = a2;
  llvm::APInt::initFromArray(a1, a3, a4);
  return a1;
}

{
  a1[2] = a2;
  llvm::APInt::initFromArray(a1, a3, a4);
  return a1;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, int a2, unsigned int a3, unint64_t *a4)
{
  *((_DWORD *)this + 2) = a2;
  llvm::APInt::initFromArray((unsigned int *)this, (uint64_t *)a4, a3);
  return this;
}

{
  *((_DWORD *)this + 2) = a2;
  llvm::APInt::initFromArray((unsigned int *)this, (uint64_t *)a4, a3);
  return this;
}

uint64_t llvm::APInt::APInt(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  llvm::APInt::fromString(a1, a2, a3, a4, a5);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = a2;
  llvm::APInt::fromString(a1, a2, a3, a4, a5);
  return a1;
}

void llvm::APInt::fromString(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unsigned int a5)
{
  int v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v8 = *a3;
  v9 = v8 == 45 || v8 == 43;
  v10 = v9;
  if (v9)
    v11 = a3 + 1;
  else
    v11 = a3;
  v12 = *(unsigned int *)(a1 + 8);
  if (v12 >= 0x41)
  {
    v14 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    v13 = (void *)operator new[]();
    bzero(v13, v14);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)a1 = v13;
  if (a5 == 16)
    v15 = 4;
  else
    v15 = a5 == 2;
  if (a5 == 8)
    v16 = 3;
  else
    v16 = v15;
  v17 = a4 - v10;
  if (a4 != v10)
  {
    v20 = a4 - v10;
    v21 = a5 - 11;
    do
    {
      v22 = *v11;
      if (a5 == 16 || a5 == 36)
      {
        v23 = v22 - 48;
        if ((v22 - 48) < 0xA)
          goto LABEL_39;
        if (v22 - 65 <= v21)
        {
          v23 = v22 - 55;
          goto LABEL_39;
        }
        if (v22 - 97 <= v21)
        {
          v23 = v22 - 87;
          goto LABEL_39;
        }
        v24 = 10;
      }
      else
      {
        v23 = v22 - 48;
        v24 = a5;
      }
      if (v23 >= v24)
        v23 = -1;
LABEL_39:
      if (v20 >= 2)
      {
        if (!v16)
        {
          v25 = *(unsigned int *)(a1 + 8);
          if (v25 <= 0x40)
          {
            *(_QWORD *)a1 *= a5;
            if ((_DWORD)v25)
              goto LABEL_44;
LABEL_50:
            v26 = 0;
            goto LABEL_45;
          }
          llvm::APInt::tcMultiplyPart(*(llvm::APInt **)a1, *(unint64_t **)a1, (const unint64_t *)a5, 0, (unint64_t)(v25 + 63) >> 6, (unint64_t)(v25 + 63) >> 6, 0);
          LODWORD(v25) = *(_DWORD *)(a1 + 8);
          if (!(_DWORD)v25)
            goto LABEL_50;
LABEL_44:
          v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          if (v25 >= 0x41)
            v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * ((((unint64_t)v25 + 63) >> 6) - 1));
          else
LABEL_45:
            v27 = (_QWORD *)a1;
          *v27 &= v26;
          goto LABEL_47;
        }
        sub_1C4888094(a1, v16);
      }
LABEL_47:
      llvm::APInt::operator+=(a1, v23);
      ++v11;
      --v17;
    }
    while (v17);
  }
  if (v8 == 45)
  {
    v18 = *(_DWORD *)(a1 + 8);
    if (v18 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase(a1);
    }
    else
    {
      if (v18)
        v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      else
        v19 = 0;
      *(_QWORD *)a1 = v19 & ~*(_QWORD *)a1;
    }
    llvm::APInt::operator++(a1);
  }
}

uint64_t llvm::APInt::reallocate(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(unsigned int *)(this + 8);
  if (((unint64_t)(v4 + 63) >> 6) == (((unint64_t)a2 + 63) >> 6))
  {
    *(_DWORD *)(this + 8) = a2;
  }
  else
  {
    if (v4 >= 0x41)
    {
      this = *(_QWORD *)this;
      if (*(_QWORD *)v3)
        this = MEMORY[0x1CAA32F9C]();
    }
    *(_DWORD *)(v3 + 8) = a2;
    if (a2 >= 0x41)
    {
      this = operator new[]();
      *(_QWORD *)v3 = this;
    }
  }
  return this;
}

const llvm::APInt *llvm::APInt::assignSlowCase(const llvm::APInt *this, const llvm::APInt *a2)
{
  const llvm::APInt *v3;
  uint64_t v4;

  if (this != a2)
  {
    v3 = this;
    this = (const llvm::APInt *)llvm::APInt::reallocate((uint64_t)this, *((_DWORD *)a2 + 2));
    v4 = *((unsigned int *)v3 + 2);
    if (v4 <= 0x40)
      *(_QWORD *)v3 = *(_QWORD *)a2;
    else
      return (const llvm::APInt *)memcpy(*(void **)v3, *(const void **)a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
  }
  return this;
}

uint64_t llvm::APInt::Profile(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 4);
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v4;
  v6 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v6;
  v7 = *(unsigned int *)(v3 + 8);
  if (v7 > 0x40)
  {
    v11 = 0;
    v12 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      result = sub_1C4F52194(a2, *(_QWORD *)(*(_QWORD *)v3 + v11));
      v11 += 8;
    }
    while (v12 != v11);
  }
  else
  {
    v8 = *(_QWORD *)v3;
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 4);
      LODWORD(v6) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = v8;
    v9 = *(_DWORD *)(a2 + 12);
    v10 = (*(_DWORD *)(a2 + 8) + 1);
    *(_DWORD *)(a2 + 8) = v10;
    if (v10 >= v9)
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v10 + 1, 4);
      LODWORD(v10) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = HIDWORD(v8);
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t llvm::APInt::operator++(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;

  v1 = *(unsigned int *)(result + 8);
  if (v1 >= 0x41)
  {
    v3 = *(uint64_t **)result;
    v4 = (unint64_t)(v1 + 63) >> 6;
    v5 = v4 - 1;
    do
    {
      v6 = *v3 + 1;
      *v3++ = v6;
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      --v5;
    }
    while (!v7);
    *(_QWORD *)(*(_QWORD *)result + 8 * (v4 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  else
  {
    if ((_DWORD)v1)
      v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    else
      v2 = 0;
    *(_QWORD *)result = v2 & (*(_QWORD *)result + 1);
  }
  return result;
}

uint64_t llvm::APInt::operator--(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(unsigned int *)(result + 8);
  if (v1 >= 0x41)
  {
    v3 = *(_QWORD **)result;
    v4 = (unint64_t)(v1 + 63) >> 6;
    v5 = v4 - 1;
    do
    {
      v6 = v5;
      if ((*v3++)-- != 0)
        break;
      --v5;
    }
    while (v6);
    *(_QWORD *)(*(_QWORD *)result + 8 * (v4 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  else
  {
    if ((_DWORD)v1)
      v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    else
      v2 = 0;
    *(_QWORD *)result = v2 & (*(_QWORD *)result - 1);
  }
  return result;
}

uint64_t llvm::APInt::operator+=(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v11;

  v2 = *(unsigned int *)(result + 8);
  if (v2 >= 0x41)
  {
    v4 = 0;
    v5 = *(unint64_t **)result;
    v6 = *a2;
    v7 = (unint64_t)(v2 + 63) >> 6;
    v8 = v7;
    do
    {
      v9 = *v6++;
      v10 = v9 + *v5;
      v11 = v10 + 1 <= *v5;
      if (v4)
      {
        ++v10;
        v4 = v11;
      }
      else
      {
        v4 = v10 < *v5;
      }
      *v5++ = v10;
      --v8;
    }
    while (v8);
    *(_QWORD *)(*(_QWORD *)result + 8 * (v7 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    if ((_DWORD)v2)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v3 = 0;
    *(_QWORD *)result = v3 & ((unint64_t)*a2 + *(_QWORD *)result);
  }
  return result;
}

unint64_t llvm::APInt::tcAdd(llvm::APInt *this, unint64_t *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL4 v7;

  if (a4)
  {
    v4 = a4;
    do
    {
      v5 = *a2++;
      v6 = v5 + *(_QWORD *)this;
      v7 = v6 + 1 <= *(_QWORD *)this;
      if (a3)
      {
        ++v6;
        a3 = v7;
      }
      else
      {
        a3 = v6 < *(_QWORD *)this;
      }
      *(_QWORD *)this = v6;
      this = (llvm::APInt *)((char *)this + 8);
      --v4;
    }
    while (v4);
  }
  return a3;
}

uint64_t llvm::APInt::operator+=(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  v2 = *(unsigned int *)(result + 8);
  if (v2 >= 0x41)
  {
    v4 = *(unint64_t **)result;
    v5 = (unint64_t)(v2 + 63) >> 6;
    v6 = v5 - 1;
    do
    {
      v7 = *v4 + a2;
      *v4++ = v7;
      v8 = v7 >= a2 || v6-- == 0;
      a2 = 1;
    }
    while (!v8);
    *(_QWORD *)(*(_QWORD *)result + 8 * (v5 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    if ((_DWORD)v2)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v3 = 0;
    *(_QWORD *)result = v3 & (*(_QWORD *)result + a2);
  }
  return result;
}

BOOL llvm::APInt::tcAddPart(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!a3)
    return 1;
  v3 = __CFADD__(*(_QWORD *)this, a2);
  *(_QWORD *)this += a2;
  if (!v3)
    return 0;
  v4 = 1;
  do
  {
    v5 = v4;
    if (a3 == v4)
      break;
    v6 = *((_QWORD *)this + v4++);
    *((_QWORD *)this + v5) = v6 + 1;
  }
  while (v6 == -1);
  return v5 >= a3;
}

uint64_t llvm::APInt::operator-=(uint64_t result, unint64_t **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  if (v2 >= 0x41)
  {
    v4 = 0;
    v5 = *(unint64_t **)result;
    v6 = *a2;
    v7 = (unint64_t)(v2 + 63) >> 6;
    v8 = v7;
    do
    {
      v9 = *v6++;
      v10 = *v5 - v9;
      v11 = *v5 < v9;
      v12 = *v5 + ~v9;
      if (v4)
      {
        v4 = v12 >= *v5;
      }
      else
      {
        v12 = v10;
        v4 = v11;
      }
      *v5++ = v12;
      --v8;
    }
    while (v8);
    *(_QWORD *)(*(_QWORD *)result + 8 * (v7 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    if ((_DWORD)v2)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v3 = 0;
    *(_QWORD *)result = v3 & (*(_QWORD *)result - (_QWORD)*a2);
  }
  return result;
}

unint64_t llvm::APInt::tcSubtract(llvm::APInt *this, unint64_t *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;

  if (a4)
  {
    v4 = a4;
    do
    {
      v5 = *a2++;
      v6 = *(_QWORD *)this - v5;
      v7 = *(_QWORD *)this < v5;
      v8 = *(_QWORD *)this + ~v5;
      if (a3)
      {
        a3 = v8 >= *(_QWORD *)this;
      }
      else
      {
        v8 = v6;
        a3 = v7;
      }
      *(_QWORD *)this = v8;
      this = (llvm::APInt *)((char *)this + 8);
      --v4;
    }
    while (v4);
  }
  return a3;
}

uint64_t llvm::APInt::operator-=(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  v2 = *(unsigned int *)(result + 8);
  if (v2 >= 0x41)
  {
    v4 = *(unint64_t **)result;
    v5 = (unint64_t)(v2 + 63) >> 6;
    v6 = v5 - 1;
    do
    {
      v7 = *v4 >= a2 || v6-- == 0;
      *v4++ -= a2;
      a2 = 1;
    }
    while (!v7);
    *(_QWORD *)(*(_QWORD *)result + 8 * (v5 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    if ((_DWORD)v2)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v3 = 0;
    *(_QWORD *)result = v3 & (*(_QWORD *)result - a2);
  }
  return result;
}

BOOL llvm::APInt::tcSubtractPart(llvm::APInt *this, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!a3)
    return 1;
  v3 = *(_QWORD *)this >= a2;
  *(_QWORD *)this -= a2;
  if (v3)
    return 0;
  v4 = 1;
  do
  {
    v5 = v4;
    if (a3 == v4)
      break;
    v6 = *((_QWORD *)this + v4);
    *((_QWORD *)this + v4++) = v6 - 1;
  }
  while (!v6);
  return v5 >= a3;
}

uint64_t llvm::APInt::operator*@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  const unint64_t **v13;
  unint64_t v14;
  llvm::APInt *v15;
  unint64_t v16;
  const unint64_t *v17;
  unint64_t v18;

  v4 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 <= 0x40)
  {
    v7 = *a2 * *(_QWORD *)result;
    *(_DWORD *)(a3 + 8) = v6;
    if (v6)
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    else
      v8 = 0;
    v9 = v8 & v7;
    goto LABEL_14;
  }
  result = operator new[]();
  v10 = result;
  v11 = *(unsigned int *)(v4 + 8);
  *(_DWORD *)(a3 + 8) = v11;
  *(_QWORD *)a3 = result;
  v12 = *(unint64_t **)v4;
  v13 = (const unint64_t **)*a2;
  v14 = (unint64_t)(v11 + 63) >> 6;
  *(_QWORD *)result = 0;
  if (v14 < 2)
  {
    if (!(_DWORD)v14)
      goto LABEL_11;
  }
  else
  {
    bzero((void *)(result + 8), ((8 * v14 + 0x7FFFFFFF0) & 0x7FFFFFFF8) + 8);
  }
  v15 = (llvm::APInt *)v10;
  v16 = (unint64_t)(v11 + 63) >> 6;
  do
  {
    v17 = *v13++;
    result = llvm::APInt::tcMultiplyPart(v15, v12, v17, 0, (unint64_t)(v11 + 63) >> 6, v16, 1);
    v15 = (llvm::APInt *)((char *)v15 + 8);
    --v16;
  }
  while (v16);
LABEL_11:
  if (!(_DWORD)v11)
  {
    v18 = 0;
    goto LABEL_13;
  }
  v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (v11 <= 0x40)
  {
LABEL_13:
    v9 = v18 & v10;
LABEL_14:
    *(_QWORD *)a3 = v9;
    return result;
  }
  *(_QWORD *)(v10 + 8 * (v14 - 1)) &= v18;
  return result;
}

uint64_t llvm::APInt::tcMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t **a3, const unint64_t *a4)
{
  unsigned int v4;
  llvm::APInt *v7;
  uint64_t v8;
  uint64_t v9;
  const unint64_t *v10;

  v4 = a4;
  v7 = this;
  *(_QWORD *)this = 0;
  if (a4 < 2)
  {
    if (!(_DWORD)a4)
      return 0;
  }
  else
  {
    bzero((char *)this + 8, 8 * ((_DWORD)a4 - 2) + 8);
  }
  LODWORD(v8) = 0;
  v9 = v4;
  do
  {
    v10 = *a3++;
    v8 = llvm::APInt::tcMultiplyPart(v7, a2, v10, 0, v4, v9, 1) | v8;
    v7 = (llvm::APInt *)((char *)v7 + 8);
    --v9;
  }
  while (v9);
  return v8;
}

uint64_t llvm::APInt::andAssignSlowCase(uint64_t this, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)this;
    v4 = *a2;
    v5 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v6 = *v4++;
      *v3++ &= v6;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::APInt::orAssignSlowCase(uint64_t this, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)this;
    v4 = *a2;
    v5 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v6 = *v4++;
      *v3++ |= v6;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::APInt::operator*=(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;

  llvm::APInt::operator*(a1, a2, (uint64_t)&v4);
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t llvm::APInt::operator*=(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    v5 = result;
    llvm::APInt::tcMultiplyPart(*(llvm::APInt **)result, *(unint64_t **)result, a2, 0, (unint64_t)(v2 + 63) >> 6, (unint64_t)(v2 + 63) >> 6, 0);
    result = v5;
    LODWORD(v2) = *(_DWORD *)(v5 + 8);
  }
  else
  {
    *(_QWORD *)result *= (_QWORD)a2;
  }
  v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if ((v2 - 1) >= 0x40)
  {
    if ((_DWORD)v2)
    {
      if (v2 >= 0x41)
      {
        v4 = (_QWORD *)(*(_QWORD *)result + 8 * ((((unint64_t)v2 + 63) >> 6) - 1));
        goto LABEL_5;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  v4 = (_QWORD *)result;
LABEL_5:
  *v4 &= v3;
  return result;
}

uint64_t llvm::APInt::tcMultiplyPart(llvm::APInt *this, unint64_t *a2, const unint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v7;
  unint64_t *v8;
  llvm::APInt *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;

  if (a5 >= a6)
    v7 = a6;
  else
    v7 = a5;
  if ((_DWORD)v7)
  {
    v8 = a2;
    v9 = this;
    do
    {
      v10 = 0;
      v12 = *v8++;
      v11 = v12;
      if (a3 && v11)
      {
        v13 = v11 * (unint64_t)a3;
        v14 = HIDWORD(v11);
        v15 = v11 * (unint64_t)HIDWORD(a3);
        v16 = HIDWORD(v15) + HIDWORD(v11) * (unint64_t)HIDWORD(a3);
        v17 = v11 * (_QWORD)a3;
        v18 = __CFADD__(v17, a4);
        a4 += v17;
        v19 = v18;
        if (v17 >= v13 + (v15 << 32))
          v10 = (__PAIR128__(v19, v13)
               + __PAIR128__(v16 + ((v14 * (unint64_t)a3) >> 32), v15 << 32)) >> 64;
        else
          v10 = ((__PAIR128__(v19, v13)
                + __PAIR128__(v16 + ((v14 * (unint64_t)a3) >> 32), v15 << 32)) >> 64)
              + 1;
      }
      if (a7)
      {
        if (__CFADD__(a4, *(_QWORD *)v9))
          ++v10;
        a4 += *(_QWORD *)v9;
      }
      *(_QWORD *)v9 = a4;
      v9 = (llvm::APInt *)((char *)v9 + 8);
      a4 = v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v10 = a4;
  }
  if (a5 < a6)
  {
    v20 = 0;
    *((_QWORD *)this + a5) = v10;
    return v20;
  }
  if (v10)
    return 1;
  v20 = 0;
  if (a3 && a6 < a5)
  {
    v22 = &a2[a6];
    v23 = a5 - (unint64_t)a6;
    while (!*v22++)
    {
      if (!--v23)
        return 0;
    }
    return 1;
  }
  return v20;
}

BOOL llvm::APInt::equalSlowCase(const void **this, const void **a2)
{
  return memcmp(*this, *a2, (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8) == 0;
}

uint64_t llvm::APInt::compare(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v4 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v4)
        return 0;
      v5 = *(_QWORD *)(*(_QWORD *)this - 8 + v4);
      v6 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v4);
      v4 -= 8;
    }
    while (v5 == v6);
    if (v5 > v6)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else if (*(_QWORD *)this < *(_QWORD *)a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return *(_QWORD *)this > *(_QWORD *)a2;
  }
}

uint64_t llvm::APInt::tcCompare(llvm::APInt *this, const unint64_t *a2, const unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = a3;
  do
  {
    if (!(v3 * 8))
      return 0;
    v4 = *(_QWORD *)((char *)this + v3 * 8 - 8);
    v5 = a2[--v3];
  }
  while (v4 == v5);
  if (v4 > v5)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t llvm::APInt::compareSigned(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  const llvm::APInt *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v9 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v2 - 1) >> 6)) & (1 << (v2 - 1));
    v10 = *((_DWORD *)a2 + 2);
    v11 = v10 - 1;
    if (v10 >= 0x41)
      v12 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * (v11 >> 6));
    else
      v12 = a2;
    if ((v9 != 0) == ((*(_QWORD *)v12 >> v11) & 1))
    {
      v13 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v13)
          return 0;
        v14 = *(_QWORD *)(*(_QWORD *)this - 8 + v13);
        v15 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v13);
        v13 -= 8;
      }
      while (v14 == v15);
      if (v14 > v15)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    else if (v9)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v3 = -v2;
    v4 = (uint64_t)(*(_QWORD *)this << v3) >> v3;
    v5 = (uint64_t)(*(_QWORD *)a2 << v3) >> v3;
    v6 = v4 < v5;
    v7 = v4 > v5;
    if (v6)
      return 0xFFFFFFFFLL;
    else
      return v7;
  }
}

_QWORD *llvm::APInt::setBitsSlowCase(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a2 >> 6;
  v4 = a3 >> 6;
  v5 = -1 << a2;
  if ((a3 & 0x3F) != 0)
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F);
    if ((_DWORD)v4 == v3)
      v5 &= v7;
    else
      *(_QWORD *)(*this + 8 * v4) |= v7;
  }
  *(_QWORD *)(*this + 8 * v3) |= v5;
  v6 = v3 + 1;
  if (v6 < v4)
  {
    do
      *(_QWORD *)(*this + 8 * v6++) = -1;
    while (v4 != v6);
  }
  return this;
}

uint64_t llvm::APInt::flipAllBitsSlowCase(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(unsigned int *)(this + 8);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD **)this;
    v3 = (unint64_t)(v1 + 63) >> 6;
    v4 = v3;
    do
    {
      *v2 = ~*v2;
      ++v2;
      --v4;
    }
    while (v4);
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    if (v1 >= 0x41)
      this = *(_QWORD *)this + 8 * (v3 - 1);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)this &= v5;
  return this;
}

void **llvm::APInt::concatSlowCase@<X0>(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, void **a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;

  v6 = *((_DWORD *)a2 + 2);
  v7 = v6 + *((_DWORD *)this + 2);
  if (v6 >= v7)
    sub_1C5DD14E0((uint64_t)a3, (uint64_t)a2);
  else
    llvm::APInt::zext(a2, v7, (uint64_t)a3);
  return llvm::APInt::insertBits(a3, this, *((_DWORD *)a2 + 2));
}

void llvm::APInt::zextOrSelf(llvm::APInt *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)this + 2) < a2)
    llvm::APInt::zext(this, a2, a3);
  else
    sub_1C5DD14E0(a3, (uint64_t)this);
}

void **llvm::APInt::insertBits(void **this, const llvm::APInt *a2, unsigned int a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  const llvm::APInt *v10;
  unsigned int v11;
  char *v12;
  const llvm::APInt *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  const llvm::APInt *v18;

  v3 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v3)
  {
    v4 = *((_DWORD *)this + 2);
    if ((_DWORD)v3 == v4)
    {
      return sub_1C63817D4(this, (uint64_t)a2);
    }
    else if (v4 > 0x40)
    {
      v6 = a3 & 0x3F;
      v7 = a3 >> 6;
      v8 = v3 - 1 + a3;
      if (a3 >> 6 == v8 >> 6)
      {
        *((_QWORD *)*this + v7) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v3 << v6);
        *((_QWORD *)*this + v7) |= *(_QWORD *)a2 << v6;
      }
      else
      {
        v14 = v3 - 1;
        v15 = *((_DWORD *)a2 + 2);
        v16 = (uint64_t *)this;
        v18 = a2;
        if ((a3 & 0x3F) != 0)
        {
          v9 = 0;
          v11 = a3;
          v10 = a2;
          do
          {
            if (*((_DWORD *)v10 + 2) >= 0x41u)
              v10 = (const llvm::APInt *)(*(_QWORD *)v10 + 8 * (v9 >> 6));
            this = (void **)sub_1C62C45DC(v16, v11 + v9, (*(_QWORD *)v10 >> v9) & 1);
            v11 = a3;
            v10 = v18;
            ++v9;
          }
          while (v15 != v9);
        }
        else
        {
          v12 = (char *)*this + 8 * v7;
          if (v3 >= 0x41)
            a2 = *(const llvm::APInt **)a2;
          this = (void **)memcpy(v12, a2, (v3 >> 3) & 0x1FFFFFF8);
          if ((v15 & 0x3F) != 0)
          {
            *(_QWORD *)(*v16 + 8 * (v8 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v15 & 0x3F));
            if (*((_DWORD *)v18 + 2) >= 0x41u)
              v13 = (const llvm::APInt *)(*(_QWORD *)v18 + 8 * (v14 >> 6));
            else
              v13 = v18;
            *(_QWORD *)(*v16 + 8 * (v8 >> 6)) |= *(_QWORD *)v13;
          }
        }
      }
    }
    else
    {
      v5 = (unint64_t)*this & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v3 << a3);
      *this = (void *)v5;
      *this = (void *)((*(_QWORD *)a2 << a3) | v5);
    }
  }
  return this;
}

uint64_t *llvm::APInt::flipBit(llvm::APInt *this, unsigned int a2)
{
  llvm::APInt *v2;

  v2 = this;
  if (*((_DWORD *)this + 2) >= 0x41u)
    v2 = (llvm::APInt *)(*(_QWORD *)this + 8 * (a2 >> 6));
  return sub_1C62C45DC((uint64_t *)this, a2, ((*(_QWORD *)v2 >> a2) & 1) == 0);
}

uint64_t llvm::APInt::insertBits(uint64_t this, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;

  v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
  v5 = a3 >> 6;
  if (a4 && v5 == (a3 + a4 - 1) >> 6)
  {
    v6 = v4 & a2;
    if (*(_DWORD *)(this + 8) > 0x40u)
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v5) &= ~(v4 << a3);
      *(_QWORD *)(*(_QWORD *)this + 8 * v5) |= v6 << a3;
      return this;
    }
    v10 = *(_QWORD *)this & ~(v4 << a3);
    v11 = v6 << a3;
    goto LABEL_12;
  }
  if (a4)
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
  else
    v7 = 0;
  v8 = v7 & a2;
  if (*(_DWORD *)(this + 8) <= 0x40u)
  {
    v10 = *(_QWORD *)this & ~(v7 << a3);
    v11 = v8 << a3;
LABEL_12:
    *(_QWORD *)this = v10 | v11;
    return this;
  }
  v9 = a3 + a4 - 1;
  *(_QWORD *)(*(_QWORD *)this + 8 * v5) &= ~(v7 << a3);
  *(_QWORD *)(*(_QWORD *)this + 8 * v5) |= v8 << a3;
  if (v5 != v9 >> 6)
  {
    v12 = v9 >> 6;
    v13 = -(a3 & 0x3F);
    *(_QWORD *)(*(_QWORD *)this + 8 * v12) &= ~(v7 >> v13);
    *(_QWORD *)(*(_QWORD *)this + 8 * v12) |= v8 >> v13;
  }
  return this;
}

void llvm::APInt::extractBits(llvm::APInt *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int *a4@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  void *v22;
  uint64_t *v23;
  llvm::APInt *v24;
  _QWORD *v25;
  unsigned int v26;

  v5 = *((_DWORD *)this + 2);
  if (v5 > 0x40)
  {
    v7 = a3 & 0x3F;
    v8 = a3 >> 6;
    v9 = (a2 + a3 - 1) >> 6;
    if (v9 != a3 >> 6)
    {
      if ((a3 & 0x3F) == 0)
      {
        v23 = (uint64_t *)(*(_QWORD *)this + 8 * v8);
        a4[2] = a2;
        llvm::APInt::initFromArray(a4, v23, v9 - v8 + 1);
        return;
      }
      v26 = a2;
      if (a2 > 0x40)
      {
        v24 = this;
        llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
        this = v24;
        v12 = (unint64_t)v25;
        v5 = *((_DWORD *)v24 + 2);
        a2 = v26;
      }
      else
      {
        v12 = 0;
        v25 = 0;
      }
      if (a2 >= 0x41)
        v13 = (const void **)v12;
      else
        v13 = (const void **)&v25;
      if (a2)
      {
        v14 = a2 + 63;
        v15 = ((unint64_t)v5 + 63) >> 6;
        v16 = v14 >> 6;
        do
        {
          v17 = *(_QWORD *)this;
          if (v8 + 1 >= v15)
            v18 = 0;
          else
            v18 = *(_QWORD *)(v17 + 8 * v8 + 8);
          *v13++ = (const void *)((v18 << (64 - v7)) | (*(_QWORD *)(v17 + 8 * v8++) >> v7));
          --v16;
        }
        while (v16);
        v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        if (a2 > 0x40)
        {
          v20 = v25;
          v25[(v14 >> 6) - 1] &= v19;
          a4[2] = a2;
          v21 = (v14 >> 3) & 0x3FFFFFF8;
          v22 = (void *)operator new[]();
          *(_QWORD *)a4 = v22;
          memcpy(v22, v20, v21);
          MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
          return;
        }
        v12 = (unint64_t)v25;
      }
      else
      {
        v19 = 0;
      }
      v11 = v12 & v19;
      a4[2] = a2;
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 8 * v8) >> v7;
  }
  else
  {
    v6 = *(_QWORD *)this >> a3;
  }
  a4[2] = a2;
  if (a2 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a4, v6, 0);
    return;
  }
  v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  if (!a2)
    v10 = 0;
  v11 = v10 & v6;
LABEL_9:
  *(_QWORD *)a4 = v11;
}

unint64_t llvm::APInt::extractBitsAsZExtValue(llvm::APInt *this, int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  if (*((_DWORD *)this + 2) <= 0x40u)
  {
    v4 = *(_QWORD *)this >> a3;
  }
  else
  {
    v3 = a2 + a3 - 1;
    v4 = *(_QWORD *)(*(_QWORD *)this + 8 * (a3 >> 6)) >> a3;
    if (a3 >> 6 != v3 >> 6)
      v4 |= *(_QWORD *)(*(_QWORD *)this + 8 * (v3 >> 6)) << -(a3 & 0x3F);
  }
  v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  if (!a2)
    v5 = 0;
  return v4 & v5;
}

uint64_t llvm::APInt::getBitsNeeded(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  uint64_t SufficientBitsNeeded;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _BOOL8 v11;
  int8x8_t v12;
  int v13;
  int v14;
  int64_t v15;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint8x8_t v20;
  int v21;
  int v22;
  unint64_t v23;
  int8x8_t *v24;
  int8x8_t v25;
  uint8x8_t v26;
  unint64_t v27;
  unsigned int v28;

  SufficientBitsNeeded = llvm::APInt::getSufficientBitsNeeded(a1, a2, a3);
  v8 = SufficientBitsNeeded;
  if (a3 <= 0x10 && ((1 << a3) & 0x10104) != 0)
    return v8;
  v10 = *a1;
  v11 = v10 == 43 || v10 == 45;
  v28 = SufficientBitsNeeded;
  llvm::APInt::fromString((uint64_t)&v27, v7, (char *)&a1[v11], a2 - v11, a3);
  if (v28 > 0x40)
  {
    v14 = 0;
    v15 = ((unint64_t)v28 + 63) >> 6;
    v12 = (int8x8_t)v27;
    do
    {
      if (v15-- < 1)
        break;
      v17 = *(_QWORD *)(v27 + 8 * v15);
      v14 += __clz(v17);
    }
    while (!v17);
    v18 = v28 | 0xFFFFFFC0;
    if ((v28 & 0x3F) == 0)
      v18 = 0;
    v13 = v14 + v18;
  }
  else
  {
    v12 = (int8x8_t)v27;
    v13 = v28 + __clz(v27) - 64;
  }
  v19 = v28 + ~v13;
  if (v19 != -1)
  {
    if (v10 != 45)
    {
      v21 = 1;
      goto LABEL_24;
    }
    if (v28 >= 0x41)
    {
      v22 = 0;
      v23 = ((unint64_t)v28 + 63) >> 6;
      v24 = (int8x8_t *)v12;
      do
      {
        v25 = *v24++;
        v26 = (uint8x8_t)vcnt_s8(v25);
        v26.i16[0] = vaddlv_u8(v26);
        v22 += v26.i32[0];
        --v23;
      }
      while (v23);
      if (v22 != 1)
        goto LABEL_19;
    }
    else
    {
      v20 = (uint8x8_t)vcnt_s8(v12);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] != 1)
      {
LABEL_19:
        v21 = 2;
LABEL_24:
        v8 = v21 + v19;
        goto LABEL_29;
      }
    }
    v8 = v19 + (v10 == 45);
    goto LABEL_29;
  }
  if (v10 == 45)
    v8 = 2;
  else
    v8 = 1;
LABEL_29:
  if (v28 >= 0x41 && *(_QWORD *)&v12)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v12, 0x1000C8000313F17);
  return v8;
}

unint64_t llvm::hash_value(llvm *this, const llvm::APInt *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;

  v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    v8 = sub_1C517D118(*(_QWORD **)this, *(_QWORD *)this + (((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8));
    v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    v10 = &unk_1ED7EA000;
    if ((v9 & 1) == 0)
    {
      v17 = v8;
      v14 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v10 = &unk_1ED7EA000;
      v15 = v14;
      v8 = v17;
      if (v15)
      {
        v16 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v16 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v16;
        __cxa_guard_release(&qword_1ED7EAC88);
        v10 = (_QWORD *)&unk_1ED7EA000;
        v8 = v17;
      }
    }
    LODWORD(v19) = *((_DWORD *)this + 2);
    HIDWORD(v19) = v8;
    v11 = 0x9DDFEA08EB382D69 * (v19 ^ v10[400] ^ __ROR8__(v8 + 12, 12));
    v12 = __ROR8__(v8 + 12, 12) ^ (v11 >> 47);
    return (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v12 ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ v11)) >> 47))) ^ v8;
  }
  else
  {
    v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v13;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    LODWORD(v18) = *((_DWORD *)this + 2);
    *(_QWORD *)((char *)&v18 + 4) = *(_QWORD *)this;
    v5 = 0x9DDFEA08EB382D69 * (v18 ^ qword_1ED7EAC80 ^ __ROR8__(*(_QWORD *)this + 12, 12));
    v6 = __ROR8__(*(_QWORD *)this + 12, 12) ^ (v5 >> 47);
    return (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v6 ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ v5)) >> 47))) ^ *(_QWORD *)this;
  }
}

unint64_t llvm::DenseMapInfo<llvm::APInt,void>::getHashValue(llvm *a1, const llvm::APInt *a2)
{
  return llvm::hash_value(a1, a2);
}

uint64_t llvm::APInt::isSplat(llvm::APInt *this, unsigned int a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  BOOL v6;
  const void *v7;
  uint64_t v8;
  void *__s2;
  unsigned int v12;

  llvm::APInt::rotl(this, a2, (uint64_t)&__s2);
  v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    v7 = *(const void **)this;
    v5 = __s2;
    v6 = memcmp(v7, __s2, ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else
  {
    v4 = *(void **)this;
    v5 = __s2;
    v6 = v4 == __s2;
  }
  v8 = v6;
  if (v12 >= 0x41 && v5 != 0)
    MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  return v8;
}

void llvm::APInt::rotl(llvm::APInt *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;

  v5 = *((unsigned int *)this + 2);
  if ((_DWORD)v5 && (v6 = a2 % v5) != 0)
  {
    v18 = *((_DWORD *)this + 2);
    if (v5 > 0x40)
    {
      v10 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
      v7 = (void *)operator new[]();
      memcpy(v7, *(const void **)this, v10);
    }
    else
    {
      v7 = *(void **)this;
    }
    v17 = (unint64_t)v7;
    sub_1C4888094((uint64_t)&v17, v6);
    sub_1C5CEB1E4((uint64_t)this, *((_DWORD *)this + 2) - v6, (uint64_t)&v15);
    v8 = v16;
    if (v16 > 0x40)
    {
      v11 = (_QWORD *)v15;
      v12 = (uint64_t *)v17;
      v13 = ((unint64_t)v16 + 63) >> 6;
      do
      {
        v14 = *v12++;
        *v11++ |= v14;
        --v13;
      }
      while (v13);
      v9 = v15;
    }
    else
    {
      v9 = v15 | v17;
    }
    *(_DWORD *)(a3 + 8) = v8;
    *(_QWORD *)a3 = v9;
    if (v18 >= 0x41)
    {
      if (v17)
        MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
  }
  else
  {
    sub_1C5DD14E0(a3, (uint64_t)this);
  }
}

void llvm::APInt::getHiBits(llvm::APInt *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_1C5CEB1E4((uint64_t)this, *((_DWORD *)this + 2) - a2, a3);
}

_QWORD *llvm::APInt::getLoBits@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *((_DWORD *)this + 2);
  *((_DWORD *)a3 + 2) = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase(a3, 0, 0);
  else
    *(_QWORD *)a3 = 0;
  result = sub_1C4912E54(a3, 0, a2);
  v8 = *((unsigned int *)a3 + 2);
  if (v8 > 0x40)
  {
    v9 = *(_QWORD **)a3;
    v10 = *(uint64_t **)this;
    v11 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      v12 = *v10++;
      *v9++ &= v12;
      --v11;
    }
    while (v11);
  }
  else
  {
    *(_QWORD *)a3 &= *(_QWORD *)this;
  }
  return result;
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  int v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v5;
  int v6;

  v1 = 0;
  v2 = *((unsigned int *)this + 2);
  v3 = (unint64_t)(v2 + 63) >> 6;
  do
  {
    if (v3-- < 1)
      break;
    v5 = *(_QWORD *)(*(_QWORD *)this + 8 * v3);
    v1 += __clz(v5);
  }
  while (!v5);
  if ((v2 & 0x3F) != 0)
    v6 = v2 | 0xFFFFFFC0;
  else
    v6 = 0;
  return (v1 + v6);
}

unint64_t llvm::APInt::countLeadingOnesSlowCase(llvm::APInt *this)
{
  uint64_t v1;
  char v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  int v8;
  uint64_t v9;

  v1 = *((unsigned int *)this + 2);
  v2 = 64 - (v1 & 0x3F);
  v3 = *((_DWORD *)this + 2) & 0x3F;
  if ((v1 & 0x3F) == 0)
  {
    v3 = 64;
    v2 = 0;
  }
  v4 = (unint64_t)(v1 + 63) >> 6;
  v5 = *(_QWORD *)this;
  result = __clz(~(*(_QWORD *)(*(_QWORD *)this + 8 * v4 - 8) << v2));
  if (v4 >= 2 && v3 == (_DWORD)result)
  {
    result = (v3 + ((_DWORD)v4 << 6) - 64);
    v8 = v4 - 1;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 8 * --v8);
      if (v9 != -1)
        break;
      v3 += 64;
      if (v8 <= 0)
        return result;
    }
    return __clz(~v9) + v3;
  }
  return result;
}

uint64_t llvm::APInt::countTrailingZerosSlowCase(unint64_t **this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t v6;

  v1 = *((unsigned int *)this + 2);
  v2 = (unint64_t)(v1 + 63) >> 6;
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *this;
    v5 = (_DWORD)v2 << 6;
    v6 = v2 << 6;
    while (!*v4)
    {
      ++v4;
      v3 += 64;
      if (v6 == v3)
        goto LABEL_8;
    }
    v5 = __clz(__rbit64(*v4)) + v3;
  }
  else
  {
    v5 = 0;
  }
LABEL_8:
  if (v1 >= v5)
    return v5;
  else
    return v1;
}

uint64_t llvm::APInt::countTrailingOnesSlowCase(llvm::APInt *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;

  v1 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = *(_QWORD **)this;
  result = ((_DWORD)v1 << 6);
  v5 = v1 << 6;
  while (*v3 == -1)
  {
    ++v3;
    v2 += 64;
    if (v5 == v2)
      return result;
  }
  return __clz(__rbit64(~*v3)) + v2;
}

uint64_t llvm::APInt::countPopulationSlowCase(uint64_t this)
{
  uint64_t v1;
  int8x8_t **v2;
  unint64_t v3;
  int8x8_t *v4;
  int8x8_t v5;
  uint8x8_t v6;

  v1 = *(unsigned int *)(this + 8);
  if (!(_DWORD)v1)
    return 0;
  v2 = (int8x8_t **)this;
  LODWORD(this) = 0;
  v3 = (unint64_t)(v1 + 63) >> 6;
  v4 = *v2;
  do
  {
    v5 = *v4++;
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    this = (this + v6.i32[0]);
    --v3;
  }
  while (v3);
  return this;
}

BOOL llvm::APInt::intersectsSlowCase(uint64_t **this, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  BOOL v12;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 0;
  v3 = (unint64_t)(v2 + 63) >> 6;
  v4 = *this;
  v5 = *a2;
  v6 = v3 - 1;
  do
  {
    v8 = *v4++;
    v7 = v8;
    v9 = *v5++;
    v10 = v9 & v7;
    result = v10 != 0;
    if (v10)
      v12 = 1;
    else
      v12 = v6 == 0;
    --v6;
  }
  while (!v12);
  return result;
}

BOOL llvm::APInt::isSubsetOfSlowCase(uint64_t **this, uint64_t **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  BOOL v13;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 1;
  v3 = (unint64_t)(v2 + 63) >> 6;
  v4 = *this;
  v5 = *a2;
  v6 = v3 - 1;
  do
  {
    v8 = *v4++;
    v7 = v8;
    v9 = *v5++;
    v10 = v7 & ~v9;
    result = v10 == 0;
    v13 = v6-- != 0;
  }
  while (!v10 && v13);
  return result;
}

void llvm::APInt::byteSwap(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v4 = *((_DWORD *)this + 2);
  if (v4 == 32)
  {
    v5 = bswap32(*(_DWORD *)this);
    v6 = 32;
    goto LABEL_5;
  }
  if (v4 == 16)
  {
    v5 = bswap32(*(unsigned __int16 *)this) >> 16;
    v6 = 16;
LABEL_5:
    *((_DWORD *)a2 + 2) = v6;
    *(_QWORD *)a2 = v5;
    return;
  }
  if (v4 > 0x40)
  {
    sub_1C4832EA4(a2, (v4 + 63) & 0xFFFFFFC0, 0, 0);
    v7 = *((unsigned int *)this + 2);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = ((unint64_t)(v7 + 63) >> 6) - 1;
      do
      {
        *(_QWORD *)(*(_QWORD *)a2 + v8) = bswap64(*(_QWORD *)(*(_QWORD *)this + 8 * v9--));
        v8 += 8;
      }
      while (v9 != -1);
    }
    v10 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v10 != (_DWORD)v7)
    {
      v11 = v10 - v7;
      if (v10 > 0x40)
      {
        llvm::APInt::tcShiftRight(*(llvm::APInt **)a2, (unint64_t *)((unint64_t)(v10 + 63) >> 6), v11);
        LODWORD(v7) = *((_DWORD *)this + 2);
      }
      else if ((_DWORD)v7)
      {
        *(_QWORD *)a2 >>= v11;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      *((_DWORD *)a2 + 2) = v7;
    }
  }
  else
  {
    sub_1C4832EA4(a2, v4, bswap64(*(_QWORD *)this) >> -(char)v4, 0);
  }
}

llvm::APInt *llvm::APInt::reverseBits@<X0>(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  llvm::APInt *result;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;

  v4 = *((unsigned int *)this + 2);
  HIDWORD(v5) = *((_DWORD *)this + 2);
  LODWORD(v5) = HIDWORD(v5);
  switch((v5 >> 3))
  {
    case 0u:
      return (llvm::APInt *)sub_1C5DD14E0((uint64_t)a2, (uint64_t)this);
    case 1u:
      v10 = __rbit32(*(unsigned __int8 *)this) >> 24;
      return sub_1C4832EA4(a2, v4, v10, 0);
    case 2u:
      v10 = __rbit32(*(unsigned __int16 *)this) >> 16;
      return sub_1C4832EA4(a2, v4, v10, 0);
    case 4u:
      v10 = __rbit32(*(_DWORD *)this);
      return sub_1C4832EA4(a2, v4, v10, 0);
    case 8u:
      v10 = __rbit64(*(_QWORD *)this);
      return sub_1C4832EA4(a2, v4, v10, 0);
    default:
      if (v4 > 0x40)
      {
        v8 = v4 + 63;
        v7 = operator new[]();
        memcpy((void *)v7, *(const void **)this, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
        v9 = *((_DWORD *)this + 2);
      }
      else
      {
        v7 = *(_QWORD *)this;
        v8 = v4 + 63;
        v9 = *((_DWORD *)this + 2);
      }
      sub_1C4832EA4(a2, v9, 0, 0);
      v11 = *((_DWORD *)this + 2);
      v12 = v8 >> 6;
      if ((v4 & 0x3F) != 0)
        v13 = v4 | 0xFFFFFFC0;
      else
        v13 = 0;
      v14 = v8 & 0x1FFFFFFC0;
      break;
  }
  while (1)
  {
    v15 = v7;
    if (v4 < 0x41)
      break;
    v16 = 0;
    v17 = v12;
    do
    {
      if (v17-- < 1)
        break;
      v19 = *(_QWORD *)(v7 + 8 * v17);
      v16 += __clz(v19);
    }
    while (!v19);
    if ((v4 - (v13 + v16)) <= 0x40)
    {
      v15 = *(_QWORD *)v7;
      break;
    }
LABEL_22:
    sub_1C4888094((uint64_t)a2, 1u);
    LOBYTE(v20) = v7;
    if (v4 >= 0x41)
      v20 = *(_QWORD *)v7;
    v21 = v20 & 1;
    v22 = *((_DWORD *)a2 + 2);
    if (v22 > 0x40)
    {
      **(_QWORD **)a2 |= v21;
    }
    else
    {
      v23 = *(_QWORD *)a2 | v21;
      if (v22)
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
      else
        v24 = 0;
      *(_QWORD *)a2 = v24 & v23;
    }
    --v11;
    if (v4 <= 0x40)
    {
      if ((_DWORD)v4 == 1)
        v7 = 0;
      else
        v7 >>= 1;
    }
    else if (v14)
    {
      v25 = *(_QWORD *)v7 >> 1;
      *(_QWORD *)v7 = v25;
      if (v12 != 1)
      {
        v26 = (unint64_t *)(v7 + 8);
        v27 = v12 - 1;
        do
        {
          v28 = *v26;
          *(v26 - 1) = v25 | (*v26 << 63);
          v25 = v28 >> 1;
          *v26++ = v28 >> 1;
          --v27;
        }
        while (v27);
      }
    }
  }
  if (v15)
    goto LABEL_22;
  result = (llvm::APInt *)sub_1C4888094((uint64_t)a2, v11);
  if (v4 >= 0x41 && v7)
    JUMPOUT(0x1CAA32F9CLL);
  return result;
}

