_QWORD *sub_1C4932C0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (!v3)
  {
    v5 = (_QWORD *)(a2 + 24);
    result = operator new(0x28uLL);
    v7 = result;
    *result = &unk_1E7FA3F30;
LABEL_9:
    v7[4] = 0;
    goto LABEL_10;
  }
  if (v3 == a1)
  {
    v9 = v8;
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
    v4 = v9;
  }
  else
  {
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    v9 = v4;
  }
  v5 = (_QWORD *)(a2 + 24);
  result = operator new(0x28uLL);
  v7 = result;
  *result = &unk_1E7FA3F30;
  if (!v4)
    goto LABEL_9;
  if (v4 != v8)
  {
    result[4] = v4;
LABEL_10:
    *v5 = v7;
    return result;
  }
  result[4] = result + 1;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
  result = v9;
  *v5 = v7;
  if (result == v8)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(v8[0] + 32))(v8);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  return result;
}

uint64_t sub_1C4932D5C(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v5 = sub_1C4825F50(&v14);
  if ((_DWORD)v6 == 1)
  {
    v13 = v5;
    v5 = v13;
  }
  v17[0] = &off_1E816E210;
  v17[1] = a2 | (unint64_t)(v5 << 32);
  v18 = v17;
  v15[0] = &off_1E816E528;
  v15[1] = a2;
  v15[2] = v14;
  v16 = v15;
  v7 = sub_1C4953548(a1, 1, v17, v15);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = (void (**)(_QWORD *))(v15[0] + 32);
    v8 = v15;
LABEL_5:
    (*v9)(v8);
    goto LABEL_6;
  }
  if (v16)
  {
    v9 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_5;
  }
LABEL_6:
  v10 = v18;
  if (v18 == v17)
  {
    v11 = (void (**)(_QWORD *))(v17[0] + 32);
    v10 = v17;
  }
  else
  {
    if (!v18)
      return v7;
    v11 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v11)(v10);
  return v7;
}

uint64_t sub_1C4932E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  int v29;
  uint64_t v30;
  const char *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int GenericVirtualRegister;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  uint64_t v47;
  int *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  int v56;
  void *v57;
  void *v58;
  void *v59;
  const char *v60;
  unsigned int v61;
  void *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  void *v77;
  unint64_t v78;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88[12];
  int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  int v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[16];
  void *v100[2];
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;

  v5 = a2;
  v104 = *MEMORY[0x1E0C80C00];
  v6 = a4[1];
  v7 = (unint64_t *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 48);
  if (v8 < 8)
  {
    v11 = 0;
  }
  else
  {
    if ((v8 & 7) == 0)
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a2 + 48) = v8;
      v12 = (int *)(a2 + 56);
      v11 = (int *)(a2 + 48);
      goto LABEL_13;
    }
    v9 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_QWORD *)(a2 + 48) & 7) != 3 || v9 == 0)
    {
      v11 = 0;
LABEL_17:
      if ((v8 & 7) != 0)
      {
        v15 = 0;
        if ((v8 & 7) == 3 && (v16 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          v17 = *v16;
          v15 = v16 + 2;
        }
        else
        {
          v17 = 0;
        }
      }
      else
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
        *v7 = v8;
        v17 = 1;
        v15 = (int *)(a2 + 48);
      }
      goto LABEL_22;
    }
    v14 = *v9;
    v11 = v9 + 2;
    v13 = v14;
    if (!(_DWORD)v14)
      goto LABEL_17;
    v12 = &v11[2 * v13];
LABEL_13:
    while ((*(_WORD *)(*(_QWORD *)v11 + 36) & 0xF00) == 0)
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
    if (v8 >= 8)
      goto LABEL_17;
  }
  v15 = 0;
  v17 = 0;
LABEL_22:
  if (v11 != &v15[2 * v17] && *(_QWORD *)v11)
    return 0;
  if ((v8 & 7) != 0)
  {
    v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v18 = v8 & 0xFFFFFFFFFFFFFFF8;
    *v7 = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  v19 = *(_BYTE *)(v18 + 34);
  v20 = *(_QWORD *)(v18 + 8);
  if ((*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v22 = (unint64_t)(sub_1C4825F50((unint64_t *)(v18 + 24)) + 7) >> 3;
    if ((_DWORD)v21 == 1)
  }
  else
  {
    v22 = -1;
  }
  sub_1C492E18C((uint64_t)v88, v5, a3);
  v24 = v91;
  if ((v91 & 0xFFFFFFFFFFFFFFF9) != 0 && (v91 & 6) == 4)
  {
    v25 = 3;
    if ((v91 & 1) == 0)
      v25 = 19;
    if ((v91 & 0x8000000000000000 | (8 * (v91 >> v25))) == 0x40)
    {
      if ((v91 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
        v24 = v91;
      }
      if ((unsigned __int16)(v24 >> 3) <= 4u)
      {
        v66 = (1 << *(_BYTE *)(v93 + 34)) | *(_QWORD *)(v93 + 8);
        if ((v66 & -v66) == 1)
          return 0;
      }
    }
  }
  result = 0;
  v27 = __clz(((1 << v19) | v20) & -((1 << v19) | v20));
  if ((63 - v27) <= 1u && (1 << (63 - v27)) % v22)
  {
    if (v27 != 63 && v22 < 9)
      return 0;
    v29 = v89;
    v30 = v90;
    v86 = v92;
    v87 = v24;
    v32 = sub_1C4825F50(&v86);
    if ((_DWORD)v31 == 1)
    v78 = v30 & 0x7FFFFFFF;
    v33 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * v78 + 8);
    if ((int)v30 >= 0)
      v33 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v30);
    v34 = *v33;
    if (v34)
    {
      v67 = v22;
      v68 = v29;
      if (((*(_BYTE *)(v34 + 3) & 1) != 0 || (v34 = *(_QWORD *)(v34 + 24)) != 0 && (*(_BYTE *)(v34 + 3) & 1) != 0)
        && (v69 = *(_QWORD *)(v34 + 8)) != 0
        && ((v70 = **(unsigned __int16 **)(v69 + 16), v70 == 193) || v70 == 45)
        && (v75 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v69 + 32) + 68), a3), v71))
      {
        v76 = 0;
        v74 = *(_DWORD *)(*(_QWORD *)(v69 + 32) + 36);
      }
      else
      {
        v75 = 0;
        v74 = 0;
        v76 = 1;
      }
      v29 = v68;
      v22 = v67;
    }
    else
    {
      v75 = 0;
      v74 = 0;
      v76 = 1;
    }
    v97 = v99;
    v98 = 0x400000000;
    v35 = v22;
    if (v22)
    {
      v72 = v24;
      v73 = v5;
      v36 = 0;
      v77 = (void *)((8 * v32) | 1);
      v37 = v6 + 128;
      v38 = 1;
      do
      {
        GenericVirtualRegister = v30;
        if (v38 != 1)
        {
          v40 = 0;
          if ((v30 & 0x80000000) != 0 && v78 < *(unsigned int *)(a3 + 432))
            v40 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v78);
          GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a3, v40, "", 0);
          v100[0] = v77;
          LODWORD(v100[1]) = 0;
          if ((v76 & 1) != 0)
          {
            sub_1C5544694((uint64_t)a4, (unint64_t *)v100, v36);
            v42 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
            LODWORD(v94) = GenericVirtualRegister;
            LODWORD(v95) = 1;
            LODWORD(v100[0]) = v30;
          }
          else
          {
            sub_1C5544694((uint64_t)a4, (unint64_t *)v100, v36 + v75);
            v42 = *(_DWORD *)(*(_QWORD *)(v43 + 32) + 4);
            LODWORD(v94) = GenericVirtualRegister;
            LODWORD(v95) = 1;
            LODWORD(v100[0]) = v74;
          }
          LODWORD(v101) = 0;
          v102 = v42;
          v103 = 0;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 193, &v94, 1, v100, 2, 0);
        }
        v44 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a3, 65, "", 0);
        sub_1C4824250((uint64_t *)v18, v36, (uint64_t)v100);
        v84 = *(_OWORD *)v100;
        v85 = v101;
        v45 = *(_WORD *)(v18 + 32);
        v46 = sub_1C484358C(v37, 80, 3);
        *(_OWORD *)v46 = v84;
        *(_QWORD *)(v46 + 16) = v85;
        *(_QWORD *)(v46 + 24) = 65;
        *(_WORD *)(v46 + 32) = v45;
        *(_BYTE *)(v46 + 34) = 0;
        *(_OWORD *)(v46 + 40) = 0u;
        *(_OWORD *)(v46 + 56) = 0u;
        *(_QWORD *)(v46 + 72) = 0;
        *(_WORD *)(v46 + 36) = 1;
        v82 = v44;
        v83 = 1;
        LODWORD(v94) = GenericVirtualRegister;
        v96 = 0;
        sub_1C55464EC(a4, 0x5Au, &v82, (int *)&v94, (llvm::MachineMemOperand *)v46);
        v47 = v98;
        if (v98 >= (unint64_t)HIDWORD(v98))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v98 + 1, 4);
          v47 = v98;
        }
        *((_DWORD *)v97 + v47) = v44;
        v22 = (v98 + 1);
        LODWORD(v98) = v98 + 1;
        v36 = v38;
      }
      while (v35 > v38++);
      v49 = (int *)v97;
      v24 = v72;
      v5 = v73;
    }
    else
    {
      v49 = (int *)v99;
    }
    v94 = (8 * (unsigned __int16)v35) | 0x400004;
    LODWORD(v95) = 0;
    v100[0] = &v101;
    v100[1] = (void *)0x800000000;
    if (v22 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v100, (uint64_t)&v101, v22, 24);
      v50 = LODWORD(v100[1]);
      v51 = (uint64_t *)v100[0];
    }
    else
    {
      if (!v22)
      {
        v56 = 0;
        v51 = &v101;
LABEL_72:
        LODWORD(v100[1]) = v56 + v22;
        v57 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *))(*a4 + 32))(a4, 77, &v94, 1, v51);
        v59 = v58;
        if (v100[0] != &v101)
          free(v100[0]);
        if ((v24 & 0xFFFFFFFFFFFFFFF9) != 0 && (v24 & 6) == 2)
        {
          v82 = v29;
          v83 = 1;
          v61 = sub_1C4825F50(&v87);
          if ((_DWORD)v60 == 1)
          v80 = (8 * v61) | 1;
          v81 = 0;
          v94 = (uint64_t)v57;
          v95 = v59;
          v96 = 1;
          v100[0] = (void *)sub_1C5546EF4(a4, &v80, (int *)&v94);
          v100[1] = v62;
          LODWORD(v101) = 1;
          v63 = (uint64_t *)&v82;
          v64 = a4;
        }
        else
        {
          LODWORD(v94) = v29;
          LODWORD(v95) = 1;
          v100[0] = v57;
          v100[1] = v59;
          LODWORD(v101) = 1;
          v63 = &v94;
          v64 = a4;
        }
        sub_1C5546EF4(v64, v63, (int *)v100);
        v65 = v5;
        if ((*(_BYTE *)v5 & 4) == 0)
        {
          v65 = v5;
          if ((*(_WORD *)(v5 + 44) & 8) != 0)
          {
            v65 = v5;
            do
              v65 = *(_QWORD *)(v65 + 8);
            while ((*(_WORD *)(v65 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v65 + 8));
        if (v97 != v99)
          free(v97);
        return 1;
      }
      v50 = 0;
      v51 = &v101;
    }
    v52 = 3 * v50;
    v53 = 4 * v22;
    do
    {
      v54 = *v49++;
      v55 = &v51[v52];
      *(_DWORD *)v55 = v54;
      *((_DWORD *)v55 + 4) = 0;
      v52 += 3;
      v53 -= 4;
    }
    while (v53);
    v56 = (int)v100[1];
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_1C4933670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int *v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  const char *v24;
  unsigned int v25;
  char v26;
  uint64_t result;
  int v28;
  int v30;
  int v31;
  const char *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89[4];
  int v90;
  int v91;
  uint64_t v92;
  char v93[12];
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[64];
  void *v105;
  uint64_t v106;
  _BYTE v107[32];
  __int128 v108;
  _QWORD v109[3];
  int v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v7 = a4[1];
  v8 = (unint64_t *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  if (v9 < 8)
  {
    v12 = 0;
  }
  else
  {
    if ((v9 & 7) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a2 + 48) = v9;
      v13 = a2 + 56;
      v12 = (int *)(a2 + 48);
      goto LABEL_13;
    }
    v10 = (int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_QWORD *)(a2 + 48) & 7) != 3 || v10 == 0)
    {
      v12 = 0;
LABEL_17:
      if ((v9 & 7) != 0)
      {
        v16 = 0;
        if ((v9 & 7) == 3 && (v17 = (int *)(v9 & 0xFFFFFFFFFFFFFFF8), (v9 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          v18 = *v17;
          v16 = v17 + 2;
        }
        else
        {
          v18 = 0;
        }
      }
      else
      {
        v9 &= 0xFFFFFFFFFFFFFFF8;
        *v8 = v9;
        v18 = 1;
        v16 = (int *)(a2 + 48);
      }
      goto LABEL_22;
    }
    v15 = *v10;
    v12 = v10 + 2;
    v14 = v15;
    if (!(_DWORD)v15)
      goto LABEL_17;
    v13 = (uint64_t)&v12[2 * v14];
LABEL_13:
    while ((*(_WORD *)(*(_QWORD *)v12 + 36) & 0xF00) == 0)
    {
      v12 += 2;
      if (v12 == (int *)v13)
      {
        v12 = (int *)v13;
        break;
      }
    }
    if (v9 >= 8)
      goto LABEL_17;
  }
  v16 = 0;
  v18 = 0;
LABEL_22:
  if (v12 != &v16[2 * v18] && *(_QWORD *)v12)
    return 0;
  if ((v9 & 7) != 0)
  {
    v19 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v19 = v9 & 0xFFFFFFFFFFFFFFF8;
    *v8 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *(_BYTE *)(v19 + 34);
  v21 = *(_QWORD *)(v19 + 8);
  if ((*(_QWORD *)(v19 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v23 = (unint64_t)(sub_1C4825F50((unint64_t *)(v19 + 24)) + 7) >> 3;
    if ((_DWORD)v22 == 1)
  }
  else
  {
    v23 = -1;
  }
  sub_1C492E18C((uint64_t)v93, a2, a3);
  v25 = v96;
  if ((v96 & 0xFFFFFFFFFFFFFFF9) != 0 && (v96 & 6) == 4)
  {
    v26 = 3;
    if ((v96 & 1) == 0)
      v26 = 19;
    if ((v96 & 0x8000000000000000 | (8 * (v96 >> v26))) == 0x40)
    {
      if ((v96 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
        v25 = v96;
      }
      if ((unsigned __int16)(v25 >> 3) <= 4u)
      {
        v54 = (1 << *(_BYTE *)(v98 + 34)) | *(_QWORD *)(v98 + 8);
        if ((v54 & -v54) == 1)
          return 0;
      }
    }
  }
  result = 0;
  v28 = __clz(((1 << v20) | v21) & -((1 << v20) | v21));
  if ((63 - v28) <= 1u && (1 << (63 - v28)) % v23)
  {
    if (v28 != 63 && v23 < 9)
      return 0;
    v30 = v94;
    v31 = v95;
    v92 = v97;
    v33 = sub_1C4825F50((unint64_t *)&v92);
    if ((_DWORD)v32 == 1)
    v91 = 0;
    v81 = (8 * v33) | 1;
    *(_QWORD *)&v108 = v81;
    *((_QWORD *)&v108 + 1) = &v91;
    LODWORD(v102) = v31;
    if (sub_1C495C174((uint64_t)&v108, a3, (unsigned int *)&v102))
      v34 = v91;
    else
      v34 = v31;
    v79 = v34;
    v76 = a2;
    if ((v96 & 0xFFFFFFFFFFFFFFF9) != 0 && (v96 & 6) == 2)
    {
      v102 = (void *)(((v23 & 0x1FFFFFFF) << 6) | 1);
      LODWORD(v103) = 0;
      LODWORD(v108) = v30;
      LODWORD(v109[0]) = 0;
      sub_1C5546EF4(a4, (uint64_t *)&v102, (int *)&v108);
      v30 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
    }
    v102 = (void *)((8 * (unsigned __int16)v23) | 0x400004);
    LODWORD(v103) = 0;
    LODWORD(v108) = v30;
    LODWORD(v109[0]) = 0;
    sub_1C5546EF4(a4, (uint64_t *)&v102, (int *)&v108);
    v37 = *(_DWORD *)(*(_QWORD *)(v36 + 32) + 4);
    v105 = v107;
    v106 = 0x800000000;
    v102 = v104;
    v103 = 0x800000000;
    sub_1C495A254((unsigned int *)&v102, v23, 65);
    v38 = (uint64_t *)v102;
    v39 = v103;
    v89[0] = v37;
    v90 = 0;
    *(_QWORD *)&v108 = v109;
    *((_QWORD *)&v108 + 1) = 0x800000000;
    if (v103 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v109, v103, 16);
      v40 = DWORD2(v108);
      v41 = (_QWORD *)v108;
    }
    else
    {
      if (!(_DWORD)v103)
      {
        v45 = 0;
        v46 = v109;
        goto LABEL_59;
      }
      v40 = 0;
      v41 = v109;
    }
    v42 = 8 * v39;
    v43 = &v41[2 * v40];
    do
    {
      v44 = *v38++;
      *v43 = v44;
      *((_DWORD *)v43 + 2) = 0;
      v43 += 2;
      v42 -= 8;
    }
    while (v42);
    v45 = DWORD2(v108);
    v46 = (_QWORD *)v108;
LABEL_59:
    DWORD2(v108) = v45 + v39;
    (*(void (**)(uint64_t *, uint64_t, _QWORD *))(*a4 + 32))(a4, 74, v46);
    v48 = v47;
    if ((_QWORD *)v108 == v109)
    {
      if (!v23)
        goto LABEL_74;
    }
    else
    {
      free((void *)v108);
      if (!v23)
        goto LABEL_74;
    }
    v49 = 0;
    v50 = 1;
    v51 = v106;
    do
    {
      v52 = *(_DWORD *)(*(_QWORD *)(v48 + 32) + 32 * v49 + 4);
      if (v51 >= HIDWORD(v106))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v51 + 1, 4);
        v51 = v106;
      }
      *((_DWORD *)v105 + v51) = v52;
      v51 = v106 + 1;
      LODWORD(v106) = v106 + 1;
      v49 = v50;
      v53 = v23 > v50++;
    }
    while (v53);
LABEL_74:
    v55 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
    if (v79 >= 0)
      v55 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v79);
    v56 = *v55;
    if (v56
      && ((*(_BYTE *)(v56 + 3) & 1) != 0 || (v56 = *(_QWORD *)(v56 + 24)) != 0 && (*(_BYTE *)(v56 + 3) & 1) != 0)
      && (v73 = *(_QWORD *)(v56 + 8)) != 0
      && ((v74 = **(unsigned __int16 **)(v73 + 16), v74 == 193) || v74 == 45)
      && (v78 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v73 + 32) + 68), a3), v75))
    {
      v80 = 0;
      v77 = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 36);
      if (!v23)
      {
LABEL_85:
        v72 = v76;
        if ((*(_BYTE *)v76 & 4) == 0)
        {
          v72 = v76;
          if ((*(_WORD *)(v76 + 44) & 8) != 0)
          {
            v72 = v76;
            do
              v72 = *(_QWORD *)(v72 + 8);
            while ((*(_WORD *)(v72 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v76 + 24) + 40, v76, *(_QWORD *)(v72 + 8));
        if (v102 != v104)
          free(v102);
        if (v105 != v107)
          free(v105);
        return 1;
      }
    }
    else
    {
      v78 = 0;
      v77 = 0;
      v80 = 1;
      if (!v23)
        goto LABEL_85;
    }
    v57 = 0;
    v58 = v7 + 128;
    v59 = 1;
    v60 = v79;
    do
    {
      if (v59 != 1)
      {
        *(_QWORD *)&v108 = v81;
        DWORD2(v108) = 0;
        if ((v80 & 1) != 0)
        {
          v61 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v108, v57);
          v63 = v62;
          v82 = v81;
          v83 = 0;
          v89[0] = v79;
        }
        else
        {
          v61 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v108, v57 + v78);
          v63 = v64;
          v82 = v81;
          v83 = 0;
          v89[0] = v77;
        }
        v90 = 0;
        v65 = sub_1C5546EF4(a4, &v82, v89);
        v99 = v81;
        LODWORD(v100) = 0;
        *(_QWORD *)&v108 = v65;
        *((_QWORD *)&v108 + 1) = v66;
        LODWORD(v109[0]) = 1;
        v109[1] = v61;
        v109[2] = v63;
        v110 = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a4 + 32))(a4, 45, &v99, 1, &v108, 2, 0);
        v60 = *(_DWORD *)(*(_QWORD *)(v67 + 32) + 4);
      }
      sub_1C4824250((uint64_t *)v19, v57, (uint64_t)&v108);
      v87 = v108;
      v88 = v109[0];
      v68 = *(_WORD *)(v19 + 32);
      v69 = sub_1C484358C(v58, 80, 3);
      v70 = v88;
      *(_OWORD *)v69 = v87;
      *(_QWORD *)(v69 + 16) = v70;
      *(_QWORD *)(v69 + 24) = 65;
      *(_WORD *)(v69 + 32) = v68;
      *(_BYTE *)(v69 + 34) = 0;
      *(_OWORD *)(v69 + 40) = 0u;
      *(_OWORD *)(v69 + 56) = 0u;
      *(_QWORD *)(v69 + 72) = 0;
      *(_WORD *)(v69 + 36) = 1;
      v89[0] = *((_DWORD *)v105 + v57);
      v90 = 0;
      v85 = v97;
      v86 = 0;
      LODWORD(v82) = v60;
      v84 = 0;
      v99 = sub_1C5546EF4(a4, &v85, (int *)&v82);
      v100 = v71;
      v101 = 1;
      sub_1C5546848(a4, v89, (int *)&v99, (llvm::MachineMemOperand *)v69);
      v57 = v59;
      v53 = v23 > v59++;
    }
    while (v53);
    goto LABEL_85;
  }
  return result;
}

uint64_t sub_1C4933E5C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  BOOL v42;
  char v43;
  int v44;
  int v45;
  __int128 *v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  const char *v53;
  int v54;
  int GenericVirtualRegister;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  unint64_t v90;
  __int128 *v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  llvm *v95;
  llvm::raw_ostream *v96;
  void *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  llvm::GlobalValue *v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  const char *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  __int128 v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  llvm::MachineFunction *v121;
  uint64_t v122;
  uint64_t *v123;
  _QWORD **v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD ***v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  int v137;
  int *v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  uint64_t v146;
  void **v147;
  void *v148;
  int v149;
  void **v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  char v165;
  void *v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  unint64_t v170;
  int *v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _DWORD *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 *v190;
  int v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  llvm::MachineFunction *v195;
  llvm::MachineInstr *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t *v203;
  unsigned int v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  llvm::MachineFunction *v209;
  llvm::MachineInstr *v210;
  llvm::MachineInstr *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  int v218;
  int v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  void *v225;
  int v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  llvm::MachineFunction *v230;
  llvm::MachineInstr *v231;
  llvm::MachineInstr *v232;
  _QWORD *v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  llvm::MachineInstr *v238;
  uint64_t v239;
  void *v240;
  void *v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  void *v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  void *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  llvm::MachineInstr *v257;
  uint64_t v258;
  _DWORD *v259;
  uint64_t v260;
  unsigned int v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _DWORD *v270;
  int v271;
  int v272;
  int v273;
  void *v274;
  int v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  void *v292;
  void *v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  void *v301;
  uint64_t v302;
  void *v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  int v319;
  int v320;
  void *v321;
  unsigned __int8 v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  llvm::MachineFunction *v327;
  unint64_t *v328;
  unint64_t *v329;
  _QWORD **v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  _QWORD ***v335;
  uint64_t v336;
  unsigned __int8 v337;
  unsigned __int8 v338;
  int v339;
  uint64_t v340;
  int v341;
  int v342;
  int v343;
  int v344;
  unsigned int v345;
  uint64_t v346;
  llvm::MachineFunction *v347;
  unint64_t *v348;
  unint64_t *v349;
  _QWORD **v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _QWORD ***v355;
  uint64_t v356;
  int v357;
  int v358;
  void *v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  BOOL v364;
  uint64_t v365;
  uint64_t *v366;
  void *v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  _DWORD *v378;
  int v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void **v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  void *v390;
  void *v391;
  void *v392;
  uint64_t v393;
  int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  _QWORD *v399;
  _QWORD *v400;
  llvm::MachineFunction *v401;
  llvm::MachineInstr *v402;
  llvm::MachineInstr *v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  void *v412;
  void *v413;
  void *v414;
  void *v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  void *v420;
  uint64_t v421;
  void *v422;
  void *v423;
  void *v424;
  uint64_t v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  __int128 *v438;
  __int128 v439;
  uint64_t v440;
  char v441;
  uint64_t v442;
  _DWORD *v443;
  int v444;
  uint64_t v445;
  char v446;
  unsigned int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  void *v456;
  uint64_t v457;
  void *v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  void *v478;
  void *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  void **v489;
  void *v490;
  void *v491;
  void *v492;
  uint64_t v493;
  _OWORD *v494;
  __int128 v495;
  __int128 *v496;
  __int128 v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  void *v501;
  int v502;
  char v503;
  const char *v504;
  uint64_t v505;
  _DWORD *v506;
  unsigned int v507;
  int v508;
  void *v509;
  _BOOL4 v510;
  uint64_t v511;
  llvm::ConstantFP ***v512;
  llvm::ConstantFP ***v513;
  int v514;
  unsigned int v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  llvm::MachineFunction *v519;
  unint64_t v520;
  unint64_t *v521;
  _QWORD **v522;
  _QWORD *v523;
  uint64_t v524;
  uint64_t v525;
  void *v526;
  unint64_t v527;
  _QWORD ***v528;
  void **v529;
  void **v530;
  void **v531;
  uint64_t v532;
  uint64_t v533;
  _BYTE *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  const llvm::MachineOperand *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  const char *v564;
  int v565;
  int v566;
  uint64_t v567;
  const char *v568;
  uint64_t v569;
  _QWORD *v570;
  BOOL v571;
  unsigned int v572;
  uint64_t v573;
  uint64_t v574;
  _DWORD *v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  int v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  void *v584;
  void *v585;
  void *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  unsigned int v593;
  BOOL v594;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  llvm::MachineInstr *v601;
  llvm::MachineInstr *v602;
  uint64_t v603;
  llvm::MachineInstr *v604;
  uint64_t v605;
  uint64_t v606;
  llvm::MachineFunction *v607;
  llvm::MachineInstr *v608;
  llvm::MachineInstr *v609;
  int v610;
  llvm::MachineFunction *v611;
  llvm::MachineInstr *v612;
  llvm::MachineInstr *v613;
  int v614;
  llvm::MachineFunction *v615;
  llvm::MachineInstr *v616;
  llvm::MachineInstr *v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  void *v622;
  void *v623;
  _DWORD *v624;
  int v625;
  int v626;
  char v627;
  uint64_t *v628;
  uint64_t v629;
  int v630;
  llvm::MachineFunction *v631;
  llvm::MachineInstr *v632;
  llvm::MachineInstr *v633;
  llvm::MachineFunction *v634;
  llvm::MachineInstr *v635;
  llvm::MachineInstr *v636;
  llvm::MachineFunction *v637;
  llvm::MachineInstr *v638;
  llvm::MachineInstr *v639;
  int v640;
  int v641;
  uint64_t *v642;
  int v643;
  int v644;
  unsigned int v645;
  uint64_t v646;
  llvm::MachineFunction *v647;
  unint64_t *v648;
  unint64_t *v649;
  _QWORD **v650;
  _QWORD *v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  void *v660;
  uint64_t v661;
  int v662;
  int v663;
  uint64_t v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  llvm::MachineFunction *v670;
  unint64_t *v671;
  unint64_t *v672;
  _QWORD **v673;
  _QWORD *v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  _QWORD ***v678;
  uint64_t *v679;
  void *v680;
  uint64_t v681;
  llvm::MachineFunction *v682;
  unint64_t *v683;
  unint64_t *v684;
  _QWORD **v685;
  _QWORD *v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  _QWORD ***v690;
  int v691;
  void *v692;
  uint64_t *v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  llvm::ConstantFP *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t *v705;
  uint64_t v706;
  const char *v707;
  uint64_t v708;
  __int16 ***v709;
  int v710;
  uint64_t *v711;
  llvm::MachineFunction *v712;
  llvm::MachineInstr *v713;
  llvm::MachineInstr *v714;
  void *v715;
  void *v716;
  void *v717;
  void *v718;
  void *v719;
  llvm::ConstantFP *v720;
  const llvm::APFloat *v721;
  llvm::APFloatBase *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unsigned int v726;
  _QWORD *v727;
  uint64_t v728;
  _QWORD *v729;
  int v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  const char *v735;
  uint64_t v736;
  void *v737;
  void *v738;
  const char *v739;
  uint64_t v740;
  const char *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t *v744;
  uint64_t v745;
  _BOOL4 v746;
  const llvm::APFloat *v747;
  llvm::APFloatBase *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  const llvm::APFloat *v752;
  llvm::APFloatBase *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  llvm::MachineInstr *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  llvm::MachineInstr *v762;
  uint64_t *v763;
  uint64_t v764;
  uint64_t v765;
  const char *v766;
  uint64_t v767;
  int v768;
  uint64_t v769;
  llvm::MachineInstr *v770;
  llvm::MachineInstr *v771;
  uint64_t v772;
  llvm::MachineInstr *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  void *v777;
  void *v778;
  uint64_t v779;
  void *v780;
  void *v781;
  void *v782;
  void *v783;
  void *v784;
  void *v785;
  void *v786;
  void *v787;
  void *v788;
  void *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  void *v793;
  void *v794;
  void *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  void *v799;
  void *v800;
  void *v801;
  void *v802;
  llvm::MachineInstr *v803;
  void *v804;
  llvm::MachineInstr *v805;
  llvm::MachineInstr *v806;
  int v807;
  const llvm::APFloat *v808;
  llvm::APFloatBase *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  const llvm::APFloat *v814;
  llvm::APFloatBase *v815;
  uint64_t v816;
  llvm::MachineInstr *v817;
  llvm::MachineInstr *v818;
  llvm::MachineInstr *v819;
  const llvm::APFloat *v820;
  llvm::APFloatBase *v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  void *v827;
  llvm::MachineInstr *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  llvm::MachineInstr *v832;
  llvm::MachineInstr *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  void *v837;
  _QWORD *v838;
  _QWORD *v839;
  int v840;
  llvm::MachineFunction *v841;
  llvm::MachineInstr *v842;
  llvm::MachineInstr *v843;
  int v844;
  uint64_t v845;
  void *v846;
  _QWORD *v847;
  _QWORD *v848;
  llvm::MachineFunction *v849;
  llvm::MachineInstr *v850;
  llvm::MachineInstr *v851;
  int v852;
  int v853;
  uint64_t v854;
  llvm::MachineInstr *v855;
  void *v856;
  _QWORD *v857;
  _QWORD *v858;
  llvm::MachineFunction *v859;
  llvm::MachineInstr *v860;
  llvm::MachineInstr *v861;
  int v862;
  uint64_t v863;
  llvm::MachineInstr *v864;
  llvm::MachineInstr *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  llvm::MachineFunction *v869;
  llvm::MachineInstr *v870;
  llvm::MachineInstr *v871;
  int v872;
  void *v873;
  unsigned __int8 v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  llvm::MachineFunction *v878;
  llvm::MachineInstr *v879;
  llvm::MachineInstr *v880;
  uint64_t v881;
  uint64_t v882;
  _DWORD *v883;
  int v884;
  uint64_t v885;
  uint64_t *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t *v889;
  const char *v890;
  uint64_t v891;
  uint64_t *v892;
  uint64_t v893;
  char v894;
  int v895;
  uint64_t v896;
  void *v897;
  void *v898;
  llvm::MachineInstr *v899;
  llvm::MachineInstr *v900;
  llvm::MachineInstr *v901;
  llvm::MachineInstr *v902;
  llvm::MachineInstr *v903;
  uint64_t v904;
  llvm::MachineInstr *v905;
  llvm::MachineFunction *v906;
  llvm::MachineInstr *v907;
  llvm::MachineInstr *v908;
  int v909;
  int v910;
  llvm::MachineFunction *v911;
  llvm::MachineInstr *v912;
  llvm::MachineInstr *v913;
  int v914;
  int v915;
  llvm::MachineFunction *v916;
  llvm::MachineInstr *v917;
  llvm::MachineInstr *v918;
  int v919;
  int v920;
  uint64_t v921;
  llvm::MachineInstr *v922;
  uint64_t v923;
  llvm::MachineInstr *v924;
  uint64_t v925;
  llvm::MachineInstr *v926;
  void *v927;
  void *v928;
  void *v929;
  llvm::MachineFunction *v930;
  llvm::MachineInstr *v931;
  llvm::MachineInstr *v932;
  uint64_t *v933;
  llvm::MachineInstr *v934;
  uint64_t v935;
  uint64_t v936;
  void *v937;
  void *v938;
  void *v939;
  _QWORD *v940;
  llvm::MachineFunction *v941;
  void *v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  llvm::MachineInstr *v946;
  uint64_t *v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  const char *v951;
  uint64_t v952;
  uint64_t *v953;
  uint64_t v954;
  void *v955;
  _QWORD *v956;
  _QWORD *v957;
  llvm::MachineFunction *v958;
  llvm::MachineInstr *v959;
  llvm::MachineInstr *v960;
  int v961;
  const char *v962;
  uint64_t v963;
  int v964;
  void *v965;
  void *v966;
  void *v967;
  const char *v968;
  uint64_t v969;
  uint64_t v970;
  unsigned __int8 *v971;
  BOOL v972;
  uint64_t v973;
  uint64_t v974;
  char v975;
  int v976;
  _BOOL4 v978;
  uint64_t v980;
  void **v981;
  void **v982;
  void **v983;
  void **v984;
  unint64_t v985;
  void *v986;
  double v987;
  llvm::ConstantFP *v988;
  const char *v989;
  int v990;
  const llvm::APFloat *v991;
  llvm::APFloatBase *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t *v997;
  uint64_t v998;
  uint64_t v999;
  char v1000;
  int v1001;
  _BOOL4 v1003;
  uint64_t v1005;
  void **v1006;
  void **v1007;
  void **v1008;
  void **v1009;
  unint64_t v1010;
  void *v1011;
  double v1012;
  llvm::ConstantFP *v1013;
  const char *v1014;
  int v1015;
  const llvm::APFloat *v1016;
  llvm::APFloatBase *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t *v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t *v1029;
  uint64_t v1030;
  uint64_t v1031;
  unsigned __int8 *v1032;
  uint64_t v1033;
  llvm::ConstantFP *v1034;
  const llvm::APFloat *v1035;
  llvm::APFloatBase *v1036;
  uint64_t v1037;
  int v1038;
  const llvm::APFloat *v1039;
  llvm::APFloatBase *v1040;
  uint64_t v1041;
  int v1042;
  const llvm::APFloat *v1043;
  llvm::APFloatBase *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  llvm::MachineInstr *v1051;
  llvm::MachineInstr *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  void *v1056;
  void *v1057;
  void *v1058;
  void *v1059;
  void *v1060;
  void *v1061;
  void *v1062;
  void *v1063;
  void *v1064;
  void *v1065;
  uint64_t v1066;
  llvm::MachineInstr *v1067;
  llvm::MachineInstr *v1068;
  void *v1069;
  void *v1070;
  uint64_t v1071;
  uint64_t v1072;
  void *v1073;
  llvm::MachineInstr *v1074;
  llvm::MachineInstr *v1075;
  uint64_t v1076;
  llvm::MachineInstr *v1077;
  uint64_t v1078;
  llvm::ConstantFP *v1079;
  const char *v1080;
  int v1081;
  uint64_t v1082;
  char v1083;
  int v1084;
  _BOOL4 v1086;
  uint64_t v1088;
  void **v1089;
  void **v1090;
  void **v1091;
  void **v1092;
  unint64_t v1093;
  void *v1094;
  double v1095;
  double v1096;
  const llvm::APFloat *v1097;
  llvm::APFloatBase *v1098;
  uint64_t v1099;
  llvm::ConstantFP *v1100;
  const llvm::APFloat *v1101;
  llvm::APFloatBase *v1102;
  uint64_t v1103;
  uint64_t v1104;
  const llvm::APFloat *v1105;
  llvm::APFloatBase *v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t *v1110;
  uint64_t v1111;
  llvm::MachineInstr *v1112;
  void *v1113;
  void *v1114;
  void *v1115;
  void *v1116;
  void *v1117;
  void *v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  void *v1122;
  void *v1123;
  void *v1124;
  void *v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  void *v1131;
  void *v1132;
  void *v1133;
  uint64_t v1134;
  uint64_t v1135;
  void *v1136;
  void *v1137;
  uint64_t v1138;
  llvm::MachineInstr *v1139;
  llvm::MachineInstr *v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  void *v1147;
  void *v1148;
  void *v1149;
  const llvm::APFloat *v1150;
  llvm::APFloatBase *v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  llvm::MachineInstr *v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t *v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  unsigned int *v1182;
  void *v1183;
  int v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  char v1191;
  char v1192;
  unint64_t v1193;
  char v1194;
  char v1195;
  unint64_t v1196;
  uint64_t v1197;
  int v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t *v1207;
  uint64_t v1208;
  uint64_t v1209;
  void *v1210;
  uint64_t v1211;
  void *v1212;
  uint64_t v1213;
  void *v1214;
  uint64_t v1215;
  char v1216;
  uint64_t v1217;
  int v1218;
  void *v1219;
  uint64_t v1220;
  uint64_t v1221;
  llvm::MachineInstr *v1222;
  _QWORD *v1223;
  llvm::MachineInstr *v1224;
  uint64_t v1225;
  uint64_t v1226;
  llvm::MachineInstr *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  llvm::MachineInstr *v1231;
  uint64_t v1232;
  void *v1233;
  int v1234;
  unsigned int v1235;
  uint64_t v1236;
  llvm::MachineFunction *v1237;
  uint64_t v1238;
  void *v1239;
  int v1240;
  uint64_t v1241;
  int v1242;
  llvm::MachineInstr *v1243;
  int v1244;
  void *v1245;
  uint64_t v1246;
  uint64_t v1247;
  int v1248;
  uint64_t v1249;
  int v1250;
  uint64_t v1251;
  int v1252;
  _BOOL4 v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  llvm::ConstantFP *v1258;
  unint64_t v1259;
  int v1260;
  int v1261;
  int v1262;
  llvm::ConstantFP *v1263;
  llvm::ConstantFP *v1264;
  llvm::ConstantFP *v1265;
  _QWORD *v1266;
  int v1267;
  void *v1268;
  unsigned __int8 v1269;
  int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  int v1275;
  char v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t *v1282;
  uint64_t v1283;
  llvm::GlobalValue *v1284;
  uint64_t v1285;
  char v1286;
  __int128 v1287;
  __int128 v1288;
  char v1289;
  unsigned __int8 *v1290;
  _DWORD v1291[3];
  uint64_t v1292;
  int v1293;
  void *v1294[2];
  __int128 v1295;
  __int128 v1296;
  _OWORD v1297[2];
  __int128 v1298;
  __int128 v1299;
  unsigned __int8 v1300;
  void *v1301[2];
  __int128 v1302;
  uint64_t v1303;
  unsigned int v1304;
  char v1305;
  unsigned int v1306;
  char v1307;
  int v1308;
  int v1309;
  char v1310;
  unsigned __int8 v1311;
  unsigned __int8 v1312;
  void *v1313[3];
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  uint64_t v1317;
  llvm::MachineInstr *v1318;
  int v1319;
  uint64_t v1320;
  llvm::MachineInstr *v1321;
  int v1322;
  uint64_t v1323;

  v1323 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v1266 = (_QWORD *)a2[1];
  v1274 = *(_QWORD *)(*a2 + 24);
  v5 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(a3 + 32);
    while (1)
    {
      v8 = *v7;
      v7 += 32;
      if (v8 == 17)
        break;
      if (v5 == ++v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v6) = -1;
  }
  v9 = (_QWORD *)*(unsigned int *)(*(_QWORD *)(a3 + 32) + 32 * v6 + 16);
  v1258 = *(llvm::ConstantFP **)(*(_QWORD *)(a3 + 24) + 32);
  v10 = *((_QWORD *)v1258 + 1);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 1328) + 176))(v10 + 1328);
  v1246 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 1328) + 104))(v10 + 1328);
  v1252 = v10 + 1328;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 1328) + 184))(v10 + 1328);
  v13 = *(unsigned __int8 *)(v10 + 1646);
  if (*(_BYTE *)(v10 + 1646))
  {
    v14 = 4;
  }
  else if (*(_BYTE *)(v10 + 1647))
  {
    v14 = 5;
  }
  else if (*(_BYTE *)(v10 + 1648))
  {
    v14 = 6;
  }
  else if (*(_BYTE *)(v10 + 1649))
  {
    v14 = 7;
  }
  else
  {
    v14 = 9;
  }
  v15 = *(unsigned __int8 *)(v10 + 1654);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(v4 + 48) = a3;
  v16 = (unsigned __int8 **)(a3 + 56);
  v1282 = (uint64_t *)v4;
  v17 = (unsigned __int8 **)(v4 + 32);
  v18 = v9;
  if ((unsigned __int8 **)(a3 + 56) != v17)
  {
    if (*v17)
    {
      v1281 = v10;
      v62 = v15;
      v9 = v11;
      v63 = v12;
      llvm::MetadataTracking::untrack((uint64_t)v17, *v17);
      v12 = v63;
      v11 = v9;
      v15 = v62;
      v10 = v1281;
      LODWORD(v9) = (_DWORD)v18;
    }
    v19 = *v16;
    *v17 = *v16;
    if (v19)
    {
      v1280 = v10;
      v60 = v15;
      v9 = v11;
      v61 = v12;
      llvm::MetadataTracking::track((uint64_t)v17, v19, 2);
      v12 = v61;
      v11 = v9;
      v15 = v60;
      v10 = v1280;
      LODWORD(v9) = (_DWORD)v18;
    }
  }
  v1279 = a3;
  v20 = 1;
  if ((int)v9 <= 260)
  {
    if ((int)v9 <= 201)
    {
      if ((int)v9 <= 139)
      {
        if ((_DWORD)v9 == 9)
        {
          v576 = *(_QWORD *)(v1279 + 32);
          v577 = *(_DWORD *)(v576 + 4);
          if (v577 < 0 && (v577 & 0x7FFFFFFFu) < *(_DWORD *)(v1274 + 432))
          {
            v578 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (v577 & 0x7FFFFFFF));
            if (v578 == 257)
              return 1;
            if (v578 == 129)
            {
              v579 = *(_DWORD *)(v576 + 68);
              v1313[0] = (void *)129;
              LODWORD(v1313[1]) = 0;
              v580 = v1282;
              v581 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 8);
              v583 = v582;
              v1301[0] = (void *)129;
              LODWORD(v1301[1]) = 0;
              LODWORD(v1313[0]) = v579;
              LODWORD(v1313[2]) = 0;
              *(_QWORD *)&v1314 = v581;
              *((_QWORD *)&v1314 + 1) = v582;
              LODWORD(v1315) = 1;
              v584 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v580 + 32))(v580, 128, v1301, 1, v1313, 2, 0);
              v586 = v585;
              v1301[0] = (void *)129;
              LODWORD(v1301[1]) = 0;
              LODWORD(v1313[0]) = v579;
              LODWORD(v1313[2]) = 0;
              *(_QWORD *)&v1314 = v581;
              *((_QWORD *)&v1314 + 1) = v583;
              LODWORD(v1315) = 1;
              v587 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v580 + 32))(v580, 127, v1301, 1, v1313, 2, 0);
              LODWORD(v1301[0]) = v577;
              LODWORD(v1301[1]) = 1;
              v1313[0] = v584;
              v1313[1] = v586;
              v64 = v1279;
              LODWORD(v1313[2]) = 1;
              *(_QWORD *)&v1314 = v587;
              *((_QWORD *)&v1314 + 1) = v588;
              LODWORD(v1315) = 1;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v580 + 32))(v580, 66, v1301, 1, v1313, 2, 0);
              v66 = *(_QWORD *)(v1279 + 24);
              v67 = v1279;
              if ((*(_BYTE *)v1279 & 4) == 0)
              {
                v67 = v1279;
                if ((*(_WORD *)(v1279 + 44) & 8) != 0)
                {
                  v67 = v1279;
                  do
                    v67 = *(_QWORD *)(v67 + 8);
                  while ((*(_WORD *)(v67 + 44) & 8) != 0);
                }
              }
              goto LABEL_65;
            }
          }
        }
        else
        {
          if ((_DWORD)v9 != 53)
            return v20;
          v151 = *(_QWORD *)(v1279 + 32);
          v152 = *(_DWORD *)(v151 + 4);
          if (v152 < 0)
          {
            v153 = v152 & 0x7FFFFFFF;
            if (v153 < *(_DWORD *)(v1274 + 432))
            {
              v154 = *(_DWORD *)(v151 + 68);
              v155 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * v153);
              if (v155 == (void *)257 || v155 == (void *)129)
              {
                v1301[0] = v155;
                LODWORD(v1301[1]) = 0;
                LODWORD(v1313[0]) = v154;
                LODWORD(v1313[2]) = 0;
                v20 = 1;
                (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 259, v1301, 1, v1313, 1, 0);
                goto LABEL_978;
              }
              if (v155 == (void *)65)
              {
                *(_QWORD *)&v1296 = 129;
                DWORD2(v1296) = 0;
                *(_QWORD *)&v1298 = 129;
                DWORD2(v1298) = 0;
                LODWORD(v1301[0]) = v154;
                LODWORD(v1302) = 0;
                v20 = 1;
                v1313[0] = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, &v1298, 1, v1301, 1, 0);
                v1313[1] = v156;
                LODWORD(v1313[2]) = 1;
                v157 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 259, &v1296, 1, v1313, 1, 0);
                v1301[0] = (void *)65;
                LODWORD(v1301[1]) = 0;
                v1313[0] = v157;
                v1313[1] = v158;
                LODWORD(v1313[2]) = 1;
                (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 119, v1301, 1, v1313, 1, 0);
LABEL_978:
                sub_1C4923194((_QWORD *)v1274, v1279, *(_DWORD *)(*(_QWORD *)(v159 + 32) + 4), v1266);
                return v20;
              }
            }
          }
        }
        return 0;
      }
      if ((_DWORD)v9 != 140)
      {
        if ((_DWORD)v18 != 193)
          return v20;
        goto LABEL_300;
      }
LABEL_310:
      if ((_DWORD)v18 == 140)
        v221 = 218;
      else
        v221 = 219;
      v64 = v1279;
      v222 = *(_QWORD *)(v1279 + 32);
      v223 = *(_DWORD *)(v222 + 4);
      LODWORD(v222) = *(_DWORD *)(v222 + 68);
      LODWORD(v1301[0]) = v223;
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = v222;
      LODWORD(v1313[2]) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, v221, v1301, 1, v1313, 1, *(unsigned __int16 *)(v1279 + 44) | 0x100000000);
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
      goto LABEL_65;
    }
    if ((int)v9 <= 252)
    {
      if ((_DWORD)v9 != 202)
      {
        if ((_DWORD)v18 != 240)
          return v20;
        v1290 = 0;
        v64 = v1279;
        if (&v1290 != v16)
        {
          if (*v16)
          {
            llvm::MetadataTracking::untrack((uint64_t)v16, *v16);
            v1032 = v1290;
            *v16 = v1290;
            if (v1032)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v1290, v1032, (uint64_t)v16);
              v1290 = 0;
            }
          }
          else
          {
            *v16 = 0;
          }
        }
        v66 = *(_QWORD *)(v1279 + 24);
        v67 = v1279;
        if ((*(_BYTE *)v1279 & 4) == 0)
        {
          v67 = v1279;
          if ((*(_WORD *)(v1279 + 44) & 8) != 0)
          {
            v67 = v1279;
            do
              v67 = *(_QWORD *)(v67 + 8);
            while ((*(_WORD *)(v67 + 44) & 8) != 0);
          }
        }
        goto LABEL_65;
      }
LABEL_300:
      v214 = *(unsigned int *)(v1279 + 40);
      v215 = *(_QWORD *)(v1279 + 32);
      if ((_DWORD)v214)
      {
        v216 = 0;
        v217 = *(unsigned __int8 **)(v1279 + 32);
        while (1)
        {
          v218 = *v217;
          v217 += 32;
          if (v218 == 17)
            break;
          if (v214 == ++v216)
            goto LABEL_304;
        }
      }
      else
      {
LABEL_304:
        LODWORD(v216) = -1;
      }
      v219 = *(_DWORD *)(v215 + 4);
      if (v219 < 0 && (v219 & 0x7FFFFFFFu) < *(_DWORD *)(v1274 + 432))
        v220 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * (v219 & 0x7FFFFFFF));
      else
        v220 = 0;
      v1313[0] = v220;
      v565 = sub_1C4825F50((unint64_t *)v1313);
      if ((_DWORD)v564 == 1)
      v20 = v565 == 32 || v565 == 16;
      if (v565 == 32 || v565 == 16)
      {
        if ((_DWORD)v18 == 193)
          v566 = 2;
        else
          v566 = 4;
        LODWORD(v1301[0]) = v219;
        LODWORD(v1301[1]) = 1;
        LODWORD(v1313[0]) = v566;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v215 + 32 * (v216 + 1) + 4);
        LODWORD(v1315) = 0;
        DWORD2(v1315) = *(_DWORD *)(v215 + 32 * (v216 + 2) + 4);
        DWORD2(v1316) = 0;
        LODWORD(v1317) = v1314;
        v1319 = 0;
        LODWORD(v1320) = DWORD2(v1315);
        v1322 = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 336, v1301, 1, v1313, 5, *(unsigned __int16 *)(v1279 + 44) | 0x100000000);
        v567 = v1279;
        if ((*(_BYTE *)v1279 & 4) == 0)
        {
          v567 = v1279;
          if ((*(_WORD *)(v1279 + 44) & 8) != 0)
          {
            v567 = v1279;
            do
              v567 = *(_QWORD *)(v567 + 8);
            while ((*(_WORD *)(v567 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v1279 + 24) + 40, v1279, *(_QWORD *)(v567 + 8));
      }
      return v20;
    }
    if ((_DWORD)v9 != 253)
    {
      if ((_DWORD)v18 != 258)
        return v20;
      goto LABEL_310;
    }
LABEL_343:
    v208 = v1279;
    v258 = *(_QWORD *)(v1279 + 32) + 32 * (v6 + 1);
    v261 = *(_DWORD *)(v258 + 4);
    v259 = (_DWORD *)(v258 + 4);
    v260 = v261;
    v262 = v261 & 0x7FFFFFFF;
    if ((v261 & 0x80000000) != 0)
    {
      v264 = v1274;
      if (v262 >= *(unsigned int *)(v1274 + 432))
        v263 = 0;
      else
        v263 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * v262);
    }
    else
    {
      v263 = 0;
      v264 = v1274;
    }
    *(_QWORD *)&v1298 = v263;
    v763 = (uint64_t *)(*(_QWORD *)(v264 + 24) + 16 * v262 + 8);
    if ((int)v260 >= 0)
      v763 = (uint64_t *)(*(_QWORD *)(v264 + 272) + 8 * v260);
    v764 = *v763;
    if ((*(_BYTE *)(v764 + 3) & 1) == 0)
      v764 = *(_QWORD *)(v764 + 24);
    v765 = *(_QWORD *)(v764 + 8);
    if (**(_WORD **)(v765 + 16) == 121)
    {
      v973 = *(_QWORD *)(*(_QWORD *)(v765 + 32) + 48);
      if (v973)
      {
        v974 = *(_QWORD *)(v973 + 32);
        if ((_UNKNOWN *)v974 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1313[1], (const llvm::detail::DoubleAPFloat *)(v973 + 32));
        }
        else
        {
          v1313[1] = *(void **)(v973 + 32);
          if ((*(_DWORD *)(v974 + 8) + 64) >= 0x80)
            v1313[2] = (void *)operator new[]();
          v975 = *(_BYTE *)(v973 + 52);
          v976 = v975 & 7;
          BYTE4(v1314) = BYTE4(v1314) & 0xF0 | v975 & 0xF;
          LODWORD(v1314) = *(_DWORD *)(v973 + 48);
          v978 = (v975 & 6) != 0 && v976 != 3;
          if (v976 == 1 || v978)
          {
            v980 = *(unsigned int *)(v974 + 8);
            if ((v980 - 64) <= 0xFFFFFF7F)
              v981 = (void **)v1313[2];
            else
              v981 = &v1313[2];
            v984 = *(void ***)(v973 + 40);
            v983 = (void **)(v973 + 40);
            v982 = v984;
            if ((*((_DWORD *)*(v983 - 1) + 2) - 64) >= 0xFFFFFF80)
              v982 = v983;
            if (v980 <= 0xFFFFFFBF)
            {
              v985 = (unint64_t)(v980 + 64) >> 6;
              do
              {
                v986 = *v982++;
                *v981++ = v986;
                --v985;
              }
              while (v985);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v1313, &unk_1C866F198, 1, &v1296);
        v987 = 1.0 / llvm::APFloat::convertToDouble((llvm::APFloat *)v1313);
        v988 = ***(llvm::ConstantFP ****)v1258;
        v990 = sub_1C4825F50((unint64_t *)&v1298);
        if ((_DWORD)v989 == 1)
        sub_1C4940308((uint64_t)v1301, v990, v987);
        v992 = llvm::ConstantFP::get(v988, (llvm::LLVMContext *)v1301, v991);
        if (v1301[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1302);
        }
        else if ((*((_DWORD *)v1301[1] + 2) - 64) <= 0xFFFFFF7F && (_QWORD)v1302)
        {
          MEMORY[0x1CAA32F9C](v1302, 0x1000C8000313F17);
        }
        v993 = v1279;
        LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
        LODWORD(v1301[1]) = 1;
        (*(void (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v992);
        v994 = *(_QWORD *)(v1279 + 24);
        v995 = v1279;
        if ((*(_BYTE *)v1279 & 4) == 0)
        {
          v995 = v1279;
          if ((*(_WORD *)(v1279 + 44) & 8) != 0)
          {
            v995 = v1279;
            do
              v995 = *(_QWORD *)(v995 + 8);
            while ((*(_WORD *)(v995 + 44) & 8) != 0);
          }
        }
LABEL_947:
        sub_1C487FE80(v994 + 40, v993, *(_QWORD *)(v995 + 8));
        if (v1313[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1313[2]);
        }
        else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
        {
          MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
        }
        return 1;
      }
    }
    if ((_DWORD)v18 == 2517 || (*(_WORD *)(v10 + 1020) & 1) != 0 || (*(_WORD *)(v1279 + 44) & 0x80) != 0)
      goto LABEL_742;
    v767 = sub_1C4825F50((unint64_t *)&v1298);
    if ((_DWORD)v766 == 1)
    if (v767 == 16)
    {
LABEL_742:
      LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v208 + 32) + 4);
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = *v259;
      LODWORD(v1313[2]) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 315, v1301, 1, v1313, 1, *(unsigned __int16 *)(v208 + 44) | 0x100000000);
      v212 = *(_QWORD *)(v208 + 24);
      v213 = v208;
      if ((*(_BYTE *)v208 & 4) == 0)
      {
        v213 = v208;
        if ((*(_WORD *)(v208 + 44) & 8) != 0)
        {
          v213 = v208;
          do
            v213 = *(_QWORD *)(v213 + 8);
          while ((*(_WORD *)(v213 + 44) & 8) != 0);
        }
      }
LABEL_1296:
      v68 = *(_QWORD *)(v213 + 8);
      v69 = v212 + 40;
      v70 = v208;
      goto LABEL_516;
    }
    v996 = *v259;
    if ((v996 & 0x80000000) != 0)
      v997 = (uint64_t *)(*(_QWORD *)(v264 + 24) + 16 * (v996 & 0x7FFFFFFF) + 8);
    else
      v997 = (uint64_t *)(*(_QWORD *)(v264 + 272) + 8 * v996);
    v1033 = *v997;
    if (v1033)
    {
      if ((*(_BYTE *)(v1033 + 3) & 1) != 0)
      {
        v208 = v1279;
      }
      else
      {
        v1033 = *(_QWORD *)(v1033 + 24);
        v208 = v1279;
        if (!v1033 || (*(_BYTE *)(v1033 + 3) & 1) == 0)
          goto LABEL_994;
      }
      v1201 = *(_QWORD *)(v1033 + 8);
      if (v1201 && **(_WORD **)(v1201 + 16) == 178)
        goto LABEL_742;
    }
LABEL_994:
    v1034 = ***(llvm::ConstantFP ****)v1258;
    DWORD2(v1296) = 32;
    *(_QWORD *)&v1296 = 1602224128;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1036 = llvm::ConstantFP::get(v1034, (llvm::LLVMContext *)v1313, v1035);
    (*(void (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v1036);
    v1038 = *(_DWORD *)(*(_QWORD *)(v1037 + 32) + 4);
    if (v1313[1] == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v1313[2]);
    }
    else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
    {
      MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
    }
    DWORD2(v1296) = 32;
    *(_QWORD *)&v1296 = 528482304;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1040 = llvm::ConstantFP::get(v1034, (llvm::LLVMContext *)v1313, v1039);
    (*(void (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v1040);
    v1042 = *(_DWORD *)(*(_QWORD *)(v1041 + 32) + 4);
    if (v1313[1] == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v1313[2]);
    }
    else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
    {
      MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
    }
    BYTE4(v1314) = BYTE4(v1314) & 0xF0 | 2;
    LODWORD(v1314) = 23;
    v1313[1] = &unk_1C866F184;
    v1313[2] = (void *)1;
    llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v1313[1], 1, 0);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1044 = llvm::ConstantFP::get(v1034, (llvm::LLVMContext *)v1313, v1043);
    (*(void (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v1044);
    v1244 = *(_DWORD *)(*(_QWORD *)(v1045 + 32) + 4);
    if (v1313[1] == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v1313[2]);
    }
    else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
    {
      MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
    }
    v1313[0] = (void *)v1298;
    LODWORD(v1313[1]) = 0;
    v1046 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 1);
    v1256 = v1047;
    v1264 = (llvm::ConstantFP *)v1046;
    v1313[0] = (void *)v1298;
    LODWORD(v1313[1]) = 0;
    v1048 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 2139095039);
    v1272 = v1049;
    v1277 = v1048;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    LODWORD(v1313[0]) = v260;
    LODWORD(v1313[2]) = 0;
    LODWORD(v1314) = v1042;
    LODWORD(v1315) = 0;
    v1050 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, 0);
    v1052 = v1051;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    LODWORD(v1313[0]) = v260;
    LODWORD(v1313[2]) = 0;
    v1053 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 184, v1301, 1, v1313, 1, 0);
    v1250 = v1042;
    v1055 = v1054;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    LODWORD(v1313[0]) = 2;
    LODWORD(v1313[2]) = 2;
    *(_QWORD *)&v1314 = v1053;
    *((_QWORD *)&v1314 + 1) = v1054;
    LODWORD(v1315) = 1;
    DWORD2(v1315) = v1038;
    DWORD2(v1316) = 0;
    v1317 = v1050;
    v1318 = v1052;
    v1319 = 1;
    LODWORD(v1320) = v260;
    v1322 = 0;
    v1056 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
    v1058 = v1057;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1056;
    v1313[1] = v1057;
    LODWORD(v1313[2]) = 1;
    v1059 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 315, v1301, 1, v1313, 1, 0);
    v1061 = v1060;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1056;
    v1313[1] = v1058;
    LODWORD(v1313[2]) = 1;
    v1062 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 177, v1301, 1, v1313, 1, 0);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1062;
    v1313[1] = v1063;
    LODWORD(v1313[2]) = 1;
    *(_QWORD *)&v1314 = v1059;
    *((_QWORD *)&v1314 + 1) = v1061;
    LODWORD(v1315) = 1;
    DWORD2(v1315) = v1244;
    DWORD2(v1316) = 0;
    v1064 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 166, v1301, 1, v1313, 3, 0);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1064;
    v1313[1] = v1065;
    LODWORD(v1313[2]) = 1;
    *(_QWORD *)&v1314 = v1059;
    *((_QWORD *)&v1314 + 1) = v1061;
    LODWORD(v1315) = 1;
    *((_QWORD *)&v1315 + 1) = v1059;
    *(_QWORD *)&v1316 = v1061;
    DWORD2(v1316) = 1;
    v1066 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 166, v1301, 1, v1313, 3, 0);
    v1068 = v1067;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1059;
    v1313[1] = v1061;
    LODWORD(v1313[2]) = 1;
    v1069 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 184, v1301, 1, v1313, 1, 0);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1069;
    v1313[1] = v1070;
    LODWORD(v1313[2]) = 1;
    *(_QWORD *)&v1314 = v1264;
    *((_QWORD *)&v1314 + 1) = v1256;
    LODWORD(v1315) = 1;
    v1071 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 46, v1301, 1, v1313, 2, 0);
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    LODWORD(v1313[0]) = 35;
    LODWORD(v1313[2]) = 2;
    *(_QWORD *)&v1314 = v1071;
    *((_QWORD *)&v1314 + 1) = v1072;
    LODWORD(v1315) = 1;
    *((_QWORD *)&v1315 + 1) = v1277;
    *(_QWORD *)&v1316 = v1272;
    DWORD2(v1316) = 1;
    v1317 = (uint64_t)v1059;
    v1318 = (llvm::MachineInstr *)v1061;
    v1319 = 1;
    v1320 = v1066;
    v1321 = v1068;
    v1322 = 1;
    v1073 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
    v1075 = v1074;
    v1301[0] = (void *)v1298;
    LODWORD(v1301[1]) = 0;
    v1313[0] = v1073;
    v1313[1] = v1074;
    LODWORD(v1313[2]) = 1;
    LODWORD(v1314) = v1250;
    LODWORD(v1315) = 0;
    v1076 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, 0);
    LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
    LODWORD(v1301[1]) = 1;
    LODWORD(v1313[0]) = 2;
    LODWORD(v1313[2]) = 2;
    *(_QWORD *)&v1314 = v1053;
    *((_QWORD *)&v1314 + 1) = v1055;
    LODWORD(v1315) = 1;
    DWORD2(v1315) = v1038;
    DWORD2(v1316) = 0;
    v1317 = v1076;
    v1318 = v1077;
    v1319 = 1;
    v1320 = (uint64_t)v1073;
    v1321 = v1075;
    v194 = v1279;
    v1322 = 1;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
    v197 = *(_QWORD *)(v1279 + 24);
    v198 = v1279;
    if ((*(_BYTE *)v1279 & 4) == 0)
    {
      v198 = v1279;
      if ((*(_WORD *)(v1279 + 44) & 8) != 0)
      {
        v198 = v1279;
        do
          v198 = *(_QWORD *)(v198 + 8);
        while ((*(_WORD *)(v198 + 44) & 8) != 0);
      }
    }
LABEL_872:
    v68 = *(_QWORD *)(v198 + 8);
    v69 = v197 + 40;
    v70 = v194;
    goto LABEL_516;
  }
  switch((int)v9)
  {
    case 280:
      v656 = v1279;
      v657 = *(_QWORD *)(v1279 + 32);
      v658 = *(_DWORD *)(v657 + 4);
      if (v658 < 0 && (v659 = v658 & 0x7FFFFFFF, v659 < *(_DWORD *)(v1274 + 432)))
        v660 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * v659);
      else
        v660 = 0;
      v702 = ***(llvm::ConstantFP ****)v1282[1];
      *(_QWORD *)&v1287 = v660;
      v1294[0] = v660;
      v703 = v657 + 32 * (v6 + 1);
      v704 = *(unsigned int *)(v703 + 4);
      if ((v704 & 0x80000000) != 0)
        v705 = (uint64_t *)(*(_QWORD *)(v1274 + 24) + 16 * (v704 & 0x7FFFFFFF) + 8);
      else
        v705 = (uint64_t *)(*(_QWORD *)(v1274 + 272) + 8 * v704);
      v734 = *v705;
      if (!v734)
        goto LABEL_692;
      if ((*(_BYTE *)(v734 + 3) & 1) == 0 && ((v734 = *(_QWORD *)(v734 + 24)) == 0 || (*(_BYTE *)(v734 + 3) & 1) == 0)
        || (v1197 = *(_QWORD *)(v734 + 8)) == 0)
      {
        v656 = v1279;
        goto LABEL_692;
      }
      v1198 = **(unsigned __int16 **)(v1197 + 16);
      if (v1198 != 179)
      {
        v656 = v1279;
        if (v1198 != 178)
          goto LABEL_692;
        v703 = *(_QWORD *)(v1197 + 32) + 32;
        v1199 = 129;
        goto LABEL_1275;
      }
      v656 = v1279;
      if ((*(_WORD *)(v10 + 1020) & 1) != 0 || (*(_WORD *)(v1279 + 44) & 0x200) != 0)
      {
        v703 = *(_QWORD *)(v1197 + 32) + 32;
        v1199 = 257;
LABEL_1275:
        *(_QWORD *)&v1287 = v1199;
      }
LABEL_692:
      v736 = sub_1C4825F50((unint64_t *)&v1287);
      if ((_DWORD)v735 == 1)
      v737 = &unk_1C866F184;
      if (v736 == 16)
        v738 = &unk_1C866F15C;
      else
        v738 = &unk_1C866F184;
      v1219 = v738;
      v740 = sub_1C4825F50((unint64_t *)v1294);
      if ((_DWORD)v739 == 1)
      if (v740 == 16)
        v737 = &unk_1C866F15C;
      v742 = sub_1C4825F50((unint64_t *)&v1287);
      if ((_DWORD)v741 == 1)
      v743 = v703;
      v364 = v742 == 16;
      v744 = v1282;
      if (v364)
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = *(_DWORD *)(v703 + 4);
        LODWORD(v1313[2]) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 178, v1301, 1, v1313, 1, 0);
        v743 = *(_QWORD *)(v745 + 32);
      }
      v1226 = v740;
      v1221 = v736;
      v746 = 0;
      if ((*(_WORD *)(v10 + 1020) & 1) == 0 && (*(_WORD *)(v656 + 44) & 0x200) == 0 && (_QWORD)v1287 == 257)
        v746 = v1294[0] == (void *)257;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      DWORD2(v1296) = 32;
      *(_QWORD *)&v1296 = 0x20000000;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
      v1263 = v702;
      v748 = llvm::ConstantFP::get(v702, (llvm::LLVMContext *)v1313, v747);
      v749 = (*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v748);
      v751 = v750;
      if (v1313[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1313[2]);
      }
      else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
      {
        MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
      }
      v1253 = v746;
      if (v746 && (!*(_BYTE *)(v10 + 1681) || *(_BYTE *)(v10 + 1682)))
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        DWORD2(v1296) = 32;
        *(_QWORD *)&v1296 = 1333788672;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
        v753 = llvm::ConstantFP::get(v1263, (llvm::LLVMContext *)v1313, v752);
        v754 = (*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v753);
        v756 = v755;
        if (v1313[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1313[2]);
        }
        else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
        {
          MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
        }
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = *(_DWORD *)(v743 + 4);
        LODWORD(v1313[2]) = 0;
        *(_QWORD *)&v1314 = v754;
        *((_QWORD *)&v1314 + 1) = v756;
        LODWORD(v1315) = 1;
        v757 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = 4;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v703 + 4);
        LODWORD(v1315) = 0;
        *((_QWORD *)&v1315 + 1) = v749;
        *(_QWORD *)&v1316 = v751;
        DWORD2(v1316) = 1;
        v1317 = v757;
        v1318 = v758;
        v1319 = 1;
        v744 = v1282;
        LODWORD(v1320) = *(_DWORD *)(v743 + 4);
        v1322 = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v744 + 32))(v744, 51, v1301, 1, v1313, 5, 0);
        v743 = *(_QWORD *)(v759 + 32);
      }
      v760 = *(unsigned __int16 *)(v656 + 44) | 0x100000000;
      if (v746)
        v761 = 0x100000000;
      else
        v761 = *(unsigned __int16 *)(v656 + 44) | 0x100000000;
      v1230 = v749;
      v1241 = v761;
      if (*(_BYTE *)(v10 + 1681))
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = *(_DWORD *)(v743 + 4);
        LODWORD(v1313[2]) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t))(*v744 + 32))(v744, 356, v1301, 1, v1313, 1);
      }
      else
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = *(_DWORD *)(v743 + 4);
        LODWORD(v1313[2]) = 0;
        v769 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t))(*v744 + 32))(v744, 335, v1301, 1, v1313, 1);
        v771 = v770;
        if ((sub_1C494311C(*(_DWORD *)(v703 + 4), v1274, 0) & 1) != 0)
          goto LABEL_756;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = 1;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v703 + 4);
        LODWORD(v1315) = 0;
        *(_QWORD *)&v1296 = v1287;
        DWORD2(v1296) = 0;
        *((_QWORD *)&v1315 + 1) = sub_1C5545FFC((uint64_t)v1282, (unint64_t *)&v1296, 0.0);
        *(_QWORD *)&v1316 = v772;
        DWORD2(v1316) = 1;
        *(_QWORD *)&v1298 = 257;
        DWORD2(v1298) = 0;
        v1317 = sub_1C5545FFC((uint64_t)v1282, (unint64_t *)&v1298, 0.0);
        v1318 = v773;
        v1319 = 1;
        v1320 = v769;
        v1321 = v771;
        v1322 = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5);
      }
      v771 = v762;
LABEL_756:
      v1236 = v751;
      v774 = *((_QWORD *)v771 + 4);
      v1247 = v743;
      v1217 = v774;
      if (v746)
      {
        v1313[0] = (void *)257;
        LODWORD(v1313[1]) = 0;
        v775 = (uint64_t)v1282;
        v1214 = (void *)sub_1C5545FFC((uint64_t)v1282, (unint64_t *)v1313, 0.5);
        v1215 = v703;
        v776 = v743;
        v778 = v777;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v779 = v776;
        LODWORD(v1313[0]) = *(_DWORD *)(v776 + 4);
        LODWORD(v1313[2]) = 0;
        LODWORD(v1314) = *(_DWORD *)(v774 + 4);
        LODWORD(v1315) = 0;
        v780 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 165, v1301, 1, v1313, 2, 0);
        v782 = v781;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v1214;
        v1313[1] = v778;
        LODWORD(v1313[2]) = 1;
        LODWORD(v1314) = *(_DWORD *)(v774 + 4);
        LODWORD(v1315) = 0;
        v783 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 165, v1301, 1, v1313, 2, 0);
        v785 = v784;
        *(_QWORD *)&v1296 = 257;
        DWORD2(v1296) = 0;
        *(_QWORD *)&v1298 = 257;
        DWORD2(v1298) = 0;
        v1301[0] = v780;
        v1301[1] = v782;
        LODWORD(v1302) = 1;
        v1313[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 177, &v1298, 1, v1301, 1, 0);
        v1313[1] = v786;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v780;
        *((_QWORD *)&v1314 + 1) = v782;
        LODWORD(v1315) = 1;
        DWORD2(v1315) = *(_DWORD *)(v779 + 4);
        DWORD2(v1316) = 0;
        v1212 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 166, &v1296, 1, v1313, 3, 0);
        v788 = v787;
        *(_QWORD *)&v1296 = 257;
        DWORD2(v1296) = 0;
        *(_QWORD *)&v1298 = 257;
        DWORD2(v1298) = 0;
        v1301[0] = v780;
        v1301[1] = v782;
        LODWORD(v1302) = 1;
        v1313[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 177, &v1298, 1, v1301, 1, 0);
        v1313[1] = v789;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v783;
        *((_QWORD *)&v1314 + 1) = v785;
        LODWORD(v1315) = 1;
        *((_QWORD *)&v1315 + 1) = v1214;
        *(_QWORD *)&v1316 = v778;
        DWORD2(v1316) = 1;
        v790 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 166, &v1296, 1, v1313, 3, 0);
        v792 = v791;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v1212;
        v1313[1] = v788;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v783;
        *((_QWORD *)&v1314 + 1) = v785;
        LODWORD(v1315) = 1;
        *((_QWORD *)&v1315 + 1) = v780;
        *(_QWORD *)&v1316 = v782;
        DWORD2(v1316) = 1;
        v793 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 166, v1301, 1, v1313, 3, 0);
        v795 = v794;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v783;
        v1313[1] = v785;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v790;
        *((_QWORD *)&v1314 + 1) = v792;
        v703 = v1215;
        LODWORD(v1315) = 1;
        *((_QWORD *)&v1315 + 1) = v783;
        *(_QWORD *)&v1316 = v785;
        v746 = v1253;
        DWORD2(v1316) = 1;
        v796 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 166, v1301, 1, v1313, 3, 0);
        v798 = v797;
        *(_QWORD *)&v1296 = 257;
        DWORD2(v1296) = 0;
        *(_QWORD *)&v1298 = 257;
        DWORD2(v1298) = 0;
        v1301[0] = v793;
        v1301[1] = v795;
        LODWORD(v1302) = 1;
        v1313[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 177, &v1298, 1, v1301, 1, 0);
        v1313[1] = v799;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v793;
        *((_QWORD *)&v1314 + 1) = v795;
        LODWORD(v1315) = 1;
        DWORD2(v1315) = *(_DWORD *)(v1247 + 4);
        DWORD2(v1316) = 0;
        v800 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 166, &v1296, 1, v1313, 3, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v800;
        v1313[1] = v801;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v796;
        *((_QWORD *)&v1314 + 1) = v798;
        LODWORD(v1315) = 1;
        *((_QWORD *)&v1315 + 1) = v793;
        *(_QWORD *)&v1316 = v795;
        DWORD2(v1316) = 1;
        v802 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 166, v1301, 1, v1313, 3, 0);
      }
      else
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = *(_DWORD *)(v774 + 4);
        LODWORD(v1313[2]) = 0;
        LODWORD(v1314) = *(_DWORD *)(v743 + 4);
        LODWORD(v1315) = 0;
        v775 = (uint64_t)v1282;
        v802 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, v760);
      }
      v804 = v802;
      v805 = v803;
      v233 = v1266;
      if (v1294[0] == (void *)129)
      {
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v802;
        v1313[1] = v803;
        LODWORD(v1313[2]) = 1;
        v804 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 179, v1301, 1, v1313, 1, 0);
        v805 = v806;
      }
      if (!*(_BYTE *)(v10 + 1681))
      {
        v1301[0] = (void *)v1287;
        LODWORD(v1301[1]) = 0;
        BYTE4(v1314) = BYTE4(v1314) & 0xF0 | 3;
        if (v1221 == 16)
          v807 = -15;
        else
          v807 = -127;
        LODWORD(v1314) = v807;
        v1313[1] = v1219;
        v1313[2] = 0;
        sub_1C47A8F34((uint64_t)v1313, 0);
        v809 = llvm::ConstantFP::get(v1263, (llvm::LLVMContext *)v1313, v808);
        v810 = (*(uint64_t (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v775 + 24))(v775, v1301, v809);
        v812 = v811;
        if (v1313[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1313[2]);
        }
        else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
        {
          MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
        }
        v1301[0] = v1294[0];
        LODWORD(v1301[1]) = 0;
        BYTE4(v1314) = BYTE4(v1314) & 0xF0 | 3;
        if (v1226 == 16)
          v813 = -15;
        else
          v813 = -127;
        LODWORD(v1314) = v813;
        v1313[1] = v737;
        v1313[2] = 0;
        sub_1C47A8F34((uint64_t)v1313, 0);
        v815 = llvm::ConstantFP::get(v1263, (llvm::LLVMContext *)v1313, v814);
        v816 = (*(uint64_t (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v775 + 24))(v775, v1301, v815);
        v818 = v817;
        if (v1313[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1313[2]);
        }
        else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
        {
          MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
        }
        v1301[0] = v1294[0];
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = 1;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v703 + 4);
        LODWORD(v1315) = 0;
        *((_QWORD *)&v1315 + 1) = v810;
        *(_QWORD *)&v1316 = v812;
        DWORD2(v1316) = 1;
        v1317 = v816;
        v1318 = v818;
        v1319 = 1;
        v1320 = (uint64_t)v804;
        v1321 = v805;
        v1322 = 1;
        v775 = (uint64_t)v1282;
        v804 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, v1241);
        v805 = v819;
        v746 = v1253;
      }
      if (!v746)
        goto LABEL_834;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      DWORD2(v1296) = 32;
      *(_QWORD *)&v1296 = 931135488;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
      v821 = llvm::ConstantFP::get(v1263, (llvm::LLVMContext *)v1313, v820);
      v822 = (*(uint64_t (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v775 + 24))(v775, v1301, v821);
      v824 = v823;
      if (v1313[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1313[2]);
      }
      else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F)
      {
        if (v1313[2])
          MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
      }
      if (*(_BYTE *)(v10 + 1681))
      {
        v1313[0] = (void *)257;
        LODWORD(v1313[1]) = 0;
        v825 = sub_1C5545FFC(v775, (unint64_t *)v1313, 1.0);
        v1301[0] = v1294[0];
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = 1;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v1217 + 4);
        LODWORD(v1315) = 0;
        *((_QWORD *)&v1315 + 1) = v825;
        *(_QWORD *)&v1316 = v826;
        DWORD2(v1316) = 1;
        LODWORD(v1317) = *(_DWORD *)(v1247 + 4);
        v1319 = 0;
        v1320 = (uint64_t)v804;
        v1321 = v805;
        v1322 = 1;
        v827 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 51, v1301, 1, v1313, 5, 0);
        v805 = v828;
        if (!*(_BYTE *)(v10 + 1682))
          goto LABEL_834;
        v829 = v775;
        v830 = (uint64_t)v827;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v827;
        v1313[1] = v828;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v822;
        *((_QWORD *)&v1314 + 1) = v824;
        LODWORD(v1315) = 1;
        v831 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v829 + 32))(v829, 165, v1301, 1, v1313, 2, 0);
        v1301[0] = v1294[0];
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = 4;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v703 + 4);
        LODWORD(v1315) = 0;
        *((_QWORD *)&v1315 + 1) = v1230;
        *(_QWORD *)&v1316 = v1236;
        DWORD2(v1316) = 1;
        v1317 = v831;
        v1318 = v832;
        v1319 = 1;
        v1320 = v830;
        v1321 = v805;
        v1322 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v829 + 32))(v829, 51, v1301, 1, v1313, 5, 0);
      }
      else
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v804;
        v1313[1] = v805;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v822;
        *((_QWORD *)&v1314 + 1) = v824;
        LODWORD(v1315) = 1;
        v925 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 165, v1301, 1, v1313, 2, 0);
        v1301[0] = v1294[0];
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = 4;
        LODWORD(v1313[2]) = 2;
        LODWORD(v1314) = *(_DWORD *)(v703 + 4);
        LODWORD(v1315) = 0;
        *((_QWORD *)&v1315 + 1) = v1230;
        *(_QWORD *)&v1316 = v1236;
        DWORD2(v1316) = 1;
        v1317 = v925;
        v1318 = v926;
        v1319 = 1;
        v1320 = (uint64_t)v804;
        v1321 = v805;
        v1322 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v775 + 32))(v775, 51, v1301, 1, v1313, 5, 0);
      }
      v805 = v833;
LABEL_834:
      v205 = (_QWORD *)v1274;
      v204 = *(_DWORD *)(*((_QWORD *)v805 + 4) + 4);
LABEL_341:
      v206 = v1279;
      v207 = v233;
      goto LABEL_342;
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
    case 646:
    case 647:
    case 648:
    case 649:
    case 650:
    case 651:
    case 652:
    case 653:
    case 654:
    case 655:
    case 656:
    case 657:
    case 658:
    case 659:
    case 660:
    case 661:
    case 662:
    case 663:
    case 664:
    case 665:
    case 666:
    case 667:
    case 668:
    case 669:
    case 670:
    case 671:
    case 672:
    case 673:
    case 674:
    case 675:
    case 676:
    case 677:
    case 678:
    case 679:
    case 680:
    case 681:
    case 682:
    case 683:
    case 684:
    case 685:
    case 686:
    case 687:
    case 688:
    case 689:
    case 690:
    case 691:
    case 692:
    case 693:
    case 694:
    case 695:
    case 696:
    case 697:
    case 698:
    case 699:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 728:
    case 729:
    case 730:
    case 731:
    case 732:
    case 733:
    case 734:
    case 735:
    case 736:
    case 737:
    case 738:
    case 739:
    case 740:
    case 741:
    case 742:
    case 743:
    case 744:
    case 745:
    case 746:
    case 747:
    case 748:
    case 749:
    case 750:
    case 751:
    case 752:
    case 753:
    case 754:
    case 755:
    case 756:
    case 757:
    case 758:
    case 759:
    case 760:
    case 761:
    case 762:
    case 763:
    case 764:
    case 765:
    case 766:
    case 767:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
    case 783:
    case 784:
    case 785:
    case 786:
    case 787:
    case 788:
    case 789:
    case 790:
    case 791:
    case 792:
    case 793:
    case 794:
    case 795:
    case 796:
    case 797:
    case 798:
    case 799:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 835:
    case 836:
    case 837:
    case 838:
    case 839:
    case 840:
    case 841:
    case 842:
    case 843:
    case 844:
    case 845:
    case 846:
    case 847:
    case 848:
    case 849:
    case 850:
    case 851:
    case 852:
    case 853:
    case 854:
    case 855:
    case 856:
    case 857:
    case 858:
    case 859:
    case 860:
    case 861:
    case 862:
    case 863:
    case 864:
    case 865:
    case 866:
    case 867:
    case 868:
    case 869:
    case 870:
    case 871:
    case 872:
    case 873:
    case 874:
    case 875:
    case 876:
    case 877:
    case 878:
    case 879:
    case 880:
    case 881:
    case 882:
    case 883:
    case 884:
    case 885:
    case 886:
    case 887:
    case 888:
    case 889:
    case 890:
    case 891:
    case 892:
    case 893:
    case 894:
    case 895:
    case 896:
    case 897:
    case 898:
    case 899:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 912:
    case 913:
    case 914:
    case 915:
    case 916:
    case 917:
    case 918:
    case 919:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 978:
    case 979:
    case 980:
    case 981:
    case 982:
    case 983:
    case 984:
    case 985:
    case 986:
    case 987:
    case 988:
    case 989:
    case 990:
    case 991:
    case 992:
    case 993:
    case 994:
    case 995:
    case 996:
    case 997:
    case 998:
    case 999:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1234:
    case 1235:
    case 1236:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
    case 1241:
    case 1242:
    case 1243:
    case 1244:
    case 1245:
    case 1246:
    case 1247:
    case 1248:
    case 1249:
    case 1250:
    case 1251:
    case 1252:
    case 1253:
    case 1254:
    case 1255:
    case 1256:
    case 1257:
    case 1258:
    case 1259:
    case 1260:
    case 1261:
    case 1262:
    case 1263:
    case 1264:
    case 1265:
    case 1266:
    case 1267:
    case 1268:
    case 1270:
    case 1271:
    case 1272:
    case 1273:
    case 1274:
    case 1275:
    case 1276:
    case 1277:
    case 1278:
    case 1279:
    case 1280:
    case 1824:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1829:
    case 1830:
    case 1831:
    case 1832:
    case 1833:
    case 1834:
    case 1835:
    case 1836:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
    case 1845:
    case 1846:
    case 1847:
    case 1848:
    case 1849:
    case 1850:
    case 1851:
    case 1852:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1865:
    case 1866:
    case 1867:
    case 1868:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1873:
    case 1874:
    case 1875:
    case 1876:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1881:
    case 1882:
    case 1883:
    case 1884:
    case 1885:
    case 1886:
    case 1887:
    case 1888:
    case 1889:
    case 1890:
    case 1891:
    case 1892:
    case 1893:
    case 1894:
    case 1895:
    case 1896:
    case 1897:
    case 1898:
    case 1899:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 1929:
    case 1930:
    case 1931:
    case 1932:
    case 1933:
    case 1934:
    case 1935:
    case 1936:
    case 1937:
    case 1938:
    case 1939:
    case 1940:
    case 1941:
    case 1942:
    case 1943:
    case 1944:
    case 1945:
    case 1946:
    case 1947:
    case 1948:
    case 1949:
    case 1950:
    case 1951:
    case 1952:
    case 1953:
    case 1954:
    case 1955:
    case 1956:
    case 1957:
    case 1958:
    case 1959:
    case 1960:
    case 1961:
    case 1962:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1967:
    case 1968:
    case 1969:
    case 1970:
    case 1971:
    case 1972:
    case 1973:
    case 1974:
    case 1975:
    case 1976:
    case 1977:
    case 1978:
    case 1979:
    case 1980:
    case 1981:
    case 1982:
    case 1983:
    case 1984:
    case 1985:
    case 1986:
    case 1987:
    case 1988:
    case 1989:
    case 1990:
    case 1991:
    case 1992:
    case 1993:
    case 1994:
    case 1995:
    case 1996:
    case 1997:
    case 1998:
    case 1999:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2086:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2091:
    case 2092:
    case 2093:
    case 2094:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2099:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2131:
    case 2133:
    case 2141:
    case 2143:
    case 2153:
    case 2157:
    case 2158:
    case 2163:
    case 2164:
    case 2165:
    case 2166:
    case 2168:
    case 2333:
    case 2334:
    case 2335:
    case 2336:
    case 2361:
    case 2362:
    case 2363:
    case 2364:
    case 2366:
    case 2367:
    case 2368:
    case 2369:
    case 2370:
    case 2371:
    case 2372:
    case 2373:
    case 2411:
    case 2412:
    case 2413:
    case 2414:
    case 2415:
    case 2416:
    case 2417:
    case 2418:
    case 2421:
    case 2422:
    case 2425:
    case 2426:
    case 2427:
    case 2428:
    case 2429:
    case 2430:
    case 2431:
    case 2432:
    case 2433:
    case 2434:
    case 2435:
    case 2436:
    case 2437:
    case 2438:
    case 2439:
    case 2440:
    case 2441:
    case 2442:
    case 2443:
    case 2447:
    case 2448:
    case 2449:
    case 2450:
    case 2470:
    case 2479:
    case 2480:
    case 2481:
    case 2482:
    case 2483:
    case 2489:
    case 2490:
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2499:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2523:
    case 2524:
    case 2525:
    case 2527:
    case 2577:
    case 2578:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
    case 2618:
    case 2619:
    case 2620:
    case 2621:
    case 2622:
    case 2624:
    case 2625:
    case 2626:
    case 2627:
    case 2629:
    case 2662:
    case 2663:
    case 2664:
    case 2668:
    case 2680:
    case 2681:
    case 2682:
    case 2683:
    case 2684:
    case 2687:
    case 2688:
    case 2689:
    case 2690:
    case 2691:
    case 2692:
    case 2693:
    case 2694:
    case 2695:
    case 2696:
    case 2697:
    case 2698:
    case 2699:
    case 2700:
    case 2701:
    case 2702:
    case 2705:
      return v20;
    case 296:
      v208 = v1279;
      v661 = *(_QWORD *)(v1279 + 32);
      v662 = *(_DWORD *)(v661 + 4);
      v663 = *(_DWORD *)(v661 + 68);
      if (v662 < 0)
      {
        v665 = v1282;
        if ((v662 & 0x7FFFFFFFu) >= *(_DWORD *)(v1274 + 432))
          v664 = 0;
        else
          v664 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (v662 & 0x7FFFFFFF));
      }
      else
      {
        v664 = 0;
        v665 = v1282;
      }
      *(_QWORD *)&v1296 = v664;
      DWORD2(v1296) = 0;
      *(_QWORD *)&v1298 = v664;
      DWORD2(v1298) = 0;
      LODWORD(v1301[0]) = v663;
      LODWORD(v1302) = 0;
      v1313[0] = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v665 + 32))(v665, 184, &v1298, 1, v1301, 1, 0);
      v1313[1] = v927;
      LODWORD(v1313[2]) = 1;
      v928 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v665 + 32))(v665, 218, &v1296, 1, v1313, 1, 0);
      LODWORD(v1301[0]) = v662;
      LODWORD(v1301[1]) = 1;
      v1313[0] = v928;
      v1313[1] = v929;
      LODWORD(v1313[2]) = 1;
      LODWORD(v1314) = v663;
      LODWORD(v1315) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v665 + 32))(v665, 185, v1301, 1, v1313, 2, 0);
      v212 = *(_QWORD *)(v1279 + 24);
      v213 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v213 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v213 = v1279;
          do
            v213 = *(_QWORD *)(v213 + 8);
          while ((*(_WORD *)(v213 + 44) & 8) != 0);
        }
      }
      goto LABEL_1296;
    case 1269:
    case 2107:
    case 2108:
    case 2132:
    case 2139:
    case 2145:
    case 2146:
    case 2147:
    case 2150:
    case 2151:
    case 2152:
    case 2154:
    case 2155:
    case 2156:
    case 2167:
    case 2169:
    case 2170:
    case 2173:
    case 2174:
    case 2175:
    case 2176:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2365:
    case 2408:
    case 2409:
    case 2410:
    case 2423:
    case 2444:
    case 2484:
    case 2485:
    case 2486:
    case 2491:
    case 2586:
    case 2587:
    case 2665:
    case 2666:
    case 2667:
    case 2669:
    case 2670:
    case 2671:
    case 2672:
    case 2673:
    case 2674:
    case 2675:
    case 2676:
    case 2677:
    case 2678:
    case 2679:
      goto LABEL_321;
    case 1281:
    case 1822:
      v277 = v1274;
      v194 = v1279;
      v278 = *(_QWORD *)(v1279 + 32);
      v279 = *(unsigned int *)(v278 + 68);
      v280 = sub_1C493DF74(*(_DWORD *)(v278 + 68), v1274, 0);
      v281 = (uint64_t)v1282;
      if (!HIDWORD(v280))
      {
        if ((_DWORD)v18 != 1281)
          return 0;
        if ((v279 & 0x80000000) != 0)
          v282 = (uint64_t *)(*(_QWORD *)(v1274 + 24) + 16 * (v279 & 0x7FFFFFFF) + 8);
        else
          v282 = (uint64_t *)(*(_QWORD *)(v1274 + 272) + 8 * v279);
        v893 = *v282;
        if (v893)
        {
          if (((*(_BYTE *)(v893 + 3) & 1) != 0
             || (v893 = *(_QWORD *)(v893 + 24)) != 0 && (*(_BYTE *)(v893 + 3) & 1) != 0)
            && (v1200 = *(_QWORD *)(v893 + 8)) != 0
            && **(_WORD **)(v1200 + 16) == 81)
          {
            v194 = v1279;
            v281 = (uint64_t)v1282;
            v277 = v1274;
            if (*(_DWORD *)(v1200 + 40) == 2)
              LODWORD(v279) = *(_DWORD *)(*(_QWORD *)(v1200 + 32) + 36);
          }
          else
          {
            v194 = v1279;
            v281 = (uint64_t)v1282;
            v277 = v1274;
          }
        }
        LODWORD(v280) = sub_1C554C050(v279, v277);
        if (!v894)
          return 0;
      }
      v895 = *(_DWORD *)(*(_QWORD *)(v194 + 32) + 100);
      v1301[0] = (void *)513;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = v895;
      LODWORD(v1313[2]) = 0;
      *(_QWORD *)&v1296 = 513;
      DWORD2(v1296) = 0;
      *(_QWORD *)&v1314 = sub_1C5544694(v281, (unint64_t *)&v1296, v280);
      *((_QWORD *)&v1314 + 1) = v896;
      LODWORD(v1315) = 1;
      v897 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v281 + 32))(v281, 45, v1301, 1, v1313, 2, 0);
      LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v194 + 32) + 4);
      LODWORD(v1301[1]) = 1;
      v1313[0] = v897;
      v1313[1] = v898;
      LODWORD(v1313[2]) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v281 + 32))(v281, 81, v1301, 1, v1313, 1, 0);
      v197 = *(_QWORD *)(v194 + 24);
      v198 = v194;
      if ((*(_BYTE *)v194 & 4) == 0)
      {
        v198 = v194;
        if ((*(_WORD *)(v194 + 44) & 8) != 0)
        {
          v198 = v194;
          do
            v198 = *(_QWORD *)(v198 + 8);
          while ((*(_WORD *)(v198 + 44) & 8) != 0);
        }
      }
      goto LABEL_872;
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
    case 1293:
    case 1294:
    case 1295:
    case 1296:
    case 1297:
    case 1298:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1315:
    case 1316:
    case 1317:
    case 1318:
    case 1319:
    case 1320:
    case 1321:
    case 1322:
    case 1323:
    case 1324:
    case 1325:
    case 1326:
    case 1327:
    case 1328:
    case 1329:
    case 1330:
    case 1331:
    case 1332:
    case 1333:
    case 1334:
    case 1335:
    case 1336:
    case 1337:
    case 1338:
    case 1339:
    case 1340:
    case 1341:
    case 1342:
    case 1343:
    case 1344:
    case 1345:
    case 1346:
    case 1347:
    case 1348:
    case 1349:
    case 1350:
    case 1351:
    case 1352:
    case 1353:
    case 1354:
    case 1355:
    case 1356:
    case 1357:
    case 1358:
    case 1359:
    case 1360:
    case 1361:
    case 1362:
    case 1363:
    case 1364:
    case 1365:
    case 1366:
    case 1367:
    case 1368:
    case 1369:
    case 1370:
    case 1371:
    case 1372:
    case 1373:
    case 1374:
    case 1375:
    case 1376:
    case 1377:
    case 1378:
    case 1379:
    case 1380:
    case 1381:
    case 1382:
    case 1383:
    case 1384:
    case 1385:
    case 1386:
    case 1387:
    case 1388:
    case 1389:
    case 1390:
    case 1391:
    case 1392:
    case 1393:
    case 1394:
    case 1395:
    case 1396:
    case 1397:
    case 1398:
    case 1399:
    case 1400:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1409:
    case 1410:
    case 1411:
    case 1412:
    case 1413:
    case 1414:
    case 1415:
    case 1416:
    case 1417:
    case 1418:
    case 1419:
    case 1420:
    case 1421:
    case 1422:
    case 1423:
    case 1424:
    case 1425:
    case 1426:
    case 1427:
    case 1428:
    case 1429:
    case 1430:
    case 1431:
    case 1432:
    case 1433:
    case 1434:
    case 1435:
    case 1436:
    case 1437:
    case 1438:
    case 1439:
    case 1440:
    case 1441:
    case 1442:
    case 1443:
    case 1444:
    case 1445:
    case 1446:
    case 1447:
    case 1448:
    case 1449:
    case 1450:
    case 1451:
    case 1452:
    case 1453:
    case 1454:
    case 1455:
    case 1456:
    case 1457:
    case 1458:
    case 1459:
    case 1460:
    case 1461:
    case 1462:
    case 1463:
    case 1464:
    case 1465:
    case 1466:
    case 1467:
    case 1468:
    case 1469:
    case 1470:
    case 1471:
    case 1472:
    case 1473:
    case 1474:
    case 1475:
    case 1476:
    case 1477:
    case 1478:
    case 1479:
    case 1480:
    case 1481:
    case 1482:
    case 1483:
    case 1484:
    case 1485:
    case 1486:
    case 1487:
    case 1488:
    case 1489:
    case 1490:
    case 1491:
    case 1492:
    case 1493:
    case 1494:
    case 1495:
    case 1496:
    case 1497:
    case 1498:
    case 1499:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1517:
    case 1518:
    case 1519:
    case 1520:
    case 1521:
    case 1522:
    case 1523:
    case 1524:
    case 1525:
    case 1526:
    case 1527:
    case 1528:
    case 1529:
    case 1530:
    case 1531:
    case 1532:
    case 1533:
    case 1534:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1540:
    case 1541:
    case 1542:
    case 1543:
    case 1544:
    case 1545:
    case 1546:
    case 1547:
    case 1548:
    case 1549:
    case 1550:
    case 1551:
    case 1552:
    case 1553:
    case 1554:
    case 1555:
    case 1556:
    case 1557:
    case 1558:
    case 1559:
    case 1560:
    case 1561:
    case 1562:
    case 1563:
    case 1564:
    case 1565:
    case 1566:
    case 1567:
    case 1568:
    case 1569:
    case 1570:
    case 1571:
    case 1572:
    case 1573:
    case 1574:
    case 1575:
    case 1576:
    case 1577:
    case 1578:
    case 1579:
    case 1580:
    case 1581:
    case 1582:
    case 1583:
    case 1584:
    case 1585:
    case 1586:
    case 1587:
    case 1588:
    case 1589:
    case 1590:
    case 1591:
    case 1592:
    case 1593:
    case 1594:
    case 1595:
    case 1596:
    case 1597:
    case 1598:
    case 1599:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
    case 1608:
    case 1609:
    case 1610:
    case 1611:
    case 1612:
    case 1613:
    case 1614:
    case 1615:
    case 1616:
    case 1617:
    case 1618:
    case 1619:
    case 1620:
    case 1621:
    case 1622:
    case 1623:
    case 1624:
    case 1625:
    case 1626:
    case 1627:
    case 1628:
    case 1629:
    case 1630:
    case 1631:
    case 1632:
    case 1633:
    case 1634:
    case 1635:
    case 1636:
    case 1637:
    case 1638:
    case 1639:
    case 1640:
    case 1641:
    case 1642:
    case 1643:
    case 1644:
    case 1645:
    case 1646:
    case 1647:
    case 1648:
    case 1649:
    case 1650:
    case 1651:
    case 1652:
    case 1653:
    case 1654:
    case 1655:
    case 1656:
    case 1657:
    case 1658:
    case 1659:
    case 1660:
    case 1661:
    case 1662:
    case 1663:
    case 1664:
    case 1665:
    case 1666:
    case 1667:
    case 1668:
    case 1669:
    case 1670:
    case 1671:
    case 1672:
    case 1673:
    case 1674:
    case 1675:
    case 1676:
    case 1677:
    case 1678:
    case 1679:
    case 1680:
    case 1681:
      v22 = v1274;
      v21 = v1279;
      v23 = v1282;
      v24 = (int)v18;
      v25 = 3;
      return sub_1C493DB38(v21, v22, v23, v24, v25, (uint64_t)v1266);
    case 1682:
    case 1683:
    case 1684:
    case 1685:
    case 1686:
    case 1687:
    case 1688:
    case 1689:
    case 1690:
    case 1691:
    case 1692:
    case 1693:
    case 1694:
    case 1695:
    case 1696:
    case 1697:
    case 1698:
    case 1699:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1716:
    case 1717:
    case 1718:
    case 1719:
    case 1720:
    case 1721:
    case 1722:
    case 1723:
    case 1724:
    case 1725:
    case 1726:
    case 1727:
    case 1728:
    case 1729:
    case 1730:
    case 1731:
    case 1732:
    case 1733:
    case 1734:
    case 1735:
    case 1736:
    case 1737:
    case 1738:
    case 1739:
    case 1740:
    case 1741:
    case 1742:
    case 1743:
    case 1744:
    case 1745:
    case 1746:
    case 1747:
    case 1748:
    case 1749:
    case 1750:
    case 1751:
    case 1752:
    case 1753:
    case 1754:
    case 1755:
    case 1756:
    case 1757:
    case 1758:
    case 1759:
    case 1760:
    case 1761:
    case 1762:
    case 1763:
    case 1764:
    case 1765:
    case 1766:
    case 1767:
    case 1768:
    case 1769:
    case 1770:
    case 1771:
    case 1772:
    case 1773:
    case 1774:
    case 1775:
    case 1776:
    case 1777:
    case 1778:
    case 1779:
    case 1780:
    case 1781:
    case 1782:
    case 1783:
    case 1784:
    case 1785:
    case 1786:
    case 1787:
    case 1788:
    case 1789:
    case 1790:
    case 1791:
    case 1792:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1813:
    case 1814:
    case 1815:
    case 1816:
    case 1817:
    case 1818:
    case 1819:
    case 1820:
    case 1821:
      v22 = v1274;
      v21 = v1279;
      v23 = v1282;
      v24 = (int)v18;
      v25 = 4;
      return sub_1C493DB38(v21, v22, v23, v24, v25, (uint64_t)v1266);
    case 1823:
      if (*(_BYTE *)(*((_QWORD *)v1258 + 7) + 62) || *(_BYTE *)(v10 + 1709))
      {
        v28 = v1279;
        v668 = *(unsigned int *)(*(_QWORD *)(v1279 + 32) + 36);
        v670 = sub_1C55437B8(v1282, 0x100u);
        v671 = (unint64_t *)v669;
        v672 = (unint64_t *)v1282[6];
        v673 = *(_QWORD ***)(v1282[5] + 40);
        *(_QWORD *)(v669 + 24) = v673;
        v674 = v673[4];
        v675 = *(unsigned int *)(v669 + 40);
        if ((_DWORD)v675)
        {
          v1171 = *(_QWORD *)(v669 + 32);
          v1172 = v674[5];
          v1173 = 32 * v675;
          v28 = v1279;
          do
          {
            if (!*(_BYTE *)v1171)
            {
              v1174 = *(unsigned int *)(v1171 + 4);
              if ((int)v1174 >= 0)
                v1175 = (uint64_t *)(*(_QWORD *)(v1172 + 272) + 8 * v1174);
              else
                v1175 = (uint64_t *)(*(_QWORD *)(v1172 + 24) + 16 * (v1174 & 0x7FFFFFFF) + 8);
              v1176 = *v1175;
              if (*v1175)
              {
                v1177 = *(_QWORD *)(v1176 + 16);
                *(_QWORD *)(v1176 + 16) = v1171;
                *(_QWORD *)(v1171 + 16) = v1177;
                if ((*(_BYTE *)(v1171 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1171 + 24) = v1176;
                }
                else
                {
                  *(_QWORD *)(v1171 + 24) = 0;
                  v1175 = (uint64_t *)(v1177 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1171 + 16) = v1171;
                *(_QWORD *)(v1171 + 24) = 0;
              }
              *v1175 = v1171;
            }
            v1171 += 32;
            v1173 -= 32;
          }
          while (v1173);
        }
        v676 = v674[91];
        if (v676)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v676 + 24))(v676, v669);
        v677 = *v672 & 0xFFFFFFFFFFFFFFF8;
        *v671 = v677 | *v671 & 7;
        v671[1] = (unint64_t)v672;
        *(_QWORD *)(v677 + 8) = v671;
        *v672 = *v672 & 7 | (unint64_t)v671;
        v678 = (_QWORD ***)v1282[7];
        if (v678)
        {
          ((void (*)(_QWORD ***, unint64_t *))(*v678)[3])(v678, v671);
          if ((v668 & 0x80000000) == 0)
            goto LABEL_618;
        }
        else if ((v668 & 0x80000000) == 0)
        {
LABEL_618:
          v679 = (uint64_t *)(*(_QWORD *)(v1274 + 272) + 8 * v668);
LABEL_1099:
          v1179 = *v679;
          if ((*(_BYTE *)(v1179 + 3) & 1) == 0)
            v1179 = *(_QWORD *)(v1179 + 24);
          v1180 = *(_QWORD *)(v1179 + 8);
          if (**(_WORD **)(v1180 + 16) == 120)
          {
            v1181 = *(_QWORD *)(*(_QWORD *)(v1180 + 32) + 48);
            v1182 = (unsigned int *)(v1181 + 24);
            if (*(_DWORD *)(v1181 + 32) >= 0x41u)
              v1182 = *(unsigned int **)v1182;
            v1183 = (void *)*v1182;
            LODWORD(v1313[0]) = 1;
            v1313[1] = 0;
            v1313[2] = v1183;
          }
          else
          {
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v668;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
          }
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v671, v670, (const llvm::MachineOperand *)v1313);
          if (*(_BYTE *)(v10 + 1709))
            v1184 = 2;
          else
            v1184 = 66;
          v1313[1] = 0;
          v1313[2] = 0;
          *(_QWORD *)&v1314 = 0;
          HIDWORD(v1313[0]) = v1184;
          LODWORD(v1313[0]) = 50331648;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v671, v670, (const llvm::MachineOperand *)v1313);
          v1313[1] = 0;
          v1313[2] = 0;
          *(_QWORD *)&v1314 = 0;
          HIDWORD(v1313[0]) = v1184;
          LODWORD(v1313[0]) = 0x2000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v671, v670, (const llvm::MachineOperand *)v1313);
          v555 = *(_QWORD *)(v28 + 24);
          v556 = v28;
          if ((*(_BYTE *)v28 & 4) == 0)
          {
            v556 = v28;
            if ((*(_WORD *)(v28 + 44) & 8) != 0)
            {
              v556 = v28;
              do
                v556 = *(_QWORD *)(v556 + 8);
              while ((*(_WORD *)(v556 + 44) & 8) != 0);
            }
          }
          goto LABEL_515;
        }
        v679 = (uint64_t *)(*(_QWORD *)(v1274 + 24) + 16 * (v668 & 0x7FFFFFFF) + 8);
        goto LABEL_1099;
      }
      v70 = v1279;
      v199 = *(_QWORD *)(v1279 + 24);
      v200 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v200 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v200 = v1279;
          do
            v200 = *(_QWORD *)(v200 + 8);
          while ((*(_WORD *)(v200 + 44) & 8) != 0);
        }
      }
LABEL_286:
      v68 = *(_QWORD *)(v200 + 8);
      v69 = v199 + 40;
      goto LABEL_516;
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2127:
    case 2128:
    case 2129:
    case 2130:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2313:
    case 2314:
    case 2315:
    case 2316:
    case 2317:
    case 2318:
    case 2319:
    case 2320:
    case 2321:
    case 2322:
    case 2323:
    case 2324:
    case 2325:
    case 2326:
    case 2327:
    case 2328:
    case 2329:
    case 2330:
    case 2331:
    case 2332:
    case 2337:
    case 2338:
    case 2339:
    case 2340:
    case 2341:
    case 2342:
    case 2343:
    case 2344:
    case 2345:
    case 2346:
    case 2347:
    case 2348:
    case 2349:
    case 2350:
    case 2351:
    case 2352:
    case 2353:
    case 2354:
    case 2355:
    case 2356:
    case 2357:
    case 2358:
    case 2359:
    case 2360:
    case 2454:
    case 2455:
    case 2456:
    case 2457:
    case 2458:
    case 2459:
    case 2460:
    case 2461:
    case 2462:
    case 2463:
    case 2464:
    case 2465:
    case 2466:
    case 2467:
    case 2468:
    case 2469:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
      v1234 = (int)v18;
      if ((int)v18 > 2527)
        __asm { BR              X10 }
      v48 = 0;
      v49 = 0;
      v50 = 286;
      v51 = 1;
      v52 = 1;
      switch((int)v18)
      {
        case 2454:
        case 2455:
          goto LABEL_45;
        case 2456:
          v49 = 0;
          v48 = 0;
          v50 = 275;
          goto LABEL_982;
        case 2457:
          v49 = 0;
          v48 = 0;
          v50 = 272;
          goto LABEL_982;
        case 2458:
          v48 = 0;
          v50 = 276;
          goto LABEL_985;
        case 2459:
          v48 = 0;
          v50 = 273;
          goto LABEL_985;
        case 2460:
          v49 = 0;
          v48 = 0;
          v50 = 277;
          goto LABEL_1161;
        case 2461:
          v49 = 0;
          v48 = 0;
          v50 = 274;
          goto LABEL_1161;
        case 2462:
        case 2463:
          v49 = 0;
          v48 = 0;
          v52 = 0;
          v50 = 284;
LABEL_44:
          v51 = 1;
          goto LABEL_45;
        case 2464:
          v49 = 0;
          v48 = 0;
          v52 = 0;
          v50 = 281;
          goto LABEL_982;
        case 2465:
          v49 = 0;
          v48 = 0;
          v52 = 0;
          v50 = 278;
LABEL_982:
          v51 = 2;
          goto LABEL_45;
        case 2466:
          v48 = 0;
          v52 = 0;
          v50 = 282;
          goto LABEL_985;
        case 2467:
          v48 = 0;
          v52 = 0;
          v50 = 279;
LABEL_985:
          v49 = 1;
LABEL_986:
          v51 = 3;
          goto LABEL_45;
        case 2468:
          v49 = 0;
          v48 = 0;
          v52 = 0;
          v50 = 283;
          goto LABEL_1161;
        case 2469:
          v49 = 0;
          v48 = 0;
          v52 = 0;
          v50 = 280;
          goto LABEL_1161;
        default:
          switch((int)v18)
          {
            case 2115:
            case 2116:
              v49 = 0;
              v51 = 1;
              goto LABEL_989;
            case 2117:
              v49 = 0;
              v50 = 275;
              goto LABEL_988;
            case 2118:
              v49 = 0;
              v50 = 272;
              goto LABEL_988;
            case 2119:
              v50 = 276;
              goto LABEL_1089;
            case 2120:
              v50 = 273;
              goto LABEL_1089;
            case 2121:
              v49 = 0;
              v50 = 277;
              goto LABEL_1210;
            case 2122:
              v49 = 0;
              v50 = 274;
              goto LABEL_1210;
            case 2123:
            case 2124:
              v49 = 0;
              v52 = 0;
              v50 = 284;
              v48 = 2;
              goto LABEL_44;
            case 2125:
              v49 = 0;
              v52 = 0;
              v50 = 281;
              goto LABEL_988;
            case 2126:
              v49 = 0;
              v52 = 0;
              v50 = 278;
LABEL_988:
              v51 = 2;
LABEL_989:
              v48 = 2;
              goto LABEL_45;
            case 2127:
              v52 = 0;
              v50 = 282;
              goto LABEL_1089;
            case 2128:
              v52 = 0;
              v50 = 279;
LABEL_1089:
              v49 = 1;
              v48 = 2;
              goto LABEL_986;
            case 2129:
              v49 = 0;
              v52 = 0;
              v50 = 283;
              goto LABEL_1210;
            case 2130:
              v49 = 0;
              v52 = 0;
              v50 = 280;
LABEL_1210:
              v48 = 2;
              break;
            default:
              __asm { BR              X10 }
              return result;
          }
LABEL_1161:
          v51 = 4;
LABEL_45:
          v54 = sub_1C4940130(*(_DWORD *)(*(_QWORD *)(v1279 + 32) + 32 * (v6 + 1) + 4), v1274, v1282);
          GenericVirtualRegister = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
          if (GenericVirtualRegister < 0 && (GenericVirtualRegister & 0x7FFFFFFFu) < *(_DWORD *)(v1274 + 432))
            v56 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (GenericVirtualRegister & 0x7FFFFFFF));
          else
            v56 = 0;
          if (v49)
          {
            v57 = 0x800000000000000;
            if ((v56 & 2) == 0)
              v57 = 0x8000000000000;
            if ((v57 & v56) != 0)
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v53);
            if ((v56 & 0x7FFF8) == 0x20)
            {
              if ((v56 & 1) != 0)
              {
                v58 = (v56 >> 3);
              }
              else if ((v56 & 4) != 0)
              {
                if ((v56 & 2) != 0)
                  v58 = (unsigned __int16)(v56 >> 19);
                else
                  v58 = (v56 >> 19);
              }
              else
              {
                v58 = (unsigned __int16)(v56 >> 3);
              }
              GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, (v58 << 19) | 0x1C, "", 0);
            }
          }
          v1259 = v51;
          v1267 = v49;
          v121 = sub_1C55437B8(v1282, v50);
          v122 = v120;
          v123 = (uint64_t *)v1282[6];
          v124 = *(_QWORD ***)(v1282[5] + 40);
          *(_QWORD *)(v120 + 24) = v124;
          v125 = v124[4];
          v126 = *(unsigned int *)(v120 + 40);
          if ((_DWORD)v126)
          {
            v179 = *(_QWORD *)(v120 + 32);
            v180 = v125[5];
            v181 = 32 * v126;
            do
            {
              if (!*(_BYTE *)v179)
              {
                v182 = *(unsigned int *)(v179 + 4);
                if ((int)v182 >= 0)
                  v183 = (uint64_t *)(*(_QWORD *)(v180 + 272) + 8 * v182);
                else
                  v183 = (uint64_t *)(*(_QWORD *)(v180 + 24) + 16 * (v182 & 0x7FFFFFFF) + 8);
                v184 = *v183;
                if (*v183)
                {
                  v185 = *(_QWORD *)(v184 + 16);
                  *(_QWORD *)(v184 + 16) = v179;
                  *(_QWORD *)(v179 + 16) = v185;
                  if ((*(_BYTE *)(v179 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v179 + 24) = v184;
                  }
                  else
                  {
                    *(_QWORD *)(v179 + 24) = 0;
                    v183 = (uint64_t *)(v185 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v179 + 16) = v179;
                  *(_QWORD *)(v179 + 24) = 0;
                }
                *v183 = v179;
              }
              v179 += 32;
              v181 -= 32;
            }
            while (v181);
          }
          v127 = v125[91];
          if (v127)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 24))(v127, v120);
          v128 = (v6 + 2);
          v129 = *v123 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v122 = v129 | *(_QWORD *)v122 & 7;
          *(_QWORD *)(v122 + 8) = v123;
          *(_QWORD *)(v129 + 8) = v122;
          *v123 = *v123 & 7 | v122;
          v130 = (_QWORD ***)v1282[7];
          if (v130)
            ((void (*)(_QWORD ***, uint64_t))(*v130)[3])(v130, v122);
          v1313[1] = 0;
          v1313[2] = 0;
          *(_QWORD *)&v1314 = 0;
          HIDWORD(v1313[0]) = GenericVirtualRegister;
          LODWORD(v1313[0]) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1313);
          LODWORD(v1313[0]) = 1;
          v1313[1] = 0;
          v1313[2] = (void *)v48;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1313);
          v1313[1] = 0;
          v1313[2] = 0;
          HIDWORD(v1313[0]) = v54;
          LODWORD(v1313[0]) = 0;
          *(_QWORD *)&v1314 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1313);
          if ((v52 & 1) != 0)
            goto LABEL_168;
          v132 = sub_1C493DF74(*(_DWORD *)(*(_QWORD *)(v1279 + 32) + 32 * v128 + 4), v1274, 256);
          if (!HIDWORD(v132))
            return 0;
          LODWORD(v128) = v6 + 3;
          LODWORD(v1313[0]) = 1;
          v1313[1] = 0;
          v1313[2] = (void *)v132;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1313);
LABEL_168:
          if (*(_DWORD *)(v1279 + 40) >= (v128 + 1))
          {
            if ((v1234 - 2325) <= 0x23 && ((1 << (v1234 - 21)) & 0xFF00000FFLL) != 0
              || (v1234 - 2528) < 0x10)
            {
              v138 = (int *)(*(_QWORD *)(v1279 + 32) + 32 * v128);
              sub_1C554C050(v138[1], v1274);
              LODWORD(v1313[0]) = 1;
              v1313[1] = 0;
              v1313[2] = (void *)1;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1313);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v138);
            }
          }
          else
          {
            LODWORD(v1313[0]) = 1;
            v1313[1] = 0;
            v1313[2] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1313);
            v133 = *(_QWORD *)(v122 + 24);
            v1316 = 0u;
            v1315 = 0u;
            v1314 = 0u;
            *(_OWORD *)&v1313[1] = 0u;
            v134 = *(_QWORD *)(v133 + 32);
            v1313[0] = &off_1E816EC08;
            v1313[1] = (void *)v134;
            *(_QWORD *)&v1314 = *(_QWORD *)(v134 + 40);
            v1313[2] = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v134 + 16) + 104))(*(_QWORD *)(v134 + 16));
            v1301[0] = 0;
            if (*((_QWORD *)&v1314 + 1))
            {
              llvm::MetadataTracking::untrack((uint64_t)&v1314 + 8, *((unsigned __int8 **)&v1314 + 1));
              *((void **)&v1314 + 1) = v1301[0];
            }
            else
            {
              *((_QWORD *)&v1314 + 1) = 0;
            }
            *((_QWORD *)&v1315 + 1) = 0;
            *(_QWORD *)&v1316 = 0;
            *(_QWORD *)&v1315 = *(_QWORD *)(v122 + 24);
            *((_QWORD *)&v1315 + 1) = v122;
            if ((__int128 *)(v122 + 56) != (__int128 *)((char *)&v1314 + 8))
            {
              v135 = *(unsigned __int8 **)(v122 + 56);
              *((_QWORD *)&v1314 + 1) = v135;
              if (v135)
                llvm::MetadataTracking::track((uint64_t)&v1314 + 8, v135, 2);
            }
            v1301[0] = (void *)v56;
            LODWORD(v1301[1]) = 0;
            (*((void (**)(void **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))v1313[0] + 4))(v1313, 68, v1301, 1, 0, 0, 0);
            v137 = *(_DWORD *)(*(_QWORD *)(v136 + 32) + 4);
            v1301[1] = 0;
            v1302 = 0uLL;
            HIDWORD(v1301[0]) = v137;
            LODWORD(v1301[0]) = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v121, (const llvm::MachineOperand *)v1301);
            v1313[0] = &off_1E816EC08;
            v131 = (const char *)*((_QWORD *)&v1314 + 1);
            if (*((_QWORD *)&v1314 + 1))
              llvm::MetadataTracking::untrack((uint64_t)&v1314 + 8, *((unsigned __int8 **)&v1314 + 1));
          }
          if (!v1267)
            goto LABEL_284;
          v139 = 0x800000000000000;
          if ((v56 & 2) == 0)
            v139 = 0x8000000000000;
          if ((v139 & v56) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v131);
          if ((v56 & 0x7FFF8) != 0x20)
            goto LABEL_284;
          *(_QWORD *)&v1296 = v1297;
          *((_QWORD *)&v1296 + 1) = 0x400000000;
          if ((v56 & 2) != 0)
          {
            v1191 = 35;
            v1192 = 19;
            if ((v56 & 4) == 0)
              v1191 = 19;
            v1193 = v56 >> v1191;
            if ((v56 & 4) == 0)
              v1192 = 3;
            if ((v56 & 1) != 0)
              v1192 = 3;
            v141 = (8 * (unsigned __int16)(v56 >> v1192)) & 0xFFFFF8000007FFFFLL | ((v1193 & 0xFFFFFF) << 19) | 2;
          }
          else
          {
            v140 = 3;
            if ((v56 & 1) == 0)
              v140 = 19;
            v141 = v56 & 0x8000000000000000 | (8 * (v56 >> v140)) | 1;
          }
          v1301[0] = &v1302;
          v1301[1] = (void *)0x400000000;
          sub_1C495A254((unsigned int *)v1301, v1259, v141);
          v142 = (void **)v1301[0];
          v143 = LODWORD(v1301[1]);
          LODWORD(v1298) = GenericVirtualRegister;
          LODWORD(v1299) = 0;
          v1313[0] = &v1313[2];
          v1313[1] = (void *)0x800000000;
          if (LODWORD(v1301[1]) >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1313, (uint64_t)&v1313[2], LODWORD(v1301[1]), 16);
            v144 = LODWORD(v1313[1]);
            v145 = (void **)v1313[0];
          }
          else
          {
            if (!LODWORD(v1301[1]))
            {
              v149 = 0;
              v150 = &v1313[2];
              goto LABEL_216;
            }
            v144 = 0;
            v145 = &v1313[2];
          }
          v146 = 8 * v143;
          v147 = &v145[2 * v144];
          do
          {
            v148 = *v142++;
            *v147 = v148;
            *((_DWORD *)v147 + 2) = 0;
            v147 += 2;
            v146 -= 8;
          }
          while (v146);
          v149 = (int)v1313[1];
          v150 = (void **)v1313[0];
LABEL_216:
          LODWORD(v1313[1]) = v149 + v143;
          (*(void (**)(uint64_t *, uint64_t, void **))(*v1282 + 32))(v1282, 74, v150);
          v161 = v160;
          if (v1313[0] != &v1313[2])
            free(v1313[0]);
          v162 = 0;
          v163 = DWORD2(v1296);
          do
          {
            v164 = *(_DWORD *)(*(_QWORD *)(v161 + 32) + v162 + 4);
            if (v163 >= HIDWORD(v1296))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1296, (uint64_t)v1297, v163 + 1, 4);
              v163 = DWORD2(v1296);
            }
            *(_DWORD *)(v1296 + 4 * v163) = v164;
            v163 = ++DWORD2(v1296);
            v162 += 32;
          }
          while (32 * v1259 != v162);
          if ((v56 & 2) != 0)
          {
            v1194 = 35;
            v1195 = 19;
            if ((v56 & 4) == 0)
              v1194 = 19;
            v1196 = v56 >> v1194;
            if ((v56 & 4) == 0)
              v1195 = 3;
            if ((v56 & 1) != 0)
              v1195 = 3;
            v166 = (void *)((8 * (unsigned __int16)(v56 >> v1195)) & 0xFFFFF8000007FFFFLL | ((v1196 & 0xFFFFFF) << 19) | 2);
          }
          else
          {
            v165 = 3;
            if ((v56 & 1) == 0)
              v165 = 19;
            v166 = (void *)(v56 & 0x8000000000000000 | (8 * (v56 >> v165)) | 1);
          }
          v1313[0] = v166;
          LODWORD(v1313[1]) = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v1282 + 32))(v1282, 68, v1313, 1, 0, 0, 0);
          v168 = *(_DWORD *)(*(_QWORD *)(v167 + 32) + 4);
          v169 = DWORD2(v1296);
          if (DWORD2(v1296) >= HIDWORD(v1296))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1296, (uint64_t)v1297, DWORD2(v1296) + 1, 4);
            v169 = DWORD2(v1296);
          }
          *(_DWORD *)(v1296 + 4 * v169) = v168;
          v170 = (DWORD2(v1296) + 1);
          DWORD2(v1296) = v170;
          LODWORD(v1298) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
          DWORD2(v1298) = 1;
          v171 = (int *)v1296;
          v1313[0] = &v1313[2];
          v1313[1] = (void *)0x800000000;
          if (v170 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1313, (uint64_t)&v1313[2], v170, 24);
            v172 = LODWORD(v1313[1]);
            v173 = (void **)v1313[0];
          }
          else
          {
            if (!(_DWORD)v170)
            {
              v178 = 0;
              v173 = &v1313[2];
              goto LABEL_278;
            }
            v172 = 0;
            v173 = &v1313[2];
          }
          v174 = 3 * v172;
          v175 = 4 * v170;
          do
          {
            v176 = *v171++;
            v177 = &v173[v174];
            *v177 = v176;
            v177[4] = 0;
            v174 += 3;
            v175 -= 4;
          }
          while (v175);
          v178 = (int)v1313[1];
LABEL_278:
          LODWORD(v1313[1]) = v178 + v170;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **))(*v1282 + 32))(v1282, 77, &v1298, 1, v173);
          if (v1313[0] != &v1313[2])
            free(v1313[0]);
          if (v1301[0] != &v1302)
            free(v1301[0]);
          if ((_OWORD *)v1296 != v1297)
            free((void *)v1296);
LABEL_284:
          v70 = v1279;
          v199 = *(_QWORD *)(v1279 + 24);
          v200 = v1279;
          if ((*(_BYTE *)v1279 & 4) == 0)
          {
            v200 = v1279;
            if ((*(_WORD *)(v1279 + 44) & 8) != 0)
            {
              v200 = v1279;
              do
                v200 = *(_QWORD *)(v200 + 8);
              while ((*(_WORD *)(v200 + 44) & 8) != 0);
            }
          }
          break;
      }
      goto LABEL_286;
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
      v1282[5] = *(_QWORD *)(v1279 + 24);
      v1282[6] = v1279;
      if (v16 != v17)
      {
        if (*v17)
          llvm::MetadataTracking::untrack((uint64_t)v17, *v17);
        v186 = *v16;
        *v17 = *v16;
        if (v186)
          llvm::MetadataTracking::track((uint64_t)v17, v186, 2);
      }
      v187 = *(_QWORD *)(*(_QWORD *)(v1279 + 24) + 32);
      v188 = *(unsigned int *)(v1279 + 40);
      if (!(_DWORD)v188)
        goto LABEL_257;
      v189 = 0;
      v190 = *(unsigned __int8 **)(v1279 + 32);
      do
      {
        v191 = *v190;
        v190 += 32;
        if (v191 == 17)
          goto LABEL_258;
        ++v189;
      }
      while (v188 != v189);
LABEL_257:
      LODWORD(v189) = -1;
LABEL_258:
      v192 = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 32 * v189 + 16);
      if (!*(_QWORD *)(v187 + 48))
        *(_QWORD *)(v187 + 48) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v187 + 8) + 216))(*(_QWORD *)(v187 + 8), v187 + 128, v187);
      __asm { BR              X10 }
      return result;
    case 2140:
    case 2544:
    case 2706:
    case 2707:
    case 2708:
      v193 = sub_1C493E034((int)v18);
      v194 = v1279;
      LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      LODWORD(v1301[1]) = 1;
      v195 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v1282 + 32))(v1282, 319, v1301, 1, 0, 0, 0);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)v193;
      llvm::MachineInstr::addOperand(v196, v195, (const llvm::MachineOperand *)v1313);
      v197 = *(_QWORD *)(v1279 + 24);
      v198 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v198 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v198 = v1279;
          do
            v198 = *(_QWORD *)(v198 + 8);
          while ((*(_WORD *)(v198 + 44) & 8) != 0);
        }
      }
      goto LABEL_872;
    case 2142:
    case 2376:
    case 2377:
    case 2378:
    case 2379:
    case 2380:
    case 2381:
    case 2382:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2387:
    case 2388:
    case 2389:
    case 2390:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2395:
    case 2396:
    case 2397:
    case 2398:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2406:
    case 2407:
      return sub_1C4940448(v1279, v1274, v1282);
    case 2144:
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
      return sub_1C4941E84(v1279, (_QWORD *)v1274, v1282);
    case 2148:
    case 2149:
      v362 = *(_QWORD *)(v1279 + 32);
      v363 = *(_DWORD *)(v362 + 36);
      if ((v363 & 0x80000000) == 0 || (v363 & 0x7FFFFFFFu) >= *(_DWORD *)(v1274 + 432))
        return 1;
      v364 = (*(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (v363 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
          && (*(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (v363 & 0x7FFFFFFF)) & 6) == 2;
      v20 = 1;
      if (v364)
      {
        v1301[0] = (void *)513;
        v365 = v362 + 32;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v363;
        LODWORD(v1313[2]) = 0;
        v366 = v1282;
        v367 = (void *)sub_1C5546EF4(v1282, (uint64_t *)v1301, (int *)v1313);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v367;
        v1313[1] = v368;
        LODWORD(v1313[2]) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v366 + 32))(v366, 119, v1301, 1, v1313, 1, 0);
        v370 = v369;
        v371 = v1266;
        (*(void (**)(_QWORD *, uint64_t))(*v1266 + 32))(v1266, v1279);
        llvm::MachineOperand::setReg(v365, *(_DWORD *)(*(_QWORD *)(v370 + 32) + 4));
        (*(void (**)(_QWORD *, uint64_t))(*v371 + 40))(v371, v1279);
        v372 = *(_QWORD *)(v1279 + 32);
        v373 = v372 + 64;
        v1301[0] = (void *)513;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = *(_DWORD *)(v372 + 68);
        LODWORD(v1313[2]) = 0;
        v374 = (void *)sub_1C5546EF4(v1282, (uint64_t *)v1301, (int *)v1313);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v374;
        v1313[1] = v375;
        LODWORD(v1313[2]) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v366 + 32))(v366, 119, v1301, 1, v1313, 1, 0);
        v377 = v376;
        (*(void (**)(_QWORD *, uint64_t))(*v371 + 32))(v371, v1279);
        llvm::MachineOperand::setReg(v373, *(_DWORD *)(*(_QWORD *)(v377 + 32) + 4));
        (*(void (**)(_QWORD *, uint64_t))(*v371 + 40))(v371, v1279);
        return 1;
      }
      return v20;
    case 2159:
    case 2160:
    case 2161:
    case 2162:
      v208 = v1279;
      LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      LODWORD(v1301[1]) = 1;
      v209 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, _QWORD, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v1282 + 32))(v1282, ((_DWORD)v18 - 1896), v1301, 1, 0, 0, 0);
      v211 = v210;
      llvm::MachineInstr::addOperand(v210, v209, (const llvm::MachineOperand *)(*(_QWORD *)(v1279 + 32) + 64));
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)v1313);
      llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)(*(_QWORD *)(v1279 + 32) + 96));
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)v1313);
      llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)(*(_QWORD *)(v1279 + 32) + 128));
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)v1313);
      v212 = *(_QWORD *)(v1279 + 24);
      v213 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v213 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v213 = v1279;
          do
            v213 = *(_QWORD *)(v213 + 8);
          while ((*(_WORD *)(v213 + 44) & 8) != 0);
        }
      }
      goto LABEL_1296;
    case 2171:
    case 2172:
      v1301[0] = &v1302;
      v1301[1] = (void *)0x400000000;
      if ((_DWORD)v18 == 2172)
        v287 = 4;
      else
        v287 = 3;
      v288 = *(_QWORD *)(v1279 + 32);
      v289 = *(_DWORD *)(v288 + 32 * v287 + 4);
      v290 = *(_DWORD *)(v288 + 32 * (v287 + 1) + 4);
      v291 = *(_DWORD *)(v288 + 32 * (v287 + 2) + 4);
      *(_QWORD *)&v1296 = 513;
      DWORD2(v1296) = 0;
      LODWORD(v1313[0]) = v289;
      LODWORD(v1313[2]) = 0;
      v292 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 80, &v1296, 1, v1313, 1, 0);
      v294 = v293;
      *(_QWORD *)&v1296 = v292;
      *((_QWORD *)&v1296 + 1) = v293;
      LODWORD(v1297[0]) = 1;
      v1313[0] = &v1313[2];
      v1313[2] = (void *)257;
      LODWORD(v1314) = 0;
      *((_QWORD *)&v1314 + 1) = 257;
      LODWORD(v1315) = 0;
      v1313[1] = (void *)0x800000002;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, __int128 *, uint64_t, _QWORD))(*v1282 + 32))(v1282, 74, &v1313[2], 2, &v1296, 1, 0);
      v296 = v295;
      if (v1313[0] != &v1313[2])
        free(v1313[0]);
      v297 = *(_DWORD *)(*(_QWORD *)(v296 + 32) + 4);
      *(_QWORD *)&v1298 = 513;
      DWORD2(v1298) = 0;
      v298 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1298, 0xFF00000000);
      *(_QWORD *)&v1296 = 513;
      DWORD2(v1296) = 0;
      v1313[0] = v292;
      v1313[1] = v294;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v298;
      *((_QWORD *)&v1314 + 1) = v299;
      LODWORD(v1315) = 1;
      v300 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 65, &v1296, 1, v1313, 2, 0);
      *(_QWORD *)&v1296 = 513;
      DWORD2(v1296) = 0;
      v1313[0] = v300;
      v1313[1] = v301;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1298 = 513;
      DWORD2(v1298) = 0;
      *(_QWORD *)&v1314 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1298, 32);
      *((_QWORD *)&v1314 + 1) = v302;
      LODWORD(v1315) = 1;
      v303 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 128, &v1296, 1, v1313, 2, 0);
      *(_QWORD *)&v1296 = 129;
      DWORD2(v1296) = 0;
      v1313[0] = v303;
      v1313[1] = v304;
      LODWORD(v1313[2]) = 1;
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 119, &v1296, 1, v1313, 1, 0);
      *(_QWORD *)&v1296 = 257;
      DWORD2(v1296) = 0;
      LODWORD(v1313[0]) = *(_DWORD *)(*(_QWORD *)(v305 + 32) + 4);
      LODWORD(v1313[2]) = 0;
      LODWORD(v1314) = v290;
      LODWORD(v1315) = 0;
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 76, &v1296, 1, v1313, 2, 0);
      *(_QWORD *)&v1296 = 513;
      DWORD2(v1296) = 0;
      LODWORD(v1313[0]) = v297;
      LODWORD(v1313[2]) = 0;
      LODWORD(v1314) = *(_DWORD *)(*(_QWORD *)(v306 + 32) + 4);
      LODWORD(v1315) = 0;
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 76, &v1296, 1, v1313, 2, 0);
      v308 = *(_DWORD *)(*(_QWORD *)(v307 + 32) + 4);
      v309 = v1301[1];
      if (LODWORD(v1301[1]) >= HIDWORD(v1301[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1301, (uint64_t)&v1302, LODWORD(v1301[1]) + 1, 4);
        v309 = v1301[1];
      }
      *((_DWORD *)v1301[0] + v309) = v308;
      v310 = ++LODWORD(v1301[1]);
      if ((_DWORD)v18 == 2172)
      {
        v311 = *(_QWORD *)(v1279 + 32);
        v312 = *(_DWORD *)(v311 + 228);
        v313 = *(_DWORD *)(v311 + 260);
        *(_QWORD *)&v1296 = 513;
        DWORD2(v1296) = 0;
        LODWORD(v1313[0]) = v291;
        LODWORD(v1313[2]) = 0;
        LODWORD(v1314) = v312;
        LODWORD(v1315) = 0;
        (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 76, &v1296, 1, v1313, 2, 0);
        v315 = *(_DWORD *)(*(_QWORD *)(v314 + 32) + 4);
        v316 = v1301[1];
        if (LODWORD(v1301[1]) >= HIDWORD(v1301[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1301, (uint64_t)&v1302, LODWORD(v1301[1]) + 1, 4);
          v316 = v1301[1];
        }
        *((_DWORD *)v1301[0] + v316) = v315;
        v317 = HIDWORD(v1301[1]);
        v310 = ++LODWORD(v1301[1]);
        v291 = v313;
      }
      else
      {
        v317 = HIDWORD(v1301[1]);
      }
      if (v310 >= v317)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1301, (uint64_t)&v1302, v310 + 1, 4);
        v310 = v1301[1];
      }
      *((_DWORD *)v1301[0] + v310) = v291;
      v594 = __CFADD__(LODWORD(v1301[1])++, 1);
      if (!v594)
      {
        v699 = 0;
        v700 = 4;
        do
        {
          LODWORD(v1296) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + v700);
          DWORD2(v1296) = 1;
          LODWORD(v1313[0]) = *((_DWORD *)v1301[0] + v699);
          LODWORD(v1313[2]) = 0;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 19, &v1296, 1, v1313, 1, 0);
          ++v699;
          v700 += 32;
        }
        while (v699 < LODWORD(v1301[1]));
      }
      v701 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v701 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v701 = v1279;
          do
            v701 = *(_QWORD *)(v701 + 8);
          while ((*(_WORD *)(v701 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v1279 + 24) + 40, v1279, *(_QWORD *)(v701 + 8));
      if (v1301[0] != &v1302)
        free(v1301[0]);
      return 1;
    case 2177:
    case 2178:
    case 2179:
    case 2180:
    case 2181:
    case 2182:
    case 2183:
    case 2184:
    case 2185:
    case 2186:
    case 2187:
    case 2188:
    case 2189:
    case 2190:
    case 2191:
    case 2192:
    case 2193:
    case 2194:
    case 2195:
    case 2196:
    case 2197:
    case 2198:
    case 2199:
    case 2200:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2211:
    case 2212:
    case 2213:
    case 2214:
    case 2215:
    case 2216:
    case 2217:
    case 2218:
    case 2219:
    case 2220:
    case 2221:
    case 2222:
    case 2223:
    case 2224:
    case 2225:
    case 2226:
    case 2227:
    case 2228:
    case 2229:
    case 2230:
    case 2231:
    case 2232:
    case 2233:
    case 2234:
    case 2235:
    case 2236:
    case 2237:
    case 2238:
    case 2239:
    case 2240:
    case 2241:
    case 2242:
    case 2243:
    case 2244:
    case 2245:
    case 2246:
    case 2247:
    case 2248:
    case 2249:
    case 2250:
    case 2251:
    case 2252:
    case 2253:
    case 2254:
    case 2255:
    case 2256:
    case 2257:
    case 2258:
    case 2259:
    case 2260:
    case 2261:
    case 2262:
    case 2263:
    case 2264:
    case 2265:
    case 2266:
    case 2267:
    case 2268:
    case 2269:
    case 2270:
    case 2271:
    case 2272:
    case 2273:
    case 2274:
    case 2275:
    case 2276:
    case 2277:
    case 2278:
    case 2279:
    case 2280:
    case 2281:
    case 2282:
    case 2283:
    case 2284:
    case 2285:
    case 2286:
    case 2287:
    case 2288:
    case 2289:
    case 2290:
    case 2291:
    case 2292:
    case 2293:
    case 2294:
    case 2295:
    case 2296:
    case 2297:
    case 2298:
    case 2299:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
      v1240 = v15;
      v1225 = v12;
      BYTE4(v1302) = 0;
      BYTE8(v1302) = 0;
      BYTE12(v1302) = 0;
      LOBYTE(v1303) = 0;
      BYTE4(v1303) = 0;
      LOBYTE(v1304) = 0;
      v1305 = 0;
      LOBYTE(v1306) = 0;
      v1307 = 0;
      v1301[0] = 0;
      v1301[1] = 0;
      LOBYTE(v1302) = 0;
      sub_1C4B14788(v18, (uint64_t)v1301, 0xFFFFFFFF);
      v27 = v1274;
      v28 = v1279;
      v29 = *(_QWORD *)(v1279 + 32);
      v1228 = HIDWORD(v1301[0]);
      LOBYTE(v1298) = 0;
      v1300 = 0;
      v30 = v29 + 32 * LODWORD(v1301[1]);
      v31 = *(unsigned int *)(v30 + 4);
      v32 = *(_QWORD *)(v1274 + 24);
      v33 = *(_QWORD *)(v1274 + 272);
      if ((int)v31 >= 0)
        v34 = (uint64_t *)(v33 + 8 * v31);
      else
        v34 = (uint64_t *)(v32 + 16 * (v31 & 0x7FFFFFFF) + 8);
      v35 = *v34;
      if (!v35)
        goto LABEL_29;
      v1185 = v35;
      if ((*(_BYTE *)(v35 + 3) & 1) == 0)
      {
        v1185 = *(_QWORD *)(v35 + 24);
        if (!v1185 || (*(_BYTE *)(v1185 + 3) & 1) == 0)
          goto LABEL_1141;
      }
      v1186 = *(_QWORD *)(v1185 + 8);
      if (!v1186 || **(_WORD **)(v1186 + 16) != 82 || *(_DWORD *)(v1186 + 40) != 2)
        goto LABEL_1141;
      v1203 = *(unsigned int *)(*(_QWORD *)(v1186 + 32) + 36);
      v1204 = (uint64_t *)((int)v1203 >= 0 ? v33 + 8 * v1203 : v32 + 16 * (v1203 & 0x7FFFFFFF) + 8);
      v1205 = *v1204;
      if (!v1205)
        goto LABEL_1141;
      if ((*(_BYTE *)(v1205 + 3) & 1) != 0)
      {
        v27 = v1274;
        v28 = v1279;
      }
      else
      {
        v1205 = *(_QWORD *)(v1205 + 24);
        v27 = v1274;
        v28 = v1279;
        if (!v1205 || (*(_BYTE *)(v1205 + 3) & 1) == 0)
          goto LABEL_1141;
      }
      v1209 = *(_QWORD *)(v1205 + 8);
      if (v1209)
      {
LABEL_1332:
        v30 = *(_QWORD *)(v1209 + 32);
        goto LABEL_29;
      }
LABEL_1141:
      v30 = v29 + 32 * LODWORD(v1301[1]);
      if ((*(_BYTE *)(v35 + 3) & 1) == 0 && ((v35 = *(_QWORD *)(v35 + 24)) == 0 || (*(_BYTE *)(v35 + 3) & 1) == 0)
        || (v1187 = *(_QWORD *)(v35 + 8)) == 0
        || **(_WORD **)(v1187 + 16) != 81
        || *(_DWORD *)(v1187 + 40) != 2
        || ((v1206 = *(unsigned int *)(*(_QWORD *)(v1187 + 32) + 36), (int)v1206 >= 0)
          ? (v1207 = (uint64_t *)(v33 + 8 * v1206))
          : (v1207 = (uint64_t *)(v32 + 16 * (v1206 & 0x7FFFFFFF) + 8)),
            (v1208 = *v1207) == 0
         || (*(_BYTE *)(v1208 + 3) & 1) == 0
         && ((v1208 = *(_QWORD *)(v1208 + 24)) == 0 || (*(_BYTE *)(v1208 + 3) & 1) == 0)))
      {
        v27 = v1274;
        v28 = v1279;
        goto LABEL_29;
      }
      v1209 = *(_QWORD *)(v1208 + 8);
      v27 = v1274;
      v28 = v1279;
      if (v1209)
        goto LABEL_1332;
LABEL_29:
      LOBYTE(v1287) = 0;
      v1289 = 0;
      v36 = *(unsigned int *)(v29 + 32 * HIDWORD(v1301[1]) + 4);
      v37 = (uint64_t *)(v32 + 16 * (v36 & 0x7FFFFFFF) + 8);
      v38 = (uint64_t *)(v33 + 8 * v36);
      if ((v36 & 0x80000000) == 0)
        v37 = v38;
      v39 = *v37;
      if (v39)
      {
        if (((*(_BYTE *)(v39 + 3) & 1) != 0 || (v39 = *(_QWORD *)(v39 + 24)) != 0 && (*(_BYTE *)(v39 + 3) & 1) != 0)
          && (v1188 = *(_QWORD *)(v39 + 8)) != 0
          && **(_WORD **)(v1188 + 16) == 81)
        {
          v27 = v1274;
          v28 = v1279;
          if (*(_DWORD *)(v1188 + 40) == 2)
            v36 = *(unsigned int *)(*(_QWORD *)(v1188 + 32) + 36);
        }
        else
        {
          v27 = v1274;
          v28 = v1279;
        }
      }
      v40 = sub_1C554C050(v36, v27);
      if (v41)
        v42 = v40 < 0;
      else
        v42 = 0;
      v43 = v42;
      v1223 = v11;
      if (v42)
      {
        v44 = 0;
        v45 = 0;
        v46 = (__int128 *)v30;
        v47 = v1282;
        goto LABEL_107;
      }
      if (v36 >> 31)
        v59 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
      else
        v59 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v36);
      v71 = *v59;
      v72 = (uint64_t)v1282;
      if ((*(_BYTE *)(v71 + 3) & 1) == 0)
        v71 = *(_QWORD *)(v71 + 24);
      v73 = *(_QWORD *)(*(_QWORD *)(v71 + 8) + 32);
      v74 = *(_OWORD *)(v30 + 16);
      v1298 = *(_OWORD *)v30;
      v1299 = v74;
      v1300 = 1;
      v75 = *(unsigned int *)(v73 + 4);
      if ((v75 & 0x80000000) != 0)
        v76 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
      else
        v76 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v75);
      v77 = *v76;
      if (v77)
      {
        if (((*(_BYTE *)(v77 + 3) & 1) != 0 || (v77 = *(_QWORD *)(v77 + 24)) != 0 && (*(_BYTE *)(v77 + 3) & 1) != 0)
          && (v1189 = *(_QWORD *)(v77 + 8)) != 0
          && **(_WORD **)(v1189 + 16) == 126)
        {
          v72 = (uint64_t)v1282;
          v27 = v1274;
          if (*(_DWORD *)(v1189 + 40) == 2)
            v75 = *(unsigned int *)(*(_QWORD *)(v1189 + 32) + 36);
        }
        else
        {
          v72 = (uint64_t)v1282;
          v27 = v1274;
        }
      }
      if (v75 >> 31)
        v78 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
      else
        v78 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v75);
      v79 = *v78;
      if (v79)
      {
        if (((*(_BYTE *)(v79 + 3) & 1) != 0 || (v79 = *(_QWORD *)(v79 + 24)) != 0 && (*(_BYTE *)(v79 + 3) & 1) != 0)
          && (v1190 = *(_QWORD *)(v79 + 8)) != 0
          && **(_WORD **)(v1190 + 16) == 82)
        {
          v72 = (uint64_t)v1282;
          v27 = v1274;
          if (*(_DWORD *)(v1190 + 40) == 2)
            v75 = *(unsigned int *)(*(_QWORD *)(v1190 + 32) + 36);
        }
        else
        {
          v72 = (uint64_t)v1282;
          v27 = v1274;
        }
      }
      if ((v75 & 0x80000000) != 0)
        v80 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
      else
        v80 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v75);
      v81 = *v80;
      if (v81)
      {
        if ((*(_BYTE *)(v81 + 3) & 1) != 0 || (v81 = *(_QWORD *)(v81 + 24)) != 0 && (*(_BYTE *)(v81 + 3) & 1) != 0)
          v82 = *(_QWORD *)(v81 + 8);
        else
          v82 = 0;
        v72 = (uint64_t)v1282;
      }
      else
      {
        v82 = 0;
      }
      v83 = sub_1C554C050(v75, v1274);
      if (v84)
        v85 = v83 < 0x10000;
      else
        v85 = 0;
      v86 = !v85;
      if (v85)
      {
        v1313[0] = (void *)129;
        LODWORD(v1313[1]) = 0;
        sub_1C5544694(v72, (unint64_t *)v1313, v83);
        LODWORD(v75) = *(_DWORD *)(*(_QWORD *)(v87 + 32) + 4);
        LODWORD(v1287) = 0;
        DWORD1(v1287) = v75;
        v1288 = 0uLL;
        *((_QWORD *)&v1287 + 1) = 0;
        v45 = 1;
        v1289 = 1;
        if ((v75 & 0x80000000) == 0)
          goto LABEL_94;
      }
      else
      {
        v45 = 0;
        if ((v75 & 0x80000000) == 0)
          goto LABEL_94;
      }
      if ((v75 & 0x7FFFFFFF) < *(_DWORD *)(v1274 + 432))
      {
        v88 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * (v75 & 0x7FFFFFFF));
        goto LABEL_95;
      }
LABEL_94:
      v88 = 0;
LABEL_95:
      v1294[0] = v88;
      v90 = sub_1C4825F50((unint64_t *)v1294);
      if ((_DWORD)v89 == 1)
      if (v90 <= 0x20 && ((uint64_t)v1294[0] & 1) != 0)
      {
        v28 = v1279;
        v47 = v1282;
        if (!v86)
          goto LABEL_106;
        v91 = *(__int128 **)(v82 + 32);
        v92 = v91[1];
        v1287 = *v91;
        v1288 = v92;
        goto LABEL_105;
      }
      v47 = v1282;
      *(_QWORD *)&v1296 = 257;
      DWORD2(v1296) = 0;
      LODWORD(v1313[0]) = v75;
      LODWORD(v1313[2]) = 0;
      if (((uint64_t)v1294[0] & 1) != 0)
        sub_1C5546B4C(v1282, 126, (unint64_t *)&v1296, (int *)v1313);
      else
        sub_1C5546EF4(v1282, (uint64_t *)&v1296, (int *)v1313);
      v94 = *(_DWORD *)(*(_QWORD *)(v93 + 32) + 4);
      LODWORD(v1287) = 0;
      DWORD1(v1287) = v94;
      v1288 = 0uLL;
      *((_QWORD *)&v1287 + 1) = 0;
      v28 = v1279;
      if ((v86 & 1) != 0)
      {
LABEL_105:
        v45 = 1;
        v1289 = 1;
      }
LABEL_106:
      v44 = 1;
      v46 = &v1298;
      v27 = v1274;
LABEL_107:
      sub_1C493FD84((uint64_t)&v1284, *((_DWORD *)v46 + 1), v27, 1);
      if (v1286)
      {
        if (!v1240 && !v1284)
          goto LABEL_110;
LABEL_113:
        v98 = *(unsigned int *)(v30 + 4);
        if ((v98 & 0x80000000) != 0)
          v99 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
        else
          v99 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v98);
        v100 = *v99;
        if ((*(_BYTE *)(v100 + 3) & 1) == 0)
          v100 = *(_QWORD *)(v100 + 24);
        v101 = *(_QWORD *)(v100 + 8);
        if (**(_WORD **)(v101 + 16) == 19)
        {
          v102 = *(unsigned int *)(*(_QWORD *)(v101 + 32) + 36);
          if ((v102 & 0x80000000) != 0)
            v103 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
          else
            v103 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v102);
          v104 = *v103;
          if ((*(_BYTE *)(v104 + 3) & 1) == 0)
            v104 = *(_QWORD *)(v104 + 24);
          v30 = *(_QWORD *)(*(_QWORD *)(v104 + 8) + 32) + 32;
        }
        if (v1286 && (v105 = v1284) != 0)
        {
          v106 = sub_1C5EAB3E0(v1284, v1285, *((_QWORD *)v1258 + 43), 0);
          if ((v43 & 1) != 0)
          {
            LODWORD(v1287) = 1287;
            DWORD1(v1287) = v106;
            *((_QWORD *)&v1287 + 1) = 0;
            LODWORD(v1288) = 67;
            DWORD2(v1288) = 0;
            if (!v45)
              v1289 = 1;
          }
          else
          {
            LODWORD(v1298) = 775;
            DWORD1(v1298) = v106 >> 1;
            *((_QWORD *)&v1298 + 1) = 0;
            LODWORD(v1299) = 64;
            DWORD2(v1299) = 0;
          }
        }
        else
        {
          v107 = *(_DWORD *)(v30 + 4);
          if (v107 < 0 && (v107 & 0x7FFFFFFFu) < *(_DWORD *)(v27 + 432))
          {
            v108 = *(_QWORD *)(*(_QWORD *)(v27 + 424) + 8 * (v107 & 0x7FFFFFFF));
            v1294[0] = (void *)v108;
            if ((v108 & 0xFFFFFFFFFFFFFFF9) != 0 && (v108 & 1) == 0)
            {
              v110 = sub_1C4825F50((unint64_t *)v1294);
              if ((_DWORD)v109 == 1)
              *(_QWORD *)&v1296 = (8 * v110) | 1;
              DWORD2(v1296) = 0;
              LODWORD(v1313[0]) = v107;
              LODWORD(v1313[2]) = 0;
              v47 = v1282;
              sub_1C5546EF4(v1282, (uint64_t *)&v1296, (int *)v1313);
              v107 = *(_DWORD *)(*(_QWORD *)(v111 + 32) + 4);
            }
          }
          else
          {
            v1294[0] = 0;
          }
          *(_QWORD *)&v1296 = 129;
          DWORD2(v1296) = 0;
          LODWORD(v1313[0]) = v107;
          LODWORD(v1313[2]) = 0;
          sub_1C5546B4C(v47, 126, (unint64_t *)&v1296, (int *)v1313);
          v113 = *(__int128 **)(v112 + 32);
          v114 = v113[1];
          v1287 = *v113;
          v1288 = v114;
          if (!v45)
            v1289 = 1;
          v105 = 0;
          *((_QWORD *)&v1287 + 1) = 0;
        }
        if (LODWORD(v1301[0]))
        {
          v115 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v28 + 32) + 32 * LODWORD(v1301[0]) + 4), v27);
          v1216 = v115;
          v1218 = (v115 >> 1) & 0x4000;
        }
        else
        {
          v1218 = 0;
          v1216 = 0;
        }
        if (v1308 <= 2)
          v116 = 2;
        else
          v116 = v1308;
        v117 = v116 - 2;
        if (!v1310)
          v117 = v1308;
        v118 = v117 + BYTE4(v1303);
        if (v1309 == 8)
          v119 = v118 + 1;
        else
          v119 = v118;
        if (v119 + BYTE12(v1302))
        {
          if (v1311)
            __asm { BR              X15 }
          __asm { BR              X15 }
        }
        LODWORD(v1296) = 1;
        *((_QWORD *)&v1296 + 1) = 0;
        *(_QWORD *)&v1297[0] = 0;
        if (v1305)
        {
          v438 = (__int128 *)(*(_QWORD *)(v28 + 32) + 32 * v1304);
          v439 = v438[1];
          v1296 = *v438;
          v1297[0] = v439;
          v440 = sub_1C554C050(SDWORD1(v1296), v27);
          if (v441)
          {
            LODWORD(v1296) = 1;
            v1235 = v440 != 0;
            *((_QWORD *)&v1296 + 1) = 0;
            *(_QWORD *)&v1297[0] = v440;
          }
          else
          {
            v1235 = 2;
          }
        }
        else
        {
          v1235 = 0;
        }
        LODWORD(v1294[0]) = 1;
        v442 = v29 + 32 * v1228;
        v1294[1] = 0;
        *(_QWORD *)&v1295 = 0;
        v444 = *(_DWORD *)(v442 + 4);
        v443 = (_DWORD *)(v442 + 4);
        v445 = sub_1C554C050(v444, v27);
        v1220 = (uint64_t)v105;
        if (!v446 || v1307)
        {
          if (v1307)
          {
            v448 = v1306;
            v449 = *(_QWORD *)(v28 + 32);
            v1211 = v1306 + 1;
            v450 = v1306 + 2;
            v1229 = v1306 + 3;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v451 = sub_1C5544694((uint64_t)v47, (unint64_t *)v1313, 8);
            v453 = v452;
            v1292 = 129;
            v1293 = 0;
            v454 = v449 + 32 * v448;
            LODWORD(v1313[0]) = *(_DWORD *)(v454 + 4);
            LODWORD(v1313[2]) = 0;
            *(_QWORD *)&v1314 = v451;
            *((_QWORD *)&v1314 + 1) = v452;
            LODWORD(v1315) = 1;
            v455 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 127, &v1292, 1, v1313, 2, 0);
            v1292 = 129;
            v1293 = 0;
            v1313[0] = v455;
            v1313[1] = v456;
            LODWORD(v1313[2]) = 1;
            LODWORD(v1314) = *v443;
            LODWORD(v1315) = 0;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 66, &v1292, 1, v1313, 2, 0);
            v1213 = v457;
            v1292 = 129;
            v1293 = 0;
            LODWORD(v1313[0]) = *(_DWORD *)(v454 + 4);
            LODWORD(v1313[2]) = 0;
            *(_QWORD *)&v1314 = v451;
            *((_QWORD *)&v1314 + 1) = v453;
            LODWORD(v1315) = 1;
            v1210 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 128, &v1292, 1, v1313, 2, 0);
            v459 = v458;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v460 = sub_1C5544694((uint64_t)v47, (unint64_t *)v1313, 2);
            v1292 = 129;
            v1293 = 0;
            LODWORD(v1313[0]) = *(_DWORD *)(v449 + 32 * v450 + 4);
            LODWORD(v1313[2]) = 0;
            *(_QWORD *)&v1314 = v460;
            *((_QWORD *)&v1314 + 1) = v461;
            LODWORD(v1315) = 1;
            v462 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 127, &v1292, 1, v1313, 2, 0);
            v464 = v463;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v465 = sub_1C5544694((uint64_t)v47, (unint64_t *)v1313, 12);
            v1292 = 129;
            v1293 = 0;
            v466 = v449 + 32 * v1211;
            LODWORD(v1313[0]) = *(_DWORD *)(v466 + 4);
            LODWORD(v1313[2]) = 0;
            *(_QWORD *)&v1314 = v465;
            *((_QWORD *)&v1314 + 1) = v467;
            LODWORD(v1315) = 1;
            v468 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 127, &v1292, 1, v1313, 2, 0);
            v470 = v469;
            v1292 = 129;
            v1293 = 0;
            v1313[0] = v1210;
            v1313[1] = v459;
            LODWORD(v1313[2]) = 1;
            *(_QWORD *)&v1314 = v462;
            *((_QWORD *)&v1314 + 1) = v464;
            LODWORD(v1315) = 1;
            v471 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 66, &v1292, 1, v1313, 2, 0);
            v1292 = 129;
            v1293 = 0;
            v1313[0] = v471;
            v1313[1] = v472;
            LODWORD(v1313[2]) = 1;
            *(_QWORD *)&v1314 = v468;
            *((_QWORD *)&v1314 + 1) = v470;
            LODWORD(v1315) = 1;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 66, &v1292, 1, v1313, 2, 0);
            v474 = v473;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v475 = sub_1C5544694((uint64_t)v47, (unint64_t *)v1313, 4);
            v1292 = 129;
            v1293 = 0;
            LODWORD(v1313[0]) = *(_DWORD *)(v466 + 4);
            LODWORD(v1313[2]) = 0;
            *(_QWORD *)&v1314 = v475;
            *((_QWORD *)&v1314 + 1) = v476;
            LODWORD(v1315) = 1;
            v477 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 128, &v1292, 1, v1313, 2, 0);
            v479 = v478;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v480 = sub_1C5544694((uint64_t)v47, (unint64_t *)v1313, 6);
            v1292 = 129;
            v1293 = 0;
            LODWORD(v1313[0]) = *(_DWORD *)(v449 + 32 * v1229 + 4);
            LODWORD(v1313[2]) = 0;
            *(_QWORD *)&v1314 = v480;
            *((_QWORD *)&v1314 + 1) = v481;
            LODWORD(v1315) = 1;
            v482 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 127, &v1292, 1, v1313, 2, 0);
            v1292 = 129;
            v1293 = 0;
            v1313[0] = v477;
            v1313[1] = v479;
            LODWORD(v1313[2]) = 1;
            *(_QWORD *)&v1314 = v482;
            *((_QWORD *)&v1314 + 1) = v483;
            LODWORD(v1315) = 1;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v47 + 32))(v47, 66, &v1292, 1, v1313, 2, 0);
            v484 = 0;
            v1292 = 8388636;
            v485 = *(_QWORD *)(v1223[30] + 80);
            v1293 = 0;
            v486 = *(_DWORD *)(*(_QWORD *)(v474 + 32) + 4);
            v1291[0] = *(_DWORD *)(*(_QWORD *)(v1213 + 32) + 4);
            v1291[1] = v486;
            v1291[2] = *(_DWORD *)(*(_QWORD *)(v487 + 32) + 4);
            v1313[0] = &v1313[2];
            v1313[1] = (void *)0x800000000;
            v488 = 2;
            do
            {
              v489 = &v1313[v488];
              *(_DWORD *)v489 = v1291[v484];
              *((_DWORD *)v489 + 4) = 0;
              v488 += 3;
              ++v484;
            }
            while (v484 != 3);
            LODWORD(v1313[1]) += 3;
            v490 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **))(*v1282 + 32))(v1282, 77, &v1292, 1, &v1313[2]);
            v492 = v491;
            v105 = (llvm::GlobalValue *)v1220;
            if (v1313[0] != &v1313[2])
              free(v1313[0]);
            v1292 = v485;
            v447 = 2;
            v1293 = 2;
            v1313[0] = v490;
            v1313[1] = v492;
            LODWORD(v1313[2]) = 1;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 19, &v1292, 1, v1313, 1, 0);
            v494 = *(_OWORD **)(v493 + 32);
            v495 = v494[1];
            *(_OWORD *)v1294 = *v494;
            v1295 = v495;
            v44 = v1300;
            v27 = v1274;
            v28 = v1279;
          }
          else
          {
            v496 = (__int128 *)(v29 + 32 * v1228);
            v497 = *v496;
            v1295 = v496[1];
            *(_OWORD *)v1294 = v497;
            v447 = 1;
          }
        }
        else
        {
          v447 = 0;
          LODWORD(v1294[0]) = 1;
          v1294[1] = 0;
          *(_QWORD *)&v1295 = v445;
        }
        v498 = v1240;
        if (!v105 || v44)
        {
          if (v44)
          {
            if ((DWORD1(v1287) & 0x80000000) != 0
              && (v500 = DWORD1(v1287) & 0x7FFFFFFF, v500 < *(_DWORD *)(v27 + 432)))
            {
              v501 = *(void **)(*(_QWORD *)(v27 + 424) + 8 * v500);
            }
            else
            {
              v501 = 0;
            }
            v502 = v1218;
            v503 = v1216;
            v1313[0] = v501;
            v505 = sub_1C4825F50((unint64_t *)v1313);
            if ((_DWORD)v504 == 1)
            v499 = 2;
            if (v505 != 16)
              v499 = 3;
            v498 = v1240;
LABEL_463:
            v506 = &unk_1C691FC34;
            if (v498)
              v506 = &unk_1C691FC7C;
            v507 = v506[18 * v499 + 6 * v447 + v1235];
            v508 = ((v503 & 0xF) << 9) | v502 | (2 * (v1235 < 2)) | (4 * v447) | (32 * (v1309 & 0xF)) | (16 * v1311);
            if (!v1310)
              ++v508;
            v509 = (void *)(v508 | (v1312 << 16));
            v510 = *(_BYTE *)(v10 + 1732) == 0;
            if (*(_BYTE *)(v10 + 1646))
              LODWORD(v511) = 3;
            else
              LODWORD(v511) = 1;
            v512 = *(llvm::ConstantFP ****)v1258;
            LODWORD(v1313[0]) = 0;
            if (sub_1C4979B6C(v1252, (uint64_t)v512, "ImageWriteBlockCacheCtl", (int *)v1313))
              v511 = LODWORD(v1313[0]);
            else
              v511 = v511;
            v513 = *(llvm::ConstantFP ****)v1258;
            LODWORD(v1313[0]) = 0;
            v514 = sub_1C4979B6C(v1252, (uint64_t)v513, "ImageWriteBlockL2Pers", (int *)v1313);
            v515 = v1313[0];
            if (!v514)
              v515 = v510;
            v516 = 4 * v515;
            if ((_DWORD)v511 == 3)
              v517 = 4;
            else
              v517 = v516;
            v519 = sub_1C55437B8(v1282, v507);
            v520 = v518;
            v521 = (unint64_t *)v1282[6];
            v522 = *(_QWORD ***)(v1282[5] + 40);
            *(_QWORD *)(v518 + 24) = v522;
            v523 = v522[4];
            v524 = *(unsigned int *)(v518 + 40);
            if ((_DWORD)v524)
            {
              v557 = *(_QWORD *)(v518 + 32);
              v558 = v523[5];
              v559 = 32 * v524;
              do
              {
                if (!*(_BYTE *)v557)
                {
                  v560 = *(unsigned int *)(v557 + 4);
                  if ((int)v560 >= 0)
                    v561 = (uint64_t *)(*(_QWORD *)(v558 + 272) + 8 * v560);
                  else
                    v561 = (uint64_t *)(*(_QWORD *)(v558 + 24) + 16 * (v560 & 0x7FFFFFFF) + 8);
                  v562 = *v561;
                  if (*v561)
                  {
                    v563 = *(_QWORD *)(v562 + 16);
                    *(_QWORD *)(v562 + 16) = v557;
                    *(_QWORD *)(v557 + 16) = v563;
                    if ((*(_BYTE *)(v557 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v557 + 24) = v562;
                    }
                    else
                    {
                      *(_QWORD *)(v557 + 24) = 0;
                      v561 = (uint64_t *)(v563 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v557 + 16) = v557;
                    *(_QWORD *)(v557 + 24) = 0;
                  }
                  *v561 = v557;
                }
                v557 += 32;
                v559 -= 32;
              }
              while (v559);
            }
            v525 = v523[91];
            if (v525)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v525 + 24))(v525, v518);
            v526 = (void *)(v517 | v511);
            v527 = *v521 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v520 = v527 | *(_QWORD *)v520 & 7;
            *(_QWORD *)(v520 + 8) = v521;
            *(_QWORD *)(v527 + 8) = v520;
            *v521 = *v521 & 7 | v520;
            v528 = (_QWORD ***)v1282[7];
            if (v528)
              ((void (*)(_QWORD ***, unint64_t))(*v528)[3])(v528, v520);
            LODWORD(v1313[0]) = 1;
            v1313[1] = 0;
            v1313[2] = v509;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, (const llvm::MachineOperand *)v1313);
            LODWORD(v1313[0]) = 1;
            v1313[1] = 0;
            v1313[2] = v526;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, (const llvm::MachineOperand *)v1313);
            if (LOBYTE(v1294[0]))
            {
              v529 = v1294;
            }
            else
            {
              v1313[1] = 0;
              v1313[2] = 0;
              HIDWORD(v1313[0]) = HIDWORD(v1294[0]);
              LODWORD(v1313[0]) = 0;
              *(_QWORD *)&v1314 = 0;
              v529 = v1313;
            }
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, (const llvm::MachineOperand *)v529);
            if (v44)
            {
              if ((_BYTE)v1298)
              {
                v530 = (void **)&v1298;
              }
              else
              {
                v1313[1] = 0;
                v1313[2] = 0;
                HIDWORD(v1313[0]) = DWORD1(v1298);
                LODWORD(v1313[0]) = 0;
                *(_QWORD *)&v1314 = 0;
                v530 = v1313;
              }
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, (const llvm::MachineOperand *)v530);
            }
            if ((_BYTE)v1287)
            {
              v531 = (void **)&v1287;
            }
            else
            {
              v1313[1] = 0;
              v1313[2] = 0;
              HIDWORD(v1313[0]) = DWORD1(v1287);
              LODWORD(v1313[0]) = 0;
              *(_QWORD *)&v1314 = 0;
              v531 = v1313;
            }
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, (const llvm::MachineOperand *)v531);
            v532 = (*(_DWORD *)(v520 + 40) - 1);
            v533 = *(_QWORD *)(v520 + 32);
            v534 = (_BYTE *)(v533 + 32 * v532);
            if (!*v534)
            {
              v535 = *((_QWORD *)v1258 + 2);
              (*(void (**)(_QWORD *, unint64_t))(*v1266 + 32))(v1266, v520);
              v536 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v535 + 176))(v535);
              v537 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v535 + 104))(v535);
              v538 = sub_1C554ADA8((uint64_t)v1258, v536, (_QWORD *)v1274, v537, v1225, v520, *(_QWORD *)(v520 + 16), (uint64_t)v534, v532);
              llvm::MachineOperand::setReg((uint64_t)v534, v538);
              (*(void (**)(_QWORD *, unint64_t))(*v1266 + 40))(v1266, v520);
              v533 = *(_QWORD *)(v520 + 32);
            }
            v540 = *(unsigned __int8 *)(v533 + 64);
            v539 = v533 + 64;
            if (!v540)
            {
              v541 = *((_QWORD *)v1258 + 2);
              (*(void (**)(_QWORD *, unint64_t))(*v1266 + 32))(v1266, v520);
              v542 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v541 + 176))(v541);
              v543 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v541 + 104))(v541);
              v544 = sub_1C554ADA8((uint64_t)v1258, v542, (_QWORD *)v1274, v543, v1225, v520, *(_QWORD *)(v520 + 16), v539, 2u);
              llvm::MachineOperand::setReg(v539, v544);
              (*(void (**)(_QWORD *, unint64_t))(*v1266 + 40))(v1266, v520);
            }
            if (v1235)
            {
              if ((_BYTE)v1296)
              {
                v545 = (const llvm::MachineOperand *)&v1296;
              }
              else
              {
                v1313[1] = 0;
                v1313[2] = 0;
                HIDWORD(v1313[0]) = DWORD1(v1296);
                LODWORD(v1313[0]) = 0;
                *(_QWORD *)&v1314 = 0;
                v545 = (const llvm::MachineOperand *)v1313;
              }
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, v545);
              if (v1240)
              {
                if (v1235 == 2)
                {
                  LODWORD(v1313[0]) = 1;
                  v1313[1] = 0;
                  v1313[2] = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v520, v519, (const llvm::MachineOperand *)v1313);
                }
              }
            }
            v546 = *((_QWORD *)v1258 + 6);
            if (!v546)
            {
              v546 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::ConstantFP *))(**((_QWORD **)v1258 + 1) + 216))(*((_QWORD *)v1258 + 1), (uint64_t)v1258 + 128, v1258);
              *((_QWORD *)v1258 + 6) = v546;
            }
            if (v1220)
            {
              v547 = sub_1C48BEFA4(v546, v1220, (uint64_t)v1258, 0);
              v548 = v547 | 4;
              if (v547)
                v549 = *(_DWORD *)(v547 + 12);
              else
                v549 = 0;
            }
            else
            {
              v549 = 0;
              v548 = 4;
            }
            v550 = (char *)sub_1C484358C((uint64_t)v1258 + 128, 80, 3);
            v551 = 0;
            v552 = 0;
            v553 = 0;
            *((_DWORD *)v550 + 4) = v549;
            *((_WORD *)v550 + 16) = 2;
            v550[34] = 2;
            *((_WORD *)v550 + 18) = 1;
            *(_QWORD *)v550 = v548;
            *((_QWORD *)v550 + 1) = 0;
            v550[20] = 0;
            *((_QWORD *)v550 + 3) = 0;
            *(_OWORD *)(v550 + 40) = 0u;
            *(_OWORD *)(v550 + 56) = 0u;
            *((_QWORD *)v550 + 9) = 0;
            v1313[0] = v550;
            v554 = *(_QWORD *)(v520 + 48);
            if (v554 >= 8)
            {
              v970 = *(_QWORD *)(v520 + 48) & 7;
              v971 = (unsigned __int8 *)(v554 & 0xFFFFFFFFFFFFFFF8);
              if (v970 == 1 && v971)
              {
                v551 = 0;
                v553 = 0;
                v552 = (uint64_t)v971;
              }
              else if (v970 == 3 && v971)
              {
                v1178 = v971[4];
                if (v971[4])
                  v552 = *(_QWORD *)&v971[8 * *(int *)v971 + 8];
                else
                  v552 = 0;
                if (v971[5])
                  v551 = *(_QWORD *)&v971[8 * *(int *)v971 + 8 + 8 * v1178];
                else
                  v551 = 0;
                if (v971[6])
                  v553 = *(_QWORD *)&v971[8 * *(int *)v971 + 8 + 8 * v971[5] + 8 * v1178];
                else
                  v553 = 0;
                v28 = v1279;
              }
              else
              {
                v552 = 0;
                v553 = 0;
                if (v971)
                  v972 = v970 == 2;
                else
                  v972 = 0;
                if (v972)
                  v551 = (uint64_t)v971;
                else
                  v551 = 0;
              }
            }
            llvm::MachineInstr::setExtraInfo(v520, (uint64_t)v519, v1313, 1, v552, v551, v553);
            v555 = *(_QWORD *)(v28 + 24);
            v556 = v28;
            if ((*(_BYTE *)v28 & 4) == 0)
            {
              v556 = v28;
              if ((*(_WORD *)(v28 + 44) & 8) != 0)
              {
                v556 = v28;
                do
                  v556 = *(_QWORD *)(v556 + 8);
                while ((*(_WORD *)(v556 + 44) & 8) != 0);
              }
            }
LABEL_515:
            v68 = *(_QWORD *)(v556 + 8);
            v69 = v555 + 40;
            v70 = v28;
            goto LABEL_516;
          }
          v499 = 1;
        }
        else
        {
          v499 = 0;
        }
        v502 = v1218;
        v503 = v1216;
        goto LABEL_463;
      }
      if (v1240)
        goto LABEL_113;
LABEL_110:
      v96 = (llvm::raw_ostream *)llvm::errs(v95);
      v97 = (void *)*((_QWORD *)v96 + 4);
      if (*((_QWORD *)v96 + 3) - (_QWORD)v97 <= 0x1EuLL)
      {
        llvm::raw_ostream::write(v96, "Indirect only supported on G12\n", 0x1FuLL);
        return 0;
      }
      v20 = 0;
      qmemcpy(v97, "Indirect only supported on G12\n", 31);
      *((_QWORD *)v96 + 4) += 31;
      return v20;
    case 2374:
    case 2375:
      v28 = v1279;
      v378 = *(_DWORD **)(v1279 + 32);
      v379 = v378[1];
      v380 = v378[17];
      v1275 = v378[25];
      v381 = v378[33];
      v1301[0] = (void *)513;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = v380;
      LODWORD(v1313[2]) = 0;
      v382 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 80, v1301, 1, v1313, 1, 0);
      v383 = 0;
      *(int64x2_t *)v1301 = vdupq_n_s64(0x81uLL);
      v1302 = *(_OWORD *)v1301;
      *(_QWORD *)&v1296 = v382;
      *((_QWORD *)&v1296 + 1) = v384;
      LODWORD(v1297[0]) = 1;
      v1313[0] = &v1313[2];
      v1313[1] = (void *)0x800000000;
      v385 = 2;
      do
      {
        v386 = &v1313[v385];
        *v386 = v1301[v383];
        *((_DWORD *)v386 + 2) = 0;
        v385 += 2;
        ++v383;
      }
      while (v383 != 4);
      LODWORD(v1313[1]) += 4;
      (*(void (**)(uint64_t *, uint64_t, void *))(*v1282 + 32))(v1282, 74, v1313[0]);
      v388 = v387;
      if (v1313[0] != &v1313[2])
        free(v1313[0]);
      v389 = *(_DWORD *)(*(_QWORD *)(v388 + 32) + 4);
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = v389;
      LODWORD(v1313[2]) = 0;
      LODWORD(v1314) = v381;
      LODWORD(v1315) = 0;
      v391 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 76, v1301, 1, v1313, 2, 0);
      v392 = v390;
      if ((_DWORD)v18 == 2375)
      {
        v393 = *(_QWORD *)(v1279 + 32);
        v1268 = v390;
        v394 = *(_DWORD *)(v393 + 164);
        v395 = *(_DWORD *)(v393 + 196);
        *(_QWORD *)&v1296 = 129;
        DWORD2(v1296) = 0;
        v396 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1296, 1);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v395;
        LODWORD(v1313[2]) = 0;
        *(_QWORD *)&v1314 = v396;
        *((_QWORD *)&v1314 + 1) = v397;
        LODWORD(v1315) = 1;
        v398 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 46, v1301, 1, v1313, 2, 0);
        v400 = v399;
        v1313[0] = (void *)129;
        LODWORD(v1313[1]) = 0;
        v1261 = v379;
        v401 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v1282 + 32))(v1282, 2162, v1313, 1, 0, 0, 0);
        v403 = v402;
        *(_QWORD *)&v1296 = v401;
        *((_QWORD *)&v1296 + 1) = v402;
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = 0;
        llvm::MachineInstr::addOperand(v402, v401, (const llvm::MachineOperand *)v1313);
        v404 = *(_DWORD *)(v400[4] + 4);
        v1313[1] = 0;
        v1313[2] = 0;
        HIDWORD(v1313[0]) = v404;
        LODWORD(v1313[0]) = 0;
        *(_QWORD *)&v1314 = 0;
        llvm::MachineInstr::addOperand(v403, v401, (const llvm::MachineOperand *)v1313);
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = 0;
        llvm::MachineInstr::addOperand(v403, v401, (const llvm::MachineOperand *)v1313);
        sub_1C49400A8((uint64_t)&v1296);
        *(_QWORD *)&v1298 = 129;
        DWORD2(v1298) = 0;
        v405 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1298, 1);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        *(_OWORD *)v1313 = v1296;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v405;
        *((_QWORD *)&v1314 + 1) = v406;
        LODWORD(v1315) = 1;
        *(_QWORD *)&v1296 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 45, v1301, 1, v1313, 2, 0);
        *((_QWORD *)&v1296 + 1) = v407;
        *(_QWORD *)&v1298 = 129;
        DWORD2(v1298) = 0;
        v408 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1298, 1);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v394;
        LODWORD(v1313[2]) = 0;
        *(_QWORD *)&v1314 = v408;
        *((_QWORD *)&v1314 + 1) = v409;
        LODWORD(v1315) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 46, v1301, 1, v1313, 2, 0);
        v411 = *(_DWORD *)(*(_QWORD *)(v410 + 32) + 4);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v411;
        LODWORD(v1313[2]) = 0;
        v1314 = v1296;
        LODWORD(v1315) = 1;
        v412 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 127, v1301, 1, v1313, 2, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v412;
        v1313[1] = v413;
        LODWORD(v1313[2]) = 1;
        v414 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, v1301, 1, v1313, 1, 0);
        v416 = v415;
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v398;
        v1313[1] = v400;
        LODWORD(v1313[2]) = 1;
        v417 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, v1301, 1, v1313, 1, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v414;
        v1313[1] = v416;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v417;
        *((_QWORD *)&v1314 + 1) = v418;
        LODWORD(v1315) = 1;
        v419 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 66, v1301, 1, v1313, 2, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v419;
        v1313[1] = v420;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1298 = 257;
        DWORD2(v1298) = 0;
        *(_QWORD *)&v1314 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1298, 15);
        *((_QWORD *)&v1314 + 1) = v421;
        LODWORD(v1315) = 1;
        v422 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 127, v1301, 1, v1313, 2, 0);
        v424 = v423;
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        *(_OWORD *)v1313 = v1296;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1298 = 129;
        DWORD2(v1298) = 0;
        *(_QWORD *)&v1314 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1298, 4);
        *((_QWORD *)&v1314 + 1) = v425;
        LODWORD(v1315) = 1;
        v426 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 127, v1301, 1, v1313, 2, 0);
        v1301[0] = (void *)129;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v426;
        v1313[1] = v427;
        LODWORD(v1313[2]) = 1;
        LODWORD(v1314) = v1275;
        LODWORD(v1315) = 0;
        v428 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 66, v1301, 1, v1313, 2, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v428;
        v1313[1] = v429;
        LODWORD(v1313[2]) = 1;
        v430 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, v1301, 1, v1313, 1, 0);
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v422;
        v1313[1] = v424;
        v28 = v1279;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v430;
        *((_QWORD *)&v1314 + 1) = v431;
        LODWORD(v1315) = 1;
        v432 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 66, v1301, 1, v1313, 2, 0);
        LODWORD(v1301[0]) = v1261;
        LODWORD(v1301[1]) = 1;
        v1313[0] = v391;
        v1313[1] = v1268;
      }
      else
      {
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v1275;
        LODWORD(v1313[2]) = 0;
        v432 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, v1301, 1, v1313, 1, 0);
        LODWORD(v1301[0]) = v379;
        LODWORD(v1301[1]) = 1;
        v1313[0] = v391;
        v1313[1] = v392;
      }
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v432;
      *((_QWORD *)&v1314 + 1) = v433;
      LODWORD(v1315) = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 76, v1301, 1, v1313, 2, 0);
      v555 = *(_QWORD *)(v28 + 24);
      v556 = v28;
      if ((*(_BYTE *)v28 & 4) == 0)
      {
        v556 = v28;
        if ((*(_WORD *)(v28 + 44) & 8) != 0)
        {
          v556 = v28;
          do
            v556 = *(_QWORD *)(v556 + 8);
          while ((*(_WORD *)(v556 + 44) & 8) != 0);
        }
      }
      goto LABEL_515;
    case 2419:
    case 2420:
      v318 = *(_QWORD *)(v1279 + 32);
      v319 = *(_DWORD *)(v318 + 36);
      v320 = *(_DWORD *)(v318 + 68);
      v321 = (void *)sub_1C554C050(v320, v1274);
      v323 = v322;
      if (v322)
        v324 = 8184;
      else
        v324 = 8185;
      if ((_DWORD)v18 == 2419)
        v325 = 16;
      else
        v325 = 272;
      v327 = sub_1C55437B8(v1282, v324);
      v328 = (unint64_t *)v326;
      v329 = (unint64_t *)v1282[6];
      v330 = *(_QWORD ***)(v1282[5] + 40);
      *(_QWORD *)(v326 + 24) = v330;
      v331 = v330[4];
      v332 = *(unsigned int *)(v326 + 40);
      if ((_DWORD)v332)
      {
        v1018 = *(_QWORD *)(v326 + 32);
        v1019 = v331[5];
        v1020 = 32 * v332;
        do
        {
          if (!*(_BYTE *)v1018)
          {
            v1021 = *(unsigned int *)(v1018 + 4);
            if ((int)v1021 >= 0)
              v1022 = (uint64_t *)(*(_QWORD *)(v1019 + 272) + 8 * v1021);
            else
              v1022 = (uint64_t *)(*(_QWORD *)(v1019 + 24) + 16 * (v1021 & 0x7FFFFFFF) + 8);
            v1023 = *v1022;
            if (*v1022)
            {
              v1024 = *(_QWORD *)(v1023 + 16);
              *(_QWORD *)(v1023 + 16) = v1018;
              *(_QWORD *)(v1018 + 16) = v1024;
              if ((*(_BYTE *)(v1018 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1018 + 24) = v1023;
              }
              else
              {
                *(_QWORD *)(v1018 + 24) = 0;
                v1022 = (uint64_t *)(v1024 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1018 + 16) = v1018;
              *(_QWORD *)(v1018 + 24) = 0;
            }
            *v1022 = v1018;
          }
          v1018 += 32;
          v1020 -= 32;
        }
        while (v1020);
      }
      v333 = v331[91];
      if (v333)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v333 + 24))(v333, v326);
      v334 = *v329 & 0xFFFFFFFFFFFFFFF8;
      *v328 = v334 | *v328 & 7;
      v328[1] = (unint64_t)v329;
      *(_QWORD *)(v334 + 8) = v328;
      *v329 = *v329 & 7 | (unint64_t)v328;
      v335 = (_QWORD ***)v1282[7];
      if (v335)
        ((void (*)(_QWORD ***, unint64_t *))(*v335)[3])(v335, v328);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)v325;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)v1313);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)v1313);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v319;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)v1313);
      if (v323)
      {
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = v321;
      }
      else
      {
        v1313[1] = 0;
        v1313[2] = 0;
        HIDWORD(v1313[0]) = v320;
        LODWORD(v1313[0]) = 0;
        *(_QWORD *)&v1314 = 0;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)v1313);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)v1313);
      sub_1C554AE8C(v328, v1246, v11);
      v70 = v1279;
      v199 = *(_QWORD *)(v1279 + 24);
      v200 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v200 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v200 = v1279;
          do
            v200 = *(_QWORD *)(v200 + 8);
          while ((*(_WORD *)(v200 + 44) & 8) != 0);
        }
      }
      goto LABEL_286;
    case 2424:
      v194 = v1279;
      v680 = (void *)sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1279 + 32) + 36), v1274);
      v682 = sub_1C55437B8(v1282, 0x11F1u);
      v683 = (unint64_t *)v681;
      v684 = (unint64_t *)v1282[6];
      v685 = *(_QWORD ***)(v1282[5] + 40);
      *(_QWORD *)(v681 + 24) = v685;
      v686 = v685[4];
      v687 = *(unsigned int *)(v681 + 40);
      if ((_DWORD)v687)
      {
        v1164 = *(_QWORD *)(v681 + 32);
        v1165 = v686[5];
        v1166 = 32 * v687;
        v194 = v1279;
        do
        {
          if (!*(_BYTE *)v1164)
          {
            v1167 = *(unsigned int *)(v1164 + 4);
            if ((int)v1167 >= 0)
              v1168 = (uint64_t *)(*(_QWORD *)(v1165 + 272) + 8 * v1167);
            else
              v1168 = (uint64_t *)(*(_QWORD *)(v1165 + 24) + 16 * (v1167 & 0x7FFFFFFF) + 8);
            v1169 = *v1168;
            if (*v1168)
            {
              v1170 = *(_QWORD *)(v1169 + 16);
              *(_QWORD *)(v1169 + 16) = v1164;
              *(_QWORD *)(v1164 + 16) = v1170;
              if ((*(_BYTE *)(v1164 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1164 + 24) = v1169;
              }
              else
              {
                *(_QWORD *)(v1164 + 24) = 0;
                v1168 = (uint64_t *)(v1170 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1164 + 16) = v1164;
              *(_QWORD *)(v1164 + 24) = 0;
            }
            *v1168 = v1164;
          }
          v1164 += 32;
          v1166 -= 32;
        }
        while (v1166);
      }
      v688 = v686[91];
      if (v688)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v688 + 24))(v688, v681);
      v689 = *v684 & 0xFFFFFFFFFFFFFFF8;
      *v683 = v689 | *v683 & 7;
      v683[1] = (unint64_t)v684;
      *(_QWORD *)(v689 + 8) = v683;
      *v684 = *v684 & 7 | (unint64_t)v683;
      v690 = (_QWORD ***)v1282[7];
      if (v690)
        ((void (*)(_QWORD ***, unint64_t *))(*v690)[3])(v690, v683);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = v680;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v683, v682, (const llvm::MachineOperand *)v1313);
      v197 = *(_QWORD *)(v194 + 24);
      v198 = v194;
      if ((*(_BYTE *)v194 & 4) == 0)
      {
        v198 = v194;
        if ((*(_WORD *)(v194 + 44) & 8) != 0)
        {
          v198 = v194;
          do
            v198 = *(_QWORD *)(v198 + 8);
          while ((*(_WORD *)(v198 + 44) & 8) != 0);
        }
      }
      goto LABEL_872;
    case 2445:
    case 2446:
      v284 = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      if (v284 < 0 && (v285 = v284 & 0x7FFFFFFF, v285 < *(_DWORD *)(v1274 + 432)))
        v286 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * v285);
      else
        v286 = 0;
      *(_QWORD *)&v1296 = v286;
      v569 = sub_1C4825F50((unint64_t *)&v1296);
      if (v13)
      {
        v570 = v1266;
        if (v568 == 1)
        v571 = v569 == 32;
        v572 = 4570;
      }
      else
      {
        v570 = v1266;
        if (v568 == 1)
        v571 = v569 == 32;
        v572 = 4572;
      }
      if (v571)
        v706 = v572;
      else
        v706 = v572 + 1;
      v708 = sub_1C4825F50((unint64_t *)&v1296);
      if ((_DWORD)v707 == 1)
      v709 = &off_1E7FA5F10;
      if (v708 == 32)
        v709 = &off_1E7FA5F48;
      if ((_DWORD)v18 == 2445)
        v710 = 47;
      else
        v710 = 48;
      v1301[0] = v709;
      LODWORD(v1301[1]) = 2;
      v711 = v1282;
      v712 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v1282 + 32))(v1282, v706, v1301, 1, 0, 0, 0);
      v714 = v713;
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand(v713, v712, (const llvm::MachineOperand *)v1313);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v710;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v714, v712, (const llvm::MachineOperand *)v1313);
      v1301[0] = (void *)v1296;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v712;
      v1313[1] = v714;
      LODWORD(v1313[2]) = 1;
      v715 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v711 + 32))(v711, 19, v1301, 1, v1313, 1, 0);
      v1301[0] = (void *)v1296;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v715;
      v1313[1] = v716;
      LODWORD(v1313[2]) = 1;
      v717 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v711 + 32))(v711, 183, v1301, 1, v1313, 1, 0);
      v719 = v718;
      v720 = ****(llvm::ConstantFP *****)(*(_QWORD *)(v1279 + 24) + 32);
      LODWORD(v1313[1]) = 32;
      v1313[0] = (void *)1056964608;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1301, (const llvm::APInt **)v1313);
      v1313[1] = v1301[0];
      v1313[2] = v1301[1];
      LODWORD(v1314) = v1302;
      BYTE4(v1314) = BYTE4(v1314) & 0xF0 | BYTE4(v1302) & 0xF;
      v722 = llvm::ConstantFP::get(v720, (llvm::LLVMContext *)v1313, v721);
      if (v1313[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1313[2]);
      }
      else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
      {
        MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
      }
      v1313[0] = (void *)v1296;
      LODWORD(v1313[1]) = 0;
      v723 = (*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1313, v722);
      v1301[0] = (void *)v1296;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v717;
      v1313[1] = v719;
      v20 = 1;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v723;
      *((_QWORD *)&v1314 + 1) = v724;
      LODWORD(v1315) = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 163, v1301, 1, v1313, 2, *(unsigned __int16 *)(v1279 + 44) | 0x100000000);
      v726 = *(_DWORD *)(*(_QWORD *)(v725 + 32) + 4);
      v727 = (_QWORD *)v1274;
      v728 = v1279;
      v729 = v570;
      goto LABEL_802;
    case 2451:
    case 2453:
      v336 = *(_QWORD *)(v1279 + 32);
      v338 = sub_1C554C050(*(_DWORD *)(v336 + 68), v1274);
      v339 = *(unsigned __int8 *)(v10 + 1654);
      v340 = v337;
      if (v337)
        v341 = 747;
      else
        v341 = 750;
      if (v337)
        v342 = 745;
      else
        v342 = 748;
      if ((_DWORD)v18 == 2451)
        v341 = v342;
      if (v337)
        v343 = 753;
      else
        v343 = 756;
      if (v337)
        v344 = 751;
      else
        v344 = 754;
      if ((_DWORD)v18 == 2451)
        v343 = v344;
      if (v339)
        v345 = v343;
      else
        v345 = v341;
      v347 = sub_1C55437B8(v1282, v345);
      v348 = (unint64_t *)v346;
      v349 = (unint64_t *)v1282[6];
      v350 = *(_QWORD ***)(v1282[5] + 40);
      *(_QWORD *)(v346 + 24) = v350;
      v351 = v350[4];
      v352 = *(unsigned int *)(v346 + 40);
      if ((_DWORD)v352)
      {
        v1025 = *(_QWORD *)(v346 + 32);
        v1026 = v351[5];
        v1027 = 32 * v352;
        do
        {
          if (!*(_BYTE *)v1025)
          {
            v1028 = *(unsigned int *)(v1025 + 4);
            if ((int)v1028 >= 0)
              v1029 = (uint64_t *)(*(_QWORD *)(v1026 + 272) + 8 * v1028);
            else
              v1029 = (uint64_t *)(*(_QWORD *)(v1026 + 24) + 16 * (v1028 & 0x7FFFFFFF) + 8);
            v1030 = *v1029;
            if (*v1029)
            {
              v1031 = *(_QWORD *)(v1030 + 16);
              *(_QWORD *)(v1030 + 16) = v1025;
              *(_QWORD *)(v1025 + 16) = v1031;
              if ((*(_BYTE *)(v1025 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1025 + 24) = v1030;
              }
              else
              {
                *(_QWORD *)(v1025 + 24) = 0;
                v1029 = (uint64_t *)(v1031 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1025 + 16) = v1025;
              *(_QWORD *)(v1025 + 24) = 0;
            }
            *v1029 = v1025;
          }
          v1025 += 32;
          v1027 -= 32;
        }
        while (v1027);
      }
      v353 = v351[91];
      if (v353)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v353 + 24))(v353, v346);
      v354 = *v349 & 0xFFFFFFFFFFFFFFF8;
      *v348 = v354 | *v348 & 7;
      v348[1] = (unint64_t)v349;
      *(_QWORD *)(v354 + 8) = v348;
      *v349 = *v349 & 7 | (unint64_t)v348;
      v355 = (_QWORD ***)v1282[7];
      if (v355)
        ((void (*)(_QWORD ***, unint64_t *))(*v355)[3])(v355, v348);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v348, v347, (const llvm::MachineOperand *)v1313);
      v1301[0] = v347;
      v1301[1] = v348;
      if (v340)
      {
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = (void *)v338;
      }
      else
      {
        v730 = *(_DWORD *)(v336 + 68);
        v1313[1] = 0;
        v1313[2] = 0;
        HIDWORD(v1313[0]) = v730;
        LODWORD(v1313[0]) = 0;
        *(_QWORD *)&v1314 = 0;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v348, v347, (const llvm::MachineOperand *)v1313);
      v731 = *(_DWORD *)(v336 + 36);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v731;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v348, v347, (const llvm::MachineOperand *)v1313);
      sub_1C49400A8((uint64_t)v1301);
      v70 = v1279;
      v199 = *(_QWORD *)(v1279 + 24);
      v200 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v200 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v200 = v1279;
          do
            v200 = *(_QWORD *)(v200 + 8);
          while ((*(_WORD *)(v200 + 44) & 8) != 0);
        }
      }
      goto LABEL_286;
    case 2452:
      v624 = *(_DWORD **)(v1279 + 32);
      v625 = v624[9];
      v626 = v624[17];
      v1262 = v624[25];
      v1269 = sub_1C554C050(v1262, v1274);
      v1276 = v627;
      v1301[0] = &off_1E7FA5F48;
      LODWORD(v1301[1]) = 2;
      LODWORD(v1313[0]) = v625;
      LODWORD(v1313[2]) = 0;
      v628 = v1282;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 19, v1301, 1, v1313, 1, 0);
      v630 = *(_DWORD *)(*(_QWORD *)(v629 + 32) + 4);
      v1301[0] = &off_1E7FA5F10;
      LODWORD(v1301[1]) = 2;
      v631 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v628 + 32))(v628, 19, v1301, 1, 0, 0, 0);
      v633 = v632;
      v1313[1] = 0;
      v1313[2] = 0;
      *(_QWORD *)&v1314 = 0;
      HIDWORD(v1313[0]) = v630;
      LODWORD(v1313[0]) = 256;
      llvm::MachineInstr::addOperand(v632, v631, (const llvm::MachineOperand *)v1313);
      v1301[0] = &off_1E7FA5F10;
      LODWORD(v1301[1]) = 2;
      v634 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v628 + 32))(v628, 19, v1301, 1, 0, 0, 0);
      v636 = v635;
      v1313[1] = 0;
      v1313[2] = 0;
      *(_QWORD *)&v1314 = 0;
      HIDWORD(v1313[0]) = v630;
      LODWORD(v1313[0]) = 512;
      llvm::MachineInstr::addOperand(v635, v634, (const llvm::MachineOperand *)v1313);
      v1301[0] = &off_1E7FA5FF0;
      LODWORD(v1301[1]) = 2;
      v637 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v628 + 32))(v628, 18, v1301, 1, 0, 0, 0);
      v639 = v638;
      v640 = *(_DWORD *)(*((_QWORD *)v633 + 4) + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v640;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v638, v637, (const llvm::MachineOperand *)v1313);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)1;
      llvm::MachineInstr::addOperand(v639, v637, (const llvm::MachineOperand *)v1313);
      v641 = *(_DWORD *)(*((_QWORD *)v636 + 4) + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v641;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v639, v637, (const llvm::MachineOperand *)v1313);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)2;
      llvm::MachineInstr::addOperand(v639, v637, (const llvm::MachineOperand *)v1313);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v626;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v639, v637, (const llvm::MachineOperand *)v1313);
      LODWORD(v1313[0]) = 1;
      v642 = v1282;
      v1313[1] = 0;
      v1313[2] = (void *)3;
      llvm::MachineInstr::addOperand(v639, v637, (const llvm::MachineOperand *)v1313);
      if (v1276)
        v643 = 752;
      else
        v643 = 755;
      if (v1276)
        v644 = 746;
      else
        v644 = 749;
      if (*(_BYTE *)(v10 + 1654))
        v645 = v643;
      else
        v645 = v644;
      v647 = sub_1C55437B8(v1282, v645);
      v648 = (unint64_t *)v646;
      v649 = (unint64_t *)v1282[6];
      v650 = *(_QWORD ***)(v1282[5] + 40);
      *(_QWORD *)(v646 + 24) = v650;
      v651 = v650[4];
      v652 = *(unsigned int *)(v646 + 40);
      if ((_DWORD)v652)
      {
        v1157 = *(_QWORD *)(v646 + 32);
        v1158 = v651[5];
        v1159 = 32 * v652;
        v642 = v1282;
        do
        {
          if (!*(_BYTE *)v1157)
          {
            v1160 = *(unsigned int *)(v1157 + 4);
            if ((int)v1160 >= 0)
              v1161 = (uint64_t *)(*(_QWORD *)(v1158 + 272) + 8 * v1160);
            else
              v1161 = (uint64_t *)(*(_QWORD *)(v1158 + 24) + 16 * (v1160 & 0x7FFFFFFF) + 8);
            v1162 = *v1161;
            if (*v1161)
            {
              v1163 = *(_QWORD *)(v1162 + 16);
              *(_QWORD *)(v1162 + 16) = v1157;
              *(_QWORD *)(v1157 + 16) = v1163;
              if ((*(_BYTE *)(v1157 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1157 + 24) = v1162;
              }
              else
              {
                *(_QWORD *)(v1157 + 24) = 0;
                v1161 = (uint64_t *)(v1163 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1157 + 16) = v1157;
              *(_QWORD *)(v1157 + 24) = 0;
            }
            *v1161 = v1157;
          }
          v1157 += 32;
          v1159 -= 32;
        }
        while (v1159);
      }
      v653 = v651[91];
      if (v653)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v653 + 24))(v653, v646);
      v654 = *v649 & 0xFFFFFFFFFFFFFFF8;
      *v648 = v654 | *v648 & 7;
      v648[1] = (unint64_t)v649;
      *(_QWORD *)(v654 + 8) = v648;
      *v649 = *v649 & 7 | (unint64_t)v648;
      v655 = v642[7];
      if (v655)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v655 + 24))(v655, v648);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v648, v647, (const llvm::MachineOperand *)v1313);
      if (v1276)
      {
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = (void *)v1269;
      }
      else
      {
        v1313[1] = 0;
        v1313[2] = 0;
        HIDWORD(v1313[0]) = v1262;
        LODWORD(v1313[0]) = 0;
        *(_QWORD *)&v1314 = 0;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v648, v647, (const llvm::MachineOperand *)v1313);
      v768 = *(_DWORD *)(*((_QWORD *)v639 + 4) + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v768;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v648, v647, (const llvm::MachineOperand *)v1313);
      sub_1C554AE8C(v648, v1246, v11);
      v70 = v1279;
      v199 = *(_QWORD *)(v1279 + 24);
      v200 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v200 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v200 = v1279;
          do
            v200 = *(_QWORD *)(v200 + 8);
          while ((*(_WORD *)(v200 + 44) & 8) != 0);
        }
      }
      goto LABEL_286;
    case 2471:
    case 2472:
    case 2473:
    case 2474:
    case 2475:
    case 2476:
    case 2477:
    case 2478:
      v64 = v1279;
      if (!sub_1C493E424(v1279, 1u, (uint64_t)v18, 0, v1274, v1282, (uint64_t)v1266))
        return 0;
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
      goto LABEL_65;
    case 2487:
      v194 = v1279;
      v589 = *(_QWORD *)(v1279 + 32);
      LODWORD(v1301[0]) = *(_DWORD *)(v589 + 4);
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = *(_DWORD *)(v589 + 32 * (v6 + 1) + 4);
      LODWORD(v1313[2]) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 314, v1301, 1, v1313, 1, 0);
      v197 = *(_QWORD *)(v1279 + 24);
      v198 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v198 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v198 = v1279;
          do
            v198 = *(_QWORD *)(v198 + 8);
          while ((*(_WORD *)(v198 + 44) & 8) != 0);
        }
      }
      goto LABEL_872;
    case 2488:
    case 2579:
      v265 = *(_QWORD *)(v1279 + 32);
      v266 = *(_DWORD *)(v265 + 68);
      if (v266 < 0
        && (v266 & 0x7FFFFFFFu) < *(_DWORD *)(v1274 + 432)
        && *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (v266 & 0x7FFFFFFF)) == 9)
      {
        v1301[0] = (void *)129;
        v267 = v265 + 64;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v266;
        LODWORD(v1313[2]) = 0;
        sub_1C5546B4C(v1282, 118, (unint64_t *)v1301, (int *)v1313);
        v269 = v268;
        (*(void (**)(_QWORD *, uint64_t))(*v1266 + 32))(v1266, v1279);
        llvm::MachineOperand::setReg(v267, *(_DWORD *)(*(_QWORD *)(v269 + 32) + 4));
        (*(void (**)(_QWORD *, uint64_t))(*v1266 + 40))(v1266, v1279);
      }
      return 1;
    case 2492:
      v691 = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      if (v691 < 0)
      {
        v834 = v691 & 0x7FFFFFFF;
        v693 = v1282;
        if (v834 >= *(_DWORD *)(v1274 + 432))
          v692 = 0;
        else
          v692 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * v834);
      }
      else
      {
        v692 = 0;
        v693 = v1282;
      }
      v1301[0] = (void *)129;
      LODWORD(v1301[1]) = 0;
      v930 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v693 + 32))(v693, 320, v1301, 1, 0, 0, 0);
      v932 = v931;
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)34;
      llvm::MachineInstr::addOperand(v931, v930, (const llvm::MachineOperand *)v1313);
      if (((1 << v14) & 0x2C0) != 0)
      {
        if (v692 == (void *)129)
        {
          v933 = v1282;
        }
        else
        {
          v1301[0] = v692;
          LODWORD(v1301[1]) = 0;
          v1313[0] = v930;
          v1313[1] = v932;
          LODWORD(v1313[2]) = 1;
          v933 = v1282;
          v930 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, v1301, 1, v1313, 1, 0);
          v932 = v934;
        }
        *(_QWORD *)&v1296 = v692;
        DWORD2(v1296) = 0;
        v935 = sub_1C5544694((uint64_t)v933, (unint64_t *)&v1296, 8);
        v1301[0] = v692;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v930;
        v1313[1] = v932;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v935;
        *((_QWORD *)&v1314 + 1) = v936;
        LODWORD(v1315) = 1;
        v937 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v933 + 32))(v933, 47, v1301, 1, v1313, 2, 0);
        v939 = v938;
        v940 = (_QWORD *)v1274;
        LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, (uint64_t)v692, "", 0);
        v941 = sub_1C5547D24(v933, 2586, (int *)v1313, 1, 0);
        v1301[0] = v692;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v941;
        v1313[1] = v942;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1296 = v692;
        DWORD2(v1296) = 0;
        *(_QWORD *)&v1314 = sub_1C5544694((uint64_t)v933, (unint64_t *)&v1296, 2);
        *((_QWORD *)&v1314 + 1) = v943;
        LODWORD(v1315) = 1;
        v944 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v933 + 32))(v933, 128, v1301, 1, v1313, 2, 0);
        v1301[0] = v692;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v937;
        v1313[1] = v939;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v944;
        *((_QWORD *)&v1314 + 1) = v945;
        LODWORD(v1315) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v933 + 32))(v933, 45, v1301, 1, v1313, 2, 0);
        goto LABEL_847;
      }
      v940 = (_QWORD *)v1274;
      if (v692 != (void *)129)
      {
        v1301[0] = v692;
        LODWORD(v1301[1]) = 0;
        v1313[0] = v930;
        v1313[1] = v932;
        LODWORD(v1313[2]) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 126, v1301, 1, v1313, 1, 0);
LABEL_847:
        v932 = v946;
      }
      v204 = *(_DWORD *)(*((_QWORD *)v932 + 4) + 4);
      v205 = v940;
      v206 = v1279;
      v207 = v1266;
LABEL_342:
      sub_1C4923194(v205, v206, v204, v207);
      return 1;
    case 2517:
      goto LABEL_343;
    case 2522:
      v28 = v1279;
      v590 = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      v591 = *(_QWORD *)(*(_QWORD *)(v1279 + 24) + 16);
      if (!v591)
        goto LABEL_582;
      while (1)
      {
        v591 = *(_QWORD *)(v591 + 8);
        if (!v591)
          break;
        v592 = *(_QWORD *)(v591 + 24);
        v593 = *(unsigned __int8 *)(v592 + 16);
        if (v592)
          v594 = v593 >= 0x1C;
        else
          v594 = 0;
        if (v594 && v593 - 29 < 0xB)
        {
LABEL_582:
          v1301[0] = (void *)129;
          LODWORD(v1301[1]) = 0;
          LODWORD(v1313[0]) = 313;
          LODWORD(v1313[2]) = 0;
          v596 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 19, v1301, 1, v1313, 1, 0);
          v598 = v597;
          if (*(_BYTE *)(v10 + 1654))
          {
            v599 = v596;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v600 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 0);
            v602 = v601;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v603 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 1);
            v1301[0] = (void *)129;
            LODWORD(v1301[1]) = 0;
            LODWORD(v1313[0]) = 32;
            LODWORD(v1313[2]) = 2;
            *(_QWORD *)&v1314 = v599;
            *((_QWORD *)&v1314 + 1) = v598;
            LODWORD(v1315) = 1;
            *((_QWORD *)&v1315 + 1) = v600;
            *(_QWORD *)&v1316 = v602;
            DWORD2(v1316) = 1;
            v1317 = v603;
            v1318 = v604;
            v1319 = 1;
            v1320 = v600;
            v1321 = v602;
            v1322 = 1;
            (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
            v606 = v605;
            LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 257, "", 0);
            v607 = sub_1C5547D24(v1282, 2579, (int *)v1313, 1, 0);
            v609 = v608;
            v610 = *(_DWORD *)(*(_QWORD *)(v606 + 32) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v610;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v608, v607, (const llvm::MachineOperand *)v1313);
            LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 257, "", 0);
            v611 = sub_1C5547D24(v1282, 2524, (int *)v1313, 1, 0);
            v613 = v612;
            v614 = *(_DWORD *)(*((_QWORD *)v609 + 4) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v614;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v612, v611, (const llvm::MachineOperand *)v1313);
            LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 257, "", 0);
            v615 = sub_1C5547D24(v1282, 2168, (int *)v1313, 1, 0);
            v617 = v616;
            v618 = *(_DWORD *)(*((_QWORD *)v613 + 4) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v618;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v616, v615, (const llvm::MachineOperand *)v1313);
            v1301[0] = (void *)129;
            LODWORD(v1301[1]) = 0;
            v1313[0] = v615;
            v1313[1] = v617;
            LODWORD(v1313[2]) = 1;
            v619 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 119, v1301, 1, v1313, 1, 0);
            v621 = v620;
            *(_QWORD *)&v1296 = 129;
            DWORD2(v1296) = 0;
            v622 = (void *)sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1296, 31);
            LODWORD(v1301[0]) = v590;
            LODWORD(v1301[1]) = 1;
            v1313[0] = v622;
            v1313[1] = v623;
            LODWORD(v1313[2]) = 1;
            *(_QWORD *)&v1314 = v619;
            *((_QWORD *)&v1314 + 1) = v621;
            LODWORD(v1315) = 1;
            (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 46, v1301, 1, v1313, 2, 0);
          }
          else
          {
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v1255 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 0);
            v900 = v899;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v1271 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 1);
            v902 = v901;
            v1222 = v901;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v1249 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 2);
            v1224 = v903;
            v1313[0] = (void *)129;
            LODWORD(v1313[1]) = 0;
            v904 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 3);
            v1227 = v905;
            v1232 = v904;
            LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 129, "", 0);
            v906 = sub_1C5547D24(v1282, 2584, (int *)v1313, 1, 0);
            v908 = v907;
            v909 = *(_DWORD *)(*(_QWORD *)(v598 + 32) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v909;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            v1243 = v907;
            llvm::MachineInstr::addOperand(v907, v906, (const llvm::MachineOperand *)v1313);
            v910 = *(_DWORD *)(*((_QWORD *)v900 + 4) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v910;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v908, v906, (const llvm::MachineOperand *)v1313);
            LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 129, "", 0);
            v911 = sub_1C5547D24(v1282, 2584, (int *)v1313, 1, 0);
            v913 = v912;
            v914 = *(_DWORD *)(*(_QWORD *)(v598 + 32) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v914;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v912, v911, (const llvm::MachineOperand *)v1313);
            v915 = *(_DWORD *)(*((_QWORD *)v902 + 4) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v915;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v913, v911, (const llvm::MachineOperand *)v1313);
            LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 129, "", 0);
            v916 = sub_1C5547D24(v1282, 2584, (int *)v1313, 1, 0);
            v918 = v917;
            v919 = *(_DWORD *)(*(_QWORD *)(v598 + 32) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v919;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v917, v916, (const llvm::MachineOperand *)v1313);
            v920 = *(_DWORD *)(*((_QWORD *)v1224 + 4) + 4);
            v1313[1] = 0;
            v1313[2] = 0;
            HIDWORD(v1313[0]) = v920;
            LODWORD(v1313[0]) = 0;
            *(_QWORD *)&v1314 = 0;
            llvm::MachineInstr::addOperand(v918, v916, (const llvm::MachineOperand *)v1313);
            v1301[0] = (void *)129;
            LODWORD(v1301[1]) = 0;
            LODWORD(v1313[0]) = 32;
            LODWORD(v1313[2]) = 2;
            *(_QWORD *)&v1314 = v916;
            *((_QWORD *)&v1314 + 1) = v918;
            LODWORD(v1315) = 1;
            *((_QWORD *)&v1315 + 1) = v1255;
            *(_QWORD *)&v1316 = v900;
            DWORD2(v1316) = 1;
            v1317 = v1249;
            v1318 = v1224;
            v1319 = 1;
            v1320 = v1232;
            v1321 = v1227;
            v1322 = 1;
            v921 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
            v1301[0] = (void *)129;
            LODWORD(v1301[1]) = 0;
            LODWORD(v1313[0]) = 32;
            LODWORD(v1313[2]) = 2;
            *(_QWORD *)&v1314 = v911;
            *((_QWORD *)&v1314 + 1) = v913;
            v28 = v1279;
            LODWORD(v1315) = 1;
            *((_QWORD *)&v1315 + 1) = v1255;
            *(_QWORD *)&v1316 = v900;
            DWORD2(v1316) = 1;
            v1317 = v1271;
            v1318 = v1222;
            v1319 = 1;
            v1320 = v921;
            v1321 = v922;
            v1322 = 1;
            v923 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
            LODWORD(v1301[0]) = v590;
            LODWORD(v1301[1]) = 1;
            LODWORD(v1313[0]) = 32;
            LODWORD(v1313[2]) = 2;
            *(_QWORD *)&v1314 = v906;
            *((_QWORD *)&v1314 + 1) = v1243;
            LODWORD(v1315) = 1;
            *((_QWORD *)&v1315 + 1) = v1255;
            *(_QWORD *)&v1316 = v900;
            DWORD2(v1316) = 1;
            v1317 = v1255;
            v1318 = v900;
            v1319 = 1;
            v1320 = v923;
            v1321 = v924;
            v1322 = 1;
            (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
          }
          v555 = *(_QWORD *)(v28 + 24);
          v556 = v28;
          if ((*(_BYTE *)v28 & 4) == 0)
          {
            v556 = v28;
            if ((*(_WORD *)(v28 + 44) & 8) != 0)
            {
              v556 = v28;
              do
                v556 = *(_QWORD *)(v556 + 8);
              while ((*(_WORD *)(v556 + 44) & 8) != 0);
            }
          }
          goto LABEL_515;
        }
      }
      LODWORD(v1313[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      LODWORD(v1313[1]) = 1;
      sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 0);
      v555 = *(_QWORD *)(v1279 + 24);
      v556 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v556 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v556 = v1279;
          do
            v556 = *(_QWORD *)(v556 + 8);
          while ((*(_WORD *)(v556 + 44) & 8) != 0);
        }
      }
      goto LABEL_515;
    case 2526:
      goto LABEL_431;
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
      v64 = v1279;
      v65 = sub_1C493E424(v1279, 0, (uint64_t)v18, 0, v1274, v1282, (uint64_t)v1266);
      if (!v65)
        return 0;
      LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = *(_DWORD *)(*(_QWORD *)(v65 + 32) + 4);
      LODWORD(v1313[2]) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 19, v1301, 1, v1313, 1, 0);
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
      goto LABEL_65;
    case 2606:
    case 2607:
    case 2608:
    case 2609:
      v64 = v1279;
      v201 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1279 + 32) + 100), v1274);
      if (v202)
      {
        v203 = v1282;
        if (!v201)
        {
          v204 = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 68);
          v205 = (_QWORD *)v1274;
          v206 = v1279;
          v207 = v1266;
          goto LABEL_342;
        }
      }
      else
      {
        v573 = *((_QWORD *)v1258 + 6);
        v203 = v1282;
        if (!v573)
        {
          v573 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::ConstantFP *))(**((_QWORD **)v1258 + 1) + 216))(*((_QWORD *)v1258 + 1), (uint64_t)v1258 + 128, v1258);
          *((_QWORD *)v1258 + 6) = v573;
        }
        *(_BYTE *)(v573 + 453) = 1;
      }
      v574 = dword_1C660B710[(int)v18 - 2606];
      v575 = *(_DWORD **)(v1279 + 32);
      LODWORD(v1301[0]) = v575[1];
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = v575[17];
      LODWORD(v1313[2]) = 0;
      LODWORD(v1314) = v575[25];
      LODWORD(v1315) = 0;
      DWORD2(v1315) = v575[33];
      DWORD2(v1316) = 0;
      LODWORD(v1317) = v575[41];
      v1319 = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v203 + 32))(v203, v574, v1301, 1, v1313, 4, 0);
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
      goto LABEL_65;
    case 2616:
    case 2617:
      v270 = *(_DWORD **)(v1279 + 32);
      v271 = v270[1];
      v272 = v270[17];
      v273 = v270[25];
      v1260 = v271;
      if (v271 < 0)
      {
        v276 = v1282;
        if ((v271 & 0x7FFFFFFFu) >= *(_DWORD *)(v1274 + 432))
        {
          v274 = 0;
          v275 = 2581;
        }
        else
        {
          v274 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * (v271 & 0x7FFFFFFF));
          if (v274 == (void *)129)
            v275 = 2580;
          else
            v275 = 2581;
        }
      }
      else
      {
        v274 = 0;
        v275 = 2581;
        v276 = v1282;
      }
      *(_QWORD *)&v1296 = 129;
      DWORD2(v1296) = 0;
      v835 = sub_1C5544694((uint64_t)v276, (unint64_t *)&v1296, 28);
      v1301[0] = (void *)129;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = v273;
      LODWORD(v1313[2]) = 0;
      *(_QWORD *)&v1314 = v835;
      *((_QWORD *)&v1314 + 1) = v836;
      v1270 = v273;
      LODWORD(v1315) = 1;
      v837 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 65, v1301, 1, v1313, 2, 0);
      v839 = v838;
      LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, (uint64_t)v274, "", 0);
      v840 = v275;
      v1242 = v275;
      v841 = sub_1C5547D24(v276, v275, (int *)v1313, 1, 0);
      v843 = v842;
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v272;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      v1237 = v841;
      llvm::MachineInstr::addOperand(v842, v841, (const llvm::MachineOperand *)v1313);
      v844 = *(_DWORD *)(v839[4] + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v844;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v843, v841, (const llvm::MachineOperand *)v1313);
      v1313[0] = (void *)129;
      LODWORD(v1313[1]) = 0;
      v1283 = sub_1C5544694((uint64_t)v276, (unint64_t *)v1313, 1);
      v1254 = v845;
      v1301[0] = (void *)129;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v837;
      v1313[1] = v839;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1283;
      *((_QWORD *)&v1314 + 1) = v845;
      LODWORD(v1315) = 1;
      v846 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 45, v1301, 1, v1313, 2, 0);
      v848 = v847;
      LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, (uint64_t)v274, "", 0);
      v849 = sub_1C5547D24(v276, v840, (int *)v1313, 1, 0);
      v851 = v850;
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v272;
      v852 = v272;
      v1248 = v272;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v850, v849, (const llvm::MachineOperand *)v1313);
      v853 = *(_DWORD *)(v848[4] + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v853;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v851, v849, (const llvm::MachineOperand *)v1313);
      v1301[0] = v274;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = 32;
      LODWORD(v1313[2]) = 2;
      *(_QWORD *)&v1314 = v846;
      *((_QWORD *)&v1314 + 1) = v848;
      LODWORD(v1315) = 1;
      DWORD2(v1315) = v1270;
      DWORD2(v1316) = 0;
      v1317 = (uint64_t)v849;
      v1318 = v851;
      v1319 = 1;
      v1320 = (uint64_t)v1237;
      v1321 = v843;
      v1322 = 1;
      v854 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 51, v1301, 1, v1313, 5, 0);
      v1231 = v855;
      v1238 = v854;
      v1301[0] = (void *)129;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v846;
      v1313[1] = v848;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1283;
      *((_QWORD *)&v1314 + 1) = v1254;
      LODWORD(v1315) = 1;
      v856 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 45, v1301, 1, v1313, 2, 0);
      v858 = v857;
      LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, (uint64_t)v274, "", 0);
      v859 = sub_1C5547D24(v276, v1242, (int *)v1313, 1, 0);
      v861 = v860;
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v852;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v860, v859, (const llvm::MachineOperand *)v1313);
      v862 = *(_DWORD *)(v858[4] + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v862;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v861, v859, (const llvm::MachineOperand *)v1313);
      v1301[0] = v274;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = 32;
      LODWORD(v1313[2]) = 2;
      *(_QWORD *)&v1314 = v856;
      *((_QWORD *)&v1314 + 1) = v858;
      LODWORD(v1315) = 1;
      DWORD2(v1315) = v1270;
      DWORD2(v1316) = 0;
      v1317 = (uint64_t)v859;
      v1318 = v861;
      v1319 = 1;
      v1320 = v1238;
      v1321 = v1231;
      v1322 = 1;
      v863 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 51, v1301, 1, v1313, 5, 0);
      v865 = v864;
      v1301[0] = (void *)129;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v856;
      v1313[1] = v858;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1283;
      *((_QWORD *)&v1314 + 1) = v1254;
      LODWORD(v1315) = 1;
      v866 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 45, v1301, 1, v1313, 2, 0);
      v868 = v867;
      LODWORD(v1313[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, (uint64_t)v274, "", 0);
      v869 = sub_1C5547D24(v276, v1242, (int *)v1313, 1, 0);
      v871 = v870;
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v1248;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v870, v869, (const llvm::MachineOperand *)v1313);
      v872 = *(_DWORD *)(*(_QWORD *)(v868 + 32) + 4);
      v1313[1] = 0;
      v1313[2] = 0;
      HIDWORD(v1313[0]) = v872;
      LODWORD(v1313[0]) = 0;
      *(_QWORD *)&v1314 = 0;
      llvm::MachineInstr::addOperand(v871, v869, (const llvm::MachineOperand *)v1313);
      LODWORD(v1301[0]) = v1260;
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = 32;
      LODWORD(v1313[2]) = 2;
      *(_QWORD *)&v1314 = v866;
      *((_QWORD *)&v1314 + 1) = v868;
      LODWORD(v1315) = 1;
      DWORD2(v1315) = v1270;
      DWORD2(v1316) = 0;
      v1317 = (uint64_t)v869;
      v1318 = v871;
      v1319 = 1;
      v1320 = v863;
      v1321 = v865;
      v1322 = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v276 + 32))(v276, 51, v1301, 1, v1313, 5, 0);
      v70 = v1279;
      v199 = *(_QWORD *)(v1279 + 24);
      v200 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v200 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v200 = v1279;
          do
            v200 = *(_QWORD *)(v200 + 8);
          while ((*(_WORD *)(v200 + 44) & 8) != 0);
        }
      }
      goto LABEL_286;
    case 2623:
      v694 = *(_QWORD *)(v1279 + 32);
      v695 = *(unsigned int *)(v694 + 32 * (v6 + 1) + 4);
      v696 = *(_DWORD *)(v694 + 4);
      if (v696 < 0)
      {
        v698 = v1274;
        if ((v696 & 0x7FFFFFFFu) >= *(_DWORD *)(v1274 + 432))
          v697 = 0;
        else
          v697 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * (v696 & 0x7FFFFFFF));
      }
      else
      {
        v697 = 0;
        v698 = v1274;
      }
      *(_QWORD *)&v1296 = v697;
      v947 = (uint64_t *)(*(_QWORD *)(v698 + 24) + 16 * (v695 & 0x7FFFFFFF) + 8);
      if ((int)v695 >= 0)
        v947 = (uint64_t *)(*(_QWORD *)(v698 + 272) + 8 * v695);
      v948 = *v947;
      if ((*(_BYTE *)(v948 + 3) & 1) == 0)
        v948 = *(_QWORD *)(v948 + 24);
      v949 = *(_QWORD *)(v948 + 8);
      if (**(_WORD **)(v949 + 16) == 121 && (v1078 = *(_QWORD *)(*(_QWORD *)(v949 + 32) + 48)) != 0)
      {
        v1079 = ***(llvm::ConstantFP ****)v1258;
        v1081 = sub_1C4825F50((unint64_t *)&v1296);
        if ((_DWORD)v1080 == 1)
        v1082 = *(_QWORD *)(v1078 + 32);
        if ((_UNKNOWN *)v1082 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1313[1], (const llvm::detail::DoubleAPFloat *)(v1078 + 32));
        }
        else
        {
          v1313[1] = *(void **)(v1078 + 32);
          if ((*(_DWORD *)(v1082 + 8) + 64) >= 0x80)
            v1313[2] = (void *)operator new[]();
          v1083 = *(_BYTE *)(v1078 + 52);
          v1084 = v1083 & 7;
          BYTE4(v1314) = BYTE4(v1314) & 0xF0 | v1083 & 0xF;
          LODWORD(v1314) = *(_DWORD *)(v1078 + 48);
          v1086 = (v1083 & 6) != 0 && v1084 != 3;
          if (v1084 == 1 || v1086)
          {
            v1088 = *((unsigned int *)v1313[1] + 2);
            if ((v1088 - 64) <= 0xFFFFFF7F)
              v1089 = (void **)v1313[2];
            else
              v1089 = &v1313[2];
            v1092 = *(void ***)(v1078 + 40);
            v1091 = (void **)(v1078 + 40);
            v1090 = v1092;
            if ((*((_DWORD *)*(v1091 - 1) + 2) - 64) >= 0xFFFFFF80)
              v1090 = v1091;
            if (v1088 <= 0xFFFFFFBF)
            {
              v1093 = (unint64_t)(v1088 + 64) >> 6;
              do
              {
                v1094 = *v1090++;
                *v1089++ = v1094;
                --v1093;
              }
              while (v1093);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v1313, &unk_1C866F198, 1, &v1298);
        v1095 = llvm::APFloat::convertToDouble((llvm::APFloat *)v1313);
        v1096 = sin(v1095 * 1.57079633);
        sub_1C4940308((uint64_t)v1301, v1081, v1096);
        v1098 = llvm::ConstantFP::get(v1079, (llvm::LLVMContext *)v1301, v1097);
        if (v1301[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1302);
        }
        else if ((*((_DWORD *)v1301[1] + 2) - 64) <= 0xFFFFFF7F && (_QWORD)v1302)
        {
          MEMORY[0x1CAA32F9C](v1302, 0x1000C8000313F17);
        }
        if (v1313[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1313[2]);
        }
        else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
        {
          MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
        }
        LODWORD(v1313[0]) = v696;
        LODWORD(v1313[1]) = 1;
        (*(void (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1313, v1098);
        v194 = v1279;
      }
      else
      {
        v950 = *(unsigned __int16 *)(v1279 + 44);
        v952 = sub_1C4825F50((unint64_t *)&v1296);
        if ((_DWORD)v951 == 1)
        if (v952 == 16)
        {
          v1301[0] = (void *)257;
          LODWORD(v1301[1]) = 0;
          LODWORD(v1313[0]) = v695;
          LODWORD(v1313[2]) = 0;
          v953 = v1282;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 178, v1301, 1, v1313, 1, 0);
          LODWORD(v695) = *(_DWORD *)(*(_QWORD *)(v954 + 32) + 4);
        }
        else
        {
          v953 = v1282;
        }
        v1301[0] = (void *)257;
        LODWORD(v1301[1]) = 0;
        LODWORD(v1313[0]) = v695;
        LODWORD(v1313[2]) = 0;
        v955 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v953 + 32))(v953, 314, v1301, 1, v1313, 1, 0);
        v957 = v956;
        LODWORD(v1301[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 257, "", 0);
        v958 = sub_1C5547D24(v953, 2624, (int *)v1301, 1, 0);
        v960 = v959;
        v961 = *(_DWORD *)(v957[4] + 4);
        v1313[1] = 0;
        v1313[2] = 0;
        HIDWORD(v1313[0]) = v961;
        LODWORD(v1313[0]) = 0;
        *(_QWORD *)&v1314 = 0;
        llvm::MachineInstr::addOperand(v959, v958, (const llvm::MachineOperand *)v1313);
        *((_WORD *)v960 + 22) = *((_WORD *)v960 + 22) & 0xC | v950 & 0xFFF3;
        v963 = sub_1C4825F50((unint64_t *)&v1296);
        if ((_DWORD)v962 == 1)
        v964 = v696;
        if (v963 == 16)
          v964 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1274, 257, "", 0);
        LODWORD(v1301[0]) = v964;
        LODWORD(v1301[1]) = 1;
        v1313[0] = v955;
        v1313[1] = v957;
        LODWORD(v1313[2]) = 1;
        *(_QWORD *)&v1314 = v958;
        *((_QWORD *)&v1314 + 1) = v960;
        LODWORD(v1315) = 1;
        v965 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, v950 | 0x100000000);
        v967 = v966;
        v969 = sub_1C4825F50((unint64_t *)&v1296);
        if ((_DWORD)v968 == 1)
        v194 = v1279;
        if (v969 == 16)
        {
          LODWORD(v1301[0]) = v696;
          LODWORD(v1301[1]) = 1;
          v1313[0] = v965;
          v1313[1] = v967;
          LODWORD(v1313[2]) = 1;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 179, v1301, 1, v1313, 1, 0);
        }
      }
      v197 = *(_QWORD *)(v194 + 24);
      v198 = v194;
      if ((*(_BYTE *)v194 & 4) == 0)
      {
        v198 = v194;
        if ((*(_WORD *)(v194 + 44) & 8) != 0)
        {
          v198 = v194;
          do
            v198 = *(_QWORD *)(v198 + 8);
          while ((*(_WORD *)(v198 + 44) & 8) != 0);
        }
      }
      goto LABEL_872;
    case 2628:
      if (!*(_BYTE *)(v10 + 1681))
        llvm::report_fatal_error((llvm *)"Unsupported sqrt intrinsic.", (const char *)1);
      v666 = (v6 + 1);
      v64 = v1279;
      v667 = *(_QWORD *)(v1279 + 32);
      LODWORD(v1301[0]) = *(_DWORD *)(v667 + 4);
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = *(_DWORD *)(v667 + 32 * v666 + 4);
      LODWORD(v1313[2]) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v1282 + 32))(v1282, 356, v1301, 1, v1313, 1, *(unsigned __int16 *)(v1279 + 44) | 0x100000000);
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
      goto LABEL_65;
    case 2685:
    case 2686:
      v356 = *(_QWORD *)(v1279 + 32);
      v357 = *(_DWORD *)(v356 + 68);
      v358 = *(_DWORD *)(v356 + 4);
      if (v358 < 0)
      {
        v732 = v358 & 0x7FFFFFFF;
        v361 = v1274;
        v360 = v1282;
        if (v732 >= *(_DWORD *)(v1274 + 432))
          v359 = 0;
        else
          v359 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * v732);
      }
      else
      {
        v359 = 0;
        v360 = v1282;
        v361 = v1274;
      }
      v873 = (void *)sub_1C554C050(v357, v361);
      v875 = v874;
      if (v874)
        v876 = 4096;
      else
        v876 = 4097;
      if ((_DWORD)v18 == 2685)
        v877 = 16;
      else
        v877 = 272;
      v1301[0] = v359;
      LODWORD(v1301[1]) = 0;
      v878 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v360 + 32))(v360, v876, v1301, 1, 0, 0, 0);
      v880 = v879;
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)v877;
      llvm::MachineInstr::addOperand(v879, v878, (const llvm::MachineOperand *)v1313);
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = (void *)4;
      llvm::MachineInstr::addOperand(v880, v878, (const llvm::MachineOperand *)v1313);
      if (v875)
      {
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = v873;
      }
      else
      {
        v1313[1] = 0;
        v1313[2] = 0;
        HIDWORD(v1313[0]) = v357;
        LODWORD(v1313[0]) = 0;
        *(_QWORD *)&v1314 = 0;
      }
      llvm::MachineInstr::addOperand(v880, v878, (const llvm::MachineOperand *)v1313);
      v20 = 1;
      LODWORD(v1313[0]) = 1;
      v1313[1] = 0;
      v1313[2] = 0;
      llvm::MachineInstr::addOperand(v880, v878, (const llvm::MachineOperand *)v1313);
      sub_1C554AE8C(v880, v1246, v11);
      v726 = *(_DWORD *)(*((_QWORD *)v880 + 4) + 4);
      v727 = (_QWORD *)v1274;
      v728 = v1279;
      v729 = v1266;
LABEL_802:
      sub_1C4923194(v727, v728, v726, v729);
      return v20;
    case 2703:
    case 2704:
      v64 = v1279;
      v283 = sub_1C493E424(v1279, 0, (uint64_t)v18, 0, v1274, v1282, (uint64_t)v1266);
      if (!v283)
        return 0;
      v20 = 1;
      if (!sub_1C493E424(v1279, 1u, (uint64_t)v18, *(_QWORD *)(v283 + 32), v1274, v1282, (uint64_t)v1266))
        return v20;
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
      goto LABEL_65;
    default:
      if (v1294 != 261)
      {
        if ((_DWORD)v18 != 2732)
          return v20;
LABEL_321:
        v224 = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
        if (v224 < 0)
        {
          v227 = v224 & 0x7FFFFFFF;
          v226 = (int)v18;
          if (v227 >= *(_DWORD *)(v1274 + 432))
            v225 = 0;
          else
            v225 = *(void **)(*(_QWORD *)(v1274 + 424) + 8 * v227);
        }
        else
        {
          v225 = 0;
          v226 = (int)v18;
        }
        v228 = sub_1C493E034(v226);
        if (sub_1C493E328(v228) >= 0x11)
          v229 = (uint64_t)v225;
        else
          v229 = 129;
        v1301[0] = (void *)v229;
        LODWORD(v1301[1]) = 0;
        v230 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v1282 + 32))(v1282, 320, v1301, 1, 0, 0, 0);
        v232 = v231;
        LODWORD(v1313[0]) = 1;
        v1313[1] = 0;
        v1313[2] = (void *)v228;
        llvm::MachineInstr::addOperand(v231, v230, (const llvm::MachineOperand *)v1313);
        if (v226 == 2132)
        {
          v233 = v1266;
          if (!*(_BYTE *)(v10 + 1656))
          {
LABEL_337:
            v234 = v1282;
            goto LABEL_338;
          }
          *(_QWORD *)&v1298 = v229;
          DWORD2(v1298) = 0;
          v1301[0] = v230;
          v1301[1] = v232;
          LODWORD(v1302) = 1;
          *(_QWORD *)&v1287 = v229;
          DWORD2(v1287) = 0;
          v234 = v1282;
          *((_QWORD *)&v1302 + 1) = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1287, 4);
          v1303 = v239;
          v1304 = 1;
          v240 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v234 + 32))(v234, 128, &v1298, 1, v1301, 2, 0);
          v242 = v241;
          v1294[0] = (void *)v229;
          LODWORD(v1294[1]) = 0;
          v243 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1294, 7);
          *(_QWORD *)&v1296 = v229;
          DWORD2(v1296) = 0;
          v1313[0] = v240;
          v1313[1] = v242;
          LODWORD(v1313[2]) = 1;
          *(_QWORD *)&v1314 = v243;
          *((_QWORD *)&v1314 + 1) = v244;
          LODWORD(v1315) = 1;
          v245 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v234 + 32))(v234, 65, &v1296, 1, v1313, 2, 0);
          v247 = v246;
          v1284 = (llvm::GlobalValue *)v229;
          LODWORD(v1285) = 0;
          v248 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1284, 10);
          *(_QWORD *)&v1296 = v229;
          DWORD2(v1296) = 0;
          v1313[0] = v245;
          v1313[1] = v247;
          LODWORD(v1313[2]) = 1;
          *(_QWORD *)&v1314 = v248;
          *((_QWORD *)&v1314 + 1) = v249;
          LODWORD(v1315) = 1;
          v250 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v234 + 32))(v234, 47, &v1296, 1, v1313, 2, 0);
          v252 = v251;
          *(_QWORD *)&v1296 = v229;
          DWORD2(v1296) = 0;
          v253 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1296, 15);
          v1301[0] = (void *)v229;
          LODWORD(v1301[1]) = 0;
          v1313[0] = v230;
          v1313[1] = v232;
          LODWORD(v1313[2]) = 1;
          *(_QWORD *)&v1314 = v253;
          *((_QWORD *)&v1314 + 1) = v254;
          LODWORD(v1315) = 1;
          v255 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v234 + 32))(v234, 65, v1301, 1, v1313, 2, 0);
          v1301[0] = (void *)v229;
          LODWORD(v1301[1]) = 0;
          v1313[0] = v250;
          v1313[1] = v252;
          LODWORD(v1313[2]) = 1;
          *(_QWORD *)&v1314 = v255;
          *((_QWORD *)&v1314 + 1) = v256;
          LODWORD(v1315) = 1;
          v237 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 45, v1301, 1, v1313, 2, 0);
        }
        else
        {
          v364 = v226 == 2491;
          v233 = v1266;
          if (!v364)
            goto LABEL_337;
          v234 = v1282;
          if (((1 << v14) & 0x2C0) == 0)
          {
LABEL_338:
            if (v225 != (void *)v229)
            {
              v1301[0] = v225;
              LODWORD(v1301[1]) = 0;
              v1313[0] = v230;
              v1313[1] = v232;
              LODWORD(v1313[2]) = 1;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v234 + 32))(v234, 126, v1301, 1, v1313, 1, 0);
              v232 = v257;
            }
            v204 = *(_DWORD *)(*((_QWORD *)v232 + 4) + 4);
            v205 = (_QWORD *)v1274;
            goto LABEL_341;
          }
          *(_QWORD *)&v1296 = v229;
          DWORD2(v1296) = 0;
          v235 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1296, 3);
          v1301[0] = (void *)v229;
          LODWORD(v1301[1]) = 0;
          v1313[0] = v230;
          v1313[1] = v232;
          LODWORD(v1313[2]) = 1;
          *(_QWORD *)&v1314 = v235;
          *((_QWORD *)&v1314 + 1) = v236;
          LODWORD(v1315) = 1;
          v237 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 65, v1301, 1, v1313, 2, 0);
        }
        v230 = (llvm::MachineFunction *)v237;
        v232 = v238;
        goto LABEL_338;
      }
LABEL_431:
      v208 = v1279;
      v434 = *(_QWORD *)(v1279 + 32);
      v435 = *(_DWORD *)(v434 + 4);
      if (v435 < 0)
      {
        v733 = v435 & 0x7FFFFFFF;
        v437 = v1274;
        if (v733 >= *(_DWORD *)(v1274 + 432))
          v436 = 0;
        else
          v436 = *(_QWORD *)(*(_QWORD *)(v1274 + 424) + 8 * v733);
      }
      else
      {
        v436 = 0;
        v437 = v1274;
      }
      *(_QWORD *)&v1298 = v436;
      v881 = v434 + 32 * (v6 + 1);
      v884 = *(_DWORD *)(v881 + 4);
      v883 = (_DWORD *)(v881 + 4);
      LODWORD(v882) = v884;
      v885 = *(_QWORD *)(v437 + 272) + 8 * v884;
      v886 = (uint64_t *)(*(_QWORD *)(v437 + 24) + 16 * (v884 & 0x7FFFFFFF) + 8);
      if (v884 >= 0)
        v886 = (uint64_t *)v885;
      v887 = *v886;
      if ((*(_BYTE *)(v887 + 3) & 1) == 0)
        v887 = *(_QWORD *)(v887 + 24);
      v888 = *(_QWORD *)(v887 + 8);
      if (**(_WORD **)(v888 + 16) == 121)
      {
        v998 = *(_QWORD *)(*(_QWORD *)(v888 + 32) + 48);
        if (v998)
        {
          v999 = *(_QWORD *)(v998 + 32);
          if ((_UNKNOWN *)v999 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1313[1], (const llvm::detail::DoubleAPFloat *)(v998 + 32));
          }
          else
          {
            v1313[1] = *(void **)(v998 + 32);
            if ((*(_DWORD *)(v999 + 8) + 64) >= 0x80)
              v1313[2] = (void *)operator new[]();
            v1000 = *(_BYTE *)(v998 + 52);
            v1001 = v1000 & 7;
            BYTE4(v1314) = BYTE4(v1314) & 0xF0 | v1000 & 0xF;
            LODWORD(v1314) = *(_DWORD *)(v998 + 48);
            v1003 = (v1000 & 6) != 0 && v1001 != 3;
            if (v1001 == 1 || v1003)
            {
              v1005 = *(unsigned int *)(v999 + 8);
              if ((v1005 - 64) <= 0xFFFFFF7F)
                v1006 = (void **)v1313[2];
              else
                v1006 = &v1313[2];
              v1009 = *(void ***)(v998 + 40);
              v1008 = (void **)(v998 + 40);
              v1007 = v1009;
              if ((*((_DWORD *)*(v1008 - 1) + 2) - 64) >= 0xFFFFFF80)
                v1007 = v1008;
              if (v1005 <= 0xFFFFFFBF)
              {
                v1010 = (unint64_t)(v1005 + 64) >> 6;
                do
                {
                  v1011 = *v1007++;
                  *v1006++ = v1011;
                  --v1010;
                }
                while (v1010);
              }
            }
          }
          llvm::APFloat::convert((uint64_t)v1313, &unk_1C866F198, 1, &v1296);
          v1012 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v1313));
          v1013 = ***(llvm::ConstantFP ****)v1258;
          v1015 = sub_1C4825F50((unint64_t *)&v1298);
          if ((_DWORD)v1014 == 1)
          sub_1C4940308((uint64_t)v1301, v1015, v1012);
          v1017 = llvm::ConstantFP::get(v1013, (llvm::LLVMContext *)v1301, v1016);
          if (v1301[1] == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1302);
          }
          else if ((*((_DWORD *)v1301[1] + 2) - 64) <= 0xFFFFFF7F && (_QWORD)v1302)
          {
            MEMORY[0x1CAA32F9C](v1302, 0x1000C8000313F17);
          }
          v993 = v1279;
          LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
          LODWORD(v1301[1]) = 1;
          (*(void (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v1017);
          v994 = *(_QWORD *)(v1279 + 24);
          v995 = v1279;
          if ((*(_BYTE *)v1279 & 4) == 0)
          {
            v995 = v1279;
            if ((*(_WORD *)(v1279 + 44) & 8) != 0)
            {
              v995 = v1279;
              do
                v995 = *(_QWORD *)(v995 + 8);
              while ((*(_WORD *)(v995 + 44) & 8) != 0);
            }
          }
          goto LABEL_947;
        }
      }
      if ((_DWORD)v18 == 2526)
        goto LABEL_810;
      v889 = v1282;
      if ((*(_WORD *)(v10 + 1020) & 1) != 0 || (*(_WORD *)(v1279 + 44) & 0x200) != 0)
        goto LABEL_1294;
      v891 = sub_1C4825F50((unint64_t *)&v1298);
      if ((_DWORD)v890 == 1)
      v882 = *v883;
      if (v891 == 16)
      {
LABEL_810:
        v889 = v1282;
        goto LABEL_1294;
      }
      if ((v882 & 0x80000000) != 0)
        v892 = (uint64_t *)(*(_QWORD *)(v437 + 24) + 16 * (v882 & 0x7FFFFFFF) + 8);
      else
        v892 = (uint64_t *)(*(_QWORD *)(v437 + 272) + 8 * v882);
      v1099 = *v892;
      v889 = v1282;
      if (!v1099)
        goto LABEL_1035;
      if ((*(_BYTE *)(v1099 + 3) & 1) != 0)
      {
        v208 = v1279;
        v889 = v1282;
      }
      else
      {
        v1099 = *(_QWORD *)(v1099 + 24);
        v208 = v1279;
        v889 = v1282;
        if (!v1099 || (*(_BYTE *)(v1099 + 3) & 1) == 0)
          goto LABEL_1035;
      }
      v1202 = *(_QWORD *)(v1099 + 8);
      if (v1202 && **(_WORD **)(v1202 + 16) == 178)
      {
LABEL_1294:
        LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v208 + 32) + 4);
        LODWORD(v1301[1]) = 1;
        LODWORD(v1313[0]) = v882;
        LODWORD(v1313[2]) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*v889 + 32))(v889, 335, v1301, 1, v1313, 1, *(unsigned __int16 *)(v208 + 44) | 0x100000000);
        v212 = *(_QWORD *)(v208 + 24);
        v213 = v208;
        if ((*(_BYTE *)v208 & 4) == 0)
        {
          v213 = v208;
          if ((*(_WORD *)(v208 + 44) & 8) != 0)
          {
            v213 = v208;
            do
              v213 = *(_QWORD *)(v213 + 8);
            while ((*(_WORD *)(v213 + 44) & 8) != 0);
          }
        }
        goto LABEL_1296;
      }
LABEL_1035:
      v1100 = ***(llvm::ConstantFP ****)v889[1];
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      DWORD2(v1296) = 32;
      *(_QWORD *)&v1296 = 1593835520;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
      v1265 = v1100;
      v1102 = llvm::ConstantFP::get(v1100, (llvm::LLVMContext *)v1313, v1101);
      v1103 = (*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*v889 + 24))(v889, v1301, v1102);
      v1273 = v1104;
      v1278 = v1103;
      if (v1313[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1313[2]);
      }
      else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
      {
        MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
      }
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      DWORD2(v1296) = 32;
      *(_QWORD *)&v1296 = 528482304;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
      v1106 = llvm::ConstantFP::get(v1100, (llvm::LLVMContext *)v1313, v1105);
      v1107 = (*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1282 + 24))(v1282, v1301, v1106);
      v1109 = v1108;
      if (v1313[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1313[2]);
      }
      else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
      {
        MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
      }
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = *v883;
      LODWORD(v1313[2]) = 0;
      *(_QWORD *)&v1314 = v1107;
      *((_QWORD *)&v1314 + 1) = v1109;
      LODWORD(v1315) = 1;
      v1110 = v1282;
      v1111 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, 0);
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = 2;
      LODWORD(v1313[2]) = 2;
      LODWORD(v1314) = *v883;
      LODWORD(v1315) = 0;
      *((_QWORD *)&v1315 + 1) = v1278;
      *(_QWORD *)&v1316 = v1273;
      DWORD2(v1316) = 1;
      v1317 = v1111;
      v1318 = v1112;
      v1319 = 1;
      LODWORD(v1320) = v1314;
      v1322 = 0;
      v1113 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 51, v1301, 1, v1313, 5, 0);
      v1115 = v1114;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1113;
      v1313[1] = v1114;
      LODWORD(v1313[2]) = 1;
      v1116 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 335, v1301, 1, v1313, 1, 0);
      v1118 = v1117;
      v1313[0] = (void *)257;
      LODWORD(v1313[1]) = 0;
      v1119 = sub_1C5545FFC((uint64_t)v1282, (unint64_t *)v1313, 0.5);
      v1251 = v1120;
      v1257 = v1119;
      v1313[0] = (void *)257;
      LODWORD(v1313[1]) = 0;
      v1121 = sub_1C5545FFC((uint64_t)v1282, (unint64_t *)v1313, -0.5);
      v1239 = v1122;
      v1245 = (void *)v1121;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1113;
      v1313[1] = v1115;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1116;
      *((_QWORD *)&v1314 + 1) = v1118;
      LODWORD(v1315) = 1;
      v1123 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 165, v1301, 1, v1313, 2, 0);
      v1125 = v1124;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1123;
      v1313[1] = v1124;
      LODWORD(v1313[2]) = 1;
      v1126 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 177, v1301, 1, v1313, 1, 0);
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1113;
      v1313[1] = v1115;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1116;
      v1233 = v1118;
      *((_QWORD *)&v1314 + 1) = v1118;
      LODWORD(v1315) = 1;
      *((_QWORD *)&v1315 + 1) = v1126;
      *(_QWORD *)&v1316 = v1127;
      DWORD2(v1316) = 1;
      v1128 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 166, v1301, 1, v1313, 3, 0);
      v1130 = v1129;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1245;
      v1313[1] = v1239;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1116;
      *((_QWORD *)&v1314 + 1) = v1118;
      LODWORD(v1315) = 1;
      v1131 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 165, v1301, 1, v1313, 2, 0);
      v1133 = v1132;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1123;
      v1313[1] = v1125;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1131;
      *((_QWORD *)&v1314 + 1) = v1132;
      LODWORD(v1315) = 1;
      *((_QWORD *)&v1315 + 1) = v1257;
      *(_QWORD *)&v1316 = v1251;
      DWORD2(v1316) = 1;
      v1134 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 166, v1301, 1, v1313, 3, 0);
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1131;
      v1313[1] = v1133;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1128;
      *((_QWORD *)&v1314 + 1) = v1130;
      LODWORD(v1315) = 1;
      *((_QWORD *)&v1315 + 1) = v1134;
      *(_QWORD *)&v1316 = v1135;
      DWORD2(v1316) = 1;
      v1136 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 166, v1301, 1, v1313, 3, 0);
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1136;
      v1313[1] = v1137;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1116;
      *((_QWORD *)&v1314 + 1) = v1233;
      LODWORD(v1315) = 1;
      *((_QWORD *)&v1315 + 1) = v1116;
      *(_QWORD *)&v1316 = v1233;
      DWORD2(v1316) = 1;
      v1138 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 166, v1301, 1, v1313, 3, 0);
      v1140 = v1139;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1116;
      v1313[1] = v1233;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1296 = 257;
      DWORD2(v1296) = 0;
      *(_QWORD *)&v1314 = sub_1C5544694((uint64_t)v1282, (unint64_t *)&v1296, 1);
      *((_QWORD *)&v1314 + 1) = v1141;
      LODWORD(v1315) = 1;
      v1142 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 46, v1301, 1, v1313, 2, 0);
      v1144 = v1143;
      v1313[0] = (void *)257;
      LODWORD(v1313[1]) = 0;
      v1145 = sub_1C5544694((uint64_t)v1282, (unint64_t *)v1313, 2139095039);
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      LODWORD(v1313[0]) = 35;
      LODWORD(v1313[2]) = 2;
      *(_QWORD *)&v1314 = v1142;
      *((_QWORD *)&v1314 + 1) = v1144;
      LODWORD(v1315) = 1;
      *((_QWORD *)&v1315 + 1) = v1145;
      *(_QWORD *)&v1316 = v1146;
      DWORD2(v1316) = 1;
      v1317 = (uint64_t)v1116;
      v1318 = (llvm::MachineInstr *)v1233;
      v1319 = 1;
      v1320 = v1138;
      v1321 = v1140;
      v1322 = 1;
      v1147 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1110 + 32))(v1110, 51, v1301, 1, v1313, 5, 0);
      v1149 = v1148;
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      DWORD2(v1296) = 32;
      *(_QWORD *)&v1296 = 796917760;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1313[1], (const llvm::APInt **)&v1296);
      v1151 = llvm::ConstantFP::get(v1265, (llvm::LLVMContext *)v1313, v1150);
      v1152 = (*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*v1110 + 24))(v1110, v1301, v1151);
      v1154 = v1153;
      if (v1313[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1313[2]);
      }
      else if ((*((_DWORD *)v1313[1] + 2) - 64) <= 0xFFFFFF7F && v1313[2])
      {
        MEMORY[0x1CAA32F9C](v1313[2], 0x1000C8000313F17);
      }
      v1301[0] = (void *)257;
      LODWORD(v1301[1]) = 0;
      v1313[0] = v1147;
      v1313[1] = v1149;
      LODWORD(v1313[2]) = 1;
      *(_QWORD *)&v1314 = v1152;
      *((_QWORD *)&v1314 + 1) = v1154;
      LODWORD(v1315) = 1;
      v1155 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 165, v1301, 1, v1313, 2, 0);
      LODWORD(v1301[0]) = *(_DWORD *)(*(_QWORD *)(v1279 + 32) + 4);
      LODWORD(v1301[1]) = 1;
      LODWORD(v1313[0]) = 2;
      LODWORD(v1313[2]) = 2;
      LODWORD(v1314) = *v883;
      LODWORD(v1315) = 0;
      *((_QWORD *)&v1315 + 1) = v1278;
      *(_QWORD *)&v1316 = v1273;
      DWORD2(v1316) = 1;
      v1317 = v1155;
      v1318 = v1156;
      v1319 = 1;
      v1320 = (uint64_t)v1147;
      v64 = v1279;
      v1321 = (llvm::MachineInstr *)v1149;
      v1322 = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v1282 + 32))(v1282, 51, v1301, 1, v1313, 5, 0);
      v66 = *(_QWORD *)(v1279 + 24);
      v67 = v1279;
      if ((*(_BYTE *)v1279 & 4) == 0)
      {
        v67 = v1279;
        if ((*(_WORD *)(v1279 + 44) & 8) != 0)
        {
          v67 = v1279;
          do
            v67 = *(_QWORD *)(v67 + 8);
          while ((*(_WORD *)(v67 + 44) & 8) != 0);
        }
      }
LABEL_65:
      v68 = *(_QWORD *)(v67 + 8);
      v69 = v66 + 40;
      v70 = v64;
LABEL_516:
      sub_1C487FE80(v69, v70, v68);
      return 1;
  }
}

uint64_t sub_1C493DB38(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int GenericVirtualRegister;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  _BYTE v46[32];
  unsigned int v47;
  unsigned int v48;

  llvm::SampleInfo::SampleInfo((uint64_t)v46, a4, a5);
  v11 = *(_QWORD *)(a1 + 32) + 32 * v47;
  v13 = (unsigned int *)(v11 + 4);
  v12 = *(_DWORD *)(v11 + 4);
  if (v12 < 0 && (v14 = v12 & 0x7FFFFFFF, v14 < *(_DWORD *)(a2 + 432)))
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v14);
  else
    v15 = 0;
  a3[5] = *(_QWORD *)(a1 + 24);
  a3[6] = a1;
  v16 = (unsigned __int8 **)(a1 + 56);
  v17 = (unsigned __int8 **)(a3 + 4);
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v17)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v17);
    v18 = *v16;
    *v17 = *v16;
    if (v18)
      llvm::MetadataTracking::track((uint64_t)(a3 + 4), v18, 2);
  }
  if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0 && (v15 & 2) != 0 && (v15 & 4) == 0)
  {
    v19 = *v13;
    v20 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (*v13 & 0x7FFFFFFF) + 8);
    if ((*v13 & 0x80000000) == 0)
      v20 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v19);
    v21 = *v20;
    if ((*(_BYTE *)(v21 + 3) & 1) == 0)
      v21 = *(_QWORD *)(v21 + 24);
    if (**(_WORD **)(*(_QWORD *)(v21 + 8) + 16) == 193)
    {
      v22 = sub_1C493DF74(v19, a2, 0);
      if (HIDWORD(v22))
      {
        v41 = 129;
        LODWORD(v42) = 0;
        sub_1C5544694((uint64_t)a3, (unint64_t *)&v41, v22);
        goto LABEL_22;
      }
      v19 = *v13;
    }
    v44 = 513;
    v45 = 0;
    LODWORD(v41) = v19;
    v43 = 0;
    v23 = sub_1C5546EF4(a3, &v44, (int *)&v41);
    v44 = 129;
    v45 = 0;
    v41 = v23;
    v42 = v24;
    v43 = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v44, 1, &v41, 1, 0);
LABEL_22:
    v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
    llvm::MachineOperand::setReg(v11, *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
  }
  if (v48 == -1)
    goto LABEL_39;
  v27 = *(_QWORD *)(a1 + 32) + 32 * v48;
  v28 = *(_DWORD *)(v27 + 4);
  if ((v28 & 0x80000000) == 0 || (v28 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
    goto LABEL_39;
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v28 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) == 0
    || (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v28 & 0x7FFFFFFF)) & 6) != 2)
  {
    goto LABEL_39;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
  if ((*(_BYTE *)(v30 + 3) & 1) == 0)
    v30 = *(_QWORD *)(v30 + 24);
  if (**(_WORD **)(*(_QWORD *)(v30 + 8) + 16) == 193)
  {
    v31 = sub_1C493DF74(v28, a2, 0);
    if (HIDWORD(v31))
    {
      v41 = 129;
      LODWORD(v42) = 0;
      sub_1C5544694((uint64_t)a3, (unint64_t *)&v41, v31);
      goto LABEL_38;
    }
    v28 = *(_DWORD *)(v27 + 4);
  }
  v44 = 513;
  v45 = 0;
  LODWORD(v41) = v28;
  v43 = 0;
  v32 = sub_1C5546EF4(a3, &v44, (int *)&v41);
  v44 = 129;
  v45 = 0;
  v41 = v32;
  v42 = v33;
  v43 = 1;
  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v44, 1, &v41, 1, 0);
LABEL_38:
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
  llvm::MachineOperand::setReg(v27, *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
LABEL_39:
  if (a5 != 3)
    return 1;
  v36 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
  if ((v36 & 0x80000000) == 0 || (v36 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
    return 0;
  v37 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v36 & 0x7FFFFFFF));
  if (v37 == 129)
    return 1;
  if (v37 != 65)
    return 0;
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 129, "", 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
  llvm::MachineOperand::setReg(*(_QWORD *)(a1 + 32) + 32, GenericVirtualRegister);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
  v39 = 1;
  LODWORD(v44) = v36;
  v45 = 1;
  LODWORD(v41) = GenericVirtualRegister;
  v43 = 0;
  sub_1C5546B4C(a3, 126, (unint64_t *)&v44, (int *)&v41);
  return v39;
}

uint64_t sub_1C493DF74(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::GlobalValue *v10[2];
  char v11;

  v6 = a1;
  sub_1C493FD84((uint64_t)v10, a1, a2, 1);
  if (!v11)
    return 0;
  v7 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v6);
  v8 = *v7;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  return sub_1C5EAB3E0(v10[0], (uint64_t)v10[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) + 32) + 344), a3) | 0x100000000;
}

uint64_t sub_1C493E034(int a1)
{
  uint64_t result;
  int v2;

  if (a1 > 2409)
  {
    if (a1 <= 2664)
    {
      if (a1 <= 2483)
      {
        switch(a1)
        {
          case 2410:
            return 28;
          case 2423:
            return 8;
          case 2444:
            return 29;
        }
        return 41;
      }
      if (a1 > 2543)
      {
        switch(a1)
        {
          case 2544:
            return 35;
          case 2586:
            return 33;
          case 2587:
            return 34;
        }
        return 41;
      }
      switch(a1)
      {
        case 2484:
          result = 32;
          break;
        case 2485:
          result = 31;
          break;
        case 2486:
          result = 30;
          break;
        case 2491:
          return 33;
        case 2492:
          return 34;
        default:
          return 41;
      }
    }
    else
    {
      if (a1 > 2705)
      {
        if (a1 <= 2707)
        {
          if (a1 == 2706)
            return 52;
          else
            return 53;
        }
        if (a1 == 2708)
          return 54;
        if (a1 == 2732)
          return 55;
        return 41;
      }
      v2 = a1 - 2665;
      result = 43;
      switch(v2)
      {
        case 0:
          result = 47;
          break;
        case 1:
          result = 48;
          break;
        case 2:
          result = 49;
          break;
        case 4:
          result = 37;
          break;
        case 6:
          result = 42;
          break;
        case 7:
          return result;
        case 8:
          result = 44;
          break;
        case 9:
LABEL_36:
          result = 45;
          break;
        case 10:
          result = 46;
          break;
        case 11:
          result = 12;
          break;
        case 12:
          result = 51;
          break;
        case 13:
          result = 50;
          break;
        case 14:
          return 29;
        default:
          return 41;
      }
    }
  }
  else
  {
    if (a1 <= 2304)
    {
      if (a1 > 2131)
      {
        switch(a1)
        {
          case 2132:
            result = 5;
            break;
          case 2139:
            result = 6;
            break;
          case 2140:
            result = 7;
            break;
          case 2145:
            result = 38;
            break;
          case 2146:
            result = 39;
            break;
          case 2147:
            result = 40;
            break;
          case 2150:
            result = 9;
            break;
          case 2151:
            result = 10;
            break;
          case 2152:
            result = 11;
            break;
          case 2154:
            result = 15;
            break;
          case 2155:
            result = 16;
            break;
          case 2156:
            result = 14;
            break;
          case 2169:
            goto LABEL_36;
          case 2170:
            return 36;
          case 2173:
            result = 21;
            break;
          case 2174:
            result = 22;
            break;
          case 2175:
            result = 23;
            break;
          case 2176:
            result = 24;
            break;
          default:
            return 41;
        }
        return result;
      }
      switch(a1)
      {
        case 1269:
          return 36;
        case 2107:
          return 3;
        case 2108:
          return 4;
      }
      return 41;
    }
    if (a1 > 2364)
    {
      switch(a1)
      {
        case 2365:
          return 25;
        case 2408:
          return 26;
        case 2409:
          return 27;
      }
      return 41;
    }
    switch(a1)
    {
      case 2305:
        result = 17;
        break;
      case 2306:
        result = 18;
        break;
      case 2307:
        result = 19;
        break;
      case 2308:
        result = 20;
        break;
      default:
        return 41;
    }
  }
  return result;
}

uint64_t sub_1C493E328(int a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C493E34C + 4 * byte_1C660A9FF[a1 - 3]))(4);
}

uint64_t sub_1C493E34C()
{
  return 32;
}

uint64_t sub_1C493E354()
{
  return 11;
}

uint64_t sub_1C493E394()
{
  return 16;
}

uint64_t sub_1C493E39C()
{
  return 5;
}

uint64_t sub_1C493E3A4()
{
  return 10;
}

uint64_t sub_1C493E3AC()
{
  return 3;
}

uint64_t sub_1C493E3D4(uint64_t a1, int a2)
{
  if ((a2 - 6) >= 0xA)
    return 2;
  else
    return 5;
}

unint64_t sub_1C493E424(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int32x2_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  unsigned int v23;
  int32x2_t v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  int8x8_t v31;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  int v36;
  uint8x8_t v38;
  const char *v39;
  uint64_t v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  char *v44;
  int v45;
  int8x8_t v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint8x8_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  llvm::MachineOperand *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 **v66;
  unsigned __int8 **v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t i;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  llvm::MachineFunction *v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  char v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  int v141;
  __int16 ***v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int IncompleteVirtualRegister;
  uint64_t v151;
  unsigned __int8 v152;
  unsigned int v153;
  llvm::MachineInstr *v154;
  llvm::MachineFunction *v155;
  void **v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  int v162;
  int v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  void **v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t result;
  uint64_t v190;
  unsigned __int8 *v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  char v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  BOOL v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  unint64_t v220;
  uint64_t v222;
  llvm::MachineOperand *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  __int128 v238;
  unsigned int v239;
  _BOOL4 v240;
  unsigned int v241;
  int v242;
  __int128 v243;
  int64x2_t v244;
  int v245;
  _BYTE v246[24];
  int v247;
  unsigned int v248;
  int32x2_t v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  int32x2_t v253;
  void *v254;
  uint64_t v255;
  _DWORD v256[4];
  void *v257;
  uint64_t v258;
  _QWORD v259[2];
  void *v260[2];
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;

  v265 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 8);
  v222 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 1328) + 176))(v11 + 1328);
  if (*(_BYTE *)(v11 + 1646))
  {
    v12 = 4;
  }
  else if (*(_BYTE *)(v11 + 1647))
  {
    v12 = 5;
  }
  else if (*(_BYTE *)(v11 + 1648))
  {
    v12 = 6;
  }
  else if (*(_BYTE *)(v11 + 1649))
  {
    v12 = 7;
  }
  else
  {
    v12 = 9;
  }
  v236 = v12;
  v243 = 0u;
  v244 = 0u;
  sub_1C4953ECC(a3, (uint64_t)&v247);
  v229 = a4;
  if ((a3 - 2703) < 2 || a2)
  {
    if (v247 == -1)
      v14 = -1;
    else
      v14 = ++v247;
    if (v248 == -1)
      v15 = -1;
    else
      v15 = ++v248;
    v16 = vadd_s32(v249, (int32x2_t)0x100000001);
    v233 = v16.i32[0];
    v249 = v16;
    if (v250 != -1)
      ++v250;
    if (v251 != -1)
      ++v251;
    if (v252 == -1)
      v17 = -1;
    else
      v17 = ++v252;
    v18 = 0;
    v19 = 16777252;
    v253 = vadd_s32(v253, (int32x2_t)0x100000001);
    v20 = xmmword_1C660B680;
    v21 = xmmword_1C6609100;
    v22 = 25;
    if ((int)a3 <= 2544)
      __asm { BR              X12 }
    switch((int)a3)
    {
      case 2545:
      case 2549:
      case 2553:
      case 2557:
        goto LABEL_65;
      case 2546:
      case 2548:
      case 2550:
      case 2552:
      case 2554:
      case 2556:
      case 2558:
      case 2560:
        goto LABEL_66;
      case 2547:
      case 2551:
      case 2555:
      case 2559:
        goto LABEL_274;
      case 2561:
      case 2565:
      case 2569:
      case 2573:
        v18 = 1;
LABEL_65:
        v20 = xmmword_1C660B690;
        v21 = xmmword_1C6609110;
        v19 = 8388644;
        v22 = 1;
        goto LABEL_66;
      case 2562:
      case 2564:
      case 2566:
      case 2568:
      case 2570:
      case 2572:
      case 2574:
      case 2576:
        v18 = 1;
LABEL_66:
        v243 = v20;
        v244.i64[0] = v19;
        v244.i64[1] = v19;
        *(_OWORD *)&v246[4] = v21;
        *(_DWORD *)&v246[20] = v22;
        *(_DWORD *)v246 = 2;
        goto LABEL_67;
      case 2563:
      case 2567:
      case 2571:
      case 2575:
        goto LABEL_273;
      default:
        if ((_DWORD)a3 == 2703)
LABEL_273:
          v18 = 1;
LABEL_274:
        v243 = xmmword_1C660B690;
        v244 = vdupq_n_s64(0x800024uLL);
        *(_QWORD *)&v246[16] = 0x10000000FLL;
        v46.i32[1] = 0;
        *(_OWORD *)v246 = xmmword_1C6609140;
        if ((a3 - 2703) >= 2)
        {
LABEL_67:
          v45 = sub_1C4953F7C(a1, v14);
          v47 = v45;
          if (((1 << v45) & 0xF4FF) != 0)
          {
            v48 = 0;
          }
          else if (v45 == 8)
          {
            v48 = 1;
          }
          else
          {
            v48 = 0;
            v47 = 14;
          }
        }
        else
        {
          v48 = 0;
          v47 = 1;
        }
        v242 = v47;
        if (v15 == -1)
          v49 = 1;
        else
          v49 = sub_1C4953F7C(a1, v15);
        v35 = a5;
        if ((v48 & 1) != 0)
        {
          v50 = 15;
        }
        else
        {
          v50 = 7;
          if ((v47 & 0xE) != 0xC)
          {
            if ((v47 & 0xE) == 0xE && v236 >= 7)
              v50 = 7;
            else
              v50 = v49;
          }
        }
        v46.i32[0] = v50;
        v52 = (uint8x8_t)vcnt_s8(v46);
        v52.i16[0] = vaddlv_u8(v52);
        v241 = v52.i32[0];
        v245 = sub_1C4953FF4(a1, v17, v233);
        v54 = sub_1C4825F50((unint64_t *)&v243);
        if ((_DWORD)v53 == 1)
        v41 = v54 != 16;
        v240 = v41;
        v42 = v245;
        v43 = v241;
        v44 = (char *)&unk_1C660AC74 + 480 * ((v236 & 0xE) != 4) + 240 * a2;
        break;
    }
  }
  else
  {
    if (v247 == -1)
    {
      v13 = -1;
    }
    else
    {
      v13 = v247 + 2;
      v247 += 2;
    }
    if (v248 == -1)
    {
      v23 = -1;
    }
    else
    {
      v23 = v248 + 2;
      v248 += 2;
    }
    v24 = vadd_s32(v249, (int32x2_t)0x200000002);
    v249 = v24;
    if (v250 != -1)
      v250 += 2;
    if (v251 != -1)
      v251 += 2;
    v234 = v24.i32[0];
    if (v252 == -1)
    {
      v25 = -1;
    }
    else
    {
      v25 = v252 + 2;
      v252 += 2;
    }
    v18 = 0;
    v26 = 16777252;
    v253 = vadd_s32(v253, (int32x2_t)0x200000002);
    v27 = xmmword_1C660B680;
    v28 = xmmword_1C6609100;
    v29 = 25;
    switch((int)a3)
    {
      case 2545:
      case 2547:
      case 2549:
      case 2551:
      case 2553:
      case 2555:
      case 2557:
      case 2559:
        goto LABEL_43;
      case 2546:
      case 2548:
      case 2550:
      case 2552:
      case 2554:
      case 2556:
      case 2558:
      case 2560:
        break;
      case 2561:
      case 2563:
      case 2565:
      case 2567:
      case 2569:
      case 2571:
      case 2573:
      case 2575:
        v18 = 1;
LABEL_43:
        v27 = xmmword_1C660B690;
        v28 = xmmword_1C6609110;
        v26 = 8388644;
        v29 = 1;
        break;
      case 2562:
      case 2564:
      case 2566:
      case 2568:
      case 2570:
      case 2572:
      case 2574:
      case 2576:
        v18 = 1;
        break;
      default:
        __asm { BR              X12 }
        return result;
    }
    v243 = v27;
    v244.i64[0] = v26;
    v244.i64[1] = v26;
    *(_OWORD *)&v246[4] = v28;
    *(_DWORD *)&v246[20] = v29;
    *(_DWORD *)v246 = 2;
    v30 = sub_1C4953F7C(a1, v13);
    v32 = v30;
    if (((1 << v30) & 0xF4FF) != 0)
    {
      v33 = 0;
    }
    else if (v30 == 8)
    {
      v33 = 1;
    }
    else
    {
      v33 = 0;
      v32 = 14;
    }
    v242 = v32;
    if (v23 == -1)
      v34 = 1;
    else
      v34 = sub_1C4953F7C(a1, v23);
    v35 = a5;
    if ((v33 & 1) != 0)
    {
      v36 = 15;
    }
    else
    {
      v36 = 7;
      if ((v32 & 0xE) != 0xC)
      {
        if ((v32 & 0xE) == 0xE && v236 >= 7)
          v36 = 7;
        else
          v36 = v34;
      }
    }
    v31.i32[0] = v36;
    v38 = (uint8x8_t)vcnt_s8(v31);
    v38.i16[0] = vaddlv_u8(v38);
    v241 = v38.i32[0];
    v245 = sub_1C4953FF4(a1, v25, v234);
    v40 = sub_1C4825F50((unint64_t *)&v243);
    if ((_DWORD)v39 == 1)
    v41 = v40 != 16;
    v240 = v41;
    v42 = v245;
    v43 = v241;
    v44 = (char *)&unk_1C660AC74 + 480 * ((v236 & 0xE) != 4);
  }
  v239 = *(_DWORD *)&v44[80 * v42 + 40 * v18 + 20 * v41 + 4 * v43];
  v55 = v229;
  if (v248 == -1)
    v56 = 1;
  else
    v56 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v248 + 4), v35);
  if (v242 == 8)
  {
    v57 = 15;
  }
  else
  {
    v57 = 7;
    if ((v242 & 0xFFFFFFFE) != 0xC)
    {
      if ((v242 & 0xFFFFFFFE) == 0xE && v236 >= 7)
        v57 = 7;
      else
        v57 = v56;
    }
  }
  v59 = v249.u32[0];
  v225 = *(_QWORD *)(a1 + 32);
  if ((a2 & 1) != 0 || !*(_BYTE *)(v11 + 1689))
  {
    v60 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v249.u32[1] + 4), v35);
    if (a2)
    {
      if (v250 == -1)
      {
        if (v229)
          goto LABEL_104;
        v260[0] = (void *)129;
        LODWORD(v260[1]) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a6 + 32))(a6, 68, v260, 1, 0, 0, 0);
        v61 = *(_QWORD *)(v92 + 32);
      }
      else
      {
        v61 = *(_QWORD *)(a1 + 32) + 32 * v250;
      }
      v235 = v61;
      goto LABEL_105;
    }
  }
  else
  {
    v60 = 1;
  }
LABEL_104:
  v235 = v229;
LABEL_105:
  v62 = *(_QWORD *)(a1 + 32);
  if (v251 == -1)
    v63 = 0;
  else
    v63 = (llvm::MachineOperand *)(v62 + 32 * v251);
  v223 = v63;
  if (v252 == -1)
  {
    v260[0] = (void *)129;
    LODWORD(v260[1]) = 0;
    sub_1C5544694((uint64_t)a6, (unint64_t *)v260, 0);
    v232 = *(_QWORD *)(v64 + 32);
    v62 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v232 = v62 + 32 * v252;
  }
  v226 = sub_1C554C050(*(_DWORD *)(v62 + 32 * v253.u32[0] + 4), v35);
  v227 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v253.u32[1] + 4), v35);
  a6[5] = *(_QWORD *)(a1 + 24);
  a6[6] = a1;
  v66 = (unsigned __int8 **)(a1 + 56);
  v67 = (unsigned __int8 **)(a6 + 4);
  if ((uint64_t *)(a1 + 56) != a6 + 4)
  {
    if (*v67)
      llvm::MetadataTracking::untrack((uint64_t)(a6 + 4), *v67);
    v65 = *v66;
    *v67 = *v66;
    if (v65)
      llvm::MetadataTracking::track((uint64_t)(a6 + 4), v65, 2);
  }
  v224 = v59;
  if (!a2)
    goto LABEL_154;
  v68 = (void *)v243;
  v69 = *(unsigned int *)(v235 + 4);
  v70 = *(_QWORD *)(v35 + 24);
  v71 = (uint64_t *)(v70 + 16 * (v69 & 0x7FFFFFFF) + 8);
  v72 = *(_QWORD *)(v35 + 272);
  if ((int)v69 >= 0)
    v71 = (uint64_t *)(v72 + 8 * v69);
  v73 = *v71;
  if (v73)
  {
    if ((*(_BYTE *)(v73 + 3) & 1) == 0)
    {
      v73 = *(_QWORD *)(v73 + 24);
      if (!v73 || (*(_BYTE *)(v73 + 3) & 1) == 0)
        goto LABEL_355;
    }
    v194 = *(_QWORD *)(v73 + 8);
    if (!v194 || **(_WORD **)(v194 + 16) != 82)
      goto LABEL_355;
    if ((v69 & 0x80000000) != 0 && (v195 = v69 & 0x7FFFFFFF, v195 < *(_DWORD *)(v35 + 432)))
      v196 = *(_QWORD *)(*(_QWORD *)(v35 + 424) + 8 * v195);
    else
      v196 = 0;
    v211 = *(unsigned int *)(*(_QWORD *)(v194 + 32) + 36);
    v212 = (uint64_t *)(v70 + 16 * (v211 & 0x7FFFFFFF) + 8);
    v213 = (uint64_t *)(v72 + 8 * v211);
    if ((int)v211 >= 0)
      v212 = v213;
    v214 = *v212;
    if (v214
      && ((*(_BYTE *)(v214 + 3) & 1) != 0 || (v214 = *(_QWORD *)(v214 + 24)) != 0 && (*(_BYTE *)(v214 + 3) & 1) != 0))
    {
      v215 = *(_QWORD *)(v214 + 8);
      if ((v211 & 0x80000000) == 0)
        goto LABEL_355;
    }
    else
    {
      v215 = 0;
      if ((v211 & 0x80000000) == 0)
        goto LABEL_355;
    }
    if ((v211 & 0x7FFFFFFF) < *(_DWORD *)(v35 + 432))
    {
      v216 = *(_QWORD *)(*(_QWORD *)(v35 + 424) + 8 * (v211 & 0x7FFFFFFF));
      if ((v216 & 0xFFFFFFFFFFFFFFF9) != 0 && (v216 & 4) != 0)
      {
        if ((v196 & 2) != 0)
          v217 = 0x800000000000000;
        else
          v217 = 0x8000000000000;
        if ((v217 & v196) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v65);
        if ((v216 & 2) != 0)
          v218 = 0x800000000000000;
        else
          v218 = 0x8000000000000;
        if ((v218 & v216) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v65);
        v55 = v229;
        if ((unsigned __int16)(v196 >> 3) != (unsigned __int16)(v216 >> 3))
          goto LABEL_120;
        v219 = 3;
        if ((v216 & 1) == 0)
          v219 = 19;
        v220 = v216 >> v219;
        if ((v216 & 2) != 0)
          v68 = (void *)((v216 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v220) | 2);
        else
          v68 = (void *)(v216 & 0x8000000000000000 | (8 * v220) | 1);
        v235 = *(_QWORD *)(v215 + 32) + 32;
      }
    }
LABEL_355:
    v55 = v229;
  }
LABEL_120:
  if (v241 < 2)
  {
    v59 = v224;
    if (!v55 && v241 == 1)
    {
      v257 = v68;
      LODWORD(v258) = 0;
      v79 = *(_DWORD *)(v235 + 4);
      v254 = (void *)257;
      LODWORD(v255) = 0;
      v80 = sub_1C5544694((uint64_t)a6, (unint64_t *)&v254, 31 - __clz(v57));
      LODWORD(v260[0]) = v79;
      LODWORD(v261) = 0;
      v262 = v80;
      v263 = v81;
      v264 = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 205, &v257, 1, v260, 2, 0);
      v235 = *(_QWORD *)(v82 + 32);
    }
    goto LABEL_154;
  }
  v74 = *(_QWORD *)(*(_QWORD *)(v222 + 240) + 8 * *(unsigned int *)&v246[4 * v241]);
  v257 = v259;
  v258 = 0x400000000;
  v254 = v256;
  v255 = 0x400000000;
  v75 = sub_1C49540EC(*(_DWORD *)(v235 + 4), v35, (uint64_t)a6, (uint64_t)&v254);
  if ((v75 & 1) == 0)
    goto LABEL_148;
  v230 = v74;
  for (i = 0; i != 4; ++i)
  {
    if (((v57 >> i) & 1) != 0)
    {
      v77 = *((_DWORD *)v254 + i);
      v78 = v258;
      if (v258 >= (unint64_t)HIDWORD(v258))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v257, (uint64_t)v259, v258 + 1, 4);
        v78 = v258;
      }
      *((_DWORD *)v257 + v78) = v77;
      LODWORD(v258) = v258 + 1;
    }
  }
  *(_QWORD *)&v238 = sub_1C4953AD0(v241, (unint64_t)v68);
  DWORD2(v238) = 0;
  v83 = (int *)v257;
  v84 = v258;
  v260[0] = &v261;
  v260[1] = (void *)0x800000000;
  if (v258 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v260, (uint64_t)&v261, v258, 24);
    v85 = LODWORD(v260[1]);
    v86 = (uint64_t *)v260[0];
LABEL_135:
    v87 = 3 * v85;
    v88 = 4 * v84;
    do
    {
      v89 = *v83++;
      v90 = &v86[v87];
      *(_DWORD *)v90 = v89;
      *((_DWORD *)v90 + 4) = 0;
      v87 += 3;
      v88 -= 4;
    }
    while (v88);
    v91 = (int)v260[1];
    goto LABEL_145;
  }
  if ((_DWORD)v258)
  {
    v85 = 0;
    v86 = &v261;
    goto LABEL_135;
  }
  v91 = 0;
  v86 = &v261;
LABEL_145:
  LODWORD(v260[1]) = v91 + v84;
  (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, uint64_t *))(*a6 + 32))(a6, 77, &v238, 1, v86);
  v94 = v93;
  if (v260[0] != &v261)
    free(v260[0]);
  v235 = *(_QWORD *)(v94 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a7 + 32))(a7, v94);
  *(_QWORD *)(*(_QWORD *)(v35 + 24) + 16 * (*(_DWORD *)(*(_QWORD *)(v94 + 32) + 4) & 0x7FFFFFFF)) = v230 & 0xFFFFFFFFFFFFFFFBLL;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a7 + 40))(a7, v94);
LABEL_148:
  v59 = v224;
  if (v254 != v256)
    free(v254);
  if (v257 != v259)
    free(v257);
  if ((v75 & 1) == 0)
    return 0;
LABEL_154:
  v96 = v245;
  if (!v245)
  {
    v231 = 0;
    v97 = 0;
    goto LABEL_171;
  }
  v97 = v225 + 32 * v59;
  if (v236 > 6)
  {
    if (v245 != 2)
      goto LABEL_168;
    v257 = (void *)129;
    LODWORD(v258) = 0;
    LODWORD(v260[0]) = *(_DWORD *)(v232 + 4);
    LODWORD(v261) = 0;
    v254 = (void *)129;
    LODWORD(v255) = 0;
    v262 = sub_1C5544694((uint64_t)a6, (unint64_t *)&v254, 8);
    v263 = v113;
    v264 = 1;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 127, &v257, 1, v260, 2, 0);
    v232 = *(_QWORD *)(v114 + 32);
  }
  else
  {
    v98 = v225 + 32 * v59;
    v100 = *(_DWORD *)(v98 + 4);
    v99 = (_DWORD *)(v98 + 4);
    v101 = *(_QWORD *)(v35 + 24);
    v102 = v101 + 16 * (v100 & 0x7FFFFFFF) + 8;
    v103 = *(_QWORD *)(v35 + 272);
    v104 = (uint64_t *)(v103 + 8 * v100);
    if (v100 >= 0)
      v105 = v104;
    else
      v105 = (uint64_t *)v102;
    v106 = *v105;
    if (v106)
    {
      v197 = v106;
      if ((*(_DWORD *)v106 & 0x1000000) != 0 || (v197 = *(_QWORD *)(v106 + 24)) != 0 && (*(_BYTE *)(v197 + 3) & 1) != 0)
      {
        v198 = *(_QWORD *)(v197 + 8);
        if (v198)
        {
          if (**(_WORD **)(v198 + 16) == 119)
          {
            if ((*(_DWORD *)v106 & 0x1000000) == 0)
              v106 = *(_QWORD *)(v106 + 24);
            v97 = *(_QWORD *)(*(_QWORD *)(v106 + 8) + 32) + 32;
          }
        }
      }
    }
    v107 = *(unsigned int *)(v97 + 4);
    v108 = (uint64_t *)(v101 + 16 * (v107 & 0x7FFFFFFF) + 8);
    v109 = (uint64_t *)(v103 + 8 * v107);
    if ((int)v107 >= 0)
      v108 = v109;
    v110 = *v108;
    if (v110
      && ((*(_BYTE *)(v110 + 3) & 1) != 0 || (v110 = *(_QWORD *)(v110 + 24)) != 0 && (*(_BYTE *)(v110 + 3) & 1) != 0)
      && (v202 = *(_QWORD *)(v110 + 8)) != 0
      && **(_WORD **)(v202 + 16) == 128
      && ((v203 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v202 + 32) + 68), v35), v204)
        ? (v205 = v203 == 8)
        : (v205 = 0),
          v205))
    {
      v257 = (void *)129;
      LODWORD(v258) = 0;
      LODWORD(v260[0]) = *(_DWORD *)(*(_QWORD *)(v202 + 32) + 36);
      LODWORD(v261) = 0;
      sub_1C5546B4C(a6, 118, (unint64_t *)&v257, (int *)v260);
      v97 = *(_QWORD *)(v206 + 32);
      if (v245 != 2)
      {
        v231 = 0;
        goto LABEL_171;
      }
      v207 = *(_DWORD *)(v97 + 4);
      v254 = (void *)129;
      LODWORD(v255) = 0;
      v208 = sub_1C5544694((uint64_t)a6, (unint64_t *)&v254, 65280);
      v257 = (void *)129;
      LODWORD(v258) = 0;
      LODWORD(v260[0]) = v207;
      LODWORD(v261) = 0;
      v262 = v208;
      v263 = v209;
      v264 = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 65, &v257, 1, v260, 2, 0);
      v97 = *(_QWORD *)(v210 + 32);
    }
    else
    {
      v257 = (void *)129;
      LODWORD(v258) = 0;
      LODWORD(v260[0]) = *v99;
      LODWORD(v261) = 0;
      v254 = (void *)129;
      LODWORD(v255) = 0;
      v262 = sub_1C5544694((uint64_t)a6, (unint64_t *)&v254, 8);
      v263 = v111;
      v264 = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 127, &v257, 1, v260, 2, 0);
      v97 = *(_QWORD *)(v112 + 32);
    }
  }
  v96 = v245;
LABEL_168:
  if (v96 == 2)
  {
    v257 = (void *)129;
    LODWORD(v258) = 0;
    LODWORD(v260[0]) = *(_DWORD *)(v97 + 4);
    LODWORD(v261) = 0;
    LODWORD(v262) = *(_DWORD *)(v232 + 4);
    v264 = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 66, &v257, 1, v260, 2, 0);
    v231 = *(_QWORD *)(v115 + 32);
  }
  else
  {
    v231 = 0;
  }
LABEL_171:
  v116 = v242 | (16 * (v57 & 0xF));
  v117 = v60;
  v118 = v247 == -1;
  v120 = sub_1C55437B8(a6, v239);
  v95 = v119;
  v121 = (unint64_t *)a6[6];
  v122 = *(_QWORD *)(a6[5] + 40);
  *(_QWORD *)(v119 + 24) = v122;
  v123 = *(_QWORD *)(v122 + 32);
  v124 = *(unsigned int *)(v119 + 40);
  if ((_DWORD)v124)
  {
    v143 = *(_QWORD *)(v119 + 32);
    v144 = *(_QWORD *)(v123 + 40);
    v145 = 32 * v124;
    do
    {
      if (!*(_BYTE *)v143)
      {
        v146 = *(unsigned int *)(v143 + 4);
        if ((int)v146 >= 0)
          v147 = (uint64_t *)(*(_QWORD *)(v144 + 272) + 8 * v146);
        else
          v147 = (uint64_t *)(*(_QWORD *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
        v148 = *v147;
        if (*v147)
        {
          v149 = *(_QWORD *)(v148 + 16);
          *(_QWORD *)(v148 + 16) = v143;
          *(_QWORD *)(v143 + 16) = v149;
          if ((*(_BYTE *)(v143 + 3) & 1) != 0)
          {
            *(_QWORD *)(v143 + 24) = v148;
          }
          else
          {
            *(_QWORD *)(v143 + 24) = 0;
            v147 = (uint64_t *)(v149 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v143 + 16) = v143;
          *(_QWORD *)(v143 + 24) = 0;
        }
        *v147 = v143;
      }
      v143 += 32;
      v145 -= 32;
    }
    while (v145);
  }
  v125 = (unint64_t)(v117 & 1) << 8;
  v126 = *(_QWORD *)(v123 + 728);
  if (v126)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v126 + 24))(v126, v119);
  v127 = v125 | v116;
  v128 = *v121 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v95 = v128 | *(_QWORD *)v95 & 7;
  *(_QWORD *)(v95 + 8) = v121;
  *(_QWORD *)(v128 + 8) = v95;
  *v121 = *v121 & 7 | v95;
  v129 = a6[7];
  if (v129)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v129 + 24))(v129, v95);
  v130 = v127 | (v118 << 10);
  *(_QWORD *)&v238 = v120;
  *((_QWORD *)&v238 + 1) = v95;
  if ((a2 & 1) != 0)
  {
    if (!v241)
      goto LABEL_237;
    v131 = *(_DWORD *)(v235 + 4);
    v260[1] = 0;
    v261 = 0;
    HIDWORD(v260[0]) = v131;
    LODWORD(v260[0]) = 0;
    v262 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
    if (v236 - 6 > 3)
      goto LABEL_237;
  }
  else
  {
    v132 = *((_QWORD *)&v243 + v241 - 1);
    v257 = (void *)v132;
    if (v241 == 3)
    {
      v133 = 3;
      if ((v132 & 1) == 0)
        v133 = 19;
      v134 = v132 & 0x8000000000000000 | (8 * (v132 >> v133)) | 1;
      v135 = 35;
      v136 = 19;
      if ((v132 & 4) == 0)
        v135 = 19;
      v137 = v132 >> v135;
      if ((v132 & 4) == 0)
        v136 = 3;
      if ((v132 & 1) != 0)
        v136 = 3;
      v138 = (8 * (unsigned __int16)(v132 >> v136)) & 0xFFFFF8000007FFFFLL | ((v137 & 0xFFFFFF) << 19);
      if ((v132 & 2) != 0)
        v139 = v138 | 2;
      else
        v139 = v134;
      v257 = (void *)sub_1C4953AD0(3, v139);
    }
    v141 = sub_1C4825F50((unint64_t *)&v257);
    if ((_DWORD)v140 == 1)
    if (v141 > 111)
    {
      if (v141 <= 191)
      {
        if (v141 == 112)
        {
          v142 = (__int16 ***)&off_1E7FA6060;
        }
        else if (v141 == 128)
        {
          v142 = (__int16 ***)&off_1E7FA6098;
        }
        else
        {
          v142 = (__int16 ***)&off_1E7FA60D0;
        }
      }
      else if (v141 > 287)
      {
        if (v141 == 288)
          v142 = (__int16 ***)&off_1E7FA6178;
        else
          v142 = (__int16 ***)&off_1E7FA61B0;
      }
      else if (v141 == 192)
      {
        v142 = (__int16 ***)&off_1E7FA6108;
      }
      else
      {
        v142 = (__int16 ***)&off_1E7FA6140;
      }
    }
    else if (v141 <= 47)
    {
      v142 = &off_1E7FA5F10;
      if (v141 != 1 && v141 != 16)
        v142 = &off_1E7FA5F48;
    }
    else if (v141 > 79)
    {
      if (v141 == 80)
        v142 = (__int16 ***)&off_1E7FA6028;
      else
        v142 = (__int16 ***)&off_1E7FA5FB8;
    }
    else if (v141 == 48)
    {
      v142 = (__int16 ***)&off_1E7FA5FF0;
    }
    else
    {
      v142 = (__int16 ***)&off_1E7FA6488;
    }
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v35, "", 0);
    *(_QWORD *)(*(_QWORD *)(v35 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v142;
    v151 = *(_QWORD *)(v35 + 8);
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151);
    v260[1] = 0;
    v261 = 0;
    v262 = 0;
    HIDWORD(v260[0]) = IncompleteVirtualRegister;
    LODWORD(v260[0]) = 0x1000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
    if (v236 < 6)
      goto LABEL_237;
  }
  LODWORD(v260[0]) = 1;
  v260[1] = 0;
  v261 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
LABEL_237:
  LODWORD(v260[0]) = 1;
  v260[1] = 0;
  v261 = v130;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
  if (v245)
  {
    if (v245 == 1)
    {
      v152 = sub_1C554C050(*(_DWORD *)(v232 + 4), v35);
      v153 = v152;
      LODWORD(v260[0]) = 1;
      v260[1] = 0;
      v261 = v152;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
      if (*(_BYTE *)v97)
      {
        v154 = (llvm::MachineInstr *)v95;
        v155 = v120;
        v156 = (void **)v97;
      }
      else
      {
        v163 = *(_DWORD *)(v97 + 4);
        v260[1] = 0;
        v261 = 0;
        HIDWORD(v260[0]) = v163;
        LODWORD(v260[0]) = 0;
        v262 = 0;
        v156 = v260;
        v154 = (llvm::MachineInstr *)v95;
        v155 = v120;
      }
      llvm::MachineInstr::addOperand(v154, v155, (const llvm::MachineOperand *)v156);
      v160 = v226;
      if (v236 - 6 <= 3)
      {
        LODWORD(v260[0]) = 1;
        v260[1] = 0;
        v261 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
      }
      v159 = 0x100000000;
    }
    else
    {
      v161 = (void **)v231;
      v160 = v226;
      if (!*(_BYTE *)v231)
      {
        v162 = *(_DWORD *)(v231 + 4);
        v260[1] = 0;
        v261 = 0;
        HIDWORD(v260[0]) = v162;
        LODWORD(v260[0]) = 0;
        v262 = 0;
        v161 = v260;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v161);
      if (v236 - 6 <= 3)
      {
        LODWORD(v260[0]) = 1;
        v260[1] = 0;
        v261 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
      }
      v159 = 0;
      v153 = 0;
    }
  }
  else
  {
    v157 = sub_1C554C050(*(_DWORD *)(v232 + 4), v35);
    v153 = v157;
    v158 = sub_1C554C050(*(_DWORD *)(v225 + 32 * v224 + 4), v35);
    LODWORD(v260[0]) = 1;
    v260[1] = 0;
    v261 = v157;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
    LODWORD(v260[0]) = 1;
    v260[1] = 0;
    v261 = v158;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
    v159 = 0x100000000;
    v160 = v226;
  }
  if (v251 != -1)
  {
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, v223);
    if (v236 - 6 <= 3)
    {
      LODWORD(v260[0]) = 1;
      v260[1] = 0;
      v261 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
    }
  }
  LODWORD(v260[0]) = 1;
  v260[1] = 0;
  v261 = v160;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
  LODWORD(v260[0]) = 1;
  v260[1] = 0;
  v261 = v227;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v120, (const llvm::MachineOperand *)v260);
  v164 = v159 | v153;
  v165 = a2;
  sub_1C4990688(v164, v57, v242);
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v260[0] = v169;
  v170 = *(_QWORD *)(v95 + 48);
  if (v170 >= 8)
  {
    v190 = *(_QWORD *)(v95 + 48) & 7;
    v191 = (unsigned __int8 *)(v170 & 0xFFFFFFFFFFFFFFF8);
    if (v190 == 1 && v191)
    {
      v166 = 0;
      v168 = 0;
      v167 = (uint64_t)v191;
    }
    else if (v190 == 3 && v191)
    {
      v193 = v191[4];
      if (v191[4])
        v167 = *(_QWORD *)&v191[8 * *(int *)v191 + 8];
      else
        v167 = 0;
      if (v191[5])
        v166 = *(_QWORD *)&v191[8 * *(int *)v191 + 8 + 8 * v193];
      else
        v166 = 0;
      if (v191[6])
        v168 = *(_QWORD *)&v191[8 * *(int *)v191 + 8 + 8 * v191[5] + 8 * v193];
      else
        v168 = 0;
    }
    else
    {
      v167 = 0;
      v168 = 0;
      if (v191)
        v192 = v190 == 2;
      else
        v192 = 0;
      if (v192)
        v166 = (uint64_t)v191;
      else
        v166 = 0;
    }
    v165 = a2;
  }
  llvm::MachineInstr::setExtraInfo(v95, (uint64_t)v120, v260, 1, v167, v166, v168);
  sub_1C49400A8((uint64_t)&v238);
  if ((v165 & 1) == 0)
  {
    v171 = *((_QWORD *)&v243 + v241 - 1);
    if (v241 == 3)
    {
      if ((v171 & 2) != 0)
      {
        v199 = 35;
        v200 = 19;
        if ((v171 & 4) == 0)
          v199 = 19;
        v201 = v171 >> v199;
        if ((v171 & 4) == 0)
          v200 = 3;
        if ((v171 & 1) != 0)
          v200 = 3;
        v173 = (void *)((8 * (unsigned __int16)(v171 >> v200)) & 0xFFFFF8000007FFFFLL | ((v201 & 0xFFFFFF) << 19) | 2);
      }
      else
      {
        v172 = 3;
        if ((v171 & 1) == 0)
          v172 = 19;
        v173 = (void *)(v171 & 0x8000000000000000 | (8 * (v171 >> v172)) | 1);
      }
      v257 = (void *)sub_1C4953AD0(3, (unint64_t)v173);
      LODWORD(v258) = 0;
      *(_OWORD *)v260 = v238;
      LODWORD(v261) = 1;
      v174 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 19, &v257, 1, v260, 1, 0);
      v175 = 0;
      v257 = v173;
      v258 = (uint64_t)v173;
      v259[0] = v173;
      v254 = v174;
      v255 = v176;
      v256[0] = 1;
      v260[0] = &v261;
      v260[1] = (void *)0x800000000;
      v177 = 2;
      do
      {
        v178 = &v260[v177];
        *v178 = *(void **)((char *)&v257 + v175);
        *((_DWORD *)v178 + 2) = 0;
        v177 += 2;
        v175 += 8;
      }
      while (v175 != 24);
      LODWORD(v260[1]) += 3;
      (*(void (**)(uint64_t *, uint64_t, void *))(*a6 + 32))(a6, 74, v260[0]);
      v180 = v179;
      if (v260[0] != &v261)
        free(v260[0]);
      v260[0] = v173;
      LODWORD(v260[1]) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a6 + 32))(a6, 68, v260, 1, 0, 0, 0);
      v181 = 0;
      v257 = (void *)v171;
      LODWORD(v258) = 0;
      v182 = *(_DWORD **)(v180 + 32);
      v183 = v182[9];
      LODWORD(v254) = v182[1];
      HIDWORD(v254) = v183;
      LODWORD(v255) = v182[17];
      HIDWORD(v255) = *(_DWORD *)(*(_QWORD *)(v184 + 32) + 4);
      v260[0] = &v261;
      v260[1] = (void *)0x800000000;
      v185 = 2;
      do
      {
        v186 = &v260[v185];
        *(_DWORD *)v186 = *(_DWORD *)((char *)&v254 + v181);
        *((_DWORD *)v186 + 4) = 0;
        v185 += 3;
        v181 += 4;
      }
      while (v181 != 16);
      LODWORD(v260[1]) += 4;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *))(*a6 + 32))(a6, 77, &v257, 1, &v261);
      v95 = v187;
      if (v260[0] != &v261)
        free(v260[0]);
    }
    else
    {
      v257 = (void *)*((_QWORD *)&v243 + v241 - 1);
      LODWORD(v258) = 0;
      LODWORD(v260[0]) = *(_DWORD *)(*(_QWORD *)(v95 + 32) + 4);
      LODWORD(v261) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a6 + 32))(a6, 19, &v257, 1, v260, 1, 0);
      return v188;
    }
  }
  return v95;
}

void sub_1C493FD84(uint64_t a1, int a2, uint64_t a3, int a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _DWORD v28[4];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) == 0
    || (a2 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a3 + 432)
    || ((*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
      ? (v4 = (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (a2 & 0x7FFFFFFF)) & 6) == 2)
      : (v4 = 0),
        !v4))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v5 = 0;
  v6 = 0;
  v7 = v28;
  v26 = v28;
  v28[0] = a2;
  v27 = 0x400000001;
  LODWORD(v8) = 1;
  while (1)
  {
    v9 = v26;
    v10 = *((_DWORD *)v26 + v8 - 1);
    v8 = (v8 - 1);
    LODWORD(v27) = v8;
    if ((v10 & 0x80000000) == 0)
      goto LABEL_12;
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    if (!v11)
      goto LABEL_12;
    v20 = a3;
    v21 = v6;
    v23 = v5;
    v24 = a1;
    v22 = a4;
    v25 = (uint64_t)v7;
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    {
      v11 = *(_QWORD *)(v11 + 24);
      if (!v11 || (*(_BYTE *)(v11 + 3) & 1) == 0)
        goto LABEL_12;
    }
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      goto LABEL_12;
    v13 = **(unsigned __int16 **)(v12 + 16);
    if (v13 <= 0x76)
      break;
    if (**(unsigned __int16 **)(v12 + 16) > 0x7Du)
    {
      if (v13 != 126)
      {
        if (v13 != 193)
        {
LABEL_43:
          v7 = (_DWORD *)v25;
LABEL_12:
          if (a4)
            goto LABEL_49;
          goto LABEL_13;
        }
LABEL_36:
        v17 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 68);
        if (v8 >= HIDWORD(v27))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v25, v8 + 1, 4);
          LODWORD(v8) = v27;
          v9 = v26;
        }
        v9[v8] = v17;
        v8 = (v27 + 1);
        LODWORD(v27) = v8;
        v18 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
        if (v8 < HIDWORD(v27))
        {
LABEL_39:
          v9 = v26;
          goto LABEL_41;
        }
LABEL_46:
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v25, v8 + 1, 4);
        LODWORD(v8) = v27;
        goto LABEL_39;
      }
LABEL_40:
      v18 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
      if (v8 >= HIDWORD(v27))
        goto LABEL_46;
LABEL_41:
      v9[v8] = v18;
      LODWORD(v8) = v27 + 1;
      LODWORD(v27) = v27 + 1;
      a1 = v24;
      v7 = (_DWORD *)v25;
      a4 = v22;
      a3 = v20;
      v6 = v21;
LABEL_42:
      v5 = v23;
      goto LABEL_13;
    }
    if (v13 == 119)
      goto LABEL_40;
    if (v13 != 120)
      goto LABEL_43;
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 48);
    v15 = *(_DWORD *)(v14 + 32);
    if (v15 > 0x40)
      v16 = **(_QWORD **)(v14 + 24);
    else
      v16 = (uint64_t)(*(_QWORD *)(v14 + 24) << -(char)v15) >> -(char)v15;
    v5 += v16;
    v7 = (_DWORD *)v25;
LABEL_13:
    if (!(_DWORD)v8)
    {
      if (v6)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a1 + 8) = v5;
        v19 = 1;
        goto LABEL_51;
      }
LABEL_49:
      v19 = 0;
LABEL_50:
      *(_BYTE *)a1 = 0;
      goto LABEL_51;
    }
  }
  if (**(unsigned __int16 **)(v12 + 16) > 0x4Fu)
  {
    if (v13 - 80 >= 2)
      goto LABEL_43;
    goto LABEL_40;
  }
  if (v13 == 19)
    goto LABEL_40;
  if (v13 == 45)
    goto LABEL_36;
  if (v13 != 71)
    goto LABEL_43;
  if (v6)
  {
    v19 = 0;
    v7 = (_DWORD *)v25;
    goto LABEL_50;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 48);
  if ((a4 & 1) != 0)
  {
    v7 = (_DWORD *)v25;
    goto LABEL_42;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  v19 = 1;
  v7 = (_DWORD *)v25;
LABEL_51:
  *(_BYTE *)(a1 + 16) = v19;
  if (v26 != v7)
    free(v26);
}

uint64_t sub_1C49400A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 32);
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), *(_QWORD *)v2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
  return sub_1C554AE8C(*(_QWORD **)(a1 + 8), v4, v5);
}

uint64_t sub_1C4940130(int a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1 < 0 && (a1 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a2 + 432))
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  else
    v5 = 0;
  v21 = v5;
  v6 = sub_1C493DF74(a1, a2, 256);
  if (HIDWORD(v6))
  {
    v22 = 129;
    LODWORD(v23) = 0;
    sub_1C5544694((uint64_t)a3, (unint64_t *)&v22, v6);
  }
  else
  {
    v7 = sub_1C4825F50(&v21);
    if ((_DWORD)v8 == 1)
    {
      v20 = v7;
      v7 = v20;
    }
    v28 = (8 * v7) | 1;
    v29 = 0;
    LODWORD(v22) = a1;
    v24 = 0;
    v9 = sub_1C5546EF4(a3, &v28, (int *)&v22);
    v28 = 129;
    v29 = 0;
    v22 = v9;
    v23 = v10;
    v24 = 1;
    v11 = sub_1C5546B4C(a3, 118, (unint64_t *)&v28, (int *)&v22);
    v13 = v12;
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3[1] + 344) + 336))(*(_QWORD *)(a3[1] + 344));
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, 16);
    v22 = 129;
    LODWORD(v23) = 0;
    v16 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v22, 31 - __clz(v15));
    v28 = 129;
    v29 = 0;
    v22 = v11;
    v23 = v13;
    v24 = 1;
    v25 = v16;
    v26 = v17;
    v27 = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 128, &v28, 1, &v22, 2, 0);
  }
  return *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
}

void sub_1C4940308(uint64_t a1, int a2, double a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  int v16;

  if (a2 == 64)
  {
    v16 = 64;
    v15 = *(_QWORD *)&a3;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v11, (const llvm::APInt **)&v15);
    goto LABEL_5;
  }
  if (a2 == 32)
  {
    *(float *)&v4 = a3;
    v16 = 32;
    v15 = v4;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v11, (const llvm::APInt **)&v15);
LABEL_5:
    v5 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v13;
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v14 & 0xF;
    return;
  }
  v16 = 64;
  v15 = *(_QWORD *)&a3;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v11, (const llvm::APInt **)&v15);
  v6 = v12;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v14 & 0xF;
  v11 = 129;
  v7 = sub_1C4825F50(&v11);
  if ((_DWORD)v8 == 1)
  {
    v10 = v7;
    v7 = v10;
  }
  if (v7 == 64)
  {
    v9 = &unk_1C866F198;
  }
  else if (v7 == 32)
  {
    v9 = &unk_1C866F184;
  }
  else
  {
    v9 = &unk_1C866F15C;
  }
  llvm::APFloat::convert(a1, v9, 1, &v11);
}

uint64_t sub_1C4940448(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  unint64_t v10;
  int *v11;
  int *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t result;
  const char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  unint64_t v37;
  const char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  const char *v43;
  unsigned int v44;
  char v45;
  int v46;
  const char *v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  BOOL v65;
  char v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  int v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  int v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v129;
  char v130;
  unint64_t v131;
  char v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  llvm::MachineMemOperand *v141;
  int GenericVirtualRegister;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  char v155;
  char v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  llvm::MachineFunction *v165;
  unint64_t *v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  uint64_t v186;
  int v187;
  const char *v188;
  int v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  __int16 ***v193;
  int IncompleteVirtualRegister;
  uint64_t v195;
  uint64_t v196;
  llvm::MachineFunction *v197;
  unint64_t *v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t *v214;
  llvm::GlobalValue *v215;
  uint64_t v216;
  unsigned __int8 v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  llvm::MachineMemOperand *v225;
  int v226[4];
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  uint64_t *v232;
  void *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  int v243;
  char v244;
  char v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  a3[5] = *(_QWORD *)(a1 + 24);
  a3[6] = a1;
  v6 = (unsigned __int8 **)(a1 + 56);
  v7 = (unsigned __int8 **)(a3 + 4);
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v7)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v7);
    v8 = *v6;
    *v7 = *v6;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)v7, v8, 2);
  }
  v9 = (unint64_t *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 < 8)
  {
    v13 = 0;
    goto LABEL_26;
  }
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    *v9 = v10;
    v14 = v6;
    v13 = (int *)(a1 + 48);
    goto LABEL_18;
  }
  v11 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_QWORD *)(a1 + 48) & 7) == 3 && v11 != 0)
  {
    v16 = *v11;
    v13 = v11 + 2;
    v15 = v16;
    if (!(_DWORD)v16)
      goto LABEL_22;
    v14 = (unsigned __int8 **)&v13[2 * v15];
LABEL_18:
    while ((*(_WORD *)(*(_QWORD *)v13 + 36) & 0xF00) == 0)
    {
      v13 += 2;
      if (v13 == (int *)v14)
      {
        v13 = (int *)v14;
        break;
      }
    }
    if (v10 >= 8)
      goto LABEL_22;
LABEL_26:
    v9 = 0;
    v18 = 0;
    goto LABEL_27;
  }
  v13 = 0;
LABEL_22:
  if ((v10 & 7) != 0)
  {
    v9 = 0;
    if ((v10 & 7) == 3 && (v17 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8), (v10 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v18 = *v17;
      v9 = (unint64_t *)(v17 + 2);
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    *v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    v18 = 1;
  }
LABEL_27:
  if (v13 != (int *)&v9[v18] && *(_QWORD *)v13)
    return sub_1C49516A4(a1, a2, a3);
  sub_1C492E18C((uint64_t)&v218, a1, a2);
  v21 = v222;
  v214 = a3;
  if (v222 < 0 && (v222 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a2 + 432))
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v222 & 0x7FFFFFFF));
  else
    v22 = 0;
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v24 = v223;
  if ((v223 & 0xFFFFFFFFFFFFFFF9) != 0 && (v223 & 4) != 0)
  {
    v25 = 0x800000000000000;
    if ((v223 & 2) == 0)
      v25 = 0x8000000000000;
    v26 = v223 >> 3;
    v27 = (unsigned __int16)(v223 >> 3);
    if ((v25 & v223) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
      if ((v26 & 1) == 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
        if (v27 >= 5)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
          if ((v24 & 1) == 0)
          {
LABEL_42:
            if ((v24 & 2) != 0)
              v28 = (unsigned __int16)(v24 >> 19);
            else
              v28 = v24 >> 19;
LABEL_219:
            v141 = v225;
            if (v225)
            {
              GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, (v24 >> 1) & 0x3FFF8 | ((unint64_t)(v28 & 0x7FFFFFFF) << 20) | 4, "", 0);
              LODWORD(v233) = GenericVirtualRegister;
              LODWORD(v234) = 1;
              LODWORD(v237) = v222;
              LODWORD(v239) = 0;
              sub_1C55464EC(v214, 0x5Au, (int *)&v233, (int *)&v237, v141);
              LODWORD(v233) = v220;
              LODWORD(v234) = 1;
              LODWORD(v237) = GenericVirtualRegister;
              LODWORD(v239) = 0;
              sub_1C5546EF4(v214, (uint64_t *)&v233, (int *)&v237);
              v143 = *(_QWORD *)(a1 + 24);
              v144 = a1;
              if ((*(_BYTE *)a1 & 4) == 0)
              {
                v144 = a1;
                if ((*(_WORD *)(a1 + 44) & 8) != 0)
                {
                  v144 = a1;
                  do
                    v144 = *(_QWORD *)(v144 + 8);
                  while ((*(_WORD *)(v144 + 44) & 8) != 0);
                }
              }
LABEL_222:
              v145 = *(_QWORD *)(v144 + 8);
              v146 = v143 + 40;
              v147 = a1;
LABEL_223:
              sub_1C487FE80(v146, v147, v145);
              return 1;
            }
            return 0;
          }
LABEL_218:
          v28 = v26;
          goto LABEL_219;
        }
      }
    }
    else if (v27 >= 5 && ((v223 >> 3) & 1) == 0)
    {
      if ((v223 & 1) == 0)
        goto LABEL_42;
      goto LABEL_218;
    }
  }
  v29 = 35;
  if ((v22 & 4) == 0)
    v29 = 19;
  v30 = v22 >> v29;
  v31 = (v22 >> v29) & 0xFFFFFF;
  if (v31 == 3)
  {
    sub_1C493FD84((uint64_t)&v237, v21, a2, 0);
    v32 = v214;
    if (!(_BYTE)v239)
      goto LABEL_71;
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(v23 + 344) + 400))(*(_QWORD *)(v23 + 344), v237);
    if ((_DWORD)v20 == 17)
      goto LABEL_71;
    v74 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
    if ((v74 & 0x80000000) == 0 || (v74 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
      return 0;
    v75 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v74 & 0x7FFFFFFF));
    if (v75 != 129 && v75 != 257)
    {
      if ((v75 & 0xFFFFFFFFFFFFFFF9) == 0
        || (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v74 & 0x7FFFFFFF)) & 4) == 0)
      {
        return 0;
      }
      v129 = 0x8000000000000;
      if ((v75 & 2) != 0)
        v129 = 0x800000000000000;
      if ((v129 & v75) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
      result = 0;
      if ((v75 & 2) != 0 || (unsigned __int16)(v75 >> 3) > 4u)
        return result;
      v130 = 3;
      if ((v75 & 1) == 0)
        v130 = 19;
      v131 = v75 & 0x8000000000000000 | (8 * (v75 >> v130));
      if (v131 != 256 && v131 != 128)
        return 0;
    }
    v76 = sub_1C4940130(v21, a2, v214);
    v233 = (void *)16777244;
    LODWORD(v234) = 0;
    LODWORD(v237) = v76;
    LODWORD(v239) = 0;
    v77 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 317, &v233, 1, &v237, 1, 0);
    v79 = v77;
    v80 = v78;
    if (v75 == 257)
      goto LABEL_205;
    if (v75 == 16777244)
    {
      LODWORD(v233) = v74;
      LODWORD(v234) = 1;
      v237 = v77;
      v238 = v78;
      LODWORD(v239) = 1;
LABEL_209:
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 19, &v233, 1, &v237, 1, 0);
      goto LABEL_234;
    }
    if ((v75 & 0xFFFFFFFFFFFFFFF9) == 0 || (v75 & 6) != 4)
      goto LABEL_210;
    v132 = 3;
    if ((v75 & 1) == 0)
      v132 = 19;
    if ((v75 & 0x8000000000000000 | (8 * (v75 >> v132))) == 0x100)
    {
LABEL_205:
      v133 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
      v134 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
      v135 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
      v233 = (void *)__PAIR64__(v134, v133);
      LODWORD(v234) = v135;
      v237 = v79;
      v238 = v80;
      LODWORD(v239) = 1;
      sub_1C5547540((uint64_t)v214, (char *)&v233, 3, (uint64_t)&v237);
      if (v75 != 16777252)
      {
        if (v75 == 16777236)
        {
          LODWORD(v233) = v74;
          LODWORD(v234) = 1;
          LODWORD(v237) = v133;
          LODWORD(v239) = 0;
          LODWORD(v240) = v134;
          LODWORD(v242) = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 76, &v233, 1, &v237, 2, 0);
          goto LABEL_234;
        }
        if (v75 == 257)
        {
          LODWORD(v233) = v74;
          LODWORD(v234) = 1;
          LODWORD(v237) = v133;
          LODWORD(v239) = 0;
          goto LABEL_209;
        }
LABEL_234:
        v143 = *(_QWORD *)(a1 + 24);
        v144 = a1;
        if ((*(_BYTE *)a1 & 4) == 0)
        {
          v144 = a1;
          if ((*(_WORD *)(a1 + 44) & 8) != 0)
          {
            v144 = a1;
            do
              v144 = *(_QWORD *)(v144 + 8);
            while ((*(_WORD *)(v144 + 44) & 8) != 0);
          }
        }
        goto LABEL_222;
      }
      v237 = (void *)257;
      LODWORD(v238) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*v214 + 32))(v214, 68, &v237, 1, 0, 0, 0);
      v151 = 0;
      LODWORD(v233) = v74;
      LODWORD(v234) = 1;
      v230 = __PAIR64__(v134, v133);
      LODWORD(v231) = v135;
      HIDWORD(v231) = *(_DWORD *)(*(_QWORD *)(v152 + 32) + 4);
      v237 = &v239;
      v238 = 0x800000000;
      v153 = 16;
      do
      {
        v154 = (_DWORD *)((char *)&v237 + v153);
        *v154 = *(_DWORD *)((char *)&v230 + v151);
        v154[4] = 0;
        v153 += 24;
        v151 += 4;
      }
      while (v151 != 16);
      LODWORD(v238) = v238 + 4;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *))(*v214 + 32))(v214, 77, &v233, 1, &v239);
      v150 = v237;
      if (v237 == &v239)
        goto LABEL_234;
    }
    else
    {
LABEL_210:
      v237 = &v239;
      v238 = 0x600000000;
      v136 = 6;
      do
      {
        v137 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 129, "", 0);
        v138 = v238;
        if (v238 >= (unint64_t)HIDWORD(v238))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)&v239, v238 + 1, 4);
          v138 = v238;
        }
        *((_DWORD *)v237 + v138) = v137;
        LODWORD(v238) = v238 + 1;
        --v136;
      }
      while (v136);
      v230 = 8388660;
      LODWORD(v231) = 0;
      v233 = v79;
      v234 = v80;
      LODWORD(v235) = 1;
      v233 = (void *)sub_1C5546EF4(v214, (uint64_t *)&v230, (int *)&v233);
      v234 = v139;
      LODWORD(v235) = 1;
      sub_1C5547540((uint64_t)v214, (char *)v237, v238, (uint64_t)&v233);
      if (v75 == 129)
      {
        LODWORD(v230) = v74;
        LODWORD(v231) = 1;
        LODWORD(v233) = *(_DWORD *)v237;
        LODWORD(v235) = 0;
        (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 19, &v230, 1, &v233, 1, 0);
      }
      else
      {
        LODWORD(v233) = v74;
        LODWORD(v234) = 1;
        v148 = (int *)v237;
        v149 = 0x800000000000000;
        if ((v75 & 2) == 0)
          v149 = 0x8000000000000;
        if ((v149 & v75) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v140);
        sub_1C5544D6C((uint64_t)v214, (uint64_t)&v233, v148, (unsigned __int16)(v75 >> 3));
      }
      v150 = v237;
      if (v237 == &v239)
        goto LABEL_234;
    }
    free(v150);
    goto LABEL_234;
  }
  v32 = v214;
  if (v31 == 64)
  {
    sub_1C493FD84((uint64_t)&v215, v21, a2, 1);
    v34 = v217;
    if (!v217)
      return (v34 != 0) & v33;
    if (v6 != v7)
    {
      if (*v7)
        llvm::MetadataTracking::untrack((uint64_t)v7, *v7);
      v35 = *v6;
      *v7 = *v6;
      if (v35)
        llvm::MetadataTracking::track((uint64_t)v7, v35, 2);
    }
    v36 = v220;
    v37 = v223;
    v228 = v223;
    v229 = 129;
    if ((*((_QWORD *)v225 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v39 = (unint64_t)(sub_1C4825F50((unint64_t *)v225 + 3) + 7) >> 3;
      if ((_DWORD)v38 == 1)
    }
    else
    {
      v39 = -1;
    }
    v40 = v218;
    v41 = v216;
    v42 = sub_1C5EAB3E0(v215, v216, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 24) + 32) + 344), 0);
    v44 = v42;
    v230 = (unint64_t)v214;
    v231 = (unint64_t *)a2;
    v232 = &v229;
    if ((v37 & 0xFFFFFFFFFFFFFFF9) != 0 && (v37 & 6) == 2)
    {
      v45 = 35;
      if ((v37 & 4) == 0)
        v45 = 19;
      if (((v37 >> v45) & 0xFFFFFF) == 3)
      {
        v46 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, v229, "", 0);
        sub_1C4955998((uint64_t)&v230, v46, v44, v229);
        v48 = sub_1C4825F50(&v228);
        if ((_DWORD)v47 == 1)
        v233 = (void *)((8 * v48) | 1);
        LODWORD(v234) = 0;
        LODWORD(v237) = v46;
        LODWORD(v239) = 0;
        v49 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 126, &v233, 1, &v237, 1, 0);
        LODWORD(v233) = v36;
        LODWORD(v234) = 1;
        v237 = v49;
        v238 = v50;
        LODWORD(v239) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 81, &v233, 1, &v237, 1, 0);
      }
      else
      {
        v88 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
        v89 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
        sub_1C4955998((uint64_t)&v230, v88, v44, 0x101uLL);
        sub_1C4955998((uint64_t)&v230, v89, v44 + 4, 0x101uLL);
        v233 = (void *)513;
        LODWORD(v234) = 0;
        LODWORD(v237) = v88;
        LODWORD(v239) = 0;
        LODWORD(v240) = v89;
        LODWORD(v242) = 0;
        v90 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 76, &v233, 1, &v237, 2, 0);
        LODWORD(v233) = v36;
        LODWORD(v234) = 1;
        v237 = v90;
        v238 = v91;
        LODWORD(v239) = 1;
        sub_1C5546EF4(v214, (uint64_t *)&v233, (int *)&v237);
      }
      goto LABEL_136;
    }
    if (v37 == 65 || v39 == 1)
    {
      v81 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, v229, "", 0);
      sub_1C4955998((uint64_t)&v230, v81, v44 & 0xFFFFFFFE, v229);
      v233 = (void *)4194324;
      LODWORD(v234) = 0;
      LODWORD(v237) = v81;
      LODWORD(v239) = 0;
      v82 = (void *)sub_1C5546EF4(v214, (uint64_t *)&v233, (int *)&v237);
      v84 = v83;
      v85 = v41 & 1;
      if (v41 < 0)
        v85 = -v85;
      v237 = (void *)257;
      LODWORD(v238) = 0;
      v86 = sub_1C5544694((uint64_t)v214, (unint64_t *)&v237, v85);
      if (v37 == 65)
      {
        LODWORD(v233) = v36;
        LODWORD(v234) = 1;
        v237 = v82;
        v238 = v84;
        LODWORD(v239) = 1;
        v240 = v86;
        v241 = v87;
        LODWORD(v242) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 205, &v233, 1, &v237, 2, 0);
      }
      else
      {
        v233 = (void *)65;
        LODWORD(v234) = 0;
        v237 = v82;
        v238 = v84;
        LODWORD(v239) = 1;
        v240 = v86;
        v241 = v87;
        LODWORD(v242) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 205, &v233, 1, &v237, 2, 0);
        LODWORD(v233) = v36;
        LODWORD(v234) = 1;
        LODWORD(v237) = *(_DWORD *)(*(_QWORD *)(v92 + 32) + 4);
        LODWORD(v239) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 118, &v233, 1, &v237, 1, 0);
      }
      goto LABEL_136;
    }
    if (v224 != 129 && v224 != 257)
    {
      v33 = 0;
      if ((v224 & 0xFFFFFFFFFFFFFFF9) == 0 || (v224 & 4) == 0)
        return (v34 != 0) & v33;
      v103 = 3;
      if ((v224 & 1) == 0)
        v103 = 19;
      v104 = v224 >> v103;
      v105 = (v224 & 2) != 0
           ? (v224 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v104) | 2
           : v224 & 0x8000000000000000 | (8 * v104) | 1;
      if (v105 != 257 && v105 != 129)
      {
LABEL_199:
        v33 = 0;
        return (v34 != 0) & v33;
      }
    }
    if ((v224 & 1) != 0)
    {
      sub_1C4955998((uint64_t)&v230, v221, v42, v224);
      goto LABEL_197;
    }
    if ((v224 & 2) != 0)
    {
      v60 = v224 & 4;
      v155 = 35;
      v156 = 19;
      if ((v224 & 4) == 0)
        v155 = 19;
      v157 = v224 >> v155;
      if ((v224 & 4) == 0)
        v156 = 3;
      v62 = (8 * (unsigned __int16)(v224 >> v156)) & 0xFFFFF8000007FFFFLL | ((v157 & 0xFFFFFF) << 19) | 2;
      v59 = v224 & 0x8000000000000000 | (v224 >> 16) & 0x7FFFFFFF8 | 1;
      v61 = 0x800000000000000;
    }
    else
    {
      v59 = v224 & 0x8000000000000000 | (v224 >> 16) & 0x7FFFFFFF8 | 1;
      v60 = v224 & 4;
      v61 = 0x8000000000000;
      v62 = v59;
    }
    v227 = v62;
    v233 = &v235;
    v234 = 0x400000000;
    v63 = v61 & v224;
    v64 = (unsigned __int16)(v224 >> 3);
    v65 = v60 == 0;
    v66 = 35;
    v67 = 19;
    if (v65)
      v66 = 19;
    v68 = v224 >> v66;
    if (v65)
      v67 = 3;
    v69 = (8 * (unsigned __int16)(v224 >> v67)) & 0xFFFFF8000007FFFFLL | ((v68 & 0xFFFFFF) << 19);
    if ((v224 & 2) != 0)
      v70 = v69 | 2;
    else
      v70 = v59;
    if (!v63)
      goto LABEL_115;
    while (1)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v43);
      if (!v64)
        break;
      while (1)
      {
        v71 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, v70, "", 0);
        sub_1C4955998((uint64_t)&v230, v71, v44, v227);
        v72 = v234;
        if (v234 >= (unint64_t)HIDWORD(v234))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)&v235, v234 + 1, 4);
          v72 = v234;
        }
        *((_DWORD *)v233 + v72) = v71;
        LODWORD(v234) = v234 + 1;
        v73 = sub_1C4825F50(&v227);
        if ((_DWORD)v43 == 1)
        v44 += v73 >> 3;
        --v64;
        if (v63)
          break;
LABEL_115:
        if (!v64)
          goto LABEL_141;
      }
    }
LABEL_141:
    v226[0] = v221;
    v226[2] = 1;
    v94 = (int *)v233;
    v95 = v234;
    v237 = &v239;
    v238 = 0x800000000;
    if (v234 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)&v239, v234, 24);
      v96 = v238;
      v97 = (uint64_t *)v237;
    }
    else
    {
      if (!(_DWORD)v234)
      {
        v102 = 0;
        v97 = &v239;
LABEL_193:
        LODWORD(v238) = v102 + v95;
        (*(void (**)(uint64_t *, uint64_t, int *, uint64_t, uint64_t *))(*v214 + 32))(v214, 77, v226, 1, v97);
        if (v237 != &v239)
          free(v237);
        if (v233 != &v235)
          free(v233);
LABEL_197:
        if (v223 == v224 || sub_1C4955F2C((uint64_t)&v218, v214))
        {
LABEL_136:
          v93 = v40;
          if ((*(_BYTE *)v40 & 4) == 0)
          {
            v93 = v40;
            if ((*(_WORD *)(v40 + 44) & 8) != 0)
            {
              v93 = v40;
              do
                v93 = *(_QWORD *)(v93 + 8);
              while ((*(_WORD *)(v93 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v40 + 24) + 40, v40, *(_QWORD *)(v93 + 8));
          v33 = 1;
          return (v34 != 0) & v33;
        }
        goto LABEL_199;
      }
      v96 = 0;
      v97 = &v239;
    }
    v98 = 3 * v96;
    v99 = 4 * v95;
    do
    {
      v100 = *v94++;
      v101 = &v97[v98];
      *(_DWORD *)v101 = v100;
      *((_DWORD *)v101 + 4) = 0;
      v98 += 3;
      v99 -= 4;
    }
    while (v99);
    v102 = v238;
    goto LABEL_193;
  }
LABEL_71:
  if (v219 != 2 && v219 != 5)
  {
    v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 16) + 168))(*(_QWORD *)(v23 + 16));
    if ((sub_1C4932E94(v51, a1, a2, v32) & 1) != 0)
      return 1;
  }
  result = 0;
  v52 = v30 & 0xFFFFFF;
  if ((v30 & 0xFFFFFF) > 2)
  {
    if (v52 == 3)
      return sub_1C49550DC((uint64_t)&v218, a2, v32);
    if (v52 != 65)
      return result;
    return sub_1C49546E4((uint64_t)&v218, a2, v32);
  }
  if ((v52 - 1) < 2)
    return sub_1C49546E4((uint64_t)&v218, a2, v32);
  if (v52)
    return result;
  v53 = *(_QWORD *)(v32[1] + 8);
  v54 = v224;
  if (v224 == 129 || v224 == 257)
    goto LABEL_157;
  if ((v224 & 0xFFFFFFFFFFFFFFF9) == 0 || (v224 & 4) == 0)
    goto LABEL_156;
  v55 = 3;
  if ((v224 & 1) == 0)
    v55 = 19;
  v56 = v224 >> v55;
  v57 = (v224 & 2) != 0
      ? (v224 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v56) | 2
      : v224 & 0x8000000000000000 | (8 * v56) | 1;
  if (v57 != 257 && v57 != 129)
  {
LABEL_156:
    if (v224 == 513)
      goto LABEL_157;
    return 0;
  }
  v58 = 0x800000000000000;
  if ((v224 & 2) == 0)
    v58 = 0x8000000000000;
  if ((v58 & v224) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
  if (v54 != 513 && (unsigned __int16)(v54 >> 3) >= 5u)
    return 0;
LABEL_157:
  v226[0] = v222;
  v237 = v226;
  LODWORD(v233) = v222;
  sub_1C49584A8((_DWORD **)&v237, a2, (unsigned int *)&v233);
  v106 = v226[0];
  v107 = v226[0] & 0x7FFFFFFF;
  v108 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v107 + 8);
  if (v226[0] >= 0)
    v108 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v226[0]);
  v109 = *v108;
  if (!v109)
    return 0;
  if ((*(_BYTE *)(v109 + 3) & 1) == 0)
  {
    v109 = *(_QWORD *)(v109 + 24);
    if (!v109 || (*(_BYTE *)(v109 + 3) & 1) == 0)
      return 0;
  }
  v110 = *(_QWORD *)(v109 + 8);
  if (!v110)
    return 0;
  v111 = sub_1C49578C0(*(_QWORD *)(v109 + 8));
  v113 = *(_QWORD *)(a2 + 24);
  v114 = *(_QWORD *)(a2 + 272);
  if (v111)
  {
    v115 = *(_QWORD *)(v110 + 32);
    LODWORD(v230) = *(_DWORD *)(v115 + 36);
    v116 = v230;
    v117 = *(unsigned int *)(v115 + 68);
    v118 = v113 + 16 * (v230 & 0x7FFFFFFF) + 8;
    v119 = (uint64_t *)(v114 + 8 * v230);
    if ((v230 & 0x80000000) != 0)
      v119 = (uint64_t *)v118;
    v120 = *v119;
    if (v120)
    {
      if ((*(_BYTE *)(v120 + 3) & 1) != 0 || (v120 = *(_QWORD *)(v120 + 24)) != 0 && (*(_BYTE *)(v120 + 3) & 1) != 0)
      {
        v182 = *(_QWORD *)(v120 + 8);
        if (v182)
        {
          if (**(_WORD **)(v182 + 16) == 80 && *(_DWORD *)(v182 + 40) == 2)
          {
            v116 = *(_DWORD *)(*(_QWORD *)(v182 + 32) + 36);
            LODWORD(v230) = v116;
          }
        }
      }
    }
    v237 = &v230;
    LODWORD(v233) = v116;
    sub_1C4958594((_DWORD **)&v237, a2, (unsigned int *)&v233);
    v121 = v230;
    v113 = *(_QWORD *)(a2 + 24);
    v122 = (uint64_t *)(v113 + 16 * (v230 & 0x7FFFFFFF) + 8);
    v114 = *(_QWORD *)(a2 + 272);
    if ((v230 & 0x80000000) == 0)
      v122 = (uint64_t *)(v114 + 8 * v230);
    v123 = *v122;
    if (v123)
    {
      if ((*(_BYTE *)(v123 + 3) & 1) != 0)
        goto LABEL_325;
      v123 = *(_QWORD *)(v123 + 24);
      if (!v123)
        goto LABEL_171;
      if ((*(_BYTE *)(v123 + 3) & 1) != 0)
LABEL_325:
        v123 = *(_QWORD *)(v123 + 8);
      else
        v123 = 0;
    }
LABEL_171:
    v124 = (uint64_t *)(v113 + 16 * (v117 & 0x7FFFFFFF) + 8);
    if ((int)v117 >= 0)
      v124 = (uint64_t *)(v114 + 8 * v117);
    v125 = *v124;
    if (v125)
    {
      if ((*(_BYTE *)(v125 + 3) & 1) != 0 || (v125 = *(_QWORD *)(v125 + 24)) != 0 && (*(_BYTE *)(v125 + 3) & 1) != 0)
      {
        v126 = 0;
        if (!v123)
          goto LABEL_175;
        v183 = *(_QWORD *)(v125 + 8);
        if (!v183)
          goto LABEL_175;
        if (**(_WORD **)(v123 + 16) == 70 && **(_WORD **)(v183 + 16) == 120)
        {
          v184 = *(_QWORD *)(*(_QWORD *)(v183 + 32) + 48);
          v185 = (unsigned int *)(v184 + 24);
          if (*(_DWORD *)(v184 + 32) >= 0x41u)
            v185 = *(unsigned int **)v185;
          v126 = *v185;
          v107 = v230 & 0x7FFFFFFF;
          LODWORD(v106) = v230;
          goto LABEL_176;
        }
      }
    }
    v126 = 0;
LABEL_175:
    v121 = v106;
LABEL_176:
    v127 = v106;
    v106 = v121;
    goto LABEL_259;
  }
  v126 = 0;
  v127 = v106;
LABEL_259:
  v158 = *(unsigned __int8 *)(v53 + 1709);
  v159 = v113 + 16 * v107 + 8;
  v160 = (uint64_t *)(v114 + 8 * v106);
  if (v127 < 0)
    v160 = (uint64_t *)v159;
  v161 = *v160;
  if (v161
    && ((*(_BYTE *)(v161 + 3) & 1) != 0 || (v161 = *(_QWORD *)(v161 + 24)) != 0 && (*(_BYTE *)(v161 + 3) & 1) != 0)
    && (v186 = *(_QWORD *)(v161 + 8)) != 0)
  {
    v187 = **(unsigned __int16 **)(v186 + 16);
    v237 = &v218;
    v238 = a2;
    v239 = 0;
    LODWORD(v240) = -1;
    v244 = 0;
    v245 = 0;
    sub_1C492E760(&v237, v112);
    if (v243 == 3 && *(_BYTE *)(v239 + 326))
      v162 = v241 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
    else
      v162 = v241 & 0xFFFFFFFFFFFFF9FFLL;
    v241 = v162;
    if (v187 == 70)
    {
      v233 = (void *)v224;
      v189 = sub_1C4825F50((unint64_t *)&v233);
      if ((_DWORD)v188 == 1)
      HIDWORD(v191) = v189;
      LODWORD(v191) = v189 - 8;
      v190 = v191 >> 3;
      v192 = dword_1C660B16C[v190];
      v193 = off_1E7FA4430[v190];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v193;
      v195 = *(_QWORD *)(a2 + 8);
      if (v195)
        (*(void (**)(uint64_t))(*(_QWORD *)v195 + 24))(v195);
      v197 = sub_1C55437B8(v214, v192);
      v198 = (unint64_t *)v196;
      v199 = (unint64_t *)v214[6];
      v200 = *(_QWORD *)(v214[5] + 40);
      *(_QWORD *)(v196 + 24) = v200;
      v201 = *(_QWORD *)(v200 + 32);
      v202 = *(unsigned int *)(v196 + 40);
      if ((_DWORD)v202)
      {
        v203 = *(_QWORD *)(v196 + 32);
        v204 = *(_QWORD *)(v201 + 40);
        v205 = 32 * v202;
        do
        {
          if (!*(_BYTE *)v203)
          {
            v206 = *(unsigned int *)(v203 + 4);
            if ((int)v206 >= 0)
              v207 = (uint64_t *)(*(_QWORD *)(v204 + 272) + 8 * v206);
            else
              v207 = (uint64_t *)(*(_QWORD *)(v204 + 24) + 16 * (v206 & 0x7FFFFFFF) + 8);
            v208 = *v207;
            if (*v207)
            {
              v209 = *(_QWORD *)(v208 + 16);
              *(_QWORD *)(v208 + 16) = v203;
              *(_QWORD *)(v203 + 16) = v209;
              if ((*(_BYTE *)(v203 + 3) & 1) != 0)
              {
                *(_QWORD *)(v203 + 24) = v208;
              }
              else
              {
                *(_QWORD *)(v203 + 24) = 0;
                v207 = (uint64_t *)(v209 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v203 + 16) = v203;
              *(_QWORD *)(v203 + 24) = 0;
            }
            *v207 = v203;
          }
          v203 += 32;
          v205 -= 32;
        }
        while (v205);
      }
      v210 = *(_QWORD *)(v201 + 728);
      if (v210)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v210 + 24))(v210, v196);
      v211 = *v199 & 0xFFFFFFFFFFFFFFF8;
      *v198 = v211 | *v198 & 7;
      v198[1] = (unint64_t)v199;
      *(_QWORD *)(v211 + 8) = v198;
      *v199 = *v199 & 7 | (unint64_t)v198;
      v212 = v214[7];
      if (v212)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v212 + 24))(v212, v198);
      v234 = 0;
      v235 = 0;
      v236 = 0;
      LODWORD(v233) = 0x1000000;
      HIDWORD(v233) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v233);
      v230 = (unint64_t)v197;
      v231 = v198;
      LODWORD(v233) = 1;
      v234 = 0;
      v235 = v162;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v233);
      LODWORD(v233) = 1;
      v234 = 0;
      v235 = v242;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v233);
      v213 = *(_DWORD *)(*(_QWORD *)(v186 + 32) + 48);
      LODWORD(v233) = 5;
      v234 = 0;
      LODWORD(v235) = v213;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v233);
      LODWORD(v233) = 1;
      v234 = 0;
      v235 = v126;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v233);
      LODWORD(v233) = 1;
      v234 = 0;
      v235 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v197, (const llvm::MachineOperand *)&v233);
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v198, v197, v225);
      sub_1C49400A8((uint64_t)&v230);
      LODWORD(v215) = v221;
      LODWORD(v216) = 1;
      LODWORD(v233) = IncompleteVirtualRegister;
      LODWORD(v235) = 0;
      (*(void (**)(uint64_t *, uint64_t, llvm::GlobalValue **, uint64_t, void **, uint64_t, _QWORD))(*v214 + 32))(v214, 19, &v215, 1, &v233, 1, 0);
      goto LABEL_274;
    }
  }
  else
  {
    v237 = &v218;
    v238 = a2;
    v239 = 0;
    LODWORD(v240) = -1;
    v244 = 0;
    v245 = 0;
    sub_1C492E760(&v237, v112);
    if (v243 == 3 && *(_BYTE *)(v239 + 326))
      v162 = v241 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
    else
      v162 = v241 & 0xFFFFFFFFFFFFF9FFLL;
    v241 = v162;
  }
  v226[0] = sub_1C4957FF8(a2, v214, (uint64_t)&v237, v226[0], v158 != 0);
  v163 = *(_DWORD *)((char *)&dword_1C64689D0[32 * (unint64_t)*(unsigned __int8 *)(v239 + 381)
                                            - 1
                                            + 16 * (unint64_t)HIDWORD(v240)
                                            + WORD1(v240)]
                   + ((4 * (unsigned __int16)v240) & 0x3FFF0));
  if (v163 == -1)
    llvm::report_fatal_error((llvm *)"Unsupported stack access", (const char *)1);
  v165 = sub_1C55437B8(v214, v163);
  v166 = (unint64_t *)v164;
  v167 = (unint64_t *)v214[6];
  v168 = *(_QWORD *)(v214[5] + 40);
  *(_QWORD *)(v164 + 24) = v168;
  v169 = *(_QWORD *)(v168 + 32);
  v170 = *(unsigned int *)(v164 + 40);
  if ((_DWORD)v170)
  {
    v175 = *(_QWORD *)(v164 + 32);
    v176 = *(_QWORD *)(v169 + 40);
    v177 = 32 * v170;
    do
    {
      if (!*(_BYTE *)v175)
      {
        v178 = *(unsigned int *)(v175 + 4);
        if ((int)v178 >= 0)
          v179 = (uint64_t *)(*(_QWORD *)(v176 + 272) + 8 * v178);
        else
          v179 = (uint64_t *)(*(_QWORD *)(v176 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
        v180 = *v179;
        if (*v179)
        {
          v181 = *(_QWORD *)(v180 + 16);
          *(_QWORD *)(v180 + 16) = v175;
          *(_QWORD *)(v175 + 16) = v181;
          if ((*(_BYTE *)(v175 + 3) & 1) != 0)
          {
            *(_QWORD *)(v175 + 24) = v180;
          }
          else
          {
            *(_QWORD *)(v175 + 24) = 0;
            v179 = (uint64_t *)(v181 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v175 + 16) = v175;
          *(_QWORD *)(v175 + 24) = 0;
        }
        *v179 = v175;
      }
      v175 += 32;
      v177 -= 32;
    }
    while (v177);
  }
  v171 = *(_QWORD *)(v169 + 728);
  if (v171)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v171 + 24))(v171, v164);
  v172 = *v167 & 0xFFFFFFFFFFFFFFF8;
  *v166 = v172 | *v166 & 7;
  v166[1] = (unint64_t)v167;
  *(_QWORD *)(v172 + 8) = v166;
  *v167 = *v167 & 7 | (unint64_t)v166;
  v173 = v214[7];
  if (v173)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v173 + 24))(v173, v166);
  v230 = (unint64_t)v165;
  v231 = v166;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  LODWORD(v233) = 0x1000000;
  HIDWORD(v233) = v221;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v233);
  LODWORD(v233) = 1;
  v234 = 0;
  v235 = v162 | ((unint64_t)(v158 == 0) << 8);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v233);
  LODWORD(v233) = 1;
  v234 = 0;
  v235 = v242;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v233);
  v234 = 0;
  v235 = 0;
  LODWORD(v233) = 0;
  HIDWORD(v233) = v226[0];
  v236 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v233);
  LODWORD(v233) = 1;
  v234 = 0;
  v235 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v165, (const llvm::MachineOperand *)&v233);
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v166, v165, v225);
  sub_1C49400A8((uint64_t)&v230);
LABEL_274:
  if (v223 == v224 || (result = sub_1C4955F2C((uint64_t)&v218, v214), (_DWORD)result))
  {
    v147 = v218;
    v174 = v218;
    if ((*(_BYTE *)v218 & 4) == 0)
    {
      v174 = v218;
      if ((*(_WORD *)(v218 + 44) & 8) != 0)
      {
        v174 = v218;
        do
          v174 = *(_QWORD *)(v174 + 8);
        while ((*(_WORD *)(v174 + 44) & 8) != 0);
      }
    }
    v145 = *(_QWORD *)(v174 + 8);
    v146 = *(_QWORD *)(v218 + 24) + 40;
    goto LABEL_223;
  }
  return result;
}

uint64_t sub_1C4941E84(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  unint64_t v10;
  int *v11;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t result;
  const char *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  llvm::MachineMemOperand *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int GenericVirtualRegister;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  llvm::MachineFunction *v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  int v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  llvm::MachineFunction *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  int v134;
  int v135;
  unint64_t v136;
  unsigned int v137;
  __int16 ***v138;
  int IncompleteVirtualRegister;
  uint64_t v140;
  uint64_t v141;
  llvm::MachineFunction *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  llvm::GlobalValue *v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  int v175;
  int v176;
  unsigned int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  llvm::MachineMemOperand *v182;
  unint64_t *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  char v190;
  char v191;
  unint64_t v192;
  unint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v5 = a1;
  v197 = *MEMORY[0x1E0C80C00];
  a3[5] = *(_QWORD *)(a1 + 24);
  a3[6] = a1;
  v6 = (unsigned __int8 **)(a1 + 56);
  v7 = (unsigned __int8 **)(a3 + 4);
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v7)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v7);
    v8 = *v6;
    *v7 = *v6;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)v7, v8, 2);
  }
  v9 = (unint64_t *)(v5 + 48);
  v10 = *(_QWORD *)(v5 + 48);
  if (v10 < 8)
  {
    v13 = 0;
    goto LABEL_26;
  }
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    *v9 = v10;
    v13 = (unsigned __int8 **)(v5 + 48);
    goto LABEL_18;
  }
  v11 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_QWORD *)(v5 + 48) & 7) == 3 && v11 != 0)
  {
    v15 = *v11;
    v13 = (unsigned __int8 **)(v11 + 2);
    v14 = v15;
    if (!(_DWORD)v15)
      goto LABEL_22;
    v6 = &v13[v14];
LABEL_18:
    while ((*((_WORD *)*v13 + 18) & 0xF00) == 0)
    {
      if (++v13 == v6)
      {
        v13 = v6;
        break;
      }
    }
    if (v10 >= 8)
      goto LABEL_22;
LABEL_26:
    v9 = 0;
    v17 = 0;
    goto LABEL_27;
  }
  v13 = 0;
LABEL_22:
  if ((v10 & 7) != 0)
  {
    v9 = 0;
    if ((v10 & 7) == 3 && (v16 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8), (v10 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v17 = *v16;
      v9 = (unint64_t *)(v16 + 2);
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    *v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    v17 = 1;
  }
LABEL_27:
  if (v13 != (unsigned __int8 **)&v9[v17] && *v13)
    return sub_1C49516A4(v5, (uint64_t)a2, a3);
  sub_1C492E18C((uint64_t)&v174, v5, (uint64_t)a2);
  v20 = v181;
  if (v175 == 2 || v175 == 5)
    goto LABEL_32;
  if (v179 == 4194436 || v179 == 8388676 || v179 == 8388660)
  {
    v48 = v182;
    if (!v182)
      return 0;
    if (v179 >> 19 == 16)
    {
      v66 = 262136;
      v67 = 1;
    }
    else
    {
      v66 = 131064;
      v67 = 2;
    }
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister((uint64_t)a2, (v179 >> v67) & v66 | 0x1000004, "", 0);
    LODWORD(v193) = GenericVirtualRegister;
    LODWORD(v194) = 1;
    LODWORD(v183) = v176;
    LODWORD(v185) = 0;
    sub_1C5546EF4(a3, (uint64_t *)&v193, (int *)&v183);
    LODWORD(v183) = GenericVirtualRegister;
    LODWORD(v185) = 0;
    LODWORD(v193) = v178;
    LODWORD(v195) = 0;
    sub_1C5546848(a3, (int *)&v183, (int *)&v193, v48);
    v50 = *(_QWORD *)(v5 + 24);
    v51 = v5;
    if ((*(_BYTE *)v5 & 4) == 0)
    {
      v51 = v5;
      if ((*(_WORD *)(v5 + 44) & 8) != 0)
      {
        v51 = v5;
        do
          v51 = *(_QWORD *)(v51 + 8);
        while ((*(_WORD *)(v51 + 44) & 8) != 0);
      }
    }
    goto LABEL_102;
  }
  if ((v179 & 0xFFFFFFFFFFFFFFF9) != 0 && (v179 & 2) != 0 && (v179 & 4) == 0)
  {
    v193 = (unint64_t *)(((((unint64_t)(8
                                                    * llvm::DataLayout::getPointerSize((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v5 + 24) + 32) + 40)+ 272), (v179 >> 19) & 0xFFFFFF)) >> 3) & 0x1FFFFFFF) << 6) | 1);
    LODWORD(v194) = 0;
    LODWORD(v183) = v176;
    LODWORD(v185) = 0;
    sub_1C5546EF4(a3, (uint64_t *)&v193, (int *)&v183);
    LODWORD(v183) = *(_DWORD *)(*(_QWORD *)(v49 + 32) + 4);
    LODWORD(v185) = 0;
    LODWORD(v193) = v178;
    LODWORD(v195) = 0;
    sub_1C5546848(a3, (int *)&v183, (int *)&v193, v182);
    v50 = *(_QWORD *)(v5 + 24);
    v51 = v5;
    if ((*(_BYTE *)v5 & 4) == 0)
    {
      v51 = v5;
      if ((*(_WORD *)(v5 + 44) & 8) != 0)
      {
        v51 = v5;
        do
          v51 = *(_QWORD *)(v51 + 8);
        while ((*(_WORD *)(v51 + 44) & 8) != 0);
      }
    }
    goto LABEL_102;
  }
  v52 = 35;
  if ((v181 & 4) == 0)
    v52 = 19;
  if (((v181 >> v52) & 0xFFFFFF) == 0x40)
  {
    sub_1C493FD84((uint64_t)&v171, v178, (uint64_t)a2, 1);
    if (!v173)
      return 0;
    v5 = v174;
    v53 = sub_1C5EAB3E0(v171, v172, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v174 + 24) + 32) + 344), 0);
    v54 = v179;
    if (v179 != v180)
    {
      result = sub_1C4955F2C((uint64_t)&v174, a3);
      if (!(_DWORD)result)
        return result;
      v54 = v180;
    }
    if (v54 != 257 && v54 != 129)
    {
      result = 0;
      if ((v54 & 0xFFFFFFFFFFFFFFF9) == 0 || (v54 & 4) == 0)
        return result;
      v79 = 3;
      if ((v54 & 1) == 0)
        v79 = 19;
      v80 = v54 >> v79;
      if ((v54 & 2) != 0)
        v81 = (v54 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v80) | 2;
      else
        v81 = v54 & 0x8000000000000000 | (8 * v80) | 1;
      if (v81 == 257 || v81 == 129)
      {
        if ((v54 & 2) != 0)
          v82 = (v54 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v80) | 2;
        else
          v82 = v54 & 0x8000000000000000 | (8 * v80) | 1;
        v192 = v82;
        v193 = &v195;
        v194 = 0x400000000;
        if ((sub_1C49540EC(v177, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v193) & 1) != 0)
        {
          v84 = 0;
          v85 = 0x800000000000000;
          if ((v54 & 2) == 0)
            v85 = 0x8000000000000;
          v170 = v85 & v54;
          while (1)
          {
            if (v170)
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v83);
            if (v84 == (unsigned __int16)(v54 >> 3))
              break;
            v86 = *((_DWORD *)v193 + v84);
            v88 = sub_1C55437B8(a3, 0x165u);
            v89 = (unint64_t *)v87;
            v90 = (unint64_t *)a3[6];
            v91 = *(_QWORD *)(a3[5] + 40);
            *(_QWORD *)(v87 + 24) = v91;
            v92 = *(_QWORD *)(v91 + 32);
            v93 = *(unsigned int *)(v87 + 40);
            if ((_DWORD)v93)
            {
              v98 = *(_QWORD *)(v87 + 32);
              v99 = *(_QWORD *)(v92 + 40);
              v100 = 32 * v93;
              do
              {
                if (!*(_BYTE *)v98)
                {
                  v101 = *(unsigned int *)(v98 + 4);
                  if ((int)v101 >= 0)
                    v102 = (uint64_t *)(*(_QWORD *)(v99 + 272) + 8 * v101);
                  else
                    v102 = (uint64_t *)(*(_QWORD *)(v99 + 24) + 16 * (v101 & 0x7FFFFFFF) + 8);
                  v103 = *v102;
                  if (*v102)
                  {
                    v104 = *(_QWORD *)(v103 + 16);
                    *(_QWORD *)(v103 + 16) = v98;
                    *(_QWORD *)(v98 + 16) = v104;
                    if ((*(_BYTE *)(v98 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v98 + 24) = v103;
                    }
                    else
                    {
                      *(_QWORD *)(v98 + 24) = 0;
                      v102 = (uint64_t *)(v104 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v98 + 16) = v98;
                    *(_QWORD *)(v98 + 24) = 0;
                  }
                  *v102 = v98;
                }
                v98 += 32;
                v100 -= 32;
              }
              while (v100);
            }
            v94 = *(_QWORD *)(v92 + 728);
            if (v94)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 24))(v94, v87);
            v95 = *v90 & 0xFFFFFFFFFFFFFFF8;
            *v89 = v95 | *v89 & 7;
            v89[1] = (unint64_t)v90;
            *(_QWORD *)(v95 + 8) = v89;
            *v90 = *v90 & 7 | (unint64_t)v89;
            v96 = a3[7];
            if (v96)
              (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v96 + 24))(v96, v89);
            v184 = 0;
            LODWORD(v183) = 0;
            HIDWORD(v183) = v86;
            v185 = 0;
            v186 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v88, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            v184 = 0;
            v185 = v53;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v88, (const llvm::MachineOperand *)&v183);
            v97 = sub_1C4825F50(&v192);
            if ((_DWORD)v83 == 1)
            v53 += v97 >> 3;
            ++v84;
          }
          v105 = v5;
          if ((*(_BYTE *)v5 & 4) == 0)
          {
            v105 = v5;
            if ((*(_WORD *)(v5 + 44) & 8) != 0)
            {
              v105 = v5;
              do
                v105 = *(_QWORD *)(v105 + 8);
              while ((*(_WORD *)(v105 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v105 + 8));
          if (v193 != &v195)
            free(v193);
          return 1;
        }
        if (v193 != &v195)
          free(v193);
      }
      return 0;
    }
    v55 = v177;
    v57 = sub_1C55437B8(a3, 0x165u);
    v58 = (unint64_t *)v56;
    v59 = (unint64_t *)a3[6];
    v60 = *(_QWORD *)(a3[5] + 40);
    *(_QWORD *)(v56 + 24) = v60;
    v61 = *(_QWORD *)(v60 + 32);
    v62 = *(unsigned int *)(v56 + 40);
    if ((_DWORD)v62)
    {
      v106 = *(_QWORD *)(v56 + 32);
      v107 = *(_QWORD *)(v61 + 40);
      v108 = 32 * v62;
      do
      {
        if (!*(_BYTE *)v106)
        {
          v109 = *(unsigned int *)(v106 + 4);
          if ((int)v109 >= 0)
            v110 = (uint64_t *)(*(_QWORD *)(v107 + 272) + 8 * v109);
          else
            v110 = (uint64_t *)(*(_QWORD *)(v107 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8);
          v111 = *v110;
          if (*v110)
          {
            v112 = *(_QWORD *)(v111 + 16);
            *(_QWORD *)(v111 + 16) = v106;
            *(_QWORD *)(v106 + 16) = v112;
            if ((*(_BYTE *)(v106 + 3) & 1) != 0)
            {
              *(_QWORD *)(v106 + 24) = v111;
            }
            else
            {
              *(_QWORD *)(v106 + 24) = 0;
              v110 = (uint64_t *)(v112 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v106 + 16) = v106;
            *(_QWORD *)(v106 + 24) = 0;
          }
          *v110 = v106;
        }
        v106 += 32;
        v108 -= 32;
      }
      while (v108);
    }
    v63 = *(_QWORD *)(v61 + 728);
    if (v63)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 24))(v63, v56);
    v64 = *v59 & 0xFFFFFFFFFFFFFFF8;
    *v58 = v64 | *v58 & 7;
    v58[1] = (unint64_t)v59;
    *(_QWORD *)(v64 + 8) = v58;
    *v59 = *v59 & 7 | (unint64_t)v58;
    v65 = a3[7];
    if (v65)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v65 + 24))(v65, v58);
    v184 = 0;
    v185 = 0;
    LODWORD(v183) = 0;
    HIDWORD(v183) = v55;
    v186 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)&v183);
    LODWORD(v183) = 1;
    v184 = 0;
    v185 = v53;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)&v183);
    v50 = *(_QWORD *)(v5 + 24);
    v51 = v5;
    if ((*(_BYTE *)v5 & 4) == 0)
    {
      v51 = v5;
      if ((*(_WORD *)(v5 + 44) & 8) != 0)
      {
        v51 = v5;
        do
          v51 = *(_QWORD *)(v51 + 8);
        while ((*(_WORD *)(v51 + 44) & 8) != 0);
      }
    }
LABEL_102:
    v69 = *(_QWORD *)(v51 + 8);
    v70 = v50 + 40;
    v71 = v5;
LABEL_103:
    sub_1C487FE80(v70, v71, v69);
    return 1;
  }
  v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 32) + 16);
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 168))(v77);
  if ((sub_1C4933670(v78, v5, (uint64_t)a2, a3) & 1) != 0)
    return 1;
LABEL_32:
  result = 0;
  v21 = 35;
  if ((v20 & 4) == 0)
    v21 = 19;
  v22 = (v20 >> v21) & 0xFFFFFF;
  if ((int)v22 > 2)
  {
    if ((_DWORD)v22 == 3)
      return sub_1C49550DC((uint64_t)&v174, (uint64_t)a2, a3);
    if ((_DWORD)v22 != 65)
      return result;
    return sub_1C49546E4((uint64_t)&v174, (uint64_t)a2, a3);
  }
  if ((v22 - 1) < 2)
    return sub_1C49546E4((uint64_t)&v174, (uint64_t)a2, a3);
  if ((_DWORD)v22)
    return result;
  v23 = *(_QWORD *)(a3[1] + 8);
  v24 = v178;
  LODWORD(v192) = v178;
  v25 = v180;
  if (v180 != 129 && v180 != 257)
  {
    result = 0;
    if ((v180 & 0xFFFFFFFFFFFFFFF9) == 0 || (v180 & 4) == 0)
      return result;
    v72 = 3;
    if ((v180 & 1) == 0)
      v72 = 19;
    v73 = v180 >> v72;
    v74 = v180 & 0x8000000000000000 | (8 * v73) | 1;
    v75 = (v180 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v73) | 2;
    if ((v180 & 2) == 0)
      v75 = v74;
    if (v75 == 257 || v75 == 129)
    {
      v76 = 0x800000000000000;
      if ((v180 & 2) == 0)
        v76 = 0x8000000000000;
      if ((v76 & v180) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v19);
      if ((unsigned __int16)(v25 >> 3) <= 4u)
      {
        v24 = v192;
        goto LABEL_39;
      }
    }
    return 0;
  }
LABEL_39:
  v183 = &v192;
  LODWORD(v193) = v24;
  sub_1C49584A8((_DWORD **)&v183, (uint64_t)a2, (unsigned int *)&v193);
  v26 = v192;
  v27 = v192 & 0x7FFFFFFF;
  v28 = (uint64_t *)(a2[3] + 16 * v27 + 8);
  if ((v192 & 0x80000000) == 0)
    v28 = (uint64_t *)(a2[34] + 8 * v192);
  v29 = *v28;
  if (!v29)
    return 0;
  if ((*(_BYTE *)(v29 + 3) & 1) == 0)
  {
    v29 = *(_QWORD *)(v29 + 24);
    if (!v29 || (*(_BYTE *)(v29 + 3) & 1) == 0)
      return 0;
  }
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    return 0;
  v31 = sub_1C49578C0(*(_QWORD *)(v29 + 8));
  v33 = a2[3];
  v34 = a2[34];
  if (v31)
  {
    v35 = *(_QWORD *)(v30 + 32);
    LODWORD(v171) = *(_DWORD *)(v35 + 36);
    v36 = (int)v171;
    v37 = *(unsigned int *)(v35 + 68);
    v38 = v33 + 16 * (v171 & 0x7FFFFFFF) + 8;
    v39 = (uint64_t *)(v34 + 8 * v171);
    if ((int)v171 < 0)
      v39 = (uint64_t *)v38;
    v40 = *v39;
    if (v40)
    {
      if ((*(_BYTE *)(v40 + 3) & 1) != 0 || (v40 = *(_QWORD *)(v40 + 24)) != 0 && (*(_BYTE *)(v40 + 3) & 1) != 0)
      {
        v166 = *(_QWORD *)(v40 + 8);
        if (v166)
        {
          if (**(_WORD **)(v166 + 16) == 80 && *(_DWORD *)(v166 + 40) == 2)
          {
            v36 = *(_DWORD *)(*(_QWORD *)(v166 + 32) + 36);
            LODWORD(v171) = v36;
          }
        }
      }
    }
    v183 = (unint64_t *)&v171;
    LODWORD(v193) = v36;
    sub_1C4958594((_DWORD **)&v183, (uint64_t)a2, (unsigned int *)&v193);
    v41 = v171;
    v33 = a2[3];
    v42 = (uint64_t *)(v33 + 16 * (v171 & 0x7FFFFFFF) + 8);
    v34 = a2[34];
    if ((int)v171 >= 0)
      v42 = (uint64_t *)(v34 + 8 * v171);
    v43 = *v42;
    if (v43)
    {
      if ((*(_BYTE *)(v43 + 3) & 1) != 0)
        goto LABEL_280;
      v43 = *(_QWORD *)(v43 + 24);
      if (!v43)
        goto LABEL_53;
      if ((*(_BYTE *)(v43 + 3) & 1) != 0)
LABEL_280:
        v43 = *(_QWORD *)(v43 + 8);
      else
        v43 = 0;
    }
LABEL_53:
    v44 = (uint64_t *)(v33 + 16 * (v37 & 0x7FFFFFFF) + 8);
    if ((int)v37 >= 0)
      v44 = (uint64_t *)(v34 + 8 * v37);
    v45 = *v44;
    if (v45)
    {
      if ((*(_BYTE *)(v45 + 3) & 1) != 0 || (v45 = *(_QWORD *)(v45 + 24)) != 0 && (*(_BYTE *)(v45 + 3) & 1) != 0)
      {
        v46 = 0;
        if (!v43)
          goto LABEL_57;
        v167 = *(_QWORD *)(v45 + 8);
        if (!v167)
          goto LABEL_57;
        if (**(_WORD **)(v43 + 16) == 70 && **(_WORD **)(v167 + 16) == 120)
        {
          v168 = *(_QWORD *)(*(_QWORD *)(v167 + 32) + 48);
          v169 = (unsigned int *)(v168 + 24);
          if (*(_DWORD *)(v168 + 32) >= 0x41u)
            v169 = *(unsigned int **)v169;
          v46 = *v169;
          v27 = v171 & 0x7FFFFFFF;
          LODWORD(v26) = (_DWORD)v171;
          goto LABEL_58;
        }
      }
    }
    v46 = 0;
LABEL_57:
    v41 = v26;
LABEL_58:
    v47 = v26;
    v26 = v41;
    goto LABEL_187;
  }
  v46 = 0;
  v47 = v26;
LABEL_187:
  v113 = v33 + 16 * v27 + 8;
  v114 = (uint64_t *)(v34 + 8 * v26);
  if (v47 < 0)
    v114 = (uint64_t *)v113;
  v115 = *v114;
  if (v115
    && ((*(_BYTE *)(v115 + 3) & 1) != 0 || (v115 = *(_QWORD *)(v115 + 24)) != 0 && (*(_BYTE *)(v115 + 3) & 1) != 0))
  {
    v116 = *(_QWORD *)(v115 + 8);
    if (v116)
    {
      v117 = **(unsigned __int16 **)(v116 + 16) != 70;
      goto LABEL_192;
    }
  }
  else
  {
    v116 = 0;
  }
  v117 = 1;
LABEL_192:
  if (v179 == v180 || (result = sub_1C4955F2C((uint64_t)&v174, a3), (_DWORD)result))
  {
    v118 = *(unsigned __int8 *)(v23 + 1709);
    v183 = (unint64_t *)&v174;
    v184 = a2;
    v185 = 0;
    LODWORD(v186) = -1;
    v190 = 0;
    v191 = 0;
    sub_1C492E760(&v183, v32);
    if (v189 == 3 && *(_BYTE *)(v185 + 326))
      v119 = v187 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
    else
      v119 = v187 & 0xFFFFFFFFFFFFF9FFLL;
    v187 = v119;
    if (v117)
    {
      LODWORD(v192) = sub_1C4957FF8((uint64_t)a2, a3, (uint64_t)&v183, v192, v118 != 0);
      v120 = *(_DWORD *)((char *)&dword_1C64689D0[32 * (unint64_t)*(unsigned __int8 *)(v185 + 381)
                                                - 1
                                                + 16 * (unint64_t)HIDWORD(v186)
                                                + WORD1(v186)]
                       + ((4 * (unsigned __int16)v186) & 0x3FFF0));
      if (v120 == -1)
        llvm::report_fatal_error((llvm *)"Unsupported stack access", (const char *)1);
      v122 = sub_1C55437B8(a3, v120);
      v123 = v121;
      v124 = (uint64_t *)a3[6];
      v125 = *(_QWORD *)(a3[5] + 40);
      *(_QWORD *)(v121 + 24) = v125;
      v126 = *(_QWORD *)(v125 + 32);
      v127 = *(unsigned int *)(v121 + 40);
      if ((_DWORD)v127)
      {
        v159 = *(_QWORD *)(v121 + 32);
        v160 = *(_QWORD *)(v126 + 40);
        v161 = 32 * v127;
        do
        {
          if (!*(_BYTE *)v159)
          {
            v162 = *(unsigned int *)(v159 + 4);
            if ((int)v162 >= 0)
              v163 = (uint64_t *)(*(_QWORD *)(v160 + 272) + 8 * v162);
            else
              v163 = (uint64_t *)(*(_QWORD *)(v160 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
            v164 = *v163;
            if (*v163)
            {
              v165 = *(_QWORD *)(v164 + 16);
              *(_QWORD *)(v164 + 16) = v159;
              *(_QWORD *)(v159 + 16) = v165;
              if ((*(_BYTE *)(v159 + 3) & 1) != 0)
              {
                *(_QWORD *)(v159 + 24) = v164;
              }
              else
              {
                *(_QWORD *)(v159 + 24) = 0;
                v163 = (uint64_t *)(v165 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v159 + 16) = v159;
              *(_QWORD *)(v159 + 24) = 0;
            }
            *v163 = v159;
          }
          v159 += 32;
          v161 -= 32;
        }
        while (v161);
      }
      v128 = *(_QWORD *)(v126 + 728);
      if (v128)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 24))(v128, v121);
      v129 = *v124 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v123 = v129 | *(_QWORD *)v123 & 7;
      *(_QWORD *)(v123 + 8) = v124;
      *(_QWORD *)(v129 + 8) = v123;
      *v124 = *v124 & 7 | v123;
      v130 = a3[7];
      if (v130)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v130 + 24))(v130, v123);
      v171 = v122;
      v172 = v123;
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = v119 | ((unint64_t)(v118 == 0) << 8);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v122, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = v188;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v122, (const llvm::MachineOperand *)&v193);
      v194 = 0;
      v195 = 0;
      LODWORD(v193) = 0;
      HIDWORD(v193) = v177;
      v196 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v122, (const llvm::MachineOperand *)&v193);
      v194 = 0;
      v195 = 0;
      LODWORD(v193) = 0;
      HIDWORD(v193) = v192;
      v196 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v122, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v122, (const llvm::MachineOperand *)&v193);
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v123, v122, v182);
      sub_1C49400A8((uint64_t)&v171);
      v71 = v174;
      v131 = *(_QWORD *)(v174 + 24);
      v132 = v174;
      if ((*(_BYTE *)v174 & 4) == 0)
      {
        v132 = v174;
        if ((*(_WORD *)(v174 + 44) & 8) != 0)
        {
          v132 = v174;
          do
            v132 = *(_QWORD *)(v132 + 8);
          while ((*(_WORD *)(v132 + 44) & 8) != 0);
        }
      }
    }
    else
    {
      v193 = (unint64_t *)v180;
      v134 = sub_1C4825F50((unint64_t *)&v193);
      if ((_DWORD)v133 == 1)
      HIDWORD(v136) = v134;
      LODWORD(v136) = v134 - 8;
      v135 = v136 >> 3;
      v137 = dword_1C660B1AC[v135];
      v138 = off_1E7FA4430[v135];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a2, "", 0);
      *(_QWORD *)(a2[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v138;
      v140 = a2[1];
      if (v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 24))(v140);
      LODWORD(v171) = IncompleteVirtualRegister;
      LODWORD(v172) = 1;
      LODWORD(v193) = v177;
      LODWORD(v195) = 0;
      (*(void (**)(uint64_t *, uint64_t, llvm::GlobalValue **, uint64_t, unint64_t **, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v171, 1, &v193, 1, 0);
      v142 = sub_1C55437B8(a3, v137);
      v143 = v141;
      v144 = (uint64_t *)a3[6];
      v145 = *(_QWORD *)(a3[5] + 40);
      *(_QWORD *)(v141 + 24) = v145;
      v146 = *(_QWORD *)(v145 + 32);
      v147 = *(unsigned int *)(v141 + 40);
      if ((_DWORD)v147)
      {
        v152 = *(_QWORD *)(v141 + 32);
        v153 = *(_QWORD *)(v146 + 40);
        v154 = 32 * v147;
        do
        {
          if (!*(_BYTE *)v152)
          {
            v155 = *(unsigned int *)(v152 + 4);
            if ((int)v155 >= 0)
              v156 = (uint64_t *)(*(_QWORD *)(v153 + 272) + 8 * v155);
            else
              v156 = (uint64_t *)(*(_QWORD *)(v153 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
            v157 = *v156;
            if (*v156)
            {
              v158 = *(_QWORD *)(v157 + 16);
              *(_QWORD *)(v157 + 16) = v152;
              *(_QWORD *)(v152 + 16) = v158;
              if ((*(_BYTE *)(v152 + 3) & 1) != 0)
              {
                *(_QWORD *)(v152 + 24) = v157;
              }
              else
              {
                *(_QWORD *)(v152 + 24) = 0;
                v156 = (uint64_t *)(v158 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v152 + 16) = v152;
              *(_QWORD *)(v152 + 24) = 0;
            }
            *v156 = v152;
          }
          v152 += 32;
          v154 -= 32;
        }
        while (v154);
      }
      v148 = *(_QWORD *)(v146 + 728);
      if (v148)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 24))(v148, v141);
      v149 = *v144 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v143 = v149 | *(_QWORD *)v143 & 7;
      *(_QWORD *)(v143 + 8) = v144;
      *(_QWORD *)(v149 + 8) = v143;
      *v144 = *v144 & 7 | v143;
      v150 = a3[7];
      if (v150)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v150 + 24))(v150, v143);
      v171 = v142;
      v172 = v143;
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = v119;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v142, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = v188;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v142, (const llvm::MachineOperand *)&v193);
      v194 = 0;
      v195 = 0;
      LODWORD(v193) = 0;
      HIDWORD(v193) = IncompleteVirtualRegister;
      v196 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v142, (const llvm::MachineOperand *)&v193);
      v151 = *(_DWORD *)(*(_QWORD *)(v116 + 32) + 48);
      LODWORD(v193) = 5;
      v194 = 0;
      LODWORD(v195) = v151;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v142, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = v46;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v142, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      v194 = 0;
      v195 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v142, (const llvm::MachineOperand *)&v193);
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v143, v142, v182);
      sub_1C49400A8((uint64_t)&v171);
      v71 = v174;
      v131 = *(_QWORD *)(v174 + 24);
      v132 = v174;
      if ((*(_BYTE *)v174 & 4) == 0)
      {
        v132 = v174;
        if ((*(_WORD *)(v174 + 44) & 8) != 0)
        {
          v132 = v174;
          do
            v132 = *(_QWORD *)(v132 + 8);
          while ((*(_WORD *)(v132 + 44) & 8) != 0);
        }
      }
    }
    v69 = *(_QWORD *)(v132 + 8);
    v70 = v131 + 40;
    goto LABEL_103;
  }
  return result;
}

uint64_t sub_1C494311C(unsigned int a1, uint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = (a1 & 0x80000000) == 0;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (uint64_t *)(v4 + 16 * (a1 & 0x7FFFFFFF) + 8);
  v6 = *(_QWORD *)(a2 + 272);
  if ((a1 & 0x80000000) == 0)
    v5 = (uint64_t *)(v6 + 8 * a1);
  v7 = *v5;
  if (v7)
  {
    v9 = a1;
    v10 = a1;
    while (1)
    {
      if ((*(_BYTE *)(v7 + 3) & 1) == 0)
      {
        v7 = *(_QWORD *)(v7 + 24);
        if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
          return 0;
      }
      result = 0;
      if (a3 > 3)
        return result;
      v11 = *(_QWORD *)(v7 + 8);
      if (!v11)
        return result;
      if (!a3)
      {
        result = sub_1C4958680(v10, a2, 0);
        if (!(_DWORD)result)
          return result;
      }
      v12 = v9 & 0x7FFFFFFF;
      v13 = (uint64_t *)(v4 + 16 * v12 + 8);
      if (v3)
        v13 = (uint64_t *)(v6 + 8 * v10);
      v14 = *v13;
      if ((*(_BYTE *)(v14 + 3) & 1) == 0)
        v14 = *(_QWORD *)(v14 + 24);
      v15 = *(_QWORD *)(v14 + 8);
      if (**(_WORD **)(v15 + 16) == 121)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
        if (v22)
        {
          if (*(_UNKNOWN **)(v22 + 32) == &unk_1C866F1C0)
          {
            v23 = *(_BYTE *)(*(_QWORD *)(v22 + 40) + 28);
            if ((v23 & 8) != 0)
              goto LABEL_19;
          }
          else
          {
            v23 = *(_BYTE *)(v22 + 52);
            if ((v23 & 8) != 0)
              goto LABEL_19;
          }
          if ((v23 & 7) != 3)
          {
            if (!sub_1C4773C58(v22 + 24))
              return 1;
            v4 = *(_QWORD *)(a2 + 24);
            v6 = *(_QWORD *)(a2 + 272);
          }
        }
      }
LABEL_19:
      v16 = (uint64_t *)(v4 + 16 * v12 + 8);
      if (v3)
        v16 = (uint64_t *)(v6 + 8 * v10);
      v17 = *v16;
      if ((*(_BYTE *)(v17 + 3) & 1) == 0)
        v17 = *(_QWORD *)(v17 + 24);
      v18 = *(_QWORD *)(v17 + 8);
      if (**(_WORD **)(v18 + 16) == 121)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 48);
        if (v24)
        {
          if (*(_UNKNOWN **)(v24 + 32) == &unk_1C866F1C0)
          {
            v25 = *(_BYTE *)(*(_QWORD *)(v24 + 40) + 28);
            if ((v25 & 8) != 0)
              goto LABEL_24;
          }
          else
          {
            v25 = *(_BYTE *)(v24 + 52);
            if ((v25 & 8) != 0)
              goto LABEL_24;
          }
          if ((v25 & 7) != 3 && !sub_1C4773C58(v24 + 24))
            return 1;
        }
      }
LABEL_24:
      v19 = **(unsigned __int16 **)(v11 + 16);
      if (v19 == 166)
      {
        v20 = (unsigned int *)(*(_QWORD *)(v11 + 32) + 100);
        ++a3;
      }
      else
      {
        if (v19 != 163)
          return 0;
        ++a3;
        if ((sub_1C494311C(*(unsigned int *)(*(_QWORD *)(v11 + 32) + 36), a2) & 1) != 0)
          return 1;
        v20 = (unsigned int *)(*(_QWORD *)(v11 + 32) + 68);
      }
      result = 0;
      v10 = *v20;
      v3 = (int)v10 >= 0;
      v4 = *(_QWORD *)(a2 + 24);
      v21 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
      v6 = *(_QWORD *)(a2 + 272);
      if ((int)v10 >= 0)
        v21 = (uint64_t *)(v6 + 8 * v10);
      v7 = *v21;
      v9 = v10;
      if (!v7)
        return result;
    }
  }
  return 0;
}

void sub_1C49433A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C4943410()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1C49516A4(v2, v1, v0);
}

uint64_t sub_1C4943458()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v0[5] = *(_QWORD *)(v2 + 24);
  v0[6] = v2;
  v3 = (unsigned __int8 **)(v2 + 56);
  v4 = (unsigned __int8 **)(v0 + 4);
  if ((uint64_t *)(v2 + 56) != v0 + 4)
  {
    if (*v4)
      llvm::MetadataTracking::untrack((uint64_t)(v0 + 4), *v4);
    v5 = *v3;
    *v4 = *v3;
    if (v5)
      llvm::MetadataTracking::track((uint64_t)(v0 + 4), v5, 2);
  }
  v6 = *(_DWORD **)(v2 + 32);
  v7 = v6[1];
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v1 + 432))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 424) + 8 * (v7 & 0x7FFFFFFF));
    if (v8 == 513)
    {
      v9 = v6[9];
      v10 = v6[17];
      v23 = 16777236;
      v24 = 0;
      LODWORD(v25) = v9;
      v27 = 0;
      v11 = sub_1C5546EF4(v0, &v23, (int *)&v25);
      v13 = v12;
      v23 = 16777236;
      v24 = 0;
      LODWORD(v25) = v10;
      v27 = 0;
      v14 = sub_1C5546EF4(v0, &v23, (int *)&v25);
      v15 = **(unsigned __int16 **)(v2 + 16);
      v23 = 16777236;
      v24 = 0;
      v25 = v11;
      v26 = v13;
      v27 = 1;
      v28 = v14;
      v29 = v16;
      v30 = 1;
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v0 + 32))(v0, v15, &v23, 1, &v25, 2, 0);
      LODWORD(v23) = v7;
      v24 = 1;
      v25 = v17;
      v26 = v18;
      v27 = 1;
      sub_1C5546EF4(v0, &v23, (int *)&v25);
      v19 = v2;
      if ((*(_BYTE *)v2 & 4) == 0)
      {
        v19 = v2;
        if ((*(_WORD *)(v2 + 44) & 8) != 0)
        {
          v19 = v2;
          do
            v19 = *(_QWORD *)(v19 + 8);
          while ((*(_WORD *)(v19 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v2 + 24) + 40, v2, *(_QWORD *)(v19 + 8));
      v20 = 1;
      return v20 & 1;
    }
    if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(_QWORD *)(*(_QWORD *)(v1 + 424) + 8 * (v7 & 0x7FFFFFFF)) & 4) != 0)
      return sub_1C4950D0C(v2, v1, (uint64_t)v0);
  }
  v20 = 0;
  return v20 & 1;
}

uint64_t sub_1C4950D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  void *v45[2];
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  if (**(unsigned __int16 **)(a1 + 16) - 45 > 1)
    return sub_1C4951144(a1, (unsigned __int8 *)a2, (unsigned __int8 **)a3, 2u);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  if ((v6 & 0x80000000) == 0)
    return sub_1C4951144(a1, (unsigned __int8 *)a2, (unsigned __int8 **)a3, 2u);
  v7 = v6 & 0x7FFFFFFF;
  if (v7 >= *(_DWORD *)(a2 + 432) || *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v7) != 513)
    return sub_1C4951144(a1, (unsigned __int8 *)a2, (unsigned __int8 **)a3, 2u);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 8), **(_QWORD **)(*(_QWORD *)(a1 + 24) + 32));
  v8 = **(unsigned __int16 **)(a1 + 16);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a3 + 48) = a1;
  v9 = (unsigned __int8 **)(a1 + 56);
  v10 = (unsigned __int8 **)(a3 + 32);
  if (a1 + 56 != a3 + 32)
  {
    if (*v10)
      llvm::MetadataTracking::untrack(a3 + 32, *v10);
    v11 = *v9;
    *v10 = *v9;
    if (v11)
      llvm::MetadataTracking::track(a3 + 32, v11, 2);
  }
  v45[0] = v46;
  v45[1] = (void *)0x200000000;
  v43[0] = &v44;
  v43[1] = (void *)0x200000000;
  v40 = &v42;
  v41 = 0x200000000;
  if (sub_1C4958A08(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 36), a2, a3, (void *)0x101, (uint64_t)v45)
    && sub_1C4958A08(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 68), a2, a3, (void *)0x101, (uint64_t)v43))
  {
    if ((_DWORD)v8 == 45)
      v12 = 137;
    else
      v12 = 139;
    v36 = 257;
    v37 = 0;
    v38 = 9;
    v39 = 0;
    LODWORD(v30) = *(_DWORD *)v45[0];
    v32 = 0;
    LODWORD(v33) = *(_DWORD *)v43[0];
    v35 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, v12, &v36, 2, &v30, 2, 0);
    v14 = v13;
    v15 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
    v16 = v41;
    if (v41 >= HIDWORD(v41))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)&v42, v41 + 1, 4);
      v16 = v41;
    }
    *((_DWORD *)v40 + v16) = v15;
    LODWORD(v41) = v41 + 1;
    v36 = 257;
    v37 = 0;
    LODWORD(v30) = *((_DWORD *)v45[0] + 1);
    v32 = 0;
    LODWORD(v33) = *((_DWORD *)v43[0] + 1);
    v35 = 0;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, v8, &v36, 1, &v30, 2, 0);
    v28 = 257;
    v29 = 0;
    v30 = v17;
    v31 = v18;
    v32 = 1;
    v26 = 257;
    v27 = 0;
    LODWORD(v36) = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
    LODWORD(v38) = 0;
    v33 = sub_1C5546B4C((uint64_t *)a3, 126, &v26, (int *)&v36);
    v34 = v19;
    v35 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, v8, &v28, 1, &v30, 2, 0);
    v21 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
    v22 = v41;
    if (v41 >= HIDWORD(v41))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)&v42, v41 + 1, 4);
      v22 = v41;
    }
    *((_DWORD *)v40 + v22) = v21;
    LODWORD(v41) = v41 + 1;
    LODWORD(v30) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
    LODWORD(v31) = 1;
    sub_1C5544D6C(a3, (uint64_t)&v30, (int *)v40, v41);
    v23 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v23 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v23 = a1;
        do
          v23 = *(_QWORD *)(v23 + 8);
        while ((*(_WORD *)(v23 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v23 + 8));
    v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  if (v40 != &v42)
    free(v40);
  if (v43[0] != &v44)
    free(v43[0]);
  if (v45[0] != v46)
    free(v45[0]);
  return v24;
}

uint64_t sub_1C4951144(uint64_t a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned int a4)
{
  uint64_t v6;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[16];
  void *v62;
  uint64_t v63;
  _BYTE v64[128];
  void *v65;
  uint64_t v66;
  _QWORD v67[26];

  v6 = (uint64_t)a2;
  v67[24] = *MEMORY[0x1E0C80C00];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  v8 = (unsigned __int8 **)(a1 + 56);
  v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) != a3 + 4)
  {
    if (*v9)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v9);
    a2 = *v8;
    *v9 = *v8;
    if (a2)
      llvm::MetadataTracking::track((uint64_t)v9, a2, 2);
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(v10 + 4);
  v55 = v11;
  if (v11 < 0 && (v12 = v11 & 0x7FFFFFFF, v12 < *(_DWORD *)(v6 + 432)))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v12);
    if ((v13 & 2) != 0)
    {
      v14 = 35;
      v15 = 19;
      if ((v13 & 4) == 0)
        v14 = 19;
      v16 = v13 >> v14;
      if ((v13 & 4) == 0)
        v15 = 3;
      if ((v13 & 1) != 0)
        v15 = 3;
      v17 = (8 * (unsigned __int16)(v13 >> v15)) & 0xFFFFF8000007FFFFLL | ((v16 & 0xFFFFFF) << 19) | 2;
      v18 = 0x800000000000000;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = 0;
  }
  v19 = 3;
  if ((v13 & 1) == 0)
    v19 = 19;
  v17 = v13 & 0x8000000000000000 | (8 * (v13 >> v19)) | 1;
  v18 = 0x8000000000000;
LABEL_20:
  v62 = v64;
  v63 = 0x400000000;
  if ((v13 & v18) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v10 = *(_QWORD *)(a1 + 32);
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(unsigned __int8 *)(v20 + 4);
  v22 = *(unsigned int *)(a1 + 40);
  if ((*(_BYTE *)(v20 + 8) & 2) != 0)
  {
    if ((_DWORD)v22 == v21)
    {
LABEL_30:
      v27 = (unsigned __int16)(v13 >> 3);
      v59 = v61;
      v60 = 0x400000000;
      if ((_DWORD)v27)
      {
        v28 = 0;
        v29 = a4;
        do
        {
          v30 = 0;
          v65 = v67;
          v66 = 0x400000000;
          v31 = v29;
          do
          {
            LODWORD(v56) = *(_DWORD *)(*(_QWORD *)((char *)v62 + v30) + 4 * v28);
            v58 = 0;
            v32 = sub_1C4926708((uint64_t)&v65, (unint64_t)&v56, 1);
            v33 = (char *)v65 + 24 * v66;
            v34 = *(_OWORD *)v32;
            *((_QWORD *)v33 + 2) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v33 = v34;
            LODWORD(v66) = v66 + 1;
            v30 += 32;
            --v31;
          }
          while (v31);
          v35 = **(unsigned __int16 **)(a1 + 16);
          v56 = v17;
          v57 = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void *))*a3 + 4))(a3, v35, &v56, 1, v65);
          v37 = *(_DWORD *)(*(_QWORD *)(v36 + 32) + 4);
          v38 = v60;
          if (v60 >= (unint64_t)HIDWORD(v60))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 4);
            v38 = v60;
          }
          *((_DWORD *)v59 + v38) = v37;
          LODWORD(v60) = v60 + 1;
          if (v65 != v67)
            free(v65);
          ++v28;
        }
        while (v28 != v27);
        v39 = (int *)v59;
        v40 = v60;
        LODWORD(v56) = v55;
        v57 = 1;
        v65 = v67;
        v66 = 0x800000000;
        if (v60 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v60, 24);
          v41 = v66;
          v42 = v65;
LABEL_42:
          v43 = 3 * v41;
          v44 = 4 * v40;
          do
          {
            v45 = *v39++;
            v46 = &v42[v43];
            *v46 = v45;
            v46[4] = 0;
            v43 += 3;
            v44 -= 4;
          }
          while (v44);
          v47 = v66;
          goto LABEL_46;
        }
        if ((_DWORD)v60)
        {
          v41 = 0;
          v42 = v67;
          goto LABEL_42;
        }
        v47 = 0;
      }
      else
      {
        LODWORD(v40) = 0;
        v47 = 0;
        LODWORD(v56) = v55;
        v57 = 1;
        v65 = v67;
        v66 = 0x800000000;
      }
LABEL_46:
      LODWORD(v66) = v47 + v40;
      (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t))*a3 + 4))(a3, 77, &v56, 1);
      if (v65 != v67)
        free(v65);
      v48 = a1;
      if ((*(_BYTE *)a1 & 4) == 0)
      {
        v48 = a1;
        if ((*(_WORD *)(a1 + 44) & 8) != 0)
        {
          v48 = a1;
          do
            v48 = *(_QWORD *)(v48 + 8);
          while ((*(_WORD *)(v48 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v48 + 8));
      if (v59 != v61)
        free(v59);
      v49 = 1;
      goto LABEL_56;
    }
    v23 = *(unsigned __int8 *)(v20 + 4);
    do
    {
      v54 = *(_DWORD *)(v10 + 32 * v21);
      if ((v54 & 0x10000FF) != 0x1000000)
        break;
      v23 += (v54 & 0x2000000) == 0;
      if ((_DWORD)v22 - 1 == v21)
        break;
      ++v21;
    }
    while ((v54 & 0x2000000) == 0);
  }
  else
  {
    v23 = *(unsigned __int8 *)(v20 + 4);
  }
  if (v23 == (_DWORD)v22)
    goto LABEL_30;
  v24 = 32 * v22 - 32 * v23;
  v25 = (unsigned int *)(v10 + 32 * v23 + 4);
  while (1)
  {
    v65 = v67;
    v66 = 0x400000000;
    v26 = *v25;
    v25 += 8;
    if ((sub_1C49540EC(v26, v6, (uint64_t)a3, (uint64_t)&v65) & 1) == 0)
      break;
    sub_1C4958E20((uint64_t)&v62, (unint64_t)&v65);
    if (v65 != v67)
      free(v65);
    v24 -= 32;
    if (!v24)
      goto LABEL_30;
  }
  if (v65 != v67)
    free(v65);
  v49 = 0;
LABEL_56:
  v50 = (char *)v62;
  if ((_DWORD)v63)
  {
    v51 = 32 * v63;
    do
    {
      v52 = *(char **)&v50[v51 - 32];
      if (&v50[v51 - 16] != v52)
        free(v52);
      v51 -= 32;
    }
    while (v51);
    v50 = (char *)v62;
  }
  if (v50 != v64)
    free(v50);
  return v49;
}

uint64_t sub_1C49516A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v10;
  unint64_t *v11;
  unint64_t v12;
  int *v13;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  char v64;
  int v65;
  int v66;
  llvm::MachineFunction *v67;
  llvm::MachineInstr *v68;
  llvm::MachineInstr *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  unsigned int v75;
  int v76;
  _BYTE *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  char v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  llvm::MachineFunction *v104;
  unint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  llvm::MachineFunction *v118;
  llvm::MachineInstr *v119;
  llvm::MachineInstr *v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  llvm::MachineFunction *v124;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int IncompleteVirtualRegister;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  _BYTE *v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  _BYTE *v145;
  int v146;
  int v147;
  uint64_t *v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  BOOL v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  _BOOL4 v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  int v204[2];
  _BOOL4 v205;
  unsigned int v206;
  _BYTE *v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  int v211;
  void *v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  llvm::MachineInstr *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _QWORD v223[6];
  unsigned __int8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int16 v228;
  BOOL v229;
  int v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  _BYTE v234[160];
  unsigned __int8 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 **)(a1 + 16);
  v7 = *((unsigned __int8 *)v6 + 4);
  v8 = *v6;
  if (!*((_BYTE *)v6 + 4) && v8 != 96)
    return 0;
  v10 = v8 != 90 && v8 != 96;
  v11 = (unint64_t *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 < 8)
  {
    v15 = 0;
    goto LABEL_29;
  }
  if ((v12 & 7) == 0)
  {
    v12 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v12;
    v16 = a1 + 56;
    v15 = (int *)(a1 + 48);
    goto LABEL_21;
  }
  v13 = (int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_QWORD *)(a1 + 48) & 7) == 3 && v13 != 0)
  {
    v18 = *v13;
    v15 = v13 + 2;
    v17 = v18;
    if (!(_DWORD)v18)
      goto LABEL_25;
    v16 = (uint64_t)&v15[2 * v17];
LABEL_21:
    while ((*(_WORD *)(*(_QWORD *)v15 + 36) & 0xF00) == 0)
    {
      v15 += 2;
      if (v15 == (int *)v16)
      {
        v15 = (int *)v16;
        break;
      }
    }
    if (v12 >= 8)
      goto LABEL_25;
LABEL_29:
    v11 = 0;
    v20 = 0;
    goto LABEL_30;
  }
  v15 = 0;
LABEL_25:
  if ((v12 & 7) != 0)
  {
    v11 = 0;
    if ((v12 & 7) == 3 && (v19 = (int *)(v12 & 0xFFFFFFFFFFFFFFF8), (v12 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v20 = *v19;
      v11 = (unint64_t *)(v19 + 2);
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    *v11 = v12 & 0xFFFFFFFFFFFFFFF8;
    v20 = 1;
  }
LABEL_30:
  if (v15 == (int *)&v11[v20])
    v21 = 0;
  else
    v21 = *(unsigned __int16 **)v15;
  if (v21)
    v10 = 1;
  if (!v10)
    return 0;
  v22 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)v22)
    return 0;
  v23 = *(_DWORD *)(v22 + 4);
  if ((v23 & 0x80000000) == 0 || (v23 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a2 + 432))
  {
    v24 = 0;
    v28 = 0;
    v26 = a1 + 24;
    v25 = *(_QWORD *)(a1 + 24);
    v27 = *(_BYTE **)(*(_QWORD *)(v25 + 32) + 8);
    goto LABEL_43;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v23 & 0x7FFFFFFF));
  v26 = a1 + 24;
  v25 = *(_QWORD *)(a1 + 24);
  v27 = *(_BYTE **)(*(_QWORD *)(v25 + 32) + 8);
  if (v24 != 513)
  {
    v28 = 0;
LABEL_43:
    if (v24 == 257)
      goto LABEL_49;
    return 0;
  }
  v28 = v27[1710] != 0;
  v24 = 513;
  if (!v27[1710])
    goto LABEL_43;
LABEL_49:
  a3[5] = v25;
  a3[6] = a1;
  v31 = (unsigned __int8 **)(a1 + 56);
  v32 = (unsigned __int8 **)(a3 + 4);
  v207 = v27;
  v205 = v28;
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v32)
    {
      v74 = v21;
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v32);
      v28 = v205;
      v27 = v207;
      v21 = v74;
    }
    v33 = *v31;
    *v32 = *v31;
    if (v33)
    {
      v73 = v21;
      llvm::MetadataTracking::track((uint64_t)(a3 + 4), v33, 2);
      v28 = v205;
      v27 = v207;
      v21 = v73;
    }
  }
  if (v8 == 96)
    v34 = 1;
  else
    v34 = v7;
  v35 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32 * v34 + 4);
  if ((v35 & 0x80000000) != 0 && (v35 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
    v36 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v35 & 0x7FFFFFFF));
  else
    v36 = 0;
  v37 = 35;
  if ((v36 & 4) == 0)
    v37 = 19;
  v38 = (v36 >> v37) & 0xFFFFFF;
  v200 = v8 - 111;
  if (v8 - 111 <= 1 && (!v27[1712] || (_DWORD)v38 == 3))
    return 0;
  v40 = v21[18];
  v41 = (v40 >> 8) & 0xF;
  v42 = v40 >> 12;
  v197 = (uint64_t)v21;
  if ((_DWORD)v42 == 5 && (_DWORD)v41 == 4 || (_DWORD)v42 == 4 && (_DWORD)v41 == 5)
  {
    v43 = 6;
  }
  else if (byte_1C65ED518[8 * v41 + v42])
  {
    v43 = v41;
  }
  else
  {
    v43 = v42;
  }
  v213 = 0x2FFFFFFFFLL;
  v215 = 0;
  v216 = 0;
  v212 = &unk_1E7FA0760;
  if (v28)
    v44 = 98;
  else
    v44 = v8;
  *(_QWORD *)v204 = v27 + 1328;
  sub_1C4883C90((uint64_t)&v212, v44, v38, v43, (uint64_t)(v27 + 1328));
  v45 = 0;
  if (!(_BYTE)v215)
  {
    if (v8 == 96)
      v46 = 0;
    else
      v46 = v7 + 1;
    v45 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v46 + 4);
  }
  v202 = v45;
  if (HIDWORD(v213) != 2)
  {
    v195 = 0;
    v47 = 0;
LABEL_89:
    if (v205 || v47)
    {
      v198 = v47;
      v48 = !v205;
    }
    else if (v8 == 96 || sub_1C4778650(a2, v23))
    {
      v198 = 0;
      v48 = (_BYTE)v215 != 0;
    }
    else
    {
      v198 = 0;
      v48 = 1;
    }
    v203 = v48;
    goto LABEL_96;
  }
  v195 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
  if (!v205)
  {
    v47 = !sub_1C4778650(a2, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36));
    goto LABEL_89;
  }
  v198 = 0;
  v203 = 0;
LABEL_96:
  v49 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
  if ((int)v35 >= 0)
    v49 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v35);
  v50 = *v49;
  v199 = v23;
  if ((*(_BYTE *)(v50 + 3) & 1) == 0)
    v50 = *(_QWORD *)(v50 + 24);
  v51 = *(_QWORD *)(v50 + 8);
  v194 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 32) + 344);
  if ((_DWORD)v38 == 3)
  {
    v52 = sub_1C4956D44(v51, a2, a3);
    v53 = v51;
    v54 = v207[1733] != 0;
    if (v207[1735])
      v55 = 2 * v207[1734];
    else
      v55 = (2 * v207[1734]) | 0x10000;
    v56 = 129;
    v57 = 129;
    v51 = v52;
  }
  else
  {
    v53 = 0;
    v55 = 0;
    v54 = 0;
    v57 = 257;
    v56 = 513;
  }
  v223[0] = v51;
  v223[1] = a2;
  v223[4] = 0;
  v223[5] = 0;
  v223[2] = a3;
  v224 = 0;
  v226 = 0;
  v227 = 0;
  v225 = 0;
  v228 = 0;
  v229 = v54;
  v230 = v55;
  v231 = v53;
  v232 = v234;
  v201 = v26;
  v233 = 0x400000000;
  v235 = 0;
  if (!v53)
    v231 = v51;
  v58 = 0;
  v223[3] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 32) + 8) + 1328;
  v59 = 257;
  if (!v207[1733])
    v59 = 129;
  if ((_DWORD)v38 == 3)
    v60 = v59;
  else
    v60 = 513;
  while ((sub_1C492C818((uint64_t)v223, 2, v60, v57, (char *)v56, v58, 0) & 1) == 0)
  {
    if (++v58 == 3)
    {
      v61 = sub_1C492C818((uint64_t)v223, 2, v60, v57, (char *)v56, 0, 1u);
      v29 = 0;
      if (!v61)
        goto LABEL_274;
      break;
    }
  }
  if ((_DWORD)v38 == 3)
  {
    v62 = v235;
  }
  else
  {
    v62 = 0;
    v235 = 0;
  }
  v63 = sub_1C4883E0C((uint64_t)&v212, v203, v62 == 0, v224);
  v64 = v205;
  if (!BYTE2(v215))
    v64 = 1;
  v196 = v63;
  if ((v64 & 1) != 0)
  {
    v65 = 0;
  }
  else
  {
    v66 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v7 + 68);
    v217 = (uint64_t)&off_1E7FA6488;
    LODWORD(v218) = 2;
    v67 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 18, &v217, 1, 0, 0, 0);
    v69 = v68;
    v237 = 0;
    v238 = 0;
    LODWORD(v236) = 0;
    HIDWORD(v236) = v66;
    v239 = 0;
    llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v236);
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = 25;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v236);
    v237 = 0;
    v238 = 0;
    LODWORD(v236) = 0;
    HIDWORD(v236) = v202;
    v239 = 0;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v236);
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = 26;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v236);
    v65 = v202;
    v202 = *(_DWORD *)(*((_QWORD *)v69 + 4) + 4);
  }
  v70 = *(_QWORD *)(*(_QWORD *)v201 + 32);
  v71 = *(_QWORD *)v70;
  v192 = v65;
  if (v207[1646])
  {
    v72 = 4;
  }
  else if (v207[1647])
  {
    v72 = 5;
  }
  else if (v207[1648])
  {
    v72 = 6;
  }
  else if (v207[1649])
  {
    v72 = 7;
  }
  else
  {
    v72 = 9;
  }
  if (v207[1690])
    v75 = 3;
  else
    v75 = 1;
  LODWORD(v236) = 0;
  v76 = sub_1C4979B6C(v204[0], v71, "AtomicCacheCtl", (int *)&v236);
  v77 = v207;
  if (v76)
    v75 = v236;
  if (v207[1692])
  {
    v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v70 + 344) + 648))(*(_QWORD *)(v70 + 344));
    v77 = v207;
  }
  else
  {
    v78 = 1;
  }
  if (v72 == 5)
    v79 = v78;
  else
    v79 = 0;
  if (v77[1700])
    v80 = 3;
  else
    v80 = v79;
  if (v75 >= v80)
    v81 = v80;
  else
    v81 = v75;
  v82 = v204[0];
  if (v77[1699])
  {
    v83 = 0;
    v84 = 0;
  }
  else
  {
    LODWORD(v236) = 0;
    v85 = sub_1C4979B6C(v204[0], v71, "MemoryReadCacheCtl", (int *)&v236);
    v77 = v207;
    if (v85)
      v83 = v236;
    else
      v83 = v81;
    if (v207[1699])
    {
      v84 = 0;
    }
    else
    {
      LODWORD(v236) = 0;
      v86 = sub_1C4979B6C(v204[0], v71, "MemoryWriteCacheCtl", (int *)&v236);
      v77 = v207;
      v84 = v236;
      if (!v86)
        v84 = v81;
    }
    v82 = v204[0];
  }
  if (v84 >= v83)
    v87 = v83;
  else
    v87 = v84;
  if (v205)
  {
    if (v77[1711])
      v88 = 1;
    else
      v88 = 3;
    v89 = v88 | (4 * (v8 != 110));
  }
  else if (v200 > 1)
  {
    LODWORD(v236) = 0;
    v92 = sub_1C4979B6C(v82, v71, "AtomicL2Pers", (int *)&v236);
    v93 = 4 * v236;
    if (!v92)
      v93 = 4;
    if (v75 == 3)
      v93 = 4;
    v89 = v93 | v75;
    if (v207[1712] && (_DWORD)v213 == 1 && v75 == 3)
    {
      v221 = 257;
      v222 = 0;
      v94 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v221, 0);
      v217 = 257;
      LODWORD(v218) = 0;
      v236 = v94;
      v237 = v95;
      LODWORD(v238) = 1;
      LODWORD(v239) = v202;
      DWORD2(v240) = 0;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 46, &v217, 1, &v236, 2, 0);
      v202 = *(_DWORD *)(*(_QWORD *)(v96 + 32) + 4);
      LODWORD(v213) = 0;
    }
    v82 = v204[0];
  }
  else
  {
    LODWORD(v236) = 0;
    if (sub_1C4979B6C(v82, v71, "AtomicL2Pers", (int *)&v236))
      v90 = (4 * v236) | 3;
    else
      v90 = 7;
    if (v8 == 112)
    {
      v217 = 257;
      LODWORD(v218) = 0;
      LODWORD(v236) = v202;
      LODWORD(v238) = 0;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 177, &v217, 1, &v236, 1, 0);
      v202 = *(_DWORD *)(*(_QWORD *)(v91 + 32) + 4);
    }
    v82 = v204[0];
    v89 = v90;
  }
  v97 = *(_QWORD *)v70;
  LODWORD(v236) = 0;
  sub_1C4979B6C(v82, v97, "SampleWriteL2Pers", (int *)&v236);
  if (v214 <= 0xC)
  {
    if (((1 << v214) & 0x404) != 0)
    {
      v98 = a1;
      v99 = 1;
      goto LABEL_199;
    }
    if (((1 << v214) & 0x808) != 0)
    {
      sub_1C4959244(a1, 3, 2u, v87, v72);
      v100 = v205;
      if (v200 < 2)
        v100 = 1;
      if ((v100 & 1) != 0 || v207[1711])
      {
        v101 = v89;
        v102 = v87;
        v104 = sub_1C55437B8(a3, 0x2045u);
        v105 = (unint64_t *)v103;
        v106 = (unint64_t *)a3[6];
        v107 = *(_QWORD *)(a3[5] + 40);
        *(_QWORD *)(v103 + 24) = v107;
        v108 = *(_QWORD *)(v107 + 32);
        v109 = *(unsigned int *)(v103 + 40);
        if ((_DWORD)v109)
        {
          v181 = *(_QWORD *)(v103 + 32);
          v182 = *(_QWORD *)(v108 + 40);
          v183 = 32 * v109;
          do
          {
            if (!*(_BYTE *)v181)
            {
              v184 = *(unsigned int *)(v181 + 4);
              if ((int)v184 >= 0)
                v185 = (uint64_t *)(*(_QWORD *)(v182 + 272) + 8 * v184);
              else
                v185 = (uint64_t *)(*(_QWORD *)(v182 + 24) + 16 * (v184 & 0x7FFFFFFF) + 8);
              v186 = *v185;
              if (*v185)
              {
                v187 = *(_QWORD *)(v186 + 16);
                *(_QWORD *)(v186 + 16) = v181;
                *(_QWORD *)(v181 + 16) = v187;
                if ((*(_BYTE *)(v181 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v181 + 24) = v186;
                }
                else
                {
                  *(_QWORD *)(v181 + 24) = 0;
                  v185 = (uint64_t *)(v187 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v181 + 16) = v181;
                *(_QWORD *)(v181 + 24) = 0;
              }
              *v185 = v181;
            }
            v181 += 32;
            v183 -= 32;
          }
          while (v183);
        }
        v110 = *(_QWORD *)(v108 + 728);
        if (v110)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 24))(v110, v103);
        v111 = *v106 & 0xFFFFFFFFFFFFFFF8;
        *v105 = v111 | *v105 & 7;
        v105[1] = (unint64_t)v106;
        *(_QWORD *)(v111 + 8) = v105;
        *v106 = *v106 & 7 | (unint64_t)v105;
        v112 = a3[7];
        if (v112)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v112 + 24))(v112, v105);
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = 3;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v105, v104, (const llvm::MachineOperand *)&v236);
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = 2;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v105, v104, (const llvm::MachineOperand *)&v236);
        v87 = v102;
        v89 = v101;
      }
    }
    else if (((1 << v214) & 0x1010) != 0)
    {
      v98 = a1;
      v99 = 3;
LABEL_199:
      sub_1C4959244(v98, 3, v99, v87, v72);
    }
  }
  v113 = *(_DWORD *)(*(_QWORD *)(v226 + 32) + 4);
  v193 = v72;
  if (!BYTE3(v215)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 288))(v194) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v194)(v194, 37, 0, 1, 2))
  {
    v206 = v89;
    v114 = v87;
    v217 = 513;
    LODWORD(v218) = 0;
    LODWORD(v236) = v113;
    LODWORD(v238) = 0;
    sub_1C5546EF4(a3, &v217, (int *)&v236);
    LODWORD(v217) = *(_DWORD *)(*(_QWORD *)(v115 + 32) + 4);
    LODWORD(v219) = 0;
    v236 = (uint64_t)&v238;
    v238 = 257;
    LODWORD(v239) = 0;
    *(_QWORD *)&v240 = 257;
    DWORD2(v240) = 0;
    v237 = 0x800000002;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 74, &v238, 2, &v217, 1, 0);
    v117 = v116;
    if ((uint64_t *)v236 != &v238)
      free((void *)v236);
    v236 = 257;
    LODWORD(v237) = 0;
    v118 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 495, &v236, 1, 0, 0, 0);
    v120 = v119;
    v217 = (uint64_t)v118;
    v218 = v119;
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = 0;
    llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v236);
    v121 = *(_DWORD *)(*(_QWORD *)(v117 + 32) + 36);
    v237 = 0;
    v238 = 0;
    LODWORD(v236) = 0;
    HIDWORD(v236) = v121;
    v239 = 0;
    llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v236);
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = 0;
    llvm::MachineInstr::addOperand(v120, v118, (const llvm::MachineOperand *)&v236);
    sub_1C49400A8((uint64_t)&v217);
    v221 = 513;
    v222 = 0;
    LODWORD(v236) = *(_DWORD *)(*(_QWORD *)(v117 + 32) + 4);
    LODWORD(v238) = 0;
    LODWORD(v239) = *(_DWORD *)(*((_QWORD *)v120 + 4) + 4);
    DWORD2(v240) = 0;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 76, &v221, 1, &v236, 2, 0);
    v113 = *(_DWORD *)(*(_QWORD *)(v122 + 32) + 4);
    v87 = v114;
    v89 = v206;
  }
  v124 = sub_1C55437B8(a3, v196);
  v125 = v123;
  v126 = (unint64_t *)a3[6];
  v127 = *(_QWORD *)(a3[5] + 40);
  *(_QWORD *)(v123 + 24) = v127;
  v128 = *(_QWORD *)(v127 + 32);
  v129 = *(unsigned int *)(v123 + 40);
  if ((_DWORD)v129)
  {
    v173 = *(_QWORD *)(v123 + 32);
    v174 = *(_QWORD *)(v128 + 40);
    v175 = 32 * v129;
    do
    {
      if (!*(_BYTE *)v173)
      {
        v176 = *(unsigned int *)(v173 + 4);
        if ((int)v176 >= 0)
          v177 = (uint64_t *)(*(_QWORD *)(v174 + 272) + 8 * v176);
        else
          v177 = (uint64_t *)(*(_QWORD *)(v174 + 24) + 16 * (v176 & 0x7FFFFFFF) + 8);
        v178 = *v177;
        if (*v177)
        {
          v179 = *(_QWORD *)(v178 + 16);
          *(_QWORD *)(v178 + 16) = v173;
          *(_QWORD *)(v173 + 16) = v179;
          if ((*(_BYTE *)(v173 + 3) & 1) != 0)
          {
            *(_QWORD *)(v173 + 24) = v178;
          }
          else
          {
            *(_QWORD *)(v173 + 24) = 0;
            v177 = (uint64_t *)(v179 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v173 + 16) = v173;
          *(_QWORD *)(v173 + 24) = 0;
        }
        *v177 = v173;
      }
      v173 += 32;
      v175 -= 32;
    }
    while (v175);
  }
  v130 = *(_QWORD *)(v128 + 728);
  if (v130)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v130 + 24))(v130, v123);
  v131 = *v126 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v125 = v131 | *(_QWORD *)v125 & 7;
  *(_QWORD *)(v125 + 8) = v126;
  *(_QWORD *)(v131 + 8) = v125;
  *v126 = *v126 & 7 | v125;
  v132 = a3[7];
  if (v132)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v132 + 24))(v132, v125);
  if (v203)
  {
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FA5F48;
    v134 = *(_QWORD *)(a2 + 8);
    if (v134)
      (*(void (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
    v237 = 0;
    v238 = 0;
    v239 = 0;
    LODWORD(v236) = 0x1000000;
    HIDWORD(v236) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    if (v207[1654] && (_BYTE)v215 && BYTE3(v215))
    {
      LODWORD(v236) = 1;
      v237 = 0;
      v238 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    }
  }
  v135 = *(_QWORD *)(v227 + 32);
  if (v224)
  {
    v136 = *(_QWORD *)(v135 + 48);
    v137 = *(_DWORD *)(v136 + 32);
    v138 = v207;
    if (v137 > 0x40)
      v139 = **(_QWORD **)(v136 + 24);
    else
      v139 = (uint64_t)(*(_QWORD *)(v136 + 24) << -(char)v137) >> -(char)v137;
    LODWORD(v217) = 1;
    v218 = 0;
    v219 = (int)v139;
  }
  else
  {
    v140 = *(_DWORD *)(v135 + 4);
    v218 = 0;
    v219 = 0;
    LODWORD(v217) = 0;
    HIDWORD(v217) = v140;
    v220 = 0;
    v138 = v207;
  }
  if (!(_BYTE)v215)
  {
    v144 = v213 | (v89 << 6);
    if (v138[1654])
      v144 |= ((unint64_t)v228 << 9) | 0x1000;
    if (v235)
    {
      if (!BYTE3(v215))
      {
LABEL_244:
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = v144;
        goto LABEL_245;
      }
      if (v138[1654])
      {
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        goto LABEL_244;
      }
      LODWORD(v236) = 1;
      v237 = 0;
      v238 = v144;
    }
    else
    {
      if (!BYTE3(v215))
      {
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = v144;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        v237 = 0;
        v238 = 0;
        LODWORD(v236) = 0;
        HIDWORD(v236) = v113;
        v239 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v217);
        v237 = 0;
        v238 = 0;
        LODWORD(v236) = 0;
        HIDWORD(v236) = v202;
        v239 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        LODWORD(v236) = 1;
        goto LABEL_248;
      }
      if (v138[1654])
      {
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        LODWORD(v236) = 1;
        v237 = 0;
        v238 = v144;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        v147 = *(_DWORD *)(*(_QWORD *)(v226 + 32) + 4);
        v237 = 0;
        v238 = 0;
        LODWORD(v236) = 0;
        HIDWORD(v236) = v147;
        v239 = 0;
LABEL_245:
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v217);
        v237 = 0;
        v238 = 0;
        LODWORD(v236) = 0;
        HIDWORD(v236) = v202;
        v239 = 0;
        v148 = &v236;
LABEL_247:
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)v148);
        LODWORD(v236) = 1;
        goto LABEL_248;
      }
      LODWORD(v236) = 1;
      v237 = 0;
      v238 = v144;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
      v180 = *(_DWORD *)(*(_QWORD *)(v226 + 32) + 4);
      v237 = 0;
      v238 = 0;
      LODWORD(v236) = 0;
      HIDWORD(v236) = v180;
      v239 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v217);
    v237 = 0;
    v238 = 0;
    LODWORD(v236) = 0;
    HIDWORD(v236) = v202;
    v239 = 0;
    goto LABEL_249;
  }
  v141 = 2066;
  if (!(_BYTE)v228)
    v141 = 18;
  v142 = v141 | ((unint64_t)v138[1654] << 12);
  if (v235)
  {
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = v142;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    v143 = &v217;
LABEL_250:
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)v143);
    goto LABEL_251;
  }
  if (!BYTE3(v215))
  {
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = v142;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = v89;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    v149 = *(_DWORD *)(*(_QWORD *)(v226 + 32) + 4);
    v237 = 0;
    v238 = 0;
    LODWORD(v236) = 0;
    HIDWORD(v236) = v149;
    v239 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
    v148 = &v217;
    goto LABEL_247;
  }
  LODWORD(v236) = 1;
  v237 = 0;
  v238 = v142;
  v145 = v138;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
  v146 = *(_DWORD *)(*(_QWORD *)(v226 + 32) + 4);
  v237 = 0;
  v238 = 0;
  LODWORD(v236) = 0;
  HIDWORD(v236) = v146;
  v239 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
  if (v145[1654])
  {
    LODWORD(v236) = 1;
    v237 = 0;
    v238 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v236);
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v125, v124, (const llvm::MachineOperand *)&v217);
  if (!(_BYTE)v217 && v207[1654])
  {
    LODWORD(v236) = 1;
LABEL_248:
    v237 = 0;
    v238 = 0;
LABEL_249:
    v143 = &v236;
    goto LABEL_250;
  }
LABEL_251:
  v236 = v197;
  v150 = *(_QWORD *)(v125 + 48);
  if (v150 < 8)
  {
    v151 = 0;
    v152 = 0;
LABEL_253:
    v153 = 0;
    goto LABEL_254;
  }
  v188 = *(_QWORD *)(v125 + 48) & 7;
  v189 = (unsigned __int8 *)(v150 & 0xFFFFFFFFFFFFFFF8);
  if (v188 == 1 && v189)
  {
    v151 = 0;
    v153 = 0;
    v152 = (uint64_t)v189;
  }
  else if (v188 == 3 && v189)
  {
    v191 = v189[4];
    if (v189[4])
      v152 = *(_QWORD *)&v189[8 * *(int *)v189 + 8];
    else
      v152 = 0;
    if (v189[5])
      v151 = *(_QWORD *)&v189[8 * *(int *)v189 + 8 + 8 * v191];
    else
      v151 = 0;
    if (!v189[6])
      goto LABEL_253;
    v153 = *(_QWORD *)&v189[8 * *(int *)v189 + 8 + 8 * v189[5] + 8 * v191];
  }
  else
  {
    v152 = 0;
    v153 = 0;
    if (v189)
      v190 = v188 == 2;
    else
      v190 = 0;
    if (v190)
      v151 = (uint64_t)v189;
    else
      v151 = 0;
  }
LABEL_254:
  llvm::MachineInstr::setExtraInfo(v125, v70, &v236, 1, v152, v151, v153);
  v154 = *(_QWORD *)v204;
  v155 = (*(uint64_t (**)(int *))(**(_QWORD **)v204 + 104))(*(int **)v204);
  (*(void (**)(uint64_t))(*(_QWORD *)v154 + 184))(v154);
  v156 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 176))(v154);
  sub_1C554AE8C((_QWORD *)v125, v155, v156);
  if (v214 > 0xC)
    goto LABEL_267;
  if (((1 << v214) & 0x440) != 0)
  {
    v159 = *(_QWORD *)v201;
    v240 = 0u;
    v241 = 0u;
    v242 = 0;
    v160 = *(_QWORD *)(v159 + 32);
    v236 = (uint64_t)&off_1E816EC08;
    v237 = v160;
    v239 = *(_QWORD *)(v160 + 40);
    v238 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v160 + 16) + 104))(*(_QWORD *)(v160 + 16));
    v221 = 0;
    v161 = (unsigned __int8 *)v240;
    if ((_QWORD)v240)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v240, (unsigned __int8 *)v240);
      v161 = (unsigned __int8 *)v221;
      *(_QWORD *)&v240 = v221;
      v162 = (__int128 *)(a1 + 56);
      if (v221)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v221, (unsigned __int8 *)v221, (uint64_t)&v240);
        v161 = (unsigned __int8 *)v240;
      }
    }
    else
    {
      *(_QWORD *)&v240 = 0;
      v162 = (__int128 *)(a1 + 56);
    }
    v241 = (unint64_t)a1;
    *((_QWORD *)&v240 + 1) = *(_QWORD *)(a1 + 24);
    if (v162 != &v240)
    {
      if (v161)
        llvm::MetadataTracking::untrack((uint64_t)&v240, v161);
      *(_QWORD *)&v240 = *(_QWORD *)v162;
      if (!(_QWORD)v240)
        goto LABEL_267;
      llvm::MetadataTracking::track((uint64_t)&v240, (unsigned __int8 *)v240, 2);
      v161 = (unsigned __int8 *)v240;
    }
    v236 = (uint64_t)&off_1E816EC08;
    if (v161)
      llvm::MetadataTracking::untrack((uint64_t)&v240, v161);
    goto LABEL_267;
  }
  if (((1 << v214) & 0x880) != 0)
  {
    v157 = a1;
    v158 = 2;
  }
  else
  {
    if (((1 << v214) & 0x1100) == 0)
      goto LABEL_267;
    v157 = a1;
    v158 = 3;
  }
  sub_1C4959244(v157, 2, v158, v87, v193);
LABEL_267:
  if (v203)
  {
    LODWORD(v221) = v199;
    v222 = 1;
    v236 = (uint64_t)v124;
    v237 = v125;
    LODWORD(v238) = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v221, 1, &v236, 1, 0);
  }
  if (v198)
  {
    v221 = 257;
    v222 = 0;
    LODWORD(v236) = 32;
    LODWORD(v238) = 2;
    LODWORD(v239) = v199;
    DWORD2(v240) = 0;
    LODWORD(v241) = v192;
    LODWORD(v242) = 0;
    v210 = 257;
    v211 = 0;
    v243 = sub_1C5544694((uint64_t)a3, &v210, 1);
    v244 = v163;
    v245 = 1;
    v208 = 257;
    v209 = 0;
    v246 = sub_1C5544694((uint64_t)a3, &v208, 0);
    v247 = v164;
    v248 = 1;
    v165 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 51, &v221, 1, &v236, 5, 0);
    LODWORD(v221) = v195;
    v222 = 1;
    v236 = v165;
    v237 = v166;
    LODWORD(v238) = 1;
    sub_1C5546B4C(a3, 126, (unint64_t *)&v221, (int *)&v236);
  }
  v167 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v167 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v167 = a1;
      do
        v167 = *(_QWORD *)(v167 + 8);
      while ((*(_WORD *)(v167 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v167 + 8));
  v29 = 1;
LABEL_274:
  v168 = (char *)v232;
  if ((_DWORD)v233)
  {
    v169 = 40 * v233;
    do
    {
      v170 = &v168[v169];
      if (*(_DWORD *)&v168[v169 - 8] >= 0x41u)
      {
        v171 = *((_QWORD *)v170 - 2);
        if (v171)
          MEMORY[0x1CAA32F9C](v171, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v170 - 6) >= 0x41u)
      {
        v172 = *((_QWORD *)v170 - 4);
        if (v172)
          MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
      }
      v169 -= 40;
    }
    while (v169);
    v168 = (char *)v232;
  }
  if (v168 != v234)
    free(v168);
  return v29;
}

void sub_1C4952E94(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E816E938;
  sub_1C4959BE8((char **)(a1 + 35456));
  for (i = 0; i != -35448; i -= 168)
    sub_1C4959EB8((char **)(a1 + 35296 + i));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4952F0C(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  uint64_t v6;
  void (**v7)(void);
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C55102A4(0, a3, a4, (uint64_t)v9);
  v6 = sub_1C4952FC8(a1, a2, v9);
  if (v10 == v9)
  {
    v7 = (void (**)(void))(v9[0] + 32);
    goto LABEL_4;
  }
  if (v10)
  {
    v7 = (void (**)(void))(*v10 + 40);
LABEL_4:
    (*v7)();
  }
  return v6;
}

uint64_t sub_1C4952FC8(uint64_t a1, char a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  void (**v18)(void);
  void (**v20)(_QWORD *);
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v23);
    }
    else
    {
      v24 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v24 = 0;
  }
  v22 = 0;
  sub_1C495348C((uint64_t)v25, (uint64_t)v23, a2, (uint64_t)v21);
  v6 = sub_1C4953244(a1 + 8, (unint64_t)v25, 1);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = v7 + 72 * v8;
  v10 = *(_QWORD *)(v6 + 24);
  if (v10)
  {
    if (v10 == v6)
    {
      *(_QWORD *)(v9 + 24) = v9;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 24) + 24))(*(_QWORD *)(v6 + 24), v7 + 72 * v8);
    }
    else
    {
      *(_QWORD *)(v9 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  else
  {
    *(_QWORD *)(v9 + 24) = 0;
  }
  v11 = v7 + 72 * v8;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v6 + 32);
  v12 = *(_QWORD *)(v6 + 64);
  if (v12)
  {
    if (v12 == v6 + 40)
    {
      *(_QWORD *)(v7 + 72 * v8 + 64) = v11 + 40;
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 64) + 24))(*(_QWORD *)(v6 + 64));
    }
    else
    {
      *(_QWORD *)(v7 + 72 * v8 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  else
  {
    *(_QWORD *)(v7 + 72 * v8 + 64) = 0;
  }
  ++*(_DWORD *)(a1 + 16);
  v13 = v28;
  if (v28 == v27)
  {
    v14 = 4;
    v13 = v27;
LABEL_12:
    (*(void (**)(void))(*v13 + 8 * v14))();
    goto LABEL_13;
  }
  if (v28)
  {
    v14 = 5;
    goto LABEL_12;
  }
LABEL_13:
  v15 = v26;
  if (v26 == v25)
  {
    v16 = 4;
    v15 = v25;
LABEL_15:
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_16;
  }
  if (v26)
  {
    v16 = 5;
    goto LABEL_15;
  }
LABEL_16:
  v17 = v22;
  if (v22 == v21)
  {
    v20 = (void (**)(_QWORD *))(v21[0] + 32);
    v17 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_18;
    v20 = (void (**)(_QWORD *))(*v22 + 40);
  }
  (*v20)(v17);
LABEL_18:
  if (v24 == v23)
  {
    v18 = (void (**)(void))(v23[0] + 32);
    goto LABEL_21;
  }
  if (v24)
  {
    v18 = (void (**)(void))(*v24 + 40);
LABEL_21:
    (*v18)();
  }
  return a1;
}

unint64_t sub_1C4953244(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 72 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C49532AC(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C49532AC(a1, v5);
    }
  }
  return a2;
}

void sub_1C49532AC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 72, &v5);
  sub_1C4953318(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C4953318(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)result;
    v7 = 72 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      v10 = *(_QWORD *)(v6 + v5 + 24);
      if (v10)
      {
        if (v9 == v10)
        {
          *(_QWORD *)(v8 + 24) = v8;
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24));
        }
        else
        {
          *(_QWORD *)(v8 + 24) = v10;
          *(_QWORD *)(v9 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v8 + 24) = 0;
      }
      v11 = a2 + v5;
      v12 = v6 + v5;
      *(_BYTE *)(a2 + v5 + 32) = *(_BYTE *)(v6 + v5 + 32);
      v13 = *(_QWORD *)(v6 + v5 + 64);
      if (v13)
      {
        if (v12 + 40 == v13)
        {
          *(_QWORD *)(v11 + 64) = v11 + 40;
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 64) + 24))(*(_QWORD *)(v12 + 64));
        }
        else
        {
          *(_QWORD *)(v11 + 64) = v13;
          *(_QWORD *)(v12 + 64) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v11 + 64) = 0;
      }
      v5 += 72;
    }
    while (v7 != v5);
    v14 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)v4;
      v16 = 72 * v14;
      while (1)
      {
        v17 = v15 + v16;
        v18 = *(_QWORD **)(v15 + v16 - 8);
        if ((_QWORD *)(v15 + v16 - 32) == v18)
          break;
        if (v18)
        {
          v19 = 5;
          goto LABEL_17;
        }
LABEL_18:
        result = *(_QWORD *)(v15 + v16 - 48);
        if (v17 - 72 == result)
        {
          result = v17 - 72;
          v20 = 4;
        }
        else
        {
          if (!result)
            goto LABEL_21;
          v20 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v20))();
LABEL_21:
        v16 -= 72;
        if (!v16)
          return result;
      }
      v18 = (_QWORD *)(v15 + v16 - 32);
      v19 = 4;
LABEL_17:
      (*(void (**)(void))(*v18 + 8 * v19))();
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_1C495348C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_BYTE *)(a1 + 32) = a3;
  v8 = *(_QWORD *)(a4 + 24);
  if (v8)
  {
    if (v8 == a4)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return a1;
}

uint64_t sub_1C4953548(uint64_t a1, char a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  void (**v21)(_QWORD *);
  _QWORD *v22;
  void (**v23)(_QWORD *);
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a3[3];
  if (v7)
  {
    if (v7 == a3)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v27);
    }
    else
    {
      v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v28 = 0;
  }
  v8 = (_QWORD *)a4[3];
  if (v8)
  {
    if (v8 == a4)
    {
      v26 = v25;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v25);
    }
    else
    {
      v26 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v26 = 0;
  }
  sub_1C495348C((uint64_t)v29, (uint64_t)v27, a2, (uint64_t)v25);
  v9 = sub_1C4953244(a1 + 8, (unint64_t)v29, 1);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = v10 + 72 * v11;
  v13 = *(_QWORD *)(v9 + 24);
  if (v13)
  {
    if (v13 == v9)
    {
      *(_QWORD *)(v12 + 24) = v12;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24), v10 + 72 * v11);
    }
    else
    {
      *(_QWORD *)(v12 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    }
  }
  else
  {
    *(_QWORD *)(v12 + 24) = 0;
  }
  v14 = v10 + 72 * v11;
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v9 + 32);
  v15 = *(_QWORD *)(v9 + 64);
  if (v15)
  {
    if (v15 == v9 + 40)
    {
      *(_QWORD *)(v10 + 72 * v11 + 64) = v14 + 40;
      (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 64) + 24))(*(_QWORD *)(v9 + 64));
    }
    else
    {
      *(_QWORD *)(v10 + 72 * v11 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  else
  {
    *(_QWORD *)(v10 + 72 * v11 + 64) = 0;
  }
  ++*(_DWORD *)(a1 + 16);
  v16 = v32;
  if (v32 == v31)
  {
    v17 = 4;
    v16 = v31;
LABEL_15:
    (*(void (**)(void))(*v16 + 8 * v17))();
    goto LABEL_16;
  }
  if (v32)
  {
    v17 = 5;
    goto LABEL_15;
  }
LABEL_16:
  v18 = v30;
  if (v30 == v29)
  {
    v19 = 4;
    v18 = v29;
LABEL_18:
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_19;
  }
  if (v30)
  {
    v19 = 5;
    goto LABEL_18;
  }
LABEL_19:
  v20 = v26;
  if (v26 == v25)
  {
    v21 = (void (**)(_QWORD *))(v25[0] + 32);
    v20 = v25;
LABEL_21:
    (*v21)(v20);
    goto LABEL_22;
  }
  if (v26)
  {
    v21 = (void (**)(_QWORD *))(*v26 + 40);
    goto LABEL_21;
  }
LABEL_22:
  v22 = v28;
  if (v28 == v27)
  {
    v23 = (void (**)(_QWORD *))(v27[0] + 32);
    v22 = v27;
  }
  else
  {
    if (!v28)
      return a1;
    v23 = (void (**)(_QWORD *))(*v28 + 40);
  }
  (*v23)(v22);
  return a1;
}

uint64_t sub_1C4953808(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x20uLL);
  *(_QWORD *)v8 = &off_1E7FA3708;
  v8[2] = a2;
  *((_QWORD *)v8 + 2) = a3;
  v8[6] = a4;
  v18 = v8;
  v15[0] = &off_1E7FA3750;
  v15[1] = a2 | (unint64_t)(a4 << 32);
  v16 = v15;
  v9 = sub_1C4953548(a1, 4, v17, v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
LABEL_3:
    (*v11)(v10);
    goto LABEL_4;
  }
  if (v16)
  {
    v11 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v12 = v18;
  if (v18 == v17)
  {
    v13 = (void (**)(_QWORD *))(v17[0] + 32);
    v12 = v17;
  }
  else
  {
    if (!v18)
      return v9;
    v13 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v13)(v12);
  return v9;
}

uint64_t sub_1C495392C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = operator new(0x20uLL);
  *(_QWORD *)v8 = &off_1E7FA3798;
  v8[2] = a2;
  *((_QWORD *)v8 + 2) = a3;
  v8[6] = a4;
  v18 = v8;
  v15[0] = &off_1E7FA37E0;
  v15[1] = a2 | (unint64_t)(a4 << 32);
  v16 = v15;
  v9 = sub_1C4953548(a1, 3, v17, v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
LABEL_3:
    (*v11)(v10);
    goto LABEL_4;
  }
  if (v16)
  {
    v11 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v12 = v18;
  if (v18 == v17)
  {
    v13 = (void (**)(_QWORD *))(v17[0] + 32);
    v12 = v17;
  }
  else
  {
    if (!v18)
      return v9;
    v13 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v13)(v12);
  return v9;
}

__n128 sub_1C4953A50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3708;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4953A74(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E7FA3750;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

__n128 sub_1C4953A90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3798;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4953AB4(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E7FA37E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t sub_1C4953AD0(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v12 = a2;
  v3 = (a2 & 0xFFFFFFFFFFFFFFF9) != 0 && (a2 & 2) != 0 && (a2 & 4) == 0;
  v4 = sub_1C4825F50(&v12);
  v5 = 35;
  if ((v12 & 4) == 0)
    v5 = 19;
  v6 = ((v12 >> v5) & 0xFFFFFF) << 32;
  if ((v12 & 0xFFFFFFFFFFFFFFF9) != 0 && (v12 & 6) == 2)
    v8 = v6;
  else
    v8 = 0;
  v9 = (v4 << 16) & 0xFFFF0000 | ((unint64_t)((a1 & 0xFFFFFFFF00000000) == 0x100000000) << 56) | v8;
  v10 = 4;
  if (v3)
    v10 = 6;
  else
    v9 = (v4 << 16) & 0xFFFFFFFF0000 | ((unint64_t)((a1 & 0xFFFFFFFF00000000) == 0x100000000) << 48);
  return v10 | (8 * (v9 | (unsigned __int16)a1)) | v12 & 0x8000000000000000;
}

uint64_t sub_1C4953BAC()
{
  return 1;
}

uint64_t sub_1C4953BB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7FA3828;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4953BD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

BOOL sub_1C4953BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v10;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 8 * *(unsigned int *)(a1 + 8));
  v4 = (unsigned __int16)(v3 >> 3);
  v5 = (unsigned __int16)(v3 >> 19);
  if ((v3 & 2) == 0)
    v5 = (v3 >> 19);
  if ((v3 & 4) != 0)
    v4 = v5;
  if ((v3 & 1) != 0)
    v6 = (v3 >> 3);
  else
    v6 = v4;
  v7 = sub_1C4825F50((unint64_t *)(v2 + 8 * *(unsigned int *)(a1 + 12)));
  if ((_DWORD)v8 == 1)
  {
    v10 = v7;
    v7 = v10;
  }
  return v7 < v6;
}

_QWORD *sub_1C4953C64(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4953CC4((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4953D64(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1C4953CC4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = (37 * (*a2 & 0xFFFFFFFA | (4 * (*a2 & 1)) | (*a2 >> 2) & 1)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != 2)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == 4;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C4953D64(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4953E14((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4953CC4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != 2)
    --a1[3];
  return a4;
}

_QWORD *sub_1C4953E14(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6146C04(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = 2;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4953ECC(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  int v4;

  v2 = xmmword_1C6429EB0;
  if ((int)result <= 2560)
  {
    if ((result - 2545) < 0x10)
    {
      v3 = xmmword_1C660B6F0;
      v4 = 6;
      goto LABEL_10;
    }
    if ((result - 2471) < 4)
    {
      v3 = xmmword_1C660B700;
      v4 = 8;
      goto LABEL_10;
    }
    v3 = xmmword_1C660B6A0;
LABEL_9:
    v4 = 7;
    goto LABEL_10;
  }
  if ((result - 2561) < 0x10)
  {
    v3 = xmmword_1C660B6E0;
    goto LABEL_9;
  }
  if ((_DWORD)result == 2703)
  {
    v3 = xmmword_1C660B6B0;
    v2 = xmmword_1C660B6C0;
    v4 = 4;
  }
  else
  {
    v3 = xmmword_1C660B6D0;
    v2 = xmmword_1C660B6C0;
    v4 = 3;
  }
LABEL_10:
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_1C4953F7C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 32 * a2);
  if (v3 == 2)
  {
    v5 = *(_QWORD *)(v2 + 32 * a2 + 16);
    v6 = (uint64_t *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v6 = (uint64_t *)*v6;
    return *v6;
  }
  else if (v3 == 1)
  {
    return *(_QWORD *)(v2 + 32 * a2 + 16);
  }
  else
  {
    return sub_1C554C050(*(_DWORD *)(v2 + 32 * a2 + 4), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 40));
  }
}

uint64_t sub_1C4953FF4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 40);
  if (a2 == -1 || sub_1C4954068((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32 * a2), v5))
    return !sub_1C4954068((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32 * a3), v5);
  else
    return 2;
}

BOOL sub_1C4954068(unsigned __int8 *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = 1;
  if (*a1 - 1 >= 2)
  {
    if (*a1)
      return 0;
    v3 = *((unsigned int *)a1 + 1);
    v4 = (uint64_t *)((int)v3 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v3 : *(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
    v5 = *v4;
    if (!v5)
      return 0;
    if ((*(_BYTE *)(v5 + 3) & 1) == 0)
    {
      v5 = *(_QWORD *)(v5 + 24);
      if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
        return 0;
    }
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || **(_WORD **)(v6 + 16) != 120)
      return 0;
  }
  return result;
}

uint64_t sub_1C49540EC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  char v53;
  char v54;
  unint64_t v55;
  void *v56;
  int v57;
  int v58;
  void *v59;
  uint64_t v60;
  _DWORD v61[8];
  void *v62;
  uint64_t v63;
  _DWORD v64[32];
  uint64_t v65;

  v8 = 0;
  v65 = *MEMORY[0x1E0C80C00];
  v9 = a1 & 0x7FFFFFFF;
  if ((a1 & 0x80000000) != 0
    && v9 < *(unsigned int *)(a2 + 432)
    && (v8 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v9), (v8 & 2) != 0))
  {
    v53 = 35;
    v54 = 19;
    if ((v8 & 4) == 0)
      v53 = 19;
    v55 = v8 >> v53;
    if ((v8 & 4) == 0)
      v54 = 3;
    if ((v8 & 1) != 0)
      v54 = 3;
    v11 = (void *)((8 * (unsigned __int16)(v8 >> v54)) & 0xFFFFF8000007FFFFLL | ((v55 & 0xFFFFFF) << 19) | 2);
    v12 = 0x800000000000000;
  }
  else
  {
    v10 = 3;
    if ((v8 & 1) == 0)
      v10 = 19;
    v11 = (void *)(v8 & 0x8000000000000000 | (8 * (v8 >> v10)) | 1);
    v12 = 0x8000000000000;
  }
  v13 = *(_QWORD *)(a2 + 24) + 16 * v9 + 8;
  v14 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  if ((a1 & 0x80000000) != 0)
    v14 = (uint64_t *)v13;
  v15 = *v14;
  if (v15 && ((*(_BYTE *)(v15 + 3) & 1) != 0 || (v15 = *(_QWORD *)(v15 + 24)) != 0 && (*(_BYTE *)(v15 + 3) & 1) != 0))
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = 0;
  if ((v8 & v12) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v17 = **(unsigned __int16 **)(v16 + 16);
  if (v17 == 119)
  {
    v62 = v64;
    v63 = 0x400000000;
    if ((sub_1C49540EC(*(unsigned int *)(*(_QWORD *)(v16 + 32) + 36), a2, a3, &v62) & 1) != 0)
    {
      if ((_DWORD)v63)
      {
        v23 = 0;
        do
        {
          v56 = v11;
          v57 = 0;
          LODWORD(v59) = *((_DWORD *)v62 + v23);
          v61[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v56, 1, &v59, 1, 0);
          v25 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
          v26 = *(unsigned int *)(a4 + 8);
          if (v26 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v26 + 1, 4);
            v26 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v26) = v25;
          ++*(_DWORD *)(a4 + 8);
          ++v23;
        }
        while (v23 < v63);
      }
      v27 = v62;
      if (v62 == v64)
        goto LABEL_67;
      goto LABEL_66;
    }
    if (v62 != v64)
      free(v62);
    v17 = **(unsigned __int16 **)(v16 + 16);
  }
  v18 = (unsigned __int16)(v8 >> 3);
  if (v17 == 78)
  {
    if (*(_DWORD *)(v16 + 40) == v18 + 1)
    {
      if ((unsigned __int16)(v8 >> 3))
      {
        v31 = 0;
        v32 = 32 * (unsigned __int16)(v8 >> 3);
        do
        {
          v59 = v11;
          LODWORD(v60) = 0;
          LODWORD(v62) = *(_DWORD *)(*(_QWORD *)(v16 + 32) + v31 + 36);
          v64[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v59, 1, &v62, 1, 0);
          v34 = *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4);
          v35 = *(unsigned int *)(a4 + 8);
          if (v35 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v35 + 1, 4);
            v35 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v35) = v34;
          ++*(_DWORD *)(a4 + 8);
          v31 += 32;
        }
        while (v32 != v31);
      }
      goto LABEL_67;
    }
    goto LABEL_48;
  }
  if (v17 == 77)
  {
    if (*(_DWORD *)(v16 + 40) == v18 + 1)
    {
      if ((unsigned __int16)(v8 >> 3))
      {
        v28 = 0;
        v29 = *(_DWORD *)(a4 + 8);
        do
        {
          v30 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + v28 + 36);
          if (v29 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v29 + 1, 4);
            v29 = *(_DWORD *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v29) = v30;
          v29 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v29;
          v28 += 32;
        }
        while (32 * (unsigned __int16)(v8 >> 3) != v28);
      }
      v19 = 0;
      return (v19 << 8) | 1u;
    }
LABEL_48:
    v36 = (unsigned __int16)(v8 >> 3);
    v59 = v61;
    v60 = 0x400000000;
    sub_1C495A254((unsigned int *)&v59, v36, (uint64_t)v11);
    v37 = (uint64_t *)v59;
    v38 = v60;
    LODWORD(v56) = a1;
    v58 = 0;
    v62 = v64;
    v63 = 0x800000000;
    if (v60 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v60, 16);
      v39 = v63;
      v40 = v62;
    }
    else
    {
      if (!(_DWORD)v60)
      {
        v44 = 0;
        v45 = v64;
        goto LABEL_55;
      }
      v39 = 0;
      v40 = v64;
    }
    v41 = 8 * v38;
    v42 = &v40[4 * v39];
    do
    {
      v43 = *v37++;
      *(_QWORD *)v42 = v43;
      v42[2] = 0;
      v42 += 4;
      v41 -= 8;
    }
    while (v41);
    v44 = v63;
    v45 = v62;
LABEL_55:
    LODWORD(v63) = v44 + v38;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a3 + 32))(a3, 74, v45);
    v47 = v46;
    if (v62 == v64)
    {
      if (!(unsigned __int16)(v8 >> 3))
        goto LABEL_65;
    }
    else
    {
      free(v62);
      if (!(unsigned __int16)(v8 >> 3))
        goto LABEL_65;
    }
    v48 = 0;
    v49 = *(_DWORD *)(a4 + 8);
    v50 = 32 * v36;
    do
    {
      v51 = *(_DWORD *)(*(_QWORD *)(v47 + 32) + v48 + 4);
      if (v49 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v49 + 1, 4);
        v49 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v49) = v51;
      v49 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v49;
      v48 += 32;
    }
    while (v50 != v48);
LABEL_65:
    v27 = v59;
    if (v59 == v61)
    {
LABEL_67:
      v19 = 1;
      return (v19 << 8) | 1u;
    }
LABEL_66:
    free(v27);
    goto LABEL_67;
  }
  if (v17 != 68)
    goto LABEL_48;
  v62 = v11;
  LODWORD(v63) = 0;
  v19 = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 68, &v62, 1, 0, 0, 0);
  if ((unsigned __int16)(v8 >> 3))
  {
    v21 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
    v22 = *(_DWORD *)(a4 + 8);
    do
    {
      if (v22 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v22 + 1, 4);
        v22 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v22) = v21;
      v22 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v22;
      --v18;
    }
    while (v18);
    goto LABEL_67;
  }
  return (v19 << 8) | 1u;
}

uint64_t sub_1C49546E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::MachineFunction *v48;
  llvm::MachineInstr *v49;
  llvm::MachineInstr *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int v76;
  llvm::MachineMemOperand *v77;
  uint64_t v78;
  llvm::MachineMemOperand *v79;
  _BYTE *v80;
  _BYTE *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  llvm::MachineInstr *v104;
  int v105;
  _QWORD v106[2];
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  _QWORD v115[6];
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[11];
  int v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _BYTE v124[168];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if ((v7 & 4) != 0)
    v8 = 35;
  else
    v8 = 19;
  if (v6 != 129 && v6 != 257)
  {
    if ((v6 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(a1 + 32) & 4) == 0)
      return 0;
    v34 = 3;
    if ((v6 & 1) == 0)
      v34 = 19;
    v35 = v6 >> v34;
    v36 = v6 & 0x8000000000000000 | (8 * v35) | 1;
    v37 = (v6 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v35) | 2;
    if ((v6 & 2) == 0)
      v37 = v36;
    if (v37 != 257 && v37 != 129)
      return 0;
    v38 = 0x800000000000000;
    if ((v6 & 2) == 0)
      v38 = 0x8000000000000;
    if ((v38 & v6) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    if ((unsigned __int16)(v6 >> 3) > 4u)
      return 0;
  }
  v9 = *(unsigned int *)(a1 + 20);
  v10 = v7 >> v8;
  v106[0] = a1;
  v106[1] = a2;
  v107 = 0;
  v108 = -1;
  v113 = 0;
  v114 = 0;
  sub_1C492E760(v106, (const char *)a2);
  v11 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  if ((int)v9 >= 0)
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v9);
  v12 = *v11;
  if ((*(_BYTE *)(v12 + 3) & 1) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  v99 = a3;
  v100 = a1;
  v115[0] = *(_QWORD *)(v12 + 8);
  v115[1] = a2;
  v115[4] = 0;
  v115[5] = 0;
  v115[2] = a3;
  v116 = 0;
  v120 = 0;
  v118 = 0;
  memset(v119, 0, sizeof(v119));
  v117 = 0;
  v123 = 0x400000000;
  v124[160] = 0;
  v121 = v115[0];
  v122 = v124;
  v115[3] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115[0] + 24) + 32) + 8) + 1328;
  v13 = v112;
  v14 = v107;
  if (v112 == 3 && *(_BYTE *)(v107 + 326))
  {
    v15 = 127;
    v16 = 12;
  }
  else
  {
    v15 = 3;
    v16 = 9;
  }
  v17 = 0;
  v98 = v10 & 0xFFFFFF;
  v18 = v110;
  v19 = v110 >> v16;
  do
  {
    v20 = 2;
    v21 = 1024;
    do
    {
      if (v13 == 3 && *(_BYTE *)(v14 + 326))
      {
        v22 = v18 & 0xFFFFFFFFFFF80FFFLL;
        v23 = (4096 << v20);
      }
      else
      {
        v22 = v18 & 0xFFFFFFFFFFFFF9FFLL;
        v23 = v21 & 0xFFFFFE00;
      }
      v18 = v22 | v23;
      v24 = sub_1C4884088(v22 | v23);
      v25 = sub_1C492C818((uint64_t)v115, v24, 513, 257, (char *)0x201, v17, 0);
      if (!v21)
        break;
      v21 -= 512;
      --v20;
    }
    while ((v25 & 1) == 0);
    if (v17++ > 1)
      v27 = 1;
    else
      v27 = v25;
  }
  while ((v27 & 1) == 0);
  if ((v25 & 1) != 0)
  {
    v29 = v99;
    v28 = v100;
LABEL_49:
    v41 = v18 | ((unint64_t)v119[8] << 11);
    v110 = v41;
    v42 = v109;
    if (v109 == 1 && *(_QWORD *)(v28 + 24) != *(_QWORD *)(v28 + 32) && !sub_1C4955F2C(v28, v29))
      goto LABEL_87;
    v43 = *(_DWORD *)(*(_QWORD *)(v118 + 32) + 4);
    v44 = *(_QWORD *)(v29[1] + 344);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 288))(v44) & 1) == 0
      && (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v44)(v44, 37, 0, 1, 2))
    {
      v103 = 513;
      LODWORD(v104) = 0;
      LODWORD(v125) = v43;
      LODWORD(v127) = 0;
      sub_1C5546EF4(v29, &v103, (int *)&v125);
      LODWORD(v103) = *(_DWORD *)(*(_QWORD *)(v45 + 32) + 4);
      v105 = 0;
      v125 = (uint64_t)&v127;
      v127 = 257;
      LODWORD(v128) = 0;
      v129 = 257;
      v130 = 0;
      v126 = 0x800000002;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v29 + 32))(v29, 74, &v127, 2, &v103, 1, 0);
      v47 = v46;
      if ((uint64_t *)v125 != &v127)
        free((void *)v125);
      v125 = 257;
      LODWORD(v126) = 0;
      v48 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*v29 + 32))(v29, 495, &v125, 1, 0, 0, 0);
      v50 = v49;
      v103 = (uint64_t)v48;
      v104 = v49;
      LODWORD(v125) = 1;
      v126 = 0;
      v127 = 0;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v125);
      v51 = *(_DWORD *)(*(_QWORD *)(v47 + 32) + 36);
      v126 = 0;
      v127 = 0;
      LODWORD(v125) = 0;
      HIDWORD(v125) = v51;
      v128 = 0;
      llvm::MachineInstr::addOperand(v50, v48, (const llvm::MachineOperand *)&v125);
      LODWORD(v125) = 1;
      v126 = 0;
      v127 = 0;
      llvm::MachineInstr::addOperand(v50, v48, (const llvm::MachineOperand *)&v125);
      sub_1C49400A8((uint64_t)&v103);
      v101 = 513;
      v102 = 0;
      LODWORD(v125) = *(_DWORD *)(*(_QWORD *)(v47 + 32) + 4);
      LODWORD(v127) = 0;
      v52 = *((_QWORD *)v50 + 4);
      v29 = v99;
      LODWORD(v128) = *(_DWORD *)(v52 + 4);
      v130 = 0;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v99 + 32))(v99, 76, &v101, 1, &v125, 2, 0);
      v43 = *(_DWORD *)(*(_QWORD *)(v53 + 32) + 4);
      v28 = v100;
    }
    v54 = v43 & 0x7FFFFFFF;
    v55 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v54 + 8);
    if (v43 >= 0)
      v55 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v43);
    v56 = *v55;
    if (v56)
    {
      if (((*(_BYTE *)(v56 + 3) & 1) != 0 || (v56 = *(_QWORD *)(v56 + 24)) != 0 && (*(_BYTE *)(v56 + 3) & 1) != 0)
        && (v95 = *(_QWORD *)(v56 + 8)) != 0
        && **(_WORD **)(v95 + 16) == 45
        && *(_DWORD *)(v95 + 40) == 3)
      {
        v96 = 0;
        if (v43 < 0 && v54 < *(unsigned int *)(a2 + 432))
          v96 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v54);
        v103 = v96;
        LODWORD(v104) = 0;
        LODWORD(v125) = v43;
        LODWORD(v127) = 0;
        v29 = v99;
        (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v99 + 32))(v99, 19, &v103, 1, &v125, 1, 0);
        v43 = *(_DWORD *)(*(_QWORD *)(v97 + 32) + 4);
        v28 = v100;
      }
      else
      {
        v29 = v99;
        v28 = v100;
      }
    }
    v57 = v41;
    v58 = sub_1C4883EEC((uint64_t)&v107, v13, 1, v116);
    v60 = sub_1C55437B8(v29, v58);
    v61 = (unint64_t *)v59;
    v62 = (unint64_t *)v29[6];
    v63 = *(_QWORD *)(v29[5] + 40);
    *(_QWORD *)(v59 + 24) = v63;
    v64 = *(_QWORD *)(v63 + 32);
    v65 = *(unsigned int *)(v59 + 40);
    if ((_DWORD)v65)
    {
      v88 = *(_QWORD *)(v59 + 32);
      v89 = *(_QWORD *)(v64 + 40);
      v90 = 32 * v65;
      do
      {
        if (!*(_BYTE *)v88)
        {
          v91 = *(unsigned int *)(v88 + 4);
          if ((int)v91 >= 0)
            v92 = (uint64_t *)(*(_QWORD *)(v89 + 272) + 8 * v91);
          else
            v92 = (uint64_t *)(*(_QWORD *)(v89 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8);
          v93 = *v92;
          if (*v92)
          {
            v94 = *(_QWORD *)(v93 + 16);
            *(_QWORD *)(v93 + 16) = v88;
            *(_QWORD *)(v88 + 16) = v94;
            if ((*(_BYTE *)(v88 + 3) & 1) != 0)
            {
              *(_QWORD *)(v88 + 24) = v93;
            }
            else
            {
              *(_QWORD *)(v88 + 24) = 0;
              v92 = (uint64_t *)(v94 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v88 + 16) = v88;
            *(_QWORD *)(v88 + 24) = 0;
          }
          *v92 = v88;
        }
        v88 += 32;
        v90 -= 32;
      }
      while (v90);
    }
    v66 = *(_QWORD *)(v64 + 728);
    if (v66)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 24))(v66, v59);
    v67 = *v62 & 0xFFFFFFFFFFFFFFF8;
    *v61 = v67 | *v61 & 7;
    v61[1] = (unint64_t)v62;
    *(_QWORD *)(v67 + 8) = v61;
    *v62 = *v62 & 7 | (unint64_t)v61;
    v68 = v29[7];
    if (v68)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v68 + 24))(v68, v61);
    v103 = (uint64_t)v60;
    v104 = (llvm::MachineInstr *)v61;
    if (!v42)
    {
      v69 = *(_DWORD *)(v28 + 16);
      v126 = 0;
      v127 = 0;
      v128 = 0;
      LODWORD(v125) = 0x1000000;
      HIDWORD(v125) = v69;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    }
    LODWORD(v125) = 1;
    v126 = 0;
    v127 = v57;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    LODWORD(v125) = 1;
    v126 = 0;
    v127 = v111;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    if (v42 == 1)
    {
      v70 = *(_DWORD *)(v28 + 16);
      v126 = 0;
      v127 = 0;
      LODWORD(v125) = 0;
      HIDWORD(v125) = v70;
      v128 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    }
    v126 = 0;
    v127 = 0;
    LODWORD(v125) = 0;
    HIDWORD(v125) = v43;
    v128 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    v71 = *(_QWORD *)(*(_QWORD *)v119 + 32);
    if (v116)
    {
      v72 = *(_QWORD *)(v71 + 48);
      v73 = *(_DWORD *)(v72 + 32);
      v74 = v98;
      v75 = v73 > 0x40 ? **(_QWORD **)(v72 + 24) : (uint64_t)(*(_QWORD *)(v72 + 24) << -(char)v73) >> -(char)v73;
      LODWORD(v125) = 1;
      v126 = 0;
      v127 = (int)v75;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    }
    else
    {
      v76 = *(_DWORD *)(v71 + 4);
      v126 = 0;
      v127 = 0;
      LODWORD(v125) = 0;
      HIDWORD(v125) = v76;
      v128 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
      v74 = v98;
    }
    LODWORD(v125) = 1;
    v126 = 0;
    v127 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v125);
    if (v74 == 65)
    {
      v78 = (v18 >> 54);
      if ((v18 & 0x2000000000000000) != 0)
        v78 = 0;
      sub_1C4990688((v78 | ((v18 & 0x2000000000000000) >> 29)) ^ 0x100000000, v57 >> 4, v57 & 0xF);
      v77 = v79;
    }
    else
    {
      v77 = *(llvm::MachineMemOperand **)(v28 + 48);
      if (v74 == 2)
        *((_WORD *)v77 + 16) |= 0x20u;
    }
    llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v61, v60, v77);
    sub_1C49400A8((uint64_t)&v103);
    if (v42 || *(_QWORD *)(v28 + 24) == *(_QWORD *)(v28 + 32) || sub_1C4955F2C(v28, v29))
    {
      v80 = *(_BYTE **)v28;
      v81 = *(_BYTE **)v28;
      if ((**(_BYTE **)v28 & 4) == 0)
      {
        v81 = *(_BYTE **)v28;
        if ((*((_WORD *)v80 + 22) & 8) != 0)
        {
          v81 = *(_BYTE **)v28;
          do
            v81 = (_BYTE *)*((_QWORD *)v81 + 1);
          while ((*((_WORD *)v81 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(*(_QWORD *)v28 + 24) + 40, (uint64_t)v80, *((_QWORD *)v81 + 1));
      v39 = 1;
    }
    else
    {
LABEL_87:
      v39 = 0;
    }
    goto LABEL_88;
  }
  v30 = v19 & v15;
  if (v13 == 3 && *(_BYTE *)(v14 + 326))
  {
    v31 = v18 & 0xFFFFFFFFFFF80FFFLL;
    v32 = 4096 << v30;
  }
  else
  {
    v31 = v18 & 0xFFFFFFFFFFFFF9FFLL;
    v32 = v30 << 9;
  }
  v29 = v99;
  v28 = v100;
  v18 = v31 | v32;
  v40 = sub_1C4884088(v31 | v32);
  v39 = 0;
  if (sub_1C492C818((uint64_t)v115, v40, 513, 257, (char *)0x201, 0, 1u))
    goto LABEL_49;
LABEL_88:
  v82 = (char *)v122;
  if ((_DWORD)v123)
  {
    v83 = 40 * v123;
    do
    {
      v84 = &v82[v83];
      if (*(_DWORD *)&v82[v83 - 8] >= 0x41u)
      {
        v85 = *((_QWORD *)v84 - 2);
        if (v85)
          MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v84 - 6) >= 0x41u)
      {
        v86 = *((_QWORD *)v84 - 4);
        if (v86)
          MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
      }
      v83 -= 40;
    }
    while (v83);
    v82 = (char *)v122;
  }
  if (v82 != v124)
    free(v82);
  return v39;
}

uint64_t sub_1C49550DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  llvm::GlobalValue *v15;
  int v16;
  BOOL v17;
  unint64_t *Section;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  llvm::MachineFunction *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  _BYTE *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _BYTE *v92;
  uint64_t *v93;
  uint64_t v94;
  llvm::MachineFunction *v95;
  unint64_t *v96;
  _QWORD v97[2];
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  int v102;
  char v103;
  char v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  llvm::GlobalValue *v110[2];
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  char v120;
  int v121;
  llvm::GlobalValue *v122;
  void *v123;
  uint64_t v124;
  _BYTE v125[160];
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 != 129 && v6 != 257)
  {
    if ((v6 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(a1 + 32) & 4) == 0)
      return 0;
    v24 = 3;
    if ((v6 & 1) == 0)
      v24 = 19;
    v25 = v6 >> v24;
    v26 = v6 & 0x8000000000000000 | (8 * v25) | 1;
    v27 = (v6 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v25) | 2;
    if ((v6 & 2) == 0)
      v27 = v26;
    if (v27 != 257 && v27 != 129)
      return 0;
    v28 = 0x800000000000000;
    if ((v6 & 2) == 0)
      v28 = 0x8000000000000;
    if ((v28 & v6) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    if ((unsigned __int16)(v6 >> 3) > 4u)
      return 0;
  }
  v7 = *(_BYTE **)(a3[1] + 16);
  v97[0] = a1;
  v97[1] = a2;
  v98 = 0;
  v99 = -1;
  v103 = 0;
  v104 = 0;
  sub_1C492E760(v97, (const char *)a2);
  v8 = 0;
  if (v7[405])
    v9 = 257;
  else
    v9 = 129;
  v10 = *(unsigned int *)(a1 + 20);
  v11 = *(_QWORD *)(a2 + 272) + 8 * v10;
  v12 = (int)v10 < 0;
  v13 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  if (!v12)
    v13 = (uint64_t *)v11;
  v14 = *v13;
  v93 = a3;
  v94 = a1;
  v92 = v7;
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
      v8 = *(_QWORD *)(v14 + 8);
    else
      v8 = 0;
  }
  v15 = (llvm::GlobalValue *)sub_1C4956D44(v8, a2, a3);
  if (v7[407])
    v16 = 2 * v7[406];
  else
    v16 = (2 * v7[406]) | 0x10000;
  if (v7[406])
    v17 = 1;
  else
    v17 = v7[407] == 0;
  if (v17)
  {
    sub_1C493FD84((uint64_t)v110, *(_DWORD *)(a1 + 20), a2, 0);
    if ((_BYTE)v111)
    {
      Section = (unint64_t *)llvm::GlobalValue::getSection(v110[0]);
      if (v19 == 19)
      {
        v20 = 0x636C5F6C6F63616CLL;
        v21 = bswap64(*Section);
        if (v21 == 0x636C5F6C6F63616CLL
          && (v20 = 0x5F7065725F746872, v21 = bswap64(Section[1]), v21 == 0x5F7065725F746872)
          && (v20 = 0x725F746872656164,
              v21 = bswap64(*(unint64_t *)((char *)Section + 11)),
              v21 == 0x725F746872656164))
        {
          v22 = 0;
        }
        else
        {
          v22 = v21 < v20 ? -1 : 1;
        }
        if (!v22)
          v16 = 0;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v30 = v7[405];
  v110[0] = v15;
  v110[1] = (llvm::GlobalValue *)a2;
  v113 = 0;
  v114 = 0;
  v111 = a3;
  v115 = 0;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  v119 = 0;
  v120 = v30;
  v121 = v16;
  v122 = (llvm::GlobalValue *)v8;
  v123 = v125;
  v124 = 0x400000000;
  v126 = 0;
  if (!v8)
    v122 = v15;
  v112 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 3) + 32) + 8) + 1328;
  v31 = v102;
  v32 = v98;
  if (v102 == 3 && *(_BYTE *)(v98 + 326))
  {
    v91 = 127;
    v33 = 12;
  }
  else
  {
    v91 = 3;
    v33 = 9;
  }
  v34 = 0;
  v35 = v101;
  v36 = v101 >> v33;
  do
  {
    v37 = 2;
    v38 = 1024;
    do
    {
      if (v31 == 3 && *(_BYTE *)(v32 + 326))
      {
        v39 = v35 & 0xFFFFFFFFFFF80FFFLL;
        v40 = (4096 << v37);
      }
      else
      {
        v39 = v35 & 0xFFFFFFFFFFFFF9FFLL;
        v40 = v38 & 0xFFFFFE00;
      }
      v35 = v39 | v40;
      v41 = sub_1C4884088(v39 | v40);
      v42 = sub_1C492C818((uint64_t)v110, v41, v9, 129, (char *)0x81, v34, 0);
      if (!v38)
        break;
      v38 -= 512;
      --v37;
    }
    while ((v42 & 1) == 0);
    if (v34++ > 1)
      v44 = 1;
    else
      v44 = v42;
  }
  while ((v44 & 1) == 0);
  if ((v42 & 1) != 0)
  {
    v46 = v93;
    v45 = v94;
LABEL_69:
    v52 = v35 | ((unint64_t)v119 << 11);
    v101 = v52;
    v53 = *(_DWORD *)(*(_QWORD *)(v117 + 32) + 4);
    v54 = v100;
    if (v100 == 1 && *(_QWORD *)(v45 + 24) != *(_QWORD *)(v45 + 32) && !sub_1C4955F2C(v45, v46))
      goto LABEL_105;
    if (v53 < 0 && (v53 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
      v55 = *(llvm::MachineFunction **)(*(_QWORD *)(a2 + 424) + 8 * (v53 & 0x7FFFFFFF));
    else
      v55 = 0;
    v95 = v55;
    LODWORD(v96) = 0;
    v105 = v53;
    LODWORD(v108) = 0;
    (*(void (**)(uint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, int *, uint64_t, _QWORD))(*v46 + 32))(v46, 19, &v95, 1, &v105, 1, 0);
    v57 = *(_DWORD *)(*(_QWORD *)(v56 + 32) + 4);
    v58 = sub_1C4883EEC((uint64_t)&v98, v31, v126 == 0, v115);
    v60 = sub_1C55437B8(v46, v58);
    v61 = (unint64_t *)v59;
    v62 = (unint64_t *)v46[6];
    v63 = *(_QWORD *)(v46[5] + 40);
    *(_QWORD *)(v59 + 24) = v63;
    v64 = *(_QWORD *)(v63 + 32);
    v65 = *(unsigned int *)(v59 + 40);
    if ((_DWORD)v65)
    {
      v84 = *(_QWORD *)(v59 + 32);
      v85 = *(_QWORD *)(v64 + 40);
      v86 = 32 * v65;
      do
      {
        if (!*(_BYTE *)v84)
        {
          v87 = *(unsigned int *)(v84 + 4);
          if ((int)v87 >= 0)
            v88 = (uint64_t *)(*(_QWORD *)(v85 + 272) + 8 * v87);
          else
            v88 = (uint64_t *)(*(_QWORD *)(v85 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
          v89 = *v88;
          if (*v88)
          {
            v90 = *(_QWORD *)(v89 + 16);
            *(_QWORD *)(v89 + 16) = v84;
            *(_QWORD *)(v84 + 16) = v90;
            if ((*(_BYTE *)(v84 + 3) & 1) != 0)
            {
              *(_QWORD *)(v84 + 24) = v89;
            }
            else
            {
              *(_QWORD *)(v84 + 24) = 0;
              v88 = (uint64_t *)(v90 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v84 + 16) = v84;
            *(_QWORD *)(v84 + 24) = 0;
          }
          *v88 = v84;
        }
        v84 += 32;
        v86 -= 32;
      }
      while (v86);
    }
    v66 = *(_QWORD *)(v64 + 728);
    if (v66)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 24))(v66, v59);
    v67 = *v62 & 0xFFFFFFFFFFFFFFF8;
    *v61 = v67 | *v61 & 7;
    v61[1] = (unint64_t)v62;
    *(_QWORD *)(v67 + 8) = v61;
    *v62 = *v62 & 7 | (unint64_t)v61;
    v68 = v46[7];
    if (v68)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v68 + 24))(v68, v61);
    v95 = v60;
    v96 = v61;
    if (!v54)
    {
      v69 = *(_DWORD *)(v45 + 16);
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v105 = 0x1000000;
      v106 = v69;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
    }
    if (v92[326])
    {
      v105 = 1;
      v107 = 0;
      v108 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
    }
    v105 = 1;
    v107 = 0;
    v108 = v52;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
    if (v54 == 1)
    {
      v70 = *(_DWORD *)(v45 + 16);
      v107 = 0;
      v108 = 0;
      v105 = 0;
      v106 = v70;
      v109 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
    }
    if (!v126)
    {
      v107 = 0;
      v108 = 0;
      v105 = 0;
      v106 = v57;
      v109 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
      if (v92[326])
      {
        v105 = 1;
        v107 = 0;
        v108 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
      }
    }
    v71 = *(_QWORD *)(v118 + 32);
    if (v115)
    {
      v72 = *(_QWORD *)(v71 + 48);
      v73 = *(_DWORD *)(v72 + 32);
      if (v73 > 0x40)
        v74 = **(_QWORD **)(v72 + 24);
      else
        v74 = (uint64_t)(*(_QWORD *)(v72 + 24) << -(char)v73) >> -(char)v73;
      v105 = 1;
      v107 = 0;
      v108 = (int)v74;
    }
    else
    {
      v75 = *(_DWORD *)(v71 + 4);
      v107 = 0;
      v108 = 0;
      v105 = 0;
      v106 = v75;
      v109 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
    if (!v115 && v92[326])
    {
      v105 = 1;
      v107 = 0;
      v108 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v60, (const llvm::MachineOperand *)&v105);
    }
    llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v61, v60, *(llvm::MachineMemOperand **)(v45 + 48));
    sub_1C49400A8((uint64_t)&v95);
    if (v54 || *(_QWORD *)(v45 + 24) == *(_QWORD *)(v45 + 32) || sub_1C4955F2C(v45, v46))
    {
      v76 = *(_BYTE **)v45;
      v77 = *(_BYTE **)v45;
      if ((**(_BYTE **)v45 & 4) == 0)
      {
        v77 = *(_BYTE **)v45;
        if ((*((_WORD *)v76 + 22) & 8) != 0)
        {
          v77 = *(_BYTE **)v45;
          do
            v77 = (_BYTE *)*((_QWORD *)v77 + 1);
          while ((*((_WORD *)v77 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(*(_QWORD *)v45 + 24) + 40, (uint64_t)v76, *((_QWORD *)v77 + 1));
      v29 = 1;
    }
    else
    {
LABEL_105:
      v29 = 0;
    }
    goto LABEL_106;
  }
  v47 = v36 & v91;
  v45 = v94;
  if (v31 == 3 && *(_BYTE *)(v32 + 326))
  {
    v48 = v35 & 0xFFFFFFFFFFF80FFFLL;
    v49 = 4096 << v47;
  }
  else
  {
    v48 = v35 & 0xFFFFFFFFFFFFF9FFLL;
    v49 = v47 << 9;
  }
  v46 = v93;
  v35 = v48 | v49;
  v50 = sub_1C4884088(v48 | v49);
  v51 = sub_1C492C818((uint64_t)v110, v50, v9, 129, (char *)0x81, 0, 1u);
  v29 = 0;
  if (v51)
    goto LABEL_69;
LABEL_106:
  v78 = (char *)v123;
  if ((_DWORD)v124)
  {
    v79 = 40 * v124;
    do
    {
      v80 = &v78[v79];
      if (*(_DWORD *)&v78[v79 - 8] >= 0x41u)
      {
        v81 = *((_QWORD *)v80 - 2);
        if (v81)
          MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
      }
      if (*((_DWORD *)v80 - 6) >= 0x41u)
      {
        v82 = *((_QWORD *)v80 - 4);
        if (v82)
          MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
      }
      v79 -= 40;
    }
    while (v79);
    v78 = (char *)v123;
  }
  if (v78 != v125)
    free(v78);
  return v29;
}

void sub_1C4955998(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int GenericVirtualRegister;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v44 = a4;
  v8 = sub_1C4825F50(&v44);
  if ((_DWORD)v7 == 1)
  v9 = (v8 >> 3);
  if (!(a3 % v9))
  {
    v11 = *(_QWORD *)a1;
    LODWORD(v50) = a2;
    LODWORD(v51) = 1;
    v45 = a3;
    v47 = 3;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 318, &v50, 1, &v45, 1, 0);
    return;
  }
  v50 = &v52;
  v51 = 0x200000000;
  if ((a3 & 1) != 0)
  {
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), "", 0);
    v13 = *(_QWORD *)a1;
    v10 = 1;
    v43 = GenericVirtualRegister;
    LODWORD(v53) = GenericVirtualRegister;
    v54 = 1;
    v45 = a3 - 1;
    v47 = 3;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 318, &v53, 1, &v45, 1, 0);
  }
  else
  {
    v43 = 0;
    v10 = 0;
  }
  if ((uint64_t)(v9 + a3) >= a3 + v10 + 2)
  {
    do
    {
      v16 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), "", 0);
      v17 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)&v52, v51 + 1, 4);
        v17 = v51;
      }
      *((_DWORD *)v50 + v17) = v16;
      LODWORD(v51) = v51 + 1;
      v18 = *(_QWORD *)a1;
      LODWORD(v53) = v16;
      v54 = 1;
      v45 = a3 + v10;
      v47 = 3;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 318, &v53, 1, &v45, 1, 0);
      v14 = v10 + 2;
      v19 = (_DWORD)a3 + 4 + v10;
      v10 += 2;
    }
    while ((uint64_t)(v9 + a3) >= v19);
  }
  else
  {
    v14 = v10;
  }
  if ((a3 & 1) != 0)
  {
    v15 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), "", 0);
    v20 = *(_QWORD *)a1;
    LODWORD(v53) = v15;
    v54 = 1;
    v45 = a3 + v14;
    v47 = 3;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 318, &v53, 1, &v45, 1, 0);
  }
  else
  {
    v15 = 0;
  }
  v21 = *(_QWORD *)a1;
  v45 = **(_QWORD **)(a1 + 16);
  v46 = 0;
  sub_1C5544694(v21, &v45, 8);
  if (v43)
  {
    v23 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 4);
    v24 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v43;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 128, &v53, 1, &v45, 2, 0);
    v26 = *(_DWORD *)(*(_QWORD *)(v25 + 32) + 4);
    v27 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v15;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 127, &v53, 1, &v45, 2, 0);
    v29 = *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4);
    if (!(_DWORD)v51)
      goto LABEL_22;
    v30 = *(_DWORD *)v50;
    v31 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v30;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 127, &v53, 1, &v45, 2, 0);
    v33 = *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4);
    v34 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v33;
    v47 = 0;
    v48 = v26;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 66, &v53, 1, &v45, 2, 0);
    v26 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
    v36 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v30;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 128, &v53, 1, &v45, 2, 0);
    v38 = *(_DWORD *)(*(_QWORD *)(v37 + 32) + 4);
    v39 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v38;
    v47 = 0;
    v48 = v29;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 66, &v53, 1, &v45, 2, 0);
    v41 = *(_DWORD **)(v40 + 32);
  }
  else
  {
    v41 = v50;
    v26 = *(_DWORD *)v50;
  }
  v29 = v41[1];
LABEL_22:
  v42 = *(_QWORD *)a1;
  LODWORD(v53) = a2;
  v54 = 1;
  LODWORD(v45) = v26;
  v47 = 0;
  v48 = v29;
  v49 = 0;
  (*(void (**)(void))(*(_QWORD *)v42 + 32))();
  if (v50 != &v52)
    free(v50);
}

uint64_t sub_1C4955F2C(uint64_t a1, uint64_t *a2)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  llvm::MachineFunction *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t i;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  const char *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  unint64_t v85;
  uint64_t k;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  int *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _DWORD *v101;
  int v102;
  char v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  _QWORD *v112;
  _BYTE *v113;
  const char *v115;
  const char *v116;
  unint64_t v117;
  uint64_t j;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  _DWORD *v132;
  int v133;
  char v134;
  int *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _DWORD *v142;
  int v143;
  int v144;
  _BYTE *v145;
  _DWORD v146[6];
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  _DWORD v151[4];
  void *v152;
  uint64_t v153;
  _BYTE v154[32];
  void *v155;
  uint64_t v156;
  _BYTE v157[16];
  void *v158;
  uint64_t v159;
  _QWORD v160[3];
  int v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 8) - 1;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v147 = *(_QWORD *)(a1 + 32);
  v148 = v6;
  if (v4 >= 2)
    v7 = v3;
  else
    v7 = v5;
  if (v4 >= 2)
    v8 = v5;
  else
    v8 = v3;
  if (v4 >= 2)
    v9 = (unint64_t *)&v148;
  else
    v9 = (unint64_t *)&v147;
  if (v4 >= 2)
    v10 = (unint64_t *)&v147;
  else
    v10 = (unint64_t *)&v148;
  v11 = *v9;
  if (*v9 == 9 || v11 == 65)
  {
    if (*v10 == 129)
      goto LABEL_22;
LABEL_23:
    v18 = sub_1C4825F50(v9);
    v20 = v19;
    v21 = sub_1C4825F50(v10);
    v23 = *v9;
    if (v18 == v21 && v20 == (_DWORD)v22)
    {
      v63 = *v10;
      if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v9 & 6) == 2 && v63 == 16777236)
      {
        v152 = (void *)513;
        LODWORD(v153) = 0;
        LODWORD(v158) = v7;
        LODWORD(v160[0]) = 0;
        v12 = 1;
        v79 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 80, &v152, 1, &v158, 1, 0);
        LODWORD(v152) = v8;
        LODWORD(v153) = 1;
        v158 = v79;
        v159 = v80;
        LODWORD(v160[0]) = 1;
        sub_1C5546EF4(a2, (uint64_t *)&v152, (int *)&v158);
      }
      else if (v23 == 16777236 && (v63 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v10 & 6) == 2)
      {
        v152 = (void *)513;
        LODWORD(v153) = 0;
        LODWORD(v158) = v7;
        LODWORD(v160[0]) = 0;
        v81 = (void *)sub_1C5546EF4(a2, (uint64_t *)&v152, (int *)&v158);
        v12 = 1;
        LODWORD(v152) = v8;
        LODWORD(v153) = 1;
        v158 = v81;
        v159 = v82;
        LODWORD(v160[0]) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 81, &v152, 1, &v158, 1, 0);
      }
      else
      {
        v12 = 1;
        LODWORD(v152) = v8;
        LODWORD(v153) = 1;
        LODWORD(v158) = v7;
        LODWORD(v160[0]) = 0;
        sub_1C5546EF4(a2, (uint64_t *)&v152, (int *)&v158);
      }
      return v12;
    }
    v25 = *v10;
    if ((v23 != 16777244 || v25 != 16777252) && (v23 != 8388636 || v25 != 8388644))
    {
      if ((v23 != 16777252 || v25 != 16777244) && (v23 != 8388644 || v25 != 8388636))
      {
        v12 = 0;
        if ((v23 & 0xFFFFFFFFFFFFFFF9) == 0)
          return v12;
        if ((v23 & 4) == 0)
          return v12;
        v12 = 0;
        if ((v25 & 0xFFFFFFFFFFFFFFF9) == 0 || (v25 & 4) == 0)
          return v12;
        if ((v23 & 2) != 0)
          v30 = 0x800000000000000;
        else
          v30 = 0x8000000000000;
        if ((v30 & v23) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
          v23 = *v9;
          v25 = *v10;
        }
        if ((v25 & 2) != 0)
          v31 = 0x800000000000000;
        else
          v31 = 0x8000000000000;
        if ((v31 & v25) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
          v25 = *v10;
        }
        if ((unsigned __int16)(v23 >> 3) != (unsigned __int16)(v25 >> 3))
          return 0;
        v32 = *v9;
        if ((*v9 & 2) != 0)
          return 0;
        v33 = 3;
        if ((v32 & 1) == 0)
          v33 = 19;
        v34 = v32 & 0x8000000000000000 | (8 * (v32 >> v33));
        if ((v25 & 2) == 0 && v34 == 128)
        {
          v35 = 19;
          if ((v25 & 1) != 0)
            v35 = 3;
          if ((v25 & 0x8000000000000000 | (8 * (v25 >> v35))) == 0x40)
          {
            v145 = v154;
            v152 = v154;
            v153 = 0x400000000;
            LODWORD(v158) = v7;
            LODWORD(v160[0]) = 0;
            sub_1C5544C30(a2, 129, (int *)&v158);
            v37 = v36;
            v38 = 0;
            for (i = 4; ; i += 32)
            {
              v40 = *v9;
              v41 = 0x800000000000000;
              if ((*v9 & 2) == 0)
                v41 = 0x8000000000000;
              if ((v41 & v40) != 0)
              {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v36);
                v40 = *v9;
              }
              if (v38 >= (unsigned __int16)(v40 >> 3))
                break;
              v155 = (void *)129;
              LODWORD(v156) = 0;
              LODWORD(v158) = *(_DWORD *)(*(_QWORD *)(v37 + 32) + i);
              LODWORD(v160[0]) = 0;
              v42 = *v10;
              if ((*v10 & 1) != 0)
                v43 = 3;
              else
                v43 = 19;
              v44 = v42 & 0x8000000000000000 | (8 * (v42 >> v43)) | 1;
              v45 = 35;
              if ((v42 & 4) == 0)
                v45 = 19;
              v46 = v42 >> v45;
              if ((v42 & 4) != 0)
                v47 = 19;
              else
                v47 = 3;
              if ((v42 & 1) != 0)
                v47 = 3;
              v48 = (8 * (unsigned __int16)(v42 >> v47)) & 0xFFFFF8000007FFFFLL | ((v46 & 0xFFFFFF) << 19);
              if ((v42 & 2) != 0)
                v49 = (void *)(v48 | 2);
              else
                v49 = (void *)v44;
              v149 = v49;
              v50 = sub_1C4825F50((unint64_t *)&v149);
              if ((_DWORD)v51 == 1)
              {
                v59 = v50;
                v50 = v59;
              }
              v160[1] = v50;
              v161 = 3;
              v52 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 257, &v155, 1, &v158, 2, 0);
              v54 = *v10;
              if ((*v10 & 2) != 0)
              {
                v60 = 35;
                if ((v54 & 4) == 0)
                  v60 = 19;
                v61 = v54 >> v60;
                if ((v54 & 4) != 0)
                  v62 = 19;
                else
                  v62 = 3;
                if ((v54 & 1) != 0)
                  v62 = 3;
                v56 = (void *)((8 * (unsigned __int16)(v54 >> v62)) & 0xFFFFF8000007FFFFLL | ((v61 & 0xFFFFFF) << 19) | 2);
              }
              else
              {
                if ((v54 & 1) != 0)
                  v55 = 3;
                else
                  v55 = 19;
                v56 = (void *)(v54 & 0x8000000000000000 | (8 * (v54 >> v55)) | 1);
              }
              v155 = v56;
              LODWORD(v156) = 0;
              v158 = v52;
              v159 = v53;
              LODWORD(v160[0]) = 1;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 119, &v155, 1, &v158, 1, 0);
              v57 = *(_DWORD *)(*(_QWORD *)(v36 + 32) + 4);
              v58 = v153;
              if (v153 >= (unint64_t)HIDWORD(v153))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 4);
                v58 = v153;
              }
              *((_DWORD *)v152 + v58) = v57;
              LODWORD(v153) = v153 + 1;
              ++v38;
            }
            LODWORD(v155) = v8;
            LODWORD(v156) = 1;
            v135 = (int *)v152;
            v136 = v153;
            v158 = v160;
            v159 = 0x800000000;
            if (v153 >= 9)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158, (uint64_t)v160, v153, 24);
              v137 = v159;
              v138 = v158;
            }
            else
            {
              if (!(_DWORD)v153)
              {
                v143 = 0;
                v138 = v160;
LABEL_217:
                LODWORD(v159) = v143 + v136;
                (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD *))(*a2 + 32))(a2, 77, &v155, 1, v138);
                if (v158 != v160)
                  free(v158);
                v113 = v152;
                goto LABEL_164;
              }
              v137 = 0;
              v138 = v160;
            }
            v139 = 3 * v137;
            v140 = 4 * v136;
            do
            {
              v141 = *v135++;
              v142 = &v138[v139];
              *v142 = v141;
              v142[4] = 0;
              v139 += 3;
              v140 -= 4;
            }
            while (v140);
            v143 = v159;
            goto LABEL_217;
          }
          return 0;
        }
        v12 = 0;
        if ((v25 & 2) != 0 || v34 != 64)
          return v12;
        v134 = 3;
        if ((v25 & 1) == 0)
          v134 = 19;
        if ((v25 & 0x8000000000000000 | (8 * (v25 >> v134))) != 0x80)
          return 0;
LABEL_22:
        v12 = 1;
        LODWORD(v152) = v8;
        LODWORD(v153) = 1;
        LODWORD(v158) = v7;
        LODWORD(v160[0]) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 118, &v152, 1, &v158, 1, 0);
        return v12;
      }
      v155 = v157;
      v156 = 0x400000000;
      v149 = v151;
      v150 = 0x300000000;
      v103 = 3;
      if ((v23 & 1) == 0)
        v103 = 19;
      v152 = v154;
      v153 = 0x400000000;
      sub_1C495A254((unsigned int *)&v152, (unsigned __int16)(v23 >> 3), v23 & 0x8000000000000000 | (8 * (v23 >> v103)) | 1);
      v104 = (uint64_t *)v152;
      v105 = v153;
      v146[0] = v7;
      v146[4] = 0;
      v158 = v160;
      v159 = 0x800000000;
      if (v153 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158, (uint64_t)v160, v153, 16);
        v106 = v159;
        v107 = v158;
      }
      else
      {
        if (!(_DWORD)v153)
        {
          v111 = 0;
          v112 = v160;
          goto LABEL_169;
        }
        v106 = 0;
        v107 = v160;
      }
      v108 = 8 * v105;
      v109 = &v107[2 * v106];
      do
      {
        v110 = *v104++;
        *v109 = v110;
        *((_DWORD *)v109 + 2) = 0;
        v109 += 2;
        v108 -= 8;
      }
      while (v108);
      v111 = v159;
      v112 = v158;
LABEL_169:
      LODWORD(v159) = v111 + v105;
      (*(void (**)(uint64_t *, uint64_t, _QWORD *))(*a2 + 32))(a2, 74, v112);
      v116 = v115;
      if (v158 != v160)
        free(v158);
      v117 = 0;
      for (j = 4; ; j += 32)
      {
        v119 = *v9;
        if ((*v9 & 2) != 0)
          v120 = 0x800000000000000;
        else
          v120 = 0x8000000000000;
        if ((v120 & v119) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v115);
          v119 = *v9;
        }
        if (v117 >= (unsigned __int16)(v119 >> 3))
          break;
        v121 = *v10;
        if ((*v10 & 2) != 0)
          v122 = 0x800000000000000;
        else
          v122 = 0x8000000000000;
        if ((v122 & v121) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v115);
          v121 = *v10;
        }
        if (v117 < (unsigned __int16)(v121 >> 3))
        {
          v123 = *(_DWORD *)(*((_QWORD *)v116 + 4) + j);
          v124 = v150;
          if (v150 >= (unint64_t)HIDWORD(v150))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, (uint64_t)v151, v150 + 1, 4);
            v124 = v150;
          }
          *((_DWORD *)v149 + v124) = v123;
          LODWORD(v150) = v150 + 1;
        }
        ++v117;
      }
      v146[0] = v8;
      v146[2] = 1;
      v125 = (int *)v149;
      v126 = v150;
      v158 = v160;
      v159 = 0x800000000;
      if (v150 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158, (uint64_t)v160, v150, 24);
        v127 = v159;
        v128 = v158;
      }
      else
      {
        if (!(_DWORD)v150)
        {
          v133 = 0;
          v128 = v160;
          goto LABEL_195;
        }
        v127 = 0;
        v128 = v160;
      }
      v129 = 3 * v127;
      v130 = 4 * v126;
      do
      {
        v131 = *v125++;
        v132 = &v128[v129];
        *v132 = v131;
        v132[4] = 0;
        v129 += 3;
        v130 -= 4;
      }
      while (v130);
      v133 = v159;
LABEL_195:
      LODWORD(v159) = v133 + v126;
      (*(void (**)(uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD *))(*a2 + 32))(a2, 77, v146, 1, v128);
      if (v158 != v160)
        free(v158);
      if (v152 != v154)
        free(v152);
      if (v149 != v151)
        free(v149);
      v113 = v155;
      if (v155 == v157)
        return 1;
      goto LABEL_165;
    }
    v144 = v8;
    v145 = v157;
    v155 = v157;
    v156 = 0x400000000;
    v68 = 3;
    if ((v23 & 1) == 0)
      v68 = 19;
    v69 = (void *)(v23 & 0x8000000000000000 | (8 * (v23 >> v68)) | 1);
    v152 = v154;
    v153 = 0x400000000;
    sub_1C495A254((unsigned int *)&v152, (unsigned __int16)(v23 >> 3), (uint64_t)v69);
    v70 = (uint64_t *)v152;
    v71 = v153;
    LODWORD(v149) = v7;
    v151[0] = 0;
    v158 = v160;
    v159 = 0x800000000;
    if (v153 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158, (uint64_t)v160, v153, 16);
      v72 = v159;
      v73 = v158;
    }
    else
    {
      if (!(_DWORD)v153)
      {
        v77 = 0;
        v78 = v160;
        goto LABEL_130;
      }
      v72 = 0;
      v73 = v160;
    }
    v74 = 8 * v71;
    v75 = &v73[2 * v72];
    do
    {
      v76 = *v70++;
      *v75 = v76;
      *((_DWORD *)v75 + 2) = 0;
      v75 += 2;
      v74 -= 8;
    }
    while (v74);
    v77 = v159;
    v78 = v158;
LABEL_130:
    LODWORD(v159) = v77 + v71;
    (*(void (**)(uint64_t *, uint64_t, _QWORD *))(*a2 + 32))(a2, 74, v78);
    v84 = v83;
    if (v158 != v160)
      free(v158);
    v85 = 0;
    for (k = 4; ; k += 32)
    {
      v87 = *v9;
      if ((*v9 & 2) != 0)
        v88 = 0x800000000000000;
      else
        v88 = 0x8000000000000;
      if ((v88 & v87) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v83);
        v87 = *v9;
      }
      if (v85 >= (unsigned __int16)(v87 >> 3))
        break;
      v89 = *(_DWORD *)(*((_QWORD *)v84 + 4) + k);
      v90 = v156;
      if (v156 >= (unint64_t)HIDWORD(v156))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, (uint64_t)v157, v156 + 1, 4);
        v90 = v156;
      }
      *((_DWORD *)v155 + v90) = v89;
      LODWORD(v156) = v156 + 1;
      ++v85;
    }
    v158 = v69;
    LODWORD(v159) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a2 + 32))(a2, 68, &v158, 1, 0, 0, 0);
    v92 = *(_DWORD *)(*(_QWORD *)(v91 + 32) + 4);
    v93 = v156;
    if (v156 >= HIDWORD(v156))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, (uint64_t)v157, v156 + 1, 4);
      v93 = v156;
    }
    *((_DWORD *)v155 + v93) = v92;
    v94 = (v156 + 1);
    LODWORD(v156) = v94;
    LODWORD(v149) = v144;
    LODWORD(v150) = 1;
    v95 = (int *)v155;
    v158 = v160;
    v159 = 0x800000000;
    if (v94 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158, (uint64_t)v160, v94, 24);
      v96 = v159;
      v97 = v158;
    }
    else
    {
      if (!(_DWORD)v94)
      {
        v102 = 0;
        v97 = v160;
LABEL_159:
        LODWORD(v159) = v102 + v94;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD *))(*a2 + 32))(a2, 77, &v149, 1, v97);
        if (v158 != v160)
          free(v158);
        if (v152 != v154)
          free(v152);
        v113 = v155;
LABEL_164:
        if (v113 == v145)
          return 1;
LABEL_165:
        free(v113);
        return 1;
      }
      v96 = 0;
      v97 = v160;
    }
    v98 = 3 * v96;
    v99 = 4 * v94;
    do
    {
      v100 = *v95++;
      v101 = &v97[v98];
      *v101 = v100;
      v101[4] = 0;
      v98 += 3;
      v99 -= 4;
    }
    while (v99);
    v102 = v159;
    goto LABEL_159;
  }
  if (v11 != 129)
    goto LABEL_23;
  if (*v10 == 9)
  {
    v12 = 1;
    LODWORD(v152) = v8;
    LODWORD(v153) = 1;
    LODWORD(v158) = v7;
    LODWORD(v160[0]) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 119, &v152, 1, &v158, 1, 0);
    return v12;
  }
  if (*v10 != 65)
    goto LABEL_23;
  v152 = (void *)129;
  LODWORD(v153) = 0;
  LODWORD(v158) = v7;
  LODWORD(v160[0]) = 0;
  v12 = 1;
  v13 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 257, &v152, 1, &v158, 1, 0);
  v15 = v14;
  v17 = sub_1C4825F50(v10);
  if ((_DWORD)v16 == 1)
  LODWORD(v158) = 1;
  v159 = 0;
  v160[0] = v17;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v158);
  LODWORD(v152) = v8;
  LODWORD(v153) = 1;
  v158 = v13;
  v159 = (uint64_t)v15;
  LODWORD(v160[0]) = 1;
  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a2 + 32))(a2, 119, &v152, 1, &v158, 1, 0);
  return v12;
}

uint64_t sub_1C4956D44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t result;
  int v89;
  const char *v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  const char *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  int v118;
  unint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int *v130;
  int *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;

  v118 = 0;
  v122 = 0;
  v5 = 0;
  v138 = *MEMORY[0x1E0C80C00];
  v6 = 32;
  if (!*(_BYTE *)(*(_QWORD *)(a3[1] + 8) + 1733))
    v6 = 16;
  v120 = v6;
  v7 = (int *)((((v6 >> 4) & 3) << 7) | 1);
  v129 = (uint64_t)v7;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  v9 = 1;
  while (1)
  {
    v128 = 0;
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 272);
    v12 = v8;
    v13 = v8 & 0x7FFFFFFF;
    v14 = (uint64_t *)(v10 + 16 * v13 + 8);
    if (v8 >= 0)
      v14 = (uint64_t *)(v11 + 8 * v8);
    v15 = *v14;
    if (v15)
    {
      v22 = v15;
      if ((*(_DWORD *)v15 & 0x1000000) != 0)
        goto LABEL_17;
      v22 = *(_QWORD *)(v15 + 24);
      if (!v22)
        goto LABEL_7;
      if ((*(_BYTE *)(v22 + 3) & 1) != 0)
      {
LABEL_17:
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 && **(_WORD **)(v23 + 16) == 80 && *(_DWORD *)(v23 + 40) == 2)
        {
LABEL_26:
          v24 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 36);
          v128 = v24;
          if ((v24 & 0x80000000) != 0 && (v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(a2 + 432)))
            v26 = *(int **)(*(_QWORD *)(a2 + 424) + 8 * v25);
          else
            v26 = 0;
          v130 = v26;
          v85 = sub_1C4825F50((unint64_t *)&v130);
          if ((_DWORD)v84 == 1)
          if (v85 >= v120)
            v12 = v128;
          else
            v12 = v8;
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(_QWORD *)(a2 + 272);
          v13 = v12 & 0x7FFFFFFF;
          v8 = v12;
          goto LABEL_7;
        }
        if ((*(_DWORD *)v15 & 0x1000000) != 0)
        {
LABEL_23:
          v23 = *(_QWORD *)(v15 + 8);
          if (!v23 || **(_WORD **)(v23 + 16) != 81 || *(_DWORD *)(v23 + 40) != 2)
            goto LABEL_7;
          goto LABEL_26;
        }
        v22 = *(_QWORD *)(v15 + 24);
        if (!v22)
          goto LABEL_7;
      }
      v15 = v22;
      if ((*(_BYTE *)(v22 + 3) & 1) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
LABEL_7:
    v130 = (int *)&v128;
    v131 = (int *)&v128;
    v132 = (int *)&v128;
    LODWORD(v136) = v8;
    v16 = (uint64_t *)(v10 + 16 * v13 + 8);
    v17 = (uint64_t *)(v11 + 8 * v12);
    if (v8 >= 0)
      v16 = v17;
    if ((v18 = *v16) != 0
      && ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0)
      && (v27 = *(_QWORD *)(v18 + 8)) != 0
      && **(_WORD **)(v27 + 16) == 118
      && *(_DWORD *)(v27 + 40) == 2)
    {
      v19 = *(_DWORD *)(*(_QWORD *)(v27 + 32) + 36);
      v128 = v19;
      if ((v19 & 0x80000000) == 0)
        goto LABEL_36;
    }
    else
    {
      if (!sub_1C4957E98(&v130, a2, (unsigned int *)&v136))
        goto LABEL_43;
      v19 = v128;
      if ((v128 & 0x80000000) == 0)
      {
LABEL_36:
        v21 = 0;
        goto LABEL_37;
      }
    }
    v20 = v19 & 0x7FFFFFFF;
    if (v20 >= *(_DWORD *)(a2 + 432))
      goto LABEL_36;
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v20);
LABEL_37:
    v136 = v21;
    v29 = sub_1C4825F50((unint64_t *)&v136);
    if ((_DWORD)v28 == 1)
    v12 = v29 >= v120 ? v128 : v8;
    v8 = v12;
LABEL_43:
    v123 = 0;
    v30 = sub_1C554C050(v12, a2);
    if (v31)
    {
      v115 = v30;
      v123 = v30;
      goto LABEL_183;
    }
    v32 = sub_1C493DF74(v12, a2, 0);
    if (HIDWORD(v32))
      break;
    v33 = v12 & 0x7FFFFFFF;
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v33 + 8);
    if (v8 >= 0)
      v34 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v12);
    v35 = *v34;
    if (v35 && ((*(_BYTE *)(v35 + 3) & 1) != 0 || (v35 = *(_QWORD *)(v35 + 24)) != 0 && (*(_BYTE *)(v35 + 3) & 1) != 0))
      v36 = *(_QWORD *)(v35 + 8);
    else
      v36 = 0;
    v126 = 0;
    v127 = 0;
    if (sub_1C49578C0(v36))
    {
      v37 = *(_QWORD *)(v36 + 32);
      v38 = *(unsigned int *)(v37 + 36);
      v126 = *(_DWORD *)(v37 + 68);
      v127 = v38;
      v39 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
      if ((int)v38 >= 0)
        v39 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v38);
      v40 = *v39;
      if (v40
        && ((*(_BYTE *)(v40 + 3) & 1) != 0 || (v40 = *(_QWORD *)(v40 + 24)) != 0 && (*(_BYTE *)(v40 + 3) & 1) != 0)
        && (v82 = *(_QWORD *)(v40 + 8)) != 0
        && **(_WORD **)(v82 + 16) == 80)
      {
        v41 = v121;
        if (*(_DWORD *)(v82 + 40) == 2)
        {
          LODWORD(v38) = *(_DWORD *)(*(_QWORD *)(v82 + 32) + 36);
          v127 = v38;
        }
      }
      else
      {
        v41 = v121;
      }
      v121 = v41 & 0xFFFFFFFF00000000;
      v42 = sub_1C493DF74(v38, a2, 0);
      v43 = (unsigned __int16)v42 * v9;
      v44 = v126;
      v45 = HIDWORD(v42);
      if (!v45)
        v43 = 0;
      v5 += v43;
      if (v45)
        goto LABEL_85;
      v46 = sub_1C554C050(v126, a2);
      if (v47)
      {
        v5 += v46 * v9;
LABEL_59:
        v44 = v127;
        goto LABEL_85;
      }
    }
    v130 = &v127;
    v131 = (int *)&v123;
    v132 = &v126;
    v48 = *(_QWORD *)(a2 + 24);
    v49 = (uint64_t *)(v48 + 16 * v33 + 8);
    v50 = *(_QWORD *)(a2 + 272);
    if (v8 >= 0)
      v49 = (uint64_t *)(v50 + 8 * v12);
    v51 = *v49;
    if (v51)
    {
      if ((*(_BYTE *)(v51 + 3) & 1) != 0 || (v51 = *(_QWORD *)(v51 + 24)) != 0 && (*(_BYTE *)(v51 + 3) & 1) != 0)
      {
        v67 = *(_QWORD *)(v51 + 8);
        if (v67)
        {
          if (**(_WORD **)(v67 + 16) == 45 && *(_DWORD *)(v67 + 40) == 3)
          {
            LODWORD(v136) = *(_DWORD *)(*(_QWORD *)(v67 + 32) + 36);
            v68 = sub_1C492DAE4((uint64_t)&v130, a2, (unsigned int *)&v136);
            v69 = *(_QWORD *)(v67 + 32);
            if (v68)
            {
              *v132 = *(_DWORD *)(v69 + 68);
LABEL_98:
              v70 = 0;
              if (v8 < 0 && v33 < *(unsigned int *)(a2 + 432))
                v70 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v33);
              v136 = v70;
              v137 = 0;
              LODWORD(v130) = v127;
              LODWORD(v132) = 0;
              LODWORD(v133) = v126;
              v135 = 0;
              (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int **, uint64_t, _QWORD))(*a3 + 32))(a3, 45, &v136, 1, &v130, 2, 0);
              v44 = *(_DWORD *)(*(_QWORD *)(v71 + 32) + 4);
              v5 += v123 * v9;
              goto LABEL_85;
            }
            *v132 = *(_DWORD *)(v69 + 36);
            LODWORD(v125) = *(_DWORD *)(v69 + 68);
            if ((sub_1C492DAE4((uint64_t)&v130, a2, (unsigned int *)&v125) & 1) != 0)
              goto LABEL_98;
            v48 = *(_QWORD *)(a2 + 24);
            v50 = *(_QWORD *)(a2 + 272);
          }
        }
      }
    }
    v52 = (uint64_t *)(v48 + 16 * v33 + 8);
    if (v8 >= 0)
      v52 = (uint64_t *)(v50 + 8 * v12);
    v53 = *v52;
    if (v53)
    {
      if ((*(_BYTE *)(v53 + 3) & 1) != 0 || (v53 = *(_QWORD *)(v53 + 24)) != 0 && (*(_BYTE *)(v53 + 3) & 1) != 0)
      {
        v72 = *(_QWORD *)(v53 + 8);
        if (v72)
        {
          if (**(_WORD **)(v72 + 16) == 47 && *(_DWORD *)(v72 + 40) == 3)
          {
            v73 = *(_QWORD *)(v72 + 32);
            v127 = *(_DWORD *)(v73 + 36);
            v74 = sub_1C554C050(*(_DWORD *)(v73 + 68), a2);
            if (v75)
            {
              v76 = v74;
              v77 = &v127;
LABEL_110:
              v44 = *v77;
              v9 *= v76;
              goto LABEL_85;
            }
            v86 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v72 + 32) + 36), a2);
            if (v87)
            {
              v76 = v86;
              v77 = (int *)(*(_QWORD *)(v72 + 32) + 68);
              goto LABEL_110;
            }
            v48 = *(_QWORD *)(a2 + 24);
            v50 = *(_QWORD *)(a2 + 272);
          }
        }
      }
    }
    v54 = (uint64_t *)(v48 + 16 * v33 + 8);
    v55 = (uint64_t *)(v50 + 8 * v12);
    if (v8 >= 0)
      v54 = v55;
    v56 = *v54;
    if (v56)
    {
      if ((*(_BYTE *)(v56 + 3) & 1) != 0 || (v56 = *(_QWORD *)(v56 + 24)) != 0 && (*(_BYTE *)(v56 + 3) & 1) != 0)
      {
        v78 = *(_QWORD *)(v56 + 8);
        if (v78)
        {
          if (**(_WORD **)(v78 + 16) == 127 && *(_DWORD *)(v78 + 40) == 3)
          {
            v79 = *(_QWORD *)(v78 + 32);
            v127 = *(_DWORD *)(v79 + 36);
            v80 = sub_1C554C050(*(_DWORD *)(v79 + 68), a2);
            if (v81)
            {
              v9 <<= v80;
              goto LABEL_59;
            }
          }
        }
      }
    }
    v130 = &v127;
    v131 = &v126;
    LODWORD(v136) = v8;
    v57 = sub_1C4957F68((uint64_t)&v130, a2, (unsigned int *)&v136);
    v58 = v122;
    if (!v57 || v122 || v9 != 1)
      goto LABEL_146;
    v59 = *(_QWORD *)(a2 + 24);
    v60 = (uint64_t *)(v59 + 16 * v33 + 8);
    v61 = *(_QWORD *)(a2 + 272);
    if (v8 >= 0)
      v60 = (uint64_t *)(v61 + 8 * v12);
    v62 = *v60;
    if (!v62)
    {
LABEL_145:
      v58 = 0;
      v9 = 1;
      goto LABEL_146;
    }
    while ((*(_BYTE *)(v62 + 3) & 1) != 0)
    {
      v62 = *(_QWORD *)(v62 + 24);
      if (!v62)
        goto LABEL_145;
    }
    while (1)
    {
      v62 = *(_QWORD *)(v62 + 24);
      if (!v62)
        break;
      if ((*(_BYTE *)(v62 + 3) & 1) == 0)
        goto LABEL_145;
    }
    v44 = v127;
    v63 = (uint64_t *)(v59 + 16 * (v127 & 0x7FFFFFFF) + 8);
    v64 = (uint64_t *)(v61 + 8 * v127);
    if (v127 >= 0)
      v63 = v64;
    v65 = *v63;
    if (v65
      && ((*(_BYTE *)(v65 + 3) & 1) != 0 || (v65 = *(_QWORD *)(v65 + 24)) != 0 && (*(_BYTE *)(v65 + 3) & 1) != 0)
      && (v83 = *(_QWORD *)(v65 + 8)) != 0
      && **(_WORD **)(v83 + 16) == 127
      && *(_DWORD *)(v83 + 40) == 3)
    {
      v66 = &v126;
    }
    else
    {
      v66 = &v127;
      v44 = v126;
    }
    v118 = *v66;
    v122 = 1;
    v9 = 1;
LABEL_85:
    v8 = v44;
  }
  v115 = (unsigned __int16)v32;
LABEL_183:
  v130 = v7;
  LODWORD(v131) = 0;
  sub_1C5544694((uint64_t)a3, (unint64_t *)&v130, 0);
  v8 = *(_DWORD *)(*(_QWORD *)(v116 + 32) + 4);
  v5 += v115 * v9;
  v58 = v122;
LABEL_146:
  result = a1;
  if (v5 < 0x8000 && (v9 & 0x8000000000000000) == 0)
  {
    v89 = v58;
    v91 = sub_1C4825F50((unint64_t *)&v129);
    if ((_DWORD)v90 == 1)
    LODWORD(v131) = v91;
    if (v91 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v130, -1, 1);
      if (v131 >= 0x41)
        v117 = (unint64_t *)v130;
      else
        v117 = (unint64_t *)&v130;
      v92 = *v117;
      if (v131 >= 0x41 && v130)
        MEMORY[0x1CAA32F9C]();
    }
    else if (v91)
    {
      v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v91;
    }
    else
    {
      v92 = 0;
    }
    if (v8 < 0 && (v8 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
      v93 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF));
    else
      v93 = 0;
    v94 = v92 & v9;
    v125 = v93;
    v95 = v129;
    if (v93 != v129)
    {
      if ((v93 & 0xFFFFFFFFFFFFFFF9) != 0 && (v93 & 6) == 2)
      {
        v97 = sub_1C4825F50(&v125);
        if ((_DWORD)v96 == 1)
        v136 = (8 * v97) | 1;
        v137 = 0;
        LODWORD(v130) = v8;
        LODWORD(v132) = 0;
        sub_1C5546EF4(a3, &v136, (int *)&v130);
        v8 = *(_DWORD *)(*(_QWORD *)(v98 + 32) + 4);
        v95 = v129;
      }
      v136 = v95;
      v137 = 0;
      LODWORD(v130) = v8;
      LODWORD(v132) = 0;
      sub_1C5546B4C(a3, 126, (unint64_t *)&v136, (int *)&v130);
      v8 = *(_DWORD *)(*(_QWORD *)(v99 + 32) + 4);
    }
    v100 = v92 & v5;
    if (v94 >= 2)
    {
      v101 = v129;
      v123 = v129;
      v124 = 0;
      v102 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v123, v94);
      v136 = v101;
      v137 = 0;
      LODWORD(v130) = v8;
      LODWORD(v132) = 0;
      v133 = v102;
      v134 = v103;
      v135 = 1;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int **, uint64_t, _QWORD))(*a3 + 32))(a3, 47, &v136, 1, &v130, 2, 0);
      v8 = *(_DWORD *)(*(_QWORD *)(v104 + 32) + 4);
    }
    v105 = v118;
    if (v100 >= 1)
    {
      v106 = v129;
      v123 = v129;
      v124 = 0;
      v107 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v123, v100);
      v136 = v106;
      v137 = 0;
      LODWORD(v130) = v8;
      LODWORD(v132) = 0;
      v133 = v107;
      v134 = v108;
      v135 = 1;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int **, uint64_t, _QWORD))(*a3 + 32))(a3, 45, &v136, 1, &v130, 2, 0);
      v8 = *(_DWORD *)(*(_QWORD *)(v109 + 32) + 4);
    }
    if (v89)
    {
      if (v118 < 0 && (v118 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
        v110 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v118 & 0x7FFFFFFF));
      else
        v110 = 0;
      if (v110 != v129)
      {
        v136 = v129;
        v137 = 0;
        LODWORD(v130) = v118;
        LODWORD(v132) = 0;
        sub_1C5546B4C(a3, 126, (unint64_t *)&v136, (int *)&v130);
        v105 = *(_DWORD *)(*(_QWORD *)(v111 + 32) + 4);
        v110 = v129;
      }
      v136 = v110;
      v137 = 0;
      LODWORD(v130) = v105;
      LODWORD(v132) = 0;
      LODWORD(v133) = v8;
      v135 = 0;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int **, uint64_t, _QWORD))(*a3 + 32))(a3, 45, &v136, 1, &v130, 2, 0);
      v8 = *(_DWORD *)(*(_QWORD *)(v112 + 32) + 4);
    }
    v113 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
    if (v8 >= 0)
      v113 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v8);
    v114 = *v113;
    if (v114
      && ((*(_BYTE *)(v114 + 3) & 1) != 0 || (v114 = *(_QWORD *)(v114 + 24)) != 0 && (*(_BYTE *)(v114 + 3) & 1) != 0))
    {
      return *(_QWORD *)(v114 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1C49578C0(uint64_t a1)
{
  int v1;
  _BOOL8 v2;
  uint64_t i;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t j;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t k;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int v31;
  unint64_t v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  void *v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  void (**v43)();
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  _QWORD v48[8];
  int v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  _DWORD v60[2];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v1 = **(unsigned __int16 **)(a1 + 16);
  if (v1 != 66)
    return v1 == 45;
  for (i = 0; i != 64; i += 32)
  {
    v6 = (char *)&v53 + i;
    *((_DWORD *)v6 + 2) = 1;
    *(_QWORD *)v6 = 0;
    *((_DWORD *)v6 + 6) = 1;
    *((_QWORD *)v6 + 2) = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v45 = v48;
  v46 = 4;
  v47 = 0;
  v43 = (void (**)())off_1E816DB00;
  v44 = v48;
  v48[4] = v7;
  v48[5] = *(_QWORD *)(v7 + 40);
  v48[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 120))(*(_QWORD *)(v7 + 16));
  v48[7] = *(_QWORD *)(*(_QWORD *)v7 + 40) + 272;
  v49 = 6;
  v50 = 1;
  v8 = &v51;
  for (j = 15; j != 95; j += 5)
    LODWORD((&v43)[j]) = -1;
  sub_1C54EB4A0((uint64_t)&v43, (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 36), (uint64_t)&v39);
  if (v54 >= 0x41 && v53)
    MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
  v10 = v39;
  v53 = v39;
  v11 = v40;
  v54 = v40;
  v40 = 0;
  if (v56 >= 0x41 && v55)
  {
    MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
    v55 = v41;
    v56 = v42;
    v42 = 0;
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
  else
  {
    v55 = v41;
    v56 = v42;
  }
  sub_1C54EB4A0((uint64_t)&v43, (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 68), (uint64_t)&v39);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v12 = v39;
  v57 = v39;
  v13 = v40;
  v58 = v40;
  v40 = 0;
  if (v60[0] >= 0x41u && v59)
  {
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    v59 = v41;
    v60[0] = v42;
    v42 = 0;
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
  else
  {
    v59 = v41;
    v60[0] = v42;
  }
  v38 = v11;
  if (v11 > 0x40)
  {
    v37 = (void *)operator new[]();
    memcpy(v37, (const void *)v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v37);
    LODWORD(v11) = v38;
    v15 = (unint64_t)v37;
  }
  else
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (!(_DWORD)v11)
      v14 = 0;
    v15 = v14 & ~v10;
  }
  v36 = v13;
  if (v13 <= 0x40)
  {
    if ((_DWORD)v13)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
    else
      v16 = 0;
    v17 = v16 & ~v12;
    goto LABEL_24;
  }
  v35 = (void *)operator new[]();
  memcpy(v35, (const void *)v12, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v35);
  v18 = v36;
  v17 = (unint64_t)v35;
  if (v36 < 0x41)
  {
LABEL_24:
    v2 = (v17 & v15) == 0;
    goto LABEL_25;
  }
  v29 = 0;
  v30 = ((unint64_t)v36 + 63) >> 6;
  do
  {
    *(_QWORD *)(v17 + v29) &= *(_QWORD *)(v15 + v29);
    v29 += 8;
  }
  while (8 * v30 != v29);
  v31 = 0;
  do
  {
    if (v30-- < 1)
      break;
    v33 = *(_QWORD *)(v17 + 8 * v30);
    v31 += __clz(v33);
  }
  while (!v33);
  v2 = 0;
  v34 = v18 | 0xFFFFFFC0;
  if ((v18 & 0x3F) == 0)
    v34 = 0;
  if (v18 - v31 - v34 <= 0x40)
    v2 = *(_QWORD *)v17 == 0;
  if (v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
LABEL_25:
  if (v11 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  v43 = (void (**)())off_1E816DB00;
  v19 = v50;
  if ((v50 & 1) != 0)
  {
    v20 = 16;
    goto LABEL_30;
  }
  v20 = v52;
  if (v52)
  {
    v8 = v51;
LABEL_30:
    v21 = 40 * v20;
    v22 = v8 + 2;
    do
    {
      if (*((_DWORD *)v22 - 4) <= 0xFFFFFFFD)
      {
        if (*((_DWORD *)v22 + 4) >= 0x41u)
        {
          v24 = v22[1];
          if (v24)
            MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v22 >= 0x41u)
        {
          v23 = *(v22 - 1);
          if (v23)
            MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        }
      }
      v22 += 5;
      v21 -= 40;
    }
    while (v21);
    v19 = v50;
  }
  if ((v19 & 1) == 0)
    MEMORY[0x1CAA32FB4](v51, 8);
  v43 = off_1E7FA1810;
  if (v45 != v44)
    free(v45);
  for (k = 0; k != -16; k -= 8)
  {
    v26 = (char *)&v53 + k * 4;
    if (v60[k] >= 0x41u)
    {
      v27 = *((_QWORD *)v26 + 6);
      if (v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    }
    if (*((_DWORD *)v26 + 10) >= 0x41u)
    {
      v28 = *((_QWORD *)v26 + 4);
      if (v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
  }
  return v2;
}

uint64_t sub_1C4957E98(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  v7 = v5;
  if (((*(_BYTE *)(v5 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v5 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && **(_WORD **)(v8 + 16) == 126
    && *(_DWORD *)(v8 + 40) == 2)
  {
    ++a1;
  }
  else
  {
    if ((*(_BYTE *)(v5 + 3) & 1) == 0)
    {
      v5 = *(_QWORD *)(v5 + 24);
      if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
        return 0;
    }
    v8 = *(_QWORD *)(v5 + 8);
    if (!v8 || **(_WORD **)(v8 + 16) != 124 || *(_DWORD *)(v8 + 40) != 2)
      return 0;
  }
  **a1 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 36);
  return 1;
}

uint64_t sub_1C4957F68(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 45 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C4957FF8(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  llvm::MachineInstr *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  llvm::MachineInstr *v33;
  llvm::MachineInstr *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  llvm::MachineInstr *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::MachineInstr *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v58 = 513;
  v59 = 0;
  LODWORD(v49) = a4;
  LODWORD(v51) = 0;
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 80, &v58, 1, &v49, 1, 0);
  v58 = 257;
  v59 = 0;
  v49 = v9;
  v50 = v10;
  LODWORD(v51) = 1;
  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 119, &v58, 1, &v49, 1, 0);
  v12 = *(unsigned int *)(*(_QWORD *)(v11 + 32) + 4);
  if (!a5)
  {
    v18 = v11;
    v19 = sub_1C4884088(*(_QWORD *)(a3 + 32));
    if (!v19)
      return *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
    v58 = 257;
    v59 = 0;
    LODWORD(v49) = v12;
    LODWORD(v51) = 0;
    v47 = 257;
    v48 = 0;
    v52 = sub_1C5544694((uint64_t)a2, &v47, v19);
    v53 = v20;
    v54 = 1;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 128, &v58, 1, &v49, 2, 0);
LABEL_25:
    v18 = v21;
    return *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
  }
  v13 = a2[1];
  v14 = *(_QWORD *)(v13 + 48);
  v15 = *(_QWORD *)(v13 + 56);
  if (!v14)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v13 + 8) + 216))(*(_QWORD *)(v13 + 8), v13 + 128, a2[1]);
    *(_QWORD *)(v13 + 48) = v14;
  }
  v17 = 0;
  if ((*(_WORD *)(*(_QWORD *)v13 + 18) & 0x3FF0) != 0x640)
  {
    if (*(_BYTE *)(*(_QWORD *)(v13 + 8) + 1687))
    {
      v16 = *(_QWORD *)(*(_QWORD *)v13 + 40);
      v49 = (uint64_t)"agx.stack_oob";
      LOWORD(v53) = 259;
      if (llvm::Module::getNamedMetadata(v16, (uint64_t)&v49))
        v17 = 1;
    }
  }
  if ((*(_WORD *)(*(_QWORD *)v13 + 18) & 0x3F70) != 0
    && (*(_WORD *)(*(_QWORD *)v13 + 18) & 0x3FF0) != 0xFF0
    && !*(_BYTE *)(v15 + 62))
  {
    if (*(_BYTE *)(v14 + 456))
    {
      if (*(_BYTE *)(v14 + 455))
        goto LABEL_16;
LABEL_29:
      if (!v17)
        return v12;
      v22 = sub_1C4861064((uint64_t)a2, a1);
      goto LABEL_17;
    }
    v46 = sub_1C495C2B4(v13);
    *(_BYTE *)(v14 + 455) = v46;
    *(_BYTE *)(v14 + 456) = 1;
    if (!v46)
      goto LABEL_29;
  }
LABEL_16:
  v22 = sub_1C4861064((uint64_t)a2, a1);
  v58 = 257;
  v59 = 0;
  LODWORD(v49) = v12;
  LODWORD(v51) = 0;
  LODWORD(v52) = v22;
  v54 = 0;
  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 45, &v58, 1, &v49, 2, 0);
  v12 = *(unsigned int *)(*(_QWORD *)(v23 + 32) + 4);
  if (v17)
  {
LABEL_17:
    v49 = 257;
    LODWORD(v50) = 0;
    v24 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    v26 = *(_QWORD *)(v24 + 24);
    v25 = (unint64_t *)(v24 + 24);
    if ((v26 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v28 = sub_1C4825F50(v25) + 7;
      if ((_DWORD)v27 == 1)
      v29 = (v28 >> 3);
    }
    else
    {
      v29 = 0xFFFFFFFFLL;
    }
    sub_1C5544694((uint64_t)a2, (unint64_t *)&v49, v29);
    v31 = v30;
    LODWORD(v58) = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1, 257, "", 0);
    v32 = sub_1C5547D24(a2, 2681, (int *)&v58, 1, 0);
    v34 = v33;
    v50 = 0;
    v51 = 0;
    LODWORD(v49) = 0;
    HIDWORD(v49) = v12;
    v52 = 0;
    llvm::MachineInstr::addOperand(v33, v32, (const llvm::MachineOperand *)&v49);
    v35 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 4);
    v50 = 0;
    v51 = 0;
    LODWORD(v49) = 0;
    HIDWORD(v49) = v35;
    v52 = 0;
    llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v49);
    v36 = *(_DWORD *)(a3 + 28);
    v47 = 257;
    v48 = 0;
    if (v36)
      v37 = 32;
    else
      v37 = 16;
    v38 = sub_1C5544694((uint64_t)a2, &v47, v37);
    v58 = 257;
    v59 = 0;
    LODWORD(v49) = v22;
    LODWORD(v51) = 0;
    v52 = v38;
    v53 = v39;
    v54 = 1;
    v40 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 46, &v58, 1, &v49, 2, 0);
    v42 = v41;
    v58 = 257;
    v59 = 0;
    LODWORD(v49) = 37;
    LODWORD(v51) = 2;
    v52 = (uint64_t)v32;
    v53 = v34;
    v54 = 1;
    v55 = v40;
    v56 = v41;
    v57 = 1;
    v43 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 134, &v58, 1, &v49, 3, 0);
    v58 = 257;
    v59 = 0;
    v49 = v43;
    v50 = v44;
    LODWORD(v51) = 1;
    LODWORD(v52) = v12;
    v54 = 0;
    v55 = v40;
    v56 = v42;
    v57 = 1;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a2 + 32))(a2, 136, &v58, 1, &v49, 3, 0);
    goto LABEL_25;
  }
  return v12;
}

uint64_t sub_1C49584A8(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 81 || *(_DWORD *)(v9 + 40) != 2)
    return 0;
  v10 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v11 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
  v12 = (uint64_t *)(v5 + 8 * v10);
  if ((int)v10 >= 0)
    v11 = v12;
  v13 = *v11;
  if (!v13)
    return 0;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
  {
    v13 = *(_QWORD *)(v13 + 24);
    if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
      return 0;
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14 || **(_WORD **)(v14 + 16) != 126 || *(_DWORD *)(v14 + 40) != 2)
    return 0;
  **a1 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
  return 1;
}

uint64_t sub_1C4958594(_DWORD **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v5 + 8 * v3);
  else
    v6 = (uint64_t *)(v4 + 16 * (v3 & 0x7FFFFFFF) + 8);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 119 || *(_DWORD *)(v9 + 40) != 2)
    return 0;
  v10 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
  v11 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
  v12 = (uint64_t *)(v5 + 8 * v10);
  if ((int)v10 >= 0)
    v11 = v12;
  v13 = *v11;
  if (!v13)
    return 0;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
  {
    v13 = *(_QWORD *)(v13 + 24);
    if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
      return 0;
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14 || **(_WORD **)(v14 + 16) != 80 || *(_DWORD *)(v14 + 40) != 2)
    return 0;
  **a1 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
  return 1;
}

uint64_t sub_1C4958680(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  uint64_t v37;
  uint64_t v38;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v4 = *v3;
  if (v4)
  {
    v37 = *(_QWORD *)(a2 + 24);
    v38 = *(_QWORD *)(a2 + 272);
    while (1)
    {
      if ((*(_BYTE *)(v4 + 3) & 1) == 0)
      {
        v4 = *(_QWORD *)(v4 + 24);
        if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
          return 0;
      }
      result = 0;
      if (a3 > 3)
        return result;
      v6 = *(_QWORD *)(v4 + 8);
      if (!v6)
        return result;
      v7 = *(unsigned int **)(v6 + 32);
      v8 = v7[1];
      v9 = (uint64_t *)(v38 + 8 * v8);
      if ((int)v8 < 0)
        v9 = (uint64_t *)(v37 + 16 * (v8 & 0x7FFFFFFF) + 8);
      v10 = *v9;
      if ((*(_BYTE *)(v10 + 3) & 1) == 0)
        v10 = *(_QWORD *)(v10 + 24);
      v11 = *(_QWORD *)(v10 + 8);
      if (**(_WORD **)(v11 + 16) == 121)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 48);
        if (v29)
        {
          if (*(_UNKNOWN **)(v29 + 32) == &unk_1C866F1C0)
            v30 = *(_QWORD *)(v29 + 40);
          else
            v30 = v29 + 24;
          return (*(_BYTE *)(v30 + 28) & 8) == 0;
        }
      }
      result = 0;
      v12 = **(unsigned __int16 **)(v6 + 16);
      if (v12 > 0xB1)
      {
        if (v12 - 178 >= 2)
        {
          if (v12 - 187 >= 2)
          {
            if (v12 != 336)
              return result;
LABEL_48:
            ++a3;
            result = sub_1C4958680(v7[33], a2);
            if (!(_DWORD)result)
              return result;
            v15 = v7 + 41;
            goto LABEL_52;
          }
LABEL_28:
          ++a3;
          result = sub_1C4958680(v7[9], a2);
          if (!(_DWORD)result)
            return result;
          v15 = v7 + 17;
          goto LABEL_52;
        }
        v15 = v7 + 9;
        ++a3;
      }
      else if (**(unsigned __int16 **)(v6 + 16) <= 0xA2u)
      {
        if (v12 == 51)
          goto LABEL_48;
        if (v12 != 136)
        {
          if (v12 != 116)
            return result;
          v31 = *(unsigned int *)(v6 + 40);
          if ((_DWORD)v31)
          {
            v32 = 0;
            v33 = v7;
            while (1)
            {
              v34 = *(unsigned __int8 *)v33;
              v33 += 8;
              if (v34 == 17)
                break;
              if (v31 == ++v32)
                goto LABEL_65;
            }
          }
          else
          {
LABEL_65:
            LODWORD(v32) = -1;
          }
          return v7[8 * v32 + 4] == 2131;
        }
        v16 = v7[9];
        v17 = (uint64_t *)(v38 + 8 * v16);
        if ((int)v16 < 0)
          v17 = (uint64_t *)(v37 + 16 * (v16 & 0x7FFFFFFF) + 8);
        v18 = *v17;
        if ((*(_BYTE *)(v18 + 3) & 1) == 0)
          v18 = *(_QWORD *)(v18 + 24);
        v19 = *(_QWORD *)(v18 + 8);
        v20 = **(unsigned __int16 **)(v19 + 16);
        if (v20 == 179 || v20 == 119)
        {
          v21 = *(unsigned int *)(*(_QWORD *)(v19 + 32) + 36);
          v22 = (uint64_t *)(v38 + 8 * v21);
          if ((int)v21 < 0)
            v22 = (uint64_t *)(v37 + 16 * (v21 & 0x7FFFFFFF) + 8);
          v23 = *v22;
          if ((*(_BYTE *)(v23 + 3) & 1) == 0)
            v23 = *(_QWORD *)(v23 + 24);
          v19 = *(_QWORD *)(v23 + 8);
          LOWORD(v20) = **(_WORD **)(v19 + 16);
        }
        if ((v20 & 0xFFFE) != 0x86)
          return 0;
        v24 = *(_QWORD *)(v19 + 32);
        ++a3;
        result = sub_1C4958680(*(unsigned int *)(v24 + 68), a2);
        if (!(_DWORD)result)
          return result;
        v15 = (unsigned int *)(v24 + 100);
      }
      else
      {
        switch(v12)
        {
          case 0xA3u:
            goto LABEL_28;
          case 0xA5u:
            v25 = v7[17];
            v15 = v7 + 17;
            v26 = *(v15 - 8);
            if ((_DWORD)v26 == v25)
              return 1;
            ++a3;
            if ((sub_1C4958680(v26, a2) & 1) == 0)
              return 0;
            break;
          case 0xA6u:
            v13 = v7[9];
            v14 = v7[17];
            if ((_DWORD)v13 == (_DWORD)v14)
              return 1;
            ++a3;
            result = sub_1C4958680(v13, a2);
            if (!(_DWORD)result)
              return result;
            result = sub_1C4958680(v14, a2);
            if (!(_DWORD)result)
              return result;
            v15 = v7 + 25;
            break;
          default:
            return result;
        }
      }
LABEL_52:
      result = 0;
      v27 = *v15;
      v28 = (uint64_t *)(v38 + 8 * v27);
      if ((int)v27 < 0)
        v28 = (uint64_t *)(v37 + 16 * (v27 & 0x7FFFFFFF) + 8);
      v4 = *v28;
      if (!v4)
        return result;
    }
  }
  return 0;
}

BOOL sub_1C4958A08(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void *v9;
  const char *v10;
  unsigned int v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[32];
  void *v51;
  uint64_t v52;
  _QWORD v53[17];

  v53[16] = *MEMORY[0x1E0C80C00];
  v47 = a4;
  if (a1 < 0 && (a1 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a2 + 432))
    v9 = *(void **)(*(_QWORD *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  else
    v9 = 0;
  v51 = v9;
  v11 = sub_1C4825F50((unint64_t *)&v51);
  if ((_DWORD)v10 == 1)
  v12 = v11;
  v14 = sub_1C4825F50((unint64_t *)&v47);
  if ((_DWORD)v13 == 1)
  v15 = v12 % v14;
  if (!(v12 % v14))
  {
    v18 = sub_1C4825F50((unint64_t *)&v47);
    if ((_DWORD)v17 == 1)
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
    v20 = v12 / v18;
    if (a1 >= 0)
      v19 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
    v21 = *v19;
    if ((*(_BYTE *)(v21 + 3) & 1) == 0)
      v21 = *(_QWORD *)(v21 + 24);
    v22 = *(_QWORD *)(v21 + 8);
    v23 = **(unsigned __int16 **)(v22 + 16);
    if (v23 == 76)
    {
      if (*(_DWORD *)(v22 + 40) == (_DWORD)v20 + 1)
      {
        if ((_DWORD)v20)
        {
          v27 = 0;
          v28 = *(_DWORD *)(a5 + 8);
          v29 = 32 * v20;
          do
          {
            v30 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + v27 + 36);
            if (v28 >= *(_DWORD *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v28 + 1, 4);
              v28 = *(_DWORD *)(a5 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v28) = v30;
            v28 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 8) = v28;
            v27 += 32;
          }
          while (v29 != v27);
        }
        return v15 == 0;
      }
    }
    else if (v23 == 68)
    {
      v51 = v47;
      LODWORD(v52) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 68, &v51, 1, 0, 0, 0);
      if ((_DWORD)v20)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
        v26 = *(_DWORD *)(a5 + 8);
        do
        {
          if (v26 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v26 + 1, 4);
            v26 = *(_DWORD *)(a5 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a5 + 4 * v26) = v25;
          v26 = *(_DWORD *)(a5 + 8) + 1;
          *(_DWORD *)(a5 + 8) = v26;
          LODWORD(v20) = v20 - 1;
        }
        while ((_DWORD)v20);
      }
      return v15 == 0;
    }
    v48 = v50;
    v49 = 0x400000000;
    sub_1C495A254((unsigned int *)&v48, v20, (uint64_t)v47);
    v31 = (uint64_t *)v48;
    v32 = v49;
    v51 = v53;
    v52 = 0x800000000;
    if (v49 >= 9)
    {
      v46 = (uint64_t *)v48;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v49, 16);
      v31 = v46;
      v33 = v52;
      v34 = v51;
    }
    else
    {
      if (!(_DWORD)v49)
      {
        v38 = 0;
        v39 = v53;
        goto LABEL_39;
      }
      v33 = 0;
      v34 = v53;
    }
    v35 = 8 * v32;
    v36 = &v34[2 * v33];
    do
    {
      v37 = *v31++;
      *v36 = v37;
      *((_DWORD *)v36 + 2) = 0;
      v36 += 2;
      v35 -= 8;
    }
    while (v35);
    v38 = v52;
    v39 = v51;
LABEL_39:
    LODWORD(v52) = v38 + v32;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 32))(a3, 74, v39);
    v41 = v40;
    if (v51 == v53)
    {
      if ((_DWORD)v20)
        goto LABEL_41;
    }
    else
    {
      free(v51);
      if ((_DWORD)v20)
      {
LABEL_41:
        v42 = 0;
        v43 = *(_DWORD *)(a5 + 8);
        v44 = 32 * v20;
        do
        {
          v45 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + v42 + 4);
          if (v43 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v43 + 1, 4);
            v43 = *(_DWORD *)(a5 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a5 + 4 * v43) = v45;
          v43 = *(_DWORD *)(a5 + 8) + 1;
          *(_DWORD *)(a5 + 8) = v43;
          v42 += 32;
        }
        while (v44 != v42);
      }
    }
    if (v48 != v50)
      free(v48);
  }
  return v15 == 0;
}

_QWORD *sub_1C4958E20(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 32 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C614723C(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C614723C(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  result = (_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_1C48623F0((uint64_t)result, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_1C4958EC4(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int16 *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v6 = (unsigned __int16 *)a1[2];
  v7 = *v6;
  if (v7 == 91)
  {
    v8 = a1[6];
    if (v8 < 8)
      return 0;
    if ((v8 & 7) != 0)
    {
      v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
      v10 = (a1[6] & 7) != 3 || v9 == 0;
      if (v10 || *v9 != 1)
        return 0;
    }
    else
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8;
    }
    if ((v8 & 7) != 0)
    {
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v11 = v8 & 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v13 = *(_QWORD *)(v11 + 24);
    v12 = (unint64_t *)(v11 + 24);
    if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v15 = (sub_1C4825F50(v12) + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((_DWORD)v14 == 1)
      {
        v21 = v15;
        v15 = v21;
      }
      if (v15 == a3)
        return 1;
      v6 = (unsigned __int16 *)a1[2];
    }
    v7 = *v6;
  }
  if (v7 != 124)
    return 0;
  v17 = *(_DWORD *)(a1[4] + 36);
  if ((v17 & 0x80000000) == 0)
    return 0;
  v18 = v17 & 0x7FFFFFFF;
  if (v18 >= *(_DWORD *)(a2 + 432))
    return 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v18);
  if ((v22 & 1) == 0)
    return 0;
  v20 = sub_1C4825F50(&v22);
  if ((_DWORD)v19 == 1)
  return v20 == a3;
}

BOOL sub_1C4959018(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int16 *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v6 = (unsigned __int16 *)a1[2];
  v7 = *v6;
  if (v7 == 92)
  {
    v8 = a1[6];
    if (v8 < 8)
      return 0;
    if ((v8 & 7) != 0)
    {
      v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
      v10 = (a1[6] & 7) != 3 || v9 == 0;
      if (v10 || *v9 != 1)
        return 0;
    }
    else
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8;
    }
    if ((v8 & 7) != 0)
    {
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v11 = v8 & 0xFFFFFFFFFFFFFFF8;
      a1[6] = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v13 = *(_QWORD *)(v11 + 24);
    v12 = (unint64_t *)(v11 + 24);
    if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v15 = (sub_1C4825F50(v12) + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((_DWORD)v14 == 1)
      {
        v22 = v15;
        v15 = v22;
      }
      if (v15 == a3)
        return 1;
      v6 = (unsigned __int16 *)a1[2];
    }
    v7 = *v6;
  }
  if (v7 != 126)
    return 0;
  v17 = a1[4];
  if (*(_BYTE *)(v17 + 32))
    return 0;
  v18 = *(_DWORD *)(v17 + 36);
  if ((v18 & 0x80000000) == 0)
    return 0;
  v19 = v18 & 0x7FFFFFFF;
  if (v19 >= *(_DWORD *)(a2 + 432))
    return 0;
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v19);
  if ((v23 & 1) == 0)
    return 0;
  v21 = sub_1C4825F50(&v23);
  if ((_DWORD)v20 == 1)
  return v21 == a3;
}

unint64_t sub_1C4959174(llvm::APInt *a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;

  v1 = *((_DWORD *)a1 + 2);
  v2 = v1 - 1;
  if (v1 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * (v2 >> 6)) >> v2) & 1) != 0)
      return llvm::APInt::countLeadingOnesSlowCase(a1);
    else
      return llvm::APInt::countLeadingZerosSlowCase(a1);
  }
  else
  {
    v3 = *(_QWORD *)a1;
    if (((*(_QWORD *)a1 >> v2) & 1) != 0)
    {
      if (v1)
        return __clz(~(v3 << -(char)v1));
      else
        return 0;
    }
    else
    {
      return v1 + __clz(v3) - 64;
    }
  }
}

uint64_t sub_1C49591DC(llvm::APInt *a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  int v5;

  v1 = *((_DWORD *)a1 + 2);
  v2 = v1 - 1;
  if (v1 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * (v2 >> 6)) >> v2) & 1) == 0)
    {
      v3 = llvm::APInt::countLeadingZerosSlowCase(a1) == v1;
      goto LABEL_7;
    }
    return 0;
  }
  if (((*(_QWORD *)a1 >> v2) & 1) != 0)
    return 0;
  v3 = *(_QWORD *)a1 == 0;
LABEL_7:
  v5 = v3;
  return v5 ^ 1u;
}

void sub_1C4959244(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  llvm::MachineFunction *v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  llvm::MachineFunction *v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  llvm::MachineFunction *v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  llvm::MachineFunction *v65;
  unint64_t *v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[4];
  unsigned __int8 *v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;

  v10 = *(_QWORD *)(a1 + 24);
  v134 = 0;
  v11 = *(_QWORD *)(v10 + 32);
  v129[0] = &off_1E816EC08;
  v129[1] = v11;
  v129[3] = *(_QWORD *)(v11 + 40);
  v129[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 104))(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(a1 + 24);
  v132 = (unint64_t *)a1;
  v133 = 0;
  v130 = 0;
  v131 = v12;
  if ((unsigned __int8 **)(a1 + 56) != &v130)
  {
    v13 = *(unsigned __int8 **)(a1 + 56);
    v130 = v13;
    if (v13)
      llvm::MetadataTracking::track((uint64_t)&v130, v13, 2);
  }
  if (a2 == 3)
  {
    v14 = a5 - 7;
    if (a3 < 2 || !a4)
    {
      if (v14 >= 3)
        v15 = 8260;
      else
        v15 = 8261;
      v17 = sub_1C55437B8(v129, v15);
      v18 = (unint64_t *)v16;
      v19 = v132;
      v20 = *(_QWORD *)(v131 + 40);
      *(_QWORD *)(v16 + 24) = v20;
      v21 = *(_QWORD *)(v20 + 32);
      v22 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v22)
      {
        v87 = *(_QWORD *)(v16 + 32);
        v88 = *(_QWORD *)(v21 + 40);
        v89 = 32 * v22;
        do
        {
          if (!*(_BYTE *)v87)
          {
            v90 = *(unsigned int *)(v87 + 4);
            if ((int)v90 >= 0)
              v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
            else
              v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
            v92 = *v91;
            if (*v91)
            {
              v93 = *(_QWORD *)(v92 + 16);
              *(_QWORD *)(v92 + 16) = v87;
              *(_QWORD *)(v87 + 16) = v93;
              if ((*(_BYTE *)(v87 + 3) & 1) != 0)
              {
                *(_QWORD *)(v87 + 24) = v92;
              }
              else
              {
                *(_QWORD *)(v87 + 24) = 0;
                v91 = (uint64_t *)(v93 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v87 + 16) = v87;
              *(_QWORD *)(v87 + 24) = 0;
            }
            *v91 = v87;
          }
          v87 += 32;
          v89 -= 32;
        }
        while (v89);
      }
      v23 = *(_QWORD *)(v21 + 728);
      if (v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v16);
      v24 = *v19 & 0xFFFFFFFFFFFFFFF8;
      *v18 = v24 | *v18 & 7;
      v18[1] = (unint64_t)v19;
      *(_QWORD *)(v24 + 8) = v18;
      *v19 = *v19 & 7 | (unint64_t)v18;
      if (v133)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v18);
      v135 = 1;
      v136 = 0;
      v137 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v135);
      v135 = 1;
      v136 = 0;
      v137 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v135);
      if (a3 < 2)
        goto LABEL_65;
      if (v14 >= 3)
        v25 = 505;
      else
        v25 = 506;
      sub_1C55437B8(v129, v25);
      v27 = (unint64_t *)v26;
      v28 = v132;
      v29 = *(_QWORD *)(v131 + 40);
      *(_QWORD *)(v26 + 24) = v29;
      v30 = *(_QWORD *)(v29 + 32);
      v31 = *(unsigned int *)(v26 + 40);
      if ((_DWORD)v31)
      {
        v108 = *(_QWORD *)(v26 + 32);
        v109 = *(_QWORD *)(v30 + 40);
        v110 = 32 * v31;
        do
        {
          if (!*(_BYTE *)v108)
          {
            v111 = *(unsigned int *)(v108 + 4);
            if ((int)v111 >= 0)
              v112 = (uint64_t *)(*(_QWORD *)(v109 + 272) + 8 * v111);
            else
              v112 = (uint64_t *)(*(_QWORD *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
            v113 = *v112;
            if (*v112)
            {
              v114 = *(_QWORD *)(v113 + 16);
              *(_QWORD *)(v113 + 16) = v108;
              *(_QWORD *)(v108 + 16) = v114;
              if ((*(_BYTE *)(v108 + 3) & 1) != 0)
              {
                *(_QWORD *)(v108 + 24) = v113;
              }
              else
              {
                *(_QWORD *)(v108 + 24) = 0;
                v112 = (uint64_t *)(v114 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v108 + 16) = v108;
              *(_QWORD *)(v108 + 24) = 0;
            }
            *v112 = v108;
          }
          v108 += 32;
          v110 -= 32;
        }
        while (v110);
      }
      v32 = *(_QWORD *)(v30 + 728);
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v26);
      v33 = *v28 & 0xFFFFFFFFFFFFFFF8;
      *v27 = v33 | *v27 & 7;
      v27[1] = (unint64_t)v28;
      *(_QWORD *)(v33 + 8) = v27;
      *v28 = *v28 & 7 | (unint64_t)v27;
      if (v133)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v27);
    }
    if (v14 >= 3)
      v34 = 8260;
    else
      v34 = 8261;
    v36 = sub_1C55437B8(v129, v34);
    v37 = (unint64_t *)v35;
    v38 = v132;
    v39 = *(_QWORD *)(v131 + 40);
    *(_QWORD *)(v35 + 24) = v39;
    v40 = *(_QWORD *)(v39 + 32);
    v41 = *(unsigned int *)(v35 + 40);
    if ((_DWORD)v41)
    {
      v80 = *(_QWORD *)(v35 + 32);
      v81 = *(_QWORD *)(v40 + 40);
      v82 = 32 * v41;
      do
      {
        if (!*(_BYTE *)v80)
        {
          v83 = *(unsigned int *)(v80 + 4);
          if ((int)v83 >= 0)
            v84 = (uint64_t *)(*(_QWORD *)(v81 + 272) + 8 * v83);
          else
            v84 = (uint64_t *)(*(_QWORD *)(v81 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
          v85 = *v84;
          if (*v84)
          {
            v86 = *(_QWORD *)(v85 + 16);
            *(_QWORD *)(v85 + 16) = v80;
            *(_QWORD *)(v80 + 16) = v86;
            if ((*(_BYTE *)(v80 + 3) & 1) != 0)
            {
              *(_QWORD *)(v80 + 24) = v85;
            }
            else
            {
              *(_QWORD *)(v80 + 24) = 0;
              v84 = (uint64_t *)(v86 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v80 + 16) = v80;
            *(_QWORD *)(v80 + 24) = 0;
          }
          *v84 = v80;
        }
        v80 += 32;
        v82 -= 32;
      }
      while (v82);
    }
    v42 = *(_QWORD *)(v40 + 728);
    if (v42)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 24))(v42, v35);
    v43 = *v38 & 0xFFFFFFFFFFFFFFF8;
    *v37 = v43 | *v37 & 7;
    v37[1] = (unint64_t)v38;
    *(_QWORD *)(v43 + 8) = v37;
    *v38 = *v38 & 7 | (unint64_t)v37;
    if (v133)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v37);
    v135 = 1;
    v136 = 0;
    v137 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v36, (const llvm::MachineOperand *)&v135);
    v135 = 1;
    v136 = 0;
    v137 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v36, (const llvm::MachineOperand *)&v135);
    if (a3 == 3)
    {
      v45 = sub_1C55437B8(v129, v34);
      v46 = (unint64_t *)v44;
      v47 = v132;
      v48 = *(_QWORD *)(v131 + 40);
      *(_QWORD *)(v44 + 24) = v48;
      v49 = *(_QWORD *)(v48 + 32);
      v50 = *(unsigned int *)(v44 + 40);
      if ((_DWORD)v50)
      {
        v101 = *(_QWORD *)(v44 + 32);
        v102 = *(_QWORD *)(v49 + 40);
        v103 = 32 * v50;
        do
        {
          if (!*(_BYTE *)v101)
          {
            v104 = *(unsigned int *)(v101 + 4);
            if ((int)v104 >= 0)
              v105 = (uint64_t *)(*(_QWORD *)(v102 + 272) + 8 * v104);
            else
              v105 = (uint64_t *)(*(_QWORD *)(v102 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
            v106 = *v105;
            if (*v105)
            {
              v107 = *(_QWORD *)(v106 + 16);
              *(_QWORD *)(v106 + 16) = v101;
              *(_QWORD *)(v101 + 16) = v107;
              if ((*(_BYTE *)(v101 + 3) & 1) != 0)
              {
                *(_QWORD *)(v101 + 24) = v106;
              }
              else
              {
                *(_QWORD *)(v101 + 24) = 0;
                v105 = (uint64_t *)(v107 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v101 + 16) = v101;
              *(_QWORD *)(v101 + 24) = 0;
            }
            *v105 = v101;
          }
          v101 += 32;
          v103 -= 32;
        }
        while (v103);
      }
      v51 = *(_QWORD *)(v49 + 728);
      if (v51)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 24))(v51, v44);
      v52 = *v47 & 0xFFFFFFFFFFFFFFF8;
      *v46 = v52 | *v46 & 7;
      v46[1] = (unint64_t)v47;
      *(_QWORD *)(v52 + 8) = v46;
      *v47 = *v47 & 7 | (unint64_t)v46;
      if (v133)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v46);
      v135 = 1;
      v136 = 0;
      v137 = 3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v45, (const llvm::MachineOperand *)&v135);
      v135 = 1;
      v136 = 0;
      v137 = 2;
LABEL_64:
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v45, (const llvm::MachineOperand *)&v135);
    }
  }
  else if (a3 >= 2)
  {
    v53 = a5 - 7;
    if (!a4)
    {
      if (v53 >= 3)
        v54 = 509;
      else
        v54 = 510;
      sub_1C55437B8(v129, v54);
      v56 = (unint64_t *)v55;
      v57 = v132;
      v58 = *(_QWORD *)(v131 + 40);
      *(_QWORD *)(v55 + 24) = v58;
      v59 = *(_QWORD *)(v58 + 32);
      v60 = *(unsigned int *)(v55 + 40);
      if ((_DWORD)v60)
      {
        v122 = *(_QWORD *)(v55 + 32);
        v123 = *(_QWORD *)(v59 + 40);
        v124 = 32 * v60;
        do
        {
          if (!*(_BYTE *)v122)
          {
            v125 = *(unsigned int *)(v122 + 4);
            if ((int)v125 >= 0)
              v126 = (uint64_t *)(*(_QWORD *)(v123 + 272) + 8 * v125);
            else
              v126 = (uint64_t *)(*(_QWORD *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
            v127 = *v126;
            if (*v126)
            {
              v128 = *(_QWORD *)(v127 + 16);
              *(_QWORD *)(v127 + 16) = v122;
              *(_QWORD *)(v122 + 16) = v128;
              if ((*(_BYTE *)(v122 + 3) & 1) != 0)
              {
                *(_QWORD *)(v122 + 24) = v127;
              }
              else
              {
                *(_QWORD *)(v122 + 24) = 0;
                v126 = (uint64_t *)(v128 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v122 + 16) = v122;
              *(_QWORD *)(v122 + 24) = 0;
            }
            *v126 = v122;
          }
          v122 += 32;
          v124 -= 32;
        }
        while (v124);
      }
      v61 = *(_QWORD *)(v59 + 728);
      if (v61)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 24))(v61, v55);
      v62 = *v57 & 0xFFFFFFFFFFFFFFF8;
      *v56 = v62 | *v56 & 7;
      v56[1] = (unint64_t)v57;
      *(_QWORD *)(v62 + 8) = v56;
      *v57 = *v57 & 7 | (unint64_t)v56;
      if (v133)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v56);
    }
    if (v53 >= 3)
      v63 = 8260;
    else
      v63 = 8261;
    v65 = sub_1C55437B8(v129, v63);
    v66 = (unint64_t *)v64;
    v67 = v132;
    v68 = *(_QWORD *)(v131 + 40);
    *(_QWORD *)(v64 + 24) = v68;
    v69 = *(_QWORD *)(v68 + 32);
    v70 = *(unsigned int *)(v64 + 40);
    if ((_DWORD)v70)
    {
      v94 = *(_QWORD *)(v64 + 32);
      v95 = *(_QWORD *)(v69 + 40);
      v96 = 32 * v70;
      do
      {
        if (!*(_BYTE *)v94)
        {
          v97 = *(unsigned int *)(v94 + 4);
          if ((int)v97 >= 0)
            v98 = (uint64_t *)(*(_QWORD *)(v95 + 272) + 8 * v97);
          else
            v98 = (uint64_t *)(*(_QWORD *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
          v99 = *v98;
          if (*v98)
          {
            v100 = *(_QWORD *)(v99 + 16);
            *(_QWORD *)(v99 + 16) = v94;
            *(_QWORD *)(v94 + 16) = v100;
            if ((*(_BYTE *)(v94 + 3) & 1) != 0)
            {
              *(_QWORD *)(v94 + 24) = v99;
            }
            else
            {
              *(_QWORD *)(v94 + 24) = 0;
              v98 = (uint64_t *)(v100 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v94 + 16) = v94;
            *(_QWORD *)(v94 + 24) = 0;
          }
          *v98 = v94;
        }
        v94 += 32;
        v96 -= 32;
      }
      while (v96);
    }
    v71 = *(_QWORD *)(v69 + 728);
    if (v71)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v71 + 24))(v71, v64);
    v72 = *v67 & 0xFFFFFFFFFFFFFFF8;
    *v66 = v72 | *v66 & 7;
    v66[1] = (unint64_t)v67;
    *(_QWORD *)(v72 + 8) = v66;
    *v67 = *v67 & 7 | (unint64_t)v66;
    if (v133)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v66);
    v135 = 1;
    v136 = 0;
    v137 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v65, (const llvm::MachineOperand *)&v135);
    v135 = 1;
    v136 = 0;
    v137 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v65, (const llvm::MachineOperand *)&v135);
    if (a3 == 3)
    {
      v45 = sub_1C55437B8(v129, v63);
      v46 = (unint64_t *)v73;
      v74 = v132;
      v75 = *(_QWORD *)(v131 + 40);
      *(_QWORD *)(v73 + 24) = v75;
      v76 = *(_QWORD *)(v75 + 32);
      v77 = *(unsigned int *)(v73 + 40);
      if ((_DWORD)v77)
      {
        v115 = *(_QWORD *)(v73 + 32);
        v116 = *(_QWORD *)(v76 + 40);
        v117 = 32 * v77;
        do
        {
          if (!*(_BYTE *)v115)
          {
            v118 = *(unsigned int *)(v115 + 4);
            if ((int)v118 >= 0)
              v119 = (uint64_t *)(*(_QWORD *)(v116 + 272) + 8 * v118);
            else
              v119 = (uint64_t *)(*(_QWORD *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
            v120 = *v119;
            if (*v119)
            {
              v121 = *(_QWORD *)(v120 + 16);
              *(_QWORD *)(v120 + 16) = v115;
              *(_QWORD *)(v115 + 16) = v121;
              if ((*(_BYTE *)(v115 + 3) & 1) != 0)
              {
                *(_QWORD *)(v115 + 24) = v120;
              }
              else
              {
                *(_QWORD *)(v115 + 24) = 0;
                v119 = (uint64_t *)(v121 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v115 + 16) = v115;
              *(_QWORD *)(v115 + 24) = 0;
            }
            *v119 = v115;
          }
          v115 += 32;
          v117 -= 32;
        }
        while (v117);
      }
      v78 = *(_QWORD *)(v76 + 728);
      if (v78)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 24))(v78, v73);
      v79 = *v74 & 0xFFFFFFFFFFFFFFF8;
      *v46 = v79 | *v46 & 7;
      v46[1] = (unint64_t)v74;
      *(_QWORD *)(v79 + 8) = v46;
      *v74 = *v74 & 7 | (unint64_t)v46;
      if (v133)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v46);
      v135 = 1;
      v136 = 0;
      v137 = 3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v45, (const llvm::MachineOperand *)&v135);
      v135 = 1;
      v136 = 0;
      v137 = 1;
      goto LABEL_64;
    }
  }
LABEL_65:
  v129[0] = &off_1E816EC08;
  if (v130)
    llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
}

uint64_t sub_1C4959BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  void *v5;

  v5 = *(void **)(a1 + 8);
  v4 = (__int128 *)(a1 + 8);
  if (v5 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::convertFromAPInt(v4, a2, a3, a4);
  else
    return llvm::detail::IEEEFloat::convertFromAPInt((llvm::APInt *)v4, a2, a3, a4);
}

char **sub_1C4959BE8(char **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;

  v2 = (uint64_t)(a1 + 7803);
  v3 = -8440;
  do
  {
    v2 = sub_1C4959CD8(v2) - 40;
    v3 += 40;
  }
  while (v3);
  v4 = (uint64_t)(a1 + 6748);
  v5 = -8440;
  do
  {
    v4 = sub_1C4959CD8(v4) - 40;
    v5 += 40;
  }
  while (v5);
  v6 = a1 + 5693;
  v7 = -8440;
  do
  {
    v6 = sub_1C4959D3C(v6) - 5;
    v7 += 40;
  }
  while (v7);
  v8 = a1 + 4638;
  v9 = -8440;
  do
  {
    v8 = sub_1C4959D3C(v8) - 5;
    v9 += 40;
  }
  while (v9);
  v10 = a1 + 3581;
  v11 = -10128;
  do
  {
    v10 = sub_1C4959DB4(v10) - 6;
    v11 += 48;
  }
  while (v11);
  v12 = a1 + 2315;
  v13 = 0x1FFFFFFFFFFFFB0ELL;
  do
  {
    v12 = sub_1C4959DB4(v12) - 6;
    v13 += 6;
  }
  while (v13 * 8);
  do
  {
    sub_1C4959E48(&a1[v13 + 1050]);
    v13 -= 5;
  }
  while (v13 != -1055);
  return a1;
}

uint64_t sub_1C4959CD8(uint64_t a1)
{
  char **v2;
  void *v3;
  char *v5;

  v2 = *(char ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *v2;
      sub_1C4959D3C(v2 + 3);
      operator delete(v2);
      v2 = (char **)v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char **sub_1C4959D3C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      v6 = *(void **)&v2[v5 - 24];
      if (v6)
      {
        *(_QWORD *)&v2[v5 - 16] = v6;
        operator delete(v6);
      }
      v5 -= 24;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C4959DB4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    while (1)
    {
      v6 = *(char **)&v2[v5 - 8];
      if (&v2[v5 - 32] == v6)
      {
        v6 = &v2[v5 - 32];
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_9;
        v7 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_9:
      v5 -= 32;
      if (!v5)
      {
        v2 = *a1;
        break;
      }
    }
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C4959E48(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    v6 = v2 - 24;
    do
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v6[v5], 8);
      v5 -= 24;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C4959EB8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    while (1)
    {
      v5 = &v2[v4];
      v6 = *(char **)&v2[v4 - 8];
      if (&v2[v4 - 32] == v6)
        break;
      if (v6)
      {
        v7 = 5;
        goto LABEL_5;
      }
LABEL_6:
      v8 = *(char **)&v2[v4 - 48];
      if (v5 - 72 == v8)
      {
        v8 = v5 - 72;
        v9 = 4;
      }
      else
      {
        if (!v8)
          goto LABEL_9;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_9:
      v4 -= 72;
      if (!v4)
      {
        v2 = *a1;
        goto LABEL_15;
      }
    }
    v6 = &v2[v4 - 32];
    v7 = 4;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
    goto LABEL_6;
  }
LABEL_15:
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_1C4959F88(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x48uLL);
  *v2 = &unk_1E7FA38B8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
  }
  else
  {
    v2[4] = 0;
  }
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    if (v5 == a1 + 40)
    {
      v2[8] = v2 + 5;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    else
    {
      v2[8] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    v2[8] = 0;
  }
  return v2;
}

void sub_1C495A04C(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = __p + 40;
  v4 = (char *)*((_QWORD *)__p + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_5;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_5:
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_8;
  }
  if (v6)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

uint64_t sub_1C495A0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
  {
LABEL_6:
    sub_1C485C2F0();
    return sub_1C495A128(v7, v8);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1C495A128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a2 + 56);
  if (v5)
  {
    if (v5 == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return a1;
}

_QWORD *sub_1C495A1D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_5;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_5:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_8;
  }
  if (v5)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

unsigned int *sub_1C495A254(unsigned int *result, unint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v5 = result;
  if (result[3] >= a2)
  {
    v8 = result[2];
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = result[2];
    if (v9)
    {
      v10 = *(_QWORD **)result;
      do
      {
        *v10++ = a3;
        --v9;
      }
      while (v9);
      v8 = result[2];
    }
    v11 = v8 - a2;
    if (v8 < a2)
    {
      v12 = (_QWORD *)(*(_QWORD *)result + 8 * v8);
      do
        *v12++ = a3;
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    result[2] = 0;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 8);
    v6 = *(_QWORD **)v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
  }
  v5[2] = a2;
  return result;
}

void sub_1C495A30C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A320(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3900;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495A354(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E7FA3900;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C495A374(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  const char *v4;
  BOOL v5;
  _BOOL8 result;
  unsigned int v8;

  v3 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v4 == 1)
  {
    v8 = v3;
    v3 = v8;
  }
  v5 = (v3 & 0xF) == 0 && *(_DWORD *)(a1 + 8) >= v3;
  result = 1;
  if (!v5)
  {
    if ((v3 & 0x1F) != 0 || (v3 & 0xFFFFFFE0) == 0x160)
      return 0;
    if ((v3 & 0xFFFFFFA0) == 0x100 || *(_DWORD *)(a1 + 12) < v3)
      return 0;
  }
  return result;
}

void sub_1C495A414()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A428()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3948;
  return result;
}

void sub_1C495A44C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3948;
}

uint64_t sub_1C495A464()
{
  return 1;
}

void sub_1C495A4B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A4CC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3990;
  return result;
}

void sub_1C495A4F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3990;
}

BOOL sub_1C495A508(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = (unsigned __int16)(v2 >> 3);
  v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0)
    v4 = (v2 >> 19);
  if ((v2 & 4) != 0)
    v3 = v4;
  if ((v2 & 1) != 0)
    v5 = (v2 >> 3);
  else
    v5 = v3;
  return v5 < 0x10;
}

void sub_1C495A548()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A55C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA39D8;
  return result;
}

void sub_1C495A580(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA39D8;
}

uint64_t sub_1C495A598(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v4 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

void sub_1C495A5B4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A5C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3A20;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495A5FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA3A20;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C495A618(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8))
    return 1;
  v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

void sub_1C495A648()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A65C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3A68;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495A690(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA3A68;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C495A6AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8))
    return 1;
  v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

void sub_1C495A6DC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495A6F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA3AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495A728(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495A748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 8);
  return v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
}

void sub_1C495A768()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495A77C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA3AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495A7B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3AF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495A7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 8);
  return v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
}

void sub_1C495A7F4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495A808(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA3B40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495A840(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3B40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C495A860(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
  if (v3)
    return 1;
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v5;
}

void sub_1C495A894()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495A8A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA3B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495A8E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C495A900(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
  if (v3)
    return 1;
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v5;
}

void sub_1C495A934()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495A948(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA3BD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495A980(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3BD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C495A9A0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
  if (v3)
    return 1;
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v5;
}

void sub_1C495A9D4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495A9E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3C18;
  return result;
}

void sub_1C495AA0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3C18;
}

BOOL sub_1C495AA24(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;

  v4 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((_DWORD)v3 == 1)
  v6 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v5 == 1)
  return v4 < v6;
}

void sub_1C495AA98()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495AAAC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3C60;
  return result;
}

void sub_1C495AAD0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3C60;
}

uint64_t sub_1C495AAE8()
{
  return 0;
}

void sub_1C495AAFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495AB10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3CA8;
  return result;
}

void sub_1C495AB34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3CA8;
}

BOOL sub_1C495AB4C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;

  v4 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((_DWORD)v3 == 1)
  v6 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v5 == 1)
  return v4 < v6;
}

void sub_1C495ABC0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495ABD4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3CF0;
  return result;
}

void sub_1C495ABF8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3CF0;
}

uint64_t sub_1C495AC10()
{
  return 0;
}

void sub_1C495AC24()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495AC38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3D38;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495AC6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA3D38;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C495AC88(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8))
    return 1;
  v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

void sub_1C495ACB8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495ACCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA3D80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C495AD0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA3D80;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495AD34(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a2 + 8);
  return (*v2 == a1[1] || *v2 == a1[2]) && v2[1] == a1[3];
}

void sub_1C495AD6C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495AD80()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3DC8;
  return result;
}

void sub_1C495ADA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3DC8;
}

BOOL sub_1C495ADBC(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *(unint64_t **)(a2 + 8);
  v3 = v2 + 1;
  v4 = sub_1C4825F50(v2);
  v6 = v5;
  return v4 != sub_1C4825F50(v3) || v6 != v7;
}

void sub_1C495AE08()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495AE1C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA3E10;
  return result;
}

void sub_1C495AE40(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA3E10;
}

BOOL sub_1C495AE58(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *(unint64_t **)(a2 + 8);
  v3 = v2 + 1;
  v4 = sub_1C4825F50(v2);
  v6 = v5;
  return v4 != sub_1C4825F50(v3) || v6 != v7;
}

void sub_1C495AEA4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495AEB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E7FA3E58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_1C495AF08(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E7FA3E58;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C495AF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  __int128 v5;
  uint64_t v6;
  void (**v7)(void);
  _OWORD v9[3];
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a2 + 8);
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(_QWORD **)(a2 + 8) & 2) == 0;
  if (v3 || (v2 & 4) != 0)
    return 0;
  v5 = *(_OWORD *)(a1 + 24);
  v9[0] = *(_OWORD *)(a1 + 8);
  v9[1] = v5;
  v9[2] = *(_OWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  sub_1C55102A4(1, v9, 7, (uint64_t)v11);
  if (!v12)
  {
    sub_1C485C2F0();
    JUMPOUT(0x1C495B040);
  }
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v12 + 48))(v12, a2);
  if (v12 == v11)
  {
    v7 = (void (**)(void))(v11[0] + 32);
    goto LABEL_12;
  }
  if (v12)
  {
    v7 = (void (**)(void))(*v12 + 40);
LABEL_12:
    (*v7)();
  }
  return v6;
}

void sub_1C495B044()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495B058(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7FA3EA0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495B08C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7FA3EA0;
  a2[1] = v2;
  return result;
}

BOOL sub_1C495B0A8(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8) && (*(_DWORD *)a2 - 109) < 2;
}

void sub_1C495B0D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495B0E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3EE8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495B118(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA3EE8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C495B134(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C495B14C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
  {
    sub_1C485C2F0();
    JUMPOUT(0x1C495B178);
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) ^ 1;
}

void sub_1C495B17C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B190(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_1E7FA3F78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C495B1D8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &unk_1E7FA3F78;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495B208(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *v3;
  v5 = 0x800000000000000;
  if ((*v3 & 2) == 0)
    v5 = 0x8000000000000;
  if ((v5 & v4) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v4 = *v3;
  }
  v6 = v3[1];
  if (v6 == a1[1] || v6 == a1[2])
    return 1;
  v8 = (unsigned __int16)(v4 >> 3);
  if (v6 == a1[3] && v8 < 9)
    return 1;
  if (v6 == a1[4] && v8 < 5)
    return 1;
  return v6 == a1[5] && v8 == 2;
}

void sub_1C495B2AC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B2C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E7FA3FC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_1C495B310(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E7FA3FC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495B348(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int64x2_t v3;
  uint64_t v4;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = vdupq_n_s64(v2);
  v4 = 1;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) == 0&& v2 != *(_QWORD *)(a1 + 40)&& v2 != *(_QWORD *)(a1 + 48))
  {
    return v2 == *(_QWORD *)(a1 + 56);
  }
  return v4;
}

void sub_1C495B3B8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B3CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7FA4008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C495B414(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FA4008;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495B444(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t v8;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = 3;
  if ((v2 & 1) == 0)
    v3 = 19;
  v4 = v2 >> v3;
  v5 = v2 & 0x8000000000000000 | (8 * v4) | 1;
  v6 = (v2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v4) | 2;
  if ((v2 & 2) == 0)
    v6 = v5;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) != 0 && (**(_QWORD **)(a2 + 8) & 4) != 0)
    v2 = v6;
  v8 = vdupq_n_s64(v2);
  return (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v8, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v8, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) != 0|| v2 == *(_QWORD *)(a1 + 40);
}

void sub_1C495B4E4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B4F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x88uLL);
  *(_QWORD *)v2 = &off_1E7FA4050;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C495B568(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_1E7FA4050;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t sub_1C495B5C0()
{
  return 1;
}

void sub_1C495B5CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495B5E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA4098;
  return result;
}

void sub_1C495B604(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA4098;
}

BOOL sub_1C495B61C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;

  v4 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v3 == 1)
  v6 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((_DWORD)v5 == 1)
  return v4 >= v6;
}

void sub_1C495B690()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495B6A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA40E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495B6D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA40E0;
  a2[1] = v2;
  return result;
}

BOOL sub_1C495B6F4(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C495B710()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B724(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA4128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C495B764(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA4128;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495B78C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  return v2 == a1[1] || v2 == a1[2] || v2 == a1[3];
}

void sub_1C495B7C0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B7D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E7FA4170;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495B82C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E7FA4170;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

BOOL sub_1C495B86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v8;
  const char *v9;
  _BOOL4 v10;
  unsigned int v11;
  _OWORD v12[5];
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(unint64_t **)(a2 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v12[0] = *(_OWORD *)(a1 + 8);
  v12[1] = v5;
  v6 = *(_OWORD *)(a1 + 56);
  v12[2] = *(_OWORD *)(a1 + 40);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 72);
  while (*(_QWORD *)((char *)v12 + v3) != v4[1])
  {
    v3 += 8;
    if (v3 == 80)
      return 0;
  }
  v8 = sub_1C4825F50(v4);
  if ((_DWORD)v9 == 1)
  {
    v11 = v8;
    v8 = v11;
  }
  v10 = (v8 & (v8 - 1)) == 0;
  if (!v8)
    v10 = 0;
  return v8 < 0x41 && v10;
}

void sub_1C495B94C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495B960(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA41B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495B994(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA41B8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C495B9B0(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C495B9CC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495B9E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA4200;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C495BA20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA4200;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495BA48(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == a1[1] || v2 == a1[2] || v2 == a1[3])
    return 1;
  return (v2 & 0xFFFFFFFFFFFFFFF9) != 0 && (**(_QWORD **)(a2 + 8) & 2) != 0 && (**(_QWORD **)(a2 + 8) & 4) == 0;
}

void sub_1C495BA9C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495BAB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA4248;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C495BAF0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA4248;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495BB18(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (v2 == a1[1] || v2 == a1[2] || v2 == a1[3])
    return 1;
  return (v2 & 0xFFFFFFFFFFFFFFF9) != 0
      && (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) & 2) != 0
      && (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) & 4) == 0;
}

void sub_1C495BB6C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495BB80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_1E7FA4290;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C495BBE0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E7FA4290;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_1C495BC28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _OWORD v12[6];
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)(a2 + 8);
  v4 = (v3 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(_QWORD **)(a2 + 8) & 2) == 0;
  if (v4 || (v3 & 4) != 0)
  {
    v6 = *(_OWORD *)(a1 + 24);
    v12[0] = *(_OWORD *)(a1 + 8);
    v12[1] = v6;
    v7 = *(_OWORD *)(a1 + 56);
    v12[2] = *(_OWORD *)(a1 + 40);
    v12[3] = v7;
    v8 = *(_OWORD *)(a1 + 88);
    v12[4] = *(_OWORD *)(a1 + 72);
    v12[5] = v8;
    sub_1C55102A4(0, v12, 12, (uint64_t)v13);
    if (!v14)
    {
      sub_1C485C2F0();
      JUMPOUT(0x1C495BD30);
    }
    v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v14 + 48))(v14, a2);
    v9 = v14;
    if (v14 == v13)
    {
      v10 = (void (**)(_QWORD *))(v13[0] + 32);
      v9 = v13;
    }
    else
    {
      if (!v14)
        return v5;
      v10 = (void (**)(_QWORD *))(*v14 + 40);
    }
    (*v10)(v9);
    return v5;
  }
  return 1;
}

void sub_1C495BD34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C495BD48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7FA42D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C495BD7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7FA42D8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C495BD98(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C495BDB4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495BDC8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FA4320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C495BE00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA4320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495BE20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  return v2 == *(_QWORD *)(a1 + 16) || v2 == *(_QWORD *)(a1 + 8);
}

void sub_1C495BE40()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495BE54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA4368;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C495BE94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA4368;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C495BEBC(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  const char *v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;

  v3 = *(unint64_t **)(a2 + 8);
  if (v3[1] == *(_QWORD *)(a1 + 8))
  {
    v5 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
    if ((_DWORD)v4 == 1)
    if (v5 <= *(unsigned int *)(a1 + 16))
      return 1;
  }
  v7 = sub_1C4825F50(v3);
  if ((_DWORD)v6 == 1)
  if (v3[1] != *(_QWORD *)(a1 + 24))
    return 0;
  v9 = sub_1C4825F50(v3);
  if ((_DWORD)v8 == 1)
  if (v9 > *(unsigned int *)(a1 + 32))
    return 0;
  if ((v7 >> 5) <= 0xB)
    return (0x2FFu >> (v7 >> 5)) & 1;
  return 1;
}

void sub_1C495BFB8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495BFCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA43B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C495C00C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA43B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495C034(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 8);
  return v2 == a1[1] || v2 == a1[2] || v2 == a1[3] || v2 == a1[4];
}

void sub_1C495C070()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495C084(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA43F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C495C0C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA43F8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C495C0EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  const char *v9;
  unint64_t v11;

  v3 = *(_QWORD **)(a2 + 8);
  v6 = *v3;
  v4 = v3 + 1;
  v5 = v6;
  if (v6 != *(_QWORD *)(a1 + 8) && v5 != *(_QWORD *)(a1 + 16) && v5 != *(_QWORD *)(a1 + 24))
    return 0;
  v8 = sub_1C4825F50(v4);
  if ((_DWORD)v9 == 1)
  {
    v11 = v8;
    v8 = v11;
  }
  return v8 <= *(unsigned int *)(a1 + 32);
}

BOOL sub_1C495C174(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 81 || *(_DWORD *)(v7 + 40) != 2)
    return 0;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36);
  **(_DWORD **)(a1 + 8) = v8;
  if (v8 < 0 && (v9 = v8 & 0x7FFFFFFF, v9 < *(_DWORD *)(a2 + 432)))
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v9);
  else
    v10 = 0;
  return v10 == *(_QWORD *)a1;
}

BOOL sub_1C495C228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v1 = a1 + 320;
  v2 = *(_QWORD *)(a1 + 328);
  if (v2 == a1 + 320)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 == v1)
    return 0;
  if (*(_QWORD *)(v3 + 8) != v1)
    return 1;
  v5 = v2 + 48;
  v6 = *(_QWORD *)(v2 + 56);
  if (v6 == v5)
    return 1;
  do
  {
    v7 = **(unsigned __int16 **)(v6 + 16) - 256;
    result = v7 < 0xFFFFFF2D;
    if (v7 > 0xFFFFFF2C)
      break;
    if ((*(_BYTE *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 8) != 0)
        v6 = *(_QWORD *)(v6 + 8);
    }
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_1C495C2B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;

  v1 = *(_QWORD *)(a1 + 328);
  v2 = v1 + 48;
  for (i = *(_QWORD *)(v1 + 56); i != v2; i = *(_QWORD *)(i + 8))
  {
    if (**(_WORD **)(i + 16) == 117)
    {
      v4 = *(unsigned int *)(i + 40);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = *(unsigned __int8 **)(i + 32);
        while (1)
        {
          v7 = *v6;
          v6 += 32;
          if (v7 == 17)
            break;
          if (v4 == ++v5)
            goto LABEL_16;
        }
      }
      else
      {
LABEL_16:
        LODWORD(v5) = -1;
      }
      if (*(_DWORD *)(*(_QWORD *)(i + 32) + 32 * v5 + 16) == 1823)
        return 1;
    }
    if ((*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return 0;
}

uint64_t sub_1C495C354(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)a1 = &off_1E7FA44E8;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 408), 4);
  sub_1C495C918(a1 + 384);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 384), 8);
  v2 = *(char **)(a1 + 208);
  v3 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 - 16;
    do
    {
      sub_1C4914448((void ***)&v5[v4]);
      v4 -= 16;
    }
    while (v4);
    v2 = *(char **)(a1 + 208);
  }
  if (v2 != (char *)(a1 + 224))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 184), 8);
  sub_1C495C984((uint64_t *)(a1 + 160));
  sub_1C495CA00((char **)(a1 + 16));
  return a1;
}

void sub_1C495C3FC(uint64_t a1, _BYTE *a2)
{
  char *v4;
  void *v5;
  char v6;
  BOOL v7;
  void *v8;
  unsigned __int16 v9;
  _QWORD v10[2];
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (const char *)&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    if (*a2)
      v4 = "true";
    else
      v4 = "false";
    sub_1C4816AD8((llvm::raw_ostream *)&v11, v4);
    v5 = v19;
    v6 = *((_BYTE *)v19 + 23);
    v7 = v6 < 0;
    if (v6 < 0)
      v5 = *v19;
    v8 = (void *)(v6 & 0x7F);
    if (v7)
      v8 = v19[1];
    v10[0] = v5;
    v10[1] = v8;
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v10, 0);
    v11 = (const char *)off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v20, 0);
    v9 = llvm::yaml::parseBool((char *)v20, v21);
    if (v9 >= 0x100u)
    {
      *a2 = v9;
    }
    else
    {
      LOWORD(v15) = 261;
      v11 = "invalid BOOLean";
      v12 = 15;
      (*(void (**)(uint64_t, const char **))(*(_QWORD *)a1 + 248))(a1, &v11);
    }
  }
}

void sub_1C495C580(uint64_t *a1, uint64_t *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, *(int *)a2);
    v4 = v19;
    v5 = *((_BYTE *)v19 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v19;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v19[1];
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, _QWORD))(*a1 + 216))(a1, &v20, 0);
    v8 = llvm::yaml::ScalarTraits<int,void>::input((uint64_t)v20, v21, a1[1], a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v8;
      v12 = v9;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

uint64_t sub_1C495C6D8(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  char v22;
  uint64_t v23;

  v22 = 1;
  v10 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if (*(_BYTE *)(a3 + 4))
    v11 = 0;
  else
    v11 = v10;
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if ((result & 1) != 0)
  {
    if (!*(_BYTE *)(a3 + 4))
    {
LABEL_27:
      *(_QWORD *)a3 = *a4;
      return result;
    }
  }
  else if (!*(_BYTE *)(a3 + 4))
  {
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 4) = 1;
  }
  v23 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, a2, a5, v11, &v22, &v23);
  if (!(_DWORD)result)
  {
    if (!v22)
      return result;
    goto LABEL_27;
  }
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) != 0)
    goto LABEL_24;
  v13 = a1[37];
  if (!v13)
    goto LABEL_24;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14 || *(_DWORD *)(v14 + 32) != 1)
    goto LABEL_24;
  v15 = *(int **)(v14 + 72);
  v16 = *(_QWORD *)(v14 + 80);
  v17 = v16;
  do
  {
    v18 = v17;
    if (!v17)
      break;
    --v17;
  }
  while (*((_BYTE *)v15 + v18 - 1) == 32);
  if (v18 < v16)
    v16 = v18;
  if (v16 == 6
    && ((v19 = *v15, v20 = *((unsigned __int16 *)v15 + 2), v19 == 1852796476) ? (v21 = v20 == 15973) : (v21 = 0), v21))
  {
    *(_QWORD *)a3 = *a4;
  }
  else
  {
LABEL_24:
    sub_1C4832A78(a1, (_DWORD *)a3);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v23);
}

uint64_t sub_1C495C870(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)a1 = &off_1E7FA44E8;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 408), 4);
  sub_1C495C918(a1 + 384);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 384), 8);
  v2 = *(char **)(a1 + 208);
  v3 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 - 16;
    do
    {
      sub_1C4914448((void ***)&v5[v4]);
      v4 -= 16;
    }
    while (v4);
    v2 = *(char **)(a1 + 208);
  }
  if (v2 != (char *)(a1 + 224))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 184), 8);
  sub_1C495C984((uint64_t *)(a1 + 160));
  sub_1C495CA00((char **)(a1 + 16));
  return a1;
}

void sub_1C495C918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = v1 << 6;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 + 8);
        if ((void *)(v3 + 24) != v4)
          free(v4);
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
          free(v5);
      }
      v3 += 64;
      v2 -= 64;
    }
    while (v2);
  }
}

uint64_t *sub_1C495C984(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

char **sub_1C495CA00(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

BOOL sub_1C495CA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a3);
  v7 = 0;
  v8 = (char *)(v6 + 192);
  v9 = *(_OWORD *)(v5 + 208);
  v11[0] = *(_OWORD *)(v5 + 192);
  v11[1] = v9;
  v12 = *(_QWORD *)(v5 + 224);
  do
  {
    *(_QWORD *)((char *)v11 + v7) &= *(_QWORD *)&v8[v7];
    v7 += 8;
  }
  while (v7 != 40);
  return memcmp(v11, v8, 0x28uLL) == 0;
}

void sub_1C495CB1C(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 500;
  *(_DWORD *)(a4 + 12) = 500;
  *(_BYTE *)(a4 + 40) = 1;
  *(_BYTE *)(a4 + 42) = 0;
  if (sub_1C5EACC80(a2))
  {
    *(_WORD *)(a4 + 41) = 257;
    *(_BYTE *)(a4 + 43) = 1;
  }
  sub_1C5EAA198((uint64_t)a2, a3, (_DWORD *)a4, 5000, 48, 1, 0, 0);
}

BOOL sub_1C495CB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;

  result = 1;
  if (!a2 || *(_BYTE *)(a2 + 16) != 84)
    return result;
  v6 = *(_QWORD *)(a2 + 64);
  if ((!v6 || (*(_BYTE *)(v6 + 12) & 0x40) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6))
    return 1;
  v7 = *(_QWORD *)(a2 - 32);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a2 + 72))
    return 1;
  v8 = *(_DWORD *)(v7 + 36);
  result = 1;
  if (v8 <= 2578)
  {
    v9 = (v8 - 2484) > 0x18 || ((1 << (v8 + 76)) & 0x1FE0013) == 0;
    if (v9 && v8 != 2306)
      return result;
    return *(_QWORD *)(a2 + 40) == *(_QWORD *)(a3 + 40);
  }
  v10 = (v8 - 2579) > 0x18 || ((1 << (v8 - 19)) & 0x1FE0001) == 0;
  if (!v10 || (v8 - 2677) < 2)
    return *(_QWORD *)(a2 + 40) == *(_QWORD *)(a3 + 40);
  return result;
}

void sub_1C495CC90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  llvm::MachineInstr *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t Symbol;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  llvm::MachineBasicBlock *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t Metadata;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  *(_DWORD *)a3 = **(unsigned __int16 **)(a2 + 16);
  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3)
  {
    v5 = (llvm::MachineInstr *)a2;
    v61 = a3 + 32;
    v62 = a3 + 16;
    v7 = 32 * v3;
    v8 = *(_QWORD *)(a2 + 32) + 16;
    while (1)
    {
      v9 = *(_DWORD *)(v8 - 16);
      switch((char)v9)
      {
        case 0:
          if ((v9 & 0x2000000) != 0)
            goto LABEL_51;
          v10 = *(unsigned int *)(v8 - 12);
          v11 = 1;
          goto LABEL_48;
        case 1:
          v10 = *(_QWORD *)v8;
          v11 = 2;
          goto LABEL_48;
        case 4:
          Symbol = llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)v8);
          v13 = *a1;
          v14 = sub_1C484358C(*a1 + 192, 24, 3);
          v10 = v14;
          v15 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 152) + 18) << 16;
          *(_BYTE *)v14 = 2;
          v16 = v15 | (*(unsigned __int8 *)(v14 + 4) << 24);
          goto LABEL_42;
        case 7:
          switch(*(_DWORD *)v8)
          {
            case '@':
              if ((_BYTE)v9)
                v20 = ((v9 >> 8) & 0xFFF) - 1;
              else
                v20 = -1;
              v21 = dword_1C660B748[v20];
              break;
            case 'B':
              v21 = 6;
              break;
            case 'C':
              v21 = 8;
              break;
            case 'D':
              v21 = 7;
              break;
            default:
              llvm::report_fatal_error((llvm *)"Unhandled target index type!", (const char *)1);
          }
          v41 = *(unsigned int *)(v8 - 12) | ((unint64_t)*(unsigned int *)(v8 + 8) << 32);
          v42 = sub_1C484358C(*a1 + 192, 24, 3);
          *(_BYTE *)v42 = 1;
          *(_DWORD *)(v42 + 1) = *(unsigned __int8 *)(v42 + 4) << 24;
          *(_QWORD *)(v42 + 8) = 0;
          *(_QWORD *)(v42 + 16) = v41;
          v43 = sub_1C484358C(*a1 + 192, 40, 3);
          *(_DWORD *)(v43 + 9) = *(unsigned __int8 *)(v43 + 12) << 24;
          *(_QWORD *)(v43 + 16) = 0;
          *(_QWORD *)v43 = &unk_1E8054FE0;
          *(_DWORD *)(v43 + 24) = v21;
          *(_QWORD *)(v43 + 32) = v42;
          *(_BYTE *)(v43 + 8) = 4;
          v10 = v43 + 8;
          goto LABEL_47;
        case 10:
          v17 = *(llvm::MachineBasicBlock **)v8;
          Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), *(const llvm::GlobalValue **)v8);
          if (*(_DWORD *)(v8 - 16))
            v18 = ((*(_DWORD *)(v8 - 16) >> 8) & 0xFFF) - 8;
          else
            v18 = -8;
          if (v18 > 5)
          {
            v19 = 0;
            if (!v17)
              goto LABEL_41;
          }
          else
          {
            v19 = dword_1C660B764[v18];
            if (!v17)
              goto LABEL_41;
          }
          if (*((_BYTE *)v17 + 16) != 3)
            goto LABEL_41;
          Metadata = llvm::Value::getMetadata((uint64_t)v17, "agx.bind", 8uLL);
          if (!Metadata)
            goto LABEL_41;
          v23 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
          v25 = *v23;
          v24 = v23[1];
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 128) + 24) + 8) != 17)
            goto LABEL_26;
          if (*(_BYTE *)v24 != 1 || (v26 = *(_QWORD *)(v24 + 128), *(_BYTE *)(v26 + 16) != 16))
          {
            v24 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8));
LABEL_26:
            v26 = *(_QWORD *)(v24 + 128);
          }
          v27 = (_QWORD *)(v26 + 24);
          if (*(_DWORD *)(v26 + 32) >= 0x41u)
            v27 = (_QWORD *)*v27;
          v28 = *(_DWORD *)v27;
          if (v28 == 114 || v28 == 18)
          {
            v30 = llvm::Value::getMetadata((uint64_t)v17, "agx.bind", 8uLL);
            if (!v30)
              goto LABEL_64;
            v31 = (_QWORD *)(v30 - 8 * *(unsigned int *)(v30 + 8));
            v32 = v31[1];
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v31 + 128) + 24) + 8) == 17)
            {
              if (*(_BYTE *)v32 != 1 || (v33 = *(_QWORD *)(v32 + 128), *(_BYTE *)(v33 + 16) != 16))
              {
                v34 = (_QWORD *)(v32 - 8 * *(unsigned int *)(v32 + 8));
                v35 = *(_QWORD *)(*v34 + 128);
                v36 = (_QWORD *)(v35 + 24);
                if (*(_DWORD *)(v35 + 32) >= 0x41u)
                  v36 = (_QWORD *)*v36;
                v37 = (_QWORD *)*v36;
                v38 = v34[1];
                goto LABEL_58;
              }
            }
            else
            {
              v33 = *(_QWORD *)(v32 + 128);
            }
            v49 = (_QWORD *)(v33 + 24);
            if (*(_DWORD *)(v33 + 32) >= 0x41u)
              v49 = (_QWORD *)*v49;
            v37 = (_QWORD *)*v49;
            v38 = v31[2];
LABEL_58:
            v50 = *(_QWORD *)(v38 + 128);
            v51 = (unint64_t *)(v50 + 24);
            if (*(_DWORD *)(v50 + 32) >= 0x41u)
              v51 = (unint64_t *)*v51;
            if ((_DWORD)v37 == 114 || (_DWORD)v37 == 18)
            {
              v53 = *v51;
              v54 = v53 & 0xFFFFFF00;
              v53 = v53;
            }
            else
            {
LABEL_64:
              v53 = 0;
              v54 = 0;
            }
            v55 = v54 | v53;
            v56 = *a1;
            v57 = *a1 + 192;
            v58 = sub_1C484358C(v57, 24, 3);
            v59 = *(unsigned __int8 *)(*(_QWORD *)(v56 + 152) + 18);
            *(_BYTE *)v58 = 2;
            *(_DWORD *)(v58 + 1) = (*(unsigned __int8 *)(v58 + 4) << 24) | (v59 << 16) | v19;
            *(_QWORD *)(v58 + 8) = 0;
            *(_QWORD *)(v58 + 16) = Symbol;
            v60 = sub_1C484358C(v57, 24, 3);
            *(_BYTE *)v60 = 1;
            *(_DWORD *)(v60 + 1) = *(unsigned __int8 *)(v60 + 4) << 24;
            *(_QWORD *)(v60 + 8) = 0;
            *(_QWORD *)(v60 + 16) = v55;
            v10 = sub_1C484358C(v57, 32, 3);
            *(_BYTE *)v10 = 0;
            *(_DWORD *)(v10 + 1) = *(unsigned __int8 *)(v10 + 4) << 24;
            *(_QWORD *)(v10 + 8) = 0;
            *(_QWORD *)(v10 + 16) = v58;
            *(_QWORD *)(v10 + 24) = v60;
            v5 = (llvm::MachineInstr *)a2;
            goto LABEL_47;
          }
LABEL_41:
          v39 = *a1;
          v14 = sub_1C484358C(*a1 + 192, 24, 3);
          v10 = v14;
          v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 + 152) + 18);
          *(_BYTE *)v14 = 2;
          v16 = (*(unsigned __int8 *)(v14 + 4) << 24) | (v40 << 16) | v19;
LABEL_42:
          *(_DWORD *)(v14 + 1) = v16;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = Symbol;
LABEL_47:
          v11 = 5;
LABEL_48:
          v44 = *(unsigned int *)(a3 + 24);
          if (v44 >= *(unsigned int *)(a3 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v62, v61, v44 + 1, 16);
            v44 = *(unsigned int *)(a3 + 24);
          }
          v45 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 16 * v44);
          *v45 = v11;
          v45[1] = v10;
          ++*(_DWORD *)(a3 + 24);
LABEL_51:
          v8 += 32;
          v7 -= 32;
          if (!v7)
            return;
          break;
        case 11:
          v46 = *sub_1C63BC374(a1[1], *(_QWORD *)(*(_QWORD *)v8 - 32));
          v47 = *a1;
          v10 = sub_1C484358C(*a1 + 192, 24, 3);
          v48 = *(unsigned __int8 *)(*(_QWORD *)(v47 + 152) + 18) << 16;
          *(_BYTE *)v10 = 2;
          *(_DWORD *)(v10 + 1) = v48 | (*(unsigned __int8 *)(v10 + 4) << 24);
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = v46;
          goto LABEL_47;
        case 12:
          goto LABEL_51;
        default:
          llvm::MachineInstr::dump(v5);
          __break(1u);
          return;
      }
    }
  }
}

uint64_t sub_1C495D200(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 Post RA Peephole";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "agx2-post-ra-peephole";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF730;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C495D28C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C495D28C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF730);
  *result = &off_1E7FA4510;
  return result;
}

void sub_1C495D2CC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C495D360(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C495D3EC()
{
  return "AGX2 post-RA peephole pass";
}

void sub_1C495D3FC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C495D420(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int NumExplicitOperands;
  _DWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t NamedMetadata;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t FirstTerminator;
  uint64_t *v39;
  uint64_t i;
  llvm::MachineFunction *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int16 *v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  _BYTE *v79;
  _BYTE *v80;
  unint64_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _WORD *v91;
  unsigned int v92;
  llvm *v93;
  llvm::Value **v94;
  unint64_t v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unint64_t v99;
  llvm *v100;
  void *v101;
  llvm *v102;
  llvm::raw_ostream *v103;
  _DWORD *v104;
  llvm::Value *v105;
  size_t v106;
  char *Name;
  size_t v108;
  llvm *v109;
  llvm::raw_ostream *v110;
  uint64_t v111;
  size_t v112;
  char *v113;
  size_t v114;
  void *v115;
  llvm *v116;
  uint64_t v117;
  llvm::raw_ostream *v118;
  llvm *v119;
  llvm *v120;
  llvm *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  _WORD *v127;
  unsigned __int16 *v128;
  __int16 v129;
  unsigned __int16 v130;
  int v131;
  llvm *v132;
  _DWORD *v133;
  _WORD *v134;
  uint64_t (**v135)(void);
  llvm *v136;
  uint64_t v137;
  llvm *v138;
  llvm *v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  _WORD *v145;
  unsigned __int16 *v146;
  __int16 v147;
  unsigned __int16 v148;
  int v149;
  llvm *v150;
  _DWORD *v151;
  _WORD *v152;
  uint64_t (**v153)(void);
  llvm *v154;
  llvm::raw_ostream *v155;
  uint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  unsigned int v159;
  unsigned __int16 *v160;
  int v161;
  __int16 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  unsigned __int16 v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t *v207;
  int v208;
  llvm::Value **v209;
  int v210;
  int v211;
  int v212;
  int v213;
  uint64_t *v214;
  void (**v215)();
  _BYTE *v216;
  _BYTE *v217;
  uint64_t v218;
  int v219;
  _BYTE v220[32];
  uint64_t (**v221)(llvm::MachineFunction::Delegate *__hidden);
  void (**v222)();
  _BYTE *v223;
  _BYTE *v224;
  uint64_t v225;
  int v226;
  _BYTE v227[32];
  void *v228;
  uint64_t v229;
  _QWORD v230[4];
  _QWORD v231[3];
  llvm *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  _WORD v236[24];
  int v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  a1[32] = v4;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  a1[33] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[32] + 176))(a1[32]);
  a1[34] = a2[5];
  a1[35] = a2[7];
  v216 = v220;
  v217 = v220;
  v218 = 4;
  v219 = 0;
  v215 = (void (**)())&off_1E7FA45D0;
  v223 = v227;
  v224 = v227;
  v225 = 4;
  v226 = 0;
  v221 = &off_1E7FA1778;
  v222 = (void (**)())&unk_1E7FA17D0;
  v228 = v230;
  v230[0] = &v215;
  v229 = 0x400000001;
  a2[91] = &v221;
  v5 = (uint64_t *)a2[41];
  v207 = a2 + 40;
  if (v5 == a2 + 40)
  {
    LOBYTE(v6) = 0;
    a2[91] = 0;
    goto LABEL_389;
  }
  v205 = a2;
  v6 = 0;
  v206 = a1;
  do
  {
    v7 = v5 + 6;
    v8 = v5[6] & 0xFFFFFFFFFFFFFFF8;
    if (v5 + 6 != (uint64_t *)v8)
    {
      if (!v8 || (*(_BYTE *)v8 & 4) == 0)
      {
        while ((*(_WORD *)(v8 + 44) & 4) != 0)
          v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      }
      do
      {
        v20 = v8;
        v21 = v5[7];
        if (v8 != v21)
        {
          v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v8 & 4) == 0)
          {
            while ((*(_WORD *)(v8 + 44) & 4) != 0)
              v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v22 = *(unsigned __int16 **)(v20 + 16);
        v23 = *v22;
        if ((v23 - 13) < 5 || v23 == 3)
          continue;
        v9 = v23 - 1;
        if (v9 <= 1 && (*(_BYTE *)(*(_QWORD *)(v20 + 32) + 48) & 8) != 0)
          continue;
        v10 = *(unsigned __int16 *)(v20 + 44);
        v11 = (v10 >> 2) & 1;
        if ((v10 & 0xC) == 0)
          LOBYTE(v11) = 1;
        v12 = *((_QWORD *)v22 + 1);
        if ((v11 & 1) != 0)
        {
          if ((v12 & 0x80000) != 0)
            continue;
        }
        else
        {
          v18 = v20;
          if ((v12 & 0x80000) != 0)
            continue;
          while ((*(_WORD *)(v18 + 44) & 8) != 0)
          {
            v18 = *(_QWORD *)(v18 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 10) & 8) != 0)
              goto LABEL_57;
          }
        }
        if (v9 > 1 || (*(_BYTE *)(*(_QWORD *)(v20 + 32) + 48) & 0x10) == 0)
        {
          if ((v11 & 1) != 0)
          {
            if ((v12 & 0x100000) == 0)
              goto LABEL_18;
          }
          else
          {
            v19 = v20;
            if ((v12 & 0x100000) == 0)
            {
              while ((*(_WORD *)(v19 + 44) & 8) != 0)
              {
                v19 = *(_QWORD *)(v19 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 10) & 0x10) != 0)
                  goto LABEL_57;
              }
LABEL_18:
              if (!llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v20))
              {
                NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v20);
                if (NumExplicitOperands == *(_DWORD *)(v20 + 40))
                {
                  if (NumExplicitOperands)
                  {
                    v14 = *(_DWORD **)(v20 + 32);
                    v15 = 32 * NumExplicitOperands;
                    while (1)
                    {
                      v16 = (*v14 & 0x10000FF) != 0x1000000 || (*v14 & 0x5000000) == 83886080;
                      if (!v16)
                        break;
                      v14 += 8;
                      v15 -= 32;
                      if (!v15)
                        goto LABEL_28;
                    }
                  }
                  else
                  {
LABEL_28:
                    v17 = v20;
                    if ((v10 & 8) != 0)
                    {
                      v17 = v20;
                      if ((*(_QWORD *)v20 & 4) == 0)
                      {
                        v17 = v20;
                        do
                          v17 = *(_QWORD *)(v17 + 8);
                        while ((*(_WORD *)(v17 + 44) & 8) != 0);
                      }
                    }
                    sub_1C487FE80(*(_QWORD *)(v20 + 24) + 40, v20, *(_QWORD *)(v17 + 8));
                  }
                }
              }
            }
          }
        }
LABEL_57:
        ;
      }
      while (v20 != v21);
    }
    if (((v5[12] - v5[11]) & 0x7FFFFFFF8) != 0
      || (v56 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5[4] + 8) + 16))(*(_QWORD *)(v5[4] + 8), *(_QWORD *)v5[4]), v57 = v5[6] & 0xFFFFFFFFFFFFFFF8, v7 == (_QWORD *)v57))
    {
LABEL_59:
      v25 = 0;
      goto LABEL_60;
    }
    v58 = 0;
    v59 = *(unsigned __int8 *)(v56 + 323);
    while (1)
    {
      v60 = **(unsigned __int16 **)(v57 + 16);
      v61 = v57;
      if (!v59)
        break;
      if (v60 != 8267)
      {
        if ((v60 - 8269) < 2)
          goto LABEL_59;
        if ((v60 - 8273) <= 1)
        {
          if (!v58)
            goto LABEL_59;
          v168 = *(_QWORD *)(a1[31] + 8);
          v169 = v60 == 8273;
          v170 = 396960;
          v171 = 3696;
          goto LABEL_374;
        }
        goto LABEL_106;
      }
LABEL_107:
      v57 = *(_QWORD *)v57 & 0xFFFFFFFFFFFFFFF8;
      v58 = v61;
      if (v7 == (_QWORD *)v57)
        goto LABEL_59;
    }
    if (v60 == 8268)
      goto LABEL_107;
    if ((v60 - 8271) < 2)
      goto LABEL_59;
    if ((v60 - 8275) > 1)
    {
LABEL_106:
      v61 = v58;
      goto LABEL_107;
    }
    if (!v58)
      goto LABEL_59;
    v168 = *(_QWORD *)(a1[31] + 8);
    v169 = v60 == 8275;
    v170 = 397056;
    v171 = 3792;
LABEL_374:
    v201 = v171 | 0x60000u;
    if (v169)
      v170 = v201;
    *(_QWORD *)(v57 + 16) = v168 + v170;
    v202 = v58;
    if ((*(_BYTE *)v58 & 4) == 0)
    {
      v202 = v58;
      if ((*(_WORD *)(v58 + 44) & 8) != 0)
      {
        v202 = v58;
        do
          v202 = *(_QWORD *)(v202 + 8);
        while ((*(_WORD *)(v202 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v58 + 24) + 40, v58, *(_QWORD *)(v202 + 8));
    v25 = 1;
LABEL_60:
    v26 = (uint64_t *)v5[4];
    v27 = *v26;
    v214 = v5 + 6;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26[1] + 16))(v26[1], *v26) + 316))
    {
      v28 = *(_QWORD *)(v27 + 40);
      v233 = (uint64_t *)"tpp_functions";
      v236[4] = 259;
      NamedMetadata = llvm::Module::getNamedMetadata(v28, (uint64_t)&v233);
      if (NamedMetadata && (v30 = *(uint64_t **)(NamedMetadata + 48), v31 = *((unsigned int *)v30 + 2), (_DWORD)v31))
      {
        v32 = *v30;
        while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 - 8 * *(unsigned int *)(*(_QWORD *)v32 + 8)) + 128) != v27)
        {
          v32 += 8;
          if (!--v31)
            goto LABEL_66;
        }
LABEL_110:
        v62 = 0;
      }
      else
      {
LABEL_66:
        v33 = (uint64_t *)v5[11];
        if (((v5[12] - (_QWORD)v33) & 0x7FFFFFFF8) != 8)
          goto LABEL_110;
        v34 = *v33;
        v35 = *v33 + 48;
        v36 = -1;
        v37 = v35;
        do
        {
          v37 = *(_QWORD *)(v37 + 8);
          ++v36;
        }
        while (v37 != v35);
        if (v36 == 1 && **(unsigned __int16 **)(*(_QWORD *)(v34 + 56) + 16) - 789 <= 2)
        {
          FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v5);
          v39 = v5 + 5;
          sub_1C487FE80((uint64_t)(v5 + 5), FirstTerminator, (uint64_t)(v5 + 6));
          for (i = *(_QWORD *)(v34 + 56); i != v35; i = *(_QWORD *)(i + 8))
          {
            v41 = *(llvm::MachineFunction **)(v34 + 32);
            v42 = *((_QWORD *)v41 + 28);
            if (v42)
              *((_QWORD *)v41 + 28) = *(_QWORD *)v42;
            else
              v42 = sub_1C484358C((uint64_t)v41 + 128, 72, 3);
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v42, v41, (const llvm::MachineInstr *)i);
            v43 = *v39;
            *(_QWORD *)(v42 + 24) = *v39;
            v44 = *(_QWORD *)(v43 + 32);
            v45 = *(unsigned int *)(v42 + 40);
            if ((_DWORD)v45)
            {
              v49 = *(_QWORD *)(v42 + 32);
              v50 = *(_QWORD *)(v44 + 40);
              v51 = 32 * v45;
              do
              {
                if (!*(_BYTE *)v49)
                {
                  v52 = *(unsigned int *)(v49 + 4);
                  if ((int)v52 >= 0)
                    v53 = (uint64_t *)(*(_QWORD *)(v50 + 272) + 8 * v52);
                  else
                    v53 = (uint64_t *)(*(_QWORD *)(v50 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
                  v54 = *v53;
                  if (*v53)
                  {
                    v55 = *(_QWORD *)(v54 + 16);
                    *(_QWORD *)(v54 + 16) = v49;
                    *(_QWORD *)(v49 + 16) = v55;
                    if ((*(_BYTE *)(v49 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v49 + 24) = v54;
                    }
                    else
                    {
                      *(_QWORD *)(v49 + 24) = 0;
                      v53 = (uint64_t *)(v55 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v49 + 16) = v49;
                    *(_QWORD *)(v49 + 24) = 0;
                  }
                  *v53 = v49;
                }
                v49 += 32;
                v51 -= 32;
              }
              while (v51);
            }
            v46 = *(_QWORD *)(v44 + 728);
            if (v46)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 24))(v46, v42);
            v47 = *v214 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v42 = v47 | *(_QWORD *)v42 & 7;
            *(_QWORD *)(v42 + 8) = v214;
            *(_QWORD *)(v47 + 8) = v42;
            v48 = *v214 & 7 | v42;
            v7 = v5 + 6;
            *v214 = v48;
            if ((*(_BYTE *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                i = *(_QWORD *)(i + 8);
            }
          }
          v62 = 1;
        }
        else
        {
          v62 = 0;
        }
        a1 = v206;
      }
    }
    else
    {
      v62 = 0;
    }
    v63 = v7;
    v64 = *v7 & 0xFFFFFFFFFFFFFFF8;
    if (v63 == (_QWORD *)v64)
    {
      v67 = 0;
      v82 = v5 + 6;
      goto LABEL_170;
    }
    v233 = &v235;
    v234 = 0x400000000;
    v210 = v6;
    v211 = v25;
    if (!v64 || (*(_BYTE *)v64 & 4) == 0)
    {
      while ((*(_WORD *)(v64 + 44) & 4) != 0)
        v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
    }
    v208 = v62;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    while (2)
    {
      v69 = v64;
      v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
      if (!v64 || (*(_BYTE *)v64 & 4) == 0)
      {
        while ((*(_WORD *)(v64 + 44) & 4) != 0)
          v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
      }
      v70 = v5[7];
      v71 = *(unsigned __int16 **)(v69 + 16);
      v72 = *v71;
      if ((v72 - 1) > 1 || (*(_BYTE *)(*(_QWORD *)(v69 + 32) + 48) & 8) == 0)
      {
        v73 = *(unsigned __int16 *)(v69 + 44);
        v16 = (v73 & 0xC) == 0;
        v74 = (v73 >> 2) & 1;
        if (v16)
          LOBYTE(v74) = 1;
        v75 = *((_QWORD *)v71 + 1);
        if ((v74 & 1) != 0)
        {
          if ((v75 & 0x80000) == 0)
            goto LABEL_132;
LABEL_136:
          if ((v72 - 489) > 1)
            goto LABEL_149;
          if (v68)
          {
            if (v65 >= HIDWORD(v234))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)&v235, v65 + 1, 8);
              v65 = v234;
            }
            v233[v65] = v69;
            v65 = v234 + 1;
LABEL_158:
            LODWORD(v234) = v65;
            v66 = v65;
          }
          else
          {
            v68 = v69;
          }
          goto LABEL_160;
        }
        v76 = v69;
        if ((v75 & 0x80000) != 0)
          goto LABEL_136;
        while ((*(_WORD *)(v76 + 44) & 8) != 0)
        {
          v76 = *(_QWORD *)(v76 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v76 + 16) + 10) & 8) != 0)
            goto LABEL_136;
        }
LABEL_132:
        if ((v72 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v69 + 32) + 48) & 0x10) != 0)
          goto LABEL_149;
        if ((v74 & 1) != 0)
        {
          if ((v75 & 0x100000) != 0)
            goto LABEL_136;
        }
        else
        {
          v81 = v69;
          if ((v75 & 0x100000) != 0)
            goto LABEL_136;
          while ((*(_WORD *)(v81 + 44) & 8) != 0)
          {
            v81 = *(_QWORD *)(v81 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v81 + 16) + 10) & 0x10) != 0)
              goto LABEL_136;
          }
        }
        if (!llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v69))
          goto LABEL_160;
        goto LABEL_136;
      }
LABEL_149:
      if (v66)
      {
        v77 = v233;
        v78 = &v233[v66];
        do
        {
          v79 = (_BYTE *)*v77;
          v80 = (_BYTE *)*v77;
          if ((*(_BYTE *)*v77 & 4) == 0)
          {
            v80 = (_BYTE *)*v77;
            if ((*((_WORD *)v79 + 22) & 8) != 0)
            {
              v80 = (_BYTE *)*v77;
              do
                v80 = (_BYTE *)*((_QWORD *)v80 + 1);
              while ((*((_WORD *)v80 + 22) & 8) != 0);
            }
          }
          sub_1C487FE80(*((_QWORD *)v79 + 3) + 40, (uint64_t)v79, *((_QWORD *)v80 + 1));
          ++v77;
        }
        while (v77 != v78);
        v65 = 0;
        v68 = 0;
        v67 = 1;
        goto LABEL_158;
      }
      v68 = 0;
LABEL_160:
      if (v69 != v70)
        continue;
      break;
    }
    if (v233 != &v235)
      free(v233);
    v6 = v210;
    v25 = v211;
    a1 = v206;
    v82 = v5 + 6;
    v62 = v208;
LABEL_170:
    v83 = v25 | v62 | v67;
    if (!*(_BYTE *)(a1[32] + 327) || *(_QWORD *)(a1[35] + 8) == *(_QWORD *)(a1[35] + 16))
      goto LABEL_176;
    if (v82 == (_QWORD *)(*v82 & 0xFFFFFFFFFFFFFFF8) || v5[8] != v5[9])
    {
      v84 = 0;
      goto LABEL_175;
    }
    v233 = &v235;
    v234 = 0x200000000;
    v158 = v5[7];
    if ((_QWORD *)v158 == v82)
    {
LABEL_333:
      v84 = 0;
      goto LABEL_379;
    }
    v159 = 0;
    while (2)
    {
      v160 = *(unsigned __int16 **)(v158 + 16);
      v161 = *v160;
      if ((v161 - 8186) < 2 || v161 == 256)
      {
        if (v159 >= HIDWORD(v234))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)&v235, v159 + 1, 8);
          v159 = v234;
        }
        v233[v159] = v158;
        v159 = v234 + 1;
        LODWORD(v234) = v234 + 1;
        goto LABEL_294;
      }
      if ((~*((_DWORD *)v160 + 4) & 0xD00) == 0
        || (*((_QWORD *)v160 + 2) & 0xE00) == 0xE00
        || v161 == 270
        || (v161 - 4094) < 2
        || (*((_QWORD *)v160 + 2) & 0x40) != 0)
      {
        break;
      }
      v162 = *(_WORD *)(v158 + 44);
      v163 = *((_QWORD *)v160 + 1);
      if ((v162 & 0xC) == 0 || (v162 & 4) != 0)
      {
        if ((v163 & 0x80) != 0
          || llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v158)
          || (v163 & 0x200) != 0
          || (v163 & 0x20) != 0
          || (v163 & 0x800) != 0)
        {
          break;
        }
        goto LABEL_294;
      }
      v164 = v158;
      if ((v163 & 0x80) == 0)
      {
        while ((*(_WORD *)(v164 + 44) & 8) != 0)
        {
          v164 = *(_QWORD *)(v164 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v164 + 16) + 8) & 0x80) != 0)
            goto LABEL_334;
        }
        if (!llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v158))
        {
          v165 = v158;
          if ((v163 & 0x200) == 0)
          {
            while ((*(_WORD *)(v165 + 44) & 8) != 0)
            {
              v165 = *(_QWORD *)(v165 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v165 + 16) + 9) & 2) != 0)
                goto LABEL_334;
            }
            if ((v163 & 0x20) == 0)
            {
              v166 = v158;
              while ((*(_WORD *)(v166 + 44) & 8) != 0)
              {
                v166 = *(_QWORD *)(v166 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v166 + 16) + 8) & 0x20) != 0)
                  goto LABEL_334;
              }
              if ((v163 & 0x800) == 0)
              {
                v167 = v158;
                while ((*(_WORD *)(v167 + 44) & 8) != 0)
                {
                  v167 = *(_QWORD *)(v167 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v167 + 16) + 9) & 8) != 0)
                    goto LABEL_334;
                }
LABEL_294:
                if ((*(_BYTE *)v158 & 4) == 0)
                {
                  while ((*(_WORD *)(v158 + 44) & 8) != 0)
                    v158 = *(_QWORD *)(v158 + 8);
                }
                v158 = *(_QWORD *)(v158 + 8);
                if ((_QWORD *)v158 == v82)
                  goto LABEL_333;
                continue;
              }
            }
          }
        }
      }
      break;
    }
LABEL_334:
    v84 = 0;
    if ((_QWORD *)v158 != v82 && v159)
    {
      v213 = v83;
      v172 = v233;
      v173 = &v233[v159];
      do
      {
        v174 = *v172;
        v175 = *(_QWORD *)(*(_QWORD *)(*v172 + 24) + 32);
        if (v175)
        {
          v176 = *(_QWORD *)(v175 + 728);
          if (v176)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v176 + 32))(v176, *v172);
          v177 = *(unsigned int *)(v174 + 40);
          if ((_DWORD)v177)
          {
            v178 = *(_QWORD *)(v174 + 32);
            v179 = *(_QWORD *)(v175 + 40);
            v180 = 32 * v177;
            do
            {
              if (!*(_BYTE *)v178)
              {
                v181 = *(unsigned int *)(v178 + 4);
                if ((v181 & 0x80000000) != 0)
                  v182 = (uint64_t *)(*(_QWORD *)(v179 + 24) + 16 * (v181 & 0x7FFFFFFF) + 8);
                else
                  v182 = (uint64_t *)(*(_QWORD *)(v179 + 272) + 8 * v181);
                v183 = *v182;
                v185 = *(_QWORD *)(v178 + 16);
                v184 = *(_QWORD *)(v178 + 24);
                if (v178 != *v182)
                  v182 = (uint64_t *)(v185 + 24);
                *v182 = v184;
                if (v184)
                  v186 = v184;
                else
                  v186 = v183;
                *(_QWORD *)(v186 + 16) = v185;
                *(_QWORD *)(v178 + 16) = 0;
                *(_QWORD *)(v178 + 24) = 0;
              }
              v178 += 32;
              v180 -= 32;
            }
            while (v180);
          }
        }
        v187 = *(unint64_t **)(v174 + 8);
        v188 = *(_QWORD *)v174 & 0xFFFFFFFFFFFFFFF8;
        *v187 = v188 | *v187 & 7;
        *(_QWORD *)(v188 + 8) = v187;
        *(_QWORD *)v174 &= 7uLL;
        *(_QWORD *)(v174 + 8) = 0;
        v189 = v5[5];
        *(_QWORD *)(v174 + 24) = v189;
        v190 = *(_QWORD *)(v189 + 32);
        v191 = *(unsigned int *)(v174 + 40);
        if ((_DWORD)v191)
        {
          v194 = *(_QWORD *)(v174 + 32);
          v195 = *(_QWORD *)(v190 + 40);
          v196 = 32 * v191;
          do
          {
            if (!*(_BYTE *)v194)
            {
              v197 = *(unsigned int *)(v194 + 4);
              if ((int)v197 >= 0)
                v198 = (uint64_t *)(*(_QWORD *)(v195 + 272) + 8 * v197);
              else
                v198 = (uint64_t *)(*(_QWORD *)(v195 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
              v199 = *v198;
              if (*v198)
              {
                v200 = *(_QWORD *)(v199 + 16);
                *(_QWORD *)(v199 + 16) = v194;
                *(_QWORD *)(v194 + 16) = v200;
                if ((*(_BYTE *)(v194 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v194 + 24) = v199;
                }
                else
                {
                  *(_QWORD *)(v194 + 24) = 0;
                  v198 = (uint64_t *)(v200 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v194 + 16) = v194;
                *(_QWORD *)(v194 + 24) = 0;
              }
              *v198 = v194;
            }
            v194 += 32;
            v196 -= 32;
          }
          while (v196);
        }
        v192 = *(_QWORD *)(v190 + 728);
        if (v192)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v192 + 24))(v192, v174);
        v193 = *(_QWORD *)v158 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v174 = v193 | *(_QWORD *)v174 & 7;
        *(_QWORD *)(v174 + 8) = v158;
        *(_QWORD *)(v193 + 8) = v174;
        *(_QWORD *)v158 = *(_QWORD *)v158 & 7 | v174;
        ++v172;
      }
      while (v172 != v173);
      v84 = 1;
      v83 = v213;
    }
LABEL_379:
    if (v233 != &v235)
      free(v233);
LABEL_175:
    v83 |= v84;
LABEL_176:
    if (!byte_1ED7EB518)
      goto LABEL_285;
    v212 = v83;
    v85 = (uint64_t *)a1[33];
    v235 = 0x600000000;
    v233 = v85;
    v234 = (uint64_t)v236;
    v86 = *((_DWORD *)v85 + 11);
    v237 = v86;
    v87 = v86 + 63;
    if ((v86 + 63) < 0x40)
    {
      v92 = 0;
      v91 = v236;
    }
    else
    {
      v88 = v87 >> 6;
      if (v87 >= 0x1C0)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v234, (uint64_t)v236, v87 >> 6, 8);
        v91 = (_WORD *)v234;
        v89 = v235;
        LOBYTE(v86) = v237;
        v90 = v235;
      }
      else
      {
        v89 = 0;
        v90 = 0;
        v91 = v236;
      }
      bzero(&v91[4 * v89], 8 * v88);
      v92 = v90 + v88;
      LODWORD(v235) = v90 + v88;
      v82 = v5 + 6;
    }
    if ((v86 & 0x3F) != 0)
      *(_QWORD *)&v91[4 * v92 - 4] &= ~(-1 << (v86 & 0x3F));
    if (v92)
      bzero(v91, 8 * v92);
    v93 = (llvm *)llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v233, (const llvm::MachineBasicBlock *)v5);
    v94 = (llvm::Value **)v5[4];
    v95 = v5[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v95 || (*(_BYTE *)v95 & 4) == 0)
    {
      while ((*(_WORD *)(v95 + 44) & 4) != 0)
        v95 = *(_QWORD *)v95 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_190:
    if ((_QWORD *)v95 != v82)
    {
      v96 = *(unsigned __int16 **)(v95 + 16);
      if (*v96 - 13 < 5)
        goto LABEL_198;
      v97 = *((_QWORD *)v96 + 1);
      if ((*(_WORD *)(v95 + 44) & 0xC) != 0 && (*(_WORD *)(v95 + 44) & 4) == 0)
      {
        v99 = v95;
        if ((v97 & 0x80) == 0)
        {
          do
          {
            if ((*(_WORD *)(v99 + 44) & 8) == 0)
              goto LABEL_197;
            v99 = *(_QWORD *)(v99 + 8);
          }
          while ((*(_BYTE *)(*(_QWORD *)(v99 + 16) + 8) & 0x80) == 0);
        }
      }
      else if ((v97 & 0x80) == 0)
      {
        goto LABEL_197;
      }
      v100 = llvm::dbgs(v93);
      v101 = (void *)*((_QWORD *)v100 + 4);
      if (*((_QWORD *)v100 + 3) - (_QWORD)v101 > 0x22uLL)
      {
        qmemcpy(v101, "Registers live over call instance: ", 35);
        *((_QWORD *)v100 + 4) += 35;
      }
      else
      {
        v100 = llvm::raw_ostream::write(v100, "Registers live over call instance: ", 0x23uLL);
      }
      v102 = llvm::dbgs(v100);
      v103 = v102;
      v104 = (_DWORD *)*((_QWORD *)v102 + 4);
      if (*((_QWORD *)v102 + 3) - (_QWORD)v104 > 3uLL)
      {
        *v104 = 540697186;
        *((_QWORD *)v102 + 4) += 4;
      }
      else
      {
        v103 = llvm::raw_ostream::write(v102, "bb: ", 4uLL);
      }
      v105 = (llvm::Value *)v5[2];
      if (v105)
      {
        Name = llvm::Value::getName(v105);
        v108 = v106;
        v105 = (llvm::Value *)*((_QWORD *)v103 + 4);
        if (v106 <= *((_QWORD *)v103 + 3) - (_QWORD)v105)
        {
          if (v106)
          {
            v105 = (llvm::Value *)memcpy(v105, Name, v106);
            *((_QWORD *)v103 + 4) += v108;
          }
        }
        else
        {
          v105 = llvm::raw_ostream::write(v103, Name, v106);
        }
      }
      v109 = llvm::dbgs(v105);
      v110 = v109;
      v111 = *((_QWORD *)v109 + 4);
      if ((unint64_t)(*((_QWORD *)v109 + 3) - v111) > 9)
      {
        *(_WORD *)(v111 + 8) = 8250;
        *(_QWORD *)v111 = *(_QWORD *)": caller: ";
        *((_QWORD *)v109 + 4) += 10;
      }
      else
      {
        v110 = llvm::raw_ostream::write(v109, ": caller: ", 0xAuLL);
      }
      v113 = llvm::Value::getName(*v94);
      v114 = v112;
      v115 = (void *)*((_QWORD *)v110 + 4);
      if (v112 <= *((_QWORD *)v110 + 3) - (_QWORD)v115)
      {
        if (v112)
        {
          v115 = memcpy(v115, v113, v112);
          *((_QWORD *)v110 + 4) += v114;
        }
      }
      else
      {
        v115 = llvm::raw_ostream::write(v110, v113, v112);
      }
      v116 = llvm::dbgs((llvm *)v115);
      v117 = *((_QWORD *)v116 + 4);
      if ((unint64_t)(*((_QWORD *)v116 + 3) - v117) > 9)
      {
        *(_WORD *)(v117 + 8) = 8250;
        *(_QWORD *)v117 = *(_QWORD *)": callee: ";
        *((_QWORD *)v116 + 4) += 10;
      }
      else
      {
        v116 = llvm::raw_ostream::write(v116, ": callee: ", 0xAuLL);
      }
      v118 = *(llvm::raw_ostream **)(v95 + 32);
      v119 = llvm::dbgs(v116);
      llvm::MachineOperand::print(v118, v119, 0, (uint64_t)v85, 0);
      v121 = llvm::dbgs(v120);
      v122 = *((_QWORD *)v121 + 4);
      v209 = v94;
      if ((unint64_t)(*((_QWORD *)v121 + 3) - v122) > 0xA)
      {
        *(_DWORD *)(v122 + 7) = 540698678;
        *(_QWORD *)v122 = *(_QWORD *)"\n  gpr16h: ";
        *((_QWORD *)v121 + 4) += 11;
      }
      else
      {
        v121 = llvm::raw_ostream::write(v121, "\n  gpr16h: ", 0xBuLL);
      }
      v123 = 0;
      v124 = 185;
      while (1)
      {
        if (v233)
          v125 = v233 + 1;
        else
          v125 = 0;
        v126 = *(unsigned int *)(*v125 + 24 * v124 + 16);
        v127 = (_WORD *)(v125[6] + ((v126 >> 3) & 0x1FFFFFFE));
        v129 = *v127;
        v128 = v127 + 1;
        v130 = v129 + (v126 & 0xF) * v124;
        while (((*(_QWORD *)(v234 + 8 * (v130 >> 6)) >> v130) & 1) == 0)
        {
          v131 = *v128++;
          v130 += v131;
          if (!v131)
            goto LABEL_242;
        }
        v132 = llvm::dbgs(v121);
        v133 = operator new(0x28uLL);
        *(_QWORD *)v133 = &off_1E814D010;
        v133[2] = v124;
        *((_QWORD *)v133 + 2) = v85;
        v133[6] = 0;
        *((_QWORD *)v133 + 4) = 0;
        v232 = (llvm *)v133;
        sub_1C52C9630((llvm::raw_ostream *)v133, v132);
        v134 = (_WORD *)*((_QWORD *)v132 + 4);
        if (*((_QWORD *)v132 + 3) - (_QWORD)v134 > 1uLL)
        {
          *v134 = 8236;
          *((_QWORD *)v132 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v132, ", ", 2uLL);
        }
        v121 = v232;
        if (v232 == (llvm *)v231)
        {
          v135 = (uint64_t (**)(void))(v231[0] + 32);
        }
        else
        {
          if (!v232)
            goto LABEL_241;
          v135 = (uint64_t (**)(void))(*(_QWORD *)v232 + 40);
        }
        v121 = (llvm *)(*v135)();
LABEL_241:
        ++v123;
LABEL_242:
        if (++v124 == 313)
        {
          v136 = llvm::dbgs(v121);
          v137 = *((_QWORD *)v136 + 4);
          if ((unint64_t)(*((_QWORD *)v136 + 3) - v137) > 2)
          {
            *(_BYTE *)(v137 + 2) = 32;
            *(_WORD *)v137 = 14880;
            *((_QWORD *)v136 + 4) += 3;
          }
          else
          {
            v136 = llvm::raw_ostream::write(v136, " : ", 3uLL);
          }
          v138 = sub_1C5E21910(v136, v123, 0, 0, 0);
          v139 = llvm::dbgs(v138);
          v140 = *((_QWORD *)v139 + 4);
          if ((unint64_t)(*((_QWORD *)v139 + 3) - v140) > 0xA)
          {
            *(_DWORD *)(v140 + 7) = 540699702;
            *(_QWORD *)v140 = *(_QWORD *)"\n  gpr16l: ";
            *((_QWORD *)v139 + 4) += 11;
          }
          else
          {
            v139 = llvm::raw_ostream::write(v139, "\n  gpr16l: ", 0xBuLL);
          }
          v141 = 0;
          v142 = 313;
          while (2)
          {
            if (v233)
              v143 = v233 + 1;
            else
              v143 = 0;
            v144 = *(unsigned int *)(*v143 + 24 * v142 + 16);
            v145 = (_WORD *)(v143[6] + ((v144 >> 3) & 0x1FFFFFFE));
            v147 = *v145;
            v146 = v145 + 1;
            v148 = v147 + (v144 & 0xF) * v142;
            while (((*(_QWORD *)(v234 + 8 * (v148 >> 6)) >> v148) & 1) == 0)
            {
              v149 = *v146++;
              v148 += v149;
              if (!v149)
                goto LABEL_265;
            }
            v150 = llvm::dbgs(v139);
            v151 = operator new(0x28uLL);
            *(_QWORD *)v151 = &off_1E814D010;
            v151[2] = v142;
            *((_QWORD *)v151 + 2) = v85;
            v151[6] = 0;
            *((_QWORD *)v151 + 4) = 0;
            v232 = (llvm *)v151;
            sub_1C52C9630((llvm::raw_ostream *)v151, v150);
            v152 = (_WORD *)*((_QWORD *)v150 + 4);
            if (*((_QWORD *)v150 + 3) - (_QWORD)v152 > 1uLL)
            {
              *v152 = 8236;
              *((_QWORD *)v150 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v150, ", ", 2uLL);
            }
            v139 = v232;
            if (v232 == (llvm *)v231)
            {
              v153 = (uint64_t (**)(void))(v231[0] + 32);
LABEL_263:
              v139 = (llvm *)(*v153)();
            }
            else if (v232)
            {
              v153 = (uint64_t (**)(void))(*(_QWORD *)v232 + 40);
              goto LABEL_263;
            }
            ++v141;
LABEL_265:
            if (++v142 != 441)
              continue;
            break;
          }
          v154 = llvm::dbgs(v139);
          v155 = v154;
          v156 = *((_QWORD *)v154 + 4);
          if ((unint64_t)(*((_QWORD *)v154 + 3) - v156) > 2)
          {
            *(_BYTE *)(v156 + 2) = 32;
            *(_WORD *)v156 = 14880;
            *((_QWORD *)v154 + 4) += 3;
          }
          else
          {
            v155 = llvm::raw_ostream::write(v154, " : ", 3uLL);
          }
          v94 = v209;
          sub_1C5E21910(v155, v141, 0, 0, 0);
          v157 = (_BYTE *)*((_QWORD *)v155 + 4);
          if (*((_BYTE **)v155 + 3) == v157)
          {
            llvm::raw_ostream::write(v155, "\n", 1uLL);
          }
          else
          {
            *v157 = 10;
            ++*((_QWORD *)v155 + 4);
          }
          v82 = v5 + 6;
LABEL_197:
          v93 = (llvm *)llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v233, (const llvm::MachineInstr *)v95);
LABEL_198:
          v95 = *(_QWORD *)v95 & 0xFFFFFFFFFFFFFFF8;
          if (!v95 || (*(_BYTE *)v95 & 4) == 0)
          {
            while ((*(_WORD *)(v95 + 44) & 4) != 0)
              v95 = *(_QWORD *)v95 & 0xFFFFFFFFFFFFFFF8;
          }
          goto LABEL_190;
        }
      }
    }
    if ((_WORD *)v234 != v236)
      free((void *)v234);
    v83 = v212;
LABEL_285:
    v6 |= v83;
    v5 = (uint64_t *)v5[1];
  }
  while (v5 != v207);
  v203 = v228;
  v205[91] = 0;
  v221 = &off_1E7FA1778;
  v222 = (void (**)())&unk_1E7FA17D0;
  if (v203 != v230)
    free(v203);
LABEL_389:
  v222 = off_1E7FA1810;
  if (v224 != v223)
    free(v224);
  v215 = off_1E7FA1810;
  if (v217 != v216)
    free(v217);
  return v6 & 1;
}

_QWORD *sub_1C495E980(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  return a1;
}

void sub_1C495E9C4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C495EA28(uint64_t a1, char *__s, __n128 *a3, _BYTE **a4, _WORD *a5)
{
  size_t v10;
  __n128 result;
  _BYTE *v12;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  v12 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

uint64_t sub_1C495EAB8()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Show the number of registers live over each call";
  v4.n128_u64[1] = 48;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7EB498, "agx2-post-ra-peephole-regs-live-over-calls", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EB498, &dword_1C475E000);
}

uint64_t sub_1C495EB38(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 pseudo wait placement pass";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "agx2-pseudo-wait";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &byte_1EF8EF738;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C495EBC8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C495EBC8()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = operator new();
  v2 = byte_1EF8EF738;
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&v2);
  *result = &off_1E7FA4610;
  return result;
}

void sub_1C495EC18(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C495ECAC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C495ED38()
{
  return "AGX2 pseudo wait placement pass";
}

uint64_t sub_1C495ED48(uint64_t a1, unint64_t a2)
{
  return (a2 >> 2) & 1;
}

uint64_t sub_1C495ED50(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t sub_1C495ED5C(llvm::RegisterBankInfo *a1, uint64_t a2)
{
  uint64_t InstrMappingImpl;
  int v7;
  uint64_t v10;
  const llvm::RegisterBankInfo::ValueMapping *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  int v18;
  uint64_t ValueMapping;
  unsigned int v20;
  int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  InstrMappingImpl = llvm::RegisterBankInfo::getInstrMappingImpl(a1, (const llvm::MachineInstr *)a2);
  if (*(_DWORD *)InstrMappingImpl == -2 || *(_QWORD *)(InstrMappingImpl + 8) == 0)
  {
    v7 = **(unsigned __int16 **)(a2 + 16);
    if ((v7 - 18) <= 0x33 && ((1 << (v7 - 18)) & 0x8000000000003) != 0 || v7 == 0)
      v20 = 1;
    else
      v20 = *(_DWORD *)(a2 + 40);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
    v23 = v25;
    v24 = 0x800000000;
    sub_1C4848C0C((unsigned int *)&v23, v20, 0);
    if (v20)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(a2 + 32);
        if (!*(_BYTE *)(v13 + 4 * v12))
        {
          v14 = *(_DWORD *)(v13 + 4 * v12 + 4);
          if (v14 < 0 && (v15 = v14 & 0x7FFFFFFF, v15 < *(_DWORD *)(v10 + 432)))
            v16 = *(_QWORD *)(*(_QWORD *)(v10 + 424) + 8 * v15);
          else
            v16 = 0;
          v22 = v16;
          v18 = sub_1C4825F50(&v22);
          if ((_DWORD)v17 == 1)
          {
            v21 = v18;
            v18 = v21;
          }
          ValueMapping = llvm::RegisterBankInfo::getValueMapping(a1, 0, v18, (const llvm::RegisterBank *)&unk_1ED7EB568);
          *(_QWORD *)((char *)v23 + v12) = ValueMapping;
        }
        v12 += 8;
      }
      while (8 * v20 != v12);
    }
    v11 = (const llvm::RegisterBankInfo::ValueMapping *)sub_1C620FA4C((uint64_t)a1, (uint64_t **)v23, (uint64_t)v23 + 8 * v24);
    InstrMappingImpl = llvm::RegisterBankInfo::getInstructionMappingImpl(a1, 0, -1, 0, v11, v20);
    if (v23 != v25)
      free(v23);
  }
  return InstrMappingImpl;
}

uint64_t *sub_1C495EF58(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E814A4B0;
  MEMORY[0x1CAA32FB4](a1[15], 8);
  sub_1C495EFB4(a1 + 12);
  sub_1C495F034(a1 + 9);
  sub_1C495F0B4(a1 + 6);
  sub_1C495F134(a1 + 3);
  return a1;
}

uint64_t *sub_1C495EFB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          MEMORY[0x1CAA32FC0](v6, 0x1060C40F2FE4B89);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C495F034(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          MEMORY[0x1CAA32F9C](v6, 0x1060C80ADAFC7CALL);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C495F0B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          MEMORY[0x1CAA32FC0](v6, 0x1060C40ADAFC7CALL);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C495F134(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          MEMORY[0x1CAA32FC0](v6, 0x1060C40832E3BDALL);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C495F1B4()
{
  llvm::RegisterBank::RegisterBank((llvm::RegisterBank *)&unk_1ED7EB568, 0, "GPR", 384, dword_1C660B77C, 47);
  return __cxa_atexit((void (*)(void *))sub_1C6147B64, &unk_1ED7EB568, &dword_1C475E000);
}

uint64_t sub_1C495F20C(uint64_t a1, int a2, int a3)
{
  return byte_1C660CFFD[181 * byte_1C660CF48[a2 - 1] + a3 - 1];
}

uint64_t sub_1C495F238(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = byte_1C660E040[a2 - 1];
  v4 = qword_1C6610C68[2 * v3];
  if (!v4)
    return 0;
  result = 0;
  v6 = &qword_1C6610C68[2 * v3 + 2];
  do
  {
    v7 = v4 & a3;
    v8 = __ROR8__(v7, -*((_BYTE *)v6 - 8));
    if (*((_BYTE *)v6 - 8))
      v7 = v8;
    result |= v7;
    v9 = *v6;
    v6 += 2;
    v4 = v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1C495F298(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = byte_1C660E040[a2 - 1];
  if (!qword_1C6610C68[2 * v3])
    return 0;
  result = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * a2) & a3;
  v7 = &qword_1C6610C68[2 * v3 + 2];
  do
  {
    v8 = __ROR8__(v6, *((_BYTE *)v7 - 8));
    if (*((_BYTE *)v7 - 8))
      v9 = v8;
    else
      v9 = v6;
    result |= v9;
    v10 = *v7;
    v7 += 2;
  }
  while (v10);
  return result;
}

uint64_t sub_1C495F300(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;

  if (a3)
  {
    v3 = (char *)&unk_1C660E0F5 + 181 * *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
    if (v3[a3 - 1])
      return *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * (v3[a3 - 1] - 1));
    else
      return 0;
  }
  return a2;
}

char *sub_1C495F344(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1C6610230 + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
}

uint64_t sub_1C495F35C()
{
  return 1;
}

uint64_t sub_1C495F364()
{
  return 2;
}

uint64_t sub_1C495F36C(uint64_t a1, uint64_t a2, int a3)
{
  return word_1C66103A8[a3];
}

char *sub_1C495F37C(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1C66103DC + 4 * byte_1C66103AC[*(unsigned __int16 *)(*(_QWORD *)a2 + 24)];
}

char *sub_1C495F3A0(uint64_t a1, int a2)
{
  return (char *)&unk_1C66103DC + 4 * byte_1C66103E8[a2];
}

uint64_t sub_1C495F3BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned __int16 **v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_1C6147C40(a1);
  *(_QWORD *)v2 = &off_1E7FA6230;
  v3 = (uint64_t *)(v2 + 280);
  *(_QWORD *)(v2 + 280) = v2 + 296;
  *(_QWORD *)(v2 + 288) = 0x600000000;
  *(_DWORD *)(v2 + 344) = 0;
  sub_1C4833580((_DWORD *)(v2 + 280), *(_DWORD *)(v2 + 16), 0);
  v4 = **(unsigned __int16 ****)(*(_QWORD *)(a1 + 240) + 72);
  v5 = *((unsigned __int16 *)v4 + 10);
  if (*((_WORD *)v4 + 10))
  {
    v6 = *v4;
    v7 = *v3;
    v8 = 2 * v5;
    do
    {
      v9 = *v6++;
      *(_QWORD *)(v7 + (((unint64_t)v9 >> 3) & 0x1FF8)) |= 1 << v9;
      v8 -= 2;
    }
    while (v8);
  }
  return a1;
}

void *sub_1C495F460(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 255)
    return &unk_1C6610AD0;
  else
    return &unk_1C661237C;
}

void sub_1C495F47C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  const void **v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t NamedMetadata;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  _WORD *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  unsigned int j;
  unsigned __int16 *v44;
  int v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  _WORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v59;
  unsigned __int16 *v60;
  _WORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 v70;
  unsigned __int16 *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t **v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  _QWORD *v87;
  unsigned int k;
  unsigned __int16 *v89;
  int v90;
  unsigned __int16 *v91;
  unsigned int v92;
  _QWORD *v93;
  unsigned int m;
  unsigned __int16 *v95;
  int v96;
  unsigned __int16 *v97;
  unsigned __int16 v98;
  unsigned __int16 *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  char v104;
  uint64_t **v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int16 *v117;
  _WORD *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int16 *v129;
  _WORD *v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v136;
  uint64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int16 *v142;
  _WORD *v143;
  int v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  int v149;
  double v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int16 *v156;
  _WORD *v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int v163;
  unsigned int v164;
  _QWORD *v165;
  unsigned int n;
  unsigned __int16 *v167;
  int v168;
  unsigned __int16 *v169;
  unsigned int v170;
  _QWORD *v171;
  unsigned int ii;
  unsigned __int16 *v173;
  int v174;
  unsigned __int16 *v175;
  unsigned __int16 *v176;
  _QWORD *v177;
  int v178;
  unsigned __int16 *v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int nn;
  unsigned __int16 *v184;
  int v185;
  unsigned __int16 *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int16 *v190;
  _WORD *v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v197;
  _QWORD *v198;
  uint64_t *kk;
  uint64_t mm;
  uint64_t v201;
  uint64_t v202;
  int **v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  _QWORD *v207;
  unsigned int jj;
  unsigned __int16 *v209;
  int v210;
  unsigned __int16 *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  _BOOL4 v219;
  _BOOL4 v220;
  uint64_t *v221;
  int v222;
  const char *v223;
  char v224;
  __int16 v225;

  v6 = (_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0x600000000;
  v7 = *(unsigned int *)(a1 + 288);
  v8 = (const void **)(a1 + 280);
  if ((_DWORD)v7)
    v9 = v8 == (const void **)a3;
  else
    v9 = 1;
  if (v9)
    goto LABEL_11;
  if (v7 < 7)
  {
    v10 = *(_DWORD *)(a1 + 288);
LABEL_9:
    memcpy(v6, *v8, 8 * v10);
    goto LABEL_10;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (uint64_t)v6, v7, 8);
  v10 = *(_DWORD *)(a1 + 288);
  if (v10)
  {
    v6 = *(_QWORD **)a3;
    goto LABEL_9;
  }
LABEL_10:
  *(_DWORD *)(a3 + 8) = v7;
LABEL_11:
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 344);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 176))(a2[2]);
  v12 = *(_QWORD *)(*a2 + 40);
  sub_1C5EAE59C(v12, 0, (uint64_t)&v223);
  v13 = (int)v223;
  if (v223 >= 0x80)
    v13 = 128;
  if (v224)
    v14 = v13;
  else
    v14 = 128;
  v223 = "agx.reduce.reg.pressure";
  v225 = 259;
  v216 = v12;
  NamedMetadata = llvm::Module::getNamedMetadata(v12, (uint64_t)&v223);
  if (NamedMetadata)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                    + 128);
    v17 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = (_QWORD *)*v17;
    if (v14 >= 0x10)
      v19 = 16;
    else
      v19 = v14;
    if (v18)
      v14 = v19;
  }
  v20 = a2[6];
  if (!v20)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v20;
  }
  v21 = sub_1C495C228((uint64_t)a2);
  v22 = a2[7];
  v23 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  v24 = sub_1C5EAAFA0(*a2, a2[43]);
  v25 = 1;
  if (v23 && v23 != 8 && v23 != 255)
    v25 = *(_BYTE *)(v22 + 62) != 0;
  v218 = *(unsigned __int8 *)(v20 + 453);
  if (!v24)
    goto LABEL_42;
  v26 = (uint64_t *)a2[41];
LABEL_32:
  if (v26 == a2 + 40)
  {
LABEL_42:
    v29 = 0;
  }
  else
  {
    for (i = v26[7]; ; i = *(_QWORD *)(i + 8))
    {
      if ((uint64_t *)i == v26 + 6)
      {
        v26 = (uint64_t *)v26[1];
        goto LABEL_32;
      }
      v28 = *(_QWORD *)(i + 16);
      if ((*(_BYTE *)(v28 + 19) & 2) != 0)
      {
        if (*(_BYTE *)(v28 + 4))
          break;
      }
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v30 = *(_QWORD *)(a1 + 8);
    v32 = *(_QWORD *)(a1 + 48);
    v31 = *(_QWORD *)(a1 + 56);
    v33 = (unsigned __int16 *)(v31 + (((unint64_t)*(unsigned int *)(v30 + 7624) >> 3) & 0x1FFFFFFE));
    v35 = *v33;
    v34 = v33 + 1;
    v36 = v35 + 317 * (*(_DWORD *)(v30 + 7624) & 0xF);
    v29 = 1;
    while (1)
    {
      v37 = 4 * (unsigned __int16)v36;
      v38 = *(unsigned __int16 *)(v32 + v37);
      if (*(_WORD *)(v32 + v37) && v31 != 0)
        break;
      v40 = (unsigned __int16)*v34++;
      v36 += v40;
      if (!v40)
        goto LABEL_58;
    }
    v41 = *(unsigned __int16 *)(v32 + 4 * (unsigned __int16)v36 + 2) << 16;
    v42 = *(_QWORD **)a3;
    for (j = *(unsigned __int16 *)(v32 + 4 * (unsigned __int16)v36); ; j = v38)
    {
      while (1)
      {
        v44 = (unsigned __int16 *)(v31 + 2 * *(unsigned int *)(v30 + 24 * v38 + 8));
        do
        {
          v42[(unsigned __int16)j >> 6] |= 1 << j;
          v45 = *v44++;
          j += v45;
        }
        while (v45);
        v38 = HIWORD(v41);
        if (!(_DWORD)v38)
          break;
        j = HIWORD(v41);
        v41 >>= 16;
      }
      if (!*v34)
        break;
      v36 += (unsigned __int16)*v34++;
      v46 = (unsigned __int16 *)(v32 + 4 * (unsigned __int16)v36);
      v38 = *v46;
      v41 = v46[1] << 16;
    }
    v29 = 1;
  }
LABEL_58:
  v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2[1] + 16))(a2[1], *a2);
  if (*(_BYTE *)(v47 + 318))
    v48 = 56;
  else
    v48 = 313;
  v219 = v25;
  v217 = v47;
  if (v25)
  {
    if (*(_BYTE *)(v47 + 319))
      v48 = 56;
  }
  else if ((v21 | v29) != 1)
  {
    goto LABEL_79;
  }
  v49 = *(_QWORD *)(a1 + 8);
  v51 = *(_QWORD *)(a1 + 48);
  v50 = *(_QWORD *)(a1 + 56);
  v52 = (unsigned __int16 *)(v50 + (((unint64_t)*(unsigned int *)(v49 + 24 * v48 + 16) >> 3) & 0x1FFFFFFE));
  v54 = *v52;
  v53 = v52 + 1;
  v55 = v54 + (*(_DWORD *)(v49 + 24 * v48 + 16) & 0xF) * v48;
  while (1)
  {
    v56 = 4 * (unsigned __int16)v55;
    v57 = *(unsigned __int16 *)(v51 + v56);
    if (*(_WORD *)(v51 + v56) && v50 != 0)
      break;
    v59 = (unsigned __int16)*v53++;
    v55 += v59;
    if (!v59)
      goto LABEL_72;
  }
  v86 = *(unsigned __int16 *)(v51 + 4 * (unsigned __int16)v55 + 2) << 16;
  v87 = *(_QWORD **)a3;
  for (k = *(unsigned __int16 *)(v51 + 4 * (unsigned __int16)v55); ; k = v57)
  {
    while (1)
    {
      v89 = (unsigned __int16 *)(v50 + 2 * *(unsigned int *)(v49 + 24 * v57 + 8));
      do
      {
        v87[(unsigned __int16)k >> 6] |= 1 << k;
        v90 = *v89++;
        k += v90;
      }
      while (v90);
      v57 = HIWORD(v86);
      if (!(_DWORD)v57)
        break;
      k = HIWORD(v86);
      v86 >>= 16;
    }
    if (!*v53)
      break;
    v55 += (unsigned __int16)*v53++;
    v91 = (unsigned __int16 *)(v51 + 4 * (unsigned __int16)v55);
    v57 = *v91;
    v86 = v91[1] << 16;
  }
LABEL_72:
  v60 = (unsigned __int16 *)(v50 + (((unint64_t)*(unsigned int *)(v49 + 4552) >> 3) & 0x1FFFFFFE));
  v62 = *v60;
  v61 = v60 + 1;
  v63 = v62 + 189 * (*(_DWORD *)(v49 + 4552) & 0xF);
  while (1)
  {
    v64 = 4 * (unsigned __int16)v63;
    v65 = *(unsigned __int16 *)(v51 + v64);
    if (*(_WORD *)(v51 + v64) && v50 != 0)
      break;
    v67 = (unsigned __int16)*v61++;
    v63 += v67;
    if (!v67)
      goto LABEL_79;
  }
  v92 = *(unsigned __int16 *)(v51 + 4 * (unsigned __int16)v63 + 2) << 16;
  v93 = *(_QWORD **)a3;
  for (m = *(unsigned __int16 *)(v51 + 4 * (unsigned __int16)v63); ; m = v65)
  {
    while (1)
    {
      v95 = (unsigned __int16 *)(v50 + 2 * *(unsigned int *)(v49 + 24 * v65 + 8));
      do
      {
        v93[(unsigned __int16)m >> 6] |= 1 << m;
        v96 = *v95++;
        m += v96;
      }
      while (v96);
      v65 = HIWORD(v92);
      if (!(_DWORD)v65)
        break;
      m = HIWORD(v92);
      v92 >>= 16;
    }
    if (!*v61)
      break;
    v63 += (unsigned __int16)*v61++;
    v97 = (unsigned __int16 *)(v51 + 4 * (unsigned __int16)v63);
    v65 = *v97;
    v92 = v97[1] << 16;
  }
LABEL_79:
  v220 = v21;
  v221 = (uint64_t *)a3;
  if (v14 != 128)
  {
    v68 = *(_QWORD *)(a1 + 56);
    if (v68)
    {
      v69 = *(_QWORD *)(a1 + 8);
      v215 = v14;
      v70 = v14 + 313;
      v71 = (unsigned __int16 *)(v68 + 2 * *(unsigned int *)(v69 + 24 * (v14 + 313) + 8));
      v72 = *(_QWORD **)a3;
      while (1)
      {
        v73 = v70;
        v74 = v70 >> 6;
        v75 = v72[v74];
        if (((v75 >> v70) & 1) != 0)
          goto LABEL_97;
        v76 = 0;
        v77 = v70 & 0x3F;
        v78 = *(uint64_t ***)(v11 + 240);
        v79 = v73 >> 3;
        do
        {
          if ((_DWORD)v73)
          {
            v80 = **v78;
            if (v79 < *(unsigned __int16 *)(v80 + 22)
              && ((1 << (v73 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v80 + 8) + v79)) != 0
              && (!v76
               || *v78 != v76
               && ((*(_DWORD *)(v76[1] + ((*(unsigned __int16 *)(v80 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v80 + 24)) & 1) != 0))
            {
              v76 = *v78;
            }
          }
          ++v78;
        }
        while (v78 != *(uint64_t ***)(v11 + 248));
        v81 = *(unsigned __int16 *)(*(_QWORD *)*v76 + 2 * *(unsigned __int16 *)(*v76 + 20) - 2);
        v82 = v81 + 1;
        if (v81 + 1 == (_DWORD)v73)
          goto LABEL_97;
        if ((_DWORD)v74 == v82 >> 6)
        {
          v83 = (1 << v82) + (-1 << v77);
        }
        else
        {
          v72[v74] = v75 | (-1 << v77);
          v85 = (v73 + 63) & 0x1FFC0;
          if (v85 + 64 <= v82)
          {
            v213 = v69;
            v214 = v68;
            memset((char *)v72 + (((v73 + 63) >> 3) & 0x3FF8), 255, (((v81 - v85 - 63) >> 3) & 0x1FFFFFF8) + 8);
            v69 = v213;
            v68 = v214;
            v85 = ((v81 - 63 - ((v73 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v73 + 63) & 0x1FFC0) + 64;
          }
          if (v85 > v81)
            goto LABEL_97;
          v83 = ~(-1 << v82);
          v74 = v85 >> 6;
          v75 = v72[v74];
        }
        v72[v74] = v75 | v83;
LABEL_97:
        v84 = *v71++;
        v70 = v84 + v73;
        if (!v84)
        {
          v98 = v215 + 185;
          v99 = (unsigned __int16 *)(v68 + 2 * *(unsigned int *)(v69 + 24 * (v215 + 185) + 8));
          while (1)
          {
            v100 = v98;
            v101 = v98 >> 6;
            v102 = v72[v101];
            if (((v102 >> v98) & 1) != 0)
              goto LABEL_130;
            v103 = 0;
            v104 = v98 & 0x3F;
            v105 = *(uint64_t ***)(v11 + 240);
            v106 = v100 >> 3;
            do
            {
              if ((_DWORD)v100)
              {
                v107 = **v105;
                if (v106 < *(unsigned __int16 *)(v107 + 22)
                  && ((1 << (v100 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v107 + 8) + v106)) != 0
                  && (!v103
                   || *v105 != v103
                   && ((*(_DWORD *)(v103[1] + ((*(unsigned __int16 *)(v107 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v107 + 24)) & 1) != 0))
                {
                  v103 = *v105;
                }
              }
              ++v105;
            }
            while (v105 != *(uint64_t ***)(v11 + 248));
            v108 = *(unsigned __int16 *)(*(_QWORD *)*v103 + 2 * *(unsigned __int16 *)(*v103 + 20) - 2);
            v109 = v108 + 1;
            if (v108 + 1 == (_DWORD)v100)
              goto LABEL_130;
            if ((_DWORD)v101 == v109 >> 6)
            {
              v110 = (1 << v109) + (-1 << v104);
            }
            else
            {
              v72[v101] = v102 | (-1 << v104);
              v112 = (v100 + 63) & 0x1FFC0;
              if (v112 + 64 <= v109)
              {
                memset((char *)v72 + (((v100 + 63) >> 3) & 0x3FF8), 255, (((v108 - v112 - 63) >> 3) & 0x1FFFFFF8) + 8);
                v112 = ((v108 - 63 - ((v100 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v100 + 63) & 0x1FFC0) + 64;
              }
              if (v112 > v108)
                goto LABEL_130;
              v110 = ~(-1 << v109);
              v101 = v112 >> 6;
              v102 = v72[v101];
            }
            v72[v101] = v102 | v110;
LABEL_130:
            v111 = *v99++;
            v98 = v111 + v100;
            if (!v111)
              goto LABEL_136;
          }
        }
      }
    }
  }
LABEL_136:
  v113 = (uint64_t *)a3;
  if (v219)
  {
    v114 = *(_QWORD *)(a1 + 8);
    v116 = *(_QWORD *)(a1 + 48);
    v115 = *(_QWORD *)(a1 + 56);
    v117 = (unsigned __int16 *)(v115 + (((unint64_t)*(unsigned int *)(v114 + 1600) >> 3) & 0x1FFFFFFE));
    v119 = *v117;
    v118 = v117 + 1;
    v120 = v119 + 66 * (*(_DWORD *)(v114 + 1600) & 0xF);
    while (1)
    {
      v121 = 4 * (unsigned __int16)v120;
      v122 = *(unsigned __int16 *)(v116 + v121);
      if (*(_WORD *)(v116 + v121) && v115 != 0)
        break;
      v124 = (unsigned __int16)*v118++;
      v120 += v124;
      if (!v124)
        goto LABEL_144;
    }
    v164 = *(unsigned __int16 *)(v116 + 4 * (unsigned __int16)v120 + 2) << 16;
    v165 = *(_QWORD **)a3;
    for (n = *(unsigned __int16 *)(v116 + 4 * (unsigned __int16)v120); ; n = v122)
    {
      while (1)
      {
        v167 = (unsigned __int16 *)(v115 + 2 * *(unsigned int *)(v114 + 24 * v122 + 8));
        do
        {
          v165[(unsigned __int16)n >> 6] |= 1 << n;
          v168 = *v167++;
          n += v168;
        }
        while (v168);
        v122 = HIWORD(v164);
        if (!(_DWORD)v122)
          break;
        n = HIWORD(v164);
        v164 >>= 16;
      }
      if (!*v118)
        break;
      v120 += (unsigned __int16)*v118++;
      v169 = (unsigned __int16 *)(v116 + 4 * (unsigned __int16)v120);
      v122 = *v169;
      v164 = v169[1] << 16;
    }
LABEL_144:
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2[43] + 592))(a2[43], 102))
      v125 = 64;
    else
      v125 = 61;
    v126 = *(_QWORD *)(a1 + 8);
    v128 = *(_QWORD *)(a1 + 48);
    v127 = *(_QWORD *)(a1 + 56);
    v129 = (unsigned __int16 *)(v127 + (((unint64_t)*(unsigned int *)(v126 + 24 * v125 + 16) >> 3) & 0x1FFFFFFE));
    v131 = *v129;
    v130 = v129 + 1;
    v132 = v131 + (*(_DWORD *)(v126 + 24 * v125 + 16) & 0xF) * v125;
    while (1)
    {
      v133 = 4 * (unsigned __int16)v132;
      v134 = *(unsigned __int16 *)(v128 + v133);
      if (*(_WORD *)(v128 + v133) && v127 != 0)
        break;
      v136 = (unsigned __int16)*v130++;
      v132 += v136;
      if (!v136)
        goto LABEL_154;
    }
    v170 = *(unsigned __int16 *)(v128 + 4 * (unsigned __int16)v132 + 2) << 16;
    v171 = *(_QWORD **)a3;
    for (ii = *(unsigned __int16 *)(v128 + 4 * (unsigned __int16)v132); ; ii = v134)
    {
      while (1)
      {
        v173 = (unsigned __int16 *)(v127 + 2 * *(unsigned int *)(v126 + 24 * v134 + 8));
        do
        {
          v171[(unsigned __int16)ii >> 6] |= 1 << ii;
          v174 = *v173++;
          ii += v174;
        }
        while (v174);
        v134 = HIWORD(v170);
        if (!(_DWORD)v134)
          break;
        ii = HIWORD(v170);
        v170 >>= 16;
      }
      if (!*v130)
        break;
      v132 += (unsigned __int16)*v130++;
      v175 = (unsigned __int16 *)(v128 + 4 * (unsigned __int16)v132);
      v134 = *v175;
      v170 = v175[1] << 16;
    }
  }
LABEL_154:
  if (*(_BYTE *)(a2[1] + 1688))
  {
    v137 = *(_QWORD *)(*a2 + 40);
    v223 = "agx.disable_gin_1102";
    v225 = 259;
    if (!llvm::Module::getNamedMetadata(v137, (uint64_t)&v223))
    {
      v223 = "agx.has_stack_access";
      v225 = 259;
      if (llvm::Module::getNamedMetadata(v216, (uint64_t)&v223))
      {
        v187 = *(_QWORD *)(a1 + 8);
        v189 = *(_QWORD *)(a1 + 48);
        v188 = *(_QWORD *)(a1 + 56);
        v190 = (unsigned __int16 *)(v188 + (((unint64_t)*(unsigned int *)(v187 + 1600) >> 3) & 0x1FFFFFFE));
        v192 = *v190;
        v191 = v190 + 1;
        v193 = v192 + 66 * (*(_DWORD *)(v187 + 1600) & 0xF);
        while (1)
        {
          v194 = 4 * (unsigned __int16)v193;
          v195 = *(unsigned __int16 *)(v189 + v194);
          if (*(_WORD *)(v189 + v194) && v188 != 0)
            break;
          v197 = (unsigned __int16)*v191++;
          v193 += v197;
          if (!v197)
            goto LABEL_156;
        }
        v206 = *(unsigned __int16 *)(v189 + 4 * (unsigned __int16)v193 + 2) << 16;
        v207 = *(_QWORD **)a3;
        for (jj = *(unsigned __int16 *)(v189 + 4 * (unsigned __int16)v193); ; jj = v195)
        {
          while (1)
          {
            v209 = (unsigned __int16 *)(v188 + 2 * *(unsigned int *)(v187 + 24 * v195 + 8));
            do
            {
              v207[(unsigned __int16)jj >> 6] |= 1 << jj;
              v210 = *v209++;
              jj += v210;
            }
            while (v210);
            v195 = HIWORD(v206);
            if (!(_DWORD)v195)
              break;
            jj = HIWORD(v206);
            v206 >>= 16;
          }
          if (!*v191)
            break;
          v193 += (unsigned __int16)*v191++;
          v211 = (unsigned __int16 *)(v189 + 4 * (unsigned __int16)v193);
          v195 = *v211;
          v206 = v211[1] << 16;
        }
      }
    }
  }
LABEL_156:
  if (v218)
    v138 = v220;
  else
    v138 = 0;
  if (v219 || v138)
  {
    v139 = *(_QWORD *)(a1 + 8);
    v141 = *(_QWORD *)(a1 + 48);
    v140 = *(_QWORD *)(a1 + 56);
    v142 = (unsigned __int16 *)(v140 + (((unint64_t)*(unsigned int *)(v139 + 4456) >> 3) & 0x1FFFFFFE));
    v144 = *v142;
    v143 = v142 + 1;
    v145 = v144 + 185 * (*(_DWORD *)(v139 + 4456) & 0xF);
    while (1)
    {
      v146 = 4 * (unsigned __int16)v145;
      v147 = *(unsigned __int16 *)(v141 + v146);
      if (*(_WORD *)(v141 + v146) && v140 != 0)
        break;
      v149 = (unsigned __int16)*v143++;
      v145 += v149;
      if (!v149)
        goto LABEL_167;
    }
    LODWORD(v176) = *(unsigned __int16 *)(v141 + 4 * (unsigned __int16)v145 + 2) << 16;
    v177 = *(_QWORD **)a3;
    while (1)
    {
      v178 = v147;
      while (1)
      {
        v179 = (unsigned __int16 *)(v140 + 2 * *(unsigned int *)(v139 + 24 * v147 + 8));
        do
        {
          v177[(unsigned __int16)v178 >> 6] |= 1 << v178;
          v180 = *v179++;
          v178 += v180;
        }
        while (v180);
        v176 = (unsigned __int16 *)(v176 >> 16);
        if (!(_DWORD)v176)
          break;
        v178 = (int)v176;
        v147 = (unint64_t)v176;
      }
      if (!*v143)
        break;
      v145 += (unsigned __int16)*v143++;
      v176 = (unsigned __int16 *)(v141 + 4 * (unsigned __int16)v145);
      v147 = *v176;
      LODWORD(v176) = v176[1] << 16;
    }
  }
  else
  {
LABEL_167:
    v177 = *(_QWORD **)a3;
  }
  *v177 |= 4uLL;
  v222 = 0;
  v150 = sub_1C49909F8(v217, a2, &v222, (uint64_t)&v223);
  if (HIDWORD(v223))
  {
    v151 = a2[6];
    if (!v151)
    {
      v151 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double))(*(_QWORD *)a2[1] + 216))(a2[1], a2 + 16, a2, v150);
      a2[6] = v151;
    }
    v152 = *(_QWORD *)(v151 + 468);
    if ((v152 & 0xFF00000000) == 0)
    {
      v198 = (_QWORD *)a2[5];
      for (kk = (uint64_t *)a2[41]; kk != a2 + 40; kk = (uint64_t *)kk[1])
      {
        for (mm = kk[7]; (uint64_t *)mm != kk + 6; mm = *(_QWORD *)(mm + 8))
        {
          v201 = *(unsigned int *)(mm + 40);
          if ((_DWORD)v201)
          {
            v202 = 32 * v201;
            v203 = (int **)(*(_QWORD *)(mm + 32) + 16);
            do
            {
              if (*((_BYTE *)v203 - 16) == 12)
                sub_1C4963F5C((uint64_t)(v198 + 35), *v203, 0xFFFFFFFF);
              v203 += 4;
              v202 -= 32;
            }
            while (v202);
            if (!mm)
              goto LABEL_226;
          }
          if ((*(_BYTE *)mm & 4) == 0)
          {
LABEL_226:
            while ((*(_WORD *)(mm + 44) & 8) != 0)
              mm = *(_QWORD *)(mm + 8);
          }
        }
      }
      v204 = 0;
      v113 = v221;
      while (1)
      {
        v152 = (unsigned __int16)word_1C6979662[v204];
        if ((llvm::MachineRegisterInfo::isPhysRegUsed(v198, (unsigned __int16)word_1C6979662[v204], 0) & 1) == 0
          && ((*(_QWORD *)(*v221 + ((v152 >> 3) & 0x1FF8)) >> v152) & 1) == 0)
        {
          break;
        }
        if (++v204 == 256)
        {
          v205 = *(unsigned __int8 *)(v151 + 472);
          *(_DWORD *)(v151 + 468) = 0;
          if (!v205)
            *(_BYTE *)(v151 + 472) = 1;
          return;
        }
      }
      v212 = *(unsigned __int8 *)(v151 + 472);
      *(_DWORD *)(v151 + 468) = v152;
      if (!v212)
        *(_BYTE *)(v151 + 472) = 1;
    }
    v153 = *(_QWORD *)(a1 + 8);
    v155 = *(_QWORD *)(a1 + 48);
    v154 = *(_QWORD *)(a1 + 56);
    v156 = (unsigned __int16 *)(v154
                              + (((unint64_t)*(unsigned int *)(v153 + 24 * v152 + 16) >> 3) & 0x1FFFFFFE));
    v158 = *v156;
    v157 = v156 + 1;
    v159 = v158 + (*(_DWORD *)(v153 + 24 * v152 + 16) & 0xF) * v152;
    while (1)
    {
      v160 = 4 * (unsigned __int16)v159;
      v161 = *(unsigned __int16 *)(v155 + v160);
      if (*(_WORD *)(v155 + v160) && v154 != 0)
        break;
      v163 = (unsigned __int16)*v157++;
      v159 += v163;
      if (!v163)
        return;
    }
    v181 = *(unsigned __int16 *)(v155 + 4 * (unsigned __int16)v159 + 2) << 16;
    v182 = *v113;
    for (nn = *(unsigned __int16 *)(v155 + 4 * (unsigned __int16)v159); ; nn = v161)
    {
      while (1)
      {
        v184 = (unsigned __int16 *)(v154 + 2 * *(unsigned int *)(v153 + 24 * v161 + 8));
        do
        {
          *(_QWORD *)(v182 + 8 * ((unsigned __int16)nn >> 6)) |= 1 << nn;
          v185 = *v184++;
          nn += v185;
        }
        while (v185);
        v161 = HIWORD(v181);
        if (!(_DWORD)v161)
          break;
        nn = HIWORD(v181);
        v181 >>= 16;
      }
      if (!*v157)
        break;
      v159 += (unsigned __int16)*v157++;
      v186 = (unsigned __int16 *)(v155 + 4 * (unsigned __int16)v159);
      v161 = *v186;
      v181 = v186[1] << 16;
    }
  }
}

BOOL sub_1C4960310(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16);
}

BOOL sub_1C4960324(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16);
}

void sub_1C4960338(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned __int16 *v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int8x8_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint8x8_t v33;
  unsigned __int32 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  llvm::MachineFunction *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t MachineMemOperand;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  llvm::MachineMemOperand *v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  unsigned int v83;
  int VirtualRegister;
  uint64_t v85;
  unsigned int v86;
  llvm::MachineFunction *v87;
  llvm::MachineInstr *v88;
  llvm::MachineInstr *v89;
  char *v90;
  uint64_t v91;
  unsigned int SubReg;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  llvm::MachineInstr *v106;
  int v107;
  llvm::MachineFunction **v108;
  llvm::MachineInstr *v109;
  llvm::MachineFunction *v110;
  unsigned int v111;
  llvm::MachineFunction *v112;
  llvm::MachineInstr *v113;
  llvm::MachineInstr *v114;
  llvm::MachineFunction *v115;
  unsigned int v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  llvm::MachineFunction *v130;
  llvm::MachineInstr *v131;
  llvm::MachineInstr *v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  llvm::MachineInstr *v138;
  llvm::MachineInstr *v139;
  char v140;
  llvm::MachineFunction *v141;
  int v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157[2];
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  int v162;
  int v163;
  uint64_t *v164;
  _QWORD *v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  llvm::MachineInstr *v168;
  int v169;
  unsigned __int8 *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v164 = *(uint64_t **)(*(_QWORD *)(a2 + 24) + 32);
  v7 = v164[6];
  if (!v7)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v164[1] + 216))(v164[1], v164 + 16, v164);
    v164[6] = v7;
  }
  if (*(_BYTE *)(v7 + 454))
  {
    v8 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v164[1] + 16))(v164[1], *v164);
    v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 112))(v8);
    v161 = v8;
    v165 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 104))(v8);
    v159 = a4;
    v10 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * a4 + 16);
    v169 = 0;
    LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, int *))(*(_QWORD *)v9 + 232))(v9, v164, v10, &v169);
    v162 = 0;
    if (!*(_BYTE *)(v164[2] + 381))
    {
      v12 = (*(_WORD *)(*v164 + 18) & 0x3F70) == 0 || (*(_WORD *)(*v164 + 18) & 0x3FF0) == 4080;
      v13 = v12;
      v162 = v13;
    }
    v160 = *(_QWORD *)(a2 + 24);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v164[43] + 592))(v164[43], 102))
      v14 = 64;
    else
      v14 = 61;
    v15 = *(unsigned __int16 **)(a2 + 16);
    v16 = *v15;
    if ((v16 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 48) & 0x10) != 0)
    {
      LODWORD(v19) = 1;
    }
    else
    {
      v17 = *(_WORD *)(a2 + 44);
      v18 = *((_QWORD *)v15 + 1);
      if ((v17 & 0xC) != 0 && (v17 & 4) == 0)
      {
        v117 = v14;
        v118 = a1;
        if ((v18 & 0x100000) != 0)
        {
          LODWORD(v19) = 1;
        }
        else
        {
          v119 = a2;
          while (1)
          {
            v120 = *(unsigned __int16 *)(v119 + 44);
            LODWORD(v19) = (v120 >> 3) & 1;
            if ((v120 & 8) == 0)
              break;
            v119 = *(_QWORD *)(v119 + 8);
            a1 = v118;
            v14 = v117;
            if ((*(_BYTE *)(*(_QWORD *)(v119 + 16) + 10) & 0x10) != 0)
              goto LABEL_19;
          }
        }
        a1 = v118;
        v14 = v117;
      }
      else
      {
        v19 = (v18 >> 20) & 1;
      }
    }
LABEL_19:
    if (v16 <= 2347)
    {
      v146 = a1;
      v20 = 8;
      switch(v16)
      {
        case 321:
        case 342:
          v20 = 112;
          goto LABEL_22;
        case 322:
        case 343:
          v20 = 128;
          goto LABEL_22;
        case 323:
        case 344:
          v20 = 16;
          goto LABEL_22;
        case 324:
        case 345:
          v20 = 160;
          goto LABEL_22;
        case 325:
        case 346:
          v20 = 192;
          goto LABEL_22;
        case 326:
        case 347:
          v20 = 224;
          goto LABEL_22;
        case 327:
        case 348:
          v20 = 288;
          goto LABEL_22;
        case 328:
        case 349:
          v20 = 32;
          goto LABEL_22;
        case 329:
        case 350:
          v20 = 384;
          goto LABEL_22;
        case 330:
        case 351:
          v20 = 48;
          goto LABEL_22;
        case 331:
        case 352:
          v20 = 64;
          goto LABEL_22;
        case 332:
        case 353:
          goto LABEL_22;
        case 333:
        case 354:
          v20 = 80;
          goto LABEL_22;
        case 334:
        case 355:
          v20 = 96;
LABEL_22:
          v21 = 0;
          v142 = 0;
          v22 = *(_QWORD *)(a2 + 32);
          *(_QWORD *)v157 = a4 + 1;
          v156 = *(_DWORD *)(v22 + 32 * *(_QWORD *)v157 + 16) + v11;
          v23 = 2;
          if (!(_DWORD)v19)
            v23 = 0;
          v144 = v14;
          v145 = v23;
          v24 = *(unsigned int *)(v22 + 32 * v23 + 4);
          v155 = v19 ^ 1;
          v153 = v24 - 1;
          v147 = *(_QWORD *)(v22 + 32 * v155 + 16) & 0x6FFLL;
          v148 = *(_QWORD *)(v22 + 32 * v155 + 16);
          v151 = v24 >> 3;
          v158 = v24;
          v150 = 1 << (v24 & 7);
          v154 = v19;
          v25 = 49;
          if (v147)
            v25 = *(_QWORD *)(v22 + 32 * v155 + 16);
          v149 = v25;
          v152 = v20;
          v26 = 1;
          break;
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
          goto LABEL_170;
        default:
          if ((v16 - 2252) > 3 || v16 == 2253)
            goto LABEL_170;
          goto LABEL_79;
      }
      while (1)
      {
        v27 = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v165 + 184))(v165, v160, a2, a2);
        llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v27, (llvm::MachineFunction *)v164, (const llvm::MachineInstr *)a2);
        v171 = 0;
        v172 = 0;
        v173 = 0;
        LODWORD(v170) = 50331648;
        HIDWORD(v170) = v158;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, *(llvm::MachineFunction **)(v27[3] + 32), (const llvm::MachineOperand *)&v170);
        if ((v26 & 1) == 0)
        {
          v171 = 0;
          v172 = 0;
          v173 = 0;
          LODWORD(v170) = 100663296;
          HIDWORD(v170) = v158;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, *(llvm::MachineFunction **)(v27[3] + 32), (const llvm::MachineOperand *)&v170);
        }
        v29 = v20 - 128;
        if (v20 >= 0x80)
          break;
        v29 = v20 - 96;
        if (v20 >= 0x60)
        {
          if (v153 > 0x79E || (v150 & byte_1C697CA24[v151]) == 0)
          {
            if ((v21 & 3) != 0)
              goto LABEL_255;
            v91 = v27[4] + 32 * v145;
            SubReg = llvm::MCRegisterInfo::getSubReg(v146 + 1, v158, *(int *)((char *)&dword_1C66125DC + (v21 & 0xFFFFFFFC)));
            llvm::MachineOperand::setReg(v91, SubReg);
          }
          if (v147)
            v31 = v148;
          else
            v31 = 114;
          v163 = v21 + 12;
          v30 = 96;
          goto LABEL_37;
        }
        v29 = v20 - 64;
        if (v20 >= 0x40)
        {
          if (v153 > 0x71E || (v150 & byte_1C697B0A0[v151]) == 0)
          {
            if ((v21 & 1) != 0)
              goto LABEL_255;
            v102 = v27[4] + 32 * v145;
            v103 = llvm::MCRegisterInfo::getSubReg(v146 + 1, v158, dword_1C6612588[v21 >> 1]);
            llvm::MachineOperand::setReg(v102, v103);
          }
          if (v147)
            v31 = v148;
          else
            v31 = 241;
          v163 = v21 + 8;
          v30 = 64;
          goto LABEL_37;
        }
        v29 = v20 - 48;
        if (v20 >= 0x30)
        {
          if (v153 > 0x336 || (v150 & byte_1C697A7BC[v151]) == 0)
          {
            if ((v21 & 1) != 0)
              goto LABEL_255;
            v134 = v27[4] + 32 * v145;
            v135 = llvm::MCRegisterInfo::getSubReg(v146 + 1, v158, dword_1C6612530[v21 >> 1]);
            llvm::MachineOperand::setReg(v134, v135);
          }
          if (v147)
            v31 = v148;
          else
            v31 = 113;
          v163 = v21 + 6;
          v30 = 48;
          goto LABEL_37;
        }
        v29 = v20 - 32;
        if (v20 >= 0x20)
        {
          if (v153 > 0x236 || (v150 & byte_1C6979F3C[v151]) == 0)
          {
            if ((v21 & 1) != 0)
              goto LABEL_255;
            v77 = v146[1];
            v78 = v146[7];
            v79 = *(unsigned int *)(v77 + 24 * v158 + 4);
            if (*(_WORD *)(v78 + 2 * v79))
            {
              v80 = *(unsigned __int16 *)(v78 + 2 * v79) + v158;
              v81 = (unsigned __int16 *)(v146[11] + 2 * *(unsigned int *)(v77 + 24 * v158 + 12));
              v82 = (unsigned __int16 *)(v78 + 2 * v79 + 2);
              while (dword_1C66124D4[v21 >> 1] != *v81)
              {
                v101 = *v82++;
                v80 += v101;
                ++v81;
                if (!v101)
                  goto LABEL_194;
              }
              v83 = (unsigned __int16)v80;
            }
            else
            {
LABEL_194:
              v83 = 0;
            }
            llvm::MachineOperand::setReg(v27[4] + 32 * v145, v83);
          }
          v163 = v21 + 4;
          v30 = 32;
          v31 = v149;
          goto LABEL_37;
        }
        if (v20 == 16)
        {
          if (v153 > 0x1BE || (v150 & byte_1C6979862[v151]) == 0)
          {
            v121 = v27[4] + 32 * v145;
            v122 = llvm::MCRegisterInfo::getSubReg(v146 + 1, v158, (v21 >> 1) + 1);
            llvm::MachineOperand::setReg(v121, v122);
          }
          v20 = 0;
          if (v147)
            v31 = v148;
          else
            v31 = 17;
          v163 = v21 + 2;
          v30 = 16;
        }
        else
        {
          if (v20 != 8)
          {
            v90 = "Unable to materialize spill!";
            goto LABEL_256;
          }
          if (v147)
            v31 = v148;
          else
            v31 = 16;
          if (v21)
          {
LABEL_255:
            v90 = "Unable to materialize spill/reload!";
LABEL_256:
            llvm::report_fatal_error((llvm *)v90, (const char *)1);
          }
          v20 = 0;
          v163 = 1;
          v30 = 8;
        }
LABEL_38:
        v32 = v21 + v156;
        v28.i32[0] = v31 >> 4;
        v33 = (uint8x8_t)vcnt_s8(v28);
        v33.i16[0] = vaddlv_u8(v33);
        v34 = v33.i32[0];
        v35 = (v30 >> 3) / v33.i32[0];
        if (v162)
        {
          if (v142)
          {
            v136 = v161[318];
            v167 = 0;
            v12 = v136 == 0;
            v137 = 108096;
            if (v12)
              v137 = 112704;
            v141 = sub_1C4779044(v160, (uint64_t)v27, &v167, v165[1] + v137, v142);
            v139 = v138;
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = 0;
            llvm::MachineInstr::addOperand(v138, v141, (const llvm::MachineOperand *)&v170);
            v171 = 0;
            v172 = 0;
            LODWORD(v170) = 0;
            HIDWORD(v170) = v142;
            v173 = 0;
            llvm::MachineInstr::addOperand(v139, v141, (const llvm::MachineOperand *)&v170);
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = 0;
            llvm::MachineInstr::addOperand(v139, v141, (const llvm::MachineOperand *)&v170);
            v140 = sub_1C4884088(v31);
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = v30 >> 3 >> v140;
            llvm::MachineInstr::addOperand(v139, v141, (const llvm::MachineOperand *)&v170);
            if (v167)
              llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
            v116 = v142;
          }
          else
          {
            v143 = sub_1C4884F84((uint64_t)v165, v21 + v156, v160, (unint64_t *)v27, v144);
            v104 = v161[318];
            v166 = 0;
            v12 = v104 == 0;
            v105 = 387024;
            if (v12)
              v105 = 389616;
            v167 = (unsigned __int8 *)sub_1C4779044(v160, (uint64_t)v27, &v166, v165[1] + v105, v144);
            v168 = v106;
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = 0;
            llvm::MachineInstr::addOperand(v106, (llvm::MachineFunction *)v167, (const llvm::MachineOperand *)&v170);
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = 0;
            llvm::MachineInstr::addOperand(v168, (llvm::MachineFunction *)v167, (const llvm::MachineOperand *)&v170);
            if (v143)
              v107 = v144;
            else
              v107 = 66;
            v108 = sub_1C47BF4F4((llvm::MachineFunction **)&v167, v107, 8 * (v143 != 0), 0);
            v109 = v108[1];
            v110 = *v108;
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = 0;
            llvm::MachineInstr::addOperand(v109, v110, (const llvm::MachineOperand *)&v170);
            v111 = sub_1C4884088(v31);
            v112 = *v108;
            v113 = v108[1];
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = v111;
            llvm::MachineInstr::addOperand(v113, v112, (const llvm::MachineOperand *)&v170);
            v115 = *v108;
            v114 = v108[1];
            LODWORD(v170) = 1;
            v171 = 0;
            v172 = 32;
            llvm::MachineInstr::addOperand(v114, v115, (const llvm::MachineOperand *)&v170);
            if (v166)
              llvm::MetadataTracking::untrack((uint64_t)&v166, v166);
            v116 = v144;
            v142 = v144;
          }
          v27[2] = v165[1]
                 + 48
                 * dword_1C64689D0[32 * (unint64_t)v161[381]
                                               - 1
                                               + 16 * v154
                                               + 4 * (v35 >> 2)
                                               + v34];
          *(_QWORD *)(v27[4] + 32 * v155 + 16) = v31 | 0x100;
          llvm::MachineOperand::ChangeToRegister(v27[4] + 32 * v159, v116, 0, 0, v20 == 0, 0, 0, 0);
        }
        else
        {
          v36 = v161[381];
          if (!v161[381])
          {
            v31 |= 0x100uLL;
            v32 >>= sub_1C4884088(v31);
          }
          v27[2] = v165[1] + 48 * dword_1C64689D0[32 * v36 + 7 + 16 * v154 + 4 * (v35 >> 2) + v34];
          llvm::MachineOperand::ChangeToImmediate((unsigned int *)(v27[4] + 32 * v159), v32, 0);
          *(_QWORD *)(v27[4] + 32 * v155 + 16) = v31;
        }
        llvm::MachineInstr::removeOperand((uint64_t)v27, v157[0]);
        if (!v21 && v30 == v152)
          goto LABEL_44;
        v170 = (unsigned __int8 *)&v172;
        v171 = 0x100000000;
        v58 = v27 + 6;
        v57 = v27[6];
        if (v57 >= 8)
        {
          if ((v57 & 7) == 0)
          {
            v27[6] = v57 & 0xFFFFFFFFFFFFFFF8;
            v59 = v27 + 7;
            goto LABEL_119;
          }
          if ((v27[6] & 7) == 3)
          {
            v125 = (int *)(v57 & 0xFFFFFFFFFFFFFFF8);
            if ((v57 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v127 = *v125;
              v58 = (uint64_t *)(v125 + 2);
              v126 = v127;
              if ((_DWORD)v127)
              {
                v59 = &v58[v126];
                do
                {
LABEL_119:
                  MachineMemOperand = llvm::MachineFunction::getMachineMemOperand((uint64_t)v164, *v58, v21, (8 * v30) | 1);
                  v61 = v171;
                  if (v171 >= (unint64_t)HIDWORD(v171))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)&v172, v171 + 1, 8);
                    v61 = v171;
                  }
                  *(_QWORD *)&v170[8 * v61] = MachineMemOperand;
                  LODWORD(v171) = v171 + 1;
                  ++v58;
                }
                while (v58 != v59);
              }
            }
          }
        }
        llvm::MachineInstr::dropMemRefs((uint64_t)v27, (llvm::MachineFunction *)v164);
        v62 = v170;
        if ((_DWORD)v171)
        {
          v63 = 8 * v171;
          do
          {
            v64 = *(llvm::MachineMemOperand **)v62;
            v62 += 8;
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v27, (llvm::MachineFunction *)v164, v64);
            v63 -= 8;
          }
          while (v63);
          v62 = v170;
        }
        if (v62 != (unsigned __int8 *)&v172)
          free(v62);
LABEL_44:
        v26 = 0;
        v21 = v163;
        if (!v20)
        {
          v37 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v38 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v38 = a2;
              do
                v38 = *(_QWORD *)(v38 + 8);
              while ((*(_WORD *)(v38 + 44) & 8) != 0);
            }
            goto LABEL_54;
          }
LABEL_218:
          v38 = a2;
          goto LABEL_54;
        }
      }
      if (v153 > 0x816 || (v150 & byte_1C697DA40[v151]) == 0)
      {
        if ((v21 & 3) != 0)
          goto LABEL_255;
        v67 = v146[1];
        v68 = v146[7];
        v69 = *(unsigned int *)(v67 + 24 * v158 + 4);
        if (*(_WORD *)(v68 + 2 * v69))
        {
          v70 = *(unsigned __int16 *)(v68 + 2 * v69) + v158;
          v71 = (unsigned __int16 *)(v146[11] + 2 * *(unsigned int *)(v67 + 24 * v158 + 12));
          v72 = (unsigned __int16 *)(v68 + 2 * v69 + 2);
          while (*(int *)((char *)&dword_1C6612604 + (v21 & 0xFFFFFFFC)) != *v71)
          {
            v93 = *v72++;
            v70 += v93;
            ++v71;
            if (!v93)
              goto LABEL_180;
          }
          v73 = (unsigned __int16)v70;
        }
        else
        {
LABEL_180:
          v73 = 0;
        }
        llvm::MachineOperand::setReg(v27[4] + 32 * v145, v73);
      }
      if (v147)
        v31 = v148;
      else
        v31 = 242;
      v163 = v21 + 16;
      v30 = 128;
LABEL_37:
      v20 = v29;
      goto LABEL_38;
    }
    if ((v16 - 2348) > 3 || v16 == 2349)
    {
      if (v16 != 4077 && v16 != 4075)
      {
LABEL_170:
        v90 = "Unable to materialize frameindex: invalid opcode!";
        goto LABEL_256;
      }
      if (v8[381])
      {
        v65 = (*(unsigned __int16 *)(*v164 + 18) >> 4) & 0x3FF;
        v66 = !v65 || v65 == 8;
        if (v66 || v65 == 255 || *(_BYTE *)(v164[7] + 62))
        {
          sub_1C4884A00(v165, v11, v160, (unint64_t *)a2, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4));
          v37 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)a2 & 4) != 0)
            goto LABEL_218;
          v38 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v38 = a2;
            do
              v38 = *(_QWORD *)(v38 + 8);
            while ((*(_WORD *)(v38 + 44) & 8) != 0);
          }
          goto LABEL_54;
        }
      }
      v74 = *(_QWORD *)(a2 + 32);
      if (v162)
      {
        sub_1C4884F84((uint64_t)v165, v11, v160, (unint64_t *)a2, *(_DWORD *)(v74 + 4));
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        return;
      }
      v75 = (int)v11;
      v76 = (unsigned int *)(v74 + 32 * a4);
LABEL_149:
      llvm::MachineOperand::ChangeToImmediate(v76, v75, 0);
      return;
    }
LABEL_79:
    v39 = *(_QWORD *)(a2 + 32);
    v40 = *(_QWORD *)(v39 + 112);
    if (v161[381])
    {
      v41 = (*(unsigned __int16 *)(*v164 + 18) >> 4) & 0x3FF;
      v42 = v41 == 8 || v41 == 0;
      if (v42 || v41 == 255 || *(_BYTE *)(v164[7] + 62))
      {
        sub_1C4884A00(v165, v11, v160, (unint64_t *)a2, v14);
        llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(a2 + 32) + 64, v14, 0, 0, 1, 0, 0, 0);
        return;
      }
    }
    v43 = (v40 >> 6) & 7;
    if ((v162 & 1) == 0)
    {
      if ((int)v11 >> v43 << v43 != (_DWORD)v11)
      {
        v90 = "Unable to materialize frameindex: invalid shift!";
        goto LABEL_256;
      }
      if (v161[381])
        v11 = v11;
      else
        v11 = ((int)v11 >> v43);
      if ((int)v11 <= 255)
      {
        v44 = 220;
        if (v16 != 2350 && v16 != 2254)
        {
          if (v16 == 2255 || v16 == 2351)
            v44 = 225;
          else
            v44 = 214;
        }
        v45 = sub_1C4885524(35, v44, v161);
        v46 = v165[1];
        v47 = *(_DWORD *)(v39 + 4);
        v48 = *(llvm::MachineFunction **)(v160 + 32);
        v49 = *(unsigned __int8 **)(a2 + 56);
        v167 = v49;
        if (v49)
          llvm::MetadataTracking::track((uint64_t)&v167, v49, 2);
        v50 = v46 + 48 * v45;
        v51 = *((_QWORD *)v48 + 28);
        if (v51)
          *((_QWORD *)v48 + 28) = *(_QWORD *)v51;
        else
          v51 = sub_1C484358C((uint64_t)v48 + 128, 72, 3);
        v170 = v167;
        if (v167)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v167, v167, (uint64_t)&v170);
          v167 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v48, v50, &v170, 0);
        if (v170)
          llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
        if (v167)
          llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
        v52 = *(_QWORD *)(v160 + 40);
        *(_QWORD *)(v51 + 24) = v52;
        v53 = *(_QWORD *)(v52 + 32);
        v54 = *(unsigned int *)(v51 + 40);
        if ((_DWORD)v54)
        {
          v94 = *(_QWORD *)(v51 + 32);
          v95 = *(_QWORD *)(v53 + 40);
          v96 = 32 * v54;
          do
          {
            if (!*(_BYTE *)v94)
            {
              v97 = *(unsigned int *)(v94 + 4);
              if ((int)v97 >= 0)
                v98 = (uint64_t *)(*(_QWORD *)(v95 + 272) + 8 * v97);
              else
                v98 = (uint64_t *)(*(_QWORD *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
              v99 = *v98;
              if (*v98)
              {
                v100 = *(_QWORD *)(v99 + 16);
                *(_QWORD *)(v99 + 16) = v94;
                *(_QWORD *)(v94 + 16) = v100;
                if ((*(_BYTE *)(v94 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v94 + 24) = v99;
                }
                else
                {
                  *(_QWORD *)(v94 + 24) = 0;
                  v98 = (uint64_t *)(v100 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v94 + 16) = v94;
                *(_QWORD *)(v94 + 24) = 0;
              }
              *v98 = v94;
            }
            v94 += 32;
            v96 -= 32;
          }
          while (v96);
        }
        v55 = *(_QWORD *)(v53 + 728);
        if (v55)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v55 + 24))(v55, v51);
        v56 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v51 = v56 | *(_QWORD *)v51 & 7;
        *(_QWORD *)(v51 + 8) = a2;
        *(_QWORD *)(v56 + 8) = v51;
        *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v51;
        v171 = 0;
        v172 = 0;
        v173 = 0;
        LODWORD(v170) = 0x1000000;
        HIDWORD(v170) = v47;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = (int)v11;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)&v170);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 128));
        if (v16 != 2348 && v16 != 2252)
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v48, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 160));
        llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v51, (llvm::MachineFunction *)v164, (const llvm::MachineInstr *)a2);
        v37 = *(_QWORD *)(a2 + 24);
        if ((*(_BYTE *)a2 & 4) != 0)
          goto LABEL_218;
        v38 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v38 = a2;
          do
            v38 = *(_QWORD *)(v38 + 8);
          while ((*(_WORD *)(v38 + 44) & 8) != 0);
        }
LABEL_54:
        sub_1C487FE80(v37 + 40, a2, *(_QWORD *)(v38 + 8));
        return;
      }
      VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v164[5], (uint64_t)&off_1E7FA5F48, "", 0);
      v85 = 195600;
      if (!v161[318])
        v85 = 195696;
      v86 = VirtualRegister;
      v87 = sub_1C4787570(v160, (unint64_t *)a2, (unsigned __int8 **)(a2 + 56), v165[1] + v85, VirtualRegister);
      v89 = v88;
      LODWORD(v170) = 1;
      v171 = 0;
      v172 = 0;
      llvm::MachineInstr::addOperand(v88, v87, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      v171 = 0;
      v172 = v11;
      llvm::MachineInstr::addOperand(v89, v87, (const llvm::MachineOperand *)&v170);
      llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(a2 + 32) + 64, v86, 0, 0, 1, 0, 0, 0);
      v76 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 96);
      v75 = v40 & 0xFFFFFE3F;
      goto LABEL_149;
    }
    sub_1C4884F84((uint64_t)v165, v11, v160, (unint64_t *)a2, v14);
    llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(_QWORD *)(a2 + 32) + 96), v40 & 0xFFFFFE3F, 0);
    llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(a2 + 32) + 64, v14, 0, 0, 1, 0, 0, 0);
    if (v16 != 2252 && v16 != 2348)
      llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(_QWORD *)(a2 + 32) + 160), ((*(_QWORD *)(*(_QWORD *)(a2 + 32) + 176) & 0x1C0) + (v43 << 6)) | *(_QWORD *)(*(_QWORD *)(a2 + 32) + 176) & 0xFFFFFFFFFFFFFE3FLL, 0);
    v123 = v161[318];
    if (a2)
    {
      v124 = a2;
      if ((*(_BYTE *)a2 & 4) != 0)
      {
LABEL_248:
        v128 = *(unint64_t **)(v124 + 8);
        v167 = 0;
        v12 = v123 == 0;
        v129 = 387024;
        if (v12)
          v129 = 389616;
        v130 = sub_1C4787570(v160, v128, &v167, v165[1] + v129, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4));
        v132 = v131;
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = 0;
        llvm::MachineInstr::addOperand(v131, v130, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = 0;
        llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)&v170);
        v133 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
        v171 = 0;
        v172 = 0;
        v173 = 0;
        LODWORD(v170) = 0x4000000;
        HIDWORD(v170) = v133;
        llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = 0;
        llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = (v40 >> 6) & 7;
        llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        v171 = 0;
        v172 = 32;
        llvm::MachineInstr::addOperand(v132, v130, (const llvm::MachineOperand *)&v170);
        if (v167)
          llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
        return;
      }
    }
    else
    {
      v124 = 0;
    }
    while ((*(_WORD *)(v124 + 44) & 8) != 0)
      v124 = *(_QWORD *)(v124 + 8);
    goto LABEL_248;
  }
}

const __int16 *sub_1C496176C(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3F70) != 0)
    v2 = (const char *)&unk_1C6610C26;
  else
    v2 = ":";
  if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0xFF0)
    return L"9<PQRSlmnopqrstuvw";
  else
    return (const __int16 *)v2;
}

uint64_t sub_1C49617A8(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unsigned __int16 *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int **v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int **v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  unint64_t i;
  __int16 v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  _BOOL4 v45;
  unint64_t v46;
  unsigned __int16 *v47;
  int v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  int v60;
  unsigned int v61;
  char v62;
  char v63;
  int v64;
  unint64_t v65;
  unsigned __int16 *v66;
  int v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  int *v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v77;
  unint64_t v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 v84;
  unsigned __int16 *v85;
  unsigned __int16 *v86;
  int v87;
  __int16 v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 v93;
  _WORD *v94;
  unsigned __int16 *v95;
  unsigned __int16 *v96;
  _WORD *v97;
  unsigned __int16 v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  _BOOL4 v105;
  _BOOL4 v107;
  int v108;
  _BOOL4 v110;
  _BOOL4 v111;
  BOOL v112;
  _BOOL4 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  int *v122;
  uint64_t v123;
  unsigned int v124;
  _BOOL4 v125;
  int v126;
  unint64_t j;
  __int16 v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t RegSizeInBits;
  unint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  unsigned int *v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int32 v164;
  unsigned __int16 *v165;
  BOOL v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  unint64_t v175;
  __int16 v176;
  uint64_t v177;
  _WORD *v178;
  unsigned __int16 *v179;
  __int16 v180;
  unsigned __int16 v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  __int16 v189;
  uint64_t v190;
  unsigned __int16 v191;
  unsigned __int16 *v192;
  int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v203;
  _QWORD *v204;
  unsigned __int16 *v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  _QWORD *v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v220;
  _QWORD *v221;
  void *v222;
  uint64_t v223;
  _BYTE v224[32];
  uint32x4_t v225;
  uint32x4_t v226;
  uint64_t v227;

  v9 = (_QWORD *)a7;
  v12 = a3;
  v227 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  llvm::TargetRegisterInfo::getRegAllocationHints(a1, a2, a3, a4, a5, a6, a7);
  if (!v9 || !a8)
    return 0;
  v209 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8), *(_QWORD *)a6);
  v225 = 0u;
  v226 = 0u;
  v15 = v9[31];
  v16 = (_QWORD *)v9[33];
  v217 = a8;
  v220 = a6;
  if ((a2 & 0x80000000) != 0)
    v17 = (int **)(*(_QWORD *)(v15 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v17 = (int **)(*(_QWORD *)(v15 + 272) + 8 * v14);
  v18 = *v17;
  if (*v17)
  {
    while (1)
    {
      v19 = *v18;
      if ((*v18 & 0x80000000) == 0)
        break;
      v18 = (int *)*((_QWORD *)v18 + 3);
      if (!v18)
        goto LABEL_9;
    }
    v216 = v14;
    v211 = (_QWORD *)v9[33];
LABEL_20:
    v29 = (v19 >> 8) & 0xFFF;
    if ((_DWORD)v29)
    {
      if ((v29 - 25) > 0xB)
      {
        if (v29 > 0x10)
        {
          v31 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v16 + 208))(v16, v29, 1);
          v16 = v211;
          v30 = v31 - 1;
        }
        else
        {
          v30 = ((v19 >> 8) & 0xFFF) - 1;
        }
      }
      else
      {
        v30 = 2 * ((v19 >> 8) & 0xFFF) - 50;
      }
    }
    else
    {
      v30 = 0;
    }
    for (i = *((_QWORD *)v18 + 1); ; i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8)
    {
      v33 = *(_WORD *)(i + 44);
      if ((v33 & 4) == 0)
        break;
    }
    v34 = *(unsigned __int16 **)(i + 16);
    v35 = *v34;
    if (((v35 - 9) > 0x3C || ((1 << (v35 - 9)) & 0x1000000000000605) == 0)
      && v35 != 0)
    {
      v38 = *((_QWORD *)v34 + 1);
      if ((v38 & 0x10) == 0 && (v34[8] & 1) == 0)
      {
        if ((v33 & 0xC) != 0)
        {
          v39 = i;
          if ((v38 & 0x400) == 0)
          {
            while ((*(_WORD *)(v39 + 44) & 8) != 0)
            {
              v39 = *(_QWORD *)(v39 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 9) & 4) != 0)
                goto LABEL_45;
            }
            goto LABEL_203;
          }
        }
        else if ((v38 & 0x400) == 0)
        {
          goto LABEL_203;
        }
      }
    }
LABEL_45:
    v40 = *(_QWORD **)(i + 24);
    v41 = v40[8];
    v42 = (unint64_t)(v40[9] - v41) >> 3;
    if (!(_DWORD)v42
      || (_DWORD)v42 == 1
      && ((*(_QWORD *)(*(_QWORD *)v41 + 96) - *(_QWORD *)(*(_QWORD *)v41 + 88)) & 0x7FFFFFFF8) == 8)
    {
      goto LABEL_73;
    }
    v43 = 0;
    v44 = *(_BYTE *)(v209 + 318) ? 5 : 11;
    v45 = 1;
    v46 = i;
    while (1)
    {
      v47 = *(unsigned __int16 **)(v46 + 16);
      v48 = *v47;
      v49 = (v48 - 9) > 0x3C || ((1 << (v48 - 9)) & 0x1000000000000605) == 0;
      v50 = !v49 || v48 == 0;
      if (!v50 && (v47[4] & 0x10) == 0 && (v47[8] & 1) == 0)
        break;
      v51 = v40[7];
      if (v46 == v51)
      {
        LODWORD(v51) = 1;
        goto LABEL_72;
      }
      v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
      if (!v46 || (*(_BYTE *)v46 & 4) == 0)
      {
        while ((*(_WORD *)(v46 + 44) & 4) != 0)
          v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
      }
      v45 = ++v43 < v44;
      if (v43 == v44)
        goto LABEL_72;
    }
    LODWORD(v51) = 0;
LABEL_72:
    if ((v45 & v51 & 1) == 0)
    {
LABEL_73:
      if ((*v18 & 0x1000000) != 0)
        goto LABEL_203;
    }
    v52 = *((_QWORD *)v34 + 1);
    if ((v33 & 0xC) == 0 || (v33 & 4) != 0)
    {
      if ((v52 & 0x400) == 0)
        goto LABEL_83;
    }
    else
    {
      v53 = i;
      if ((v52 & 0x400) == 0)
      {
        while ((*(_WORD *)(v53 + 44) & 8) != 0)
        {
          v53 = *(_QWORD *)(v53 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v53 + 16) + 9) & 4) != 0)
            goto LABEL_81;
        }
LABEL_83:
        v54 = i;
        if ((v33 & 4) != 0)
        {
          v54 = i;
          do
            v54 = *(_QWORD *)v54 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v54 + 44) & 4) != 0);
        }
        v55 = v40 + 6;
        v56 = *(_DWORD **)(v54 + 32);
        v57 = *(unsigned int *)(v54 + 40);
        v58 = &v56[8 * v57];
        if (!(_DWORD)v57)
        {
          v117 = *(_QWORD *)(v54 + 8);
          if ((_QWORD *)v117 == v55)
          {
            v54 = (unint64_t)(v40 + 6);
          }
          else
          {
            v54 = (unint64_t)(v40 + 6);
            if ((*(_WORD *)(v117 + 44) & 4) != 0)
            {
              while (1)
              {
                v118 = v117;
                v119 = *(unsigned int *)(v117 + 40);
                if ((_DWORD)v119)
                  break;
                v117 = *(_QWORD *)(v117 + 8);
                if ((_QWORD *)v117 == v55 || (*(_WORD *)(v117 + 44) & 4) == 0)
                {
                  v54 = (unint64_t)(v40 + 6);
                  goto LABEL_218;
                }
              }
              v54 = v117;
LABEL_218:
              v56 = *(_DWORD **)(v118 + 32);
              v58 = &v56[8 * v119];
              v16 = v211;
            }
          }
        }
        if (v56 != v58)
        {
          do
          {
            if ((*v56 & 0x10000FF) != 0)
              goto LABEL_186;
            v59 = v56[1];
            if (v59 == a2)
              goto LABEL_186;
            v60 = (*v56 >> 8) & 0xFFF;
            v61 = v56[1];
            if (v59 < 0)
            {
              v61 = *(_DWORD *)(v9[35] + 4 * (v59 & 0x7FFFFFFF));
              if (!v61)
                goto LABEL_186;
              if (v60)
              {
                v81 = v16[1];
                v82 = v16[7];
                v83 = *(unsigned int *)(v81 + 24 * v61 + 4);
                if (!*(_WORD *)(v82 + 2 * v83))
                  goto LABEL_186;
                v84 = *(_WORD *)(v82 + 2 * v83) + v61;
                v85 = (unsigned __int16 *)(v211[11] + 2 * *(unsigned int *)(v81 + 24 * v61 + 12));
                v16 = v211;
                v86 = (unsigned __int16 *)(v82 + 2 * v83 + 2);
                while (v60 != *v85)
                {
                  v62 = 0;
                  v87 = *v86++;
                  v84 += v87;
                  ++v85;
                  if (!v87)
                    goto LABEL_187;
                }
                v61 = v84;
              }
            }
            if (v61 - 1 > 0x3FFFFFFE)
              goto LABEL_186;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = i;
            do
            {
              if (v65 == v40[7])
                break;
              v65 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFF8;
              if (!v65 || (*(_BYTE *)v65 & 4) == 0)
              {
                while ((*(_WORD *)(v65 + 44) & 4) != 0)
                  v65 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFF8;
              }
              v66 = *(unsigned __int16 **)(v65 + 16);
              v67 = *v66;
              v68 = (v67 - 9) > 0x3C || ((1 << (v67 - 9)) & 0x1000000000000605) == 0;
              v69 = !v68 || v67 == 0;
              if (!v69 && (v66[4] & 0x10) == 0 && (v66[8] & 1) == 0)
                break;
              v70 = v66[1];
              if (v70)
              {
                v71 = (int *)(*(_QWORD *)(v65 + 32) + 4);
                while (1)
                {
                  v72 = *(v71 - 1);
                  if ((v72 & 0x20000FF) == 0)
                  {
                    v73 = *v71;
                    if (*v71)
                    {
                      v74 = (v72 >> 8) & 0xFFF;
                      if (v73 == v59 && v74 == v60)
                      {
                        v63 = 1;
                        goto LABEL_119;
                      }
                      if (v73 == a2 && v74 == (_DWORD)v29)
                        break;
                    }
                  }
                  v71 += 8;
                  if (!--v70)
                    goto LABEL_119;
                }
                v62 = 1;
              }
LABEL_119:
              ++v64;
            }
            while (v64 != 4);
            if ((v63 & 1) != 0)
            {
              v16 = v211;
            }
            else
            {
              v16 = v211;
              if ((v62 & 1) == 0)
              {
                v77 = v61;
                v78 = (unint64_t)v61 >> 3;
                if (v61 > 0x1BF)
                {
                  if (v61 > 0x71F)
                  {
LABEL_186:
                    v62 = 0;
                    goto LABEL_187;
                  }
                  v78 = v78;
                  v79 = 1 << (v61 & 7);
                }
                else
                {
                  v79 = 1 << (v61 & 7);
                  if ((v79 & byte_1C6979862[v78]) != 0)
                  {
                    v80 = *(_WORD *)(v211[14] + 2 * v61);
                    goto LABEL_199;
                  }
                  if (v61 <= 0xB7 && (v79 & byte_1C697A2C8[v78]) != 0)
                  {
                    v88 = *(_WORD *)(v211[14] + 2 * v61) - v30;
                    if ((*v18 & 0xFFF00) == 0x200 || (++v225.i32[v88 & 7], (*v18 & 0xFFF00) != 0x100))
                    {
                      v89 = v88 + 1;
                      goto LABEL_200;
                    }
                    goto LABEL_186;
                  }
                }
                if ((v79 & byte_1C697B55E[v78]) != 0)
                {
                  v90 = v211[1];
                  v91 = v211[7];
                  v92 = *(unsigned int *)(v90 + 24 * v61 + 4);
                  if (*(_WORD *)(v91 + 2 * v92))
                  {
                    v93 = *(_WORD *)(v91 + 2 * v92) + v61;
                    v94 = (_WORD *)(v211[11] + 2 * *(unsigned int *)(v90 + 24 * v77 + 12));
                    v95 = (unsigned __int16 *)(v91 + 2 * v92 + 2);
                    v96 = v95;
                    v97 = v94;
                    v98 = v93;
                    while (*v97 != 26)
                    {
                      v99 = *v96++;
                      v98 += v99;
                      ++v97;
                      if (!v99)
                      {
                        v100 = 0;
                        goto LABEL_151;
                      }
                    }
                    v100 = v98;
LABEL_151:
                    while (*v94 != 25)
                    {
                      v101 = *v95++;
                      v93 += v101;
                      ++v94;
                      if (!v101)
                        goto LABEL_202;
                    }
                    v102 = v93;
                  }
                  else
                  {
                    v100 = 0;
LABEL_202:
                    v102 = 0;
                  }
                  v103 = (*v18 >> 8) & 0xFFF;
                  v105 = v103 == 1 || v103 == 25;
                  if ((((((*v18 >> 8) & 0xFFF) != 0) ^ v105) & 1) == 0)
                    ++v225.i32[(*(_WORD *)(v211[14] + 2 * v102) - (_BYTE)v30 + 1) & 7];
                  v107 = v103 == 2 || v103 == 25;
                  if ((((v103 != 0) ^ v107) & 1) == 0)
                  {
                    v108 = (*(_WORD *)(v211[14] + 2 * v102) - (_BYTE)v30) & 7;
                    ++v225.i32[v108];
                  }
                  v110 = v103 == 3 || v103 == 26;
                  if ((((v103 != 0) ^ v110) & 1) == 0)
                    ++v225.i32[(*(_WORD *)(v211[14] + 2 * v100) - (_BYTE)v30 + 1) & 7];
                  v111 = v103 != 0;
                  v112 = v103 == 4 || v103 == 26;
                  v113 = v112;
                  if (((v111 ^ v113) & 1) == 0)
                  {
                    v80 = *(_WORD *)(v211[14] + 2 * v100);
LABEL_199:
                    v89 = v80 - v30;
LABEL_200:
                    v62 = 0;
                    ++v225.i32[v89 & 7];
                    goto LABEL_187;
                  }
                }
                goto LABEL_186;
              }
            }
LABEL_187:
            v56 += 8;
            if (v56 == v58)
            {
              v114 = *(_QWORD *)(v54 + 8);
              if ((_QWORD *)v114 == v55)
                break;
              v56 = v58;
              v54 = (unint64_t)(v40 + 6);
              if ((*(_WORD *)(v114 + 44) & 4) != 0)
              {
                while (1)
                {
                  v115 = v114;
                  v116 = *(unsigned int *)(v114 + 40);
                  if ((_DWORD)v116)
                    break;
                  v114 = *(_QWORD *)(v114 + 8);
                  if ((_QWORD *)v114 == v55 || (*(_WORD *)(v114 + 44) & 4) == 0)
                  {
                    v54 = (unint64_t)(v40 + 6);
                    goto LABEL_195;
                  }
                }
                v54 = v114;
LABEL_195:
                v56 = *(_DWORD **)(v115 + 32);
                v58 = &v56[8 * v116];
              }
            }
          }
          while (!((v56 == v58) | v62 & 1));
        }
LABEL_203:
        v14 = v216;
        while (1)
        {
          v18 = (int *)*((_QWORD *)v18 + 3);
          if (!v18)
            goto LABEL_9;
          v19 = *v18;
          if ((*v18 & 0x80000000) == 0)
            goto LABEL_20;
        }
      }
    }
LABEL_81:
    ++v225.i32[v30 & 7];
    if (*(_BYTE *)(v209 + 318))
      ++v225.i32[((_BYTE)v30 + 1) & 7];
    goto LABEL_83;
  }
LABEL_9:
  v20 = 16 * (a2 & 0x7FFFFFFF);
  v21 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + v20) & 0xFFFFFFFFFFFFFFF8) + 24);
  v22 = v21 >> 5;
  v23 = dword_1C660BEE8[v21 >> 5];
  v24 = 1 << v21;
  if ((v24 & v23) != 0
    || (dword_1C660C490[v22] & v24) != 0
    || (dword_1C660C990[v22] & v24) != 0
    || (dword_1C660CCC8[v22] & v24) != 0
    || (dword_1C660CDF8[v22] & v24) != 0
    || (dword_1C660CEE8[v22] & v24) != 0
    || (dword_1C660CF38[v22] & v24) != 0)
  {
    v225.i32[0] += v225.i32[1];
    v225.i32[1] = v225.i32[0];
    v225.i32[2] += v225.i32[3];
    v225.i32[3] = v225.i32[2];
    v226.i32[0] += v226.i32[1];
    v226.i32[1] = v226.i32[0];
    v226.i32[2] += v226.i32[3];
    v226.i32[3] = v226.i32[2];
  }
  v25 = vminvq_u32(vminq_u32(v225, v226));
  v26 = vmaxvq_u32(vmaxq_u32(v226, v225));
  v222 = v224;
  v223 = 0x400000000;
  v27 = v9[31];
  v214 = a4;
  if ((a2 & 0x80000000) != 0)
    v28 = (int **)(*(_QWORD *)(v27 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v28 = (int **)(*(_QWORD *)(v27 + 272) + 8 * v14);
  v120 = v25;
  v121 = v26;
  v122 = *v28;
  if (*v28)
  {
    v212 = v25;
    v123 = v9[33];
    while (1)
    {
      v124 = *v122;
      if ((*v122 & 0x80000000) == 0)
        break;
      v122 = (int *)*((_QWORD *)v122 + 3);
      if (!v122)
      {
        v125 = 0;
        v126 = 0;
        goto LABEL_273;
      }
    }
    v207 = 16 * (a2 & 0x7FFFFFFF);
    v206 = v26;
LABEL_226:
    for (j = *((_QWORD *)v122 + 1); ; j = *(_QWORD *)j & 0xFFFFFFFFFFFFFFF8)
    {
      v128 = *(_WORD *)(j + 44);
      if ((v128 & 4) == 0)
        break;
    }
    if ((*(_BYTE *)(*(_QWORD *)(j + 16) + 20) & 0x10) != 0)
    {
      v129 = (v124 >> 8) & 0xFFF;
      if (v129)
      {
        v130 = *(unsigned __int16 *)(*(_QWORD *)(v123 + 96) + 4 * v129 + 2);
      }
      else
      {
        v131 = v27;
        RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v123, v122[1], v27);
        v27 = v131;
        v121 = v206;
        v20 = v207;
        v130 = RegSizeInBits;
        v128 = *(_WORD *)(j + 44);
      }
      v133 = j;
      if ((v128 & 4) != 0)
      {
        v133 = j;
        do
          v133 = *(_QWORD *)v133 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v133 + 44) & 4) != 0);
      }
      v134 = *(_QWORD *)(j + 24) + 48;
      v135 = *(unsigned int **)(v133 + 32);
      v136 = *(unsigned int *)(v133 + 40);
      v137 = &v135[8 * v136];
      if (!(_DWORD)v136)
      {
        v155 = *(_QWORD *)(v133 + 8);
        if (v155 == v134)
        {
          v133 = v134;
        }
        else
        {
          v133 = v134;
          if ((*(_WORD *)(v155 + 44) & 4) != 0)
          {
            while (1)
            {
              v156 = v155;
              v157 = *(unsigned int *)(v155 + 40);
              if ((_DWORD)v157)
                break;
              v155 = *(_QWORD *)(v155 + 8);
              if (v155 == v134 || (*(_WORD *)(v155 + 44) & 4) == 0)
              {
                v133 = v134;
                goto LABEL_271;
              }
            }
            v133 = v155;
LABEL_271:
            v135 = *(unsigned int **)(v156 + 32);
            v137 = &v135[8 * v157];
            v20 = v207;
            v121 = v206;
          }
        }
      }
      if (v135 == v137)
        goto LABEL_257;
      v204 = v9;
      v205 = v12;
      do
      {
        v138 = *v135;
        if (!*v135 && ((v138 | v124) & 0x1000000) != 0)
        {
          v139 = v135[1];
          v140 = *(_DWORD *)(v9[35] + 4 * (v139 & 0x7FFFFFFF));
          if (v140)
          {
            v141 = (v138 >> 8) & 0xFFF;
            if ((_DWORD)v141)
            {
              v142 = *(unsigned __int16 *)(*(_QWORD *)(v123 + 96) + 4 * v141 + 2);
            }
            else
            {
              v143 = v123;
              v144 = v123;
              v145 = v27;
              v146 = v130;
              v142 = llvm::TargetRegisterInfo::getRegSizeInBits(v143, v139, v27);
              v130 = v146;
              v27 = v145;
              v123 = v144;
              v9 = v204;
              v12 = v205;
              v121 = v206;
              v20 = v207;
            }
            v147 = (_DWORD)v130 == v142;
            if (v223 >= HIDWORD(v223))
            {
              v152 = v140;
              v203 = v123;
              v153 = v27;
              v154 = v130;
              sub_1C6147EB4(&v222, v152, v147);
              v130 = v154;
              v27 = v153;
              v123 = v203;
              v121 = v206;
              v20 = v207;
            }
            else
            {
              v148 = (char *)v222 + 8 * v223;
              *(_DWORD *)v148 = v140;
              v148[4] = v147;
              LODWORD(v223) = v223 + 1;
            }
          }
        }
        v135 += 8;
        if (v135 == v137)
        {
          v149 = *(_QWORD *)(v133 + 8);
          if (v149 == v134)
            break;
          v135 = v137;
          v133 = v134;
          if ((*(_WORD *)(v149 + 44) & 4) != 0)
          {
            while (1)
            {
              v150 = v149;
              v151 = *(unsigned int *)(v149 + 40);
              if ((_DWORD)v151)
                break;
              v149 = *(_QWORD *)(v149 + 8);
              if (v149 == v134 || (*(_WORD *)(v149 + 44) & 4) == 0)
              {
                v133 = v134;
                goto LABEL_253;
              }
            }
            v133 = v149;
LABEL_253:
            v135 = *(unsigned int **)(v150 + 32);
            v137 = &v135[8 * v151];
          }
        }
      }
      while (v135 != v137);
    }
LABEL_257:
    while (1)
    {
      v122 = (int *)*((_QWORD *)v122 + 3);
      if (!v122)
        break;
      v124 = *v122;
      if ((*v122 & 0x80000000) == 0)
        goto LABEL_226;
    }
    v125 = v223 != 0;
    v126 = 2 * v125;
LABEL_273:
    v120 = v212;
  }
  else
  {
    v125 = 0;
    v126 = 0;
  }
  v213 = v121 - v120;
  v158 = a5;
  if (v121 == v120 && !v125)
    goto LABEL_352;
  if (v120 < 2 || v213 > v120 >> 1)
  {
    if (v125)
      v160 = 2 * (byte_1ED7EB710 != 0);
    else
      v160 = v126;
    if (v121 == v120)
      v159 = 1;
    else
      v159 = v160;
  }
  else
  {
    if (v121 != v120 && v126 == 0)
      goto LABEL_352;
    v159 = 1;
  }
  if (v213 <= 0xF)
    v161 = 0;
  else
    v161 = v213 >> 1;
  v162 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v220 + 40) + 24) + v20);
  v163 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v220 + 16) + 176))(*(_QWORD *)(v220 + 16));
  if (v214)
  {
    v164 = v161 + v120;
    v165 = &v12[v214];
    v215 = (*(_DWORD *)(*(_QWORD *)(v163 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(_QWORD *)(v162 & 0xFFFFFFFFFFFFFFF8) + 24)
                       + *(_DWORD *)(v163 + 272)
                       * ((*(_QWORD *)(v163 + 248) - *(_QWORD *)(v163 + 240)) >> 3))
                      + 4) >> 4)
         - 1;
    v166 = *(_BYTE *)(v209 + 323) == 0;
    if (*(_BYTE *)(v209 + 323))
      v167 = -16;
    else
      v167 = -8;
    v210 = v167;
    v221 = (_QWORD *)(v163 + 8);
    v168 = 8;
    if (v166)
      v168 = 4;
    v208 = v168;
    v169 = 0xFFFFFFFFLL;
    while (1)
    {
      v170 = *v12;
      v171 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 2 * v170);
      if (v159 == 1 || v171 < 0x40)
      {
        v184 = v169;
      }
      else
      {
        v172 = *(_QWORD *)(v217 + 248);
        v173 = (uint64_t *)(v172 + 8);
        if (!v172)
          v173 = 0;
        v174 = *v173;
        v175 = *(unsigned int *)(*v173 + 24 * *v12 + 16);
        v176 = v175 & 0xF;
        v177 = v173[6];
        v178 = (_WORD *)(v177 + ((v175 >> 3) & 0x1FFFFFFE));
        v180 = *v178;
        v179 = v178 + 1;
        v181 = v180 + v176 * v170;
        v182 = *(_QWORD *)(v217 + 392);
        do
        {
          if (*(_DWORD *)(v182 + 216 * v181 + 204))
          {
            v185 = v169;
            goto LABEL_322;
          }
          v183 = *v179++;
          v181 += v183;
        }
        while (v183);
        v184 = ((v215 + v171) & v210) >> 1;
        if (v184 >= v169)
          v185 = v169;
        else
          v185 = v184;
        if (v184 >= v169 || v213 > 3)
        {
LABEL_315:
          if ((_DWORD)v184 == (_DWORD)v185)
            goto LABEL_319;
          if (v159)
          {
            v159 = 1;
            break;
          }
          goto LABEL_352;
        }
        v186 = 0;
        v187 = v184 + 56;
LABEL_310:
        v188 = *(unsigned int *)(v174 + 24 * (v186 + v187) + 16);
        v189 = v188 & 0xF;
        v190 = (v188 >> 3) & 0x1FFFFFFE;
        v191 = *(_WORD *)(v177 + v190) + v189 * (v186 + v187);
        v192 = (unsigned __int16 *)(v177 + 2 + v190);
        while (!*(_DWORD *)(v182 + 216 * v191 + 204))
        {
          v193 = *v192++;
          v191 += v193;
          if (!v193)
          {
            if (++v186 != v208)
              goto LABEL_310;
            v185 = v169;
            goto LABEL_315;
          }
        }
      }
LABEL_319:
      v185 = v184;
      if (v159 == 1)
        break;
LABEL_322:
      if (v225.i32[v171 & 7] > v164)
        goto LABEL_349;
      if (v159)
        break;
      v198 = 32;
LABEL_339:
      v199 = v158[1];
      if ((unint64_t)(v199 + 1) > v158[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v158, a5 + 3, v199 + 1, 2);
        v199 = v158[1];
      }
      *(_WORD *)(*v158 + 2 * v199) = v170;
      v200 = v158[1] + 1;
      v158[1] = v200;
      if (v200 == v198)
        goto LABEL_352;
      if (v200 == 32 && v159 == 2)
        v159 = 1;
LABEL_349:
      ++v12;
      v169 = v185;
      if (v12 == v165)
        goto LABEL_352;
    }
    if ((_DWORD)v223)
    {
      v194 = (uint64_t *)v222;
      v195 = 8 * v223;
      while (1)
      {
        v196 = *v194;
        v197 = *v194 != (_DWORD)v170 || (*v194 & 0xFF00000000) == 0;
        if (v197
          && ((_DWORD)v170 == (_DWORD)v196
           || (v170 - 1) <= 0x3FFFFFFE
           && (v196 - 1) <= 0x3FFFFFFE
           && llvm::MCRegisterInfo::regsOverlap(v221, v170, *v194)))
        {
          break;
        }
        ++v194;
        v195 -= 8;
        if (!v195)
        {
          v198 = 128;
          v158 = a5;
          goto LABEL_339;
        }
      }
      v158 = a5;
      goto LABEL_349;
    }
    v198 = 128;
    goto LABEL_339;
  }
LABEL_352:
  if (v222 != v224)
    free(v222);
  return 0;
}

uint64_t sub_1C4962860(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  int **v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  BOOL v69;
  char v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  uint64_t *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  BOOL v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unsigned int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  __int16 v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  int v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  llvm::LiveInterval *v171;
  unint64_t v172;
  unsigned int v173;
  _QWORD *v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  BOOL v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  _QWORD *v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  BOOL v201;
  unint64_t v202;
  unsigned int v203;
  unint64_t v204;
  unsigned int v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t v210;
  BOOL v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  unint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  _QWORD *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  llvm::LiveInterval *v226;
  uint64_t v227;
  __int16 v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  int v232;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  unsigned int v242;
  _QWORD *v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  unint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  BOOL v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  BOOL v258;
  unint64_t v259;
  unsigned int v260;
  _QWORD *v261;
  unint64_t v262;
  uint64_t v263;
  BOOL v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  BOOL v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v285;
  uint64_t v286;
  llvm::MachineBasicBlock *v287;
  unint64_t FirstTerminator;
  uint64_t v289;
  llvm::LiveInterval *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int v302;
  unint64_t v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int v306;
  int v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  llvm::LiveInterval *v311;
  uint64_t v312;
  uint64_t v313;
  _BYTE *v314;
  _BYTE *v315;
  uint64_t v316;
  int v317;
  _BYTE v318[64];
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  int32x2_t v323;
  unsigned int v324;
  char *v325;
  char *v326;
  uint64_t v327;
  int v328;
  _BYTE v329[72];

  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v13 = *(_QWORD *)(v12 + 40);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 16) + 176))(*(_QWORD *)(v12 + 16));
  v15 = *(_QWORD *)(v14 + 264);
  v16 = *(_DWORD *)(v14 + 272) * ((*(_QWORD *)(v14 + 248) - *(_QWORD *)(v14 + 240)) >> 3);
  if ((*(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*a5 + 24)) + 4) & 0xFFFFFFF8) == 0x10
    && (*(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*(_QWORD *)a3 + 24)) + 4) & 0xFFFFFFF8) == 0x20)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
    v18 = (uint64_t *)((v17 & 0x80000000) != 0
                    ? *(_QWORD *)(v13 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v13 + 272) + 8 * v17);
    v19 = *v18;
    if (*v18)
    {
      while ((*(_BYTE *)(v19 + 3) & 1) != 0)
      {
        v19 = *(_QWORD *)(v19 + 24);
        if (!v19)
          goto LABEL_9;
      }
      v286 = *(_QWORD *)(v19 + 8);
LABEL_408:
      if ((~*(_DWORD *)(*(_QWORD *)(v286 + 16) + 16) & 0x800200) == 0)
      {
        v287 = *(llvm::MachineBasicBlock **)(v286 + 24);
        FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v287);
        if ((llvm::MachineBasicBlock *)((char *)v287 + 48) != (llvm::MachineBasicBlock *)FirstTerminator
          && **(_WORD **)(FirstTerminator + 16) == 288)
        {
          return 0;
        }
      }
      v289 = *(_QWORD *)(v19 + 8);
      while (1)
      {
        v19 = *(_QWORD *)(v19 + 24);
        if (!v19)
          break;
        if ((*(_BYTE *)(v19 + 3) & 1) == 0)
        {
          v286 = *(_QWORD *)(v19 + 8);
          if (v286 != v289)
            goto LABEL_408;
        }
      }
    }
  }
LABEL_9:
  v312 = a3;
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(unsigned int *)(v20 + 4);
  v325 = v329;
  v326 = v329;
  v327 = 8;
  v328 = 0;
  v322 = 0;
  v323 = 0;
  v324 = 0;
  v319 = 0;
  v320 = 0;
  v321 = 0;
  v22 = *(unsigned int *)(v20 + 36);
  v23 = v21 & 0x7FFFFFFF;
  if (v23 >= *(unsigned int *)(a8 + 416) || (v311 = *(llvm::LiveInterval **)(*(_QWORD *)(a8 + 408) + 8 * v23)) == 0)
  {
    v290 = (llvm::LiveInterval *)sub_1C4851220(a8, v21);
    v291 = *(_QWORD *)(a8 + 304);
    v292 = *(_QWORD *)(a8 + 248);
    *(_QWORD *)v291 = v292;
    *(_QWORD *)(v291 + 8) = *(_QWORD *)(v292 + 40);
    *(_OWORD *)(v291 + 16) = *(_OWORD *)(a8 + 288);
    *(_QWORD *)(v291 + 32) = a8 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v291);
    *(_DWORD *)(v291 + 184) = 0;
    v293 = *(_QWORD *)(a8 + 256);
    v42 = *(_BYTE *)(v293 + 16) == 0;
    v294 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v293 + 24) + 16 * (*((_DWORD *)v290 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v296 = !v42 && v294 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a8 + 304), v290, v296);
    v311 = v290;
    llvm::LiveIntervals::computeDeadValues(a8, (uint64_t)v290, 0);
  }
  v307 = v21;
  v308 = v21 & 0x7FFFFFFF;
  if ((v21 & 0x80000000) != 0)
    v24 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * v23 + 8);
  else
    v24 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v21);
  v25 = *v24;
  if (*v24)
  {
    while ((*(_BYTE *)(v25 + 3) & 1) != 0)
    {
      v25 = *(_QWORD *)(v25 + 24);
      if (!v25)
        goto LABEL_17;
    }
    v309 = v22;
    v34 = *(_QWORD *)(v25 + 8);
LABEL_32:
    if (!sub_1C4963D58(v34))
      goto LABEL_167;
    v35 = *(_WORD *)(v34 + 44);
    v36 = v34;
    if ((v35 & 4) != 0)
    {
      do
        v36 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v36 + 44) & 4) != 0);
    }
    v37 = v34;
    if ((v35 & 8) != 0)
    {
      do
        v37 = *(_QWORD *)(v37 + 8);
      while ((*(_WORD *)(v37 + 44) & 8) != 0);
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (v36 != v38)
    {
      while (1)
      {
        v39 = **(unsigned __int16 **)(v36 + 16);
        v40 = v39 > 0x17;
        v41 = (1 << v39) & 0x83E000;
        v42 = v40 || v41 == 0;
        if (v42)
          break;
        v36 = *(_QWORD *)(v36 + 8);
        if (v36 == v38)
        {
          v36 = v38;
          break;
        }
      }
    }
    v43 = *(_QWORD *)(a8 + 288);
    v44 = *(_QWORD *)(v43 + 368);
    v45 = *(unsigned int *)(v43 + 384);
    if ((_DWORD)v45)
    {
      LODWORD(v46) = ((v36 >> 4) ^ (v36 >> 9)) & (v45 - 1);
      v47 = (uint64_t *)(v44 + 16 * v46);
      v48 = *v47;
      if (v36 == *v47)
        goto LABEL_49;
      v49 = 1;
      while (v48 != -4096)
      {
        v50 = v46 + v49++;
        v46 = v50 & (v45 - 1);
        v48 = *(_QWORD *)(v44 + 16 * v46);
        if (v36 == v48)
        {
          v47 = (uint64_t *)(v44 + 16 * v46);
          goto LABEL_49;
        }
      }
    }
    v47 = (uint64_t *)(v44 + 16 * v45);
LABEL_49:
    v51 = v47[1];
    v52 = v51 & 0xFFFFFFFFFFFFFFF8;
    v53 = *((_DWORD *)v311 + 2);
    v54 = *(_QWORD **)v311;
    if (v53)
    {
      v55 = v54[3 * v53 - 2];
      v56 = *(_DWORD *)(v52 + 24);
      v57 = (v55 >> 1) & 3 | *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24);
      v58 = *(_QWORD **)v311;
      v59 = *((unsigned int *)v311 + 2);
      if (v56 < v57)
      {
        do
        {
          v60 = v59 >> 1;
          v61 = v58[3 * (v59 >> 1) + 1];
          LODWORD(v61) = (v61 >> 1) & 3 | *(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24);
          v59 -= (v59 >> 1) + 1;
          v62 = v56 >= v61;
          if (v56 >= v61)
            v63 = v60 + 1;
          else
            v63 = 0;
          v58 += 3 * v63;
          if (!v62)
            v59 = v60;
        }
        while (v59);
LABEL_60:
        v64 = *(_QWORD *)(v34 + 24);
        v65 = &v54[3 * v53];
        v305 = v51;
        if (v58 == v65
          || ((*v58 >> 1) & 3 | *(_DWORD *)((*v58 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v52 + 24))
        {
          v66 = 0;
        }
        else
        {
          v66 = v58[2];
          v67 = v58[1] & 0xFFFFFFFFFFFFFFF8;
          v68 = v58 + 3;
          v69 = v52 == v67 && v68 == v65;
          if (!v69 && *(_QWORD *)(v66 + 8) == v52)
            v66 = 0;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v325, v64);
        v71 = v70;
        v72 = v322;
        v73 = v324;
        v74 = v64 >> 4;
        if (!v71)
        {
LABEL_115:
          if (!v73)
            goto LABEL_167;
LABEL_116:
          v97 = v74 ^ (v64 >> 9);
          v98 = v73 - 1;
          LODWORD(v99) = (v73 - 1) & v97;
          v100 = (uint64_t *)(v72 + 16 * v99);
          v101 = *v100;
          if (v64 != *v100)
          {
            v125 = 1;
            v126 = *v100;
            LODWORD(v102) = v98 & v97;
            while (v126 != -4096)
            {
              v127 = v102 + v125++;
              v102 = v127 & v98;
              v126 = *(_QWORD *)(v72 + 16 * v102);
              v103 = v102;
              if (v64 == v126)
                goto LABEL_118;
            }
            goto LABEL_167;
          }
          LODWORD(v102) = v98 & v97;
          v103 = v98 & v97;
LABEL_118:
          if ((_DWORD)v102 == v73)
          {
LABEL_167:
            v124 = *(_QWORD *)(v25 + 8);
            v22 = v309;
            while (1)
            {
              v25 = *(_QWORD *)(v25 + 24);
              if (!v25)
                goto LABEL_17;
              if ((*(_BYTE *)(v25 + 3) & 1) == 0)
              {
                v34 = *(_QWORD *)(v25 + 8);
                if (v34 != v124)
                  goto LABEL_32;
              }
            }
          }
          if (*(_QWORD *)(v72 + 16 * v103 + 8) != v66)
          {
            if (v64 == v101)
            {
LABEL_173:
              *v100 = -8192;
              v323 = vadd_s32(v323, (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v128 = 1;
              while (v101 != -4096)
              {
                v129 = v99 + v128++;
                v99 = v129 & v98;
                v101 = *(_QWORD *)(v72 + 16 * v99);
                if (v64 == v101)
                {
                  v100 = (uint64_t *)(v72 + 16 * v99);
                  goto LABEL_173;
                }
              }
            }
            sub_1C6147D90((uint64_t)&v319, v64);
            goto LABEL_167;
          }
          if (v321)
          {
            v104 = (v321 - 1) & v97;
            v105 = (uint64_t *)(v319 + 56 * v104);
            v106 = *v105;
            if (v64 == *v105)
            {
LABEL_164:
              v123 = *((unsigned int *)v105 + 4);
              if (v123 >= *((unsigned int *)v105 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v105 + 1), (uint64_t)(v105 + 3), v123 + 1, 8);
                v123 = *((unsigned int *)v105 + 4);
              }
              *(_QWORD *)(v105[1] + 8 * v123) = v305;
              ++*((_DWORD *)v105 + 4);
              goto LABEL_167;
            }
            v107 = 0;
            v108 = 1;
            while (v106 != -4096)
            {
              if (v107)
                v109 = 0;
              else
                v109 = v106 == -8192;
              if (v109)
                v107 = v105;
              v110 = v104 + v108++;
              v104 = v110 & (v321 - 1);
              v105 = (uint64_t *)(v319 + 56 * v104);
              v106 = *v105;
              if (v64 == *v105)
                goto LABEL_164;
            }
            if (v107)
              v105 = v107;
          }
          else
          {
            v105 = 0;
          }
          if (4 * (int)v320 + 4 >= 3 * v321)
          {
            sub_1C49642A0(&v319, 2 * v321);
            v111 = (v321 - 1) & v97;
            v105 = (uint64_t *)(v319 + 56 * v111);
            v112 = *v105;
            if (v64 == *v105)
            {
LABEL_145:
              v117 = v64;
LABEL_161:
              LODWORD(v320) = v320 + 1;
              if (v117 != -4096)
                --HIDWORD(v320);
              *v105 = v64;
              v105[1] = (uint64_t)(v105 + 3);
              v105[2] = 0x400000000;
              goto LABEL_164;
            }
            v113 = 0;
            v114 = 1;
            while (v112 != -4096)
            {
              if (v113)
                v115 = 0;
              else
                v115 = v112 == -8192;
              if (v115)
                v113 = v105;
              v116 = v111 + v114++;
              v111 = v116 & (v321 - 1);
              v105 = (uint64_t *)(v319 + 56 * v111);
              v112 = *v105;
              if (v64 == *v105)
                goto LABEL_145;
            }
            goto LABEL_158;
          }
          if (v321 + ~(_DWORD)v320 - HIDWORD(v320) <= v321 >> 3)
          {
            sub_1C49642A0(&v319, v321);
            if (v321)
            {
              v118 = (v321 - 1) & v97;
              v105 = (uint64_t *)(v319 + 56 * v118);
              v119 = *v105;
              if (*v105 != v64)
              {
                v113 = 0;
                v120 = 1;
                while (v119 != -4096)
                {
                  if (v113)
                    v121 = 0;
                  else
                    v121 = v119 == -8192;
                  if (v121)
                    v113 = v105;
                  v122 = v118 + v120++;
                  v118 = v122 & (v321 - 1);
                  v105 = (uint64_t *)(v319 + 56 * v118);
                  v119 = *v105;
                  if (*v105 == v64)
                    goto LABEL_160;
                }
LABEL_158:
                if (v113)
                  v105 = v113;
              }
            }
            else
            {
              v105 = 0;
            }
          }
LABEL_160:
          v117 = *v105;
          goto LABEL_161;
        }
        if (v324)
        {
          v75 = (v324 - 1) & (v74 ^ (v64 >> 9));
          v76 = (uint64_t *)(v322 + 16 * v75);
          v77 = *v76;
          if (v64 == *v76)
            goto LABEL_116;
          v78 = 0;
          v79 = 1;
          while (v77 != -4096)
          {
            if (v78)
              v80 = 0;
            else
              v80 = v77 == -8192;
            if (v80)
              v78 = v76;
            v81 = v75 + v79++;
            v75 = v81 & (v324 - 1);
            v76 = (uint64_t *)(v322 + 16 * v75);
            v77 = *v76;
            if (v64 == *v76)
              goto LABEL_115;
          }
          if (v78)
            v82 = v78;
          else
            v82 = v76;
        }
        else
        {
          v82 = 0;
        }
        if (4 * v323.i32[0] + 4 >= 3 * v324)
        {
          sub_1C4964094((uint64_t)&v322, 2 * v324);
          v83 = v324 - 1;
          v84 = (v324 - 1) & (v74 ^ (v64 >> 9));
          v82 = (uint64_t *)(v322 + 16 * v84);
          v85 = *v82;
          if (v64 == *v82)
          {
LABEL_96:
            v90 = v64;
LABEL_112:
            ++v323.i32[0];
            if (v90 != -4096)
              --v323.i32[1];
            *v82 = v64;
            v82[1] = v66;
            v72 = v322;
            v73 = v324;
            goto LABEL_115;
          }
          v86 = 0;
          v87 = 1;
          while (v85 != -4096)
          {
            if (v86)
              v88 = 0;
            else
              v88 = v85 == -8192;
            if (v88)
              v86 = v82;
            v89 = v84 + v87++;
            v84 = v89 & v83;
            v82 = (uint64_t *)(v322 + 16 * (v89 & v83));
            v85 = *v82;
            if (v64 == *v82)
              goto LABEL_96;
          }
          goto LABEL_109;
        }
        if (v324 + ~v323.i32[0] - v323.i32[1] <= v324 >> 3)
        {
          sub_1C4964094((uint64_t)&v322, v324);
          if (v324)
          {
            v91 = v324 - 1;
            v92 = (v324 - 1) & (v74 ^ (v64 >> 9));
            v82 = (uint64_t *)(v322 + 16 * v92);
            v93 = *v82;
            if (*v82 != v64)
            {
              v86 = 0;
              v94 = 1;
              while (v93 != -4096)
              {
                if (v86)
                  v95 = 0;
                else
                  v95 = v93 == -8192;
                if (v95)
                  v86 = v82;
                v96 = v92 + v94++;
                v92 = v96 & v91;
                v82 = (uint64_t *)(v322 + 16 * (v96 & v91));
                v93 = *v82;
                if (*v82 == v64)
                  goto LABEL_111;
              }
LABEL_109:
              if (v86)
                v82 = v86;
            }
          }
          else
          {
            v82 = 0;
          }
        }
LABEL_111:
        v90 = *v82;
        goto LABEL_112;
      }
    }
    else
    {
      v53 = 0;
    }
    v58 = &v54[3 * v53];
    goto LABEL_60;
  }
LABEL_17:
  if (HIDWORD(v327) != v328)
  {
    if (*(_QWORD *)(v312 + 24) <= 1uLL)
      v27 = 1;
    else
      v27 = *(_QWORD *)(v312 + 24);
    v28 = a5[3];
    if (v28 <= 1)
      v29 = 1;
    else
      v29 = a5[3];
    v30 = *(unsigned int **)(a2 + 32);
    v31 = ((unint64_t)v30[8] >> 8) & 0xFFF;
    if ((_DWORD)v31)
      v27 = *(_QWORD *)(*(_QWORD *)(v14 + 232) + 8 * v31);
    v32 = ((unint64_t)*v30 >> 8) & 0xFFF;
    if ((_DWORD)v32)
      v29 = *(_QWORD *)(*(_QWORD *)(v14 + 232) + 8 * v32);
    v314 = v318;
    v315 = v318;
    v316 = 8;
    v317 = 0;
    if ((v22 & 0x80000000) != 0)
      v33 = (int **)(*(_QWORD *)(v13 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
    else
      v33 = (int **)(*(_QWORD *)(v13 + 272) + 8 * v22);
    v130 = *v33;
    if (!*v33)
    {
LABEL_193:
      v26 = 1;
      goto LABEL_194;
    }
    while (1)
    {
      v131 = *v130;
      if ((*v130 & 0x1000000) == 0)
        break;
      v130 = (int *)*((_QWORD *)v130 + 3);
      if (!v130)
        goto LABEL_193;
    }
    v137 = (v28 << __clz(__rbit64(v27)) >> __clz(__rbit64(v29)));
    v313 = v322;
    v306 = v324;
    v304 = v324 - 1;
    v300 = v321 - 1;
    v301 = v319;
    v302 = v321;
    v303 = v22 & 0x7FFFFFFF;
    v298 = a8 + 312;
    v299 = v319 + 56 * v321;
LABEL_206:
    v138 = *((_QWORD *)v130 + 1);
    if (!sub_1C4963D58(v138))
      goto LABEL_374;
    v139 = *(_QWORD *)(*(_QWORD *)(v14 + 232) + 8 * ((v131 >> 8) & 0xFFF));
    v140 = *(_QWORD *)(v138 + 24);
    v141 = (char *)sub_1C477672C((uint64_t)&v325, v140);
    v142 = v326 == v325 ? (uint64_t *)((char *)&v327 + 4) : &v327;
    if (v141 == &v326[8 * *(unsigned int *)v142] || (v137 & v139) == 0)
      goto LABEL_374;
    v144 = v306;
    if (!v306)
      goto LABEL_416;
    v297 = v137;
    v310 = v22;
    v145 = (v140 >> 4) ^ (v140 >> 9);
    v146 = v304 & v145;
    v147 = (uint64_t *)(v313 + 16 * v146);
    v148 = *v147;
    v149 = v304 & v145;
    if (v140 == *v147)
    {
LABEL_216:
      if (v149 != v306)
      {
        if (*((_QWORD *)v311 + 13))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v314, v140);
          v144 = v306;
          if (v150)
          {
            if (v302)
            {
              v184 = v300 & v145;
              v185 = v301 + 56 * (v300 & v145);
              v186 = *(_QWORD *)v185;
              if (*(_QWORD *)v185 == v140)
              {
LABEL_254:
                if (v299 != v185)
                {
                  v189 = *((_QWORD *)v311 + 13);
                  if (v189)
                  {
                    v190 = *(uint64_t **)(v185 + 8);
                    v191 = *(unsigned int *)(v185 + 16);
                    while (!(_DWORD)v191)
                    {
LABEL_298:
                      v189 = *(_QWORD *)(v189 + 104);
                      if (!v189)
                        goto LABEL_220;
                    }
                    v192 = *(_DWORD *)(v189 + 8);
                    v193 = *(_QWORD *)v189 + 24 * v192;
                    v194 = v190;
                    while (1)
                    {
                      v195 = *v194;
                      v196 = (_QWORD *)(*(_QWORD *)v189 + 24 * v192);
                      if (v192)
                      {
                        v197 = *(_DWORD *)((v195 & 0xFFFFFFFFFFFFFFF8) + 24) | (v195 >> 1) & 3;
                        v196 = (_QWORD *)(*(_QWORD *)v189 + 24 * v192);
                        if (v197 < ((*(_QWORD *)(v193 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v193 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 24)))
                        {
                          v196 = *(_QWORD **)v189;
                          v198 = *(unsigned int *)(v189 + 8);
                          do
                          {
                            v199 = v198 >> 1;
                            v200 = v196[3 * (v198 >> 1) + 1];
                            LODWORD(v200) = (v200 >> 1) & 3 | *(_DWORD *)((v200 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v198 -= (v198 >> 1) + 1;
                            v201 = v197 >= v200;
                            if (v197 >= v200)
                              v202 = v199 + 1;
                            else
                              v202 = 0;
                            v196 += 3 * v202;
                            if (!v201)
                              v198 = v199;
                          }
                          while (v198);
                        }
                      }
                      if (v196 != (_QWORD *)v193)
                      {
                        v203 = (*v196 >> 1) & 3 | *(_DWORD *)((*v196 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v204 = v195 & 0xFFFFFFFFFFFFFFF8;
                        v205 = *(_DWORD *)((v195 & 0xFFFFFFFFFFFFFFF8) + 24);
                        if (v203 <= (v205 | (v195 >> 1) & 3))
                        {
                          if (!v192
                            || v205 >= ((*(_QWORD *)(v193 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v193 - 16) & 0xFFFFFFFFFFFFFFF8) + 24)))
                          {
                            goto LABEL_416;
                          }
                          v206 = *(_QWORD **)v189;
                          v207 = *(unsigned int *)(v189 + 8);
                          do
                          {
                            v208 = v206;
                            v209 = v207 >> 1;
                            v210 = v206[3 * (v207 >> 1) + 1];
                            LODWORD(v210) = (v210 >> 1) & 3 | *(_DWORD *)((v210 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v207 -= (v207 >> 1) + 1;
                            v211 = v205 >= v210;
                            if (v205 >= v210)
                              v212 = v209 + 1;
                            else
                              v212 = 0;
                            v206 = &v208[3 * v212];
                            if (!v211)
                              v207 = v209;
                          }
                          while (v207);
                          if (v206 == (_QWORD *)v193
                            || ((*v206 >> 1) & 3 | *(_DWORD *)((*v206 & 0xFFFFFFFFFFFFFFF8) + 24)) > v205)
                          {
                            goto LABEL_416;
                          }
                          v214 = v208[3 * v212 + 1];
                          v213 = v208[3 * v212 + 2];
                          v215 = v206 + 3;
                          if (v204 == (v214 & 0xFFFFFFFFFFFFFFF8) && v215 == (_QWORD *)v193)
                          {
                            if (!v213)
                              goto LABEL_416;
                            v217 = *(_QWORD *)(v213 + 8);
                          }
                          else
                          {
                            v217 = *(_QWORD *)(v213 + 8);
                            if (v217 == v204)
                              goto LABEL_416;
                          }
                          if ((v217 & 6) == 0)
                            goto LABEL_416;
                          if (v217 >= 8)
                          {
                            v218 = *(_QWORD *)((v217 & 0xFFFFFFFFFFFFFFF8) + 16);
                            if (!v218)
                              goto LABEL_416;
                            if (**(_WORD **)(v218 + 16) != 19)
                              goto LABEL_416;
                            v219 = *(_DWORD **)(v218 + 32);
                            if (v219[9] != (_DWORD)v310 || ((v219[8] ^ *v219) & 0xFFF00) != 0)
                              goto LABEL_416;
                          }
                        }
                      }
                      if (++v194 == &v190[v191])
                        goto LABEL_298;
                    }
                  }
                }
              }
              else
              {
                v187 = 1;
                while (v186 != -4096)
                {
                  v188 = v184 + v187++;
                  v184 = v188 & v300;
                  v185 = v301 + 56 * v184;
                  v186 = *(_QWORD *)v185;
                  if (*(_QWORD *)v185 == v140)
                    goto LABEL_254;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v270 = 1;
      v149 = v304 & v145;
      while (v148 != -4096)
      {
        v271 = v149 + v270++;
        v149 = v271 & v304;
        v148 = *(_QWORD *)(v313 + 16 * v149);
        if (v140 == v148)
          goto LABEL_216;
      }
    }
LABEL_220:
    v151 = *v147;
    if (v140 != *v147)
    {
      v272 = 1;
      while (v151 != -4096)
      {
        v273 = v146 + v272++;
        v144 = v306;
        v146 = v273 & v304;
        v151 = *(_QWORD *)(v313 + 16 * v146);
        if (v140 == v151)
          goto LABEL_221;
      }
      goto LABEL_416;
    }
LABEL_221:
    if ((_DWORD)v146 == v144
      || (v152 = v313 + 16 * v146, v154 = *(_QWORD *)(v152 + 8), v153 = (_QWORD *)(v152 + 8), !v154))
    {
LABEL_416:
      v26 = 0;
LABEL_194:
      if (v315 != v314)
        free(v315);
      goto LABEL_196;
    }
    v155 = *(_WORD *)(a2 + 44);
    v156 = a2;
    if ((v155 & 4) != 0)
    {
      do
        v156 = *(_QWORD *)v156 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v156 + 44) & 4) != 0);
    }
    v157 = a2;
    if ((v155 & 8) != 0)
    {
      do
        v157 = *(_QWORD *)(v157 + 8);
      while ((*(_WORD *)(v157 + 44) & 8) != 0);
    }
    v158 = *(_QWORD *)(v157 + 8);
    if (v156 != v158)
    {
      while (1)
      {
        v159 = **(unsigned __int16 **)(v156 + 16);
        v40 = v159 > 0x17;
        v160 = (1 << v159) & 0x83E000;
        if (v40 || v160 == 0)
          break;
        v156 = *(_QWORD *)(v156 + 8);
        if (v156 == v158)
        {
          v156 = v158;
          break;
        }
      }
    }
    v162 = *(_QWORD *)(a8 + 288);
    v163 = *(_QWORD *)(v162 + 368);
    v164 = *(unsigned int *)(v162 + 384);
    if ((_DWORD)v164)
    {
      LODWORD(v165) = ((v156 >> 4) ^ (v156 >> 9)) & (v164 - 1);
      v166 = (uint64_t *)(v163 + 16 * v165);
      v167 = *v166;
      if (v156 == *v166)
      {
LABEL_239:
        v170 = v166[1];
        if (v308 >= *(unsigned int *)(a8 + 416)
          || (v171 = *(llvm::LiveInterval **)(*(_QWORD *)(a8 + 408) + 8 * v308)) == 0)
        {
          v171 = (llvm::LiveInterval *)sub_1C4851220(a8, v307);
          v274 = *(_QWORD *)(a8 + 304);
          v275 = *(_QWORD *)(a8 + 248);
          *(_QWORD *)v274 = v275;
          *(_QWORD *)(v274 + 8) = *(_QWORD *)(v275 + 40);
          *(_OWORD *)(v274 + 16) = *(_OWORD *)(a8 + 288);
          *(_QWORD *)(v274 + 32) = v298;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v274);
          *(_DWORD *)(v274 + 184) = 0;
          v276 = *(_QWORD *)(a8 + 256);
          v42 = *(_BYTE *)(v276 + 16) == 0;
          v277 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v276 + 24) + 16 * (*((_DWORD *)v171 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v279 = !v42 && v277 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a8 + 304), v171, v279);
          llvm::LiveIntervals::computeDeadValues(a8, (uint64_t)v171, 0);
        }
        v172 = v170 & 0xFFFFFFFFFFFFFFF8;
        v173 = *((_DWORD *)v171 + 2);
        v174 = *(_QWORD **)v171;
        if (v173)
        {
          v175 = v174[3 * v173 - 2];
          v176 = *(_DWORD *)(v172 + 24);
          v177 = (v175 >> 1) & 3 | *(_DWORD *)((v175 & 0xFFFFFFFFFFFFFFF8) + 24);
          v178 = *(_QWORD **)v171;
          v179 = *((unsigned int *)v171 + 2);
          if (v176 < v177)
          {
            do
            {
              v180 = v179 >> 1;
              v181 = v178[3 * (v179 >> 1) + 1];
              LODWORD(v181) = (v181 >> 1) & 3 | *(_DWORD *)((v181 & 0xFFFFFFFFFFFFFFF8) + 24);
              v179 -= (v179 >> 1) + 1;
              v182 = v176 >= v181;
              if (v176 >= v181)
                v183 = v180 + 1;
              else
                v183 = 0;
              v178 += 3 * v183;
              if (!v182)
                v179 = v180;
            }
            while (v179);
LABEL_302:
            v220 = &v174[3 * v173];
            if (v178 == v220)
            {
              v224 = 0;
              LOBYTE(v223) = 0;
LABEL_311:
              if ((~(_BYTE)v223 & 6) != 0)
                v225 = v224;
              else
                v225 = 0;
              if (*v153 != v225)
                goto LABEL_416;
              if (v303 >= *(unsigned int *)(a8 + 416)
                || (v226 = *(llvm::LiveInterval **)(*(_QWORD *)(a8 + 408) + 8 * v303)) == 0)
              {
                v226 = (llvm::LiveInterval *)sub_1C4851220(a8, v310);
                v280 = *(_QWORD *)(a8 + 304);
                v281 = *(_QWORD *)(a8 + 248);
                *(_QWORD *)v280 = v281;
                *(_QWORD *)(v280 + 8) = *(_QWORD *)(v281 + 40);
                *(_OWORD *)(v280 + 16) = *(_OWORD *)(a8 + 288);
                *(_QWORD *)(v280 + 32) = v298;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v280);
                *(_DWORD *)(v280 + 184) = 0;
                v282 = *(_QWORD *)(a8 + 256);
                v42 = *(_BYTE *)(v282 + 16) == 0;
                v283 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v282 + 24)
                                                       + 16 * (*((_DWORD *)v226 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 34);
                v285 = !v42 && v283 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a8 + 304), v226, v285);
                llvm::LiveIntervals::computeDeadValues(a8, (uint64_t)v226, 0);
              }
              v227 = *(_QWORD *)(a8 + 288);
              v228 = *(_WORD *)(v138 + 44);
              v229 = v138;
              v22 = v310;
              if ((v228 & 4) != 0)
              {
                do
                  v229 = *(_QWORD *)v229 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v229 + 44) & 4) != 0);
              }
              if ((v228 & 8) != 0)
              {
                do
                  v138 = *(_QWORD *)(v138 + 8);
                while ((*(_WORD *)(v138 + 44) & 8) != 0);
              }
              v230 = *(_QWORD *)(v138 + 8);
              if (v229 != v230)
              {
                while (1)
                {
                  v231 = **(unsigned __int16 **)(v229 + 16);
                  v40 = v231 > 0x17;
                  v232 = (1 << v231) & 0x83E000;
                  if (v40 || v232 == 0)
                    break;
                  v229 = *(_QWORD *)(v229 + 8);
                  if (v229 == v230)
                  {
                    v229 = *(_QWORD *)(v138 + 8);
                    break;
                  }
                }
              }
              v234 = *(_QWORD *)(v227 + 368);
              v235 = *(unsigned int *)(v227 + 384);
              if ((_DWORD)v235)
              {
                LODWORD(v236) = ((v229 >> 4) ^ (v229 >> 9)) & (v235 - 1);
                v237 = (uint64_t *)(v234 + 16 * v236);
                v238 = *v237;
                if (v229 == *v237)
                  goto LABEL_333;
                v239 = 1;
                while (v238 != -4096)
                {
                  v240 = v236 + v239++;
                  v236 = v240 & (v235 - 1);
                  v238 = *(_QWORD *)(v234 + 16 * v236);
                  if (v229 == v238)
                  {
                    v237 = (uint64_t *)(v234 + 16 * v236);
                    goto LABEL_333;
                  }
                }
              }
              v237 = (uint64_t *)(v234 + 16 * v235);
LABEL_333:
              v241 = v237[1];
              v242 = *((_DWORD *)v226 + 2);
              v243 = *(_QWORD **)v226;
              if (v242)
              {
                v244 = v243[3 * v242 - 2];
                v245 = (v244 >> 1) & 3 | *(_DWORD *)((v244 & 0xFFFFFFFFFFFFFFF8) + 24);
                v246 = *(_DWORD *)(v172 + 24);
                v247 = *((unsigned int *)v226 + 2);
                v248 = *(_QWORD **)v226;
                v249 = v247;
                if (v246 < v245)
                {
                  do
                  {
                    v250 = v249 >> 1;
                    v251 = v248[3 * (v249 >> 1) + 1];
                    LODWORD(v251) = (v251 >> 1) & 3 | *(_DWORD *)((v251 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v249 -= (v249 >> 1) + 1;
                    v252 = v246 >= v251;
                    if (v246 >= v251)
                      v253 = v250 + 1;
                    else
                      v253 = 0;
                    v248 += 3 * v253;
                    if (!v252)
                      v249 = v250;
                  }
                  while (v249);
                  v247 = *((unsigned int *)v226 + 2);
LABEL_345:
                  v254 = &v243[3 * v247];
                  if (v248 == v254
                    || ((*v248 >> 1) & 3 | *(_DWORD *)((*v248 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v172 + 24))
                  {
                    v255 = 0;
                  }
                  else
                  {
                    v255 = v248[2];
                    v256 = v248[1] & 0xFFFFFFFFFFFFFFF8;
                    v257 = v248 + 3;
                    v258 = v172 == v256 && v257 == v254;
                    if (!v258 && *(_QWORD *)(v255 + 8) == v172)
                      v255 = 0;
                  }
                  v137 = v297;
                  if (!v242)
                    goto LABEL_372;
                  v259 = v241 & 0xFFFFFFFFFFFFFFF8;
                  v260 = *(_DWORD *)(v259 + 24);
                  if (v260 >= ((*(v254 - 2) >> 1) & 3 | *(_DWORD *)((*(v254 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24)))
                    goto LABEL_372;
                  do
                  {
                    v261 = v243;
                    v262 = v247 >> 1;
                    v263 = v243[3 * (v247 >> 1) + 1];
                    LODWORD(v263) = (v263 >> 1) & 3 | *(_DWORD *)((v263 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v247 -= (v247 >> 1) + 1;
                    v264 = v260 >= v263;
                    if (v260 >= v263)
                      v265 = v262 + 1;
                    else
                      v265 = 0;
                    v243 = &v261[3 * v265];
                    if (!v264)
                      v247 = v262;
                  }
                  while (v247);
                  if (v243 == v254
                    || ((*v243 >> 1) & 3 | *(_DWORD *)((*v243 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v259 + 24))
                  {
LABEL_372:
                    v266 = 0;
                  }
                  else
                  {
                    v267 = v261[3 * v265 + 1];
                    v266 = v261[3 * v265 + 2];
                    v268 = v243 + 3;
                    v269 = v259 == (v267 & 0xFFFFFFFFFFFFFFF8) && v268 == v254;
                    if (!v269 && *(_QWORD *)(v266 + 8) == v259)
                      v266 = 0;
                  }
                  if (v255 == v266)
                  {
LABEL_374:
                    while (1)
                    {
                      v130 = (int *)*((_QWORD *)v130 + 3);
                      if (!v130)
                        goto LABEL_193;
                      v131 = *v130;
                      if ((*v130 & 0x1000000) == 0)
                        goto LABEL_206;
                    }
                  }
                  goto LABEL_416;
                }
              }
              else
              {
                v247 = 0;
              }
              v248 = &v243[3 * v247];
              goto LABEL_345;
            }
            v221 = *(_DWORD *)((*v178 & 0xFFFFFFFFFFFFFFF8) + 24);
            v222 = *(_DWORD *)(v172 + 24);
            if (((*v178 >> 1) & 3 | v221) > v222)
            {
              LOBYTE(v223) = 0;
            }
            else
            {
              v223 = v178[1];
              if (v172 == (v223 & 0xFFFFFFFFFFFFFFF8))
              {
                v178 += 3;
                if (v178 == v220)
                {
LABEL_310:
                  v224 = 0;
                  goto LABEL_311;
                }
                v221 = *(_DWORD *)((*v178 & 0xFFFFFFFFFFFFFFF8) + 24);
              }
            }
            if (v222 >= v221)
            {
              v223 = v178[1];
              v224 = v178[2];
              goto LABEL_311;
            }
            goto LABEL_310;
          }
        }
        else
        {
          v173 = 0;
        }
        v178 = &v174[3 * v173];
        goto LABEL_302;
      }
      v168 = 1;
      while (v167 != -4096)
      {
        v169 = v165 + v168++;
        v165 = v169 & (v164 - 1);
        v167 = *(_QWORD *)(v163 + 16 * v165);
        if (v156 == v167)
        {
          v166 = (uint64_t *)(v163 + 16 * v165);
          goto LABEL_239;
        }
      }
    }
    v166 = (uint64_t *)(v163 + 16 * v164);
    goto LABEL_239;
  }
  v26 = 1;
LABEL_196:
  v132 = v319;
  if (v321)
  {
    v133 = 56 * v321;
    v134 = (_QWORD *)(v319 + 24);
    do
    {
      if ((*(v134 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v135 = (_QWORD *)*(v134 - 2);
        if (v134 != v135)
          free(v135);
      }
      v134 += 7;
      v133 -= 56;
    }
    while (v133);
  }
  MEMORY[0x1CAA32FB4](v132, 8);
  MEMORY[0x1CAA32FB4](v322, 8);
  if (v326 != v325)
    free(v326);
  return v26;
}

BOOL sub_1C4963D58(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0)
    return 0;
  v5 = *((_QWORD *)v1 + 1);
  if ((v5 & 0x10) != 0)
    return 0;
  v6 = *((_QWORD *)v1 + 2);
  if ((v6 & 1) != 0)
    return 0;
  if ((v6 & 4) == 0)
    goto LABEL_15;
  if ((v2 - 1) <= 1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    if ((v9 & 8) != 0)
      goto LABEL_34;
  }
  v7 = *(_WORD *)(a1 + 44);
  if ((v7 & 0xC) != 0 && (v7 & 4) == 0)
  {
    if ((v5 & 0x80000) == 0)
    {
      v10 = a1;
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 16) + 10) & 8) != 0)
          goto LABEL_24;
      }
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x80000) == 0)
  {
    goto LABEL_15;
  }
LABEL_24:
  if ((v2 - 1) <= 1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
LABEL_34:
    if ((v9 & 0x10) != 0)
      goto LABEL_15;
    v7 = *(_WORD *)(a1 + 44);
    if ((v7 & 0xC) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  if ((v7 & 0xC) != 0)
  {
LABEL_26:
    if ((v7 & 4) != 0)
      goto LABEL_27;
    if ((v5 & 0x100000) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        a1 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 10) & 0x10) != 0)
          goto LABEL_15;
      }
      return 1;
    }
LABEL_15:
    if ((v2 - 2970) >= 0x48)
      return (~(_DWORD)v6 & 0x800200) == 0 || (~(_DWORD)v6 & 0x800100) == 0;
    return 1;
  }
LABEL_27:
  result = 1;
  if ((v5 & 0x100000) != 0 && (v2 - 2970) >= 0x48)
    return (~(_DWORD)v6 & 0x800200) == 0 || (~(_DWORD)v6 & 0x800100) == 0;
  return result;
}

BOOL sub_1C4963E94(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t CommonSubClass;

  CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass(a1, a2, a4);
  return a3 == a5 && CommonSubClass != 0;
}

BOOL sub_1C4963EC8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a3[2];
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 24 * v3;
    v6 = (_QWORD *)(*(_QWORD *)a3 + 8);
    do
    {
      v4 = ((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24))
         + v4
         - ((*(v6 - 1) >> 1) & 3 | *(_DWORD *)((*(v6 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  else
  {
    v4 = 0;
  }
  return v4 < dword_1ED7EB650;
}

uint64_t sub_1C4963F3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C4963F44()
{
  return 1;
}

uint64_t sub_1C4963F4C()
{
  return 0;
}

uint64_t sub_1C4963F54()
{
  return 1;
}

uint64_t sub_1C4963F5C(uint64_t result, int *a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(result + 64);
  v4 = (v3 + 31) >> 5;
  if (v4 >= a3)
    v4 = a3;
  if (v4 < 2)
  {
    v6 = 0;
    if (!v4)
      goto LABEL_10;
  }
  else
  {
    v5 = *(_QWORD **)result;
    v6 = ((v4 - 2) >> 1) + 1;
    v7 = v6;
    do
    {
      v8 = *a2;
      v9 = a2[1];
      a2 += 2;
      *v5++ |= ~v8 | ((unint64_t)~v9 << 32);
      --v7;
    }
    while (v7);
    if ((v4 & 1) == 0)
      goto LABEL_10;
  }
  *(_QWORD *)(*(_QWORD *)result + 8 * v6) |= ~*a2;
LABEL_10:
  v10 = v3 & 0x3F;
  if (v10)
  {
    v11 = *(_QWORD *)result + 8 * *(unsigned int *)(result + 8);
    *(_QWORD *)(v11 - 8) &= ~(-1 << v10);
  }
  return result;
}

__n128 sub_1C4964004(uint64_t a1, char *__s, _WORD *a3, __n128 *a4, _BYTE **a5)
{
  size_t v10;
  __n128 result;
  _BYTE *v12;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  return result;
}

_QWORD *sub_1C4964094(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = ((v15 >> 4) ^ (v15 >> 9)) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v22 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *v17 = v15;
          v17[1] = v14[1];
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v23 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v23)
  {
    v24 = 16 * v23;
    do
    {
      *result = -4096;
      result += 2;
      v24 -= 16;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1C4964208(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C49642A0(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  const void *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = &v4[7 * v3];
      v13 = v4;
      do
      {
        v14 = (const void *)*v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          v17 = (_QWORD *)(*a1 + 56 * v16);
          v18 = *v17;
          if (v14 != (const void *)*v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = (_QWORD *)(*a1 + 56 * (v22 & v15));
              v18 = *v17;
              if (v14 == (const void *)*v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *v17 = v14;
          v17[1] = v17 + 3;
          v17[2] = 0x400000000;
          if (*((_DWORD *)v13 + 4))
            sub_1C4964480((uint64_t)(v17 + 1), (const void **)v13 + 1);
          ++*((_DWORD *)a1 + 2);
          v23 = (uint64_t *)v13[1];
          if (v23 != v13 + 3)
            free(v23);
        }
        v13 += 7;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 56 * v24;
    do
    {
      *result = -4096;
      result += 7;
      v25 -= 56;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C4964480(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (_BYTE *)*a2 + 8 * v9 - ((_BYTE *)*a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C49645BC()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Consider any live-interval with a size bigger than this number as being too expensi"
                                     "ve to break down in region splitting. This is to avoid high compile time. The size "
                                     "of a live-range is the cumulative distance covered by a live-interval in terms of SlotIndex.";
  v3.n128_u64[1] = 258;
  v1 = 320000;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7EB5D0, "agx2-huge-life-span", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7EB5D0, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Be more aggressive about matmad repair copy avoidance.";
  v3.n128_u64[1] = 54;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EB690, "agx2-force-matmad-copy-avoidance", &v4, &v3, (_BYTE **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EB690, &dword_1C475E000);
}

uint64_t sub_1C49646A0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  llvm::initializeSlotIndexesPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 Rematerialize";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "agx2-rematerialize";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB810;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4964808;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4964748(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EB810) = &off_1E7FA64D0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EB818);
  if (v3 != -1)
  {
    v7[0] = sub_1C49646A0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EB818, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4964808()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4964748(v0);
}

void sub_1C4964830(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C49648C4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4964950()
{
  return "AGX2 rematerialize pass";
}

void *sub_1C4964960(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4964A1C(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  int64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  llvm::LiveInterval *v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  const llvm::MachineInstr *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  llvm::MachineFunction *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  llvm::LiveInterval *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v116;
  uint64_t i;
  unsigned int v118;
  uint64_t v119;
  int v120;
  int v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned __int16 *v139;
  int v140;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  char v149;
  __int16 v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  int v162;
  int v163;
  char *k;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  _QWORD *v170;
  unint64_t v171;
  void *v172;
  unint64_t v173;
  uint64_t v175;
  unint64_t v176;
  __int16 v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int v181;
  int v182;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  int v192;
  char *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t *v199;
  uint64_t v200;
  _DWORD *v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  llvm::MachineInstr *v217;
  llvm::MachineInstr *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  llvm::MachineInstr *v234;
  llvm::MachineInstr *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t *v243;
  uint64_t v244;
  llvm::LiveInterval *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t *v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  int v266;
  int v267;
  _QWORD *v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  BOOL v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  llvm::LiveInterval *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  void **v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  int v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  uint64_t v325;
  llvm::LiveInterval *v326;
  uint64_t v327;
  __int16 v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unsigned int v332;
  int v333;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  int v340;
  int v341;
  unint64_t v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  BOOL v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  BOOL v358;
  unint64_t v359;
  _QWORD *v360;
  _DWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _QWORD *v373;
  unint64_t v374;
  void *v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  BOOL v379;
  char v380;
  _QWORD *v381;
  unint64_t v382;
  void *v383;
  unint64_t v384;
  uint64_t v385;
  int v386;
  char *v387;
  int v388;
  unsigned int v389;
  char *v390;
  void *v391;
  char *v392;
  int v393;
  BOOL v394;
  unsigned int v395;
  char *v396;
  _QWORD *v397;
  uint64_t v398;
  char *v399;
  void **v400;
  unint64_t *v401;
  uint64_t *v402;
  char *v403;
  unint64_t v404;
  void **v405;
  void **v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v412;
  BOOL v413;
  int v414;
  int64_t v415;
  char *v416;
  char *v417;
  char *v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  void **v423;
  int v424;
  char *v425;
  unint64_t *v426;
  int v427;
  _QWORD *v428;
  int v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  int v433;
  int v434;
  char *v435;
  unsigned int v436;
  uint64_t *v437;
  uint64_t *v438;
  uint64_t v439;
  int32x2_t *v440;
  int32x2_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  int v446;
  int v447;
  unint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  unsigned __int16 *v451;
  unsigned __int16 **v452;
  uint64_t v453;
  int v454;
  unsigned __int16 *v455;
  unsigned __int16 *v456;
  unsigned __int16 *v457;
  int v458;
  BOOL v460;
  int v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  unsigned int v473;
  llvm::MachineFunction *v474;
  llvm::MachineInstr *v475;
  llvm::MachineInstr *v476;
  unsigned int v477;
  char v478;
  uint64_t v479;
  char v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  unsigned int **v487;
  uint64_t v488;
  unsigned int *v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  llvm::LiveInterval *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  int32x2_t *v512;
  int32x2_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t v517;
  int v518;
  int v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  unsigned __int16 *v525;
  int v526;
  uint64_t v527;
  unsigned __int16 *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  unsigned __int16 *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t v554;
  uint64_t v555;
  _BYTE *v556;
  char *v557;
  uint64_t v558;
  uint64_t v559;
  void **v560;
  llvm::MachineFunction *v562;
  unsigned int v563;
  uint64_t v564;
  unsigned int v565;
  uint64_t v566;
  unint64_t v567;
  unsigned int v568;
  unint64_t v569;
  uint64_t v570;
  char *v571;
  int v572;
  char v573;
  unsigned int v574;
  uint64_t v575;
  unsigned int v576;
  int v577;
  char *v578;
  char *v579;
  uint64_t v580;
  _QWORD *v581;
  unint64_t v582;
  uint64_t IncompleteVirtualRegister;
  unint64_t v584;
  int v585;
  char v586;
  uint64_t v587;
  unint64_t j;
  int64_t v589;
  int v590;
  uint64_t v591;
  int v592;
  unint64_t v593;
  unsigned int v594;
  void **v595;
  unsigned __int16 *v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  int v601;
  unint64_t v602;
  unsigned int v603;
  unint64_t v604;
  unsigned int v605;
  uint64_t v606;
  unsigned int v607;
  void *v608;
  uint64_t v609;
  _BYTE v610[64];
  void *v611;
  uint64_t v612;
  unint64_t v613;
  int v614;
  void *v615;
  void *v616;
  _QWORD v617[9];
  __int128 v618;
  _DWORD v619[32];
  uint64_t v620;
  void *v621;
  uint64_t v622;
  _BYTE v623[128];
  uint64_t v624;
  void *v625;
  unsigned int v626;
  void *v627;
  unsigned int v628;
  uint64_t v629;
  void *v630;
  uint64_t v631;
  _BYTE v632[1024];
  void *v633;
  void *v634;
  _QWORD v635[10];
  void *v636;
  _DWORD v637[32];
  uint64_t v638;
  uint64_t v639;

  v639 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v562 = (llvm::MachineFunction *)a2;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 40);
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LiveIntervals::ID);
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineDominatorTree::ID);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 160);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 264) + 32);
  v574 = dword_1ED7EB7D0;
  v607 = 32;
  v576 = v10;
  v606 = v10;
  llvm::APInt::sqrt((llvm::APInt *)&v606, (llvm::APInt *)&v604);
  if (v605 > 0x40)
  {
    v12 = 0;
    v13 = ((unint64_t)v605 + 63) >> 6;
    do
    {
      v413 = v13-- < 1;
      if (v413)
        break;
      v14 = *(_QWORD *)(v604 + 8 * v13);
      v12 += __clz(v14);
    }
    while (!v14);
    v15 = v605 | 0xFFFFFFC0;
    if ((v605 & 0x3F) == 0)
      v15 = 0;
    v11 = v12 + v15;
  }
  else
  {
    v11 = v605 + __clz(v604) - 64;
  }
  v603 = 32;
  v602 = v605 + ~v11;
  llvm::APInt::operator*((uint64_t)&v602, &v604, (uint64_t)&v624);
  v602 = v624;
  v603 = v625;
  v16 = &unk_1C640E000;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2))
  {
    sub_1C486F76C((uint64_t)&v624, *(_QWORD *)(a2 + 328));
    v17 = 0;
    memset(v637, 0, sizeof(v637));
    v638 = 0;
    memset(&v635[1], 0, 72);
    v633 = &v635[2];
    v634 = &v635[2];
    v580 = a2 + 128;
    v635[0] = 8;
    v637[1] = 8;
    v636 = &v637[2];
    while (1)
    {
      v18 = v628;
      if (v628 == v17)
      {
        if (!v17)
        {
LABEL_161:
          if (v636 != &v637[2])
            free(v636);
          if (v634 != v633)
            free(v634);
          if (v627 != &v629)
            free(v627);
          if (v625 != (void *)v624)
            free(v625);
          break;
        }
        v19 = (char *)v627 + 16 * v17;
        v20 = v636;
        v21 = (char *)v627;
        while (1)
        {
          v22 = *(_QWORD *)v21 == *v20 && *((_QWORD *)v21 + 1) == v20[1];
          if (!v22)
            break;
          v21 += 16;
          v20 += 2;
          if (v21 == v19)
            goto LABEL_161;
        }
      }
      v23 = *((_QWORD *)v627 + 2 * v628 - 2);
      v587 = v23;
      v591 = v23 + 48;
      v24 = *(_QWORD *)(v23 + 56);
      if (v24 != v23 + 48)
      {
        do
        {
          if (!v24 || (v25 = v24, (*(_BYTE *)v24 & 4) == 0))
          {
            v25 = v24;
            if ((*(_WORD *)(v24 + 44) & 8) != 0)
            {
              v25 = v24;
              do
                v25 = *(_QWORD *)(v25 + 8);
              while ((*(_WORD *)(v25 + 44) & 8) != 0);
            }
          }
          v593 = *(_QWORD *)(v25 + 8);
          if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 224))(a1, v24))
          {
            v26 = *(_QWORD *)(v24 + 16);
            v27 = *(unsigned __int8 *)(v26 + 4);
            if (*(unsigned __int16 *)(v26 + 2) > v27)
            {
              do
              {
                v28 = (_DWORD *)(*(_QWORD *)(v24 + 32) + 32 * v27);
                if ((*v28 & 0x10FFFFF) != 0)
                  goto LABEL_36;
                v29 = v28[1];
                v30 = *(_QWORD *)(a1 + 264);
                if ((v29 & 0x80000000) != 0)
                  v31 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
                else
                  v31 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v29);
                v32 = *v31;
                if (v32)
                {
                  while ((*(_BYTE *)(v32 + 3) & 1) != 0)
                  {
                    v32 = *(_QWORD *)(v32 + 24);
                    if (!v32)
                      goto LABEL_47;
                  }
                  do
                  {
                    v32 = *(_QWORD *)(v32 + 24);
                    if (!v32)
                      goto LABEL_36;
                  }
                  while ((*(_BYTE *)(v32 + 3) & 1) != 0);
                }
LABEL_47:
                v33 = *(_QWORD *)(a1 + 272);
                v34 = v29 & 0x7FFFFFFF;
                if (v34 >= *(unsigned int *)(v33 + 416)
                  || (v35 = *(llvm::LiveInterval **)(*(_QWORD *)(v33 + 408) + 8 * v34)) == 0)
                {
                  v35 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 272), v28[1]);
                  v102 = *(_QWORD *)(v33 + 304);
                  v103 = *(_QWORD *)(v33 + 248);
                  *(_QWORD *)v102 = v103;
                  *(_QWORD *)(v102 + 8) = *(_QWORD *)(v103 + 40);
                  *(_OWORD *)(v102 + 16) = *(_OWORD *)(v33 + 288);
                  *(_QWORD *)(v102 + 32) = v33 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v102);
                  *(_DWORD *)(v102 + 184) = 0;
                  v104 = *(_QWORD *)(v33 + 256);
                  v22 = *(_BYTE *)(v104 + 16) == 0;
                  v105 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v104 + 24)
                                                         + 16 * (*((_DWORD *)v35 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v107 = !v22 && v105 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v33 + 304), v35, v107);
                  llvm::LiveIntervals::computeDeadValues(v33, (uint64_t)v35, 0);
                  v33 = *(_QWORD *)(a1 + 272);
                }
                v36 = *(_QWORD *)(v33 + 288);
                v37 = *(_WORD *)(v24 + 44);
                v38 = v24;
                if ((v37 & 4) != 0)
                {
                  do
                    v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v38 + 44) & 4) != 0);
                }
                v39 = v24;
                if ((v37 & 8) != 0)
                {
                  do
                    v39 = *(_QWORD *)(v39 + 8);
                  while ((*(_WORD *)(v39 + 44) & 8) != 0);
                }
                v40 = *(_QWORD *)(v39 + 8);
                if (v38 != v40)
                {
                  while (1)
                  {
                    v41 = **(unsigned __int16 **)(v38 + 16);
                    v413 = v41 > 0x17;
                    v42 = (1 << v41) & 0x83E000;
                    if (v413 || v42 == 0)
                      break;
                    v38 = *(_QWORD *)(v38 + 8);
                    if (v38 == v40)
                    {
                      v38 = v40;
                      break;
                    }
                  }
                }
                v44 = *(_QWORD *)(v36 + 368);
                v45 = *(unsigned int *)(v36 + 384);
                if ((_DWORD)v45)
                {
                  LODWORD(v46) = ((v38 >> 4) ^ (v38 >> 9)) & (v45 - 1);
                  v47 = (uint64_t *)(v44 + 16 * v46);
                  v48 = *v47;
                  if (v38 == *v47)
                    goto LABEL_65;
                  v49 = 1;
                  while (v48 != -4096)
                  {
                    v50 = v46 + v49++;
                    v46 = v50 & (v45 - 1);
                    v48 = *(_QWORD *)(v44 + 16 * v46);
                    if (v38 == v48)
                    {
                      v47 = (uint64_t *)(v44 + 16 * v46);
                      goto LABEL_65;
                    }
                  }
                }
                v47 = (uint64_t *)(v44 + 16 * v45);
LABEL_65:
                v51 = v47[1] & 0xFFFFFFFFFFFFFFF8;
                v52 = *((_DWORD *)v35 + 2);
                v53 = *(_QWORD *)v35;
                if (v52)
                {
                  v54 = *(_QWORD *)(v53 + 24 * v52 - 16);
                  v55 = *(_DWORD *)(v51 + 24);
                  v56 = (v54 >> 1) & 3 | *(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v57 = *(_QWORD *)v35;
                  v58 = *((unsigned int *)v35 + 2);
                  if (v55 < v56)
                  {
                    do
                    {
                      v59 = v58 >> 1;
                      v60 = *(_QWORD *)(v57 + 24 * (v58 >> 1) + 8);
                      LODWORD(v60) = (v60 >> 1) & 3 | *(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v58 -= (v58 >> 1) + 1;
                      v61 = v55 >= v60;
                      if (v55 >= v60)
                        v62 = v59 + 1;
                      else
                        v62 = 0;
                      v57 += 24 * v62;
                      if (!v61)
                        v58 = v59;
                    }
                    while (v58);
                    goto LABEL_76;
                  }
                }
                else
                {
                  v52 = 0;
                }
                v57 = v53 + 24 * v52;
LABEL_76:
                v63 = v53 + 24 * v52;
                v64 = *(_QWORD *)(v57 + 16);
                v65 = *(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF8;
                v66 = v57 + 24;
                v67 = v51 == v65 && v66 == v63;
                if (!v67 && *(_QWORD *)(v64 + 8) == v51)
                  v64 = 0;
                v68 = *(_QWORD *)(v64 + 8);
                if (v68 >= 8)
                {
                  v69 = *(const llvm::MachineInstr **)((v68 & 0xFFFFFFFFFFFFFFF8) + 16);
                  if (v69)
                  {
                    if ((*(unsigned int (**)(uint64_t, const llvm::MachineInstr *))(*(_QWORD *)a1 + 216))(a1, v69))
                    {
                      if (v24 == *(_QWORD *)(v587 + 56))
                        goto LABEL_92;
                      v70 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
                      if (!v70 || (*(_BYTE *)v70 & 4) == 0)
                      {
                        while ((*(_WORD *)(v70 + 44) & 4) != 0)
                          v70 = *(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8;
                      }
                      if (v69 != (const llvm::MachineInstr *)v70)
                      {
LABEL_92:
                        if ((**((_DWORD **)v69 + 4) & 0x10FFFFF) == 0x1000000)
                        {
                          v71 = *(_QWORD *)(a1 + 264);
                          v72 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 16 * v34) & 0xFFFFFFFFFFFFFFF8;
                          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v71, "", 0);
                          *(_QWORD *)(*(_QWORD *)(v71 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v72;
                          v73 = *(_QWORD *)(v71 + 8);
                          if (v73)
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 24))(v73, IncompleteVirtualRegister);
                          v74 = v562;
                          v75 = *((_QWORD *)v562 + 28);
                          if (v75)
                          {
                            *((_QWORD *)v562 + 28) = *(_QWORD *)v75;
                          }
                          else
                          {
                            v101 = sub_1C484358C(v580, 72, 3);
                            v74 = v562;
                            v75 = v101;
                          }
                          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v75, v74, v69);
                          llvm::MachineOperand::setReg(*(_QWORD *)(v75 + 32), IncompleteVirtualRegister);
                          v76 = *(_QWORD *)(v587 + 40);
                          *(_QWORD *)(v75 + 24) = v76;
                          v77 = *(_QWORD *)(v76 + 32);
                          v78 = *(unsigned int *)(v75 + 40);
                          if ((_DWORD)v78)
                          {
                            v94 = *(_QWORD *)(v75 + 32);
                            v95 = *(_QWORD *)(v77 + 40);
                            v96 = 32 * v78;
                            do
                            {
                              if (!*(_BYTE *)v94)
                              {
                                v97 = *(unsigned int *)(v94 + 4);
                                if ((int)v97 >= 0)
                                  v98 = (uint64_t *)(*(_QWORD *)(v95 + 272) + 8 * v97);
                                else
                                  v98 = (uint64_t *)(*(_QWORD *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
                                v99 = *v98;
                                if (*v98)
                                {
                                  v100 = *(_QWORD *)(v99 + 16);
                                  *(_QWORD *)(v99 + 16) = v94;
                                  *(_QWORD *)(v94 + 16) = v100;
                                  if ((*(_BYTE *)(v94 + 3) & 1) != 0)
                                  {
                                    *(_QWORD *)(v94 + 24) = v99;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v94 + 24) = 0;
                                    v98 = (uint64_t *)(v100 + 24);
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)(v94 + 16) = v94;
                                  *(_QWORD *)(v94 + 24) = 0;
                                }
                                *v98 = v94;
                              }
                              v94 += 32;
                              v96 -= 32;
                            }
                            while (v96);
                          }
                          v79 = *(_QWORD *)(v77 + 728);
                          if (v79)
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 24))(v79, v75);
                          v80 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v75 = v80 | *(_QWORD *)v75 & 7;
                          *(_QWORD *)(v75 + 8) = v24;
                          *(_QWORD *)(v80 + 8) = v75;
                          *(_QWORD *)v24 = *(_QWORD *)v24 & 7 | v75;
                          llvm::MachineOperand::setReg((uint64_t)v28, IncompleteVirtualRegister);
                          sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 288), v75, 0);
                          v81 = *(_QWORD *)(a1 + 272);
                          v82 = (llvm::LiveInterval *)sub_1C4851220(v81, IncompleteVirtualRegister);
                          v83 = *(_QWORD *)(v81 + 304);
                          v84 = *(_QWORD *)(v81 + 248);
                          *(_QWORD *)v83 = v84;
                          *(_QWORD *)(v83 + 8) = *(_QWORD *)(v84 + 40);
                          *(_OWORD *)(v83 + 16) = *(_OWORD *)(v81 + 288);
                          *(_QWORD *)(v83 + 32) = v81 + 312;
                          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v83);
                          *(_DWORD *)(v83 + 184) = 0;
                          v85 = *(_QWORD *)(v81 + 256);
                          v22 = *(_BYTE *)(v85 + 16) == 0;
                          v86 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v85 + 24)
                                                                + 16 * (*((_DWORD *)v82 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                   + 34);
                          v88 = !v22 && v86 != 0;
                          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v81 + 304), v82, v88);
                          llvm::LiveIntervals::computeDeadValues(v81, (uint64_t)v82, 0);
                          v89 = *(_QWORD *)(a1 + 272);
                          if (v34 >= *(unsigned int *)(v89 + 416)
                            || (v90 = *(_QWORD *)(*(_QWORD *)(v89 + 408) + 8 * v34)) == 0)
                          {
                            v90 = sub_1C4851220(*(_QWORD *)(a1 + 272), v29);
                            v111 = *(_QWORD *)(v89 + 304);
                            v112 = *(_QWORD *)(v89 + 248);
                            *(_QWORD *)v111 = v112;
                            *(_QWORD *)(v111 + 8) = *(_QWORD *)(v112 + 40);
                            *(_OWORD *)(v111 + 16) = *(_OWORD *)(v89 + 288);
                            *(_QWORD *)(v111 + 32) = v89 + 312;
                            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v111);
                            *(_DWORD *)(v111 + 184) = 0;
                            v113 = *(_QWORD *)(v89 + 256);
                            v22 = *(_BYTE *)(v113 + 16) == 0;
                            v114 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v113 + 24)
                                                                   + 16 * (*(_DWORD *)(v90 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                      + 34);
                            v116 = !v22 && v114 != 0;
                            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v89 + 304), (llvm::LiveInterval *)v90, v116);
                            llvm::LiveIntervals::computeDeadValues(v89, v90, 0);
                            v89 = *(_QWORD *)(a1 + 272);
                          }
                          llvm::LiveIntervals::shrinkToUses((_QWORD *)v89, v90, 0);
                          v93 = *(_QWORD *)(v90 + 104);
                          v92 = (_QWORD *)(v90 + 104);
                          v91 = v93;
                          if (v93)
                          {
                            while (1)
                            {
                              v110 = v91;
                              if (!*(_DWORD *)(v91 + 8))
                                break;
LABEL_146:
                              v92 = (_QWORD *)(v91 + 104);
                              v91 = *(_QWORD *)(v91 + 104);
                              if (!v91)
                                goto LABEL_36;
                            }
                            while (1)
                            {
                              v108 = *(_QWORD *)(v110 + 96);
                              v91 = *(_QWORD *)(v110 + 104);
                              *(_QWORD *)(v110 + 96) = 0;
                              if (v108)
                              {
                                sub_1C47655E8(v108, *(_QWORD **)(v108 + 8));
                                MEMORY[0x1CAA32FC0](v108, 0x1020C4062D53EE8);
                              }
                              v109 = *(void **)(v110 + 64);
                              if (v109 != (void *)(v110 + 80))
                                free(v109);
                              if (*(_QWORD *)v110 == v110 + 16)
                              {
                                if (!v91)
                                {
LABEL_148:
                                  *v92 = 0;
                                  break;
                                }
                              }
                              else
                              {
                                free(*(void **)v110);
                                if (!v91)
                                  goto LABEL_148;
                              }
                              v110 = v91;
                              if (*(_DWORD *)(v91 + 8))
                              {
                                *v92 = v91;
                                goto LABEL_146;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_36:
                ++v27;
              }
              while (v27 < *(unsigned __int16 *)(v26 + 2));
            }
          }
          v24 = v593;
        }
        while (v593 != v591);
        v18 = v628;
        v16 = (_QWORD *)&unk_1C640E000;
      }
      v628 = v18 - 1;
      if (v18 != 1)
        sub_1C486F1F8(&v624);
      v17 = v637[0];
    }
  }
  v624 = 1;
  for (i = 8; i != 520; i += 16)
    *(uint64_t *)((char *)&v624 + i) = -4096;
  v630 = v632;
  v631 = 0x2000000000;
  v621 = v623;
  v622 = 0x1000000000;
  sub_1C486F76C((uint64_t)&v633, *((_QWORD *)v562 + 41));
  v118 = 0;
  LODWORD(v584) = 0;
  v565 = 0;
  v119 = 0;
  v618 = 0u;
  memset(v619, 0, sizeof(v619));
  v620 = 0;
  memset(&v617[1], 0, 64);
  v615 = &v617[2];
  v616 = &v617[2];
  v617[0] = v16[103];
  v619[1] = 8;
  v120 = 1;
  *((_QWORD *)&v618 + 1) = &v619[2];
  while (1)
  {
    v121 = v637[0];
    if (v637[0] != v118)
      goto LABEL_182;
    if (!v118)
      break;
    v122 = (char *)v636 + 16 * v118;
    v123 = (_QWORD *)*((_QWORD *)&v618 + 1);
    v124 = (char *)v636;
    while (*(_QWORD *)v124 == *v123 && *((_QWORD *)v124 + 1) == v123[1])
    {
      v124 += 16;
      v123 += 2;
      if (v124 == v122)
        goto LABEL_686;
    }
LABEL_182:
    v126 = *((_QWORD *)v636 + 2 * v637[0] - 2);
    v127 = *(_QWORD *)(a1 + 288);
    v128 = *(_DWORD *)(v127 + 264);
    v572 = v120;
    if (v128)
    {
      v129 = *(_QWORD *)(v127 + 248);
      v130 = v128 - 1;
      v131 = ((v126 >> 4) ^ (v126 >> 9)) & (v128 - 1);
      v132 = *(_QWORD *)(v129 + 16 * v131);
      if (v126 != v132)
      {
        v133 = 1;
        while (v132 != -4096)
        {
          v134 = v131 + v133++;
          v131 = v134 & v130;
          v132 = *(_QWORD *)(v129 + 16 * v131);
          if (v126 == v132)
            goto LABEL_187;
        }
LABEL_191:
        v128 = 0;
        goto LABEL_192;
      }
LABEL_187:
      v135 = *(_QWORD **)(v129 + 16 * v131 + 8);
      if (!v135)
        goto LABEL_191;
      v128 = 0;
      do
      {
        v135 = (_QWORD *)*v135;
        ++v128;
      }
      while (v135);
    }
LABEL_192:
    v563 = v128;
    v137 = *(_QWORD *)(v126 + 48);
    v136 = v126 + 48;
    v138 = v137 & 0xFFFFFFFFFFFFFFF8;
    if ((v137 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v138 & 4) == 0)
    {
      while ((*(_WORD *)(v138 + 44) & 4) != 0)
        v138 = *(_QWORD *)v138 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v138 != v136)
    {
      v564 = v136;
      while (1)
      {
        v570 = v138;
        v138 = *(_QWORD *)v138 & 0xFFFFFFFFFFFFFFF8;
        if (!v138 || (*(_BYTE *)v138 & 4) == 0)
        {
          while ((*(_WORD *)(v138 + 44) & 4) != 0)
            v138 = *(_QWORD *)v138 & 0xFFFFFFFFFFFFFFF8;
        }
        v139 = *(unsigned __int16 **)(v570 + 16);
        v140 = *v139;
        if ((v140 - 9) <= 0x3C && ((1 << (v140 - 9)) & 0x1000000000000605) != 0
          || v140 == 0)
        {
          goto LABEL_674;
        }
        v143 = *((_QWORD *)v139 + 1);
        if ((v143 & 0x10) != 0)
          goto LABEL_674;
        v144 = *(_WORD *)(v570 + 44);
        if ((v144 & 0xC) == 0 || (v144 & 4) != 0)
        {
          if ((v143 & 0x400) != 0)
            goto LABEL_674;
        }
        else
        {
          v145 = v570;
          if ((v143 & 0x400) != 0)
            goto LABEL_674;
          while ((*(_WORD *)(v145 + 44) & 8) != 0)
          {
            v145 = *(_QWORD *)(v145 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v145 + 16) + 9) & 4) != 0)
              goto LABEL_674;
          }
        }
        v146 = v570;
        v147 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v570);
        v148 = v565;
        if (v563 < v565)
          v149 = 1;
        else
          v149 = v147;
        v573 = v149;
        if (v563 < v565)
          v148 = v563;
        v611 = &v613;
        v612 = 0x1000000000;
        v150 = *(_WORD *)(v570 + 44);
        v151 = v570;
        if ((v150 & 4) != 0)
        {
          do
            v151 = *(_QWORD *)v151 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v151 + 44) & 4) != 0);
        }
        v152 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 288);
        if ((v150 & 8) != 0)
        {
          do
            v146 = *(_QWORD *)(v146 + 8);
          while ((*(_WORD *)(v146 + 44) & 8) != 0);
        }
        v153 = *(_QWORD *)(v146 + 8);
        v565 = v148;
        if (v151 != v153)
        {
          while (1)
          {
            v154 = **(unsigned __int16 **)(v151 + 16);
            v413 = v154 > 0x17;
            v155 = (1 << v154) & 0x83E000;
            if (v413 || v155 == 0)
              break;
            v151 = *(_QWORD *)(v151 + 8);
            if (v151 == v153)
            {
              v151 = *(_QWORD *)(v146 + 8);
              break;
            }
          }
        }
        v157 = *(_QWORD *)(v152 + 368);
        v158 = *(unsigned int *)(v152 + 384);
        if (!(_DWORD)v158)
          goto LABEL_239;
        LODWORD(v159) = ((v151 >> 4) ^ (v151 >> 9)) & (v158 - 1);
        v160 = (uint64_t *)(v157 + 16 * v159);
        v161 = *v160;
        if (v151 != *v160)
          break;
LABEL_240:
        v582 = v138;
        v584 = (v584 + 1);
        if (!(_DWORD)v631)
          goto LABEL_488;
        k = (char *)v630;
        v578 = (char *)v630 + 32 * v631;
        v165 = v160[1];
        v569 = v165 & 0xFFFFFFFFFFFFFFF8;
        v568 = (v165 >> 1) & 3;
        do
        {
          v167 = *(_QWORD *)k;
          v166 = *((_QWORD *)k + 1);
          v598 = *(_QWORD *)k;
          v599 = v166;
          if ((v166 & 4) != 0)
          {
            v168 = v166 & 0xFFFFFFFFFFFFFFF8;
            if ((v166 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v169 = k;
              v170 = (_QWORD *)operator new();
              v171 = (unint64_t)v170;
              v172 = v170 + 2;
              *v170 = v170 + 2;
              v170[1] = 0x400000000;
              v173 = *(unsigned int *)(v168 + 8);
              if (v170 != (_QWORD *)v168 && v173 != 0)
              {
                if (v173 < 5)
                {
                  v175 = *(unsigned int *)(v168 + 8);
                  goto LABEL_250;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v170, (uint64_t)(v170 + 2), *(unsigned int *)(v168 + 8), 8);
                v175 = *(unsigned int *)(v168 + 8);
                if ((_DWORD)v175)
                {
                  v172 = *(void **)v171;
LABEL_250:
                  memcpy(v172, *(const void **)v168, 8 * v175);
                }
                *(_DWORD *)(v171 + 8) = v173;
              }
              v599 = v171 | 4;
              v167 = v598;
              k = v169;
            }
          }
          v176 = *((_QWORD *)k + 2);
          v601 = *((_DWORD *)k + 6);
          v600 = v176;
          v594 = **(unsigned __int16 **)(v167 + 16);
          if (v576 > v574 && v602 < v584)
          {
            v572 = 0;
            goto LABEL_449;
          }
          if ((v573 & 1) != 0
            || (v584 - v601) >= 0xE
            && ((v584 - v601) > 0x17
             || (v193 = k, v194 = sub_1C49685A8((_QWORD *)a1, &v600, v167, 0), k = v193, v194)))
          {
            v177 = *(_WORD *)(v167 + 44);
            v178 = v167;
            if ((v177 & 4) != 0)
            {
              do
                v178 = *(_QWORD *)v178 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v178 + 44) & 4) != 0);
            }
            v179 = v167;
            if ((v177 & 8) != 0)
            {
              do
                v179 = *(_QWORD *)(v179 + 8);
              while ((*(_WORD *)(v179 + 44) & 8) != 0);
            }
            v180 = *(_QWORD *)(v179 + 8);
            if (v178 == v180)
            {
LABEL_266:
              v184 = k;
            }
            else
            {
              do
              {
                v181 = **(unsigned __int16 **)(v178 + 16);
                v413 = v181 > 0x17;
                v182 = (1 << v181) & 0x83E000;
                if (v413 || v182 == 0)
                  goto LABEL_266;
                v178 = *(_QWORD *)(v178 + 8);
              }
              while (v178 != v180);
              v184 = k;
              v178 = v180;
            }
            v185 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 288);
            v186 = *(_QWORD *)(v185 + 368);
            v187 = *(unsigned int *)(v185 + 384);
            if ((_DWORD)v187)
            {
              LODWORD(v188) = ((v178 >> 4) ^ (v178 >> 9)) & (v187 - 1);
              v189 = (uint64_t *)(v186 + 16 * v188);
              v190 = *v189;
              if (v178 != *v189)
              {
                v191 = 1;
                do
                {
                  if (v190 == -4096)
                    goto LABEL_277;
                  v192 = v188 + v191++;
                  v188 = v192 & (v187 - 1);
                  v190 = *(_QWORD *)(v186 + 16 * v188);
                }
                while (v178 != v190);
                v189 = (uint64_t *)(v186 + 16 * v188);
              }
            }
            else
            {
LABEL_277:
              v189 = (uint64_t *)(v186 + 16 * v187);
            }
            v195 = v189[1];
            v196 = v612;
            if (v612 >= (unint64_t)HIDWORD(v612))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v611, (uint64_t)&v613, v612 + 1, 8);
              v196 = v612;
            }
            *((_QWORD *)v611 + v196) = v167;
            LODWORD(v612) = v612 + 1;
            k = v184;
            if ((*(_DWORD *)((v195 & 0xFFFFFFFFFFFFFFF8) + 24) | (v195 >> 1) & 3) > (*(_DWORD *)(v569 + 24) | v568))
              goto LABEL_449;
            v197 = v599;
            if ((v599 & 4) != 0)
            {
              v199 = *(unint64_t **)(v599 & 0xFFFFFFFFFFFFFFF8);
              v198 = &v199[*(unsigned int *)((v599 & 0xFFFFFFFFFFFFFFF8) + 8)];
            }
            else
            {
              v198 = &v599 + (v599 > 7);
              v199 = &v599;
            }
            v571 = v184;
            v200 = 0xFFFFFFFFLL;
            while (v199 != v198)
            {
              v201 = (_DWORD *)*v199++;
              v202 = (*v201 >> 8) & 0xFFF;
              if (v202 == (_DWORD)v200)
                v203 = v200;
              else
                v203 = 0;
              if ((_DWORD)v200 == -1)
                v200 = v202;
              else
                v200 = v203;
            }
            v566 = *(unsigned int *)(*(_QWORD *)(v167 + 32) + 4);
            v567 = v566 & 0x7FFFFFFF;
            for (j = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * v567) & 0xFFFFFFFFFFFFFFF8;
                  v599 >= 8;
                  v197 = v599)
            {
              v227 = v197 & 0xFFFFFFFFFFFFFFF8;
              if ((v197 & 4) != 0 && v227 || (v197 & 4) != 0)
              {
                if (!*(_DWORD *)(v227 + 8))
                  break;
                v227 = *(_QWORD *)(*(_QWORD *)v227 + 8 * *(unsigned int *)(v227 + 8) - 8);
              }
              v228 = *(uint64_t **)(v227 + 8);
              v608 = v228;
              sub_1C49685A8((_QWORD *)a1, (unint64_t *)&v608, v167, 0);
              LODWORD(v597) = v594;
              if ((_DWORD)v200
                && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 288))(a1, v167, &v597))
              {
                v229 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
                v230 = 1;
              }
              else
              {
                v230 = 0;
                v229 = j;
              }
              v231 = *(_QWORD *)(a1 + 264);
              v232 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v231, "", 0);
              *(_QWORD *)(*(_QWORD *)(v231 + 24) + 16 * (v232 & 0x7FFFFFFF)) = v229 & 0xFFFFFFFFFFFFFFFBLL;
              v233 = *(_QWORD *)(v231 + 8);
              if (v233)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v233 + 24))(v233, v232);
              sub_1C4779044(v228[3], (uint64_t)v608, (unsigned __int8 **)(v167 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 48 * v597, v232);
              v235 = v234;
              if (llvm::MachineInstr::getNumExplicitOperands(v167) >= 2)
              {
                v236 = 32;
                v237 = 1;
                do
                {
                  llvm::MachineInstr::addOperand(v235, *(llvm::MachineFunction **)(*((_QWORD *)v235 + 3) + 32), (const llvm::MachineOperand *)(*(_QWORD *)(v167 + 32) + v236));
                  ++v237;
                  v236 += 32;
                }
                while (v237 < llvm::MachineInstr::getNumExplicitOperands(v167));
              }
              sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 288), (uint64_t)v235, 0);
              if ((v230 & 1) != 0)
                (*(void (**)(uint64_t, _QWORD, uint64_t, llvm::MachineInstr *))(*(_QWORD *)a1 + 312))(a1, v594, v200, v235);
              v238 = v599;
              v239 = &v599;
              if ((v599 & 4) != 0)
                v239 = *(unint64_t **)(v599 & 0xFFFFFFFFFFFFFFF8);
              while (1)
              {
                v243 = (v238 & 4) != 0
                     ? (unint64_t *)(*(_QWORD *)(v238 & 0xFFFFFFFFFFFFFFF8)
                                          + 8 * *(unsigned int *)((v238 & 0xFFFFFFFFFFFFFFF8) + 8))
                     : &v599 + (v238 > 7);
                if (v239 == v243)
                  break;
                v240 = *((_QWORD *)v608 + 3);
                v241 = *(_QWORD *)(*(_QWORD *)(*v239 + 8) + 24);
                v242 = *(_QWORD *)(a1 + 280);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v242);
                if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v242 + 1320), v240, v241))
                {
                  llvm::MachineOperand::setReg(*v239, v232);
                  if (v230)
                    *(_DWORD *)*v239 &= 0xFFF000FF;
                  v239 = sub_1C49688A0(&v599, (char *)v239);
                }
                else
                {
                  ++v239;
                }
                v238 = v599;
              }
              v244 = *(_QWORD *)(a1 + 272);
              v245 = (llvm::LiveInterval *)sub_1C4851220(v244, v232);
              v246 = *(_QWORD *)(v244 + 304);
              v247 = *(_QWORD *)(v244 + 248);
              *(_QWORD *)v246 = v247;
              *(_QWORD *)(v246 + 8) = *(_QWORD *)(v247 + 40);
              *(_OWORD *)(v246 + 16) = *(_OWORD *)(v244 + 288);
              *(_QWORD *)(v246 + 32) = v244 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v246);
              *(_DWORD *)(v246 + 184) = 0;
              v248 = *(_QWORD *)(v244 + 256);
              v22 = *(_BYTE *)(v248 + 16) == 0;
              v249 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v248 + 24)
                                                     + 16 * (*((_DWORD *)v245 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v251 = !v22 && v249 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v244 + 304), v245, v251);
              llvm::LiveIntervals::computeDeadValues(v244, (uint64_t)v245, 0);
            }
            v204 = *(_QWORD *)(a1 + 272);
            if (v567 >= *(unsigned int *)(v204 + 416) || (v205 = *(_QWORD *)(*(_QWORD *)(v204 + 408) + 8 * v567)) == 0)
            {
              v205 = sub_1C4851220(*(_QWORD *)(a1 + 272), v566);
              v306 = *(_QWORD *)(v204 + 304);
              v307 = *(_QWORD *)(v204 + 248);
              *(_QWORD *)v306 = v307;
              *(_QWORD *)(v306 + 8) = *(_QWORD *)(v307 + 40);
              *(_OWORD *)(v306 + 16) = *(_OWORD *)(v204 + 288);
              *(_QWORD *)(v306 + 32) = v204 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v306);
              *(_DWORD *)(v306 + 184) = 0;
              v308 = *(_QWORD *)(v204 + 256);
              v22 = *(_BYTE *)(v308 + 16) == 0;
              v309 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v308 + 24)
                                                     + 16 * (*(_DWORD *)(v205 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v311 = !v22 && v309 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v204 + 304), (llvm::LiveInterval *)v205, v311);
              llvm::LiveIntervals::computeDeadValues(v204, v205, 0);
              v204 = *(_QWORD *)(a1 + 272);
            }
            llvm::LiveIntervals::shrinkToUses((_QWORD *)v204, v205, 0);
            LODWORD(v597) = 0;
            v206 = *(_DWORD *)(v205 + 8);
            if (!v206
              || (**(_QWORD **)v205 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)v205 + 24 * v206 - 16) & 0xFFFFFFFFFFFFFFF8))
            {
              v226 = *(_QWORD *)(v205 + 104);
              v225 = (_QWORD *)(v205 + 104);
              v224 = v226;
              for (k = v571; v224; v224 = *(_QWORD *)(v224 + 104))
              {
                v302 = v224;
                if (!*(_DWORD *)(v224 + 8))
                {
                  while (1)
                  {
                    v300 = *(_QWORD *)(v302 + 96);
                    v224 = *(_QWORD *)(v302 + 104);
                    *(_QWORD *)(v302 + 96) = 0;
                    if (v300)
                    {
                      sub_1C47655E8(v300, *(_QWORD **)(v300 + 8));
                      MEMORY[0x1CAA32FC0](v300, 0x1020C4062D53EE8);
                      k = v571;
                    }
                    v301 = *(void **)(v302 + 64);
                    if (v301 != (void *)(v302 + 80))
                    {
                      free(v301);
                      k = v571;
                    }
                    if (*(_QWORD *)v302 == v302 + 16)
                    {
                      if (!v224)
                      {
LABEL_456:
                        *v225 = 0;
                        goto LABEL_445;
                      }
                    }
                    else
                    {
                      free(*(void **)v302);
                      k = v571;
                      if (!v224)
                        goto LABEL_456;
                    }
                    v302 = v224;
                    if (*(_DWORD *)(v224 + 8))
                    {
                      *v225 = v224;
                      break;
                    }
                  }
                }
                v225 = (_QWORD *)(v224 + 104);
              }
LABEL_445:
              v303 = v622;
              if (v622 >= (unint64_t)HIDWORD(v622))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v621, (uint64_t)v623, v622 + 1, 8);
                k = v571;
                v303 = v622;
              }
              *((_QWORD *)v621 + v303) = v167;
              LODWORD(v622) = v622 + 1;
              goto LABEL_448;
            }
            v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
            k = v571;
            if (v207 != j)
              goto LABEL_448;
            if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 16))
              goto LABEL_448;
            v208 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 288))(a1, v167, &v597);
            k = v571;
            if (!v208)
              goto LABEL_448;
            v210 = (uint64_t *)(v205 + 104);
            v209 = *(_QWORD *)(v205 + 104);
            if (!v209)
              goto LABEL_448;
            v211 = 0;
            do
            {
              v212 = *(_DWORD *)(v209 + 8);
              if (v212)
              {
                if ((**(_QWORD **)v209 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)v209 + 24 * v212 - 16) & 0xFFFFFFFFFFFFFFF8))
                  v211 = v211 | *(_DWORD *)(v209 + 112);
                k = v571;
              }
              v209 = *(_QWORD *)(v209 + 104);
            }
            while (v209);
            if ((v211 - 1) >= 2)
              goto LABEL_448;
            v213 = *(_QWORD *)(a1 + 264);
            v214 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
            v215 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v213, "", 0);
            *(_QWORD *)(*(_QWORD *)(v213 + 24) + 16 * (v215 & 0x7FFFFFFF)) = v214 & 0xFFFFFFFFFFFFFFFBLL;
            v216 = *(_QWORD *)(v213 + 8);
            if (v216)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 24))(v216, v215);
            sub_1C4779044(*(_QWORD *)(v167 + 24), v167, (unsigned __int8 **)(v167 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 48 * v597, v215);
            v218 = v217;
            if (llvm::MachineInstr::getNumExplicitOperands(v167) >= 2)
            {
              v219 = 32;
              v220 = 1;
              do
              {
                llvm::MachineInstr::addOperand(v218, *(llvm::MachineFunction **)(*((_QWORD *)v218 + 3) + 32), (const llvm::MachineOperand *)(*(_QWORD *)(v167 + 32) + v219));
                ++v220;
                v219 += 32;
              }
              while (v220 < llvm::MachineInstr::getNumExplicitOperands(v167));
            }
            v221 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(a1, v211);
            (*(void (**)(uint64_t, _QWORD, uint64_t, llvm::MachineInstr *))(*(_QWORD *)a1 + 312))(a1, v594, v221, v218);
            sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 288), (uint64_t)v218, 0);
            v608 = v610;
            v609 = 0x800000000;
            v222 = *(_QWORD *)(a1 + 264);
            if ((v566 & 0x80000000) != 0)
              v223 = (uint64_t *)(*(_QWORD *)(v222 + 24) + 16 * v567 + 8);
            else
              v223 = (uint64_t *)(*(_QWORD *)(v222 + 272) + 8 * v566);
            v252 = *v223;
            if (!*v223)
              goto LABEL_418;
            while ((*(_BYTE *)(v252 + 3) & 1) != 0)
            {
              v252 = *(_QWORD *)(v252 + 24);
              if (!v252)
                goto LABEL_418;
            }
            v253 = 0;
            v254 = 8;
LABEL_361:
            if (v253 >= v254)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v608, (uint64_t)v610, v253 + 1, 8);
              v253 = v609;
            }
            *((_QWORD *)v608 + v253) = v252;
            v253 = v609 + 1;
            LODWORD(v609) = v609 + 1;
            while (1)
            {
              v252 = *(_QWORD *)(v252 + 24);
              if (!v252)
                break;
              if ((*(_BYTE *)(v252 + 3) & 1) == 0)
              {
                v254 = HIDWORD(v609);
                goto LABEL_361;
              }
            }
            if (!v253)
              goto LABEL_418;
            v255 = (uint64_t *)v608;
            v256 = (uint64_t *)((char *)v608 + 8 * v253);
            while (2)
            {
              v257 = *(_QWORD *)(*v255 + 8);
              v258 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 288);
              v259 = *(_QWORD *)(v257 + 24);
              v260 = v257;
LABEL_370:
              if (v260 == *(_QWORD *)(v259 + 56))
              {
                v268 = (_QWORD *)(*(_QWORD *)(v258 + 392) + 16 * *(unsigned int *)(v259 + 24));
LABEL_384:
                v269 = *v268 & 0xFFFFFFFFFFFFFFF8;
                v270 = *(_DWORD *)(v205 + 8);
                v271 = *(_QWORD *)v205;
                if (!v270)
                {
                  v270 = 0;
LABEL_394:
                  v275 = v271 + 24 * v270;
                  goto LABEL_395;
                }
                v272 = *(_QWORD *)(v271 + 24 * v270 - 16);
                v273 = *(_DWORD *)(v269 + 24);
                v274 = (v272 >> 1) & 3 | *(_DWORD *)((v272 & 0xFFFFFFFFFFFFFFF8) + 24);
                v275 = *(_QWORD *)v205;
                v276 = *(unsigned int *)(v205 + 8);
                if (v273 >= v274)
                  goto LABEL_394;
                do
                {
                  v277 = v276 >> 1;
                  v278 = *(_QWORD *)(v275 + 24 * (v276 >> 1) + 8);
                  LODWORD(v278) = (v278 >> 1) & 3 | *(_DWORD *)((v278 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v276 -= (v276 >> 1) + 1;
                  v279 = v273 >= v278;
                  if (v273 >= v278)
                    v280 = v277 + 1;
                  else
                    v280 = 0;
                  v275 += 24 * v280;
                  if (!v279)
                    v276 = v277;
                }
                while (v276);
LABEL_395:
                v281 = v271 + 24 * v270;
                if (v275 == v281)
                  goto LABEL_406;
                v282 = *(_DWORD *)((*(_QWORD *)v275 & 0xFFFFFFFFFFFFFFF8) + 24);
                v283 = *(_DWORD *)(v269 + 24);
                if (((*(_QWORD *)v275 >> 1) & 3 | v282) <= v283
                  && v269 == (*(_QWORD *)(v275 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  v275 += 24;
                  if (v275 != v281)
                  {
                    v282 = *(_DWORD *)((*(_QWORD *)v275 & 0xFFFFFFFFFFFFFFF8) + 24);
                    goto LABEL_400;
                  }
LABEL_406:
                  v284 = 0;
LABEL_407:
                  if (**(unsigned __int16 **)(v257 + 16) - 13 <= 4)
                  {
                    v286 = 0;
                    goto LABEL_414;
                  }
                }
                else
                {
LABEL_400:
                  if (v283 < v282)
                    goto LABEL_406;
                  v284 = *(_QWORD *)(v275 + 16);
                  if ((~*(_DWORD *)(v275 + 8) & 6) == 0 || v284 == 0)
                    goto LABEL_407;
                }
                v287 = *(_QWORD *)(v284 + 8);
                if (v287 < 8)
                  v288 = 0;
                else
                  v288 = *(_QWORD *)((v287 & 0xFFFFFFFFFFFFFFF8) + 16);
                if (v288 == v167)
                {
                  v286 = v215;
LABEL_414:
                  llvm::MachineOperand::setReg(*v255, v286);
                  *(_DWORD *)*v255 &= 0xFFF000FF;
                }
                if (++v255 == v256)
                {
LABEL_418:
                  v289 = *(_QWORD *)(a1 + 272);
                  v290 = (llvm::LiveInterval *)sub_1C4851220(v289, v215);
                  v291 = *(_QWORD *)(v289 + 304);
                  v292 = *(_QWORD *)(v289 + 248);
                  *(_QWORD *)v291 = v292;
                  *(_QWORD *)(v291 + 8) = *(_QWORD *)(v292 + 40);
                  *(_OWORD *)(v291 + 16) = *(_OWORD *)(v289 + 288);
                  *(_QWORD *)(v291 + 32) = v289 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v291);
                  *(_DWORD *)(v291 + 184) = 0;
                  v293 = *(_QWORD *)(v289 + 256);
                  v22 = *(_BYTE *)(v293 + 16) == 0;
                  v294 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v293 + 24)
                                                         + 16 * (*((_DWORD *)v290 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v296 = !v22 && v294 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v289 + 304), v290, v296);
                  llvm::LiveIntervals::computeDeadValues(v289, (uint64_t)v290, 0);
                  llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 272), v205, 0);
                  v297 = *(_DWORD *)(v205 + 8);
                  if (!v297
                    || (**(_QWORD **)v205 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)v205 + 24 * v297 - 16) & 0xFFFFFFFFFFFFFFF8))
                  {
                    v298 = v622;
                    if (v622 >= (unint64_t)HIDWORD(v622))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v621, (uint64_t)v623, v622 + 1, 8);
                      v298 = v622;
                    }
                    *((_QWORD *)v621 + v298) = v167;
                    LODWORD(v622) = v622 + 1;
                  }
                  v299 = *v210;
                  if (*v210)
                  {
                    while (1)
                    {
                      v314 = v299;
                      if (!*(_DWORD *)(v299 + 8))
                        break;
LABEL_477:
                      v210 = (uint64_t *)(v299 + 104);
                      v299 = *(_QWORD *)(v299 + 104);
                      if (!v299)
                        goto LABEL_478;
                    }
                    while (1)
                    {
                      v312 = *(_QWORD *)(v314 + 96);
                      v299 = *(_QWORD *)(v314 + 104);
                      *(_QWORD *)(v314 + 96) = 0;
                      if (v312)
                      {
                        sub_1C47655E8(v312, *(_QWORD **)(v312 + 8));
                        MEMORY[0x1CAA32FC0](v312, 0x1020C4062D53EE8);
                      }
                      v313 = *(void **)(v314 + 64);
                      if (v313 != (void *)(v314 + 80))
                        free(v313);
                      if (*(_QWORD *)v314 == v314 + 16)
                      {
                        if (!v299)
                        {
LABEL_481:
                          *v210 = 0;
                          break;
                        }
                      }
                      else
                      {
                        free(*(void **)v314);
                        if (!v299)
                          goto LABEL_481;
                      }
                      v314 = v299;
                      if (*(_DWORD *)(v299 + 8))
                      {
                        *v210 = v299;
                        goto LABEL_477;
                      }
                    }
                  }
LABEL_478:
                  if (v608 != v610)
                    free(v608);
                  k = v571;
LABEL_448:
                  v119 = 1;
                  goto LABEL_449;
                }
                continue;
              }
              break;
            }
            v260 = *(_QWORD *)v260 & 0xFFFFFFFFFFFFFFF8;
            if (!v260 || (*(_BYTE *)v260 & 4) == 0)
            {
              while ((*(_WORD *)(v260 + 44) & 4) != 0)
                v260 = *(_QWORD *)v260 & 0xFFFFFFFFFFFFFFF8;
            }
            v261 = *(_QWORD *)(v258 + 368);
            v262 = *(unsigned int *)(v258 + 384);
            if ((_DWORD)v262)
            {
              LODWORD(v263) = ((v260 >> 4) ^ (v260 >> 9)) & (v262 - 1);
              v264 = (uint64_t *)(v261 + 16 * v263);
              v265 = *v264;
              if (v260 != *v264)
              {
                v266 = 1;
                while (v265 != -4096)
                {
                  v267 = v263 + v266++;
                  v263 = v267 & (v262 - 1);
                  v265 = *(_QWORD *)(v261 + 16 * v263);
                  if (v260 == v265)
                  {
                    v264 = (uint64_t *)(v261 + 16 * v263);
                    goto LABEL_382;
                  }
                }
                goto LABEL_381;
              }
            }
            else
            {
LABEL_381:
              v264 = (uint64_t *)(v261 + 16 * v262);
            }
LABEL_382:
            if (v264 != (uint64_t *)(v261 + 16 * v262))
            {
              v268 = v264 + 1;
              goto LABEL_384;
            }
            goto LABEL_370;
          }
LABEL_449:
          v138 = v582;
          if ((v599 & 4) != 0)
          {
            v304 = (void **)(v599 & 0xFFFFFFFFFFFFFFF8);
            if ((v599 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v305 = k;
              if (*v304 != v304 + 2)
                free(*v304);
              MEMORY[0x1CAA32FC0](v304, 0x1080C40ED926357);
              k = v305;
            }
          }
          k += 32;
        }
        while (k != v578);
        v315 = (uint64_t *)v611;
        if ((_DWORD)v612)
        {
          v316 = 8 * v612;
          do
          {
            v317 = *v315++;
            sub_1C4968920((uint64_t)&v624, v317);
            v316 -= 8;
          }
          while (v316);
          v315 = (uint64_t *)v611;
        }
        if (v315 != (uint64_t *)&v613)
          free(v315);
LABEL_488:
        v136 = v564;
        if ((v573 & 1) != 0)
          goto LABEL_674;
        if ((v572 & 1) == 0)
        {
          v572 = 0;
          goto LABEL_674;
        }
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, **(unsigned __int16 **)(v570 + 16)) & 1) != 0|| (*(_BYTE *)(*(_QWORD *)(v570 + 16) + 9) & 0x20) != 0)
        {
          if ((v624 & 1) != 0)
          {
            v427 = 32;
            v428 = &v625;
            goto LABEL_658;
          }
          v428 = v625;
          v427 = v626;
          if (!v626)
          {
            v430 = 0;
            goto LABEL_665;
          }
LABEL_658:
          v429 = v427 - 1;
          LODWORD(v430) = (v427 - 1) & ((v570 >> 4) ^ (v570 >> 9));
          v431 = (char *)&v428[2 * v430];
          v432 = *(_QWORD *)v431;
          if (*(_QWORD *)v431 != v570)
          {
            v433 = 1;
            while (v432 != -4096)
            {
              v434 = v430 + v433++;
              v430 = v434 & v429;
              v432 = v428[2 * v430];
              if (v432 == v570)
                goto LABEL_665;
            }
            if ((v624 & 1) != 0)
            {
              v428 = &v625;
              v430 = 32;
            }
            else
            {
              v428 = v625;
              v430 = v626;
            }
LABEL_665:
            v431 = (char *)&v428[2 * v430];
          }
          if ((v624 & 1) != 0)
            v435 = (char *)&v625;
          else
            v435 = (char *)v625;
          v436 = v626;
          if ((v624 & 1) != 0)
            v436 = 32;
          if (&v435[16 * v436] != v431)
            sub_1C4968920((uint64_t)&v624, v570);
          goto LABEL_673;
        }
        if (*(_DWORD *)(v570 + 40))
        {
          v318 = v119;
          v319 = 0;
          v320 = v570;
          v136 = v564;
          while (1)
          {
            v321 = v320;
            v322 = *(_QWORD *)(v320 + 32) + 32 * v319;
            if ((*(_DWORD *)v322 & 0x130000FF) == 0)
            {
              v323 = *(_DWORD *)(v322 + 4);
              if ((v323 - 1) >= 0x3FFFFFFF)
              {
                if (((*(_DWORD *)v322 >> 8) & 0xFFF) == 0
                  || (v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1), v136 = v564, v324))
                {
                  v325 = *(_QWORD *)(a1 + 272);
                  if ((v323 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v325 + 416)
                    || (v326 = *(llvm::LiveInterval **)(*(_QWORD *)(v325 + 408) + 8 * (v323 & 0x7FFFFFFF))) == 0)
                  {
                    v326 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 272), v323);
                    v407 = *(_QWORD *)(v325 + 304);
                    v408 = *(_QWORD *)(v325 + 248);
                    *(_QWORD *)v407 = v408;
                    *(_QWORD *)(v407 + 8) = *(_QWORD *)(v408 + 40);
                    *(_OWORD *)(v407 + 16) = *(_OWORD *)(v325 + 288);
                    *(_QWORD *)(v407 + 32) = v325 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v407);
                    *(_DWORD *)(v407 + 184) = 0;
                    v409 = *(_QWORD *)(v325 + 256);
                    v22 = *(_BYTE *)(v409 + 16) == 0;
                    v410 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v409 + 24)
                                                           + 16 * (*((_DWORD *)v326 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                              + 34);
                    v412 = !v22 && v410 != 0;
                    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v325 + 304), v326, v412);
                    llvm::LiveIntervals::computeDeadValues(v325, (uint64_t)v326, 0);
                    v325 = *(_QWORD *)(a1 + 272);
                  }
                  v327 = *(_QWORD *)(v325 + 288);
                  v328 = *(_WORD *)(v321 + 44);
                  v329 = v321;
                  v138 = v582;
                  if ((v328 & 4) != 0)
                  {
                    do
                      v329 = *(_QWORD *)v329 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v329 + 44) & 4) != 0);
                  }
                  v330 = v321;
                  if ((v328 & 8) != 0)
                  {
                    do
                      v330 = *(_QWORD *)(v330 + 8);
                    while ((*(_WORD *)(v330 + 44) & 8) != 0);
                  }
                  v331 = *(_QWORD *)(v330 + 8);
                  if (v329 != v331)
                  {
                    while (1)
                    {
                      v332 = **(unsigned __int16 **)(v329 + 16);
                      v413 = v332 > 0x17;
                      v333 = (1 << v332) & 0x83E000;
                      if (v413 || v333 == 0)
                        break;
                      v329 = *(_QWORD *)(v329 + 8);
                      if (v329 == v331)
                      {
                        v329 = v331;
                        break;
                      }
                    }
                  }
                  v335 = *(_QWORD *)(v327 + 368);
                  v336 = *(unsigned int *)(v327 + 384);
                  if ((_DWORD)v336)
                  {
                    LODWORD(v337) = ((v329 >> 4) ^ (v329 >> 9)) & (v336 - 1);
                    v338 = (uint64_t *)(v335 + 16 * v337);
                    v339 = *v338;
                    if (v329 != *v338)
                    {
                      v340 = 1;
                      while (v339 != -4096)
                      {
                        v341 = v337 + v340++;
                        v337 = v341 & (v336 - 1);
                        v339 = *(_QWORD *)(v335 + 16 * v337);
                        if (v329 == v339)
                        {
                          v338 = (uint64_t *)(v335 + 16 * v337);
                          goto LABEL_517;
                        }
                      }
                      goto LABEL_516;
                    }
                  }
                  else
                  {
LABEL_516:
                    v338 = (uint64_t *)(v335 + 16 * v336);
                  }
LABEL_517:
                  v342 = v338[1] & 0xFFFFFFFFFFFFFFF8;
                  v343 = *((_DWORD *)v326 + 2);
                  v344 = *(_QWORD *)v326;
                  if (v343)
                  {
                    v345 = *(_QWORD *)(v344 + 24 * v343 - 16);
                    v346 = *(_DWORD *)(v342 + 24);
                    v347 = (v345 >> 1) & 3 | *(_DWORD *)((v345 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v348 = *(_QWORD *)v326;
                    v349 = *((unsigned int *)v326 + 2);
                    if (v346 < v347)
                    {
                      do
                      {
                        v350 = v349 >> 1;
                        v351 = *(_QWORD *)(v348 + 24 * (v349 >> 1) + 8);
                        LODWORD(v351) = (v351 >> 1) & 3 | *(_DWORD *)((v351 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v349 -= (v349 >> 1) + 1;
                        v352 = v346 >= v351;
                        if (v346 >= v351)
                          v353 = v350 + 1;
                        else
                          v353 = 0;
                        v348 += 24 * v353;
                        if (!v352)
                          v349 = v350;
                      }
                      while (v349);
LABEL_528:
                      v136 = v564;
                      v354 = v344 + 24 * v343;
                      v355 = *(_QWORD *)(v348 + 16);
                      v356 = *(_QWORD *)(v348 + 8) & 0xFFFFFFFFFFFFFFF8;
                      v357 = v348 + 24;
                      v358 = v342 == v356 && v357 == v354;
                      if (!v358 && *(_QWORD *)(v355 + 8) == v342)
                        v355 = 0;
                      v359 = *(_QWORD *)(v355 + 8);
                      if (v359 < 8)
                        goto LABEL_599;
                      v360 = *(_QWORD **)((v359 & 0xFFFFFFFFFFFFFFF8) + 16);
                      if (!v360)
                        goto LABEL_599;
                      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(unsigned __int16 *)v360[2]) & 1) == 0&& (*(_BYTE *)(v360[2] + 9) & 0x20) == 0)
                      {
LABEL_538:
                        v136 = v564;
                        goto LABEL_599;
                      }
                      v361 = (_DWORD *)v360[4];
                      v136 = v564;
                      if ((v361[1] - 1) < 0x3FFFFFFF || (*v361 & 0xFFF00) != 0)
                        goto LABEL_599;
                      v362 = (_QWORD *)sub_1C4968B24((int *)&v624, (uint64_t)v360);
                      if (v362 != (_QWORD *)((char *)v630 + 32 * v631))
                      {
                        v363 = v362;
                        v364 = v362[1];
                        if (v364 <= 7)
                        {
                          v362[1] = v322 & 0xFFFFFFFFFFFFFFFBLL;
                          v136 = v564;
                          v138 = v582;
                        }
                        else
                        {
                          v136 = v564;
                          if ((v364 & 4) == 0)
                          {
                            v365 = operator new();
                            *(_QWORD *)v365 = v365 + 16;
                            *(_QWORD *)(v365 + 8) = 0x400000000;
                            v363[1] = v365 | 4;
                            v366 = v365 & 0xFFFFFFFFFFFFFFF8;
                            v367 = *(unsigned int *)((v365 & 0xFFFFFFFFFFFFFFF8) + 8);
                            if (v367 >= *(unsigned int *)((v365 & 0xFFFFFFFFFFFFFFF8) + 12))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod(v365 & 0xFFFFFFFFFFFFFFF8, v366 + 16, v367 + 1, 8);
                              v367 = *(unsigned int *)(v366 + 8);
                            }
                            *(_QWORD *)(*(_QWORD *)v366 + 8 * v367) = v364 & 0xFFFFFFFFFFFFFFF8;
                            ++*(_DWORD *)(v366 + 8);
                            v364 = v363[1];
                            v136 = v564;
                          }
                          v368 = v364 & 0xFFFFFFFFFFFFFFF8;
                          v369 = *(unsigned int *)((v364 & 0xFFFFFFFFFFFFFFF8) + 8);
                          if (v369 >= *(unsigned int *)((v364 & 0xFFFFFFFFFFFFFFF8) + 12))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod(v364 & 0xFFFFFFFFFFFFFFF8, v368 + 16, v369 + 1, 8);
                            v136 = v564;
                            v369 = *(unsigned int *)(v368 + 8);
                          }
                          v138 = v582;
                          *(_QWORD *)(*(_QWORD *)v368 + 8 * v369) = v322;
                          ++*(_DWORD *)(v368 + 8);
                        }
                        v363[2] = v321;
                        *((_DWORD *)v363 + 6) = v584;
                        goto LABEL_599;
                      }
                      v611 = (void *)v322;
                      sub_1C4850058((unint64_t *)&v597, &v611, 1uLL);
                      v370 = v597;
                      v371 = v597 & 4;
                      v372 = v597 & 0xFFFFFFFFFFFFFFF8;
                      if ((v597 & 4) != 0 && v372)
                      {
                        v373 = (_QWORD *)operator new();
                        v374 = (unint64_t)v373;
                        v375 = v373 + 2;
                        *v373 = v373 + 2;
                        v373[1] = 0x400000000;
                        if (v373 != (_QWORD *)v372)
                        {
                          v376 = *(unsigned int *)(v372 + 8);
                          if (*(_DWORD *)(v372 + 8))
                          {
                            if (v376 < 5)
                            {
                              v377 = *(unsigned int *)(v372 + 8);
                              goto LABEL_557;
                            }
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v373, (uint64_t)(v373 + 2), *(unsigned int *)(v372 + 8), 8);
                            v377 = *(unsigned int *)(v372 + 8);
                            if ((_DWORD)v377)
                            {
                              v375 = *(void **)v374;
LABEL_557:
                              memcpy(v375, *(const void **)v372, 8 * v377);
                            }
                            *(_DWORD *)(v374 + 8) = v376;
                          }
                        }
                        v370 = v374 | 4;
                        v372 = v374 & 0xFFFFFFFFFFFFFFF8;
                        v371 = 4;
                        v138 = v582;
                      }
                      v378 = v321;
                      v611 = v360;
                      v612 = v370;
                      if (v372)
                        v379 = v371 == 0;
                      else
                        v379 = 1;
                      v380 = v379;
                      if (!v379)
                      {
                        v381 = (_QWORD *)operator new();
                        v382 = (unint64_t)v381;
                        v383 = v381 + 2;
                        *v381 = v381 + 2;
                        v381[1] = 0x400000000;
                        if (v381 != (_QWORD *)v372)
                        {
                          v384 = *(unsigned int *)(v372 + 8);
                          if (*(_DWORD *)(v372 + 8))
                          {
                            if (v384 < 5)
                            {
                              v385 = *(unsigned int *)(v372 + 8);
                              goto LABEL_571;
                            }
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v381, (uint64_t)(v381 + 2), *(unsigned int *)(v372 + 8), 8);
                            v385 = *(unsigned int *)(v372 + 8);
                            if ((_DWORD)v385)
                            {
                              v383 = *(void **)v382;
LABEL_571:
                              memcpy(v383, *(const void **)v372, 8 * v385);
                            }
                            *(_DWORD *)(v382 + 8) = v384;
                          }
                        }
                        v370 = v382 | 4;
                        v612 = v382 | 4;
                        v360 = v611;
                        v138 = v582;
                        v378 = v321;
                      }
                      v613 = v378;
                      v614 = v584;
                      v608 = v360;
                      LODWORD(v609) = 0;
                      if ((v624 & 1) != 0)
                      {
                        v386 = 32;
                        v387 = (char *)&v625;
                        goto LABEL_578;
                      }
                      v386 = v626;
                      if (!v626)
                      {
                        v396 = 0;
                        goto LABEL_591;
                      }
                      v387 = (char *)v625;
LABEL_578:
                      v388 = v386 - 1;
                      v389 = v388 & ((v360 >> 4) ^ (v360 >> 9));
                      v390 = &v387[16 * v389];
                      v391 = *(void **)v390;
                      if (v360 == *(_QWORD **)v390)
                      {
LABEL_587:
                        v136 = v564;
                      }
                      else
                      {
                        v392 = 0;
                        v393 = 1;
                        while (v391 != (void *)-4096)
                        {
                          if (v392)
                            v394 = 0;
                          else
                            v394 = v391 == (void *)-8192;
                          if (v394)
                            v392 = v390;
                          v395 = v389 + v393++;
                          v389 = v395 & v388;
                          v390 = &v387[16 * v389];
                          v391 = *(void **)v390;
                          if (v360 == *(_QWORD **)v390)
                            goto LABEL_587;
                        }
                        if (v392)
                          v396 = v392;
                        else
                          v396 = v390;
LABEL_591:
                        v397 = sub_1C4968D14((uint64_t)&v624, (uint64_t)&v608, &v608, v396);
                        *v397 = v608;
                        *((_DWORD *)v397 + 2) = v609;
                        v398 = v631;
                        v399 = (char *)v630;
                        if (v631 >= HIDWORD(v631))
                        {
                          v413 = v630 <= &v611 && (char *)v630 + 32 * v631 > (char *)&v611;
                          v414 = v413;
                          v415 = ((char *)&v611 - (_BYTE *)v630) >> 5;
                          v592 = v414;
                          if (v414 != 1)
                            v415 = -1;
                          v589 = v415;
                          v598 = 0;
                          v399 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v630, v631 + 1, 32, (unint64_t *)&v598);
                          v416 = (char *)v630;
                          if ((_DWORD)v631)
                          {
                            v417 = (char *)v630 + 32 * v631;
                            v418 = v399;
                            do
                            {
                              *(_QWORD *)v418 = *(_QWORD *)v416;
                              *((_QWORD *)v418 + 1) = *((_QWORD *)v416 + 1);
                              *((_QWORD *)v416 + 1) = 0;
                              v419 = *((_QWORD *)v416 + 2);
                              *((_DWORD *)v418 + 6) = *((_DWORD *)v416 + 6);
                              *((_QWORD *)v418 + 2) = v419;
                              v416 += 32;
                              v418 += 32;
                            }
                            while (v416 != v417);
                            v416 = (char *)v630;
                            if ((_DWORD)v631)
                            {
                              v420 = (char *)v630 - 24;
                              v421 = 32 * v631;
                              v579 = (char *)v630 - 24;
                              do
                              {
                                v422 = *(_QWORD *)&v420[v421];
                                if ((v422 & 4) != 0)
                                {
                                  v423 = (void **)(v422 & 0xFFFFFFFFFFFFFFF8);
                                  if (v423)
                                  {
                                    v595 = v423;
                                    if (*v423 != v423 + 2)
                                      free(*v423);
                                    MEMORY[0x1CAA32FC0](v595, 0x1080C40ED926357);
                                    v420 = v579;
                                  }
                                }
                                v421 -= 32;
                              }
                              while (v421);
                              v416 = (char *)v630;
                            }
                          }
                          v424 = v598;
                          if (v416 != v632)
                            free(v416);
                          v630 = v399;
                          HIDWORD(v631) = v424;
                          v425 = &v399[32 * v589];
                          v400 = &v611;
                          if (v592)
                            v400 = (void **)&v399[32 * v589];
                          v402 = (uint64_t *)(v425 + 8);
                          v426 = (unint64_t *)(v425 + 16);
                          v401 = &v613;
                          if (v592)
                            v401 = v426;
                          else
                            v402 = &v612;
                          v398 = v631;
                        }
                        else
                        {
                          v400 = &v611;
                          v402 = &v612;
                          v401 = &v613;
                        }
                        v136 = v564;
                        v403 = &v399[32 * v398];
                        *(_QWORD *)v403 = *v400;
                        *((_QWORD *)v403 + 1) = *v402;
                        *v402 = 0;
                        v404 = *v401;
                        *((_DWORD *)v403 + 6) = *((_DWORD *)v401 + 2);
                        *((_QWORD *)v403 + 2) = v404;
                        LODWORD(v403) = v631;
                        LODWORD(v631) = v631 + 1;
                        *((_DWORD *)v397 + 2) = (_DWORD)v403;
                        v370 = v612;
                        v138 = v582;
                      }
                      if ((v370 & 4) != 0
                        && (v405 = (void **)(v370 & 0xFFFFFFFFFFFFFFF8), (v370 & 0xFFFFFFFFFFFFFFF8) != 0))
                      {
                        if (*v405 != v405 + 2)
                          free(*v405);
                        MEMORY[0x1CAA32FC0](v405, 0x1080C40ED926357);
                        v136 = v564;
                        if ((v380 & 1) != 0)
                          goto LABEL_597;
                      }
                      else if ((v380 & 1) != 0)
                      {
LABEL_597:
                        if ((v597 & 4) == 0)
                          goto LABEL_599;
                        v406 = (void **)(v597 & 0xFFFFFFFFFFFFFFF8);
                        if ((v597 & 0xFFFFFFFFFFFFFFF8) == 0)
                          goto LABEL_599;
                        if (*v406 != v406 + 2)
                          free(*v406);
                        MEMORY[0x1CAA32FC0](v406, 0x1080C40ED926357);
                        goto LABEL_538;
                      }
                      if (*(_QWORD *)v372 != v372 + 16)
                        free(*(void **)v372);
                      MEMORY[0x1CAA32FC0](v372, 0x1080C40ED926357);
                      v136 = v564;
                      goto LABEL_597;
                    }
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v348 = v344 + 24 * v343;
                  goto LABEL_528;
                }
              }
              v138 = v582;
            }
LABEL_599:
            ++v319;
            v320 = v321;
            if (v319 >= *(unsigned int *)(v321 + 40))
            {
              v572 = 1;
              v119 = v318;
              goto LABEL_674;
            }
          }
        }
LABEL_673:
        v572 = 1;
        v136 = v564;
LABEL_674:
        if (v138 == v136)
        {
          v121 = v637[0];
          goto LABEL_683;
        }
      }
      v162 = 1;
      while (v161 != -4096)
      {
        v163 = v159 + v162++;
        v159 = v163 & (v158 - 1);
        v161 = *(_QWORD *)(v157 + 16 * v159);
        if (v151 == v161)
        {
          v160 = (uint64_t *)(v157 + 16 * v159);
          goto LABEL_240;
        }
      }
LABEL_239:
      v160 = (uint64_t *)(v157 + 16 * v158);
      goto LABEL_240;
    }
LABEL_683:
    v637[0] = v121 - 1;
    v120 = v572;
    if (v121 != 1)
      sub_1C486F1F8(&v633);
    v118 = v619[0];
    v565 = v563;
  }
LABEL_686:
  if (*((_DWORD **)&v618 + 1) != &v619[2])
    free(*((void **)&v618 + 1));
  if (v616 != v615)
    free(v616);
  if (v636 != &v637[2])
    free(v636);
  if (v634 != v633)
    free(v634);
  if ((_DWORD)v622)
  {
    v437 = (uint64_t *)v621;
    v438 = (uint64_t *)((char *)v621 + 8 * v622);
    while (1)
    {
      v439 = *v437;
      v440 = *(int32x2_t **)(*(_QWORD *)(a1 + 272) + 288);
      v441 = v440[46];
      v442 = v440[48].u32[0];
      if (!(_DWORD)v442)
        goto LABEL_702;
      LODWORD(v443) = (v442 - 1) & ((v439 >> 4) ^ (v439 >> 9));
      v444 = (uint64_t *)(*(_QWORD *)&v441 + 16 * v443);
      v445 = *v444;
      if (*v444 != v439)
        break;
LABEL_703:
      if (v444 != (uint64_t *)(*(_QWORD *)&v441 + 16 * v442))
      {
        v448 = v444[1] & 0xFFFFFFFFFFFFFFF8;
        *v444 = -8192;
        v440[47] = vadd_s32(v440[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v448 + 16) = 0;
      }
      v449 = v439;
      if ((*(_BYTE *)v439 & 4) == 0)
      {
        v449 = v439;
        if ((*(_WORD *)(v439 + 44) & 8) != 0)
        {
          v449 = v439;
          do
            v449 = *(_QWORD *)(v449 + 8);
          while ((*(_WORD *)(v449 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v439 + 24) + 40, v439, *(_QWORD *)(v449 + 8));
      if (++v437 == v438)
        goto LABEL_712;
    }
    v446 = 1;
    while (v445 != -4096)
    {
      v447 = v443 + v446++;
      v443 = v447 & (v442 - 1);
      v445 = *(_QWORD *)(*(_QWORD *)&v441 + 16 * v443);
      if (v445 == v439)
      {
        v444 = (uint64_t *)(*(_QWORD *)&v441 + 16 * v443);
        goto LABEL_703;
      }
    }
LABEL_702:
    v444 = (uint64_t *)(*(_QWORD *)&v441 + 16 * v442);
    goto LABEL_703;
  }
LABEL_712:
  v450 = (_QWORD *)*((_QWORD *)v562 + 41);
  if (v450 == (_QWORD *)((char *)v562 + 320))
    goto LABEL_875;
  do
  {
    v633 = v635;
    v634 = (void *)0x800000000;
    v611 = 0;
    v612 = 0;
    v451 = (unsigned __int16 *)(v450 + 6);
    v452 = (unsigned __int16 **)v450[7];
    v590 = v119;
    if (v452 == v450 + 6)
    {
      v585 = 0;
      goto LABEL_827;
    }
    v453 = 0;
    v585 = 0;
    v454 = 0;
    v596 = (unsigned __int16 *)(v450 + 6);
    v581 = v450;
    do
    {
      if (!v452 || (v455 = (unsigned __int16 *)v452, (*(_BYTE *)v452 & 4) == 0))
      {
        v455 = (unsigned __int16 *)v452;
        if ((*((_WORD *)v452 + 22) & 8) != 0)
        {
          v455 = (unsigned __int16 *)v452;
          do
            v455 = (unsigned __int16 *)*((_QWORD *)v455 + 1);
          while ((v455[22] & 8) != 0);
        }
      }
      v456 = (unsigned __int16 *)*((_QWORD *)v455 + 1);
      v457 = v452[2];
      v458 = *v457;
      v460 = (v458 - 9) <= 0x3C && ((1 << (v458 - 9)) & 0x1000000000000605) != 0
          || v458 == 0;
      if (v460 || (v457[4] & 0x10) != 0)
      {
LABEL_734:
        v452 = (unsigned __int16 **)v453;
        goto LABEL_736;
      }
      if (((*(uint64_t (**)(uint64_t, unsigned __int16 **))(*(_QWORD *)a1 + 192))(a1, v452) & 1) != 0)
      {
        if (++v454 >= 0xF)
        {
          v453 = 0;
          v611 = 0;
        }
        if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 296))(a1, *v452[2]))
          goto LABEL_734;
        v461 = *((_DWORD *)v452[4] + 1);
        if ((v461 & 0x80000000) == 0)
          goto LABEL_734;
        v462 = v461 & 0x7FFFFFFF;
        v463 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * v462) & 0xFFFFFFFFFFFFFFF8;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) != v463)
          goto LABEL_734;
        v577 = v454;
        v464 = *(_QWORD *)(a1 + 264);
        v465 = *(_QWORD *)(*(_QWORD *)(v464 + 24) + 16 * v462 + 8);
        if (v465
          && ((*(_BYTE *)(v465 + 3) & 1) != 0 || (v465 = *(_QWORD *)(v465 + 24)) != 0 && (*(_BYTE *)(v465 + 3) & 1) != 0)
          && ((v466 = *(_QWORD *)(v465 + 24)) == 0 || (*(_BYTE *)(v466 + 3) & 1) == 0))
        {
          if (v453)
          {
            v612 = (uint64_t)v452;
            v467 = *(unsigned __int16 *)(*(_QWORD *)(v453 + 32) + 80);
            v468 = *((_QWORD *)v452[4] + 10);
            v469 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
            v470 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v464, "", 0);
            *(_QWORD *)(*(_QWORD *)(v464 + 24) + 16 * (v470 & 0x7FFFFFFF)) = v469 & 0xFFFFFFFFFFFFFFFBLL;
            v471 = *(_QWORD *)(v464 + 8);
            if (v471)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v471 + 24))(v471, v470);
            v472 = (_DWORD)v468 << 16;
            v473 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 304))(a1, *v452[2]);
            v474 = sub_1C4779044(*(_QWORD *)(v453 + 24), v453, (unsigned __int8 **)(v453 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 48 * v473, v470);
            v476 = v475;
            v477 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
            v478 = 1;
            LODWORD(v615) = 1;
            v616 = 0;
            v617[0] = v477;
            llvm::MachineInstr::addOperand(v476, v474, (const llvm::MachineOperand *)&v615);
            LODWORD(v615) = 1;
            v616 = 0;
            v617[0] = v472 & 0xFFFF0000 | v467;
            v575 = (uint64_t)v476;
            llvm::MachineInstr::addOperand(v476, v474, (const llvm::MachineOperand *)&v615);
            v479 = 0;
            do
            {
              v480 = v478;
              v481 = *(unsigned int *)(*((_QWORD *)*(&v611 + v479) + 4) + 4);
              v615 = v617;
              v616 = (void *)0x800000000;
              v482 = *(_QWORD *)(a1 + 264);
              if ((v481 & 0x80000000) != 0)
                v483 = (uint64_t *)(*(_QWORD *)(v482 + 24) + 16 * (v481 & 0x7FFFFFFF) + 8);
              else
                v483 = (uint64_t *)(*(_QWORD *)(v482 + 272) + 8 * v481);
              v484 = *v483;
              if (*v483)
              {
                while ((*(_BYTE *)(v484 + 3) & 1) != 0)
                {
                  v484 = *(_QWORD *)(v484 + 24);
                  if (!v484)
                    goto LABEL_775;
                }
                LODWORD(v485) = 0;
                v486 = 8;
LABEL_756:
                if (v485 >= v486)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v615, (uint64_t)v617, v485 + 1, 8);
                  LODWORD(v485) = (_DWORD)v616;
                }
                *((_QWORD *)v615 + v485) = v484;
                v485 = ((_DWORD)v616 + 1);
                LODWORD(v616) = (_DWORD)v616 + 1;
                while (1)
                {
                  v484 = *(_QWORD *)(v484 + 24);
                  if (!v484)
                    break;
                  if ((*(_BYTE *)(v484 + 3) & 1) == 0)
                  {
                    v486 = HIDWORD(v616);
                    goto LABEL_756;
                  }
                }
                v487 = (unsigned int **)v615;
                if ((_DWORD)v485)
                {
                  v586 = v478;
                  v488 = 8 * v485;
                  while (1)
                  {
                    v489 = *v487;
                    v490 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, v479);
                    if ((_DWORD)v490)
                    {
                      LOWORD(v491) = v490;
                      if (((*v489 >> 8) & 0xFFF) != 0)
                      {
                        v491 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 208))(*(_QWORD *)(a1 + 256), v490);
                        llvm::MachineOperand::setReg((uint64_t)v489, v470);
                        if (!v491)
                          goto LABEL_769;
                      }
                      else
                      {
                        llvm::MachineOperand::setReg((uint64_t)v489, v470);
                      }
                      *v489 = *v489 & 0xFFF000FF | ((v491 & 0xFFF) << 8);
                    }
                    else
                    {
                      llvm::MachineOperand::setReg((uint64_t)v489, v470);
                    }
LABEL_769:
                    ++v487;
                    v488 -= 8;
                    if (!v488)
                    {
                      v487 = (unsigned int **)v615;
                      v480 = v586;
                      break;
                    }
                  }
                }
                if (v487 != v617)
                  free(v487);
              }
LABEL_775:
              v478 = 0;
              v479 = 1;
            }
            while ((v480 & 1) != 0);
            sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 288), v575, 0);
            v492 = *(_QWORD *)(a1 + 272);
            v493 = (llvm::LiveInterval *)sub_1C4851220(v492, v470);
            v494 = *(_QWORD *)(v492 + 304);
            v495 = *(_QWORD *)(v492 + 248);
            *(_QWORD *)v494 = v495;
            *(_QWORD *)(v494 + 8) = *(_QWORD *)(v495 + 40);
            *(_OWORD *)(v494 + 16) = *(_OWORD *)(v492 + 288);
            *(_QWORD *)(v494 + 32) = v492 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v494);
            *(_DWORD *)(v494 + 184) = 0;
            v496 = *(_QWORD *)(v492 + 256);
            v22 = *(_BYTE *)(v496 + 16) == 0;
            v497 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v496 + 24)
                                                   + 16 * (*((_DWORD *)v493 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v499 = !v22 && v497 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v492 + 304), v493, v499);
            llvm::LiveIntervals::computeDeadValues(v492, (uint64_t)v493, 0);
            v500 = v634;
            if (v634 >= (unint64_t)HIDWORD(v634))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v633, (uint64_t)v635, v634 + 1, 8);
              v500 = v634;
            }
            v451 = v596;
            v454 = v577;
            *((_QWORD *)v633 + v500) = v453;
            v501 = ((_DWORD)v634 + 1);
            LODWORD(v634) = v501;
            if (v501 >= HIDWORD(v634))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v633, (uint64_t)v635, v501 + 1, 8);
              LODWORD(v501) = (_DWORD)v634;
            }
            *((_QWORD *)v633 + v501) = v452;
            LODWORD(v634) = (_DWORD)v634 + 1;
            v611 = 0;
            v612 = 0;
            v585 = 1;
            v452 = 0;
          }
          else
          {
            v454 = 0;
            v611 = v452;
          }
        }
        else
        {
          v452 = (unsigned __int16 **)v453;
          v454 = v577;
        }
      }
      else
      {
        v452 = 0;
        v611 = 0;
      }
LABEL_736:
      v453 = (uint64_t)v452;
      v452 = (unsigned __int16 **)v456;
    }
    while (v456 != v451);
    v502 = (uint64_t *)v633;
    v503 = (uint64_t *)((char *)v633 + 8 * v634);
    if (!(_DWORD)v634)
      goto LABEL_823;
    do
    {
      v504 = *v502;
      v505 = *(_QWORD *)(a1 + 272);
      v506 = *(_DWORD *)(*(_QWORD *)(*v502 + 32) + 4) & 0x7FFFFFFF;
      v507 = *(_QWORD *)(v505 + 408);
      v508 = *(_QWORD *)(v507 + 8 * v506);
      if (v508)
      {
        v509 = *(_QWORD *)(v508 + 104);
        if (v509)
        {
          do
          {
            v522 = *(_QWORD *)(v509 + 96);
            v523 = *(_QWORD *)(v509 + 104);
            *(_QWORD *)(v509 + 96) = 0;
            if (v522)
            {
              sub_1C47655E8(v522, *(_QWORD **)(v522 + 8));
              MEMORY[0x1CAA32FC0](v522, 0x1020C4062D53EE8);
            }
            v524 = *(void **)(v509 + 64);
            if (v524 != (void *)(v509 + 80))
              free(v524);
            if (*(_QWORD *)v509 != v509 + 16)
              free(*(void **)v509);
            v509 = v523;
          }
          while (v523);
        }
        v510 = *(_QWORD *)(v508 + 96);
        *(_QWORD *)(v508 + 96) = 0;
        *(_QWORD *)(v508 + 104) = 0;
        if (v510)
        {
          sub_1C47655E8(v510, *(_QWORD **)(v510 + 8));
          MEMORY[0x1CAA32FC0](v510, 0x1020C4062D53EE8);
        }
        v511 = *(void **)(v508 + 64);
        if (v511 != (void *)(v508 + 80))
          free(v511);
        if (*(_QWORD *)v508 != v508 + 16)
          free(*(void **)v508);
        MEMORY[0x1CAA32FC0](v508, 0x10A0C408DA535C6);
        v507 = *(_QWORD *)(v505 + 408);
      }
      v451 = v596;
      *(_QWORD *)(v507 + 8 * v506) = 0;
      v512 = *(int32x2_t **)(*(_QWORD *)(a1 + 272) + 288);
      v513 = v512[46];
      v514 = v512[48].u32[0];
      if ((_DWORD)v514)
      {
        LODWORD(v515) = (v514 - 1) & ((v504 >> 4) ^ (v504 >> 9));
        v516 = (uint64_t *)(*(_QWORD *)&v513 + 16 * v515);
        v517 = *v516;
        if (*v516 == v504)
          goto LABEL_806;
        v518 = 1;
        while (v517 != -4096)
        {
          v519 = v515 + v518++;
          v515 = v519 & (v514 - 1);
          v517 = *(_QWORD *)(*(_QWORD *)&v513 + 16 * v515);
          if (v517 == v504)
          {
            v516 = (uint64_t *)(*(_QWORD *)&v513 + 16 * v515);
            goto LABEL_806;
          }
        }
      }
      v516 = (uint64_t *)(*(_QWORD *)&v513 + 16 * v514);
LABEL_806:
      if (v516 != (uint64_t *)(*(_QWORD *)&v513 + 16 * v514))
      {
        v520 = v516[1] & 0xFFFFFFFFFFFFFFF8;
        *v516 = -8192;
        v512[47] = vadd_s32(v512[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v520 + 16) = 0;
      }
      v521 = v504;
      if ((*(_BYTE *)v504 & 4) == 0)
      {
        v521 = v504;
        if ((*(_WORD *)(v504 + 44) & 8) != 0)
        {
          v521 = v504;
          do
            v521 = *(_QWORD *)(v521 + 8);
          while ((*(_WORD *)(v521 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v504 + 24) + 40, v504, *(_QWORD *)(v521 + 8));
      ++v502;
    }
    while (v502 != v503);
    v502 = (uint64_t *)v633;
LABEL_823:
    if (v502 != v635)
      free(v502);
    LODWORD(v119) = v590;
    v450 = v581;
LABEL_827:
    v525 = (unsigned __int16 *)v450[7];
    if (v525 == v451)
    {
      v526 = 0;
    }
    else
    {
      v526 = 0;
      while (1)
      {
        v527 = (uint64_t)v525;
        if (!v525 || (v528 = v525, (*(_BYTE *)v525 & 4) == 0))
        {
          v528 = v525;
          if ((v525[22] & 8) != 0)
          {
            v528 = v525;
            do
              v528 = (unsigned __int16 *)*((_QWORD *)v528 + 1);
            while ((v528[22] & 8) != 0);
          }
        }
        v525 = (unsigned __int16 *)*((_QWORD *)v528 + 1);
        if (v525 == v451)
          break;
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, **(unsigned __int16 **)(v527 + 16)) & 1) != 0|| (*(_BYTE *)(*(_QWORD *)(v527 + 16) + 9) & 0x20) != 0)
        {
          v633 = v525;
          v529 = *(_QWORD *)(*(_QWORD *)(v527 + 24) + 32);
          if (v529)
          {
            v530 = *(_QWORD *)(v529 + 728);
            if (v530)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v530 + 32))(v530, v527);
            v531 = *(unsigned int *)(v527 + 40);
            if ((_DWORD)v531)
            {
              v532 = *(_QWORD *)(v527 + 32);
              v533 = *(_QWORD *)(v529 + 40);
              v534 = 32 * v531;
              do
              {
                if (!*(_BYTE *)v532)
                {
                  v535 = *(unsigned int *)(v532 + 4);
                  if ((v535 & 0x80000000) != 0)
                    v536 = (uint64_t *)(*(_QWORD *)(v533 + 24) + 16 * (v535 & 0x7FFFFFFF) + 8);
                  else
                    v536 = (uint64_t *)(*(_QWORD *)(v533 + 272) + 8 * v535);
                  v537 = *v536;
                  v539 = *(_QWORD *)(v532 + 16);
                  v538 = *(_QWORD *)(v532 + 24);
                  if (v532 != *v536)
                    v536 = (uint64_t *)(v539 + 24);
                  *v536 = v538;
                  if (v538)
                    v540 = v538;
                  else
                    v540 = v537;
                  *(_QWORD *)(v540 + 16) = v539;
                  *(_QWORD *)(v532 + 16) = 0;
                  *(_QWORD *)(v532 + 24) = 0;
                }
                v532 += 32;
                v534 -= 32;
              }
              while (v534);
            }
          }
          *(_QWORD *)(v527 + 24) = 0;
          v541 = *(unint64_t **)(v527 + 8);
          v542 = *(_QWORD *)v527 & 0xFFFFFFFFFFFFFFF8;
          *v541 = v542 | *v541 & 7;
          *(_QWORD *)(v542 + 8) = v541;
          *(_QWORD *)v527 &= 7uLL;
          *(_QWORD *)(v527 + 8) = 0;
          sub_1C49685A8((_QWORD *)a1, (unint64_t *)&v633, v527, *(_DWORD *)(*(_QWORD *)(v527 + 32) + 4));
          v543 = (unsigned __int16 *)v633;
          v544 = v450[5];
          *(_QWORD *)(v527 + 24) = v544;
          v545 = *(_QWORD *)(v544 + 32);
          v546 = *(unsigned int *)(v527 + 40);
          if ((_DWORD)v546)
          {
            v549 = *(_QWORD *)(v527 + 32);
            v550 = *(_QWORD *)(v545 + 40);
            v551 = 32 * v546;
            do
            {
              if (!*(_BYTE *)v549)
              {
                v552 = *(unsigned int *)(v549 + 4);
                if ((int)v552 >= 0)
                  v553 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v552);
                else
                  v553 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v552 & 0x7FFFFFFF) + 8);
                v554 = *v553;
                if (*v553)
                {
                  v555 = *(_QWORD *)(v554 + 16);
                  *(_QWORD *)(v554 + 16) = v549;
                  *(_QWORD *)(v549 + 16) = v555;
                  if ((*(_BYTE *)(v549 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v549 + 24) = v554;
                  }
                  else
                  {
                    *(_QWORD *)(v549 + 24) = 0;
                    v553 = (uint64_t *)(v555 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v549 + 16) = v549;
                  *(_QWORD *)(v549 + 24) = 0;
                }
                *v553 = v549;
              }
              v549 += 32;
              v551 -= 32;
            }
            while (v551);
          }
          v547 = *(_QWORD *)(v545 + 728);
          if (v547)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v547 + 24))(v547, v527);
          v548 = *(_QWORD *)v543 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v527 = v548 | *(_QWORD *)v527 & 7;
          *(_QWORD *)(v527 + 8) = v543;
          *(_QWORD *)(v548 + 8) = v527;
          *(_QWORD *)v543 = *(_QWORD *)v543 & 7 | v527;
          if (v543 != v525)
          {
            llvm::LiveIntervals::handleMove(*(llvm::LiveIntervals **)(a1 + 272), (llvm::MachineInstr *)v527, 0);
            v526 = 1;
          }
          LODWORD(v119) = v590;
        }
      }
    }
    LODWORD(v119) = v119 | v585 | v526;
    v450 = (_QWORD *)v450[1];
  }
  while (v450 != (_QWORD *)((char *)v562 + 320));
LABEL_875:
  if (v621 != v623)
    free(v621);
  v556 = v630;
  if ((_DWORD)v631)
  {
    v557 = (char *)v630 - 24;
    v558 = 32 * v631;
    do
    {
      v559 = *(_QWORD *)&v557[v558];
      if ((v559 & 4) != 0)
      {
        v560 = (void **)(v559 & 0xFFFFFFFFFFFFFFF8);
        if ((v559 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v560 != v560 + 2)
            free(*v560);
          MEMORY[0x1CAA32FC0](v560, 0x1080C40ED926357);
        }
      }
      v558 -= 32;
    }
    while (v558);
    v556 = v630;
  }
  if (v556 != v632)
    free(v556);
  if ((v624 & 1) == 0)
    MEMORY[0x1CAA32FB4](v625, 8);
  if (v603 >= 0x41 && v602)
    MEMORY[0x1CAA32F9C](v602, 0x1000C8000313F17);
  if (v605 >= 0x41 && v604)
    MEMORY[0x1CAA32F9C](v604, 0x1000C8000313F17);
  if (v607 >= 0x41 && v606)
    MEMORY[0x1CAA32F9C](v606, 0x1000C8000313F17);
  return v119 & 1;
}

uint64_t sub_1C496800C(uint64_t a1, int a2)
{
  return ((a2 - 4566) < 0x20) & (0xC0005FFF >> (a2 + 42));
}

uint64_t sub_1C4968030(uint64_t a1, int a2)
{
  return ((a2 - 4570) < 0xB) & (0x50Fu >> (a2 + 38));
}

uint64_t sub_1C4968050(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  BOOL v5;

  v2 = *(unsigned __int16 **)(a2 + 16);
  v3 = *v2;
  v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x10) != 0)
    return 1;
  else
    return v2[8] & 1;
}

BOOL sub_1C496809C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  unsigned int v4;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 16);
  v4 = **(unsigned __int16 **)(a2 + 16);
  if (v4 > 0x865)
  {
    if (v4 == 4578 || v4 == 4580)
      return 1;
    if (v4 == 2150)
      return *(_BYTE *)(v3 + 338) != 0;
  }
  else
  {
    if (v4 != 1100)
    {
      if (v4 != 2114)
        return result;
      return *(_BYTE *)(v3 + 338) != 0;
    }
    return *(_BYTE *)(v3 + 338) && *(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) == 7;
  }
  return result;
}

uint64_t sub_1C4968124(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 3) & 1;
}

uint64_t sub_1C4968134(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 4) & 1;
}

uint64_t sub_1C4968144(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 1) & 1;
}

BOOL sub_1C4968154(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  BOOL v5;

  v2 = *(unsigned __int16 **)(a2 + 16);
  v3 = *v2;
  v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  return !v5 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0;
}

uint64_t sub_1C49681A4(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2)+ 329);
}

__int16 ***sub_1C49681C8()
{
  return &off_1E7FA5F10;
}

__int16 ***sub_1C49681D4()
{
  return &off_1E7FA5F48;
}

BOOL sub_1C49681E0(uint64_t a1, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t sub_1C49681F0(uint64_t a1, int a2)
{
  if (a2 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_1C4968200(uint64_t a1, int a2)
{
  if (a2)
    return 2;
  else
    return 1;
}

uint64_t sub_1C4968210(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;

  result = 0;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0xFE4:
      if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) != 1)
        return 0;
      v4 = 4066;
      goto LABEL_12;
    case 0xFE5:
      if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) != 1)
        return 0;
      v4 = 4067;
      goto LABEL_12;
    case 0xFE6:
    case 0xFE7:
    case 0xFE8:
    case 0xFE9:
    case 0xFEA:
    case 0xFEC:
      return result;
    case 0xFEB:
      if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) != 1)
        return 0;
      v4 = 4072;
      goto LABEL_12;
    case 0xFED:
      if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) != 1)
        return 0;
      v4 = 4073;
LABEL_12:
      *a3 = v4;
      return 1;
    default:
      if (**(_WORD **)(a2 + 16) != 4578)
        return result;
      v4 = 4580;
      goto LABEL_12;
  }
}

uint64_t sub_1C49682C4(uint64_t a1, int a2)
{
  return ((a2 - 4066) < 8) & (0xC3u >> (a2 + 30));
}

uint64_t sub_1C49682E0(uint64_t a1, int a2)
{
  if (a2 == 4072 || a2 == 4066)
    return 4068;
  else
    return 4069;
}

void sub_1C49682F8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + 32);
  if (a2 == 4578)
  {
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(v4 + 64) & 0xFFF000FF | 0x100;
    if (a3 == 2)
    {
      v5 = *(_DWORD *)(v4 + 88);
      v6 = *(unsigned int *)(v4 + 68) + 1;
      *(_DWORD *)(v4 + 68) = v6;
      *(_DWORD *)(v4 + 88) = v5 + HIDWORD(v6);
    }
  }
  else
  {
    if (a3 == 1)
      v7 = (unsigned __int16)*(_QWORD *)(v4 + 80);
    else
      v7 = *(uint64_t *)(v4 + 80) >> 16;
    *(_QWORD *)(v4 + 80) = v7;
  }
}

uint64_t sub_1C4968360()
{
  return 0;
}

BOOL sub_1C4968368(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 176))(a1, **(unsigned __int16 **)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
  v9 = *(_BYTE *)(v8 + 318) == 0;
  if (*(_BYTE *)(v8 + 318) || (v7 & 1) != 0 || !sub_1C4968BEC((uint64_t)a1, a3))
    return v9;
  v10 = *(unsigned int *)(a3 + 40);
  if (!(_DWORD)v10)
    goto LABEL_13;
  v11 = 0;
  v12 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6);
  v13 = *(_QWORD *)(a1[37] + 40);
  v14 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  v15 = *(int **)(a3 + 32);
  while (1)
  {
    v16 = *v15;
    if (*v15 == 1 || !*v15 && (v16 & 0x1000000) != 0)
      goto LABEL_12;
    if ((v16 & 0x10000FF) == 0 && v15[1] == v14)
      break;
    ++v11;
LABEL_12:
    v15 += 8;
    if (!--v10)
      goto LABEL_13;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a1[33] + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16));
  if ((*(_DWORD *)(*(_QWORD *)(v20 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(_QWORD *)v19 + 24)
                   + *(_DWORD *)(v20 + 272) * ((*(_QWORD *)(v20 + 248) - *(_QWORD *)(v20 + 240)) >> 3))
                  + 4) & 0xFFFFFFF8) != 0x10
    && (*v15 & 0xFFF00) == 0)
  {
    v30 = v13 + 24 * v12;
    v31 = *(unsigned __int16 *)(v30 + 20);
    if (*(_WORD *)(v30 + 20))
    {
      v25 = (unsigned int *)(*(_QWORD *)(v8 + 152) + 12 * *(unsigned __int16 *)(v30 + 18));
      v26 = &v25[3 * v31];
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  v21 = v13 + 24 * v12;
  v22 = *(unsigned __int16 *)(v21 + 20);
  if (*(_WORD *)(v21 + 20))
  {
    v23 = *(_QWORD *)(v8 + 152);
    v24 = *(unsigned __int16 *)(v21 + 18);
    v25 = (unsigned int *)(v23 + 12 * *(unsigned __int16 *)(v21 + 18));
    v26 = &v25[3 * v22];
    v27 = (_DWORD *)(v23 + 12 * v24 + 8);
    v28 = 12 * v22;
    do
    {
      v29 = *(v27 - 2);
      if (v29 >= v11)
      {
        if (v29 > v11)
          break;
        if (!*(v27 - 1))
        {
          if ((*v27 & 0x80000000) == 0)
            break;
          v17 = 1;
          return v17 + v9;
        }
      }
      v27 += 3;
      v28 -= 12;
    }
    while (v28);
LABEL_28:
    do
    {
      if (*v25 >= v11)
      {
        if (*v25 > v11)
          goto LABEL_32;
        if (!v25[1])
          break;
      }
      v25 += 3;
    }
    while (v25 != v26);
    if (v25[2])
    {
LABEL_13:
      v17 = -1;
      return v17 + v9;
    }
  }
LABEL_32:
  v17 = 0;
  return v17 + v9;
}

uint64_t sub_1C49685A8(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t *v31;
  int v32;

  v8 = *a2;
  v32 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 176))(a1, **(unsigned __int16 **)(a3 + 16));
  v31 = (uint64_t *)a2;
  v9 = *(_QWORD *)(*a2 + 24);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*a1 + 328))(a1, a3, v8);
  v11 = 0;
  while (1)
  {
    v12 = v8;
    if (((*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 232))(a1, v8) & 1) != 0
      || *(_QWORD *)(v9 + 56) == v8)
    {
      return 0;
    }
    v13 = *(_QWORD *)v8;
    v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v14 = v12;
    if ((v13 & 4) == 0)
    {
      v14 = v12;
      if ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        v14 = v12;
        do
          v14 = *(_QWORD *)(v14 + 8);
        while ((*(_WORD *)(v14 + 44) & 8) != 0);
      }
    }
    v15 = *(_QWORD *)(v14 + 8);
    v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 200))(a1, v12);
    v17 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 200))(a1, v8);
    if (v32 && ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, v12) ^ 1 | v17) != 1)
      goto LABEL_48;
    if (v10)
    {
      *v31 = v12;
      goto LABEL_17;
    }
    if (sub_1C4968BEC((uint64_t)a1, v8))
    {
      if (sub_1C4968BEC((uint64_t)a1, v12))
      {
        v20 = *(_QWORD *)(v8 + 32);
        if (!*(_BYTE *)v20
          && (*(_WORD *)(*(_QWORD *)(a1[37] + 40) + 24 * *(unsigned __int16 *)(*(_QWORD *)(v8 + 16) + 6) + 8) & 0x1FFF) == 1)
        {
          v21 = *(unsigned int *)(v12 + 40);
          if (v21 >= 2)
            break;
        }
      }
    }
LABEL_37:
    if ((sub_1C4968BEC((uint64_t)a1, v8) & v16) == 1 && v15 != v9 + 48)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, v15))
      {
        v25 = *(_QWORD *)(v8 + 32);
        if (!*(_BYTE *)v25)
        {
          v26 = *(unsigned int *)(v15 + 40);
          if (v26 >= 2)
          {
            v27 = *(_DWORD *)(v25 + 4);
            v28 = v26 - 1;
            v29 = (_DWORD *)(*(_QWORD *)(v15 + 32) + 36);
            while (*((_BYTE *)v29 - 4) || *v29 != v27)
            {
              v29 += 8;
              if (!--v28)
                goto LABEL_17;
            }
            goto LABEL_48;
          }
        }
      }
    }
LABEL_17:
    if (a4)
    {
      v18 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v18)
      {
        v19 = (_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
        while (*((_BYTE *)v19 - 4) || *v19 != a4)
        {
          v19 += 8;
          if (!--v18)
            goto LABEL_23;
        }
        return 0;
      }
    }
LABEL_23:
    if (v10)
      --v10;
    else
      v10 = 0;
    if (++v11 == 6)
      return 0;
  }
  v22 = *(_DWORD *)(v20 + 4);
  v23 = v21 - 1;
  v24 = (_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
  while (*((_BYTE *)v24 - 4) || *v24 != v22)
  {
    v24 += 8;
    if (!--v23)
      goto LABEL_37;
  }
LABEL_48:
  *v31 = v12;
  return 1;
}

unint64_t *sub_1C49688A0(unint64_t *a1, char *__dst)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = __dst;
  v3 = *a1;
  if ((*a1 & 4) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v5 = __dst + 8;
      v6 = *(unsigned int *)(v4 + 8);
      v7 = *(_QWORD *)v4 + 8 * v6;
      if ((char *)v7 != v2 + 8)
      {
        memmove(v2, v5, v7 - (_QWORD)(v2 + 8));
        LODWORD(v6) = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(v4 + 8) = v6 - 1;
    }
  }
  else
  {
    if (a1 == (unint64_t *)__dst)
    {
      v3 = 0;
      *(_QWORD *)__dst = 0;
    }
    return &a1[v3 > 7];
  }
  return (unint64_t *)v2;
}

_QWORD *sub_1C4968920(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  result = (_QWORD *)sub_1C4968B24((int *)a1, a2);
  if (result == (_QWORD *)(*(_QWORD *)(a1 + 520) + 32 * *(unsigned int *)(a1 + 528)))
    return result;
  v4 = result;
  result = (_QWORD *)sub_1C4968C7C(a1, result);
  v5 = *(_QWORD *)(a1 + 520);
  v6 = *(unsigned int *)(a1 + 528);
  v7 = (_QWORD *)(v5 + 32 * v6);
  v8 = v4 + 4;
  if (v4 + 4 != v7)
  {
    do
    {
      *(v8 - 4) = *v8;
      result = sub_1C484FAD8(v8 - 3, v8 + 1);
      *(v8 - 2) = v8[2];
      *((_DWORD *)v8 - 2) = *((_DWORD *)v8 + 6);
      v8 += 4;
    }
    while (v8 != v7);
    LODWORD(v6) = *(_DWORD *)(a1 + 528);
    v5 = *(_QWORD *)(a1 + 520);
  }
  v9 = (v6 - 1);
  *(_DWORD *)(a1 + 528) = v9;
  v10 = *(_QWORD *)(v5 + 32 * v9 + 8);
  if ((v10 & 4) != 0)
  {
    v11 = (void **)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v11 != v11 + 2)
        free(*v11);
      result = (_QWORD *)MEMORY[0x1CAA32FC0](v11, 0x1080C40ED926357);
      v5 = *(_QWORD *)(a1 + 520);
      v9 = *(unsigned int *)(a1 + 528);
    }
  }
  if ((_QWORD *)(v5 + 32 * v9) == v4)
    return result;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u)
  {
    if (v12)
    {
      v19 = a1 + 8;
      v20 = 32;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(unsigned int *)(a1 + 16);
    }
    v15 = v19 + 16 * v20;
    v13 = v15;
    if (v12)
    {
LABEL_16:
      v16 = a1 + 8;
      v17 = 32;
LABEL_27:
      v14 = v13;
      goto LABEL_28;
    }
LABEL_26:
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(unsigned int *)(a1 + 16);
    goto LABEL_27;
  }
  if ((v12 & 1) != 0)
  {
    v13 = a1 + 520;
    v14 = a1 + 8;
LABEL_11:
    v15 = v14;
    while ((*(_QWORD *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v15 += 16;
      if (v15 == v13)
      {
        v15 = v13;
        break;
      }
    }
    if ((*(_DWORD *)a1 & 1) != 0)
      goto LABEL_16;
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v13 = v14 + 16 * v18;
    goto LABEL_11;
  }
  v17 = 0;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = v15;
LABEL_28:
  v21 = v16 + 16 * v17;
  if (v15 != v21)
  {
    v22 = ((uint64_t)v4 - v5) >> 5;
    do
    {
      v23 = *(unsigned int *)(v15 + 8);
      if (v22 < v23)
        *(_DWORD *)(v15 + 8) = v23 - 1;
      v24 = v15 + 16;
      v15 = v14;
      if (v24 != v14)
      {
        v15 = v24;
        while ((*(_QWORD *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 16;
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v21);
  }
  return result;
}

uint64_t sub_1C4968B24(int *a1, uint64_t a2)
{
  int *v2;
  int v3;
  int v4;
  int *v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;

  v2 = a1 + 2;
  v3 = *a1;
  if ((*a1 & 1) != 0)
  {
    v4 = 32;
    v5 = a1 + 2;
  }
  else
  {
    v5 = (int *)*((_QWORD *)a1 + 1);
    v4 = a1[4];
    if (!v4)
    {
      v7 = 0;
      goto LABEL_10;
    }
  }
  v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = &v5[4 * v7];
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 == a2)
    goto LABEL_11;
  v10 = 1;
  while (v9 != -4096)
  {
    v11 = v7 + v10++;
    v7 = v11 & v6;
    v9 = *(_QWORD *)&v5[4 * v7];
    if (v9 == a2)
      goto LABEL_10;
  }
  if ((v3 & 1) != 0)
  {
    v7 = 32;
    v5 = a1 + 2;
  }
  else
  {
    v5 = (int *)*((_QWORD *)a1 + 1);
    v7 = a1[4];
  }
LABEL_10:
  v8 = &v5[4 * v7];
LABEL_11:
  if ((v3 & 1) != 0)
  {
    v12 = 32;
  }
  else
  {
    v2 = (int *)*((_QWORD *)a1 + 1);
    v12 = a1[4];
  }
  if (&v2[4 * v12] == v8)
    v13 = (unsigned int *)(a1 + 132);
  else
    v13 = (unsigned int *)(v8 + 2);
  return *((_QWORD *)a1 + 65) + 32 * *v13;
}

uint64_t sub_1C4968BEC(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  BOOL v5;
  uint64_t result;

  v2 = *(unsigned __int16 **)(a2 + 16);
  v3 = *v2;
  v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x2010) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  if ((_DWORD)result)
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2) ^ 1;
  return result;
}

uint64_t sub_1C4968C7C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 32;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(v2 + 16 * v5);
  v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_10:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 16 * v5);
    if (*a2 == v7)
    {
      v6 = (uint64_t *)(v2 + 16 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

_QWORD *sub_1C4968D14(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 32;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1C4968EE8(a1, v8);
    v20 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v21 = 32;
LABEL_24:
      v9 = *(_DWORD *)a1 & 1;
      v22 = v21 - 1;
      v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
      a4 = (_QWORD *)(v20 + 16 * v23);
      v24 = *a4;
      if (*a3 == *a4)
        goto LABEL_6;
      v16 = 0;
      v25 = 1;
      while (v24 != -4096)
      {
        if (v16)
          v26 = 0;
        else
          v26 = v24 == -8192;
        if (v26)
          v16 = a4;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        a4 = (_QWORD *)(v20 + 16 * v23);
        v24 = *a4;
        if (*a3 == *a4)
          goto LABEL_6;
      }
      goto LABEL_34;
    }
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v20 = *(_QWORD *)(a1 + 8);
      goto LABEL_24;
    }
LABEL_41:
    v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1C4968EE8(a1, 2 * v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 32;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
      goto LABEL_41;
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (_QWORD *)(v11 + 16 * v14);
  v15 = *a4;
  if (*a3 == *a4)
    goto LABEL_6;
  v16 = 0;
  v17 = 1;
  while (v15 != -4096)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v15 == -8192;
    if (v18)
      v16 = a4;
    v19 = v14 + v17++;
    v14 = v19 & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
  }
LABEL_34:
  if (v16)
    a4 = v16;
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4968EE8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[65];

  v14[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C496906C((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C496906C((int *)a1, v14, v9);
}

int *sub_1C496906C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 130;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 32;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v9[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4969174()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Use scaling rematerializations limit (100000 virtual registers) or user a supplied value that grows w"
                   "ith program size beyond that value";
  *((_QWORD *)&v3 + 1) = 135;
  v1 = 100000;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7EB750, "agx2-rematerialize-large-programs", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7EB750, &dword_1C475E000);
}

uint64_t sub_1C49691FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t j;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44[4];
  __int16 v45;

  v2 = operator new();
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E7FA66C8;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 144) = 1;
  memset_pattern16((void *)(v3 + 152), &unk_1C6612680, 0x100uLL);
  *(_QWORD *)(v3 + 408) = v3 + 424;
  *(_QWORD *)(v3 + 416) = 0x2000000000;
  *(_QWORD *)(v3 + 696) = 1;
  for (i = 704; i != 832; i += 16)
    *(_QWORD *)(v3 + i) = -4096;
  v44[0] = (uint64_t)"AvailableMathQ";
  v45 = 259;
  *(_DWORD *)(v3 + 832) = 1;
  llvm::Twine::str((llvm::Twine *)v44, (_QWORD *)(v3 + 840));
  *(_QWORD *)(v3 + 880) = 0;
  *(_OWORD *)(v3 + 864) = 0u;
  v42 = "AvailableMoveQ";
  v43 = 259;
  *(_DWORD *)(v3 + 888) = 2;
  llvm::Twine::str((llvm::Twine *)&v42, (_QWORD *)(v3 + 896));
  *(_QWORD *)(v3 + 936) = 0;
  *(_OWORD *)(v3 + 920) = 0u;
  v40 = "AvailableImmQ";
  v41 = 259;
  *(_DWORD *)(v3 + 944) = 4;
  llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v3 + 952));
  *(_QWORD *)(v3 + 992) = 0;
  *(_OWORD *)(v3 + 976) = 0u;
  v38 = "AvailableITRQ";
  v39 = 259;
  *(_DWORD *)(v3 + 1000) = 8;
  llvm::Twine::str((llvm::Twine *)&v38, (_QWORD *)(v3 + 1008));
  *(_QWORD *)(v3 + 1048) = 0;
  *(_OWORD *)(v3 + 1032) = 0u;
  v36 = "AvailableAsyncQ";
  v37 = 259;
  *(_DWORD *)(v3 + 1056) = 16;
  llvm::Twine::str((llvm::Twine *)&v36, (_QWORD *)(v3 + 1064));
  *(_QWORD *)(v3 + 1104) = 0;
  *(_OWORD *)(v3 + 1088) = 0u;
  v34 = "AvailableLoadLikeQ";
  v35 = 259;
  *(_DWORD *)(v3 + 1112) = 32;
  llvm::Twine::str((llvm::Twine *)&v34, (_QWORD *)(v3 + 1120));
  *(_QWORD *)(v3 + 1160) = 0;
  *(_OWORD *)(v3 + 1144) = 0u;
  v32 = "AvailableStoreLikeQ";
  v33 = 259;
  *(_DWORD *)(v3 + 1168) = 64;
  llvm::Twine::str((llvm::Twine *)&v32, (_QWORD *)(v3 + 1176));
  *(_QWORD *)(v3 + 1216) = 0;
  *(_OWORD *)(v3 + 1200) = 0u;
  v30 = "AvailableMovMskQ";
  v31 = 259;
  *(_DWORD *)(v3 + 1224) = 128;
  llvm::Twine::str((llvm::Twine *)&v30, (_QWORD *)(v3 + 1232));
  *(_QWORD *)(v3 + 1272) = 0;
  *(_OWORD *)(v3 + 1256) = 0u;
  v28 = "AvailableOtherQ";
  v29 = 259;
  *(_DWORD *)(v3 + 1280) = 256;
  llvm::Twine::str((llvm::Twine *)&v28, (_QWORD *)(v3 + 1288));
  v5 = 0;
  *(_QWORD *)(v3 + 1328) = 0;
  *(_OWORD *)(v3 + 1312) = 0u;
  *(_QWORD *)(v3 + 1336) = v3 + 1368;
  *(_QWORD *)(v3 + 1344) = v3 + 1368;
  *(_QWORD *)(v3 + 1352) = 8;
  *(_DWORD *)(v3 + 1360) = 0;
  *(_QWORD *)(v3 + 1432) = v3 + 1464;
  *(_QWORD *)(v3 + 1440) = v3 + 1464;
  *(_QWORD *)(v3 + 1448) = 8;
  *(_DWORD *)(v3 + 1456) = 0;
  *(_OWORD *)(v3 + 1528) = 0u;
  *(_DWORD *)(v3 + 1544) = 0;
  *(_OWORD *)(v3 + 1552) = 0u;
  *(_OWORD *)(v3 + 1568) = 0u;
  *(_OWORD *)(v3 + 1584) = 0u;
  *(_QWORD *)(v3 + 1600) = v3 + 1616;
  *(_QWORD *)(v3 + 1608) = 0x1000000000;
  do
  {
    v6 = v3 + v5;
    *(_QWORD *)(v6 + 1680) = v3 + v5 + 1696;
    *(_QWORD *)(v6 + 1688) = 0x1000000000;
    v5 += 80;
  }
  while (v5 != 160);
  *(_QWORD *)(v3 + 1840) = v3 + 1872;
  *(_QWORD *)(v3 + 1848) = v3 + 1872;
  *(_QWORD *)(v3 + 1856) = 32;
  *(_DWORD *)(v3 + 1864) = 0;
  *(_QWORD *)(v3 + 2128) = v3 + 2160;
  *(_QWORD *)(v3 + 2136) = v3 + 2160;
  *(_QWORD *)(v3 + 2144) = 16;
  *(_DWORD *)(v3 + 2152) = 0;
  *(_OWORD *)(v3 + 2288) = 0u;
  *(_OWORD *)(v3 + 2304) = 0u;
  *(_DWORD *)(v3 + 2320) = 1065353216;
  *(_OWORD *)(v3 + 2328) = 0u;
  *(_OWORD *)(v3 + 2344) = 0u;
  *(_DWORD *)(v3 + 2360) = 1065353216;
  *(_QWORD *)(v3 + 2368) = 1;
  v7 = 2376;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(v3 + v7) = v8;
    v7 += 24;
  }
  while (v7 != 3144);
  *(_OWORD *)(v3 + 3144) = xmmword_1C6612660;
  *(_QWORD *)(v3 + 3160) = 0x400000008ELL;
  *(_QWORD *)(v3 + 3168) = 0;
  *(_BYTE *)(v3 + 3232) = 0;
  *(_BYTE *)(v3 + 3236) = 0;
  *(_DWORD *)(v3 + 3248) = 0;
  *(_BYTE *)(v3 + 3252) = 0;
  *(_QWORD *)(v3 + 3272) = 1;
  for (j = 3280; j != 3344; j += 16)
    *(_QWORD *)(v3 + j) = -4096;
  *(_OWORD *)(v3 + 3216) = xmmword_1C6612670;
  *(_QWORD *)(v3 + 3240) = 0x3F1612063F545E90;
  *(_DWORD *)(v3 + 3256) = 100;
  v44[0] = v3;
  v10 = sub_1C4838D9C((llvm::ScheduleDAGInstrs *)v2, a1, v44);
  v11 = v44[0];
  v44[0] = 0;
  if (v11)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v11 + 16))(v11, v10);
  *(_QWORD *)v2 = &off_1E7FA6630;
  v12 = (_QWORD *)operator new();
  *v12 = &off_1E7FA6760;
  v27 = v12;
  v13 = *(_QWORD **)(v2 + 2664);
  if ((unint64_t)v13 < *(_QWORD *)(v2 + 2672))
  {
    *v13 = v12;
    *(_QWORD *)(v2 + 2664) = v13 + 1;
    v27 = 0;
  }
  else
  {
    v14 = sub_1C483904C((char **)(v2 + 2656), (uint64_t *)&v27);
    v15 = (uint64_t)v27;
    *(_QWORD *)(v2 + 2664) = v14;
    v27 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  }
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E7FA6790;
  v26 = v16;
  v17 = *(_QWORD **)(v2 + 2664);
  if ((unint64_t)v17 < *(_QWORD *)(v2 + 2672))
  {
    *v17 = v16;
    *(_QWORD *)(v2 + 2664) = v17 + 1;
    v26 = 0;
  }
  else
  {
    v18 = sub_1C483904C((char **)(v2 + 2656), (uint64_t *)&v26);
    v19 = (uint64_t)v26;
    *(_QWORD *)(v2 + 2664) = v18;
    v26 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  }
  v20 = (_QWORD *)operator new();
  *v20 = &off_1E7FA67C0;
  v25 = v20;
  v21 = *(_QWORD **)(v2 + 2664);
  if ((unint64_t)v21 < *(_QWORD *)(v2 + 2672))
  {
    *v21 = v20;
    *(_QWORD *)(v2 + 2664) = v21 + 1;
  }
  else
  {
    v22 = sub_1C483904C((char **)(v2 + 2656), (uint64_t *)&v25);
    v23 = (uint64_t)v25;
    *(_QWORD *)(v2 + 2664) = v22;
    v25 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  }
  return v2;
}

void sub_1C49697A8(llvm::ScheduleDAGMILive *a1)
{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49697CC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t j;
  uint64_t v12;
  void *v13;
  void *v14;

  *(_QWORD *)a1 = &off_1E7FA66C8;
  if ((*(_BYTE *)(a1 + 3272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 3280), 8);
  if ((*(_BYTE *)(a1 + 2368) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2376), 8);
  sub_1C483D61C(a1 + 2328);
  sub_1C483D668(a1 + 2288);
  v2 = *(void **)(a1 + 2136);
  if (v2 != *(void **)(a1 + 2128))
    free(v2);
  v3 = *(void **)(a1 + 1848);
  if (v3 != *(void **)(a1 + 1840))
    free(v3);
  for (i = 0; i != -160; i -= 80)
  {
    v5 = *(void **)(a1 + i + 1760);
    if ((void *)(a1 + i + 1776) != v5)
      free(v5);
  }
  v6 = *(void **)(a1 + 1600);
  if (v6 != (void *)(a1 + 1616))
    free(v6);
  v7 = *(void **)(a1 + 1576);
  if (v7)
  {
    *(_QWORD *)(a1 + 1584) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1552);
  if (v8)
  {
    *(_QWORD *)(a1 + 1560) = v8;
    operator delete(v8);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1528), 8);
  v9 = *(void **)(a1 + 1440);
  if (v9 != *(void **)(a1 + 1432))
    free(v9);
  v10 = *(void **)(a1 + 1344);
  if (v10 != *(void **)(a1 + 1336))
    free(v10);
  for (j = 0; j != -504; j -= 56)
  {
    v12 = a1 + j;
    v13 = *(void **)(a1 + j + 1312);
    if (v13)
    {
      *(_QWORD *)(v12 + 1320) = v13;
      operator delete(v13);
    }
    if (*(char *)(v12 + 1311) < 0)
      operator delete(*(void **)(a1 + j + 1288));
  }
  if ((*(_BYTE *)(a1 + 696) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 704), 8);
  v14 = *(void **)(a1 + 408);
  if (v14 != (void *)(a1 + 424))
    free(v14);
  if ((*(_BYTE *)(a1 + 144) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 152), 4);
  return a1;
}

void sub_1C496996C(uint64_t a1)
{
  sub_1C49697CC(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4969990()
{
  return 1;
}

void sub_1C4969998(uint64_t a1, int8x16_t *a2)
{
  int64x2_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int64x2_t *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _WORD *v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  _DWORD *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int8x16_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  llvm::ScheduleDAGMILive *v78;
  unsigned __int16 *v79;
  int v80;
  BOOL v81;
  BOOL v82;
  _BOOL4 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned __int16 *v93;
  uint64_t v94;
  int v95;
  _BOOL4 v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  void *v121;
  unint64_t v122;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  _QWORD *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  unint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  unint64_t v161;
  uint64_t v163;
  int v164;
  unsigned __int16 *v165;
  _BOOL4 v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _DWORD *v172;
  unint64_t v173;
  float v174;
  float v175;
  _BOOL8 v176;
  unint64_t v177;
  unint64_t v178;
  int8x8_t prime;
  uint64_t *v180;
  void *v181;
  void *v182;
  uint64_t v183;
  uint64_t **v184;
  unint64_t v185;
  uint8x8_t v186;
  unint64_t v187;
  uint8x8_t v188;
  uint64_t v189;
  uint64_t v190;
  llvm *UnderlyingObject;
  uint64_t *i;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  _QWORD *v196;
  uint8x8_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  int v202;
  uint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  _BOOL4 v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  _QWORD *v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  int64x2_t *v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  _QWORD *v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  int64x2_t *v242;
  int64x2_t *v243;
  int64x2_t v244;
  int v245;
  int v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  int64x2_t *v254;
  uint64_t v255;
  int64x2_t v256;
  uint64_t ***v257;
  _DWORD *v258;
  uint64_t v259;
  uint64_t v260;
  int8x16_t *v261;
  _BOOL4 v262;
  _BOOL4 v263;
  _QWORD *v264;
  _QWORD *v265;
  int v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  _BOOL4 v270;
  uint64_t *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  __int128 v276;
  uint64_t v277;
  int v278;
  _BYTE v279[256];
  void *v280;
  uint64_t v281;
  _QWORD v282[16];
  char *v283;
  uint64_t v284;
  _QWORD v285[10];

  v285[8] = *MEMORY[0x1E0C80C00];
  v4 = (int64x2_t *)(a1 + 2376);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (char *)a2 + 632;
  *(int8x16_t *)(a1 + 24) = vextq_s8(a2[1], a2[1], 8uLL);
  v5 = a2->i64[1];
  *(_QWORD *)(a1 + 40) = v5;
  v6 = (_QWORD *)a2[2].i64[0];
  *(_QWORD *)(a1 + 48) = v6[5];
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*v6 + 40) + 272;
  *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = *(_QWORD **)(a1 + 24);
  v8 = *(_QWORD *)(v7[30] + 48);
  v9 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 320))(v7, v8);
  v10 = (int64x2_t *)(a1 + 3144);
  *(_DWORD *)(a1 + 3144) = *v9;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 312))(*(_QWORD *)(a1 + 24), a2[2].i64[0]);
  if (v9[1] != -1)
  {
    v12 = v11;
    v13 = v9 + 2;
    do
    {
      v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 312))(*(_QWORD *)(a1 + 24), a2[2].i64[0]);
      if (v14 > v12)
      {
        v10->i32[0] = *(v13 - 1);
        v12 = v14;
      }
      v15 = *v13++;
    }
    while (v15 != -1);
  }
  v16 = (int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 280))(*(_QWORD *)(a1 + 24), v8);
  v17 = 0;
  v18 = *v16;
  *(_DWORD *)(a1 + 3148) = *v16;
  v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 3128) + 4 * *(unsigned int *)(a1 + 3144));
  *(_BYTE *)(a1 + 3251) = v19 >= 24 * v18;
  *(_BYTE *)(a1 + 3252) = v19 >= v18 << 7;
  do
  {
    *(_QWORD *)(a1 + v17 + 872) = *(_QWORD *)(a1 + v17 + 864);
    v17 += 56;
  }
  while (v17 != 504);
  *(_DWORD *)(a1 + 3152) = 0;
  v20 = (_QWORD *)(a1 + 1528);
  v21 = *(_DWORD *)(a1 + 1536);
  v261 = a2;
  v267 = (uint64_t *)v4;
  if (v21)
  {
    v237 = *(_DWORD *)(a1 + 1544);
    if (v237 <= 4 * v21 || v237 < 0x41)
    {
      if (!v237)
      {
LABEL_355:
        *(_QWORD *)(a1 + 1536) = 0;
        goto LABEL_10;
      }
LABEL_353:
      v238 = (_QWORD *)*v20;
      v239 = 16 * v237;
      do
      {
        *v238 = -4096;
        v238 += 2;
        v239 -= 16;
      }
      while (v239);
      goto LABEL_355;
    }
    v245 = 1 << (33 - __clz(v21 - 1));
    if (v245 <= 64)
      v246 = 64;
    else
      v246 = v245;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1540))
      goto LABEL_10;
    v237 = *(_DWORD *)(a1 + 1544);
    if (v237 <= 0x40)
    {
      if (!v237)
        goto LABEL_355;
      goto LABEL_353;
    }
    v246 = 0;
  }
  if (v246 == v237)
  {
    *(_QWORD *)(a1 + 1536) = 0;
    v247 = *(_QWORD **)(a1 + 1528);
    v248 = 16 * v237;
    do
    {
      *v247 = -4096;
      v247 += 2;
      v248 -= 16;
    }
    while (v248);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v20, 8);
    if (v246)
    {
      v249 = (4 * v246 / 3u + 1) | ((unint64_t)(4 * v246 / 3u + 1) >> 1);
      v250 = v249 | (v249 >> 2) | ((v249 | (v249 >> 2)) >> 4);
      LODWORD(v250) = (((v250 | (v250 >> 8)) >> 16) | v250 | (v250 >> 8)) + 1;
      *(_DWORD *)(a1 + 1544) = v250;
      v251 = operator new(16 * v250, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 1528) = v251;
      *(_QWORD *)(a1 + 1536) = 0;
      v252 = *(unsigned int *)(a1 + 1544);
      if ((_DWORD)v252)
      {
        v253 = 16 * v252;
        do
        {
          *v251 = -4096;
          v251 += 2;
          v253 -= 16;
        }
        while (v253);
      }
    }
    else
    {
      *v20 = 0;
      *(_QWORD *)(a1 + 1536) = 0;
      *(_DWORD *)(a1 + 1544) = 0;
    }
  }
LABEL_10:
  v22 = *(_DWORD *)(a1 + 2368);
  if (v22 <= 1 && !*(_DWORD *)(a1 + 2372))
    goto LABEL_12;
  if ((v22 & 1) != 0)
  {
    v234 = (int64x2_t *)(a1 + 2376);
    goto LABEL_343;
  }
  v235 = *(unsigned int *)(a1 + 2384);
  if (((2 * v22) & 0xFFFFFFFC) >= v235 || v235 < 0x41)
  {
    if (!(_DWORD)v235)
    {
LABEL_345:
      *(_DWORD *)(a1 + 2368) = v235;
      *(_DWORD *)(a1 + 2372) = 0;
      goto LABEL_12;
    }
    v234 = *(int64x2_t **)(a1 + 2376);
    v10 = (int64x2_t *)((char *)v234 + 24 * v235);
    do
    {
LABEL_343:
      v234->i64[0] = -4096;
      v234->i64[1] = -4096;
      v234 = (int64x2_t *)((char *)v234 + 24);
    }
    while (v234 != v10);
    LODWORD(v235) = *(_DWORD *)(a1 + 2368) & 1;
    goto LABEL_345;
  }
  v240 = 1 << (33 - __clz((v22 >> 1) - 1));
  if (v22 >= 2)
    v241 = v240;
  else
    v241 = 0;
  if ((_DWORD)v241 == (_DWORD)v235)
  {
    *(_QWORD *)(a1 + 2368) = 0;
    v254 = *(int64x2_t **)(a1 + 2376);
    v255 = 24 * v235;
    v256 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v254 = v256;
      v254 = (int64x2_t *)((char *)v254 + 24);
      v255 -= 24;
    }
    while (v255);
  }
  else
  {
    MEMORY[0x1CAA32FB4](v4->i64[0], 8);
    if (v241 > 0x20)
    {
      *(_DWORD *)(a1 + 2368) &= ~1u;
      v243 = (int64x2_t *)operator new(24 * v241, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 2376) = v243;
      *(_QWORD *)(a1 + 2384) = v241;
      v81 = (*(_DWORD *)(a1 + 2368) & 1) == 0;
      *(_DWORD *)(a1 + 2368) &= 1u;
      *(_DWORD *)(a1 + 2372) = 0;
      if (v81)
      {
        v10 = (int64x2_t *)((char *)v243 + 24 * v241);
        v242 = v243;
      }
      else
      {
        v242 = v4;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 2368) = 1;
      v242 = v4;
    }
    v244 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v242 = v244;
      v242 = (int64x2_t *)((char *)v242 + 24);
    }
    while (v242 != v10);
  }
LABEL_12:
  v23 = *(_DWORD *)(a1 + 144);
  if (v23 <= 1 && !*(_DWORD *)(a1 + 148))
    goto LABEL_18;
  if ((v23 & 1) != 0)
  {
    v24 = (void *)(a1 + 152);
    v25 = 256;
LABEL_16:
    memset_pattern16(v24, &unk_1C6612680, v25);
    LODWORD(v26) = *(_DWORD *)(a1 + 144) & 1;
    goto LABEL_17;
  }
  v236 = (2 * v23) & 0xFFFFFFFC;
  v26 = *(unsigned int *)(a1 + 160);
  if (v236 < v26 && v26 >= 0x41)
  {
    sub_1C6148154((unsigned int *)(a1 + 144));
    goto LABEL_18;
  }
  if ((_DWORD)v26)
  {
    v24 = *(void **)(a1 + 152);
    v25 = 8 * v26;
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(a1 + 144) = v26;
  *(_DWORD *)(a1 + 148) = 0;
LABEL_18:
  v27 = 0;
  *(_DWORD *)(a1 + 416) = 0;
  do
  {
    v28 = a1 + v27;
    *(_DWORD *)(a1 + v27 + 1688) = 0;
    v29 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 48);
    if ((_DWORD)v29)
    {
      if (*(_DWORD *)(v28 + 1692) < v29)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v28 + 1680, a1 + v27 + 1696, v29, 4);
        v30 = *(unsigned int *)(v28 + 1688);
      }
      else
      {
        v30 = 0;
      }
      if (v29 != v30)
        bzero((void *)(*(_QWORD *)(v28 + 1680) + 4 * v30), 4 * (v29 - v30));
      *(_DWORD *)(v28 + 1688) = v29;
    }
    v27 += 80;
  }
  while (v27 != 160);
  *(_DWORD *)(a1 + 3156) = 0;
  v283 = (char *)v285;
  v284 = 0x1000000000;
  v271 = (uint64_t *)(a1 + 1600);
  *(_DWORD *)(a1 + 1608) = 0;
  v31 = *(_QWORD *)(a1 + 16);
  v32 = *(unsigned int *)(v31 + 48);
  if ((_DWORD)v32)
  {
    if (*(_DWORD *)(a1 + 1612) < v32)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v271, a1 + 1616, *(unsigned int *)(v31 + 48), 4);
      v33 = *(unsigned int *)(a1 + 1608);
    }
    else
    {
      v33 = 0;
    }
    if (v32 != v33)
      bzero((void *)(*v271 + 4 * v33), 4 * (v32 - v33));
    *(_DWORD *)(a1 + 1608) = v32;
    v31 = *(_QWORD *)(a1 + 16);
    v34 = *(unsigned int *)(v31 + 48);
    LODWORD(v284) = 0;
    if ((_DWORD)v34)
    {
      if (HIDWORD(v284) < v34)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v283, (uint64_t)v285, v34, 4);
        v35 = v284;
      }
      else
      {
        v35 = 0;
      }
      if (v34 != v35)
        bzero(&v283[4 * v35], 4 * (v34 - v35));
      LODWORD(v284) = v34;
      v31 = *(_QWORD *)(a1 + 16);
    }
  }
  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(_BYTE **)(a1 + 64);
  v38 = sub_1C4885524(20, 244, v37);
  v39 = *(_QWORD *)(v36 + 8);
  v40 = *(unsigned __int16 *)(v39 + 48 * v38 + 6);
  v41 = sub_1C4885524(6, 385, v37);
  v42 = *(unsigned __int16 *)(v39 + 219750);
  v43 = *(unsigned __int16 *)(v39 + 195606);
  v44 = *(_QWORD *)(v31 + 40);
  v45 = v44 + 24 * v40;
  v46 = v44 + 24 * *(unsigned __int16 *)(v39 + 48 * v41 + 6);
  *(_QWORD *)(a1 + 72) = v45;
  *(_QWORD *)(a1 + 80) = v46;
  v47 = v44 + 24 * v42;
  v48 = v44 + 24 * v43;
  *(_QWORD *)(a1 + 88) = v47;
  *(_QWORD *)(a1 + 96) = v48;
  v269 = v31;
  v49 = *(_QWORD *)(*(_QWORD *)(v31 + 176) + 136);
  *(_DWORD *)(a1 + 104) = *(unsigned __int16 *)(v49 + 4 * *(unsigned __int16 *)(v48 + 10));
  *(_DWORD *)(a1 + 108) = *(unsigned __int16 *)(v49 + 4 * *(unsigned __int16 *)(v47 + 10));
  *(_DWORD *)(a1 + 112) = *(unsigned __int16 *)(v49 + 4 * *(unsigned __int16 *)(v46 + 10));
  *(_DWORD *)(a1 + 116) = *(unsigned __int16 *)(v49 + 4 * *(unsigned __int16 *)(v45 + 10));
  v50 = *(_QWORD *)(a1 + 8);
  v51 = *(_QWORD *)(v50 + 48);
  v273 = *(_QWORD *)(v50 + 56);
  if (v51 == v273)
    goto LABEL_54;
  do
  {
    v54 = *(_WORD **)(v51 + 24);
    if (!v54)
    {
      v55 = *(_QWORD *)(a1 + 8);
      v54 = (_WORD *)(*(_QWORD *)(v55 + 672)
                    + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) + 16) + 6));
      if ((v54[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 808) + 200))(*(_QWORD *)(v55 + 808));
          v53 = *(_QWORD *)(v55 + 672);
        }
        while ((*(_WORD *)(v53 + 24 * v52 + 8) & 0x1FFF) == 0x1FFE);
        v54 = (_WORD *)(v53 + 24 * v52);
        v269 = *(_QWORD *)(a1 + 16);
      }
      *(_QWORD *)(v51 + 24) = v54;
    }
    if (v54[6])
    {
      v56 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v269 + 176) + 136) + 4 * (unsigned __int16)v54[5]);
      v57 = &v56[2 * (unsigned __int16)v54[6]];
      v58 = *v271;
      v59 = v283;
      v60 = *(unsigned __int16 **)(*(_QWORD *)(v51 + 8) + 16);
      do
      {
        v61 = *v56;
        v62 = v56[1];
        v63 = sub_1C496F24C(a1, *v56, v60);
        *(_DWORD *)(v58 + 4 * v61) += v63 * v62;
        v59[v61] += v63 * v62;
        v56 += 2;
      }
      while (v56 != v57);
    }
    v51 += 272;
  }
  while (v51 != v273);
  v64 = *(_QWORD *)(a1 + 8);
  v66 = *(_QWORD *)(v64 + 48);
  v65 = *(_QWORD *)(v64 + 56);
  if (v65 == v66 || 0xF0F0F0F0F0F0F0F1 * ((v65 - v66) >> 4) < 0x1069)
    goto LABEL_54;
  v230 = 0;
  v231 = 0;
  do
  {
    if ((*(_BYTE *)(v66 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v66);
    if (*(_DWORD *)(v66 + 240) > v230)
    {
      v230 = *(_DWORD *)(v66 + 240);
      if ((*(_BYTE *)(v66 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v66);
        v230 = *(_DWORD *)(v66 + 240);
      }
    }
    v231 += sub_1C496F2F0(*(_QWORD *)(v66 + 8));
    v66 += 272;
  }
  while (v66 != v65);
  if (v230 < 0x2A8 || v231 < 0x1E)
LABEL_54:
    v68 = 0;
  else
    v68 = 1;
  *(_BYTE *)(a1 + 3253) = v68;
  v69 = *(_QWORD *)(a1 + 16);
  v70 = *(unsigned int *)(v69 + 48);
  v71 = v283;
  v72 = v261;
  if ((_DWORD)v70)
  {
    v73 = 0;
    v74 = 0;
    v75 = *(_QWORD *)(a1 + 1600);
    v76 = *(_DWORD *)(v69 + 276);
    v77 = *(unsigned int *)(a1 + 3156);
    do
    {
      if (*(_DWORD *)(v75 + 4 * v73) - *(_DWORD *)(v75 + 4 * v77) >= v76)
      {
        *(_DWORD *)(a1 + 3156) = v73;
        v77 = v73;
      }
      if (v71[v73] - v71[v74] >= v76)
        v74 = v73;
      ++v73;
    }
    while (v70 != v73);
  }
  else
  {
    v74 = 0;
  }
  *(float *)(a1 + 3168) = (float)v71[v74] / 12.0;
  sub_1C483D6B8((_QWORD *)(a1 + 696));
  v78 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  v79 = *(unsigned __int16 **)(*((_QWORD *)v78 + 116) + 16);
  v80 = *v79;
  v81 = (v80 - 9) > 0x3C || ((1 << (v80 - 9)) & 0x1000000000000605) == 0;
  v82 = !v81 || v80 == 0;
  v83 = !v82 && (v79[4] & 0x10) == 0 && (v79[8] & 1) == 0;
  v258 = (_DWORD *)v267 + 207;
  *(uint64_t *)((char *)v267 + 828) = 0;
  *(_BYTE *)(a1 + 3263) = 0;
  *(_DWORD *)(a1 + 3196) = 0;
  *(_OWORD *)(a1 + 3180) = 0u;
  v84 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 318);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 318))
    v84 = *(_DWORD *)(a1 + 3224);
  *(_DWORD *)(a1 + 3200) = v84;
  *(_DWORD *)(a1 + 3176) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 3260) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  v85 = *((_QWORD *)v78 + 77);
  v86 = *((_QWORD *)v78 + 4);
  v87 = *(_QWORD *)(v86 + 48);
  if (!v87)
  {
    v88 = v83;
    v89 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v86 + 8) + 216))(*(_QWORD *)(v86 + 8), v86 + 128, v86);
    v83 = v88;
    v87 = v89;
    *(_QWORD *)(v86 + 48) = v89;
    v78 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  }
  if (!*(_BYTE *)(v87 + 432))
  {
    v90 = v83;
    sub_1C5EA6408(*(_QWORD *)(**((_QWORD **)v78 + 4) + 40), v87 + 384, v87 + 208, v87 + 408);
    v83 = v90;
    *(_BYTE *)(v87 + 432) = 1;
    v78 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  }
  v91 = *((_QWORD *)v78 + 6);
  v268 = *((_QWORD *)v78 + 7);
  if (v91 != v268)
  {
    v272 = 0;
    v257 = (uint64_t ***)(a1 + 2304);
    v259 = v87;
    v260 = v85;
    while (1)
    {
      v92 = *(_QWORD **)(v91 + 8);
      if (!v92)
        goto LABEL_307;
      v93 = (unsigned __int16 *)v92[2];
      v94 = *((_QWORD *)v93 + 2);
      v95 = *v93;
      if ((v95 - 9) <= 0x3C && ((1 << (v95 - 9)) & 0x1000000000000605) != 0
        || v95 == 0)
      {
        v270 = 0;
        if ((v94 & 8) == 0)
          goto LABEL_95;
      }
      else
      {
        v98 = (v93[4] & 0x10) == 0 && (*((_QWORD *)v93 + 2) & 1) == 0;
        v270 = v98;
        if ((v94 & 8) == 0)
          goto LABEL_95;
      }
      ++*(_DWORD *)(a1 + 3208);
LABEL_95:
      v274 = v91;
      v266 = v94;
      if ((~(_DWORD)v94 & 0x800100) != 0)
        goto LABEL_148;
      v99 = *(_DWORD *)(v85 + 264);
      if (v99)
      {
        v100 = v92[3];
        v101 = *(_QWORD *)(v85 + 248);
        v102 = v99 - 1;
        v103 = ((v100 >> 4) ^ (v100 >> 9)) & (v99 - 1);
        v104 = *(_QWORD *)(v101 + 16 * v103);
        if (v100 == v104)
        {
LABEL_101:
          if (*(_QWORD *)(v101 + 16 * v103 + 8))
            goto LABEL_148;
        }
        else
        {
          v105 = 1;
          while (v104 != -4096)
          {
            v106 = v103 + v105++;
            v103 = v106 & v102;
            v104 = *(_QWORD *)(v101 + 16 * v103);
            if (v100 == v104)
              goto LABEL_101;
          }
        }
      }
      v107 = v92 + 6;
      v108 = v92[6];
      if ((v108 & 7) != 0)
        v107 = (unint64_t *)((v108 & 0xFFFFFFFFFFFFFFF8) + 8);
      else
        *v107 = v108 & 0xFFFFFFFFFFFFFFF8;
      v262 = v83;
      v264 = v92;
      v109 = *(unsigned int *)(v87 + 216);
      if (!(_DWORD)v109)
      {
        v125 = 0;
        goto LABEL_130;
      }
      v110 = 0;
      v111 = 0;
      v112 = *(_QWORD *)(v87 + 208);
      v113 = v112 + 16 * v109;
      v114 = (unint64_t *)((*(_QWORD *)*v107 & ((uint64_t)(*(_QWORD *)*v107 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                + 16);
      do
      {
        *(_QWORD *)&v276 = 1;
        v115 = *(_QWORD **)v112;
        if ((*(_QWORD *)v112 & 1) != 0)
          goto LABEL_108;
        v119 = (_QWORD *)operator new();
        v115 = v119;
        v120 = *(_QWORD **)v112;
        v121 = v119 + 2;
        *v119 = v119 + 2;
        v119[1] = 0x600000000;
        v122 = *((unsigned int *)v120 + 2);
        if (v119 != v120 && v122 != 0)
        {
          if (v122 < 7)
          {
            v124 = *((unsigned int *)v120 + 2);
            goto LABEL_126;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v119, (uint64_t)(v119 + 2), *((unsigned int *)v120 + 2), 8);
          v124 = *((unsigned int *)v120 + 2);
          if ((_DWORD)v124)
          {
            v121 = (void *)*v115;
LABEL_126:
            memcpy(v121, (const void *)*v120, 8 * v124);
          }
          *((_DWORD *)v115 + 2) = v122;
        }
        *((_DWORD *)v115 + 16) = *((_DWORD *)v120 + 16);
LABEL_108:
        *(_QWORD *)&v276 = v115;
        sub_1C496F35C((unint64_t *)&v276, v114);
        if ((v276 & 1) != 0)
        {
          if ((((unint64_t)v276 >> 1) & ~(-1 << ((unint64_t)v276 >> 58))) == 0)
            goto LABEL_116;
        }
        else
        {
          v116 = *(unsigned int *)(v276 + 8);
          if (!(_DWORD)v116)
            goto LABEL_116;
          v117 = *(_QWORD **)v276;
          v118 = 8 * v116;
          while (!*v117)
          {
            ++v117;
            v118 -= 8;
            if (!v118)
              goto LABEL_116;
          }
        }
        v110 |= 1 << *(_WORD *)(v112 + 8);
        v111 |= 1 << *(_WORD *)(v112 + 10);
LABEL_116:
        sub_1C4914448((void ***)&v276);
        v112 += 16;
      }
      while (v112 != v113);
      v125 = (unsigned __int16)(v110 | v111);
      v72 = v261;
      v87 = v259;
      v85 = v260;
LABEL_130:
      *(_QWORD *)&v276 = v274;
      *((_DWORD *)sub_1C496F93C((_DWORD *)(a1 + 1528), &v276) + 2) = v125;
      v280 = v282;
      HIDWORD(v281) = 16;
      v282[0] = v274;
      *(_QWORD *)&v276 = v279;
      *((_QWORD *)&v276 + 1) = v279;
      v277 = 32;
      v126 = 1;
      v278 = 0;
      do
      {
        v127 = *((_QWORD *)v280 + --v126);
        LODWORD(v281) = v126;
        v128 = *(unsigned int *)(v127 + 120);
        if ((_DWORD)v128)
        {
          v129 = *(_QWORD **)(v127 + 112);
          v130 = 16 * v128;
          do
          {
            v131 = *v129 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v131 + 192) != -1)
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v276, *v129 & 0xFFFFFFFFFFFFFFF8);
              if (v132)
              {
                v275 = v131;
                v133 = sub_1C496F93C((_DWORD *)(a1 + 1528), &v275);
                v134 = *((_DWORD *)v133 + 2);
                if (v134 <= v125)
                  v134 = v125;
                *((_DWORD *)v133 + 2) = v134;
                v135 = v281;
                if (v281 >= (unint64_t)HIDWORD(v281))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, (uint64_t)v282, v281 + 1, 8);
                  v135 = v281;
                }
                *((_QWORD *)v280 + v135) = v131;
                LODWORD(v281) = v281 + 1;
              }
            }
            v129 += 2;
            v130 -= 16;
          }
          while (v130);
          v126 = v281;
        }
      }
      while (v126);
      if (*((_QWORD *)&v276 + 1) != (_QWORD)v276)
        free(*((void **)&v276 + 1));
      v91 = v274;
      if (v280 != v282)
        free(v280);
      v92 = v264;
      LODWORD(v94) = v266;
      v83 = v262;
LABEL_148:
      if ((v94 & 0x800200) == 0x800200)
      {
        v136 = *(_QWORD *)(v91 + 8);
        v137 = *(_DWORD *)(v85 + 264);
        if (!v137)
          goto LABEL_155;
        v138 = *(_QWORD *)(v136 + 24);
        v139 = *(_QWORD *)(v85 + 248);
        v140 = v137 - 1;
        v141 = ((v138 >> 4) ^ (v138 >> 9)) & (v137 - 1);
        v142 = *(_QWORD *)(v139 + 16 * v141);
        if (v138 == v142)
        {
LABEL_154:
          if (!*(_QWORD *)(v139 + 16 * v141 + 8))
            goto LABEL_155;
        }
        else
        {
          v143 = 1;
          while (v142 != -4096)
          {
            v144 = v141 + v143++;
            v141 = v144 & v140;
            v142 = *(_QWORD *)(v139 + 16 * v141);
            if (v138 == v142)
              goto LABEL_154;
          }
LABEL_155:
          v147 = *(_QWORD *)(v136 + 48);
          v145 = (unint64_t *)(v136 + 48);
          v146 = v147;
          if ((v147 & 7) != 0)
            v145 = (unint64_t *)((v146 & 0xFFFFFFFFFFFFFFF8) + 8);
          else
            *v145 = v146 & 0xFFFFFFFFFFFFFFF8;
          v263 = v83;
          v265 = v92;
          v148 = *(unsigned int *)(v87 + 216);
          if ((_DWORD)v148)
          {
            v149 = 0;
            v150 = 0;
            v151 = *(_QWORD *)(v87 + 208);
            v152 = v151 + 16 * v148;
            v153 = (unint64_t *)((*(_QWORD *)*v145 & ((uint64_t)(*(_QWORD *)*v145 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                      + 16);
            while (2)
            {
              *(_QWORD *)&v276 = 1;
              v154 = *(_QWORD **)v151;
              if ((*(_QWORD *)v151 & 1) != 0)
                goto LABEL_161;
              v158 = (_QWORD *)operator new();
              v154 = v158;
              v159 = *(_QWORD **)v151;
              v160 = v158 + 2;
              *v158 = v158 + 2;
              v158[1] = 0x600000000;
              v161 = *((unsigned int *)v159 + 2);
              if (v158 != v159 && v161 != 0)
              {
                if (v161 < 7)
                {
                  v163 = *((unsigned int *)v159 + 2);
                  goto LABEL_179;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v158, (uint64_t)(v158 + 2), *((unsigned int *)v159 + 2), 8);
                v163 = *((unsigned int *)v159 + 2);
                if ((_DWORD)v163)
                {
                  v160 = (void *)*v154;
LABEL_179:
                  memcpy(v160, (const void *)*v159, 8 * v163);
                }
                *((_DWORD *)v154 + 2) = v161;
              }
              *((_DWORD *)v154 + 16) = *((_DWORD *)v159 + 16);
LABEL_161:
              *(_QWORD *)&v276 = v154;
              sub_1C496F35C((unint64_t *)&v276, v153);
              if ((v276 & 1) != 0)
              {
                if ((((unint64_t)v276 >> 1) & ~(-1 << ((unint64_t)v276 >> 58))) != 0)
                  goto LABEL_168;
              }
              else
              {
                v155 = *(unsigned int *)(v276 + 8);
                if ((_DWORD)v155)
                {
                  v156 = *(_QWORD **)v276;
                  v157 = 8 * v155;
                  while (!*v156)
                  {
                    ++v156;
                    v157 -= 8;
                    if (!v157)
                      goto LABEL_169;
                  }
LABEL_168:
                  v149 |= 1 << *(_WORD *)(v151 + 8);
                  v150 |= 1 << *(_WORD *)(v151 + 10);
                }
              }
LABEL_169:
              sub_1C4914448((void ***)&v276);
              v151 += 16;
              if (v151 == v152)
              {
                v164 = (unsigned __int16)(v149 | v150);
                v72 = v261;
                v87 = v259;
                v85 = v260;
                goto LABEL_183;
              }
              continue;
            }
          }
          v164 = 0;
LABEL_183:
          *(_QWORD *)&v276 = v274;
          *((_DWORD *)sub_1C496F93C((_DWORD *)(a1 + 1528), &v276) + 2) = v164;
          v92 = v265;
          v83 = v263;
        }
      }
      v165 = (unsigned __int16 *)v92[2];
      if (*v165 - 4821 <= 3)
        *(_QWORD *)(a1 + 688) = v274;
      v272 += v83 && !v270;
      if (!v270)
      {
        v91 = v274;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 1840), v274);
        v83 = 0;
        goto LABEL_307;
      }
      v166 = sub_1C496F2F0((uint64_t)v92);
      v167 = v92;
      if (!v166)
        goto LABEL_293;
      ++*v258;
      if ((v266 & 2) != 0)
      {
        v169 = *((unsigned __int8 *)v165 + 4) + 2;
        v170 = v92[4];
        if (*(_BYTE *)(v170 + 32 * v169) != 7)
          goto LABEL_293;
        v171 = *(unsigned int *)(v170 + 32 * v169 + 4);
        v172 = operator new(0x20uLL);
        v172[4] = v171;
        *((_QWORD *)v172 + 3) = v274;
        *(_QWORD *)v172 = 0;
        *((_QWORD *)v172 + 1) = v171;
        v173 = *(_QWORD *)(a1 + 2296);
        v174 = (float)(unint64_t)(*(_QWORD *)(a1 + 2312) + 1);
        v175 = *(float *)(a1 + 2320);
        if (!v173 || (float)(v175 * (float)v173) < v174)
        {
          v176 = (v173 & (v173 - 1)) != 0;
          if (v173 < 3)
            v176 = 1;
          v177 = v176 | (2 * v173);
          v178 = vcvtps_u32_f32(v174 / v175);
          if (v177 <= v178)
            prime = (int8x8_t)v178;
          else
            prime = (int8x8_t)v177;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v173 = *(_QWORD *)(a1 + 2296);
          }
          if (*(_QWORD *)&prime <= v173)
          {
            if (*(_QWORD *)&prime < v173)
            {
              v187 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2312) / *(float *)(a1 + 2320));
              if (v173 < 3
                || (v188 = (uint8x8_t)vcnt_s8((int8x8_t)v173), v188.i16[0] = vaddlv_u8(v188), v188.u32[0] > 1uLL))
              {
                v187 = std::__next_prime(v187);
              }
              else
              {
                v189 = 1 << -(char)__clz(v187 - 1);
                if (v187 >= 2)
                  v187 = v189;
              }
              if (*(_QWORD *)&prime <= v187)
                prime = (int8x8_t)v187;
              if (*(_QWORD *)&prime >= v173)
              {
                v173 = *(_QWORD *)(a1 + 2296);
              }
              else
              {
                if (prime)
                  goto LABEL_214;
                v209 = *(void **)(a1 + 2288);
                *(_QWORD *)(a1 + 2288) = 0;
                if (v209)
                  operator delete(v209);
                v173 = 0;
                *(_QWORD *)(a1 + 2296) = 0;
              }
            }
          }
          else
          {
LABEL_214:
            if (*(_QWORD *)&prime >> 61)
              sub_1C4764EE4();
            v181 = operator new(8 * *(_QWORD *)&prime);
            v182 = *(void **)(a1 + 2288);
            *(_QWORD *)(a1 + 2288) = v181;
            if (v182)
              operator delete(v182);
            v183 = 0;
            *(int8x8_t *)(a1 + 2296) = prime;
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 2288) + 8 * v183++) = 0;
            while (*(_QWORD *)&prime != v183);
            v184 = *v257;
            if (*v257)
            {
              v185 = (unint64_t)v184[1];
              v186 = (uint8x8_t)vcnt_s8(prime);
              v186.i16[0] = vaddlv_u8(v186);
              if (v186.u32[0] > 1uLL)
              {
                if (v185 >= *(_QWORD *)&prime)
                  v185 %= *(_QWORD *)&prime;
              }
              else
              {
                v185 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 2288) + 8 * v185) = v257;
              for (i = *v184; *v184; i = *v184)
              {
                v193 = i[1];
                if (v186.u32[0] > 1uLL)
                {
                  if (v193 >= *(_QWORD *)&prime)
                    v193 %= *(_QWORD *)&prime;
                }
                else
                {
                  v193 &= *(_QWORD *)&prime - 1;
                }
                if (v193 == v185)
                {
                  v184 = (uint64_t **)i;
                }
                else
                {
                  v194 = *(_QWORD *)(a1 + 2288);
                  v195 = i;
                  if (*(_QWORD *)(v194 + 8 * v193))
                  {
                    do
                    {
                      v196 = v195;
                      v195 = (uint64_t *)*v195;
                    }
                    while (v195 && *((_DWORD *)i + 4) == *((_DWORD *)v195 + 4));
                    *v184 = v195;
                    *v196 = **(_QWORD **)(*(_QWORD *)(a1 + 2288) + 8 * v193);
                    **(_QWORD **)(*(_QWORD *)(a1 + 2288) + 8 * v193) = i;
                  }
                  else
                  {
                    *(_QWORD *)(v194 + 8 * v193) = v184;
                    v184 = (uint64_t **)i;
                    v185 = v193;
                  }
                }
              }
            }
            v173 = (unint64_t)prime;
          }
        }
        v197 = (uint8x8_t)vcnt_s8((int8x8_t)v173);
        v197.i16[0] = vaddlv_u8(v197);
        if (v197.u32[0] > 1uLL)
        {
          v198 = v171;
          if (v173 <= v171)
            v198 = v171 % v173;
        }
        else
        {
          v198 = ((_DWORD)v173 - 1) & v171;
        }
        v199 = *(_QWORD *)(a1 + 2288);
        v200 = *(uint64_t ***)(v199 + 8 * v198);
        if (v200)
        {
          v201 = *v200;
          if (*v200)
          {
            v202 = 0;
            do
            {
              v203 = v201;
              v204 = v201[1];
              if (v197.u32[0] > 1uLL)
              {
                v205 = v204;
                if (v204 >= v173)
                  v205 = v204 % v173;
              }
              else
              {
                v205 = v204 & (v173 - 1);
              }
              if (v205 != v198)
                break;
              v206 = v204 == v171 && *((_DWORD *)v203 + 4) == v172[4];
              if ((v202 & !v206) == 1)
                break;
              v202 |= v206;
              v201 = (uint64_t *)*v203;
              v200 = (uint64_t **)v203;
            }
            while (*v203);
          }
        }
        v207 = *((_QWORD *)v172 + 1);
        if (v197.u32[0] <= 1uLL)
        {
          v207 &= v173 - 1;
          v167 = v92;
          if (!v200)
            goto LABEL_270;
        }
        else
        {
          v167 = v92;
          if (v207 >= v173)
            v207 %= v173;
          if (!v200)
          {
LABEL_270:
            *(_QWORD *)v172 = *v257;
            *v257 = (uint64_t **)v172;
            *(_QWORD *)(v199 + 8 * v207) = v257;
            if (*(_QWORD *)v172)
            {
              v208 = *(_QWORD *)(*(_QWORD *)v172 + 8);
              if (v197.u32[0] <= 1uLL)
              {
                v208 &= v173 - 1;
              }
              else if (v208 >= v173)
              {
                v208 %= v173;
              }
              goto LABEL_291;
            }
            goto LABEL_292;
          }
        }
        *(_QWORD *)v172 = *v200;
        *v200 = (uint64_t *)v172;
        if (*(_QWORD *)v172)
        {
          v208 = *(_QWORD *)(*(_QWORD *)v172 + 8);
          if (v197.u32[0] <= 1uLL)
          {
            v208 &= v173 - 1;
          }
          else if (v208 >= v173)
          {
            v208 %= v173;
          }
          if (v208 != v207)
LABEL_291:
            *(_QWORD *)(*(_QWORD *)(a1 + 2288) + 8 * v208) = v172;
        }
LABEL_292:
        ++*(_QWORD *)(a1 + 2312);
        v72 = v261;
        goto LABEL_293;
      }
      v168 = v92[6];
      if (v168 >= 8)
      {
        if ((v168 & 7) != 0)
        {
          if ((v92[6] & 7) != 3 || (v168 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v168 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_293;
        }
        else
        {
          v168 &= 0xFFFFFFFFFFFFFFF8;
          v92[6] = v168;
        }
        if ((v168 & 7) != 0)
        {
          v180 = *(uint64_t **)((v168 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v180 = (uint64_t *)(v168 & 0xFFFFFFFFFFFFFFF8);
          v92[6] = v180;
        }
        v190 = *v180;
        if ((v190 & 4) == 0 && (v190 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v190 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
          v167 = v92;
          if (UnderlyingObject)
          {
            *(_QWORD *)&v276 = UnderlyingObject;
            *((_QWORD *)&v276 + 1) = v274;
            sub_1C483D7F8((_QWORD *)(a1 + 2328), &v276);
            v167 = v92;
          }
        }
      }
LABEL_293:
      if ((*(_BYTE *)(v167[2] + 16) & 0x10) != 0)
      {
        v91 = v274;
        v280 = (void *)v274;
        v281 = 0;
        sub_1C483DD7C(a1 + 696, &v280, &v281, (uint64_t)&v276);
        v210 = *(unsigned int *)(v274 + 120);
        if ((_DWORD)v210)
        {
          v211 = v276;
          v212 = *(_QWORD **)(v274 + 112);
          v213 = 16 * v210;
          while (1)
          {
            v214 = *v212 & 0xFFFFFFFFFFFFFFF8;
            if ((*v212 & 6) != 0 || v214 == 0)
              break;
            v216 = *(_QWORD *)(v214 + 8);
            if (!v216 || (*(_BYTE *)(*(_QWORD *)(v216 + 16) + 16) & 2) == 0)
              break;
            ++*(_DWORD *)(v211 + 8);
            v212 += 2;
            v83 = 1;
            v213 -= 16;
            if (!v213)
              goto LABEL_307;
          }
          *(_DWORD *)(v211 + 8) = -1;
        }
        v83 = 1;
      }
      else
      {
        v83 = 1;
        v91 = v274;
      }
LABEL_307:
      v91 += 272;
      if (v91 == v268)
      {
        v78 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
        v217 = v272;
        goto LABEL_311;
      }
    }
  }
  v217 = 0;
LABEL_311:
  *(_DWORD *)(a1 + 3172) = v217;
  *(_DWORD *)(a1 + 3212) = -1;
  v218 = *(_QWORD *)(*((_QWORD *)v78 + 116) + 24);
  v219 = v72[2].i64[0];
  if (v218 == *(_QWORD *)(v219 + 320))
  {
    *(_DWORD *)(a1 + 3188) = 0;
    *(_BYTE *)(a1 + 3248) = 0;
    goto LABEL_338;
  }
  if (v218 == *(_QWORD *)(v219 + 328))
  {
    *(_DWORD *)(a1 + 3188) = 2;
    *(_BYTE *)(a1 + 3248) = 1;
    goto LABEL_338;
  }
  v220 = *(_DWORD *)(v85 + 264);
  if (v220)
  {
    v221 = *(_QWORD *)(v85 + 248);
    v222 = v220 - 1;
    v223 = (v220 - 1) & ((v218 >> 4) ^ (v218 >> 9));
    v224 = *(_QWORD *)(v221 + 16 * v223);
    if (v218 == v224)
    {
LABEL_318:
      v227 = *(_QWORD *)(v221 + 16 * v223 + 8);
      v228 = 1;
      *(_BYTE *)(a1 + 3248) = 1;
      if (v227)
      {
        v229 = *(_QWORD **)(v218 + 88);
        if (((*(_QWORD *)(v218 + 96) - (_QWORD)v229) & 0x7FFFFFFF8) == 8 && *v229 == **(_QWORD **)(v227 + 32))
        {
          v228 = 0;
          *(_BYTE *)(a1 + 3248) = 0;
        }
        else
        {
          v228 = 1;
        }
      }
      goto LABEL_334;
    }
    v225 = 1;
    while (v224 != -4096)
    {
      v226 = v223 + v225++;
      v223 = v226 & v222;
      v224 = *(_QWORD *)(v221 + 16 * v223);
      if (v218 == v224)
        goto LABEL_318;
    }
  }
  v228 = 1;
  *(_BYTE *)(a1 + 3248) = 1;
LABEL_334:
  *(_DWORD *)(a1 + 3188) = v228;
  v233 = v218 + 88;
  v232 = *(_QWORD *)(v218 + 88);
  if (((*(_QWORD *)(v233 + 8) - v232) & 0x7FFFFFFF8) == 8
    && ((*(_QWORD *)(*(_QWORD *)v232 + 72) - *(_QWORD *)(*(_QWORD *)v232 + 64)) & 0x7FFFFFFF8) == 8)
  {
    *(_DWORD *)(a1 + 3188) = 0;
  }
LABEL_338:
  llvm::ScheduleDAGMILive::computeDFSResult(v78);
  if (v283 != (char *)v285)
    free(v283);
}

void sub_1C496B1A4(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  llvm::SUnit **v5;
  llvm::SUnit **v6;
  llvm::SUnit *v7;
  float v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v2 + 580) & 1) == 0)
    llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2 + 344));
  v3 = *(_DWORD *)(v2 + 584);
  v4 = a1 + 832;
  do
  {
    v5 = *(llvm::SUnit ***)(v4 + 32);
    v6 = *(llvm::SUnit ***)(v4 + 40);
    while (v5 != v6)
    {
      v7 = *v5;
      if ((*((_BYTE *)*v5 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*v5);
      if (*((_DWORD *)v7 + 60) > v3)
      {
        v3 = *((_DWORD *)v7 + 60);
        if ((*((_BYTE *)v7 + 236) & 1) == 0)
        {
          llvm::SUnit::ComputeDepth(v7);
          v3 = *((_DWORD *)v7 + 60);
        }
      }
      ++v5;
    }
    v4 += 56;
  }
  while (v4 != a1 + 1336);
  v8 = *(float *)(a1 + 3168);
  v9 = 0.0;
  if (v8 > 0.0)
    v9 = (float)(v3 + 10 * *(_DWORD *)(a1 + 3172)) / (float)(v8 * 12.0);
  v10 = vcvtps_u32_f32(v9);
  if (v10 <= 1)
    v10 = 1;
  v11 = (0x120 / v10) & 0x1F8;
  if (v11 <= 0x18)
    v11 = 24;
  if (v11 >= 0x80)
    v12 = 128;
  else
    v12 = v11;
  v13 = *(_DWORD *)(a1 + 3148);
  v14 = vmul_s32((int32x2_t)(v12 | 0x1E00000000), vdup_n_s32(v13));
  *(int32x2_t *)(a1 + 3160) = v14;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v16 = v15 + 320;
  v17 = *(_QWORD *)(v15 + 328);
  if (v17 != v16 && *(_QWORD *)(v17 + 8) != v16)
  {
    *(_DWORD *)(a1 + 3160) = v14.i32[0] - v13;
    *(_DWORD *)(a1 + 3164) = 29 * v13;
  }
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
}

uint64_t sub_1C496B308(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  float v6;
  unsigned int v7;
  void *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  BOOL v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int16 *v43;
  int v44;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::SUnit *v52;
  char v53;
  llvm::SUnit *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  char *v69;
  uint64_t *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  unsigned __int16 *v80;
  int v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  llvm::SUnit *v91;
  unint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  _QWORD *v111;
  uint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int v115;
  void *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int8x8_t v131;
  unint64_t v132;
  uint8x8_t v133;
  unint64_t v134;
  uint64_t **v135;
  uint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  _DWORD *v139;
  BOOL v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  llvm *UnderlyingObject;
  int8x8_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint8x8_t v151;
  uint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  char v160;
  unsigned int v161;
  unsigned __int8 v162;
  const llvm::SUnit **v163;
  const llvm::SUnit **v164;
  const llvm::SUnit *v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  unsigned int v170;
  BOOL v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  char **v175;
  _BYTE *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  llvm::SUnit **v180;
  uint64_t **j;
  uint64_t *v182;
  int v183;
  int v184;
  llvm::SUnit *v185;
  llvm::SUnit *v186;
  unsigned int v187;
  int v188;
  llvm::SUnit **v189;
  llvm::SUnit **v190;
  llvm::SUnit *v191;
  int v192;
  int v193;
  llvm::SUnit *v194;
  llvm::SUnit *v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int16 v201;
  unsigned int v202;
  unsigned __int16 *v203;
  int v204;
  BOOL v205;
  BOOL v206;
  int v207;
  BOOL v208;
  char v209;
  const llvm::SUnit **v210;
  const llvm::SUnit **v211;
  const llvm::SUnit *v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  int v222;
  llvm::SUnit *v223;
  uint64_t v224;
  unsigned __int16 *v225;
  int v226;
  BOOL v228;
  uint64_t v229;
  _BOOL4 v230;
  int v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  int v235;
  unsigned __int16 *v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int NumExplicitOperands;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  BOOL v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  BOOL v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v269;
  uint64_t v270;
  unsigned __int16 *v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  __int16 v276;
  unsigned int v277;
  int v278;
  __int16 v279;
  unsigned int v280;
  int v281;
  __int16 v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  uint64_t i;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  unsigned int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  char *v295;
  int v296;
  unsigned int v297;
  char *v298;
  int v299;
  char *v300;
  int v301;
  BOOL v302;
  unsigned int v303;
  char *v304;
  unsigned int v305;
  int v306;
  char *v307;
  int v308;
  unsigned int v309;
  int v310;
  char *v311;
  int v312;
  BOOL v313;
  unsigned int v314;
  int v315;
  char *v316;
  int v317;
  unsigned int v318;
  int v319;
  int v320;
  BOOL v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unsigned __int16 *v329;
  int v330;
  BOOL v331;
  _DWORD *v333;
  int v334;
  int v335;
  _DWORD *v336;
  int v337;
  uint64_t v338;
  char *v339;
  int v340;
  int v341;
  int v342;
  char *v343;
  unsigned int v344;
  uint64_t v345;
  int v346;
  _QWORD *v347;
  _QWORD *v348;
  unint64_t v349;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _DWORD *v357;
  int v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  __int16 v369;
  unsigned __int16 v370;
  int v371;
  llvm::SUnit *v372;
  const llvm::SUnit *v373;
  llvm::SUnit *v374;
  unsigned int v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int v390;
  char v391;
  __int16 v392;
  int v393;
  __int16 v394;
  int v395;
  int v396;
  int v397;
  unsigned int v398;
  unsigned int v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  unsigned int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned __int16 *v413;
  int v414;
  BOOL v415;
  BOOL v416;
  uint64_t v417;
  uint64_t *v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned __int16 *v423;
  int v424;
  BOOL v426;
  BOOL v427;
  uint64_t v428;
  uint64_t FirstInstrTerminator;
  uint64_t v430;
  uint64_t v431;
  unsigned __int16 *v433;
  int v434;
  BOOL v435;
  BOOL v436;
  int v437;
  int v438;
  int v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  unint64_t v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  int v449;
  int v450;
  int v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  _QWORD *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  __int16 v464;
  int v465;
  int v466;
  int32x2_t v467;
  char *v468;
  char *v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t *v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t *v484;
  _QWORD *v485;
  _QWORD *v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char *v491;
  char *v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  unsigned int v496;
  int v497;
  unsigned int v498;
  void *v499;
  unsigned int v500;
  int v501;
  unsigned int v502;
  void *v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  int32x2_t *v508;
  signed int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  uint64_t v513;
  llvm::SmallPtrSetImplBase *v514;
  unsigned int v515;
  llvm::SUnit **v516;
  int v517;
  int v518;
  int v519;
  char **v520;
  uint64_t *v521;
  unint64_t v522;
  llvm::SUnit **v523;
  llvm::SUnit *v524;
  llvm::SUnit *v525;
  unint64_t v526;
  int v527;
  char v528;
  _BYTE v529[13];
  char v530;
  __int16 v531;
  unsigned __int16 v532;
  unsigned __int8 v533;
  char *v534;
  char *v535;
  uint64_t v536;
  int v537;
  _BYTE v538[24];
  uint64_t v539;
  uint64_t v540;
  char v541;
  void *v542;
  uint64_t v543;
  _BYTE v544[128];
  void *v545;
  uint64_t v546;
  unint64_t v547;
  char v548;
  char v549;
  _BYTE v550[13];
  __int16 v551;
  unsigned __int16 v552;
  unsigned __int8 v553;
  void *v554;
  void *v555;
  uint64_t v556;
  int v557;
  _QWORD v558[34];

  v3 = 0;
  v558[32] = *MEMORY[0x1E0C80C00];
  v508 = (int32x2_t *)(a1 + 1356);
  while (*(_QWORD *)(a1 + v3 + 864) == *(_QWORD *)(a1 + v3 + 872))
  {
    v3 += 56;
    if (v3 == 504)
      return 0;
  }
  *a2 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 4912) + 4 * *(unsigned int *)(a1 + 3144));
  v6 = (float)v5;
  v7 = *(_DWORD *)(a1 + 3160);
  *(_BYTE *)(a1 + 3249) = (float)(*(float *)(a1 + 3240) * (float)v7) <= (float)v5;
  if (v5 > v7)
    v7 = v5;
  *(_DWORD *)(a1 + 3160) = v7;
  if (*(_BYTE *)(a1 + 3253))
  {
    if (*(_DWORD *)(a1 + 3148) * *(_DWORD *)(a1 + 3256) < v7)
      v7 = *(_DWORD *)(a1 + 3148) * *(_DWORD *)(a1 + 3256);
    *(_DWORD *)(a1 + 3160) = v7;
  }
  v8 = *(void **)(a1 + 2136);
  if (v8 == *(void **)(a1 + 2128))
    goto LABEL_12;
  v106 = *(unsigned int *)(a1 + 2144);
  if (v106 < 0x21 || 4 * (*(_DWORD *)(a1 + 2148) - *(_DWORD *)(a1 + 2152)) >= v106)
  {
    memset(v8, 255, 8 * v106);
LABEL_12:
    *(_QWORD *)(a1 + 2148) = 0;
    goto LABEL_13;
  }
  free(v8);
  v496 = *(_DWORD *)(a1 + 2148) - *(_DWORD *)(a1 + 2152);
  v497 = 1 << (33 - __clz(v496 - 1));
  if (v496 <= 0x10)
    v498 = 32;
  else
    v498 = v497;
  *(_DWORD *)(a1 + 2144) = v498;
  *(_QWORD *)(a1 + 2148) = 0;
  v499 = malloc_type_malloc(8 * v498, 0x4065EBACuLL);
  if (!v499)
    goto LABEL_947;
  *(_QWORD *)(a1 + 2136) = v499;
  memset(v499, 255, 8 * *(unsigned int *)(a1 + 2144));
LABEL_13:
  v515 = v5;
  v31 = *(_DWORD *)(a1 + 3176) == 0;
  v534 = v538;
  v535 = v538;
  if (v31)
    v9 = 512;
  else
    v9 = 32;
  v510 = v9;
  v536 = 32;
  v537 = 0;
  v554 = v558;
  v555 = v558;
  v556 = 32;
  v557 = 0;
  v524 = (llvm::SUnit *)v529;
  v525 = (llvm::SUnit *)v529;
  v526 = 32;
  v527 = 0;
  v10 = *(uint64_t **)(a1 + 920);
  v11 = *(uint64_t **)(a1 + 928);
  while (v10 != v11)
  {
    v12 = *v10++;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v554, v12);
  }
  v13 = *(uint64_t **)(a1 + 976);
  v14 = *(uint64_t **)(a1 + 984);
  if (v13 == v14)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *v13;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v534, *v13);
      if (v17)
      {
        v18 = *(_QWORD *)(v16 + 24);
        if (!v18)
        {
          v19 = *(_QWORD *)(a1 + 8);
          v18 = *(_QWORD *)(v19 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 16) + 6);
          if ((*(_WORD *)(v18 + 8) & 0x1FFF) == 0x1FFE)
          {
            do
            {
              v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 808) + 200))(*(_QWORD *)(v19 + 808));
              v21 = *(_QWORD *)(v19 + 672);
            }
            while ((*(_WORD *)(v21 + 24 * v20 + 8) & 0x1FFF) == 0x1FFE);
            v18 = v21 + 24 * v20;
          }
          *(_QWORD *)(v16 + 24) = v18;
        }
        v15 = v15 + (*(_WORD *)(v18 + 8) & 0x1FFF);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  v22 = *(uint64_t **)(a1 + 864);
  v23 = *(uint64_t **)(a1 + 872);
  if (v22 == v23)
  {
    v25 = 0x7FFFFFFF;
    v26 = -1;
    v24 = -1;
LABEL_80:
    v519 = v26;
    v511 = v15;
    while (1)
    {
      v545 = &v547;
      v546 = 0x1000000000;
      v542 = v544;
      v543 = 0x1000000000;
      if (v525 == v524)
        v49 = (unint64_t *)((char *)&v526 + 4);
      else
        v49 = &v526;
      v50 = *(unsigned int *)v49;
      if ((_DWORD)v50)
      {
        v51 = 8 * v50;
        v52 = v525;
        while (*(_QWORD *)v52 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v52 = (llvm::SUnit *)((char *)v52 + 8);
          v51 -= 8;
          if (!v51)
          {
            v53 = 0;
            goto LABEL_173;
          }
        }
      }
      else
      {
        v52 = v525;
      }
      v54 = (llvm::SUnit *)((char *)v525 + 8 * v50);
      if (v52 == v54)
      {
        v53 = 0;
        goto LABEL_173;
      }
      v53 = 0;
      v55 = *(_QWORD *)v52;
LABEL_92:
      v56 = *(_QWORD *)(v55 + 8);
      if ((sub_1C49719DC(v56) & 1) != 0)
        goto LABEL_154;
      v57 = *(_QWORD *)(a1 + 64);
      v58 = *(unsigned __int16 **)(v56 + 16);
      v59 = *v58;
      if (v59 > 0x865)
      {
        if (v59 == 4578 || v59 == 4580)
        {
LABEL_113:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v554, v55);
          goto LABEL_154;
        }
        if (v59 == 2150)
          goto LABEL_96;
      }
      else
      {
        if (v59 != 1100)
        {
          if (v59 != 2114)
            goto LABEL_103;
LABEL_96:
          if (*(_BYTE *)(v57 + 338))
            goto LABEL_113;
          goto LABEL_103;
        }
        if (*(_BYTE *)(v57 + 338) && *(_BYTE *)(*(_QWORD *)(v56 + 32) + 64) == 7)
          goto LABEL_113;
      }
LABEL_103:
      v61 = *((_QWORD *)v58 + 2);
      if ((v61 & 0xD00) == 0x900 || (v61 & 0xE00) == 0xA00)
      {
        v62 = v59 - 9 > 0x3C || ((1 << (v59 - 9)) & 0x1000000000000605) == 0;
        v63 = !v62 || v59 == 0;
        if (v63 || *((_QWORD *)v58 + 1) & 0x10 | v61 & 1)
          goto LABEL_113;
      }
      v64 = *(unsigned int *)(v55 + 120);
      if ((_DWORD)v64)
      {
        v65 = *(_QWORD **)(v55 + 112);
        v66 = 16 * v64;
        while (1)
        {
          v67 = *v65 & 0xFFFFFFFFFFFFFFF8;
          if ((*v65 & 6) == 0 && (*(_WORD *)(v67 + 228) & 0x400) == 0)
          {
            v69 = (char *)sub_1C477672C((uint64_t)&v534, v67);
            v70 = v535 == v534 ? (uint64_t *)((char *)&v536 + 4) : &v536;
            if (v69 == &v535[8 * *(unsigned int *)v70])
              break;
          }
          v65 += 2;
          v66 -= 16;
          if (!v66)
            goto LABEL_126;
        }
LABEL_154:
        v85 = (unint64_t *)((char *)v52 + 8);
        while (v85 != (unint64_t *)v54)
        {
          v86 = *v85++;
          v55 = v86;
          if (v86 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v52 = (llvm::SUnit *)(v85 - 1);
            goto LABEL_92;
          }
        }
        if ((_DWORD)v546)
        {
          v89 = (uint64_t *)v545;
          v90 = 8 * v546;
          do
          {
            v91 = (llvm::SUnit *)sub_1C477672C((uint64_t)&v524, *v89);
            if (v525 == v524)
              v92 = (unint64_t *)((char *)&v526 + 4);
            else
              v92 = &v526;
            if (v91 != (llvm::SUnit *)((char *)v525 + 8 * *(unsigned int *)v92))
            {
              *(_QWORD *)v91 = -2;
              ++v527;
            }
            ++v89;
            v90 -= 8;
          }
          while (v90);
        }
LABEL_173:
        if ((_DWORD)v543)
        {
          v93 = (uint64_t *)v542;
          v94 = 8 * v543;
          do
          {
            v95 = *v93++;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v524, v95);
            v94 -= 8;
          }
          while (v94);
        }
        v96 = 0;
        goto LABEL_177;
      }
LABEL_126:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v534, v55);
      if (v71)
      {
        v72 = *(_QWORD *)(v55 + 24);
        if (!v72)
        {
          v73 = *(_QWORD *)(a1 + 8);
          v72 = *(_QWORD *)(v73 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v55 + 8) + 16) + 6);
          if ((*(_WORD *)(v72 + 8) & 0x1FFF) == 0x1FFE)
          {
            do
            {
              v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v73 + 808) + 200))(*(_QWORD *)(v73 + 808));
              v88 = *(_QWORD *)(v73 + 672);
            }
            while ((*(_WORD *)(v88 + 24 * v87 + 8) & 0x1FFF) == 0x1FFE);
            v72 = v88 + 24 * v87;
          }
          *(_QWORD *)(v55 + 24) = v72;
        }
        v511 += *(_WORD *)(v72 + 8) & 0x1FFF;
      }
      v74 = v546;
      if (v546 >= (unint64_t)HIDWORD(v546))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v545, (uint64_t)&v547, v546 + 1, 8);
        v74 = v546;
      }
      *((_QWORD *)v545 + v74) = v55;
      LODWORD(v546) = v546 + 1;
      v75 = *(unsigned int *)(v55 + 40);
      if ((_DWORD)v75)
      {
        v76 = *(_QWORD **)(v55 + 32);
        v77 = 16 * v75;
        do
        {
          v78 = *v76 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)(v78 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v76 & 0xFFFFFFFFFFFFFFF8));
          v79 = *(_DWORD *)(v78 + 240) + *(unsigned __int16 *)(v78 + 226);
          v80 = *(unsigned __int16 **)(*(_QWORD *)(v78 + 8) + 16);
          v81 = *v80;
          v83 = (v81 - 9) <= 0x3C && ((1 << (v81 - 9)) & 0x1000000000000605) != 0
             || v81 == 0;
          if (v83 || (v80[4] & 0x10) != 0 || (v80[8] & 1) != 0)
          {
            v84 = v543;
            if (v543 >= (unint64_t)HIDWORD(v543))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v542, (uint64_t)v544, v543 + 1, 8);
              v84 = v543;
            }
            *((_QWORD *)v542 + v84) = v78;
            LODWORD(v543) = v543 + 1;
            if (v25 >= v79)
              v25 = v79;
          }
          else if (v24 <= v79)
          {
            v24 = *(_DWORD *)(v78 + 240) + *(unsigned __int16 *)(v78 + 226);
          }
          v76 += 2;
          v77 -= 16;
        }
        while (v77);
      }
      v53 = 1;
      if (v511 < v510)
        goto LABEL_154;
      v96 = 1;
LABEL_177:
      if (v542 != v544)
        free(v542);
      if (v545 != &v547)
        free(v545);
      if ((v53 & 1) != 0)
        v97 = v96;
      else
        v97 = 1;
      if (v97 == 1)
      {
        LODWORD(v15) = v511;
        goto LABEL_187;
      }
    }
  }
  v24 = -1;
  v25 = 0x7FFFFFFF;
  v26 = -1;
  v521 = *(uint64_t **)(a1 + 872);
  while (1)
  {
    v27 = *v22;
    v28 = *(_QWORD *)(*v22 + 8);
    v29 = *(unsigned __int16 **)(v28 + 16);
    v30 = *v29;
    v31 = (v30 - 9) > 0x3C || ((1 << (v30 - 9)) & 0x1000000000000605) == 0;
    v32 = !v31 || v30 == 0;
    if ((v32 || (v29[4] & 0x10) != 0 || (v29[8] & 1) != 0) && (sub_1C49719DC(v28) & 1) == 0)
      break;
LABEL_75:
    if (++v22 == v23)
      goto LABEL_80;
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v534, v27);
  if (v33)
  {
    v34 = *(_QWORD *)(v27 + 24);
    if (!v34)
    {
      v517 = v26;
      v35 = *(_QWORD *)(a1 + 8);
      v34 = *(_QWORD *)(v35 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 16) + 6);
      if ((*(_WORD *)(v34 + 8) & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 808) + 200))(*(_QWORD *)(v35 + 808));
          v48 = *(_QWORD *)(v35 + 672);
        }
        while ((*(_WORD *)(v48 + 24 * v47 + 8) & 0x1FFF) == 0x1FFE);
        v34 = v48 + 24 * v47;
      }
      *(_QWORD *)(v27 + 24) = v34;
      v26 = v517;
      v23 = v521;
    }
    v15 = v15 + (*(_WORD *)(v34 + 8) & 0x1FFF);
  }
  v36 = *(_BYTE *)(v27 + 236);
  if ((v36 & 1) == 0)
  {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)v27);
    v36 = *(_BYTE *)(v27 + 236);
  }
  v37 = *(_DWORD *)(v27 + 240) + *(unsigned __int16 *)(v27 + 226);
  if (v26 <= v37)
    v26 = *(_DWORD *)(v27 + 240) + *(unsigned __int16 *)(v27 + 226);
  if ((v36 & 1) == 0)
  {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)v27);
    v37 = *(_DWORD *)(v27 + 240) + *(unsigned __int16 *)(v27 + 226);
  }
  if (v25 >= v37)
    v25 = v37;
  if (v15 < v510)
  {
    v38 = *(unsigned int *)(v27 + 40);
    if ((_DWORD)v38)
    {
      v518 = v26;
      v39 = v15;
      v40 = *(_QWORD **)(v27 + 32);
      v41 = 16 * v38;
      do
      {
        v42 = *v40 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_BYTE *)(v42 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v40 & 0xFFFFFFFFFFFFFFF8));
        v43 = *(unsigned __int16 **)(*(_QWORD *)(v42 + 8) + 16);
        v44 = *v43;
        v46 = (v44 - 9) <= 0x3C && ((1 << (v44 - 9)) & 0x1000000000000605) != 0
           || v44 == 0;
        if (v46 || (v43[4] & 0x10) != 0 || (v43[8] & 1) != 0)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v524, v42);
        }
        else if (v24 <= *(_DWORD *)(v42 + 240) + *(unsigned __int16 *)(v42 + 226))
        {
          v24 = *(_DWORD *)(v42 + 240) + *(unsigned __int16 *)(v42 + 226);
        }
        v40 += 2;
        v41 -= 16;
      }
      while (v41);
      v15 = v39;
      v26 = v518;
      v23 = v521;
    }
    goto LABEL_75;
  }
  v519 = v26;
LABEL_187:
  v509 = HIDWORD(v556) - v557;
  if (v25 != 0x7FFFFFFF && v24 == -1)
    v99 = v25;
  else
    v99 = v24;
  v512 = v15;
  if (v15 < v510)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 318))
    {
      v100 = *(_DWORD *)(a1 + 3200);
      if (*(_DWORD *)(a1 + 3188) >= v100
        && ((*(_QWORD *)(a1 + 984) - *(_QWORD *)(a1 + 976)) >> 3)
         - (v509
          + (_DWORD)v15)
         + ((*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3) != *(_DWORD *)(a1 + 1864)
                                                                                 - *(_DWORD *)(a1 + 1860)
        && *(_DWORD *)(a1 + 1860) - *(_DWORD *)(a1 + 1864) < v100)
      {
        v101 = *(_QWORD *)(a1 + 1848);
        v102 = 1856;
        if (v101 == *(_QWORD *)(a1 + 1840))
          v102 = 1860;
        v103 = *(unsigned int *)(a1 + v102);
        if ((_DWORD)v103)
        {
          v104 = 8 * v103;
          v105 = *(uint64_t **)(a1 + 1848);
          while ((unint64_t)*v105 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v105;
            v104 -= 8;
            if (!v104)
              goto LABEL_225;
          }
        }
        else
        {
          v105 = *(uint64_t **)(a1 + 1848);
        }
        v107 = (_QWORD *)(v101 + 8 * v103);
        if (v105 != v107)
        {
          v108 = *v105;
LABEL_212:
          v109 = (char *)sub_1C477672C((uint64_t)&v534, v108);
          if (v535 == v534)
            v110 = (uint64_t *)((char *)&v536 + 4);
          else
            v110 = &v536;
          if (v109 == &v535[8 * *(unsigned int *)v110])
          {
            v111 = sub_1C477672C((uint64_t)&v554, v108);
            v112 = v555 == v554 ? (uint64_t *)((char *)&v556 + 4) : &v556;
            if (v111 == (_QWORD *)((char *)v555 + 8 * *(unsigned int *)v112))
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 2128), v108);
          }
          v113 = (unint64_t *)(v105 + 1);
          while (1)
          {
            LODWORD(v15) = v512;
            if (v113 == v107)
              break;
            v114 = *v113++;
            v108 = v114;
            if (v114 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v105 = (uint64_t *)(v113 - 1);
              goto LABEL_212;
            }
          }
        }
      }
    }
  }
LABEL_225:
  if (v525 != v524)
    free(v525);
  if (v555 != v554)
    free(v555);
  if (v535 != v534)
    free(v535);
  *(_BYTE *)(a1 + 3261) = v509 + (int)v15 > 15;
  if (v15 < v510)
  {
    v115 = v15;
    *(_BYTE *)(a1 + 3260) = v519 - v99 >= (int)v15;
    if (v519 - v99 < (int)v15)
      v115 = v15 - v519 + v99;
LABEL_236:
    *(_DWORD *)(a1 + 3176) = v115;
  }
  else if (!*(_DWORD *)(a1 + 3176))
  {
    v115 = v510 >> 1;
    goto LABEL_236;
  }
  v116 = *(void **)(a1 + 1344);
  if (v116 != *(void **)(a1 + 1336))
  {
    v169 = *(unsigned int *)(a1 + 1352);
    if (v169 < 0x21 || 4 * (*(_DWORD *)(a1 + 1356) - *(_DWORD *)(a1 + 1360)) >= v169)
    {
      memset(v116, 255, 8 * v169);
      goto LABEL_238;
    }
    free(v116);
    v500 = *(_DWORD *)(a1 + 1356) - *(_DWORD *)(a1 + 1360);
    v501 = 1 << (33 - __clz(v500 - 1));
    if (v500 <= 0x10)
      v502 = 32;
    else
      v502 = v501;
    *(_DWORD *)(a1 + 1352) = v502;
    *v508 = 0;
    v503 = malloc_type_malloc(8 * v502, 0x4065EBACuLL);
    if (v503)
    {
      *(_QWORD *)(a1 + 1344) = v503;
      memset(v503, 255, 8 * *(unsigned int *)(a1 + 1352));
      goto LABEL_239;
    }
LABEL_947:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_238:
  *(_QWORD *)(a1 + 1356) = 0;
LABEL_239:
  v514 = (llvm::SmallPtrSetImplBase *)(a1 + 1336);
  v117 = *(uint64_t **)(a1 + 1096);
  v118 = *(uint64_t **)(a1 + 1088);
  v522 = (unint64_t)((char *)v117 - (char *)v118) >> 3;
  if (v117 == v118)
    goto LABEL_333;
  while (2)
  {
    v119 = *v118;
    if (*v118)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v119 + 8) + 16) + 16) & 2) != 0)
      {
        v120 = *(unsigned int *)(v119 + 40);
        if ((_DWORD)v120)
        {
          v121 = *(_QWORD **)(v119 + 32);
          v122 = 16 * v120;
          do
          {
            v123 = *v121 & 0xFFFFFFFFFFFFFFF8;
            if ((*v121 & 6) == 0 && v123 != 0)
            {
              v125 = *(_QWORD *)(v123 + 8);
              if (v125)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v125 + 16) + 16) & 0x10) != 0
                  && (*(_DWORD *)(sub_1C4840470(a1 + 696, v123) + 8) + 1) > 1)
                {
                  goto LABEL_294;
                }
              }
            }
            v121 += 2;
            v122 -= 16;
          }
          while (v122);
        }
      }
    }
    if ((sub_1C4971A84(v119, *(_QWORD *)(a1 + 680)) & 1) != 0)
      goto LABEL_328;
    v126 = *(_QWORD **)(v119 + 8);
    v127 = *(_QWORD *)(v126[2] + 16);
    if ((*(_BYTE *)(v119 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v119);
    v128 = *(_DWORD *)(v119 + 240);
    if ((v127 & 2) == 0
      || (v129 = *(unsigned __int8 *)(v126[2] + 4) + 2, v130 = v126[4], *(_BYTE *)(v130 + 32 * v129) != 7))
    {
      if ((v127 & 0xD00) != 0x500)
        goto LABEL_328;
      v138 = v126[6];
      if (v138 < 8)
        goto LABEL_328;
      if ((v138 & 7) != 0)
      {
        v139 = (_DWORD *)(v138 & 0xFFFFFFFFFFFFFFF8);
        v140 = (v126[6] & 7) != 3 || v139 == 0;
        if (v140 || !*v139)
          goto LABEL_328;
      }
      else
      {
        v138 &= 0xFFFFFFFFFFFFFFF8;
        v126[6] = v138;
      }
      if ((v138 & 7) != 0)
      {
        v144 = *(uint64_t **)((v138 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v144 = (uint64_t *)(v138 & 0xFFFFFFFFFFFFFFF8);
        v126[6] = v144;
      }
      v145 = *v144;
      if ((v145 & 4) != 0)
        goto LABEL_328;
      if ((v145 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_328;
      UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v145 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
      if (!UnderlyingObject)
        goto LABEL_328;
      v147 = *(int8x8_t *)(a1 + 2336);
      if (!*(_QWORD *)&v147)
        goto LABEL_328;
      v148 = 0x9DDFEA08EB382D69
           * (((8 * (_DWORD)UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
      v149 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v148 >> 47) ^ v148);
      v150 = 0x9DDFEA08EB382D69 * (v149 ^ (v149 >> 47));
      v151 = (uint8x8_t)vcnt_s8(v147);
      v151.i16[0] = vaddlv_u8(v151);
      if (v151.u32[0] <= 1uLL)
        v152 = (*(_QWORD *)&v147 - 1) & v150;
      else
        v152 = v150 < *(_QWORD *)&v147 ? v150 : v150 % *(_QWORD *)&v147;
      v153 = *(uint64_t ***)(*(_QWORD *)(a1 + 2328) + 8 * v152);
      if (!v153)
        goto LABEL_328;
      v154 = *v153;
      if (!*v153)
        goto LABEL_328;
      while (1)
      {
        v155 = v154[1];
        if (v155 == v150)
        {
          if ((llvm *)v154[2] == UnderlyingObject)
          {
            v156 = v154;
            do
              v156 = (uint64_t *)*v156;
            while (v156 && (llvm *)v156[2] == UnderlyingObject);
            while (1)
            {
              if (v154 == v156)
                goto LABEL_328;
              v157 = v154[3];
              v158 = v157;
              if ((*(_BYTE *)(v157 + 236) & 1) == 0)
              {
                llvm::SUnit::ComputeDepth((llvm::SUnit *)v154[3]);
                v158 = v154[3];
              }
              if (*(_DWORD *)(v157 + 240) + *(unsigned __int16 *)(v158 + 226) >= v128)
                break;
              v154 = (uint64_t *)*v154;
            }
LABEL_294:
            sub_1C4774094(v514, v119);
            LODWORD(v522) = v522 - 1;
            goto LABEL_328;
          }
        }
        else
        {
          if (v151.u32[0] <= 1uLL)
          {
            v155 &= *(_QWORD *)&v147 - 1;
          }
          else if (v155 >= *(_QWORD *)&v147)
          {
            v155 %= *(_QWORD *)&v147;
          }
          if (v155 != v152)
            goto LABEL_328;
        }
        v154 = (uint64_t *)*v154;
        if (!v154)
          goto LABEL_328;
      }
    }
    v131 = *(int8x8_t *)(a1 + 2296);
    if (!*(_QWORD *)&v131)
      goto LABEL_328;
    v132 = *(unsigned int *)(v130 + 32 * v129 + 4);
    v133 = (uint8x8_t)vcnt_s8(v131);
    v133.i16[0] = vaddlv_u8(v133);
    if (v133.u32[0] <= 1uLL)
    {
      v134 = (v131.i32[0] - 1) & v132;
    }
    else
    {
      v134 = v132;
      if (*(_QWORD *)&v131 <= v132)
        v134 = v132 % *(_QWORD *)&v131;
    }
    v135 = *(uint64_t ***)(*(_QWORD *)(a1 + 2288) + 8 * v134);
    if (!v135)
      goto LABEL_328;
    v136 = *v135;
    if (!*v135)
      goto LABEL_328;
    while (2)
    {
      v137 = v136[1];
      if (v137 != v132)
      {
        if (v133.u32[0] > 1uLL)
        {
          if (v137 >= *(_QWORD *)&v131)
            v137 %= *(_QWORD *)&v131;
        }
        else
        {
          v137 &= *(_QWORD *)&v131 - 1;
        }
        if (v137 != v134)
          goto LABEL_328;
        goto LABEL_274;
      }
      if (*((_DWORD *)v136 + 4) != (_DWORD)v132)
      {
LABEL_274:
        v136 = (uint64_t *)*v136;
        if (!v136)
          goto LABEL_328;
        continue;
      }
      break;
    }
    v141 = v136;
    do
      v141 = (uint64_t *)*v141;
    while (v141 && *((_DWORD *)v141 + 4) == (_DWORD)v132);
    while (v136 != v141)
    {
      v142 = v136[3];
      v143 = v142;
      if ((*(_BYTE *)(v142 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v136[3]);
        v143 = v136[3];
      }
      if (*(_DWORD *)(v142 + 240) + *(unsigned __int16 *)(v143 + 226) >= v128)
        goto LABEL_294;
      v136 = (uint64_t *)*v136;
    }
LABEL_328:
    if (++v118 != v117)
      continue;
    break;
  }
LABEL_333:
  if (!*(_BYTE *)(a1 + 3263))
  {
    v161 = *(_DWORD *)(a1 + 3216);
    v159 = v522;
    if (v522 >= v161
      && *(_DWORD *)(a1 + 3204) - (_DWORD)v522 + ((*(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088)) >> 3) >= v161)
    {
      v160 = *(_BYTE *)(a1 + 3261);
      if (v160)
      {
        v170 = *(_DWORD *)(a1 + 3188);
        if (v170)
          v171 = v170 >= *(_DWORD *)(a1 + 3200);
        else
          v171 = 1;
        v160 = v171;
      }
      goto LABEL_339;
    }
LABEL_338:
    v160 = 0;
LABEL_339:
    *(_BYTE *)(a1 + 3263) = v160;
    goto LABEL_340;
  }
  v159 = v522;
  if (!(_DWORD)v522)
    goto LABEL_338;
  v160 = 1;
LABEL_340:
  v162 = *(_BYTE *)(a1 + 3261);
  *(_BYTE *)(a1 + 3264) = v162;
  if (!(v162 | v160) && *(_DWORD *)(a1 + 3204) && v159)
  {
    v163 = *(const llvm::SUnit ***)(a1 + 1088);
    v164 = *(const llvm::SUnit ***)(a1 + 1096);
    if (v163 == v164)
    {
      v168 = 1;
    }
    else
    {
      do
      {
        v165 = *v163;
        v166 = a1 + 2344;
        while (1)
        {
          v166 = *(_QWORD *)v166;
          if (!v166)
            break;
          if (sub_1C496FC4C(a1, v165, *(const llvm::SUnit **)(v166 + 24)))
          {
LABEL_357:
            v168 = 0;
            goto LABEL_366;
          }
        }
        v167 = a1 + 2304;
        while (1)
        {
          v167 = *(_QWORD *)v167;
          if (!v167)
            break;
          if (sub_1C496FC4C(a1, v165, *(const llvm::SUnit **)(v167 + 24)))
            goto LABEL_357;
        }
        ++v163;
        v168 = 1;
      }
      while (v163 != v164);
    }
LABEL_366:
    *(_BYTE *)(a1 + 3264) |= v168;
  }
  v172 = 0;
  v173 = *(_DWORD *)(a1 + 3164);
  *(_BYTE *)(a1 + 3250) = (float)(*(float *)(a1 + 3244) * (float)v173) <= v6;
  if (v515 > v173)
    v173 = v515;
  *(_DWORD *)(a1 + 3164) = v173;
  *(_BYTE *)(a1 + 3262) = 0;
  v546 = 0;
  v545 = 0;
  v547 = 0xFFFFFFFF7FFFFFFFLL;
  v548 = 0;
  v549 = 0;
  v551 = 7679;
  v174 = (v552 | (v553 << 16)) & 0xFFFC4FDC;
  memset(v550, 255, sizeof(v550));
  v552 &= 0x4FDCu;
  v553 = BYTE2(v174);
  do
  {
    v175 = &(&v534)[v172];
    *v175 = 0;
    v175[1] = 0;
    v175[2] = (char *)0xFFFFFFFF7FFFFFFFLL;
    *((_BYTE *)v175 + 24) = 0;
    *((_BYTE *)v175 + 28) = 0;
    *((_WORD *)v175 + 23) = 7679;
    v175[4] = (char *)-1;
    *(char **)((char *)v175 + 37) = (char *)-1;
    v176 = &v538[v172 * 8 + 16];
    v177 = (*(unsigned __int16 *)&v538[v172 * 8 + 16] | (v538[v172 * 8 + 18] << 16)) & 0xFC4FDC;
    *(_WORD *)v176 &= 0x4FDCu;
    v176[2] = BYTE2(v177);
    v172 += 7;
  }
  while (v172 != 63);
  v178 = 0;
  while (2)
  {
    v513 = v178;
    v179 = a1 + 56 * v178;
    v180 = *(llvm::SUnit ***)(v179 + 864);
    v516 = *(llvm::SUnit ***)(v179 + 872);
    v520 = &(&v534)[7 * v178];
    if (v180 != v516)
    {
      do
      {
        v526 = 0xFFFFFFFF7FFFFFFFLL;
        LOBYTE(v527) = 0;
        v528 = 0;
        v531 = 7679;
        memset(v529, 255, sizeof(v529));
        v222 = v532 | (v533 << 16);
        v532 &= 0x4FDCu;
        v533 = (v222 & 0xFC4FDCu) >> 16;
        v524 = (llvm::SUnit *)v180;
        v525 = 0;
        v223 = *v180;
        v525 = *v180;
        v523 = v180;
        v224 = *((_QWORD *)*v180 + 1);
        v225 = *(unsigned __int16 **)(v224 + 16);
        v226 = *v225;
        v228 = (v226 - 9) <= 0x3C && ((1 << (v226 - 9)) & 0x1000000000000605) != 0
            || v226 == 0;
        if (v228 || (v225[4] & 0x10) != 0)
        {
          v230 = 0;
          v231 = 0;
        }
        else
        {
          v229 = *((_QWORD *)v225 + 2) & 1;
          v230 = v229 == 0;
          v231 = (4 * v229) ^ 4;
        }
        v232 = v231 | v222 & 0xFC4FD8;
        v233 = v232 | v230 ^ (*(_BYTE *)(a1 + 3248) != 0);
        v234 = HIWORD(v232);
        v533 = BYTE2(v232);
        v532 = v233;
        v235 = v233 | (32 * (*v225 - 4581 < 0xC));
        v533 = v234;
        v532 = v235;
        v236 = *(unsigned __int16 **)(v224 + 16);
        if ((~*((_DWORD *)v236 + 4) & 0x800100) != 0 && *v236 - 4821 > 3)
          v237 = 0;
        else
          v237 = 512;
        v238 = v235 & 0xFC4DFD;
        v239 = v237 | v238;
        v533 = BYTE2(v238);
        v532 = v237 | v238;
        if ((*(_BYTE *)(*(_QWORD *)(v224 + 16) + 20) & 0x10) == 0)
        {
          v240 = 0;
          goto LABEL_513;
        }
        if ((sub_1C49727E0(a1, (uint64_t)v223, 1u) & 1) != 0)
        {
          NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v224);
          if (NumExplicitOperands)
          {
            v242 = 0;
            v243 = 0;
            v244 = NumExplicitOperands;
            v245 = *(_QWORD *)(v224 + 32);
            while (1)
            {
              if ((*(_DWORD *)(v245 + 32 * v243) & 0x10000FF) == 0)
              {
                v246 = *(_DWORD *)(v245 + 32 * v243 + 4);
                if (v246 < 0)
                  break;
              }
LABEL_510:
              if (++v243 == v244)
              {
                v239 = v532 | (v533 << 16);
                v240 = (v242 > 1) << 10;
                goto LABEL_513;
              }
            }
            v247 = *(_QWORD *)(a1 + 48);
            v248 = *(_QWORD *)(v247 + 24);
            v249 = *(_QWORD *)(v248 + 16 * (v246 & 0x7FFFFFFF) + 8);
            if (v249)
            {
              v250 = v249;
              if ((*(_DWORD *)v249 & 0x1000000) != 0
                || (v250 = *(_QWORD *)(v249 + 24)) != 0 && (*(_BYTE *)(v250 + 3) & 1) != 0)
              {
                v251 = *(_QWORD *)(v250 + 8);
                LOBYTE(v252) = 1;
LABEL_470:
                v253 = *(_QWORD *)(v251 + 16);
                if (*(_WORD *)v253 == 19)
                {
                  v254 = *(unsigned int *)(*(_QWORD *)(v251 + 32) + 36);
                  v255 = (uint64_t *)((v254 & 0x80000000) != 0
                                   ? v248 + 16 * (v254 & 0x7FFFFFFF) + 8
                                   : *(_QWORD *)(v247 + 272) + 8 * v254);
                  v256 = *v255;
                  if (v256)
                  {
                    if ((*(_BYTE *)(v256 + 3) & 1) != 0
                      || (v256 = *(_QWORD *)(v256 + 24)) != 0 && (*(_BYTE *)(v256 + 3) & 1) != 0)
                    {
                      v258 = *(_QWORD *)(v256 + 24);
                      if (!v258 || (*(_BYTE *)(v258 + 3) & 1) == 0)
                        v253 = *(_QWORD *)(*(_QWORD *)(v256 + 8) + 16);
                    }
                  }
                }
                v257 = (*(_QWORD *)(v253 + 16) & 0xD00) == 2304;
                if (!v257)
                  goto LABEL_510;
                v252 = v257 & v252;
                while (1)
                {
                  v250 = *(_QWORD *)(v250 + 24);
                  if (!v250 || (*(_BYTE *)(v250 + 3) & 1) == 0)
                    break;
                  if (*(_QWORD *)(v250 + 8) != v251)
                  {
                    v251 = *(_QWORD *)(v250 + 8);
                    goto LABEL_470;
                  }
                }
                if (!v252)
                  goto LABEL_510;
              }
              if ((*(_DWORD *)v249 & 0x81000000) == 0)
              {
LABEL_493:
                v259 = 0;
                v260 = *(_QWORD *)(v249 + 8);
LABEL_494:
                v261 = *(_QWORD *)(*(_QWORD *)(v260 + 16) + 16);
                if (v259 == 3)
                  v262 = 7;
                else
                  v262 = 0;
                v263 = (v261 & 0x1000000000) == 0;
                if ((v261 & 0x1000000000) != 0)
                  v264 = v262;
                else
                  v264 = 8;
                if (!v263)
                  ++v259;
                if ((v264 | 8) == 8)
                {
                  while (1)
                  {
                    v249 = *(_QWORD *)(v249 + 24);
                    if (!v249)
                      break;
                    if ((*(_DWORD *)v249 & 0x81000000) == 0 && *(_QWORD *)(v249 + 8) != v260)
                    {
                      v260 = *(_QWORD *)(v249 + 8);
                      goto LABEL_494;
                    }
                  }
                }
                goto LABEL_508;
              }
              while (1)
              {
                v249 = *(_QWORD *)(v249 + 24);
                if (!v249)
                  break;
                if ((*(_DWORD *)v249 & 0x81000000) == 0)
                  goto LABEL_493;
              }
            }
            v259 = 0;
LABEL_508:
            if (v259 == 4)
              ++v242;
            goto LABEL_510;
          }
        }
        v240 = 0;
        v239 = v532 | (v533 << 16);
LABEL_513:
        v214 = 0;
        v265 = v239 & 0xFFFFFBFF | v240;
        v533 = BYTE2(v239);
        v532 = v265;
        v266 = *(_QWORD *)(a1 + 64);
        v267 = **(unsigned __int16 **)(v224 + 16);
        if (v267 > 0x865)
        {
          if (v267 == 4578 || v267 == 4580)
            goto LABEL_439;
          if (v267 == 2150)
            goto LABEL_516;
        }
        else
        {
          if (v267 != 1100)
          {
            if (v267 != 2114)
              goto LABEL_523;
LABEL_516:
            v214 = *(unsigned __int8 *)(v266 + 338);
            if (*(_BYTE *)(v266 + 338))
              goto LABEL_439;
            goto LABEL_523;
          }
          v214 = *(unsigned __int8 *)(v266 + 338);
          if (!*(_BYTE *)(v266 + 338))
            goto LABEL_523;
          if (*(_DWORD *)(*(_QWORD *)(v224 + 32) + 64) == 7)
          {
LABEL_439:
            v214 = 64;
            goto LABEL_523;
          }
          v214 = 0;
        }
LABEL_523:
        v269 = v214 | v265 & 0xFFFFFFBF;
        v533 = BYTE2(v265);
        v532 = v214 | v265 & 0xFFBF;
        v270 = *((_QWORD *)v225 + 2);
        if ((v270 & 0xD00) == 0x900 || (v270 & 0xE00) == 0xA00)
        {
          if ((v271 = *(unsigned __int16 **)(v224 + 16), v272 = *v271, (v272 - 9) <= 0x3C)
            && ((1 << (v272 - 9)) & 0x1000000000000605) != 0
            || !*v271
            || (v271[4] & 0x10) != 0
            || (v271[8] & 1) != 0)
          {
            v269 = v265 | 0x40;
            v533 = BYTE2(v265);
            v532 = v265 | 0x40;
          }
        }
        v273 = *((_DWORD *)v225 + 2) >> 13;
        v274 = v269 & 0xFFFFFEFF | (((*((_DWORD *)v225 + 2) & 0x2000) != 0) << 8);
        v533 = BYTE2(v269);
        v532 = v269 & 0xFEFF | ((v273 & 1) << 8);
        if (sub_1C496F2F0(v224))
          v275 = 2;
        else
          v275 = 0;
        v276 = v274 & 0xFFFD;
        v277 = v274 & 0xFFFFFFFD | v275;
        v533 = BYTE2(v269);
        v532 = v276 | v275;
        if (sub_1C496FBB0(v224))
          v278 = 8;
        else
          v278 = 0;
        v279 = v277 & 0xFFF7;
        v280 = v277 & 0xFFFFFFF7 | v278;
        v533 = BYTE2(v269);
        v532 = v279 | v278;
        if (sub_1C4971F84(v224))
          v281 = 16;
        else
          v281 = 0;
        v282 = v280 & 0xFFEF;
        v283 = v280 & 0xFFFFFFEF | v281;
        v533 = BYTE2(v269);
        v532 = v282 | v281;
        if (sub_1C49719DC(v224))
          v284 = 128;
        else
          v284 = 0;
        v285 = v283 & 0xFFFFF77F | v284;
        v533 = BYTE2(v269);
        v532 = v283 & 0xF77F | v284;
        if ((v269 & 4) != 0)
        {
          v369 = v283 & 0xB77F | v284 & 0xB7FF;
          v533 = BYTE2(v285);
          v532 = v285 & 0xB7FF;
        }
        else
        {
          v554 = (void *)1;
          for (i = 8; i != 72; i += 8)
            *(_DWORD *)((char *)&v554 + i) = -1;
          v287 = *((unsigned __int8 *)v225 + 4);
          v288 = v225[1];
          if (v288 > v287)
          {
            while (1)
            {
              v289 = *(_QWORD *)(v224 + 32);
              v290 = *(_DWORD *)(v289 + 32 * v287);
              if (!(_BYTE)v290)
              {
                v291 = *(_DWORD *)(v289 + 32 * v287 + 4);
                v292 = (int)v554;
                v293 = v554 & 1;
                if ((v554 & 1) != 0)
                {
                  v294 = 8;
                  v295 = (char *)&v555;
                }
                else
                {
                  v294 = v556;
                  if (!(_DWORD)v556)
                  {
                    v304 = 0;
                    v305 = 0;
                    goto LABEL_565;
                  }
                  v295 = (char *)v555;
                }
                v296 = v294 - 1;
                v297 = v296 & (37 * v291);
                v298 = &v295[8 * v297];
                v299 = *(_DWORD *)v298;
                if (v291 != *(_DWORD *)v298)
                  break;
              }
LABEL_570:
              if (++v287 >= (unint64_t)v288)
                goto LABEL_608;
            }
            v300 = 0;
            v301 = 1;
            while (v299 != -1)
            {
              if (v300)
                v302 = 0;
              else
                v302 = v299 == -2;
              if (v302)
                v300 = v298;
              v303 = v297 + v301++;
              v297 = v303 & v296;
              v298 = &v295[8 * v297];
              v299 = *(_DWORD *)v298;
              if (v291 == *(_DWORD *)v298)
                goto LABEL_570;
            }
            if (v300)
              v304 = v300;
            else
              v304 = v298;
            if ((v554 & 1) != 0)
              v305 = 8;
            else
              v305 = v556;
LABEL_565:
            if (4 * (v554 >> 1) + 4 < 3 * v305)
            {
              if (v305 + ~(v554 >> 1) - HIDWORD(v554) > v305 >> 3)
              {
LABEL_567:
                LODWORD(v554) = (v292 & 0xFFFFFFFE | v293) + 2;
                if (*(_DWORD *)v304 != -1)
                  --HIDWORD(v554);
                *(_DWORD *)v304 = v291;
                *((_DWORD *)v304 + 1) = (v290 >> 8) & 0xFFF;
                v288 = v225[1];
                goto LABEL_570;
              }
              sub_1C4840AE0((uint64_t)&v554, v305);
              v292 = (int)v554;
              if ((v554 & 1) != 0)
              {
                v315 = 8;
                v316 = (char *)&v555;
                goto LABEL_589;
              }
              v315 = v556;
              if ((_DWORD)v556)
              {
                v316 = (char *)v555;
LABEL_589:
                v293 = v554 & 1;
                v317 = v315 - 1;
                v318 = (v315 - 1) & (37 * v291);
                v304 = &v316[8 * v318];
                v319 = *(_DWORD *)v304;
                if (v291 == *(_DWORD *)v304)
                  goto LABEL_567;
                v311 = 0;
                v320 = 1;
                while (v319 != -1)
                {
                  if (v311)
                    v321 = 0;
                  else
                    v321 = v319 == -2;
                  if (v321)
                    v311 = v304;
                  v322 = v318 + v320++;
                  v318 = v322 & v317;
                  v304 = &v316[8 * (v322 & v317)];
                  v319 = *(_DWORD *)v304;
                  if (v291 == *(_DWORD *)v304)
                    goto LABEL_567;
                }
LABEL_599:
                if (v311)
                  v304 = v311;
                goto LABEL_567;
              }
LABEL_607:
              v293 = 0;
              v304 = 0;
              goto LABEL_567;
            }
            sub_1C4840AE0((uint64_t)&v554, 2 * v305);
            v292 = (int)v554;
            if ((v554 & 1) != 0)
            {
              v306 = 8;
              v307 = (char *)&v555;
            }
            else
            {
              v306 = v556;
              if (!(_DWORD)v556)
                goto LABEL_607;
              v307 = (char *)v555;
            }
            v293 = v554 & 1;
            v308 = v306 - 1;
            v309 = (v306 - 1) & (37 * v291);
            v304 = &v307[8 * v309];
            v310 = *(_DWORD *)v304;
            if (v291 == *(_DWORD *)v304)
              goto LABEL_567;
            v311 = 0;
            v312 = 1;
            while (v310 != -1)
            {
              if (v311)
                v313 = 0;
              else
                v313 = v310 == -2;
              if (v313)
                v311 = v304;
              v314 = v309 + v312++;
              v309 = v314 & v308;
              v304 = &v307[8 * (v314 & v308)];
              v310 = *(_DWORD *)v304;
              if (v291 == *(_DWORD *)v304)
                goto LABEL_567;
            }
            goto LABEL_599;
          }
LABEL_608:
          v323 = *((unsigned int *)v525 + 10);
          if ((_DWORD)v323)
          {
            v324 = (uint64_t *)*((_QWORD *)v525 + 4);
            v325 = &v324[2 * v323];
            while (1)
            {
              v326 = *v324;
              if ((*v324 & 6) == 0)
              {
                v327 = v326 & 0xFFFFFFFFFFFFFFF8;
                if (*(_DWORD *)((v326 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
                {
                  v328 = *(_QWORD *)(v327 + 8);
                  v329 = *(unsigned __int16 **)(v328 + 16);
                  v330 = *v329;
                  v331 = (v330 - 9) > 0x3C
                      || ((1 << (v330 - 9)) & 0x1000000000000605) == 0;
                  if (v331 && v330 != 0 && (v329[4] & 0x10) == 0 && (v329[8] & 1) == 0)
                  {
                    v333 = *(_DWORD **)(v328 + 32);
                    if ((*v333 & 0x10000FF) == 0x1000000)
                      break;
                  }
                }
              }
LABEL_611:
              v324 += 2;
              if (v324 == v325)
                goto LABEL_661;
            }
            v334 = v333[1];
            if ((v554 & 1) != 0)
            {
              v335 = 8;
              v336 = &v555;
              goto LABEL_626;
            }
            v336 = v555;
            v335 = v556;
            if ((_DWORD)v556)
            {
LABEL_626:
              v337 = v335 - 1;
              LODWORD(v338) = (v335 - 1) & (37 * v334);
              v339 = (char *)&v336[2 * v338];
              v340 = *(_DWORD *)v339;
              if (v334 != *(_DWORD *)v339)
              {
                v341 = 1;
                while (v340 != -1)
                {
                  v342 = v338 + v341++;
                  v338 = v342 & v337;
                  v340 = v336[2 * v338];
                  if (v334 == v340)
                    goto LABEL_633;
                }
                if ((v554 & 1) != 0)
                {
                  v336 = &v555;
                  v338 = 8;
                }
                else
                {
                  v336 = v555;
                  v338 = v556;
                }
LABEL_633:
                v339 = (char *)&v336[2 * v338];
              }
              v343 = (char *)&v555;
              if ((v554 & 1) == 0)
                v343 = (char *)v555;
              v344 = v556;
              if ((v554 & 1) != 0)
                v344 = 8;
              if (&v343[8 * v344] != v339)
              {
                v345 = *(unsigned int *)(v327 + 120);
                if ((_DWORD)v345)
                {
                  v346 = *((_DWORD *)v339 + 1);
                  v347 = *(_QWORD **)(v327 + 112);
                  v348 = &v347[2 * v345];
                  while (1)
                  {
                    if ((*v347 & 6) == 0)
                    {
                      v349 = *v347 & 0xFFFFFFFFFFFFFFF8;
                      if (*(_DWORD *)(v349 + 192) != -1
                        && v525 != (llvm::SUnit *)v349
                        && (*(_WORD *)(v349 + 228) & 0x400) == 0)
                      {
                        v351 = *(_QWORD *)(v349 + 8);
                        v352 = *(_QWORD *)(v351 + 16);
                        v353 = *(unsigned __int8 *)(v352 + 4);
                        v354 = *(unsigned __int16 *)(v352 + 2);
                        if (v354 > v353)
                          break;
                      }
                    }
LABEL_655:
                    v347 += 2;
                    if (v347 == v348)
                      goto LABEL_656;
                  }
                  v355 = *(_QWORD *)(v351 + 32);
                  v356 = v354 - v353;
                  v357 = (_DWORD *)(v355 + 32 * v353 + 4);
                  while (*(v357 - 1) || *v357 != v334 || ((*(v357 - 1) >> 8) & 0xFFF) != v346)
                  {
                    v357 += 8;
                    if (!--v356)
                      goto LABEL_655;
                  }
                }
                else
                {
LABEL_656:
                  LODWORD(v542) = v334;
                  sub_1C4840998((uint64_t)&v554, &v542);
                }
              }
              goto LABEL_611;
            }
            v338 = 0;
            goto LABEL_633;
          }
LABEL_661:
          LOWORD(v359) = *(_WORD *)&v529[10];
          if (*(unsigned __int16 *)&v529[10] == 0xFFFF)
          {
            v360 = *((unsigned int *)v525 + 10);
            if ((_DWORD)v360)
            {
              v359 = 0;
              v361 = (_QWORD *)*((_QWORD *)v525 + 4);
              v362 = 16 * v360;
              while (1)
              {
                v363 = *v361 & 0xFFFFFFFFFFFFFFF8;
                if (*(_DWORD *)(v363 + 212) != 1)
                {
                  v364 = 0;
                  goto LABEL_675;
                }
                v364 = 0;
                v365 = *(_QWORD *)(v363 + 8);
                v366 = *(_QWORD *)(a1 + 64);
                v367 = **(unsigned __int16 **)(v365 + 16);
                if (v367 > 0x865)
                {
                  if (v367 == 4578 || v367 == 4580)
                  {
                    v364 = 1;
                    goto LABEL_675;
                  }
                  if (v367 == 2150)
LABEL_668:
                    v364 = *(_BYTE *)(v366 + 338) != 0;
                }
                else
                {
                  if (v367 == 1100)
                  {
                    v364 = *(unsigned __int8 *)(v366 + 338);
                    if (*(_BYTE *)(v366 + 338))
                      v364 = *(unsigned __int8 *)(*(_QWORD *)(v365 + 32) + 64) == 7;
                    goto LABEL_675;
                  }
                  if (v367 == 2114)
                    goto LABEL_668;
                }
LABEL_675:
                v359 += v364;
                v361 += 2;
                v362 -= 16;
                if (!v362)
                  goto LABEL_682;
              }
            }
            LOWORD(v359) = 0;
LABEL_682:
            *(_WORD *)&v529[10] = v359;
          }
          v370 = v532;
          v371 = v532 & 0xBFFF | (v533 << 16);
          v532 = v532 & 0xBFFF | ((v554 >> 1 <= (unsigned __int16)v359) << 14);
          v533 = BYTE2(v371);
          if (*(_DWORD *)(a1 + 2148) != *(_DWORD *)(a1 + 2152) && (v370 & 0x140) == 0)
          {
            v372 = v525;
            if ((*((_BYTE *)v525 + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(v525);
            if (*((_DWORD *)v372 + 60) <= 0x1Du && *(_QWORD *)(a1 + 1256) == *(_QWORD *)(a1 + 1264))
            {
              v532 |= 0x800u;
              v378 = *(_QWORD *)(a1 + 2136);
              v379 = 2144;
              if (v378 == *(_QWORD *)(a1 + 2128))
                v379 = 2148;
              v380 = *(unsigned int *)(a1 + v379);
              if ((_DWORD)v380)
              {
                v381 = 8 * v380;
                v210 = *(const llvm::SUnit ***)(a1 + 2136);
                while ((unint64_t)*v210 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v210;
                  v381 -= 8;
                  if (!v381)
                    goto LABEL_689;
                }
              }
              else
              {
                v210 = *(const llvm::SUnit ***)(a1 + 2136);
              }
              v211 = (const llvm::SUnit **)(v378 + 8 * v380);
              if (v210 != v211)
              {
                v212 = *v210;
LABEL_432:
                if (sub_1C496FC4C(a1, v525, v212))
                {
                  v213 = v532 & 0xF7FF | (v533 << 16);
                  v532 &= ~0x800u;
                  v533 = BYTE2(v213);
                }
                else
                {
                  while (++v210 != v211)
                  {
                    v212 = *v210;
                    if ((unint64_t)*v210 < 0xFFFFFFFFFFFFFFFELL)
                      goto LABEL_432;
                  }
                }
              }
            }
          }
LABEL_689:
          if ((v554 & 1) == 0)
            MEMORY[0x1CAA32FB4](v555, 4);
          v369 = v532;
          if ((v532 & 0x800) != 0)
            goto LABEL_701;
        }
        v373 = *(const llvm::SUnit **)(a1 + 688);
        if (v373 && v525 != v373)
        {
          if ((v369 & 4) != 0)
          {
            if ((v369 & 0x100) != 0)
              goto LABEL_701;
          }
          else if ((v369 & 0x100) != 0 || *(_BYTE *)(*(_QWORD *)(a1 + 64) + 318))
          {
            goto LABEL_701;
          }
          if (!sub_1C496FC4C(a1, v525, v373))
            v532 |= 0x800u;
        }
LABEL_701:
        v530 = 0;
        if ((*(_BYTE *)(*(_QWORD *)(v224 + 16) + 20) & 4) == 0)
          goto LABEL_719;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 318))
          goto LABEL_719;
        v374 = v525;
        if (*((_DWORD *)v525 + 51) != 1)
          goto LABEL_719;
        v220 = *(unsigned int **)(v224 + 32);
        v375 = *v220;
        if ((*v220 & 0x10000FF) != 0x1000000)
          goto LABEL_719;
        v376 = (uint64_t *)*((_QWORD *)v525 + 14);
        v377 = *v376;
        v215 = *((_QWORD *)v525 + 3);
        if (!v215)
        {
          if (byte_1ED8303C8)
          {
            v382 = *(_QWORD *)(a1 + 8);
            v383 = *(_QWORD *)(v382 + 672);
            if (v383)
            {
              v218 = *((_QWORD *)v525 + 1);
              v215 = v383 + 24 * *(unsigned __int16 *)(*(_QWORD *)(v218 + 16) + 6);
              v221 = *v376;
              if ((*(_WORD *)(v215 + 8) & 0x1FFF) == 0x1FFE)
              {
                do
                {
                  v216 = v218;
                  v217 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v382 + 808) + 200))(*(_QWORD *)(v382 + 808));
                  v218 = v216;
                  v219 = *(_QWORD *)(v382 + 672);
                }
                while ((*(_WORD *)(v219 + 24 * v217 + 8) & 0x1FFF) == 0x1FFE);
                v215 = v219 + 24 * v217;
                v220 = *(unsigned int **)(v224 + 32);
                v221 = *v376;
              }
              *((_QWORD *)v374 + 3) = v215;
              v375 = *v220;
              goto LABEL_718;
            }
          }
          v215 = 0;
        }
        v221 = *v376;
LABEL_718:
        v384 = sub_1C4971FF4(*(_QWORD *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), v220[1], (v375 >> 8) & 0xFFF);
        if ((v221 & 6) == 0 && *(_DWORD *)((v377 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
        {
          v202 = v384;
          v203 = *(unsigned __int16 **)(*(_QWORD *)((v377 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
          v204 = *v203;
          v205 = (v204 - 9) > 0x3C || ((1 << (v204 - 9)) & 0x1000000000000605) == 0;
          v206 = !v205 || v204 == 0;
          if ((v206 || (v203[4] & 0x10) != 0 || (v203[8] & 1) != 0)
            && (~*(unsigned __int16 *)(v215 + 8) & 0x1FFF) != 0
            && sub_1C4972054(a1, (uint64_t)v525, 1) >= *(_DWORD *)(a1 + 3152)
                                                                  + (*(_WORD *)(v215 + 8) & 0x1FFFu)
                                                                  - 1)
          {
            if (v202 >= 2)
              v207 = 2;
            else
              v207 = v202;
            v208 = v207 != 1;
            v530 = 1;
            if (sub_1C49726B8(a1, v377 & 0xFFFFFFFFFFFFFFF8))
              v209 = 0;
            else
              v209 = 2;
            v530 |= (4 * v208) | v209;
          }
        }
LABEL_719:
        v385 = *(_QWORD *)(a1 + 8);
        v386 = *(_QWORD *)(v385 + 2720);
        v387 = *(_QWORD *)(v386 + 8);
        v388 = *((unsigned int *)v525 + 48);
        if (v387 == *(_QWORD *)(v386 + 16))
          v389 = 0;
        else
          v389 = *(_DWORD *)(v387 + 8 * v388 + 4);
        v390 = *(_DWORD *)(v387 + 8 * v388);
        v391 = v532;
        v392 = ((*(_QWORD *)(*(_QWORD *)(v385 + 2728) + 8 * (v389 >> 6)) >> v389) & 1) << 15;
        v393 = v532 & 0x7FFF | (v533 << 16);
        v533 = BYTE2(v393);
        v532 = v393 | v392;
        if (v390 >= *(_DWORD *)(v386 + 4))
          v394 = v392;
        else
          v394 = 0x8000;
        if ((v391 & 4) != 0)
          v394 = 0;
        v533 = BYTE2(v393);
        v532 = v394 | v393;
        v395 = sub_1C4971A84((uint64_t)v525, *(_QWORD *)(a1 + 680));
        v396 = v532 | (v533 << 16);
        if (v395)
          v397 = 0x10000;
        else
          v397 = 0;
        v398 = v396 & 0xFFFEFFFF | v397;
        v399 = HIWORD(v398);
        v533 = BYTE2(v398);
        if (v525 && (v400 = *(_QWORD *)(a1 + 120)) != 0)
        {
          v401 = *(_QWORD *)(a1 + 48);
          v402 = *((_QWORD *)v525 + 1);
          if ((*(_BYTE *)(*(_QWORD *)(v402 + 16) + 16) & 0x10) != 0
            && (v403 = *(_QWORD *)(v400 + 8), (*(_QWORD *)(*(_QWORD *)(v403 + 16) + 16) & 2) != 0)
            && ((v404 = *(unsigned int *)(*(_QWORD *)(v402 + 32) + 4), (v404 & 0x80000000) != 0)
              ? (v405 = (uint64_t *)(*(_QWORD *)(v401 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8))
              : (v405 = (uint64_t *)(*(_QWORD *)(v401 + 272) + 8 * v404)),
                (v407 = *v405) != 0))
          {
            while ((*(_BYTE *)(v407 + 3) & 1) != 0)
            {
              v407 = *(_QWORD *)(v407 + 24);
              if (!v407)
                goto LABEL_741;
            }
            v409 = *(_QWORD *)(v407 + 8);
            if (v409 != v403)
            {
              while (1)
              {
                v407 = *(_QWORD *)(v407 + 24);
                if (!v407)
                  break;
                if ((*(_BYTE *)(v407 + 3) & 1) == 0)
                {
                  v410 = *(_QWORD *)(v407 + 8);
                  if (v410 != v409)
                  {
                    v408 = 4096;
                    v409 = *(_QWORD *)(v407 + 8);
                    if (v410 == v403)
                      goto LABEL_750;
                  }
                }
              }
LABEL_741:
              v408 = 0;
              goto LABEL_750;
            }
            v408 = 4096;
LABEL_750:
            v406 = v408 | v398 & 0xFFFFEFFF;
          }
          else
          {
            v406 = v398 & 0xFFFFEFFF;
          }
          v533 = v399;
          v532 = v406;
          if (*(_QWORD *)(a1 + 1032) != *(_QWORD *)(a1 + 1040) || *(_QWORD *)(a1 + 1088) != *(_QWORD *)(a1 + 1096))
          {
            v411 = *((_QWORD *)v525 + 1);
            v412 = *(_QWORD *)(v400 + 8);
            v413 = *(unsigned __int16 **)(v411 + 16);
            v414 = *v413;
            v415 = (v414 - 9) > 0x3C || ((1 << (v414 - 9)) & 0x1000000000000605) == 0;
            v416 = !v415 || v414 == 0;
            if ((v416 || (v413[4] & 0x10) != 0 || (v413[8] & 1) != 0)
              && **(unsigned __int16 **)(v412 + 16) - 4581 <= 0xB)
            {
              v417 = *(unsigned int *)(*(_QWORD *)(v411 + 32) + 4);
              v418 = (uint64_t *)((v417 & 0x80000000) != 0
                               ? *(_QWORD *)(v401 + 24) + 16 * (v417 & 0x7FFFFFFF) + 8
                               : *(_QWORD *)(v401 + 272) + 8 * v417);
              v199 = *v418;
              if (v199)
              {
                while ((*(_BYTE *)(v199 + 3) & 1) != 0)
                {
                  v199 = *(_QWORD *)(v199 + 24);
                  if (!v199)
                    goto LABEL_769;
                }
                v198 = *(_QWORD *)(v199 + 8);
                if (v198 == v412)
                {
                  v201 = 0x2000;
                  goto LABEL_770;
                }
                while (1)
                {
                  v199 = *(_QWORD *)(v199 + 24);
                  if (!v199)
                    break;
                  if ((*(_BYTE *)(v199 + 3) & 1) == 0)
                  {
                    v200 = *(_QWORD *)(v199 + 8);
                    if (v200 != v198)
                    {
                      v201 = 0x2000;
                      v198 = *(_QWORD *)(v199 + 8);
                      if (v200 == v412)
                        goto LABEL_770;
                    }
                  }
                }
              }
            }
          }
LABEL_769:
          v201 = 0;
        }
        else
        {
          v201 = 0;
          v406 = v398 & 0xFFFFEFFF;
        }
LABEL_770:
        v533 = BYTE2(v406);
        v532 = v201 | v406 & 0xDFFF;
        if ((v396 & 0x20) != 0 && (*(_DWORD *)(a1 + 3212) & 0x80000000) != 0)
        {
          *(_DWORD *)(a1 + 3212) = 0;
          for (j = *(uint64_t ***)(a1 + 2304); j; j = (uint64_t **)*j)
          {
            v182 = j[3];
            if ((*((_BYTE *)v182 + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth((llvm::SUnit *)j[3]);
            v183 = *((_DWORD *)v182 + 60);
            v184 = *((unsigned __int16 *)v182 + 113);
            v185 = v525;
            if ((*((_BYTE *)v525 + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(v525);
            if (*((_DWORD *)v185 + 60) >= v183 + ((3 * v184) >> 1))
            {
              v188 = 0;
            }
            else
            {
              v186 = v525;
              if ((*((_BYTE *)v525 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(v525);
              v187 = *((_DWORD *)v186 + 60);
              if ((*((_BYTE *)v182 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth((llvm::SUnit *)v182);
              v188 = v187 > *((_DWORD *)v182 + 60);
            }
            *(_DWORD *)(a1 + 3212) += v188;
          }
          v189 = *(llvm::SUnit ***)(a1 + 1088);
          v190 = *(llvm::SUnit ***)(a1 + 1096);
          while (v189 != v190)
          {
            v191 = *v189;
            if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)*v189 + 1) + 16) + 16) & 2) != 0)
            {
              if ((*((_BYTE *)v191 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(*v189);
              v192 = *((_DWORD *)v191 + 60);
              v193 = *((unsigned __int16 *)v191 + 113);
              v194 = v525;
              if ((*((_BYTE *)v525 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(v525);
              if (*((_DWORD *)v194 + 60) >= v192 + ((3 * v193) >> 1))
              {
                v197 = 0;
              }
              else
              {
                v195 = v525;
                if ((*((_BYTE *)v525 + 236) & 1) == 0)
                  llvm::SUnit::ComputeDepth(v525);
                v196 = *((_DWORD *)v195 + 60);
                if ((*((_BYTE *)v191 + 236) & 1) == 0)
                  llvm::SUnit::ComputeDepth(v191);
                v197 = v196 > *((_DWORD *)v191 + 60);
              }
              *(_DWORD *)(a1 + 3212) += v197;
            }
            ++v189;
          }
        }
        if ((v532 & 2) != 0)
        {
          v419 = sub_1C477672C((uint64_t)v514, (uint64_t)v525);
          v420 = *(_QWORD *)(a1 + 1344);
          v421 = 1352;
          if (v420 == *(_QWORD *)(a1 + 1336))
            v421 = 1356;
          v533 = ((v532 | (v533 << 16)) & 0xFFFDFFFF | ((v419 != (_QWORD *)(v420 + 8 * *(unsigned int *)(a1 + v421))) << 17)) >> 16;
        }
        sub_1C4970100(a1, (uint64_t)v520, (uint64_t)&v524);
        v180 = v523 + 1;
      }
      while (v523 + 1 != v516);
    }
    if ((&v534)[7 * v178 + 1])
    {
      v538[56 * v178 + 15] = 29;
      HIBYTE(v551) = 29;
      sub_1C4970100(a1, (uint64_t)&v545, (uint64_t)v520);
    }
    ++v178;
    if (v513 != 8)
      continue;
    break;
  }
  if (!v540)
    goto LABEL_859;
  v422 = *(_QWORD *)(a1 + 120);
  if (v422)
  {
    v423 = *(unsigned __int16 **)(*(_QWORD *)(v422 + 8) + 16);
    v424 = *v423;
    v426 = (v424 - 9) <= 0x3C && ((1 << (v424 - 9)) & 0x1000000000000605) != 0
        || v424 == 0;
    if (v426 || (v423[4] & 0x10) != 0 || (v423[8] & 1) != 0)
    {
      v427 = (v423[8] & 8) != 0 && sub_1C4971664(a1, (uint64_t)&v539) == 0;
      *(_BYTE *)(a1 + 3262) |= v427;
      if (!*(_DWORD *)(a1 + 3208) && !*(_BYTE *)(a1 + 3260))
LABEL_805:
        *(_BYTE *)(a1 + 3262) = 1;
    }
  }
  else
  {
    v428 = *(_QWORD *)(*(_QWORD *)(v540 + 8) + 24);
    if (*(_QWORD *)(v428 + 64) == *(_QWORD *)(v428 + 72))
      goto LABEL_806;
    FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(*(llvm::MachineBasicBlock **)(*(_QWORD *)(v540 + 8) + 24));
    if (v428 + 48 == FirstInstrTerminator)
      goto LABEL_806;
    v430 = *(_QWORD *)(FirstInstrTerminator + 16);
    v431 = *(_QWORD *)(v430 + 8);
    if ((*(_WORD *)(FirstInstrTerminator + 44) & 0xC) != 0 && (*(_WORD *)(FirstInstrTerminator + 44) & 4) == 0)
    {
      if ((v431 & 0x400) == 0)
      {
        v506 = FirstInstrTerminator;
        while ((*(_WORD *)(v506 + 44) & 8) != 0)
        {
          v506 = *(_QWORD *)(v506 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v506 + 16) + 9) & 4) != 0)
            goto LABEL_942;
        }
        goto LABEL_806;
      }
LABEL_942:
      if ((v431 & 0x100) != 0)
        goto LABEL_806;
      v507 = FirstInstrTerminator;
      while ((*(_WORD *)(v507 + 44) & 8) != 0)
      {
        v507 = *(_QWORD *)(v507 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v507 + 16) + 9) & 1) != 0)
          goto LABEL_806;
      }
      if ((v431 & 0x800) != 0)
        goto LABEL_806;
      while ((*(_WORD *)(FirstInstrTerminator + 44) & 8) != 0)
      {
        FirstInstrTerminator = *(_QWORD *)(FirstInstrTerminator + 8);
        if ((*(_BYTE *)(*(_QWORD *)(FirstInstrTerminator + 16) + 9) & 8) != 0)
          goto LABEL_806;
      }
    }
    else if ((*(_QWORD *)(v430 + 8) & 0xD00) != 0x400)
    {
      goto LABEL_806;
    }
    if ((*(_BYTE *)(v430 + 16) & 8) != 0)
      goto LABEL_805;
  }
LABEL_806:
  if (v546)
  {
    v433 = *(unsigned __int16 **)(*(_QWORD *)(v546 + 8) + 16);
    v434 = *v433;
    v435 = (v434 - 9) > 0x3C || ((1 << (v434 - 9)) & 0x1000000000000605) == 0;
    v436 = !v435 || v434 == 0;
    if (!v436 && (v433[4] & 0x10) == 0 && (v433[8] & 1) == 0)
    {
      if ((v552 & 1) != 0)
        goto LABEL_858;
LABEL_857:
      *(_BYTE *)(a1 + 3262) = 1;
      goto LABEL_858;
    }
  }
  if (v512 < v510 && (int)v512 >= v509)
    goto LABEL_858;
  v437 = *(unsigned __int8 *)(a1 + 3260);
  v438 = 4;
  if (!*(_BYTE *)(a1 + 3260))
  {
    if (*(int *)(a1 + 3208) >= 4)
      v438 = 4;
    else
      v438 = *(_DWORD *)(a1 + 3208);
    if (!v546)
      goto LABEL_845;
LABEL_822:
    LOWORD(v439) = *(_WORD *)&v550[10];
    if (*(unsigned __int16 *)&v550[10] == 0xFFFF)
    {
      v440 = *(unsigned int *)(v546 + 40);
      if ((_DWORD)v440)
      {
        v439 = 0;
        v441 = *(_QWORD **)(v546 + 32);
        v442 = 16 * v440;
        while (1)
        {
          v443 = *v441 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)(v443 + 212) != 1)
          {
            v444 = 0;
            goto LABEL_836;
          }
          v444 = 0;
          v445 = *(_QWORD *)(v443 + 8);
          v446 = *(_QWORD *)(a1 + 64);
          v447 = **(unsigned __int16 **)(v445 + 16);
          if (v447 > 0x865)
          {
            if (v447 == 4578 || v447 == 4580)
            {
              v444 = 1;
              goto LABEL_836;
            }
            if (v447 == 2150)
LABEL_829:
              v444 = *(_BYTE *)(v446 + 338) != 0;
          }
          else
          {
            if (v447 == 1100)
            {
              v444 = *(unsigned __int8 *)(v446 + 338);
              if (*(_BYTE *)(v446 + 338))
                v444 = *(unsigned __int8 *)(*(_QWORD *)(v445 + 32) + 64) == 7;
              goto LABEL_836;
            }
            if (v447 == 2114)
              goto LABEL_829;
          }
LABEL_836:
          v439 += v444;
          v441 += 2;
          v442 -= 16;
          if (!v442)
            goto LABEL_847;
        }
      }
      LOWORD(v439) = 0;
LABEL_847:
      *(_WORD *)&v550[10] = v439;
    }
    v439 = (unsigned __int16)v439;
    goto LABEL_849;
  }
  if (v546)
    goto LABEL_822;
LABEL_845:
  v439 = 0;
LABEL_849:
  v449 = v439 - 1;
  if (!v439)
    v449 = 0;
  v450 = v438 - v449;
  v451 = v512 - v439;
  if (v450 < v451)
    v451 = v450;
  if (v437)
    v452 = v450;
  else
    v452 = v451;
  if (v452 <= (int)((*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    goto LABEL_857;
LABEL_858:
  v541 = 29;
  HIBYTE(v551) = 29;
  sub_1C4970100(a1, (uint64_t)&v545, (uint64_t)&v539);
LABEL_859:
  v453 = v546;
  v454 = sub_1C4971864(a1, *(_QWORD *)(v546 + 8));
  v455 = v454;
  if (v454 == a1 + 888)
  {
    v554 = &v556;
    v555 = (void *)0x400000000;
    v469 = *(char **)(v454 + 32);
    v468 = *(char **)(v454 + 40);
    v470 = v468 - v469;
    if (v468 == v469)
    {
      *(_QWORD *)(a1 + 928) = *(_QWORD *)(a1 + 920);
      *(_DWORD *)(v453 + 196) &= ~2u;
    }
    else
    {
      v471 = 0;
      v472 = 8 * (v470 >> 3);
      do
      {
        v473 = *(_QWORD *)v469;
        if (v471 >= HIDWORD(v555))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v554, (uint64_t)&v556, v471 + 1, 8);
          v471 = v555;
        }
        *((_QWORD *)v554 + v471) = v473;
        v471 = (_DWORD)v555 + 1;
        LODWORD(v555) = (_DWORD)v555 + 1;
        v469 += 8;
        v472 -= 8;
      }
      while (v472);
      v480 = (uint64_t *)v554;
      *(_QWORD *)(a1 + 928) = *(_QWORD *)(a1 + 920);
      if (v471)
      {
        v481 = &v480[v471];
        do
        {
          v482 = *v480;
          if (*v480 != v546)
          {
            v484 = *(uint64_t **)(v455 + 40);
            v483 = *(_QWORD *)(v455 + 48);
            if ((unint64_t)v484 >= v483)
            {
              v486 = *(_QWORD **)(v455 + 32);
              v487 = v484 - v486;
              v488 = v487 + 1;
              if ((unint64_t)(v487 + 1) >> 61)
                abort();
              v489 = v483 - (_QWORD)v486;
              if (v489 >> 2 > v488)
                v488 = v489 >> 2;
              if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF8)
                v490 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v490 = v488;
              if (v490)
              {
                if (v490 >> 61)
                  sub_1C4764EE4();
                v491 = (char *)operator new(8 * v490);
              }
              else
              {
                v491 = 0;
              }
              v492 = &v491[8 * v487];
              *(_QWORD *)v492 = v482;
              v485 = v492 + 8;
              if (v484 != v486)
              {
                do
                {
                  v493 = *--v484;
                  *((_QWORD *)v492 - 1) = v493;
                  v492 -= 8;
                }
                while (v484 != v486);
                v484 = *(uint64_t **)(v455 + 32);
              }
              *(_QWORD *)(v455 + 32) = v492;
              *(_QWORD *)(v455 + 40) = v485;
              *(_QWORD *)(v455 + 48) = &v491[8 * v490];
              if (v484)
                operator delete(v484);
            }
            else
            {
              *v484 = v482;
              v485 = v484 + 1;
            }
            *(_QWORD *)(v455 + 40) = v485;
            *(_DWORD *)(v482 + 196) |= *(_DWORD *)v455;
          }
          ++v480;
        }
        while (v480 != v481);
        v480 = (uint64_t *)v554;
      }
      *(_DWORD *)(v546 + 196) &= ~2u;
      if (v480 != &v556)
        free(v480);
    }
  }
  else
  {
    v456 = v545;
    *(_DWORD *)(*(_QWORD *)v545 + 196) &= ~*(_DWORD *)v454;
    *v456 = *(_QWORD *)(*(_QWORD *)(v454 + 40) - 8);
    *(_QWORD *)(v454 + 40) -= 8;
  }
  if ((v552 & 2) != 0)
  {
    v508[228] = vadd_s32(v508[228], (int32x2_t)0x100000001);
LABEL_885:
    *(_DWORD *)(a1 + 3188) = 0;
    *(_QWORD *)(a1 + 3192) = 0;
    goto LABEL_886;
  }
  if ((v552 & 4) != 0)
  {
    ++*(_DWORD *)(a1 + 3184);
    goto LABEL_885;
  }
  *(_QWORD *)(a1 + 3180) = 0;
  v457 = sub_1C477672C(a1 + 1840, v546);
  v458 = *(_QWORD *)(a1 + 1848);
  v459 = 1856;
  if (v458 == *(_QWORD *)(a1 + 1840))
    v459 = 1860;
  if (v457 != (_QWORD *)(v458 + 8 * *(unsigned int *)(a1 + v459)))
  {
    *v457 = -2;
    ++*(_DWORD *)(a1 + 1864);
  }
  v460 = v546;
  v461 = *(_QWORD *)(v546 + 24);
  if (!v461)
  {
    v462 = *(_QWORD *)(a1 + 8);
    v461 = *(_QWORD *)(v462 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v546 + 8) + 16) + 6);
    v463 = v546;
    if ((*(_WORD *)(v461 + 8) & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v504 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v462 + 808) + 200))(*(_QWORD *)(v462 + 808));
        v505 = *(_QWORD *)(v462 + 672);
      }
      while ((*(_WORD *)(v505 + 24 * v504 + 8) & 0x1FFF) == 0x1FFE);
      v461 = v505 + 24 * v504;
      v463 = v546;
    }
    *(_QWORD *)(v460 + 24) = v461;
    v460 = v463;
  }
  v464 = *(_WORD *)(v461 + 8);
  v465 = v464 & 0x1FFF;
  if ((v464 & 0x1FFE) != 0)
    v466 = v464 & 0x1FFF;
  else
    v466 = 1;
  if (v465 == 0x1FFF)
    v466 = 1;
  *(_DWORD *)(a1 + 3188) += v466;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v460 + 8) + 16) + 20) & 0x10) != 0)
  {
    v467.i32[1] = 1;
    v467.i32[0] = *(unsigned __int16 *)(v460 + 226);
    *(int32x2_t *)(a1 + 3192) = vadd_s32(*(int32x2_t *)(a1 + 3192), v467);
  }
LABEL_886:
  v474 = v546;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v546 + 8) + 16) + 16) & 8) != 0)
    --*(_DWORD *)(a1 + 3208);
  if (v474 == *(_QWORD *)(a1 + 688))
    *(_QWORD *)(a1 + 688) = 0;
  v475 = *(_DWORD *)(a1 + 3152) + sub_1C4971664(a1, (uint64_t)&v545);
  *(_DWORD *)(a1 + 3152) = v475;
  v476 = v546;
  v477 = *(_QWORD *)(v546 + 24);
  if (!v477)
  {
    v478 = *(_QWORD *)(a1 + 8);
    v477 = *(_QWORD *)(v478 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v546 + 8) + 16) + 6);
    if ((*(_WORD *)(v477 + 8) & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v494 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v478 + 808) + 200))(*(_QWORD *)(v478 + 808));
        v495 = *(_QWORD *)(v478 + 672);
      }
      while ((*(_WORD *)(v495 + 24 * v494 + 8) & 0x1FFF) == 0x1FFE);
      v477 = v495 + 24 * v494;
      v475 = *(_DWORD *)(a1 + 3152);
    }
    *(_QWORD *)(v476 + 24) = v477;
  }
  v479 = *(_WORD *)(v477 + 8) & 0x1FFF;
  if (v479 != 0x1FFF)
  {
    v475 = v475 + v479 - 1;
    *(_DWORD *)(a1 + 3152) = v475;
  }
  result = v546;
  *(_DWORD *)(v546 + 252) = v475;
  return result;
}

void sub_1C496E254(uint64_t a1, uint64_t a2)
{
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  BOOL v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v38;
  llvm::MachineBasicBlock *v39;
  uint64_t FirstInstrTerminator;
  __int16 v41;
  uint64_t v42;
  unsigned __int16 *v43;
  int v44;
  BOOL v46;
  unsigned int v47;
  void *v48;
  size_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int j;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int i;
  unsigned int v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v3 = *(_WORD **)(a2 + 24);
  v118 = a2;
  if (!v3)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 16) + 6);
    v3 = (_WORD *)(*(_QWORD *)(v4 + 672) + 24 * v6);
    if ((v3[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v111 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 808) + 200))(*(_QWORD *)(v4 + 808), v6, v5, v4 + 632);
        v6 = v111;
        v112 = *(_QWORD *)(v4 + 672);
      }
      while ((*(_WORD *)(v112 + 24 * v111 + 8) & 0x1FFF) == 0x1FFE);
      v3 = (_WORD *)(v112 + 24 * v111);
      a2 = v118;
    }
    *(_QWORD *)(a2 + 24) = v3;
  }
  if (v3[6])
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v7 + 176) + 136) + 4 * (unsigned __int16)v3[5]);
    v9 = &v8[2 * (unsigned __int16)v3[6]];
    v10 = *(_QWORD *)(v7 + 32);
    v11 = *(_QWORD *)(a1 + 1600);
    v117 = *(_QWORD *)(a2 + 8);
    v12 = *(unsigned __int16 **)(v117 + 16);
    do
    {
      v13 = *v8;
      v14 = *(unsigned int *)(v10 + 32 * v13 + 8);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 0;
        v17 = (uint64_t *)(a1 + 1680);
        do
        {
          v18 = *v17;
          v17 += 10;
          if (*(unsigned int *)(v18 + 4 * v13) < (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 80 * v16 + 1680)
                                                                                    + 4 * v13))
            v16 = v15;
          ++v15;
        }
        while (v14 != v15);
      }
      else
      {
        v16 = 0;
      }
      v19 = v8[1];
      *(_DWORD *)(*(_QWORD *)(a1 + 80 * v16 + 1680) + 4 * v13) = *(_DWORD *)(a1 + 3152);
      *(_DWORD *)(v11 + 4 * v13) -= sub_1C496F24C(a1, v13, v12) * v19;
      if (*(_DWORD *)(a1 + 3156) == (_DWORD)v13)
      {
        v20 = *(unsigned int *)(v7 + 48);
        if ((_DWORD)v20)
        {
          v21 = 0;
          v22 = *(_DWORD *)(v7 + 276);
          do
          {
            if (*(_DWORD *)(v11 + 4 * v21) - *(_DWORD *)(v11 + 4 * v13) >= v22)
            {
              *(_DWORD *)(a1 + 3156) = v21;
              LODWORD(v13) = v21;
            }
            ++v21;
          }
          while (v20 != v21);
        }
      }
      v8 += 2;
    }
    while (v8 != v9);
    v23 = (_QWORD *)v117;
  }
  else
  {
    v23 = *(_QWORD **)(a2 + 8);
  }
  v24 = (unsigned __int16 *)v23[2];
  v25 = *((_QWORD *)v24 + 2);
  v26 = *v24;
  v27 = v26 - 9;
  v29 = (v26 - 9) <= 0x3C && ((1 << (v26 - 9)) & 0x1000000000000605) != 0 || v26 == 0;
  v30 = !v29 && (v24[4] & 0x10) == 0 && (*((_QWORD *)v24 + 2) & 1) == 0;
  *(_BYTE *)(a1 + 3248) = !v30;
  if ((sub_1C49719DC((uint64_t)v23) & 1) == 0)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 64);
    if (v26 > 2149)
    {
      if (v26 == 4578 || v26 == 4580)
      {
        v31 = 1;
        goto LABEL_42;
      }
      if (v26 == 2150)
        goto LABEL_36;
    }
    else if (v26 == 1100)
    {
      if (*(_BYTE *)(v32 + 338))
        v31 = *(unsigned __int8 *)(v23[4] + 64) == 7;
      else
        v31 = 0;
    }
    else if (v26 == 2114)
    {
LABEL_36:
      v31 = *(unsigned __int8 *)(v32 + 338) != 0;
    }
LABEL_42:
    v34 = v25 & 0xE00;
    if ((v25 & 0xD00) == 0x900 || v34 == 2560)
    {
      v35 = v27 > 0x3C || ((1 << v27) & 0x1000000000000605) == 0;
      v36 = 1;
      if (v35 && v26 != 0)
      {
        if ((v24[4] & 0x10) != 0)
          v36 = 1;
        else
          v36 = v25 & 1;
      }
      v31 |= v36;
    }
    v38 = *(_QWORD *)(a1 + 120);
    if (v38)
    {
      if (v31 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) + 16) + 16) & 8) != 0)
        goto LABEL_66;
    }
    else
    {
      v39 = (llvm::MachineBasicBlock *)v23[3];
      FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(v39);
      if (v31
        && *((_QWORD *)v39 + 8) != *((_QWORD *)v39 + 9)
        && (llvm::MachineBasicBlock *)((char *)v39 + 48) != (llvm::MachineBasicBlock *)FirstInstrTerminator)
      {
        v41 = *(_WORD *)(FirstInstrTerminator + 44);
        v42 = *(_QWORD *)(*(_QWORD *)(FirstInstrTerminator + 16) + 8);
        if ((v41 & 0xC) != 0 && (v41 & 4) == 0)
        {
          v114 = v23;
          if ((v42 & 0x400) != 0)
          {
LABEL_209:
            v23 = v114;
            if ((v42 & 0x100) == 0)
            {
              v116 = FirstInstrTerminator;
              while ((*(_WORD *)(v116 + 44) & 8) != 0)
              {
                v116 = *(_QWORD *)(v116 + 8);
                v23 = v114;
                if ((*(_BYTE *)(*(_QWORD *)(v116 + 16) + 9) & 1) != 0)
                  goto LABEL_65;
              }
              v23 = v114;
              if ((v42 & 0x800) == 0)
              {
                while ((*(_WORD *)(FirstInstrTerminator + 44) & 8) != 0)
                {
                  FirstInstrTerminator = *(_QWORD *)(FirstInstrTerminator + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(FirstInstrTerminator + 16) + 9) & 8) != 0)
                    goto LABEL_65;
                }
                goto LABEL_66;
              }
            }
          }
          else
          {
            v115 = FirstInstrTerminator;
            while (1)
            {
              v23 = v114;
              if ((*(_WORD *)(v115 + 44) & 8) == 0)
                break;
              v115 = *(_QWORD *)(v115 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v115 + 16) + 9) & 4) != 0)
                goto LABEL_209;
            }
          }
        }
        else if ((*(_QWORD *)(*(_QWORD *)(FirstInstrTerminator + 16) + 8) & 0xD00) == 0x400)
        {
          goto LABEL_66;
        }
      }
    }
LABEL_65:
    ++*(_DWORD *)(a1 + 3152);
LABEL_66:
    if (v34 == 1536 || (v25 & 2) != 0 || (v25 & 0xD00) == 0x500)
      *(_QWORD *)(a1 + 680) = v118;
    v43 = (unsigned __int16 *)v23[2];
    v44 = *v43;
    v46 = (v44 - 9) <= 0x3C && ((1 << (v44 - 9)) & 0x1000000000000605) != 0
       || v44 == 0;
    if (!v46 && (v43[4] & 0x10) == 0 && (v43[8] & 1) == 0)
    {
      v47 = *(_DWORD *)(a1 + 144);
      *(_BYTE *)(a1 + 3260) = 0;
      *(_DWORD *)(a1 + 3176) = 0;
      if (v47 <= 1 && !*(_DWORD *)(a1 + 148))
        goto LABEL_85;
      if ((v47 & 1) != 0)
      {
        v48 = (void *)(a1 + 152);
        v49 = 256;
      }
      else
      {
        v113 = (2 * v47) & 0xFFFFFFFC;
        v50 = *(unsigned int *)(a1 + 160);
        if (v113 < v50 && v50 >= 0x41)
        {
          sub_1C6148154((unsigned int *)(a1 + 144));
          goto LABEL_85;
        }
        if (!(_DWORD)v50)
        {
LABEL_84:
          *(_DWORD *)(a1 + 144) = v50;
          *(_DWORD *)(a1 + 148) = 0;
LABEL_85:
          *(_DWORD *)(a1 + 416) = 0;
          *(_DWORD *)(a1 + 136) = 0;
          goto LABEL_89;
        }
        v48 = *(void **)(a1 + 152);
        v49 = 8 * v50;
      }
      memset_pattern16(v48, &unk_1C6612680, v49);
      LODWORD(v50) = *(_DWORD *)(a1 + 144) & 1;
      goto LABEL_84;
    }
    v51 = *(_DWORD *)(a1 + 3176);
    if (v51)
      *(_DWORD *)(a1 + 3176) = v51 - 1;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 318)
      || !llvm::MachineInstr::getNumExplicitOperands((uint64_t)v23))
    {
      goto LABEL_89;
    }
    v53 = 0;
    v54 = (unsigned int *)(a1 + 144);
    while (2)
    {
      v55 = v23[4];
      if (*(_DWORD *)(v55 + 32 * v53))
        goto LABEL_154;
      v56 = *(unsigned int *)(v55 + 32 * v53 + 4);
      if ((v56 & 0x80000000) == 0)
        goto LABEL_154;
      v57 = (*(_DWORD *)(v55 + 32 * v53) >> 8) & 0xFFF;
      if ((*(_BYTE *)v54 & 1) != 0)
      {
        v58 = 32;
        v59 = a1 + 152;
      }
      else
      {
        v58 = *(_DWORD *)(a1 + 160);
        if (!v58)
        {
LABEL_118:
          v65 = v23;
          v71 = 0;
          v74 = *(_DWORD *)(a1 + 136)
              + sub_1C4971FF4(*(_QWORD *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), v56, v57);
          *(_DWORD *)(a1 + 136) = v74;
LABEL_119:
          if (v74 >= 0x21)
          {
            do
            {
              v75 = *(_QWORD *)(a1 + 408);
              *(_DWORD *)(a1 + 136) = v74
                                    - sub_1C4971FF4(*(_QWORD *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), *(_DWORD *)v75, *(_WORD *)(v75 + 4) & 0xFFF);
              sub_1C4973420(a1 + 144, *(_DWORD *)v75, *(_WORD *)(v75 + 4));
              v76 = *(unsigned int *)(a1 + 416);
              v77 = *(_QWORD *)(a1 + 408) + 8 * v76;
              if (v77 != v75 + 8)
              {
                memmove((void *)v75, (const void *)(v75 + 8), v77 - (v75 + 8));
                LODWORD(v76) = *(_DWORD *)(a1 + 416);
              }
              *(_DWORD *)(a1 + 416) = v76 - 1;
              v74 = *(_DWORD *)(a1 + 136);
            }
            while (v74 > 0x20);
          }
          v78 = *v54;
          v79 = *v54 & 1;
          if (v79)
          {
            v80 = 32;
            v81 = a1 + 152;
            v23 = v65;
          }
          else
          {
            v80 = *(_DWORD *)(a1 + 160);
            v23 = v65;
            if (!v80)
            {
              v90 = 0;
              v91 = 0;
              goto LABEL_146;
            }
            v81 = *(_QWORD *)(a1 + 152);
          }
          v82 = 0;
          v83 = (37 * v56) ^ (37 * v57);
          v84 = v80 - 1;
          for (i = 1; ; ++i)
          {
            v86 = v83 & v84;
            v87 = v81 + 8 * v86;
            v88 = *(_DWORD *)v87;
            if ((_DWORD)v56 == *(_DWORD *)v87 && (*(_WORD *)(v87 + 4) & 0xFFF) == v57)
              goto LABEL_154;
            if (v88 == -1)
              break;
            if (v88 != -2)
              goto LABEL_131;
            v89 = (*(_WORD *)(v87 + 4) & 0xFFF) == 4094;
LABEL_135:
            if (v89 && v82 == 0)
              v82 = v81 + 8 * v86;
            v83 = v86 + i;
          }
          if ((~*(unsigned __int16 *)(v87 + 4) & 0xFFF) == 0)
          {
            if (v82)
              v90 = v82;
            else
              v90 = v81 + 8 * v86;
            if (v79)
              v91 = 32;
            else
              v91 = *(_DWORD *)(a1 + 160);
LABEL_146:
            if (4 * (v78 >> 1) + 4 >= 3 * v91)
            {
              sub_1C49734CC(a1 + 144, 2 * v91);
              v78 = *v54;
              if ((*v54 & 1) != 0)
              {
                v103 = 32;
                v104 = a1 + 152;
              }
              else
              {
                v103 = *(_DWORD *)(a1 + 160);
                if (!v103)
                {
                  v79 = 0;
                  v90 = 0;
                  goto LABEL_148;
                }
                v104 = *(_QWORD *)(a1 + 152);
              }
              v96 = 0;
              v79 = *v54 & 1;
              v105 = (37 * v56) ^ (37 * v57);
              v106 = v103 - 1;
              v107 = 1;
              while (2)
              {
                v108 = v105 & v106;
                v90 = v104 + 8 * v108;
                v109 = *(_DWORD *)v90;
                if ((_DWORD)v56 == *(_DWORD *)v90 && (*(_WORD *)(v90 + 4) & 0xFFF) == v57)
                  goto LABEL_148;
                if (v109 == -1)
                {
                  if ((~*(unsigned __int16 *)(v90 + 4) & 0xFFF) == 0)
                  {
LABEL_190:
                    if (v96)
                      v90 = v96;
                    goto LABEL_148;
                  }
LABEL_181:
                  v110 = 0;
                }
                else
                {
                  if (v109 != -2)
                    goto LABEL_181;
                  v110 = (*(_WORD *)(v90 + 4) & 0xFFF) == 4094;
                }
                if (v110 && v96 == 0)
                  v96 = v104 + 8 * v108;
                v105 = v108 + v107++;
                continue;
              }
            }
            if (v91 + ~(v78 >> 1) - *(_DWORD *)(a1 + 148) <= v91 >> 3)
            {
              sub_1C49734CC(a1 + 144, v91);
              v78 = *v54;
              if ((*v54 & 1) != 0)
              {
                v94 = 32;
                v95 = a1 + 152;
              }
              else
              {
                v94 = *(_DWORD *)(a1 + 160);
                if (!v94)
                {
                  v79 = 0;
                  v90 = 0;
                  goto LABEL_148;
                }
                v95 = *(_QWORD *)(a1 + 152);
              }
              v96 = 0;
              v79 = *v54 & 1;
              v97 = (37 * v56) ^ (37 * v57);
              v98 = v94 - 1;
              v99 = 1;
              while (2)
              {
                v100 = v97 & v98;
                v90 = v95 + 8 * v100;
                v101 = *(_DWORD *)v90;
                if ((_DWORD)v56 == *(_DWORD *)v90 && (*(_WORD *)(v90 + 4) & 0xFFF) == v57)
                  break;
                if (v101 == -1)
                {
                  if ((~*(unsigned __int16 *)(v90 + 4) & 0xFFF) == 0)
                    goto LABEL_190;
LABEL_164:
                  v102 = 0;
                }
                else
                {
                  if (v101 != -2)
                    goto LABEL_164;
                  v102 = (*(_WORD *)(v90 + 4) & 0xFFF) == 4094;
                }
                if (v102 && v96 == 0)
                  v96 = v95 + 8 * v100;
                v97 = v100 + v99++;
                continue;
              }
            }
LABEL_148:
            *v54 = (v78 & 0xFFFFFFFE | v79) + 2;
            if (*(_DWORD *)v90 != -1 || (~*(unsigned __int16 *)(v90 + 4) & 0xFFF) != 0)
              --*(_DWORD *)(a1 + 148);
            v92 = v56 | ((unint64_t)(unsigned __int16)(v57 | (v71 << 12)) << 32);
            *(_QWORD *)v90 = v92;
            v93 = *(unsigned int *)(a1 + 416);
            if (v93 >= *(unsigned int *)(a1 + 420))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 408, a1 + 424, v93 + 1, 8);
              v93 = *(unsigned int *)(a1 + 416);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v93) = v92;
            ++*(_DWORD *)(a1 + 416);
LABEL_154:
            if (++v53 >= (unint64_t)llvm::MachineInstr::getNumExplicitOperands((uint64_t)v23))
            {
LABEL_89:
              v52 = *(_QWORD *)(a1 + 120);
              *(_QWORD *)(a1 + 120) = v118;
              *(_QWORD *)(a1 + 128) = v52;
              return;
            }
            continue;
          }
LABEL_131:
          v89 = 0;
          goto LABEL_135;
        }
        v59 = *(_QWORD *)(a1 + 152);
      }
      break;
    }
    v60 = (37 * v56) ^ (37 * v57);
    v61 = v58 - 1;
    for (j = 1; ; ++j)
    {
      v63 = v60 & v61;
      v64 = v59 + 8 * v63;
      if ((_DWORD)v56 == *(_DWORD *)v64 && (*(_WORD *)(v64 + 4) & 0xFFF) == v57)
        break;
      if (*(_DWORD *)v64 == -1 && (~*(unsigned __int16 *)(v64 + 4) & 0xFFF) == 0)
        goto LABEL_118;
      v60 = v63 + j;
    }
    v65 = v23;
    v66 = *(_QWORD *)(a1 + 408);
    v67 = *(unsigned int *)(a1 + 416);
    if ((_DWORD)v67)
    {
      v68 = 8 * v67;
      v69 = v66 + 8 * v67;
      do
      {
        if (*(_DWORD *)v66 == (_DWORD)v56 && (*(_WORD *)(v66 + 4) & 0xFFF) == v57)
          goto LABEL_112;
        v66 += 8;
        v68 -= 8;
      }
      while (v68);
      v66 = v69;
    }
LABEL_112:
    v70 = *(unsigned __int16 *)(v66 + 4);
    if (v70 >> 12 == 15)
      v71 = 15;
    else
      v71 = (*(_WORD *)(v66 + 4) >> 12) + 1;
    sub_1C4973420(a1 + 144, *(_DWORD *)v66, v70);
    v72 = *(unsigned int *)(a1 + 416);
    v73 = *(_QWORD *)(a1 + 408) + 8 * v72;
    if (v73 != v66 + 8)
    {
      memmove((void *)v66, (const void *)(v66 + 8), v73 - (v66 + 8));
      LODWORD(v72) = *(_DWORD *)(a1 + 416);
    }
    *(_DWORD *)(a1 + 416) = v72 - 1;
    v74 = *(_DWORD *)(a1 + 136);
    goto LABEL_119;
  }
}

void sub_1C496ECE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  llvm *UnderlyingObject;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  llvm *v47;
  int8x8_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *__p[3];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = (_QWORD *)sub_1C4971864(a1, v4);
  v6 = v5;
  v8 = (_QWORD *)v5[5];
  v7 = v5[6];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (_QWORD *)v5[4];
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = a2;
    v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        v17 = *--v8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = (_QWORD *)v6[4];
    }
    v6[4] = v16;
    v6[5] = v9;
    v6[6] = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = a2;
    v9 = v8 + 1;
  }
  v6[5] = v9;
  *(_DWORD *)(a2 + 196) |= *(_DWORD *)v6;
  v18 = *(unsigned __int16 **)(v4 + 16);
  v19 = *v18;
  v21 = (v19 - 9) <= 0x3C && ((1 << (v19 - 9)) & 0x1000000000000605) != 0 || v19 == 0;
  if (v21 || (v18[4] & 0x10) != 0 || (v18[8] & 1) != 0)
    return;
  if (sub_1C496F2F0(v4))
    --*(_DWORD *)(a1 + 3204);
  v22 = *(_QWORD **)(a2 + 8);
  v23 = v22[2];
  if ((*(_BYTE *)(v23 + 16) & 2) == 0)
  {
    if (!sub_1C496F2F0(*(_QWORD *)(a2 + 8)))
      return;
    v24 = v22[6];
    if (v24 >= 8)
    {
      if ((v24 & 7) != 0)
      {
        UnderlyingObject = 0;
        if ((v22[6] & 7) != 3 || (v24 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_83;
        if (!*(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_36;
      }
      else
      {
        v24 &= 0xFFFFFFFFFFFFFFF8;
        v22[6] = v24;
      }
      if ((v24 & 7) != 0)
      {
        v45 = *(uint64_t **)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v45 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
        v22[6] = v45;
      }
      UnderlyingObject = 0;
      v46 = *v45;
      if ((v46 & 4) == 0)
      {
        v47 = (llvm *)(v46 & 0xFFFFFFFFFFFFFFF8);
        if (v47)
          UnderlyingObject = llvm::getUnderlyingObject(v47, (const llvm::Value *)6);
      }
LABEL_83:
      v48 = *(int8x8_t *)(a1 + 2336);
      if (!*(_QWORD *)&v48)
        return;
      v49 = 0x9DDFEA08EB382D69
          * (((8 * (_DWORD)UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
      v50 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v49 >> 47) ^ v49);
      v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
      v52 = (uint8x8_t)vcnt_s8(v48);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] <= 1uLL)
        v53 = v51 & (*(_QWORD *)&v48 - 1);
      else
        v53 = v51 < *(_QWORD *)&v48 ? v51 : v51 % *(_QWORD *)&v48;
      v54 = *(_QWORD ***)(*(_QWORD *)(a1 + 2328) + 8 * v53);
      if (!v54)
        return;
      v55 = *v54;
      if (!*v54)
        return;
      while (1)
      {
        v56 = v55[1];
        if (v56 == v51)
        {
          if ((llvm *)v55[2] == UnderlyingObject)
          {
            v57 = v55;
            do
              v57 = (_QWORD *)*v57;
            while (v57 && (llvm *)v57[2] == UnderlyingObject);
            while (v55 != v57)
            {
              if (v55[3] == a2)
              {
                sub_1C4841650((_QWORD *)(a1 + 2328), v55, (uint64_t)__p);
                goto LABEL_108;
              }
              v55 = (_QWORD *)*v55;
            }
            return;
          }
        }
        else
        {
          if (v52.u32[0] <= 1uLL)
          {
            v56 &= *(_QWORD *)&v48 - 1;
          }
          else if (v56 >= *(_QWORD *)&v48)
          {
            v56 %= *(_QWORD *)&v48;
          }
          if (v56 != v53)
            return;
        }
        v55 = (_QWORD *)*v55;
        if (!v55)
          return;
      }
    }
LABEL_36:
    UnderlyingObject = 0;
    goto LABEL_83;
  }
  v26 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD **)(a2 + 32);
    v28 = 16 * v26;
    do
    {
      v29 = *v27 & 0xFFFFFFFFFFFFFFF8;
      if ((*v27 & 6) == 0 && v29 != 0)
      {
        v31 = *(_QWORD *)(v29 + 8);
        if (v31)
        {
          if ((*(_BYTE *)(*(_QWORD *)(v31 + 16) + 16) & 0x10) != 0)
          {
            v32 = sub_1C4840470(a1 + 696, v29);
            v33 = *(_DWORD *)(v32 + 8);
            if (v33 != -1)
              *(_DWORD *)(v32 + 8) = v33 - 1;
          }
        }
      }
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    v22 = *(_QWORD **)(a2 + 8);
    v23 = v22[2];
  }
  v34 = *(unsigned __int8 *)(v23 + 4) + 2;
  v35 = v22[4];
  if (*(_BYTE *)(v35 + 32 * v34) != 7)
    return;
  v36 = *(int8x8_t *)(a1 + 2296);
  if (!*(_QWORD *)&v36)
    return;
  v37 = *(unsigned int *)(v35 + 32 * v34 + 4);
  v38 = (_QWORD *)(a1 + 2288);
  v39 = (uint8x8_t)vcnt_s8(v36);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] <= 1uLL)
  {
    v40 = (v36.i32[0] - 1) & v37;
  }
  else
  {
    v40 = v37;
    if (*(_QWORD *)&v36 <= v37)
      v40 = v37 % *(_QWORD *)&v36;
  }
  v41 = *(uint64_t ***)(*v38 + 8 * v40);
  if (!v41)
    return;
  v42 = *v41;
  if (!*v41)
    return;
  while (1)
  {
    v43 = v42[1];
    if (v43 == v37)
      break;
    if (v39.u32[0] > 1uLL)
    {
      if (v43 >= *(_QWORD *)&v36)
        v43 %= *(_QWORD *)&v36;
    }
    else
    {
      v43 &= *(_QWORD *)&v36 - 1;
    }
    if (v43 != v40)
      return;
LABEL_65:
    v42 = (uint64_t *)*v42;
    if (!v42)
      return;
  }
  if (*((_DWORD *)v42 + 4) != (_DWORD)v37)
    goto LABEL_65;
  v44 = v42;
  do
    v44 = (uint64_t *)*v44;
  while (v44 && *((_DWORD *)v44 + 4) == (_DWORD)v37);
  while (1)
  {
    if (v42 == v44)
      return;
    if (v42[3] == a2)
      break;
    v42 = (uint64_t *)*v42;
  }
  sub_1C4841500(v38, v42, (uint64_t)__p);
LABEL_108:
  v58 = __p[0];
  __p[0] = 0;
  if (v58)
    operator delete(v58);
}

void sub_1C496F1BC(_DWORD *a1, unsigned int a2)
{
  void *v2;
  size_t v3;
  uint64_t v4;
  int v5;
  size_t v6;
  _DWORD *v7;

  if (a2 > 0x20)
  {
    *a1 &= ~1u;
    v4 = a2;
    v6 = 8 * a2;
    v7 = a1;
    v2 = operator new(v6, (std::align_val_t)4uLL);
    a1 = v7;
    *((_QWORD *)v7 + 1) = v2;
    *((_QWORD *)v7 + 2) = v4;
    v5 = *v7;
    *(_QWORD *)v7 = *v7 & 1;
    if ((v5 & 1) == 0)
    {
      v3 = v6;
      goto LABEL_4;
    }
  }
  else
  {
    *(_QWORD *)a1 = 1;
  }
  v2 = a1 + 2;
  v3 = 256;
LABEL_4:
  memset_pattern16(v2, &unk_1C6612680, v3);
}

uint64_t sub_1C496F24C(uint64_t a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  int v5;
  BOOL v7;
  int v8;
  uint64_t v9;

  result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 192) + 4 * a2);
  v5 = *a3;
  v7 = (v5 - 9) <= 0x3C && ((1 << (v5 - 9)) & 0x1000000000000605) != 0 || v5 == 0;
  if ((v7 || (a3[4] & 0x10) != 0 || (a3[8] & 1) != 0)
    && *(_DWORD *)(a1 + 104) != a2
    && *(_DWORD *)(a1 + 108) != a2
    && *(_DWORD *)(a1 + 112) != a2)
  {
    v8 = *(_DWORD *)(a1 + 116);
    v9 = *(_QWORD *)(a1 + 64);
    if (v8 == a2)
    {
      return ((_DWORD)result << *(_BYTE *)(v9 + 318));
    }
    else if (*(_BYTE *)(v9 + 326))
    {
      return (2 * result);
    }
    else
    {
      return (4 * result);
    }
  }
  return result;
}

BOOL sub_1C496F2F0(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  BOOL v4;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  v4 = (v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0;
  return !v4 && (v1[4] & 0x10) == 0 && (*((_QWORD *)v1 + 2) & 5) == 4 && !sub_1C496FBB0(a1);
}

unint64_t *sub_1C496F35C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t i;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v30[2];

  v4 = *a1;
  if ((*a1 & 1) != 0)
    v5 = v4 >> 58;
  else
    v5 = *(unsigned int *)(v4 + 64);
  v6 = *a2;
  if ((*a2 & 1) != 0)
    v7 = v6 >> 58;
  else
    v7 = *(unsigned int *)(v6 + 64);
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  sub_1C496F5AC(a1, v8, 0);
  v9 = *a1;
  v10 = *a2;
  if ((*a1 & 1) != 0)
  {
    v19 = v9 >> 58;
    if ((v10 & 1) != 0)
    {
      *a1 = (v10 & (2 * ~((-1 << (v10 >> 58)) | (-1 << v19))) | 0xFC00000000000000) & v9 | 1;
      return a1;
    }
    v20 = *(unsigned int *)(v10 + 64);
  }
  else
  {
    if ((v10 & 1) == 0)
    {
      v11 = *(_DWORD *)(v9 + 8);
      v12 = *(_DWORD *)(v10 + 8);
      if (v12 >= v11)
        v13 = v11;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = *(uint64_t **)v10;
        v15 = *(_QWORD **)v9;
        v16 = v13;
        do
        {
          v17 = *v14++;
          *v15++ &= v17;
          --v16;
        }
        while (v16);
      }
      if (v11 > v12)
      {
        v18 = *(_QWORD **)v9;
        do
        {
          v18[v13] = 0;
          LODWORD(v13) = v13 + 1;
        }
        while (v11 != (_DWORD)v13);
      }
      return a1;
    }
    v19 = *(unsigned int *)(v9 + 64);
    v20 = v10 >> 58;
  }
  if (v20 >= v19)
    v21 = v19;
  else
    v21 = v20;
  if (!v21)
    goto LABEL_40;
  for (i = 0; i != v21; ++i)
  {
    v23 = *a1;
    if ((*a1 & 1) != 0)
    {
      if (((1 << i) & (v23 >> 1) & ~(-1 << (v23 >> 58))) == 0)
      {
LABEL_35:
        v26 = 0;
        goto LABEL_38;
      }
    }
    else if ((*(_QWORD *)(*(_QWORD *)v23 + 8 * (i >> 6)) & (1 << i)) == 0)
    {
      goto LABEL_35;
    }
    v24 = *a2;
    if ((*a2 & 1) != 0)
      v25 = (1 << i) & (v24 >> 1) & ~(-1 << (v24 >> 58));
    else
      v25 = *(_QWORD *)(*(_QWORD *)v24 + 8 * (i >> 6)) & (1 << i);
    v26 = v25 != 0;
LABEL_38:
    v30[0] = a1;
    v30[1] = i;
    sub_1C496F7C8((uint64_t)v30, v26);
  }
  v9 = *a1;
LABEL_40:
  if ((v9 & 1) != 0)
    v27 = v9 >> 58;
  else
    v27 = *(unsigned int *)(v9 + 64);
  for (; v27 != v21; ++v21)
  {
    v28 = *a1;
    if ((*a1 & 1) != 0)
      *a1 = ((2 * ~((-1 << (v28 >> 58)) | (1 << v21))) | 0xFC00000000000000) & v28 | 1;
    else
      *(_QWORD *)(*(_QWORD *)v28 + 8 * (v21 >> 6)) &= ~(1 << v21);
  }
  return a1;
}

unint64_t *sub_1C496F5AC(unint64_t *result, uint64_t a2, uint64_t a3)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a2;
  v5 = *result;
  if ((*result & 1) != 0)
  {
    v6 = result;
    if (a2 > 0x39)
    {
      v18 = operator new();
      result = (unint64_t *)sub_1C496F858(v18, v4, a3);
      v19 = *v6 >> 58;
      if (v19)
      {
        v20 = 0;
        v21 = (*v6 >> 1) & ~(-1 << v19);
        v22 = *result;
        do
        {
          v23 = 1 << v20;
          v24 = v20 >> 6;
          if ((v21 & (1 << v20)) != 0)
            v25 = *(_QWORD *)(v22 + 8 * v24) | v23;
          else
            v25 = *(_QWORD *)(v22 + 8 * v24) & ~v23;
          *(_QWORD *)(v22 + 8 * v24) = v25;
          ++v20;
        }
        while (v19 != v20);
      }
      *v6 = result;
    }
    else
    {
      if ((_DWORD)a3)
        v7 = -1 << (v5 >> 58);
      else
        v7 = 0;
      v8 = v5 & (2 * ~(-1 << (v5 >> 58))) | (a2 << 58);
      *result = v8 & 0xFC00000000000000 | (2 * (((v8 >> 1) & ~(-1 << (v8 >> 58)) | v7) & ~(-1 << (v8 >> 58)))) | 1;
    }
  }
  else
  {
    if ((*(_DWORD *)(v5 + 64) & 0x3F) != 0)
    {
      v26 = -1 << (*(_DWORD *)(v5 + 64) & 0x3F);
      v9 = *(unsigned int *)(v5 + 8);
      v27 = *(_QWORD *)v5 + 8 * v9;
      if ((_DWORD)a3)
        v28 = *(_QWORD *)(v27 - 8) | v26;
      else
        v28 = *(_QWORD *)(v27 - 8) & ~v26;
      *(_QWORD *)(v27 - 8) = v28;
    }
    else
    {
      v9 = *(unsigned int *)(v5 + 8);
    }
    v10 = v9;
    *(_DWORD *)(v5 + 64) = a2;
    v11 = a2 + 63;
    if ((_DWORD)v9 != (a2 + 63) >> 6)
    {
      v12 = v11 >> 6;
      if (v9 > v12)
      {
        *(_DWORD *)(v5 + 8) = v12;
        v10 = v11 >> 6;
      }
      else
      {
        v13 = v12 - v9;
        v14 = v9;
        if (v12 > *(_DWORD *)(v5 + 12))
        {
          result = (unint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v12, 8);
          v14 = *(unsigned int *)(v5 + 8);
          v10 = *(_DWORD *)(v5 + 8);
        }
        if (v13)
        {
          v15 = (uint64_t *)(*(_QWORD *)v5 + 8 * v14);
          v16 = v9 - v12;
          do
            *v15++ = a3 << 63 >> 63;
          while (!__CFADD__(v16++, 1));
        }
        v10 += v13;
        *(_DWORD *)(v5 + 8) = v10;
        v4 = *(_DWORD *)(v5 + 64);
      }
    }
    if ((v4 & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v10 - 8) &= ~(-1 << (v4 & 0x3F));
  }
  return result;
}

uint64_t sub_1C496F7C8(uint64_t a1, int a2)
{
  unint64_t *v4;
  unsigned int v5;
  unint64_t v6;

  v4 = *(unint64_t **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    sub_1C496F8DC(v4, v5);
  }
  else
  {
    v6 = *v4;
    if ((*v4 & 1) != 0)
      *v4 = ((2 * ~((-1 << (v6 >> 58)) | (1 << v5))) | 0xFC00000000000000) & v6 | 1;
    else
      *(_QWORD *)(*(_QWORD *)v6 + 8 * (v5 >> 6)) &= ~(1 << v5);
  }
  return a1;
}

uint64_t sub_1C496F858(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v6;

  v3 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  sub_1C4765AA4((char *)a1, (a2 + 63) >> 6, a3 << 63 >> 63);
  *(_DWORD *)(a1 + 64) = a2;
  if (v3 && (a2 & 0x3F) != 0)
  {
    v6 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
    *(_QWORD *)(v6 - 8) &= ~(-1 << (a2 & 0x3F));
  }
  return a1;
}

unint64_t *sub_1C496F8DC(unint64_t *result, unsigned int a2)
{
  unint64_t v2;

  v2 = *result;
  if ((*result & 1) != 0)
    *result = v2 & 0xFC00000000000000 | (2
                                         * (((v2 >> 1) & ~(-1 << (v2 >> 58)) | (1 << a2)) & ~(-1 << (v2 >> 58)))) | 1;
  else
    *(_QWORD *)(*(_QWORD *)v2 + 8 * (a2 >> 6)) |= 1 << a2;
  return result;
}

_QWORD *sub_1C496F93C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4926528((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C496F99C(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C496F99C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C496FA4C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4926528((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C496FA4C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C496FB04(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C496FB04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4926528(v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

BOOL sub_1C496FBB0(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  _BOOL8 result;
  BOOL v11;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0)
    return 0;
  if ((v1[4] & 0x10) != 0)
    return 0;
  if ((v1[8] & 1) != 0)
    return 0;
  v5 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(_DWORD **)(a1 + 32);
  if (!*v6)
    return (*v6 & 0x1000000) == 0;
  if (v5 < 2)
    return 0;
  v7 = v5 - 2;
  v8 = (unsigned __int8 *)(v6 + 8);
  do
  {
    v9 = *v8;
    v8 += 32;
    result = v9 == 0;
    if (v9)
      v11 = v7 == 0;
    else
      v11 = 1;
    --v7;
  }
  while (!v11);
  return result;
}

BOOL sub_1C496FC4C(uint64_t a1, const llvm::SUnit *a2, const llvm::SUnit *a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  const llvm::SUnit *v18;
  const llvm::SUnit *v19;
  int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL8 IsReachable;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  const llvm::SUnit **v37;
  const llvm::SUnit *v38;
  const llvm::SUnit *v39;
  const llvm::SUnit **v41;
  int v42;
  BOOL v43;
  unsigned int v45;
  const llvm::SUnit **v47;
  unsigned int v48;
  unsigned int *v49;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  const llvm::SUnit *v58;
  const llvm::SUnit *v59;
  const llvm::SUnit **v61;
  int v62;
  BOOL v63;
  unsigned int v65;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  const llvm::SUnit *v74;
  const llvm::SUnit *v75;
  int v77;
  BOOL v78;
  unsigned int v80;

  v6 = *(_DWORD *)(a1 + 2368);
  v7 = a1 + 2376;
  v8 = a2 >> 4;
  v9 = a3 >> 4;
  if ((v6 & 1) != 0)
  {
    v11 = 32;
    v10 = a1 + 2376;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 2376);
    v11 = *(_DWORD *)(a1 + 2384);
    if (!v11)
    {
      v26 = 0;
      goto LABEL_21;
    }
  }
  v12 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
      + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v11 - 1;
  v16 = v15 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v17 = v10 + 24 * v16;
  v19 = *(const llvm::SUnit **)v17;
  v18 = *(const llvm::SUnit **)(v17 + 8);
  if (*(const llvm::SUnit **)v17 != a2 || v18 != a3)
  {
    v21 = 1;
    while (v19 != (const llvm::SUnit *)-4096 || v18 != (const llvm::SUnit *)-4096)
    {
      v22 = v16 + v21++;
      v16 = v22 & v15;
      v17 = v10 + 24 * (v22 & v15);
      v19 = *(const llvm::SUnit **)v17;
      v18 = *(const llvm::SUnit **)(v17 + 8);
      if (*(const llvm::SUnit **)v17 == a2 && v18 == a3)
        goto LABEL_15;
    }
    if ((v6 & 1) != 0)
    {
      v26 = 32;
      v10 = a1 + 2376;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 2376);
      v26 = *(_DWORD *)(a1 + 2384);
    }
LABEL_21:
    v17 = v10 + 24 * v26;
    if ((v6 & 1) != 0)
      goto LABEL_22;
LABEL_16:
    v24 = *(_QWORD *)(a1 + 2376);
    v25 = *(_DWORD *)(a1 + 2384);
    goto LABEL_23;
  }
LABEL_15:
  if ((v6 & 1) == 0)
    goto LABEL_16;
LABEL_22:
  v25 = 32;
  v24 = a1 + 2376;
LABEL_23:
  if (v24 + 24 * v25 != v17)
    return *(_BYTE *)(v17 + 16) != 0;
  IsReachable = llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(_QWORD *)(a1 + 8) + 2120), a2, a3);
  v28 = *(_DWORD *)(a1 + 2368);
  v29 = v28 & 1;
  if ((v28 & 1) != 0)
  {
    v30 = 32;
    v31 = v7;
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 2384);
    if (!v30)
    {
      v47 = 0;
      v48 = 0;
      goto LABEL_56;
    }
    v31 = *(_QWORD *)(a1 + 2376);
  }
  v32 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
      + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
  v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
  v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
  v35 = v30 - 1;
  v36 = v35 & (((v34 + ~(v34 << 27)) >> 31) ^ (v34 + ~((_DWORD)v34 << 27)));
  v37 = (const llvm::SUnit **)(v31 + 24 * v36);
  v39 = *v37;
  v38 = v37[1];
  if (*v37 == a2 && v38 == a3)
    return IsReachable;
  v41 = 0;
  v42 = 1;
  while (v39 != (const llvm::SUnit *)-4096 || v38 != (const llvm::SUnit *)-4096)
  {
    if (v41)
      v43 = 0;
    else
      v43 = v38 == (const llvm::SUnit *)-8192;
    if (v43 && v39 == (const llvm::SUnit *)-8192)
      v41 = v37;
    v45 = v36 + v42++;
    v36 = v45 & v35;
    v37 = (const llvm::SUnit **)(v31 + 24 * v36);
    v39 = *v37;
    v38 = v37[1];
    if (*v37 == a2 && v38 == a3)
      return IsReachable;
  }
  if (v41)
    v47 = v41;
  else
    v47 = v37;
  if ((v28 & 1) != 0)
    v48 = 32;
  else
    v48 = *(_DWORD *)(a1 + 2384);
LABEL_56:
  v49 = (unsigned int *)(a1 + 2368);
  if (4 * (v28 >> 1) + 4 >= 3 * v48)
  {
    sub_1C4971C48(a1 + 2368, 2 * v48);
    v28 = *v49;
    if ((*v49 & 1) != 0)
    {
      v51 = 32;
    }
    else
    {
      v51 = *(_DWORD *)(a1 + 2384);
      if (!v51)
        goto LABEL_118;
      v7 = *(_QWORD *)(a1 + 2376);
    }
    v29 = *v49 & 1;
    v52 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
    v53 = (v52 ^ (v52 >> 22)) + ~((v52 ^ (v52 >> 22)) << 13);
    v54 = (9 * (v53 ^ (v53 >> 8))) ^ ((9 * (v53 ^ (v53 >> 8))) >> 15);
    v55 = ((v54 + ~(v54 << 27)) >> 31) ^ (v54 + ~((_DWORD)v54 << 27));
    v56 = v51 - 1;
    v57 = (v51 - 1) & v55;
    v47 = (const llvm::SUnit **)(v7 + 24 * v57);
    v58 = *v47;
    v59 = v47[1];
    if (*v47 == a2 && v59 == a3)
      goto LABEL_58;
    v61 = 0;
    v62 = 1;
    while (v58 != (const llvm::SUnit *)-4096 || v59 != (const llvm::SUnit *)-4096)
    {
      if (v61)
        v63 = 0;
      else
        v63 = v59 == (const llvm::SUnit *)-8192;
      if (v63 && v58 == (const llvm::SUnit *)-8192)
        v61 = v47;
      v65 = v57 + v62++;
      v57 = v65 & v56;
      v47 = (const llvm::SUnit **)(v7 + 24 * (v65 & v56));
      v58 = *v47;
      v59 = v47[1];
      if (*v47 == a2 && v59 == a3)
        goto LABEL_58;
    }
    goto LABEL_114;
  }
  if (v48 + ~(v28 >> 1) - *(_DWORD *)(a1 + 2372) > v48 >> 3)
    goto LABEL_58;
  sub_1C4971C48(a1 + 2368, v48);
  v28 = *v49;
  if ((*v49 & 1) != 0)
  {
    v67 = 32;
    goto LABEL_93;
  }
  v67 = *(_DWORD *)(a1 + 2384);
  if (v67)
  {
    v7 = *(_QWORD *)(a1 + 2376);
LABEL_93:
    v29 = *v49 & 1;
    v68 = (v9 ^ (a3 >> 9) | ((unint64_t)(v8 ^ (a2 >> 9)) << 32))
        + ~((unint64_t)(v9 ^ (a3 >> 9)) << 32);
    v69 = (v68 ^ (v68 >> 22)) + ~((v68 ^ (v68 >> 22)) << 13);
    v70 = (9 * (v69 ^ (v69 >> 8))) ^ ((9 * (v69 ^ (v69 >> 8))) >> 15);
    v71 = ((v70 + ~(v70 << 27)) >> 31) ^ (v70 + ~((_DWORD)v70 << 27));
    v72 = v67 - 1;
    v73 = (v67 - 1) & v71;
    v47 = (const llvm::SUnit **)(v7 + 24 * v73);
    v74 = *v47;
    v75 = v47[1];
    if (*v47 == a2 && v75 == a3)
      goto LABEL_58;
    v61 = 0;
    v77 = 1;
    while (v74 != (const llvm::SUnit *)-4096 || v75 != (const llvm::SUnit *)-4096)
    {
      if (v61)
        v78 = 0;
      else
        v78 = v75 == (const llvm::SUnit *)-8192;
      if (v78 && v74 == (const llvm::SUnit *)-8192)
        v61 = v47;
      v80 = v73 + v77++;
      v73 = v80 & v72;
      v47 = (const llvm::SUnit **)(v7 + 24 * (v80 & v72));
      v74 = *v47;
      v75 = v47[1];
      if (*v47 == a2 && v75 == a3)
        goto LABEL_58;
    }
LABEL_114:
    if (v61)
      v47 = v61;
    goto LABEL_58;
  }
LABEL_118:
  v29 = 0;
  v47 = 0;
LABEL_58:
  *v49 = (v28 & 0xFFFFFFFE | v29) + 2;
  if (*v47 != (const llvm::SUnit *)-4096 || v47[1] != (const llvm::SUnit *)-4096)
    --*(_DWORD *)(a1 + 2372);
  *v47 = a2;
  v47[1] = a3;
  *((_BYTE *)v47 + 16) = IsReachable;
  return IsReachable;
}

__n128 sub_1C4970100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  BOOL v21;
  BOOL v22;
  int v23;
  int v24;
  __n128 result;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  BOOL v32;
  BOOL v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  unsigned int v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 *v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  unsigned int v94;
  _BOOL4 v95;
  _BOOL4 v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  _BYTE *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  signed int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  signed int v141;
  unsigned int v142;
  signed int v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unsigned int v163;
  llvm::SUnit **v164;
  llvm::SUnit **v165;
  unsigned int v166;
  llvm::SUnit *v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  char v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  _BOOL4 v196;
  _BOOL4 v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unsigned int *v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  int i;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  unsigned int *v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  int j;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(a3 + 48);
    v7 = (v6 >> 7) & 1;
    v8 = *(unsigned __int16 *)(a2 + 48);
    v9 = (v8 >> 7) & 1;
    if (v7 > v9)
    {
      *(_BYTE *)(a3 + 47) = 0;
      goto LABEL_48;
    }
    if (v7 < v9)
    {
      if (*(_BYTE *)(a2 + 47))
        *(_BYTE *)(a2 + 47) = 0;
      goto LABEL_48;
    }
    v11 = v6 | (*(unsigned __int8 *)(a3 + 50) << 16);
    v12 = v8 | (*(unsigned __int8 *)(a2 + 50) << 16);
    if (*(_BYTE *)(a1 + 3262))
    {
      v13 = (v11 >> 6) & 1;
      v14 = (v12 >> 6) & 1;
      if (v13 > v14)
        goto LABEL_46;
      if (v13 < v14)
        goto LABEL_52;
    }
    if ((v11 & v12 & 0x40) != 0)
    {
      v15 = *(_QWORD *)(a3 + 8);
      v16 = *(unsigned int *)(v15 + 120);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD **)(v15 + 112);
        v18 = 16 * v16;
        while (1)
        {
          if ((*v17 & 6) == 0)
          {
            v19 = *(unsigned __int16 **)(*(_QWORD *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
            v20 = *v19;
            v21 = (v20 - 9) > 0x3C || ((1 << (v20 - 9)) & 0x1000000000000605) == 0;
            v22 = !v21 || v20 == 0;
            if (v22 || (v19[4] & 0x10) != 0 || (v19[8] & 1) != 0)
              break;
          }
          v17 += 2;
          v18 -= 16;
          if (!v18)
            goto LABEL_24;
        }
        v23 = 1;
      }
      else
      {
LABEL_24:
        v23 = 0;
      }
      v27 = *(unsigned int *)(v5 + 120);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD **)(v5 + 112);
        v29 = 16 * v27;
        while (1)
        {
          if ((*v28 & 6) == 0)
          {
            v30 = *(unsigned __int16 **)(*(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 8) + 16);
            v31 = *v30;
            v32 = (v31 - 9) > 0x3C || ((1 << (v31 - 9)) & 0x1000000000000605) == 0;
            v33 = !v32 || v31 == 0;
            if (v33 || (v30[4] & 0x10) != 0 || (v30[8] & 1) != 0)
              break;
          }
          v28 += 2;
          v29 -= 16;
          if (!v29)
            goto LABEL_45;
        }
        if ((v23 & 1) != 0)
        {
LABEL_48:
          if (*(_BYTE *)(a3 + 47) == 29)
            return result;
          goto LABEL_49;
        }
        goto LABEL_52;
      }
LABEL_45:
      if (!v23)
        goto LABEL_48;
      goto LABEL_46;
    }
    if (!*(_BYTE *)(a1 + 3260) || ((v12 ^ v11) & 1) != 0)
    {
      if ((~v11 & 0x101) != 0)
      {
        v26 = 0;
      }
      else
      {
        v24 = sub_1C4971664(a1, a3);
        v12 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
        if (v24)
          v26 = (*(_WORD *)(a2 + 48) & 1) == 0;
        else
          v26 = 1;
      }
      if ((~v12 & 0x101) != 0)
      {
        v39 = 0;
      }
      else
      {
        v38 = sub_1C4971664(a1, a2);
        v39 = 1;
        if (v38)
          v39 = (*(_WORD *)(a3 + 48) & 1) == 0;
      }
      if (v26 > v39)
      {
        v34 = 2;
        goto LABEL_47;
      }
      if (v26 < v39)
      {
        if (*(unsigned __int8 *)(a2 + 47) < 3u)
          goto LABEL_48;
        v37 = 2;
        goto LABEL_54;
      }
    }
    if (*(_BYTE *)(a1 + 3249) && *(_BYTE *)(a1 + 3253))
    {
      v40 = *(unsigned __int8 *)(a3 + 50);
      v41 = (v40 >> 1) & 1;
      v42 = *(unsigned __int8 *)(a2 + 50);
      v43 = (v42 >> 1) & 1;
      if (v41 < v43)
      {
LABEL_68:
        v34 = 13;
        goto LABEL_47;
      }
      if (v41 > v43)
        goto LABEL_70;
      v44 = *(unsigned __int16 *)(a3 + 48) | (v40 << 16);
      v45 = *(unsigned __int16 *)(a2 + 48) | (v42 << 16);
      if (!*(_DWORD *)(a1 + 3180) && *(_BYTE *)(a1 + 3264))
      {
        v56 = (v44 >> 1) & 1;
        v57 = (v45 >> 1) & 1;
        if (v56 < v57)
        {
LABEL_95:
          v34 = 10;
          goto LABEL_47;
        }
        if (v56 > v57)
          goto LABEL_102;
      }
      v46 = HIWORD(v44) & 1;
      v47 = HIWORD(v45) & 1;
      if (v46 > v47)
      {
LABEL_74:
        v34 = 22;
        goto LABEL_47;
      }
      if (v46 < v47)
      {
LABEL_76:
        if (*(unsigned __int8 *)(a2 + 47) < 0x17u)
          goto LABEL_48;
        v37 = 22;
        goto LABEL_54;
      }
    }
    v48 = sub_1C4972CD0(a1, a3);
    v49 = sub_1C4972CD0(a1, a2);
    if (v48 < v49)
      goto LABEL_79;
    if (v48 > v49)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0x15u)
        goto LABEL_48;
      v37 = 20;
      goto LABEL_54;
    }
    if (*(_BYTE *)(a1 + 3249))
    {
      if (*(_BYTE *)(a1 + 3253))
      {
        v50 = sub_1C4972CD0(a1, a2);
        v51 = sub_1C4972CD0(a1, a3);
        if (v50)
        {
          if (v50 == v51 && *(_DWORD *)(*(_QWORD *)(a2 + 8) + 192) > *(_DWORD *)(*(_QWORD *)(a3 + 8) + 192))
          {
LABEL_79:
            v34 = 20;
            goto LABEL_47;
          }
        }
      }
    }
    v52 = *(unsigned __int16 *)(a3 + 48);
    v53 = (v52 >> 11) & 1;
    v54 = *(unsigned __int16 *)(a2 + 48);
    v55 = (v54 >> 11) & 1;
    if (v53 < v55)
    {
      v34 = 14;
      goto LABEL_47;
    }
    if (v53 > v55)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0xFu)
        goto LABEL_48;
      v37 = 14;
      goto LABEL_54;
    }
    v58 = v52 | (*(unsigned __int8 *)(a3 + 50) << 16);
    v59 = v54 | (*(unsigned __int8 *)(a2 + 50) << 16);
    v60 = (v58 >> 12) & 1;
    v61 = (v59 >> 12) & 1;
    if (v60 > v61)
    {
      v34 = 21;
      goto LABEL_47;
    }
    if (v60 < v61)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0x16u)
        goto LABEL_48;
      v37 = 21;
      goto LABEL_54;
    }
    if (*(_BYTE *)(a1 + 3249))
    {
      v62 = *(unsigned __int16 *)(a3 + 40);
      if (v62 == 0xFFFF)
      {
        v63 = *(_QWORD *)(a3 + 8);
        v64 = *(unsigned int *)(v63 + 40);
        if ((_DWORD)v64)
        {
          v65 = 0;
          v66 = *(uint64_t **)(v63 + 32);
          v67 = 16 * v64;
          do
          {
            v68 = *v66;
            v66 += 2;
            if (*(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 212) == 1)
              ++v65;
            v67 -= 16;
          }
          while (v67);
        }
        else
        {
          v65 = 0;
        }
        v62 = v65;
        *(_WORD *)(a3 + 40) = v65;
      }
      v69 = *(unsigned __int16 *)(a2 + 40);
      if (v69 == 0xFFFF)
      {
        v70 = *(_QWORD *)(a2 + 8);
        v71 = *(unsigned int *)(v70 + 40);
        if ((_DWORD)v71)
        {
          v72 = 0;
          v73 = *(uint64_t **)(v70 + 32);
          v74 = 16 * v71;
          do
          {
            v75 = *v73;
            v73 += 2;
            if (*(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 212) == 1)
              ++v72;
            v74 -= 16;
          }
          while (v74);
        }
        else
        {
          v72 = 0;
        }
        v69 = v72;
        *(_WORD *)(a2 + 40) = v72;
      }
      if (v62 > v69)
      {
        v34 = 24;
        goto LABEL_47;
      }
      if (v62 < v69)
      {
        if (*(unsigned __int8 *)(a2 + 47) < 0x19u)
          goto LABEL_48;
        v37 = 24;
        goto LABEL_54;
      }
      v58 = *(unsigned __int16 *)(a3 + 48) | (*(unsigned __int8 *)(a3 + 50) << 16);
      v59 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
    }
    v76 = (v58 >> 13) & 1;
    v77 = (v59 >> 13) & 1;
    if (v76 > v77)
    {
      v34 = 11;
      goto LABEL_47;
    }
    if (v76 < v77)
    {
      if (*(unsigned __int8 *)(a2 + 47) < 0xCu)
        goto LABEL_48;
      v37 = 11;
      goto LABEL_54;
    }
    if (((v58 | v59) & 0x20) != 0
      && (*(int *)(a1 + 3212) > 2
       || ((v58 | v59) & 2) == 0
       || !*(_BYTE *)(*(_QWORD *)(a1 + 64) + 300)))
    {
      v86 = (v58 >> 5) & 1;
      v87 = (v59 >> 5) & 1;
      if (v86 < v87)
      {
        v34 = 7;
        goto LABEL_47;
      }
      if (v86 > v87)
      {
        if (*(unsigned __int8 *)(a2 + 47) < 8u)
          goto LABEL_48;
        v37 = 7;
        goto LABEL_54;
      }
    }
    v78 = (v58 >> 17) & 1;
    v79 = (v59 >> 17) & 1;
    if (v78 < v79)
      goto LABEL_68;
    if (v78 > v79)
    {
LABEL_70:
      if (*(unsigned __int8 *)(a2 + 47) < 0xEu)
        goto LABEL_48;
      v37 = 13;
      goto LABEL_54;
    }
    v80 = *(_QWORD *)(a3 + 8);
    v81 = *(_QWORD *)(v80 + 8);
    v82 = *(unsigned __int16 **)(v81 + 16);
    v83 = *v82;
    v84 = 1;
    if (v83 > 0x979)
    {
      if (v83 - 8260 < 5 || v83 - 2426 < 4)
        goto LABEL_156;
    }
    else
    {
      v85 = v83 - 489 > 0x15 || ((1 << (v83 + 23)) & 0x3FFC03) == 0;
      if (!v85 || v83 == 337)
      {
LABEL_156:
        v88 = *(_QWORD *)(a2 + 8);
        v89 = *(_QWORD *)(v88 + 8);
        v90 = *(unsigned __int16 **)(v89 + 16);
        v91 = *v90;
        if (v91 > 0x979)
        {
          if (v91 - 8260 < 5 || v91 - 2426 < 4)
            goto LABEL_168;
        }
        else
        {
          v92 = v91 - 489 > 0x15 || ((1 << (v91 + 23)) & 0x3FFC03) == 0;
          if (!v92 || v91 == 337)
          {
LABEL_168:
            if ((v84 & 1) == 0)
            {
              if (*(unsigned __int8 *)(a2 + 47) < 0xAu)
                goto LABEL_48;
              v37 = 9;
              goto LABEL_54;
            }
LABEL_169:
            if (*(_BYTE *)(a1 + 3263))
            {
              v93 = (v58 >> 2) & 1;
              v94 = (v59 >> 2) & 1;
              if (v93 > v94)
                goto LABEL_95;
              if (v93 < v94)
                goto LABEL_102;
            }
            else if (*(_DWORD *)(a1 + 3180) != 1
                   && *(_DWORD *)(a1 + 3204) + ((*(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088)) >> 3) != 1
                   && ((v58 ^ v59) & 2) != 0
                   || (v59 & v58 & 2) != 0)
            {
              v95 = *(_DWORD *)(v88 + 200) == 1
                 && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((**(_QWORD **)(v88 + 32) & 0xFFFFFFFFFFFFFFF8) + 8)
                                                    + 16)
                                        + 16) >> 4) & 1;
              v96 = *(_DWORD *)(v80 + 200) == 1
                 && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((**(_QWORD **)(v80 + 32) & 0xFFFFFFFFFFFFFFF8) + 8)
                                                    + 16)
                                        + 16) >> 4) & 1;
              if (((v58 ^ v59) & 0x10000) == 0)
              {
                v97 = v96 & (v58 >> 1);
                v98 = v95 & (v59 >> 1);
                if (v98 == 1 && !v97)
                  goto LABEL_95;
                if ((v97 & (v98 ^ 1)) == 1)
                  goto LABEL_102;
              }
              if (*(_BYTE *)(a1 + 3264))
              {
                v99 = (v58 >> 1) & 1;
                v100 = (v59 >> 1) & 1;
                if (v99 < v100)
                  goto LABEL_95;
                if (v99 > v100)
                  goto LABEL_102;
              }
            }
            if ((v58 & v59 & 4) != 0)
            {
              v108 = (v58 >> 1) & 1;
              v109 = (v59 >> 1) & 1;
              if (v108 < v109)
                goto LABEL_199;
              if (v108 > v109)
                goto LABEL_205;
              v112 = HIWORD(v58) & 1;
              v113 = HIWORD(v59) & 1;
              if (v112 > v113)
                goto LABEL_74;
              if (v112 < v113)
                goto LABEL_76;
            }
            if (((v58 ^ v59) & 1) != 0)
            {
              if (!*(_BYTE *)(a1 + 3261))
                goto LABEL_250;
              v110 = *(_DWORD *)(a1 + 3188);
              if (v110)
              {
                if (v110 < *(_DWORD *)(a1 + 3200))
                {
LABEL_220:
                  if (*(_BYTE *)(a1 + 3260))
                  {
                    if (((v58 ^ v59) & 0x10) == 0 || !*(_BYTE *)(a1 + 3250))
                      goto LABEL_250;
                  }
                  else
                  {
                    if (((v58 ^ v59) & 8) != 0)
                    {
                      v118 = *(_DWORD *)(a1 + 3220);
                      if (*(_DWORD *)(a1 + 3184) >= v118
                        && v118 <= ((*(_QWORD *)(a1 + 1208) - *(_QWORD *)(a1 + 1200)) >> 3))
                      {
                        v119 = (v58 >> 3) & 1;
                        v120 = (v59 >> 3) & 1;
                        if (v119 < v120)
                          goto LABEL_95;
                        if (v119 > v120)
                          goto LABEL_102;
                      }
                    }
                    if (((v58 ^ v59) & 0x10) == 0)
                      goto LABEL_250;
                  }
                  v121 = *(_DWORD *)(a1 + 3192);
                  if (v121 || *(_DWORD *)(a1 + 3188) <= 0xFu)
                  {
                    if (*(_BYTE *)(a1 + 3236))
                    {
                      v121 = *(_DWORD *)(a1 + 3196);
                      v122 = *(_DWORD *)(a1 + 3232);
                    }
                    else
                    {
                      v122 = *(_DWORD *)(a1 + 3228);
                    }
                    if (v121 < v122)
                      goto LABEL_250;
                  }
                  if (*(_DWORD *)(a1 + 3220) > ((*(_QWORD *)(a1 + 1152) - *(_QWORD *)(a1 + 1144)) >> 3))
                    goto LABEL_250;
                  v127 = (v58 >> 4) & 1;
                  v128 = (v59 >> 4) & 1;
                  if (v127 > v128)
                    goto LABEL_95;
                  if (v127 >= v128)
                    goto LABEL_250;
LABEL_102:
                  if (*(unsigned __int8 *)(a2 + 47) < 0xBu)
                    goto LABEL_48;
                  v37 = 10;
                  goto LABEL_54;
                }
              }
            }
            v101 = *(_QWORD *)(a1 + 1528);
            v102 = *(unsigned int *)(a1 + 1544);
            if ((_DWORD)v102)
            {
              v114 = v102 - 1;
              LODWORD(v103) = (v102 - 1) & ((v80 >> 4) ^ (v80 >> 9));
              v104 = (uint64_t *)(v101 + 16 * v103);
              v115 = *v104;
              if (v80 == *v104)
                goto LABEL_240;
              v116 = 1;
              while (v115 != -4096)
              {
                v117 = v103 + v116++;
                v103 = v117 & v114;
                v115 = *(_QWORD *)(v101 + 16 * v103);
                if (v80 == v115)
                  goto LABEL_194;
              }
            }
            v103 = *(unsigned int *)(a1 + 1544);
LABEL_194:
            v104 = (uint64_t *)(v101 + 16 * v103);
            if (!(_DWORD)v102)
              goto LABEL_195;
            v114 = v102 - 1;
LABEL_240:
            LODWORD(v123) = v114 & ((v88 >> 4) ^ (v88 >> 9));
            v105 = (uint64_t *)(v101 + 16 * v123);
            v124 = *v105;
            if (v88 == *v105)
            {
LABEL_196:
              v106 = (uint64_t *)(v101 + 16 * v102);
              if (v104 == v106)
                v107 = 0x7FFFFFFF;
              else
                v107 = *((_DWORD *)v104 + 2);
              if (v105 == v106)
                v111 = 0x7FFFFFFF;
              else
                v111 = *((_DWORD *)v105 + 2);
              if (v107 < v111)
              {
                v34 = 12;
                goto LABEL_47;
              }
              if (v107 > v111)
              {
                if (*(unsigned __int8 *)(a2 + 47) < 0xDu)
                  goto LABEL_48;
                v37 = 12;
                goto LABEL_54;
              }
              if (!*(_BYTE *)(a1 + 3261))
              {
LABEL_250:
                v129 = v58 & 1;
                v130 = v59 & 1;
                if (v129 > v130)
                {
                  v34 = 8;
                  goto LABEL_47;
                }
                if (v129 < v130)
                {
                  if (*(unsigned __int8 *)(a2 + 47) < 9u)
                    goto LABEL_48;
                  v37 = 8;
                  goto LABEL_54;
                }
                v235 = 0;
                v131 = *((_QWORD *)v82 + 2);
                if ((v131 & 0xD00) == 0x500 && (*((_QWORD *)v90 + 2) & 0xD00) == 0x500
                  || (v131 & 0xE00) == 0x600 && (*((_QWORD *)v90 + 2) & 0xE00) == 0x600)
                {
                  v236 = 0;
                  v237 = 0;
                  if (sub_1C4888878(v81, (int *)&v236 + 1, (_DWORD *)&v235 + 1, (_DWORD *)&v237 + 1))
                  {
                    if (sub_1C4888878(v89, (int *)&v236, &v235, &v237) && HIDWORD(v236) == (_DWORD)v236)
                    {
                      if (SHIDWORD(v235) > (int)v235)
                      {
                        v132 = (_BYTE *)(a3 + 47);
LABEL_266:
                        *v132 = 22;
                        goto LABEL_48;
                      }
                      if (SHIDWORD(v235) < (int)v235)
                      {
                        v132 = (_BYTE *)(a2 + 47);
                        if (*(unsigned __int8 *)(a2 + 47) <= 0x16u)
                          goto LABEL_48;
                        goto LABEL_266;
                      }
                    }
                  }
                }
                if ((*(_WORD *)(a3 + 48) & 2) != 0
                  && (*(_WORD *)(a2 + 48) & 2) != 0
                  && *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 226) == *(unsigned __int16 *)(*(_QWORD *)(a3 + 8)
                                                                                               + 226))
                {
                  v133 = *(_DWORD *)(a3 + 36);
                  if (v133 == -1)
                  {
                    v134 = sub_1C4971664(a1, a3);
                    v135 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 226);
                    v136 = v135 - v134;
                    if (v135 < v134)
                      v136 = 0;
                    if (v134)
                      v133 = v136;
                    else
                      v133 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 226);
                    *(_DWORD *)(a3 + 36) = v133;
                  }
                  v137 = *(_DWORD *)(a2 + 36);
                  if (v137 == -1)
                  {
                    v138 = sub_1C4971664(a1, a2);
                    v137 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 226);
                    v139 = v137 - v138;
                    if (v137 < v138)
                      v139 = 0;
                    if (v138)
                      v137 = v139;
                    *(_DWORD *)(a2 + 36) = v137;
                  }
                  if (v133 > v137)
                  {
                    v34 = 4;
                    goto LABEL_47;
                  }
                  if (v133 < v137)
                  {
                    if (*(unsigned __int8 *)(a2 + 47) < 5u)
                      goto LABEL_48;
                    v37 = 4;
                    goto LABEL_54;
                  }
                }
                else if ((*(_WORD *)(a3 + 48) & 0x20) == 0 && (*(_WORD *)(a2 + 48) & 0x20) == 0)
                {
                  v140 = sub_1C4971664(a1, a3);
                  if (((v140 < 0x10) & ((*(unsigned __int16 *)(a3 + 48) | (*(unsigned __int8 *)(a3 + 50) << 16)) >> 2)) != 0)
                    v141 = 0;
                  else
                    v141 = v140;
                  v142 = sub_1C4971664(a1, a2);
                  if (((v142 < 0x10) & ((*(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16)) >> 2)) != 0)
                    v143 = 0;
                  else
                    v143 = v142;
                  if (v141 < v143)
                    goto LABEL_199;
                  if (v141 > v143)
                    goto LABEL_205;
                }
                if (*(_BYTE *)(a1 + 3262))
                  goto LABEL_300;
                v155 = (*(unsigned __int16 *)(a3 + 48) >> 6) & 1;
                v156 = (*(unsigned __int16 *)(a2 + 48) >> 6) & 1;
                if (v155 >= v156)
                {
                  if (v155 <= v156)
                  {
LABEL_300:
                    if (!*(_BYTE *)(*(_QWORD *)(a1 + 64) + 323))
                      goto LABEL_309;
                    v144 = *(_QWORD *)(a1 + 128);
                    if (v144)
                    {
                      v145 = sub_1C4972D84(a1, *(_QWORD *)(a3 + 8), v144, 2u);
                      v146 = sub_1C4972D84(a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 128), 2u);
                      if (v146 && !v145)
                        goto LABEL_199;
                      if ((v145 & (v146 ^ 1)) == 1)
                        goto LABEL_205;
                    }
                    v147 = *(_QWORD *)(a1 + 120);
                    if (!v147)
                      goto LABEL_309;
                    v148 = sub_1C4972D84(a1, *(_QWORD *)(a3 + 8), v147, 1u);
                    v149 = sub_1C4972D84(a1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 120), 1u);
                    if (!v149 || v148)
                    {
                      if ((v148 & (v149 ^ 1)) != 1)
                      {
LABEL_309:
                        if (!*(_BYTE *)(a1 + 3260))
                        {
                          v157 = (*(unsigned __int16 *)(a3 + 48) >> 14) & 1;
                          v158 = (*(unsigned __int16 *)(a2 + 48) >> 14) & 1;
                          if (v157 > v158)
                          {
                            v34 = 19;
                            goto LABEL_47;
                          }
                          if (v157 < v158)
                          {
                            if (*(unsigned __int8 *)(a2 + 47) < 0x14u)
                              goto LABEL_48;
                            v37 = 19;
                            goto LABEL_54;
                          }
                        }
                        if (*(_BYTE *)(a1 + 3250) || *(_BYTE *)(a1 + 3251))
                        {
                          if (!*(_BYTE *)(a1 + 3260))
                          {
                            v150 = *(unsigned __int16 *)(a3 + 48);
                            v151 = v150 | (*(unsigned __int8 *)(a3 + 50) << 16);
                            if ((v150 & 0x400) == 0)
                            {
                              v152 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
                              if (!(*(_WORD *)(a2 + 48) & 0x420 | v151 & 0x20) && ((v152 ^ v151) & 1) == 0)
                              {
                                v153 = (v151 >> 15) & 1;
                                v154 = (v152 >> 15) & 1;
                                if (v153 > v154)
                                {
                                  v34 = 17;
                                  goto LABEL_47;
                                }
                                if (v153 < v154)
                                {
                                  if (*(unsigned __int8 *)(a2 + 47) < 0x12u)
                                    goto LABEL_48;
                                  v37 = 17;
                                  goto LABEL_54;
                                }
                              }
                            }
                          }
                          if (*(_BYTE *)(a1 + 3250))
                            goto LABEL_335;
                        }
                        v159 = *(_QWORD *)(a1 + 64);
                        if (*(_BYTE *)(v159 + 318))
                          goto LABEL_335;
                        if (!*(_BYTE *)(a1 + 3260))
                        {
                          v174 = *(unsigned __int8 *)(a3 + 45);
                          v175 = *(unsigned __int8 *)(a2 + 45);
                          if (v174 > v175)
                            goto LABEL_445;
                          if (v174 < v175)
                          {
LABEL_447:
                            if (*(unsigned __int8 *)(a2 + 47) < 4u)
                              goto LABEL_48;
                            v37 = 3;
                            goto LABEL_54;
                          }
                        }
                        if (*(_BYTE *)(v159 + 401))
                        {
LABEL_335:
                          v160 = *(_QWORD *)(a3 + 8);
                          if ((*(_BYTE *)(v160 + 236) & 1) == 0)
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                          v161 = *(_DWORD *)(v160 + 240);
                          v162 = *(_QWORD *)(a2 + 8);
                          if ((*(_BYTE *)(v162 + 236) & 1) == 0)
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                          if (v161 - *(_DWORD *)(v162 + 240) >= 0)
                            v163 = v161 - *(_DWORD *)(v162 + 240);
                          else
                            v163 = *(_DWORD *)(v162 + 240) - v161;
                          v164 = *(llvm::SUnit ***)(a1 + 1088);
                          v165 = *(llvm::SUnit ***)(a1 + 1096);
                          if (v164 == v165)
                          {
                            v170 = 0;
                          }
                          else
                          {
                            if ((*(_WORD *)(a2 + 48) & 4) != 0 || (*(_WORD *)(a3 + 48) & 4) != 0)
                              goto LABEL_357;
                            v166 = -1;
                            do
                            {
                              v167 = *v164;
                              if ((*((_BYTE *)*v164 + 236) & 1) == 0)
                                llvm::SUnit::ComputeDepth(*v164);
                              if (v166 >= *((_DWORD *)v167 + 60) + *((unsigned __int16 *)v167 + 113))
                                v166 = *((_DWORD *)v167 + 60) + *((unsigned __int16 *)v167 + 113);
                              ++v164;
                            }
                            while (v164 != v165);
                            v168 = *(_QWORD *)(a2 + 8);
                            if ((*(_BYTE *)(v168 + 236) & 1) == 0)
                              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                            if (*(_DWORD *)(v168 + 240) >= v166)
                            {
LABEL_357:
                              v170 = 1;
                            }
                            else
                            {
                              v169 = *(_QWORD *)(a3 + 8);
                              if ((*(_BYTE *)(v169 + 236) & 1) == 0)
                                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                              v170 = *(_DWORD *)(v169 + 240) >= v166;
                            }
                          }
                          v171 = v163 > 4 && v170;
                          if (*(_QWORD *)(a1 + 920) == *(_QWORD *)(a1 + 928) && (v171 & 1) == 0)
                          {
                            v172 = sub_1C4971780(a1, a3);
                            v173 = sub_1C4971780(a1, a2);
                            if ((!v172 || !v173) && (v172 > 1 || v173 >= 2))
                            {
                              if (v172 > v173)
                              {
                                v34 = 25;
                                goto LABEL_47;
                              }
                              if (v172 < v173)
                              {
                                if (*(unsigned __int8 *)(a2 + 47) < 0x1Au)
                                  goto LABEL_48;
                                v37 = 25;
                                goto LABEL_54;
                              }
                            }
                          }
                          if (*(_WORD *)(a3 + 48) & 0x400 | *(_WORD *)(a2 + 48) & 0x400
                            || !*(_BYTE *)(a1 + 3250)
                            && (*(_BYTE *)(a1 + 3260) ? (v179 = 1) : (v179 = v171), (v179 & 1) == 0))
                          {
                            v176 = *(_DWORD *)(a3 + 16);
                            if (v176 == 0x7FFFFFFF)
                            {
                              v177 = 0;
                              v178 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104)
                                   + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a3 + 8) + 192) << 6);
                              while (!(unsigned __int16)*(_DWORD *)(v178 + v177)
                                   || (unsigned __int16)*(_DWORD *)(v178 + v177) - 1 != *(_DWORD *)(a1 + 3144))
                              {
                                v177 += 4;
                                if (v177 == 64)
                                {
                                  v176 = 0;
                                  goto LABEL_390;
                                }
                              }
                              v176 = *(int *)(v178 + v177) >> 16;
LABEL_390:
                              *(_DWORD *)(a3 + 16) = v176;
                            }
                            v180 = *(_DWORD *)(a2 + 16);
                            if (v180 == 0x7FFFFFFF)
                            {
                              v181 = 0;
                              v182 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104)
                                   + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 192) << 6);
                              while (!(unsigned __int16)*(_DWORD *)(v182 + v181)
                                   || (unsigned __int16)*(_DWORD *)(v182 + v181) - 1 != *(_DWORD *)(a1 + 3144))
                              {
                                v181 += 4;
                                if (v181 == 64)
                                {
                                  v180 = 0;
                                  goto LABEL_398;
                                }
                              }
                              v180 = *(int *)(v182 + v181) >> 16;
LABEL_398:
                              *(_DWORD *)(a2 + 16) = v180;
                            }
                            if (v176 < v180)
                              goto LABEL_400;
                            if (v176 > v180)
                            {
LABEL_402:
                              if (*(unsigned __int8 *)(a2 + 47) < 0x13u)
                                goto LABEL_48;
                              v37 = 18;
                              goto LABEL_54;
                            }
                          }
                          v183 = *(_QWORD *)(a3 + 8);
                          if ((*(_BYTE *)(v183 + 236) & 1) == 0)
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                          v184 = *(_DWORD *)(v183 + 240);
                          v185 = *(_QWORD *)(a2 + 8);
                          if ((*(_BYTE *)(v185 + 236) & 1) == 0)
                            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                          v186 = *(_DWORD *)(v185 + 240);
                          if (v184 > v186)
                            v186 = v184;
                          if (*(_DWORD *)(*(_QWORD *)(a1 + 1600) + 4 * *(unsigned int *)(a1 + 3156)) > *(_DWORD *)(*(_QWORD *)(a1 + 16) + 276) * v186)
                          {
                            v187 = sub_1C4973160(a1, a3);
                            v188 = sub_1C4973160(a1, a2);
                            if (v187 > v188)
                            {
                              v34 = 23;
                              goto LABEL_47;
                            }
                            if (v187 < v188)
                            {
                              if (*(unsigned __int8 *)(a2 + 47) < 0x18u)
                                goto LABEL_48;
                              v37 = 23;
                              goto LABEL_54;
                            }
                          }
                          if (!*(_BYTE *)(a1 + 3250) || *(_BYTE *)(a1 + 3260))
                          {
                            v189 = *(_QWORD *)(a3 + 8);
                            if ((*(_BYTE *)(v189 + 236) & 1) == 0)
                              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                            v190 = *(_DWORD *)(v189 + 240);
                            v191 = *(_QWORD *)(a2 + 8);
                            if ((*(_BYTE *)(v191 + 236) & 1) == 0)
                              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                            v192 = *(_DWORD *)(v191 + 240);
                            if (v190 > v192)
                            {
                              v34 = 26;
                              goto LABEL_47;
                            }
                            if (v190 < v192)
                            {
                              if (*(unsigned __int8 *)(a2 + 47) < 0x1Bu)
                                goto LABEL_48;
                              v37 = 26;
                              goto LABEL_54;
                            }
                          }
                          if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 318)
                            || (*(_WORD *)(a2 + 48) & 4) != 0
                            || (*(_WORD *)(a3 + 48) & 4) != 0
                            || *(_BYTE *)(a1 + 3249)
                            || *(_BYTE *)(a1 + 3252))
                          {
                            goto LABEL_432;
                          }
                          v205 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
                          v206 = *(unsigned int *)(v205 + 40);
                          if ((_DWORD)v206)
                          {
                            v207 = 0;
                            v208 = *(unsigned int **)(v205 + 32);
                            v209 = &v208[8 * v206];
                            while (1)
                            {
                              v210 = *v208;
                              if (!*v208)
                              {
                                v211 = v208[1];
                                if ((*(_BYTE *)(a1 + 144) & 1) != 0)
                                {
                                  v212 = 32;
                                  v213 = a1 + 152;
                                  goto LABEL_476;
                                }
                                v212 = *(_DWORD *)(a1 + 160);
                                if (v212)
                                {
                                  v213 = *(_QWORD *)(a1 + 152);
LABEL_476:
                                  v214 = (37 * v211) ^ (37 * ((v210 >> 8) & 0xFFF));
                                  v215 = v212 - 1;
                                  for (i = 1; ; ++i)
                                  {
                                    v217 = v214 & v215;
                                    v218 = v213 + 8 * v217;
                                    if (v211 == *(_DWORD *)v218
                                      && ((*(_WORD *)(v218 + 4) ^ (unsigned __int16)(v210 >> 8)) & 0xFFF) == 0)
                                    {
                                      break;
                                    }
                                    if (*(_DWORD *)v218 == -1 && (~*(unsigned __int16 *)(v218 + 4) & 0xFFF) == 0)
                                      goto LABEL_470;
                                    v214 = v217 + i;
                                  }
                                  if ((v210 & 0x1000000) != 0)
                                    v207 += 4;
                                  else
                                    ++v207;
                                }
                              }
LABEL_470:
                              v208 += 8;
                              if (v208 == v209)
                                goto LABEL_487;
                            }
                          }
                          v207 = 0;
LABEL_487:
                          v219 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
                          v220 = *(unsigned int *)(v219 + 40);
                          if ((_DWORD)v220)
                          {
                            v221 = 0;
                            v222 = *(unsigned int **)(v219 + 32);
                            v223 = &v222[8 * v220];
                            while (1)
                            {
                              v224 = *v222;
                              if (!*v222)
                              {
                                v225 = v222[1];
                                if ((*(_BYTE *)(a1 + 144) & 1) != 0)
                                {
                                  v226 = 32;
                                  v227 = a1 + 152;
                                  goto LABEL_496;
                                }
                                v226 = *(_DWORD *)(a1 + 160);
                                if (v226)
                                {
                                  v227 = *(_QWORD *)(a1 + 152);
LABEL_496:
                                  v228 = (37 * v225) ^ (37 * ((v224 >> 8) & 0xFFF));
                                  v229 = v226 - 1;
                                  for (j = 1; ; ++j)
                                  {
                                    v231 = v228 & v229;
                                    v232 = v227 + 8 * v231;
                                    if (v225 == *(_DWORD *)v232
                                      && ((*(_WORD *)(v232 + 4) ^ (unsigned __int16)(v224 >> 8)) & 0xFFF) == 0)
                                    {
                                      break;
                                    }
                                    if (*(_DWORD *)v232 == -1 && (~*(unsigned __int16 *)(v232 + 4) & 0xFFF) == 0)
                                      goto LABEL_490;
                                    v228 = v231 + j;
                                  }
                                  if ((v224 & 0x1000000) != 0)
                                    v221 += 4;
                                  else
                                    ++v221;
                                }
                              }
LABEL_490:
                              v222 += 8;
                              if (v222 == v223)
                                goto LABEL_507;
                            }
                          }
                          v221 = 0;
LABEL_507:
                          if (v221 > v207)
                          {
LABEL_508:
                            v34 = 28;
                            goto LABEL_47;
                          }
                          if (v221 >= v207)
                          {
                            v233 = sub_1C497327C(a1, a3);
                            v234 = sub_1C497327C(a1, a2);
                            if (v233 > v234)
                              goto LABEL_508;
                            if (v233 >= v234)
                            {
LABEL_432:
                              if (*(_BYTE *)(a1 + 3250))
                                goto LABEL_433;
                              v198 = *(unsigned __int8 *)(a3 + 45);
                              v199 = *(unsigned __int8 *)(a2 + 45);
                              if (v198 > v199)
                              {
LABEL_445:
                                v34 = 3;
                                goto LABEL_47;
                              }
                              if (v198 >= v199)
                              {
LABEL_433:
                                v193 = *(_DWORD *)(a3 + 16);
                                if (v193 == 0x7FFFFFFF)
                                {
                                  v194 = 0;
                                  v195 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104)
                                       + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a3 + 8) + 192) << 6);
                                  while (!(unsigned __int16)*(_DWORD *)(v195 + v194)
                                       || (unsigned __int16)*(_DWORD *)(v195 + v194) - 1 != *(_DWORD *)(a1 + 3144))
                                  {
                                    v194 += 4;
                                    if (v194 == 64)
                                    {
                                      v193 = 0;
                                      goto LABEL_450;
                                    }
                                  }
                                  v193 = *(int *)(v195 + v194) >> 16;
LABEL_450:
                                  *(_DWORD *)(a3 + 16) = v193;
                                }
                                v200 = *(_DWORD *)(a2 + 16);
                                if (v200 == 0x7FFFFFFF)
                                {
                                  v201 = 0;
                                  v202 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104)
                                       + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 192) << 6);
                                  while (!(unsigned __int16)*(_DWORD *)(v202 + v201)
                                       || (unsigned __int16)*(_DWORD *)(v202 + v201) - 1 != *(_DWORD *)(a1 + 3144))
                                  {
                                    v201 += 4;
                                    if (v201 == 64)
                                    {
                                      v200 = 0;
                                      goto LABEL_458;
                                    }
                                  }
                                  v200 = *(int *)(v202 + v201) >> 16;
LABEL_458:
                                  *(_DWORD *)(a2 + 16) = v200;
                                }
                                if (v193 >= v200)
                                {
                                  if (v193 <= v200)
                                  {
                                    if (*(_DWORD *)(*(_QWORD *)(a3 + 8) + 192) <= *(_DWORD *)(*(_QWORD *)(a2 + 8)
                                                                                               + 192))
                                      goto LABEL_48;
                                    v34 = 27;
LABEL_47:
                                    *(_BYTE *)(a3 + 47) = v34;
                                    goto LABEL_48;
                                  }
                                  goto LABEL_402;
                                }
LABEL_400:
                                v34 = 18;
                                goto LABEL_47;
                              }
                              goto LABEL_447;
                            }
                          }
                          if (*(unsigned __int8 *)(a2 + 47) < 0x1Du)
                            goto LABEL_48;
                          v37 = 28;
LABEL_54:
                          *(_BYTE *)(a2 + 47) = v37;
                          goto LABEL_48;
                        }
                        v196 = sub_1C4972E68(a1, *(_QWORD *)(a3 + 8));
                        v197 = sub_1C4972E68(a1, *(_QWORD *)(a2 + 8));
                        if (!v196 || v197)
                        {
                          if (v197 && !v196)
                            goto LABEL_442;
                          v203 = sub_1C4972F6C((_QWORD *)a1, a3);
                          v204 = sub_1C4972F6C((_QWORD *)a1, a2);
                          if (v203 <= v204)
                          {
                            if (v203 >= v204)
                              goto LABEL_335;
LABEL_442:
                            if (*(unsigned __int8 *)(a2 + 47) < 0x10u)
                              goto LABEL_48;
                            v37 = 15;
                            goto LABEL_54;
                          }
                        }
                        v34 = 15;
                        goto LABEL_47;
                      }
LABEL_205:
                      if (*(unsigned __int8 *)(a2 + 47) < 6u)
                        goto LABEL_48;
                      v37 = 5;
                      goto LABEL_54;
                    }
LABEL_199:
                    v34 = 5;
                    goto LABEL_47;
                  }
LABEL_52:
                  if (*(unsigned __int8 *)(a2 + 47) < 2u)
                    goto LABEL_48;
                  v37 = 1;
                  goto LABEL_54;
                }
LABEL_46:
                v34 = 1;
                goto LABEL_47;
              }
              goto LABEL_220;
            }
            v125 = 1;
            while (v124 != -4096)
            {
              v126 = v123 + v125++;
              v123 = v126 & v114;
              v124 = *(_QWORD *)(v101 + 16 * v123);
              if (v88 == v124)
              {
                v105 = (uint64_t *)(v101 + 16 * v123);
                goto LABEL_196;
              }
            }
LABEL_195:
            v105 = (uint64_t *)(v101 + 16 * v102);
            goto LABEL_196;
          }
        }
        if (v84)
        {
          v34 = 9;
          goto LABEL_47;
        }
        goto LABEL_169;
      }
    }
    v84 = 0;
    goto LABEL_156;
  }
LABEL_49:
  result = *(__n128 *)a3;
  v35 = *(_OWORD *)(a3 + 16);
  v36 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 47);
  *(_OWORD *)(a2 + 16) = v35;
  *(_OWORD *)(a2 + 32) = v36;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1C4971664(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  result = *(unsigned int *)(a2 + 32);
  if ((_DWORD)result == -1)
  {
    v5 = sub_1C4972054(a1, *(_QWORD *)(a2 + 8), 0);
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(v6 + 24);
    if (!v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v8 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 16) + 6);
      if ((*(_WORD *)(v7 + 8) & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 808) + 200))(*(_QWORD *)(v8 + 808));
          v14 = *(_QWORD *)(v8 + 672);
        }
        while ((*(_WORD *)(v14 + 24 * v13 + 8) & 0x1FFF) == 0x1FFE);
        v7 = v14 + 24 * v13;
      }
      *(_QWORD *)(v6 + 24) = v7;
    }
    v9 = *(_WORD *)(v7 + 8) & 0x1FFF;
    if (v9 == 0x1FFF)
      v10 = 0;
    else
      v10 = (v9 - 1);
    v11 = v5 - v10;
    v12 = *(unsigned int *)(a1 + 3152);
    if (v11 <= v12)
      result = 0;
    else
      result = (v11 - v12);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_1C4971780(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *(unsigned __int16 *)(a2 + 42);
  if (v2 == 0xFFFF)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v4)
    {
      LOWORD(v2) = 0;
      v5 = *(_QWORD **)(v3 + 32);
      v6 = 16 * v4;
      while (1)
      {
        v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v7 + 212) != 1)
        {
          v8 = 0;
          goto LABEL_15;
        }
        v8 = 0;
        v9 = *(_QWORD *)(v7 + 8);
        v10 = *(_QWORD *)(a1 + 64);
        v11 = **(unsigned __int16 **)(v9 + 16);
        if (v11 > 0x865)
        {
          if (v11 == 4578 || v11 == 4580)
          {
            v8 = 1;
            goto LABEL_15;
          }
          if (v11 == 2150)
LABEL_8:
            v8 = *(_BYTE *)(v10 + 338) != 0;
        }
        else
        {
          if (v11 == 1100)
          {
            v8 = *(unsigned __int8 *)(v10 + 338);
            if (*(_BYTE *)(v10 + 338))
              v8 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 32) + 64) == 7;
            goto LABEL_15;
          }
          if (v11 == 2114)
            goto LABEL_8;
        }
LABEL_15:
        LOWORD(v2) = v2 + v8;
        v5 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_21;
      }
    }
    LOWORD(v2) = 0;
LABEL_21:
    *(_WORD *)(a2 + 42) = v2;
  }
  return (unsigned __int16)v2;
}

uint64_t sub_1C4971864(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  int v5;
  BOOL v7;
  BOOL v9;
  uint64_t v10;

  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = *v4;
  v7 = (v5 - 9) <= 0x3C && ((1 << (v5 - 9)) & 0x1000000000000605) != 0 || v5 == 0;
  if (!v7 && !(*((_QWORD *)v4 + 1) & 0x10 | *((_QWORD *)v4 + 2) & 1))
  {
    if ((*((_QWORD *)v4 + 2) & 0x10) != 0)
      return a1 + 1000;
    if ((v5 - 4581) <= 0xB)
      return a1 + 1224;
    if (sub_1C496F2F0(a2))
      return a1 + 1056;
    if (sub_1C4971F84(a2))
      return a1 + 1112;
    if (sub_1C496FBB0(a2))
      return a1 + 1168;
    return a1 + 1280;
  }
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 64);
  if (*v4 > 0x865u)
  {
    if (v5 == 4578 || v5 == 4580)
      return a1 + 888;
    if (v5 != 2150)
      goto LABEL_21;
    goto LABEL_15;
  }
  if (v5 == 1100)
  {
    if (*(_BYTE *)(v10 + 338))
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) == 7;
    else
      v9 = 0;
  }
  else if (v5 == 2114)
  {
LABEL_15:
    v9 = *(_BYTE *)(v10 + 338) != 0;
  }
LABEL_21:
  if (v9 || (*((_QWORD *)v4 + 2) & 0xD00) == 0x900 || (*((_QWORD *)v4 + 2) & 0xE00) == 0xA00)
    return a1 + 888;
  if ((*((_BYTE *)v4 + 9) & 0x20) != 0)
    return a1 + 944;
  else
    return a1 + 832;
}

uint64_t sub_1C49719DC(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v6;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  v3 = 1;
  if (v2 > 0x12)
  {
    if (v2 == 19)
    {
      v6 = *(_QWORD *)(a1 + 32);
      return *(_BYTE *)v6
          || *(_BYTE *)(v6 + 32)
          || (*(_DWORD *)(v6 + 4) - 1) < 0x3FFFFFFF
          || (*(_DWORD *)(v6 + 36) - 1) <= 0x3FFFFFFE;
    }
    if (v2 == 69)
      return v3;
    return (v1[4] & 0x10) != 0;
  }
  if (*v1 <= 0x11u && v2 != 0 && v2 != 9)
  {
    if (v2 == 11)
      return 1;
    return (v1[4] & 0x10) != 0;
  }
  return v3;
}

uint64_t sub_1C4971A84(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  BOOL v11;
  llvm *UnderlyingObject;
  unint64_t v13;
  _DWORD *v14;
  BOOL v15;
  llvm *v16;
  uint64_t v18;
  llvm::MachineOperand *v19;
  int v20;
  const llvm::MachineOperand *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;

  result = 0;
  if (!a1 || !a2)
    return result;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a2 + 8);
  v6 = v4[2];
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v5[2];
  if ((v7 & 0xD00) == 0x500 && (*(_QWORD *)(v8 + 16) & 0xD00) == 0x500
    || (v7 & 0xE00) == 0x600 && (*(_QWORD *)(v8 + 16) & 0xE00) == 0x600)
  {
    v9 = v4[6];
    if (v9 >= 8)
    {
      if ((v9 & 7) != 0)
      {
        v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
        v11 = (v4[6] & 7) != 3 || v10 == 0;
        if (v11 || !*v10)
          goto LABEL_14;
      }
      else
      {
        v9 &= 0xFFFFFFFFFFFFFFF8;
        v4[6] = v9;
      }
      if ((v9 & 7) != 0)
      {
        v22 = *(uint64_t **)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v22 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
        v4[6] = v22;
      }
      UnderlyingObject = 0;
      v24 = *v22;
      if ((*v22 & 4) == 0 && (v24 & 0xFFFFFFFFFFFFFFF8) != 0)
        UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v24 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
LABEL_15:
      v13 = v5[6];
      if (v13 >= 8)
      {
        if ((v13 & 7) != 0)
        {
          v14 = (_DWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
          v15 = (v5[6] & 7) != 3 || v14 == 0;
          if (v15 || !*v14)
            goto LABEL_22;
        }
        else
        {
          v13 &= 0xFFFFFFFFFFFFFFF8;
          v5[6] = v13;
        }
        if ((v13 & 7) != 0)
        {
          v23 = *(uint64_t **)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v23 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
          v5[6] = v23;
        }
        v16 = 0;
        v25 = *v23;
        if ((v25 & 4) == 0)
        {
          v26 = (llvm *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if (v26)
            v16 = llvm::getUnderlyingObject(v26, (const llvm::Value *)6);
        }
        return UnderlyingObject && UnderlyingObject == v16;
      }
LABEL_22:
      v16 = 0;
      return UnderlyingObject && UnderlyingObject == v16;
    }
LABEL_14:
    UnderlyingObject = 0;
    goto LABEL_15;
  }
  result = 0;
  if ((v7 & 2) != 0 && (*(_QWORD *)(v8 + 16) & 2) != 0)
  {
    v18 = v4[4] + 32 * *(unsigned __int8 *)(v6 + 4);
    v20 = *(unsigned __int8 *)(v18 + 64);
    v19 = (llvm::MachineOperand *)(v18 + 64);
    if (v20 == 7
      && (v21 = (const llvm::MachineOperand *)(v5[4] + 32 * *(unsigned __int8 *)(v8 + 4) + 64), *(_BYTE *)v21 == 7))
    {
      return llvm::MachineOperand::isIdenticalTo(v19, v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *sub_1C4971C48(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[97];

  v15[96] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 0x20)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4971E00((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_BYTE *)v9 + 16) = *(_BYTE *)(a1 + v8 + 24);
      v9 += 3;
    }
    v8 += 24;
  }
  while (v8 != 768);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C4971E00((int *)a1, v15, v9);
}

int *sub_1C4971E00(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int64x2_t *v4;
  int64x2_t *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  int v22;
  BOOL v23;
  unsigned int v25;
  unsigned int v27;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v4 = (int64x2_t *)(result + 194);
    v5 = (int64x2_t *)(result + 2);
  }
  else
  {
    v27 = result[4];
    if (!v27)
      goto LABEL_5;
    v5 = (int64x2_t *)*((_QWORD *)result + 1);
    v4 = (int64x2_t *)((char *)v5 + 24 * v27);
  }
  v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v5 = v6;
    v5 = (int64x2_t *)((char *)v5 + 24);
  }
  while (v5 != v4);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    v8 = a2[1];
    if ((*a2 != -4096 || v8 != -4096) && (v7 != -8192 || v8 != -8192))
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v10 = 32;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v10 = result[4];
      }
      v11 = ((v8 >> 4) ^ (v8 >> 9) | ((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32))
          + ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32);
      v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
      v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
      v14 = ((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27));
      v15 = v10 - 1;
      v16 = (v10 - 1) & v14;
      v17 = (uint64_t *)&v9[6 * v16];
      v18 = *v17;
      v19 = v17[1];
      if (v7 != *v17 || v8 != v19)
      {
        v21 = 0;
        v22 = 1;
        while (v18 != -4096 || v19 != -4096)
        {
          if (v21)
            v23 = 0;
          else
            v23 = v19 == -8192;
          if (v23 && v18 == -8192)
            v21 = v17;
          v25 = v16 + v22++;
          v16 = v25 & v15;
          v17 = (uint64_t *)&v9[6 * (v25 & v15)];
          v18 = *v17;
          v19 = v17[1];
          if (v7 == *v17 && v8 == v19)
            goto LABEL_32;
        }
        if (v21)
          v17 = v21;
      }
LABEL_32:
      *v17 = v7;
      v17[1] = a2[1];
      *((_BYTE *)v17 + 16) = *((_BYTE *)a2 + 16);
      *result += 2;
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1C4971F84(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  BOOL v4;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  v4 = (v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0;
  if (v4 || (v1[4] & 0x10) != 0 || (v1[8] & 5) != 0 || !*(_DWORD *)(a1 + 40) || **(_DWORD **)(a1 + 32))
    return 0;
  else
    return HIBYTE(**(_DWORD **)(a1 + 32)) & 1;
}

uint64_t sub_1C4971FF4(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint8x8_t v4;

  if (!a4)
    return *(_DWORD *)(*(_QWORD *)(a1 + 264)
                     + 24
                     * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 24)
                      + *(_DWORD *)(a1 + 272) * ((*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3))
                     + 4) >> 4;
  v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(_QWORD *)(a1 + 232) + 8 * a4));
  v4.i16[0] = vaddlv_u8(v4);
  return v4.u32[0];
}

uint64_t sub_1C4972054(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  BOOL v22;
  BOOL v23;
  unsigned __int16 *v24;
  int v25;
  BOOL v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned __int16 *v45;
  int v46;
  BOOL v47;
  BOOL v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v82;
  uint64_t v83;
  _WORD *v84;
  int v85;
  int v86;
  uint64_t *v87;
  uint64_t *v88;
  int v89;
  int v90;

  v5 = *(unsigned int *)(a2 + 252);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 64) + 318))
  {
    v44 = *(_QWORD *)(a2 + 8);
    v45 = *(unsigned __int16 **)(v44 + 16);
    v46 = *v45;
    v47 = (v46 - 9) > 0x3C || ((1 << (v46 - 9)) & 0x1000000000000605) == 0;
    v48 = !v47 || v46 == 0;
    if (v48 || (v45[4] & 0x10) != 0 || (v45[8] & 1) != 0)
    {
      v49 = *(_DWORD **)(v44 + 32);
      if ((*v49 & 0x10000FF) == 0x1000000)
      {
        v50 = *(unsigned int *)(a2 + 120);
        if ((_DWORD)v50)
        {
          v51 = *(uint64_t **)(a2 + 112);
          v52 = &v51[2 * v50];
          v53 = v49[1];
          v54 = &unk_1ED830000;
          do
          {
            v55 = *v51;
            if ((*v51 & 6) == 0)
            {
              v56 = v55 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
              {
                v57 = *(_QWORD *)(v56 + 8);
                v58 = *(_QWORD *)(v57 + 16);
                v59 = *(unsigned __int16 *)(v58 + 2);
                if (*(_WORD *)(v58 + 2))
                {
                  v60 = *(unsigned __int8 *)(v58 + 4);
                  v61 = *(_WORD **)(v56 + 24);
                  if (!v61)
                  {
                    if (v54[968] && (v62 = *(_QWORD *)(a1 + 8), (v63 = *(_QWORD *)(v62 + 672)) != 0))
                    {
                      v64 = *(unsigned __int16 *)(v58 + 6);
                      v61 = (_WORD *)(v63 + 24 * v64);
                      if ((v61[4] & 0x1FFF) == 0x1FFE)
                      {
                        v86 = v53;
                        v88 = v52;
                        v90 = a3;
                        do
                        {
                          v78 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v62 + 808)
                                                                                             + 200))(*(_QWORD *)(v62 + 808), v64, v57, v62 + 632);
                          v64 = v78;
                          v79 = *(_QWORD *)(v62 + 672);
                        }
                        while ((*(_WORD *)(v79 + 24 * v78 + 8) & 0x1FFF) == 0x1FFE);
                        v61 = (_WORD *)(v79 + 24 * v78);
                        a3 = v90;
                        v52 = v88;
                        v53 = v86;
                        v54 = (_BYTE *)&unk_1ED830000;
                      }
                      *(_QWORD *)(v56 + 24) = v61;
                    }
                    else
                    {
                      v61 = 0;
                    }
                  }
                  v65 = (v59 - 1);
                  if ((int)v65 > (int)v60)
                  {
                    v66 = 0;
                    v67 = v61;
                    do
                    {
                      v68 = *(_QWORD *)(v57 + 32);
                      v69 = v60 + 1;
                      if (!*(_BYTE *)(v68 + 32 * v60))
                      {
                        if (*(_DWORD *)(v68 + 32 * v60 + 4) == v53 && *(_BYTE *)(v68 + 32 * v69) == 1)
                        {
                          if (a3 && v61[10])
                          {
                            v70 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 152)
                                           + 12 * (unsigned __int16)v61[9]
                                           + 8);
                            v71 = 12 * (unsigned __int16)v61[10];
                            while (1)
                            {
                              v72 = *(v70 - 2);
                              if (v72 >= v66)
                              {
                                if (v72 > v66)
                                  goto LABEL_110;
                                if (!*(v70 - 1))
                                  break;
                              }
                              v70 += 3;
                              v71 -= 12;
                              if (!v71)
                                goto LABEL_110;
                            }
                            if (*v70)
                              return 0xFFFFFFFFLL;
                          }
LABEL_110:
                          if ((*(_BYTE *)(v68 + 32 * v69 + 16) & 1) != 0)
                          {
                            if (!v67)
                            {
                              if (v54[968])
                              {
                                v73 = *(_QWORD *)(a1 + 8);
                                v74 = *(_QWORD *)(v73 + 672);
                                if (v74)
                                {
                                  v67 = (_WORD *)(v74
                                                + 24
                                                * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 16) + 6));
                                  if ((v67[4] & 0x1FFF) == 0x1FFE)
                                  {
                                    v85 = v53;
                                    v87 = v52;
                                    v89 = a3;
                                    v84 = v61;
                                    do
                                    {
                                      v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v73 + 808) + 200))(*(_QWORD *)(v73 + 808));
                                      v77 = *(_QWORD *)(v73 + 672);
                                    }
                                    while ((*(_WORD *)(v77 + 24 * v76 + 8) & 0x1FFF) == 0x1FFE);
                                    v67 = (_WORD *)(v77 + 24 * v76);
                                    a3 = v89;
                                    v52 = v87;
                                    v53 = v85;
                                    v54 = (_BYTE *)&unk_1ED830000;
                                    v61 = v84;
                                  }
                                  *(_QWORD *)(v56 + 24) = v67;
                                }
                              }
                            }
                            if (v67 == *(_WORD **)(a1 + 80))
                            {
                              if ((a3 & 1) != 0)
                                return 0xFFFFFFFFLL;
                              v75 = *(_DWORD *)(v56 + 252) + *(unsigned __int16 *)(v56 + 226);
                              if (v5 <= v75 + 1)
                                v5 = (v75 + 1);
                              else
                                v5 = v5;
                            }
                          }
                        }
                        ++v66;
                      }
                      v60 = v69;
                    }
                    while (v69 != v65);
                  }
                }
              }
            }
            v51 += 2;
          }
          while (v51 != v52);
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    v6 = *(_WORD **)(a2 + 24);
    if (!v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v6 = (_WORD *)(*(_QWORD *)(v7 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6));
      if ((v6[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v82 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 808) + 200))(*(_QWORD *)(v7 + 808));
          v83 = *(_QWORD *)(v7 + 672);
        }
        while ((*(_WORD *)(v83 + 24 * v82 + 8) & 0x1FFF) == 0x1FFE);
        v6 = (_WORD *)(v83 + 24 * v82);
      }
      *(_QWORD *)(a2 + 24) = v6;
    }
    v8 = (unsigned __int16)v6[6];
    if (v6[6])
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v9 + 176) + 136) + 4 * (unsigned __int16)v6[5]);
      v11 = &v10[2 * v8];
      v12 = *(_QWORD *)(v9 + 32);
      do
      {
        v13 = *v10;
        v14 = *(unsigned int *)(v12 + 32 * v13 + 8);
        if ((_DWORD)v14)
        {
          v15 = -1;
          v16 = (uint64_t *)(a1 + 1680);
          do
          {
            v17 = *v16;
            v16 += 10;
            v18 = *(_DWORD *)(v17 + 4 * v13) + v10[1];
            if (v15 >= v18)
              v15 = v18;
            --v14;
          }
          while (v14);
        }
        else
        {
          v15 = -1;
        }
        if (v15 <= v5)
          v5 = v5;
        else
          v5 = v15;
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
  v19 = *(_QWORD *)(a1 + 120);
  if (v19)
  {
    v20 = *(unsigned __int16 **)(*(_QWORD *)(v19 + 8) + 16);
    v21 = *v20;
    v22 = (v21 - 9) > 0x3C || ((1 << (v21 - 9)) & 0x1000000000000605) == 0;
    v23 = !v22 || v21 == 0;
    if (!v23 && (v20[4] & 0x10) == 0 && (v20[8] & 1) == 0)
    {
      v24 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
      v25 = *v24;
      v26 = (v25 - 9) > 0x3C || ((1 << (v25 - 9)) & 0x1000000000000605) == 0;
      v27 = !v26 || v25 == 0;
      if (v27 || (v24[4] & 0x10) != 0 || (v24[8] & 1) != 0)
        v5 = *(unsigned int *)(a1 + 3152);
    }
  }
  v28 = *(unsigned __int16 *)(a2 + 226);
  if (*(_DWORD *)(a1 + 3152) >= v28)
    return v5;
  v29 = *(_QWORD *)(a2 + 8);
  if (!*(_BYTE *)(*(_QWORD *)(v29 + 16) + 4))
    return v5;
  v30 = *(unsigned int *)(a2 + 120);
  if (!(_DWORD)v30)
    return v5;
  v31 = *(_DWORD *)(*(_QWORD *)(v29 + 32) + 4);
  v32 = *(_QWORD **)(a2 + 112);
  v33 = &v32[2 * v30];
  while (1)
  {
    v34 = *v32 & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_QWORD *)(v34 + 8);
    if (*(_DWORD *)(v34 + 192) != -1 || v35 == 0)
      goto LABEL_52;
    v37 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 8);
    if ((*(_WORD *)(v35 + 44) & 0xC) != 0 && (*(_WORD *)(v35 + 44) & 4) == 0)
      break;
    if ((*(_QWORD *)(*(_QWORD *)(v35 + 16) + 8) & 0xD00) == 0x400)
      goto LABEL_67;
LABEL_52:
    v32 += 2;
    if (v32 == v33)
      return v5;
  }
  v39 = v35;
  if ((v37 & 0x400) == 0)
  {
    while ((*(_WORD *)(v39 + 44) & 8) != 0)
    {
      v39 = *(_QWORD *)(v39 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 9) & 4) != 0)
        goto LABEL_57;
    }
    goto LABEL_52;
  }
LABEL_57:
  if ((v37 & 0x100) != 0)
    goto LABEL_52;
  v40 = v35;
  while ((*(_WORD *)(v40 + 44) & 8) != 0)
  {
    v40 = *(_QWORD *)(v40 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v40 + 16) + 9) & 1) != 0)
      goto LABEL_52;
  }
  if ((v37 & 0x800) != 0)
    goto LABEL_52;
  v41 = v35;
  while ((*(_WORD *)(v41 + 44) & 8) != 0)
  {
    v41 = *(_QWORD *)(v41 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v41 + 16) + 9) & 8) != 0)
      goto LABEL_52;
  }
LABEL_67:
  v42 = *(unsigned int *)(v35 + 40);
  if (!(_DWORD)v42)
    goto LABEL_52;
  v43 = (_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
  while ((*(v43 - 1) & 0x10000FF) != 0 || *v43 != v31)
  {
    v43 += 8;
    if (!--v42)
      goto LABEL_52;
  }
  v80 = v28 - (*(_QWORD *)(*(_QWORD *)(v35 + 24) + 64) == *(_QWORD *)(*(_QWORD *)(v35 + 24) + 72));
  if (v80 <= v5)
    return v5;
  else
    return v80;
}

uint64_t sub_1C49726B8(uint64_t a1, uint64_t a2)
{
  _WORD *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  uint64_t v12;

  v3 = *(_WORD **)(a2 + 24);
  if (!v3)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v3 = (_WORD *)(*(_QWORD *)(v5 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6));
    if ((v3[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 808) + 200))(*(_QWORD *)(v5 + 808));
        v12 = *(_QWORD *)(v5 + 672);
      }
      while ((*(_WORD *)(v12 + 24 * v11 + 8) & 0x1FFF) == 0x1FFE);
      v3 = (_WORD *)(v12 + 24 * v11);
    }
    *(_QWORD *)(a2 + 24) = v3;
  }
  v6 = (unsigned __int16)v3[6];
  if (!v3[6])
    return 0;
  v7 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 136)
                          + 4 * (unsigned __int16)v3[5]);
  v8 = 4 * v6;
  while (1)
  {
    v9 = *v7;
    if (*(_DWORD *)(a1 + 112) != v9
      && *(_DWORD *)(a1 + 116) != v9
      && *(_DWORD *)(a1 + 108) != v9
      && *(_DWORD *)(a1 + 104) != v9)
    {
      break;
    }
    v7 += 2;
    v8 -= 4;
    if (!v8)
      return 0;
  }
  return 1;
}

uint64_t sub_1C49727E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  char v4;
  _DWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;

  v3 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + 20) & 0x10) != 0)
  {
    v8 = (_DWORD *)(a1 + 3272);
    v18 = *(_QWORD **)(a2 + 8);
    v19 = 0;
    v20 = 0;
    if ((sub_1C497292C(a1 + 3272, v3, &v20) & 1) != 0)
    {
      v4 = *((_BYTE *)v20 + 8) != 0;
    }
    else
    {
      v10 = sub_1C49729D8(v8, (uint64_t *)&v18, v20);
      *v10 = v3;
      *((_BYTE *)v10 + 8) = 0;
      v11 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *(_QWORD **)(a2 + 32);
        v14 = 16 * v11;
        do
        {
          if ((*v13 & 6) == 0)
            v12 |= sub_1C49727E0(a1, *v13 & 0xFFFFFFFFFFFFFFF8, a3 + 1);
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      else
      {
        LOBYTE(v12) = 0;
      }
      v15 = *(_QWORD **)(a2 + 8);
      v4 = (a3 > 3) | v12;
      v20 = v15;
      v18 = 0;
      v16 = sub_1C497292C((uint64_t)v8, (uint64_t)v15, &v18);
      v17 = v18;
      if ((v16 & 1) == 0)
      {
        v17 = sub_1C49729D8(v8, (uint64_t *)&v20, v18);
        *v17 = v15;
        *((_BYTE *)v17 + 8) = 0;
      }
      *((_BYTE *)v17 + 8) = v4 & 1;
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1C497292C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C49729D8(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4972A98((uint64_t)a1, v6);
  v8 = 0;
  sub_1C497292C((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C4972A98(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4972C10(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      v9[8] = *(_BYTE *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4972C10(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C4972C10(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C497292C((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_BYTE *)v11 + 8) = *(_BYTE *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C4972CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  int v11;

  if (*(_BYTE *)(a2 + 28))
    return *(unsigned int *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 3144);
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 4912) + 4 * v4);
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 == 0x7FFFFFFF)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v3 + 3104) + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 192) << 6);
    while (1)
    {
      v9 = (unsigned __int16)*(_DWORD *)(v8 + v7);
      v10 = v9 != 0;
      v11 = v9 - 1;
      if (v10 && v11 == (_DWORD)v4)
        break;
      v7 += 4;
      if (v7 == 64)
      {
        v6 = 0;
        goto LABEL_12;
      }
    }
    v6 = *(int *)(v8 + v7) >> 16;
LABEL_12:
    *(_DWORD *)(a2 + 16) = v6;
  }
  v2 = (v6 + v5);
  if ((float)(*(float *)(a1 + 3240) * (float)*(unsigned int *)(a1 + 3160)) <= (float)v2)
  {
    *(_DWORD *)(a2 + 24) = v2;
  }
  else
  {
    v2 = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }
  *(_BYTE *)(a2 + 28) = 1;
  return v2;
}

uint64_t sub_1C4972D84(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  unsigned __int16 *v9;
  int v10;
  int v11;
  int v12;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v18;

  result = sub_1C49726B8(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_1C49726B8(a1, a3);
    if ((_DWORD)result)
    {
      v9 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 32) + 8);
      v10 = v9[38451];
      v11 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6);
      v12 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 6);
      if (v11 == v10 || v12 == v10)
      {
        v14 = v9 + 193755;
        v15 = v9 + 47187;
        v16 = v9[28515];
        v17 = *v15;
        v18 = *v14;
        if (v12 != v10)
          return v11 == v16 || v11 == v17 || v11 == v18 || v12 == v16 || v12 == v17 || v12 == v18;
        result = 0;
        if (a4 <= 1 && v11 == v16)
          return v11 == v16 || v11 == v17 || v11 == v18 || v12 == v16 || v12 == v17 || v12 == v18;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1C4972E68(uint64_t a1, uint64_t a2)
{
  _WORD *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;

  v3 = *(_WORD **)(a2 + 24);
  if (!v3)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v3 = (_WORD *)(*(_QWORD *)(v5 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6));
    if ((v3[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 808) + 200))(*(_QWORD *)(v5 + 808));
        v14 = *(_QWORD *)(v5 + 672);
      }
      while ((*(_WORD *)(v14 + 24 * v13 + 8) & 0x1FFF) == 0x1FFE);
      v3 = (_WORD *)(v14 + 24 * v13);
    }
    *(_QWORD *)(a2 + 24) = v3;
  }
  v6 = (unsigned __int16)v3[6];
  if (!v3[6])
    return 0;
  v7 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 136)
                          + 4 * (unsigned __int16)v3[5]);
  v8 = *(_DWORD *)(a1 + 116);
  v9 = 4 * v6 - 4;
  do
  {
    v10 = *v7;
    v7 += 2;
    result = v8 == v10;
    v12 = v8 == v10 || v9 == 0;
    v9 -= 4;
  }
  while (!v12);
  return result;
}

uint64_t sub_1C4972F6C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  int v9;
  int v10;
  uint64_t *v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  BOOL v23;
  BOOL v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  result = *(unsigned __int8 *)(a2 + 44);
  if ((_DWORD)result == 255)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v28[0] = 0;
    v6 = (uint64_t *)a1[108];
    v7 = (uint64_t *)a1[109];
    if (v6 == v7)
    {
      v10 = 0;
      v9 = 0;
LABEL_11:
      v12 = (uint64_t *)a1[122];
      v13 = (uint64_t *)a1[123];
      if (v12 == v13)
      {
LABEL_18:
        v16 = *(unsigned int *)(v5 + 40);
        if ((_DWORD)v16)
        {
          v17 = *(_QWORD **)(v5 + 32);
          v18 = 16 * v16 - 16;
          do
          {
            v19 = *v17 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v19 + 212) == 1)
            {
              v20 = *(_QWORD *)(v19 + 8);
              if (v20)
              {
                v21 = *(unsigned __int16 **)(v20 + 16);
                v22 = *v21;
                v23 = (v22 - 9) > 0x3C
                   || ((1 << (v22 - 9)) & 0x1000000000000605) == 0;
                v24 = !v23 || v22 == 0;
                if (v24 || (v21[4] & 0x10) != 0 || (v21[8] & 1) != 0)
                {
                  v25 = sub_1C4972E68((uint64_t)a1, v19);
                  ++*(_DWORD *)((unint64_t)v28 | (4 * v25));
                  v9 = v28[0];
                  v10 = HIDWORD(v28[0]);
                }
              }
            }
            if (v9)
              v26 = v10 == 0;
            else
              v26 = 1;
            result = !v26;
            if (!v26)
              break;
            v17 += 2;
            v27 = v18;
            v18 -= 16;
          }
          while (v27);
        }
        else
        {
          result = 0;
        }
        goto LABEL_44;
      }
      while (1)
      {
        v14 = sub_1C4972E68((uint64_t)a1, *v12);
        ++*(_DWORD *)((unint64_t)v28 | (4 * v14));
        v9 = v28[0];
        v10 = HIDWORD(v28[0]);
        if (LODWORD(v28[0]) && HIDWORD(v28[0]) != 0)
          break;
        if (++v12 == v13)
          goto LABEL_18;
      }
    }
    else
    {
      while (1)
      {
        v8 = sub_1C4972E68((uint64_t)a1, *v6);
        ++*(_DWORD *)((unint64_t)v28 | (4 * v8));
        v9 = v28[0];
        v10 = HIDWORD(v28[0]);
        if (LODWORD(v28[0]) && HIDWORD(v28[0]) != 0)
          break;
        if (++v6 == v7)
          goto LABEL_11;
      }
    }
    result = 1;
LABEL_44:
    *(_BYTE *)(a2 + 44) = result;
  }
  return result;
}

uint64_t sub_1C4973160(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  result = *(unsigned int *)(a2 + 20);
  if ((_DWORD)result == -1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_WORD **)(v5 + 24);
    if (!v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v6 = (_WORD *)(*(_QWORD *)(v7 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 6));
      if ((v6[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 808) + 200))(*(_QWORD *)(v7 + 808));
          v11 = *(_QWORD *)(v7 + 672);
        }
        while ((*(_WORD *)(v11 + 24 * v10 + 8) & 0x1FFF) == 0x1FFE);
        v6 = (_WORD *)(v11 + 24 * v10);
      }
      *(_QWORD *)(v5 + 24) = v6;
    }
    if (v6[6])
    {
      v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 136)
                              + 4 * (unsigned __int16)v6[5]
                              + 2);
      v9 = 4 * (unsigned __int16)v6[6];
      while (*(_DWORD *)(a1 + 3156) != *(v8 - 1))
      {
        v8 += 2;
        v9 -= 4;
        if (!v9)
          goto LABEL_9;
      }
      result = *v8;
    }
    else
    {
LABEL_9:
      result = 0;
    }
    *(_DWORD *)(a2 + 20) = result;
  }
  return result;
}

uint64_t sub_1C497327C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  int v18;
  int i;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v2 = *(unsigned __int8 *)(a2 + 46);
  if ((_DWORD)v2 == 255)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v4)
    {
      LODWORD(v2) = 0;
      v5 = *(_QWORD **)(v3 + 32);
      v6 = &v5[2 * v4];
      while (1)
      {
        v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v7 + 212) == 1)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = *(unsigned int *)(v8 + 40);
            if ((_DWORD)v9)
              break;
          }
        }
LABEL_32:
        v5 += 2;
        if (v5 == v6)
          goto LABEL_35;
      }
      v10 = *(unsigned int **)(v8 + 32);
      v11 = &v10[8 * v9];
      while (1)
      {
        v12 = *v10;
        if (!*v10)
        {
          v13 = v10[1];
          if ((*(_BYTE *)(a1 + 144) & 1) != 0)
          {
            v14 = 32;
            v15 = a1 + 152;
            goto LABEL_15;
          }
          v14 = *(_DWORD *)(a1 + 160);
          if (v14)
          {
            v15 = *(_QWORD *)(a1 + 152);
LABEL_15:
            v16 = v12 >> 8;
            v17 = (37 * v13) ^ (37 * ((v12 >> 8) & 0xFFF));
            v18 = v14 - 1;
            for (i = 1; ; ++i)
            {
              v20 = v17 & v18;
              v21 = v15 + 8 * v20;
              if (v13 == *(_DWORD *)v21 && ((*(_WORD *)(v21 + 4) ^ v16) & 0xFFF) == 0)
                break;
              if (*(_DWORD *)v21 == -1 && (~*(unsigned __int16 *)(v21 + 4) & 0xFFF) == 0)
                goto LABEL_9;
              v17 = v20 + i;
            }
            v22 = *(_QWORD *)(a1 + 408);
            v23 = *(unsigned int *)(a1 + 416);
            if ((_DWORD)v23)
            {
              v24 = 8 * v23;
              v25 = v22 + 8 * v23;
              while (*(_DWORD *)v22 != v13 || ((*(_WORD *)(v22 + 4) ^ v16) & 0xFFF) != 0)
              {
                v22 += 8;
                v24 -= 8;
                if (!v24)
                {
                  v22 = v25;
                  break;
                }
              }
            }
            if (*(unsigned __int16 *)(v22 + 4) >> 13)
              v26 = 2;
            else
              v26 = 1;
            LODWORD(v2) = (v26 << ((v12 >> 23) & 2)) + v2;
          }
        }
LABEL_9:
        v10 += 8;
        if (v10 == v11)
          goto LABEL_32;
      }
    }
    LODWORD(v2) = 0;
LABEL_35:
    if (v2 >= 0xFE)
      v2 = 254;
    else
      v2 = v2;
    *(_BYTE *)(a2 + 46) = v2;
  }
  return v2;
}

uint64_t sub_1C4973420(uint64_t result, int a2, unsigned __int16 a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int i;
  unsigned int v8;
  uint64_t v9;
  int v10;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
      return result;
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = (37 * (a3 & 0xFFF)) ^ (37 * a2);
  v6 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v8 = v5 & v6;
    v9 = v3 + 8 * v8;
    if (*(_DWORD *)v9 == a2 && ((*(_WORD *)(v9 + 4) ^ a3) & 0xFFF) == 0)
      break;
    if (*(_DWORD *)v9 == -1 && (~*(unsigned __int16 *)(v9 + 4) & 0xFFF) == 0)
      return result;
    v5 = v8 + i;
  }
  *(_QWORD *)v9 = 0xFFEFFFFFFFELL;
  v10 = *(_DWORD *)(result + 4) + 1;
  *(_DWORD *)result -= 2;
  *(_DWORD *)(result + 4) = v10;
  return result;
}

void sub_1C49734CC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4973674((_DWORD *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = a1 + v8;
    v11 = *(_DWORD *)(a1 + v8 + 8);
    if (v11 == -2)
    {
      if ((*(_WORD *)(v10 + 12) & 0xFFF) == 0xFFE)
        goto LABEL_15;
LABEL_14:
      *(_QWORD *)v9 = *(_QWORD *)(v10 + 8);
      v9 += 2;
      goto LABEL_15;
    }
    if (v11 != -1 || (~*(unsigned __int16 *)(a1 + v8 + 12) & 0xFFF) != 0)
      goto LABEL_14;
LABEL_15:
    v8 += 8;
  }
  while (v8 != 256);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  sub_1C4973674((_DWORD *)a1, v14, v9);
}

void sub_1C4973674(_DWORD *a1, int *a2, int *a3)
{
  int v6;
  _DWORD *v7;
  size_t v8;
  void *v9;
  int v10;
  int v11;
  _DWORD *v12;
  int *v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int *v19;
  int v20;
  BOOL v21;
  uint64_t v22;

  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v8 = 256;
    v9 = a1 + 2;
LABEL_3:
    memset_pattern16(v9, &unk_1C6612680, v8);
    goto LABEL_4;
  }
  v22 = a1[4];
  if ((_DWORD)v22)
  {
    v9 = (void *)*((_QWORD *)a1 + 1);
    v8 = 8 * v22;
    goto LABEL_3;
  }
LABEL_4:
  while (a2 != a3)
  {
    v10 = *a2;
    if (*a2 == -2)
    {
      if ((a2[1] & 0xFFF) != 0xFFE)
        goto LABEL_7;
    }
    else if (v10 != -1 || (~*((unsigned __int16 *)a2 + 2) & 0xFFF) != 0)
    {
LABEL_7:
      if ((*(_BYTE *)a1 & 1) != 0)
      {
        v11 = 32;
        v12 = v7;
      }
      else
      {
        v12 = (_DWORD *)*((_QWORD *)a1 + 1);
        v11 = a1[4];
      }
      v13 = 0;
      v14 = *((_WORD *)a2 + 2);
      v15 = (37 * (v14 & 0xFFF)) ^ (37 * v10);
      v16 = v11 - 1;
      v17 = 1;
      while (2)
      {
        v18 = v15 & v16;
        v19 = &v12[2 * (v15 & v16)];
        v20 = *v19;
        if (v10 == *v19 && ((*((_WORD *)v19 + 2) ^ v14) & 0xFFF) == 0)
        {
LABEL_24:
          *(_QWORD *)v19 = *(_QWORD *)a2;
          *a1 += 2;
          break;
        }
        if (v20 == -1)
        {
          if ((~*((unsigned __int16 *)v19 + 2) & 0xFFF) == 0)
          {
            if (v13)
              v19 = v13;
            goto LABEL_24;
          }
LABEL_13:
          v21 = 0;
        }
        else
        {
          if (v20 != -2)
            goto LABEL_13;
          v21 = (v19[1] & 0xFFF) == 4094;
        }
        if (v21 && v13 == 0)
          v13 = &v12[2 * v18];
        v15 = v18 + v17++;
        continue;
      }
    }
    a2 += 2;
  }
}

void sub_1C497380C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4973820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t *v35;
  uint64_t v36;
  int64_t v37;
  int64_t *v38;
  int64_t *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[32];
  unint64_t *v56;
  uint64_t v57;
  _QWORD v58[6];

  v58[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 56);
  if (v3 != v2)
  {
    v4 = *(_QWORD *)(a2 + 48);
    do
    {
      v5 = **(unsigned __int16 **)(*(_QWORD *)(v4 + 8) + 16);
      v6 = v5 - 2426;
      v7 = v5 - 8262;
      if (v6 < 4 || v7 < 3)
      {
        v9 = 0;
        goto LABEL_10;
      }
      v4 += 272;
    }
    while (v4 != v2);
    v9 = 1;
LABEL_10:
    v10 = &v52;
    v11 = &v49;
    v44 = *(_QWORD *)(a2 + 56);
LABEL_11:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) + 16) & 2) == 0)
      goto LABEL_63;
    v56 = v58;
    v57 = 0x400000000;
    v53 = v55;
    v54 = 0x400000000;
    v12 = v10;
    v50 = v10;
    v51 = 0x400000000;
    v13 = v11;
    v47 = v11;
    v48 = 0x400000000;
    v14 = *(unsigned int *)(v3 + 120);
    if (!(_DWORD)v14)
      goto LABEL_27;
    v15 = *(uint64_t **)(v3 + 112);
    v16 = 16 * v14;
    while (1)
    {
      v17 = *v15;
      if ((~*(_DWORD *)v15 & 6) == 0)
      {
        if ((v9 & 1) != 0 || *((_DWORD *)v15 + 2))
          goto LABEL_19;
        if (sub_1C4973BE8((uint64_t)&v53, v17 & 0xFFFFFFFFFFFFFFF8, 0, 0))
          break;
      }
LABEL_23:
      v15 += 2;
      v16 -= 16;
      if (!v16)
      {
        if ((_DWORD)v57)
        {
          v20 = v56;
          v21 = 8 * v57;
          do
          {
            v22 = *v20++;
            sub_1C4841A0C(v22, v3);
            v21 -= 8;
          }
          while (v21);
        }
LABEL_27:
        v23 = *(unsigned int *)(v3 + 40);
        if ((_DWORD)v23)
        {
          v24 = *(uint64_t **)(v3 + 32);
          v25 = 16 * v23;
          while (1)
          {
            v26 = *v24;
            if ((~*(_DWORD *)v24 & 6) == 0)
            {
              if ((v9 & 1) != 0 || *((_DWORD *)v24 + 2))
                goto LABEL_34;
              if (sub_1C4973BE8((uint64_t)&v47, v26 & 0xFFFFFFFFFFFFFFF8, 0, 1))
                break;
            }
LABEL_38:
            v24 += 2;
            v25 -= 16;
            if (!v25)
              goto LABEL_39;
          }
          v26 = *v24;
LABEL_34:
          v27 = v26 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            v28 = v51;
            if (v51 >= (unint64_t)HIDWORD(v51))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v12, v51 + 1, 8);
              v28 = v51;
            }
            *((_QWORD *)v50 + v28) = v27;
            LODWORD(v51) = v51 + 1;
          }
          goto LABEL_38;
        }
LABEL_39:
        if ((_DWORD)v51)
        {
          v29 = (uint64_t *)v50;
          v30 = 8 * v51;
          do
          {
            v31 = *v29++;
            sub_1C4841A0C(v3, v31);
            v30 -= 8;
          }
          while (v30);
        }
        if ((_DWORD)v48)
        {
          v32 = (uint64_t *)v47;
          v33 = 8 * v48;
          do
          {
            v34 = *v32++;
            v45 = v34 | 6;
            v46 = 0;
            llvm::SUnit::addPred(v3, (const llvm::SDep *)&v45, 1);
            v33 -= 8;
          }
          while (v33);
        }
        if ((_DWORD)v54)
        {
          v35 = (int64_t *)v53;
          v36 = 8 * v54;
          do
          {
            v37 = *v35++;
            v45 = v3 | 6;
            v46 = 0;
            llvm::SUnit::addPred(v37, (const llvm::SDep *)&v45, 1);
            v36 -= 8;
          }
          while (v36);
        }
        if ((_DWORD)v57)
        {
          v38 = (int64_t *)v56;
          v39 = (int64_t *)&v56[v57];
          do
          {
            if ((_DWORD)v51)
            {
              v40 = *v38;
              v41 = (uint64_t *)v50;
              v42 = 8 * v51;
              do
              {
                v43 = *v41++;
                v45 = v43 | 6;
                v46 = 0;
                llvm::SUnit::addPred(v40, (const llvm::SDep *)&v45, 1);
                v42 -= 8;
              }
              while (v42);
            }
            ++v38;
          }
          while (v38 != v39);
        }
        v11 = v13;
        if (v47 != v13)
          free(v47);
        v10 = v12;
        if (v50 != v12)
          free(v50);
        if (v53 != v55)
          free(v53);
        if (v56 != v58)
          free(v56);
        v2 = v44;
LABEL_63:
        v3 += 272;
        if (v3 == v2)
          return;
        goto LABEL_11;
      }
    }
    v17 = *v15;
LABEL_19:
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
    {
      v19 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
        v19 = v57;
      }
      v56[v19] = v18;
      LODWORD(v57) = v57 + 1;
    }
    goto LABEL_23;
  }
}

uint64_t sub_1C4973BE8(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *i;
  uint64_t v17;

  if (a3 > 0x20)
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = **(unsigned __int16 **)(v6 + 16);
    v8 = (v7 - 2426) >= 4;
    v9 = v7 - 8262;
    if (!v8 || v9 <= 2)
    {
      v11 = *(unsigned int *)(a1 + 8);
      if (v11 >= *(_DWORD *)(a1 + 12))
      {
        v17 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11 + 1, 8);
        a2 = v17;
        LODWORD(v11) = *(_DWORD *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a2;
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
  }
  v12 = a2 + 32;
  v13 = 112;
  if (a4)
    v13 = 32;
  else
    v12 = a2 + 112;
  v14 = *(unsigned int *)(v12 + 8);
  if (!(_DWORD)v14)
    return 1;
  v15 = 16 * v14;
  for (i = (_DWORD *)(*(_QWORD *)(a2 + v13) + 8); ; i += 4)
  {
    if ((~*(i - 2) & 6) == 0 && !*i)
    {
      if (*(_QWORD *)((*((_QWORD *)i - 1) & 0xFFFFFFFFFFFFFFF8) + 8))
      {
        result = sub_1C4973BE8(a1);
        if (!(_DWORD)result)
          break;
      }
    }
    v15 -= 16;
    if (!v15)
      return 1;
  }
  return result;
}

void sub_1C4973D1C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4973D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::MachineInstr *v17;
  unsigned __int16 *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  llvm::MachineInstr *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t *v66;
  uint64_t v67;
  int64_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[32];
  void *v84;
  uint64_t v85;
  _BYTE v86[64];
  void *v87;
  uint64_t v88;
  _BYTE v89[32];
  void *v90;
  uint64_t v91;
  _BYTE v92[32];
  void *v93;
  uint64_t v94;
  _QWORD v95[26];

  v95[24] = *MEMORY[0x1E0C80C00];
  v93 = v95;
  v94 = 0x800000000;
  v3 = *(_QWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 56);
  if (v3 != v2)
  {
    v4 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v5 = *(unsigned __int16 **)(*(_QWORD *)(v4 + 8) + 16);
      if ((v5[8] & 0x20) != 0)
        break;
      v6 = *v5;
      v76 = 1;
      if (v6 > 2425)
      {
        if ((v6 - 8260) < 5 || (v6 - 2426) < 4)
          goto LABEL_17;
      }
      else
      {
        v7 = (v6 - 489) > 0x15 || ((1 << (v6 + 23)) & 0x3FFC03) == 0;
        if (!v7 || v6 == 337)
          goto LABEL_17;
      }
      v4 += 272;
      if (v4 == v2)
      {
        v76 = 0;
        goto LABEL_17;
      }
    }
    v76 = 1;
LABEL_17:
    v75 = *(_QWORD *)(a2 + 56);
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) + 16);
      v9 = v8 & 0x800200;
      if ((v8 & 0x800200) == 0x800200 || (v8 & 0x800100) == 8388864)
        break;
LABEL_116:
      v3 += 272;
      if (v3 == v2)
      {
        if (v93 != v95)
          free(v93);
        return;
      }
    }
    v90 = v92;
    v91 = 0x400000000;
    v87 = v89;
    v88 = 0x400000000;
    v84 = v86;
    v85 = 0x400000000;
    v11 = *(_DWORD *)(v3 + 40);
    if (v11)
    {
      v12 = v11 - 1;
      do
      {
        v13 = v12;
        v14 = *(_QWORD *)(v3 + 32);
        v15 = (uint64_t *)(v14 + 16 * v12);
        v16 = *v15;
        if ((~*(_DWORD *)v15 & 6) != 0)
          goto LABEL_44;
        if (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 192) == -1)
          goto LABEL_44;
        v17 = *(llvm::MachineInstr **)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
        v18 = (unsigned __int16 *)*((_QWORD *)v17 + 2);
        v19 = *v18;
        if ((v19 - 4821) < 4)
          goto LABEL_44;
        v20 = *((_QWORD *)v18 + 2);
        if ((v20 & 0x20) != 0)
          goto LABEL_44;
        v21 = v19 - 4581;
        v22 = v20 & 0x80;
        if (v21 >= 0xC && v22 == 0)
        {
          if (llvm::MachineInstr::hasUnmodeledSideEffects(v17))
            goto LABEL_44;
        }
        else if (v9 == 8389120 && v21 < 0xC)
        {
          goto LABEL_44;
        }
        if (!v76 || *(_DWORD *)(v14 + 16 * v12 + 8))
          goto LABEL_41;
        if (sub_1C4974434((uint64_t)&v87, v16 & 0xFFFFFFFFFFFFFFF8, 0, 1))
        {
          v16 = *v15;
LABEL_41:
          v24 = v15[1];
          v25 = v85;
          if (v85 >= (unint64_t)HIDWORD(v85))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, (uint64_t)v86, v85 + 1, 16);
            v25 = v85;
          }
          v26 = (char *)v84 + 16 * v25;
          *v26 = v16;
          v26[1] = v24;
          LODWORD(v85) = v85 + 1;
        }
LABEL_44:
        --v12;
      }
      while (v13);
    }
    v81 = v83;
    v82 = 0x400000000;
    v27 = *(unsigned int *)(v3 + 120);
    if ((_DWORD)v27)
    {
      v28 = *(uint64_t **)(v3 + 112);
      for (i = 16 * v27; i; i -= 16)
      {
        v30 = *v28;
        if ((~*(_DWORD *)v28 & 6) != 0)
          goto LABEL_66;
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 192) == -1)
          goto LABEL_66;
        v32 = *(llvm::MachineInstr **)(v31 + 8);
        v33 = (unsigned __int16 *)*((_QWORD *)v32 + 2);
        v34 = *v33;
        if ((v34 - 4821) < 4)
          goto LABEL_66;
        v35 = *((_QWORD *)v33 + 2);
        if ((v35 & 0x20) != 0)
          goto LABEL_66;
        v36 = v34 - 4581;
        v37 = v35 & 0x80;
        if (v36 >= 0xC && v37 == 0)
        {
          if (llvm::MachineInstr::hasUnmodeledSideEffects(v32))
            goto LABEL_66;
        }
        else if (v9 == 8389120 && v36 < 0xC)
        {
          goto LABEL_66;
        }
        if (!v76 || *((_DWORD *)v28 + 2))
          goto LABEL_63;
        if (sub_1C4974434((uint64_t)&v90, v31, 0, 0))
        {
          v31 = *v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_63:
          v39 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v82 + 1, 8);
            v39 = v82;
          }
          *((_QWORD *)v81 + v39) = v31;
          LODWORD(v82) = v82 + 1;
        }
LABEL_66:
        v28 += 2;
      }
    }
    if ((_DWORD)v85)
    {
      v40 = (__int128 *)v84;
      v41 = 16 * v85;
      do
      {
        v42 = *v40++;
        v79 = v42;
        llvm::SUnit::removePred(v3, (const llvm::SDep *)&v79);
        v41 -= 16;
      }
      while (v41);
    }
    if ((_DWORD)v82)
    {
      v43 = (unint64_t *)v81;
      v44 = 8 * v82;
      do
      {
        v45 = *v43++;
        sub_1C4841A0C(v45, v3);
        v44 -= 8;
      }
      while (v44);
    }
    *((_QWORD *)&v79 + 1) = 0;
    v46 = *(_QWORD *)(v3 + 8);
    v47 = (uint64_t *)(*(_QWORD *)(v46 + 48) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_QWORD *)(v46 + 48) & 7) != 0)
      v47 = (uint64_t *)v47[1];
    else
      *(_QWORD *)(v46 + 48) = v47;
    v48 = *v47;
    v50 = (unint64_t *)((v48 & (v48 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8) + 16);
    v49 = *(_QWORD *)((v48 & (v48 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
    if ((v49 & 1) != 0)
    {
      v52 = __clz(__rbit64((v49 >> 1) & ~(-1 << (v49 >> 58))));
      if (((v49 >> 1) & ~(-1 << (v49 >> 58))) != 0)
        v51 = v52;
      else
        v51 = -1;
    }
    else
    {
      v51 = sub_1C476B7EC(v49);
    }
    LODWORD(v79) = v51;
    DWORD1(v79) = sub_1C4902538(v50);
    v53 = **(unsigned __int16 **)(v46 + 16);
    v54 = sub_1C4B138B4(v53);
    if (v54 == -1)
      v54 = sub_1C4B138B4(v53);
    v55 = *(_QWORD *)(v46 + 32);
    v56 = *(unsigned __int8 *)(v55 + 32 * v54);
    v57 = v55 + 32 * v54;
    if (v56 == 1)
      v58 = *(unsigned int *)(v57 + 16);
    else
      v58 = (unint64_t)*(unsigned int *)(v57 + 4) << 32;
    *((_QWORD *)&v79 + 1) = v58;
    v80 = v3;
    if (!(_DWORD)v94)
    {
LABEL_99:
      if ((_DWORD)v88)
      {
        v63 = (uint64_t *)v87;
        v64 = 8 * v88;
        do
        {
          v65 = *v63++;
          v77 = v65 | 6;
          v78 = 0;
          llvm::SUnit::addPred(v3, (const llvm::SDep *)&v77, 1);
          v64 -= 8;
        }
        while (v64);
      }
      if ((_DWORD)v91)
      {
        v66 = (int64_t *)v90;
        v67 = 8 * v91;
        do
        {
          v68 = *v66++;
          v77 = v3 | 6;
          v78 = 0;
          llvm::SUnit::addPred(v68, (const llvm::SDep *)&v77, 1);
          v67 -= 8;
        }
        while (v67);
      }
      v69 = (char *)v93;
      if (v94 >= HIDWORD(v94))
      {
        v73 = v94 + 1;
        if (v93 <= &v79 && (char *)v93 + 24 * v94 > (char *)&v79)
        {
          v74 = (char *)&v79 - (_BYTE *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v73, 24);
          v69 = (char *)v93;
          v70 = (char *)v93 + v74;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v73, 24);
          v70 = (char *)&v79;
          v69 = (char *)v93;
        }
      }
      else
      {
        v70 = (char *)&v79;
      }
      v71 = &v69[24 * v94];
      v72 = *(_OWORD *)v70;
      *((_QWORD *)v71 + 2) = *((_QWORD *)v70 + 2);
      *(_OWORD *)v71 = v72;
      LODWORD(v94) = v94 + 1;
      if (v81 != v83)
        free(v81);
      if (v84 != v86)
        free(v84);
      if (v87 != v89)
        free(v87);
      if (v90 != v92)
        free(v90);
      v2 = v75;
      goto LABEL_116;
    }
    v59 = 24 * v94;
    v60 = (char *)v93 + 8;
    while (1)
    {
      if (DWORD2(v79) != *(_DWORD *)v60 || HIDWORD(v79) != *((_DWORD *)v60 + 1))
        goto LABEL_97;
      v62 = *((_DWORD *)v60 - 2);
      if ((int)v79 > v62)
        break;
      if (SDWORD1(v79) >= v62)
        goto LABEL_97;
LABEL_98:
      v60 += 24;
      v59 -= 24;
      if (!v59)
        goto LABEL_99;
    }
    if (*((_DWORD *)v60 - 1) < (int)v79)
      goto LABEL_98;
LABEL_97:
    v77 = *((_QWORD *)v60 + 1) | 6;
    v78 = 0;
    llvm::SUnit::addPred(v3, (const llvm::SDep *)&v77, 1);
    goto LABEL_98;
  }
}

uint64_t sub_1C4974434(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *i;
  uint64_t v15;
  uint64_t v16;

  if (a3 > 0x20)
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_15;
  v7 = *(unsigned __int16 **)(v6 + 16);
  if ((v7[8] & 0x20) != 0)
  {
LABEL_26:
    v15 = *(unsigned int *)(a1 + 8);
    if (v15 >= *(_DWORD *)(a1 + 12))
    {
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v15 + 1, 8);
      a2 = v16;
      LODWORD(v15) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a2;
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
  v8 = *v7;
  if (v8 > 2425)
  {
    if ((v8 - 8260) >= 5 && (v8 - 2426) > 3)
      goto LABEL_15;
    goto LABEL_26;
  }
  v9 = (v8 - 489) > 0x15 || ((1 << (v8 + 23)) & 0x3FFC03) == 0;
  if (!v9 || v8 == 337)
    goto LABEL_26;
LABEL_15:
  v10 = a2 + 32;
  v11 = 112;
  if (a4)
    v11 = 32;
  else
    v10 = a2 + 112;
  v12 = *(unsigned int *)(v10 + 8);
  if (!(_DWORD)v12)
    return 1;
  v13 = 16 * v12;
  for (i = (_DWORD *)(*(_QWORD *)(a2 + v11) + 8); ; i += 4)
  {
    if ((~*(i - 2) & 6) == 0 && !*i)
    {
      if (*(_QWORD *)((*((_QWORD *)i - 1) & 0xFFFFFFFFFFFFFFF8) + 8))
      {
        result = sub_1C4974434(a1);
        if (!(_DWORD)result)
          break;
      }
    }
    v13 -= 16;
    if (!v13)
      return 1;
  }
  return result;
}

void sub_1C49745A8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C49745BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x1E0C80C00];
  v3 = a2[2];
  do
  {
    v4 = a2[6];
    v5 = a2[7];
    if (v4 == v5)
      break;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v4 + 8);
      v21 = v23;
      v22 = 0x400000000;
      v8 = *(unsigned int *)(v4 + 40);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD **)(v4 + 32);
        v10 = 16 * v8;
        do
        {
          if ((~*(_DWORD *)v9 & 6) == 0)
          {
            v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v11 + 192) != -1
              && ((**(_WORD **)(v7 + 16) | 2) == 0x2053
               || (**(unsigned __int16 **)(*(_QWORD *)(v11 + 8) + 16) | 2) == 0x2053))
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 1064))(v3, v7, *(_QWORD *)(v11 + 8)))
              {
                v12 = *(_OWORD *)v9;
                v13 = v22;
                if (v22 >= (unint64_t)HIDWORD(v22))
                {
                  v19 = *(_OWORD *)v9;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 16);
                  v12 = v19;
                  v13 = v22;
                }
                *((_OWORD *)v21 + v13) = v12;
                LODWORD(v22) = v22 + 1;
              }
            }
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
        v14 = (char *)v21;
        v15 = (char *)v21 + 16 * v22;
        if ((_DWORD)v22)
        {
          do
          {
            v20 = *(_OWORD *)v14;
            llvm::SUnit::removePred(v4, (const llvm::SDep *)&v20);
            v16 = *(unsigned int *)(v4 + 120);
            if ((_DWORD)v16)
            {
              v17 = *(_QWORD **)(v4 + 112);
              v18 = 16 * v16;
              do
              {
                if ((~*(_DWORD *)v17 & 6) == 0)
                  llvm::SUnit::addPred(*v17 & 0xFFFFFFFFFFFFFFF8, (const llvm::SDep *)&v20, 1);
                v17 += 2;
                v18 -= 16;
              }
              while (v18);
            }
            v14 += 16;
          }
          while (v14 != v15);
          v6 = 1;
          v14 = (char *)v21;
        }
        if (v14 != (char *)v23)
          free(v14);
      }
      v4 += 272;
    }
    while (v4 != v5);
  }
  while ((v6 & 1) != 0);
}

uint64_t sub_1C49747CC()
{
  sub_1C4769074(qword_1ED7EB820, "agx2", "Custom AGX2 scheduler.", (uint64_t)sub_1C49691FC);
  return __cxa_atexit((void (*)(void *))sub_1C476900C, qword_1ED7EB820, &dword_1C475E000);
}

uint64_t sub_1C4974820(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v2);
  llvm::initializeMachineModuleInfoWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Check if we should force spilling to LM";
  *(_QWORD *)(v4 + 8) = 39;
  *(_QWORD *)(v4 + 16) = "agx2-set-spill-to-lm-tgt";
  *(_QWORD *)(v4 + 24) = 24;
  *(_QWORD *)(v4 + 32) = &unk_1ED7EB850;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C49749AC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C49748CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7EB850);
  *(_QWORD *)v2 = &off_1E7FA67F0;
  *(_QWORD *)(v2 + 264) = v2 + 280;
  *(_QWORD *)(v2 + 272) = 0x600000000;
  *(_DWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 344) = 0;
  *(_DWORD *)(v2 + 352) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7EB858);
  if (v4 != -1)
  {
    v8[0] = sub_1C4974820;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7EB858, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49749AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49748CC(v0);
}

void sub_1C49749D4(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E7FA67F0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 42), 4);
  v2 = (_QWORD *)*((_QWORD *)a1 + 33);
  if (v2 != (_QWORD *)((char *)a1 + 280))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C4974A78(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E7FA67F0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 42), 4);
  v2 = (_QWORD *)*((_QWORD *)a1 + 33);
  if (v2 != (_QWORD *)((char *)a1 + 280))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4974B30()
{
  return "AGX2SetSpillToLMTarget";
}

uint64_t sub_1C4974B40(uint64_t a1)
{
  _DWORD **v1;
  int v2;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  v1 = (_DWORD **)(a1 + 336);
  v2 = *(_DWORD *)(a1 + 344);
  if (v2)
  {
    v4 = *(_DWORD *)(a1 + 352);
    if (v4 <= 4 * v2 || v4 < 0x41)
    {
      if (!v4)
      {
LABEL_9:
        *(_QWORD *)(a1 + 344) = 0;
        return 0;
      }
LABEL_7:
      v5 = *v1;
      v6 = 8 * v4;
      do
      {
        *v5 = -1;
        v5 += 2;
        v6 -= 8;
      }
      while (v6);
      goto LABEL_9;
    }
    v16 = a1 + 336;
    v17 = a1;
    v7 = 1 << (33 - __clz(v2 - 1));
    if (v7 <= 64)
      v8 = 64;
    else
      v8 = v7;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 348))
      return 0;
    v16 = a1 + 336;
    v17 = a1;
    v4 = *(_DWORD *)(a1 + 352);
    if (v4 <= 0x40)
    {
      v1 = (_DWORD **)(a1 + 336);
      if (!v4)
        goto LABEL_9;
      goto LABEL_7;
    }
    v8 = 0;
  }
  if (v8 == v4)
  {
    *(_QWORD *)(v17 + 344) = 0;
    v9 = 8 * v4;
    v10 = *(_DWORD **)(v17 + 336);
    do
    {
      *v10 = -1;
      v10 += 2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v16, 4);
    if (v8)
    {
      v11 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
      v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      LODWORD(v12) = (((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8)) + 1;
      *(_DWORD *)(v17 + 352) = v12;
      v13 = operator new(8 * v12, (std::align_val_t)4uLL);
      *(_QWORD *)(v17 + 336) = v13;
      *(_QWORD *)(v17 + 344) = 0;
      v14 = *(unsigned int *)(v17 + 352);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        do
        {
          *v13 = -1;
          v13 += 2;
          v15 -= 8;
        }
        while (v15);
      }
    }
    else
    {
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 0;
    }
  }
  return 0;
}

void *sub_1C4974CCC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C4974D48(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t NamedMetadata;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  llvm::MachineModuleInfo *v21;
  uint64_t v22;
  _QWORD *MachineFunction;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inserted;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  char *v63;
  uint64_t *v64;
  const llvm::APInt *v65;
  llvm::ValueHandleBase *v66;
  llvm::Value *v67;
  void *Impl;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  const llvm::APInt *v72;
  llvm::ValueHandleBase *v73;
  llvm::Value *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  int v83;
  int v84;
  unsigned __int16 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  _QWORD *v96;
  unsigned int v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  int32x2_t *v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  _QWORD *v116;
  void *v117;
  void *v118;
  unsigned int v119;
  unsigned int v120;
  _QWORD *v121;
  void *v122;
  void *v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  void *v130;
  _QWORD *v131;
  void *v132;
  unsigned int v133;
  unsigned int v134;
  _BYTE *v135;
  void *v136;
  void *v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int32x2_t *v151;
  int32x2_t *v152;
  _QWORD *v153;
  __int32 *v154;
  __int32 *v155;
  __int32 v156;
  _BOOL4 v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  void **v164;
  unsigned int *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _WORD *v172;
  unsigned __int16 v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  _DWORD *v178;
  int v179;
  _DWORD *v180;
  int v181;
  BOOL v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  _DWORD *v190;
  int v191;
  BOOL v192;
  unsigned int v193;
  int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  BOOL v199;
  unsigned int v200;
  _QWORD *v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  _DWORD *v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  void **v214;
  void *v215;
  uint64_t v216;
  _DWORD *j;
  _DWORD *v218;
  uint64_t v219;
  BOOL v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v227;
  int v228;
  int *v229;
  int v230;
  unsigned int v231;
  int *v232;
  _QWORD *v233;
  unsigned int v234;
  int v235;
  int v236;
  _DWORD *v237;
  unsigned int v238;
  _QWORD *v239;
  unint64_t v240;
  uint64_t v241;
  _DWORD *v242;
  _DWORD *v243;
  unint64_t v244;
  int v245;
  unint64_t v246;
  _WORD *v247;
  unsigned __int16 *v248;
  __int16 v249;
  unsigned __int16 v250;
  uint64_t v251;
  unsigned __int16 v252;
  int v253;
  unsigned int v254;
  uint64_t *v255;
  unsigned int v256;
  unsigned __int16 *v257;
  unsigned __int16 *v258;
  int v259;
  int v260;
  _QWORD *v261;
  int v262;
  unsigned int v263;
  int v264;
  int v265;
  unsigned int v266;
  unsigned int *v267;
  unsigned int *v268;
  unsigned int v269;
  int *v270;
  int v271;
  unsigned int v272;
  int *v273;
  unsigned int v274;
  int v275;
  int v276;
  _DWORD *v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int *v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  unint64_t v288;
  int *v289;
  int v290;
  unsigned int v291;
  int *v292;
  unsigned int v293;
  int v294;
  int v295;
  _DWORD *v296;
  unsigned int v297;
  int *v298;
  int *v299;
  int v300;
  uint64_t v301;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v309;
  int v310;
  _BOOL4 v311;
  unint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  unsigned int v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int v325;
  unsigned int v326;
  _BOOL4 v327;
  BOOL v328;
  int v329;
  int v330;
  uint64_t v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  float v335;
  float v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  float v341;
  unsigned int v342;
  unsigned int v343;
  float v344;
  _BOOL4 v346;
  int v347;
  void **v348;
  void *v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  int *v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  float v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  float v363;
  unsigned int v364;
  float v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  unsigned int v369;
  float v370;
  float v371;
  _BOOL4 v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned __int16 *v376;
  unsigned __int16 *v377;
  int v378;
  int v379;
  _QWORD *v380;
  int v381;
  int v382;
  int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  float v387;
  _BOOL4 v389;
  int v390;
  int v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  float v396;
  int v398;
  unsigned int v399;
  unint64_t v400;
  unsigned int v401;
  float v402;
  float v403;
  BOOL v404;
  char v405;
  unint64_t v406;
  unint64_t v407;
  unsigned int v408;
  float v409;
  uint64_t v410;
  int v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  float v415;
  _BOOL4 v417;
  int v418;
  llvm::Module *v419;
  llvm::NamedMDNode *v420;
  unsigned int v421;
  unsigned int v422;
  char v423;
  char v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  float v431;
  float v432;
  BOOL v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  _QWORD *i;
  uint64_t v439;
  uint64_t v440;
  _BYTE *v441;
  _QWORD *v442;
  int v443;
  uint64_t v444;
  int v445;
  _QWORD *v446;
  uint64_t **v447;
  unint64_t v448;
  uint64_t **v449;
  __int16 v450;
  int v451;
  char v452;
  int v453;
  char v454;
  int v455;
  int v456;
  int v457;
  unsigned int v458;
  uint64_t v459[2];
  int v460;
  int *v461;
  int *v462;
  uint64_t v463;
  int32x2_t v464[2];
  int v465;
  _QWORD v466[2];
  unsigned int v467;
  int v468;
  unint64_t v469;
  unsigned __int8 v470;
  unsigned int v471;
  int32x2_t v472;
  uint64_t v473;
  int v474;
  void *__p;
  _DWORD *v476;
  uint64_t v477;
  void *v478;
  uint64_t v479;
  _BYTE v480[48];
  int v481;
  void *v482[2];
  uint64_t v483;
  int v484;
  _QWORD *v485;
  void *v486;
  uint64_t v487;
  void *v488;
  _QWORD v489[8];
  void *v490;
  uint64_t v491;
  _BYTE v492[128];
  _QWORD *v493;
  void *v494;
  uint64_t v495;
  void *v496;
  _QWORD v497[8];
  void *v498;
  uint64_t v499;
  _BYTE v500[128];
  void *v501;
  void *v502;
  unsigned int v503;
  unsigned int v504;
  int v505;
  _WORD v506[16];
  int v507;
  void *v508;
  uint64_t v509;
  _BYTE v510[128];
  _BYTE *v511;
  void *v512;
  unsigned int v513;
  unsigned int v514;
  int v515;
  _BYTE v516[64];
  void *v517;
  uint64_t v518;
  _BYTE v519[128];
  __int128 *v520;
  void *v521;
  uint64_t v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  uint64_t v527;
  void *v528[18];
  int32x2_t v529;
  void *__src;
  unsigned int v531;
  unsigned int v532;
  void *v533;
  void *v534;
  uint64_t v535;
  void *v536;
  int v537;
  uint64_t v538;
  void *v539;
  void *v540;
  unint64_t v541;
  int v542;
  _BYTE v543[16];
  unint64_t v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  _BYTE v548[128];
  _QWORD *v549;
  void *v550;
  unint64_t v551;
  uint64_t v552;
  _QWORD v553[8];
  void *v554;
  uint64_t v555;
  _QWORD v556[18];

  v556[16] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 248))
    return 0;
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 40);
  if (word_1ED7EB868)
  {
    v7 = dword_1ED7EB8E0;
  }
  else
  {
    v501 = "agx.max_work_group_size";
    v506[0] = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v6, (uint64_t)&v501);
    if (!NamedMetadata)
    {
      v63 = getenv("AGX_SPILL_TO_LM_THREADGROUP_SIZE");
      v11 = 0;
      v12 = v63 != 0;
      LOBYTE(v7) = 32 * v12;
      goto LABEL_11;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                   + 128);
    v10 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    v7 = *(_DWORD *)v10;
  }
  v11 = v7 & 0xFFFFFF00;
  v12 = 1;
LABEL_11:
  v2 = 0;
  if (!v12)
    return v2;
  v13 = v11 | v7;
  if (!v13)
    return v2;
  *(_DWORD *)(a1 + 252) = v13;
  v14 = **(void ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v16 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v6);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v5);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 560))(v17) != v5)
    return 0;
  *(_BYTE *)(a1 + 248) = 1;
  v18 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16) + 12);
  v19 = **(void ****)(a1 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MachineModuleInfoWrapperPass::ID);
  if (!v18)
    v18 = -1;
  v436 = v18;
  v21 = (llvm::MachineModuleInfo *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MachineModuleInfoWrapperPass::ID)+ 32);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 560))(v17);
  MachineFunction = (_QWORD *)llvm::MachineModuleInfo::getMachineFunction(v21, (const Function *)v22);
  v24 = *(_QWORD *)(v22 + 40);
  v25 = MachineFunction[2];
  v457 = 0;
  v439 = (uint64_t)MachineFunction;
  v2 = 0;
  if (!sub_1C4990810(v25, MachineFunction, &v457))
    return v2;
  v444 = a1;
  sub_1C5EAE59C(v24, 0, (uint64_t)&v501);
  v26 = v501;
  if (v501 >= 0x80)
    v26 = 128;
  if (!(_BYTE)v502)
    v26 = 128;
  v437 = v26;
  if (v26 >= dword_1ED7EB9A0)
    v27 = dword_1ED7EB9A0;
  else
    v27 = v26;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v17 + 72))(&v501, v17);
  (*(void (**)(_QWORD **__return_ptr, uint64_t))(*(_QWORD *)v17 + 80))(&v549, v17);
  v2 = (uint64_t)v501;
  v28 = v549;
  if (v501)
  {
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v501 + 16))(&v501, v501);
    v29 = v501;
  }
  else
  {
    v29 = 0;
  }
  v447 = (uint64_t **)v24;
  (*(void (**)(void **__return_ptr, _QWORD *))(*v28 + 16))(&v501, v28);
  v30 = v501;
  v31 = 4;
  while (((*(uint64_t (**)(void *, void *))(*(_QWORD *)v29 + 24))(v29, v30) & 1) == 0)
  {
    v32 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 32))(v29);
    if (v32 != v22)
    {
      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 640))(v17, v32);
      if ((v33 & 0xFF00000000) != 0)
      {
        if (v31 <= v33)
          v31 = v33;
      }
      else
      {
        if ((*(_WORD *)(v32 + 18) & 0x3FF0) != 0x640)
        {
          if (v30)
            (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
          (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
          (*(void (**)(_QWORD *))(*v28 + 8))(v28);
          if (!v2)
            return v2;
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
          return 0;
        }
        if (dword_1ED7EB9A0 >= v437)
          LODWORD(v33) = v437;
        else
          LODWORD(v33) = dword_1ED7EB9A0;
      }
      if (v27 <= v33)
        v27 = v33;
    }
    (*(void (**)(void *))(*(_QWORD *)v29 + 40))(v29);
  }
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v34 = (void *)*(unsigned int *)(a1 + 252);
  if (v437 >= v27)
    v35 = v27;
  else
    v35 = v437;
  if (v437 >= v31)
    v36 = v31;
  else
    v36 = v437;
  v434 = v35;
  v435 = v36;
  v449 = v447;
  v450 = 1;
  LOBYTE(v451) = 0;
  LOBYTE(v453) = 0;
  v501 = "agx.local.store.spill";
  v506[0] = 259;
  inserted = llvm::Module::getNamedMetadata((uint64_t)v447, (uint64_t)&v501);
  if (!inserted)
  {
    HIBYTE(v450) = 1;
    inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v447, "agx.local.store.spill", 0x15uLL);
  }
  v42 = *(uint64_t **)(inserted + 48);
  v43 = *((unsigned int *)v42 + 2);
  v44 = v453;
  v45 = v451;
  if ((_DWORD)v43)
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = *v42;
    v37 = 0x6C6C6970732D6461;
    v38 = 0x73657479622D6C6CLL;
    do
    {
      v52 = (_QWORD *)(*(_QWORD *)(v51 + 8 * v46) - 8 * *(unsigned int *)(*(_QWORD *)(v51 + 8 * v46) + 8));
      v53 = *(_QWORD *)(v52[1] + 128);
      v54 = (unsigned int *)(v53 + 24);
      if (*(_DWORD *)(v53 + 32) >= 0x41u)
        v54 = *(unsigned int **)v54;
      v40 = *(_QWORD *)(*v52 + 8);
      v39 = *v54;
      if (*(_QWORD *)v40 == 17)
      {
        v59 = *(_QWORD *)(v40 + 24);
        v60 = *(_QWORD *)(v40 + 32);
        v40 = *(unsigned __int8 *)(v40 + 40);
        if (v59 == 0x672D646165726874 && v60 == 0x7A69732D70756F72 && (_DWORD)v40 == 101)
        {
          v47 = 1;
          v48 = v46;
          v44 = v39;
        }
      }
      else if (*(_QWORD *)v40 == 22)
      {
        v55 = *(_QWORD *)(v40 + 24);
        v56 = *(_QWORD *)(v40 + 32);
        v40 = *(_QWORD *)(v40 + 38);
        v57 = v55 == 0x657268742D726570 && v56 == 0x6C6C6970732D6461;
        if (v57 && v40 == 0x73657479622D6C6CLL)
        {
          v49 = 1;
          v50 = v46;
          v45 = v39;
        }
      }
      ++v46;
    }
    while (v43 != v46);
  }
  else
  {
    v50 = 0;
    v49 = 0;
    v48 = 0;
    v47 = 0;
  }
  v454 = v47;
  v453 = v44;
  v452 = v49;
  v451 = v45;
  v456 = v48;
  v455 = v50;
  v64 = *v447;
  if (v49)
  {
    if (!v45)
      sub_1C4977C88((uint64_t)&v449, 0xE7u);
  }
  else
  {
    LODWORD(v502) = 32;
    v501 = (void *)231;
    v550 = 0;
    v549 = 0;
    v549 = llvm::MDString::get(v64, "per-thread-spill-bytes", 0x16uLL);
    v66 = llvm::ConstantInt::get((llvm::ConstantInt *)v64, (llvm::LLVMContext *)&v501, v65);
    v550 = llvm::ValueAsMetadata::get(v66, v67);
    Impl = (void *)llvm::MDTuple::getImpl(v64, &v549, 2, 0, 1);
    v539 = Impl;
    v69 = *(_QWORD *)(inserted + 48);
    v70 = *(unsigned int *)(v69 + 8);
    if (v70 >= *(_DWORD *)(v69 + 12))
    {
      sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v539);
    }
    else
    {
      v37 = (uint64_t)Impl;
      v71 = (uint64_t *)(*(_QWORD *)v69 + 8 * v70);
      *v71 = v37;
      if (v37)
      {
        llvm::MetadataTracking::track((uint64_t)v71, (unsigned __int8 *)v37, 2);
        LODWORD(v70) = *(_DWORD *)(v69 + 8);
      }
      *(_DWORD *)(v69 + 8) = v70 + 1;
    }
    v455 = v43;
    if (v502 >= 0x41 && v501)
      MEMORY[0x1CAA32F9C](v501, 0x1000C8000313F17);
    LODWORD(v43) = v43 + 1;
  }
  if (!v47)
  {
    LODWORD(v502) = 32;
    v501 = v34;
    v550 = 0;
    v549 = 0;
    v549 = llvm::MDString::get(v64, "thread-group-size", 0x11uLL);
    v73 = llvm::ConstantInt::get((llvm::ConstantInt *)v64, (llvm::LLVMContext *)&v501, v72);
    v550 = llvm::ValueAsMetadata::get(v73, v74);
    v75 = (void *)llvm::MDTuple::getImpl(v64, &v549, 2, 0, 1);
    v539 = v75;
    v76 = *(_QWORD *)(inserted + 48);
    v77 = *(unsigned int *)(v76 + 8);
    if (v77 >= *(_DWORD *)(v76 + 12))
    {
      sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v539);
    }
    else
    {
      v37 = (uint64_t)v75;
      v78 = (uint64_t *)(*(_QWORD *)v76 + 8 * v77);
      *v78 = v37;
      if (v37)
      {
        llvm::MetadataTracking::track((uint64_t)v78, (unsigned __int8 *)v37, 2);
        LODWORD(v77) = *(_DWORD *)(v76 + 8);
      }
      *(_DWORD *)(v76 + 8) = v77 + 1;
    }
    v456 = v43;
    if (v502 >= 0x41 && v501)
      MEMORY[0x1CAA32F9C](v501, 0x1000C8000313F17);
  }
  v471 = v437;
  v469 = 0;
  v470 = 1;
  v79 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v439 + 16) + 176))(*(_QWORD *)(v439 + 16), v37, v38, v39, v40);
  v440 = *(_QWORD *)(v439 + 40);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v79 + 88))(v482, v79, v439);
  v80 = *(_DWORD *)(v79 + 44);
  v478 = v480;
  v479 = 0x600000000;
  sub_1C4765AA4((char *)&v478, (v80 + 63) >> 6, 0);
  v481 = v80;
  v468 = 0;
  v448 = v79;
  v81 = (unsigned __int16 *)(*(_QWORD *)(v79 + 56)
                           + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v79 + 8) + 24 * (v471 + 55) + 16) >> 3) & 0x1FFFFFFE));
  v83 = *v81;
  v82 = v81 + 1;
  v84 = v83 + (*(_DWORD *)(*(_QWORD *)(v79 + 8) + 24 * (v471 + 55) + 16) & 0xF) * (v471 + 55);
  do
  {
    v85 = v84;
    v86 = *v82++;
    v84 += v86;
  }
  while (v86);
  v468 = v85;
  v87 = v444;
  if (!v484)
    goto LABEL_112;
  v88 = 0;
  v89 = (uint64_t *)v482[0];
  v90 = (v484 - 1) & 0xFFFFFFC0;
  while (1)
  {
    v92 = *v89++;
    v91 = v92;
    v93 = v90 + v88 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v484;
    v94 = v93 & v91;
    if (v94)
      break;
    v88 -= 64;
    if (v90 + v88 == -64)
      goto LABEL_112;
  }
  v95 = __clz(__rbit64(v94));
  if (v95 + 1 != (_DWORD)v88)
  {
    v374 = 0;
    v443 = 0;
    v375 = v95 - v88;
    do
    {
      if (v375 - 1 <= 0xB6 && ((byte_1C697A2C8[(unint64_t)v375 >> 3] >> (v375 & 7)) & 1) != 0)
      {
        v376 = (unsigned __int16 *)(*(_QWORD *)(v79 + 56)
                                  + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v79 + 8) + 24 * v375 + 16) >> 3) & 0x1FFFFFFE));
        v378 = *v376;
        v377 = v376 + 1;
        v379 = v378 + (*(_DWORD *)(*(_QWORD *)(v79 + 8) + 24 * v375 + 16) & 0xF) * v375;
        v380 = v478;
        do
        {
          v380[(unsigned __int16)v379 >> 6] |= 1 << v379;
          v381 = *v377++;
          v379 += v381;
        }
        while (v381);
        v382 = v443;
        if (v375 - 56 < v471)
          v382 = v443 + 1;
        v443 = v382;
        if (v375 - 56 < v471)
          v374 = v375;
      }
      v375 = sub_1C476BA0C(v482, v375 + 1, v484, 1u);
    }
    while (v375 != -1);
    if (v374)
    {
      LODWORD(v469) = v374 - 55;
      HIDWORD(v469) = v374 - 55;
    }
  }
  else
  {
LABEL_112:
    v443 = 0;
  }
  v466[0] = 0;
  v466[1] = 0;
  v467 = 0;
  v96 = *(_QWORD **)(v439 + 328);
  for (i = (_QWORD *)(v439 + 320); v96 != i; v96 = (_QWORD *)v96[1])
  {
    v501 = v96;
    if (v467)
    {
      v97 = (v467 - 1) & ((v96 >> 4) ^ (v96 >> 9));
      v98 = (_QWORD *)(v466[0] + 200 * v97);
      v99 = (_QWORD *)*v98;
      if (v96 == (_QWORD *)*v98)
        goto LABEL_127;
      v100 = 0;
      v101 = 1;
      while (v99 != (_QWORD *)-4096)
      {
        if (v100)
          v102 = 0;
        else
          v102 = v99 == (_QWORD *)-8192;
        if (v102)
          v100 = v98;
        v103 = v97 + v101++;
        v97 = v103 & (v467 - 1);
        v98 = (_QWORD *)(v466[0] + 200 * v97);
        v99 = (_QWORD *)*v98;
        if (v96 == (_QWORD *)*v98)
          goto LABEL_127;
      }
      if (v100)
        v104 = v100;
      else
        v104 = v98;
    }
    else
    {
      v104 = 0;
    }
    v98 = sub_1C49788CC((uint64_t)v466, (uint64_t *)&v501, v104);
    *v98 = v96;
    *(_OWORD *)(v98 + 1) = 0u;
    *(_OWORD *)(v98 + 3) = 0u;
    *(_OWORD *)(v98 + 5) = 0u;
    *(_OWORD *)(v98 + 7) = 0u;
    *(_OWORD *)(v98 + 9) = 0u;
    *(_OWORD *)(v98 + 11) = 0u;
    *(_OWORD *)(v98 + 13) = 0u;
    *(_OWORD *)(v98 + 15) = 0u;
    *(_OWORD *)(v98 + 17) = 0u;
    *(_OWORD *)(v98 + 19) = 0u;
    *(_OWORD *)(v98 + 21) = 0u;
    *(_OWORD *)(v98 + 23) = 0u;
LABEL_127:
    v105 = v96 + 6;
    v106 = v96[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v106 || (*(_BYTE *)v106 & 4) == 0)
    {
      while ((*(_WORD *)(v106 + 44) & 4) != 0)
        v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((_QWORD *)v106 != v105)
    {
      v107 = (int32x2_t *)(v98 + 1);
      v108 = (uint64_t)(v98 + 7);
      do
      {
        if (**(unsigned __int16 **)(v106 + 16) - 13 >= 5)
        {
          v109 = *(unsigned int *)(v106 + 40);
          if ((_DWORD)v109)
          {
            v110 = *(_DWORD **)(v106 + 32);
            v111 = 32 * v109;
            do
            {
              if ((*v110 & 0x10000FF) == 0x1000000)
              {
                LODWORD(v501) = v110[1];
                if (v501 >> 30)
                {
                  if ((*v110 & 0xFFF00) == 0 || (*v110 & 0x10000000) != 0)
                  {
                    sub_1C4977DA4(v108, &v501);
                    sub_1C497812C(v107, &v501);
                  }
                }
              }
              v110 += 8;
              v111 -= 32;
            }
            while (v111);
            v113 = *(unsigned int *)(v106 + 40);
            if ((_DWORD)v113)
            {
              v114 = 32 * v113;
              v115 = (_DWORD *)(*(_QWORD *)(v106 + 32) + 4);
              do
              {
                if ((*(v115 - 1) & 0x10000FF) == 0)
                {
                  LODWORD(v501) = *v115;
                  if (v501 >> 30)
                    sub_1C4977DA4((uint64_t)v107, &v501);
                }
                v115 += 8;
                v114 -= 32;
              }
              while (v114);
            }
          }
        }
        v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFF8;
        if (!v106 || (*(_BYTE *)v106 & 4) == 0)
        {
          while ((*(_WORD *)(v106 + 44) & 4) != 0)
            v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      while ((_QWORD *)v106 != v105);
    }
  }
  v441 = v543;
  do
  {
    sub_1C486F76C((uint64_t)&v529, *(_QWORD *)(v439 + 328));
    memset(&v528[1], 0, 136);
    v526 = 0u;
    v527 = 0;
    v524 = 0u;
    v525 = 0u;
    v523 = 0u;
    v116 = v497;
    v520 = (__int128 *)((char *)&v523 + 8);
    v521 = (char *)&v523 + 8;
    v522 = 8;
    v528[0] = &v528[2];
    HIDWORD(v528[1]) = 8;
    v493 = v497;
    v117 = __src;
    if (__src == (void *)v529)
    {
      v494 = v497;
      v118 = __src;
    }
    else
    {
      v159 = v531;
      v116 = malloc_type_malloc(8 * v531, 0x4065EBACuLL);
      if (!v116)
      {
        if (v159 || (v116 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v87 = v444, !v116))
LABEL_313:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      v494 = v116;
      v118 = (void *)v529;
      v117 = __src;
    }
    v119 = v532;
    LODWORD(v495) = v531;
    if (v117 == v118)
      v120 = v532;
    else
      v120 = v531;
    if (v120)
    {
      memmove(v116, v117, 8 * v120);
      v119 = v532;
    }
    HIDWORD(v495) = v119;
    LODWORD(v496) = (_DWORD)v533;
    v498 = v500;
    v499 = 0x800000000;
    if (v537)
      sub_1C486F660((uint64_t)&v498, (uint64_t)&v536);
    v121 = v489;
    v485 = v489;
    v122 = v521;
    if (v521 == v520)
    {
      v486 = v489;
      v123 = v521;
    }
    else
    {
      v160 = v522;
      v121 = malloc_type_malloc(8 * v522, 0x4065EBACuLL);
      if (!v121)
      {
        if (v160)
          goto LABEL_313;
        v121 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v87 = v444;
        if (!v121)
          goto LABEL_313;
      }
      v486 = v121;
      v123 = v520;
      v122 = v521;
    }
    v124 = HIDWORD(v522);
    LODWORD(v487) = v522;
    if (v122 == v123)
      v125 = HIDWORD(v522);
    else
      v125 = v522;
    if (v125)
    {
      memmove(v121, v122, 8 * v125);
      v124 = HIDWORD(v522);
    }
    HIDWORD(v487) = v124;
    LODWORD(v488) = v523;
    v490 = v492;
    v491 = 0x800000000;
    if (LODWORD(v528[1]))
      sub_1C486F660((uint64_t)&v490, (uint64_t)v528);
    v549 = v553;
    if (v494 == v493)
    {
      v550 = v553;
      v126 = HIDWORD(v495);
      if (HIDWORD(v495))
        memmove(v553, v494, 8 * HIDWORD(v495));
    }
    else
    {
      v550 = v494;
      v494 = v493;
      v126 = HIDWORD(v495);
    }
    v551 = __PAIR64__(v126, v495);
    LODWORD(v552) = (_DWORD)v496;
    v495 = 8;
    LODWORD(v496) = 0;
    v554 = v556;
    v555 = 0x800000000;
    if ((_DWORD)v499)
      sub_1C486F510((uint64_t)&v554, (uint64_t)&v498);
    v539 = v543;
    if (v486 == v485)
    {
      v540 = v543;
      v127 = HIDWORD(v487);
      if (HIDWORD(v487))
        memmove(v543, v486, 8 * HIDWORD(v487));
    }
    else
    {
      v540 = v486;
      v486 = v485;
      v127 = HIDWORD(v487);
    }
    v541 = __PAIR64__(v127, v487);
    v542 = (int)v488;
    v487 = 8;
    LODWORD(v488) = 0;
    v546 = v548;
    v547 = 0x800000000;
    if ((_DWORD)v491)
      sub_1C486F510((uint64_t)&v546, (uint64_t)&v490);
    v501 = v506;
    if (v550 == v549)
    {
      v502 = v506;
      v128 = HIDWORD(v551);
      if (HIDWORD(v551))
        memmove(v506, v550, 8 * HIDWORD(v551));
    }
    else
    {
      v502 = v550;
      v550 = v549;
      v128 = HIDWORD(v551);
    }
    v503 = v551;
    v504 = v128;
    v505 = v552;
    v551 = 8;
    LODWORD(v552) = 0;
    v508 = v510;
    v509 = 0x800000000;
    if ((_DWORD)v555)
      sub_1C486F510((uint64_t)&v508, (uint64_t)&v554);
    v511 = v516;
    if (v540 == v539)
    {
      v512 = v516;
      v129 = HIDWORD(v541);
      if (HIDWORD(v541))
        memmove(v516, v540, 8 * HIDWORD(v541));
    }
    else
    {
      v512 = v540;
      v540 = v539;
      v129 = HIDWORD(v541);
    }
    v513 = v541;
    v514 = v129;
    v515 = v542;
    v541 = 8;
    v542 = 0;
    v517 = v519;
    v518 = 0x800000000;
    if ((_DWORD)v547)
      sub_1C486F510((uint64_t)&v517, (uint64_t)&v546);
    if (v546 != v548)
      free(v546);
    if (v540 != v539)
      free(v540);
    if (v554 != v556)
      free(v554);
    if (v550 != v549)
      free(v550);
    if (v490 != v492)
      free(v490);
    if (v486 != v485)
      free(v486);
    if (v498 != v500)
      free(v498);
    if (v494 != v493)
      free(v494);
    v549 = v553;
    v130 = v502;
    if (v502 == v501)
    {
      v550 = v553;
      v131 = v553;
      v132 = v502;
    }
    else
    {
      v161 = v503;
      v131 = malloc_type_malloc(8 * v503, 0x4065EBACuLL);
      if (!v131)
      {
        if (v161)
          goto LABEL_313;
        v131 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v87 = v444;
        if (!v131)
          goto LABEL_313;
      }
      v550 = v131;
      v132 = v501;
      v130 = v502;
    }
    v133 = v504;
    LODWORD(v551) = v503;
    if (v130 == v132)
      v134 = v504;
    else
      v134 = v503;
    if (v134)
    {
      memmove(v131, v130, 8 * v134);
      v133 = v504;
    }
    HIDWORD(v551) = v133;
    LODWORD(v552) = v505;
    v554 = v556;
    v555 = 0x800000000;
    if ((_DWORD)v509)
      sub_1C486F660((uint64_t)&v554, (uint64_t)&v508);
    v135 = v543;
    v539 = v543;
    v136 = v512;
    if (v512 == v511)
    {
      v540 = v543;
      v137 = v512;
    }
    else
    {
      v162 = v513;
      v135 = malloc_type_malloc(8 * v513, 0x4065EBACuLL);
      if (!v135)
      {
        if (v162)
          goto LABEL_313;
        v135 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v87 = v444;
        if (!v135)
          goto LABEL_313;
      }
      v540 = v135;
      v137 = v511;
      v136 = v512;
    }
    LODWORD(v541) = v513;
    v138 = v514;
    if (v136 == v137)
      v139 = v514;
    else
      v139 = v513;
    if (v139)
    {
      memmove(v135, v136, 8 * v139);
      v138 = v514;
    }
    HIDWORD(v541) = v138;
    v542 = v515;
    v546 = v548;
    v547 = 0x800000000;
    if ((_DWORD)v518)
      sub_1C486F660((uint64_t)&v546, (uint64_t)&v517);
    v140 = 0;
    while (1)
    {
      if ((_DWORD)v555 != (_DWORD)v547)
        goto LABEL_246;
      if (!(_DWORD)v555)
        break;
      v141 = v546;
      v142 = v554;
      while (*v142 == *v141 && v142[1] == v141[1])
      {
        v142 += 2;
        v141 += 2;
        if (v142 == (_QWORD *)((char *)v554 + 16 * v555))
          goto LABEL_264;
      }
LABEL_246:
      v445 = v140;
      v459[0] = *((_QWORD *)v554 + 2 * v555 - 2);
      v144 = v459[0];
      v145 = sub_1C49785F4((uint64_t)v466, v459);
      v147 = v145[21];
      v146 = v145[22];
      v148 = (uint64_t)(v145 + 12);
      v149 = v145[15];
      v150 = v145[16];
      v151 = *(int32x2_t **)(v144 + 88);
      v152 = *(int32x2_t **)(v144 + 96);
      while (v151 != v152)
      {
        v464[0] = *v151;
        v153 = sub_1C49785F4((uint64_t)v466, (uint64_t *)v464);
        v472 = 0;
        v473 = 0;
        v474 = 0;
        sub_1C4979128((uint64_t)&v472, (uint64_t)(v153 + 18));
        __p = 0;
        v476 = 0;
        v477 = 0;
        sub_1C4979194(&__p, (const void *)v153[21], v153[22], (uint64_t)(v153[22] - v153[21]) >> 2);
        sub_1C497868C(v148, __p, v476);
        if (__p)
        {
          v476 = __p;
          operator delete(__p);
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v472, 4);
        ++v151;
      }
      sub_1C497868C((uint64_t)(v145 + 18), (_DWORD *)v145[3], (_DWORD *)v145[4]);
      v472 = 0;
      v473 = 0;
      v474 = 0;
      sub_1C4979128((uint64_t)&v472, v148);
      __p = 0;
      v476 = 0;
      v477 = 0;
      sub_1C4979194(&__p, (const void *)v145[15], v145[16], (uint64_t)(v145[16] - v145[15]) >> 2);
      v154 = (__int32 *)v145[9];
      v155 = (__int32 *)v145[10];
      while (v154 != v155)
      {
        v156 = *v154++;
        v464[0].i32[0] = v156;
        sub_1C497812C(&v472, v464);
      }
      sub_1C497868C((uint64_t)(v145 + 18), __p, v476);
      v158 = ((unint64_t)(v146 - v147) >> 2) != (uint64_t)(v145[22] - v145[21]) >> 2
          || ((unint64_t)(v150 - v149) >> 2) != (uint64_t)(v145[16] - v145[15]) >> 2;
      if (__p)
      {
        v476 = __p;
        operator delete(__p);
      }
      v140 = v445 | v158;
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v472, 4);
      v57 = (_DWORD)v555 == 1;
      LODWORD(v555) = v555 - 1;
      v87 = v444;
      if (!v57)
        sub_1C486F1F8(&v549);
    }
LABEL_264:
    if (v546 != v548)
      free(v546);
    if (v540 != v539)
      free(v540);
    if (v554 != v556)
      free(v554);
    if (v550 != v549)
      free(v550);
    if (v517 != v519)
      free(v517);
    if (v512 != v511)
      free(v512);
    if (v508 != v510)
      free(v508);
    if (v502 != v501)
      free(v502);
    if (v528[0] != &v528[2])
      free(v528[0]);
    if (v521 != v520)
      free(v521);
    if (v536 != &v538)
      free(v536);
    if (__src != (void *)v529)
      free(__src);
  }
  while ((v140 & 1) != 0);
  if (!*(_BYTE *)(v87 + 256))
  {
    *(_BYTE *)(v87 + 256) = 1;
    v163 = *(_DWORD *)(v448 + 44);
    v501 = &v503;
    v502 = (void *)0x600000000;
    sub_1C4765AA4((char *)&v501, (v163 + 63) >> 6, 0);
    v507 = v163;
    v164 = (void **)(v87 + 264);
    v165 = (unsigned int *)v501;
    if ((void **)(v87 + 264) != &v501)
    {
      if (v501 == &v503)
      {
        v166 = v502;
        v167 = *(unsigned int *)(v87 + 272);
        if (v167 >= v502)
        {
          if ((_DWORD)v502)
            memmove(*v164, &v503, 8 * v502);
          goto LABEL_320;
        }
        if (*(_DWORD *)(v87 + 276) < v502)
        {
          *(_DWORD *)(v87 + 272) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v87 + 264, v87 + 280, v166, 8);
LABEL_803:
          v167 = 0;
        }
        else
        {
          if (!(_DWORD)v167)
            goto LABEL_803;
          memmove(*v164, &v503, 8 * v167);
        }
        if (v167 != v502)
          memcpy((char *)*v164 + 8 * v167, (char *)v501 + 8 * v167, 8 * v502 - 8 * v167);
LABEL_320:
        *(_DWORD *)(v87 + 272) = v166;
      }
      else
      {
        if (*(_QWORD *)(v87 + 264) != v87 + 280)
        {
          free(*(void **)(v87 + 264));
          v165 = (unsigned int *)v501;
        }
        *(_QWORD *)(v87 + 264) = v165;
        *(_QWORD *)(v87 + 272) = v502;
        v501 = &v503;
        HIDWORD(v502) = 0;
      }
      LODWORD(v502) = 0;
      v163 = v507;
      v165 = (unsigned int *)v501;
    }
    *(_DWORD *)(v87 + 328) = v163;
    if (v165 != &v503)
      free(v165);
    v168 = v87 + 336;
    v169 = 56;
    v170 = *(_QWORD *)(v87 + 336);
    while (2)
    {
      v171 = *(unsigned int *)(*(_QWORD *)(v448 + 8) + 24 * v169 + 16);
      v172 = (_WORD *)(*(_QWORD *)(v448 + 56) + ((v171 >> 3) & 0x1FFFFFFE));
      v173 = *v172 + (v171 & 0xF) * v169;
LABEL_326:
      v174 = v173;
      *(_QWORD *)(*(_QWORD *)(v87 + 264) + 8 * (v173 >> 6)) |= 1 << v173;
      v175 = *(_DWORD *)(v87 + 352);
      if (!v175)
      {
        v178 = 0;
        goto LABEL_339;
      }
      v176 = v175 - 1;
      v177 = (v175 - 1) & (37 * v173);
      v178 = (_DWORD *)(v170 + 8 * v177);
      v179 = *v178;
      if (*v178 != v174)
      {
        v180 = 0;
        v181 = 1;
        while (v179 != -1)
        {
          if (v180)
            v182 = 0;
          else
            v182 = v179 == -2;
          if (v182)
            v180 = v178;
          v183 = v177 + v181++;
          v177 = v183 & v176;
          v178 = (_DWORD *)(v170 + 8 * (v183 & v176));
          v179 = *v178;
          if (*v178 == v174)
            goto LABEL_344;
        }
        if (v180)
          v178 = v180;
LABEL_339:
        v184 = *(_DWORD *)(v87 + 344);
        if (4 * v184 + 4 < 3 * v175)
        {
          if (v175 + ~v184 - *(_DWORD *)(v87 + 348) > v175 >> 3)
            goto LABEL_341;
          sub_1C4978FA0(v168, v175);
          v170 = *(_QWORD *)(v87 + 336);
          v194 = *(_DWORD *)(v87 + 352);
          if (v194)
          {
            v195 = v194 - 1;
            v196 = (v194 - 1) & (37 * v174);
            v178 = (_DWORD *)(v170 + 8 * v196);
            v197 = *v178;
            if (*v178 != v174)
            {
              v190 = 0;
              v198 = 1;
              while (v197 != -1)
              {
                if (v190)
                  v199 = 0;
                else
                  v199 = v197 == -2;
                if (v199)
                  v190 = v178;
                v200 = v196 + v198++;
                v196 = v200 & v195;
                v178 = (_DWORD *)(v170 + 8 * (v200 & v195));
                v197 = *v178;
                if (*v178 == v174)
                  goto LABEL_371;
              }
              goto LABEL_369;
            }
            goto LABEL_371;
          }
LABEL_372:
          v178 = 0;
          goto LABEL_371;
        }
        sub_1C4978FA0(v168, 2 * v175);
        v170 = *(_QWORD *)(v87 + 336);
        v186 = *(_DWORD *)(v87 + 352);
        if (!v186)
          goto LABEL_372;
        v187 = v186 - 1;
        v188 = (v186 - 1) & (37 * v174);
        v178 = (_DWORD *)(v170 + 8 * v188);
        v189 = *v178;
        if (*v178 != v174)
        {
          v190 = 0;
          v191 = 1;
          while (v189 != -1)
          {
            if (v190)
              v192 = 0;
            else
              v192 = v189 == -2;
            if (v192)
              v190 = v178;
            v193 = v188 + v191++;
            v188 = v193 & v187;
            v178 = (_DWORD *)(v170 + 8 * (v193 & v187));
            v189 = *v178;
            if (*v178 == v174)
              goto LABEL_371;
          }
LABEL_369:
          if (v190)
            v178 = v190;
        }
LABEL_371:
        v87 = v444;
LABEL_341:
        ++*(_DWORD *)(v87 + 344);
        if (*v178 != -1)
          --*(_DWORD *)(v87 + 348);
        *v178 = v174;
        v178[1] = 0;
      }
LABEL_344:
      v178[1] = v169;
      v185 = (unsigned __int16)v172[1];
      ++v172;
      v173 = v185 + v174;
      if (!v185)
      {
        if (++v169 == 184)
          break;
        continue;
      }
      goto LABEL_326;
    }
  }
  v201 = *(_QWORD **)(v439 + 328);
  if (v201 == i)
  {
    v311 = 1;
    goto LABEL_566;
  }
  while (2)
  {
    v539 = &v541;
    v540 = (void *)0x800000000;
    v544 = v448;
    v545 = v440;
    v202 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v448 + 296))(v448);
    v203 = v202;
    v204 = v202;
    v205 = v540;
    if ((_DWORD)v540 != v202)
    {
      if (v540 <= v202)
      {
        if (HIDWORD(v540) < v202)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v539, (uint64_t)&v541, v202, 4);
          v205 = v540;
        }
        if (v205 != v203)
          bzero((char *)v539 + 4 * v205, 4 * (v204 - v205));
      }
      LODWORD(v540) = v203;
    }
    if (v203)
      bzero(v539, 4 * v204);
    v501 = &v503;
    v502 = (void *)0x600000000;
    v206 = v479;
    if ((_DWORD)v479)
    {
      v207 = &v503;
      v208 = v479;
      if (v479 < 7uLL)
        goto LABEL_388;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v501, (uint64_t)&v503, v479, 8);
      v208 = v479;
      if ((_DWORD)v479)
      {
        v207 = v501;
LABEL_388:
        memcpy(v207, v478, 8 * v208);
      }
      LODWORD(v502) = v206;
    }
    v507 = v481;
    v464[0] = 0;
    v464[1] = 0;
    v465 = 0;
    __src = 0;
    v529 = 0;
    v531 = 0;
    v534 = 0;
    v535 = 0;
    v533 = 0;
    v549 = (_QWORD *)v87;
    v550 = &v469;
    v551 = v448;
    v552 = v440;
    v553[0] = &v471;
    v553[1] = &v468;
    v553[2] = &v529;
    v553[3] = v464;
    v553[4] = &v501;
    if (v467)
    {
      v209 = (v467 - 1) & ((v201 >> 4) ^ (v201 >> 9));
      v210 = v466[0] + 200 * v209;
      v211 = *(_QWORD *)v210;
      if (v201 != *(_QWORD **)v210)
      {
        v212 = 1;
        while (v211 != -4096)
        {
          v213 = v209 + v212++;
          v209 = v213 & (v467 - 1);
          v210 = v466[0] + 200 * v209;
          v211 = *(_QWORD *)v210;
          if (v201 == *(_QWORD **)v210)
            goto LABEL_397;
        }
        v210 = v466[0] + 200 * v467;
      }
    }
    else
    {
      v210 = v466[0];
    }
LABEL_397:
    v442 = v201;
    v521 = 0;
    v520 = 0;
    LODWORD(v522) = 0;
    sub_1C4979128((uint64_t)&v520, v210 + 104);
    v523 = 0uLL;
    *(_QWORD *)&v524 = 0;
    sub_1C4979194(&v523, *(const void **)(v210 + 128), *(_QWORD *)(v210 + 136), (uint64_t)(*(_QWORD *)(v210 + 136) - *(_QWORD *)(v210 + 128)) >> 2);
    v214 = **(void ****)(v87 + 8);
    do
    {
      v215 = *v214;
      v214 += 2;
    }
    while (v215 != &llvm::LiveIntervals::ID);
    v216 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v214 - 1) + 96))(*(v214 - 1), &llvm::LiveIntervals::ID);
    v218 = (_DWORD *)*((_QWORD *)&v523 + 1);
    for (j = (_DWORD *)v523; j != v218; ++j)
    {
      LODWORD(v493) = *j;
      if ((v493 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v216 + 416)
        || (v219 = *(_QWORD *)(*(_QWORD *)(v216 + 408) + 8 * (v493 & 0x7FFFFFFF))) == 0)
      {
        v219 = sub_1C4851220(v216, (int)v493);
        v222 = *(_QWORD *)(v216 + 304);
        v223 = *(_QWORD *)(v216 + 248);
        *(_QWORD *)v222 = v223;
        *(_QWORD *)(v222 + 8) = *(_QWORD *)(v223 + 40);
        *(_OWORD *)(v222 + 16) = *(_OWORD *)(v216 + 288);
        *(_QWORD *)(v222 + 32) = v216 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v222);
        *(_DWORD *)(v222 + 184) = 0;
        v224 = *(_QWORD *)(v216 + 256);
        v57 = *(_BYTE *)(v224 + 16) == 0;
        v225 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v224 + 24) + 16 * (*(_DWORD *)(v219 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v227 = !v57 && v225 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v216 + 304), (llvm::LiveInterval *)v219, v227);
        llvm::LiveIntervals::computeDeadValues(v216, v219, 0);
      }
      if (*(float *)(v219 + 116) == INFINITY)
      {
        if (word_1ED7EBB68)
          v220 = byte_1ED7EBBE0 == 0;
        else
          v220 = 1;
        if (v220
          || (sub_1C4977DA4((uint64_t)&v529, &v493),
              (v221 = sub_1C4977F34(v87, *(_QWORD *)(v448 + 8), *(_QWORD *)(v448 + 56), *(_QWORD *)(v440 + 24), v493, (uint64_t)v501)) == 0))
        {
          LODWORD(v441) = v471;
          v228 = 1;
          goto LABEL_553;
        }
        sub_1C61482A0((uint64_t)v464, (int *)&v493)[1] = v221;
      }
      sub_1C4978038((uint64_t *)&v539, v493);
    }
    v229 = (int *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(_QWORD *)v544 + 320))(v544, &off_1E7FA5F48);
    v230 = *v229;
    if (*v229 == -1)
    {
      v236 = -1;
      v233 = v201;
    }
    else
    {
      v231 = 0;
      v232 = v229 + 1;
      v233 = v201;
      do
      {
        v234 = *((_DWORD *)v539 + v230);
        if (v231 <= v234)
          v231 = v234;
        v235 = *v232++;
        v230 = v235;
      }
      while (v235 != -1);
      v236 = v231 - 1;
    }
    v237 = (_DWORD *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(_QWORD *)v544 + 280))(v544, &off_1E7FA5F48);
    v238 = (*v237 + v236) / *v237 + v443;
    if (HIDWORD(v469) > v238)
      v238 = HIDWORD(v469);
    HIDWORD(v469) = v238;
    v239 = v233 + 6;
    v240 = v233[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v240 || (*(_BYTE *)v240 & 4) == 0)
    {
      while ((*(_WORD *)(v240 + 44) & 4) != 0)
        v240 = *(_QWORD *)v240 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((_QWORD *)v240 == v239)
    {
LABEL_552:
      v228 = 0;
      goto LABEL_553;
    }
    v446 = v233 + 6;
    while (2)
    {
      if (**(unsigned __int16 **)(v240 + 16) - 13 < 5)
        goto LABEL_546;
      v494 = 0;
      v493 = 0;
      LODWORD(v495) = 0;
      v497[0] = 0;
      v497[1] = 0;
      v496 = 0;
      v486 = 0;
      v485 = 0;
      LODWORD(v487) = 0;
      v489[0] = 0;
      v489[1] = 0;
      v488 = 0;
      v472 = 0;
      v473 = 0;
      v474 = 0;
      v476 = 0;
      v477 = 0;
      __p = 0;
      v459[0] = 0;
      v459[1] = 0;
      v460 = 0;
      v462 = 0;
      v463 = 0;
      v461 = 0;
      v241 = *(unsigned int *)(v240 + 40);
      if ((_DWORD)v241)
      {
        v242 = *(_DWORD **)(v240 + 32);
        v243 = &v242[8 * v241];
        while (1)
        {
          if ((*v242 & 0x10000FF) != 0x1000000)
            goto LABEL_465;
          v244 = v242[1];
          v458 = v244;
          if (!(_DWORD)v244)
            goto LABEL_465;
          if (v244 >> 30)
          {
            if ((v244 & 0x80000000) != 0)
              goto LABEL_445;
          }
          else if (((*(_QWORD *)((char *)v482[0] + ((v244 >> 3) & 0x1FFFFFF8)) >> v244) & 1) != 0)
          {
            goto LABEL_465;
          }
          if (sub_1C49780D4(*(_QWORD *)(v87 + 264), v244, *(_QWORD *)(v448 + 8), *(_QWORD *)(v448 + 56)))
          {
LABEL_445:
            sub_1C4977DA4((uint64_t)&v472, &v458);
            LODWORD(v244) = v458;
          }
          if ((v244 - 1) <= 0x3FFFFFFE)
          {
            v245 = 0;
            v246 = *(unsigned int *)(*(_QWORD *)(v448 + 8) + 24 * v244 + 16);
            v247 = (_WORD *)(*(_QWORD *)(v448 + 56) + ((v246 >> 3) & 0x1FFFFFFE));
            v249 = *v247;
            v248 = v247 + 1;
            v250 = v249 + (v246 & 0xF) * v244;
            v251 = *(_QWORD *)(v87 + 264);
            do
            {
              v252 = v250;
              if (((*(_QWORD *)(v251 + 8 * (v250 >> 6)) >> v250) & 1) != 0)
                v245 = sub_1C49796E4(*(_QWORD *)(v87 + 336), *(_DWORD *)(v87 + 352), v250)[1];
              v253 = *v248++;
              v250 = v253 + v252;
            }
            while (v253);
            v254 = v245 - 55;
            if (v469 > v254)
              v254 = v469;
            LODWORD(v469) = v254;
            goto LABEL_465;
          }
          if ((*v242 & 0xFFF00) == 0 || (*v242 & 0x10000000) != 0)
          {
            if (sub_1C497812C((int32x2_t *)&v520, &v458))
            {
              sub_1C4977DA4((uint64_t)&v493, &v458);
              if (sub_1C497812C(&v529, &v458))
              {
                v256 = sub_1C49781B4((uint64_t *)v464, &v458)[1];
                v257 = (unsigned __int16 *)(*(_QWORD *)(v448 + 56)
                                          + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v448 + 8)
                                                                                + 24 * v256
                                                                                + 16) >> 3) & 0x1FFFFFFE));
                v259 = *v257;
                v258 = v257 + 1;
                v260 = v259 + (*(_DWORD *)(*(_QWORD *)(v448 + 8) + 24 * v256 + 16) & 0xF) * v256;
                v261 = v501;
                do
                {
                  v261[(unsigned __int16)v260 >> 6] &= ~(1 << v260);
                  v262 = *v258++;
                  v260 += v262;
                }
                while (v262);
                sub_1C4978224(v464, &v458);
              }
              goto LABEL_465;
            }
            if ((_DWORD)v495)
            {
              v263 = (37 * v458) & (v495 - 1);
              v264 = *((_DWORD *)v493 + v263);
              if (v458 == v264)
                goto LABEL_465;
              v265 = 1;
              while (v264 != -1)
              {
                v266 = v263 + v265++;
                v263 = v266 & (v495 - 1);
                v264 = *((_DWORD *)v493 + v263);
                if (v458 == v264)
                  goto LABEL_465;
              }
            }
            v255 = (uint64_t *)&v485;
          }
          else
          {
            v255 = v459;
          }
          sub_1C4977DA4((uint64_t)v255, &v458);
LABEL_465:
          v242 += 8;
          if (v242 == v243)
          {
            v267 = (unsigned int *)v488;
            v268 = (unsigned int *)v489[0];
            while (v267 != v268)
            {
              v269 = *v267++;
              sub_1C4978038((uint64_t *)&v539, v269);
            }
            break;
          }
        }
      }
      v270 = (int *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(_QWORD *)v544 + 320))(v544, &off_1E7FA5F48);
      v271 = *v270;
      if (*v270 == -1)
      {
        v276 = -1;
      }
      else
      {
        v272 = 0;
        v273 = v270 + 1;
        do
        {
          v274 = *((_DWORD *)v539 + v271);
          if (v272 <= v274)
            v272 = v274;
          v275 = *v273++;
          v271 = v275;
        }
        while (v275 != -1);
        v276 = v272 - 1;
      }
      v277 = (_DWORD *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(_QWORD *)v544 + 280))(v544, &off_1E7FA5F48);
      v278 = (*v277 + v276) / *v277 + v443;
      if (HIDWORD(v469) > v278)
        v278 = HIDWORD(v469);
      HIDWORD(v469) = v278;
      sub_1C49782B0((uint64_t)&v549, (uint64_t)&v472);
      v279 = (unsigned int *)v488;
      v280 = (unsigned int *)v489[0];
      while (v279 != v280)
      {
        v281 = *v279++;
        sub_1C4978558((uint64_t *)&v539, v281);
      }
      v282 = (unsigned int *)v496;
      v283 = (unsigned int *)v497[0];
      while (v282 != v283)
      {
        v284 = *v282++;
        sub_1C4978558((uint64_t *)&v539, v284);
      }
      v285 = *(unsigned int *)(v240 + 40);
      if ((_DWORD)v285)
      {
        v286 = 32 * v285;
        v287 = (unsigned int *)(*(_QWORD *)(v240 + 32) + 4);
        do
        {
          if ((*(v287 - 1) & 0x10000FF) == 0)
          {
            v288 = *v287;
            v458 = v288;
            if ((_DWORD)v288)
            {
              if (v288 >> 30)
              {
                if ((v288 & 0x80000000) != 0)
                  goto LABEL_500;
LABEL_499:
                if (sub_1C49780D4(*(_QWORD *)(v87 + 264), v288, *(_QWORD *)(v448 + 8), *(_QWORD *)(v448 + 56)))
                {
LABEL_500:
                  sub_1C4977DA4((uint64_t)v459, &v458);
                  LODWORD(v288) = v458;
                }
                if ((v288 - 1) >= 0x3FFFFFFF && sub_1C4977DA4((uint64_t)&v520, &v458))
                  sub_1C4978038((uint64_t *)&v539, v458);
                goto LABEL_492;
              }
              if (((*(_QWORD *)((char *)v482[0] + ((v288 >> 3) & 0x1FFFFFF8)) >> v288) & 1) == 0)
                goto LABEL_499;
            }
          }
LABEL_492:
          v287 += 8;
          v286 -= 32;
        }
        while (v286);
      }
      v289 = (int *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(_QWORD *)v544 + 320))(v544, &off_1E7FA5F48);
      v290 = *v289;
      if (*v289 == -1)
      {
        v295 = -1;
      }
      else
      {
        v291 = 0;
        v292 = v289 + 1;
        do
        {
          v293 = *((_DWORD *)v539 + v290);
          if (v291 <= v293)
            v291 = v293;
          v294 = *v292++;
          v290 = v294;
        }
        while (v294 != -1);
        v295 = v291 - 1;
      }
      v296 = (_DWORD *)(*(uint64_t (**)(unint64_t, __int16 ***))(*(_QWORD *)v544 + 280))(v544, &off_1E7FA5F48);
      v297 = (*v296 + v295) / *v296 + v443;
      if (HIDWORD(v469) > v297)
        v297 = HIDWORD(v469);
      HIDWORD(v469) = v297;
      sub_1C49782B0((uint64_t)&v549, (uint64_t)v459);
      v298 = v461;
      v299 = v462;
      if (v461 == v462)
      {
        v228 = 0;
        v310 = 1;
        goto LABEL_537;
      }
      while (1)
      {
        v300 = *v298;
        v458 = v300;
        if ((v300 - 1) < 0x3FFFFFFF)
          goto LABEL_525;
        if ((v300 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v216 + 416)
          || (v301 = *(_QWORD *)(*(_QWORD *)(v216 + 408) + 8 * (v300 & 0x7FFFFFFF))) == 0)
        {
          v301 = sub_1C4851220(v216, v300);
          v304 = *(_QWORD *)(v216 + 304);
          v305 = *(_QWORD *)(v216 + 248);
          *(_QWORD *)v304 = v305;
          *(_QWORD *)(v304 + 8) = *(_QWORD *)(v305 + 40);
          *(_OWORD *)(v304 + 16) = *(_OWORD *)(v216 + 288);
          *(_QWORD *)(v304 + 32) = v216 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v304);
          *(_DWORD *)(v304 + 184) = 0;
          v306 = *(_QWORD *)(v216 + 256);
          v57 = *(_BYTE *)(v306 + 16) == 0;
          v307 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v306 + 24) + 16
                                                                          * (*(_DWORD *)(v301 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v309 = !v57 && v307 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v216 + 304), (llvm::LiveInterval *)v301, v309);
          llvm::LiveIntervals::computeDeadValues(v216, v301, 0);
        }
        if (*(float *)(v301 + 116) != INFINITY)
          goto LABEL_525;
        if (!word_1ED7EBB68 || byte_1ED7EBBE0 == 0)
          break;
        if (sub_1C4977DA4((uint64_t)&v529, &v458))
        {
          v303 = sub_1C4977F34(v87, *(_QWORD *)(v448 + 8), *(_QWORD *)(v448 + 56), *(_QWORD *)(v440 + 24), v458, (uint64_t)v501);
          if (!v303)
            break;
          sub_1C61482A0((uint64_t)v464, (int *)&v458)[1] = v303;
        }
LABEL_525:
        if (++v298 == v299)
        {
          v228 = 0;
          v310 = 1;
          goto LABEL_536;
        }
      }
      v310 = 0;
      LODWORD(v441) = v471;
      v228 = 1;
LABEL_536:
      v298 = v461;
LABEL_537:
      v239 = v446;
      if (v298)
      {
        v462 = v298;
        operator delete(v298);
      }
      MEMORY[0x1CAA32FB4](v459[0], 4);
      if (__p)
      {
        v476 = __p;
        operator delete(__p);
      }
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v472, 4);
      if (v488)
      {
        v489[0] = v488;
        operator delete(v488);
      }
      MEMORY[0x1CAA32FB4](v485, 4);
      if (v496)
      {
        v497[0] = v496;
        operator delete(v496);
      }
      MEMORY[0x1CAA32FB4](v493, 4);
      if (v310)
      {
LABEL_546:
        v240 = *(_QWORD *)v240 & 0xFFFFFFFFFFFFFFF8;
        if (!v240 || (*(_BYTE *)v240 & 4) == 0)
        {
          while ((*(_WORD *)(v240 + 44) & 4) != 0)
            v240 = *(_QWORD *)v240 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((_QWORD *)v240 == v239)
          goto LABEL_552;
        continue;
      }
      break;
    }
LABEL_553:
    if ((_QWORD)v523)
    {
      *((_QWORD *)&v523 + 1) = v523;
      operator delete((void *)v523);
    }
    MEMORY[0x1CAA32FB4](v520, 4);
    if (v533)
    {
      v534 = v533;
      operator delete(v533);
    }
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v529, 4);
    MEMORY[0x1CAA32FB4](*(_QWORD *)v464, 4);
    if (v501 != &v503)
      free(v501);
    if (v539 != &v541)
      free(v539);
    v311 = v228 == 0;
    if (!v228)
    {
      v201 = (_QWORD *)v442[1];
      if (v201 != i)
        continue;
    }
    break;
  }
LABEL_566:
  v312 = v469;
  v313 = v470;
  v314 = v466[0];
  if (v467)
  {
    v315 = 200 * v467;
    v316 = (_QWORD *)(v466[0] + 104);
    do
    {
      if ((*(v316 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v317 = (void *)v316[9];
        if (v317)
        {
          v316[10] = v317;
          operator delete(v317);
        }
        MEMORY[0x1CAA32FB4](v316[6], 4);
        v318 = (void *)v316[3];
        if (v318)
        {
          v316[4] = v318;
          operator delete(v318);
        }
        MEMORY[0x1CAA32FB4](*v316, 4);
        v319 = (void *)*(v316 - 3);
        if (v319)
        {
          *(v316 - 2) = v319;
          operator delete(v319);
        }
        MEMORY[0x1CAA32FB4](*(v316 - 6), 4);
        v320 = (void *)*(v316 - 9);
        if (v320)
        {
          *(v316 - 8) = v320;
          operator delete(v320);
        }
        MEMORY[0x1CAA32FB4](*(v316 - 12), 4);
      }
      v316 += 25;
      v315 -= 200;
    }
    while (v315);
  }
  MEMORY[0x1CAA32FB4](v314, 8);
  if (v478 != v480)
    free(v478);
  if (v482[0] != &v483)
    free(v482[0]);
  if (v311)
    v321 = v312;
  else
    v321 = v441;
  v322 = HIDWORD(v312);
  if (v311)
    v323 = HIDWORD(v312);
  else
    v323 = 0;
  if (v321 <= v434)
    v324 = v434;
  else
    v324 = v321;
  v325 = (v457 + 3) & 0xFFFFFFFC;
  v326 = v437;
  if (v323 < v437)
    v326 = v323;
  v327 = v313 != 0;
  if (v326 <= v324)
    v326 = v324;
  v328 = v311 && v327;
  if (!v311 || !v327)
    v326 = v435;
  v329 = *(unsigned __int8 *)(*(_QWORD *)(v439 + 16) + 323);
  if (*(_BYTE *)(*(_QWORD *)(v439 + 16) + 323))
    v330 = -8;
  else
    v330 = -4;
  if (*(_BYTE *)(*(_QWORD *)(v439 + 16) + 323))
    v331 = 7;
  else
    v331 = 3;
  v332 = (v331 + v326) & v330;
  v333 = *(_DWORD *)(v444 + 252);
  v334 = 0x340 / v332;
  if (v334 >= 0x30)
    v334 = 48;
  v335 = 100.0;
  v336 = (float)((float)((v334 << 6) / v333 * v333) / 3072.0) * 100.0;
  v337 = v325 + 255;
  if (((v325 + 255) & 0xFFFFFF00) != 0)
  {
    v338 = 0x10000 / ((v325 + 255) & 0xFFFFFF00) * v333;
    if (v338 >= 0xC00)
      v338 = 3072;
    v335 = (float)((float)v338 / 3072.0) * 100.0;
  }
  v339 = 0;
  v340 = 4;
  if (v335 >= v336)
    v341 = v336;
  else
    v341 = v335;
  while (1)
  {
    v342 = (v337 + (v339 + v340) * v333) & 0xFFFFFF00;
    if (v342)
    {
      v343 = 0x10000 / v342 * v333;
      if (v343 >= 0xC00)
        v343 = 3072;
      v344 = (float)((float)v343 / 3072.0) * 100.0;
    }
    else
    {
      v344 = 100.0;
    }
    v346 = v344 < v341 || v342 > v436;
    if (v346)
      v347 = 1;
    else
      v347 = v340;
    if (!v346)
      v339 += v340;
    v57 = v340 == 1;
    v340 = v347;
    if (v57)
    {
      v340 = v347;
      if (v346)
        break;
    }
  }
  v348 = **(void ****)(v444 + 8);
  do
  {
    v349 = *v348;
    v348 += 2;
  }
  while (v349 != &llvm::MachineBlockFrequencyInfo::ID);
  v350 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v348 - 1) + 96))(*(v348 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4990A5C(v439, v350, 0, &v501);
  if ((_DWORD)v502)
  {
    v351 = 0;
    v352 = 8 * v502;
    v353 = (int *)((char *)v501 + 4);
    v354 = v436;
    do
    {
      v355 = *v353;
      v353 += 2;
      v356 = v355 + v351;
      if (v355 + v351 <= v339)
      {
        v357 = *(_DWORD *)(v444 + 252);
        if (((v337 + v357 * v356) & 0xFFFFFF00) != 0)
        {
          v358 = 0x10000 / ((v337 + v357 * v356) & 0xFFFFFF00) * v357;
          if (v358 >= 0xC00)
            v358 = 3072;
          v359 = (float)((float)v358 / 3072.0) * 100.0;
        }
        else
        {
          v359 = 100.0;
        }
        if (v359 >= v341)
          v351 = v356;
      }
      v352 -= 8;
    }
    while (v352);
  }
  else
  {
    v351 = 0;
    v354 = v436;
  }
  if (v328 && v324 < v323)
  {
    v360 = *(_DWORD *)(v444 + 252);
    v361 = v323 - v437;
    if (v323 <= v437)
    {
      v361 = 0;
      v371 = 0.0;
      v372 = 1;
      v373 = v351;
    }
    else
    {
      v362 = 0x340 / v437;
      if (0x340 / v437 >= 0x30)
        v362 = 48;
      v363 = (float)((v362 << 6) / v360 * v360) / 3072.0;
      LODWORD(v322) = v437;
      if (((v337 + v360 * v351) & 0xFFFFFF00) != 0)
      {
        v364 = 0x10000 / ((v337 + v360 * v351) & 0xFFFFFF00) * v360;
        if (v364 >= 0xC00)
          v364 = 3072;
        v365 = (float)((float)v364 / 3072.0) * 100.0;
      }
      else
      {
        v365 = 100.0;
      }
      v371 = v363 * 100.0;
      if (v361)
      {
        v391 = 0;
        v392 = v325 + v360 * (v351 + 4) + 255;
        v393 = v351;
        while (1)
        {
          v394 = v392 & 0xFFFFFF00;
          if ((v392 & 0xFFFFFF00) != 0)
          {
            v395 = 0x10000 / v394 * v360;
            if (v395 >= 0xC00)
              v395 = 3072;
            v396 = (float)((float)v395 / 3072.0) * 100.0;
            v373 = (v394 - v325) / v360;
          }
          else
          {
            v373 = 0;
            v396 = 100.0;
          }
          if (v394 > v354)
            break;
          if (v396 <= v365 && v396 < v371)
            break;
          v398 = v391 + 1;
          v392 += 4 * v360;
          v399 = v391 + 2;
          ++v391;
          v393 = v373;
          if (v399 > v361)
            goto LABEL_720;
        }
        v373 = v393;
        v398 = v391;
      }
      else
      {
        v398 = 0;
        v373 = v351;
      }
LABEL_720:
      v372 = v398 == v361;
    }
    v400 = v331 + v322;
    v401 = 0x340 / (v400 & v330);
    if (v401 >= 0x30)
      v401 = 48;
    v402 = (float)dword_1ED7EBB20;
    if (!word_1ED7EBAA8)
      v402 = 50.0;
    if (v371 == 0.0)
      v403 = (float)((float)((v401 << 6) / v360 * v360) / 3072.0) * 100.0;
    else
      v403 = v371;
    v404 = (float)((float)((float)((v401 << 6) / v360 * v360) / 3072.0) * 100.0) >= v402 || !v372;
    if (v404
      || (!v329 ? (v405 = 2) : (v405 = 3),
          v406 = (unint64_t)(v331 + v324) >> v405,
          v407 = v400 >> v405,
          v407 < v406))
    {
      v408 = v373;
      v409 = v403;
      v410 = v444;
    }
    else
    {
      v422 = 0;
      if (v329)
        v423 = 3;
      else
        v423 = 2;
      v424 = 1;
      v410 = v444;
LABEL_772:
      v408 = v373;
      v409 = v403;
      do
      {
        v425 = (_DWORD)v406 << v423;
        v426 = 0x340u / ((_DWORD)v406 << v423);
        if (v426 >= 0x30)
          v426 = 48;
        v427 = v322 - v425;
        if (v322 < v425)
          v427 = 0;
        v428 = v427 + dword_1ED7EBA60;
        if (v322 <= v425)
          v428 = 0;
        v429 = (v337 + (v351 + 4 * (v428 + v361)) * v360) & 0xFFFFFF00;
        if (v429)
        {
          v430 = 0x10000 / v429 * v360;
          if (v430 >= 0xC00)
            v430 = 3072;
          v431 = (float)((float)v430 / 3072.0) * 100.0;
          v373 = (v429 - v325) / v360;
        }
        else
        {
          v373 = 0;
          v431 = 100.0;
        }
        v432 = (float)((v426 << 6) / v360 * v360) / 3072.0;
        if (v431 >= (float)(v432 * 100.0))
          v403 = v432 * 100.0;
        else
          v403 = v431;
        if (v429 <= v354)
        {
          if (v409 < v403 || (v409 == v403 ? (v433 = v408 > v373) : (v433 = 0), v433))
          {
            v424 = 0;
            LODWORD(v406) = v406 + 1;
            v422 = v425;
            if (v406 <= v407)
              goto LABEL_772;
            goto LABEL_798;
          }
        }
        LODWORD(v406) = v406 + 1;
      }
      while (v406 <= v407);
      v425 = v422;
      v373 = v408;
      v403 = v409;
      if ((v424 & 1) != 0)
        goto LABEL_737;
LABEL_798:
      sub_1C5EAC2F8(v449, v425, 0);
      v354 = v436;
      LOBYTE(v450) = 0;
      v408 = v373;
      v409 = v403;
    }
LABEL_737:
    if (v408)
    {
      v339 = 0;
      v411 = 4;
      v412 = *(_DWORD *)(v410 + 252);
      while (1)
      {
        v413 = (v337 + (v339 + v411) * v412) & 0xFFFFFF00;
        if (v413)
        {
          v414 = 0x10000 / v413 * v412;
          if (v414 >= 0xC00)
            v414 = 3072;
          v415 = (float)((float)v414 / 3072.0) * 100.0;
        }
        else
        {
          v415 = 100.0;
        }
        v417 = v415 < v409 || v413 > v354;
        if (v417)
          v418 = 1;
        else
          v418 = v411;
        if (!v417)
          v339 += v411;
        v57 = v411 == 1;
        v411 = v418;
        if (v57)
        {
          v411 = v418;
          if (v417)
            break;
        }
      }
      goto LABEL_758;
    }
    goto LABEL_759;
  }
  if (v328 && v323 > v437)
    v366 = v339;
  else
    v366 = v351;
  if (v366)
  {
    v367 = *(_DWORD *)(v444 + 252);
    v368 = (v337 + v367 * v366) & 0xFFFFFF00;
    if (v368)
    {
      v369 = 0x10000 / v368 * v367;
      if (v369 >= 0xC00)
        v369 = 3072;
      v370 = (float)((float)v369 / 3072.0) * 100.0;
    }
    else
    {
      v370 = 100.0;
    }
    v383 = 0;
    v384 = 4;
    while (1)
    {
      v385 = (v337 + (v383 + v384) * v367) & 0xFFFFFF00;
      if (v385)
      {
        v386 = 0x10000 / v385 * v367;
        if (v386 >= 0xC00)
          v386 = 3072;
        v387 = (float)((float)v386 / 3072.0) * 100.0;
      }
      else
      {
        v387 = 100.0;
      }
      v389 = v387 < v370 || v385 > v354;
      if (v389)
        v390 = 1;
      else
        v390 = v384;
      if (!v389)
        v383 += v384;
      v57 = v384 == 1;
      v384 = v390;
      if (v57)
      {
        v384 = v390;
        if (v389)
          break;
      }
    }
LABEL_758:
    sub_1C4977C88((uint64_t)&v449, v339);
    LOBYTE(v450) = 0;
LABEL_759:
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  if (v501 != &v503)
    free(v501);
  if ((_BYTE)v450)
  {
    v419 = (llvm::Module *)v449;
    v501 = "agx.local.store.spill";
    v506[0] = 259;
    v420 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((uint64_t)v449, (uint64_t)&v501);
    v421 = v452 ? v451 : 0;
    sub_1C4977C88((uint64_t)&v449, v421);
    if (HIBYTE(v450))
    {
      llvm::NamedMDNode::clearOperands((uint64_t)v420);
      llvm::Module::eraseNamedMetadata(v419, v420);
    }
  }
  return v2;
}

unsigned __int8 **sub_1C4977C88(uint64_t a1, unsigned int a2)
{
  uint64_t **v4;
  uint64_t NamedMetadata;
  uint64_t *v6;
  const llvm::APInt *v7;
  llvm::ValueHandleBase *v8;
  llvm::Value *v9;
  uint64_t v10;
  unsigned __int8 *Impl;
  unsigned __int8 **result;
  unsigned __int8 **v13;
  unsigned int v14;
  __int16 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t ***)a1;
  v13 = (unsigned __int8 **)"agx.local.store.spill";
  v15 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v4, (uint64_t)&v13);
  v6 = **(uint64_t ***)a1;
  v14 = 32;
  v13 = (unsigned __int8 **)a2;
  v16[0] = llvm::MDString::get(v6, "per-thread-spill-bytes", 0x16uLL);
  v8 = llvm::ConstantInt::get((llvm::ConstantInt *)v6, (llvm::LLVMContext *)&v13, v7);
  v16[1] = llvm::ValueAsMetadata::get(v8, v9);
  v10 = *(unsigned int *)(a1 + 28);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v6, v16, 2, 0, 1);
  result = sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(NamedMetadata + 48) + 8 * v10), Impl);
  if (v14 >= 0x41)
  {
    result = v13;
    if (v13)
      return (unsigned __int8 **)MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C4977DA4(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  BOOL v13;
  unsigned int v14;
  _DWORD *v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    v6 = v4 - 1;
    v7 = (37 * *a2) & v6;
    v8 = (_DWORD *)(*(_QWORD *)a1 + 4 * v7);
    v9 = *v8;
    if (*a2 == *v8)
      return 0;
    v10 = 0;
    v11 = 1;
    while (v9 != -1)
    {
      result = 0;
      if (v10)
        v13 = 0;
      else
        v13 = v9 == -2;
      if (v13)
        v10 = v8;
      v14 = v7 + v11++;
      v7 = v14 & v6;
      v8 = (_DWORD *)(v5 + 4 * v7);
      v9 = *v8;
      if (*a2 == *v8)
        return result;
    }
    if (v10)
      v15 = v10;
    else
      v15 = v8;
  }
  else
  {
    v15 = 0;
  }
  *sub_1C4978C80(a1, (uint64_t)a2, a2, v15) = *a2;
  v17 = *(char **)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v17 >= v16)
  {
    v19 = *(char **)(a1 + 24);
    v20 = (v17 - v19) >> 2;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      abort();
    v22 = v16 - (_QWORD)v19;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        sub_1C4764EE4();
      v24 = (char *)operator new(4 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[4 * v20];
    *(_DWORD *)v25 = *a2;
    v18 = v25 + 4;
    while (v17 != v19)
    {
      v26 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v25 - 1) = v26;
      v25 -= 4;
    }
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = &v24[4 * v23];
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_DWORD *)v17 = *a2;
    v18 = v17 + 4;
  }
  *(_QWORD *)(a1 + 32) = v18;
  return 1;
}

uint64_t sub_1C4977F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned __int16 **v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 *v15;
  int v16;
  unint64_t v17;
  __int16 v18;
  _WORD *v19;
  unsigned __int16 *v20;
  __int16 v21;
  unsigned __int16 v22;
  uint64_t v23;
  int v24;

  result = a5;
  if ((a5 - 1) >= 0x3FFFFFFF)
  {
    v8 = *(unsigned __int16 ***)(*(_QWORD *)(a4 + 16 * (a5 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    v9 = *((unsigned __int16 *)v8 + 10);
    if (!*((_WORD *)v8 + 10))
      return 0;
    v10 = *v8;
    v11 = &v10[v9];
LABEL_4:
    result = *v10;
    v12 = *(unsigned int *)(a2 + 24 * result + 16);
    v13 = (v12 >> 3) & 0x1FFFFFFE;
    v14 = *(_WORD *)(a3 + v13) + (v12 & 0xF) * result;
    v15 = (unsigned __int16 *)(a3 + 2 + v13);
    do
    {
      if (((*(_QWORD *)(a6 + 8 * (v14 >> 6)) >> v14) & 1) != 0)
      {
        result = 0;
        if (++v10 != v11)
          goto LABEL_4;
        return result;
      }
      v16 = *v15++;
      v14 += v16;
    }
    while (v16);
    if (!(_DWORD)result)
      return result;
  }
  v17 = *(unsigned int *)(a2 + 24 * result + 16);
  v18 = v17 & 0xF;
  v19 = (_WORD *)(a3 + ((v17 >> 3) & 0x1FFFFFFE));
  v21 = *v19;
  v20 = v19 + 1;
  v22 = v21 + v18 * result;
  v23 = *(_QWORD *)(a1 + 264);
  do
  {
    if (((1 << v22) & *(_QWORD *)(v23 + 8 * (v22 >> 6))) == 0)
      break;
    *(_QWORD *)(a6 + 8 * (v22 >> 6)) |= 1 << v22;
    v24 = *v20++;
    v22 += v24;
  }
  while (v24);
  return result;
}

uint64_t sub_1C4978038(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t (**v3)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &unk_1E7FA68B0;
  v5 = v4;
  sub_1C4979518(a1, a2, (uint64_t)v4);
  result = (uint64_t)v5;
  if (v5 == v4)
  {
    v3 = (uint64_t (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      return result;
    v3 = (uint64_t (**)(void))(*v5 + 40);
  }
  return (*v3)();
}

BOOL sub_1C49780D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __int16 v5;
  _WORD *v6;
  unsigned __int16 *v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  int v11;

  v4 = *(unsigned int *)(a3 + 24 * a2 + 16);
  v5 = v4 & 0xF;
  v6 = (_WORD *)(a4 + ((v4 >> 3) & 0x1FFFFFFE));
  v8 = *v6;
  v7 = v6 + 1;
  v9 = v8 + v5 * a2;
  do
  {
    v10 = (1 << v9) & *(_QWORD *)(a1 + 8 * (v9 >> 6));
    if (v10)
      break;
    v11 = *v7++;
    v9 += v11;
  }
  while (v11);
  return v10 != 0;
}

uint64_t sub_1C497812C(int32x2_t *a1, _DWORD *a2)
{
  uint64_t v4;
  char *v6;
  char *v7;
  int64_t v8;

  v4 = sub_1C4979748(a1, a2);
  if ((_DWORD)v4)
  {
    v7 = (char *)a1[3];
    v6 = (char *)a1[4];
    if (v7 != v6)
    {
      while (*(_DWORD *)v7 != *a2)
      {
        v7 += 4;
        if (v7 == v6)
        {
          v7 = (char *)a1[4];
          break;
        }
      }
    }
    v8 = v6 - (v7 + 4);
    if (v6 != v7 + 4)
      memmove(v7, v7 + 4, v6 - (v7 + 4));
    a1[4] = (int32x2_t)&v7[v8];
  }
  return v4;
}

int *sub_1C49781B4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 8 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 8 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 8 * v4);
    }
  }
  return (int *)(v2 + 8 * v3);
}

uint64_t sub_1C4978224(int32x2_t *a1, _DWORD *a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v9;
  int v10;

  v2 = a1[2].i32[0];
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    LODWORD(v5) = (37 * *a2) & (v2 - 1);
    v6 = (int *)(*(_QWORD *)a1 + 8 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_3:
      *v6 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    v9 = 1;
    while (v7 != -1)
    {
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v7 = *(_DWORD *)(*(_QWORD *)&v3 + 8 * v5);
      if (*a2 == v7)
      {
        v6 = (int *)(*(_QWORD *)&v3 + 8 * v5);
        goto LABEL_3;
      }
    }
  }
  return 0;
}

void sub_1C49782B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v8;
  unsigned int v9;
  int *v10;
  int *v11;
  int *i;
  int *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int *v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  _QWORD v30[2];
  int v31;
  void *__p;
  unsigned int *v33;
  uint64_t v34;
  void *__dst;
  uint64_t v36;
  _DWORD v37[14];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 64);
  __dst = v37;
  v36 = 0x600000000;
  v6 = *(_DWORD *)(v5 + 8);
  if (&__dst != (void **)v5 && v6 != 0)
  {
    if (v6 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v37, *(unsigned int *)(v5 + 8), 8);
      v9 = *(_DWORD *)(v5 + 8);
      if (!v9)
      {
LABEL_10:
        LODWORD(v36) = v6;
        goto LABEL_11;
      }
      v8 = __dst;
    }
    else
    {
      v8 = v37;
      v9 = *(_DWORD *)(v5 + 8);
    }
    memcpy(v8, *(const void **)v5, 8 * v9);
    goto LABEL_10;
  }
LABEL_11:
  v37[12] = *(_DWORD *)(v5 + 64);
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v10 = *(int **)(a2 + 24);
  v11 = *(int **)(a2 + 32);
  if (v10 != v11)
  {
    do
    {
      v29 = *v10;
      if ((v29 - 1) <= 0x3FFFFFFE)
        sub_1C4977DA4((uint64_t)v30, &v29);
      ++v10;
    }
    while (v10 != v11);
    v13 = *(int **)(a2 + 24);
    for (i = *(int **)(a2 + 32); v13 != i; ++v13)
    {
      v29 = *v13;
      if ((v29 - 1) >= 0x3FFFFFFF)
        sub_1C4977DA4((uint64_t)v30, &v29);
    }
  }
  v14 = (unsigned int *)__p;
  v15 = v33;
  if (__p != v33)
  {
    while (1)
    {
      v16 = *v14;
      v29 = *v14;
      v17 = *(uint64_t **)(a1 + 48);
      v18 = *((_DWORD *)v17 + 4);
      if (!v18)
        goto LABEL_30;
      v19 = *v17;
      v20 = v18 - 1;
      v21 = v20 & (37 * v16);
      v22 = *(_DWORD *)(v19 + 4 * v21);
      if ((_DWORD)v16 != v22)
        break;
LABEL_22:
      if (!sub_1C49781B4(*(uint64_t **)(a1 + 56), &v29)[1])
        goto LABEL_23;
LABEL_24:
      if (++v14 == v15)
        goto LABEL_32;
    }
    v23 = 1;
    while (v22 != -1)
    {
      v24 = v21 + v23++;
      v21 = v24 & v20;
      v22 = *(_DWORD *)(v19 + 4 * v21);
      if ((_DWORD)v16 == v22)
        goto LABEL_22;
    }
LABEL_30:
    if (sub_1C4977F34(v4, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24), v16, (uint64_t)__dst))goto LABEL_24;
LABEL_23:
    **(_DWORD **)(a1 + 8) = **(_DWORD **)(a1 + 32);
    goto LABEL_24;
  }
LABEL_32:
  v25 = sub_1C4914594(&__dst, 0, **(_DWORD **)(a1 + 40) + 1);
  if (v25 != -1)
  {
    v26 = sub_1C49796E4(*(_QWORD *)(v4 + 336), *(_DWORD *)(v4 + 352), v25);
    v27 = *(unsigned int **)(a1 + 8);
    v28 = v26[1] - 55;
    if (*v27 > v28)
      v28 = *v27;
    *v27 = v28;
  }
  if (__p)
  {
    v33 = (unsigned int *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v30[0], 4);
  if (__dst != v37)
    free(__dst);
}

uint64_t sub_1C4978558(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t (**v3)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E7FA68F8;
  v5 = v4;
  sub_1C4979518(a1, a2, (uint64_t)v4);
  result = (uint64_t)v5;
  if (v5 == v4)
  {
    v3 = (uint64_t (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      return result;
    v3 = (uint64_t (**)(void))(*v5 + 40);
  }
  return (*v3)();
}

_QWORD *sub_1C49785F4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4978834(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C49788CC(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5 + 1;
}

void sub_1C497868C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  _DWORD *v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;

  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      v6 = *(_DWORD *)(a1 + 16);
      if (!v6)
        break;
      v7 = v6 - 1;
      v8 = (37 * *v4) & v7;
      v9 = (_DWORD *)(*(_QWORD *)a1 + 4 * v8);
      v10 = *v9;
      if (*v4 != *v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -1)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -2;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = (_DWORD *)(*(_QWORD *)a1 + 4 * v8);
          v10 = *v9;
          if (*v4 == *v9)
            goto LABEL_36;
        }
        if (v11)
          v15 = v11;
        else
          v15 = v9;
        goto LABEL_18;
      }
LABEL_36:
      if (++v4 == a3)
        return;
    }
    v15 = 0;
LABEL_18:
    *sub_1C4978C80(a1, (uint64_t)v4, v4, v15) = *v4;
    v17 = *(char **)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v17 >= v16)
    {
      v19 = *(char **)(a1 + 24);
      v20 = (v17 - v19) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        abort();
      v22 = v16 - (_QWORD)v19;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 62)
          sub_1C4764EE4();
        v24 = (char *)operator new(4 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = *v4;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = v18;
      *(_QWORD *)(a1 + 40) = &v24[4 * v23];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v17 = *v4;
      v18 = v17 + 4;
    }
    *(_QWORD *)(a1 + 32) = v18;
    goto LABEL_36;
  }
}

uint64_t sub_1C4978834(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 200 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 200 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C49788CC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _OWORD *v24;
  int v25;
  int v26;
  _OWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v37 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(200 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = 200 * v15;
      do
      {
        *v14 = -4096;
        v14 += 25;
        v16 -= 200;
      }
      while (v16);
    }
    if (v6)
    {
      v17 = 0;
      v18 = 200 * v6;
      do
      {
        v19 = *(_QWORD *)(v9 + v17);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v38 = 0;
          sub_1C4978834(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v38);
          v20 = v38;
          v21 = v9 + v17;
          *(_DWORD *)(v38 + 24) = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)v20 = v19;
          *(_QWORD *)(v20 + 8) = *(_QWORD *)(v9 + v17 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v9 + v17 + 16);
          *(_DWORD *)(v21 + 16) = 0;
          v22 = *(_DWORD *)(v20 + 20);
          *(_DWORD *)(v20 + 20) = *(_DWORD *)(v9 + v17 + 20);
          *(_DWORD *)(v21 + 20) = v22;
          v23 = *(_DWORD *)(v20 + 24);
          *(_DWORD *)(v20 + 24) = *(_DWORD *)(v9 + v17 + 24);
          *(_DWORD *)(v21 + 24) = v23;
          *(_QWORD *)(v20 + 32) = 0;
          *(_QWORD *)(v20 + 40) = 0;
          *(_QWORD *)(v20 + 48) = 0;
          v24 = (_OWORD *)(v9 + v17 + 32);
          *(_OWORD *)(v20 + 32) = *v24;
          *(_QWORD *)(v20 + 48) = *(_QWORD *)(v9 + v17 + 48);
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v21 + 40) = 0;
          *(_QWORD *)(v21 + 48) = 0;
          *(_QWORD *)(v20 + 56) = 0;
          *(_QWORD *)(v20 + 64) = 0;
          *(_DWORD *)(v20 + 72) = 0;
          *(_QWORD *)(v20 + 56) = *(_QWORD *)(v9 + v17 + 56);
          *(_QWORD *)(v21 + 56) = 0;
          *(_DWORD *)(v20 + 64) = *(_DWORD *)(v9 + v17 + 64);
          *(_DWORD *)(v21 + 64) = 0;
          v25 = *(_DWORD *)(v20 + 68);
          *(_DWORD *)(v20 + 68) = *(_DWORD *)(v9 + v17 + 68);
          *(_DWORD *)(v21 + 68) = v25;
          v26 = *(_DWORD *)(v20 + 72);
          *(_DWORD *)(v20 + 72) = *(_DWORD *)(v9 + v17 + 72);
          *(_DWORD *)(v21 + 72) = v26;
          *(_QWORD *)(v20 + 80) = 0;
          *(_QWORD *)(v20 + 88) = 0;
          *(_QWORD *)(v20 + 96) = 0;
          v27 = (_OWORD *)(v9 + v17 + 80);
          *(_OWORD *)(v20 + 80) = *v27;
          *(_QWORD *)(v20 + 96) = *(_QWORD *)(v9 + v17 + 96);
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v21 + 88) = 0;
          *(_QWORD *)(v21 + 96) = 0;
          *(_QWORD *)(v20 + 104) = 0;
          *(_QWORD *)(v20 + 112) = 0;
          *(_DWORD *)(v20 + 120) = 0;
          *(_QWORD *)(v20 + 104) = *(_QWORD *)(v9 + v17 + 104);
          *(_QWORD *)(v21 + 104) = 0;
          *(_DWORD *)(v20 + 112) = *(_DWORD *)(v9 + v17 + 112);
          *(_DWORD *)(v21 + 112) = 0;
          v28 = *(_DWORD *)(v20 + 116);
          *(_DWORD *)(v20 + 116) = *(_DWORD *)(v9 + v17 + 116);
          *(_DWORD *)(v21 + 116) = v28;
          v29 = *(_DWORD *)(v20 + 120);
          *(_DWORD *)(v20 + 120) = *(_DWORD *)(v9 + v17 + 120);
          *(_DWORD *)(v21 + 120) = v29;
          *(_QWORD *)(v20 + 128) = 0;
          *(_QWORD *)(v20 + 136) = 0;
          *(_QWORD *)(v20 + 144) = 0;
          *(_OWORD *)(v20 + 128) = *(_OWORD *)(v9 + v17 + 128);
          *(_QWORD *)(v20 + 144) = *(_QWORD *)(v9 + v17 + 144);
          *(_QWORD *)(v21 + 128) = 0;
          *(_QWORD *)(v21 + 136) = 0;
          *(_QWORD *)(v21 + 144) = 0;
          *(_QWORD *)(v20 + 152) = 0;
          *(_QWORD *)(v20 + 160) = 0;
          *(_DWORD *)(v20 + 168) = 0;
          *(_QWORD *)(v20 + 152) = *(_QWORD *)(v9 + v17 + 152);
          *(_QWORD *)(v21 + 152) = 0;
          *(_DWORD *)(v20 + 160) = *(_DWORD *)(v9 + v17 + 160);
          *(_DWORD *)(v21 + 160) = 0;
          v30 = *(_DWORD *)(v20 + 164);
          *(_DWORD *)(v20 + 164) = *(_DWORD *)(v9 + v17 + 164);
          *(_DWORD *)(v21 + 164) = v30;
          v31 = *(_DWORD *)(v20 + 168);
          *(_DWORD *)(v20 + 168) = *(_DWORD *)(v9 + v17 + 168);
          *(_DWORD *)(v21 + 168) = v31;
          *(_QWORD *)(v20 + 176) = 0;
          *(_QWORD *)(v20 + 184) = 0;
          *(_QWORD *)(v20 + 192) = 0;
          *(_OWORD *)(v20 + 176) = *(_OWORD *)(v9 + v17 + 176);
          *(_QWORD *)(v20 + 192) = *(_QWORD *)(v9 + v17 + 192);
          *(_QWORD *)(v21 + 176) = 0;
          *(_QWORD *)(v21 + 184) = 0;
          *(_QWORD *)(v21 + 192) = 0;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + v17 + 152), 4);
          v32 = *(void **)(v9 + v17 + 128);
          if (v32)
          {
            *(_QWORD *)(v21 + 136) = v32;
            operator delete(v32);
          }
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v21 + 104), 4);
          v33 = *(void **)v27;
          if (*(_QWORD *)v27)
          {
            *(_QWORD *)(v21 + 88) = v33;
            operator delete(v33);
          }
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v21 + 56), 4);
          v34 = *(void **)v24;
          if (*(_QWORD *)v24)
          {
            *(_QWORD *)(v21 + 40) = v34;
            operator delete(v34);
          }
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v21 + 8), 4);
        }
        v17 += 200;
      }
      while (v18 != v17);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v35 = *(_DWORD *)(a1 + 16);
    if (v35)
    {
      v36 = 0;
      do
      {
        v14[v36] = -4096;
        v36 += 25;
      }
      while (25 * v35 != v36);
    }
  }
  sub_1C4978834((uint64_t)v14, v35, *a2, &v37);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v37;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C4978C80(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v8;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4978DF8(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C4978DF8(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_10:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *sub_1C4978DF8(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(4 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4978EB4((_QWORD *)a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, 4 * v10);
  return result;
}

_QWORD *sub_1C4978EB4(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v5 = result;
  result[1] = 0;
  v6 = (char *)*result;
  v7 = *((unsigned int *)result + 4);
  if ((_DWORD)v7)
    result = memset((void *)*result, 255, 4 * v7);
  for (; a2 != a3; ++a2)
  {
    v8 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v9 = *((_DWORD *)v5 + 4) - 1;
      v10 = v9 & (37 * v8);
      v11 = &v6[4 * v10];
      v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        v13 = 0;
        v14 = 1;
        while (v12 != -1)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v12 == -2;
          if (v15)
            v13 = v11;
          v16 = v10 + v14++;
          v10 = v16 & v9;
          v11 = &v6[4 * (v16 & v9)];
          v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11)
            goto LABEL_10;
        }
        if (v13)
          v11 = v13;
      }
LABEL_10:
      *(_DWORD *)v11 = v8;
      ++*((_DWORD *)v5 + 2);
    }
  }
  return result;
}

_DWORD *sub_1C4978FA0(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4979058(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4979058(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_11;
        }
        if (v12)
          v10 = v12;
      }
LABEL_11:
      *v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

void *sub_1C4979128(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 4);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(4 * v5, (std::align_val_t)4uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 4 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_1C4979194(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 62)
      abort();
    v7 = result;
    result = operator new(4 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

_DWORD *sub_1C4979214(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v8;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C497938C(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C497938C(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_20:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C497938C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4979444(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4979444(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_11;
        }
        if (v12)
          v10 = v12;
      }
LABEL_11:
      *v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

int *sub_1C4979518(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int *result;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if ((a2 & 0x80000000) != 0)
  {
    v5 = (_QWORD *)a1[6];
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1[7] + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v5 = (_QWORD *)a1[6];
    v6 = (uint64_t **)v5[30];
    v7 = (uint64_t **)v5[31];
    if (v6 == v7)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        if (a2 - 0x40000000 >= 0xC0000001)
        {
          v9 = **v6;
          if (a2 >> 3 < *(unsigned __int16 *)(v9 + 22)
            && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v9 + 8) + (a2 >> 3))) != 0
            && (!v8
             || *v6 != v8
             && ((*(_DWORD *)(v8[1] + ((*(unsigned __int16 *)(v9 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v9 + 24)) & 1) != 0))
          {
            v8 = *v6;
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
  }
  v10 = *(_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v5 + 280))(v5, v8);
  result = (int *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1[6] + 320))(a1[6], v8);
  v12 = *result;
  if (*result != -1)
  {
    v13 = result + 1;
    do
    {
      v14 = *a1;
      v17 = v10;
      v15 = *(_QWORD *)(a3 + 24);
      if (!v15)
      {
        sub_1C485C2F0();
        JUMPOUT(0x1C497967CLL);
      }
      result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v15 + 48))(v15, v14 + 4 * v12, &v17);
      v16 = *v13++;
      v12 = v16;
    }
    while (v16 != -1);
  }
  return result;
}

void sub_1C4979680()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4979694()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E7FA68B0;
  return result;
}

void sub_1C49796B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E7FA68B0;
}

void sub_1C49796D0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 += *a3;
}

int *sub_1C49796E4(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v7;
  int v8;

  if (!a2)
    return (int *)(a1 + 8 * a2);
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  v4 = (int *)(a1 + 8 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v7 = 1;
    while (v5 != -1)
    {
      v8 = v3 + v7++;
      v3 = v8 & (a2 - 1);
      v5 = *(_DWORD *)(a1 + 8 * v3);
      if (v5 == a3)
        return (int *)(a1 + 8 * v3);
    }
    return (int *)(a1 + 8 * a2);
  }
  return v4;
}

uint64_t sub_1C4979748(int32x2_t *a1, _DWORD *a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;

  v2 = a1[2].i32[0];
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    LODWORD(v5) = (37 * *a2) & (v2 - 1);
    v6 = (int *)(*(_QWORD *)a1 + 4 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_7:
      *v6 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    v8 = 1;
    while (v7 != -1)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v7 = *(_DWORD *)(*(_QWORD *)&v3 + 4 * v5);
      if (*a2 == v7)
      {
        v6 = (int *)(*(_QWORD *)&v3 + 4 * v5);
        goto LABEL_7;
      }
    }
  }
  return 0;
}

void sub_1C49797D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49797E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA68F8;
  return result;
}

void sub_1C4979808(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA68F8;
}

void sub_1C4979820(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 -= *a3;
}

__n128 sub_1C4979834(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7EBCE0, "agx2-set-spill-to-lm-tgt-print-regpressure", 0x2AuLL);
  word_1ED7EBCEA = (32 * (*a1 & 3)) | word_1ED7EBCEA & 0xFF9F;
  result = *a2;
  xmmword_1ED7EBD00 = (__int128)*a2;
  v7 = *a3;
  byte_1ED7EBD60 = **a3;
  byte_1ED7EBD71 = 1;
  byte_1ED7EBD70 = *v7;
  return result;
}

uint64_t sub_1C49798B8()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v3.n128_u64[0] = (unint64_t)"Option to set the threadgroup size for the Set Spill to LM Target pass";
  v3.n128_u64[1] = 70;
  v4 = 0;
  v1 = 0;
  v2 = &v1;
  sub_1C614835C((__int128 *)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7EB860, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Minimum number of registers we allocate for functions we don't know when processing"
                                     " the representative function (cprog in particular)";
  v3.n128_u64[1] = 133;
  v4 = 0;
  v1 = 16;
  v2 = &v1;
  sub_1C6148430((__int128 *)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7EB920, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Number of memory slots (1 slot == 4 Bytes) we should give to account for spilling h"
                                     "euristic imperfection.";
  v3.n128_u64[1] = 105;
  v4 = 0;
  v1 = 3;
  v2 = &v1;
  sub_1C6148504((__int128 *)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7EB9E0, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Occupancy limit in percent over which the shaders are not even considered for spilling to LM";
  v3.n128_u64[1] = 92;
  LODWORD(v2) = 0;
  sub_1C61485D8((__int128 *)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7EBAA0, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Enable the handling of unspillable live-range (unsafe)";
  v3.n128_u64[1] = 54;
  LODWORD(v2) = 0;
  sub_1C6148690((__int128 *)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EBB60, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the full liveness information";
  v3.n128_u64[1] = 35;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EBC20, "agx2-set-spill-to-lm-tgt-print-liveness", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EBC20, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the full regpressure information";
  v3.n128_u64[1] = 38;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148748(&v4, &v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EBCE0, &dword_1C475E000);
}

uint64_t sub_1C4979AB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 == 104)
  {
    switch(*(_DWORD *)(a4 + 28))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        v4 = *(_QWORD *)(a3 + 32);
        if (*(_BYTE *)v4
          || *(_BYTE *)(v4 + 32)
          || (*(_DWORD *)(v4 + 4) - 1) < 0x3FFFFFFF
          || (*(_DWORD *)(v4 + 36) - 1) <= 0x3FFFFFFE)
        {
          return 107;
        }
        else
        {
          return 106;
        }
      default:
        break;
    }
  }
  llvm::report_fatal_error((llvm *)"Expected a variant SchedClass", (const char *)1);
}

uint64_t sub_1C4979B4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 416);
}

uint64_t sub_1C4979B54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 424);
}

uint64_t sub_1C4979B5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 432);
}

uint64_t sub_1C4979B64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 440);
}

uint64_t sub_1C4979B6C(int a1, uint64_t a2, char *__s, int *a4)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  void ***p_dst;
  uint64_t result;
  uint64_t v23;
  void ***v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  _QWORD *v34;
  char *v35;
  void *v36;
  char *v37;
  BOOL v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  unint64_t v47;
  void ***v48;
  size_t v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  _QWORD *v57;
  char *v58;
  void *v59;
  char *v60;
  _BOOL4 v63;
  size_t v64;
  unint64_t v65;
  void **v66;
  size_t v67;
  void ***v69;
  unint64_t v70;
  size_t v71;
  unint64_t v73;
  unint64_t v74;
  void ***v75;
  size_t v76;
  unint64_t v77;
  void ***v78;
  size_t v79;
  unint64_t v80;
  void ***v81;
  size_t v82;
  int v83;
  unint64_t v84;
  void ***v85;
  size_t v86;
  int v87;
  size_t v88;
  unsigned int v89;
  size_t v90;
  unint64_t v91;
  void **j;
  int v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  _QWORD *v97;
  size_t v98;
  int64_t v99;
  void **__dst;
  size_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(a2 + 112);
  if (__s)
  {
    v7 = strlen(__s);
    if (!v6)
      goto LABEL_24;
  }
  else
  {
    v7 = 0;
    if (!v6)
    {
LABEL_24:
      result = 0;
      *a4 = 0;
      return result;
    }
  }
  if (!*(_DWORD *)(v6 + 8))
    goto LABEL_24;
  v8 = *(_QWORD *)(v6 + 40);
  if (!v8)
    goto LABEL_24;
  v9 = *(_DWORD *)(v8 + 40);
  if (!v9)
    goto LABEL_24;
  v10 = *(_QWORD *)(v8 + 24);
  v11 = sub_1C5E3DF4C(__s, (uint64_t)&__s[v7]);
  v12 = v9 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = v10 + 24 * (v11 & v12);
    v16 = *(const void **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if (__s == (char *)-1)
        goto LABEL_19;
      goto LABEL_11;
    }
    if (v16 != (const void *)-2)
      break;
    if (__s == (char *)-2)
      goto LABEL_19;
LABEL_11:
    if (v16 == (const void *)-1)
      goto LABEL_24;
    v11 = i + v14;
  }
  if (v7 != *(_QWORD *)(v15 + 8) || v7 && memcmp(__s, *(const void **)v15, v7))
    goto LABEL_11;
LABEL_19:
  v17 = *(_QWORD *)(v15 + 16);
  *a4 = -1;
  if (!v17 || *(_BYTE *)(v17 + 8) != 2)
    goto LABEL_24;
  v18 = v17 + 24;
  v20 = *(unsigned int *)(v17 + 12);
  v19 = *(unsigned int *)(v17 + 16);
  if (v19 >= 0x17)
  {
    if ((v19 | 7) == 0x17)
      v23 = (v19 & 0xFFFFFFF8) + 8;
    else
      v23 = v19 | 7;
    p_dst = (void ***)operator new(v23 + 1);
    v101 = v19;
    v102 = v23 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = (void **)p_dst;
    goto LABEL_30;
  }
  HIBYTE(v102) = *(_DWORD *)(v17 + 16);
  p_dst = &__dst;
  if ((_DWORD)v19)
LABEL_30:
    memmove(p_dst, (const void *)(v18 + v20 + 1), v19);
  *((_BYTE *)p_dst + v19) = 0;
  if (v102 >= 0)
    v24 = &__dst;
  else
    v24 = (void ***)__dst;
  if (v102 >= 0)
    v25 = HIBYTE(v102) & 0x7F;
  else
    v25 = v101;
  for (; v25; --v25)
  {
    *(_BYTE *)v24 = __tolower(*(char *)v24);
    v24 = (void ***)((char *)v24 + 1);
  }
  v26 = strlen(__s);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_229;
  v27 = v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    v98 = v27;
    v99 = v30 | 0x8000000000000000;
    v97 = v28;
    goto LABEL_46;
  }
  HIBYTE(v99) = v26;
  v28 = &v97;
  if (v26)
LABEL_46:
    memcpy(v28, __s, v27);
  *((_BYTE *)v28 + v27) = 0;
  v31 = HIBYTE(v99);
  v32 = SHIBYTE(v99);
  v33 = v97;
  if (v99 >= 0)
  {
    v34 = &v97;
  }
  else
  {
    v31 = v98;
    v34 = v97;
  }
  v35 = (char *)v34 + v31;
  if (v31 >= 8)
  {
    v36 = v34;
    do
    {
      v37 = (char *)memchr(v36, 67, v31 - 7);
      if (!v37)
        break;
      if (*(_QWORD *)v37 == 0x6C74436568636143)
        goto LABEL_56;
      v36 = v37 + 1;
      v31 = v35 - (_BYTE *)v36;
    }
    while (v35 - (_BYTE *)v36 > 7);
  }
  v37 = v35;
LABEL_56:
  v39 = v37 == v35 || v37 - (char *)v34 == -1;
  if (v32 < 0)
    operator delete(v33);
  if (!v39)
  {
    v43 = SHIBYTE(v102);
    v44 = v101;
    v45 = HIBYTE(v102) & 0x7F;
    if (v102 >= 0)
      v46 = HIBYTE(v102) & 0x7F;
    else
      v46 = v101;
    if (v46 != 11)
      goto LABEL_156;
    if (v102 >= 0)
      v47 = HIBYTE(v102);
    else
      v47 = v101;
    if (v102 >= 0)
      v48 = &__dst;
    else
      v48 = (void ***)__dst;
    if (v47 >= 0xB)
      v49 = 11;
    else
      v49 = v47;
    if (!memcmp(v48, "cacl1_cacl2", v49) && v47 == 11)
      *a4 = 0;
    if (!memcmp(v48, "bypl1_cacl2", v49) && v47 == 11)
      *a4 = 1;
    if (memcmp(v48, "bypl1_bypl2", v49) || v47 != 11)
      goto LABEL_156;
    v51 = 3;
    goto LABEL_155;
  }
  v40 = strlen(__s);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
LABEL_229:
    abort();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v52 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v52 = v40 | 7;
    v53 = v52 + 1;
    v42 = operator new(v52 + 1);
    v98 = v41;
    v99 = v53 | 0x8000000000000000;
    v97 = v42;
    goto LABEL_97;
  }
  HIBYTE(v99) = v40;
  v42 = &v97;
  if (v40)
LABEL_97:
    memcpy(v42, __s, v41);
  *((_BYTE *)v42 + v41) = 0;
  v54 = HIBYTE(v99);
  v55 = SHIBYTE(v99);
  v56 = v97;
  if (v99 >= 0)
  {
    v57 = &v97;
  }
  else
  {
    v54 = v98;
    v57 = v97;
  }
  v58 = (char *)v57 + v54;
  if (v54 >= 6)
  {
    v59 = v57;
    do
    {
      v60 = (char *)memchr(v59, 76, v54 - 5);
      if (!v60)
        break;
      if (*(_DWORD *)v60 == 1699754572 && *((_WORD *)v60 + 2) == 29554)
        goto LABEL_110;
      v59 = v60 + 1;
      v54 = v58 - (_BYTE *)v59;
    }
    while (v58 - (_BYTE *)v59 > 5);
  }
  v60 = v58;
LABEL_110:
  v63 = v60 == v58 || v60 - (char *)v57 == -1;
  if (v55 < 0)
    operator delete(v56);
  v43 = SHIBYTE(v102);
  v44 = v101;
  if (v63)
  {
    v45 = HIBYTE(v102) & 0x7F;
    goto LABEL_156;
  }
  v45 = HIBYTE(v102) & 0x7F;
  if (v102 >= 0)
    v64 = HIBYTE(v102) & 0x7F;
  else
    v64 = v101;
  if (v64 != 4)
  {
    if (v64 == 3)
    {
      v65 = v102 >= 0 ? HIBYTE(v102) : v101;
      v66 = v102 >= 0 ? (void **)&__dst : __dst;
      v67 = v65 >= 3 ? 3 : v65;
      if (!memcmp(v66, "low", v67) && v65 == 3)
        *a4 = 0;
    }
    goto LABEL_156;
  }
  if (v102 >= 0)
    v69 = &__dst;
  else
    v69 = (void ***)__dst;
  if (v102 >= 0)
    v70 = HIBYTE(v102);
  else
    v70 = v101;
  if (v70 >= 4)
    v71 = 4;
  else
    v71 = v70;
  if (!memcmp(v69, "high", v71) && v70 == 4)
  {
    v51 = 1;
LABEL_155:
    *a4 = v51;
  }
LABEL_156:
  if (v43 >= 0)
    v73 = v45;
  else
    v73 = v44;
  switch(v73)
  {
    case 2uLL:
      if (v43 >= 0)
        v74 = v43;
      else
        v74 = v44;
      if (v43 >= 0)
        v75 = &__dst;
      else
        v75 = (void ***)__dst;
      if (v74 >= 2)
        v76 = 2;
      else
        v76 = v74;
      if (!memcmp(v75, "no", v76) && v74 == 2)
        goto LABEL_195;
      break;
    case 3uLL:
      if (v43 >= 0)
        v84 = v43;
      else
        v84 = v44;
      if (v43 >= 0)
        v85 = &__dst;
      else
        v85 = (void ***)__dst;
      if (v84 >= 3)
        v86 = 3;
      else
        v86 = v84;
      if (!memcmp(v85, "yes", v86) && v84 == 3)
        goto LABEL_207;
      break;
    case 4uLL:
      if (v43 >= 0)
        v77 = v43;
      else
        v77 = v44;
      if (v43 >= 0)
        v78 = &__dst;
      else
        v78 = (void ***)__dst;
      if (v77 >= 4)
        v79 = 4;
      else
        v79 = v77;
      if (!memcmp(v78, "true", v79) && v77 == 4)
      {
LABEL_207:
        v83 = 1;
        goto LABEL_208;
      }
      break;
    case 5uLL:
      if (v43 >= 0)
        v80 = v43;
      else
        v80 = v44;
      if (v43 >= 0)
        v81 = &__dst;
      else
        v81 = (void ***)__dst;
      if (v80 >= 5)
        v82 = 5;
      else
        v82 = v80;
      if (!memcmp(v81, "false", v82) && v80 == 5)
      {
LABEL_195:
        v83 = 0;
LABEL_208:
        *a4 = v83;
      }
      break;
    default:
      break;
  }
  if (v43 < 0)
    operator delete(__dst);
  if (*a4 != -1)
    return 1;
  result = 0;
  v87 = *(unsigned __int8 *)(v17 + 8);
  *a4 = 0;
  if (v87 == 2)
  {
    v88 = *(unsigned int *)(v17 + 16);
    __dst = (void **)(v18 + *(unsigned int *)(v17 + 12) + 1);
    v101 = v88;
    v89 = sub_1C5E3D4C0((uint64_t)&__dst);
    v90 = v101;
    if (v101)
    {
      v91 = 0;
      for (j = __dst; ; j = (void **)((char *)j + 1))
      {
        v93 = *(unsigned __int8 *)j;
        if ((v93 - 48) >= 0xA)
        {
          if ((v93 - 97) >= 0x1A)
          {
            if ((v93 - 65) > 0x19)
              return 0;
            v94 = -55;
          }
          else
          {
            v94 = -87;
          }
        }
        else
        {
          v94 = -48;
        }
        v95 = v94 + v93;
        if (v95 >= v89)
          break;
        v96 = v91 * v89 + v95;
        if (v96 / v89 < v91)
          break;
        v91 = v96;
        if (!--v90)
        {
          if (HIDWORD(v96))
            return 0;
          *a4 = v96;
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C497A2CC(uint64_t a1)
{
  return a1 + 456;
}

uint64_t sub_1C497A2D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 448);
}

uint64_t sub_1C497A2DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928);
}

uint64_t sub_1C497A2E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) + 88;
}

uint64_t sub_1C497A304()
{
  return 1;
}

uint64_t sub_1C497A30C()
{
  return 0;
}

uint64_t sub_1C497A314(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 281);
}

uint64_t sub_1C497A31C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 1042) & 8) != 0)
    return llvm::TargetFrameLowering::isSafeForNoCSROpt(*(llvm::TargetFrameLowering **)a2, (const llvm::Function *)a2);
  else
    return 0;
}

void sub_1C497A338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E7FA6940;
  v2 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)(a1 + 928) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1C613A688((_QWORD *)(a1 + 456));
  v3 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo((void **)a1);
}

double sub_1C497A40C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  double result;

  v2 = sub_1C484358C(a2, 480, 3);
  *(_DWORD *)(v2 + 8) = -1;
  *(_BYTE *)(v2 + 12) = 0;
  *(_QWORD *)v2 = &off_1E7FA44E8;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 0x1000000000;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = v2 + 224;
  *(_QWORD *)&result = 0xA00000000;
  *(_QWORD *)(v2 + 216) = 0xA00000000;
  *(_BYTE *)(v2 + 432) = 0;
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 400) = 0;
  *(_DWORD *)(v2 + 424) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 440) = 0;
  *(_QWORD *)(v2 + 448) = 0;
  *(_BYTE *)(v2 + 456) = 0;
  *(_QWORD *)(v2 + 460) = 0xFFFFFFFFLL;
  *(_BYTE *)(v2 + 468) = 0;
  *(_BYTE *)(v2 + 472) = 0;
  return result;
}

uint64_t sub_1C497A4AC()
{
  return 1;
}

llvm::ScheduleDAGInstrs *sub_1C497A4D0(uint64_t a1, uint64_t a2)
{
  if (byte_1ED7EBFA0)
    return sub_1C614D55C(a2);
  else
    return (llvm::ScheduleDAGInstrs *)sub_1C49691FC(a2);
}

uint64_t sub_1C497A4E8(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unsigned int v9;
  int j;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unsigned int v21;
  int i;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v31;
  unsigned int v32;
  std::string::size_type v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  void *p_p;
  uint64_t v40;
  int v41;
  size_t v42;
  const std::string::value_type *v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  size_t size;
  unsigned int v55;
  int v56;
  size_t v57;
  std::string *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v76;
  _QWORD *v77;
  __int128 *v78;
  size_t v79;
  void **v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  size_t *v85;
  char *v86;
  _QWORD **k;
  BOOL v88;
  llvm::StringMapImpl *v89;
  std::string *__s1;
  std::string v92;
  __int128 v93;
  uint64_t v94;
  void *__p;
  size_t v96;
  uint64_t v97;
  std::string v98;
  void *v99[2];
  uint64_t v100;
  __int128 __dst;
  uint64_t v102;

  v3 = *((_QWORD *)a2 + 14);
  if (!v3 || !*(_DWORD *)(v3 + 8))
  {
    v27 = 0;
    goto LABEL_50;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4 || (v5 = *(_DWORD *)(v4 + 40)) == 0)
  {
    v15 = 0;
LABEL_23:
    v16 = *(_QWORD *)(v3 + 40);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 40);
      if (v17)
      {
        v18 = *(_QWORD *)(v16 + 24);
        v19 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v73 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v73 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v73;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v20 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                                   * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
        v21 = (-348639895 * ((v20 >> 47) ^ v20)) ^ 0x74616566;
        for (i = 1; ; ++i)
        {
          v23 = v21 & (v17 - 1);
          v24 = v18 + 24 * v23;
          v25 = *(_QWORD **)v24;
          if (*(_QWORD *)v24 == -1)
          {
            if ("target-features" == (char *)-1)
              goto LABEL_40;
          }
          else if (v25 == (_QWORD *)-2)
          {
            if ("target-features" == (char *)-2)
              goto LABEL_40;
          }
          else if (*(_QWORD *)(v24 + 8) == 15
                 && *v25 == 0x662D746567726174
                 && *(_QWORD *)((char *)v25 + 7) == 0x7365727574616566)
          {
LABEL_40:
            v27 = *(_QWORD *)(v24 + 16);
            goto LABEL_42;
          }
          if (v25 == (_QWORD *)-1)
            goto LABEL_41;
          v21 = i + v23;
        }
      }
    }
    goto LABEL_41;
  }
  v6 = *(_QWORD *)(v4 + 24);
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v72 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v72 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v72;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x74656772;
  for (j = 1; ; ++j)
  {
    v11 = v9 & (v5 - 1);
    v12 = (uint64_t *)(v6 + 24 * v11);
    v13 = *v12;
    if (*v12 == -1)
    {
      if ("target-cpu" == (char *)-1)
        goto LABEL_20;
    }
    else if (v13 == -2)
    {
      if ("target-cpu" == (char *)-2)
        goto LABEL_20;
    }
    else if (v12[1] == 10 && *(_QWORD *)v13 == 0x632D746567726174 && *(_WORD *)(v13 + 8) == 30064)
    {
LABEL_20:
      v15 = v12[2];
      goto LABEL_22;
    }
    if (v13 == -1)
      break;
    v9 = j + v11;
  }
  v15 = 0;
LABEL_22:
  if (*(_DWORD *)(v3 + 8))
    goto LABEL_23;
LABEL_41:
  v27 = 0;
LABEL_42:
  if (v15)
  {
    if (*(_BYTE *)(v15 + 8) == 2)
    {
      v28 = *(_DWORD *)(v15 + 12);
      goto LABEL_46;
    }
    v28 = *(_DWORD *)(v15 + 12);
    if (v28)
    {
LABEL_46:
      v29 = *(unsigned int *)(v15 + 16);
      if (v29 >= 0x17)
      {
        if ((v29 | 7) == 0x17)
          v31 = (v29 & 0xFFFFFFF8) + 8;
        else
          v31 = v29 | 7;
        p_dst = (__int128 *)operator new(v31 + 1);
        *((_QWORD *)&__dst + 1) = v29;
        v102 = v31 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v102) = *(_DWORD *)(v15 + 16);
        p_dst = &__dst;
        if (!(_DWORD)v29)
        {
LABEL_60:
          *((_BYTE *)p_dst + v29) = 0;
          if (!v27)
            goto LABEL_67;
          goto LABEL_61;
        }
      }
      memmove(p_dst, (const void *)(v15 + v28 + 25), v29);
      goto LABEL_60;
    }
  }
LABEL_50:
  if (*(char *)(a1 + 519) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a1 + 496), *(_QWORD *)(a1 + 504));
    if (!v27)
      goto LABEL_67;
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 496);
    v102 = *(_QWORD *)(a1 + 512);
    if (!v27)
      goto LABEL_67;
  }
LABEL_61:
  if (*(_BYTE *)(v27 + 8) == 2)
  {
    v32 = *(_DWORD *)(v27 + 12);
    goto LABEL_64;
  }
  v32 = *(_DWORD *)(v27 + 12);
  if (v32)
  {
LABEL_64:
    v33 = *(unsigned int *)(v27 + 16);
    v34 = v27 + 24;
    if (v33 >= 0x17)
    {
      if ((v33 | 7) == 0x17)
        v36 = (v33 & 0xFFFFFFF8) + 8;
      else
        v36 = v33 | 7;
      v35 = operator new(v36 + 1);
      v98.__r_.__value_.__l.__size_ = v33;
      v98.__r_.__value_.__r.__words[2] = v36 - 0x7FFFFFFFFFFFFFFFLL;
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    }
    else
    {
      *((_BYTE *)&v98.__r_.__value_.__s + 23) = *(_DWORD *)(v27 + 16);
      v35 = &v98;
      if (!(_DWORD)v33)
      {
LABEL_74:
        v35[v33] = 0;
        v37 = *(unsigned int *)(v27 + 12);
        v38 = *(unsigned int *)(v27 + 16);
        if (v38 >= 0x17)
        {
          if ((v38 | 7) == 0x17)
            v40 = (v38 & 0xFFFFFFF8) + 8;
          else
            v40 = v38 | 7;
          p_p = operator new(v40 + 1);
          v96 = v38;
          v97 = v40 - 0x7FFFFFFFFFFFFFFFLL;
          __p = p_p;
        }
        else
        {
          HIBYTE(v97) = *(_DWORD *)(v27 + 16);
          p_p = &__p;
          if (!(_DWORD)v38)
          {
LABEL_82:
            *((_BYTE *)p_p + v38) = 0;
            v41 = SHIBYTE(v97);
            v42 = HIBYTE(v97) & 0x7F;
            if (v97 < 0)
              v42 = v96;
            if (v42)
              v43 = ",";
            else
              v43 = "";
            v44 = std::string::append(&v98, v43);
            v45 = v44->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
            v92.__r_.__value_.__r.__words[2] = v45;
            v44->__r_.__value_.__l.__size_ = 0;
            v44->__r_.__value_.__r.__words[2] = 0;
            v44->__r_.__value_.__r.__words[0] = 0;
            v46 = *(_BYTE *)(a1 + 543);
            v47 = v46;
            if (v46 >= 0)
              v48 = (const std::string::value_type *)(a1 + 520);
            else
              v48 = *(const std::string::value_type **)(a1 + 520);
            v49 = v46 & 0x7F;
            if (v47 >= 0)
              v50 = v49;
            else
              v50 = *(_QWORD *)(a1 + 528);
            v51 = std::string::append(&v92, v48, v50);
            v52 = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)v99 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v100 = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v92.__r_.__value_.__l.__data_);
              if ((v41 & 0x80000000) == 0)
                goto LABEL_95;
            }
            else if ((v41 & 0x80000000) == 0)
            {
              goto LABEL_95;
            }
            operator delete(__p);
LABEL_95:
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v98.__r_.__value_.__l.__data_);
            goto LABEL_100;
          }
        }
        memmove(p_p, (const void *)(v34 + v37 + 1), v38);
        goto LABEL_82;
      }
    }
    memmove(v35, (const void *)(v34 + v32 + 1), v33);
    goto LABEL_74;
  }
LABEL_67:
  if (*(char *)(a1 + 543) < 0)
  {
    sub_1C47EBC30(v99, *(void **)(a1 + 520), *(_QWORD *)(a1 + 528));
  }
  else
  {
    *(_OWORD *)v99 = *(_OWORD *)(a1 + 520);
    v100 = *(_QWORD *)(a1 + 536);
  }
LABEL_100:
  sub_1C4842EB8((const void **)&__dst, (const void **)v99, (uint64_t)&v92);
  v53 = (std::string *)v92.__r_.__value_.__r.__words[0];
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v92;
  __s1 = v53;
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v92.__r_.__value_.__l.__size_;
  v55 = *(_DWORD *)(a1 + 2272);
  if (!v55)
  {
    *(_QWORD *)(a1 + 2276) = 0;
    v71 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v71)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v71[16] = 2;
    *(_QWORD *)(a1 + 2264) = v71;
    v55 = 16;
    *(_DWORD *)(a1 + 2272) = 16;
  }
  v89 = (llvm::StringMapImpl *)(a1 + 2264);
  v56 = 0;
  if (size)
  {
    v57 = size;
    v58 = __s1;
    do
    {
      v59 = v58->__r_.__value_.__s.__data_[0];
      v58 = (std::string *)((char *)v58 + 1);
      v56 = 33 * v56 + v59;
      --v57;
    }
    while (v57);
  }
  v60 = a1;
  v61 = *(_QWORD *)(a1 + 2264);
  v62 = v55 - 1;
  v63 = v61 + 8 * v55 + 8;
  v64 = -1;
  v65 = 1;
  v66 = v56;
  while (1)
  {
    v67 = v66 & v62;
    v68 = *(_QWORD **)(v61 + 8 * v67);
    if (!v68)
      break;
    if (v68 == (_QWORD *)-8)
    {
      if (v64 == -1)
        v64 = v66 & v62;
    }
    else if (*(_DWORD *)(v63 + 4 * v67) == v56
           && size == *v68
           && (!size || !memcmp(__s1, (char *)v68 + *(unsigned int *)(v60 + 2284), size)))
    {
      goto LABEL_124;
    }
    v66 = v65 + v67;
    ++v65;
  }
  v69 = v64;
  if (v64 == -1)
  {
    v69 = v67;
    v67 = v67;
  }
  else
  {
    v67 = v64;
  }
  *(_DWORD *)(v63 + 4 * v69) = v56;
  v68 = *(_QWORD **)(v61 + 8 * v67);
LABEL_124:
  if (v68)
  {
    v70 = v60;
    if (v68 != (_QWORD *)-8)
      goto LABEL_138;
    --*(_DWORD *)(v60 + 2280);
  }
  v83 = v61;
  v84 = operator new(size + 17, (std::align_val_t)8uLL);
  v85 = v84;
  v86 = (char *)(v84 + 2);
  if (size)
    memcpy(v84 + 2, __s1, size);
  v86[size] = 0;
  *v85 = size;
  v85[1] = 0;
  *(_QWORD *)(v83 + 8 * v67) = v85;
  ++*(_DWORD *)(v60 + 2276);
  for (k = (_QWORD **)(*(_QWORD *)(v60 + 2264) + 8 * llvm::StringMapImpl::RehashTable(v89, v67)); ; ++k)
  {
    v68 = *k;
    v88 = !*k || v68 + 1 == 0;
    v70 = v60;
    if (!v88)
      break;
  }
LABEL_138:
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v74 = v68[1];
  if (!v74)
  {
    llvm::TargetMachine::resetTargetOptions((llvm::TargetMachine *)v70, a2);
    if (*(char *)(v70 + 471) < 0)
      sub_1C47EBC30(&v92, *(void **)(v70 + 448), *(_QWORD *)(v70 + 456));
    else
      v92 = *(std::string *)(v70 + 448);
    v94 = *(_QWORD *)(v70 + 488);
    v93 = *(_OWORD *)(v70 + 472);
    v76 = (_QWORD *)operator new();
    v77 = v76;
    if (v102 >= 0)
      v78 = &__dst;
    else
      v78 = (__int128 *)__dst;
    if (v102 >= 0)
      v79 = HIBYTE(v102) & 0x7F;
    else
      v79 = *((_QWORD *)&__dst + 1);
    if (v100 >= 0)
      v80 = v99;
    else
      v80 = (void **)v99[0];
    if (v100 >= 0)
      v81 = HIBYTE(v100) & 0x7F;
    else
      v81 = (size_t)v99[1];
    sub_1C6148FA8(v76, (__int128 *)&v92, v78, v79, v80, v81, (unsigned __int8 *)v70);
    v82 = v68[1];
    v68[1] = v77;
    if (v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    v74 = v68[1];
  }
  if (SHIBYTE(v100) < 0)
    operator delete(v99[0]);
  if (SHIBYTE(v102) < 0)
    operator delete((void *)__dst);
  return v74;
}

_QWORD *sub_1C497ADDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;

  v5 = *(_QWORD *)(a2 + 40) + 272;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  result = (_QWORD *)operator new();
  *result = &off_1E7FA6EB0;
  result[1] = &off_1E7FA6E58;
  result[2] = v5;
  result[3] = a1;
  result[4] = v6;
  result[5] = v7;
  *a3 = result;
  return result;
}

_QWORD *sub_1C497AE6C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E7FA7398;
  *a1 = result;
  return result;
}

void sub_1C497AEB0(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  const llvm::GPUIterateCombiner *v3;
  llvm::Pass *v4;
  llvm::Pass *GPUIterateCombinePass;
  llvm::Pass *v6;
  llvm::Pass *v7;
  void *__p[4];

  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6ED0);
  strcpy((char *)__p, "After codegen DCE pass");
  HIBYTE(__p[2]) = 22;
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v2 = (llvm::Pass *)sub_1C6139DF8();
  llvm::TargetPassConfig::addPass(a1, v2);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6F2A);
  if (byte_1ED7EC120)
  {
    v4 = (llvm::Pass *)operator new();
    sub_1C614CD7C((uint64_t)v4);
    llvm::TargetPassConfig::addPass(a1, v4);
    llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FEA);
  }
  if (!byte_1ED7EC1E0)
  {
    GPUIterateCombinePass = (llvm::Pass *)llvm::createGPUIterateCombinePass((llvm *)&off_1EF8EB088, v3);
    llvm::TargetPassConfig::addPass(a1, GPUIterateCombinePass);
  }
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FA0);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64632B0;
  strcpy((char *)__p[0], "After Machine LICM, CSE and Sinking passes");
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FB6);
  sub_1C6139E20();
  llvm::TargetPassConfig::addPass(a1, v6);
  v7 = (llvm::Pass *)sub_1C614C838();
  llvm::TargetPassConfig::addPass(a1, v7);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64632C0;
  strcpy((char *)__p[0], "After codegen peephole optimization pass");
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C497B088()
{
  return 1;
}

uint64_t sub_1C497B090(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1320);
}

uint64_t sub_1C497B098(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

uint64_t sub_1C497B0C0()
{
  return 0;
}

uint64_t sub_1C497B0C8()
{
  return 0;
}

uint64_t sub_1C497B0D0()
{
  return 0;
}

void sub_1C497B0D8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C497B0EC()
{
  return 1;
}

uint64_t sub_1C497B0F4()
{
  return 0;
}

uint64_t sub_1C497B0FC()
{
  return 150;
}

uint64_t sub_1C497B104(uint64_t a1, llvm::ShuffleVectorInst *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C497B808((uint64_t *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1C497B10C()
{
  return 2126008812;
}

BOOL sub_1C497B118(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1C497B124(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C497B138(uint64_t a1, uint64_t ***a2)
{
  return sub_1C4845148(a1 + 16, a2);
}

void sub_1C497B140(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  sub_1C495CB1C(a1 + 8, a2, a3, a4);
}

void sub_1C497B148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 1;
  *(_BYTE *)(a4 + 6) = 1;
}

uint64_t sub_1C497B15C()
{
  return 0;
}

uint64_t sub_1C497B168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;

  v4 = a1 + 8;
  v5 = *(unsigned int *)(a4 + 8);
  v15 = v5;
  if (v5 > 0x40)
  {
    v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v12 = a2;
    v13 = v4;
    v11 = a3;
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)a4, v8);
    a2 = v12;
    v4 = v13;
    a3 = v11;
  }
  else
  {
    v6 = *(void **)a4;
  }
  v14 = v6;
  result = sub_1C497FB8C(v4, a2, a3, (uint64_t)&v14);
  if (v15 >= 0x41)
  {
    if (v14)
    {
      v10 = result;
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      return v10;
    }
  }
  return result;
}

uint64_t sub_1C497B248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  void (**v19)(_QWORD *);
  size_t v21;
  _QWORD *v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v13 = a1 + 8;
  v14 = *(unsigned int *)(a4 + 8);
  v25 = v14;
  if (v14 > 0x40)
  {
    v21 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
    v23 = a8;
    v15 = (void *)operator new[]();
    memcpy(v15, *(const void **)a4, v21);
    a8 = v23;
  }
  else
  {
    v15 = *(void **)a4;
  }
  v24 = v15;
  v16 = (_QWORD *)a8[3];
  if (v16)
  {
    if (v16 == a8)
    {
      v27 = v26;
      (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v26);
    }
    else
    {
      v27 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    }
  }
  else
  {
    v27 = 0;
  }
  v17 = sub_1C497FC14(v13, a2, a3, (uint64_t)&v24, a5, a6, a7, v26);
  v18 = v27;
  if (v27 == v26)
  {
    v19 = (void (**)(_QWORD *))(v26[0] + 32);
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_9;
    v19 = (void (**)(_QWORD *))(*v27 + 40);
  }
  (*v19)(v18);
LABEL_9:
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return v17;
}

uint64_t sub_1C497B404()
{
  return 0;
}

uint64_t sub_1C497B40C()
{
  return 1;
}

uint64_t sub_1C497B414(uint64_t a1, llvm::EVT *a2, llvm::LLVMContext *a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ExtendedIntegerVT;
  uint64_t v15;

  if ((int)a3 <= 31)
  {
    switch((_DWORD)a3)
    {
      case 1:
        v10 = 0;
        v11 = 0;
        v12 = 2;
        return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
      case 0x10:
        v10 = 0;
        v11 = 0;
        v12 = 4;
        return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
      case 8:
        v10 = 0;
        v11 = 0;
        v12 = 3;
        return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
    }
LABEL_15:
    ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(a2, a3);
    v11 = v15;
    v10 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
    v12 = ExtendedIntegerVT;
    return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
  }
  if ((_DWORD)a3 != 32)
  {
    if ((_DWORD)a3 == 64)
    {
      v10 = 0;
      v11 = 0;
      v12 = 6;
      return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
    }
    if ((_DWORD)a3 == 128)
    {
      v10 = 0;
      v11 = 0;
      v12 = 7;
      return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
    }
    goto LABEL_15;
  }
  v10 = 0;
  v11 = 0;
  v12 = 5;
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
}

uint64_t sub_1C497B514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_1C47A7FD0(v2, *(_QWORD *)(a1 + 16), a2, 0);
  if (v3 && (v3 == 1 || *(_QWORD *)(v2 + 8 * v3 + 96)) && (v4 = *(char *)(v2 + 390 * v3 + 3958), v4 <= 4))
    return qword_1C6612948[v4];
  else
    return 4;
}

uint64_t sub_1C497B590(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  return 0;
}

__n128 sub_1C497B59C(uint64_t a1, int a2)
{
  __n128 result;

  sub_1C497CCA4(a1 + 8, a2);
  return result;
}

BOOL sub_1C497B5B4(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

uint64_t sub_1C497B5C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1C497D9E0(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C497B5D0()
{
  return 0;
}

BOOL sub_1C497B5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C495CA74(a1 + 8, a2, a3);
}

BOOL sub_1C497B5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4849AD0(a1 + 16, a2, a3);
}

BOOL sub_1C497B5E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a3, 0);
  if (!v5)
    return 0;
  return *(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1C497B65C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1C497B6C4()
{
  return 128;
}

uint64_t sub_1C497B6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  BOOL v7;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3
    && *(_QWORD *)(v3 + 56)
    && *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)) + 389))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a2 - 32);
  v5 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8);
  if ((v5 & 0xFFFFFF00) != 0x4000)
    return 1;
  v7 = sub_1C5E9DE14(v4, 0);
  result = 0;
  if (!v7)
    return 1;
  return result;
}

BOOL sub_1C497B768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = **(_QWORD **)(a2 - 32);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(v2 + 16) + 8);
  return (v3 & 0xFFFFFF00) != 0x4000;
}

BOOL sub_1C497B7A0(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1C5EAA084(a2, 1 << a3, a4);
}

BOOL sub_1C497B7B4(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1C5EAA084(a2, 1 << a3, a4);
}

uint64_t sub_1C497B7C8(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***this)
{
  return sub_1C5EAA0EC(a2, a3, this);
}

uint64_t sub_1C497B7DC(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***this)
{
  return sub_1C5EAA0EC(a2, a3, this);
}

uint64_t sub_1C497B7F0()
{
  return 0;
}

uint64_t sub_1C497B7F8()
{
  return 1;
}

BOOL sub_1C497B800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C495CB9C(a1 + 8, a2, a3);
}

uint64_t sub_1C497B808(uint64_t *a1, llvm::ShuffleVectorInst *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::ShuffleVectorInst *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  llvm::Type *****v19;
  llvm::Type ***v20;
  uint64_t v21;
  llvm::ShuffleVectorInst *v22;
  uint64_t v23;
  int8x8_t **v24;
  unsigned int CastContextHint;
  uint64_t v26;
  int v27;
  int8x8_t **v28;
  int v29;
  unint64_t v30;
  int8x8_t **v31;
  int v32;
  uint64_t v33;
  int8x8_t **v34;
  uint64_t v35;
  int8x8_t **v36;
  int8x8_t *v37;
  unint64_t v38;
  void *v39;
  BOOL v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value **v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const llvm::DataLayout *v63;
  llvm::TargetLoweringBase *v64;
  uint64_t v65;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  int *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  llvm::FixedVectorType *v86;
  char v87;
  char v88;
  uint64_t v89;
  int *v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int isInsertSubvectorMask;
  llvm::FixedVectorType *v100;
  char *v101;
  uint64_t v102;
  char v103[2];
  _DWORD v104[5];
  int v105[2];
  int8x8_t *v106;
  void *v107;
  uint64_t v108;
  int8x8_t *v109;
  int8x8_t *v110;
  uint64_t v111;
  void *v112;
  _QWORD v113[9];

  v113[7] = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)this + 16);
  v8 = v7 - 28;
  if (v7 < 0x1C)
    goto LABEL_16;
  if (v7 == 33 || v7 == 39)
    goto LABEL_9;
  if (v7 == 84)
  {
    v9 = *((_QWORD *)this - 4);
    if (!v9
      || *(_BYTE *)(v9 + 16)
      || *(_QWORD *)(v9 + 24) != *((_QWORD *)this + 9)
      || (v10 = this, (*(_BYTE *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      v11 = *((_QWORD *)this - 4);
      if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *((_QWORD *)this + 9))
      {
        if (v7 == 84)
        {
          v12 = 0;
        }
        else if (v7 == 39)
        {
          v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          v12 = 2;
        }
        v13 = 0;
        v14 = *((_DWORD *)this + 5);
        v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          v101 = (char *)this - 32 * (v14 & 0x7FFFFFF);
          v102 = *((_QWORD *)v101 - 1);
          if ((v102 & 0xFFFFFFFF0) != 0)
            v13 = *((_DWORD *)v101 - 3) - *(_DWORD *)&v101[-v102];
          else
            v13 = 0;
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1C4845148((uint64_t)a1, *((uint64_t ****)this - 4)))
        return *(unsigned int *)(*(_QWORD *)(v11 + 24) + 12);
      return 1;
    }
  }
  else
  {
LABEL_16:
    v10 = 0;
  }
  v17 = *((_DWORD *)this + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0)
      v19 = (llvm::Type *****)*((_QWORD *)this - 1);
    else
      v19 = (llvm::Type *****)((char *)this - 32);
    v20 = **v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5)
      return 1;
    v8 = *((unsigned __int16 *)this + 9);
  }
  if (v7 <= 0x1B)
    v22 = 0;
  else
    v22 = this;
  v16 = 0;
  v23 = (uint64_t)(a1 - 1);
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if ((_DWORD)a5)
        v40 = (_DWORD)v8 == 55;
      else
        v40 = 0;
      return !v40;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      v104[1] = 0;
      LODWORD(v106) = 0;
      if ((v17 & 0x40000000) != 0)
        v24 = (int8x8_t **)*((_QWORD *)this - 1);
      else
        v24 = (int8x8_t **)((char *)this - 32 * v18);
      llvm::TargetTransformInfo::getOperandInfo(*v24, (const llvm::Value *)&v104[1]);
      if ((_DWORD)v8 != 12)
      {
        v27 = *((_DWORD *)this + 5);
        if ((v27 & 0x40000000) != 0)
          v28 = (int8x8_t **)*((_QWORD *)this - 1);
        else
          v28 = (int8x8_t **)((char *)this - 32 * (v27 & 0x7FFFFFF));
        llvm::TargetTransformInfo::getOperandInfo(v28[4], (const llvm::Value *)&v106);
      }
      v29 = *((_DWORD *)this + 5);
      if ((v29 & 0x40000000) != 0)
      {
        v31 = (int8x8_t **)*((_QWORD *)this - 1);
        v30 = v29 & 0x7FFFFFF;
      }
      else
      {
        v30 = v29 & 0x7FFFFFF;
        v31 = (int8x8_t **)((char *)this - 32 * v30);
      }
      v107 = &v109;
      v108 = 0x200000000;
      if (v30 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)&v109, v30, 8);
        v32 = v108;
        v34 = (int8x8_t **)v107;
        v33 = v108;
      }
      else
      {
        v32 = 0;
        if (!v30)
          goto LABEL_48;
        v33 = 0;
        v34 = &v109;
      }
      v35 = 32 * v30;
      v36 = &v34[v33];
      do
      {
        v37 = *v31;
        v31 += 4;
        *v36++ = v37;
        v35 -= 32;
      }
      while (v35);
LABEL_48:
      LODWORD(v108) = v32 + v30;
      sub_1C497CCA4(v23, v8);
      v16 = v38;
      v39 = v107;
      if (v107 != &v109)
LABEL_49:
        free(v39);
      return v16;
    case 31:
      if (*(_BYTE *)(*((_QWORD *)this - 4) + 16) != 16)
        return 1;
      v42 = *((_QWORD *)this + 5);
      v43 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 80);
      v44 = v43 ? v43 - 24 : 0;
      return v42 != v44 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if ((_DWORD)a5 == 2)
      {
        v54 = *((_QWORD *)this + 1);
        if (v54)
        {
          if (!*(_QWORD *)(v54 + 8) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            v55 = *(_QWORD *)(v54 + 24);
            if (v55)
            {
              if (*(_BYTE *)(v55 + 16) == 66)
                v21 = *(_QWORD *)v55;
            }
          }
        }
      }
      v56 = **((_QWORD **)this - 4);
      v57 = *(_DWORD *)(v56 + 8);
      if ((v57 & 0xFE) == 0x12)
        v57 = *(_DWORD *)(**(_QWORD **)(v56 + 16) + 8);
      if ((_DWORD)a5)
        return 1;
      v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      v59 = v57 >> 8;
      v60 = (uint64_t)(a1 - 1);
      v61 = 32;
      v62 = v21;
      return sub_1C4832C7C(v60, v61, v62, v58, v59, 0);
    case 33:
      if ((v17 & 0x40000000) != 0)
        v53 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v53 = (uint64_t **)((char *)this - 32 * v18);
      v67 = **((_QWORD **)this - 4);
      v68 = *(_DWORD *)(v67 + 8);
      if ((v68 & 0xFE) == 0x12)
        v68 = *(_DWORD *)(**(_QWORD **)(v67 + 16) + 8);
      if ((_DWORD)a5)
        return 1;
      v62 = **v53;
      v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      v59 = v68 >> 8;
      v60 = (uint64_t)(a1 - 1);
      v61 = 33;
      return sub_1C4832C7C(v60, v61, v62, v58, v59, 0);
    case 34:
      v40 = v7 == 62;
      v45 = 24;
      if (v40)
        v45 = 64;
      v46 = *(_QWORD *)((char *)this + v45);
      if ((v17 & 0x40000000) != 0)
        v47 = (llvm::Value **)*((_QWORD *)this - 1);
      else
        v47 = (llvm::Value **)((char *)this - 32 * v18);
      return sub_1C484388C(a1, v46, *v47, (llvm **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v22);
      return sub_1C497D250(v23, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v22);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0)
        v41 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v41 = (uint64_t **)((char *)this - 32 * v18);
      if (v22)
        v48 = *((_WORD *)v22 + 9) & 0x3F;
      else
        v48 = 42;
      return sub_1C497D9E0((uint64_t)(a1 - 1), v8, **v41, *(_QWORD *)this, v48, a5);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v107, *(_DWORD *)(*((_QWORD *)this - 4) + 36), (uint64_t)v10, 0, 1);
      v16 = sub_1C497C368(v23, (uint64_t)&v107, a5);
      if (v112 != v113)
        free(v112);
      v39 = v110;
      if (v110 == (int8x8_t *)&v111)
        return v16;
      goto LABEL_49;
    case 57:
      *(_QWORD *)v105 = 0;
      v106 = 0;
      v107 = &v106;
      v108 = (uint64_t)v105;
      if ((sub_1C4848F80((_QWORD **)&v107, (uint64_t)this) & 1) != 0
        || (*(_QWORD *)&v104[1] = &v106,
            *(_QWORD *)&v104[3] = v105,
            (sub_1C4849098((_QWORD **)&v104[1], (uint64_t)this) & 1) != 0))
      {
        *(_QWORD *)v104 = 0;
        llvm::TargetTransformInfo::getOperandInfo(v106, (const llvm::Value *)&v104[1]);
        llvm::TargetTransformInfo::getOperandInfo(*(int8x8_t **)v105, (const llvm::Value *)v104);
        v107 = &v109;
        v109 = v106;
        v110 = *(int8x8_t **)v105;
        v108 = 0x200000002;
        if (sub_1C48491B0((uint64_t)v103, (unsigned __int8 *)this))
          v49 = 29;
        else
          v49 = 28;
        sub_1C497CCA4(v23, v49);
        v16 = v50;
        if (v107 != &v109)
          free(v107);
      }
      else
      {
        v69 = *((_DWORD *)this + 5);
        if ((v69 & 0x40000000) != 0)
          v70 = (uint64_t **)*((_QWORD *)this - 1);
        else
          v70 = (uint64_t **)((char *)this - 32 * (v69 & 0x7FFFFFF));
        return sub_1C497D9E0(v23, 57, *(_QWORD *)this, **v70, 42, a5);
      }
      return v16;
    case 61:
      if (v7 != 89)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v52 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v52 = (uint64_t **)((char *)this - 32 * v18);
      v65 = **v52;
      v63 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v65 + 8) & 0xFE) == 0x12)
        v65 = **(_QWORD **)(v65 + 16);
      v64 = (llvm::TargetLoweringBase *)a1[3];
      goto LABEL_137;
    case 62:
      if (v7 != 90)
        return 1;
      v63 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v21 = **(_QWORD **)(v21 + 16);
      v64 = (llvm::TargetLoweringBase *)a1[3];
      v65 = v21;
LABEL_137:
      llvm::TargetLoweringBase::getTypeLegalizationCost(v64, v63, (llvm::EVT **)v65, (uint64_t)&v107);
      return (uint64_t)v107;
    case 63:
      if (v7 != 91)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v51 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v51 = (uint64_t **)((char *)this - 32 * v18);
      v71 = **v51;
      v104[1] = 0;
      LODWORD(v106) = 0;
      v72 = (uint64_t *)*((_QWORD *)this - 8);
      v73 = *v72;
      v74 = *(unsigned int *)(*v72 + 32);
      v75 = *((unsigned int *)this + 18);
      if ((_DWORD)v74 != (_DWORD)v75)
      {
        if (v74 < v75 && (llvm::ShuffleVectorInst::isIdentityWithPadding(this) & 1) != 0)
          return 0;
        if (*(_BYTE *)(v21 + 8) != 19)
        {
          v80 = (int *)*((_QWORD *)this + 8);
          if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v80, v75, v74, (int *)&v106))
          {
            v77 = v23;
            v78 = 5;
            v81 = v71;
            v82 = v80;
            v83 = v75;
            goto LABEL_185;
          }
          if (*(_BYTE *)(v21 + 8) != 19
            && llvm::ShuffleVectorInst::isInsertSubvectorMask(v80, v75, *(_DWORD *)(v73 + 32), &v104[1], &v106))
          {
            v84 = (int *)*((_QWORD *)this + 8);
            v85 = *((unsigned int *)this + 18);
            v86 = (llvm::FixedVectorType *)v21;
            if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
              v86 = **(llvm::FixedVectorType ***)(v21 + 16);
            llvm::FixedVectorType::get(v86, (llvm::Type *)v104[1]);
            v77 = v23;
            v78 = 4;
            v81 = v21;
            v82 = v84;
            v83 = v85;
            goto LABEL_185;
          }
        }
        v105[0] = 0;
        v104[0] = 0;
        if (!llvm::ShuffleVectorInst::isReplicationMask(this, v105, v104))
        {
          if ((_DWORD)a5)
            return 1;
          else
            return -1;
        }
        v92 = *((_DWORD *)this + 18);
        LODWORD(v108) = v92;
        if (v92 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 0);
          v92 = *((_DWORD *)this + 18);
          if (v92)
          {
LABEL_165:
            v93 = 0;
            v94 = *((_QWORD *)this + 8);
            v95 = v92;
            v96 = v108;
            v97 = 4 * v95;
            do
            {
              if (*(_DWORD *)(v94 + 4 * v93) != -1)
              {
                v98 = 1 << v93;
                if (v96 > 0x40)
                  *((_QWORD *)v107 + (v93 >> 6)) |= v98;
                else
                  v107 = (void *)((unint64_t)v107 | v98);
              }
              ++v93;
              v97 -= 4;
            }
            while (v97);
          }
        }
        else
        {
          v107 = 0;
          if (v92)
            goto LABEL_165;
        }
        v16 = sub_1C614B218(v23, *(llvm::FixedVectorType **)(v71 + 24), v105[0], (llvm::Type *)v104[0], (llvm::APIntOps *)&v107);
        if (v108 >= 0x41 && v107)
          MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
        return v16;
      }
      v76 = (int *)*((_QWORD *)this + 8);
      if ((sub_1C53EC390(v76, *(unsigned int *)(*v72 + 32), *(_DWORD *)(*v72 + 32)) & 1) != 0)
        return 0;
      if (llvm::ShuffleVectorInst::isReverseMask(v76, v74))
      {
        v77 = v23;
        v78 = 1;
LABEL_184:
        v81 = v21;
        v82 = v76;
        v83 = v74;
        goto LABEL_185;
      }
      if (llvm::ShuffleVectorInst::isSelectMask(v76, v74))
      {
        v77 = v23;
        v78 = 2;
        goto LABEL_184;
      }
      if (llvm::ShuffleVectorInst::isTransposeMask(v76, v74))
      {
        v77 = v23;
        v78 = 3;
        goto LABEL_184;
      }
      if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v76, v74))
      {
        v77 = v23;
        v78 = 0;
        goto LABEL_184;
      }
      if ((_DWORD)v74)
      {
        v87 = 0;
        v88 = 0;
        v89 = 4 * v74;
        v90 = v76;
        while (1)
        {
          v91 = *v90;
          if (*v90 != -1)
          {
            v87 |= v91 < (int)v74;
            v88 |= v91 >= (int)v74;
            if ((v87 & 1) != 0 && (v88 & 1) != 0)
              break;
          }
          ++v90;
          v89 -= 4;
          if (!v89)
            goto LABEL_175;
        }
      }
      else
      {
        v88 = 0;
        v87 = 0;
LABEL_175:
        if ((v87 & 1) != 0 || (v88 & 1) != 0)
        {
          v77 = v23;
          v78 = 7;
          goto LABEL_184;
        }
      }
      if (*(_BYTE *)(v21 + 8) == 19
        || (isInsertSubvectorMask = llvm::ShuffleVectorInst::isInsertSubvectorMask(v76, v74, v74, &v104[1], &v106),
            v74 = *((unsigned int *)this + 18),
            v76 = (int *)*((_QWORD *)this + 8),
            !isInsertSubvectorMask))
      {
        v77 = v23;
        v78 = 6;
        goto LABEL_184;
      }
      v100 = (llvm::FixedVectorType *)v21;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v100 = **(llvm::FixedVectorType ***)(v21 + 16);
      llvm::FixedVectorType::get(v100, (llvm::Type *)v104[1]);
      v77 = v23;
      v78 = 4;
      v81 = v21;
      v82 = v76;
      v83 = v74;
LABEL_185:
      sub_1C497DCF8(v77, v78, v81, v82, v83);
      return v26;
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1C497C368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *p_src;
  void *v22;
  int8x8_t **v24;
  int8x8_t *v25;
  int8x8_t *v26;
  int8x8_t *v27;
  int OperandInfo;
  llvm::Type *v29;
  uint64_t (*v30)(void);
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t **v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  _BOOL4 v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Type *v72;
  uint64_t **v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  int8x8_t *v89;
  int v90;
  uint64_t __src;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[32];
  void *v99;
  uint64_t v100;
  _BYTE v101[32];
  int v102;
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 8;
  v7 = sub_1C4846F4C(a1 + 8, a2);
  v9 = v7 < 0;
  if (v8)
    v9 = v8 < 0;
  if (!v9)
  {
    v10 = v8 < 1;
    if (!v8)
      v10 = v7 < 1;
    if (v10)
      return 0;
  }
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181)
    return 1;
  v13 = *(_DWORD *)(a2 + 80);
  if (!v13)
    return sub_1C497E028(a1, a2, a3);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_DWORD *)(v14 + 8);
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    v16 = *(unsigned int *)(v14 + 32) | ((unint64_t)(v15 == 19) << 32);
  else
    v16 = 1;
  v18 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          return 1;
        case 131:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          v45 = ***(_QWORD ***)(a2 + 72);
          v46 = a1;
          v47 = 5;
          goto LABEL_64;
        case 132:
          v48 = *(uint64_t ***)(a2 + 72);
          v49 = *v48[1];
          if (*(_BYTE *)(v49 + 8) == 19)
            return sub_1C4846F4C(v6, a2);
          return sub_1C613890C(a1, **v48, v49);
        case 133:
          v45 = ***(_QWORD ***)(a2 + 72);
          v46 = a1;
          v47 = 1;
          goto LABEL_64;
        case 134:
          v45 = ***(_QWORD ***)(a2 + 72);
          v46 = a1;
          v47 = 8;
LABEL_64:
          sub_1C497DCF8(v46, v47, v45, 0, 0);
          return v17;
        default:
          if (v12 == 52)
          {
            if (v16 != 1)
              goto LABEL_98;
            v30 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 224);
          }
          else
          {
            if (v12 != 54 || v16 != 1)
              goto LABEL_98;
            v30 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 216);
          }
          v50 = v30();
          v51 = 0;
          v11 = 1;
          if ((v50 & 1) != 0)
            return v11;
          break;
      }
      goto LABEL_107;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        v34 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), (llvm::Type *)1);
        v36 = v35;
        v37 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), **(_QWORD **)(a2 + 24), (llvm::Type *)1);
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32), v34, v36, v37, v38) & 1) == 0)
        {
          llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v14, (uint64_t)&v93);
          return v93;
        }
        v39 = **(uint64_t ****)(a2 + 24);
        v40 = (llvm::Type *)*(unsigned int *)(v14 + 32);
        if (*(_BYTE *)(v14 + 8) == 19)
          llvm::ScalableVectorType::get(v39, v40);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v39, v40);
        v42 = v41;
        v93 = 0;
        v94 = v41;
        v95 = 300;
        v96 = v98;
        v99 = v101;
        v100 = 0x400000000;
        v102 = v19;
        v103 = xmmword_1C64632D0;
        v97 = 0x400000000;
        v43 = sub_1C497E028(a1, (uint64_t)&v93, a3);
        v44 = sub_1C497D9E0(a1, 53, v42, v14, 36, a3);
        if (__OFADD__(v43, v44))
          v11 = ((uint64_t)(v43 + v44) >> 63) ^ 0x8000000000000000;
        else
          v11 = v43 + v44;
        if (v99 != v101)
          free(v99);
        v22 = v96;
        if (v96 != v98)
          goto LABEL_24;
        return v11;
      }
      if (v12 == 184)
      {
        v82 = *(_QWORD *)(a2 + 72);
        v83 = *(_QWORD *)(v82 + 8);
        v84 = *(unsigned __int8 *)(*(_QWORD *)(v82 + 16) + 16);
        v85 = (unint64_t *)(v83 + 24);
        if (*(_DWORD *)(v83 + 32) >= 0x41u)
          v85 = (unint64_t *)*v85;
        v56 = v84 > 0x14;
        v86 = *v85;
        v87 = __clz(v86) ^ 0x3F;
        if (v86)
          v60 = v87;
        else
          v60 = 0;
        v61 = a1;
        v62 = 32;
        v59 = *(_QWORD *)(a2 + 8);
        return sub_1C6137F68(v61, v62, v59, v60, v56, 1, a3);
      }
      goto LABEL_98;
    }
    if (v15 != 19)
    {
      v24 = *(int8x8_t ***)(a2 + 72);
      v25 = *v24;
      v26 = v24[1];
      v27 = v24[2];
      LODWORD(v93) = 0;
      v90 = 0;
      LODWORD(__src) = 0;
      v89 = v25;
      llvm::TargetTransformInfo::getOperandInfo(v25, (const llvm::Value *)&v93);
      llvm::TargetTransformInfo::getOperandInfo(v26, (const llvm::Value *)&__src);
      OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v27, (const llvm::Value *)&v90);
      v29 = (llvm::Type *)v14;
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        v29 = **(llvm::Type ***)(v14 + 16);
      llvm::Type::getPrimitiveSizeInBits(v29);
      sub_1C497CCA4(a1, 29);
      v64 = v63;
      sub_1C497CCA4(a1, 15);
      if (__OFADD__(v64, v65))
        v66 = ((v64 + v65) >> 63) ^ 0x8000000000000000;
      else
        v66 = v64 + v65;
      sub_1C497CCA4(a1, 25);
      if (__OFADD__(v66, v67))
        v68 = ((uint64_t)(v66 + v67) >> 63) ^ 0x8000000000000000;
      else
        v68 = v66 + v67;
      sub_1C497CCA4(a1, 26);
      if (__OFADD__(v68, v69))
        v11 = ((uint64_t)(v68 + v69) >> 63) ^ 0x8000000000000000;
      else
        v11 = v68 + v69;
      if ((OperandInfo - 4) <= 0xFFFFFFFD)
      {
        sub_1C497CCA4(a1, 22);
        if (__OFADD__(v11, v70))
          v11 = ((uint64_t)(v11 + v70) >> 63) ^ 0x8000000000000000;
        else
          v11 += v70;
      }
      if (v89 != v26)
      {
        v71 = **(_QWORD **)v14 + 1888;
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        {
          v72 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          v73 = (uint64_t **)(**(_QWORD **)v14 + 1888);
          if (*(_DWORD *)(v14 + 8) == 19)
            llvm::ScalableVectorType::get(v73, v72);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v73, v72);
          v71 = v74;
        }
        v75 = sub_1C497D9E0(a1, 53, v14, v71, 32, a3);
        if (__OFADD__(v11, v75))
          v76 = ((uint64_t)(v11 + v75) >> 63) ^ 0x8000000000000000;
        else
          v76 = v11 + v75;
        v77 = sub_1C497D9E0(a1, 57, v14, v71, 32, a3);
        if (__OFADD__(v76, v77))
          return ((uint64_t)(v76 + v77) >> 63) ^ 0x8000000000000000;
        else
          return v76 + v77;
      }
      return v11;
    }
    return sub_1C4846F4C(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      __src = ***(_QWORD ***)(a2 + 72);
      v93 = v18;
      v94 = v14;
      v95 = v12;
      v96 = v98;
      v97 = 0x400000000;
      v99 = v101;
      v100 = 0x400000000;
      v102 = v19;
      v103 = xmmword_1C64169E0;
      v20 = (char *)&v92;
    }
    else
    {
      v31 = *(uint64_t ***)(a2 + 72);
      v33 = *v31;
      v32 = v31[1];
      __src = *v33;
      v92 = *v32;
      v93 = v18;
      v94 = v14;
      v95 = v12;
      v96 = v98;
      v97 = 0x400000000;
      v99 = v101;
      v100 = 0x400000000;
      v102 = v19;
      v103 = xmmword_1C64169E0;
      v20 = (char *)&v93;
    }
    p_src = (char *)&__src;
    goto LABEL_21;
  }
  if (v12 == 194)
    return 4;
  if (v12 == 186)
  {
    v52 = *(_QWORD *)(a2 + 72);
    v53 = *(_QWORD *)(v52 + 16);
    v54 = *(unsigned __int8 *)(*(_QWORD *)(v52 + 24) + 16);
    v55 = (unint64_t *)(v53 + 24);
    if (*(_DWORD *)(v53 + 32) >= 0x41u)
      v55 = (unint64_t *)*v55;
    v56 = v54 > 0x14;
    v57 = *v55;
    v58 = __clz(v57) ^ 0x3F;
    v59 = **(_QWORD **)(a2 + 24);
    if (v57)
      v60 = v58;
    else
      v60 = 0;
    v61 = a1;
    v62 = 33;
    return sub_1C6137F68(v61, v62, v59, v60, v56, 1, a3);
  }
LABEL_98:
  v51 = 0;
  v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      v11 = 0;
      v78 = 0;
    }
    else
    {
      v78 = sub_1C6133E14(a1, *(_QWORD *)(a2 + 8), 1, 0);
      v11 = v88 == 1;
      v13 = *(_DWORD *)(a2 + 80);
    }
    v79 = sub_1C4848A1C(a1, *(uint64_t **)(a2 + 72), v13, *(uint64_t **)(a2 + 24));
    if (v80 == 1)
      v11 = 1;
    if (__OFADD__(v78, v79))
      v51 = ((uint64_t)(v78 + v79) >> 63) ^ 0x8000000000000000;
    else
      v51 = v78 + v79;
  }
LABEL_107:
  p_src = *(char **)(a2 + 24);
  v81 = *(unsigned int *)(a2 + 32);
  v93 = v18;
  v94 = v14;
  v95 = v12;
  v96 = v98;
  v97 = 0x400000000;
  v99 = v101;
  v100 = 0x400000000;
  v102 = v19;
  v20 = &p_src[8 * v81];
  *(_QWORD *)&v103 = v51;
  *((_QWORD *)&v103 + 1) = v11;
LABEL_21:
  sub_1C4F7C758((unsigned int *)&v96, (uint64_t)v98, p_src, v20);
  v11 = sub_1C497E028(a1, (uint64_t)&v93, a3);
  if (v99 != v101)
    free(v99);
  v22 = v96;
  if (v96 != v98)
LABEL_24:
    free(v22);
  return v11;
}

void sub_1C497CCA4(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1C497CD10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 a20,char a21,uint64_t a22,int a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  llvm::TargetLoweringBase *v51;
  unint64_t v52;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD v67[2];
  unint64_t v68;
  int v69;
  __int128 v70;
  unsigned __int8 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[160];

  if (a4)
  {
    if ((v50 - 19) >= 6)
      return 1;
    else
      return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v51, *(const llvm::DataLayout **)(v46 + 8), (llvm::EVT **)v45, (uint64_t)&v70);
  v54 = *(_DWORD *)(v45 + 8);
  v55 = *(_DWORD *)(v45 + 8) & 0xFE;
  v56 = v54;
  if (v55 == 18)
    v56 = *(unsigned __int8 *)(**(_QWORD **)(v45 + 16) + 8);
  if (v56 >= 7)
    v52 = 1;
  else
    v52 = 2;
  v68 = v52;
  v69 = 0;
  if (v71 && (v71 == 1 || *((_QWORD *)v51 + v71 + 12)))
  {
    v57 = *((unsigned __int8 *)v51 + 390 * v71 + 3960);
    if (v57 <= 1)
    {
      v58 = v70;
LABEL_25:
      v74 = v58;
      sub_1C4848B64((uint64_t)&v74, (uint64_t)&v68);
      return v74;
    }
    if (*((_QWORD *)v51 + v71 + 12))
      v59 = v57 == 2;
    else
      v59 = 1;
    if (!v59)
    {
      v72 = 2;
      v73 = 0;
      v74 = v70;
      sub_1C4848B64((uint64_t)&v74, (uint64_t)&v72);
      v58 = v74;
      goto LABEL_25;
    }
  }
  if (v54 == 19)
    return 0;
  if (v54 == 18)
  {
    v60 = v45;
    if (v55 == 18)
      v60 = **(_QWORD **)(v45 + 16);
    v67[0] = sub_1C497CCA4(v46, v50, v60, 0, a5, a6, a7, a8, (uint64_t)v48, v49, v47);
    v67[1] = v61;
    *(_QWORD *)&v74 = v75;
    *((_QWORD *)&v74 + 1) = 0x600000000;
    sub_1C4848C0C((unsigned int *)&v74, v49, v45);
    v62 = sub_1C6138580(v46, v45, v48, v49, (uint64_t *)v74);
    v72 = *(unsigned int *)(v45 + 32);
    v73 = 0;
    sub_1C4848B64((uint64_t)&v72, (uint64_t)v67);
    if (__OFADD__(v62, v72))
      v52 = ((uint64_t)(v62 + v72) >> 63) ^ 0x8000000000000000;
    else
      v52 = v62 + v72;
    if ((_BYTE *)v74 != v75)
      free((void *)v74);
  }
  return v52;
}

void sub_1C497D1F0()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D1FC()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D208()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D214()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D220()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D22C()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D238()
{
  JUMPOUT(0x1C497CE80);
}

void sub_1C497D244()
{
  JUMPOUT(0x1C497CE80);
}

uint64_t sub_1C497D250(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t result;
  llvm::TargetLoweringBase *v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  unsigned __int8 EVT;
  BOOL v31;
  unsigned __int8 v32;
  BOOL v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  _BOOL4 v40;
  llvm::EVT *v41;
  unint64_t v42;
  uint64_t v43;
  llvm::EVT *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  _BOOL4 v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t **v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  llvm::Type *v68;
  uint64_t v69;
  __n128 v70;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89[8];
  __int128 v90;
  unsigned __int8 v91[8];
  _OWORD v92[2];

  v10 = (uint64_t)a4;
  v11 = (uint64_t)a3;
  v14 = (uint64_t *)(a1 + 8);
  v15 = sub_1C4848CBC((uint64_t *)(a1 + 8), a2, a3, a4);
  v17 = v15 < 0;
  if (v16)
    v17 = v16 < 0;
  if (!v17)
  {
    v18 = v16 < 1;
    if (!v16)
      v18 = v15 < 1;
    if (v18)
      return 0;
  }
  v83 = a5;
  v78 = a6;
  v20 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v84 = qword_1C6612970[(int)a2 - 1];
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v10, (uint64_t)&v90);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v11, (uint64_t)&v87);
  v82 = sub_1C47A8C74(v91);
  v80 = v21;
  v81 = sub_1C47A8C74(v89);
  v79 = v23;
  v24 = *(_DWORD *)(v10 + 8);
  v25 = *(_DWORD *)(v11 + 8);
  switch((int)a2)
  {
    case '&':
      v26 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1160))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v26 & 1) == 0)
        goto LABEL_10;
      return result;
    case '\'':
      v29 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1192))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v29 & 1) == 0)
        goto LABEL_28;
      return result;
    case '(':
LABEL_28:
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 32), a7, v22) & 1) != 0)
        return 0;
      if (v83 == 1)
      {
        EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v22);
        v32 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v31);
        v33 = v87 < (uint64_t)v90;
        if (v88 != DWORD2(v90))
          v33 = v88 < SDWORD2(v90);
        if (!v33)
        {
          v34 = v88 == DWORD2(v90) ? (uint64_t)v90 >= v87 : SDWORD2(v90) >= v88;
          if (v34 && EVT && v32)
          {
            v35 = (_DWORD)a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v35 & *((_WORD *)v20 + 179 * EVT + v32 + 36836)) == 0)
              return 0;
          }
        }
      }
      goto LABEL_47;
    case '.':
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 32), a7, v22) & 1) != 0)
        return 0;
      goto LABEL_47;
    case '1':
LABEL_10:
      v27 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v27 = SDWORD2(v90) < v88;
      if (!v27)
      {
        v28 = DWORD2(v90) == v88 ? v87 < (uint64_t)v90 : v88 < SDWORD2(v90);
        if (!v28 && ((v24 & 0xFD) == 13) == ((v25 & 0xFD) == 13) && v82 == v81 && v80 == v79)
          return 0;
      }
      goto LABEL_47;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v24 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v25 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
      if (((*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD))(*(_QWORD *)v20 + 840))(v20, v24 >> 8, v25 >> 8) & 1) != 0)return 0;
      goto LABEL_47;
    default:
LABEL_47:
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v36 = v10;
      else
        v36 = 0;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v37 = v11;
      else
        v37 = 0;
      result = v90;
      v38 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v38 = SDWORD2(v90) < v88;
      if (!v38)
      {
        v39 = v88 >= SDWORD2(v90);
        if (DWORD2(v90) == v88)
          v39 = v87 >= (uint64_t)v90;
        if (v39
          && v89[0]
          && (v89[0] == 1 || *((_QWORD *)v20 + v89[0] + 12))
          && *((unsigned __int8 *)v20 + 390 * v89[0] + v84 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v36 | v37)
      {
        if (v36 && v37)
        {
          if (!v38)
          {
            v40 = DWORD2(v90) == v88 ? v87 >= (uint64_t)v90 : v88 >= SDWORD2(v90);
            if (v40 && v82 == v81 && v80 == v79)
            {
              if ((_DWORD)a2 == 40)
              {
                v77 = 2;
              }
              else
              {
                if ((_DWORD)a2 == 39)
                  return result;
                if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12) || *((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
                  goto LABEL_79;
                v77 = 1;
              }
              v85 = v77;
              LODWORD(v86) = 0;
              v92[0] = v90;
              sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
              return *(_QWORD *)&v92[0];
            }
          }
LABEL_79:
          v41 = *(llvm::EVT **)v10;
          v42 = sub_1C47A7FD0((uint64_t)v20, *v14, v10, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v41, v42, v43, (uint64_t)v92);
          v44 = *(llvm::EVT **)v11;
          v45 = *v14;
          v46 = LOBYTE(v92[0]);
          v47 = sub_1C47A7FD0((uint64_t)v20, v45, v11, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v44, v47, v48, (uint64_t)v92);
          v50 = LOBYTE(v92[0]);
          if (v46 == 6 || LOBYTE(v92[0]) == 6)
          {
            v51 = *(_DWORD *)(v36 + 32);
            v52 = v51 && *(_BYTE *)(v36 + 8) == 19;
            v53 = v52;
            if (v51 > 1 || v53)
            {
              v54 = *(_DWORD *)(v37 + 32);
              v55 = *(unsigned __int8 *)(v37 + 8);
              v56 = v54 && v55 == 19;
              v57 = v56;
              if (v54 > 1 || v57)
              {
                v63 = *(uint64_t ***)(v37 + 24);
                v64 = (llvm::Type *)(v54 >> 1);
                if (v55 == 19)
                  llvm::ScalableVectorType::get(v63, v64);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v63, v64);
                v66 = v65;
                v67 = *(uint64_t ***)(v36 + 24);
                v68 = (llvm::Type *)(*(_DWORD *)(v36 + 32) >> 1);
                if (*(_BYTE *)(v36 + 8) == 19)
                  v70.n128_f64[0] = llvm::ScalableVectorType::get(v67, v68);
                else
                  v70.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v67, v68);
                v72 = v46 != 6 || v50 != 6;
                v85 = sub_1C497D250(a1, a2, v66, v69, v83, v78, a7, v70);
                v86 = v73;
                *(_QWORD *)&v92[0] = 2;
                DWORD2(v92[0]) = 0;
                sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
                v60 = __OFADD__(v72, *(_QWORD *)&v92[0]);
                v61 = v72 + *(_QWORD *)&v92[0];
                v62 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_110;
              }
            }
          }
          if (*(_BYTE *)(v37 + 8) == 19)
            return 0;
          v74 = *(unsigned int *)(v37 + 32);
          if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
            v11 = **(_QWORD **)(v11 + 16);
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
            v10 = **(_QWORD **)(v10 + 16);
          v85 = sub_1C497D250(a1, a2, v11, v10, v83, v78, a7, v49);
          v86 = v75;
          v76 = sub_1C6133E14(a1, v37, 1, 1);
          *(_QWORD *)&v92[0] = v74;
          DWORD2(v92[0]) = 0;
          sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
          v60 = __OFADD__(v76, *(_QWORD *)&v92[0]);
          v61 = v76 + *(_QWORD *)&v92[0];
LABEL_109:
          v62 = (v61 >> 63) ^ 0x8000000000000000;
LABEL_110:
          if (v60)
            return v62;
          else
            return v61;
        }
        if (v36)
        {
          v58 = sub_1C6133E14(a1, v36, 0, 1);
          if (!v37)
            goto LABEL_107;
        }
        else
        {
          v58 = 0;
          if (!v37)
          {
LABEL_107:
            v59 = 0;
LABEL_108:
            v60 = __OFADD__(v58, v59);
            v61 = v58 + v59;
            goto LABEL_109;
          }
        }
        v59 = sub_1C6133E14(a1, v37, 1, 0);
        goto LABEL_108;
      }
      if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12))
        return 4;
      if (*((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
        return 4;
      return 1;
  }
}

uint64_t sub_1C497D9E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a6)
    __asm { BR              X10 }
  return 1;
}

void sub_1C497DCB8()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCC0()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCC8()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCD0()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCD8()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCE0()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCE8()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCF0()
{
  JUMPOUT(0x1C497DB50);
}

void sub_1C497DCF8(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  if (a5)
  {
    v5 = 4 * a5;
    while (*a4 < 2 * (int)a5)
    {
      ++a4;
      v5 -= 4;
      if (!v5)
        __asm { BR              X10 }
    }
  }
  __asm { BR              X10 }
}

unint64_t sub_1C497DF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  llvm::EVT **v15;
  unint64_t v16;
  llvm::EVT **v17;

  v13 = *(_DWORD *)(v12 + 32);
  if (!v13)
    return 0;
  v14 = 0;
  do
  {
    v15 = (llvm::EVT **)v10;
    if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
      v15 = **(llvm::EVT ****)(v10 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v11 + 32), *(const llvm::DataLayout **)(v11 + 8), v15, (uint64_t)&a10);
    if (__OFADD__(v14, a10))
      v16 = ((uint64_t)(v14 + a10) >> 63) ^ 0x8000000000000000;
    else
      v16 = v14 + a10;
    v17 = (llvm::EVT **)v12;
    if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      v17 = **(llvm::EVT ****)(v12 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v11 + 32), *(const llvm::DataLayout **)(v11 + 8), v17, (uint64_t)&a10);
    if (__OFADD__(v16, a10))
      v14 = ((uint64_t)(v16 + a10) >> 63) ^ 0x8000000000000000;
    else
      v14 = v16 + a10;
    --v13;
  }
  while (v13);
  return v14;
}

void sub_1C497E00C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1C613890C(v1, v0, v2);
  JUMPOUT(0x1C497DFE8);
}

unint64_t sub_1C497E028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  llvm::FixedVectorType **v12;
  llvm::FixedVectorType **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t **v39;
  int v40;
  int v41;
  char *v42;
  llvm::Type *v43;
  uint64_t v44;
  uint64_t **v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  llvm::Type *v49;
  uint64_t v50;
  int v51;
  llvm::Type **v52;
  int v53;
  unint64_t v54;
  llvm::Type *v55;
  int v56;
  uint64_t v57;
  llvm::EVT *v58;
  int v59;
  unint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  llvm::Type *v74;
  uint64_t **v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  llvm::Type *v83;
  uint64_t **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  llvm::TargetLoweringBase *v97;
  int v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t *v101;
  _BOOL4 v102;
  BOOL v104;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  _BOOL4 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  llvm::Type *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  llvm::Type *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  unsigned __int8 v232;
  _DWORD *v233;
  _DWORD *v234;
  int v235;
  _DWORD *v236;
  _DWORD *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unsigned int v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  int v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD v258[2];
  __int128 v259;
  unsigned __int8 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t __src;
  uint64_t v264;
  int v265;
  void *v266[2];
  _BYTE v267[32];
  void *v268;
  uint64_t v269;
  _DWORD v270[10];
  __int128 v271;
  void *v272;
  uint64_t v273;
  _BYTE v274[32];
  void *v275;
  uint64_t v276;
  _BYTE v277[32];
  __int128 v278;
  int v279;
  void *v280;
  uint64_t v281;
  _BYTE v282[32];
  void *v283;
  uint64_t v284;
  _BYTE v285[32];
  int v286;
  __int128 v287;
  int *v288;
  uint64_t v289;
  int v290;
  uint64_t v291;

  v3 = a3;
  v4 = a1;
  v291 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v256 = *(_QWORD *)(a2 + 136);
  v9 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v9)
  {
    v10 = v5 == 319 || v5 == 322;
    v11 = v10;
    v12 = *(llvm::FixedVectorType ***)(*(_QWORD *)(a2 + 24) + 8 * v11);
    if (((_DWORD)v12[1] & 0xFE) == 0x12)
      v13 = v12;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  if ((_DWORD)a3 == 2)
    v15 = 1;
  else
    v15 = 10;
  v288 = &v290;
  v289 = 0x200000000;
  v255 = v256;
  if (v5 <= 186)
  {
    if (v5 > 75)
    {
      if (v5 > 166)
      {
        switch(v5)
        {
          case 167:
          case 168:
            goto LABEL_316;
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
            goto LABEL_320;
          case 175:
            v16 = 230;
            goto LABEL_131;
          case 176:
            v16 = 232;
            goto LABEL_131;
          case 177:
            v16 = 231;
            goto LABEL_131;
          default:
            if (v5 != 185)
              goto LABEL_320;
            llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v6);
            v168 = v232;
            v169 = v4;
            v170 = 32;
            v171 = v6;
            v172 = v3;
            goto LABEL_388;
        }
      }
      switch(v5)
      {
        case 139:
          v16 = 223;
          break;
        case 140:
          v16 = 241;
          break;
        case 141:
          goto LABEL_320;
        case 142:
        case 143:
          v16 = 141;
          break;
        default:
          if (v5 == 76)
          {
            v16 = 234;
          }
          else
          {
            if (v5 != 90)
              goto LABEL_320;
            v16 = 106;
          }
          break;
      }
    }
    else
    {
      if (v5 <= 50)
      {
        switch(v5)
        {
          case 5:
            goto LABEL_316;
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
            goto LABEL_320;
          case 8:
            v16 = 186;
            goto LABEL_131;
          case 9:
            v16 = 182;
            goto LABEL_131;
          case 13:
            v16 = 145;
            goto LABEL_131;
          case 14:
            v16 = 235;
            goto LABEL_131;
          case 19:
            v16 = 143;
            goto LABEL_131;
          default:
            if (v5 != 1)
              goto LABEL_320;
            v82 = **(_QWORD **)v6 + 1888;
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              v83 = (llvm::Type *)*(unsigned int *)(v6 + 32);
              v84 = (uint64_t **)(**(_QWORD **)v6 + 1888);
              if (*(_DWORD *)(v6 + 8) == 19)
                llvm::ScalableVectorType::get(v84, v83);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v84, v83);
              v82 = v85;
            }
            v86 = sub_1C497D9E0(v4, 53, v6, v82, 38, v3);
            v87 = sub_1C497D9E0(v4, 57, v6, v82, 38, v3);
            if (__OFADD__(v86, v87))
              v88 = ((v86 + v87) >> 63) ^ 0x8000000000000000;
            else
              v88 = v86 + v87;
            sub_1C497CCA4(v4, 15);
            v37 = __OFADD__(v88, v89);
            v38 = v88 + v89;
            goto LABEL_313;
        }
      }
      switch(v5)
      {
        case '3':
          v16 = 227;
          break;
        case '4':
          v16 = 184;
          break;
        case '5':
          v15 = 4;
          v16 = 185;
          break;
        case '6':
          v16 = 183;
          break;
        default:
          if (v5 != 75)
            goto LABEL_320;
          v16 = 233;
          break;
      }
    }
LABEL_131:
    v247 = v15;
    v254 = a2;
    v246 = v7;
    v290 = v16;
    LODWORD(v289) = 1;
    v97 = *(llvm::TargetLoweringBase **)(a1 + 32);
    llvm::TargetLoweringBase::getTypeLegalizationCost(v97, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v6, (uint64_t)&v259);
    v275 = v277;
    v276 = 0x200000000;
    v272 = v274;
    v273 = 0x200000000;
    if (!(_DWORD)v289)
      goto LABEL_191;
    v252 = v8;
    v250 = v3;
    v98 = v5;
    v99 = (unsigned int *)v288;
    v100 = v260;
    v101 = (uint64_t *)((char *)v97 + 8 * v260 + 96);
    if (DWORD2(v259))
      v102 = SDWORD2(v259) > 0;
    else
      v102 = (uint64_t)v259 > 1;
    v104 = (v260 - 8) >= 7u
        && (v260 - 75) >= 0x2Du
        && (v260 + 104) >= 0x13u;
    v248 = v98;
    v106 = !v104 && v98 == 139;
    v107 = 4 * v289;
    while (!(_DWORD)v100)
    {
LABEL_172:
      ++v99;
      v107 -= 4;
      if (!v107)
      {
        v115 = (unint64_t *)v275;
        if (v276 >= 2)
        {
          v116 = (char *)v275 + 16;
          v117 = *(_QWORD *)v275;
          v118 = 16 * v276 - 16;
          v3 = v250;
          v5 = v248;
          v8 = v252;
          do
          {
            v119 = *((_DWORD *)v116 + 2);
            v120 = *((_DWORD *)v115 + 2);
            v10 = v119 == v120;
            v121 = v119 < v120;
            if (v10)
              v121 = *(_QWORD *)v116 < v117;
            if (v121)
            {
              v117 = *(_QWORD *)v116;
              v115 = (unint64_t *)v116;
            }
            v116 += 16;
            v118 -= 16;
          }
          while (v118);
        }
        else
        {
          v3 = v250;
          v5 = v248;
          v8 = v252;
        }
        if (v115 != (unint64_t *)((char *)v275 + 16 * v276))
          goto LABEL_190;
        v115 = (unint64_t *)v272;
        if (v273 >= 2)
        {
          v122 = (char *)v272 + 16;
          v123 = *(_QWORD *)v272;
          v124 = 16 * v273 - 16;
          do
          {
            v125 = *((_DWORD *)v122 + 2);
            v126 = *((_DWORD *)v115 + 2);
            v10 = v125 == v126;
            v127 = v125 < v126;
            if (v10)
              v127 = *(_QWORD *)v122 < v123;
            if (v127)
            {
              v123 = *(_QWORD *)v122;
              v115 = (unint64_t *)v122;
            }
            v122 += 16;
            v124 -= 16;
          }
          while (v124);
        }
        if (v115 != (unint64_t *)((char *)v272 + 16 * v273))
        {
LABEL_190:
          v14 = *v115;
          goto LABEL_260;
        }
LABEL_191:
        if (v5 == 90)
        {
          v132 = *(char **)(v254 + 24);
          v133 = *(unsigned int *)(v254 + 32);
          *(_QWORD *)&v278 = 0;
          *((_QWORD *)&v278 + 1) = v6;
          v279 = 89;
          v280 = v282;
          v281 = 0x400000000;
          v283 = v285;
          v284 = 0x400000000;
          v286 = 0;
          v287 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, v132, &v132[8 * v133]);
          v134 = *(char **)(v254 + 24);
          v135 = *(unsigned int *)(v254 + 32);
          __src = 0;
          v264 = v6;
          v265 = 83;
          v266[0] = v267;
          v266[1] = (void *)0x400000000;
          v268 = v270;
          v269 = 0x400000000;
          v270[8] = 0;
          v271 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)v266, (uint64_t)v267, v134, &v134[8 * v135]);
          v136 = sub_1C497C368(v4, &v278, v3);
          v137 = sub_1C497C368(v4, &__src, v3);
          if (__OFADD__(v136, v137))
            v14 = ((v136 + v137) >> 63) ^ 0x8000000000000000;
          else
            v14 = v136 + v137;
          if (v268 != v270)
            free(v268);
          if (v266[0] != v267)
            free(v266[0]);
          if (v283 != v285)
            free(v283);
          v138 = (char *)v280;
          if (v280 == v282)
            goto LABEL_260;
        }
        else
        {
          v128 = v254;
          if (v5 == 143)
          {
            sub_1C497CCA4(v4, 18);
            v130 = v129;
            sub_1C497CCA4(v4, 14);
            if (__OFADD__(v130, v131))
              v14 = ((v130 + v131) >> 63) ^ 0x8000000000000000;
            else
              v14 = v130 + v131;
            goto LABEL_260;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12 || !v6)
          {
            v14 = v247;
            goto LABEL_260;
          }
          if (*(_DWORD *)(v6 + 8) == 19)
          {
            v14 = 0;
            goto LABEL_260;
          }
          v139 = *(unsigned int *)(v254 + 32);
          if ((_DWORD)v139)
          {
            v140 = *(_QWORD *)(v254 + 24);
            v141 = 8 * v139;
            while (*(_BYTE *)(*(_QWORD *)v140 + 8) != 19)
            {
              v140 += 8;
              v141 -= 8;
              if (!v141)
                goto LABEL_217;
            }
            v14 = 0;
LABEL_260:
            if (v272 != v274)
              free(v272);
            v81 = v275;
            if (v275 != v277)
LABEL_263:
              free(v81);
            goto LABEL_316;
          }
LABEL_217:
          if ((_DWORD)v256)
          {
            v8 = sub_1C6133E14(v4, v6, 1, 0);
            v256 = v231;
            v128 = v254;
            LODWORD(v139) = *(_DWORD *)(v254 + 32);
          }
          v253 = v8;
          v142 = v5;
          v143 = *(_DWORD *)(v6 + 32);
          __src = (uint64_t)&v265;
          v264 = 0x400000000;
          if ((_DWORD)v139)
          {
            v144 = v6;
            v145 = v3;
            v146 = v4;
            v147 = 0;
            LODWORD(v148) = 0;
            v149 = 8 * v139;
            do
            {
              v150 = *(_QWORD *)(*(_QWORD *)(v128 + 24) + v147);
              if ((*(_DWORD *)(v150 + 8) & 0xFE) == 0x12)
                v150 = **(_QWORD **)(v150 + 16);
              if (v148 >= HIDWORD(v264))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v265, v148 + 1, 8);
                v128 = v254;
                LODWORD(v148) = v264;
              }
              *(_QWORD *)(__src + 8 * v148) = v150;
              v148 = (v264 + 1);
              LODWORD(v264) = v264 + 1;
              v147 += 8;
            }
            while (v149 != v147);
            v4 = v146;
            v3 = v145;
            v6 = v144;
          }
          else
          {
            v148 = 0;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            v6 = **(_QWORD **)(v6 + 16);
          *(_QWORD *)&v278 = 0;
          *((_QWORD *)&v278 + 1) = v6;
          v279 = v142;
          v280 = v282;
          v281 = 0x400000000;
          v283 = v285;
          v284 = 0x400000000;
          v286 = v246;
          v287 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, (char *)__src, (char *)(__src + 8 * v148));
          v258[0] = sub_1C497C368(v4, &v278, v3);
          v258[1] = v151;
          v152 = v254;
          v153 = *(unsigned int *)(v254 + 32);
          if ((_DWORD)v153)
          {
            v154 = v4;
            v155 = 0;
            v156 = 8 * v153;
            do
            {
              v157 = *(_QWORD *)(*(_QWORD *)(v152 + 24) + v155);
              if (v157)
                v158 = (*(_DWORD *)(v157 + 8) & 0xFE) == 18;
              else
                v158 = 0;
              if (v158)
              {
                if (*(_DWORD *)(v152 + 136))
                {
                  v159 = sub_1C6133E14(v154, *(_QWORD *)(*(_QWORD *)(v152 + 24) + v155), 0, 1);
                  v160 = v256;
                  if (v161 == 1)
                    v160 = 1;
                  v256 = v160;
                  v152 = v254;
                  v162 = v253 + v159;
                  if (__OFADD__(v253, v159))
                    v162 = ((uint64_t)(v253 + v159) >> 63) ^ 0x8000000000000000;
                  v253 = v162;
                }
                if (v143 <= *(_DWORD *)(v157 + 32))
                  v143 = *(_DWORD *)(v157 + 32);
              }
              v155 += 8;
            }
            while (v156 != v155);
          }
          v261 = v143;
          LODWORD(v262) = 0;
          sub_1C4848B64((uint64_t)&v261, (uint64_t)v258);
          if (__OFADD__(v261, v253))
            v14 = ((uint64_t)(v261 + v253) >> 63) ^ 0x8000000000000000;
          else
            v14 = v261 + v253;
          if (v283 != v285)
            free(v283);
          if (v280 != v282)
            free(v280);
          v138 = (char *)__src;
          if ((int *)__src == &v265)
            goto LABEL_260;
        }
        free(v138);
        goto LABEL_260;
      }
    }
    v108 = *v99;
    if ((_DWORD)v100 == 1)
    {
      if (v108 > 0x185)
      {
LABEL_161:
        v109 = *v101;
        goto LABEL_162;
      }
    }
    else
    {
      v109 = *v101;
      if (v108 > 0x185 || v109 == 0)
      {
LABEL_162:
        if (v109 && (v108 > 0x185 || *((_BYTE *)v97 + 390 * v100 + v108 + 3862) != 2))
        {
          __src = 2;
          LODWORD(v264) = 0;
          v278 = v259;
          sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
          v111 = v278;
          v112 = v273;
          if (v273 >= (unint64_t)HIDWORD(v273))
          {
            v244 = v278;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 16);
            v111 = v244;
            v112 = v273;
          }
          *((_OWORD *)v272 + v112) = v111;
          LODWORD(v273) = v273 + 1;
        }
        goto LABEL_172;
      }
    }
    if (*((unsigned __int8 *)v97 + 390 * v100 + v108 + 3862) <= 1u)
    {
      if (v106
        && ((*(uint64_t (**)(llvm::TargetLoweringBase *, uint64_t, _QWORD))(*(_QWORD *)v97 + 1328))(v97, v100, 0) & 1) != 0)
      {
        v14 = 0;
        goto LABEL_260;
      }
      if (v102)
        __src = 2;
      else
        __src = 1;
      LODWORD(v264) = 0;
      v278 = v259;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v113 = v278;
      v114 = v276;
      if (v276 >= (unint64_t)HIDWORD(v276))
      {
        v245 = v278;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
        v113 = v245;
        v114 = v276;
      }
      *((_OWORD *)v275 + v114) = v113;
      LODWORD(v276) = v276 + 1;
      goto LABEL_172;
    }
    goto LABEL_161;
  }
  v16 = 224;
  switch(v5)
  {
    case 238:
      v16 = 229;
      goto LABEL_131;
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 261:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 277:
    case 279:
    case 281:
    case 282:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 302:
    case 303:
    case 304:
    case 308:
    case 310:
    case 313:
    case 314:
    case 315:
    case 316:
LABEL_320:
      v201 = *(unsigned __int8 *)(v6 + 8);
      if (v201 == 19)
      {
        v14 = 0;
        goto LABEL_316;
      }
      v202 = v256;
      if (!(_DWORD)v9)
        goto LABEL_326;
      v203 = *(_QWORD *)(a2 + 24);
      v204 = 8 * v9;
      break;
    case 244:
    case 272:
      goto LABEL_316;
    case 258:
      v16 = 237;
      goto LABEL_131;
    case 259:
      v16 = 239;
      goto LABEL_131;
    case 260:
      v16 = 240;
      goto LABEL_131;
    case 262:
    case 283:
      v39 = (uint64_t **)(**(_QWORD **)v6 + 1888);
      v40 = *(_DWORD *)(v6 + 8);
      v41 = v7;
      if ((v40 & 0xFE) == 0x12)
      {
        v42 = (char *)v6;
        v43 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v44 = a1;
        if (v40 == 19)
          llvm::ScalableVectorType::get(v39, v43);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v39, v43);
        v39 = v45;
      }
      else
      {
        v42 = (char *)v6;
        v44 = a1;
      }
      *(_QWORD *)&v278 = v42;
      *((_QWORD *)&v278 + 1) = v39;
      v90 = llvm::StructType::create((_QWORD **)&v278, 2);
      if (v5 == 262)
        v91 = 263;
      else
        v91 = 284;
      __src = (uint64_t)v42;
      v264 = (uint64_t)v42;
      *(_QWORD *)&v278 = 0;
      *((_QWORD *)&v278 + 1) = v90;
      v279 = v91;
      v280 = v282;
      v281 = 0x400000000;
      v283 = v285;
      v284 = 0x400000000;
      v286 = v41;
      *(_QWORD *)&v287 = v8;
      *((_QWORD *)&v287 + 1) = v256;
      sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, (char *)&__src, (char *)&v265);
      v92 = sub_1C497C368(v44, &v278, v3);
      v93 = sub_1C497D9E0(v44, 53, (uint64_t)v42, (uint64_t)v39, 38, v3);
      v94 = v3;
      if (__OFADD__(v92, v93))
        v95 = ((v92 + v93) >> 63) ^ 0x8000000000000000;
      else
        v95 = v92 + v93;
      v275 = (void *)sub_1C497D9E0(v44, 57, (uint64_t)v42, (uint64_t)v39, 38, v94);
      v276 = v96;
      __src = 2;
      LODWORD(v264) = 0;
      sub_1C4848B64((uint64_t)&__src, (uint64_t)&v275);
      if (__OFADD__(v95, __src))
        v14 = ((uint64_t)(v95 + __src) >> 63) ^ 0x8000000000000000;
      else
        v14 = v95 + __src;
      if (v283 != v285)
        free(v283);
      v81 = v280;
      if (v280 != v282)
        goto LABEL_263;
      goto LABEL_316;
    case 263:
    case 284:
      v61 = *(uint64_t **)(v6 + 16);
      v62 = a3;
      v64 = *v61;
      v63 = v61[1];
      if (v5 == 263)
        v65 = 13;
      else
        v65 = 15;
      sub_1C497CCA4(a1, v65);
      v67 = v66;
      __src = sub_1C497D9E0(v4, 53, v64, v63, 38, v62);
      v264 = v68;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v69 = v4;
      if (__OFADD__(v67, (_QWORD)v278))
        v70 = ((v67 + (uint64_t)v278) >> 63) ^ 0x8000000000000000;
      else
        v70 = v67 + v278;
      sub_1C497CCA4(v69, 30);
      goto LABEL_290;
    case 273:
      v16 = 226;
      goto LABEL_131;
    case 274:
    case 275:
    case 305:
    case 306:
      v17 = **(_QWORD **)v6 + 1888;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v18 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v19 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v19, v18);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v18);
        v17 = v20;
      }
      if ((v5 - 305) >= 2)
        v21 = 38;
      else
        v21 = 34;
      v22 = sub_1C497D9E0(v4, 53, v6, v17, v21, v3);
      v23 = v4;
      v24 = 57;
      v25 = v6;
      v26 = v17;
      v27 = v21;
      v28 = v3;
      goto LABEL_48;
    case 276:
    case 307:
      v55 = (llvm::Type *)v6;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        v55 = **(llvm::Type ***)(v6 + 16);
      v56 = 2 * llvm::Type::getPrimitiveSizeInBits(v55);
      v57 = v6;
      v58 = *(llvm::EVT **)v6;
      LODWORD(v278) = v56;
      v59 = v5;
      if (v56 <= 63)
      {
        switch(v56)
        {
          case 32:
            v60 = *(_QWORD *)v58 + 1960;
            goto LABEL_293;
          case 16:
            v60 = *(_QWORD *)v58 + 1936;
            goto LABEL_293;
          case 8:
            v60 = *(_QWORD *)v58 + 1912;
            goto LABEL_293;
        }
      }
      else
      {
        if (v56 == 64)
        {
          v60 = *(_QWORD *)v58 + 1984;
          goto LABEL_293;
        }
        if (v56 == 128)
        {
          v60 = *(_QWORD *)v58 + 2008;
          goto LABEL_293;
        }
      }
      v236 = sub_1C5270984(*(_QWORD *)v58 + 2168, &v278);
      v60 = *((_QWORD *)v236 + 1);
      if (!v60)
      {
        v237 = v236;
        v60 = sub_1C484358C(*(_QWORD *)v58 + 2040, 24, 3);
        v238 = v278;
        *(_QWORD *)v60 = v58;
        *(_QWORD *)(v60 + 16) = 0;
        *(_QWORD *)(v60 + 8) = (v238 << 8) | 0xDu;
        *((_QWORD *)v237 + 1) = v60;
      }
LABEL_293:
      if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
      {
        v185 = (llvm::Type *)*(unsigned int *)(v57 + 32);
        if (*(_DWORD *)(v57 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v60, v185);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v60, v185);
        v60 = v186;
      }
      if (v59 == 276)
        v187 = 40;
      else
        v187 = 39;
      __src = sub_1C497D250(v4, v187, (llvm::Type ***)v60, (llvm::Type ***)v57, 0, v3, 0);
      v264 = v188;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v189 = v3;
      v190 = v278;
      sub_1C497CCA4(v4, 17);
      if (__OFADD__(v190, v191))
        v192 = ((v190 + v191) >> 63) ^ 0x8000000000000000;
      else
        v192 = v190 + v191;
      __src = sub_1C497D250(v4, 38, (llvm::Type ***)v57, (llvm::Type ***)v60, 0, v189, 0);
      v264 = v193;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      if (__OFADD__(v192, (_QWORD)v278))
        v194 = ((uint64_t)(v192 + v278) >> 63) ^ 0x8000000000000000;
      else
        v194 = v192 + v278;
      sub_1C497CCA4(v4, 26);
      if (__OFADD__(v194, v195))
        v196 = ((uint64_t)(v194 + v195) >> 63) ^ 0x8000000000000000;
      else
        v196 = v194 + v195;
      sub_1C497CCA4(v4, 25);
      if (__OFADD__(v196, v197))
        v198 = ((uint64_t)(v196 + v197) >> 63) ^ 0x8000000000000000;
      else
        v198 = v196 + v197;
      sub_1C497CCA4(v4, 29);
      v37 = __OFADD__(v198, v199);
      v38 = v198 + v199;
      goto LABEL_313;
    case 278:
    case 309:
      v46 = a3;
      v47 = *(uint64_t **)(v6 + 16);
      v48 = *v47;
      v49 = (llvm::Type *)*v47;
      if ((*(_DWORD *)(*v47 + 8) & 0xFE) == 0x12)
        v49 = **(llvm::Type ***)(v48 + 16);
      v50 = v47[1];
      v51 = 2 * llvm::Type::getPrimitiveSizeInBits(v49);
      v52 = *(llvm::Type ***)v48;
      LODWORD(v278) = v51;
      v257 = v50;
      v53 = v5;
      if (v51 <= 63)
      {
        switch(v51)
        {
          case 32:
            v54 = (unint64_t)*v52 + 1960;
            goto LABEL_269;
          case 16:
            v54 = (unint64_t)*v52 + 1936;
            goto LABEL_269;
          case 8:
            v54 = (unint64_t)*v52 + 1912;
            goto LABEL_269;
        }
      }
      else
      {
        if (v51 == 64)
        {
          v54 = (unint64_t)*v52 + 1984;
          goto LABEL_269;
        }
        if (v51 == 128)
        {
          v54 = (unint64_t)*v52 + 2008;
          goto LABEL_269;
        }
      }
      v233 = sub_1C5270984((uint64_t)*v52 + 2168, &v278);
      v54 = *((_QWORD *)v233 + 1);
      if (!v54)
      {
        v234 = v233;
        v54 = sub_1C484358C((uint64_t)*v52 + 2040, 24, 3);
        v235 = v278;
        *(_QWORD *)v54 = v52;
        *(_QWORD *)(v54 + 16) = 0;
        *(_QWORD *)(v54 + 8) = (v235 << 8) | 0xDu;
        *((_QWORD *)v234 + 1) = v54;
      }
LABEL_269:
      if ((*(_DWORD *)(v48 + 8) & 0xFE) == 0x12)
      {
        v173 = (llvm::Type *)*(unsigned int *)(v48 + 32);
        if (*(_DWORD *)(v48 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v54, v173);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v54, v173);
        v54 = v174;
      }
      if (v53 == 278)
        v175 = 40;
      else
        v175 = 39;
      __src = sub_1C497D250(v4, v175, (llvm::Type ***)v54, (llvm::Type ***)v48, 0, v46, 0);
      v264 = v176;
      v177 = v4;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v178 = v278;
      sub_1C497CCA4(v4, 17);
      if (__OFADD__(v178, v179))
        v180 = ((v178 + v179) >> 63) ^ 0x8000000000000000;
      else
        v180 = v178 + v179;
      __src = sub_1C497D250(v4, 38, (llvm::Type ***)v48, (llvm::Type ***)v54, 0, v46, 0);
      v264 = v181;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      if (__OFADD__(v180, (_QWORD)v278))
        v182 = ((uint64_t)(v180 + v278) >> 63) ^ 0x8000000000000000;
      else
        v182 = v180 + v278;
      sub_1C497CCA4(v4, 26);
      if (__OFADD__(v182, v183))
        v70 = ((uint64_t)(v182 + v183) >> 63) ^ 0x8000000000000000;
      else
        v70 = v182 + v183;
      if (v53 == 278)
      {
        sub_1C497CCA4(v177, 27);
        if (__OFADD__(v70, v184))
          v70 = ((uint64_t)(v70 + v184) >> 63) ^ 0x8000000000000000;
        else
          v70 += v184;
      }
      v71 = sub_1C497D9E0(v177, 53, v48, v257, 33, v46);
LABEL_290:
      v37 = __OFADD__(v70, v71);
      v38 = v70 + v71;
LABEL_313:
      if (v37)
        v14 = (v38 >> 63) ^ 0x8000000000000000;
      else
        v14 = v38;
      goto LABEL_316;
    case 280:
      goto LABEL_131;
    case 296:
      v16 = 236;
      goto LABEL_131;
    case 300:
    case 311:
      v72 = **(_QWORD **)v6 + 1888;
      v73 = v7;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v74 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v75 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v75, v74);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v75, v74);
        v72 = v76;
      }
      *(_QWORD *)&v278 = v6;
      *((_QWORD *)&v278 + 1) = v72;
      v77 = llvm::StructType::create((_QWORD **)&v278, 2);
      if (v5 == 300)
        v78 = 301;
      else
        v78 = 312;
      __src = v6;
      v264 = v6;
      *(_QWORD *)&v278 = 0;
      *((_QWORD *)&v278 + 1) = v77;
      v279 = v78;
      v280 = v282;
      v281 = 0x400000000;
      v283 = v285;
      v284 = 0x400000000;
      v286 = v73;
      *(_QWORD *)&v287 = v8;
      *((_QWORD *)&v287 + 1) = v256;
      sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, (char *)&__src, (char *)&v265);
      v79 = sub_1C497C368(v4, &v278, v3);
      v80 = sub_1C497D9E0(v4, 57, v6, v72, 42, v3);
      if (__OFADD__(v79, v80))
        v14 = ((v79 + v80) >> 63) ^ 0x8000000000000000;
      else
        v14 = v79 + v80;
      if (v283 != v285)
        free(v283);
      v81 = v280;
      if (v280 != v282)
        goto LABEL_263;
      goto LABEL_316;
    case 301:
    case 312:
      v29 = *(uint64_t **)(v6 + 16);
      v30 = a3;
      v31 = *v29;
      v32 = v29[1];
      if (v5 == 301)
        v33 = 13;
      else
        v33 = 15;
      if (v5 == 301)
        v34 = 36;
      else
        v34 = 34;
      sub_1C497CCA4(a1, v33);
      v22 = v35;
      v23 = v4;
      v24 = 53;
      v25 = v31;
      v26 = v32;
      v27 = v34;
      v28 = v30;
LABEL_48:
      v36 = sub_1C497D9E0(v23, v24, v25, v26, v27, v28);
      v37 = __OFADD__(v22, v36);
      v38 = v22 + v36;
      goto LABEL_313;
    case 317:
      v230 = 13;
      goto LABEL_386;
    case 318:
      v230 = 28;
      goto LABEL_386;
    case 319:
      v228 = v7 | 0x100000000;
      v229 = 14;
      goto LABEL_380;
    case 320:
    case 321:
    case 325:
    case 326:
    case 327:
    case 328:
      sub_1C4774CC4(v13);
      v164 = sub_1C614B33C(v4, v13, v163, v3);
      goto LABEL_389;
    case 322:
      v228 = v7 | 0x100000000;
      v229 = 18;
LABEL_380:
      v164 = sub_1C614B320(a1, v229, (uint64_t)v13, v228, a3);
      goto LABEL_389;
    case 323:
      v230 = 17;
      goto LABEL_386;
    case 324:
      v230 = 29;
      goto LABEL_386;
    case 329:
      v230 = 30;
LABEL_386:
      v164 = sub_1C614B7C0(a1, v230, v13, a3);
      goto LABEL_389;
    default:
      switch(v5)
      {
        case 192:
          v16 = 251;
          goto LABEL_131;
        case 193:
          v16 = 247;
          goto LABEL_131;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_320;
        case 201:
          v16 = 250;
          goto LABEL_131;
        case 202:
          v16 = 246;
          goto LABEL_131;
        case 203:
          v16 = 238;
          goto LABEL_131;
        default:
          if (v5 != 187)
            goto LABEL_320;
          v165 = a3;
          v166 = **(_QWORD **)(a2 + 24);
          llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v166);
          v168 = v167;
          v169 = v4;
          v170 = 33;
          v171 = v166;
          v172 = v165;
LABEL_388:
          v164 = sub_1C6137F68(v169, v170, v171, v168, 1, 0, v172);
          break;
      }
LABEL_389:
      v14 = v164;
      goto LABEL_316;
  }
  do
  {
    if (*(_BYTE *)(*(_QWORD *)v203 + 8) == 19)
    {
      v14 = 0;
      goto LABEL_316;
    }
    v203 += 8;
    v204 -= 8;
  }
  while (v204);
LABEL_326:
  v205 = v8;
  if ((_DWORD)v256)
    v206 = 0;
  else
    v206 = v8;
  v207 = v256;
  if ((_DWORD)v256)
    v207 = 0;
  v208 = 1;
  if ((v201 & 0xFE) == 0x12 && v6)
  {
    if ((_DWORD)v256)
    {
      v239 = v7;
      v240 = a2;
      v241 = sub_1C6133E14(a1, v6, 1, 0);
      v202 = v256;
      v205 = v241;
      v7 = v239;
      v243 = v242;
      a2 = v240;
      v256 = v243;
      v201 = *(_DWORD *)(v6 + 8);
    }
    if (*(_DWORD *)(v6 + 32) <= 1u)
      v208 = 1;
    else
      v208 = *(_DWORD *)(v6 + 32);
    v209 = v5;
    if ((v201 & 0xFE) == 0x12)
      v6 = **(_QWORD **)(v6 + 16);
  }
  else
  {
    v209 = v5;
    v205 = v206;
    v256 = v207;
  }
  __src = (uint64_t)&v265;
  v264 = 0x400000000;
  v210 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v210)
  {
    v249 = v6;
    v251 = v3;
    v211 = v4;
    v212 = 0;
    v213 = 8 * v210;
    do
    {
      v214 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + v212);
      v215 = *(_DWORD *)(v214 + 8);
      if (v214)
        v216 = (*(_DWORD *)(v214 + 8) & 0xFE) == 18;
      else
        v216 = 0;
      if (v216)
      {
        if (v202)
        {
          v219 = v7;
          v220 = a2;
          v221 = sub_1C6133E14(v211, *(_QWORD *)(*(_QWORD *)(a2 + 24) + v212), 0, 1);
          v202 = v255;
          v222 = v256;
          v10 = v223 == 1;
          a2 = v220;
          if (v10)
            v222 = 1;
          v256 = v222;
          v7 = v219;
          if (__OFADD__(v205, v221))
            v205 = ((uint64_t)(v205 + v221) >> 63) ^ 0x8000000000000000;
          else
            v205 += v221;
          v215 = *(_DWORD *)(v214 + 8);
        }
        if (v208 <= *(_DWORD *)(v214 + 32))
          v208 = *(_DWORD *)(v214 + 32);
        if ((v215 & 0xFE) == 0x12)
          v214 = **(_QWORD **)(v214 + 16);
      }
      v217 = v264;
      if (v264 >= (unint64_t)HIDWORD(v264))
      {
        v224 = v7;
        v225 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v265, v264 + 1, 8);
        v202 = v255;
        a2 = v225;
        v7 = v224;
        v217 = v264;
      }
      *(_QWORD *)(__src + 8 * v217) = v214;
      v218 = (v264 + 1);
      LODWORD(v264) = v264 + 1;
      v212 += 8;
    }
    while (v213 != v212);
    v226 = (char *)__src;
    v4 = v211;
    v3 = v251;
    v6 = v249;
  }
  else
  {
    v218 = 0;
    v226 = (char *)&v265;
  }
  if (v208 == 1)
  {
    v14 = 1;
  }
  else
  {
    *(_QWORD *)&v278 = 0;
    *((_QWORD *)&v278 + 1) = v6;
    v279 = v209;
    v280 = v282;
    v281 = 0x400000000;
    v283 = v285;
    v284 = 0x400000000;
    v286 = v7;
    v287 = xmmword_1C64632D0;
    sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, v226, &v226[8 * v218]);
    v272 = (void *)sub_1C497C368(v4, &v278, v3);
    v273 = v227;
    v275 = (void *)v208;
    LODWORD(v276) = 0;
    sub_1C4848B64((uint64_t)&v275, (uint64_t)&v272);
    if (__OFADD__(v275, v205))
      v14 = ((uint64_t)((uint64_t)v275 + v205) >> 63) ^ 0x8000000000000000;
    else
      v14 = (unint64_t)v275 + v205;
    if (v283 != v285)
      free(v283);
    if (v280 != v282)
      free(v280);
    v226 = (char *)__src;
  }
  if (v226 != (char *)&v265)
  {
    v81 = v226;
    goto LABEL_263;
  }
LABEL_316:
  if (v288 != &v290)
    free(v288);
  return v14;
}

uint64_t sub_1C497FB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  size_t v6;
  void *v8;

  v4 = *(unsigned int *)(a4 + 8);
  if (v4 >= 0x41)
  {
    v6 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    v8 = (void *)operator new[]();
    memcpy(v8, *(const void **)a4, v6);
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  return 0;
}

uint64_t sub_1C497FC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v8 = a8;
  v18 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(a4 + 8);
  if (v9 > 0x40)
  {
    v10 = (void *)operator new[]();
    memcpy(v10, *(const void **)a4, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    v8 = a8;
  }
  else
  {
    v10 = *(void **)a4;
  }
  v11 = (_QWORD *)v8[3];
  if (v11)
  {
    if (v11 == v8)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*v8 + 24))(v8, v16);
      v12 = v17;
    }
    else
    {
      v12 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v11 + 16))(v8[3]);
      v17 = v12;
    }
    if (v12 == v16)
    {
      (*(void (**)(_QWORD *))(v16[0] + 32))(v16);
    }
    else if (v12)
    {
      (*(void (**)(_QWORD *))(*v12 + 40))(v12);
    }
  }
  else
  {
    v17 = 0;
  }
  if (v9 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  return 0;
}

unint64_t sub_1C497FD6C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, unsigned int a8, int a9, char a10, char a11)
{
  llvm::Type *v15;
  llvm::Type *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x8_t *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int8x8_t *v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  llvm::FixedVectorType *v57;
  llvm::APIntOps *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned __int8 v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[48];
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v15 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v17 = (llvm::Type *)(v15 / a4);
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), v17);
  v63 = v18;
  if ((a10 & 1) != 0 || a11)
  {
    v61 = sub_1C6137F68(a1, a2, a3, a7, 1, 0, a9);
  }
  else
  {
    if (a9)
    {
      v19 = 0;
      v67 = 1;
      goto LABEL_5;
    }
    v61 = sub_1C4832C7C(a1, a2, a3, a7 | 0x100, a8, 0);
  }
  v67 = v61;
  v19 = v62;
LABEL_5:
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v77);
  v76 = v79[0];
  sub_1C4768AD0(*(_QWORD *)(a1 + 8), a3);
  v22 = v21;
  if ((_DWORD)v20 == 1)
  v24 = sub_1C47A8C74(&v76);
  if ((_DWORD)v23 == 1)
  {
    if (v19)
      goto LABEL_26;
  }
  else if (v19)
  {
    goto LABEL_26;
  }
  v25 = (unint64_t)(v24 + 7) >> 3;
  if (((unint64_t)(v22 + 7) >> 3) > v25)
  {
    v26 = (((unint64_t)(v22 + 7) >> 3) + (unint64_t)v25 - 1)
        / ((unint64_t)(v24 + 7) >> 3);
    v27 = v26 - 1;
    v77 = v79;
    v78 = 0x600000000;
    sub_1C4765AA4((char *)&v77, (v26 + 63) >> 6, 0);
    v80 = v26;
    v28 = (int8x8_t *)v77;
    if (a6)
    {
      if (v17 <= 1)
        v29 = 1;
      else
        v29 = (int)v17;
      v30 = a5;
      do
      {
        if (v15 >= a4)
        {
          v31 = *v30;
          v32 = v29;
          do
          {
            *(_QWORD *)&v28[(v31 / (((unint64_t)v15 + v27) / v26)) >> 6] |= 1 << (v31 / (((unint64_t)v15 + v27) / v26));
            v31 += a4;
            --v32;
          }
          while (v32);
        }
        ++v30;
      }
      while (v30 != &a5[a6]);
    }
    if ((_DWORD)v78)
    {
      v33 = 0;
      v34 = 8 * v78;
      v35 = v28;
      do
      {
        v36 = *v35++;
        v37 = (uint8x8_t)vcnt_s8(v36);
        v37.i16[0] = vaddlv_u8(v37);
        v33 += v37.i32[0];
        v34 -= 8;
      }
      while (v34);
    }
    else
    {
      v33 = 0;
    }
    v67 = (v27 + v67 * v33) / v26;
    if (v28 != (int8x8_t *)v79)
      free(v28);
  }
LABEL_26:
  v75 = v17;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, -1, 1);
    v38 = a6;
  }
  else
  {
    v38 = a6;
    if (v15 < a4)
      v39 = 0;
    else
      v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    v74 = v39;
  }
  v73 = v15;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v72, -1, 1);
    v71 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
    if (!v38)
      goto LABEL_44;
  }
  else
  {
    if ((_DWORD)v15)
      v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    else
      v40 = 0;
    v72 = v40;
    v71 = v15;
    v70 = 0;
    if (!v38)
      goto LABEL_44;
  }
  v41 = &a5[v38];
  if (v17 <= 1)
    v42 = 1;
  else
    v42 = (int)v17;
  do
  {
    if (v15 >= a4)
    {
      v43 = *a5;
      v44 = v71;
      v45 = v42;
      do
      {
        v46 = 1 << v43;
        if (v44 > 0x40)
          *(_QWORD *)(v70 + 8 * (v43 >> 6)) |= v46;
        else
          v70 |= v46;
        v43 += a4;
        --v45;
      }
      while (v45);
    }
    ++a5;
  }
  while (a5 != v41);
LABEL_44:
  if (a2 == 32)
  {
    v68 = sub_1C6133EB0(a1, v63, (uint64_t)&v74, 1, 0);
    v69 = v47;
    v77 = (void *)v38;
    LODWORD(v78) = 0;
    sub_1C4848B64((uint64_t)&v77, (uint64_t)&v68);
    if (__OFADD__(v67, v77))
      v48 = (char *)(((uint64_t)((uint64_t)v77 + v67) >> 63) ^ 0x8000000000000000);
    else
      v48 = (char *)v77 + v67;
    v49 = a1;
    v50 = a3;
    v51 = 0;
    v52 = 1;
  }
  else
  {
    v68 = v38;
    LODWORD(v69) = 0;
    v77 = (void *)sub_1C6133EB0(a1, v63, (uint64_t)&v74, 0, 1);
    v78 = v53;
    sub_1C4848B64((uint64_t)&v77, (uint64_t)&v68);
    if (__OFADD__(v67, v77))
      v48 = (char *)(((uint64_t)((uint64_t)v77 + v67) >> 63) ^ 0x8000000000000000);
    else
      v48 = (char *)v77 + v67;
    v49 = a1;
    v50 = a3;
    v51 = 1;
    v52 = 0;
  }
  v54 = sub_1C6133EB0(v49, v50, (uint64_t)&v70, v51, v52);
  if (__OFADD__(v48, v54))
    v55 = ((uint64_t)&v48[v54] >> 63) ^ 0x8000000000000000;
  else
    v55 = (unint64_t)&v48[v54];
  if (a10)
  {
    v57 = (llvm::FixedVectorType *)(**(_QWORD **)a3 + 1912);
    v58 = a11 ? (llvm::APIntOps *)&v70 : (llvm::APIntOps *)&v72;
    v59 = sub_1C614B218(a1, (llvm::FixedVectorType *)(**(_QWORD **)a3 + 1912), a4, v17, v58);
    if (__OFADD__(v55, v59))
      v55 = ((uint64_t)(v55 + v59) >> 63) ^ 0x8000000000000000;
    else
      v55 += v59;
    if (a11)
    {
      llvm::FixedVectorType::get(v57, v15);
      sub_1C497CCA4(a1, 28);
      if (__OFADD__(v55, v60))
        v55 = ((uint64_t)(v55 + v60) >> 63) ^ 0x8000000000000000;
      else
        v55 += v60;
    }
  }
  if (v71 >= 0x41 && v70)
    MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
  if (v73 >= 0x41 && v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  return v55;
}

uint64_t sub_1C4980364(uint64_t *a1, llvm::ShuffleVectorInst *this)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)((char *)this - 32 * v5);
  }
  v25 = v27;
  v26 = 0x400000000;
  if (v5 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v5, 8);
    v7 = v26;
    v9 = v25;
    v8 = v26;
  }
  else
  {
    v7 = 0;
    if (!v5)
    {
      v13 = v27;
      goto LABEL_11;
    }
    v8 = 0;
    v9 = v27;
  }
  v10 = 32 * v5;
  v11 = &v9[v8];
  do
  {
    v12 = *v6;
    v6 += 4;
    *v11++ = v12;
    v10 -= 32;
  }
  while (v10);
  v13 = v25;
LABEL_11:
  LODWORD(v26) = v7 + v5;
  v14 = sub_1C497B808(a1, this, (uint64_t)v13, (v7 + v5), 1);
  v16 = v14 < 0;
  if (v15)
    v16 = v15 < 0;
  if (!v16)
  {
    v17 = v15 < 1;
    if (!v15)
      v17 = v14 < 1;
    if (v17)
    {
      v18 = 0;
      goto LABEL_35;
    }
  }
  v19 = *((unsigned __int8 *)this + 16);
  if (v19 == 60)
  {
    v18 = 4;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)this;
  if (v19 == 84)
  {
    v21 = *((_QWORD *)this - 4);
    if (!v21
      || *(_BYTE *)(v21 + 16)
      || *(_QWORD *)(v21 + 24) != *((_QWORD *)this + 9)
      || (sub_1C4845148((uint64_t)a1, (uint64_t ***)v21) & 1) != 0)
    {
      v18 = 40;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v20 + 8) == 16 && v20)
      v20 = **(_QWORD **)(v20 + 16);
  }
  v22 = *(_DWORD *)(v20 + 8);
  v23 = v22;
  if (v20 && (v22 & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 24) + 8);
  if (v23 >= 7)
    v18 = 1;
  else
    v18 = 3;
LABEL_35:
  if (v25 != v27)
    free(v25);
  return v18;
}

void sub_1C4980564()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4980578(uint64_t a1, int a2)
{
  uint64_t result;

  result = 1;
  if (a2 > 117)
  {
    if (a2 != 270 && ((a2 - 118) > 0xB || ((1 << (a2 - 118)) & 0xF4F) == 0) && a2 != 193)
      return 0;
  }
  else if ((a2 - 45) > 0x25 || ((1 << (a2 - 45)) & 0x2830F3C007) == 0)
  {
    return 0;
  }
  return result;
}

void sub_1C49805F0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980604(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA73C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980638(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA73C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980654(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 348);
}

void sub_1C4980680()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980694(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7408;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49806C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7408;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C49806E4(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 285);
}

void sub_1C4980710()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980724(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7450;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980758(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7450;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980774(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 286);
}

void sub_1C49807A0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49807B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7498;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49807E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7498;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980804(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 378);
}

void sub_1C4980830()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980844(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA74E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980878(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA74E0;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4980894(uint64_t a1)
{
  return *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                  + 318) == 0;
}

void sub_1C49808C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49808DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7528;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980910(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7528;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C498092C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 318);
}

void sub_1C4980958()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C498096C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7570;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49809A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7570;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C49809BC(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 391);
}

void sub_1C49809E8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49809FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA75B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980A30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA75B8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4980A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  return *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 112) + 16))(*(_QWORD *)(v3 + 112)) + 317)
      || *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 112) + 16))(*(_QWORD *)(v3 + 112), a2)+ 330) != 0;
}

void sub_1C4980AB0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980AC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7600;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980AF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7600;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980B14(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 374);
}

void sub_1C4980B40()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980B54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7648;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980B88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7648;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980BA4(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 326);
}

void sub_1C4980BD0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980BE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7690;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980C18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7690;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980C34(uint64_t a1)
{
  _BYTE *v1;
  int v2;

  v1 = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112));
  if (v1[312])
  {
    v2 = 1;
  }
  else if (v1[313])
  {
    v2 = 2;
  }
  else if (v1[315])
  {
    v2 = 4;
  }
  else
  {
    v2 = 8 * v1[314];
  }
  return v2 | (16 * v1[394]);
}

void sub_1C4980C9C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980CB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA76D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980CE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA76D8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4980D00(uint64_t a1)
{
  return *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                  + 318) == 0;
}

void sub_1C4980D34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980D48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7720;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980D7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7720;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980D98(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 349);
}

void sub_1C4980DC4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980DD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7768;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980E0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7768;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980E28(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 350);
}

void sub_1C4980E54()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980E68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA77B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980E9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA77B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980EB8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 351);
}

void sub_1C4980EE4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980EF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA77F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980F2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA77F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980F48(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 352);
}

void sub_1C4980F74()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4980F88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7840;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4980FBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7840;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4980FD8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 385);
}

void sub_1C4981004()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4981018(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7888;
  result[1] = v3;
  return result;
}

uint64_t sub_1C498104C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7888;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4981068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v4;
  __int16 v5;

  v2 = *(_QWORD *)(a2 + 40);
  if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                 + 386))
    return 0;
  v4 = "agx.promote_tex_state";
  v5 = 259;
  return llvm::Module::getNamedMetadata(v2, (uint64_t)&v4) != 0;
}

void sub_1C49810DC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49810F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA78D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4981124(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA78D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4981140(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 387);
}

void sub_1C498116C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4981180(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7918;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49811B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7918;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C49811D0(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 355);
}

void sub_1C49811FC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4981210(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA7960;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4981244(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA7960;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4981260(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 318);
}

void sub_1C498128C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C49812A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA79A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C49812D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA79A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C49812F0(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 370);
}

uint64_t sub_1C4981318()
{
  char v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"FMA contraction at IR level";
  v4.n128_u64[1] = 27;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&unk_1ED7EBDA0, "disable-agx2-fma-contraction", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EBDA0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable expansion of AGX specific builtins";
  v4.n128_u64[1] = 41;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&unk_1ED7EBE60, "run-agx-expand-builtins-agx2", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EBE60, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Use the new AGX2 scheduling heuristics";
  v4.n128_u64[1] = 38;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&unk_1ED7EBF20, "agx2-new-scheduler", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EBF20, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Use the optimization that decides how much to spill to LM";
  v4.n128_u64[1] = 57;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&unk_1ED7EBFE0, "agx2-run-set-spill-to-lm-tgt", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EBFE0, &dword_1C475E000);
  v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable canonicalization passes";
  v4.n128_u64[1] = 30;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EC0A0, "enable-agx2-canonicalize-passes", &v2, &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC0A0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Disable combining instructions in to wider tuples";
  v4.n128_u64[1] = 49;
  sub_1C6136DA0((llvm::cl::Option *)&unk_1ED7EC160, "disable-agx2-combining", &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC160, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable verification of presence of Mem Operands";
  v4.n128_u64[1] = 47;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&unk_1ED7EC220, "enable-agx2-memop-verifier", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC220, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Add relaxed-math flags to fp operations that have fast.";
  v4.n128_u64[1] = 55;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&unk_1ED7EC2E0, "agx2-replace-fast-math-with-relaxed", &v4, (_BYTE **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC2E0, &dword_1C475E000);
}

uint64_t sub_1C4981588(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 TOC Optimizer";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "agx2-toc-optimization";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC3A0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49817F0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4981618(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7EC3A0);
  *(_QWORD *)v2 = &unk_1E7F9EA00;
  *(_OWORD *)(v2 + 296) = xmmword_1C8663800;
  *(_OWORD *)(v2 + 312) = unk_1C8663810;
  *(_QWORD *)(v2 + 328) = 0;
  *(_OWORD *)(v2 + 264) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v2 + 280) = unk_1C86637F0;
  *(_OWORD *)(v2 + 368) = xmmword_1C8663800;
  *(_OWORD *)(v2 + 384) = unk_1C8663810;
  *(_QWORD *)(v2 + 400) = 0;
  *(_OWORD *)(v2 + 336) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v2 + 352) = unk_1C86637F0;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_QWORD *)(v2 + 456) = v2 + 472;
  *(_QWORD *)(v2 + 464) = 0x1000000000;
  *(_QWORD *)(v2 + 536) = 0;
  v3 = (_DWORD *)(v2 + 1328);
  v4 = 560;
  *(_QWORD *)a1 = &off_1E7FA7AA0;
  do
  {
    v5 = (_QWORD *)(a1 + v4);
    *v5 = -1;
    v5[1] = 0;
    v4 += 16;
  }
  while (v5 + 2 != (_QWORD *)v3);
  v6 = a1 + 1336;
  v7 = v3;
  do
  {
    v8 = 0;
    *v7 = 1;
    v7 += 5;
    do
    {
      *(_DWORD *)(v6 + v8) = -1;
      v8 += 8;
    }
    while (v8 != 32);
    v6 += 40;
  }
  while (v7 != (_QWORD *)(a1 + 1408));
  *(_QWORD *)(a1 + 552) = 0;
  sub_1C498281C(v3);
  sub_1C498281C((_DWORD *)(a1 + 1368));
  *(_QWORD *)(a1 + 1408) = a1 + 1424;
  *(_QWORD *)(a1 + 1416) = 0x800000000;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1568) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 1576) = a1 + 1592;
  *(_QWORD *)(a1 + 1584) = 0x800000000;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_DWORD *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1736) = 0xFFFFFFFFLL;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v12 = qword_1ED830BC0[0];
  v10 = atomic_load(&qword_1ED7EC3A8);
  if (v10 != -1)
  {
    v14[0] = sub_1C4981588;
    v14[1] = &v12;
    v13 = v14;
    std::__call_once(&qword_1ED7EC3A8, &v13, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49817F0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4981618(v0);
}

void sub_1C4981818(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t i;
  uint64_t j;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = &off_1E7FA7AA0;
  free(*(void **)(a1 + 1720));
  v2 = *(void **)(a1 + 1576);
  if (v2 != (void *)(a1 + 1592))
    free(v2);
  free(*(void **)(a1 + 1552));
  v3 = *(void **)(a1 + 1408);
  if (v3 != (void *)(a1 + 1424))
    free(v3);
  for (i = 0; i != -80; i -= 40)
  {
    if ((*(_BYTE *)(a1 + i + 1368) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + i + 1376), 4);
  }
  for (j = 1320; j != 552; j -= 16)
  {
    v6 = *(_QWORD *)(a1 + j);
    if ((v6 & 4) != 0)
    {
      v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v7 != v7 + 2)
          free(*v7);
        MEMORY[0x1CAA32FC0](v7, 0x1080C40ED926357);
      }
    }
  }
  *(_QWORD *)a1 = &unk_1E7F9EA00;
  v8 = *(void **)(a1 + 456);
  if (v8 != (void *)(a1 + 472))
    free(v8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 192))
    free(v9);
  v10 = *(void **)(a1 + 104);
  if (v10 != (void *)(a1 + 120))
    free(v10);
  v11 = *(void **)(a1 + 32);
  if (v11 != (void *)(a1 + 48))
    free(v11);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C498197C(uint64_t a1)
{
  sub_1C4981818(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49819A0()
{
  return "AGX2 TOC Optimizer Pass";
}

uint64_t sub_1C49819B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  const llvm::TargetSubtargetInfo *v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned __int16 v23;
  char *v25;
  uint64_t v26;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void **p_src;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  BOOL v61;
  unint64_t v62;
  unint64_t i;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned __int16 *v68;
  unsigned __int16 *v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  int v78;
  int v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;
  int v83;
  int v84;
  _DWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _WORD *v90;
  unsigned __int16 *v91;
  __int16 v92;
  unsigned __int16 v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t *v98;
  unsigned int v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t j;
  unsigned __int16 *v112;
  unsigned __int16 *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned __int16 v122;
  _QWORD *v123;
  _QWORD *v124;
  unsigned __int16 *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int k;
  int v148;
  unsigned int v149;
  uint64_t *v150;
  unsigned int v151;
  unsigned int *v152;
  uint64_t m;
  int v155;
  unsigned int v156;
  _QWORD *v157;
  char *v158;
  _QWORD *v159;
  uint64_t *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  int v166;
  unsigned int v167;
  int v168;
  void *__src;
  uint64_t v170;
  _BYTE v171[48];
  unsigned int v172;
  void *v173[2];
  _DWORD v174[14];
  char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178[2];
  _BYTE v179[48];
  int v180;
  uint64_t v181;

  v2 = (_QWORD *)a2;
  v181 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[2] + 104))(v2[2]);
  *(_QWORD *)(a1 + 544) = v2[5];
  v4 = (const llvm::TargetSubtargetInfo *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v2[1] + 16))(v2[1], *v2);
  v164 = a1;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 264), v4);
  if (*((_BYTE *)v4 + 294))
  {
    v5 = 24;
  }
  else if (*((_BYTE *)v4 + 293))
  {
    v5 = 20;
  }
  else if (*((_BYTE *)v4 + 292))
  {
    v5 = 16;
  }
  else if (*((_BYTE *)v4 + 291))
  {
    v5 = 12;
  }
  else if (*((_BYTE *)v4 + 290))
  {
    v5 = 8;
  }
  else if (*((_BYTE *)v4 + 289))
  {
    v5 = 7;
  }
  else if (*((_BYTE *)v4 + 288))
  {
    v5 = 6;
  }
  else if (*((_BYTE *)v4 + 287))
  {
    v5 = 4;
  }
  else if (*((_BYTE *)v4 + 318))
  {
    v5 = 12;
  }
  else
  {
    v5 = 8;
  }
  v6 = (uint64_t *)a1;
  *(_DWORD *)(a1 + 1744) = v5;
  v7 = (uint64_t *)(a1 + 1576);
  *(_DWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1736) = 0xFFFFFFFFLL;
  sub_1C4982894((void *)(a1 + 1576), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 44));
  *(_DWORD *)(a1 + 1416) = 0;
  *(_QWORD *)(a1 + 1568) = 0xFFFFFFFFLL;
  v163 = a1 + 1408;
  sub_1C4982894(v6 + 176, *(_DWORD *)(v6[31] + 44));
  *(_QWORD *)(a1 + 552) = 0;
  sub_1C498281C((_DWORD *)(a1 + 1328));
  sub_1C498281C((_DWORD *)(a1 + 1368));
  v175 = (char *)&v177;
  v176 = 0xA00000000;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 44);
  v173[0] = v174;
  v173[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v173, (v8 + 63) >> 6, 0);
  v174[12] = v8;
  llvm::AGXTOCOptimizer::collectImplicitDefs((uint64_t)v6, (uint64_t)v2, (uint64_t *)v173, v6[31], (uint64_t *)&off_1E7FA4908);
  llvm::AGXTOCOptimizer::collectOptimizableBlocks((uint64_t)v6, (uint64_t)v2, (uint64_t)&v175, (uint64_t)v173, v6[31], v6[68]);
  v9 = *(_DWORD *)(*(_QWORD *)(v164 + 248) + 44);
  __src = v171;
  v170 = 0x600000000;
  sub_1C4765AA4((char *)&__src, (v9 + 63) >> 6, 0);
  v172 = v9;
  v10 = *((unsigned __int8 *)v4 + 377);
  if (!*((_BYTE *)v4 + 377))
  {
    v11 = (*(unsigned __int16 *)(*v2 + 18) >> 4) & 0x3FF;
    if (!v11 || v11 == 255 || v11 == 8)
    {
      if (v9)
      {
        v12 = __src;
        if (v9 < 0x40)
        {
LABEL_26:
          *v12 |= ~(-1 << v9);
          goto LABEL_27;
        }
        *(_QWORD *)__src = -1;
        if (v9 + 1 > 0x80)
          v155 = v9 + 1;
        else
          v155 = 128;
        memset(v12, 255, (((v155 - 65) >> 3) & 0x1FFFFFF8) + 8);
        if (v9 <= 0x7F)
          v156 = 127;
        else
          v156 = v9;
        if (v9 > (v156 & 0xFFFFFFC0))
        {
          v12 += v156 >> 6;
          goto LABEL_26;
        }
      }
    }
  }
LABEL_27:
  v13 = *(_QWORD *)(*(_QWORD *)(v164 + 544) + 352);
  v14 = -127;
  v15 = __src;
  v16 = 7552;
  do
  {
    if (((*(_QWORD *)(v13 + (((unint64_t)(v14 + 441) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v14 - 71)) & 1) != 0)
    {
      v17 = *(_QWORD *)(v164 + 248);
      if (v17)
        v18 = (_QWORD *)(v17 + 8);
      else
        v18 = 0;
      v19 = *(unsigned __int16 *)(v18[6] + (((unint64_t)*(unsigned int *)(*v18 + v16) >> 3) & 0x1FFFFFFE))
          + (*(_DWORD *)(*v18 + v16) & 0xF) * (v14 + 441);
      v15[(unsigned __int16)v19 >> 6] |= 1 << v19;
    }
    if (((*(_QWORD *)(v13 + (((unint64_t)(v14 + 313) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v14 + 57)) & 1) != 0)
    {
      v20 = *(_QWORD *)(v164 + 248);
      if (v20)
        v21 = (_QWORD *)(v20 + 8);
      else
        v21 = 0;
      v22 = *(unsigned int *)(*v21 + v16 - 3072);
      v23 = *(_WORD *)(v21[6] + ((v22 >> 3) & 0x1FFFFFFE)) + (v22 & 0xF) * (v14 + 313);
      v15[v23 >> 6] |= 1 << v23;
    }
    v16 += 24;
  }
  while (!__CFADD__(v14++, 1));
  if (v10)
  {
    if ((_DWORD)v176)
    {
      v25 = v175;
      v26 = 80 * v176;
      while (1)
      {
        v27 = (void **)(v25 + 8);
        if (v25 + 8 != (char *)&__src)
          break;
LABEL_55:
        *((_DWORD *)v25 + 18) = v9;
        v25 += 80;
        v26 -= 80;
        if (!v26)
          goto LABEL_82;
      }
      v28 = v170;
      v29 = *((unsigned int *)v25 + 4);
      if (v29 >= v170)
      {
        if ((_DWORD)v170)
          memmove(*v27, __src, 8 * v170);
        goto LABEL_54;
      }
      if (*((_DWORD *)v25 + 5) < v170)
      {
        *((_DWORD *)v25 + 4) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v25 + 8), (uint64_t)(v25 + 24), v28, 8);
      }
      else if ((_DWORD)v29)
      {
        memmove(*v27, __src, 8 * v29);
        goto LABEL_52;
      }
      v29 = 0;
LABEL_52:
      if (v29 != v170)
        memcpy((char *)*v27 + 8 * v29, (char *)__src + 8 * v29, 8 * v170 - 8 * v29);
LABEL_54:
      *((_DWORD *)v25 + 4) = v28;
      v9 = v172;
      goto LABEL_55;
    }
  }
  else if ((_DWORD)v170)
  {
    v30 = 8 * v170;
    while (!*v15)
    {
      ++v15;
      v30 -= 8;
      if (!v30)
        goto LABEL_82;
    }
    if ((_DWORD)v176)
    {
      v31 = v175;
      v32 = &v175[80 * v176];
      do
      {
        v33 = v31 + 8;
        v34 = v172;
        if (*((_DWORD *)v31 + 18) < v172)
        {
          v35 = *((_DWORD *)v31 + 18) & 0x3F;
          v36 = *((unsigned int *)v31 + 4);
          if (v35)
          {
            v46 = *((_QWORD *)v31 + 1) + 8 * v36;
            *(_QWORD *)(v46 - 8) &= ~(-1 << v35);
          }
          v37 = v36;
          *((_DWORD *)v31 + 18) = v34;
          v38 = v34 + 63;
          if ((_DWORD)v36 != (v34 + 63) >> 6)
          {
            v39 = v38 >> 6;
            if (v36 > v39)
            {
              *((_DWORD *)v31 + 4) = v39;
              v37 = v38 >> 6;
            }
            else
            {
              v40 = v36;
              if (v39 > *((_DWORD *)v31 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v31 + 8), (uint64_t)(v31 + 24), v39, 8);
                v40 = *((unsigned int *)v31 + 4);
                v37 = *((_DWORD *)v31 + 4);
              }
              if (v39 != v36)
                bzero((void *)(*v33 + 8 * v40), 8 * (v39 - v36));
              v37 += v39 - v36;
              *((_DWORD *)v31 + 4) = v37;
              v34 = *((_DWORD *)v31 + 18);
            }
          }
          v41 = v34 & 0x3F;
          if (v41)
            *(_QWORD *)(*v33 + 8 * v37 - 8) &= ~(-1 << v41);
        }
        v42 = v170;
        if ((_DWORD)v170)
        {
          v43 = (uint64_t *)__src;
          v44 = (_QWORD *)*v33;
          do
          {
            v45 = *v43++;
            *v44++ |= v45;
            --v42;
          }
          while (v42);
        }
        v31 += 80;
      }
      while (v31 != v32);
    }
  }
LABEL_82:
  v47 = (uint64_t *)v175;
  v48 = &v175[80 * v176];
  v166 = 0;
  if (!*((_BYTE *)v4 + 282))
    goto LABEL_215;
  v49 = (_QWORD *)v2[41];
  v159 = v2 + 40;
  if (v49 == v2 + 40)
    goto LABEL_215;
  v157 = v2;
  v50 = 0;
  v51 = v163;
  v158 = &v175[80 * v176];
  do
  {
    v52 = v48;
    if (v47 != (uint64_t *)v48)
    {
      while ((_QWORD *)*v47 != v49)
      {
        v47 += 10;
        if (v47 == (uint64_t *)v48)
        {
          v52 = v48;
          goto LABEL_90;
        }
      }
      v52 = (char *)v47;
    }
LABEL_90:
    p_src = (void **)(v52 + 8);
    v160 = (uint64_t *)v52;
    if (v52 == v48)
      p_src = &__src;
    v165 = p_src;
    v54 = *(_DWORD *)(*(_QWORD *)(v164 + 248) + 44);
    v178[0] = v179;
    v178[1] = (void *)0x600000000;
    sub_1C4765AA4((char *)v178, (v54 + 63) >> 6, 0);
    v180 = v54;
    v55 = v49 + 6;
    v161 = v49;
    v56 = v49[7];
    v57 = v50;
    if ((_QWORD *)v56 != v49 + 6)
    {
      v57 = v50;
      v162 = v49 + 6;
      do
      {
        v58 = *(unsigned __int8 **)(v56 + 16);
        v59 = *(unsigned __int16 *)v58;
        v61 = (v59 - 9) <= 0x3C && ((1 << (v59 - 9)) & 0x1000000000000605) != 0
           || v59 == 0;
        if (!v61 && (v58[8] & 0x10) == 0)
        {
          v62 = v58[4];
          for (i = *(unsigned int *)(v56 + 40); v62 < i; ++v62)
          {
            v64 = *(_QWORD *)(v56 + 32);
            if (!*(_DWORD *)(v64 + 32 * v62) && (*(_DWORD *)(v64 + 32 * v62) & 0x1000000) == 0)
            {
              v65 = *(unsigned int *)(v64 + 32 * v62 + 4);
              if ((_DWORD)v65)
              {
                if ((v65 - 1) > 0xBE || ((byte_1C697A5A8[v65 >> 3] >> (v65 & 7)) & 1) == 0)
                {
                  v66 = *(_QWORD *)(v164 + 248);
                  if (v66)
                    v67 = (_QWORD *)(v66 + 8);
                  else
                    v67 = 0;
                  v68 = (unsigned __int16 *)(v67[6]
                                           + (((unint64_t)*(unsigned int *)(*v67 + 24 * v65 + 16) >> 3) & 0x1FFFFFFE));
                  v70 = *v68;
                  v69 = v68 + 1;
                  v71 = v70 + (*(_DWORD *)(*v67 + 24 * v65 + 16) & 0xF) * v65;
                  do
                  {
                    *((_QWORD *)v178[0] + ((unsigned __int16)v71 >> 6)) |= 1 << v71;
                    v167 = (unsigned __int16)v71;
                    v168 = v57;
                    sub_1C4983DB0((uint64_t)v7, &v167);
                    v72 = *v69++;
                    v71 += v72;
                  }
                  while (v72);
                  i = *(unsigned int *)(v56 + 40);
                  v51 = v163;
                }
              }
            }
          }
          if ((v58[16] & 0x40) != 0)
          {
            v73 = *(_DWORD *)(*(_QWORD *)(v56 + 32) + 4);
            v74 = *(_QWORD *)(v164 + 248);
            if (v74)
              v75 = (_QWORD *)(v74 + 8);
            else
              v75 = 0;
            v76 = (unsigned __int16 *)(v75[6]
                                     + (((unint64_t)*(unsigned int *)(*v75 + 24 * v73 + 16) >> 3) & 0x1FFFFFFE));
            v78 = *v76;
            v77 = v76 + 1;
            v79 = v78 + (*(_DWORD *)(*v75 + 24 * v73 + 16) & 0xF) * v73;
            do
            {
              *((_QWORD *)v178[0] + ((unsigned __int16)v79 >> 6)) |= 1 << v79;
              v167 = (unsigned __int16)v79;
              v168 = v57;
              sub_1C4983DB0((uint64_t)v7, &v167);
              v80 = *v77++;
              v79 += v80;
            }
            while (v80);
          }
          v81 = *(_DWORD **)(v56 + 32);
          v82 = *(_QWORD *)(v56 + 16);
          v83 = *(unsigned __int8 *)(v82 + 4);
          if ((*(_BYTE *)(v82 + 8) & 2) != 0)
          {
            v104 = *(_DWORD *)(v56 + 40);
            v55 = v162;
            if (v104 == v83)
            {
              v84 = v83;
            }
            else
            {
              v105 = v104 - 1;
              v84 = v83;
              do
              {
                v106 = v81[8 * v83];
                if ((v106 & 0x10000FF) != 0x1000000)
                  break;
                v84 += (v106 & 0x2000000) == 0;
                if (v105 == v83)
                  break;
                ++v83;
              }
              while ((v106 & 0x2000000) == 0);
            }
          }
          else
          {
            v84 = *(unsigned __int8 *)(v82 + 4);
            v55 = v162;
          }
          if (v84)
          {
            v85 = &v81[8 * v84];
            do
            {
              if ((*v81 & 0x20000FF) == 0 && (*v81 & 0x1000000) != 0)
              {
                v86 = v81[1];
                if ((_DWORD)v86)
                {
                  if (v86 > 0xBF || ((byte_1C697A5A8[v86 >> 3] >> (v86 & 7)) & 1) == 0)
                  {
                    v87 = *(_QWORD *)(v164 + 248);
                    if (v87)
                      v88 = (_QWORD *)(v87 + 8);
                    else
                      v88 = 0;
                    v89 = *(unsigned int *)(*v88 + 24 * v86 + 16);
                    v90 = (_WORD *)(v88[6] + ((v89 >> 3) & 0x1FFFFFFE));
                    v92 = *v90;
                    v91 = v90 + 1;
                    v93 = v92 + (v89 & 0xF) * v86;
                    do
                    {
                      v94 = v93;
                      if (v7 != sub_1C4983EC8(v7, v93) || v95 != 0xFFFFFFFFLL)
                      {
                        v98 = sub_1C4983EC8(v7, v96);
                        v100 = (unsigned int *)(*v7 + 16 * *(unsigned int *)(*v98 + 16 * v99 + 8));
                        if ((int)v100[1] >= (int)v50)
                        {
                          v101 = v94 >> 6;
                          if ((*((_QWORD *)*v165 + v101) & (1 << v94)) != 0)
                          {
                            *((_QWORD *)v178[0] + v101) |= 1 << v94;
                            v167 = v94;
                            v168 = v57;
                            v100 = &v167;
                            v102 = (uint64_t)v7;
                          }
                          else
                          {
                            v102 = v51;
                          }
                          sub_1C4983DB0(v102, v100);
                        }
                      }
                      v103 = *v91++;
                      v93 = v103 + v94;
                    }
                    while (v103);
                  }
                }
              }
              v81 += 8;
            }
            while (v81 != v85);
            v57 = (v57 + 1);
            v55 = v162;
            if (!v56)
            {
LABEL_154:
              while ((*(_WORD *)(v56 + 44) & 8) != 0)
                v56 = *(_QWORD *)(v56 + 8);
              goto LABEL_155;
            }
          }
          else
          {
            v57 = (v57 + 1);
          }
        }
        if ((*(_BYTE *)v56 & 4) == 0)
          goto LABEL_154;
LABEL_155:
        v56 = *(_QWORD *)(v56 + 8);
      }
      while ((_QWORD *)v56 != v55);
    }
    v107 = -1;
    v108 = v55;
    do
    {
      v108 = (_QWORD *)v108[1];
      ++v107;
    }
    while (v108 != v55);
    if (!v107)
      goto LABEL_173;
    v109 = *v55 & 0xFFFFFFFFFFFFFFF8;
    if (!v109 || (*(_BYTE *)v109 & 4) == 0)
    {
      while ((*(_WORD *)(v109 + 44) & 4) != 0)
        v109 = *(_QWORD *)v109 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v109 + 16) + 8) & 0x20) != 0)
    {
      v127 = *(unsigned int *)(v109 + 40);
      if ((_DWORD)v127)
      {
        v128 = *(_QWORD *)(v109 + 32);
        v129 = v128 + 32 * v127;
        v130 = v178[0];
        do
        {
          if (!*(_BYTE *)v128)
          {
            v131 = *(_DWORD *)(v128 + 4);
            v132 = *(_QWORD *)(v164 + 248);
            if (v132)
              v133 = (_QWORD *)(v132 + 8);
            else
              v133 = 0;
            v134 = *(unsigned int *)(*v133 + 24 * v131 + 16);
            v135 = (unsigned __int16 *)(v133[6] + ((v134 >> 3) & 0x1FFFFFFE));
            v137 = *v135;
            v136 = v135 + 1;
            v138 = v137 + (v134 & 0xF) * v131;
            do
            {
              v130[(unsigned __int16)v138 >> 6] &= ~(1 << v138);
              v139 = *v136++;
              v138 += v139;
            }
            while (v139);
          }
          v128 += 32;
        }
        while (v128 != v129);
      }
    }
    else
    {
LABEL_173:
      if ((**(_BYTE **)(**(_QWORD **)(v164 + 544) + 360) & 4) == 0)
        goto LABEL_211;
      v110 = v161[11];
      for (j = v161[12]; v110 != j; v110 += 8)
      {
        v112 = *(unsigned __int16 **)(*(_QWORD *)v110 + 152);
        v113 = *(unsigned __int16 **)(*(_QWORD *)v110 + 160);
        if (v113 != v112)
        {
          v114 = *(_QWORD *)(v164 + 248);
          if (v114)
            v115 = (uint64_t *)(v114 + 8);
          else
            v115 = 0;
          v116 = *v115;
          v117 = v115[6];
          v118 = v115[7];
          do
          {
            v119 = v116 + 24 * *v112;
            v120 = *(unsigned int *)(v119 + 16);
            v121 = (v120 >> 3) & 0x1FFFFFFE;
            v122 = *(_WORD *)(v117 + v121) + (v120 & 0xF) * *v112;
            v123 = (_QWORD *)(v118 + 8 * *(unsigned __int16 *)(v119 + 20));
            v124 = v178[0];
            v125 = (unsigned __int16 *)(v117 + 2 + v121);
            do
            {
              if (!*v123 || (*((_QWORD *)v112 + 1) & *v123) != 0)
                v124[v122 >> 6] &= ~(1 << v122);
              ++v123;
              v126 = *v125++;
              v122 += v126;
            }
            while (v126);
            v112 += 8;
          }
          while (v112 != v113);
        }
      }
    }
    if (v180)
    {
      v140 = 0;
      v141 = (uint64_t *)v178[0];
      v142 = (v180 - 1) & 0xFFFFFFC0;
      while (1)
      {
        v144 = *v141++;
        v143 = v144;
        v145 = v142 == v140 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v180 : -1;
        v146 = v145 & v143;
        if (v146)
          break;
        v140 += 64;
        if (v142 + 64 == v140)
          goto LABEL_211;
      }
      for (k = __clz(__rbit64(v146)) + v140; (k & 0x80000000) == 0; k = sub_1C476BA0C(v178, k + 1, v180, 1u))
      {
        if (v7 != sub_1C4983EC8(v7, k) || v148 != 0xFFFFFFFFLL)
        {
          v150 = sub_1C4983EC8(v7, v149);
          v152 = (unsigned int *)(*v7 + 16 * *(unsigned int *)(*v150 + 16 * v151 + 8));
          if ((int)v152[1] >= (int)v50)
            sub_1C4983DB0(v51, v152);
        }
      }
    }
LABEL_211:
    if (v178[0] != v179)
      free(v178[0]);
    v49 = (_QWORD *)v161[1];
    v50 = v57;
    v47 = v160;
    v48 = v158;
  }
  while (v49 != v159);
  v47 = (uint64_t *)v175;
  v2 = v157;
LABEL_215:
  v166 = 0;
  for (m = v2[41]; (_QWORD *)m != v2 + 40; m = *(_QWORD *)(m + 8))
  {
    while (v47 != (uint64_t *)v48)
    {
      if (*v47 == m)
      {
        if (v47 != (uint64_t *)v48)
        {
          sub_1C4982918(v164, *v47, v47 + 1, &v166, 1);
          goto LABEL_223;
        }
        break;
      }
      v47 += 10;
    }
    sub_1C4982918(v164, m, (uint64_t *)&__src, &v166, 0);
    v47 = (uint64_t *)v48;
LABEL_223:
    ;
  }
  if (__src != v171)
    free(__src);
  if (v173[0] != v174)
    free(v173[0]);
  sub_1C4850180(&v175);
  return 0;
}

_DWORD *sub_1C498281C(_DWORD *result)
{
  int v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;

  v1 = *result;
  if (*result > 1u || result[1])
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 2;
      v4 = result + 10;
    }
    else
    {
      v2 = result[4];
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C614BE50(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *result = v5;
        result[1] = 0;
        return result;
      }
      v3 = (_DWORD *)*((_QWORD *)result + 1);
      v4 = &v3[2 * v2];
    }
    do
    {
      *v3 = -1;
      v3 += 2;
    }
    while (v3 != v4);
    v5 = *result & 1;
    goto LABEL_10;
  }
  return result;
}

void *sub_1C4982894(void *result, unsigned int a2)
{
  unsigned int v2;
  _QWORD *v5;

  v2 = *((_DWORD *)result + 38);
  if (v2 < a2 || v2 >> 2 > a2)
  {
    v5 = result;
    free(*((void **)result + 18));
    result = malloc_type_calloc(a2, 2uLL, 0x6D9A4F0CuLL);
    if (!result && (a2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v5[18] = result;
    *((_DWORD *)v5 + 38) = a2;
  }
  return result;
}

void sub_1C4982918(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int16 *v13;
  int v14;
  BOOL v16;
  uint64_t i;
  int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int16 *v32;
  int v33;
  unsigned int v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  int v42;
  uint64_t k;
  BOOL v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  int v50;
  _QWORD *v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  int v66;
  _QWORD *v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  int v87;
  _QWORD *v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned __int16 *v94;
  unsigned __int16 *v95;
  int v96;
  BOOL v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t m;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t *v116;
  uint64_t v117;
  int *v118;
  int v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  int *v134;
  uint64_t v135;
  int v136;
  BOOL v138;
  unsigned int v139;
  uint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  void **v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  int v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  _WORD *v172;
  _BYTE *v173;
  int v174;
  unint64_t v175;
  int *v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  _DWORD *v185;
  int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  void **v204;
  _DWORD *v205;
  unsigned int v206;
  BOOL v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  int v217;
  unsigned __int8 v218;
  unsigned int v219;
  _BOOL4 v220;
  int v221;
  int v222;
  int v223;
  unsigned __int16 *v224;
  unsigned __int16 *v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int16 *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  _BYTE v243[16];
  void *v244;
  uint64_t v245;
  _BYTE v246[32];
  uint64_t v247;
  _QWORD *v248;
  int v249;
  uint64_t v250;
  _QWORD *v251;
  int v252;
  __int128 __base;
  _BYTE v254[40];
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), **(_QWORD **)(a2 + 32));
  v8 = v7;
  v223 = *(unsigned __int8 *)(v7 + 326);
  if (*(_BYTE *)(v7 + 326))
  {
    v9 = 0;
  }
  else if (*(_BYTE *)(v7 + 319))
  {
    v9 = -1;
  }
  else
  {
    v9 = -4;
  }
  v10 = a2 + 48;
  v11 = *(_QWORD *)(a2 + 56);
  if (v11 != a2 + 48)
  {
    v12 = (_QWORD *)(a1 + 552);
    v228 = v7;
    v212 = a2 + 48;
    while (1)
    {
      v13 = *(unsigned __int16 **)(v11 + 16);
      v14 = *v13;
      v16 = (v14 - 9) <= 0x3C && ((1 << (v14 - 9)) & 0x1000000000000605) != 0
         || v14 == 0;
      if (v16 || (v13[4] & 0x10) != 0)
        goto LABEL_323;
      v250 = 1;
      for (i = 8; i != 40; i += 16)
        *(_DWORD *)((char *)&v250 + i) = -1;
      v224 = v13;
      v18 = *v13;
      v19 = (v18 - 1452) >= 0x90 && (v18 - 971) > 0xF;
      v237 = v11;
      if (!v19)
      {
        v20 = *(_QWORD *)(v11 + 32);
        v21 = *(_BYTE *)(v20 + 160) == 1 ? 6 : 7;
        v22 = *(_BYTE *)(v20 + 32 * v21) == 1 ? 1 : 2;
        v229 = v22;
        v23 = *(_QWORD *)(a1 + 248);
        v24 = *a3;
        v219 = *(_DWORD *)(v20 + 100);
        if (sub_1C4983F34(v219, *a3, v23))
          v217 = 0;
        else
          v217 = ((*(_DWORD *)(v20 + 96) >> 26) & ~HIBYTE(*(_DWORD *)(v20 + 96)) & 1) != 0
               ? 1
               : sub_1C4983F9C(a1, *a4, v219);
        v230 = v229 + v21;
        v25 = (_DWORD *)(v20 + 32 * v230);
        v26 = v25[1];
        v27 = sub_1C4983F34(v26, v24, v23);
        v8 = v228;
        v11 = v237;
        v28 = v20 + 96;
        if (v27
          || (((*v25 >> 26) & ~HIBYTE(*v25) & 1) == 0 ? (v29 = sub_1C4983F9C(a1, *a4, v26), v28 = v20 + 96) : (v29 = 1),
              (v217 & v29 & 1) == 0))
        {
          LODWORD(v244) = v219;
          v245 = v28;
          sub_1C4984FA4((uint64_t)&__base, (uint64_t)&v250, (int *)&v244, &v245);
          LODWORD(v244) = *(_DWORD *)(v20 + 32 * v230 + 4);
          v245 = v20 + 32 * v230;
          sub_1C4984FA4((uint64_t)&__base, (uint64_t)&v250, (int *)&v244, &v245);
          v224 = *(unsigned __int16 **)(v237 + 16);
          v18 = *v224;
        }
      }
      if ((v18 - 5396) > 0x1DF || (v30 = *(_QWORD *)(v11 + 32), v31 = *(_DWORD *)(v30 + 64), (_BYTE)v31))
      {
        v32 = v224;
      }
      else
      {
        if (*(_BYTE *)(v30 + 128) == 1)
          v144 = 5;
        else
          v144 = 6;
        v145 = *(_QWORD *)(a1 + 248);
        v146 = *a3;
        v235 = *(_DWORD *)(v30 + 68);
        if (sub_1C4983F34(v235, *a3, v145))
        {
          v221 = 0;
        }
        else if (((v31 >> 26) & ~HIBYTE(v31) & 1) != 0)
        {
          v221 = 1;
        }
        else
        {
          v221 = sub_1C4983F9C(a1, *a4, v235);
        }
        v233 = v144;
        v205 = (_DWORD *)(v30 + 32 * v144);
        v206 = v205[1];
        v207 = sub_1C4983F34(v206, v146, v145);
        v32 = v224;
        v8 = v228;
        if (v207
          || (((*v205 >> 26) & ~HIBYTE(*v205) & 1) == 0 ? (v208 = sub_1C4983F9C(a1, *a4, v206)) : (v208 = 1),
              (v221 & v208 & 1) == 0))
        {
          LODWORD(v244) = v235;
          v245 = v30 + 64;
          sub_1C4984FA4((uint64_t)&__base, (uint64_t)&v250, (int *)&v244, &v245);
          LODWORD(v244) = *(_DWORD *)(v30 + 32 * v233 + 4);
          v245 = (uint64_t)v205;
          sub_1C4984FA4((uint64_t)&__base, (uint64_t)&v250, (int *)&v244, &v245);
          v32 = *(unsigned __int16 **)(v237 + 16);
        }
      }
      if (*(_BYTE *)(v8 + 327))
      {
        v33 = *v32;
        v34 = v33 - 2079;
        v35 = (v33 - 3562) < 0x48;
        if (v34 < 0x48)
          v35 = 1;
        v220 = v35;
      }
      else
      {
        v220 = 0;
      }
      v36 = 0;
      v37 = *((_QWORD *)v32 + 2);
      if (*(_BYTE *)(v8 + 283))
      {
        if (a5)
        {
          v38 = *v32;
          v36 = 1;
          if ((v38 - 9) > 0x3C || ((1 << (v38 - 9)) & 0x1000000000000605) == 0)
          {
            if (*v32)
            {
              if (*((_QWORD *)v32 + 1) & 0x10 | *((_QWORD *)v32 + 2) & 1)
                v36 = 1;
              else
                v36 = (v37 >> 1) & 1;
            }
          }
        }
      }
      v39 = v32[1];
      v247 = 1;
      for (j = 8; j != 40; j += 16)
        *(_DWORD *)((char *)&v247 + j) = -1;
      v231 = v39;
      v234 = v37 & 0xE00;
      v244 = v246;
      v245 = 0x400000000;
      v225 = v32;
      v41 = *((unsigned __int8 *)v32 + 4);
      if ((int)v41 + 1 < v39)
        v42 = v36;
      else
        v42 = 0;
      if (v42 == 1)
      {
        for (k = v41 + 1; k != v231; ++k)
        {
          v44 = v234 == 2560 && v41 == 2;
          v45 = *(_QWORD *)(v237 + 32);
          v46 = (_DWORD *)(v45 + 32 * v41);
          if (v44)
            v47 = 0;
          else
            v47 = k;
          if (!*(_BYTE *)v46)
          {
            v48 = (_BYTE *)(v45 + 32 * v47);
            if (*v48 == 1)
            {
              v49 = *(_DWORD *)(v45 + 32 * v41 + 4);
              if (v49)
              {
                if ((v250 & 1) != 0)
                {
                  v50 = 2;
                  v51 = &v251;
                }
                else
                {
                  v50 = v252;
                  if (!v252)
                    goto LABEL_80;
                  v51 = v251;
                }
                v52 = v50 - 1;
                v53 = v52 & (37 * v49);
                v54 = v51[2 * v53];
                if (v49 != v54)
                {
                  v55 = 1;
                  while (v54 != -1)
                  {
                    v56 = v53 + v55++;
                    v53 = v56 & v52;
                    v54 = v51[2 * v53];
                    if (v49 == v54)
                      goto LABEL_89;
                  }
LABEL_80:
                  v57 = v245;
                  if (v245 >= (unint64_t)HIDWORD(v245))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v244, (uint64_t)v246, v245 + 1, 8);
                    v57 = v245;
                  }
                  *((_QWORD *)v244 + v57) = v46;
                  v58 = (v245 + 1);
                  LODWORD(v245) = v58;
                  if (v58 >= HIDWORD(v245))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v244, (uint64_t)v246, v58 + 1, 8);
                    LODWORD(v58) = v245;
                  }
                  *((_QWORD *)v244 + v58) = v48;
                  LODWORD(v245) = v245 + 1;
                  v59 = v46[1];
                  if (!sub_1C4983F34(v59, *a3, *(_QWORD *)(a1 + 248))
                    && (((*v46 >> 26) & ~HIBYTE(*v46) & 1) != 0 || sub_1C4983F9C(a1, *a4, v59)))
                  {
                    *(_QWORD *)(v45 + 32 * v47 + 16) |= 0x10uLL;
                    if (v220)
                    {
                      LODWORD(v241) = v59;
                      v242 = v45 + 32 * v41;
                      sub_1C4984FA4((uint64_t)&__base, (uint64_t)&v247, (int *)&v241, &v242);
                    }
                  }
                }
              }
            }
          }
LABEL_89:
          ++v41;
        }
      }
      v60 = v247;
      if (v247 >= 2)
      {
        v61 = v245;
        if ((_DWORD)v245)
        {
          v62 = 0;
          v63 = v244;
          v64 = v248;
          while (1)
          {
            v65 = *(_DWORD *)(v63[v62] + 4);
            if ((v60 & 1) != 0)
              break;
            v66 = v249;
            v67 = v64;
            if (v249)
              goto LABEL_95;
LABEL_100:
            v62 += 2;
            if (v62 >= v61)
            {
              v73 = 0;
              while (1)
              {
                v74 = 0;
                v75 = 0;
                v76 = *(_DWORD *)(*((_QWORD *)v244 + v73) + 4);
                v213 = *((_QWORD *)v244 + (v73 | 1));
                do
                {
                  if (v73 != v75)
                  {
                    v77 = *(_DWORD *)(*((_QWORD *)v244 + v74) + 4);
                    v78 = *((_QWORD *)v244 + (v75 | 1u));
                    if (v76 == v77
                      || v76 - 1 <= 0x3FFFFFFE
                      && v77 - 1 <= 0x3FFFFFFE
                      && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a1 + 248) + 8), v76, v77))
                    {
                      if ((v60 & 1) != 0)
                      {
                        v79 = 2;
                        v80 = &v248;
                      }
                      else
                      {
                        v79 = v249;
                        if (!v249)
                          goto LABEL_133;
                        v80 = v248;
                      }
                      v81 = v79 - 1;
                      v82 = (v79 - 1) & (37 * v76);
                      v83 = v80[2 * v82];
                      if (v76 == v83)
                      {
                        v85 = 1;
                      }
                      else
                      {
                        v84 = 1;
                        do
                        {
                          v85 = v83 != -1;
                          if (v83 == -1)
                            break;
                          v86 = v82 + v84++;
                          v82 = v86 & v81;
                          v83 = v80[2 * v82];
                        }
                        while (v76 != v83);
                      }
                      if ((v60 & 1) != 0)
                      {
                        v87 = 2;
                        v88 = &v248;
                      }
                      else
                      {
                        v87 = v249;
                        if (!v249)
                          goto LABEL_131;
                        v88 = v248;
                      }
                      v89 = v87 - 1;
                      v90 = v89 & (37 * v77);
                      v91 = v88[2 * v90];
                      if (v77 != v91)
                      {
                        v92 = 1;
                        while (v91 != -1)
                        {
                          v93 = v90 + v92++;
                          v90 = v93 & v89;
                          v91 = v88[2 * v90];
                          if (v77 == v91)
                            goto LABEL_125;
                        }
LABEL_131:
                        if (!v85)
                          goto LABEL_133;
LABEL_132:
                        *(_QWORD *)(v213 + 16) = 0;
                        *(_QWORD *)(v78 + 16) = 0;
                        sub_1C498407C((uint64_t)&v247, v76);
                        sub_1C498407C((uint64_t)&v247, v77);
                        v60 = v247;
                        goto LABEL_133;
                      }
LABEL_125:
                      if (!v85)
                        goto LABEL_132;
                    }
                  }
LABEL_133:
                  if (v60 < 2)
                    goto LABEL_136;
                  v74 = (v75 + 2);
                  v75 = v74;
                }
                while (v245 > v74);
                v73 += 2;
                if (v245 <= v73)
                  goto LABEL_136;
              }
            }
          }
          v66 = 2;
          v67 = &v248;
LABEL_95:
          v68 = v66 - 1;
          v69 = v68 & (37 * v65);
          v70 = v67[2 * v69];
          if (v65 == v70)
          {
LABEL_99:
            *(_QWORD *)(*(_QWORD *)((char *)v63 + ((8 * v62) | 8)) + 16) |= 0x10uLL;
          }
          else
          {
            v71 = 1;
            while (v70 != -1)
            {
              v72 = v69 + v71++;
              v69 = v72 & v68;
              v70 = v67[2 * v69];
              if (v65 == v70)
                goto LABEL_99;
            }
          }
          goto LABEL_100;
        }
      }
LABEL_136:
      v94 = v225;
      v8 = v228;
      v11 = v237;
      if (*(_BYTE *)(v228 + 282))
        break;
LABEL_316:
      ++*a4;
      if (v244 != v246)
        free(v244);
      if ((v247 & 1) == 0)
        MEMORY[0x1CAA32FB4](v248, 8);
      if ((v250 & 1) == 0)
        MEMORY[0x1CAA32FB4](v251, 8);
      v10 = v212;
      if (!v11)
      {
LABEL_326:
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          v11 = *(_QWORD *)(v11 + 8);
        goto LABEL_327;
      }
LABEL_323:
      if ((*(_BYTE *)v11 & 4) == 0)
        goto LABEL_326;
LABEL_327:
      v11 = *(_QWORD *)(v11 + 8);
      if (v11 == v10)
        return;
    }
    v95 = *(unsigned __int16 **)(v237 + 16);
    v96 = *v95;
    v98 = (v96 - 9) <= 0x3C && ((1 << (v96 - 9)) & 0x1000000000000605) != 0
       || v96 == 0;
    if (!v98 && (v95[4] & 0x10) == 0 && (v95[8] & 1) == 0)
    {
      *v12 = 0;
LABEL_205:
      v138 = (v96 - 9) <= 0x3C && ((1 << (v96 - 9)) & 0x1000000000000605) != 0
          || v96 == 0;
      if (v138 || (v95[4] & 0x10) != 0 || (v95[8] & 1) != 0)
      {
        v139 = v95[3];
        v140 = *(_QWORD *)(a1 + 304);
        if (*((_BYTE *)v94 + 4))
        {
          v141 = *(_DWORD **)(v11 + 32);
          if ((*v141 & 0x10000FF) == 0x1000000)
          {
            v142 = v141[1];
            *(_QWORD *)&__base = v254;
            *((_QWORD *)&__base + 1) = 0x400000000;
            sub_1C4984104((void *)v142, (uint64_t)&__base, *(_QWORD **)(a1 + 248));
            if (*(_WORD *)(v140 + 24 * v139 + 16))
              v143 = *(__int16 *)(*(_QWORD *)(v8 + 144) + 4 * *(unsigned __int16 *)(v140 + 24 * v139 + 14));
            else
              v143 = 1;
            v226 = v143;
            v241 = v243;
            v242 = 0x400000000;
            if (DWORD2(__base))
            {
              v209 = v140;
              v214 = v139;
              v147 = 0;
              v148 = (unsigned int *)__base;
              v149 = 4 * DWORD2(__base);
              do
              {
                v150 = *v148;
                v151 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 112) + 2 * v150);
                v152 = sub_1C498456C((_QWORD *)a1, *a4, *v148);
                v153 = v242;
                if (v242 >= (unint64_t)HIDWORD(v242))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v241, (uint64_t)v243, v242 + 1, 4);
                  v153 = v242;
                }
                *((_DWORD *)v241 + v153) = v152;
                LODWORD(v242) = v242 + 1;
                v147 |= v152 != 0x7FFFFFFF;
                sub_1C4984724(a1 + 552, v150, v151 & 1, *(_DWORD *)(a1 + 1744), v226);
                ++v148;
                v149 -= 4;
              }
              while (v149);
              v154 = DWORD2(__base);
              v139 = v214;
              v140 = v209;
              if ((v147 & (DWORD2(__base) != 0)) == 1)
              {
                v155 = 0;
                do
                {
                  v156 = *((_DWORD *)v241 + v155);
                  if (v156 != 0x7FFFFFFF)
                  {
                    v157 = *(unsigned int *)(__base + 4 * v155);
                    v158 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 112) + 2 * v157) & 1;
                    v159 = v156 + ~*a4;
                    v238 = *(_QWORD *)(v237 + 32) + 32;
                    v239 = __PAIR64__(v159, v157);
                    sub_1C4850058(&v240, &v238, 1uLL);
                    sub_1C4984AB4(a1 + 552, (uint64_t)&v239, v158, *(_DWORD *)(a1 + 1744));
                    if ((v240 & 4) != 0)
                    {
                      v160 = (void **)(v240 & 0xFFFFFFFFFFFFFFF8);
                      if ((v240 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (*v160 != v160 + 2)
                          free(*v160);
                        MEMORY[0x1CAA32FC0](v160, 0x1080C40ED926357);
                      }
                    }
                    v154 = DWORD2(__base);
                  }
                  ++v155;
                }
                while (v155 < v154);
              }
            }
            if (v241 != v243)
              free(v241);
            if ((_BYTE *)__base != v254)
              free((void *)__base);
          }
        }
        memset(v254, 0, 32);
        __base = 0u;
        if (v231 >= 2)
        {
          v210 = v140;
          v215 = v139;
          v161 = 0;
          v162 = 0;
          v163 = 0;
          v164 = v237;
          do
          {
            v165 = *(_QWORD *)(v164 + 32);
            if ((*(_DWORD *)(v165 + v161) & 0x10000FF) == 0)
            {
              v166 = *(_DWORD *)(v165 + v161 + 4);
              if (v166)
              {
                v167 = *a4;
                if ((sub_1C4983F9C(a1, *a4, v166) & 1) != 0)
                  v168 = 0x7FFFFFFF;
                else
                  v168 = sub_1C498456C((_QWORD *)a1, v167, v166);
                v169 = (int *)&v254[12 * v163 - 16];
                *v169 = v168;
                v169[1] = v162;
                v169[2] = v163++;
                v164 = v237;
              }
            }
            ++v162;
            v161 += 32;
          }
          while (32 * (v231 - 1) != v161);
          if (v163 >= 2)
            qsort(&__base, v163, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_1C498591C);
          v170 = v163 - 1;
          if ((int)(v163 - 1) >= 0)
          {
            v218 = 0;
            v222 = 0;
            v227 = 0;
            v171 = v210 + 24 * v215;
            v232 = (unsigned __int16 *)(v171 + 18);
            v172 = (_WORD *)(v171 + 20);
            do
            {
              v173 = &v254[12 * v170 - 16];
              v174 = *((_DWORD *)v173 + 2);
              v175 = *(unsigned int *)(*(_QWORD *)(v237 + 32) + 32 * *((unsigned int *)v173 + 1) + 4);
              v241 = v243;
              v242 = 0x400000000;
              sub_1C4984104((void *)v175, (uint64_t)&v241, *(_QWORD **)(a1 + 248));
              if (*v172)
              {
                v176 = (int *)(*(_QWORD *)(v228 + 152) + 12 * *v232 + 8);
                v177 = 12 * (unsigned __int16)*v172;
                while (1)
                {
                  v178 = *(v176 - 2);
                  if (v178 >= v163)
                  {
                    if (v178 > v163)
                      goto LABEL_265;
                    if (!*(v176 - 1))
                      break;
                  }
                  v176 += 3;
                  v177 -= 12;
                  if (!v177)
                    goto LABEL_265;
                }
                v179 = *v176;
              }
              else
              {
LABEL_265:
                v179 = 0;
              }
              if (!v223
                || v179 < 0
                || (v175 - 1) <= 0x71E
                && ((byte_1C697B55E[v175 >> 3] >> (v175 & 7)) & 1) != 0)
              {
                goto LABEL_279;
              }
              v239 = 0;
              v180 = (unsigned int *)v241;
              if ((_DWORD)v242)
              {
                v181 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 112);
                v182 = 4 * v242;
                v183 = (unsigned int *)v241;
                do
                {
                  v184 = *v183++;
                  v185 = (_DWORD *)((unint64_t)&v239 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                    * (*(_WORD *)(v181 + 2 * v184) & 1)));
                  ++*v185;
                  v182 -= 4;
                }
                while (v182);
                v186 = v239;
              }
              else
              {
                v186 = 0;
              }
              v187 = v186 + v227;
              if (v187 >= 3 || (HIDWORD(v239) + v222) > 2 || (((v174 & 0xFFFFFFFD) == 0) & v218) != 0)
              {
LABEL_279:
                v180 = (unsigned int *)v241;
                if ((_DWORD)v242)
                {
                  v188 = 2 * (v179 > 0);
                  v189 = 4 * v242;
                  do
                  {
                    v190 = *v180++;
                    sub_1C4984724(a1 + 552, v190, *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 112) + 2 * v190) & 1, *(_DWORD *)(a1 + 1744), v188);
                    v189 -= 4;
                  }
                  while (v189);
                  v180 = (unsigned int *)v241;
                }
              }
              else
              {
                if ((v174 & 0xFFFFFFFD) == 0)
                  v218 |= *(_BYTE *)(v228 + 327) == 0;
                v227 = v187;
                v222 += HIDWORD(v239);
              }
              if (v180 != (unsigned int *)v243)
                free(v180);
              v19 = v170-- <= 0;
            }
            while (!v19);
          }
          if (v163)
          {
            v191 = 0;
            v192 = v163;
            do
            {
              v193 = *(unsigned int *)&v254[12 * v191 - 12];
              if (v234 == 2560 && v193 == 2)
                v195 = 0;
              else
                v195 = (v193 + 1);
              if (DWORD1(__base) != 0x7FFFFFFF)
              {
                v196 = *(_QWORD *)(v237 + 32);
                v197 = v196 + 32 * v195;
                if ((*(_BYTE *)(v197 + 16) & 0x10) == 0
                  && word_1C6923ED8[word_1C691FD9C[**(unsigned __int16 **)(v237 + 16)]
                                  + (unint64_t)(unsigned __int16)v195] != 84)
                {
                  v198 = (void *)*(unsigned int *)(v196 + 32 * v193 + 4);
                  v241 = v243;
                  v242 = 0x400000000;
                  sub_1C4984104(v198, (uint64_t)&v241, *(_QWORD **)(a1 + 248));
                  if ((_DWORD)v242)
                  {
                    v199 = 0;
                    do
                    {
                      v200 = sub_1C498456C((_QWORD *)a1, *a4, *((_DWORD *)v241 + v199));
                      if (v200 != 0x7FFFFFFF)
                      {
                        v201 = *((unsigned int *)v241 + v199);
                        v202 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 112) + 2 * v201) & 1;
                        v203 = v200 + ~*a4;
                        v238 = v197;
                        v239 = __PAIR64__(v203, v201);
                        sub_1C4850058(&v240, &v238, 1uLL);
                        sub_1C4984AB4(a1 + 552, (uint64_t)&v239, v202, *(_DWORD *)(a1 + 1744));
                        if ((v240 & 4) != 0)
                        {
                          v204 = (void **)(v240 & 0xFFFFFFFFFFFFFFF8);
                          if ((v240 & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if (*v204 != v204 + 2)
                              free(*v204);
                            MEMORY[0x1CAA32FC0](v204, 0x1080C40ED926357);
                          }
                        }
                      }
                      ++v199;
                    }
                    while (v199 < v242);
                  }
                  if (v241 != v243)
                    free(v241);
                }
              }
              ++v191;
            }
            while (v191 != v192);
          }
        }
        v8 = v228;
        v11 = v237;
      }
      goto LABEL_316;
    }
    v99 = 0;
    v100 = 1;
    do
    {
      v101 = v100;
      v102 = *((unsigned int *)v12 + v99);
      if ((_DWORD)v102)
      {
        for (m = 0; m != v102; ++m)
        {
          if (!*(_DWORD *)(a1 + 384 * v99 + 16 * m + 564))
          {
            v104 = a1 + 384 * v99 + 16 * m;
            v105 = *(_QWORD *)(v104 + 568);
            if ((v105 & 4) != 0)
            {
              v108 = v105 & 0xFFFFFFFFFFFFFFF8;
              v106 = *(uint64_t **)v108;
              v107 = *(_QWORD *)v108 + 8 * *(unsigned int *)(v108 + 8);
            }
            else
            {
              v106 = (uint64_t *)(v104 + 568);
              v107 = (uint64_t)&v106[v105 > 7];
            }
            while (v106 != (uint64_t *)v107)
            {
              v109 = *v106++;
              *(_QWORD *)(v109 + 16) |= 0x20uLL;
            }
          }
        }
      }
      v100 = 0;
      v99 = 1;
    }
    while ((v101 & 1) != 0);
    v110 = 0;
    v111 = 1;
    while (1)
    {
      v112 = v111;
      v113 = *((unsigned int *)v12 + v110);
      if ((_DWORD)v113)
      {
        v114 = 0;
        v115 = 0;
        v116 = (unint64_t *)(a1 + 568 + 384 * v110);
        do
        {
          if (*((_DWORD *)v116 - 1) > v9)
          {
            v117 = a1 + 384 * v110 + 16 * v115;
            *(_QWORD *)(v117 + 560) = *(v116 - 1);
            sub_1C484E2BC((unint64_t *)(v117 + 568), v116);
            --*(_DWORD *)(v117 + 564);
            ++v115;
            v113 = *((unsigned int *)v12 + v110);
          }
          ++v114;
          v116 += 2;
        }
        while (v114 < v113);
      }
      else
      {
        v115 = 0;
      }
      *((_DWORD *)v12 + v110) = v115;
      *(_QWORD *)&__base = v254;
      *((_QWORD *)&__base + 1) = 0x800000000;
      v118 = (int *)(a1 + 40 * v110 + 1328);
      v119 = *v118;
      if (*v118 <= 1)
        break;
      v123 = (unsigned int *)(a1 + 40 * v110 + 1336);
      if ((v119 & 1) != 0)
      {
        v125 = a1 + 40 * v110 + 1368;
        goto LABEL_173;
      }
      v123 = *(unsigned int **)v123;
      v124 = *(unsigned int *)(a1 + 40 * v110 + 1344);
      if ((_DWORD)v124)
      {
        v125 = (uint64_t)&v123[2 * v124];
LABEL_173:
        v119 = *v118 & 1;
        v122 = v123;
        while (*v122 >= 0xFFFFFFFE)
        {
          v122 += 2;
          if (v122 == (unsigned int *)v125)
          {
            v122 = (unsigned int *)v125;
            break;
          }
        }
        v123 = (unsigned int *)v125;
LABEL_178:
        v126 = (unsigned int *)(a1 + 40 * v110 + 1336);
        if (v119)
        {
          v127 = 4;
        }
        else
        {
          v126 = *(unsigned int **)v126;
          v127 = *(unsigned int *)(a1 + 40 * v110 + 1344);
        }
        goto LABEL_181;
      }
      v127 = 0;
      v122 = v123;
      v126 = v123;
LABEL_181:
      v128 = &v126[2 * v127];
      if (v122 != v128)
      {
        v129 = 0;
        do
        {
          v130 = v122[1];
          if (v130 <= v9)
          {
            v131 = *v122;
            if (v129 >= HIDWORD(__base))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v254, v129 + 1, 4);
              v129 = DWORD2(__base);
            }
            *(_DWORD *)(__base + 4 * v129) = v131;
            v129 = ++DWORD2(__base);
          }
          else
          {
            v122[1] = v130 - 1;
          }
          v132 = v122 + 2;
          while (v132 != v123)
          {
            v133 = *v132;
            v132 += 2;
            if (v133 <= 0xFFFFFFFD)
            {
              v122 = v132 - 2;
              goto LABEL_193;
            }
          }
          v122 = v123;
LABEL_193:
          ;
        }
        while (v122 != v128);
        v134 = (int *)__base;
        if (v129)
        {
          v135 = 4 * v129;
          do
          {
            v136 = *v134++;
            sub_1C4985538((uint64_t)v118, v136);
            v135 -= 4;
          }
          while (v135);
          v134 = (int *)__base;
        }
        if (v134 != (int *)v254)
          free(v134);
      }
      v111 = 0;
      v110 = 1;
      if ((v112 & 1) == 0)
      {
        v11 = v237;
        v95 = *(unsigned __int16 **)(v237 + 16);
        v96 = *v95;
        v94 = v225;
        v8 = v228;
        goto LABEL_205;
      }
    }
    v120 = (_QWORD *)(a1 + 40 * v110 + 1336);
    if (v119)
    {
      v121 = 4;
    }
    else
    {
      v120 = (_QWORD *)*v120;
      v121 = *(unsigned int *)(a1 + 40 * v110 + 1344);
    }
    v122 = (unsigned int *)&v120[v121];
    v123 = v122;
    goto LABEL_178;
  }
}

_QWORD *sub_1C4983DB0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  result = sub_1C4983EC8((uint64_t *)a1, *a2);
  v6 = result;
  v8 = v7;
  if (*(_DWORD *)(a1 + 164))
  {
    v9 = *(unsigned int *)(a1 + 160);
    v10 = *(_QWORD *)a1 + 16 * v9;
    v11 = *(_DWORD *)(v10 + 12);
    *(_QWORD *)v10 = *(_QWORD *)a2;
    *(_QWORD *)(v10 + 8) = -1;
    LODWORD(v10) = *(_DWORD *)(a1 + 164) - 1;
    *(_DWORD *)(a1 + 160) = v11;
    *(_DWORD *)(a1 + 164) = v10;
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= *(_DWORD *)(a1 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13 + 1, 16);
      LODWORD(v13) = *(_DWORD *)(a1 + 8);
    }
    v9 = *(_QWORD *)a1 + 16 * v13;
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = -1;
    LODWORD(v9) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v9 + 1;
  }
  if (v6 == (_QWORD *)a1 && v8 == 0xFFFFFFFFLL)
  {
    *(_WORD *)(*(_QWORD *)(a1 + 144) + 2 * v4) = v9;
    *(_DWORD *)(*(_QWORD *)a1 + 16 * v9 + 8) = v9;
  }
  else
  {
    v15 = *(unsigned int *)(*v6 + 16 * v8 + 8);
    v16 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 16 * v15 + 12) = v9;
    *(_DWORD *)(v16 + 16 * v8 + 8) = v9;
    *(_DWORD *)(v16 + 16 * v9 + 8) = v15;
  }
  return result;
}

uint64_t *sub_1C4983EC8(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(result[18] + 2 * a2);
  v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 16 * v2) == a2)
      {
        v5 = *(unsigned int *)(v4 + 16 * v2 + 8);
        if ((_DWORD)v5 != -1 && *(_DWORD *)(v4 + 16 * v5 + 12) == -1)
          break;
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

BOOL sub_1C4983F34(unsigned int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  _WORD *v5;
  unsigned __int16 *v6;
  __int16 v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;

  v3 = (_QWORD *)(a3 + 8);
  if (!a3)
    v3 = 0;
  v4 = *(unsigned int *)(*v3 + 24 * a1 + 16);
  v5 = (_WORD *)(v3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v5;
  v6 = v5 + 1;
  v8 = v7 + (v4 & 0xF) * a1;
  do
  {
    v9 = (1 << v8) & *(_QWORD *)(a2 + 8 * (v8 >> 6));
    if (v9)
      break;
    v10 = *v6++;
    v8 += v10;
  }
  while (v10);
  return v9 != 0;
}

uint64_t sub_1C4983F9C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _WORD *v7;
  unsigned __int16 v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)(a1 + 248);
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(unsigned int *)(*v5 + 24 * a3 + 16);
  v7 = (_WORD *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  v8 = *v7 + (v6 & 0xF) * a3;
  v9 = (uint64_t *)(a1 + 1408);
  while (2)
  {
    v10 = sub_1C4983EC8(v9, v8);
    v12 = v9 == v10 && v11 == -1;
    v13 = v12;
    if (!v12)
    {
      ++v7;
      v14 = v11;
      v15 = *v10;
      while (1)
      {
        v16 = *(_DWORD *)(v15 + 16 * v14 + 4);
        if (v16 > a2)
          return 0;
        if (v16 == a2)
          break;
        v14 = *(unsigned int *)(v15 + 16 * v14 + 12);
        if (v9 == v10 && v14 == 0xFFFFFFFFLL)
          return 0;
      }
      v8 += *v7;
      if (*v7)
        continue;
    }
    break;
  }
  return v13 ^ 1u;
}

uint64_t sub_1C498407C(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v3 = 2;
  }
  else
  {
    v3 = *(_DWORD *)(result + 16);
    if (!v3)
      return result;
    v2 = *(_QWORD *)(result + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  v6 = (int *)(v2 + 16 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_8:
    *v6 = -2;
    v10 = *(_DWORD *)(result + 4) + 1;
    *(_DWORD *)result -= 2;
    *(_DWORD *)(result + 4) = v10;
  }
  else
  {
    v8 = 1;
    while (v7 != -1)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v7 = *(_DWORD *)(v2 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (int *)(v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  return result;
}

void *sub_1C4984104(void *result, uint64_t a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _WORD *v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _WORD *v30;
  unsigned __int16 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  _WORD *v45;
  unsigned __int16 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  if (((_DWORD)result - 1) > 0x3FFFFFFE)
    return result;
  v5 = (int)result;
  v6 = result;
  v7 = (unint64_t)result >> 3;
  if (result > 0x1BF)
  {
    if (result > 0x71F)
      return result;
    v7 = v7;
    v8 = 1 << (result & 7);
    goto LABEL_14;
  }
  v8 = 1 << (result & 7);
  if ((v8 & byte_1C6979862[v7]) == 0)
  {
    if (result <= 0xB7 && (v8 & byte_1C697A2C8[v7]) != 0)
    {
      v10 = a3[1];
      v11 = a3[7];
      v12 = *(unsigned int *)(v10 + 24 * result + 4);
      v13 = *(unsigned __int16 *)(v11 + 2 * v12);
      if (*(_WORD *)(v11 + 2 * v12))
      {
        LOWORD(v13) = v13 + (_WORD)result;
        v14 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v10 + 24 * result + 12));
        v15 = (unsigned __int16 *)(v11 + 2 * v12 + 2);
        while (*v14 != 1)
        {
          v16 = *v15++;
          LOWORD(v13) = v16 + v13;
          ++v14;
          if (!v16)
          {
            v13 = 0;
            goto LABEL_45;
          }
        }
        v13 = (unsigned __int16)v13;
      }
LABEL_45:
      v48 = *(unsigned int *)(a2 + 8);
      if (v48 >= *(_DWORD *)(a2 + 12))
      {
        v58 = v13;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v48 + 1, 4);
        v13 = v58;
        LODWORD(v48) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v48) = v13;
      v9 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v9;
      v49 = a3[1];
      v50 = a3[7];
      v51 = *(unsigned int *)(v49 + 24 * v6 + 4);
      if (*(_WORD *)(v50 + 2 * v51))
      {
        v44 = *(_WORD *)(v50 + 2 * v51) + v5;
        v52 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v49 + 24 * v6 + 12));
        v53 = (unsigned __int16 *)(v50 + 2 * v51 + 2);
        while (*v52 != 2)
        {
          v54 = *v53++;
          v44 += v54;
          ++v52;
          if (!v54)
            goto LABEL_51;
        }
LABEL_52:
        v5 = v44;
        goto LABEL_53;
      }
      goto LABEL_51;
    }
LABEL_14:
    if ((v8 & byte_1C697B55E[v7]) == 0)
      return result;
    v17 = a3[1];
    v18 = a3[7];
    v19 = *(unsigned int *)(v17 + 24 * result + 4);
    v20 = *(unsigned __int16 *)(v18 + 2 * v19);
    if (*(_WORD *)(v18 + 2 * v19))
    {
      LOWORD(v20) = v20 + (_WORD)result;
      v21 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v17 + 24 * result + 12));
      v22 = (unsigned __int16 *)(v18 + 2 * v19 + 2);
      while (*v21 != 1)
      {
        v23 = *v22++;
        LOWORD(v20) = v23 + v20;
        ++v21;
        if (!v23)
        {
          v20 = 0;
          goto LABEL_21;
        }
      }
      v20 = (unsigned __int16)v20;
    }
LABEL_21:
    v24 = *(unsigned int *)(a2 + 8);
    if (v24 >= *(_DWORD *)(a2 + 12))
    {
      v55 = v20;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 4);
      v20 = v55;
      LODWORD(v24) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v24) = v20;
    v25 = (*(_DWORD *)(a2 + 8) + 1);
    *(_DWORD *)(a2 + 8) = v25;
    v26 = a3[1];
    v27 = a3[7];
    v28 = *(unsigned int *)(v26 + 24 * v6 + 4);
    v29 = *(unsigned __int16 *)(v27 + 2 * v28);
    if (*(_WORD *)(v27 + 2 * v28))
    {
      LOWORD(v29) = v29 + v5;
      v30 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v26 + 24 * v6 + 12));
      v31 = (unsigned __int16 *)(v27 + 2 * v28 + 2);
      while (*v30 != 2)
      {
        v32 = *v31++;
        LOWORD(v29) = v32 + v29;
        ++v30;
        if (!v32)
        {
          v29 = 0;
          goto LABEL_29;
        }
      }
      v29 = (unsigned __int16)v29;
    }
LABEL_29:
    if (v25 >= *(_DWORD *)(a2 + 12))
    {
      v56 = v29;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 4);
      v29 = v56;
      LODWORD(v25) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v25) = v29;
    v33 = (*(_DWORD *)(a2 + 8) + 1);
    *(_DWORD *)(a2 + 8) = v33;
    v34 = a3[1];
    v35 = a3[7];
    v36 = *(unsigned int *)(v34 + 24 * v6 + 4);
    v37 = *(unsigned __int16 *)(v35 + 2 * v36);
    if (*(_WORD *)(v35 + 2 * v36))
    {
      LOWORD(v37) = v37 + v5;
      v38 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v34 + 24 * v6 + 12));
      v39 = (unsigned __int16 *)(v35 + 2 * v36 + 2);
      while (*v38 != 3)
      {
        v40 = *v39++;
        LOWORD(v37) = v40 + v37;
        ++v38;
        if (!v40)
        {
          v37 = 0;
          goto LABEL_37;
        }
      }
      v37 = (unsigned __int16)v37;
    }
LABEL_37:
    if (v33 >= *(_DWORD *)(a2 + 12))
    {
      v57 = v37;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v33 + 1, 4);
      v37 = v57;
      LODWORD(v33) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v33) = v37;
    v9 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v9;
    v41 = a3[1];
    v42 = a3[7];
    v43 = *(unsigned int *)(v41 + 24 * v6 + 4);
    if (*(_WORD *)(v42 + 2 * v43))
    {
      v44 = *(_WORD *)(v42 + 2 * v43) + v5;
      v45 = (_WORD *)(a3[11] + 2 * *(unsigned int *)(v41 + 24 * v6 + 12));
      v46 = (unsigned __int16 *)(v42 + 2 * v43 + 2);
      while (*v45 != 4)
      {
        v47 = *v46++;
        v44 += v47;
        ++v45;
        if (!v47)
          goto LABEL_51;
      }
      goto LABEL_52;
    }
LABEL_51:
    v5 = 0;
    goto LABEL_53;
  }
  v9 = *(_DWORD *)(a2 + 8);
LABEL_53:
  if (v9 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 4);
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v5;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C498456C(_QWORD *a1, int a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _WORD *v7;
  unsigned __int16 v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v30;

  v4 = a1[31];
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(unsigned int *)(*v5 + 24 * a3 + 16);
  v7 = (_WORD *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  v8 = *v7 + (v6 & 0xF) * a3;
  v9 = a1 + 176;
  v10 = a1 + 197;
  v30 = a2 + 1;
  LODWORD(v11) = 0x7FFFFFFF;
  while (1)
  {
    v12 = v8;
    v13 = sub_1C4983EC8(v9, v8);
    v15 = v14;
    if (v9 == v13 && v14 == 0xFFFFFFFFLL)
    {
LABEL_15:
      v20 = 0x7FFFFFFF;
    }
    else
    {
      v17 = v13;
      v18 = v14;
      while (1)
      {
        v19 = *v17 + 16 * v15;
        v20 = *(_DWORD *)(v19 + 4);
        if (v20 > a2)
          break;
        v15 = *(unsigned int *)(v19 + 12);
        if (v20 != a2)
          sub_1C49855C0(v9, (uint64_t)v17, v18);
        v18 = v15;
        if (v9 == v17 && (_DWORD)v15 == -1)
          goto LABEL_15;
      }
    }
    v22 = sub_1C4983EC8(v10, v12);
    v23 = v21;
    v24 = v21;
    if (v10 == v22 && v21 == 0xFFFFFFFFLL)
    {
LABEL_23:
      v26 = 0x7FFFFFFF;
    }
    else
    {
      while (1)
      {
        v25 = *v22 + 16 * v24;
        v26 = *(_DWORD *)(v25 + 4);
        if (v26 > a2)
          break;
        v24 = *(unsigned int *)(v25 + 12);
        if (v26 != a2)
          sub_1C49855C0(v10, (uint64_t)v22, v23);
        v23 = v24;
        if (v10 == v22 && (_DWORD)v24 == -1)
          goto LABEL_23;
      }
    }
    v27 = (int)v11 >= v26 ? v26 : v11;
    v11 = v26 <= v20 ? v27 : v11;
    if ((_DWORD)v11 == v30)
      return v30;
    v28 = (unsigned __int16)v7[1];
    ++v7;
    v8 = v28 + v12;
    if (!v28)
      return v11;
  }
}

uint64_t sub_1C4984724(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t result;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t i;
  int v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  int v44;
  int *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  _QWORD *v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  BOOL v55;
  unsigned int v56;

  v9 = a3;
  v10 = a1 + 40 * a3;
  v11 = (unsigned int *)(v10 + 776);
  result = sub_1C4985538(v10 + 776, a2);
  v13 = *(_DWORD *)(v10 + 776);
  v14 = v13 & 1;
  v15 = (_QWORD *)(v10 + 784);
  if ((v13 & 1) != 0)
  {
    v16 = 4;
    v17 = v15;
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 40 * v9 + 792);
    if (!v16)
    {
      v26 = 0;
      v27 = 0;
      goto LABEL_19;
    }
    v17 = (_QWORD *)*v15;
  }
  v18 = v16 - 1;
  v19 = v18 & (37 * a2);
  v20 = (int *)&v17[v19];
  v21 = *v20;
  if (*v20 == a2)
    goto LABEL_24;
  v22 = 0;
  v23 = 1;
  while (v21 != -1)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v21 == -2;
    if (v24)
      v22 = v20;
    v25 = v19 + v23++;
    v19 = v25 & v18;
    v20 = (int *)&v17[v19];
    v21 = *v20;
    if (*v20 == a2)
      goto LABEL_24;
  }
  if (v22)
    v26 = v22;
  else
    v26 = v20;
  if ((v13 & 1) != 0)
    v27 = 4;
  else
    v27 = *(_DWORD *)(a1 + 40 * v9 + 792);
LABEL_19:
  if (4 * (v13 >> 1) + 4 >= 3 * v27)
  {
    result = (uint64_t)sub_1C49856A0((uint64_t)v11, 2 * v27);
    v13 = *v11;
    if ((*v11 & 1) != 0)
    {
      v49 = 4;
      v50 = v15;
    }
    else
    {
      v49 = *(_DWORD *)(a1 + 40 * v9 + 792);
      if (!v49)
        goto LABEL_77;
      v50 = (_QWORD *)*v15;
    }
    v14 = *v11 & 1;
    v51 = v49 - 1;
    v52 = (v49 - 1) & (37 * a2);
    v26 = (int *)&v50[v52];
    v53 = *v26;
    if (*v26 == a2)
      goto LABEL_21;
    v45 = 0;
    v54 = 1;
    while (v53 != -1)
    {
      if (v45)
        v55 = 0;
      else
        v55 = v53 == -2;
      if (v55)
        v45 = v26;
      v56 = v52 + v54++;
      v52 = v56 & v51;
      v26 = (int *)&v50[v56 & v51];
      v53 = *v26;
      if (*v26 == a2)
        goto LABEL_21;
    }
    goto LABEL_72;
  }
  if (v27 + ~(v13 >> 1) - *(_DWORD *)(a1 + 40 * v9 + 780) <= v27 >> 3)
  {
    result = (uint64_t)sub_1C49856A0((uint64_t)v11, v27);
    v13 = *v11;
    if ((*v11 & 1) != 0)
    {
      v40 = 4;
      v41 = v15;
      goto LABEL_48;
    }
    v40 = *(_DWORD *)(a1 + 40 * v9 + 792);
    if (v40)
    {
      v41 = (_QWORD *)*v15;
LABEL_48:
      v14 = *v11 & 1;
      v42 = v40 - 1;
      v43 = (v40 - 1) & (37 * a2);
      v26 = (int *)&v41[v43];
      v44 = *v26;
      if (*v26 == a2)
        goto LABEL_21;
      v45 = 0;
      v46 = 1;
      while (v44 != -1)
      {
        if (v45)
          v47 = 0;
        else
          v47 = v44 == -2;
        if (v47)
          v45 = v26;
        v48 = v43 + v46++;
        v43 = v48 & v42;
        v26 = (int *)&v41[v48 & v42];
        v44 = *v26;
        if (*v26 == a2)
          goto LABEL_21;
      }
LABEL_72:
      if (v45)
        v26 = v45;
      goto LABEL_21;
    }
LABEL_77:
    v14 = 0;
    v26 = 0;
  }
LABEL_21:
  *v11 = (v13 & 0xFFFFFFFE | v14) + 2;
  if (*v26 != -1)
    --*(_DWORD *)(a1 + 40 * v9 + 780);
  *v26 = a2;
  v26[1] = a5;
  v13 = *v11;
LABEL_24:
  v28 = v13 >> 1;
  v29 = *(unsigned int *)(a1 + 4 * v9);
  if ((_DWORD)v29)
  {
    for (i = 0; i != v29; ++i)
    {
      if ((v13 & 1) != 0)
      {
        v31 = 4;
        v32 = v15;
      }
      else
      {
        v31 = *(_DWORD *)(a1 + 40 * v9 + 792);
        if (!v31)
          goto LABEL_34;
        v32 = (_QWORD *)*v15;
      }
      v33 = *(_DWORD *)(a1 + 384 * v9 + 16 * i + 8);
      v34 = v31 - 1;
      result = (37 * v33) & v34;
      v35 = v32[result];
      if (v33 != v35)
      {
        v36 = 1;
        while (v35 != -1)
        {
          v37 = result + v36++;
          result = v37 & v34;
          v35 = v32[result];
          if (v33 == v35)
            goto LABEL_33;
        }
LABEL_34:
        v38 = 0;
        goto LABEL_35;
      }
LABEL_33:
      v38 = -1;
LABEL_35:
      v28 += v38;
    }
  }
  v39 = a4 - v28;
  if (a4 < v28)
    v39 = 0;
  if (v39 >= v29)
    v39 = *(_DWORD *)(a1 + 4 * v9);
  *(_DWORD *)(a1 + 4 * v9) = v39;
  return result;
}

uint64_t sub_1C4984AB4(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  int *v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;

  v5 = result;
  v6 = a3;
  v7 = *(unsigned int *)(result + 4 * a3);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    while (*(_DWORD *)(result + 384 * a3 + v9 + 8) != *(_DWORD *)a2)
    {
      v9 += 16;
      --v8;
      if (16 * v7 == v9)
      {
        v10 = 0;
        v11 = result + 40 * a3;
        v12 = (_DWORD *)(v11 + 776);
        v13 = *(_DWORD *)(v11 + 776) >> 1;
        v14 = *(_DWORD *)(v11 + 776) & 1;
        v15 = (_QWORD *)(v11 + 784);
        v16 = (int *)(v11 + 792);
        while (1)
        {
          if (v14)
          {
            v17 = 4;
            v18 = v15;
          }
          else
          {
            v17 = *v16;
            if (!*v16)
              goto LABEL_14;
            v18 = (_QWORD *)*v15;
          }
          v19 = *(_DWORD *)(v5 + 384 * v6 + 16 * v10 + 8);
          v20 = v17 - 1;
          result = (37 * v19) & v20;
          v21 = v18[result];
          if (v19 != v21)
          {
            v22 = 1;
            while (v21 != -1)
            {
              v23 = result + v22++;
              result = v23 & v20;
              v21 = v18[result];
              if (v19 == v21)
                goto LABEL_13;
            }
LABEL_14:
            v24 = 0;
            goto LABEL_15;
          }
LABEL_13:
          v24 = -1;
LABEL_15:
          v13 += v24;
          if (++v10 == v7)
            goto LABEL_19;
        }
      }
    }
    v39 = result + 384 * a3 + v9;
    *(_DWORD *)(v39 + 12) = *(_DWORD *)(a2 + 4);
    v40 = *(_QWORD *)(a2 + 8);
    v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    v42 = v40 & 0xFFFFFFFFFFFFFFF8;
    if ((v40 & 4) != 0)
      v42 = **(_QWORD **)v41;
    v43 = -v8;
    v44 = *(_QWORD *)(v39 + 16);
    v45 = v44 & 0xFFFFFFFFFFFFFFF8;
    v46 = v44 & 0xFFFFFFFFFFFFFFF8;
    if ((v44 & 4) != 0)
      v46 = **(_QWORD **)v45;
    if (v42 != v46)
    {
      if ((v40 & 4) != 0)
        v41 = **(_QWORD **)v41;
      if (v44 <= 7)
      {
        *(_QWORD *)(v39 + 16) = v41 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        if ((v44 & 4) == 0)
        {
          result = operator new();
          *(_QWORD *)result = result + 16;
          *(_QWORD *)(result + 8) = 0x400000000;
          *(_QWORD *)(v39 + 16) = result | 4;
          v47 = result & 0xFFFFFFFFFFFFFFF8;
          v48 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v48 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFF8, v47 + 16, v48 + 1, 8);
            LODWORD(v48) = *(_DWORD *)(v47 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v47 + 8 * v48) = v45;
          ++*(_DWORD *)(v47 + 8);
          v45 = *(_QWORD *)(v39 + 16) & 0xFFFFFFFFFFFFFFF8;
        }
        v49 = *(unsigned int *)(v45 + 8);
        if (v49 >= *(_DWORD *)(v45 + 12))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v45, v45 + 16, v49 + 1, 8);
          LODWORD(v49) = *(_DWORD *)(v45 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v45 + 8 * v49) = v41;
        ++*(_DWORD *)(v45 + 8);
        LODWORD(v7) = *(_DWORD *)(v5 + 4 * v6);
      }
    }
    if ((int)v7 - 1 > v43)
    {
      v50 = v39 + 16;
      do
      {
        if (*(_DWORD *)(v50 - 4) <= *(_DWORD *)(v50 + 12))
          break;
        v57 = *(_OWORD *)(v50 - 8);
        *(_QWORD *)(v50 - 8) = *(_QWORD *)(v50 + 8);
        *(_QWORD *)v50 = 0;
        v51 = v50 + 16;
        sub_1C484FAD8((uint64_t *)v50, (uint64_t *)(v50 + 16));
        *(_QWORD *)(v50 + 8) = v57;
        result = (uint64_t)sub_1C484FAD8((uint64_t *)(v50 + 16), (uint64_t *)&v57 + 1);
        if ((BYTE8(v57) & 4) != 0)
        {
          v52 = (void **)(*((_QWORD *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8);
          if ((*((_QWORD *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v52 != v52 + 2)
              free(*v52);
            result = MEMORY[0x1CAA32FC0](v52, 0x1080C40ED926357);
          }
        }
        ++v43;
        v50 = v51;
      }
      while (v43 < (*(_DWORD *)(v5 + 4 * v6) - 1));
    }
    return result;
  }
  v12 = (_DWORD *)(result + 40 * a3 + 776);
  v13 = *v12 >> 1;
  v14 = *v12 & 1;
LABEL_19:
  v25 = a4 >= v13;
  v26 = a4 - v13;
  if (!v25)
    v26 = 0;
  v27 = (_QWORD *)(v5 + 40 * v6 + 784);
  if (v14)
  {
    v28 = 4;
  }
  else
  {
    v28 = *(_DWORD *)(v5 + 40 * v6 + 792);
    if (!v28)
    {
LABEL_29:
      v34 = 0;
      goto LABEL_30;
    }
    v27 = (_QWORD *)*v27;
  }
  v29 = v28 - 1;
  v30 = (37 * *(_DWORD *)a2) & v29;
  v31 = v27[v30];
  if (*(_DWORD *)a2 != v31)
  {
    v32 = 1;
    while (v31 != -1)
    {
      v33 = v30 + v32++;
      v30 = v33 & v29;
      v31 = v27[v30];
      if (*(_DWORD *)a2 == v31)
        goto LABEL_28;
    }
    goto LABEL_29;
  }
LABEL_28:
  v34 = 1;
LABEL_30:
  v35 = v34 + v26;
  if (v35 - 25 < 0xFFFFFFE8)
    return result;
  if (v7 >= v35)
  {
    LODWORD(v7) = v35 - 1;
    if (*(_DWORD *)(a2 + 4) >= *(_DWORD *)(v5 + 384 * v6 + 16 * (v35 - 1) + 12))
      return result;
    *(_DWORD *)(v5 + 4 * v6) = v7;
  }
  if ((_DWORD)v7)
  {
    v36 = 0;
    v37 = (int *)(v5 + 384 * v6 + 12);
    while (1)
    {
      v38 = *v37;
      v37 += 4;
      if (*(_DWORD *)(a2 + 4) < v38)
        break;
      if (v7 == ++v36)
      {
        LODWORD(v36) = v7;
        break;
      }
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if (v7 > v36)
  {
    v53 = 16 * v7;
    v54 = v5 + 384 * v6;
    v55 = 16 * (v7 - 1);
    do
    {
      *(_QWORD *)(v54 + v53 + 8) = *(_QWORD *)(v54 + v55 + 8);
      sub_1C484FAD8((uint64_t *)(v54 + v53 + 16), (uint64_t *)(v54 + v55 + 16));
      v54 -= 16;
      LODWORD(v7) = v7 - 1;
    }
    while (v36 < v7);
  }
  v56 = v5 + 384 * v6 + 16 * v36;
  *(_QWORD *)(v56 + 8) = *(_QWORD *)a2;
  sub_1C484E2BC((unint64_t *)(v56 + 16), (unint64_t *)(a2 + 8));
  ++*(_DWORD *)(v5 + 4 * v6);
  return sub_1C4985538((uint64_t)v12, *(_DWORD *)a2);
}

uint64_t sub_1C4984FA4(uint64_t result, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;

  v7 = result;
  v9 = a2 + 8;
  v8 = *(_DWORD *)a2;
  v10 = *(_DWORD *)a2 & 1;
  if (v10)
  {
    v11 = 2;
    v12 = a2 + 8;
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 16);
    if (!v11)
    {
      v15 = 0;
      v18 = 0;
      goto LABEL_10;
    }
    v12 = *(_QWORD *)(a2 + 8);
  }
  v13 = v11 - 1;
  v14 = (37 * *a3) & (v11 - 1);
  v15 = v12 + 16 * v14;
  v16 = *(_DWORD *)v15;
  if (*a3 == *(_DWORD *)v15)
  {
LABEL_39:
    if (v10)
    {
      v30 = 2;
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 8);
      v30 = *(unsigned int *)(a2 + 16);
    }
    v21 = 0;
    v20 = v9 + 16 * v30;
    goto LABEL_18;
  }
  v17 = 0;
  result = 1;
  while (v16 != -1)
  {
    if (v17)
      v28 = 0;
    else
      v28 = v16 == -2;
    if (v28)
      v17 = v15;
    v29 = v14 + result;
    result = (result + 1);
    v14 = v29 & v13;
    v15 = v12 + 16 * (v29 & v13);
    v16 = *(_DWORD *)v15;
    if (*a3 == *(_DWORD *)v15)
      goto LABEL_39;
  }
  if (v17)
    v15 = v17;
  if (v10)
    v18 = 2;
  else
    v18 = *(_DWORD *)(a2 + 16);
LABEL_10:
  if (4 * (v8 >> 1) + 4 < 3 * v18)
  {
    if (v18 + ~(v8 >> 1) - *(_DWORD *)(a2 + 4) <= v18 >> 3)
    {
      sub_1C49852B4(a2, v18);
      v33 = 0;
      result = sub_1C498521C(a2, *a3, &v33);
      v15 = v33;
      v8 = *(_DWORD *)a2;
      v10 = *(_DWORD *)a2 & 1;
    }
    goto LABEL_13;
  }
  result = (uint64_t)sub_1C49852B4(a2, 2 * v18);
  v8 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v22 = 2;
    v23 = v9;
    goto LABEL_22;
  }
  v22 = *(_DWORD *)(a2 + 16);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 8);
LABEL_22:
    v10 = *(_DWORD *)a2 & 1;
    v24 = v22 - 1;
    v25 = (37 * *a3) & (v22 - 1);
    v15 = v23 + 16 * v25;
    v26 = *(_DWORD *)v15;
    if (*a3 != *(_DWORD *)v15)
    {
      v27 = 0;
      result = 1;
      while (v26 != -1)
      {
        if (v27)
          v31 = 0;
        else
          v31 = v26 == -2;
        if (v31)
          v27 = v15;
        v32 = v25 + result;
        result = (result + 1);
        v25 = v32 & v24;
        v15 = v23 + 16 * (v32 & v24);
        v26 = *(_DWORD *)v15;
        if (*a3 == *(_DWORD *)v15)
          goto LABEL_13;
      }
      if (v27)
        v15 = v27;
    }
    goto LABEL_13;
  }
  v10 = 0;
  v15 = 0;
LABEL_13:
  *(_DWORD *)a2 = (v8 & 0xFFFFFFFE | v10) + 2;
  if (*(_DWORD *)v15 != -1)
    --*(_DWORD *)(a2 + 4);
  *(_DWORD *)v15 = *a3;
  *(_QWORD *)(v15 + 8) = *a4;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v19 = 2;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 8);
    v19 = *(unsigned int *)(a2 + 16);
  }
  v20 = v9 + 16 * v19;
  v21 = 1;
LABEL_18:
  *(_QWORD *)v7 = v15;
  *(_QWORD *)(v7 + 8) = v20;
  *(_BYTE *)(v7 + 16) = v21;
  return result;
}

uint64_t sub_1C498521C(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C49852B4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  int v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4985438((_DWORD *)a1, v6, &v6[4 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  v10 = 1;
  v11 = a1 + 8;
  do
  {
    v12 = v8;
    if (*(_DWORD *)v11 <= 0xFFFFFFFD)
    {
      *v9 = *(_DWORD *)v11;
      *((_QWORD *)v9 + 1) = *(_QWORD *)(v11 + 8);
      v9 += 4;
    }
    v11 = a1 + 8 + 16 * v10;
    v8 = 1;
    v10 = 2;
  }
  while ((v12 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C4985438((_DWORD *)a1, v16, v9);
}

_DWORD *sub_1C4985438(_DWORD *result, int *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_DWORD *)*((_QWORD *)result + 1);
    v6 = &v5[4 * v4];
  }
  do
  {
    *v5 = -1;
    v5 += 4;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 2;
        v9 = result + 2;
      }
      else
      {
        v9 = (_DWORD *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & (37 * v7);
      v12 = &v9[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -1)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -2;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *v12 = v7;
      *((_QWORD *)v12 + 1) = *((_QWORD *)a2 + 1);
      *result += 2;
    }
    a2 += 4;
  }
  return result;
}

uint64_t sub_1C4985538(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v3 = 4;
  }
  else
  {
    v3 = *(_DWORD *)(result + 16);
    if (!v3)
      return result;
    v2 = *(_QWORD *)(result + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  v6 = (int *)(v2 + 8 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_9:
    *v6 = -2;
    v10 = *(_DWORD *)(result + 4) + 1;
    *(_DWORD *)result -= 2;
    *(_DWORD *)(result + 4) = v10;
  }
  else
  {
    v8 = 1;
    while (v7 != -1)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v7 = *(_DWORD *)(v2 + 8 * v5);
      if (v7 == a2)
      {
        v6 = (int *)(v2 + 8 * v5);
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t *sub_1C49855C0(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  v4 = result;
  v5 = a3;
  v6 = *result;
  v7 = (unsigned int *)(*result + 16 * a3);
  v8 = v7 + 2;
  v9 = v7[2];
  if (a3 != v9)
  {
    v10 = *(unsigned int *)(v6 + 16 * a3 + 12);
    if (*(_DWORD *)(v6 + 16 * v9 + 12) == -1)
    {
      *(_WORD *)(result[18] + 2 * *v7) = v10;
      *(_DWORD *)(v6 + 16 * v10 + 8) = v9;
    }
    else if ((_DWORD)v10 == -1)
    {
      result = sub_1C4983EC8(result, *v7);
      *(_DWORD *)(*result + 16 * v11 + 8) = v9;
      *(_DWORD *)(v6 + 16 * *v8 + 12) = -1;
    }
    else
    {
      *(_DWORD *)(v6 + 16 * v10 + 8) = v9;
      *(_DWORD *)(v6 + 16 * *v8 + 12) = v10;
    }
  }
  *v8 = -1;
  v12 = *((_DWORD *)v4 + 41);
  *(_DWORD *)(v6 + 16 * v5 + 12) = *((_DWORD *)v4 + 40);
  *((_DWORD *)v4 + 40) = a3;
  *((_DWORD *)v4 + 41) = v12 + 1;
  return result;
}

_DWORD *sub_1C49856A0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4985814((_DWORD *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *v9 = v10;
      v9[1] = *(_DWORD *)(a1 + v8 + 12);
      v9 += 2;
    }
    v8 += 8;
  }
  while (v8 != 32);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4985814((_DWORD *)a1, v14, v9);
}

_DWORD *sub_1C4985814(_DWORD *result, int *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_DWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -1;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 4;
        v8 = result + 2;
      }
      else
      {
        v8 = (_DWORD *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & (37 * v7);
      v12 = &v8[2 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -1)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -2;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v8[2 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_23;
        }
        if (v14)
          v12 = v14;
      }
LABEL_23:
      *v12 = v7;
      v12[1] = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C498591C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;

  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a2 < *a1)
    return 1;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v3 < v2)
    return 1;
  v5 = a1[2];
  v6 = a2[2];
  if (v5 >= v6)
    return v6 < v5;
  else
    return 0xFFFFFFFFLL;
}

void sub_1C4985980()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4985994(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  llvm::MachineFunction *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28[4];
  unsigned __int8 *v29;

  v27 = 0;
  if (a3 + 48 == a2)
  {
    v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v10 || (*(_BYTE *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 4) != 0)
        v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (unsigned __int8 **)(v10 + 56);
  }
  else
  {
    if (**(unsigned __int16 **)(a2 + 16) - 789 < 3)
      return;
    v9 = (unsigned __int8 **)(a2 + 56);
  }
  if (v9 != &v27 && (v11 = *v9, (v27 = v11) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v27, v11, 2);
    v12 = *(_QWORD *)(a5 + 8) + 397296;
    v13 = *(llvm::MachineFunction **)(a3 + 32);
    v29 = v27;
    if (v27)
      llvm::MetadataTracking::track((uint64_t)&v29, v27, 2);
  }
  else
  {
    v12 = *(_QWORD *)(a5 + 8) + 397296;
    v13 = *(llvm::MachineFunction **)(a3 + 32);
    v29 = 0;
  }
  v14 = *((_QWORD *)v13 + 28);
  if (v14)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v28[0] = v29;
  if (v29)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v29, v29, (uint64_t)v28);
    v29 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v13, v12, v28, 0);
  if (v28[0])
    llvm::MetadataTracking::untrack((uint64_t)v28, v28[0]);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  v15 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v14 + 24) = v15;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v17)
  {
    v20 = *(_QWORD *)(v14 + 32);
    v21 = *(_QWORD *)(v16 + 40);
    v22 = 32 * v17;
    do
    {
      if (!*(_BYTE *)v20)
      {
        v23 = *(unsigned int *)(v20 + 4);
        if ((int)v23 >= 0)
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * v23);
        else
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        v25 = *v24;
        if (*v24)
        {
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = v20;
          *(_QWORD *)(v20 + 16) = v26;
          if ((*(_BYTE *)(v20 + 3) & 1) != 0)
          {
            *(_QWORD *)(v20 + 24) = v25;
          }
          else
          {
            *(_QWORD *)(v20 + 24) = 0;
            v24 = (uint64_t *)(v26 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v20 + 16) = v20;
          *(_QWORD *)(v20 + 24) = 0;
        }
        *v24 = v20;
      }
      v20 += 32;
      v22 -= 32;
    }
    while (v22);
  }
  v18 = *(_QWORD *)(v16 + 728);
  if (v18)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 24))(v18, v14);
  v19 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v19 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = a2;
  *(_QWORD *)(v19 + 8) = v14;
  *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v14;
  LODWORD(v28[0]) = 1;
  v28[1] = 0;
  v28[2] = (unsigned __int8 *)a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)v28);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
}

uint64_t sub_1C4985C1C()
{
  return 0;
}

BOOL sub_1C4985C24(uint64_t a1, uint64_t a2)
{
  return (~*(_DWORD *)(*(_QWORD *)(a2 + 16) + 16) & 0x800100) != 0;
}

uint64_t sub_1C4985C44(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 5) & 1;
}

BOOL sub_1C4985C54(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  BOOL v5;

  v2 = *(unsigned __int16 **)(a2 + 16);
  v3 = *v2;
  v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  return !v5 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0;
}

uint64_t sub_1C4985CA4()
{
  return 0;
}

uint64_t sub_1C4985CAC()
{
  return 0;
}

BOOL sub_1C4985CB8(uint64_t a1, int a2)
{
  return a2 == 7;
}

void *sub_1C4985CC4(void *result, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _WORD *v18;
  unsigned __int16 *v19;
  __int16 v20;
  unsigned __int16 v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = result;
  v7 = a2;
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    v7 = a2;
    do
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  v8 = *(_QWORD *)(a2 + 24) + 48;
  v9 = *(int **)(v7 + 32);
  v10 = *(unsigned int *)(v7 + 40);
  v11 = &v9[8 * v10];
  if (!(_DWORD)v10)
  {
    v24 = *(_QWORD *)(v7 + 8);
    if (v24 == v8)
    {
      v7 = *(_QWORD *)(a2 + 24) + 48;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 24) + 48;
      if ((*(_WORD *)(v24 + 44) & 4) != 0)
      {
        do
        {
          v25 = v24;
          v26 = *(unsigned int *)(v24 + 40);
          if ((_DWORD)v26)
          {
            v7 = v24;
            goto LABEL_41;
          }
          v24 = *(_QWORD *)(v24 + 8);
        }
        while (v24 != v8 && (*(_WORD *)(v24 + 44) & 4) != 0);
        v7 = *(_QWORD *)(a2 + 24) + 48;
LABEL_41:
        v9 = *(int **)(v25 + 32);
        v11 = &v9[8 * v26];
      }
    }
  }
  if (v9 != v11)
  {
    v27 = a4 + 16;
    while (1)
    {
      v12 = *v9;
      if (!*v9)
      {
        v16 = v9[1];
        if ((_DWORD)v16)
        {
          if ((v12 & 0x2000000) != 0 || *(_BYTE *)(*(_QWORD *)(a3[27] + 16) + v16))
          {
            if ((v12 & 0x2000000) == 0)
              goto LABEL_19;
            result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 80))(v6);
            if ((_DWORD)result)
              break;
          }
        }
      }
LABEL_6:
      v9 += 8;
      if (v9 == v11)
      {
        v13 = *(_QWORD *)(v7 + 8);
        if (v13 == v8)
          return result;
        v9 = v11;
        v7 = v8;
        if ((*(_WORD *)(v13 + 44) & 4) != 0)
        {
          while (1)
          {
            v14 = v13;
            v15 = *(unsigned int *)(v13 + 40);
            if ((_DWORD)v15)
              break;
            v13 = *(_QWORD *)(v13 + 8);
            if (v13 == v8 || (*(_WORD *)(v13 + 44) & 4) == 0)
            {
              v7 = v8;
              goto LABEL_27;
            }
          }
          v7 = v13;
LABEL_27:
          v9 = *(int **)(v14 + 32);
          v11 = &v9[8 * v15];
        }
      }
      if (v9 == v11)
        return result;
    }
    LODWORD(v16) = v9[1];
LABEL_19:
    v17 = *(unsigned int *)(a3[1] + 24 * v16 + 16);
    v18 = (_WORD *)(a3[7] + ((v17 >> 3) & 0x1FFFFFFE));
    v20 = *v18;
    v19 = v18 + 1;
    v21 = v20 + (v17 & 0xF) * v16;
    do
    {
      if ((*((_BYTE *)v9 + 3) & 1) != 0)
      {
        v22 = *(unsigned int *)(a4 + 8);
        if (v22 >= *(unsigned int *)(a4 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v27, v22 + 1, 4);
          v22 = *(unsigned int *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v22) = v21;
        ++*(_DWORD *)(a4 + 8);
      }
      v23 = *v19++;
      v21 += v23;
    }
    while (v23);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1C4985EE8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 2) & 1;
}

uint64_t sub_1C4985EF8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  BOOL v13;
  BOOL v14;
  unint64_t v15;

  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = *((_QWORD *)v4 + 2);
  *a3 = 3;
  v6 = v5 & 0x800200;
  v7 = v5 & 0xE00;
  if ((v7 == 1536 || v7 == 3584 || v7 == 2560) && (v8 = v5 & 0xD00, v8 != 1280) && v8 != 3328 && v8 != 2304
    || v6 == 8389120)
  {
    v9 = 0;
  }
  else
  {
    v10 = *v4;
    v11 = v10 - 2970;
    v9 = (v10 - 4593) < 0xFFFFFFF4;
    if (v11 < 0x48)
      v9 = 0;
  }
  a3[1] = v9;
  result = sub_1C498794C(a2);
  a3[2] = result;
  a3[3] = (v5 & 2) != 0;
  v13 = 1;
  if (v6 != 8389120)
  {
    v14 = v7 == 2560 || (v5 & 0x800100) == 8388864;
    if (!v14 && (v5 & 0xD00) != 0x900)
    {
      HIDWORD(v15) = *v4;
      LODWORD(v15) = HIDWORD(v15) - 4104;
      v13 = (v15 >> 3) < 8;
    }
  }
  a3[6] = v13;
  a3[5] = (~(_WORD)v5 & 0x500) == 0;
  a3[4] = (v5 & 0x10) != 0;
  return result;
}

uint64_t sub_1C4986034()
{
  return 0;
}

void sub_1C498603C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  __int16 v50;
  unint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  llvm::MachineFunction *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  _BOOL4 v74;
  BOOL v75;
  int v76;
  _BOOL4 v77;
  BOOL v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  BOOL v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  int v90;
  BOOL v92;
  _BOOL4 v93;
  unsigned __int16 *v94;
  int v95;
  BOOL v96;
  BOOL v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int16 *v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unsigned __int16 *v108;
  unint64_t v109;
  llvm::MachineFunction *v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t v128;
  llvm *v129;
  llvm *UnderlyingObject;
  llvm *v131;
  llvm *v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned __int16 *v138;
  int v139;
  unsigned int v141;
  BOOL v143;
  unsigned int v144;
  unint64_t v145;
  __int16 v146;
  _WORD *v147;
  unsigned __int16 v148;
  _QWORD *j;
  unsigned int v150;
  uint64_t v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t k;
  uint64_t v157;
  unsigned int v158;
  unsigned __int16 *v159;
  unsigned __int16 *v160;
  int v161;
  int v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t i;
  uint64_t v170;
  unsigned int v171;
  unsigned __int16 *v172;
  unsigned __int16 *v173;
  int v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  unsigned __int16 *v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  int v189;
  unsigned __int16 *v190;
  int v191;
  BOOL v192;
  BOOL v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  __int16 v200;
  _WORD *v201;
  unsigned __int16 v202;
  _QWORD *m;
  unsigned int v204;
  uint64_t v205;
  _DWORD *v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  _BYTE *v229;
  int v230;
  _BOOL4 v231;
  unsigned __int8 *v233;
  void *v234;
  uint64_t v235;
  _QWORD v236[8];
  _QWORD **v237;
  _QWORD *v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  _BYTE v242[16];
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 6;
  v4 = a2[7];
  if (a2 + 6 == (_QWORD *)v4)
    return;
  v5 = 0;
  v6 = -1;
  do
  {
    v7 = v4;
    if (!v4 || (v8 = v4, (*(_BYTE *)v4 & 4) == 0))
    {
      v8 = v4;
      if ((*(_WORD *)(v4 + 44) & 8) != 0)
      {
        v8 = v4;
        do
          v8 = *(_QWORD *)(v8 + 8);
        while ((*(_WORD *)(v8 + 44) & 8) != 0);
      }
    }
    v4 = *(_QWORD *)(v8 + 8);
    v9 = *(unsigned __int16 **)(v7 + 16);
    v10 = *v9;
    if (v10 == 8277)
    {
      if ((unint64_t *)v4 == v3
        || ((v11 = *(unsigned __int16 **)(v4 + 16), v12 = *v11, (v12 - 9) <= 0x3C)
          ? (v13 = ((1 << (v12 - 9)) & 0x1000000000000605) == 0)
          : (v13 = 1),
            v13 ? (v14 = v12 == 0) : (v14 = 1),
            v14 || (v11[4] & 0x10) != 0 || (v11[8] & 1) != 0))
      {
        if (!v5 || v6 > 7)
        {
          v6 = 0;
          v5 = (uint64_t *)v7;
          goto LABEL_54;
        }
        v15 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 32);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 728);
          if (v16)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v7);
          v17 = *(unsigned int *)(v7 + 40);
          if ((_DWORD)v17)
          {
            v18 = *(_QWORD *)(v7 + 32);
            v19 = *(_QWORD *)(v15 + 40);
            v20 = 32 * v17;
            do
            {
              if (!*(_BYTE *)v18)
              {
                v21 = *(unsigned int *)(v18 + 4);
                if ((v21 & 0x80000000) != 0)
                  v22 = (uint64_t *)(*(_QWORD *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
                else
                  v22 = (uint64_t *)(*(_QWORD *)(v19 + 272) + 8 * v21);
                v23 = *v22;
                v25 = *(_QWORD *)(v18 + 16);
                v24 = *(_QWORD *)(v18 + 24);
                if (v18 != *v22)
                  v22 = (uint64_t *)(v25 + 24);
                *v22 = v24;
                if (v24)
                  v26 = v24;
                else
                  v26 = v23;
                *(_QWORD *)(v26 + 16) = v25;
                *(_QWORD *)(v18 + 16) = 0;
                *(_QWORD *)(v18 + 24) = 0;
              }
              v18 += 32;
              v20 -= 32;
            }
            while (v20);
          }
        }
        v29 = *(unint64_t **)(v7 + 8);
        v30 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
        *v29 = v30 | *v29 & 7;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)v7 &= 7uLL;
        *(_QWORD *)(v7 + 8) = 0;
        v31 = a2[5];
        *(_QWORD *)(v7 + 24) = v31;
        v32 = *(_QWORD *)(v31 + 32);
        v33 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v33)
        {
          v36 = *(_QWORD *)(v7 + 32);
          v37 = *(_QWORD *)(v32 + 40);
          v38 = 32 * v33;
          do
          {
            if (!*(_BYTE *)v36)
            {
              v39 = *(unsigned int *)(v36 + 4);
              if ((int)v39 >= 0)
                v40 = (uint64_t *)(*(_QWORD *)(v37 + 272) + 8 * v39);
              else
                v40 = (uint64_t *)(*(_QWORD *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
              v41 = *v40;
              if (*v40)
              {
                v42 = *(_QWORD *)(v41 + 16);
                *(_QWORD *)(v41 + 16) = v36;
                *(_QWORD *)(v36 + 16) = v42;
                if ((*(_BYTE *)(v36 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v36 + 24) = v41;
                }
                else
                {
                  *(_QWORD *)(v36 + 24) = 0;
                  v40 = (uint64_t *)(v42 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v36 + 16) = v36;
                *(_QWORD *)(v36 + 24) = 0;
              }
              *v40 = v36;
            }
            v36 += 32;
            v38 -= 32;
          }
          while (v38);
        }
        v34 = *(_QWORD *)(v32 + 728);
        if (v34)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, v7);
        v35 = *v5 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = v35 | *(_QWORD *)v7 & 7;
        *(_QWORD *)(v7 + 8) = v5;
        *(_QWORD *)(v35 + 8) = v7;
        *v5 = *v5 & 7 | v7;
      }
LABEL_53:
      v5 = 0;
      goto LABEL_54;
    }
    v28 = (v10 - 9) <= 0x3C && ((1 << (v10 - 9)) & 0x1000000000000605) != 0
       || v10 == 0;
    if (!v28 && (v9[4] & 0x10) == 0 && (*((_QWORD *)v9 + 2) & 1) == 0)
      goto LABEL_53;
LABEL_54:
    ++v6;
  }
  while ((unint64_t *)v4 != v3);
  v43 = (_QWORD *)a2[4];
  v44 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v43[1] + 16))(v43[1], *v43);
  v45 = (_BYTE *)v44;
  v230 = (*(unsigned __int16 *)(*v43 + 18) >> 4) & 0x3FF;
  if (*(_BYTE *)(v44 + 318))
    v46 = 4670;
  else
    v46 = 4671;
  v227 = v46;
  v47 = v43[2];
  v48 = a2;
  v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 104))(v47);
  v229 = v45;
  if (v45[311])
  {
    if (v230 != 100)
    {
      v49 = (unint64_t *)a2[7];
      if (v49 != v3)
      {
        while (!v49 || (*(_BYTE *)v49 & 4) == 0)
        {
          v50 = *((_WORD *)v49 + 22);
          if ((v50 & 8) == 0)
            goto LABEL_82;
          v51 = v49;
          do
            v51 = (unint64_t *)v51[1];
          while ((*((_WORD *)v51 + 22) & 8) != 0);
LABEL_83:
          v52 = (unint64_t *)v51[1];
          v53 = *(_QWORD *)(v49[2] + 8);
          if ((v50 & 0xC) != 0 && (v50 & 4) == 0)
          {
            v54 = v49;
            if ((v53 & 0x400) == 0)
            {
              while ((*((_WORD *)v54 + 22) & 8) != 0)
              {
                v54 = (unint64_t *)v54[1];
                if ((*(_BYTE *)(v54[2] + 9) & 4) != 0)
                  goto LABEL_90;
              }
              goto LABEL_103;
            }
LABEL_90:
            v233 = 0;
            v55 = *(_QWORD *)(v225 + 8);
            v56 = (llvm::MachineFunction *)a2[4];
            v240 = 0;
            v57 = *((_QWORD *)v56 + 28);
            if (v57)
            {
              *((_QWORD *)v56 + 28) = *(_QWORD *)v57;
              v234 = 0;
            }
            else
            {
              v57 = sub_1C484358C((uint64_t)v56 + 128, 72, 3);
              v234 = v240;
              if (v240)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v240, v240, (uint64_t)&v234);
                v240 = 0;
              }
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v57, v56, v55 + 48 * v227, (unsigned __int8 **)&v234, 0);
            if (v234)
              llvm::MetadataTracking::untrack((uint64_t)&v234, (unsigned __int8 *)v234);
            if (v240)
              llvm::MetadataTracking::untrack((uint64_t)&v240, v240);
            v58 = a2[5];
            *(_QWORD *)(v57 + 24) = v58;
            v59 = *(_QWORD *)(v58 + 32);
            v60 = *(unsigned int *)(v57 + 40);
            if ((_DWORD)v60)
            {
              v63 = *(_QWORD *)(v57 + 32);
              v64 = *(_QWORD *)(v59 + 40);
              v65 = 32 * v60;
              do
              {
                if (!*(_BYTE *)v63)
                {
                  v66 = *(unsigned int *)(v63 + 4);
                  if ((int)v66 >= 0)
                    v67 = (uint64_t *)(*(_QWORD *)(v64 + 272) + 8 * v66);
                  else
                    v67 = (uint64_t *)(*(_QWORD *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
                  v68 = *v67;
                  if (*v67)
                  {
                    v69 = *(_QWORD *)(v68 + 16);
                    *(_QWORD *)(v68 + 16) = v63;
                    *(_QWORD *)(v63 + 16) = v69;
                    if ((*(_BYTE *)(v63 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v63 + 24) = v68;
                    }
                    else
                    {
                      *(_QWORD *)(v63 + 24) = 0;
                      v67 = (uint64_t *)(v69 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v63 + 16) = v63;
                    *(_QWORD *)(v63 + 24) = 0;
                  }
                  *v67 = v63;
                }
                v63 += 32;
                v65 -= 32;
              }
              while (v65);
            }
            v61 = *(_QWORD *)(v59 + 728);
            if (v61)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v61 + 24))(v61, v57);
            v62 = *v49 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v57 = v62 | *(_QWORD *)v57 & 7;
            *(_QWORD *)(v57 + 8) = v49;
            *(_QWORD *)(v62 + 8) = v57;
            *v49 = *v49 & 7 | v57;
            LODWORD(v234) = 1;
            v235 = 0;
            v236[0] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v57, v56, (const llvm::MachineOperand *)&v234);
            if (v233)
              llvm::MetadataTracking::untrack((uint64_t)&v233, v233);
            goto LABEL_103;
          }
          if ((v53 & 0x400) != 0)
            goto LABEL_90;
LABEL_103:
          v49 = v52;
          if (v52 == v3)
            goto LABEL_118;
        }
        v50 = *((_WORD *)v49 + 22);
LABEL_82:
        v51 = v49;
        goto LABEL_83;
      }
    }
  }
LABEL_118:
  if (v45[306])
  {
    v70 = 16;
  }
  else if (v45[307])
  {
    v70 = 32;
  }
  else if (v45[308])
  {
    v70 = 48;
  }
  else if (v45[309])
  {
    v70 = 64;
  }
  else
  {
    v70 = -(char)v45[305];
  }
  v71 = v45[302];
  v72 = v45[303];
  v73 = (v45[304] | v71);
  v74 = v73 != 0;
  v75 = (v73 | v72) != 0;
  if (v230 == 100)
    v76 = 0;
  else
    v76 = v70;
  v77 = v230 != 100 && v74;
  v231 = v77;
  v78 = v230 != 100 && v75;
  if (v78 || v76)
  {
    v79 = a2[7];
    if ((unint64_t *)v79 != v3)
    {
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      if (v72 | v71)
        v84 = v230 == 100;
      else
        v84 = 1;
      v85 = !v84;
      v228 = v85;
      v224 = v76;
      do
      {
        v86 = (_QWORD *)v79;
        if (!v79 || (v87 = v79, (*(_BYTE *)v79 & 4) == 0))
        {
          v87 = v79;
          if ((*(_WORD *)(v79 + 44) & 8) != 0)
          {
            v87 = v79;
            do
              v87 = *(_QWORD *)(v87 + 8);
            while ((*(_WORD *)(v87 + 44) & 8) != 0);
          }
        }
        v79 = *(_QWORD *)(v87 + 8);
        v88 = (unsigned __int16 *)v86[2];
        v89 = *((_QWORD *)v88 + 2);
        if (v76)
        {
          v90 = *v88;
          v92 = (v90 - 9) <= 0x3C && ((1 << (v90 - 9)) & 0x1000000000000605) != 0
             || v90 == 0;
          if (v92 || *((_QWORD *)v88 + 1) & 0x10 | *((_QWORD *)v88 + 2) & 1)
          {
            if (!v82
              || ((v94 = (unsigned __int16 *)v82[2], v95 = *v94, (v95 - 9) <= 0x3C)
                ? (v96 = ((1 << (v95 - 9)) & 0x1000000000000605) == 0)
                : (v96 = 1),
                  v96 ? (v97 = v95 == 0) : (v97 = 1),
                  v97 || (v94[4] & 0x10) != 0 || (v94[8] & 1) != 0))
            {
              if (v83 == v76)
              {
                if ((unint64_t *)v79 != v3)
                {
                  v98 = 0;
                  v99 = v79;
                  while (1)
                  {
                    v100 = *(unsigned __int16 **)(v99 + 16);
                    v101 = *v100;
                    v102 = (v101 - 9) > 0x3C
                        || ((1 << (v101 - 9)) & 0x1000000000000605) == 0;
                    v103 = !v102 || v101 == 0;
                    if (!v103 && (v100[4] & 0x10) == 0 && (v100[8] & 1) == 0)
                      break;
                    if ((*(_BYTE *)v99 & 4) == 0)
                    {
                      while ((*(_WORD *)(v99 + 44) & 8) != 0)
                        v99 = *(_QWORD *)(v99 + 8);
                    }
                    v83 = 0;
                    v93 = v98 > 6;
                    if (v98 <= 6)
                    {
                      ++v98;
                      v99 = *(_QWORD *)(v99 + 8);
                      if ((unint64_t *)v99 != v3)
                        continue;
                    }
                    goto LABEL_193;
                  }
                }
                v93 = 0;
                v83 = 0;
              }
              else
              {
                v93 = 0;
              }
            }
            else
            {
              v93 = 1;
            }
LABEL_193:
            ++v83;
          }
          else
          {
            v93 = 0;
            v83 = 0;
          }
        }
        else
        {
          v93 = 0;
        }
        if (v231 && (v89 & 2) != 0 && v230 != 102)
        {
          if (!v81
            || (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v86[4] + 96), (const llvm::MachineOperand *)(v81[4] + 96)) & 1) == 0)
          {
            v105 = (unint64_t *)v48[7];
            v106 = (unint64_t)v86;
            while ((unint64_t *)v106 != v105)
            {
              v107 = (unint64_t *)v106;
              v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFF8;
              if (!v106 || (*(_BYTE *)v106 & 4) == 0)
              {
                while ((*(_WORD *)(v106 + 44) & 4) != 0)
                  v106 = *(_QWORD *)v106 & 0xFFFFFFFFFFFFFFF8;
              }
              v108 = *(unsigned __int16 **)(v106 + 16);
              if ((v108[8] & 0x10) == 0
                || (*(_BYTE *)(*(_QWORD *)(v106 + 32) + 32 * sub_1C4B138B4(*v108) + 16) & 8) == 0)
              {
                v81 = v86;
                v105 = v107;
                goto LABEL_230;
              }
            }
            v81 = v86;
            goto LABEL_230;
          }
          v81 = v86;
        }
        else if (v228 && (v89 & 0xD00) == 0x500 && v230 != 102)
        {
          if (!v80 || (v104 = v86[6], v104 < 8))
          {
LABEL_229:
            v80 = v86;
            v105 = v86;
            goto LABEL_230;
          }
          if ((v104 & 7) != 0)
          {
            if ((v86[6] & 7) != 3 || (v104 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v104 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_229;
          }
          else
          {
            v104 &= 0xFFFFFFFFFFFFFFF8;
            v86[6] = v104;
          }
          v109 = v80[6];
          if (v109 < 8)
            goto LABEL_229;
          if ((v109 & 7) != 0)
          {
            if ((v80[6] & 7) != 3 || (v109 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v109 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_229;
          }
          else
          {
            v109 &= 0xFFFFFFFFFFFFFFF8;
            v80[6] = v109;
            v104 = v86[6];
          }
          if ((v104 & 7) != 0)
          {
            v126 = *(uint64_t **)((v104 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v126 = (uint64_t *)(v104 & 0xFFFFFFFFFFFFFFF8);
            v86[6] = v126;
            v109 = v80[6];
          }
          if ((v109 & 7) != 0)
          {
            v127 = *(_QWORD **)((v109 & 0xFFFFFFFFFFFFFFF8) + 8);
            if (!v126)
              goto LABEL_287;
          }
          else
          {
            v127 = (_QWORD *)(v109 & 0xFFFFFFFFFFFFFFF8);
            v80[6] = v109 & 0xFFFFFFFFFFFFFFF8;
            if (!v126)
              goto LABEL_287;
          }
          if (!v127
            || ((v128 = *v126, (v128 & 4) != 0) ? (v129 = 0) : (v129 = (llvm *)(v128 & 0xFFFFFFFFFFFFFFF8)),
                !v129
             || *v127 < 8uLL
             || (*v127 & 4) != 0
             || ((UnderlyingObject = llvm::getUnderlyingObject(v129, (const llvm::Value *)6), (*v127 & 4) != 0)
               ? (v131 = 0)
               : (v131 = (llvm *)(*v127 & 0xFFFFFFFFFFFFFFF8)),
                 v132 = llvm::getUnderlyingObject(v131, (const llvm::Value *)6),
                 !UnderlyingObject)))
          {
LABEL_287:
            v80 = v86;
            v105 = v86;
            v48 = a2;
LABEL_230:
            v110 = (llvm::MachineFunction *)v48[4];
            if (v229[310])
              v111 = 0;
            else
              v111 = v105 == *(unint64_t **)(*((_QWORD *)v110 + 41) + 56);
            if (!v111)
            {
              v233 = 0;
              v112 = *(_QWORD *)(v225 + 8);
              v240 = 0;
              v113 = *((_QWORD *)v110 + 28);
              if (v113)
              {
                *((_QWORD *)v110 + 28) = *(_QWORD *)v113;
                v234 = 0;
              }
              else
              {
                v113 = sub_1C484358C((uint64_t)v110 + 128, 72, 3);
                v234 = v240;
                if (v240)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v240, v240, (uint64_t)&v234);
                  v240 = 0;
                }
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v113, v110, v112 + 48 * v227, (unsigned __int8 **)&v234, 0);
              if (v234)
                llvm::MetadataTracking::untrack((uint64_t)&v234, (unsigned __int8 *)v234);
              v48 = a2;
              if (v240)
                llvm::MetadataTracking::untrack((uint64_t)&v240, v240);
              v114 = a2[5];
              *(_QWORD *)(v113 + 24) = v114;
              v115 = *(_QWORD *)(v114 + 32);
              v116 = *(unsigned int *)(v113 + 40);
              if ((_DWORD)v116)
              {
                v119 = *(_QWORD *)(v113 + 32);
                v120 = *(_QWORD *)(v115 + 40);
                v121 = 32 * v116;
                do
                {
                  if (!*(_BYTE *)v119)
                  {
                    v122 = *(unsigned int *)(v119 + 4);
                    if ((int)v122 >= 0)
                      v123 = (uint64_t *)(*(_QWORD *)(v120 + 272) + 8 * v122);
                    else
                      v123 = (uint64_t *)(*(_QWORD *)(v120 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
                    v124 = *v123;
                    if (*v123)
                    {
                      v125 = *(_QWORD *)(v124 + 16);
                      *(_QWORD *)(v124 + 16) = v119;
                      *(_QWORD *)(v119 + 16) = v125;
                      if ((*(_BYTE *)(v119 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v119 + 24) = v124;
                      }
                      else
                      {
                        *(_QWORD *)(v119 + 24) = 0;
                        v123 = (uint64_t *)(v125 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v119 + 16) = v119;
                      *(_QWORD *)(v119 + 24) = 0;
                    }
                    *v123 = v119;
                  }
                  v119 += 32;
                  v121 -= 32;
                }
                while (v121);
              }
              v117 = *(_QWORD *)(v115 + 728);
              if (v117)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v117 + 24))(v117, v113);
              v118 = *v105 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v113 = v118 | *(_QWORD *)v113 & 7;
              *(_QWORD *)(v113 + 8) = v105;
              *(_QWORD *)(v118 + 8) = v113;
              *v105 = *v105 & 7 | v113;
              LODWORD(v234) = 1;
              v235 = 0;
              v236[0] = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v113, v110, (const llvm::MachineOperand *)&v234);
              if (v233)
                llvm::MetadataTracking::untrack((uint64_t)&v233, v233);
              v76 = v224;
            }
            goto LABEL_248;
          }
          v48 = a2;
          if (!v132)
            goto LABEL_229;
          v80 = v86;
          v105 = v86;
          if (UnderlyingObject != v132)
            goto LABEL_230;
        }
        else
        {
          v105 = v86;
          if (v93)
            goto LABEL_230;
        }
LABEL_248:
        if (*(_WORD *)v86[2] == 8277)
        {
          v81 = 0;
          v80 = 0;
        }
        v82 = v86;
      }
      while ((unint64_t *)v79 != v3);
    }
  }
  v234 = v236;
  v235 = 0x1000000000;
  v238 = 0;
  v239 = 0;
  v237 = &v238;
  v133 = *v3 & 0xFFFFFFFFFFFFFFF8;
  if (!v133 || (*(_BYTE *)v133 & 4) == 0)
  {
    while ((*(_WORD *)(v133 + 44) & 4) != 0)
      v133 = *(_QWORD *)v133 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v133 == v48[7])
  {
    v222 = 0;
    goto LABEL_470;
  }
  v134 = 0;
  v135 = 0;
  if (a3)
    v136 = (_QWORD *)(a3 + 8);
  else
    v136 = 0;
  while (2)
  {
    v137 = v133;
    v133 = *(_QWORD *)v133 & 0xFFFFFFFFFFFFFFF8;
    if (!v133 || (*(_BYTE *)v133 & 4) == 0)
    {
      while ((*(_WORD *)(v133 + 44) & 4) != 0)
        v133 = *(_QWORD *)v133 & 0xFFFFFFFFFFFFFFF8;
    }
    v138 = *(unsigned __int16 **)(v137 + 16);
    v139 = *v138;
    if ((v139 - 13) < 5 || v139 == 3)
      goto LABEL_307;
    if (((v139 == 8277) & v134) == 1)
    {
      LODWORD(v235) = 0;
      sub_1C47655E8((uint64_t)&v237, v238);
      v238 = 0;
      v239 = 0;
      v134 = 1;
      v135 = v137;
      v237 = &v238;
      goto LABEL_307;
    }
    v141 = v139 - 9;
    v143 = (v139 - 9) <= 0x3C && ((1 << (v139 - 9)) & 0x1000000000000605) != 0
        || v139 == 0;
    if (v143 || (v138[4] & 0x10) != 0)
    {
      v134 = 1;
      if (!v135)
        goto LABEL_307;
    }
    else
    {
      v134 = v138[8] & 1;
      if (!v135)
        goto LABEL_307;
    }
    if ((v141 > 0x3C || ((1 << v141) & 0x1000000000000605) == 0)
      && *v138
      && (v138[4] & 0x10) == 0
      && (v138[8] & 1) == 0
      || llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v137))
    {
      v135 = 0;
      goto LABEL_307;
    }
    if (((v139 - 4566) > 0x1F || ((1 << (v139 + 42)) & 0xC0005FFF) == 0)
      && (*((_BYTE *)v138 + 9) & 0x20) == 0
      || (v139 - 8188) <= 0x1F && ((1 << (v139 + 4)) & 0xC0300C03) != 0
      || (v139 - 4596) < 2)
    {
LABEL_358:
      v168 = *(unsigned int *)(v137 + 40);
      if ((_DWORD)v168)
      {
        for (i = 0; i < v168; ++i)
        {
          v170 = *(_QWORD *)(v137 + 32);
          if (!*(_BYTE *)(v170 + 32 * i))
          {
            v171 = *(_DWORD *)(v170 + 32 * i + 4);
            v172 = (unsigned __int16 *)(v136[6]
                                      + (((unint64_t)*(unsigned int *)(*v136 + 24 * v171 + 16) >> 3) & 0x1FFFFFFE));
            v174 = *v172;
            v173 = v172 + 1;
            v175 = v174 + (*(_DWORD *)(*v136 + 24 * v171 + 16) & 0xF) * v171;
            do
            {
              LODWORD(v240) = (unsigned __int16)v175;
              sub_1C48302EC((uint64_t)&v234, (unsigned int *)&v240);
              v176 = *v173++;
              v175 += v176;
            }
            while (v176);
            v168 = *(unsigned int *)(v137 + 40);
            v48 = a2;
          }
        }
      }
      goto LABEL_307;
    }
    v144 = *(_DWORD *)(*(_QWORD *)(v137 + 32) + 4);
    v145 = *(unsigned int *)(*v136 + 24 * v144 + 16);
    v146 = v145 & 0xF;
    v147 = (_WORD *)(v136[6] + ((v145 >> 3) & 0x1FFFFFFE));
    v148 = *v147 + v146 * v144;
    do
    {
      if (v239)
      {
        for (j = v238; j; j = (_QWORD *)*j)
        {
          v150 = *((_DWORD *)j + 7);
          if (v150 <= v148)
          {
            if (v150 >= v148)
              goto LABEL_358;
            ++j;
          }
        }
      }
      else if ((_DWORD)v235)
      {
        v151 = 4 * v235;
        v152 = v234;
        while (*v152 != v148)
        {
          ++v152;
          v151 -= 4;
          if (!v151)
            goto LABEL_349;
        }
        if (v151)
          goto LABEL_358;
      }
LABEL_349:
      v153 = (unsigned __int16)v147[1];
      ++v147;
      v148 += v153;
    }
    while (v153);
    v240 = v242;
    v241 = 0x400000000;
    v244 = 0;
    v245 = 0;
    v243 = &v244;
    v154 = *(_QWORD *)(v135 + 24);
    v155 = *(unsigned int *)(v137 + 40);
    if ((_DWORD)v155)
    {
      v226 = *(_QWORD *)(v135 + 24);
      for (k = 0; k < v155; ++k)
      {
        v157 = *(_QWORD *)(v137 + 32);
        if (!*(_BYTE *)(v157 + 32 * k))
        {
          v158 = *(_DWORD *)(v157 + 32 * k + 4);
          v159 = (unsigned __int16 *)(v136[6]
                                    + (((unint64_t)*(unsigned int *)(*v136 + 24 * v158 + 16) >> 3) & 0x1FFFFFFE));
          v161 = *v159;
          v160 = v159 + 1;
          v162 = v161 + (*(_DWORD *)(*v136 + 24 * v158 + 16) & 0xF) * v158;
          do
          {
            LODWORD(v233) = (unsigned __int16)v162;
            sub_1C4854E58((uint64_t)&v240, (unsigned int *)&v233);
            v163 = *v160++;
            v162 += v163;
          }
          while (v163);
          v155 = *(unsigned int *)(v137 + 40);
        }
      }
      v164 = v244;
      v165 = v245;
      v166 = v240;
      v167 = v241;
      v154 = v226;
    }
    else
    {
      v167 = 0;
      v164 = 0;
      v165 = 0;
      v166 = v242;
    }
    v177 = 0;
    v178 = v154 + 48;
    v179 = *(unsigned __int16 **)(v137 + 16);
    v180 = *v179;
    v181 = *((_QWORD *)v179 + 2);
    v182 = v135;
    while (2)
    {
      if (!v182 || (v183 = v182, (*(_BYTE *)v182 & 4) == 0))
      {
        v183 = v182;
        if ((*(_WORD *)(v182 + 44) & 8) != 0)
        {
          v183 = v182;
          do
            v183 = *(_QWORD *)(v183 + 8);
          while ((*(_WORD *)(v183 + 44) & 8) != 0);
        }
      }
      if (*(_QWORD *)(v183 + 8) == *(_QWORD *)(v182 + 24) + 48)
      {
        v185 = 0;
      }
      else
      {
        v184 = v182;
        if ((*(_BYTE *)v182 & 4) == 0)
        {
          v184 = v182;
          if ((*(_WORD *)(v182 + 44) & 8) != 0)
          {
            v184 = v182;
            do
              v184 = *(_QWORD *)(v184 + 8);
            while ((*(_WORD *)(v184 + 44) & 8) != 0);
          }
        }
        v185 = *(_QWORD *)(v184 + 8);
      }
      v186 = 0;
      v187 = **(unsigned __int16 **)(v182 + 16);
      if (v187 > 0x865)
      {
        if (v187 == 4578 || v187 == 4580)
        {
          v186 = 1;
        }
        else if (v187 == 2150)
        {
LABEL_383:
          v186 = v229[338] != 0;
        }
      }
      else if (v187 == 1100)
      {
        v186 = v229[338];
        if (v229[338])
          v186 = *(unsigned __int8 *)(*(_QWORD *)(v182 + 32) + 64) == 7;
      }
      else if (v187 == 2114)
      {
        goto LABEL_383;
      }
      v189 = 0;
      if (v180 > 2149)
      {
        if (v180 == 4578 || v180 == 4580)
        {
          v189 = 1;
        }
        else if (v180 == 2150)
        {
LABEL_392:
          v189 = v229[338] != 0;
        }
      }
      else if (v180 == 1100)
      {
        v189 = v229[338];
        if (v229[338])
          v189 = *(unsigned __int8 *)(*(_QWORD *)(v137 + 32) + 64) == 7;
      }
      else if (v180 == 2114)
      {
        goto LABEL_392;
      }
      if (v185)
        LODWORD(v185) = (*(unsigned __int8 *)(*(_QWORD *)(v185 + 16) + 16) >> 3) & 1;
      if ((v186 ^ 1 | (v189 ^ 1) & (v181 >> 3) & 1) == 1 && ((v189 ^ 1 | v185) & 1) != 0)
        goto LABEL_449;
      if ((*(_BYTE *)v182 & 4) == 0)
      {
        while ((*(_WORD *)(v182 + 44) & 8) != 0)
          v182 = *(_QWORD *)(v182 + 8);
      }
      v182 = *(_QWORD *)(v182 + 8);
      if (v182 != v178)
      {
        v190 = *(unsigned __int16 **)(v182 + 16);
        v191 = *v190;
        v192 = (v191 - 9) > 0x3C || ((1 << (v191 - 9)) & 0x1000000000000605) == 0;
        v193 = !v192 || v191 == 0;
        if ((v193 || (v190[4] & 0x10) != 0 || (v190[8] & 1) != 0) && (v190[8] & 0x40) == 0)
        {
          if ((v191 - 13) >= 5 && v191 != 3)
          {
            v195 = *(unsigned int *)(v182 + 40);
            if ((_DWORD)v195)
            {
              v196 = 0;
              v197 = *(_QWORD *)(v182 + 32);
              do
              {
                if (!*(_BYTE *)(v197 + 32 * v196))
                {
                  v198 = *(_DWORD *)(v197 + 32 * v196 + 4);
                  v199 = *(unsigned int *)(*v136 + 24 * v198 + 16);
                  v200 = v199 & 0xF;
                  v201 = (_WORD *)(v136[6] + ((v199 >> 3) & 0x1FFFFFFE));
                  v202 = *v201 + v200 * v198;
                  do
                  {
                    if (v165)
                    {
                      for (m = v164; m; m = (_QWORD *)*m)
                      {
                        v204 = *((_DWORD *)m + 7);
                        if (v204 <= v202)
                        {
                          if (v204 >= v202)
                            goto LABEL_448;
                          ++m;
                        }
                      }
                    }
                    else if (v167)
                    {
                      v205 = 4 * v167;
                      v206 = v166;
                      while (*v206 != v202)
                      {
                        ++v206;
                        v205 -= 4;
                        if (!v205)
                          goto LABEL_440;
                      }
                      if (v205)
                        goto LABEL_448;
                    }
LABEL_440:
                    v207 = (unsigned __int16)v201[1];
                    ++v201;
                    v202 += v207;
                  }
                  while (v207);
                }
                ++v196;
              }
              while (v196 != v195);
            }
          }
          if (++v177 != 16)
            continue;
        }
      }
      break;
    }
LABEL_448:
    v182 = v135;
LABEL_449:
    sub_1C47655E8((uint64_t)&v243, v164);
    if (v240 != v242)
      free(v240);
    v208 = *(_QWORD *)(*(_QWORD *)(v137 + 24) + 32);
    if (v208)
    {
      v209 = *(_QWORD *)(v208 + 728);
      if (v209)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v209 + 32))(v209, v137);
      v210 = *(unsigned int *)(v137 + 40);
      if ((_DWORD)v210)
      {
        v211 = *(_QWORD *)(v137 + 32);
        v212 = *(_QWORD *)(v208 + 40);
        v213 = 32 * v210;
        do
        {
          if (!*(_BYTE *)v211)
          {
            v214 = *(unsigned int *)(v211 + 4);
            if ((v214 & 0x80000000) != 0)
              v215 = (uint64_t *)(*(_QWORD *)(v212 + 24) + 16 * (v214 & 0x7FFFFFFF) + 8);
            else
              v215 = (uint64_t *)(*(_QWORD *)(v212 + 272) + 8 * v214);
            v216 = *v215;
            v218 = *(_QWORD *)(v211 + 16);
            v217 = *(_QWORD *)(v211 + 24);
            if (v211 != *v215)
              v215 = (uint64_t *)(v218 + 24);
            *v215 = v217;
            if (v217)
              v219 = v217;
            else
              v219 = v216;
            *(_QWORD *)(v219 + 16) = v218;
            *(_QWORD *)(v211 + 16) = 0;
            *(_QWORD *)(v211 + 24) = 0;
          }
          v211 += 32;
          v213 -= 32;
        }
        while (v213);
      }
    }
    *(_QWORD *)(v137 + 24) = 0;
    v220 = *(unint64_t **)(v137 + 8);
    v221 = *(_QWORD *)v137 & 0xFFFFFFFFFFFFFFF8;
    *v220 = v221 | *v220 & 7;
    *(_QWORD *)(v221 + 8) = v220;
    *(_QWORD *)v137 &= 7uLL;
    *(_QWORD *)(v137 + 8) = 0;
    sub_1C49879A4((uint64_t *)(*(_QWORD *)(v135 + 24) + 40), v182, v137);
    v48 = a2;
LABEL_307:
    if (v133 != v48[7])
      continue;
    break;
  }
  v222 = v238;
LABEL_470:
  sub_1C47655E8((uint64_t)&v237, v222);
  if (v234 != v236)
    free(v234);
}

uint64_t sub_1C49874BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;

  result = 0;
  v4 = *(unsigned __int16 **)(a2 + 16);
  if ((v4[8] & 0x10) != 0)
  {
    v5 = *(unsigned __int16 **)(a3 + 16);
    if ((*((_QWORD *)v5 + 2) & 2) != 0)
    {
      if (*v5 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(a3 + 32) + 48) & 0x10) != 0)
        return 0;
      v6 = *((_QWORD *)v5 + 1);
      if ((*(_WORD *)(a3 + 44) & 0xC) != 0 && (*(_WORD *)(a3 + 44) & 4) == 0)
      {
        if ((v6 & 0x100000) == 0)
        {
          result = 0;
          while ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            a3 = *(_QWORD *)(a3 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(a3 + 16) + 10) & 0x10) != 0)
              return result;
          }
          return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 32 * sub_1C4B138B4(*v4) + 16) >> 3) & 1;
        }
      }
      else if ((v6 & 0x100000) == 0)
      {
        return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 32 * sub_1C4B138B4(*v4) + 16) >> 3) & 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4987580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16) & 0x10) == 0)
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) & 0x10) == 0)
    return 0;
  v4 = sub_1C498794C(a2);
  v5 = sub_1C498794C(a3);
  result = 1;
  if (v4 != 2 && v4 != v5)
    return 0;
  return result;
}

BOOL sub_1C49875E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (a4 - 3) < 3;
}

BOOL sub_1C49875F4(uint64_t a1, uint64_t a2)
{
  return **(unsigned __int16 **)(a2 + 16) - 797 < 2;
}

BOOL sub_1C498760C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  BOOL v9;
  BOOL v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  BOOL v14;
  unsigned __int16 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 *v18;
  int v19;
  BOOL v20;
  BOOL v21;
  unsigned int v22;
  int v24;
  unsigned int NumExplicitOperands;
  uint64_t v26;
  _DWORD *v27;
  _BOOL8 result;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;

  if (!a2 || (v3 = a2, (*(_BYTE *)a2 & 4) == 0))
  {
    v3 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v3 = a2;
      do
        v3 = *(_QWORD *)(v3 + 8);
      while ((*(_WORD *)(v3 + 44) & 8) != 0);
    }
  }
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 != v5 + 48)
  {
    v6 = *(unsigned __int16 **)(v4 + 16);
    v7 = *v6;
    if (**(unsigned __int16 **)(a2 + 16) - 8267 <= 9 && (v7 - 8267) < 0xA)
      return 1;
    v9 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    v10 = !v9 || v7 == 0;
    if (!v10 && (v6[4] & 0x10) == 0 && (v6[8] & 1) == 0)
      return 0;
  }
  if (*(_QWORD *)(v5 + 56) == a2)
    return 0;
  v11 = *(_BYTE **)(a2 + 16);
  v12 = *(unsigned __int16 *)v11;
  v13 = (v12 - 9) > 0x3C || ((1 << (v12 - 9)) & 0x1000000000000605) == 0;
  v14 = !v13 || v12 == 0;
  if (!v14 && (v11[8] & 0x10) == 0 && (v11[16] & 1) == 0)
    return 0;
  if ((v11[9] & 0x20) != 0)
    return 1;
  v15 = v12 - 4566;
  if (v15 < 0x20u && ((0xC0005FFF >> v15) & 1) != 0)
    return 1;
  v16 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8), **(_QWORD **)(v5 + 32));
  v17 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v17 || (*(_BYTE *)v17 & 4) == 0)
  {
    while ((*(_WORD *)(v17 + 44) & 4) != 0)
      v17 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_BYTE *)(v16 + 318))
  {
    v18 = *(unsigned __int16 **)(v17 + 16);
    v19 = *v18;
    v20 = (v19 - 4566) > 0x1F || ((1 << (v19 + 42)) & 0xC0005FFF) == 0;
    if (v20 && (*((_BYTE *)v18 + 9) & 0x20) == 0)
      return 0;
    v21 = (v19 - 8188) > 0x1F || ((1 << (v19 + 4)) & 0xC0300C03) == 0;
    v22 = v19 - 4596;
    if (!v21 || v22 < 2)
      return 0;
    v24 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 4);
    NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
    if (NumExplicitOperands >= 2)
    {
      v26 = NumExplicitOperands - 1;
      v27 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      result = 1;
      while (*((_BYTE *)v27 - 4) || *v27 == v24)
      {
        v27 += 8;
        if (!--v26)
          return result;
      }
      return 0;
    }
    return 1;
  }
  v29 = llvm::MachineInstr::getNumExplicitOperands(a2);
  v30 = 0;
  if (v29 <= 1)
    v31 = 1;
  else
    v31 = v29;
  v32 = 32 * v31;
  do
  {
    result = v32 == v30 + 32;
    if (v32 == v30 + 32)
      break;
    v33 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + v30 + 32);
    v30 += 32;
  }
  while (v33);
  return result;
}

uint64_t sub_1C4987888()
{
  return 1;
}

uint64_t sub_1C4987890()
{
  return 0;
}

uint64_t sub_1C4987898(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2)+ 299))return 0xFFFFFFFFLL;
  else
    return 15;
}

uint64_t sub_1C49878C8()
{
  return 10;
}

uint64_t sub_1C49878D0()
{
  return 0;
}

BOOL sub_1C49878D8(uint64_t a1, uint64_t a2)
{
  return sub_1C498794C(a2) == 2;
}

BOOL sub_1C49878F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (**(unsigned __int16 **)(a2 + 16) - 609 <= 0x1F && (v2 = *(_QWORD *)(a2 + 32), *(_BYTE *)v2 == 4))
    return *(_DWORD *)(*(_QWORD *)(v2 + 16) + 24) <= *(_DWORD *)(*(_QWORD *)(a2 + 24) + 24);
  else
    return 0;
}

uint64_t sub_1C4987940(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
}

uint64_t sub_1C498794C(uint64_t a1)
{
  unsigned __int16 *v1;

  v1 = *(unsigned __int16 **)(a1 + 16);
  if ((v1[8] & 0x10) == 0)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32 * sub_1C4B138B4(*v1) + 16) & 8) != 0)
    return 2;
  return 1;
}

uint64_t sub_1C49879A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 + 1 == (uint64_t *)(a1[1] & 0xFFFFFFFFFFFFFFF8))
  {
    v4 = (uint64_t *)a1[2];
    llvm::ilist_traits<llvm::MachineInstr>::addNodeToList(a1, a3);
  }
  else
  {
    v4 = *(uint64_t **)(a2 + 8);
    v5 = *a1;
    *(_QWORD *)(a3 + 24) = *a1;
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(unsigned int *)(a3 + 40);
    if ((_DWORD)v7)
    {
      v11 = *(_QWORD *)(a3 + 32);
      v12 = *(_QWORD *)(v6 + 40);
      v13 = 32 * v7;
      do
      {
        if (!*(_BYTE *)v11)
        {
          v14 = *(unsigned int *)(v11 + 4);
          if ((int)v14 >= 0)
            v15 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v14);
          else
            v15 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
          v16 = *v15;
          if (*v15)
          {
            v17 = *(_QWORD *)(v16 + 16);
            *(_QWORD *)(v16 + 16) = v11;
            *(_QWORD *)(v11 + 16) = v17;
            if ((*(_BYTE *)(v11 + 3) & 1) != 0)
            {
              *(_QWORD *)(v11 + 24) = v16;
            }
            else
            {
              *(_QWORD *)(v11 + 24) = 0;
              v15 = (uint64_t *)(v17 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v11 + 16) = v11;
            *(_QWORD *)(v11 + 24) = 0;
          }
          *v15 = v11;
        }
        v11 += 32;
        v13 -= 32;
      }
      while (v13);
    }
    v8 = *(_QWORD *)(v6 + 728);
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, a3);
  }
  v9 = *v4 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)a3 = v9 | *(_QWORD *)a3 & 7;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(v9 + 8) = a3;
  *v4 = *v4 & 7 | a3;
  return a3;
}

uint64_t sub_1C4987AC4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Add Frag Sync operations where needed";
  *(_QWORD *)(v3 + 8) = 37;
  *(_QWORD *)(v3 + 16) = "agx2-frag-sync";
  *(_QWORD *)(v3 + 24) = 14;
  *(_QWORD *)(v3 + 32) = &unk_1ED7EC470;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4987C28;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4987B68(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC470) = &off_1E7FA7C68;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EC478);
  if (v3 != -1)
  {
    v7[0] = sub_1C4987AC4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EC478, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4987C28()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4987B68(v0);
}

void sub_1C4987C50(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4987CE4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4987D70(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4987DF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t NamedMetadata;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  uint64_t i;
  _QWORD *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned __int8 **v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unsigned __int8 **v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  unsigned int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  char v109;
  unsigned int v110;
  int v111;
  uint64_t j;
  uint64_t v113;
  char v114;
  _OWORD *v115;
  _OWORD *v116;
  __int128 v117;
  uint64_t v118;
  unsigned __int8 **v119;
  int v120;
  BOOL v121;
  unsigned int v122;
  unsigned __int8 **v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  unsigned __int8 **v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  unsigned __int8 **v131;
  unsigned __int8 *v132;
  unsigned __int8 **v133;
  unsigned __int8 *v134;
  unsigned __int8 **v135;
  unsigned __int8 *v136;
  __n128 v137;
  uint64_t v138;
  size_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unint64_t v147;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  unsigned int v162;
  int v163;
  uint64_t v164;
  _DWORD *v165;
  BOOL v166;
  char v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  int *v171;
  BOOL v172;
  int v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  unsigned int v178;
  unsigned __int8 *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  int v184;
  uint64_t v185;
  unsigned __int16 *v186;
  int v187;
  int v188;
  _QWORD **v189;
  unsigned int v190;
  uint64_t v191;
  int *v192;
  int v193;
  uint64_t v194;
  void ***v195;
  void ***v196;
  unint64_t *v197;
  void **v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  void **v203;
  void **v204;
  void *v205;
  unint64_t v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  int v218;
  int v219;
  BOOL v220;
  int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  int v230;
  BOOL v231;
  unsigned int v232;
  BOOL v233;
  int v234;
  BOOL v235;
  int v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t NearestCommonDominator;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  _BOOL4 v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t k;
  unsigned int *v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t m;
  uint64_t n;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int v273;
  uint64_t FirstInstrTerminator;
  uint64_t *v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t *v281;
  int v282;
  uint64_t *v283;
  uint64_t *v284;
  uint64_t *v285;
  unsigned __int8 *v286;
  uint64_t v287;
  int v288;
  int v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v293;
  llvm::MachineFunction *v294;
  uint64_t v295;
  llvm::MachineInstr *v296;
  uint64_t v297;
  llvm::MachineFunction *v298;
  llvm::MachineInstr *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v303;
  llvm::MachineFunction *v304;
  uint64_t v305;
  llvm::MachineInstr *v306;
  uint64_t v307;
  llvm::MachineFunction *v308;
  llvm::MachineInstr *v309;
  uint64_t v310;
  llvm::MachineDominatorTree *v311;
  _BYTE *v312;
  int v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  llvm::MachineBasicBlock *LoopPreheader;
  int v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  BOOL v324;
  int v325;
  uint64_t v326;
  unsigned __int16 *v327;
  uint64_t v328;
  char v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  int v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  llvm::MachineBasicBlock *v339;
  int v340;
  int v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t ii;
  _QWORD *v345;
  unsigned int *v346;
  int v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  uint64_t *v351;
  _QWORD *v352;
  unsigned __int8 *v353;
  _QWORD *v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t *v359;
  int v360;
  unint64_t v361;
  _QWORD *v362;
  int v363;
  char v364;
  unsigned int v365;
  uint64_t v366;
  _QWORD *v367;
  unint64_t *v368;
  unint64_t v369;
  unsigned int v370;
  uint64_t v372;
  llvm::MachineFunction *v373;
  llvm::MachineInstr *v374;
  _QWORD *v375;
  _QWORD *v376;
  char v377;
  uint64_t jj;
  uint64_t v379;
  char v380;
  unint64_t v381;
  uint64_t *v382;
  uint64_t *v383;
  unsigned int v384;
  uint64_t kk;
  uint64_t mm;
  const llvm::TargetSubtargetInfo *v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  char v392;
  unsigned int v393;
  int v394;
  _OWORD *v395;
  int v396;
  unsigned int v397;
  uint64_t v398;
  int v399;
  unsigned int v400;
  int v401;
  int v402;
  int v403;
  unint64_t v404;
  unsigned int v405;
  unsigned int v406;
  uint64_t v407;
  unint64_t v408;
  unsigned int v409;
  int v410;
  _OWORD *v411;
  int v412;
  unsigned int v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  BOOL v421;
  int v422;
  int v423;
  _OWORD *v424;
  unsigned int v425;
  int v426;
  unsigned int v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  int v431;
  BOOL v432;
  unsigned int v433;
  _QWORD *v434;
  _QWORD *v435;
  unsigned __int8 *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  uint64_t v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  int v446;
  uint64_t *v447;
  void **v448;
  unsigned int v449;
  int v450;
  _OWORD *v451;
  unint64_t v452;
  _OWORD *v453;
  int v454;
  char v455;
  unint64_t v456;
  unsigned int v457;
  uint64_t v458;
  int v459;
  unsigned int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  BOOL v465;
  int v466;
  unsigned int v467;
  unint64_t v468;
  _OWORD *v469;
  int v470;
  unint64_t v471;
  unint64_t v472;
  unsigned int v473;
  uint64_t v474;
  int v475;
  unsigned int v476;
  _WORD *v477;
  unsigned int v478;
  int v479;
  unsigned int v480;
  _QWORD *v481;
  uint64_t v482;
  _QWORD *v483;
  int v484;
  BOOL v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t v488;
  int v489;
  _OWORD *v490;
  int v491;
  unsigned int v492;
  uint64_t v493;
  int v494;
  BOOL v495;
  unsigned int v496;
  _QWORD *v497;
  _QWORD *v498;
  unsigned __int8 *v499;
  uint64_t v500;
  unsigned __int8 *v501;
  char *v502;
  char *v503;
  _BYTE *v504;
  _BYTE *v505;
  unsigned int (***v506)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v507;
  uint64_t v508;
  unint64_t **v509;
  unint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  llvm::MachineFunction *v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t **v523;
  unint64_t *v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  llvm::MachineFunction *v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  llvm::MachineFunction *v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  llvm::MachineFunction *v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  llvm::MachineFunction *v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  _QWORD *v565;
  unint64_t *v566;
  unsigned __int8 *v567;
  uint64_t v568;
  llvm::MachineFunction *v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unsigned int v576;
  uint64_t v577;
  _QWORD *v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t nn;
  int v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  llvm::MachineFunction *v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  void *v606;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t *v647;
  uint64_t v648;
  uint64_t v649;
  llvm::MachineDominatorTree *v650;
  unint64_t v651;
  uint64_t v652;
  int v653;
  _QWORD *v654;
  _QWORD *v655;
  unsigned __int8 *v656;
  uint64_t v657;
  _QWORD *v658;
  _QWORD *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  _QWORD *v664;
  int v665;
  unsigned __int8 *v666;
  BOOL v667;
  uint64_t v668;
  unsigned int (***v669)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  _QWORD *v673;
  uint64_t v674;
  __int128 v675;
  _BYTE v676[16];
  uint64_t v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  uint64_t v681;
  unsigned __int8 v682;
  _QWORD v683[2];
  int v684;
  _QWORD v685[2];
  int v686;
  int v687;
  char v688;
  int v689;
  unint64_t v690;
  char v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  unsigned __int8 *v695[3];
  unsigned __int8 *v696[4];
  int v697;
  __int16 v698;
  uint64_t v699;
  unsigned __int8 *v700[2];
  unsigned int v701;
  void *v702;
  _OWORD v703[3];
  __int128 v704;
  void *v705;
  uint64_t v706;
  _BYTE v707[64];
  void *__s2;
  uint64_t v709;
  _DWORD v710[12];
  int v711;
  uint64_t v712[209];
  unsigned __int8 *v713;
  void *v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  uint64_t v718;
  _BYTE v719[16];
  void *v720[2];
  __int128 v721;
  __int128 v722;
  __int128 v723;
  unint64_t *v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  uint64_t v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  void *v733;
  uint64_t v734;
  _QWORD v735[9];
  void *__s1[2];
  uint64_t v737;
  int v738;
  int v739;
  _WORD v740[16];
  int v741;
  _QWORD v742[212];

  v0 = MEMORY[0x1E0C80A78]();
  v654 = v1;
  v2 = v0;
  v742[209] = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(v0 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::MachineDominatorTree::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::MachineDominatorTree::ID);
  v6 = **(void ****)(v2 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachinePostDominatorTree::ID);
  v660 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachinePostDominatorTree::ID);
  v8 = **(void ****)(v2 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineLoopInfo::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineLoopInfo::ID);
  v11 = **(void ****)(v2 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v14 = ((*(unsigned __int16 *)(*v654 + 18) >> 4) & 0x3FF) - 101;
  v15 = v14 > 7;
  v16 = (1 << v14) & 0x8D;
  if (v15 || v16 == 0)
    return 0;
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(_QWORD *)(*v654 + 40);
  __s1[0] = "agx.prid";
  v740[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v19, (uint64_t)__s1);
  v657 = v10;
  if (NamedMetadata && (v21 = *(uint64_t **)(NamedMetadata + 48), v22 = *((unsigned int *)v21 + 2), (_DWORD)v22))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = *v21;
    do
    {
      v27 = (uint64_t *)(*(_QWORD *)v26 - 8 * *(unsigned int *)(*(_QWORD *)v26 + 8));
      v28 = *v27;
      if (*v27)
      {
        if (!*(_BYTE *)v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (*(_QWORD *)v29 == 5)
          {
            v30 = *(_DWORD *)(v29 + 24);
            v31 = *(unsigned __int8 *)(v29 + 28);
            if (v30 == 1702390118 && v31 == 100)
            {
              v33 = *(_QWORD *)(v27[2] + 128);
              v34 = (_QWORD *)(v33 + 24);
              if (*(_DWORD *)(v33 + 32) >= 0x41u)
                v34 = (_QWORD *)*v34;
              v35 = *(_QWORD *)(v27[4] + 128);
              v36 = (_QWORD *)(v35 + 24);
              if (*(_DWORD *)(v35 + 32) >= 0x41u)
                v36 = (_QWORD *)*v36;
              v37 = *(_QWORD *)(v27[6] + 128);
              v38 = (_QWORD *)(v37 + 24);
              if (*(_DWORD *)(v37 + 32) >= 0x41u)
                v38 = (_QWORD *)*v38;
              v23 = *(_DWORD *)v34;
              v24 = *(_DWORD *)v36;
              v25 = *(_DWORD *)v38;
            }
          }
        }
      }
      v26 += 8;
      --v22;
    }
    while (v22);
  }
  else
  {
    v25 = 0;
    v24 = 0;
    v23 = 0;
  }
  v39 = (unsigned __int8 *)v654[2];
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v660 + 248) + 72) + 32) != 1)
  {
    v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v39 + 104))(v654[2]);
    v54 = (_QWORD *)v654[41];
    v55 = (unint64_t *)v54[7];
    v56 = *(_QWORD *)(v53 + 8) + 231648;
    v57 = (llvm::MachineFunction *)v54[4];
    __s2 = 0;
    v58 = *((_QWORD *)v57 + 28);
    if (v58)
      *((_QWORD *)v57 + 28) = *(_QWORD *)v58;
    else
      v58 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
    __s1[0] = 0;
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v58, v57, v56, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (__s2)
      llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
    v59 = v54[5];
    *(_QWORD *)(v58 + 24) = v59;
    v60 = *(_QWORD *)(v59 + 32);
    v61 = *(unsigned int *)(v58 + 40);
    if ((_DWORD)v61)
    {
      v261 = *(_QWORD *)(v58 + 32);
      v262 = *(_QWORD *)(v60 + 40);
      v263 = 32 * v61;
      do
      {
        if (!*(_BYTE *)v261)
        {
          v264 = *(unsigned int *)(v261 + 4);
          if ((int)v264 >= 0)
            v265 = (uint64_t *)(*(_QWORD *)(v262 + 272) + 8 * v264);
          else
            v265 = (uint64_t *)(*(_QWORD *)(v262 + 24) + 16 * (v264 & 0x7FFFFFFF) + 8);
          v266 = *v265;
          if (*v265)
          {
            v267 = *(_QWORD *)(v266 + 16);
            *(_QWORD *)(v266 + 16) = v261;
            *(_QWORD *)(v261 + 16) = v267;
            if ((*(_BYTE *)(v261 + 3) & 1) != 0)
            {
              *(_QWORD *)(v261 + 24) = v266;
            }
            else
            {
              *(_QWORD *)(v261 + 24) = 0;
              v265 = (uint64_t *)(v267 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v261 + 16) = v261;
            *(_QWORD *)(v261 + 24) = 0;
          }
          *v265 = v261;
        }
        v261 += 32;
        v263 -= 32;
      }
      while (v263);
    }
    v62 = *(_QWORD *)(v60 + 728);
    if (v62)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 24))(v62, v58);
    v63 = *v55 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v58 = v63 | *(_QWORD *)v58 & 7;
    *(_QWORD *)(v58 + 8) = v55;
    *(_QWORD *)(v63 + 8) = v58;
    *v55 = *v55 & 7 | v58;
    v64 = 1;
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 1023;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)__s1);
    return v64;
  }
  for (i = 0; i != 880; i += 80)
  {
    v41 = &v676[i];
    *v41 = &v676[i + 16];
    v41[1] = 0x400000000;
  }
  v682 = 0;
  v678 = 0u;
  v679 = 0u;
  v680 = 0u;
  v42 = 62;
  v43 = v654 + 40;
  do
  {
    v44 = v42;
    v43 = (_QWORD *)v43[1];
    ++v42;
  }
  while (v43 != v654 + 40);
  v658 = v654 + 40;
  v45 = v44 - 62;
  v702 = (char *)v703 + 8;
  *(_QWORD *)&v703[0] = 0x600000000;
  sub_1C4765AA4((char *)&v702, v42 >> 6, 0);
  DWORD2(v704) = v45;
  v46 = v654[6];
  if (!v46)
  {
    v46 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)v654[1] + 216))(v654[1], v654 + 16, v654);
    v654[6] = v46;
  }
  v650 = (llvm::MachineDominatorTree *)v5;
  if (!*(_BYTE *)(v46 + 432))
  {
    sub_1C5EA6408(*(_QWORD *)(*v654 + 40), v46 + 384, v46 + 208, v46 + 408);
    *(_BYTE *)(v46 + 432) = 1;
  }
  v47 = *(_QWORD *)(*v654 + 40);
  v683[1] = 0;
  v683[0] = 0;
  v684 = 0;
  sub_1C498C4E4((uint64_t)v683, v46 + 384);
  v700[1] = 0;
  v700[0] = 0;
  v701 = 0;
  v699 = 0;
  v48 = *(_QWORD *)(v46 + 384);
  v663 = v46;
  v49 = *(unsigned int *)(v46 + 400);
  v50 = v48 + (v49 << 6);
  v656 = v39;
  v653 = v25;
  v651 = __PAIR64__(v23, v24);
  v652 = v18;
  if (*(_DWORD *)(v46 + 392))
  {
    if ((_DWORD)v49)
    {
      v51 = v49 << 6;
      v52 = *(_QWORD *)(v46 + 384);
      while ((*(_QWORD *)v52 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v52 += 64;
        v51 -= 64;
        if (!v51)
          goto LABEL_48;
      }
    }
    else
    {
      v52 = *(_QWORD *)(v46 + 384);
    }
  }
  else
  {
LABEL_48:
    v52 = v48 + (v49 << 6);
  }
  v65 = v48 + ((unint64_t)v49 << 6);
  if (v52 == v65)
    goto LABEL_170;
  v670 = v48 + ((unint64_t)v49 << 6);
  do
  {
    v713 = *(unsigned __int8 **)v52;
    v714 = &v716;
    v715 = 0x100000000;
    if (*(_DWORD *)(v52 + 16))
      sub_1C498C654((uint64_t)&v714, v52 + 8);
    v717 = v719;
    v718 = 0x200000000;
    if (*(_DWORD *)(v52 + 40))
      sub_1C498C654((uint64_t)&v717, v52 + 32);
    v66 = v713;
    if (!*((_QWORD *)v713 + 1))
      goto LABEL_113;
    v698 = 0;
    v697 = 0;
    if ((v713[34] & 0x40) == 0)
      goto LABEL_76;
    v67 = ***(_QWORD ***)v713;
    __s1[0] = v713;
    v68 = *(_DWORD *)(v67 + 2520);
    if (!v68)
    {
      v131 = 0;
LABEL_158:
      v72 = (unsigned __int8 **)sub_1C53D65B8(v67 + 2504, (uint64_t)__s1, (uint64_t *)__s1, v131);
      v132 = (unsigned __int8 *)__s1[0];
      v72[1] = 0;
      v72[2] = 0;
      *v72 = v132;
      goto LABEL_71;
    }
    v69 = *(_QWORD *)(v67 + 2504);
    v70 = v68 - 1;
    v71 = v70 & ((v713 >> 4) ^ (v713 >> 9));
    v72 = (unsigned __int8 **)(v69 + 24 * v71);
    v73 = *v72;
    if (*v72 != v713)
    {
      v119 = 0;
      v120 = 1;
      while (v73 != (unsigned __int8 *)-4096)
      {
        if (v119)
          v121 = 0;
        else
          v121 = v73 == (unsigned __int8 *)-8192;
        if (v121)
          v119 = v72;
        v122 = v71 + v120++;
        v71 = v122 & v70;
        v72 = (unsigned __int8 **)(v69 + 24 * v71);
        v73 = *v72;
        if (*v72 == v713)
          goto LABEL_71;
      }
      if (v119)
        v131 = v119;
      else
        v131 = v72;
      goto LABEL_158;
    }
LABEL_71:
    if (v72[2] == (unsigned __int8 *)15)
    {
      v74 = v72[1];
      v75 = *(_QWORD *)v74;
      v76 = *(_QWORD *)(v74 + 7);
      if (v75 == 0x625F726566667562 && v76 == 0x73676E69646E6962)
      {
LABEL_124:
        if ((_DWORD)v718)
          v102 = 3;
        else
          v102 = 2;
        goto LABEL_96;
      }
    }
LABEL_76:
    if ((v66[34] & 0x40) == 0)
      goto LABEL_87;
    v78 = ***(_QWORD ***)v66;
    __s1[0] = v66;
    v79 = *(_DWORD *)(v78 + 2520);
    if (!v79)
    {
      v133 = 0;
LABEL_162:
      v83 = (unsigned __int8 **)sub_1C53D65B8(v78 + 2504, (uint64_t)__s1, (uint64_t *)__s1, v133);
      v134 = (unsigned __int8 *)__s1[0];
      v83[1] = 0;
      v83[2] = 0;
      *v83 = v134;
      goto LABEL_79;
    }
    v80 = *(_QWORD *)(v78 + 2504);
    v81 = v79 - 1;
    v82 = v81 & ((v66 >> 4) ^ (v66 >> 9));
    v83 = (unsigned __int8 **)(v80 + 24 * v82);
    v84 = *v83;
    if (*v83 != v66)
    {
      v123 = 0;
      v124 = 1;
      while (v84 != (unsigned __int8 *)-4096)
      {
        if (v123)
          v125 = 0;
        else
          v125 = v84 == (unsigned __int8 *)-8192;
        if (v125)
          v123 = v83;
        v126 = v82 + v124++;
        v82 = v126 & v81;
        v83 = (unsigned __int8 **)(v80 + 24 * v82);
        v84 = *v83;
        if (*v83 == v66)
          goto LABEL_79;
      }
      if (v123)
        v133 = v123;
      else
        v133 = v83;
      goto LABEL_162;
    }
LABEL_79:
    if (v83[2] == (unsigned __int8 *)19)
    {
      v85 = v83[1];
      v86 = *(_QWORD *)v85;
      v87 = *((_QWORD *)v85 + 1);
      v88 = *(_QWORD *)(v85 + 11);
      v89 = v86 == 0x705F726576697264 && v87 == 0x6675625F6D617261;
      if (v89 && v88 == 0x7265666675625F6DLL)
        goto LABEL_124;
    }
LABEL_87:
    if ((v66[34] & 0x40) == 0)
      goto LABEL_95;
    v91 = ***(_QWORD ***)v66;
    __s1[0] = v66;
    v92 = *(_DWORD *)(v91 + 2520);
    if (!v92)
    {
      v135 = 0;
LABEL_166:
      v96 = (unsigned __int8 **)sub_1C53D65B8(v91 + 2504, (uint64_t)__s1, (uint64_t *)__s1, v135);
      v136 = (unsigned __int8 *)__s1[0];
      v96[1] = 0;
      v96[2] = 0;
      *v96 = v136;
      goto LABEL_90;
    }
    v93 = *(_QWORD *)(v91 + 2504);
    v94 = v92 - 1;
    v95 = v94 & ((v66 >> 4) ^ (v66 >> 9));
    v96 = (unsigned __int8 **)(v93 + 24 * v95);
    v97 = *v96;
    if (*v96 != v66)
    {
      v127 = 0;
      v128 = 1;
      while (v97 != (unsigned __int8 *)-4096)
      {
        if (v127)
          v129 = 0;
        else
          v129 = v97 == (unsigned __int8 *)-8192;
        if (v129)
          v127 = v96;
        v130 = v95 + v128++;
        v95 = v130 & v94;
        v96 = (unsigned __int8 **)(v93 + 24 * v95);
        v97 = *v96;
        if (*v96 == v66)
          goto LABEL_90;
      }
      if (v127)
        v135 = v127;
      else
        v135 = v96;
      goto LABEL_166;
    }
LABEL_90:
    if (v96[2] != (unsigned __int8 *)11
      || ((v98 = v96[1], v99 = *(_QWORD *)v98, v100 = *(_QWORD *)(v98 + 3), v99 == 0x74735F6567616D69)
        ? (v101 = v100 == 0x65746174735F6567)
        : (v101 = 0),
          !v101))
    {
LABEL_95:
      v102 = 2;
LABEL_96:
      v697 = v102;
      goto LABEL_97;
    }
    v697 = 1;
LABEL_97:
    v696[0] = (unsigned __int8 *)v700;
    v696[1] = (unsigned __int8 *)&v697;
    v696[2] = (unsigned __int8 *)&v699 + 4;
    v696[3] = (unsigned __int8 *)&v699;
    v695[0] = (unsigned __int8 *)&v699 + 4;
    v695[1] = (unsigned __int8 *)&v699;
    v695[2] = (unsigned __int8 *)&v698;
    __s1[0] = v66;
    v739 = 0;
    __s1[1] = 0;
    v737 = 0;
    LOBYTE(v738) = 0;
    __s2 = v710;
    v709 = 0x400000000;
    sub_1C498CE48((char *)&__s2, 1uLL, (__int128 *)__s1);
    __s1[0] = v740;
    __s1[1] = v740;
    v737 = 16;
    v738 = 0;
    v103 = v709;
    if (!(_DWORD)v709)
      goto LABEL_111;
    do
    {
      v694 = 0;
      v693 = 0;
      v692 = 0;
      v691 = 0;
      v690 = 0;
      v104 = (char *)__s2 + 32 * v103;
      v105 = *((_QWORD *)v104 - 4);
      v106 = *((_QWORD *)v104 - 3);
      v107 = *((_DWORD *)v104 - 4);
      v108 = *((_DWORD *)v104 - 3);
      v109 = *(v104 - 8);
      LODWORD(v104) = *((_DWORD *)v104 - 1);
      LODWORD(v709) = v103 - 1;
      v694 = v105;
      v693 = v106;
      v692 = v107;
      v690 = __PAIR64__(v104, v108);
      v691 = v109;
      v720[0] = (void *)(v47 + 272);
      v720[1] = &v691;
      *(_QWORD *)&v721 = &v697;
      *((_QWORD *)&v721 + 1) = &v692;
      *(_QWORD *)&v722 = (char *)&v698 + 1;
      *((_QWORD *)&v722 + 1) = v696;
      *(_QWORD *)&v723 = &v693;
      *((_QWORD *)&v723 + 1) = &v713;
      v724 = &v690;
      *(_QWORD *)&v725 = (char *)&v690 + 4;
      *((_QWORD *)&v725 + 1) = &v694;
      *(_QWORD *)&v726 = v695;
      v110 = *(unsigned __int8 *)(v105 + 16);
      if (v105)
      {
        v111 = v110 - 28;
        if (v110 >= 0x1C)
          goto LABEL_103;
      }
      if (v105 && v110 == 5)
      {
        v111 = *(unsigned __int16 *)(v105 + 18);
LABEL_103:
        if ((sub_1C498C744((uint64_t)v720, v105, v111) & 1) != 0)
          goto LABEL_108;
      }
      for (j = *(_QWORD *)(v694 + 8); j; j = *(_QWORD *)(j + 8))
      {
        v113 = *(_QWORD *)(j + 24);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, v113);
        if (v114)
        {
          v685[0] = v113;
          v685[1] = v694;
          v686 = v692;
          v687 = v690;
          v688 = v691;
          v689 = HIDWORD(v690);
          v115 = (_OWORD *)sub_1C47C0F60((uint64_t)&__s2, (unint64_t)v685, 1);
          v116 = (char *)__s2 + 32 * v709;
          v117 = v115[1];
          *v116 = *v115;
          v116[1] = v117;
          LODWORD(v709) = v709 + 1;
        }
      }
LABEL_108:
      v103 = v709;
    }
    while ((_DWORD)v709);
    v65 = v670;
    if (__s1[1] != __s1[0])
      free(__s1[1]);
LABEL_111:
    if (__s2 != v710)
      free(__s2);
LABEL_113:
    if (v717 != v719)
      free(v717);
    if (v714 != &v716)
      free(v714);
    v118 = v52 + 64;
    v52 = v50;
    if (v118 != v50)
    {
      v52 = v118;
      while ((*(_QWORD *)v52 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v52 += 64;
        if (v52 == v50)
        {
          v52 = v50;
          break;
        }
      }
    }
  }
  while (v52 != v65);
LABEL_170:
  MEMORY[0x1CAA32FB4](0, 8);
  v138 = v701;
  if (!v701)
  {
    v666 = 0;
    v150 = HIDWORD(v699);
    LODWORD(v673) = v699;
    v141 = v663;
    goto LABEL_193;
  }
  v139 = 40 * v701;
  v666 = (unsigned __int8 *)operator new(v139, (std::align_val_t)8uLL);
  v140 = 0;
  v137 = (__n128)xmmword_1C6612B90;
  v141 = v663;
  while (2)
  {
    v142 = v700[0];
    v143 = *(_QWORD *)&v700[0][v140];
    *(_QWORD *)&v666[v140] = v143;
    if ((v143 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v144 = &v666[v140 + 32];
      *(_QWORD *)&v666[v140 + 8] = v144;
      v145 = &v666[v140 + 8];
      v146 = &v142[v140];
      *(__n128 *)&v666[v140 + 16] = v137;
      v147 = *(_QWORD *)&v142[v140 + 16];
      if (v666 != v142 && v147 != 0)
      {
        if (v147 < 3)
        {
          v149 = *(_QWORD *)&v142[v140 + 16];
LABEL_183:
          memcpy(v144, *((const void **)v146 + 1), 2 * v149);
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v145, v144, *(_QWORD *)&v142[v140 + 16], 2);
          v149 = *((_QWORD *)v146 + 2);
          if (v149)
          {
            v144 = *(unsigned __int8 **)v145;
            goto LABEL_183;
          }
        }
        *(_QWORD *)&v666[v140 + 16] = v147;
        v137 = (__n128)xmmword_1C6612B90;
      }
    }
    v140 += 40;
    if (v139 != v140)
      continue;
    break;
  }
  v150 = HIDWORD(v699);
  LODWORD(v673) = v699;
  if (v701)
  {
    v151 = HIDWORD(v699);
    v152 = 40 * v701;
    v153 = v700[0] + 32;
    do
    {
      if ((*((_QWORD *)v153 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v154 = (unsigned __int8 *)*((_QWORD *)v153 - 3);
        if (v153 != v154)
          free(v154);
      }
      v153 += 40;
      v152 -= 40;
    }
    while (v152);
    v150 = v151;
  }
LABEL_193:
  MEMORY[0x1CAA32FB4](v700[0], 8, v137);
  v681 = 0;
  v155 = (_QWORD *)v654[41];
  v156 = &unk_1C640F000;
  if (v155 != v658)
  {
    v157 = 0;
    v662 = (uint64_t *)(v141 + 408);
    v665 = v138 - 1;
    v668 = v138;
    LODWORD(v669) = v150;
    while (1)
    {
      v158 = v155 + 6;
      v655 = v155;
      v159 = v155[7];
      v659 = v155 + 6;
LABEL_196:
      if ((_QWORD *)v159 != v158)
        break;
      v155 = (_QWORD *)v655[1];
      if (v155 == v658)
        goto LABEL_375;
    }
    v661 = v157;
    v674 = v159;
    sub_1C498D4D0((uint64_t *)&__s2, v159);
    if ((__s2 & 1) != 0)
    {
      v161 = ((unint64_t)__s2 >> 1) & ~(-1 << ((unint64_t)__s2 >> 58));
      if (v161)
        v160 = __clz(__rbit64(v161));
      else
        v160 = -1;
    }
    else
    {
      v160 = sub_1C476B7EC((uint64_t)__s2);
    }
    LODWORD(v671) = 0;
    LODWORD(v672) = 0;
    v162 = 0;
    v163 = 0;
    *(_QWORD *)&v675 = v674 + 48;
LABEL_203:
    switch(v160)
    {
      case -1:
        v223 = 0;
        v224 = &v677;
        v225 = v674;
        do
        {
          if (((1 << v223) & v163) != 0)
          {
            v226 = 2;
          }
          else
          {
            if (((1 << v223) & v162) == 0)
              goto LABEL_345;
            v226 = 0;
          }
          v227 = *((unsigned int *)v224 - 2);
          if (v227 >= *((unsigned int *)v224 - 1))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v224 - 2), (uint64_t)v224, v227 + 1, 16);
            v225 = v674;
            v227 = *((unsigned int *)v224 - 2);
          }
          v228 = (uint64_t *)(*(v224 - 2) + 16 * v227);
          *v228 = v225;
          v228[1] = v226 | (v162 >> v223) & 1;
          ++*((_DWORD *)v224 - 2);
LABEL_345:
          ++v223;
          v224 += 10;
        }
        while (v223 != 11);
        sub_1C4914448((void ***)&__s2);
        v229 = v674;
        v230 = **(unsigned __int16 **)(v674 + 16);
        v231 = 1;
        v156 = (_QWORD *)&unk_1C640F000;
        v150 = (int)v669;
        if ((v230 - 8260) >= 2)
          v231 = (v230 - 499) < 0xC;
        v233 = (v230 - 2426) >= 4;
        v232 = v230 - 8262;
        v233 = v233 && v232 >= 3;
        if (!v233)
        {
          v234 = 1;
          goto LABEL_353;
        }
        v237 = !v231;
        if (v672 | v671)
          v237 = 0;
        v157 = v661;
        if (!v237)
        {
          v234 = 0;
LABEL_353:
          v235 = !v231;
          if ((_BYTE)v672)
            v235 = 0;
          if (!v235)
          {
            sub_1C498D7F0(*(_QWORD *)(v660 + 248), v674, (uint64_t *)&v678, (_QWORD *)&v679 + 1);
            v229 = v674;
          }
          if ((_BYTE)v672)
            v236 = 0;
          else
            v236 = v234;
          v150 = (int)v669;
          if ((_BYTE)v671 || (v157 = v229, v236))
          {
            sub_1C498D7F0(*(_QWORD *)(v660 + 248), v229, (uint64_t *)&v678 + 1, &v680);
            v229 = v674;
            v157 = v674;
          }
        }
        if ((*(_BYTE *)v229 & 4) == 0)
        {
          while ((*(_WORD *)(v229 + 44) & 8) != 0)
            v229 = *(_QWORD *)(v229 + 8);
        }
        v159 = *(_QWORD *)(v229 + 8);
        v158 = v659;
        goto LABEL_196;
      case 0:
        if (**(unsigned __int16 **)(v674 + 16) - 4581 <= 0xB
          && (v174 = *(_QWORD *)(v674 + 32), *(_BYTE *)(v174 + 64) == 1)
          && !*(_QWORD *)(v174 + 80))
        {
          v162 = 1;
        }
        else
        {
          v162 = 1;
          v163 = 1;
        }
        goto LABEL_332;
      case 1:
        v170 = *(_QWORD *)v675;
        if (*(_QWORD *)v675 < 8uLL)
          goto LABEL_219;
        if ((v170 & 7) != 0)
        {
          v171 = (int *)(v170 & 0xFFFFFFFFFFFFFFF8);
          v172 = (*(_QWORD *)v675 & 7) != 3 || v171 == 0;
          if (v172 || (v173 = *v171, __s1[0] = &v737, __s1[1] = (void *)0x1000000000, v173 != 1))
          {
LABEL_219:
            v163 |= 2u;
            v162 |= 2u;
LABEL_220:
            WORD2(v681) |= (unsigned __int16)v162 | (unsigned __int16)v163;
            goto LABEL_332;
          }
        }
        else
        {
          v170 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v675 = v170;
          __s1[0] = &v737;
          __s1[1] = (void *)0x1000000000;
        }
        if ((v170 & 7) != 0)
        {
          v189 = (_QWORD **)((v170 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          *(_QWORD *)v675 = v170 & 0xFFFFFFFFFFFFFFF8;
          v189 = (_QWORD **)v675;
        }
        v194 = *(unsigned int *)(v141 + 216);
        if (!(_DWORD)v194)
        {
          v138 = v668;
          v150 = (int)v669;
          goto LABEL_220;
        }
        v195 = *(void ****)(v141 + 208);
        v196 = &v195[2 * v194];
        v197 = (unint64_t *)((**v189 & ((uint64_t)(**v189 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 16);
        while (1)
        {
          v720[0] = (void *)1;
          v198 = *v195;
          if ((*v195 & 1) != 0)
            goto LABEL_277;
          v203 = (void **)operator new();
          v198 = v203;
          v204 = *v195;
          v205 = v203 + 2;
          *v203 = v203 + 2;
          v203[1] = (void *)0x600000000;
          v206 = *((unsigned int *)v204 + 2);
          if (v203 != v204 && v206 != 0)
            break;
LABEL_299:
          *((_DWORD *)v198 + 16) = *((_DWORD *)v204 + 16);
LABEL_277:
          v720[0] = v198;
          sub_1C496F35C((unint64_t *)v720, v197);
          if (((uint64_t)v720[0] & 1) != 0)
          {
            if ((((unint64_t)v720[0] >> 1) & ~(-1 << ((unint64_t)v720[0] >> 58))) != 0)
              goto LABEL_284;
          }
          else
          {
            v199 = *((unsigned int *)v720[0] + 2);
            if ((_DWORD)v199)
            {
              v200 = *(_QWORD **)v720[0];
              v201 = 8 * v199;
              while (!*v200)
              {
                ++v200;
                v201 -= 8;
                if (!v201)
                  goto LABEL_287;
              }
LABEL_284:
              v202 = LODWORD(__s1[1]);
              if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__s1, (uint64_t)&v737, LODWORD(__s1[1]) + 1, 8);
                v202 = LODWORD(__s1[1]);
              }
              *((_QWORD *)__s1[0] + v202) = v195;
              ++LODWORD(__s1[1]);
            }
          }
LABEL_287:
          sub_1C4914448((void ***)v720);
          v195 += 2;
          if (v195 == v196)
          {
            if (LODWORD(__s1[1]))
            {
              v209 = 8 * LODWORD(__s1[1]);
              v210 = (uint64_t *)__s1[0];
              v141 = v663;
              v138 = v668;
              v150 = (int)v669;
              do
              {
                v211 = *v210++;
                v163 |= 1 << *(_WORD *)(v211 + 10);
                v162 |= 1 << *(_WORD *)(v211 + 8);
                v209 -= 8;
              }
              while (v209);
            }
            else
            {
              v141 = v663;
              v138 = v668;
              v150 = (int)v669;
            }
            WORD2(v681) |= v162 | (unsigned __int16)v163;
            if (__s1[0] != &v737)
              free(__s1[0]);
LABEL_332:
            v160 = sub_1C49143F4((unint64_t *)&__s2, v160);
            goto LABEL_203;
          }
        }
        if (v206 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v203, (uint64_t)(v203 + 2), *((unsigned int *)v204 + 2), 8);
          v208 = *((unsigned int *)v204 + 2);
          if (!(_DWORD)v208)
          {
LABEL_298:
            *((_DWORD *)v198 + 2) = v206;
            goto LABEL_299;
          }
          v205 = *v198;
        }
        else
        {
          v208 = *((unsigned int *)v204 + 2);
        }
        memcpy(v205, *v204, 8 * v208);
        goto LABEL_298;
      case 2:
      case 10:
        v164 = *(_QWORD *)v675;
        if (*(_QWORD *)v675 < 8uLL)
          goto LABEL_211;
        if ((v164 & 7) != 0)
        {
          v165 = (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFF8);
          v166 = (*(_QWORD *)v675 & 7) != 3 || v165 == 0;
          if (v166 || *v165 != 1)
          {
LABEL_211:
            v167 = 0;
            v168 = 0;
            v169 = 1;
            goto LABEL_230;
          }
        }
        else
        {
          v164 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v675 = v164;
        }
        v169 = 0;
        if ((v164 & 7) != 0)
        {
          v168 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v168 = v164 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v675 = v164 & 0xFFFFFFFFFFFFFFF8;
        }
        v167 = 1;
LABEL_230:
        if (v160 == 2)
        {
          if (!v168)
          {
            v175 = 1;
            goto LABEL_252;
          }
          if ((*(_QWORD *)v168 & 4) == 0)
          {
            v176 = *(_QWORD *)v168 & 0xFFFFFFFFFFFFFFF8;
LABEL_242:
            v175 = (*(unsigned __int16 *)(v168 + 32) >> 1) & 1;
            if ((_DWORD)v138 && v176)
            {
              v178 = ((v176 >> 4) ^ (v176 >> 9)) & v665;
              v179 = &v666[40 * v178];
              v180 = *(_QWORD *)v179;
              if (v176 == *(_QWORD *)v179)
              {
LABEL_245:
                if (v178 != (_DWORD)v138)
                {
                  v181 = *((_QWORD *)v179 + 2);
                  if (v181)
                  {
                    v182 = 2 * v181;
                    v183 = (_BYTE *)(*((_QWORD *)v179 + 1) + 1);
                    do
                    {
                      v163 |= 1 << *v183;
                      v162 |= 1 << *(v183 - 1);
                      v183 += 2;
                      v182 -= 2;
                    }
                    while (v182);
                  }
                  if ((v169 & 1) == 0)
                    goto LABEL_255;
                }
              }
              else
              {
                v221 = 1;
                while (v180 != -4096)
                {
                  v222 = v178 + v221++;
                  v178 = v222 & v665;
                  v179 = &v666[40 * v178];
                  v180 = *(_QWORD *)v179;
                  if (v176 == *(_QWORD *)v179)
                    goto LABEL_245;
                }
              }
            }
LABEL_252:
            v163 |= v673;
            v162 |= v150;
            if (v160 != 2)
              v167 = 1;
            if ((v167 & 1) == 0)
            {
              v163 |= 4u;
              v162 |= 4u;
              goto LABEL_263;
            }
LABEL_255:
            if (v160 != 2)
            {
LABEL_256:
              if (v160 != 10)
                goto LABEL_332;
              v184 = *(_DWORD *)(v141 + 416);
              v185 = v674;
              if (!v184)
                goto LABEL_324;
              v186 = *(unsigned __int16 **)(v674 + 16);
              v187 = *v186;
              if ((v186[8] & 2) == 0 && (v187 - 2970) >= 0x48 && (v187 - 2862) > 0x6B)
              {
                v184 = 0;
LABEL_324:
                v163 |= v184;
                WORD1(v681) |= (unsigned __int16)v163 | (unsigned __int16)v162;
                if (v163 | v162)
                  v218 = v175;
                else
                  v218 = 0;
                HIBYTE(v681) |= v218;
                LODWORD(v671) = v218;
                v220 = v218 == 1
                    && (v219 = **(unsigned __int16 **)(v185 + 16), (v219 - 2862) <= 0xB3)
                    && *(_QWORD *)(*(_QWORD *)(v185 + 32) + 32 * sub_1C4B138B4(v219) + 16) < 4uLL;
                v682 |= v220;
                goto LABEL_332;
              }
              v190 = sub_1C4B138B4(v187);
              v191 = *(_QWORD *)(v674 + 32);
              if (*(_BYTE *)(v191 + 32 * v190) == 1)
              {
                LODWORD(__s1[0]) = *(_QWORD *)(v191 + 32 * v190 + 16);
                v192 = sub_1C498D77C(v662, __s1);
                if ((int *)(*(_QWORD *)(v141 + 408) + 8 * *(unsigned int *)(v141 + 424)) == v192)
                {
                  v184 = 0;
                  v185 = v674;
                  goto LABEL_324;
                }
                v184 = (1 << *((_BYTE *)v192 + 5));
                v193 = (1 << *((_BYTE *)v192 + 4));
              }
              else
              {
                v212 = *(unsigned int *)(v141 + 424);
                if ((_DWORD)v212)
                {
                  v213 = 8 * v212;
                  v214 = *(unsigned int **)(v141 + 408);
                  while (*v214 >= 0xFFFFFFFE)
                  {
                    v214 += 2;
                    v213 -= 8;
                    if (!v213)
                      goto LABEL_322;
                  }
                }
                else
                {
                  v214 = *(unsigned int **)(v141 + 408);
                }
                v215 = *(_QWORD *)(v141 + 408) + 8 * v212;
                if (v214 != (unsigned int *)v215)
                {
                  v184 = 0;
                  v193 = 0;
                  while (1)
                  {
                    v193 |= (1 << *((_BYTE *)v214 + 4));
                    v184 |= (1 << *((_BYTE *)v214 + 5));
                    v216 = v214 + 2;
                    do
                    {
                      if (v216 == (unsigned int *)v215)
                        goto LABEL_323;
                      v217 = *v216;
                      v216 += 2;
                    }
                    while (v217 > 0xFFFFFFFD);
                    v214 = v216 - 2;
                  }
                }
LABEL_322:
                v193 = 0;
                v184 = 0;
              }
LABEL_323:
              v185 = v674;
              v162 |= v193;
              goto LABEL_324;
            }
LABEL_263:
            LOWORD(v681) = v681 | v162 | v163;
            if (v162 | v163)
              v188 = v175;
            else
              v188 = 0;
            LODWORD(v672) = v188;
            BYTE6(v681) |= v188;
            goto LABEL_332;
          }
        }
        else
        {
          if (!v168)
          {
            v175 = 1;
            goto LABEL_238;
          }
          if ((*(_QWORD *)v168 & 4) == 0)
          {
            v175 = (*(unsigned __int16 *)(v168 + 32) >> 1) & 1;
LABEL_238:
            v163 |= v673;
            v162 |= v150;
            goto LABEL_256;
          }
          v177 = *(_QWORD *)v168 & 0xFFFFFFFFFFFFFFF8;
          if (v177)
          {
            v176 = *(_QWORD *)(v177 + 16);
            goto LABEL_242;
          }
        }
        v175 = (*(unsigned __int16 *)(v168 + 32) >> 1) & 1;
        goto LABEL_252;
      default:
        goto LABEL_332;
    }
  }
  v157 = 0;
LABEL_375:
  v238 = *((_QWORD *)&v678 + 1);
  if ((_QWORD)v678)
  {
    if (*((_QWORD *)&v678 + 1))
    {
      v239 = v157;
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v660 + 248), v678, *((uint64_t *)&v678 + 1));
      v157 = v239;
      v238 = NearestCommonDominator;
      goto LABEL_378;
    }
    *(_QWORD *)&v679 = v678;
LABEL_385:
    v157 = *((_QWORD *)&v679 + 1);
    goto LABEL_386;
  }
LABEL_378:
  *(_QWORD *)&v679 = v238;
  if (v238)
  {
    if ((_QWORD)v678 != *((_QWORD *)&v678 + 1))
    {
      if (v238 == (_QWORD)v678)
        goto LABEL_385;
      if (v238 == *((_QWORD *)&v678 + 1))
        v157 = v680;
      else
        v157 = 0;
    }
LABEL_386:
    *((_QWORD *)&v680 + 1) = v157;
  }
  if ((_DWORD)v138)
  {
    v241 = 40 * v138;
    v242 = (char *)(v666 + 32);
    do
    {
      if ((*((_QWORD *)v242 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v243 = (char *)*((_QWORD *)v242 - 3);
        if (v242 != v243)
          free(v243);
      }
      v242 += 40;
      v241 -= 40;
    }
    while (v241);
  }
  MEMORY[0x1CAA32FB4](v666, 8);
  sub_1C495C918((uint64_t)v683);
  MEMORY[0x1CAA32FB4](v683[0], 8);
  if (v702 != (char *)v703 + 8)
    free(v702);
  v244 = (uint64_t)v654;
  v245 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v652 + 24))(v652, *v654);
  v669 = (unsigned int (***)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))v245;
  if ((**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v245)(v245, 29, 0, 1, 2))
  {
    v246 = 0;
  }
  else
  {
    v247 = *(_QWORD *)(*v654 + 40);
    if (((*(unsigned __int16 *)(*v654 + 18) >> 4) & 0x3FFu) - 103 < 2
      || (__s1[0] = "agx.sample_rate", v740[0] = 259, llvm::Module::getNamedMetadata(v247, (uint64_t)__s1)))
    {
      sub_1C5EA6284(v247, 0x80u, (uint64_t)__s1);
      v248 = v741;
      if (v741 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v660 + 248) + 72) + 32) == 1)
      {
        __s2 = v710;
        v709 = 0x600000000;
        sub_1C4765AA4((char *)&__s2, (v741 + 63) >> 6, 0);
        v711 = v248;
        v249 = v654[41];
        if ((_QWORD *)v249 != v658)
        {
          v250 = v654[41];
          do
          {
            if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(v660 + 248), v250, v249))
            {
              for (k = *(_QWORD *)(v250 + 56); k != v250 + 48; k = *(_QWORD *)(k + 8))
              {
                if ((~*(_DWORD *)(*(_QWORD *)(k + 16) + 16) & 0x800200) == 0)
                {
                  sub_1C4887E60(k, (uint64_t)v720);
                  if (!BYTE6(v720[1]))
                  {
                    sub_1C4887FC4((unsigned int *)v720, (llvm::APInt *)&v702);
                    v252 = (unsigned int *)(LODWORD(v703[0]) >= 0x41 ? v702 : &v702);
                    sub_1C4914230((uint64_t)&__s2, v252, (((unint64_t)LODWORD(v703[0]) + 63) >> 5) & 0xFFFFFFE);
                    if (LODWORD(v703[0]) >= 0x41)
                    {
                      if (v702)
                        MEMORY[0x1CAA32F9C](v702, 0x1000C8000313F17);
                    }
                  }
                }
                if ((*(_BYTE *)k & 4) == 0)
                {
                  while ((*(_WORD *)(k + 44) & 8) != 0)
                    k = *(_QWORD *)(k + 8);
                }
              }
            }
            v250 = *(_QWORD *)(v250 + 8);
          }
          while ((_QWORD *)v250 != v658);
        }
        v253 = v709;
        v254 = LODWORD(__s1[1]);
        if (LODWORD(__s1[1]) >= v709)
          v255 = v709;
        else
          v255 = LODWORD(__s1[1]);
        v256 = __s2;
        if ((_DWORD)v255)
        {
          v257 = (uint64_t *)__s1[0];
          v258 = __s2;
          v259 = v255;
          do
          {
            v260 = *v257++;
            *v258++ &= v260;
            --v259;
          }
          while (v259);
        }
        if (v253 > v254)
        {
          do
          {
            v256[v255] = 0;
            LODWORD(v255) = v255 + 1;
          }
          while (v253 != (_DWORD)v255);
        }
        v245 = (uint64_t)v669;
        v246 = v741 == v711 && memcmp(__s1[0], v256, 8 * v254) == 0;
        if (v256 != (_QWORD *)v710)
          free(v256);
      }
      else
      {
        v246 = 0;
      }
      v244 = (uint64_t)v654;
      if (__s1[0] != &v737)
        free(__s1[0]);
    }
    else
    {
      v246 = 0;
      v244 = (uint64_t)v654;
    }
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL4, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v245 + 8))(v245, 30, v246, 1, 0, 1, 2);
  __s2 = (void *)1;
  for (m = 8; m != 1672; m += 104)
    *(void **)((char *)&__s2 + m) = (void *)-4096;
  v712[0] = 1;
  for (n = 1680; n != 3344; n += 104)
    *(void **)((char *)&__s2 + n) = (void *)-4096;
  sub_1C498D8A0((uint64_t)&__s2, v244, v660);
  if (!*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v244 + 8) + 16))(*(_QWORD *)(v244 + 8), *(_QWORD *)v244)+ 296))
  {
LABEL_472:
    v282 = 0;
    goto LABEL_762;
  }
  LODWORD(v674) = !v246;
  v685[0] = 0;
  v685[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v244 + 16) + 104))(*(_QWORD *)(v244 + 16));
  v270 = v654 + 40;
  do
  {
    v270 = (_QWORD *)*v270;
    if (v270 == v658)
      goto LABEL_472;
  }
  while (((v270[12] - v270[11]) & 0x7FFFFFFF8) != 0);
  v271 = v244;
  v272 = *(uint64_t **)(v244 + 328);
  if ((*(_WORD *)(*(_QWORD *)v271 + 18) & 0x3FF0) == 0x6C0)
    v273 = 3;
  else
    v273 = 0;
  LODWORD(v683[0]) = v273;
  FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator((llvm::MachineBasicBlock *)v272);
  v275 = (uint64_t *)FirstInstrTerminator;
  if (!v651 || (v276 = (uint64_t *)v272[7], v276 == (uint64_t *)FirstInstrTerminator))
  {
LABEL_476:
    v276 = v275;
  }
  else
  {
    while (1)
    {
      sub_1C498D4D0((uint64_t *)__s1, (uint64_t)v276);
      if (((uint64_t)__s1[0] & 1) != 0)
      {
        v280 = ((unint64_t)__s1[0] >> 1) & ~(-1 << ((unint64_t)__s1[0] >> 58));
        sub_1C4914448((void ***)__s1);
        if (v280)
          goto LABEL_477;
      }
      else
      {
        v277 = *((unsigned int *)__s1[0] + 2);
        if ((_DWORD)v277)
        {
          v278 = *(_QWORD **)__s1[0];
          v279 = 8 * v277;
          while (!*v278)
          {
            ++v278;
            v279 -= 8;
            if (!v279)
              goto LABEL_467;
          }
          sub_1C4914448((void ***)__s1);
          goto LABEL_477;
        }
LABEL_467:
        sub_1C4914448((void ***)__s1);
      }
      v281 = (uint64_t *)v276[1];
      if ((*(_BYTE *)(v276[2] + 16) & 0x40) != 0)
        break;
      v276 = (uint64_t *)v276[1];
      if (v281 == v275)
        goto LABEL_476;
    }
    if (v281 == v275)
      goto LABEL_476;
    v276 = sub_1C498E4A0(v272, v276, 0);
  }
LABEL_477:
  v700[0] = 0;
  v283 = v272 + 6;
  if (v276 == v272 + 6)
    v276 = sub_1C498E57C(v272);
  if (v276 == v283)
  {
    v285 = v272 + 6;
  }
  else
  {
    v284 = sub_1C498E634(v276);
    v285 = v284;
    if (v284 + 7 != (uint64_t *)v700)
    {
      v286 = (unsigned __int8 *)v284[7];
      v700[0] = v286;
      if (v286)
        llvm::MetadataTracking::track((uint64_t)v700, v286, 2);
    }
  }
  v287 = v654[2];
  v288 = *(unsigned __int8 *)(v287 + 318);
  if (*(_BYTE *)(v287 + 327))
    v289 = 4676;
  else
    v289 = 4675;
  if (v288)
    v289 = 4674;
  LODWORD(v670) = v289;
  if ((_DWORD)v651)
  {
    if (v283 != v285 && v285 != *(uint64_t **)(v285[3] + 56))
    {
      v290 = *v285 & 0xFFFFFFFFFFFFFFF8;
      v291 = *(_QWORD *)(*(_QWORD *)(v290 + 16) + 8);
      if ((*(_WORD *)(v290 + 44) & 0xC) != 0 && (*(_WORD *)(v290 + 44) & 4) == 0)
      {
        if ((v291 & 0x400) != 0)
        {
LABEL_497:
          v293 = *(_QWORD *)(v685[0] + 8);
          v294 = (llvm::MachineFunction *)v272[4];
          v720[0] = v700[0];
          if (v700[0])
            llvm::MetadataTracking::track((uint64_t)v720, v700[0], 2);
          v295 = v293 + 48 * v670;
          v296 = (llvm::MachineInstr *)*((_QWORD *)v294 + 28);
          if (v296)
            *((_QWORD *)v294 + 28) = *(_QWORD *)v296;
          else
            v296 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v294 + 128, 72, 3);
          __s1[0] = v720[0];
          if (v720[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
            v720[0] = 0;
          }
          llvm::MachineInstr::MachineInstr(v296, v294, v295, (unsigned __int8 **)__s1, 0);
          if (__s1[0])
            llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
          if (v720[0])
            llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
          if ((*((_WORD *)v285 + 22) & 4) != 0)
            *((_WORD *)v296 + 22) |= 0xCu;
          sub_1C512CA10(v272 + 5, v285, (uint64_t)v296);
        }
        else
        {
          while ((*(_WORD *)(v290 + 44) & 8) != 0)
          {
            v290 = *(_QWORD *)(v290 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v290 + 16) + 9) & 4) != 0)
              goto LABEL_497;
          }
        }
      }
      else if ((v291 & 0x400) != 0)
      {
        goto LABEL_497;
      }
    }
    v297 = *(_QWORD *)(v685[0] + 8);
    v298 = (llvm::MachineFunction *)v272[4];
    v720[0] = v700[0];
    if (v700[0])
      llvm::MetadataTracking::track((uint64_t)v720, v700[0], 2);
    v299 = (llvm::MachineInstr *)*((_QWORD *)v298 + 28);
    if (v299)
      *((_QWORD *)v298 + 28) = *(_QWORD *)v299;
    else
      v299 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v298 + 128, 72, 3);
    __s1[0] = v720[0];
    if (v720[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
      v720[0] = 0;
    }
    llvm::MachineInstr::MachineInstr(v299, v298, v297 + 231648, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    if (v283 != v285 && (*((_WORD *)v285 + 22) & 4) != 0)
      *((_WORD *)v299 + 22) |= 0xCu;
    sub_1C512CA10(v272 + 5, v285, (uint64_t)v299);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = v651;
    llvm::MachineInstr::addOperand(v299, v298, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 3;
    llvm::MachineInstr::addOperand(v299, v298, (const llvm::MachineOperand *)__s1);
  }
  if (HIDWORD(v651))
  {
    if (v283 != v285 && v285 != *(uint64_t **)(v285[3] + 56))
    {
      v300 = *v285 & 0xFFFFFFFFFFFFFFF8;
      v301 = *(_QWORD *)(*(_QWORD *)(v300 + 16) + 8);
      if ((*(_WORD *)(v300 + 44) & 0xC) != 0 && (*(_WORD *)(v300 + 44) & 4) == 0)
      {
        if ((v301 & 0x400) != 0)
        {
LABEL_538:
          v303 = *(_QWORD *)(v685[0] + 8);
          v304 = (llvm::MachineFunction *)v272[4];
          v720[0] = v700[0];
          if (v700[0])
            llvm::MetadataTracking::track((uint64_t)v720, v700[0], 2);
          v305 = v303 + 48 * v670;
          v306 = (llvm::MachineInstr *)*((_QWORD *)v304 + 28);
          if (v306)
            *((_QWORD *)v304 + 28) = *(_QWORD *)v306;
          else
            v306 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v304 + 128, 72, 3);
          __s1[0] = v720[0];
          if (v720[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
            v720[0] = 0;
          }
          llvm::MachineInstr::MachineInstr(v306, v304, v305, (unsigned __int8 **)__s1, 0);
          if (__s1[0])
            llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
          if (v720[0])
            llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
          if ((*((_WORD *)v285 + 22) & 4) != 0)
            *((_WORD *)v306 + 22) |= 0xCu;
          sub_1C512CA10(v272 + 5, v285, (uint64_t)v306);
        }
        else
        {
          while ((*(_WORD *)(v300 + 44) & 8) != 0)
          {
            v300 = *(_QWORD *)(v300 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v300 + 16) + 9) & 4) != 0)
              goto LABEL_538;
          }
        }
      }
      else if ((v301 & 0x400) != 0)
      {
        goto LABEL_538;
      }
    }
    v307 = *(_QWORD *)(v685[0] + 8);
    v308 = (llvm::MachineFunction *)v272[4];
    v720[0] = v700[0];
    if (v700[0])
      llvm::MetadataTracking::track((uint64_t)v720, v700[0], 2);
    v309 = (llvm::MachineInstr *)*((_QWORD *)v308 + 28);
    if (v309)
      *((_QWORD *)v308 + 28) = *(_QWORD *)v309;
    else
      v309 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v308 + 128, 72, 3);
    __s1[0] = v720[0];
    if (v720[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
      v720[0] = 0;
    }
    llvm::MachineInstr::MachineInstr(v309, v308, v307 + 231648, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    if (v283 != v285 && (*((_WORD *)v285 + 22) & 4) != 0)
      *((_WORD *)v309 + 22) |= 0xCu;
    sub_1C512CA10(v272 + 5, v285, (uint64_t)v309);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = HIDWORD(v651);
    llvm::MachineInstr::addOperand(v309, v308, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    v737 = 0;
    __s1[1] = 0;
    llvm::MachineInstr::addOperand(v309, v308, (const llvm::MachineOperand *)__s1);
  }
  v667 = v246;
  v310 = 0;
  v282 = 0;
  v713 = (unsigned __int8 *)v700;
  v714 = v685;
  v715 = (uint64_t)v683;
  v311 = v650;
  while (2)
  {
    v312 = &v676[80 * v310];
    v313 = 1 << v310;
    v314 = *((unsigned int *)v312 + 2);
    if (!(_DWORD)v314)
    {
      v282 |= v313;
      goto LABEL_734;
    }
    LODWORD(v675) = (unsigned __int16)(v313 & WORD2(v681));
    __s1[0] = v740;
    __s1[1] = v740;
    v737 = 16;
    v738 = 0;
    v720[0] = &v722;
    v720[1] = &v722;
    *(_QWORD *)&v721 = 16;
    DWORD2(v721) = 0;
    LODWORD(v672) = v282;
    if (((unsigned __int16)v313 & WORD1(v681)) != 0 && ((unsigned __int16)v313 & (unsigned __int16)v681) != 0)
    {
      v315 = (_QWORD *)v679;
      v316 = *((_QWORD *)&v680 + 1);
      if (!*((_QWORD *)&v680 + 1))
        goto LABEL_584;
LABEL_583:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, v316);
      v314 = *((unsigned int *)v312 + 2);
      if (!(_DWORD)v314)
        goto LABEL_649;
    }
    else
    {
      if (((unsigned __int16)v313 & WORD1(v681)) != 0)
      {
        v315 = (_QWORD *)*((_QWORD *)&v678 + 1);
        v316 = v680;
        if (!(_QWORD)v680)
          goto LABEL_584;
        goto LABEL_583;
      }
      if (((unsigned __int16)v313 & (unsigned __int16)v681) != 0)
      {
        v315 = (_QWORD *)v678;
        v316 = *((_QWORD *)&v679 + 1);
        if (*((_QWORD *)&v679 + 1))
          goto LABEL_583;
      }
      else
      {
        v315 = 0;
      }
    }
LABEL_584:
    v317 = *(uint64_t **)v312;
    v318 = *(_QWORD *)v312 + 16 * v314;
    LoopPreheader = 0;
    if ((_DWORD)v675)
      v320 = v674;
    else
      v320 = 1;
    while (2)
    {
      v321 = *v317;
      v322 = *(_QWORD *)(*v317 + 48);
      if (v322 < 8)
      {
LABEL_600:
        v325 = 1;
      }
      else
      {
        if ((v322 & 7) != 0)
        {
          v323 = v322 & 0xFFFFFFFFFFFFFFF8;
          v324 = (*(_QWORD *)(*v317 + 48) & 7) != 3 || v323 == 0;
          if (v324 || *(_DWORD *)v323 != 1)
            goto LABEL_600;
        }
        else
        {
          *(_QWORD *)(v321 + 48) = v322 & 0xFFFFFFFFFFFFFFF8;
          v321 = *v317;
          v322 = *(_QWORD *)(*v317 + 48);
          v323 = v322 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((v322 & 7) != 0)
        {
          v323 = *(_QWORD *)(v323 + 8);
          if (!v323)
            goto LABEL_600;
        }
        else
        {
          *(_QWORD *)(v321 + 48) = v323;
          if (!v323)
            goto LABEL_600;
        }
        v325 = (*(unsigned __int16 *)(v323 + 32) >> 1) & 1;
      }
      v326 = *v317;
      v327 = *(unsigned __int16 **)(*v317 + 16);
      if ((v327[8] & 2) != 0)
        v325 = 0;
      if (*v327 - 4581 <= 0xB && (v328 = *(_QWORD *)(v326 + 32), *(_BYTE *)(v328 + 64) == 1))
      {
        if (!*(_QWORD *)(v328 + 80))
          LOBYTE(v325) = 0;
        if ((v325 & 1) == 0)
        {
LABEL_608:
          v329 = *((_BYTE *)v317 + 8);
          if ((v329 & 1) != 0)
          {
            v330 = *(_QWORD **)(v326 + 24);
            if (v315)
            {
              if (v330)
                v330 = (_QWORD *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v660 + 248), (uint64_t)v315, (uint64_t)v330);
              else
                v330 = v315;
            }
            v315 = sub_1C498E6EC(v330);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, *v317);
          }
          if ((v329 & 2) != 0)
          {
            v332 = *v317;
            v333 = *(_QWORD *)(*v317 + 24);
            if (LoopPreheader)
            {
              if (v333)
              {
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v311);
                v333 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*((_QWORD *)v311 + 165), (uint64_t)LoopPreheader, v333);
                v332 = *v317;
              }
              else
              {
                v333 = (uint64_t)LoopPreheader;
              }
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)v720, v332);
            LoopPreheader = (llvm::MachineBasicBlock *)v333;
          }
          goto LABEL_632;
        }
      }
      else if (!v325)
      {
        goto LABEL_608;
      }
      if (v320)
      {
        v331 = *(_QWORD *)(v326 + 24);
        if (LoopPreheader)
        {
          if (v331)
          {
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v311);
            v331 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*((_QWORD *)v311 + 165), (uint64_t)LoopPreheader, v331);
            v326 = *v317;
          }
          else
          {
            v331 = (uint64_t)LoopPreheader;
          }
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v720, v326);
        v326 = *v317;
        LoopPreheader = (llvm::MachineBasicBlock *)v331;
      }
      v334 = *(_QWORD **)(v326 + 24);
      if (v315)
      {
        if (v334)
          v334 = (_QWORD *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v660 + 248), (uint64_t)v315, (uint64_t)v334);
        else
          v334 = v315;
      }
      v315 = sub_1C498E6EC(v334);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, *v317);
LABEL_632:
      v317 += 2;
      if (v317 != (uint64_t *)v318)
        continue;
      break;
    }
    if (!LoopPreheader)
    {
      v282 = v672;
LABEL_649:
      if (!v315)
        goto LABEL_666;
      goto LABEL_650;
    }
    v335 = *(_DWORD *)(v657 + 264);
    v282 = v672;
    if (v335)
    {
      v336 = *(_QWORD *)(v657 + 248);
      v337 = v335 - 1;
      v338 = (v335 - 1) & ((LoopPreheader >> 4) ^ (LoopPreheader >> 9));
      v339 = *(llvm::MachineBasicBlock **)(v336 + 16 * v338);
      if (LoopPreheader == v339)
      {
LABEL_639:
        v342 = *(_QWORD *)(v336 + 16 * v338 + 8);
        if (v342)
          LoopPreheader = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(v342);
      }
      else
      {
        v340 = 1;
        while (v339 != (llvm::MachineBasicBlock *)-4096)
        {
          v341 = v338 + v340++;
          v338 = v341 & v337;
          v339 = *(llvm::MachineBasicBlock **)(v336 + 16 * v338);
          if (LoopPreheader == v339)
            goto LABEL_639;
        }
      }
    }
    v343 = (_QWORD *)((char *)LoopPreheader + 48);
    for (ii = *((_QWORD *)LoopPreheader + 7); (_QWORD *)ii != v343; ii = *(_QWORD *)(ii + 8))
    {
      v345 = sub_1C477672C((uint64_t)v720, ii);
      if (v720[1] == v720[0])
        v346 = (unsigned int *)&v721 + 1;
      else
        v346 = (unsigned int *)&v721;
      if (v345 != (_QWORD *)((char *)v720[1] + 8 * *v346))
      {
        v343 = (_QWORD *)ii;
        break;
      }
    }
    sub_1C498E758((uint64_t)&v713, LoopPreheader, v343, 1 << v310, v670);
    if (!v315)
    {
LABEL_666:
      v282 |= v313;
      goto LABEL_730;
    }
LABEL_650:
    v347 = v674;
    if (!(_DWORD)v675)
      v347 = 1;
    if (v347 == 1)
    {
      v348 = v315 + 6;
      v349 = v315 + 6;
      while (1)
      {
        v349 = (_QWORD *)(*v349 & 0xFFFFFFFFFFFFFFF8);
        if (v348 == v349)
          break;
        v350 = sub_1C477672C((uint64_t)__s1, (uint64_t)v349);
        if (__s1[1] == __s1[0])
          v351 = (uint64_t *)((char *)&v737 + 4);
        else
          v351 = &v737;
        v352 = v349;
        if (v350 != (_QWORD *)((char *)__s1[1] + 8 * *(unsigned int *)v351))
          goto LABEL_661;
      }
      v352 = (_QWORD *)v315[7];
LABEL_661:
      if (v352 == v348)
      {
        v695[0] = 0;
      }
      else
      {
        v353 = (unsigned __int8 *)v352[7];
        v695[0] = v353;
        if (v353)
          llvm::MetadataTracking::track((uint64_t)v695, v353, 2);
      }
      v354 = v352;
      if (v310 == 1)
      {
LABEL_669:
        if (v348 != v349 && v354 == v352 && v354 != v348)
          v354 = (_QWORD *)v352[1];
        goto LABEL_714;
      }
      if (__s1[1] == __s1[0])
        v355 = (uint64_t *)((char *)&v737 + 4);
      else
        v355 = &v737;
      v356 = *(unsigned int *)v355;
      if ((_DWORD)v356)
      {
        v357 = 8 * v356;
        v358 = (unint64_t *)__s1[1];
        while (*v358 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v358;
          v357 -= 8;
          if (!v357)
          {
            v354 = v352;
            goto LABEL_705;
          }
        }
      }
      else
      {
        v358 = (unint64_t *)__s1[1];
      }
      v359 = (unint64_t *)((char *)__s1[1] + 8 * v356);
      v354 = v352;
      if (v358 != v359)
      {
        v360 = 0;
        v361 = *v358;
        v362 = v352;
LABEL_685:
        if (*(_QWORD **)(v361 + 24) != v315)
          goto LABEL_700;
        v363 = **(unsigned __int16 **)(v361 + 16);
        if ((v363 - 4581) < 0xC)
          goto LABEL_700;
        v664 = v362;
        LODWORD(v675) = v360;
        v364 = 1;
        do
        {
          v365 = sub_1C4B138B4(v363);
          if ((v364 & 1) == 0)
            break;
          v364 = 0;
        }
        while (v365 == -1);
        v311 = v650;
        if (v365 == -1)
        {
          v360 = v675;
          v362 = v664;
          goto LABEL_700;
        }
        v366 = *(unsigned int *)(*(_QWORD *)(v361 + 32) + 32 * v365 + 16);
        v354 = v315 + 6;
        if (v664 != v348)
        {
          v367 = v664;
          while (*(_WORD *)v367[2] != 8277 || *(_QWORD *)(v367[4] + 16) != v366)
          {
            v367 = (_QWORD *)v367[1];
            if (v367 == v348)
            {
              v354 = v664;
              goto LABEL_699;
            }
          }
          v354 = (_QWORD *)v367[1];
        }
LABEL_699:
        v360 = (1 << v366) | v675;
        v362 = v354;
        if (v360 != 3)
        {
LABEL_700:
          v368 = v358 + 1;
          while (v368 != v359)
          {
            v369 = *v368++;
            v361 = v369;
            if (v369 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v358 = v368 - 1;
              goto LABEL_685;
            }
          }
          v354 = v362;
        }
      }
LABEL_705:
      if (v354 != v348)
      {
        v156 = (_QWORD *)&unk_1C640F000;
        v282 = v672;
        while (1)
        {
          v370 = *(unsigned __int16 *)v354[2] - 724;
          if (v370 > 4 || v370 == 2)
            goto LABEL_669;
          v354 = (_QWORD *)v354[1];
          if (v354 == v348)
          {
            v354 = v315 + 6;
            goto LABEL_714;
          }
        }
      }
      v354 = v315 + 6;
      v156 = &unk_1C640F000;
      v282 = v672;
LABEL_714:
      v372 = *(_QWORD *)(v685[0] + 8);
      v373 = (llvm::MachineFunction *)v315[4];
      v696[0] = v695[0];
      if (v695[0])
        llvm::MetadataTracking::track((uint64_t)v696, v695[0], 2);
      v374 = (llvm::MachineInstr *)*((_QWORD *)v373 + 28);
      if (v374)
        *((_QWORD *)v373 + 28) = *(_QWORD *)v374;
      else
        v374 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v373 + 128, 72, 3);
      v702 = v696[0];
      if (v696[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v696, v696[0], (uint64_t)&v702);
        v696[0] = 0;
      }
      llvm::MachineInstr::MachineInstr(v374, v373, v372 + 231600, (unsigned __int8 **)&v702, 0);
      if (v702)
        llvm::MetadataTracking::untrack((uint64_t)&v702, (unsigned __int8 *)v702);
      if (v696[0])
        llvm::MetadataTracking::untrack((uint64_t)v696, v696[0]);
      if (v348 != v354 && (*((_WORD *)v354 + 22) & 4) != 0)
        *((_WORD *)v374 + 22) |= 0xCu;
      sub_1C512CA10(v315 + 5, v354, (uint64_t)v374);
      LODWORD(v702) = 1;
      *(_QWORD *)&v703[0] = 0;
      *((_QWORD *)&v703[0] + 1) = 1 << v310;
      llvm::MachineInstr::addOperand(v374, v373, (const llvm::MachineOperand *)&v702);
      if (v695[0])
        llvm::MetadataTracking::untrack((uint64_t)v695, v695[0]);
    }
LABEL_730:
    if (v720[1] != v720[0])
      free(v720[1]);
    if (__s1[1] != __s1[0])
      free(__s1[1]);
LABEL_734:
    if (++v310 != 10)
      continue;
    break;
  }
  if (v667)
  {
    v375 = (_QWORD *)v654[41];
    if (v375 == v658)
    {
      v376 = 0;
      v375 = 0;
    }
    else
    {
      LODWORD(v672) = v282;
      v376 = 0;
      v377 = BYTE4(v681);
      do
      {
        for (jj = v375[7]; (_QWORD *)jj != v375 + 6; jj = *(_QWORD *)(jj + 8))
        {
          v379 = *(_QWORD *)(*(_QWORD *)(jj + 16) + 16) & 0x800200;
          v380 = v379 == 8389120;
          if ((v377 & 1) != 0)
          {
            sub_1C498D4D0((uint64_t *)__s1, jj);
            if (((uint64_t)__s1[0] & 1) != 0)
              v381 = ((unint64_t)__s1[0] >> 1) & ~(-1 << ((unint64_t)__s1[0] >> 58));
            else
              v381 = **(_QWORD **)__s1[0];
            v380 = (v379 == 8389120) | v381;
            sub_1C4914448((void ***)__s1);
          }
          if ((v380 & 1) != 0)
          {
            v376 = (_QWORD *)jj;
            goto LABEL_750;
          }
        }
        v375 = (_QWORD *)v375[1];
      }
      while (v375 != v658);
      v375 = 0;
LABEL_750:
      v282 = v672;
    }
    v382 = sub_1C498EC7C((uint64_t)&__s2, (uint64_t)v375);
    v383 = &v709;
    if ((__s2 & 1) != 0)
    {
      v384 = 16;
    }
    else
    {
      v383 = (uint64_t *)v709;
      v384 = v710[0];
    }
    if (&v383[13 * v384] != v382 && *((_DWORD *)v382 + 7) != *((_DWORD *)v382 + 8))
    {
      v375 = (_QWORD *)v654[41];
      v376 = v375 + 6;
    }
    if (v375)
      sub_1C498E758((uint64_t)&v713, v375, v376, WORD2(v681), v670);
  }
  if (v700[0])
    llvm::MetadataTracking::untrack((uint64_t)v700, v700[0]);
LABEL_762:
  v702 = (void *)1;
  v703[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v703[1] = v703[0];
  v703[2] = v703[0];
  v704 = v703[0];
  v705 = v707;
  v706 = 0x800000000;
  __s1[0] = (void *)1;
  for (kk = 1; kk != 209; kk += 13)
    __s1[kk] = (void *)-4096;
  LODWORD(v672) = v282;
  v742[0] = 1;
  for (mm = 210; mm != 418; mm += 13)
    __s1[mm] = (void *)-4096;
  sub_1C498D8A0((uint64_t)__s1, (uint64_t)v654, v660);
  v387 = (const llvm::TargetSubtargetInfo *)v654[2];
  (*(void (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v387 + 104))(v387);
  v722 = xmmword_1C8663800;
  v723 = unk_1C8663810;
  v721 = unk_1C86637F0;
  *(_OWORD *)v720 = llvm::MCSchedModel::Default;
  v726 = unk_1C86637F0;
  v727 = xmmword_1C8663800;
  v728 = unk_1C8663810;
  v724 = 0;
  v729 = 0;
  v725 = llvm::MCSchedModel::Default;
  v732 = 0u;
  v731 = 0u;
  v730 = 0u;
  v733 = v735;
  v734 = v156[230];
  v735[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v720, v387);
  v388 = (_QWORD *)v654[41];
  if (v388 != v658)
  {
    v674 = (uint64_t)v387;
    do
    {
      v673 = v388;
      v390 = v388[6];
      v389 = v388 + 6;
      v391 = v390 & 0xFFFFFFFFFFFFFFF8;
      if ((v390 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v391 & 4) == 0)
      {
        while ((*(_WORD *)(v391 + 44) & 4) != 0)
          v391 = *(_QWORD *)v391 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((_QWORD *)v391 != v389)
      {
        v392 = (char)v702;
        v393 = v391 >> 4;
        if ((v702 & 1) != 0)
        {
          v394 = 8;
          v395 = v703;
        }
        else
        {
          v394 = DWORD2(v703[0]);
          if (!DWORD2(v703[0]))
            goto LABEL_783;
          v395 = *(_OWORD **)&v703[0];
        }
        v396 = v394 - 1;
        v397 = v396 & (v393 ^ (v391 >> 9));
        v398 = *((_QWORD *)v395 + v397);
        if (v391 == v398)
          goto LABEL_949;
        v399 = 1;
        while (v398 != -4096)
        {
          v400 = v397 + v399++;
          v397 = v400 & v396;
          v398 = *((_QWORD *)v395 + v397);
          if (v391 == v398)
            goto LABEL_949;
        }
LABEL_783:
        v401 = **(unsigned __int16 **)(v391 + 16);
        if (v401 == 4825)
        {
          v404 = *(_QWORD *)v391 & 0xFFFFFFFFFFFFFFF8;
          v405 = sub_1C4B138B4(4825);
          if (!v404 || (*(_BYTE *)v404 & 4) == 0)
          {
            while ((*(_WORD *)(v404 + 44) & 4) != 0)
              v404 = *(_QWORD *)v404 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((_QWORD *)v404 != v389)
          {
            v406 = 0;
            v407 = v405;
            while (1)
            {
              v408 = *(_QWORD *)v404 & 0xFFFFFFFFFFFFFFF8;
              if (!v408 || (*(_BYTE *)v408 & 4) == 0)
              {
                while ((*(_WORD *)(v408 + 44) & 4) != 0)
                  v408 = *(_QWORD *)v408 & 0xFFFFFFFFFFFFFFF8;
              }
              v409 = v404 >> 4;
              if ((v702 & 1) != 0)
              {
                v410 = 8;
                v411 = v703;
              }
              else
              {
                v410 = DWORD2(v703[0]);
                if (!DWORD2(v703[0]))
                  goto LABEL_808;
                v411 = *(_OWORD **)&v703[0];
              }
              v412 = v410 - 1;
              v413 = v412 & (v409 ^ (v404 >> 9));
              v414 = *((_QWORD *)v411 + v413);
              if (v404 != v414)
                break;
LABEL_838:
              v404 = v408;
              if ((_QWORD *)v408 == v389)
              {
LABEL_841:
                if (v406)
                {
                  v438 = *(_QWORD *)(v391 + 32) + 32 * sub_1C4B138B4(4825);
                  *(_QWORD *)(v438 + 16) = v406 | *(_DWORD *)(v438 + 16);
                }
                goto LABEL_843;
              }
            }
            v415 = 1;
            while (v414 != -4096)
            {
              v416 = v413 + v415++;
              v413 = v416 & v412;
              v414 = *((_QWORD *)v411 + v413);
              if (v404 == v414)
                goto LABEL_838;
            }
LABEL_808:
            v417 = *(_QWORD *)(v404 + 16);
            if (*(_WORD *)v417 != 4825)
              goto LABEL_841;
            v418 = *(_QWORD *)(v417 + 16);
            v419 = ~(_DWORD)v418 & 0x800200;
            v420 = v418 & 0x800100;
            if (v419)
              v421 = v420 == 8388864;
            else
              v421 = 1;
            if (v421)
              goto LABEL_838;
            v422 = *(_DWORD *)(*(_QWORD *)(v404 + 32) + 32 * v407 + 16);
            v713 = (unsigned __int8 *)v404;
            if ((v702 & 1) != 0)
            {
              v423 = 8;
              v424 = v703;
LABEL_817:
              v425 = v409 ^ (v404 >> 9);
              v426 = v423 - 1;
              v427 = (v423 - 1) & v425;
              v428 = (_QWORD *)v424 + v427;
              v429 = *v428;
              if (v404 != *v428)
              {
                v430 = 0;
                v431 = 1;
                while (v429 != -4096)
                {
                  if (v430)
                    v432 = 0;
                  else
                    v432 = v429 == -8192;
                  if (v432)
                    v430 = v428;
                  v433 = v427 + v431++;
                  v427 = v433 & v426;
                  v428 = (_QWORD *)v424 + v427;
                  v429 = *v428;
                  if (v404 == *v428)
                    goto LABEL_833;
                }
                if (v430)
                  v434 = v430;
                else
                  v434 = v428;
                goto LABEL_830;
              }
            }
            else
            {
              v423 = DWORD2(v703[0]);
              if (DWORD2(v703[0]))
              {
                v424 = *(_OWORD **)&v703[0];
                goto LABEL_817;
              }
              v434 = 0;
LABEL_830:
              v435 = sub_1C486D2E8((uint64_t)&v702, (uint64_t)&v713, &v713, v434);
              *v435 = v713;
              v436 = v713;
              v437 = v706;
              if (v706 >= (unint64_t)HIDWORD(v706))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v706 + 1, 8);
                v437 = v706;
              }
              *((_QWORD *)v705 + v437) = v436;
              LODWORD(v706) = v706 + 1;
            }
LABEL_833:
            v406 |= v422;
            v408 = *(_QWORD *)v404 & 0xFFFFFFFFFFFFFFF8;
            if (!v408 || (*(_BYTE *)v408 & 4) == 0)
            {
              while ((*(_WORD *)(v408 + 44) & 4) != 0)
                v408 = *(_QWORD *)v408 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_838;
          }
LABEL_843:
          v439 = *(_QWORD *)(v391 + 24);
          if (v439 != *v658)
          {
            v440 = *(_DWORD *)(v657 + 264);
            if (!v440)
              goto LABEL_850;
            v441 = *(_QWORD *)(v657 + 248);
            v442 = v440 - 1;
            v443 = (v440 - 1) & ((v439 >> 4) ^ (v439 >> 9));
            v444 = *(_QWORD *)(v441 + 16 * v443);
            if (v439 == v444)
            {
LABEL_849:
              if (!*(_QWORD *)(v441 + 16 * v443 + 8))
                goto LABEL_850;
            }
            else
            {
              v445 = 1;
              while (v444 != -4096)
              {
                v446 = v443 + v445++;
                v443 = v446 & v442;
                v444 = *(_QWORD *)(v441 + 16 * v443);
                if (v439 == v444)
                  goto LABEL_849;
              }
LABEL_850:
              v447 = sub_1C498EC7C((uint64_t)__s1, v439);
              v448 = &__s1[1];
              if (((uint64_t)__s1[0] & 1) != 0)
              {
                v449 = 16;
              }
              else
              {
                v448 = (void **)__s1[1];
                v449 = v737;
              }
              if (&v448[13 * v449] == (void **)v447 || *((_DWORD *)v447 + 7) == *((_DWORD *)v447 + 8))
                goto LABEL_949;
            }
LABEL_855:
            v713 = (unsigned __int8 *)v391;
            if ((v702 & 1) != 0)
            {
              v450 = 8;
              v451 = v703;
            }
            else
            {
              v450 = DWORD2(v703[0]);
              if (!DWORD2(v703[0]))
                goto LABEL_955;
              v451 = *(_OWORD **)&v703[0];
            }
            v479 = v450 - 1;
            v480 = v479 & (v393 ^ (v391 >> 9));
            v481 = (_QWORD *)v451 + v480;
            v482 = *v481;
            if (v391 == *v481)
              goto LABEL_949;
            v483 = 0;
            v484 = 1;
            while (v482 != -4096)
            {
              if (v483)
                v485 = 0;
              else
                v485 = v482 == -8192;
              if (v485)
                v483 = v481;
              v486 = v480 + v484++;
              v480 = v486 & v479;
              v481 = (_QWORD *)v451 + v480;
              v482 = *v481;
              if (v391 == *v481)
                goto LABEL_949;
            }
LABEL_943:
            if (v483)
              v497 = v483;
            else
              v497 = v481;
            goto LABEL_946;
          }
          v467 = 0;
          v468 = *(_QWORD *)(v439 + 48) & 0xFFFFFFFFFFFFFFF8;
          if ((v702 & 1) != 0)
            v469 = v703;
          else
            v469 = *(_OWORD **)&v703[0];
          if ((v702 & 1) != 0)
            v470 = 7;
          else
            v470 = DWORD2(v703[0]) - 1;
          v471 = v391;
          while (1)
          {
LABEL_896:
            if (!v468 || (v472 = *(_QWORD *)(v439 + 48) & 0xFFFFFFFFFFFFFFF8, (*(_BYTE *)v468 & 4) == 0))
            {
              v472 = *(_QWORD *)(v439 + 48) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_WORD *)(v468 + 44) & 4) != 0)
              {
                v472 = *(_QWORD *)(v439 + 48) & 0xFFFFFFFFFFFFFFF8;
                do
                  v472 = *(_QWORD *)v472 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v472 + 44) & 4) != 0);
              }
            }
            if (v471 == v472)
              goto LABEL_855;
            if (!v471 || (*(_BYTE *)v471 & 4) == 0)
            {
              while ((*(_WORD *)(v471 + 44) & 8) != 0)
                v471 = *(_QWORD *)(v471 + 8);
            }
            v471 = *(_QWORD *)(v471 + 8);
            if (v702 & 1 | (DWORD2(v703[0]) != 0))
            {
              v473 = ((v471 >> 4) ^ (v471 >> 9)) & v470;
              v474 = *((_QWORD *)v469 + v473);
              if (v471 == v474)
                continue;
              v475 = 1;
              while (v474 != -4096)
              {
                v476 = v473 + v475++;
                v473 = v476 & v470;
                v474 = *((_QWORD *)v469 + v473);
                if (v471 == v474)
                  goto LABEL_896;
              }
            }
            v477 = *(_WORD **)(v471 + 16);
            if (*v477 != 4826)
            {
              v478 = (unsigned __int16)v477[3];
              if (*(_WORD *)(*((_QWORD *)&v722 + 1) + 24 * v478 + 16))
                v467 += *(__int16 *)(*(_QWORD *)(v674 + 144)
                                   + 4 * *(unsigned __int16 *)(*((_QWORD *)&v722 + 1) + 24 * v478 + 14));
              if (v467 < 0x14)
                continue;
            }
            goto LABEL_949;
          }
        }
        if (v401 != 4826)
          goto LABEL_949;
        v402 = sub_1C4B138B4(4826);
        if (v402 < 0)
          v403 = -1;
        else
          v403 = *(_DWORD *)(*(_QWORD *)(v391 + 32) + 32 * (unsigned __int16)v402 + 16);
        v452 = *(_QWORD *)v391 & 0xFFFFFFFFFFFFFFF8;
        if (!v452 || (*(_BYTE *)v452 & 4) == 0)
        {
          while ((*(_WORD *)(v452 + 44) & 4) != 0)
            v452 = *(_QWORD *)v452 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((_QWORD *)v452 == v389)
          goto LABEL_949;
        v453 = *(_OWORD **)&v703[0];
        v454 = DWORD2(v703[0]) - 1;
        v455 = v392 | (DWORD2(v703[0]) != 0);
        if ((v392 & 1) != 0)
        {
          v453 = v703;
          v454 = 7;
        }
        while (1)
        {
          v456 = v452;
          v452 = *(_QWORD *)v452 & 0xFFFFFFFFFFFFFFF8;
          if (!v452 || (*(_BYTE *)v452 & 4) == 0)
          {
            while ((*(_WORD *)(v452 + 44) & 4) != 0)
              v452 = *(_QWORD *)v452 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((v455 & 1) == 0)
            goto LABEL_878;
          v457 = ((v456 >> 4) ^ (v456 >> 9)) & v454;
          v458 = *((_QWORD *)v453 + v457);
          if (v456 != v458)
            break;
LABEL_887:
          if ((_QWORD *)v452 == v389)
            goto LABEL_949;
        }
        v459 = 1;
        while (v458 != -4096)
        {
          v460 = v457 + v459++;
          v457 = v460 & v454;
          v458 = *((_QWORD *)v453 + v457);
          if (v456 == v458)
            goto LABEL_887;
        }
LABEL_878:
        v461 = *(_QWORD *)(v456 + 16);
        if (*(_WORD *)v461 != 4826)
          goto LABEL_949;
        v462 = *(_QWORD *)(v461 + 16);
        v463 = ~(_DWORD)v462 & 0x800200;
        v464 = v462 & 0x800100;
        if (v463)
          v465 = v464 == 8388864;
        else
          v465 = 1;
        if (v465)
          goto LABEL_887;
        v466 = v402 < 0 ? -1 : *(_DWORD *)(*(_QWORD *)(v456 + 32) + 32 * (unsigned __int16)v402 + 16);
        if (v466 != v403)
          goto LABEL_887;
        v487 = sub_1C4B138B4(4826);
        v488 = *(_QWORD *)(v456 + 32) + 32 * v487;
        *(_QWORD *)(v488 + 16) = (*(_DWORD *)(v488 + 16) | *(_DWORD *)(*(_QWORD *)(v391 + 32)
                                                                                   + 32 * v487
                                                                                   + 16));
        v713 = (unsigned __int8 *)v391;
        if ((v702 & 1) != 0)
        {
          v489 = 8;
          v490 = v703;
LABEL_933:
          v491 = v489 - 1;
          v492 = v491 & (v393 ^ (v391 >> 9));
          v481 = (_QWORD *)v490 + v492;
          v493 = *v481;
          if (v391 == *v481)
            goto LABEL_949;
          v483 = 0;
          v494 = 1;
          while (v493 != -4096)
          {
            if (v483)
              v495 = 0;
            else
              v495 = v493 == -8192;
            if (v495)
              v483 = v481;
            v496 = v492 + v494++;
            v492 = v496 & v491;
            v481 = (_QWORD *)v490 + v492;
            v493 = *v481;
            if (v391 == *v481)
              goto LABEL_949;
          }
          goto LABEL_943;
        }
        v489 = DWORD2(v703[0]);
        if (DWORD2(v703[0]))
        {
          v490 = *(_OWORD **)&v703[0];
          goto LABEL_933;
        }
LABEL_955:
        v497 = 0;
LABEL_946:
        v498 = sub_1C486D2E8((uint64_t)&v702, (uint64_t)&v713, &v713, v497);
        *v498 = v713;
        v499 = v713;
        v500 = v706;
        if (v706 >= (unint64_t)HIDWORD(v706))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v706 + 1, 8);
          v500 = v706;
        }
        *((_QWORD *)v705 + v500) = v499;
        LODWORD(v706) = v706 + 1;
LABEL_949:
        v391 = *(_QWORD *)v391 & 0xFFFFFFFFFFFFFFF8;
        if (!v391 || (*(_BYTE *)v391 & 4) == 0)
        {
          while ((*(_WORD *)(v391 + 44) & 4) != 0)
            v391 = *(_QWORD *)v391 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v388 = (_QWORD *)v673[1];
    }
    while (v388 != v658);
  }
  if (v733 != v735)
    free(v733);
  sub_1C498ED40((uint64_t)v742);
  sub_1C498ED40((uint64_t)__s1);
  v501 = v656;
  if ((_DWORD)v706)
  {
    v502 = (char *)v705;
    v503 = (char *)v705 + 8 * v706;
    do
    {
      v504 = *(_BYTE **)v502;
      v505 = *(_BYTE **)v502;
      if ((**(_BYTE **)v502 & 4) == 0)
      {
        v505 = *(_BYTE **)v502;
        if ((*((_WORD *)v504 + 22) & 8) != 0)
        {
          v505 = *(_BYTE **)v502;
          do
            v505 = (_BYTE *)*((_QWORD *)v505 + 1);
          while ((*((_WORD *)v505 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v504 + 3) + 40, (uint64_t)v504, *((_QWORD *)v505 + 1));
      v502 += 8;
    }
    while (v502 != v503);
  }
  v506 = v669;
  if (BYTE6(v681))
  {
    v507 = v678;
    v508 = *((_QWORD *)&v679 + 1);
    if (*((_QWORD *)&v679 + 1))
    {
      if ((**((_BYTE **)&v679 + 1) & 4) == 0)
      {
        while ((*(_WORD *)(v508 + 44) & 8) != 0)
          v508 = *(_QWORD *)(v508 + 8);
      }
      v509 = (unint64_t **)(v508 + 8);
    }
    else
    {
      v509 = (unint64_t **)(v678 + 56);
    }
    v510 = *v509;
    v511 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v656 + 104))(v656);
    v713 = 0;
    v512 = 396528;
    if (!v656[327])
      v512 = 396480;
    v513 = *(_QWORD *)(v511 + 8) + v512;
    v514 = *(llvm::MachineFunction **)(v507 + 32);
    v720[0] = 0;
    v515 = *((_QWORD *)v514 + 28);
    if (v515)
    {
      *((_QWORD *)v514 + 28) = *(_QWORD *)v515;
      __s1[0] = 0;
    }
    else
    {
      v515 = sub_1C484358C((uint64_t)v514 + 128, 72, 3);
      __s1[0] = v720[0];
      if (v720[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
        v720[0] = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v515, v514, v513, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    v516 = *(_QWORD *)(v507 + 40);
    *(_QWORD *)(v515 + 24) = v516;
    v517 = *(_QWORD *)(v516 + 32);
    v518 = *(unsigned int *)(v515 + 40);
    if ((_DWORD)v518)
    {
      v608 = *(_QWORD *)(v515 + 32);
      v609 = *(_QWORD *)(v517 + 40);
      v610 = 32 * v518;
      do
      {
        if (!*(_BYTE *)v608)
        {
          v611 = *(unsigned int *)(v608 + 4);
          if ((int)v611 >= 0)
            v612 = (uint64_t *)(*(_QWORD *)(v609 + 272) + 8 * v611);
          else
            v612 = (uint64_t *)(*(_QWORD *)(v609 + 24) + 16 * (v611 & 0x7FFFFFFF) + 8);
          v613 = *v612;
          if (*v612)
          {
            v614 = *(_QWORD *)(v613 + 16);
            *(_QWORD *)(v613 + 16) = v608;
            *(_QWORD *)(v608 + 16) = v614;
            if ((*(_BYTE *)(v608 + 3) & 1) != 0)
            {
              *(_QWORD *)(v608 + 24) = v613;
            }
            else
            {
              *(_QWORD *)(v608 + 24) = 0;
              v612 = (uint64_t *)(v614 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v608 + 16) = v608;
            *(_QWORD *)(v608 + 24) = 0;
          }
          *v612 = v608;
        }
        v608 += 32;
        v610 -= 32;
      }
      while (v610);
    }
    v519 = *(_QWORD *)(v517 + 728);
    if (v519)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v519 + 24))(v519, v515);
    v520 = *v510 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v515 = v520 | *(_QWORD *)v515 & 7;
    *(_QWORD *)(v515 + 8) = v510;
    *(_QWORD *)(v520 + 8) = v515;
    *v510 = *v510 & 7 | v515;
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v515, v514, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v515, v514, (const llvm::MachineOperand *)__s1);
    if (v713)
      llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
    v506 = v669;
  }
  if (HIBYTE(v681))
  {
    v521 = *((_QWORD *)&v678 + 1);
    v522 = v680;
    if ((_QWORD)v680)
    {
      if ((*(_BYTE *)v680 & 4) == 0)
      {
        while ((*(_WORD *)(v522 + 44) & 8) != 0)
          v522 = *(_QWORD *)(v522 + 8);
      }
      v523 = (unint64_t **)(v522 + 8);
    }
    else
    {
      v523 = (unint64_t **)(*((_QWORD *)&v678 + 1) + 56);
    }
    v524 = *v523;
    v525 = v682;
    v526 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v656 + 104))(v656);
    v527 = v526;
    v528 = v656[327];
    v713 = 0;
    if (v528)
      v529 = 8263;
    else
      v529 = 8262;
    v530 = *(_QWORD *)(v526 + 8) + 48 * v529;
    v531 = *(llvm::MachineFunction **)(v521 + 32);
    v720[0] = 0;
    v532 = *((_QWORD *)v531 + 28);
    if (v532)
    {
      *((_QWORD *)v531 + 28) = *(_QWORD *)v532;
      __s1[0] = 0;
    }
    else
    {
      v532 = sub_1C484358C((uint64_t)v531 + 128, 72, 3);
      __s1[0] = v720[0];
      if (v720[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
        v720[0] = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v532, v531, v530, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    v533 = *(_QWORD *)(v521 + 40);
    *(_QWORD *)(v532 + 24) = v533;
    v534 = *(_QWORD *)(v533 + 32);
    v535 = *(unsigned int *)(v532 + 40);
    if ((_DWORD)v535)
    {
      v615 = *(_QWORD *)(v532 + 32);
      v616 = *(_QWORD *)(v534 + 40);
      v617 = 32 * v535;
      do
      {
        if (!*(_BYTE *)v615)
        {
          v618 = *(unsigned int *)(v615 + 4);
          if ((int)v618 >= 0)
            v619 = (uint64_t *)(*(_QWORD *)(v616 + 272) + 8 * v618);
          else
            v619 = (uint64_t *)(*(_QWORD *)(v616 + 24) + 16 * (v618 & 0x7FFFFFFF) + 8);
          v620 = *v619;
          if (*v619)
          {
            v621 = *(_QWORD *)(v620 + 16);
            *(_QWORD *)(v620 + 16) = v615;
            *(_QWORD *)(v615 + 16) = v621;
            if ((*(_BYTE *)(v615 + 3) & 1) != 0)
            {
              *(_QWORD *)(v615 + 24) = v620;
            }
            else
            {
              *(_QWORD *)(v615 + 24) = 0;
              v619 = (uint64_t *)(v621 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v615 + 16) = v615;
            *(_QWORD *)(v615 + 24) = 0;
          }
          *v619 = v615;
        }
        v615 += 32;
        v617 -= 32;
      }
      while (v617);
    }
    v536 = *(_QWORD *)(v534 + 728);
    if (v536)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v536 + 24))(v536, v532);
    v537 = *v524 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v532 = v537 | *(_QWORD *)v532 & 7;
    *(_QWORD *)(v532 + 8) = v524;
    *(_QWORD *)(v537 + 8) = v532;
    *v524 = *v524 & 7 | v532;
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v532, v531, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v532, v531, (const llvm::MachineOperand *)__s1);
    if (v713)
      llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
    v501 = v656;
    if (v525)
    {
      v713 = 0;
      v538 = *(_QWORD *)(v527 + 8) + 48 * v529;
      v539 = *(llvm::MachineFunction **)(v521 + 32);
      v720[0] = 0;
      v540 = *((_QWORD *)v539 + 28);
      if (v540)
      {
        *((_QWORD *)v539 + 28) = *(_QWORD *)v540;
        __s1[0] = 0;
      }
      else
      {
        v540 = sub_1C484358C((uint64_t)v539 + 128, 72, 3);
        __s1[0] = v720[0];
        if (v720[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
          v720[0] = 0;
        }
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v540, v539, v538, (unsigned __int8 **)__s1, 0);
      if (__s1[0])
        llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
      if (v720[0])
        llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
      v541 = *(_QWORD *)(v521 + 40);
      *(_QWORD *)(v540 + 24) = v541;
      v542 = *(_QWORD *)(v541 + 32);
      v543 = *(unsigned int *)(v540 + 40);
      if ((_DWORD)v543)
      {
        v636 = *(_QWORD *)(v540 + 32);
        v637 = *(_QWORD *)(v542 + 40);
        v638 = 32 * v543;
        do
        {
          if (!*(_BYTE *)v636)
          {
            v639 = *(unsigned int *)(v636 + 4);
            if ((int)v639 >= 0)
              v640 = (uint64_t *)(*(_QWORD *)(v637 + 272) + 8 * v639);
            else
              v640 = (uint64_t *)(*(_QWORD *)(v637 + 24) + 16 * (v639 & 0x7FFFFFFF) + 8);
            v641 = *v640;
            if (*v640)
            {
              v642 = *(_QWORD *)(v641 + 16);
              *(_QWORD *)(v641 + 16) = v636;
              *(_QWORD *)(v636 + 16) = v642;
              if ((*(_BYTE *)(v636 + 3) & 1) != 0)
              {
                *(_QWORD *)(v636 + 24) = v641;
              }
              else
              {
                *(_QWORD *)(v636 + 24) = 0;
                v640 = (uint64_t *)(v642 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v636 + 16) = v636;
              *(_QWORD *)(v636 + 24) = 0;
            }
            *v640 = v636;
          }
          v636 += 32;
          v638 -= 32;
        }
        while (v638);
      }
      v544 = *(_QWORD *)(v542 + 728);
      if (v544)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v544 + 24))(v544, v540);
      v545 = *v524 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v540 = v545 | *(_QWORD *)v540 & 7;
      *(_QWORD *)(v540 + 8) = v524;
      *(_QWORD *)(v545 + 8) = v540;
      *v524 = *v524 & 7 | v540;
      LODWORD(__s1[0]) = 1;
      __s1[1] = 0;
      v737 = 3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v540, v539, (const llvm::MachineOperand *)__s1);
      LODWORD(__s1[0]) = 1;
      __s1[1] = 0;
      v737 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v540, v539, (const llvm::MachineOperand *)__s1);
      if (v713)
        llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
    }
    v713 = 0;
    v546 = 116592;
    if (!v656[327])
      v546 = 116544;
    v547 = *(_QWORD *)(v527 + 8) + v546;
    v548 = *(llvm::MachineFunction **)(v521 + 32);
    v720[0] = 0;
    v549 = *((_QWORD *)v548 + 28);
    if (v549)
    {
      *((_QWORD *)v548 + 28) = *(_QWORD *)v549;
      __s1[0] = 0;
    }
    else
    {
      v549 = sub_1C484358C((uint64_t)v548 + 128, 72, 3);
      __s1[0] = v720[0];
      if (v720[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
        v720[0] = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v549, v548, v547, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    v550 = *(_QWORD *)(v521 + 40);
    *(_QWORD *)(v549 + 24) = v550;
    v551 = *(_QWORD *)(v550 + 32);
    v552 = *(unsigned int *)(v549 + 40);
    if ((_DWORD)v552)
    {
      v622 = *(_QWORD *)(v549 + 32);
      v623 = *(_QWORD *)(v551 + 40);
      v624 = 32 * v552;
      do
      {
        if (!*(_BYTE *)v622)
        {
          v625 = *(unsigned int *)(v622 + 4);
          if ((int)v625 >= 0)
            v626 = (uint64_t *)(*(_QWORD *)(v623 + 272) + 8 * v625);
          else
            v626 = (uint64_t *)(*(_QWORD *)(v623 + 24) + 16 * (v625 & 0x7FFFFFFF) + 8);
          v627 = *v626;
          if (*v626)
          {
            v628 = *(_QWORD *)(v627 + 16);
            *(_QWORD *)(v627 + 16) = v622;
            *(_QWORD *)(v622 + 16) = v628;
            if ((*(_BYTE *)(v622 + 3) & 1) != 0)
            {
              *(_QWORD *)(v622 + 24) = v627;
            }
            else
            {
              *(_QWORD *)(v622 + 24) = 0;
              v626 = (uint64_t *)(v628 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v622 + 16) = v622;
            *(_QWORD *)(v622 + 24) = 0;
          }
          *v626 = v622;
        }
        v622 += 32;
        v624 -= 32;
      }
      while (v624);
    }
    v553 = *(_QWORD *)(v551 + 728);
    if (v553)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v553 + 24))(v553, v549);
    v554 = *v524 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v549 = v554 | *(_QWORD *)v549 & 7;
    *(_QWORD *)(v549 + 8) = v524;
    *(_QWORD *)(v554 + 8) = v549;
    *v524 = *v524 & 7 | v549;
    if (v713)
      llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
    v713 = 0;
    v555 = *(_QWORD *)(v527 + 8) + 48 * v529;
    v556 = *(llvm::MachineFunction **)(v521 + 32);
    v720[0] = 0;
    v557 = *((_QWORD *)v556 + 28);
    if (v557)
    {
      *((_QWORD *)v556 + 28) = *(_QWORD *)v557;
      __s1[0] = 0;
    }
    else
    {
      v557 = sub_1C484358C((uint64_t)v556 + 128, 72, 3);
      __s1[0] = v720[0];
      if (v720[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
        v720[0] = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v557, v556, v555, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    v558 = *(_QWORD *)(v521 + 40);
    *(_QWORD *)(v557 + 24) = v558;
    v559 = *(_QWORD *)(v558 + 32);
    v560 = *(unsigned int *)(v557 + 40);
    if ((_DWORD)v560)
    {
      v629 = *(_QWORD *)(v557 + 32);
      v630 = *(_QWORD *)(v559 + 40);
      v631 = 32 * v560;
      do
      {
        if (!*(_BYTE *)v629)
        {
          v632 = *(unsigned int *)(v629 + 4);
          if ((int)v632 >= 0)
            v633 = (uint64_t *)(*(_QWORD *)(v630 + 272) + 8 * v632);
          else
            v633 = (uint64_t *)(*(_QWORD *)(v630 + 24) + 16 * (v632 & 0x7FFFFFFF) + 8);
          v634 = *v633;
          if (*v633)
          {
            v635 = *(_QWORD *)(v634 + 16);
            *(_QWORD *)(v634 + 16) = v629;
            *(_QWORD *)(v629 + 16) = v635;
            if ((*(_BYTE *)(v629 + 3) & 1) != 0)
            {
              *(_QWORD *)(v629 + 24) = v634;
            }
            else
            {
              *(_QWORD *)(v629 + 24) = 0;
              v633 = (uint64_t *)(v635 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v629 + 16) = v629;
            *(_QWORD *)(v629 + 24) = 0;
          }
          *v633 = v629;
        }
        v629 += 32;
        v631 -= 32;
      }
      while (v631);
    }
    v561 = *(_QWORD *)(v559 + 728);
    if (v561)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v561 + 24))(v561, v557);
    v562 = *v524 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v557 = v562 | *(_QWORD *)v557 & 7;
    *(_QWORD *)(v557 + 8) = v524;
    *(_QWORD *)(v562 + 8) = v557;
    *v524 = *v524 & 7 | v557;
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v557, v556, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v557, v556, (const llvm::MachineOperand *)__s1);
    if (v713)
      llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
    v506 = v669;
  }
  ((void (*)(unsigned int (***)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t), uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v506)[1])(v506, 1, v672 & ~v653, 1, 0, 1, 1);
  if (v501[295] && (**v506)(v506, 1, 0, 1, 1))
  {
    v563 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v501 + 104))(v501);
    v564 = v563;
    v565 = (_QWORD *)v654[41];
    v566 = (unint64_t *)v565[7];
    v567 = (unsigned __int8 *)v566[7];
    v713 = v567;
    if (v567)
    {
      llvm::MetadataTracking::track((uint64_t)&v713, v567, 2);
      v568 = *(_QWORD *)(v564 + 8) + 231600;
      v569 = (llvm::MachineFunction *)v565[4];
      v720[0] = v713;
      if (v713)
        llvm::MetadataTracking::track((uint64_t)v720, v713, 2);
    }
    else
    {
      v568 = *(_QWORD *)(v563 + 8) + 231600;
      v569 = (llvm::MachineFunction *)v565[4];
      v720[0] = 0;
    }
    v570 = *((_QWORD *)v569 + 28);
    if (v570)
      *((_QWORD *)v569 + 28) = *(_QWORD *)v570;
    else
      v570 = sub_1C484358C((uint64_t)v569 + 128, 72, 3);
    __s1[0] = v720[0];
    if (v720[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
      v720[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v570, v569, v568, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (v720[0])
      llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
    v571 = v565[5];
    *(_QWORD *)(v570 + 24) = v571;
    v572 = *(_QWORD *)(v571 + 32);
    v573 = *(unsigned int *)(v570 + 40);
    if ((_DWORD)v573)
    {
      v643 = *(_QWORD *)(v570 + 32);
      v644 = *(_QWORD *)(v572 + 40);
      v645 = 32 * v573;
      do
      {
        if (!*(_BYTE *)v643)
        {
          v646 = *(unsigned int *)(v643 + 4);
          if ((int)v646 >= 0)
            v647 = (uint64_t *)(*(_QWORD *)(v644 + 272) + 8 * v646);
          else
            v647 = (uint64_t *)(*(_QWORD *)(v644 + 24) + 16 * (v646 & 0x7FFFFFFF) + 8);
          v648 = *v647;
          if (*v647)
          {
            v649 = *(_QWORD *)(v648 + 16);
            *(_QWORD *)(v648 + 16) = v643;
            *(_QWORD *)(v643 + 16) = v649;
            if ((*(_BYTE *)(v643 + 3) & 1) != 0)
            {
              *(_QWORD *)(v643 + 24) = v648;
            }
            else
            {
              *(_QWORD *)(v643 + 24) = 0;
              v647 = (uint64_t *)(v649 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v643 + 16) = v643;
            *(_QWORD *)(v643 + 24) = 0;
          }
          *v647 = v643;
        }
        v643 += 32;
        v645 -= 32;
      }
      while (v645);
    }
    v574 = *(_QWORD *)(v572 + 728);
    if (v574)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v574 + 24))(v574, v570);
    v575 = *v566 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v570 = v575 | *(_QWORD *)v570 & 7;
    *(_QWORD *)(v570 + 8) = v566;
    *(_QWORD *)(v575 + 8) = v570;
    *v566 = *v566 & 7 | v570;
    v576 = (**v669)(v669, 1, 0, 1, 1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v737 = v576;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v570, v569, (const llvm::MachineOperand *)__s1);
    if (v713)
      llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
  }
  if (v501[333])
  {
    v577 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v654[2] + 104))(v654[2]);
    v578 = (_QWORD *)v654[41];
    if (v578 != v658)
    {
      v579 = v577;
      do
      {
        v580 = v578 + 6;
        for (nn = v578[7]; (_QWORD *)nn != v580; nn = *(_QWORD *)(nn + 8))
        {
          v582 = **(unsigned __int16 **)(nn + 16);
          if ((v582 - 4581) < 4 || (v582 - 743) <= 1)
          {
            v583 = nn;
            if ((*(_BYTE *)nn & 4) == 0)
            {
              v583 = nn;
              if ((*(_WORD *)(nn + 44) & 8) != 0)
              {
                v583 = nn;
                do
                  v583 = *(_QWORD *)(v583 + 8);
                while ((*(_WORD *)(v583 + 44) & 8) != 0);
              }
            }
            v584 = *(_QWORD *)(v583 + 8);
            if ((_QWORD *)v584 != v580)
            {
              v585 = **(unsigned __int16 **)(v584 + 16);
              if (v585 == 8277 || v585 == 4826)
              {
                v587 = v656[318];
                v588 = 4675;
                if (v656[327])
                  v588 = 4676;
                v713 = 0;
                v589 = *(_QWORD *)(v579 + 8);
                if (v587)
                  v590 = 4674;
                else
                  v590 = v588;
                v591 = (llvm::MachineFunction *)v578[4];
                v720[0] = 0;
                v592 = *((_QWORD *)v591 + 28);
                if (v592)
                {
                  *((_QWORD *)v591 + 28) = *(_QWORD *)v592;
                  __s1[0] = 0;
                }
                else
                {
                  v592 = sub_1C484358C((uint64_t)v591 + 128, 72, 3);
                  __s1[0] = v720[0];
                  if (v720[0])
                  {
                    llvm::MetadataTracking::retrack((uint64_t)v720, (unsigned __int8 *)v720[0], (uint64_t)__s1);
                    v720[0] = 0;
                  }
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v592, v591, v589 + 48 * v590, (unsigned __int8 **)__s1, 0);
                if (__s1[0])
                  llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
                if (v720[0])
                  llvm::MetadataTracking::untrack((uint64_t)v720, (unsigned __int8 *)v720[0]);
                v593 = v578[5];
                *(_QWORD *)(v592 + 24) = v593;
                v594 = *(_QWORD *)(v593 + 32);
                v595 = *(unsigned int *)(v592 + 40);
                if ((_DWORD)v595)
                {
                  v598 = *(_QWORD *)(v592 + 32);
                  v599 = *(_QWORD *)(v594 + 40);
                  v600 = 32 * v595;
                  do
                  {
                    if (!*(_BYTE *)v598)
                    {
                      v601 = *(unsigned int *)(v598 + 4);
                      if ((int)v601 >= 0)
                        v602 = (uint64_t *)(*(_QWORD *)(v599 + 272) + 8 * v601);
                      else
                        v602 = (uint64_t *)(*(_QWORD *)(v599 + 24) + 16 * (v601 & 0x7FFFFFFF) + 8);
                      v603 = *v602;
                      if (*v602)
                      {
                        v604 = *(_QWORD *)(v603 + 16);
                        *(_QWORD *)(v603 + 16) = v598;
                        *(_QWORD *)(v598 + 16) = v604;
                        if ((*(_BYTE *)(v598 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v598 + 24) = v603;
                        }
                        else
                        {
                          *(_QWORD *)(v598 + 24) = 0;
                          v602 = (uint64_t *)(v604 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v598 + 16) = v598;
                        *(_QWORD *)(v598 + 24) = 0;
                      }
                      *v602 = v598;
                    }
                    v598 += 32;
                    v600 -= 32;
                  }
                  while (v600);
                }
                v596 = *(_QWORD *)(v594 + 728);
                if (v596)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v596 + 24))(v596, v592);
                v597 = *(_QWORD *)v584 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v592 = v597 | *(_QWORD *)v592 & 7;
                *(_QWORD *)(v592 + 8) = v584;
                *(_QWORD *)(v597 + 8) = v592;
                *(_QWORD *)v584 = *(_QWORD *)v584 & 7 | v592;
                if (v713)
                  llvm::MetadataTracking::untrack((uint64_t)&v713, v713);
              }
            }
          }
          if ((*(_BYTE *)nn & 4) == 0)
          {
            while ((*(_WORD *)(nn + 44) & 8) != 0)
              nn = *(_QWORD *)(nn + 8);
          }
        }
        v578 = (_QWORD *)v578[1];
      }
      while (v578 != v658);
    }
  }
  if (v705 != v707)
    free(v705);
  if ((v702 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v703[0], 8);
  sub_1C498ED40((uint64_t)v712);
  sub_1C498ED40((uint64_t)&__s2);
  v605 = 110;
  do
  {
    v606 = *(void **)&v676[v605 * 8 - 80];
    if (&(&v669)[v605] != v606)
      free(v606);
    v605 -= 10;
  }
  while (v605 * 8);
  return 0;
}

uint64_t sub_1C498C4E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  sub_1C495C918(a1);
  result = MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    *(_QWORD *)a1 = operator new(v5 << 6, (std::align_val_t)8uLL);
    return sub_1C498C548(a1, (uint64_t *)a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_1C498C548(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(result + 8) = a2[1];
  if (*(_DWORD *)(result + 16))
  {
    v3 = result;
    v4 = 0;
    v5 = 48;
    do
    {
      *(_QWORD *)(*(_QWORD *)v3 + v5 - 48) = *(_QWORD *)(*a2 + v5 - 48);
      v6 = *(_QWORD *)v3;
      v7 = *(_QWORD *)(*(_QWORD *)v3 + v5 - 48);
      if (v7 != -4096 && v7 != -8192)
      {
        v8 = v6 + v5;
        *(_QWORD *)(v6 + v5 - 40) = v6 + v5 - 24;
        result = v6 + v5 - 40;
        v9 = *a2;
        v10 = *a2 + v5;
        *(_QWORD *)(v6 + v5 - 32) = 0x100000000;
        if (*(_DWORD *)(v10 - 32))
          result = sub_1C498C654(result, v10 - 40);
        *(_QWORD *)(v8 - 16) = v8;
        *(_QWORD *)(v8 - 8) = 0x200000000;
        if (*(_DWORD *)(v10 - 8))
          result = sub_1C498C654(v8 - 16, v9 + v5 - 16);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < *(unsigned int *)(v3 + 16));
  }
  return result;
}

uint64_t sub_1C498C654(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 6 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 6);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 6 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 6 * v5), (const void *)(*(_QWORD *)a2 + 6 * v5), *(_QWORD *)a2 + 6 * v6 - (*(_QWORD *)a2 + 6 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C498C744(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  llvm::DataLayout *v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  _BYTE *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  _BYTE *v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  unsigned int v82;
  int v83;

  result = 0;
  switch(a3)
  {
    case ' ':
    case '!':
    case '%':
      **(_BYTE **)(a1 + 32) |= sub_1C498CF48(*(uint64_t **)(a1 + 40), ++**(_BYTE **)(a1 + 8), **(_QWORD **)(a1 + 48), (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8))
        return 1;
      v6 = ***(_QWORD ***)(a1 + 80);
      v7 = *(unsigned __int8 *)(v6 + 8);
      if (v7 > 0x11)
        goto LABEL_64;
      if (((1 << v7) & 0xAC7F) != 0)
        goto LABEL_6;
      if (((1 << v7) & 0x30000) != 0)
        goto LABEL_62;
LABEL_64:
      if ((v7 & 0xFE) != 0x12 && v7 != 21)
        return 0;
LABEL_62:
      result = llvm::Type::isSizedDerivedType(***(_QWORD ***)(a1 + 80), 0);
      if ((_DWORD)result)
      {
        v6 = ***(_QWORD ***)(a1 + 80);
LABEL_6:
        v8 = *(llvm::DataLayout **)a1;
        goto LABEL_7;
      }
      return result;
    case '"':
      v30 = sub_1C5EA708C(a2, *(llvm::DataLayout **)a1);
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8))
        return 0;
      LODWORD(v31) = v30;
      goto LABEL_22;
    case '#':
    case '$':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '9':
    case ':':
    case ';':
    case '<':
      goto LABEL_13;
    case '&':
    case '\'':
    case '(':
    case '/':
    case '0':
    case '1':
    case '2':
      return result;
    case '8':
      if (*(_BYTE *)(a2 + 16) != 84
        || (v38 = *(_QWORD *)(a2 - 32)) == 0
        || *(_BYTE *)(v38 + 16)
        || *(_QWORD *)(v38 + 24) != *(_QWORD *)(a2 + 72)
        || (*(_BYTE *)(v38 + 33) & 0x20) == 0)
      {
        v16 = *(_QWORD *)(a1 + 88);
        v39 = *(_QWORD *)(a1 + 56);
        v40 = *(unsigned int *)(v39 + 16);
        if ((_DWORD)v40)
        {
          v41 = *(_BYTE **)(v39 + 8);
          v42 = *(_DWORD **)v16;
          v43 = *(_DWORD **)(v16 + 8);
          v44 = 6 * v40;
          do
          {
            *v42 |= 1 << (*v41 & 0xF);
            v45 = *v41;
            v41 += 6;
            *v43 |= 1 << (v45 >> 4);
            v44 -= 6;
          }
          while (v44);
        }
        v46 = *(unsigned int *)(v39 + 40);
        if ((_DWORD)v46)
        {
          v47 = *(_BYTE **)(v39 + 32);
          v48 = *(_DWORD **)v16;
          v49 = *(_DWORD **)(v16 + 8);
          v50 = 6 * v46;
          do
          {
            *v48 |= 1 << (*v47 & 0xF);
            v51 = *v47;
            v47 += 6;
            *v49 |= 1 << (v51 >> 4);
            v50 -= 6;
          }
          while (v50);
        }
LABEL_47:
        result = 1;
        **(_BYTE **)(v16 + 16) = 1;
        return result;
      }
      v69 = *(_DWORD *)(v38 + 36);
      if ((v69 - 1282) < 0x190 || (v69 - 2824) < 0xC || (v69 - 1682) <= 0x8B)
      {
        **(_BYTE **)(a1 + 32) |= sub_1C498CF48(*(uint64_t **)(a1 + 40), ++**(_BYTE **)(a1 + 8), **(_QWORD **)(a1 + 48), (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
        return 1;
      }
      if (v69 > 2629)
      {
        if ((v69 - 2630) > 0x1F)
        {
LABEL_79:
          v16 = *(_QWORD *)(a1 + 88);
          v70 = *(_QWORD *)(a1 + 56);
          v71 = *(unsigned int *)(v70 + 16);
          if ((_DWORD)v71)
          {
            v72 = *(_BYTE **)(v70 + 8);
            v73 = *(_DWORD **)v16;
            v74 = *(_DWORD **)(v16 + 8);
            v75 = 6 * v71;
            do
            {
              *v73 |= 1 << (*v72 & 0xF);
              v76 = *v72;
              v72 += 6;
              *v74 |= 1 << (v76 >> 4);
              v75 -= 6;
            }
            while (v75);
          }
          v77 = *(unsigned int *)(v70 + 40);
          if ((_DWORD)v77)
          {
            v78 = *(_BYTE **)(v70 + 32);
            v79 = *(_DWORD **)v16;
            v80 = *(_DWORD **)(v16 + 8);
            v81 = 6 * v77;
            do
            {
              *v79 |= 1 << (*v78 & 0xF);
              v82 = *v78;
              v78 += 6;
              *v80 |= 1 << (v82 >> 4);
              v81 -= 6;
            }
            while (v81);
          }
          goto LABEL_47;
        }
      }
      else if ((v69 - 2376) >= 0x20 && v69 != 2142 && v69 != 2144)
      {
        goto LABEL_79;
      }
      **(_BYTE **)(a1 + 32) |= sub_1C498CF48(*(uint64_t **)(a1 + 40), ++**(_BYTE **)(a1 + 8), **(_QWORD **)(a1 + 48), (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8))
        return 1;
      v8 = *(llvm::DataLayout **)a1;
      v6 = ***(_QWORD ***)(a1 + 80);
LABEL_7:
      sub_1C4768AD0((uint64_t)v8, v6);
      v11 = v10 + 7;
      if ((_DWORD)v9 == 1)
      result = 0;
      v12 = *(_DWORD **)(a1 + 64);
      **(_DWORD **)(a1 + 72) = v11 >> 3;
      v13 = *(_DWORD **)(a1 + 24);
      *v12 = *v13;
      *v13 = 0;
      return result;
    case '=':
      if (*(_BYTE *)(*(_QWORD *)(a2 - 32) + 16) == 16)
      {
        sub_1C4768AD0(*(_QWORD *)a1, *(_QWORD *)(**(_QWORD **)(a2 - 64) + 24));
        v34 = (unint64_t)(v32 + 7) >> 3;
        if ((_DWORD)v33 == 1)
        {
          v83 = (unint64_t)(v32 + 7) >> 3;
          LODWORD(v34) = v83;
        }
        v35 = *(_QWORD *)(a2 - 32);
        v36 = (_QWORD *)(v35 + 24);
        if (*(_DWORD *)(v35 + 32) >= 0x41u)
          v36 = (_QWORD *)*v36;
        result = 0;
        v37 = *(_DWORD **)(a1 + 72);
        **(_DWORD **)(a1 + 64) += *(_DWORD *)v36 * v34;
        *v37 = v34;
        return result;
      }
      v16 = *(_QWORD *)(a1 + 88);
      v52 = *(_QWORD *)(a1 + 56);
      v53 = *(unsigned int *)(v52 + 16);
      if ((_DWORD)v53)
      {
        v54 = *(_BYTE **)(v52 + 8);
        v55 = *(_DWORD **)v16;
        v56 = *(_DWORD **)(v16 + 8);
        v57 = 6 * v53;
        do
        {
          *v55 |= 1 << (*v54 & 0xF);
          v58 = *v54;
          v54 += 6;
          *v56 |= 1 << (v58 >> 4);
          v57 -= 6;
        }
        while (v57);
      }
      v59 = *(unsigned int *)(v52 + 40);
      if ((_DWORD)v59)
      {
        v60 = *(_BYTE **)(v52 + 32);
        v61 = *(_DWORD **)v16;
        v62 = *(_DWORD **)(v16 + 8);
        v63 = 6 * v59;
        do
        {
          *v61 |= 1 << (*v60 & 0xF);
          v64 = *v60;
          v60 += 6;
          *v62 |= 1 << (v64 >> 4);
          v63 -= 6;
        }
        while (v63);
      }
      goto LABEL_47;
    default:
      if (a3 != 13)
      {
LABEL_13:
        v16 = *(_QWORD *)(a1 + 88);
        v17 = *(_QWORD *)(a1 + 56);
        v18 = *(unsigned int *)(v17 + 16);
        if ((_DWORD)v18)
        {
          v19 = *(_BYTE **)(v17 + 8);
          v20 = *(_DWORD **)v16;
          v21 = *(_DWORD **)(v16 + 8);
          v22 = 6 * v18;
          do
          {
            *v20 |= 1 << (*v19 & 0xF);
            v23 = *v19;
            v19 += 6;
            *v21 |= 1 << (v23 >> 4);
            v22 -= 6;
          }
          while (v22);
        }
        v24 = *(unsigned int *)(v17 + 40);
        if ((_DWORD)v24)
        {
          v25 = *(_BYTE **)(v17 + 32);
          v26 = *(_DWORD **)v16;
          v27 = *(_DWORD **)(v16 + 8);
          v28 = 6 * v24;
          do
          {
            *v26 |= 1 << (*v25 & 0xF);
            v29 = *v25;
            v25 += 6;
            *v27 |= 1 << (v29 >> 4);
            v28 -= 6;
          }
          while (v28);
        }
        goto LABEL_47;
      }
      v14 = *(_DWORD *)(a2 + 20);
      if ((v14 & 0x40000000) != 0)
        v15 = *(uint64_t **)(a2 - 8);
      else
        v15 = (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8))
        return 0;
      v65 = *v15;
      v66 = v15[4];
      if (v66 == **(_QWORD **)(a1 + 48))
        v66 = v65;
      if (*(_BYTE *)(v66 + 16) != 16 || v66 == 0)
      {
        if (MEMORY[0x20] > 0x40u)
          v31 = *MEMORY[0x18];
        else
          v31 = (uint64_t)(MEMORY[0x18] << -(uint64_t)MEMORY[0x20]) >> -(uint64_t)MEMORY[0x20];
LABEL_22:
        result = 0;
        **(_DWORD **)(a1 + 24) += v31;
      }
      else
      {
        result = 0;
        **(_DWORD **)(a1 + 24) = 0;
        **(_DWORD **)(a1 + 72) = -1;
      }
      return result;
  }
}

char *sub_1C498CE48(char *result, unint64_t a2, __int128 *a3)
{
  _OWORD **v4;
  _DWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;

  v4 = (_OWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v5 = result + 8;
    v8 = *((unsigned int *)result + 2);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *((unsigned int *)result + 2);
    if (v9)
    {
      v10 = *(_OWORD **)result;
      do
      {
        *(_QWORD *)v10 = *(_QWORD *)a3;
        *((_QWORD *)v10 + 1) = *((_QWORD *)a3 + 1);
        *((_DWORD *)v10 + 4) = *((_DWORD *)a3 + 4);
        *((_DWORD *)v10 + 5) = *((_DWORD *)a3 + 5);
        *((_BYTE *)v10 + 24) = *((_BYTE *)a3 + 24);
        *((_DWORD *)v10 + 7) = *((_DWORD *)a3 + 7);
        v10 += 2;
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v11 = v8 - a2;
    if (v8 < a2)
    {
      v12 = (_OWORD *)(*(_QWORD *)result + 32 * v8);
      do
      {
        v13 = a3[1];
        *v12 = *a3;
        v12[1] = v13;
        v12 += 2;
      }
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    v15 = *a3;
    v16 = a3[1];
    *((_DWORD *)result + 2) = 0;
    v5 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 32);
    v6 = *v4;
    v7 = a2;
    do
    {
      *v6 = v15;
      v6[1] = v16;
      v6 += 2;
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

uint64_t sub_1C498CF48(uint64_t *a1, int a2, uint64_t a3, unsigned __int8 **a4, signed int a5, int a6)
{
  uint64_t v12;
  char v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  uint64_t v28;
  signed int v29;
  BOOL v30;
  BOOL v31;
  __int16 v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  void **v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;

  v12 = *a1;
  v63 = 0;
  v13 = sub_1C498D438(*(_QWORD *)v12, *(_DWORD *)(v12 + 16), a3, &v63);
  v14 = v63;
  if ((v13 & 1) != 0)
    goto LABEL_7;
  v64 = v63;
  v15 = *(_DWORD *)(v12 + 8);
  v16 = *(unsigned int *)(v12 + 16);
  if (4 * v15 + 4 >= (3 * v16))
  {
    v17 = 2 * v16;
LABEL_47:
    v40 = *(_QWORD *)v12;
    v41 = (v17 - 1) | ((unint64_t)(v17 - 1) >> 1);
    v42 = v41 | (v41 >> 2) | ((v41 | (v41 >> 2)) >> 4);
    v43 = ((v42 | (v42 >> 8)) >> 16) | v42 | (v42 >> 8);
    if ((v43 + 1) > 0x40)
      v44 = v43 + 1;
    else
      v44 = 64;
    *(_DWORD *)(v12 + 16) = v44;
    v45 = operator new(40 * v44, (std::align_val_t)8uLL);
    *(_QWORD *)v12 = v45;
    v61 = v40;
    if (v40)
    {
      *(_QWORD *)(v12 + 8) = 0;
      v46 = *(unsigned int *)(v12 + 16);
      if ((_DWORD)v46)
      {
        v47 = 40 * v46;
        do
        {
          *v45 = -4096;
          v45 += 5;
          v47 -= 40;
        }
        while (v47);
      }
      if ((_DWORD)v16)
      {
        v48 = 40 * v16;
        v49 = (uint64_t *)v40;
        while (1)
        {
          v50 = *v49;
          if ((*v49 | 0x1000) != 0xFFFFFFFFFFFFF000)
            break;
LABEL_70:
          v49 += 5;
          v48 -= 40;
          if (!v48)
            goto LABEL_71;
        }
        v62 = v48;
        v65 = 0;
        sub_1C498D438(*(_QWORD *)v12, *(_DWORD *)(v12 + 16), v50, &v65);
        v51 = v65;
        *v65 = v50;
        v52 = v51 + 4;
        v51[1] = (uint64_t)(v51 + 4);
        v53 = (void **)(v51 + 1);
        *((_OWORD *)v51 + 1) = xmmword_1C6612B90;
        v54 = (uint64_t *)v49[1];
        if (v49 == v51)
          goto LABEL_67;
        v55 = v49[2];
        if (!v55)
          goto LABEL_67;
        if (v49 + 4 != v54)
        {
          v51[1] = (uint64_t)v54;
          v51[2] = v55;
          v51[3] = v49[3];
          v49[1] = (uint64_t)(v49 + 4);
          v49[2] = 0;
          v49[3] = 0;
          ++*(_DWORD *)(v12 + 8);
LABEL_69:
          v48 = v62;
          goto LABEL_70;
        }
        v60 = v51;
        v59 = v49[2];
        if (v55 < 3)
        {
          v56 = v49[2];
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v51 + 1), v51 + 4, v55, 2);
          v54 = (uint64_t *)v49[1];
          v56 = v49[2];
          if (!v56)
          {
LABEL_66:
            v60[2] = v59;
            v49[2] = 0;
LABEL_67:
            ++*(_DWORD *)(v12 + 8);
            if (v49 + 4 != v54)
              free(v54);
            goto LABEL_69;
          }
          v52 = *v53;
        }
        memcpy(v52, v54, 2 * v56);
        v54 = (uint64_t *)v49[1];
        goto LABEL_66;
      }
LABEL_71:
      MEMORY[0x1CAA32FB4](v61, 8);
      v45 = *(_QWORD **)v12;
      LODWORD(v57) = *(_DWORD *)(v12 + 16);
    }
    else
    {
      *(_QWORD *)(v12 + 8) = 0;
      v57 = *(unsigned int *)(v12 + 16);
      if ((_DWORD)v57)
      {
        v58 = 0;
        do
        {
          v45[v58] = -4096;
          v58 += 5;
        }
        while (5 * v57 != v58);
      }
    }
    sub_1C498D438((uint64_t)v45, v57, a3, &v64);
    v15 = *(_DWORD *)(v12 + 8);
    v14 = v64;
    goto LABEL_4;
  }
  v17 = *(_DWORD *)(v12 + 16);
  if ((int)v16 + ~v15 - *(_DWORD *)(v12 + 12) <= v16 >> 3)
    goto LABEL_47;
LABEL_4:
  *(_DWORD *)(v12 + 8) = v15 + 1;
  if (*v14 != -4096)
    --*(_DWORD *)(v12 + 12);
  *v14 = a3;
  v14[1] = (uint64_t)(v14 + 4);
  *((_OWORD *)v14 + 1) = xmmword_1C6612B90;
LABEL_7:
  v18 = *(_DWORD *)a1[1];
  if (v18 == 3 && a2 == 2)
  {
    v20 = *((unsigned int *)a4 + 2);
    if ((_DWORD)v20)
    {
      v21 = *a4;
      v22 = v14[2];
      v23 = 6 * v20;
      do
      {
        v24 = *v21;
        if (v22 + 1 > (unint64_t)v14[3])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v14 + 1), v14 + 4, v22 + 1, 2);
          v22 = v14[2];
        }
        *(_WORD *)(v14[1] + 2 * v22) = (v24 | (16 * v24)) & 0xFF0F;
        v22 = v14[2] + 1;
        v14[2] = v22;
        v21 += 6;
        v23 -= 6;
      }
      while (v23);
      return 1;
    }
  }
  if (v18 != a2)
    return 0;
  v25 = *((unsigned int *)a4 + 8);
  if (!(_DWORD)v25)
  {
    result = 0;
LABEL_39:
    v35 = *((unsigned int *)a4 + 2);
    if (!(_DWORD)v35)
      return result;
    v36 = *a4;
    v37 = v14[2];
    v38 = 6 * v35;
    do
    {
      v39 = *v36;
      if (v37 + 1 > (unint64_t)v14[3])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v14 + 1), v14 + 4, v37 + 1, 2);
        v37 = v14[2];
      }
      *(_WORD *)(v14[1] + 2 * v37) = (v39 | (16 * v39)) & 0xFF0F;
      v37 = v14[2] + 1;
      v14[2] = v37;
      v36 += 6;
      v38 -= 6;
    }
    while (v38);
    return 1;
  }
  v26 = 0;
  v27 = a4[3];
  v28 = 6 * v25;
  do
  {
    v29 = *((unsigned __int16 *)v27 + 1);
    v30 = a6 + a5 <= v29 || v29 < a5;
    if (!v30 || (v29 <= a5 ? (v31 = *((unsigned __int16 *)v27 + 2) + v29 <= a5) : (v31 = 1), !v31))
    {
      v32 = *v27;
      v33 = v14[2];
      if (v33 + 1 > (unint64_t)v14[3])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v14 + 1), v14 + 4, v33 + 1, 2);
        v33 = v14[2];
      }
      *(_WORD *)(v14[1] + 2 * v33) = (v32 | (16 * v32)) & 0xFF0F;
      ++v14[2];
      v26 = 1;
      *(_DWORD *)a1[2] |= 1 << (*v27 & 0xF);
      *(_DWORD *)a1[3] |= 1 << (*v27 >> 4);
    }
    v27 += 6;
    v28 -= 6;
  }
  while (v28);
  result = v26 & 1;
  if (!*((_DWORD *)a4 + 8))
    goto LABEL_39;
  return result;
}

uint64_t sub_1C498D438(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void ***sub_1C498D4D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v2 = a2;
  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = *((_QWORD *)v4 + 2);
  v6 = v5 & 0x800100;
  v7 = v5 & 0x800200;
  v8 = *(_QWORD *)(a2 + 48);
  if (v8 < 8)
    goto LABEL_18;
  if ((v8 & 7) != 0)
  {
    v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    v10 = (*(_QWORD *)(a2 + 48) & 7) != 3 || v9 == 0;
    if (v10 || !*v9)
      goto LABEL_18;
  }
  else
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v8;
  }
  if ((v8 & 7) != 0)
  {
    v11 = *(uint64_t **)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (!v11)
      goto LABEL_18;
  }
  else
  {
    v11 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a2 + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0)
      goto LABEL_18;
  }
  v12 = 0;
  v13 = *v11;
  if ((v13 & 4) == 0)
    goto LABEL_19;
  v14 = (_DWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_19;
  if (v14[2] == 7)
  {
    v12 = (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 48))(v14) == 0;
    v4 = *(unsigned __int16 **)(v2 + 16);
    goto LABEL_19;
  }
LABEL_18:
  v12 = 0;
LABEL_19:
  v15 = v6 == 8388864 || v7 == 8389120;
  if (v15 || v12 || (v16 = *v4, (v16 - 4821) <= 3))
  {
    v18 = 0x2C00000000000005;
    goto LABEL_31;
  }
  if ((v16 - 743) >= 0xE && (v16 - 4581) > 0xB)
  {
    if ((v4[8] & 2) != 0 || (v16 - 2970) < 0x48 || (v16 - 2862) <= 0x6B)
    {
      v18 = 0x2C00000000000801;
      goto LABEL_31;
    }
    v20 = *(_QWORD *)(v2 + 48);
    if (v20 < 8)
      goto LABEL_41;
    if ((v20 & 7) != 0)
    {
      if ((*(_QWORD *)(v2 + 48) & 7) != 3
        || (v20 & 0xFFFFFFFFFFFFFFF8) == 0
        || !*(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_41:
        v21 = *(_WORD *)(v2 + 44);
        v22 = *((_QWORD *)v4 + 1);
        if ((v21 & 0xC) == 0 || (v21 & 4) != 0)
        {
          v24 = (v22 >> 7) & 1;
        }
        else if ((v22 & 0x80) != 0)
        {
          LOBYTE(v24) = 1;
        }
        else
        {
          do
          {
            v23 = *(unsigned __int16 *)(v2 + 44);
            LODWORD(v24) = (v23 >> 3) & 1;
            if ((v23 & 8) == 0)
              break;
            v2 = *(_QWORD *)(v2 + 8);
          }
          while ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 8) & 0x80) == 0);
        }
        if ((v24 & (byte_1ED7EC430 != 0)) != 0)
          v25 = 0x2C0000000000080FLL;
        else
          v25 = 0x2C00000000000001;
        goto LABEL_52;
      }
    }
    else
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v2 + 48) = v20;
      if (!v20)
        goto LABEL_65;
    }
    if ((v20 & 7) != 0)
    {
      if ((v20 & 7) != 3 || (v20 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) != 1)
        goto LABEL_65;
    }
    else
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v2 + 48) = v20;
    }
    v26 = v20 & 0xFFFFFFFFFFFFFFF8;
    if ((v20 & 7) != 0)
      v26 = *(_QWORD *)(v26 + 8);
    else
      *(_QWORD *)(v2 + 48) = v26;
    if (v26 && !*(_DWORD *)(v26 + 16))
    {
      v25 = 0x2C00000000000001;
LABEL_52:
      *a1 = v25;
      v27 = 1;
      return sub_1C4914448((void ***)&v27);
    }
LABEL_65:
    v18 = 0x2C00000000000009;
    goto LABEL_31;
  }
  v18 = 0x2C00000000000003;
LABEL_31:
  v27 = v18;
  *a1 = v18;
  return sub_1C4914448((void ***)&v27);
}

int *sub_1C498D77C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 8 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 8 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 8 * v4);
    }
  }
  return (int *)(v2 + 8 * v3);
}

uint64_t sub_1C498D7F0(uint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = *a3;
  v8 = *(_QWORD **)(a2 + 24);
  if (v7)
  {
    if (!v8)
    {
      v9 = 0;
      v8 = (_QWORD *)v7;
      goto LABEL_10;
    }
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(result, v7, (uint64_t)v8);
    v8 = (_QWORD *)result;
  }
  *a3 = (uint64_t)v8;
  v9 = *(_QWORD **)(a2 + 24);
  if (!v8)
  {
    v10 = v9[4] + 320;
    v8 = (_QWORD *)v10;
    do
    {
      v8 = (_QWORD *)*v8;
      if (v8 == (_QWORD *)v10)
        llvm::report_fatal_error((llvm *)"Shader has no exit block", (const char *)1);
    }
    while (((v8[12] - v8[11]) & 0x7FFFFFFF8) != 0);
    *a3 = (uint64_t)v8;
    v9 = *(_QWORD **)(a2 + 24);
  }
LABEL_10:
  if (v9 == v8 || v7 == 0)
    v12 = a2;
  else
    v12 = 0;
  *a4 = v12;
  return result;
}

uint64_t sub_1C498D8A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t i;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;

  v3 = result;
  v4 = *(_QWORD **)(a2 + 328);
  v79 = (_QWORD *)(a2 + 320);
  if (v4 != (_QWORD *)(a2 + 320))
  {
    v6 = (_BYTE *)(result + 1672);
    v78 = result + 1680;
    do
    {
      v80 = v4;
      v7 = v4 >> 4;
      if ((*v6 & 1) != 0)
      {
        v8 = 16;
        v9 = v78;
      }
      else
      {
        v8 = *(_DWORD *)(v3 + 1688);
        if (!v8)
        {
          v18 = 0;
          goto LABEL_20;
        }
        v9 = *(_QWORD *)(v3 + 1680);
      }
      v10 = v8 - 1;
      v11 = v10 & (v7 ^ (v4 >> 9));
      v12 = (_QWORD *)(v9 + 104 * v11);
      v13 = (_QWORD *)*v12;
      if (v4 == (_QWORD *)*v12)
        goto LABEL_21;
      v14 = 0;
      v15 = 1;
      while (v13 != (_QWORD *)-4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v13 == (_QWORD *)-8192;
        if (v16)
          v14 = v12;
        v17 = v11 + v15++;
        v11 = v17 & v10;
        v12 = (_QWORD *)(v9 + 104 * v11);
        v13 = (_QWORD *)*v12;
        if (v4 == (_QWORD *)*v12)
          goto LABEL_21;
      }
      if (v14)
        v18 = v14;
      else
        v18 = v12;
LABEL_20:
      result = (uint64_t)sub_1C498DF5C(v3 + 1672, (uint64_t)&v80, &v80, v18);
      *(_QWORD *)result = v80;
      *(_QWORD *)(result + 8) = result + 40;
      *(_QWORD *)(result + 16) = result + 40;
      *(_QWORD *)(result + 24) = 8;
      *(_DWORD *)(result + 32) = 0;
LABEL_21:
      v80 = v4;
      if ((*(_BYTE *)v3 & 1) != 0)
      {
        v19 = 16;
        v20 = v3 + 8;
      }
      else
      {
        v19 = *(_DWORD *)(v3 + 16);
        if (!v19)
        {
          v29 = 0;
LABEL_38:
          result = (uint64_t)sub_1C498DF5C(v3, (uint64_t)&v80, &v80, v29);
          *(_QWORD *)result = v80;
          *(_QWORD *)(result + 8) = result + 40;
          *(_QWORD *)(result + 16) = result + 40;
          *(_QWORD *)(result + 24) = 8;
          *(_DWORD *)(result + 32) = 0;
          goto LABEL_39;
        }
        v20 = *(_QWORD *)(v3 + 8);
      }
      v21 = v19 - 1;
      v22 = v21 & (v7 ^ (v4 >> 9));
      v23 = (_QWORD *)(v20 + 104 * v22);
      v24 = (_QWORD *)*v23;
      if (v4 != (_QWORD *)*v23)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != (_QWORD *)-4096)
        {
          if (v25)
            v27 = 0;
          else
            v27 = v24 == (_QWORD *)-8192;
          if (v27)
            v25 = v23;
          v28 = v22 + v26++;
          v22 = v28 & v21;
          v23 = (_QWORD *)(v20 + 104 * v22);
          v24 = (_QWORD *)*v23;
          if (v4 == (_QWORD *)*v23)
            goto LABEL_39;
        }
        if (v25)
          v29 = v25;
        else
          v29 = v23;
        goto LABEL_38;
      }
LABEL_39:
      if (((v4[12] - v4[11]) & 0x7FFFFFFF0) != 0)
      {
        result = sub_1C498DE30(a3, (uint64_t)v4);
        v30 = (uint64_t *)v4[11];
        v31 = (uint64_t *)v4[12];
        if (v30 != v31)
        {
          v32 = **(_QWORD **)(result + 8);
          do
          {
            v80 = 0;
            for (i = *v30; ; i = *v45)
            {
              v80 = (_QWORD *)i;
              if (v32 == i)
                break;
              if ((*(_BYTE *)v3 & 1) != 0)
              {
                v34 = 16;
                v35 = v3 + 8;
              }
              else
              {
                v34 = *(_DWORD *)(v3 + 16);
                if (!v34)
                {
                  v44 = 0;
LABEL_61:
                  v38 = sub_1C498DF5C(v3, (uint64_t)&v80, &v80, v44);
                  *v38 = v80;
                  v38[1] = v38 + 5;
                  v38[2] = v38 + 5;
                  v38[3] = 8;
                  *((_DWORD *)v38 + 8) = 0;
                  goto LABEL_62;
                }
                v35 = *(_QWORD *)(v3 + 8);
              }
              v36 = v34 - 1;
              v37 = v36 & ((i >> 4) ^ (i >> 9));
              v38 = (_QWORD *)(v35 + 104 * v37);
              v39 = *v38;
              if (i != *v38)
              {
                v40 = 0;
                v41 = 1;
                while (v39 != -4096)
                {
                  if (v40)
                    v42 = 0;
                  else
                    v42 = v39 == -8192;
                  if (v42)
                    v40 = v38;
                  v43 = v37 + v41++;
                  v37 = v43 & v36;
                  v38 = (_QWORD *)(v35 + 104 * v37);
                  v39 = *v38;
                  if (i == *v38)
                    goto LABEL_62;
                }
                if (v40)
                  v44 = v40;
                else
                  v44 = v38;
                goto LABEL_61;
              }
LABEL_62:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v38 + 1), (uint64_t)v4);
              result = sub_1C498DE30(a3, (uint64_t)v80);
              if (!result)
                break;
              v45 = *(uint64_t **)(result + 8);
              if (!v45)
                break;
            }
            ++v30;
          }
          while (v30 != v31);
        }
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v79);
  }
  v46 = *(_DWORD *)v3;
  if (*(_DWORD *)v3 <= 1u)
  {
    if (v46)
    {
      v76 = v3 + 8;
      v77 = 16;
    }
    else
    {
      v76 = *(_QWORD *)(v3 + 8);
      v77 = *(_DWORD *)(v3 + 16);
    }
    v49 = (uint64_t *)(v76 + 104 * v77);
    v48 = v49;
  }
  else
  {
    if ((v46 & 1) != 0)
    {
      v47 = (uint64_t *)(v3 + 8);
      v48 = (uint64_t *)(v3 + 1672);
    }
    else
    {
      v47 = *(uint64_t **)(v3 + 8);
      v75 = *(_DWORD *)(v3 + 16);
      if (!v75)
      {
        v51 = 0;
        v49 = *(uint64_t **)(v3 + 8);
        v50 = v49;
        goto LABEL_83;
      }
      v48 = &v47[13 * v75];
    }
    v46 = *(_DWORD *)v3 & 1;
    v49 = v47;
    while (*v49 == -4096 || *v49 == -8192)
    {
      v49 += 13;
      if (v49 == v48)
      {
        v49 = v48;
        break;
      }
    }
  }
  if (v46)
  {
    v50 = (uint64_t *)(v3 + 8);
    v51 = 16;
  }
  else
  {
    v50 = *(uint64_t **)(v3 + 8);
    v51 = *(_DWORD *)(v3 + 16);
  }
  v47 = v48;
LABEL_83:
  v52 = &v50[13 * v51];
  while (v49 != v52)
  {
    v53 = v49[2];
    v54 = *v49;
    v55 = 24;
    if (v53 == v49[1])
      v55 = 28;
    v56 = *(unsigned int *)((char *)v49 + v55);
    if ((_DWORD)v56)
    {
      v57 = 8 * v56;
      v58 = (unint64_t *)v49[2];
      while (*v58 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v58;
        v57 -= 8;
        if (!v57)
          goto LABEL_116;
      }
    }
    else
    {
      v58 = (unint64_t *)v49[2];
    }
    v59 = (unint64_t *)(v53 + 8 * v56);
    if (v58 == v59)
      goto LABEL_116;
LABEL_93:
    v80 = 0;
    v60 = (_QWORD *)*v58;
    v80 = (_QWORD *)*v58;
    if ((*(_BYTE *)(v3 + 1672) & 1) != 0)
    {
      v61 = 16;
      v62 = v3 + 1680;
    }
    else
    {
      v61 = *(_DWORD *)(v3 + 1688);
      if (!v61)
      {
        v71 = 0;
        goto LABEL_110;
      }
      v62 = *(_QWORD *)(v3 + 1680);
    }
    v63 = v61 - 1;
    v64 = v63 & ((v60 >> 4) ^ (v60 >> 9));
    v65 = (_QWORD *)(v62 + 104 * v64);
    v66 = (_QWORD *)*v65;
    if (v60 == (_QWORD *)*v65)
      goto LABEL_111;
    v67 = 0;
    v68 = 1;
    while (v66 != (_QWORD *)-4096)
    {
      if (v67)
        v69 = 0;
      else
        v69 = v66 == (_QWORD *)-8192;
      if (v69)
        v67 = v65;
      v70 = v64 + v68++;
      v64 = v70 & v63;
      v65 = (_QWORD *)(v62 + 104 * v64);
      v66 = (_QWORD *)*v65;
      if (v60 == (_QWORD *)*v65)
        goto LABEL_111;
    }
    if (v67)
      v71 = v67;
    else
      v71 = v65;
LABEL_110:
    v65 = sub_1C498DF5C(v3 + 1672, (uint64_t)&v80, &v80, v71);
    *v65 = v80;
    v65[1] = v65 + 5;
    v65[2] = v65 + 5;
    v65[3] = 8;
    *((_DWORD *)v65 + 8) = 0;
LABEL_111:
    result = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)(v65 + 1), v54);
    v72 = v58 + 1;
    while (v72 != v59)
    {
      v73 = *v72++;
      if (v73 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v58 = v72 - 1;
        goto LABEL_93;
      }
    }
LABEL_116:
    v74 = v49 + 13;
    v49 = v47;
    if (v74 != v47)
    {
      v49 = v74;
      while ((*v49 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v49 += 13;
        if (v49 == v47)
        {
          v49 = v47;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C498DE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 248);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unsigned int *)(v2 + 64);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(v3 + 16 * v4))
    return 0;
  else
    return v6[1];
}

uint64_t sub_1C498DEB0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 104 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 104 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C498DF5C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C498E0D4(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 104 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 104 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C498E0D4(a1, v8);
      v20 = 0;
      sub_1C498DEB0(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

void sub_1C498E0D4(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[209];

  v2 = a2;
  v18[208] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 0x10)
    {
      *(_QWORD *)(a1 + 8) = operator new(104 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C498E2E4((int *)a1, v7, &v7[13 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v18;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = v10 + 5;
      *v10 = v12;
      v10[1] = (uint64_t)(v10 + 5);
      v14 = *(void **)(v11 + 16);
      v15 = *(void **)(v11 + 24);
      if (v15 == v14)
      {
        v10[2] = (uint64_t)v13;
        v16 = *(unsigned int *)(a1 + v9 + 36);
        v14 = *(void **)(v11 + 24);
        if ((_DWORD)v16)
        {
          memmove(v13, v14, 8 * v16);
          v15 = *(void **)(v11 + 16);
          v14 = *(void **)(v11 + 24);
        }
      }
      else
      {
        v10[2] = (uint64_t)v15;
        *(_QWORD *)(v11 + 24) = v14;
        v15 = v14;
      }
      v17 = a1 + v9;
      v10[3] = *(_QWORD *)(a1 + v9 + 32);
      *((_DWORD *)v10 + 8) = *(_DWORD *)(a1 + v9 + 40);
      *(_QWORD *)(v17 + 32) = 8;
      *(_DWORD *)(v17 + 40) = 0;
      v10 += 13;
      if (v14 != v15)
        free(v14);
    }
    v9 += 104;
  }
  while (v9 != 1664);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(104 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C498E2E4((int *)a1, v18, v10);
}

void sub_1C498E2E4(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = a1 + 418;
    v9 = a1 + 2;
  }
  else
  {
    v8 = a1[4];
    if (!v8)
      goto LABEL_5;
    v9 = (_QWORD *)*((_QWORD *)a1 + 1);
    v10 = &v9[13 * v8];
  }
  do
  {
    *v9 = -4096;
    v9 += 13;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    while (1)
    {
      v11 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_27:
      v4 += 13;
      if (v4 == a3)
        return;
    }
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v12 = 16;
      v13 = v7;
    }
    else
    {
      v12 = a1[4];
      if (!v12)
      {
        v16 = 0;
LABEL_22:
        v22 = v16 + 5;
        *v16 = v11;
        v16[1] = (uint64_t)(v16 + 5);
        v24 = v4[1];
        v23 = v4[2];
        if (v23 == v24)
        {
          v16[2] = (uint64_t)v22;
          v25 = *((unsigned int *)v4 + 7);
          if ((_DWORD)v25)
            memmove(v22, (const void *)v4[2], 8 * v25);
        }
        else
        {
          v16[2] = v23;
          v4[2] = v24;
        }
        v16[3] = v4[3];
        *((_DWORD *)v16 + 8) = *((_DWORD *)v4 + 8);
        v4[3] = 8;
        *((_DWORD *)v4 + 8) = 0;
        *a1 += 2;
        v26 = (void *)v4[2];
        if (v26 != (void *)v4[1])
          free(v26);
        goto LABEL_27;
      }
      v13 = (int *)*((_QWORD *)a1 + 1);
    }
    v14 = v12 - 1;
    v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
    v16 = (uint64_t *)&v13[26 * v15];
    v17 = *v16;
    if (v11 != *v16)
    {
      v18 = 0;
      v19 = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = (uint64_t *)&v13[26 * v15];
        v17 = *v16;
        if (v11 == *v16)
          goto LABEL_22;
      }
      if (v18)
        v16 = v18;
    }
    goto LABEL_22;
  }
}

_QWORD *sub_1C498E4A0(_QWORD *a1, _QWORD *a2, unsigned int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v10;
  unint64_t v12;

  v3 = a2;
  if (a3 > 0xF)
    return v3;
  v4 = (_QWORD *)a1[7];
  if (v4 == a2)
    return v3;
  v3 = a2;
  while (1)
  {
    v5 = *v3 & 0xFFFFFFFFFFFFFFF8;
    v6 = *(unsigned __int16 **)(v5 + 16);
    v7 = *v6;
    if ((v7 - 9) <= 0x3C && ((1 << (v7 - 9)) & 0x1000000000000605) != 0 || v7 == 0)
      goto LABEL_18;
    v10 = *((_QWORD *)v6 + 1);
    if ((v10 & 0x10) != 0 || (v6[8] & 1) != 0)
      goto LABEL_18;
    if ((*(_WORD *)(v5 + 44) & 0xC) != 0 && (*(_WORD *)(v5 + 44) & 4) == 0)
      break;
    if ((v10 & 0x400) == 0)
      return v3;
LABEL_18:
    if (v4 == (_QWORD *)v5)
    {
      if (a1[8] == a1[9])
        return (_QWORD *)a1[7];
      else
        return a2;
    }
    ++a3;
    v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFF8);
    if (a3 == 16)
      return a2;
  }
  if ((v10 & 0x400) != 0)
    goto LABEL_18;
  v12 = *v3 & 0xFFFFFFFFFFFFFFF8;
  while ((*(_WORD *)(v12 + 44) & 8) != 0)
  {
    v12 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 16) + 9) & 4) != 0)
      goto LABEL_18;
  }
  return v3;
}

_QWORD *sub_1C498E57C(_QWORD *a1)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;

  v1 = a1 + 6;
  v2 = -1;
  v3 = a1 + 6;
  do
  {
    v3 = (_QWORD *)v3[1];
    ++v2;
  }
  while (v3 != v1);
  if (!v2)
    return a1 + 6;
  v4 = a1[7];
  v5 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  if (v4 != v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = (_QWORD *)v5;
      v8 = *(_WORD *)(v5 + 44);
      v9 = v8 & 0xC;
      v10 = v8 & 4;
      v11 = v7[2];
      v12 = *(_QWORD *)(v11 + 8);
      if (v9)
        v13 = v10 == 0;
      else
        v13 = 0;
      if (v13)
      {
        v14 = v7;
        if ((v12 & 0x200) == 0)
        {
          while ((*((_WORD *)v14 + 22) & 8) != 0)
          {
            v14 = (_QWORD *)v14[1];
            if ((*(_BYTE *)(v14[2] + 9) & 2) != 0)
              goto LABEL_12;
          }
LABEL_11:
          if ((*(_BYTE *)(v11 + 16) & 0x40) == 0)
            goto LABEL_20;
        }
      }
      else if ((v12 & 0x200) == 0)
      {
        goto LABEL_11;
      }
LABEL_12:
      v5 = *v7 & 0xFFFFFFFFFFFFFFF8;
      ++v6;
      v1 = v7;
      if (v4 == v5)
        return sub_1C498E4A0(a1, v7, v6);
    }
  }
  v6 = 0;
LABEL_20:
  v7 = v1;
  return sub_1C498E4A0(a1, v7, v6);
}

_QWORD *sub_1C498E634(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int16 *v4;
  unsigned int v5;

  v1 = a1;
  v2 = *(_QWORD **)(a1[3] + 56);
  if (v2 != a1)
  {
    while (1)
    {
      v3 = (_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      v4 = (unsigned __int16 *)v3[2];
      v5 = *v4;
      if (v5 - 13 <= 4)
        break;
LABEL_5:
      if ((v4[8] & 0x10) != 0)
      {
        if ((*(_BYTE *)(v3[4] + 32 * sub_1C4B138B4(v5) + 16) & 8) == 0)
          return v1;
      }
      else if (v5 >> 1 != 2335)
      {
        return v1;
      }
      v2 = *(_QWORD **)(v3[3] + 56);
      v1 = v3;
      if (v3 == v2)
        return v1;
    }
    while (v3 != v2)
    {
      v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      v4 = (unsigned __int16 *)v3[2];
      v5 = *v4;
      if (v5 - 13 >= 5)
        goto LABEL_5;
    }
  }
  return v1;
}

_QWORD *sub_1C498E6EC(_QWORD *result)
{
  uint64_t v1;
  uint64_t i;
  unsigned int v3;

  v1 = result[4] + 320;
  if ((_QWORD *)v1 != result)
  {
    do
    {
      for (i = result[7]; (_QWORD *)i != result + 6; i = *(_QWORD *)(i + 8))
      {
        v3 = **(unsigned __int16 **)(i + 16) - 724;
        if (v3 > 4 || v3 == 2)
          return result;
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      result = (_QWORD *)result[1];
    }
    while (result != (_QWORD *)v1);
  }
  return *(_QWORD **)v1;
}

void sub_1C498E758(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 **v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  unsigned __int8 *v19;
  llvm::MachineInstr *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  llvm::MachineFunction *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  llvm::MachineInstr *v28;
  uint64_t v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  llvm::MachineInstr *v32;
  uint64_t v33;
  llvm::MachineFunction *v34;
  unsigned __int8 *v35;
  llvm::MachineInstr *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;

  v9 = a2 + 6;
  if (a2 + 6 == a3)
    a3 = sub_1C498E57C(a2);
  if (a3 != v9)
  {
    v10 = sub_1C498E634(a3);
    if (v9 != v10)
    {
      v11 = v10;
      v12 = (unsigned __int8 *)v10[7];
      v37 = v12;
      if (v12)
        llvm::MetadataTracking::track((uint64_t)&v37, v12, 2);
LABEL_19:
      if (v11 != *(_QWORD **)(v11[3] + 56))
      {
        v21 = *v11 & 0xFFFFFFFFFFFFFFF8;
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8);
        if ((*(_WORD *)(v21 + 44) & 0xC) != 0 && (*(_WORD *)(v21 + 44) & 4) == 0)
        {
          if ((v22 & 0x400) == 0)
          {
            while ((*(_WORD *)(v21 + 44) & 8) != 0)
            {
              v21 = *(_QWORD *)(v21 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v21 + 16) + 9) & 4) != 0)
                goto LABEL_25;
            }
            goto LABEL_59;
          }
          goto LABEL_25;
        }
        if ((v22 & 0x400) != 0)
        {
LABEL_25:
          v24 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
          v25 = (llvm::MachineFunction *)a2[4];
          v26 = **(unsigned __int8 ***)a1;
          v41 = v26;
          if (v26)
            llvm::MetadataTracking::track((uint64_t)&v41, v26, 2);
          v27 = v24 + 48 * a5;
          v28 = (llvm::MachineInstr *)*((_QWORD *)v25 + 28);
          if (v28)
            *((_QWORD *)v25 + 28) = *(_QWORD *)v28;
          else
            v28 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v25 + 128, 72, 3);
          v38 = v41;
          if (v41)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v38);
            v41 = 0;
          }
          llvm::MachineInstr::MachineInstr(v28, v25, v27, &v38, 0);
          if (v38)
            llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
          if (v41)
            llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
          if (v9 != v11 && (*((_WORD *)v11 + 22) & 4) != 0)
            *((_WORD *)v28 + 22) |= 0xCu;
          sub_1C512CA10(a2 + 5, v11, (uint64_t)v28);
        }
      }
LABEL_59:
      v29 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
      v30 = (llvm::MachineFunction *)a2[4];
      v41 = v37;
      if (v37)
        llvm::MetadataTracking::track((uint64_t)&v41, v37, 2);
      v31 = v29 + 231648;
      v32 = (llvm::MachineInstr *)*((_QWORD *)v30 + 28);
      if (v32)
        *((_QWORD *)v30 + 28) = *(_QWORD *)v32;
      else
        v32 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v30 + 128, 72, 3);
      v38 = v41;
      if (v41)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v38);
        v41 = 0;
      }
      llvm::MachineInstr::MachineInstr(v32, v30, v31, &v38, 0);
      if (v38)
        llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
      if (v41)
        llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
      if (v9 != v11 && (*((_WORD *)v11 + 22) & 4) != 0)
        *((_WORD *)v32 + 22) |= 0xCu;
      sub_1C512CA10(a2 + 5, v11, (uint64_t)v32);
      LODWORD(v38) = 1;
      v39 = 0;
      v40 = a4;
      llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v38);
      v33 = **(unsigned int **)(a1 + 16);
      LODWORD(v38) = 1;
      v39 = 0;
      v40 = v33;
      llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v38);
      if (v37)
        llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
      return;
    }
  }
  v37 = 0;
  v13 = *v9 & 0xFFFFFFFFFFFFFFF8;
  if (v9 == (_QWORD *)v13)
  {
    v11 = v9;
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8);
  if ((*(_WORD *)(v13 + 44) & 0xC) != 0 && (*(_WORD *)(v13 + 44) & 4) == 0)
  {
    if ((v14 & 0x400) == 0)
    {
      while ((*(_WORD *)(v13 + 44) & 8) != 0)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v13 + 16) + 9) & 4) != 0)
          goto LABEL_13;
      }
      goto LABEL_58;
    }
  }
  else if ((v14 & 0x400) == 0)
  {
LABEL_58:
    v11 = v9;
    goto LABEL_59;
  }
LABEL_13:
  v16 = *(unsigned __int8 ***)a1;
  v17 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 48 * a5;
  if ((MEMORY[0x2C] & 4) != 0)
  {
    v18 = (llvm::MachineFunction *)a2[4];
    v19 = *v16;
    v41 = v19;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)&v41, v19, 2);
    v20 = (llvm::MachineInstr *)*((_QWORD *)v18 + 28);
    if (v20)
      *((_QWORD *)v18 + 28) = *(_QWORD *)v20;
    else
      v20 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v18 + 128, 72, 3);
    v38 = v41;
    if (v41)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v38);
      v41 = 0;
    }
    llvm::MachineInstr::MachineInstr(v20, v18, v17, &v38, 0);
    if (v38)
      llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
    if (v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
    if ((MEMORY[0x2C] & 4) != 0)
      *((_WORD *)v20 + 22) |= 0xCu;
    sub_1C512CA10(a2 + 5, 0, (uint64_t)v20);
    goto LABEL_58;
  }
  v34 = (llvm::MachineFunction *)a2[4];
  v35 = *v16;
  v41 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v41, v35, 2);
  v36 = (llvm::MachineInstr *)*((_QWORD *)v34 + 28);
  if (v36)
    *((_QWORD *)v34 + 28) = *(_QWORD *)v36;
  else
    v36 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v34 + 128, 72, 3);
  v38 = v41;
  if (v41)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v38);
    v41 = 0;
  }
  llvm::MachineInstr::MachineInstr(v36, v34, v17, &v38, 0);
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  llvm::ilist_traits<llvm::MachineInstr>::addNodeToList(a2 + 5, (uint64_t)v36);
  __break(1u);
}

uint64_t *sub_1C498EC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v3 = 16;
    v2 = a1 + 8;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      v10 = 0;
      return (uint64_t *)(v2 + 104 * v10);
    }
  }
  v4 = v3 - 1;
  v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 104 * v5);
  v7 = *v6;
  if (*v6 == a2)
    return v6;
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = (uint64_t *)(v2 + 104 * (v9 & v4));
    v7 = *v6;
    if (*v6 == a2)
      return v6;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v10 = 16;
    v2 = a1 + 8;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16);
  }
  return (uint64_t *)(v2 + 104 * v10);
}

uint64_t sub_1C498ED40(uint64_t a1)
{
  sub_1C498ED7C(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C498ED7C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 16;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 104 * v2;
  v4 = (void **)(v1 + 16);
  do
  {
    v5 = (uint64_t)*(v4 - 2);
    if (v5 != -4096 && v5 != -8192 && *v4 != *(v4 - 1))
      free(*v4);
    v4 += 13;
    v3 -= 104;
  }
  while (v3);
}

llvm::cl::Option *sub_1C498EDF8(llvm::cl::Option *a1, char *a2, _BYTE **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C498EEAC(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C498EEAC(uint64_t a1, char *__s, _BYTE **a3, _WORD *a4, __n128 *a5)
{
  size_t v10;
  _BYTE *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  v11 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t sub_1C498EF3C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Assume whether or not unknown functions have side effects";
  v1.n128_u64[1] = 57;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7EC3B0, "agx2-frag-sync-func-calls-side-effects", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC3B0, &dword_1C475E000);
}

void sub_1C498EFBC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7FA7D28;
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2 != (char *)this + 264)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C498F054(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7FA7D28;
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2 != (char *)this + 264)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C498F100()
{
  return "AGX2 verifier of memory operands for instructions";
}

uint64_t sub_1C498F110(llvm *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  llvm::MachineInstr **v13;
  uint64_t v14;
  llvm::MachineInstr *v15;
  llvm::raw_ostream *v16;
  void *v17;

  *((_DWORD *)a1 + 64) = 0;
  v2 = a2 + 320;
  v3 = *(_QWORD *)(a2 + 328);
  if (v3 == a2 + 320)
    return 0;
  v4 = a1;
  v5 = (uint64_t)a1 + 248;
  v6 = (uint64_t)a1 + 264;
  do
  {
    for (i = *(_QWORD *)(v3 + 56); i != v3 + 48; i = *(_QWORD *)(i + 8))
    {
      if ((*(_BYTE *)(*(_QWORD *)(i + 16) + 18) & 0x40) == 0)
        goto LABEL_17;
      v8 = *(_QWORD *)(i + 48);
      if (v8 >= 8)
      {
        if ((v8 & 7) == 0)
        {
          *(_QWORD *)(i + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_17;
        }
        v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
        v10 = (*(_QWORD *)(i + 48) & 7) != 3 || v9 == 0;
        if (!v10 && *v9)
          goto LABEL_17;
      }
      v11 = *((unsigned int *)v4 + 64);
      if (v11 >= *((unsigned int *)v4 + 65))
      {
        a1 = (llvm *)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v6, v11 + 1, 8);
        v11 = *((unsigned int *)v4 + 64);
      }
      *(_QWORD *)(*((_QWORD *)v4 + 31) + 8 * v11) = i;
      ++*((_DWORD *)v4 + 64);
LABEL_17:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  v12 = *((unsigned int *)v4 + 64);
  if ((_DWORD)v12)
  {
    v13 = (llvm::MachineInstr **)*((_QWORD *)v4 + 31);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      v16 = (llvm::raw_ostream *)llvm::errs(a1);
      v17 = (void *)*((_QWORD *)v16 + 4);
      if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 0x1EuLL)
      {
        qmemcpy(v17, "Instruction should have MemOp: ", 31);
        *((_QWORD *)v16 + 4) += 31;
      }
      else
      {
        llvm::raw_ostream::write(v16, "Instruction should have MemOp: ", 0x1FuLL);
      }
      llvm::MachineInstr::dump(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
    if (*((_DWORD *)v4 + 64))
      llvm::report_fatal_error((llvm *)"Some instructions should have memory operands", (const char *)1);
  }
  return 0;
}

uint64_t sub_1C498F2B0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 LR Spill to a reg";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "agx2-lr-spill-to-reg";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC480;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C498F400;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C498F340(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC480) = &off_1E7FA7DE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EC488);
  if (v3 != -1)
  {
    v7[0] = sub_1C498F2B0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EC488, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C498F400()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C498F340(v0);
}

void sub_1C498F428(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C498F4BC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C498F548()
{
  return "AGX2 LR Spill to a reg";
}

void *sub_1C498F558(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C498F588(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t *v20;
  uint64_t v21;
  llvm::MachineFunction *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  llvm::MachineBasicBlock **v30;
  llvm::MachineBasicBlock **v31;
  llvm::MachineBasicBlock *v32;
  _QWORD *FirstTerminator;
  unint64_t v34;
  uint64_t v35;
  llvm::MachineFunction *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[5];

  v67[4] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = *(_QWORD **)(a2 + 328);
  v65 = v67;
  v66 = 0x400000000;
  if (v4 != (_QWORD *)(a2 + 320))
  {
    v5 = (uint64_t)v4;
    do
    {
      if (sub_1C498FBAC(v5))
      {
        v6 = v66;
        if (v66 >= (unint64_t)HIDWORD(v66))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v66 + 1, 8);
          v6 = v66;
        }
        *((_QWORD *)v65 + v6) = v5;
        LODWORD(v66) = v66 + 1;
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a2 + 320);
  }
  v7 = (*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3F70) == 0 || (*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 4080;
  v8 = v7;
  v59 = v8;
  if (v7)
  {
    v9 = llvm::MachineFunction::addLiveIn(a2, 0x39u, (uint64_t)&off_1E7FA5F48);
    v11 = (char *)v4[20];
    v10 = v4[21];
    if ((unint64_t)v11 >= v10)
    {
      v13 = (char *)v4[19];
      v14 = (v11 - v13) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        abort();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 60)
          sub_1C4764EE4();
        v18 = (char *)operator new(16 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[16 * v14];
      *(_WORD *)v19 = 57;
      *((_QWORD *)v19 + 1) = -1;
      v12 = v19 + 16;
      if (v11 != v13)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
          v19 -= 16;
          v11 -= 16;
        }
        while (v11 != v13);
        v11 = (char *)v4[19];
      }
      v4[19] = v19;
      v4[20] = v12;
      v4[21] = &v18[16 * v17];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_WORD *)v11 = 57;
      *((_QWORD *)v11 + 1) = -1;
      v12 = v11 + 16;
    }
    v4[20] = v12;
    v20 = (unint64_t *)v4[7];
    v21 = *(_QWORD *)(v3 + 8);
    v22 = (llvm::MachineFunction *)v4[4];
    v23 = (unsigned __int8 *)v20[7];
    v60 = v23;
    if (v23)
      llvm::MetadataTracking::track((uint64_t)&v60, v23, 2);
    v24 = *((_QWORD *)v22 + 28);
    if (v24)
      *((_QWORD *)v22 + 28) = *(_QWORD *)v24;
    else
      v24 = sub_1C484358C((uint64_t)v22 + 128, 72, 3);
    v61 = (uint64_t)v60;
    if (v60)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v60, v60, (uint64_t)&v61);
      v60 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v22, v21 + 912, (unsigned __int8 **)&v61, 0);
    if (v61)
      llvm::MetadataTracking::untrack((uint64_t)&v61, (unsigned __int8 *)v61);
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v25 = v4[5];
    *(_QWORD *)(v24 + 24) = v25;
    v26 = *(_QWORD *)(v25 + 32);
    v27 = *(unsigned int *)(v24 + 40);
    if ((_DWORD)v27)
    {
      v52 = *(_QWORD *)(v24 + 32);
      v53 = *(_QWORD *)(v26 + 40);
      v54 = 32 * v27;
      do
      {
        if (!*(_BYTE *)v52)
        {
          v55 = *(unsigned int *)(v52 + 4);
          if ((int)v55 >= 0)
            v56 = (uint64_t *)(*(_QWORD *)(v53 + 272) + 8 * v55);
          else
            v56 = (uint64_t *)(*(_QWORD *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
          v57 = *v56;
          if (*v56)
          {
            v58 = *(_QWORD *)(v57 + 16);
            *(_QWORD *)(v57 + 16) = v52;
            *(_QWORD *)(v52 + 16) = v58;
            if ((*(_BYTE *)(v52 + 3) & 1) != 0)
            {
              *(_QWORD *)(v52 + 24) = v57;
            }
            else
            {
              *(_QWORD *)(v52 + 24) = 0;
              v56 = (uint64_t *)(v58 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v52 + 16) = v52;
            *(_QWORD *)(v52 + 24) = 0;
          }
          *v56 = v52;
        }
        v52 += 32;
        v54 -= 32;
      }
      while (v54);
    }
    v28 = *(_QWORD *)(v26 + 728);
    if (v28)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 24))(v28, v24);
    v29 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = v29 | *(_QWORD *)v24 & 7;
    *(_QWORD *)(v24 + 8) = v20;
    *(_QWORD *)(v29 + 8) = v24;
    *v20 = *v20 & 7 | v24;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    LODWORD(v61) = 0x1000000;
    HIDWORD(v61) = v9;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v61);
    v62 = 0;
    v63 = 0;
    v61 = 0x3900000000;
    v64 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v61);
    if ((_DWORD)v66)
    {
      v30 = (llvm::MachineBasicBlock **)v65;
      v31 = (llvm::MachineBasicBlock **)((char *)v65 + 8 * v66);
      do
      {
        v32 = *v30;
        FirstTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator(*v30);
        v34 = llvm::MachineBasicBlock::getFirstTerminator(v32);
        v35 = *(_QWORD *)(v3 + 8);
        v36 = (llvm::MachineFunction *)*((_QWORD *)v32 + 4);
        v37 = *(unsigned __int8 **)(v34 + 56);
        v60 = v37;
        if (v37)
          llvm::MetadataTracking::track((uint64_t)&v60, v37, 2);
        v38 = *((_QWORD *)v36 + 28);
        if (v38)
          *((_QWORD *)v36 + 28) = *(_QWORD *)v38;
        else
          v38 = sub_1C484358C((uint64_t)v36 + 128, 72, 3);
        v61 = (uint64_t)v60;
        if (v60)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v60, v60, (uint64_t)&v61);
          v60 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v38, v36, v35 + 912, (unsigned __int8 **)&v61, 0);
        if (v61)
          llvm::MetadataTracking::untrack((uint64_t)&v61, (unsigned __int8 *)v61);
        if (v60)
          llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
        v39 = *((_QWORD *)v32 + 5);
        *(_QWORD *)(v38 + 24) = v39;
        v40 = *(_QWORD *)(v39 + 32);
        v41 = *(unsigned int *)(v38 + 40);
        if ((_DWORD)v41)
        {
          v44 = *(_QWORD *)(v38 + 32);
          v45 = *(_QWORD *)(v40 + 40);
          v46 = 32 * v41;
          do
          {
            if (!*(_BYTE *)v44)
            {
              v47 = *(unsigned int *)(v44 + 4);
              if ((int)v47 >= 0)
                v48 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v47);
              else
                v48 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
              v49 = *v48;
              if (*v48)
              {
                v50 = *(_QWORD *)(v49 + 16);
                *(_QWORD *)(v49 + 16) = v44;
                *(_QWORD *)(v44 + 16) = v50;
                if ((*(_BYTE *)(v44 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v44 + 24) = v49;
                }
                else
                {
                  *(_QWORD *)(v44 + 24) = 0;
                  v48 = (uint64_t *)(v50 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v44 + 16) = v44;
                *(_QWORD *)(v44 + 24) = 0;
              }
              *v48 = v44;
            }
            v44 += 32;
            v46 -= 32;
          }
          while (v46);
        }
        v42 = *(_QWORD *)(v40 + 728);
        if (v42)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v38);
        v43 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v38 = v43 | *(_QWORD *)v38 & 7;
        *(_QWORD *)(v38 + 8) = FirstTerminator;
        *(_QWORD *)(v43 + 8) = v38;
        *FirstTerminator = *FirstTerminator & 7 | v38;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v61 = 0x3901000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v61);
        v62 = 0;
        LODWORD(v61) = 0;
        HIDWORD(v61) = v9;
        v63 = 0;
        v64 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v61);
        ++v30;
      }
      while (v30 != v31);
    }
  }
  if (v65 != v67)
    free(v65);
  return v59;
}

uint64_t sub_1C498FBAC(uint64_t a1)
{
  unint64_t v1;
  __int16 v2;
  int v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (a1 + 48 == v1)
    return 0;
  if (v1 && (*(_BYTE *)v1 & 4) != 0)
  {
    v2 = *(_WORD *)(v1 + 44);
  }
  else
  {
    while (1)
    {
      v2 = *(_WORD *)(v1 + 44);
      if ((v2 & 4) == 0)
        break;
      v1 = *(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v3 = v2 & 0xC;
  v4 = v2 & 4;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 0;
  if (!v6)
    return (v5 >> 5) & 1;
  if ((v5 & 0x20) != 0)
    return 1;
  do
  {
    v8 = *(unsigned __int16 *)(v1 + 44);
    result = (v8 >> 3) & 1;
    if ((v8 & 8) == 0)
      break;
    v1 = *(_QWORD *)(v1 + 8);
  }
  while ((*(_BYTE *)(*(_QWORD *)(v1 + 16) + 8) & 0x20) == 0);
  return result;
}

_QWORD *sub_1C498FC38(__int128 *a1, unsigned int a2, char a3, uint64_t a4, const llvm::APInt *a5)
{
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v27 = v29;
  v28 = 0x800000000;
  v9 = &unk_1C6612C50;
  v10 = 25;
  if (a3 == 9)
  {
    v9 = &unk_1C6612C20;
    v10 = 1;
  }
  if (a3 == 4)
    v11 = &unk_1C6612C20;
  else
    v11 = v9;
  if (a3 == 4)
    v12 = 1;
  else
    v12 = v10;
  v13 = sub_1C6366AB4(a4, v11[(int)a2 - 1], a5, (llvm *)5, 0, 1, 0);
  v14 = (char *)v27 + 16 * v28;
  *v14 = v13;
  v14[1] = v15;
  LODWORD(v16) = v28 + 1;
  LODWORD(v28) = v28 + 1;
  v17 = a2;
  do
  {
    v18 = *a1;
    if (v16 >= HIDWORD(v28))
    {
      v26 = *a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v16 + 1, 16);
      v18 = v26;
      LODWORD(v16) = v28;
    }
    *((_OWORD *)v27 + v16) = v18;
    LODWORD(v28) = v28 + 1;
    v19 = sub_1C6366AB4(a4, v12, a5, (llvm *)5, 0, 1, 0);
    v21 = v20;
    v22 = v28;
    if (v28 >= (unint64_t)HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
      v22 = v28;
    }
    v23 = (char *)v27 + 16 * v22;
    *v23 = v19;
    v23[1] = v21;
    v16 = (v28 + 1);
    LODWORD(v28) = v28 + 1;
    ++v12;
    ++a1;
    --v17;
  }
  while (v17);
  v24 = sub_1C636E56C(a4, 18, (uint64_t)a5, (llvm *)0xAE, 0, (uint64_t *)v27, v16);
  if (v27 != v29)
    free(v27);
  return v24;
}

uint64_t *sub_1C498FE70(uint64_t a1, _QWORD *a2, const llvm::APInt *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  __int16 v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t *v54;
  __int16 v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  llvm *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  __int16 v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  llvm *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  uint64_t *v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  __int16 v116;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v127;
  unsigned int v128;
  _QWORD *v129;
  int v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;

  v5 = *(uint64_t **)(a1 + 32);
  v7 = *v5;
  v6 = v5[1];
  v9 = v5[5];
  v8 = v5[6];
  v132 = sub_1C6366AB4((uint64_t)a2, 0, a3, (llvm *)5, 0, 0, 0);
  v11 = v10;
  v123 = sub_1C6366AB4((uint64_t)a2, 1, a3, (llvm *)5, 0, 0, 0);
  v13 = v12;
  v14 = sub_1C6366AB4((uint64_t)a2, 0, a3, (llvm *)4, 0, 0, 0);
  v130 = v15;
  v131 = (uint64_t)v14;
  v129 = sub_1C6366AB4((uint64_t)a2, 1, a3, (llvm *)4, 0, 0, 0);
  v128 = v17;
  if (*(_WORD *)(v7 + 24) == 199)
  {
    v18 = *(unsigned int **)(v7 + 32);
    v19 = *(uint64_t **)v18;
    v20 = v18[2];
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 16 * v20) != 5)
    {
      v21 = a2[104];
      if (v21)
        v22 = *(_WORD *)(v21 + 8);
      else
        v22 = 0;
      v19 = sub_1C5D52060((uint64_t)a2, 199, a3, (llvm *)5, 0, (uint64_t)v19, v20, v22);
      v20 = v36;
    }
    v125 = v132;
    v35 = v11;
  }
  else
  {
    v23 = a2[104];
    if (v23)
      v24 = *(_WORD *)(v23 + 8);
    else
      v24 = 0;
    v26 = sub_1C5D52060((uint64_t)a2, 216, a3, (llvm *)0x31, 0, v7, v6, v24);
    v27 = 0;
    v29 = v6 & 0xFFFFFFFF00000000 | v28;
    v30 = a2[104];
    if (v30)
      v27 = *(_WORD *)(v30 + 8);
    v19 = sub_1C5D56C70((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v26, v29, v25, (uint64_t)v132, v11, v27);
    v32 = 0;
    v20 = v33;
    v34 = a2[104];
    if (v34)
      v32 = *(_WORD *)(v34 + 8);
    v125 = sub_1C5D56C70((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v26, v29, v31, (uint64_t)v123, v13, v32);
  }
  v37 = *(unsigned __int16 *)(v9 + 24);
  v120 = v35;
  v121 = v11;
  v119 = v35;
  if (v37 == 11 || v37 == 35)
  {
    v43 = *(_QWORD *)(v9 + 80);
    v44 = (unsigned int *)(v43 + 24);
    if (*(_DWORD *)(v43 + 32) >= 0x41u)
      v44 = *(unsigned int **)v44;
    v45 = a1;
    v39 = sub_1C6366AB4((uint64_t)a2, *v44, a3, (llvm *)5, 0, 0, 0);
    v40 = v46;
    v47 = *(_QWORD *)(v9 + 80);
    v48 = (uint64_t **)(v47 + 24);
    if (*(_DWORD *)(v47 + 32) >= 0x41u)
      v48 = (uint64_t **)*v48;
    v41 = sub_1C6366AB4((uint64_t)a2, *((unsigned int *)v48 + 1), a3, (llvm *)5, 0, 0, 0);
  }
  else
  {
    if (v37 != 199)
    {
      v49 = a2[104];
      if (v49)
        v50 = *(_WORD *)(v49 + 8);
      else
        v50 = 0;
      v54 = sub_1C5D52060((uint64_t)a2, 216, a3, (llvm *)0x31, 0, v9, v8, v50);
      v55 = 0;
      v57 = v8 & 0xFFFFFFFF00000000 | v56;
      v58 = a2[104];
      if (v58)
        v55 = *(_WORD *)(v58 + 8);
      v39 = sub_1C5D56C70((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v54, v57, v53, (uint64_t)v132, v11, v55);
      v60 = 0;
      v40 = v61;
      v62 = a2[104];
      if (v62)
        v60 = *(_WORD *)(v62 + 8);
      v41 = sub_1C5D56C70((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v54, v57, v59, (uint64_t)v123, v13, v60);
      goto LABEL_36;
    }
    v38 = *(unsigned int **)(v9 + 32);
    v39 = *(_QWORD **)v38;
    v40 = v38[2];
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v38 + 40) + 16 * v40) == 5)
    {
      v41 = v132;
      v42 = v121;
LABEL_36:
      v45 = a1;
      goto LABEL_39;
    }
    v51 = a2[104];
    v45 = a1;
    if (v51)
      v52 = *(_WORD *)(v51 + 8);
    else
      v52 = 0;
    v39 = sub_1C5D52060((uint64_t)a2, 199, a3, (llvm *)5, 0, (uint64_t)v39, v40, v52);
    v40 = v63;
    v41 = v132;
    v42 = v121;
  }
LABEL_39:
  v64 = a2[104];
  v127 = (uint64_t)v41;
  v124 = v42;
  if (*(_WORD *)(v45 + 24) == 56)
  {
    v118 = v42;
    if (v64)
      LOWORD(v64) = *(_WORD *)(v64 + 8);
    v65 = sub_1C5D56C70((uint64_t)a2, 56, a3, (llvm *)5, 0, (uint64_t)v19, v20, v16, (uint64_t)v39, v40, v64);
    v67 = v66;
    v68 = v129[5] + 16 * v128;
    v69 = *(llvm **)v68;
    v70 = *(_QWORD *)(v68 + 8);
    v71 = sub_1C6367818(a2, 0xCu);
    v75 = sub_1C63698B8((uint64_t)a2, (const char *)0xC0, a3, v69, v70, (uint64_t)v65, v67, v73, (uint64_t)v19, v20, (uint64_t)v129, v128, v131, v130, v71, v72);
    v76 = v74;
    v77 = a2[104];
    if (v77)
      v78 = *(_WORD *)(v77 + 8);
    else
      v78 = 0;
    v92 = sub_1C5D52060((uint64_t)a2, 199, a3, (llvm *)5, 0, (uint64_t)v75, v74, v78);
    v94 = v76 & 0xFFFFFFFF00000000 | v93;
    if (v125 == v132 && v119 == v121)
    {
      v95 = (uint64_t *)v127;
      v96 = v124;
    }
    else if ((uint64_t *)v127 == v132 && v118 == v121)
    {
      v95 = v125;
      v96 = v120;
    }
    else
    {
      v109 = a2[104];
      if (v109)
        LOWORD(v109) = *(_WORD *)(v109 + 8);
      v95 = sub_1C5D56C70((uint64_t)a2, 56, a3, (llvm *)5, 0, (uint64_t)v125, v120, v91, v127, v124, v109);
      v96 = v110;
    }
    v111 = a2[104];
    if (v111)
      LOWORD(v111) = *(_WORD *)(v111 + 8);
    v106 = sub_1C5D56C70((uint64_t)a2, 56, a3, (llvm *)5, 0, (uint64_t)v95, v96, v91, (uint64_t)v92, v94, v111);
  }
  else
  {
    if (v64)
      LOWORD(v64) = *(_WORD *)(v64 + 8);
    v133 = sub_1C5D56C70((uint64_t)a2, 57, a3, (llvm *)5, 0, (uint64_t)v19, v20, v16, (uint64_t)v39, v40, v64);
    v122 = v79;
    v80 = v129[5] + 16 * v128;
    v82 = *(llvm **)v80;
    v81 = *(_QWORD *)(v80 + 8);
    v83 = sub_1C6367818(a2, 0xCu);
    v87 = sub_1C63698B8((uint64_t)a2, (const char *)0xC0, a3, v82, v81, (uint64_t)v19, v20, v85, (uint64_t)v39, v40, (uint64_t)v129, v128, v131, v130, v83, v84);
    v88 = v86;
    v89 = a2[104];
    if (v89)
      v90 = *(_WORD *)(v89 + 8);
    else
      v90 = 0;
    v65 = v133;
    v67 = v122;
    v98 = sub_1C5D52060((uint64_t)a2, 199, a3, (llvm *)5, 0, (uint64_t)v87, v86, v90);
    v100 = v88 & 0xFFFFFFFF00000000 | v99;
    v101 = a2[104];
    if (v101)
      LOWORD(v101) = *(_WORD *)(v101 + 8);
    v103 = sub_1C5D56C70((uint64_t)a2, 57, a3, (llvm *)5, 0, (uint64_t)v125, v120, v97, v127, v124, v101);
    v105 = a2[104];
    if (v105)
      LOWORD(v105) = *(_WORD *)(v105 + 8);
    v106 = sub_1C5D56C70((uint64_t)a2, 57, a3, (llvm *)5, 0, (uint64_t)v103, v102, v104, (uint64_t)v98, v100, v105);
  }
  v112 = a2[104];
  if (v112)
    LOWORD(v112) = *(_WORD *)(v112 + 8);
  v114 = sub_1C5D56C70((uint64_t)a2, 146, a3, (llvm *)0x31, 0, (uint64_t)v65, v67, v108, (uint64_t)v106, v107, v112);
  v115 = a2[104];
  if (v115)
    v116 = *(_WORD *)(v115 + 8);
  else
    v116 = 0;
  return sub_1C5D52060((uint64_t)a2, 216, a3, (llvm *)6, 0, (uint64_t)v114, v113, v116);
}

uint64_t sub_1C4990600(int a1)
{
  return dword_1C6612C80[a1 - 9];
}

uint64_t sub_1C4990614(int a1, _BYTE *a2)
{
  int v2;
  uint64_t result;

  *a2 = 0;
  v2 = a1 - 17;
  result = 1;
  switch(v2)
  {
    case 1:
      result = 2;
      break;
    case 2:
      result = 3;
      break;
    case 3:
      result = 4;
      break;
    case 4:
      result = 5;
      break;
    case 5:
      result = 1;
      *a2 = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C4990688(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X15 }
}

double sub_1C49906D8@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  __int16 v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double result;

  if ((a3 & 0xFFFFFFFE) == 0xC)
  {
    v6 = 15;
  }
  else
  {
    v7 = (a3 & 0xFFFFFFFE) != 0xE || a4 == 0;
    v6 = 15;
    if (v7)
      v6 = a2;
  }
  v8 = __clz(__rbit32(v6)) & 0x1F;
  v9 = 32 - __clz(v6) - v8;
  if ((a1 & 0xFF00000000) != 0)
    v10 = a1 + v8;
  else
    v10 = 0;
  if ((a1 & 0xFF00000000) != 0)
    v11 = v9;
  else
    v11 = 128;
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 216))(*(_QWORD *)(v5 + 8), v5 + 128, v5);
    *(_QWORD *)(v5 + 48) = v12;
  }
  v13 = sub_1C49023D4(v12, v10, v11, v5);
  if (v13)
    v14 = *(_DWORD *)(v13 + 12);
  else
    v14 = 0;
  v15 = v13 | 4;
  if (v11)
    v16 = ((((unint64_t)(8 * v11) >> 3) & 0x1FFFFFFF) << 6) | 1;
  else
    v16 = 0;
  v17 = sub_1C484358C(v5 + 128, 80, 3);
  *(_QWORD *)v17 = v15;
  *(_QWORD *)(v17 + 8) = 0;
  *(_DWORD *)(v17 + 16) = v14;
  *(_BYTE *)(v17 + 20) = 0;
  *(_QWORD *)(v17 + 24) = v16;
  *(_WORD *)(v17 + 32) = v4;
  *(_BYTE *)(v17 + 34) = 2;
  result = 0.0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(v17 + 72) = 0;
  *(_WORD *)(v17 + 36) = 1;
  return result;
}

uint64_t sub_1C4990810(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t NamedMetadata;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (***v10)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v25;
  char v26;
  __int16 v27;

  *a3 = 0;
  if (!*(_BYTE *)(a1 + 327))
    return 0;
  v5 = *(_QWORD *)(*a2 + 40);
  v25 = "agx.reduce.reg.pressure";
  v27 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v5, (uint64_t)&v25);
  if (NamedMetadata)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                   + 128);
    v8 = (_QWORD *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v8 = (_QWORD *)*v8;
    if (*v8)
      return 0;
  }
  if ((*(_WORD *)(*a2 + 18) & 0x3FF0) != 0x6A0)
    return 0;
  v9 = *(_QWORD *)(*a2 + 40);
  v10 = (uint64_t (***)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))a2[43];
  v11 = sub_1C5EAC9F4(v9, (uint64_t)v10);
  if ((v11 & 0xFF00000000) == 0)
    return 0;
  *a3 = v11;
  v12 = 1;
  v13 = (**v10)(v10, 14, 0, 1, 3);
  if (v13)
  {
    v25 = "agx.max_work_group_size";
    v27 = 259;
    v14 = llvm::Module::getNamedMetadata(v9, (uint64_t)&v25);
    if (!v14)
      goto LABEL_13;
    v15 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(v14 + 48) - 8 * *(unsigned int *)(***(_QWORD ***)(v14 + 48) + 8))
                    + 128);
    v16 = (unsigned int *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u)
      v16 = *(unsigned int **)v16;
    v17 = *v16;
    if (!v17)
    {
LABEL_13:
      sub_1C5EAE59C(v9, 0, (uint64_t)&v25);
      v18 = (int)v25;
      if (v25 >= 0x80)
        v18 = 128;
      if (v26)
        v19 = v18;
      else
        v19 = 128;
      v20 = 896;
      v21 = 768;
      v22 = 640;
      v23 = 384;
      if (v19 < 0x69)
        v23 = 512;
      if (v19 >= 0x51)
        v22 = v23;
      if (v19 >= 0x45)
        v21 = v22;
      if (v19 >= 0x39)
        v20 = v21;
      if (v19 >= 0x35)
        v17 = v20;
      else
        v17 = 1024;
    }
    *a3 += ((unint64_t)(v17 + 31) >> 5) * v13;
    return 1;
  }
  return v12;
}

double sub_1C49909F8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v7;
  char v8;

  *(_DWORD *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  if (sub_1C4990810(a1, a2, a3))
  {
    sub_1C5EA54B0(*(_QWORD *)(*a2 + 40), (uint64_t)&v7);
    result = *(double *)&v7;
    *(_OWORD *)a4 = v7;
    *(_BYTE *)(a4 + 16) = v8;
  }
  return result;
}

uint64_t sub_1C4990A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  _QWORD *i;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  llvm *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  llvm *v26;
  llvm *v27;
  uint64_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  llvm *v45;
  llvm *v46;
  uint64_t v47;
  unint64_t v48;
  llvm::raw_ostream *v49;
  int v50;
  _OWORD *v51;
  _WORD *v52;
  int *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  int *v66;
  unint64_t v67;
  uint64_t v68;
  int *v69;
  llvm *v71;
  void *v72;
  uint64_t v73;
  int *v74;
  int *v75;
  unint64_t v76;
  unint64_t v77;
  llvm *v78;
  llvm *v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  unint64_t v82;
  int v83;
  void *v84;
  _WORD *v85;
  uint64_t v87;
  uint64_t v88;
  unsigned int v90;
  uint64_t v91;
  unsigned int *v92;
  int32x2_t v93;
  unsigned int v94;
  unsigned int **v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[64];
  _QWORD **v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;

  v5 = (int **)a4;
  v102 = *MEMORY[0x1E0C80C00];
  v88 = *(_QWORD *)(a1 + 56);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v96 = v98;
  v97 = 0x1000000000;
  v100 = 0;
  v101 = 0;
  v99 = &v100;
  v87 = a1 + 320;
  if (*(_QWORD *)(a1 + 328) == a1 + 320)
  {
    v55 = 0;
    v54 = 0;
    v53 = (int *)(v5 + 2);
    *v5 = (int *)(v5 + 2);
    v5[1] = (int *)0x2000000000;
    goto LABEL_90;
  }
  v6 = *(_QWORD *)(a1 + 328);
  do
  {
    v7 = v6 + 48;
    v91 = v6;
    v8 = *(_QWORD *)(v6 + 56);
    if (v8 == v6 + 48)
      goto LABEL_82;
    v90 = (v6 >> 4) ^ (v6 >> 9);
    do
    {
      v9 = *(unsigned int *)(v8 + 40);
      if (!(_DWORD)v9)
        goto LABEL_58;
      v10 = *(_QWORD *)(v8 + 32);
      v11 = v10 + 32 * v9;
      while (*(_BYTE *)v10 != 5)
      {
LABEL_31:
        v10 += 32;
        if (v10 == v11)
        {
          if (v8)
            goto LABEL_58;
          goto LABEL_61;
        }
      }
      LODWORD(v95) = *(_DWORD *)(v10 + 16);
      v12 = sub_1C4991368((uint64_t *)&v92, &v95);
      v13 = v12;
      if (v101)
      {
        for (i = v100; i; i = (_QWORD *)*i)
        {
          v15 = *((_DWORD *)i + 7);
          if ((int)v95 >= v15)
          {
            if (v15 >= (int)v95)
              goto LABEL_31;
            ++i;
          }
        }
      }
      else if ((_DWORD)v97)
      {
        v16 = v96;
        v17 = 4 * v97;
        while (*v16 != (_DWORD)v95)
        {
          ++v16;
          v17 -= 4;
          if (!v17)
            goto LABEL_21;
        }
        if (v17)
          goto LABEL_31;
      }
LABEL_21:
      v18 = **(unsigned __int16 **)(v8 + 16) - 322;
      v19 = v18 > 0x21;
      v20 = (1 << v18) & 0x2E8601743;
      v21 = v19 || v20 == 0;
      if (v21 || *(_QWORD *)(*(_QWORD *)(v8 + 32) + 144))
      {
        v22 = (llvm *)sub_1C49913E0((uint64_t)&v96, (int *)&v95);
        if (&v92[4 * v94] != (unsigned int *)v13 && v94)
        {
          LODWORD(v23) = (37 * (_DWORD)v95) & (v94 - 1);
          v24 = &v92[4 * v23];
          v25 = *v24;
          if (*v24 == (_DWORD)v95)
          {
LABEL_29:
            *v24 = 0x80000000;
            v93 = vadd_s32(v93, (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v33 = 1;
            while (v25 != 0x7FFFFFFF)
            {
              v34 = v23 + v33++;
              v23 = v34 & (v94 - 1);
              v25 = v92[4 * v23];
              if (v25 == (_DWORD)v95)
              {
                v24 = &v92[4 * v23];
                goto LABEL_29;
              }
            }
          }
        }
        if (a3)
        {
          v26 = llvm::dbgs(v22);
          v27 = v26;
          v28 = *((_QWORD *)v26 + 4);
          if ((unint64_t)(*((_QWORD *)v26 + 3) - v28) > 2)
          {
            *(_BYTE *)(v28 + 2) = 35;
            *(_WORD *)v28 = 18758;
            *((_QWORD *)v26 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v26, "FI#", 3uLL);
          }
          v29 = (int)v95;
          if ((v95 & 0x80000000) != 0)
          {
            v29 = -(uint64_t)(int)v95;
            v30 = v27;
            v31 = 1;
          }
          else
          {
            v30 = v27;
            v31 = 0;
          }
          sub_1C5E21910(v30, v29, 0, 0, v31);
          v32 = *((_QWORD *)v27 + 4);
          if ((unint64_t)(*((_QWORD *)v27 + 3) - v32) > 0x12)
          {
            *(_DWORD *)(v32 + 15) = 540697971;
            *(_OWORD *)v32 = *(_OWORD *)" disqualified use: ";
            *((_QWORD *)v27 + 4) += 19;
          }
          else
          {
            llvm::raw_ostream::write(v27, " disqualified use: ", 0x13uLL);
          }
          llvm::MachineInstr::print((llvm::MachineInstr *)v8, v27, 1, 0, 0, 1, 0);
        }
        goto LABEL_31;
      }
      v35 = *(_QWORD *)(a2 + 248);
      if (v35)
      {
        v36 = *(_DWORD *)(v35 + 176);
        if (v36)
        {
          v37 = *(_QWORD *)(v35 + 160);
          v38 = v36 - 1;
          v39 = (v36 - 1) & v90;
          v40 = *(_QWORD *)(v37 + 16 * v39);
          if (v40 == v91)
          {
LABEL_52:
            v41 = *(unsigned int *)(v37 + 16 * v39 + 8);
            if (v41 != 0xFFFFFFFFLL)
            {
              v42 = *(_QWORD *)(*(_QWORD *)(v35 + 8) + 24 * v41 + 16);
              goto LABEL_54;
            }
          }
          else
          {
            v43 = 1;
            while (v40 != -4096)
            {
              v44 = v39 + v43++;
              v39 = v44 & v38;
              v40 = *(_QWORD *)(v37 + 16 * v39);
              if (v40 == v91)
                goto LABEL_52;
            }
          }
        }
      }
      v42 = 0;
LABEL_54:
      if (&v92[4 * v94] == (unsigned int *)v12)
      {
        v12 = sub_1C49916CC((uint64_t)&v92, &v95);
        *((_QWORD *)v12 + 1) = v42;
        if (!a3)
          goto LABEL_58;
      }
      else
      {
        *((_QWORD *)v12 + 1) += v42;
        if (!a3)
          goto LABEL_58;
      }
      v45 = llvm::dbgs((llvm *)v12);
      v46 = v45;
      v47 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v47) > 2)
      {
        *(_BYTE *)(v47 + 2) = 35;
        *(_WORD *)v47 = 18758;
        *((_QWORD *)v45 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v45, "FI#", 3uLL);
      }
      v48 = (int)v95;
      if ((v95 & 0x80000000) != 0)
      {
        v48 = -(uint64_t)(int)v95;
        v49 = v46;
        v50 = 1;
      }
      else
      {
        v49 = v46;
        v50 = 0;
      }
      sub_1C5E21910(v49, v48, 0, 0, v50);
      v51 = (_OWORD *)*((_QWORD *)v46 + 4);
      if (*((_QWORD *)v46 + 3) - (_QWORD)v51 > 0xFuLL)
      {
        *v51 = *(_OWORD *)", ExecutionRate=";
        *((_QWORD *)v46 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v46, ", ExecutionRate=", 0x10uLL);
      }
      sub_1C5E21910(v46, v42, 0, 0, 0);
      v52 = (_WORD *)*((_QWORD *)v46 + 4);
      if (*((_QWORD *)v46 + 3) - (_QWORD)v52 > 1uLL)
      {
        *v52 = 8250;
        *((_QWORD *)v46 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v46, ": ", 2uLL);
      }
      llvm::MachineInstr::print((llvm::MachineInstr *)v8, v46, 1, 0, 0, 1, 0);
LABEL_58:
      if ((*(_BYTE *)v8 & 4) == 0)
      {
LABEL_61:
        while ((*(_WORD *)(v8 + 44) & 8) != 0)
          v8 = *(_QWORD *)(v8 + 8);
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v7);
LABEL_82:
    v6 = *(_QWORD *)(v91 + 8);
  }
  while (v6 != v87);
  v5 = (int **)a4;
  v53 = (int *)(a4 + 2);
  *a4 = a4 + 2;
  a4[1] = 0x2000000000;
  v54 = (uint64_t)v92;
  v55 = v94;
  if (!v93.i32[0])
  {
LABEL_90:
    v58 = (unsigned int *)(v54 + 16 * v55);
    v56 = v58;
    goto LABEL_91;
  }
  v56 = &v92[4 * v94];
  if (v94)
  {
    v57 = 0;
    while (v92[v57] - 0x7FFFFFFF <= 1)
    {
      v57 += 4;
      if (4 * v94 == v57)
      {
        v58 = &v92[4 * v94];
        goto LABEL_91;
      }
    }
    v58 = &v92[v57];
  }
  else
  {
    v58 = v92;
  }
LABEL_91:
  v59 = (unsigned int *)(v54 + 16 * v55);
  if (v58 == v59)
  {
    v95 = &v92;
    v66 = v53;
LABEL_105:
    v68 = 0;
    goto LABEL_106;
  }
  do
  {
    v60 = *v58;
    v61 = (*(_DWORD *)(*(_QWORD *)(v88 + 8) + 40 * (*(_DWORD *)(v88 + 32) + *v58) + 8) + 3) & 0xFFFFFFFC;
    v62 = *((unsigned int *)v5 + 2);
    if (v62 >= *((_DWORD *)v5 + 3))
    {
      sub_1C614C7CC(v5, v60, v61);
    }
    else
    {
      v63 = (unsigned int *)&(*v5)[2 * v62];
      *v63 = v60;
      v63[1] = v61;
      *((_DWORD *)v5 + 2) = v62 + 1;
    }
    v64 = v58 + 4;
    while (v64 != v56)
    {
      v65 = *v64;
      v64 += 4;
      if (v65 - 0x7FFFFFFF >= 2)
      {
        v58 = v64 - 4;
        goto LABEL_99;
      }
    }
    v58 = v56;
LABEL_99:
    ;
  }
  while (v58 != v59);
  v66 = *v5;
  v67 = *((unsigned int *)v5 + 2);
  v53 = &(*v5)[2 * v67];
  v95 = &v92;
  if (!(_DWORD)v67)
    goto LABEL_105;
  v68 = 126 - 2 * __clz(v67);
LABEL_106:
  v69 = sub_1C4991AB8(v66, v53, (uint64_t **)&v95, v68, 1);
  if ((a3 & 1) != 0)
  {
    v71 = llvm::dbgs((llvm *)v69);
    v72 = (void *)*((_QWORD *)v71 + 4);
    if (*((_QWORD *)v71 + 3) - (_QWORD)v72 > 0x14uLL)
    {
      qmemcpy(v72, "LM Spill candidates:\n", 21);
      *((_QWORD *)v71 + 4) += 21;
    }
    else
    {
      v71 = llvm::raw_ostream::write(v71, "LM Spill candidates:\n", 0x15uLL);
    }
    v73 = *((unsigned int *)v5 + 2);
    if ((_DWORD)v73)
    {
      v74 = *v5;
      v75 = &v74[2 * v73];
      do
      {
        v76 = v74[1];
        v77 = *v74;
        v78 = llvm::dbgs(v71);
        v79 = v78;
        v80 = *((_QWORD *)v78 + 4);
        if ((unint64_t)(*((_QWORD *)v78 + 3) - v80) > 0xA)
        {
          *(_DWORD *)(v80 + 7) = 592004640;
          *(_QWORD *)v80 = *(_QWORD *)"  Spill FI#";
          *((_QWORD *)v78 + 4) += 11;
          if ((v77 & 0x80000000) != 0)
          {
LABEL_126:
            v82 = -(uint64_t)v77;
            v81 = v79;
            v83 = 1;
            goto LABEL_119;
          }
        }
        else
        {
          llvm::raw_ostream::write(v78, "  Spill FI#", 0xBuLL);
          if ((v77 & 0x80000000) != 0)
            goto LABEL_126;
        }
        v81 = v79;
        v82 = v77;
        v83 = 0;
LABEL_119:
        sub_1C5E21910(v81, v82, 0, 0, v83);
        v84 = (void *)*((_QWORD *)v79 + 4);
        if (*((_QWORD *)v79 + 3) - (_QWORD)v84 > 0xCuLL)
        {
          qmemcpy(v84, " (UsageRate: ", 13);
          *((_QWORD *)v79 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v79, " (UsageRate: ", 0xDuLL);
        }
        v71 = sub_1C5E21910(v79, v76, 0, 0, 0);
        v85 = (_WORD *)*((_QWORD *)v79 + 4);
        if (*((_QWORD *)v79 + 3) - (_QWORD)v85 > 1uLL)
        {
          *v85 = 2601;
          *((_QWORD *)v79 + 4) += 2;
        }
        else
        {
          v71 = llvm::raw_ostream::write(v79, ")\n", 2uLL);
        }
        v74 += 2;
      }
      while (v74 != v75);
    }
  }
  sub_1C61247C0((uint64_t)&v99, v100);
  if (v96 != v98)
    free(v96);
  return MEMORY[0x1CAA32FB4](v92, 8);
}

int *sub_1C4991368(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 16 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != 0x7FFFFFFF)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 16 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 16 * v4);
    }
  }
  return (int *)(v2 + 16 * v3);
}

unint64_t sub_1C49913E0(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;

  if (*(_QWORD *)(a1 + 96))
  {
    sub_1C49915F0((uint64_t **)(a1 + 80), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 0xF)
    {
      do
      {
        v11 = (int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C49915F0((uint64_t **)(a1 + 80), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C49915F0((uint64_t **)(a1 + 80), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1C49914F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a1 + 128, a1);
    *(_QWORD *)(a1 + 48) = v2;
  }
  result = *(unsigned int *)(v2 + 460);
  if ((_DWORD)result == -1)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
    v5 = *(_QWORD *)(v4 + 264)
       + 24 * (*(_DWORD *)(v4 + 272) * ((*(_QWORD *)(v4 + 248) - *(_QWORD *)(v4 + 240)) >> 3) + 17);
    result = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(a1 + 56), (unint64_t)*(unsigned int *)(v5 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v5 + 8) >> 3), 0, 0, 0);
    v6 = *(_QWORD *)(a1 + 48);
    if (!v6)
    {
      v7 = result;
      v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a1 + 128, a1);
      result = v7;
      *(_QWORD *)(a1 + 48) = v6;
    }
    *(_DWORD *)(v6 + 460) = result;
  }
  return result;
}

uint64_t **sub_1C49915F0(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x20uLL);
    *((_DWORD *)v8 + 7) = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

_DWORD *sub_1C49916CC(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C499178C(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == 0x80000000;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_1C499178C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C499191C(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != 0x7FFFFFFF)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == 0x80000000;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C499191C(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != 0x7FFFFFFF)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == 0x80000000;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C499191C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C49919D4(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = 0x7FFFFFFF;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C49919D4(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = 0x7FFFFFFF;
      v6 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    v7 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[4 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != 0x7FFFFFFF)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == 0x80000000;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[4 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_7;
        }
        if (v12)
          v10 = v12;
      }
LABEL_7:
      *v10 = v7;
      *((_QWORD *)v10 + 1) = *((_QWORD *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

int *sub_1C4991AB8(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v8;
  int *j;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t m;
  int v22;
  int *v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  int v29;
  int *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int *v35;
  int *v36;
  int v37;
  int *v38;
  int *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int *v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  int *v49;
  int *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int *v54;
  int *v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  BOOL v59;
  int v60;
  int v61;
  int *v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  int *v66;
  unint64_t v67;
  unint64_t v68;
  int *v69;
  unint64_t v70;
  unint64_t v71;
  int *k;
  int *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  int *v79;
  int *v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int *v84;
  unint64_t v85;
  unint64_t v86;
  int *v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  int *v92;
  BOOL v94;
  uint64_t v95;
  int *v96;
  int *v97;
  int *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  int *v104;
  uint64_t v105;
  int *v106;
  unint64_t v107;
  unint64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  int *v112;
  int *v113;
  int *v114;
  unint64_t v115;
  unint64_t v116;
  int *v117;
  int *v118;
  unint64_t v119;
  unint64_t v120;
  int *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  int *v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  int *v130;
  unint64_t v131;
  unint64_t v132;
  int *v133;
  uint64_t v134;
  int *v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int *v145;
  int *v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  int v150;
  int *v151;
  unint64_t v152;
  int v153;
  int *v154;
  unint64_t v155;
  unint64_t v156;
  int *v158;
  int v159;
  int *v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  int v164;
  int *i;
  int v166;
  int *v167;
  unint64_t v168;
  unint64_t v169;
  int *v170;
  int *v171;
  int v173;
  uint64_t v174;
  int v175;
  int *v176;
  int64_t v177;
  uint64_t v178;
  int *v179;
  int *v180;
  int v181;
  int v182;
  int v183;

  v8 = result;
LABEL_2:
  v176 = a2 - 2;
  v179 = a2;
  v170 = a2 - 6;
  v171 = a2 - 4;
  j = v8;
  while (2)
  {
    v8 = j;
    v10 = (char *)a2 - (char *)j;
    v11 = ((char *)a2 - (char *)j) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v183 = *(a2 - 2);
        v182 = *j;
        v87 = sub_1C4991368(*a3, &v183);
        result = sub_1C4991368(*a3, &v182);
        v88 = *((_QWORD *)v87 + 1);
        v89 = *((_QWORD *)result + 1);
        if (v88 > v89 || v88 == v89 && v183 < v182)
        {
          v90 = *j;
          *j = *(a2 - 2);
          *(a2 - 2) = v90;
          v91 = j[1];
          j[1] = *(a2 - 1);
          *(a2 - 1) = v91;
        }
        return result;
      case 3uLL:
        return sub_1C4992A54(j, j + 2, v176, a3);
      case 4uLL:
        return sub_1C4992F28(j, j + 2, j + 4, v176, a3);
      case 5uLL:
        return sub_1C499284C(j, j + 2, j + 4, j + 6, v176, a3);
      default:
        if (v10 <= 191)
        {
          v92 = j + 2;
          v94 = j == a2 || v92 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v94)
            {
              v95 = 0;
              v96 = j;
              do
              {
                v97 = v96;
                v96 = v92;
                v183 = v97[2];
                v182 = *v97;
                v98 = sub_1C4991368(*a3, &v183);
                result = sub_1C4991368(*a3, &v182);
                v99 = *((_QWORD *)v98 + 1);
                v100 = *((_QWORD *)result + 1);
                if (v99 > v100 || v99 == v100 && v183 < v182)
                {
                  v101 = v97[2];
                  v102 = v97[3];
                  v103 = v97[1];
                  v97[2] = *v97;
                  v96[1] = v103;
                  v104 = j;
                  if (v97 != j)
                  {
                    v105 = v95;
                    while (1)
                    {
                      v183 = v101;
                      v182 = *(int *)((char *)j + v105 - 8);
                      v106 = sub_1C4991368(*a3, &v183);
                      result = sub_1C4991368(*a3, &v182);
                      v107 = *((_QWORD *)v106 + 1);
                      v108 = *((_QWORD *)result + 1);
                      if (v107 <= v108 && (v107 != v108 || v183 >= v182))
                        break;
                      *(_QWORD *)((char *)j + v105) = *(_QWORD *)((char *)j + v105 - 8);
                      v105 -= 8;
                      if (!v105)
                      {
                        v104 = j;
                        goto LABEL_110;
                      }
                    }
                    v104 = (int *)((char *)j + v105);
                  }
LABEL_110:
                  *v104 = v101;
                  v104[1] = v102;
                }
                v92 = v96 + 2;
                v95 += 8;
              }
              while (v96 + 2 != v179);
            }
          }
          else if (!v94)
          {
            v158 = j + 1;
            do
            {
              v183 = v8[2];
              v159 = *v8;
              v8 = v92;
              v182 = v159;
              v160 = sub_1C4991368(*a3, &v183);
              result = sub_1C4991368(*a3, &v182);
              v161 = *((_QWORD *)v160 + 1);
              v162 = *((_QWORD *)result + 1);
              if (v161 > v162 || v161 == v162 && v183 < v182)
              {
                v163 = *v8;
                v164 = v8[1];
                for (i = v158; ; i -= 2)
                {
                  v166 = *i;
                  i[1] = *(i - 1);
                  i[2] = v166;
                  v183 = v163;
                  v182 = *(i - 3);
                  v167 = sub_1C4991368(*a3, &v183);
                  result = sub_1C4991368(*a3, &v182);
                  v168 = *((_QWORD *)v167 + 1);
                  v169 = *((_QWORD *)result + 1);
                  if (v168 <= v169 && (v168 != v169 || v183 >= v182))
                    break;
                }
                *(i - 1) = v163;
                *i = v164;
              }
              v92 = v8 + 2;
              v158 += 2;
            }
            while (v8 + 2 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (j != a2)
          {
            v109 = (v11 - 2) >> 1;
            v177 = v109;
            do
            {
              v110 = v109;
              if (v177 >= v109)
              {
                v111 = (2 * v109) | 1;
                v112 = &v8[2 * v111];
                if (2 * v109 + 2 < (uint64_t)v11)
                {
                  v183 = *v112;
                  v182 = v112[2];
                  v113 = sub_1C4991368(*a3, &v183);
                  v114 = sub_1C4991368(*a3, &v182);
                  v115 = *((_QWORD *)v113 + 1);
                  v116 = *((_QWORD *)v114 + 1);
                  if (v115 > v116 || v115 == v116 && v183 < v182)
                  {
                    v112 += 2;
                    v111 = 2 * v110 + 2;
                  }
                }
                v117 = &v8[2 * v110];
                v183 = *v112;
                v182 = *v117;
                v118 = sub_1C4991368(*a3, &v183);
                result = sub_1C4991368(*a3, &v182);
                v119 = *((_QWORD *)v118 + 1);
                v120 = *((_QWORD *)result + 1);
                if (v119 <= v120 && (v119 != v120 || v183 >= v182))
                {
                  v121 = &v8[2 * v110];
                  v173 = v121[1];
                  v175 = *v121;
                  *v117 = *v112;
                  v121[1] = v112[1];
                  if (v177 >= v111)
                  {
                    while (1)
                    {
                      v123 = 2 * v111;
                      v111 = (2 * v111) | 1;
                      v122 = &v8[2 * v111];
                      v124 = v123 + 2;
                      if (v123 + 2 < (uint64_t)v11)
                      {
                        v183 = *v122;
                        v182 = v122[2];
                        v125 = sub_1C4991368(*a3, &v183);
                        v126 = sub_1C4991368(*a3, &v182);
                        v127 = *((_QWORD *)v125 + 1);
                        v128 = *((_QWORD *)v126 + 1);
                        if (v127 > v128 || v127 == v128 && v183 < v182)
                        {
                          v122 += 2;
                          v111 = v124;
                        }
                      }
                      v129 = *v122;
                      v182 = v175;
                      v183 = v129;
                      v130 = sub_1C4991368(*a3, &v183);
                      result = sub_1C4991368(*a3, &v182);
                      v131 = *((_QWORD *)v130 + 1);
                      v132 = *((_QWORD *)result + 1);
                      if (v131 > v132 || v131 == v132 && v183 < v182)
                        break;
                      *v112 = *v122;
                      v112[1] = v122[1];
                      v112 = v122;
                      if (v177 < v111)
                        goto LABEL_126;
                    }
                  }
                  v122 = v112;
LABEL_126:
                  *v122 = v175;
                  v122[1] = v173;
                }
              }
              v109 = v110 - 1;
            }
            while (v110);
            v133 = v179;
            do
            {
              v134 = 0;
              v178 = *(_QWORD *)v8;
              v180 = v133;
              v135 = v8;
              do
              {
                v136 = v135;
                v135 += 2 * v134 + 2;
                v137 = 2 * v134;
                v134 = (2 * v134) | 1;
                v138 = v137 + 2;
                if (v137 + 2 < (uint64_t)v11)
                {
                  v183 = *v135;
                  v182 = v135[2];
                  v139 = sub_1C4991368(*a3, &v183);
                  result = sub_1C4991368(*a3, &v182);
                  v140 = *((_QWORD *)v139 + 1);
                  v141 = *((_QWORD *)result + 1);
                  if (v140 > v141 || v140 == v141 && v183 < v182)
                  {
                    v135 += 2;
                    v134 = v138;
                  }
                }
                *v136 = *v135;
                v136[1] = v135[1];
              }
              while (v134 <= (uint64_t)((v11 - 2) >> 1));
              v133 = v180 - 2;
              if (v135 == v180 - 2)
              {
                *(_QWORD *)v135 = v178;
              }
              else
              {
                *v135 = *(v180 - 2);
                v135[1] = *(v180 - 1);
                *((_QWORD *)v180 - 1) = v178;
                v142 = (char *)v135 - (char *)v8 + 8;
                if (v142 >= 9)
                {
                  v143 = ((unint64_t)v142 >> 3) - 2;
                  v144 = v143 >> 1;
                  v145 = &v8[2 * (v143 >> 1)];
                  v183 = *v145;
                  v182 = *v135;
                  v146 = sub_1C4991368(*a3, &v183);
                  result = sub_1C4991368(*a3, &v182);
                  v147 = *((_QWORD *)v146 + 1);
                  v148 = *((_QWORD *)result + 1);
                  if (v147 > v148 || v147 == v148 && v183 < v182)
                  {
                    v150 = *v135;
                    v149 = v135[1];
                    *v135 = *v145;
                    v135[1] = v8[2 * v144 + 1];
                    v181 = v149;
                    if (v143 >= 2)
                    {
                      while (1)
                      {
                        v152 = v144 - 1;
                        v144 = (v144 - 1) >> 1;
                        v151 = &v8[2 * v144];
                        v153 = *v151;
                        v182 = v150;
                        v183 = v153;
                        v154 = sub_1C4991368(*a3, &v183);
                        result = sub_1C4991368(*a3, &v182);
                        v155 = *((_QWORD *)v154 + 1);
                        v156 = *((_QWORD *)result + 1);
                        if (v155 <= v156 && (v155 != v156 || v183 >= v182))
                          break;
                        *v145 = *v151;
                        v145[1] = v8[2 * v144 + 1];
                        v145 = &v8[2 * v144];
                        if (v152 < 2)
                          goto LABEL_157;
                      }
                    }
                    v151 = v145;
LABEL_157:
                    *v151 = v150;
                    v151[1] = v181;
                  }
                }
              }
            }
            while ((uint64_t)v11-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &j[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1C4992A54(&v8[2 * (v11 >> 1)], v8, v176, a3);
        }
        else
        {
          sub_1C4992A54(v8, &v8[2 * (v11 >> 1)], v176, a3);
          sub_1C4992A54(v8 + 2, v13 - 2, v171, a3);
          sub_1C4992A54(v8 + 4, &v8[2 * v12 + 2], v170, a3);
          sub_1C4992A54(v13 - 2, &v8[2 * (v11 >> 1)], &v8[2 * v12 + 2], a3);
          v14 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v183 = *(v8 - 2);
          v182 = *v8;
          v15 = sub_1C4991368(*a3, &v183);
          v16 = sub_1C4991368(*a3, &v182);
          v17 = *((_QWORD *)v15 + 1);
          v18 = *((_QWORD *)v16 + 1);
          if (v17 <= v18 && (v17 != v18 || v183 >= v182))
          {
            v61 = *v8;
            v60 = v8[1];
            v183 = *v8;
            v182 = *v176;
            v62 = sub_1C4991368(*a3, &v183);
            result = sub_1C4991368(*a3, &v182);
            v63 = *((_QWORD *)v62 + 1);
            v64 = *((_QWORD *)result + 1);
            if (v63 > v64 || v63 == v64 && v183 < v182)
            {
              v183 = v61;
              j = v8;
              while (1)
              {
                v65 = j[2];
                j += 2;
                v182 = v65;
                v66 = sub_1C4991368(*a3, &v183);
                result = sub_1C4991368(*a3, &v182);
                v67 = *((_QWORD *)v66 + 1);
                v68 = *((_QWORD *)result + 1);
                if (v67 > v68 || v67 == v68 && v183 < v182)
                  break;
                v183 = v61;
              }
            }
            else
            {
              for (j = v8 + 2; j < v179; j += 2)
              {
                v183 = v61;
                v182 = *j;
                v69 = sub_1C4991368(*a3, &v183);
                result = sub_1C4991368(*a3, &v182);
                v70 = *((_QWORD *)v69 + 1);
                v71 = *((_QWORD *)result + 1);
                if (v70 > v71 || v70 == v71 && v183 < v182)
                  break;
              }
            }
            k = v179;
            if (j < v179)
            {
              for (k = v176; ; k -= 2)
              {
                v183 = v61;
                v182 = *k;
                v73 = sub_1C4991368(*a3, &v183);
                result = sub_1C4991368(*a3, &v182);
                v74 = *((_QWORD *)v73 + 1);
                v75 = *((_QWORD *)result + 1);
                if (v74 <= v75 && (v74 != v75 || v183 >= v182))
                  break;
              }
            }
            while (j < k)
            {
              v76 = *j;
              *j = *k;
              *k = v76;
              v77 = j[1];
              j[1] = k[1];
              k[1] = v77;
              do
              {
                v183 = v61;
                v78 = j[2];
                j += 2;
                v182 = v78;
                v79 = sub_1C4991368(*a3, &v183);
                v80 = sub_1C4991368(*a3, &v182);
                v81 = *((_QWORD *)v79 + 1);
                v82 = *((_QWORD *)v80 + 1);
              }
              while (v81 <= v82 && (v81 != v82 || v183 >= v182));
              do
              {
                do
                {
                  v183 = v61;
                  v83 = *(k - 2);
                  k -= 2;
                  v182 = v83;
                  v84 = sub_1C4991368(*a3, &v183);
                  result = sub_1C4991368(*a3, &v182);
                  v85 = *((_QWORD *)v84 + 1);
                  v86 = *((_QWORD *)result + 1);
                }
                while (v85 > v86);
              }
              while (v85 == v86 && v183 < v182);
            }
            if (j - 2 != v8)
            {
              *v8 = *(j - 2);
              v8[1] = *(j - 1);
            }
            a5 = 0;
            *(j - 2) = v61;
            *(j - 1) = v60;
            a2 = v179;
            continue;
          }
        }
        v19 = *v8;
        v20 = v8[1];
        for (m = 2; ; m += 2)
        {
          v22 = v8[m];
          v182 = v19;
          v183 = v22;
          v23 = sub_1C4991368(*a3, &v183);
          v24 = sub_1C4991368(*a3, &v182);
          v25 = *((_QWORD *)v23 + 1);
          v26 = *((_QWORD *)v24 + 1);
          if (v25 <= v26 && (v25 != v26 || v183 >= v182))
            break;
        }
        v174 = a4;
        v27 = &v8[m];
        if (m == 2)
        {
          v28 = v179;
          if (v27 < v179)
          {
            v28 = v176;
            v37 = *v176;
            v182 = v19;
            v183 = v37;
            v38 = sub_1C4991368(*a3, &v183);
            v39 = sub_1C4991368(*a3, &v182);
            v40 = *((_QWORD *)v38 + 1);
            v41 = *((_QWORD *)v39 + 1);
            if (v40 <= v41)
            {
              v28 = v176;
              do
              {
                if (v40 == v41)
                {
                  if (v27 >= v28 || v183 < v182)
                    break;
                }
                else if (v27 >= v28)
                {
                  break;
                }
                v42 = *(v28 - 2);
                v28 -= 2;
                v182 = v19;
                v183 = v42;
                v43 = sub_1C4991368(*a3, &v183);
                v44 = sub_1C4991368(*a3, &v182);
                v40 = *((_QWORD *)v43 + 1);
                v41 = *((_QWORD *)v44 + 1);
              }
              while (v40 <= v41);
            }
          }
        }
        else
        {
          v28 = v176;
          v29 = *v176;
          v182 = v19;
          v183 = v29;
          v30 = sub_1C4991368(*a3, &v183);
          v31 = sub_1C4991368(*a3, &v182);
          v32 = *((_QWORD *)v30 + 1);
          v33 = *((_QWORD *)v31 + 1);
          if (v32 <= v33)
          {
            v28 = v176;
            do
            {
              if (v32 == v33 && v183 < v182)
                break;
              v34 = *(v28 - 2);
              v28 -= 2;
              v182 = v19;
              v183 = v34;
              v35 = sub_1C4991368(*a3, &v183);
              v36 = sub_1C4991368(*a3, &v182);
              v32 = *((_QWORD *)v35 + 1);
              v33 = *((_QWORD *)v36 + 1);
            }
            while (v32 <= v33);
          }
        }
        j = &v8[m];
        if (v27 < v28)
        {
          v45 = v28;
          do
          {
            v46 = *j;
            *j = *v45;
            *v45 = v46;
            v47 = j[1];
            j[1] = v45[1];
            v45[1] = v47;
            do
            {
              do
              {
                j += 2;
                v48 = *j;
                v182 = v19;
                v183 = v48;
                v49 = sub_1C4991368(*a3, &v183);
                v50 = sub_1C4991368(*a3, &v182);
                v51 = *((_QWORD *)v49 + 1);
                v52 = *((_QWORD *)v50 + 1);
              }
              while (v51 > v52);
            }
            while (v51 == v52 && v183 < v182);
            do
            {
              v53 = *(v45 - 2);
              v45 -= 2;
              v182 = v19;
              v183 = v53;
              v54 = sub_1C4991368(*a3, &v183);
              v55 = sub_1C4991368(*a3, &v182);
              v56 = *((_QWORD *)v54 + 1);
              v57 = *((_QWORD *)v55 + 1);
            }
            while (v56 <= v57 && (v56 != v57 || v183 >= v182));
          }
          while (j < v45);
        }
        if (j - 2 != v8)
        {
          *v8 = *(j - 2);
          v8[1] = *(j - 1);
        }
        *(j - 2) = v19;
        *(j - 1) = v20;
        v58 = v27 >= v28;
        a2 = v179;
        a4 = v174;
        if (!v58)
        {
LABEL_50:
          result = (int *)sub_1C4991AB8(v8, j - 2, a3, v174, a5 & 1);
          a5 = 0;
          continue;
        }
        v59 = sub_1C4992CA4(v8, j - 2, a3);
        result = (int *)sub_1C4992CA4(j, v179, a3);
        if (!(_DWORD)result)
        {
          if (v59)
            continue;
          goto LABEL_50;
        }
        a2 = j - 2;
        if (!v59)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_1C499284C(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t **a6)
{
  int v12;
  int *v13;
  int *result;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;

  sub_1C4992F28(a1, a2, a3, a4, a6);
  v12 = *a5;
  v37 = *a4;
  v38 = v12;
  v13 = sub_1C4991368(*a6, &v38);
  result = sub_1C4991368(*a6, &v37);
  v15 = *((_QWORD *)v13 + 1);
  v16 = *((_QWORD *)result + 1);
  if (v15 > v16 || v15 == v16 && v38 < v37)
  {
    v17 = *a4;
    *a4 = *a5;
    *a5 = v17;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = *a4;
    v37 = *a3;
    v38 = v19;
    v20 = sub_1C4991368(*a6, &v38);
    result = sub_1C4991368(*a6, &v37);
    v21 = *((_QWORD *)v20 + 1);
    v22 = *((_QWORD *)result + 1);
    if (v21 > v22 || v21 == v22 && v38 < v37)
    {
      v23 = *a3;
      *a3 = *a4;
      *a4 = v23;
      v24 = a3[1];
      a3[1] = a4[1];
      a4[1] = v24;
      v25 = *a3;
      v37 = *a2;
      v38 = v25;
      v26 = sub_1C4991368(*a6, &v38);
      result = sub_1C4991368(*a6, &v37);
      v27 = *((_QWORD *)v26 + 1);
      v28 = *((_QWORD *)result + 1);
      if (v27 > v28 || v27 == v28 && v38 < v37)
      {
        v29 = *a2;
        *a2 = *a3;
        *a3 = v29;
        v30 = a2[1];
        a2[1] = a3[1];
        a3[1] = v30;
        v31 = *a2;
        v37 = *a1;
        v38 = v31;
        v32 = sub_1C4991368(*a6, &v38);
        result = sub_1C4991368(*a6, &v37);
        v33 = *((_QWORD *)v32 + 1);
        v34 = *((_QWORD *)result + 1);
        if (v33 > v34 || v33 == v34 && v38 < v37)
        {
          v35 = *a1;
          *a1 = *a2;
          *a2 = v35;
          v36 = a1[1];
          a1[1] = a2[1];
          a2[1] = v36;
        }
      }
    }
  }
  return result;
}

int *sub_1C4992A54(int *a1, int *a2, int *a3, uint64_t **a4)
{
  int v8;
  int *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int *v14;
  int *result;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;

  v8 = *a2;
  v39 = *a1;
  v40 = v8;
  v9 = sub_1C4991368(*a4, &v40);
  v10 = sub_1C4991368(*a4, &v39);
  v11 = *((_QWORD *)v9 + 1);
  v12 = *((_QWORD *)v10 + 1);
  if (v11 > v12 || v11 == v12 && v40 < v39)
  {
    v13 = *a3;
    v39 = *a2;
    v40 = v13;
    v14 = sub_1C4991368(*a4, &v40);
    result = sub_1C4991368(*a4, &v39);
    v16 = *((_QWORD *)v14 + 1);
    v17 = *((_QWORD *)result + 1);
    if (v16 > v17 || v16 == v17 && v40 < v39)
    {
      v18 = *a1;
      *a1 = *a3;
      *a3 = v18;
      v19 = a1[1];
      a1[1] = a3[1];
LABEL_17:
      a3[1] = v19;
      return result;
    }
    v32 = *a1;
    *a1 = *a2;
    *a2 = v32;
    v33 = a1[1];
    a1[1] = a2[1];
    a2[1] = v33;
    v34 = *a3;
    v39 = *a2;
    v40 = v34;
    v35 = sub_1C4991368(*a4, &v40);
    result = sub_1C4991368(*a4, &v39);
    v36 = *((_QWORD *)v35 + 1);
    v37 = *((_QWORD *)result + 1);
    if (v36 > v37 || v36 == v37 && v40 < v39)
    {
      v38 = *a2;
      *a2 = *a3;
      *a3 = v38;
      v19 = a2[1];
      a2[1] = a3[1];
      goto LABEL_17;
    }
  }
  else
  {
    v20 = *a3;
    v39 = *a2;
    v40 = v20;
    v21 = sub_1C4991368(*a4, &v40);
    result = sub_1C4991368(*a4, &v39);
    v22 = *((_QWORD *)v21 + 1);
    v23 = *((_QWORD *)result + 1);
    if (v22 > v23 || v22 == v23 && v40 < v39)
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v26 = *a2;
      v39 = *a1;
      v40 = v26;
      v27 = sub_1C4991368(*a4, &v40);
      result = sub_1C4991368(*a4, &v39);
      v28 = *((_QWORD *)v27 + 1);
      v29 = *((_QWORD *)result + 1);
      if (v28 > v29 || v28 == v29 && v40 < v39)
      {
        v30 = *a1;
        *a1 = *a2;
        *a2 = v30;
        v31 = a1[1];
        a1[1] = a2[1];
        a2[1] = v31;
      }
    }
  }
  return result;
}

BOOL sub_1C4992CA4(int *a1, int *a2, uint64_t **a3)
{
  int *v4;
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int *v25;
  uint64_t v26;
  int *v27;
  int *v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  int v32;
  int v33;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 2);
      v32 = *a1;
      v33 = v8;
      v9 = sub_1C4991368(*a3, &v33);
      v10 = sub_1C4991368(*a3, &v32);
      v11 = *((_QWORD *)v9 + 1);
      v12 = *((_QWORD *)v10 + 1);
      if (v11 > v12 || v11 == v12 && v33 < v32)
      {
        v13 = *a1;
        *a1 = *(v4 - 2);
        *(v4 - 2) = v13;
        v14 = a1[1];
        a1[1] = *(v4 - 1);
        *(v4 - 1) = v14;
      }
      return 1;
    case 3:
      sub_1C4992A54(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1C4992F28(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1C499284C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v15 = a1 + 4;
      sub_1C4992A54(a1, a1 + 2, a1 + 4, a3);
      v16 = a1 + 6;
      if (a1 + 6 == v4)
        return 1;
      v17 = 0;
      v18 = 0;
      v31 = v4;
      break;
  }
  while (1)
  {
    v33 = *v16;
    v32 = *v15;
    v19 = sub_1C4991368(*a3, &v33);
    v20 = sub_1C4991368(*a3, &v32);
    v21 = *((_QWORD *)v19 + 1);
    v22 = *((_QWORD *)v20 + 1);
    if (v21 > v22 || v21 == v22 && v33 < v32)
    {
      v23 = *v16;
      v24 = v16[1];
      *v16 = *v15;
      v16[1] = v15[1];
      v25 = a1;
      if (v15 != a1)
      {
        v26 = v17;
        while (1)
        {
          v32 = *(int *)((char *)a1 + v26 + 8);
          v33 = v23;
          v27 = sub_1C4991368(*a3, &v33);
          v28 = sub_1C4991368(*a3, &v32);
          v29 = *((_QWORD *)v27 + 1);
          v30 = *((_QWORD *)v28 + 1);
          if (v29 <= v30 && (v29 != v30 || v33 >= v32))
            break;
          *(_QWORD *)((char *)a1 + v26 + 16) = *(_QWORD *)((char *)a1 + v26 + 8);
          v26 -= 8;
          if (v26 == -16)
          {
            v25 = a1;
            goto LABEL_19;
          }
        }
        v25 = (int *)((char *)a1 + v26 + 16);
LABEL_19:
        v4 = v31;
      }
      *v25 = v23;
      v25[1] = v24;
      if (++v18 == 8)
        return v16 + 2 == v4;
    }
    v15 = v16;
    v17 += 8;
    v16 += 2;
    if (v16 == v4)
      return 1;
  }
}

int *sub_1C4992F28(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int v10;
  int *v11;
  int *result;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;

  sub_1C4992A54(a1, a2, a3, a5);
  v10 = *a4;
  v29 = *a3;
  v30 = v10;
  v11 = sub_1C4991368(*a5, &v30);
  result = sub_1C4991368(*a5, &v29);
  v13 = *((_QWORD *)v11 + 1);
  v14 = *((_QWORD *)result + 1);
  if (v13 > v14 || v13 == v14 && v30 < v29)
  {
    v15 = *a3;
    *a3 = *a4;
    *a4 = v15;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a3;
    v29 = *a2;
    v30 = v17;
    v18 = sub_1C4991368(*a5, &v30);
    result = sub_1C4991368(*a5, &v29);
    v19 = *((_QWORD *)v18 + 1);
    v20 = *((_QWORD *)result + 1);
    if (v19 > v20 || v19 == v20 && v30 < v29)
    {
      v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      v22 = a2[1];
      a2[1] = a3[1];
      a3[1] = v22;
      v23 = *a2;
      v29 = *a1;
      v30 = v23;
      v24 = sub_1C4991368(*a5, &v30);
      result = sub_1C4991368(*a5, &v29);
      v25 = *((_QWORD *)v24 + 1);
      v26 = *((_QWORD *)result + 1);
      if (v25 > v26 || v25 == v26 && v30 < v29)
      {
        v27 = *a1;
        *a1 = *a2;
        *a2 = v27;
        v28 = a1[1];
        a1[1] = a2[1];
        a2[1] = v28;
      }
    }
  }
  return result;
}

void sub_1C49930B4(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4993148(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49931D4()
{
  return "AGX2 nopifier pass";
}

void sub_1C49931E4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4993208(uint64_t a1, llvm::MachineFunction *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  char *v39;
  uint64_t i;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t UniqueVRegDef;
  int v51;
  _QWORD *v52;
  int v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  int v91;
  _QWORD *v92;
  int v93;
  unsigned int v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  BOOL v99;
  unsigned int v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  int v116;
  _BYTE v117[256];
  uint64_t v118;
  _QWORD *v119;
  int v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[34];

  v123[32] = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  v4 = v3[365];
  v5 = v3[366];
  v6 = v3[367];
  v7 = v3[368];
  v8 = v3[369];
  v113 = v117;
  v114 = v117;
  v115 = 32;
  v116 = 0;
  v110 = v6;
  if (!((v4 | v8 | v5 | v6) | v7)
    || (*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0x640)
  {
    goto LABEL_213;
  }
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 104))(v3);
  v10 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 256) = v10;
  if ((**(_BYTE **)(*(_QWORD *)v10 + 360) & 1) != 0)
  {
    v118 = 1;
    v36 = 8;
    v37 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v118 + v36) = v37;
      v36 += 16;
    }
    while (v36 != 264);
    v121 = v123;
    v122 = 0x2000000000;
    v38 = (char *)a2 + 320;
    v39 = (char *)*((_QWORD *)a2 + 41);
    if (v39 == (char *)a2 + 320)
      goto LABEL_193;
    while (1)
    {
      for (i = *((_QWORD *)v39 + 7); (char *)i != v39 + 48; i = *(_QWORD *)(i + 8))
      {
        v112 = i;
        v41 = *(unsigned __int16 **)(i + 16);
        v42 = *((_QWORD *)v41 + 1);
        if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
        {
          v65 = i;
          if ((v42 & 0x200) == 0)
          {
            while ((*(_WORD *)(v65 + 44) & 8) != 0)
            {
              v65 = *(_QWORD *)(v65 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v65 + 16) + 9) & 2) != 0)
                goto LABEL_125;
            }
LABEL_91:
            v44 = *((_QWORD *)v41 + 2);
            v45 = v44 & 0xD00;
            if (v45 == 1280
              || v45 == 2304
              || v45 == 3328
              || (v68 = v44 & 0xE00, v68 == 1536)
              || v68 == 2560
              || v68 == 3584
              || (v44 & 2) != 0
              || (v44 & 0x2000000) != 0
              || *v41 - 2970 < 0x48)
            {
              if (*(_DWORD *)(i + 40) >= 4u)
              {
                v46 = i;
                v47 = 3;
                while (1)
                {
                  v48 = *(_QWORD *)(v46 + 32);
                  if (!*(_BYTE *)(v48 + 32 * v47))
                    break;
LABEL_119:
                  if (++v47 >= (unint64_t)*(unsigned int *)(v46 + 40))
                    goto LABEL_152;
                }
                v49 = *(_DWORD *)(v48 + 32 * v47 + 4);
                v111 = 0;
                UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 256), v49);
                v111 = UniqueVRegDef;
                if (UniqueVRegDef)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v113, UniqueVRegDef);
                  if ((v118 & 1) != 0)
                  {
                    v51 = 32;
                    v52 = &v119;
LABEL_102:
                    v53 = v51 - 1;
                    v54 = ((v111 >> 4) ^ (v111 >> 9)) & v53;
                    v55 = &v52[v54];
                    v56 = *v55;
                    if (v111 != *v55)
                    {
                      v57 = 0;
                      v58 = 1;
                      while (v56 != -4096)
                      {
                        if (v57)
                          v59 = 0;
                        else
                          v59 = v56 == -8192;
                        if (v59)
                          v57 = v55;
                        v60 = v54 + v58++;
                        v54 = v60 & v53;
                        v55 = &v52[v54];
                        v56 = *v55;
                        if (v111 == *v55)
                          goto LABEL_118;
                      }
                      if (v57)
                        v61 = v57;
                      else
                        v61 = v55;
                      goto LABEL_115;
                    }
                  }
                  else
                  {
                    v51 = v120;
                    if (v120)
                    {
                      v52 = v119;
                      goto LABEL_102;
                    }
                    v61 = 0;
LABEL_115:
                    v62 = sub_1C4993C28((uint64_t)&v118, (uint64_t)&v111, &v111, v61);
                    *v62 = v111;
                    v63 = v111;
                    v64 = v122;
                    if (v122 >= (unint64_t)HIDWORD(v122))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
                      v64 = v122;
                    }
                    *((_QWORD *)v121 + v64) = v63;
                    LODWORD(v122) = v122 + 1;
                  }
                }
LABEL_118:
                v46 = v112;
                goto LABEL_119;
              }
            }
LABEL_153:
            if ((*(_BYTE *)i & 4) != 0)
              continue;
            goto LABEL_156;
          }
        }
        else if ((v42 & 0x200) == 0)
        {
          goto LABEL_91;
        }
LABEL_125:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v113, i);
        if ((v118 & 1) != 0)
        {
          v66 = 32;
          v67 = &v119;
        }
        else
        {
          v66 = v120;
          if (!v120)
          {
            v77 = 0;
            goto LABEL_149;
          }
          v67 = v119;
        }
        v69 = v66 - 1;
        v70 = ((v112 >> 4) ^ (v112 >> 9)) & v69;
        v71 = &v67[v70];
        v72 = *v71;
        if (v112 == *v71)
          goto LABEL_153;
        v73 = 0;
        v74 = 1;
        while (v72 != -4096)
        {
          if (v73)
            v75 = 0;
          else
            v75 = v72 == -8192;
          if (v75)
            v73 = v71;
          v76 = v70 + v74++;
          v70 = v76 & v69;
          v71 = &v67[v70];
          v72 = *v71;
          if (v112 == *v71)
            goto LABEL_152;
        }
        if (v73)
          v77 = v73;
        else
          v77 = v71;
LABEL_149:
        v78 = sub_1C4993C28((uint64_t)&v118, (uint64_t)&v112, &v112, v77);
        *v78 = v112;
        v79 = v112;
        v80 = v122;
        if (v122 >= (unint64_t)HIDWORD(v122))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
          v80 = v122;
        }
        *((_QWORD *)v121 + v80) = v79;
        LODWORD(v122) = v122 + 1;
LABEL_152:
        if (i)
          goto LABEL_153;
LABEL_156:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
      v39 = (char *)*((_QWORD *)v39 + 1);
      if (v39 == v38)
      {
        v81 = v122;
        if (!(_DWORD)v122)
          goto LABEL_193;
        while (2)
        {
          v82 = (char *)v121 + 8 * v81;
          v83 = *((_QWORD *)v82 - 1);
          sub_1C4994010(&v118, (_QWORD *)v82 - 1);
          v81 = v122 - 1;
          LODWORD(v122) = v122 - 1;
          v84 = *(unsigned __int8 *)(*(_QWORD *)(v83 + 16) + 4);
          v85 = *(unsigned int *)(v83 + 40);
          if (v85 <= v84)
            goto LABEL_192;
          while (2)
          {
            v86 = *(_QWORD *)(v83 + 32);
            if (!*(_BYTE *)(v86 + 32 * v84))
            {
              v87 = *(_DWORD *)(v86 + 32 * v84 + 4);
              v112 = 0;
              v88 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 256), v87);
              v112 = v88;
              if (v88)
              {
                v89 = (char *)sub_1C477672C((uint64_t)&v113, v88);
                v90 = v114 == v113 ? (uint64_t *)((char *)&v115 + 4) : &v115;
                if (v89 == &v114[8 * *(unsigned int *)v90])
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v113, v112);
                  if ((v118 & 1) != 0)
                  {
                    v91 = 32;
                    v92 = &v119;
LABEL_172:
                    v93 = v91 - 1;
                    v94 = ((v112 >> 4) ^ (v112 >> 9)) & v93;
                    v95 = &v92[v94];
                    v96 = *v95;
                    if (v112 != *v95)
                    {
                      v97 = 0;
                      v98 = 1;
                      while (v96 != -4096)
                      {
                        if (v97)
                          v99 = 0;
                        else
                          v99 = v96 == -8192;
                        if (v99)
                          v97 = v95;
                        v100 = v94 + v98++;
                        v94 = v100 & v93;
                        v95 = &v92[v94];
                        v96 = *v95;
                        if (v112 == *v95)
                          goto LABEL_188;
                      }
                      if (v97)
                        v101 = v97;
                      else
                        v101 = v95;
                      goto LABEL_185;
                    }
                  }
                  else
                  {
                    v91 = v120;
                    if (v120)
                    {
                      v92 = v119;
                      goto LABEL_172;
                    }
                    v101 = 0;
LABEL_185:
                    v102 = sub_1C4993C28((uint64_t)&v118, (uint64_t)&v112, &v112, v101);
                    *v102 = v112;
                    v103 = v112;
                    v104 = v122;
                    if (v122 >= (unint64_t)HIDWORD(v122))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
                      v104 = v122;
                    }
                    *((_QWORD *)v121 + v104) = v103;
                    LODWORD(v122) = v122 + 1;
                  }
                }
              }
LABEL_188:
              v85 = *(unsigned int *)(v83 + 40);
            }
            if (++v84 < v85)
              continue;
            break;
          }
          v81 = v122;
LABEL_192:
          if (v81)
            continue;
          break;
        }
LABEL_193:
        v105 = *((_QWORD *)a2 + 41);
        if ((char *)v105 == v38)
          goto LABEL_209;
        while (2)
        {
          v106 = *(_QWORD *)(v105 + 56);
LABEL_195:
          if (v106 == v105 + 48)
          {
            v105 = *(_QWORD *)(v105 + 8);
            if ((char *)v105 == v38)
            {
LABEL_209:
              if (v121 != v123)
                free(v121);
              if ((v118 & 1) == 0)
                MEMORY[0x1CAA32FB4](v119, 8);
              goto LABEL_213;
            }
            continue;
          }
          break;
        }
        v107 = (char *)sub_1C477672C((uint64_t)&v113, v106);
        if (v114 == v113)
          v108 = (uint64_t *)((char *)&v115 + 4);
        else
          v108 = &v115;
        if (v107 == &v114[8 * *(unsigned int *)v108])
        {
          *(_WORD *)(v106 + 44) = *(_WORD *)(v106 + 44) & 0xC | 0x80;
        }
        else if (!v106)
        {
          goto LABEL_206;
        }
        if ((*(_BYTE *)v106 & 4) == 0)
        {
LABEL_206:
          while ((*(_WORD *)(v106 + 44) & 8) != 0)
            v106 = *(_QWORD *)(v106 + 8);
        }
        v106 = *(_QWORD *)(v106 + 8);
        goto LABEL_195;
      }
    }
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 41);
  if (v11 != (_QWORD *)((char *)a2 + 320))
  {
    v12 = 0;
    while (1)
    {
      v13 = v11[7];
      if ((_QWORD *)v13 != v11 + 6)
        break;
LABEL_79:
      v11 = (_QWORD *)v11[1];
      if (v11 == (_QWORD *)((char *)a2 + 320))
        goto LABEL_214;
    }
    while (1)
    {
      if (v13 && (*(_BYTE *)v13 & 4) != 0)
      {
        v14 = *(_WORD *)(v13 + 44);
      }
      else
      {
        v14 = *(_WORD *)(v13 + 44);
        if ((v14 & 8) != 0)
        {
          v15 = v13;
          do
            v15 = *(_QWORD *)(v15 + 8);
          while ((*(_WORD *)(v15 + 44) & 8) != 0);
          goto LABEL_15;
        }
      }
      v15 = v13;
LABEL_15:
      v16 = *(_QWORD *)(v15 + 8);
      if ((v14 & 0x80) == 0)
        goto LABEL_47;
      v17 = *(unsigned __int16 **)(v13 + 16);
      v18 = *v17;
      v19 = v18 - 9;
      v20 = (v18 - 9) > 0x3C || ((1 << (v18 - 9)) & 0x1000000000000605) == 0;
      if (!v20 || v18 == 0)
        goto LABEL_47;
      v22 = *((_QWORD *)v17 + 1);
      if ((v22 & 0x10) != 0)
        goto LABEL_47;
      v23 = *((_QWORD *)v17 + 2);
      if ((v23 & 0x40) != 0)
        goto LABEL_47;
      if ((v22 & 0x2000) != 0)
      {
        v24 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
        if (v24 == 56 || v24 == 313)
          goto LABEL_47;
      }
      v25 = *((_QWORD *)v17 + 2) & 0xD00;
      if (v5)
        v26 = v25 == 1280;
      else
        v26 = 0;
      v27 = v26;
      v28 = v25 != 2304 || v4 == 0;
      if (!v28 || (v27 & 1) != 0 || v110 && (v23 & 2) != 0)
      {
        v29 = *(_DWORD *)(v13 + 40);
        while (v29 > *((unsigned __int8 *)v17 + 4))
        {
          llvm::MachineInstr::removeOperand(v13, v29 - 1);
          v29 = *(_DWORD *)(v13 + 40);
          v17 = *(unsigned __int16 **)(v13 + 16);
        }
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 480;
        llvm::MachineInstr::dropMemRefs(v13, a2);
      }
      else
      {
        v30 = *((_QWORD *)v17 + 2) & 0xE00;
        if (v5)
          v31 = v30 == 1536;
        else
          v31 = 0;
        v32 = v31;
        v33 = v30 != 2560 || v4 == 0;
        if (!v33 || (v32 & 1) != 0 || v110 && (v18 - 2970) <= 0x47)
        {
          v34 = v13;
          if ((v14 & 8) != 0)
          {
            v34 = v13;
            if ((*(_QWORD *)v13 & 4) == 0)
            {
              v34 = v13;
              do
                v34 = *(_QWORD *)(v34 + 8);
              while ((*(_WORD *)(v34 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v13 + 24) + 40, v13, *(_QWORD *)(v34 + 8));
        }
        else
        {
          if (!v7 || (v19 > 0x3C || ((1 << v19) & 0x1000000000000405) == 0) && *v17 && (v23 & 1) == 0)
          {
            *(_WORD *)(v13 + 44) = v14 & 0xFF7F;
            goto LABEL_47;
          }
          v35 = *(_DWORD *)(v13 + 40);
          while (v35 > *((unsigned __int8 *)v17 + 4))
          {
            llvm::MachineInstr::removeOperand(v13, v35 - 1);
            v35 = *(_DWORD *)(v13 + 40);
            v17 = *(unsigned __int16 **)(v13 + 16);
          }
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 480;
        }
      }
      v12 = 1;
LABEL_47:
      v13 = v16;
      if ((_QWORD *)v16 == v11 + 6)
        goto LABEL_79;
    }
  }
LABEL_213:
  v12 = 0;
LABEL_214:
  if (v114 != v113)
    free(v114);
  return v12 & 1;
}

uint64_t sub_1C4993B80(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4993C28(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 32;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4993D9C(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 32;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4993D9C(a1, v8);
      v20 = 0;
      sub_1C4993B80(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4993D9C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4993F10((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 264; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4993F10((int *)a1, v14, v8);
}

int *sub_1C4993F10(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 32;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v8[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v8[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4994010(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C4993B80((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C4994060(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 repair matmad";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "agx2-repair-matmad";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC490;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C49941AC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C49940EC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC490) = &off_1E7FA7F68;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EC498);
  if (v3 != -1)
  {
    v7[0] = sub_1C4994060;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EC498, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C49941AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49940EC(v0);
}

void sub_1C49941D4(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4994268(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C49942F4()
{
  return "AGX2 Repair MatMad pass";
}

void *sub_1C4994304(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4994334(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 ***RegClassConstraint;
  unsigned int UnusedReg;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 ***CommonSubClass;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  const llvm::TargetRegisterInfo *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD *v76;
  BOOL v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  unsigned int *v98;
  llvm::MachineBasicBlock *v99;
  unsigned int *v100;
  int v101;
  unsigned int v102;
  void *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  void *v107;
  void *v108;
  uint64_t v109;
  _BYTE v110[40];
  int v111;
  void *v112;
  uint64_t v113;
  _BYTE v114[48];
  unsigned int v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  unsigned int v120;
  uint64_t v121;
  void *v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  _QWORD v126[4];
  _QWORD v127[2];
  void *v128;
  uint64_t v129;
  _QWORD v130[5];
  void *v131;
  uint64_t v132;
  _DWORD v133[14];
  void *v134;
  uint64_t v135;
  _DWORD v136[14];
  void *v137;
  uint64_t v138;
  _DWORD v139[14];
  void *v140;
  uint64_t v141;
  _DWORD v142[14];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE **)(a2 + 16);
  if (!v3[395]
    || (*(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 104))(v3),
        *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16)),
        v5 = *(_QWORD *)(a2 + 328),
        v92 = a2 + 320,
        v5 == a2 + 320))
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = v5 + 48;
      v8 = *(_QWORD *)(v5 + 56);
      v95 = v5 + 48;
      if (v8 != v5 + 48)
      {
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v8 + 16) + 20) & 0x10) != 0)
          {
            v9 = *(_QWORD *)(v8 + 32);
            v10 = *(unsigned int *)(v9 + 4);
            sub_1C4994DFC((uint64_t)&v100, (llvm::MachineInstr *)v8, *(_DWORD *)(v9 + 4), *(_QWORD *)(a1 + 256));
            if (v101)
            {
              v126[3] = 0;
              v127[0] = 0;
              *(_QWORD *)((char *)v127 + 5) = 0;
              v128 = v130;
              v129 = 0x200000000;
              v130[4] = 0;
              v131 = v133;
              v132 = 0x600000000;
              v133[12] = 0;
              v134 = v136;
              v135 = 0x600000000;
              v136[12] = 0;
              v137 = v139;
              v138 = 0x600000000;
              v139[12] = 0;
              v140 = v142;
              v141 = 0x600000000;
              v142[12] = 0;
              v99 = *(llvm::MachineBasicBlock **)(v8 + 24);
              llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v126, v99);
              while (v127[0] != v8)
                llvm::RegScavenger::backward((llvm::RegScavenger *)v126);
              RegClassConstraint = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v8, 0, *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
              llvm::RegScavenger::getRegsAvailable(v126, RegClassConstraint, (char *)&v122);
              llvm::RegScavenger::backward((llvm::RegScavenger *)v126);
              UnusedReg = llvm::RegScavenger::FindUnusedReg((uint64_t)v126, RegClassConstraint);
              sub_1C4995110((char *)&v119, v10, *(_QWORD *)(a1 + 256));
              v13 = *(_QWORD *)(a1 + 256);
              v91 = (uint64_t)RegClassConstraint;
              v14 = *(_DWORD *)(*(_QWORD *)(v13 + 264)
                              + 24
                              * (*((unsigned __int16 *)*RegClassConstraint + 12)
                               + *(_DWORD *)(v13 + 272)
                               * ((*(_QWORD *)(v13 + 248) - *(_QWORD *)(v13 + 240)) >> 3)));
              v116 = &v118;
              v117 = 0x200000000;
              LODWORD(RegClassConstraint) = *(_DWORD *)(v13 + 16);
              v112 = v114;
              v113 = 0x600000000;
              sub_1C4765AA4((char *)&v112, ((_DWORD)RegClassConstraint + 63) >> 6, 0);
              v115 = RegClassConstraint;
              v15 = &v100[8 * v102];
              v93 = UnusedReg;
              v94 = v5;
              if (v101)
              {
                if (v102)
                {
                  v16 = 32 * v102;
                  v17 = (uint64_t)v100;
                  while (*(_DWORD *)v17 >= 0xFFFFFFFE)
                  {
                    v17 += 32;
                    v16 -= 32;
                    if (!v16)
                      goto LABEL_21;
                  }
                }
                else
                {
                  v17 = (uint64_t)v100;
                }
              }
              else
              {
LABEL_21:
                v17 = (uint64_t)&v100[8 * v102];
              }
              v98 = &v100[8 * v102];
              if ((unsigned int *)v17 == v98)
              {
                v62 = 0;
                v61 = 1;
                v60 = v93;
              }
              else
              {
                v90 = v14;
                v96 = 0;
                v97 = 1;
                do
                {
                  CommonSubClass = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v8, **(unsigned int **)(v17 + 8), *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
                  v19 = *(unsigned int *)(v17 + 16);
                  if ((_DWORD)v19)
                  {
                    v20 = *(unsigned int **)(v17 + 8);
                    v21 = 4 * v19;
                    do
                    {
                      v22 = *v20++;
                      v23 = *(const llvm::TargetRegisterInfo **)(a1 + 256);
                      v24 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v8, v22, *(const llvm::TargetInstrInfo **)(a1 + 248), v23);
                      CommonSubClass = (unsigned __int16 ***)llvm::TargetRegisterInfo::getCommonSubClass((uint64_t)v23, (uint64_t)CommonSubClass, v24);
                      v21 -= 4;
                    }
                    while (v21);
                  }
                  llvm::RegScavenger::getRegsAvailable(v126, CommonSubClass, (char *)&v107);
                  v25 = v108;
                  if (v120 >= v108)
                    v26 = v108;
                  else
                    v26 = v120;
                  v27 = (uint64_t *)v107;
                  if ((_DWORD)v26)
                  {
                    v28 = (uint64_t *)v119;
                    v29 = v107;
                    do
                    {
                      v30 = *v28++;
                      *v29++ &= ~v30;
                      --v26;
                    }
                    while (v26);
                  }
                  if (v113 >= v25)
                    v31 = v25;
                  else
                    v31 = v113;
                  if ((_DWORD)v31)
                  {
                    v32 = (uint64_t *)v112;
                    v33 = v27;
                    do
                    {
                      v34 = *v32++;
                      *v33++ &= ~v34;
                      --v31;
                    }
                    while (v31);
                  }
                  if ((_DWORD)v25)
                  {
                    v35 = 0;
                    v36 = 8 * v25;
                    while (!v27[v35 / 8])
                    {
                      v35 += 8;
                      if (v36 == v35)
                        goto LABEL_44;
                    }
                    if (v111)
                    {
                      v38 = 0;
                      v39 = (v111 - 1) & 0xFFFFFFC0;
                      while (1)
                      {
                        v41 = *v27++;
                        v40 = v41;
                        v42 = v39 == v38 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v111 : -1;
                        v43 = v42 & v40;
                        if (v43)
                          break;
                        v38 += 64;
                        if (v39 + 64 == v38)
                          goto LABEL_52;
                      }
                      v44 = __clz(__rbit64(v43)) + v38;
                    }
                    else
                    {
LABEL_52:
                      v44 = -1;
                    }
                    v45 = v117;
                    if (v117 >= (unint64_t)HIDWORD(v117))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, (uint64_t)&v118, v117 + 1, 4);
                      v45 = v117;
                    }
                    *((_DWORD *)v116 + v45) = v44;
                    LODWORD(v117) = v117 + 1;
                    sub_1C4995110((char *)&v103, v44, *(_QWORD *)(a1 + 256));
                    v46 = v106;
                    if (v115 < v106)
                    {
                      v47 = v113;
                      if ((v115 & 0x3F) != 0)
                        *((_QWORD *)v112 + v113 - 1) &= ~(-1 << (v115 & 0x3F));
                      v48 = v47;
                      v115 = v46;
                      v49 = v46 + 63;
                      if ((_DWORD)v47 != (v46 + 63) >> 6)
                      {
                        v50 = v49 >> 6;
                        if (v47 > v50)
                        {
                          LODWORD(v113) = v49 >> 6;
                          v48 = v49 >> 6;
                        }
                        else
                        {
                          v51 = v47;
                          if (v50 > HIDWORD(v113))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v50, 8);
                            v51 = v113;
                            v48 = v113;
                          }
                          if (v50 != v47)
                            bzero((char *)v112 + 8 * v51, 8 * (v50 - v47));
                          v48 += v50 - v47;
                          LODWORD(v113) = v48;
                          LOBYTE(v46) = v115;
                        }
                      }
                      v52 = v46 & 0x3F;
                      if (v52)
                        *((_QWORD *)v112 + v48 - 1) &= ~(-1 << v52);
                    }
                    v53 = v104;
                    v54 = (uint64_t *)v103;
                    if (v104)
                    {
                      v55 = v112;
                      v56 = (uint64_t *)v103;
                      do
                      {
                        v57 = *v56++;
                        *v55++ |= v57;
                        --v53;
                      }
                      while (v53);
                    }
                    if (v54 != &v105)
                      free(v54);
                    v37 = 0;
                    v96 += *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 264)
                                     + 24
                                     * (*((unsigned __int16 *)*CommonSubClass + 12)
                                      + *(_DWORD *)(*(_QWORD *)(a1 + 256) + 272)
                                      * ((*(_QWORD *)(*(_QWORD *)(a1 + 256) + 248)
                                                      - *(_QWORD *)(*(_QWORD *)(a1 + 256) + 240)) >> 3))) >> 5;
                    v27 = (uint64_t *)v107;
                  }
                  else
                  {
LABEL_44:
                    v97 = 0;
                    v37 = 1;
                  }
                  if (v27 != &v109)
                    free(v27);
                  if ((v37 & 1) != 0)
                    break;
                  v58 = (unsigned int *)(v17 + 32);
                  while (v58 != v15)
                  {
                    v59 = *v58;
                    v58 += 8;
                    if (v59 <= 0xFFFFFFFD)
                    {
                      v17 = (uint64_t)(v58 - 8);
                      goto LABEL_82;
                    }
                  }
                  v17 = (uint64_t)v15;
LABEL_82:
                  ;
                }
                while ((unsigned int *)v17 != v98);
                v60 = v93;
                v61 = v97;
                if (v97 & 1 | (v93 != 0))
                {
                  v14 = v90;
                  v62 = v96;
                }
                else
                {
                  v14 = v90;
                  v62 = v96;
                  if (!v123)
                    goto LABEL_107;
                  v63 = (uint64_t *)v122;
                  v64 = 8 * v123;
                  v65 = v122;
                  while (!*v65)
                  {
                    ++v65;
                    v64 -= 8;
                    if (!v64)
                      goto LABEL_107;
                  }
                  if (!v125)
                    goto LABEL_107;
                  v66 = 0;
                  v67 = (v125 - 1) & 0xFFFFFFC0;
                  while (1)
                  {
                    v69 = *v63++;
                    v68 = v69;
                    v70 = v67 + v66 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v125;
                    v71 = v70 & v68;
                    if (v71)
                      break;
                    v66 -= 64;
                    if (v67 + v66 == -64)
                      goto LABEL_107;
                  }
                  v72 = __clz(__rbit64(v71));
                  if (v72 + 1 == (_DWORD)v66)
                    goto LABEL_107;
                  v60 = v72 - v66;
                  while (1)
                  {
                    sub_1C4994DFC((uint64_t)&v107, (llvm::MachineInstr *)v8, v60, *(_QWORD *)(a1 + 256));
                    v73 = (int)v108;
                    sub_1C49953EC((uint64_t *)&v107);
                    if (!v73)
                      break;
                    v60 = sub_1C476BA0C(&v122, v60 + 1, v125, 1u);
                    if (v60 == -1)
                      goto LABEL_107;
                  }
                  if (!v60)
                  {
LABEL_107:
                    llvm::RegScavenger::forward((llvm::RegScavenger *)v126);
                    v74 = sub_1C49914F4(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 32));
                    v75 = v129;
                    if (v129 >= (unint64_t)HIDWORD(v129))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v130, v129 + 1, 16);
                      v75 = v129;
                    }
                    v76 = (char *)v128 + 16 * v75;
                    *v76 = v74;
                    v76[1] = 0;
                    LODWORD(v129) = v129 + 1;
                    v60 = llvm::RegScavenger::scavengeRegisterBackwards(v126, v91, (_QWORD *)v8, 0, 0, 1);
                  }
                  v61 = 0;
                }
              }
              v77 = (int)(v14 >> 5) > v62;
              if ((v61 & (v60 != 0)) == 0)
                v77 = v61;
              if (v77)
              {
                v78 = &v100[8 * v102];
                if (v101)
                {
                  if (v102)
                  {
                    v79 = 32 * v102;
                    v80 = v100;
                    while (*v80 >= 0xFFFFFFFE)
                    {
                      v80 += 8;
                      v79 -= 32;
                      if (!v79)
                        goto LABEL_119;
                    }
                  }
                  else
                  {
                    v80 = v100;
                  }
                }
                else
                {
LABEL_119:
                  v80 = &v100[8 * v102];
                }
                v81 = &v100[8 * v102];
                if (v80 != v81)
                {
                  v82 = 0;
                  do
                  {
                    LODWORD(v107) = *v80;
                    v108 = v110;
                    v109 = 0x200000000;
                    if (v80[4])
                      sub_1C614CA14((uint64_t)&v108, (uint64_t)(v80 + 2));
                    v83 = *((_DWORD *)v116 + v82);
                    (*(void (**)(_QWORD, llvm::MachineBasicBlock *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 248) + 400))(*(_QWORD *)(a1 + 248), v99, v8, v8 + 56, v83);
                    v84 = (unsigned int *)v108;
                    if ((_DWORD)v109)
                    {
                      v85 = 4 * v109;
                      do
                      {
                        v86 = *v84++;
                        llvm::MachineOperand::setReg(*(_QWORD *)(v8 + 32) + 32 * v86, v83);
                        v85 -= 4;
                      }
                      while (v85);
                      v84 = (unsigned int *)v108;
                    }
                    if (v84 != (unsigned int *)v110)
                      free(v84);
                    ++v82;
                    v87 = v80 + 8;
                    while (v87 != v78)
                    {
                      v88 = *v87;
                      v87 += 8;
                      if (v88 <= 0xFFFFFFFD)
                      {
                        v80 = v87 - 8;
                        goto LABEL_137;
                      }
                    }
                    v80 = v78;
LABEL_137:
                    ;
                  }
                  while (v80 != v81);
                }
              }
              else
              {
                llvm::MachineOperand::setReg(v9, v60);
                (*(void (**)(_QWORD, llvm::MachineBasicBlock *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 400))(*(_QWORD *)(a1 + 248), v99, *(_QWORD *)(v8 + 8), v8 + 56, v10, v60, 1);
              }
              if (v112 != v114)
                free(v112);
              v5 = v94;
              if (v116 != &v118)
                free(v116);
              v7 = v95;
              if (v119 != &v121)
                free(v119);
              if (v122 != &v124)
                free(v122);
              if (v140 != v142)
                free(v140);
              if (v137 != v139)
                free(v137);
              if (v134 != v136)
                free(v134);
              if (v131 != v133)
                free(v131);
              if (v128 != v130)
                free(v128);
              sub_1C49953EC((uint64_t *)&v100);
              v6 = 1;
            }
            else
            {
              sub_1C49953EC((uint64_t *)&v100);
            }
          }
          if ((*(_BYTE *)v8 & 4) == 0)
          {
            while ((*(_WORD *)(v8 + 44) & 8) != 0)
              v8 = *(_QWORD *)(v8 + 8);
          }
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8 != v7);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v92);
  }
  return v6 & 1;
}

uint64_t sub_1C4994DFC(uint64_t a1, llvm::MachineInstr *this, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  _QWORD *v40;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = llvm::MachineInstr::getNumExplicitOperands((uint64_t)this);
  if ((_DWORD)result != 1)
  {
    v9 = (_QWORD *)(a4 + 8);
    v10 = 1;
    v11 = result;
    v40 = v9;
    while (1)
    {
      v12 = *((_QWORD *)this + 4);
      if (*(_BYTE *)(v12 + 32 * v10))
        goto LABEL_9;
      v13 = *(_DWORD *)(v12 + 32 * v10 + 4);
      if (!v13 || v13 == a3)
        goto LABEL_9;
      if (a3 - 1 > 0x3FFFFFFE)
        goto LABEL_9;
      if (v13 - 1 > 0x3FFFFFFE)
        goto LABEL_9;
      result = llvm::MCRegisterInfo::regsOverlap(v9, a3, v13);
      if (!(_DWORD)result)
        goto LABEL_9;
      v15 = *(_DWORD *)(a1 + 16);
      if (!v15)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v16 = (v15 - 1) & (37 * v13);
      v17 = *(_QWORD *)a1 + 32 * v16;
      v18 = *(_DWORD *)v17;
      if (v13 != *(_DWORD *)v17)
        break;
LABEL_31:
      v24 = *(unsigned int *)(v17 + 16);
      if (v24 >= *(unsigned int *)(v17 + 20))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v24 + 1, 4);
        v24 = *(unsigned int *)(v17 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(v17 + 8) + 4 * v24) = v10;
      ++*(_DWORD *)(v17 + 16);
      v9 = v40;
LABEL_9:
      if (++v10 == v11)
        return result;
    }
    v19 = 0;
    v20 = 1;
    while (v18 != -1)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == -2;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & (v15 - 1);
      v17 = *(_QWORD *)a1 + 32 * v16;
      v18 = *(_DWORD *)v17;
      if (v13 == *(_DWORD *)v17)
        goto LABEL_31;
    }
    if (v19)
      v17 = v19;
LABEL_26:
    v23 = *(_DWORD *)(a1 + 8);
    if (4 * v23 + 4 >= 3 * v15)
    {
      result = (uint64_t)sub_1C4995220((uint64_t *)a1, 2 * v15);
      v25 = *(_DWORD *)(a1 + 16);
      if (v25)
      {
        v26 = v25 - 1;
        v27 = v26 & (37 * v13);
        v17 = *(_QWORD *)a1 + 32 * v27;
        v28 = *(_DWORD *)v17;
        if (v13 == *(_DWORD *)v17)
          goto LABEL_28;
        v29 = 0;
        v30 = 1;
        while (v28 != -1)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == -2;
          if (v31)
            v29 = v17;
          v32 = v27 + v30++;
          v27 = v32 & v26;
          v17 = *(_QWORD *)a1 + 32 * v27;
          v28 = *(_DWORD *)v17;
          if (v13 == *(_DWORD *)v17)
            goto LABEL_28;
        }
LABEL_60:
        if (v29)
          v17 = v29;
        goto LABEL_28;
      }
    }
    else
    {
      if (v15 + ~v23 - *(_DWORD *)(a1 + 12) > v15 >> 3)
      {
LABEL_28:
        ++*(_DWORD *)(a1 + 8);
        if (*(_DWORD *)v17 != -1)
          --*(_DWORD *)(a1 + 12);
        *(_DWORD *)v17 = v13;
        *(_QWORD *)(v17 + 8) = v17 + 24;
        *(_QWORD *)(v17 + 16) = 0x200000000;
        goto LABEL_31;
      }
      result = (uint64_t)sub_1C4995220((uint64_t *)a1, v15);
      v33 = *(_DWORD *)(a1 + 16);
      if (v33)
      {
        v34 = v33 - 1;
        v35 = v34 & (37 * v13);
        v17 = *(_QWORD *)a1 + 32 * v35;
        v36 = *(_DWORD *)v17;
        if (v13 == *(_DWORD *)v17)
          goto LABEL_28;
        v29 = 0;
        v37 = 1;
        while (v36 != -1)
        {
          if (v29)
            v38 = 0;
          else
            v38 = v36 == -2;
          if (v38)
            v29 = v17;
          v39 = v35 + v37++;
          v35 = v39 & v34;
          v17 = *(_QWORD *)a1 + 32 * v35;
          v36 = *(_DWORD *)v17;
          if (v13 == *(_DWORD *)v17)
            goto LABEL_28;
        }
        goto LABEL_60;
      }
    }
    v17 = 0;
    goto LABEL_28;
  }
  return result;
}

char *sub_1C4995110(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  int v7;
  char *result;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _WORD *v17;
  unsigned __int16 v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  int v24;

  v6 = (uint64_t *)(a3 + 8);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *((_QWORD *)a1 + 1) = 0x600000000;
  result = sub_1C4765AA4(a1, (v7 + 63) >> 6, 0);
  *((_DWORD *)a1 + 16) = v7;
  if (a3)
    v9 = v6;
  else
    v9 = 0;
  v10 = *v9;
  v11 = *(unsigned int *)(*v9 + 24 * a2 + 16);
  v12 = v11 & 0xF;
  v13 = (v11 >> 3) & 0x1FFFFFFE;
  v16 = v9 + 5;
  v15 = v9[5];
  v14 = v16[1];
  v17 = (_WORD *)(v14 + v13);
  v18 = *v17 + v12 * a2;
  do
  {
    v19 = *(unsigned __int16 *)(v15 + 4 * v18);
    if (*(_WORD *)(v15 + 4 * v18))
    {
      LODWORD(result) = *(unsigned __int16 *)(v15 + 4 * v18 + 2);
      v20 = *(_QWORD *)a1;
      do
      {
        v21 = v19;
        v19 = (int)result;
        if (v14)
        {
          v22 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(v10 + 24 * (unsigned __int16)v21 + 8));
          do
          {
            *(_QWORD *)(v20 + 8 * ((unsigned __int16)v21 >> 6)) |= 1 << v21;
            v23 = *v22++;
            v21 += v23;
          }
          while (v23);
        }
        result = 0;
      }
      while ((_WORD)v19);
    }
    v24 = (unsigned __int16)v17[1];
    ++v17;
    v18 += v24;
  }
  while (v24);
  return result;
}

_DWORD *sub_1C4995220(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[8 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if (*v13 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 32 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v20 = 0;
            v21 = 1;
            while (v18 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v18 == -2;
              if (v22)
                v20 = v17;
              v23 = v16 + v21++;
              v16 = v23 & v15;
              v17 = *a1 + 32 * v16;
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v20)
              v17 = v20;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          *(_QWORD *)(v17 + 8) = v17 + 24;
          *(_QWORD *)(v17 + 16) = 0x200000000;
          if (v13[4])
            sub_1C614C900(v17 + 8, (uint64_t)(v13 + 2));
          ++*((_DWORD *)a1 + 2);
          v19 = (int *)*((_QWORD *)v13 + 1);
          if (v19 != v13 + 6)
            free(v19);
        }
        v13 += 8;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 32 * v24;
    do
    {
      *result = -1;
      result += 8;
      v25 -= 32;
    }
    while (v25);
  }
  return result;
}

uint64_t *sub_1C49953EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (_QWORD *)(v3 + 24);
    do
    {
      if (*((_DWORD *)v5 - 6) <= 0xFFFFFFFD)
      {
        v6 = (_QWORD *)*(v5 - 2);
        if (v5 != v6)
          free(v6);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C499545C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  sub_1C54EB3A8(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Combine agx2 machine instrs after legalization";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "agx2-postlegalizer-combiner";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC4A0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C614CCB4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4995500(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = 0;
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0 || !byte_1ED7EC530)
    return v2;
  v5 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetPassConfig::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetPassConfig::ID);
  v8 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &unk_1EF8F7108);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &unk_1EF8F7108);
  if (word_1ED7EC578)
  {
    if (byte_1ED7EC5F0)
    {
LABEL_9:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 288))(&v16, v7);
      sub_1C54EB0C0(v10 + 248, &v16, 0);
      v11 = v16;
      v16 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 280))(v7))
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 552))
    llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2);
  v12 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &unk_1EF8F7110);
  v14 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &unk_1EF8F7110);
  sub_1C491CBCC(v14, a2);
  return sub_1C54F59B4();
}

uint64_t sub_1C4995730(uint64_t a1, unsigned __int8 **a2, unint64_t a3, uint64_t a4)
{
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  int v80;
  llvm::MachineFunction *v81;
  llvm::MachineInstr *v82;
  llvm::MachineInstr *v83;
  uint64_t v84;
  const llvm::MachineOperand *v85;
  llvm::MachineInstr *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  int v97;
  llvm::MachineFunction *v98;
  llvm::MachineInstr *v99;
  llvm::MachineFunction *v100;
  llvm::MachineInstr *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  llvm::MachineInstr *v128;
  llvm::MachineFunction *v129;
  llvm::MachineInstr *v130;
  unint64_t v131;
  uint64_t v132;
  llvm::MachineFunction *v133;
  llvm::MachineInstr *v134;
  llvm::MachineInstr *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  char v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  BOOL v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  unint64_t v275;
  unsigned __int8 **v276[8];
  unint64_t v277;
  int *v278;
  int *v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  __int16 v295;
  __int128 v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  unint64_t v303;
  int v304;
  uint64_t v305;

  v305 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 ***)(a1 + 32);
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(unsigned __int8 ***)(v8 + 40);
  v276[0] = (unsigned __int8 **)a4;
  v276[1] = v9;
  v276[2] = a2;
  v276[3] = v7;
  v276[4] = 0;
  v276[5] = 0;
  v276[6] = (unsigned __int8 **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 184))(*(_QWORD *)(v8 + 16));
  v276[7] = (unsigned __int8 **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16));
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(v10 + 40);
  v12 = **(unsigned __int16 **)(a3 + 16);
  if (v12 > 0x106)
  {
    if (v12 - 491 < 8)
    {
      v16 = *(_QWORD *)(a3 + 32);
      v17 = *(_DWORD *)(v16 + 64);
      if (!(_BYTE)v17)
      {
        v18 = *(unsigned int *)(v16 + 68);
        v19 = (uint64_t *)((v18 & 0x80000000) != 0
                        ? *(_QWORD *)(v11 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v11 + 272) + 8 * v18);
        v37 = *v19;
        if (v37)
        {
          if ((*(_BYTE *)(v37 + 3) & 1) != 0 || (v37 = *(_QWORD *)(v37 + 24)) != 0 && (*(_BYTE *)(v37 + 3) & 1) != 0)
          {
            v152 = *(_QWORD *)(v37 + 8);
            if (v152)
            {
              if (**(_WORD **)(v152 + 16) == 19 && *(_DWORD *)(v152 + 40) == 2)
              {
                v153 = *(unsigned int *)(*(_QWORD *)(v152 + 32) + 36);
                if ((v153 & 0x80000000) != 0)
                  v154 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
                else
                  v154 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v153);
                v213 = *v154;
                if ((*(_BYTE *)(v213 + 3) & 1) == 0)
                  v213 = *(_QWORD *)(v213 + 24);
                v214 = *(_QWORD *)(v213 + 8);
                if (**(_WORD **)(v214 + 16) == 318)
                {
                  v215 = *(_QWORD *)(v214 + 32);
                  v216 = *(_DWORD *)(v215 + 4);
                  if (v216 < 0)
                  {
                    v218 = v216 & 0x7FFFFFFF;
                    v217 = 519;
                    if (v218 < *(_DWORD *)(v11 + 432))
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * v218) == 129)
                        v217 = 263;
                      else
                        v217 = 519;
                    }
                  }
                  else
                  {
                    v217 = 519;
                  }
                  v219 = *(_QWORD *)(v215 + 48) / 2;
                  v220 = *(_QWORD *)(v16 + 80);
                  if (v220)
                  {
                    v221 = *(_QWORD *)(v16 + 72);
                    if (v221)
                    {
                      v222 = *(_QWORD *)(v221 + 24);
                      if (v222)
                      {
                        v223 = *(_QWORD *)(v222 + 32);
                        if (v223)
                        {
                          v224 = *(_QWORD *)(v223 + 40);
                          if ((v18 & 0x80000000) != 0)
                            v225 = (_QWORD *)(*(_QWORD *)(v224 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
                          else
                            v225 = (_QWORD *)(*(_QWORD *)(v224 + 272) + 8 * v18);
                          v226 = *v225;
                          v227 = *(_QWORD *)(v16 + 88);
                          if (*v225 == v16 + 64)
                            v228 = v225;
                          else
                            v228 = (_QWORD *)(v220 + 24);
                          *v228 = v227;
                          if (v227)
                            v229 = v227;
                          else
                            v229 = v226;
                          *(_QWORD *)(v229 + 16) = v220;
                          *(_QWORD *)(v16 + 80) = 0;
                          *(_QWORD *)(v16 + 88) = 0;
                          v17 = *(_DWORD *)(v16 + 64);
                        }
                      }
                    }
                  }
                  *(_DWORD *)(v16 + 80) = 64;
                  *(_DWORD *)(v16 + 88) = 0;
                  *(_DWORD *)(v16 + 64) = v217 | v17 & 0xFFF00000;
                  *(_DWORD *)(v16 + 68) = v219;
                  return 1;
                }
              }
            }
          }
        }
      }
      return sub_1C49AB388((uint64_t)v276, a3);
    }
    if (v12 - 263 < 4)
    {
      v27 = sub_1C49976C4(*(_QWORD *)(v10 + 40), (_QWORD *)a4, *(_QWORD *)(a3 + 32) + 32, *(_QWORD *)(a3 + 32) + 64, (uint64_t)a2);
      v28 = v27 | sub_1C49976C4(v11, (_QWORD *)a4, *(_QWORD *)(a3 + 32) + 96, *(_QWORD *)(a3 + 32) + 128, (uint64_t)a2);
      return v28 | sub_1C49976C4(v11, (_QWORD *)a4, *(_QWORD *)(a3 + 32) + 160, *(_QWORD *)(a3 + 32) + 192, (uint64_t)a2);
    }
    if (v12 != 336)
      return sub_1C49AB388((uint64_t)v276, a3);
    goto LABEL_38;
  }
  if (**(unsigned __int16 **)(a3 + 16) <= 0x76u)
  {
    if (**(unsigned __int16 **)(a3 + 16) > 0x33u)
    {
      if (v12 - 52 < 2)
      {
LABEL_31:
        *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a4 + 48) = a3;
LABEL_32:
        if ((sub_1C49A9DF8((uint64_t *)v276, a3) & 1) != 0)
          return 1;
        return sub_1C49AB388((uint64_t)v276, a3);
      }
      if (v12 != 65)
      {
        if (v12 == 116)
        {
          v20 = *(unsigned int *)(a3 + 40);
          v21 = *(_QWORD *)(a3 + 32);
          if ((_DWORD)v20)
          {
            v22 = 0;
            v23 = *(unsigned __int8 **)(a3 + 32);
            while (1)
            {
              v24 = *v23;
              v23 += 32;
              if (v24 == 17)
                break;
              if (v20 == ++v22)
                goto LABEL_20;
            }
          }
          else
          {
LABEL_20:
            LODWORD(v22) = -1;
          }
          if (*(_DWORD *)(v21 + 32 * v22 + 16) == 2131)
          {
            v25 = *(unsigned int *)(v21 + 68);
            if ((v25 & 0x80000000) != 0)
              v26 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
            else
              v26 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v25);
            v102 = *v26;
            if ((*(_BYTE *)(v102 + 3) & 1) == 0)
              v102 = *(_QWORD *)(v102 + 24);
            v103 = *(_DWORD *)(v21 + 4);
            v104 = *(_QWORD *)(v102 + 8);
            v105 = **(unsigned __int16 **)(v104 + 16);
            if ((v105 & 0xFFFE) == 0x74)
            {
              v106 = *(unsigned int *)(v104 + 40);
              if ((_DWORD)v106)
              {
                v107 = (_DWORD *)(*(_QWORD *)(v104 + 32) + 16);
                while (*((_BYTE *)v107 - 16) != 17)
                {
                  v107 += 8;
                  if (!--v106)
                    goto LABEL_167;
                }
                if (*v107 == 2131)
                {
                  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
                  *(_QWORD *)(a4 + 48) = a3;
                  LODWORD(v277) = v103;
                  LODWORD(v278) = 1;
                  LODWORD(v290) = v25;
                  LODWORD(v291) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, &v277, 1, &v290, 1, 0);
                  v72 = *(_QWORD *)(a3 + 24);
                  v73 = a3;
                  if ((*(_BYTE *)a3 & 4) == 0)
                  {
                    v73 = a3;
                    if ((*(_WORD *)(a3 + 44) & 8) != 0)
                    {
                      v73 = a3;
                      do
                        v73 = *(_QWORD *)(v73 + 8);
                      while ((*(_WORD *)(v73 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_277;
                }
              }
            }
LABEL_167:
            if ((v105 | 2) == 0x11E)
            {
              v124 = (uint64_t *)((v25 & 0x80000000) != 0
                               ? *(_QWORD *)(v11 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8
                               : *(_QWORD *)(v11 + 272) + 8 * v25);
              v125 = *v124;
              if (v125)
              {
                while ((*(_BYTE *)(v125 + 3) & 1) != 0)
                {
                  v125 = *(_QWORD *)(v125 + 24);
                  if (!v125)
                    return sub_1C49AB388((uint64_t)v276, a3);
                }
                while (1)
                {
                  v125 = *(_QWORD *)(v125 + 24);
                  if (!v125)
                    break;
                  if ((*(_BYTE *)(v125 + 3) & 1) == 0)
                    return sub_1C49AB388((uint64_t)v276, a3);
                }
                if (v105 == 286)
                  v126 = 287;
                else
                  v126 = 285;
                *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
                *(_QWORD *)(a4 + 48) = a3;
                LODWORD(v290) = v103;
                DWORD2(v290) = 1;
                v127 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, v126, &v290, 1, 0, 0, 0);
                if (*(_DWORD *)(v104 + 40) >= 2u)
                {
                  v129 = (llvm::MachineFunction *)v127;
                  v130 = v128;
                  v131 = 1;
                  v132 = 32;
                  do
                  {
                    llvm::MachineInstr::addOperand(v130, v129, (const llvm::MachineOperand *)(*(_QWORD *)(v104 + 32) + v132));
                    ++v131;
                    v132 += 32;
                  }
                  while (v131 < *(unsigned int *)(v104 + 40));
                }
                v72 = *(_QWORD *)(a3 + 24);
                v73 = a3;
                if ((*(_BYTE *)a3 & 4) == 0)
                {
                  v73 = a3;
                  if ((*(_WORD *)(a3 + 44) & 8) != 0)
                  {
                    v73 = a3;
                    do
                      v73 = *(_QWORD *)(v73 + 8);
                    while ((*(_WORD *)(v73 + 44) & 8) != 0);
                  }
                }
                goto LABEL_277;
              }
            }
          }
        }
        return sub_1C49AB388((uint64_t)v276, a3);
      }
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a4 + 48) = a3;
      v44 = *(_DWORD **)(a3 + 32);
      v45 = v44[1];
      if (v45 < 0 && (v45 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
        v46 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v45 & 0x7FFFFFFF));
      else
        v46 = 0;
      v275 = v46;
      v74 = v44[9];
      if ((v74 & 0x80000000) != 0)
        v75 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
      else
        v75 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v74);
      v92 = *v75;
      if (v92
        && ((*(_BYTE *)(v92 + 3) & 1) != 0 || (v92 = *(_QWORD *)(v92 + 24)) != 0 && (*(_BYTE *)(v92 + 3) & 1) != 0))
      {
        v93 = *(_QWORD *)(v92 + 8);
      }
      else
      {
        v93 = 0;
      }
      v94 = sub_1C554C050(v44[17], v11);
      if (v95 && v46 == 257)
      {
        v96 = v94;
        v97 = **(unsigned __int16 **)(v93 + 16);
        if (v97 == 318)
        {
          if (v94 == 0xFFFF)
          {
            *(_QWORD *)&v290 = 129;
            DWORD2(v290) = 0;
            v98 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 318, &v290, 1, 0, 0, 0);
LABEL_127:
            v100 = v98;
            v101 = v99;
            llvm::MachineInstr::addOperand(v99, v98, (const llvm::MachineOperand *)(*(_QWORD *)(v93 + 32) + 32));
            LODWORD(v277) = v45;
            LODWORD(v278) = 1;
            *(_QWORD *)&v290 = v100;
            *((_QWORD *)&v290 + 1) = v101;
LABEL_160:
            LODWORD(v291) = 1;
LABEL_190:
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 126, &v277, 1, &v290, 1, 0);
            v72 = *(_QWORD *)(a3 + 24);
            v73 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v73 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v73 = a3;
                do
                  v73 = *(_QWORD *)(v73 + 8);
                while ((*(_WORD *)(v73 + 44) & 8) != 0);
              }
            }
            goto LABEL_277;
          }
          if (v94 <= 0xFFFE)
          {
            *(_QWORD *)&v290 = 129;
            DWORD2(v290) = 0;
            v133 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 318, &v290, 1, 0, 0, 0);
            v135 = v134;
            llvm::MachineInstr::addOperand(v134, v133, (const llvm::MachineOperand *)(*(_QWORD *)(v93 + 32) + 32));
            v303 = 129;
            v304 = 0;
            v136 = sub_1C5544694(a4, &v303, v96);
            v277 = 129;
            LODWORD(v278) = 0;
            *(_QWORD *)&v290 = v133;
            *((_QWORD *)&v290 + 1) = v135;
            LODWORD(v291) = 1;
            *((_QWORD *)&v291 + 1) = v136;
            v292 = v137;
            LODWORD(v293) = 1;
            v138 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v277, 1, &v290, 2, 0);
            LODWORD(v277) = v45;
            LODWORD(v278) = 1;
            *(_QWORD *)&v290 = v138;
            *((_QWORD *)&v290 + 1) = v139;
            LODWORD(v291) = 1;
            goto LABEL_190;
          }
        }
        else if (v94 == 0xFFFF)
        {
          if ((v97 - 45) < 3 || v97 == 127)
          {
            if ((sub_1C49A07B0((uint64_t)v276, *(_DWORD *)(*(_QWORD *)(v93 + 32) + 4)) & 1) != 0)
            {
              v277 = 129;
              LODWORD(v278) = 0;
              LODWORD(v290) = *(_DWORD *)(*(_QWORD *)(v93 + 32) + 36);
              LODWORD(v291) = 0;
              v116 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v277, 1, &v290, 1, 0);
              v118 = v117;
              v277 = 129;
              LODWORD(v278) = 0;
              LODWORD(v290) = *(_DWORD *)(*(_QWORD *)(v93 + 32) + 68);
              LODWORD(v291) = 0;
              v119 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v277, 1, &v290, 1, 0);
              v120 = **(unsigned __int16 **)(v93 + 16);
              v277 = 129;
              LODWORD(v278) = 0;
              *(_QWORD *)&v290 = v116;
              *((_QWORD *)&v290 + 1) = v118;
              LODWORD(v291) = 1;
              *((_QWORD *)&v291 + 1) = v119;
              v292 = v121;
              LODWORD(v293) = 1;
              v122 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v120, &v277, 1, &v290, 2, *(unsigned __int16 *)(v93 + 44) | 0x100000000);
              LODWORD(v277) = v45;
              LODWORD(v278) = 1;
              *(_QWORD *)&v290 = v122;
              *((_QWORD *)&v290 + 1) = v123;
              goto LABEL_160;
            }
            v97 = **(unsigned __int16 **)(v93 + 16);
          }
          if (v97 == 320 && sub_1C49A07B0((uint64_t)v276, *(_DWORD *)(*(_QWORD *)(v93 + 32) + 4)))
          {
            *(_QWORD *)&v290 = 129;
            DWORD2(v290) = 0;
            v98 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 320, &v290, 1, 0, 0, 0);
            goto LABEL_127;
          }
        }
      }
      if ((sub_1C499F8BC((uint64_t *)v276, a3, &v275) & 1) != 0 || (sub_1C49AA7A0((uint64_t *)v276, a3) & 1) != 0)
        return 1;
      return sub_1C49AB388((uint64_t)v276, a3);
    }
    if (v12 == 47)
    {
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a4 + 48) = a3;
      if ((sub_1C603A0B0((uint64_t)v276, a3, v11, (_QWORD *)a4) & 1) != 0)
        return 1;
      return sub_1C49AB388((uint64_t)v276, a3);
    }
    if (v12 != 51)
      return sub_1C49AB388((uint64_t)v276, a3);
LABEL_38:
    *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a4 + 48) = a3;
    v33 = *(_DWORD **)(a3 + 32);
    v34 = v33[33];
    v35 = v33[41];
    if ((v34 & 0x80000000) != 0)
      v36 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
    else
      v36 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v34);
    v47 = *v36;
    if (v47 && ((*(_BYTE *)(v47 + 3) & 1) != 0 || (v47 = *(_QWORD *)(v47 + 24)) != 0 && (*(_BYTE *)(v47 + 3) & 1) != 0))
    {
      v48 = *(_QWORD *)(v47 + 8);
      if ((v35 & 0x80000000) != 0)
        goto LABEL_241;
    }
    else
    {
      v48 = 0;
      if ((v35 & 0x80000000) != 0)
      {
LABEL_241:
        v49 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
LABEL_242:
        v155 = v33[1];
        v156 = *v49;
        if ((*(_BYTE *)(v156 + 3) & 1) == 0)
          v156 = *(_QWORD *)(v156 + 24);
        v270 = v33[17];
        v271 = v33[25];
        v157 = *(_QWORD *)(v156 + 8);
        v158 = v33[12];
        v159 = **(unsigned __int16 **)(a3 + 16);
        v160 = **(unsigned __int16 **)(v48 + 16);
        if (v160 == **(unsigned __int16 **)(v157 + 16) && (v160 == 184 || v160 == 177))
        {
          v268 = v155;
          v161 = sub_1C4998998(v155, v11);
          v155 = v268;
          if ((v161 & 1) != 0)
            goto LABEL_263;
          v162 = (uint64_t *)((v34 & 0x80000000) != 0
                           ? *(_QWORD *)(v11 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v11 + 272) + 8 * v34);
          v163 = *v162;
          if (!v163)
            goto LABEL_263;
          while ((*(_BYTE *)(v163 + 3) & 1) != 0)
          {
            v163 = *(_QWORD *)(v163 + 24);
            if (!v163)
              goto LABEL_263;
          }
          while (1)
          {
            v163 = *(_QWORD *)(v163 + 24);
            if (!v163)
              break;
            if ((*(_BYTE *)(v163 + 3) & 1) == 0)
              goto LABEL_263;
          }
          v164 = (uint64_t *)((v35 & 0x80000000) != 0
                           ? *(_QWORD *)(v11 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v11 + 272) + 8 * v35);
          v165 = *v164;
          if (!v165)
          {
LABEL_263:
            v166 = *(_QWORD *)(a3 + 32);
            v167 = *(_DWORD *)(v166 + 68);
            v168 = *(_DWORD *)(v166 + 100);
            v169 = *(_DWORD *)(*(_QWORD *)(v48 + 32) + 36);
            v170 = *(_DWORD *)(*(_QWORD *)(v157 + 32) + 36);
            if (v268 < 0 && (v268 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
              v171 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v268 & 0x7FFFFFFF));
            else
              v171 = 0;
            v277 = v171;
            LODWORD(v278) = 0;
            LODWORD(v290) = v158;
            LODWORD(v291) = 2;
            DWORD2(v291) = v167;
            LODWORD(v293) = 0;
            LODWORD(v294) = v168;
            LODWORD(v296) = 0;
            DWORD2(v296) = v169;
            LODWORD(v298) = 0;
            DWORD2(v298) = v170;
            DWORD2(v299) = 0;
            v179 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v159, &v277, 1, &v290, 5, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
            v180 = **(unsigned __int16 **)(v48 + 16);
            LODWORD(v277) = v268;
            LODWORD(v278) = 1;
            *(_QWORD *)&v290 = v179;
            *((_QWORD *)&v290 + 1) = v181;
            LODWORD(v291) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v180, &v277, 1, &v290, 1, *(unsigned __int16 *)(v48 + 44) | 0x100000000);
            v72 = *(_QWORD *)(a3 + 24);
            v73 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v73 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v73 = a3;
                do
                  v73 = *(_QWORD *)(v73 + 8);
                while ((*(_WORD *)(v73 + 44) & 8) != 0);
              }
            }
            goto LABEL_277;
          }
          while ((*(_BYTE *)(v165 + 3) & 1) != 0)
          {
            v165 = *(_QWORD *)(v165 + 24);
            if (!v165)
              goto LABEL_263;
          }
          while (1)
          {
            v165 = *(_QWORD *)(v165 + 24);
            if (!v165)
              break;
            if ((*(_BYTE *)(v165 + 3) & 1) == 0)
              goto LABEL_263;
          }
        }
        if ((v158 - 32) < 0xA)
          return sub_1C49AB388((uint64_t)v276, a3);
        v269 = *(unsigned __int16 *)(a3 + 44);
        v172 = *(_QWORD *)(v10 + 8);
        v173 = *(_OWORD *)(v172 + 1024);
        v290 = *(_OWORD *)(v172 + 1008);
        v291 = v173;
        v174 = *(_QWORD *)(v172 + 1048);
        v292 = *(_QWORD *)(v172 + 1040);
        v293 = v174;
        v175 = *(_QWORD *)(v172 + 1056);
        v294 = v175;
        if (v175)
        {
          v176 = (unint64_t *)(v175 + 8);
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        v178 = v155;
        v295 = *(_WORD *)(v172 + 1064);
        if (*(char *)(v172 + 1095) < 0)
        {
          sub_1C47EBC30(&v296, *(void **)(v172 + 1072), *(_QWORD *)(v172 + 1080));
        }
        else
        {
          v296 = *(_OWORD *)(v172 + 1072);
          v297 = *(_QWORD *)(v172 + 1088);
        }
        v298 = *(_OWORD *)(v172 + 1096);
        v299 = *(_OWORD *)(v172 + 1112);
        sub_1C4843224((uint64_t)&v300, (uint64_t *)(v172 + 1128));
        if (*(char *)(v172 + 1311) < 0)
        {
          sub_1C47EBC30(&v301, *(void **)(v172 + 1288), *(_QWORD *)(v172 + 1296));
        }
        else
        {
          v301 = *(_OWORD *)(v172 + 1288);
          v302 = *(_QWORD *)(v172 + 1304);
        }
        v182 = BYTE12(v290) & 1;
        if ((_DWORD)v159 == 51)
        {
          v183 = (v269 >> 10) & 1;
          if ((~(_DWORD)v269 & 0x3C0) != 0)
            v183 = 0;
          if (!(v183 | v182))
            goto LABEL_301;
        }
        else if (!(v182 | v269 & 0x10))
        {
          goto LABEL_301;
        }
        if ((v158 - 7) <= 1)
        {
          if (v158 == 7)
            v184 = v34;
          else
            v184 = v35;
          LODWORD(v303) = v178;
          v304 = 1;
          LODWORD(v277) = v184;
          LODWORD(v279) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, &v303, 1, &v277, 1, 0);
          v185 = *(_QWORD *)(a3 + 24);
          v186 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v186 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v186 = a3;
              do
                v186 = *(_QWORD *)(v186 + 8);
              while ((*(_WORD *)(v186 + 44) & 8) != 0);
            }
          }
LABEL_295:
          sub_1C487FE80(v185 + 40, a3, *(_QWORD *)(v186 + 8));
          sub_1C48433E8((uint64_t)&v290);
          return 1;
        }
        v187 = *(_QWORD *)(v11 + 24);
        v188 = (uint64_t *)(v187 + 16 * (v271 & 0x7FFFFFFF) + 8);
        v189 = *(_QWORD *)(v11 + 272);
        if ((int)v271 >= 0)
          v188 = (uint64_t *)(v189 + 8 * v271);
        v190 = *v188;
        if ((*(_BYTE *)(v190 + 3) & 1) == 0)
          v190 = *(_QWORD *)(v190 + 24);
        v191 = *(_QWORD *)(v190 + 8);
        if (**(_WORD **)(v191 + 16) == 121)
        {
          v192 = *(_QWORD *)(*(_QWORD *)(v191 + 32) + 48);
          if (v192)
          {
            v193 = *(_UNKNOWN **)(v192 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v192 + 40) : v192 + 24;
            if ((*(_BYTE *)(v193 + 28) & 7) == 3)
            {
              v194 = (uint64_t *)(v187 + 16 * (v270 & 0x7FFFFFFF) + 8);
              v195 = (uint64_t *)(v189 + 8 * v270);
              if ((int)v270 >= 0)
                v194 = v195;
              v196 = *v194;
              if (*v194)
              {
                while ((*(_BYTE *)(v196 + 3) & 1) != 0)
                {
                  v196 = *(_QWORD *)(v196 + 24);
                  if (!v196)
                    goto LABEL_301;
                }
                while (1)
                {
                  v196 = *(_QWORD *)(v196 + 24);
                  if (!v196)
                    break;
                  if ((*(_BYTE *)(v196 + 3) & 1) == 0)
                    goto LABEL_301;
                }
                v272 = v35;
                v274 = 0;
                LODWORD(v275) = 0;
                v197 = *v194;
                if (v197)
                {
                  if ((*(_BYTE *)(v197 + 3) & 1) != 0
                    || (v197 = *(_QWORD *)(v197 + 24)) != 0 && (*(_BYTE *)(v197 + 3) & 1) != 0)
                  {
                    v241 = *(_QWORD *)(v197 + 8);
                    if (v241)
                    {
                      if (**(_WORD **)(v241 + 16) == 163 && *(_DWORD *)(v241 + 40) == 3)
                      {
                        v242 = *(_QWORD *)(v241 + 32);
                        v243 = *(_DWORD *)(v242 + 36);
                        v244 = *(_DWORD *)(v242 + 68);
                        v274 = v244;
                        LODWORD(v275) = v243;
                        if (v244 < 0 && (v244 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
                          v245 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v244 & 0x7FFFFFFF));
                        else
                          v245 = 0;
                        v303 = v245;
                        v304 = 0;
                        LODWORD(v277) = v244;
                        LODWORD(v279) = 0;
                        v246 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 177, &v303, 1, &v277, 1, v269 | 0x100000000);
                        LODWORD(v303) = v178;
                        v304 = 1;
                        LODWORD(v277) = v158;
                        LODWORD(v279) = 2;
                        LODWORD(v280) = v275;
                        v282 = 0;
                        v283 = v246;
                        v284 = v247;
                        v285 = 1;
                        v286 = v34;
                        v287 = 0;
                        v288 = v35;
                        v289 = 0;
                        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 51, &v303, 1, &v277, 5, v269 | 0x100000000);
                        v185 = *(_QWORD *)(a3 + 24);
                        v186 = a3;
                        if ((*(_BYTE *)a3 & 4) == 0)
                        {
                          v186 = a3;
                          if ((*(_WORD *)(a3 + 44) & 8) != 0)
                          {
                            v186 = a3;
                            do
                              v186 = *(_QWORD *)(v186 + 8);
                            while ((*(_WORD *)(v186 + 44) & 8) != 0);
                          }
                        }
                        goto LABEL_295;
                      }
                    }
                  }
                }
                v273 = 0;
                v277 = (unint64_t)&v275;
                v278 = &v274;
                v279 = &v273;
                LODWORD(v303) = v270;
                if ((sub_1C4998B9C((uint64_t)&v277, v11, (unsigned int *)&v303) & 1) != 0)
                {
                  if ((v275 & 0x80000000) != 0 && (v275 & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432))
                    v198 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v275 & 0x7FFFFFFF));
                  else
                    v198 = 0;
                  v303 = v198;
                  v304 = 0;
                  LODWORD(v277) = v275;
                  LODWORD(v279) = 0;
                  LODWORD(v280) = v274;
                  v282 = 0;
                  v199 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 165, &v303, 1, &v277, 2, v269 | 0x100000000);
                  v201 = v200;
                  v303 = v198;
                  v304 = 0;
                  LODWORD(v277) = v273;
                  LODWORD(v279) = 0;
                  v202 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 177, &v303, 1, &v277, 1, v269 | 0x100000000);
                  LODWORD(v303) = v178;
                  v304 = 1;
                  LODWORD(v277) = v158;
                  LODWORD(v279) = 2;
                  v280 = v199;
                  v281 = v201;
                  v282 = 1;
                  v283 = v202;
                  v284 = v203;
                  v285 = 1;
                  v286 = v34;
                  v287 = 0;
                  v288 = v272;
                  v289 = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 51, &v303, 1, &v277, 5, v269 | 0x100000000);
                  v185 = *(_QWORD *)(a3 + 24);
                  v186 = a3;
                  if ((*(_BYTE *)a3 & 4) == 0)
                  {
                    v186 = a3;
                    if ((*(_WORD *)(a3 + 44) & 8) != 0)
                    {
                      v186 = a3;
                      do
                        v186 = *(_QWORD *)(v186 + 8);
                      while ((*(_WORD *)(v186 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_295;
                }
              }
            }
          }
        }
LABEL_301:
        sub_1C48433E8((uint64_t)&v290);
        return sub_1C49AB388((uint64_t)v276, a3);
      }
    }
    v49 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v35);
    goto LABEL_242;
  }
  if (**(unsigned __int16 **)(a3 + 16) <= 0xA2u)
  {
    switch(**(_WORD **)(a3 + 16))
    {
      case 0x77:
        *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a4 + 48) = a3;
        v13 = *(_QWORD *)(a3 + 32);
        v14 = *(_DWORD *)(v13 + 4);
        if ((v14 & 0x80000000) != 0 && (v14 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432))
          v15 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v14 & 0x7FFFFFFF));
        else
          v15 = 0;
        v303 = v15;
        v50 = *(unsigned int *)(v13 + 36);
        if ((v50 & 0x80000000) != 0)
          v51 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
        else
          v51 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v50);
        v76 = *v51;
        if (v76
          && ((*(_BYTE *)(v76 + 3) & 1) != 0 || (v76 = *(_QWORD *)(v76 + 24)) != 0 && (*(_BYTE *)(v76 + 3) & 1) != 0))
        {
          v77 = *(_QWORD *)(v76 + 8);
        }
        else
        {
          v77 = 0;
        }
        v78 = sub_1C4825F50(&v303);
        if ((_DWORD)v79 == 1)
        {
          v204 = v78;
          v78 = v204;
        }
        v80 = **(unsigned __int16 **)(v77 + 16);
        if (v78 == 16 && v80 == 318)
        {
          LODWORD(v277) = v14;
          LODWORD(v278) = 1;
          v81 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 318, &v277, 1, 0, 0, 0);
          v83 = v82;
          v84 = *(_QWORD *)(*(_QWORD *)(v77 + 32) + 48);
          LODWORD(v290) = 1;
          *((_QWORD *)&v290 + 1) = 0;
          *(_QWORD *)&v291 = v84;
          v85 = (const llvm::MachineOperand *)&v290;
LABEL_95:
          llvm::MachineInstr::addOperand(v83, v81, v85);
LABEL_96:
          v72 = *(_QWORD *)(a3 + 24);
          v73 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v73 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v73 = a3;
              do
                v73 = *(_QWORD *)(v73 + 8);
              while ((*(_WORD *)(v73 + 44) & 8) != 0);
            }
          }
          goto LABEL_277;
        }
        if (v80 == 320)
        {
          if (**(_WORD **)(a3 + 16) != 119)
            goto LABEL_32;
          if ((sub_1C49A07B0((uint64_t)v276, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 36)) & 1) != 0)
          {
            LODWORD(v290) = v14;
            DWORD2(v290) = 1;
            v81 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 320, &v290, 1, 0, 0, 0);
            v83 = v86;
            v85 = (const llvm::MachineOperand *)(*(_QWORD *)(v77 + 32) + 32);
            goto LABEL_95;
          }
          v80 = **(unsigned __int16 **)(v77 + 16);
        }
        if (v80 == 116)
        {
          if (!sub_1C49A07B0((uint64_t)v276, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 36)))
            goto LABEL_32;
          v142 = *(unsigned int *)(v77 + 40);
          if ((_DWORD)v142)
          {
            v143 = 0;
            v144 = *(unsigned __int8 **)(v77 + 32);
            while (1)
            {
              v145 = *v144;
              v144 += 32;
              if (v145 == 17)
                break;
              if (v142 == ++v143)
                goto LABEL_205;
            }
          }
          else
          {
LABEL_205:
            LODWORD(v143) = -1;
          }
          v146 = *(_DWORD *)(*(_QWORD *)(v77 + 32) + 32 * v143 + 16);
          if (v146 != 2579 && v146 != 2488)
            goto LABEL_32;
          (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 4))(a2, v77);
          llvm::MachineOperand::setReg(*(_QWORD *)(v77 + 32), v14);
          (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 5))(a2, v77);
          v147 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v147 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v147 = a3;
              do
                v147 = *(_QWORD *)(v147 + 8);
              while ((*(_WORD *)(v147 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v147 + 8));
          return 1;
        }
        if (v80 == 313)
        {
          v140 = *(unsigned int *)(*(_QWORD *)(v77 + 32) + 4);
          v141 = (uint64_t *)((v140 & 0x80000000) != 0
                           ? *(_QWORD *)(v11 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v11 + 272) + 8 * v140);
          v148 = *v141;
          if (v148)
          {
            while ((*(_BYTE *)(v148 + 3) & 1) != 0)
            {
              v148 = *(_QWORD *)(v148 + 24);
              if (!v148)
                goto LABEL_32;
            }
            while (1)
            {
              v148 = *(_QWORD *)(v148 + 24);
              if (!v148)
                break;
              if ((*(_BYTE *)(v148 + 3) & 1) == 0)
                goto LABEL_32;
            }
            v149 = sub_1C49975C8(&v303, v77, 1u, *(_QWORD *)(v11 + 424), *(_DWORD *)(v11 + 432), (uint64_t *)a4);
            v150 = sub_1C49975C8(&v303, v77, 3u, *(_QWORD *)(v11 + 424), *(_DWORD *)(v11 + 432), (uint64_t *)a4);
            v151 = *(unsigned __int16 *)(v77 + 44) | 0x100000000;
            LODWORD(v277) = v14;
            LODWORD(v278) = 1;
            LODWORD(v290) = v149;
            LODWORD(v291) = 0;
            DWORD2(v291) = v150;
            LODWORD(v293) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 47, &v277, 1, &v290, 2, v151);
            goto LABEL_96;
          }
        }
        goto LABEL_32;
      case 0x7E:
        goto LABEL_31;
      case 0x7F:
        v38 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
        if (v38 < 0 && (v39 = v38 & 0x7FFFFFFF, v39 < *(_DWORD *)(v11 + 432)))
          v40 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * v39);
        else
          v40 = 0;
        v275 = v40;
        if (sub_1C499F8BC((uint64_t *)v276, a3, &v275))
          return 1;
        v52 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
        *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a4 + 48) = a3;
        v53 = *(_QWORD *)(v11 + 24);
        v54 = (uint64_t *)(v53 + 16 * (v52 & 0x7FFFFFFF) + 8);
        v55 = *(_QWORD *)(v11 + 272);
        if ((int)v52 >= 0)
          v54 = (uint64_t *)(v55 + 8 * v52);
        v56 = *v54;
        if (!*v54)
          goto LABEL_72;
        while ((*(_BYTE *)(v56 + 3) & 1) != 0)
        {
          v56 = *(_QWORD *)(v56 + 24);
          if (!v56)
            goto LABEL_72;
        }
        v108 = *(_QWORD *)(v56 + 8);
LABEL_138:
        if (**(_WORD **)(v108 + 16) == 45)
        {
          v109 = *(_QWORD *)(v108 + 32);
          v110 = *(unsigned int *)(v109 + 36);
          if ((int)v110 >= 0)
            v111 = (uint64_t *)(v55 + 8 * v110);
          else
            v111 = (uint64_t *)(v53 + 16 * (v110 & 0x7FFFFFFF) + 8);
          v112 = *v111;
          if ((*(_BYTE *)(v112 + 3) & 1) == 0)
            v112 = *(_QWORD *)(v112 + 24);
          if (**(_WORD **)(*(_QWORD *)(v112 + 8) + 16) == 269)
            goto LABEL_73;
          v113 = *(unsigned int *)(v109 + 68);
          if ((int)v113 >= 0)
            v114 = (uint64_t *)(v55 + 8 * v113);
          else
            v114 = (uint64_t *)(v53 + 16 * (v113 & 0x7FFFFFFF) + 8);
          v115 = *v114;
          if ((*(_BYTE *)(v115 + 3) & 1) == 0)
            v115 = *(_QWORD *)(v115 + 24);
          if (**(_WORD **)(*(_QWORD *)(v115 + 8) + 16) == 269)
            goto LABEL_73;
        }
        while (1)
        {
          v56 = *(_QWORD *)(v56 + 24);
          if (!v56)
            break;
          if ((*(_BYTE *)(v56 + 3) & 1) == 0 && *(_QWORD *)(v56 + 8) != v108)
          {
            v108 = *(_QWORD *)(v56 + 8);
            goto LABEL_138;
          }
        }
LABEL_72:
        v57 = *v54;
        if (!*v54)
          goto LABEL_73;
        if ((*(_BYTE *)(v57 + 3) & 1) == 0)
        {
          v57 = *(_QWORD *)(v57 + 24);
          if (!v57 || (*(_BYTE *)(v57 + 3) & 1) == 0)
            goto LABEL_73;
        }
        v206 = *(_QWORD *)(v57 + 8);
        if (!v206)
          goto LABEL_73;
        if (**(_WORD **)(v206 + 16) != 127)
          goto LABEL_73;
        if (*(_DWORD *)(v206 + 40) != 3)
          goto LABEL_73;
        v207 = *(_QWORD *)(v206 + 32);
        v208 = *(unsigned int *)(v207 + 36);
        v209 = sub_1C554C050(*(_DWORD *)(v207 + 68), v11);
        if (!v210)
          goto LABEL_73;
        v211 = v209;
        v212 = (uint64_t *)((v208 & 0x80000000) != 0
                         ? *(_QWORD *)(v11 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v11 + 272) + 8 * v208);
        v230 = *v212;
        if (!v230)
          goto LABEL_73;
        while ((*(_BYTE *)(v230 + 3) & 1) != 0)
        {
          v230 = *(_QWORD *)(v230 + 24);
          if (!v230)
            goto LABEL_73;
        }
        while (1)
        {
          v230 = *(_QWORD *)(v230 + 24);
          if (!v230)
            break;
          if ((*(_BYTE *)(v230 + 3) & 1) == 0)
            goto LABEL_73;
        }
        if ((v208 & 0x80000000) != 0)
          v231 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
        else
          v231 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v208);
        v232 = *v231;
        if (!v232)
          goto LABEL_391;
        if ((*(_BYTE *)(v232 + 3) & 1) == 0)
        {
          v232 = *(_QWORD *)(v232 + 24);
          if (!v232 || (*(_BYTE *)(v232 + 3) & 1) == 0)
            goto LABEL_391;
        }
        v248 = *(_QWORD *)(v232 + 8);
        if (!v248 || **(_WORD **)(v248 + 16) != 45 || *(_DWORD *)(v248 + 40) != 3)
          goto LABEL_391;
        v249 = *(_QWORD *)(v248 + 32);
        v237 = *(_DWORD *)(v249 + 36);
        v250 = sub_1C554C050(*(_DWORD *)(v249 + 68), v11);
        if (v251)
        {
          v240 = v250;
LABEL_433:
          if (v211 > 4)
            goto LABEL_73;
          goto LABEL_434;
        }
        v252 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v248 + 32) + 36), v11);
        if (v253)
        {
          v240 = v252;
          v237 = *(_DWORD *)(*(_QWORD *)(v248 + 32) + 68);
          goto LABEL_433;
        }
LABEL_391:
        if ((v208 & 0x80000000) != 0)
          v233 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
        else
          v233 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v208);
        v234 = *v233;
        if (v234)
        {
          if ((*(_BYTE *)(v234 + 3) & 1) != 0
            || (v234 = *(_QWORD *)(v234 + 24)) != 0 && (*(_BYTE *)(v234 + 3) & 1) != 0)
          {
            v235 = *(_QWORD *)(v234 + 8);
            if (v235)
            {
              if (**(_WORD **)(v235 + 16) == 66 && *(_DWORD *)(v235 + 40) == 3)
              {
                v236 = *(_QWORD *)(v235 + 32);
                v237 = *(_DWORD *)(v236 + 36);
                v238 = sub_1C554C050(*(_DWORD *)(v236 + 68), v11);
                if (v239)
                {
                  v240 = v238;
                }
                else
                {
                  v254 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v235 + 32) + 36), v11);
                  if (!v255)
                    goto LABEL_73;
                  v240 = v254;
                  v237 = *(_DWORD *)(*(_QWORD *)(v235 + 32) + 68);
                }
                if (v211 < 5)
                {
LABEL_434:
                  if ((v237 & 0x80000000) != 0)
                    v256 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v237 & 0x7FFFFFFF) + 8);
                  else
                    v256 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v237);
                  v257 = *v256;
                  if (!v257
                    || (*(_BYTE *)(v257 + 3) & 1) == 0
                    && ((v257 = *(_QWORD *)(v257 + 24)) == 0 || (*(_BYTE *)(v257 + 3) & 1) == 0)
                    || (v258 = *(_QWORD *)(v257 + 8)) == 0
                    || **(_WORD **)(v258 + 16) != 127
                    || *(_DWORD *)(v258 + 40) != 3
                    || ((v259 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v258 + 32) + 68), v11) + v211, v260)
                      ? (v261 = v259 <= 4)
                      : (v261 = 1),
                        v261))
                  {
                    *(_WORD *)(a3 + 44) &= 0xE7FFu;
                    v277 = v275;
                    LODWORD(v278) = 0;
                    LODWORD(v290) = v237;
                    LODWORD(v291) = 0;
                    v303 = v275;
                    v304 = 0;
                    *((_QWORD *)&v291 + 1) = sub_1C5544694(a4, &v303, v211);
                    v292 = v262;
                    LODWORD(v293) = 1;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 127, &v277, 1, &v290, 2, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
                    if ((v208 & 0x80000000) != 0)
                      v264 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
                    else
                      v264 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v208);
                    v265 = *v264;
                    if ((*(_BYTE *)(v265 + 3) & 1) == 0)
                      v265 = *(_QWORD *)(v265 + 24);
                    v266 = **(unsigned __int16 **)(*(_QWORD *)(v265 + 8) + 16);
                    LODWORD(v277) = v52;
                    LODWORD(v278) = 1;
                    LODWORD(v290) = *(_DWORD *)(*(_QWORD *)(v263 + 32) + 4);
                    LODWORD(v291) = 0;
                    v303 = v275;
                    v304 = 0;
                    *((_QWORD *)&v291 + 1) = sub_1C5544694(a4, &v303, v240 << v211);
                    v292 = v267;
                    LODWORD(v293) = 1;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v266, &v277, 1, &v290, 2, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
                    v72 = *(_QWORD *)(a3 + 24);
                    v73 = a3;
                    if ((*(_BYTE *)a3 & 4) == 0)
                    {
                      v73 = a3;
                      if ((*(_WORD *)(a3 + 44) & 8) != 0)
                      {
                        v73 = a3;
                        do
                          v73 = *(_QWORD *)(v73 + 8);
                        while ((*(_WORD *)(v73 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_277;
                  }
                }
              }
            }
          }
        }
LABEL_73:
        if (!sub_1C60395F8((uint64_t *)v276, a3))
          return sub_1C49AB388((uint64_t)v276, a3);
        break;
      case 0x80:
        if ((sub_1C60395F8((uint64_t *)v276, a3) & 1) != 0)
          return 1;
        return sub_1C49AB388((uint64_t)v276, a3);
      default:
        return sub_1C49AB388((uint64_t)v276, a3);
    }
    return 1;
  }
  if (v12 == 163)
  {
    if ((sub_1C499C6C0(v276, a3) & 1) != 0)
      return 1;
    return sub_1C49AB388((uint64_t)v276, a3);
  }
  if (v12 == 193)
  {
    *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a4 + 48) = a3;
    v41 = *(_DWORD **)(a3 + 32);
    v42 = v41[1];
    if (v42 < 0 && (v42 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
      v43 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v42 & 0x7FFFFFFF));
    else
      v43 = 0;
    v58 = 0x7FFFFF800000000;
    if ((v43 & 4) == 0)
      v58 = 0x7FFFFF80000;
    if ((v58 & v43) == 0)
    {
      v59 = v41[17];
      v60 = v41[9];
      v277 = 513;
      LODWORD(v278) = 0;
      LODWORD(v290) = v60;
      LODWORD(v291) = 0;
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 80, &v277, 1, &v290, 1, 0);
      v277 = 257;
      LODWORD(v278) = 0;
      *(_QWORD *)&v290 = v61;
      *((_QWORD *)&v290 + 1) = v62;
      LODWORD(v291) = 1;
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v277, 1, &v290, 1, 0);
      v65 = v64;
      v277 = 257;
      LODWORD(v278) = 0;
      LODWORD(v290) = v59;
      LODWORD(v291) = 0;
      v66 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v277, 1, &v290, 1, 0);
      v277 = 257;
      LODWORD(v278) = 0;
      *(_QWORD *)&v290 = v63;
      *((_QWORD *)&v290 + 1) = v65;
      LODWORD(v291) = 1;
      *((_QWORD *)&v291 + 1) = v66;
      v292 = v67;
      LODWORD(v293) = 1;
      v68 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 45, &v277, 1, &v290, 2, 0);
      v277 = 513;
      LODWORD(v278) = 0;
      *(_QWORD *)&v290 = v68;
      *((_QWORD *)&v290 + 1) = v69;
      LODWORD(v291) = 1;
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 126, &v277, 1, &v290, 1, 0);
      LODWORD(v277) = v42;
      LODWORD(v278) = 1;
      *(_QWORD *)&v290 = v70;
      *((_QWORD *)&v290 + 1) = v71;
      LODWORD(v291) = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 81, &v277, 1, &v290, 1, 0);
      v72 = *(_QWORD *)(a3 + 24);
      v73 = a3;
      if ((*(_BYTE *)a3 & 4) == 0)
      {
        v73 = a3;
        if ((*(_WORD *)(a3 + 44) & 8) != 0)
        {
          v73 = a3;
          do
            v73 = *(_QWORD *)(v73 + 8);
          while ((*(_WORD *)(v73 + 44) & 8) != 0);
        }
      }
      goto LABEL_277;
    }
    return sub_1C49AB388((uint64_t)v276, a3);
  }
  if (v12 != 260)
    return sub_1C49AB388((uint64_t)v276, a3);
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a4 + 48) = a3;
  v30 = *(_QWORD *)(a3 + 32);
  v31 = *(unsigned int *)(v30 + 36);
  if ((v31 & 0x80000000) != 0)
    v32 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
  else
    v32 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v31);
  v87 = *v32;
  if (v87)
  {
    if ((*(_BYTE *)(v87 + 3) & 1) != 0 || (v87 = *(_QWORD *)(v87 + 24)) != 0 && (*(_BYTE *)(v87 + 3) & 1) != 0)
    {
      v205 = *(_QWORD *)(v87 + 8);
      if (v205)
      {
        if (**(_WORD **)(v205 + 16) == 82 && *(_DWORD *)(v205 + 40) == 2)
          v31 = *(unsigned int *)(*(_QWORD *)(v205 + 32) + 36);
      }
    }
  }
  if (v31 >> 31)
    v88 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
  else
    v88 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v31);
  v89 = *v88;
  if ((*(_BYTE *)(v89 + 3) & 1) == 0)
    v89 = *(_QWORD *)(v89 + 24);
  v90 = *(_QWORD *)(v89 + 8);
  if (**(_WORD **)(v90 + 16) != 78)
    return sub_1C49AB388((uint64_t)v276, a3);
  v91 = *(_QWORD *)(v30 + 80) + 1;
  if (v91 >= *(_DWORD *)(v90 + 40))
    return sub_1C49AB388((uint64_t)v276, a3);
  LODWORD(v277) = *(_DWORD *)(v30 + 4);
  LODWORD(v278) = 1;
  LODWORD(v290) = *(_DWORD *)(*(_QWORD *)(v90 + 32) + 32 * v91 + 4);
  LODWORD(v291) = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, &v277, 1, &v290, 1, 0);
  v72 = *(_QWORD *)(a3 + 24);
  v73 = a3;
  if ((*(_BYTE *)a3 & 4) == 0)
  {
    v73 = a3;
    if ((*(_WORD *)(a3 + 44) & 8) != 0)
    {
      v73 = a3;
      do
        v73 = *(_QWORD *)(v73 + 8);
      while ((*(_WORD *)(v73 + 44) & 8) != 0);
    }
  }
LABEL_277:
  sub_1C487FE80(v72 + 40, a3, *(_QWORD *)(v73 + 8));
  return 1;
}

uint64_t sub_1C49975C8(unint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v21[6];
  unint64_t v22;
  int v23;
  unint64_t v24;

  v10 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * a3 + 4);
  if ((v10 & 0x80000000) != 0 && (v10 & 0x7FFFFFFF) < a5)
    v11 = *(_QWORD *)(a4 + 8 * (v10 & 0x7FFFFFFF));
  else
    v11 = 0;
  v24 = v11;
  v12 = sub_1C4825F50(&v24);
  v14 = v13;
  if (v12 != sub_1C4825F50(a1) || v14 != v15)
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 32 * (a3 + 1) + 16);
    if (v16 == 2)
      v17 = 124;
    else
      v17 = 126;
    v22 = *a1;
    v23 = 0;
    if (v16)
      v18 = v17;
    else
      v18 = 118;
    v21[0] = v10;
    v21[4] = 0;
    sub_1C5546B4C(a6, v18, &v22, v21);
    return *(unsigned int *)(*(_QWORD *)(v19 + 32) + 4);
  }
  return v10;
}

uint64_t sub_1C49976C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  llvm::detail::DoubleAPFloat *v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  BOOL v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  const char *v85;
  unsigned int v86;
  unint64_t v87;
  BOOL v88;
  int v89;
  _QWORD *v90;
  unint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  unsigned int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int RegisterDefOperandIdx;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  unsigned int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  _BOOL4 v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  int v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  _DWORD v202[48];
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
    return 0;
  v10 = *(unsigned int *)(a3 + 4);
  if ((v10 & 0x80000000) != 0)
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  else
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v10);
  v12 = *v11;
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if ((v10 & 0x80000000) != 0)
        goto LABEL_12;
LABEL_7:
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v10);
      goto LABEL_13;
    }
  }
  v13 = 0;
  if ((v10 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_12:
  v14 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
LABEL_13:
  v15 = *v14;
  if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v16 = *(_QWORD *)(v15 + 8);
  if (**(_WORD **)(v16 + 16) != 77 || *(_DWORD *)(v16 + 40) != 3)
    goto LABEL_81;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(unsigned int *)(v17 + 36);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 272);
  if ((int)v18 >= 0)
    v21 = (uint64_t *)(v20 + 8 * v18);
  else
    v21 = (uint64_t *)(v19 + 16 * (v18 & 0x7FFFFFFF) + 8);
  v22 = *v21;
  if ((*(_BYTE *)(v22 + 3) & 1) == 0)
    v22 = *(_QWORD *)(v22 + 24);
  v23 = *(_QWORD *)(v22 + 8);
  if (**(_WORD **)(v23 + 16) == 121)
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 48);
  else
    v24 = 0;
  v25 = *(unsigned int *)(v17 + 68);
  v26 = v19 + 16 * (v25 & 0x7FFFFFFF) + 8;
  v27 = (uint64_t *)(v20 + 8 * v25);
  if ((int)v25 >= 0)
    v28 = v27;
  else
    v28 = (uint64_t *)v26;
  v29 = *v28;
  if ((*(_BYTE *)(v29 + 3) & 1) == 0)
    v29 = *(_QWORD *)(v29 + 24);
  v30 = *(_QWORD *)(v29 + 8);
  if (**(_WORD **)(v30 + 16) == 121)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 48);
    if (!v24)
      goto LABEL_81;
  }
  else
  {
    v31 = 0;
    if (!v24)
      goto LABEL_81;
  }
  if (v24 != v31)
    goto LABEL_81;
  if (*(_BYTE *)(*(_QWORD *)v24 + 8))
  {
LABEL_55:
    v43 = *(void **)(v24 + 32);
    v42 = (llvm::detail::DoubleAPFloat *)(v24 + 32);
    if (v43 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v42, (unsigned int *)&v200);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v42, (unsigned int *)&v200);
    v44 = (uint64_t *)&v200;
    if (v201 >= 0x41)
      v44 = (uint64_t *)v200;
    v45 = *v44;
    if (v45)
    {
      v46 = 0;
      if ((v45 & 0x7FFFF) != 0 || (v47 = (v45 >> 23), v47 - 121 > 0xA))
      {
LABEL_66:
        if (v201 >= 0x41 && v200)
          MEMORY[0x1CAA32F9C]();
        if (v46)
        {
          if (*(_UNKNOWN **)v42 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v42, (unsigned int *)&v200);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v42, (unsigned int *)&v200);
          v36 = v201;
          v37 = v200;
          v48 = (unsigned int *)&v200;
          if (v201 >= 0x41)
            v48 = (unsigned int *)v200;
          v49 = *v48;
          v50 = (v49 >> 23);
          v41 = (v49 >> 19) & 0xF;
          if (v50 | v41)
          {
            if (v50 <= 0x7C)
            {
              v41 = (v41 | 0x10) >> (125 - v50);
              v50 = 0;
            }
            else
            {
              v50 -= 124;
            }
          }
          v51 = (16 * v50) | (v49 >> 31 << 7);
          goto LABEL_173;
        }
LABEL_81:
        if (**(_WORD **)(v13 + 16) != 77)
          return 0;
        v52 = *(_QWORD *)(v13 + 32);
        v53 = v52 + 32;
        v54 = v52 + 64;
        v55 = *(unsigned int *)(v52 + 36);
        v56 = (uint64_t *)((v55 & 0x80000000) != 0
                        ? *(_QWORD *)(a1 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(a1 + 272) + 8 * v55);
        if ((v57 = *v56) != 0
          && ((*(_BYTE *)(v57 + 3) & 1) != 0 || (v57 = *(_QWORD *)(v57 + 24)) != 0 && (*(_BYTE *)(v57 + 3) & 1) != 0)
          && (v114 = *(_QWORD *)(v57 + 8)) != 0
          && **(_WORD **)(v114 + 16) == 178
          && *(_DWORD *)(v114 + 40) == 2)
        {
          v195 = *(unsigned int *)(*(_QWORD *)(v114 + 32) + 36);
          v115 = *(unsigned int *)(v52 + 68);
          v116 = (uint64_t *)((v115 & 0x80000000) != 0
                           ? *(_QWORD *)(a1 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(a1 + 272) + 8 * v115);
          if ((v131 = *v116) != 0
            && ((*(_BYTE *)(v131 + 3) & 1) != 0
             || (v131 = *(_QWORD *)(v131 + 24)) != 0 && (*(_BYTE *)(v131 + 3) & 1) != 0)
            && (v147 = *(_QWORD *)(v131 + 8)) != 0
            && **(_WORD **)(v147 + 16) == 178
            && *(_DWORD *)(v147 + 40) == 2)
          {
            v59 = *(unsigned int *)(*(_QWORD *)(v147 + 32) + 36);
            v148 = (uint64_t *)((v195 & 0x80000000) != 0
                             ? *(_QWORD *)(a1 + 24) + 16 * (v195 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(a1 + 272) + 8 * v195);
            v158 = *v148;
            if (v158
              && ((*(_BYTE *)(v158 + 3) & 1) != 0
               || (v158 = *(_QWORD *)(v158 + 24)) != 0 && (*(_BYTE *)(v158 + 3) & 1) != 0))
            {
              v159 = *(_QWORD *)(v158 + 8);
            }
            else
            {
              v159 = 0;
            }
            RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v159, v195, 0, 0, 0);
            v170 = RegisterDefOperandIdx == -1 ? 0 : *(_QWORD *)(v159 + 32) + 32 * RegisterDefOperandIdx;
            v175 = (uint64_t *)((v59 & 0x80000000) != 0
                             ? *(_QWORD *)(a1 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(a1 + 272) + 8 * v59);
            v183 = *v175;
            if (v183
              && ((*(_BYTE *)(v183 + 3) & 1) != 0
               || (v183 = *(_QWORD *)(v183 + 24)) != 0 && (*(_BYTE *)(v183 + 3) & 1) != 0))
            {
              v184 = *(_QWORD *)(v183 + 8);
            }
            else
            {
              v184 = 0;
            }
            v190 = llvm::MachineInstr::findRegisterDefOperandIdx(v184, v59, 0, 0, 0);
            v54 = v190 == -1 ? 0 : *(_QWORD *)(v184 + 32) + 32 * v190;
            v58 = v195;
            v53 = v170;
          }
          else
          {
            LODWORD(v59) = 0;
            v58 = *(_DWORD *)(*(_QWORD *)(v114 + 32) + 36);
          }
        }
        else
        {
          v58 = 0;
          LODWORD(v59) = 0;
        }
        v60 = !v58 || (_DWORD)v59 == 0;
        v61 = !v60;
        v62 = *(unsigned int *)(v53 + 4);
        if ((v62 & 0x80000000) != 0 && (v62 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432))
          v63 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v62 & 0x7FFFFFFF));
        else
          v63 = 0;
        v64 = *(unsigned int *)(v54 + 4);
        if ((v64 & 0x80000000) != 0 && (v64 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432))
          v65 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v64 & 0x7FFFFFFF));
        else
          v65 = 0;
        if (v63 != v65)
          return 0;
        if ((v62 & 0x80000000) != 0)
          v66 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
        else
          v66 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v62);
        v67 = *v66;
        v194 = v61;
        if (v67
          && ((*(_BYTE *)(v67 + 3) & 1) != 0 || (v67 = *(_QWORD *)(v67 + 24)) != 0 && (*(_BYTE *)(v67 + 3) & 1) != 0)
          && (v117 = *(_QWORD *)(v67 + 8)) != 0
          && **(_WORD **)(v117 + 16) == 258
          && *(_DWORD *)(v117 + 40) == 2
          && ((v118 = *(unsigned int *)(*(_QWORD *)(v117 + 32) + 36), (v64 & 0x80000000) != 0)
            ? (v119 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8))
            : (v119 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v64)),
              (v132 = *v119) != 0
           && ((*(_BYTE *)(v132 + 3) & 1) != 0 || (v132 = *(_QWORD *)(v132 + 24)) != 0
                                               && (*(_BYTE *)(v132 + 3) & 1) != 0)
           && (v133 = *(_QWORD *)(v132 + 8)) != 0
           && **(_WORD **)(v133 + 16) == 258
           && *(_DWORD *)(v133 + 40) == 2))
        {
          v134 = *(unsigned int *)(*(_QWORD *)(v133 + 32) + 36);
          if ((v118 & 0x80000000) != 0)
            v135 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
          else
            v135 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v118);
          v149 = *v135;
          if (v149
            && ((*(_BYTE *)(v149 + 3) & 1) != 0
             || (v149 = *(_QWORD *)(v149 + 24)) != 0 && (*(_BYTE *)(v149 + 3) & 1) != 0))
          {
            v150 = *(_QWORD *)(v149 + 8);
          }
          else
          {
            v150 = 0;
          }
          v160 = llvm::MachineInstr::findRegisterDefOperandIdx(v150, v118, 0, 0, 0);
          if (v160 == -1)
            v161 = 0;
          else
            v161 = *(_QWORD *)(v150 + 32) + 32 * v160;
          if ((v134 & 0x80000000) != 0)
            v171 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v134 & 0x7FFFFFFF) + 8);
          else
            v171 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v134);
          v176 = *v171;
          if (v176
            && ((*(_BYTE *)(v176 + 3) & 1) != 0
             || (v176 = *(_QWORD *)(v176 + 24)) != 0 && (*(_BYTE *)(v176 + 3) & 1) != 0))
          {
            v177 = *(_QWORD *)(v176 + 8);
          }
          else
          {
            v177 = 0;
          }
          v185 = llvm::MachineInstr::findRegisterDefOperandIdx(v177, v134, 0, 0, 0);
          if (v185 == -1)
            v54 = 0;
          else
            v54 = *(_QWORD *)(v177 + 32) + 32 * v185;
          v193 = 1;
          v53 = v161;
        }
        else
        {
          v193 = 0;
        }
        v68 = *(unsigned int *)(v53 + 4);
        if ((v68 & 0x80000000) != 0)
          v69 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
        else
          v69 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v68);
        v70 = *v69;
        if (v70)
        {
          if ((*(_BYTE *)(v70 + 3) & 1) != 0 || (v70 = *(_QWORD *)(v70 + 24)) != 0 && (*(_BYTE *)(v70 + 3) & 1) != 0)
          {
            v120 = *(_QWORD *)(v70 + 8);
            if (v120 && **(_WORD **)(v120 + 16) == 177 && *(_DWORD *)(v120 + 40) == 2)
            {
              v121 = *(unsigned int *)(*(_QWORD *)(v120 + 32) + 36);
              v122 = *(unsigned int *)(v54 + 4);
              v123 = (uint64_t *)((v122 & 0x80000000) != 0
                               ? *(_QWORD *)(a1 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8
                               : *(_QWORD *)(a1 + 272) + 8 * v122);
              v136 = *v123;
              if (v136)
              {
                if ((*(_BYTE *)(v136 + 3) & 1) != 0
                  || (v136 = *(_QWORD *)(v136 + 24)) != 0 && (*(_BYTE *)(v136 + 3) & 1) != 0)
                {
                  v137 = *(_QWORD *)(v136 + 8);
                  if (v137)
                  {
                    if (**(_WORD **)(v137 + 16) == 177 && *(_DWORD *)(v137 + 40) == 2)
                    {
                      v138 = *(unsigned int *)(*(_QWORD *)(v137 + 32) + 36);
                      if ((v121 & 0x80000000) != 0)
                        v139 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8);
                      else
                        v139 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v121);
                      v151 = *v139;
                      if (v151
                        && ((*(_BYTE *)(v151 + 3) & 1) != 0
                         || (v151 = *(_QWORD *)(v151 + 24)) != 0 && (*(_BYTE *)(v151 + 3) & 1) != 0))
                      {
                        v152 = *(_QWORD *)(v151 + 8);
                      }
                      else
                      {
                        v152 = 0;
                      }
                      v162 = llvm::MachineInstr::findRegisterDefOperandIdx(v152, v121, 0, 0, 0);
                      if (v162 == -1)
                        v163 = 0;
                      else
                        v163 = *(_QWORD *)(v152 + 32) + 32 * v162;
                      if ((v138 & 0x80000000) != 0)
                        v172 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
                      else
                        v172 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v138);
                      v178 = *v172;
                      if (v178
                        && ((*(_BYTE *)(v178 + 3) & 1) != 0
                         || (v178 = *(_QWORD *)(v178 + 24)) != 0 && (*(_BYTE *)(v178 + 3) & 1) != 0))
                      {
                        v179 = *(_QWORD *)(v178 + 8);
                      }
                      else
                      {
                        v179 = 0;
                      }
                      v186 = llvm::MachineInstr::findRegisterDefOperandIdx(v179, v138, 0, 0, 0);
                      if (v186 == -1)
                        v54 = 0;
                      else
                        v54 = *(_QWORD *)(v179 + 32) + 32 * v186;
                      v193 |= 2u;
                      v53 = v163;
                      v68 = *(unsigned int *)(v163 + 4);
                    }
                  }
                }
              }
            }
          }
        }
        if ((v68 & 0x80000000) != 0)
          v71 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8);
        else
          v71 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v68);
        v72 = *v71;
        if (v72)
        {
          if ((*(_BYTE *)(v72 + 3) & 1) != 0 || (v72 = *(_QWORD *)(v72 + 24)) != 0 && (*(_BYTE *)(v72 + 3) & 1) != 0)
          {
            v124 = *(_QWORD *)(v72 + 8);
            if (v124 && **(_WORD **)(v124 + 16) == 184 && *(_DWORD *)(v124 + 40) == 2)
            {
              v125 = *(unsigned int *)(*(_QWORD *)(v124 + 32) + 36);
              v126 = *(unsigned int *)(v54 + 4);
              v127 = (uint64_t *)((v126 & 0x80000000) != 0
                               ? *(_QWORD *)(a1 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8
                               : *(_QWORD *)(a1 + 272) + 8 * v126);
              v140 = *v127;
              if (v140)
              {
                if ((*(_BYTE *)(v140 + 3) & 1) != 0
                  || (v140 = *(_QWORD *)(v140 + 24)) != 0 && (*(_BYTE *)(v140 + 3) & 1) != 0)
                {
                  v141 = *(_QWORD *)(v140 + 8);
                  if (v141)
                  {
                    if (**(_WORD **)(v141 + 16) == 184 && *(_DWORD *)(v141 + 40) == 2)
                    {
                      v142 = *(unsigned int *)(*(_QWORD *)(v141 + 32) + 36);
                      if ((v125 & 0x80000000) != 0)
                        v143 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
                      else
                        v143 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v125);
                      v153 = *v143;
                      if (v153
                        && ((*(_BYTE *)(v153 + 3) & 1) != 0
                         || (v153 = *(_QWORD *)(v153 + 24)) != 0 && (*(_BYTE *)(v153 + 3) & 1) != 0))
                      {
                        v154 = *(_QWORD *)(v153 + 8);
                      }
                      else
                      {
                        v154 = 0;
                      }
                      v164 = llvm::MachineInstr::findRegisterDefOperandIdx(v154, v125, 0, 0, 0);
                      if (v164 == -1)
                        v165 = 0;
                      else
                        v165 = *(_QWORD *)(v154 + 32) + 32 * v164;
                      if ((v142 & 0x80000000) != 0)
                        v173 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
                      else
                        v173 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v142);
                      v180 = *v173;
                      if (v180
                        && ((*(_BYTE *)(v180 + 3) & 1) != 0
                         || (v180 = *(_QWORD *)(v180 + 24)) != 0 && (*(_BYTE *)(v180 + 3) & 1) != 0))
                      {
                        v181 = *(_QWORD *)(v180 + 8);
                      }
                      else
                      {
                        v181 = 0;
                      }
                      v187 = llvm::MachineInstr::findRegisterDefOperandIdx(v181, v142, 0, 0, 0);
                      if (v187 == -1)
                        v54 = 0;
                      else
                        v54 = *(_QWORD *)(v181 + 32) + 32 * v187;
                      v193 |= 4u;
                      v53 = v165;
                      LODWORD(v68) = *(_DWORD *)(v165 + 4);
                    }
                  }
                }
              }
            }
          }
        }
        if ((v68 & 0x80000000) != 0 && (v68 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432))
          v73 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v68 & 0x7FFFFFFF));
        else
          v73 = 0;
        v74 = *(unsigned int *)(v54 + 4);
        v196 = v13;
        if ((v74 & 0x80000000) != 0 && (v74 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432))
          v75 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v74 & 0x7FFFFFFF));
        else
          v75 = 0;
        v76 = v54;
        v77 = v53;
        v192 = v53;
        if (v73 != v75)
          goto LABEL_128;
        v78 = (uint64_t *)((v68 & 0x80000000) != 0
                        ? *(_QWORD *)(a1 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(a1 + 272) + 8 * v68);
        v79 = *v78;
        v76 = v54;
        v77 = v53;
        if (!v79)
          goto LABEL_128;
        if ((*(_BYTE *)(v79 + 3) & 1) != 0)
        {
          v128 = v53;
        }
        else
        {
          v79 = *(_QWORD *)(v79 + 24);
          v76 = v54;
          v128 = v53;
          v77 = v53;
          if (!v79)
            goto LABEL_128;
          v76 = v54;
          v77 = v53;
          if ((*(_BYTE *)(v79 + 3) & 1) == 0)
            goto LABEL_128;
        }
        v129 = *(_QWORD *)(v79 + 8);
        v76 = v54;
        v77 = v128;
        if (!v129)
          goto LABEL_128;
        v76 = v54;
        v77 = v128;
        if (**(_WORD **)(v129 + 16) != 179)
          goto LABEL_128;
        v76 = v54;
        v77 = v128;
        if (*(_DWORD *)(v129 + 40) != 2)
          goto LABEL_128;
        v130 = (uint64_t *)((v74 & 0x80000000) != 0
                         ? *(_QWORD *)(a1 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(a1 + 272) + 8 * v74);
        v144 = *v130;
        v76 = v54;
        v77 = v53;
        if (!v144)
          goto LABEL_128;
        v145 = *(unsigned int *)(*(_QWORD *)(v129 + 32) + 36);
        if ((*(_BYTE *)(v144 + 3) & 1) != 0)
        {
          v146 = v53;
        }
        else
        {
          v144 = *(_QWORD *)(v144 + 24);
          v76 = v54;
          v146 = v53;
          v77 = v53;
          if (!v144)
            goto LABEL_128;
          v76 = v54;
          v77 = v53;
          if ((*(_BYTE *)(v144 + 3) & 1) == 0)
            goto LABEL_128;
        }
        v155 = *(_QWORD *)(v144 + 8);
        v76 = v54;
        v77 = v146;
        if (v155)
        {
          v76 = v54;
          v77 = v146;
          if (**(_WORD **)(v155 + 16) == 179)
          {
            v76 = v54;
            v77 = v146;
            if (*(_DWORD *)(v155 + 40) == 2)
            {
              v156 = *(_QWORD *)(v155 + 32);
              if ((v145 & 0x80000000) != 0)
                v157 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
              else
                v157 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v145);
              v166 = *(unsigned int *)(v156 + 36);
              v167 = *v157;
              if (*v157
                && ((*(_BYTE *)(v167 + 3) & 1) != 0
                 || (v167 = *(_QWORD *)(v167 + 24)) != 0 && (*(_BYTE *)(v167 + 3) & 1) != 0))
              {
                v168 = *(_QWORD *)(v167 + 8);
              }
              else
              {
                v168 = 0;
              }
              v174 = llvm::MachineInstr::findRegisterDefOperandIdx(v168, v145, 0, 0, 0);
              if (v174 == -1)
                v77 = 0;
              else
                v77 = *(_QWORD *)(v168 + 32) + 32 * v174;
              if ((v166 & 0x80000000) != 0)
                v182 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v166 & 0x7FFFFFFF) + 8);
              else
                v182 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v166);
              v188 = *v182;
              if (v188
                && ((*(_BYTE *)(v188 + 3) & 1) != 0
                 || (v188 = *(_QWORD *)(v188 + 24)) != 0 && (*(_BYTE *)(v188 + 3) & 1) != 0))
              {
                v189 = *(_QWORD *)(v188 + 8);
              }
              else
              {
                v189 = 0;
              }
              v191 = llvm::MachineInstr::findRegisterDefOperandIdx(v189, v166, 0, 0, 0);
              if (v191 == -1)
                v76 = 0;
              else
                v76 = *(_QWORD *)(v189 + 32) + 32 * v191;
            }
          }
        }
LABEL_128:
        v200 = 0;
        v197 = 0;
        v80 = *(_QWORD *)(a1 + 24);
        v81 = *(_QWORD *)(a1 + 272);
        if (!sub_1C4998B14(&v200, v80, v81, *(_DWORD *)(v77 + 4))
          || !sub_1C4998B14(&v197, v80, v81, *(_DWORD *)(v76 + 4)))
        {
          goto LABEL_138;
        }
        v82 = *(_DWORD *)(v77 + 4);
        if (v82 < 0 && (v83 = v82 & 0x7FFFFFFF, v83 < *(_DWORD *)(a1 + 432)))
          v84 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v83);
        else
          v84 = 0;
        v199 = v84;
        v86 = sub_1C4825F50(&v199);
        if ((_DWORD)v85 == 1)
        if ((char *)v200 + (v86 >> 3) == v197)
          v87 = v200 | ((unint64_t)v86 << 32);
        else
LABEL_138:
          v87 = -1;
        if (v193)
          v88 = 0;
        else
          v88 = v87 == 0xFFFFFFFFLL;
        v89 = v194;
        if (!v88)
          v89 = 1;
        if (v89 == 1)
        {
          if (v87 == 0xFFFFFFFFLL)
          {
            v104 = *(_DWORD *)(v192 + 4);
            if (v104 < 0 && (v105 = v104 & 0x7FFFFFFF, v105 < *(_DWORD *)(a1 + 432)))
              v106 = *(void **)(*(_QWORD *)(a1 + 424) + 8 * v105);
            else
              v106 = 0;
            v200 = v106;
            v108 = sub_1C4825F50((unint64_t *)&v200);
            if ((_DWORD)v107 == 1)
            a2[5] = *(_QWORD *)(v196 + 24);
            a2[6] = v196;
            v197 = (char *)(((unint64_t)v108 << 19) | 0x14);
            v198 = 0;
            v109 = *(_DWORD *)(v192 + 4);
            v110 = *(_DWORD *)(v54 + 4);
            v200 = v202;
            v202[0] = v109;
            v202[4] = 0;
            v202[6] = v110;
            v202[10] = 0;
            v201 = 0x800000002;
            (*(void (**)(_QWORD *, uint64_t, char **, uint64_t, _DWORD *, uint64_t, _QWORD))(*a2 + 32))(a2, 77, &v197, 1, v202, 2, 0);
            v112 = v111;
            if (v200 != v202)
              free(v200);
            v90 = (_QWORD *)(a3 + 8);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(a3 + 8));
            llvm::MachineOperand::setReg(a3, *(_DWORD *)(*(_QWORD *)(v112 + 32) + 4));
          }
          else
          {
            v90 = (_QWORD *)(a3 + 8);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(a3 + 8));
            HIDWORD(v91) = (((v87 >> 31) & 0xFFFFFFFE) + 7) >> 3;
            LODWORD(v91) = HIDWORD(v91) - 2;
            v92 = dword_1C6612CBC[(int)(v91 >> 1)];
            v93 = *(_DWORD *)a3;
            if (!*(_DWORD *)a3)
            {
              v94 = *(_QWORD *)(a3 + 16);
              if (v94)
              {
                if (*v90)
                {
                  v95 = *(_QWORD *)(*v90 + 24);
                  if (v95)
                  {
                    v96 = *(_QWORD *)(v95 + 32);
                    if (v96)
                    {
                      v97 = *(_QWORD *)(v96 + 40);
                      v98 = *(unsigned int *)(a3 + 4);
                      if ((v98 & 0x80000000) != 0)
                        v99 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
                      else
                        v99 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v98);
                      v100 = *v99;
                      v101 = *(_QWORD *)(a3 + 24);
                      if (*v99 != a3)
                        v99 = (uint64_t *)(v94 + 24);
                      *v99 = v101;
                      if (v101)
                        v102 = v101;
                      else
                        v102 = v100;
                      *(_QWORD *)(v102 + 16) = v94;
                      *(_QWORD *)(a3 + 16) = 0;
                      *(_QWORD *)(a3 + 24) = 0;
                      v93 = *(_DWORD *)a3;
                    }
                  }
                }
              }
            }
            *(_DWORD *)(a3 + 16) = 64;
            *(_DWORD *)(a3 + 24) = 0;
            *(_DWORD *)a3 = v92 | v93 & 0xFFF00000;
            *(_DWORD *)(a3 + 4) = v87 >> 1;
          }
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 40))(a5, *v90);
          *(_QWORD *)(a4 + 16) |= v193;
          return 1;
        }
        return 0;
      }
      if (v47 <= 0x7C && (((v45 | 0x800000uLL) >> (125 - v47)) & 0x7FFFF) != 0)
      {
        v46 = 0;
        goto LABEL_66;
      }
    }
    v46 = 1;
    goto LABEL_66;
  }
  if (*(_UNKNOWN **)(v24 + 32) == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v24 + 32), (unsigned int *)&v200);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v24 + 32, (unsigned int *)&v200);
  v32 = (uint64_t *)&v200;
  if (v201 >= 0x41)
    v32 = (uint64_t *)v200;
  v33 = *v32;
  if (!v33)
    goto LABEL_43;
  v34 = 0;
  if ((v33 & 0x3F) == 0)
  {
    v35 = (v33 >> 10) & 0x1F;
    if (v35 - 9 <= 0xA)
    {
      if (v35 <= 0xC && (((v33 | 0x400uLL) >> (13 - v35)) & 0x3F) != 0)
      {
        v34 = 0;
        goto LABEL_44;
      }
LABEL_43:
      v34 = 1;
    }
  }
LABEL_44:
  if (v201 >= 0x41 && v200)
    MEMORY[0x1CAA32F9C]();
  if (!v34)
    goto LABEL_55;
  if (*(_UNKNOWN **)(v24 + 32) == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v24 + 32), (unsigned int *)&v200);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v24 + 32, (unsigned int *)&v200);
  v36 = v201;
  v37 = v200;
  v38 = (unsigned int *)&v200;
  if (v201 >= 0x41)
    v38 = (unsigned int *)v200;
  v39 = *v38;
  v40 = (v39 >> 10) & 0x1F;
  v41 = (v39 >> 6) & 0xF;
  if (v40 | v41)
  {
    if (v40 <= 0xC)
    {
      v41 = (v41 | 0x10) >> (13 - v40);
      v40 = 0;
    }
    else
    {
      v40 -= 12;
    }
  }
  v51 = (v39 >> 8) & 0x80 | (16 * v40);
LABEL_173:
  v113 = v51 | v41;
  if (v36 >= 0x41)
  {
    if (v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, *(_QWORD *)(a3 + 8));
  llvm::MachineOperand::ChangeToImmediate((unsigned int *)a3, v113, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 40))(a5, *(_QWORD *)(a3 + 8));
  return 1;
}

uint64_t sub_1C4998998(int a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v2 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v3 = *v2;
  if (!*v2)
    return 1;
  while ((*(_BYTE *)(v3 + 3) & 1) != 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v7 = *(_QWORD *)(v3 + 8);
LABEL_9:
  v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 & 0xFFFE) == 0xB2)
  {
    result = sub_1C4998998(*(unsigned int *)(*(_QWORD *)(v7 + 32) + 4), a2);
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(v3 + 8);
      goto LABEL_28;
    }
    return result;
  }
  result = 0;
  if (**(unsigned __int16 **)(v7 + 16) > 0x104u)
  {
    v10 = (v8 - 314);
    if (v10 > 0x2A)
      goto LABEL_27;
    if (((1 << (v8 - 58)) & 0x40000200003) != 0)
      goto LABEL_28;
    if (v10 != 22)
    {
LABEL_27:
      if (v8 == 261)
        goto LABEL_28;
      return result;
    }
  }
  else
  {
    if ((v8 - 163) <= 0x38 && ((1 << (v8 + 93)) & 0x18800000038540DLL) != 0)
    {
LABEL_28:
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 24);
        if (!v3)
          return 1;
        if ((*(_BYTE *)(v3 + 3) & 1) == 0 && *(_QWORD *)(v3 + 8) != v7)
        {
          v7 = *(_QWORD *)(v3 + 8);
          goto LABEL_9;
        }
      }
    }
    if (v8 != 51)
    {
      if (v8 == 85)
        goto LABEL_28;
      return result;
    }
  }
  v11 = *(_QWORD *)(v7 + 32);
  if (*(_DWORD *)(v11 + 132) != a1 && *(_DWORD *)(v11 + 164) != a1)
    goto LABEL_28;
  return 0;
}

const char *sub_1C4998B04()
{
  return "AGX2PostLegalizerCombiner";
}

uint64_t sub_1C4998B14(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = (uint64_t *)(a2 + 16 * (a4 & 0x7FFFFFFF) + 8);
  if (a4 >= 0)
    v4 = (uint64_t *)(a3 + 8 * a4);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    return 0;
  if (**(_WORD **)(v7 + 16) != 318)
    return 0;
  if (*(_DWORD *)(v7 + 40) != 2)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  if (*(_BYTE *)(v8 + 32) != 1)
    return 0;
  *a1 = *(_QWORD *)(v8 + 48);
  return 1;
}

uint64_t sub_1C4998B9C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 166 || *(_DWORD *)(v7 + 40) != 4)
    return 0;
  v8 = *(_DWORD **)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = v8[9];
  *v9 = v8[17];
  **(_DWORD **)(a1 + 16) = v8[25];
  return 1;
}

uint64_t sub_1C4998C38()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx2 post legalization machine instruction combiner";
  v4.n128_u64[1] = 62;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EC4B0, "enable-agx2-postlegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC4B0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX2 Postlegalizer Combiner";
  v4.n128_u64[1] = 48;
  v3 = 0;
  v1 = 1;
  v2 = &v1;
  sub_1C6144A08((uint64_t)&unk_1ED7EC570, "enable-cse-in-agx2-postlegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC570, &dword_1C475E000);
}

uint64_t sub_1C4998D1C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Combine agx2 machine instrs after selection";
  *(_QWORD *)(v2 + 8) = 43;
  *(_QWORD *)(v2 + 16) = "agx2-postselection-combiner";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC6F0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C614CF9C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4998DB0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int RegSizeInBits;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int i;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD v47[6];
  _DWORD v48[4];

  v5 = **(unsigned __int16 **)(a3 + 16);
  if (v5 != 19)
  {
    if (v5 == 18)
    {
      v7 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
      v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 32);
      v9 = *(_QWORD *)(v8 + 40);
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8), *(_QWORD *)v8);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 184))(v10);
      v13 = v12;
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF));
      v15 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 36);
      v16 = v15 - 1 <= 0x3FFFFFFE
          ? *(_DWORD *)(*(_QWORD *)(v11 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v12, v15, v11) + 24)
                       + *(_DWORD *)(v11 + 272) * ((*(_QWORD *)(v11 + 248) - *(_QWORD *)(v11 + 240)) >> 3)))
          : llvm::TargetRegisterInfo::getRegSizeInBits(v11, v15, v9);
      if (v16 == 32 || v16 == 16)
      {
        v18 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 36);
        if ((v18 & 0x80000000) != 0)
          v19 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        else
          v19 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v18);
        v30 = *v19;
        if ((*(_BYTE *)(v30 + 3) & 1) == 0)
          v30 = *(_QWORD *)(v30 + 24);
        v31 = *(_QWORD *)(v30 + 8);
        if (**(_WORD **)(v31 + 16) == 19)
        {
          v32 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 36);
          if ((v32 & 0x80000000) != 0)
          {
            v33 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16 * (v32 & 0x7FFFFFFF));
            v34 = (v33 & 4) != 0 ? 0 : v33 & 0xFFFFFFFFFFFFFFF8;
            if (!v34 || v34 == (v14 & 0xFFFFFFFFFFFFFFF8))
            {
              if (v34
                || (v7 - 1 <= 0x3FFFFFFE
                  ? (RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v11 + 264)
                                               + 24
                                               * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v13, v7, v11)+ 24)+ *(_DWORD *)(v11 + 272)* ((*(_QWORD *)(v11 + 248) - *(_QWORD *)(v11 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v11, v7, v9)), llvm::TargetRegisterInfo::getRegSizeInBits(v11, v32, v9) == RegSizeInBits))
              {
                v37 = *(_DWORD *)(a3 + 40);
                if (v37 >= 2)
                {
                  if (v16 == 16)
                    v38 = 1;
                  else
                    v38 = 25;
                  v39 = *(_QWORD *)(a3 + 32);
                  for (i = 1; i < v37; i += 2)
                  {
                    v41 = *(unsigned int *)(v39 + 32 * i + 4);
                    if ((v41 & 0x80000000) != 0)
                      v42 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                    else
                      v42 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v41);
                    v43 = *v42;
                    if ((*(_BYTE *)(v43 + 3) & 1) == 0)
                      v43 = *(_QWORD *)(v43 + 24);
                    v44 = *(_QWORD *)(v43 + 8);
                    if (**(_WORD **)(v44 + 16) != 19)
                      return 0;
                    v45 = *(_QWORD *)(v44 + 32);
                    if (*(_DWORD *)(v45 + 36) != v32)
                      return 0;
                    result = 0;
                    v46 = *(_QWORD *)(v39 + 32 * (i + 1) + 16);
                    if (v46 != v38 + (i >> 1) || v46 != (((unint64_t)*(unsigned int *)(v45 + 32) >> 8) & 0xFFF))
                      return result;
                  }
                }
                a4[5] = *(_QWORD *)(a3 + 24);
                a4[6] = a3;
                v48[0] = v7;
                v48[2] = 1;
                v47[0] = v32;
                v47[4] = 0;
                (*(void (**)(_QWORD *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a4 + 32))(a4, 19, v48, 1, v47, 1, 0);
                v28 = *(_QWORD *)(a3 + 24);
                v29 = a3;
                if ((*(_BYTE *)a3 & 4) == 0)
                {
                  v29 = a3;
                  if ((*(_WORD *)(a3 + 44) & 8) != 0)
                  {
                    v29 = a3;
                    do
                      v29 = *(_QWORD *)(v29 + 8);
                    while ((*(_WORD *)(v29 + 44) & 8) != 0);
                  }
                }
LABEL_19:
                sub_1C487FE80(v28 + 40, a3, *(_QWORD *)(v29 + 8));
                return 1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  result = 0;
  v21 = *(_QWORD *)(a3 + 32);
  v22 = *(_DWORD *)(v21 + 36);
  if ((v22 & 0x80000000) != 0)
  {
    v23 = *(_DWORD *)(v21 + 4);
    if (v23 < 0)
    {
      v24 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 40);
      v25 = v23 & 0x7FFFFFFF;
      if ((*(_QWORD *)(v24[3] + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v24[3] + 16 * v25) & 0xFFFFFFFFFFFFFFF8))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*v24 + 16) + 176))(*(_QWORD *)(*v24 + 16));
        v26 = *(_QWORD *)(v24[3] + 16 * v25 + 8);
        if (v26)
        {
          do
          {
            v27 = *(_QWORD *)(v26 + 24);
            llvm::MachineOperand::setReg(v26, v22);
            v26 = v27;
          }
          while (v27);
        }
        v28 = *(_QWORD *)(a3 + 24);
        v29 = a3;
        if ((*(_BYTE *)a3 & 4) == 0)
        {
          v29 = a3;
          if ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            v29 = a3;
            do
              v29 = *(_QWORD *)(v29 + 8);
            while ((*(_WORD *)(v29 + 44) & 8) != 0);
          }
        }
        goto LABEL_19;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C49991DC()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable the agx2 post selection machine instruction combiner";
  v3.n128_u64[1] = 59;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EC630, "enable-agx2-postselection-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC630, &dword_1C475E000);
}

uint64_t sub_1C499925C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  sub_1C54EB3A8(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Combine agx2 machine instrs before legalization";
  *(_QWORD *)(v2 + 8) = 47;
  *(_QWORD *)(v2 + 16) = "agx2-prelegalizer-combiner";
  *(_QWORD *)(v2 + 24) = 26;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC700;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C614D184;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4999300(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = 0;
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0 || !byte_1ED7EC790)
    return v2;
  v5 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetPassConfig::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetPassConfig::ID);
  v8 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &unk_1EF8F7108);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &unk_1EF8F7108);
  if (word_1ED7EC7D8)
  {
    if (byte_1ED7EC850)
    {
LABEL_9:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 288))(&v16, v7);
      sub_1C54EB0C0(v10 + 248, &v16, 0);
      v11 = v16;
      v16 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 280))(v7))
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 552))
    llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2);
  v12 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &unk_1EF8F7110);
  v14 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &unk_1EF8F7110);
  sub_1C491CBCC(v14, a2);
  return sub_1C54F59B4();
}

uint64_t sub_1C4999534(uint64_t a1, llvm::ConstantInt *****a2, unint64_t a3, uint64_t a4)
{
  llvm::ConstantInt *****v6;
  uint64_t v7;
  llvm::ConstantInt *****v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  llvm::MachineFunction *v21;
  llvm::MachineInstr *v22;
  llvm::MachineInstr *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  char v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  void (**v41)(uint64_t *);
  void **v42;
  void (**v43)(void **);
  unsigned int v44;
  uint64_t (**v45)();
  uint64_t (**v46)();
  int v47;
  int64_t v48;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  _DWORD *v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  char v94;
  const char *v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t (***v100)();
  void (**v101)(uint64_t (***)());
  uint64_t *v102;
  void (**v103)(uint64_t *);
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8x8_t v108;
  int v109;
  size_t v110;
  uint64_t (**v111)();
  unint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint8x8_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *i;
  llvm::MachineFunction *v127;
  llvm::MachineInstr *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int GenericVirtualRegister;
  uint64_t v159;
  llvm::MachineFunction *v160;
  unint64_t *v161;
  unint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  llvm::MachineMemOperand *MachineMemOperand;
  llvm::MachineFunction *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  unsigned int v188;
  uint64_t (**v189)();
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  void **v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  llvm::ConstantInt *****v210[8];
  void *v211;
  uint64_t v212;
  unint64_t *v213;
  void **v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  void **v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t (**v226)();
  uint64_t (*v227)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  int8x8_t *v228;
  uint64_t v229;
  unint64_t *v230;
  int v231;
  char v232;
  unint64_t *v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::ConstantInt ******)(a1 + 32);
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(llvm::ConstantInt ******)(v7 + 40);
  v210[0] = (llvm::ConstantInt *****)a4;
  v210[1] = v8;
  v210[2] = a2;
  v210[3] = v6;
  v210[4] = 0;
  v210[5] = 0;
  v210[6] = (llvm::ConstantInt *****)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 184))(*(_QWORD *)(v7 + 16));
  v210[7] = (llvm::ConstantInt *****)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 16)
                                                                       + 176))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16));
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a4 + 48) = a3;
  v10 = **(unsigned __int16 **)(a3 + 16);
  if (v10 > 0x7D)
  {
    if (**(unsigned __int16 **)(a3 + 16) > 0xB3u)
    {
      if (v10 - 180 >= 2)
      {
        if (v10 == 206)
          return sub_1C54F6F7C((uint64_t *)v210, a3);
        return sub_1C49AB388((uint64_t)v210, a3);
      }
      v36 = *(_QWORD *)(a3 + 32);
      v37 = *(unsigned int *)(v36 + 36);
      if ((v37 & 0x80000000) != 0)
        v38 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
      else
        v38 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v37);
      v88 = *v38;
      if ((*(_BYTE *)(v88 + 3) & 1) == 0)
        v88 = *(_QWORD *)(v88 + 24);
      v89 = *(_QWORD *)(v88 + 8);
      if ((**(_WORD **)(v89 + 16) & 0xFFFE) == 0x74)
      {
        v90 = *(unsigned int *)(v89 + 40);
        if ((_DWORD)v90)
        {
          v91 = *(_QWORD *)(v89 + 32);
          v92 = (_DWORD *)(v91 + 16);
          v93 = v90;
          while (*((_BYTE *)v92 - 16) != 17)
          {
            v92 += 8;
            if (!--v93)
              goto LABEL_171;
          }
          if (*v92 == 2445)
          {
            v125 = 47;
          }
          else
          {
LABEL_171:
            for (i = (_DWORD *)(v91 + 16); *((_BYTE *)i - 16) != 17; i += 8)
            {
              if (!--v90)
                return sub_1C49AB388((uint64_t)v210, a3);
            }
            if (*i != 2446)
              return sub_1C49AB388((uint64_t)v210, a3);
            v125 = 48;
          }
          LODWORD(v229) = *(_DWORD *)(v36 + 4);
          LODWORD(v230) = 1;
          v127 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 320, &v229, 1, 0, 0, 0);
          LODWORD(v211) = 1;
          v212 = 0;
          v213 = (unint64_t *)v125;
          llvm::MachineInstr::addOperand(v128, v127, (const llvm::MachineOperand *)&v211);
          v24 = *(_QWORD *)(a3 + 24);
          v25 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v25 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v25 = a3;
              do
                v25 = *(_QWORD *)(v25 + 8);
              while ((*(_WORD *)(v25 + 44) & 8) != 0);
            }
          }
          goto LABEL_218;
        }
      }
    }
    else
    {
      switch(v10)
      {
        case 0x7Eu:
          v74 = *(_QWORD *)(a3 + 32);
          v75 = *(_DWORD *)(v74 + 4);
          if (v75 < 0)
          {
            v76 = *(unsigned int *)(v9 + 432);
            if ((v75 & 0x7FFFFFFFu) < v76)
            {
              v77 = *(_QWORD *)(v9 + 424);
              if (*(_QWORD *)(v77 + 8 * (v75 & 0x7FFFFFFF)) == 513)
              {
                v78 = *(unsigned int *)(v74 + 36);
                v79 = (uint64_t *)((v78 & 0x80000000) != 0
                                ? *(_QWORD *)(v9 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8
                                : *(_QWORD *)(v9 + 272) + 8 * v78);
                v171 = *v79;
                if (v171)
                {
                  if ((*(_BYTE *)(v171 + 3) & 1) != 0
                    || (v171 = *(_QWORD *)(v171 + 24)) != 0 && (*(_BYTE *)(v171 + 3) & 1) != 0)
                  {
                    v172 = *(_QWORD *)(v171 + 8);
                    if (v172)
                    {
                      if (**(_WORD **)(v172 + 16) == 119 && *(_DWORD *)(v172 + 40) == 2)
                      {
                        v173 = *(_DWORD *)(*(_QWORD *)(v172 + 32) + 36);
                        if ((v78 & 0x80000000) != 0 && (v174 = v78 & 0x7FFFFFFF, v174 < v76))
                          v175 = *(_QWORD *)(v77 + 8 * v174);
                        else
                          v175 = 0;
                        v208 = v175;
                        if (v173 < 0 && (v173 & 0x7FFFFFFFu) < v76)
                          v186 = *(_QWORD *)(v77 + 8 * (v173 & 0x7FFFFFFF));
                        else
                          v186 = 0;
                        v188 = sub_1C4825F50(&v208);
                        if ((_DWORD)v187 == 1)
                        LODWORD(v227) = v188;
                        if (v188 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v226, -1, 1);
                          v188 = v227;
                          v189 = v226;
                        }
                        else
                        {
                          if (v188)
                            v189 = (uint64_t (**)())(0xFFFFFFFFFFFFFFFFLL >> -(char)v188);
                          else
                            v189 = 0;
                          v226 = v189;
                        }
                        v204 = v186;
                        v205 = 0;
                        v190 = (uint64_t *)&v226;
                        if (v188 >= 0x41)
                          v190 = (uint64_t *)v189;
                        v191 = sub_1C5544694(a4, (unint64_t *)&v204, *v190);
                        v229 = v186;
                        LODWORD(v230) = 0;
                        LODWORD(v211) = v173;
                        LODWORD(v213) = 0;
                        v214 = (void **)v191;
                        v215 = v192;
                        v216 = 1;
                        v193 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v229, 1, &v211, 2, 0);
                        LODWORD(v229) = v75;
                        LODWORD(v230) = 1;
                        v211 = v193;
                        v212 = v194;
                        LODWORD(v213) = 1;
                        sub_1C5546B4C((uint64_t *)a4, 126, (unint64_t *)&v229, (int *)&v211);
                        v195 = a3;
                        if ((*(_BYTE *)a3 & 4) == 0)
                        {
                          v195 = a3;
                          if ((*(_WORD *)(a3 + 44) & 8) != 0)
                          {
                            v195 = a3;
                            do
                              v195 = *(_QWORD *)(v195 + 8);
                            while ((*(_WORD *)(v195 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v195 + 8));
                        if (v188 >= 0x41 && v189)
                          MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 0x88u:
          v80 = *(_DWORD **)(a3 + 32);
          v81 = v80[1];
          if (v81 < 0)
          {
            v82 = v81 & 0x7FFFFFFF;
            if (v82 < *(_DWORD *)(v9 + 432) && *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v82) == 9)
            {
              v83 = v80[9];
              v84 = v80[17];
              v85 = v80[25];
              v86 = sub_1C554C050(v84, v9);
              if (v83 == v84 || v87 && v86)
              {
                LODWORD(v229) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
                LODWORD(v230) = 1;
                LODWORD(v211) = v83;
                LODWORD(v213) = 0;
                LODWORD(v214) = v85;
                v216 = 0;
                (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 66, &v229, 1, &v211, 2, 0);
                v24 = *(_QWORD *)(a3 + 24);
                v25 = a3;
                if ((*(_BYTE *)a3 & 4) == 0)
                {
                  v25 = a3;
                  if ((*(_WORD *)(a3 + 44) & 8) != 0)
                  {
                    v25 = a3;
                    do
                      v25 = *(_QWORD *)(v25 + 8);
                    while ((*(_WORD *)(v25 + 44) & 8) != 0);
                  }
                }
                goto LABEL_218;
              }
            }
          }
          break;
        case 0xA8u:
          v13 = *(_DWORD **)(a3 + 32);
          LODWORD(v226) = v13[1];
          v14 = v13[9];
          if ((int)v14 >= 0)
            v15 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v14);
          else
            v15 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
          v16 = *v15;
          if ((*(_BYTE *)(v16 + 3) & 1) == 0)
            v16 = *(_QWORD *)(v16 + 24);
          v17 = *(_QWORD *)(v16 + 8);
          if (**(_WORD **)(v17 + 16) == 121)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 48);
            if (v18)
            {
              v19 = v13[17];
              LODWORD(v212) = 64;
              v211 = (void *)0x3FF0000000000000;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v229, (const llvm::APInt **)&v211);
              v212 = v229;
              v213 = v230;
              LODWORD(v214) = v231;
              BYTE4(v214) = v232 & 0xF;
              llvm::APFloat::convert((uint64_t)&v211, *(void **)(v18 + 32), 1, &v229);
              v20 = sub_1C47ECB98(v18 + 24, (uint64_t)&v211);
              if ((_UNKNOWN *)v212 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v213);
              }
              else if ((*(_DWORD *)(v212 + 8) - 64) <= 0xFFFFFF7F && v213)
              {
                MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
              }
              if (v20)
              {
                v21 = sub_1C5547D24((_QWORD *)a4, 253, (int *)&v226, 1, 0);
                v23 = v22;
                v212 = 0;
                v213 = 0;
                LODWORD(v211) = 0;
                HIDWORD(v211) = v19;
                v214 = 0;
                llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v211);
                *((_WORD *)v23 + 22) = *((_WORD *)v23 + 22) & 0xC | *(_WORD *)(a3 + 44) & 0xFFF3;
                v24 = *(_QWORD *)(a3 + 24);
                v25 = a3;
                if ((*(_BYTE *)a3 & 4) == 0)
                {
                  v25 = a3;
                  if ((*(_WORD *)(a3 + 44) & 8) != 0)
                  {
                    v25 = a3;
                    do
                      v25 = *(_QWORD *)(v25 + 8);
                    while ((*(_WORD *)(v25 + 44) & 8) != 0);
                  }
                }
                goto LABEL_218;
              }
            }
          }
          break;
      }
    }
    return sub_1C49AB388((uint64_t)v210, a3);
  }
  if (**(unsigned __int16 **)(a3 + 16) > 0x4Cu)
  {
    if (v10 != 77)
    {
      if (v10 == 79)
        return sub_1C54F6ACC((uint64_t *)v210, (llvm::MachineInstr *)a3);
      if (v10 == 90)
      {
        v26 = *(_QWORD *)(a3 + 32);
        v27 = *(_DWORD *)(v26 + 4);
        if (v27 < 0 && (v27 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v27 & 0x7FFFFFFF));
          if ((v28 & 0xFFFFFFFFFFFFFFF9) != 0
            && (*(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v27 & 0x7FFFFFFF)) & 6) == 2)
          {
            v30 = 35;
            if ((v28 & 4) == 0)
              v30 = 19;
            v31 = (v28 >> v30) & 0xFFFFFF;
            if ((_DWORD)v31 == 3 || (_DWORD)v31 == 0)
            {
              v33 = *(_DWORD *)(v26 + 36);
              v34 = *(_QWORD *)(a3 + 48);
              if ((v34 & 7) != 0)
              {
                v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              else
              {
                v35 = v34 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(a3 + 48) = v34 & 0xFFFFFFFFFFFFFFF8;
              }
              MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32), v35, 0, 257);
              v229 = 257;
              LODWORD(v230) = 0;
              LODWORD(v211) = v33;
              LODWORD(v213) = 0;
              v177 = sub_1C55464EC((_QWORD *)a4, 0x5Au, (int *)&v229, (int *)&v211, MachineMemOperand);
              LODWORD(v229) = v27;
              LODWORD(v230) = 1;
              v211 = v177;
              v212 = v178;
              LODWORD(v213) = 1;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 81, &v229, 1, &v211, 1, 0);
              v24 = *(_QWORD *)(a3 + 24);
              v25 = a3;
              if ((*(_BYTE *)a3 & 4) == 0)
              {
                v25 = a3;
                if ((*(_WORD *)(a3 + 44) & 8) != 0)
                {
                  v25 = a3;
                  do
                    v25 = *(_QWORD *)(v25 + 8);
                  while ((*(_WORD *)(v25 + 44) & 8) != 0);
                }
              }
              goto LABEL_218;
            }
          }
        }
      }
      return sub_1C49AB388((uint64_t)v210, a3);
    }
    v70 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
    if (v70 < 0 && (v71 = v70 & 0x7FFFFFFF, v71 < *(_DWORD *)(v9 + 432)))
    {
      v72 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v71);
      v208 = v72;
      if ((v72 & 2) != 0)
      {
        v73 = 0;
LABEL_118:
        v96 = sub_1C4825F50(&v208);
        if ((_DWORD)v95 == 1)
        {
          if (!v73)
            return sub_1C49AB388((uint64_t)v210, a3);
        }
        else if (!v73)
        {
          return sub_1C49AB388((uint64_t)v210, a3);
        }
        if (v96 - 16 > 0x30 || ((1 << (v96 - 16)) & 0x1000000010001) == 0)
          return sub_1C49AB388((uint64_t)v210, a3);
        v200 = v96;
        v211 = &v213;
        v212 = 0x800000000;
        if (*(_DWORD *)(a3 + 40) < 2u)
        {
LABEL_155:
          v117 = v212;
          v118 = v208;
          v119 = 0x800000000000000;
          if ((v208 & 2) == 0)
            v119 = 0x8000000000000;
          if ((v119 & v208) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v95);
            v118 = v208;
          }
          v120 = (unsigned __int16)(v118 >> 3);
          if (v120 == v117)
          {
            v121 = 0;
            v122 = 0;
            v123 = 0;
            while (1)
            {
              if ((v118 & 2) != 0)
                v124 = 0x800000000000000;
              else
                v124 = 0x8000000000000;
              if ((v124 & v118) != 0)
              {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v95);
                v118 = v208;
              }
              if (v121 >= (unsigned __int16)(v118 >> 3))
                break;
              v123 |= (unint64_t)*((unsigned __int8 *)v211 + v122) << v122;
              v122 += 8;
              ++v121;
            }
            v229 = (8 * v200) | 1;
            LODWORD(v230) = 0;
            v129 = sub_1C5544694(a4, (unint64_t *)&v229, v123);
            LODWORD(v226) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
            LODWORD(v227) = 1;
            v229 = v129;
            v230 = v130;
            v231 = 1;
            sub_1C5546EF4((uint64_t *)a4, (uint64_t *)&v226, (int *)&v229);
            v131 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v131 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v131 = a3;
                do
                  v131 = *(_QWORD *)(v131 + 8);
                while ((*(_WORD *)(v131 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v131 + 8));
          }
          if (v211 != &v213)
            free(v211);
          if (v120 == v117)
            return 1;
          return sub_1C49AB388((uint64_t)v210, a3);
        }
        v97 = 1;
        v98 = 36;
        while (1)
        {
          v99 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + v98);
          v229 = (uint64_t)&off_1E816EFF0;
          v230 = (unint64_t *)sub_1C554C894;
          v233 = (unint64_t *)&v229;
          v226 = &off_1E816F038;
          v227 = sub_1C554C8B0;
          v228 = (int8x8_t *)&v226;
          sub_1C554C3AC(v99, v9, (uint64_t)&v229, (uint64_t)&v226, 0, 0, &v204);
          v100 = (uint64_t (***)())v228;
          if (v228 == (int8x8_t *)&v226)
            break;
          if (v228)
          {
            v101 = (void (**)(uint64_t (***)()))(*(_QWORD *)v228 + 40);
            goto LABEL_126;
          }
LABEL_127:
          v102 = (uint64_t *)v233;
          if (v233 == (unint64_t *)&v229)
          {
            v103 = (void (**)(uint64_t *))(v229 + 32);
            v102 = &v229;
LABEL_129:
            (*v103)(v102);
            goto LABEL_130;
          }
          if (v233)
          {
            v103 = (void (**)(uint64_t *))(*v233 + 40);
            goto LABEL_129;
          }
LABEL_130:
          if (v206)
          {
            v104 = v205;
            v105 = v204;
            if (v205 > 0x40)
              v106 = *(_QWORD *)v204;
            else
              v106 = v204 << -(char)v205 >> -(char)v205;
            v107 = v212;
            if (v212 >= (unint64_t)HIDWORD(v212))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)&v213, v212 + 1, 8);
              v107 = v212;
            }
            *((_QWORD *)v211 + v107) = v106;
            LODWORD(v212) = v212 + 1;
            if (v104 >= 0x41 && v105)
              MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
            ++v97;
            v98 += 32;
            if (v97 < *(unsigned int *)(a3 + 40))
              continue;
          }
          goto LABEL_155;
        }
        v101 = (void (**)(uint64_t (***)()))(v226 + 4);
        v100 = &v226;
LABEL_126:
        (*v101)(v100);
        goto LABEL_127;
      }
    }
    else
    {
      v72 = 0;
      v208 = 0;
    }
    v94 = 3;
    if ((v72 & 1) == 0)
      v94 = 19;
    v73 = (v72 & 0x8000000000000000 | (8 * (v72 >> v94))) == 64;
    goto LABEL_118;
  }
  if (v10 - 61 < 2)
  {
    v39 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 68);
    v211 = &off_1E816EFF0;
    v212 = (uint64_t)sub_1C554C7E0;
    v214 = &v211;
    v229 = (uint64_t)&off_1E816F038;
    v230 = (unint64_t *)sub_1C554C7F8;
    v233 = (unint64_t *)&v229;
    sub_1C554C3AC(v39, v9, (uint64_t)&v211, (uint64_t)&v229, 1, 0, &v226);
    v40 = (uint64_t *)v233;
    if (v233 == (unint64_t *)&v229)
    {
      v41 = (void (**)(uint64_t *))(v229 + 32);
      v40 = &v229;
    }
    else
    {
      if (!v233)
      {
LABEL_52:
        v42 = v214;
        if (v214 == &v211)
        {
          v43 = (void (**)(void **))((char *)v211 + 32);
          v42 = &v211;
        }
        else
        {
          if (!v214)
          {
LABEL_55:
            if (!(_BYTE)v228)
              return sub_1C49AB388((uint64_t)v210, a3);
            v44 = v227;
            v45 = v226;
            v46 = v226;
            if (v227 >= 0x41)
            {
              v47 = 0;
              v48 = ((unint64_t)v227 + 63) >> 6;
              do
              {
                if (v48-- < 1)
                  break;
                v50 = (unint64_t)v226[v48];
                v47 += __clz(v50);
              }
              while (!v50);
              v51 = v227 | 0xFFFFFFC0;
              if ((v227 & 0x3F) == 0)
                v51 = 0;
              if ((_DWORD)v227 - v47 - v51 > 0x40)
                goto LABEL_65;
              v46 = (uint64_t (**)())*v226;
            }
            if (!v46)
            {
              v109 = 2;
              goto LABEL_239;
            }
LABEL_65:
            v52 = *(_QWORD *)(a3 + 32);
            v53 = *(_DWORD *)(v52 + 4);
            if (v53 < 0 && (v53 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432))
              v54 = *(void **)(*(_QWORD *)(v9 + 424) + 8 * (v53 & 0x7FFFFFFF));
            else
              v54 = 0;
            if (v227 > 0x40)
            {
              v110 = (((unint64_t)v227 + 63) >> 3) & 0x3FFFFFF8;
              v111 = (uint64_t (**)())operator new[]();
              memcpy(v111, v45, v110);
              v112 = 0;
              v113 = 0;
              v114 = *(_QWORD *)(a3 + 32);
              v115 = *(_DWORD *)(v114 + 36);
              v53 = *(_DWORD *)(v114 + 4);
              do
              {
                v116 = (uint8x8_t)vcnt_s8((int8x8_t)v111[v112 / 8]);
                v116.i16[0] = vaddlv_u8(v116);
                v113 += v116.i32[0];
                v112 += 8;
              }
              while (v110 != v112);
              if (v113 != 1)
              {
                v109 = 2;
LABEL_236:
                MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
                goto LABEL_237;
              }
              if ((((unint64_t)v111[(v44 - 1) >> 6] >> (v44 - 1)) & 1) != 0)
              {
                v109 = 2;
                goto LABEL_234;
              }
              v211 = v54;
              LODWORD(v212) = 0;
              v45 = (uint64_t (**)())*v111;
            }
            else
            {
              v108 = (uint8x8_t)vcnt_s8((int8x8_t)v226);
              v108.i16[0] = vaddlv_u8(v108);
              if (v108.u32[0] != 1 || (((unint64_t)v226 >> (v227 - 1)) & 1) != 0)
              {
                v109 = 2;
LABEL_237:
                if (!(_BYTE)v228)
                  goto LABEL_242;
                v44 = v227;
LABEL_239:
                if (v44 >= 0x41 && v226)
                  MEMORY[0x1CAA32F9C](v226, 0x1000C8000313F17);
LABEL_242:
                if (v109 != 2)
                  return 1;
                return sub_1C49AB388((uint64_t)v210, a3);
              }
              v115 = *(_DWORD *)(v52 + 36);
              v211 = v54;
              v111 = v226;
              LODWORD(v212) = 0;
            }
            v146 = sub_1C5544694(a4, (unint64_t *)&v211, (uint64_t)v45 - 1);
            v148 = v147;
            if (**(_WORD **)(a3 + 16) == 61)
            {
              v229 = (uint64_t)v54;
              LODWORD(v230) = 0;
              LODWORD(v211) = v115;
              LODWORD(v213) = 0;
              v214 = (void **)v146;
              v215 = v147;
              v216 = 1;
              v149 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v229, 1, &v211, 2, 0);
              v201 = v150;
              v202 = (void **)v149;
              v211 = v54;
              LODWORD(v212) = 0;
              v151 = (uint64_t)v111;
              if (v44 >= 0x41)
                v151 = (uint64_t)*v111;
              v152 = sub_1C5544694(a4, (unint64_t *)&v211, -v151);
              v229 = (uint64_t)v54;
              LODWORD(v230) = 0;
              LODWORD(v211) = v115;
              LODWORD(v213) = 0;
              v214 = (void **)v152;
              v215 = v153;
              v216 = 1;
              v154 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 66, &v229, 1, &v211, 2, 0);
              v197 = v155;
              v198 = v154;
              v211 = v54;
              LODWORD(v212) = 0;
              v199 = v115;
              v196 = sub_1C5544694(a4, (unint64_t *)&v211, 0);
              v157 = v156;
              GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9, (uint64_t)v54, "", 0);
              LODWORD(v229) = GenericVirtualRegister;
              LODWORD(v230) = 1;
              LODWORD(v211) = 32;
              LODWORD(v213) = 2;
              v214 = v202;
              v215 = v201;
              v216 = 1;
              v217 = v196;
              v218 = v157;
              v219 = 1;
              v220 = v202;
              v221 = v201;
              v222 = 1;
              v223 = v198;
              v224 = v197;
              v225 = 1;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 51, &v229, 1, &v211, 5, 0);
              LODWORD(v229) = v53;
              LODWORD(v230) = 1;
              LODWORD(v211) = 40;
              LODWORD(v213) = 2;
              LODWORD(v214) = v199;
              v216 = 0;
              v217 = v196;
              v218 = v157;
              v219 = 1;
              LODWORD(v220) = GenericVirtualRegister;
              v222 = 0;
              v223 = (uint64_t)v202;
              v224 = v201;
              v225 = 1;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 51, &v229, 1, &v211, 5, 0);
            }
            else
            {
              v160 = sub_1C55437B8((_QWORD *)a4, 0x41u);
              v161 = (unint64_t *)v159;
              v162 = *(unint64_t **)(a4 + 48);
              v163 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 40);
              *(_QWORD *)(v159 + 24) = v163;
              v164 = *(_QWORD *)(v163 + 32);
              v165 = *(unsigned int *)(v159 + 40);
              if ((_DWORD)v165)
              {
                v179 = *(_QWORD *)(v159 + 32);
                v180 = *(_QWORD *)(v164 + 40);
                v181 = 32 * v165;
                do
                {
                  if (!*(_BYTE *)v179)
                  {
                    v182 = *(unsigned int *)(v179 + 4);
                    if ((int)v182 >= 0)
                      v183 = (uint64_t *)(*(_QWORD *)(v180 + 272) + 8 * v182);
                    else
                      v183 = (uint64_t *)(*(_QWORD *)(v180 + 24) + 16 * (v182 & 0x7FFFFFFF) + 8);
                    v184 = *v183;
                    if (*v183)
                    {
                      v185 = *(_QWORD *)(v184 + 16);
                      *(_QWORD *)(v184 + 16) = v179;
                      *(_QWORD *)(v179 + 16) = v185;
                      if ((*(_BYTE *)(v179 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v179 + 24) = v184;
                      }
                      else
                      {
                        *(_QWORD *)(v179 + 24) = 0;
                        v183 = (uint64_t *)(v185 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v179 + 16) = v179;
                      *(_QWORD *)(v179 + 24) = 0;
                    }
                    *v183 = v179;
                  }
                  v179 += 32;
                  v181 -= 32;
                }
                while (v181);
              }
              v166 = *(_QWORD *)(v164 + 728);
              if (v166)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 24))(v166, v159);
              v167 = *v162 & 0xFFFFFFFFFFFFFFF8;
              *v161 = v167 | *v161 & 7;
              v161[1] = (unint64_t)v162;
              *(_QWORD *)(v167 + 8) = v161;
              *v162 = *v162 & 7 | (unint64_t)v161;
              v168 = *(_QWORD *)(a4 + 56);
              if (v168)
                (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v168 + 24))(v168, v161);
              v212 = 0;
              v213 = 0;
              v214 = 0;
              LODWORD(v211) = 0x1000000;
              HIDWORD(v211) = v53;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v160, (const llvm::MachineOperand *)&v211);
              v212 = 0;
              v213 = 0;
              LODWORD(v211) = 0;
              HIDWORD(v211) = v115;
              v214 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v160, (const llvm::MachineOperand *)&v211);
              v169 = *(_DWORD *)(*(_QWORD *)(v148 + 32) + 4);
              v212 = 0;
              v213 = 0;
              LODWORD(v211) = 0;
              HIDWORD(v211) = v169;
              v214 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v160, (const llvm::MachineOperand *)&v211);
            }
            v170 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v170 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v170 = a3;
                do
                  v170 = *(_QWORD *)(v170 + 8);
                while ((*(_WORD *)(v170 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v170 + 8));
            v109 = 1;
LABEL_234:
            if (v44 < 0x41 || !v111)
              goto LABEL_237;
            goto LABEL_236;
          }
          v43 = (void (**)(void **))((char *)*v214 + 40);
        }
        (*v43)(v42);
        goto LABEL_55;
      }
      v41 = (void (**)(uint64_t *))(*v233 + 40);
    }
    (*v41)(v40);
    goto LABEL_52;
  }
  if (v10 - 65 >= 2)
    return sub_1C49AB388((uint64_t)v210, a3);
  v11 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
  if ((v11 & 0x80000000) != 0 && (v11 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v9 + 432))
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v11 & 0x7FFFFFFF));
  else
    v12 = 0;
  v204 = v12;
  v209 = 0;
  v207 = 0;
  v208 = 0;
  v211 = &v209;
  v212 = (uint64_t)&v208;
  v213 = &v207;
  LODWORD(v229) = v11;
  if (!sub_1C499ABFC((uint64_t)&v211, v9, (unsigned int *)&v229))
    goto LABEL_77;
  v55 = __clz(__rbit64(v207));
  if ((v55 - 1) > 3)
    goto LABEL_77;
  v56 = v207 >> v55;
  if (!(v207 >> v55) || ((v56 + 1) & v56) != 0)
    goto LABEL_77;
  v57 = v208 + v55;
  v58 = sub_1C4825F50((unint64_t *)&v204);
  if ((_DWORD)v59 == 1)
  {
    v203 = v58;
    v58 = v203;
  }
  if (v57 >= v58)
  {
LABEL_77:
    v211 = &v209;
    v212 = (uint64_t)&v208;
    v213 = &v207;
    LODWORD(v229) = v11;
    if (sub_1C499ADF0((uint64_t)&v211, v9, (unsigned int *)&v229) && (uint64_t)v208 >= 1 && v208 <= 4)
    {
      if ((v11 & 0x80000000) != 0)
        v68 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
      else
        v68 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v11);
      v132 = *v68;
      if (!v132)
      {
LABEL_215:
        v229 = v204;
        LODWORD(v230) = 0;
        LODWORD(v211) = v209;
        LODWORD(v213) = 0;
        v226 = (uint64_t (**)())v204;
        LODWORD(v227) = 0;
        v214 = (void **)sub_1C5544694(a4, (unint64_t *)&v226, v207 >> v208);
        v215 = v142;
        v216 = 1;
        v143 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v229, 1, &v211, 2, 0);
        LODWORD(v229) = v11;
        LODWORD(v230) = 1;
        v211 = v143;
        v212 = v144;
        LODWORD(v213) = 1;
        v226 = (uint64_t (**)())v204;
        LODWORD(v227) = 0;
        v67 = v208;
        v66 = a4;
        goto LABEL_216;
      }
      if ((*(_BYTE *)(v132 + 3) & 0x81) != 0)
      {
        do
        {
          v132 = *(_QWORD *)(v132 + 24);
          if (!v132)
            goto LABEL_215;
        }
        while ((*(_DWORD *)v132 & 0x81000000) != 0);
      }
      v133 = *(_QWORD *)(v132 + 8);
      if (**(_WORD **)(v133 + 16) == 45)
      {
LABEL_196:
        v134 = *(_QWORD *)(v133 + 32);
        v135 = *(unsigned int *)(v134 + 36);
        if ((v135 & 0x80000000) != 0)
          v136 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v135 & 0x7FFFFFFF) + 8);
        else
          v136 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v135);
        v137 = *v136;
        if ((*(_BYTE *)(v137 + 3) & 1) == 0)
          v137 = *(_QWORD *)(v137 + 24);
        if (**(_WORD **)(*(_QWORD *)(v137 + 8) + 16) != 127)
        {
          v138 = *(unsigned int *)(v134 + 68);
          if ((v138 & 0x80000000) != 0)
            v139 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
          else
            v139 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v138);
          v140 = *v139;
          if ((*(_BYTE *)(v140 + 3) & 1) == 0)
            v140 = *(_QWORD *)(v140 + 24);
          if (**(_WORD **)(*(_QWORD *)(v140 + 8) + 16) != 127)
          {
            while (1)
            {
              v132 = *(_QWORD *)(v132 + 24);
              if (!v132)
                goto LABEL_215;
              if ((*(_DWORD *)v132 & 0x81000000) == 0)
              {
                v141 = *(_QWORD *)(v132 + 8);
                if (v141 != v133)
                {
                  v133 = *(_QWORD *)(v132 + 8);
                  if (**(_WORD **)(v141 + 16) == 45)
                    goto LABEL_196;
                  break;
                }
              }
            }
          }
        }
      }
    }
    if ((sub_1C499FBDC(v210, a3) & 1) != 0 || (sub_1C49A5774((uint64_t *)v210, a3) & 1) != 0)
      return 1;
    return sub_1C49AB388((uint64_t)v210, a3);
  }
  v229 = v204;
  LODWORD(v230) = 0;
  LODWORD(v211) = v209;
  LODWORD(v213) = 0;
  v226 = (uint64_t (**)())v204;
  LODWORD(v227) = 0;
  v214 = (void **)sub_1C5544694(a4, (unint64_t *)&v226, v57);
  v215 = v60;
  v216 = 1;
  v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 128, &v229, 1, &v211, 2, 0);
  v229 = v204;
  LODWORD(v230) = 0;
  v211 = v61;
  v212 = v62;
  LODWORD(v213) = 1;
  v226 = (uint64_t (**)())v204;
  LODWORD(v227) = 0;
  v214 = (void **)sub_1C5544694(a4, (unint64_t *)&v226, v56);
  v215 = v63;
  v216 = 1;
  v64 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v229, 1, &v211, 2, 0);
  LODWORD(v229) = v11;
  LODWORD(v230) = 1;
  v211 = v64;
  v212 = v65;
  LODWORD(v213) = 1;
  v226 = (uint64_t (**)())v204;
  LODWORD(v227) = 0;
  v66 = a4;
  v67 = v55;
LABEL_216:
  v214 = (void **)sub_1C5544694(v66, (unint64_t *)&v226, v67);
  v215 = v145;
  v216 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 127, &v229, 1, &v211, 2, 0);
  v24 = *(_QWORD *)(a3 + 24);
  v25 = a3;
  if ((*(_BYTE *)a3 & 4) == 0)
  {
    v25 = a3;
    if ((*(_WORD *)(a3 + 44) & 8) != 0)
    {
      v25 = a3;
      do
        v25 = *(_QWORD *)(v25 + 8);
      while ((*(_WORD *)(v25 + 44) & 8) != 0);
    }
  }
LABEL_218:
  sub_1C487FE80(v24 + 40, a3, *(_QWORD *)(v25 + 8));
  return 1;
}

const char *sub_1C499ABEC()
{
  return "AGX2PreLegalizerCombiner";
}

uint64_t sub_1C499ABFC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 65 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  if (sub_1C499AD0C(a1, a2, *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36)))
  {
    v8 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 68), a2);
    if (v9)
    {
      **(_QWORD **)(a1 + 16) = v8;
      return 1;
    }
  }
  v10 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 36), a2);
  if (!v11)
    return 0;
  **(_QWORD **)(a1 + 16) = v10;
  return sub_1C499AD0C(a1, a2, *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68));
}

uint64_t sub_1C499AD0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (v4)
  {
    v6 = v4;
    if ((*(_DWORD *)v4 & 0x1000000) == 0)
      goto LABEL_8;
    v6 = v4;
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 24);
      if (!v6)
        break;
      if ((*(_BYTE *)(v6 + 3) & 1) == 0)
      {
LABEL_8:
        while (1)
        {
          v6 = *(_QWORD *)(v6 + 24);
          if (!v6)
            break;
          if ((*(_BYTE *)(v6 + 3) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)v4 & 0x1000000) != 0 || (v4 = *(_QWORD *)(v4 + 24)) != 0 && (*(_BYTE *)(v4 + 3) & 1) != 0)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            if (**(_WORD **)(v7 + 16) == 128 && *(_DWORD *)(v7 + 40) == 3)
            {
              v9 = *(_QWORD *)(v7 + 32);
              **(_DWORD **)a1 = *(_DWORD *)(v9 + 36);
              v10 = sub_1C554C050(*(_DWORD *)(v9 + 68), a2);
              if (v11)
              {
                **(_QWORD **)(a1 + 8) = v10;
                return 1;
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1C499ADF0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 65 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  if (sub_1C499AF00(a1, a2, *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36)))
  {
    v8 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 68), a2);
    if (v9)
    {
      **(_QWORD **)(a1 + 16) = v8;
      return 1;
    }
  }
  v10 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 36), a2);
  if (!v11)
    return 0;
  **(_QWORD **)(a1 + 16) = v10;
  return sub_1C499AF00(a1, a2, *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68));
}

uint64_t sub_1C499AF00(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (v4)
  {
    v6 = v4;
    if ((*(_DWORD *)v4 & 0x1000000) == 0)
      goto LABEL_8;
    v6 = v4;
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 24);
      if (!v6)
        break;
      if ((*(_BYTE *)(v6 + 3) & 1) == 0)
      {
LABEL_8:
        while (1)
        {
          v6 = *(_QWORD *)(v6 + 24);
          if (!v6)
            break;
          if ((*(_BYTE *)(v6 + 3) & 1) == 0)
            return 0;
        }
        if ((*(_DWORD *)v4 & 0x1000000) != 0 || (v4 = *(_QWORD *)(v4 + 24)) != 0 && (*(_BYTE *)(v4 + 3) & 1) != 0)
        {
          v7 = *(_QWORD *)(v4 + 8);
          if (v7)
          {
            if (**(_WORD **)(v7 + 16) == 127 && *(_DWORD *)(v7 + 40) == 3)
            {
              v9 = *(_QWORD *)(v7 + 32);
              **(_DWORD **)a1 = *(_DWORD *)(v9 + 36);
              v10 = sub_1C554C050(*(_DWORD *)(v9 + 68), a2);
              if (v11)
              {
                **(_QWORD **)(a1 + 8) = v10;
                return 1;
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1C499AFE4()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx2 pre legalization machine instruction combiner";
  v4.n128_u64[1] = 61;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EC710, "enable-agx2-prelegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC710, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX2 Prelegalizer Combiner";
  v4.n128_u64[1] = 47;
  v3 = 0;
  v1 = 1;
  v2 = &v1;
  sub_1C6144A08((uint64_t)&unk_1ED7EC7D0, "enable-cse-in-agx2-prelegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EC7D0, &dword_1C475E000);
}

uint64_t sub_1C499B0C8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Experimental copy LICM pass";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "agx2-copy-licm";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EC890;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C499B22C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C499B16C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC890) = &off_1E7FA82E0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EC898);
  if (v3 != -1)
  {
    v7[0] = sub_1C499B0C8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EC898, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C499B22C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C499B16C(v0);
}

void sub_1C499B254(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C499B2E8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C499B374(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  *((_BYTE *)this + 160) = 1;
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C499B3E8(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  void (**v13)(void);
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  __int16 v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int *v38;
  unint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  unint64_t FirstTerminator;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  llvm::LiveInterval *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int v80;
  int32x2_t *v81;
  int32x2_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t **v85;
  unint64_t *v86;
  int v87;
  int v88;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  llvm::LiveInterval *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v105;
  uint64_t v106;
  int v107;
  llvm::LiveInterval *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v123;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *LoopPreheader;
  void *v129[2];
  _BYTE v130[64];
  void *v131;
  uint64_t v132;
  _BYTE v133[64];
  _QWORD v134[3];
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD v138[10];

  v138[8] = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::MachineLoopInfo::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MachineLoopInfo::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v9 = *(char **)(v6 + 272);
  v10 = *(char **)(v6 + 280);
  v136 = v138;
  v137 = 0x800000000;
  sub_1C499C3FC((unsigned int *)&v136, v9, v10);
  v11 = *(uint64_t **)(v6 + 272);
  v12 = *(uint64_t **)(v6 + 280);
  v134[0] = &off_1E7FA83A0;
  v134[1] = &v136;
  v135 = v134;
  sub_1C614D1D4(v11, v12, (uint64_t)v134);
  if (v135 == v134)
  {
    v13 = (void (**)(void))(v134[0] + 32);
  }
  else
  {
    if (!v135)
      goto LABEL_10;
    v13 = (void (**)(void))(*v135 + 40);
  }
  (*v13)();
LABEL_10:
  v14 = v137;
  if ((_DWORD)v137)
  {
    while (1)
    {
      v15 = v136[v14 - 1];
      LODWORD(v137) = v14 - 1;
      v16 = **(_QWORD **)(v15 + 32);
      v127 = v15;
      LoopPreheader = (unsigned int *)llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(v15);
      if (LoopPreheader)
        break;
LABEL_162:
      v14 = v137;
      if (!(_DWORD)v137)
        goto LABEL_163;
    }
    v131 = v133;
    v132 = 0x800000000;
    v17 = *(_QWORD *)(v16 + 56);
    if (v17 == v16 + 48)
    {
      v20 = v133;
LABEL_160:
      if (v20 != v133)
        free(v20);
      goto LABEL_162;
    }
    v18 = 0;
    do
    {
      if (**(_WORD **)(v17 + 16) == 19)
      {
        v19 = *(_QWORD *)(v17 + 32);
        if ((*(_DWORD *)(v19 + 4) & 0x80000000) != 0 && (*(_DWORD *)(v19 + 36) & 0x80000000) != 0)
        {
          if (v18 >= HIDWORD(v132))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v133, v18 + 1, 8);
            v18 = v132;
          }
          *((_QWORD *)v131 + v18) = v17;
          v18 = v132 + 1;
          LODWORD(v132) = v132 + 1;
        }
      }
      if ((*(_BYTE *)v17 & 4) == 0)
      {
        while ((*(_WORD *)(v17 + 44) & 8) != 0)
          v17 = *(_QWORD *)(v17 + 8);
      }
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17 != v16 + 48);
    v20 = (char *)v131;
    if (!v18)
      goto LABEL_160;
    v126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 288) + 392)
                     + 16 * *(unsigned int *)(v16 + 24));
    v125 = (char *)v131 + 8 * v18;
    while (1)
    {
      v21 = *(unint64_t **)v20;
      v22 = *(_WORD *)(*(_QWORD *)v20 + 44);
      v23 = *(_QWORD *)v20;
      if ((v22 & 4) != 0)
      {
        do
          v23 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v23 + 44) & 4) != 0);
      }
      v24 = *(unint64_t **)v20;
      if ((v22 & 8) != 0)
      {
        do
          v24 = (unint64_t *)v24[1];
        while ((*((_WORD *)v24 + 22) & 8) != 0);
      }
      v25 = v24[1];
      if (v23 != v25)
      {
        while (1)
        {
          v26 = **(unsigned __int16 **)(v23 + 16);
          v27 = v26 > 0x17;
          v28 = (1 << v26) & 0x83E000;
          v29 = v27 || v28 == 0;
          if (v29)
            break;
          v23 = *(_QWORD *)(v23 + 8);
          if (v23 == v25)
          {
            v23 = v25;
            break;
          }
        }
      }
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 288);
      v31 = *(_QWORD *)(v30 + 368);
      v32 = *(unsigned int *)(v30 + 384);
      if ((_DWORD)v32)
      {
        LODWORD(v33) = ((v23 >> 4) ^ (v23 >> 9)) & (v32 - 1);
        v34 = (uint64_t *)(v31 + 16 * v33);
        v35 = *v34;
        if (v23 == *v34)
          goto LABEL_44;
        v36 = 1;
        while (v35 != -4096)
        {
          v37 = v33 + v36++;
          v33 = v37 & (v32 - 1);
          v35 = *(_QWORD *)(v31 + 16 * v33);
          if (v23 == v35)
          {
            v34 = (uint64_t *)(v31 + 16 * v33);
            goto LABEL_44;
          }
        }
      }
      v34 = (uint64_t *)(v31 + 16 * v32);
LABEL_44:
      v38 = (unsigned int *)v21[4];
      v39 = v34[1] & 0xFFFFFFFFFFFFFFF8 | 4;
      v40 = sub_1C499BEB4(a1, v126, v127, v39, v38);
      v41 = sub_1C499BEB4(a1, v126, v127, v39, v38 + 8);
      if (v40)
        v42 = v41 == 0;
      else
        v42 = 1;
      if (!v42)
      {
        FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)LoopPreheader);
        v44 = (unint64_t *)FirstTerminator;
        v45 = *(_QWORD *)(a1 + 248);
        v46 = *(_QWORD *)(v45 + 288);
        if (LoopPreheader + 12 == (unsigned int *)FirstTerminator)
        {
          v61 = (uint64_t *)(*(_QWORD *)(v46 + 392) + 16 * LoopPreheader[6] + 8);
        }
        else
        {
          v47 = *(_WORD *)(FirstTerminator + 44);
          v48 = FirstTerminator;
          if ((v47 & 4) != 0)
          {
            v48 = FirstTerminator;
            do
              v48 = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v48 + 44) & 4) != 0);
          }
          v49 = FirstTerminator;
          if ((v47 & 8) != 0)
          {
            v49 = FirstTerminator;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
          v50 = *(_QWORD *)(v49 + 8);
          if (v48 != v50)
          {
            while (1)
            {
              v51 = **(unsigned __int16 **)(v48 + 16);
              v27 = v51 > 0x17;
              v52 = (1 << v51) & 0x83E000;
              if (v27 || v52 == 0)
                break;
              v48 = *(_QWORD *)(v48 + 8);
              if (v48 == v50)
              {
                v48 = v50;
                break;
              }
            }
          }
          v54 = *(_QWORD *)(v46 + 368);
          v55 = *(unsigned int *)(v46 + 384);
          if ((_DWORD)v55)
          {
            LODWORD(v56) = ((v48 >> 4) ^ (v48 >> 9)) & (v55 - 1);
            v57 = (uint64_t *)(v54 + 16 * v56);
            v58 = *v57;
            if (v48 != *v57)
            {
              v59 = 1;
              while (v58 != -4096)
              {
                v60 = v56 + v59++;
                v56 = v60 & (v55 - 1);
                v58 = *(_QWORD *)(v54 + 16 * v56);
                if (v48 == v58)
                {
                  v57 = (uint64_t *)(v54 + 16 * v56);
                  goto LABEL_66;
                }
              }
              goto LABEL_65;
            }
          }
          else
          {
LABEL_65:
            v57 = (uint64_t *)(v54 + 16 * v55);
          }
LABEL_66:
          v61 = v57 + 1;
        }
        if ((*v38 & 0xFFF00) != 0)
        {
          v62 = *v61;
          v63 = v38[1];
          if ((v63 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v45 + 416)
            || (v64 = *(llvm::LiveInterval **)(*(_QWORD *)(v45 + 408) + 8 * (v63 & 0x7FFFFFFF))) == 0)
          {
            v64 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 248), v63);
            v118 = *(_QWORD *)(v45 + 304);
            v119 = *(_QWORD *)(v45 + 248);
            *(_QWORD *)v118 = v119;
            *(_QWORD *)(v118 + 8) = *(_QWORD *)(v119 + 40);
            *(_OWORD *)(v118 + 16) = *(_OWORD *)(v45 + 288);
            *(_QWORD *)(v118 + 32) = v45 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v118);
            *(_DWORD *)(v118 + 184) = 0;
            v120 = *(_QWORD *)(v45 + 256);
            v29 = *(_BYTE *)(v120 + 16) == 0;
            v121 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v120 + 24) + 16
                                                                            * (*((_DWORD *)v64 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v123 = !v29 && v121 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v45 + 304), v64, v123);
            llvm::LiveIntervals::computeDeadValues(v45, (uint64_t)v64, 0);
          }
          v65 = *((_DWORD *)v64 + 2);
          v66 = *(_QWORD **)v64;
          if (v65)
          {
            v67 = v66[3 * v65 - 2];
            v68 = *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24) | (v62 >> 1) & 3;
            v69 = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
            v70 = *(_QWORD **)v64;
            v71 = *((unsigned int *)v64 + 2);
            if (v68 < v69)
            {
              do
              {
                v72 = v71 >> 1;
                v73 = v70[3 * (v71 >> 1) + 1];
                LODWORD(v73) = (v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
                v71 -= (v71 >> 1) + 1;
                v74 = v68 >= v73;
                if (v68 >= v73)
                  v75 = v72 + 1;
                else
                  v75 = 0;
                v70 += 3 * v75;
                if (!v74)
                  v71 = v72;
              }
              while (v71);
              goto LABEL_81;
            }
          }
          else
          {
            v65 = 0;
          }
          v70 = &v66[3 * v65];
LABEL_81:
          if (v70 == &v66[3 * v65]
            || ((*v70 >> 1) & 3 | *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24) | (v62 >> 1) & 3))
          {
            v76 = *(_QWORD *)(a1 + 256);
            v77 = v38[1];
            if ((v77 & 0x80000000) != 0)
              v78 = (unsigned int **)(*(_QWORD *)(v76 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8);
            else
              v78 = (unsigned int **)(*(_QWORD *)(v76 + 272) + 8 * v77);
            v79 = *v78;
            if (v79)
            {
              while (1)
              {
                v80 = *v79;
                if ((*v79 & 0x80000000) == 0)
                  break;
                v79 = (unsigned int *)*((_QWORD *)v79 + 3);
                if (!v79)
                  goto LABEL_89;
              }
LABEL_96:
              if ((v80 & 0x10000FF) == 0x1000000 && (v80 & 0xFFF00) != 0)
                *v79 = v80 & 0xEFFFFFFF;
              while (1)
              {
                v79 = (unsigned int *)*((_QWORD *)v79 + 3);
                if (!v79)
                  break;
                v80 = *v79;
                if ((*v79 & 0x80000000) == 0)
                  goto LABEL_96;
              }
            }
LABEL_89:
            *v38 |= 0x10000000u;
          }
        }
        sub_1C48532D0((unint64_t *)LoopPreheader, v44, (unint64_t *)v16, v21);
        v81 = *(int32x2_t **)(*(_QWORD *)(a1 + 248) + 288);
        v82 = v81[46];
        v83 = v81[48].u32[0];
        if ((_DWORD)v83)
        {
          LODWORD(v84) = (v83 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          v85 = (unint64_t **)(*(_QWORD *)&v82 + 16 * v84);
          v86 = *v85;
          if (*v85 != v21)
          {
            v87 = 1;
            while (v86 != (unint64_t *)-4096)
            {
              v88 = v84 + v87++;
              v84 = v88 & (v83 - 1);
              v86 = *(unint64_t **)(*(_QWORD *)&v82 + 16 * v84);
              if (v86 == v21)
              {
                v85 = (unint64_t **)(*(_QWORD *)&v82 + 16 * v84);
                goto LABEL_105;
              }
            }
            goto LABEL_104;
          }
        }
        else
        {
LABEL_104:
          v85 = (unint64_t **)(*(_QWORD *)&v82 + 16 * v83);
        }
LABEL_105:
        if (v85 != (unint64_t **)(*(_QWORD *)&v82 + 16 * v83))
        {
          v90 = (unint64_t)v85[1] & 0xFFFFFFFFFFFFFFF8;
          *v85 = (unint64_t *)-8192;
          v81[47] = vadd_s32(v81[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v90 + 16) = 0;
          v81 = *(int32x2_t **)(*(_QWORD *)(a1 + 248) + 288);
        }
        sub_1C4850BC8((uint64_t)v81, (uint64_t)v21, 0);
        v91 = *(_QWORD *)(a1 + 248);
        v92 = v38[1] & 0x7FFFFFFF;
        v93 = *(_QWORD *)(v91 + 408);
        v94 = *(_QWORD *)(v93 + 8 * v92);
        if (v94)
        {
          v95 = *(_QWORD *)(v94 + 104);
          if (v95)
          {
            do
            {
              v110 = *(_QWORD *)(v95 + 96);
              v109 = *(_QWORD *)(v95 + 104);
              *(_QWORD *)(v95 + 96) = 0;
              if (v110)
              {
                sub_1C47655E8(v110, *(_QWORD **)(v110 + 8));
                MEMORY[0x1CAA32FC0](v110, 0x1020C4062D53EE8);
              }
              v111 = *(void **)(v95 + 64);
              if (v111 != (void *)(v95 + 80))
                free(v111);
              if (*(_QWORD *)v95 != v95 + 16)
                free(*(void **)v95);
              v95 = v109;
            }
            while (v109);
          }
          v96 = *(_QWORD *)(v94 + 96);
          *(_QWORD *)(v94 + 96) = 0;
          *(_QWORD *)(v94 + 104) = 0;
          if (v96)
          {
            sub_1C47655E8(v96, *(_QWORD **)(v96 + 8));
            MEMORY[0x1CAA32FC0](v96, 0x1020C4062D53EE8);
          }
          v97 = *(void **)(v94 + 64);
          if (v97 != (void *)(v94 + 80))
            free(v97);
          if (*(_QWORD *)v94 != v94 + 16)
            free(*(void **)v94);
          MEMORY[0x1CAA32FC0](v94, 0x10A0C408DA535C6);
          v93 = *(_QWORD *)(v91 + 408);
        }
        *(_QWORD *)(v93 + 8 * v92) = 0;
        v98 = *(_QWORD *)(a1 + 248);
        v99 = (llvm::LiveInterval *)sub_1C4851220(v98, v38[1]);
        v100 = *(_QWORD *)(v98 + 304);
        v101 = *(_QWORD *)(v98 + 248);
        *(_QWORD *)v100 = v101;
        *(_QWORD *)(v100 + 8) = *(_QWORD *)(v101 + 40);
        *(_OWORD *)(v100 + 16) = *(_OWORD *)(v98 + 288);
        *(_QWORD *)(v100 + 32) = v98 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v100);
        *(_DWORD *)(v100 + 184) = 0;
        v102 = *(_QWORD *)(v98 + 256);
        v29 = *(_BYTE *)(v102 + 16) == 0;
        v103 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v102 + 24) + 16 * (*((_DWORD *)v99 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v105 = !v29 && v103 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v98 + 304), v99, v105);
        llvm::LiveIntervals::computeDeadValues(v98, (uint64_t)v99, 0);
        v106 = *(_QWORD *)(a1 + 248);
        v107 = v38[9];
        if ((v107 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v106 + 416)
          || (v108 = *(llvm::LiveInterval **)(*(_QWORD *)(v106 + 408) + 8 * (v107 & 0x7FFFFFFF))) == 0)
        {
          v108 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 248), v107);
          v112 = *(_QWORD *)(v106 + 304);
          v113 = *(_QWORD *)(v106 + 248);
          *(_QWORD *)v112 = v113;
          *(_QWORD *)(v112 + 8) = *(_QWORD *)(v113 + 40);
          *(_OWORD *)(v112 + 16) = *(_OWORD *)(v106 + 288);
          *(_QWORD *)(v112 + 32) = v106 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v112);
          *(_DWORD *)(v112 + 184) = 0;
          v114 = *(_QWORD *)(v106 + 256);
          v29 = *(_BYTE *)(v114 + 16) == 0;
          v115 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v114 + 24) + 16 * (*((_DWORD *)v108 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v117 = !v29 && v115 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v106 + 304), v108, v117);
          llvm::LiveIntervals::computeDeadValues(v106, (uint64_t)v108, 0);
        }
        llvm::LiveIntervals::shrinkToUses((_QWORD *)v106, (uint64_t)v108, 0);
        v129[0] = v130;
        v129[1] = (void *)0x800000000;
        llvm::LiveIntervals::splitSeparateComponents(*(_QWORD *)(a1 + 248), v99, (uint64_t)v129);
        if (v129[0] != v130)
          free(v129[0]);
      }
      v20 += 8;
      if (v20 == v125)
      {
        v20 = (char *)v131;
        goto LABEL_160;
      }
    }
  }
LABEL_163:
  if (v136 != v138)
    free(v136);
  return 0;
}

uint64_t sub_1C499BEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  llvm::LiveInterval *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[16];
  void *v73;
  uint64_t v74;
  _QWORD v75[3];

  v75[2] = *MEMORY[0x1E0C80C00];
  v73 = v75;
  v74 = 0x200000000;
  v10 = *a5;
  if ((*a5 & 0xFFF00) != 0)
  {
    v70 = v72;
    v71 = 0x200000000;
    v49 = *(_QWORD *)(a1 + 248);
    v50 = a5[1];
    if ((v50 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v49 + 416)
      || (v51 = *(_QWORD *)(*(_QWORD *)(v49 + 408) + 8 * (v50 & 0x7FFFFFFF))) == 0)
    {
      v51 = sub_1C4851220(*(_QWORD *)(a1 + 248), v50);
      v64 = *(_QWORD *)(v49 + 304);
      v65 = *(_QWORD *)(v49 + 248);
      *(_QWORD *)v64 = v65;
      *(_QWORD *)(v64 + 8) = *(_QWORD *)(v65 + 40);
      *(_OWORD *)(v64 + 16) = *(_OWORD *)(v49 + 288);
      *(_QWORD *)(v64 + 32) = v49 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v64);
      *(_DWORD *)(v64 + 184) = 0;
      v66 = *(_QWORD *)(v49 + 256);
      v56 = *(_BYTE *)(v66 + 16) == 0;
      v67 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * (*(_DWORD *)(v51 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v69 = !v56 && v67 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v49 + 304), (llvm::LiveInterval *)v51, v69);
      llvm::LiveIntervals::computeDeadValues(v49, v51, 0);
      v10 = *a5;
    }
    v52 = *(_QWORD *)(v51 + 104);
    if (v52)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 232) + 8 * ((v10 >> 8) & 0xFFF));
      while (1)
      {
        v54 = *(_QWORD *)(v52 + 112);
        v55 = v54 & v53;
        v56 = (v54 & v53) == 0 || v55 == v54;
        if (!v56)
          break;
        if (v55)
        {
          v57 = v71;
          if (v71 >= (unint64_t)HIDWORD(v71))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v71 + 1, 8);
            v57 = v71;
          }
          *((_QWORD *)v70 + v57) = v52;
          LODWORD(v71) = v71 + 1;
        }
        v52 = *(_QWORD *)(v52 + 104);
        if (!v52)
          goto LABEL_68;
      }
      LODWORD(v71) = 0;
    }
LABEL_68:
    sub_1C614D378((uint64_t)&v73, (uint64_t)&v70);
    if (v70 != v72)
      free(v70);
    v15 = v74;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 248);
    v12 = a5[1];
    if ((v12 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v11 + 416)
      && (v13 = *(llvm::LiveInterval **)(*(_QWORD *)(v11 + 408) + 8 * (v12 & 0x7FFFFFFF))) != 0)
    {
      v14 = 0;
    }
    else
    {
      v13 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 248), v12);
      v58 = *(_QWORD *)(v11 + 304);
      v59 = *(_QWORD *)(v11 + 248);
      *(_QWORD *)v58 = v59;
      *(_QWORD *)(v58 + 8) = *(_QWORD *)(v59 + 40);
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v11 + 288);
      *(_QWORD *)(v58 + 32) = v11 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v58);
      *(_DWORD *)(v58 + 184) = 0;
      v60 = *(_QWORD *)(v11 + 256);
      v56 = *(_BYTE *)(v60 + 16) == 0;
      v61 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v60 + 24) + 16 * (*((_DWORD *)v13 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v63 = !v56 && v61 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v11 + 304), v13, v63);
      llvm::LiveIntervals::computeDeadValues(v11, (uint64_t)v13, 0);
      v14 = v74;
      if (v74 >= HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, (uint64_t)v75, v74 + 1, 8);
        v14 = v74;
      }
    }
    *((_QWORD *)v73 + v14) = v13;
    v15 = v74 + 1;
    LODWORD(v74) = v74 + 1;
  }
  v16 = (uint64_t **)v73;
  v17 = (uint64_t **)((char *)v73 + 8 * v15);
  if ((*((_BYTE *)a5 + 3) & 1) != 0)
  {
    if (v15)
    {
      while (1)
      {
        v39 = *((unsigned int *)*v16 + 2);
        if ((_DWORD)v39)
        {
          v40 = 0;
          v41 = 24 * v39;
          v42 = (uint64_t *)(**v16 + 16);
          do
          {
            v43 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 288), *(v42 - 2));
            v44 = sub_1C477672C(a3 + 56, v43);
            v45 = *(_QWORD *)(a3 + 64);
            if (v45 == *(_QWORD *)(a3 + 56))
              v46 = 76;
            else
              v46 = 72;
            if (v44 != (_QWORD *)(v45 + 8 * *(unsigned int *)(a3 + v46)))
            {
              if (v40)
              {
                v47 = 0;
                goto LABEL_51;
              }
              v40 = *v42;
            }
            v42 += 3;
            v41 -= 24;
          }
          while (v41);
        }
        if (++v16 == v17)
        {
          v47 = 1;
          goto LABEL_51;
        }
      }
    }
LABEL_48:
    v47 = 1;
    goto LABEL_51;
  }
  if (!v15)
    goto LABEL_48;
  v18 = a2 & 0xFFFFFFFFFFFFFFF8;
  v19 = (a2 >> 1) & 3;
  while (1)
  {
    v20 = *((_DWORD *)*v16 + 2);
    v21 = **v16;
    if (!v20)
    {
      v25 = 0;
LABEL_19:
      v26 = (_QWORD *)(v21 + 24 * v25);
      goto LABEL_20;
    }
    v22 = *(_QWORD *)(v21 + 24 * v20 - 16);
    v23 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
    v24 = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
    v25 = *((unsigned int *)*v16 + 2);
    v26 = (_QWORD *)**v16;
    v27 = v25;
    if (v23 >= v24)
      goto LABEL_19;
    do
    {
      v28 = v27 >> 1;
      v29 = v26[3 * (v27 >> 1) + 1];
      LODWORD(v29) = (v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
      v27 -= (v27 >> 1) + 1;
      v30 = v23 >= v29;
      if (v23 >= v29)
        v31 = v28 + 1;
      else
        v31 = 0;
      v26 += 3 * v31;
      if (!v30)
        v27 = v28;
    }
    while (v27);
    v25 = *((unsigned int *)*v16 + 2);
LABEL_20:
    v32 = (_QWORD *)(v21 + 24 * v25);
    if (v26 == v32 || (*(_BYTE *)(v26[2] + 8) & 6) == 0)
      break;
    if (v20)
    {
      v33 = *(_DWORD *)(v18 + 24) | v19;
      if (v33 < ((*(v32 - 2) >> 1) & 3 | *(_DWORD *)((*(v32 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v32 = (_QWORD *)**v16;
        do
        {
          v34 = v25 >> 1;
          v35 = v32[3 * (v25 >> 1) + 1];
          LODWORD(v35) = (v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
          v25 -= (v25 >> 1) + 1;
          v36 = v33 >= v35;
          if (v33 >= v35)
            v37 = v34 + 1;
          else
            v37 = 0;
          v32 += 3 * v37;
          if (!v36)
            v25 = v34;
        }
        while (v25);
      }
    }
    if (v32 != v26)
      break;
    v38 = *(_DWORD *)(v18 + 24) | v19;
    if (((*v26 >> 1) & 3 | *(_DWORD *)((*v26 & 0xFFFFFFFFFFFFFFF8) + 24)) > v38
      || v38 >= ((v26[1] >> 1) & 3 | *(_DWORD *)((v26[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      break;
    }
    if (++v16 == v17)
      goto LABEL_48;
  }
  v47 = 0;
LABEL_51:
  if (v73 != v75)
    free(v73);
  return v47;
}

unsigned int *sub_1C499C3FC(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

void sub_1C499C488()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C499C49C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA83A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C499C4D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FA83A0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C499C4EC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_1C499C548(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  if (a2 >= 8 && (v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
  {
    v3 = (_QWORD *)(v2 + 24);
  }
  else
  {
    v4 = *(unsigned int *)(a1 + 544);
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
      v6 = *(_QWORD **)(a1 + 536);
      v7 = *(unsigned int *)(a1 + 544);
      do
      {
        v8 = v7 >> 1;
        v9 = &v6[2 * (v7 >> 1)];
        v11 = *v9;
        v10 = v9 + 2;
        v7 += ~(v7 >> 1);
        if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) < v5)
          v6 = v10;
        else
          v7 = v8;
      }
      while (v7);
      if (v6 == (_QWORD *)(*(_QWORD *)(a1 + 536) + 16 * v4)
        || ((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24)) > v5)
      {
        v6 -= 2;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a1 + 536);
    }
    v3 = v6 + 1;
  }
  return *v3;
}

uint64_t sub_1C499C600(uint64_t result, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(void **)(a3 + 8);
  if (v3 == a2)
  {
    v3 = a2;
  }
  else if (a2 == &unk_1C866F15C || a2 == &unk_1C866F198 || a2 == &unk_1C866F184)
  {
    v5 = a3;
    v6 = result;
    llvm::APFloat::convert(a3, a2, 1, &v7);
    a3 = v5;
    result = v6;
    v3 = *(void **)(v5 + 8);
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 == &unk_1C866F1C0)
  {
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
    *(_BYTE *)(result + 28) = *(_BYTE *)(result + 28) & 0xF0 | *(_BYTE *)(a3 + 28) & 0xF;
  }
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(a3 + 8) = &unk_1C866F210;
  return result;
}

uint64_t sub_1C499C6C0(unsigned __int8 ***a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t *v17;
  void *v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  _BOOL4 v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 **v64;
  const llvm::APFloat *v65;
  llvm::APFloatBase *v66;
  uint64_t v67;
  unsigned __int8 **v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t **v80;
  uint64_t **v81;
  uint64_t **v82;
  unint64_t v83;
  uint64_t *v84;
  int v85;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  const llvm::APFloat *v93;
  unsigned __int8 **v94;
  llvm::APFloatBase *v95;
  uint64_t v96;
  unsigned __int8 **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  int v104;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t **v109;
  uint64_t **v110;
  uint64_t **v111;
  unint64_t v112;
  uint64_t *v113;
  int v114;
  _BOOL4 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  const llvm::APFloat *v122;
  unsigned __int8 **v123;
  llvm::APFloatBase *v124;
  uint64_t v125;
  unsigned __int8 **v126;
  uint64_t v127;
  _DWORD *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  unsigned __int8 **v132;
  const llvm::APFloat *v133;
  llvm::APFloatBase *v134;
  uint64_t v135;
  unsigned __int8 **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  char v144;
  uint64_t v145;
  const llvm::DILocation *v146;
  const llvm::DILocation *v147;
  char v148;
  const llvm::DILocation *v149;
  char v150;
  int *v151;
  char v152;
  const llvm::DILocation *v153;
  char v154;
  int *v155;
  unsigned __int8 **v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 **v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  int v231;
  _BOOL4 v233;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  int v245;
  _BOOL4 v247;
  uint64_t v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  int v257;
  _BOOL4 v259;
  uint64_t v260;
  uint64_t **v261;
  uint64_t **v262;
  unint64_t v263;
  uint64_t *v264;
  unsigned __int8 **v265;
  const llvm::APFloat *v266;
  llvm::APFloatBase *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  char *v281;
  uint64_t v282;
  unsigned __int8 **v284;
  const llvm::APFloat *v285;
  llvm::APFloatBase *v286;
  uint64_t v287;
  unsigned __int8 **v288;
  uint64_t v289;
  unsigned __int8 ***v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _OWORD v296[2];
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int16 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  _DWORD *v308;
  char *v309;
  uint64_t **v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _DWORD v314[4];
  int v315;
  _DWORD *v316;
  uint64_t *v317;
  int v318;
  char v319;
  char v320[8];
  uint64_t v321;
  uint64_t *v322;
  int v323;
  char v324;
  char v325[8];
  uint64_t v326;
  uint64_t *v327;
  int v328;
  char v329;
  unint64_t v330;
  _DWORD *v331;
  uint64_t *v332;
  int v333;
  char v334;
  char v335[8];
  uint64_t v336;
  uint64_t *v337;
  int v338;
  char v339;
  unsigned int v340;
  _DWORD *v341;
  uint64_t *v342;
  int v343;
  char v344;
  char v345[8];
  uint64_t v346;
  uint64_t *v347;
  int v348;
  char v349;
  uint64_t v350;

  v350 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) == 163)
  {
    v4 = (*a1)[1];
    v5 = *((_QWORD *)v4 + 5);
    v6 = *((_QWORD *)v4 + 1);
    v7 = *(_OWORD *)(v6 + 1024);
    v296[0] = *(_OWORD *)(v6 + 1008);
    v296[1] = v7;
    v8 = *(_QWORD *)(v6 + 1048);
    v297 = *(_QWORD *)(v6 + 1040);
    v298 = v8;
    v9 = *(_QWORD *)(v6 + 1056);
    v299 = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v300 = *(_WORD *)(v6 + 1064);
    if (*(char *)(v6 + 1095) < 0)
    {
      sub_1C47EBC30(&v301, *(void **)(v6 + 1072), *(_QWORD *)(v6 + 1080));
    }
    else
    {
      v301 = *(_OWORD *)(v6 + 1072);
      v302 = *(_QWORD *)(v6 + 1088);
    }
    v303 = *(_OWORD *)(v6 + 1096);
    v304 = *(_OWORD *)(v6 + 1112);
    sub_1C4843224((uint64_t)&v305, (uint64_t *)(v6 + 1128));
    if (*(char *)(v6 + 1311) < 0)
    {
      sub_1C47EBC30(&v306, *(void **)(v6 + 1288), *(_QWORD *)(v6 + 1296));
    }
    else
    {
      v306 = *(_OWORD *)(v6 + 1288);
      v307 = *(_QWORD *)(v6 + 1304);
    }
    v13 = DWORD2(v303) == 0;
    v14 = BYTE12(v296[0]);
    v294 = 0;
    v295 = 0;
    v293 = 0;
    v15 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
    if ((v15 & 0x80000000) == 0)
    {
      v291 = 0;
      v16 = *a1;
      v16[5] = *(unsigned __int8 **)(a2 + 24);
      v16[6] = (unsigned __int8 *)a2;
      v17 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
      v18 = &unk_1C866F184;
      goto LABEL_20;
    }
    if ((v15 & 0x7FFFFFFF) >= *(_DWORD *)(v5 + 432))
    {
      v291 = 0;
    }
    else
    {
      v291 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * (v15 & 0x7FFFFFFF));
      if (v291 == 129)
      {
        v19 = *a1;
        v19[5] = *(unsigned __int8 **)(a2 + 24);
        v19[6] = (unsigned __int8 *)a2;
        v18 = &unk_1C866F15C;
        v291 = 129;
LABEL_19:
        v17 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
LABEL_20:
        v21 = *v17;
        v290 = a1;
        if (v21)
        {
          if ((*(_BYTE *)(v21 + 3) & 1) != 0 || (v21 = *(_QWORD *)(v21 + 24)) != 0 && (*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            v161 = *(_QWORD *)(v21 + 8);
            if (v161)
            {
              if (**(_WORD **)(v161 + 16) == 163 && *(_DWORD *)(v161 + 40) == 3)
              {
                v162 = *(_QWORD *)(v161 + 32);
                v163 = *(unsigned int *)(v162 + 36);
                HIDWORD(v293) = *(_DWORD *)(v162 + 36);
                v164 = *(unsigned int *)(v162 + 68);
                if ((v164 & 0x80000000) != 0)
                  v165 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
                else
                  v165 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v164);
                v194 = *v165;
                if (v194
                  && ((*(_BYTE *)(v194 + 3) & 1) != 0
                   || (v194 = *(_QWORD *)(v194 + 24)) != 0 && (*(_BYTE *)(v194 + 3) & 1) != 0)
                  && (v269 = *(_QWORD *)(v194 + 8)) != 0
                  && **(_WORD **)(v269 + 16) == 177
                  && *(_DWORD *)(v269 + 40) == 2)
                {
                  LODWORD(v164) = *(_DWORD *)(*(_QWORD *)(v269 + 32) + 36);
                  v270 = &v293;
                }
                else
                {
                  if ((v163 & 0x80000000) != 0)
                    v195 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v163 & 0x7FFFFFFF) + 8);
                  else
                    v195 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v163);
                  v199 = *v195;
                  if (!v199)
                    goto LABEL_21;
                  if ((*(_BYTE *)(v199 + 3) & 1) == 0)
                  {
                    v199 = *(_QWORD *)(v199 + 24);
                    if (!v199 || (*(_BYTE *)(v199 + 3) & 1) == 0)
                      goto LABEL_21;
                  }
                  v274 = *(_QWORD *)(v199 + 8);
                  if (!v274 || **(_WORD **)(v274 + 16) != 177 || *(_DWORD *)(v274 + 40) != 2)
                    goto LABEL_21;
                  LODWORD(v293) = *(_DWORD *)(*(_QWORD *)(v274 + 32) + 36);
                  v270 = (uint64_t *)((char *)&v293 + 4);
                }
                *(_DWORD *)v270 = v164;
                if (HIDWORD(v293) == (_DWORD)v293 && ((v14 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
                {
                  v275 = (uint64_t)*a1;
                  LODWORD(v308) = v15;
                  LODWORD(v309) = 1;
                  sub_1C5545FFC(v275, (unint64_t *)&v308, 0.0);
                  v157 = *(_QWORD *)(a2 + 24);
                  v158 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v158 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v158 = a2;
                      do
                        v158 = *(_QWORD *)(v158 + 8);
                      while ((*(_WORD *)(v158 + 44) & 8) != 0);
                    }
                  }
LABEL_233:
                  sub_1C487FE80(v157 + 40, a2, *(_QWORD *)(v158 + 8));
                  goto LABEL_234;
                }
              }
            }
          }
        }
LABEL_21:
        if ((v15 & 0x80000000) != 0)
          v22 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
        else
          v22 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
        v23 = *v22;
        if (v23)
        {
          if ((*(_BYTE *)(v23 + 3) & 1) != 0 || (v23 = *(_QWORD *)(v23 + 24)) != 0 && (*(_BYTE *)(v23 + 3) & 1) != 0)
          {
            v166 = *(_QWORD *)(v23 + 8);
            if (v166)
            {
              if (**(_WORD **)(v166 + 16) == 163 && *(_DWORD *)(v166 + 40) == 3)
              {
                v167 = *(_QWORD *)(v166 + 32);
                v168 = *(unsigned int *)(v167 + 36);
                if ((v168 & 0x80000000) != 0)
                  v169 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v168 & 0x7FFFFFFF) + 8);
                else
                  v169 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v168);
                v196 = *v169;
                if (v196
                  && ((*(_BYTE *)(v196 + 3) & 1) != 0
                   || (v196 = *(_QWORD *)(v196 + 24)) != 0 && (*(_BYTE *)(v196 + 3) & 1) != 0)
                  && (v271 = *(_QWORD *)(v196 + 8)) != 0
                  && **(_WORD **)(v271 + 16) == 177
                  && *(_DWORD *)(v271 + 40) == 2)
                {
                  HIDWORD(v293) = *(_DWORD *)(*(_QWORD *)(v271 + 32) + 36);
                  v272 = &v293;
                  v273 = 2;
                }
                else
                {
                  LODWORD(v293) = *(_DWORD *)(v167 + 36);
                  v197 = *(unsigned int *)(v167 + 68);
                  if ((v197 & 0x80000000) != 0)
                    v198 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
                  else
                    v198 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v197);
                  v200 = *v198;
                  if (!v200)
                    goto LABEL_25;
                  if ((*(_BYTE *)(v200 + 3) & 1) == 0)
                  {
                    v200 = *(_QWORD *)(v200 + 24);
                    if (!v200 || (*(_BYTE *)(v200 + 3) & 1) == 0)
                      goto LABEL_25;
                  }
                  v276 = *(_QWORD *)(v200 + 8);
                  if (!v276 || **(_WORD **)(v276 + 16) != 177 || *(_DWORD *)(v276 + 40) != 2)
                    goto LABEL_25;
                  v167 = *(_QWORD *)(v276 + 32);
                  v272 = (uint64_t *)((char *)&v293 + 4);
                  v273 = 1;
                }
                *(_DWORD *)v272 = *(_DWORD *)(v167 + 32 * v273 + 4);
                if (HIDWORD(v293) == (_DWORD)v293 && ((v14 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
                {
                  v277 = (uint64_t)*a1;
                  LODWORD(v308) = v15;
                  LODWORD(v309) = 1;
                  sub_1C5545FFC(v277, (unint64_t *)&v308, 0.0);
                  v157 = *(_QWORD *)(a2 + 24);
                  v158 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v158 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v158 = a2;
                      do
                        v158 = *(_QWORD *)(v158 + 8);
                      while ((*(_WORD *)(v158 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_233;
                }
              }
            }
          }
        }
LABEL_25:
        if ((v15 & 0x80000000) != 0)
          v24 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
        else
          v24 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
        v25 = *v24;
        if (!v25)
          goto LABEL_29;
        if ((*(_BYTE *)(v25 + 3) & 1) == 0)
        {
          v25 = *(_QWORD *)(v25 + 24);
          if (!v25 || (*(_BYTE *)(v25 + 3) & 1) == 0)
            goto LABEL_29;
        }
        v170 = *(_QWORD *)(v25 + 8);
        if (!v170 || **(_WORD **)(v170 + 16) != 163 || *(_DWORD *)(v170 + 40) != 3)
          goto LABEL_29;
        v171 = *(_QWORD *)(v170 + 32);
        v172 = *(unsigned int *)(v171 + 36);
        HIDWORD(v293) = *(_DWORD *)(v171 + 36);
        v173 = *(unsigned int *)(v171 + 68);
        v174 = *(_QWORD *)(v5 + 24);
        v175 = (uint64_t *)(v174 + 16 * (v173 & 0x7FFFFFFF) + 8);
        v176 = *(_QWORD *)(v5 + 272);
        if ((int)v173 >= 0)
          v175 = (uint64_t *)(v176 + 8 * v173);
        v177 = *v175;
        if ((*(_BYTE *)(v177 + 3) & 1) == 0)
          v177 = *(_QWORD *)(v177 + 24);
        v178 = *(_QWORD *)(v177 + 8);
        if (**(_WORD **)(v178 + 16) == 121)
        {
          v215 = *(_QWORD *)(*(_QWORD *)(v178 + 32) + 48);
          v295 = v215;
          if (v215)
          {
            LODWORD(v173) = v172;
            goto LABEL_411;
          }
        }
        else
        {
          v295 = 0;
        }
        v179 = v174 + 16 * (v172 & 0x7FFFFFFF) + 8;
        v180 = (uint64_t *)(v176 + 8 * v172);
        if ((int)v172 >= 0)
          v181 = v180;
        else
          v181 = (uint64_t *)v179;
        v182 = *v181;
        if ((*(_BYTE *)(v182 + 3) & 1) == 0)
          v182 = *(_QWORD *)(v182 + 24);
        v183 = *(_QWORD *)(v182 + 8);
        if (**(_WORD **)(v183 + 16) != 121)
        {
          v295 = 0;
          goto LABEL_29;
        }
        v215 = *(_QWORD *)(*(_QWORD *)(v183 + 32) + 48);
        v295 = v215;
        if (!v215)
        {
LABEL_29:
          if ((v15 & 0x80000000) != 0)
            v26 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
          else
            v26 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
          v27 = *v26;
          if (!v27
            || (*(_BYTE *)(v27 + 3) & 1) == 0 && ((v27 = *(_QWORD *)(v27 + 24)) == 0 || (*(_BYTE *)(v27 + 3) & 1) == 0)
            || (v184 = *(_QWORD *)(v27 + 8)) == 0
            || **(_WORD **)(v184 + 16) != 163
            || *(_DWORD *)(v184 + 40) != 3)
          {
LABEL_33:
            v292 = 0uLL;
            if ((v14 & 1) == 0 && (~*(unsigned __int16 *)(a2 + 44) & 0x440) != 0)
              goto LABEL_216;
            v308 = (_DWORD *)&v292 + 3;
            v309 = (char *)&v295;
            v310 = (uint64_t **)&v294;
            v340 = v15;
            if (sub_1C49BB03C((uint64_t)&v308, v5, &v340))
            {
              v28 = v295;
              v29 = *(_QWORD *)(v295 + 32);
              if ((_UNKNOWN *)v29 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v326, (const llvm::detail::DoubleAPFloat *)(v295 + 32));
              }
              else
              {
                v326 = *(_QWORD *)(v295 + 32);
                if ((*(_DWORD *)(v29 + 8) + 64) >= 0x80)
                  v327 = (uint64_t *)operator new[]();
                v30 = *(_BYTE *)(v28 + 52);
                v31 = v30 & 7;
                v329 = v329 & 0xF0 | v30 & 0xF;
                v328 = *(_DWORD *)(v28 + 48);
                v33 = (v30 & 6) != 0 && v31 != 3;
                if (v31 == 1 || v33)
                {
                  v34 = *(unsigned int *)(v326 + 8);
                  if ((v34 - 64) <= 0xFFFFFF7F)
                    v35 = v327;
                  else
                    v35 = (uint64_t *)&v327;
                  v38 = *(uint64_t **)(v28 + 40);
                  v37 = (uint64_t *)(v28 + 40);
                  v36 = v38;
                  if ((*(_DWORD *)(*(v37 - 1) + 8) - 64) >= 0xFFFFFF80)
                    v36 = v37;
                  if (v34 <= 0xFFFFFFBF)
                  {
                    v39 = (unint64_t)(v34 + 64) >> 6;
                    do
                    {
                      v40 = *v36++;
                      *v35++ = v40;
                      --v39;
                    }
                    while (v39);
                  }
                }
              }
              sub_1C499C600((uint64_t)&v340, v18, (uint64_t)v325);
              if ((_UNKNOWN *)v326 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v327);
              }
              else if ((*(_DWORD *)(v326 + 8) - 64) <= 0xFFFFFF7F && v327)
              {
                MEMORY[0x1CAA32F9C](v327, 0x1000C8000313F17);
              }
              v41 = v294;
              v42 = *(_QWORD *)(v294 + 32);
              if ((_UNKNOWN *)v42 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v321, (const llvm::detail::DoubleAPFloat *)(v294 + 32));
              }
              else
              {
                v321 = *(_QWORD *)(v294 + 32);
                if ((*(_DWORD *)(v42 + 8) + 64) >= 0x80)
                  v322 = (uint64_t *)operator new[]();
                v43 = *(_BYTE *)(v41 + 52);
                v44 = v43 & 7;
                v324 = v324 & 0xF0 | v43 & 0xF;
                v323 = *(_DWORD *)(v41 + 48);
                v46 = (v43 & 6) != 0 && v44 != 3;
                if (v44 == 1 || v46)
                {
                  v48 = *(unsigned int *)(v321 + 8);
                  if ((v48 - 64) <= 0xFFFFFF7F)
                    v49 = v322;
                  else
                    v49 = (uint64_t *)&v322;
                  v52 = *(uint64_t **)(v41 + 40);
                  v51 = (uint64_t *)(v41 + 40);
                  v50 = v52;
                  if ((*(_DWORD *)(*(v51 - 1) + 8) - 64) >= 0xFFFFFF80)
                    v50 = v51;
                  if (v48 <= 0xFFFFFFBF)
                  {
                    v53 = (unint64_t)(v48 + 64) >> 6;
                    do
                    {
                      v54 = *v50++;
                      *v49++ = v54;
                      --v53;
                    }
                    while (v53);
                  }
                }
              }
              sub_1C499C600((uint64_t)&v330, v18, (uint64_t)v320);
              if ((_UNKNOWN *)v321 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v322);
              }
              else if ((*(_DWORD *)(v321 + 8) - 64) <= 0xFFFFFF7F && v322)
              {
                MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
              }
              v55 = v341;
              if (v341 == (_DWORD *)&unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v316, (const llvm::detail::DoubleAPFloat *)&v341);
                goto LABEL_96;
              }
              v316 = v341;
              if ((v341[2] + 64) >= 0x80)
                v317 = (uint64_t *)operator new[]();
              v56 = v344 & 7;
              v319 = v319 & 0xF0 | v344 & 0xF;
              v318 = v343;
              v58 = (v344 & 6) != 0 && v56 != 3;
              if (v56 == 1 || v58)
              {
                v59 = v316[2];
                if ((v59 - 64) <= 0xFFFFFF7F)
                {
                  v61 = v317;
                  if ((v55[2] - 64) >= 0xFFFFFF80)
                    v60 = &v342;
                  else
                    v60 = (uint64_t **)v342;
                  goto LABEL_94;
                }
                v60 = &v342;
                if ((v55[2] - 64) < 0xFFFFFF80)
                  v60 = (uint64_t **)v342;
                if (v59 <= 0xFFFFFFBF)
                {
                  v61 = (uint64_t *)&v317;
LABEL_94:
                  v62 = (unint64_t)(v59 + 64) >> 6;
                  do
                  {
                    v63 = (uint64_t)*v60++;
                    *v61++ = v63;
                    --v62;
                  }
                  while (v62);
                }
              }
LABEL_96:
              sub_1C47B4138((uint64_t)&v315, (uint64_t)&v330, 1);
              v64 = *a1;
              v308 = (_DWORD *)v291;
              LODWORD(v309) = 0;
              v66 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v315, v65);
              v67 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v64 + 3))(v64, &v308, v66);
              v68 = *a1;
              v314[0] = v15;
              v314[2] = 1;
              LODWORD(v308) = HIDWORD(v292);
              LODWORD(v310) = 0;
              v311 = v67;
              v312 = v69;
              v313 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, _DWORD *, uint64_t, _DWORD **, uint64_t, uint64_t))*v68
               + 4))(v68, 163, v314, 1, &v308, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
              v70 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v70 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v70 = a2;
                  do
                    v70 = *(_QWORD *)(v70 + 8);
                  while ((*(_WORD *)(v70 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v70 + 8));
              if (v316 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v317);
              }
              else if ((v316[2] - 64) <= 0xFFFFFF7F && v317)
              {
                MEMORY[0x1CAA32F9C](v317, 0x1000C8000313F17);
              }
              if (v331 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v332);
              }
              else if ((v331[2] - 64) <= 0xFFFFFF7F && v332)
              {
                MEMORY[0x1CAA32F9C](v332, 0x1000C8000313F17);
              }
              if (v55 != (_DWORD *)&unk_1C866F1C0)
              {
                v71 = v55[2];
LABEL_197:
                if ((v71 - 64) > 0xFFFFFF7F)
                  goto LABEL_234;
                v129 = v342;
                if (!v342)
                  goto LABEL_234;
                goto LABEL_199;
              }
              goto LABEL_210;
            }
            v308 = (_DWORD *)&v292 + 3;
            v309 = (char *)&v295;
            v310 = (uint64_t **)&v292 + 1;
            v340 = v15;
            if (sub_1C49BB41C((uint64_t)&v308, v5, &v340) && HIDWORD(v292) == DWORD2(v292))
            {
              v72 = v295;
              v73 = *(_QWORD *)(v295 + 32);
              if ((_UNKNOWN *)v73 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v341, (const llvm::detail::DoubleAPFloat *)(v295 + 32));
              }
              else
              {
                v341 = *(_DWORD **)(v295 + 32);
                if ((*(_DWORD *)(v73 + 8) + 64) >= 0x80)
                  v342 = (uint64_t *)operator new[]();
                v74 = *(_BYTE *)(v72 + 52);
                v75 = v74 & 7;
                v344 = v344 & 0xF0 | v74 & 0xF;
                v343 = *(_DWORD *)(v72 + 48);
                v77 = (v74 & 6) != 0 && v75 != 3;
                if (v75 == 1 || v77)
                {
                  v78 = v341[2];
                  if ((v78 - 64) <= 0xFFFFFF7F)
                    v79 = (uint64_t **)v342;
                  else
                    v79 = &v342;
                  v82 = *(uint64_t ***)(v72 + 40);
                  v81 = (uint64_t **)(v72 + 40);
                  v80 = v82;
                  if ((*((_DWORD *)*(v81 - 1) + 2) - 64) >= 0xFFFFFF80)
                    v80 = v81;
                  if (v78 <= 0xFFFFFFBF)
                  {
                    v83 = (unint64_t)(v78 + 64) >> 6;
                    do
                    {
                      v84 = *v80++;
                      *v79++ = v84;
                      --v83;
                    }
                    while (v83);
                  }
                }
              }
              llvm::APFloat::APFloat((uint64_t)&v308, v341, "1.0", 3uLL);
              if (v341 == (_DWORD *)&unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v331, (const llvm::detail::DoubleAPFloat *)&v341);
              }
              else
              {
                v331 = v341;
                if ((v341[2] + 64) >= 0x80)
                  v332 = (uint64_t *)operator new[]();
                v85 = v344 & 7;
                v334 = v334 & 0xF0 | v344 & 0xF;
                v333 = v343;
                v87 = (v344 & 6) != 0 && v85 != 3;
                if (v85 == 1 || v87)
                {
                  v88 = v331[2];
                  v89 = (v88 - 64) <= 0xFFFFFF7F ? v332 : (uint64_t *)&v332;
                  v90 = (v341[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v342 : v342;
                  if (v88 <= 0xFFFFFFBF)
                  {
                    v91 = (unint64_t)(v88 + 64) >> 6;
                    do
                    {
                      v92 = *v90++;
                      *v89++ = v92;
                      --v91;
                    }
                    while (v91);
                  }
                }
              }
              sub_1C47B4138((uint64_t)&v330, (uint64_t)&v308, 1);
              if (v309 == (char *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v310);
              }
              else if ((*((_DWORD *)v309 + 2) - 64) <= 0xFFFFFF7F && v310)
              {
                MEMORY[0x1CAA32F9C](v310, 0x1000C8000313F17);
              }
              v94 = *a1;
              v308 = (_DWORD *)v291;
              LODWORD(v309) = 0;
              v95 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v330, v93);
              v96 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v94 + 3))(v94, &v308, v95);
              v97 = *a1;
              v315 = v15;
              LODWORD(v316) = 1;
              LODWORD(v308) = HIDWORD(v292);
              LODWORD(v310) = 0;
              v311 = v96;
              v312 = v98;
              v313 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, int *, uint64_t, _DWORD **, uint64_t, uint64_t))*v97 + 4))(v97, 165, &v315, 1, &v308, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
              v99 = *(_QWORD *)(a2 + 24);
              v100 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v100 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v100 = a2;
                  do
                    v100 = *(_QWORD *)(v100 + 8);
                  while ((*(_WORD *)(v100 + 44) & 8) != 0);
                }
              }
              goto LABEL_193;
            }
            v308 = (_DWORD *)&v292 + 3;
            v309 = (char *)&v292 + 8;
            v310 = (uint64_t **)((char *)&v292 + 4);
            v311 = (uint64_t)&v295;
            v340 = v15;
            if (sub_1C49BB74C((uint64_t)&v308, v5, &v340)
              && __PAIR64__(HIDWORD(v292), HIDWORD(v292)) == *(_QWORD *)((char *)&v292 + 4))
            {
              v101 = v295;
              v102 = *(_QWORD *)(v295 + 32);
              if ((_UNKNOWN *)v102 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v341, (const llvm::detail::DoubleAPFloat *)(v295 + 32));
              }
              else
              {
                v341 = *(_DWORD **)(v295 + 32);
                if ((*(_DWORD *)(v102 + 8) + 64) >= 0x80)
                  v342 = (uint64_t *)operator new[]();
                v103 = *(_BYTE *)(v101 + 52);
                v104 = v103 & 7;
                v344 = v344 & 0xF0 | v103 & 0xF;
                v343 = *(_DWORD *)(v101 + 48);
                v106 = (v103 & 6) != 0 && v104 != 3;
                if (v104 == 1 || v106)
                {
                  v107 = v341[2];
                  if ((v107 - 64) <= 0xFFFFFF7F)
                    v108 = (uint64_t **)v342;
                  else
                    v108 = &v342;
                  v111 = *(uint64_t ***)(v101 + 40);
                  v110 = (uint64_t **)(v101 + 40);
                  v109 = v111;
                  if ((*((_DWORD *)*(v110 - 1) + 2) - 64) >= 0xFFFFFF80)
                    v109 = v110;
                  if (v107 <= 0xFFFFFFBF)
                  {
                    v112 = (unint64_t)(v107 + 64) >> 6;
                    do
                    {
                      v113 = *v109++;
                      *v108++ = v113;
                      --v112;
                    }
                    while (v112);
                  }
                }
              }
              llvm::APFloat::APFloat((uint64_t)&v308, v341, "2.0", 3uLL);
              if (v341 == (_DWORD *)&unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v331, (const llvm::detail::DoubleAPFloat *)&v341);
              }
              else
              {
                v331 = v341;
                if ((v341[2] + 64) >= 0x80)
                  v332 = (uint64_t *)operator new[]();
                v114 = v344 & 7;
                v334 = v334 & 0xF0 | v344 & 0xF;
                v333 = v343;
                v116 = (v344 & 6) != 0 && v114 != 3;
                if (v114 == 1 || v116)
                {
                  v117 = v331[2];
                  v118 = (v117 - 64) <= 0xFFFFFF7F ? v332 : (uint64_t *)&v332;
                  v119 = (v341[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v342 : v342;
                  if (v117 <= 0xFFFFFFBF)
                  {
                    v120 = (unint64_t)(v117 + 64) >> 6;
                    do
                    {
                      v121 = *v119++;
                      *v118++ = v121;
                      --v120;
                    }
                    while (v120);
                  }
                }
              }
              sub_1C47B4138((uint64_t)&v330, (uint64_t)&v308, 1);
              if (v309 == (char *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v310);
              }
              else if ((*((_DWORD *)v309 + 2) - 64) <= 0xFFFFFF7F && v310)
              {
                MEMORY[0x1CAA32F9C](v310, 0x1000C8000313F17);
              }
              v123 = *a1;
              v308 = (_DWORD *)v291;
              LODWORD(v309) = 0;
              v124 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v330, v122);
              v125 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v123 + 3))(v123, &v308, v124);
              v126 = *a1;
              v315 = v15;
              LODWORD(v316) = 1;
              LODWORD(v308) = HIDWORD(v292);
              LODWORD(v310) = 0;
              v311 = v125;
              v312 = v127;
              v313 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, int *, uint64_t, _DWORD **, uint64_t, uint64_t))*v126
               + 4))(v126, 165, &v315, 1, &v308, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
              v99 = *(_QWORD *)(a2 + 24);
              v100 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v100 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v100 = a2;
                  do
                    v100 = *(_QWORD *)(v100 + 8);
                  while ((*(_WORD *)(v100 + 44) & 8) != 0);
                }
              }
LABEL_193:
              sub_1C487FE80(v99 + 40, a2, *(_QWORD *)(v100 + 8));
              if (v331 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v332);
              }
              else if ((v331[2] - 64) <= 0xFFFFFF7F && v332)
              {
                MEMORY[0x1CAA32F9C](v332, 0x1000C8000313F17);
              }
              v128 = v341;
              if (v341 != (_DWORD *)&unk_1C866F1C0)
                goto LABEL_196;
              goto LABEL_210;
            }
            if ((v15 & 0x80000000) != 0)
              v130 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
            else
              v130 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
            v131 = *v130;
            if (v131)
            {
              if ((*(_BYTE *)(v131 + 3) & 1) != 0
                || (v131 = *(_QWORD *)(v131 + 24)) != 0 && (*(_BYTE *)(v131 + 3) & 1) != 0)
              {
                v207 = *(_QWORD *)(v131 + 8);
                if (v207)
                {
                  if (**(_WORD **)(v207 + 16) == 163 && *(_DWORD *)(v207 + 40) == 3)
                  {
                    v208 = *(_QWORD *)(v207 + 32);
                    v209 = *(unsigned int *)(v208 + 36);
                    if ((v209 & 0x80000000) != 0)
                      v210 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v209 & 0x7FFFFFFF) + 8);
                    else
                      v210 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v209);
                    v211 = *v210;
                    if (v211)
                    {
                      if ((*(_BYTE *)(v211 + 3) & 1) != 0
                        || (v211 = *(_QWORD *)(v211 + 24)) != 0 && (*(_BYTE *)(v211 + 3) & 1) != 0)
                      {
                        v278 = *(_QWORD *)(v211 + 8);
                        if (v278)
                        {
                          if (**(_WORD **)(v278 + 16) == 163 && *(_DWORD *)(v278 + 40) == 3)
                          {
                            v279 = *(_QWORD *)(v278 + 32);
                            v280 = *(_DWORD *)(v279 + 36);
                            DWORD2(v292) = *(_DWORD *)(v279 + 68);
                            HIDWORD(v292) = v280;
                            v281 = (char *)&v292 + 4;
                            goto LABEL_551;
                          }
                        }
                      }
                    }
                    DWORD1(v292) = *(_DWORD *)(v208 + 36);
                    v212 = *(unsigned int *)(v208 + 68);
                    if ((v212 & 0x80000000) != 0)
                      v213 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v212 & 0x7FFFFFFF) + 8);
                    else
                      v213 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v212);
                    v214 = *v213;
                    if (v214)
                    {
                      if ((*(_BYTE *)(v214 + 3) & 1) != 0
                        || (v214 = *(_QWORD *)(v214 + 24)) != 0 && (*(_BYTE *)(v214 + 3) & 1) != 0)
                      {
                        v282 = *(_QWORD *)(v214 + 8);
                        if (v282)
                        {
                          if (**(_WORD **)(v282 + 16) == 163 && *(_DWORD *)(v282 + 40) == 3)
                          {
                            v208 = *(_QWORD *)(v282 + 32);
                            v280 = *(_DWORD *)(v208 + 36);
                            HIDWORD(v292) = v280;
                            v281 = (char *)&v292 + 8;
LABEL_551:
                            *(_DWORD *)v281 = *(_DWORD *)(v208 + 68);
                            if (v280 == DWORD2(v292) && v280 == DWORD1(v292))
                            {
                              llvm::APFloat::APFloat((uint64_t)&v340, v18, "3.0", 3uLL);
                              v284 = *a1;
                              v308 = (_DWORD *)v291;
                              LODWORD(v309) = 0;
                              v286 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v340, v285);
                              v287 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v284
                                      + 3))(v284, &v308, v286);
                              v288 = *a1;
                              LODWORD(v330) = v15;
                              LODWORD(v331) = 1;
                              LODWORD(v308) = HIDWORD(v292);
                              LODWORD(v310) = 0;
                              v311 = v287;
                              v312 = v289;
                              v313 = 1;
                              (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, _DWORD **, uint64_t, uint64_t))*v288
                               + 4))(v288, 165, &v330, 1, &v308, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                              v138 = *(_QWORD *)(a2 + 24);
                              v139 = a2;
                              if ((*(_BYTE *)a2 & 4) == 0)
                              {
                                v139 = a2;
                                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                                {
                                  v139 = a2;
                                  do
                                    v139 = *(_QWORD *)(v139 + 8);
                                  while ((*(_WORD *)(v139 + 44) & 8) != 0);
                                }
                              }
LABEL_209:
                              sub_1C487FE80(v138 + 40, a2, *(_QWORD *)(v139 + 8));
                              v128 = v341;
                              if (v341 != (_DWORD *)&unk_1C866F1C0)
                              {
LABEL_196:
                                v71 = v128[2];
                                goto LABEL_197;
                              }
LABEL_210:
                              v140 = &v340;
                              goto LABEL_211;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v308 = (_DWORD *)&v292 + 3;
            v309 = (char *)&v292 + 8;
            v310 = (uint64_t **)((char *)&v292 + 4);
            v311 = (uint64_t)&v292;
            v340 = v15;
            if (sub_1C49BBB6C(&v308, v5, &v340)
              && __PAIR64__(HIDWORD(v292), HIDWORD(v292)) == *(_QWORD *)((char *)&v292 + 4)
              && HIDWORD(v292) == (_DWORD)v292)
            {
              llvm::APFloat::APFloat((uint64_t)&v340, v18, "4.0", 3uLL);
              v132 = *a1;
              v308 = (_DWORD *)v291;
              LODWORD(v309) = 0;
              v134 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v340, v133);
              v135 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v132 + 3))(v132, &v308, v134);
              v136 = *a1;
              LODWORD(v330) = v15;
              LODWORD(v331) = 1;
              LODWORD(v308) = HIDWORD(v292);
              LODWORD(v310) = 0;
              v311 = v135;
              v312 = v137;
              v313 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, _DWORD **, uint64_t, uint64_t))*v136
               + 4))(v136, 165, &v330, 1, &v308, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
              v138 = *(_QWORD *)(a2 + 24);
              v139 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v139 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v139 = a2;
                  do
                    v139 = *(_QWORD *)(v139 + 8);
                  while ((*(_WORD *)(v139 + 44) & 8) != 0);
                }
              }
              goto LABEL_209;
            }
            if ((v15 & 0x80000000) != 0)
              v141 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
            else
              v141 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
            v142 = *v141;
            if (v142)
            {
              if ((*(_BYTE *)(v142 + 3) & 1) != 0
                || (v142 = *(_QWORD *)(v142 + 24)) != 0 && (*(_BYTE *)(v142 + 3) & 1) != 0)
              {
                v201 = *(_QWORD *)(v142 + 8);
                if (v201)
                {
                  if (**(_WORD **)(v201 + 16) == 163 && *(_DWORD *)(v201 + 40) == 3)
                  {
                    v202 = *(_QWORD *)(v201 + 32);
                    v203 = *(_DWORD *)(v202 + 36);
                    if (v203 == *(_DWORD *)(v202 + 68))
                    {
                      v204 = (uint64_t)*a1;
                      v340 = v15;
                      LODWORD(v341) = 1;
                      LODWORD(v308) = v203;
                      LODWORD(v310) = 0;
                      if (v203 < 0 && (v205 = v203 & 0x7FFFFFFF, v205 < *(_DWORD *)(v5 + 432)))
                        v206 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v205);
                      else
                        v206 = 0;
                      v330 = v206;
                      LODWORD(v331) = 0;
                      v311 = sub_1C5545FFC(v204, &v330, 2.0);
                      v312 = v228;
                      v313 = 1;
                      (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(_QWORD *)v204 + 32))(v204, 165, &v340, 1, &v308, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                      v157 = *(_QWORD *)(a2 + 24);
                      v158 = a2;
                      if ((*(_BYTE *)a2 & 4) == 0)
                      {
                        v158 = a2;
                        if ((*(_WORD *)(a2 + 44) & 8) != 0)
                        {
                          v158 = a2;
                          do
                            v158 = *(_QWORD *)(v158 + 8);
                          while ((*(_WORD *)(v158 + 44) & 8) != 0);
                        }
                      }
                      goto LABEL_233;
                    }
                  }
                }
              }
            }
LABEL_216:
            v143 = v15;
            v144 = v13 | v14;
            if (((v13 | v14) & 1) == 0 && (*(_WORD *)(a2 + 44) & 0x100) == 0)
            {
              v12 = 0;
LABEL_235:
              sub_1C48433E8((uint64_t)v296);
              return v12;
            }
            v145 = *(_QWORD *)(a2 + 32);
            v146 = (const llvm::DILocation *)*(unsigned int *)(v145 + 36);
            v147 = (const llvm::DILocation *)*(unsigned int *)(v145 + 68);
            v148 = 1;
            do
            {
              v149 = v147;
              v147 = v146;
              v150 = v148;
              v151 = sub_1C499E8EC(v291, (int)v146, v149, v5, *v290, (unsigned __int8 **)(a2 + 56), v144 & 1, *(unsigned __int16 *)(a2 + 44), 1);
              if (v151)
              {
                v156 = *v290;
                v340 = v143;
                LODWORD(v341) = 1;
                LODWORD(v308) = *(_DWORD *)(*((_QWORD *)v151 + 4) + 4);
                LODWORD(v310) = 0;
                (*((void (**)(unsigned __int8 **, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, _QWORD))*v156
                 + 4))(v156, 19, &v340, 1, &v308, 1, 0);
                v157 = *(_QWORD *)(a2 + 24);
                v158 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v158 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v158 = a2;
                    do
                      v158 = *(_QWORD *)(v158 + 8);
                    while ((*(_WORD *)(v158 + 44) & 8) != 0);
                  }
                }
                goto LABEL_233;
              }
              v148 = 0;
              v146 = v149;
            }
            while ((v150 & 1) != 0);
            v152 = 1;
            v12 = 0;
            while (1)
            {
              v153 = v149;
              v154 = v152;
              v155 = sub_1C499E8EC(v291, (int)v149, v147, v5, *v290, (unsigned __int8 **)(a2 + 56), v144 & 1, *(unsigned __int16 *)(a2 + 44), 0);
              if (v155)
                break;
              v152 = 0;
              v149 = v147;
              v147 = v153;
              if ((v154 & 1) == 0)
                goto LABEL_235;
            }
            v159 = *v290;
            v340 = v143;
            LODWORD(v341) = 1;
            LODWORD(v308) = *(_DWORD *)(*((_QWORD *)v155 + 4) + 4);
            LODWORD(v310) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, _QWORD))*v159
             + 4))(v159, 19, &v340, 1, &v308, 1, 0);
            v157 = *(_QWORD *)(a2 + 24);
            v158 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v158 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v158 = a2;
                do
                  v158 = *(_QWORD *)(v158 + 8);
                while ((*(_WORD *)(v158 + 44) & 8) != 0);
              }
            }
            goto LABEL_233;
          }
          v185 = *(_QWORD *)(v184 + 32);
          v186 = *(unsigned int *)(v185 + 36);
          v187 = *(_QWORD *)(v5 + 24);
          v188 = *(_QWORD *)(v5 + 272);
          if ((int)v186 >= 0)
            v189 = v188 + 8 * v186;
          else
            v189 = v187 + 16 * (v186 & 0x7FFFFFFF) + 8;
          v190 = *(_QWORD *)v189;
          if ((*(_BYTE *)(*(_QWORD *)v189 + 3) & 1) == 0)
            v190 = *(_QWORD *)(v190 + 24);
          v191 = *(_QWORD *)(v190 + 8);
          if (**(_WORD **)(v191 + 16) == 121)
          {
            v216 = *(_QWORD *)(*(_QWORD *)(v191 + 32) + 48);
            v295 = v216;
            if (v216)
            {
              v217 = *(unsigned int *)(v185 + 68);
              if ((int)v217 >= 0)
                v218 = (uint64_t *)(v188 + 8 * v217);
              else
                v218 = (uint64_t *)(v187 + 16 * (v217 & 0x7FFFFFFF) + 8);
              v219 = *v218;
              if ((*(_BYTE *)(v219 + 3) & 1) == 0)
                v219 = *(_QWORD *)(v219 + 24);
              v220 = *(_QWORD *)(v219 + 8);
              if (**(_WORD **)(v220 + 16) == 121)
              {
                v294 = *(_QWORD *)(*(_QWORD *)(v220 + 32) + 48);
                if (v294)
                  goto LABEL_427;
              }
              else
              {
                v294 = 0;
              }
            }
          }
          else
          {
            v295 = 0;
          }
          v192 = *(_QWORD *)v189;
          if ((*(_BYTE *)(v192 + 3) & 1) == 0)
            v192 = *(_QWORD *)(v192 + 24);
          v193 = *(_QWORD *)(v192 + 8);
          if (**(_WORD **)(v193 + 16) != 121)
          {
            v294 = 0;
            goto LABEL_33;
          }
          v294 = *(_QWORD *)(*(_QWORD *)(v193 + 32) + 48);
          if (!v294)
            goto LABEL_33;
          v221 = *(unsigned int *)(v185 + 68);
          v222 = v187 + 16 * (v221 & 0x7FFFFFFF) + 8;
          v223 = (uint64_t *)(v188 + 8 * v221);
          if ((int)v221 >= 0)
            v224 = v223;
          else
            v224 = (uint64_t *)v222;
          v225 = *v224;
          if ((*(_BYTE *)(v225 + 3) & 1) == 0)
            v225 = *(_QWORD *)(v225 + 24);
          v226 = *(_QWORD *)(v225 + 8);
          if (**(_WORD **)(v226 + 16) != 121)
          {
            v295 = 0;
            goto LABEL_33;
          }
          v216 = *(_QWORD *)(*(_QWORD *)(v226 + 32) + 48);
          v295 = v216;
          if (!v216)
            goto LABEL_33;
LABEL_427:
          v229 = *(_QWORD *)(v216 + 32);
          if ((_UNKNOWN *)v229 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v346, (const llvm::detail::DoubleAPFloat *)(v216 + 32));
          }
          else
          {
            v346 = *(_QWORD *)(v216 + 32);
            if ((*(_DWORD *)(v229 + 8) + 64) >= 0x80)
              v347 = (uint64_t *)operator new[]();
            v230 = *(_BYTE *)(v216 + 52);
            v231 = v230 & 7;
            v349 = v349 & 0xF0 | v230 & 0xF;
            v348 = *(_DWORD *)(v216 + 48);
            v233 = (v230 & 6) != 0 && v231 != 3;
            if (v231 == 1 || v233)
            {
              v235 = *(unsigned int *)(v346 + 8);
              if ((v235 - 64) <= 0xFFFFFF7F)
                v236 = v347;
              else
                v236 = (uint64_t *)&v347;
              v239 = *(uint64_t **)(v216 + 40);
              v238 = (uint64_t *)(v216 + 40);
              v237 = v239;
              if ((*(_DWORD *)(*(v238 - 1) + 8) - 64) >= 0xFFFFFF80)
                v237 = v238;
              if (v235 <= 0xFFFFFFBF)
              {
                v240 = (unint64_t)(v235 + 64) >> 6;
                do
                {
                  v241 = *v237++;
                  *v236++ = v241;
                  --v240;
                }
                while (v240);
              }
            }
          }
          sub_1C499C600((uint64_t)&v308, v18, (uint64_t)v345);
          if ((_UNKNOWN *)v346 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v347);
          }
          else if ((*(_DWORD *)(v346 + 8) - 64) <= 0xFFFFFF7F && v347)
          {
            MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
          }
          v242 = v294;
          v243 = *(_QWORD *)(v294 + 32);
          if ((_UNKNOWN *)v243 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v336, (const llvm::detail::DoubleAPFloat *)(v294 + 32));
          }
          else
          {
            v336 = *(_QWORD *)(v294 + 32);
            if ((*(_DWORD *)(v243 + 8) + 64) >= 0x80)
              v337 = (uint64_t *)operator new[]();
            v244 = *(_BYTE *)(v242 + 52);
            v245 = v244 & 7;
            v339 = v339 & 0xF0 | v244 & 0xF;
            v338 = *(_DWORD *)(v242 + 48);
            v247 = (v244 & 6) != 0 && v245 != 3;
            if (v245 == 1 || v247)
            {
              v249 = *(unsigned int *)(v336 + 8);
              if ((v249 - 64) <= 0xFFFFFF7F)
                v250 = v337;
              else
                v250 = (uint64_t *)&v337;
              v253 = *(uint64_t **)(v242 + 40);
              v252 = (uint64_t *)(v242 + 40);
              v251 = v253;
              if ((*(_DWORD *)(*(v252 - 1) + 8) - 64) >= 0xFFFFFF80)
                v251 = v252;
              if (v249 <= 0xFFFFFFBF)
              {
                v254 = (unint64_t)(v249 + 64) >> 6;
                do
                {
                  v255 = *v251++;
                  *v250++ = v255;
                  --v254;
                }
                while (v254);
              }
            }
          }
          sub_1C499C600((uint64_t)&v340, v18, (uint64_t)v335);
          if ((_UNKNOWN *)v336 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v337);
          }
          else if ((*(_DWORD *)(v336 + 8) - 64) <= 0xFFFFFF7F && v337)
          {
            MEMORY[0x1CAA32F9C](v337, 0x1000C8000313F17);
          }
          v256 = v309;
          if (v309 == (char *)&unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v331, (const llvm::detail::DoubleAPFloat *)&v309);
          }
          else
          {
            v331 = v309;
            if ((*((_DWORD *)v309 + 2) + 64) >= 0x80)
              v332 = (uint64_t *)operator new[]();
            v257 = BYTE4(v311) & 7;
            v334 = v334 & 0xF0 | BYTE4(v311) & 0xF;
            v333 = v311;
            v259 = (v311 & 0x600000000) != 0 && v257 != 3;
            if (v257 != 1 && !v259)
              goto LABEL_489;
            v260 = v331[2];
            if ((v260 - 64) <= 0xFFFFFF7F)
            {
              v262 = (uint64_t **)v332;
              if ((*((_DWORD *)v256 + 2) - 64) >= 0xFFFFFF80)
                v261 = (uint64_t **)&v310;
              else
                v261 = v310;
            }
            else
            {
              v261 = (uint64_t **)&v310;
              if ((*((_DWORD *)v256 + 2) - 64) < 0xFFFFFF80)
                v261 = v310;
              if (v260 > 0xFFFFFFBF)
                goto LABEL_489;
              v262 = &v332;
            }
            v263 = (unint64_t)(v260 + 64) >> 6;
            do
            {
              v264 = *v261++;
              *v262++ = v264;
              --v263;
            }
            while (v263);
          }
LABEL_489:
          sub_1C47B4138((uint64_t)&v330, (uint64_t)&v340, 1);
          v265 = *a1;
          v315 = v15;
          LODWORD(v316) = 1;
          v267 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v330, v266);
          (*((void (**)(unsigned __int8 **, int *, llvm::APFloatBase *))*v265 + 3))(v265, &v315, v267);
          v268 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v268 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v268 = a2;
              do
                v268 = *(_QWORD *)(v268 + 8);
              while ((*(_WORD *)(v268 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v268 + 8));
          if (v331 == (_DWORD *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v332);
          }
          else if ((v331[2] - 64) <= 0xFFFFFF7F && v332)
          {
            MEMORY[0x1CAA32F9C](v332, 0x1000C8000313F17);
          }
          if (v341 == (_DWORD *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v342);
          }
          else if ((v341[2] - 64) <= 0xFFFFFF7F && v342)
          {
            MEMORY[0x1CAA32F9C](v342, 0x1000C8000313F17);
          }
          if (v256 != (char *)&unk_1C866F1C0)
          {
            if ((*((_DWORD *)v256 + 2) - 64) > 0xFFFFFF7F)
              goto LABEL_234;
            v129 = (uint64_t *)v310;
            if (!v310)
              goto LABEL_234;
LABEL_199:
            MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
LABEL_234:
            v12 = 1;
            goto LABEL_235;
          }
          v140 = (unsigned int *)&v308;
LABEL_211:
          sub_1C4773C74((uint64_t *)v140 + 2);
          goto LABEL_234;
        }
        HIDWORD(v293) = v173;
LABEL_411:
        if (*(_UNKNOWN **)(v215 + 32) == &unk_1C866F1C0)
          v227 = *(_BYTE *)(*(_QWORD *)(v215 + 40) + 28);
        else
          v227 = *(_BYTE *)(v215 + 52);
        if ((v227 & 7) == 3 && (v227 & 8 | v14 & 1 || (*(_WORD *)(a2 + 44) & 0x40) != 0))
        {
          sub_1C4923194((_QWORD *)v5, a2, v173, a1[2]);
          goto LABEL_234;
        }
        goto LABEL_29;
      }
    }
    v20 = *a1;
    v20[5] = *(unsigned __int8 **)(a2 + 24);
    v20[6] = (unsigned __int8 *)a2;
    v18 = &unk_1C866F184;
    goto LABEL_19;
  }
  return 0;
}

