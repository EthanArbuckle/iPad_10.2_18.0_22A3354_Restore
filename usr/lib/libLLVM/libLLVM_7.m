uint64_t sub_1C4A75A70(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v5;
  int v7;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void **v17;
  void (**v18)(void **);
  unint64_t *v19;
  void (**v20)(unint64_t *);
  int v21;
  void **v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *(*v28)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  unint64_t v29;
  const void *v30;
  size_t v31;
  BOOL v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t NamedMetadata;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  BOOL (*v40)(_BOOL8);
  BOOL (*v41)(_BOOL8);
  uint64_t v42;
  uint64_t v43;
  _QWORD *(*v44)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  unint64_t v45;
  const void *v46;
  size_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  llvm::MachineFunction *v90;
  llvm::MachineInstr *v91;
  llvm::MachineInstr *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  BOOL (*v97)(_BOOL8);
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  size_t v104;
  void *v105;
  int v106;
  uint64_t v107;
  void *v108;
  unsigned int v109;
  char v110;
  void *__src;
  unsigned int v112;
  unsigned __int8 v113;
  unint64_t v114;
  BOOL (*v115)(_BOOL8);
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  int v119;
  void *__p;
  _QWORD *(*v121)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  unsigned __int8 v122;
  void **p_p;
  uint64_t v124;

  v7 = a4;
  v124 = *MEMORY[0x1E0C80C00];
  v11 = BYTE4(a4);
  v12 = *(_QWORD *)(a5[1] + 16);
  v114 = 129;
  LODWORD(v115) = 0;
  if (*(_BYTE *)(v12 + 389))
    v13 = 255;
  else
    v13 = 15;
  sub_1C5544694((uint64_t)a5, &v114, v13);
  v15 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
  v106 = v7;
  v107 = a3;
  if ((a2 & 0xFF00000000) == 0)
  {
    LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
    goto LABEL_22;
  }
  v16 = *(_QWORD *)(a5[1] + 40);
  v114 = (unint64_t)&off_1E816EFF0;
  v115 = sub_1C554C7E0;
  v117 = &v114;
  __p = &off_1E816F038;
  v121 = sub_1C554C7F8;
  p_p = &__p;
  sub_1C554C3AC(a2, v16, (uint64_t)&v114, (uint64_t)&__p, 0, 0, &__src);
  v17 = p_p;
  if (p_p == &__p)
  {
    v18 = (void (**)(void **))((char *)__p + 32);
    v17 = &__p;
LABEL_7:
    (*v18)(v17);
    goto LABEL_8;
  }
  if (p_p)
  {
    v18 = (void (**)(void **))((char *)*p_p + 40);
    goto LABEL_7;
  }
LABEL_8:
  v19 = v117;
  if (v117 == &v114)
  {
    v20 = (void (**)(unint64_t *))(v114 + 32);
    v19 = &v114;
LABEL_10:
    (*v20)(v19);
    goto LABEL_11;
  }
  if (v117)
  {
    v20 = (void (**)(unint64_t *))(*v117 + 40);
    goto LABEL_10;
  }
LABEL_11:
  v21 = v113;
  if (v113)
  {
    v5 = v112;
    v109 = v112;
    if (v112 >= 0x41)
    {
      v104 = (((unint64_t)v112 + 63) >> 3) & 0x3FFFFFF8;
      v108 = (void *)operator new[]();
      v105 = __src;
      memcpy(v108, __src, v104);
      v110 = 1;
      if (v105)
        MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
      if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v108) > 0x40)
        goto LABEL_21;
      v22 = (void **)v108;
    }
    else
    {
      v108 = __src;
      v110 = 1;
      v22 = &v108;
    }
    if (!*v22)
    {
      v23 = 1;
      goto LABEL_16;
    }
  }
  else
  {
    LOBYTE(v108) = 0;
  }
LABEL_21:
  __p = (void *)129;
  LODWORD(v121) = 0;
  LODWORD(v114) = a2;
  LODWORD(v116) = 0;
  LODWORD(v117) = v15;
  v119 = 0;
  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 65, &__p, 1, &v114, 2, 0);
  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4);
  if (!v21)
    goto LABEL_22;
  v23 = 0;
LABEL_16:
  if (v5 >= 0x41 && v108)
    MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
  if ((v23 & 1) != 0)
  {
    v114 = 129;
    LODWORD(v115) = 0;
    sub_1C5544694((uint64_t)a5, &v114, 0);
LABEL_19:
    v25 = v24;
    goto LABEL_79;
  }
LABEL_22:
  v27 = *(_QWORD *)a5[1];
  sub_1C5EAC020(*(_QWORD *)(v27 + 40), (uint64_t)&__p);
  v33 = (_BYTE)p_p
     && ((v122 & 0x80u) == 0
       ? (v28 = (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))(v122 & 0x7F))
       : (v28 = v121),
         v28 == (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))15
      && ((v122 & 0x80u) == 0 ? (v29 = v122) : (v29 = (unint64_t)v121),
          (v122 & 0x80u) == 0 ? (v30 = &__p) : (v30 = __p),
          v29 >= 0xF ? (v31 = 15) : (v31 = v29),
          !memcmp(v30, "dynamic-library", v31) ? (v32 = v29 == 15) : (v32 = 0),
          v32))
     || llvm::Module::getPICLevel(*(llvm::Module **)(v27 + 40)) != 0;
  v34 = *(_QWORD *)(v27 + 40);
  v114 = (unint64_t)"agx.sample_rate";
  LOWORD(v118) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v34, (uint64_t)&v114);
  if ((_BYTE)p_p && (char)v122 < 0)
    operator delete(__p);
  if (NamedMetadata)
    v36 = 1;
  else
    v36 = v33;
  if (v36)
    v37 = 71;
  else
    v37 = 30;
  v38 = sub_1C4A8B770(v37);
  __p = (void *)129;
  LODWORD(v121) = 0;
  v114 = v38;
  LODWORD(v116) = 3;
  v39 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 315, &__p, 1, &v114, 1, 0);
  v41 = v40;
  if (v36 == 1)
  {
    v93 = *(unsigned __int8 *)(*(_QWORD *)(a5[1] + 16) + 389);
    v114 = 129;
    LODWORD(v115) = 0;
    if (v93)
      v94 = 255;
    else
      v94 = 15;
    sub_1C5544694((uint64_t)a5, &v114, v94);
    v96 = *(_DWORD *)(*(_QWORD *)(v95 + 32) + 4);
    __p = (void *)129;
    LODWORD(v121) = 0;
    v114 = v39;
    v115 = v41;
    LODWORD(v116) = 1;
    LODWORD(v117) = v96;
    v119 = 0;
    v39 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 65, &__p, 1, &v114, 2, 0);
    v41 = v97;
  }
  __p = (void *)129;
  LODWORD(v121) = 0;
  v114 = v39;
  v115 = v41;
  LODWORD(v116) = 1;
  LODWORD(v117) = a1;
  v119 = 0;
  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 65, &__p, 1, &v114, 2, 0);
  a1 = *(_DWORD *)(*(_QWORD *)(v42 + 32) + 4);
  v43 = *(_QWORD *)a5[1];
  sub_1C5EAC020(*(_QWORD *)(v43 + 40), (uint64_t)&__p);
  v48 = (_BYTE)p_p
     && ((v122 & 0x80u) == 0
       ? (v44 = (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))(v122 & 0x7F))
       : (v44 = v121),
         v44 == (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))15
      && ((v122 & 0x80u) == 0 ? (v45 = v122) : (v45 = (unint64_t)v121),
          (v122 & 0x80u) == 0 ? (v46 = &__p) : (v46 = __p),
          v45 >= 0xF ? (v47 = 15) : (v47 = v45),
          !memcmp(v46, "dynamic-library", v47) && v45 == 15))
     || llvm::Module::getPICLevel(*(llvm::Module **)(v43 + 40)) != 0;
  v49 = *(_QWORD *)(v43 + 40);
  v114 = (unint64_t)"agx.sample_rate";
  LOWORD(v118) = 259;
  v50 = llvm::Module::getNamedMetadata(v49, (uint64_t)&v114);
  if ((_BYTE)p_p && (char)v122 < 0)
    operator delete(__p);
  if (v50)
    v51 = 1;
  else
    v51 = v48;
  if (v51)
    v52 = 71;
  else
    v52 = 30;
  v53 = sub_1C4A8B770(v52);
  __p = (void *)129;
  LODWORD(v121) = 0;
  v114 = v53;
  LODWORD(v116) = 3;
  v54 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 315, &__p, 1, &v114, 1, 0);
  v25 = v55;
  if (v51 == 1)
  {
    v98 = v54;
    v99 = *(unsigned __int8 *)(*(_QWORD *)(a5[1] + 16) + 389);
    v114 = 129;
    LODWORD(v115) = 0;
    if (v99)
      v100 = 8;
    else
      v100 = 4;
    sub_1C5544694((uint64_t)a5, &v114, v100);
    v102 = *(_DWORD *)(*(_QWORD *)(v101 + 32) + 4);
    __p = (void *)129;
    LODWORD(v121) = 0;
    v114 = v98;
    v115 = (BOOL (*)(_BOOL8))v25;
    LODWORD(v116) = 1;
    LODWORD(v117) = v102;
    v119 = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 128, &__p, 1, &v114, 2, 0);
    goto LABEL_19;
  }
LABEL_79:
  v56 = *(_DWORD *)(*(_QWORD *)(v25 + 32) + 4);
  if (*(_BYTE *)(v12 + 389))
  {
    v114 = 129;
    LODWORD(v115) = 0;
    v57 = sub_1C5544694((uint64_t)a5, &v114, 8);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = v56;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v57;
    v118 = v58;
    v119 = 1;
    v59 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 127, &__p, 1, &v114, 2, 0);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = a1;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v59;
    v118 = v60;
    v119 = 1;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 45, &__p, 1, &v114, 2, 0);
    v62 = *(_DWORD *)(*(_QWORD *)(v61 + 32) + 4);
    if (v11)
    {
      __p = (void *)129;
      LODWORD(v121) = 0;
      LODWORD(v114) = v106;
      LODWORD(v116) = 0;
      sub_1C5546B4C(a5, 118, (unint64_t *)&__p, (int *)&v114);
    }
    else
    {
      v114 = 129;
      LODWORD(v115) = 0;
      sub_1C5544694((uint64_t)a5, &v114, 0);
    }
    v64 = v107;
    v65 = *(_DWORD *)(*(_QWORD *)(v63 + 32) + 4);
    v114 = 129;
    LODWORD(v115) = 0;
    v66 = sub_1C5544694((uint64_t)a5, &v114, 8);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = a2;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v66;
    v118 = v67;
    v119 = 1;
    v68 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 127, &__p, 1, &v114, 2, 0);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = v65;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v68;
    v118 = v69;
    v119 = 1;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 45, &__p, 1, &v114, 2, 0);
    v71 = *(_DWORD *)(*(_QWORD *)(v70 + 32) + 4);
    __p = (void *)257;
    LODWORD(v121) = 0;
    LODWORD(v114) = v62;
    LODWORD(v116) = 0;
    LODWORD(v117) = v71;
    v119 = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 76, &__p, 1, &v114, 2, 0);
    v73 = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 4);
  }
  else
  {
    v114 = 129;
    LODWORD(v115) = 0;
    v77 = sub_1C5544694((uint64_t)a5, &v114, 4);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = a1;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v77;
    v118 = v78;
    v119 = 1;
    v79 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 127, &__p, 1, &v114, 2, 0);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = v56;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v79;
    v118 = v80;
    v119 = 1;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 45, &__p, 1, &v114, 2, 0);
    v82 = *(_DWORD *)(*(_QWORD *)(v81 + 32) + 4);
    v114 = 129;
    LODWORD(v115) = 0;
    v83 = sub_1C5544694((uint64_t)a5, &v114, 4);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = v82;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v83;
    v118 = v84;
    v119 = 1;
    v85 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 127, &__p, 1, &v114, 2, 0);
    __p = (void *)129;
    LODWORD(v121) = 0;
    LODWORD(v114) = a2;
    LODWORD(v116) = 0;
    v117 = (unint64_t *)v85;
    v118 = v86;
    v119 = 1;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 45, &__p, 1, &v114, 2, 0);
    v88 = *(_DWORD *)(*(_QWORD *)(v87 + 32) + 4);
    if (v11)
    {
      __p = (void *)129;
      LODWORD(v121) = 0;
      LODWORD(v114) = v106;
      LODWORD(v116) = 0;
      sub_1C5546B4C(a5, 118, (unint64_t *)&__p, (int *)&v114);
      __p = (void *)257;
      LODWORD(v121) = 0;
      LODWORD(v114) = v88;
      LODWORD(v116) = 0;
      LODWORD(v117) = *(_DWORD *)(*(_QWORD *)(v103 + 32) + 4);
      v119 = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 76, &__p, 1, &v114, 2, 0);
    }
    else
    {
      __p = (void *)257;
      LODWORD(v121) = 0;
      LODWORD(v114) = v88;
      LODWORD(v116) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 118, &__p, 1, &v114, 1, 0);
    }
    v73 = *(_DWORD *)(*(_QWORD *)(v89 + 32) + 4);
    v64 = v107;
  }
  if ((v64 & 0xFF00000000) != 0)
  {
    __p = &off_1E7FADF30;
    LODWORD(v121) = 2;
    v90 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a5 + 32))(a5, 18, &__p, 1, 0, 0, 0);
    v92 = v91;
    v115 = 0;
    v116 = 0;
    LODWORD(v114) = 0;
    HIDWORD(v114) = v73;
    v117 = 0;
    llvm::MachineInstr::addOperand(v91, v90, (const llvm::MachineOperand *)&v114);
    LODWORD(v114) = 1;
    v115 = 0;
    v116 = 25;
    llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v114);
    v115 = 0;
    v116 = 0;
    LODWORD(v114) = 0;
    HIDWORD(v114) = v64;
    v117 = 0;
    llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v114);
    LODWORD(v114) = 1;
    v115 = 0;
    v116 = 26;
    llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v114);
    v75 = *((_QWORD *)v92 + 4);
  }
  else
  {
    __p = &off_1E7FADBF0;
    LODWORD(v121) = 2;
    LODWORD(v114) = v73;
    LODWORD(v116) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*a5 + 32))(a5, 19, &__p, 1, &v114, 1, 0);
    v75 = *(_QWORD *)(v74 + 32);
  }
  return *(unsigned int *)(v75 + 4);
}

uint64_t sub_1C4A7665C(uint64_t a1, int a2, int a3, uint64_t a4, unsigned __int8 **a5)
{
  unsigned int v6;
  int v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int8x8_t v12;
  uint8x8_t v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  uint64_t i;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  const void *p_p;
  size_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t NamedMetadata;
  char v65;
  unsigned __int8 **v66;
  void *v67;
  void *v68;
  void *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void **v77;
  void (**v78)(void **);
  void **v79;
  void (**v80)(void **);
  int v81;
  uint64_t v82;
  llvm::MachineOperand *v83;
  _DWORD *v84;
  int v85;
  int v86;
  _DWORD *v87;
  int v88;
  int v89;
  _DWORD *v90;
  unsigned int v91;
  unint64_t v92;
  llvm::MachineFunction *v93;
  unint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int GenericVirtualRegister;
  const char *v111;
  int v112;
  __int16 ***v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned __int8 v122;
  uint64_t v123;
  int v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  void *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  void *v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  __int128 *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _DWORD *v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  int v172;
  uint64_t v173;
  unsigned __int8 *v174;
  BOOL v175;
  uint64_t v176;
  int v177;
  char v178;
  char v179;
  unint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  llvm::MachineOperand *v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  __int32 v195;
  unint64_t v196;
  int v198;
  unsigned int v200;
  _QWORD v202[2];
  unint64_t v203;
  unsigned int v204;
  unsigned __int8 v205;
  void *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  _BYTE v210[16];
  void *v211;
  int v212;
  void *__p;
  uint64_t v214;
  _BYTE v215[7];
  unsigned __int8 v216;
  void **v217;
  void *v218[2];
  __int128 v219;
  uint64_t v220;
  int v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v192 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 32);
  if ((a3 - 2475) < 4)
  {
    v6 = 1;
    goto LABEL_6;
  }
  if (a3 <= 2560)
  {
    if ((a3 - 2545) >= 0x10)
      v6 = 1;
    else
      v6 = 2;
LABEL_6:
    v8 = (char *)&loc_1C4A7679C + 4 * word_1C676C59C[sub_1C4953F7C(a1, v6)];
    __asm { BR              X10 }
  }
  v7 = 3;
  if ((a3 - 2561) < 0x10)
  {
    v6 = 2;
    goto LABEL_6;
  }
  v177 = -1;
  if (a3 == 2703)
  {
    v7 = 4;
    v177 = 3;
  }
  v191 = v177;
  v188 = v7 + 1;
  v185 = v7;
  v172 = 0;
  v10 = 1;
  v11 = 32;
  v9 = 119;
  switch(a3)
  {
    case 2545:
    case 2549:
    case 2553:
    case 2557:
      goto LABEL_10;
    case 2546:
    case 2550:
    case 2554:
    case 2558:
      goto LABEL_7;
    case 2547:
    case 2551:
    case 2555:
    case 2559:
      goto LABEL_303;
    case 2548:
    case 2552:
    case 2556:
    case 2560:
      goto LABEL_11;
    case 2561:
    case 2565:
    case 2569:
    case 2573:
      v172 = 1;
LABEL_10:
      v10 = 0;
      v11 = 16;
      v9 = 179;
      goto LABEL_11;
    case 2562:
    case 2566:
    case 2570:
    case 2574:
      v172 = 1;
LABEL_7:
      v9 = 179;
      goto LABEL_11;
    case 2563:
    case 2567:
    case 2571:
    case 2575:
      goto LABEL_302;
    case 2564:
    case 2568:
    case 2572:
    case 2576:
      v172 = 1;
      goto LABEL_11;
    default:
      if (a3 == 2703)
LABEL_302:
        v172 = 1;
LABEL_303:
      v10 = 0;
      v11 = 16;
LABEL_11:
      v183 = v172;
      v181 = v11;
      v190 = sub_1C4953FF4(a1, 0xFFFFFFFF, 1u);
      v12.i32[0] = 1;
      v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      v200 = v13.i32[0];
      v195 = v13.i32[0];
      a5[5] = *(unsigned __int8 **)(a1 + 24);
      a5[6] = (unsigned __int8 *)a1;
      v14 = (unsigned __int8 **)(a1 + 56);
      v15 = a5 + 4;
      if ((unsigned __int8 **)(a1 + 56) != a5 + 4)
      {
        if (*v15)
          llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v15);
        v16 = *v14;
        *v15 = *v14;
        if (v16)
          llvm::MetadataTracking::track((uint64_t)v15, v16, 2);
      }
      v198 = v10;
      v17 = a2;
      if (!a2)
      {
        v182 = 0;
        v22 = (uint64_t)a5;
        v23 = a4;
        v24 = v188;
        goto LABEL_65;
      }
      v208 = v210;
      v209 = 0x400000000;
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 0x1FFFFFFFE4);
      if (v200 < 2)
      {
        v25 = 129;
        if (v10)
          v25 = 257;
        __p = (void *)v25;
        LODWORD(v214) = 0;
        v203 = 257;
        v204 = 0;
        v26 = sub_1C5544694((uint64_t)a5, &v203, 31 - __clz(1u));
        LODWORD(v218[0]) = v18;
        LODWORD(v219) = 0;
        *((_QWORD *)&v219 + 1) = v26;
        v220 = v27;
        v221 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5 + 4))(a5, 205, &__p, 1, v218, 2, 0);
        v29 = *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4);
        v30 = v209;
        if (v209 >= HIDWORD(v209))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v208, (uint64_t)v210, v209 + 1, 4);
          v30 = v209;
        }
        *((_DWORD *)v208 + v30) = v29;
        LODWORD(v209) = v209 + 1;
      }
      else
      {
        v218[0] = &v219;
        v218[1] = (void *)0x400000000;
        sub_1C4A79060(v18, a4, (uint64_t)a5, (uint64_t)v218);
        for (i = 0; i != 4; ++i)
        {
          if (((1u >> i) & 1) != 0)
          {
            v20 = *((_DWORD *)v218[0] + i);
            v21 = v209;
            if (v209 >= (unint64_t)HIDWORD(v209))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v208, (uint64_t)v210, v209 + 1, 4);
              v21 = v209;
            }
            *((_DWORD *)v208 + v21) = v20;
            LODWORD(v209) = v209 + 1;
          }
        }
        if (v218[0] != &v219)
          free(v218[0]);
      }
      v31 = v209;
      v22 = (uint64_t)a5;
      v23 = a4;
      v203 = 129;
      if ((*(_DWORD *)v208 & 0x80000000) != 0
        && (v32 = *(_DWORD *)v208 & 0x7FFFFFFF, v32 < *(_DWORD *)(a4 + 432)))
      {
        v33 = *(void **)(*(_QWORD *)(a4 + 424) + 8 * v32);
      }
      else
      {
        v33 = 0;
      }
      v218[0] = v33;
      v35 = sub_1C4825F50((unint64_t *)v218);
      if ((_DWORD)v34 == 1)
      v37 = sub_1C4825F50(&v203);
      if ((_DWORD)v36 == 1)
      if (v35 > v37 && (_DWORD)v209)
      {
        v38 = v208;
        v39 = 4 * v209;
        do
        {
          __p = (void *)v203;
          LODWORD(v214) = 0;
          LODWORD(v218[0]) = *v38;
          LODWORD(v219) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5 + 4))(a5, v9, &__p, 1, v218, 1, 0);
          *v38++ = *(_DWORD *)(*(_QWORD *)(v40 + 32) + 4);
          v39 -= 4;
        }
        while (v39);
      }
      if (v31 < 2)
      {
        __p = (void *)129;
        LODWORD(v214) = 0;
        LODWORD(v218[0]) = *(_DWORD *)v208;
        LODWORD(v219) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5 + 4))(a5, 19, &__p, 1, v218, 1, 0);
        v42 = v41;
        v17 = a2;
        v24 = v188;
        goto LABEL_63;
      }
      if (v195 == 1)
        v43 = 129;
      else
        v43 = (8 * v195) | 0x800004u;
      __p = (void *)v43;
      LODWORD(v214) = 0;
      v44 = (int *)v208;
      v45 = v209;
      v218[0] = &v219;
      v218[1] = (void *)0x800000000;
      v24 = v188;
      if (v209 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v218, (uint64_t)&v219, v209, 24);
        v46 = LODWORD(v218[1]);
        v47 = (__int128 *)v218[0];
      }
      else
      {
        if (!(_DWORD)v209)
        {
          v52 = 0;
          v47 = &v219;
          goto LABEL_60;
        }
        v46 = 0;
        v47 = &v219;
      }
      v48 = 24 * v46;
      v49 = 4 * v45;
      do
      {
        v50 = *v44++;
        v51 = (_DWORD *)((char *)v47 + v48);
        *v51 = v50;
        v51[4] = 0;
        v48 += 24;
        v49 -= 4;
      }
      while (v49);
      v52 = (int)v218[1];
LABEL_60:
      LODWORD(v218[1]) = v52 + v45;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, __int128 *))*a5 + 4))(a5, 77, &__p, 1, v47);
      v42 = v53;
      if (v218[0] != &v219)
        free(v218[0]);
      v17 = a2;
LABEL_63:
      v182 = *(_DWORD *)(*(_QWORD *)(v42 + 32) + 4);
      if (v208 != v210)
        free(v208);
LABEL_65:
      v218[0] = (void *)129;
      LODWORD(v218[1]) = 0;
      sub_1C5544694(v22, (unint64_t *)v218, 0);
      v193 = *(_QWORD *)(v54 + 32);
      v55 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 68), v23);
      v56 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
      v189 = v55;
      if (((v17 ^ 1) & 1) == 0 && !v55)
      {
        v57 = *v192;
        sub_1C5EAC020(*(_QWORD *)(*v192 + 40), (uint64_t)&__p);
        v62 = (_BYTE)v217
           && ((v216 & 0x80u) == 0 ? (v58 = v216 & 0x7F) : (v58 = v214),
               v58 == 15
            && ((v216 & 0x80u) == 0 ? (v59 = v216) : (v59 = v214),
                (v216 & 0x80u) == 0 ? (p_p = &__p) : (p_p = __p),
                v59 >= 0xF ? (v61 = 15) : (v61 = v59),
                !memcmp(p_p, "dynamic-library", v61) && v59 == 15))
           || llvm::Module::getPICLevel(*(llvm::Module **)(v57 + 40)) != 0;
        v63 = *(_QWORD *)(v57 + 40);
        v218[0] = "agx.sample_rate";
        LOWORD(v220) = 259;
        NamedMetadata = llvm::Module::getNamedMetadata(v63, (uint64_t)v218);
        if ((_BYTE)v217 && (char)v216 < 0)
          operator delete(__p);
        if (NamedMetadata)
          v65 = 1;
        else
          v65 = v62;
        if ((v65 & 1) != 0)
        {
          __p = (void *)129;
          LODWORD(v214) = 0;
          v218[0] = (void *)7;
          LODWORD(v219) = 3;
          v66 = a5;
          v67 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5
                         + 4))(a5, 315, &__p, 1, v218, 1, 0);
          v69 = v68;
          v70 = *(unsigned __int8 *)(*((_QWORD *)a5[1] + 2) + 389);
          v218[0] = (void *)129;
          LODWORD(v218[1]) = 0;
          if (v70)
            v71 = 255;
          else
            v71 = 15;
          sub_1C5544694((uint64_t)a5, (unint64_t *)v218, v71);
          v73 = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 4);
          __p = (void *)129;
          LODWORD(v214) = 0;
          v218[0] = v67;
          v218[1] = v69;
          LODWORD(v219) = 1;
          DWORD2(v219) = v73;
          v221 = 0;
          v74 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5
                         + 4))(a5, 65, &__p, 1, v218, 2, 0);
        }
        else
        {
          v218[0] = (void *)129;
          LODWORD(v218[1]) = 0;
          v66 = a5;
          v74 = (void *)sub_1C5544694((uint64_t)a5, (unint64_t *)v218, 1);
        }
        __p = (void *)129;
        LODWORD(v214) = 0;
        v218[0] = v74;
        v218[1] = v75;
        LODWORD(v219) = 1;
        DWORD2(v219) = v56;
        v221 = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v66 + 4))(v66, 65, &__p, 1, v218, 2, 0);
        v56 = *(_DWORD *)(*(_QWORD *)(v76 + 32) + 4);
      }
      v218[0] = &off_1E816EFF0;
      v218[1] = sub_1C554C7E0;
      *((_QWORD *)&v219 + 1) = v218;
      __p = &off_1E816F038;
      v214 = (uint64_t)sub_1C554C7F8;
      v217 = &__p;
      sub_1C554C3AC(v56, v23, (uint64_t)v218, (uint64_t)&__p, 1, 0, &v203);
      v77 = v217;
      if (v217 == &__p)
      {
        v78 = (void (**)(void **))((char *)__p + 32);
        v77 = &__p;
LABEL_100:
        (*v78)(v77);
        goto LABEL_101;
      }
      if (v217)
      {
        v78 = (void (**)(void **))((char *)*v217 + 40);
        goto LABEL_100;
      }
LABEL_101:
      v79 = (void **)*((_QWORD *)&v219 + 1);
      if (*((void ***)&v219 + 1) == v218)
      {
        v80 = (void (**)(void **))((char *)v218[0] + 32);
        v79 = v218;
LABEL_103:
        (*v80)(v79);
        goto LABEL_104;
      }
      if (*((_QWORD *)&v219 + 1))
      {
        v80 = (void (**)(void **))(**((_QWORD **)&v219 + 1) + 40);
        goto LABEL_103;
      }
LABEL_104:
      v81 = v205;
      v82 = *(_QWORD *)(a1 + 32);
      v83 = (llvm::MachineOperand *)(v82 + 32 * v191);
      v194 = sub_1C554C050(*(_DWORD *)(v82 + 32 * v185 + 4), v23);
      v186 = v83;
      v187 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v24 + 4), v23);
      v184 = v56;
      v218[0] = &v219;
      LODWORD(v219) = 55;
      *(_QWORD *)((char *)&v219 + 4) = 0x3900000038;
      HIDWORD(v219) = 58;
      v218[1] = (void *)0x400000004;
      v84 = operator new(8uLL);
      v85 = *((_DWORD *)&v219 + (v195 - 1));
      *v84 = 54;
      v84[1] = v85;
      if (v190 == 2)
        v86 = 41;
      else
        v86 = 49;
      v87 = operator new(0x10uLL);
      v87[2] = v86;
      *(_QWORD *)v87 = *(_QWORD *)v84;
      operator delete(v84);
      if (v81)
        v88 = 49;
      else
        v88 = 41;
      v87[3] = v88;
      if (v183)
        v89 = 41;
      else
        v89 = 60;
      v90 = operator new(0x20uLL);
      v90[4] = v89;
      *(_OWORD *)v90 = *(_OWORD *)v87;
      operator delete(v87);
      v91 = sub_1C4C640F8(105, 5, v90);
      if (v218[0] != &v219)
        free(v218[0]);
      operator delete(v90);
      v93 = sub_1C55437B8(a5, v91);
      v94 = v92;
      v95 = (unint64_t *)a5[6];
      v96 = *((_QWORD *)a5[5] + 5);
      *(_QWORD *)(v92 + 24) = v96;
      v97 = *(_QWORD *)(v96 + 32);
      v98 = *(unsigned int *)(v92 + 40);
      if ((_DWORD)v98)
      {
        v114 = *(_QWORD *)(v92 + 32);
        v115 = *(_QWORD *)(v97 + 40);
        v116 = 32 * v98;
        do
        {
          if (!*(_BYTE *)v114)
          {
            v117 = *(unsigned int *)(v114 + 4);
            if ((int)v117 >= 0)
              v118 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
            else
              v118 = (uint64_t *)(*(_QWORD *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
            v119 = *v118;
            if (*v118)
            {
              v120 = *(_QWORD *)(v119 + 16);
              *(_QWORD *)(v119 + 16) = v114;
              *(_QWORD *)(v114 + 16) = v120;
              if ((*(_BYTE *)(v114 + 3) & 1) != 0)
              {
                *(_QWORD *)(v114 + 24) = v119;
              }
              else
              {
                *(_QWORD *)(v114 + 24) = 0;
                v118 = (uint64_t *)(v120 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v114 + 16) = v114;
              *(_QWORD *)(v114 + 24) = 0;
            }
            *v118 = v114;
          }
          v114 += 32;
          v116 -= 32;
        }
        while (v116);
      }
      v99 = *(_QWORD *)(v97 + 728);
      if (v99)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v99 + 24))(v99, v92);
      v100 = *v95 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v94 = v100 | *(_QWORD *)v94 & 7;
      *(_QWORD *)(v94 + 8) = v95;
      *(_QWORD *)(v100 + 8) = v94;
      *v95 = *v95 & 7 | v94;
      v101 = a5[7];
      if (v101)
        (*(void (**)(unsigned __int8 *, unint64_t))(*(_QWORD *)v101 + 24))(v101, v94);
      v202[0] = v93;
      v202[1] = v94;
      if ((a2 & 1) != 0)
      {
        v218[1] = 0;
        v219 = 0uLL;
        HIDWORD(v218[0]) = v182;
        LODWORD(v218[0]) = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      }
      else
      {
        *(_OWORD *)v218 = xmmword_1C676B840;
        if (*((_DWORD *)v218 + (v195 - 1)) == 1)
          v102 = 129;
        else
          v102 = (8 * (unsigned __int16)*((_DWORD *)v218 + (v195 - 1))) | 0x800004u;
        __p = (void *)v102;
        if (v195 == 3)
        {
          v103 = 3;
          if ((v102 & 1) == 0)
            v103 = 19;
          v104 = (8 * (v102 >> v103)) | 1;
          v105 = 35;
          v106 = 19;
          if ((v102 & 4) == 0)
            v105 = 19;
          v107 = v102 >> v105;
          if ((v102 & 4) == 0)
            v106 = 3;
          if ((v102 & 1) != 0)
            v106 = 3;
          v108 = (8 * (unsigned __int16)(v102 >> v106)) | (v107 << 19) | 2;
          if ((v102 & 2) != 0)
            v109 = v108;
          else
            v109 = v104;
          v102 = sub_1C4953AD0(3, v109);
          __p = (void *)v102;
        }
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a4, v102, "", 0);
        v112 = sub_1C4825F50((unint64_t *)&__p);
        if ((_DWORD)v111 == 1)
        if (v112 <= 111)
        {
          if (v112 <= 47)
          {
            v113 = (__int16 ***)&off_1E7FB1B88;
            if (v112 != 1 && v112 != 16)
              v113 = &off_1E7FB1568;
          }
          else if (v112 > 79)
          {
            if (v112 == 80)
              v113 = (__int16 ***)&off_1E7FB1680;
            else
              v113 = (__int16 ***)&off_1E7FB16B8;
          }
          else if (v112 == 48)
          {
            v113 = (__int16 ***)&off_1E7FB1610;
          }
          else
          {
            v113 = (__int16 ***)&off_1E7FB1BC0;
          }
        }
        else if (v112 > 223)
        {
          if (v112 > 287)
          {
            if (v112 == 288)
              v113 = (__int16 ***)&off_1E7FB1878;
            else
              v113 = (__int16 ***)&off_1E7FB18B0;
          }
          else if (v112 == 224)
          {
            v113 = (__int16 ***)&off_1E7FB1808;
          }
          else
          {
            v113 = (__int16 ***)&off_1E7FB1840;
          }
        }
        else if (v112 > 159)
        {
          if (v112 == 160)
            v113 = (__int16 ***)&off_1E7FB1798;
          else
            v113 = (__int16 ***)&off_1E7FB17D0;
        }
        else if (v112 == 112)
        {
          v113 = (__int16 ***)&off_1E7FB1728;
        }
        else
        {
          v113 = (__int16 ***)&off_1E7FB1760;
        }
        *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16 * (GenericVirtualRegister & 0x7FFFFFFF)) = v113;
        v218[1] = 0;
        v219 = 0uLL;
        HIDWORD(v218[0]) = GenericVirtualRegister;
        LODWORD(v218[0]) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      }
      LODWORD(v218[0]) = 1;
      v218[1] = 0;
      *(_QWORD *)&v219 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      LODWORD(v218[0]) = 1;
      v218[1] = 0;
      *(_QWORD *)&v219 = ((unint64_t)(v189 != 0) << 8) | 0x11;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      v121 = *(_DWORD *)(v193 + 4);
      if (v190 == 2)
      {
        v218[1] = 0;
        v219 = 0uLL;
        HIDWORD(v218[0]) = v121;
        LODWORD(v218[0]) = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
        LODWORD(v218[0]) = 1;
        v218[1] = 0;
        *(_QWORD *)&v219 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
        v122 = 0;
        v123 = 0;
      }
      else
      {
        v122 = sub_1C554C050(v121, a4);
        LODWORD(v218[0]) = 1;
        v218[1] = 0;
        *(_QWORD *)&v219 = v122;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
        v123 = 0x100000000;
      }
      v124 = v198;
      if (v81)
      {
        v125 = &v203;
        if (v204 >= 0x41)
          v125 = (unint64_t *)v203;
        v126 = *v125;
        if ((*(_WORD *)(*v192 + 18) & 0x3FF0) == 0x650)
        {
          v127 = 1;
        }
        else
        {
          v127 = 255;
          if (!*(_BYTE *)(v192[2] + 389))
            v127 = 15;
        }
        v128 = a2;
        LODWORD(v218[0]) = 1;
        v218[1] = 0;
        *(_QWORD *)&v219 = v127 & v126;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      }
      else
      {
        v218[1] = 0;
        v219 = 0uLL;
        HIDWORD(v218[0]) = v184;
        LODWORD(v218[0]) = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
        LODWORD(v218[0]) = 1;
        v218[1] = 0;
        *(_QWORD *)&v219 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
        v128 = a2;
      }
      if (v191 != -1)
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, v186);
      LODWORD(v218[0]) = 1;
      v218[1] = 0;
      *(_QWORD *)&v219 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      LODWORD(v218[0]) = 1;
      v218[1] = 0;
      *(_QWORD *)&v219 = v194;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      LODWORD(v218[0]) = 1;
      v218[1] = 0;
      *(_QWORD *)&v219 = v187;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v93, (const llvm::MachineOperand *)v218);
      if (v128)
        v129 = 2;
      else
        v129 = 1;
      sub_1C4AD5684(v123 | v122, 1u, 1u, v129, (uint64_t)v192);
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v218[0] = v133;
      v134 = *(_QWORD *)(v94 + 48);
      v135 = v200;
      if (v134 >= 8)
      {
        v173 = *(_QWORD *)(v94 + 48) & 7;
        v174 = (unsigned __int8 *)(v134 & 0xFFFFFFFFFFFFFFF8);
        if (v173 == 1 && v174)
        {
          v130 = 0;
          v132 = 0;
          v131 = (uint64_t)v174;
        }
        else if (v173 == 3 && v174)
        {
          v176 = v174[4];
          if (v174[4])
            v131 = *(_QWORD *)&v174[8 * *(int *)v174 + 8];
          else
            v131 = 0;
          if (v174[5])
            v130 = *(_QWORD *)&v174[8 * *(int *)v174 + 8 + 8 * v176];
          else
            v130 = 0;
          if (v174[6])
            v132 = *(_QWORD *)&v174[8 * *(int *)v174 + 8 + 8 * v174[5] + 8 * v176];
          else
            v132 = 0;
          v124 = v198;
          LOBYTE(v128) = a2;
          v135 = v200;
        }
        else
        {
          v131 = 0;
          v132 = 0;
          if (v174)
            v175 = v173 == 2;
          else
            v175 = 0;
          if (v175)
            v130 = (uint64_t)v174;
          else
            v130 = 0;
        }
      }
      llvm::MachineInstr::setExtraInfo(v94, (uint64_t)v93, v218, 1, v131, v130, v132);
      sub_1C49400A8((uint64_t)v202);
      if ((v128 & 1) != 0)
        goto LABEL_262;
      if (v135 == 3)
      {
        v136 = v135 - 1;
      }
      else
      {
        *(_OWORD *)v218 = xmmword_1C676B840;
        v136 = v135 - 1;
        if (*((_DWORD *)v218 + v136) == 1)
          v137 = (8 * v181) | 1;
        else
          v137 = (v181 << 19) | (8 * (unsigned __int16)*((_DWORD *)v218 + v136)) | 4;
        *(_OWORD *)v218 = xmmword_1C676B840;
        if (*((_DWORD *)v218 + (v195 - 1)) == 1)
          v138 = 129;
        else
          v138 = (8 * (unsigned __int16)*((_DWORD *)v218 + (v195 - 1))) | 0x800004;
        if (v137 == v138)
          goto LABEL_261;
      }
      v139 = *(_DWORD *)(*(_QWORD *)(v94 + 32) + 4);
      *(_OWORD *)v218 = xmmword_1C676B840;
      v140 = *((_DWORD *)v218 + v136);
      if (v124)
        v141 = 32;
      else
        v141 = 16;
      if (v140 == 1)
        v142 = (8 * v141) | 1;
      else
        v142 = (v141 << 19) | (8 * (unsigned __int16)v140) | 4;
      v143 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 0x1FFFFFFFE4);
      v208 = v210;
      v209 = 0x400000000;
      v196 = v142;
      sub_1C4A8BC28(&v206, 1, v143, 1, (uint64_t)a5);
      if (v135 >= 2)
      {
        if ((v196 & 2) != 0)
        {
          v178 = 35;
          v179 = 19;
          if ((v196 & 4) == 0)
            v178 = 19;
          v180 = v196 >> v178;
          if ((v196 & 4) == 0)
            v179 = 3;
          if ((v196 & 1) != 0)
            v179 = 3;
          v145 = (void *)((8 * (unsigned __int16)(v196 >> v179)) | (v180 << 19) | 2);
        }
        else
        {
          v144 = 3;
          if ((v196 & 1) == 0)
            v144 = 19;
          v145 = (void *)((8 * (v196 >> v144)) | 1);
        }
        if ((v139 & 0x80000000) != 0
          && (v147 = v139 & 0x7FFFFFFF, v147 < *(unsigned int *)(a4 + 432))
          && (v148 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * v147), (v148 & 0xFFFFFFFFFFFFFFF9) != 0)
          && (v148 & 4) != 0)
        {
          sub_1C4A79060(v139, a4, (uint64_t)a5, (uint64_t)&v208);
        }
        else
        {
          v149 = v209;
          if (v209 >= HIDWORD(v209))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v208, (uint64_t)v210, v209 + 1, 4);
            v149 = v209;
          }
          *((_DWORD *)v208 + v149) = v139;
          LODWORD(v209) = v209 + 1;
        }
        __p = v215;
        v214 = 0x400000000;
        v150 = 0;
        v151 = 0;
        do
        {
          if (v198)
          {
            v211 = v145;
            v212 = 0;
            LODWORD(v218[0]) = *((_DWORD *)v208 + v151);
            LODWORD(v219) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5 + 4))(a5, 126, &v211, 1, v218, 1, 0);
            v153 = *(_DWORD *)(*(_QWORD *)(v152 + 32) + 4);
            v154 = v214;
            if (v214 >= (unint64_t)HIDWORD(v214))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v215, v214 + 1, 4);
              v154 = v214;
            }
            *((_DWORD *)__p + v154) = v153;
          }
          else
          {
            v155 = *((_DWORD *)v208 + v151);
            if (v150 >= HIDWORD(v214))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v215, v150 + 1, 4);
              v150 = v214;
            }
            *((_DWORD *)__p + v150) = v155;
          }
          v150 = v214 + 1;
          LODWORD(v214) = v214 + 1;
          ++v151;
        }
        while (v200 != v151);
        if (v200 == 3)
        {
          v218[0] = v145;
          LODWORD(v218[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*a5 + 4))(a5, 68, v218, 1, 0, 0, 0);
          v157 = *(_DWORD *)(*(_QWORD *)(v156 + 32) + 4);
          v158 = v214;
          v159 = (void *)v196;
          if (v214 >= HIDWORD(v214))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v215, v214 + 1, 4);
            v158 = v214;
          }
          *((_DWORD *)__p + v158) = v157;
          v150 = v214 + 1;
          LODWORD(v214) = v214 + 1;
        }
        else
        {
          v159 = (void *)v196;
        }
        v160 = v150;
        v211 = v159;
        v212 = 0;
        v161 = (int *)__p;
        v218[0] = &v219;
        v218[1] = (void *)0x800000000;
        if (v150 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v218, (uint64_t)&v219, v150, 24);
          v162 = LODWORD(v218[1]);
          v163 = (__int128 *)v218[0];
        }
        else
        {
          if (!v150)
          {
            v168 = 0;
            v163 = &v219;
LABEL_253:
            LODWORD(v218[1]) = v168 + v160;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, __int128 *))*a5 + 4))(a5, 77, &v211, 1, v163);
            v94 = v169;
            if (v218[0] != &v219)
              free(v218[0]);
            if (__p != v215)
              free(__p);
            goto LABEL_257;
          }
          v162 = 0;
          v163 = &v219;
        }
        v164 = 24 * v162;
        v165 = 4 * v160;
        do
        {
          v166 = *v161++;
          v167 = (_DWORD *)((char *)v163 + v164);
          *v167 = v166;
          v167[4] = 0;
          v164 += 24;
          v165 -= 4;
        }
        while (v165);
        v168 = (int)v218[1];
        goto LABEL_253;
      }
      if (v124)
      {
        __p = (void *)257;
        LODWORD(v214) = 0;
        v218[0] = v93;
        v218[1] = (void *)v94;
        LODWORD(v219) = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5 + 4))(a5, 126, &__p, 1, v218, 1, 0);
        v94 = v146;
      }
LABEL_257:
      if (v206 != &v207)
        free(v206);
      if (v208 != v210)
        free(v208);
LABEL_261:
      LODWORD(__p) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
      LODWORD(v214) = 1;
      LODWORD(v218[0]) = *(_DWORD *)(*(_QWORD *)(v94 + 32) + 4);
      LODWORD(v219) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*a5 + 4))(a5, 19, &__p, 1, v218, 1, 0);
LABEL_262:
      v170 = a1;
      if ((*(_BYTE *)a1 & 4) == 0)
      {
        v170 = a1;
        if ((*(_WORD *)(a1 + 44) & 8) != 0)
        {
          v170 = a1;
          do
            v170 = *(_QWORD *)(v170 + 8);
          while ((*(_WORD *)(v170 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v170 + 8));
      if (v205 && v204 >= 0x41 && v203)
        MEMORY[0x1CAA32F9C](v203, 0x1000C8000313F17);
      return 1;
  }
}

void sub_1C4A79060(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  unint64_t v53;
  void *v54;
  int v55;
  int v56;
  void *v57;
  uint64_t v58;
  _DWORD v59[8];
  void *v60;
  uint64_t v61;
  _DWORD v62[32];
  uint64_t v63;

  v8 = 0;
  v63 = *MEMORY[0x1E0C80C00];
  v9 = a1 & 0x7FFFFFFF;
  if ((a1 & 0x80000000) != 0
    && v9 < *(unsigned int *)(a2 + 432)
    && (v8 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v9), (v8 & 2) != 0))
  {
    v51 = 35;
    v52 = 19;
    if ((v8 & 4) == 0)
      v51 = 19;
    v53 = v8 >> v51;
    if ((v8 & 4) == 0)
      v52 = 3;
    if ((v8 & 1) != 0)
      v52 = 3;
    v11 = (void *)((8 * (unsigned __int16)(v8 >> v52)) & 0xFFFFF8000007FFFFLL | ((v53 & 0xFFFFFF) << 19) | 2);
    v12 = 0x800000000000000;
  }
  else
  {
    v10 = 3;
    if ((v8 & 1) == 0)
      v10 = 19;
    v11 = (void *)(v8 & 0x8000000000000000 | (8 * (v8 >> v10)) | 1);
    v12 = 0x8000000000000;
  }
  v13 = *(_QWORD *)(a2 + 24) + 16 * v9 + 8;
  v14 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  if ((a1 & 0x80000000) != 0)
    v14 = (uint64_t *)v13;
  v15 = *v14;
  if (v15 && ((*(_BYTE *)(v15 + 3) & 1) != 0 || (v15 = *(_QWORD *)(v15 + 24)) != 0 && (*(_BYTE *)(v15 + 3) & 1) != 0))
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = 0;
  if ((v8 & v12) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v17 = (unsigned __int16)(v8 >> 3);
  v18 = **(unsigned __int16 **)(v16 + 16);
  if (v18 > 0x4D)
  {
    if (v18 == 78)
    {
      if (*(_DWORD *)(v16 + 40) != v17 + 1)
        goto LABEL_45;
      if ((unsigned __int16)(v8 >> 3))
      {
        v30 = 0;
        v31 = 32 * (unsigned __int16)(v8 >> 3);
        do
        {
          v57 = v11;
          LODWORD(v58) = 0;
          LODWORD(v60) = *(_DWORD *)(*(_QWORD *)(v16 + 32) + v30 + 36);
          v62[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v57, 1, &v60, 1, 0);
          v33 = *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4);
          v34 = *(unsigned int *)(a4 + 8);
          if (v34 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v34 + 1, 4);
            v34 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v34) = v33;
          ++*(_DWORD *)(a4 + 8);
          v30 += 32;
        }
        while (v31 != v30);
      }
    }
    else
    {
      if (v18 != 119)
        goto LABEL_45;
      v60 = v62;
      v61 = 0x400000000;
      sub_1C4A79060(*(unsigned int *)(*(_QWORD *)(v16 + 32) + 36), a2, a3, &v60);
      if ((_DWORD)v61)
      {
        v22 = 0;
        do
        {
          v54 = v11;
          v55 = 0;
          LODWORD(v57) = *((_DWORD *)v60 + v22);
          v59[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v54, 1, &v57, 1, 0);
          v24 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 4);
          v25 = *(unsigned int *)(a4 + 8);
          if (v25 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v25 + 1, 4);
            v25 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v25) = v24;
          ++*(_DWORD *)(a4 + 8);
          ++v22;
        }
        while (v22 < v61);
      }
      v26 = v60;
      if (v60 != v62)
LABEL_62:
        free(v26);
    }
  }
  else
  {
    if (v18 != 68)
    {
      if (v18 == 77 && *(_DWORD *)(v16 + 40) == v17 + 1)
      {
        if ((unsigned __int16)(v8 >> 3))
        {
          v19 = 0;
          v20 = *(_DWORD *)(a4 + 8);
          do
          {
            v21 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + v19 + 36);
            if (v20 >= *(_DWORD *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v20 + 1, 4);
              v20 = *(_DWORD *)(a4 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v20) = v21;
            v20 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v20;
            v19 += 32;
          }
          while (32 * (unsigned __int16)(v8 >> 3) != v19);
        }
        return;
      }
LABEL_45:
      v35 = (unsigned __int16)(v8 >> 3);
      v57 = v59;
      v58 = 0x400000000;
      sub_1C495A254((unsigned int *)&v57, v35, (uint64_t)v11);
      v36 = (uint64_t *)v57;
      v37 = v58;
      LODWORD(v54) = a1;
      v56 = 0;
      v60 = v62;
      v61 = 0x800000000;
      if (v58 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v58, 16);
        v38 = v61;
        v39 = v60;
      }
      else
      {
        if (!(_DWORD)v58)
        {
          v43 = 0;
          v44 = v62;
          goto LABEL_52;
        }
        v38 = 0;
        v39 = v62;
      }
      v40 = 8 * v37;
      v41 = &v39[4 * v38];
      do
      {
        v42 = *v36++;
        *(_QWORD *)v41 = v42;
        v41[2] = 0;
        v41 += 4;
        v40 -= 8;
      }
      while (v40);
      v43 = v61;
      v44 = v60;
LABEL_52:
      LODWORD(v61) = v43 + v37;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a3 + 32))(a3, 74, v44);
      v46 = v45;
      if (v60 == v62)
      {
        if (!(unsigned __int16)(v8 >> 3))
          goto LABEL_61;
      }
      else
      {
        free(v60);
        if (!(unsigned __int16)(v8 >> 3))
          goto LABEL_61;
      }
      v47 = 0;
      v48 = *(_DWORD *)(a4 + 8);
      v49 = 32 * v35;
      do
      {
        v50 = *(_DWORD *)(*(_QWORD *)(v46 + 32) + v47 + 4);
        if (v48 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v48 + 1, 4);
          v48 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v48) = v50;
        v48 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v48;
        v47 += 32;
      }
      while (v49 != v47);
LABEL_61:
      v26 = v57;
      if (v57 == v59)
        return;
      goto LABEL_62;
    }
    v60 = v11;
    LODWORD(v61) = 0;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 68, &v60, 1, 0, 0, 0);
    if ((unsigned __int16)(v8 >> 3))
    {
      v28 = *(_DWORD *)(*(_QWORD *)(v27 + 32) + 4);
      v29 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v29 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v29 + 1, 4);
          v29 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v29) = v28;
        v29 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v29;
        --v17;
      }
      while (v17);
    }
  }
}

uint64_t sub_1C4A7962C(int a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1 < 0 && (a1 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a2 + 432))
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  else
    v5 = 0;
  v21 = v5;
  v6 = sub_1C4A73FE0(a1, a2, 0x100u);
  if (HIDWORD(v6))
  {
    v22 = 129;
    LODWORD(v23) = 0;
    sub_1C5544694((uint64_t)a3, (unint64_t *)&v22, v6);
  }
  else
  {
    v7 = sub_1C4825F50(&v21);
    if ((_DWORD)v8 == 1)
    {
      v20 = v7;
      v7 = v20;
    }
    v28 = (8 * v7) | 1;
    v29 = 0;
    LODWORD(v22) = a1;
    v24 = 0;
    v9 = sub_1C5546EF4(a3, &v28, (int *)&v22);
    v28 = 129;
    v29 = 0;
    v22 = v9;
    v23 = v10;
    v24 = 1;
    v11 = sub_1C5546B4C(a3, 118, (unint64_t *)&v28, (int *)&v22);
    v13 = v12;
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3[1] + 344) + 336))(*(_QWORD *)(a3[1] + 344));
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, 16);
    v22 = 129;
    LODWORD(v23) = 0;
    v16 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v22, 31 - __clz(v15));
    v28 = 129;
    v29 = 0;
    v22 = v11;
    v23 = v13;
    v24 = 1;
    v25 = v16;
    v26 = v17;
    v27 = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 128, &v28, 1, &v22, 2, 0);
  }
  return *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
}

uint64_t sub_1C4A79804(uint64_t a1, uint64_t a2, unsigned __int8 **a3, char a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  unsigned __int8 **v35;
  int v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  BOOL v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  const char *v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  const char *v94;
  int v95;
  const char *v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  __int16 v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int16 v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  __int16 v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int16 v123;
  unint64_t v124;
  __int128 v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  _DWORD *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  const char *v139;
  unsigned int v140;
  char v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t result;
  int *v147;
  const char *v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t (***v152)();
  void (**v153)(uint64_t (***)());
  void **v154;
  void (**v155)(void **);
  llvm::MachineMemOperand *v156;
  int GenericVirtualRegister;
  const char *v158;
  char v159;
  unint64_t v160;
  unsigned int v161;
  int v162;
  unsigned __int8 *v163;
  int v164;
  unint64_t v165;
  const char *v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  char v176;
  int v177;
  const char *v178;
  unsigned int v179;
  void *v180;
  void *v181;
  const char *v182;
  int v183;
  unint64_t v184;
  int v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void (*v190)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD);
  unsigned __int8 **v191;
  uint64_t v192;
  int v193;
  const char *v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int v197;
  uint64_t v198;
  char v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  char v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  void *v210;
  void *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t *v217;
  int v218;
  int v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  unint64_t v226;
  void *v227;
  int *v228;
  uint64_t v229;
  uint64_t v230;
  __int128 *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  _DWORD *v235;
  int v236;
  char v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  char v249;
  unint64_t v250;
  int *v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void **v257;
  const char *v258;
  char v259;
  char v260;
  unint64_t v261;
  char v262;
  char v263;
  unint64_t v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unint64_t v269;
  unint64_t v270;
  int v271;
  unsigned int v272;
  int v273;
  int v274;
  int v275;
  llvm::GlobalValue *v277;
  uint64_t v278;
  unsigned __int8 v279;
  __int128 v280;
  uint64_t v281;
  unint64_t v282;
  int v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t (**v288)();
  _QWORD *(*v289)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  int v290;
  int v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  char v295;
  int v296;
  uint64_t v297;
  char v298;
  unint64_t v299;
  uint64_t (***v300)();
  unint64_t *v301;
  uint64_t v302;
  __int128 *v303;
  __int128 v304;
  uint64_t v305;
  void *v306[2];
  __int128 v307;
  uint64_t v308;
  int v309;
  uint64_t v310;

  v310 = *MEMORY[0x1E0C80C00];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  v7 = (unsigned __int8 **)(a1 + 56);
  v8 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) != a3 + 4)
  {
    if (*v8)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v8);
    v9 = *v7;
    *v8 = *v7;
    if (v9)
      llvm::MetadataTracking::track((uint64_t)v8, v9, 2);
  }
  if (**(_WORD **)(a1 + 16) == 90)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned int *)(v10 + 36);
    v12 = (uint64_t *)((int)v11 >= 0
                    ? *(_QWORD *)(a2 + 272) + 8 * v11
                    : *(_QWORD *)(a2 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
    v13 = *v12;
    if (v13 && ((*(_BYTE *)(v13 + 3) & 1) != 0 || (v13 = *(_QWORD *)(v13 + 24)) != 0 && (*(_BYTE *)(v13 + 3) & 1) != 0))
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = 0;
    if ((**(_WORD **)(v14 + 16) & 0xFFFE) == 0x74)
    {
      v15 = *(unsigned int *)(v14 + 40);
      if ((_DWORD)v15)
      {
        v16 = (_DWORD *)(*(_QWORD *)(v14 + 32) + 16);
        while (*((_BYTE *)v16 - 16) != 17)
        {
          v16 += 8;
          if (!--v15)
            goto LABEL_22;
        }
        if (*v16 == 2754)
        {
          v17 = *(_DWORD *)(v10 + 4);
          if (v17 < 0 && (v17 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
            v18 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v17 & 0x7FFFFFFF));
          else
            v18 = 0;
          v299 = v18;
          v149 = sub_1C4825F50(&v299);
          if ((_DWORD)v148 == 1)
          v150 = v149 >> 4;
          v151 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 68);
          v306[0] = &off_1E816EFF0;
          v306[1] = sub_1C554C7E0;
          *((_QWORD *)&v307 + 1) = v306;
          v288 = &off_1E816F038;
          v289 = sub_1C554C7F8;
          v292 = (unint64_t)&v288;
          sub_1C554C3AC(v151, a2, (uint64_t)v306, (uint64_t)&v288, 1, 0, &v304);
          v152 = (uint64_t (***)())v292;
          if ((uint64_t (***)())v292 == &v288)
          {
            v153 = (void (**)(uint64_t (***)()))(v288 + 4);
            v152 = &v288;
          }
          else
          {
            if (!v292)
            {
LABEL_172:
              v154 = (void **)*((_QWORD *)&v307 + 1);
              if (*((void ***)&v307 + 1) == v306)
              {
                v155 = (void (**)(void **))((char *)v306[0] + 32);
                v154 = v306;
              }
              else
              {
                if (!*((_QWORD *)&v307 + 1))
LABEL_175:
                  __asm { BR              X13 }
                v155 = (void (**)(void **))(**((_QWORD **)&v307 + 1) + 40);
              }
              (*v155)(v154);
              goto LABEL_175;
            }
            v153 = (void (**)(uint64_t (***)()))(*(_QWORD *)v292 + 40);
          }
          (*v153)(v152);
          goto LABEL_172;
        }
      }
    }
  }
LABEL_22:
  sub_1C4A6086C((uint64_t)&v288, a1, a2);
  v20 = (uint64_t)v288;
  v21 = *((_QWORD *)v288[3] + 4);
  if (*(_BYTE *)(*(_QWORD *)(v21 + 16) + 375))
  {
    v22 = *(_QWORD *)(v21 + 40);
    v273 = HIDWORD(v289);
    if ((HIDWORD(v289) & 0x80000000) != 0
      && (v23 = HIDWORD(v289) & 0x7FFFFFFF, v23 < *(_DWORD *)(v22 + 432)))
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * v23);
    }
    else
    {
      v24 = 0;
    }
    v282 = v24;
    v25 = sub_1C4825F50(&v282);
    if ((_DWORD)v19 == 1)
    if (v25 >= 0x41)
    {
      v36 = v291;
      if (v291 < 0 && (v291 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v22 + 432))
        v37 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * (v291 & 0x7FFFFFFF));
      else
        v37 = 0;
      v287 = v37;
      v38 = 35;
      if ((v37 & 4) == 0)
        v38 = 19;
      v39 = (v37 >> v38) & 0xFFFFFF;
      if (v39 > 0xA)
        goto LABEL_148;
      if (((1 << v39) & 0x446) != 0)
        goto LABEL_45;
      if ((_DWORD)v39 == 3)
      {
        if (sub_1C4A8C2F0(v291, v22, v21))
          goto LABEL_30;
      }
      else
      {
LABEL_148:
        if ((_DWORD)v39 != 65 && (_DWORD)v39 != 71)
          goto LABEL_30;
      }
LABEL_45:
      v271 = v36;
      if ((v282 & 2) != 0)
      {
        v259 = 35;
        v260 = 19;
        if ((v282 & 4) == 0)
          v259 = 19;
        v261 = v282 >> v259;
        if ((v282 & 4) == 0)
          v260 = 3;
        if ((v282 & 1) != 0)
          v260 = 3;
        v41 = (8 * (unsigned __int16)(v282 >> v260)) & 0xFFFFF8000007FFFFLL | ((v261 & 0xFFFFFF) << 19) | 2;
      }
      else
      {
        v40 = 3;
        if ((v282 & 1) == 0)
          v40 = 19;
        v41 = v282 & 0x8000000000000000 | (8 * (v282 >> v40)) | 1;
      }
      v286 = v41;
      v43 = sub_1C4825F50(&v286);
      if ((_DWORD)v42 == 1)
      v44 = v282;
      v45 = 0x800000000000000;
      if ((v282 & 2) == 0)
        v45 = 0x8000000000000;
      if ((v45 & v282) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v42);
        v44 = v282;
      }
      if (v298)
      {
        LODWORD(v46) = ((v297 >> 1) & 1) + (v297 & 1);
        v272 = ((v297 >> 2) & 1) + ((v297 >> 3) & 1);
        v306[0] = (void *)129;
        LODWORD(v306[1]) = 0;
        sub_1C5544694((uint64_t)a3, (unint64_t *)v306, v297 & 3);
        v48 = *(unsigned int *)(*(_QWORD *)(v47 + 32) + 4);
        v49 = v296;
        v299 = 129;
        LODWORD(v300) = 0;
        v50 = sub_1C5544694((uint64_t)a3, &v299, 3);
        *(_QWORD *)&v304 = 129;
        DWORD2(v304) = 0;
        LODWORD(v306[0]) = v49;
        LODWORD(v307) = 0;
        *((_QWORD *)&v307 + 1) = v50;
        v308 = v51;
        v309 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 65, &v304, 1, v306, 2, 0);
        v270 = v48 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v52 + 32) + 4) << 32);
        v306[0] = (void *)129;
        LODWORD(v306[1]) = 0;
        sub_1C5544694((uint64_t)a3, (unint64_t *)v306, v297 >> 2);
        v54 = *(unsigned int *)(*(_QWORD *)(v53 + 32) + 4);
        v55 = v296;
        v299 = 129;
        LODWORD(v300) = 0;
        v56 = sub_1C5544694((uint64_t)a3, &v299, 2);
        *(_QWORD *)&v304 = 129;
        DWORD2(v304) = 0;
        LODWORD(v306[0]) = v55;
        LODWORD(v307) = 0;
        *((_QWORD *)&v307 + 1) = v56;
        v308 = v57;
        v309 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 128, &v304, 1, v306, 2, 0);
        v269 = v54 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v58 + 32) + 4) << 32);
      }
      else
      {
        v269 = 0;
        v270 = 0;
        v46 = 0x40 / v43;
        v272 = (unsigned __int16)(v44 >> 3) - 0x40 / v43;
      }
      v84 = sub_1C4825F50(&v287);
      if ((_DWORD)v83 == 1)
      v85 = (8 * v84) | 1;
      *(_QWORD *)&v304 = v85;
      DWORD2(v304) = 0;
      LODWORD(v306[0]) = v36;
      LODWORD(v307) = 0;
      v86 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3
                     + 4))(a3, 80, &v304, 1, v306, 1, 0);
      v88 = v87;
      v299 = v85;
      LODWORD(v300) = 0;
      v89 = sub_1C5544694((uint64_t)a3, &v299, 8);
      *(_QWORD *)&v304 = v85;
      DWORD2(v304) = 0;
      v306[0] = v86;
      v306[1] = v88;
      LODWORD(v307) = 1;
      *((_QWORD *)&v307 + 1) = v89;
      v308 = v90;
      v309 = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 45, &v304, 1, v306, 2, 0);
      *(_QWORD *)&v304 = v287;
      DWORD2(v304) = 0;
      LODWORD(v306[0]) = *(_DWORD *)(*(_QWORD *)(v91 + 32) + 4);
      LODWORD(v307) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 81, &v304, 1, v306, 1, 0);
      v93 = *(_DWORD *)(*(_QWORD *)(v92 + 32) + 4);
      v95 = sub_1C4825F50(&v286);
      if ((_DWORD)v94 == 1)
      v97 = sub_1C4825F50(&v286);
      if ((_DWORD)v96 == 1)
      v98 = v46;
      v99 = *(_QWORD *)(v20 + 48);
      v267 = v46;
      v268 = v97;
      v265 = v95;
      if ((v99 & 7) != 0)
      {
        v100 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v100 = v99 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v20 + 48) = v99 & 0xFFFFFFFFFFFFFFF8;
      }
      v304 = *(_OWORD *)v100;
      v305 = *(_QWORD *)(v100 + 16);
      v101 = *(_WORD *)(v100 + 32);
      v102 = (1 << *(_BYTE *)(v100 + 34)) | *(_QWORD *)(v100 + 8);
      v103 = 63 - __clz(v102 & -v102);
      v104 = *(_OWORD *)(v100 + 56);
      *(_OWORD *)v306 = *(_OWORD *)(v100 + 40);
      v307 = v104;
      v105 = *(_QWORD *)(v100 + 72);
      v106 = *(unsigned __int16 *)(v100 + 36);
      v107 = (v106 >> 8) & 0xF;
      v108 = v106 >> 12;
      v266 = v93;
      if ((v106 >> 12) == 5 && (_DWORD)v107 == 4 || (_DWORD)v108 == 4 && (_DWORD)v107 == 5)
      {
        v109 = 1536;
      }
      else
      {
        if (!byte_1C65ED518[8 * v107 + v108])
          LOWORD(v107) = *(_WORD *)(v100 + 36) >> 12;
        v109 = (_WORD)v107 << 8;
      }
      v110 = v21 + 128;
      v111 = sub_1C484358C(v21 + 128, 80, 3);
      *(_OWORD *)v111 = v304;
      *(_QWORD *)(v111 + 16) = v305;
      *(_QWORD *)(v111 + 24) = ((((unint64_t)(v98 * v265) >> 3) & 0x1FFFFFFF) << 6) | 1;
      v112 = v307;
      *(_OWORD *)(v111 + 40) = *(_OWORD *)v306;
      *(_WORD *)(v111 + 32) = v101;
      *(_BYTE *)(v111 + 34) = v103;
      *(_OWORD *)(v111 + 56) = v112;
      *(_QWORD *)(v111 + 72) = v105;
      *(_WORD *)(v111 + 36) = v109 | v106 & 0xF0FF;
      *(_QWORD *)(v111 + 8) = *(_QWORD *)(v100 + 8);
      v113 = *(_QWORD *)(v20 + 48);
      if ((v113 & 7) != 0)
      {
        v114 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v114 = v113 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v20 + 48) = v113 & 0xFFFFFFFFFFFFFFF8;
      }
      v304 = *(_OWORD *)v114;
      v305 = *(_QWORD *)(v114 + 16);
      v115 = *(_WORD *)(v114 + 32);
      v116 = (1 << *(_BYTE *)(v114 + 34)) | *(_QWORD *)(v114 + 8);
      v117 = 63 - __clz(v116 & -v116);
      v118 = *(_OWORD *)(v114 + 56);
      *(_OWORD *)v306 = *(_OWORD *)(v114 + 40);
      v307 = v118;
      v119 = *(_QWORD *)(v114 + 72);
      v120 = *(unsigned __int16 *)(v114 + 36);
      v121 = (v120 >> 8) & 0xF;
      v122 = v120 >> 12;
      if ((v120 >> 12) == 5 && (_DWORD)v121 == 4 || (_DWORD)v122 == 4 && (_DWORD)v121 == 5)
      {
        v123 = 1536;
      }
      else
      {
        if (!byte_1C65ED518[8 * v121 + v122])
          LOWORD(v121) = *(_WORD *)(v114 + 36) >> 12;
        v123 = (_WORD)v121 << 8;
      }
      v124 = sub_1C484358C(v110, 80, 3);
      *(_OWORD *)v124 = v304;
      *(_QWORD *)(v124 + 16) = v305;
      *(_QWORD *)(v124 + 24) = ((((unint64_t)(v272 * v268) >> 3) & 0x1FFFFFFF) << 6) | 1;
      v125 = v307;
      *(_OWORD *)(v124 + 40) = *(_OWORD *)v306;
      *(_WORD *)(v124 + 32) = v115;
      *(_BYTE *)(v124 + 34) = v117;
      *(_OWORD *)(v124 + 56) = v125;
      *(_QWORD *)(v124 + 72) = v119;
      *(_WORD *)(v124 + 36) = v123 | v120 & 0xF0FF;
      *(_QWORD *)(v124 + 8) = *(_QWORD *)(v114 + 8) + 8;
      v303 = &v304;
      *(_QWORD *)&v304 = &v305;
      *((_QWORD *)&v304 + 1) = 0x800000000;
      v299 = (unint64_t)&v286;
      v300 = &v288;
      v301 = (unint64_t *)a3;
      v302 = v20;
      sub_1C4A8E068((uint64_t)&v299, v267, v271, (llvm::MachineMemOperand *)v111, v270);
      sub_1C4A8E068((uint64_t)&v299, v272, v266, (llvm::MachineMemOperand *)v124, v269);
      LODWORD(v277) = v273;
      LODWORD(v278) = 1;
      v126 = (int *)v304;
      v127 = DWORD2(v304);
      v306[0] = &v307;
      v306[1] = (void *)0x800000000;
      if (DWORD2(v304) >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v306, (uint64_t)&v307, DWORD2(v304), 24);
        v128 = LODWORD(v306[1]);
        v129 = (__int128 *)v306[0];
      }
      else
      {
        if (!DWORD2(v304))
        {
          v134 = 0;
          v129 = &v307;
LABEL_138:
          LODWORD(v306[1]) = v134 + v127;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::GlobalValue **, uint64_t, __int128 *))*a3 + 4))(a3, 77, &v277, 1, v129);
          if (v306[0] != &v307)
            free(v306[0]);
          v135 = v20;
          if ((*(_BYTE *)v20 & 4) == 0)
          {
            v135 = v20;
            if ((*(_WORD *)(v20 + 44) & 8) != 0)
            {
              v135 = v20;
              do
                v135 = *(_QWORD *)(v135 + 8);
              while ((*(_WORD *)(v135 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v20 + 24) + 40, v20, *(_QWORD *)(v135 + 8));
          if ((uint64_t *)v304 != &v305)
            free((void *)v304);
          return 1;
        }
        v128 = 0;
        v129 = &v307;
      }
      v130 = 24 * v128;
      v131 = 4 * v127;
      do
      {
        v132 = *v126++;
        v133 = (_DWORD *)((char *)v129 + v130);
        *v133 = v132;
        v133[4] = 0;
        v130 += 24;
        v131 -= 4;
      }
      while (v131);
      v134 = (int)v306[1];
      goto LABEL_138;
    }
  }
LABEL_30:
  v26 = (unint64_t *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 24);
  v29 = *(_BYTE **)(*(_QWORD *)(v28 + 32) + 16);
  if (v27 < 8)
  {
    v30 = 0;
LABEL_63:
    v26 = 0;
    v59 = 0;
    goto LABEL_64;
  }
  if ((v27 & 7) != 0)
  {
    v30 = 0;
    if ((*(_QWORD *)(a1 + 48) & 7) != 3)
      goto LABEL_160;
    v31 = (int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    if ((v27 & 0xFFFFFFFFFFFFFFF8) == 0)
      goto LABEL_160;
    v34 = *v31;
    v33 = v31 + 2;
    v32 = v34;
    if (!(_DWORD)v34)
    {
      v30 = (unint64_t *)v33;
      goto LABEL_160;
    }
    v35 = (unsigned __int8 **)&v33[2 * v32];
  }
  else
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
    *v26 = v27;
    v35 = v7;
    v33 = (int *)(a1 + 48);
  }
  v30 = (unint64_t *)v33;
  while ((*(_WORD *)(*v30 + 36) & 0xF00) == 0)
  {
    if (++v30 == (unint64_t *)v35)
    {
      v30 = (unint64_t *)v35;
      break;
    }
  }
  if (v27 < 8)
    goto LABEL_63;
LABEL_160:
  if ((v27 & 7) != 0)
  {
    v26 = 0;
    if ((v27 & 7) == 3 && (v147 = (int *)(v27 & 0xFFFFFFFFFFFFFFF8), (v27 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v59 = *v147;
      v26 = (unint64_t *)(v147 + 2);
    }
    else
    {
      v59 = 0;
    }
  }
  else
  {
    *v26 = v27 & 0xFFFFFFFFFFFFFFF8;
    v59 = 1;
  }
LABEL_64:
  if (v30 != &v26[v59])
  {
    v60 = (__int128 *)*v30;
    if (*v30)
    {
      v61 = *(_QWORD *)(a1 + 32);
      v62 = *(_DWORD *)(v61 + 4);
      v63 = *(_DWORD *)(v61 + 36);
      v274 = v63;
      if (v63 < 0 && (v63 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
        v64 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v63 & 0x7FFFFFFF));
      else
        v64 = 0;
      v72 = 35;
      if ((v64 & 4) == 0)
        v72 = 19;
      v73 = (v64 >> v72) & 0xFFFFFF;
      v74 = *((unsigned __int16 *)v60 + 18);
      v75 = (v74 >> 8) & 0xF;
      v76 = v74 >> 12;
      v77 = (_DWORD)v76 == 5 && (_DWORD)v75 == 4;
      if (v77 || ((_DWORD)v76 == 4 ? (v78 = (_DWORD)v75 == 5) : (v78 = 0), v78))
      {
        v79 = 6;
      }
      else if (byte_1C65ED518[8 * v75 + v76])
      {
        v79 = v75;
      }
      else
      {
        v79 = v76;
      }
      v306[1] = (void *)0x2FFFFFFFFLL;
      *(_QWORD *)((char *)&v307 + 4) = 0;
      HIDWORD(v307) = 0;
      v306[0] = off_1E7FAA730;
      sub_1C4A13598((uint64_t)v306, **(unsigned __int16 **)(a1 + 16), v73, v79, (uint64_t)v29);
      v80 = v307;
      sub_1C4A8BDA8(a1, v307, v29);
      v81 = 0;
      v82 = a3[1];
      v280 = *v60;
      v281 = *((_QWORD *)v60 + 2);
      if (v62 < 0)
      {
        if ((v62 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
          v81 = 0;
        else
          v81 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v62 & 0x7FFFFFFF));
      }
      v136 = (uint64_t)v29;
      v137 = a2;
      v138 = *((_WORD *)v60 + 16);
      *(_QWORD *)&v304 = v81;
      v140 = sub_1C4825F50((unint64_t *)&v304);
      if ((_DWORD)v139 == 1)
      v141 = 63
           - __clz(((1 << *((_BYTE *)v60 + 34)) | *((_QWORD *)v60 + 1)) & -((1 << *((_BYTE *)v60 + 34)) | *((_QWORD *)v60 + 1)));
      v142 = sub_1C484358C((uint64_t)(v82 + 128), 80, 3);
      *(_OWORD *)v142 = v280;
      *(_QWORD *)(v142 + 16) = v281;
      *(_QWORD *)(v142 + 24) = ((unint64_t)(v140 >> 3) << 6) | 1;
      *(_WORD *)(v142 + 32) = v138;
      *(_BYTE *)(v142 + 34) = v141;
      *(_OWORD *)(v142 + 40) = 0u;
      *(_OWORD *)(v142 + 56) = 0u;
      *(_QWORD *)(v142 + 72) = 0;
      *(_WORD *)(v142 + 36) = 1;
      LODWORD(v299) = v62;
      LODWORD(v300) = 1;
      LODWORD(v304) = v274;
      LODWORD(v305) = 0;
      sub_1C55464EC(a3, 0x5Au, (int *)&v299, (int *)&v304, (llvm::MachineMemOperand *)v142);
      sub_1C4A79804(v143, v137, a3, 1);
      sub_1C4A8C03C(a1, v80, v136);
      v144 = *(_QWORD *)(a1 + 24);
      v145 = a1;
      if ((*(_BYTE *)a1 & 4) == 0)
      {
        v145 = a1;
        if ((*(_WORD *)(a1 + 44) & 8) != 0)
        {
          v145 = a1;
          do
            v145 = *(_QWORD *)(v145 + 8);
          while ((*(_WORD *)(v145 + 44) & 8) != 0);
        }
      }
LABEL_155:
      sub_1C487FE80(v144 + 40, a1, *(_QWORD *)(v145 + 8));
      return 1;
    }
  }
  v295 = a4;
  v65 = v291;
  if (v291 < 0 && (v291 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a2 + 432))
    v66 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v291 & 0x7FFFFFFF));
  else
    v66 = 0;
  v67 = *(_QWORD *)(v28 + 32);
  v68 = v292;
  if ((v292 & 0xFFFFFFFFFFFFFFF9) != 0 && (v292 & 4) != 0)
  {
    v69 = 0x800000000000000;
    if ((v292 & 2) == 0)
      v69 = 0x8000000000000;
    if ((v69 & v292) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v19);
      v70 = v68 >> 3;
      if (((v68 >> 3) & 1) == 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v158);
        if ((unsigned __int16)(v68 >> 3) >= 5u)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v258);
LABEL_81:
          if ((v68 & 1) != 0)
          {
            v71 = v70;
          }
          else if ((v68 & 2) != 0)
          {
            v71 = (unsigned __int16)(v68 >> 19);
          }
          else
          {
            v71 = v68 >> 19;
          }
          v156 = (llvm::MachineMemOperand *)v294;
          if (v294)
          {
            GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, (v68 >> 1) & 0x3FFF8 | ((unint64_t)(v71 & 0x7FFFFFFF) << 20) | 4, "", 0);
            LODWORD(v304) = GenericVirtualRegister;
            DWORD2(v304) = 1;
            LODWORD(v306[0]) = v291;
            LODWORD(v307) = 0;
            sub_1C55464EC(a3, 0x5Au, (int *)&v304, (int *)v306, v156);
            LODWORD(v304) = HIDWORD(v289);
            DWORD2(v304) = 1;
            LODWORD(v306[0]) = GenericVirtualRegister;
            LODWORD(v307) = 0;
            sub_1C5546EF4((uint64_t *)a3, (uint64_t *)&v304, (int *)v306);
            v144 = *(_QWORD *)(a1 + 24);
            v145 = a1;
            if ((*(_BYTE *)a1 & 4) == 0)
            {
              v145 = a1;
              if ((*(_WORD *)(a1 + 44) & 8) != 0)
              {
                v145 = a1;
                do
                  v145 = *(_QWORD *)(v145 + 8);
                while ((*(_WORD *)(v145 + 44) & 8) != 0);
              }
            }
            goto LABEL_155;
          }
          return 0;
        }
      }
    }
    else if ((unsigned __int16)(v292 >> 3) >= 5u && ((v292 >> 3) & 1) == 0)
    {
      v70 = v292 >> 3;
      goto LABEL_81;
    }
  }
  v159 = 35;
  if ((v66 & 4) == 0)
    v159 = 19;
  v160 = v66 >> v159;
  if ((v160 & 0xFFFFFF) != 3)
  {
    if ((v160 & 0xFFFFFF) == 0x40)
    {
      v161 = 1;
      sub_1C493FD84((uint64_t)&v277, v65, a2, 1);
      v162 = v279;
      if (!v279)
        goto LABEL_336;
      if (v7 != v8)
      {
        if (*v8)
          llvm::MetadataTracking::untrack((uint64_t)v8, *v8);
        v163 = *v7;
        *v8 = *v7;
        if (v163)
          llvm::MetadataTracking::track((uint64_t)v8, v163, 2);
      }
      v164 = HIDWORD(v289);
      v165 = v292;
      v286 = v292;
      v287 = 129;
      v275 = v162;
      if ((v294[3] & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v167 = (unint64_t)(sub_1C4825F50(v294 + 3) + 7) >> 3;
        v168 = (uint64_t *)a3;
        v169 = a2;
        if ((_DWORD)v166 == 1)
      }
      else
      {
        v169 = a2;
        v167 = -1;
        v168 = (uint64_t *)a3;
      }
      v170 = (uint64_t)v288;
      v171 = *((_QWORD *)v288[3] + 4);
      v172 = sub_1C4A17AE8(*(_QWORD *)(v171 + 16));
      v173 = v278;
      v174 = sub_1C5EAB3E0(v277, v278, *(_QWORD *)(v171 + 344), v172 << 32);
      v299 = (unint64_t)v168;
      v300 = (uint64_t (***)())v169;
      v175 = v169;
      v301 = &v287;
      if ((v165 & 0xFFFFFFFFFFFFFFF9) != 0 && (v165 & 6) == 2)
      {
        v176 = 35;
        if ((v165 & 4) == 0)
          v176 = 19;
        if (((v165 >> v176) & 0xFFFFFF) == 3)
        {
          v177 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v169, v287, "", 0);
          sub_1C4A8E434((uint64_t)&v299, v177, v174, v287);
          v179 = sub_1C4825F50(&v286);
          if ((_DWORD)v178 == 1)
          *(_QWORD *)&v304 = (8 * v179) | 1;
          DWORD2(v304) = 0;
          LODWORD(v306[0]) = v177;
          LODWORD(v307) = 0;
          v180 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v168 + 32))(v168, 126, &v304, 1, v306, 1, 0);
          LODWORD(v304) = v164;
          DWORD2(v304) = 1;
          v306[0] = v180;
          v306[1] = v181;
          LODWORD(v307) = 1;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v168 + 32))(v168, 81, &v304, 1, v306, 1, 0);
        }
        else
        {
          v216 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v169, 257, "", 0);
          v217 = v168;
          v218 = v216;
          v219 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v175, 257, "", 0);
          sub_1C4A8E434((uint64_t)&v299, v218, v174, 0x101uLL);
          sub_1C4A8E434((uint64_t)&v299, v219, v174 + 4, 0x101uLL);
          *(_QWORD *)&v304 = 513;
          DWORD2(v304) = 0;
          LODWORD(v306[0]) = v218;
          LODWORD(v307) = 0;
          DWORD2(v307) = v219;
          v309 = 0;
          v220 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v217 + 32))(v217, 76, &v304, 1, v306, 2, 0);
          LODWORD(v304) = v164;
          DWORD2(v304) = 1;
          v306[0] = v220;
          v306[1] = v221;
          LODWORD(v307) = 1;
          sub_1C5546EF4(v217, (uint64_t *)&v304, (int *)v306);
        }
        v222 = *(_QWORD *)(v170 + 24);
        v223 = v170;
        v162 = v275;
        if ((*(_BYTE *)v170 & 4) == 0)
        {
          v223 = v170;
          if ((*(_WORD *)(v170 + 44) & 8) != 0)
          {
            v223 = v170;
            do
              v223 = *(_QWORD *)(v223 + 8);
            while ((*(_WORD *)(v223 + 44) & 8) != 0);
          }
        }
        goto LABEL_335;
      }
      if (v165 == 65 || v167 == 1)
      {
        v209 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v169, v287, "", 0);
        sub_1C4A8E434((uint64_t)&v299, v209, v174 & 0xFFFFFFFE, v287);
        *(_QWORD *)&v304 = 4194324;
        DWORD2(v304) = 0;
        LODWORD(v306[0]) = v209;
        LODWORD(v307) = 0;
        v210 = (void *)sub_1C5546EF4(v168, (uint64_t *)&v304, (int *)v306);
        v212 = v211;
        v213 = v173 & 1;
        if (v173 < 0)
          v213 = -v213;
        v306[0] = (void *)257;
        LODWORD(v306[1]) = 0;
        v214 = sub_1C5544694((uint64_t)v168, (unint64_t *)v306, v213);
        if (v165 == 65)
        {
          LODWORD(v304) = v164;
          DWORD2(v304) = 1;
          v306[0] = v210;
          v306[1] = v212;
          LODWORD(v307) = 1;
          *((_QWORD *)&v307 + 1) = v214;
          v308 = v215;
          v309 = 1;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v168 + 32))(v168, 205, &v304, 1, v306, 2, 0);
        }
        else
        {
          *(_QWORD *)&v304 = 65;
          DWORD2(v304) = 0;
          v306[0] = v210;
          v306[1] = v212;
          LODWORD(v307) = 1;
          *((_QWORD *)&v307 + 1) = v214;
          v308 = v215;
          v309 = 1;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v168 + 32))(v168, 205, &v304, 1, v306, 2, 0);
          LODWORD(v304) = v164;
          DWORD2(v304) = 1;
          LODWORD(v306[0]) = *(_DWORD *)(*(_QWORD *)(v224 + 32) + 4);
          LODWORD(v307) = 0;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*v168 + 32))(v168, 118, &v304, 1, v306, 1, 0);
        }
        v222 = *(_QWORD *)(v170 + 24);
        v223 = v170;
        v162 = v275;
        if ((*(_BYTE *)v170 & 4) == 0)
        {
          v223 = v170;
          if ((*(_WORD *)(v170 + 44) & 8) != 0)
          {
            v223 = v170;
            do
              v223 = *(_QWORD *)(v223 + 8);
            while ((*(_WORD *)(v223 + 44) & 8) != 0);
          }
        }
        goto LABEL_335;
      }
      v285 = v293;
      if (!sub_1C4A8E9C8(&v285))
      {
        if ((v285 & 0xFFFFFFFFFFFFFFF9) == 0 || (v285 & 4) == 0)
          goto LABEL_282;
        v225 = 3;
        if ((v285 & 1) == 0)
          v225 = 19;
        v226 = v285 >> v225;
        v227 = (void *)((v285 & 2) != 0
                      ? (v285 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v226) | 2
                      : v285 & 0x8000000000000000 | (8 * v226) | 1);
        v306[0] = v227;
        if (!sub_1C4A8E9C8((unint64_t *)v306))
        {
LABEL_282:
          v161 = 0;
          v162 = v275;
          goto LABEL_336;
        }
      }
      v195 = v285;
      if ((v285 & 1) != 0)
      {
        sub_1C4A8E434((uint64_t)&v299, v290, v174, v293);
        v162 = v275;
LABEL_331:
        if (v292 != v293 && !sub_1C4A8EA48((uint64_t)&v288, v169, v168))
        {
          v161 = 0;
LABEL_336:
          if (v162)
            return v161;
          else
            return 0;
        }
        v222 = *(_QWORD *)(v170 + 24);
        v223 = v170;
        if ((*(_BYTE *)v170 & 4) == 0)
        {
          v223 = v170;
          if ((*(_WORD *)(v170 + 44) & 8) != 0)
          {
            v223 = v170;
            do
              v223 = *(_QWORD *)(v223 + 8);
            while ((*(_WORD *)(v223 + 44) & 8) != 0);
          }
        }
LABEL_335:
        sub_1C487FE80(v222 + 40, v170, *(_QWORD *)(v223 + 8));
        v161 = 1;
        goto LABEL_336;
      }
      if ((v285 & 2) != 0)
      {
        v262 = 35;
        v263 = 19;
        if ((v285 & 4) == 0)
          v262 = 19;
        v264 = v285 >> v262;
        if ((v285 & 4) == 0)
          v263 = 3;
        v196 = (8 * (unsigned __int16)(v285 >> v263)) & 0xFFFFF8000007FFFFLL | ((v264 & 0xFFFFFF) << 19) | 2;
      }
      else
      {
        v196 = v285 & 0x8000000000000000 | (v285 >> 16) & 0x7FFFFFFF8 | 1;
      }
      v197 = 0;
      v284 = v196;
      *(_QWORD *)&v304 = &v305;
      *((_QWORD *)&v304 + 1) = 0x400000000;
      while (1)
      {
        v198 = 0x800000000000000;
        if ((v195 & 2) == 0)
          v198 = 0x8000000000000;
        if ((v198 & v195) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v194);
          v195 = v285;
        }
        if (v197 >= (unsigned __int16)(v195 >> 3))
          break;
        if ((v195 & 1) != 0)
          v199 = 3;
        else
          v199 = 19;
        v200 = v195 & 0x8000000000000000 | (8 * (v195 >> v199)) | 1;
        v201 = 35;
        if ((v195 & 4) == 0)
          v201 = 19;
        v202 = v195 >> v201;
        if ((v195 & 4) != 0)
          v203 = 19;
        else
          v203 = 3;
        if ((v195 & 1) != 0)
          v203 = 3;
        v204 = (8 * (unsigned __int16)(v195 >> v203)) & 0xFFFFF8000007FFFFLL | ((v202 & 0xFFFFFF) << 19);
        if ((v195 & 2) != 0)
          v205 = v204 | 2;
        else
          v205 = v200;
        v206 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v169, v205, "", 0);
        sub_1C4A8E434((uint64_t)&v299, v206, v174, v284);
        v207 = DWORD2(v304);
        if (DWORD2(v304) >= (unint64_t)HIDWORD(v304))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v304, (uint64_t)&v305, DWORD2(v304) + 1, 4);
          v207 = DWORD2(v304);
        }
        *(_DWORD *)(v304 + 4 * v207) = v206;
        ++DWORD2(v304);
        v208 = sub_1C4825F50(&v284);
        if ((_DWORD)v194 == 1)
        v174 += v208 >> 3;
        ++v197;
        v195 = v285;
      }
      LODWORD(v282) = v290;
      v283 = 1;
      v228 = (int *)v304;
      v229 = DWORD2(v304);
      v306[0] = &v307;
      v306[1] = (void *)0x800000000;
      if (DWORD2(v304) >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v306, (uint64_t)&v307, DWORD2(v304), 24);
        v230 = LODWORD(v306[1]);
        v231 = (__int128 *)v306[0];
        v168 = (uint64_t *)a3;
      }
      else
      {
        v168 = (uint64_t *)a3;
        if (!DWORD2(v304))
        {
          v236 = 0;
          v231 = &v307;
LABEL_327:
          LODWORD(v306[1]) = v236 + v229;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, __int128 *))(*v168 + 32))(v168, 77, &v282, 1, v231);
          if (v306[0] != &v307)
            free(v306[0]);
          v162 = v275;
          if ((uint64_t *)v304 != &v305)
            free((void *)v304);
          goto LABEL_331;
        }
        v230 = 0;
        v231 = &v307;
      }
      v232 = 24 * v230;
      v233 = 4 * v229;
      do
      {
        v234 = *v228++;
        v235 = (_DWORD *)((char *)v231 + v232);
        *v235 = v234;
        v235[4] = 0;
        v232 += 24;
        v233 -= 4;
      }
      while (v233);
      v236 = (int)v306[1];
      goto LABEL_327;
    }
    goto LABEL_213;
  }
  if (sub_1C4A8C2F0(v65, a2, v67))
  {
    v183 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
    if ((v183 & 0x80000000) == 0 || (v183 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
      return 0;
    v184 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v183 & 0x7FFFFFFF));
    if (v184 != 129 && v184 != 257)
    {
      if ((v184 & 0xFFFFFFFFFFFFFFF9) == 0
        || (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v183 & 0x7FFFFFFF)) & 4) == 0)
      {
        return 0;
      }
      v248 = 0x8000000000000;
      if ((v184 & 2) != 0)
        v248 = 0x800000000000000;
      if ((v248 & v184) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v182);
      result = 0;
      if ((v184 & 2) != 0 || (unsigned __int16)(v184 >> 3) > 4u)
        return result;
      v249 = 3;
      if ((v184 & 1) == 0)
        v249 = 19;
      v250 = v184 & 0x8000000000000000 | (8 * (v184 >> v249));
      if (v250 != 256 && v250 != 128)
        return 0;
    }
    v185 = sub_1C4A7962C(v65, a2, (uint64_t *)a3);
    *(_QWORD *)&v304 = 16777244;
    DWORD2(v304) = 0;
    LODWORD(v306[0]) = v185;
    LODWORD(v307) = 0;
    v186 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3
                    + 4))(a3, 312, &v304, 1, v306, 1, 0);
    v188 = v186;
    v189 = v187;
    if (v184 == 257)
      goto LABEL_304;
    if (v184 == 16777244)
    {
      LODWORD(v304) = v183;
      DWORD2(v304) = 1;
      v306[0] = v186;
      v306[1] = v187;
      LODWORD(v307) = 1;
      v190 = (void (*)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*((_QWORD *)*a3 + 4);
      v191 = a3;
LABEL_308:
      v190(v191, 19, &v304, 1, v306, 1, 0);
      goto LABEL_347;
    }
    if ((v184 & 0xFFFFFFFFFFFFFFF9) == 0 || (v184 & 6) != 4)
      goto LABEL_309;
    v239 = 3;
    if ((v184 & 1) == 0)
      v239 = 19;
    if ((v184 & 0x8000000000000000 | (8 * (v184 >> v239))) == 0x100)
    {
LABEL_304:
      v240 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
      v241 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
      v242 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 257, "", 0);
      *(_QWORD *)&v304 = __PAIR64__(v241, v240);
      DWORD2(v304) = v242;
      v306[0] = v188;
      v306[1] = v189;
      LODWORD(v307) = 1;
      sub_1C5547540((uint64_t)a3, (char *)&v304, 3, (uint64_t)v306);
      if (v184 != 16777252)
      {
        if (v184 == 16777236)
        {
          LODWORD(v304) = v183;
          DWORD2(v304) = 1;
          LODWORD(v306[0]) = v240;
          LODWORD(v307) = 0;
          DWORD2(v307) = v241;
          v309 = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 76, &v304, 1, v306, 2, 0);
          goto LABEL_347;
        }
        if (v184 == 257)
        {
          LODWORD(v304) = v183;
          DWORD2(v304) = 1;
          LODWORD(v306[0]) = v240;
          LODWORD(v307) = 0;
          v191 = a3;
          v190 = (void (*)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))*((_QWORD *)*a3 + 4);
          goto LABEL_308;
        }
LABEL_347:
        v144 = *(_QWORD *)(a1 + 24);
        v145 = a1;
        if ((*(_BYTE *)a1 & 4) == 0)
        {
          v145 = a1;
          if ((*(_WORD *)(a1 + 44) & 8) != 0)
          {
            v145 = a1;
            do
              v145 = *(_QWORD *)(v145 + 8);
            while ((*(_WORD *)(v145 + 44) & 8) != 0);
          }
        }
        goto LABEL_155;
      }
      v306[0] = (void *)257;
      LODWORD(v306[1]) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*a3 + 4))(a3, 68, v306, 1, 0, 0, 0);
      v254 = 0;
      LODWORD(v304) = v183;
      DWORD2(v304) = 1;
      v299 = __PAIR64__(v241, v240);
      LODWORD(v300) = v242;
      HIDWORD(v300) = *(_DWORD *)(*(_QWORD *)(v255 + 32) + 4);
      v306[0] = &v307;
      v306[1] = (void *)0x800000000;
      v256 = 2;
      do
      {
        v257 = &v306[v256];
        *(_DWORD *)v257 = *(_DWORD *)((char *)&v299 + v254);
        *((_DWORD *)v257 + 4) = 0;
        v256 += 3;
        v254 += 4;
      }
      while (v254 != 16);
      LODWORD(v306[1]) += 4;
      (*((void (**)(unsigned __int8 **, uint64_t, __int128 *, uint64_t, __int128 *))*a3 + 4))(a3, 77, &v304, 1, &v307);
      v253 = v306[0];
      if (v306[0] == &v307)
        goto LABEL_347;
    }
    else
    {
LABEL_309:
      v306[0] = &v307;
      v306[1] = (void *)0x600000000;
      v243 = 6;
      do
      {
        v244 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 129, "", 0);
        v245 = LODWORD(v306[1]);
        if (LODWORD(v306[1]) >= (unint64_t)HIDWORD(v306[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v306, (uint64_t)&v307, LODWORD(v306[1]) + 1, 4);
          v245 = LODWORD(v306[1]);
        }
        *((_DWORD *)v306[0] + v245) = v244;
        ++LODWORD(v306[1]);
        --v243;
      }
      while (v243);
      v299 = 8388660;
      LODWORD(v300) = 0;
      *(_QWORD *)&v304 = v188;
      *((_QWORD *)&v304 + 1) = v189;
      LODWORD(v305) = 1;
      *(_QWORD *)&v304 = sub_1C5546EF4((uint64_t *)a3, (uint64_t *)&v299, (int *)&v304);
      *((_QWORD *)&v304 + 1) = v246;
      LODWORD(v305) = 1;
      sub_1C5547540((uint64_t)a3, (char *)v306[0], LODWORD(v306[1]), (uint64_t)&v304);
      if (v184 == 129)
      {
        LODWORD(v299) = v183;
        LODWORD(v300) = 1;
        LODWORD(v304) = *(_DWORD *)v306[0];
        LODWORD(v305) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))*a3
         + 4))(a3, 19, &v299, 1, &v304, 1, 0);
      }
      else
      {
        LODWORD(v304) = v183;
        DWORD2(v304) = 1;
        v251 = (int *)v306[0];
        v252 = 0x800000000000000;
        if ((v184 & 2) == 0)
          v252 = 0x8000000000000;
        if ((v252 & v184) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v247);
        sub_1C5544D6C((uint64_t)a3, (uint64_t)&v304, v251, (unsigned __int16)(v184 >> 3));
      }
      v253 = v306[0];
      if (v306[0] == &v307)
        goto LABEL_347;
    }
    free(v253);
    goto LABEL_347;
  }
LABEL_213:
  v192 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v67 + 16) + 168))(*(_QWORD *)(v67 + 16));
  if ((v289 & 0xFFFFFFFB) != 2 && !v298 && (sub_1C4A65DAC(v192, a1, a2, (uint64_t *)a3) & 1) != 0)
    return 1;
  result = 0;
  v193 = v160 & 0xFFFFFF;
  if ((v160 & 0xFFFFFF) <= 0x40)
  {
    switch(v193)
    {
      case 0:
        result = sub_1C4A8C8F8((uint64_t)&v288, a2, (uint64_t *)a3);
        break;
      case 1:
      case 2:
      case 6:
      case 10:
        return sub_1C4A8C354((uint64_t)&v288, a2, (uint64_t *)a3);
      case 3:
        result = sub_1C4A8C660((uint64_t)&v288, a2, (uint64_t *)a3);
        break;
      case 5:
        return sub_1C4A8DD90((uint64_t)&v288, a2, (uint64_t *)a3);
      default:
        return result;
    }
    return result;
  }
  if ((v160 & 0xFFFFFF) <= 0x4A)
  {
    if (v193 != 65 && v193 != 71)
      return result;
    return sub_1C4A8C354((uint64_t)&v288, a2, (uint64_t *)a3);
  }
  if (v193 == 75)
    return sub_1C4A8DD90((uint64_t)&v288, a2, (uint64_t *)a3);
  if (v193 == 80)
    return sub_1C4A8C354((uint64_t)&v288, a2, (uint64_t *)a3);
  return result;
}

uint64_t sub_1C4A7BB08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  unint64_t v10;
  int *v11;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  llvm::MachineMemOperand *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int GenericVirtualRegister;
  char v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  const char *v55;
  unint64_t i;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  llvm::MachineFunction *v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  unint64_t v88;
  llvm::GlobalValue *v89[2];
  char v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  llvm::MachineMemOperand *v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  _DWORD v109[4];
  uint64_t v110;

  v5 = a1;
  v110 = *MEMORY[0x1E0C80C00];
  a3[5] = *(_QWORD *)(a1 + 24);
  a3[6] = a1;
  v6 = (unsigned __int8 **)(a1 + 56);
  v7 = (unsigned __int8 **)(a3 + 4);
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v7)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v7);
    v8 = *v6;
    *v7 = *v6;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)v7, v8, 2);
  }
  sub_1C4A6086C((uint64_t)&v91, v5, a2);
  v9 = (unint64_t *)(v5 + 48);
  v10 = *(_QWORD *)(v5 + 48);
  if (v10 < 8)
  {
    v13 = 0;
    goto LABEL_26;
  }
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    *v9 = v10;
    v13 = (unsigned __int8 **)(v5 + 48);
    goto LABEL_18;
  }
  v11 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_QWORD *)(v5 + 48) & 7) == 3 && v11 != 0)
  {
    v15 = *v11;
    v13 = (unsigned __int8 **)(v11 + 2);
    v14 = v15;
    if (!(_DWORD)v15)
      goto LABEL_22;
    v6 = &v13[v14];
LABEL_18:
    while ((*((_WORD *)*v13 + 18) & 0xF00) == 0)
    {
      if (++v13 == v6)
      {
        v13 = v6;
        break;
      }
    }
    if (v10 >= 8)
      goto LABEL_22;
LABEL_26:
    v9 = 0;
    v17 = 0;
    goto LABEL_27;
  }
  v13 = 0;
LABEL_22:
  if ((v10 & 7) != 0)
  {
    v9 = 0;
    if ((v10 & 7) == 3 && (v16 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8), (v10 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v17 = *v16;
      v9 = (unint64_t *)(v16 + 2);
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    *v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    v17 = 1;
  }
LABEL_27:
  if (v13 != (unsigned __int8 **)&v9[v17] && *v13)
    return sub_1C4A8A768(v5, a2, a3);
  v19 = v98;
  v20 = v96;
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 32) + 16);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 168))(v21);
  if ((v92 & 0xFFFFFFFB) == 2 || v100 != 0)
  {
    v24 = v19 & 4;
    goto LABEL_35;
  }
  if (v20 == 4194436 || v20 == 8388676 || v20 == 8388660)
  {
    v27 = v99;
    if (v99)
    {
      if (v20 >> 19 == 16)
      {
        v47 = 262136;
        v48 = 1;
      }
      else
      {
        v47 = 131064;
        v48 = 2;
      }
      GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, (v20 >> v48) & v47 | 0x1000004, "", 0);
      LODWORD(v107) = GenericVirtualRegister;
      LODWORD(v108) = 1;
      LODWORD(v103) = v93;
      LODWORD(v105) = 0;
      sub_1C5546EF4(a3, (uint64_t *)&v107, (int *)&v103);
      LODWORD(v103) = GenericVirtualRegister;
      LODWORD(v105) = 0;
      LODWORD(v107) = v95;
      v109[0] = 0;
      sub_1C5546848(a3, (int *)&v103, (int *)&v107, v27);
      v29 = *(_QWORD *)(v5 + 24);
      v30 = v5;
      if ((*(_BYTE *)v5 & 4) == 0)
      {
        v30 = v5;
        if ((*(_WORD *)(v5 + 44) & 8) != 0)
        {
          v30 = v5;
          do
            v30 = *(_QWORD *)(v30 + 8);
          while ((*(_WORD *)(v30 + 44) & 8) != 0);
        }
      }
LABEL_83:
      sub_1C487FE80(v29 + 40, v5, *(_QWORD *)(v30 + 8));
      return 1;
    }
    return 0;
  }
  if ((v20 & 0xFFFFFFFFFFFFFFF9) != 0 && (v20 & 2) != 0 && (v20 & 4) == 0)
  {
    v107 = (_DWORD *)(((((unint64_t)(8
                                          * llvm::DataLayout::getPointerSize((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v5 + 24) + 32)+ 40)+ 272), (v20 >> 19) & 0xFFFFFF)) >> 3) & 0x1FFFFFFF) << 6) | 1);
    LODWORD(v108) = 0;
    LODWORD(v103) = v93;
    LODWORD(v105) = 0;
    sub_1C5546EF4(a3, (uint64_t *)&v107, (int *)&v103);
    LODWORD(v103) = *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4);
    LODWORD(v105) = 0;
    LODWORD(v107) = v95;
    v109[0] = 0;
    sub_1C5546848(a3, (int *)&v103, (int *)&v107, v99);
    v29 = *(_QWORD *)(v5 + 24);
    v30 = v5;
    if ((*(_BYTE *)v5 & 4) == 0)
    {
      v30 = v5;
      if ((*(_WORD *)(v5 + 44) & 8) != 0)
      {
        v30 = v5;
        do
          v30 = *(_QWORD *)(v30 + 8);
        while ((*(_WORD *)(v30 + 44) & 8) != 0);
      }
    }
    goto LABEL_83;
  }
  v24 = v19 & 4;
  v31 = 35;
  if ((v19 & 4) == 0)
    v31 = 19;
  if (((v19 >> v31) & 0xFFFFFF) == 0x40)
  {
    sub_1C493FD84((uint64_t)v89, v95, a2, 1);
    if (v90)
    {
      v5 = v91;
      v32 = *(_QWORD *)(*(_QWORD *)(v91 + 24) + 32);
      v33 = sub_1C4A17AE8(*(_QWORD *)(v32 + 16));
      v34 = sub_1C5EAB3E0(v89[0], (uint64_t)v89[1], *(_QWORD *)(v32 + 344), v33 << 32);
      v35 = v96;
      if (v96 != v97)
      {
        result = sub_1C4A8EA48((uint64_t)&v91, a2, a3);
        if (!(_DWORD)result)
          return result;
        v35 = v97;
      }
      v102 = v35;
      if (sub_1C4A8E9C8(&v102))
      {
        v36 = v94;
        v38 = sub_1C55437B8(a3, 0x166u);
        v39 = (unint64_t *)v37;
        v40 = (unint64_t *)a3[6];
        v41 = *(_QWORD *)(a3[5] + 40);
        *(_QWORD *)(v37 + 24) = v41;
        v42 = *(_QWORD *)(v41 + 32);
        v43 = *(unsigned int *)(v37 + 40);
        if ((_DWORD)v43)
        {
          v79 = *(_QWORD *)(v37 + 32);
          v80 = *(_QWORD *)(v42 + 40);
          v81 = 32 * v43;
          do
          {
            if (!*(_BYTE *)v79)
            {
              v82 = *(unsigned int *)(v79 + 4);
              if ((int)v82 >= 0)
                v83 = (uint64_t *)(*(_QWORD *)(v80 + 272) + 8 * v82);
              else
                v83 = (uint64_t *)(*(_QWORD *)(v80 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
              v84 = *v83;
              if (*v83)
              {
                v85 = *(_QWORD *)(v84 + 16);
                *(_QWORD *)(v84 + 16) = v79;
                *(_QWORD *)(v79 + 16) = v85;
                if ((*(_BYTE *)(v79 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v79 + 24) = v84;
                }
                else
                {
                  *(_QWORD *)(v79 + 24) = 0;
                  v83 = (uint64_t *)(v85 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v79 + 16) = v79;
                *(_QWORD *)(v79 + 24) = 0;
              }
              *v83 = v79;
            }
            v79 += 32;
            v81 -= 32;
          }
          while (v81);
        }
        v44 = *(_QWORD *)(v42 + 728);
        if (v44)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v37);
        v45 = *v40 & 0xFFFFFFFFFFFFFFF8;
        *v39 = v45 | *v39 & 7;
        v39[1] = (unint64_t)v40;
        *(_QWORD *)(v45 + 8) = v39;
        *v40 = *v40 & 7 | (unint64_t)v39;
        v46 = a3[7];
        if (v46)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v46 + 24))(v46, v39);
        v104 = 0;
        v105 = 0;
        LODWORD(v103) = 0;
        HIDWORD(v103) = v36;
        v106 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v103);
        LODWORD(v103) = 1;
        v104 = 0;
        v105 = v34;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v103);
        v29 = *(_QWORD *)(v5 + 24);
        v30 = v5;
        if ((*(_BYTE *)v5 & 4) == 0)
        {
          v30 = v5;
          if ((*(_WORD *)(v5 + 44) & 8) != 0)
          {
            v30 = v5;
            do
              v30 = *(_QWORD *)(v30 + 8);
            while ((*(_WORD *)(v30 + 44) & 8) != 0);
          }
        }
        goto LABEL_83;
      }
      if ((v102 & 0xFFFFFFFFFFFFFFF9) != 0 && (v102 & 4) != 0)
      {
        v50 = 3;
        if ((v102 & 1) == 0)
          v50 = 19;
        v51 = v102 >> v50;
        if ((v102 & 2) != 0)
          v52 = (v102 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v51) | 2;
        else
          v52 = v102 & 0x8000000000000000 | (8 * v51) | 1;
        v103 = v52;
        result = sub_1C4A8E9C8(&v103);
        if (!(_DWORD)result)
          return result;
        if ((v102 & 2) != 0)
        {
          v86 = 35;
          v87 = 19;
          if ((v102 & 4) == 0)
            v86 = 19;
          v88 = v102 >> v86;
          if ((v102 & 4) == 0)
            v87 = 3;
          if ((v102 & 1) != 0)
            v87 = 3;
          v54 = (8 * (unsigned __int16)(v102 >> v87)) & 0xFFFFF8000007FFFFLL | ((v88 & 0xFFFFFF) << 19) | 2;
        }
        else
        {
          v53 = 3;
          if ((v102 & 1) == 0)
            v53 = 19;
          v54 = v102 & 0x8000000000000000 | (8 * (v102 >> v53)) | 1;
        }
        v101 = v54;
        v107 = v109;
        v108 = 0x400000000;
        sub_1C4A79060(v94, a2, (uint64_t)a3, (uint64_t)&v107);
        for (i = 0; ; ++i)
        {
          v57 = v102;
          v58 = 0x800000000000000;
          if ((v102 & 2) == 0)
            v58 = 0x8000000000000;
          if ((v58 & v102) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v55);
            v57 = v102;
          }
          if (i >= (unsigned __int16)(v57 >> 3))
            break;
          v59 = v107[i];
          v61 = sub_1C55437B8(a3, 0x166u);
          v62 = (unint64_t *)v60;
          v63 = (unint64_t *)a3[6];
          v64 = *(_QWORD *)(a3[5] + 40);
          *(_QWORD *)(v60 + 24) = v64;
          v65 = *(_QWORD *)(v64 + 32);
          v66 = *(unsigned int *)(v60 + 40);
          if ((_DWORD)v66)
          {
            v71 = *(_QWORD *)(v60 + 32);
            v72 = *(_QWORD *)(v65 + 40);
            v73 = 32 * v66;
            do
            {
              if (!*(_BYTE *)v71)
              {
                v74 = *(unsigned int *)(v71 + 4);
                if ((int)v74 >= 0)
                  v75 = (uint64_t *)(*(_QWORD *)(v72 + 272) + 8 * v74);
                else
                  v75 = (uint64_t *)(*(_QWORD *)(v72 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
                v76 = *v75;
                if (*v75)
                {
                  v77 = *(_QWORD *)(v76 + 16);
                  *(_QWORD *)(v76 + 16) = v71;
                  *(_QWORD *)(v71 + 16) = v77;
                  if ((*(_BYTE *)(v71 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v71 + 24) = v76;
                  }
                  else
                  {
                    *(_QWORD *)(v71 + 24) = 0;
                    v75 = (uint64_t *)(v77 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v71 + 16) = v71;
                  *(_QWORD *)(v71 + 24) = 0;
                }
                *v75 = v71;
              }
              v71 += 32;
              v73 -= 32;
            }
            while (v73);
          }
          v67 = *(_QWORD *)(v65 + 728);
          if (v67)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 24))(v67, v60);
          v68 = *v63 & 0xFFFFFFFFFFFFFFF8;
          *v62 = v68 | *v62 & 7;
          v62[1] = (unint64_t)v63;
          *(_QWORD *)(v68 + 8) = v62;
          *v63 = *v63 & 7 | (unint64_t)v62;
          v69 = a3[7];
          if (v69)
            (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v69 + 24))(v69, v62);
          v104 = 0;
          LODWORD(v103) = 0;
          HIDWORD(v103) = v59;
          v105 = 0;
          v106 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v103);
          LODWORD(v103) = 1;
          v104 = 0;
          v105 = v34;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v103);
          v70 = sub_1C4825F50(&v101);
          if ((_DWORD)v55 == 1)
          v34 += v70 >> 3;
        }
        v78 = v5;
        if ((*(_BYTE *)v5 & 4) == 0)
        {
          v78 = v5;
          if ((*(_WORD *)(v5 + 44) & 8) != 0)
          {
            v78 = v5;
            do
              v78 = *(_QWORD *)(v78 + 8);
            while ((*(_WORD *)(v78 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v78 + 8));
        if (v107 != v109)
          free(v107);
        return 1;
      }
    }
    return 0;
  }
  if ((sub_1C4A6658C(v22, v5, a2, a3) & 1) != 0)
    return 1;
LABEL_35:
  result = 0;
  v25 = 35;
  if (!v24)
    v25 = 19;
  v26 = (v19 >> v25) & 0xFFFFFF;
  if ((int)v26 > 64)
  {
    switch((_DWORD)v26)
    {
      case 'P':
        return sub_1C4A8C354((uint64_t)&v91, a2, a3);
      case 'K':
        return sub_1C4A8DD90((uint64_t)&v91, a2, a3);
      case 'A':
        return sub_1C4A8C354((uint64_t)&v91, a2, a3);
    }
  }
  else
  {
    switch((int)v26)
    {
      case 0:
        result = sub_1C4A8C8F8((uint64_t)&v91, a2, a3);
        break;
      case 1:
      case 2:
      case 6:
        return sub_1C4A8C354((uint64_t)&v91, a2, a3);
      case 3:
        result = sub_1C4A8C660((uint64_t)&v91, a2, a3);
        break;
      case 5:
        return sub_1C4A8DD90((uint64_t)&v91, a2, a3);
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1C4A7C510(unsigned int a1, uint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = (a1 & 0x80000000) == 0;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (uint64_t *)(v4 + 16 * (a1 & 0x7FFFFFFF) + 8);
  v6 = *(_QWORD *)(a2 + 272);
  if ((a1 & 0x80000000) == 0)
    v5 = (uint64_t *)(v6 + 8 * a1);
  v7 = *v5;
  if (v7)
  {
    v9 = a1;
    v10 = a1;
    while (1)
    {
      if ((*(_BYTE *)(v7 + 3) & 1) == 0)
      {
        v7 = *(_QWORD *)(v7 + 24);
        if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
          return 0;
      }
      result = 0;
      if (a3 > 3)
        return result;
      v11 = *(_QWORD *)(v7 + 8);
      if (!v11)
        return result;
      if (!a3)
      {
        result = sub_1C4A909AC(v10, a2, 0);
        if (!(_DWORD)result)
          return result;
      }
      v12 = v9 & 0x7FFFFFFF;
      v13 = (uint64_t *)(v4 + 16 * v12 + 8);
      if (v3)
        v13 = (uint64_t *)(v6 + 8 * v10);
      v14 = *v13;
      if ((*(_BYTE *)(v14 + 3) & 1) == 0)
        v14 = *(_QWORD *)(v14 + 24);
      v15 = *(_QWORD *)(v14 + 8);
      if (**(_WORD **)(v15 + 16) == 121)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
        if (v22)
        {
          if (*(_UNKNOWN **)(v22 + 32) == &unk_1C866F1C0)
          {
            v23 = *(_BYTE *)(*(_QWORD *)(v22 + 40) + 28);
            if ((v23 & 8) != 0)
              goto LABEL_19;
          }
          else
          {
            v23 = *(_BYTE *)(v22 + 52);
            if ((v23 & 8) != 0)
              goto LABEL_19;
          }
          if ((v23 & 7) != 3)
          {
            if (!sub_1C4773C58(v22 + 24))
              return 1;
            v4 = *(_QWORD *)(a2 + 24);
            v6 = *(_QWORD *)(a2 + 272);
          }
        }
      }
LABEL_19:
      v16 = (uint64_t *)(v4 + 16 * v12 + 8);
      if (v3)
        v16 = (uint64_t *)(v6 + 8 * v10);
      v17 = *v16;
      if ((*(_BYTE *)(v17 + 3) & 1) == 0)
        v17 = *(_QWORD *)(v17 + 24);
      v18 = *(_QWORD *)(v17 + 8);
      if (**(_WORD **)(v18 + 16) == 121)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 48);
        if (v24)
        {
          if (*(_UNKNOWN **)(v24 + 32) == &unk_1C866F1C0)
          {
            v25 = *(_BYTE *)(*(_QWORD *)(v24 + 40) + 28);
            if ((v25 & 8) != 0)
              goto LABEL_24;
          }
          else
          {
            v25 = *(_BYTE *)(v24 + 52);
            if ((v25 & 8) != 0)
              goto LABEL_24;
          }
          if ((v25 & 7) != 3 && !sub_1C4773C58(v24 + 24))
            return 1;
        }
      }
LABEL_24:
      v19 = **(unsigned __int16 **)(v11 + 16);
      if (v19 == 166)
      {
        v20 = (unsigned int *)(*(_QWORD *)(v11 + 32) + 100);
        ++a3;
      }
      else
      {
        if (v19 != 163)
          return 0;
        ++a3;
        if ((sub_1C4A7C510(*(unsigned int *)(*(_QWORD *)(v11 + 32) + 36), a2) & 1) != 0)
          return 1;
        v20 = (unsigned int *)(*(_QWORD *)(v11 + 32) + 68);
      }
      result = 0;
      v10 = *v20;
      v3 = (int)v10 >= 0;
      v4 = *(_QWORD *)(a2 + 24);
      v21 = (uint64_t *)(v4 + 16 * (v10 & 0x7FFFFFFF) + 8);
      v6 = *(_QWORD *)(a2 + 272);
      if ((int)v10 >= 0)
        v21 = (uint64_t *)(v6 + 8 * v10);
      v7 = *v21;
      v9 = v10;
      if (!v7)
        return result;
    }
  }
  return 0;
}

uint64_t sub_1C4A7C79C(int a1, int a2)
{
  int v2;
  uint64_t result;
  int v4;
  unsigned int *v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;

  v2 = a1 - 5;
  result = 15;
  switch(v2)
  {
    case 0:
    case 8:
    case 10:
    case 12:
      goto LABEL_13;
    case 1:
    case 7:
    case 22:
    case 24:
      return 16;
    case 2:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        return 5;
      v5 = (unsigned int *)&unk_1C676CA6C;
      goto LABEL_34;
    case 3:
    case 40:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        return 2;
      v5 = (unsigned int *)&unk_1C676CAA8;
      goto LABEL_34;
    case 6:
    case 15:
    case 26:
    case 30:
      return 2;
    case 11:
    case 23:
    case 25:
    case 27:
    case 41:
    case 42:
    case 43:
    case 47:
    case 49:
    case 51:
    case 54:
    case 55:
    case 56:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_2;
    case 13:
      if (a2 > 0xF)
        goto LABEL_38;
      if (((1 << a2) & 0xFC00) != 0)
      {
LABEL_20:
        result = 10;
      }
      else if (((1 << a2) & 0x3E0) != 0)
      {
LABEL_2:
        result = 32;
      }
      else
      {
        if (((1 << a2) & 0x1E) != 0)
        {
          v9 = "LayerID not supported.";
LABEL_42:
          llvm::report_fatal_error((llvm *)v9, (const char *)1);
        }
LABEL_38:
        result = 8;
      }
      break;
    case 14:
      return 4;
    case 16:
    case 17:
    case 44:
    case 45:
    case 46:
    case 48:
    case 50:
    case 52:
      return 11;
    case 18:
      goto LABEL_20;
    case 19:
    case 20:
    case 21:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        goto LABEL_38;
      v5 = (unsigned int *)&unk_1C676C9F4;
      goto LABEL_34;
    case 29:
    case 58:
      return 3;
    case 31:
      v6 = (a2 - 6) >= 0xA;
      v7 = 2;
      v8 = 5;
      goto LABEL_23;
    case 33:
      if (a2 <= 14)
        return 13;
      else
        return 19;
    case 34:
      return result;
    case 36:
      if ((a2 - 10) < 6 || (a2 - 1) > 8)
        goto LABEL_38;
      v9 = "SGID not supported.";
      goto LABEL_42;
    case 38:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v5 = (unsigned int *)&unk_1C676CAE4;
LABEL_34:
        result = v5[v4];
      }
      break;
    case 39:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        goto LABEL_38;
      v5 = (unsigned int *)&unk_1C676CA30;
      goto LABEL_34;
    case 53:
      return 5;
    case 59:
      v6 = (a2 - 6) >= 0xA;
      v7 = 3;
      v8 = 6;
LABEL_23:
      if (v6)
        return v7;
      else
        return v8;
    case 64:
      return 12;
    default:
      v9 = "Special register not implemented yet for G15";
      goto LABEL_42;
  }
  return result;
}

void sub_1C4A7C954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C4A7C9BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  return sub_1C4A8A768(v3, v1, v0);
}

uint64_t sub_1C4A7CA04()
{
  uint64_t *v0;
  uint64_t v1;
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v0[5] = *(_QWORD *)(v22 + 24);
  v0[6] = v22;
  v2 = (unsigned __int8 **)(v22 + 56);
  v3 = (unsigned __int8 **)(v0 + 4);
  if ((uint64_t *)(v22 + 56) != v0 + 4)
  {
    if (*v3)
      llvm::MetadataTracking::untrack((uint64_t)(v0 + 4), *v3);
    v4 = *v2;
    *v3 = *v2;
    if (v4)
      llvm::MetadataTracking::track((uint64_t)(v0 + 4), v4, 2);
  }
  v5 = *(_DWORD **)(v22 + 32);
  v6 = v5[1];
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v1 + 432))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 424) + 8 * (v6 & 0x7FFFFFFF));
    if (v7 == 513)
    {
      v8 = v5[9];
      v9 = v5[17];
      v23 = 16777236;
      v24 = 0;
      LODWORD(v25) = v8;
      v27 = 0;
      v10 = sub_1C5546EF4(v0, &v23, (int *)&v25);
      v12 = v11;
      v23 = 16777236;
      v24 = 0;
      LODWORD(v25) = v9;
      v27 = 0;
      v13 = sub_1C5546EF4(v0, &v23, (int *)&v25);
      v14 = **(unsigned __int16 **)(v22 + 16);
      v23 = 16777236;
      v24 = 0;
      v25 = v10;
      v26 = v12;
      v27 = 1;
      v28 = v13;
      v29 = v15;
      v30 = 1;
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v0 + 32))(v0, v14, &v23, 1, &v25, 2, 0);
      LODWORD(v23) = v6;
      v24 = 1;
      v25 = v16;
      v26 = v17;
      v27 = 1;
      sub_1C5546EF4(v0, &v23, (int *)&v25);
      v18 = v22;
      if ((*(_BYTE *)v22 & 4) == 0)
      {
        v18 = v22;
        if ((*(_WORD *)(v22 + 44) & 8) != 0)
        {
          v18 = v22;
          do
            v18 = *(_QWORD *)(v18 + 8);
          while ((*(_WORD *)(v18 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v22 + 24) + 40, v22, *(_QWORD *)(v18 + 8));
      return 1;
    }
    if ((v7 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(_QWORD *)(*(_QWORD *)(v1 + 424) + 8 * (v6 & 0x7FFFFFFF)) & 4) != 0)
    {
      sub_1C4A90EF4(v22, (unsigned __int8 *)v1, (unsigned __int8 **)v0, 2u);
      return 1;
    }
  }
  return 0;
}

void sub_1C4A89D84(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned int a4)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  const char *v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  int v86;
  void *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  v8 = (unsigned __int8 **)(a1 + 56);
  v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) != a3 + 4)
  {
    if (*v9)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v9);
    v10 = *v8;
    *v9 = *v8;
    if (v10)
      llvm::MetadataTracking::track((uint64_t)v9, v10, 2);
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(unsigned int *)(v11 + 4);
  if ((v12 & 0x80000000) != 0 && (v12 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v12 & 0x7FFFFFFF));
  else
    v13 = 0;
  v14 = *(unsigned __int16 **)(a1 + 16);
  v15 = *v14;
  if ((_DWORD)v15 != 86)
  {
    if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0 && (v13 & 4) != 0)
      goto LABEL_42;
    v87 = &v89;
    v88 = 0x300000000;
    v25 = *((unsigned __int8 *)v14 + 4);
    v26 = *(unsigned int *)(a1 + 40);
    if ((v14[4] & 2) != 0)
    {
      if ((_DWORD)v26 == v25)
        goto LABEL_36;
      v27 = *((unsigned __int8 *)v14 + 4);
      do
      {
        v74 = *(_DWORD *)(v11 + 32 * v25);
        if ((v74 & 0x10000FF) != 0x1000000)
          break;
        v27 += (v74 & 0x2000000) == 0;
        if ((_DWORD)v26 - 1 == v25)
          break;
        ++v25;
      }
      while ((v74 & 0x2000000) == 0);
    }
    else
    {
      v27 = *((unsigned __int8 *)v14 + 4);
    }
    if (v27 != (_DWORD)v26)
    {
      v30 = v11 + 32 * v27;
      v31 = 32 * v26 - 32 * v27;
      do
      {
        v32 = *(_DWORD *)(v30 + 4);
        if (v32 < 0
          && (v32 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)
          && *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v32 & 0x7FFFFFFF)) == 0x8000000000000081)
        {
          v85 = 257;
          v86 = 0;
          LODWORD(v82) = v32;
          v84 = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))*a3
           + 4))(a3, 178, &v85, 1, &v82, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
          llvm::MachineOperand::setReg(v30, *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4));
          v32 = *(_DWORD *)(v30 + 4);
        }
        LODWORD(v82) = v32;
        v84 = 0;
        v34 = sub_1C4926708((uint64_t)&v87, (unint64_t)&v82, 1);
        v35 = (char *)v87 + 24 * v88;
        v36 = *(_OWORD *)v34;
        *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
        *(_OWORD *)v35 = v36;
        v28 = (v88 + 1);
        LODWORD(v88) = v88 + 1;
        v30 += 32;
        v31 -= 32;
      }
      while (v31);
      v15 = **(unsigned __int16 **)(a1 + 16);
      v29 = (int *)v87;
      goto LABEL_50;
    }
LABEL_36:
    v28 = 0;
    v29 = &v89;
LABEL_50:
    v82 = 257;
    v83 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, int *, uint64_t, uint64_t))*a3 + 4))(a3, v15, &v82, 1, v29, v28, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
    LODWORD(v85) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
    v86 = 1;
    LODWORD(v82) = *(_DWORD *)(*(_QWORD *)(v37 + 32) + 4);
    v84 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))*a3
     + 4))(a3, 179, &v85, 1, &v82, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
    v38 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v38 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v38 = a1;
        do
          v38 = *(_QWORD *)(v38 + 8);
        while ((*(_WORD *)(v38 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v38 + 8));
    if (v87 != &v89)
      free(v87);
    return;
  }
  v16 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  if ((int)v12 >= 0)
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v12);
  v17 = *v16;
  if (!v17)
    goto LABEL_37;
  if ((*(_BYTE *)(v17 + 3) & 0x81) != 0)
  {
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        break;
      if ((*(_DWORD *)v17 & 0x81000000) == 0)
        goto LABEL_17;
    }
LABEL_37:
    if ((v13 & 0xFFFFFFFFFFFFFFF9) == 0 || (v13 & 4) == 0)
      return;
LABEL_42:
    sub_1C4A90EF4(a1, (unsigned __int8 *)a2, a3, a4);
    return;
  }
LABEL_17:
  v18 = *(_QWORD *)(v17 + 8);
  v19 = 1;
LABEL_18:
  if (**(_WORD **)(v18 + 16) == 116)
  {
    v20 = *(unsigned int *)(v18 + 40);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = *(unsigned __int8 **)(v18 + 32);
      while (1)
      {
        v23 = *v22;
        v22 += 32;
        if (v23 == 17)
          break;
        if (v20 == ++v21)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      LODWORD(v21) = -1;
    }
    v24 = (*(_DWORD *)(*(_QWORD *)(v18 + 32) + 32 * v21 + 16) - 2797) < 6;
  }
  else
  {
    v24 = 0;
  }
  v19 &= v24;
  while (1)
  {
    v17 = *(_QWORD *)(v17 + 24);
    if (!v17)
      break;
    if ((*(_DWORD *)v17 & 0x81000000) == 0 && *(_QWORD *)(v17 + 8) != v18)
    {
      v18 = *(_QWORD *)(v17 + 8);
      goto LABEL_18;
    }
  }
  if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0 && (v13 & 4) != 0)
    goto LABEL_42;
  if ((v19 & 1) == 0)
  {
    v39 = *(_DWORD *)(v11 + 36);
    if (v39 < 0 && (v39 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
    {
      v40 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v39 & 0x7FFFFFFF));
      v85 = v40;
      if (v40 == 0x8000000000000081)
      {
        v40 = 257;
        v85 = 257;
        v82 = 257;
        v83 = 0;
        LODWORD(v87) = v39;
        v89 = 0;
        v80 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3
         + 4))(a3, 178, &v82, 1, &v87, 1, 0);
        v39 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
      }
      else
      {
        v80 = 0;
      }
    }
    else
    {
      v40 = 0;
      v80 = 0;
      v85 = 0;
    }
    v81 = 129;
    v87 = (void *)v40;
    LODWORD(v88) = 0;
    sub_1C5545FFC((uint64_t)a3, (unint64_t *)&v87, 0.5);
    v76 = *(_DWORD *)(*(_QWORD *)(v42 + 32) + 4);
    v87 = (void *)v40;
    LODWORD(v88) = 0;
    sub_1C5545FFC((uint64_t)a3, (unint64_t *)&v87, 0.0);
    v77 = *(_DWORD *)(*(_QWORD *)(v43 + 32) + 4);
    v87 = (void *)129;
    LODWORD(v88) = 0;
    sub_1C5545FFC((uint64_t)a3, (unint64_t *)&v87, 0.5);
    v45 = *(_DWORD *)(*(_QWORD *)(v44 + 32) + 4);
    v87 = (void *)129;
    LODWORD(v88) = 0;
    sub_1C5545FFC((uint64_t)a3, (unint64_t *)&v87, -0.5);
    v47 = *(_DWORD *)(*(_QWORD *)(v46 + 32) + 4);
    v87 = (void *)129;
    LODWORD(v88) = 0;
    sub_1C5545FFC((uint64_t)a3, (unint64_t *)&v87, 0.0);
    v49 = *(_DWORD *)(*(_QWORD *)(v48 + 32) + 4);
    v87 = (void *)v40;
    LODWORD(v88) = 0;
    v51 = sub_1C4825F50(&v85) + 7;
    if ((_DWORD)v50 == 1)
    v52 = 1024.0;
    if ((v51 & 0xFFFFFFFFFFFFFFF8) == 0x20)
      v52 = 8388608.0;
    sub_1C5545FFC((uint64_t)a3, (unint64_t *)&v87, v52);
    v79 = *(_DWORD *)(*(_QWORD *)(v53 + 32) + 4);
    v82 = v85;
    v83 = 0;
    LODWORD(v87) = v39;
    v89 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 184, &v82, 1, &v87, 1, 0);
    v55 = *(_DWORD *)(*(_QWORD *)(v54 + 32) + 4);
    v82 = 129;
    v83 = 0;
    LODWORD(v87) = 3;
    v89 = 2;
    v90 = v39;
    v91 = 0;
    v92 = v77;
    v93 = 0;
    v94 = v45;
    v95 = 0;
    v96 = v47;
    v97 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 51, &v82, 1, &v87, 5, 0);
    v57 = *(_DWORD *)(*(_QWORD *)(v56 + 32) + 4);
    v82 = 129;
    v83 = 0;
    LODWORD(v87) = 4;
    v89 = 2;
    v78 = v55;
    v90 = v55;
    v91 = 0;
    v92 = v76;
    v93 = 0;
    v94 = v49;
    v95 = 0;
    v96 = v57;
    v97 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 51, &v82, 1, &v87, 5, 0);
    v59 = *(_DWORD *)(*(_QWORD *)(v58 + 32) + 4);
    v61 = sub_1C4825F50(&v85) + 7;
    if ((_DWORD)v60 == 1)
    v62 = v61 >> 3;
    v64 = (unint64_t)(sub_1C4825F50(&v81) + 7) >> 3;
    if ((_DWORD)v63 == 1)
    if (v62 > v64)
    {
      v82 = v85;
      v83 = 0;
      LODWORD(v87) = v59;
      v89 = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3
       + 4))(a3, 178, &v82, 1, &v87, 1, 0);
      v59 = *(_DWORD *)(*(_QWORD *)(v65 + 32) + 4);
    }
    v82 = v85;
    v83 = 0;
    LODWORD(v87) = v39;
    v89 = 0;
    v90 = v59;
    v91 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 163, &v82, 1, &v87, 2, 0);
    v67 = *(_DWORD *)(*(_QWORD *)(v66 + 32) + 4);
    v68 = v85;
    v82 = v85;
    v83 = 0;
    LODWORD(v87) = v67;
    v89 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 180, &v82, 1, &v87, 1, 0);
    v70 = *(_DWORD *)(*(_QWORD *)(v69 + 32) + 4);
    v82 = v68;
    v83 = 0;
    LODWORD(v87) = v70;
    v89 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 182, &v82, 1, &v87, 1, 0);
    v72 = *(_DWORD *)(*(_QWORD *)(v71 + 32) + 4);
    v82 = v85;
    v83 = 0;
    LODWORD(v87) = 4;
    v89 = 2;
    v90 = v78;
    v91 = 0;
    v92 = v79;
    v93 = 0;
    v94 = v72;
    v95 = 0;
    v96 = v39;
    v97 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3 + 4))(a3, 51, &v82, 1, &v87, 5, 0);
    if (v80)
    {
      LODWORD(v82) = v12;
      v83 = 1;
      LODWORD(v87) = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 4);
      v89 = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*a3
       + 4))(a3, 179, &v82, 1, &v87, 1, 0);
    }
    else
    {
      llvm::MachineOperand::setReg(*(_QWORD *)(v73 + 32), v12);
    }
    v75 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v75 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v75 = a1;
        do
          v75 = *(_QWORD *)(v75 + 8);
        while ((*(_WORD *)(v75 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v75 + 8));
  }
}

uint64_t sub_1C4A8A768(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int *v11;
  unsigned __int16 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  void (**v58)(unint64_t *);
  unint64_t *v59;
  void (**v60)(unint64_t *);
  _BOOL4 v61;
  int v62;
  llvm::MachineFunction *v63;
  llvm::MachineInstr *v64;
  llvm::MachineInstr *v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  llvm::MachineFunction *v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int IncompleteVirtualRegister;
  uint64_t v81;
  unsigned int v82;
  _BOOL4 v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL (*v89)(_BOOL8);
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  llvm::MachineFunction *v105;
  llvm::MachineInstr *v106;
  llvm::MachineInstr *v107;
  int v108;
  int64_t v109;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned __int8 v117;
  uint64_t v118;
  _BOOL4 v119;
  llvm::MachineMemOperand *v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  _BOOL4 v125;
  int v126;
  unint64_t v127;
  int v128;
  int v129[2];
  unint64_t v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t (**v135)();
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t *v140;
  unsigned int v141;
  char v142;
  uint64_t v143;
  BOOL (*v144)(_BOOL8);
  unint64_t v145;
  unint64_t *v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  _QWORD *(*v157)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  unint64_t *v158;
  uint64_t v159;

  v4 = a2;
  v159 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 **)(a1 + 16);
  v7 = *((unsigned __int8 *)v6 + 4);
  v8 = *v6;
  if (!*((_BYTE *)v6 + 4) && (_DWORD)v8 != 96)
    return 0;
  v9 = (unint64_t *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 < 8)
  {
    v13 = 0;
    goto LABEL_23;
  }
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v10;
    v14 = a1 + 56;
    v13 = (unsigned __int16 **)(a1 + 48);
    goto LABEL_15;
  }
  v11 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((*(_QWORD *)(a1 + 48) & 7) == 3 && v11 != 0)
  {
    v16 = *v11;
    v13 = (unsigned __int16 **)(v11 + 2);
    v15 = v16;
    if (!(_DWORD)v16)
      goto LABEL_19;
    v14 = (uint64_t)&v13[v15];
LABEL_15:
    while (((*v13)[18] & 0xF00) == 0)
    {
      if (++v13 == (unsigned __int16 **)v14)
      {
        v13 = (unsigned __int16 **)v14;
        break;
      }
    }
    if (v10 >= 8)
      goto LABEL_19;
LABEL_23:
    v9 = 0;
    v18 = 0;
    goto LABEL_24;
  }
  v13 = 0;
LABEL_19:
  if ((v10 & 7) != 0)
  {
    v9 = 0;
    if ((v10 & 7) == 3 && (v17 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8), (v10 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      v18 = *v17;
      v9 = (unint64_t *)(v17 + 2);
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    *v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    v18 = 1;
  }
LABEL_24:
  if (v13 == (unsigned __int16 **)&v9[v18])
    v19 = 0;
  else
    v19 = *v13;
  if ((_DWORD)v8 == 96 && !v19)
    return 0;
  v20 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)v20)
    return 0;
  v22 = *(_DWORD *)(v20 + 4);
  if ((v22 & 0x80000000) == 0
    || (v22 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a2 + 432)
    || (v120 = *(llvm::MachineMemOperand **)(*(_QWORD *)(a2 + 424) + 8 * (v22 & 0x7FFFFFFF)),
        (v120 == (llvm::MachineMemOperand *)513) != (v120 != (llvm::MachineMemOperand *)257)))
  {
    llvm::report_fatal_error((llvm *)"All non-64b atomic operations must be i32", (const char *)1);
  }
  a3[5] = *(_QWORD *)(a1 + 24);
  a3[6] = a1;
  v23 = (unsigned __int8 **)(a1 + 56);
  v24 = (unsigned __int8 **)(a3 + 4);
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v24)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v24);
    v25 = *v23;
    *v24 = *v23;
    if (v25)
      llvm::MetadataTracking::track((uint64_t)(a3 + 4), v25, 2);
  }
  if ((_DWORD)v8 == 96)
    v26 = 1;
  else
    v26 = v7;
  v27 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32 * v26 + 4);
  v28 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16);
  if ((v27 & 0x80000000) != 0 && (v27 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v4 + 432))
    v29 = *(_QWORD *)(*(_QWORD *)(v4 + 424) + 8 * (v27 & 0x7FFFFFFF));
  else
    v29 = 0;
  v30 = 35;
  if ((v29 & 4) == 0)
    v30 = 19;
  v126 = (v29 >> v30) & 0xFFFFFF;
  v31 = v19[18];
  v32 = (v31 >> 8) & 0xF;
  v33 = v31 >> 12;
  if ((_DWORD)v33 == 5 && (_DWORD)v32 == 4 || (_DWORD)v33 == 4 && (_DWORD)v32 == 5)
  {
    v34 = 6;
  }
  else if (byte_1C65ED518[8 * v32 + v33])
  {
    v34 = v32;
  }
  else
  {
    v34 = v33;
  }
  v136 = 0x2FFFFFFFFLL;
  v138 = 0;
  v139 = 0;
  v135 = off_1E7FAA730;
  sub_1C4A13598((uint64_t)&v135, v8, v126, v34, (uint64_t)v28);
  v35 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v8 == 96)
    v36 = 0;
  else
    v36 = v7 + 1;
  v123 = *(_DWORD *)(v35 + 32 * v36 + 4);
  if (HIDWORD(v136) == 2)
  {
    v116 = *(_DWORD *)(v35 + 36);
    v37 = !sub_1C4A91738(v4, v116);
  }
  else
  {
    v116 = 0;
    v37 = 0;
  }
  v119 = v37;
  v125 = v37;
  if (!v37 && (_DWORD)v8 != 96)
    v125 = !sub_1C4A91738(v4, v22);
  v121 = v22;
  v38 = *(_QWORD *)(v4 + 24);
  v39 = (uint64_t *)(v38 + 16 * (v27 & 0x7FFFFFFF) + 8);
  v40 = *(_QWORD *)(v4 + 272);
  if ((int)v27 >= 0)
    v39 = (uint64_t *)(v40 + 8 * v27);
  v41 = *v39;
  if (v41 && ((*(_BYTE *)(v41 + 3) & 1) != 0 || (v41 = *(_QWORD *)(v41 + 24)) != 0 && (*(_BYTE *)(v41 + 3) & 1) != 0))
    v42 = *(_QWORD *)(v41 + 8);
  else
    v42 = 0;
  v134 = 257;
  if (v126 == 3)
    v43 = 129;
  else
    v43 = 513;
  if (v126 == 3)
  {
    v44 = sub_1C4A73FE0(v27, v4, 0);
    if (!HIDWORD(v44))
    {
      v118 = 0;
      v45 = 16;
      goto LABEL_91;
    }
    v143 = 129;
    LODWORD(v144) = 0;
    sub_1C5544694((uint64_t)a3, (unint64_t *)&v143, v44);
    v118 = 0;
    v51 = (unsigned int *)(*(_QWORD *)(v52 + 32) + 4);
    v38 = *(_QWORD *)(v4 + 24);
    v40 = *(_QWORD *)(v4 + 272);
    v45 = 16;
  }
  else
  {
    if (**(_WORD **)(v42 + 16) != 116)
      goto LABEL_84;
    v46 = *(unsigned int *)(v42 + 40);
    v47 = *(_QWORD *)(v42 + 32);
    if ((_DWORD)v46)
    {
      v48 = 0;
      v49 = *(unsigned __int8 **)(v42 + 32);
      while (1)
      {
        v50 = *v49;
        v49 += 32;
        if (v50 == 17)
          break;
        if (v46 == ++v48)
          goto LABEL_81;
      }
    }
    else
    {
LABEL_81:
      LODWORD(v48) = -1;
    }
    if ((*(_DWORD *)(v47 + 32 * v48 + 16) - 2746) > 2)
    {
LABEL_84:
      v118 = 0;
      v45 = 32;
      goto LABEL_91;
    }
    v51 = (unsigned int *)(v47 + 32 * (v48 + 1) + 4);
    v45 = 32;
    v118 = 4096;
  }
  v53 = *v51;
  v54 = (uint64_t *)(v38 + 16 * (v53 & 0x7FFFFFFF) + 8);
  v55 = (uint64_t *)(v40 + 8 * v53);
  if ((int)v53 >= 0)
    v54 = v55;
  v56 = *v54;
  if ((*(_BYTE *)(v56 + 3) & 1) == 0)
    v56 = *(_QWORD *)(v56 + 24);
  v42 = *(_QWORD *)(v56 + 8);
LABEL_91:
  sub_1C4A5C7D4(v42, v4, a3, v126 == 3, (uint64_t *)v43, v45, v129);
  v143 = (uint64_t)&off_1E816EFF0;
  v144 = sub_1C554C7E0;
  v146 = (unint64_t *)&v143;
  v156 = (unint64_t)&off_1E816F038;
  v157 = sub_1C554C7F8;
  v158 = &v156;
  sub_1C554C3AC(v129[0], v133, (uint64_t)&v143, (uint64_t)&v156, 1, 0, &v140);
  v57 = v158;
  if (v158 == &v156)
  {
    v58 = (void (**)(unint64_t *))(v156 + 32);
    v57 = &v156;
LABEL_93:
    (*v58)(v57);
    goto LABEL_94;
  }
  if (v158)
  {
    v58 = (void (**)(unint64_t *))(*v158 + 40);
    goto LABEL_93;
  }
LABEL_94:
  v59 = v146;
  if (v146 == (unint64_t *)&v143)
  {
    v60 = (void (**)(unint64_t *))(v143 + 32);
    v59 = (unint64_t *)&v143;
LABEL_96:
    (*v60)(v59);
    goto LABEL_97;
  }
  if (v146)
  {
    v60 = (void (**)(unint64_t *))(*v146 + 40);
    goto LABEL_96;
  }
LABEL_97:
  if (v142)
  {
    if (v141 <= 0x40)
    {
      v91 = v140;
      v61 = (unint64_t)v140 < 0x100;
      if ((unint64_t)v140 >= 0x100)
        v91 = 0;
      v117 = v91;
      goto LABEL_99;
    }
    v108 = 0;
    v109 = ((unint64_t)v141 + 63) >> 6;
    do
    {
      if (v109-- < 1)
        break;
      v111 = v140[v109];
      v108 += __clz(v111);
    }
    while (!v111);
    v112 = v141 | 0xFFFFFFC0;
    if ((v141 & 0x3F) == 0)
      v112 = 0;
    if (v141 - v108 - v112 <= 0x40)
    {
      v113 = *v140;
      v61 = (unint64_t)*v140 < 0x100;
      if ((unint64_t)*v140 >= 0x100)
        LOBYTE(v113) = 0;
      v117 = v113;
    }
    else
    {
      v117 = 0;
      v61 = 0;
      if (!v140)
        goto LABEL_99;
    }
    MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
  }
  else
  {
    v61 = 0;
    v117 = 0;
  }
LABEL_99:
  v122 = sub_1C4A90388((uint64_t)v129);
  if (BYTE2(v138))
  {
    v62 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * v7 + 68);
    v156 = (unint64_t)&off_1E7FB1BC0;
    LODWORD(v157) = 2;
    v63 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 18, &v156, 1, 0, 0, 0);
    v65 = v64;
    v144 = 0;
    v145 = 0;
    LODWORD(v143) = 0;
    HIDWORD(v143) = v62;
    v146 = 0;
    llvm::MachineInstr::addOperand(v64, v63, (const llvm::MachineOperand *)&v143);
    LODWORD(v143) = 1;
    v144 = 0;
    v145 = 25;
    llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v143);
    v144 = 0;
    v145 = 0;
    LODWORD(v143) = 0;
    HIDWORD(v143) = v123;
    v146 = 0;
    llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v143);
    LODWORD(v143) = 1;
    v144 = 0;
    v145 = 26;
    llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v143);
    v115 = v123;
    v66 = *(_DWORD *)(*((_QWORD *)v65 + 4) + 4);
  }
  else
  {
    v115 = 0;
    v66 = v123;
  }
  if ((_DWORD)v8 == 112)
  {
    v156 = 257;
    LODWORD(v157) = 0;
    LODWORD(v143) = v66;
    LODWORD(v145) = 0;
    (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 177, &v156, 1, &v143, 1, 0);
    v124 = *(_DWORD *)(*(_QWORD *)(v67 + 32) + 4);
  }
  else
  {
    v124 = v66;
  }
  sub_1C4A8BDA8(a1, v137, v28);
  v68 = sub_1C4A90550((uint64_t)v129);
  v69 = sub_1C4A1371C((uint64_t)&v135, v125, v61, BYTE2(v122) != 0, v68, v120 == (llvm::MachineMemOperand *)513);
  v71 = sub_1C55437B8(a3, v69);
  v72 = (unint64_t *)v70;
  v73 = (unint64_t *)a3[6];
  v74 = *(_QWORD *)(a3[5] + 40);
  *(_QWORD *)(v70 + 24) = v74;
  v75 = *(_QWORD *)(v74 + 32);
  v76 = *(unsigned int *)(v70 + 40);
  if ((_DWORD)v76)
  {
    v92 = *(_QWORD *)(v70 + 32);
    v93 = *(_QWORD *)(v75 + 40);
    v94 = 32 * v76;
    do
    {
      if (!*(_BYTE *)v92)
      {
        v95 = *(unsigned int *)(v92 + 4);
        if ((int)v95 >= 0)
          v96 = (uint64_t *)(*(_QWORD *)(v93 + 272) + 8 * v95);
        else
          v96 = (uint64_t *)(*(_QWORD *)(v93 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
        v97 = *v96;
        if (*v96)
        {
          v98 = *(_QWORD *)(v97 + 16);
          *(_QWORD *)(v97 + 16) = v92;
          *(_QWORD *)(v92 + 16) = v98;
          if ((*(_BYTE *)(v92 + 3) & 1) != 0)
          {
            *(_QWORD *)(v92 + 24) = v97;
          }
          else
          {
            *(_QWORD *)(v92 + 24) = 0;
            v96 = (uint64_t *)(v98 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v92 + 16) = v92;
          *(_QWORD *)(v92 + 24) = 0;
        }
        *v96 = v92;
      }
      v92 += 32;
      v94 -= 32;
    }
    while (v94);
  }
  v77 = *(_QWORD *)(v75 + 728);
  if (v77)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 24))(v77, v70);
  v78 = *v73 & 0xFFFFFFFFFFFFFFF8;
  *v72 = v78 | *v72 & 7;
  v72[1] = (unint64_t)v73;
  *(_QWORD *)(v78 + 8) = v72;
  *v73 = *v73 & 7 | (unint64_t)v72;
  v79 = a3[7];
  if (v79)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v79 + 24))(v79, v72);
  if (v125)
  {
    if (v126 == 3 || v28[303] || v28[305])
    {
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB1568;
      v81 = *(_QWORD *)(v4 + 8);
      if (v81)
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
      v144 = 0;
      v145 = 0;
      v146 = 0;
      LODWORD(v143) = 0x1000000;
      HIDWORD(v143) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
    }
    else
    {
      v100 = sub_1C4825F50(&v134);
      if ((_DWORD)v99 == 1)
      v101 = (unsigned __int16)(v134 >> 3);
      v102 = (unsigned __int16)(v134 >> 19);
      if ((v134 & 2) == 0)
        v102 = v134 >> 19;
      if ((v134 & 4) != 0)
        v101 = v102;
      if ((v134 & 1) != 0)
        v103 = v134 >> 3;
      else
        v103 = v101;
      sub_1C4AD627C((uint64_t)a3, v100 >> 3, v103 >> 3, (uint64_t)&v143);
      v104 = v143;
      v4 = (uint64_t)v144;
      v120 = (llvm::MachineMemOperand *)v145;
      LODWORD(v143) = 5;
      v144 = 0;
      v114 = v104;
      LODWORD(v145) = v104;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
      LODWORD(v143) = 1;
      v144 = 0;
      v145 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
    }
  }
  LODWORD(v143) = 1;
  v144 = 0;
  v145 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  LODWORD(v143) = 1;
  v144 = 0;
  v145 = v118 | v136 | ((unint64_t)(v132 != 1) << 9);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  if (v61)
  {
    LODWORD(v143) = 1;
    v144 = 0;
    v145 = v117;
  }
  else
  {
    v144 = 0;
    v145 = 0;
    LODWORD(v143) = 0;
    HIDWORD(v143) = v129[0];
    v146 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
    LODWORD(v143) = 1;
    v144 = 0;
    v145 = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  if (BYTE2(v122))
  {
    LODWORD(v143) = 1;
    v144 = 0;
    v145 = (__int16)v122;
  }
  else
  {
    v144 = 0;
    v145 = 0;
    LODWORD(v143) = 0;
    HIDWORD(v143) = v129[1];
    v146 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
    LODWORD(v143) = 1;
    v144 = 0;
    v145 = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  LODWORD(v143) = 1;
  v144 = 0;
  v145 = v131;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  LODWORD(v143) = 1;
  v144 = 0;
  v145 = v130;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  v144 = 0;
  v145 = 0;
  LODWORD(v143) = 0;
  HIDWORD(v143) = v124;
  v146 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  LODWORD(v143) = 1;
  v144 = 0;
  v145 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v71, (const llvm::MachineOperand *)&v143);
  v82 = v121;
  if (v126 != 3 && !v28[303])
  {
    v83 = v125;
    if (v28[305])
      v83 = 0;
    if (v83)
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v72, v71, (llvm::MachineMemOperand *)v4);
  }
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v72, v71, (llvm::MachineMemOperand *)v19);
  v84 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v28 + 104))(v28);
  (*(void (**)(_BYTE *))(*(_QWORD *)v28 + 184))(v28);
  v85 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v28 + 176))(v28);
  sub_1C554AE8C(v72, v84, v85);
  sub_1C4A8C03C(a1, v137, (uint64_t)v28);
  if (v125)
  {
    if (v126 == 3 || v28[303] || v28[305])
    {
      LODWORD(v156) = v121;
      LODWORD(v157) = 1;
      v143 = (uint64_t)v71;
      v144 = (BOOL (*)(_BOOL8))v72;
      LODWORD(v145) = 1;
      (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v156, 1, &v143, 1, 0);
    }
    else
    {
      LODWORD(v156) = v121;
      LODWORD(v157) = 1;
      v105 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 325, &v156, 1, 0, 0, 0);
      v107 = v106;
      LODWORD(v143) = 1;
      v144 = 0;
      v145 = 0;
      llvm::MachineInstr::addOperand(v106, v105, (const llvm::MachineOperand *)&v143);
      LODWORD(v143) = 1;
      v144 = 0;
      v145 = 0;
      llvm::MachineInstr::addOperand(v107, v105, (const llvm::MachineOperand *)&v143);
      LODWORD(v143) = 5;
      v144 = 0;
      LODWORD(v145) = v114;
      llvm::MachineInstr::addOperand(v107, v105, (const llvm::MachineOperand *)&v143);
      LODWORD(v143) = 1;
      v144 = 0;
      v145 = 0;
      llvm::MachineInstr::addOperand(v107, v105, (const llvm::MachineOperand *)&v143);
      LODWORD(v143) = 1;
      v82 = v121;
      v144 = 0;
      v145 = 0;
      llvm::MachineInstr::addOperand(v107, v105, (const llvm::MachineOperand *)&v143);
      llvm::MachineInstr::addMemOperand(v107, v105, v120);
      sub_1C554AE8C(v107, v84, v85);
    }
  }
  if (v119)
  {
    v156 = v134;
    LODWORD(v157) = 0;
    LODWORD(v143) = 32;
    LODWORD(v145) = 2;
    LODWORD(v146) = v82;
    v147 = 0;
    v148 = v115;
    v149 = 0;
    v140 = (uint64_t *)v134;
    v141 = 0;
    v150 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v140, 1);
    v151 = v86;
    v152 = 1;
    v127 = v134;
    v128 = 0;
    v153 = sub_1C5544694((uint64_t)a3, &v127, 0);
    v154 = v87;
    v155 = 1;
    v88 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 51, &v156, 1, &v143, 5, 0);
    LODWORD(v156) = v116;
    LODWORD(v157) = 1;
    v143 = v88;
    v144 = v89;
    LODWORD(v145) = 1;
    sub_1C5546B4C(a3, 126, &v156, (int *)&v143);
  }
  v90 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v90 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v90 = a1;
      do
        v90 = *(_QWORD *)(v90 + 8);
      while ((*(_WORD *)(v90 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v90 + 8));
  return 1;
}

void sub_1C4A8B670(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E816E938;
  sub_1C4959BE8((char **)(a1 + 35456));
  for (i = 0; i != -35448; i -= 168)
    sub_1C4959EB8((char **)(a1 + 35296 + i));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C4A8B6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v10;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 8 * *(unsigned int *)(a1 + 8));
  v4 = (unsigned __int16)(v3 >> 3);
  v5 = (unsigned __int16)(v3 >> 19);
  if ((v3 & 2) == 0)
    v5 = (v3 >> 19);
  if ((v3 & 4) != 0)
    v4 = v5;
  if ((v3 & 1) != 0)
    v6 = (v3 >> 3);
  else
    v6 = v4;
  v7 = sub_1C4825F50((unint64_t *)(v2 + 8 * *(unsigned int *)(a1 + 12)));
  if ((_DWORD)v8 == 1)
  {
    v10 = v7;
    v7 = v10;
  }
  return v7 > v6;
}

uint64_t sub_1C4A8B770(int a1)
{
  uint64_t result;
  llvm *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;

  result = 59;
  switch(a1)
  {
    case 0:
      result = 52;
      break;
    case 1:
      result = 54;
      break;
    case 2:
      result = 56;
      break;
    case 3:
      result = 18;
      break;
    case 4:
      result = 53;
      break;
    case 5:
      result = 55;
      break;
    case 6:
      result = 57;
      break;
    case 7:
      result = 49;
      break;
    case 8:
      result = 50;
      break;
    case 9:
      result = 51;
      break;
    case 10:
      result = 21;
      break;
    case 11:
      result = 22;
      break;
    case 12:
      result = 20;
      break;
    case 13:
      result = 19;
      break;
    case 14:
      result = 31;
      break;
    case 17:
      result = 24;
      break;
    case 18:
      result = 25;
      break;
    case 19:
      result = 26;
      break;
    case 20:
      result = 23;
      break;
    case 21:
      result = 43;
      break;
    case 22:
      result = 44;
      break;
    case 23:
      result = 35;
      break;
    case 24:
      result = 63;
      break;
    case 25:
      result = 36;
      break;
    case 26:
      result = 64;
      break;
    case 27:
    case 28:
    case 71:
      result = 7;
      break;
    case 29:
      result = 5;
      break;
    case 30:
      result = 17;
      break;
    case 35:
      return result;
    case 36:
      result = 60;
      break;
    case 37:
      result = 61;
      break;
    case 42:
      result = 6;
      break;
    case 44:
      result = 34;
      break;
    case 53:
      result = 11;
      break;
    case 54:
      result = 12;
      break;
    case 59:
      result = 66;
      break;
    case 60:
      result = 65;
      break;
    case 61:
      result = 67;
      break;
    case 62:
      result = 68;
      break;
    case 63:
      result = 16;
      break;
    case 64:
      result = 48;
      break;
    case 65:
      result = 32;
      break;
    case 66:
      result = 46;
      break;
    case 67:
      result = 47;
      break;
    case 68:
      result = 39;
      break;
    case 69:
      result = 38;
      break;
    case 70:
      result = 58;
      break;
    case 72:
      result = 30;
      break;
    case 73:
      result = 29;
      break;
    case 74:
      result = 28;
      break;
    case 75:
      result = 27;
      break;
    case 76:
      result = 69;
      break;
    case 77:
      result = 15;
      break;
    case 78:
      result = 13;
      break;
    case 79:
      result = 41;
      break;
    default:
      v4 = llvm::dbgs((llvm *)0x3B);
      v5 = sub_1C4816AD8(v4, "SR type GPUBaseInfo::SRegType::<");
      v6 = sub_1C614D714(v5, a1);
      sub_1C4816AD8(v6, ">\n");
      llvm::report_fatal_error((llvm *)"Special register type not implemented yet for G15", (const char *)1);
  }
  return result;
}

void sub_1C4A8B994(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  llvm::MachineInstr *v17;
  llvm::MachineInstr *v18;
  llvm::MachineFunction *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  const char *v24;
  llvm::MachineInstr *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v32;
  llvm::MachineFunction *v33;
  llvm::MachineInstr *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  void *v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  sub_1C4A8BC28(&v40, a4, a3, a5, a6);
  v9 = a4 & 0xFFFFFFFE;
  if ((a4 & 0xFFFFFFFE) == 6)
    v10 = 16;
  else
    v10 = 8;
  v29 = v10;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  v11 = *(_DWORD *)(a2 + 8);
  if (v11)
  {
    v12 = 0;
    if (v9 == 6)
      v13 = 4;
    else
      v13 = 3;
    v30 = v13;
    do
    {
      if (v11 - v12 >= 2)
        v14 = 2;
      else
        v14 = v11 - v12;
      v15 = (_DWORD)v14 << v30;
      if ((_DWORD)v14 << v30 <= 0x10u)
        v15 = 16;
      v32 = (8 * v15) | 1u;
      v38 = v32;
      v39 = 0;
      LODWORD(v33) = *((_DWORD *)v40 + (v12 >> 1));
      LODWORD(v35) = 0;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, _QWORD))(*(_QWORD *)a6 + 32))(a6, 54, &v38, 1, &v33, 1, 0);
      v18 = v17;
      if ((_DWORD)v14)
      {
        v19 = (llvm::MachineFunction *)v16;
        v20 = v12;
        v21 = v14;
        do
        {
          v22 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v20);
          v34 = 0;
          LODWORD(v33) = 0;
          HIDWORD(v33) = v22;
          v35 = 0;
          v36 = 0;
          llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v33);
          ++v20;
          --v21;
        }
        while (v21);
        if ((_DWORD)v14 == 1)
        {
          v23 = sub_1C4825F50(&v32);
          if ((_DWORD)v24 == 1)
          {
            v28 = v23;
            v23 = v28;
          }
          if (v23 > v29)
          {
            v38 = v32;
            v39 = 0;
            v33 = v19;
            v34 = v18;
            LODWORD(v35) = 1;
            v36 = v29;
            v37 = 3;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, _QWORD))(*(_QWORD *)a6 + 32))(a6, 259, &v38, 1, &v33, 2, 0);
            v18 = v25;
          }
        }
      }
      v26 = *(_DWORD *)(*((_QWORD *)v18 + 4) + 4);
      v27 = *(unsigned int *)(a1 + 8);
      if (v27 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v27 + 1, 4);
        v27 = *(unsigned int *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v27) = v26;
      ++*(_DWORD *)(a1 + 8);
      v12 += v14;
    }
    while (v12 < v11);
  }
  if (v40 != v41)
    free(v40);
}

_QWORD *sub_1C4A8BC28(_QWORD *result, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;

  v5 = result;
  if (a2 == 10)
  {
    if ((a3 & 0x80000000) != 0
      && (v7 = *(_QWORD *)(a5 + 24), (a3 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v7 + 432)))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (a3 & 0x7FFFFFFF));
    }
    else
    {
      v8 = 0;
    }
    if (a4 != 15 && (a4 & 8) != 0)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.i32[0] == 2)
      {
        v20 = v8;
        v21 = 0;
        v17 = a5;
        v18 = 17;
      }
      else
      {
        if (v9.i32[0] == 3)
        {
          v20 = v8;
          v21 = 0;
          sub_1C5544694(a5, &v20, 16);
          v11 = v10;
          v20 = v8;
          v21 = 0;
          v12 = a5;
          v13 = 18;
LABEL_13:
          result = (_QWORD *)sub_1C5544694(v12, &v20, v13);
          v5[2] = *(unsigned int *)(*(_QWORD *)(v11 + 32) + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v15 + 32) + 4) << 32);
          *v5 = v5 + 2;
          goto LABEL_14;
        }
        v20 = v8;
        v21 = 0;
        v17 = a5;
        v18 = 18;
      }
      result = (_QWORD *)sub_1C5544694(v17, &v20, v18);
      *((_DWORD *)v5 + 4) = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4);
      *v5 = v5 + 2;
      v16 = 0x200000001;
      goto LABEL_15;
    }
    v20 = v8;
    v21 = 0;
    sub_1C5544694(a5, &v20, 16);
    v11 = v14;
    v20 = v8;
    v21 = 0;
    v12 = a5;
    v13 = 17;
    goto LABEL_13;
  }
  result[2] = a3 | ((unint64_t)a3 << 32);
  *result = result + 2;
LABEL_14:
  v16 = 0x200000002;
LABEL_15:
  v5[1] = v16;
  return result;
}

void sub_1C4A8BDA8(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  llvm::MachineFunction *v27;
  llvm::MachineInstr *v28;
  llvm::MachineInstr *v29;
  int v30;
  unsigned int v31;
  uint64_t v32[4];
  unsigned __int8 *v33[5];
  int v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v7 = *(_QWORD *)v6;
  v8 = sub_1C4A17AE8((uint64_t)a3);
  if (a3[320])
    v9 = 3;
  else
    v9 = 1;
  LODWORD(v32[0]) = 0;
  if (sub_1C4AC67E0((int)a3, v7, "AtomicCacheCtl", (int *)v32))
    v10 = v32[0];
  else
    v10 = v9;
  if (a3[322])
  {
    v31 = v10;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 344) + 648))(*(_QWORD *)(v6 + 344));
    v10 = v31;
  }
  else
  {
    v11 = 1;
  }
  if (v8 == 5)
    v12 = v11;
  else
    v12 = 0;
  if (a3[330])
    v13 = 3;
  else
    v13 = v12;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (a3[329])
  {
    v15 = 0;
LABEL_24:
    v16 = 0;
    goto LABEL_25;
  }
  LODWORD(v32[0]) = 0;
  if (sub_1C4AC67E0((int)a3, v7, "MemoryReadCacheCtl", (int *)v32))
    v15 = v32[0];
  else
    v15 = v14;
  if (a3[329])
    goto LABEL_24;
  LODWORD(v32[0]) = 0;
  v30 = sub_1C4AC67E0((int)a3, v7, "MemoryWriteCacheCtl", (int *)v32);
  v16 = v32[0];
  if (!v30)
    v16 = v14;
LABEL_25:
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = *(_QWORD *)v6;
  LODWORD(v32[0]) = 0;
  sub_1C4AC67E0((int)a3, v18, "SampleWriteL2Pers", (int *)v32);
  switch(a2)
  {
    case 3:
    case 11:
      v19 = v17 == 0;
      v20 = 168;
      v21 = 184;
      goto LABEL_31;
    case 4:
    case 12:
      v19 = v17 == 0;
      v20 = 232;
      v21 = 248;
LABEL_31:
      if (v19)
        v22 = v21;
      else
        v22 = v20;
      v23 = *(_QWORD *)(a1 + 24);
      v33[4] = 0;
      v24 = *(_QWORD *)(v23 + 32);
      v32[0] = (uint64_t)&off_1E816EC08;
      v32[1] = v24;
      v32[3] = *(_QWORD *)(v24 + 40);
      v32[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 16) + 104))(*(_QWORD *)(v24 + 16));
      v25 = *(unsigned __int8 **)(a1 + 24);
      v33[2] = (unsigned __int8 *)a1;
      v33[3] = 0;
      v33[0] = 0;
      v33[1] = v25;
      if ((unsigned __int8 **)(a1 + 56) != v33)
      {
        v26 = *(unsigned __int8 **)(a1 + 56);
        v33[0] = v26;
        if (v26)
          llvm::MetadataTracking::track((uint64_t)v33, v26, 2);
      }
      v27 = (llvm::MachineFunction *)sub_1C5548620(v32, 9187, 0, 0, 0, 0, 0);
      v29 = v28;
      v34 = 1;
      v35 = 0;
      v36 = 0;
      llvm::MachineInstr::addOperand(v28, v27, (const llvm::MachineOperand *)&v34);
      v34 = 1;
      v35 = 0;
      v36 = v22;
      llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v34);
      v32[0] = (uint64_t)&off_1E816EC08;
      if (v33[0])
        llvm::MetadataTracking::untrack((uint64_t)v33, v33[0]);
      break;
    default:
      return;
  }
}

void sub_1C4A8C03C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::MachineFunction *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  llvm::MachineInstr *v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v7 = *(_QWORD *)v6;
  LODWORD(v22) = 0;
  sub_1C4AC67E0(a3, v7, "AtomicCacheCtl", (int *)&v22);
  if (*(_BYTE *)(a3 + 322))
    (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 344) + 648))(*(_QWORD *)(v6 + 344));
  if (!*(_BYTE *)(a3 + 329))
  {
    LODWORD(v22) = 0;
    sub_1C4AC67E0(a3, v7, "MemoryReadCacheCtl", (int *)&v22);
    if (!*(_BYTE *)(a3 + 329))
    {
      LODWORD(v22) = 0;
      sub_1C4AC67E0(a3, v7, "MemoryWriteCacheCtl", (int *)&v22);
    }
  }
  v8 = *(_QWORD *)v6;
  LODWORD(v22) = 0;
  sub_1C4AC67E0(a3, v8, "SampleWriteL2Pers", (int *)&v22);
  switch(a2)
  {
    case 7:
    case 11:
      v9 = *(_QWORD *)(a1 + 24);
      v30 = 0;
      v10 = *(_QWORD *)(v9 + 32);
      v22 = &off_1E816EC08;
      v23 = v10;
      v25 = *(_QWORD *)(v10 + 40);
      v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 16) + 104))(*(_QWORD *)(v10 + 16));
      v11 = *(_QWORD *)(a1 + 24);
      v28 = a1;
      v29 = 0;
      v26 = 0;
      v27 = v11;
      if ((unsigned __int8 **)(a1 + 56) != &v26)
      {
        v12 = *(unsigned __int8 **)(a1 + 56);
        v26 = v12;
        if (v12)
          llvm::MetadataTracking::track((uint64_t)&v26, v12, 2);
      }
      v13 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v22, 9187, 0, 0, 0, 0, 0);
      v15 = v14;
      v31 = 1;
      v32 = 0;
      v33 = 0;
      llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v31);
      v31 = 1;
      v16 = 166;
      goto LABEL_15;
    case 8:
    case 12:
      v17 = *(_QWORD *)(a1 + 24);
      v30 = 0;
      v18 = *(_QWORD *)(v17 + 32);
      v22 = &off_1E816EC08;
      v23 = v18;
      v25 = *(_QWORD *)(v18 + 40);
      v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 104))(*(_QWORD *)(v18 + 16));
      v19 = *(_QWORD *)(a1 + 24);
      v28 = a1;
      v29 = 0;
      v26 = 0;
      v27 = v19;
      if ((unsigned __int8 **)(a1 + 56) != &v26)
      {
        v20 = *(unsigned __int8 **)(a1 + 56);
        v26 = v20;
        if (v20)
          llvm::MetadataTracking::track((uint64_t)&v26, v20, 2);
      }
      v13 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v22, 9187, 0, 0, 0, 0, 0);
      v15 = v21;
      v31 = 1;
      v32 = 0;
      v33 = 0;
      llvm::MachineInstr::addOperand(v21, v13, (const llvm::MachineOperand *)&v31);
      v31 = 1;
      v16 = 230;
LABEL_15:
      v32 = 0;
      v33 = v16;
      llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v31);
      v22 = &off_1E816EC08;
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
      break;
    default:
      return;
  }
}

BOOL sub_1C4A8C2F0(int a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  char v7;

  sub_1C493FD84((uint64_t)&v6, a1, a2, 0);
  if (!v7)
    return 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 344) + 400))(*(_QWORD *)(a3 + 344), v6);
  return v4 != 17;
}

uint64_t sub_1C4A8C354(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  char v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD v27[6];
  uint64_t v28;
  int v29;
  int v30[10];
  llvm::MachineFunction *v31[2];
  unint64_t v32[3];
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  __int128 v40;
  unint64_t v41;

  v41 = *(_QWORD *)(a1 + 32);
  if (!sub_1C4A8E9C8(&v41))
  {
    if ((v41 & 0xFFFFFFFFFFFFFFF9) == 0 || (v41 & 4) == 0)
      return 0;
    v18 = 3;
    if ((v41 & 1) == 0)
      v18 = 19;
    v19 = v41 >> v18;
    v20 = (v41 & 2) != 0
        ? (v41 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v19) | 2
        : v41 & 0x8000000000000000 | (8 * v19) | 1;
    v32[0] = v20;
    if (!sub_1C4A8E9C8(v32))
      return 0;
    v22 = v41;
    v23 = 0x800000000000000;
    if ((v41 & 2) == 0)
      v23 = 0x8000000000000;
    if ((v23 & v41) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
      v22 = v41;
    }
    if ((unsigned __int16)(v22 >> 3) > 4u)
      return 0;
  }
  v6 = *(unsigned int *)(a1 + 20);
  v32[0] = a1;
  v32[1] = a2;
  v32[2] = 0;
  v33 = -1;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v40 = xmmword_1C676B850;
  sub_1C4A613B0(v32);
  v7 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  if ((int)v6 >= 0)
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v6);
  v8 = *v7;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 8);
  v31[0] = 0;
  v31[1] = 0;
  sub_1C4A5C7D4(v9, a2, a3, 0, (uint64_t *)0x201, 0x20u, v30);
  v35 |= (unint64_t)(v30[6] != 1) << 11;
  v10 = v34;
  if (v34 != 1 || *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) || (result = sub_1C4A8EA48(a1, a2, a3), (_DWORD)result))
  {
    v12 = v30[0] & 0x7FFFFFFF;
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v12 + 8);
    if (v30[0] >= 0)
      v13 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v30[0]);
    v14 = *v13;
    if (v14)
    {
      if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
      {
        v24 = *(_QWORD *)(v14 + 8);
        if (v24)
        {
          if (**(_WORD **)(v24 + 16) == 45 && *(_DWORD *)(v24 + 40) == 3)
          {
            v25 = 0;
            if (v30[0] < 0 && v12 < *(unsigned int *)(a2 + 432))
              v25 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v12);
            v28 = v25;
            v29 = 0;
            v27[0] = v30[0];
            v27[4] = 0;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a3 + 32))(a3, 19, &v28, 1, v27, 1, 0);
            v30[0] = *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4);
          }
        }
      }
    }
    sub_1C4A8FBB8(a1, (uint64_t)v32, (uint64_t)v30, a3, v31);
    if (v10 || *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) || (result = sub_1C4A8EA48(a1, a2, a3), (_DWORD)result))
    {
      v15 = *(_BYTE **)a1;
      v16 = *(_BYTE **)a1;
      if ((**(_BYTE **)a1 & 4) == 0)
      {
        v16 = *(_BYTE **)a1;
        if ((*((_WORD *)v15 + 22) & 8) != 0)
        {
          v16 = *(_BYTE **)a1;
          do
            v16 = (_BYTE *)*((_QWORD *)v16 + 1);
          while ((*((_WORD *)v16 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(*(_QWORD *)a1 + 24) + 40, (uint64_t)v15, *((_QWORD *)v16 + 1));
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C4A8C660(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  char v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  int v24;
  int v25;
  llvm::MachineFunction *v26[2];
  unint64_t v27[3];
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  unint64_t v36;

  v36 = *(_QWORD *)(a1 + 32);
  if (!sub_1C4A8E9C8(&v36))
  {
    if ((v36 & 0xFFFFFFFFFFFFFFF9) == 0 || (v36 & 4) == 0)
      return 0;
    v15 = 3;
    if ((v36 & 1) == 0)
      v15 = 19;
    v16 = v36 >> v15;
    v17 = (v36 & 2) != 0
        ? (v36 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v16) | 2
        : v36 & 0x8000000000000000 | (8 * v16) | 1;
    v27[0] = v17;
    if (!sub_1C4A8E9C8(v27))
      return 0;
    v19 = v36;
    v20 = 0x800000000000000;
    if ((v36 & 2) == 0)
      v20 = 0x8000000000000;
    if ((v20 & v36) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v18);
      v19 = v36;
    }
    if ((unsigned __int16)(v19 >> 3) > 4u)
      return 0;
  }
  v27[0] = a1;
  v27[1] = a2;
  v27[2] = 0;
  v28 = -1;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v35 = xmmword_1C676B850;
  sub_1C4A613B0(v27);
  v6 = *(unsigned int *)(a1 + 20);
  v7 = sub_1C4A73FE0(*(_DWORD *)(a1 + 20), a2, 0);
  if (HIDWORD(v7))
  {
    v23 = 129;
    v24 = 0;
    sub_1C5544694((uint64_t)a3, &v23, v7);
    v6 = *(unsigned int *)(*(_QWORD *)(v8 + 32) + 4);
  }
  v9 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  if (!(v6 >> 31))
    v9 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v6);
  v10 = *v9;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
    v10 = *(_QWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v26[0] = 0;
  v26[1] = 0;
  sub_1C4A5C7D4(v11, a2, a3, 1, (uint64_t *)0x81, 0x10u, (int *)&v23);
  v30 |= (unint64_t)(v25 != 1) << 11;
  v12 = v29;
  if (v29 == 1)
  {
    if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
    {
      result = sub_1C4A8EA48(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
    }
    sub_1C4A8FBB8(a1, (uint64_t)v27, (uint64_t)&v23, a3, v26);
  }
  else
  {
    sub_1C4A8FBB8(a1, (uint64_t)v27, (uint64_t)&v23, a3, v26);
    if (!v12 && *(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
    {
      result = sub_1C4A8EA48(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
    }
  }
  v21 = *(_BYTE **)a1;
  v22 = *(_BYTE **)a1;
  if ((**(_BYTE **)a1 & 4) == 0)
  {
    v22 = *(_BYTE **)a1;
    if ((*((_WORD *)v21 + 22) & 8) != 0)
    {
      v22 = *(_BYTE **)a1;
      do
        v22 = (_BYTE *)*((_QWORD *)v22 + 1);
      while ((*((_WORD *)v22 + 22) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(*(_QWORD *)a1 + 24) + 40, (uint64_t)v21, *((_QWORD *)v22 + 1));
  return 1;
}

uint64_t sub_1C4A8C8F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  char v26;
  unint64_t v27;
  int *v28;
  const char *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t result;
  uint64_t i;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t j;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  uint64_t v47;
  _BOOL4 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  const char *v74;
  int v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int64_t v85;
  int v86;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  llvm::MachineFunction *v95;
  unint64_t *v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  const char *v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  void *v136;
  unint64_t *v137;
  int *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  char v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  unsigned int v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD v159[2];
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v135 = *(_QWORD *)(a1 + 32);
  if (!sub_1C4A8E9C8(&v135))
  {
    if ((v135 & 0xFFFFFFFFFFFFFFF9) == 0 || (v135 & 4) == 0)
      return 0;
    v26 = 3;
    if ((v135 & 1) == 0)
      v26 = 19;
    v27 = v135 >> v26;
    v28 = (int *)((v135 & 2) != 0
                ? (v135 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v27) | 2
                : v135 & 0x8000000000000000 | (8 * v27) | 1);
    v138 = v28;
    if (!sub_1C4A8E9C8((unint64_t *)&v138))
      return 0;
    v30 = v135;
    v31 = 0x800000000000000;
    if ((v135 & 2) == 0)
      v31 = 0x8000000000000;
    if ((v31 & v135) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v29);
      v30 = v135;
    }
    if ((unsigned __int16)(v30 >> 3) >= 5u)
      return 0;
  }
  v134 = *(_DWORD *)(a1 + 20);
  v138 = &v134;
  LODWORD(v154) = v134;
  sub_1C49584A8(&v138, a2, (unsigned int *)&v154);
  v6 = v134;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = (uint64_t *)(v7 + 16 * (v134 & 0x7FFFFFFF) + 8);
  v9 = *(_QWORD *)(a2 + 272);
  if (v134 >= 0)
    v8 = (uint64_t *)(v9 + 8 * v134);
  v10 = *v8;
  if (!v10)
    return 0;
  v129 = v134 & 0x7FFFFFFF;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10 || (*(_BYTE *)(v10 + 3) & 1) == 0)
      return 0;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return 0;
  v12 = **(unsigned __int16 **)(v11 + 16);
  if (v12 != 66)
  {
    if (v12 == 45)
      goto LABEL_11;
LABEL_89:
    v24 = v6;
    goto LABEL_90;
  }
  for (i = 0; i != 64; i += 32)
  {
    v34 = (char *)&v154 + i;
    *((_DWORD *)v34 + 2) = 1;
    *(_QWORD *)v34 = 0;
    *((_DWORD *)v34 + 6) = 1;
    *((_QWORD *)v34 + 2) = 0;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 32);
  v140 = &v143;
  v141 = 4;
  LODWORD(v142) = 0;
  v138 = (int *)off_1E816DB00;
  v139 = &v143;
  v147 = v35;
  *(_QWORD *)&v148 = *(_QWORD *)(v35 + 40);
  *((_QWORD *)&v148 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 16) + 120))(*(_QWORD *)(v35 + 16));
  v149 = *(_QWORD *)(*(_QWORD *)v35 + 40) + 272;
  v150 = 6;
  v151 = 1;
  v36 = &v152;
  for (j = 15; j != 95; j += 5)
    LODWORD((&v138)[j]) = -1;
  sub_1C54EB4A0((uint64_t)&v138, (const char *)*(unsigned int *)(*(_QWORD *)(v11 + 32) + 36), (uint64_t)&v131);
  if (v155 >= 0x41 && v154)
    MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
  v154 = v131;
  LODWORD(v155) = DWORD2(v131);
  DWORD2(v131) = 0;
  if (v156 >= 0x41 && *((_QWORD *)&v155 + 1))
  {
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v155 + 1), 0x1000C8000313F17);
    *((_QWORD *)&v155 + 1) = v132;
    LODWORD(v156) = DWORD2(v132);
    DWORD2(v132) = 0;
    if (DWORD2(v131) >= 0x41 && (_QWORD)v131)
      MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
  }
  else
  {
    *((_QWORD *)&v155 + 1) = v132;
    LODWORD(v156) = DWORD2(v132);
  }
  sub_1C54EB4A0((uint64_t)&v138, (const char *)*(unsigned int *)(*(_QWORD *)(v11 + 32) + 68), (uint64_t)&v131);
  if (v157 >= 0x41 && *((_QWORD *)&v156 + 1))
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v156 + 1), 0x1000C8000313F17);
  *((_QWORD *)&v156 + 1) = v131;
  LODWORD(v157) = DWORD2(v131);
  DWORD2(v131) = 0;
  if (v159[0] >= 0x41u && v158)
  {
    MEMORY[0x1CAA32F9C](v158, 0x1000C8000313F17);
    v158 = v132;
    v159[0] = DWORD2(v132);
    DWORD2(v132) = 0;
    if (DWORD2(v131) >= 0x41 && (_QWORD)v131)
      MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
  }
  else
  {
    v158 = v132;
    v159[0] = DWORD2(v132);
  }
  v38 = v155;
  DWORD2(v160) = v155;
  if (v155 > 0x40)
  {
    v42 = (((unint64_t)v155 + 63) >> 3) & 0x3FFFFFF8;
    *(_QWORD *)&v160 = operator new[]();
    memcpy((void *)v160, (const void *)v154, v42);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v160);
    v38 = DWORD2(v160);
    v41 = v160;
  }
  else
  {
    v39 = ~v154;
    if ((_DWORD)v155)
      v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v155;
    else
      v40 = 0;
    v41 = v40 & v39;
    *(_QWORD *)&v160 = v40 & v39;
  }
  DWORD2(v160) = 0;
  LODWORD(v137) = v157;
  if (v157 <= 0x40)
  {
    v43 = ~*((_QWORD *)&v156 + 1);
    if ((_DWORD)v157)
      v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v157;
    else
      v44 = 0;
    v45 = v44 & v43;
    v136 = (void *)(v44 & v43);
    LODWORD(v137) = 0;
    goto LABEL_59;
  }
  v46 = (((unint64_t)v157 + 63) >> 3) & 0x3FFFFFF8;
  v136 = (void *)operator new[]();
  memcpy(v136, *((const void **)&v156 + 1), v46);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v136);
  v47 = v137;
  v45 = (unint64_t)v136;
  LODWORD(v137) = 0;
  if (v47 < 0x41)
  {
LABEL_59:
    v48 = (v45 & v41) == 0;
    goto LABEL_60;
  }
  v84 = 0;
  v85 = (unint64_t)(v47 + 63) >> 6;
  do
  {
    *(_QWORD *)(v45 + v84) &= *(_QWORD *)(v41 + v84);
    v84 += 8;
  }
  while (8 * v85 != v84);
  v86 = 0;
  do
  {
    if (v85-- < 1)
      break;
    v88 = *(_QWORD *)(v45 + 8 * v85);
    v86 += __clz(v88);
  }
  while (!v88);
  v48 = 0;
  v89 = v47 | 0xFFFFFFC0;
  if ((v47 & 0x3F) == 0)
    v89 = 0;
  if ((v47 - v86 - v89) <= 0x40)
    v48 = *(_QWORD *)v45 == 0;
  if (v45)
    MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
LABEL_60:
  if (v38 >= 0x41 && v41)
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  v138 = (int *)off_1E816DB00;
  v49 = v151;
  if ((v151 & 1) != 0)
  {
    v50 = 16;
  }
  else
  {
    v50 = v153;
    if (!v153)
      goto LABEL_75;
    v36 = v152;
  }
  v51 = 40 * v50;
  v52 = v36 + 2;
  do
  {
    if (*((_DWORD *)v52 - 4) <= 0xFFFFFFFD)
    {
      if (*((_DWORD *)v52 + 4) >= 0x41u)
      {
        v54 = v52[1];
        if (v54)
          MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
      }
      if (*(_DWORD *)v52 >= 0x41u)
      {
        v53 = *(v52 - 1);
        if (v53)
          MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
      }
    }
    v52 += 5;
    v51 -= 40;
  }
  while (v51);
  v49 = v151;
LABEL_75:
  if ((v49 & 1) == 0)
    MEMORY[0x1CAA32FB4](v152, 8);
  v138 = (int *)off_1E7FA1810;
  if (v140 != v139)
    free(v140);
  for (k = 0; k != -16; k -= 8)
  {
    v56 = (char *)&v154 + k * 4;
    if (v159[k] >= 0x41u)
    {
      v57 = *((_QWORD *)v56 + 6);
      if (v57)
        MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
    }
    if (*((_DWORD *)v56 + 10) >= 0x41u)
    {
      v58 = *((_QWORD *)v56 + 4);
      if (v58)
        MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
    }
  }
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 272);
  if (!v48)
    goto LABEL_89;
LABEL_11:
  v13 = *(_QWORD *)(v11 + 32);
  LODWORD(v131) = *(_DWORD *)(v13 + 36);
  v14 = v131;
  v15 = *(unsigned int *)(v13 + 68);
  v16 = (uint64_t *)(v7 + 16 * (v131 & 0x7FFFFFFF) + 8);
  v17 = (uint64_t *)(v9 + 8 * v131);
  if ((int)v131 >= 0)
    v16 = v17;
  v18 = *v16;
  if (v18)
  {
    if ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0)
    {
      v119 = *(_QWORD *)(v18 + 8);
      if (v119)
      {
        if (**(_WORD **)(v119 + 16) == 80 && *(_DWORD *)(v119 + 40) == 2)
        {
          v14 = *(_DWORD *)(*(_QWORD *)(v119 + 32) + 36);
          LODWORD(v131) = v14;
        }
      }
    }
  }
  v138 = (int *)&v131;
  LODWORD(v154) = v14;
  sub_1C4958594(&v138, a2, (unsigned int *)&v154);
  v19 = v131;
  v7 = *(_QWORD *)(a2 + 24);
  v20 = (uint64_t *)(v7 + 16 * (v131 & 0x7FFFFFFF) + 8);
  v9 = *(_QWORD *)(a2 + 272);
  if ((int)v131 >= 0)
    v20 = (uint64_t *)(v9 + 8 * v131);
  v21 = *v20;
  if (!v21)
    goto LABEL_17;
  if ((*(_BYTE *)(v21 + 3) & 1) != 0)
    goto LABEL_233;
  v21 = *(_QWORD *)(v21 + 24);
  if (v21)
  {
    if ((*(_BYTE *)(v21 + 3) & 1) == 0)
    {
      v21 = 0;
      goto LABEL_17;
    }
LABEL_233:
    v21 = *(_QWORD *)(v21 + 8);
  }
LABEL_17:
  v22 = (uint64_t *)(v7 + 16 * (v15 & 0x7FFFFFFF) + 8);
  if ((int)v15 >= 0)
    v22 = (uint64_t *)(v9 + 8 * v15);
  v23 = *v22;
  if (v23
    && ((*(_BYTE *)(v23 + 3) & 1) != 0 || (v23 = *(_QWORD *)(v23 + 24)) != 0 && (*(_BYTE *)(v23 + 3) & 1) != 0)
    && v21
    && (v120 = *(_QWORD *)(v23 + 8)) != 0
    && **(_WORD **)(v21 + 16) == 70
    && **(_WORD **)(v120 + 16) == 120)
  {
    v129 = v131 & 0x7FFFFFFF;
    LODWORD(v6) = v131;
  }
  else
  {
    v19 = v6;
  }
  v24 = v6;
  v6 = v19;
LABEL_90:
  v59 = (uint64_t *)(v7 + 16 * v129 + 8);
  v60 = (uint64_t *)(v9 + 8 * v6);
  if (v24 >= 0)
    v59 = v60;
  v61 = *v59;
  if (v61
    && ((*(_BYTE *)(v61 + 3) & 1) != 0 || (v61 = *(_QWORD *)(v61 + 24)) != 0 && (*(_BYTE *)(v61 + 3) & 1) != 0)
    && (v121 = *(_QWORD *)(v61 + 8)) != 0
    && **(_WORD **)(v121 + 16) == 70)
  {
    v122 = *(_QWORD *)(a1 + 48);
    v62 = 1;
    v123 = (1 << *(_BYTE *)(v122 + 34)) | *(_QWORD *)(v122 + 8);
    if ((v123 & -v123) != 1)
    {
      v125 = *(_QWORD *)(v122 + 24);
      v124 = (unint64_t *)(v122 + 24);
      if ((v125 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v127 = (unint64_t)(sub_1C4825F50(v124) + 7) >> 3;
        if ((_DWORD)v126 == 1)
      }
      else
      {
        LOBYTE(v127) = -1;
      }
      v62 = v127 & 1;
    }
  }
  else
  {
    v62 = 1;
  }
  v138 = (int *)a1;
  v139 = (uint64_t *)a2;
  v140 = 0;
  LODWORD(v141) = -1;
  v146 = 0;
  LOBYTE(v147) = 0;
  v143 = 0;
  v144 = 0;
  v148 = xmmword_1C676B850;
  sub_1C4A613B0(&v138);
  v63 = HIDWORD(v141);
  if (HIDWORD(v141) != 1
    || *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32)
    || (result = sub_1C4A8EA48(a1, a2, a3), (_DWORD)result))
  {
    v64 = v145;
    if (v145 == 3)
      v65 = v142 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
    else
      v65 = v142 & 0xFFFFFFFFFFFFF9FFLL;
    v142 = v65;
    if (!v62)
    {
      v154 = *(_QWORD *)(a1 + 32);
      v71 = sub_1C4825F50(&v154);
      if ((_DWORD)v70 == 1)
      HIDWORD(v72) = v71;
      LODWORD(v72) = v71 - 8;
      __asm { BR              X10 }
    }
    sub_1C4A5F4F8(v11, a2, (uint64_t)a3, 0x20u, (uint64_t)&v154);
    v131 = v155;
    v132 = v156;
    v130 = v154;
    v133 = v157;
    v66 = v65 | ((unint64_t)(DWORD2(v156) != 1) << 11);
    v142 = v66;
    v67 = sub_1C4A90388((uint64_t)&v131);
    v128 = DWORD1(v131);
    if ((DWORD1(v131) & 0x80000000) != 0
      && (v68 = DWORD1(v131) & 0x7FFFFFFF, v68 < *(_DWORD *)(a2 + 432)))
    {
      v69 = *(void **)(*(_QWORD *)(a2 + 424) + 8 * v68);
    }
    else
    {
      v69 = 0;
    }
    v73 = v67;
    v136 = v69;
    v75 = sub_1C4825F50((unint64_t *)&v136);
    if ((_DWORD)v74 == 1)
    if (v64 <= 4)
    {
      if (v64 == 3)
      {
        v81 = v63 == 0;
        v82 = 106;
        v83 = 102;
        goto LABEL_133;
      }
      if (!v64)
      {
        v76 = 0;
        v77 = v63 == 0;
        v78 = 193;
        v79 = 100;
LABEL_114:
        if (v77)
          v80 = v79;
        else
          v80 = v78;
LABEL_137:
        if ((unsigned __int16)v141 == 2)
          v90 = 54;
        else
          v90 = 59;
        v160 = xmmword_1C6616220;
        v91 = 2 * (v75 != 32);
        if (HIWORD(v73))
          v91 = 42;
        *(_QWORD *)&v160 = __PAIR64__(*((_DWORD *)&v160 + WORD1(v141) - 1), v90);
        DWORD2(v160) = 49;
        HIDWORD(v160) = v91;
        if (v76)
        {
          LODWORD(v161) = 12;
          v92 = 5;
        }
        else
        {
          v92 = 4;
        }
        v93 = sub_1C4C640F8(v80, v92, &v160);
        v95 = sub_1C55437B8(a3, v93);
        v96 = (unint64_t *)v94;
        v97 = (unint64_t *)a3[6];
        v98 = *(_QWORD *)(a3[5] + 40);
        *(_QWORD *)(v94 + 24) = v98;
        v99 = *(_QWORD *)(v98 + 32);
        v100 = *(unsigned int *)(v94 + 40);
        if ((_DWORD)v100)
        {
          v110 = *(_QWORD *)(v94 + 32);
          v111 = *(_QWORD *)(v99 + 40);
          v112 = 32 * v100;
          do
          {
            if (!*(_BYTE *)v110)
            {
              v113 = *(unsigned int *)(v110 + 4);
              if ((int)v113 >= 0)
                v114 = (uint64_t *)(*(_QWORD *)(v111 + 272) + 8 * v113);
              else
                v114 = (uint64_t *)(*(_QWORD *)(v111 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
              v115 = *v114;
              if (*v114)
              {
                v116 = *(_QWORD *)(v115 + 16);
                *(_QWORD *)(v115 + 16) = v110;
                *(_QWORD *)(v110 + 16) = v116;
                if ((*(_BYTE *)(v110 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v110 + 24) = v115;
                }
                else
                {
                  *(_QWORD *)(v110 + 24) = 0;
                  v114 = (uint64_t *)(v116 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v110 + 16) = v110;
                *(_QWORD *)(v110 + 24) = 0;
              }
              *v114 = v110;
            }
            v110 += 32;
            v112 -= 32;
          }
          while (v112);
        }
        v101 = *(_QWORD *)(v99 + 728);
        if (v101)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 24))(v101, v94);
        v102 = *v97 & 0xFFFFFFFFFFFFFFF8;
        *v96 = v102 | *v96 & 7;
        v96[1] = (unint64_t)v97;
        *(_QWORD *)(v102 + 8) = v96;
        *v97 = *v97 & 7 | (unint64_t)v96;
        v103 = a3[7];
        if (v103)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v103 + 24))(v103, v96);
        v136 = v95;
        v137 = v96;
        v104 = *((_QWORD *)&v148 + 1) & v66;
        v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32);
        v106 = *(_QWORD *)(v105 + 48);
        if (!v106)
        {
          v106 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 8) + 216))(*(_QWORD *)(v105 + 8), v105 + 128, v105);
          *(_QWORD *)(v105 + 48) = v106;
        }
        if (*(_BYTE *)(v106 + 560))
          v107 = v104 | 0x10000;
        else
          v107 = v104;
        v108 = v148 & v143;
        v109 = *(_DWORD *)(a1 + 16);
        *((_QWORD *)&v160 + 1) = 0;
        v161 = 0;
        if (v63)
        {
          LODWORD(v160) = 0;
          DWORD1(v160) = v109;
          v162 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
          v108 |= v144;
        }
        else
        {
          v162 = 0;
          LODWORD(v160) = 0x1000000;
          DWORD1(v160) = v109;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        }
        LODWORD(v160) = 1;
        *((_QWORD *)&v160 + 1) = 0;
        v161 = v108;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        LODWORD(v160) = 1;
        *((_QWORD *)&v160 + 1) = 0;
        v161 = v107;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        if ((v130 & 0xFF00000000) != 0)
        {
          LODWORD(v160) = 5;
          *((_QWORD *)&v160 + 1) = 0;
          LODWORD(v161) = v130;
        }
        else
        {
          LODWORD(v160) = 1;
          *((_QWORD *)&v160 + 1) = 0;
          v161 = 0;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        if (v73 < 0x10000)
        {
          *((_QWORD *)&v160 + 1) = 0;
          v161 = 0;
          LODWORD(v160) = 0;
          DWORD1(v160) = v128;
          v162 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
          LODWORD(v160) = 1;
          *((_QWORD *)&v160 + 1) = 0;
          v161 = 0;
        }
        else
        {
          LODWORD(v160) = 1;
          *((_QWORD *)&v160 + 1) = 0;
          v161 = (__int16)v73;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        LODWORD(v160) = 1;
        *((_QWORD *)&v160 + 1) = 0;
        v161 = v132;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        LODWORD(v160) = 1;
        *((_QWORD *)&v160 + 1) = 0;
        v161 = *((_QWORD *)&v131 + 1);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v160);
        llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v96, v95, *(llvm::MachineMemOperand **)(a1 + 48));
        sub_1C49400A8((uint64_t)&v136);
        if (v63 || *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) || (result = sub_1C4A8EA48(a1, a2, a3), (_DWORD)result))
        {
          v117 = *(_QWORD *)a1;
          v118 = *(_QWORD *)a1;
          if ((**(_BYTE **)a1 & 4) == 0)
          {
            v118 = *(_QWORD *)a1;
            if ((*(_WORD *)(v117 + 44) & 8) != 0)
            {
              v118 = *(_QWORD *)a1;
              do
                v118 = *(_QWORD *)(v118 + 8);
              while ((*(_WORD *)(v118 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(*(_QWORD *)a1 + 24) + 40, v117, *(_QWORD *)(v118 + 8));
          return 1;
        }
        return result;
      }
    }
    else if (v64 == 5 || v64 == 75)
    {
      v76 = 0;
      v77 = v63 == 0;
      v78 = 192;
      v79 = 98;
      goto LABEL_114;
    }
    v81 = v63 == 0;
    if (v64 == 80)
    {
      v82 = 191;
      v83 = 104;
    }
    else
    {
      v82 = 190;
      v83 = 103;
    }
LABEL_133:
    if (v81)
      v80 = v83;
    else
      v80 = v82;
    v76 = 1;
    goto LABEL_137;
  }
  return result;
}

uint64_t sub_1C4A8DD90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  int v26;
  int v27;
  llvm::MachineFunction *v28[2];
  unint64_t v29[3];
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  __int128 v37;
  unint64_t v38;

  v38 = *(_QWORD *)(a1 + 32);
  if (!sub_1C4A8E9C8(&v38))
  {
    if ((v38 & 0xFFFFFFFFFFFFFFF9) == 0 || (v38 & 4) == 0)
      return 0;
    v12 = 3;
    if ((v38 & 1) == 0)
      v12 = 19;
    v13 = v38 >> v12;
    v14 = (v38 & 2) != 0
        ? (v38 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v13) | 2
        : v38 & 0x8000000000000000 | (8 * v13) | 1;
    v29[0] = v14;
    if (!sub_1C4A8E9C8(v29))
      return 0;
    v16 = v38;
    v17 = 0x800000000000000;
    if ((v38 & 2) == 0)
      v17 = 0x8000000000000;
    if ((v17 & v38) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
      v16 = v38;
    }
    if ((unsigned __int16)(v16 >> 3) > 4u)
      return 0;
  }
  v29[0] = a1;
  v29[1] = a2;
  v29[2] = 0;
  v30 = -1;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v37 = xmmword_1C676B850;
  sub_1C4A613B0(v29);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = sub_1C4A905E4(v6, a3);
  v8 = sub_1C4A9074C(v6, a3);
  if (!HIDWORD(v7))
  {
    if (HIDWORD(v8))
    {
      LODWORD(v7) = v8;
    }
    else
    {
      v9 = sub_1C4A73FE0(v6, a2, 0);
      LODWORD(v7) = v6;
      if (HIDWORD(v9))
      {
        v25 = 257;
        v26 = 0;
        sub_1C5544694((uint64_t)a3, &v25, v9);
        LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 4);
      }
    }
  }
  v19 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  if ((v7 & 0x80000000) == 0)
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v7);
  v20 = *v19;
  if ((*(_BYTE *)(v20 + 3) & 1) == 0)
    v20 = *(_QWORD *)(v20 + 24);
  v21 = *(_QWORD *)(v20 + 8);
  v28[0] = 0;
  v28[1] = 0;
  sub_1C4A5C7D4(v21, a2, a3, 0, (uint64_t *)0x101, 0x20u, (int *)&v25);
  v32 |= (unint64_t)(v27 != 1) << 11;
  v22 = v31;
  if (v31 == 1)
  {
    if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
    {
      result = sub_1C4A8EA48(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
    }
    sub_1C4A8FBB8(a1, (uint64_t)v29, (uint64_t)&v25, a3, v28);
  }
  else
  {
    sub_1C4A8FBB8(a1, (uint64_t)v29, (uint64_t)&v25, a3, v28);
    if (!v22 && *(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
    {
      result = sub_1C4A8EA48(a1, a2, a3);
      if (!(_DWORD)result)
        return result;
    }
  }
  v23 = *(_BYTE **)a1;
  v24 = *(_BYTE **)a1;
  if ((**(_BYTE **)a1 & 4) == 0)
  {
    v24 = *(_BYTE **)a1;
    if ((*((_WORD *)v23 + 22) & 8) != 0)
    {
      v24 = *(_BYTE **)a1;
      do
        v24 = (_BYTE *)*((_QWORD *)v24 + 1);
      while ((*((_WORD *)v24 + 22) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(*(_QWORD *)a1 + 24) + 40, (uint64_t)v23, *((_QWORD *)v24 + 1));
  return 1;
}

void sub_1C4A8E068(uint64_t a1, unsigned int a2, int a3, llvm::MachineMemOperand *a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v10 = **(void ***)a1;
  if (a2 != 1)
    v10 = (void *)sub_1C4953AD0(a2, (unint64_t)v10);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 80))
  {
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(unsigned int *)(v11 + 40);
    v13 = *(unsigned __int8 **)(v11 + 32);
    if ((_DWORD)v12)
    {
      v14 = 0;
      v15 = v13;
      while (1)
      {
        v16 = *v15;
        v15 += 32;
        if (v16 == 17)
          break;
        if (v12 == ++v14)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      LODWORD(v14) = -1;
    }
    v17 = *(_DWORD *)&v13[32 * v14 + 16];
    v18 = *(_QWORD *)(a1 + 16);
    v47 = v10;
    LODWORD(v48) = 0;
    v19 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, 117, &v47, 1, 0, 0, 0);
    v21 = v20;
    LODWORD(v50) = 17;
    v51 = 0;
    LODWORD(v52) = v17;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v50);
    v51 = 0;
    v52 = 0;
    LODWORD(v50) = 0;
    HIDWORD(v50) = a3;
    v53 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v50);
    v51 = 0;
    v52 = 0;
    LODWORD(v50) = 0;
    HIDWORD(v50) = HIDWORD(a5);
    v53 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v50);
    v51 = 0;
    v52 = 0;
    LODWORD(v50) = 0;
    HIDWORD(v50) = a5;
    v53 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v50);
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 64);
    v51 = 0;
    v52 = 0;
    LODWORD(v50) = 0;
    HIDWORD(v50) = v22;
    v53 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v50);
    llvm::MachineInstr::addMemOperand(v21, v19, a4);
    v23 = *((_QWORD *)v21 + 4);
  }
  else
  {
    v24 = *(_QWORD **)(a1 + 16);
    v47 = v10;
    LODWORD(v48) = 0;
    LODWORD(v50) = a3;
    LODWORD(v52) = 0;
    sub_1C55464EC(v24, 0x5Au, (int *)&v47, (int *)&v50, a4);
    v23 = *(_QWORD *)(v25 + 32);
  }
  v26 = *(_DWORD *)(v23 + 4);
  if (a2 == 1)
  {
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(unsigned int *)(v27 + 8);
    if (v28 >= *(_DWORD *)(v27 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27, v27 + 16, v28 + 1, 4);
      LODWORD(v28) = *(_DWORD *)(v27 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v27 + 4 * v28) = v26;
    ++*(_DWORD *)(v27 + 8);
    return;
  }
  v29 = *(void ***)a1;
  v47 = v49;
  v48 = 0x800000000;
  sub_1C495A254((unsigned int *)&v47, a2, (uint64_t)*v29);
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t *)v47;
  v32 = v48;
  v50 = &v52;
  v51 = 0x800000000;
  if (v48 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)&v52, v48, 16);
    v33 = v51;
    v34 = (uint64_t *)v50;
  }
  else
  {
    if (!(_DWORD)v48)
    {
      v38 = 0;
      v39 = &v52;
      goto LABEL_22;
    }
    v33 = 0;
    v34 = &v52;
  }
  v35 = 8 * v32;
  v36 = &v34[2 * v33];
  do
  {
    v37 = *v31++;
    *v36 = v37;
    *((_DWORD *)v36 + 2) = 0;
    v36 += 2;
    v35 -= 8;
  }
  while (v35);
  v38 = v51;
  v39 = (uint64_t *)v50;
LABEL_22:
  LODWORD(v51) = v38 + v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v30 + 32))(v30, 74, v39);
  v41 = v40;
  if (v50 == &v52)
  {
    if (a2)
      goto LABEL_24;
  }
  else
  {
    free(v50);
    if (a2)
    {
LABEL_24:
      v42 = 0;
      v43 = 32 * a2;
      do
      {
        v44 = *(_QWORD *)(a1 + 32);
        v45 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + v42 + 4);
        v46 = *(unsigned int *)(v44 + 8);
        if (v46 >= *(unsigned int *)(v44 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v44 + 16, v46 + 1, 4);
          v46 = *(unsigned int *)(v44 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v44 + 4 * v46) = v45;
        ++*(_DWORD *)(v44 + 8);
        v42 += 32;
      }
      while (v43 != v42);
    }
  }
  if (v47 != v49)
    free(v47);
}

void sub_1C4A8E434(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int GenericVirtualRegister;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v44 = a4;
  v8 = sub_1C4825F50(&v44);
  if ((_DWORD)v7 == 1)
  v9 = (v8 >> 3);
  if (!(a3 % v9))
  {
    v11 = *(_QWORD *)a1;
    LODWORD(v50) = a2;
    LODWORD(v51) = 1;
    v45 = a3;
    v47 = 3;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 313, &v50, 1, &v45, 1, 0);
    return;
  }
  v50 = &v52;
  v51 = 0x200000000;
  if ((a3 & 1) != 0)
  {
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), "", 0);
    v13 = *(_QWORD *)a1;
    v10 = 1;
    v43 = GenericVirtualRegister;
    LODWORD(v53) = GenericVirtualRegister;
    v54 = 1;
    v45 = a3 - 1;
    v47 = 3;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 313, &v53, 1, &v45, 1, 0);
  }
  else
  {
    v43 = 0;
    v10 = 0;
  }
  if ((uint64_t)(v9 + a3) >= a3 + v10 + 2)
  {
    do
    {
      v16 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), "", 0);
      v17 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)&v52, v51 + 1, 4);
        v17 = v51;
      }
      *((_DWORD *)v50 + v17) = v16;
      LODWORD(v51) = v51 + 1;
      v18 = *(_QWORD *)a1;
      LODWORD(v53) = v16;
      v54 = 1;
      v45 = a3 + v10;
      v47 = 3;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 313, &v53, 1, &v45, 1, 0);
      v14 = v10 + 2;
      v19 = (_DWORD)a3 + 4 + v10;
      v10 += 2;
    }
    while ((uint64_t)(v9 + a3) >= v19);
  }
  else
  {
    v14 = v10;
  }
  if ((a3 & 1) != 0)
  {
    v15 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), "", 0);
    v20 = *(_QWORD *)a1;
    LODWORD(v53) = v15;
    v54 = 1;
    v45 = a3 + v14;
    v47 = 3;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 313, &v53, 1, &v45, 1, 0);
  }
  else
  {
    v15 = 0;
  }
  v21 = *(_QWORD *)a1;
  v45 = **(_QWORD **)(a1 + 16);
  v46 = 0;
  sub_1C5544694(v21, &v45, 8);
  if (v43)
  {
    v23 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 4);
    v24 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v43;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 128, &v53, 1, &v45, 2, 0);
    v26 = *(_DWORD *)(*(_QWORD *)(v25 + 32) + 4);
    v27 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v15;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 127, &v53, 1, &v45, 2, 0);
    v29 = *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4);
    if (!(_DWORD)v51)
      goto LABEL_22;
    v30 = *(_DWORD *)v50;
    v31 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v30;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 127, &v53, 1, &v45, 2, 0);
    v33 = *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4);
    v34 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v33;
    v47 = 0;
    v48 = v26;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 66, &v53, 1, &v45, 2, 0);
    v26 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
    v36 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v30;
    v47 = 0;
    v48 = v23;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 128, &v53, 1, &v45, 2, 0);
    v38 = *(_DWORD *)(*(_QWORD *)(v37 + 32) + 4);
    v39 = *(_QWORD *)a1;
    v53 = **(_QWORD **)(a1 + 16);
    v54 = 0;
    LODWORD(v45) = v38;
    v47 = 0;
    v48 = v29;
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 66, &v53, 1, &v45, 2, 0);
    v41 = *(_DWORD **)(v40 + 32);
  }
  else
  {
    v41 = v50;
    v26 = *(_DWORD *)v50;
  }
  v29 = v41[1];
LABEL_22:
  v42 = *(_QWORD *)a1;
  LODWORD(v53) = a2;
  v54 = 1;
  LODWORD(v45) = v26;
  v47 = 0;
  v48 = v29;
  v49 = 0;
  (*(void (**)(void))(*(_QWORD *)v42 + 32))();
  if (v50 != &v52)
    free(v50);
}

BOOL sub_1C4A8E9C8(unint64_t *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v5;
  const char *v6;

  v2 = sub_1C4825F50(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    return 0;
  if ((_DWORD)v3 == 1)
  {
    v5 = v2;
    if (v5 == 16)
      return 1;
    v2 = v5;
  }
  else if (v2 == 16)
  {
    return 1;
  }
  return v2 == 32;
}

uint64_t sub_1C4A8EA48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  llvm::MachineInstr *v16;
  llvm::MachineInstr *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  unint64_t v58;
  uint64_t k;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t *v74;
  int v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  _DWORD *v86;
  const char *v88;
  const char *v89;
  unint64_t v90;
  uint64_t j;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::MachineFunction *v120;
  llvm::MachineInstr *v121;
  llvm::MachineInstr *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  int v137;
  int v138;
  unint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _DWORD v152[6];
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  _DWORD v157[4];
  void *v158[2];
  _QWORD v159[4];
  void *v160;
  uint64_t v161;
  _DWORD v162[4];
  void *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) - 1;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v153 = *(_QWORD *)(a1 + 32);
  v154 = v8;
  if (v6 >= 3)
    v9 = v5;
  else
    v9 = v7;
  if (v6 >= 3)
    v10 = v7;
  else
    v10 = v5;
  if (v6 >= 3)
    v11 = (unint64_t *)&v154;
  else
    v11 = (unint64_t *)&v153;
  if (v6 >= 3)
    v12 = (unint64_t *)&v153;
  else
    v12 = (unint64_t *)&v154;
  v13 = *v11;
  if (*v11 == 9 || v13 == 65)
  {
    if (*v12 == 129)
    {
      v14 = 1;
      LODWORD(v158[0]) = v10;
      LODWORD(v158[1]) = 1;
      LODWORD(v163) = v9;
      LODWORD(v165) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 118, v158, 1, &v163, 1, 0);
      return v14;
    }
LABEL_23:
    v151 = v10;
    v20 = sub_1C4825F50(v11);
    v22 = v21;
    v23 = sub_1C4825F50(v12);
    v25 = *v11;
    if (v20 == v23 && v22 == (_DWORD)v24)
    {
      v36 = *v12;
      if ((v25 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v11 & 6) == 2 && v36 == 16777236)
      {
        v158[0] = (void *)513;
        LODWORD(v158[1]) = 0;
        LODWORD(v163) = v9;
        LODWORD(v165) = 0;
        v14 = 1;
        v52 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 80, v158, 1, &v163, 1, 0);
        LODWORD(v158[0]) = v151;
        LODWORD(v158[1]) = 1;
        v163 = v52;
        v164 = v53;
        LODWORD(v165) = 1;
        sub_1C5546EF4(a3, (uint64_t *)v158, (int *)&v163);
        return v14;
      }
      if (v25 == 16777236 && (v36 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v12 & 6) == 2)
      {
        v158[0] = (void *)513;
        LODWORD(v158[1]) = 0;
        LODWORD(v163) = v9;
        LODWORD(v165) = 0;
        v54 = (void *)sub_1C5546EF4(a3, (uint64_t *)v158, (int *)&v163);
        v14 = 1;
        LODWORD(v158[0]) = v151;
        LODWORD(v158[1]) = 1;
        v163 = v54;
        v164 = v55;
        LODWORD(v165) = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 81, v158, 1, &v163, 1, 0);
        return v14;
      }
      v14 = 1;
      LODWORD(v158[0]) = v151;
      goto LABEL_76;
    }
    v27 = *v12;
    if ((v25 != 16777244 || v27 != 16777252) && (v25 != 8388636 || v27 != 8388644))
    {
      if ((v25 != 16777252 || v27 != 16777244) && (v25 != 8388644 || v27 != 8388636))
      {
        v14 = 0;
        if ((v25 & 0xFFFFFFFFFFFFFFF9) == 0)
          return v14;
        if ((v25 & 4) == 0)
          return v14;
        v14 = 0;
        if ((v27 & 0xFFFFFFFFFFFFFFF9) == 0 || (v27 & 4) == 0)
          return v14;
        if ((v25 & 2) != 0)
          v32 = 0x800000000000000;
        else
          v32 = 0x8000000000000;
        if ((v32 & v25) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          v25 = *v11;
          v27 = *v12;
        }
        if ((v27 & 2) != 0)
          v33 = 0x800000000000000;
        else
          v33 = 0x8000000000000;
        if ((v33 & v27) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          v27 = *v12;
        }
        if ((unsigned __int16)(v25 >> 3) == (unsigned __int16)(v27 >> 3))
          return 0;
        v34 = *v11;
        if ((*v11 & 1) != 0)
        {
          v35 = (v34 >> 3);
        }
        else if ((v34 & 4) != 0)
        {
          v35 = (v34 & 2) != 0 ? (unsigned __int16)(v34 >> 19) : (v34 >> 19);
        }
        else
        {
          v35 = (unsigned __int16)(v34 >> 3);
        }
        if ((v27 & 1) != 0)
        {
          v107 = (v27 >> 3);
        }
        else if ((v27 & 4) != 0)
        {
          v107 = (v27 & 2) != 0 ? (unsigned __int16)(v27 >> 19) : (v27 >> 19);
        }
        else
        {
          v107 = (unsigned __int16)(v27 >> 3);
        }
        if ((v35 != 8) != (v107 == 8))
          return 0;
        v108 = 0x800000000000000;
        if ((v34 & 2) == 0)
          v108 = 0x8000000000000;
        if ((v108 & v34) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          v34 = *v11;
        }
        if ((unsigned __int16)(v34 >> 3) > 4u)
          return 0;
        v109 = *v12;
        v110 = 0x800000000000000;
        if ((*v12 & 2) == 0)
          v110 = 0x8000000000000;
        if ((v110 & v109) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          v109 = *v12;
        }
        if ((unsigned __int16)(v109 >> 3) > 4u)
          return 0;
        v111 = *v11;
        if ((*v11 & 2) != 0)
          return 0;
        v112 = 3;
        if ((v111 & 1) == 0)
          v112 = 19;
        v113 = v111 & 0x8000000000000000 | (8 * (v111 >> v112));
        if ((v109 & 2) == 0 && v113 == 128)
        {
          v114 = 3;
          if ((v109 & 1) == 0)
            v114 = 19;
          if ((v109 & 0x8000000000000000 | (8 * (v109 >> v114))) == 0x40)
          {
            if ((v109 & 0x8000000000000) != 0)
            {
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
              v109 = *v12;
            }
            if ((v109 & 0x7FFF8) == 0x18)
            {
              LODWORD(v158[0]) = v9;
              LODWORD(v159[0]) = 0;
              v163 = &v165;
              v165 = 129;
              v166 = 0;
              v167 = 129;
              v168 = 0;
              v164 = 0x800000002;
              (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 74, &v165, 2, v158, 1, 0);
              v116 = v115;
              if (v163 != &v165)
                free(v163);
              v158[0] = (void *)4194324;
              LODWORD(v158[1]) = 0;
              LODWORD(v163) = *(_DWORD *)(*(_QWORD *)(v116 + 32) + 4);
              LODWORD(v165) = 0;
              sub_1C5546EF4(a3, (uint64_t *)v158, (int *)&v163);
              LODWORD(v158[0]) = *(_DWORD *)(*(_QWORD *)(v117 + 32) + 4);
              LODWORD(v159[0]) = 0;
              v163 = &v165;
              v165 = 65;
              v166 = 0;
              v167 = 65;
              v168 = 0;
              v164 = 0x800000002;
              (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 74, &v165, 2, v158, 1, 0);
              v119 = v118;
              if (v163 != &v165)
                free(v163);
              v160 = (void *)129;
              LODWORD(v161) = 0;
              LODWORD(v158[0]) = *(_DWORD *)(*(_QWORD *)(v116 + 32) + 36);
              LODWORD(v159[0]) = 0;
              v120 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 259, &v160, 1, v158, 1, 0);
              v122 = v121;
              LODWORD(v163) = 1;
              v164 = 0;
              v165 = 8;
              llvm::MachineInstr::addOperand(v121, v120, (const llvm::MachineOperand *)&v163);
              v158[0] = (void *)65;
              LODWORD(v158[1]) = 0;
              LODWORD(v163) = *(_DWORD *)(*((_QWORD *)v122 + 4) + 4);
              LODWORD(v165) = 0;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 119, v158, 1, &v163, 1, 0);
              v123 = 0;
              LODWORD(v158[0]) = v151;
              LODWORD(v158[1]) = 1;
              v160 = (void *)__PAIR64__(*(_DWORD *)(*(_QWORD *)(v119 + 32) + 36), *(_DWORD *)(*(_QWORD *)(v119 + 32) + 4));
              LODWORD(v161) = *(_DWORD *)(*(_QWORD *)(v124 + 32) + 4);
              v163 = &v165;
              v164 = 0x800000000;
              v125 = 16;
              do
              {
                v126 = (_DWORD *)((char *)&v163 + v125);
                *v126 = *(_DWORD *)((char *)&v160 + v123);
                v126[4] = 0;
                v125 += 24;
                v123 += 4;
              }
              while (v123 != 12);
              LODWORD(v164) = v164 + 3;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *))(*a3 + 32))(a3, 77, v158, 1, &v165);
              v86 = v163;
              if (v163 == &v165)
                return 1;
              goto LABEL_124;
            }
            goto LABEL_237;
          }
          return 0;
        }
        v14 = 0;
        if ((v109 & 2) != 0 || v113 != 64)
          return v14;
        v127 = 3;
        if ((v109 & 1) == 0)
          v127 = 19;
        if ((v109 & 0x8000000000000000 | (8 * (v109 >> v127))) != 0x80)
          return 0;
        if ((v111 & 0x8000000000000) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          v111 = *v11;
        }
        if ((v111 & 0x7FFF8) != 0x18)
        {
LABEL_237:
          v14 = 1;
          LODWORD(v158[0]) = v151;
LABEL_76:
          LODWORD(v158[1]) = 1;
          LODWORD(v163) = v9;
          LODWORD(v165) = 0;
          sub_1C5546EF4(a3, (uint64_t *)v158, (int *)&v163);
          return v14;
        }
        v128 = 0;
        *(int64x2_t *)v158 = vdupq_n_s64(0x41uLL);
        v159[0] = 65;
        LODWORD(v160) = v9;
        v162[0] = 0;
        v163 = &v165;
        v164 = 0x800000000;
        v129 = 16;
        do
        {
          v130 = (char *)&v163 + v129;
          *(_QWORD *)v130 = v158[v128];
          *((_DWORD *)v130 + 2) = 0;
          v129 += 16;
          ++v128;
        }
        while (v128 != 3);
        LODWORD(v164) = v164 + 3;
        (*(void (**)(uint64_t *, uint64_t, void *))(*a3 + 32))(a3, 74, v163);
        v132 = v131;
        if (v163 != &v165)
          free(v163);
        v163 = (void *)65;
        LODWORD(v164) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 68, &v163, 1, 0, 0, 0);
        v134 = v133;
        LODWORD(v135) = 0;
        v158[0] = v159;
        v158[1] = (void *)0x400000000;
        for (i = 4; i != 100; i += 32)
        {
          v137 = *(_DWORD *)(*(_QWORD *)(v132 + 32) + i);
          if (v135 >= HIDWORD(v158[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v158, (uint64_t)v159, v135 + 1, 4);
            LODWORD(v135) = v158[1];
          }
          *((_DWORD *)v158[0] + v135) = v137;
          v135 = ++LODWORD(v158[1]);
        }
        v138 = *(_DWORD *)(*(_QWORD *)(v134 + 32) + 4);
        if (v135 >= HIDWORD(v158[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v158, (uint64_t)v159, v135 + 1, 4);
          LODWORD(v135) = v158[1];
        }
        *((_DWORD *)v158[0] + v135) = v138;
        ++LODWORD(v158[1]);
        v139 = sub_1C4953AD0(4, 0x41uLL);
        LODWORD(v160) = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, v139, "", 0);
        LODWORD(v161) = 1;
        v140 = (int *)v158[0];
        v141 = LODWORD(v158[1]);
        v163 = &v165;
        v164 = 0x800000000;
        if (LODWORD(v158[1]) >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)&v165, LODWORD(v158[1]), 24);
          v142 = v164;
          v143 = (uint64_t *)v163;
        }
        else
        {
          if (!LODWORD(v158[1]))
          {
            v148 = 0;
            v143 = &v165;
LABEL_233:
            LODWORD(v164) = v148 + v141;
            (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *))(*a3 + 32))(a3, 77, &v160, 1, v143);
            v150 = v149;
            if (v163 != &v165)
              free(v163);
            v9 = *(_DWORD *)(*(_QWORD *)(v150 + 32) + 4);
            if (v158[0] != v159)
              free(v158[0]);
            goto LABEL_237;
          }
          v142 = 0;
          v143 = &v165;
        }
        v144 = 3 * v142;
        v145 = 4 * v141;
        do
        {
          v146 = *v140++;
          v147 = &v143[v144];
          *(_DWORD *)v147 = v146;
          *((_DWORD *)v147 + 4) = 0;
          v144 += 3;
          v145 -= 4;
        }
        while (v145);
        v148 = v164;
        goto LABEL_233;
      }
      v160 = v162;
      v161 = 0x400000000;
      v155 = v157;
      v156 = 0x300000000;
      v76 = 3;
      if ((v25 & 1) == 0)
        v76 = 19;
      v158[0] = v159;
      v158[1] = (void *)0x400000000;
      sub_1C495A254((unsigned int *)v158, (unsigned __int16)(v25 >> 3), v25 & 0x8000000000000000 | (8 * (v25 >> v76)) | 1);
      v77 = (uint64_t *)v158[0];
      v78 = LODWORD(v158[1]);
      v152[0] = v9;
      v152[4] = 0;
      v163 = &v165;
      v164 = 0x800000000;
      if (LODWORD(v158[1]) >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)&v165, LODWORD(v158[1]), 16);
        v79 = v164;
        v80 = (uint64_t *)v163;
      }
      else
      {
        if (!LODWORD(v158[1]))
        {
          v84 = 0;
          v85 = &v165;
          goto LABEL_128;
        }
        v79 = 0;
        v80 = &v165;
      }
      v81 = 8 * v78;
      v82 = &v80[2 * v79];
      do
      {
        v83 = *v77++;
        *v82 = v83;
        *((_DWORD *)v82 + 2) = 0;
        v82 += 2;
        v81 -= 8;
      }
      while (v81);
      v84 = v164;
      v85 = (uint64_t *)v163;
LABEL_128:
      LODWORD(v164) = v84 + v78;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a3 + 32))(a3, 74, v85);
      v89 = v88;
      if (v163 != &v165)
        free(v163);
      v90 = 0;
      for (j = 4; ; j += 32)
      {
        v92 = *v11;
        if ((*v11 & 2) != 0)
          v93 = 0x800000000000000;
        else
          v93 = 0x8000000000000;
        if ((v93 & v92) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v88);
          v92 = *v11;
        }
        if (v90 >= (unsigned __int16)(v92 >> 3))
          break;
        v94 = *v12;
        if ((*v12 & 2) != 0)
          v95 = 0x800000000000000;
        else
          v95 = 0x8000000000000;
        if ((v95 & v94) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v88);
          v94 = *v12;
        }
        if (v90 < (unsigned __int16)(v94 >> 3))
        {
          v96 = *(_DWORD *)(*((_QWORD *)v89 + 4) + j);
          v97 = v156;
          if (v156 >= (unint64_t)HIDWORD(v156))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, (uint64_t)v157, v156 + 1, 4);
            v97 = v156;
          }
          *((_DWORD *)v155 + v97) = v96;
          LODWORD(v156) = v156 + 1;
        }
        ++v90;
      }
      v152[0] = v151;
      v152[2] = 1;
      v98 = (int *)v155;
      v99 = v156;
      v163 = &v165;
      v164 = 0x800000000;
      if (v156 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)&v165, v156, 24);
        v100 = v164;
        v101 = (uint64_t *)v163;
      }
      else
      {
        if (!(_DWORD)v156)
        {
          v106 = 0;
          v101 = &v165;
LABEL_154:
          LODWORD(v164) = v106 + v99;
          (*(void (**)(uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t *))(*a3 + 32))(a3, 77, v152, 1, v101);
          if (v163 != &v165)
            free(v163);
          if (v158[0] != v159)
            free(v158[0]);
          if (v155 != v157)
            free(v155);
          v86 = v160;
          goto LABEL_123;
        }
        v100 = 0;
        v101 = &v165;
      }
      v102 = 3 * v100;
      v103 = 4 * v99;
      do
      {
        v104 = *v98++;
        v105 = &v101[v102];
        *(_DWORD *)v105 = v104;
        *((_DWORD *)v105 + 4) = 0;
        v102 += 3;
        v103 -= 4;
      }
      while (v103);
      v106 = v164;
      goto LABEL_154;
    }
    v160 = v162;
    v161 = 0x400000000;
    v41 = 3;
    if ((v25 & 1) == 0)
      v41 = 19;
    v42 = (void *)(v25 & 0x8000000000000000 | (8 * (v25 >> v41)) | 1);
    v158[0] = v159;
    v158[1] = (void *)0x400000000;
    sub_1C495A254((unsigned int *)v158, (unsigned __int16)(v25 >> 3), (uint64_t)v42);
    v43 = (uint64_t *)v158[0];
    v44 = LODWORD(v158[1]);
    LODWORD(v155) = v9;
    v157[0] = 0;
    v163 = &v165;
    v164 = 0x800000000;
    if (LODWORD(v158[1]) >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)&v165, LODWORD(v158[1]), 16);
      v45 = v164;
      v46 = (uint64_t *)v163;
    }
    else
    {
      if (!LODWORD(v158[1]))
      {
        v50 = 0;
        v51 = &v165;
        goto LABEL_89;
      }
      v45 = 0;
      v46 = &v165;
    }
    v47 = 8 * v44;
    v48 = &v46[2 * v45];
    do
    {
      v49 = *v43++;
      *v48 = v49;
      *((_DWORD *)v48 + 2) = 0;
      v48 += 2;
      v47 -= 8;
    }
    while (v47);
    v50 = v164;
    v51 = (uint64_t *)v163;
LABEL_89:
    LODWORD(v164) = v50 + v44;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a3 + 32))(a3, 74, v51);
    v57 = v56;
    if (v163 != &v165)
      free(v163);
    v58 = 0;
    for (k = 4; ; k += 32)
    {
      v60 = *v11;
      if ((*v11 & 2) != 0)
        v61 = 0x800000000000000;
      else
        v61 = 0x8000000000000;
      if ((v61 & v60) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v56);
        v60 = *v11;
      }
      if (v58 >= (unsigned __int16)(v60 >> 3))
        break;
      v62 = *(_DWORD *)(*((_QWORD *)v57 + 4) + k);
      v63 = v161;
      if (v161 >= (unint64_t)HIDWORD(v161))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, (uint64_t)v162, v161 + 1, 4);
        v63 = v161;
      }
      *((_DWORD *)v160 + v63) = v62;
      LODWORD(v161) = v161 + 1;
      ++v58;
    }
    v163 = v42;
    LODWORD(v164) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a3 + 32))(a3, 68, &v163, 1, 0, 0, 0);
    v65 = *(_DWORD *)(*(_QWORD *)(v64 + 32) + 4);
    v66 = v161;
    if (v161 >= HIDWORD(v161))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, (uint64_t)v162, v161 + 1, 4);
      v66 = v161;
    }
    *((_DWORD *)v160 + v66) = v65;
    v67 = (v161 + 1);
    LODWORD(v161) = v67;
    LODWORD(v155) = v151;
    LODWORD(v156) = 1;
    v68 = (int *)v160;
    v163 = &v165;
    v164 = 0x800000000;
    if (v67 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)&v165, v67, 24);
      v69 = v164;
      v70 = (uint64_t *)v163;
    }
    else
    {
      if (!(_DWORD)v67)
      {
        v75 = 0;
        v70 = &v165;
LABEL_118:
        LODWORD(v164) = v75 + v67;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *))(*a3 + 32))(a3, 77, &v155, 1, v70);
        if (v163 != &v165)
          free(v163);
        if (v158[0] != v159)
          free(v158[0]);
        v86 = v160;
LABEL_123:
        if (v86 == v162)
          return 1;
LABEL_124:
        free(v86);
        return 1;
      }
      v69 = 0;
      v70 = &v165;
    }
    v71 = 3 * v69;
    v72 = 4 * v67;
    do
    {
      v73 = *v68++;
      v74 = &v70[v71];
      *(_DWORD *)v74 = v73;
      *((_DWORD *)v74 + 4) = 0;
      v71 += 3;
      v72 -= 4;
    }
    while (v72);
    v75 = v164;
    goto LABEL_118;
  }
  if (v13 != 129)
    goto LABEL_23;
  if (*v12 == 9)
  {
    v14 = 1;
    LODWORD(v158[0]) = v10;
    LODWORD(v158[1]) = 1;
    LODWORD(v163) = v9;
    LODWORD(v165) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 119, v158, 1, &v163, 1, 0);
    return v14;
  }
  if (*v12 != 65)
    goto LABEL_23;
  v158[0] = (void *)129;
  LODWORD(v158[1]) = 0;
  LODWORD(v163) = v9;
  LODWORD(v165) = 0;
  v14 = 1;
  v15 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 259, v158, 1, &v163, 1, 0);
  v17 = v16;
  v19 = sub_1C4825F50(v12);
  if ((_DWORD)v18 == 1)
  LODWORD(v163) = 1;
  v164 = 0;
  v165 = v19;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v163);
  LODWORD(v158[0]) = v10;
  LODWORD(v158[1]) = 1;
  v163 = v15;
  v164 = (uint64_t)v17;
  LODWORD(v165) = 1;
  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 119, v158, 1, &v163, 1, 0);
  return v14;
}

uint64_t sub_1C4A8FBB8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, llvm::MachineFunction **a5)
{
  int v10;
  uint64_t v11;
  _QWORD *v12;
  void (**v13)(_QWORD *);
  __int128 *v14;
  void (**v15)(__int128 *);
  _BOOL4 v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  _BOOL4 v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BOOL4 v55;
  llvm::MachineInstr *v56;
  llvm::MachineFunction *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::MachineInstr *v60;
  llvm::MachineFunction *v61;
  llvm::MachineInstr *v62;
  llvm::MachineFunction *v63;
  int v64;
  llvm::MachineInstr *v65;
  llvm::MachineFunction *v66;
  int v67;
  uint64_t v68;
  llvm::MachineInstr *v69;
  llvm::MachineFunction *v70;
  uint64_t v71;
  llvm::MachineInstr *v72;
  llvm::MachineFunction *v73;
  llvm::MachineInstr *v74;
  llvm::MachineFunction *v75;
  int v76;
  llvm::MachineInstr *v77;
  llvm::MachineFunction *v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  llvm::MachineMemOperand *v82;
  unint64_t v83;
  uint64_t v84;
  __int16 v85;
  llvm::MachineMemOperand *v86;
  unsigned __int8 v88;
  _BOOL4 v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int64_t v103;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  _BOOL4 v111;
  uint64_t *v112;
  unsigned int v113;
  char v114;
  _QWORD v115[3];
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)a3;
  v11 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)&v117 = &off_1E816EFF0;
  *((_QWORD *)&v117 + 1) = sub_1C554C7E0;
  v119 = &v117;
  v115[0] = &off_1E816F038;
  v115[1] = sub_1C554C7F8;
  v116 = v115;
  sub_1C554C3AC(v10, v11, (uint64_t)&v117, (uint64_t)v115, 1, 0, &v112);
  v12 = v116;
  if (v116 == v115)
  {
    v13 = (void (**)(_QWORD *))(v115[0] + 32);
    v12 = v115;
LABEL_3:
    (*v13)(v12);
    goto LABEL_4;
  }
  if (v116)
  {
    v13 = (void (**)(_QWORD *))(*v116 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v14 = v119;
  if (v119 == &v117)
  {
    v15 = (void (**)(__int128 *))(v117 + 32);
    v14 = &v117;
LABEL_6:
    (*v15)(v14);
    goto LABEL_7;
  }
  if (v119)
  {
    v15 = (void (**)(__int128 *))(*(_QWORD *)v119 + 40);
    goto LABEL_6;
  }
LABEL_7:
  v110 = a1;
  if (!v114)
  {
    v109 = 0;
LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  if (v113 > 0x40)
  {
    v102 = 0;
    v103 = ((unint64_t)v113 + 63) >> 6;
    do
    {
      if (v103-- < 1)
        break;
      v105 = v112[v103];
      v102 += __clz(v105);
    }
    while (!v105);
    v106 = v113 | 0xFFFFFFC0;
    if ((v113 & 0x3F) == 0)
      v106 = 0;
    if (v113 - v102 - v106 <= 0x40)
    {
      v107 = *v112;
      v89 = (unint64_t)*v112 < 0x100;
      if ((unint64_t)*v112 >= 0x100)
        LOBYTE(v107) = 0;
      v109 = v107;
    }
    else
    {
      if (!v112)
      {
        v109 = 0;
        v16 = 0;
        goto LABEL_10;
      }
      v109 = 0;
      v89 = 0;
    }
    MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
  }
  else
  {
    v88 = v112;
    v89 = (unint64_t)v112 < 0x100;
    if ((unint64_t)v112 >= 0x100)
      v88 = 0;
    v109 = v88;
  }
  if (!v89)
    goto LABEL_9;
  v16 = 0;
  v90 = *(_QWORD *)(a1 + 40);
  v91 = 35;
  if ((v90 & 4) == 0)
    v91 = 19;
  v92 = v90 >> v91;
  v93 = v92 & 0xFFFFFF;
  v94 = (v92 & 0xFFFFFF) > 0xA || ((1 << v92) & 0x446) == 0;
  if (v94 && v93 != 65 && v93 != 71)
    v16 = (v92 & 0xFFFFFF) != 80;
LABEL_10:
  v17 = sub_1C4A90388(a3);
  if (*(_BYTE *)(a1 + 80))
  {
    v18 = sub_1C554C050(*(_DWORD *)(a1 + 60), *(_QWORD *)(a4[1] + 40));
    v20 = v19 != 0;
    if (v19)
      v21 = v18;
    else
      v21 = 0;
    if (v21 < 0)
      v20 = 0;
    v108 = v21;
    v22 = v21 < 256 && v20;
  }
  else
  {
    v108 = 0;
    v22 = 0;
  }
  v23 = sub_1C4A90550(a3);
  v24 = *(_DWORD *)(a2 + 56);
  if (v24 > 4)
  {
    if (v24 == 5 || v24 == 75)
    {
      v25 = 0;
      v26 = *(_DWORD *)(a2 + 28) == 0;
      LODWORD(v27) = 192;
      v28 = 98;
      goto LABEL_24;
    }
LABEL_33:
    v29 = *(_DWORD *)(a2 + 28);
    if (v29)
      v30 = 190;
    else
      v30 = 103;
    if (v29)
      v31 = 191;
    else
      v31 = 104;
    v25 = 1;
    if (v24 == 80)
      v27 = v31;
    else
      v27 = v30;
    goto LABEL_42;
  }
  if (v24 != 3)
  {
    if (!v24)
    {
      v25 = 0;
      v26 = *(_DWORD *)(a2 + 28) == 0;
      LODWORD(v27) = 193;
      v28 = 100;
LABEL_24:
      if (v26)
        v27 = v28;
      else
        v27 = v27;
      goto LABEL_42;
    }
    goto LABEL_33;
  }
  if (*(_DWORD *)(a2 + 28))
    v27 = 106;
  else
    v27 = 102;
  v25 = 1;
LABEL_42:
  v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + 80);
  if (*(_WORD *)(a2 + 24) == 2)
    v33 = 54;
  else
    v33 = 59;
  v117 = xmmword_1C6616220;
  v34 = *((_DWORD *)&v117 + *(unsigned __int16 *)(a2 + 26) - 1);
  if (v16)
    v35 = 49;
  else
    v35 = 41;
  v36 = 2 * (v23 != 32);
  if (HIWORD(v17))
    v36 = 42;
  v111 = v22;
  if (v25)
  {
    if (v22)
      v37 = 61;
    else
      v37 = 62;
    *(_QWORD *)&v117 = __PAIR64__(v34, v33);
    if (v32)
      v38 = v37;
    else
      v38 = 12;
    *((_QWORD *)&v117 + 1) = __PAIR64__(v36, v35);
    LODWORD(v118) = v38;
    v39 = v27;
    v40 = 5;
  }
  else
  {
    *(_QWORD *)&v117 = __PAIR64__(v34, v33);
    *((_QWORD *)&v117 + 1) = __PAIR64__(v36, v35);
    v39 = v27;
    v40 = 4;
  }
  v41 = sub_1C4C640F8(v39, v40, &v117);
  v43 = sub_1C55437B8(a4, v41);
  v44 = (unint64_t *)v42;
  v45 = (unint64_t *)a4[6];
  v46 = *(_QWORD *)(a4[5] + 40);
  *(_QWORD *)(v42 + 24) = v46;
  v47 = *(_QWORD *)(v46 + 32);
  v48 = *(unsigned int *)(v42 + 40);
  if ((_DWORD)v48)
  {
    v95 = *(_QWORD *)(v42 + 32);
    v96 = *(_QWORD *)(v47 + 40);
    v97 = 32 * v48;
    do
    {
      if (!*(_BYTE *)v95)
      {
        v98 = *(unsigned int *)(v95 + 4);
        if ((int)v98 >= 0)
          v99 = (uint64_t *)(*(_QWORD *)(v96 + 272) + 8 * v98);
        else
          v99 = (uint64_t *)(*(_QWORD *)(v96 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
        v100 = *v99;
        if (*v99)
        {
          v101 = *(_QWORD *)(v100 + 16);
          *(_QWORD *)(v100 + 16) = v95;
          *(_QWORD *)(v95 + 16) = v101;
          if ((*(_BYTE *)(v95 + 3) & 1) != 0)
          {
            *(_QWORD *)(v95 + 24) = v100;
          }
          else
          {
            *(_QWORD *)(v95 + 24) = 0;
            v99 = (uint64_t *)(v101 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v95 + 16) = v95;
          *(_QWORD *)(v95 + 24) = 0;
        }
        *v99 = v95;
      }
      v95 += 32;
      v97 -= 32;
    }
    while (v97);
  }
  v49 = *(_QWORD *)(v47 + 728);
  if (v49)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 24))(v49, v42);
  v50 = *v45 & 0xFFFFFFFFFFFFFFF8;
  *v44 = v50 | *v44 & 7;
  v44[1] = (unint64_t)v45;
  *(_QWORD *)(v50 + 8) = v44;
  *v45 = *v45 & 7 | (unint64_t)v44;
  v51 = a4[7];
  if (v51)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v51 + 24))(v51, v44);
  *a5 = v43;
  a5[1] = (llvm::MachineFunction *)v44;
  v52 = *(_DWORD *)(v110 + 16);
  if (*(_DWORD *)(a2 + 28))
  {
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    LODWORD(v117) = 0;
    DWORD1(v117) = v52;
    v119 = 0;
  }
  else
  {
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    v119 = 0;
    LODWORD(v117) = 0x1000000;
    DWORD1(v117) = v52;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v117);
  v53 = sub_1C4C915C4(v41);
  v55 = v53 == 102 || v53 == 106;
  if ((v53 & 0xFF00000000) != 0 && v55)
  {
    v57 = *a5;
    v56 = a5[1];
    LODWORD(v117) = 1;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
  }
  else
  {
    v58 = *(_QWORD *)(a2 + 80) & *(_QWORD *)(a2 + 40);
    v57 = *a5;
    v56 = a5[1];
    LODWORD(v117) = 1;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = v58;
  }
  llvm::MachineInstr::addOperand(v56, v57, (const llvm::MachineOperand *)&v117);
  v59 = *(_QWORD *)(a2 + 88) & *(_QWORD *)(a2 + 32);
  v61 = *a5;
  v60 = a5[1];
  LODWORD(v117) = 1;
  *((_QWORD *)&v117 + 1) = 0;
  v118 = v59;
  llvm::MachineInstr::addOperand(v60, v61, (const llvm::MachineOperand *)&v117);
  v63 = *a5;
  v62 = a5[1];
  if (v16)
  {
    LODWORD(v117) = 1;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = v109;
  }
  else
  {
    v64 = *(_DWORD *)a3;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    LODWORD(v117) = 0;
    DWORD1(v117) = v64;
    v119 = 0;
    llvm::MachineInstr::addOperand(v62, v63, (const llvm::MachineOperand *)&v117);
    v63 = *a5;
    v62 = a5[1];
    LODWORD(v117) = 1;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
  }
  llvm::MachineInstr::addOperand(v62, v63, (const llvm::MachineOperand *)&v117);
  v66 = *a5;
  v65 = a5[1];
  if (v17 < 0x10000)
  {
    v67 = *(_DWORD *)(a3 + 4);
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
    LODWORD(v117) = 0;
    DWORD1(v117) = v67;
    v119 = 0;
    llvm::MachineInstr::addOperand(v65, v66, (const llvm::MachineOperand *)&v117);
    v66 = *a5;
    v65 = a5[1];
    LODWORD(v117) = 1;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
  }
  else
  {
    LODWORD(v117) = 1;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = (__int16)v17;
  }
  llvm::MachineInstr::addOperand(v65, v66, (const llvm::MachineOperand *)&v117);
  v68 = *(_QWORD *)(a3 + 16);
  v70 = *a5;
  v69 = a5[1];
  LODWORD(v117) = 1;
  *((_QWORD *)&v117 + 1) = 0;
  v118 = v68;
  llvm::MachineInstr::addOperand(v69, v70, (const llvm::MachineOperand *)&v117);
  v71 = *(_QWORD *)(a3 + 8);
  v73 = *a5;
  v72 = a5[1];
  LODWORD(v117) = 1;
  *((_QWORD *)&v117 + 1) = 0;
  v118 = v71;
  llvm::MachineInstr::addOperand(v72, v73, (const llvm::MachineOperand *)&v117);
  if (*(_BYTE *)(v110 + 80))
  {
    if (v111)
    {
      v75 = *a5;
      v74 = a5[1];
      LODWORD(v117) = 1;
      *((_QWORD *)&v117 + 1) = 0;
      v118 = v108;
    }
    else
    {
      v76 = *(_DWORD *)(v110 + 60);
      v78 = *a5;
      v77 = a5[1];
      *((_QWORD *)&v117 + 1) = 0;
      v118 = 0;
      LODWORD(v117) = 0;
      DWORD1(v117) = v76;
      v119 = 0;
      llvm::MachineInstr::addOperand(v77, v78, (const llvm::MachineOperand *)&v117);
      v75 = *a5;
      v74 = a5[1];
      LODWORD(v117) = 1;
      *((_QWORD *)&v117 + 1) = 0;
      v118 = 0;
    }
    llvm::MachineInstr::addOperand(v74, v75, (const llvm::MachineOperand *)&v117);
  }
  v79 = *(_QWORD *)(v110 + 40);
  v80 = 35;
  if ((v79 & 4) == 0)
    v80 = 19;
  v81 = (v79 >> v80) & 0xFFFFFF;
  if ((_DWORD)v81 == 65)
  {
    v83 = *(_QWORD *)(a2 + 32);
    v84 = (v83 >> 54);
    if ((v83 & 0x2000000000000000) != 0)
      v84 = 0;
    if (*(_DWORD *)(a2 + 28) == 1)
      v85 = 2;
    else
      v85 = 1;
    sub_1C4AD5684((v84 | ((v83 & 0x2000000000000000) >> 29)) ^ 0x100000000, v83 >> 4, *(_DWORD *)(a2 + 32) & 0xF, v85, *(_QWORD *)(*((_QWORD *)a5[1] + 3) + 32));
    v82 = v86;
  }
  else
  {
    v82 = *(llvm::MachineMemOperand **)(v110 + 48);
    if ((_DWORD)v81 == 2)
      *((_WORD *)v82 + 16) |= 0x20u;
  }
  llvm::MachineInstr::addMemOperand(a5[1], *a5, v82);
  return sub_1C49400A8((uint64_t)a5);
}

uint64_t sub_1C4A90388(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD *v6;
  void (**v7)(_QWORD *);
  int v8;
  uint64_t v9;
  int v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned __int8 v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned __int8 v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_QWORD *)(a1 + 32);
  v24[0] = &off_1E816EFF0;
  v24[1] = sub_1C554C7E0;
  v25 = v24;
  v22[0] = &off_1E816F038;
  v22[1] = sub_1C554C7F8;
  v23 = v22;
  sub_1C554C3AC(v2, v3, (uint64_t)v24, (uint64_t)v22, 1, 0, &v19);
  v4 = v23;
  if (v23 == v22)
  {
    v5 = (void (**)(_QWORD *))(v22[0] + 32);
    v4 = v22;
LABEL_3:
    (*v5)(v4);
    goto LABEL_4;
  }
  if (v23)
  {
    v5 = (void (**)(_QWORD *))(*v23 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v6 = v25;
  if (v25 == v24)
  {
    v7 = (void (**)(_QWORD *))(v24[0] + 32);
    v6 = v24;
LABEL_6:
    (*v7)(v6);
    goto LABEL_7;
  }
  if (v25)
  {
    v7 = (void (**)(_QWORD *))(*v25 + 40);
    goto LABEL_6;
  }
LABEL_7:
  v8 = v21;
  if (v21)
  {
    if (v20 > 0x40)
    {
      v18 = *v19;
      MEMORY[0x1CAA32F9C]();
      LODWORD(v9) = v18;
    }
    else
    {
      v9 = (uint64_t)((_QWORD)v19 << -(uint64_t)v20) >> -(uint64_t)v20;
    }
    v10 = *(_DWORD *)(a1 + 24);
    if (v10 != 1 || (v9 + 0x8000) >> 16)
    {
      v13 = WORD1(v9);
      if (v10 == 1)
        v14 = 0;
      else
        v14 = 0x10000;
      if (v10 == 1)
        v15 = 0;
      else
        v15 = v9;
      if (v10 == 1)
        v16 = 0;
      else
        v16 = v9 & 0xFF00;
      if (v13)
        v8 = 0;
      else
        v8 = v14;
      if (v13)
        v11 = 0;
      else
        v11 = v15;
      if (v13)
        v12 = 0;
      else
        v12 = v16;
    }
    else
    {
      v11 = v9;
      v12 = v9 & 0xFF00;
      v8 = 0x10000;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  return v11 | v8 | v12;
}

uint64_t sub_1C4A90550(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  const char *v7;
  uint64_t v8;
  unint64_t v9;

  if (sub_1C4A90388(a1) >> 16)
    return 16;
  v2 = *(_DWORD *)(a1 + 4);
  if (v2 < 0 && (v3 = *(_QWORD *)(a1 + 32), v4 = v2 & 0x7FFFFFFF, v4 < *(_DWORD *)(v3 + 432)))
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 424) + 8 * v4);
  else
    v5 = 0;
  v9 = v5;
  result = sub_1C4825F50(&v9);
  if ((_DWORD)v7 == 1)
  {
    v8 = result;
    return v8;
  }
  return result;
}

uint64_t sub_1C4A905E4(int a1, _QWORD *a2)
{
  llvm::GlobalValue *Section;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  llvm::GlobalValue *v17;
  unint64_t v18;
  char v19;
  _DWORD v20[6];
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  sub_1C493FD84((uint64_t)&v17, a1, *(_QWORD *)(a2[1] + 40), 1);
  if (!v19
    || (Section = llvm::GlobalValue::getSection(v17), v4 != 17)
    || (*(_QWORD *)Section == 0x5F7961722E616972 ? (v5 = *((_QWORD *)Section + 1) == 0x7461645F72657375) : (v5 = 0),
        v5 ? (v6 = *((_BYTE *)Section + 16) == 97) : (v6 = 0),
        !v6))
  {
    v7 = 0;
LABEL_11:
    LOBYTE(v8) = 0;
    v9 = 0;
    return v7 | v9 | v8;
  }
  v11 = sub_1C4A74814(a2);
  v7 = HIDWORD(v11);
  if (!HIDWORD(v11))
    goto LABEL_11;
  v8 = v11;
  if (v18)
  {
    v15 = 257;
    v16 = 0;
    v12 = sub_1C5544694((uint64_t)a2, &v15, v18);
    v24 = 257;
    v25 = 0;
    v20[0] = v8;
    v20[4] = 0;
    v21 = v12;
    v22 = v13;
    v23 = 1;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a2 + 32))(a2, 45, &v24, 1, v20, 2, 0);
    v8 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4);
  }
  v9 = v8 & 0xFFFFFF00;
  v7 = 0x100000000;
  return v7 | v9 | v8;
}

uint64_t sub_1C4A9074C(int a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::GlobalValue *Section;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v14;
  llvm::MachineFunction *v15;
  llvm::MachineInstr *v16;
  llvm::MachineInstr *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  llvm::GlobalValue *v23;
  unint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a2[1];
  v5 = v4[5];
  if (sub_1C5EABC98(*(_QWORD *)(*v4 + 40))
    && (sub_1C493FD84((uint64_t)&v23, a1, v5, 1), v25)
    && (Section = llvm::GlobalValue::getSection(v23), v7 == 19)
    && (*(_QWORD *)Section == 0x5F7961722E616972 ? (v8 = *((_QWORD *)Section + 1) == 0x645F726576697264) : (v8 = 0),
        v8 ? (v9 = *(_QWORD *)((char *)Section + 11) == 0x617461645F726576) : (v9 = 0),
        v9))
  {
    v14 = sub_1C63A39CC(v4[43]);
    v32 = 257;
    v33 = 0;
    v15 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a2 + 32))(a2, 313, &v32, 1, 0, 0, 0);
    v17 = v16;
    v26 = 1;
    v27 = 0;
    v28 = v14;
    llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v26);
    v11 = *(_DWORD *)(*((_QWORD *)v17 + 4) + 4);
    if (v24)
    {
      v21 = 257;
      v22 = 0;
      v18 = sub_1C5544694((uint64_t)a2, &v21, v24);
      v32 = 257;
      v33 = 0;
      v26 = v11;
      LODWORD(v28) = 0;
      v29 = v18;
      v30 = v19;
      v31 = 1;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))(*a2 + 32))(a2, 45, &v32, 1, &v26, 2, 0);
      v11 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
    }
    v12 = v11 & 0xFFFFFF00;
    v10 = 0x100000000;
  }
  else
  {
    v10 = 0;
    LOBYTE(v11) = 0;
    v12 = 0;
  }
  return v10 & 0x100000000 | v12 | v11;
}

void sub_1C4A90934(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 4);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 4 * v2), 4 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C4A909AC(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  uint64_t v37;
  uint64_t v38;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v4 = *v3;
  if (v4)
  {
    v37 = *(_QWORD *)(a2 + 24);
    v38 = *(_QWORD *)(a2 + 272);
    while (1)
    {
      if ((*(_BYTE *)(v4 + 3) & 1) == 0)
      {
        v4 = *(_QWORD *)(v4 + 24);
        if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
          return 0;
      }
      result = 0;
      if (a3 > 3)
        return result;
      v6 = *(_QWORD *)(v4 + 8);
      if (!v6)
        return result;
      v7 = *(unsigned int **)(v6 + 32);
      v8 = v7[1];
      v9 = (uint64_t *)(v38 + 8 * v8);
      if ((int)v8 < 0)
        v9 = (uint64_t *)(v37 + 16 * (v8 & 0x7FFFFFFF) + 8);
      v10 = *v9;
      if ((*(_BYTE *)(v10 + 3) & 1) == 0)
        v10 = *(_QWORD *)(v10 + 24);
      v11 = *(_QWORD *)(v10 + 8);
      if (**(_WORD **)(v11 + 16) == 121)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 48);
        if (v29)
        {
          if (*(_UNKNOWN **)(v29 + 32) == &unk_1C866F1C0)
            v30 = *(_QWORD *)(v29 + 40);
          else
            v30 = v29 + 24;
          return (*(_BYTE *)(v30 + 28) & 8) == 0;
        }
      }
      result = 0;
      v12 = **(unsigned __int16 **)(v6 + 16);
      if (v12 > 0xB1)
      {
        if (v12 - 178 >= 2)
        {
          if (v12 - 187 >= 2)
          {
            if (v12 != 335)
              return result;
LABEL_48:
            ++a3;
            result = sub_1C4A909AC(v7[33], a2);
            if (!(_DWORD)result)
              return result;
            v15 = v7 + 41;
            goto LABEL_52;
          }
LABEL_28:
          ++a3;
          result = sub_1C4A909AC(v7[9], a2);
          if (!(_DWORD)result)
            return result;
          v15 = v7 + 17;
          goto LABEL_52;
        }
        v15 = v7 + 9;
        ++a3;
      }
      else if (**(unsigned __int16 **)(v6 + 16) <= 0xA2u)
      {
        if (v12 == 51)
          goto LABEL_48;
        if (v12 != 136)
        {
          if (v12 != 116)
            return result;
          v31 = *(unsigned int *)(v6 + 40);
          if ((_DWORD)v31)
          {
            v32 = 0;
            v33 = v7;
            while (1)
            {
              v34 = *(unsigned __int8 *)v33;
              v33 += 8;
              if (v34 == 17)
                break;
              if (v31 == ++v32)
                goto LABEL_65;
            }
          }
          else
          {
LABEL_65:
            LODWORD(v32) = -1;
          }
          return v7[8 * v32 + 4] == 2131;
        }
        v16 = v7[9];
        v17 = (uint64_t *)(v38 + 8 * v16);
        if ((int)v16 < 0)
          v17 = (uint64_t *)(v37 + 16 * (v16 & 0x7FFFFFFF) + 8);
        v18 = *v17;
        if ((*(_BYTE *)(v18 + 3) & 1) == 0)
          v18 = *(_QWORD *)(v18 + 24);
        v19 = *(_QWORD *)(v18 + 8);
        v20 = **(unsigned __int16 **)(v19 + 16);
        if (v20 == 179 || v20 == 119)
        {
          v21 = *(unsigned int *)(*(_QWORD *)(v19 + 32) + 36);
          v22 = (uint64_t *)(v38 + 8 * v21);
          if ((int)v21 < 0)
            v22 = (uint64_t *)(v37 + 16 * (v21 & 0x7FFFFFFF) + 8);
          v23 = *v22;
          if ((*(_BYTE *)(v23 + 3) & 1) == 0)
            v23 = *(_QWORD *)(v23 + 24);
          v19 = *(_QWORD *)(v23 + 8);
          LOWORD(v20) = **(_WORD **)(v19 + 16);
        }
        if ((v20 & 0xFFFE) != 0x86)
          return 0;
        v24 = *(_QWORD *)(v19 + 32);
        ++a3;
        result = sub_1C4A909AC(*(unsigned int *)(v24 + 68), a2);
        if (!(_DWORD)result)
          return result;
        v15 = (unsigned int *)(v24 + 100);
      }
      else
      {
        switch(v12)
        {
          case 0xA3u:
            goto LABEL_28;
          case 0xA5u:
            v25 = v7[17];
            v15 = v7 + 17;
            v26 = *(v15 - 8);
            if ((_DWORD)v26 == v25)
              return 1;
            ++a3;
            if ((sub_1C4A909AC(v26, a2) & 1) == 0)
              return 0;
            break;
          case 0xA6u:
            v13 = v7[9];
            v14 = v7[17];
            if ((_DWORD)v13 == (_DWORD)v14)
              return 1;
            ++a3;
            result = sub_1C4A909AC(v13, a2);
            if (!(_DWORD)result)
              return result;
            result = sub_1C4A909AC(v14, a2);
            if (!(_DWORD)result)
              return result;
            v15 = v7 + 25;
            break;
          default:
            return result;
        }
      }
LABEL_52:
      result = 0;
      v27 = *v15;
      v28 = (uint64_t *)(v38 + 8 * v27);
      if ((int)v27 < 0)
        v28 = (uint64_t *)(v37 + 16 * (v27 & 0x7FFFFFFF) + 8);
      v4 = *v28;
      if (!v4)
        return result;
    }
  }
  return 0;
}

uint64_t sub_1C4A90D34(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v7 = a3 + a2;
  if (v7 > 0x39)
  {
    v8 = operator new();
    *(_QWORD *)v8 = v8 + 16;
    *(_QWORD *)(v8 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v8, (v7 + 63) >> 6, 0);
    *(_DWORD *)(v8 + 64) = v7;
  }
  else
  {
    v8 = (v7 << 58) | 1;
  }
  v15 = v8;
  sub_1C49144A0((unint64_t *)&v15, a2, v7);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 104))(*(_QWORD *)(a4 + 16));
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 7;
  *(_DWORD *)(v10 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 632))(v9, 7);
  *(_QWORD *)v10 = off_1E7FAD308;
  *(_QWORD *)(v10 + 16) = v15;
  v14 = v10;
  v15 = 1;
  sub_1C49141AC(a1 + 16, (char *)&v14);
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24) - 8);
  sub_1C4914448((void ***)&v15);
  return v12;
}

void sub_1C4A90E94(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FAD308;
  sub_1C4914448((void ***)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4A90ED4()
{
  return 0;
}

uint64_t sub_1C4A90EDC()
{
  return 1;
}

uint64_t sub_1C4A90EE4()
{
  return 1;
}

uint64_t sub_1C4A90EEC()
{
  return 0;
}

void sub_1C4A90EF4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned int a4)
{
  uint64_t v6;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[16];
  void *v59;
  uint64_t v60;
  _BYTE v61[128];
  void *v62;
  uint64_t v63;
  _QWORD v64[26];

  v6 = (uint64_t)a2;
  v64[24] = *MEMORY[0x1E0C80C00];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  v8 = (unsigned __int8 **)(a1 + 56);
  v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) != a3 + 4)
  {
    if (*v9)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v9);
    a2 = *v8;
    *v9 = *v8;
    if (a2)
      llvm::MetadataTracking::track((uint64_t)v9, a2, 2);
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(v10 + 4);
  v52 = v11;
  if (v11 < 0 && (v12 = v11 & 0x7FFFFFFF, v12 < *(_DWORD *)(v6 + 432)))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v12);
    if ((v13 & 2) != 0)
    {
      v14 = 35;
      v15 = 19;
      if ((v13 & 4) == 0)
        v14 = 19;
      v16 = v13 >> v14;
      if ((v13 & 4) == 0)
        v15 = 3;
      if ((v13 & 1) != 0)
        v15 = 3;
      v17 = (8 * (unsigned __int16)(v13 >> v15)) & 0xFFFFF8000007FFFFLL | ((v16 & 0xFFFFFF) << 19) | 2;
      v18 = 0x800000000000000;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = 0;
  }
  v19 = 3;
  if ((v13 & 1) == 0)
    v19 = 19;
  v17 = v13 & 0x8000000000000000 | (8 * (v13 >> v19)) | 1;
  v18 = 0x8000000000000;
LABEL_20:
  v59 = v61;
  v60 = 0x400000000;
  if ((v13 & v18) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v10 = *(_QWORD *)(a1 + 32);
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(unsigned __int8 *)(v20 + 4);
  v22 = *(unsigned int *)(a1 + 40);
  if ((*(_BYTE *)(v20 + 8) & 2) != 0)
  {
    if ((_DWORD)v22 == v21)
      goto LABEL_29;
    v23 = *(unsigned __int8 *)(v20 + 4);
    do
    {
      v51 = *(_DWORD *)(v10 + 32 * v21);
      if ((v51 & 0x10000FF) != 0x1000000)
        break;
      v23 += (v51 & 0x2000000) == 0;
      if ((_DWORD)v22 - 1 == v21)
        break;
      ++v21;
    }
    while ((v51 & 0x2000000) == 0);
  }
  else
  {
    v23 = *(unsigned __int8 *)(v20 + 4);
  }
  if (v23 != (_DWORD)v22)
  {
    v24 = 32 * v22 - 32 * v23;
    v25 = (unsigned int *)(v10 + 32 * v23 + 4);
    do
    {
      v62 = v64;
      v63 = 0x400000000;
      v26 = *v25;
      v25 += 8;
      sub_1C4A79060(v26, v6, (uint64_t)a3, (uint64_t)&v62);
      sub_1C4958E20((uint64_t)&v59, (unint64_t)&v62);
      if (v62 != v64)
        free(v62);
      v24 -= 32;
    }
    while (v24);
  }
LABEL_29:
  v56 = v58;
  v57 = 0x400000000;
  if (!(unsigned __int16)(v13 >> 3))
  {
    LODWORD(v39) = 0;
    v46 = 0;
    LODWORD(v53) = v52;
    v54 = 1;
    v62 = v64;
    v63 = 0x800000000;
    goto LABEL_45;
  }
  v27 = 0;
  v28 = a4;
  do
  {
    v29 = 0;
    v62 = v64;
    v63 = 0x400000000;
    v30 = v28;
    do
    {
      LODWORD(v53) = *(_DWORD *)(*(_QWORD *)((char *)v59 + v29) + 4 * v27);
      v55 = 0;
      v31 = sub_1C4926708((uint64_t)&v62, (unint64_t)&v53, 1);
      v32 = (char *)v62 + 24 * v63;
      v33 = *(_OWORD *)v31;
      *((_QWORD *)v32 + 2) = *(_QWORD *)(v31 + 16);
      *(_OWORD *)v32 = v33;
      LODWORD(v63) = v63 + 1;
      v29 += 32;
      --v30;
    }
    while (v30);
    v34 = **(unsigned __int16 **)(a1 + 16);
    v53 = v17;
    v54 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void *))*a3 + 4))(a3, v34, &v53, 1, v62);
    v36 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
    v37 = v57;
    if (v57 >= (unint64_t)HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 4);
      v37 = v57;
    }
    *((_DWORD *)v56 + v37) = v36;
    LODWORD(v57) = v57 + 1;
    if (v62 != v64)
      free(v62);
    ++v27;
  }
  while (v27 != (unsigned __int16)(v13 >> 3));
  v38 = (int *)v56;
  v39 = v57;
  LODWORD(v53) = v52;
  v54 = 1;
  v62 = v64;
  v63 = 0x800000000;
  if (v57 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v57, 24);
    v40 = v63;
    v41 = v62;
  }
  else
  {
    if (!(_DWORD)v57)
    {
      v46 = 0;
      goto LABEL_45;
    }
    v40 = 0;
    v41 = v64;
  }
  v42 = 3 * v40;
  v43 = 4 * v39;
  do
  {
    v44 = *v38++;
    v45 = &v41[v42];
    *v45 = v44;
    v45[4] = 0;
    v42 += 3;
    v43 -= 4;
  }
  while (v43);
  v46 = v63;
LABEL_45:
  LODWORD(v63) = v46 + v39;
  (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t))*a3 + 4))(a3, 77, &v53, 1);
  if (v62 != v64)
    free(v62);
  v47 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v47 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v47 = a1;
      do
        v47 = *(_QWORD *)(v47 + 8);
      while ((*(_WORD *)(v47 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v47 + 8));
  if (v56 != v58)
    free(v56);
  v48 = (char *)v59;
  if ((_DWORD)v60)
  {
    v49 = 32 * v60;
    do
    {
      v50 = *(char **)&v48[v49 - 32];
      if (&v48[v49 - 16] != v50)
        free(v50);
      v49 -= 32;
    }
    while (v49);
    v48 = (char *)v59;
  }
  if (v48 != v61)
    free(v48);
}

uint64_t sub_1C4A9142C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[4];
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a1 + 16) != 135)
    return 0;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 68);
  v8 = *(_DWORD *)(v6 + 100);
  if (v7 < 0
    && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)
    && (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v7 & 0x7FFFFFFF)) & 0x8000000000000000) != 0)
  {
    v14 = v6 + 64;
    v18 = 257;
    v19 = 0;
    v16[0] = v7;
    v17 = 0;
    v9 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 178, &v18, 1, v16, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
    llvm::MachineOperand::setReg(v14, *(_DWORD *)(*(_QWORD *)(v15 + 32) + 4));
    if ((v8 & 0x80000000) == 0)
      return v9;
  }
  else
  {
    v9 = 0;
    if ((v8 & 0x80000000) == 0)
      return v9;
  }
  if ((v8 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)
    && (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF)) & 0x8000000000000000) != 0)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = v10 + 96;
    v18 = 257;
    v19 = 0;
    v16[0] = *(_DWORD *)(v10 + 100);
    v17 = 0;
    v9 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 178, &v18, 1, v16, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
    llvm::MachineOperand::setReg(v11, *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4));
  }
  return v9;
}

uint64_t sub_1C4A915C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _DWORD v16[6];
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  v5 = *(unsigned int *)(a2 + 40);
  if (v5 < 2)
  {
    v12 = 0;
    v13 = (int *)v21;
  }
  else
  {
    v7 = 0;
    v8 = 32 * v5 - 32;
    do
    {
      v17 = 129;
      v18 = 0;
      v16[0] = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v7 + 36);
      v16[4] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 118, &v17, 1, v16, 1, 0);
      v10 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4);
      v11 = v20;
      if (v20 >= (unint64_t)HIDWORD(v20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v20 + 1, 4);
        v11 = v20;
      }
      *((_DWORD *)v19 + v11) = v10;
      v12 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      v7 += 32;
    }
    while (v8 != v7);
    v13 = (int *)v19;
  }
  v14 = sub_1C5547750(a3, a1, v13, v12);
  if (v19 != v21)
    free(v19);
  return v14;
}

BOOL sub_1C4A91738(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BOOL8 result;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 1;
  if ((*(_BYTE *)(v3 + 3) & 0x81) == 0)
    return 0;
  do
  {
    v3 = *(_QWORD *)(v3 + 24);
    result = v3 == 0;
  }
  while (v3 && (*(_DWORD *)v3 & 0x81000000) != 0);
  return result;
}

void sub_1C4A917A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A917B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FAC6A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A917EC(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E7FAC6A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL sub_1C4A9180C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  const char *v4;
  BOOL v5;
  _BOOL8 result;
  unsigned int v8;

  v3 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v4 == 1)
  {
    v8 = v3;
    v3 = v8;
  }
  v5 = (v3 & 0xF) == 0 && *(_DWORD *)(a1 + 8) >= v3;
  result = 1;
  if (!v5)
  {
    if ((v3 & 0x1F) != 0 || (v3 & 0xFFFFFFE0) == 0x160)
      return 0;
    if ((v3 & 0xFFFFFFA0) == 0x100 || *(_DWORD *)(a1 + 12) < v3)
      return 0;
  }
  return result;
}

void sub_1C4A918AC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A918C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAC6F0;
  return result;
}

void sub_1C4A918E4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAC6F0;
}

uint64_t sub_1C4A918FC()
{
  return 1;
}

void sub_1C4A91950()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91964()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAC738;
  return result;
}

void sub_1C4A91988(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAC738;
}

BOOL sub_1C4A919A0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v5;

  v2 = **(_QWORD **)(a2 + 8);
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(_QWORD **)(a2 + 8) & 6) != 2)
    return 0;
  v5 = 35;
  if ((v2 & 4) == 0)
    v5 = 19;
  return ((v2 >> v5) & 0xFFFFFF) == 64;
}

void sub_1C4A919EC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91A00()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAC780;
  return result;
}

void sub_1C4A91A24(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAC780;
}

BOOL sub_1C4A91A3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = (unsigned __int16)(v2 >> 3);
  v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0)
    v4 = (v2 >> 19);
  if ((v2 & 4) != 0)
    v3 = v4;
  if ((v2 & 1) != 0)
    v5 = (v2 >> 3);
  else
    v5 = v3;
  return v5 < 0x10;
}

void sub_1C4A91A7C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91A90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAC7C8;
  return result;
}

void sub_1C4A91AB4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAC7C8;
}

uint64_t sub_1C4A91ACC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v4 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

void sub_1C4A91AE8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91AFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FAC810;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A91B30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FAC810;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4A91B4C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8))
    return 1;
  v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

void sub_1C4A91B7C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91B90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FAC858;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A91BC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FAC858;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4A91BE0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v4;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8))
    return 1;
  v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v5 = (v2 >> 2) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

void sub_1C4A91C10()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A91C24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FAC8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A91C5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAC8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A91C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 8);
  return v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
}

void sub_1C4A91C9C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A91CB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FAC8E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A91CE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAC8E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A91D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a2 + 8);
  return v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
}

void sub_1C4A91D28()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91D3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAC930;
  return result;
}

void sub_1C4A91D60(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAC930;
}

uint64_t sub_1C4A91D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v3) = 0;
  if (v2 < 0)
    return 1;
  else
    return v3;
}

void sub_1C4A91D9C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A91DB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FAC978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A91DE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAC978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A91E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16))
    return 1;
  v5 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v5) = 0;
  if (v2 < 0)
    return 1;
  else
    return v5;
}

void sub_1C4A91E44()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A91E58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FAC9C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A91E90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAC9C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A91EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16))
    return 1;
  v5 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v5) = 0;
  if (v2 < 0)
    return 1;
  else
    return v5;
}

void sub_1C4A91EEC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91F00()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACA08;
  return result;
}

void sub_1C4A91F24(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACA08;
}

uint64_t sub_1C4A91F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v3) = 0;
  if (v2 < 0)
    return 1;
  else
    return v3;
}

void sub_1C4A91F60()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91F74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FACA50;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A91FA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FACA50;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A91FC4(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C4A91FE0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A91FF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FACA98;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A92028(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FACA98;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A92044(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C4A92060()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92074(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FACAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A920AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FACAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A920CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = **(_QWORD **)(a2 + 8);
  if (v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16))
    return 1;
  v5 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v5) = 0;
  if (v2 < 0)
    return 1;
  else
    return v5;
}

void sub_1C4A92108()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A9211C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACB28;
  return result;
}

void sub_1C4A92140(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACB28;
}

uint64_t sub_1C4A92158(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = **(_QWORD **)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0)
    return 1;
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  v4 = (v2 >> 2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

void sub_1C4A92180()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92194()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACB70;
  return result;
}

void sub_1C4A921B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACB70;
}

BOOL sub_1C4A921D0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;

  v4 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((_DWORD)v3 == 1)
  v6 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v5 == 1)
  return v4 < v6;
}

void sub_1C4A92244()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92258()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACBB8;
  return result;
}

void sub_1C4A9227C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACBB8;
}

uint64_t sub_1C4A92294()
{
  return 0;
}

void sub_1C4A922A8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A922BC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACC00;
  return result;
}

void sub_1C4A922E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACC00;
}

BOOL sub_1C4A922F8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;

  v4 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((_DWORD)v3 == 1)
  v6 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v5 == 1)
  return v4 < v6;
}

void sub_1C4A9236C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92380()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACC48;
  return result;
}

void sub_1C4A923A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACC48;
}

uint64_t sub_1C4A923BC()
{
  return 0;
}

void sub_1C4A923D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A923E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FACC90;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A92418(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FACC90;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4A92434(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  BOOL v3;

  v2 = *(_QWORD **)(a2 + 8);
  if (*v2 != *(_QWORD *)(a1 + 8) && ((*v2 & 0xFFFFFFFFFFFFFFF9) != 0 ? (v3 = (*v2 & 4) == 0) : (v3 = 1), v3))
    return v2[1] >> 63;
  else
    return 1;
}

void sub_1C4A92474()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92488(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FACCD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A924C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FACCD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A924F0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  v2 = *(uint64_t **)(a2 + 8);
  v3 = *v2;
  v4 = *v2 == a1[1] || v3 == a1[2];
  if (v4 && v2[1] == a1[3])
    return 1;
  v6 = ((unint64_t)v3 >> 2) & 1;
  if ((v3 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v6) = 0;
  if (v3 < 0)
    return 1;
  else
    return v6;
}

void sub_1C4A9253C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92550()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACD20;
  return result;
}

void sub_1C4A92574(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACD20;
}

BOOL sub_1C4A9258C(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *(unint64_t **)(a2 + 8);
  v3 = v2 + 1;
  v4 = sub_1C4825F50(v2);
  v6 = v5;
  return v4 != sub_1C4825F50(v3) || v6 != v7;
}

void sub_1C4A925D8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A925EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACD68;
  return result;
}

void sub_1C4A92610(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACD68;
}

BOOL sub_1C4A92628(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *(unint64_t **)(a2 + 8);
  v3 = v2 + 1;
  v4 = sub_1C4825F50(v2);
  v6 = v5;
  return v4 != sub_1C4825F50(v3) || v6 != v7;
}

void sub_1C4A92674()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92688(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_1E7FACDB0;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4A926E8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E7FACDB0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_1C4A92730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _OWORD v11[5];
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a2 + 8);
  v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(_QWORD **)(a2 + 8) & 2) == 0;
  if (v3 || (v2 & 4) != 0)
    return 0;
  v5 = *(_OWORD *)(a1 + 24);
  v11[0] = *(_OWORD *)(a1 + 8);
  v11[1] = v5;
  v6 = *(_OWORD *)(a1 + 56);
  v11[2] = *(_OWORD *)(a1 + 40);
  v11[3] = v6;
  v11[4] = *(_OWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 88);
  sub_1C55102A4(1, v11, 11, (uint64_t)v13);
  if (!v14)
  {
    sub_1C485C2F0();
    JUMPOUT(0x1C4A9283CLL);
  }
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v14 + 48))(v14, a2);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = (void (**)(_QWORD *))(v13[0] + 32);
    v8 = v13;
    goto LABEL_12;
  }
  if (v14)
  {
    v9 = (void (**)(_QWORD *))(*v14 + 40);
LABEL_12:
    (*v9)(v8);
  }
  return v7;
}

void sub_1C4A92840()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92854(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7FACDF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A92888(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7FACDF8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A928A4(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8) && (*(_DWORD *)a2 - 107) < 4;
}

void sub_1C4A928CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A928E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FACE40;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A92914(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FACE40;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A92930(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C4A9294C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92960(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E7FACE88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C4A929A8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FACE88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A929D8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *v3;
  v5 = 0x800000000000000;
  if ((*v3 & 2) == 0)
    v5 = 0x8000000000000;
  if ((v5 & v4) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    v4 = *v3;
  }
  v6 = v3[1];
  if (v6 == a1[1] || v6 == a1[2])
    return 1;
  v8 = (unsigned __int16)(v4 >> 3);
  if (v6 == a1[3])
  {
    if (v8 < 9)
      return 1;
  }
  else
  {
    if (v6 == a1[4] && v8 < 9)
      return 1;
    if (v6 == a1[5] && v8 < 5)
      return 1;
  }
  return v6 == a1[6] && v8 == 2;
}

void sub_1C4A92A94()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92AA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E7FACED0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C4A92AF8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E7FACED0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A92B30(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int64x2_t v3;
  uint64_t v4;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = vdupq_n_s64(v2);
  v4 = 1;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) == 0&& v2 != *(_QWORD *)(a1 + 40)&& v2 != *(_QWORD *)(a1 + 48)&& v2 != *(_QWORD *)(a1 + 56))
  {
    return v2 == *(_QWORD *)(a1 + 64);
  }
  return v4;
}

void sub_1C4A92BAC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92BC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E7FACF18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C4A92C08(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FACF18;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A92C38(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  int64x2_t v9;
  uint64_t v10;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = 3;
  if ((v2 & 1) == 0)
    v3 = 19;
  v4 = v2 >> v3;
  v5 = v2 & 0x8000000000000000 | (8 * v4) | 1;
  v6 = (v2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v4) | 2;
  if ((v2 & 2) == 0)
    v6 = v5;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(_QWORD **)(a2 + 8) & 4) == 0)
    v8 = **(_QWORD **)(a2 + 8);
  else
    v8 = v6;
  v9 = vdupq_n_s64(v8);
  v10 = 1;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v9, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v9, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) == 0&& v8 != *(_QWORD *)(a1 + 40))
  {
    return v8 == *(_QWORD *)(a1 + 48);
  }
  return v10;
}

void sub_1C4A92CE4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92CF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &off_1E7FACF60;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_QWORD *)v2 + 21) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C4A92D80(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_1E7FACF60;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

uint64_t sub_1C4A92DF0()
{
  return 1;
}

void sub_1C4A92DFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92E10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FACFA8;
  return result;
}

void sub_1C4A92E34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FACFA8;
}

BOOL sub_1C4A92E4C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;

  v4 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
  if ((_DWORD)v3 == 1)
  v6 = sub_1C4825F50((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((_DWORD)v5 == 1)
  return v4 >= v6;
}

void sub_1C4A92EC0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A92ED4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FACFF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A92F08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FACFF0;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A92F24(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C4A92F40()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A92F54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FAD038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A92F94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAD038;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A92FBC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  return v2 == a1[1] || v2 == a1[2] || v2 == a1[3];
}

void sub_1C4A92FF0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A93004(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E7FAD080;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A9305C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E7FAD080;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

BOOL sub_1C4A9309C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v8;
  const char *v9;
  _BOOL4 v10;
  unsigned int v11;
  _OWORD v12[5];
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(unint64_t **)(a2 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v12[0] = *(_OWORD *)(a1 + 8);
  v12[1] = v5;
  v6 = *(_OWORD *)(a1 + 56);
  v12[2] = *(_OWORD *)(a1 + 40);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 72);
  while (*(_QWORD *)((char *)v12 + v3) != v4[1])
  {
    v3 += 8;
    if (v3 == 80)
      return 0;
  }
  v8 = sub_1C4825F50(v4);
  if ((_DWORD)v9 == 1)
  {
    v11 = v8;
    v8 = v11;
  }
  v10 = (v8 & (v8 - 1)) == 0;
  if (!v8)
    v10 = 0;
  return v8 < 0x41 && v10;
}

void sub_1C4A9317C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A93190(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FAD0C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A931C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FAD0C8;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A931E0(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C4A931FC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A93210(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FAD110;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4A93250(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAD110;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A93278(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)(a2 + 8);
  v3 = a1[4];
  if (*v2 == v3)
    return 1;
  v4 = v2[1];
  if (v4 == a1[1] || v4 == a1[2])
    return 1;
  if (v4 == v3 || v4 == a1[3])
    return 1;
  return (v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (v4 & 2) != 0 && (v4 & 4) == 0;
}

void sub_1C4A932E4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A932F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x88uLL);
  *(_QWORD *)v2 = &off_1E7FAD158;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C4A93368(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_1E7FAD158;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t sub_1C4A933C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _OWORD v13[8];
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)(a2 + 8);
  v4 = (v3 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(_QWORD **)(a2 + 8) & 2) == 0;
  if (v4 || (v3 & 4) != 0)
  {
    v6 = *(_OWORD *)(a1 + 24);
    v13[0] = *(_OWORD *)(a1 + 8);
    v13[1] = v6;
    v7 = *(_OWORD *)(a1 + 56);
    v13[2] = *(_OWORD *)(a1 + 40);
    v13[3] = v7;
    v8 = *(_OWORD *)(a1 + 88);
    v13[4] = *(_OWORD *)(a1 + 72);
    v13[5] = v8;
    v9 = *(_OWORD *)(a1 + 120);
    v13[6] = *(_OWORD *)(a1 + 104);
    v13[7] = v9;
    sub_1C55102A4(0, v13, 16, (uint64_t)v14);
    if (!v15)
    {
      sub_1C485C2F0();
      JUMPOUT(0x1C4A934D4);
    }
    v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v15 + 48))(v15, a2);
    v10 = v15;
    if (v15 == v14)
    {
      v11 = (void (**)(_QWORD *))(v14[0] + 32);
      v10 = v14;
    }
    else
    {
      if (!v15)
        return v5;
      v11 = (void (**)(_QWORD *))(*v15 + 40);
    }
    (*v11)(v10);
    return v5;
  }
  return 1;
}

void sub_1C4A934D8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A934EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7FAD1A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4A93520(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7FAD1A0;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4A9353C(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a2 + 8) == *(_QWORD *)(a1 + 8);
}

void sub_1C4A93558()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A9356C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FAD1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4A935A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAD1E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A935C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  return v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 16);
}

void sub_1C4A935E4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A935F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7FAD230;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C4A93640(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FAD230;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A93670(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;

  v3 = *(unint64_t **)(a2 + 8);
  v4 = v3[1];
  if (v4 == *(_QWORD *)(a1 + 8) || v4 == *(_QWORD *)(a1 + 16))
  {
    v6 = sub_1C4825F50(*(unint64_t **)(a2 + 8));
    if ((_DWORD)v5 == 1)
    if (v6 <= *(unsigned int *)(a1 + 24))
      return 1;
  }
  v8 = sub_1C4825F50(v3);
  if ((_DWORD)v7 == 1)
  if (v3[1] != *(_QWORD *)(a1 + 32))
    return 0;
  v10 = sub_1C4825F50(v3);
  if ((_DWORD)v9 == 1)
  if (v10 > *(unsigned int *)(a1 + 40))
    return 0;
  if ((v8 >> 5) <= 0xB)
    return (0x2FFu >> (v8 >> 5)) & 1;
  return 1;
}

void sub_1C4A93778()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A9378C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7FAD278;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C4A937D4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FAD278;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A93804(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int64x2_t v3;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = vdupq_n_s64(v2);
  return (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) != 0|| v2 == *(_QWORD *)(a1 + 40);
}

void sub_1C4A93858()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A9386C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E7FAD2C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1C4A938B4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FAD2C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C4A938E4(int64x2_t *a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int64x2_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v11;

  v3 = *(unint64_t **)(a2 + 8);
  v6 = *v3;
  v4 = v3 + 1;
  v5 = v6;
  if (v6 != a1->i64[1])
  {
    v7 = vdupq_n_s64(v5);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v7, a1[1]), (int32x4_t)vceqq_s64(v7, a1[2]))), 0xFuLL))) & 1) == 0)return 0;
  }
  v8 = sub_1C4825F50(v4);
  if ((_DWORD)v9 == 1)
  {
    v11 = v8;
    v8 = v11;
  }
  return v8 <= a1[3].u32[0];
}

uint64_t sub_1C4A93988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5;
  uint64_t result;
  llvm::LiveInterval *v7;
  int8x8_t *v8;
  char v9;

  v5 = a5 & 0x7FFFFFFF;
  if ((*(_BYTE *)(*(_QWORD *)(a3 + 264)
                 + 24
                 * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * v5) & 0xFFFFFFFFFFFFFFF8)
                                        + 24)
                  + *(_DWORD *)(a3 + 272) * ((*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 3))) & 0x1F) != 0)
    return 1;
  if (v5 >= *(unsigned int *)(a4 + 416) || (v7 = *(llvm::LiveInterval **)(*(_QWORD *)(a4 + 408) + 8 * v5)) == 0)
  {
    v7 = (llvm::LiveInterval *)sub_1C4851220(a4, a5);
    llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)a4, v7);
  }
  v8 = (int8x8_t *)*((_QWORD *)v7 + 13);
  if (!v8)
    return 0;
  do
  {
    v9 = vaddlv_u8((uint8x8_t)vcnt_s8(v8[14]));
    result = v9 & 1;
    if ((v9 & 1) != 0)
      break;
    v8 = (int8x8_t *)v8[13];
  }
  while (v8);
  return result;
}

void sub_1C4A93A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  llvm::LiveInterval *v20;
  unsigned int v21;
  int v22;
  _QWORD *v23;
  llvm::LiveInterval **v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int **v37;
  llvm::LiveInterval **v38;
  llvm::LiveInterval *v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  int8x8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  unsigned int *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  __int16 v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  BOOL v86;
  int v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  _BYTE *v110;
  uint64_t *v111;
  unsigned int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  __int16 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  int v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  char v145;
  _QWORD *v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  __int16 v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  int v154;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  __int16 v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  int v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  char v182;
  char *v183;
  int v184;
  unsigned int v185;
  unint64_t v186;
  _QWORD *v187;
  _DWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t *v212;
  void *v213;
  uint64_t v214;
  _BYTE v215[64];
  void *v216;
  uint64_t v217;
  _QWORD v218[10];

  v4 = a2;
  v218[8] = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v7 = *(_QWORD *)(v4 + 40);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 176))(*(_QWORD *)(v4 + 16));
  v9 = *(_QWORD *)(v4 + 328);
  v205 = v4 + 320;
  if (v9 == v4 + 320)
  {
    v202 = a1 + 744;
    goto LABEL_90;
  }
  v10 = v8;
  v11 = 0;
  v210 = v8;
  v203 = v4;
  v201 = a3 + 312;
  do
  {
    v208 = v11;
    v12 = (_BYTE *)(v9 + 48);
    v206 = v9;
    v13 = *(_BYTE **)(v9 + 56);
    v211 = (_BYTE *)(v9 + 48);
    while (v13 != v12)
    {
      LODWORD(v213) = 0;
      v14 = sub_1C4C915C4(**((unsigned __int16 **)v13 + 2));
      if ((v14 & 0xFF00000000) == 0
        || ((v14 - 64) <= 0x3A
          ? (v15 = ((1 << (v14 - 64)) & 0x60001F460000001) == 0)
          : (v15 = 1),
            v15 && ((v14 - 147) <= 0x14 ? (v16 = ((1 << (v14 + 109)) & 0x1E0001) == 0) : (v16 = 1), v16)))
      {
        if (!(*(unsigned int (**)(uint64_t, _BYTE *, void **))(*(_QWORD *)v6 + 64))(v6, v13, &v213))
          goto LABEL_48;
      }
      v17 = (_DWORD *)*((_QWORD *)v13 + 4);
      v18 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (v17[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)(*(_QWORD *)(v10 + 264)
                     + 24
                     * (*(unsigned __int16 *)(*(_QWORD *)v18 + 24)
                      + *(_DWORD *)(v10 + 272) * ((*(_QWORD *)(v10 + 248) - *(_QWORD *)(v10 + 240)) >> 3))) & 0x1F) != 0
        || sub_1C4A94DE0(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (v17[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (*v17 >> 8) & 0xFFF, v10))
      {
        goto LABEL_19;
      }
      v36 = v17[1];
      if ((v36 & 0x80000000) != 0)
        v37 = (unsigned int **)(*(_QWORD *)(v7 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
      else
        v37 = (unsigned int **)(*(_QWORD *)(v7 + 272) + 8 * v36);
      v41 = *v37;
      if (*v37)
      {
        v42 = *v41;
        if ((*v41 & 0x1000000) != 0
          || (v41 = (unsigned int *)*((_QWORD *)v41 + 3)) != 0 && (v42 = *v41, (*v41 & 0x1000000) != 0))
        {
          while (!sub_1C4A94DE0(v18, (v42 >> 8) & 0xFFF, v10))
          {
            v41 = (unsigned int *)*((_QWORD *)v41 + 3);
            if (v41)
            {
              v42 = *v41;
              if ((*v41 & 0x1000000) != 0)
                continue;
            }
            LODWORD(v36) = v17[1];
            goto LABEL_61;
          }
LABEL_19:
          v216 = v13;
          sub_1C4A06BC4(a1 + 576, &v216);
          v19 = *(_DWORD *)(*((_QWORD *)v13 + 4) + 4);
          if ((v19 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a3 + 416)
            || (v20 = *(llvm::LiveInterval **)(*(_QWORD *)(a3 + 408) + 8 * (v19 & 0x7FFFFFFF))) == 0)
          {
            v20 = (llvm::LiveInterval *)sub_1C4851220(a3, v19);
            v45 = *(_QWORD *)(a3 + 304);
            v46 = *(_QWORD *)(a3 + 248);
            *(_QWORD *)v45 = v46;
            *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 40);
            *(_OWORD *)(v45 + 16) = *(_OWORD *)(a3 + 288);
            *(_QWORD *)(v45 + 32) = v201;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v45);
            *(_DWORD *)(v45 + 184) = 0;
            v47 = *(_QWORD *)(a3 + 256);
            v15 = *(_BYTE *)(v47 + 16) == 0;
            v48 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v47 + 24) + 16 * (*((_DWORD *)v20 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                     + 34);
            v50 = !v15 && v48 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a3 + 304), v20, v50);
            llvm::LiveIntervals::computeDeadValues(a3, (uint64_t)v20, 0);
          }
          v216 = 0;
          if ((sub_1C4A9633C(*(_QWORD *)(a1 + 624), *(_DWORD *)(a1 + 640), (uint64_t)v20, &v216) & 1) == 0)
          {
            v21 = *(_DWORD *)(a1 + 640);
            v22 = *(_DWORD *)(a1 + 632);
            if (4 * v22 + 4 >= 3 * v21)
            {
              v21 *= 2;
            }
            else if (v21 + ~v22 - *(_DWORD *)(a1 + 636) > v21 >> 3)
            {
              goto LABEL_24;
            }
            sub_1C4A963C4(a1 + 624, v21);
            v216 = 0;
            sub_1C4A9633C(*(_QWORD *)(a1 + 624), *(_DWORD *)(a1 + 640), (uint64_t)v20, &v216);
LABEL_24:
            v23 = v216;
            ++*(_DWORD *)(a1 + 632);
            if (*v23 != -4096)
              --*(_DWORD *)(a1 + 636);
            *v23 = v20;
            v24 = *(llvm::LiveInterval ***)(a1 + 656);
            v25 = *(_QWORD *)(a1 + 664);
            if ((unint64_t)v24 >= v25)
            {
              v27 = a3;
              v28 = v6;
              v29 = v7;
              v30 = *(_QWORD **)(a1 + 648);
              v31 = v24 - (llvm::LiveInterval **)v30;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                abort();
              v33 = v25 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                if (v34 >> 61)
                  sub_1C4764EE4();
                v35 = (char *)operator new(8 * v34);
              }
              else
              {
                v35 = 0;
              }
              v38 = (llvm::LiveInterval **)&v35[8 * v31];
              *v38 = v20;
              v26 = v38 + 1;
              if (v24 == v30)
              {
                v40 = (_QWORD *)a1;
              }
              else
              {
                do
                {
                  v39 = *--v24;
                  *--v38 = v39;
                }
                while (v24 != v30);
                v40 = (_QWORD *)a1;
                v24 = *(llvm::LiveInterval ***)(a1 + 648);
              }
              v40[81] = v38;
              v40[82] = v26;
              v40[83] = &v35[8 * v34];
              v7 = v29;
              if (v24)
                operator delete(v24);
              v6 = v28;
              a3 = v27;
              v10 = v210;
            }
            else
            {
              *v24 = v20;
              v26 = v24 + 1;
            }
            *(_QWORD *)(a1 + 656) = v26;
          }
LABEL_48:
          if ((*v13 & 4) != 0)
            goto LABEL_70;
          goto LABEL_69;
        }
      }
LABEL_61:
      if ((v36 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a3 + 416)
        || (v43 = *(_QWORD *)(*(_QWORD *)(a3 + 408) + 8 * (v36 & 0x7FFFFFFF))) == 0)
      {
        v43 = sub_1C4851220(a3, v36);
        v51 = *(_QWORD *)(a3 + 304);
        v52 = *(_QWORD *)(a3 + 248);
        *(_QWORD *)v51 = v52;
        *(_QWORD *)(v51 + 8) = *(_QWORD *)(v52 + 40);
        *(_OWORD *)(v51 + 16) = *(_OWORD *)(a3 + 288);
        *(_QWORD *)(v51 + 32) = v201;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v51);
        *(_DWORD *)(v51 + 184) = 0;
        v53 = *(_QWORD *)(a3 + 256);
        v15 = *(_BYTE *)(v53 + 16) == 0;
        v54 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v53 + 24) + 16 * (*(_DWORD *)(v43 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v56 = !v15 && v54 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a3 + 304), (llvm::LiveInterval *)v43, v56);
        llvm::LiveIntervals::computeDeadValues(a3, v43, 0);
      }
      v44 = *(int8x8_t **)(v43 + 104);
      if (v44)
      {
        while ((vaddlv_u8((uint8x8_t)vcnt_s8(v44[14])) & 1) == 0)
        {
          v44 = (int8x8_t *)v44[13];
          if (!v44)
            goto LABEL_66;
        }
        goto LABEL_19;
      }
LABEL_66:
      if (v13)
        goto LABEL_48;
LABEL_69:
      while ((*((_WORD *)v13 + 22) & 8) != 0)
        v13 = (_BYTE *)*((_QWORD *)v13 + 1);
LABEL_70:
      v13 = (_BYTE *)*((_QWORD *)v13 + 1);
      v12 = v211;
    }
    v11 = v208 + 1;
    v9 = *(_QWORD *)(v206 + 8);
  }
  while (v9 != v205);
  v202 = a1 + 744;
  if (v208 == -1)
  {
    v4 = v203;
  }
  else
  {
    v57 = (4 * v11 / 3u + 1) | ((unint64_t)(4 * v11 / 3u + 1) >> 1);
    v58 = v57 | (v57 >> 2) | ((v57 | (v57 >> 2)) >> 4);
    v59 = ((v58 | (v58 >> 8)) >> 16) | v58 | (v58 >> 8);
    v4 = v203;
    if (*(_DWORD *)(a1 + 760) <= v59)
      sub_1C4A964EC(a1 + 744, v59 + 1);
  }
LABEL_90:
  v60 = *(_QWORD *)(v4 + 328);
  if (v60 != v205)
  {
    v204 = a3 + 312;
    while (1)
    {
      v61 = *(uint64_t **)(a1 + 600);
      v212 = *(uint64_t **)(a1 + 608);
      v207 = v60;
      if (v61 != v212)
        break;
LABEL_297:
      v60 = *(_QWORD *)(v60 + 8);
      if (v60 == v205)
        return;
    }
    while (2)
    {
      v62 = *v61;
      v63 = *(_DWORD *)(*(_QWORD *)(*v61 + 32) + 4);
      if ((v63 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a3 + 416)
        || (v64 = *(unsigned int **)(*(_QWORD *)(a3 + 408) + 8 * (v63 & 0x7FFFFFFF))) == 0)
      {
        v64 = (unsigned int *)sub_1C4851220(a3, v63);
        v189 = *(_QWORD *)(a3 + 304);
        v190 = *(_QWORD *)(a3 + 248);
        *(_QWORD *)v189 = v190;
        *(_QWORD *)(v189 + 8) = *(_QWORD *)(v190 + 40);
        *(_OWORD *)(v189 + 16) = *(_OWORD *)(a3 + 288);
        *(_QWORD *)(v189 + 32) = v204;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v189);
        *(_DWORD *)(v189 + 184) = 0;
        v191 = *(_QWORD *)(a3 + 256);
        v15 = *(_BYTE *)(v191 + 16) == 0;
        v192 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v191 + 24) + 16 * (v64[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v194 = !v15 && v192 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a3 + 304), (llvm::LiveInterval *)v64, v194);
        llvm::LiveIntervals::computeDeadValues(a3, (uint64_t)v64, 0);
      }
      v65 = **(_QWORD **)v64;
      if ((v65 & 6) != 0
        && (v66 = *(_QWORD *)(*(_QWORD *)v64 + 24 * v64[2] - 16), (v66 & 6) != 0)
        && ((v67 = sub_1C499C548(*(_QWORD *)(a3 + 288), v65), v68 = sub_1C499C548(*(_QWORD *)(a3 + 288), v66), v67)
          ? (v69 = v67 == v68)
          : (v69 = 0),
            v69))
      {
        if (v67 == v60)
          goto LABEL_253;
      }
      else
      {
        v70 = *(_QWORD *)(a1 + 672);
        v71 = *(unsigned int *)(a1 + 688);
        if (!(_DWORD)v71)
          goto LABEL_268;
        v72 = v71 - 1;
        v73 = (uint64_t *)(v70 + 32 * (((_DWORD)v71 - 1) & ((v62 >> 4) ^ (v62 >> 9))));
        v74 = *v73;
        if (*v73 != v62)
        {
          v75 = 1;
          LODWORD(v76) = v72 & ((v62 >> 4) ^ (v62 >> 9));
          while (v74 != -4096)
          {
            v77 = v76 + v75++;
            v76 = v77 & v72;
            v74 = *(_QWORD *)(v70 + 32 * v76);
            if (v74 == v62)
            {
              v73 = (uint64_t *)(v70 + 32 * v76);
              goto LABEL_107;
            }
          }
LABEL_268:
          v73 = (uint64_t *)(v70 + 32 * v71);
        }
LABEL_107:
        if (v73 != (uint64_t *)(v70 + 32 * v71))
        {
          v78 = v73[1];
          v79 = v73[2];
          v80 = (unsigned int *)v73[3];
          goto LABEL_214;
        }
        v81 = *(_WORD *)(v62 + 44);
        v82 = v62;
        if ((v81 & 4) != 0)
        {
          do
            v82 = *(_QWORD *)v82 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v82 + 44) & 4) != 0);
        }
        v83 = v62;
        if ((v81 & 8) != 0)
        {
          do
            v83 = *(_QWORD *)(v83 + 8);
          while ((*(_WORD *)(v83 + 44) & 8) != 0);
        }
        v84 = *(_QWORD *)(v83 + 8);
        if (v82 != v84)
        {
          while (1)
          {
            v85 = **(unsigned __int16 **)(v82 + 16);
            v86 = v85 > 0x17;
            v87 = (1 << v85) & 0x83E000;
            if (v86 || v87 == 0)
              break;
            v82 = *(_QWORD *)(v82 + 8);
            if (v82 == v84)
            {
              v82 = v84;
              break;
            }
          }
        }
        v89 = *(_QWORD *)(a3 + 288);
        v90 = *(_QWORD *)(v89 + 368);
        v91 = *(unsigned int *)(v89 + 384);
        if ((_DWORD)v91)
        {
          LODWORD(v92) = ((v82 >> 4) ^ (v82 >> 9)) & (v91 - 1);
          v93 = (uint64_t *)(v90 + 16 * v92);
          v94 = *v93;
          if (v82 != *v93)
          {
            v95 = 1;
            while (v94 != -4096)
            {
              v96 = v92 + v95++;
              v92 = v96 & (v91 - 1);
              v94 = *(_QWORD *)(v90 + 16 * v92);
              if (v82 == v94)
              {
                v93 = (uint64_t *)(v90 + 16 * v92);
                goto LABEL_127;
              }
            }
            goto LABEL_126;
          }
        }
        else
        {
LABEL_126:
          v93 = (uint64_t *)(v90 + 16 * v91);
        }
LABEL_127:
        v97 = *(unsigned int *)(*(_QWORD *)(v62 + 32) + 4);
        v209 = v93[1];
        v98 = v97 & 0x7FFFFFFF;
        if (v98 >= *(unsigned int *)(a3 + 416) || (v99 = *(unsigned int **)(*(_QWORD *)(a3 + 408) + 8 * v98)) == 0)
        {
          v99 = (unsigned int *)sub_1C4851220(a3, v97);
          v195 = *(_QWORD *)(a3 + 304);
          v196 = *(_QWORD *)(a3 + 248);
          *(_QWORD *)v195 = v196;
          *(_QWORD *)(v195 + 8) = *(_QWORD *)(v196 + 40);
          *(_OWORD *)(v195 + 16) = *(_OWORD *)(a3 + 288);
          *(_QWORD *)(v195 + 32) = v204;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v195);
          *(_DWORD *)(v195 + 184) = 0;
          v197 = *(_QWORD *)(a3 + 256);
          v15 = *(_BYTE *)(v197 + 16) == 0;
          v198 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v197 + 24) + 16 * (v99[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v200 = !v15 && v198 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a3 + 304), (llvm::LiveInterval *)v99, v200);
          llvm::LiveIntervals::computeDeadValues(a3, (uint64_t)v99, 0);
        }
        v100 = *(_QWORD *)(v62 + 24);
        v101 = *(_QWORD *)(*(_QWORD *)(v100 + 32) + 40);
        v216 = v218;
        v217 = 0x400000000;
        if ((v97 & 0x80000000) != 0)
          v102 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * v98 + 8);
        else
          v102 = (uint64_t *)(*(_QWORD *)(v101 + 272) + 8 * v97);
        v103 = *v102;
        if (*v102)
        {
          while ((*(_BYTE *)(v103 + 3) & 1) != 0)
          {
            v103 = *(_QWORD *)(v103 + 24);
            if (!v103)
              goto LABEL_135;
          }
          v104 = 0;
          v120 = *(_QWORD *)(v103 + 8);
LABEL_156:
          v121 = *(_WORD *)(v120 + 44);
          v122 = v120;
          if ((v121 & 4) != 0)
          {
            do
              v122 = *(_QWORD *)v122 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v122 + 44) & 4) != 0);
          }
          v123 = v120;
          if ((v121 & 8) != 0)
          {
            do
              v123 = *(_QWORD *)(v123 + 8);
            while ((*(_WORD *)(v123 + 44) & 8) != 0);
          }
          v124 = *(_QWORD *)(v123 + 8);
          if (v122 != v124)
          {
            while (1)
            {
              v125 = **(unsigned __int16 **)(v122 + 16);
              v86 = v125 > 0x17;
              v126 = (1 << v125) & 0x83E000;
              if (v86 || v126 == 0)
                break;
              v122 = *(_QWORD *)(v122 + 8);
              if (v122 == v124)
              {
                v122 = v124;
                break;
              }
            }
          }
          v128 = *(_QWORD *)(a3 + 288);
          v129 = *(_QWORD *)(v128 + 368);
          v130 = *(unsigned int *)(v128 + 384);
          if ((_DWORD)v130)
          {
            LODWORD(v131) = ((v122 >> 4) ^ (v122 >> 9)) & (v130 - 1);
            v132 = (uint64_t *)(v129 + 16 * v131);
            v133 = *v132;
            if (v122 != *v132)
            {
              v134 = 1;
              while (v133 != -4096)
              {
                v135 = v131 + v134++;
                v131 = v135 & (v130 - 1);
                v133 = *(_QWORD *)(v129 + 16 * v131);
                if (v122 == v133)
                {
                  v132 = (uint64_t *)(v129 + 16 * v131);
                  goto LABEL_172;
                }
              }
              goto LABEL_171;
            }
          }
          else
          {
LABEL_171:
            v132 = (uint64_t *)(v129 + 16 * v130);
          }
LABEL_172:
          v136 = v132[1];
          if (v104 >= HIDWORD(v217))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v104 + 1, 16);
            v104 = v217;
          }
          v137 = (char *)v216 + 16 * v104;
          *v137 = v136;
          v137[1] = v120;
          v104 = v217 + 1;
          LODWORD(v217) = v217 + 1;
          v138 = *(_QWORD *)(v103 + 8);
          v60 = v207;
          while (1)
          {
            v103 = *(_QWORD *)(v103 + 24);
            if (!v103)
              break;
            if ((*(_BYTE *)(v103 + 3) & 1) == 0)
            {
              v120 = *(_QWORD *)(v103 + 8);
              if (v120 != v138)
                goto LABEL_156;
            }
          }
        }
        else
        {
LABEL_135:
          v104 = 0;
        }
        v105 = **(_QWORD **)v99;
        if ((v105 & 6) != 0
          && (v106 = *(_QWORD *)(*(_QWORD *)v99 + 24 * v99[2] - 16), (v106 & 6) != 0)
          && ((v107 = sub_1C499C548(*(_QWORD *)(a3 + 288), v105), v108 = sub_1C499C548(*(_QWORD *)(a3 + 288), v106),
                                                                  v107)
            ? (v109 = v107 == v108)
            : (v109 = 0),
              v104 = v217,
              v109))
        {
          v139 = 126 - 2 * __clz(v217);
          if ((_DWORD)v217)
            v140 = v139;
          else
            v140 = 0;
          sub_1C4A9539C((unint64_t)v216, (uint64_t *)v216 + 2 * v217, v140, 1);
          v104 = v217;
          if (!(_DWORD)v217)
          {
            v110 = v215;
            v213 = v215;
            v214 = 0x400000000;
            v111 = (uint64_t *)v215;
            goto LABEL_193;
          }
          v141 = (unint64_t *)((char *)v216 + 8);
          v142 = 16 * v217;
          while (((*(v141 - 1) >> 1) & 3 | *(_DWORD *)((*(v141 - 1) & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v209 & 0xFFFFFFFFFFFFFFF8) + 24) | (v209 >> 1) & 3))
          {
            v141 += 2;
            v142 -= 16;
            if (!v142)
              goto LABEL_142;
          }
          v79 = *v141;
          if (!*v141)
            goto LABEL_142;
          v80 = 0;
        }
        else
        {
LABEL_142:
          v110 = v215;
          v213 = v215;
          v214 = 0x400000000;
          v111 = (uint64_t *)v215;
          if (v104)
          {
            v112 = 0;
            v113 = (char *)v216 + 8;
            v114 = 16 * v104;
            do
            {
              v115 = *(_QWORD *)v113;
              if (*(_QWORD *)(*(_QWORD *)v113 + 24) == v100 || (_DWORD)v217 == 1)
              {
                v117 = *((_QWORD *)v113 - 1);
                if (v112 >= HIDWORD(v214))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v213, (uint64_t)v215, v112 + 1, 16);
                  v112 = v214;
                }
                v118 = (char *)v213 + 16 * v112;
                *v118 = v117;
                v118[1] = v115;
                v112 = v214 + 1;
                LODWORD(v214) = v214 + 1;
              }
              v113 += 16;
              v114 -= 16;
            }
            while (v114);
            v110 = v213;
            v111 = (uint64_t *)((char *)v213 + 16 * v112);
            if (v112)
            {
              v119 = 126 - 2 * __clz(v112);
              v60 = v207;
              goto LABEL_194;
            }
            v60 = v207;
          }
LABEL_193:
          v119 = 0;
LABEL_194:
          sub_1C4A9539C((unint64_t)v110, v111, v119, 1);
          if ((_DWORD)v214)
          {
            v143 = (unint64_t *)((char *)v213 + 8);
            v144 = 16 * v214;
            while (((*(v143 - 1) >> 1) & 3 | *(_DWORD *)((*(v143 - 1) & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v209 & 0xFFFFFFFFFFFFFFF8) + 24) | (v209 >> 1) & 3))
            {
              v143 += 2;
              v144 -= 16;
              if (!v144)
                goto LABEL_198;
            }
            v79 = *v143;
          }
          else
          {
LABEL_198:
            v79 = 0;
          }
          if (v213 != v215)
            free(v213);
          if (v79)
            v80 = 0;
          else
            v80 = v99;
        }
        v213 = 0;
        v145 = sub_1C4A96148(*(_QWORD *)(a1 + 672), *(_DWORD *)(a1 + 688), v62, &v213);
        v146 = v213;
        if ((v145 & 1) == 0)
        {
          v147 = *(_DWORD *)(a1 + 680);
          v148 = *(_DWORD *)(a1 + 688);
          if (4 * v147 + 4 >= 3 * v148)
          {
            v148 *= 2;
          }
          else if (v148 + ~v147 - *(_DWORD *)(a1 + 684) > v148 >> 3)
          {
            goto LABEL_208;
          }
          sub_1C4A961D0(a1 + 672, v148);
          v213 = 0;
          sub_1C4A96148(*(_QWORD *)(a1 + 672), *(_DWORD *)(a1 + 688), v62, &v213);
          v146 = v213;
LABEL_208:
          ++*(_DWORD *)(a1 + 680);
          if (*v146 != -4096)
            --*(_DWORD *)(a1 + 684);
          *v146 = v62;
          v146[1] = 0;
          v146[2] = 0;
          v146[3] = 0;
        }
        v146[1] = v62;
        v146[2] = v79;
        v146[3] = v80;
        if (v216 != v218)
          free(v216);
        v78 = v62;
LABEL_214:
        v149 = *(_QWORD *)(a3 + 288);
        v150 = *(_WORD *)(v78 + 44);
        v151 = v78;
        if ((v150 & 4) != 0)
        {
          do
            v151 = *(_QWORD *)v151 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v151 + 44) & 4) != 0);
        }
        if ((v150 & 8) != 0)
        {
          do
            v78 = *(_QWORD *)(v78 + 8);
          while ((*(_WORD *)(v78 + 44) & 8) != 0);
        }
        v152 = *(_QWORD *)(v78 + 8);
        if (v151 != v152)
        {
          while (1)
          {
            v153 = **(unsigned __int16 **)(v151 + 16);
            v86 = v153 > 0x17;
            v154 = (1 << v153) & 0x83E000;
            if (v86 || v154 == 0)
              break;
            v151 = *(_QWORD *)(v151 + 8);
            if (v151 == v152)
            {
              v151 = v152;
              break;
            }
          }
        }
        v156 = *(_QWORD *)(v149 + 368);
        v157 = *(unsigned int *)(v149 + 384);
        if ((_DWORD)v157)
        {
          LODWORD(v158) = ((v151 >> 4) ^ (v151 >> 9)) & (v157 - 1);
          v159 = (uint64_t *)(v156 + 16 * v158);
          v160 = *v159;
          if (v151 != *v159)
          {
            v161 = 1;
            while (v160 != -4096)
            {
              v162 = v158 + v161++;
              v158 = v162 & (v157 - 1);
              v160 = *(_QWORD *)(v156 + 16 * v158);
              if (v151 == v160)
              {
                v159 = (uint64_t *)(v156 + 16 * v158);
                goto LABEL_230;
              }
            }
            goto LABEL_229;
          }
        }
        else
        {
LABEL_229:
          v159 = (uint64_t *)(v156 + 16 * v157);
        }
LABEL_230:
        v163 = v159[1];
        if (v80)
        {
          v175 = (uint64_t *)(*(_QWORD *)v80 + 24 * v80[2] - 16);
        }
        else
        {
          v164 = *(_WORD *)(v79 + 44);
          v165 = v79;
          if ((v164 & 4) != 0)
          {
            do
              v165 = *(_QWORD *)v165 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v165 + 44) & 4) != 0);
          }
          if ((v164 & 8) != 0)
          {
            do
              v79 = *(_QWORD *)(v79 + 8);
            while ((*(_WORD *)(v79 + 44) & 8) != 0);
          }
          v166 = *(_QWORD *)(v79 + 8);
          if (v165 != v166)
          {
            while (1)
            {
              v167 = **(unsigned __int16 **)(v165 + 16);
              v86 = v167 > 0x17;
              v168 = (1 << v167) & 0x83E000;
              if (v86 || v168 == 0)
                break;
              v165 = *(_QWORD *)(v165 + 8);
              if (v165 == v166)
              {
                v165 = *(_QWORD *)(v79 + 8);
                break;
              }
            }
          }
          if ((_DWORD)v157)
          {
            LODWORD(v170) = ((v165 >> 4) ^ (v165 >> 9)) & (v157 - 1);
            v171 = (uint64_t *)(v156 + 16 * v170);
            v172 = *v171;
            if (v165 != *v171)
            {
              v173 = 1;
              while (v172 != -4096)
              {
                v174 = v170 + v173++;
                v170 = v174 & (v157 - 1);
                v172 = *(_QWORD *)(v156 + 16 * v170);
                if (v165 == v172)
                {
                  v171 = (uint64_t *)(v156 + 16 * v170);
                  goto LABEL_248;
                }
              }
              goto LABEL_247;
            }
          }
          else
          {
LABEL_247:
            v171 = (uint64_t *)(v156 + 16 * v157);
          }
LABEL_248:
          v175 = v171 + 1;
        }
        v176 = *v175;
        v177 = *(unsigned int *)(v60 + 24);
        v178 = *(_QWORD *)(v149 + 392);
        v179 = *(_DWORD *)((v163 & 0xFFFFFFFFFFFFFFF8) + 24) | (v163 >> 1) & 3;
        v180 = (*(_QWORD *)(v178 + 16 * v177) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v178 + 16 * v177) & 0xFFFFFFFFFFFFFFF8)
                                                                                  + 24);
        if (v179 <= v180 && v180 < (*(_DWORD *)((v176 & 0xFFFFFFFFFFFFFFF8) + 24) | (v176 >> 1) & 3)
          || (v181 = (*(_QWORD *)(v178 + 16 * v177 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v178 + 16 * v177 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 24),
              v179 <= v181)
          && v181 < (*(_DWORD *)((v176 & 0xFFFFFFFFFFFFFFF8) + 24) | (v176 >> 1) & 3))
        {
LABEL_253:
          v216 = 0;
          v182 = sub_1C4A965B0(*(_QWORD *)(a1 + 744), *(_DWORD *)(a1 + 760), v60, &v216);
          v183 = (char *)v216;
          if ((v182 & 1) != 0)
          {
            v188 = (char *)v216 + 16;
            v186 = *((unsigned int *)v216 + 4);
            v187 = (char *)v216 + 8;
            if (v186 >= *((unsigned int *)v216 + 5))
              goto LABEL_259;
          }
          else
          {
            v184 = *(_DWORD *)(a1 + 752);
            v185 = *(_DWORD *)(a1 + 760);
            if (4 * v184 + 4 >= 3 * v185)
            {
              v185 *= 2;
            }
            else if (v185 + ~v184 - *(_DWORD *)(a1 + 756) > v185 >> 3)
            {
              goto LABEL_256;
            }
            sub_1C4A964EC(v202, v185);
            v216 = 0;
            sub_1C4A965B0(*(_QWORD *)(a1 + 744), *(_DWORD *)(a1 + 760), v60, &v216);
            v183 = (char *)v216;
LABEL_256:
            ++*(_DWORD *)(a1 + 752);
            if (*(_QWORD *)v183 != -4096)
              --*(_DWORD *)(a1 + 756);
            v186 = 0;
            *(_QWORD *)v183 = v60;
            *((_QWORD *)v183 + 1) = v183 + 24;
            v187 = v183 + 8;
            *((_DWORD *)v183 + 4) = 0;
            v188 = v183 + 16;
            *((_DWORD *)v183 + 5) = 0;
LABEL_259:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v187, (uint64_t)(v183 + 24), v186 + 1, 8);
            v186 = *((unsigned int *)v183 + 4);
          }
          *(_QWORD *)(*v187 + 8 * v186) = v62;
          ++*v188;
        }
      }
      if (++v61 == v212)
        goto LABEL_297;
      continue;
    }
  }
}

uint64_t sub_1C4A94C28(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v6;

  sub_1C6133C1C(a1, (uint64_t)"VertexInputRegCount", (_DWORD *)(a2 + 8), 0);
  sub_1C6133C1C(a1, (uint64_t)"SampleScratchReg", (_DWORD *)(a2 + 12), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"HasIndirectBranches", (_BYTE *)(a2 + 16), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"HasRecursiveBranches", (_BYTE *)(a2 + 17), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"HasBinaryLinkingBranches", (_BYTE *)(a2 + 18), 0);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1))
    v4 = *(_DWORD *)(a2 + 32) == 0;
  else
    v4 = 0;
  if (!v4)
    sub_1C6152D60(a1, a2 + 24);
  v6 = 0;
  sub_1C4A94F5C(a1, (uint64_t)"LRFISlot", a2 + 56, &v6);
  v6 = 0;
  sub_1C4A94F5C(a1, (uint64_t)"CtlFlowStFISlot", a2 + 64, &v6);
  v6 = 0;
  sub_1C495C6D8(a1, (uint64_t)"Max4BIRRegUsed", a2 + 72, &v6, 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"UseAbsoluteStackAddress", (_BYTE *)(a2 + 80), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"HasRayQuery", (_BYTE *)(a2 + 81), 0);
  sub_1C61478D8(a1, (uint64_t)"TLSAllocSize", (uint64_t *)(a2 + 84), 0);
  return sub_1C6147850((uint64_t)a1, (uint64_t)"UsedGIN1123Fix", (_BYTE *)(a2 + 88), 0);
}

BOOL sub_1C4A94DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(_DWORD)a2)
    return 0;
  if (a2 >= 0x11)
    return (*(_BYTE *)(*(_QWORD *)(a3 + 264)
                     + 24
                     * (*(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 200))(a3, a1, a2)+ 24)+ *(_DWORD *)(a3 + 272) * ((*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 3))) & 0x1F) != 0;
  return 1;
}

uint64_t sub_1C4A94E64(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    v5 = *(unsigned int *)(a2 + 8);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      v9 = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 72))(a1, i, &v9))
      {
        if (i >= *(unsigned int *)(a2 + 8))
          sub_1C49F6D78(a2, i + 1);
        sub_1C495C580(a1, (uint64_t *)(*(_QWORD *)a2 + v6));
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 80))(a1, v9);
      }
      v6 += 4;
    }
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
}

uint64_t sub_1C4A94F5C(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  uint64_t v21;

  v20 = 1;
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if (*(_BYTE *)(a3 + 4))
    v9 = 0;
  else
    v9 = v8;
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if ((result & 1) != 0)
  {
    if (!*(_BYTE *)(a3 + 4))
    {
LABEL_27:
      *(_QWORD *)a3 = *a4;
      return result;
    }
  }
  else if (!*(_BYTE *)(a3 + 4))
  {
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 4) = 1;
  }
  v21 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, v9, &v20, &v21);
  if (!(_DWORD)result)
  {
    if (!v20)
      return result;
    goto LABEL_27;
  }
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) != 0)
    goto LABEL_24;
  v11 = a1[37];
  if (!v11)
    goto LABEL_24;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12 || *(_DWORD *)(v12 + 32) != 1)
    goto LABEL_24;
  v13 = *(int **)(v12 + 72);
  v14 = *(_QWORD *)(v12 + 80);
  v15 = v14;
  do
  {
    v16 = v15;
    if (!v15)
      break;
    --v15;
  }
  while (*((_BYTE *)v13 + v16 - 1) == 32);
  if (v16 < v14)
    v14 = v16;
  if (v14 == 6
    && ((v17 = *v13, v18 = *((unsigned __int16 *)v13 + 2), v17 == 1852796476) ? (v19 = v18 == 15973) : (v19 = 0), v19))
  {
    *(_QWORD *)a3 = *a4;
  }
  else
  {
LABEL_24:
    sub_1C495C580(a1, (uint64_t *)a3);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v21);
}

uint64_t sub_1C4A950E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  *(_QWORD *)a1 = &off_1E7FAD378;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 768), 8);
  sub_1C4A952E0(a1 + 744);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 744), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 720), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 696), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 672), 8);
  v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(_QWORD *)(a1 + 656) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 624), 8);
  v3 = *(void **)(a1 + 600);
  if (v3)
  {
    *(_QWORD *)(a1 + 608) = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 576), 8);
  v4 = *(void **)(a1 + 504);
  if (v4 != (void *)(a1 + 520))
    free(v4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 456), 4);
  sub_1C495C918(a1 + 432);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 432), 8);
  v5 = *(char **)(a1 + 256);
  v6 = *(unsigned int *)(a1 + 264);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = v5 - 16;
    do
    {
      sub_1C4914448((void ***)&v8[v7]);
      v7 -= 16;
    }
    while (v7);
    v5 = *(char **)(a1 + 256);
  }
  if (v5 != (char *)(a1 + 272))
    free(v5);
  sub_1C4A95348((uint64_t *)(a1 + 232));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 232), 8);
  sub_1C4A95348((uint64_t *)(a1 + 208));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 184), 8);
  v9 = *(unsigned int *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 160);
  if ((_DWORD)v9)
  {
    v11 = (uint64_t *)(v10 + 8);
    v12 = 16 * v9;
    do
    {
      if ((*(v11 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      }
      v11 += 2;
      v12 -= 16;
    }
    while (v12);
    v10 = *(_QWORD *)(a1 + 160);
  }
  MEMORY[0x1CAA32FB4](v10, 8);
  v14 = *(char **)(a1 + 16);
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = v14 - 8;
    do
    {
      v18 = *(_QWORD *)&v17[v16];
      *(_QWORD *)&v17[v16] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v16 -= 8;
    }
    while (v16);
    v14 = *(char **)(a1 + 16);
  }
  if (v14 != (char *)(a1 + 32))
    free(v14);
  return a1;
}

void sub_1C4A952E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      v4 = *(_QWORD *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
          free(v5);
      }
      v3 += 24;
      v2 -= 24;
    }
    while (v2);
  }
}

void sub_1C4A95348(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v1)
  {
    v2 = *a1;
    v3 = 32 * v1;
    do
    {
      if ((*(_QWORD *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      v2 += 32;
      v3 -= 32;
    }
    while (v3);
  }
}

unint64_t sub_1C4A9539C(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v45 = *v8;
        v46 = *(a2 - 2);
        if (((v46 >> 1) & 3 | *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v8 >> 1) & 3))
        {
          v47 = v8[1];
          v48 = *(a2 - 1);
          *v8 = v46;
          v8[1] = v48;
          *(a2 - 2) = v45;
          *(a2 - 1) = v47;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C4A95D90(v8, v8 + 2, a2 - 2);
      case 4:
        return (unint64_t)sub_1C4A9604C(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        return (unint64_t)sub_1C4A95C44(v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
      default:
        if (v9 <= 383)
        {
          v49 = v8 + 2;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 0;
              v53 = v8;
              do
              {
                v54 = v49;
                v55 = *v53;
                v56 = v53[2];
                v57 = (v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v57 < (*(_DWORD *)((*v53 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v53 >> 1) & 3))
                {
                  v58 = v53[3];
                  v59 = v52;
                  while (1)
                  {
                    v60 = (char *)v8 + v59;
                    v61 = *(uint64_t *)((char *)v8 + v59 + 8);
                    *((_QWORD *)v60 + 2) = v55;
                    *((_QWORD *)v60 + 3) = v61;
                    if (!v59)
                      break;
                    v55 = *((_QWORD *)v60 - 2);
                    v59 -= 16;
                    if (v57 >= ((v55 >> 1) & 3 | *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24)))
                    {
                      v62 = (uint64_t *)((char *)v8 + v59 + 16);
                      goto LABEL_76;
                    }
                  }
                  v62 = v8;
LABEL_76:
                  *v62 = v56;
                  v62[1] = v58;
                }
                v49 = v54 + 2;
                v52 += 16;
                v53 = v54;
              }
              while (v54 + 2 != a2);
            }
          }
          else if (!v51)
          {
            v98 = v8 + 3;
            do
            {
              v99 = v49;
              v100 = *v7;
              v101 = v7[2];
              v102 = (v101 >> 1) & 3 | *(_DWORD *)((v101 & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v102 < (*(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v7 >> 1) & 3))
              {
                v103 = v7[3];
                v104 = v98;
                do
                {
                  v105 = v104;
                  *(v104 - 1) = v100;
                  v106 = *(v104 - 2);
                  v104 -= 2;
                  *v105 = v106;
                  v100 = *(v105 - 5);
                }
                while (v102 < ((v100 >> 1) & 3 | *(_DWORD *)((v100 & 0xFFFFFFFFFFFFFFF8) + 24)));
                *(v104 - 1) = v101;
                *v104 = v103;
              }
              v49 = v99 + 2;
              v98 += 2;
              v7 = v99;
            }
            while (v99 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v63 = (unint64_t)(v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = &v8[2 * v66];
                if (2 * v65 + 2 >= v10)
                {
                  v68 = *v67;
                }
                else
                {
                  v68 = *v67;
                  if (((*v67 >> 1) & 3 | *(_DWORD *)((*v67 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v67[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v67[2] >> 1) & 3))
                  {
                    v68 = v67[2];
                    v67 += 2;
                    v66 = 2 * v65 + 2;
                  }
                }
                v69 = &v8[2 * v65];
                v70 = *v69;
                result = (*v69 >> 1) & 3;
                v71 = result | *(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFF8) + 24);
                if ((*(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24) | (v68 >> 1) & 3) >= v71)
                {
                  v72 = v69[1];
                  do
                  {
                    result = (unint64_t)v69;
                    v69 = v67;
                    v73 = v67[1];
                    *(_QWORD *)result = v68;
                    *(_QWORD *)(result + 8) = v73;
                    if (v63 < v66)
                      break;
                    v74 = (2 * v66) | 1;
                    v67 = &v8[2 * v74];
                    v66 = 2 * v66 + 2;
                    if (v66 >= v10)
                    {
                      v68 = *v67;
                      v66 = v74;
                    }
                    else
                    {
                      v68 = v67[2];
                      v75 = (*v67 >> 1) & 3 | *(_DWORD *)((*v67 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v76 = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24) | (v68 >> 1) & 3;
                      if (v75 < v76)
                        v67 += 2;
                      else
                        v68 = *v67;
                      if (v75 >= v76)
                        v66 = v74;
                    }
                    result = (v68 >> 1) & 3 | *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24);
                  }
                  while (result >= v71);
                  *v69 = v70;
                  v69[1] = v72;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            do
            {
              v77 = 0;
              v78 = *v8;
              v79 = v8[1];
              v80 = v8;
              do
              {
                v81 = &v80[2 * v77 + 2];
                v82 = (2 * v77) | 1;
                v77 = 2 * v77 + 2;
                if (v77 >= v10)
                {
                  v83 = *v81;
                  v77 = v82;
                }
                else
                {
                  v83 = v81[2];
                  result = *v81;
                  v84 = (*v81 >> 1) & 3 | *(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v85 = *(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 24) | (v83 >> 1) & 3;
                  if (v84 < v85)
                    v81 += 2;
                  else
                    v83 = *v81;
                  if (v84 >= v85)
                    v77 = v82;
                }
                v86 = v81[1];
                *v80 = v83;
                v80[1] = v86;
                v80 = v81;
              }
              while (v77 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v81 == a2 - 2)
              {
                *v81 = v78;
                v81[1] = v79;
              }
              else
              {
                v87 = *(a2 - 1);
                *v81 = *(a2 - 2);
                v81[1] = v87;
                *(a2 - 2) = v78;
                *(a2 - 1) = v79;
                v88 = (char *)v81 - (char *)v8 + 16;
                if (v88 >= 17)
                {
                  v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                  v90 = &v8[2 * v89];
                  v91 = *v81;
                  v92 = *v90;
                  v93 = *(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v81 >> 1) & 3;
                  if (((*v90 >> 1) & 3 | *(_DWORD *)((*v90 & 0xFFFFFFFFFFFFFFF8) + 24)) < v93)
                  {
                    v94 = v81[1];
                    do
                    {
                      v95 = v81;
                      v81 = v90;
                      v96 = v90[1];
                      *v95 = v92;
                      v95[1] = v96;
                      if (!v89)
                        break;
                      v89 = (v89 - 1) >> 1;
                      v90 = &v8[2 * v89];
                      v92 = *v90;
                      result = (*v90 >> 1) & 3;
                    }
                    while ((result | *(_DWORD *)((*v90 & 0xFFFFFFFFFFFFFFF8) + 24)) < v93);
                    *v81 = v91;
                    v81[1] = v94;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = (unint64_t)sub_1C4A95D90(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C4A95D90(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_1C4A95D90(v7 + 2, v12 - 2, a2 - 4);
          sub_1C4A95D90(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = (unint64_t)sub_1C4A95D90(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          v14 = v7[1];
          v15 = v12[1];
          *v7 = *v12;
          v7[1] = v15;
          *v12 = v13;
          v12[1] = v14;
        }
        --a3;
        v16 = *v7;
        if ((a4 & 1) == 0)
        {
          v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
          if (((*(v7 - 2) >> 1) & 3 | *(_DWORD *)((*(v7 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) < v17)
            goto LABEL_12;
          if (v17 >= ((*(a2 - 2) >> 1) & 3 | *(_DWORD *)((*(a2 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            v34 = v7 + 2;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v34 += 2;
            }
            while (v17 >= ((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)));
          }
          else
          {
            v8 = v7;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v17 >= ((v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24)));
          }
          v35 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v36 = *(v35 - 2);
              v35 -= 2;
            }
            while (v17 < ((v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24)));
          }
          v37 = v7[1];
          if (v8 < v35)
          {
            v38 = *v8;
            v39 = *v35;
            do
            {
              v40 = v8[1];
              v41 = v35[1];
              *v8 = v39;
              v8[1] = v41;
              *v35 = v38;
              v35[1] = v40;
              do
              {
                v42 = v8[2];
                v8 += 2;
                v38 = v42;
              }
              while (v17 >= ((v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24)));
              do
              {
                v43 = *(v35 - 2);
                v35 -= 2;
                v39 = v43;
              }
              while (v17 < ((v43 >> 1) & 3 | *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24)));
            }
            while (v8 < v35);
          }
          if (v8 - 2 != v7)
          {
            v44 = *(v8 - 1);
            *v7 = *(v8 - 2);
            v7[1] = v44;
          }
          a4 = 0;
          *(v8 - 2) = v16;
          *(v8 - 1) = v37;
          continue;
        }
        v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
LABEL_12:
        v18 = 0;
        v19 = v7[1];
        do
        {
          v20 = v7[v18 + 2];
          v18 += 2;
        }
        while (((v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24)) < v17);
        v21 = &v7[v18];
        v22 = a2;
        if (v18 == 2)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (((v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v17);
        }
        else
        {
          do
          {
            v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (((v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v17);
        }
        if (v21 >= v22)
        {
          v8 = &v7[v18];
        }
        else
        {
          v25 = *v22;
          v8 = &v7[v18];
          v26 = v22;
          do
          {
            v27 = v8[1];
            v28 = v26[1];
            *v8 = v25;
            v8[1] = v28;
            *v26 = v20;
            v26[1] = v27;
            do
            {
              v29 = v8[2];
              v8 += 2;
              v20 = v29;
            }
            while (((v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24)) < v17);
            do
            {
              v30 = *(v26 - 2);
              v26 -= 2;
              v25 = v30;
            }
            while (((v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v17);
          }
          while (v8 < v26);
        }
        if (v8 - 2 != v7)
        {
          v31 = *(v8 - 1);
          *v7 = *(v8 - 2);
          v7[1] = v31;
        }
        *(v8 - 2) = v16;
        *(v8 - 1) = v19;
        if (v21 < v22)
        {
LABEL_33:
          result = sub_1C4A9539C(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = sub_1C4A95E8C(v7, v8 - 2);
        result = sub_1C4A95E8C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C4A95C44(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_1C4A9604C(a1, a2, a3, a4);
  v11 = *a4;
  if (((*a5 >> 1) & 3 | *(_DWORD *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a4 >> 1) & 3))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a4;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a3;
    if (((v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3))
    {
      *a3 = v12;
      *a4 = v14;
      v15 = *a3;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a2;
      if (((v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
      {
        *a2 = v15;
        *a3 = v17;
        v18 = *a2;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a1;
        if (((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
        {
          v21 = a1[1];
          v22 = a2[1];
          *a1 = v18;
          a1[1] = v22;
          *a2 = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C4A95D90(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *result;
  v4 = *a2;
  v5 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
  v7 = *a3;
  v8 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v4;
      v11 = *a2;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *result;
      if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3))
      {
        v14 = result[1];
        v15 = a2[1];
        *result = v11;
        result[1] = v15;
        *a2 = v13;
        a2[1] = v14;
      }
    }
  }
  else if (v8 >= v5)
  {
    v16 = result[1];
    v17 = a2[1];
    *result = v4;
    result[1] = v17;
    *a2 = v3;
    a2[1] = v16;
    if (((*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24)) < v6)
    {
      v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v3;
      a3[1] = v16;
    }
  }
  else
  {
    v9 = result[1];
    v10 = a3[1];
    *result = v7;
    result[1] = v10;
    *a3 = v3;
    a3[1] = v9;
  }
  return result;
}

BOOL sub_1C4A95E8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(a2 - 2);
      if (((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      {
        v8 = a1[1];
        v9 = *(a2 - 1);
        *a1 = v7;
        a1[1] = v9;
        *(a2 - 2) = v6;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1C4A95D90(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C4A9604C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C4A95C44(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      sub_1C4A95D90(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v10;
    v15 = *v11;
    v16 = (*v11 >> 1) & 3 | *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v16 < (*(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v10 >> 1) & 3))
    {
      v17 = v11[1];
      v18 = v12;
      while (1)
      {
        v19 = (uint64_t *)((char *)a1 + v18);
        v20 = *(uint64_t *)((char *)a1 + v18 + 40);
        v19[6] = v14;
        v19[7] = v20;
        if (v18 == -32)
          break;
        v14 = v19[2];
        v18 -= 16;
        if (v16 >= ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v21 = (uint64_t *)((char *)a1 + v18 + 48);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v15;
      v21[1] = v17;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t *sub_1C4A9604C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1C4A95D90(a1, a2, a3);
  v9 = *a3;
  if (((*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a3;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a2;
    if (((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
    {
      *a2 = v10;
      *a3 = v12;
      v13 = *a2;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a1;
      if (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      {
        v16 = a1[1];
        v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C4A96148(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t result;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v9 = 0;
        else
          v9 = v6 == -8192;
        if (v9)
          v7 = v5;
        v10 = v4 + v8++;
        v4 = v10 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        if (*v5 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
  *a4 = v5;
  return result;
}

_QWORD *sub_1C4A961D0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4A96288(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4A96288(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4A96148(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1C4A9633C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4A963C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          sub_1C4A9633C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      *result++ = -4096;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

_QWORD *sub_1C4A964EC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6152DE8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4A965B0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

unint64_t sub_1C4A96648(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unint64_t PrimitiveSizeInBits;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  unsigned __int8 v17;
  BOOL v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23[8];

  if (sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), a3, (llvm::Type *)1) == 1)
    return 4;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v22);
  v10 = v22;
  if (!a6 && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
    v13 = v12;
    v14 = sub_1C47A8C74(v23);
    v16 = v15 != 1 && v13 == 1;
    if (!v16 && PrimitiveSizeInBits < v14)
    {
      v17 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), a3, 0);
      v18 = v23[0] == 0;
      if (!v17)
        v18 = 1;
      if (a2 == 33)
      {
        if (!v18)
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 179 * v23[0] + v17 + 137754);
          goto LABEL_17;
        }
      }
      else if (!v18)
      {
        v19 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 358 * v23[0] + 2 * v17 + 73672) >> 4;
LABEL_17:
        if ((v19 & 0xFFFFFFFB) == 0)
          return v10;
      }
      v21 = sub_1C6152EC8(a1, a3, a2 != 33, a2 == 33);
      if (__OFADD__(v10, v21))
        return ((uint64_t)(v10 + v21) >> 63) ^ 0x8000000000000000;
      else
        v10 += v21;
    }
  }
  return v10;
}

unint64_t sub_1C4A967D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  llvm::EVT **v14;
  llvm::EVT **v15;
  uint64_t v17;

  v5 = *(_DWORD *)(a2 + 32);
  if (v5 < 1)
    return 0;
  v11 = 0;
  v12 = 0;
  do
  {
    if (*(_DWORD *)(a3 + 8) >= 0x41u)
      v13 = (_QWORD *)(*(_QWORD *)a3 + 8 * (v11 >> 6));
    else
      v13 = (_QWORD *)a3;
    if (((*v13 >> v11) & 1) != 0)
    {
      if (a4)
      {
        v14 = (llvm::EVT **)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v14 = **(llvm::EVT ****)(a2 + 16);
        llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v14, (uint64_t)&v17);
        if (__OFADD__(v12, v17))
          v12 = ((uint64_t)(v12 + v17) >> 63) ^ 0x8000000000000000;
        else
          v12 += v17;
      }
      if (a5)
      {
        v15 = (llvm::EVT **)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v15 = **(llvm::EVT ****)(a2 + 16);
        llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v17);
        if (__OFADD__(v12, v17))
          v12 = ((uint64_t)(v12 + v17) >> 63) ^ 0x8000000000000000;
        else
          v12 += v17;
      }
    }
    ++v11;
  }
  while (v5 != v11);
  return v12;
}

unint64_t sub_1C4A9692C(unint64_t result, llvm::LiveRegUnits *this, _QWORD *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  const unsigned int **v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v7 = result;
  if ((*(_WORD *)(result + 44) & 4) != 0)
  {
    v7 = result;
    do
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  v8 = *(_QWORD *)(result + 24) + 48;
  v9 = *(const unsigned int ***)(v7 + 32);
  v10 = *(unsigned int *)(v7 + 40);
  v11 = (int *)&v9[4 * v10];
  if (!(_DWORD)v10)
  {
    v31 = *(_QWORD *)(v7 + 8);
    if (v31 == v8)
    {
      v7 = *(_QWORD *)(result + 24) + 48;
    }
    else
    {
      v7 = *(_QWORD *)(result + 24) + 48;
      if ((*(_WORD *)(v31 + 44) & 4) != 0)
      {
        do
        {
          v34 = v31;
          v35 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v35)
          {
            v7 = v31;
            goto LABEL_46;
          }
          v31 = *(_QWORD *)(v31 + 8);
        }
        while (v31 != v8 && (*(_WORD *)(v31 + 44) & 4) != 0);
        v7 = *(_QWORD *)(result + 24) + 48;
LABEL_46:
        v9 = *(const unsigned int ***)(v34 + 32);
        v11 = (int *)&v9[4 * v35];
      }
    }
  }
  while (v9 != (const unsigned int **)v11)
  {
    v12 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 == 12)
    {
      result = (unint64_t)llvm::LiveRegUnits::addRegsInMask(this, v9[2]);
      v12 = *(_DWORD *)v9;
    }
    if (!(_BYTE)v12)
    {
      v13 = *((_DWORD *)v9 + 1);
      if ((v13 - 1) <= 0x3FFFFFFE)
      {
        if ((v12 & 0x1000000) != 0)
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 112))(a4, *((unsigned int *)v9 + 1));
          if ((result & 1) == 0)
          {
            v23 = *((_QWORD *)this + 1);
            if (*(_QWORD *)this)
              v24 = (_QWORD *)(*(_QWORD *)this + 8);
            else
              v24 = 0;
            v25 = *(unsigned int *)(*v24 + 24 * (unsigned __int16)v13 + 16);
            v26 = (unsigned __int16 *)(v24[6] + ((v25 >> 3) & 0x1FFFFFFE));
            v28 = *v26;
            v27 = v26 + 1;
            v29 = v28 + (v25 & 0xF) * v13;
            do
            {
              *(_QWORD *)(v23 + 8 * ((unsigned __int16)v29 >> 6)) |= 1 << v29;
              v30 = *v27++;
              v29 += v30;
            }
            while (v30);
          }
        }
        else
        {
          v14 = a3[1];
          if (*a3)
            v15 = (_QWORD *)(*a3 + 8);
          else
            v15 = 0;
          v16 = *(unsigned int *)(*v15 + 24 * (unsigned __int16)*((_DWORD *)v9 + 1) + 16);
          v17 = (unsigned __int16 *)(v15[6] + ((v16 >> 3) & 0x1FFFFFFE));
          v19 = *v17;
          v18 = v17 + 1;
          v20 = v19 + (v16 & 0xF) * v13;
          do
          {
            *(_QWORD *)(v14 + 8 * ((unsigned __int16)v20 >> 6)) |= 1 << v20;
            v21 = *v18++;
            v20 += v21;
          }
          while (v21);
        }
      }
    }
    v9 += 4;
    if (v9 == (const unsigned int **)v11)
    {
      v22 = *(_QWORD *)(v7 + 8);
      if (v22 == v8)
        return result;
      v9 = (const unsigned int **)v11;
      v7 = v8;
      if ((*(_WORD *)(v22 + 44) & 4) != 0)
      {
        while (1)
        {
          v32 = v22;
          v33 = *(unsigned int *)(v22 + 40);
          if ((_DWORD)v33)
            break;
          v22 = *(_QWORD *)(v22 + 8);
          if (v22 == v8 || (*(_WORD *)(v22 + 44) & 4) == 0)
          {
            v7 = v8;
            goto LABEL_41;
          }
        }
        v7 = v22;
LABEL_41:
        v9 = *(const unsigned int ***)(v32 + 32);
        v11 = (int *)&v9[4 * v33];
      }
    }
  }
  return result;
}

uint64_t sub_1C4A96BB0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v42;

  v2 = *(unsigned int *)(result + 344);
  if ((_DWORD)v2)
  {
    v3 = a2;
    v4 = result;
    v5 = *(uint64_t **)(result + 336);
    v42 = &v5[2 * v2];
    v40 = result;
    do
    {
      v6 = *v5;
      v7 = v5[1];
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, v7);
      if ((v9 & 0xFF00000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v7);
        if ((_DWORD)result != HIDWORD(result))
        {
          v19 = result >> 6;
          if (result >> 6 == HIDWORD(result) >> 6)
          {
            v20 = ~((1 << SBYTE4(result)) + (-1 << result));
            v21 = *v3;
          }
          else
          {
            v21 = *v3;
            *(_QWORD *)(*v3 + 8 * v19) &= ~(-1 << result);
            v36 = (result + 63) & 0xFFFFFFC0;
            if (v36 + 64 <= HIDWORD(result))
            {
              do
              {
                *(_QWORD *)(v21 + 8 * (v36 >> 6)) = 0;
                v37 = v36 + 64;
                v39 = v36 + 128;
                v36 += 64;
              }
              while (v39 <= HIDWORD(result));
            }
            else
            {
              v37 = (result + 63) & 0xFFFFFFC0;
            }
            if (v37 >= HIDWORD(result))
              goto LABEL_42;
            v20 = -1 << SBYTE4(result);
            v19 = v37 >> 6;
          }
          *(_QWORD *)(v21 + 8 * v19) &= v20;
        }
        goto LABEL_42;
      }
      v10 = v8;
      v11 = v9;
      v12 = *(unsigned __int16 **)(v6 + 16);
      v13 = *v12;
      v14 = sub_1C4C915C4(*v12);
      if ((v14 & 0xFF00000000) != 0 && ((v14 - 164) < 4 || (v14 - 78) <= 2))
      {
        v15 = *(_QWORD *)(v6 + 32);
        v16 = v7 - v15;
        v17 = (unint64_t)(v7 - v15) >> 5;
        result = llvm::MachineInstr::getNumExplicitOperands(v6);
        if (result <= v17)
        {
          v38 = -1;
          goto LABEL_55;
        }
        if ((word_1C6AA47DC[dword_1C6A9B6CC[v13] + (unsigned __int16)v17] & 0xFFFB) == 0x3A)
        {
          v38 = v17 + 2;
LABEL_55:
          v4 = v40;
          v3 = a2;
          goto LABEL_26;
        }
        if ((*(_DWORD *)(v15 + (v16 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
        {
          v22 = *((unsigned __int8 *)v12 + 4);
          if ((v12[4] & 2) != 0)
          {
            v32 = *(_DWORD *)(v6 + 40);
            v3 = a2;
            if (v32 == v22)
            {
              v23 = *((unsigned __int8 *)v12 + 4);
            }
            else
            {
              v33 = v32 - 1;
              v23 = *((unsigned __int8 *)v12 + 4);
              do
              {
                v34 = *(_DWORD *)(v15 + 32 * v22);
                if ((v34 & 0x10000FF) != 0x1000000)
                  break;
                v23 += (v34 & 0x2000000) == 0;
                if (v33 == v22)
                  break;
                ++v22;
              }
              while ((v34 & 0x2000000) == 0);
            }
          }
          else
          {
            v23 = *((unsigned __int8 *)v12 + 4);
            v3 = a2;
          }
          v38 = v23 + v17;
          v4 = v40;
        }
        else
        {
          if (*(_DWORD *)(v15 + (v16 & 0x1FFFFFFFE0)))
            v18 = *(_DWORD *)(v15 + (v16 & 0x1FFFFFFFE0)) == 7;
          else
            v18 = 1;
          v4 = v40;
          v3 = a2;
          if (v18)
            v38 = v17 + 1;
          else
            v38 = -1;
        }
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, v6);
        if ((result & 0xFF00000000) == 0)
          goto LABEL_31;
        v38 = result + 1;
      }
LABEL_26:
      if ((_DWORD)v10 == HIDWORD(v10))
      {
LABEL_30:
        v25 = *(_QWORD *)(v6 + 32) + 32 * v38;
        *(_QWORD *)(v25 + 16) |= 0x10uLL;
      }
      else
      {
        v24 = v10;
        while (((*(_QWORD *)(*v3 + 8 * (v24 >> 6)) >> v24) & 1) == 0)
        {
          if (HIDWORD(v10) == ++v24)
            goto LABEL_30;
        }
      }
LABEL_31:
      if (v11)
      {
        if (HIDWORD(v10) != (_DWORD)v10)
        {
          v26 = 0;
          do
          {
            if (((v11 >> v26) & 1) != 0)
              *(_QWORD *)(*v3 + 8 * ((v10 + v26) >> 6)) |= 1 << (v10
                                                                                 + v26);
            ++v26;
          }
          while (HIDWORD(v10) - (_DWORD)v10 != v26);
        }
        goto LABEL_42;
      }
      if (HIDWORD(v10) != (_DWORD)v10)
      {
        v27 = v10 >> 6;
        if (v10 >> 6 == HIDWORD(v10) >> 6)
        {
          v28 = (1 << SBYTE4(v10)) + (-1 << v10);
          v29 = *v3;
        }
        else
        {
          v29 = *v3;
          *(_QWORD *)(*v3 + 8 * v27) |= -1 << v10;
          v30 = (v10 + 63) & 0xFFFFFFC0;
          if (v30 + 64 <= HIDWORD(v10))
          {
            do
            {
              *(_QWORD *)(v29 + 8 * (v30 >> 6)) = -1;
              v31 = v30 + 64;
              v35 = v30 + 128;
              v30 += 64;
            }
            while (v35 <= HIDWORD(v10));
          }
          else
          {
            v31 = (v10 + 63) & 0xFFFFFFC0;
          }
          if (v31 >= HIDWORD(v10))
            goto LABEL_42;
          v28 = ~(-1 << SBYTE4(v10));
          v27 = v31 >> 6;
        }
        *(_QWORD *)(v29 + 8 * v27) |= v28;
      }
LABEL_42:
      v5 += 2;
    }
    while (v5 != v42);
  }
  return result;
}

uint64_t sub_1C4A96FC8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializePhysicalRegisterUsageInfoPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "AGX3 LUPlacement Pass";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "agx3-lu-placement";
  *(_QWORD *)(v3 + 24) = 17;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EF908;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C6153068;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

const char *sub_1C4A9705C()
{
  return "AGX3 LUPlacement Pass";
}

uint64_t sub_1C4A9706C(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v2;
  _QWORD *i;
  uint64_t j;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AnalysisPass;
  char v29;
  _QWORD *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *k;
  void *v74;
  void **v75;
  void **v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  _QWORD *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  BOOL v97;
  unsigned int v98;
  _QWORD *v99;
  void **v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  int v135;
  BOOL v136;
  unsigned int v137;
  _QWORD *v138;
  int v139;
  BOOL v141;
  uint64_t v142;
  _QWORD *v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  const unsigned int *RegUsageInfo;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  unsigned int v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  char *v192;
  uint64_t v193;
  int v194;
  _QWORD *v195;
  uint64_t v196;
  unsigned int v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t *v213;
  _QWORD *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  unsigned int *v223;
  unsigned int *v224;
  unint64_t v225;
  char *v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int *v230;
  unsigned int v231;
  char *v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t *v238;
  _QWORD *v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t v246;
  char *v247;
  BOOL v248;
  _DWORD **v249;
  _DWORD **v250;
  _DWORD *v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  unsigned int *v261;
  int v262;
  unsigned int *v263;
  void *v264;
  unint64_t v265;
  uint64_t v267;
  unsigned int v268;
  void **p_src;
  void (**v270)(void **);
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t *v276;
  _DWORD *v277;
  unsigned int v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  __int128 *v283;
  unsigned int v284;
  unsigned int v285;
  uint64_t *v286;
  uint64_t *v287;
  uint64_t v288;
  _DWORD *v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t *v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  unint64_t v298;
  uint64_t v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t *v309;
  _QWORD *v310;
  uint64_t *v311;
  uint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  _WORD *v315;
  unsigned __int16 *v316;
  __int16 v317;
  unsigned __int16 v318;
  int v319;
  _QWORD *v320;
  unint64_t v321;
  unsigned __int8 v322;
  unint64_t v323;
  int v324;
  _DWORD *v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  _BYTE *v331;
  int v332;
  _DWORD *v333;
  int v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  _DWORD *v339;
  int v340;
  unsigned __int16 *v341;
  uint64_t v342;
  int v344;
  uint64_t v345;
  unsigned int NumExplicitOperands;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  int v352;
  unsigned __int16 *v353;
  unsigned __int16 *v354;
  int v355;
  int v356;
  int v357;
  unsigned __int16 *v358;
  unsigned __int16 *v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  int v364;
  _QWORD *v365;
  unint64_t v366;
  _WORD *v367;
  unsigned __int16 *v368;
  __int16 v369;
  unsigned __int16 v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  _QWORD *v374;
  unint64_t v375;
  unsigned __int16 *v376;
  unsigned __int16 *v377;
  int v378;
  int v379;
  unsigned __int16 *v380;
  unsigned __int16 v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t *v385;
  _QWORD *v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  int v391;
  uint64_t v392;
  int v393;
  char v394;
  int v395;
  unsigned int v396;
  llvm::MachineInstr *v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t *v401;
  int v402;
  unsigned int v403;
  _DWORD *v404;
  int v405;
  _DWORD *v406;
  int v407;
  BOOL v408;
  unsigned int v409;
  _DWORD *v410;
  _DWORD *v411;
  int v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  char v416;
  unsigned int v418;
  int v419;
  int v420;
  uint64_t *v421;
  int v422;
  unsigned int v423;
  _DWORD *v424;
  int v425;
  _DWORD *v426;
  int v427;
  BOOL v428;
  unsigned int v429;
  _DWORD *v430;
  _DWORD *v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  llvm::MachineInstr *v435;
  int v436;
  uint64_t v437;
  BOOL v438;
  unsigned int v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  uint64_t *v445;
  int v446;
  unsigned int v447;
  _DWORD *v448;
  int v449;
  _DWORD *v450;
  int v451;
  BOOL v452;
  unsigned int v453;
  _DWORD *v454;
  _DWORD *v455;
  int v456;
  uint64_t v457;
  BOOL v458;
  int v459;
  uint64_t *v460;
  int v461;
  unsigned int v462;
  _DWORD *v463;
  int v464;
  _DWORD *v465;
  int v466;
  BOOL v467;
  unsigned int v468;
  _DWORD *v469;
  _DWORD *v470;
  int v471;
  uint64_t v472;
  int v473;
  _QWORD *v474;
  unsigned __int8 *v475;
  int v476;
  uint64_t v477;
  char v481;
  int v482;
  uint64_t *v483;
  int v484;
  unsigned int v485;
  _DWORD *v486;
  int v487;
  _DWORD *v488;
  int v489;
  BOOL v490;
  unsigned int v491;
  _BOOL4 v492;
  llvm::MachineInstr *v494;
  uint64_t v495;
  unsigned int v496;
  unint64_t v497;
  uint64_t *v498;
  uint64_t *v499;
  _DWORD *v500;
  int v501;
  uint64_t *v502;
  int v503;
  unsigned int v504;
  _DWORD *v505;
  int v506;
  _DWORD *v507;
  int v508;
  BOOL v509;
  unsigned int v510;
  _DWORD *v511;
  _DWORD *v512;
  int v513;
  uint64_t v514;
  int v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  int v526;
  unsigned int v528;
  unsigned __int16 *v529;
  int v530;
  int v531;
  int v532;
  char *v533;
  char *v534;
  int v535;
  _QWORD *v536;
  unint64_t v537;
  _WORD *v538;
  unsigned __int16 *v539;
  __int16 v540;
  unsigned __int16 v541;
  int v542;
  int v543;
  uint64_t *v544;
  int v545;
  unsigned int v546;
  int v547;
  int v548;
  unsigned int v549;
  int v550;
  uint64_t *v551;
  int v552;
  unsigned int v553;
  _DWORD *v554;
  int v555;
  _DWORD *v556;
  int v557;
  BOOL v558;
  unsigned int v559;
  _DWORD *v560;
  _DWORD *v561;
  unsigned int v562;
  uint64_t v563;
  unsigned int *v564;
  char *v565;
  unsigned int v566;
  unsigned int v567;
  char v568;
  int v569;
  uint64_t *v570;
  int v571;
  unsigned int v572;
  int v573;
  int v574;
  unsigned int v575;
  char *v576;
  char *v577;
  uint64_t *v578;
  int v579;
  BOOL v580;
  unsigned int v581;
  char v582;
  int v583;
  int v584;
  unsigned int v585;
  _BOOL4 v586;
  unsigned int v587;
  unsigned int v588;
  int v589;
  int v590;
  unsigned int v591;
  int v592;
  uint64_t *v593;
  int v594;
  unsigned int v595;
  _DWORD *v596;
  int v597;
  _DWORD *v598;
  int v599;
  BOOL v600;
  unsigned int v601;
  _DWORD *v602;
  _DWORD *v603;
  int v604;
  uint64_t v605;
  int v606;
  uint64_t *v607;
  int v608;
  unsigned int v609;
  _DWORD *v610;
  int v611;
  _DWORD *v612;
  int v613;
  BOOL v614;
  unsigned int v615;
  _DWORD *v616;
  _DWORD *v617;
  int v618;
  uint64_t v619;
  char v620;
  uint64_t v621;
  uint64_t v622;
  unsigned int v623;
  uint64_t v624;
  _DWORD *v625;
  int v626;
  int v627;
  uint64_t *v628;
  int v629;
  unsigned int v630;
  int v631;
  int v632;
  unsigned int v633;
  _QWORD *v634;
  unint64_t v635;
  _WORD *v636;
  unsigned __int16 *v637;
  __int16 v638;
  unsigned __int16 v639;
  int v640;
  int v641;
  uint64_t *v642;
  int v643;
  unsigned int v644;
  _DWORD *v645;
  int v646;
  _DWORD *v647;
  int v648;
  BOOL v649;
  unsigned int v650;
  _DWORD *v651;
  _DWORD *v652;
  unsigned int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  int v658;
  uint64_t *v659;
  int v660;
  unsigned int v661;
  int v662;
  int v663;
  unsigned int v664;
  unsigned __int16 *v665;
  unsigned int v666;
  unsigned int v667;
  unsigned int v668;
  int v669;
  uint64_t *v670;
  int v671;
  unsigned int v672;
  int v673;
  int v674;
  unsigned int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  unsigned int v680;
  uint64_t v681;
  unsigned int v682;
  unsigned int v683;
  unint64_t v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t *v688;
  _QWORD *v689;
  uint64_t v690;
  unsigned __int16 *v691;
  unsigned int v692;
  uint64_t v693;
  int v695;
  _DWORD *v696;
  _DWORD *v697;
  int v698;
  uint64_t v699;
  int v700;
  uint64_t *v701;
  int v702;
  unsigned int v703;
  _DWORD *v704;
  int v705;
  _DWORD *v706;
  int v707;
  BOOL v708;
  unsigned int v709;
  _DWORD *v710;
  _DWORD *v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  _QWORD *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  unint64_t v720;
  uint64_t v721;
  void **v722;
  void **v723;
  uint64_t v724;
  void **v725;
  void **v726;
  void **v727;
  void **v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t *v732;
  unsigned int v733;
  uint64_t v734;
  uint64_t *v735;
  _QWORD *v736;
  uint64_t v737;
  int v738;
  uint64_t v739;
  unsigned int v740;
  unsigned int v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  char *v745;
  char *v746;
  unsigned int v747;
  uint64_t *v748;
  unsigned int v749;
  uint64_t v750;
  uint64_t *v751;
  _QWORD *v752;
  uint64_t v753;
  int v754;
  uint64_t v755;
  unsigned int v756;
  unsigned int v757;
  unint64_t v758;
  uint64_t v759;
  int v760;
  uint64_t v761;
  uint64_t *v762;
  unint64_t v763;
  char *v765;
  uint64_t v766;
  uint64_t v767;
  unsigned int *v768;
  int v769;
  uint64_t *v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t *v773;
  uint64_t v774;
  unsigned int v775;
  uint64_t *v776;
  _QWORD *v777;
  uint64_t v778;
  unsigned int v779;
  unsigned int v780;
  uint64_t v781;
  uint64_t *v782;
  _QWORD *v783;
  uint64_t v784;
  char *v785;
  BOOL v786;
  _DWORD **v787;
  _DWORD **v788;
  _DWORD *v789;
  uint64_t v790;
  unsigned int v791;
  uint64_t *v792;
  uint64_t v793;
  unsigned int v794;
  uint64_t *v795;
  uint64_t v796;
  uint64_t v797;
  char *v798;
  char *v799;
  uint64_t v800;
  unsigned int v801;
  uint64_t *v802;
  uint64_t *v803;
  void **v804;
  void **v805;
  void **v806;
  unsigned int v807;
  int v808;
  uint64_t v809;
  unsigned int v810;
  unsigned int v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t *v816;
  uint64_t *v817;
  uint64_t v818;
  int v819;
  uint64_t *v820;
  void *v821;
  void **v822;
  unint64_t v823;
  uint64_t v825;
  _QWORD *v826;
  _QWORD *v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  void **v832;
  void **v833;
  uint64_t v834;
  void **v835;
  void **v836;
  void **v837;
  void **v838;
  uint64_t v839;
  uint64_t v840;
  unsigned int v841;
  uint64_t *v842;
  unsigned int v843;
  uint64_t v844;
  uint64_t *v845;
  _QWORD *v846;
  uint64_t v847;
  int v848;
  uint64_t v849;
  unsigned int v850;
  unsigned int v851;
  unint64_t v852;
  uint64_t v853;
  int v854;
  uint64_t v855;
  uint64_t *v856;
  unint64_t v857;
  char *v859;
  uint64_t v860;
  uint64_t v861;
  unsigned int *v862;
  int v863;
  uint64_t *v864;
  unint64_t v865;
  uint64_t v866;
  uint64_t *v867;
  uint64_t v868;
  unsigned int v869;
  uint64_t *v870;
  _QWORD *v871;
  uint64_t v872;
  unsigned int v873;
  unsigned int v874;
  uint64_t v875;
  uint64_t *v876;
  _QWORD *v877;
  uint64_t v878;
  char *v879;
  BOOL v880;
  _DWORD **v881;
  _DWORD **v882;
  _DWORD *v883;
  int v884;
  uint64_t v885;
  unsigned int v886;
  unsigned int v887;
  unint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t *v892;
  uint64_t *v893;
  uint64_t v894;
  int v895;
  uint64_t *v896;
  void *v897;
  void **v898;
  unint64_t v899;
  uint64_t v901;
  _QWORD *v902;
  uint64_t *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unsigned int v907;
  uint64_t *v908;
  uint64_t *v909;
  uint64_t *v910;
  unsigned int v911;
  uint64_t v912;
  uint64_t *v913;
  _QWORD *v914;
  uint64_t v915;
  uint64_t v916;
  unsigned int v917;
  unsigned int v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t *v921;
  uint64_t *v922;
  unsigned int v923;
  uint64_t *v924;
  unsigned int v925;
  uint64_t v926;
  uint64_t *v927;
  _QWORD *v928;
  uint64_t v929;
  uint64_t v930;
  unsigned int v931;
  unsigned int v932;
  unint64_t v933;
  uint64_t v934;
  _QWORD *m;
  uint64_t *v936;
  uint64_t v937;
  uint64_t *v938;
  uint64_t *v939;
  uint64_t *v940;
  unsigned int v941;
  uint64_t v942;
  uint64_t *v943;
  _QWORD *v944;
  uint64_t v945;
  uint64_t v946;
  unsigned int v947;
  unsigned int v948;
  unint64_t v949;
  uint64_t v950;
  _QWORD *v951;
  uint64_t n;
  _QWORD *v953;
  uint64_t v954;
  unint64_t v955;
  uint64_t v956;
  uint64_t v957;
  unint64_t v959;
  size_t v960;
  void *v961;
  char *v962;
  char *v963;
  _BYTE *v964;
  _BYTE *v965;
  const unsigned int *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t *v970;
  char v972;
  _QWORD *v973;
  uint64_t *v974;
  uint64_t *v975;
  llvm::MachineBasicBlock *v976;
  unsigned __int16 *v977;
  int v978;
  int v979;
  uint64_t v980;
  int v981;
  llvm::MachineInstr *v983;
  int v984;
  llvm::PhysicalRegisterUsageInfo *v985;
  llvm::PhysicalRegisterUsageInfo *v986;
  llvm::PhysicalRegisterUsageInfo *v987;
  int v988;
  uint64_t v989;
  char *v990;
  uint64_t v991;
  uint64_t *v992;
  unint64_t v993;
  unsigned int v994;
  unint64_t v995;
  llvm::MachineMemOperand *MachineMemOperand;
  uint64_t *v997;
  unsigned int v998;
  char v999;
  unsigned int v1000;
  uint64_t v1001;
  _QWORD *v1002;
  _QWORD v1003[2];
  int v1004;
  void *v1005;
  uint64_t v1006;
  _BYTE v1007[48];
  unsigned int v1008;
  void *v1009;
  uint64_t v1010;
  _BYTE v1011[48];
  unsigned int v1012;
  uint64_t v1013;
  void *v1014;
  uint64_t v1015;
  _BYTE v1016[48];
  unsigned int v1017;
  void *v1018;
  uint64_t v1019;
  _BYTE v1020[32];
  void *__src;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  unsigned int v1026;
  char v1027;
  void *v1028[2];
  _BYTE v1029[56];
  char v1030;
  void *v1031[2];
  _BYTE v1032[56];
  char v1033;
  void *v1034[2];
  _BYTE v1035[56];
  char v1036;
  uint64_t v1037;
  void *v1038;
  uint64_t v1039;
  _BYTE v1040[512];
  __int128 v1041;
  void *__b;
  void *v1043;
  uint64_t v1044;
  _DWORD v1045[12];
  int v1046;
  void *v1047;
  void *v1048;
  uint64_t v1049;
  _BYTE v1050[40];
  unsigned int v1051;
  unsigned int v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  void *v1056;
  uint64_t v1057;
  _BYTE v1058[16];
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unsigned int *v1062;
  uint64_t v1063;
  _BYTE v1064[16];
  char *v1065;
  uint64_t v1066;
  _QWORD v1067[6];

  v1067[4] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2[2] + 283))
  {
    v29 = 0;
    return v29 & 1;
  }
  v989 = a2[2];
  v1018 = v1020;
  v1019 = 0x400000000;
  v2 = atomic_load((unsigned __int8 *)&qword_1ED7ED8B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED8B0))
  {
    byte_1ED7ED8A8 = 1;
    __cxa_guard_release(&qword_1ED7ED8B0);
  }
  if (byte_1ED7ED8A8)
  {
    for (i = (_QWORD *)a2[41]; i != a2 + 40; i = (_QWORD *)i[1])
    {
      for (j = i[7]; (_QWORD *)j != i + 6; j = *(_QWORD *)(j + 8))
      {
        v5 = sub_1C4C915C4(**(unsigned __int16 **)(j + 16));
        if ((v5 & 0xFF00000000) != 0 && v5 == 63)
        {
          v6 = *(_QWORD *)(j + 32);
          v991 = *(_QWORD *)(v6 + 16);
          v1001 = *(_QWORD *)(v6 + 48);
          v7 = *(_QWORD *)(j + 48);
          if ((v7 & 7) != 0)
          {
            v8 = *(__int128 **)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v8 = (__int128 *)(v7 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(j + 48) = v7 & 0xFFFFFFFFFFFFFFF8;
          }
          MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)a2, v8, 5);
          v9 = *(_QWORD *)(j + 24);
          v1024 = 0u;
          v1025 = 0u;
          v1022 = 0u;
          v1023 = 0u;
          v10 = *(_QWORD *)(v9 + 32);
          __src = &off_1E816EC08;
          *(_QWORD *)&v1022 = v10;
          *(_QWORD *)&v1023 = *(_QWORD *)(v10 + 40);
          *((_QWORD *)&v1022 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 16) + 104))(*(_QWORD *)(v10 + 16));
          v1047 = 0;
          if (*((_QWORD *)&v1023 + 1))
          {
            llvm::MetadataTracking::untrack((uint64_t)&v1023 + 8, *((unsigned __int8 **)&v1023 + 1));
            *((_QWORD *)&v1023 + 1) = v1047;
            if (v1047)
              llvm::MetadataTracking::retrack((uint64_t)&v1047, (unsigned __int8 *)v1047, (uint64_t)&v1023 + 8);
          }
          else
          {
            *((_QWORD *)&v1023 + 1) = 0;
          }
          *(_QWORD *)&v1025 = 0;
          *((_QWORD *)&v1024 + 1) = j;
          *(_QWORD *)&v1024 = *(_QWORD *)(j + 24);
          *((_QWORD *)&v1024 + 1) = j;
          if ((__int128 *)(j + 56) != (__int128 *)((char *)&v1023 + 8))
          {
            if (*((_QWORD *)&v1023 + 1))
              llvm::MetadataTracking::untrack((uint64_t)&v1023 + 8, *((unsigned __int8 **)&v1023 + 1));
            v11 = *(unsigned __int8 **)(j + 56);
            *((_QWORD *)&v1023 + 1) = v11;
            if (v11)
              llvm::MetadataTracking::track((uint64_t)&v1023 + 8, v11, 2);
          }
          v985 = sub_1C55437B8(&__src, 0x13Cu);
          v13 = (unint64_t *)v12;
          v14 = (unint64_t *)*((_QWORD *)&v1024 + 1);
          v15 = *(_QWORD *)(v1024 + 40);
          *(_QWORD *)(v12 + 24) = v15;
          v16 = *(_QWORD *)(v15 + 32);
          v17 = *(unsigned int *)(v12 + 40);
          if ((_DWORD)v17)
          {
            v21 = *(_QWORD *)(v12 + 32);
            v22 = *(_QWORD *)(v16 + 40);
            v23 = 32 * v17;
            do
            {
              if (!*(_BYTE *)v21)
              {
                v24 = *(unsigned int *)(v21 + 4);
                if ((int)v24 >= 0)
                  v25 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
                else
                  v25 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
                v26 = *v25;
                if (*v25)
                {
                  v27 = *(_QWORD *)(v26 + 16);
                  *(_QWORD *)(v26 + 16) = v21;
                  *(_QWORD *)(v21 + 16) = v27;
                  if ((*(_BYTE *)(v21 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v21 + 24) = v26;
                  }
                  else
                  {
                    *(_QWORD *)(v21 + 24) = 0;
                    v25 = (uint64_t *)(v27 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v21 + 16) = v21;
                  *(_QWORD *)(v21 + 24) = 0;
                }
                *v25 = v21;
              }
              v21 += 32;
              v23 -= 32;
            }
            while (v23);
          }
          v18 = *(_QWORD *)(v16 + 728);
          if (v18)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, v12);
          v19 = *v14 & 0xFFFFFFFFFFFFFFF8;
          *v13 = v19 | *v13 & 7;
          v13[1] = (unint64_t)v14;
          *(_QWORD *)(v19 + 8) = v13;
          *v14 = *v14 & 7 | (unint64_t)v13;
          if ((_QWORD)v1025)
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v1025 + 24))(v1025, v13);
          LODWORD(v1047) = 1;
          v1048 = 0;
          v1049 = v991;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v985, (const llvm::MachineOperand *)&v1047);
          LODWORD(v1047) = 1;
          v1048 = 0;
          v1049 = v1001;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v985, (const llvm::MachineOperand *)&v1047);
          LODWORD(v1047) = 1;
          v1048 = 0;
          v1049 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v985, (const llvm::MachineOperand *)&v1047);
          llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v13, v985, MachineMemOperand);
          __src = &off_1E816EC08;
          if (*((_QWORD *)&v1023 + 1))
            llvm::MetadataTracking::untrack((uint64_t)&v1023 + 8, *((unsigned __int8 **)&v1023 + 1));
          v20 = v1019;
          if (v1019 >= (unint64_t)HIDWORD(v1019))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1018, (uint64_t)v1020, v1019 + 1, 8);
            v20 = v1019;
          }
          *((_QWORD *)v1018 + v20) = v13;
          LODWORD(v1019) = v1019 + 1;
        }
        if ((*(_BYTE *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
    }
  }
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::PhysicalRegisterUsageInfo::ID, 1);
  if (AnalysisPass)
    v986 = (llvm::PhysicalRegisterUsageInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::PhysicalRegisterUsageInfo::ID);
  else
    v986 = 0;
  v30 = (_QWORD *)(a1 + 256);
  v31 = *(_DWORD *)(a1 + 264);
  if (v31 || *(_DWORD *)(a1 + 268))
  {
    v32 = *(_DWORD *)(a1 + 272);
    v33 = *(_QWORD *)(a1 + 256);
    if (v32 <= 4 * v31 || v32 < 0x41)
    {
      if (v32)
      {
        v45 = v33 + 8;
        v46 = 880 * v32;
        do
        {
          v47 = *(_QWORD *)(v45 - 8);
          if (v47 != -4096)
          {
            if (v47 != -8192)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
            *(_QWORD *)(v45 - 8) = -4096;
          }
          v45 += 880;
          v46 -= 880;
        }
        while (v46);
      }
      *(_QWORD *)(a1 + 264) = 0;
    }
    else
    {
      v34 = v33 + 8;
      v35 = 880 * v32;
      do
      {
        if ((*(_QWORD *)(v34 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
        v34 += 880;
        v35 -= 880;
      }
      while (v35);
      v36 = 1 << (33 - __clz(v31 - 1));
      if (v36 <= 64)
        v36 = 64;
      if (v31)
        v37 = v36;
      else
        v37 = 0;
      if (v37 == *(_DWORD *)(a1 + 272))
      {
        *(_QWORD *)(a1 + 264) = 0;
        if (v37)
        {
          v38 = *(_QWORD **)(a1 + 256);
          v39 = 880 * v37;
          do
          {
            *v38 = -4096;
            v38 += 110;
            v39 -= 880;
          }
          while (v39);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v30, 8);
        if (v37)
        {
          v40 = (4 * v37 / 3 + 1) | ((unint64_t)(4 * v37 / 3 + 1) >> 1);
          v41 = v40 | (v40 >> 2) | ((v40 | (v40 >> 2)) >> 4);
          LODWORD(v41) = (((v41 | (v41 >> 8)) >> 16) | v41 | (v41 >> 8)) + 1;
          *(_DWORD *)(a1 + 272) = v41;
          v42 = operator new(880 * v41, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 256) = v42;
          *(_QWORD *)(a1 + 264) = 0;
          v43 = *(_DWORD *)(a1 + 272);
          if (v43)
          {
            v44 = 880 * v43;
            do
            {
              *v42 = -4096;
              v42 += 110;
              v44 -= 880;
            }
            while (v44);
          }
        }
        else
        {
          *v30 = 0;
          *(_QWORD *)(a1 + 264) = 0;
          *(_DWORD *)(a1 + 272) = 0;
        }
      }
    }
  }
  v970 = (uint64_t *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v992 = (uint64_t *)(a1 + 296);
  sub_1C49D9000((_DWORD *)(a1 + 296));
  v997 = (uint64_t *)(a1 + 320);
  sub_1C49D9000((_DWORD *)(a1 + 320));
  *(_QWORD *)(a1 + 280) = a2;
  *(_QWORD *)(a1 + 288) = 0;
  v48 = (a2[14] - a2[13]) >> 3;
  v49 = a2;
  if ((_DWORD)v48)
  {
    v50 = (4 * (int)v48 / 3u + 1) | ((unint64_t)(4 * (int)v48 / 3u + 1) >> 1);
    v51 = v50 | (v50 >> 2) | ((v50 | (v50 >> 2)) >> 4);
    v52 = ((v51 | (v51 >> 8)) >> 16) | v51 | (v51 >> 8);
    v49 = a2;
    if (*(_DWORD *)(a1 + 272) <= v52)
    {
      sub_1C4A9D2A0(a1 + 256, v52 + 1);
      v49 = (_QWORD *)*v970;
    }
  }
  v53 = v49 + 40;
  v54 = v49[41];
  if ((_QWORD *)v54 != v49 + 40)
  {
    while (1)
    {
      __src = &unk_1E7FA95C0;
      LOBYTE(v1022) = 0;
      v1027 = 0;
      LOBYTE(v1028[0]) = 0;
      v1030 = 0;
      LOBYTE(v1031[0]) = 0;
      v1033 = 0;
      LOBYTE(v1034[0]) = 0;
      v1036 = 0;
      v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v54 + 32) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v54 + 32) + 16));
      v1038 = v1040;
      v1039 = 0x2000000000;
      v1037 = v55;
      __src = off_1E7FAD460;
      v56 = *(_QWORD *)(v54 + 32);
      v57 = *(_QWORD *)(v56 + 48);
      if (!v57)
      {
        v57 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v56 + 8) + 216))(*(_QWORD *)(v56 + 8), v56 + 128, *(_QWORD *)(v54 + 32));
        *(_QWORD *)(v56 + 48) = v57;
      }
      v58 = *(_QWORD *)(v57 + 552);
      if ((v58 & 0xFF00000000) != 0)
        v59 = v58 + 1;
      else
        v59 = 4080;
      LODWORD(v1041) = v59;
      v60 = *(_DWORD *)(a1 + 272);
      if (!v60)
      {
        v69 = 0;
        goto LABEL_107;
      }
      v61 = *(_QWORD *)(a1 + 256);
      v62 = (v60 - 1) & ((v54 >> 4) ^ (v54 >> 9));
      v63 = (_QWORD *)(v61 + 880 * v62);
      v64 = *v63;
      if (v54 != *v63)
        break;
LABEL_122:
      __src = &unk_1E7FA95C0;
      if (v1038 != v1040)
        free(v1038);
      if (v1036)
      {
        if (v1034[0] != v1035)
          free(v1034[0]);
        v1036 = 0;
      }
      if (v1033)
      {
        if (v1031[0] != v1032)
          free(v1031[0]);
        v1033 = 0;
      }
      if (v1030)
      {
        if (v1028[0] != v1029)
          free(v1028[0]);
        v1030 = 0;
      }
      if (v1027 && (__int128 *)v1022 != &v1023)
        free((void *)v1022);
      v54 = *(_QWORD *)(v54 + 8);
      if ((_QWORD *)v54 == v53)
      {
        v49 = (_QWORD *)*v970;
        goto LABEL_144;
      }
    }
    v65 = 0;
    v66 = 1;
    while (v64 != -4096)
    {
      if (v65)
        v67 = 0;
      else
        v67 = v64 == -8192;
      if (v67)
        v65 = v63;
      v68 = v62 + v66++;
      v62 = v68 & (v60 - 1);
      v63 = (_QWORD *)(v61 + 880 * v62);
      v64 = *v63;
      if (v54 == *v63)
        goto LABEL_122;
    }
    if (v65)
      v69 = v65;
    else
      v69 = v63;
LABEL_107:
    v70 = *(_DWORD *)(a1 + 264);
    if (4 * v70 + 4 >= 3 * v60)
    {
      v60 *= 2;
    }
    else if (v60 + ~v70 - *(_DWORD *)(a1 + 268) > v60 >> 3)
    {
LABEL_109:
      ++*(_DWORD *)(a1 + 264);
      if (*v69 != -4096)
        --*(_DWORD *)(a1 + 268);
      *v69 = v54;
      v69[1] = &unk_1E7FA95C0;
      *((_BYTE *)v69 + 16) = 0;
      *((_BYTE *)v69 + 88) = 0;
      if (v1027)
        sub_1C614E7D8((uint64_t)(v69 + 2), (uint64_t)&v1022);
      *((_BYTE *)v69 + 96) = 0;
      *((_BYTE *)v69 + 168) = 0;
      if (v1030)
        sub_1C614E7D8((uint64_t)(v69 + 12), (uint64_t)v1028);
      *((_BYTE *)v69 + 176) = 0;
      *((_BYTE *)v69 + 248) = 0;
      if (v1033)
        sub_1C614E7D8((uint64_t)(v69 + 22), (uint64_t)v1031);
      *((_BYTE *)v69 + 256) = 0;
      *((_BYTE *)v69 + 328) = 0;
      if (v1036)
        sub_1C614E7D8((uint64_t)(v69 + 32), (uint64_t)v1034);
      v69[42] = v1037;
      v69[43] = v69 + 45;
      v69[44] = 0x2000000000;
      if ((_DWORD)v1039)
        sub_1C49DA288((uint64_t)(v69 + 43), (uint64_t)&v1038);
      v69[1] = off_1E7FAD460;
      *((_DWORD *)v69 + 218) = v1041;
      goto LABEL_122;
    }
    sub_1C4A9D2A0(a1 + 256, v60);
    v1047 = 0;
    sub_1C4A9D524(*(_QWORD *)(a1 + 256), *(_DWORD *)(a1 + 272), v54, &v1047);
    v69 = v1047;
    goto LABEL_109;
  }
LABEL_144:
  v71 = (v49[14] - v49[13]) >> 3;
  sub_1C4A9D7F8(v997, v71);
  sub_1C4A9D7F8(v992, v71);
  v72 = *v970 + 320;
  for (k = *(_QWORD **)(*v970 + 328); k != (_QWORD *)v72; k = (_QWORD *)k[1])
  {
    v74 = (void *)k[1];
    if (v74 == (void *)(k[4] + 320))
    {
      __src = (char *)&v1022 + 8;
LABEL_151:
      *(_QWORD *)&v1022 = 0x200000000;
      goto LABEL_152;
    }
    v75 = (void **)k[11];
    v76 = (void **)k[12];
    if (v75 != v76)
    {
      while (*v75 != v74)
      {
        if (++v75 == v76)
        {
          v75 = (void **)k[12];
          break;
        }
      }
    }
    __src = (char *)&v1022 + 8;
    if (v75 != v76)
      goto LABEL_151;
    *((_QWORD *)&v1022 + 1) = v74;
    *(_QWORD *)&v1022 = 0x200000001;
    v1047 = v74;
    v77 = *(_DWORD *)(a1 + 336);
    if (v77)
    {
      v78 = *(_QWORD *)(a1 + 320);
      v79 = v77 - 1;
      v80 = v79 & ((v74 >> 4) ^ (v74 >> 9));
      v81 = (_QWORD *)(v78 + 40 * v80);
      v82 = (void *)*v81;
      if (v74 == (void *)*v81)
        goto LABEL_172;
      v83 = 0;
      v84 = 1;
      while (v82 != (void *)-4096)
      {
        if (v83)
          v85 = 0;
        else
          v85 = v82 == (void *)-8192;
        if (v85)
          v83 = v81;
        v86 = v80 + v84++;
        v80 = v86 & v79;
        v81 = (_QWORD *)(v78 + 40 * v80);
        v82 = (void *)*v81;
        if (v74 == (void *)*v81)
          goto LABEL_172;
      }
      if (v83)
        v87 = v83;
      else
        v87 = v81;
    }
    else
    {
      v87 = 0;
    }
    v81 = sub_1C4A9DADC((uint64_t)v997, (uint64_t *)&v1047, v87);
    *v81 = v74;
    v81[1] = v81 + 3;
    v81[2] = 0x200000000;
LABEL_172:
    v88 = *((unsigned int *)v81 + 4);
    if (v88 >= *((unsigned int *)v81 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v81 + 1), (uint64_t)(v81 + 3), v88 + 1, 8);
      v88 = *((unsigned int *)v81 + 4);
    }
    *(_QWORD *)(v81[1] + 8 * v88) = k;
    ++*((_DWORD *)v81 + 4);
    if (!(_DWORD)v1022)
      goto LABEL_152;
    v1047 = k;
    v89 = *(_DWORD *)(a1 + 312);
    if (v89)
    {
      v90 = *(_QWORD *)(a1 + 296);
      v91 = v89 - 1;
      v92 = v91 & ((k >> 4) ^ (k >> 9));
      v93 = (_QWORD *)(v90 + 40 * v92);
      v94 = (_QWORD *)*v93;
      if (k == (_QWORD *)*v93)
        goto LABEL_190;
      v95 = 0;
      v96 = 1;
      while (v94 != (_QWORD *)-4096)
      {
        if (v95)
          v97 = 0;
        else
          v97 = v94 == (_QWORD *)-8192;
        if (v97)
          v95 = v93;
        v98 = v92 + v96++;
        v92 = v98 & v91;
        v93 = (_QWORD *)(v90 + 40 * v92);
        v94 = (_QWORD *)*v93;
        if (k == (_QWORD *)*v93)
          goto LABEL_190;
      }
      if (v95)
        v99 = v95;
      else
        v99 = v93;
    }
    else
    {
      v99 = 0;
    }
    v93 = sub_1C4A9DADC((uint64_t)v992, (uint64_t *)&v1047, v99);
    *v93 = k;
    v93[1] = v93 + 3;
    v93[2] = 0x200000000;
LABEL_190:
    v100 = (void **)(v93 + 1);
    if (v93 + 1 != &__src)
    {
      v101 = v1022;
      v102 = *((unsigned int *)v93 + 4);
      if (v102 >= v1022)
      {
        if ((_DWORD)v1022)
          memmove(*v100, __src, 8 * v1022);
      }
      else
      {
        if (*((_DWORD *)v93 + 5) < v1022)
        {
          *((_DWORD *)v93 + 4) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v93 + 1), (uint64_t)(v93 + 3), v101, 8);
LABEL_194:
          v102 = 0;
        }
        else
        {
          if (!(_DWORD)v102)
            goto LABEL_194;
          memmove(*v100, __src, 8 * v102);
        }
        if (v102 != v1022)
          memcpy((char *)*v100 + 8 * v102, (char *)__src + 8 * v102, 8 * v1022 - 8 * v102);
      }
      *((_DWORD *)v93 + 4) = v101;
    }
LABEL_152:
    if (__src != (char *)&v1022 + 8)
      free(__src);
  }
  v103 = (_QWORD *)(a1 + 344);
  v104 = *(_DWORD *)(a1 + 352);
  if (v104 || *(_DWORD *)(a1 + 356))
  {
    v105 = *(_DWORD *)(a1 + 360);
    v106 = *(_QWORD *)(a1 + 344);
    if (v105 <= 4 * v104 || v105 < 0x41)
    {
      if (v105)
      {
        v118 = v106 + 8;
        v119 = 880 * v105;
        do
        {
          v120 = *(_QWORD *)(v118 - 8);
          if (v120 != -4096)
          {
            if (v120 != -8192)
              (*(void (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118);
            *(_QWORD *)(v118 - 8) = -4096;
          }
          v118 += 880;
          v119 -= 880;
        }
        while (v119);
      }
      *(_QWORD *)(a1 + 352) = 0;
    }
    else
    {
      v107 = v106 + 8;
      v108 = 880 * v105;
      do
      {
        if ((*(_QWORD *)(v107 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
          (*(void (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107);
        v107 += 880;
        v108 -= 880;
      }
      while (v108);
      v109 = 1 << (33 - __clz(v104 - 1));
      if (v109 <= 64)
        v109 = 64;
      if (v104)
        v110 = v109;
      else
        v110 = 0;
      if (v110 == *(_DWORD *)(a1 + 360))
      {
        *(_QWORD *)(a1 + 352) = 0;
        if (v110)
        {
          v111 = *(_QWORD **)(a1 + 344);
          v112 = 880 * v110;
          do
          {
            *v111 = -4096;
            v111 += 110;
            v112 -= 880;
          }
          while (v112);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v103, 8);
        if (v110)
        {
          v113 = (4 * v110 / 3 + 1) | ((unint64_t)(4 * v110 / 3 + 1) >> 1);
          v114 = v113 | (v113 >> 2) | ((v113 | (v113 >> 2)) >> 4);
          LODWORD(v114) = (((v114 | (v114 >> 8)) >> 16) | v114 | (v114 >> 8)) + 1;
          *(_DWORD *)(a1 + 360) = v114;
          v115 = operator new(880 * v114, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 344) = v115;
          *(_QWORD *)(a1 + 352) = 0;
          v116 = *(_DWORD *)(a1 + 360);
          if (v116)
          {
            v117 = 880 * v116;
            do
            {
              *v115 = -4096;
              v115 += 110;
              v117 -= 880;
            }
            while (v117);
          }
        }
        else
        {
          *v103 = 0;
          *(_QWORD *)(a1 + 352) = 0;
          *(_DWORD *)(a1 + 360) = 0;
        }
      }
    }
  }
  v969 = a1 + 368;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  sub_1C49D9000((_DWORD *)(a1 + 384));
  sub_1C49D9000((_DWORD *)(a1 + 408));
  *(_QWORD *)(a1 + 368) = a2;
  *(_QWORD *)(a1 + 376) = 0;
  v121 = (a2[14] - a2[13]) >> 3;
  v122 = a2;
  if ((_DWORD)v121)
  {
    v123 = (4 * (int)v121 / 3u + 1) | ((unint64_t)(4 * (int)v121 / 3u + 1) >> 1);
    v124 = v123 | (v123 >> 2) | ((v123 | (v123 >> 2)) >> 4);
    v125 = ((v124 | (v124 >> 8)) >> 16) | v124 | (v124 >> 8);
    v122 = a2;
    if (*(_DWORD *)(a1 + 360) <= v125)
    {
      sub_1C4A9DC68((uint64_t)v103, v125 + 1);
      v122 = *(_QWORD **)v969;
    }
  }
  v126 = v122 + 40;
  v127 = v122[41];
  if ((_QWORD *)v127 != v122 + 40)
  {
    while (1)
    {
      __src = &unk_1E7FA95C0;
      LOBYTE(v1022) = 0;
      v1027 = 0;
      LOBYTE(v1028[0]) = 0;
      v1030 = 0;
      LOBYTE(v1031[0]) = 0;
      v1033 = 0;
      LOBYTE(v1034[0]) = 0;
      v1036 = 0;
      v128 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v127 + 32) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v127 + 32) + 16));
      v1038 = v1040;
      v1039 = 0x2000000000;
      v1037 = v128;
      __src = off_1E7FAD4B8;
      LODWORD(v1041) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 32) + 56) + 48) >> 1;
      v129 = *(_DWORD *)(a1 + 360);
      if (!v129)
      {
        v138 = 0;
        goto LABEL_253;
      }
      v130 = *(_QWORD *)(a1 + 344);
      v131 = (v129 - 1) & ((v127 >> 4) ^ (v127 >> 9));
      v132 = (_QWORD *)(v130 + 880 * v131);
      v133 = *v132;
      if (v127 != *v132)
        break;
LABEL_249:
      __src = &unk_1E7FA95C0;
LABEL_269:
      if (v1036)
      {
        if (v1034[0] != v1035)
          free(v1034[0]);
        v1036 = 0;
      }
      if (v1033)
      {
        if (v1031[0] != v1032)
          free(v1031[0]);
        v1033 = 0;
      }
      if (v1030)
      {
        if (v1028[0] != v1029)
          free(v1028[0]);
        v1030 = 0;
      }
      if (v1027 && (__int128 *)v1022 != &v1023)
        free((void *)v1022);
      v127 = *(_QWORD *)(v127 + 8);
      if ((_QWORD *)v127 == v126)
        goto LABEL_289;
    }
    v134 = 0;
    v135 = 1;
    while (v133 != -4096)
    {
      if (v134)
        v136 = 0;
      else
        v136 = v133 == -8192;
      if (v136)
        v134 = v132;
      v137 = v131 + v135++;
      v131 = v137 & (v129 - 1);
      v132 = (_QWORD *)(v130 + 880 * v131);
      v133 = *v132;
      if (v127 == *v132)
        goto LABEL_249;
    }
    if (v134)
      v138 = v134;
    else
      v138 = v132;
LABEL_253:
    v139 = *(_DWORD *)(a1 + 352);
    if (4 * v139 + 4 >= 3 * v129)
    {
      v129 *= 2;
    }
    else if (v129 + ~v139 - *(_DWORD *)(a1 + 356) > v129 >> 3)
    {
LABEL_255:
      ++*(_DWORD *)(a1 + 352);
      if (*v138 != -4096)
        --*(_DWORD *)(a1 + 356);
      *v138 = v127;
      v138[1] = &unk_1E7FA95C0;
      *((_BYTE *)v138 + 16) = 0;
      *((_BYTE *)v138 + 88) = 0;
      if (v1027)
        sub_1C614E7D8((uint64_t)(v138 + 2), (uint64_t)&v1022);
      *((_BYTE *)v138 + 96) = 0;
      *((_BYTE *)v138 + 168) = 0;
      if (v1030)
        sub_1C614E7D8((uint64_t)(v138 + 12), (uint64_t)v1028);
      *((_BYTE *)v138 + 176) = 0;
      *((_BYTE *)v138 + 248) = 0;
      if (v1033)
        sub_1C614E7D8((uint64_t)(v138 + 22), (uint64_t)v1031);
      *((_BYTE *)v138 + 256) = 0;
      *((_BYTE *)v138 + 328) = 0;
      if (v1036)
        sub_1C614E7D8((uint64_t)(v138 + 32), (uint64_t)v1034);
      v138[42] = v1037;
      v138[43] = v138 + 45;
      v138[44] = 0x2000000000;
      if ((_DWORD)v1039)
        sub_1C49DA288((uint64_t)(v138 + 43), (uint64_t)&v1038);
      v138[1] = off_1E7FAD4B8;
      *((_DWORD *)v138 + 218) = v1041;
      __src = &unk_1E7FA95C0;
      if (v1038 != v1040)
        free(v1038);
      goto LABEL_269;
    }
    sub_1C4A9DC68(a1 + 344, v129);
    v1047 = 0;
    sub_1C4A9D524(*(_QWORD *)(a1 + 344), *(_DWORD *)(a1 + 360), v127, &v1047);
    v138 = v1047;
    goto LABEL_255;
  }
LABEL_289:
  v141 = (*(_WORD *)(*a2 + 18) & 0x3F70) == 0 || (*(_WORD *)(*a2 + 18) & 0x3FF0) == 4080;
  v142 = a1;
  *(_BYTE *)(a1 + 524) = v141;
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 176))(a2[2]);
  v1013 = 0;
  v1014 = v1016;
  v1015 = 0x600000000;
  v1017 = 0;
  if (!*(_BYTE *)(a1 + 524))
  {
    v967 = 0;
    v968 = 0;
    goto LABEL_528;
  }
  v143 = (_QWORD *)(a1 + 432);
  v144 = *(_DWORD *)(a1 + 440);
  if (v144 || *(_DWORD *)(a1 + 444))
  {
    v145 = *(_DWORD *)(a1 + 448);
    v146 = *(_QWORD *)(a1 + 432);
    if (v145 <= 4 * v144 || v145 < 0x41)
    {
      if (v145)
      {
        v158 = v146 + 8;
        v159 = 888 * v145;
        do
        {
          v160 = *(_QWORD *)(v158 - 8);
          if (v160 != -4096)
          {
            if (v160 != -8192)
              (*(void (**)(uint64_t))(*(_QWORD *)v158 + 24))(v158);
            *(_QWORD *)(v158 - 8) = -4096;
          }
          v158 += 888;
          v159 -= 888;
        }
        while (v159);
      }
      *(_QWORD *)(a1 + 440) = 0;
    }
    else
    {
      v147 = v146 + 8;
      v148 = 888 * v145;
      do
      {
        if ((*(_QWORD *)(v147 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
          (*(void (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147);
        v147 += 888;
        v148 -= 888;
      }
      while (v148);
      v149 = 1 << (33 - __clz(v144 - 1));
      if (v149 <= 64)
        v149 = 64;
      if (v144)
        v150 = v149;
      else
        v150 = 0;
      if (v150 == *(_DWORD *)(a1 + 448))
      {
        *(_QWORD *)(a1 + 440) = 0;
        if (v150)
        {
          v151 = *(_QWORD **)(a1 + 432);
          v152 = 888 * v150;
          do
          {
            *v151 = -4096;
            v151 += 111;
            v152 -= 888;
          }
          while (v152);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v143, 8);
        if (v150)
        {
          v153 = (4 * v150 / 3 + 1) | ((unint64_t)(4 * v150 / 3 + 1) >> 1);
          v154 = v153 | (v153 >> 2) | ((v153 | (v153 >> 2)) >> 4);
          LODWORD(v154) = (((v154 | (v154 >> 8)) >> 16) | v154 | (v154 >> 8)) + 1;
          *(_DWORD *)(a1 + 448) = v154;
          v155 = operator new(888 * v154, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 432) = v155;
          *(_QWORD *)(a1 + 440) = 0;
          v156 = *(_DWORD *)(a1 + 448);
          if (v156)
          {
            v157 = 888 * v156;
            do
            {
              *v155 = -4096;
              v155 += 111;
              v157 -= 888;
            }
            while (v157);
          }
        }
        else
        {
          *v143 = 0;
          *(_QWORD *)(a1 + 440) = 0;
          *(_DWORD *)(a1 + 448) = 0;
        }
      }
    }
  }
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  sub_1C49D9000((_DWORD *)(a1 + 472));
  sub_1C49D9000((_DWORD *)(a1 + 496));
  v161 = *(_QWORD *)(a1 + 248);
  v1013 = v161;
  v162 = v1014;
  v163 = v1015;
  if ((_DWORD)v1015)
    bzero(v1014, 8 * v1015);
  v164 = *(_DWORD *)(v161 + 44);
  if ((v1017 & 0x3F) != 0)
    *((_QWORD *)v1014 + v1015 - 1) &= ~(-1 << (v1017 & 0x3F));
  v1017 = v164;
  v165 = (v164 + 63) >> 6;
  if ((_DWORD)v165 != (_DWORD)v163)
  {
    if (v165 >= v163)
    {
      v166 = v163;
      v167 = v163;
      if (v165 > HIDWORD(v1015))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1014, (uint64_t)v1016, (v164 + 63) >> 6, 8);
        v162 = v1014;
        v166 = v1015;
        v164 = v1017;
        v167 = v1015;
      }
      bzero(&v162[v166], 8 * (v165 - v163));
      LODWORD(v163) = v167 + v165 - v163;
    }
    else
    {
      LODWORD(v163) = (v164 + 63) >> 6;
    }
    LODWORD(v1015) = v163;
    v142 = a1;
  }
  v168 = v164 & 0x3F;
  if ((v164 & 0x3F) != 0)
    v162[v163 - 1] &= ~(-1 << v168);
  v169 = (v164 + 63) >> 6;
  __b = &v1044;
  v1043 = (void *)0x600000000;
  sub_1C4765AA4((char *)&__b, v169, 0);
  v1045[10] = v164;
  v170 = __b;
  v171 = v1043;
  if ((_DWORD)v1043)
    memset(__b, 255, 8 * v1043);
  if ((v164 & 0x3F) != 0)
    v170[v171 - 1] &= ~(-1 << v168);
  if (v1017 < v164)
  {
    v172 = v1015;
    if ((v1017 & 0x3F) != 0)
      *((_QWORD *)v1014 + v1015 - 1) &= ~(-1 << (v1017 & 0x3F));
    v173 = v172;
    v1017 = v164;
    if ((_DWORD)v172 == (_DWORD)v169)
    {
LABEL_355:
      if (!v168)
        goto LABEL_357;
      goto LABEL_356;
    }
    if (v172 <= v169)
    {
      v174 = v172;
      if (v169 > HIDWORD(v1015))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1014, (uint64_t)v1016, (v164 + 63) >> 6, 8);
        v174 = v1015;
        v173 = v1015;
      }
      if (v169 != v172)
        bzero((char *)v1014 + 8 * v174, 8 * (v169 - v172));
      LODWORD(v169) = v173 + v169 - v172;
      LODWORD(v1015) = v169;
      v168 = v1017 & 0x3F;
      goto LABEL_355;
    }
    LODWORD(v1015) = v169;
    if ((v164 & 0x3F) != 0)
LABEL_356:
      *((_QWORD *)v1014 + v169 - 1) &= ~(-1 << v168);
  }
LABEL_357:
  v175 = v1043;
  if ((_DWORD)v1043)
  {
    v176 = (uint64_t *)__b;
    v177 = v1014;
    do
    {
      v178 = *v176++;
      *v177++ |= v178;
      --v175;
    }
    while (v175);
  }
  if (v986)
  {
    RegUsageInfo = (const unsigned int *)llvm::PhysicalRegisterUsageInfo::getRegUsageInfo(v986, (const llvm::Function *)*a2);
    v968 = v180;
    v967 = RegUsageInfo;
    if (v180)
    {
      llvm::LiveRegUnits::removeRegsNotPreserved(&v1013, RegUsageInfo);
      goto LABEL_365;
    }
  }
  else
  {
    v967 = 0;
  }
  v968 = 0;
LABEL_365:
  v181 = v142 + 456;
  *(_QWORD *)(v142 + 456) = a2;
  *(_QWORD *)(v142 + 464) = &v1014;
  v182 = (a2[14] - a2[13]) >> 3;
  v183 = a2;
  if ((_DWORD)v182)
  {
    v184 = (4 * (int)v182 / 3u + 1) | ((unint64_t)(4 * (int)v182 / 3u + 1) >> 1);
    v185 = v184 | (v184 >> 2) | ((v184 | (v184 >> 2)) >> 4);
    v186 = ((v185 | (v185 >> 8)) >> 16) | v185 | (v185 >> 8);
    v183 = a2;
    if (*(_DWORD *)(v142 + 448) <= v186)
    {
      sub_1C4A9E464((uint64_t)v143, v186 + 1);
      v183 = *(_QWORD **)v181;
    }
  }
  v187 = v183 + 40;
  v188 = v183[41];
  v987 = (llvm::PhysicalRegisterUsageInfo *)(v142 + 456);
  if ((_QWORD *)v188 != v183 + 40)
  {
    while (1)
    {
      __src = &unk_1E7FA95C0;
      LOBYTE(v1022) = 0;
      v1027 = 0;
      LOBYTE(v1028[0]) = 0;
      v1030 = 0;
      LOBYTE(v1031[0]) = 0;
      v1033 = 0;
      LOBYTE(v1034[0]) = 0;
      v1036 = 0;
      v189 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v188 + 32) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v188 + 32) + 16));
      v1038 = v1040;
      v1039 = 0x2000000000;
      v1037 = v189;
      __src = &off_1E7FAD510;
      *((_QWORD *)&v1041 + 1) = v188;
      LODWORD(v1041) = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v188 + 32) + 16)
                                                                     + 176))(*(_QWORD *)(*(_QWORD *)(v188 + 32) + 16))
                                 + 44);
      v1047 = 0;
      if ((sub_1C4A9E6EC(*(_QWORD *)(a1 + 432), *(_DWORD *)(a1 + 448), v188, &v1047) & 1) == 0)
        break;
LABEL_385:
      __src = &unk_1E7FA95C0;
      if (v1038 != v1040)
        free(v1038);
      if (v1036)
      {
        if (v1034[0] != v1035)
          free(v1034[0]);
        v1036 = 0;
      }
      if (v1033)
      {
        if (v1031[0] != v1032)
          free(v1031[0]);
        v1033 = 0;
      }
      if (v1030)
      {
        if (v1028[0] != v1029)
          free(v1028[0]);
        v1030 = 0;
      }
      if (v1027 && (__int128 *)v1022 != &v1023)
        free((void *)v1022);
      v188 = *(_QWORD *)(v188 + 8);
      if ((_QWORD *)v188 == v187)
      {
        v181 = v142 + 456;
        v183 = *(_QWORD **)v987;
        v142 = a1;
        goto LABEL_407;
      }
    }
    v190 = *(_DWORD *)(a1 + 440);
    v191 = *(_DWORD *)(a1 + 448);
    if (4 * v190 + 4 >= 3 * v191)
    {
      sub_1C4A9E464((uint64_t)v143, 2 * v191);
      v1047 = 0;
      v193 = *(_QWORD *)(a1 + 432);
      v194 = *(_DWORD *)(a1 + 448);
    }
    else
    {
      if (v191 + ~v190 - *(_DWORD *)(a1 + 444) > v191 >> 3)
      {
LABEL_372:
        v192 = (char *)v1047;
        ++*(_DWORD *)(a1 + 440);
        if (*(_QWORD *)v192 != -4096)
          --*(_DWORD *)(a1 + 444);
        *(_QWORD *)v192 = v188;
        *((_QWORD *)v192 + 1) = &unk_1E7FA95C0;
        v192[16] = 0;
        v192[88] = 0;
        if (v1027)
          sub_1C614E7D8((uint64_t)(v192 + 16), (uint64_t)&v1022);
        v192[96] = 0;
        v192[168] = 0;
        if (v1030)
          sub_1C614E7D8((uint64_t)(v192 + 96), (uint64_t)v1028);
        v192[176] = 0;
        v192[248] = 0;
        if (v1033)
          sub_1C614E7D8((uint64_t)(v192 + 176), (uint64_t)v1031);
        v192[256] = 0;
        v192[328] = 0;
        if (v1036)
          sub_1C614E7D8((uint64_t)(v192 + 256), (uint64_t)v1034);
        *((_QWORD *)v192 + 42) = v1037;
        *((_QWORD *)v192 + 43) = v192 + 360;
        *((_QWORD *)v192 + 44) = 0x2000000000;
        if ((_DWORD)v1039)
          sub_1C49DA288((uint64_t)(v192 + 344), (uint64_t)&v1038);
        *((_QWORD *)v192 + 1) = &off_1E7FAD510;
        *(_OWORD *)(v192 + 872) = v1041;
        goto LABEL_385;
      }
      sub_1C4A9E464((uint64_t)v143, v191);
      v1047 = 0;
      v193 = *(_QWORD *)(a1 + 432);
      v194 = *(_DWORD *)(a1 + 448);
    }
    sub_1C4A9E6EC(v193, v194, v188, &v1047);
    goto LABEL_372;
  }
LABEL_407:
  v195 = v183 + 40;
  if ((_QWORD *)v183[40] != v183 + 40)
  {
    v1060 = 0;
    v1061 = 0;
    v1059 = (uint64_t)&v1060;
    v196 = v183[41];
    if ((_QWORD *)v196 != v195)
    {
      do
      {
        LODWORD(v1047) = *(_DWORD *)(v196 + 24);
        __src = (void *)v196;
        sub_1C49DA68C((uint64_t **)&v1059, (unsigned int *)&v1047, &v1047, (uint64_t **)&__src);
        v196 = *(_QWORD *)(v196 + 8);
      }
      while ((_QWORD *)v196 != v195);
      v183 = *(_QWORD **)v181;
    }
    v197 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v183[2] + 176))(v183[2]) + 44);
    v198 = ((*(_QWORD *)(*(_QWORD *)v181 + 112) - *(_QWORD *)(*(_QWORD *)v181 + 104)) >> 3);
    __src = (char *)&v1022 + 8;
    *(_QWORD *)&v1022 = 0x600000000;
    v993 = (v197 + 63) >> 6;
    sub_1C4765AA4((char *)&__src, v993, 0);
    v998 = v197;
    DWORD2(v1025) = v197;
    sub_1C49DA774((unsigned int **)&v1053, v198, (unsigned int *)&__src);
    if (__src != (char *)&v1022 + 8)
      free(__src);
    v199 = v1061;
    if (v1061)
    {
      while (1)
      {
        v200 = v1060;
        v201 = &v1060;
        if (v1060)
          break;
        do
        {
          v205 = v201;
          v201 = (uint64_t *)v201[2];
        }
        while ((uint64_t *)*v201 == v205);
        v206 = (uint64_t *)v201[1];
        v202 = v201[5];
        if (!v206)
          goto LABEL_417;
        do
        {
          v203 = v206;
          v206 = (uint64_t *)*v206;
        }
        while (v206);
LABEL_423:
        if ((uint64_t *)v1059 == v201)
          v1059 = (uint64_t)v203;
        v1061 = v199 - 1;
        sub_1C485B6E0((uint64_t *)v1060, v201);
        operator delete(v201);
        v1047 = &v1049;
        v1048 = (void *)0x600000000;
        sub_1C4765AA4((char *)&v1047, v993, 0);
        v207 = v998;
        v1051 = v998;
        v208 = *(_QWORD *)(v202 + 88);
        v209 = *(_QWORD *)(v202 + 96);
        while (v208 != v209)
        {
          v210 = (unsigned int *)(v1053 + 72 * *(int *)(*(_QWORD *)v208 + 24));
          v211 = v210[16];
          if (v207 < v211)
          {
            v216 = v207 & 0x3F;
            v217 = v1048;
            if (v216)
              *((_QWORD *)v1047 + v1048 - 1) &= ~(-1 << v216);
            v218 = v217;
            v1051 = v211;
            v219 = v211 + 63;
            if ((_DWORD)v217 != (v211 + 63) >> 6)
            {
              v220 = v219 >> 6;
              if (v217 > v220)
              {
                LODWORD(v1048) = v219 >> 6;
                v218 = v219 >> 6;
              }
              else
              {
                v221 = v217;
                if (v220 > HIDWORD(v1048))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1047, (uint64_t)&v1049, v220, 8);
                  v221 = v1048;
                  v218 = v1048;
                }
                if (v220 != v217)
                  bzero((char *)v1047 + 8 * v221, 8 * (v220 - v217));
                v218 += v220 - v217;
                LODWORD(v1048) = v218;
                v211 = v1051;
              }
            }
            if ((v211 & 0x3F) != 0)
              *((_QWORD *)v1047 + v218 - 1) &= ~(-1 << (v211 & 0x3F));
            v207 = v211;
            v142 = a1;
          }
          v212 = v210[2];
          if ((_DWORD)v212)
          {
            v213 = *(uint64_t **)v210;
            v214 = v1047;
            do
            {
              v215 = *v213++;
              *v214++ |= v215;
              --v212;
            }
            while (v212);
          }
          v208 += 8;
        }
        sub_1C4A9F084((const llvm::MachineBasicBlock *)v202, &v1047, *(_QWORD *)(v142 + 464));
        v222 = *(_DWORD *)(v202 + 24);
        v223 = (unsigned int *)v1053;
        v224 = (unsigned int *)(v1053 + 72 * v222);
        __src = (char *)&v1022 + 8;
        *(_QWORD *)&v1022 = 0x600000000;
        v225 = v224[2];
        if (&__src != (void **)v224 && v225 != 0)
        {
          v227 = (char *)&v1022 + 8;
          v228 = v224[2];
          if (v225 < 7)
            goto LABEL_452;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1022 + 8, v224[2], 8);
          v228 = v224[2];
          if ((_DWORD)v228)
          {
            v227 = (char *)__src;
LABEL_452:
            memcpy(v227, *(const void **)v224, 8 * v228);
          }
          LODWORD(v1022) = v225;
        }
        v229 = &v223[18 * v222];
        v231 = v229[16];
        v230 = v229 + 16;
        DWORD2(v1025) = v231;
        v1065 = 0;
        if (sub_1C4A9F360(*(_QWORD *)(v142 + 432), *(_DWORD *)(v142 + 448), v202, &v1065))
          v232 = v1065;
        else
          v232 = (char *)(*(_QWORD *)(v142 + 432) + 888 * *(unsigned int *)(v142 + 448));
        if (v224 == (unsigned int *)&v1047)
          goto LABEL_469;
        v233 = v1048;
        v234 = v224[2];
        if (v234 >= v1048)
        {
          if ((_DWORD)v1048)
            memmove(*(void **)v224, v1047, 8 * v1048);
          goto LABEL_468;
        }
        if (v224[3] < v1048)
        {
          v224[2] = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v224, (uint64_t)(v224 + 4), v233, 8);
        }
        else if ((_DWORD)v234)
        {
          memmove(*(void **)v224, v1047, 8 * v234);
          goto LABEL_466;
        }
        v234 = 0;
LABEL_466:
        if (v234 != v1048)
          memcpy((void *)(*(_QWORD *)v224 + 8 * v234), (char *)v1047 + 8 * v234, 8 * v1048 - 8 * v234);
LABEL_468:
        v224[2] = v233;
LABEL_469:
        v235 = v232 + 8;
        *v230 = v1051;
        if (!v232[248])
          (*(void (**)(char *))(*(_QWORD *)v235 + 40))(v232 + 8);
        LODWORD(v236) = v224[2];
        v237 = *((_DWORD *)v232 + 46);
        if (v237 >= v236)
          v236 = v236;
        else
          v236 = v237;
        if ((_DWORD)v236)
        {
          v238 = (uint64_t *)*((_QWORD *)v232 + 22);
          v239 = *(_QWORD **)v224;
          do
          {
            v240 = *v238++;
            *v239++ &= ~v240;
            --v236;
          }
          while (v236);
        }
        if (!v232[328])
          (*(void (**)(char *))(*(_QWORD *)v235 + 40))(v232 + 8);
        v241 = *v230;
        v242 = *((_DWORD *)v232 + 80);
        if (*v230 < v242)
        {
          v252 = *v230 & 0x3F;
          v253 = v224[2];
          if (v252)
            *(_QWORD *)(*(_QWORD *)v224 + 8 * v253 - 8) &= ~(-1 << v252);
          v254 = v253;
          *v230 = v242;
          v255 = v242 + 63;
          if ((_DWORD)v253 != (v242 + 63) >> 6)
          {
            v256 = v255 >> 6;
            if (v253 > v256)
            {
              v224[2] = v256;
              v254 = v255 >> 6;
            }
            else
            {
              v257 = v253;
              if (v256 > v224[3])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v224, (uint64_t)(v224 + 4), v256, 8);
                v257 = v224[2];
                v254 = v224[2];
              }
              if (v256 != v253)
                bzero((void *)(*(_QWORD *)v224 + 8 * v257), 8 * (v256 - v253));
              v254 += v256 - v253;
              v224[2] = v254;
              v242 = *v230;
            }
          }
          if ((v242 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)v224 + 8 * v254 - 8) &= ~(-1 << (v242 & 0x3F));
          v241 = v242;
          v142 = a1;
        }
        v243 = *((unsigned int *)v232 + 66);
        if ((_DWORD)v243)
        {
          v244 = (uint64_t *)*((_QWORD *)v232 + 32);
          v245 = *(_QWORD **)v224;
          do
          {
            v246 = *v244++;
            *v245++ |= v246;
            --v243;
          }
          while (v243);
        }
        v247 = (char *)__src;
        v248 = DWORD2(v1025) != v241 || memcmp(__src, *(const void **)v224, 8 * v1022) != 0;
        if (v247 != (char *)&v1022 + 8)
          free(v247);
        if (v248)
        {
          v249 = *(_DWORD ***)(v202 + 64);
          v250 = *(_DWORD ***)(v202 + 72);
          while (v249 != v250)
          {
            __src = 0;
            v251 = *v249++;
            __src = v251;
            LODWORD(v1065) = v251[6];
            sub_1C49DA87C((uint64_t **)&v1059, (unsigned int *)&v1065, &__src);
          }
        }
        if (v1047 != &v1049)
          free(v1047);
        v199 = v1061;
        if (!v1061)
          goto LABEL_509;
      }
      do
      {
        v201 = (uint64_t *)v200;
        v200 = *(_QWORD *)(v200 + 8);
      }
      while (v200);
      v202 = v201[5];
LABEL_417:
      v203 = v201;
      do
      {
        v204 = v203;
        v203 = (uint64_t *)v203[2];
      }
      while ((uint64_t *)*v203 != v204);
      goto LABEL_423;
    }
LABEL_509:
    v258 = *(_QWORD *)v987 + 320;
    v259 = *(_QWORD *)(*(_QWORD *)v987 + 328);
    if (v259 != v258)
    {
      while (1)
      {
        __src = 0;
        if (sub_1C4A9F360(*(_QWORD *)(v142 + 432), *(_DWORD *)(v142 + 448), v259, &__src))
          v260 = (char *)__src;
        else
          v260 = (char *)(*(_QWORD *)(v142 + 432) + 888 * *(unsigned int *)(v142 + 448));
        if (v260[88])
LABEL_1612:
          llvm::report_fatal_error((llvm *)"This should only happen once", (const char *)1);
        v261 = (unsigned int *)v1053;
        v262 = *(_DWORD *)(v259 + 24);
        v263 = (unsigned int *)(v1053 + 72 * v262);
        v264 = v260 + 32;
        *((_QWORD *)v260 + 2) = v260 + 32;
        *((_QWORD *)v260 + 3) = 0x600000000;
        v265 = v263[2];
        if (v260 + 16 == (char *)v263 || v265 == 0)
          goto LABEL_524;
        if (v265 < 7)
          break;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v260 + 16), (uint64_t)(v260 + 32), v263[2], 8);
        v267 = v263[2];
        if ((_DWORD)v267)
        {
          v264 = (void *)*((_QWORD *)v260 + 2);
          goto LABEL_522;
        }
LABEL_523:
        *((_DWORD *)v260 + 6) = v265;
LABEL_524:
        *((_DWORD *)v260 + 20) = v261[18 * v262 + 16];
        v260[88] = 1;
        v259 = *(_QWORD *)(v259 + 8);
        v142 = a1;
        if (v259 == v258)
          goto LABEL_525;
      }
      v267 = v263[2];
LABEL_522:
      memcpy(v264, *(const void **)v263, 8 * v267);
      goto LABEL_523;
    }
LABEL_525:
    __src = &v1053;
    sub_1C476B22C((void ***)&__src);
    sub_1C61247C0((uint64_t)&v1059, (_QWORD *)v1060);
  }
  if (__b != &v1044)
    free(__b);
LABEL_528:
  __src = &off_1E81316D0;
  *(_QWORD *)&v1022 = v989;
  *(_QWORD *)&v1023 = &__src;
  v268 = sub_1C4C0B384(&__src);
  p_src = (void **)v1023;
  if ((void **)v1023 == &__src)
  {
    v270 = (void (**)(void **))((char *)__src + 32);
    p_src = &__src;
  }
  else
  {
    if (!(_QWORD)v1023)
      goto LABEL_531;
    v270 = (void (**)(void **))(*(_QWORD *)v1023 + 40);
  }
  (*v270)(p_src);
LABEL_531:
  *(_BYTE *)(v142 + 525) = v268 < 4;
  v271 = a2[41];
  v973 = a2 + 40;
  if ((_QWORD *)v271 != a2 + 40)
  {
    v972 = 0;
    while (1)
    {
      v272 = v271;
      v273 = sub_1C4A9F510(*(_QWORD *)(v142 + 256), *(_DWORD *)(v142 + 272), v271);
      v976 = (llvm::MachineBasicBlock *)v272;
      v274 = sub_1C4A9F510(*(_QWORD *)(v142 + 344), *(_DWORD *)(v142 + 360), v272);
      v275 = v142;
      v276 = v274;
      v277 = *(_DWORD **)(v275 + 248);
      *((_QWORD *)&v1022 + 1) = 0x600000000;
      *(_QWORD *)&v1022 = &v1023;
      __src = v277;
      v278 = v277[11];
      v1026 = v278;
      v279 = v278 + 63;
      if (v278 + 63 < 0x40)
      {
        v284 = 0;
        v283 = &v1023;
      }
      else
      {
        v280 = v279 >> 6;
        if (v279 >= 0x1C0)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1022, (uint64_t)&v1023, v279 >> 6, 8);
          v283 = (__int128 *)v1022;
          v281 = DWORD2(v1022);
          LOBYTE(v278) = v1026;
          v282 = DWORD2(v1022);
        }
        else
        {
          v281 = 0;
          v282 = 0;
          v283 = &v1023;
        }
        bzero((char *)v283 + 8 * v281, 8 * v280);
        v284 = v282 + v280;
        DWORD2(v1022) = v282 + v280;
      }
      if ((v278 & 0x3F) != 0)
        *((_QWORD *)v283 + v284 - 1) &= ~(-1 << (v278 & 0x3F));
      llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&__src, v976);
      if (*(_BYTE *)(a1 + 524))
      {
        v285 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v976 + 4) + 16) + 176))(*(_QWORD *)(*((_QWORD *)v976 + 4) + 16))
                         + 44);
        v1047 = &v1049;
        v1048 = (void *)0x600000000;
        sub_1C4765AA4((char *)&v1047, (v285 + 63) >> 6, 0);
        v1051 = v285;
        v286 = (uint64_t *)*((_QWORD *)v976 + 11);
        v287 = (uint64_t *)*((_QWORD *)v976 + 12);
        while (v286 != v287)
        {
          v288 = *v286;
          __b = 0;
          if (sub_1C4A9F360(*(_QWORD *)(a1 + 432), *(_DWORD *)(a1 + 448), v288, &__b))
            v289 = __b;
          else
            v289 = (_DWORD *)(*(_QWORD *)(a1 + 432) + 888 * *(unsigned int *)(a1 + 448));
          v290 = v289[20];
          if (v1051 < v290)
          {
            v295 = v1048;
            if ((v1051 & 0x3F) != 0)
              *((_QWORD *)v1047 + v1048 - 1) &= ~(-1 << (v1051 & 0x3F));
            v296 = v295;
            v1051 = v290;
            v297 = v290 + 63;
            if ((_DWORD)v295 != (v290 + 63) >> 6)
            {
              v298 = v297 >> 6;
              if (v295 > v298)
              {
                LODWORD(v1048) = v297 >> 6;
                v296 = v297 >> 6;
              }
              else
              {
                v299 = v295;
                if (v298 > HIDWORD(v1048))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1047, (uint64_t)&v1049, v298, 8);
                  v299 = v1048;
                  v296 = v1048;
                }
                if (v298 != v295)
                  bzero((char *)v1047 + 8 * v299, 8 * (v298 - v295));
                v296 += v298 - v295;
                LODWORD(v1048) = v296;
                LOBYTE(v290) = v1051;
              }
            }
            v300 = v290 & 0x3F;
            if (v300)
              *((_QWORD *)v1047 + v296 - 1) &= ~(-1 << v300);
          }
          v291 = v289[6];
          if ((_DWORD)v291)
          {
            v292 = (uint64_t *)*((_QWORD *)v289 + 2);
            v293 = v1047;
            do
            {
              v294 = *v292++;
              *v293++ |= v294;
              --v291;
            }
            while (v291);
          }
          ++v286;
        }
        __b = &v1044;
        v1043 = (void *)0x400000000;
        sub_1C4A9F084(v976, &v1047, *(_QWORD *)(a1 + 464));
        if (__b != &v1044)
          free(__b);
        v301 = v1051;
        if (v1026 < v1051)
        {
          v302 = DWORD2(v1022);
          if ((v1026 & 0x3F) != 0)
            *(_QWORD *)(v1022 + 8 * DWORD2(v1022) - 8) &= ~(-1 << (v1026 & 0x3F));
          v303 = v302;
          v1026 = v301;
          v304 = v301 + 63;
          if ((_DWORD)v302 != (v301 + 63) >> 6)
          {
            v305 = v304 >> 6;
            if (v302 > v305)
            {
              DWORD2(v1022) = v304 >> 6;
              v303 = v304 >> 6;
            }
            else
            {
              v306 = v302;
              if (v305 > HIDWORD(v1022))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1022, (uint64_t)&v1023, v305, 8);
                v306 = DWORD2(v1022);
                v303 = DWORD2(v1022);
              }
              if (v305 != v302)
                bzero((void *)(v1022 + 8 * v306), 8 * (v305 - v302));
              v303 += v305 - v302;
              DWORD2(v1022) = v303;
              LOBYTE(v301) = v1026;
            }
          }
          v307 = v301 & 0x3F;
          if (v307)
            *(_QWORD *)(v1022 + 8 * v303 - 8) &= ~(-1 << v307);
        }
        v308 = v1048;
        v309 = (uint64_t *)v1047;
        if ((_DWORD)v1048)
        {
          v310 = (_QWORD *)v1022;
          v311 = (uint64_t *)v1047;
          do
          {
            v312 = *v311++;
            *v310++ |= v312;
            --v308;
          }
          while (v308);
        }
        if (v309 != &v1049)
          free(v309);
      }
      if (__src)
        v313 = (char *)__src + 8;
      else
        v313 = 0;
      v314 = *(unsigned int *)(*v313 + 6424);
      v315 = (_WORD *)(v313[6] + ((v314 >> 3) & 0x1FFFFFFE));
      v317 = *v315;
      v316 = v315 + 1;
      v318 = v317 + 267 * (v314 & 0xF);
      v975 = v273 + 1;
      v974 = v276 + 1;
      do
      {
        v980 = (1 << v318) & *(_QWORD *)(v1022 + 8 * (v318 >> 6));
        if (v980)
          break;
        v319 = *v316++;
        v318 += v319;
      }
      while (v319);
      v142 = a1;
      *(_DWORD *)(a1 + 520) = 0;
      v320 = (_QWORD *)((char *)v976 + 48);
      v321 = *((_QWORD *)v976 + 6) & 0xFFFFFFFFFFFFFFF8;
      if ((llvm::MachineBasicBlock *)((char *)v976 + 48) != (llvm::MachineBasicBlock *)v321)
      {
        if (!v321 || (*(_BYTE *)v321 & 4) == 0)
        {
          while ((*(_WORD *)(v321 + 44) & 4) != 0)
            v321 = *(_QWORD *)v321 & 0xFFFFFFFFFFFFFFF8;
        }
        if (**(_WORD **)(v321 + 16) == 623)
        {
          v322 = atomic_load((unsigned __int8 *)&qword_1ED7ED8B8);
          if ((v322 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED8B8))
          {
            byte_1ED7ED8AC = 1;
            __cxa_guard_release(&qword_1ED7ED8B8);
          }
          if (byte_1ED7ED8AC == 1)
            *(_DWORD *)(a1 + 520) = 11;
        }
      }
      v323 = *v320 & 0xFFFFFFFFFFFFFFF8;
      if (!v323 || (*(_BYTE *)v323 & 4) == 0)
      {
        while ((*(_WORD *)(v323 + 44) & 4) != 0)
          v323 = *(_QWORD *)v323 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v323 != v320)
        break;
      LOBYTE(v324) = 0;
LABEL_1211:
      if ((__int128 *)v1022 != &v1023)
        free((void *)v1022);
      v972 |= v324;
      v271 = *((_QWORD *)v976 + 1);
      if ((_QWORD *)v271 == v973)
        goto LABEL_1221;
    }
    v324 = 0;
    v979 = 0;
    while (**(unsigned __int16 **)(v323 + 16) - 13 < 5)
    {
LABEL_1154:
      v323 = *(_QWORD *)v323 & 0xFFFFFFFFFFFFFFF8;
      if (!v323 || (*(_BYTE *)v323 & 4) == 0)
      {
        while ((*(_WORD *)(v323 + 44) & 4) != 0)
          v323 = *(_QWORD *)v323 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v323 == v320)
        goto LABEL_1211;
    }
    v978 = v324;
    v983 = (llvm::MachineInstr *)v323;
    v325 = *(_DWORD **)(v142 + 248);
    v1049 = 0x600000000;
    v1048 = v1050;
    v1047 = v325;
    v326 = v325[11];
    v1052 = v326;
    v327 = v326 + 63;
    if (v326 + 63 < 0x40)
    {
      v332 = 0;
      v331 = v1050;
    }
    else
    {
      v328 = v327 >> 6;
      if (v327 >= 0x1C0)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1048, (uint64_t)v1050, v327 >> 6, 8);
        v331 = v1048;
        v329 = v1049;
        LOBYTE(v326) = v1052;
        v330 = v1049;
      }
      else
      {
        v329 = 0;
        v330 = 0;
        v331 = v1050;
      }
      bzero(&v331[8 * v329], 8 * v328);
      v332 = v330 + v328;
      LODWORD(v1049) = v330 + v328;
    }
    if ((v326 & 0x3F) != 0)
      *(_QWORD *)&v331[8 * v332 - 8] &= ~(-1 << (v326 & 0x3F));
    v333 = *(_DWORD **)(v142 + 248);
    v1044 = 0x600000000;
    v1043 = v1045;
    __b = v333;
    v334 = v333[11];
    v1046 = v334;
    v335 = v334 + 63;
    if ((v334 + 63) < 0x40)
    {
      v340 = 0;
      v339 = v1045;
    }
    else
    {
      v336 = v335 >> 6;
      if (v335 >= 0x1C0)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1043, (uint64_t)v1045, v335 >> 6, 8);
        v339 = v1043;
        v337 = v1044;
        LOBYTE(v334) = v1046;
        v338 = v1044;
      }
      else
      {
        v337 = 0;
        v338 = 0;
        v339 = v1045;
      }
      bzero(&v339[2 * v337], 8 * v336);
      v340 = v338 + v336;
      LODWORD(v1044) = v338 + v336;
    }
    v323 = (unint64_t)v983;
    if ((v334 & 0x3F) != 0)
      *(_QWORD *)&v339[2 * v340 - 2] &= ~(-1 << (v334 & 0x3F));
    v341 = (unsigned __int16 *)*((_QWORD *)v983 + 2);
    v342 = sub_1C4C915C4(*v341);
    if ((v342 & 0xFF00000000) != 0 && v342 == 19)
    {
      v345 = *((_QWORD *)v983 + 4);
      NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands((uint64_t)v983);
      v344 = v979;
      if (NumExplicitOperands)
      {
        v347 = v345 + 32 * NumExplicitOperands;
        v348 = v1043;
        if (__b)
          v349 = (char *)__b + 8;
        else
          v349 = 0;
        v350 = v1048;
        if (v1047)
          v351 = (char *)v1047 + 8;
        else
          v351 = 0;
        do
        {
          if (!*(_DWORD *)v345)
          {
            v352 = *(unsigned __int16 *)(v345 + 4);
            if ((*(_DWORD *)v345 & 0x1000000) != 0)
            {
              v358 = (unsigned __int16 *)(v349[6]
                                        + (((unint64_t)*(unsigned int *)(*v349
                                                                              + 24 * *(unsigned __int16 *)(v345 + 4)
                                                                              + 16) >> 3) & 0x1FFFFFFE));
              v360 = *v358;
              v359 = v358 + 1;
              v361 = v360 + (*(_DWORD *)(*v349 + 24 * *(unsigned __int16 *)(v345 + 4) + 16) & 0xF) * v352;
              do
              {
                v348[(unsigned __int16)v361 >> 6] |= 1 << v361;
                v362 = *v359++;
                v361 += v362;
              }
              while (v362);
            }
            else
            {
              v353 = (unsigned __int16 *)(v351[6]
                                        + (((unint64_t)*(unsigned int *)(*v351
                                                                              + 24 * *(unsigned __int16 *)(v345 + 4)
                                                                              + 16) >> 3) & 0x1FFFFFFE));
              v355 = *v353;
              v354 = v353 + 1;
              v356 = v355 + (*(_DWORD *)(*v351 + 24 * *(unsigned __int16 *)(v345 + 4) + 16) & 0xF) * v352;
              do
              {
                v350[(unsigned __int16)v356 >> 6] |= 1 << v356;
                v357 = *v354++;
                v356 += v357;
              }
              while (v357);
            }
          }
          v345 += 32;
        }
        while (v345 != v347);
      }
    }
    else
    {
      sub_1C4A9692C((unint64_t)v983, (llvm::LiveRegUnits *)&__b, &v1047, *(_QWORD *)(v142 + 248));
      v341 = (unsigned __int16 *)*((_QWORD *)v983 + 2);
      v344 = v979;
    }
    v363 = *((_QWORD *)v341 + 2);
    v364 = v344 | ((~v363 & 0x400000040) == 0);
    if (v980 && (v364 & 1) != 0)
    {
      if (__src)
        v365 = (char *)__src + 8;
      else
        v365 = 0;
      v366 = *(unsigned int *)(*v365 + 6424);
      v367 = (_WORD *)(v365[6] + ((v366 >> 3) & 0x1FFFFFFE));
      v369 = *v367;
      v368 = v367 + 1;
      v370 = v369 + 267 * (v366 & 0xF);
      do
      {
        v371 = (1 << v370) & *(_QWORD *)(v1022 + 8 * (v370 >> 6));
        if (v371)
          break;
        v372 = *v368++;
        v370 += v372;
      }
      while (v372);
      v364 = v364 & (v371 == 0);
    }
    if (v980 && (v364 & 1) != 0)
    {
      v373 = v1022;
      if (__src)
        v374 = (char *)__src + 8;
      else
        v374 = 0;
      v375 = *(unsigned int *)(*v374 + 6424);
      v376 = (unsigned __int16 *)(v374[6] + ((v375 >> 3) & 0x1FFFFFFE));
      v378 = *v376;
      v377 = v376 + 1;
      v379 = v378 + 267 * (v375 & 0xF);
      v380 = v377;
      v381 = v379;
      while (((*(_QWORD *)(v1022 + 8 * (v381 >> 6)) >> v381) & 1) == 0)
      {
        v382 = *v380++;
        v381 += v382;
        if (!v382)
        {
          do
          {
            v364 = 0;
            *(_QWORD *)(v373 + 8 * ((unsigned __int16)v379 >> 6)) |= 1 << v379;
            v383 = *v377++;
            v379 += v383;
          }
          while (v383);
          break;
        }
      }
    }
    if (v1044 >= DWORD2(v1022))
      v384 = DWORD2(v1022);
    else
      v384 = v1044;
    if ((_DWORD)v384)
    {
      v385 = (uint64_t *)v1043;
      v386 = (_QWORD *)v1022;
      do
      {
        v387 = *v385++;
        *v386++ &= ~v387;
        --v384;
      }
      while (v384);
    }
    v979 = v364;
    if ((v363 & 0x400000000) == 0)
      goto LABEL_662;
    v977 = v341;
    v389 = *((_QWORD *)v341 + 1);
    if ((*((_WORD *)v983 + 22) & 0xC) != 0 && (*((_WORD *)v983 + 22) & 4) == 0)
    {
      v397 = v983;
      if ((v389 & 0x80) == 0)
      {
        while ((*((_WORD *)v397 + 22) & 8) != 0)
        {
          v388 = 0;
          v397 = (llvm::MachineInstr *)*((_QWORD *)v397 + 1);
          if ((*(_BYTE *)(*((_QWORD *)v397 + 2) + 8) & 0x80) != 0)
            goto LABEL_1124;
        }
LABEL_668:
        v1053 = 1;
        v1054 = -1;
        v1055 = -1;
        v1056 = v1058;
        v1057 = 0x400000000;
        v391 = *v977;
        v392 = sub_1C4C915C4(v391);
        if ((v392 & 0xFF00000000) == 0)
          goto LABEL_702;
        v393 = v392;
        v394 = v392 - 32;
        if ((v392 - 32) > 0x2B)
          goto LABEL_702;
        if (((1 << v394) & 0xFC000380000) != 0)
        {
          v395 = v391;
        }
        else
        {
          if (((1 << v394) & 3) != 0)
            goto LABEL_682;
          if (((1 << v394) & 0x1040) == 0)
            goto LABEL_702;
          v398 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v983 + 3) + 32) + 16);
          if (sub_1C4C32DEC(v391) != 22)
            goto LABEL_702;
          if (v393 == 44)
          {
LABEL_682:
            v396 = sub_1C4C2FD5C(v391);
            goto LABEL_683;
          }
          if (!*(_BYTE *)(v398 + 350))
            goto LABEL_702;
          v395 = v391;
        }
        v396 = sub_1C4C2FD5C(v395);
        if (v396 == -1)
          goto LABEL_702;
LABEL_683:
        if (sub_1C4AD4FB8((uint64_t)v983, v396, (_QWORD *)(*(_QWORD *)(v142 + 248) + 8)) != 1)
          goto LABEL_702;
        v399 = *(_DWORD *)(*((_QWORD *)v983 + 4) + 32 * v396 + 4);
        LODWORD(v1059) = v399;
        if ((v1053 & 1) != 0)
        {
          v400 = 4;
          v401 = &v1054;
        }
        else
        {
          v400 = v1055;
          if (!(_DWORD)v1055)
          {
            v410 = 0;
LABEL_699:
            v411 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1059, &v1059, v410);
            *v411 = v1059;
            v412 = v1059;
            v413 = v1057;
            if (v1057 >= (unint64_t)HIDWORD(v1057))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
              v413 = v1057;
            }
            *((_DWORD *)v1056 + v413) = v412;
            LODWORD(v1057) = v1057 + 1;
LABEL_702:
            if (!*(_DWORD *)(v142 + 520))
              goto LABEL_731;
            if (!*(_BYTE *)(v142 + 525))
              goto LABEL_731;
            v414 = **((unsigned __int16 **)v983 + 2);
            v415 = sub_1C4C915C4(v414);
            if ((v415 & 0xFF00000000) == 0)
              goto LABEL_731;
            v416 = v415 - 61;
            if (((v415 - 61) > 0x2D
               || ((1 << v416) & 0x18000000DLL) == 0 && ((1 << v416) & 0x300000000000) == 0)
              && ((v415 - 190) > 3 || (_DWORD)v415 == 191))
            {
              goto LABEL_731;
            }
            v418 = sub_1C4C2FD5C(v414);
            if (sub_1C4AD4FB8((uint64_t)v983, v418, (_QWORD *)(*(_QWORD *)(v142 + 248) + 8)) != 1)
              goto LABEL_731;
            v419 = *(_DWORD *)(*((_QWORD *)v983 + 4) + 32 * v418 + 4);
            LODWORD(v1059) = v419;
            if ((v1053 & 1) != 0)
            {
              v420 = 4;
              v421 = &v1054;
            }
            else
            {
              v420 = v1055;
              if (!(_DWORD)v1055)
              {
                v430 = 0;
LABEL_728:
                v431 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1059, &v1059, v430);
                *v431 = v1059;
                v432 = v1059;
                v433 = v1057;
                if (v1057 >= (unint64_t)HIDWORD(v1057))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                  v433 = v1057;
                }
                *((_DWORD *)v1056 + v433) = v432;
                LODWORD(v1057) = v1057 + 1;
LABEL_731:
                v434 = *(_QWORD *)(v142 + 248);
                v435 = v983;
                v436 = **((unsigned __int16 **)v983 + 2);
                v437 = sub_1C4C915C4(v436);
                if ((v437 & 0xFF00000000) == 0
                  || ((v437 - 51) <= 0x18 ? (v438 = ((1 << (v437 - 51)) & 0x1F80007) == 0) : (v438 = 1),
                      v438))
                {
LABEL_781:
                  v474 = *(_QWORD **)(*((_QWORD *)v435 + 3) + 32);
                  v475 = (unsigned __int8 *)v474[2];
                  if (v475[394])
                  {
                    v476 = **((unsigned __int16 **)v435 + 2);
                    v477 = sub_1C4C915C4(v476);
                    v142 = a1;
                    if ((v477 & 0xFF00000000) != 0)
                    {
                      if ((int)v477 > 163)
                      {
                        if ((v477 - 164) > 0x28
                          || ((1 << (v477 + 92)) & 0x11A3400000FLL) == 0)
                        {
                          goto LABEL_859;
                        }
                      }
                      else if (((v477 - 61) > 0x3D
                              || ((1 << (v477 - 61)) & 0x300037B3810E000FLL) == 0)
                             && (_DWORD)v477 != 0
                             && (_DWORD)v477 != 11)
                      {
                        goto LABEL_859;
                      }
                      v494 = v983;
                      v1003[0] = v983;
                      v1003[1] = v434;
                      v1004 = v476;
                      v1065 = (char *)v1067;
                      v1066 = 0x400000000;
                      if (*((_DWORD *)v983 + 10))
                      {
                        v495 = 0;
                        v496 = 0;
                        v497 = 0;
                        do
                        {
                          if (!*(_BYTE *)(*((_QWORD *)v494 + 4) + v495))
                          {
                            if (v496 >= HIDWORD(v1066))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1065, (uint64_t)v1067, v496 + 1, 4);
                              v496 = v1066;
                            }
                            *(_DWORD *)&v1065[4 * v496] = v497;
                            v496 = v1066 + 1;
                            LODWORD(v1066) = v1066 + 1;
                            v494 = (llvm::MachineInstr *)v1003[0];
                          }
                          ++v497;
                          v495 += 32;
                        }
                        while (v497 < *((unsigned int *)v494 + 10));
                      }
                      sub_1C4AD662C((uint64_t)v1003, (uint64_t)&v1065, 0, 1, 1, &v1059);
                      if (v1065 != (char *)v1067)
                        free(v1065);
                      v498 = (uint64_t *)v1059;
                      v499 = (uint64_t *)(v1059 + 8 * v1060);
                      if (!(_DWORD)v1060)
                      {
LABEL_856:
                        if (v498 != &v1061)
                          free(v498);
                        v474 = *(_QWORD **)(*((_QWORD *)v983 + 3) + 32);
                        v475 = (unsigned __int8 *)v474[2];
                        goto LABEL_859;
                      }
                      while (1)
                      {
                        v500 = (_DWORD *)*v498;
                        v1065 = (char *)*v498;
                        if ((v1053 & 1) != 0)
                        {
                          v501 = 4;
                          v502 = &v1054;
                        }
                        else
                        {
                          v501 = v1055;
                          if (!(_DWORD)v1055)
                          {
                            v511 = 0;
LABEL_848:
                            v512 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1065, &v1065, v511);
                            *v512 = (_DWORD)v1065;
                            v513 = (int)v1065;
                            v514 = v1057;
                            if (v1057 >= (unint64_t)HIDWORD(v1057))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                              v514 = v1057;
                            }
                            *((_DWORD *)v1056 + v514) = v513;
                            LODWORD(v1057) = v1057 + 1;
                            goto LABEL_851;
                          }
                          v502 = (uint64_t *)v1054;
                        }
                        v503 = v501 - 1;
                        v504 = v503 & (37 * (_DWORD)v500);
                        v505 = (_DWORD *)v502 + v504;
                        v506 = *v505;
                        if (*v505 != (_DWORD)v500)
                        {
                          v507 = 0;
                          v508 = 1;
                          while (v506 != -1)
                          {
                            if (v507)
                              v509 = 0;
                            else
                              v509 = v506 == -2;
                            if (v509)
                              v507 = v505;
                            v510 = v504 + v508++;
                            v504 = v510 & v503;
                            v505 = (_DWORD *)v502 + v504;
                            v506 = *v505;
                            if (*v505 == (_DWORD)v500)
                              goto LABEL_851;
                          }
                          if (v507)
                            v511 = v507;
                          else
                            v511 = v505;
                          goto LABEL_848;
                        }
LABEL_851:
                        if (++v498 == v499)
                        {
                          v498 = (uint64_t *)v1059;
                          goto LABEL_856;
                        }
                      }
                    }
                  }
                  else
                  {
                    v142 = a1;
                  }
LABEL_859:
                  v515 = v475[349];
                  v516 = v475[351];
                  v323 = (unint64_t)v983;
                  if (!(v516 | v515))
                    goto LABEL_1026;
                  v517 = *(_QWORD *)(v142 + 248);
                  v981 = *(unsigned __int8 *)(v142 + 524);
                  v1065 = (char *)v1067;
                  v1066 = 0x400000000;
                  v518 = *((_QWORD *)v983 + 2);
                  v519 = *(unsigned __int8 *)(v518 + 4);
                  v520 = *(unsigned __int16 *)(v518 + 2);
                  v984 = v515;
                  if ((int)v519 + 1 < v520)
                  {
                    v521 = 32 * v519;
                    v522 = v520 - 1;
                    do
                    {
                      if (sub_1C4AD4FB8((uint64_t)v983, v519, (_QWORD *)(v517 + 8)) == 1)
                      {
                        v523 = *((_QWORD *)v983 + 4);
                        v524 = v1066;
                        if (v1066 >= (unint64_t)HIDWORD(v1066))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1065, (uint64_t)v1067, v1066 + 1, 8);
                          v524 = v1066;
                        }
                        *(_QWORD *)&v1065[8 * v524] = v521 + v523;
                        LODWORD(v1066) = v1066 + 1;
                      }
                      ++v519;
                      v521 += 32;
                    }
                    while (v522 != v519);
                    v474 = *(_QWORD **)(*((_QWORD *)v983 + 3) + 32);
                    v515 = v984;
                  }
                  v525 = ((*(unsigned __int16 *)(*v474 + 18) >> 4) & 0x3FF) - 101;
                  v458 = v525 > 7;
                  v526 = (1 << v525) & 0x8D;
                  if (v458 || v526 == 0)
                  {
                    v528 = 0;
                  }
                  else
                  {
                    v528 = 0;
                    if (v516)
                    {
                      v529 = (unsigned __int16 *)*((_QWORD *)v983 + 2);
                      if ((*((_QWORD *)v529 + 2) & 0x2001C00) == 0x2000800)
                      {
                        v530 = *v529;
                        v531 = sub_1C4C32DEC(v530);
                        v528 = 0;
                        if (v531 == 45)
                          v528 = *(_DWORD *)(*((_QWORD *)v983 + 4) + 32 * sub_1C4C2FD5C(v530) + 4);
                      }
                    }
                  }
                  v1002 = (_QWORD *)(v517 + 8);
                  v323 = (unint64_t)v983;
                  v994 = v528;
                  while (1)
                  {
                    v1059 = 1;
                    v1060 = -1;
                    v1061 = -1;
                    v1062 = (unsigned int *)v1064;
                    v1063 = 0x400000000;
                    if (!(_DWORD)v1066)
                    {
                      v620 = 0;
                      goto LABEL_1020;
                    }
                    v532 = 0;
                    v533 = v1065;
                    v534 = &v1065[8 * v1066];
                    do
                    {
                      v535 = *(_DWORD *)(*(_QWORD *)v533 + 4);
                      if (__src)
                        v536 = (char *)__src + 8;
                      else
                        v536 = 0;
                      v537 = *(unsigned int *)(*v536 + 24 * (unsigned __int16)*(_DWORD *)(*(_QWORD *)v533 + 4) + 16);
                      v538 = (_WORD *)(v536[6] + ((v537 >> 3) & 0x1FFFFFFE));
                      v540 = *v538;
                      v539 = v538 + 1;
                      v541 = v540 + (v537 & 0xF) * v535;
                      while (((*(_QWORD *)(v1022 + 8 * (v541 >> 6)) >> v541) & 1) == 0)
                      {
                        v542 = *v539++;
                        v541 += v542;
                        if (!v542)
                          goto LABEL_889;
                      }
                      if (v981 || ((**(_DWORD **)v533 >> 26) & ~HIBYTE(**(_DWORD **)v533) & 1) == 0)
                        goto LABEL_916;
LABEL_889:
                      if ((v1053 & 1) != 0)
                      {
                        v543 = 4;
                        v544 = &v1054;
                      }
                      else
                      {
                        v543 = v1055;
                        if (!(_DWORD)v1055)
                          goto LABEL_898;
                        v544 = (uint64_t *)v1054;
                      }
                      v545 = v543 - 1;
                      v546 = v545 & (37 * v535);
                      v547 = *((_DWORD *)v544 + v546);
                      if (v535 == v547)
                        goto LABEL_916;
                      v548 = 1;
                      while (v547 != -1)
                      {
                        v549 = v546 + v548++;
                        v546 = v549 & v545;
                        v547 = *((_DWORD *)v544 + v546);
                        if (v535 == v547)
                          goto LABEL_916;
                      }
LABEL_898:
                      LODWORD(v1003[0]) = *(_DWORD *)(*(_QWORD *)v533 + 4);
                      if ((v1059 & 1) != 0)
                      {
                        v550 = 4;
                        v551 = &v1060;
LABEL_900:
                        v552 = v550 - 1;
                        v553 = v552 & (37 * v535);
                        v554 = (_DWORD *)v551 + v553;
                        v555 = *v554;
                        if (v535 == *v554)
                          goto LABEL_916;
                        v556 = 0;
                        v557 = 1;
                        while (v555 != -1)
                        {
                          if (v556)
                            v558 = 0;
                          else
                            v558 = v555 == -2;
                          if (v558)
                            v556 = v554;
                          v559 = v553 + v557++;
                          v553 = v559 & v552;
                          v554 = (_DWORD *)v551 + v553;
                          v555 = *v554;
                          if (v535 == *v554)
                            goto LABEL_916;
                        }
                        if (v556)
                          v560 = v556;
                        else
                          v560 = v554;
                        goto LABEL_913;
                      }
                      v550 = v1061;
                      if ((_DWORD)v1061)
                      {
                        v551 = (uint64_t *)v1060;
                        goto LABEL_900;
                      }
                      v560 = 0;
LABEL_913:
                      v561 = sub_1C47686DC((uint64_t)&v1059, (uint64_t)v1003, v1003, v560);
                      *v561 = v1003[0];
                      v562 = v1003[0];
                      v563 = v1063;
                      if (v1063 >= (unint64_t)HIDWORD(v1063))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1062, (uint64_t)v1064, v1063 + 1, 4);
                        v563 = v1063;
                      }
                      v1062[v563] = v562;
                      v532 = v1063 + 1;
                      LODWORD(v1063) = v1063 + 1;
LABEL_916:
                      v533 += 8;
                    }
                    while (v533 != v534);
                    v564 = v1062;
                    if (v532)
                    {
                      v999 = 0;
                      v565 = (char *)&v1062[v532];
                      v566 = v994;
                      v990 = v565;
                      while (1)
                      {
                        v567 = *v564;
                        v568 = v1053;
                        if ((v1053 & 1) != 0)
                        {
                          v569 = 4;
                          v570 = &v1054;
                        }
                        else
                        {
                          v569 = v1055;
                          if (!(_DWORD)v1055)
                            goto LABEL_932;
                          v570 = (uint64_t *)v1054;
                        }
                        v571 = v569 - 1;
                        v572 = v571 & (37 * v567);
                        v573 = *((_DWORD *)v570 + v572);
                        if (v567 == v573)
                          goto LABEL_983;
                        v574 = 1;
                        while (v573 != -1)
                        {
                          v575 = v572 + v574++;
                          v572 = v575 & v571;
                          v573 = *((_DWORD *)v570 + v572);
                          if (v567 == v573)
                            goto LABEL_983;
                        }
LABEL_932:
                        if (v515 && (_DWORD)v1066)
                        {
                          v576 = v1065;
                          v577 = &v1065[8 * v1066];
                          if ((v1059 & 1) != 0)
                            v578 = &v1060;
                          else
                            v578 = (uint64_t *)v1060;
                          if ((v1059 & 1) != 0)
                            v579 = 3;
                          else
                            v579 = v1061 - 1;
                          v580 = (v1059 & 1 | v1061) == 0;
                          v988 = 37 * v567;
                          while (1)
                          {
                            v581 = *(_DWORD *)(*(_QWORD *)v576 + 4);
                            v582 = v567 == v581 || v580;
                            if ((v582 & 1) == 0)
                            {
                              v583 = *((_DWORD *)v578 + (v579 & (37 * v567)));
                              if (v567 == v583)
                              {
                                v586 = 1;
                              }
                              else
                              {
                                v584 = 1;
                                v585 = v579 & (37 * v567);
                                do
                                {
                                  v586 = v583 != -1;
                                  if (v583 == -1)
                                    break;
                                  v587 = v585 + v584++;
                                  v585 = v587 & v579;
                                  v583 = *((_DWORD *)v578 + v585);
                                }
                                while (v567 != v583);
                              }
                              v588 = (37 * v581) & v579;
                              v589 = *((_DWORD *)v578 + v588);
                              if (v581 != v589)
                              {
                                v590 = 1;
                                while (v589 != -1)
                                {
                                  v591 = v588 + v590++;
                                  v588 = v591 & v579;
                                  v589 = *((_DWORD *)v578 + v588);
                                  if (v581 == v589)
                                    goto LABEL_960;
                                }
                                if (v586
                                  && v567 - 1 <= 0x3FFFFFFE
                                  && v581 - 1 <= 0x3FFFFFFE
                                  && llvm::MCRegisterInfo::regsOverlap(v1002, v567, v581))
                                {
                                  break;
                                }
                              }
                            }
LABEL_960:
                            v576 += 8;
                            if (v576 == v577)
                            {
                              v515 = v984;
                              v565 = v990;
                              v566 = v994;
                              goto LABEL_962;
                            }
                          }
                          LODWORD(v1003[0]) = v567;
                          if ((v568 & 1) != 0)
                          {
                            v606 = 4;
                            v607 = &v1054;
                            v515 = v984;
                            v565 = v990;
                            v566 = v994;
                            goto LABEL_991;
                          }
                          v606 = v1055;
                          v515 = v984;
                          v565 = v990;
                          v566 = v994;
                          if (!(_DWORD)v1055)
                          {
                            v616 = 0;
                            goto LABEL_1004;
                          }
                          v607 = (uint64_t *)v1054;
LABEL_991:
                          v608 = v606 - 1;
                          v609 = v608 & v988;
                          v610 = (_DWORD *)v607 + (v608 & v988);
                          v611 = *v610;
                          if (v567 != *v610)
                          {
                            v612 = 0;
                            v613 = 1;
                            while (v611 != -1)
                            {
                              if (v612)
                                v614 = 0;
                              else
                                v614 = v611 == -2;
                              if (v614)
                                v612 = v610;
                              v615 = v609 + v613++;
                              v609 = v615 & v608;
                              v610 = (_DWORD *)v607 + v609;
                              v611 = *v610;
                              if (v567 == *v610)
                                goto LABEL_1007;
                            }
                            if (v612)
                              v616 = v612;
                            else
                              v616 = v610;
LABEL_1004:
                            v617 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)v1003, v1003, v616);
                            *v617 = v1003[0];
                            v618 = v1003[0];
                            v619 = v1057;
                            if (v1057 >= (unint64_t)HIDWORD(v1057))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                              v619 = v1057;
                            }
                            *((_DWORD *)v1056 + v619) = v618;
                            LODWORD(v1057) = v1057 + 1;
                          }
LABEL_1007:
                          v999 = 1;
                          if (!v566)
                            goto LABEL_983;
LABEL_963:
                          if (v567 != v566
                            && (v566 >> 30
                             || v567 - 1 > 0x3FFFFFFE
                             || !llvm::MCRegisterInfo::regsOverlap(v1002, v567, v566)))
                          {
                            goto LABEL_983;
                          }
                          LODWORD(v1003[0]) = v567;
                          if ((v1053 & 1) != 0)
                          {
                            v592 = 4;
                            v593 = &v1054;
                            goto LABEL_966;
                          }
                          v592 = v1055;
                          if ((_DWORD)v1055)
                          {
                            v593 = (uint64_t *)v1054;
LABEL_966:
                            v594 = v592 - 1;
                            v595 = v594 & (37 * v567);
                            v596 = (_DWORD *)v593 + v595;
                            v597 = *v596;
                            if (v567 != *v596)
                            {
                              v598 = 0;
                              v599 = 1;
                              while (v597 != -1)
                              {
                                if (v598)
                                  v600 = 0;
                                else
                                  v600 = v597 == -2;
                                if (v600)
                                  v598 = v596;
                                v601 = v595 + v599++;
                                v595 = v601 & v594;
                                v596 = (_DWORD *)v593 + v595;
                                v597 = *v596;
                                if (v567 == *v596)
                                  goto LABEL_982;
                              }
                              if (v598)
                                v602 = v598;
                              else
                                v602 = v596;
LABEL_979:
                              v603 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)v1003, v1003, v602);
                              *v603 = v1003[0];
                              v604 = v1003[0];
                              v605 = v1057;
                              if (v1057 >= (unint64_t)HIDWORD(v1057))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                                v605 = v1057;
                              }
                              *((_DWORD *)v1056 + v605) = v604;
                              LODWORD(v1057) = v1057 + 1;
                            }
LABEL_982:
                            v999 = 1;
                            goto LABEL_983;
                          }
                          v602 = 0;
                          goto LABEL_979;
                        }
LABEL_962:
                        if (v566)
                          goto LABEL_963;
LABEL_983:
                        if (++v564 == (unsigned int *)v565)
                        {
                          v564 = v1062;
                          v620 = v999;
                          goto LABEL_1017;
                        }
                      }
                    }
                    v620 = 0;
LABEL_1017:
                    v323 = (unint64_t)v983;
                    if (v564 != (unsigned int *)v1064)
                      free(v564);
                    v142 = a1;
LABEL_1020:
                    if ((v1059 & 1) != 0)
                    {
                      if ((v620 & 1) == 0)
                        goto LABEL_1024;
                    }
                    else
                    {
                      MEMORY[0x1CAA32FB4](v1060, 4);
                      if ((v620 & 1) == 0)
                      {
LABEL_1024:
                        if (v1065 != (char *)v1067)
                          free(v1065);
LABEL_1026:
                        v1059 = 1;
                        v1060 = -1;
                        v1061 = -1;
                        v1062 = (unsigned int *)v1064;
                        v1063 = 0x400000000;
                        v621 = *((unsigned __int8 *)v977 + 4);
                        v622 = v977[1];
                        v623 = v621 + 1;
                        if ((int)v621 + 1 >= v622)
                          goto LABEL_1070;
                        v624 = v621 + 1;
                        while (2)
                        {
                          if (sub_1C4AD4FB8(v323, v621, (_QWORD *)(*(_QWORD *)(v142 + 248) + 8)) != 1)
                            goto LABEL_1065;
                          v625 = (_DWORD *)(*(_QWORD *)(v323 + 32) + 32 * v621);
                          v626 = v625[1];
                          if ((v1053 & 1) != 0)
                          {
                            v627 = 4;
                            v628 = &v1054;
                            goto LABEL_1031;
                          }
                          v627 = v1055;
                          if ((_DWORD)v1055)
                          {
                            v628 = (uint64_t *)v1054;
LABEL_1031:
                            v629 = v627 - 1;
                            v630 = v629 & (37 * v626);
                            v631 = *((_DWORD *)v628 + v630);
                            if (v626 != v631)
                            {
                              v632 = 1;
                              while (v631 != -1)
                              {
                                v633 = v630 + v632++;
                                v630 = v633 & v629;
                                v631 = *((_DWORD *)v628 + v630);
                                if (v626 == v631)
                                  goto LABEL_1065;
                              }
                              break;
                            }
LABEL_1065:
                            ++v621;
                            if (++v624 != v622)
                              continue;
                            v621 = *((unsigned __int8 *)v977 + 4);
                            LODWORD(v622) = v977[1];
                            v623 = v621 + 1;
LABEL_1070:
                            if (v623 >= v622)
                            {
                              v388 = 0;
LABEL_1116:
                              if (v1062 != (unsigned int *)v1064)
                                free(v1062);
                              if ((v1059 & 1) == 0)
                                MEMORY[0x1CAA32FB4](v1060, 4);
                              if (v1056 != v1058)
                                free(v1056);
                              if ((v1053 & 1) == 0)
                                MEMORY[0x1CAA32FB4](v1054, 4);
                              goto LABEL_1124;
                            }
                            v388 = 0;
                            v655 = v621 + 1;
                            while (2)
                            {
                              if (sub_1C4AD4FB8(v323, v621, (_QWORD *)(*(_QWORD *)(v142 + 248) + 8)) != 1)
                                goto LABEL_1108;
                              v656 = *(_QWORD *)(v323 + 32);
                              v657 = *(_DWORD *)(v656 + 32 * v621 + 4);
                              if ((v1053 & 1) != 0)
                              {
                                v658 = 4;
                                v659 = &v1054;
                                goto LABEL_1075;
                              }
                              v658 = v1055;
                              if ((_DWORD)v1055)
                              {
                                v659 = (uint64_t *)v1054;
LABEL_1075:
                                v660 = v658 - 1;
                                v661 = v660 & (37 * v657);
                                v662 = *((_DWORD *)v659 + v661);
                                if (v657 != v662)
                                {
                                  v663 = 1;
                                  while (v662 != -1)
                                  {
                                    v664 = v661 + v663++;
                                    v661 = v664 & v660;
                                    v662 = *((_DWORD *)v659 + v661);
                                    if (v657 == v662)
                                      goto LABEL_1107;
                                  }
                                  break;
                                }
LABEL_1107:
                                v142 = a1;
                                v323 = (unint64_t)v983;
LABEL_1108:
                                ++v655;
                                ++v621;
                                if (v655 == v622)
                                  goto LABEL_1116;
                                continue;
                              }
                              break;
                            }
                            if (llvm::MachineInstr::getNumExplicitOperands((uint64_t)v983) <= v621)
                            {
                              v666 = -1;
                            }
                            else
                            {
                              v665 = (unsigned __int16 *)*((_QWORD *)v983 + 2);
                              if ((word_1C6AA47DC[dword_1C6A9B6CC[*v665] + (unsigned __int16)v621] & 0xFFFB) == 0x3A)
                              {
                                v666 = v621 + 2;
                              }
                              else if ((*(_DWORD *)(v656 + 32 * v621) & 0x10000FF) == 0x1000000)
                              {
                                v667 = *((unsigned __int8 *)v665 + 4);
                                if ((v665[4] & 2) != 0)
                                {
                                  v677 = *((_DWORD *)v983 + 10);
                                  if (v677 == v667)
                                  {
                                    v668 = v667;
                                  }
                                  else
                                  {
                                    v678 = v677 - 1;
                                    v668 = v667;
                                    do
                                    {
                                      v679 = *(_DWORD *)(v656 + 32 * v667);
                                      if ((v679 & 0x10000FF) != 0x1000000)
                                        break;
                                      v668 += (v679 & 0x2000000) == 0;
                                      if (v678 == v667)
                                        break;
                                      ++v667;
                                    }
                                    while ((v679 & 0x2000000) == 0);
                                  }
                                }
                                else
                                {
                                  v668 = *((unsigned __int8 *)v665 + 4);
                                }
                                v666 = v668 + v621;
                              }
                              else if (!*(_DWORD *)(v656 + 32 * v621)
                                     || *(_DWORD *)(v656 + 32 * v621) == 7)
                              {
                                v666 = v621 + 1;
                              }
                              else
                              {
                                v666 = -1;
                              }
                            }
                            if ((v1059 & 1) != 0)
                            {
                              v669 = 4;
                              v670 = &v1060;
                              goto LABEL_1092;
                            }
                            v669 = v1061;
                            if ((_DWORD)v1061)
                            {
                              v670 = (uint64_t *)v1060;
LABEL_1092:
                              v671 = v669 - 1;
                              v672 = v671 & (37 * v657);
                              v673 = *((_DWORD *)v670 + v672);
                              if (v657 != v673)
                              {
                                v674 = 1;
                                while (v673 != -1)
                                {
                                  v675 = v672 + v674++;
                                  v672 = v675 & v671;
                                  v673 = *((_DWORD *)v670 + v672);
                                  if (v657 == v673)
                                    goto LABEL_1096;
                                }
                                goto LABEL_1105;
                              }
LABEL_1096:
                              *(_QWORD *)(v656 + 32 * v666 + 16) |= 0x10uLL;
                              *(_DWORD *)(v656 + 32 * v621) &= ~0x8000000u;
                              v676 = 1;
                            }
                            else
                            {
LABEL_1105:
                              v676 = 0;
                            }
                            v388 |= v676;
                            goto LABEL_1107;
                          }
                          break;
                        }
                        if (__src)
                          v634 = (char *)__src + 8;
                        else
                          v634 = 0;
                        v635 = *(unsigned int *)(*v634 + 24 * (unsigned __int16)v625[1] + 16);
                        v636 = (_WORD *)(v634[6] + ((v635 >> 3) & 0x1FFFFFFE));
                        v638 = *v636;
                        v637 = v636 + 1;
                        v639 = v638 + (v635 & 0xF) * v626;
                        while (((*(_QWORD *)(v1022 + 8 * (v639 >> 6)) >> v639) & 1) == 0)
                        {
                          v640 = *v637++;
                          v639 += v640;
                          if (!v640)
                            goto LABEL_1047;
                        }
                        if (*(_BYTE *)(v142 + 524) || ((*v625 >> 26) & ~HIBYTE(*v625) & 1) == 0)
                          goto LABEL_1065;
LABEL_1047:
                        LODWORD(v1065) = v625[1];
                        if ((v1059 & 1) != 0)
                        {
                          v641 = 4;
                          v642 = &v1060;
                          goto LABEL_1049;
                        }
                        v641 = v1061;
                        if ((_DWORD)v1061)
                        {
                          v642 = (uint64_t *)v1060;
LABEL_1049:
                          v643 = v641 - 1;
                          v644 = v643 & (37 * v626);
                          v645 = (_DWORD *)v642 + v644;
                          v646 = *v645;
                          if (v626 == *v645)
                            goto LABEL_1065;
                          v647 = 0;
                          v648 = 1;
                          while (v646 != -1)
                          {
                            if (v647)
                              v649 = 0;
                            else
                              v649 = v646 == -2;
                            if (v649)
                              v647 = v645;
                            v650 = v644 + v648++;
                            v644 = v650 & v643;
                            v645 = (_DWORD *)v642 + v644;
                            v646 = *v645;
                            if (v626 == *v645)
                              goto LABEL_1065;
                          }
                          if (v647)
                            v651 = v647;
                          else
                            v651 = v645;
                        }
                        else
                        {
                          v651 = 0;
                        }
                        v652 = sub_1C4A9F624((uint64_t)&v1059, (uint64_t)&v1065, &v1065, v651);
                        *v652 = (_DWORD)v1065;
                        v653 = v1065;
                        v654 = v1063;
                        if (v1063 >= (unint64_t)HIDWORD(v1063))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1062, (uint64_t)v1064, v1063 + 1, 4);
                          v654 = v1063;
                        }
                        v1062[v654] = v653;
                        LODWORD(v1063) = v1063 + 1;
                        goto LABEL_1065;
                      }
                    }
                  }
                }
                v439 = sub_1C4C2FD5C(v436);
                v440 = *((_QWORD *)v983 + 4);
                v441 = *(_DWORD *)(v440 + 32 * v439 + 4);
                v442 = *(_DWORD *)(v440 + 32 * sub_1C4C2FD5C(v436) + 4);
                LODWORD(v1059) = v442;
                v443 = *(_DWORD *)(v440 + 32 * sub_1C4C2FD5C(v436) + 4);
                LODWORD(v1065) = v443;
                if (v441 != v442)
                {
                  v458 = v441 - 1 > 0x3FFFFFFE || v442 - 1 > 0x3FFFFFFE;
                  if (v458 || !(v492 = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(v434 + 8), v441, v442)))
                  {
LABEL_760:
                    if (v441 != v443
                      && (v441 - 1 > 0x3FFFFFFE
                       || v443 - 1 > 0x3FFFFFFE
                       || !llvm::MCRegisterInfo::regsOverlap((_QWORD *)(v434 + 8), v441, v443)))
                    {
                      goto LABEL_779;
                    }
                    if ((v1053 & 1) != 0)
                    {
                      v459 = 4;
                      v460 = &v1054;
                    }
                    else
                    {
                      v459 = v1055;
                      if (!(_DWORD)v1055)
                      {
                        v469 = 0;
LABEL_776:
                        v470 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1065, &v1065, v469);
                        *v470 = (_DWORD)v1065;
                        v471 = (int)v1065;
                        v472 = v1057;
                        if (v1057 >= (unint64_t)HIDWORD(v1057))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                          v472 = v1057;
                        }
                        *((_DWORD *)v1056 + v472) = v471;
                        LODWORD(v1057) = v1057 + 1;
                        v443 = v1065;
LABEL_779:
                        v473 = v1059;
                        if ((_DWORD)v1059 == v443
                          || v443 - 1 > 0x3FFFFFFE
                          || (v1059 - 1) > 0x3FFFFFFE
                          || !llvm::MCRegisterInfo::regsOverlap((_QWORD *)(v434 + 8), v1059, v443))
                        {
                          goto LABEL_780;
                        }
                        v481 = v1053;
                        if ((v1053 & 1) != 0)
                        {
                          v482 = 4;
                          v483 = &v1054;
                        }
                        else
                        {
                          v482 = v1055;
                          if (!(_DWORD)v1055)
                          {
                            v696 = 0;
                            goto LABEL_1164;
                          }
                          v483 = (uint64_t *)v1054;
                        }
                        v484 = v482 - 1;
                        v485 = v484 & (37 * v473);
                        v486 = (_DWORD *)v483 + v485;
                        v487 = *v486;
                        if (v473 == *v486)
                        {
LABEL_1167:
                          if ((v481 & 1) != 0)
                          {
                            v700 = 4;
                            v701 = &v1054;
                          }
                          else
                          {
                            v700 = v1055;
                            if (!(_DWORD)v1055)
                            {
                              v710 = 0;
LABEL_1182:
                              v711 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1065, &v1065, v710);
                              *v711 = (_DWORD)v1065;
                              v712 = (int)v1065;
                              v713 = v1057;
                              if (v1057 >= (unint64_t)HIDWORD(v1057))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                                v713 = v1057;
                              }
                              *((_DWORD *)v1056 + v713) = v712;
                              LODWORD(v1057) = v1057 + 1;
                              goto LABEL_780;
                            }
                            v701 = (uint64_t *)v1054;
                          }
                          v702 = v700 - 1;
                          v703 = (37 * (_DWORD)v1065) & v702;
                          v704 = (_DWORD *)v701 + v703;
                          v705 = *v704;
                          if ((_DWORD)v1065 != *v704)
                          {
                            v706 = 0;
                            v707 = 1;
                            while (v705 != -1)
                            {
                              if (v706)
                                v708 = 0;
                              else
                                v708 = v705 == -2;
                              if (v708)
                                v706 = v704;
                              v709 = v703 + v707++;
                              v703 = v709 & v702;
                              v704 = (_DWORD *)v701 + v703;
                              v705 = *v704;
                              if ((_DWORD)v1065 == *v704)
                                goto LABEL_780;
                            }
                            if (v706)
                              v710 = v706;
                            else
                              v710 = v704;
                            goto LABEL_1182;
                          }
LABEL_780:
                          v435 = v983;
                          goto LABEL_781;
                        }
                        v488 = 0;
                        v489 = 1;
                        while (v487 != -1)
                        {
                          if (v488)
                            v490 = 0;
                          else
                            v490 = v487 == -2;
                          if (v490)
                            v488 = v486;
                          v491 = v485 + v489++;
                          v485 = v491 & v484;
                          v486 = (_DWORD *)v483 + v485;
                          v487 = *v486;
                          if (v473 == *v486)
                            goto LABEL_1167;
                        }
                        if (v488)
                          v696 = v488;
                        else
                          v696 = v486;
LABEL_1164:
                        v697 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1059, &v1059, v696);
                        *v697 = v1059;
                        v698 = v1059;
                        v699 = v1057;
                        if (v1057 >= (unint64_t)HIDWORD(v1057))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                          v699 = v1057;
                        }
                        *((_DWORD *)v1056 + v699) = v698;
                        v481 = v1053;
                        LODWORD(v1057) = v1057 + 1;
                        goto LABEL_1167;
                      }
                      v460 = (uint64_t *)v1054;
                    }
                    v461 = v459 - 1;
                    v462 = v461 & (37 * v443);
                    v463 = (_DWORD *)v460 + v462;
                    v464 = *v463;
                    if (v443 == *v463)
                      goto LABEL_779;
                    v465 = 0;
                    v466 = 1;
                    while (v464 != -1)
                    {
                      if (v465)
                        v467 = 0;
                      else
                        v467 = v464 == -2;
                      if (v467)
                        v465 = v463;
                      v468 = v462 + v466++;
                      v462 = v468 & v461;
                      v463 = (_DWORD *)v460 + v462;
                      v464 = *v463;
                      if (v443 == *v463)
                        goto LABEL_779;
                    }
                    if (v465)
                      v469 = v465;
                    else
                      v469 = v463;
                    goto LABEL_776;
                  }
                }
                if ((v1053 & 1) != 0)
                {
                  v444 = 4;
                  v445 = &v1054;
                }
                else
                {
                  v444 = v1055;
                  if (!(_DWORD)v1055)
                  {
                    v454 = 0;
LABEL_752:
                    v455 = sub_1C4A9F624((uint64_t)&v1053, (uint64_t)&v1059, &v1059, v454);
                    *v455 = v1059;
                    v456 = v1059;
                    v457 = v1057;
                    if (v1057 >= (unint64_t)HIDWORD(v1057))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1056, (uint64_t)v1058, v1057 + 1, 4);
                      v457 = v1057;
                    }
                    *((_DWORD *)v1056 + v457) = v456;
                    LODWORD(v1057) = v1057 + 1;
                    v443 = v1065;
                    goto LABEL_760;
                  }
                  v445 = (uint64_t *)v1054;
                }
                v446 = v444 - 1;
                v447 = v446 & (37 * v442);
                v448 = (_DWORD *)v445 + v447;
                v449 = *v448;
                if (v442 == *v448)
                  goto LABEL_760;
                v450 = 0;
                v451 = 1;
                while (v449 != -1)
                {
                  if (v450)
                    v452 = 0;
                  else
                    v452 = v449 == -2;
                  if (v452)
                    v450 = v448;
                  v453 = v447 + v451++;
                  v447 = v453 & v446;
                  v448 = (_DWORD *)v445 + v447;
                  v449 = *v448;
                  if (v442 == *v448)
                    goto LABEL_760;
                }
                if (v450)
                  v454 = v450;
                else
                  v454 = v448;
                goto LABEL_752;
              }
              v421 = (uint64_t *)v1054;
            }
            v422 = v420 - 1;
            v423 = v422 & (37 * v419);
            v424 = (_DWORD *)v421 + v423;
            v425 = *v424;
            if (v419 == *v424)
              goto LABEL_731;
            v426 = 0;
            v427 = 1;
            while (v425 != -1)
            {
              if (v426)
                v428 = 0;
              else
                v428 = v425 == -2;
              if (v428)
                v426 = v424;
              v429 = v423 + v427++;
              v423 = v429 & v422;
              v424 = (_DWORD *)v421 + v423;
              v425 = *v424;
              if (v419 == *v424)
                goto LABEL_731;
            }
            if (v426)
              v430 = v426;
            else
              v430 = v424;
            goto LABEL_728;
          }
          v401 = (uint64_t *)v1054;
        }
        v402 = v400 - 1;
        v403 = v402 & (37 * v399);
        v404 = (_DWORD *)v401 + v403;
        v405 = *v404;
        if (v399 == *v404)
          goto LABEL_702;
        v406 = 0;
        v407 = 1;
        while (v405 != -1)
        {
          if (v406)
            v408 = 0;
          else
            v408 = v405 == -2;
          if (v408)
            v406 = v404;
          v409 = v403 + v407++;
          v403 = v409 & v402;
          v404 = (_DWORD *)v401 + v403;
          v405 = *v404;
          if (v399 == *v404)
            goto LABEL_702;
        }
        if (v406)
          v410 = v406;
        else
          v410 = v404;
        goto LABEL_699;
      }
    }
    else if ((v389 & 0x80) == 0)
    {
      goto LABEL_668;
    }
LABEL_662:
    v388 = 0;
LABEL_1124:
    v680 = v1052;
    if (v1026 < v1052)
    {
      v681 = DWORD2(v1022);
      if ((v1026 & 0x3F) != 0)
        *(_QWORD *)(v1022 + 8 * DWORD2(v1022) - 8) &= ~(-1 << (v1026 & 0x3F));
      v682 = v681;
      v1026 = v680;
      v683 = v680 + 63;
      if ((_DWORD)v681 != (v680 + 63) >> 6)
      {
        v684 = v683 >> 6;
        if (v681 > v684)
        {
          DWORD2(v1022) = v683 >> 6;
          v682 = v683 >> 6;
        }
        else
        {
          v685 = v681;
          if (v684 > HIDWORD(v1022))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1022, (uint64_t)&v1023, v684, 8);
            v685 = DWORD2(v1022);
            v682 = DWORD2(v1022);
          }
          if (v684 != v681)
            bzero((void *)(v1022 + 8 * v685), 8 * (v684 - v681));
          v682 += v684 - v681;
          DWORD2(v1022) = v682;
          LOBYTE(v680) = v1026;
        }
        v323 = (unint64_t)v983;
      }
      v686 = v680 & 0x3F;
      if (v686)
        *(_QWORD *)(v1022 + 8 * v682 - 8) &= ~(-1 << v686);
    }
    v687 = v1049;
    if ((_DWORD)v1049)
    {
      v688 = (uint64_t *)v1048;
      v689 = (_QWORD *)v1022;
      do
      {
        v690 = *v688++;
        *v689++ |= v690;
        --v687;
      }
      while (v687);
    }
    v691 = *(unsigned __int16 **)(v323 + 16);
    v692 = *v691;
    if (v692 >= 0x100)
    {
      v693 = *((_QWORD *)v691 + 1) & 8;
      if (v692 == 316 || v693 == 0)
      {
        (*(void (**)(uint64_t *, unint64_t))(*v975 + 48))(v975, v323);
        (*(void (**)(uint64_t *, unint64_t))(*v974 + 48))(v974, v323);
      }
    }
    v695 = *(_DWORD *)(v142 + 520);
    if (v695)
      *(_DWORD *)(v142 + 520) = v695 - 1;
    if (v1043 != v1045)
      free(v1043);
    if (v1048 != v1050)
      free(v1048);
    v324 = v978 | v388;
    v320 = (_QWORD *)((char *)v976 + 48);
    goto LABEL_1154;
  }
  v972 = 0;
LABEL_1221:
  v714 = *v970;
  v715 = (_QWORD *)(*v970 + 320);
  if ((_QWORD *)*v715 != v715)
  {
    v1044 = 0;
    v1043 = 0;
    __b = &v1043;
    v716 = *(_QWORD *)(v714 + 328);
    if ((_QWORD *)v716 != v715)
    {
      do
      {
        LODWORD(v1047) = *(_DWORD *)(v716 + 24);
        __src = (void *)v716;
        sub_1C49DA68C((uint64_t **)&__b, (unsigned int *)&v1047, &v1047, (uint64_t **)&__src);
        v716 = *(_QWORD *)(v716 + 8);
      }
      while ((_QWORD *)v716 != v715);
      v714 = *v970;
    }
    v717 = *(_QWORD *)(v714 + 48);
    if (!v717)
    {
      v717 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v714 + 8) + 216))(*(_QWORD *)(v714 + 8), v714 + 128, v714);
      *(_QWORD *)(v714 + 48) = v717;
      v714 = *v970;
    }
    v718 = *(_QWORD *)(v717 + 552);
    if ((v718 & 0xFF00000000) != 0)
      v719 = v718 + 1;
    else
      v719 = 4080;
    v720 = ((*(_QWORD *)(v714 + 112) - *(_QWORD *)(v714 + 104)) >> 3);
    __src = (char *)&v1022 + 8;
    *(_QWORD *)&v1022 = 0x600000000;
    sub_1C4765AA4((char *)&__src, (v719 + 63) >> 6, 0);
    DWORD2(v1025) = v719;
    sub_1C49DA774((unsigned int **)&v1059, v720, (unsigned int *)&__src);
    if (__src != (char *)&v1022 + 8)
      free(__src);
    v721 = v1044;
    if (v1044)
    {
      while (1)
      {
        v722 = (void **)v1043;
        v723 = &v1043;
        if (v1043)
          break;
        do
        {
          v727 = v723;
          v723 = (void **)v723[2];
        }
        while (*v723 == v727);
        v728 = (void **)v723[1];
        v724 = (uint64_t)v723[5];
        if (!v728)
          goto LABEL_1236;
        do
        {
          v725 = v728;
          v728 = (void **)*v728;
        }
        while (v728);
LABEL_1242:
        if (__b == v723)
          __b = v725;
        v1044 = v721 - 1;
        sub_1C485B6E0((uint64_t *)v1043, (uint64_t *)v723);
        operator delete(v723);
        v1047 = &v1049;
        v1048 = (void *)0x600000000;
        sub_1C4765AA4((char *)&v1047, (v719 + 63) >> 6, 0);
        v729 = v719;
        v1051 = v719;
        v730 = *(_QWORD *)(v724 + 88);
        v731 = *(_QWORD *)(v724 + 96);
        while (v730 != v731)
        {
          v732 = (uint64_t *)(v1059 + 72 * *(int *)(*(_QWORD *)v730 + 24));
          v733 = *((_DWORD *)v732 + 16);
          if (v729 < v733)
          {
            v738 = v729 & 0x3F;
            v739 = v1048;
            if (v738)
              *((_QWORD *)v1047 + v1048 - 1) &= ~(-1 << v738);
            v740 = v739;
            v1051 = v733;
            v741 = v733 + 63;
            if ((_DWORD)v739 != (v733 + 63) >> 6)
            {
              v742 = v741 >> 6;
              if (v739 > v742)
              {
                LODWORD(v1048) = v741 >> 6;
                v740 = v741 >> 6;
              }
              else
              {
                v743 = v739;
                if (v742 > HIDWORD(v1048))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1047, (uint64_t)&v1049, v742, 8);
                  v743 = v1048;
                  v740 = v1048;
                }
                if (v742 != v739)
                  bzero((char *)v1047 + 8 * v743, 8 * (v742 - v739));
                v740 += v742 - v739;
                LODWORD(v1048) = v740;
                v733 = v1051;
              }
            }
            if ((v733 & 0x3F) != 0)
              *((_QWORD *)v1047 + v740 - 1) &= ~(-1 << (v733 & 0x3F));
            v729 = v733;
          }
          v734 = *((unsigned int *)v732 + 2);
          if ((_DWORD)v734)
          {
            v735 = (uint64_t *)*v732;
            v736 = v1047;
            do
            {
              v737 = *v735++;
              *v736++ |= v737;
              --v734;
            }
            while (v734);
          }
          v730 += 8;
        }
        __src = (char *)&v1022 + 8;
        *(_QWORD *)&v1022 = 0x400000000;
        v744 = a1;
        sub_1C4A9F3F8(*(_QWORD *)(a1 + 296), *(_DWORD *)(a1 + 312), v724, (uint64_t)&__src);
        v745 = (char *)__src;
        if ((_DWORD)v1022)
        {
          v746 = (char *)__src + 8 * v1022;
          v747 = v1051;
          do
          {
            v748 = (uint64_t *)(v1059 + 72 * *(int *)(*(_QWORD *)v745 + 24));
            v749 = *((_DWORD *)v748 + 16);
            if (v747 < v749)
            {
              v754 = v747 & 0x3F;
              v755 = v1048;
              if (v754)
                *((_QWORD *)v1047 + v1048 - 1) &= ~(-1 << v754);
              v756 = v755;
              v1051 = v749;
              v757 = v749 + 63;
              if ((_DWORD)v755 != (v749 + 63) >> 6)
              {
                v758 = v757 >> 6;
                if (v755 > v758)
                {
                  LODWORD(v1048) = v757 >> 6;
                  v756 = v757 >> 6;
                }
                else
                {
                  v759 = v755;
                  if (v758 > HIDWORD(v1048))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1047, (uint64_t)&v1049, v758, 8);
                    v759 = v1048;
                    v756 = v1048;
                  }
                  if (v758 != v755)
                    bzero((char *)v1047 + 8 * v759, 8 * (v758 - v755));
                  v756 += v758 - v755;
                  LODWORD(v1048) = v756;
                  v749 = v1051;
                }
              }
              if ((v749 & 0x3F) != 0)
                *((_QWORD *)v1047 + v756 - 1) &= ~(-1 << (v749 & 0x3F));
              v747 = v749;
            }
            v750 = *((unsigned int *)v748 + 2);
            if ((_DWORD)v750)
            {
              v751 = (uint64_t *)*v748;
              v752 = v1047;
              do
              {
                v753 = *v751++;
                *v752++ |= v753;
                --v750;
              }
              while (v750);
            }
            v745 += 8;
          }
          while (v745 != v746);
          v745 = (char *)__src;
          v744 = a1;
        }
        if (v745 != (char *)&v1022 + 8)
          free(v745);
        v760 = *(_DWORD *)(v724 + 24);
        v761 = v1059;
        v762 = (uint64_t *)(v1059 + 72 * v760);
        __src = (char *)&v1022 + 8;
        *(_QWORD *)&v1022 = 0x600000000;
        v763 = *((unsigned int *)v762 + 2);
        if (&__src != (void **)v762 && v763 != 0)
        {
          v765 = (char *)&v1022 + 8;
          v766 = *((unsigned int *)v762 + 2);
          if (v763 < 7)
            goto LABEL_1294;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1022 + 8, *((unsigned int *)v762 + 2), 8);
          v766 = *((unsigned int *)v762 + 2);
          if ((_DWORD)v766)
          {
            v765 = (char *)__src;
LABEL_1294:
            memcpy(v765, (const void *)*v762, 8 * v766);
          }
          LODWORD(v1022) = v763;
        }
        v767 = v761 + 72 * v760;
        v769 = *(_DWORD *)(v767 + 64);
        v768 = (unsigned int *)(v767 + 64);
        DWORD2(v1025) = v769;
        v770 = sub_1C4A9F510(*(_QWORD *)(v744 + 256), *(_DWORD *)(v744 + 272), v724);
        if (v762 != (uint64_t *)&v1047)
        {
          v771 = v1048;
          v772 = *((unsigned int *)v762 + 2);
          if (v772 < v1048)
          {
            if (*((_DWORD *)v762 + 3) < v1048)
            {
              *((_DWORD *)v762 + 2) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v762, (uint64_t)(v762 + 2), v771, 8);
            }
            else if ((_DWORD)v772)
            {
              memmove((void *)*v762, v1047, 8 * v772);
LABEL_1305:
              if (v772 != v1048)
                memcpy((void *)(*v762 + 8 * v772), (char *)v1047 + 8 * v772, 8 * v1048 - 8 * v772);
LABEL_1307:
              *((_DWORD *)v762 + 2) = v771;
              goto LABEL_1308;
            }
            v772 = 0;
            goto LABEL_1305;
          }
          if ((_DWORD)v1048)
            memmove((void *)*v762, v1047, 8 * v1048);
          goto LABEL_1307;
        }
LABEL_1308:
        v773 = v770 + 1;
        *v768 = v1051;
        if (!*((_BYTE *)v770 + 248))
          (*(void (**)(uint64_t *))(*v773 + 40))(v770 + 1);
        LODWORD(v774) = *((_DWORD *)v762 + 2);
        v775 = *((_DWORD *)v770 + 46);
        if (v775 >= v774)
          v774 = v774;
        else
          v774 = v775;
        if ((_DWORD)v774)
        {
          v776 = (uint64_t *)v770[22];
          v777 = (_QWORD *)*v762;
          do
          {
            v778 = *v776++;
            *v777++ &= ~v778;
            --v774;
          }
          while (v774);
        }
        if (!*((_BYTE *)v770 + 328))
          (*(void (**)(uint64_t *))(*v773 + 40))(v770 + 1);
        v779 = *v768;
        v780 = *((_DWORD *)v770 + 80);
        v142 = a1;
        if (*v768 < v780)
        {
          v808 = *v768 & 0x3F;
          v809 = *((unsigned int *)v762 + 2);
          if (v808)
            *(_QWORD *)(*v762 + 8 * v809 - 8) &= ~(-1 << v808);
          v810 = v809;
          *v768 = v780;
          v811 = v780 + 63;
          if ((_DWORD)v809 != (v780 + 63) >> 6)
          {
            v812 = v811 >> 6;
            if (v809 > v812)
            {
              *((_DWORD *)v762 + 2) = v812;
              v810 = v811 >> 6;
            }
            else
            {
              v813 = v809;
              if (v812 > *((_DWORD *)v762 + 3))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v762, (uint64_t)(v762 + 2), v812, 8);
                v813 = *((unsigned int *)v762 + 2);
                v810 = *((_DWORD *)v762 + 2);
              }
              if (v812 != v809)
                bzero((void *)(*v762 + 8 * v813), 8 * (v812 - v809));
              v810 += v812 - v809;
              *((_DWORD *)v762 + 2) = v810;
              v780 = *v768;
            }
            v142 = a1;
          }
          if ((v780 & 0x3F) != 0)
            *(_QWORD *)(*v762 + 8 * v810 - 8) &= ~(-1 << (v780 & 0x3F));
          v779 = v780;
        }
        v781 = *((unsigned int *)v770 + 66);
        if ((_DWORD)v781)
        {
          v782 = (uint64_t *)v770[32];
          v783 = (_QWORD *)*v762;
          do
          {
            v784 = *v782++;
            *v783++ |= v784;
            --v781;
          }
          while (v781);
        }
        v785 = (char *)__src;
        v786 = DWORD2(v1025) != v779 || memcmp(__src, (const void *)*v762, 8 * v1022) != 0;
        if (v785 != (char *)&v1022 + 8)
          free(v785);
        if (v786)
        {
          v787 = *(_DWORD ***)(v724 + 64);
          v788 = *(_DWORD ***)(v724 + 72);
          while (v787 != v788)
          {
            __src = 0;
            v789 = *v787++;
            __src = v789;
            LODWORD(v1053) = v789[6];
            sub_1C49DA87C((uint64_t **)&__b, (unsigned int *)&v1053, &__src);
          }
          __src = (char *)&v1022 + 8;
          *(_QWORD *)&v1022 = 0x400000000;
          v790 = *(_QWORD *)(v142 + 320);
          v791 = *(_DWORD *)(v142 + 336);
          v792 = sub_1C4A9F4AC(v790, v791, v724);
          if ((uint64_t *)(v790 + 40 * v791) != v792)
          {
            v793 = *((unsigned int *)v792 + 4);
            if ((_DWORD)v793)
            {
              v794 = 0;
              v795 = (uint64_t *)v792[1];
              v796 = 8 * v793;
              do
              {
                v797 = *v795;
                if (v794 >= DWORD1(v1022))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1022 + 8, v794 + 1, 8);
                  v794 = v1022;
                }
                *((_QWORD *)__src + v794) = v797;
                v794 = v1022 + 1;
                LODWORD(v1022) = v1022 + 1;
                ++v795;
                v796 -= 8;
              }
              while (v796);
              v798 = (char *)__src;
              if (v794)
              {
                v799 = (char *)__src + 8 * v794;
                do
                {
                  v800 = *(_QWORD *)v798;
                  v801 = *(_DWORD *)(*(_QWORD *)v798 + 24);
                  v802 = (uint64_t *)operator new(0x30uLL);
                  v803 = v802;
                  *((_DWORD *)v802 + 8) = v801;
                  v802[5] = v800;
                  v804 = (void **)v1043;
                  v805 = &v1043;
                  v806 = &v1043;
                  if (v1043)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v806 = v804;
                        v807 = *((_DWORD *)v804 + 8);
                        if (v807 <= v801)
                          break;
                        v804 = (void **)*v804;
                        v805 = v806;
                        if (!*v806)
                          goto LABEL_1346;
                      }
                      if (v807 >= v801)
                        break;
                      v804 = (void **)v804[1];
                      if (!v804)
                      {
                        v805 = v806 + 1;
                        goto LABEL_1346;
                      }
                    }
                    operator delete(v802);
                  }
                  else
                  {
LABEL_1346:
                    *v802 = 0;
                    v802[1] = 0;
                    v802[2] = (uint64_t)v806;
                    *v805 = v802;
                    if (*(_QWORD *)__b)
                    {
                      __b = *(void **)__b;
                      v803 = (uint64_t *)*v805;
                    }
                    sub_1C4768E74((uint64_t *)v1043, v803);
                    ++v1044;
                  }
                  v798 += 8;
                }
                while (v798 != v799);
                v798 = (char *)__src;
              }
              if (v798 != (char *)&v1022 + 8)
                free(v798);
            }
          }
        }
        if (v1047 != &v1049)
          free(v1047);
        v721 = v1044;
        if (!v1044)
          goto LABEL_1372;
      }
      do
      {
        v723 = v722;
        v722 = (void **)v722[1];
      }
      while (v722);
      v724 = (uint64_t)v723[5];
LABEL_1236:
      v725 = v723;
      do
      {
        v726 = v725;
        v725 = (void **)v725[2];
      }
      while (*v725 != v726);
      goto LABEL_1242;
    }
LABEL_1372:
    v814 = *v970 + 320;
    v815 = *(_QWORD *)(*v970 + 328);
    if (v815 != v814)
    {
      while (1)
      {
        v816 = sub_1C4A9F510(*(_QWORD *)(v142 + 256), *(_DWORD *)(v142 + 272), v815);
        if (*((_BYTE *)v816 + 88))
          goto LABEL_1612;
        v817 = v816;
        v818 = v1059;
        v819 = *(_DWORD *)(v815 + 24);
        v820 = (uint64_t *)(v1059 + 72 * v819);
        v821 = v816 + 4;
        v816[2] = (uint64_t)(v816 + 4);
        v822 = (void **)(v816 + 2);
        v816[3] = 0x600000000;
        v823 = *((unsigned int *)v820 + 2);
        if (v816 + 2 != v820 && v823 != 0)
          break;
LABEL_1384:
        *((_DWORD *)v817 + 20) = *(_DWORD *)(v818 + 72 * v819 + 64);
        *((_BYTE *)v817 + 88) = 1;
        v815 = *(_QWORD *)(v815 + 8);
        v142 = a1;
        if (v815 == v814)
          goto LABEL_1385;
      }
      if (v823 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v816 + 2), (uint64_t)v821, *((unsigned int *)v820 + 2), 8);
        v825 = *((unsigned int *)v820 + 2);
        if (!(_DWORD)v825)
        {
LABEL_1383:
          *((_DWORD *)v817 + 6) = v823;
          goto LABEL_1384;
        }
        v821 = *v822;
      }
      else
      {
        v825 = *((unsigned int *)v820 + 2);
      }
      memcpy(v821, (const void *)*v820, 8 * v825);
      goto LABEL_1383;
    }
LABEL_1385:
    __src = &v1059;
    sub_1C476B22C((void ***)&__src);
    sub_1C61247C0((uint64_t)&__b, v1043);
  }
  v826 = *(_QWORD **)v969;
  v827 = (_QWORD *)(*(_QWORD *)v969 + 320);
  if ((_QWORD *)*v827 != v827)
  {
    v1044 = 0;
    v1043 = 0;
    __b = &v1043;
    v828 = v826[41];
    if ((_QWORD *)v828 != v827)
    {
      do
      {
        LODWORD(v1047) = *(_DWORD *)(v828 + 24);
        __src = (void *)v828;
        sub_1C49DA68C((uint64_t **)&__b, (unsigned int *)&v1047, &v1047, (uint64_t **)&__src);
        v828 = *(_QWORD *)(v828 + 8);
      }
      while ((_QWORD *)v828 != v827);
      v826 = *(_QWORD **)v969;
    }
    v829 = *(_QWORD *)(v826[7] + 48) >> 1;
    v830 = ((v826[14] - v826[13]) >> 3);
    __src = (char *)&v1022 + 8;
    *(_QWORD *)&v1022 = 0x600000000;
    v995 = (v829 + 63) >> 6;
    sub_1C4765AA4((char *)&__src, v995, 0);
    v1000 = v829;
    DWORD2(v1025) = v829;
    sub_1C49DA774((unsigned int **)&v1059, v830, (unsigned int *)&__src);
    if (__src != (char *)&v1022 + 8)
      free(__src);
    v831 = v1044;
    if (v1044)
    {
      while (1)
      {
        v832 = (void **)v1043;
        v833 = &v1043;
        if (v1043)
          break;
        do
        {
          v837 = v833;
          v833 = (void **)v833[2];
        }
        while (*v833 == v837);
        v838 = (void **)v833[1];
        v834 = (uint64_t)v833[5];
        if (!v838)
          goto LABEL_1396;
        do
        {
          v835 = v838;
          v838 = (void **)*v838;
        }
        while (v838);
LABEL_1402:
        if (__b == v833)
          __b = v835;
        v1044 = v831 - 1;
        sub_1C485B6E0((uint64_t *)v1043, (uint64_t *)v833);
        operator delete(v833);
        v1047 = &v1049;
        v1048 = (void *)0x600000000;
        sub_1C4765AA4((char *)&v1047, v995, 0);
        v1051 = v1000;
        v839 = *(_QWORD *)(v834 + 88);
        v840 = *(_QWORD *)(v834 + 96);
        v841 = v1000;
        while (v839 != v840)
        {
          v842 = (uint64_t *)(v1059 + 72 * *(int *)(*(_QWORD *)v839 + 24));
          v843 = *((_DWORD *)v842 + 16);
          if (v841 < v843)
          {
            v848 = v841 & 0x3F;
            v849 = v1048;
            if (v848)
              *((_QWORD *)v1047 + v1048 - 1) &= ~(-1 << v848);
            v850 = v849;
            v1051 = v843;
            v851 = v843 + 63;
            if ((_DWORD)v849 != (v843 + 63) >> 6)
            {
              v852 = v851 >> 6;
              if (v849 > v852)
              {
                LODWORD(v1048) = v851 >> 6;
                v850 = v851 >> 6;
              }
              else
              {
                v853 = v849;
                if (v852 > HIDWORD(v1048))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1047, (uint64_t)&v1049, v852, 8);
                  v853 = v1048;
                  v850 = v1048;
                }
                if (v852 != v849)
                  bzero((char *)v1047 + 8 * v853, 8 * (v852 - v849));
                v850 += v852 - v849;
                LODWORD(v1048) = v850;
                v843 = v1051;
              }
            }
            if ((v843 & 0x3F) != 0)
              *((_QWORD *)v1047 + v850 - 1) &= ~(-1 << (v843 & 0x3F));
            v841 = v843;
          }
          v844 = *((unsigned int *)v842 + 2);
          if ((_DWORD)v844)
          {
            v845 = (uint64_t *)*v842;
            v846 = v1047;
            do
            {
              v847 = *v845++;
              *v846++ |= v847;
              --v844;
            }
            while (v844);
          }
          v839 += 8;
        }
        v854 = *(_DWORD *)(v834 + 24);
        v855 = v1059;
        v856 = (uint64_t *)(v1059 + 72 * v854);
        __src = (char *)&v1022 + 8;
        *(_QWORD *)&v1022 = 0x600000000;
        v857 = *((unsigned int *)v856 + 2);
        if (&__src != (void **)v856 && v857 != 0)
        {
          v859 = (char *)&v1022 + 8;
          v860 = *((unsigned int *)v856 + 2);
          if (v857 < 7)
            goto LABEL_1431;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1022 + 8, *((unsigned int *)v856 + 2), 8);
          v860 = *((unsigned int *)v856 + 2);
          if ((_DWORD)v860)
          {
            v859 = (char *)__src;
LABEL_1431:
            memcpy(v859, (const void *)*v856, 8 * v860);
          }
          LODWORD(v1022) = v857;
        }
        v861 = v855 + 72 * v854;
        v863 = *(_DWORD *)(v861 + 64);
        v862 = (unsigned int *)(v861 + 64);
        DWORD2(v1025) = v863;
        v864 = sub_1C4A9F510(*(_QWORD *)(a1 + 344), *(_DWORD *)(a1 + 360), v834);
        if (v856 != (uint64_t *)&v1047)
        {
          v865 = v1048;
          v866 = *((unsigned int *)v856 + 2);
          if (v866 < v1048)
          {
            if (*((_DWORD *)v856 + 3) < v1048)
            {
              *((_DWORD *)v856 + 2) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v856, (uint64_t)(v856 + 2), v865, 8);
            }
            else if ((_DWORD)v866)
            {
              memmove((void *)*v856, v1047, 8 * v866);
LABEL_1442:
              if (v866 != v1048)
                memcpy((void *)(*v856 + 8 * v866), (char *)v1047 + 8 * v866, 8 * v1048 - 8 * v866);
LABEL_1444:
              *((_DWORD *)v856 + 2) = v865;
              goto LABEL_1445;
            }
            v866 = 0;
            goto LABEL_1442;
          }
          if ((_DWORD)v1048)
            memmove((void *)*v856, v1047, 8 * v1048);
          goto LABEL_1444;
        }
LABEL_1445:
        v867 = v864 + 1;
        *v862 = v1051;
        if (!*((_BYTE *)v864 + 248))
          (*(void (**)(uint64_t *))(*v867 + 40))(v864 + 1);
        LODWORD(v868) = *((_DWORD *)v856 + 2);
        v869 = *((_DWORD *)v864 + 46);
        if (v869 >= v868)
          v868 = v868;
        else
          v868 = v869;
        if ((_DWORD)v868)
        {
          v870 = (uint64_t *)v864[22];
          v871 = (_QWORD *)*v856;
          do
          {
            v872 = *v870++;
            *v871++ &= ~v872;
            --v868;
          }
          while (v868);
        }
        if (!*((_BYTE *)v864 + 328))
          (*(void (**)(uint64_t *))(*v867 + 40))(v864 + 1);
        v873 = *v862;
        v874 = *((_DWORD *)v864 + 80);
        v142 = a1;
        if (*v862 < v874)
        {
          v884 = *v862 & 0x3F;
          v885 = *((unsigned int *)v856 + 2);
          if (v884)
            *(_QWORD *)(*v856 + 8 * v885 - 8) &= ~(-1 << v884);
          v886 = v885;
          *v862 = v874;
          v887 = v874 + 63;
          if ((_DWORD)v885 != (v874 + 63) >> 6)
          {
            v888 = v887 >> 6;
            if (v885 > v888)
            {
              *((_DWORD *)v856 + 2) = v888;
              v886 = v887 >> 6;
            }
            else
            {
              v889 = v885;
              if (v888 > *((_DWORD *)v856 + 3))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v856, (uint64_t)(v856 + 2), v888, 8);
                v889 = *((unsigned int *)v856 + 2);
                v886 = *((_DWORD *)v856 + 2);
              }
              if (v888 != v885)
                bzero((void *)(*v856 + 8 * v889), 8 * (v888 - v885));
              v886 += v888 - v885;
              *((_DWORD *)v856 + 2) = v886;
              v874 = *v862;
            }
            v142 = a1;
          }
          if ((v874 & 0x3F) != 0)
            *(_QWORD *)(*v856 + 8 * v886 - 8) &= ~(-1 << (v874 & 0x3F));
          v873 = v874;
        }
        v875 = *((unsigned int *)v864 + 66);
        if ((_DWORD)v875)
        {
          v876 = (uint64_t *)v864[32];
          v877 = (_QWORD *)*v856;
          do
          {
            v878 = *v876++;
            *v877++ |= v878;
            --v875;
          }
          while (v875);
        }
        v879 = (char *)__src;
        v880 = DWORD2(v1025) != v873 || memcmp(__src, (const void *)*v856, 8 * v1022) != 0;
        if (v879 != (char *)&v1022 + 8)
          free(v879);
        if (v880)
        {
          v881 = *(_DWORD ***)(v834 + 64);
          v882 = *(_DWORD ***)(v834 + 72);
          while (v881 != v882)
          {
            __src = 0;
            v883 = *v881++;
            __src = v883;
            LODWORD(v1053) = v883[6];
            sub_1C49DA87C((uint64_t **)&__b, (unsigned int *)&v1053, &__src);
          }
        }
        if (v1047 != &v1049)
          free(v1047);
        v831 = v1044;
        if (!v1044)
          goto LABEL_1486;
      }
      do
      {
        v833 = v832;
        v832 = (void **)v832[1];
      }
      while (v832);
      v834 = (uint64_t)v833[5];
LABEL_1396:
      v835 = v833;
      do
      {
        v836 = v835;
        v835 = (void **)v835[2];
      }
      while (*v835 != v836);
      goto LABEL_1402;
    }
LABEL_1486:
    v890 = *(_QWORD *)v969 + 320;
    v891 = *(_QWORD *)(*(_QWORD *)v969 + 328);
    if (v891 != v890)
    {
      while (1)
      {
        v892 = sub_1C4A9F510(*(_QWORD *)(v142 + 344), *(_DWORD *)(v142 + 360), v891);
        if (*((_BYTE *)v892 + 88))
          goto LABEL_1612;
        v893 = v892;
        v894 = v1059;
        v895 = *(_DWORD *)(v891 + 24);
        v896 = (uint64_t *)(v1059 + 72 * v895);
        v897 = v892 + 4;
        v892[2] = (uint64_t)(v892 + 4);
        v898 = (void **)(v892 + 2);
        v892[3] = 0x600000000;
        v899 = *((unsigned int *)v896 + 2);
        if (v892 + 2 != v896 && v899 != 0)
          break;
LABEL_1498:
        *((_DWORD *)v893 + 20) = *(_DWORD *)(v894 + 72 * v895 + 64);
        *((_BYTE *)v893 + 88) = 1;
        v891 = *(_QWORD *)(v891 + 8);
        v142 = a1;
        if (v891 == v890)
          goto LABEL_1499;
      }
      if (v899 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v892 + 2), (uint64_t)v897, *((unsigned int *)v896 + 2), 8);
        v901 = *((unsigned int *)v896 + 2);
        if (!(_DWORD)v901)
        {
LABEL_1497:
          *((_DWORD *)v893 + 6) = v899;
          goto LABEL_1498;
        }
        v897 = *v898;
      }
      else
      {
        v901 = *((unsigned int *)v896 + 2);
      }
      memcpy(v897, (const void *)*v896, 8 * v901);
      goto LABEL_1497;
    }
LABEL_1499:
    __src = &v1059;
    sub_1C476B22C((void ***)&__src);
    sub_1C61247C0((uint64_t)&__b, v1043);
  }
  v902 = (_QWORD *)a2[41];
  if (v902 != v973)
  {
    do
    {
      v903 = sub_1C4A9F510(*(_QWORD *)(v142 + 256), *(_DWORD *)(v142 + 272), (uint64_t)v902);
      v904 = v902[4];
      v905 = *(_QWORD *)(v904 + 48);
      if (!v905)
      {
        v905 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v904 + 8) + 216))(*(_QWORD *)(v904 + 8), v904 + 128, v902[4]);
        *(_QWORD *)(v904 + 48) = v905;
      }
      v906 = *(_QWORD *)(v905 + 552);
      if ((v906 & 0xFF00000000) != 0)
        v907 = v906 + 1;
      else
        v907 = 4080;
      v1009 = v1011;
      v1010 = 0x600000000;
      sub_1C4765AA4((char *)&v1009, (v907 + 63) >> 6, 0);
      v1012 = v907;
      v908 = (uint64_t *)v902[11];
      v909 = (uint64_t *)v902[12];
      while (v908 != v909)
      {
        v910 = sub_1C4A9F510(*(_QWORD *)(v142 + 256), *(_DWORD *)(v142 + 272), *v908);
        v911 = *((_DWORD *)v910 + 20);
        if (v907 < v911)
        {
          v916 = v1010;
          if ((v907 & 0x3F) != 0)
            *((_QWORD *)v1009 + v1010 - 1) &= ~(-1 << (v907 & 0x3F));
          v917 = v916;
          v1012 = v911;
          v918 = v911 + 63;
          if ((_DWORD)v916 != (v911 + 63) >> 6)
          {
            v919 = v918 >> 6;
            if (v916 > v919)
            {
              LODWORD(v1010) = v918 >> 6;
              v917 = v918 >> 6;
            }
            else
            {
              v920 = v916;
              if (v919 > HIDWORD(v1010))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1009, (uint64_t)v1011, v919, 8);
                v920 = v1010;
                v917 = v1010;
              }
              if (v919 != v916)
                bzero((char *)v1009 + 8 * v920, 8 * (v919 - v916));
              v917 += v919 - v916;
              LODWORD(v1010) = v917;
              v911 = v1012;
            }
          }
          v142 = a1;
          if ((v911 & 0x3F) != 0)
            *((_QWORD *)v1009 + v917 - 1) &= ~(-1 << (v911 & 0x3F));
          v907 = v911;
        }
        v912 = *((unsigned int *)v910 + 6);
        if ((_DWORD)v912)
        {
          v913 = (uint64_t *)v910[2];
          v914 = v1009;
          do
          {
            v915 = *v913++;
            *v914++ |= v915;
            --v912;
          }
          while (v912);
        }
        ++v908;
      }
      __src = (char *)&v1022 + 8;
      *(_QWORD *)&v1022 = 0x400000000;
      sub_1C4A9F3F8(*(_QWORD *)(v142 + 296), *(_DWORD *)(v142 + 312), (uint64_t)v902, (uint64_t)&__src);
      v921 = (uint64_t *)__src;
      if ((_DWORD)v1022)
      {
        v922 = (uint64_t *)((char *)__src + 8 * v1022);
        v923 = v1012;
        do
        {
          v924 = sub_1C4A9F510(*(_QWORD *)(v142 + 256), *(_DWORD *)(v142 + 272), *v921);
          v925 = *((_DWORD *)v924 + 20);
          if (v923 < v925)
          {
            v930 = v1010;
            if ((v923 & 0x3F) != 0)
              *((_QWORD *)v1009 + v1010 - 1) &= ~(-1 << (v923 & 0x3F));
            v931 = v930;
            v1012 = v925;
            v932 = v925 + 63;
            if ((_DWORD)v930 != (v925 + 63) >> 6)
            {
              v933 = v932 >> 6;
              if (v930 > v933)
              {
                LODWORD(v1010) = v932 >> 6;
                v931 = v932 >> 6;
              }
              else
              {
                v934 = v930;
                if (v933 > HIDWORD(v1010))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1009, (uint64_t)v1011, v933, 8);
                  v934 = v1010;
                  v931 = v1010;
                }
                if (v933 != v930)
                  bzero((char *)v1009 + 8 * v934, 8 * (v933 - v930));
                v931 += v933 - v930;
                LODWORD(v1010) = v931;
                v925 = v1012;
              }
            }
            if ((v925 & 0x3F) != 0)
              *((_QWORD *)v1009 + v931 - 1) &= ~(-1 << (v925 & 0x3F));
            v923 = v925;
            v142 = a1;
          }
          v926 = *((unsigned int *)v924 + 6);
          if ((_DWORD)v926)
          {
            v927 = (uint64_t *)v924[2];
            v928 = v1009;
            do
            {
              v929 = *v927++;
              *v928++ |= v929;
              --v926;
            }
            while (v926);
          }
          ++v921;
        }
        while (v921 != v922);
        v921 = (uint64_t *)__src;
      }
      if (v921 != (uint64_t *)((char *)&v1022 + 8))
        free(v921);
      sub_1C4A96BB0((uint64_t)(v903 + 1), (uint64_t *)&v1009);
      if (v1009 != v1011)
        free(v1009);
      v902 = (_QWORD *)v902[1];
    }
    while (v902 != v973);
    for (m = (_QWORD *)a2[41]; m != v973; v142 = a1)
    {
      v936 = sub_1C4A9F510(*(_QWORD *)(v142 + 344), *(_DWORD *)(v142 + 360), (uint64_t)m);
      v937 = *(_QWORD *)(*(_QWORD *)(m[4] + 56) + 48) >> 1;
      v1005 = v1007;
      v1006 = 0x600000000;
      sub_1C4765AA4((char *)&v1005, (v937 + 63) >> 6, 0);
      v1008 = v937;
      v938 = (uint64_t *)m[11];
      v939 = (uint64_t *)m[12];
      while (v938 != v939)
      {
        v940 = sub_1C4A9F510(*(_QWORD *)(a1 + 344), *(_DWORD *)(a1 + 360), *v938);
        v941 = *((_DWORD *)v940 + 20);
        if (v937 < v941)
        {
          v946 = v1006;
          if ((v937 & 0x3F) != 0)
            *((_QWORD *)v1005 + v1006 - 1) &= ~(-1 << (v937 & 0x3F));
          v947 = v946;
          v1008 = v941;
          v948 = v941 + 63;
          if ((_DWORD)v946 != (v941 + 63) >> 6)
          {
            v949 = v948 >> 6;
            if (v946 > v949)
            {
              LODWORD(v1006) = v948 >> 6;
              v947 = v948 >> 6;
            }
            else
            {
              v950 = v946;
              if (v949 > HIDWORD(v1006))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1005, (uint64_t)v1007, v949, 8);
                v950 = v1006;
                v947 = v1006;
              }
              if (v949 != v946)
                bzero((char *)v1005 + 8 * v950, 8 * (v949 - v946));
              v947 += v949 - v946;
              LODWORD(v1006) = v947;
              v941 = v1008;
            }
          }
          if ((v941 & 0x3F) != 0)
            *((_QWORD *)v1005 + v947 - 1) &= ~(-1 << (v941 & 0x3F));
          LODWORD(v937) = v941;
        }
        v942 = *((unsigned int *)v940 + 6);
        if ((_DWORD)v942)
        {
          v943 = (uint64_t *)v940[2];
          v944 = v1005;
          do
          {
            v945 = *v943++;
            *v944++ |= v945;
            --v942;
          }
          while (v942);
        }
        ++v938;
      }
      sub_1C4A96BB0((uint64_t)(v936 + 1), (uint64_t *)&v1005);
      if (v1005 != v1007)
        free(v1005);
      m = (_QWORD *)m[1];
    }
  }
  if (*(_BYTE *)(v142 + 524))
  {
    v951 = a2 + 40;
    while (1)
    {
      v951 = (_QWORD *)*v951;
      if (v951 == v973)
        break;
      if (sub_1C498FBAC((uint64_t)v951))
      {
        if (v951)
        {
          v954 = v951[6];
          v953 = v951 + 6;
          for (n = v954; ; n = *(_QWORD *)v955)
          {
            v955 = n & 0xFFFFFFFFFFFFFFF8;
            if (v953 == (_QWORD *)(n & 0xFFFFFFFFFFFFFFF8))
              break;
            v956 = *(_QWORD *)(v955 + 16);
            v957 = *(_QWORD *)(v956 + 8);
            if ((*(_WORD *)(v955 + 44) & 0xC) != 0 && (*(_WORD *)(v955 + 44) & 4) == 0)
            {
              v959 = v955;
              if ((v957 & 0x20) != 0)
              {
LABEL_1592:
                if (v968 && *(_WORD *)v956 == 547)
                {
                  v960 = ((*(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 176))(a2[2])
                                                   + 16)
                                       + 31) >> 3) & 0x1FFFFFFC;
                  v961 = (void *)sub_1C484358C((uint64_t)(a2 + 16), v960, 2);
                  bzero(v961, v960);
                  memmove(v961, v967, 4 * v968);
                  LODWORD(__src) = 12;
                  *(_QWORD *)&v1022 = 0;
                  *((_QWORD *)&v1022 + 1) = v961;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v955, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&__src);
                  sub_1C4963F5C(a2[5] + 280, (int *)v961, 0xFFFFFFFF);
                }
                goto LABEL_1595;
              }
              while ((*(_WORD *)(v959 + 44) & 8) != 0)
              {
                v959 = *(_QWORD *)(v959 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v959 + 16) + 8) & 0x20) != 0)
                  goto LABEL_1592;
              }
            }
            else if ((v957 & 0x20) != 0)
            {
              goto LABEL_1592;
            }
          }
        }
        break;
      }
    }
  }
LABEL_1595:
  if (v1014 != v1016)
    free(v1014);
  v962 = (char *)v1018;
  if ((_DWORD)v1019)
  {
    v963 = (char *)v1018 + 8 * v1019;
    do
    {
      v964 = *(_BYTE **)v962;
      v965 = *(_BYTE **)v962;
      if ((**(_BYTE **)v962 & 4) == 0)
      {
        v965 = *(_BYTE **)v962;
        if ((*((_WORD *)v964 + 22) & 8) != 0)
        {
          v965 = *(_BYTE **)v962;
          do
            v965 = (_BYTE *)*((_QWORD *)v965 + 1);
          while ((*((_WORD *)v965 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v964 + 3) + 40, (uint64_t)v964, *((_QWORD *)v965 + 1));
      v962 += 8;
    }
    while (v962 != v963);
    v962 = (char *)v1018;
  }
  if (v962 != v1020)
    free(v962);
  v29 = v972;
  return v29 & 1;
}

uint64_t *sub_1C4A9D0C8(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *a1;
  if (v2)
  {
    v4 = 888 * v2;
    v5 = v3 + 8;
    do
    {
      v6 = *(_QWORD *)(v5 - 8);
      if (v6 != -4096 && v6 != -8192)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      v5 += 888;
      v4 -= 888;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C4A9D14C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *a1;
  if (v2)
  {
    v4 = 880 * v2;
    v5 = v3 + 8;
    do
    {
      v6 = *(_QWORD *)(v5 - 8);
      if (v6 != -4096 && v6 != -8192)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      v5 += 880;
      v4 -= 880;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C4A9D1D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &unk_1E7FA95C0;
  v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352))
    free(v2);
  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184))
      free(v4);
    *(_BYTE *)(a1 + 240) = 0;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104))
      free(v7);
    *(_BYTE *)(a1 + 160) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24))
      free(v6);
    *(_BYTE *)(a1 + 80) = 0;
  }
  return a1;
}

_QWORD *sub_1C4A9D2A0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(880 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 880 * v10;
      do
      {
        *result = -4096;
        result += 110;
        v11 -= 880;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = 0;
      v13 = 880 * v3;
      v14 = 0x2000000000;
      do
      {
        v15 = *(_QWORD *)(v4 + v12);
        if (v15 != -4096 && v15 != -8192)
        {
          v24 = v14;
          v23 = v13;
          v26 = 0;
          v16 = v12;
          sub_1C4A9D524(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v26);
          v17 = v26;
          v25 = v16;
          v18 = v4 + v16;
          *v26 = *(_QWORD *)v18;
          v17[1] = &unk_1E7FA95C0;
          *((_BYTE *)v17 + 16) = 0;
          *((_BYTE *)v17 + 88) = 0;
          if (*(_BYTE *)(v18 + 88))
            sub_1C614E7D8((uint64_t)(v17 + 2), v18 + 16);
          *((_BYTE *)v17 + 96) = 0;
          *((_BYTE *)v17 + 168) = 0;
          if (*(_BYTE *)(v18 + 168))
            sub_1C614E7D8((uint64_t)(v17 + 12), v4 + v25 + 96);
          *((_BYTE *)v17 + 176) = 0;
          *((_BYTE *)v17 + 248) = 0;
          v19 = v4 + v25;
          if (*(_BYTE *)(v4 + v25 + 248))
            sub_1C614E7D8((uint64_t)(v17 + 22), v19 + 176);
          *((_BYTE *)v17 + 256) = 0;
          *((_BYTE *)v17 + 328) = 0;
          if (*(_BYTE *)(v19 + 328))
            sub_1C614E7D8((uint64_t)(v17 + 32), v4 + v25 + 256);
          v20 = v4 + v25;
          v17[42] = *(_QWORD *)(v4 + v25 + 336);
          v17[43] = v17 + 45;
          v17[44] = v24;
          if (*(_DWORD *)(v4 + v25 + 352))
            sub_1C49DA288((uint64_t)(v17 + 43), v20 + 344);
          v17[1] = off_1E7FAD460;
          *((_DWORD *)v17 + 218) = *(_DWORD *)(v20 + 872);
          ++*(_DWORD *)(a1 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 24))(v18 + 8);
          v12 = v25;
          v13 = v23;
          v14 = v24;
        }
        v12 += 880;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(_DWORD *)(a1 + 16);
  if (v21)
  {
    v22 = 880 * v21;
    do
    {
      *result = -4096;
      result += 110;
      v22 -= 880;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_1C4A9D524(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 880 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 880 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

uint64_t sub_1C4A9D5A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

unint64_t sub_1C4A9D5AC(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;

  v2 = a2[4] - 81;
  if (v2 > 4)
  {
    v6 = 0;
  }
  else
  {
    v3 = (*a2 >> 8) & 0xFFF;
    if (!*a2)
      v3 = 0;
    v4 = v3 & 0x200;
    if ((v3 & 0x200) != 0)
      v3 &= 0xCFFu;
    if ((v3 & 0xFFFFFEFF) != 0)
      return 0;
    v6 = a2[1] | (v4 << 22);
  }
  v7 = (dword_1C676CB54[v2] + v6);
  sub_1C49C802C((uint64_t)a2);
  return v6 & 0xFFFFFF00 | (unint64_t)(v7 << 32) | v6;
}

unint64_t sub_1C4A9D658(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;

  if ((a2[4] - 81) > 4)
    return 0;
  v2 = (*a2 >> 8) & 0xFFF;
  if (!*a2)
    v2 = 0;
  v3 = v2 & 0x200;
  if ((v2 & 0x200) != 0)
    v2 &= 0xFFFFFCFF;
  v4 = v2 & 0xFFFFFEFF;
  if (!v4)
    return 0;
  v5 = (a2[1] | (v3 << 22)) + ((v4 - 129) >> 2);
  return v5 | ((unint64_t)(v5 + 1) << 32);
}

uint64_t sub_1C4A9D6B8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(a2 + 40))
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      result = sub_1C4AD4FB8(a2, v5, (_QWORD *)(*(_QWORD *)(v3 + 328) + 8));
      if ((result & 0xFFFFFFFE) == 4)
      {
        v8 = *(_QWORD *)(a2 + 32) + v4;
        v9 = a2;
        v6 = *(unsigned int *)(v3 + 344);
        if (v6 >= *(_DWORD *)(v3 + 348))
        {
          result = sub_1C49DA4AC(v3 + 336, &v9, &v8);
        }
        else
        {
          v7 = (uint64_t *)(*(_QWORD *)(v3 + 336) + 16 * v6);
          *v7 = a2;
          v7[1] = v8;
          *(_DWORD *)(v3 + 344) = v6 + 1;
        }
      }
      ++v5;
      v4 += 32;
    }
    while (v5 < *(unsigned int *)(a2 + 40));
  }
  return result;
}

uint64_t sub_1C4A9D77C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;

  if (*(_DWORD *)(a2 + 40))
  {
    v4 = 0;
    while (sub_1C4AD4FB8(a2, v4, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) != 4)
    {
      if (++v4 >= *(_DWORD *)(a2 + 40))
        goto LABEL_5;
    }
    v5 = 0x100000000;
  }
  else
  {
LABEL_5:
    v5 = 0;
    v4 = 0;
  }
  return v5 | v4;
}

uint64_t *sub_1C4A9D7F8(uint64_t *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return sub_1C4A9D844(result, v4 + 1);
  }
  return result;
}

_QWORD *sub_1C4A9D844(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = &v4[5 * v3];
      v13 = 0x200000000;
      v14 = v4;
      do
      {
        v15 = *v14;
        if (*v14 != -4096 && v15 != -8192)
        {
          v29 = v14;
          v28 = v13;
          v27 = v12;
          v16 = *((_DWORD *)a1 + 4) - 1;
          v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
          v18 = (_QWORD *)(*a1 + 40 * v17);
          v19 = *v18;
          if (*v18 != v15)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = (_QWORD *)(*a1 + 40 * (v23 & v16));
              v19 = *v18;
              if (*v18 == v15)
                goto LABEL_26;
            }
            if (v20)
              v18 = v20;
          }
LABEL_26:
          *v18 = v15;
          v18[1] = v18 + 3;
          v18[2] = v13;
          if (*((_DWORD *)v14 + 4))
            sub_1C614D378((uint64_t)(v18 + 1), (uint64_t)(v14 + 1));
          ++*((_DWORD *)a1 + 2);
          v14 = v29;
          v24 = (uint64_t *)v29[1];
          v12 = v27;
          v13 = v28;
          if (v24 != v29 + 3)
          {
            free(v24);
            v14 = v29;
            v13 = v28;
            v12 = v27;
          }
        }
        v14 += 5;
      }
      while (v14 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 40 * v25;
    do
    {
      *result = -4096;
      result += 5;
      v26 -= 40;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1C4A9DA5C(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 40 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 40 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_7;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_7:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4A9DADC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - *(_DWORD *)(a1 + 12) > v4 >> 3)
  {
    goto LABEL_3;
  }
  v7 = a1;
  sub_1C4A9D844((uint64_t *)a1, v4);
  v8 = 0;
  sub_1C4A9DA5C(*(_QWORD *)v7, *(_DWORD *)(v7 + 16), *a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C4A9DB98(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &unk_1E7FA95C0;
  v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352))
    free(v2);
  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184))
      free(v4);
    *(_BYTE *)(a1 + 240) = 0;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104))
      free(v7);
    *(_BYTE *)(a1 + 160) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24))
      free(v6);
    *(_BYTE *)(a1 + 80) = 0;
  }
  return a1;
}

_QWORD *sub_1C4A9DC68(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(880 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 880 * v10;
      do
      {
        *result = -4096;
        result += 110;
        v11 -= 880;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = 0;
      v13 = 880 * v3;
      v14 = 0x2000000000;
      do
      {
        v15 = *(_QWORD *)(v4 + v12);
        if (v15 != -4096 && v15 != -8192)
        {
          v24 = v14;
          v23 = v13;
          v26 = 0;
          v16 = v12;
          sub_1C4A9D524(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v26);
          v17 = v26;
          v25 = v16;
          v18 = v4 + v16;
          *v26 = *(_QWORD *)v18;
          v17[1] = &unk_1E7FA95C0;
          *((_BYTE *)v17 + 16) = 0;
          *((_BYTE *)v17 + 88) = 0;
          if (*(_BYTE *)(v18 + 88))
            sub_1C614E7D8((uint64_t)(v17 + 2), v18 + 16);
          *((_BYTE *)v17 + 96) = 0;
          *((_BYTE *)v17 + 168) = 0;
          if (*(_BYTE *)(v18 + 168))
            sub_1C614E7D8((uint64_t)(v17 + 12), v4 + v25 + 96);
          *((_BYTE *)v17 + 176) = 0;
          *((_BYTE *)v17 + 248) = 0;
          v19 = v4 + v25;
          if (*(_BYTE *)(v4 + v25 + 248))
            sub_1C614E7D8((uint64_t)(v17 + 22), v19 + 176);
          *((_BYTE *)v17 + 256) = 0;
          *((_BYTE *)v17 + 328) = 0;
          if (*(_BYTE *)(v19 + 328))
            sub_1C614E7D8((uint64_t)(v17 + 32), v4 + v25 + 256);
          v20 = v4 + v25;
          v17[42] = *(_QWORD *)(v4 + v25 + 336);
          v17[43] = v17 + 45;
          v17[44] = v24;
          if (*(_DWORD *)(v4 + v25 + 352))
            sub_1C49DA288((uint64_t)(v17 + 43), v20 + 344);
          v17[1] = off_1E7FAD4B8;
          *((_DWORD *)v17 + 218) = *(_DWORD *)(v20 + 872);
          ++*(_DWORD *)(a1 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 24))(v18 + 8);
          v12 = v25;
          v13 = v23;
          v14 = v24;
        }
        v12 += 880;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(_DWORD *)(a1 + 16);
  if (v21)
  {
    v22 = 880 * v21;
    do
    {
      *result = -4096;
      result += 110;
      v22 -= 880;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_1C4A9DEEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

uint64_t sub_1C4A9DEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (sub_1C4AD4FB8(v4, (unint64_t)(a2 - *(_QWORD *)(v4 + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) == 6)return sub_1C4A9E250(a1, a2);
  v6 = *(unsigned __int16 **)(v4 + 16);
  v7 = sub_1C4C915C4(*v6);
  if ((v7 & 0xFF00000000) != 0 && v7 == 100)
    return sub_1C4A9E250(a1, a2);
  v8 = *((_QWORD *)v6 + 1);
  if ((*(_WORD *)(v4 + 44) & 0xC) != 0 && (*(_WORD *)(v4 + 44) & 4) == 0)
  {
    if ((v8 & 0x80) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
      {
        v4 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v4 + 16) + 8) & 0x80) != 0)
          return sub_1C4A9E250(a1, a2);
      }
      return 0;
    }
    return sub_1C4A9E250(a1, a2);
  }
  if ((v8 & 0x80) != 0)
    return sub_1C4A9E250(a1, a2);
  return 0;
}

uint64_t sub_1C4A9DFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 8);
  if (sub_1C4AD4FB8(v4, (unint64_t)(a2 - *(_QWORD *)(v4 + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) == 7)return sub_1C4A9E250(a1, a2);
  v5 = sub_1C4C915C4(**(unsigned __int16 **)(v4 + 16));
  if ((v5 & 0xFF00000000) == 0)
    return 0;
  v6 = v5;
  result = 0;
  if (v6 == 193)
    return sub_1C4A9E250(a1, a2);
  return result;
}

void sub_1C4A9E06C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 240) && !*(_BYTE *)(a1 + 320))
    sub_1C49D9BE0(a1);
}

uint64_t sub_1C4A9E084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(a2 + 40))
  {
    v4 = 0;
    v5 = 0;
    while ((sub_1C4AD4FB8(a2, v5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) & 0xFFFFFFFE) != 6)
    {
      ++v5;
      v4 += 32;
      if (v5 >= *(_DWORD *)(a2 + 40))
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(a2 + 32) + v4;
    v15 = v9;
    v16 = a2;
    v10 = *(unsigned int *)(a1 + 344);
    if (v10 >= *(_DWORD *)(a1 + 348))
    {
      sub_1C49DA4AC(a1 + 336, &v16, &v15);
    }
    else
    {
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 336) + 16 * v10);
      *v11 = a2;
      v11[1] = v9;
      *(_DWORD *)(a1 + 344) = v10 + 1;
    }
  }
LABEL_5:
  result = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) != 0)
  {
    if ((int)result > 192)
    {
      if ((_DWORD)result != 193)
        return result;
      goto LABEL_19;
    }
    if ((_DWORD)result == 100 || (_DWORD)result == 4 || (_DWORD)result == 11)
    {
LABEL_19:
      v12 = *(_QWORD *)(a2 + 32);
      v15 = v12;
      v16 = a2;
      v13 = *(unsigned int *)(a1 + 344);
      if (v13 >= *(_DWORD *)(a1 + 348))
      {
        return sub_1C49DA4AC(a1 + 336, &v16, &v15);
      }
      else
      {
        v14 = (uint64_t *)(*(_QWORD *)(a1 + 336) + 16 * v13);
        *v14 = a2;
        v14[1] = v12;
        *(_DWORD *)(a1 + 344) = v13 + 1;
      }
    }
  }
  return result;
}

uint64_t sub_1C4A9E1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((v4 & 0xFF00000000) != 0 && v4 == 100 || !*(_DWORD *)(a2 + 40))
    return 0;
  v5 = 0;
  while (sub_1C4AD4FB8(a2, v5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8)) != 6)
  {
    if (++v5 >= *(_DWORD *)(a2 + 40))
      return 0;
  }
  return v5 + 0x100000001;
}

uint64_t sub_1C4A9E250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = sub_1C4AD4FB8(v4, (unint64_t)(a2 - *(_QWORD *)(v4 + 32)) >> 5, (_QWORD *)(*(_QWORD *)(a1 + 328) + 8));
  v6 = sub_1C4C915C4(**(unsigned __int16 **)(v4 + 16));
  if ((v5 - 8) > 0xFFFFFFFD || (v6 & 0xFF00000000) == 0)
  {
    if (*(_BYTE *)a2 == 7)
      v8 = *(_DWORD *)(a2 + 4);
    else
      v8 = *(_DWORD *)(a2 + 16);
    v10 = *(_QWORD *)(v4 + 48);
    if ((v10 & 7) != 0)
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v4 + 48) = v10 & 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *(_QWORD *)(v11 + 24);
    v14 = (unint64_t *)(v11 + 24);
    if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      v17 = sub_1C4825F50(v14) + 7;
      if ((_DWORD)v16 == 1)
      v18 = (v17 >> 4) & 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v18) = 0x7FFFFFFF;
    }
    v13 = v18 + v8;
    v12 = v8;
  }
  else
  {
    if ((int)v6 <= 99)
    {
      if ((_DWORD)v6 != 4 && (_DWORD)v6 != 11)
LABEL_29:
        llvm::report_fatal_error((llvm *)"Unexpected Opcode", (const char *)1);
      goto LABEL_20;
    }
    if ((_DWORD)v6 == 100)
    {
LABEL_20:
      v12 = 0;
      v13 = *(unsigned int *)(a1 + 864);
      return v12 | (v13 << 32);
    }
    if ((_DWORD)v6 != 193)
      goto LABEL_29;
    v12 = 0;
    v13 = 0;
  }
  return v12 | (v13 << 32);
}

uint64_t sub_1C4A9E394(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &unk_1E7FA95C0;
  v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352))
    free(v2);
  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184))
      free(v4);
    *(_BYTE *)(a1 + 240) = 0;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104))
      free(v7);
    *(_BYTE *)(a1 + 160) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24))
      free(v6);
    *(_BYTE *)(a1 + 80) = 0;
  }
  return a1;
}

_QWORD *sub_1C4A9E464(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(888 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 888 * v10;
      do
      {
        *result = -4096;
        result += 111;
        v11 -= 888;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = 0;
      v13 = 888 * v3;
      v14 = 0x2000000000;
      do
      {
        v15 = *(_QWORD *)(v4 + v12);
        if (v15 != -4096 && v15 != -8192)
        {
          v24 = v14;
          v23 = v13;
          v26 = 0;
          v16 = v12;
          sub_1C4A9E6EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v26);
          v17 = v26;
          v25 = v16;
          v18 = v4 + v16;
          *v26 = *(_QWORD *)v18;
          v17[1] = &unk_1E7FA95C0;
          *((_BYTE *)v17 + 16) = 0;
          *((_BYTE *)v17 + 88) = 0;
          if (*(_BYTE *)(v18 + 88))
            sub_1C614E7D8((uint64_t)(v17 + 2), v18 + 16);
          *((_BYTE *)v17 + 96) = 0;
          *((_BYTE *)v17 + 168) = 0;
          if (*(_BYTE *)(v18 + 168))
            sub_1C614E7D8((uint64_t)(v17 + 12), v4 + v25 + 96);
          *((_BYTE *)v17 + 176) = 0;
          *((_BYTE *)v17 + 248) = 0;
          v19 = v4 + v25;
          if (*(_BYTE *)(v4 + v25 + 248))
            sub_1C614E7D8((uint64_t)(v17 + 22), v19 + 176);
          *((_BYTE *)v17 + 256) = 0;
          *((_BYTE *)v17 + 328) = 0;
          if (*(_BYTE *)(v19 + 328))
            sub_1C614E7D8((uint64_t)(v17 + 32), v4 + v25 + 256);
          v20 = v4 + v25;
          v17[42] = *(_QWORD *)(v4 + v25 + 336);
          v17[43] = v17 + 45;
          v17[44] = v24;
          if (*(_DWORD *)(v4 + v25 + 352))
            sub_1C49DA288((uint64_t)(v17 + 43), v20 + 344);
          v17[1] = &off_1E7FAD510;
          *(_OWORD *)(v17 + 109) = *(_OWORD *)(v20 + 872);
          ++*(_DWORD *)(a1 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 24))(v18 + 8);
          v12 = v25;
          v13 = v23;
          v14 = v24;
        }
        v12 += 888;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(_DWORD *)(a1 + 16);
  if (v21)
  {
    v22 = 888 * v21;
    do
    {
      *result = -4096;
      result += 111;
      v22 -= 888;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_1C4A9E6EC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 888 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 888 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1C4A9E778(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

void sub_1C4A9E788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  void **v19;
  void *v20;
  int v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  void **v25;
  void *v26;
  int v27;
  _BYTE *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[48];
  int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[48];
  unsigned int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[48];
  unsigned int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 240) || *(_BYTE *)(a1 + 320))
    return;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 32) + 16);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v84 = 0x600000000;
  v82 = v3;
  v83 = v85;
  v4 = *(_DWORD *)(v3 + 44);
  v86 = v4;
  v5 = v4 + 63;
  if (v4 + 63 < 0x40)
  {
    v10 = 0;
    v9 = v85;
  }
  else
  {
    v6 = v5 >> 6;
    if (v5 >= 0x1C0)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v5 >> 6, 8);
      v9 = v83;
      v7 = v84;
      LOBYTE(v4) = v86;
      v8 = v84;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = v85;
    }
    bzero(&v9[8 * v7], 8 * v6);
    v10 = v8 + v6;
    LODWORD(v84) = v8 + v6;
  }
  if ((v4 & 0x3F) != 0)
    *(_QWORD *)&v9[8 * v10 - 8] &= ~(-1 << (v4 & 0x3F));
  v79 = 0x600000000;
  v77 = v3;
  v78 = v80;
  v11 = *(_DWORD *)(v3 + 44);
  v81 = v11;
  v12 = v11 + 63;
  if (v11 + 63 < 0x40)
  {
    v17 = 0;
    v16 = v80;
  }
  else
  {
    v13 = v12 >> 6;
    if (v12 >= 0x1C0)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v12 >> 6, 8);
      v16 = v78;
      v14 = v79;
      LOBYTE(v11) = v81;
      v15 = v79;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = v80;
    }
    bzero(&v16[8 * v14], 8 * v13);
    v17 = v15 + v13;
    LODWORD(v79) = v15 + v13;
  }
  if ((v11 & 0x3F) != 0)
    *(_QWORD *)&v16[8 * v17 - 8] &= ~(-1 << (v11 & 0x3F));
  v18 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v73 = v75;
  v74 = 0x600000000;
  sub_1C4765AA4((char *)&v73, (v18 + 63) >> 6, 0);
  v76 = v18;
  v19 = (void **)(a1 + 248);
  if (!*(_BYTE *)(a1 + 320))
  {
    v20 = (void *)(a1 + 264);
    *(_QWORD *)(a1 + 248) = a1 + 264;
    *(_QWORD *)(a1 + 256) = 0x600000000;
    if (v19 == &v73)
      goto LABEL_24;
    v21 = v74;
    if (!(_DWORD)v74)
      goto LABEL_24;
    if (v73 != v75)
    {
      *(_QWORD *)(a1 + 248) = v73;
      *(_DWORD *)(a1 + 256) = v21;
      *(_DWORD *)(a1 + 260) = HIDWORD(v74);
      v73 = v75;
      HIDWORD(v74) = 0;
      goto LABEL_23;
    }
    if (v74 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v74, 8);
      v23 = v74;
      if (!(_DWORD)v74)
        goto LABEL_22;
      v22 = v73;
      v20 = *v19;
    }
    else
    {
      v22 = v75;
      v23 = v74;
    }
    memcpy(v20, v22, 8 * v23);
LABEL_22:
    *(_DWORD *)(a1 + 256) = v21;
    v18 = v76;
LABEL_23:
    LODWORD(v74) = 0;
LABEL_24:
    *(_DWORD *)(a1 + 312) = v18;
    *(_BYTE *)(a1 + 320) = 1;
    goto LABEL_25;
  }
  if (v19 != &v73)
  {
    v65 = v73;
    if (v73 != v75)
    {
      v71 = *(void **)(a1 + 248);
      if (v71 != (void *)(a1 + 264))
      {
        free(v71);
        v65 = v73;
      }
      *(_QWORD *)(a1 + 248) = v65;
      *(_QWORD *)(a1 + 256) = v74;
      v73 = v75;
      HIDWORD(v74) = 0;
      goto LABEL_112;
    }
    v66 = v74;
    v67 = *(unsigned int *)(a1 + 256);
    if (v67 >= v74)
    {
      if ((_DWORD)v74)
        memmove(*v19, v75, 8 * v74);
LABEL_111:
      *(_DWORD *)(a1 + 256) = v66;
LABEL_112:
      LODWORD(v74) = 0;
      v18 = v76;
      goto LABEL_113;
    }
    if (*(_DWORD *)(a1 + 260) < v74)
    {
      *(_DWORD *)(a1 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v66, 8);
    }
    else if ((_DWORD)v67)
    {
      memmove(*v19, v75, 8 * v67);
LABEL_129:
      if (v67 != v74)
        memcpy((char *)*v19 + 8 * v67, (char *)v73 + 8 * v67, 8 * v74 - 8 * v67);
      goto LABEL_111;
    }
    v67 = 0;
    goto LABEL_129;
  }
LABEL_113:
  *(_DWORD *)(a1 + 312) = v18;
LABEL_25:
  if (v73 != v75)
    free(v73);
  v24 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v73 = v75;
  v74 = 0x600000000;
  sub_1C4765AA4((char *)&v73, (v24 + 63) >> 6, 0);
  v76 = v24;
  v25 = (void **)(a1 + 168);
  if (*(_BYTE *)(a1 + 240))
  {
    if (v25 == &v73)
    {
LABEL_121:
      *(_DWORD *)(a1 + 232) = v24;
      goto LABEL_37;
    }
    v68 = v73;
    if (v73 != v75)
    {
      v72 = *(void **)(a1 + 168);
      if (v72 != (void *)(a1 + 184))
      {
        free(v72);
        v68 = v73;
      }
      *(_QWORD *)(a1 + 168) = v68;
      *(_QWORD *)(a1 + 176) = v74;
      v73 = v75;
      HIDWORD(v74) = 0;
      goto LABEL_120;
    }
    v69 = v74;
    v70 = *(unsigned int *)(a1 + 176);
    if (v70 >= v74)
    {
      if ((_DWORD)v74)
        memmove(*v25, v75, 8 * v74);
LABEL_119:
      *(_DWORD *)(a1 + 176) = v69;
LABEL_120:
      LODWORD(v74) = 0;
      v24 = v76;
      goto LABEL_121;
    }
    if (*(_DWORD *)(a1 + 180) < v74)
    {
      *(_DWORD *)(a1 + 176) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 168, a1 + 184, v69, 8);
    }
    else if ((_DWORD)v70)
    {
      memmove(*v25, v75, 8 * v70);
LABEL_134:
      if (v70 != v74)
        memcpy((char *)*v25 + 8 * v70, (char *)v73 + 8 * v70, 8 * v74 - 8 * v70);
      goto LABEL_119;
    }
    v70 = 0;
    goto LABEL_134;
  }
  v26 = (void *)(a1 + 184);
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x600000000;
  if (v25 == &v73)
    goto LABEL_36;
  v27 = v74;
  if (!(_DWORD)v74)
    goto LABEL_36;
  if (v73 != v75)
  {
    *(_QWORD *)(a1 + 168) = v73;
    v64 = HIDWORD(v74);
    *(_DWORD *)(a1 + 176) = v27;
    *(_DWORD *)(a1 + 180) = v64;
    v73 = v75;
    HIDWORD(v74) = 0;
    goto LABEL_35;
  }
  if (v74 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 168, a1 + 184, v74, 8);
    v29 = v74;
    if (!(_DWORD)v74)
      goto LABEL_34;
    v28 = v73;
    v26 = *v25;
  }
  else
  {
    v28 = v75;
    v29 = v74;
  }
  memcpy(v26, v28, 8 * v29);
LABEL_34:
  *(_DWORD *)(a1 + 176) = v27;
  v24 = v76;
LABEL_35:
  LODWORD(v74) = 0;
LABEL_36:
  *(_DWORD *)(a1 + 232) = v24;
  *(_BYTE *)(a1 + 240) = 1;
LABEL_37:
  if (v73 != v75)
    free(v73);
  v30 = *(_QWORD *)(a1 + 872);
  v32 = *(_QWORD *)(v30 + 48);
  v31 = v30 + 48;
  v33 = v32 & 0xFFFFFFFFFFFFFFF8;
  if ((v32 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v33 & 4) == 0)
  {
    while ((*(_WORD *)(v33 + 44) & 4) != 0)
      v33 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
  }
  while (v33 != v31)
  {
    if (**(unsigned __int16 **)(v33 + 16) - 13 >= 5)
    {
      if ((_DWORD)v84)
        bzero(v83, 8 * v84);
      if ((_DWORD)v79)
        bzero(v78, 8 * v79);
      sub_1C4A9692C(v33, (llvm::LiveRegUnits *)&v77, &v82, v3);
      LODWORD(v34) = *(_DWORD *)(a1 + 256);
      if (v79 >= v34)
        v34 = v34;
      else
        v34 = v79;
      if ((_DWORD)v34)
      {
        v35 = (uint64_t *)v78;
        v36 = *v19;
        do
        {
          v37 = *v35++;
          *v36++ &= ~v37;
          --v34;
        }
        while (v34);
      }
      v38 = v81;
      if (*(_DWORD *)(a1 + 232) < v81)
      {
        v39 = *(_DWORD *)(a1 + 232) & 0x3F;
        v40 = *(unsigned int *)(a1 + 176);
        if (v39)
        {
          v62 = *(_QWORD *)(a1 + 168) + 8 * v40;
          *(_QWORD *)(v62 - 8) &= ~(-1 << v39);
        }
        v41 = v40;
        *(_DWORD *)(a1 + 232) = v38;
        v42 = v38 + 63;
        if ((_DWORD)v40 != (v38 + 63) >> 6)
        {
          v43 = v42 >> 6;
          if (v40 > v43)
          {
            *(_DWORD *)(a1 + 176) = v43;
            v41 = v42 >> 6;
          }
          else
          {
            v44 = v40;
            if (v43 > *(_DWORD *)(a1 + 180))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 168, a1 + 184, v43, 8);
              v44 = *(unsigned int *)(a1 + 176);
              v41 = *(_DWORD *)(a1 + 176);
            }
            if (v43 != v40)
              bzero((char *)*v25 + 8 * v44, 8 * (v43 - v40));
            v41 += v43 - v40;
            *(_DWORD *)(a1 + 176) = v41;
            v38 = *(_DWORD *)(a1 + 232);
          }
        }
        v45 = v38 & 0x3F;
        if (v45)
          *((_QWORD *)*v25 + v41 - 1) &= ~(-1 << v45);
      }
      v46 = v79;
      if ((_DWORD)v79)
      {
        v47 = (uint64_t *)v78;
        v48 = *v25;
        do
        {
          v49 = *v47++;
          *v48++ |= v49;
          --v46;
        }
        while (v46);
      }
      v50 = v86;
      if (*(_DWORD *)(a1 + 312) < v86)
      {
        v51 = *(_DWORD *)(a1 + 312) & 0x3F;
        v52 = *(unsigned int *)(a1 + 256);
        if (v51)
        {
          v63 = *(_QWORD *)(a1 + 248) + 8 * v52;
          *(_QWORD *)(v63 - 8) &= ~(-1 << v51);
        }
        v53 = v52;
        *(_DWORD *)(a1 + 312) = v50;
        v54 = v50 + 63;
        if ((_DWORD)v52 != (v50 + 63) >> 6)
        {
          v55 = v54 >> 6;
          if (v52 > v55)
          {
            *(_DWORD *)(a1 + 256) = v55;
            v53 = v54 >> 6;
          }
          else
          {
            v56 = v52;
            if (v55 > *(_DWORD *)(a1 + 260))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v55, 8);
              v56 = *(unsigned int *)(a1 + 256);
              v53 = *(_DWORD *)(a1 + 256);
            }
            if (v55 != v52)
              bzero((char *)*v19 + 8 * v56, 8 * (v55 - v52));
            v53 += v55 - v52;
            *(_DWORD *)(a1 + 256) = v53;
            v50 = *(_DWORD *)(a1 + 312);
          }
        }
        v57 = v50 & 0x3F;
        if (v57)
          *((_QWORD *)*v19 + v53 - 1) &= ~(-1 << v57);
      }
      v58 = v84;
      if ((_DWORD)v84)
      {
        v59 = (uint64_t *)v83;
        v60 = *v19;
        do
        {
          v61 = *v59++;
          *v60++ |= v61;
          --v58;
        }
        while (v58);
      }
    }
    v33 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
    if (!v33 || (*(_BYTE *)v33 & 4) == 0)
    {
      while ((*(_WORD *)(v33 + 44) & 4) != 0)
        v33 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v78 != v80)
    free(v78);
  if (v83 != v85)
    free(v83);
}

void sub_1C4A9F084(const llvm::MachineBasicBlock *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD **v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[48];
  unsigned int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD **)*((_QWORD *)a1 + 4);
  if ((*((_WORD *)*v6 + 9) & 0x3F70) == 0 || (*((_WORD *)*v6 + 9) & 0x3FF0) == 0xFF0)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v6[2] + 176))(v6[2]);
    v33 = 0x600000000;
    v31 = v7;
    v32 = v34;
    v8 = *(_DWORD *)(v7 + 44);
    v35 = v8;
    v9 = v8 + 63;
    if (v8 + 63 < 0x40)
    {
      v14 = 0;
      v13 = v34;
    }
    else
    {
      v10 = v9 >> 6;
      if (v9 >= 0x1C0)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v9 >> 6, 8);
        v13 = v32;
        v11 = v33;
        LOBYTE(v8) = v35;
        v12 = v33;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v34;
      }
      bzero(&v13[8 * v11], 8 * v10);
      v14 = (v12 + v10);
      LODWORD(v33) = v12 + v10;
    }
    if ((v8 & 0x3F) != 0)
      *(_QWORD *)&v13[8 * v14 - 8] &= ~(-1 << (v8 & 0x3F));
    llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v31, a1);
    if (a2[16] < v35)
      sub_1C4833580(a2, v35, 0);
    v15 = v33;
    if ((_DWORD)v33)
    {
      v16 = (uint64_t *)v32;
      v17 = *(_QWORD **)a2;
      do
      {
        v18 = *v16++;
        *v17++ |= v18;
        --v15;
      }
      while (v15);
    }
    if (sub_1C498FBAC((uint64_t)a1))
    {
      v19 = *(_DWORD *)(a3 + 64);
      if (a2[16] < v19)
      {
        v24 = a2[16] & 0x3F;
        v25 = a2[2];
        if (v24)
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v25 - 8) &= ~(-1 << v24);
        v26 = v25;
        a2[16] = v19;
        v27 = v19 + 63;
        if ((_DWORD)v25 != (v19 + 63) >> 6)
        {
          v28 = v27 >> 6;
          if (v25 > v28)
          {
            a2[2] = v28;
            v26 = v27 >> 6;
          }
          else
          {
            v29 = v25;
            if (v28 > a2[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v28, 8);
              v29 = a2[2];
              v26 = a2[2];
            }
            if (v28 != v25)
              bzero((void *)(*(_QWORD *)a2 + 8 * v29), 8 * (v28 - v25));
            v26 += v28 - v25;
            a2[2] = v26;
            v19 = a2[16];
          }
        }
        v30 = v19 & 0x3F;
        if (v30)
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v26 - 8) &= ~(-1 << v30);
      }
      v20 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v20)
      {
        v21 = *(uint64_t **)a3;
        v22 = *(_QWORD **)a2;
        do
        {
          v23 = *v21++;
          *v22++ |= v23;
          --v20;
        }
        while (v20);
      }
    }
    if (v32 != v34)
      free(v32);
  }
}

uint64_t sub_1C4A9F360(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 888 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 888 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C4A9F3F8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_1C4A9F4AC(a1, a2, a3);
  if ((_QWORD *)(a1 + 40 * a2) != result)
  {
    v8 = *((unsigned int *)result + 4);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)result[1];
      v10 = *(_DWORD *)(a4 + 8);
      v11 = 8 * v8;
      do
      {
        v12 = *v9;
        if (v10 >= *(_DWORD *)(a4 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v10 + 1, 8);
          v10 = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v12;
        v10 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v10;
        ++v9;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t *sub_1C4A9F4AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 40 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 40 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 40 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 40 * a2);
  }
  return v5;
}

uint64_t *sub_1C4A9F510(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return (uint64_t *)(a1 + 880 * a2);
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = (uint64_t *)(a1 + 880 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = (uint64_t *)(a1 + 880 * (v8 & v3));
      v6 = *v5;
      if (*v5 == a3)
        return v5;
    }
    return (uint64_t *)(a1 + 880 * a2);
  }
  return v5;
}

uint64_t sub_1C4A9F574(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C4A9F624(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _DWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4A9F798(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = (37 * *a3) & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -2;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_DWORD *)(v11 + 4 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4A9F798(a1, v8);
      v20 = 0;
      sub_1C4A9F574(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

_QWORD *sub_1C4A9F798(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A9F8FC((_QWORD *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 24; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFD)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A9F8FC((_QWORD *)a1, v14, v8);
}

_QWORD *sub_1C4A9F8FC(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = result;
  v6 = *(_DWORD *)result;
  *result = *(_DWORD *)result & 1;
  v7 = (char *)(result + 1);
  if ((v6 & 1) != 0)
  {
    v10 = 16;
    v9 = result + 1;
  }
  else
  {
    v8 = *((unsigned int *)result + 4);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (void *)result[1];
    v10 = 4 * v8;
  }
  result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)v5 & 1) != 0)
      {
        v12 = 4;
        v13 = v7;
      }
      else
      {
        v13 = (char *)v5[1];
        v12 = *((_DWORD *)v5 + 4);
      }
      v14 = v12 - 1;
      v15 = (v12 - 1) & (37 * v11);
      v16 = &v13[4 * v15];
      v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        v18 = 0;
        v19 = 1;
        while (v17 != -1)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v17 == -2;
          if (v20)
            v18 = v16;
          v21 = v15 + v19++;
          v15 = v21 & v14;
          v16 = &v13[4 * (v21 & v14)];
          v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16)
            goto LABEL_14;
        }
        if (v18)
          v16 = v18;
      }
LABEL_14:
      *(_DWORD *)v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4A9FA14(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 EarlyBlockPlacement Pass";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "agx3-earlyblock-placement";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6548;
  *(_WORD *)(v2 + 40) = 1;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4A9FB6C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4A9FAAC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F6548) = &off_1E7FAD568;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F6540);
  if (v3 != -1)
  {
    v7[0] = sub_1C4A9FA14;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F6540, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4A9FB6C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4A9FAAC(v0);
}

void sub_1C4A9FB94(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4A9FC28(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4A9FCB4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4A9FD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  llvm::TargetInstrInfo *v8;
  uint64_t i;
  uint64_t j;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  int v23;
  BOOL v24;
  uint64_t v26;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  char *v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  int k;
  int v61;
  int v62;
  int v63;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  llvm::MachineFunction *v74;
  unint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned __int8 *v100[4];
  void *v101;
  uint64_t v102;
  _BYTE v103[128];
  char v104[8];
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  char *v113[2];
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _DWORD v117[14];
  void **v118;
  void *v119;
  uint64_t v120;
  _BYTE v121[64];
  uint64_t v122;
  _QWORD *v123;
  unsigned int v124;
  uint64_t v125[65];
  char *v126;
  uint64_t v127;
  _QWORD v128[194];

  v0 = MEMORY[0x1E0C80A78]();
  v128[192] = *MEMORY[0x1E0C80C00];
  if (!byte_1EF8EF998)
    return 0;
  v2 = v1;
  v3 = (uint64_t *)(v1 + 320);
  v4 = *(_QWORD *)(v1 + 328);
  if (v4 == v1 + 320 || *(uint64_t **)(v4 + 8) == v3)
    return 0;
  v5 = **(void ****)(v0 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineLoopInfo::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineLoopInfo::ID);
  v8 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
  v119 = v121;
  v120 = 0x1000000000;
  v122 = 1;
  for (i = 88; i != 344; i += 16)
    *(void **)((char *)&v119 + i) = (void *)-4096;
  v125[0] = 1;
  for (j = 352; j != 864; j += 32)
    *(void **)((char *)&v119 + j) = (void *)-4096;
  v126 = (char *)v128;
  v127 = 0x2000000000;
  sub_1C4AA068C((uint64_t)&v119, v2, v7);
  v113[0] = (char *)&v114;
  v113[1] = (char *)0x2000000000;
  v115 = v117;
  v116 = 0x600000000;
  v117[12] = 0;
  v118 = &v119;
  sub_1C4AA2680((uint64_t)v113);
  llvm::FlowAnalyzer::FlowAnalyzer((uint64_t)v104, (uint64_t *)v113, (uint64_t)&v119, v7, (uint64_t)&off_1EF8EB0E0, v8);
  v11 = 0;
  v101 = v103;
  v102 = 0x2000000000;
  v12 = (uint64_t *)((char *)v119 + 4);
  v13 = *(_DWORD *)v119;
  v14 = v109;
  if (v120 <= 1)
    v12 = &v127;
  v15 = *(_DWORD *)v12;
  if (*(_DWORD *)v12 != v13)
  {
    v11 = 0;
    do
    {
      v69 = v14[--v15];
      if (v11 >= HIDWORD(v102))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v11 + 1, 4);
        v11 = v102;
      }
      *((_DWORD *)v101 + v11) = v69;
      v11 = v102 + 1;
      LODWORD(v102) = v102 + 1;
    }
    while (v13 != v15);
  }
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v16 = *(_QWORD *)(v2 + 328);
  v90 = v2;
  if ((uint64_t *)v16 != v3)
  {
    v91 = v3;
    while (1)
    {
      v17 = *(uint64_t **)(v16 + 88);
      v18 = *(uint64_t **)(v16 + 96);
      if (v17 == v18)
        goto LABEL_48;
      do
      {
        v19 = *v17;
        if (*(_QWORD *)(v16 + 8) != *v17)
          goto LABEL_47;
        v20 = *(_QWORD *)(v16 + 56);
        if (v16 + 48 == v20)
          goto LABEL_44;
        v21 = v16 + 48;
        while (1)
        {
          v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
          if (!v21 || (*(_BYTE *)v21 & 4) == 0)
          {
            while ((*(_WORD *)(v21 + 44) & 4) != 0)
              v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
          }
          v22 = *(unsigned __int16 **)(v21 + 16);
          v23 = *v22;
          v24 = (v23 - 9) > 0x3C || ((1 << (v23 - 9)) & 0x1000000000000605) == 0;
          if (v24 && v23 != 0)
          {
            v26 = *((_QWORD *)v22 + 1);
            if ((v26 & 0x10) == 0)
              break;
          }
LABEL_38:
          if (v21 == v20)
            goto LABEL_44;
        }
        if ((*(_WORD *)(v21 + 44) & 0xC) == 0 || (*(_WORD *)(v21 + 44) & 4) != 0)
        {
          if ((v26 & 0x200) == 0)
            goto LABEL_44;
LABEL_37:
          if (*(_QWORD *)(((uint64_t (*)(uint64_t, uint64_t))off_1EF8EB0E0[5])((uint64_t)&off_1EF8EB0E0, v21)
                         + 16) == v19)
            goto LABEL_47;
          goto LABEL_38;
        }
        v28 = v21;
        if ((v26 & 0x200) != 0)
          goto LABEL_37;
        while ((*(_WORD *)(v28 + 44) & 8) != 0)
        {
          v28 = *(_QWORD *)(v28 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v28 + 16) + 9) & 2) != 0)
            goto LABEL_37;
        }
LABEL_44:
        v100[0] = (unsigned __int8 *)v16;
        v92[0] = 0;
        v29 = sub_1C4926528((uint64_t)&v97, v100, v92);
        v30 = v92[0];
        if ((v29 & 1) == 0)
        {
          v30 = sub_1C4AA2FF4(&v97, (uint64_t)v100, v100, v92[0]);
          *v30 = v100[0];
          v30[1] = 0;
        }
        v30[1] = v19;
LABEL_47:
        ++v17;
      }
      while (v17 != v18);
LABEL_48:
      v16 = *(_QWORD *)(v16 + 8);
      v3 = v91;
      if ((uint64_t *)v16 == v91)
      {
        v11 = v102;
        v2 = v90;
        break;
      }
    }
  }
  if (v11)
  {
    while (1)
    {
      v31 = *((_DWORD *)v101 + --v11);
      LODWORD(v102) = v11;
      v32 = &v126[48 * v31];
      v33 = v32[8];
      v34 = (uint64_t *)*((_QWORD *)v32 + 2);
      if ((v33 & 0x10) != 0)
        break;
      v35 = (uint64_t *)v34[1];
      if (v3 != v34 && v35 != v3 && v35 != v34)
      {
        v38 = *v35;
        v39 = *v34;
        *(_QWORD *)(v39 + 8) = v35;
        *v35 = v39;
        v40 = *v3;
        *(_QWORD *)(v38 + 8) = v3;
        *v34 = v40;
        *(_QWORD *)(v40 + 8) = v34;
        *v3 = v38;
      }
LABEL_77:
      if (!v11)
        goto LABEL_92;
    }
    v41 = *(_DWORD *)(v7 + 264);
    if (!v41)
      goto LABEL_69;
    v42 = *(_QWORD *)(v7 + 248);
    v43 = v41 - 1;
    v44 = (v41 - 1) & ((v34 >> 4) ^ (v34 >> 9));
    v45 = *(uint64_t **)(v42 + 16 * v44);
    if (v34 != v45)
    {
      v46 = 1;
      while (v45 != (uint64_t *)-4096)
      {
        v47 = v44 + v46++;
        v44 = v47 & v43;
        v45 = *(uint64_t **)(v42 + 16 * v44);
        if (v34 == v45)
          goto LABEL_65;
      }
      goto LABEL_69;
    }
LABEL_65:
    v48 = *(_QWORD *)(v42 + 16 * v44 + 8);
    if (!v48)
    {
LABEL_69:
      v52 = 0;
      goto LABEL_73;
    }
    if ((v122 & 1) != 0)
    {
      v50 = 16;
      v49 = &v123;
    }
    else
    {
      v49 = v123;
      v50 = v124;
      if (!v124)
      {
        v51 = 0;
        goto LABEL_90;
      }
    }
    v53 = v50 - 1;
    LODWORD(v54) = (v50 - 1) & ((v48 >> 4) ^ (v48 >> 9));
    v55 = &v49[2 * v54];
    v56 = *v55;
    if (*v55 == v48)
    {
LABEL_72:
      v52 = *((_DWORD *)v55 + 2);
LABEL_73:
      v57 = *((_DWORD *)v119 + v52);
      v58 = v52 + 1;
      if (v58 >= v120)
        v59 = &v127;
      else
        v59 = (uint64_t *)((char *)v119 + 4 * v58);
      for (k = *(_DWORD *)v59; v57 != k; LODWORD(v102) = v102 + 1)
      {
        v61 = v14[--k];
        if (v11 >= HIDWORD(v102))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v11 + 1, 4);
          v11 = v102;
        }
        *((_DWORD *)v101 + v11) = v61;
        v11 = v102 + 1;
      }
      goto LABEL_77;
    }
    v62 = 1;
    while (v56 != -4096)
    {
      v63 = v54 + v62++;
      v54 = v63 & v53;
      v56 = v49[2 * v54];
      if (v56 == v48)
      {
        v55 = &v49[2 * v54];
        goto LABEL_72;
      }
    }
    if ((v122 & 1) != 0)
    {
      v49 = &v123;
      v51 = 16;
    }
    else
    {
      v49 = v123;
      v51 = v124;
    }
LABEL_90:
    v55 = &v49[2 * v51];
    goto LABEL_72;
  }
LABEL_92:
  v65 = v97;
  v66 = &v97[2 * v99];
  if ((_DWORD)v98)
  {
    if (v99)
    {
      v67 = 16 * v99;
      v68 = v97;
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 2;
        v67 -= 16;
        if (!v67)
          goto LABEL_97;
      }
    }
    else
    {
      v68 = v97;
    }
  }
  else
  {
LABEL_97:
    v68 = &v97[2 * v99];
  }
  v70 = &v97[2 * v99];
  if (v68 != v70)
  {
    do
    {
      v71 = *v68;
      v72 = (unsigned __int8 *)v68[1];
      if (*(unsigned __int8 **)(*v68 + 8) != v72)
      {
        v93 = 0u;
        v94 = 0u;
        v95 = 0u;
        v96 = 0;
        v92[0] = &off_1E816EC08;
        v92[1] = (_QWORD *)v2;
        *((_QWORD *)&v93 + 1) = *(_QWORD *)(v2 + 40);
        *(_QWORD *)&v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
        v100[0] = 0;
        if ((_QWORD)v94)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v94, (unsigned __int8 *)v94);
          *(unsigned __int8 **)&v94 = v100[0];
          if (v100[0])
            llvm::MetadataTracking::retrack((uint64_t)v100, v100[0], (uint64_t)&v94);
        }
        else
        {
          *(_QWORD *)&v94 = 0;
        }
        *((_QWORD *)&v94 + 1) = v71;
        v95 = (unint64_t)(v71 + 48);
        v74 = sub_1C55437B8(v92, 0x12Fu);
        v75 = (unint64_t *)v73;
        v76 = (unint64_t *)v95;
        v77 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 40);
        *(_QWORD *)(v73 + 24) = v77;
        v78 = *(_QWORD *)(v77 + 32);
        v79 = *(unsigned int *)(v73 + 40);
        if ((_DWORD)v79)
        {
          v83 = *(_QWORD *)(v73 + 32);
          v84 = *(_QWORD *)(v78 + 40);
          v85 = 32 * v79;
          do
          {
            if (!*(_BYTE *)v83)
            {
              v86 = *(unsigned int *)(v83 + 4);
              if ((int)v86 >= 0)
                v87 = (uint64_t *)(*(_QWORD *)(v84 + 272) + 8 * v86);
              else
                v87 = (uint64_t *)(*(_QWORD *)(v84 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
              v88 = *v87;
              if (*v87)
              {
                v89 = *(_QWORD *)(v88 + 16);
                *(_QWORD *)(v88 + 16) = v83;
                *(_QWORD *)(v83 + 16) = v89;
                if ((*(_BYTE *)(v83 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v83 + 24) = v88;
                }
                else
                {
                  *(_QWORD *)(v83 + 24) = 0;
                  v87 = (uint64_t *)(v89 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v83 + 16) = v83;
                *(_QWORD *)(v83 + 24) = 0;
              }
              *v87 = v83;
            }
            v83 += 32;
            v85 -= 32;
          }
          while (v85);
        }
        v80 = *(_QWORD *)(v78 + 728);
        if (v80)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 24))(v80, v73);
        v81 = *v76 & 0xFFFFFFFFFFFFFFF8;
        *v75 = v81 | *v75 & 7;
        v75[1] = (unint64_t)v76;
        *(_QWORD *)(v81 + 8) = v75;
        *v76 = *v76 & 7 | (unint64_t)v75;
        if (*((_QWORD *)&v95 + 1))
          (*(void (**)(_QWORD, unint64_t *))(**((_QWORD **)&v95 + 1) + 24))(*((_QWORD *)&v95 + 1), v75);
        v100[1] = 0;
        v100[2] = v72;
        LODWORD(v100[0]) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v74, (const llvm::MachineOperand *)v100);
        v92[0] = &off_1E816EC08;
        if ((_QWORD)v94)
          llvm::MetadataTracking::untrack((uint64_t)&v94, (unsigned __int8 *)v94);
        v2 = v90;
      }
      v82 = v68 + 2;
      v68 = v66;
      if (v82 != v66)
      {
        v68 = v82;
        while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v68 += 2;
          if (v68 == v66)
          {
            v68 = v66;
            break;
          }
        }
      }
    }
    while (v68 != v70);
    v65 = v97;
  }
  MEMORY[0x1CAA32FB4](v65, 8);
  if (v101 != v103)
    free(v101);
  if (v111 != &v112)
    free(v111);
  if (v109 != &v110)
    free(v109);
  if (v107 != &v108)
    free(v107);
  if (v105 != &v106)
    free(v105);
  if (v115 != v117)
    free(v115);
  sub_1C4AA315C(v113);
  sub_1C4AA31F0(&v126);
  sub_1C4AA326C((uint64_t)v125);
  if ((v122 & 1) == 0)
    MEMORY[0x1CAA32FB4](v123, 8);
  if (v119 != v121)
    free(v119);
  return 1;
}

void sub_1C4AA068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  int v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unsigned int v58;
  uint64_t *v59;
  void **v60;
  _QWORD **v61;
  unint64_t v62;
  int v63;
  _QWORD **v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  _QWORD **v75;
  _QWORD **v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _BOOL4 v86;
  BOOL v87;
  int v88;
  uint64_t v89;
  char *v90;
  char v91;
  char v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  BOOL v101;
  int v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  const void **v111;
  const void *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t *v168;
  char v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  unsigned int *v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  uint64_t v193;
  _QWORD *i;
  unsigned int v195;
  _DWORD *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t v202;
  BOOL v203;
  _DWORD *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  unsigned int *v215;
  uint64_t *v216;
  uint64_t *v217;
  unsigned int *v218;
  uint64_t v219;
  _BYTE *v220;
  int v221;
  uint64_t *v222;
  _BYTE *v223;
  uint64_t v224;
  _QWORD **v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD **v235;
  _QWORD *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  _BYTE v240[40];
  char **v241;
  uint64_t v242;
  char *v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD v246[4];

  v246[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 4);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v219 = a3;
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = 0;
  ++*(_DWORD *)(a1 + 8);
  v7 = (char *)(a2 + 320);
  v8 = *(char **)(a2 + 328);
  if (v8 != (char *)(a2 + 320))
  {
    v9 = 0;
    v10 = (_BYTE *)(a1 + 344);
    while (1)
    {
      v11 = *(_DWORD *)(v219 + 264);
      v12 = v8 >> 4;
      if (!v11)
        goto LABEL_26;
      v13 = *(_QWORD *)(v219 + 248);
      v14 = v12 ^ (v8 >> 9);
      v15 = v11 - 1;
      v16 = (v11 - 1) & v14;
      v17 = *(char **)(v13 + 16 * v16);
      if (v8 != v17)
        break;
LABEL_10:
      v20 = *(_QWORD *)(v13 + 16 * v16 + 8);
      if (!v20)
        goto LABEL_26;
      if (!*(_QWORD *)v20 && **(char ***)(v20 + 32) == v8)
      {
        v241 = (char **)v8;
        if ((*v10 & 1) != 0)
        {
          v22 = v9;
          v21 = 16;
          v23 = a1 + 352;
LABEL_16:
          v24 = v21 - 1;
          v25 = v24 & v14;
          v26 = (_QWORD *)(v23 + 32 * v25);
          v27 = (_QWORD *)*v26;
          if (v8 != (char *)*v26)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != (_QWORD *)-4096)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == (_QWORD *)-8192;
              if (v30)
                v28 = v26;
              v31 = v25 + v29++;
              v25 = v31 & v24;
              v26 = (_QWORD *)(v23 + 32 * v25);
              v27 = (_QWORD *)*v26;
              if (v8 == (char *)*v26)
                goto LABEL_57;
            }
            if (v28)
              v51 = v28;
            else
              v51 = v26;
            goto LABEL_56;
          }
        }
        else
        {
          v21 = *(_DWORD *)(a1 + 360);
          if (v21)
          {
            v22 = v9;
            v23 = *(_QWORD *)(a1 + 352);
            goto LABEL_16;
          }
          v22 = v9;
          v51 = 0;
LABEL_56:
          v26 = sub_1C4AA182C(a1 + 344, (uint64_t)&v241, &v241, v51);
          *v26 = v241;
          v26[1] = v26 + 3;
          v26[2] = 0x200000000;
        }
LABEL_57:
        v52 = *((unsigned int *)v26 + 4);
        if (v52 >= *((unsigned int *)v26 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v26 + 1), (uint64_t)(v26 + 3), v52 + 1, 4);
          v52 = *((unsigned int *)v26 + 4);
        }
        *(_DWORD *)(v26[1] + 4 * v52) = v22;
        ++*((_DWORD *)v26 + 4);
        v241 = (char **)a1;
        LOBYTE(v242) = 16;
LABEL_46:
        v243 = v8;
        v244 = v246;
        v245 = 0x200000000;
        v45 = sub_1C4AA1F40(a1 + 864, (unint64_t)&v241, 1);
        v46 = *(_QWORD *)(a1 + 864) + 48 * *(unsigned int *)(a1 + 872);
        v47 = *(_OWORD *)v45;
        *(_QWORD *)(v46 + 16) = *(_QWORD *)(v45 + 16);
        *(_OWORD *)v46 = v47;
        v48 = (void *)(v46 + 40);
        *(_QWORD *)(v46 + 32) = 0x200000000;
        *(_QWORD *)(v46 + 24) = v46 + 40;
        v49 = v46 + 24;
        v50 = *(unsigned int *)(v45 + 32);
        if ((_DWORD)v50 && v49 != v45 + 24)
        {
          v53 = *(const void **)(v45 + 24);
          if (v53 == (const void *)(v45 + 40))
          {
            if (v50 < 3)
            {
              v54 = *(unsigned int *)(v45 + 32);
              goto LABEL_65;
            }
            *(_DWORD *)(v49 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v49, v49 + 16, v50, 4);
            v54 = *(unsigned int *)(v45 + 32);
            if ((_DWORD)v54)
            {
              v53 = *(const void **)(v45 + 24);
              v48 = *(void **)v49;
LABEL_65:
              memcpy(v48, v53, 4 * v54);
            }
            *(_DWORD *)(v49 + 8) = v50;
          }
          else
          {
            if (v48 != (void *)(v49 + 16))
            {
              free(v48);
              v53 = *(const void **)(v45 + 24);
              LODWORD(v50) = *(_DWORD *)(v45 + 32);
            }
            *(_QWORD *)v49 = v53;
            *(_DWORD *)(v49 + 8) = v50;
            *(_DWORD *)(v49 + 12) = *(_DWORD *)(v45 + 36);
            *(_QWORD *)(v45 + 24) = v45 + 40;
            *(_DWORD *)(v45 + 36) = 0;
          }
          *(_DWORD *)(v45 + 32) = 0;
        }
        ++*(_DWORD *)(a1 + 872);
        if (v244 != v246)
          free(v244);
        v9 = v22 + 1;
      }
      v8 = (char *)*((_QWORD *)v8 + 1);
      if (v8 == v7)
        goto LABEL_76;
    }
    v18 = 1;
    while (v17 != (char *)-4096)
    {
      v19 = v16 + v18++;
      v16 = v19 & v15;
      v17 = *(char **)(v13 + 16 * v16);
      if (v8 == v17)
        goto LABEL_10;
    }
LABEL_26:
    v241 = (char **)v8;
    if ((*v10 & 1) != 0)
    {
      v22 = v9;
      v32 = 16;
      v33 = a1 + 352;
    }
    else
    {
      v32 = *(_DWORD *)(a1 + 360);
      if (!v32)
      {
        v22 = v9;
        v43 = 0;
        goto LABEL_42;
      }
      v22 = v9;
      v33 = *(_QWORD *)(a1 + 352);
    }
    v34 = v12 ^ (v8 >> 9);
    v35 = v32 - 1;
    v36 = (v32 - 1) & v34;
    v37 = (_QWORD *)(v33 + 32 * v36);
    v38 = *v37;
    if (v8 == (char *)*v37)
    {
LABEL_43:
      v44 = *((unsigned int *)v37 + 4);
      if (v44 >= *((unsigned int *)v37 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 1), (uint64_t)(v37 + 3), v44 + 1, 4);
        v44 = *((unsigned int *)v37 + 4);
      }
      *(_DWORD *)(v37[1] + 4 * v44) = v22;
      ++*((_DWORD *)v37 + 4);
      v241 = (char **)a1;
      LOBYTE(v242) = 1;
      goto LABEL_46;
    }
    v39 = 0;
    v40 = 1;
    while (v38 != -4096)
    {
      if (v39)
        v41 = 0;
      else
        v41 = v38 == -8192;
      if (v41)
        v39 = v37;
      v42 = v36 + v40++;
      v36 = v42 & v35;
      v37 = (_QWORD *)(v33 + 32 * v36);
      v38 = *v37;
      if (v8 == (char *)*v37)
        goto LABEL_43;
    }
    if (v39)
      v43 = v39;
    else
      v43 = v37;
LABEL_42:
    v37 = sub_1C4AA182C(a1 + 344, (uint64_t)&v241, &v241, v43);
    *v37 = v241;
    v37[1] = v37 + 3;
    v37[2] = 0x200000000;
    goto LABEL_43;
  }
  v9 = 0;
LABEL_76:
  v241 = &v243;
  v242 = 0x500000000;
  v55 = v219;
  v56 = *(char **)(v219 + 272);
  v57 = *(char **)(v219 + 280);
  v238 = v240;
  v239 = 0x500000000;
  sub_1C499C3FC((unsigned int *)&v238, v56, v57);
  v58 = v239;
  if (!(_DWORD)v239)
    goto LABEL_162;
  v59 = &v239;
  v223 = (_BYTE *)(a1 + 344);
  v218 = (unsigned int *)&v241;
  v60 = &v238;
  do
  {
    v215 = v218;
    v218 = (unsigned int *)v60;
    v214 = v59;
    do
    {
      v225 = 0;
      v61 = *(_QWORD ***)(*(_QWORD *)v218 + 8 * v58 - 8);
      *(_DWORD *)v59 = v58 - 1;
      v225 = v61;
      v232 = &v234;
      v233 = 0x400000000;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatches(v61, (uint64_t)&v232);
      v62 = *(unsigned int *)(a1 + 8);
      if (v62 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v62 + 1, 4);
        v62 = *(unsigned int *)(a1 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v62) = v9;
      v63 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v63 + 1;
      *((_DWORD *)sub_1C4AA20F4(a1 + 80, &v225) + 2) = v63;
      v64 = v225;
      v66 = v225[4];
      v65 = v225[5];
      if (v65 != v66)
      {
        v222 = v225[5];
        while (1)
        {
          v224 = 0;
          v67 = *v66;
          v224 = *v66;
          v68 = *(_DWORD *)(v55 + 264);
          if (v68)
          {
            v69 = *(_QWORD *)(v55 + 248);
            v70 = v68 - 1;
            v71 = ((v67 >> 4) ^ (v67 >> 9)) & (v68 - 1);
            v72 = *(_QWORD *)(v69 + 16 * v71);
            if (v67 == v72)
            {
LABEL_88:
              v75 = *(_QWORD ***)(v69 + 16 * v71 + 8);
              goto LABEL_90;
            }
            v73 = 1;
            while (v72 != -4096)
            {
              v74 = v71 + v73++;
              v71 = v74 & v70;
              v72 = *(_QWORD *)(v69 + 16 * v71);
              if (v67 == v72)
                goto LABEL_88;
            }
          }
          v75 = 0;
LABEL_90:
          v76 = v225;
          if (v75 == v225)
          {
            v77 = v9;
            v78 = 1;
LABEL_95:
            v79 = *(_QWORD *)(v67 + 88);
            v80 = *(_QWORD *)(v67 + 96);
            if (v79 == v80)
            {
              v86 = 1;
            }
            else
            {
              v81 = v79 + 8;
              do
              {
                v82 = sub_1C477672C((uint64_t)(v76 + 7), *(_QWORD *)(v81 - 8));
                v83 = v76[8];
                if (v83 == v76[7])
                  v84 = 76;
                else
                  v84 = 72;
                v85 = &v83[*(unsigned int *)((char *)v76 + v84)];
                v30 = v82 == v85;
                v86 = v82 != v85;
                v87 = v30 || v81 == v80;
                v81 += 8;
              }
              while (!v87);
              v55 = v219;
            }
            v88 = v77;
            if ((_DWORD)v233)
            {
              v89 = 8 * v233;
              v90 = (char *)v232;
              while (*(_QWORD *)v90 != v224)
              {
                v90 += 8;
                v89 -= 8;
                if (!v89)
                {
                  v90 = (char *)v232 + 8 * v233;
                  break;
                }
              }
            }
            else
            {
              v90 = (char *)v232;
            }
            if (v86)
              v91 = v78;
            else
              v91 = v78 | 2;
            if (v233 == (v90 - (_BYTE *)v232) >> 3)
              v92 = v91;
            else
              v92 = v91 | 8;
            if ((*v223 & 1) != 0)
            {
              v93 = 16;
              v94 = a1 + 352;
LABEL_122:
              v95 = v93 - 1;
              v96 = ((v224 >> 4) ^ (v224 >> 9)) & v95;
              v97 = (_QWORD *)(v94 + 32 * v96);
              v98 = *v97;
              if (v224 != *v97)
              {
                v99 = 0;
                v100 = 1;
                while (v98 != -4096)
                {
                  if (v99)
                    v101 = 0;
                  else
                    v101 = v98 == -8192;
                  if (v101)
                    v99 = v97;
                  v102 = v96 + v100++;
                  v96 = v102 & v95;
                  v97 = (_QWORD *)(v94 + 32 * v96);
                  v98 = *v97;
                  if (v224 == *v97)
                    goto LABEL_136;
                }
                if (v99)
                  v103 = v99;
                else
                  v103 = v97;
                goto LABEL_135;
              }
            }
            else
            {
              v93 = *(_DWORD *)(a1 + 360);
              if (v93)
              {
                v94 = *(_QWORD *)(a1 + 352);
                goto LABEL_122;
              }
              v103 = 0;
LABEL_135:
              v97 = sub_1C4AA182C((uint64_t)v223, (uint64_t)&v224, &v224, v103);
              *v97 = v224;
              v97[1] = v97 + 3;
              v97[2] = 0x200000000;
            }
LABEL_136:
            v104 = *((unsigned int *)v97 + 4);
            if (v104 >= *((unsigned int *)v97 + 5))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v97 + 1), (uint64_t)(v97 + 3), v104 + 1, 4);
              v104 = *((unsigned int *)v97 + 4);
            }
            *(_DWORD *)(v97[1] + 4 * v104) = v77;
            ++*((_DWORD *)v97 + 4);
            v226 = a1;
            v227 = v92;
            v228 = v224;
            v229 = &v231;
            v230 = 0x200000000;
            v105 = sub_1C4AA1F40(a1 + 864, (unint64_t)&v226, 1);
            v106 = *(_QWORD *)(a1 + 864) + 48 * *(unsigned int *)(a1 + 872);
            v107 = *(_OWORD *)v105;
            *(_QWORD *)(v106 + 16) = *(_QWORD *)(v105 + 16);
            *(_OWORD *)v106 = v107;
            v108 = (void *)(v106 + 40);
            *(_QWORD *)(v106 + 32) = 0x200000000;
            *(_QWORD *)(v106 + 24) = v106 + 40;
            v109 = v106 + 24;
            v110 = *(unsigned int *)(v105 + 32);
            if ((_DWORD)v110)
            {
              v111 = (const void **)(v105 + 24);
              if (v109 != v105 + 24)
              {
                v112 = *(const void **)(v105 + 24);
                v210 = v105;
                v113 = v105 + 40;
                if (v112 == (const void *)(v105 + 40))
                {
                  if (v110 < 3)
                  {
                    v114 = *(unsigned int *)(v105 + 32);
                    goto LABEL_149;
                  }
                  *(_DWORD *)(v109 + 8) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v109, v109 + 16, v110, 4);
                  v114 = *(unsigned int *)(v210 + 32);
                  if ((_DWORD)v114)
                  {
                    v112 = *v111;
                    v108 = *(void **)v109;
LABEL_149:
                    memcpy(v108, v112, 4 * v114);
                  }
                  *(_DWORD *)(v109 + 8) = v110;
                }
                else
                {
                  if (v108 != (void *)(v109 + 16))
                  {
                    free(v108);
                    v112 = *(const void **)(v210 + 24);
                    LODWORD(v110) = *(_DWORD *)(v210 + 32);
                  }
                  *(_QWORD *)v109 = v112;
                  *(_DWORD *)(v109 + 8) = v110;
                  *(_DWORD *)(v109 + 12) = *(_DWORD *)(v210 + 36);
                  *(_QWORD *)(v210 + 24) = v113;
                  *(_DWORD *)(v210 + 36) = 0;
                }
                *(_DWORD *)(v210 + 32) = 0;
                v55 = v219;
                v88 = v77;
              }
            }
            ++*(_DWORD *)(a1 + 872);
            if (v229 != &v231)
              free(v229);
            v9 = v88 + 1;
            v65 = v222;
            goto LABEL_142;
          }
          if (*v75 == v225 && *v75[4] == v67)
          {
            v77 = v9;
            v78 = 17;
            goto LABEL_95;
          }
LABEL_142:
          if (++v66 == v65)
          {
            v64 = v225;
            break;
          }
        }
      }
      sub_1C499C3FC(v215, (char *)v64[1], (char *)v64[2]);
      if (v232 != &v234)
        free(v232);
      v59 = v214;
      v58 = *(_DWORD *)v214;
    }
    while (*(_DWORD *)v214);
    v60 = (void **)v215;
    v59 = (uint64_t *)(v215 + 2);
    v58 = v215[2];
  }
  while (v58);
LABEL_162:
  if (v238 != v240)
    free(v238);
  if (v241 != &v243)
    free(v241);
  v115 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v115)
  {
    v116 = 0;
    v117 = (unsigned int *)(a1 + 872);
    v211 = *(unsigned int *)(a1 + 8);
    while (1)
    {
      v118 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v116);
      v119 = v116 + 1;
      v120 = (unsigned int *)(*(_QWORD *)a1 + 4 * (v116 + 1));
      if (v116 + 1 >= *(unsigned int *)(a1 + 8))
        v120 = v117;
      v121 = *v120;
      v238 = v240;
      v239 = 0x800000000;
      if (v118 != v121)
        break;
LABEL_304:
      v116 = v119;
      if (v119 == v115)
        return;
    }
    v122 = -1;
    v123 = v118;
LABEL_172:
    v124 = v122;
    v125 = *(_QWORD *)(a1 + 864);
    v126 = v125 + 48 * v123;
    v128 = *(_BYTE *)(v126 + 8);
    v127 = v126 + 8;
    v129 = (uint64_t *)(v127 + 8);
    v130 = *(_QWORD *)(v127 + 8);
    v221 = v124;
    v220 = (_BYTE *)v127;
    if ((v128 & 0x10) != 0)
    {
      v159 = *(_DWORD *)(v219 + 264);
      v217 = (uint64_t *)(v127 + 8);
      if (!v159)
        goto LABEL_220;
      v160 = *(_QWORD *)(v219 + 248);
      v161 = v159 - 1;
      v162 = (v159 - 1) & ((v130 >> 4) ^ (v130 >> 9));
      v163 = *(_QWORD *)(v160 + 16 * v162);
      if (v130 == v163)
      {
LABEL_219:
        v166 = v123;
        v167 = *(_QWORD **)(v160 + 16 * v162 + 8);
      }
      else
      {
        v164 = 1;
        while (v163 != -4096)
        {
          v165 = v162 + v164++;
          v162 = v165 & v161;
          v163 = *(_QWORD *)(v160 + 16 * v162);
          if (v130 == v163)
            goto LABEL_219;
        }
LABEL_220:
        v166 = v123;
        v167 = 0;
      }
      v232 = &v234;
      v233 = 0x200000000;
      v236 = 0;
      v237 = 0;
      v235 = &v236;
      v241 = &v243;
      v242 = 0x500000000;
      llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(v167, (uint64_t)&v241);
      v168 = (uint64_t *)v241;
      if (!(_DWORD)v242)
      {
        v200 = 0;
        goto LABEL_276;
      }
      v169 = 0;
      v170 = (char *)&v241[v242];
      v171 = v125 + 48 * v166;
      v172 = v171 + 24;
      v213 = v171 + 40;
      v173 = (unsigned int *)(a1 + 872);
      while (1)
      {
        v174 = *v168;
        if (v119 >= *(unsigned int *)(a1 + 8))
          v175 = v173;
        else
          v175 = (unsigned int *)(*(_QWORD *)a1 + 4 * v119);
        v176 = *(_DWORD *)(a1 + 344);
        if ((v176 & 1) != 0)
        {
          v178 = 16;
          v177 = a1 + 352;
        }
        else
        {
          v177 = *(_QWORD *)(a1 + 352);
          v178 = *(_DWORD *)(a1 + 360);
          if (!v178)
          {
            v199 = 0;
            goto LABEL_268;
          }
        }
        v179 = v178 - 1;
        v180 = v177 + 32 * ((v178 - 1) & ((v174 >> 4) ^ (v174 >> 9)));
        v181 = *(_QWORD *)v180;
        if (*(_QWORD *)v180 == v174)
          goto LABEL_233;
        v182 = 1;
        LODWORD(v183) = v179 & ((v174 >> 4) ^ (v174 >> 9));
        do
        {
          if (v181 == -4096)
          {
            if ((v176 & 1) != 0)
            {
              v177 = a1 + 352;
              v199 = 16;
            }
            else
            {
              v177 = *(_QWORD *)(a1 + 352);
              v199 = *(unsigned int *)(a1 + 360);
            }
LABEL_268:
            v180 = v177 + 32 * v199;
            v173 = (unsigned int *)(a1 + 872);
            if ((v176 & 1) == 0)
              goto LABEL_234;
            goto LABEL_269;
          }
          v184 = v183 + v182++;
          v183 = v184 & v179;
          v181 = *(_QWORD *)(v177 + 32 * v183);
        }
        while (v181 != v174);
        v180 = v177 + 32 * v183;
LABEL_233:
        if ((v176 & 1) == 0)
        {
LABEL_234:
          v185 = *(_QWORD *)(a1 + 352);
          v186 = *(unsigned int *)(a1 + 360);
          goto LABEL_235;
        }
LABEL_269:
        v185 = a1 + 352;
        v186 = 16;
LABEL_235:
        if (v185 + 32 * v186 != v180)
        {
          v187 = *(unsigned int *)(v180 + 16);
          if ((_DWORD)v187)
          {
            v188 = *v175;
            v189 = 4 * v187;
            v190 = *(unsigned int **)(v180 + 8);
            while (1)
            {
              v191 = *v190;
              if (*v190 >= *(_DWORD *)(*(_QWORD *)a1 + 4 * v116) && v191 <= v188)
                break;
              ++v190;
              v189 -= 4;
              if (!v189)
                goto LABEL_264;
            }
            LODWORD(v226) = *v190;
            if (v191 != -1)
            {
              v193 = *(_QWORD *)(a1 + 864) + 48 * v191;
              *(_BYTE *)(v193 + 8) |= 4u;
              if (v237)
              {
                for (i = v236; i; i = (_QWORD *)*i)
                {
                  v195 = *((_DWORD *)i + 7);
                  if (v191 >= v195)
                  {
                    if (v195 >= v191)
                      goto LABEL_264;
                    ++i;
                  }
                }
                goto LABEL_259;
              }
              if (!(_DWORD)v233)
                goto LABEL_259;
              v196 = v232;
              v197 = 4 * v233;
              while (*v196 != v191)
              {
                ++v196;
                v197 -= 4;
                if (!v197)
                  goto LABEL_259;
              }
              if (!v197)
              {
LABEL_259:
                if (v191 > v118 && v191 < v121)
                {
                  v198 = *(unsigned int *)(v172 + 8);
                  if (v198 >= *(unsigned int *)(v172 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v172, v213, v198 + 1, 4);
                    v198 = *(unsigned int *)(v172 + 8);
                  }
                  *(_DWORD *)(*(_QWORD *)v172 + 4 * v198) = v191;
                  ++*(_DWORD *)(v172 + 8);
                  sub_1C4778DC4((uint64_t)&v232, (unsigned int *)&v226);
                  v169 = 1;
                  v173 = (unsigned int *)(a1 + 872);
                }
              }
            }
          }
        }
LABEL_264:
        if (++v168 == (uint64_t *)v170)
        {
          v200 = v169;
          v168 = (uint64_t *)v241;
LABEL_276:
          if (v168 != (uint64_t *)&v243)
            free(v168);
          sub_1C47655E8((uint64_t)&v235, v236);
          if (v232 != &v234)
            free(v232);
          v117 = (unsigned int *)(a1 + 872);
          v129 = v217;
          if ((v200 & 1) != 0)
            goto LABEL_286;
LABEL_281:
          v201 = sub_1C498FBAC(*v129);
          v117 = (unsigned int *)(a1 + 872);
          v122 = v123;
          if ((v201 & 1) == 0)
          {
            v122 = v123;
            if ((*v220 & 8) == 0)
            {
              v202 = v239;
              if (v239 >= (unint64_t)HIDWORD(v239))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v238, (uint64_t)v240, v239 + 1, 4);
                v117 = (unsigned int *)(a1 + 872);
                v202 = v239;
              }
              *((_DWORD *)v238 + v202) = v123;
              LODWORD(v239) = v239 + 1;
              goto LABEL_286;
            }
          }
          goto LABEL_287;
        }
      }
    }
    v132 = *(uint64_t **)(v130 + 88);
    v131 = *(uint64_t **)(v130 + 96);
    if (v132 == v131)
      goto LABEL_281;
    v133 = 0;
    v134 = v125 + 48 * v123;
    v135 = v134 + 24;
    v136 = v134 + 40;
LABEL_175:
    v137 = (unsigned int *)(*(_QWORD *)a1 + 4 * v119);
    if (v119 >= *(unsigned int *)(a1 + 8))
      v137 = v117;
    v138 = *v137;
    v139 = *(_DWORD *)(a1 + 344);
    while (1)
    {
      v140 = *v132;
      if ((v139 & 1) != 0)
      {
        v142 = 16;
        v141 = a1 + 352;
      }
      else
      {
        v141 = *(_QWORD *)(a1 + 352);
        v142 = *(_DWORD *)(a1 + 360);
        if (!v142)
        {
          v157 = 0;
          goto LABEL_205;
        }
      }
      v143 = v142 - 1;
      v144 = v141 + 32 * ((v142 - 1) & ((v140 >> 4) ^ (v140 >> 9)));
      v145 = *(_QWORD *)v144;
      if (*(_QWORD *)v144 == v140)
      {
LABEL_185:
        if ((v139 & 1) == 0)
          goto LABEL_186;
        goto LABEL_206;
      }
      v146 = 1;
      LODWORD(v147) = v143 & ((v140 >> 4) ^ (v140 >> 9));
      while (v145 != -4096)
      {
        v148 = v147 + v146++;
        v147 = v148 & v143;
        v145 = *(_QWORD *)(v141 + 32 * v147);
        if (v145 == v140)
        {
          v144 = v141 + 32 * v147;
          goto LABEL_185;
        }
      }
      if ((v139 & 1) != 0)
      {
        v141 = a1 + 352;
        v157 = 16;
      }
      else
      {
        v141 = *(_QWORD *)(a1 + 352);
        v157 = *(unsigned int *)(a1 + 360);
      }
LABEL_205:
      v144 = v141 + 32 * v157;
      v117 = (unsigned int *)(a1 + 872);
      if ((v139 & 1) == 0)
      {
LABEL_186:
        v149 = *(_QWORD *)(a1 + 352);
        v150 = *(unsigned int *)(a1 + 360);
        goto LABEL_187;
      }
LABEL_206:
      v149 = a1 + 352;
      v150 = 16;
LABEL_187:
      if (v149 + 32 * v150 != v144)
      {
        v151 = *(unsigned int *)(v144 + 16);
        if ((_DWORD)v151)
        {
          v152 = *(unsigned int **)(v144 + 8);
          v153 = 4 * v151;
          while (1)
          {
            v154 = *v152;
            if (*v152 >= *(_DWORD *)(*(_QWORD *)a1 + 4 * v116) && v154 <= v138)
              break;
            ++v152;
            v153 -= 4;
            if (!v153)
              goto LABEL_201;
          }
          if (v154 < v121 && v154 > v118)
          {
            v158 = *(unsigned int *)(v135 + 8);
            if (v158 >= *(unsigned int *)(v135 + 12))
            {
              v216 = v129;
              v212 = v136;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v135, v136, v158 + 1, 4);
              v136 = v212;
              v129 = v216;
              v117 = (unsigned int *)(a1 + 872);
              v158 = *(unsigned int *)(v135 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v135 + 4 * v158) = v154;
            ++*(_DWORD *)(v135 + 8);
            ++v132;
            v133 = 1;
            if (v132 != v131)
              goto LABEL_175;
LABEL_286:
            v122 = v221;
LABEL_287:
            if (++v123 == v121)
            {
              v203 = v122 != -1 || v239 == 0;
              v204 = v238;
              if (v203)
                v205 = v122;
              else
                v205 = v121 - 1;
              if ((_DWORD)v239)
              {
                v206 = 4 * v239;
                do
                {
                  if (v205 != *v204)
                  {
                    v207 = *(_QWORD *)(a1 + 864) + 48 * *v204;
                    v208 = v207 + 24;
                    v209 = *(unsigned int *)(v207 + 32);
                    if (v209 >= *(unsigned int *)(v207 + 36))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v207 + 24, v207 + 40, v209 + 1, 4);
                      v117 = (unsigned int *)(a1 + 872);
                      v209 = *(unsigned int *)(v208 + 8);
                    }
                    *(_DWORD *)(*(_QWORD *)v208 + 4 * v209) = v205;
                    ++*(_DWORD *)(v208 + 8);
                  }
                  ++v204;
                  v206 -= 4;
                }
                while (v206);
                v204 = v238;
              }
              v115 = v211;
              if (v204 != (_DWORD *)v240)
              {
                free(v204);
                v117 = (unsigned int *)(a1 + 872);
              }
              goto LABEL_304;
            }
            goto LABEL_172;
          }
        }
      }
LABEL_201:
      if (++v132 == v131)
      {
        if ((v133 & 1) == 0)
          goto LABEL_281;
        goto LABEL_286;
      }
    }
  }
}

uint64_t sub_1C4AA1784(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4AA182C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4AA19A0(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 32 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 32 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4AA19A0(a1, v8);
      v20 = 0;
      sub_1C4AA1784(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

void sub_1C4AA19A0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[65];

  v2 = a2;
  v20[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 0x10)
    {
      *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4AA1C08((int *)a1, v7, &v7[4 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    v13 = v10 + 3;
    v10[1] = (uint64_t)(v10 + 3);
    *v10 = v12;
    v10[2] = 0x200000000;
    v14 = *(unsigned int *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if ((_DWORD)v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        v10[1] = (uint64_t)v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 1), (uint64_t)(v10 + 3), v14, 4);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)v10[1];
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 4 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 4;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 32;
  }
  while (v9 != 512);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C4AA1C08((int *)a1, v20, v10);
}

void sub_1C4AA1C08(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  int v21;
  void *v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = a1 + 130;
    v9 = a1 + 2;
  }
  else
  {
    v8 = a1[4];
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (_QWORD *)*((_QWORD *)a1 + 1);
    v10 = &v9[4 * v8];
  }
  do
  {
    *v9 = -4096;
    v9 += 4;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    while (1)
    {
      v11 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_33:
      v4 += 4;
      if (v4 == a3)
        return;
    }
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
      v12 = v7;
    }
    else
    {
      v12 = (int *)*((_QWORD *)a1 + 1);
      v13 = a1[4];
    }
    v14 = v13 - 1;
    v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
    v16 = (uint64_t *)&v12[8 * v15];
    v17 = *v16;
    if (v11 != *v16)
    {
      v18 = 0;
      v19 = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = (uint64_t *)&v12[8 * v15];
        v17 = *v16;
        if (v11 == *v16)
          goto LABEL_21;
      }
      if (v18)
        v16 = v18;
    }
LABEL_21:
    *v16 = v11;
    v22 = v16 + 3;
    v16[1] = (uint64_t)(v16 + 3);
    v16[2] = 0x200000000;
    v23 = *((unsigned int *)v4 + 4);
    if (v16 == v4 || (_DWORD)v23 == 0)
    {
LABEL_31:
      *a1 += 2;
      v27 = (uint64_t *)v4[1];
      if (v27 != v4 + 3)
        free(v27);
      goto LABEL_33;
    }
    v25 = (uint64_t *)v4[1];
    if (v25 != v4 + 3)
    {
      v16[1] = (uint64_t)v25;
      v28 = *((_DWORD *)v4 + 5);
      *((_DWORD *)v16 + 4) = v23;
      *((_DWORD *)v16 + 5) = v28;
      v4[1] = (uint64_t)(v4 + 3);
      *((_DWORD *)v4 + 5) = 0;
      goto LABEL_30;
    }
    if (v23 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 1), (uint64_t)(v16 + 3), v23, 4);
      v26 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v26)
        goto LABEL_29;
      v25 = (uint64_t *)v4[1];
      v22 = (void *)v16[1];
    }
    else
    {
      v26 = *((unsigned int *)v4 + 4);
    }
    memcpy(v22, v25, 4 * v26);
LABEL_29:
    *((_DWORD *)v16 + 4) = v23;
LABEL_30:
    *((_DWORD *)v4 + 4) = 0;
    goto LABEL_31;
  }
}

uint64_t sub_1C4AA1E04(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 4 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 4);
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 4 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v8), (char *)*a2 + 4 * v8, (_BYTE *)*a2 + 4 * v9 - ((_BYTE *)*a2 + 4 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

unint64_t sub_1C4AA1F40(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C4AA1FA8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C4AA1FA8(a1, v5);
    }
  }
  return a2;
}

void sub_1C4AA1FA8(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v5);
  sub_1C4AA2014((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C4AA2014(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1 + 48 * v2;
    v4 = (_QWORD *)(a2 + 24);
    v5 = *a1 + 24;
    v6 = 0x200000000;
    do
    {
      v7 = *(_OWORD *)(v5 - 24);
      *(v4 - 1) = *(_QWORD *)(v5 - 8);
      *(_OWORD *)(v4 - 3) = v7;
      *v4 = v4 + 2;
      v4[1] = v6;
      if (*(_DWORD *)(v5 + 8))
      {
        v16 = a1;
        v18 = v5;
        v13 = v3;
        v14 = v4;
        v15 = v6;
        sub_1C4AA1E04((uint64_t)v4, (const void **)v5);
        v6 = v15;
        v3 = v13;
        v4 = v14;
        a1 = v16;
        v5 = v18;
      }
      v8 = v5 - 24;
      v4 += 6;
      v5 += 48;
    }
    while (v8 + 48 != v3);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = 48 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 24);
        if ((void *)(v10 + v11 - 8) != v12)
        {
          v17 = v11;
          v19 = v10;
          free(v12);
          v11 = v17;
          v10 = v19;
        }
        v11 -= 48;
      }
      while (v11);
    }
  }
}

_QWORD *sub_1C4AA20F4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v14 = 0;
LABEL_19:
      v7 = sub_1C4AA227C(a1, (uint64_t)a2, a2, v14);
      *v7 = *a2;
      *((_DWORD *)v7 + 2) = -1;
      return v7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 != *v7)
  {
    v10 = 0;
    v11 = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        return v7;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v7;
    goto LABEL_19;
  }
  return v7;
}

uint64_t sub_1C4AA21CC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4AA227C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4AA23F0(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4AA23F0(a1, v8);
      v20 = 0;
      sub_1C4AA21CC(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4AA23F0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4AA2574((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4AA2574((int *)a1, v14, v9);
}

int *sub_1C4AA2574(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 16;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v8[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_11;
        }
        if (v14)
          v12 = v14;
      }
LABEL_11:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C4AA2680(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unsigned int i;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38[2];
  _BYTE v39[128];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  sub_1C4AA29D0(a1, *(unsigned int *)(*(_QWORD *)(a1 + 2136) + 872));
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 2136) + 872);
  v3 = *(unsigned int *)(a1 + 2072);
  if ((*(_DWORD *)(a1 + 2128) & 0x3F) != 0)
  {
    v34 = *(_QWORD *)(a1 + 2064) + 8 * v3;
    *(_QWORD *)(v34 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2128) & 0x3F));
  }
  v4 = v3;
  v5 = (_QWORD *)(a1 + 2064);
  *(_DWORD *)(a1 + 2128) = v2;
  v6 = v2 + 63;
  if ((_DWORD)v3 != (v2 + 63) >> 6)
  {
    v7 = v6 >> 6;
    if (v3 > v7)
    {
      *(_DWORD *)(a1 + 2072) = v7;
      v4 = v6 >> 6;
    }
    else
    {
      v8 = v3;
      if (v7 > *(_DWORD *)(a1 + 2076))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 2064, a1 + 2080, v7, 8);
        v8 = *(unsigned int *)(a1 + 2072);
        v4 = *(_DWORD *)(a1 + 2072);
      }
      if (v7 != v3)
        bzero((void *)(*v5 + 8 * v8), 8 * (v7 - v3));
      v4 += v7 - v3;
      *(_DWORD *)(a1 + 2072) = v4;
      v2 = *(_DWORD *)(a1 + 2128);
    }
  }
  v9 = v2 & 0x3F;
  if (v9)
    *(_QWORD *)(*v5 + 8 * v4 - 8) &= ~(-1 << v9);
  v36 = *(unsigned int *)(*(_QWORD *)(a1 + 2136) + 8);
  if ((_DWORD)v36)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 2136);
      v12 = *(_DWORD *)(*(_QWORD *)v11 + 4 * v10);
      v13 = v10 + 1;
      v14 = (unsigned int *)(*(_QWORD *)v11 + 4 * v13);
      if (v13 >= *(unsigned int *)(v11 + 8))
        v14 = (unsigned int *)(v11 + 872);
      v15 = *v14;
      v37 = v13;
      v38[0] = v39;
      v38[1] = (void *)0x2000000000;
      v40 = -1;
      sub_1C4AA2B98((unsigned int *)v38, v12, v15, v11);
      v16 = v15;
      while (v12 != (_DWORD)v16)
      {
        v17 = v12;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 2136) + 864);
        v19 = *(_QWORD *)a1 + ((unint64_t)v12 << 6);
        *(_QWORD *)v19 = a1;
        *(_DWORD *)(v19 + 32) = v12;
        v20 = v18 + 48 * v12;
        v21 = *(unsigned int *)(v20 + 32);
        if (v21 >= 2)
        {
          v22 = 0;
          v23 = (_QWORD *)(v20 + 24);
          v24 = *((_DWORD *)v38[0] + v12 - v40);
          v25 = v19 + 40;
          do
          {
            for (i = *(_DWORD *)(*v23 + 4 * v22); i != v24 && i != -1; i = *((_DWORD *)v38[0] + i - v40))
            {
              v28 = *(_QWORD *)a1 + ((unint64_t)i << 6);
              v29 = v28 + 8;
              v30 = *(unsigned int *)(v28 + 16);
              if (v30 >= *(unsigned int *)(v28 + 20))
              {
                v35 = v16;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v28 + 8, v28 + 24, v30 + 1, 8);
                v16 = v35;
                v30 = *(unsigned int *)(v29 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = v17 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v22 << 32);
              ++*(_DWORD *)(v29 + 8);
              v31 = *(unsigned int *)(v25 + 8);
              if (v31 >= *(unsigned int *)(v25 + 12))
              {
                v33 = v16;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v25, v25 + 16, v31 + 1, 4);
                v16 = v33;
                v31 = *(unsigned int *)(v25 + 8);
              }
              *(_DWORD *)(*(_QWORD *)v25 + 4 * v31) = i;
              ++*(_DWORD *)(v25 + 8);
            }
            ++v22;
          }
          while (v22 != v21);
        }
        v12 = v17 + 1;
      }
      if (v38[0] != v39)
        free(v38[0]);
      v10 = v37;
    }
    while (v37 != v36);
  }
}

void sub_1C4AA29D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1C6153368(a1, a2);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C4AA2A90(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v5 = *(_QWORD *)a1;
        v6 = v2 << 6;
        v7 = a2 << 6;
        do
        {
          v8 = v5 + v6;
          *(_QWORD *)(v8 + 8) = v5 + v6 + 24;
          *(_QWORD *)(v8 + 16) = 0x100000000;
          *(_DWORD *)(v8 + 32) = -1;
          *(_QWORD *)(v8 + 40) = v5 + v6 + 56;
          *(_QWORD *)(v8 + 48) = 0x200000000;
          v7 -= 64;
          v5 += 64;
        }
        while (v6 != v7);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

void sub_1C4AA2A90(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v6);
  sub_1C4AA2B00(a1, (uint64_t)v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C4AA2B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)a1;
    v5 = v2 << 6;
    do
    {
      v6 = sub_1C61533E8(a2, v4);
      v4 += 64;
      a2 = v6 + 64;
      v5 -= 64;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = v7 << 6;
      do
      {
        v10 = v8 + v9;
        v11 = *(void **)(v8 + v9 - 24);
        if ((void *)(v8 + v9 - 8) != v11)
          free(v11);
        v12 = *(void **)(v10 - 56);
        if ((void *)(v10 - 40) != v12)
          free(v12);
        v9 -= 64;
      }
      while (v9);
    }
  }
}

void sub_1C4AA2B98(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  _DWORD v49[14];
  void *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[24];
  void *v57[2];
  _QWORD v58[5];

  v58[3] = *MEMORY[0x1E0C80C00];
  a1[36] = a2;
  a1[37] = a3;
  sub_1C4AA2F7C(a1, a3 - a2);
  v8 = a1[37] - a1[36];
  v57[0] = v58;
  v57[1] = (void *)0x500000000;
  sub_1C4893E04((char *)v57, v8, 0);
  v54 = v56;
  v55 = 0x500000000;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 864) + 48 * a2 + 24);
  v50 = &v52;
  v52 = a2;
  v53 = v9;
  v51 = 0x500000001;
  v48[0] = v49;
  v48[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v48, (a3 + 63) >> 6, 0);
  v49[12] = a3;
  v10 = v48[0];
  *((_QWORD *)v48[0] + (a2 >> 6)) |= 1 << a2;
  v11 = v51;
  if ((_DWORD)v51)
  {
    do
    {
      while (1)
      {
        v12 = (char *)v50;
        v13 = (char *)v50 + 16 * v11;
        v14 = (unsigned int *)*((_QWORD *)v13 - 1);
        v15 = *(_QWORD *)(a4 + 864);
        v16 = v15 + 48 * *((unsigned int *)v13 - 4);
        if (v14 == (unsigned int *)(*(_QWORD *)(v16 + 24) + 4 * *(unsigned int *)(v16 + 32)))
          break;
        v18 = *v14;
        v17 = *v14;
        *((_QWORD *)v13 - 1) = v14 + 1;
        v19 = 1 << v18;
        v20 = (unint64_t)v18 >> 6;
        v21 = *((_QWORD *)v48[0] + v20);
        if (((1 << v18) & v21) == 0)
        {
          v22 = v11;
          *((_QWORD *)v48[0] + v20) = v19 | v21;
          v23 = *(_QWORD *)(v15 + 48 * v17 + 24);
          if (v11 >= HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)&v52, v11 + 1, 16);
            v12 = (char *)v50;
            v22 = v51;
          }
          v24 = &v12[16 * v22];
          *(_QWORD *)v24 = v17;
          *((_QWORD *)v24 + 1) = v23;
          v11 = v51 + 1;
          LODWORD(v51) = v51 + 1;
        }
        if (!v11)
          goto LABEL_12;
      }
      LODWORD(v51) = v11 - 1;
      *((_DWORD *)v57[0] + *((_DWORD *)v13 - 4) - a1[36]) = v55;
      v25 = *((_DWORD *)v13 - 4);
      v26 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 4);
        v26 = v55;
      }
      *((_DWORD *)v54 + v26) = v25;
      LODWORD(v55) = v55 + 1;
      v11 = v51;
    }
    while ((_DWORD)v51);
LABEL_12:
    v10 = v48[0];
  }
  if (v10 != v49)
    free(v10);
  if (v50 != &v52)
    free(v50);
  v27 = v54;
  v28 = *(_QWORD *)a1;
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)v54 - a1[36])) = *(_DWORD *)v54;
  v29 = a1[37] - a1[36];
  if (v29 != 1)
  {
    v30 = *(_QWORD *)(a4 + 864);
    v31 = 1;
    v32 = (unsigned int *)v57[0];
    do
    {
      v33 = v27[v31];
      v34 = v30 + 48 * v33;
      v35 = *(_DWORD *)(v34 + 32);
      if (v35)
      {
        v36 = a1[36];
        v37 = *(_DWORD **)(v34 + 24);
        v38 = *v37 - v36;
        v39 = v32[v38];
        if (v35 == 1)
        {
          v40 = v32[v38];
        }
        else
        {
          v41 = 1;
          v40 = v39;
          do
          {
            v42 = v32[v37[v41] - v36];
            if (*(_DWORD *)(v28 + 4 * (v27[v42] - v36)) != -1 && v39 != v42)
            {
              do
              {
                while (v42 > v39)
                {
                  v44 = *(_DWORD *)(v28 + 4 * (v27[v42] - v36));
                  if (v44 == -1)
LABEL_43:
                    llvm::report_fatal_error((llvm *)"Internal Compiler Error: Unhandled control flow", (const char *)1);
                  v42 = v32[v44 - v36];
                }
                while (v39 > v42)
                {
                  v45 = *(_DWORD *)(v28 + 4 * (v27[v39] - v36));
                  if (v45 == -1)
                    goto LABEL_43;
                  v39 = v32[v45 - v36];
                }
                v40 = v42;
              }
              while (v39 != v42);
            }
            ++v41;
            v39 = v40;
          }
          while (v35 != (_DWORD)v41);
        }
        v46 = v33 - v36;
        v47 = v27[v40];
        if (*(_DWORD *)(v28 + 4 * v46) != v47)
          *(_DWORD *)(v28 + 4 * v46) = v47;
      }
      ++v31;
    }
    while (v31 != v29);
  }
  if (v27 != (_DWORD *)v56)
    free(v27);
  if (v57[0] != v58)
    free(v57[0]);
}

unsigned int *sub_1C4AA2F7C(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    if (v2 <= a2)
    {
      if (result[3] < a2)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 4);
        v2 = v4[2];
      }
      if (a2 != v2)
        result = (unsigned int *)memset((void *)(*(_QWORD *)v4 + 4 * v2), 255, 4 * (a2 - v2));
    }
    v4[2] = a2;
  }
  return result;
}

_QWORD *sub_1C4AA2FF4(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4AA30A4((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4926528((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C4AA30A4(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614495C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

char **sub_1C4AA315C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = &v2[v4];
      v6 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v6)
        free(v6);
      v7 = (char *)*((_QWORD *)v5 - 7);
      if (v5 - 40 != v7)
        free(v7);
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C4AA31F0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v5)
        free(v5);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4AA326C(uint64_t a1)
{
  sub_1C4AA32A4(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C4AA32A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 16;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 32 * v2;
  v4 = (_QWORD *)(v1 + 24);
  do
  {
    if ((*(v4 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v5 = (_QWORD *)*(v4 - 2);
      if (v4 != v5)
      {
        v6 = v4;
        v7 = v3;
        free(v5);
        v4 = v6;
        v3 = v7;
      }
    }
    v4 += 4;
    v3 -= 32;
  }
  while (v3);
}

uint64_t sub_1C4AA331C()
{
  char v1;
  char *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Layout the cfg early";
  *((_QWORD *)&v3 + 1) = 20;
  v1 = 1;
  v2 = &v1;
  sub_1C614D990((uint64_t)&unk_1EF8EF918, "run-agx3-early-block-placement", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EF918, &dword_1C475E000);
}

uint64_t sub_1C4AA3394(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Late Pipeline SWWA Pass";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "agx3-low-level-swwas";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF9E0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AA3424;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4AA3424()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF9E0);
  *result = &off_1E7FAD628;
  return result;
}

void sub_1C4AA3464(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AA34F8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AA3584()
{
  return "AGX3 Late Pipeline SWWA Pass";
}

void *sub_1C4AA3594(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4AA35C4(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MachineFunction *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::MachineFunction *v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _BOOL4 v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  llvm::MachineFunction *v61;
  unint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  llvm::MachineFunction *v84;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  llvm::MachineFunction *v91;
  unint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  llvm::MachineFunction *v105;
  unsigned __int8 *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  llvm::MachineFunction *v118;
  unint64_t *v119;
  unint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  BOOL v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  llvm::MachineFunction *v181;
  unint64_t *v182;
  unint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  int v190;
  uint64_t i;
  unsigned __int16 *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  llvm::MachineFunction *v198;
  unint64_t *v199;
  unint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  _QWORD *v214;
  int v215;
  uint64_t j;
  unint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  void (**v221)(void);
  unint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  int k;
  uint64_t v227;
  llvm::MachineFunction *v228;
  unint64_t *v229;
  unint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  int v261;
  _QWORD *v262;
  _BYTE *v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  char v278;
  __int128 v279;
  unsigned __int8 *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  _BYTE v286[24];
  _BYTE v287[72];
  _DWORD *v288;
  uint64_t v289;
  _QWORD v290[5];

  v290[2] = *MEMORY[0x1E0C80C00];
  v3 = (_BYTE *)a2[2];
  v284 = v286;
  v285 = 0x300000000;
  v260 = a2 + 40;
  if (v3[361])
    v4 = a2[40] == (_QWORD)(a2 + 40);
  else
    v4 = 1;
  v263 = v3;
  if (v4 || (*(_WORD *)(*a2 + 18) & 0x3FF0) != 0x6C0)
  {
    v15 = 0;
  }
  else
  {
    memset(&v287[16], 0, 56);
    *(_QWORD *)v287 = &off_1E816EC08;
    *(_QWORD *)&v287[8] = a2;
    *(_QWORD *)&v287[24] = a2[5];
    *(_QWORD *)&v287[16] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 104))(v3);
    v280 = 0;
    if (*(_QWORD *)&v287[32])
    {
      llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
      *(_QWORD *)&v287[32] = v280;
    }
    else
    {
      *(_QWORD *)&v287[32] = 0;
    }
    *(_QWORD *)&v287[48] = 0;
    *(_QWORD *)&v287[56] = 0;
    v5 = *(_QWORD *)(a2[41] + 56);
    *(_QWORD *)&v287[40] = a2[41];
    *(_QWORD *)&v287[48] = v5;
    v7 = sub_1C55437B8(v287, 0x184Eu);
    v8 = (unint64_t *)v6;
    v9 = *(unint64_t **)&v287[48];
    v10 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
    *(_QWORD *)(v6 + 24) = v10;
    v11 = *(_QWORD *)(v10 + 32);
    v12 = *(unsigned int *)(v6 + 40);
    if ((_DWORD)v12)
    {
      v251 = *(_QWORD *)(v6 + 32);
      v252 = *(_QWORD *)(v11 + 40);
      v253 = 32 * v12;
      do
      {
        if (!*(_BYTE *)v251)
        {
          v254 = *(unsigned int *)(v251 + 4);
          if ((int)v254 >= 0)
            v255 = (uint64_t *)(*(_QWORD *)(v252 + 272) + 8 * v254);
          else
            v255 = (uint64_t *)(*(_QWORD *)(v252 + 24) + 16 * (v254 & 0x7FFFFFFF) + 8);
          v256 = *v255;
          if (*v255)
          {
            v257 = *(_QWORD *)(v256 + 16);
            *(_QWORD *)(v256 + 16) = v251;
            *(_QWORD *)(v251 + 16) = v257;
            if ((*(_BYTE *)(v251 + 3) & 1) != 0)
            {
              *(_QWORD *)(v251 + 24) = v256;
            }
            else
            {
              *(_QWORD *)(v251 + 24) = 0;
              v255 = (uint64_t *)(v257 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v251 + 16) = v251;
            *(_QWORD *)(v251 + 24) = 0;
          }
          *v255 = v251;
        }
        v251 += 32;
        v253 -= 32;
      }
      while (v253);
    }
    v13 = *(_QWORD *)(v11 + 728);
    if (v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(v13, v6);
    v14 = *v9 & 0xFFFFFFFFFFFFFFF8;
    *v8 = v14 | *v8 & 7;
    v8[1] = (unint64_t)v9;
    *(_QWORD *)(v14 + 8) = v8;
    *v9 = *v9 & 7 | (unint64_t)v8;
    if (*(_QWORD *)&v287[56])
      (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v8);
    LODWORD(v280) = 1;
    v281 = 0;
    v282 = 64;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v280);
    *(_QWORD *)v287 = &off_1E816EC08;
    v3 = v263;
    if (*(_QWORD *)&v287[32])
      llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
    v15 = 1;
  }
  v258 = a2;
  v16 = (_QWORD *)a2[41];
  if (v16 != v260)
  {
    while (1)
    {
      v17 = v16 + 6;
      v259 = v16;
      v18 = v16[7];
      v262 = v16 + 6;
      if ((_QWORD *)v18 != v16 + 6)
        break;
LABEL_247:
      v16 = (_QWORD *)v259[1];
      if (v16 == v260)
        goto LABEL_248;
    }
    while (**(unsigned __int16 **)(v18 + 16) - 13 < 5)
    {
LABEL_84:
      if ((*(_BYTE *)v18 & 4) == 0)
      {
        while ((*(_WORD *)(v18 + 44) & 8) != 0)
          v18 = *(_QWORD *)(v18 + 8);
      }
      v18 = *(_QWORD *)(v18 + 8);
      if ((_QWORD *)v18 == v17)
        goto LABEL_247;
    }
    v19 = v285;
    if ((_DWORD)v285 == 3)
    {
      *(_OWORD *)v284 = *(_OWORD *)((char *)v284 + 8);
      v19 = v285 - 1;
      LODWORD(v285) = v285 - 1;
    }
    if (v19 >= HIDWORD(v285))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v284, (uint64_t)v286, v19 + 1, 8);
      v19 = v285;
    }
    *((_QWORD *)v284 + v19) = v18;
    LODWORD(v285) = v285 + 1;
    if (sub_1C4AD6E84(v18))
    {
      v20 = *(_QWORD *)(v18 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v18 + 16));
      v23 = *(_QWORD *)(v20 + 16);
      v21 = (unint64_t *)(v20 + 16);
      v22 = v23;
      v24 = BYTE3(v23);
      if (BYTE3(v23))
      {
        v25 = *(_QWORD *)(v18 + 24);
        memset(&v287[8], 0, 64);
        v26 = *(_QWORD *)(v25 + 32);
        *(_QWORD *)v287 = &off_1E816EC08;
        *(_QWORD *)&v287[8] = v26;
        *(_QWORD *)&v287[24] = *(_QWORD *)(v26 + 40);
        *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 104))(*(_QWORD *)(v26 + 16));
        v280 = 0;
        if (*(_QWORD *)&v287[32])
        {
          llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
          *(_QWORD *)&v287[32] = v280;
          if (v280)
            llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
        }
        else
        {
          *(_QWORD *)&v287[32] = 0;
        }
        *(_QWORD *)&v287[48] = v18;
        *(_QWORD *)&v287[56] = 0;
        *(_QWORD *)&v287[40] = *(_QWORD *)(v18 + 24);
        *(_QWORD *)&v287[48] = v18;
        if ((_BYTE *)(v18 + 56) != &v287[32])
        {
          if (*(_QWORD *)&v287[32])
            llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
          *(_QWORD *)&v287[32] = *(_QWORD *)(v18 + 56);
          if (*(_QWORD *)&v287[32])
            llvm::MetadataTracking::track((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32], 2);
        }
        v28 = sub_1C55437B8(v287, 0x184Eu);
        v29 = (unint64_t *)v27;
        v30 = *(unint64_t **)&v287[48];
        v31 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
        *(_QWORD *)(v27 + 24) = v31;
        v32 = *(_QWORD *)(v31 + 32);
        v33 = *(unsigned int *)(v27 + 40);
        if ((_DWORD)v33)
        {
          v133 = *(_QWORD *)(v27 + 32);
          v134 = *(_QWORD *)(v32 + 40);
          v135 = 32 * v33;
          do
          {
            if (!*(_BYTE *)v133)
            {
              v136 = *(unsigned int *)(v133 + 4);
              if ((int)v136 >= 0)
                v137 = (uint64_t *)(*(_QWORD *)(v134 + 272) + 8 * v136);
              else
                v137 = (uint64_t *)(*(_QWORD *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
              v138 = *v137;
              if (*v137)
              {
                v139 = *(_QWORD *)(v138 + 16);
                *(_QWORD *)(v138 + 16) = v133;
                *(_QWORD *)(v133 + 16) = v139;
                if ((*(_BYTE *)(v133 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v133 + 24) = v138;
                }
                else
                {
                  *(_QWORD *)(v133 + 24) = 0;
                  v137 = (uint64_t *)(v139 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v133 + 16) = v133;
                *(_QWORD *)(v133 + 24) = 0;
              }
              *v137 = v133;
            }
            v133 += 32;
            v135 -= 32;
          }
          while (v135);
        }
        v34 = *(_QWORD *)(v32 + 728);
        if (v34)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, v27);
        v35 = *v30 & 0xFFFFFFFFFFFFFFF8;
        *v29 = v35 | *v29 & 7;
        v29[1] = (unint64_t)v30;
        *(_QWORD *)(v35 + 8) = v29;
        *v30 = *v30 & 7 | (unint64_t)v29;
        if (*(_QWORD *)&v287[56])
          (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v29);
        LODWORD(v280) = 1;
        v281 = 0;
        v282 = v24 << 24;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v28, (const llvm::MachineOperand *)&v280);
        *v21 = v22 & 0xFFFFFFFF00FFFFFFLL;
        *(_QWORD *)v287 = &off_1E816EC08;
        if (*(_QWORD *)&v287[32])
          llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
        LODWORD(v24) = 1;
      }
      v3 = v263;
    }
    else
    {
      LODWORD(v24) = 0;
    }
    v36 = sub_1C4AA5454((uint64_t)v3, &v284);
    if (v3[373]
      && (v37 = **(unsigned __int16 **)(v18 + 16), v38 = sub_1C4C915C4(v37), (v38 & 0xFF00000000) != 0)
      && ((_DWORD)v38 != 151 ? (v39 = (_DWORD)v38 == 3) : (v39 = 1),
          v39
       && ((v40 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 32 * sub_1C4C2FD5C(v37) + 16),
            v41 = v40 & 0xB00,
            v42 = v40 & 0x480,
            v41)
         ? (v43 = v42 == 0)
         : (v43 = 0),
           v43)))
    {
      v87 = *(_QWORD *)(v18 + 24);
      memset(&v287[8], 0, 64);
      v88 = *(_QWORD *)(v87 + 32);
      *(_QWORD *)v287 = &off_1E816EC08;
      *(_QWORD *)&v287[8] = v88;
      *(_QWORD *)&v287[24] = *(_QWORD *)(v88 + 40);
      *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v88 + 16) + 104))(*(_QWORD *)(v88 + 16));
      v280 = 0;
      if (*(_QWORD *)&v287[32])
      {
        llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
        *(_QWORD *)&v287[32] = v280;
        if (v280)
          llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
      }
      else
      {
        *(_QWORD *)&v287[32] = 0;
      }
      *(_QWORD *)&v287[48] = v18;
      *(_QWORD *)&v287[56] = 0;
      *(_QWORD *)&v287[40] = *(_QWORD *)(v18 + 24);
      *(_QWORD *)&v287[48] = v18;
      if ((_BYTE *)(v18 + 56) != &v287[32])
      {
        if (*(_QWORD *)&v287[32])
          llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
        *(_QWORD *)&v287[32] = *(_QWORD *)(v18 + 56);
        if (*(_QWORD *)&v287[32])
          llvm::MetadataTracking::track((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32], 2);
      }
      v274 = v36;
      v89 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)&v287[40] = *(_QWORD *)(v18 + 24);
      *(_QWORD *)&v287[48] = v89;
      v91 = sub_1C55437B8(v287, 0x2442u);
      v92 = (unint64_t *)v90;
      v93 = *(unint64_t **)&v287[48];
      v94 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
      *(_QWORD *)(v90 + 24) = v94;
      v95 = *(_QWORD *)(v94 + 32);
      v96 = *(unsigned int *)(v90 + 40);
      if ((_DWORD)v96)
      {
        v154 = *(_QWORD *)(v90 + 32);
        v155 = *(_QWORD *)(v95 + 40);
        v156 = 32 * v96;
        do
        {
          if (!*(_BYTE *)v154)
          {
            v157 = *(unsigned int *)(v154 + 4);
            if ((int)v157 >= 0)
              v158 = (uint64_t *)(*(_QWORD *)(v155 + 272) + 8 * v157);
            else
              v158 = (uint64_t *)(*(_QWORD *)(v155 + 24) + 16 * (v157 & 0x7FFFFFFF) + 8);
            v159 = *v158;
            if (*v158)
            {
              v160 = *(_QWORD *)(v159 + 16);
              *(_QWORD *)(v159 + 16) = v154;
              *(_QWORD *)(v154 + 16) = v160;
              if ((*(_BYTE *)(v154 + 3) & 1) != 0)
              {
                *(_QWORD *)(v154 + 24) = v159;
              }
              else
              {
                *(_QWORD *)(v154 + 24) = 0;
                v158 = (uint64_t *)(v160 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v154 + 16) = v154;
              *(_QWORD *)(v154 + 24) = 0;
            }
            *v158 = v154;
          }
          v154 += 32;
          v156 -= 32;
        }
        while (v156);
      }
      v97 = *(_QWORD *)(v95 + 728);
      if (v97)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 24))(v97, v90);
      v98 = *v93 & 0xFFFFFFFFFFFFFFF8;
      *v92 = v98 | *v92 & 7;
      v92[1] = (unint64_t)v93;
      *(_QWORD *)(v98 + 8) = v92;
      *v93 = *v93 & 7 | (unint64_t)v92;
      if (*(_QWORD *)&v287[56])
        (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v92);
      LODWORD(v280) = 1;
      v281 = 0;
      v282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v92, v91, (const llvm::MachineOperand *)&v280);
      LODWORD(v280) = 1;
      v281 = 0;
      v282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v92, v91, (const llvm::MachineOperand *)&v280);
      *(_QWORD *)v287 = &off_1E816EC08;
      if (*(_QWORD *)&v287[32])
        llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
      v44 = 1;
      v36 = v274;
    }
    else
    {
      v44 = 0;
    }
    if (v3[376])
    {
      v45 = **(unsigned __int16 **)(v18 + 16);
      v46 = sub_1C4C915C4(v45);
      if ((v46 & 0xFF00000000) != 0 && ((_DWORD)v46 == 44 || (_DWORD)v46 == 38))
      {
        v47 = sub_1C4C32DEC(v45);
        v48 = 0;
        if (v47 != 22)
          goto LABEL_63;
        v49 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 176))(v3);
        v48 = 0;
        if (sub_1C4AD4FB8(v18, 0, (_QWORD *)(v49 + 8)) == 2)
          goto LABEL_63;
        if ((*(_BYTE *)(*(_QWORD *)(v18 + 32)
                       + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v18 + 16))
                       + 16) & 0x40) != 0)
        {
          v113 = v18;
          if ((*(_BYTE *)v18 & 4) == 0)
          {
            v113 = v18;
            if ((*(_WORD *)(v18 + 44) & 8) != 0)
            {
              v113 = v18;
              do
                v113 = *(_QWORD *)(v113 + 8);
              while ((*(_WORD *)(v113 + 44) & 8) != 0);
            }
          }
          v114 = *(_QWORD *)(v113 + 8);
          v115 = *(_QWORD *)(*(_QWORD *)(v18 + 24) + 32);
          memset(&v287[16], 0, 56);
          *(_QWORD *)v287 = &off_1E816EC08;
          *(_QWORD *)&v287[8] = v115;
          *(_QWORD *)&v287[24] = *(_QWORD *)(v115 + 40);
          *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v115 + 16) + 104))(*(_QWORD *)(v115 + 16));
          v280 = 0;
          v275 = v36;
          v116 = v44;
          if (*(_QWORD *)&v287[32])
          {
            llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
            *(_QWORD *)&v287[32] = v280;
            if (v280)
              llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
          }
          else
          {
            *(_QWORD *)&v287[32] = 0;
          }
          *(_QWORD *)&v287[48] = 0;
          *(_QWORD *)&v287[56] = 0;
          *(_QWORD *)&v287[40] = *(_QWORD *)(v18 + 24);
          *(_QWORD *)&v287[48] = v114;
          v118 = sub_1C55437B8(v287, 0x184Eu);
          v119 = (unint64_t *)v117;
          v120 = *(unint64_t **)&v287[48];
          v121 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
          *(_QWORD *)(v117 + 24) = v121;
          v122 = *(_QWORD *)(v121 + 32);
          v123 = *(unsigned int *)(v117 + 40);
          if ((_DWORD)v123)
          {
            v161 = *(_QWORD *)(v117 + 32);
            v162 = *(_QWORD *)(v122 + 40);
            v163 = 32 * v123;
            do
            {
              if (!*(_BYTE *)v161)
              {
                v164 = *(unsigned int *)(v161 + 4);
                if ((int)v164 >= 0)
                  v165 = (uint64_t *)(*(_QWORD *)(v162 + 272) + 8 * v164);
                else
                  v165 = (uint64_t *)(*(_QWORD *)(v162 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
                v166 = *v165;
                if (*v165)
                {
                  v167 = *(_QWORD *)(v166 + 16);
                  *(_QWORD *)(v166 + 16) = v161;
                  *(_QWORD *)(v161 + 16) = v167;
                  if ((*(_BYTE *)(v161 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v161 + 24) = v166;
                  }
                  else
                  {
                    *(_QWORD *)(v161 + 24) = 0;
                    v165 = (uint64_t *)(v167 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v161 + 16) = v161;
                  *(_QWORD *)(v161 + 24) = 0;
                }
                *v165 = v161;
              }
              v161 += 32;
              v163 -= 32;
            }
            while (v163);
          }
          v124 = *(_QWORD *)(v122 + 728);
          if (v124)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 24))(v124, v117);
          v125 = *v120 & 0xFFFFFFFFFFFFFFF8;
          *v119 = v125 | *v119 & 7;
          v119[1] = (unint64_t)v120;
          *(_QWORD *)(v125 + 8) = v119;
          *v120 = *v120 & 7 | (unint64_t)v119;
          if (*(_QWORD *)&v287[56])
            (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v119);
          LODWORD(v280) = 1;
          v281 = 0;
          v282 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v119, v118, (const llvm::MachineOperand *)&v280);
          *(_QWORD *)v287 = &off_1E816EC08;
          v44 = v116;
          if (*(_QWORD *)&v287[32])
            llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
          v48 = 1;
          v36 = v275;
          goto LABEL_63;
        }
      }
    }
    v48 = 0;
LABEL_63:
    if (v3[377] && (v50 = *(unsigned __int16 **)(v18 + 16), (v50[10] & 4) != 0))
    {
      v270 = v48;
      v71 = *v50;
      v72 = sub_1C4C2FD5C(v71);
      v73 = *(_QWORD *)(v18 + 32);
      v74 = v73 + 32 * v72;
      v77 = *(_QWORD *)(v74 + 16);
      v75 = (unint64_t *)(v74 + 16);
      v76 = v77;
      if ((v77 & 0x40) != 0)
      {
        v264 = v44;
        v267 = v15;
        v273 = v36;
        v78 = v24;
        v79 = v18;
        if ((*(_BYTE *)v18 & 4) == 0)
        {
          v79 = v18;
          if ((*(_WORD *)(v18 + 44) & 8) != 0)
          {
            v79 = v18;
            do
              v79 = *(_QWORD *)(v79 + 8);
            while ((*(_WORD *)(v79 + 44) & 8) != 0);
          }
        }
        v80 = *(_QWORD *)(v79 + 8);
        v24 = *(_QWORD *)(v18 + 24);
        if (v71 == 548
          && (*(_QWORD *)(v73 + 80) == 1 ? (v81 = v80 == v24 + 48) : (v81 = 1),
              !v81 && **(_WORD **)(v80 + 16) == 544 && *(_QWORD *)(*(_QWORD *)(v80 + 32) + 48) == 1))
        {
          v276 = 0;
          LODWORD(v24) = v78;
          v48 = v270;
          v36 = v273;
          v44 = v264;
        }
        else
        {
          *v75 = v76 & 0xFFFFFFFFFFFFFFBFLL;
          v82 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 104))(v3);
          v83 = *(_QWORD *)(v82 + 8);
          v84 = *(llvm::MachineFunction **)(v24 + 32);
          v85 = *(unsigned __int8 **)(v18 + 56);
          v280 = v85;
          if (v85)
            llvm::MetadataTracking::track((uint64_t)&v280, v85, 2);
          v86 = *((_QWORD *)v84 + 28);
          if (v86)
            *((_QWORD *)v84 + 28) = *(_QWORD *)v86;
          else
            v86 = sub_1C484358C((uint64_t)v84 + 128, 72, 3);
          *(_QWORD *)v287 = v280;
          if (v280)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)v287);
            v280 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v86, v84, v83 + 26304, (unsigned __int8 **)v287, 0);
          if (*(_QWORD *)v287)
            llvm::MetadataTracking::untrack((uint64_t)v287, *(unsigned __int8 **)v287);
          if (v280)
            llvm::MetadataTracking::untrack((uint64_t)&v280, v280);
          v99 = *(_QWORD *)(v24 + 40);
          *(_QWORD *)(v86 + 24) = v99;
          v100 = *(_QWORD *)(v99 + 32);
          v101 = *(unsigned int *)(v86 + 40);
          if ((_DWORD)v101)
          {
            v140 = *(_QWORD *)(v86 + 32);
            v141 = *(_QWORD *)(v100 + 40);
            v142 = 32 * v101;
            do
            {
              if (!*(_BYTE *)v140)
              {
                v143 = *(unsigned int *)(v140 + 4);
                if ((int)v143 >= 0)
                  v144 = (uint64_t *)(*(_QWORD *)(v141 + 272) + 8 * v143);
                else
                  v144 = (uint64_t *)(*(_QWORD *)(v141 + 24) + 16 * (v143 & 0x7FFFFFFF) + 8);
                v145 = *v144;
                if (*v144)
                {
                  v146 = *(_QWORD *)(v145 + 16);
                  *(_QWORD *)(v145 + 16) = v140;
                  *(_QWORD *)(v140 + 16) = v146;
                  if ((*(_BYTE *)(v140 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v140 + 24) = v145;
                  }
                  else
                  {
                    *(_QWORD *)(v140 + 24) = 0;
                    v144 = (uint64_t *)(v146 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v140 + 16) = v140;
                  *(_QWORD *)(v140 + 24) = 0;
                }
                *v144 = v140;
              }
              v140 += 32;
              v142 -= 32;
            }
            while (v142);
          }
          v102 = *(_QWORD *)(v100 + 728);
          if (v102)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v102 + 24))(v102, v86);
          v103 = *(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v86 = v103 | *(_QWORD *)v86 & 7;
          *(_QWORD *)(v86 + 8) = v80;
          *(_QWORD *)(v103 + 8) = v86;
          *(_QWORD *)v80 = *(_QWORD *)v80 & 7 | v86;
          *(_DWORD *)v287 = 1;
          *(_QWORD *)&v287[8] = 0;
          *(_QWORD *)&v287[16] = 64;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v86, v84, (const llvm::MachineOperand *)v287);
          *(_OWORD *)v287 = 0x100000000uLL;
          *(_QWORD *)&v287[16] = 0;
          *(_QWORD *)&v287[24] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v86, v84, (const llvm::MachineOperand *)v287);
          *(_DWORD *)v287 = 1;
          *(_QWORD *)&v287[8] = 0;
          *(_QWORD *)&v287[16] = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v86, v84, (const llvm::MachineOperand *)v287);
          v104 = *(_QWORD *)(v82 + 8);
          v105 = *(llvm::MachineFunction **)(v24 + 32);
          v106 = *(unsigned __int8 **)(v18 + 56);
          v280 = v106;
          if (v106)
            llvm::MetadataTracking::track((uint64_t)&v280, v106, 2);
          v107 = *((_QWORD *)v105 + 28);
          if (v107)
            *((_QWORD *)v105 + 28) = *(_QWORD *)v107;
          else
            v107 = sub_1C484358C((uint64_t)v105 + 128, 72, 3);
          *(_QWORD *)v287 = v280;
          if (v280)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)v287);
            v280 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v107, v105, v104 + 26112, (unsigned __int8 **)v287, 0);
          if (*(_QWORD *)v287)
            llvm::MetadataTracking::untrack((uint64_t)v287, *(unsigned __int8 **)v287);
          v48 = v270;
          if (v280)
            llvm::MetadataTracking::untrack((uint64_t)&v280, v280);
          v108 = *(_QWORD *)(v24 + 40);
          *(_QWORD *)(v107 + 24) = v108;
          v109 = *(_QWORD *)(v108 + 32);
          v110 = *(unsigned int *)(v107 + 40);
          LODWORD(v24) = v78;
          v44 = v264;
          if ((_DWORD)v110)
          {
            v147 = *(_QWORD *)(v107 + 32);
            v148 = *(_QWORD *)(v109 + 40);
            v149 = 32 * v110;
            do
            {
              if (!*(_BYTE *)v147)
              {
                v150 = *(unsigned int *)(v147 + 4);
                if ((int)v150 >= 0)
                  v151 = (uint64_t *)(*(_QWORD *)(v148 + 272) + 8 * v150);
                else
                  v151 = (uint64_t *)(*(_QWORD *)(v148 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
                v152 = *v151;
                if (*v151)
                {
                  v153 = *(_QWORD *)(v152 + 16);
                  *(_QWORD *)(v152 + 16) = v147;
                  *(_QWORD *)(v147 + 16) = v153;
                  if ((*(_BYTE *)(v147 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v147 + 24) = v152;
                  }
                  else
                  {
                    *(_QWORD *)(v147 + 24) = 0;
                    v151 = (uint64_t *)(v153 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v147 + 16) = v147;
                  *(_QWORD *)(v147 + 24) = 0;
                }
                *v151 = v147;
              }
              v147 += 32;
              v149 -= 32;
            }
            while (v149);
          }
          v111 = *(_QWORD *)(v109 + 728);
          if (v111)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v111 + 24))(v111, v107);
          v112 = *(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v107 = v112 | *(_QWORD *)v107 & 7;
          *(_QWORD *)(v107 + 8) = v80;
          *(_QWORD *)(v112 + 8) = v107;
          *(_QWORD *)v80 = *(_QWORD *)v80 & 7 | v107;
          *(_DWORD *)v287 = 1;
          *(_QWORD *)&v287[8] = 0;
          *(_QWORD *)&v287[16] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v105, (const llvm::MachineOperand *)v287);
          *(_DWORD *)v287 = 1;
          *(_QWORD *)&v287[8] = 0;
          *(_QWORD *)&v287[16] = 1;
          v276 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v105, (const llvm::MachineOperand *)v287);
          v15 = v267;
          v36 = v273;
        }
      }
      else
      {
        v276 = 0;
        v48 = v270;
      }
    }
    else
    {
      v276 = 0;
    }
    v51 = sub_1C4AD7304(v18);
    if (v51)
    {
      v266 = v15;
      v269 = v48;
      v52 = **(unsigned __int16 **)(v18 + 16);
      if ((sub_1C4C915C4(v52) & 0xFF00000000) == 0)
        llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
      v53 = sub_1C4C2FD5C(v52);
      v54 = *(_QWORD *)(v18 + 24);
      v55 = *(_QWORD *)(v18 + 32);
      memset(&v287[8], 0, 64);
      v56 = *(_QWORD *)(v54 + 32);
      *(_QWORD *)v287 = &off_1E816EC08;
      *(_QWORD *)&v287[8] = v56;
      *(_QWORD *)&v287[24] = *(_QWORD *)(v56 + 40);
      *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 16) + 104))(*(_QWORD *)(v56 + 16));
      v280 = 0;
      if (*(_QWORD *)&v287[32])
      {
        v57 = v55;
        llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
        *(_QWORD *)&v287[32] = v280;
        if (v280)
          llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
      }
      else
      {
        v57 = v55;
        *(_QWORD *)&v287[32] = 0;
      }
      *(_QWORD *)&v287[48] = v18;
      *(_QWORD *)&v287[56] = 0;
      *(_QWORD *)&v287[40] = *(_QWORD *)(v18 + 24);
      *(_QWORD *)&v287[48] = v18;
      if ((_BYTE *)(v18 + 56) != &v287[32])
      {
        if (*(_QWORD *)&v287[32])
          llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
        *(_QWORD *)&v287[32] = *(_QWORD *)(v18 + 56);
        if (*(_QWORD *)&v287[32])
          llvm::MetadataTracking::track((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32], 2);
      }
      v272 = v36;
      v261 = v24;
      v58 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 104))(v3);
      v59 = sub_1C4A13A40(v58, *(llvm::MachineBasicBlock **)(v18 + 24), *(_QWORD **)&v287[48], (unsigned __int16 ***)&off_1E7FB1568);
      v61 = sub_1C55437B8(v287, 0x228u);
      v62 = (unint64_t *)v60;
      v63 = *(unint64_t **)&v287[48];
      v64 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
      *(_QWORD *)(v60 + 24) = v64;
      v65 = *(_QWORD *)(v64 + 32);
      v66 = *(unsigned int *)(v60 + 40);
      if ((_DWORD)v66)
      {
        v126 = *(_QWORD *)(v60 + 32);
        v127 = *(_QWORD *)(v65 + 40);
        v128 = 32 * v66;
        do
        {
          if (!*(_BYTE *)v126)
          {
            v129 = *(unsigned int *)(v126 + 4);
            if ((int)v129 >= 0)
              v130 = (uint64_t *)(*(_QWORD *)(v127 + 272) + 8 * v129);
            else
              v130 = (uint64_t *)(*(_QWORD *)(v127 + 24) + 16 * (v129 & 0x7FFFFFFF) + 8);
            v131 = *v130;
            if (*v130)
            {
              v132 = *(_QWORD *)(v131 + 16);
              *(_QWORD *)(v131 + 16) = v126;
              *(_QWORD *)(v126 + 16) = v132;
              if ((*(_BYTE *)(v126 + 3) & 1) != 0)
              {
                *(_QWORD *)(v126 + 24) = v131;
              }
              else
              {
                *(_QWORD *)(v126 + 24) = 0;
                v130 = (uint64_t *)(v132 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v126 + 16) = v126;
              *(_QWORD *)(v126 + 24) = 0;
            }
            *v130 = v126;
          }
          v126 += 32;
          v128 -= 32;
        }
        while (v128);
      }
      v67 = *(_QWORD *)(v65 + 728);
      if (v67)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 24))(v67, v60);
      v68 = *v63 & 0xFFFFFFFFFFFFFFF8;
      *v62 = v68 | *v62 & 7;
      v62[1] = (unint64_t)v63;
      *(_QWORD *)(v68 + 8) = v62;
      *v63 = *v63 & 7 | (unint64_t)v62;
      if (*(_QWORD *)&v287[56])
        (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v62);
      v281 = 0;
      v282 = 0;
      v283 = 0;
      LODWORD(v280) = 0x1000000;
      HIDWORD(v280) = v59;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v280);
      LODWORD(v280) = 1;
      v281 = 0;
      v282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v280);
      v69 = *(_DWORD *)(v57 + 32 * v53 + 4);
      v281 = 0;
      LODWORD(v280) = 0;
      HIDWORD(v280) = v69;
      v282 = 0;
      v283 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v280);
      LODWORD(v280) = 1;
      v281 = 0;
      v282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v280);
      llvm::MachineOperand::setReg(v57 + 32 * v53, v59);
      v70 = *(_QWORD *)(v18 + 32) + 32 * (v53 + 1);
      *(_QWORD *)(v70 + 16) = *(_QWORD *)(v70 + 16) & 0xFFFFFFFFFFFFFFCFLL | 0x10;
      *(_QWORD *)v287 = &off_1E816EC08;
      if (*(_QWORD *)&v287[32])
        llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
      v15 = v266;
      v3 = v263;
      LODWORD(v24) = v261;
      v48 = v269;
      v36 = v272;
    }
    v15 |= v24 | v36 | v44 | v48 | v276 | v51;
    v17 = v262;
    goto LABEL_84;
  }
LABEL_248:
  if ((_DWORD)v285 == 3)
  {
    *(_OWORD *)v284 = *(_OWORD *)((char *)v284 + 8);
    LODWORD(v285) = v285 - 1;
    v15 |= sub_1C4AA5454((uint64_t)v3, &v284);
  }
  v168 = v258[43];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 560))(v168)
    && ((v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 440))(v168),
         v170 = (v169 + 15) & 0xFFFFFFF0,
         v171 = v170 - v169,
         v4 = v170 == v169,
         v172 = (v170 - v169) & 3,
         !v4)
      ? (v173 = v172 == 0)
      : (v173 = 0),
        v173 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 376))(v168, 0) != -1))
  {
    v174 = 0;
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 328))(v168, 0);
      v174 += 4;
    }
    while (v174 < v171 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 376))(v168, 0) != -1);
    v271 = 1;
  }
  else
  {
    v271 = 0;
  }
  v265 = sub_1C4AD7040((uint64_t)v258);
  if (v265)
  {
    v175 = *(_QWORD *)(v258[41] + 56);
    v176 = *(_QWORD *)(v175 + 24);
    memset(&v287[24], 0, 48);
    *(_OWORD *)&v287[8] = 0u;
    v177 = *(_QWORD *)(v176 + 32);
    v178 = *(_QWORD *)(v177 + 40);
    *(_QWORD *)v287 = &off_1E816EC08;
    *(_QWORD *)&v287[8] = v177;
    *(_QWORD *)&v287[24] = v178;
    *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v177 + 16) + 104))(*(_QWORD *)(v177 + 16));
    v280 = 0;
    if (*(_QWORD *)&v287[32])
    {
      llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
      *(_QWORD *)&v287[32] = v280;
      if (v280)
        llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
    }
    else
    {
      *(_QWORD *)&v287[32] = 0;
    }
    *(_QWORD *)&v287[48] = 0;
    *(_QWORD *)&v287[56] = 0;
    *(_QWORD *)&v287[40] = *(_QWORD *)(v175 + 24);
    *(_QWORD *)&v287[48] = v175;
    v179 = (_BYTE *)(v175 + 56);
    if (v179 != &v287[32])
    {
      if (*(_QWORD *)&v287[32])
        llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
      *(_QWORD *)&v287[32] = *(_QWORD *)v179;
      if (*(_QWORD *)&v287[32])
        llvm::MetadataTracking::track((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32], 2);
    }
    v181 = sub_1C55437B8(v287, 0x184Eu);
    v182 = (unint64_t *)v180;
    v183 = *(unint64_t **)&v287[48];
    v184 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
    *(_QWORD *)(v180 + 24) = v184;
    v185 = *(_QWORD *)(v184 + 32);
    v186 = *(unsigned int *)(v180 + 40);
    if ((_DWORD)v186)
    {
      v244 = *(_QWORD *)(v180 + 32);
      v245 = *(_QWORD *)(v185 + 40);
      v246 = 32 * v186;
      do
      {
        if (!*(_BYTE *)v244)
        {
          v247 = *(unsigned int *)(v244 + 4);
          if ((int)v247 >= 0)
            v248 = (uint64_t *)(*(_QWORD *)(v245 + 272) + 8 * v247);
          else
            v248 = (uint64_t *)(*(_QWORD *)(v245 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
          v249 = *v248;
          if (*v248)
          {
            v250 = *(_QWORD *)(v249 + 16);
            *(_QWORD *)(v249 + 16) = v244;
            *(_QWORD *)(v244 + 16) = v250;
            if ((*(_BYTE *)(v244 + 3) & 1) != 0)
            {
              *(_QWORD *)(v244 + 24) = v249;
            }
            else
            {
              *(_QWORD *)(v244 + 24) = 0;
              v248 = (uint64_t *)(v250 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v244 + 16) = v244;
            *(_QWORD *)(v244 + 24) = 0;
          }
          *v248 = v244;
        }
        v244 += 32;
        v246 -= 32;
      }
      while (v246);
    }
    v187 = *(_QWORD *)(v185 + 728);
    if (v187)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v187 + 24))(v187, v180);
    v188 = *v183 & 0xFFFFFFFFFFFFFFF8;
    *v182 = v188 | *v182 & 7;
    v182[1] = (unint64_t)v183;
    *(_QWORD *)(v188 + 8) = v182;
    *v183 = *v183 & 7 | (unint64_t)v182;
    if (*(_QWORD *)&v287[56])
      (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v182);
    LODWORD(v280) = 1;
    v281 = 0;
    v282 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v182, v181, (const llvm::MachineOperand *)&v280);
    *(_QWORD *)v287 = &off_1E816EC08;
    v3 = v263;
    if (*(_QWORD *)&v287[32])
      llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
  }
  v268 = v15;
  if (!*(_BYTE *)(v258[2] + 378) || (v189 = (_QWORD *)v258[41], v189 == v260))
  {
    v190 = 0;
  }
  else
  {
    v190 = 0;
    do
    {
      for (i = v189[7]; (_QWORD *)i != v189 + 6; i = *(_QWORD *)(i + 8))
      {
        v192 = *(unsigned __int16 **)(i + 16);
        if ((v192[10] & 4) != 0
          && (*(_BYTE *)(*(_QWORD *)(i + 32) + 32 * sub_1C4C2FD5C(*v192) + 16) & 0x40) != 0)
        {
          v287[0] = 0;
          *(_QWORD *)&v287[8] = i;
          sub_1C4AD7260((uint64_t)v287);
          if (!v287[0])
          {
            v193 = *(_QWORD *)&v287[8];
            if (*(_QWORD *)&v287[8])
            {
              if (sub_1C4AD7184(*(uint64_t *)&v287[8]))
              {
                v194 = *(_QWORD *)(v193 + 24);
                memset(&v287[8], 0, 64);
                v195 = *(_QWORD *)(v194 + 32);
                *(_QWORD *)v287 = &off_1E816EC08;
                *(_QWORD *)&v287[8] = v195;
                *(_QWORD *)&v287[24] = *(_QWORD *)(v195 + 40);
                *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v195 + 16) + 104))(*(_QWORD *)(v195 + 16));
                v280 = 0;
                if (*(_QWORD *)&v287[32])
                {
                  llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
                  *(_QWORD *)&v287[32] = v280;
                  if (v280)
                    llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
                }
                else
                {
                  *(_QWORD *)&v287[32] = 0;
                }
                *(_QWORD *)&v287[48] = v193;
                *(_QWORD *)&v287[56] = 0;
                *(_QWORD *)&v287[40] = *(_QWORD *)(v193 + 24);
                *(_QWORD *)&v287[48] = v193;
                v196 = (_BYTE *)(v193 + 56);
                if (v196 != &v287[32])
                {
                  if (*(_QWORD *)&v287[32])
                    llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
                  *(_QWORD *)&v287[32] = *(_QWORD *)v196;
                  if (*(_QWORD *)&v287[32])
                    llvm::MetadataTracking::track((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32], 2);
                }
                v198 = sub_1C55437B8(v287, 0x184Eu);
                v199 = (unint64_t *)v197;
                v200 = *(unint64_t **)&v287[48];
                v201 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
                *(_QWORD *)(v197 + 24) = v201;
                v202 = *(_QWORD *)(v201 + 32);
                v203 = *(unsigned int *)(v197 + 40);
                if ((_DWORD)v203)
                {
                  v206 = *(_QWORD *)(v197 + 32);
                  v207 = *(_QWORD *)(v202 + 40);
                  v208 = 32 * v203;
                  do
                  {
                    if (!*(_BYTE *)v206)
                    {
                      v209 = *(unsigned int *)(v206 + 4);
                      if ((int)v209 >= 0)
                        v210 = (uint64_t *)(*(_QWORD *)(v207 + 272) + 8 * v209);
                      else
                        v210 = (uint64_t *)(*(_QWORD *)(v207 + 24) + 16 * (v209 & 0x7FFFFFFF) + 8);
                      v211 = *v210;
                      if (*v210)
                      {
                        v212 = *(_QWORD *)(v211 + 16);
                        *(_QWORD *)(v211 + 16) = v206;
                        *(_QWORD *)(v206 + 16) = v212;
                        if ((*(_BYTE *)(v206 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v206 + 24) = v211;
                        }
                        else
                        {
                          *(_QWORD *)(v206 + 24) = 0;
                          v210 = (uint64_t *)(v212 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v206 + 16) = v206;
                        *(_QWORD *)(v206 + 24) = 0;
                      }
                      *v210 = v206;
                    }
                    v206 += 32;
                    v208 -= 32;
                  }
                  while (v208);
                }
                v204 = *(_QWORD *)(v202 + 728);
                if (v204)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 24))(v204, v197);
                v205 = *v200 & 0xFFFFFFFFFFFFFFF8;
                *v199 = v205 | *v199 & 7;
                v199[1] = (unint64_t)v200;
                *(_QWORD *)(v205 + 8) = v199;
                *v200 = *v200 & 7 | (unint64_t)v199;
                if (*(_QWORD *)&v287[56])
                  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v199);
                LODWORD(v280) = 1;
                v281 = 0;
                v282 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v199, v198, (const llvm::MachineOperand *)&v280);
                *(_QWORD *)v287 = &off_1E816EC08;
                if (*(_QWORD *)&v287[32])
                  llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
                v190 = 1;
                v3 = v263;
              }
            }
          }
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v189 = (_QWORD *)v189[1];
    }
    while (v189 != v260);
  }
  if (v3[386])
  {
    v213 = atomic_load((unsigned __int8 *)&qword_1ED7ED8D0);
    if ((v213 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED8D0))
    {
      dword_1ED7ED8C4 = 3;
      __cxa_guard_release(&qword_1ED7ED8D0);
    }
    if (dword_1ED7ED8C4 >= 1)
    {
      v277 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 176))(v3);
      v214 = (_QWORD *)v258[41];
      if (v214 != v260)
      {
        v215 = 0;
        while (1)
        {
          for (j = v214[7]; (_QWORD *)j != v214 + 6; j = *(_QWORD *)(j + 8))
          {
            if (sub_1C61586E8(j))
            {
              v288 = v290;
              v289 = 0x400000000;
              sub_1C49E178C(v287, (_QWORD *)j, 0, v277, 0, 0);
              v217 = *(_QWORD *)v287;
              v218 = *(_DWORD *)&v287[8];
              v219 = HIDWORD(*(_QWORD *)v287);
              if (*(_DWORD *)&v287[8] != *(_DWORD *)&v287[4])
              {
                v223 = v289;
                do
                {
                  if (v223 >= HIDWORD(v289))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v288, (uint64_t)v290, v223 + 1, 4);
                    v223 = v289;
                  }
                  v288[v223] = v219 >> 1;
                  v223 = v289 + 1;
                  LODWORD(v289) = v289 + 1;
                  v217 = (v217 & 0xFFFFFFFF00000000) + 0x100000000;
                  v219 = HIDWORD(v217);
                }
                while (v218 != HIDWORD(v217));
              }
              v220 = dword_1ED7ED8C4;
              v287[0] = 0;
              *(_QWORD *)&v287[8] = j;
              sub_1C4AA58C8((uint64_t)v287);
              v279 = *(_OWORD *)v287;
              if (!v287[0] && v220)
              {
                while (!sub_1C6158608(*((uint64_t *)&v279 + 1)))
                {
                  v278 = 0;
                  *(_QWORD *)v287 = &off_1E7FAD6E8;
                  *(_QWORD *)&v287[8] = &v278;
                  *(_QWORD *)&v287[16] = &v288;
                  *(_QWORD *)&v287[24] = v287;
                  sub_1C6158840(*((uint64_t *)&v279 + 1), v277, (uint64_t)v287);
                  if (*(_BYTE **)&v287[24] == v287)
                  {
                    v221 = (void (**)(void))(*(_QWORD *)v287 + 32);
                  }
                  else
                  {
                    if (!*(_QWORD *)&v287[24])
                      goto LABEL_341;
                    v221 = (void (**)(void))(**(_QWORD **)&v287[24] + 40);
                  }
                  (*v221)();
LABEL_341:
                  if (v278)
                  {
                    v224 = *(_QWORD *)(j + 24);
                    memset(&v287[8], 0, 64);
                    v225 = *(_QWORD *)(v224 + 32);
                    *(_QWORD *)v287 = &off_1E816EC08;
                    *(_QWORD *)&v287[8] = v225;
                    *(_QWORD *)&v287[24] = *(_QWORD *)(v225 + 40);
                    *(_QWORD *)&v287[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v225 + 16) + 104))(*(_QWORD *)(v225 + 16));
                    v280 = 0;
                    if (*(_QWORD *)&v287[32])
                    {
                      llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
                      *(_QWORD *)&v287[32] = v280;
                      if (v280)
                        llvm::MetadataTracking::retrack((uint64_t)&v280, v280, (uint64_t)&v287[32]);
                    }
                    else
                    {
                      *(_QWORD *)&v287[32] = 0;
                    }
                    *(_QWORD *)&v287[48] = j;
                    *(_QWORD *)&v287[56] = 0;
                    *(_QWORD *)&v287[40] = *(_QWORD *)(j + 24);
                    *(_QWORD *)&v287[48] = j;
                    if ((_BYTE *)(j + 56) != &v287[32])
                    {
                      if (*(_QWORD *)&v287[32])
                        llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
                      *(_QWORD *)&v287[32] = *(_QWORD *)(j + 56);
                      if (*(_QWORD *)&v287[32])
                        llvm::MetadataTracking::track((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32], 2);
                    }
                    if (v220 >= 1)
                    {
                      for (k = 0; k != v220; ++k)
                      {
                        v228 = sub_1C55437B8(v287, 0x184Eu);
                        v229 = (unint64_t *)v227;
                        v230 = *(unint64_t **)&v287[48];
                        v231 = *(_QWORD *)(*(_QWORD *)&v287[40] + 40);
                        *(_QWORD *)(v227 + 24) = v231;
                        v232 = *(_QWORD *)(v231 + 32);
                        v233 = *(unsigned int *)(v227 + 40);
                        if ((_DWORD)v233)
                        {
                          v236 = *(_QWORD *)(v227 + 32);
                          v237 = *(_QWORD *)(v232 + 40);
                          v238 = 32 * v233;
                          do
                          {
                            if (!*(_BYTE *)v236)
                            {
                              v239 = *(unsigned int *)(v236 + 4);
                              if ((int)v239 >= 0)
                                v240 = (uint64_t *)(*(_QWORD *)(v237 + 272) + 8 * v239);
                              else
                                v240 = (uint64_t *)(*(_QWORD *)(v237 + 24) + 16 * (v239 & 0x7FFFFFFF) + 8);
                              v241 = *v240;
                              if (*v240)
                              {
                                v242 = *(_QWORD *)(v241 + 16);
                                *(_QWORD *)(v241 + 16) = v236;
                                *(_QWORD *)(v236 + 16) = v242;
                                if ((*(_BYTE *)(v236 + 3) & 1) != 0)
                                {
                                  *(_QWORD *)(v236 + 24) = v241;
                                }
                                else
                                {
                                  *(_QWORD *)(v236 + 24) = 0;
                                  v240 = (uint64_t *)(v242 + 24);
                                }
                              }
                              else
                              {
                                *(_QWORD *)(v236 + 16) = v236;
                                *(_QWORD *)(v236 + 24) = 0;
                              }
                              *v240 = v236;
                            }
                            v236 += 32;
                            v238 -= 32;
                          }
                          while (v238);
                        }
                        v234 = *(_QWORD *)(v232 + 728);
                        if (v234)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v234 + 24))(v234, v227);
                        v235 = *v230 & 0xFFFFFFFFFFFFFFF8;
                        *v229 = v235 | *v229 & 7;
                        v229[1] = (unint64_t)v230;
                        *(_QWORD *)(v235 + 8) = v229;
                        *v230 = *v230 & 7 | (unint64_t)v229;
                        if (*(_QWORD *)&v287[56])
                          (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)&v287[56] + 24))(*(_QWORD *)&v287[56], v229);
                        LODWORD(v280) = 1;
                        v281 = 0;
                        v282 = 0;
                        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v229, v228, (const llvm::MachineOperand *)&v280);
                      }
                    }
                    *(_QWORD *)v287 = &off_1E816EC08;
                    if (*(_QWORD *)&v287[32])
                      llvm::MetadataTracking::untrack((uint64_t)&v287[32], *(unsigned __int8 **)&v287[32]);
                    v215 = 1;
                    break;
                  }
                  v222 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v279 + 1) + 16) + 16);
                  sub_1C4AA58C8((uint64_t)&v279);
                  if (!(_BYTE)v279)
                  {
                    v220 += (int)(v222 >> 3) >> 31;
                    if (v220)
                      continue;
                  }
                  break;
                }
              }
              if (v288 != (_DWORD *)v290)
                free(v288);
            }
            if ((*(_BYTE *)j & 4) == 0)
            {
              while ((*(_WORD *)(j + 44) & 8) != 0)
                j = *(_QWORD *)(j + 8);
            }
          }
          v214 = (_QWORD *)v214[1];
          if (v214 == v260)
            goto LABEL_392;
        }
      }
    }
  }
  v215 = 0;
LABEL_392:
  if (v284 != v286)
    free(v284);
  return (v265 | v268 | v271 | v190 | v215) & 1;
}

uint64_t sub_1C4AA5454(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  v3 = atomic_load((unsigned __int8 *)&qword_1ED7ED8C8);
  if ((v3 & 1) == 0)
  {
    v10 = a1;
    v9 = __cxa_guard_acquire(&qword_1ED7ED8C8);
    a1 = v10;
    if (v9)
    {
      byte_1ED7ED8C0 = 1;
      __cxa_guard_release(&qword_1ED7ED8C8);
      a1 = v10;
    }
  }
  if (byte_1ED7ED8C0)
    v4 = *(_BYTE *)(a1 + 371) == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  if (a2[2] < 2u)
    return 0;
  if (**(_WORD **)(**(_QWORD **)a2 + 16) != 4982)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (**(_WORD **)(v5 + 16) == 4982)
    return 0;
  v11[1] = a2;
  v12 = a1;
  v11[0] = &v12;
  if ((sub_1C4AA5570((uint64_t)v11, v5, 2) & 1) != 0)
    return 1;
  if (a2[2] != 3)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v6 = 1;
  if ((sub_1C4AA5570((uint64_t)v11, v8, 1) & 1) == 0)
    return 0;
  return v6;
}

uint64_t sub_1C4AA5570(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int i;
  uint64_t v26;
  llvm::MachineFunction *v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD v45[4];
  unsigned __int8 *v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    if ((v5 & 0x400) != 0)
    {
      LODWORD(v7) = 1;
    }
    else
    {
      v18 = a2;
      do
      {
        v19 = *(unsigned __int16 *)(v18 + 44);
        LODWORD(v7) = (v19 >> 3) & 1;
        if ((v19 & 8) == 0)
          break;
        v18 = *(_QWORD *)(v18 + 8);
      }
      while ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 9) & 4) == 0);
    }
  }
  else
  {
    v7 = (v5 >> 10) & 1;
  }
  v8 = a3 - v7;
  v9 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v9)
  {
LABEL_10:
    if (v8)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
      if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
      {
        if ((v15 & 0x400) != 0)
          goto LABEL_26;
        v20 = a2;
        while ((*(_WORD *)(v20 + 44) & 8) != 0)
        {
          v20 = *(_QWORD *)(v20 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v20 + 16) + 9) & 4) != 0)
            goto LABEL_26;
        }
      }
      else if ((v15 & 0x400) != 0)
      {
        goto LABEL_26;
      }
    }
    return 0;
  }
  v10 = *(_QWORD **)a1;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = (uint64_t *)(v11 + 8);
  v13 = 32 * v9;
  while (1)
  {
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 176))(*v10);
    if (sub_1C4AD4FB8(*v12, (unint64_t)(v11 - *(_QWORD *)(*v12 + 32)) >> 5, (_QWORD *)(v14 + 8)) >= 4)
      break;
    v11 += 32;
    v12 += 4;
    v13 -= 32;
    if (!v13)
      goto LABEL_10;
  }
LABEL_26:
  v21 = *(_QWORD *)(a2 + 24);
  v50 = 0;
  v22 = *(_QWORD *)(v21 + 32);
  v45[0] = &off_1E816EC08;
  v45[1] = v22;
  v45[3] = *(_QWORD *)(v22 + 40);
  v45[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 104))(*(_QWORD *)(v22 + 16));
  v23 = *(_QWORD *)(a2 + 24);
  v48 = (unint64_t *)a2;
  v49 = 0;
  v46 = 0;
  v47 = v23;
  if ((unsigned __int8 **)(a2 + 56) != &v46 && (v24 = *(unsigned __int8 **)(a2 + 56), (v46 = v24) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v46, v24, 2);
    if (v8)
    {
LABEL_29:
      for (i = 0; i != v8; ++i)
      {
        v27 = sub_1C55437B8(v45, 0x184Eu);
        v28 = (unint64_t *)v26;
        v29 = v48;
        v30 = *(_QWORD *)(v47 + 40);
        *(_QWORD *)(v26 + 24) = v30;
        v31 = *(_QWORD *)(v30 + 32);
        v32 = *(unsigned int *)(v26 + 40);
        if ((_DWORD)v32)
        {
          v35 = *(_QWORD *)(v26 + 32);
          v36 = *(_QWORD *)(v31 + 40);
          v37 = 32 * v32;
          do
          {
            if (!*(_BYTE *)v35)
            {
              v38 = *(unsigned int *)(v35 + 4);
              if ((int)v38 >= 0)
                v39 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v38);
              else
                v39 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
              v40 = *v39;
              if (*v39)
              {
                v41 = *(_QWORD *)(v40 + 16);
                *(_QWORD *)(v40 + 16) = v35;
                *(_QWORD *)(v35 + 16) = v41;
                if ((*(_BYTE *)(v35 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v35 + 24) = v40;
                }
                else
                {
                  *(_QWORD *)(v35 + 24) = 0;
                  v39 = (uint64_t *)(v41 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v35 + 16) = v35;
                *(_QWORD *)(v35 + 24) = 0;
              }
              *v39 = v35;
            }
            v35 += 32;
            v37 -= 32;
          }
          while (v37);
        }
        v33 = *(_QWORD *)(v31 + 728);
        if (v33)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 24))(v33, v26);
        v34 = *v29 & 0xFFFFFFFFFFFFFFF8;
        *v28 = v34 | *v28 & 7;
        v28[1] = (unint64_t)v29;
        *(_QWORD *)(v34 + 8) = v28;
        *v29 = *v29 & 7 | (unint64_t)v28;
        if (v49)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v49 + 24))(v49, v28);
        v51 = 1;
        v52 = 0;
        v53 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v27, (const llvm::MachineOperand *)&v51);
      }
    }
  }
  else if (v8)
  {
    goto LABEL_29;
  }
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(unsigned int *)(v42 + 8);
  if ((_DWORD)v43 == 1)
  {
    v44 = 0;
  }
  else
  {
    memmove(*(void **)v42, (const void *)(*(_QWORD *)v42 + 8), 8 * v43 - 8);
    v44 = *(_DWORD *)(v42 + 8) - 1;
  }
  *(_DWORD *)(v42 + 8) = v44;
  v45[0] = &off_1E816EC08;
  if (v46)
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
  return 1;
}

uint64_t sub_1C4AA58C8(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD **)(result + 8);
  v2 = *v1 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    v3 = *v1 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)v2 & 4) != 0)
    {
      v4 = (_QWORD *)v1[3];
      if (v4 + 6 != (_QWORD *)v2)
        goto LABEL_23;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = 0;
  }
  while ((*(_WORD *)(v3 + 44) & 4) != 0)
    v3 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
  v4 = (_QWORD *)v1[3];
  if ((_QWORD *)v3 != v4 + 6)
  {
    if (!v2 || (*(_BYTE *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 4) != 0)
        v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
    goto LABEL_23;
  }
LABEL_15:
  v5 = v4[4] + 320;
  do
  {
    v4 = (_QWORD *)*v4;
    if (v4 == (_QWORD *)v5)
    {
      *(_BYTE *)result = 1;
      return result;
    }
    v2 = v4[6] & 0xFFFFFFFFFFFFFFF8;
  }
  while (v4 + 6 == (_QWORD *)v2);
  if (!v2 || (*(_BYTE *)v2 & 4) == 0)
  {
    while ((*(_WORD *)(v2 + 44) & 4) != 0)
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
  }
LABEL_23:
  *(_QWORD *)(result + 8) = v2;
  return result;
}

void sub_1C4AA59A4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4AA59B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7FAD6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4AA59F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAD6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__int32 *sub_1C4AA5A10(uint64_t a1, __int32 *a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  __int32 *result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned int *)(v3 + 8);
  v5 = *(_QWORD *)v3 + 4 * v4;
  result = wmemchr(*(__int32 **)v3, *a2, v4);
  if (result)
    v7 = (uint64_t)result;
  else
    v7 = v5;
  **(_BYTE **)(a1 + 8) |= v7 != **(_QWORD **)(a1 + 16) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8);
  return result;
}

void sub_1C4AA5A70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 **v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t Symbol;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  llvm::MachineBasicBlock *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t Metadata;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = (unsigned __int16 **)a2;
  v6 = **(unsigned __int16 **)(a2 + 16);
  *(_DWORD *)a3 = v6;
  v7 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v7)
  {
    v75 = a3 + 32;
    v76 = a3 + 16;
    v8 = 32 * v7;
    v9 = *(_QWORD *)(a2 + 32) + 16;
    while (1)
    {
      v10 = *(_DWORD *)(v9 - 16);
      switch((char)v10)
      {
        case 0:
          if ((v10 & 0x2000000) != 0)
            goto LABEL_66;
          v11 = *(unsigned int *)(v9 - 12);
          v12 = 1;
          goto LABEL_63;
        case 1:
          v11 = *(_QWORD *)v9;
          v12 = 2;
          goto LABEL_63;
        case 4:
          Symbol = llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)v9);
          v14 = *a1;
          v15 = sub_1C484358C(*a1 + 192, 24, 3);
          v11 = v15;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 152) + 18) << 16;
          *(_BYTE *)v15 = 2;
          v17 = v16 | (*(unsigned __int8 *)(v15 + 4) << 24);
          goto LABEL_43;
        case 7:
          v21 = *(_DWORD *)v9;
          if (*(_DWORD *)v9 == 64)
          {
            if ((_BYTE)v10)
              v22 = ((v10 >> 8) & 0xFFF) - 1;
            else
              v22 = -1;
            v23 = dword_1C676CB8C[v22];
            v24 = *(unsigned int *)(v9 - 12) | ((unint64_t)*(unsigned int *)(v9 + 8) << 32);
            v25 = sub_1C484358C(*a1 + 192, 24, 3);
            v26 = v25;
            v27 = 0;
            goto LABEL_19;
          }
          if ((v21 - 81) > 4)
          {
            switch(v21)
            {
              case 'D':
                v55 = *(unsigned int *)(v9 - 12) | ((unint64_t)*(unsigned int *)(v9 + 8) << 32);
                v26 = sub_1C484358C(*a1 + 192, 24, 3);
                *(_BYTE *)v26 = 1;
                *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
                *(_QWORD *)(v26 + 8) = 0;
                *(_QWORD *)(v26 + 16) = v55;
                v23 = 12;
                v27 = 2;
                break;
              case 'C':
                v24 = *(unsigned int *)(v9 - 12) | ((unint64_t)*(unsigned int *)(v9 + 8) << 32);
                v23 = 24;
                v27 = 3;
                v25 = sub_1C484358C(*a1 + 192, 24, 3);
                v26 = v25;
LABEL_19:
                *(_BYTE *)v25 = 1;
                *(_DWORD *)(v25 + 1) = *(unsigned __int8 *)(v25 + 4) << 24;
                *(_QWORD *)(v25 + 8) = 0;
                *(_QWORD *)(v25 + 16) = v24;
                break;
              case 'B':
                v50 = *(unsigned int *)(v9 - 12) | ((unint64_t)*(unsigned int *)(v9 + 8) << 32);
                v26 = sub_1C484358C(*a1 + 192, 24, 3);
                v27 = 1;
                *(_BYTE *)v26 = 1;
                *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
                *(_QWORD *)(v26 + 8) = 0;
                *(_QWORD *)(v26 + 16) = v50;
                v23 = 8;
                break;
              default:
                if (v10 != 7 || (v21 & 0xFFFFFFFE) != 0x56)
                  llvm::report_fatal_error((llvm *)"Unhandled target index type!", (const char *)1);
                v56 = *(unsigned int *)(v9 - 12) | ((unint64_t)*(unsigned int *)(v9 + 8) << 32);
                v26 = sub_1C484358C(*a1 + 192, 24, 3);
                *(_BYTE *)v26 = 1;
                *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
                *(_QWORD *)(v26 + 8) = 0;
                *(_QWORD *)(v26 + 16) = v56;
                if (*(_DWORD *)v9 == 86)
                  v27 = 9;
                else
                  v27 = 10;
                if (*(_DWORD *)v9 == 86)
                  v57 = 2;
                else
                  v57 = 4;
                v23 = v57 << sub_1C4C916E0(*v4[2]);
                break;
            }
          }
          else
          {
            if ((_BYTE)v10)
              v47 = (v10 >> 8) & 0xFFF;
            else
              v47 = 0;
            if ((v47 & 0x200) != 0)
              v47 &= 0xCFFu;
            v48 = v47 & 0xFFFFFEFF;
            if (v48)
            {
              v49 = v48 - 129;
              if ((v49 & 1) != 0)
                v23 = 2;
              else
                v23 = 4;
              v48 = v49 >> 1;
            }
            else
            {
              v23 = dword_1C676CBC8[v21 - 81];
            }
            v51 = v48 + 2 * *(_DWORD *)(v9 - 12);
            v26 = sub_1C484358C(*a1 + 192, 24, 3);
            *(_BYTE *)v26 = 1;
            *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
            *(_QWORD *)(v26 + 8) = 0;
            *(_QWORD *)(v26 + 16) = v51;
            v27 = *(_DWORD *)v9 - 77;
          }
          v52 = sub_1C484358C(*a1 + 192, 48, 3);
          *(_DWORD *)(v52 + 9) = *(unsigned __int8 *)(v52 + 12) << 24;
          *(_QWORD *)(v52 + 16) = 0;
          *(_QWORD *)v52 = &off_1E80BF520;
          *(_DWORD *)(v52 + 24) = v27;
          *(_QWORD *)(v52 + 32) = v26;
          *(_DWORD *)(v52 + 40) = v23;
          *(_BYTE *)(v52 + 8) = 4;
          v11 = v52 + 8;
          goto LABEL_62;
        case 10:
          v18 = *(llvm::MachineBasicBlock **)v9;
          Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), *(const llvm::GlobalValue **)v9);
          if (*(_DWORD *)(v9 - 16))
            v19 = ((*(_DWORD *)(v9 - 16) >> 8) & 0xFFF) - 8;
          else
            v19 = -8;
          if (v19 > 5)
          {
            v20 = 0;
            if (!v18)
              goto LABEL_42;
          }
          else
          {
            v20 = dword_1C676CBDC[v19];
            if (!v18)
              goto LABEL_42;
          }
          if (*((_BYTE *)v18 + 16) == 3)
          {
            Metadata = llvm::Value::getMetadata((uint64_t)v18, "agx.bind", 8uLL);
            if (Metadata)
            {
              v29 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
              v31 = *v29;
              v30 = v29[1];
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 128) + 24) + 8) != 17)
                goto LABEL_27;
              if (*(_BYTE *)v30 != 1 || (v32 = *(_QWORD *)(v30 + 128), *(_BYTE *)(v32 + 16) != 16))
              {
                v30 = *(_QWORD *)(v30 - 8 * *(unsigned int *)(v30 + 8));
LABEL_27:
                v32 = *(_QWORD *)(v30 + 128);
              }
              v33 = (_QWORD *)(v32 + 24);
              if (*(_DWORD *)(v32 + 32) >= 0x41u)
                v33 = (_QWORD *)*v33;
              v34 = *(_DWORD *)v33;
              if (v34 == 114 || v34 == 18)
              {
                v36 = llvm::Value::getMetadata((uint64_t)v18, "agx.bind", 8uLL);
                if (!v36)
                  goto LABEL_90;
                v37 = (_QWORD *)(v36 - 8 * *(unsigned int *)(v36 + 8));
                v38 = v37[1];
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v37 + 128) + 24) + 8) == 17)
                {
                  if (*(_BYTE *)v38 != 1 || (v39 = *(_QWORD *)(v38 + 128), *(_BYTE *)(v39 + 16) != 16))
                  {
                    v40 = (_QWORD *)(v38 - 8 * *(unsigned int *)(v38 + 8));
                    v41 = *(_QWORD *)(*v40 + 128);
                    v42 = (_QWORD *)(v41 + 24);
                    if (*(_DWORD *)(v41 + 32) >= 0x41u)
                      v42 = (_QWORD *)*v42;
                    v43 = (_QWORD *)*v42;
                    v44 = v40[1];
                    goto LABEL_84;
                  }
                }
                else
                {
                  v39 = *(_QWORD *)(v38 + 128);
                }
                v61 = (_QWORD *)(v39 + 24);
                if (*(_DWORD *)(v39 + 32) >= 0x41u)
                  v61 = (_QWORD *)*v61;
                v43 = (_QWORD *)*v61;
                v44 = v37[2];
LABEL_84:
                v62 = *(_QWORD *)(v44 + 128);
                v63 = (unint64_t *)(v62 + 24);
                if (*(_DWORD *)(v62 + 32) >= 0x41u)
                  v63 = (unint64_t *)*v63;
                if ((_DWORD)v43 == 114 || (_DWORD)v43 == 18)
                {
                  v65 = *v63;
                  v66 = v65 & 0xFFFFFF00;
                  v65 = v65;
                }
                else
                {
LABEL_90:
                  v65 = 0;
                  v66 = 0;
                }
                v67 = v66 | v65;
                v68 = *a1;
                v69 = *a1 + 192;
                v70 = sub_1C484358C(v69, 24, 3);
                v71 = *(unsigned __int8 *)(*(_QWORD *)(v68 + 152) + 18);
                *(_BYTE *)v70 = 2;
                *(_DWORD *)(v70 + 1) = (*(unsigned __int8 *)(v70 + 4) << 24) | (v71 << 16) | v20;
                *(_QWORD *)(v70 + 8) = 0;
                *(_QWORD *)(v70 + 16) = Symbol;
                v72 = sub_1C484358C(v69, 24, 3);
                *(_BYTE *)v72 = 1;
                *(_DWORD *)(v72 + 1) = *(unsigned __int8 *)(v72 + 4) << 24;
                *(_QWORD *)(v72 + 8) = 0;
                *(_QWORD *)(v72 + 16) = v67;
                v11 = sub_1C484358C(v69, 32, 3);
                *(_BYTE *)v11 = 0;
                *(_DWORD *)(v11 + 1) = *(unsigned __int8 *)(v11 + 4) << 24;
                *(_QWORD *)(v11 + 8) = 0;
                *(_QWORD *)(v11 + 16) = v70;
                *(_QWORD *)(v11 + 24) = v72;
                v4 = (unsigned __int16 **)a2;
                goto LABEL_62;
              }
            }
          }
LABEL_42:
          v45 = *a1;
          v15 = sub_1C484358C(*a1 + 192, 24, 3);
          v11 = v15;
          v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 + 152) + 18);
          *(_BYTE *)v15 = 2;
          v17 = (*(unsigned __int8 *)(v15 + 4) << 24) | (v46 << 16) | v20;
LABEL_43:
          *(_DWORD *)(v15 + 1) = v17;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = Symbol;
LABEL_62:
          v12 = 5;
LABEL_63:
          v53 = *(unsigned int *)(a3 + 24);
          if (v53 >= *(unsigned int *)(a3 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v76, v75, v53 + 1, 16);
            v53 = *(unsigned int *)(a3 + 24);
          }
          v54 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 16 * v53);
          *v54 = v12;
          v54[1] = v11;
          ++*(_DWORD *)(a3 + 24);
LABEL_66:
          v9 += 32;
          v8 -= 32;
          if (!v8)
          {
            v6 = *(_DWORD *)a3;
            goto LABEL_93;
          }
          break;
        case 11:
          v58 = *sub_1C63BC374(a1[1], *(_QWORD *)(*(_QWORD *)v9 - 32));
          v59 = *a1;
          v11 = sub_1C484358C(*a1 + 192, 24, 3);
          v60 = *(unsigned __int8 *)(*(_QWORD *)(v59 + 152) + 18) << 16;
          *(_BYTE *)v11 = 2;
          *(_DWORD *)(v11 + 1) = v60 | (*(unsigned __int8 *)(v11 + 4) << 24);
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = v58;
          goto LABEL_62;
        case 12:
          goto LABEL_66;
        default:
          llvm::MachineInstr::dump((llvm::MachineInstr *)v4);
          __break(1u);
          return;
      }
    }
  }
LABEL_93:
  v73 = sub_1C4C915C4(v6);
  if ((v73 & 0xFF00000000) != 0 && ((_DWORD)v73 == 105 || (_DWORD)v73 == 101))
  {
    v74 = *(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(*v4[2]);
    *(_QWORD *)(v74 + 8) = *(unsigned __int8 *)(v74 + 8);
  }
}

uint64_t sub_1C4AA61D4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Post RA Peephole";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "agx3-post-ra-peephole";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF9F0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AA6260;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4AA6260()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF9F0);
  *result = &off_1E7FAD730;
  return result;
}

void sub_1C4AA62A0(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AA6334(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AA63C0()
{
  return "AGX3 post-RA peephole pass";
}

void sub_1C4AA63D0(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4AA63F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  BOOL v29;
  const void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  int v45;
  BOOL v46;
  void **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD **v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  BOOL v85;
  unsigned int *v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  uint64_t v91;
  _DWORD *v92;
  unsigned int v93;
  int **v94;
  unsigned int *v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;
  int v100;
  int v101;
  void **v102;
  unint64_t v103;
  uint64_t *v105;
  char v106;
  void **v107;
  unint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  void *v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  void *v116;
  uint64_t *v117;
  __int128 v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  _DWORD *v145;
  unsigned int v146;
  char *v147;
  _BYTE *v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  char *v155;
  _QWORD *v156;
  unint64_t v157;
  BOOL v158;
  unint64_t v160;
  _QWORD *i;
  unint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  int v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  char *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  char *v175;
  const llvm::MachineBasicBlock *v176;
  unint64_t v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  unsigned int NumExplicitOperands;
  _DWORD *v183;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int16 *v191;
  int v192;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t NamedMetadata;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  unint64_t FirstTerminator;
  uint64_t *v207;
  uint64_t v208;
  llvm::MachineFunction *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int16 *v227;
  int v228;
  unsigned int v229;
  int v230;
  uint64_t v231;
  _BOOL4 hasUnmodeledSideEffects;
  uint64_t v233;
  unsigned int v234;
  unint64_t v235;
  unint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  llvm::MachineFunction *v244;
  llvm::MachineInstr *v245;
  llvm::MachineInstr *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int8 v254;
  BOOL v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  _DWORD *v259;
  int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  __int128 *v265;
  unsigned int v266;
  llvm *v267;
  llvm::Value **v268;
  unint64_t v269;
  unsigned __int16 *v270;
  uint64_t v271;
  unint64_t v273;
  llvm *v274;
  void *v275;
  llvm *v276;
  llvm::raw_ostream *v277;
  _DWORD *v278;
  llvm::Value *v279;
  size_t v280;
  char *Name;
  size_t v282;
  llvm *v283;
  llvm::raw_ostream *v284;
  uint64_t v285;
  size_t v286;
  char *v287;
  size_t v288;
  void *v289;
  llvm *v290;
  uint64_t v291;
  llvm::raw_ostream *v292;
  llvm *v293;
  llvm *v294;
  llvm *v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  _WORD *v301;
  unsigned __int16 *v302;
  __int16 v303;
  unsigned __int16 v304;
  int v305;
  llvm *v306;
  _DWORD *v307;
  _WORD *v308;
  uint64_t (**v309)(void);
  llvm *v310;
  uint64_t v311;
  llvm *v312;
  llvm *v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  _WORD *v319;
  unsigned __int16 *v320;
  __int16 v321;
  unsigned __int16 v322;
  int v323;
  llvm *v324;
  _DWORD *v325;
  _WORD *v326;
  uint64_t (**v327)(void);
  llvm *v328;
  llvm::raw_ostream *v329;
  uint64_t v330;
  _BYTE *v331;
  const llvm::MachineBasicBlock *v332;
  uint64_t v333;
  int v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  __int128 *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  int v343;
  unsigned int v344;
  unsigned int RegSizeInBits;
  uint64_t v346;
  int v347;
  int v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unsigned __int16 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned __int16 v356;
  unsigned __int16 *v357;
  unsigned __int16 *v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  unsigned __int16 v362;
  unsigned __int16 *v363;
  uint64_t v364;
  int v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unsigned int v371;
  unsigned __int16 *v372;
  unsigned __int16 *v373;
  int v374;
  unsigned int v375;
  uint64_t v376;
  unint64_t v377;
  llvm::MachineMemOperand *MachineMemOperand;
  uint64_t *v380;
  unint64_t v381;
  _BOOL4 v382;
  llvm::MachineFunction *v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  int v387;
  char v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  int v392;
  llvm::Value **v393;
  const llvm::MachineBasicBlock *v394;
  _QWORD *v395;
  char v396;
  const llvm::MachineBasicBlock *v397;
  uint64_t v398;
  char v399;
  uint64_t v400;
  char v401;
  unint64_t *v402;
  uint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  __int16 v408;
  void *v409;
  uint64_t v410;
  void *v411[2];
  int v412;
  _BYTE v413[32];
  void *v414;
  unint64_t v415;
  _QWORD *v416;
  _QWORD *v417;
  uint64_t v418;
  _QWORD *v419;
  _QWORD v420[4];
  void *v421;
  uint64_t v422;
  _QWORD v423[6];
  char v424;
  void *v425;
  uint64_t v426;
  _BYTE v427[128];
  _QWORD v428[2];
  int v429;
  __int128 v430;
  __int128 v431;
  unsigned int v432;
  __int128 v433;
  __int128 v434;
  int v435;
  char v436;
  void *v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  int v442;
  char v443;
  void *v444;
  uint64_t v445;
  _BYTE v446[128];
  uint64_t v447;
  uint64_t v448;
  int v449;
  __int128 v450;
  __int128 v451;
  unsigned int v452;
  __int128 v453;
  __int128 v454;
  int v455;
  unsigned __int8 *v456;
  uint64_t v457;
  uint64_t v458;
  unsigned __int8 **v459;
  uint64_t v460;

  v460 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  a1[32] = v4;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v389 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[32] + 176))(a1[32]);
  a1[33] = v389;
  v383 = (llvm::MachineFunction *)a2;
  v384 = a1;
  a1[34] = a2[5];
  if (!byte_1ED7EDA18 || (v5 = (_QWORD *)a2[41], v386 = a2 + 40, v5 == a2 + 40))
  {
    LOBYTE(v6) = 0;
    goto LABEL_314;
  }
  v6 = 0;
  do
  {
    v387 = v6;
    v392 = 0;
    v390 = v5;
    v391 = *(_QWORD *)(v5[4] + 40);
    v395 = v5 + 6;
    while (2)
    {
      v7 = v5[7];
      v404 = &v406;
      v405 = 0;
      v406 = v389;
      v407 = v391;
      v408 = 0;
      if ((_QWORD *)v7 == v395)
        goto LABEL_311;
      do
      {
        v56 = v406;
        v57 = v407;
        if (!sub_1C4AA8E2C(v7, v406, v407))
          goto LABEL_198;
        v437 = (char *)&v438 + 8;
        *(_QWORD *)&v438 = 0x1000000000;
        v443 = 1;
        v444 = v446;
        v445 = 0x1000000000;
        LOBYTE(v455) = 0;
        v447 = 0;
        v448 = 0;
        v449 = 0;
        v450 = 0u;
        v451 = 0u;
        v452 = 0;
        *(_QWORD *)&v454 = 0;
        v453 = 0uLL;
        BYTE8(v454) = 0;
        sub_1C4AA919C((unsigned int *)&v447);
        *(_QWORD *)&v450 = v56;
        *((_QWORD *)&v450 + 1) = v57;
        sub_1C4AA919C((unsigned int *)&v451);
        *(_QWORD *)&v453 = v56;
        *((_QWORD *)&v453 + 1) = v57;
        v58 = *(_QWORD *)(v7 + 24) + 48;
        v59 = v7;
        if (v7 == v58)
        {
LABEL_116:
          if (v59 != v58)
          {
            LODWORD(v438) = 0;
            sub_1C4AA919C((unsigned int *)&v447);
            sub_1C4AA919C((unsigned int *)&v451);
            LODWORD(v445) = 0;
            BYTE8(v454) = 0;
            LOBYTE(v455) = 0;
            v58 = v59;
            v443 = 1;
          }
        }
        else
        {
          v59 = v7;
          while (sub_1C4AA8E2C(v59, v450, *((uint64_t *)&v450 + 1)))
          {
            v60 = *(unsigned int **)(v59 + 32);
            if (((v60[8] >> 26) & ~HIBYTE(v60[8]) & 1) == 0)
              goto LABEL_116;
            v61 = v60[9];
            v62 = v60[1];
            if (sub_1C4AA92DC((uint64_t)&v447, v60[1]) || sub_1C4AA92DC((uint64_t)&v447, v61))
              goto LABEL_116;
            v409 = v411;
            v410 = 0x400000000;
            sub_1C4AA90E4(&v456, v62, *(_QWORD *)(v453 + 8), *(_QWORD *)(v453 + 56));
            v63 = (int *)v456;
            if ((_DWORD)v457)
            {
              v64 = v410;
              v65 = 4 * v457;
              do
              {
                v66 = sub_1C4AA9578(v451, v452, *v63);
                if (v64 >= HIDWORD(v410))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v409, (uint64_t)v411, v64 + 1, 8);
                  v64 = v410;
                }
                *((_QWORD *)v409 + v64) = v66;
                v64 = v410 + 1;
                LODWORD(v410) = v410 + 1;
                ++v63;
                v65 -= 4;
              }
              while (v65);
              v63 = (int *)v456;
            }
            if (v63 != (int *)&v458)
              free(v63);
            v67 = (void **)v409;
            if ((_DWORD)v410)
            {
              v68 = 0;
              v69 = 8 * v410;
              while (*(_DWORD *)((char *)v409 + v68))
              {
                v68 += 8;
                if (v69 == v68)
                {
                  v70 = 0;
                  v71 = *((_DWORD *)v409 + 1);
                  while (*(_DWORD *)((char *)v409 + v70 + 4) == v71)
                  {
                    v70 += 8;
                    if (v69 == v70)
                      goto LABEL_99;
                  }
                  break;
                }
              }
              v71 = 0;
            }
            else
            {
              v71 = *((_DWORD *)v409 + 1);
LABEL_99:
              if (!sub_1C4AA8EDC(v62, v71, v453, *((uint64_t *)&v453 + 1)))
                v71 = 0;
              v67 = (void **)v409;
            }
            if (v67 != v411)
              free(v67);
            if (v71)
            {
              v72 = v438;
            }
            else
            {
              if (sub_1C4AA92DC((uint64_t)&v451, v62))
                goto LABEL_116;
              v73 = v438;
              if ((_DWORD)v438)
                goto LABEL_121;
              v72 = 0;
            }
            if (v72 >= DWORD1(v438))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v437, (uint64_t)&v438 + 8, v72 + 1, 8);
              v72 = v438;
            }
            *((_QWORD *)v437 + v72) = v59;
            LODWORD(v438) = v438 + 1;
            sub_1C4AA93C8((uint64_t)&v447, v61, v62);
            sub_1C4AA93C8((uint64_t)&v451, v62, v61);
            if ((*(_BYTE *)v59 & 4) == 0)
            {
              while ((*(_WORD *)(v59 + 44) & 8) != 0)
                v59 = *(_QWORD *)(v59 + 8);
            }
            v59 = *(_QWORD *)(v59 + 8);
            if (v59 == v58)
              goto LABEL_119;
          }
          v58 = v59;
        }
LABEL_119:
        v73 = v438;
        if (!(_DWORD)v438)
        {
          *(_QWORD *)&v454 = v58;
          LOBYTE(v414) = 0;
          v436 = 0;
          v77 = v451;
          goto LABEL_136;
        }
        v59 = v58;
LABEL_121:
        v74 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v437 + v73 - 1) + 32) + 36);
        v75 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v437 + 32) + 4);
        if (!(_BYTE)v455)
          LOBYTE(v455) = 1;
        *((_QWORD *)&v454 + 1) = v74 | (v75 << 32);
        *(_QWORD *)&v454 = v59;
        v52 = &v416;
        v414 = &v416;
        v415 = 0x1000000000;
        if (v437 != (char *)&v438 + 8)
        {
          v414 = v437;
          v415 = __PAIR64__(DWORD1(v438), v73);
          v437 = (char *)&v438 + 8;
          DWORD1(v438) = 0;
          goto LABEL_127;
        }
        v50 = v73;
        v51 = (char *)&v438 + 8;
        if (v73 < 0x11)
          goto LABEL_125;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v414, (uint64_t)&v416, v73, 8);
        v50 = v438;
        if ((_DWORD)v438)
        {
          v51 = (char *)v437;
          v52 = (_QWORD **)v414;
LABEL_125:
          memcpy(v52, v51, 8 * v50);
        }
        LODWORD(v415) = v73;
LABEL_127:
        LODWORD(v438) = 0;
        v424 = v443;
        v425 = v427;
        v426 = 0x1000000000;
        v76 = v445;
        if ((_DWORD)v445)
        {
          if (v444 != v446)
          {
            v425 = v444;
            v426 = v445;
            v444 = v446;
            HIDWORD(v445) = 0;
LABEL_133:
            LODWORD(v445) = 0;
            goto LABEL_134;
          }
          if (v445 >= 0x11)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v425, (uint64_t)v427, v445, 8);
            v53 = v445;
            if (!(_DWORD)v445)
            {
LABEL_132:
              LODWORD(v426) = v76;
              goto LABEL_133;
            }
            v54 = v444;
            v55 = v425;
          }
          else
          {
            v55 = v427;
            v54 = v446;
            v53 = v445;
          }
          memcpy(v55, v54, 8 * v53);
          goto LABEL_132;
        }
LABEL_134:
        v77 = 0;
        v428[0] = v447;
        v429 = v449;
        v431 = v451;
        v432 = v452;
        v435 = v455;
        v447 = 0;
        v428[1] = v448;
        v448 = 0;
        v449 = 0;
        v430 = v450;
        v451 = 0uLL;
        v452 = 0;
        v433 = v453;
        v434 = v454;
        v436 = 1;
LABEL_136:
        MEMORY[0x1CAA32FB4](v77, 4);
        MEMORY[0x1CAA32FB4](v447, 4);
        if (v444 != v446)
          free(v444);
        if (v437 != (char *)&v438 + 8)
          free(v437);
        if (!v436)
          goto LABEL_198;
        v78 = v434;
        v79 = v405;
        if ((_DWORD)v405)
        {
          do
          {
            --v79;
            v80 = (char *)v404;
            v81 = (char *)v404 + 400 * v79;
            v82 = *((unsigned int *)v81 + 2);
            if ((_DWORD)v82)
            {
              v83 = (char *)v404 + 400 * v79;
              if (v83[392] && (_DWORD)v415 && (_BYTE)v435)
              {
                v84 = *((_QWORD *)v83 + 48);
                v85 = (_DWORD)v82 == (_DWORD)v415 && (_DWORD)v84 == HIDWORD(v434);
                if (v85 && HIDWORD(v84) == DWORD2(v434))
                {
                  v88 = 0;
                  v89 = v82 - 1;
                  while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v81 + 8 * v88) + 32) + 4) == *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v414 + v89) + 32) + 36))
                  {
                    ++v88;
                    --v89;
                    if (v82 == v88)
                    {
                      if (*((_BYTE *)v404 + 400 * v79 + 144))
                      {
                        sub_1C4AA9A2C((unsigned int *)v404 + 100 * v79);
                        sub_1C4AA9A2C((unsigned int *)&v414);
                        v90 = &v80[400 * v79];
                        v93 = *((_DWORD *)v90 + 40);
                        v92 = v90 + 160;
                        v91 = v93;
                        if (v93)
                        {
                          v94 = (int **)*((_QWORD *)v92 - 1);
                          v95 = (unsigned int *)&v80[400 * v79 + 388];
                          v96 = 8 * v91;
                          do
                          {
                            v98 = *v94++;
                            v97 = v98;
                            v99 = (*v98 >> 26) & ~HIBYTE(*v98);
                            llvm::MachineOperand::setReg((uint64_t)v98, *v95);
                            v100 = *v98;
                            v101 = *v98 | 0x4000000;
                            if ((v99 & 1) != 0)
                              v100 = v101;
                            *v97 = v100 | 0x8000000;
                            v96 -= 8;
                          }
                          while (v96);
                        }
                        *v92 = 0;
                        LOBYTE(v408) = 1;
                      }
                      else if ((_DWORD)v82 != 1)
                      {
                        LOBYTE(v408) = 1;
                        sub_1C4AA97D4((unsigned int *)v404 + 100 * v79);
                        sub_1C4AA97D4((unsigned int *)&v414);
                      }
                      goto LABEL_192;
                    }
                  }
                }
              }
              if ((sub_1C4AA9A8C((uint64_t)v404 + 400 * v79, (uint64_t)v428) & 1) != 0
                || sub_1C4AA9A8C((uint64_t)v81, (uint64_t)&v431))
              {
                *((_DWORD *)v81 + 2) = 0;
                v87 = (unsigned int *)&v80[400 * v79];
                sub_1C4AA919C(v87 + 74);
                sub_1C4AA919C(v87 + 84);
                v87[40] = 0;
                v83[384] = 0;
                v83[392] = 0;
                *((_BYTE *)v87 + 144) = 1;
                HIBYTE(v408) = 1;
              }
            }
          }
          while (v79);
          v49 = v405;
        }
        else
        {
          v49 = 0;
        }
        v15 = (uint64_t *)v404;
        if (v49 < HIDWORD(v405))
        {
          v47 = &v414;
          v48 = &v415;
          goto LABEL_171;
        }
        v13 = v404 <= &v414 && (char *)v404 + 400 * v49 > (char *)&v414;
        if (v13)
          v14 = 0x8F5C28F5C28F5C29 * (((char *)&v414 - (_BYTE *)v404) >> 4);
        else
          v14 = -1;
        v437 = 0;
        v15 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v404, v49 + 1, 400, (unint64_t *)&v437);
        v16 = (uint64_t *)v404;
        if (!(_DWORD)v405)
          goto LABEL_60;
        v382 = v13;
        v381 = v14;
        v17 = 0;
        v385 = 400 * v405;
        do
        {
          v18 = &v15[v17 / 8];
          v19 = &v16[v17 / 8];
          v20 = &v15[v17 / 8 + 2];
          *v18 = (uint64_t)v20;
          v18[1] = 0x1000000000;
          v21 = &v16[v17 / 8];
          if (v16 == v15)
            goto LABEL_32;
          v22 = *((unsigned int *)v19 + 2);
          if (!*((_DWORD *)v19 + 2))
            goto LABEL_32;
          v23 = &v16[v17 / 8];
          v25 = (uint64_t)&v16[v17 / 8 + 2];
          v24 = (const void *)v16[v17 / 8];
          if ((const void *)v25 != v24)
          {
            *v18 = (uint64_t)v24;
            *((_DWORD *)v18 + 2) = v22;
            *((_DWORD *)v18 + 3) = *((_DWORD *)v23 + 3);
            *v23 = v25;
            *((_DWORD *)v23 + 3) = 0;
            goto LABEL_31;
          }
          if (v22 >= 0x11)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[v17 / 8], (uint64_t)&v15[v17 / 8 + 2], *((unsigned int *)v19 + 2), 8);
            v19 = &v16[v17 / 8];
            v26 = *((unsigned int *)v21 + 2);
            if (!(_DWORD)v26)
              goto LABEL_30;
            v24 = (const void *)*v21;
            v20 = (uint64_t *)*v18;
          }
          else
          {
            v26 = *((unsigned int *)v19 + 2);
          }
          memcpy(v20, v24, 8 * v26);
          v19 = &v16[v17 / 8];
LABEL_30:
          *((_DWORD *)v18 + 2) = v22;
LABEL_31:
          *((_DWORD *)v19 + 2) = 0;
LABEL_32:
          *((_BYTE *)v18 + 144) = *((_BYTE *)v19 + 144);
          v27 = v18 + 21;
          v18[19] = (uint64_t)(v18 + 21);
          v18[20] = 0x1000000000;
          v28 = *((_DWORD *)v19 + 40);
          if (v28)
            v29 = v19 == v18;
          else
            v29 = 1;
          if (!v29)
          {
            v30 = (const void *)v19[19];
            v31 = &v16[v17 / 8];
            v32 = (uint64_t)&v16[v17 / 8 + 21];
            if ((const void *)v32 == v30)
            {
              if (v28 < 0x11)
              {
                v33 = *((unsigned int *)v19 + 40);
                goto LABEL_39;
              }
              v380 = v19;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 19), (uint64_t)(v18 + 21), *((unsigned int *)v19 + 40), 8);
              v33 = *((unsigned int *)v380 + 40);
              if ((_DWORD)v33)
              {
                v30 = (const void *)v21[19];
                v27 = (void *)v18[19];
LABEL_39:
                memcpy(v27, v30, 8 * v33);
              }
              *((_DWORD *)v18 + 40) = v28;
              v19 = &v16[v17 / 8];
            }
            else
            {
              v18[19] = (uint64_t)v30;
              *((_DWORD *)v18 + 40) = v28;
              *((_DWORD *)v18 + 41) = *((_DWORD *)v31 + 41);
              v19[19] = v32;
              *((_DWORD *)v31 + 41) = 0;
            }
            *((_DWORD *)v19 + 40) = 0;
          }
          v34 = &v15[v17 / 8];
          v35 = &v16[v17 / 8];
          v34[37] = 0;
          v34[38] = 0;
          *((_DWORD *)v34 + 78) = 0;
          v34[37] = v16[v17 / 8 + 37];
          v35[37] = 0;
          *((_DWORD *)v34 + 76) = v16[v17 / 8 + 38];
          *((_DWORD *)v35 + 76) = 0;
          v36 = HIDWORD(v15[v17 / 8 + 38]);
          *((_DWORD *)v34 + 77) = HIDWORD(v16[v17 / 8 + 38]);
          *((_DWORD *)v35 + 77) = v36;
          v37 = v15[v17 / 8 + 39];
          *((_DWORD *)v34 + 78) = v16[v17 / 8 + 39];
          *((_DWORD *)v35 + 78) = v37;
          *((_OWORD *)v34 + 20) = *(_OWORD *)&v16[v17 / 8 + 40];
          *((_DWORD *)v34 + 88) = 0;
          v34[42] = 0;
          v34[43] = 0;
          v34[42] = v16[v17 / 8 + 42];
          v35[42] = 0;
          *((_DWORD *)v34 + 86) = v16[v17 / 8 + 43];
          *((_DWORD *)v35 + 86) = 0;
          v38 = HIDWORD(v15[v17 / 8 + 43]);
          *((_DWORD *)v34 + 87) = HIDWORD(v16[v17 / 8 + 43]);
          *((_DWORD *)v35 + 87) = v38;
          v39 = v15[v17 / 8 + 44];
          *((_DWORD *)v34 + 88) = v16[v17 / 8 + 44];
          *((_DWORD *)v35 + 88) = v39;
          *(_OWORD *)&v15[v17 / 8 + 45] = *(_OWORD *)&v16[v17 / 8 + 45];
          v40 = *(_OWORD *)&v16[v17 / 8 + 47];
          *((_DWORD *)v34 + 98) = v16[v17 / 8 + 49];
          *(_OWORD *)&v15[v17 / 8 + 47] = v40;
          v17 += 400;
        }
        while (v385 != v17);
        v16 = (uint64_t *)v404;
        if ((_DWORD)v405)
        {
          v13 = v382;
          v41 = 50 * v405;
          do
          {
            v42 = &v16[v41];
            MEMORY[0x1CAA32FB4](v16[v41 - 8], 4);
            MEMORY[0x1CAA32FB4](v16[v41 - 13], 4);
            v43 = (uint64_t *)v16[v41 - 31];
            if (&v16[v41 - 29] != v43)
              free(v43);
            v44 = (char *)*(v42 - 50);
            if (v42 - 48 != (uint64_t *)v44)
              free(v44);
            v41 -= 50;
          }
          while (v41 * 8);
          v16 = (uint64_t *)v404;
          v14 = v381;
        }
        else
        {
          v14 = v381;
          v13 = v382;
        }
LABEL_60:
        v45 = (int)v437;
        if (v16 != &v406)
          free(v16);
        v404 = v15;
        HIDWORD(v405) = v45;
        v46 = !v13;
        if (v13)
          v47 = (void **)&v15[50 * v14];
        else
          v47 = &v414;
        if (v46)
          v48 = &v415;
        else
          v48 = (unint64_t *)&v15[50 * v14 + 1];
        LODWORD(v49) = v405;
LABEL_171:
        v102 = (void **)&v15[50 * v49];
        v11 = v102 + 2;
        *v102 = v102 + 2;
        v102[1] = (void *)0x1000000000;
        v103 = *(unsigned int *)v48;
        if (v102 != v47 && v103 != 0)
        {
          if (v103 >= 0x11)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[50 * v49], (uint64_t)(v102 + 2), *(unsigned int *)v48, 8);
            v10 = *(unsigned int *)v48;
            if ((_DWORD)v10)
            {
              v11 = *v102;
              goto LABEL_177;
            }
          }
          else
          {
            v10 = *(unsigned int *)v48;
LABEL_177:
            memcpy(v11, *v47, 8 * v10);
          }
          *((_DWORD *)v102 + 2) = v103;
        }
        v105 = &v15[50 * v49];
        v106 = *((_BYTE *)v47 + 144);
        v9 = v105 + 21;
        v105[19] = (uint64_t)(v105 + 21);
        v107 = (void **)(v105 + 19);
        *((_BYTE *)v107 - 8) = v106;
        v107[1] = (void *)0x1000000000;
        v108 = *((unsigned int *)v47 + 40);
        if ((_DWORD)v108 && v107 != v47 + 19)
        {
          if (v108 >= 0x11)
          {
            *((_DWORD *)v107 + 2) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v107, (uint64_t)(v107 + 2), v108, 8);
            v8 = *((unsigned int *)v47 + 40);
            if ((_DWORD)v8)
            {
              v9 = *v107;
              goto LABEL_183;
            }
          }
          else
          {
            v8 = *((unsigned int *)v47 + 40);
LABEL_183:
            memcpy(v9, v47[19], 8 * v8);
          }
          *((_DWORD *)v107 + 2) = v108;
        }
        v109 = &v15[50 * v49];
        v110 = v109 + 37;
        v109[37] = 0;
        v109[38] = 0;
        *((_DWORD *)v109 + 78) = 0;
        MEMORY[0x1CAA32FB4](0, 4);
        v111 = *((unsigned int *)v47 + 78);
        *((_DWORD *)v109 + 78) = v111;
        if ((_DWORD)v111)
        {
          v112 = operator new(12 * v111, (std::align_val_t)4uLL);
          *v110 = v112;
          v109[38] = (uint64_t)v47[38];
          memcpy(v112, v47[37], 12 * *((unsigned int *)v109 + 78));
        }
        else
        {
          *v110 = 0;
          v109[38] = 0;
        }
        v113 = &v15[50 * v49];
        *((_OWORD *)v113 + 20) = *((_OWORD *)v47 + 20);
        v114 = v113 + 42;
        v113[42] = 0;
        v113[43] = 0;
        *((_DWORD *)v113 + 88) = 0;
        MEMORY[0x1CAA32FB4](0, 4);
        v115 = *((unsigned int *)v47 + 88);
        *((_DWORD *)v113 + 88) = v115;
        if ((_DWORD)v115)
        {
          v116 = operator new(12 * v115, (std::align_val_t)4uLL);
          *v114 = v116;
          v113[43] = (uint64_t)v47[43];
          memcpy(v116, v47[42], 12 * *((unsigned int *)v113 + 88));
        }
        else
        {
          *v114 = 0;
          v113[43] = 0;
        }
        v117 = &v15[50 * v49];
        *(_OWORD *)(v117 + 45) = *(_OWORD *)(v47 + 45);
        v118 = *(_OWORD *)(v47 + 47);
        *((_DWORD *)v117 + 98) = *((_DWORD *)v47 + 98);
        *(_OWORD *)(v117 + 47) = v118;
        LODWORD(v405) = v405 + 1;
LABEL_192:
        if (v436)
        {
          MEMORY[0x1CAA32FB4](v431, 4);
          MEMORY[0x1CAA32FB4](v428[0], 4);
          if (v425 != v427)
            free(v425);
          if (v414 != &v416)
            free(v414);
        }
        if (v7 == v78)
        {
LABEL_198:
          v119 = v7;
          if ((*(_BYTE *)v7 & 4) == 0)
          {
            v119 = v7;
            if ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              v119 = v7;
              do
                v119 = *(_QWORD *)(v119 + 8);
              while ((*(_WORD *)(v119 + 44) & 8) != 0);
            }
          }
          v78 = *(_QWORD *)(v119 + 8);
          v120 = v405;
          if ((_DWORD)v405)
          {
            v121 = 0;
            v122 = (char *)v404;
            while (!*(_DWORD *)((char *)v404 + v121 + 8))
            {
              v121 += 400;
              if (400 * v405 == v121)
              {
                v123 = 400 * v405;
                do
                {
                  v124 = &v122[v123];
                  MEMORY[0x1CAA32FB4](*(_QWORD *)&v122[v123 - 64], 4);
                  MEMORY[0x1CAA32FB4](*(_QWORD *)&v122[v123 - 104], 4);
                  v125 = *(char **)&v122[v123 - 248];
                  if (&v122[v123 - 232] != v125)
                    free(v125);
                  v126 = (char *)*((_QWORD *)v124 - 50);
                  if (v124 - 384 != v126)
                    free(v126);
                  v123 -= 400;
                }
                while (v123);
                LODWORD(v405) = 0;
                goto LABEL_286;
              }
            }
            v414 = &v416;
            v415 = 0x400000000;
            v419 = 0;
            v420[0] = 0;
            v418 = (uint64_t)&v419;
            if ((**(_WORD **)(v7 + 16) & 0xFFFE) == 0x104)
            {
              v127 = *(unsigned int *)(v7 + 40);
              if ((_DWORD)v127)
              {
                v128 = *(_QWORD *)(v7 + 32);
                v129 = v128 + 32 * v127;
                v130 = v405;
                do
                {
                  if (*(_BYTE *)v128 == 12)
                  {
                    LODWORD(v437) = 0;
                    if (v130)
                    {
                      v131 = 0;
                      do
                      {
                        v132 = (char *)v404 + 400 * v131;
                        v133 = *((unsigned int *)v132 + 2);
                        if ((_DWORD)v133)
                        {
                          v134 = *(_QWORD *)v132;
                          v135 = v134 + 8 * v133;
                          while (1)
                          {
                            v136 = *(unsigned int *)(*(_QWORD *)v134 + 40);
                            if ((_DWORD)v136)
                              break;
LABEL_226:
                            v134 += 8;
                            if (v134 == v135)
                              goto LABEL_229;
                          }
                          v137 = 32 * v136;
                          v138 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v134 + 32) + 4);
                          while (*((_BYTE *)v138 - 4)
                               || ((*(_DWORD *)(*(_QWORD *)(v128 + 16)
                                              + (((unint64_t)*v138 >> 3) & 0x1FFFFFFC)) >> *v138) & 1) != 0)
                          {
                            v138 += 8;
                            v137 -= 32;
                            if (!v137)
                              goto LABEL_226;
                          }
                          sub_1C4854E58((uint64_t)&v414, (unsigned int *)&v437);
                          v131 = v437;
                          v120 = v405;
                        }
LABEL_229:
                        LODWORD(v437) = ++v131;
                        v130 = v120;
                      }
                      while (v120 > v131);
                    }
                  }
                  v128 += 32;
                }
                while (v128 != v129);
              }
            }
            v139 = *(unsigned int *)(v7 + 40);
            if ((_DWORD)v139)
            {
              v140 = *(_QWORD *)(v7 + 32);
              v141 = v140 + 32 * v139;
              v142 = v120;
              while (1)
              {
                if ((*(_DWORD *)v140 & 0x800000FF) == 0)
                {
                  v143 = *(_DWORD *)(v140 + 4);
                  LODWORD(v437) = 0;
                  if (v142)
                    break;
                }
LABEL_259:
                v140 += 32;
                if (v140 == v141)
                  goto LABEL_260;
              }
              v144 = 0;
              while (2)
              {
                v145 = v404;
                if (*((_DWORD *)v404 + 100 * v144 + 2))
                {
                  v146 = v144;
                  if (sub_1C4AA92DC((uint64_t)v404 + 400 * v144 + 296, v143))
                  {
                    sub_1C4854E58((uint64_t)&v414, (unsigned int *)&v437);
                    goto LABEL_256;
                  }
                  v147 = (char *)&v145[100 * v146];
                  v149 = v147[144];
                  v148 = v147 + 144;
                  if (v149)
                  {
                    v150 = *(_DWORD *)(v140 + 4);
                    v151 = v145[100 * v146 + 96];
                    if (v150 == v151)
                    {
                      if ((*(_DWORD *)v140 & 0x8000000) == 0)
                      {
                        v154 = &v145[100 * v146 + 40];
                        goto LABEL_255;
                      }
                      v152 = *(_QWORD *)(v140 + 8);
                      if (v152)
                      {
                        v153 = *(_QWORD *)(*(_QWORD *)(v152 + 16) + 8);
                        v154 = &v145[100 * v146 + 40];
                        if ((*(_DWORD *)v140 & 0x1000000) != 0)
                        {
                          if ((v153 & 0x100000000) != 0)
                            goto LABEL_255;
                        }
                        else if ((v153 & 0x80000000) != 0)
                        {
LABEL_255:
                          *v148 = 0;
                          *v154 = 0;
                          goto LABEL_256;
                        }
                      }
                      else
                      {
                        v154 = &v145[100 * v146 + 40];
                      }
                      v155 = (char *)&v145[100 * v146];
                      v156 = v155 + 152;
                      v157 = *v154;
                      if (v157 >= *((unsigned int *)v155 + 41))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v156, (uint64_t)&v145[100 * v146 + 42], v157 + 1, 8);
                        v157 = *v154;
                      }
                      *(_QWORD *)(*v156 + 8 * v157) = v140;
                      ++*v154;
                    }
                    else if (v150 - 1 <= 0x3FFFFFFE
                           && v151 - 1 <= 0x3FFFFFFE
                           && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(v406 + 8), v151, v150))
                    {
                      *v148 = 0;
                      v145[100 * v146 + 40] = 0;
                    }
                  }
                }
LABEL_256:
                v144 = (_DWORD)v437 + 1;
                LODWORD(v437) = v144;
                v120 = v405;
                if (v405 <= v144)
                {
                  v142 = v405;
                  goto LABEL_259;
                }
                continue;
              }
            }
LABEL_260:
            if (v420[0])
              v158 = 0;
            else
              v158 = (_DWORD)v415 == 0;
            if (!v158 && v120 != 0)
            {
              v160 = 0;
              if (!v420[0])
              {
LABEL_276:
                if (!(_DWORD)v415)
                  goto LABEL_283;
                v163 = v414;
                v164 = 4 * v415;
                while (v160 != *v163)
                {
                  ++v163;
                  v164 -= 4;
                  if (!v164)
                    goto LABEL_283;
                }
                if (v164)
                {
LABEL_282:
                  v165 = (char *)v404 + 400 * v160;
                  *((_DWORD *)v165 + 2) = 0;
                  sub_1C4AA919C((unsigned int *)v165 + 74);
                  sub_1C4AA919C((unsigned int *)v165 + 84);
                  *((_DWORD *)v165 + 40) = 0;
                  v165[384] = 0;
                  v165[392] = 0;
                  v165[144] = 1;
                  v120 = v405;
                }
                goto LABEL_283;
              }
              while (1)
              {
                for (i = v419; i; i = (_QWORD *)*i)
                {
                  v162 = *((unsigned int *)i + 7);
                  if (v160 >= v162)
                  {
                    if (v160 <= v162)
                      goto LABEL_282;
                    ++i;
                  }
                }
LABEL_283:
                if (++v160 >= v120)
                  break;
                if (!v420[0])
                  goto LABEL_276;
              }
            }
            sub_1C47655E8((uint64_t)&v418, v419);
            if (v414 != &v416)
              free(v414);
          }
        }
LABEL_286:
        v7 = v78;
      }
      while ((_QWORD *)v78 != v395);
      v392 |= (_BYTE)v408 != 0;
      v166 = (uint64_t *)v404;
      if ((_BYTE)v408)
      {
        v167 = HIBYTE(v408);
        if ((_DWORD)v405)
        {
          v168 = 50 * v405;
          do
          {
            v169 = &v166[v168];
            MEMORY[0x1CAA32FB4](v166[v168 - 8], 4);
            MEMORY[0x1CAA32FB4](v166[v168 - 13], 4);
            v170 = (uint64_t *)v166[v168 - 31];
            if (&v166[v168 - 29] != v170)
              free(v170);
            v171 = (char *)*(v169 - 50);
            if (v169 - 48 != (uint64_t *)v171)
              free(v171);
            v168 -= 50;
          }
          while (v168 * 8);
          v166 = (uint64_t *)v404;
        }
        if (v166 != &v406)
          free(v166);
        v5 = v390;
        if (!v167)
          goto LABEL_311;
        continue;
      }
      break;
    }
    if ((_DWORD)v405)
    {
      v172 = 50 * v405;
      do
      {
        v173 = &v166[v172];
        MEMORY[0x1CAA32FB4](v166[v172 - 8], 4);
        MEMORY[0x1CAA32FB4](v166[v172 - 13], 4);
        v174 = (uint64_t *)v166[v172 - 31];
        if (&v166[v172 - 29] != v174)
          free(v174);
        v175 = (char *)*(v173 - 50);
        if (v173 - 48 != (uint64_t *)v175)
          free(v175);
        v172 -= 50;
      }
      while (v172 * 8);
      v166 = (uint64_t *)v404;
    }
    if (v166 != &v406)
      free(v166);
    v5 = v390;
LABEL_311:
    v6 = v387 | v392;
    v5 = (_QWORD *)v5[1];
  }
  while (v5 != v386);
LABEL_314:
  if (byte_1ED7EDB98)
    return v6 & 1;
  v388 = v6;
  v410 = (uint64_t)v413;
  v411[0] = v413;
  v411[1] = (void *)4;
  v412 = 0;
  v409 = &off_1E7FAD830;
  v416 = v420;
  v417 = v420;
  v418 = 4;
  LODWORD(v419) = 0;
  v414 = &off_1E7FA1778;
  v415 = (unint64_t)&unk_1E7FA17D0;
  v421 = v423;
  v423[0] = &v409;
  v422 = 0x400000001;
  *((_QWORD *)v383 + 91) = &v414;
  v176 = (const llvm::MachineBasicBlock *)*((_QWORD *)v383 + 41);
  v394 = (llvm::MachineFunction *)((char *)v383 + 320);
  if (v176 != (llvm::MachineFunction *)((char *)v383 + 320))
  {
    while (1)
    {
      v177 = *((_QWORD *)v176 + 6) & 0xFFFFFFFFFFFFFFF8;
      v402 = (unint64_t *)((char *)v176 + 48);
      if ((const llvm::MachineBasicBlock *)((char *)v176 + 48) != (const llvm::MachineBasicBlock *)v177)
      {
        if (!v177 || (*(_BYTE *)v177 & 4) == 0)
        {
          while ((*(_WORD *)(v177 + 44) & 4) != 0)
            v177 = *(_QWORD *)v177 & 0xFFFFFFFFFFFFFFF8;
        }
        do
        {
          v189 = v177;
          v190 = *((_QWORD *)v176 + 7);
          if (v177 != v190)
          {
            v177 = *(_QWORD *)v177 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)v189 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v177 & 4) == 0)
            {
              while ((*(_WORD *)(v177 + 44) & 4) != 0)
                v177 = *(_QWORD *)v177 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          v191 = *(unsigned __int16 **)(v189 + 16);
          v192 = *v191;
          if ((v192 - 13) < 5 || v192 == 3)
            continue;
          v178 = v192 - 1;
          if (v178 <= 1 && (*(_BYTE *)(*(_QWORD *)(v189 + 32) + 48) & 8) != 0)
            continue;
          v179 = *(unsigned __int16 *)(v189 + 44);
          v180 = (v179 >> 2) & 1;
          if ((v179 & 0xC) == 0)
            LOBYTE(v180) = 1;
          v181 = *((_QWORD *)v191 + 1);
          if ((v180 & 1) != 0)
          {
            if ((v181 & 0x80000) != 0)
              continue;
          }
          else
          {
            v187 = v189;
            if ((v181 & 0x80000) != 0)
              continue;
            while ((*(_WORD *)(v187 + 44) & 8) != 0)
            {
              v187 = *(_QWORD *)(v187 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v187 + 16) + 10) & 8) != 0)
                goto LABEL_370;
            }
          }
          if (v178 > 1 || (*(_BYTE *)(*(_QWORD *)(v189 + 32) + 48) & 0x10) == 0)
          {
            if ((v180 & 1) != 0)
            {
              if ((v181 & 0x100000) == 0)
                goto LABEL_331;
            }
            else
            {
              v188 = v189;
              if ((v181 & 0x100000) == 0)
              {
                while ((*(_WORD *)(v188 + 44) & 8) != 0)
                {
                  v188 = *(_QWORD *)(v188 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v188 + 16) + 10) & 0x10) != 0)
                    goto LABEL_370;
                }
LABEL_331:
                if (!llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v189))
                {
                  NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v189);
                  if (NumExplicitOperands == *(_DWORD *)(v189 + 40))
                  {
                    if (NumExplicitOperands)
                    {
                      v183 = *(_DWORD **)(v189 + 32);
                      v184 = 32 * NumExplicitOperands;
                      while ((*v183 & 0x10000FF) != 0x1000000 || (*v183 & 0x5000000) == 83886080)
                      {
                        v183 += 8;
                        v184 -= 32;
                        if (!v184)
                          goto LABEL_341;
                      }
                    }
                    else
                    {
LABEL_341:
                      v186 = v189;
                      if ((v179 & 8) != 0)
                      {
                        v186 = v189;
                        if ((*(_QWORD *)v189 & 4) == 0)
                        {
                          v186 = v189;
                          do
                            v186 = *(_QWORD *)(v186 + 8);
                          while ((*(_WORD *)(v186 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(v189 + 24) + 40, v189, *(_QWORD *)(v186 + 8));
                    }
                  }
                }
              }
            }
          }
LABEL_370:
          ;
        }
        while (v189 != v190);
      }
      v194 = (uint64_t *)*((_QWORD *)v176 + 4);
      v195 = *v194;
      v397 = v176;
      if (!*(_BYTE *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v194[1] + 16))(v194[1], *v194) + 295))
        goto LABEL_407;
      v196 = *(_QWORD *)(v195 + 40);
      v437 = "tpp_functions";
      WORD4(v439) = 259;
      NamedMetadata = llvm::Module::getNamedMetadata(v196, (uint64_t)&v437);
      if (NamedMetadata)
      {
        v198 = *(uint64_t **)(NamedMetadata + 48);
        v199 = *((unsigned int *)v198 + 2);
        if ((_DWORD)v199)
          break;
      }
LABEL_377:
      v201 = (uint64_t *)*((_QWORD *)v176 + 11);
      if (((*((_QWORD *)v176 + 12) - (_QWORD)v201) & 0x7FFFFFFF8) != 8)
        goto LABEL_407;
      v202 = *v201;
      v203 = *v201 + 48;
      v204 = -1;
      v205 = v203;
      do
      {
        v205 = *(_QWORD *)(v205 + 8);
        ++v204;
      }
      while (v205 != v203);
      if (v204 != 1 || **(_WORD **)(*(_QWORD *)(v202 + 56) + 16) != 623)
        goto LABEL_407;
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v176);
      v207 = (uint64_t *)((char *)v176 + 40);
      sub_1C487FE80((uint64_t)v176 + 40, FirstTerminator, (uint64_t)v402);
      v208 = *(_QWORD *)(v202 + 56);
      if (v208 == v203)
      {
        v396 = 1;
      }
      else
      {
        do
        {
          v209 = *(llvm::MachineFunction **)(v202 + 32);
          v210 = *((_QWORD *)v209 + 28);
          if (v210)
            *((_QWORD *)v209 + 28) = *(_QWORD *)v210;
          else
            v210 = sub_1C484358C((uint64_t)v209 + 128, 72, 3);
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v210, v209, (const llvm::MachineInstr *)v208);
          v211 = *v207;
          *(_QWORD *)(v210 + 24) = *v207;
          v212 = *(_QWORD *)(v211 + 32);
          v213 = *(unsigned int *)(v210 + 40);
          if ((_DWORD)v213)
          {
            v216 = *(_QWORD *)(v210 + 32);
            v217 = *(_QWORD *)(v212 + 40);
            v218 = 32 * v213;
            do
            {
              if (!*(_BYTE *)v216)
              {
                v219 = *(unsigned int *)(v216 + 4);
                if ((int)v219 >= 0)
                  v220 = (uint64_t *)(*(_QWORD *)(v217 + 272) + 8 * v219);
                else
                  v220 = (uint64_t *)(*(_QWORD *)(v217 + 24) + 16 * (v219 & 0x7FFFFFFF) + 8);
                v221 = *v220;
                if (*v220)
                {
                  v222 = *(_QWORD *)(v221 + 16);
                  *(_QWORD *)(v221 + 16) = v216;
                  *(_QWORD *)(v216 + 16) = v222;
                  if ((*(_BYTE *)(v216 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v216 + 24) = v221;
                  }
                  else
                  {
                    *(_QWORD *)(v216 + 24) = 0;
                    v220 = (uint64_t *)(v222 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v216 + 16) = v216;
                  *(_QWORD *)(v216 + 24) = 0;
                }
                *v220 = v216;
              }
              v216 += 32;
              v218 -= 32;
            }
            while (v218);
          }
          v214 = *(_QWORD *)(v212 + 728);
          if (v214)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v214 + 24))(v214, v210);
          v215 = *v402 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v210 = v215 | *(_QWORD *)v210 & 7;
          *(_QWORD *)(v210 + 8) = v402;
          *(_QWORD *)(v215 + 8) = v210;
          *v402 = *v402 & 7 | v210;
          if ((*(_BYTE *)v208 & 4) == 0)
          {
            while ((*(_WORD *)(v208 + 44) & 8) != 0)
              v208 = *(_QWORD *)(v208 + 8);
          }
          v208 = *(_QWORD *)(v208 + 8);
        }
        while (v208 != v203);
        v396 = 1;
        v176 = v397;
      }
LABEL_408:
      v223 = *v402 & 0xFFFFFFFFFFFFFFF8;
      if (v402 != (unint64_t *)v223)
      {
        if (!v223 || (*(_BYTE *)v223 & 4) == 0)
        {
          while ((*(_WORD *)(v223 + 44) & 4) != 0)
            v223 = *(_QWORD *)v223 & 0xFFFFFFFFFFFFFFF8;
        }
        v224 = 0;
        v399 = 0;
        while (1)
        {
          v225 = v223;
          v223 = *(_QWORD *)v223 & 0xFFFFFFFFFFFFFFF8;
          if (!v223 || (*(_BYTE *)v223 & 4) == 0)
          {
            while ((*(_WORD *)(v223 + 44) & 4) != 0)
              v223 = *(_QWORD *)v223 & 0xFFFFFFFFFFFFFFF8;
          }
          v226 = *((_QWORD *)v176 + 7);
          v227 = *(unsigned __int16 **)(v225 + 16);
          v228 = *v227;
          if ((unsigned __int16)(v228 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v225 + 32) + 48) & 8) != 0)
            break;
          v229 = *(unsigned __int16 *)(v225 + 44);
          v29 = (v229 & 0xC) == 0;
          v230 = (v229 >> 2) & 1;
          if (v29)
            LOBYTE(v230) = 1;
          v231 = *((_QWORD *)v227 + 1);
          if ((v230 & 1) != 0)
          {
            if ((v231 & 0x80000) != 0)
              break;
          }
          else
          {
            v233 = v225;
            if ((v231 & 0x80000) != 0)
              break;
            while ((*(_WORD *)(v233 + 44) & 8) != 0)
            {
              v233 = *(_QWORD *)(v233 + 8);
              hasUnmodeledSideEffects = 1;
              if ((*(_BYTE *)(*(_QWORD *)(v233 + 16) + 10) & 8) != 0)
                goto LABEL_438;
            }
          }
          if ((unsigned __int16)(v228 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v225 + 32) + 48) & 0x10) != 0)
            break;
          if ((v230 & 1) != 0)
          {
            if ((v231 & 0x100000) != 0)
              break;
          }
          else
          {
            v258 = v225;
            if ((v231 & 0x100000) != 0)
              break;
            while ((*(_WORD *)(v258 + 44) & 8) != 0)
            {
              v258 = *(_QWORD *)(v258 + 8);
              hasUnmodeledSideEffects = 1;
              if ((*(_BYTE *)(*(_QWORD *)(v258 + 16) + 10) & 0x10) != 0)
                goto LABEL_438;
            }
          }
          hasUnmodeledSideEffects = llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v225);
LABEL_438:
          if (v228 == 336 || !hasUnmodeledSideEffects)
          {
            v246 = (llvm::MachineInstr *)v224;
          }
          else if (v228 == 414 || v228 == 9187 || v228 == 6846)
          {
            if (v224 && **(unsigned __int16 **)(v224 + 16) == v228)
            {
              v234 = sub_1C4C2FD5C(v228);
              v235 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16);
              v236 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 32 * v234 + 16);
              v237 = (v235 >> 1) & 7;
              if (v235 == v236)
              {
                v238 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16) & 0xF80;
                v239 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16) & 0x70;
                goto LABEL_447;
              }
              v249 = (v236 >> 1) & 7;
              v250 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16) & 0xF80;
              v251 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 32 * v234 + 16) & 0xF80;
              v252 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16) & 0x70;
              v253 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 32 * v234 + 16) & 0x70;
              if (v237 == v249)
              {
                v239 = v253 | v252;
                v238 = v251 | v250;
                if (v250 == v251)
                  goto LABEL_447;
                if (((v235 >> 10) & 1) == ((v236 >> 10) & 1)
                  || ((v235 & 0x400) == 0
                    ? (v254 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 32 * v234 + 16))
                    : (v254 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16)),
                      ((v239 ^ v254) & 0x60) == 0))
                {
                  if (((v235 >> 7) & 1) != ((v236 >> 7) & 1))
                  {
                    if ((v235 & 0x80) == 0)
                      LOBYTE(v235) = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 32 * v234 + 16);
                    v246 = (llvm::MachineInstr *)v225;
                    if (((v239 ^ v235) & 0x60) != 0)
                      goto LABEL_485;
                  }
LABEL_447:
                  v240 = v239 | v238 | (2 * v237);
LABEL_448:
                  v400 = v240;
                  v241 = *(_QWORD *)(v225 + 24);
                  v440 = 0u;
                  v441 = 0u;
                  v438 = 0u;
                  v439 = 0u;
                  v242 = *(_QWORD *)(v241 + 32);
                  v437 = &off_1E816EC08;
                  *(_QWORD *)&v438 = v242;
                  *(_QWORD *)&v439 = *(_QWORD *)(v242 + 40);
                  *((_QWORD *)&v438 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v242 + 16) + 104))(*(_QWORD *)(v242 + 16));
                  v456 = 0;
                  if (*((_QWORD *)&v439 + 1))
                  {
                    llvm::MetadataTracking::untrack((uint64_t)&v439 + 8, *((unsigned __int8 **)&v439 + 1));
                    *((_QWORD *)&v439 + 1) = v456;
                    if (v456)
                      llvm::MetadataTracking::retrack((uint64_t)&v456, v456, (uint64_t)&v439 + 8);
                  }
                  else
                  {
                    *((_QWORD *)&v439 + 1) = 0;
                  }
                  *(_QWORD *)&v441 = 0;
                  *((_QWORD *)&v440 + 1) = v225;
                  *(_QWORD *)&v440 = *(_QWORD *)(v225 + 24);
                  *((_QWORD *)&v440 + 1) = v225;
                  if ((__int128 *)(v225 + 56) != (__int128 *)((char *)&v439 + 8))
                  {
                    if (*((_QWORD *)&v439 + 1))
                      llvm::MetadataTracking::untrack((uint64_t)&v439 + 8, *((unsigned __int8 **)&v439 + 1));
                    v243 = *(unsigned __int8 **)(v225 + 56);
                    *((_QWORD *)&v439 + 1) = v243;
                    if (v243)
                      llvm::MetadataTracking::track((uint64_t)&v439 + 8, v243, 2);
                  }
                  v244 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v437, **(unsigned __int16 **)(v225 + 16), 0, 0, 0, 0, 0);
                  v246 = v245;
                  LODWORD(v456) = 1;
                  v457 = 0;
                  v458 = 0;
                  llvm::MachineInstr::addOperand(v245, v244, (const llvm::MachineOperand *)&v456);
                  LODWORD(v456) = 1;
                  v457 = 0;
                  v458 = v400;
                  llvm::MachineInstr::addOperand(v246, v244, (const llvm::MachineOperand *)&v456);
                  v247 = v225;
                  if ((*(_BYTE *)v225 & 4) == 0)
                  {
                    v247 = v225;
                    if ((*(_WORD *)(v225 + 44) & 8) != 0)
                    {
                      v247 = v225;
                      do
                        v247 = *(_QWORD *)(v247 + 8);
                      while ((*(_WORD *)(v247 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v225 + 24) + 40, v225, *(_QWORD *)(v247 + 8));
                  v248 = v224;
                  v176 = v397;
                  if ((*(_BYTE *)v224 & 4) == 0)
                  {
                    v248 = v224;
                    if ((*(_WORD *)(v224 + 44) & 8) != 0)
                    {
                      v248 = v224;
                      do
                        v248 = *(_QWORD *)(v248 + 8);
                      while ((*(_WORD *)(v248 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v224 + 24) + 40, v224, *(_QWORD *)(v248 + 8));
                  v437 = &off_1E816EC08;
                  if (*((_QWORD *)&v439 + 1))
                    llvm::MetadataTracking::untrack((uint64_t)&v439 + 8, *((unsigned __int8 **)&v439 + 1));
                  v399 = 1;
                  goto LABEL_485;
                }
              }
              else if (((v236 | v235) & 0x400) == 0 && v250 == v251 && v252 == v253)
              {
                v255 = v237 >= 3;
                v256 = (v237 < 3) ^ (v249 < 3);
                v257 = 4;
                if (v255)
                  v257 = 10;
                v246 = (llvm::MachineInstr *)v225;
                if ((v256 & 1) != 0)
                  goto LABEL_485;
                v240 = v257 | *(_QWORD *)(*(_QWORD *)(v224 + 32) + 32 * v234 + 16) & 0xFF0;
                goto LABEL_448;
              }
            }
            v246 = (llvm::MachineInstr *)v225;
          }
          else
          {
            v246 = 0;
          }
LABEL_485:
          v224 = (uint64_t)v246;
          if (v225 == v226)
            goto LABEL_500;
        }
        hasUnmodeledSideEffects = 1;
        goto LABEL_438;
      }
      v399 = 0;
LABEL_500:
      if (!byte_1ED7ED958)
        goto LABEL_608;
      v259 = (_DWORD *)v384[33];
      *((_QWORD *)&v438 + 1) = 0x600000000;
      *(_QWORD *)&v438 = &v439;
      v437 = v259;
      v260 = v259[11];
      v442 = v260;
      v261 = v260 + 63;
      if ((v260 + 63) < 0x40)
      {
        v266 = 0;
        v265 = &v439;
      }
      else
      {
        v262 = v261 >> 6;
        if (v261 >= 0x1C0)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, (uint64_t)&v439, v261 >> 6, 8);
          v265 = (__int128 *)v438;
          v263 = DWORD2(v438);
          LOBYTE(v260) = v442;
          v264 = DWORD2(v438);
        }
        else
        {
          v263 = 0;
          v264 = 0;
          v265 = &v439;
        }
        bzero((char *)v265 + 8 * v263, 8 * v262);
        v266 = v264 + v262;
        DWORD2(v438) = v264 + v262;
      }
      if ((v260 & 0x3F) != 0)
        *((_QWORD *)v265 + v266 - 1) &= ~(-1 << (v260 & 0x3F));
      if (v266)
        bzero(v265, 8 * v266);
      v267 = (llvm *)llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v437, v176);
      v268 = (llvm::Value **)*((_QWORD *)v176 + 4);
      v269 = *((_QWORD *)v176 + 6) & 0xFFFFFFFFFFFFFFF8;
      if (!v269 || (*(_BYTE *)v269 & 4) == 0)
      {
        while ((*(_WORD *)(v269 + 44) & 4) != 0)
          v269 = *(_QWORD *)v269 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_514:
      if ((unint64_t *)v269 != v402)
      {
        v270 = *(unsigned __int16 **)(v269 + 16);
        if (*v270 - 13 < 5)
          goto LABEL_522;
        v271 = *((_QWORD *)v270 + 1);
        if ((*(_WORD *)(v269 + 44) & 0xC) != 0 && (*(_WORD *)(v269 + 44) & 4) == 0)
        {
          v273 = v269;
          if ((v271 & 0x80) == 0)
          {
            do
            {
              if ((*(_WORD *)(v273 + 44) & 8) == 0)
                goto LABEL_521;
              v273 = *(_QWORD *)(v273 + 8);
            }
            while ((*(_BYTE *)(*(_QWORD *)(v273 + 16) + 8) & 0x80) == 0);
          }
        }
        else if ((v271 & 0x80) == 0)
        {
          goto LABEL_521;
        }
        v274 = llvm::dbgs(v267);
        v275 = (void *)*((_QWORD *)v274 + 4);
        if (*((_QWORD *)v274 + 3) - (_QWORD)v275 > 0x22uLL)
        {
          qmemcpy(v275, "Registers live over call instance: ", 35);
          *((_QWORD *)v274 + 4) += 35;
        }
        else
        {
          v274 = llvm::raw_ostream::write(v274, "Registers live over call instance: ", 0x23uLL);
        }
        v276 = llvm::dbgs(v274);
        v277 = v276;
        v278 = (_DWORD *)*((_QWORD *)v276 + 4);
        if (*((_QWORD *)v276 + 3) - (_QWORD)v278 > 3uLL)
        {
          *v278 = 540697186;
          *((_QWORD *)v276 + 4) += 4;
        }
        else
        {
          v277 = llvm::raw_ostream::write(v276, "bb: ", 4uLL);
        }
        v279 = (llvm::Value *)*((_QWORD *)v176 + 2);
        if (v279)
        {
          Name = llvm::Value::getName(v279);
          v282 = v280;
          v279 = (llvm::Value *)*((_QWORD *)v277 + 4);
          if (v280 <= *((_QWORD *)v277 + 3) - (_QWORD)v279)
          {
            if (v280)
            {
              v279 = (llvm::Value *)memcpy(v279, Name, v280);
              *((_QWORD *)v277 + 4) += v282;
            }
          }
          else
          {
            v279 = llvm::raw_ostream::write(v277, Name, v280);
          }
        }
        v283 = llvm::dbgs(v279);
        v284 = v283;
        v285 = *((_QWORD *)v283 + 4);
        if ((unint64_t)(*((_QWORD *)v283 + 3) - v285) > 9)
        {
          *(_WORD *)(v285 + 8) = 8250;
          *(_QWORD *)v285 = *(_QWORD *)": caller: ";
          *((_QWORD *)v283 + 4) += 10;
        }
        else
        {
          v284 = llvm::raw_ostream::write(v283, ": caller: ", 0xAuLL);
        }
        v287 = llvm::Value::getName(*v268);
        v288 = v286;
        v289 = (void *)*((_QWORD *)v284 + 4);
        if (v286 <= *((_QWORD *)v284 + 3) - (_QWORD)v289)
        {
          if (v286)
          {
            v289 = memcpy(v289, v287, v286);
            *((_QWORD *)v284 + 4) += v288;
          }
        }
        else
        {
          v289 = llvm::raw_ostream::write(v284, v287, v286);
        }
        v290 = llvm::dbgs((llvm *)v289);
        v291 = *((_QWORD *)v290 + 4);
        if ((unint64_t)(*((_QWORD *)v290 + 3) - v291) > 9)
        {
          *(_WORD *)(v291 + 8) = 8250;
          *(_QWORD *)v291 = *(_QWORD *)": callee: ";
          *((_QWORD *)v290 + 4) += 10;
        }
        else
        {
          v290 = llvm::raw_ostream::write(v290, ": callee: ", 0xAuLL);
        }
        v176 = v397;
        v292 = *(llvm::raw_ostream **)(v269 + 32);
        v293 = llvm::dbgs(v290);
        llvm::MachineOperand::print(v292, v293, 0, (uint64_t)v259, 0);
        v295 = llvm::dbgs(v294);
        v296 = *((_QWORD *)v295 + 4);
        v393 = v268;
        if ((unint64_t)(*((_QWORD *)v295 + 3) - v296) > 0xA)
        {
          *(_DWORD *)(v296 + 7) = 540698678;
          *(_QWORD *)v296 = *(_QWORD *)"\n  gpr16h: ";
          *((_QWORD *)v295 + 4) += 11;
        }
        else
        {
          v295 = llvm::raw_ostream::write(v295, "\n  gpr16h: ", 0xBuLL);
        }
        v297 = 0;
        v298 = 263;
        while (1)
        {
          if (v437)
            v299 = (char *)v437 + 8;
          else
            v299 = 0;
          v300 = *(unsigned int *)(*v299 + 24 * v298 + 16);
          v301 = (_WORD *)(v299[6] + ((v300 >> 3) & 0x1FFFFFFE));
          v303 = *v301;
          v302 = v301 + 1;
          v304 = v303 + (v300 & 0xF) * v298;
          while (((*(_QWORD *)(v438 + 8 * (v304 >> 6)) >> v304) & 1) == 0)
          {
            v305 = *v302++;
            v304 += v305;
            if (!v305)
              goto LABEL_566;
          }
          v306 = llvm::dbgs(v295);
          v307 = operator new(0x28uLL);
          *(_QWORD *)v307 = &off_1E814D010;
          v307[2] = v298;
          *((_QWORD *)v307 + 2) = v259;
          v307[6] = 0;
          *((_QWORD *)v307 + 4) = 0;
          v459 = (unsigned __int8 **)v307;
          sub_1C52C9630((llvm::raw_ostream *)v307, v306);
          v308 = (_WORD *)*((_QWORD *)v306 + 4);
          if (*((_QWORD *)v306 + 3) - (_QWORD)v308 > 1uLL)
          {
            *v308 = 8236;
            *((_QWORD *)v306 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v306, ", ", 2uLL);
          }
          v295 = (llvm *)v459;
          if (v459 == &v456)
          {
            v309 = (uint64_t (**)(void))(v456 + 32);
          }
          else
          {
            if (!v459)
              goto LABEL_565;
            v309 = (uint64_t (**)(void))(*v459 + 40);
          }
          v295 = (llvm *)(*v309)();
LABEL_565:
          ++v297;
LABEL_566:
          if (++v298 == 391)
          {
            v310 = llvm::dbgs(v295);
            v311 = *((_QWORD *)v310 + 4);
            if ((unint64_t)(*((_QWORD *)v310 + 3) - v311) > 2)
            {
              *(_BYTE *)(v311 + 2) = 32;
              *(_WORD *)v311 = 14880;
              *((_QWORD *)v310 + 4) += 3;
            }
            else
            {
              v310 = llvm::raw_ostream::write(v310, " : ", 3uLL);
            }
            v312 = sub_1C5E21910(v310, v297, 0, 0, 0);
            v313 = llvm::dbgs(v312);
            v314 = *((_QWORD *)v313 + 4);
            if ((unint64_t)(*((_QWORD *)v313 + 3) - v314) > 0xA)
            {
              *(_DWORD *)(v314 + 7) = 540699702;
              *(_QWORD *)v314 = *(_QWORD *)"\n  gpr16l: ";
              *((_QWORD *)v313 + 4) += 11;
            }
            else
            {
              v313 = llvm::raw_ostream::write(v313, "\n  gpr16l: ", 0xBuLL);
            }
            v315 = 0;
            v316 = 391;
            while (2)
            {
              if (v437)
                v317 = (char *)v437 + 8;
              else
                v317 = 0;
              v318 = *(unsigned int *)(*v317 + 24 * v316 + 16);
              v319 = (_WORD *)(v317[6] + ((v318 >> 3) & 0x1FFFFFFE));
              v321 = *v319;
              v320 = v319 + 1;
              v322 = v321 + (v318 & 0xF) * v316;
              while (((*(_QWORD *)(v438 + 8 * (v322 >> 6)) >> v322) & 1) == 0)
              {
                v323 = *v320++;
                v322 += v323;
                if (!v323)
                  goto LABEL_589;
              }
              v324 = llvm::dbgs(v313);
              v325 = operator new(0x28uLL);
              *(_QWORD *)v325 = &off_1E814D010;
              v325[2] = v316;
              *((_QWORD *)v325 + 2) = v259;
              v325[6] = 0;
              *((_QWORD *)v325 + 4) = 0;
              v459 = (unsigned __int8 **)v325;
              sub_1C52C9630((llvm::raw_ostream *)v325, v324);
              v326 = (_WORD *)*((_QWORD *)v324 + 4);
              if (*((_QWORD *)v324 + 3) - (_QWORD)v326 > 1uLL)
              {
                *v326 = 8236;
                *((_QWORD *)v324 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v324, ", ", 2uLL);
              }
              v313 = (llvm *)v459;
              if (v459 == &v456)
              {
                v327 = (uint64_t (**)(void))(v456 + 32);
LABEL_587:
                v313 = (llvm *)(*v327)();
              }
              else if (v459)
              {
                v327 = (uint64_t (**)(void))(*v459 + 40);
                goto LABEL_587;
              }
              ++v315;
LABEL_589:
              if (++v316 != 519)
                continue;
              break;
            }
            v328 = llvm::dbgs(v313);
            v329 = v328;
            v330 = *((_QWORD *)v328 + 4);
            if ((unint64_t)(*((_QWORD *)v328 + 3) - v330) > 2)
            {
              *(_BYTE *)(v330 + 2) = 32;
              *(_WORD *)v330 = 14880;
              *((_QWORD *)v328 + 4) += 3;
            }
            else
            {
              v329 = llvm::raw_ostream::write(v328, " : ", 3uLL);
            }
            sub_1C5E21910(v329, v315, 0, 0, 0);
            v331 = (_BYTE *)*((_QWORD *)v329 + 4);
            if (*((_BYTE **)v329 + 3) == v331)
            {
              llvm::raw_ostream::write(v329, "\n", 1uLL);
            }
            else
            {
              *v331 = 10;
              ++*((_QWORD *)v329 + 4);
            }
            v268 = v393;
LABEL_521:
            v267 = (llvm *)llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v437, (const llvm::MachineInstr *)v269);
LABEL_522:
            v269 = *(_QWORD *)v269 & 0xFFFFFFFFFFFFFFF8;
            if (!v269 || (*(_BYTE *)v269 & 4) == 0)
            {
              while ((*(_WORD *)(v269 + 44) & 4) != 0)
                v269 = *(_QWORD *)v269 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_514;
          }
        }
      }
      if ((__int128 *)v438 != &v439)
        free((void *)v438);
LABEL_608:
      v388 |= v396 | v399;
      v176 = (const llvm::MachineBasicBlock *)*((_QWORD *)v176 + 1);
      if (v176 == v394)
        goto LABEL_613;
    }
    v200 = *v198;
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v200 - 8 * *(unsigned int *)(*(_QWORD *)v200 + 8)) + 128) != v195)
    {
      v200 += 8;
      if (!--v199)
        goto LABEL_377;
    }
LABEL_407:
    v396 = 0;
    goto LABEL_408;
  }
LABEL_613:
  if (!byte_1ED7EDAD8 || (v332 = (const llvm::MachineBasicBlock *)*((_QWORD *)v383 + 41), v332 == v394))
  {
    v401 = 0;
    goto LABEL_685;
  }
  v401 = 0;
  v333 = v384[33];
  v403 = *((_QWORD *)v383 + 5);
  v398 = v384[31];
  while (2)
  {
    *((_QWORD *)&v438 + 1) = 0x600000000;
    *(_QWORD *)&v438 = &v439;
    v437 = (void *)v333;
    v334 = *(_DWORD *)(v333 + 44);
    v442 = v334;
    v335 = v334 + 63;
    if ((v334 + 63) < 0x40)
    {
      v340 = 0;
      v339 = &v439;
    }
    else
    {
      v336 = v335 >> 6;
      if (v335 >= 0x1C0)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, (uint64_t)&v439, v335 >> 6, 8);
        v339 = (__int128 *)v438;
        v337 = DWORD2(v438);
        LOBYTE(v334) = v442;
        v338 = DWORD2(v438);
      }
      else
      {
        v337 = 0;
        v338 = 0;
        v339 = &v439;
      }
      bzero((char *)v339 + 8 * v337, 8 * v336);
      v340 = v338 + v336;
      DWORD2(v438) = v338 + v336;
    }
    if ((v334 & 0x3F) != 0)
      *((_QWORD *)v339 + v340 - 1) &= ~(-1 << (v334 & 0x3F));
    llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v437, v332);
    v341 = *((_QWORD *)v332 + 6) & 0xFFFFFFFFFFFFFFF8;
    if (!v341 || (*(_BYTE *)v341 & 4) == 0)
    {
      while ((*(_WORD *)(v341 + 44) & 4) != 0)
        v341 = *(_QWORD *)v341 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((const llvm::MachineBasicBlock *)v341 != (const llvm::MachineBasicBlock *)((char *)v332 + 48))
    {
      v342 = v341;
      v341 = *(_QWORD *)v341 & 0xFFFFFFFFFFFFFFF8;
      if (!v341 || (*(_BYTE *)v341 & 4) == 0)
      {
        while ((*(_WORD *)(v341 + 44) & 4) != 0)
          v341 = *(_QWORD *)v341 & 0xFFFFFFFFFFFFFFF8;
      }
      v343 = **(unsigned __int16 **)(v342 + 16);
      if ((v343 - 13) >= 5)
      {
        if ((v343 - 6723) > 1)
          goto LABEL_674;
        v344 = *(_DWORD *)(*(_QWORD *)(v342 + 32) + 4);
        RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v333, v344, v403);
        if (RegSizeInBits >= 0x10)
        {
          v347 = 0;
          v348 = 0;
          v349 = (uint64_t *)((char *)v437 + 8);
          if (!v437)
            v349 = 0;
          v350 = *v349;
          v351 = v349[6];
          do
          {
            v352 = v344;
            if (RegSizeInBits == 32)
            {
              v353 = *(_QWORD *)(v333 + 8);
              v354 = *(_QWORD *)(v333 + 56);
              v355 = *(unsigned int *)(v353 + 24 * v344 + 4);
              if (*(_WORD *)(v354 + 2 * v355))
              {
                v356 = *(_WORD *)(v354 + 2 * v355) + v344;
                v357 = (unsigned __int16 *)(*(_QWORD *)(v333 + 88) + 2 * *(unsigned int *)(v353 + 24 * v344 + 12));
                v358 = (unsigned __int16 *)(v354 + 2 * v355 + 2);
                while (v348 + 1 != *v357)
                {
                  v352 = 0;
                  v359 = *v358++;
                  v356 += v359;
                  ++v357;
                  if (!v359)
                    goto LABEL_649;
                }
                v352 = v356;
              }
              else
              {
                v352 = 0;
              }
            }
LABEL_649:
            v360 = *(unsigned int *)(v350 + 24 * v352 + 16);
            v361 = (v360 >> 3) & 0x1FFFFFFE;
            v362 = *(_WORD *)(v351 + v361) + (v360 & 0xF) * v352;
            v363 = (unsigned __int16 *)(v351 + 2 + v361);
            do
            {
              v364 = (1 << v362) & *(_QWORD *)(v438 + 8 * (v362 >> 6));
              if (v364)
                break;
              v365 = *v363++;
              v362 += v365;
            }
            while (v365);
            v366 = 1 << v348;
            if (!v364)
              v366 = 0;
            v347 |= v366;
            ++v348;
          }
          while (v348 != RegSizeInBits >> 4);
          if (RegSizeInBits == 16)
            v367 = 1;
          else
            v367 = 3;
          if (v367 == v347)
            goto LABEL_674;
          if (v347)
          {
            v368 = *(_QWORD *)(v333 + 8);
            v369 = *(_QWORD *)(v333 + 56);
            v370 = *(unsigned int *)(v368 + 24 * v344 + 4);
            if (*(_WORD *)(v369 + 2 * v370))
            {
              v371 = *(unsigned __int16 *)(v369 + 2 * v370) + v344;
              v372 = (unsigned __int16 *)(*(_QWORD *)(v333 + 88) + 2 * *(unsigned int *)(v368 + 24 * v344 + 12));
              v373 = (unsigned __int16 *)(v369 + 2 * v370 + 2);
              while (v347 != *v372)
              {
                v374 = *v373++;
                v371 += v374;
                ++v372;
                if (!v374)
                  goto LABEL_666;
              }
              v375 = (unsigned __int16)v371;
            }
            else
            {
LABEL_666:
              v375 = 0;
            }
            llvm::MachineOperand::setReg(*(_QWORD *)(v342 + 32), v375);
            *(_QWORD *)(v342 + 16) = *(_QWORD *)(v398 + 8) + 322752;
            if (v347 == 2)
              *(_QWORD *)(*(_QWORD *)(v342 + 32) + 80) = (*(_DWORD *)(*(_QWORD *)(v342 + 32) + 80) + 1);
            v376 = *(_QWORD *)(v342 + 48);
            if ((v376 & 7) != 0)
            {
              v377 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              v377 = v376 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v342 + 48) = v376 & 0xFFFFFFFFFFFFFFF8;
            }
            MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v383, v377, *(_QWORD *)(v377 + 8), 129);
            llvm::MachineInstr::dropMemRefs(v342, v383);
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v342, v383, MachineMemOperand);
            v401 = 1;
LABEL_674:
            llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v437, (const llvm::MachineInstr *)v342);
            continue;
          }
        }
        v346 = v342;
        if ((*(_BYTE *)v342 & 4) == 0)
        {
          v346 = v342;
          if ((*(_WORD *)(v342 + 44) & 8) != 0)
          {
            v346 = v342;
            do
              v346 = *(_QWORD *)(v346 + 8);
            while ((*(_WORD *)(v346 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v342 + 24) + 40, v342, *(_QWORD *)(v346 + 8));
        v401 = 1;
      }
    }
    if ((__int128 *)v438 != &v439)
      free((void *)v438);
    v332 = (const llvm::MachineBasicBlock *)*((_QWORD *)v332 + 1);
    if (v332 != v394)
      continue;
    break;
  }
LABEL_685:
  *((_QWORD *)v383 + 91) = 0;
  v414 = &off_1E7FA1778;
  v415 = (unint64_t)&unk_1E7FA17D0;
  if (v421 != v423)
    free(v421);
  v415 = (unint64_t)off_1E7FA1810;
  if (v417 != v416)
    free(v417);
  LOBYTE(v6) = v388 | v401;
  v409 = off_1E7FA1810;
  if (v411[0] != (void *)v410)
    free(v411[0]);
  return v6 & 1;
}

_QWORD *sub_1C4AA8DEC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  return a1;
}

uint64_t sub_1C4AA8E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (**(_WORD **)(a1 + 16) != 19)
    return 0;
  v3 = *(int **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    v5 = 32 * v4;
    v6 = *(_QWORD *)(a1 + 32);
    while ((*(_BYTE *)(v6 + 3) & 2) == 0)
    {
      v6 += 32;
      v5 -= 32;
      if (!v5)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v7 = *v3;
  if ((*v3 & 0x8000000) == 0)
    return 0;
  v8 = *((_QWORD *)v3 + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
    if ((v7 & 0x1000000) != 0)
    {
      if ((v9 & 0x100000000) != 0)
        return 0;
    }
    else if ((v9 & 0x80000000) != 0)
    {
      return 0;
    }
  }
  v10 = v3[8];
  if ((v10 & 0x8000000) == 0)
    return 0;
  v11 = *((_QWORD *)v3 + 5);
  if (!v11)
    goto LABEL_18;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
  if ((v10 & 0x1000000) != 0)
  {
    if ((v12 & 0x100000000) == 0)
      goto LABEL_18;
    return 0;
  }
  if ((v12 & 0x80000000) != 0)
    return 0;
LABEL_18:
  if (((v10 | v7) & 0xFFF00) != 0)
    return 0;
  return sub_1C4AA8EDC(v3[9], v3[1], a2, a3);
}

uint64_t sub_1C4AA8EDC(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  int RegSizeInBits;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  int v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return 0;
  v8 = a1;
  v9 = a2;
  v10 = a1 - 1 >= 0x3FFFFFFF || a2 - 1 >= 0x3FFFFFFF;
  v11 = !v10;
  if (v11 && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(a3 + 8), a1, a2))
    return 0;
  v12 = *(_QWORD *)(a4 + 352);
  if (((*(_QWORD *)(v12 + ((v8 >> 3) & 0x1FFFFFF8)) >> a1) & 1) != 0)
    return 0;
  if (((*(_QWORD *)(v12 + ((v9 >> 3) & 0x1FFFFFF8)) >> a2) & 1) != 0)
    return 0;
  RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a3, a1, a4);
  if (RegSizeInBits != llvm::TargetRegisterInfo::getRegSizeInBits(a3, a2, a4))
    return 0;
  sub_1C4AA90E4(&v26, a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 56));
  sub_1C4AA90E4(&v23, a2, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 56));
  if (v27 == v24)
  {
    v14 = 0;
    v15 = (unint64_t)a2 >> 3;
    v16 = (unint64_t)a1 >> 3;
    while (1)
    {
      if (v11)
      {
        v17 = (uint64_t)*(&off_1E7FAD7E0)[v14];
        v18 = *(unsigned __int16 *)(v17 + 22);
        if (v16 < v18)
        {
          v19 = *(_QWORD *)(v17 + 8);
          v20 = ((1 << (a1 & 7)) & *(unsigned __int8 *)(v19 + v16)) == 0 || v15 >= v18;
          if (!v20 && ((1 << (a2 & 7)) & *(unsigned __int8 *)(v19 + v15)) != 0)
            break;
        }
      }
      if (++v14 == 8)
        goto LABEL_23;
    }
    v21 = 1;
  }
  else
  {
LABEL_23:
    v21 = 0;
  }
  if (v23 != &v25)
    free(v23);
  if (v26 != v28)
    free(v26);
  return v21;
}

_QWORD *sub_1C4AA90E4(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  _WORD *v8;
  unsigned __int16 *v9;
  __int16 v10;
  unsigned __int16 v11;
  int v12;

  v4 = (uint64_t)result;
  v5 = 0;
  v6 = (uint64_t)(result + 2);
  *result = result + 2;
  result[1] = 0x800000000;
  v7 = *(unsigned int *)(a3 + 24 * a2 + 16);
  v8 = (_WORD *)(a4 + ((v7 >> 3) & 0x1FFFFFFE));
  v10 = *v8;
  v9 = v8 + 1;
  v11 = v10 + (v7 & 0xF) * a2;
  do
  {
    if (v5 >= *(_DWORD *)(v4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v6, v5 + 1, 4);
      v5 = *(_DWORD *)(v4 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = v11;
    v5 = *(_DWORD *)(v4 + 8) + 1;
    *(_DWORD *)(v4 + 8) = v5;
    v12 = *v9++;
    v11 += v12;
  }
  while (v12);
  return result;
}

unsigned int *sub_1C4AA919C(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[2];
  if (v2 || result[3])
  {
    v3 = result[4];
    result = *(unsigned int **)result;
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
      {
        v7 = 12 * v3;
        do
        {
          *result = -1;
          result += 3;
          v7 -= 12;
        }
        while (v7);
      }
      *((_QWORD *)v1 + 1) = 0;
    }
    else if (v2)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
      if (v5 == (_DWORD)v3)
      {
        *((_QWORD *)v1 + 1) = 0;
        v6 = 12 * v3;
        do
        {
          *result = -1;
          result += 3;
          v6 -= 12;
        }
        while (v6);
      }
      else
      {
        MEMORY[0x1CAA32FB4](result, 4);
        v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
        v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
        LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
        v1[4] = v9;
        result = (unsigned int *)operator new(12 * v9, (std::align_val_t)4uLL);
        *(_QWORD *)v1 = result;
        *((_QWORD *)v1 + 1) = 0;
        v10 = v1[4];
        if ((_DWORD)v10)
        {
          v11 = 12 * v10;
          do
          {
            *result = -1;
            result += 3;
            v11 -= 12;
          }
          while (v11);
        }
      }
    }
    else
    {
      result = (unsigned int *)MEMORY[0x1CAA32FB4](result, 4);
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

BOOL sub_1C4AA92DC(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  BOOL v11;
  _QWORD *v13;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  sub_1C4AA90E4(&v13, a2, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56));
  v3 = v13;
  if (v14)
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_DWORD *)(a1 + 16);
    v6 = 4 * v14 - 4;
    v7 = (int *)v13;
    do
    {
      v8 = *v7++;
      v9 = sub_1C4AA9578(v4, v5, v8);
      v10 = v9 != 0;
      if (v9)
        v11 = 1;
      else
        v11 = v6 == 0;
      v6 -= 4;
    }
    while (!v11);
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v15)
    free(v3);
  return v10;
}

void sub_1C4AA93C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  sub_1C4AA90E4(&v18, a2, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56));
  sub_1C4AA90E4(&v15, a3, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56));
  v6 = v16;
  if (v16)
  {
    v7 = 0;
    v8 = a2 << 32;
    while (1)
    {
      v9 = *((unsigned int *)v18 + v7);
      v10 = v15;
      v14 = 0;
      if ((sub_1C4AA95F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *((_DWORD *)v15 + v7), &v14) & 1) == 0)
        break;
LABEL_9:
      if (++v7 >= v6)
        goto LABEL_13;
    }
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 16);
    if (4 * v11 + 4 >= 3 * v12)
    {
      v12 *= 2;
    }
    else if (v12 + ~v11 - *(_DWORD *)(a1 + 12) > v12 >> 3)
    {
LABEL_6:
      v13 = v14;
      ++*(_DWORD *)(a1 + 8);
      if (*(_DWORD *)v13 != -1)
        --*(_DWORD *)(a1 + 12);
      *(_DWORD *)v13 = v10[v7];
      *(_QWORD *)(v13 + 4) = v8 | v9;
      v6 = v16;
      goto LABEL_9;
    }
    sub_1C4AA968C(a1, v12);
    v14 = 0;
    sub_1C4AA95F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v10[v7], &v14);
    goto LABEL_6;
  }
LABEL_13:
  if (v15 != &v17)
    free(v15);
  if (v18 != v19)
    free(v18);
}

uint64_t sub_1C4AA9578(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;

  if (a2)
  {
    v3 = (37 * a3) & (a2 - 1);
    v4 = (int *)(a1 + 12 * v3);
    v5 = *v4;
    if (*v4 == a3)
      goto LABEL_8;
    v6 = 1;
    while (v5 != -1)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v4 = (int *)(a1 + 12 * v3);
      v5 = *v4;
      if (*v4 == a3)
        goto LABEL_8;
    }
  }
  v4 = (int *)(a1 + 12 * a2);
LABEL_8:
  if (v4 == (int *)(a1 + 12 * a2))
    return 0;
  else
    return *(_QWORD *)(v4 + 1);
}

uint64_t sub_1C4AA95F4(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 12 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 12 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1C4AA968C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 12 * v3;
      v13 = (_QWORD *)(v4 + 4);
      do
      {
        v14 = *((_DWORD *)v13 - 1);
        if (v14 <= 0xFFFFFFFD)
        {
          v18 = 0;
          sub_1C4AA95F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = v14;
          *(_QWORD *)(v15 + 1) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (_QWORD *)((char *)v13 + 12);
        v12 -= 12;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 12 * v16;
    do
    {
      *result = -1;
      result += 3;
      v17 -= 12;
    }
    while (v17);
  }
  return result;
}

unsigned int *sub_1C4AA97D4(unsigned int *result)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::MachineFunction *v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = result[2];
  if ((_DWORD)v1 != 1)
  {
    v2 = result;
    v3 = *(_QWORD *)(*(_QWORD *)result + 8 * v1 - 8);
    v4 = **(_QWORD **)result;
    v5 = *(_QWORD *)(v4 + 24);
    if (!v3 || (*(_BYTE *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
        v3 = *(_QWORD *)(v3 + 8);
    }
    v6 = result[96];
    v7 = result[97];
    v8 = sub_1C487FE80(v5 + 40, v4, *(_QWORD *)(v3 + 8));
    v9 = *(_QWORD *)(v5 + 32);
    v31 = 0;
    v26[0] = &off_1E816EC08;
    v26[1] = v9;
    v26[3] = *(_QWORD *)(v9 + 40);
    v26[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 104))(*(_QWORD *)(v9 + 16));
    v27 = 0;
    v28 = v5;
    v29 = (unint64_t *)v8;
    v30 = 0;
    v11 = sub_1C55437B8(v26, 0x13u);
    v12 = (unint64_t *)v10;
    v13 = v29;
    v14 = *(_QWORD *)(v28 + 40);
    *(_QWORD *)(v10 + 24) = v14;
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(unsigned int *)(v10 + 40);
    if ((_DWORD)v16)
    {
      v19 = *(_QWORD *)(v10 + 32);
      v20 = *(_QWORD *)(v15 + 40);
      v21 = 32 * v16;
      do
      {
        if (!*(_BYTE *)v19)
        {
          v22 = *(unsigned int *)(v19 + 4);
          if ((int)v22 >= 0)
            v23 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v22);
          else
            v23 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
          v24 = *v23;
          if (*v23)
          {
            v25 = *(_QWORD *)(v24 + 16);
            *(_QWORD *)(v24 + 16) = v19;
            *(_QWORD *)(v19 + 16) = v25;
            if ((*(_BYTE *)(v19 + 3) & 1) != 0)
            {
              *(_QWORD *)(v19 + 24) = v24;
            }
            else
            {
              *(_QWORD *)(v19 + 24) = 0;
              v23 = (uint64_t *)(v25 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v19 + 16) = v19;
            *(_QWORD *)(v19 + 24) = 0;
          }
          *v23 = v19;
        }
        v19 += 32;
        v21 -= 32;
      }
      while (v21);
    }
    v17 = *(_QWORD *)(v15 + 728);
    if (v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v10);
    v18 = *v13 & 0xFFFFFFFFFFFFFFF8;
    *v12 = v18 | *v12 & 7;
    v12[1] = (unint64_t)v13;
    *(_QWORD *)(v18 + 8) = v12;
    *v13 = *v13 & 7 | (unint64_t)v12;
    if (v30)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v30 + 24))(v30, v12);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v32 = 0x1000000;
    v33 = v7;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v11, (const llvm::MachineOperand *)&v32);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v32 = 201326592;
    v33 = v6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v11, (const llvm::MachineOperand *)&v32);
    v2[2] = 0;
    sub_1C4AA919C(v2 + 74);
    result = sub_1C4AA919C(v2 + 84);
    v2[40] = 0;
    *((_BYTE *)v2 + 384) = 0;
    *((_BYTE *)v2 + 392) = 0;
    *((_BYTE *)v2 + 144) = 1;
    v26[0] = &off_1E816EC08;
    if (v27)
      return (unsigned int *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  }
  return result;
}

uint64_t sub_1C4AA9A2C(unsigned int *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a1[2] - 8);
  if (!v2 || (*(_BYTE *)v2 & 4) == 0)
  {
    while ((*(_WORD *)(v2 + 44) & 8) != 0)
      v2 = *(_QWORD *)(v2 + 8);
  }
  result = sub_1C487FE80(*(_QWORD *)(**(_QWORD **)a1 + 24) + 40, **(_QWORD **)a1, *(_QWORD *)(v2 + 8));
  a1[2] = 0;
  return result;
}

uint64_t sub_1C4AA9A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 16);
  v4 = *(_QWORD *)a2 + 12 * v3;
  if (*(_DWORD *)(a2 + 8))
  {
    if ((_DWORD)v3)
    {
      v5 = 12 * v3;
      v6 = *(int **)a2;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 3;
        v5 -= 12;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(int **)a2;
    }
  }
  else
  {
LABEL_6:
    v6 = (int *)(*(_QWORD *)a2 + 12 * v3);
  }
  v7 = *(_QWORD *)a2 + 12 * v3;
  while (1)
  {
LABEL_9:
    if (v6 == (int *)v7)
      return 0;
    v11 = 0;
    if ((sub_1C4AA95F4(*(_QWORD *)(a1 + 296), *(_DWORD *)(a1 + 312), *v6, &v11) & 1) != 0)
      return 1;
    v11 = 0;
    if ((sub_1C4AA95F4(*(_QWORD *)(a1 + 336), *(_DWORD *)(a1 + 352), *v6, &v11) & 1) != 0)
      return 1;
    v8 = (unsigned int *)(v6 + 3);
    while (v8 != (unsigned int *)v4)
    {
      v9 = *v8;
      v8 += 3;
      if (v9 <= 0xFFFFFFFD)
      {
        v6 = (int *)(v8 - 3);
        goto LABEL_9;
      }
    }
    v6 = (int *)v4;
  }
}

void sub_1C4AA9B7C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4AA9BDC(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7ED998, "agx3-post-ra-peephole-copy-eliminate", 0x24uLL);
  result = *a1;
  xmmword_1ED7ED9B8 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7EDA18 = **a2;
  byte_1ED7EDA29 = 1;
  byte_1ED7EDA28 = *v7;
  word_1ED7ED9A2 = (32 * (*a3 & 3)) | word_1ED7ED9A2 & 0xFF9F;
  return result;
}

__n128 sub_1C4AA9C60(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7EDA58, "agx3-post-ra-peephole-remove-dead-rld", 0x25uLL);
  result = *a1;
  xmmword_1ED7EDA78 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7EDAD8 = **a2;
  byte_1ED7EDAE9 = 1;
  byte_1ED7EDAE8 = *v7;
  word_1ED7EDA62 = (32 * (*a3 & 3)) | word_1ED7EDA62 & 0xFF9F;
  return result;
}

uint64_t sub_1C4AA9CE4()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Show the number of registers live over each call";
  v4.n128_u64[1] = 48;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7ED8D8, "agx3-post-ra-peephole-regs-live-over-calls", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ED8D8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Eliminate Redundant copy instructions PostRA";
  v4.n128_u64[1] = 44;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C61536C8(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7ED998, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Eliminate dead rld instructions PostRA";
  v4.n128_u64[1] = 38;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C6153764(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EDA58, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Only run the copy elimination part of this pass";
  v4.n128_u64[1] = 47;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C614FDB4((llvm::cl::Option *)&unk_1ED7EDB18, "agx3-post-ra-peephole-only-copy-eliminate", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EDB18, &dword_1C475E000);
}

uint64_t sub_1C4AA9E40(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 pseudo wait placement pass";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "agx3-pseudo-wait";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &byte_1EF8EFA00;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AA9ED0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4AA9ED0()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = operator new();
  v2 = byte_1EF8EFA00;
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&v2);
  *result = &off_1E7FAD870;
  return result;
}

void sub_1C4AA9F20(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AA9FB4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AAA040()
{
  return "AGX3 pseudo wait placement pass";
}

BOOL sub_1C4AAA054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;

  v2 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((v2 & 0xFF00000000) == 0)
    return 0;
  v3 = (v2 - 64) > 0x3A || ((1 << (v2 - 64)) & 0x60001F460000001) == 0;
  if (v3 && ((v2 - 147) <= 0x14 ? (v4 = ((1 << (v2 + 109)) & 0x1E0001) == 0) : (v4 = 1), v4))
    return 0;
  else
    return (_DWORD)v2 != 147;
}

uint64_t sub_1C4AAA0D0(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t sub_1C4AAA0DC(llvm::RegisterBankInfo *a1, uint64_t a2)
{
  uint64_t InstrMappingImpl;
  int v7;
  uint64_t v10;
  const llvm::RegisterBankInfo::ValueMapping *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  int v18;
  uint64_t ValueMapping;
  unsigned int v20;
  int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  InstrMappingImpl = llvm::RegisterBankInfo::getInstrMappingImpl(a1, (const llvm::MachineInstr *)a2);
  if (*(_DWORD *)InstrMappingImpl == -2 || *(_QWORD *)(InstrMappingImpl + 8) == 0)
  {
    v7 = **(unsigned __int16 **)(a2 + 16);
    if ((v7 - 18) <= 0x33 && ((1 << (v7 - 18)) & 0x8000000000003) != 0 || v7 == 0)
      v20 = 1;
    else
      v20 = *(_DWORD *)(a2 + 40);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
    v23 = v25;
    v24 = 0x800000000;
    sub_1C4848C0C((unsigned int *)&v23, v20, 0);
    if (v20)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(a2 + 32);
        if (!*(_BYTE *)(v13 + 4 * v12))
        {
          v14 = *(_DWORD *)(v13 + 4 * v12 + 4);
          if (v14 < 0 && (v15 = v14 & 0x7FFFFFFF, v15 < *(_DWORD *)(v10 + 432)))
            v16 = *(_QWORD *)(*(_QWORD *)(v10 + 424) + 8 * v15);
          else
            v16 = 0;
          v22 = v16;
          v18 = sub_1C4825F50(&v22);
          if ((_DWORD)v17 == 1)
          {
            v21 = v18;
            v18 = v21;
          }
          ValueMapping = llvm::RegisterBankInfo::getValueMapping(a1, 0, v18, (const llvm::RegisterBank *)&unk_1EF8EFA08);
          *(_QWORD *)((char *)v23 + v12) = ValueMapping;
        }
        v12 += 8;
      }
      while (8 * v20 != v12);
    }
    v11 = (const llvm::RegisterBankInfo::ValueMapping *)sub_1C620FA4C((uint64_t)a1, (uint64_t **)v23, (uint64_t)v23 + 8 * v24);
    InstrMappingImpl = llvm::RegisterBankInfo::getInstructionMappingImpl(a1, 0, -1, 0, v11, v20);
    if (v23 != v25)
      free(v23);
  }
  return InstrMappingImpl;
}

uint64_t sub_1C4AAA2D8()
{
  llvm::RegisterBank::RegisterBank((llvm::RegisterBank *)&unk_1EF8EFA08, 0, "GPR", 512, dword_1C676CBF4, 128);
  return __cxa_atexit((void (*)(void *))sub_1C6147B64, &unk_1EF8EFA08, &dword_1C475E000);
}

uint64_t sub_1C4AAA330(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  v4[0] = &unk_1C6A00568;
  v4[1] = 64;
  v4[2] = &unk_1C677C878;
  v4[3] = 32;
  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a1 + 128, a1);
    *(_QWORD *)(a1 + 48) = v2;
  }
  return v4[2 * *(unsigned __int8 *)(v2 + 569)];
}

uint64_t sub_1C4AAA3D4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  v4[0] = &unk_1C6A03A18;
  v4[1] = 32;
  v4[2] = &unk_1C677C8B8;
  v4[3] = 16;
  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a1 + 128, a1);
    *(_QWORD *)(a1 + 48) = v2;
  }
  return v4[2 * *(unsigned __int8 *)(v2 + 569)];
}

uint64_t sub_1C4AAA478(uint64_t a1, int a2, int a3)
{
  return byte_1C67721D6[230 * byte_1C67720F0[a2 - 1] + a3 - 1];
}

uint64_t sub_1C4AAA4A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = byte_1C6773DB0[a2 - 1];
  v4 = qword_1C677C8D8[2 * v3];
  if (!v4)
    return 0;
  result = 0;
  v6 = &qword_1C677C8D8[2 * v3 + 2];
  do
  {
    v7 = v4 & a3;
    v8 = __ROR8__(v7, -*((_BYTE *)v6 - 8));
    if (*((_BYTE *)v6 - 8))
      v7 = v8;
    result |= v7;
    v9 = *v6;
    v6 += 2;
    v4 = v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1C4AAA504(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = byte_1C6773DB0[a2 - 1];
  if (!qword_1C677C8D8[2 * v3])
    return 0;
  result = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * a2) & a3;
  v7 = &qword_1C677C8D8[2 * v3 + 2];
  do
  {
    v8 = __ROR8__(v6, *((_BYTE *)v7 - 8));
    if (*((_BYTE *)v7 - 8))
      v9 = v8;
    else
      v9 = v6;
    result |= v9;
    v10 = *v7;
    v7 += 2;
  }
  while (v10);
  return result;
}

uint64_t sub_1C4AAA56C(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;

  if (a3)
  {
    v3 = (char *)&unk_1C6773E96 + 230 * *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
    if (v3[a3 - 1])
      return *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * (v3[a3 - 1] - 1));
    else
      return 0;
  }
  return a2;
}

char *sub_1C4AAA5B0(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1C677B198 + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
}

uint64_t sub_1C4AAA5C8()
{
  return 1;
}

uint64_t sub_1C4AAA5D0()
{
  return 24;
}

char *sub_1C4AAA5D8(uint64_t a1, int a2)
{
  return (char *)&unk_1C677B6C8 + 4 * word_1C677BCC0[a2];
}

void sub_1C4AAA5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;

  v3 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((v3 & 0xFF00000000) != 0)
  {
    v4 = (v3 - 64) > 0x3A || ((1 << (v3 - 64)) & 0x60001F460000001) == 0;
    if (!v4 || ((v3 - 147) <= 0x14 ? (v5 = ((1 << (v3 + 109)) & 0x1E0001) == 0) : (v5 = 1), !v5))
    {
      v6 = atomic_load((unsigned __int8 *)&qword_1EF8F6558);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8F6558))
      {
        byte_1EF8F6550 = 0;
        __cxa_guard_release(&qword_1EF8F6558);
      }
      if (!byte_1EF8F6550 || (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16) & 2) != 0)
      {
        v7 = atomic_load((unsigned __int8 *)&qword_1EF8F6568);
        if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8F6568))
        {
          dword_1EF8F6560 = 63;
          __cxa_guard_release(&qword_1EF8F6568);
        }
        v8 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
        if ((v8 & 0xFF00000000) == 0)
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
        if ((int)v8 <= 146)
        {
          switch((int)v8)
          {
            case '_':
            case 'a':
            case 'c':
              __break(1u);
              break;
            default:
              return;
          }
        }
      }
    }
  }
}

uint64_t sub_1C4AAA7D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int16 **v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  void *v61[2];
  _DWORD v62[14];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  sub_1C6153968(a1);
  *(_QWORD *)v2 = &off_1E7FB18F8;
  v3 = v2 + 296;
  *(_QWORD *)(v2 + 280) = v2 + 296;
  *(_QWORD *)(v2 + 288) = 0x600000000;
  *(_DWORD *)(v2 + 344) = 0;
  v4 = (_QWORD *)(v2 + 352);
  *(_QWORD *)(v2 + 352) = v2 + 368;
  *(_QWORD *)(v2 + 360) = 0x600000000;
  sub_1C4765AA4((char *)(v2 + 352), 1uLL, 0);
  *(_DWORD *)(a1 + 416) = 24;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 424), (v5 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 488) = v5;
  v6 = (_QWORD *)(a1 + 496);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  *(_QWORD *)(a1 + 496) = a1 + 512;
  *(_QWORD *)(a1 + 504) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 496), (v7 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 560) = v7;
  *(_QWORD *)(a1 + 584) = a1 + 600;
  *(_QWORD *)(a1 + 592) = 0x400000000;
  v60 = a1 + 632;
  *(_QWORD *)(a1 + 616) = a1 + 632;
  *(_QWORD *)(a1 + 624) = 0x400000000;
  *(_QWORD *)(a1 + 648) = a1 + 672;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 288);
  if ((*(_DWORD *)(a1 + 344) & 0x3F) != 0)
  {
    v59 = *(_QWORD *)(a1 + 280) + 8 * v9;
    *(_QWORD *)(v59 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 344) & 0x3F));
  }
  v10 = v9;
  v11 = (uint64_t *)(a1 + 280);
  *(_DWORD *)(a1 + 344) = v8;
  v12 = v8 + 63;
  if ((_DWORD)v9 != (v8 + 63) >> 6)
  {
    v13 = v12 >> 6;
    if (v9 > v13)
    {
      *(_DWORD *)(a1 + 288) = v13;
      v10 = v12 >> 6;
    }
    else
    {
      v14 = v9;
      if (v13 > *(_DWORD *)(a1 + 292))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 280, v3, v13, 8);
        v14 = *(unsigned int *)(a1 + 288);
        v10 = *(_DWORD *)(a1 + 288);
      }
      if (v13 != v9)
        bzero((void *)(*v11 + 8 * v14), 8 * (v13 - v9));
      v10 += v13 - v9;
      *(_DWORD *)(a1 + 288) = v10;
      v8 = *(_DWORD *)(a1 + 344);
    }
  }
  v15 = v8 & 0x3F;
  if (v15)
    *(_QWORD *)(*v11 + 8 * v10 - 8) &= ~(-1 << v15);
  v16 = **(unsigned __int16 ****)(*(_QWORD *)(a1 + 240) + 96);
  v17 = *((unsigned __int16 *)v16 + 10);
  if (*((_WORD *)v16 + 10))
  {
    v18 = *v16;
    v19 = *v11;
    v20 = 2 * v17;
    do
    {
      v21 = *v18++;
      *(_QWORD *)(v19 + (((unint64_t)v21 >> 3) & 0x1FF8)) |= 1 << v21;
      v20 -= 2;
    }
    while (v20);
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  *(_DWORD *)(a1 + 568) = v22;
  *(_DWORD *)(a1 + 572) = v22;
  v61[0] = v62;
  v61[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v61, (v22 + 63) >> 6, 0);
  v62[12] = v22;
  if (v22)
  {
    v23 = 0;
    v24 = (char *)v61[0];
    while (1)
    {
      v25 = v23 >> 6;
      if (v23 - 22 <= 1)
        *(_QWORD *)(*v4 + 8 * v25) |= 1 << v23;
      if (v23 == 2)
      {
        v26 = 4;
        v27 = &v24[8 * v25];
      }
      else
      {
        if (v23 != 23 && v23 != 3)
          goto LABEL_26;
        *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v25) |= 1 << v23;
        if (v23 != 23)
          goto LABEL_26;
        v26 = 0x800000;
        v27 = (char *)(*v6 + 8 * v25);
      }
      *(_QWORD *)v27 |= v26;
LABEL_26:
      if (v22 == ++v23)
      {
        v28 = 0;
        v29 = *(_QWORD *)(a1 + 424);
        v30 = v61[0];
        while (1)
        {
          v31 = 1 << v28;
          v32 = v28 >> 6;
          if (((1 << v28) & *(_QWORD *)(v29 + 8 * v32)) == 0)
            break;
          if ((*(_QWORD *)(*v4 + 8 * v32) & v31) != 0)
          {
            if ((*(_QWORD *)(*v6 + 8 * v32) & v31) == 0)
              break;
            *(_DWORD *)(a1 + 576) = v28;
          }
          else
          {
            *(_DWORD *)(a1 + 572) = v28;
          }
LABEL_35:
          if (v22 == ++v28)
          {
            v33 = operator new(4 * v22);
            bzero(v33, 4 * v22);
            goto LABEL_38;
          }
        }
        if ((v30[v32] & v31) != 0)
          *(_DWORD *)(a1 + 580) = v28;
        goto LABEL_35;
      }
    }
  }
  v33 = 0;
LABEL_38:
  v34 = *(_DWORD *)(a1 + 44);
  if (v34)
  {
    v35 = 0;
    do
    {
      v36 = (int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 328))(a1, v35);
      v37 = *v36;
      if (*v36 != -1)
      {
        v38 = 1;
        do
        {
          ++*((_DWORD *)v33 + v37);
          v37 = v36[v38++];
        }
        while (v37 != -1);
      }
      v35 = (v35 + 1);
    }
    while ((_DWORD)v35 != v34);
  }
  v39 = *(_DWORD *)((*(uint64_t (**)(uint64_t, __int16 ***))(*(_QWORD *)a1 + 280))(a1, &off_1E7FB1568) + 4);
  (*(void (**)(uint64_t, _UNKNOWN ***))(*(_QWORD *)a1 + 280))(a1, &off_1E7FAD9C8);
  if (v22)
  {
    v40 = 0;
    v41 = 0;
    v42 = *(unsigned int *)(a1 + 572);
    do
    {
      if (v42 != v40 && ((*(_QWORD *)(*v4 + 8 * (v40 >> 6)) >> v40) & 1) != 0)
      {
        v43 = *((_DWORD *)v33 + v40);
        if (v43 > v41 && v43 <= v39)
        {
          *(_DWORD *)(a1 + 568) = v40;
          v41 = v43;
        }
      }
      ++v40;
    }
    while (v22 != v40);
  }
  v45 = atomic_load((unsigned __int8 *)&qword_1ED7EDCA8);
  if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDCA8))
  {
    byte_1ED7EDC98 = 1;
    __cxa_guard_release(&qword_1ED7EDCA8);
  }
  v46 = (_QWORD *)(a1 + 616);
  if (byte_1ED7EDC98)
  {
    v47 = *(_DWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 592) = 0;
    if (*(_DWORD *)(a1 + 596) > 1u)
    {
      v48 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 584, a1 + 600, 2uLL, 4);
      v48 = *(unsigned int *)(a1 + 592);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 584) + 4 * v48) = *(_QWORD *)&v47 | 0xFFFFFFFF00000000;
    *(_DWORD *)(a1 + 592) += 2;
    v51 = *(_DWORD *)(a1 + 568);
    v52 = *(_DWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 624) = 0;
    if (*(_DWORD *)(a1 + 628) > 2u)
    {
      v53 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 616, v60, 3uLL, 4);
      v53 = *(unsigned int *)(a1 + 624);
    }
    v54 = (_DWORD *)(*v46 + 4 * v53);
    *v54 = v51;
    v54[1] = v52;
    v54[2] = -1;
    v55 = 3;
  }
  else
  {
    v49 = *(_DWORD *)(a1 + 572);
    *(_DWORD *)(a1 + 592) = 0;
    if (*(_DWORD *)(a1 + 596) > 1u)
    {
      v50 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 584, a1 + 600, 2uLL, 4);
      v50 = *(unsigned int *)(a1 + 592);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 584) + 4 * v50) = *(_QWORD *)&v49 | 0xFFFFFFFF00000000;
    *(_DWORD *)(a1 + 592) += 2;
    v56 = *(_DWORD *)(a1 + 568);
    *(_DWORD *)(a1 + 624) = 0;
    if (*(_DWORD *)(a1 + 628) > 1u)
    {
      v57 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 616, v60, 2uLL, 4);
      v57 = *(unsigned int *)(a1 + 624);
    }
    *(_QWORD *)(*v46 + 4 * v57) = *(_QWORD *)&v56 | 0xFFFFFFFF00000000;
    v55 = 2;
  }
  *(_DWORD *)(a1 + 624) += v55;
  if (v33)
    operator delete(v33);
  if (v61[0] != v62)
    free(v61[0]);
  return a1;
}

char *sub_1C4AAAE78(uint64_t a1, __int16 ***a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = *((unsigned __int16 *)*a2 + 12);
  v3 = (v2 - 14) > 0x32 || ((1 << (v2 - 14)) & 0x4000000004001) == 0;
  if (!v3 || (_DWORD)v2 == 105)
    return *(char **)(a1 + 584);
  if ((_DWORD)v2 == 127 || a2 == (__int16 ***)&off_1E7FAD9C8)
    return *(char **)(a1 + 584);
  if (a2 == (__int16 ***)&off_1E7FB1648
    || a2 == (__int16 ***)&off_1E7FB1610
    || a2 == (__int16 ***)&off_1E7FB15D8
    || a2 == (__int16 ***)&off_1E7FB1B88
    || a2 == (__int16 ***)&off_1E7FB1760
    || a2 == (__int16 ***)&off_1E7FB16B8
    || a2 == &off_1E7FB1568
    || a2 == (__int16 ***)&off_1E7FB1BC0)
  {
    return *(char **)(a1 + 616);
  }
  return (char *)&unk_1C677B6C8 + 4 * word_1C677B5C8[v2];
}

uint64_t sub_1C4AAAF6C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = atomic_load((unsigned __int8 *)&qword_1EF8F6578);
  if ((v3 & 1) == 0)
  {
    v19 = a1;
    v13 = a3;
    v16 = a2;
    v7 = __cxa_guard_acquire(&qword_1EF8F6578);
    a3 = v13;
    a2 = v16;
    v8 = v7;
    a1 = v19;
    if (v8)
    {
      byte_1EF8F6570 = 1;
      __cxa_guard_release(&qword_1EF8F6578);
      a1 = v19;
      a3 = v13;
      a2 = v16;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EF8F6588);
  if ((v4 & 1) == 0)
  {
    v20 = a1;
    v14 = a3;
    v17 = a2;
    v9 = __cxa_guard_acquire(&qword_1EF8F6588);
    a3 = v14;
    a2 = v17;
    v10 = v9;
    a1 = v20;
    if (v10)
    {
      dword_1EF8F6580 = -1;
      __cxa_guard_release(&qword_1EF8F6588);
      a1 = v20;
      a3 = v14;
      a2 = v17;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1EF8F6598);
  if ((v5 & 1) == 0)
  {
    v21 = a1;
    v15 = a3;
    v18 = a2;
    v11 = __cxa_guard_acquire(&qword_1EF8F6598);
    a3 = v15;
    a2 = v18;
    v12 = v11;
    a1 = v21;
    if (v12)
    {
      dword_1EF8F6590 = -1;
      __cxa_guard_release(&qword_1EF8F6598);
      a1 = v21;
      a3 = v15;
      a2 = v18;
    }
  }
  if (*(_DWORD *)(a1 + 572) == a3)
    return 4080;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * (a3 >> 6)) >> a3) & 1) == 0 || !byte_1EF8F6570)
  {
    if (*(_DWORD *)(a1 + 568) != a3)
      return word_1C677B598[a3];
    return 2 * (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 424))(*(_QWORD *)(a2 + 16));
  }
  result = dword_1EF8F6580;
  if (dword_1EF8F6580 < 0)
    return 2 * (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 424))(*(_QWORD *)(a2 + 16));
  return result;
}

void *sub_1C4AAB108()
{
  return &unk_1C677C6E8;
}

void sub_1C4AAB114(_QWORD *a1)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;

  v2 = (char *)a1[19];
  v3 = (char *)a1[20];
  if (v2 == v3)
    goto LABEL_5;
  v4 = (char *)a1[19];
  while (*(_WORD *)v4 != 2)
  {
    v4 += 16;
    if (v4 == v3)
      goto LABEL_5;
  }
  if (!*((_QWORD *)v4 + 1))
  {
LABEL_5:
    v5 = a1[21];
    if ((unint64_t)v3 >= v5)
    {
      v7 = (v3 - v2) >> 4;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60)
        abort();
      v9 = v5 - (_QWORD)v2;
      if (v9 >> 3 > v8)
        v8 = v9 >> 3;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        if (v10 >> 60)
          sub_1C4764EE4();
        v11 = (char *)operator new(16 * v10);
      }
      else
      {
        v11 = 0;
      }
      v12 = &v11[16 * v7];
      *(_WORD *)v12 = 2;
      *((_QWORD *)v12 + 1) = -1;
      v6 = v12 + 16;
      if (v2 != v3)
      {
        do
        {
          *((_OWORD *)v12 - 1) = *((_OWORD *)v3 - 1);
          v12 -= 16;
          v3 -= 16;
        }
        while (v3 != v2);
        v2 = (char *)a1[19];
      }
      a1[19] = v12;
      a1[20] = v6;
      a1[21] = &v11[16 * v10];
      if (v2)
        operator delete(v2);
    }
    else
    {
      *(_WORD *)v3 = 2;
      *((_QWORD *)v3 + 1) = -1;
      v6 = v3 + 16;
    }
    a1[20] = v6;
  }
}

void sub_1C4AAB24C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  void **v7;
  BOOL v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;
  void (**v16)(void **);
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t NamedMetadata;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t *v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  unsigned int v46;
  _QWORD *v47;
  unsigned int j;
  unsigned __int16 *v49;
  int v50;
  unsigned __int16 *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  unsigned __int16 *v63;
  _WORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v70;
  unsigned __int16 *v71;
  _WORD *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v78;
  unsigned __int16 *v79;
  _WORD *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v86;
  unsigned __int16 *v87;
  _WORD *v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  int v94;
  unsigned __int16 v95;
  unsigned __int16 *v96;
  char *v97;
  unint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  char v103;
  uint64_t **v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  _QWORD *v113;
  unsigned int k;
  unsigned __int16 *v115;
  int v116;
  unsigned __int16 *v117;
  unsigned int v118;
  _QWORD *v119;
  unsigned int m;
  unsigned __int16 *v121;
  int v122;
  unsigned __int16 *v123;
  unsigned __int16 v124;
  unsigned __int16 *v125;
  unint64_t v126;
  int v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  char v131;
  uint64_t **v132;
  unint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t **v144;
  uint64_t **v145;
  unint64_t v146;
  uint64_t **v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int v155;
  _QWORD *v156;
  unsigned int n;
  unsigned __int16 *v158;
  int v159;
  unsigned __int16 *v160;
  unsigned int v161;
  _QWORD *v162;
  unsigned int ii;
  unsigned __int16 *v164;
  int v165;
  unsigned __int16 *v166;
  unsigned __int16 *v167;
  _QWORD *v168;
  int v169;
  unsigned __int16 *v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int16 *v180;
  _WORD *v181;
  int v182;
  int v183;
  uint64_t v184;
  unint64_t v185;
  int v187;
  _QWORD *v188;
  int v189;
  unsigned int v190;
  unsigned __int16 *v191;
  _QWORD *v192;
  int v193;
  unsigned __int16 *v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int16 *v210;
  unsigned int v211;
  _QWORD *v212;
  int v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  _WORD *v217;
  uint64_t v218;
  int v219;
  int v220;
  unsigned int v221;
  uint64_t jj;
  unsigned __int16 *v223;
  int v224;
  char *v225;
  unsigned int v226;
  char *v227;
  unsigned int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  _QWORD *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  void **v240;
  __int16 v241;
  int v242;
  void *__dst;
  uint64_t v244;
  _BYTE v245[48];
  int v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  __dst = v245;
  v244 = 0x600000000;
  v6 = *(unsigned int *)(a1 + 288);
  v7 = (void **)(a1 + 280);
  if ((_DWORD)v6)
    v8 = &__dst == v7;
  else
    v8 = 1;
  if (!v8)
  {
    if (v6 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v245, v6, 8);
      v10 = *(_DWORD *)(a1 + 288);
      if (!v10)
      {
LABEL_10:
        LODWORD(v244) = v6;
        goto LABEL_11;
      }
      v9 = __dst;
    }
    else
    {
      v9 = v245;
      v10 = v6;
    }
    memcpy(v9, *v7, 8 * v10);
    goto LABEL_10;
  }
LABEL_11:
  v235 = a3;
  v246 = *(_DWORD *)(a1 + 344);
  v11 = a2[2];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 176))(v11);
  v13 = *(_QWORD *)(*a2 + 40);
  v237 = &off_1E81316D0;
  v238 = v11;
  v240 = &v237;
  v14 = sub_1C4C0B384(&v237);
  v15 = v240;
  if (v240 == &v237)
  {
    v16 = (void (**)(void **))((char *)v237 + 32);
    v15 = &v237;
  }
  else
  {
    if (!v240)
      goto LABEL_14;
    v16 = (void (**)(void **))((char *)*v240 + 40);
  }
  (*v16)(v15);
LABEL_14:
  v17 = dword_1C677E95C[v14];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 424))(v11);
  if (v18 < v17)
    v17 = v18;
  sub_1C5EAE59C(v13, 0, (uint64_t)&v237);
  v19 = v237;
  if (!(_BYTE)v238)
    v19 = 0;
  if (v17 < v19)
    v19 = v17;
  if ((_BYTE)v238)
    v20 = v19;
  else
    v20 = v17;
  v237 = "agx.reduce.reg.pressure";
  v241 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v13, (uint64_t)&v237);
  if (NamedMetadata)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                    + 128);
    v23 = (_QWORD *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u)
      v23 = (_QWORD *)*v23;
    v24 = (_QWORD *)*v23;
    if (v20 >= 0x10)
      v25 = 16;
    else
      v25 = v20;
    if (v24)
      v20 = v25;
  }
  if (!a2[6])
    a2[6] = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a2[1] + 216))(a2[1], a2 + 16, a2);
  v26 = sub_1C495C228((uint64_t)a2);
  v27 = a2[7];
  v28 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  v29 = sub_1C5EAAFA0(*a2, a2[43]);
  v30 = 1;
  if (v28 && v28 != 8 && v28 != 255)
    v30 = *(_BYTE *)(v27 + 62) != 0;
  if (!v29)
    goto LABEL_49;
  v31 = (uint64_t *)a2[41];
LABEL_39:
  if (v31 == a2 + 40)
  {
LABEL_49:
    v34 = 0;
  }
  else
  {
    for (i = v31[7]; ; i = *(_QWORD *)(i + 8))
    {
      if ((uint64_t *)i == v31 + 6)
      {
        v31 = (uint64_t *)v31[1];
        goto LABEL_39;
      }
      v33 = *(_QWORD *)(i + 16);
      if ((*(_BYTE *)(v33 + 19) & 2) != 0)
      {
        if (*(_BYTE *)(v33 + 4))
          break;
      }
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v35 = *(_QWORD *)(a1 + 8);
    v37 = *(_QWORD *)(a1 + 48);
    v36 = *(_QWORD *)(a1 + 56);
    v38 = (unsigned __int16 *)(v36 + (((unint64_t)*(unsigned int *)(v35 + 9496) >> 3) & 0x1FFFFFFE));
    v40 = *v38;
    v39 = v38 + 1;
    v41 = v40 + 395 * (*(_DWORD *)(v35 + 9496) & 0xF);
    while (1)
    {
      v42 = 4 * (unsigned __int16)v41;
      v43 = *(unsigned __int16 *)(v37 + v42);
      if (*(_WORD *)(v37 + v42) && v36 != 0)
        break;
      v45 = (unsigned __int16)*v39++;
      v41 += v45;
      v34 = 1;
      if (!v45)
        goto LABEL_65;
    }
    v46 = *(unsigned __int16 *)(v37 + 4 * (unsigned __int16)v41 + 2) << 16;
    v47 = __dst;
    for (j = *(unsigned __int16 *)(v37 + 4 * (unsigned __int16)v41); ; j = v43)
    {
      while (1)
      {
        v49 = (unsigned __int16 *)(v36 + 2 * *(unsigned int *)(v35 + 24 * v43 + 8));
        do
        {
          v47[(unsigned __int16)j >> 6] |= 1 << j;
          v50 = *v49++;
          j += v50;
        }
        while (v50);
        v43 = HIWORD(v46);
        if (!(_DWORD)v43)
          break;
        j = HIWORD(v46);
        v46 >>= 16;
      }
      if (!*v39)
        break;
      v41 += (unsigned __int16)*v39++;
      v51 = (unsigned __int16 *)(v37 + 4 * (unsigned __int16)v41);
      v43 = *v51;
      v46 = v51[1] << 16;
    }
    v34 = 1;
  }
LABEL_65:
  v52 = *(unsigned int **)(a1 + 8);
  v53 = *(_QWORD *)(a1 + 48);
  v54 = *(_QWORD *)(a1 + 56);
  v55 = (unsigned __int16 *)(v54 + (((unint64_t)v52[16] >> 3) & 0x1FFFFFFE));
  v57 = *v55;
  v56 = v55 + 1;
  v58 = 2 * (v52[16] & 0xF) + v57;
  while (1)
  {
    v59 = 4 * (unsigned __int16)v58;
    v60 = *(unsigned __int16 *)(v53 + v59);
    if (*(_WORD *)(v53 + v59) && v54 != 0)
      break;
    v62 = (unsigned __int16)*v56++;
    v58 += v62;
    if (!v62)
      goto LABEL_72;
  }
  v112 = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v58 + 2) << 16;
  v113 = __dst;
  for (k = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v58); ; k = v60)
  {
    while (1)
    {
      v115 = (unsigned __int16 *)(v54 + 2 * v52[6 * v60 + 2]);
      do
      {
        v113[(unsigned __int16)k >> 6] |= 1 << k;
        v116 = *v115++;
        k += v116;
      }
      while (v116);
      v60 = HIWORD(v112);
      if (!(_DWORD)v60)
        break;
      k = HIWORD(v112);
      v112 >>= 16;
    }
    if (!*v56)
      break;
    v58 += (unsigned __int16)*v56++;
    v117 = (unsigned __int16 *)(v53 + 4 * (unsigned __int16)v58);
    v60 = *v117;
    v112 = v117[1] << 16;
  }
LABEL_72:
  v63 = (unsigned __int16 *)(v54 + (((unint64_t)v52[10] >> 3) & 0x1FFFFFFE));
  v65 = *v63;
  v64 = v63 + 1;
  v66 = (v52[10] & 0xF) + v65;
  while (1)
  {
    v67 = 4 * (unsigned __int16)v66;
    v68 = *(unsigned __int16 *)(v53 + v67);
    if (*(_WORD *)(v53 + v67) && v54 != 0)
      break;
    v70 = (unsigned __int16)*v64++;
    v66 += v70;
    if (!v70)
      goto LABEL_79;
  }
  v118 = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v66 + 2) << 16;
  v119 = __dst;
  for (m = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v66); ; m = v68)
  {
    while (1)
    {
      v121 = (unsigned __int16 *)(v54 + 2 * v52[6 * v68 + 2]);
      do
      {
        v119[(unsigned __int16)m >> 6] |= 1 << m;
        v122 = *v121++;
        m += v122;
      }
      while (v122);
      v68 = HIWORD(v118);
      if (!(_DWORD)v68)
        break;
      m = HIWORD(v118);
      v118 >>= 16;
    }
    if (!*v64)
      break;
    v66 += (unsigned __int16)*v64++;
    v123 = (unsigned __int16 *)(v53 + 4 * (unsigned __int16)v66);
    v68 = *v123;
    v118 = v123[1] << 16;
  }
LABEL_79:
  if (((v30 | v26 | v34) & 1) != 0)
  {
    v71 = (unsigned __int16 *)(v54 + (((unint64_t)v52[2350] >> 3) & 0x1FFFFFFE));
    v73 = *v71;
    v72 = v71 + 1;
    v74 = v73 + 391 * (v52[2350] & 0xF);
    while (1)
    {
      v75 = 4 * (unsigned __int16)v74;
      v76 = *(unsigned __int16 *)(v53 + v75);
      if (*(_WORD *)(v53 + v75) && v54 != 0)
        break;
      v78 = (unsigned __int16)*v72++;
      v74 += v78;
      if (!v78)
        goto LABEL_87;
    }
    v155 = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v74 + 2) << 16;
    v156 = __dst;
    for (n = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v74); ; n = v76)
    {
      while (1)
      {
        v158 = (unsigned __int16 *)(v54 + 2 * v52[6 * v76 + 2]);
        do
        {
          v156[(unsigned __int16)n >> 6] |= 1 << n;
          v159 = *v158++;
          n += v159;
        }
        while (v159);
        v76 = HIWORD(v155);
        if (!(_DWORD)v76)
          break;
        n = HIWORD(v155);
        v155 >>= 16;
      }
      if (!*v72)
        break;
      v74 += (unsigned __int16)*v72++;
      v160 = (unsigned __int16 *)(v53 + 4 * (unsigned __int16)v74);
      v76 = *v160;
      v155 = v160[1] << 16;
    }
LABEL_87:
    v79 = (unsigned __int16 *)(v54 + (((unint64_t)v52[1606] >> 3) & 0x1FFFFFFE));
    v81 = *v79;
    v80 = v79 + 1;
    v82 = v81 + 267 * (v52[1606] & 0xF);
    while (1)
    {
      v83 = 4 * (unsigned __int16)v82;
      v84 = *(unsigned __int16 *)(v53 + v83);
      if (*(_WORD *)(v53 + v83) && v54 != 0)
        break;
      v86 = (unsigned __int16)*v80++;
      v82 += v86;
      if (!v86)
        goto LABEL_94;
    }
    v161 = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v82 + 2) << 16;
    v162 = __dst;
    for (ii = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v82); ; ii = v84)
    {
      while (1)
      {
        v164 = (unsigned __int16 *)(v54 + 2 * v52[6 * v84 + 2]);
        do
        {
          v162[(unsigned __int16)ii >> 6] |= 1 << ii;
          v165 = *v164++;
          ii += v165;
        }
        while (v165);
        v84 = HIWORD(v161);
        if (!(_DWORD)v84)
          break;
        ii = HIWORD(v161);
        v161 >>= 16;
      }
      if (!*v80)
        break;
      v82 += (unsigned __int16)*v80++;
      v166 = (unsigned __int16 *)(v53 + 4 * (unsigned __int16)v82);
      v84 = *v166;
      v161 = v166[1] << 16;
    }
LABEL_94:
    v87 = (unsigned __int16 *)(v54 + (((unint64_t)v52[448] >> 3) & 0x1FFFFFFE));
    v89 = *v87;
    v88 = v87 + 1;
    v90 = v89 + 74 * (v52[448] & 0xF);
    while (1)
    {
      v91 = 4 * (unsigned __int16)v90;
      v92 = *(unsigned __int16 *)(v53 + v91);
      if (*(_WORD *)(v53 + v91) && v54 != 0)
        break;
      v94 = (unsigned __int16)*v88++;
      v90 += v94;
      if (!v94)
        goto LABEL_101;
    }
    LODWORD(v167) = *(unsigned __int16 *)(v53 + 4 * (unsigned __int16)v90 + 2) << 16;
    v168 = __dst;
    while (1)
    {
      v169 = v92;
      while (1)
      {
        v170 = (unsigned __int16 *)(v54 + 2 * v52[6 * v92 + 2]);
        do
        {
          v168[(unsigned __int16)v169 >> 6] |= 1 << v169;
          v171 = *v170++;
          v169 += v171;
        }
        while (v171);
        v167 = (unsigned __int16 *)(v167 >> 16);
        if (!(_DWORD)v167)
          break;
        v169 = (int)v167;
        v92 = (unint64_t)v167;
      }
      if (!*v88)
        break;
      v90 += (unsigned __int16)*v88++;
      v167 = (unsigned __int16 *)(v53 + 4 * (unsigned __int16)v90);
      v92 = *v167;
      LODWORD(v167) = v167[1] << 16;
    }
  }
LABEL_101:
  v233 = v11;
  v234 = v30;
  v236 = (_QWORD *)a1;
  if (v54)
  {
    v95 = v20 + 391;
    v96 = (unsigned __int16 *)(v54 + 2 * v52[6 * v20 + 2348]);
    v97 = (char *)__dst;
    while (1)
    {
      v98 = v95;
      v99 = v95 >> 6;
      v100 = (uint64_t *)&v97[8 * (v95 >> 6)];
      v101 = *v100;
      if ((((unint64_t)*v100 >> v95) & 1) != 0)
        goto LABEL_118;
      v102 = 0;
      v103 = v95 & 0x3F;
      v104 = *(uint64_t ***)(v12 + 240);
      v105 = v98 >> 3;
      do
      {
        if ((_DWORD)v98)
        {
          v106 = **v104;
          if (v105 < *(unsigned __int16 *)(v106 + 22)
            && ((1 << (v98 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v106 + 8) + v105)) != 0
            && (!v102
             || *v104 != v102
             && ((*(_DWORD *)(v102[1] + ((*(unsigned __int16 *)(v106 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v106 + 24)) & 1) != 0))
          {
            v102 = *v104;
          }
        }
        ++v104;
      }
      while (v104 != *(uint64_t ***)(v12 + 248));
      v107 = *(unsigned __int16 *)(*(_QWORD *)*v102 + 2 * *(unsigned __int16 *)(*v102 + 20) - 2);
      v108 = v107 + 1;
      if (v107 + 1 == (_DWORD)v98)
        goto LABEL_118;
      if (v99 == v108 >> 6)
      {
        v109 = (1 << v108) + (-1 << v103);
      }
      else
      {
        *v100 = (-1 << v103) | v101;
        v111 = (v98 + 63) & 0x1FFC0;
        if (v111 + 64 <= v108)
        {
          memset(&v97[((v98 + 63) >> 3) & 0x3FF8], 255, (((v107 - v111 - 63) >> 3) & 0x1FFFFFF8) + 8);
          v111 = ((v107 - 63 - ((v98 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v98 + 63) & 0x1FFC0) + 64;
        }
        if (v111 > v107)
          goto LABEL_118;
        v109 = ~(-1 << v108);
        v100 = (uint64_t *)&v97[8 * (v111 >> 6)];
        v101 = *v100;
      }
      *v100 = v101 | v109;
LABEL_118:
      v110 = *v96++;
      v95 = v110 + v98;
      if (!v110)
      {
        v124 = v20 + 263;
        v125 = (unsigned __int16 *)(v54 + 2 * v52[6 * v20 + 1580]);
        while (1)
        {
          v126 = v124;
          v127 = v124 >> 6;
          v128 = (uint64_t *)&v97[8 * (v124 >> 6)];
          v129 = *v128;
          if ((((unint64_t)*v128 >> v124) & 1) != 0)
            goto LABEL_151;
          v130 = 0;
          v131 = v124 & 0x3F;
          v132 = *(uint64_t ***)(v12 + 240);
          v133 = v126 >> 3;
          do
          {
            if ((_DWORD)v126)
            {
              v134 = **v132;
              if (v133 < *(unsigned __int16 *)(v134 + 22)
                && ((1 << (v126 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v134 + 8) + v133)) != 0
                && (!v130
                 || *v132 != v130
                 && ((*(_DWORD *)(v130[1] + ((*(unsigned __int16 *)(v134 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v134 + 24)) & 1) != 0))
              {
                v130 = *v132;
              }
            }
            ++v132;
          }
          while (v132 != *(uint64_t ***)(v12 + 248));
          v135 = *(unsigned __int16 *)(*(_QWORD *)*v130 + 2 * *(unsigned __int16 *)(*v130 + 20) - 2);
          v136 = v135 + 1;
          if (v135 + 1 == (_DWORD)v126)
            goto LABEL_151;
          if (v127 == v136 >> 6)
          {
            v137 = (1 << v136) + (-1 << v131);
          }
          else
          {
            *v128 = (-1 << v131) | v129;
            v139 = (v126 + 63) & 0x1FFC0;
            if (v139 + 64 <= v136)
            {
              memset(&v97[((v126 + 63) >> 3) & 0x3FF8], 255, (((v135 - v139 - 63) >> 3) & 0x1FFFFFF8) + 8);
              v139 = ((v135 - 63 - ((v126 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v126 + 63) & 0x1FFC0) + 64;
            }
            if (v139 > v135)
              goto LABEL_151;
            v137 = ~(-1 << v136);
            v128 = (uint64_t *)&v97[8 * (v139 >> 6)];
            v129 = *v128;
          }
          *v128 = v129 | v137;
LABEL_151:
          v138 = *v125++;
          v124 = v138 + v126;
          if (!v138)
            goto LABEL_157;
        }
      }
    }
  }
LABEL_157:
  v140 = sub_1C4C08BEC(v233);
  if (v140 > 0xF)
    goto LABEL_204;
  v141 = v140;
  v142 = 0;
  v143 = v140 + 71;
  v145 = *(uint64_t ***)(v12 + 240);
  v144 = *(uint64_t ***)(v12 + 248);
  v146 = v143 >> 3;
  v147 = v145;
  do
  {
    v148 = **v147;
    if (v146 < *(unsigned __int16 *)(v148 + 22)
      && ((1 << ((v140 + 71) & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v148 + 8) + v146)) != 0
      && (!v142
       || *v147 != v142
       && ((*(_DWORD *)(v142[1] + ((*(unsigned __int16 *)(v148 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v148 + 24)) & 1) != 0))
    {
      v142 = *v147;
    }
    ++v147;
  }
  while (v147 != v144);
  v149 = *(unsigned __int16 *)(*(_QWORD *)*v142 + 2 * *(unsigned __int16 *)(*v142 + 20) - 2);
  v150 = v149 + 1;
  if ((_DWORD)v143 != v149 + 1)
  {
    if ((v150 & 0x1FFC0) == 0x40)
    {
      v151 = (1 << v150) + (-1 << (v140 + 71));
      v152 = (char *)__dst + 8;
    }
    else
    {
      v225 = (char *)__dst;
      *((_QWORD *)__dst + 1) |= -1 << (v140 + 71);
      if (v149 >= 0xBF)
      {
        if (v149 <= 0xFE)
          v229 = 254;
        else
          v229 = v149;
        v230 = v229 - 191;
        memset(v225 + 16, 255, (((v229 - 191) >> 3) & 0x1FFFFFF8) + 8);
        v226 = (v230 & 0xFFFFFFC0) + 192;
      }
      else
      {
        v226 = 128;
      }
      if (v226 > v149)
        goto LABEL_171;
      v151 = ~(-1 << v150);
      v152 = &v225[8 * (v226 >> 6)];
    }
    *(_QWORD *)v152 |= v151;
  }
LABEL_171:
  if (v141 <= 7)
  {
    v153 = 0;
    do
    {
      v154 = **v145;
      if (*(unsigned __int16 *)(v154 + 22) >= 0xAu
        && *(char *)(*(_QWORD *)(v154 + 8) + 9) < 0
        && (!v153
         || *v145 != v153
         && ((*(_DWORD *)(v153[1] + ((*(unsigned __int16 *)(v154 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v154 + 24)) & 1) != 0))
      {
        v153 = *v145;
      }
      ++v145;
    }
    while (v145 != v144);
    v172 = *(unsigned __int16 *)(*(_QWORD *)*v153 + 2 * *(unsigned __int16 *)(*v153 + 20) - 2);
    v173 = v172 + 1;
    if (v172 != 78)
    {
      if ((v173 & 0x1FFC0) == 0x40)
      {
        v174 = (1 << v173) - 0x8000;
        v175 = (char *)__dst + 8;
LABEL_203:
        *(_QWORD *)v175 |= v174;
        goto LABEL_204;
      }
      v227 = (char *)__dst;
      *((_QWORD *)__dst + 1) |= 0xFFFFFFFFFFFF8000;
      if (v172 >= 0xBF)
      {
        if (v172 <= 0xFE)
          v231 = 254;
        else
          v231 = v172;
        v232 = v231 - 191;
        memset(v227 + 16, 255, (((v231 - 191) >> 3) & 0x1FFFFFF8) + 8);
        v228 = (v232 & 0xFFFFFFC0) + 192;
      }
      else
      {
        v228 = 128;
      }
      if (v228 <= v172)
      {
        v174 = ~(-1 << v173);
        v175 = &v227[8 * (v228 >> 6)];
        goto LABEL_203;
      }
    }
  }
LABEL_204:
  if (v234)
  {
    v176 = v236;
    v177 = v236[1];
    v179 = v236[6];
    v178 = v236[7];
    v180 = (unsigned __int16 *)(v178 + (((unint64_t)*(unsigned int *)(v177 + 2536) >> 3) & 0x1FFFFFFE));
    v182 = *v180;
    v181 = v180 + 1;
    v183 = v182 + 105 * (*(_DWORD *)(v177 + 2536) & 0xF);
    while (1)
    {
      v184 = 4 * (unsigned __int16)v183;
      v185 = *(unsigned __int16 *)(v179 + v184);
      if (*(_WORD *)(v179 + v184) && v178 != 0)
        break;
      v187 = (unsigned __int16)*v181++;
      v183 += v187;
      if (!v187)
      {
        v192 = __dst;
        goto LABEL_214;
      }
    }
    LODWORD(v191) = *(unsigned __int16 *)(v179 + 4 * (unsigned __int16)v183 + 2) << 16;
    v192 = __dst;
    while (1)
    {
      v193 = v185;
      while (1)
      {
        v194 = (unsigned __int16 *)(v178 + 2 * *(unsigned int *)(v177 + 24 * v185 + 8));
        do
        {
          v192[(unsigned __int16)v193 >> 6] |= 1 << v193;
          v195 = *v194++;
          v193 += v195;
        }
        while (v195);
        v191 = (unsigned __int16 *)(v191 >> 16);
        if (!(_DWORD)v191)
          break;
        v193 = (int)v191;
        v185 = (unint64_t)v191;
      }
      if (!*v181)
        break;
      v183 += (unsigned __int16)*v181++;
      v191 = (unsigned __int16 *)(v179 + 4 * (unsigned __int16)v183);
      v185 = *v191;
      LODWORD(v191) = v191[1] << 16;
    }
  }
  else
  {
    v192 = __dst;
    v176 = v236;
  }
LABEL_214:
  *v192 |= 0x10uLL;
  v188 = (_QWORD *)(v235 + 16);
  *(_QWORD *)v235 = v235 + 16;
  *(_QWORD *)(v235 + 8) = 0x600000000;
  v189 = v244;
  if ((_DWORD)v244 && &__dst != (void **)v235)
  {
    if (v244 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v235, v235 + 16, v244, 8);
      v190 = v244;
      if (!(_DWORD)v244)
      {
LABEL_228:
        *(_DWORD *)(v235 + 8) = v189;
        goto LABEL_229;
      }
      v192 = __dst;
      v188 = *(_QWORD **)v235;
    }
    else
    {
      v190 = v244;
    }
    memcpy(v188, v192, 8 * v190);
    goto LABEL_228;
  }
LABEL_229:
  *(_DWORD *)(v235 + 64) = v246;
  v196 = *((_DWORD *)v176 + 4);
  v237 = &v239;
  v238 = 0x600000000;
  sub_1C4765AA4((char *)&v237, (v196 + 63) >> 6, 0);
  v242 = v196;
  if (v246)
  {
    v197 = 0;
    v198 = (uint64_t *)__dst;
    v199 = (v246 - 1) & 0xFFFFFFC0;
    while (1)
    {
      v201 = *v198++;
      v200 = v201;
      v202 = v199 + v197 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v246;
      v203 = v202 & v200;
      if (v203)
        break;
      v197 -= 64;
      if (v199 + v197 == -64)
        goto LABEL_238;
    }
    v204 = __clz(__rbit64(v203));
    if (v204 + 1 != (_DWORD)v197)
    {
      v205 = v204 - v197;
      do
      {
        v206 = v205;
        v207 = v237;
        if (((*(_QWORD *)((char *)v237 + (((unint64_t)v205 >> 3) & 0x1FFFFFF8)) >> v205) & 1) == 0)
        {
          v208 = v176[7];
          v209 = v176[1];
          v210 = (unsigned __int16 *)(v208 + 2 * *(unsigned int *)(v209 + 24 * v205 + 8));
          if (*v210)
          {
            v211 = *v210 + v205;
            v212 = *(_QWORD **)v235;
            do
            {
              if (((1 << v211) & v212[(unsigned __int16)v211 >> 6]) == 0)
              {
                v214 = ((unint64_t)*(unsigned int *)(v209 + 24 * (unsigned __int16)v211 + 16) >> 3) & 0x1FFFFFFE;
                v215 = *(unsigned __int16 *)(v208 + v214)
                     + (*(_DWORD *)(v209 + 24 * (unsigned __int16)v211 + 16) & 0xF) * v211;
                v216 = v176[6];
                v217 = (_WORD *)(v208 + 2 + v214);
                while (1)
                {
                  v218 = (unsigned __int16)v215;
                  v219 = *(unsigned __int16 *)(v216 + 4 * (unsigned __int16)v215);
                  if (*(_WORD *)(v216 + 4 * (unsigned __int16)v215))
                    break;
                  v220 = (unsigned __int16)*v217++;
                  v215 += v220;
                  if (!v220)
                    goto LABEL_250;
                }
                while (1)
                {
                  v221 = *(unsigned __int16 *)(v216 + 4 * v218 + 2) << 16;
                  for (jj = (unsigned __int16)v219; ; v219 = jj)
                  {
                    v223 = (unsigned __int16 *)(v208 + 2 * *(unsigned int *)(v209 + 24 * jj + 8));
                    do
                    {
                      v212[(unsigned __int16)v219 >> 6] |= 1 << v219;
                      v224 = *v223++;
                      v219 += v224;
                    }
                    while (v224);
                    jj = HIWORD(v221);
                    if (!(_DWORD)jj)
                      break;
                    v221 >>= 16;
                  }
                  if (!*v217)
                    break;
                  v215 += (unsigned __int16)*v217++;
                  v218 = (unsigned __int16)v215;
                  v219 = *(unsigned __int16 *)(v216 + 4 * (unsigned __int16)v215);
                }
              }
LABEL_250:
              v207[(unsigned __int16)v211 >> 6] |= 1 << v211;
              v213 = v210[1];
              ++v210;
              v211 += v213;
            }
            while (v213);
          }
        }
        v205 = sub_1C476BA0C(&__dst, v206 + 1, v246, 1u);
      }
      while (v205 != -1);
    }
  }
LABEL_238:
  if (v237 != &v239)
    free(v237);
  if (__dst != v245)
    free(__dst);
}

BOOL sub_1C4AAC354(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16);
}

BOOL sub_1C4AAC368(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16);
}

void sub_1C4AAC37C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int *v25;
  llvm::MachineBasicBlock *v26;
  llvm::MachineFunction *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t i;
  const llvm::MachineOperand *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::MachineFunction *v93;
  uint64_t *v94;
  __int16 v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int IncompleteVirtualRegister;
  uint64_t v101;
  uint64_t v102;
  llvm::MachineFunction *v103;
  unint64_t v104;
  char v105;
  int v106;
  BOOL v108;
  __int16 v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  unsigned int v122;
  unsigned __int16 *v123;
  unsigned __int16 *v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned __int16 v128;
  unsigned __int16 *v129;
  unsigned __int16 *v130;
  int v131;
  unsigned int v132;
  BOOL v133;
  char v134;
  unsigned int v135;
  char v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  llvm::MachineFunction *v143;
  _QWORD *v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  llvm::MachineFunction *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  const llvm::MachineOperand *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  int v199;
  uint64_t v200;
  int v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t v204;
  llvm::MachineFunction *v205;
  unsigned __int8 *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unint64_t *v223;
  uint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  int v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  unsigned __int8 *v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;

  v5 = a2;
  v293 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v8 = *(_BYTE **)(v7 + 16);
  v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 112))(v8);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 104))(v8);
  v11 = *(_QWORD *)(v7 + 56);
  v12 = a4;
  v13 = *(unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * a4 + 16);
  v288 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v9 + 232))(v9, v7, v13, &v288);
  v15 = v14;
  v16 = *(unsigned __int16 **)(v5 + 16);
  v17 = *v16;
  if ((unsigned __int16)(v17 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v5 + 32) + 48) & 0x10) != 0)
  {
    LODWORD(v20) = 1;
  }
  else
  {
    v18 = *(_WORD *)(v5 + 44);
    v19 = *((_QWORD *)v16 + 1);
    if ((v18 & 0xC) != 0 && (v18 & 4) == 0)
    {
      v247 = v10;
      v248 = v5;
      if ((v19 & 0x100000) != 0)
      {
        LODWORD(v20) = 1;
      }
      else
      {
        v249 = v5;
        while (1)
        {
          v250 = *(unsigned __int16 *)(v249 + 44);
          LODWORD(v20) = (v250 >> 3) & 1;
          if ((v250 & 8) == 0)
            break;
          v249 = *(_QWORD *)(v249 + 8);
          v5 = v248;
          v10 = v247;
          if ((*(_BYTE *)(*(_QWORD *)(v249 + 16) + 10) & 0x10) != 0)
            goto LABEL_5;
        }
      }
      v5 = v248;
      v10 = v247;
    }
    else
    {
      v20 = (v19 >> 20) & 1;
    }
  }
LABEL_5:
  v21 = v17 - 317;
  if (v17 - 317 < 0x28 && ((0xFFFF00FFFFuLL >> v21) & 1) != 0)
  {
    v37 = dword_1C677E974[v21];
    v23 = *(unsigned __int8 **)(v5 + 32);
    if (!(_DWORD)v20)
    {
LABEL_97:
      v40 = 0;
      v41 = 2;
LABEL_98:
      v88 = *(unsigned int *)&v23[32 * v40 + 4];
      v89 = *(_DWORD *)&v23[32 * a4 + 48] + v15;
      v90 = *(_QWORD *)&v23[32 * v41 + 16];
      v286 = *(_DWORD *)&v23[32 * a4 + 80];
      if ((v88 - 1) <= 0x56 && ((byte_1C69FEF1A[v88 >> 3] >> (v88 & 7)) & 1) != 0)
      {
        v91 = v5;
        v92 = *(_QWORD *)(v5 + 24);
        v93 = *(llvm::MachineFunction **)(v92 + 32);
        if ((unsigned __int16)(v17 - 1) <= 1u && (v23[48] & 0x10) != 0)
        {
          v94 = (uint64_t *)v91;
LABEL_394:
          if (v89 >= 0)
            v253 = *(_DWORD *)&v23[32 * a4 + 48] + v15;
          else
            v253 = v89 + 1;
          v98 = v253 >> 1;
LABEL_398:
          v290 = xmmword_1C676CC50;
          v254 = *(_QWORD *)(v10 + 8) + 48 * sub_1C4C640F8(148, 4, &v290);
          v289 = 0;
          v255 = *((_QWORD *)v93 + 28);
          if (v255)
            *((_QWORD *)v93 + 28) = *(_QWORD *)v255;
          else
            v255 = sub_1C484358C((uint64_t)v93 + 128, 72, 3);
          *(_QWORD *)&v290 = 0;
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v255, v93, v254, (unsigned __int8 **)&v290, 0);
          if ((_QWORD)v290)
            llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
          if (v289)
            llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
          v256 = *(_QWORD *)(v92 + 40);
          *(_QWORD *)(v255 + 24) = v256;
          v257 = *(_QWORD *)(v256 + 32);
          v258 = *(unsigned int *)(v255 + 40);
          v179 = v94;
          if ((_DWORD)v258)
          {
            v262 = *(_QWORD *)(v255 + 32);
            v263 = *(_QWORD *)(v257 + 40);
            v264 = 32 * v258;
            do
            {
              if (!*(_BYTE *)v262)
              {
                v265 = *(unsigned int *)(v262 + 4);
                if ((int)v265 >= 0)
                  v266 = (uint64_t *)(*(_QWORD *)(v263 + 272) + 8 * v265);
                else
                  v266 = (uint64_t *)(*(_QWORD *)(v263 + 24) + 16 * (v265 & 0x7FFFFFFF) + 8);
                v267 = *v266;
                if (*v266)
                {
                  v268 = *(_QWORD *)(v267 + 16);
                  *(_QWORD *)(v267 + 16) = v262;
                  *(_QWORD *)(v262 + 16) = v268;
                  if ((*(_BYTE *)(v262 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v262 + 24) = v267;
                  }
                  else
                  {
                    *(_QWORD *)(v262 + 24) = 0;
                    v266 = (uint64_t *)(v268 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v262 + 16) = v262;
                  *(_QWORD *)(v262 + 24) = 0;
                }
                *v266 = v262;
              }
              v262 += 32;
              v264 -= 32;
            }
            while (v264);
          }
          v259 = *(_QWORD *)(v257 + 728);
          if (v259)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v259 + 24))(v259, v255);
          v260 = *v94 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v255 = v260 | *(_QWORD *)v255 & 7;
          *(_QWORD *)(v255 + 8) = v94;
          *(_QWORD *)(v260 + 8) = v255;
          *v94 = *v94 & 7 | v255;
          *((_QWORD *)&v290 + 1) = 0;
          LODWORD(v291) = 86;
          LODWORD(v292) = 0;
          LODWORD(v290) = 7;
          DWORD1(v290) = v98;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v93, (const llvm::MachineOperand *)&v290);
          LODWORD(v290) = 1;
          *((_QWORD *)&v290 + 1) = 0;
          v291 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v93, (const llvm::MachineOperand *)&v290);
          LODWORD(v290) = 1;
          *((_QWORD *)&v290 + 1) = 0;
          v291 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v93, (const llvm::MachineOperand *)&v290);
          *((_QWORD *)&v290 + 1) = 0;
          v291 = 0;
          LODWORD(v290) = 0;
          DWORD1(v290) = v88;
          v292 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v93, (const llvm::MachineOperand *)&v290);
          LODWORD(v290) = 1;
          *((_QWORD *)&v290 + 1) = 0;
          v291 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v93, (const llvm::MachineOperand *)&v290);
          LODWORD(v290) = 1;
          *((_QWORD *)&v290 + 1) = 0;
          v291 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v93, (const llvm::MachineOperand *)&v290);
          *(_QWORD *)&v290 = v93;
          *((_QWORD *)&v290 + 1) = v255;
          sub_1C4AB09C8(v93, v94, (llvm::MachineFunction **)&v290, 0x10u, 0);
LABEL_409:
          if ((*(_BYTE *)v179 & 4) != 0)
          {
            v261 = v179;
          }
          else
          {
            v261 = v179;
            if ((*((_WORD *)v179 + 22) & 8) != 0)
            {
              v261 = v179;
              do
                v261 = (uint64_t *)v261[1];
              while ((*((_WORD *)v261 + 22) & 8) != 0);
            }
          }
          v81 = v261[1];
          v82 = v179[3] + 40;
          v83 = (uint64_t)v179;
          goto LABEL_412;
        }
        v94 = (uint64_t *)v91;
        v95 = *(_WORD *)(v91 + 44);
        v96 = *((_QWORD *)v16 + 1);
        if ((v95 & 0xC) != 0 && (v95 & 4) == 0)
        {
          if ((v96 & 0x100000) != 0)
            goto LABEL_394;
          v279 = v91;
          while ((*(_WORD *)(v279 + 44) & 8) != 0)
          {
            v279 = *(_QWORD *)(v279 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v279 + 16) + 10) & 0x10) != 0)
              goto LABEL_394;
          }
          if (v89 >= 0)
            v280 = *(_DWORD *)&v23[32 * a4 + 48] + v15;
          else
            v280 = v89 + 1;
          v98 = v280 >> 1;
        }
        else
        {
          if (v89 >= 0)
            v97 = *(_DWORD *)&v23[32 * a4 + 48] + v15;
          else
            v97 = v89 + 1;
          v98 = v97 >> 1;
          if ((v96 & 0x100000) != 0)
            goto LABEL_398;
        }
        v99 = *((_QWORD *)v93 + 5);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v99, "", 0);
        *(_QWORD *)(*(_QWORD *)(v99 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB1B88;
        v101 = *(_QWORD *)(v99 + 8);
        if (v101)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 24))(v101, IncompleteVirtualRegister);
        sub_1C4AB0A8C(v10, (uint64_t)v94, v88, v286, IncompleteVirtualRegister, 0x10u, v98, 0, 0);
        v102 = *(_QWORD *)(v10 + 8) + 216336;
        v103 = *(llvm::MachineFunction **)(v92 + 32);
        v289 = 0;
        v104 = *((_QWORD *)v103 + 28);
        if (v104)
          *((_QWORD *)v103 + 28) = *(_QWORD *)v104;
        else
          v104 = sub_1C484358C((uint64_t)v103 + 128, 72, 3);
        *(_QWORD *)&v290 = 0;
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v104, v103, v102, (unsigned __int8 **)&v290, 0);
        if ((_QWORD)v290)
          llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
        if (v289)
          llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
        v176 = *(_QWORD *)(v92 + 40);
        *(_QWORD *)(v104 + 24) = v176;
        v177 = *(_QWORD *)(v176 + 32);
        v178 = *(unsigned int *)(v104 + 40);
        v179 = v94;
        if ((_DWORD)v178)
        {
          v215 = *(_QWORD *)(v104 + 32);
          v216 = *(_QWORD *)(v177 + 40);
          v217 = 32 * v178;
          do
          {
            if (!*(_BYTE *)v215)
            {
              v218 = *(unsigned int *)(v215 + 4);
              if ((int)v218 >= 0)
                v219 = (uint64_t *)(*(_QWORD *)(v216 + 272) + 8 * v218);
              else
                v219 = (uint64_t *)(*(_QWORD *)(v216 + 24) + 16 * (v218 & 0x7FFFFFFF) + 8);
              v220 = *v219;
              if (*v219)
              {
                v221 = *(_QWORD *)(v220 + 16);
                *(_QWORD *)(v220 + 16) = v215;
                *(_QWORD *)(v215 + 16) = v221;
                if ((*(_BYTE *)(v215 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v215 + 24) = v220;
                }
                else
                {
                  *(_QWORD *)(v215 + 24) = 0;
                  v219 = (uint64_t *)(v221 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v215 + 16) = v215;
                *(_QWORD *)(v215 + 24) = 0;
              }
              *v219 = v215;
            }
            v215 += 32;
            v217 -= 32;
          }
          while (v217);
        }
        v180 = *(_QWORD *)(v177 + 728);
        if (v180)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v180 + 24))(v180, v104);
        v181 = *v94 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v104 = v181 | *(_QWORD *)v104 & 7;
        *(_QWORD *)(v104 + 8) = v94;
        *(_QWORD *)(v181 + 8) = v104;
        *v94 = *v94 & 7 | v104;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
        v292 = 0;
        LODWORD(v290) = 0x1000000;
        DWORD1(v290) = v88;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v290);
        LODWORD(v290) = 1;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v290);
        LODWORD(v290) = 1;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 8;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v290);
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
        LODWORD(v290) = 0;
        DWORD1(v290) = IncompleteVirtualRegister;
        v292 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v290);
        LODWORD(v290) = 1;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v290);
        LODWORD(v290) = 1;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v290);
        goto LABEL_409;
      }
      if ((unint64_t)(v90 & 0xF) - 1 > 1)
      {
        v108 = 0;
        if (!v90)
          goto LABEL_125;
      }
      else
      {
        if ((v90 & 0xF) == 1)
          v105 = 4;
        else
          v105 = 5;
        v106 = ~(-1 << (v37 >> v105));
        v108 = (v90 & 0x600) == 0 && v90 >> 4 == v106;
        if (!v90)
        {
LABEL_125:
          v284 = v37;
          v287 = v5;
          if ((unsigned __int16)(v17 - 1) <= 1u && (v23[48] & 0x10) != 0)
          {
            LOBYTE(v111) = 1;
          }
          else
          {
            v109 = *(_WORD *)(v5 + 44);
            v110 = *((_QWORD *)v16 + 1);
            if ((v109 & 0xC) != 0 && (v109 & 4) == 0)
            {
              if ((v110 & 0x100000) != 0)
              {
                LOBYTE(v111) = 1;
              }
              else
              {
                v251 = v5;
                do
                {
                  v252 = *(unsigned __int16 *)(v251 + 44);
                  LODWORD(v111) = (v252 >> 3) & 1;
                  if ((v252 & 8) == 0)
                    break;
                  v251 = *(_QWORD *)(v251 + 8);
                }
                while ((*(_BYTE *)(*(_QWORD *)(v251 + 16) + 10) & 0x10) == 0);
              }
            }
            else
            {
              v111 = (v110 >> 20) & 1;
            }
          }
          if (v37)
          {
            v112 = 0;
            v113 = *(_DWORD *)(v11 + 48);
            v114 = v37;
            do
            {
              if (v114 >= 0x11)
                v115 = 32;
              else
                v115 = 16;
              v116 = v112 >> 4;
              if (v114 > 0x10)
                v117 = dword_1C677E900[v116];
              else
                v117 = v116 + 1;
              v118 = a1[1];
              v119 = a1[7];
              v120 = *(unsigned int *)(v118 + 24 * v88 + 4);
              v121 = *(_WORD *)(v119 + 2 * v120);
              if (!v121)
                goto LABEL_143;
              LOWORD(v122) = v121 + v88;
              v123 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v118 + 24 * v88 + 12));
              v124 = (unsigned __int16 *)(v119 + 2 * v120 + 2);
              while (v117 != *v123)
              {
                v125 = *v124++;
                LOWORD(v122) = v125 + v122;
                ++v123;
                if (!v125)
                  goto LABEL_143;
              }
              v122 = (unsigned __int16)v122;
              if (!(_WORD)v122)
LABEL_143:
                v122 = v88;
              v126 = v37 - v114 + 8 * v89;
              if (v114 >= 0x20
                && v122
                && (v122 > 0xE7
                 || ((byte_1C69FF49A[(unint64_t)v122 >> 3] >> (v122 & 7)) & 1) == 0
                 || (v126 & 0x10) != 0))
              {
                if (*(_WORD *)(v119 + 2 * v120))
                {
                  v127 = v116 + 1;
                  v128 = v121 + v88;
                  v129 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v118 + 24 * v88 + 12));
                  v130 = (unsigned __int16 *)(v119 + 2 * v120 + 2);
                  while (v127 != *v129)
                  {
                    v122 = 0;
                    v131 = *v130++;
                    v128 += v131;
                    ++v129;
                    v115 = 16;
                    if (!v131)
                      goto LABEL_156;
                  }
                  v122 = v128;
                }
                else
                {
                  v122 = 0;
                }
                v115 = 16;
              }
LABEL_156:
              v132 = v89 + (v112 >> 3) + (v115 >> 3);
              v133 = v132 > v113;
              if (v132 > v113)
                v134 = v111;
              else
                v134 = 0;
              if ((v134 & 1) == 0)
              {
                v135 = v126 >> 4;
                v136 = v133;
                sub_1C4AB0A8C(v10, v287, v88, v286, v122, v115, v135, v112, v136);
                v37 = v284;
              }
              v112 += v115;
              v114 -= v115;
            }
            while (v114);
          }
          v83 = v287;
          if ((*(_BYTE *)v287 & 4) != 0)
          {
            v137 = v287;
          }
          else
          {
            v137 = v287;
            if ((*(_WORD *)(v287 + 44) & 8) != 0)
            {
              v137 = v287;
              do
                v137 = *(_QWORD *)(v137 + 8);
              while ((*(_WORD *)(v137 + 44) & 8) != 0);
            }
          }
          v81 = *(_QWORD *)(v137 + 8);
          v82 = *(_QWORD *)(v287 + 24) + 40;
          goto LABEL_412;
        }
      }
      if (v108)
        goto LABEL_125;
      v246 = "Incompatible scale or format for spill/reload";
LABEL_374:
      llvm::report_fatal_error((llvm *)v246, (const char *)1);
    }
    goto LABEL_26;
  }
  if (*v16 > 0x1A42u)
  {
    if (v17 - 9163 < 0x18)
      goto LABEL_18;
    if ((v17 - 9014 > 4 || v17 == 9016) && v17 - 6723 >= 2)
      goto LABEL_252;
    goto LABEL_173;
  }
  if (*v16 <= 0x15F8u)
  {
    if (*v16 <= 0x1136u)
    {
      if (v17 - 4348 >= 6)
      {
        if (v17 == 4360)
        {
          v66 = *(_QWORD *)(v5 + 24);
          v67 = v14;
          if (v14 >= 0x10000 && !v8[364])
          {
            if (v5)
            {
              v68 = v5;
              if ((*(_BYTE *)v5 & 4) != 0)
              {
LABEL_293:
                v198 = *(unint64_t **)(v68 + 8);
                v199 = sub_1C4A13A40(v10, *(llvm::MachineBasicBlock **)(v5 + 24), v198, (unsigned __int16 ***)&off_1E7FB1568);
                v200 = *(_QWORD *)(v5 + 32);
                v201 = *(_DWORD *)(v200 + 4);
                llvm::MachineOperand::ChangeToImmediate((unsigned int *)(v200 + 32 * v12), 0, 0);
                v202 = sub_1C49D63F4(v10, v66, v198, v67, v199, 0, 0, (unsigned __int8 **)(v5 + 56), 0);
                *(_QWORD *)&v290 = 0;
                DWORD2(v290) = 0;
                v203 = sub_1C4C640F8(67, 3, &v290);
                v204 = *(_QWORD *)(v10 + 8);
                v205 = *(llvm::MachineFunction **)(v66 + 32);
                v206 = *(unsigned __int8 **)(v5 + 56);
                v289 = v206;
                if (v206)
                  llvm::MetadataTracking::track((uint64_t)&v289, v206, 2);
                v207 = v204 + 48 * v203;
                v208 = *((_QWORD *)v205 + 28);
                if (v208)
                  *((_QWORD *)v205 + 28) = *(_QWORD *)v208;
                else
                  v208 = sub_1C484358C((uint64_t)v205 + 128, 72, 3);
                *(_QWORD *)&v290 = v289;
                if (v289)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v289, v289, (uint64_t)&v290);
                  v289 = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v208, v205, v207, (unsigned __int8 **)&v290, 0);
                if ((_QWORD)v290)
                  llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
                if (v289)
                  llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
                v209 = *(_QWORD *)(v66 + 40);
                *(_QWORD *)(v208 + 24) = v209;
                v210 = *(_QWORD *)(v209 + 32);
                v211 = *(unsigned int *)(v208 + 40);
                if ((_DWORD)v211)
                {
                  v232 = *(_QWORD *)(v208 + 32);
                  v233 = *(_QWORD *)(v210 + 40);
                  v234 = 32 * v211;
                  do
                  {
                    if (!*(_BYTE *)v232)
                    {
                      v235 = *(unsigned int *)(v232 + 4);
                      if ((int)v235 >= 0)
                        v236 = (uint64_t *)(*(_QWORD *)(v233 + 272) + 8 * v235);
                      else
                        v236 = (uint64_t *)(*(_QWORD *)(v233 + 24) + 16 * (v235 & 0x7FFFFFFF) + 8);
                      v237 = *v236;
                      if (*v236)
                      {
                        v238 = *(_QWORD *)(v237 + 16);
                        *(_QWORD *)(v237 + 16) = v232;
                        *(_QWORD *)(v232 + 16) = v238;
                        if ((*(_BYTE *)(v232 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v232 + 24) = v237;
                        }
                        else
                        {
                          *(_QWORD *)(v232 + 24) = 0;
                          v236 = (uint64_t *)(v238 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v232 + 16) = v232;
                        *(_QWORD *)(v232 + 24) = 0;
                      }
                      *v236 = v232;
                    }
                    v232 += 32;
                    v234 -= 32;
                  }
                  while (v234);
                }
                v212 = *(_QWORD *)(v210 + 728);
                if (v212)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v212 + 24))(v212, v208);
                v213 = *v198 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v208 = v213 | *(_QWORD *)v208 & 7;
                *(_QWORD *)(v208 + 8) = v198;
                *(_QWORD *)(v213 + 8) = v208;
                *v198 = *v198 & 7 | v208;
                *((_QWORD *)&v290 + 1) = 0;
                v291 = 0;
                v292 = 0;
                LODWORD(v290) = 0x1000000;
                DWORD1(v290) = v201;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
                LODWORD(v290) = 1;
                *((_QWORD *)&v290 + 1) = 0;
                v291 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
                *((_QWORD *)&v290 + 1) = 0;
                v291 = 0;
                LODWORD(v290) = 0;
                DWORD1(v290) = v201;
                v292 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
                LODWORD(v290) = 1;
                *((_QWORD *)&v290 + 1) = 0;
                v291 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
                v214 = *(_DWORD *)(*(_QWORD *)(v202 + 32) + 4);
                *((_QWORD *)&v290 + 1) = 0;
                v291 = 0;
                LODWORD(v290) = 0;
                DWORD1(v290) = v214;
                v292 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
                LODWORD(v290) = 1;
                *((_QWORD *)&v290 + 1) = 0;
                v291 = 0;
LABEL_339:
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
                return;
              }
            }
            else
            {
              v68 = 0;
            }
            while ((*(_WORD *)(v68 + 44) & 8) != 0)
              v68 = *(_QWORD *)(v68 + 8);
            goto LABEL_293;
          }
          v25 = (unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * v12);
          if (!v8[364])
          {
            v24 = v15;
            goto LABEL_201;
          }
          llvm::MachineOperand::ChangeToImmediate(v25, (uint64_t)v15 >> 2, 0);
          if ((v15 & 3) == 0)
            return;
          *(_QWORD *)&v290 = 0;
          DWORD2(v290) = 1;
          v189 = sub_1C4C640F8(67, 3, &v290);
          if (v5)
          {
            v190 = v5;
            if ((*(_BYTE *)v5 & 4) != 0)
            {
LABEL_324:
              v222 = *(_DWORD *)(*(_QWORD *)(v5 + 32) + 4);
              v223 = *(unint64_t **)(v190 + 8);
              v224 = *(_QWORD *)(v10 + 8);
              v205 = *(llvm::MachineFunction **)(v66 + 32);
              v225 = *(unsigned __int8 **)(v5 + 56);
              v289 = v225;
              if (v225)
                llvm::MetadataTracking::track((uint64_t)&v289, v225, 2);
              v226 = v224 + 48 * v189;
              v208 = *((_QWORD *)v205 + 28);
              if (v208)
                *((_QWORD *)v205 + 28) = *(_QWORD *)v208;
              else
                v208 = sub_1C484358C((uint64_t)v205 + 128, 72, 3);
              *(_QWORD *)&v290 = v289;
              if (v289)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v289, v289, (uint64_t)&v290);
                v289 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v208, v205, v226, (unsigned __int8 **)&v290, 0);
              if ((_QWORD)v290)
                llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
              if (v289)
                llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
              v227 = *(_QWORD *)(v66 + 40);
              *(_QWORD *)(v208 + 24) = v227;
              v228 = *(_QWORD *)(v227 + 32);
              v229 = *(unsigned int *)(v208 + 40);
              if ((_DWORD)v229)
              {
                v239 = *(_QWORD *)(v208 + 32);
                v240 = *(_QWORD *)(v228 + 40);
                v241 = 32 * v229;
                do
                {
                  if (!*(_BYTE *)v239)
                  {
                    v242 = *(unsigned int *)(v239 + 4);
                    if ((int)v242 >= 0)
                      v243 = (uint64_t *)(*(_QWORD *)(v240 + 272) + 8 * v242);
                    else
                      v243 = (uint64_t *)(*(_QWORD *)(v240 + 24) + 16 * (v242 & 0x7FFFFFFF) + 8);
                    v244 = *v243;
                    if (*v243)
                    {
                      v245 = *(_QWORD *)(v244 + 16);
                      *(_QWORD *)(v244 + 16) = v239;
                      *(_QWORD *)(v239 + 16) = v245;
                      if ((*(_BYTE *)(v239 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v239 + 24) = v244;
                      }
                      else
                      {
                        *(_QWORD *)(v239 + 24) = 0;
                        v243 = (uint64_t *)(v245 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v239 + 16) = v239;
                      *(_QWORD *)(v239 + 24) = 0;
                    }
                    *v243 = v239;
                  }
                  v239 += 32;
                  v241 -= 32;
                }
                while (v241);
              }
              v230 = *(_QWORD *)(v228 + 728);
              if (v230)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v230 + 24))(v230, v208);
              v231 = *v223 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v208 = v231 | *(_QWORD *)v208 & 7;
              *(_QWORD *)(v208 + 8) = v223;
              *(_QWORD *)(v231 + 8) = v208;
              *v223 = *v223 & 7 | v208;
              *((_QWORD *)&v290 + 1) = 0;
              v291 = 0;
              v292 = 0;
              LODWORD(v290) = 0x1000000;
              DWORD1(v290) = v222;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
              LODWORD(v290) = 1;
              *((_QWORD *)&v290 + 1) = 0;
              v291 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
              *((_QWORD *)&v290 + 1) = 0;
              v291 = 0;
              LODWORD(v290) = 0;
              DWORD1(v290) = v222;
              v292 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
              LODWORD(v290) = 1;
              *((_QWORD *)&v290 + 1) = 0;
              v291 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v208, v205, (const llvm::MachineOperand *)&v290);
              LODWORD(v290) = 1;
              *((_QWORD *)&v290 + 1) = 0;
              v291 = v15 & 3;
              goto LABEL_339;
            }
          }
          else
          {
            v190 = 0;
          }
          while ((*(_WORD *)(v190 + 44) & 8) != 0)
            v190 = *(_QWORD *)(v190 + 8);
          goto LABEL_324;
        }
LABEL_252:
        if (!(_DWORD)v20
          || a4 != 1
          || (v23 = *(unsigned __int8 **)(v5 + 32), v38 = *v23, v38 != 7)
          || (v39 = *((_DWORD *)v23 + 4), (v39 & 0xFFFFFFFE) != 0x56))
        {
          v246 = "Unable to materialize frameindex: invalid opcode!";
          goto LABEL_374;
        }
        v37 = 0;
        goto LABEL_27;
      }
LABEL_173:
      if (v14 >= 0)
        v138 = v14;
      else
        v138 = v14 + 1;
      v139 = *(_QWORD *)(v5 + 32) + 32 * (a4 + 1);
      v140 = *(_DWORD *)(v139 + 16) + (v138 >> 1);
      *(_QWORD *)(v139 + 16) = 0;
      v25 = (unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * a4);
      v24 = v140;
      goto LABEL_201;
    }
    if (v17 - 4407 >= 3 && (v17 - 4430 > 3 || v17 == 4431))
      goto LABEL_252;
    v84 = *(_QWORD *)(v5 + 24);
    v85 = *(_WORD *)(v5 + 44);
    v86 = *((_QWORD *)v16 + 1);
    if ((v85 & 0xC) != 0 && (v85 & 4) == 0)
    {
      v269 = v10;
      v270 = v5;
      if ((v86 & 0x100000) == 0)
      {
        v271 = v5;
        while ((*(_WORD *)(v271 + 44) & 8) != 0)
        {
          v271 = *(_QWORD *)(v271 + 8);
          LOBYTE(v87) = 1;
          v5 = v270;
          v10 = v269;
          if ((*(_BYTE *)(*(_QWORD *)(v271 + 16) + 10) & 0x10) != 0)
            goto LABEL_94;
        }
        v5 = v270;
        v23 = *(unsigned __int8 **)(v270 + 32);
        v10 = v269;
        goto LABEL_437;
      }
      LOBYTE(v87) = 1;
    }
    else
    {
      v87 = (v86 >> 20) & 1;
    }
LABEL_94:
    v23 = *(unsigned __int8 **)(v5 + 32);
    if (a4 == 1 && (v87 & 1) != 0)
      goto LABEL_96;
LABEL_437:
    v272 = a4 + 1;
    v273 = *(_QWORD *)&v23[32 * v272 + 16];
    if ((v14 & ~(-1 << (BYTE1(v273) & 7))) != 0)
    {
      v246 = "Unable to materialize frameindex: invalid shift!";
      goto LABEL_374;
    }
    if (v14 > 255)
    {
      v276 = *(_QWORD *)(*(_QWORD *)(v84 + 32) + 40);
      v277 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v276, "", 0);
      *(_QWORD *)(*(_QWORD *)(v276 + 24) + 16 * (v277 & 0x7FFFFFFF)) = &off_1E7FB1568;
      v278 = *(_QWORD *)(v276 + 8);
      if (v278)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v278 + 24))(v278, v277);
      sub_1C49D63F4(v10, v84, (unint64_t *)v5, v15, v277, 0, 0, (unsigned __int8 **)(v5 + 56), 0);
      llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(v5 + 32) + 32 * v12, v277, 0, 0, 1, 0, 0, 0);
      v25 = (unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * v272);
      v24 = v273 & 0xFFFFF8FF;
      goto LABEL_201;
    }
    v274 = sub_1C4C915F0(v17, 1, 1);
    v275 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 32) + 16);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v275 + 104))(v275) + 8)
                         + 48 * v274;
    llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * a4), v15, 0);
    llvm::MachineInstr::removeOperand(v5, a4 + 1);
    return;
  }
  if (v17 - 5725 < 0x18)
  {
LABEL_18:
    v26 = *(llvm::MachineBasicBlock **)(v5 + 24);
    v27 = (llvm::MachineFunction *)*((_QWORD *)v26 + 4);
    v28 = sub_1C4C2FD5C(*v16);
    v29 = sub_1C4C2FD5C(v17);
    v30 = *(_QWORD *)(v5 + 32);
    v31 = v29;
    v32 = *(_QWORD *)(v30 + 32 * v29 + 16) + v15;
    v33 = v32 > -32769;
    if (v32 >= 0)
      v33 = v32 < 0x8000;
    if (v33)
    {
      v34 = *(_QWORD *)(v10 + 8);
      v35 = *(unsigned __int8 **)(v5 + 56);
      v289 = v35;
      if (v35)
        llvm::MetadataTracking::track((uint64_t)&v289, v35, 2);
      v36 = *((_QWORD *)v27 + 28);
      if (v36)
        *((_QWORD *)v27 + 28) = *(_QWORD *)v36;
      else
        v36 = sub_1C484358C((uint64_t)v27 + 128, 72, 3);
      *(_QWORD *)&v290 = v289;
      if (v289)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v289, v289, (uint64_t)&v290);
        v289 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v27, v34 + 48 * v17, (unsigned __int8 **)&v290, 0);
      if ((_QWORD)v290)
        llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
      if (v289)
        llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
      v72 = *((_QWORD *)v26 + 5);
      *(_QWORD *)(v36 + 24) = v72;
      v73 = *(_QWORD *)(v72 + 32);
      v74 = *(unsigned int *)(v36 + 40);
      if ((_DWORD)v74)
      {
        v169 = *(_QWORD *)(v36 + 32);
        v170 = *(_QWORD *)(v73 + 40);
        v171 = 32 * v74;
        do
        {
          if (!*(_BYTE *)v169)
          {
            v172 = *(unsigned int *)(v169 + 4);
            if ((int)v172 >= 0)
              v173 = (uint64_t *)(*(_QWORD *)(v170 + 272) + 8 * v172);
            else
              v173 = (uint64_t *)(*(_QWORD *)(v170 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
            v174 = *v173;
            if (*v173)
            {
              v175 = *(_QWORD *)(v174 + 16);
              *(_QWORD *)(v174 + 16) = v169;
              *(_QWORD *)(v169 + 16) = v175;
              if ((*(_BYTE *)(v169 + 3) & 1) != 0)
              {
                *(_QWORD *)(v169 + 24) = v174;
              }
              else
              {
                *(_QWORD *)(v169 + 24) = 0;
                v173 = (uint64_t *)(v175 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v169 + 16) = v169;
              *(_QWORD *)(v169 + 24) = 0;
            }
            *v173 = v169;
          }
          v169 += 32;
          v171 -= 32;
        }
        while (v171);
      }
      v75 = *(_QWORD *)(v73 + 728);
      if (v75)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v75 + 24))(v75, v36);
      v76 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v36 = v76 | *(_QWORD *)v36 & 7;
      *(_QWORD *)(v36 + 8) = v5;
      *(_QWORD *)(v76 + 8) = v36;
      *(_QWORD *)v5 = *(_QWORD *)v5 & 7 | v36;
      if (*(_DWORD *)(v5 + 40))
      {
        for (i = 0; i < *(unsigned int *)(v5 + 40); ++i)
        {
          if (i == v31)
          {
            LODWORD(v290) = 1;
            *((_QWORD *)&v290 + 1) = 0;
            v291 = v32;
          }
          else
          {
            if (i != v28)
            {
              v78 = (const llvm::MachineOperand *)(*(_QWORD *)(v5 + 32) + 32 * i);
              goto LABEL_84;
            }
            LODWORD(v290) = 1;
            *((_QWORD *)&v290 + 1) = 0;
            v291 = 0;
          }
          v78 = (const llvm::MachineOperand *)&v290;
LABEL_84:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v27, v78);
        }
      }
      llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v36, v27, (const llvm::MachineInstr *)v5);
      v79 = *(_QWORD *)(v5 + 24);
      if ((*(_BYTE *)v5 & 4) == 0)
      {
        v80 = v5;
        if ((*(_WORD *)(v5 + 44) & 8) != 0)
        {
          v80 = v5;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
        goto LABEL_87;
      }
LABEL_383:
      v80 = v5;
LABEL_87:
      v81 = *(_QWORD *)(v80 + 8);
      v82 = v79 + 40;
      v83 = v5;
LABEL_412:
      sub_1C487FE80(v82, v83, v81);
      return;
    }
    v282 = v28;
    v283 = sub_1C4C2FD5C(v17);
    v58 = *(_QWORD *)(v30 + 32 * v283 + 16);
    v285 = sub_1C4C2FD5C(v17);
    v59 = (unint64_t *)(v30 + 32 * v285);
    if (*(_BYTE *)v59 != 1)
    {
      v69 = sub_1C4C32DEC(v17);
      v70 = sub_1C4A13A40(v10, v26, (_QWORD *)v5, (unsigned __int16 ***)&off_1E7FB1568);
      v281 = v70;
      if (v15 >= 0x100)
      {
        sub_1C49D63F4(v10, (uint64_t)v26, (unint64_t *)v5, v15, v70, 0, 0, (unsigned __int8 **)(v5 + 56), 0);
        v71 = v69;
      }
      else
      {
        v71 = 1;
      }
      LODWORD(v290) = 0;
      *(_QWORD *)((char *)&v290 + 4) = __PAIR64__(v69, v71);
      v141 = sub_1C4C640F8(67, 3, &v290);
      v142 = *(_QWORD *)(v10 + 8);
      v143 = (llvm::MachineFunction *)*((_QWORD *)v26 + 4);
      v144 = (_QWORD *)v5;
      v145 = *(unsigned __int8 **)(v5 + 56);
      v289 = v145;
      if (v145)
        llvm::MetadataTracking::track((uint64_t)&v289, v145, 2);
      v146 = v142 + 48 * v141;
      v147 = *((_QWORD *)v143 + 28);
      if (v147)
        *((_QWORD *)v143 + 28) = *(_QWORD *)v147;
      else
        v147 = sub_1C484358C((uint64_t)v143 + 128, 72, 3);
      *(_QWORD *)&v290 = v289;
      if (v289)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v289, v289, (uint64_t)&v290);
        v289 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v147, v143, v146, (unsigned __int8 **)&v290, 0);
      if ((_QWORD)v290)
        llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
      v5 = (uint64_t)v144;
      if (v289)
        llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
      v155 = *((_QWORD *)v26 + 5);
      *(_QWORD *)(v147 + 24) = v155;
      v156 = *(_QWORD *)(v155 + 32);
      v157 = *(unsigned int *)(v147 + 40);
      if ((_DWORD)v157)
      {
        v182 = *(_QWORD *)(v147 + 32);
        v183 = *(_QWORD *)(v156 + 40);
        v184 = 32 * v157;
        do
        {
          if (!*(_BYTE *)v182)
          {
            v185 = *(unsigned int *)(v182 + 4);
            if ((int)v185 >= 0)
              v186 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v185);
            else
              v186 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v185 & 0x7FFFFFFF) + 8);
            v187 = *v186;
            if (*v186)
            {
              v188 = *(_QWORD *)(v187 + 16);
              *(_QWORD *)(v187 + 16) = v182;
              *(_QWORD *)(v182 + 16) = v188;
              if ((*(_BYTE *)(v182 + 3) & 1) != 0)
              {
                *(_QWORD *)(v182 + 24) = v187;
              }
              else
              {
                *(_QWORD *)(v182 + 24) = 0;
                v186 = (uint64_t *)(v188 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v182 + 16) = v182;
              *(_QWORD *)(v182 + 24) = 0;
            }
            *v186 = v182;
          }
          v182 += 32;
          v184 -= 32;
        }
        while (v184);
      }
      v158 = *(_QWORD *)(v156 + 728);
      if (v158)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v158 + 24))(v158, v147);
      v159 = *v144 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v147 = v159 | *(_QWORD *)v147 & 7;
      *(_QWORD *)(v147 + 8) = v144;
      *(_QWORD *)(v159 + 8) = v147;
      *v144 = *v144 & 7 | v147;
      *((_QWORD *)&v290 + 1) = 0;
      v291 = 0;
      v292 = 0;
      LODWORD(v290) = 0x1000000;
      DWORD1(v290) = v281;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v147, v143, (const llvm::MachineOperand *)&v290);
      LODWORD(v290) = 1;
      *((_QWORD *)&v290 + 1) = 0;
      v291 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v147, v143, (const llvm::MachineOperand *)&v290);
      if (v15 > 0xFF)
      {
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
        LODWORD(v290) = 0;
        DWORD1(v290) = v281;
        v292 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v147, v143, (const llvm::MachineOperand *)&v290);
        LODWORD(v290) = 1;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = 0;
      }
      else
      {
        LODWORD(v290) = 1;
        *((_QWORD *)&v290 + 1) = 0;
        v291 = v15;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v147, v143, (const llvm::MachineOperand *)&v290);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v147, v143, (const llvm::MachineOperand *)v59);
      v160 = (v285 + 1);
      v161 = *(_QWORD *)(v144[4] + 32 * v160 + 16) & 0xFFFFFFFFFFFFF8FFLL;
      LODWORD(v290) = 1;
      *((_QWORD *)&v290 + 1) = 0;
      v291 = v161 | (7936 - (__clz(v58) << 8));
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v147, v143, (const llvm::MachineOperand *)&v290);
      llvm::MachineOperand::setReg((uint64_t)v59, v281);
      *(_QWORD *)(v144[4] + 32 * v160 + 16) = 0;
      *(_QWORD *)(v144[4] + 32 * v283 + 16) = 1;
      goto LABEL_200;
    }
    v62 = v59[2];
    v61 = v59 + 2;
    v60 = v62;
    v63 = v15 / v58 + v62;
    if (v15 % v58)
      v64 = 0;
    else
      v64 = v63 >> 16 == 0;
    if (v64)
    {
      *v61 = v63;
      goto LABEL_200;
    }
    v65 = v15 + v60 * v58;
    if (!(v65 >> 16))
    {
      *v61 = v65;
      *(_QWORD *)(*(_QWORD *)(v5 + 32) + 32 * v283 + 16) = 1;
LABEL_200:
      v25 = (unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * v282);
      v24 = 0;
      goto LABEL_201;
    }
    v148 = sub_1C4A13A40(v10, v26, (_QWORD *)v5, (unsigned __int16 ***)&off_1E7FB1568);
    sub_1C49D63F4(v10, (uint64_t)v26, (unint64_t *)v5, v65, v148, 0, 0, (unsigned __int8 **)(v5 + 56), 0);
    v149 = sub_1C4C915F0(v17, 4, 0);
    v150 = *(_QWORD *)(v10 + 8);
    v151 = (llvm::MachineFunction *)*((_QWORD *)v26 + 4);
    v152 = *(unsigned __int8 **)(v5 + 56);
    v289 = v152;
    if (v152)
      llvm::MetadataTracking::track((uint64_t)&v289, v152, 2);
    v153 = v150 + 48 * v149;
    v154 = *((_QWORD *)v151 + 28);
    if (v154)
      *((_QWORD *)v151 + 28) = *(_QWORD *)v154;
    else
      v154 = sub_1C484358C((uint64_t)v151 + 128, 72, 3);
    *(_QWORD *)&v290 = v289;
    if (v289)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v289, v289, (uint64_t)&v290);
      v289 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v154, v151, v153, (unsigned __int8 **)&v290, 0);
    if ((_QWORD)v290)
      llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
    if (v289)
      llvm::MetadataTracking::untrack((uint64_t)&v289, v289);
    v162 = *((_QWORD *)v26 + 5);
    *(_QWORD *)(v154 + 24) = v162;
    v163 = *(_QWORD *)(v162 + 32);
    v164 = *(unsigned int *)(v154 + 40);
    if ((_DWORD)v164)
    {
      v191 = *(_QWORD *)(v154 + 32);
      v192 = *(_QWORD *)(v163 + 40);
      v193 = 32 * v164;
      do
      {
        if (!*(_BYTE *)v191)
        {
          v194 = *(unsigned int *)(v191 + 4);
          if ((int)v194 >= 0)
            v195 = (uint64_t *)(*(_QWORD *)(v192 + 272) + 8 * v194);
          else
            v195 = (uint64_t *)(*(_QWORD *)(v192 + 24) + 16 * (v194 & 0x7FFFFFFF) + 8);
          v196 = *v195;
          if (*v195)
          {
            v197 = *(_QWORD *)(v196 + 16);
            *(_QWORD *)(v196 + 16) = v191;
            *(_QWORD *)(v191 + 16) = v197;
            if ((*(_BYTE *)(v191 + 3) & 1) != 0)
            {
              *(_QWORD *)(v191 + 24) = v196;
            }
            else
            {
              *(_QWORD *)(v191 + 24) = 0;
              v195 = (uint64_t *)(v197 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v191 + 16) = v191;
            *(_QWORD *)(v191 + 24) = 0;
          }
          *v195 = v191;
        }
        v191 += 32;
        v193 -= 32;
      }
      while (v193);
    }
    v165 = *(_QWORD *)(v163 + 728);
    if (v165)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v165 + 24))(v165, v154);
    v166 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v154 = v166 | *(_QWORD *)v154 & 7;
    *(_QWORD *)(v154 + 8) = v5;
    *(_QWORD *)(v166 + 8) = v154;
    *(_QWORD *)v5 = *(_QWORD *)v5 & 7 | v154;
    if (!*(_DWORD *)(v5 + 40))
    {
LABEL_225:
      llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v154, v27, (const llvm::MachineInstr *)v5);
      v79 = *(_QWORD *)(v5 + 24);
      if ((*(_BYTE *)v5 & 4) == 0)
      {
        v80 = v5;
        if ((*(_WORD *)(v5 + 44) & 8) != 0)
        {
          v80 = v5;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
        goto LABEL_87;
      }
      goto LABEL_383;
    }
    v167 = 0;
    while (1)
    {
      if (v167 == v282)
        goto LABEL_218;
      if (v167 == v285)
        break;
      if (v167 != v283)
      {
        v168 = (const llvm::MachineOperand *)(*(_QWORD *)(v5 + 32) + 32 * v167);
        goto LABEL_220;
      }
      LODWORD(v290) = 1;
      *((_QWORD *)&v290 + 1) = 0;
      v291 = 1;
LABEL_219:
      v168 = (const llvm::MachineOperand *)&v290;
LABEL_220:
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v154, v151, v168);
      if (++v167 >= (unint64_t)*(unsigned int *)(v5 + 40))
        goto LABEL_225;
    }
    *((_QWORD *)&v290 + 1) = 0;
    LODWORD(v290) = 0;
    DWORD1(v290) = v148;
    v291 = 0;
    v292 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v154, v151, (const llvm::MachineOperand *)&v290);
LABEL_218:
    LODWORD(v290) = 1;
    *((_QWORD *)&v290 + 1) = 0;
    v291 = 0;
    goto LABEL_219;
  }
  if (v17 == 5625)
  {
    v25 = (unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * a4);
    v24 = v15;
    goto LABEL_201;
  }
  if (v17 != 5627)
    goto LABEL_252;
  if (a4 == 1)
    v22 = v20;
  else
    v22 = 0;
  v23 = *(unsigned __int8 **)(v5 + 32);
  if ((v22 & 1) == 0)
  {
    v24 = v14;
    v25 = (unsigned int *)&v23[32 * a4];
LABEL_201:
    llvm::MachineOperand::ChangeToImmediate(v25, v24, 0);
    return;
  }
LABEL_96:
  v37 = 0;
  if (!(_DWORD)v20)
    goto LABEL_97;
LABEL_26:
  v38 = *v23;
  v39 = *((_DWORD *)v23 + 4);
LABEL_27:
  v40 = 2;
  v41 = 1;
  if (v38 != 7 || (v39 & 0xFFFFFFFE) != 0x56)
    goto LABEL_98;
  v42 = *((_DWORD *)v23 + 1);
  llvm::MachineOperand::ChangeToImmediate((unsigned int *)&v23[32 * a4], 0, 0);
  v43 = (uint64_t *)(v23 + 16);
  if (v15 >= 0)
    v44 = v15;
  else
    v44 = v15 + 1;
  v45 = v42 + (v44 >> 1);
  if (*((_DWORD *)v23 + 4) == 86)
    v46 = 86;
  else
    v46 = 87;
  v47 = *(_DWORD *)v23;
  if (!*(_DWORD *)v23)
  {
    v48 = *v43;
    if (*v43)
    {
      v49 = *((_QWORD *)v23 + 1);
      if (v49)
      {
        v50 = *(_QWORD *)(v49 + 24);
        if (v50)
        {
          v51 = *(_QWORD *)(v50 + 32);
          if (v51)
          {
            v52 = *(_QWORD *)(v51 + 40);
            v53 = *((unsigned int *)v23 + 1);
            if ((v53 & 0x80000000) != 0)
              v54 = (unsigned __int8 **)(*(_QWORD *)(v52 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
            else
              v54 = (unsigned __int8 **)(*(_QWORD *)(v52 + 272) + 8 * v53);
            v55 = *v54;
            v56 = (unsigned __int8 *)*((_QWORD *)v23 + 3);
            if (*v54 != v23)
              v54 = (unsigned __int8 **)(v48 + 24);
            *v54 = v56;
            if (v56)
              v57 = v56;
            else
              v57 = v55;
            *((_QWORD *)v57 + 2) = v48;
            *v43 = 0;
            *((_QWORD *)v23 + 3) = 0;
            v47 = *(_DWORD *)v23;
          }
        }
      }
    }
  }
  *((_DWORD *)v23 + 4) = v46;
  *((_DWORD *)v23 + 6) = 0;
  *(_DWORD *)v23 = v47 & 0xFFF00000 | 7;
  *((_DWORD *)v23 + 1) = v45;
}

void *sub_1C4AAE0A0(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0xFF0 || (*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3F70) == 0)
    return &unk_1C677C85E;
  else
    return &unk_1C677C85C;
}

uint64_t sub_1C4AAE0D4(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  unsigned int v11;
  unsigned __int8 v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  llvm::LiveInterval *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  llvm::LiveInterval *v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unint64_t v40;
  __int16 ***v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  unsigned __int16 *v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;
  int **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t *v72;
  int *v73;
  _QWORD *v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  int *v81;
  int v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned __int16 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned int v106;
  int v107;
  uint64_t (*v108)(_QWORD *);
  _QWORD *v109;
  unsigned __int8 *v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  unint64_t i;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  unsigned int v121;
  unint64_t v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int16 v130;
  unsigned __int16 *v131;
  unsigned __int16 *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int16 v139;
  _WORD *v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  _WORD *v143;
  unsigned __int16 v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  _BOOL4 v151;
  unsigned int v152;
  _BOOL4 v154;
  unsigned int v155;
  _BOOL4 v157;
  unsigned int v158;
  _BOOL4 v159;
  BOOL v160;
  _BOOL4 v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unsigned __int16 *v171;
  __int16 v172;
  int v173;
  uint64_t v174;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned __int16 *v180;
  uint64_t v181;
  BOOL v182;
  BOOL v183;
  unsigned int v184;
  int v185;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  int *v191;
  int v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  _QWORD *v200;
  int v201;
  _QWORD *v202;
  int v203;
  _QWORD *v204;
  int v205;
  int v206;
  unsigned int v207;
  char *v208;
  char *v209;
  _DWORD *v210;
  char *v211;
  int v212;
  int v213;
  uint64_t *v214;
  int v215;
  unsigned int v216;
  _DWORD *v217;
  int v218;
  _DWORD *v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  _DWORD *v223;
  _DWORD *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  unsigned __int16 *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int *v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v247;
  _DWORD *v248;
  uint64_t v249;
  _DWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v257;
  int v259;
  unsigned int v260;
  int v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  BOOL v269;
  int v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int8 v281;
  unint64_t v282;
  unsigned int v283;
  uint64_t v285;
  unint64_t v286;
  unsigned __int16 *v287;
  unsigned __int16 *v288;
  unsigned int v289;
  __int16 v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unsigned int v295;
  int v296;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  unint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  _QWORD *v315;
  uint64_t v316;
  unsigned int v317;
  int v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  unsigned int v322;
  int v323;
  int v324;
  _QWORD *v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  int v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  unsigned __int16 *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  _QWORD *v367;
  unsigned int v368;
  _QWORD *v372;
  int v374;
  void *v375;
  _OWORD v376[2];
  void *v377;
  uint64_t v378;
  _BYTE v379[32];
  void *v380;
  uint64_t v381;
  uint64_t v382;
  void *__p;
  uint64_t v384;
  _QWORD v385[9];

  v11 = a2;
  v385[7] = *MEMORY[0x1E0C80C00];
  v12 = atomic_load((unsigned __int8 *)&qword_1ED7EDCC0);
  if ((v12 & 1) == 0)
  {
    v259 = __cxa_guard_acquire(&qword_1ED7EDCC0);
    v11 = a2;
    if (v259)
    {
      byte_1ED7EDC9B = 1;
      __cxa_guard_release(&qword_1ED7EDCC0);
      v11 = a2;
    }
  }
  v372 = (_QWORD *)a6;
  if (*(_BYTE *)(*(_QWORD *)(a6 + 16) + 356))
    v13 = byte_1ED7EDC9B == 0;
  else
    v13 = 1;
  if (v13)
    goto LABEL_7;
  v15 = *(_QWORD *)(a8 + 256);
  v16 = *(_QWORD *)(a6 + 48);
  if (!v16)
  {
    v17 = v11;
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a6 + 8) + 216))(*(_QWORD *)(a6 + 8), a6 + 128, a6);
    v11 = v17;
    v16 = v18;
    *(_QWORD *)(a6 + 48) = v18;
  }
  if (!*(_BYTE *)(v16 + 570))
  {
    v199 = v11;
    sub_1C4A067C4((_DWORD *)(v16 + 576));
    *(_QWORD *)(v16 + 608) = *(_QWORD *)(v16 + 600);
    v200 = (_QWORD *)(v16 + 624);
    v201 = *(_DWORD *)(v16 + 632);
    if (v201)
    {
      v317 = *(_DWORD *)(v16 + 640);
      if (v317 > 4 * v201 && v317 >= 0x41)
      {
        v318 = 1 << (33 - __clz(v201 - 1));
        if (v318 <= 64)
          v319 = 64;
        else
          v319 = v318;
        goto LABEL_511;
      }
    }
    else
    {
      if (!*(_DWORD *)(v16 + 636))
        goto LABEL_288;
      v317 = *(_DWORD *)(v16 + 640);
      if (v317 > 0x40)
      {
        v319 = 0;
LABEL_511:
        if (v319 == v317)
        {
          *(_QWORD *)(v16 + 632) = 0;
          v320 = *(_QWORD **)(v16 + 624);
          v321 = 8 * v317;
          a6 = (uint64_t)v372;
          do
          {
            *v320++ = -4096;
            v321 -= 8;
          }
          while (v321);
          goto LABEL_288;
        }
        MEMORY[0x1CAA32FB4](*v200, 8);
        if (v319)
        {
          v347 = (4 * v319 / 3u + 1) | ((unint64_t)(4 * v319 / 3u + 1) >> 1);
          v348 = v347 | (v347 >> 2) | ((v347 | (v347 >> 2)) >> 4);
          LODWORD(v348) = (((v348 | (v348 >> 8)) >> 16) | v348 | (v348 >> 8)) + 1;
          *(_DWORD *)(v16 + 640) = v348;
          v349 = operator new(8 * v348, (std::align_val_t)8uLL);
          *(_QWORD *)(v16 + 624) = v349;
          *(_QWORD *)(v16 + 632) = 0;
          v350 = *(unsigned int *)(v16 + 640);
          a6 = (uint64_t)v372;
          if ((_DWORD)v350)
          {
            v351 = 8 * v350;
            do
            {
              *v349++ = -4096;
              v351 -= 8;
            }
            while (v351);
          }
LABEL_288:
          *(_QWORD *)(v16 + 656) = *(_QWORD *)(v16 + 648);
          v202 = (_QWORD *)(v16 + 672);
          v203 = *(_DWORD *)(v16 + 680);
          if (v203)
          {
            v322 = *(_DWORD *)(v16 + 688);
            if (v322 > 4 * v203 && v322 >= 0x41)
            {
              v323 = 1 << (33 - __clz(v203 - 1));
              if (v323 <= 64)
                v324 = 64;
              else
                v324 = v323;
              goto LABEL_522;
            }
          }
          else
          {
            if (!*(_DWORD *)(v16 + 684))
              goto LABEL_290;
            v322 = *(_DWORD *)(v16 + 688);
            if (v322 > 0x40)
            {
              v324 = 0;
LABEL_522:
              if (v324 == v322)
              {
                *(_QWORD *)(v16 + 680) = 0;
                v325 = *(_QWORD **)(v16 + 672);
                v326 = 32 * v322;
                a6 = (uint64_t)v372;
                do
                {
                  *v325 = -4096;
                  v325 += 4;
                  v326 -= 32;
                }
                while (v326);
                goto LABEL_290;
              }
              MEMORY[0x1CAA32FB4](*v202, 8);
              if (v324)
              {
                v352 = (4 * v324 / 3u + 1) | ((unint64_t)(4 * v324 / 3u + 1) >> 1);
                v353 = v352 | (v352 >> 2) | ((v352 | (v352 >> 2)) >> 4);
                LODWORD(v353) = (((v353 | (v353 >> 8)) >> 16) | v353 | (v353 >> 8)) + 1;
                *(_DWORD *)(v16 + 688) = v353;
                v354 = operator new(32 * v353, (std::align_val_t)8uLL);
                *(_QWORD *)(v16 + 672) = v354;
                *(_QWORD *)(v16 + 680) = 0;
                v355 = *(unsigned int *)(v16 + 688);
                a6 = (uint64_t)v372;
                if ((_DWORD)v355)
                {
                  v356 = 32 * v355;
                  do
                  {
                    *v354 = -4096;
                    v354 += 4;
                    v356 -= 32;
                  }
                  while (v356);
                }
LABEL_290:
                v204 = (_QWORD *)(v16 + 696);
                v205 = *(_DWORD *)(v16 + 704);
                if (v205)
                {
                  v327 = *(_DWORD *)(v16 + 712);
                  if (v327 > 4 * v205 && v327 >= 0x41)
                  {
                    v328 = 1 << (33 - __clz(v205 - 1));
                    if (v328 <= 64)
                      v329 = 64;
                    else
                      v329 = v328;
                    goto LABEL_533;
                  }
                }
                else
                {
                  if (!*(_DWORD *)(v16 + 708))
                    goto LABEL_292;
                  v327 = *(_DWORD *)(v16 + 712);
                  if (v327 > 0x40)
                  {
                    v329 = 0;
LABEL_533:
                    if (v329 == v327)
                    {
                      *(_QWORD *)(v16 + 704) = 0;
                      v330 = *(_QWORD **)(v16 + 696);
                      v331 = 16 * v327;
                      a6 = (uint64_t)v372;
                      do
                      {
                        *v330 = -4096;
                        v330 += 2;
                        v331 -= 16;
                      }
                      while (v331);
                      goto LABEL_292;
                    }
                    MEMORY[0x1CAA32FB4](*v204, 8);
                    if (v329)
                    {
                      v357 = (4 * v329 / 3u + 1) | ((unint64_t)(4 * v329 / 3u + 1) >> 1);
                      v358 = v357 | (v357 >> 2) | ((v357 | (v357 >> 2)) >> 4);
                      LODWORD(v358) = (((v358 | (v358 >> 8)) >> 16) | v358 | (v358 >> 8)) + 1;
                      *(_DWORD *)(v16 + 712) = v358;
                      v359 = operator new(16 * v358, (std::align_val_t)8uLL);
                      *(_QWORD *)(v16 + 696) = v359;
                      *(_QWORD *)(v16 + 704) = 0;
                      v360 = *(unsigned int *)(v16 + 712);
                      a6 = (uint64_t)v372;
                      if ((_DWORD)v360)
                      {
                        v361 = 16 * v360;
                        do
                        {
                          *v359 = -4096;
                          v359 += 2;
                          v361 -= 16;
                        }
                        while (v361);
                      }
                      goto LABEL_292;
                    }
                    *v204 = 0;
                    *(_QWORD *)(v16 + 704) = 0;
                    *(_DWORD *)(v16 + 712) = 0;
                    goto LABEL_561;
                  }
                }
                if (v327)
                {
                  v340 = (_QWORD *)*v204;
                  v341 = 16 * v327;
                  do
                  {
                    *v340 = -4096;
                    v340 += 2;
                    v341 -= 16;
                  }
                  while (v341);
                }
                *(_QWORD *)(v16 + 704) = 0;
LABEL_561:
                a6 = (uint64_t)v372;
LABEL_292:
                v206 = *(_DWORD *)(v16 + 728);
                if (v206 || *(_DWORD *)(v16 + 732))
                {
                  v248 = (_DWORD *)(v16 + 720);
                  v249 = *(unsigned int *)(v16 + 736);
                  if (v249 > 4 * v206 && v249 >= 0x41)
                  {
                    sub_1C4AB1258(v248);
                  }
                  else
                  {
                    if ((_DWORD)v249)
                    {
                      v250 = *(_DWORD **)v248;
                      v251 = 16 * v249;
                      do
                      {
                        *v250 = -1;
                        v250 += 4;
                        v251 -= 16;
                      }
                      while (v251);
                    }
                    *(_QWORD *)(v16 + 728) = 0;
                  }
                  a6 = (uint64_t)v372;
                }
                v207 = *(_DWORD *)(v16 + 752);
                if (!v207 && !*(_DWORD *)(v16 + 756))
                  goto LABEL_296;
                v312 = (_QWORD *)(v16 + 744);
                v313 = *(unsigned int *)(v16 + 760);
                if (v313 > 4 * v207 && v313 >= 0x41)
                {
                  sub_1C4A952E0(v16 + 744);
                  if (v207)
                  {
                    v314 = 1 << (33 - __clz(v207 - 1));
                    if (v314 <= 64)
                      v207 = 64;
                    else
                      v207 = v314;
                  }
                  if (v207 == *(_DWORD *)(v16 + 760))
                  {
                    *(_QWORD *)(v16 + 752) = 0;
                    a6 = (uint64_t)v372;
                    if (v207)
                    {
                      v315 = *(_QWORD **)(v16 + 744);
                      v316 = 24 * v207;
                      do
                      {
                        *v315 = -4096;
                        v315 += 3;
                        v316 -= 24;
                      }
                      while (v316);
                    }
                    goto LABEL_296;
                  }
                  MEMORY[0x1CAA32FB4](*v312, 8);
                  if (v207)
                  {
                    v342 = (4 * v207 / 3 + 1) | ((unint64_t)(4 * v207 / 3 + 1) >> 1);
                    v343 = v342 | (v342 >> 2) | ((v342 | (v342 >> 2)) >> 4);
                    LODWORD(v343) = (((v343 | (v343 >> 8)) >> 16) | v343 | (v343 >> 8)) + 1;
                    *(_DWORD *)(v16 + 760) = v343;
                    v344 = operator new(24 * v343, (std::align_val_t)8uLL);
                    *(_QWORD *)(v16 + 744) = v344;
                    *(_QWORD *)(v16 + 752) = 0;
                    v345 = *(unsigned int *)(v16 + 760);
                    a6 = (uint64_t)v372;
                    if ((_DWORD)v345)
                    {
                      v346 = 24 * v345;
                      do
                      {
                        *v344 = -4096;
                        v344 += 3;
                        v346 -= 24;
                      }
                      while (v346);
                    }
                    goto LABEL_296;
                  }
                  *v312 = 0;
                  *(_QWORD *)(v16 + 752) = 0;
                  *(_DWORD *)(v16 + 760) = 0;
LABEL_546:
                  a6 = (uint64_t)v372;
LABEL_296:
                  sub_1C4A93A5C(v16, a6, v15);
                  *(_BYTE *)(v16 + 570) = 1;
                  v11 = v199;
                  goto LABEL_12;
                }
                if (!(_DWORD)v313)
                {
LABEL_545:
                  *(_QWORD *)(v16 + 752) = 0;
                  goto LABEL_546;
                }
                v332 = *v312 + 24;
                v333 = 24 * v313;
                while (1)
                {
                  v334 = *(_QWORD *)(v332 - 24);
                  if (v334 == -8192)
                    goto LABEL_543;
                  if (v334 != -4096)
                    break;
LABEL_544:
                  v332 += 24;
                  v333 -= 24;
                  if (!v333)
                    goto LABEL_545;
                }
                v335 = *(void **)(v332 - 16);
                if ((void *)v332 != v335)
                  free(v335);
LABEL_543:
                *(_QWORD *)(v332 - 24) = -4096;
                goto LABEL_544;
              }
              *v202 = 0;
              *(_QWORD *)(v16 + 680) = 0;
              *(_DWORD *)(v16 + 688) = 0;
LABEL_556:
              a6 = (uint64_t)v372;
              goto LABEL_290;
            }
          }
          if (v322)
          {
            v338 = (_QWORD *)*v202;
            v339 = 32 * v322;
            do
            {
              *v338 = -4096;
              v338 += 4;
              v339 -= 32;
            }
            while (v339);
          }
          *(_QWORD *)(v16 + 680) = 0;
          goto LABEL_556;
        }
        *v200 = 0;
        *(_QWORD *)(v16 + 632) = 0;
        *(_DWORD *)(v16 + 640) = 0;
LABEL_551:
        a6 = (uint64_t)v372;
        goto LABEL_288;
      }
    }
    if (v317)
    {
      v336 = (_QWORD *)*v200;
      v337 = 8 * v317;
      do
      {
        *v336++ = -4096;
        v337 -= 8;
      }
      while (v337);
    }
    *(_QWORD *)(v16 + 632) = 0;
    goto LABEL_551;
  }
LABEL_12:
  v19 = v11;
  v20 = v11;
  v21 = v11 & 0x7FFFFFFF;
  if (v21 >= *(unsigned int *)(v15 + 416) || (v22 = *(llvm::LiveInterval **)(*(_QWORD *)(v15 + 408) + 8 * v21)) == 0)
  {
    v22 = (llvm::LiveInterval *)sub_1C4851220(v15, v11);
    v242 = *(_QWORD *)(v15 + 304);
    v243 = *(_QWORD *)(v15 + 248);
    *(_QWORD *)v242 = v243;
    *(_QWORD *)(v242 + 8) = *(_QWORD *)(v243 + 40);
    *(_OWORD *)(v242 + 16) = *(_OWORD *)(v15 + 288);
    *(_QWORD *)(v242 + 32) = v15 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v242);
    *(_DWORD *)(v242 + 184) = 0;
    a6 = (uint64_t)v372;
    v244 = *(_QWORD *)(v15 + 256);
    v13 = *(_BYTE *)(v244 + 16) == 0;
    v245 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v244 + 24) + 16 * (*((_DWORD *)v22 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v247 = !v13 && v245 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v15 + 304), v22, v247);
    llvm::LiveIntervals::computeDeadValues(v15, (uint64_t)v22, 0);
  }
  v23 = *(_QWORD *)(a6 + 40);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 16 * v21);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a6 + 16) + 176))(*(_QWORD *)(a6 + 16));
  v26 = *(_DWORD *)(v16 + 640);
  v11 = v20;
  if (!v26)
    goto LABEL_7;
  v27 = v25;
  v28 = *(_QWORD *)(v16 + 624);
  v29 = v26 - 1;
  v30 = v29 & ((v22 >> 4) ^ (v22 >> 9));
  v31 = *(llvm::LiveInterval **)(v28 + 8 * v30);
  if (v22 == v31)
  {
LABEL_19:
    v34 = sub_1C4A93988(v16, v23, v25, v15, v19);
    v11 = v20;
    if (!v34)
      goto LABEL_7;
    v35 = v24 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(*(_QWORD *)(v27 + 264)
                   + 24
                   * (*(unsigned __int16 *)(*(_QWORD *)v35 + 24)
                    + *(_DWORD *)(v27 + 272) * ((*(_QWORD *)(v27 + 248) - *(_QWORD *)(v27 + 240)) >> 3))) & 0x1F) == 0)
      goto LABEL_7;
    v380 = 0;
    v381 = 0;
    LODWORD(v382) = 0;
    v385[0] = 0;
    __p = 0;
    v384 = 0;
    v375 = (char *)v376 + 8;
    *(_QWORD *)&v376[0] = 0x800000000;
    v36 = atomic_load((unsigned __int8 *)&qword_1ED7EDCC8);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDCC8))
    {
      byte_1ED7EDC9C = 1;
      __cxa_guard_release(&qword_1ED7EDCC8);
    }
    ++*(_DWORD *)(a8 + 272);
    if (!a4)
    {
LABEL_297:
      v208 = (char *)v375;
      if (LODWORD(v376[0]))
      {
        v209 = (char *)v375 + 4 * LODWORD(v376[0]);
LABEL_358:
        v240 = a5[1];
        do
        {
          v241 = *(_DWORD *)v208;
          if ((unint64_t)(v240 + 1) > a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, a5 + 3, v240 + 1, 2);
            v240 = a5[1];
          }
          *(_WORD *)(*a5 + 2 * v240) = v241;
          v240 = a5[1] + 1;
          a5[1] = v240;
          v208 += 4;
        }
        while (v208 != v209);
        v208 = (char *)v375;
      }
      if (v208 != (char *)v376 + 8)
        free(v208);
      if (__p)
      {
        v384 = (uint64_t)__p;
        operator delete(__p);
      }
      MEMORY[0x1CAA32FB4](v380, 4);
      v11 = v20;
      goto LABEL_7;
    }
    v37 = &a3[a4];
    v38 = a3;
    v364 = v35;
    while (1)
    {
      v39 = *v38;
      v374 = 0;
      HIDWORD(v40) = *(_DWORD *)(*(_QWORD *)(v27 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*(_QWORD *)v35 + 24)
                                + *(_DWORD *)(v27 + 272)
                                * ((*(_QWORD *)(v27 + 248) - *(_QWORD *)(v27 + 240)) >> 3)))
                   - 16;
      LODWORD(v40) = HIDWORD(v40);
      v41 = (&off_1E7FB1C30)[(int)(v40 >> 5)];
      LODWORD(v42) = v39;
      if (v41 != (__int16 ***)v35)
      {
        v43 = *(_QWORD *)(v27 + 56);
        v42 = *(_QWORD *)(v27 + 8) + 24 * v39;
        v44 = *(unsigned int *)(v42 + 8);
        if (*(_WORD *)(v43 + 2 * v44))
        {
          v45 = *(_WORD *)(v43 + 2 * v44) + v39;
          v46 = (unsigned __int16 *)(v43 + 2 * v44 + 2);
          do
          {
            LODWORD(v42) = v45;
            if (v45 - 1 <= 0x3FFFFFFE
              && v45 >> 3 < *((unsigned __int16 *)*v41 + 11)
              && ((*((unsigned __int8 *)(*v41)[1] + ((unint64_t)v45 >> 3)) >> (v45 & 7)) & 1) != 0)
            {
              break;
            }
            v47 = *v46++;
            v45 += v47;
          }
          while (v47);
        }
      }
      v374 = v42;
      if ((_DWORD)v382)
      {
        v48 = (v382 - 1) & (37 * v42);
        v49 = *((_DWORD *)v380 + v48);
        if ((_DWORD)v42 == v49)
          goto LABEL_43;
        v50 = 1;
        while (v49 != -1)
        {
          v51 = v48 + v50++;
          v48 = v51 & (v382 - 1);
          v49 = *((_DWORD *)v380 + v48);
          if ((_DWORD)v42 == v49)
            goto LABEL_43;
        }
      }
      if (LODWORD(v376[0]) > byte_1ED7EDC9C)
      {
        v208 = (char *)v375;
        v209 = (char *)v375 + 4 * LODWORD(v376[0]);
        goto LABEL_358;
      }
      v52 = v37;
      if (!llvm::LiveRegMatrix::checkInterference(a8, (uint64_t)v22, v42))
      {
        v53 = LODWORD(v376[0]);
        if (LODWORD(v376[0]) >= (unint64_t)DWORD1(v376[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v375, (uint64_t)v376 + 8, LODWORD(v376[0]) + 1, 4);
          v53 = LODWORD(v376[0]);
        }
        *((_DWORD *)v375 + v53) = v39;
        ++LODWORD(v376[0]);
      }
      sub_1C4A0C7B8((uint64_t)&v380, &v374);
      v37 = v52;
      v35 = v364;
LABEL_43:
      if (++v38 == v37)
        goto LABEL_297;
    }
  }
  v32 = 1;
  while (v31 != (llvm::LiveInterval *)-4096)
  {
    v33 = v30 + v32++;
    v30 = v33 & v29;
    v31 = *(llvm::LiveInterval **)(v28 + 8 * v30);
    if (v22 == v31)
      goto LABEL_19;
  }
LABEL_7:
  if (a5[1])
    return 0;
  v54 = atomic_load((unsigned __int8 *)&qword_1ED7EDCB0);
  if ((v54 & 1) == 0)
  {
    v260 = v11;
    v261 = __cxa_guard_acquire(&qword_1ED7EDCB0);
    v11 = v260;
    if (v261)
    {
      byte_1ED7EDC99 = 1;
      __cxa_guard_release(&qword_1ED7EDCB0);
      v11 = v260;
    }
  }
  v55 = a1;
  v56 = (uint64_t)a7;
  v58 = byte_1ED7EDC99 != 1 || a7 == 0 || a8 == 0;
  v368 = v11;
  if (!v58 && *(_QWORD *)(v372[7] + 8) != *(_QWORD *)(v372[7] + 16))
  {
    v65 = v372[5];
    v365 = v372[2];
    v66 = (*(uint64_t (**)(void))(*(_QWORD *)v365 + 104))();
    v11 = v368;
    v67 = v66;
    v68 = *(_QWORD *)(a8 + 256);
    v69 = v368 & 0x7FFFFFFF;
    if (v69 >= *(unsigned int *)(v68 + 416) || (v70 = *(_QWORD *)(*(_QWORD *)(v68 + 408) + 8 * v69)) == 0)
    {
      v70 = sub_1C4851220(*(_QWORD *)(a8 + 256), v368);
      v252 = *(_QWORD *)(v68 + 304);
      v253 = *(_QWORD *)(v68 + 248);
      *(_QWORD *)v252 = v253;
      *(_QWORD *)(v252 + 8) = *(_QWORD *)(v253 + 40);
      *(_OWORD *)(v252 + 16) = *(_OWORD *)(v68 + 288);
      *(_QWORD *)(v252 + 32) = v68 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v252);
      *(_DWORD *)(v252 + 184) = 0;
      v254 = *(_QWORD *)(v68 + 256);
      v13 = *(_BYTE *)(v254 + 16) == 0;
      v255 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v254 + 24) + 16 * (*(_DWORD *)(v70 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v257 = !v13 && v255 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v68 + 304), (llvm::LiveInterval *)v70, v257);
      llvm::LiveIntervals::computeDeadValues(v68, v70, 0);
      v11 = v368;
    }
    v375 = (void *)1;
    *(_QWORD *)&v71 = -1;
    *((_QWORD *)&v71 + 1) = -1;
    v376[0] = v71;
    v376[1] = v71;
    v377 = v379;
    v378 = 0x800000000;
    if ((v11 & 0x80000000) != 0)
      v72 = (uint64_t *)(*(_QWORD *)(v65 + 24) + 16 * v69 + 8);
    else
      v72 = (uint64_t *)(*(_QWORD *)(v65 + 272) + 8 * v368);
    v56 = (uint64_t)a7;
    v168 = *v72;
    if (!*v72)
      goto LABEL_476;
    while ((*(_DWORD *)v168 & 0x80000000) != 0)
    {
      v168 = *(_QWORD *)(v168 + 24);
      if (!v168)
        goto LABEL_476;
    }
LABEL_221:
    LODWORD(v380) = 0;
    v169 = (unint64_t *)(v168 + 8);
    if (!(*(unsigned int (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v67 + 64))(v67, *(_QWORD *)(v168 + 8), &v380)&& !(*(unsigned int (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v67 + 96))(v67, *(_QWORD *)(v168 + 8), &v380))
    {
      v11 = v368;
      while (1)
      {
        v168 = *(_QWORD *)(v168 + 24);
        if (!v168)
          goto LABEL_476;
        if ((*(_DWORD *)v168 & 0x80000000) == 0)
          goto LABEL_221;
      }
    }
    v170 = *v169;
    v11 = v368;
    if (!*v169)
      goto LABEL_476;
    v171 = *(unsigned __int16 **)(v170 + 16);
    if (*v171 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v170 + 32) + 48) & 8) != 0)
    {
      v172 = *(_WORD *)(v170 + 44);
      v173 = v172 & 4;
      goto LABEL_398;
    }
    v172 = *(_WORD *)(v170 + 44);
    v173 = v172 & 4;
    v174 = *((_QWORD *)v171 + 1);
    if ((v172 & 0xC) != 0 && v173 == 0)
    {
      if ((v174 & 0x80000) != 0)
      {
LABEL_492:
        v262 = (_QWORD *)(v68 + 288);
        v263 = *(_QWORD *)(v68 + 288);
        v264 = *v169;
        v265 = a4;
        goto LABEL_401;
      }
      v311 = *v169;
      v56 = (uint64_t)a7;
      v11 = v368;
      while ((*(_WORD *)(v311 + 44) & 8) != 0)
      {
        v311 = *(_QWORD *)(v311 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v311 + 16) + 10) & 8) != 0)
          goto LABEL_492;
      }
    }
    else if ((v174 & 0x80000) != 0)
    {
LABEL_398:
      v262 = (_QWORD *)(v68 + 288);
      v263 = *(_QWORD *)(v68 + 288);
      if (v173)
      {
        v264 = *v169;
        do
          v264 = *(_QWORD *)v264 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v264 + 44) & 4) != 0);
      }
      else
      {
        v264 = *v169;
      }
      v265 = a4;
LABEL_401:
      v266 = *v169;
      if ((v172 & 8) != 0)
      {
        v266 = *v169;
        do
          v266 = *(_QWORD *)(v266 + 8);
        while ((*(_WORD *)(v266 + 44) & 8) != 0);
      }
      v267 = *(_QWORD *)(v266 + 8);
      if (v264 != v267)
      {
        while (1)
        {
          v268 = **(unsigned __int16 **)(v264 + 16);
          v269 = v268 > 0x17;
          v270 = (1 << v268) & 0x83E000;
          if (v269 || v270 == 0)
            break;
          v264 = *(_QWORD *)(v264 + 8);
          if (v264 == v267)
          {
            v264 = *(_QWORD *)(v266 + 8);
            break;
          }
        }
      }
      v272 = *(_QWORD *)(v263 + 368);
      v273 = *(unsigned int *)(v263 + 384);
      if ((_DWORD)v273)
      {
        LODWORD(v274) = ((v264 >> 4) ^ (v264 >> 9)) & (v273 - 1);
        v275 = (uint64_t *)(v272 + 16 * v274);
        v276 = *v275;
        if (v264 == *v275)
          goto LABEL_416;
        v277 = 1;
        while (v276 != -4096)
        {
          v278 = v274 + v277++;
          v274 = v278 & (v273 - 1);
          v276 = *(_QWORD *)(v272 + 16 * v274);
          if (v264 == v276)
          {
            v275 = (uint64_t *)(v272 + 16 * v274);
            goto LABEL_416;
          }
        }
      }
      v275 = (uint64_t *)(v272 + 16 * v273);
LABEL_416:
      v279 = v275[1];
      v280 = *(_QWORD *)(*(_QWORD *)(v170 + 24) + 56);
      v380 = &v382;
      v381 = 0x1400000000;
      v281 = atomic_load((unsigned __int8 *)&qword_1ED7EDCD0);
      if ((v281 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDCD0))
      {
        byte_1ED7EDCA0 = 1;
        __cxa_guard_release(&qword_1ED7EDCD0);
      }
      if (byte_1ED7EDCA0)
        v282 = 20;
      else
        v282 = 0;
      if (HIDWORD(v381) < v282)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)&v382, v282, 4);
      v283 = v381;
      if (v170 != v280 && v265 != 0)
      {
        v285 = v265;
        v286 = v279 & 0xFFFFFFFFFFFFFFF8 | 4;
        v287 = &a3[v285];
        v288 = a3;
        v367 = v262;
        while (1)
        {
          if (byte_1ED7EDCA0)
            v289 = 20;
          else
            v289 = 0;
          if (v283 > v289)
            goto LABEL_469;
          v170 = *(_QWORD *)v170 & 0xFFFFFFFFFFFFFFF8;
          if (!v170 || (*(_BYTE *)v170 & 4) == 0)
            break;
          v290 = *(_WORD *)(v170 + 44);
          v291 = *v262;
          if ((v290 & 4) == 0)
            goto LABEL_440;
          v292 = v170;
          do
            v292 = *(_QWORD *)v292 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v292 + 44) & 4) != 0);
LABEL_441:
          v293 = v170;
          if ((v290 & 8) != 0)
          {
            do
              v293 = *(_QWORD *)(v293 + 8);
            while ((*(_WORD *)(v293 + 44) & 8) != 0);
          }
          v294 = *(_QWORD *)(v293 + 8);
          if (v292 != v294)
          {
            while (1)
            {
              v295 = **(unsigned __int16 **)(v292 + 16);
              v269 = v295 > 0x17;
              v296 = (1 << v295) & 0x83E000;
              if (v269 || v296 == 0)
                break;
              v292 = *(_QWORD *)(v292 + 8);
              if (v292 == v294)
              {
                v292 = v294;
                break;
              }
            }
          }
          v298 = *(_QWORD *)(v291 + 368);
          v299 = *(unsigned int *)(v291 + 384);
          if ((_DWORD)v299)
          {
            LODWORD(v300) = ((v292 >> 4) ^ (v292 >> 9)) & (v299 - 1);
            v301 = (uint64_t *)(v298 + 16 * v300);
            v302 = *v301;
            if (v292 == *v301)
              goto LABEL_456;
            v303 = 1;
            while (v302 != -4096)
            {
              v304 = v300 + v303++;
              v300 = v304 & (v299 - 1);
              v302 = *(_QWORD *)(v298 + 16 * v300);
              if (v292 == v302)
              {
                v301 = (uint64_t *)(v298 + 16 * v300);
                goto LABEL_456;
              }
            }
          }
          v301 = (uint64_t *)(v298 + 16 * v299);
LABEL_456:
          v305 = v301[1];
          ++*(_DWORD *)(a8 + 272);
          if (v288 != v287)
          {
            v306 = v305 & 0xFFFFFFFFFFFFFFF8 | 4;
            while (llvm::LiveRegMatrix::checkInterference(a8, v306, v286, *v288))
            {
              if (++v288 == v287)
              {
                v283 = v381;
                goto LABEL_468;
              }
            }
            v307 = *v288;
            v308 = v381;
            if (v381 >= (unint64_t)HIDWORD(v381))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)&v382, v381 + 1, 4);
              v308 = v381;
            }
            *((_DWORD *)v380 + v308) = v307;
            v283 = v381 + 1;
            LODWORD(v381) = v381 + 1;
            if (v170 != v280)
            {
              v262 = v367;
              if (v288 != v287)
                continue;
            }
          }
          goto LABEL_468;
        }
        while (1)
        {
          v290 = *(_WORD *)(v170 + 44);
          if ((v290 & 4) == 0)
            break;
          v170 = *(_QWORD *)v170 & 0xFFFFFFFFFFFFFFF8;
        }
        v291 = *v262;
LABEL_440:
        v292 = v170;
        goto LABEL_441;
      }
LABEL_468:
      if (v283)
      {
LABEL_469:
        v309 = *((_DWORD *)v380 + v283 - 1);
        v310 = a5[1];
        if ((unint64_t)(v310 + 1) > a5[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, a5 + 3, v310 + 1, 2);
          v310 = a5[1];
        }
        *(_WORD *)(*a5 + 2 * v310) = v309;
        ++a5[1];
      }
      if (v380 != &v382)
        free(v380);
      v56 = (uint64_t)a7;
      goto LABEL_475;
    }
    if (*(float *)(v70 + 116) != INFINITY)
    {
LABEL_476:
      if (v377 != v379)
      {
        free(v377);
        v11 = v368;
      }
      v55 = a1;
      if ((v375 & 1) == 0)
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v376[0], 4);
        v11 = v368;
      }
      goto LABEL_54;
    }
    v176 = *v169;
    if ((v172 & 8) != 0)
    {
      v176 = *v169;
      if ((*(_QWORD *)v170 & 4) == 0)
      {
        v176 = *v169;
        do
          v176 = *(_QWORD *)(v176 + 8);
        while ((*(_WORD *)(v176 + 44) & 8) != 0);
      }
    }
    v177 = *(_QWORD *)(v176 + 8);
    v178 = *(_QWORD *)(v170 + 24) + 48;
    if (v177 != v178)
    {
      v179 = 10;
      while (1)
      {
        v180 = *(unsigned __int16 **)(v177 + 16);
        v181 = sub_1C4C915C4(*v180);
        if ((v181 & 0xFF00000000) != 0)
        {
          v182 = (v181 - 64) > 0x3A || ((1 << (v181 - 64)) & 0x60001F460000001) == 0;
          if (!v182
            || ((v181 - 147) <= 0x14 ? (v183 = ((1 << (v181 + 109)) & 0x1E0001) == 0) : (v183 = 1), !v183))
          {
            v187 = *(_QWORD *)(v177 + 32);
            v188 = *((unsigned __int8 *)v180 + 4);
            if ((v180[4] & 2) == 0 || (v196 = *(_DWORD *)(v177 + 40), v196 == v188))
            {
              v189 = *((unsigned __int8 *)v180 + 4);
            }
            else
            {
              v197 = v196 - 1;
              v189 = *((unsigned __int8 *)v180 + 4);
              do
              {
                v198 = *(_DWORD *)(v187 + 32 * v188);
                if ((v198 & 0x10000FF) != 0x1000000)
                  break;
                v189 += (v198 & 0x2000000) == 0;
                if (v197 == v188)
                  break;
                ++v188;
              }
              while ((v198 & 0x2000000) == 0);
            }
            if (v189)
              break;
          }
        }
LABEL_247:
        v184 = v378;
        v185 = v179 - 1;
        if (v378 < 6)
          --v179;
        if (v378 <= 5 && v185 != 0)
        {
          if (!v177 || (*(_BYTE *)v177 & 4) == 0)
          {
            while ((*(_WORD *)(v177 + 44) & 8) != 0)
              v177 = *(_QWORD *)(v177 + 8);
          }
          v177 = *(_QWORD *)(v177 + 8);
          if (v177 != v178)
            continue;
        }
        goto LABEL_300;
      }
      v190 = 32 * v189;
      v191 = (int *)(v187 + 4);
      while (1)
      {
        v193 = *v191;
        v191 += 8;
        v192 = v193;
        if (v193 < 0)
        {
          v380 = 0;
          if ((sub_1C4AB1380((uint64_t)&v375, v192, &v380) & 1) == 0)
            break;
        }
LABEL_275:
        v190 -= 32;
        if (!v190)
          goto LABEL_247;
      }
      if ((v375 & 1) != 0)
        v194 = 8;
      else
        v194 = DWORD2(v376[0]);
      if (4 * (v375 >> 1) + 4 >= 3 * v194)
      {
        v194 *= 2;
      }
      else if (v194 + ~(v375 >> 1) - HIDWORD(v375) > v194 >> 3)
      {
LABEL_270:
        LODWORD(v375) = (_DWORD)v375 + 2;
        if (*(_DWORD *)v380 != -1)
          --HIDWORD(v375);
        *(_DWORD *)v380 = v192;
        v195 = v378;
        if (v378 >= (unint64_t)HIDWORD(v378))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v377, (uint64_t)v379, v378 + 1, 4);
          v195 = v378;
        }
        *((_DWORD *)v377 + v195) = v192;
        LODWORD(v378) = v378 + 1;
        goto LABEL_275;
      }
      sub_1C4AB1424((uint64_t)&v375, v194);
      v380 = 0;
      sub_1C4AB1380((uint64_t)&v375, v192, &v380);
      goto LABEL_270;
    }
    v184 = v378;
LABEL_300:
    v380 = (void *)1;
    v381 = -1;
    v382 = -1;
    __p = v385;
    v384 = 0x400000000;
    if (!v184)
    {
LABEL_326:
      v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v365 + 176))(v365);
      v228 = v384;
      if ((_DWORD)v384 && a4)
      {
        v229 = (_QWORD *)(v227 + 8);
        v230 = a3;
        v362 = &a3[a4];
        while (1)
        {
          v363 = 4 * v228;
          v366 = (unsigned int *)__p;
          while (1)
          {
            v231 = *v230;
            if (!v228)
              break;
            v232 = v228;
            v234 = v363;
            v233 = v366;
            while (1)
            {
              v235 = *v233;
              if (*v233 == v231
                || v231 - 1 <= 0x3FFFFFFE
                && v235 - 1 <= 0x3FFFFFFE
                && llvm::MCRegisterInfo::regsOverlap(v229, v231, v235))
              {
                break;
              }
              ++v233;
              v234 -= 4;
              if (!v234)
                goto LABEL_340;
            }
            ++v230;
            v228 = v232;
            if (v230 == v362)
              goto LABEL_347;
          }
LABEL_340:
          v236 = a5[1];
          if ((unint64_t)(v236 + 1) > a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, a5 + 3, v236 + 1, 2);
            v236 = a5[1];
          }
          *(_WORD *)(*a5 + 2 * v236) = v231;
          v237 = a5[1] + 1;
          a5[1] = v237;
          ++v230;
          if (v237 > 0xA || v230 == v362)
            break;
          v228 = v384;
        }
      }
LABEL_347:
      if (__p != v385)
        free(__p);
      v56 = (uint64_t)a7;
      if ((v380 & 1) == 0)
        MEMORY[0x1CAA32FB4](v381, 4);
LABEL_475:
      v11 = v368;
      goto LABEL_476;
    }
    v210 = v377;
    v211 = (char *)v377 + 4 * v184;
    while (1)
    {
      v212 = *(_DWORD *)(*(_QWORD *)(v56 + 280) + 4 * (*v210 & 0x7FFFFFFF));
      if (v212)
      {
        v374 = *(_DWORD *)(*(_QWORD *)(v56 + 280) + 4 * (*v210 & 0x7FFFFFFF));
        if ((v380 & 1) != 0)
        {
          v213 = 4;
          v214 = &v381;
        }
        else
        {
          v213 = v382;
          if (!(_DWORD)v382)
          {
            v223 = 0;
LABEL_318:
            v224 = sub_1C4A9F624((uint64_t)&v380, (uint64_t)&v374, &v374, v223);
            *v224 = v374;
            v225 = v374;
            v226 = v384;
            if (v384 >= (unint64_t)HIDWORD(v384))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v385, v384 + 1, 4);
              v226 = v384;
            }
            *((_DWORD *)__p + v226) = v225;
            LODWORD(v384) = v384 + 1;
            goto LABEL_321;
          }
          v214 = (uint64_t *)v381;
        }
        v215 = v213 - 1;
        v216 = v215 & (37 * v212);
        v217 = (_DWORD *)v214 + v216;
        v218 = *v217;
        if (v212 != *v217)
        {
          v219 = 0;
          v220 = 1;
          while (v218 != -1)
          {
            if (v219)
              v221 = 0;
            else
              v221 = v218 == -2;
            if (v221)
              v219 = v217;
            v222 = v216 + v220++;
            v216 = v222 & v215;
            v217 = (_DWORD *)v214 + v216;
            v218 = *v217;
            if (v212 == *v217)
              goto LABEL_321;
          }
          if (v219)
            v223 = v219;
          else
            v223 = v217;
          goto LABEL_318;
        }
      }
LABEL_321:
      if (++v210 == (_DWORD *)v211)
        goto LABEL_326;
    }
  }
LABEL_54:
  v59 = v11;
  llvm::TargetRegisterInfo::getRegAllocationHints(v55, v11, a3, a4, a5, (uint64_t)v372, v56);
  if (!v56 || !a8)
    return 0;
  v380 = &v382;
  v381 = 0xC00000000;
  sub_1C4893E04((char *)&v380, 6uLL, 0);
  v60 = v368;
  v61 = (unsigned int *)v380;
  v62 = v381;
  v63 = a7[31];
  if ((v368 & 0x80000000) != 0)
    v64 = (int **)(*(_QWORD *)(v63 + 24) + 16 * (v368 & 0x7FFFFFFF) + 8);
  else
    v64 = (int **)(*(_QWORD *)(v63 + 272) + 8 * v59);
  v73 = *v64;
  if (*v64)
  {
    v74 = (_QWORD *)a7[33];
    while (1)
    {
      v75 = *v73;
      if ((*v73 & 0x80000000) == 0)
        break;
      v73 = (int *)*((_QWORD *)v73 + 3);
      if (!v73)
        goto LABEL_68;
    }
    v103 = byte_1C69FED14;
    v104 = byte_1C69FF49A;
    v105 = byte_1C6A002DC;
LABEL_108:
    v106 = (v75 >> 8) & 0xFFF;
    if (v106)
    {
      if (v106 - 25 > 0xB)
      {
        if (v106 > 0x10)
        {
          v108 = *(uint64_t (**)(_QWORD *))(*v74 + 208);
          v109 = v74;
          v110 = v105;
          v111 = v74;
          v112 = v103;
          v113 = v63;
          v114 = v104;
          v115 = v108(v109);
          v104 = v114;
          v63 = v113;
          v103 = v112;
          v74 = v111;
          v105 = v110;
          v60 = v368;
          v107 = v115 - 1;
        }
        else
        {
          v107 = v106 - 1;
        }
      }
      else
      {
        v107 = 2 * v106 - 50;
      }
    }
    else
    {
      v107 = 0;
    }
    for (i = *((_QWORD *)v73 + 1); (*(_WORD *)(i + 44) & 4) != 0; i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8)
      ;
    if ((*((_BYTE *)v73 + 3) & 1) == 0)
    {
      v117 = *(_DWORD **)(i + 32);
      v118 = *(_QWORD *)(i + 24) + 48;
      v119 = *(unsigned int *)(i + 40);
      v120 = &v117[8 * v119];
      if ((_DWORD)v119)
        goto LABEL_120;
      v165 = *(_QWORD *)(i + 8);
      if (v165 == v118)
      {
        i = *(_QWORD *)(i + 24) + 48;
        goto LABEL_120;
      }
      i = *(_QWORD *)(i + 24) + 48;
      if ((*(_WORD *)(v165 + 44) & 4) == 0)
        goto LABEL_120;
      while (1)
      {
        v166 = v165;
        v167 = *(unsigned int *)(v165 + 40);
        if ((_DWORD)v167)
          break;
        v165 = *(_QWORD *)(v165 + 8);
        if (v165 == v118 || (*(_WORD *)(v165 + 44) & 4) == 0)
        {
          i = v118;
          goto LABEL_211;
        }
      }
      i = v165;
LABEL_211:
      v117 = *(_DWORD **)(v166 + 32);
      v120 = &v117[8 * v167];
      v60 = v368;
      while (1)
      {
LABEL_120:
        if (v117 == v120)
          break;
        if ((*v117 & 0x10000FF) != 0)
          goto LABEL_189;
        v121 = v117[1];
        if (v121 == v60)
          goto LABEL_189;
        if ((v121 & 0x80000000) != 0)
        {
          v125 = *(_DWORD *)(a7[35] + 4 * (v121 & 0x7FFFFFFF));
          if (!v125)
            goto LABEL_189;
          v126 = (*v117 >> 8) & 0xFFF;
          if (v126)
          {
            v127 = v74[1];
            v128 = v74[7];
            v129 = *(unsigned int *)(v127 + 24 * v125 + 4);
            if (!*(_WORD *)(v128 + 2 * v129))
              goto LABEL_189;
            v130 = *(_WORD *)(v128 + 2 * v129) + v125;
            v131 = (unsigned __int16 *)(v74[11] + 2 * *(unsigned int *)(v127 + 24 * v125 + 12));
            v132 = (unsigned __int16 *)(v128 + 2 * v129 + 2);
            while (v126 != *v131)
            {
              v133 = *v132++;
              v130 += v133;
              ++v131;
              if (!v133)
                goto LABEL_189;
            }
            v121 = v130;
          }
          else
          {
            v121 = v125;
          }
        }
        if (v121 - 1 <= 0x3FFFFFFE)
        {
          v122 = (unint64_t)v121 >> 3;
          if (v121 > 0x207)
          {
            if (v121 > 0x827)
              goto LABEL_189;
            v122 = v122;
            v123 = 1 << (v121 & 7);
          }
          else
          {
            v123 = 1 << (v121 & 7);
            if ((v123 & v103[v122]) != 0)
            {
              v124 = *(unsigned __int16 *)(v74[14] + 2 * v121);
              goto LABEL_187;
            }
            if (v121 <= 0xE7 && (v123 & v104[v122]) != 0)
            {
              v134 = *(unsigned __int16 *)(v74[14] + 2 * v121) - v107;
              if ((*v73 & 0xFFF00) != 0x200)
              {
                ++v61[v134 % v62];
                if ((*v73 & 0xFFF00) == 0x100)
                  goto LABEL_189;
              }
              v135 = v134 + 1;
              goto LABEL_188;
            }
          }
          if ((v123 & v105[v122]) != 0)
          {
            v136 = v74[1];
            v137 = v74[7];
            v138 = *(unsigned int *)(v136 + 24 * v121 + 4);
            if (*(_WORD *)(v137 + 2 * v138))
            {
              v139 = *(_WORD *)(v137 + 2 * v138) + v121;
              v140 = (_WORD *)(v74[11] + 2 * *(unsigned int *)(v136 + 24 * v121 + 12));
              v141 = (unsigned __int16 *)(v137 + 2 * v138 + 2);
              v142 = v141;
              v143 = v140;
              v144 = v139;
              while (*v143 != 26)
              {
                v145 = *v142++;
                v144 += v145;
                ++v143;
                if (!v145)
                {
                  v146 = 0;
                  goto LABEL_151;
                }
              }
              v146 = v144;
LABEL_151:
              while (*v140 != 25)
              {
                v147 = *v141++;
                v139 += v147;
                ++v140;
                if (!v147)
                  goto LABEL_199;
              }
              v148 = v139;
            }
            else
            {
              v146 = 0;
LABEL_199:
              v148 = 0;
            }
            v149 = (*v73 >> 8) & 0xFFF;
            v151 = v149 == 1 || v149 == 25;
            if ((((((*v73 >> 8) & 0xFFF) != 0) ^ v151) & 1) == 0)
            {
              v152 = (*(unsigned __int16 *)(v74[14] + 2 * v148) - v107 + 1) % v62;
              ++v61[v152];
            }
            v154 = v149 == 2 || v149 == 25;
            if ((((v149 != 0) ^ v154) & 1) == 0)
            {
              v155 = (*(unsigned __int16 *)(v74[14] + 2 * v148) - v107) % v62;
              ++v61[v155];
            }
            v157 = v149 == 3 || v149 == 26;
            if ((((v149 != 0) ^ v157) & 1) == 0)
            {
              v158 = (*(unsigned __int16 *)(v74[14] + 2 * v146) - v107 + 1) % v62;
              ++v61[v158];
            }
            v159 = v149 != 0;
            v160 = v149 == 4 || v149 == 26;
            v161 = v160;
            if (((v159 ^ v161) & 1) == 0)
            {
              v124 = *(unsigned __int16 *)(v74[14] + 2 * v146);
LABEL_187:
              v135 = v124 - v107;
LABEL_188:
              ++v61[v135 % v62];
            }
          }
        }
LABEL_189:
        v117 += 8;
        if (v117 == v120)
        {
          v162 = *(_QWORD *)(i + 8);
          if (v162 == v118)
            break;
          v117 = v120;
          i = v118;
          if ((*(_WORD *)(v162 + 44) & 4) != 0)
          {
            while (1)
            {
              v163 = v162;
              v164 = *(unsigned int *)(v162 + 40);
              if ((_DWORD)v164)
                break;
              v162 = *(_QWORD *)(v162 + 8);
              if (v162 == v118 || (*(_WORD *)(v162 + 44) & 4) == 0)
              {
                i = v118;
                goto LABEL_197;
              }
            }
            i = v162;
LABEL_197:
            v117 = *(_DWORD **)(v163 + 32);
            v120 = &v117[8 * v164];
          }
        }
      }
    }
    while (1)
    {
      v73 = (int *)*((_QWORD *)v73 + 3);
      if (!v73)
        break;
      v75 = *v73;
      if ((*v73 & 0x80000000) == 0)
        goto LABEL_108;
    }
  }
LABEL_68:
  v76 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 24) + 16 * (v60 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                            + 24);
  v77 = v76 >> 5;
  v78 = dword_1C676DC10[v76 >> 5];
  v79 = 1 << v76;
  if ((v79 & v78) != 0
    || (dword_1C676E730[v77] & v79) != 0
    || (dword_1C676F6F0[v77] & v79) != 0
    || (dword_1C67701E0[v77] & v79) != 0
    || (dword_1C6770F50[v77] & v79) != 0
    || (dword_1C6771D50[v77] & v79) != 0)
  {
    if (!(_DWORD)v62)
    {
LABEL_90:
      v84 = *v61;
      goto LABEL_91;
    }
    goto LABEL_75;
  }
  if ((dword_1C6772020[v77] & v79) != 0 && (_DWORD)v62 != 0)
  {
LABEL_75:
    v80 = 0;
    do
    {
      v81 = (int *)&v61[v80];
      v82 = *v81 + v81[1];
      *v81 = v82;
      v81[1] = v82;
      v80 += 2;
    }
    while (v80 < v62);
  }
  if (!(_DWORD)v62)
    goto LABEL_90;
  v83 = v61 + 1;
  v84 = *v61;
  if ((_DWORD)v62 != 1)
  {
    v85 = 4 * v62;
    v86 = 4;
    v87 = *v61;
    v88 = v61;
    do
    {
      if (v61[(unint64_t)v86 / 4] < v87)
      {
        v87 = v61[(unint64_t)v86 / 4];
        v88 = &v61[(unint64_t)v86 / 4];
      }
      v86 += 4;
    }
    while (v85 != v86);
    v89 = *v88;
    v90 = v85 - 4;
    v91 = v61 + 1;
    v92 = a1;
    do
    {
      v94 = *v91++;
      v93 = v94;
      v95 = v84 >= v94;
      if (v84 <= v94)
        v84 = v93;
      if (!v95)
        v61 = v83;
      v83 = v91;
      v90 -= 4;
    }
    while (v90);
    v84 = v89;
    goto LABEL_92;
  }
LABEL_91:
  v92 = a1;
LABEL_92:
  v96 = *v61 - v84;
  if (*v61 != v84 && (v84 < 2 || v96 > v84 >> 1))
  {
    v97 = v96 <= 0xF ? 0 : v96 >> 1;
    (*(void (**)(_QWORD))(*(_QWORD *)v372[2] + 176))(v372[2]);
    if (a4)
    {
      v98 = v97 + v84;
      v99 = &a3[a4];
      do
      {
        v100 = *a3;
        if (*((_DWORD *)v380 + *(_WORD *)(*(_QWORD *)(v92 + 112) + 2 * v100) % 6u) <= v98)
        {
          v101 = a5[1];
          if ((unint64_t)(v101 + 1) > a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, a5 + 3, v101 + 1, 2);
            v101 = a5[1];
          }
          *(_WORD *)(*a5 + 2 * v101) = v100;
          v102 = a5[1] + 1;
          a5[1] = v102;
          if (v102 == 32)
            break;
        }
        ++a3;
      }
      while (a3 != v99);
    }
  }
  if (v380 != &v382)
    free(v380);
  return 0;
}

uint64_t sub_1C4AB00B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int **v33;
  uint64_t v34;
  llvm::MachineBasicBlock *v35;
  unint64_t FirstTerminator;
  uint64_t v37;
  int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t (**v66)();
  unsigned int v67;
  uint64_t (***v68)();
  void (**v69)(uint64_t (***)());
  uint64_t v70;
  uint64_t (**v71)();
  uint64_t (**v72)();
  uint64_t v73;
  uint64_t (***v74)();
  _QWORD v75[9];

  v75[8] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v12 = *(_QWORD *)(v11 + 40);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 176))(*(_QWORD *)(v11 + 16));
  v14 = *(unsigned __int16 *)(*(_QWORD *)a7 + 24);
  v15 = v14 - 14;
  v16 = (v14 - 14) > 0x32 || ((1 << (v14 - 14)) & 0x4000000004001) == 0;
  if (v16 && v14 != 105 && v14 != 127)
    goto LABEL_8;
  if ((__int16 ***)a3 == &off_1E7FADAE8)
  {
    v53 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
    v54 = (uint64_t *)((v53 & 0x80000000) != 0
                    ? *(_QWORD *)(v12 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v12 + 272) + 8 * v53);
    v55 = *v54;
    if (!v55)
      return 0;
    while ((*(_BYTE *)(v55 + 3) & 1) != 0)
    {
      v55 = *(_QWORD *)(v55 + 24);
      if (!v55)
        return 0;
    }
    v40 = 0;
    while (1)
    {
      v55 = *(_QWORD *)(v55 + 24);
      if (!v55)
        break;
      if ((*(_BYTE *)(v55 + 3) & 1) == 0)
        return v40;
    }
    v56 = (uint64_t *)((v53 & 0x80000000) != 0
                    ? *(_QWORD *)(v12 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v12 + 272) + 8 * v53);
    v57 = *v56;
    if (!v57)
      return 0;
    if ((*(_BYTE *)(v57 + 3) & 1) == 0)
    {
      v57 = *(_QWORD *)(v57 + 24);
      if (!v57 || (*(_BYTE *)(v57 + 3) & 1) == 0)
        return 0;
    }
    v58 = *(_QWORD *)(v57 + 24);
    if (v58)
    {
      if ((*(_BYTE *)(v58 + 3) & 1) != 0)
        return 0;
    }
    if ((v53 & 0x80000000) != 0)
      v59 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
    else
      v59 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v53);
    v60 = *v59;
    if ((*(_BYTE *)(v60 + 3) & 1) == 0)
      v60 = *(_QWORD *)(v60 + 24);
    v61 = *(_QWORD *)(v60 + 8);
    v62 = **(unsigned __int16 **)(v61 + 16);
    if ((v62 == 5625 || v62 == 517) && *(_QWORD *)(a2 + 24) != *(_QWORD *)(v61 + 24))
      return 0;
  }
  v48 = v15 > 0x32;
  v49 = (1 << v15) & 0x4000000004001;
  v50 = v48 || v49 == 0;
  if (v50 && v14 != 105 && v14 != 127)
    goto LABEL_8;
  v51 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
  v52 = (uint64_t *)((v51 & 0x80000000) != 0
                  ? *(_QWORD *)(v12 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v12 + 272) + 8 * v51);
  v63 = *v52;
  if (!*v52)
    goto LABEL_8;
  if ((*(_BYTE *)(v63 + 3) & 1) == 0)
  {
    v63 = *(_QWORD *)(v63 + 24);
    if (!v63 || (*(_BYTE *)(v63 + 3) & 1) == 0)
      goto LABEL_8;
  }
  v64 = *(_QWORD *)(v63 + 8);
LABEL_118:
  v65 = **(unsigned __int16 **)(v64 + 16);
  v66 = *(uint64_t (***)())(*(_QWORD *)(*(_QWORD *)(v64 + 24) + 32) + 16);
  v71 = &off_1E81316D0;
  v72 = v66;
  v74 = &v71;
  v67 = sub_1C4C0B384(&v71);
  v68 = v74;
  if (v74 == &v71)
  {
    v69 = (void (**)(uint64_t (***)()))(v71 + 4);
    v68 = &v71;
LABEL_120:
    (*v69)(v68);
    goto LABEL_121;
  }
  if (v74)
  {
    v69 = (void (**)(uint64_t (***)()))(*v74 + 5);
    goto LABEL_120;
  }
LABEL_121:
  if (!sub_1C4C9179C(v65, v67) || sub_1C4AD7110(v64))
    return 0;
  v70 = *(_QWORD *)(v63 + 8);
  while (1)
  {
    v63 = *(_QWORD *)(v63 + 24);
    if (!v63 || (*(_BYTE *)(v63 + 3) & 1) == 0)
      break;
    v64 = *(_QWORD *)(v63 + 8);
    if (v64 != v70)
      goto LABEL_118;
  }
LABEL_8:
  v17 = *(_QWORD *)(v13 + 264);
  v18 = *(_DWORD *)(v13 + 272) * ((*(_QWORD *)(v13 + 248) - *(_QWORD *)(v13 + 240)) >> 3);
  if ((*(_DWORD *)(v17 + 24 * (v18 + *(unsigned __int16 *)(*a5 + 24)) + 4) & 0xFFFFFFF8) != 0x10
    || (*(_DWORD *)(v17 + 24 * (v18 + *(unsigned __int16 *)(*(_QWORD *)a3 + 24)) + 4) & 0xFFFFFFF8) != 0x20)
  {
    goto LABEL_16;
  }
  v19 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  v20 = (uint64_t *)((v19 & 0x80000000) != 0
                  ? *(_QWORD *)(v12 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v12 + 272) + 8 * v19);
  v21 = *v20;
  if (!*v20)
    goto LABEL_16;
  while ((*(_BYTE *)(v21 + 3) & 1) != 0)
  {
    v21 = *(_QWORD *)(v21 + 24);
    if (!v21)
      goto LABEL_16;
  }
  v34 = *(_QWORD *)(v21 + 8);
LABEL_44:
  if ((~*(_DWORD *)(*(_QWORD *)(v34 + 16) + 16) & 0x800200) == 0)
  {
    v35 = *(llvm::MachineBasicBlock **)(v34 + 24);
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v35);
    if ((llvm::MachineBasicBlock *)((char *)v35 + 48) != (llvm::MachineBasicBlock *)FirstTerminator
      && **(_WORD **)(FirstTerminator + 16) == 303)
    {
      return 0;
    }
  }
  v37 = *(_QWORD *)(v21 + 8);
  while (1)
  {
    v21 = *(_QWORD *)(v21 + 24);
    if (!v21)
      break;
    if ((*(_BYTE *)(v21 + 3) & 1) == 0)
    {
      v34 = *(_QWORD *)(v21 + 8);
      if (v34 != v37)
        goto LABEL_44;
    }
  }
LABEL_16:
  v22 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  v71 = (uint64_t (**)())v75;
  v72 = (uint64_t (**)())v75;
  v73 = 8;
  LODWORD(v74) = 0;
  if ((v22 & 0x80000000) != 0)
    v23 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
  else
    v23 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v22);
  v24 = *v23;
  if (!*v23)
    goto LABEL_56;
  while ((*(_BYTE *)(v24 + 3) & 1) != 0)
  {
    v24 = *(_QWORD *)(v24 + 24);
    if (!v24)
      goto LABEL_56;
  }
  v25 = *(_QWORD *)(v24 + 8);
LABEL_24:
  if (sub_1C4AB06B8(v25))
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v71, *(_QWORD *)(v25 + 24));
    v25 = *(_QWORD *)(v24 + 8);
  }
  while (1)
  {
    v24 = *(_QWORD *)(v24 + 24);
    if (!v24)
      break;
    if ((*(_BYTE *)(v24 + 3) & 1) == 0 && *(_QWORD *)(v24 + 8) != v25)
    {
      v25 = *(_QWORD *)(v24 + 8);
      goto LABEL_24;
    }
  }
  if (HIDWORD(v73) == (_DWORD)v74)
    goto LABEL_56;
  if (*(_QWORD *)(a3 + 24) <= 1uLL)
    v26 = 1;
  else
    v26 = *(_QWORD *)(a3 + 24);
  v27 = a5[3];
  if (v27 <= 1)
    v28 = 1;
  else
    v28 = a5[3];
  v29 = *(unsigned int **)(a2 + 32);
  v30 = ((unint64_t)v29[8] >> 8) & 0xFFF;
  if ((_DWORD)v30)
    v26 = *(_QWORD *)(*(_QWORD *)(v13 + 232) + 8 * v30);
  v31 = ((unint64_t)*v29 >> 8) & 0xFFF;
  if ((_DWORD)v31)
    v28 = *(_QWORD *)(*(_QWORD *)(v13 + 232) + 8 * v31);
  v32 = v29[9];
  v33 = (int **)((v32 & 0x80000000) != 0
               ? *(_QWORD *)(v12 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8
               : *(_QWORD *)(v12 + 272) + 8 * v32);
  v38 = *v33;
  if (!*v33)
    goto LABEL_56;
  while (1)
  {
    v39 = *v38;
    if ((*v38 & 0x1000000) == 0)
      break;
    v38 = (int *)*((_QWORD *)v38 + 3);
    if (!v38)
      goto LABEL_56;
  }
  v42 = (v27 << __clz(__rbit64(v26)) >> __clz(__rbit64(v28)));
LABEL_61:
  v43 = *((_QWORD *)v38 + 1);
  if (!sub_1C4AB06B8(v43)
    || ((v44 = *(_QWORD *)(*(_QWORD *)(v13 + 232) + 8 * ((v39 >> 8) & 0xFFF)),
         v45 = (char *)sub_1C477672C((uint64_t)&v71, *(_QWORD *)(v43 + 24)),
         v72 != v71)
      ? (v46 = &v73)
      : (v46 = (uint64_t *)((char *)&v73 + 4)),
        v45 != (char *)&v72[*(unsigned int *)v46] ? (v47 = (v42 & v44) == 0) : (v47 = 1),
        v47))
  {
    while (1)
    {
      v38 = (int *)*((_QWORD *)v38 + 3);
      if (!v38)
        break;
      v39 = *v38;
      if ((*v38 & 0x1000000) == 0)
        goto LABEL_61;
    }
LABEL_56:
    v40 = 1;
    goto LABEL_57;
  }
  v40 = 0;
LABEL_57:
  if (v72 != v71)
    free(v72);
  return v40;
}

BOOL sub_1C4AB06B8(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v12;
  _BOOL8 result;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0)
    return 0;
  v5 = *((_QWORD *)v1 + 1);
  if ((v5 & 0x10) != 0)
    return 0;
  v6 = *((_QWORD *)v1 + 2);
  if ((v6 & 1) != 0)
    return 0;
  v7 = a1;
  v8 = sub_1C4C915C4(*v1);
  if ((v8 & 0xFF00000000) != 0)
  {
    v9 = (v8 - 64) > 0x3A || ((1 << (v8 - 64)) & 0x60001F460000001) == 0;
    if (!v9 || ((v8 - 147) <= 0x14 ? (v10 = ((1 << (v8 + 109)) & 0x1E0001) == 0) : (v10 = 1), !v10))
    {
      if ((v2 - 1) > 1 || (v15 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48), (v15 & 8) == 0))
      {
        v14 = *(_WORD *)(v7 + 44);
        if ((v14 & 0xC) != 0 && (v14 & 4) == 0)
        {
          if ((v5 & 0x80000) == 0)
          {
            v16 = v7;
            while ((*(_WORD *)(v16 + 44) & 8) != 0)
            {
              v16 = *(_QWORD *)(v16 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v16 + 16) + 10) & 8) != 0)
                goto LABEL_37;
            }
            goto LABEL_21;
          }
        }
        else if ((v5 & 0x80000) == 0)
        {
          goto LABEL_21;
        }
LABEL_37:
        if ((v2 - 1) > 1)
        {
          if ((v14 & 0xC) == 0)
            goto LABEL_40;
          goto LABEL_39;
        }
        v15 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48);
      }
      if ((v15 & 0x10) == 0)
      {
        v14 = *(_WORD *)(v7 + 44);
        if ((v14 & 0xC) == 0)
        {
LABEL_40:
          if ((v5 & 0x100000) == 0)
            return 1;
          goto LABEL_21;
        }
LABEL_39:
        if ((v14 & 4) == 0)
        {
          if ((v5 & 0x100000) == 0)
          {
            while ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              v7 = *(_QWORD *)(v7 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 10) & 0x10) != 0)
                goto LABEL_21;
            }
            return 1;
          }
          goto LABEL_21;
        }
        goto LABEL_40;
      }
    }
  }
LABEL_21:
  v12 = (v8 & 0xFF00000000) != 0 && (v8 - 79) < 2;
  result = 1;
  if ((~(_DWORD)v6 & 0x800200) != 0)
    return v12 || (~(_DWORD)v6 & 0x800100) == 0;
  return result;
}

BOOL sub_1C4AB0868(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t CommonSubClass;

  CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass(a1, a2, a4);
  return a3 == a5 && CommonSubClass != 0;
}

BOOL sub_1C4AB089C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a3[2];
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 24 * v3;
    v6 = (_QWORD *)(*(_QWORD *)a3 + 8);
    do
    {
      v4 = ((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24))
         + v4
         - ((*(v6 - 1) >> 1) & 3 | *(_DWORD *)((*(v6 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  else
  {
    v4 = 0;
  }
  return v4 < dword_1ED7EDC58;
}

void sub_1C4AB0910(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a2 + 48))
    *(_QWORD *)(a2 + 48) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
}

void sub_1C4AB0958(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a2 + 48))
    *(_QWORD *)(a2 + 48) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
}

uint64_t sub_1C4AB09A0()
{
  return 1;
}

uint64_t sub_1C4AB09A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C4AB09B0()
{
  return 1;
}

uint64_t sub_1C4AB09B8()
{
  return 0;
}

uint64_t sub_1C4AB09C0()
{
  return 1;
}

void sub_1C4AB09C8(llvm::MachineFunction *a1, uint64_t *a2, llvm::MachineFunction **a3, unsigned int a4, unsigned int a5)
{
  unint64_t v8;
  uint64_t *v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  llvm::MachineMemOperand *MachineMemOperand;

  v9 = a2 + 6;
  v8 = a2[6];
  if (v8 >= 8)
  {
    if ((v8 & 7) == 0)
    {
      a2[6] = v8 & 0xFFFFFFFFFFFFFFF8;
      v14 = a2 + 7;
LABEL_10:
      v15 = a5 >> 3;
      v16 = ((unint64_t)(a4 >> 3) << 6) | 1;
      do
      {
        v17 = *v9++;
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)a1, v17, v15, v16);
        llvm::MachineInstr::addMemOperand(a3[1], *a3, MachineMemOperand);
      }
      while (v9 != v14);
      goto LABEL_12;
    }
    v10 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((a2[6] & 7) == 3 && v10 != 0)
    {
      v13 = *v10;
      v9 = (uint64_t *)(v10 + 2);
      v12 = v13;
      if ((_DWORD)v13)
      {
        v14 = &v9[v12];
        goto LABEL_10;
      }
    }
  }
LABEL_12:
  llvm::MachineInstr::copyImplicitOps(a3[1], a1, (const llvm::MachineInstr *)a2);
}

void sub_1C4AB0A8C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, char a9)
{
  unsigned __int16 *v15;
  uint64_t v16;
  llvm::MachineFunction *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::MachineFunction *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  llvm::MachineFunction **v43;
  llvm::MachineInstr *v44;
  llvm::MachineFunction *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  llvm::MachineFunction **v53;
  llvm::MachineFunction *v54;
  llvm::MachineInstr *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  llvm::MachineFunction **v62;
  llvm::MachineInstr *v63;
  llvm::MachineFunction *v64;
  llvm::MachineInstr *v65;
  llvm::MachineFunction *v66;
  llvm::MachineInstr *v67;
  llvm::MachineFunction *v68;
  llvm::MachineInstr *v69;
  llvm::MachineFunction *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  llvm::MachineFunction *v97;
  unint64_t v98;
  __int128 v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;

  v15 = *(unsigned __int16 **)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(llvm::MachineFunction **)(v16 + 32);
  if (*v15 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 48) & 0x10) != 0)
    goto LABEL_113;
  v18 = *((_QWORD *)v15 + 1);
  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    if ((v18 & 0x100000) != 0)
    {
LABEL_113:
      LODWORD(v20) = 1;
      goto LABEL_7;
    }
    v92 = a2;
    do
    {
      v93 = *(unsigned __int16 *)(v92 + 44);
      LODWORD(v20) = (v93 >> 3) & 1;
      if ((v93 & 8) == 0)
        break;
      v92 = *(_QWORD *)(v92 + 8);
    }
    while ((*(_BYTE *)(*(_QWORD *)(v92 + 16) + 10) & 0x10) == 0);
  }
  else
  {
    v20 = (v18 >> 20) & 1;
  }
LABEL_7:
  v21 = *((_QWORD *)v17 + 5);
  v22 = atomic_load((unsigned __int8 *)&qword_1ED7EDCB8);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDCB8))
  {
    byte_1ED7EDC9A = 1;
    __cxa_guard_release(&qword_1ED7EDCB8);
  }
  if (!a4 || !byte_1ED7EDC9A)
    goto LABEL_13;
  v23 = (1 << (a8 >> 4)) & a4;
  if (a6 != 16)
    v23 |= (2 << (a8 >> 4)) & a4;
  if (v23)
  {
LABEL_13:
    v99 = 0uLL;
    if ((_DWORD)v20)
    {
      v24 = v21;
      v25 = 27120;
      if (a6 == 32)
        v25 = 26928;
      v94 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
      v26 = *(_QWORD *)(a1 + 8) + v25;
      v27 = *(llvm::MachineFunction **)(v16 + 32);
      v97 = 0;
      v28 = *((_QWORD *)v27 + 28);
      if (v28)
        *((_QWORD *)v27 + 28) = *(_QWORD *)v28;
      else
        v28 = sub_1C484358C((uint64_t)v27 + 128, 72, 3);
      v100 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v28, v27, v26, &v100, 0);
      if (v100)
        llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
      if (v97)
        llvm::MetadataTracking::untrack((uint64_t)&v97, (unsigned __int8 *)v97);
      v37 = *(_QWORD *)(v16 + 40);
      *(_QWORD *)(v28 + 24) = v37;
      v38 = *(_QWORD *)(v37 + 32);
      v39 = *(unsigned int *)(v28 + 40);
      if ((_DWORD)v39)
      {
        v71 = *(_QWORD *)(v28 + 32);
        v72 = *(_QWORD *)(v38 + 40);
        v73 = 32 * v39;
        do
        {
          if (!*(_BYTE *)v71)
          {
            v74 = *(unsigned int *)(v71 + 4);
            if ((int)v74 >= 0)
              v75 = (uint64_t *)(*(_QWORD *)(v72 + 272) + 8 * v74);
            else
              v75 = (uint64_t *)(*(_QWORD *)(v72 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
            v76 = *v75;
            if (*v75)
            {
              v77 = *(_QWORD *)(v76 + 16);
              *(_QWORD *)(v76 + 16) = v71;
              *(_QWORD *)(v71 + 16) = v77;
              if ((*(_BYTE *)(v71 + 3) & 1) != 0)
              {
                *(_QWORD *)(v71 + 24) = v76;
              }
              else
              {
                *(_QWORD *)(v71 + 24) = 0;
                v75 = (uint64_t *)(v77 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v71 + 16) = v71;
              *(_QWORD *)(v71 + 24) = 0;
            }
            *v75 = v71;
          }
          v71 += 32;
          v73 -= 32;
        }
        while (v73);
      }
      v40 = *(_QWORD *)(v38 + 728);
      if (v40)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v40 + 24))(v40, v28);
      v41 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v28 = v41 | *(_QWORD *)v28 & 7;
      *(_QWORD *)(v28 + 8) = a2;
      *(_QWORD *)(v41 + 8) = v28;
      *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v28;
      v97 = v27;
      v98 = v28;
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = a7;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v27, (const llvm::MachineOperand *)&v100);
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v27, (const llvm::MachineOperand *)&v100);
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = v94 & 0x20000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v27, (const llvm::MachineOperand *)&v100);
      if (a5 - 1 > 0x3FFFFFFE)
        v42 = 0;
      else
        v42 = (((*(_QWORD *)(*(_QWORD *)(v24 + 352) + 8 * (a5 >> 6)) >> a5) & 1) == 0) << 9;
      v43 = sub_1C47BF4F4(&v97, a5, v42, 0);
      v44 = v43[1];
      v45 = *v43;
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = 0;
      llvm::MachineInstr::addOperand(v44, v45, (const llvm::MachineOperand *)&v100);
      v99 = *(_OWORD *)v43;
      v46 = 4;
      if (a3 - 1 <= 0x3FFFFFFE)
      {
        if (((*(_QWORD *)(*(_QWORD *)(v24 + 352) + 8 * (a3 >> 6)) >> a3) & 1) != 0)
          v46 = 4;
        else
          v46 = 516;
      }
      sub_1C47BF4F4((llvm::MachineFunction **)&v99, a3, v46, 0);
LABEL_69:
      sub_1C4AB09C8(v17, (uint64_t *)a2, (llvm::MachineFunction **)&v99, a6, a8);
      return;
    }
    if (!a9)
    {
      v33 = 322752;
      if (a6 == 32)
        v33 = 322704;
      v34 = *(_QWORD *)(a1 + 8) + v33;
      v35 = *(llvm::MachineFunction **)(v16 + 32);
      v97 = 0;
      v36 = *((_QWORD *)v35 + 28);
      if (v36)
        *((_QWORD *)v35 + 28) = *(_QWORD *)v36;
      else
        v36 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
      v100 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v35, v34, &v100, 0);
      if (v100)
        llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
      if (v97)
        llvm::MetadataTracking::untrack((uint64_t)&v97, (unsigned __int8 *)v97);
      v56 = *(_QWORD *)(v16 + 40);
      *(_QWORD *)(v36 + 24) = v56;
      v57 = *(_QWORD *)(v56 + 32);
      v58 = *(unsigned int *)(v36 + 40);
      if ((_DWORD)v58)
      {
        v85 = *(_QWORD *)(v36 + 32);
        v86 = *(_QWORD *)(v57 + 40);
        v87 = 32 * v58;
        do
        {
          if (!*(_BYTE *)v85)
          {
            v88 = *(unsigned int *)(v85 + 4);
            if ((int)v88 >= 0)
              v89 = (uint64_t *)(*(_QWORD *)(v86 + 272) + 8 * v88);
            else
              v89 = (uint64_t *)(*(_QWORD *)(v86 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8);
            v90 = *v89;
            if (*v89)
            {
              v91 = *(_QWORD *)(v90 + 16);
              *(_QWORD *)(v90 + 16) = v85;
              *(_QWORD *)(v85 + 16) = v91;
              if ((*(_BYTE *)(v85 + 3) & 1) != 0)
              {
                *(_QWORD *)(v85 + 24) = v90;
              }
              else
              {
                *(_QWORD *)(v85 + 24) = 0;
                v89 = (uint64_t *)(v91 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v85 + 16) = v85;
              *(_QWORD *)(v85 + 24) = 0;
            }
            *v89 = v85;
          }
          v85 += 32;
          v87 -= 32;
        }
        while (v87);
      }
      v59 = *(_QWORD *)(v57 + 728);
      if (v59)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 24))(v59, v36);
      v60 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v36 = v60 | *(_QWORD *)v36 & 7;
      *(_QWORD *)(v36 + 8) = a2;
      *(_QWORD *)(v60 + 8) = v36;
      *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v36;
      v97 = v35;
      v98 = v36;
      v61 = 2;
      if (a5 - 1 <= 0x3FFFFFFE)
      {
        if (((*(_QWORD *)(*(_QWORD *)(v21 + 352) + 8 * (a5 >> 6)) >> a5) & 1) != 0)
          v61 = 2;
        else
          v61 = 514;
      }
      v62 = sub_1C47BF4F4(&v97, a5, v61, 0);
      v63 = v62[1];
      v64 = *v62;
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = 0;
      llvm::MachineInstr::addOperand(v63, v64, (const llvm::MachineOperand *)&v100);
      v66 = *v62;
      v65 = v62[1];
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = a7;
      llvm::MachineInstr::addOperand(v65, v66, (const llvm::MachineOperand *)&v100);
      v68 = *v62;
      v67 = v62[1];
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = 0;
      llvm::MachineInstr::addOperand(v67, v68, (const llvm::MachineOperand *)&v100);
      v70 = *v62;
      v69 = v62[1];
      LODWORD(v100) = 1;
      v101 = 0;
      v102 = 0;
      llvm::MachineInstr::addOperand(v69, v70, (const llvm::MachineOperand *)&v100);
      v99 = *(_OWORD *)v62;
      goto LABEL_69;
    }
    v29 = 24864;
    if (a6 == 32)
      v29 = 24816;
    v30 = *(_QWORD *)(a1 + 8) + v29;
    v31 = *(llvm::MachineFunction **)(v16 + 32);
    v97 = 0;
    v32 = *((_QWORD *)v31 + 28);
    if (v32)
      *((_QWORD *)v31 + 28) = *(_QWORD *)v32;
    else
      v32 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
    v100 = 0;
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v31, v30, &v100, 0);
    if (v100)
      llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
    if (v97)
      llvm::MetadataTracking::untrack((uint64_t)&v97, (unsigned __int8 *)v97);
    v47 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v32 + 24) = v47;
    v48 = *(_QWORD *)(v47 + 32);
    v49 = *(unsigned int *)(v32 + 40);
    if ((_DWORD)v49)
    {
      v78 = *(_QWORD *)(v32 + 32);
      v79 = *(_QWORD *)(v48 + 40);
      v80 = 32 * v49;
      do
      {
        if (!*(_BYTE *)v78)
        {
          v81 = *(unsigned int *)(v78 + 4);
          if ((int)v81 >= 0)
            v82 = (uint64_t *)(*(_QWORD *)(v79 + 272) + 8 * v81);
          else
            v82 = (uint64_t *)(*(_QWORD *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
          v83 = *v82;
          if (*v82)
          {
            v84 = *(_QWORD *)(v83 + 16);
            *(_QWORD *)(v83 + 16) = v78;
            *(_QWORD *)(v78 + 16) = v84;
            if ((*(_BYTE *)(v78 + 3) & 1) != 0)
            {
              *(_QWORD *)(v78 + 24) = v83;
            }
            else
            {
              *(_QWORD *)(v78 + 24) = 0;
              v82 = (uint64_t *)(v84 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v78 + 16) = v78;
            *(_QWORD *)(v78 + 24) = 0;
          }
          *v82 = v78;
        }
        v78 += 32;
        v80 -= 32;
      }
      while (v80);
    }
    v50 = *(_QWORD *)(v48 + 728);
    if (v50)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 24))(v50, v32);
    v51 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v32 = v51 | *(_QWORD *)v32 & 7;
    *(_QWORD *)(v32 + 8) = a2;
    *(_QWORD *)(v51 + 8) = v32;
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v32;
    v97 = v31;
    v98 = v32;
    v52 = 2;
    if (a5 - 1 <= 0x3FFFFFFE)
    {
      if (((*(_QWORD *)(*(_QWORD *)(v21 + 352) + 8 * (a5 >> 6)) >> a5) & 1) != 0)
        v52 = 2;
      else
        v52 = 514;
    }
    v53 = sub_1C47BF4F4(&v97, a5, v52, 0);
    v54 = *v53;
    v55 = v53[1];
    LODWORD(v100) = 1;
    v101 = 0;
    v102 = 0;
    llvm::MachineInstr::addOperand(v55, v54, (const llvm::MachineOperand *)&v100);
  }
}

_DWORD *sub_1C4AB1258(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_DWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -1;
        v6 += 4;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C4AB12F0(v1, v5);
  }
  return result;
}

_DWORD *sub_1C4AB12F0(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *result = -1;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1C4AB1380(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4AB1424(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4AB1588(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFD)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4AB1588(a1, v14, v8);
}

uint64_t sub_1C4AB1588(uint64_t result, int *a2, int *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  int v10;
  int *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(result + 8);
    v9 = 32;
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_8;
    v8 = *(void **)(result + 8);
    v9 = 4 * v7;
  }
  result = (uint64_t)memset(v8, 255, v9);
LABEL_8:
  while (a2 != a3)
  {
    v10 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_1C4AB1380((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4AB1634()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Consider any live-interval with a size bigger than this number as being too expensive to break down i"
                   "n region splitting. This is to avoid high compile time. The size of a live-range is the cumulative di"
                   "stance covered by a live-interval in terms of SlotIndex.";
  *((_QWORD *)&v3 + 1) = 258;
  v1 = 320000;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7EDBD8, "agx3-huge-life-span", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7EDBD8, &dword_1C475E000);
}

uint64_t sub_1C4AB16BC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  llvm::initializeSlotIndexesPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Rematerialize";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "agx3-rematerialize";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EDD98;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AB1824;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4AB1764(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EDD98) = &off_1E7FB1C68;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EDDA0);
  if (v3 != -1)
  {
    v7[0] = sub_1C4AB16BC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EDDA0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4AB1824()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4AB1764(v0);
}

void sub_1C4AB184C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AB18E0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AB196C()
{
  return "AGX3 rematerialize pass";
}

void *sub_1C4AB197C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4AB1A38(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  int64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t i;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  int v40;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  char v49;
  __int16 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  char *k;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::MachineInstr *v117;
  llvm::MachineInstr *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t IncompleteVirtualRegister;
  uint64_t v133;
  llvm::MachineInstr *v134;
  llvm::MachineInstr *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  llvm::LiveInterval *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  int v167;
  _QWORD *v168;
  unint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  BOOL v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  llvm::LiveInterval *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void **v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  llvm::LiveInterval *v226;
  uint64_t v227;
  __int16 v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int v232;
  int v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  int v240;
  int v241;
  unint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  BOOL v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  BOOL v258;
  unint64_t v259;
  _QWORD *v260;
  _DWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  void *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  BOOL v279;
  char v280;
  _QWORD *v281;
  unint64_t v282;
  void *v283;
  unint64_t v284;
  uint64_t v285;
  int v286;
  _QWORD *v287;
  int v288;
  unsigned int v289;
  _QWORD *v290;
  void *v291;
  _QWORD *v292;
  int v293;
  BOOL v294;
  unsigned int v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  char *v299;
  void **v300;
  unint64_t *v301;
  uint64_t *v302;
  char *v303;
  unint64_t v304;
  void **v305;
  void **v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v312;
  BOOL v313;
  int v314;
  int64_t v315;
  char *v316;
  char *v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  void **v323;
  int v324;
  char *v325;
  unint64_t *v326;
  int v327;
  _QWORD *v328;
  int v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  int v333;
  int v334;
  _QWORD *v335;
  unsigned int v336;
  uint64_t *v337;
  uint64_t *v338;
  uint64_t v339;
  int32x2_t *v340;
  int32x2_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  int v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  unsigned __int16 *v351;
  unsigned __int16 **v352;
  unsigned __int16 **v353;
  int v354;
  unsigned __int16 *v355;
  unsigned __int16 *v356;
  unsigned __int16 *v357;
  int v358;
  BOOL v360;
  int v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  uint64_t v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  unsigned int **v382;
  uint64_t v383;
  unsigned int *v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  llvm::LiveInterval *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  int32x2_t *v406;
  int32x2_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  int v412;
  int v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  unsigned __int16 *v419;
  int v420;
  uint64_t v421;
  unsigned __int16 *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  unsigned __int16 *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  void **v455;
  _QWORD *v457;
  unsigned int v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  unint64_t v462;
  unsigned int v463;
  unint64_t v464;
  uint64_t v465;
  char *v466;
  int v467;
  char v468;
  unsigned int v469;
  unint64_t v470;
  unsigned int v471;
  int v472;
  char *v473;
  char *v474;
  _QWORD *v475;
  unint64_t v476;
  unsigned int v477;
  unint64_t v478;
  unint64_t j;
  int64_t v480;
  int v481;
  unsigned __int16 *v482;
  int v483;
  unsigned int v484;
  void **v485;
  char v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  int v492;
  unint64_t v493;
  unsigned int v494;
  unint64_t v495;
  unsigned int v496;
  uint64_t v497;
  unsigned int v498;
  void *v499;
  uint64_t v500;
  _BYTE v501[64];
  void *v502;
  uint64_t v503;
  unint64_t v504;
  int v505;
  void *v506;
  void *v507;
  _QWORD v508[10];
  void *v509;
  _DWORD v510[32];
  uint64_t v511;
  void *v512;
  void *v513;
  _BYTE v514[80];
  void *v515;
  unsigned int v516;
  uint64_t v517;
  void *v518;
  uint64_t v519;
  _BYTE v520[128];
  uint64_t v521;
  _QWORD *v522;
  unsigned int v523;
  void *v524;
  uint64_t v525;
  _QWORD v526[130];

  v526[128] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  *(_QWORD *)(a1 + 248) = v4;
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 176))(*(_QWORD *)(a1 + 248));
  *(_QWORD *)(a1 + 272) = a2[5];
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LiveIntervals::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineDominatorTree::ID);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 296) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 160);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 272) + 32);
  v469 = dword_1ED7EDD58;
  v498 = 32;
  v471 = v11;
  v497 = v11;
  llvm::APInt::sqrt((llvm::APInt *)&v497, (llvm::APInt *)&v495);
  if (v496 > 0x40)
  {
    v13 = 0;
    v14 = ((unint64_t)v496 + 63) >> 6;
    do
    {
      v313 = v14-- < 1;
      if (v313)
        break;
      v15 = *(_QWORD *)(v495 + 8 * v14);
      v13 += __clz(v15);
    }
    while (!v15);
    v16 = v496 | 0xFFFFFFC0;
    if ((v496 & 0x3F) == 0)
      v16 = 0;
    v12 = v13 + v16;
  }
  else
  {
    v12 = v496 + __clz(v495) - 64;
  }
  v494 = 32;
  v493 = v496 + ~v12;
  llvm::APInt::operator*((uint64_t)&v493, &v495, (uint64_t)&v521);
  v493 = v521;
  v494 = v522;
  v521 = 1;
  for (i = 8; i != 520; i += 16)
    *(uint64_t *)((char *)&v521 + i) = -4096;
  v524 = v526;
  v525 = 0x2000000000;
  v518 = v520;
  v519 = 0x1000000000;
  v457 = a2;
  sub_1C486F76C((uint64_t)&v512, a2[41]);
  v18 = 0;
  LODWORD(v478) = 0;
  v460 = 0;
  v19 = 0;
  memset(v510, 0, sizeof(v510));
  v511 = 0;
  memset(&v508[1], 0, 72);
  v506 = &v508[2];
  v507 = &v508[2];
  v508[0] = 8;
  v510[1] = 8;
  v20 = 1;
  v509 = &v510[2];
  while (1)
  {
    v21 = v516;
    if (v516 != v18)
      goto LABEL_28;
    if (!v18)
      break;
    v22 = (char *)v515 + 16 * v18;
    v23 = v509;
    v24 = (char *)v515;
    while (1)
    {
      v25 = *(_QWORD *)v24 == *v23 && *((_QWORD *)v24 + 1) == v23[1];
      if (!v25)
        break;
      v24 += 16;
      v23 += 2;
      if (v24 == v22)
        goto LABEL_532;
    }
LABEL_28:
    v26 = *((_QWORD *)v515 + 2 * v516 - 2);
    v27 = *(_QWORD *)(a1 + 296);
    v28 = *(_DWORD *)(v27 + 264);
    v467 = v20;
    if (v28)
    {
      v29 = *(_QWORD *)(v27 + 248);
      v30 = v28 - 1;
      v31 = ((v26 >> 4) ^ (v26 >> 9)) & (v28 - 1);
      v32 = *(_QWORD *)(v29 + 16 * v31);
      if (v26 != v32)
      {
        v33 = 1;
        while (v32 != -4096)
        {
          v34 = v31 + v33++;
          v31 = v34 & v30;
          v32 = *(_QWORD *)(v29 + 16 * v31);
          if (v26 == v32)
            goto LABEL_33;
        }
LABEL_37:
        v28 = 0;
        goto LABEL_38;
      }
LABEL_33:
      v35 = *(_QWORD **)(v29 + 16 * v31 + 8);
      if (!v35)
        goto LABEL_37;
      v28 = 0;
      do
      {
        v35 = (_QWORD *)*v35;
        ++v28;
      }
      while (v35);
    }
LABEL_38:
    v458 = v28;
    v37 = *(_QWORD *)(v26 + 48);
    v36 = v26 + 48;
    v38 = v37 & 0xFFFFFFFFFFFFFFF8;
    if ((v37 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v38 & 4) == 0)
    {
      while ((*(_WORD *)(v38 + 44) & 4) != 0)
        v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v38 != v36)
    {
      v459 = v36;
      while (1)
      {
        v465 = v38;
        v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
        if (!v38 || (*(_BYTE *)v38 & 4) == 0)
        {
          while ((*(_WORD *)(v38 + 44) & 4) != 0)
            v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
        }
        v39 = *(unsigned __int16 **)(v465 + 16);
        v40 = *v39;
        if ((v40 - 9) <= 0x3C && ((1 << (v40 - 9)) & 0x1000000000000605) != 0
          || v40 == 0)
        {
          goto LABEL_520;
        }
        v43 = *((_QWORD *)v39 + 1);
        if ((v43 & 0x10) != 0)
          goto LABEL_520;
        v44 = *(_WORD *)(v465 + 44);
        if ((v44 & 0xC) == 0 || (v44 & 4) != 0)
        {
          if ((v43 & 0x400) != 0)
            goto LABEL_520;
        }
        else
        {
          v45 = v465;
          if ((v43 & 0x400) != 0)
            goto LABEL_520;
          while ((*(_WORD *)(v45 + 44) & 8) != 0)
          {
            v45 = *(_QWORD *)(v45 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v45 + 16) + 9) & 4) != 0)
              goto LABEL_520;
          }
        }
        v46 = v465;
        v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, v465);
        v48 = v460;
        if (v458 < v460)
          v49 = 1;
        else
          v49 = v47;
        v468 = v49;
        if (v458 < v460)
          v48 = v458;
        v502 = &v504;
        v503 = 0x1000000000;
        v50 = *(_WORD *)(v465 + 44);
        v51 = v465;
        if ((v50 & 4) != 0)
        {
          do
            v51 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v51 + 44) & 4) != 0);
        }
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 288);
        if ((v50 & 8) != 0)
        {
          do
            v46 = *(_QWORD *)(v46 + 8);
          while ((*(_WORD *)(v46 + 44) & 8) != 0);
        }
        v53 = *(_QWORD *)(v46 + 8);
        v460 = v48;
        if (v51 != v53)
        {
          while (1)
          {
            v54 = **(unsigned __int16 **)(v51 + 16);
            v313 = v54 > 0x17;
            v55 = (1 << v54) & 0x83E000;
            if (v313 || v55 == 0)
              break;
            v51 = *(_QWORD *)(v51 + 8);
            if (v51 == v53)
            {
              v51 = *(_QWORD *)(v46 + 8);
              break;
            }
          }
        }
        v57 = *(_QWORD *)(v52 + 368);
        v58 = *(unsigned int *)(v52 + 384);
        if (!(_DWORD)v58)
          goto LABEL_85;
        LODWORD(v59) = ((v51 >> 4) ^ (v51 >> 9)) & (v58 - 1);
        v60 = (uint64_t *)(v57 + 16 * v59);
        v61 = *v60;
        if (v51 != *v60)
          break;
LABEL_86:
        v476 = v38;
        v478 = (v478 + 1);
        if (!(_DWORD)v525)
          goto LABEL_334;
        k = (char *)v524;
        v473 = (char *)v524 + 32 * v525;
        v65 = v60[1];
        v464 = v65 & 0xFFFFFFFFFFFFFFF8;
        v463 = (v65 >> 1) & 3;
        do
        {
          v67 = *(_QWORD *)k;
          v66 = *((_QWORD *)k + 1);
          v489 = *(_QWORD *)k;
          v490 = v66;
          if ((v66 & 4) != 0)
          {
            v68 = v66 & 0xFFFFFFFFFFFFFFF8;
            if ((v66 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v69 = k;
              v70 = (_QWORD *)operator new();
              v71 = (unint64_t)v70;
              v72 = v70 + 2;
              *v70 = v70 + 2;
              v70[1] = 0x400000000;
              v73 = *(unsigned int *)(v68 + 8);
              if (v70 != (_QWORD *)v68 && v73 != 0)
              {
                if (v73 < 5)
                {
                  v75 = *(unsigned int *)(v68 + 8);
                  goto LABEL_96;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v70, (uint64_t)(v70 + 2), *(unsigned int *)(v68 + 8), 8);
                v75 = *(unsigned int *)(v68 + 8);
                if ((_DWORD)v75)
                {
                  v72 = *(void **)v71;
LABEL_96:
                  memcpy(v72, *(const void **)v68, 8 * v75);
                }
                *(_DWORD *)(v71 + 8) = v73;
              }
              v490 = v71 | 4;
              v67 = v489;
              k = v69;
            }
          }
          v76 = *((_QWORD *)k + 2);
          v492 = *((_DWORD *)k + 6);
          v491 = v76;
          v484 = **(unsigned __int16 **)(v67 + 16);
          if (v471 > v469 && v493 < v478)
          {
            v467 = 0;
            goto LABEL_295;
          }
          if ((v468 & 1) != 0
            || (v478 - v492) >= 0xE
            && ((v478 - v492) > 0x17
             || (v93 = k, v94 = sub_1C4AB4AE4((_QWORD *)a1, &v491, v67, 0), k = v93, v94)))
          {
            v77 = *(_WORD *)(v67 + 44);
            v78 = v67;
            if ((v77 & 4) != 0)
            {
              do
                v78 = *(_QWORD *)v78 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v78 + 44) & 4) != 0);
            }
            v79 = v67;
            if ((v77 & 8) != 0)
            {
              do
                v79 = *(_QWORD *)(v79 + 8);
              while ((*(_WORD *)(v79 + 44) & 8) != 0);
            }
            v80 = *(_QWORD *)(v79 + 8);
            if (v78 == v80)
            {
LABEL_112:
              v84 = k;
            }
            else
            {
              do
              {
                v81 = **(unsigned __int16 **)(v78 + 16);
                v313 = v81 > 0x17;
                v82 = (1 << v81) & 0x83E000;
                if (v313 || v82 == 0)
                  goto LABEL_112;
                v78 = *(_QWORD *)(v78 + 8);
              }
              while (v78 != v80);
              v84 = k;
              v78 = v80;
            }
            v85 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 288);
            v86 = *(_QWORD *)(v85 + 368);
            v87 = *(unsigned int *)(v85 + 384);
            if ((_DWORD)v87)
            {
              LODWORD(v88) = ((v78 >> 4) ^ (v78 >> 9)) & (v87 - 1);
              v89 = (uint64_t *)(v86 + 16 * v88);
              v90 = *v89;
              if (v78 != *v89)
              {
                v91 = 1;
                do
                {
                  if (v90 == -4096)
                    goto LABEL_123;
                  v92 = v88 + v91++;
                  v88 = v92 & (v87 - 1);
                  v90 = *(_QWORD *)(v86 + 16 * v88);
                }
                while (v78 != v90);
                v89 = (uint64_t *)(v86 + 16 * v88);
              }
            }
            else
            {
LABEL_123:
              v89 = (uint64_t *)(v86 + 16 * v87);
            }
            v95 = v89[1];
            v96 = v503;
            if (v503 >= (unint64_t)HIDWORD(v503))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v502, (uint64_t)&v504, v503 + 1, 8);
              v96 = v503;
            }
            *((_QWORD *)v502 + v96) = v67;
            LODWORD(v503) = v503 + 1;
            k = v84;
            if ((*(_DWORD *)((v95 & 0xFFFFFFFFFFFFFFF8) + 24) | (v95 >> 1) & 3) > (*(_DWORD *)(v464 + 24) | v463))
              goto LABEL_295;
            v97 = v490;
            if ((v490 & 4) != 0)
            {
              v99 = *(unint64_t **)(v490 & 0xFFFFFFFFFFFFFFF8);
              v98 = &v99[*(unsigned int *)((v490 & 0xFFFFFFFFFFFFFFF8) + 8)];
            }
            else
            {
              v98 = &v490 + (v490 > 7);
              v99 = &v490;
            }
            v466 = v84;
            v100 = 0xFFFFFFFFLL;
            while (v99 != v98)
            {
              v101 = (_DWORD *)*v99++;
              v102 = (*v101 >> 8) & 0xFFF;
              if (v102 == (_DWORD)v100)
                v103 = v100;
              else
                v103 = 0;
              if ((_DWORD)v100 == -1)
                v100 = v102;
              else
                v100 = v103;
            }
            v461 = *(unsigned int *)(*(_QWORD *)(v67 + 32) + 4);
            v462 = v461 & 0x7FFFFFFF;
            for (j = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * v462) & 0xFFFFFFFFFFFFFFF8;
                  v490 >= 8;
                  v97 = v490)
            {
              v127 = v97 & 0xFFFFFFFFFFFFFFF8;
              if ((v97 & 4) != 0 && v127 || (v97 & 4) != 0)
              {
                if (!*(_DWORD *)(v127 + 8))
                  break;
                v127 = *(_QWORD *)(*(_QWORD *)v127 + 8 * *(unsigned int *)(v127 + 8) - 8);
              }
              v128 = *(uint64_t **)(v127 + 8);
              v499 = v128;
              sub_1C4AB4AE4((_QWORD *)a1, (unint64_t *)&v499, v67, 0);
              LODWORD(v488) = v484;
              if ((_DWORD)v100
                && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 272))(a1, v67, &v488))
              {
                v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
                v130 = 1;
              }
              else
              {
                v130 = 0;
                v129 = j;
              }
              v131 = *(_QWORD *)(a1 + 272);
              IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v131, "", 0);
              *(_QWORD *)(*(_QWORD *)(v131 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v129 & 0xFFFFFFFFFFFFFFFBLL;
              v133 = *(_QWORD *)(v131 + 8);
              if (v133)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 24))(v133, IncompleteVirtualRegister);
              sub_1C4779044(v128[3], (uint64_t)v499, (unsigned __int8 **)(v67 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8) + 48 * v488, IncompleteVirtualRegister);
              v135 = v134;
              if (llvm::MachineInstr::getNumExplicitOperands(v67) >= 2)
              {
                v136 = 32;
                v137 = 1;
                do
                {
                  llvm::MachineInstr::addOperand(v135, *(llvm::MachineFunction **)(*((_QWORD *)v135 + 3) + 32), (const llvm::MachineOperand *)(*(_QWORD *)(v67 + 32) + v136));
                  ++v137;
                  v136 += 32;
                }
                while (v137 < llvm::MachineInstr::getNumExplicitOperands(v67));
              }
              sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 288), (uint64_t)v135, 0);
              if ((v130 & 1) != 0)
                (*(void (**)(uint64_t, _QWORD, uint64_t, llvm::MachineInstr *))(*(_QWORD *)a1 + 288))(a1, v484, v100, v135);
              v138 = v490;
              v139 = &v490;
              if ((v490 & 4) != 0)
                v139 = *(unint64_t **)(v490 & 0xFFFFFFFFFFFFFFF8);
              while (1)
              {
                v143 = (v138 & 4) != 0
                     ? (unint64_t *)(*(_QWORD *)(v138 & 0xFFFFFFFFFFFFFFF8)
                                          + 8 * *(unsigned int *)((v138 & 0xFFFFFFFFFFFFFFF8) + 8))
                     : &v490 + (v138 > 7);
                if (v139 == v143)
                  break;
                v140 = *((_QWORD *)v499 + 3);
                v141 = *(_QWORD *)(*(_QWORD *)(*v139 + 8) + 24);
                v142 = *(_QWORD *)(a1 + 288);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v142);
                if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v142 + 1320), v140, v141))
                {
                  llvm::MachineOperand::setReg(*v139, IncompleteVirtualRegister);
                  if (v130)
                    *(_DWORD *)*v139 &= 0xFFF000FF;
                  v139 = sub_1C49688A0(&v490, (char *)v139);
                }
                else
                {
                  ++v139;
                }
                v138 = v490;
              }
              v144 = *(_QWORD *)(a1 + 280);
              v145 = (llvm::LiveInterval *)sub_1C4851220(v144, IncompleteVirtualRegister);
              v146 = *(_QWORD *)(v144 + 304);
              v147 = *(_QWORD *)(v144 + 248);
              *(_QWORD *)v146 = v147;
              *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 40);
              *(_OWORD *)(v146 + 16) = *(_OWORD *)(v144 + 288);
              *(_QWORD *)(v146 + 32) = v144 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v146);
              *(_DWORD *)(v146 + 184) = 0;
              v148 = *(_QWORD *)(v144 + 256);
              v25 = *(_BYTE *)(v148 + 16) == 0;
              v149 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v148 + 24)
                                                     + 16 * (*((_DWORD *)v145 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v151 = !v25 && v149 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v144 + 304), v145, v151);
              llvm::LiveIntervals::computeDeadValues(v144, (uint64_t)v145, 0);
            }
            v104 = *(_QWORD *)(a1 + 280);
            if (v462 >= *(unsigned int *)(v104 + 416) || (v105 = *(_QWORD *)(*(_QWORD *)(v104 + 408) + 8 * v462)) == 0)
            {
              v105 = sub_1C4851220(*(_QWORD *)(a1 + 280), v461);
              v206 = *(_QWORD *)(v104 + 304);
              v207 = *(_QWORD *)(v104 + 248);
              *(_QWORD *)v206 = v207;
              *(_QWORD *)(v206 + 8) = *(_QWORD *)(v207 + 40);
              *(_OWORD *)(v206 + 16) = *(_OWORD *)(v104 + 288);
              *(_QWORD *)(v206 + 32) = v104 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v206);
              *(_DWORD *)(v206 + 184) = 0;
              v208 = *(_QWORD *)(v104 + 256);
              v25 = *(_BYTE *)(v208 + 16) == 0;
              v209 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v208 + 24)
                                                     + 16 * (*(_DWORD *)(v105 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v211 = !v25 && v209 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v104 + 304), (llvm::LiveInterval *)v105, v211);
              llvm::LiveIntervals::computeDeadValues(v104, v105, 0);
              v104 = *(_QWORD *)(a1 + 280);
            }
            llvm::LiveIntervals::shrinkToUses((_QWORD *)v104, v105, 0);
            LODWORD(v488) = 0;
            v106 = *(_DWORD *)(v105 + 8);
            if (!v106
              || (**(_QWORD **)v105 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)v105 + 24 * v106 - 16) & 0xFFFFFFFFFFFFFFF8))
            {
              v126 = *(_QWORD *)(v105 + 104);
              v125 = (_QWORD *)(v105 + 104);
              v124 = v126;
              for (k = v466; v124; v124 = *(_QWORD *)(v124 + 104))
              {
                v202 = v124;
                if (!*(_DWORD *)(v124 + 8))
                {
                  while (1)
                  {
                    v200 = *(_QWORD *)(v202 + 96);
                    v124 = *(_QWORD *)(v202 + 104);
                    *(_QWORD *)(v202 + 96) = 0;
                    if (v200)
                    {
                      sub_1C47655E8(v200, *(_QWORD **)(v200 + 8));
                      MEMORY[0x1CAA32FC0](v200, 0x1020C4062D53EE8);
                      k = v466;
                    }
                    v201 = *(void **)(v202 + 64);
                    if (v201 != (void *)(v202 + 80))
                    {
                      free(v201);
                      k = v466;
                    }
                    if (*(_QWORD *)v202 == v202 + 16)
                    {
                      if (!v124)
                      {
LABEL_302:
                        *v125 = 0;
                        goto LABEL_291;
                      }
                    }
                    else
                    {
                      free(*(void **)v202);
                      k = v466;
                      if (!v124)
                        goto LABEL_302;
                    }
                    v202 = v124;
                    if (*(_DWORD *)(v124 + 8))
                    {
                      *v125 = v124;
                      break;
                    }
                  }
                }
                v125 = (_QWORD *)(v124 + 104);
              }
LABEL_291:
              v203 = v519;
              if (v519 >= (unint64_t)HIDWORD(v519))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)v520, v519 + 1, 8);
                k = v466;
                v203 = v519;
              }
              *((_QWORD *)v518 + v203) = v67;
              LODWORD(v519) = v519 + 1;
              goto LABEL_294;
            }
            v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
            k = v466;
            if (v107 != j)
              goto LABEL_294;
            if (!*(_BYTE *)(*(_QWORD *)(a1 + 272) + 16))
              goto LABEL_294;
            v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 272))(a1, v67, &v488);
            k = v466;
            if (!v108)
              goto LABEL_294;
            v110 = (uint64_t *)(v105 + 104);
            v109 = *(_QWORD *)(v105 + 104);
            if (!v109)
              goto LABEL_294;
            v111 = 0;
            do
            {
              v112 = *(_DWORD *)(v109 + 8);
              if (v112)
              {
                if ((**(_QWORD **)v109 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)v109 + 24 * v112 - 16) & 0xFFFFFFFFFFFFFFF8))
                  v111 = v111 | *(_DWORD *)(v109 + 112);
                k = v466;
              }
              v109 = *(_QWORD *)(v109 + 104);
            }
            while (v109);
            if ((v111 - 1) >= 2)
              goto LABEL_294;
            v113 = *(_QWORD *)(a1 + 272);
            v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
            v115 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v113, "", 0);
            *(_QWORD *)(*(_QWORD *)(v113 + 24) + 16 * (v115 & 0x7FFFFFFF)) = v114 & 0xFFFFFFFFFFFFFFFBLL;
            v116 = *(_QWORD *)(v113 + 8);
            if (v116)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 24))(v116, v115);
            sub_1C4779044(*(_QWORD *)(v67 + 24), v67, (unsigned __int8 **)(v67 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8) + 48 * v488, v115);
            v118 = v117;
            if (llvm::MachineInstr::getNumExplicitOperands(v67) >= 2)
            {
              v119 = 32;
              v120 = 1;
              do
              {
                llvm::MachineInstr::addOperand(v118, *(llvm::MachineFunction **)(*((_QWORD *)v118 + 3) + 32), (const llvm::MachineOperand *)(*(_QWORD *)(v67 + 32) + v119));
                ++v120;
                v119 += 32;
              }
              while (v120 < llvm::MachineInstr::getNumExplicitOperands(v67));
            }
            v121 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v111);
            (*(void (**)(uint64_t, _QWORD, uint64_t, llvm::MachineInstr *))(*(_QWORD *)a1 + 288))(a1, v484, v121, v118);
            sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 288), (uint64_t)v118, 0);
            v499 = v501;
            v500 = 0x800000000;
            v122 = *(_QWORD *)(a1 + 272);
            if ((v461 & 0x80000000) != 0)
              v123 = (uint64_t *)(*(_QWORD *)(v122 + 24) + 16 * v462 + 8);
            else
              v123 = (uint64_t *)(*(_QWORD *)(v122 + 272) + 8 * v461);
            v152 = *v123;
            if (!*v123)
              goto LABEL_264;
            while ((*(_BYTE *)(v152 + 3) & 1) != 0)
            {
              v152 = *(_QWORD *)(v152 + 24);
              if (!v152)
                goto LABEL_264;
            }
            v153 = 0;
            v154 = 8;
LABEL_207:
            if (v153 >= v154)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v499, (uint64_t)v501, v153 + 1, 8);
              v153 = v500;
            }
            *((_QWORD *)v499 + v153) = v152;
            v153 = v500 + 1;
            LODWORD(v500) = v500 + 1;
            while (1)
            {
              v152 = *(_QWORD *)(v152 + 24);
              if (!v152)
                break;
              if ((*(_BYTE *)(v152 + 3) & 1) == 0)
              {
                v154 = HIDWORD(v500);
                goto LABEL_207;
              }
            }
            if (!v153)
              goto LABEL_264;
            v155 = (uint64_t *)v499;
            v156 = (uint64_t *)((char *)v499 + 8 * v153);
            while (2)
            {
              v157 = *(_QWORD *)(*v155 + 8);
              v158 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 288);
              v159 = *(_QWORD *)(v157 + 24);
              v160 = v157;
LABEL_216:
              if (v160 == *(_QWORD *)(v159 + 56))
              {
                v168 = (_QWORD *)(*(_QWORD *)(v158 + 392) + 16 * *(unsigned int *)(v159 + 24));
LABEL_230:
                v169 = *v168 & 0xFFFFFFFFFFFFFFF8;
                v170 = *(_DWORD *)(v105 + 8);
                v171 = *(_QWORD *)v105;
                if (!v170)
                {
                  v170 = 0;
LABEL_240:
                  v175 = v171 + 24 * v170;
                  goto LABEL_241;
                }
                v172 = *(_QWORD *)(v171 + 24 * v170 - 16);
                v173 = *(_DWORD *)(v169 + 24);
                v174 = (v172 >> 1) & 3 | *(_DWORD *)((v172 & 0xFFFFFFFFFFFFFFF8) + 24);
                v175 = *(_QWORD *)v105;
                v176 = *(unsigned int *)(v105 + 8);
                if (v173 >= v174)
                  goto LABEL_240;
                do
                {
                  v177 = v176 >> 1;
                  v178 = *(_QWORD *)(v175 + 24 * (v176 >> 1) + 8);
                  LODWORD(v178) = (v178 >> 1) & 3 | *(_DWORD *)((v178 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v176 -= (v176 >> 1) + 1;
                  v179 = v173 >= v178;
                  if (v173 >= v178)
                    v180 = v177 + 1;
                  else
                    v180 = 0;
                  v175 += 24 * v180;
                  if (!v179)
                    v176 = v177;
                }
                while (v176);
LABEL_241:
                v181 = v171 + 24 * v170;
                if (v175 == v181)
                  goto LABEL_252;
                v182 = *(_DWORD *)((*(_QWORD *)v175 & 0xFFFFFFFFFFFFFFF8) + 24);
                v183 = *(_DWORD *)(v169 + 24);
                if (((*(_QWORD *)v175 >> 1) & 3 | v182) <= v183
                  && v169 == (*(_QWORD *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  v175 += 24;
                  if (v175 != v181)
                  {
                    v182 = *(_DWORD *)((*(_QWORD *)v175 & 0xFFFFFFFFFFFFFFF8) + 24);
                    goto LABEL_246;
                  }
LABEL_252:
                  v184 = 0;
LABEL_253:
                  if (**(unsigned __int16 **)(v157 + 16) - 13 <= 4)
                  {
                    v186 = 0;
                    goto LABEL_260;
                  }
                }
                else
                {
LABEL_246:
                  if (v183 < v182)
                    goto LABEL_252;
                  v184 = *(_QWORD *)(v175 + 16);
                  if ((~*(_DWORD *)(v175 + 8) & 6) == 0 || v184 == 0)
                    goto LABEL_253;
                }
                v187 = *(_QWORD *)(v184 + 8);
                if (v187 < 8)
                  v188 = 0;
                else
                  v188 = *(_QWORD *)((v187 & 0xFFFFFFFFFFFFFFF8) + 16);
                if (v188 == v67)
                {
                  v186 = v115;
LABEL_260:
                  llvm::MachineOperand::setReg(*v155, v186);
                  *(_DWORD *)*v155 &= 0xFFF000FF;
                }
                if (++v155 == v156)
                {
LABEL_264:
                  v189 = *(_QWORD *)(a1 + 280);
                  v190 = (llvm::LiveInterval *)sub_1C4851220(v189, v115);
                  v191 = *(_QWORD *)(v189 + 304);
                  v192 = *(_QWORD *)(v189 + 248);
                  *(_QWORD *)v191 = v192;
                  *(_QWORD *)(v191 + 8) = *(_QWORD *)(v192 + 40);
                  *(_OWORD *)(v191 + 16) = *(_OWORD *)(v189 + 288);
                  *(_QWORD *)(v191 + 32) = v189 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v191);
                  *(_DWORD *)(v191 + 184) = 0;
                  v193 = *(_QWORD *)(v189 + 256);
                  v25 = *(_BYTE *)(v193 + 16) == 0;
                  v194 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v193 + 24)
                                                         + 16 * (*((_DWORD *)v190 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v196 = !v25 && v194 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v189 + 304), v190, v196);
                  llvm::LiveIntervals::computeDeadValues(v189, (uint64_t)v190, 0);
                  llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 280), v105, 0);
                  v197 = *(_DWORD *)(v105 + 8);
                  if (!v197
                    || (**(_QWORD **)v105 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)v105 + 24 * v197 - 16) & 0xFFFFFFFFFFFFFFF8))
                  {
                    v198 = v519;
                    if (v519 >= (unint64_t)HIDWORD(v519))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)v520, v519 + 1, 8);
                      v198 = v519;
                    }
                    *((_QWORD *)v518 + v198) = v67;
                    LODWORD(v519) = v519 + 1;
                  }
                  v199 = *v110;
                  if (*v110)
                  {
                    while (1)
                    {
                      v214 = v199;
                      if (!*(_DWORD *)(v199 + 8))
                        break;
LABEL_323:
                      v110 = (uint64_t *)(v199 + 104);
                      v199 = *(_QWORD *)(v199 + 104);
                      if (!v199)
                        goto LABEL_324;
                    }
                    while (1)
                    {
                      v212 = *(_QWORD *)(v214 + 96);
                      v199 = *(_QWORD *)(v214 + 104);
                      *(_QWORD *)(v214 + 96) = 0;
                      if (v212)
                      {
                        sub_1C47655E8(v212, *(_QWORD **)(v212 + 8));
                        MEMORY[0x1CAA32FC0](v212, 0x1020C4062D53EE8);
                      }
                      v213 = *(void **)(v214 + 64);
                      if (v213 != (void *)(v214 + 80))
                        free(v213);
                      if (*(_QWORD *)v214 == v214 + 16)
                      {
                        if (!v199)
                        {
LABEL_327:
                          *v110 = 0;
                          break;
                        }
                      }
                      else
                      {
                        free(*(void **)v214);
                        if (!v199)
                          goto LABEL_327;
                      }
                      v214 = v199;
                      if (*(_DWORD *)(v199 + 8))
                      {
                        *v110 = v199;
                        goto LABEL_323;
                      }
                    }
                  }
LABEL_324:
                  if (v499 != v501)
                    free(v499);
                  k = v466;
LABEL_294:
                  v19 = 1;
                  goto LABEL_295;
                }
                continue;
              }
              break;
            }
            v160 = *(_QWORD *)v160 & 0xFFFFFFFFFFFFFFF8;
            if (!v160 || (*(_BYTE *)v160 & 4) == 0)
            {
              while ((*(_WORD *)(v160 + 44) & 4) != 0)
                v160 = *(_QWORD *)v160 & 0xFFFFFFFFFFFFFFF8;
            }
            v161 = *(_QWORD *)(v158 + 368);
            v162 = *(unsigned int *)(v158 + 384);
            if ((_DWORD)v162)
            {
              LODWORD(v163) = ((v160 >> 4) ^ (v160 >> 9)) & (v162 - 1);
              v164 = (uint64_t *)(v161 + 16 * v163);
              v165 = *v164;
              if (v160 != *v164)
              {
                v166 = 1;
                while (v165 != -4096)
                {
                  v167 = v163 + v166++;
                  v163 = v167 & (v162 - 1);
                  v165 = *(_QWORD *)(v161 + 16 * v163);
                  if (v160 == v165)
                  {
                    v164 = (uint64_t *)(v161 + 16 * v163);
                    goto LABEL_228;
                  }
                }
                goto LABEL_227;
              }
            }
            else
            {
LABEL_227:
              v164 = (uint64_t *)(v161 + 16 * v162);
            }
LABEL_228:
            if (v164 != (uint64_t *)(v161 + 16 * v162))
            {
              v168 = v164 + 1;
              goto LABEL_230;
            }
            goto LABEL_216;
          }
LABEL_295:
          v38 = v476;
          if ((v490 & 4) != 0)
          {
            v204 = (void **)(v490 & 0xFFFFFFFFFFFFFFF8);
            if ((v490 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v205 = k;
              if (*v204 != v204 + 2)
                free(*v204);
              MEMORY[0x1CAA32FC0](v204, 0x1080C40ED926357);
              k = v205;
            }
          }
          k += 32;
        }
        while (k != v473);
        v215 = (uint64_t *)v502;
        if ((_DWORD)v503)
        {
          v216 = 8 * v503;
          do
          {
            v217 = *v215++;
            sub_1C4968920((uint64_t)&v521, v217);
            v216 -= 8;
          }
          while (v216);
          v215 = (uint64_t *)v502;
        }
        if (v215 != (uint64_t *)&v504)
          free(v215);
LABEL_334:
        v36 = v459;
        if ((v468 & 1) != 0)
          goto LABEL_520;
        if ((v467 & 1) == 0)
        {
          v467 = 0;
          goto LABEL_520;
        }
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, **(unsigned __int16 **)(v465 + 16)) & 1) != 0|| (*(_BYTE *)(*(_QWORD *)(v465 + 16) + 9) & 0x20) != 0)
        {
          if ((v521 & 1) != 0)
          {
            v327 = 32;
            v328 = &v522;
            goto LABEL_504;
          }
          v328 = v522;
          v327 = v523;
          if (!v523)
          {
            v330 = 0;
            goto LABEL_511;
          }
LABEL_504:
          v329 = v327 - 1;
          LODWORD(v330) = (v327 - 1) & ((v465 >> 4) ^ (v465 >> 9));
          v331 = &v328[2 * v330];
          v332 = *v331;
          if (*v331 != v465)
          {
            v333 = 1;
            while (v332 != -4096)
            {
              v334 = v330 + v333++;
              v330 = v334 & v329;
              v332 = v328[2 * v330];
              if (v332 == v465)
                goto LABEL_511;
            }
            if ((v521 & 1) != 0)
            {
              v328 = &v522;
              v330 = 32;
            }
            else
            {
              v328 = v522;
              v330 = v523;
            }
LABEL_511:
            v331 = &v328[2 * v330];
          }
          if ((v521 & 1) != 0)
            v335 = &v522;
          else
            v335 = v522;
          v336 = v523;
          if ((v521 & 1) != 0)
            v336 = 32;
          if (&v335[2 * v336] != v331)
            sub_1C4968920((uint64_t)&v521, v465);
          goto LABEL_519;
        }
        if (*(_DWORD *)(v465 + 40))
        {
          v218 = v19;
          v219 = 0;
          v220 = v465;
          v36 = v459;
          while (1)
          {
            v221 = v220;
            v222 = *(_QWORD *)(v220 + 32) + 32 * v219;
            if ((*(_DWORD *)v222 & 0x130000FF) == 0)
            {
              v223 = *(_DWORD *)(v222 + 4);
              if ((v223 - 1) >= 0x3FFFFFFF)
              {
                if (((*(_DWORD *)v222 >> 8) & 0xFFF) == 0
                  || (v224 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1), v36 = v459, v224))
                {
                  v225 = *(_QWORD *)(a1 + 280);
                  if ((v223 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v225 + 416)
                    || (v226 = *(llvm::LiveInterval **)(*(_QWORD *)(v225 + 408) + 8 * (v223 & 0x7FFFFFFF))) == 0)
                  {
                    v226 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 280), v223);
                    v307 = *(_QWORD *)(v225 + 304);
                    v308 = *(_QWORD *)(v225 + 248);
                    *(_QWORD *)v307 = v308;
                    *(_QWORD *)(v307 + 8) = *(_QWORD *)(v308 + 40);
                    *(_OWORD *)(v307 + 16) = *(_OWORD *)(v225 + 288);
                    *(_QWORD *)(v307 + 32) = v225 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v307);
                    *(_DWORD *)(v307 + 184) = 0;
                    v309 = *(_QWORD *)(v225 + 256);
                    v25 = *(_BYTE *)(v309 + 16) == 0;
                    v310 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v309 + 24)
                                                           + 16 * (*((_DWORD *)v226 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                              + 34);
                    v312 = !v25 && v310 != 0;
                    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v225 + 304), v226, v312);
                    llvm::LiveIntervals::computeDeadValues(v225, (uint64_t)v226, 0);
                    v225 = *(_QWORD *)(a1 + 280);
                  }
                  v227 = *(_QWORD *)(v225 + 288);
                  v228 = *(_WORD *)(v221 + 44);
                  v229 = v221;
                  v38 = v476;
                  if ((v228 & 4) != 0)
                  {
                    do
                      v229 = *(_QWORD *)v229 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v229 + 44) & 4) != 0);
                  }
                  v230 = v221;
                  if ((v228 & 8) != 0)
                  {
                    do
                      v230 = *(_QWORD *)(v230 + 8);
                    while ((*(_WORD *)(v230 + 44) & 8) != 0);
                  }
                  v231 = *(_QWORD *)(v230 + 8);
                  if (v229 != v231)
                  {
                    while (1)
                    {
                      v232 = **(unsigned __int16 **)(v229 + 16);
                      v313 = v232 > 0x17;
                      v233 = (1 << v232) & 0x83E000;
                      if (v313 || v233 == 0)
                        break;
                      v229 = *(_QWORD *)(v229 + 8);
                      if (v229 == v231)
                      {
                        v229 = v231;
                        break;
                      }
                    }
                  }
                  v235 = *(_QWORD *)(v227 + 368);
                  v236 = *(unsigned int *)(v227 + 384);
                  if ((_DWORD)v236)
                  {
                    LODWORD(v237) = ((v229 >> 4) ^ (v229 >> 9)) & (v236 - 1);
                    v238 = (uint64_t *)(v235 + 16 * v237);
                    v239 = *v238;
                    if (v229 != *v238)
                    {
                      v240 = 1;
                      while (v239 != -4096)
                      {
                        v241 = v237 + v240++;
                        v237 = v241 & (v236 - 1);
                        v239 = *(_QWORD *)(v235 + 16 * v237);
                        if (v229 == v239)
                        {
                          v238 = (uint64_t *)(v235 + 16 * v237);
                          goto LABEL_363;
                        }
                      }
                      goto LABEL_362;
                    }
                  }
                  else
                  {
LABEL_362:
                    v238 = (uint64_t *)(v235 + 16 * v236);
                  }
LABEL_363:
                  v242 = v238[1] & 0xFFFFFFFFFFFFFFF8;
                  v243 = *((_DWORD *)v226 + 2);
                  v244 = *(_QWORD *)v226;
                  if (v243)
                  {
                    v245 = *(_QWORD *)(v244 + 24 * v243 - 16);
                    v246 = *(_DWORD *)(v242 + 24);
                    v247 = (v245 >> 1) & 3 | *(_DWORD *)((v245 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v248 = *(_QWORD *)v226;
                    v249 = *((unsigned int *)v226 + 2);
                    if (v246 < v247)
                    {
                      do
                      {
                        v250 = v249 >> 1;
                        v251 = *(_QWORD *)(v248 + 24 * (v249 >> 1) + 8);
                        LODWORD(v251) = (v251 >> 1) & 3 | *(_DWORD *)((v251 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v249 -= (v249 >> 1) + 1;
                        v252 = v246 >= v251;
                        if (v246 >= v251)
                          v253 = v250 + 1;
                        else
                          v253 = 0;
                        v248 += 24 * v253;
                        if (!v252)
                          v249 = v250;
                      }
                      while (v249);
LABEL_374:
                      v36 = v459;
                      v254 = v244 + 24 * v243;
                      v255 = *(_QWORD *)(v248 + 16);
                      v256 = *(_QWORD *)(v248 + 8) & 0xFFFFFFFFFFFFFFF8;
                      v257 = v248 + 24;
                      v258 = v242 == v256 && v257 == v254;
                      if (!v258 && *(_QWORD *)(v255 + 8) == v242)
                        v255 = 0;
                      v259 = *(_QWORD *)(v255 + 8);
                      if (v259 < 8)
                        goto LABEL_445;
                      v260 = *(_QWORD **)((v259 & 0xFFFFFFFFFFFFFFF8) + 16);
                      if (!v260)
                        goto LABEL_445;
                      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(unsigned __int16 *)v260[2]) & 1) == 0&& (*(_BYTE *)(v260[2] + 9) & 0x20) == 0)
                      {
LABEL_384:
                        v36 = v459;
                        goto LABEL_445;
                      }
                      v261 = (_DWORD *)v260[4];
                      v36 = v459;
                      if ((v261[1] - 1) < 0x3FFFFFFF || (*v261 & 0xFFF00) != 0)
                        goto LABEL_445;
                      v262 = (_QWORD *)sub_1C4968B24((int *)&v521, (uint64_t)v260);
                      if (v262 != (_QWORD *)((char *)v524 + 32 * v525))
                      {
                        v263 = v262;
                        v264 = v262[1];
                        if (v264 <= 7)
                        {
                          v262[1] = v222 & 0xFFFFFFFFFFFFFFFBLL;
                          v36 = v459;
                          v38 = v476;
                        }
                        else
                        {
                          v36 = v459;
                          if ((v264 & 4) == 0)
                          {
                            v265 = operator new();
                            *(_QWORD *)v265 = v265 + 16;
                            *(_QWORD *)(v265 + 8) = 0x400000000;
                            v263[1] = v265 | 4;
                            v266 = v265 & 0xFFFFFFFFFFFFFFF8;
                            v267 = *(unsigned int *)((v265 & 0xFFFFFFFFFFFFFFF8) + 8);
                            if (v267 >= *(unsigned int *)((v265 & 0xFFFFFFFFFFFFFFF8) + 12))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod(v265 & 0xFFFFFFFFFFFFFFF8, v266 + 16, v267 + 1, 8);
                              v267 = *(unsigned int *)(v266 + 8);
                            }
                            *(_QWORD *)(*(_QWORD *)v266 + 8 * v267) = v264 & 0xFFFFFFFFFFFFFFF8;
                            ++*(_DWORD *)(v266 + 8);
                            v264 = v263[1];
                            v36 = v459;
                          }
                          v268 = v264 & 0xFFFFFFFFFFFFFFF8;
                          v269 = *(unsigned int *)((v264 & 0xFFFFFFFFFFFFFFF8) + 8);
                          if (v269 >= *(unsigned int *)((v264 & 0xFFFFFFFFFFFFFFF8) + 12))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod(v264 & 0xFFFFFFFFFFFFFFF8, v268 + 16, v269 + 1, 8);
                            v36 = v459;
                            v269 = *(unsigned int *)(v268 + 8);
                          }
                          v38 = v476;
                          *(_QWORD *)(*(_QWORD *)v268 + 8 * v269) = v222;
                          ++*(_DWORD *)(v268 + 8);
                        }
                        v263[2] = v221;
                        *((_DWORD *)v263 + 6) = v478;
                        goto LABEL_445;
                      }
                      v502 = (void *)v222;
                      sub_1C4850058((unint64_t *)&v488, &v502, 1uLL);
                      v270 = v488;
                      v271 = v488 & 4;
                      v272 = v488 & 0xFFFFFFFFFFFFFFF8;
                      if ((v488 & 4) != 0 && v272)
                      {
                        v273 = (_QWORD *)operator new();
                        v274 = (unint64_t)v273;
                        v275 = v273 + 2;
                        *v273 = v273 + 2;
                        v273[1] = 0x400000000;
                        if (v273 != (_QWORD *)v272)
                        {
                          v276 = *(unsigned int *)(v272 + 8);
                          if (*(_DWORD *)(v272 + 8))
                          {
                            if (v276 < 5)
                            {
                              v277 = *(unsigned int *)(v272 + 8);
                              goto LABEL_403;
                            }
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v273, (uint64_t)(v273 + 2), *(unsigned int *)(v272 + 8), 8);
                            v277 = *(unsigned int *)(v272 + 8);
                            if ((_DWORD)v277)
                            {
                              v275 = *(void **)v274;
LABEL_403:
                              memcpy(v275, *(const void **)v272, 8 * v277);
                            }
                            *(_DWORD *)(v274 + 8) = v276;
                          }
                        }
                        v270 = v274 | 4;
                        v272 = v274 & 0xFFFFFFFFFFFFFFF8;
                        v271 = 4;
                        v38 = v476;
                      }
                      v278 = v221;
                      v502 = v260;
                      v503 = v270;
                      if (v272)
                        v279 = v271 == 0;
                      else
                        v279 = 1;
                      v280 = v279;
                      if (!v279)
                      {
                        v281 = (_QWORD *)operator new();
                        v282 = (unint64_t)v281;
                        v283 = v281 + 2;
                        *v281 = v281 + 2;
                        v281[1] = 0x400000000;
                        if (v281 != (_QWORD *)v272)
                        {
                          v284 = *(unsigned int *)(v272 + 8);
                          if (*(_DWORD *)(v272 + 8))
                          {
                            if (v284 < 5)
                            {
                              v285 = *(unsigned int *)(v272 + 8);
                              goto LABEL_417;
                            }
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v281, (uint64_t)(v281 + 2), *(unsigned int *)(v272 + 8), 8);
                            v285 = *(unsigned int *)(v272 + 8);
                            if ((_DWORD)v285)
                            {
                              v283 = *(void **)v282;
LABEL_417:
                              memcpy(v283, *(const void **)v272, 8 * v285);
                            }
                            *(_DWORD *)(v282 + 8) = v284;
                          }
                        }
                        v270 = v282 | 4;
                        v503 = v282 | 4;
                        v260 = v502;
                        v38 = v476;
                        v278 = v221;
                      }
                      v504 = v278;
                      v505 = v478;
                      v499 = v260;
                      LODWORD(v500) = 0;
                      if ((v521 & 1) != 0)
                      {
                        v286 = 32;
                        v287 = &v522;
                        goto LABEL_424;
                      }
                      v286 = v523;
                      if (!v523)
                      {
                        v296 = 0;
                        goto LABEL_437;
                      }
                      v287 = v522;
LABEL_424:
                      v288 = v286 - 1;
                      v289 = v288 & ((v260 >> 4) ^ (v260 >> 9));
                      v290 = &v287[2 * v289];
                      v291 = (void *)*v290;
                      if (v260 == (_QWORD *)*v290)
                      {
LABEL_433:
                        v36 = v459;
                      }
                      else
                      {
                        v292 = 0;
                        v293 = 1;
                        while (v291 != (void *)-4096)
                        {
                          if (v292)
                            v294 = 0;
                          else
                            v294 = v291 == (void *)-8192;
                          if (v294)
                            v292 = v290;
                          v295 = v289 + v293++;
                          v289 = v295 & v288;
                          v290 = &v287[2 * v289];
                          v291 = (void *)*v290;
                          if (v260 == (_QWORD *)*v290)
                            goto LABEL_433;
                        }
                        if (v292)
                          v296 = v292;
                        else
                          v296 = v290;
LABEL_437:
                        v297 = sub_1C4968D14((uint64_t)&v521, (uint64_t)&v499, &v499, v296);
                        *v297 = v499;
                        *((_DWORD *)v297 + 2) = v500;
                        v298 = v525;
                        v299 = (char *)v524;
                        if (v525 >= HIDWORD(v525))
                        {
                          v313 = v524 <= &v502 && (char *)v524 + 32 * v525 > (char *)&v502;
                          v314 = v313;
                          v315 = ((char *)&v502 - (_BYTE *)v524) >> 5;
                          v483 = v314;
                          if (v314 != 1)
                            v315 = -1;
                          v480 = v315;
                          v489 = 0;
                          v299 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v524, v525 + 1, 32, (unint64_t *)&v489);
                          v316 = (char *)v524;
                          if ((_DWORD)v525)
                          {
                            v317 = (char *)v524 + 32 * v525;
                            v318 = v299;
                            do
                            {
                              *(_QWORD *)v318 = *(_QWORD *)v316;
                              *((_QWORD *)v318 + 1) = *((_QWORD *)v316 + 1);
                              *((_QWORD *)v316 + 1) = 0;
                              v319 = *((_QWORD *)v316 + 2);
                              *((_DWORD *)v318 + 6) = *((_DWORD *)v316 + 6);
                              *((_QWORD *)v318 + 2) = v319;
                              v316 += 32;
                              v318 += 32;
                            }
                            while (v316 != v317);
                            v316 = (char *)v524;
                            if ((_DWORD)v525)
                            {
                              v320 = (char *)v524 - 24;
                              v321 = 32 * v525;
                              v474 = (char *)v524 - 24;
                              do
                              {
                                v322 = *(_QWORD *)&v320[v321];
                                if ((v322 & 4) != 0)
                                {
                                  v323 = (void **)(v322 & 0xFFFFFFFFFFFFFFF8);
                                  if (v323)
                                  {
                                    v485 = v323;
                                    if (*v323 != v323 + 2)
                                      free(*v323);
                                    MEMORY[0x1CAA32FC0](v485, 0x1080C40ED926357);
                                    v320 = v474;
                                  }
                                }
                                v321 -= 32;
                              }
                              while (v321);
                              v316 = (char *)v524;
                            }
                          }
                          v324 = v489;
                          if (v316 != (char *)v526)
                            free(v316);
                          v524 = v299;
                          HIDWORD(v525) = v324;
                          v325 = &v299[32 * v480];
                          v300 = &v502;
                          if (v483)
                            v300 = (void **)&v299[32 * v480];
                          v302 = (uint64_t *)(v325 + 8);
                          v326 = (unint64_t *)(v325 + 16);
                          v301 = &v504;
                          if (v483)
                            v301 = v326;
                          else
                            v302 = &v503;
                          v298 = v525;
                        }
                        else
                        {
                          v300 = &v502;
                          v302 = &v503;
                          v301 = &v504;
                        }
                        v36 = v459;
                        v303 = &v299[32 * v298];
                        *(_QWORD *)v303 = *v300;
                        *((_QWORD *)v303 + 1) = *v302;
                        *v302 = 0;
                        v304 = *v301;
                        *((_DWORD *)v303 + 6) = *((_DWORD *)v301 + 2);
                        *((_QWORD *)v303 + 2) = v304;
                        LODWORD(v303) = v525;
                        LODWORD(v525) = v525 + 1;
                        *((_DWORD *)v297 + 2) = (_DWORD)v303;
                        v270 = v503;
                        v38 = v476;
                      }
                      if ((v270 & 4) != 0
                        && (v305 = (void **)(v270 & 0xFFFFFFFFFFFFFFF8), (v270 & 0xFFFFFFFFFFFFFFF8) != 0))
                      {
                        if (*v305 != v305 + 2)
                          free(*v305);
                        MEMORY[0x1CAA32FC0](v305, 0x1080C40ED926357);
                        v36 = v459;
                        if ((v280 & 1) != 0)
                          goto LABEL_443;
                      }
                      else if ((v280 & 1) != 0)
                      {
LABEL_443:
                        if ((v488 & 4) == 0)
                          goto LABEL_445;
                        v306 = (void **)(v488 & 0xFFFFFFFFFFFFFFF8);
                        if ((v488 & 0xFFFFFFFFFFFFFFF8) == 0)
                          goto LABEL_445;
                        if (*v306 != v306 + 2)
                          free(*v306);
                        MEMORY[0x1CAA32FC0](v306, 0x1080C40ED926357);
                        goto LABEL_384;
                      }
                      if (*(_QWORD *)v272 != v272 + 16)
                        free(*(void **)v272);
                      MEMORY[0x1CAA32FC0](v272, 0x1080C40ED926357);
                      v36 = v459;
                      goto LABEL_443;
                    }
                  }
                  else
                  {
                    v243 = 0;
                  }
                  v248 = v244 + 24 * v243;
                  goto LABEL_374;
                }
              }
              v38 = v476;
            }
LABEL_445:
            ++v219;
            v220 = v221;
            if (v219 >= *(unsigned int *)(v221 + 40))
            {
              v467 = 1;
              v19 = v218;
              goto LABEL_520;
            }
          }
        }
LABEL_519:
        v467 = 1;
        v36 = v459;
LABEL_520:
        if (v38 == v36)
        {
          v21 = v516;
          goto LABEL_529;
        }
      }
      v62 = 1;
      while (v61 != -4096)
      {
        v63 = v59 + v62++;
        v59 = v63 & (v58 - 1);
        v61 = *(_QWORD *)(v57 + 16 * v59);
        if (v51 == v61)
        {
          v60 = (uint64_t *)(v57 + 16 * v59);
          goto LABEL_86;
        }
      }
LABEL_85:
      v60 = (uint64_t *)(v57 + 16 * v58);
      goto LABEL_86;
    }
LABEL_529:
    v516 = v21 - 1;
    v20 = v467;
    if (v21 != 1)
      sub_1C486F1F8(&v512);
    v18 = v510[0];
    v460 = v458;
  }
LABEL_532:
  if (v509 != &v510[2])
    free(v509);
  if (v507 != v506)
    free(v507);
  if (v515 != &v517)
    free(v515);
  if (v513 != v512)
    free(v513);
  if ((_DWORD)v519)
  {
    v337 = (uint64_t *)v518;
    v338 = (uint64_t *)((char *)v518 + 8 * v519);
    while (1)
    {
      v339 = *v337;
      v340 = *(int32x2_t **)(*(_QWORD *)(a1 + 280) + 288);
      v341 = v340[46];
      v342 = v340[48].u32[0];
      if (!(_DWORD)v342)
        goto LABEL_548;
      LODWORD(v343) = (v342 - 1) & ((v339 >> 4) ^ (v339 >> 9));
      v344 = (uint64_t *)(*(_QWORD *)&v341 + 16 * v343);
      v345 = *v344;
      if (*v344 != v339)
        break;
LABEL_549:
      if (v344 != (uint64_t *)(*(_QWORD *)&v341 + 16 * v342))
      {
        v348 = v344[1] & 0xFFFFFFFFFFFFFFF8;
        *v344 = -8192;
        v340[47] = vadd_s32(v340[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v348 + 16) = 0;
      }
      v349 = v339;
      if ((*(_BYTE *)v339 & 4) == 0)
      {
        v349 = v339;
        if ((*(_WORD *)(v339 + 44) & 8) != 0)
        {
          v349 = v339;
          do
            v349 = *(_QWORD *)(v349 + 8);
          while ((*(_WORD *)(v349 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v339 + 24) + 40, v339, *(_QWORD *)(v349 + 8));
      if (++v337 == v338)
        goto LABEL_558;
    }
    v346 = 1;
    while (v345 != -4096)
    {
      v347 = v343 + v346++;
      v343 = v347 & (v342 - 1);
      v345 = *(_QWORD *)(*(_QWORD *)&v341 + 16 * v343);
      if (v345 == v339)
      {
        v344 = (uint64_t *)(*(_QWORD *)&v341 + 16 * v343);
        goto LABEL_549;
      }
    }
LABEL_548:
    v344 = (uint64_t *)(*(_QWORD *)&v341 + 16 * v342);
    goto LABEL_549;
  }
LABEL_558:
  v350 = (_QWORD *)v457[41];
  if (v350 == v457 + 40)
    goto LABEL_729;
  do
  {
    v512 = v514;
    v513 = (void *)0x800000000;
    v502 = 0;
    v503 = 0;
    v351 = (unsigned __int16 *)(v350 + 6);
    v352 = (unsigned __int16 **)v350[7];
    if (v352 == v350 + 6)
    {
      v481 = 0;
      goto LABEL_679;
    }
    v477 = v19;
    v353 = 0;
    v481 = 0;
    v354 = 0;
    v475 = v350;
    do
    {
      if (!v352 || (v355 = (unsigned __int16 *)v352, (*(_BYTE *)v352 & 4) == 0))
      {
        v355 = (unsigned __int16 *)v352;
        if ((*((_WORD *)v352 + 22) & 8) != 0)
        {
          v355 = (unsigned __int16 *)v352;
          do
            v355 = (unsigned __int16 *)*((_QWORD *)v355 + 1);
          while ((v355[22] & 8) != 0);
        }
      }
      v356 = (unsigned __int16 *)*((_QWORD *)v355 + 1);
      v357 = v352[2];
      v358 = *v357;
      v360 = (v358 - 9) <= 0x3C && ((1 << (v358 - 9)) & 0x1000000000000605) != 0
          || v358 == 0;
      if (v360 || (v357[4] & 0x10) != 0)
      {
LABEL_580:
        v352 = v353;
        goto LABEL_582;
      }
      if (((*(uint64_t (**)(uint64_t, unsigned __int16 **))(*(_QWORD *)a1 + 192))(a1, v352) & 1) != 0)
      {
        if (++v354 >= 0xF)
        {
          v353 = 0;
          v502 = 0;
        }
        if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, *v352[2]))
          goto LABEL_580;
        v361 = *((_DWORD *)v352[4] + 1);
        if ((v361 & 0x80000000) == 0)
          goto LABEL_580;
        v362 = v361 & 0x7FFFFFFF;
        v363 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * v362) & 0xFFFFFFFFFFFFFFF8;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1) != v363)
          goto LABEL_580;
        v472 = v354;
        v364 = *(_QWORD *)(a1 + 272);
        v365 = *(_QWORD *)(*(_QWORD *)(v364 + 24) + 16 * v362 + 8);
        if (v365
          && ((*(_BYTE *)(v365 + 3) & 1) != 0 || (v365 = *(_QWORD *)(v365 + 24)) != 0 && (*(_BYTE *)(v365 + 3) & 1) != 0)
          && ((v366 = *(_QWORD *)(v365 + 24)) == 0 || (*(_BYTE *)(v366 + 3) & 1) == 0))
        {
          if (v353)
          {
            v503 = (uint64_t)v352;
            if (*v353[2] == 518)
              v367 = 0;
            else
              v367 = v353[4][40];
            v482 = v351;
            if (*v352[2] == 518)
              v368 = 0;
            else
              v368 = v352[4][40];
            v369 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
            v370 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v364, "", 0);
            *(_QWORD *)(*(_QWORD *)(v364 + 24) + 16 * (v370 & 0x7FFFFFFF)) = v369 & 0xFFFFFFFFFFFFFFFBLL;
            v371 = *(_QWORD *)(v364 + 8);
            if (v371)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v371 + 24))(v371, v370);
            v372 = v367 | (v368 << 16);
            v373 = 1;
            v470 = sub_1C49D63F4(*(_QWORD *)(a1 + 256), (uint64_t)v353[3], (unint64_t *)v353, v372, v370, 0, 1, (unsigned __int8 **)v353 + 7, 0);
            v374 = 0;
            do
            {
              v375 = v373;
              v376 = *(unsigned int *)(*((_QWORD *)*(&v502 + v374) + 4) + 4);
              v506 = v508;
              v507 = (void *)0x800000000;
              v377 = *(_QWORD *)(a1 + 272);
              if ((v376 & 0x80000000) != 0)
                v378 = (uint64_t *)(*(_QWORD *)(v377 + 24) + 16 * (v376 & 0x7FFFFFFF) + 8);
              else
                v378 = (uint64_t *)(*(_QWORD *)(v377 + 272) + 8 * v376);
              v379 = *v378;
              if (*v378)
              {
                while ((*(_BYTE *)(v379 + 3) & 1) != 0)
                {
                  v379 = *(_QWORD *)(v379 + 24);
                  if (!v379)
                    goto LABEL_629;
                }
                LODWORD(v380) = 0;
                v381 = 8;
LABEL_610:
                if (v380 >= v381)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v506, (uint64_t)v508, v380 + 1, 8);
                  LODWORD(v380) = (_DWORD)v507;
                }
                *((_QWORD *)v506 + v380) = v379;
                v380 = ((_DWORD)v507 + 1);
                LODWORD(v507) = (_DWORD)v507 + 1;
                while (1)
                {
                  v379 = *(_QWORD *)(v379 + 24);
                  if (!v379)
                    break;
                  if ((*(_BYTE *)(v379 + 3) & 1) == 0)
                  {
                    v381 = HIDWORD(v507);
                    goto LABEL_610;
                  }
                }
                v382 = (unsigned int **)v506;
                if ((_DWORD)v380)
                {
                  v486 = v373;
                  v383 = 8 * v380;
                  while (1)
                  {
                    v384 = *v382;
                    v385 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(a1, v374);
                    if ((_DWORD)v385)
                    {
                      LOWORD(v386) = v385;
                      if (((*v384 >> 8) & 0xFFF) != 0)
                      {
                        v386 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 208))(*(_QWORD *)(a1 + 264), v385);
                        llvm::MachineOperand::setReg((uint64_t)v384, v370);
                        if (!v386)
                          goto LABEL_623;
                      }
                      else
                      {
                        llvm::MachineOperand::setReg((uint64_t)v384, v370);
                      }
                      *v384 = *v384 & 0xFFF000FF | ((v386 & 0xFFF) << 8);
                    }
                    else
                    {
                      llvm::MachineOperand::setReg((uint64_t)v384, v370);
                    }
LABEL_623:
                    ++v382;
                    v383 -= 8;
                    if (!v383)
                    {
                      v382 = (unsigned int **)v506;
                      v375 = v486;
                      break;
                    }
                  }
                }
                if (v382 != v508)
                  free(v382);
              }
LABEL_629:
              v373 = 0;
              v374 = 1;
            }
            while ((v375 & 1) != 0);
            sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 288), v470, 0);
            v387 = *(_QWORD *)(a1 + 280);
            v388 = (llvm::LiveInterval *)sub_1C4851220(v387, v370);
            v389 = *(_QWORD *)(v387 + 304);
            v390 = *(_QWORD *)(v387 + 248);
            *(_QWORD *)v389 = v390;
            *(_QWORD *)(v389 + 8) = *(_QWORD *)(v390 + 40);
            *(_OWORD *)(v389 + 16) = *(_OWORD *)(v387 + 288);
            *(_QWORD *)(v389 + 32) = v387 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v389);
            *(_DWORD *)(v389 + 184) = 0;
            v391 = *(_QWORD *)(v387 + 256);
            v25 = *(_BYTE *)(v391 + 16) == 0;
            v392 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v391 + 24)
                                                   + 16 * (*((_DWORD *)v388 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v394 = !v25 && v392 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v387 + 304), v388, v394);
            llvm::LiveIntervals::computeDeadValues(v387, (uint64_t)v388, 0);
            v395 = v513;
            if (v513 >= (unint64_t)HIDWORD(v513))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)v514, v513 + 1, 8);
              v395 = v513;
            }
            v351 = v482;
            v354 = v472;
            *((_QWORD *)v512 + v395) = v353;
            v396 = ((_DWORD)v513 + 1);
            LODWORD(v513) = v396;
            if (v396 >= HIDWORD(v513))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)v514, v396 + 1, 8);
              LODWORD(v396) = (_DWORD)v513;
            }
            *((_QWORD *)v512 + v396) = v352;
            LODWORD(v513) = (_DWORD)v513 + 1;
            v502 = 0;
            v503 = 0;
            v481 = 1;
            v352 = 0;
          }
          else
          {
            v354 = 0;
            v502 = v352;
          }
        }
        else
        {
          v352 = v353;
          v354 = v472;
        }
      }
      else
      {
        v352 = 0;
        v502 = 0;
      }
LABEL_582:
      v353 = v352;
      v352 = (unsigned __int16 **)v356;
    }
    while (v356 != v351);
    v397 = (uint64_t *)v512;
    v487 = (uint64_t *)((char *)v512 + 8 * v513);
    if (!(_DWORD)v513)
      goto LABEL_675;
    do
    {
      v398 = *v397;
      v399 = *(_QWORD *)(a1 + 280);
      v400 = *(_DWORD *)(*(_QWORD *)(*v397 + 32) + 4) & 0x7FFFFFFF;
      v401 = *(_QWORD *)(v399 + 408);
      v402 = *(_QWORD *)(v401 + 8 * v400);
      if (v402)
      {
        v403 = *(_QWORD *)(v402 + 104);
        if (v403)
        {
          do
          {
            v417 = *(_QWORD *)(v403 + 96);
            v416 = *(_QWORD *)(v403 + 104);
            *(_QWORD *)(v403 + 96) = 0;
            if (v417)
            {
              sub_1C47655E8(v417, *(_QWORD **)(v417 + 8));
              MEMORY[0x1CAA32FC0](v417, 0x1020C4062D53EE8);
            }
            v418 = *(void **)(v403 + 64);
            if (v418 != (void *)(v403 + 80))
              free(v418);
            if (*(_QWORD *)v403 != v403 + 16)
              free(*(void **)v403);
            v403 = v416;
          }
          while (v416);
        }
        v404 = *(_QWORD *)(v402 + 96);
        *(_QWORD *)(v402 + 96) = 0;
        *(_QWORD *)(v402 + 104) = 0;
        if (v404)
        {
          sub_1C47655E8(v404, *(_QWORD **)(v404 + 8));
          MEMORY[0x1CAA32FC0](v404, 0x1020C4062D53EE8);
        }
        v405 = *(void **)(v402 + 64);
        if (v405 != (void *)(v402 + 80))
          free(v405);
        if (*(_QWORD *)v402 != v402 + 16)
          free(*(void **)v402);
        MEMORY[0x1CAA32FC0](v402, 0x10A0C408DA535C6);
        v401 = *(_QWORD *)(v399 + 408);
      }
      *(_QWORD *)(v401 + 8 * v400) = 0;
      v406 = *(int32x2_t **)(*(_QWORD *)(a1 + 280) + 288);
      v407 = v406[46];
      v408 = v406[48].u32[0];
      if ((_DWORD)v408)
      {
        LODWORD(v409) = (v408 - 1) & ((v398 >> 4) ^ (v398 >> 9));
        v410 = (uint64_t *)(*(_QWORD *)&v407 + 16 * v409);
        v411 = *v410;
        if (*v410 == v398)
          goto LABEL_658;
        v412 = 1;
        while (v411 != -4096)
        {
          v413 = v409 + v412++;
          v409 = v413 & (v408 - 1);
          v411 = *(_QWORD *)(*(_QWORD *)&v407 + 16 * v409);
          if (v411 == v398)
          {
            v410 = (uint64_t *)(*(_QWORD *)&v407 + 16 * v409);
            goto LABEL_658;
          }
        }
      }
      v410 = (uint64_t *)(*(_QWORD *)&v407 + 16 * v408);
LABEL_658:
      if (v410 != (uint64_t *)(*(_QWORD *)&v407 + 16 * v408))
      {
        v414 = v410[1] & 0xFFFFFFFFFFFFFFF8;
        *v410 = -8192;
        v406[47] = vadd_s32(v406[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v414 + 16) = 0;
      }
      v415 = v398;
      if ((*(_BYTE *)v398 & 4) == 0)
      {
        v415 = v398;
        if ((*(_WORD *)(v398 + 44) & 8) != 0)
        {
          v415 = v398;
          do
            v415 = *(_QWORD *)(v415 + 8);
          while ((*(_WORD *)(v415 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v398 + 24) + 40, v398, *(_QWORD *)(v415 + 8));
      ++v397;
    }
    while (v397 != v487);
    v397 = (uint64_t *)v512;
LABEL_675:
    if (v397 != (uint64_t *)v514)
      free(v397);
    v19 = v477;
    v350 = v475;
LABEL_679:
    v419 = (unsigned __int16 *)v350[7];
    if (v419 == v351)
    {
      v420 = 0;
    }
    else
    {
      v420 = 0;
      while (1)
      {
        v421 = (uint64_t)v419;
        if (!v419 || (v422 = v419, (*(_BYTE *)v419 & 4) == 0))
        {
          v422 = v419;
          if ((v419[22] & 8) != 0)
          {
            v422 = v419;
            do
              v422 = (unsigned __int16 *)*((_QWORD *)v422 + 1);
            while ((v422[22] & 8) != 0);
          }
        }
        v419 = (unsigned __int16 *)*((_QWORD *)v422 + 1);
        if (v419 == v351)
          break;
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, **(unsigned __int16 **)(v421 + 16)) & 1) != 0|| (*(_BYTE *)(*(_QWORD *)(v421 + 16) + 9) & 0x20) != 0)
        {
          v423 = *(_QWORD *)(v421 + 32);
          if (!*(_BYTE *)v423)
          {
            v512 = v419;
            v424 = *(_QWORD *)(*(_QWORD *)(v421 + 24) + 32);
            if (!v424)
              goto LABEL_707;
            v425 = *(_QWORD *)(v424 + 728);
            if (v425)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v425 + 32))(v425, v421);
              v423 = *(_QWORD *)(v421 + 32);
            }
            v426 = *(unsigned int *)(v421 + 40);
            if ((_DWORD)v426)
            {
              v427 = *(_QWORD *)(v424 + 40);
              v428 = 32 * v426;
              do
              {
                if (!*(_BYTE *)v423)
                {
                  v429 = *(unsigned int *)(v423 + 4);
                  if ((v429 & 0x80000000) != 0)
                    v430 = (uint64_t *)(*(_QWORD *)(v427 + 24) + 16 * (v429 & 0x7FFFFFFF) + 8);
                  else
                    v430 = (uint64_t *)(*(_QWORD *)(v427 + 272) + 8 * v429);
                  v431 = *v430;
                  v433 = *(_QWORD *)(v423 + 16);
                  v432 = *(_QWORD *)(v423 + 24);
                  if (v423 != *v430)
                    v430 = (uint64_t *)(v433 + 24);
                  *v430 = v432;
                  if (v432)
                    v434 = v432;
                  else
                    v434 = v431;
                  *(_QWORD *)(v434 + 16) = v433;
                  *(_QWORD *)(v423 + 16) = 0;
                  *(_QWORD *)(v423 + 24) = 0;
                }
                v423 += 32;
                v428 -= 32;
              }
              while (v428);
              v435 = v19;
              v423 = *(_QWORD *)(v421 + 32);
            }
            else
            {
LABEL_707:
              v435 = v19;
            }
            *(_QWORD *)(v421 + 24) = 0;
            v436 = *(unint64_t **)(v421 + 8);
            v437 = *(_QWORD *)v421 & 0xFFFFFFFFFFFFFFF8;
            *v436 = v437 | *v436 & 7;
            *(_QWORD *)(v437 + 8) = v436;
            *(_QWORD *)v421 &= 7uLL;
            *(_QWORD *)(v421 + 8) = 0;
            sub_1C4AB4AE4((_QWORD *)a1, (unint64_t *)&v512, v421, *(_DWORD *)(v423 + 4));
            v438 = (unsigned __int16 *)v512;
            v439 = v350[5];
            *(_QWORD *)(v421 + 24) = v439;
            v440 = *(_QWORD *)(v439 + 32);
            v441 = *(unsigned int *)(v421 + 40);
            if ((_DWORD)v441)
            {
              v444 = *(_QWORD *)(v421 + 32);
              v445 = *(_QWORD *)(v440 + 40);
              v446 = 32 * v441;
              do
              {
                if (!*(_BYTE *)v444)
                {
                  v447 = *(unsigned int *)(v444 + 4);
                  if ((int)v447 >= 0)
                    v448 = (uint64_t *)(*(_QWORD *)(v445 + 272) + 8 * v447);
                  else
                    v448 = (uint64_t *)(*(_QWORD *)(v445 + 24) + 16 * (v447 & 0x7FFFFFFF) + 8);
                  v449 = *v448;
                  if (*v448)
                  {
                    v450 = *(_QWORD *)(v449 + 16);
                    *(_QWORD *)(v449 + 16) = v444;
                    *(_QWORD *)(v444 + 16) = v450;
                    if ((*(_BYTE *)(v444 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v444 + 24) = v449;
                    }
                    else
                    {
                      *(_QWORD *)(v444 + 24) = 0;
                      v448 = (uint64_t *)(v450 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v444 + 16) = v444;
                    *(_QWORD *)(v444 + 24) = 0;
                  }
                  *v448 = v444;
                }
                v444 += 32;
                v446 -= 32;
              }
              while (v446);
            }
            v442 = *(_QWORD *)(v440 + 728);
            if (v442)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v442 + 24))(v442, v421);
            v443 = *(_QWORD *)v438 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v421 = v443 | *(_QWORD *)v421 & 7;
            *(_QWORD *)(v421 + 8) = v438;
            *(_QWORD *)(v443 + 8) = v421;
            *(_QWORD *)v438 = *(_QWORD *)v438 & 7 | v421;
            if (v438 != v419)
            {
              llvm::LiveIntervals::handleMove(*(llvm::LiveIntervals **)(a1 + 280), (llvm::MachineInstr *)v421, 0);
              v420 = 1;
            }
            v19 = v435;
          }
        }
      }
    }
    v19 = v19 | v481 | v420;
    v350 = (_QWORD *)v350[1];
  }
  while (v350 != v457 + 40);
LABEL_729:
  if (v518 != v520)
    free(v518);
  v451 = v524;
  if ((_DWORD)v525)
  {
    v452 = (char *)v524 - 24;
    v453 = 32 * v525;
    do
    {
      v454 = *(_QWORD *)&v452[v453];
      if ((v454 & 4) != 0)
      {
        v455 = (void **)(v454 & 0xFFFFFFFFFFFFFFF8);
        if ((v454 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v455 != v455 + 2)
            free(*v455);
          MEMORY[0x1CAA32FC0](v455, 0x1080C40ED926357);
        }
      }
      v453 -= 32;
    }
    while (v453);
    v451 = v524;
  }
  if (v451 != v526)
    free(v451);
  if ((v521 & 1) == 0)
    MEMORY[0x1CAA32FB4](v522, 8);
  if (v494 >= 0x41 && v493)
    MEMORY[0x1CAA32F9C](v493, 0x1000C8000313F17);
  if (v496 >= 0x41 && v495)
    MEMORY[0x1CAA32F9C](v495, 0x1000C8000313F17);
  if (v498 >= 0x41 && v497)
    MEMORY[0x1CAA32F9C](v497, 0x1000C8000313F17);
  return v19 & 1;
}

BOOL sub_1C4AB46EC(uint64_t a1, int a2)
{
  return (a2 - 6717) < 6;
}

uint64_t sub_1C4AB4700()
{
  return 0;
}

uint64_t sub_1C4AB4708(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  BOOL v5;

  v2 = *(unsigned __int16 **)(a2 + 16);
  v3 = *v2;
  v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x10) != 0)
    return 1;
  else
    return v2[8] & 1;
}

uint64_t sub_1C4AB4754()
{
  return 0;
}

uint64_t sub_1C4AB475C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 3) & 1;
}

uint64_t sub_1C4AB476C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 1) & 1;
}

BOOL sub_1C4AB477C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  BOOL v5;

  v2 = *(unsigned __int16 **)(a2 + 16);
  v3 = *v2;
  v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  return !v5 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0;
}

_UNKNOWN ***sub_1C4AB47CC()
{
  return &off_1E7FB1B88;
}

__int16 ***sub_1C4AB47D8()
{
  return &off_1E7FB1568;
}

BOOL sub_1C4AB47E4(uint64_t a1, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t sub_1C4AB47F4(uint64_t a1, int a2)
{
  if (a2 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_1C4AB4804(uint64_t a1, int a2)
{
  if (a2)
    return 2;
  else
    return 1;
}

uint64_t sub_1C4AB4814(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  int v4;

  v3 = **(unsigned __int16 **)(a2 + 16);
  if (v3 == 517)
  {
    v4 = 518;
    goto LABEL_9;
  }
  if (v3 == 5622)
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) == 1)
    {
      v4 = 5623;
      goto LABEL_9;
    }
  }
  else if (v3 == 5625 && *(_BYTE *)(*(_QWORD *)(a2 + 32) + 64) == 1)
  {
    v4 = 5626;
LABEL_9:
    *a3 = v4;
    return 1;
  }
  return 0;
}

uint64_t sub_1C4AB4884(uint64_t a1, int a2)
{
  _BOOL4 v2;

  v2 = a2 == 5623 || a2 == 5626;
  return a2 == 518 || v2;
}

void sub_1C4AB48AC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 != 517)
  {
    v4 = *(_QWORD *)(a4 + 32);
    v5 = *(uint64_t *)(v4 + 80) >> 16;
    if (a3 == 1)
      v5 = (unsigned __int16)*(_QWORD *)(v4 + 80);
    *(_QWORD *)(v4 + 80) = v5;
  }
}

uint64_t sub_1C4AB48D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int *i;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;

  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, **(unsigned __int16 **)(a2 + 16)) & 1) != 0
    || !sub_1C4968BEC(a1, a3))
  {
    return 1;
  }
  v6 = *(unsigned int *)(a3 + 40);
  if (!(_DWORD)v6)
    return 0;
  v7 = 0;
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 40);
  v10 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  for (i = *(int **)(a3 + 32); ; i += 8)
  {
    v12 = *i;
    if (*i == 1 || !*i && (v12 & 0x1000000) != 0)
      goto LABEL_11;
    if ((v12 & 0x10000FF) == 0 && i[1] == v10)
      break;
    ++v7;
LABEL_11:
    if (!--v6)
      return 0;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * (v10 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 176))(*(_QWORD *)(a1 + 248));
  if ((*(_DWORD *)(*(_QWORD *)(v15 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(_QWORD *)v14 + 24)
                   + *(_DWORD *)(v15 + 272) * ((*(_QWORD *)(v15 + 248) - *(_QWORD *)(v15 + 240)) >> 3))
                  + 4) & 0xFFFFFFF8) != 0x10
    && (*i & 0xFFF00) == 0)
  {
    v25 = v9 + 24 * v8;
    v26 = *(unsigned __int16 *)(v25 + 20);
    if (*(_WORD *)(v25 + 20))
    {
      v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 152) + 12 * *(unsigned __int16 *)(v25 + 18));
      v21 = &v20[3 * v26];
      goto LABEL_25;
    }
    return 1;
  }
  v16 = v9 + 24 * v8;
  v17 = *(unsigned __int16 *)(v16 + 20);
  if (*(_WORD *)(v16 + 20))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 152);
    v19 = *(unsigned __int16 *)(v16 + 18);
    v20 = (unsigned int *)(v18 + 12 * *(unsigned __int16 *)(v16 + 18));
    v21 = &v20[3 * v17];
    v22 = (_DWORD *)(v18 + 12 * v19 + 8);
    v23 = 12 * v17;
    do
    {
      v24 = *(v22 - 2);
      if (v24 >= v7)
      {
        if (v24 > v7)
          break;
        if (!*(v22 - 1))
        {
          if ((*v22 & 0x80000000) == 0)
            break;
          return 2;
        }
      }
      v22 += 3;
      v23 -= 12;
    }
    while (v23);
LABEL_25:
    do
    {
      if (*v20 >= v7)
      {
        if (*v20 > v7)
          return 1;
        if (!v20[1])
          break;
      }
      v20 += 3;
    }
    while (v20 != v21);
    if (v20[2])
      return 0;
  }
  return 1;
}

uint64_t sub_1C4AB4AE4(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t *v31;
  int v32;

  v8 = *a2;
  v32 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 176))(a1, **(unsigned __int16 **)(a3 + 16));
  v31 = (uint64_t *)a2;
  v9 = *(_QWORD *)(*a2 + 24);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*a1 + 296))(a1, a3, v8);
  v11 = 0;
  while (1)
  {
    v12 = v8;
    if (((*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 224))(a1, v8) & 1) != 0
      || *(_QWORD *)(v9 + 56) == v8)
    {
      return 0;
    }
    v13 = *(_QWORD *)v8;
    v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v14 = v12;
    if ((v13 & 4) == 0)
    {
      v14 = v12;
      if ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        v14 = v12;
        do
          v14 = *(_QWORD *)(v14 + 8);
        while ((*(_WORD *)(v14 + 44) & 8) != 0);
      }
    }
    v15 = *(_QWORD *)(v14 + 8);
    v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 200))(a1, v12);
    v17 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 200))(a1, v8);
    if (v32 && ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, v12) ^ 1 | v17) != 1)
      goto LABEL_48;
    if (v10)
    {
      *v31 = v12;
      goto LABEL_17;
    }
    if (sub_1C4968BEC((uint64_t)a1, v8))
    {
      if (sub_1C4968BEC((uint64_t)a1, v12))
      {
        v20 = *(_QWORD *)(v8 + 32);
        if (!*(_BYTE *)v20
          && (*(_WORD *)(*(_QWORD *)(a1[38] + 40) + 24 * *(unsigned __int16 *)(*(_QWORD *)(v8 + 16) + 6) + 8) & 0x1FFF) == 1)
        {
          v21 = *(unsigned int *)(v12 + 40);
          if (v21 >= 2)
            break;
        }
      }
    }
LABEL_37:
    if ((sub_1C4968BEC((uint64_t)a1, v8) & v16) == 1 && v15 != v9 + 48)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, v15))
      {
        v25 = *(_QWORD *)(v8 + 32);
        if (!*(_BYTE *)v25)
        {
          v26 = *(unsigned int *)(v15 + 40);
          if (v26 >= 2)
          {
            v27 = *(_DWORD *)(v25 + 4);
            v28 = v26 - 1;
            v29 = (_DWORD *)(*(_QWORD *)(v15 + 32) + 36);
            while (*((_BYTE *)v29 - 4) || *v29 != v27)
            {
              v29 += 8;
              if (!--v28)
                goto LABEL_17;
            }
            goto LABEL_48;
          }
        }
      }
    }
LABEL_17:
    if (a4)
    {
      v18 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v18)
      {
        v19 = (_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
        while (*((_BYTE *)v19 - 4) || *v19 != a4)
        {
          v19 += 8;
          if (!--v18)
            goto LABEL_23;
        }
        return 0;
      }
    }
LABEL_23:
    if (v10)
      --v10;
    else
      v10 = 0;
    if (++v11 == 6)
      return 0;
  }
  v22 = *(_DWORD *)(v20 + 4);
  v23 = v21 - 1;
  v24 = (_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
  while (*((_BYTE *)v24 - 4) || *v24 != v22)
  {
    v24 += 8;
    if (!--v23)
      goto LABEL_37;
  }
LABEL_48:
  *v31 = v12;
  return 1;
}

uint64_t sub_1C4AB4DDC()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Use scaling rematerializations limit (100000 virtual registers) or user a supplied value that grows w"
                   "ith program size beyond that value";
  *((_QWORD *)&v3 + 1) = 135;
  v1 = 100000;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7EDCD8, "agx3-rematerialize-large-programs", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7EDCD8, &dword_1C475E000);
}

uint64_t sub_1C4AB4E64(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 ROC/WB Cache Control";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "agx3-roc-wb-control";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFA78;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AB4EF4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4AB4EF4()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EFA78);
  *result = &off_1E7FB1DA8;
  return result;
}

void sub_1C4AB4F34(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AB4FC8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AB5054()
{
  return "AGX3 ROC/WB Cache Control Pass";
}

void *sub_1C4AB5064(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C4AB5094(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t j;
  unsigned __int16 *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  int v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  void **v67;
  char *v68;
  char *v69;
  char *v70;
  void *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  int v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unsigned int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  unsigned __int16 *v133;
  int v134;
  uint64_t v135;
  _BOOL4 v137;
  unsigned __int16 *v138;
  _DWORD *v139;
  unsigned int v141;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t i;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  char *v152;
  unsigned __int32 v153;
  int v154;
  char *v155;
  uint64_t v156;
  int v157;
  _BYTE *v158;
  __n128 *p_src;
  unint64_t *v160;
  __n128 *v161;
  __n128 *v162;
  unint64_t v163;
  uint64_t v165;
  _BOOL4 v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  char *v178;
  const void *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  int v188;
  char *v189;
  unint64_t *v190;
  unsigned int *v191;
  int v192;
  _BOOL4 v193;
  int v194;
  int v195;
  char *v196;
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unsigned __int16 *v207;
  BOOL v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  int v214;
  char *v215;
  uint64_t v216;
  char *v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  char *v231;
  _BOOL4 v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  const llvm::TargetSubtargetInfo *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  int v247;
  char *v248;
  unsigned int v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  char *v259;
  unsigned int *v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int v264;
  __int128 v265;
  __int16 v266;
  _BYTE v267[56];
  void *v268;
  unsigned int v269;
  __int128 v270[2];
  __int16 v271;
  _BYTE v272[56];
  void *v273;
  unsigned int v274;
  _QWORD v275[3];
  __int128 v276;
  __int16 v277;
  _BYTE v278[56];
  void *v279;
  unsigned int v280;
  _QWORD v281[4];
  __int16 v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  char v286[8];
  void *v287;
  unsigned int v288;
  uint64_t v289;
  char v290[8];
  void *v291;
  unsigned int v292;
  uint64_t v293;
  char v294[8];
  void *v295;
  unsigned int v296;
  uint64_t v297;
  unsigned __int8 v298;
  _BYTE v299[12];
  void *__dst;
  uint64_t v301;
  _QWORD v302[3];
  uint64_t v303;
  char v304;
  void *v305;
  uint64_t v306;
  _BYTE v307[224];
  _OWORD v308[4];
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  void *v318;
  uint64_t v319;
  _QWORD v320[9];
  void *v321;
  uint64_t v322;
  _BYTE v323[24];
  __n128 __src;
  _QWORD v325[3];
  uint64_t v326;
  char v327;
  void *__base;
  size_t __nel;
  _QWORD v330[27];

  v330[24] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 **)(a2 + 16);
  v235 = v2[282];
  if (!v2[282])
    return v235 != 0;
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EDDC0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDC0))
  {
    byte_1ED7EDDA8 = 0;
    __cxa_guard_release(&qword_1ED7EDDC0);
  }
  if (!byte_1ED7EDDA8)
  {
    v24 = atomic_load((unsigned __int8 *)&qword_1ED7EDDC8);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDC8))
    {
      dword_1ED7EDDAC = 6;
      __cxa_guard_release(&qword_1ED7EDDC8);
    }
    v25 = atomic_load((unsigned __int8 *)&qword_1ED7EDDD0);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDD0))
    {
      dword_1ED7EDDB0 = 2;
      __cxa_guard_release(&qword_1ED7EDDD0);
    }
    v26 = atomic_load((unsigned __int8 *)&qword_1ED7EDDD8);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDD8))
    {
      dword_1ED7EDDB4 = 3;
      __cxa_guard_release(&qword_1ED7EDDD8);
    }
    v27 = atomic_load((unsigned __int8 *)&qword_1ED7EDDE0);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDE0))
    {
      dword_1ED7EDDB8 = 2;
      __cxa_guard_release(&qword_1ED7EDDE0);
    }
    v239 = a2;
    v28 = atomic_load((unsigned __int8 *)&qword_1ED7EDDE8);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDE8))
    {
      byte_1ED7EDDA9 = 1;
      __cxa_guard_release(&qword_1ED7EDDE8);
    }
    v29 = v2[391];
    v298 = v2[395];
    sub_1C4AB6B14((uint64_t)v294, (uint64_t)v2, 0);
    sub_1C4AB6B14((uint64_t)v290, (uint64_t)v2, 2);
    v237 = (const llvm::TargetSubtargetInfo *)v2;
    sub_1C4AB6B14((uint64_t)v286, (uint64_t)v2, 1);
    *(_QWORD *)&v308[0] = v294;
    v321 = v323;
    v322 = 0x300000000;
    sub_1C4AB6D0C((unsigned int *)&v321, v308, 1);
    v247 = v29;
    if (v29)
    {
      *(_QWORD *)&v308[0] = v290;
      *((_QWORD *)&v308[0] + 1) = v286;
      sub_1C4AB6D0C((unsigned int *)&v321, v308, 2);
    }
    v30 = (char *)v321;
    v238 = a2 + 320;
    if (*(_QWORD *)(a2 + 328) != a2 + 320)
    {
      v31 = *(_QWORD *)(a2 + 328);
      v32 = 0;
      v253 = **(_QWORD **)v321;
      do
      {
        v33 = v31 + 48;
        v240 = v31;
        v241 = v31 + 48;
        v34 = *(_QWORD *)(v31 + 56);
        while (v34 != v33)
        {
          v35 = *(unsigned __int16 **)(v34 + 16);
          v36 = *((_QWORD *)v35 + 2);
          if ((v36 & 0x400000000) != 0)
          {
            v37 = *v35;
            v38 = sub_1C4C915C4(v37);
            if ((v38 & 0xFF00000000) == 0
              || ((v38 - 51) <= 0x18 ? (v39 = ((1 << (v38 - 51)) & 0x1F80007) == 0) : (v39 = 1), v39))
            {
              v40 = (v37 - 9) > 0x3C || ((1 << (v37 - 9)) & 0x1000000000000605) == 0;
              v42 = !v40 || v37 == 0 || (v35[4] & 0x10) != 0 || v36 & 1;
              v250 = *(_DWORD *)(v34 + 40);
              if (v250)
              {
                v43 = 0;
                if (v42)
                  v44 = 0x100000000;
                else
                  v44 = 0;
                v243 = v44 | (v32 + 1);
                v255 = v34;
                while (1)
                {
                  if (sub_1C4AD4FB8(v34, v43, (_QWORD *)(v253 + 8)) == 1)
                  {
                    v45 = sub_1C4AB8AC8(**(_WORD **)(v34 + 16), v43);
                    v46 = sub_1C4AB895C((llvm::MachineInstr *)v34, v43);
                    if ((_DWORD)v322)
                      break;
                  }
LABEL_100:
                  if (++v43 == v250)
                    goto LABEL_101;
                }
                v47 = v46;
                v48 = (char *)v321;
                v257 = (char *)v321 + 8 * v322;
                v49 = 0x10000000000;
                if (!v46)
                  v49 = 0;
                v50 = v243 | v49;
                v262 = v43;
                while (1)
                {
                  v51 = *(_QWORD *)v48;
                  sub_1C49E178C(v308, (_QWORD *)v34, v43, v253, 0, 0);
                  v52 = *(_QWORD *)&v308[0];
                  v53 = DWORD2(v308[0]);
                  v54 = HIDWORD(*(_QWORD *)&v308[0]);
                  if (DWORD2(v308[0]) != DWORD1(v308[0]))
                    break;
LABEL_86:
                  v48 += 8;
                  v34 = v255;
                  v43 = v262;
                  if (v48 == v257)
                    goto LABEL_100;
                }
                while (2)
                {
                  v55 = *(_DWORD *)(v51 + 24);
                  if ((v45 & 1) != 0)
                  {
                    if (v55 == 2)
                      goto LABEL_98;
                  }
                  else if (v55 == 1)
                  {
                    goto LABEL_98;
                  }
                  v56 = *(_QWORD *)(v51 + 8) + 24 * v54;
                  v57 = *(unsigned int *)(v56 + 8);
                  if ((_DWORD)v57 && (v58 = *(_QWORD *)v56 + 8 * v57, *(_DWORD *)(v58 - 8) > v32))
                  {
                    *(_BYTE *)(v58 - 3) |= v47;
                  }
                  else
                  {
                    if (v57 >= *(unsigned int *)(v56 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v56, v56 + 16, v57 + 1, 8);
                      v57 = *(unsigned int *)(v56 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v56 + 8 * v57) = v50;
                    ++*(_DWORD *)(v56 + 8);
                  }
LABEL_98:
                  v52 = (v52 & 0xFFFFFFFF00000000) + 0x100000000;
                  v54 = HIDWORD(v52);
                  if (v53 == HIDWORD(v52))
                    goto LABEL_86;
                  continue;
                }
              }
            }
          }
LABEL_101:
          if ((*(_BYTE *)v34 & 4) == 0)
          {
            while ((*(_WORD *)(v34 + 44) & 8) != 0)
              v34 = *(_QWORD *)(v34 + 8);
          }
          v34 = *(_QWORD *)(v34 + 8);
          ++v32;
          v33 = v241;
        }
        v31 = *(_QWORD *)(v240 + 8);
      }
      while (v31 != v238);
      v30 = (char *)v321;
    }
    if ((_DWORD)v322)
    {
      v59 = &v30[8 * v322];
      do
      {
        v60 = *(_DWORD *)(*(_QWORD *)v30 + 16);
        if (v60)
        {
          v61 = *(_QWORD **)(*(_QWORD *)v30 + 8);
          v62 = &v61[3 * v60];
          do
          {
            v61[2] = *v61;
            v61 += 3;
          }
          while (v61 != v62);
        }
        v30 += 8;
      }
      while (v30 != v59);
    }
    v285 = 0;
    v256 = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v237 + 176))(v237);
    memset(&v308[2], 0, 32);
    v308[0] = llvm::MCSchedModel::Default;
    v308[1] = unk_1C86637F0;
    v311 = unk_1C86637F0;
    v312 = xmmword_1C8663800;
    v313 = unk_1C8663810;
    v309 = 0;
    v314 = 0;
    v310 = llvm::MCSchedModel::Default;
    v316 = 0u;
    v317 = 0u;
    v315 = 0u;
    v318 = v320;
    v319 = 0x1000000000;
    v320[8] = 0;
    llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v308, v237);
    v63 = dword_1ED7EDDAC;
    v64 = dword_1ED7EDDB0;
    v281[0] = "WB";
    v282 = 259;
    v283 = &v285;
    v284 = 0;
    if (!dword_1ED7EDDB0)
    {
      v98 = 0;
      goto LABEL_154;
    }
    v65 = 0;
    v66 = 0;
    v67 = &v283;
    while (v65 < HIDWORD(v284))
    {
      v68 = (char *)v283 + 40 * v65;
      *(_DWORD *)v68 = v63;
      *((_DWORD *)v68 + 8) = 0;
      *((_QWORD *)v68 + 1) = v308;
      *((_QWORD *)v68 + 2) = v68 + 32;
      *((_QWORD *)v68 + 3) = 0;
      v65 = v284 + 1;
      LODWORD(v284) = v284 + 1;
LABEL_118:
      if (++v66 == v64)
      {
        v63 = dword_1ED7EDDAC;
        v98 = dword_1ED7EDDB0;
LABEL_154:
        *(_QWORD *)&v276 = "WB";
        v277 = 259;
        sub_1C4AB6D88((uint64_t)v278, &v276, 1, v63, v98, v256);
        v275[0] = &v298;
        v275[1] = v281;
        v275[2] = v278;
        *(_QWORD *)&v270[0] = "ROC";
        v271 = 259;
        sub_1C4AB6D88((uint64_t)v272, v270, 0, dword_1ED7EDDB4, 6, v256);
        *(_QWORD *)&v265 = "POC";
        v266 = 259;
        sub_1C4AB6D88((uint64_t)v267, &v265, 0, dword_1ED7EDDB8, 2, v256);
        v99 = *(_QWORD *)(v239 + 328);
        if (v99 == v238)
        {
LABEL_390:
          sub_1C4AB8DD8((char *)v268, (char *)v268 + 24 * v269);
          if (v268 != v270)
            free(v268);
          sub_1C4AB8DD8((char *)v273, (char *)v273 + 24 * v274);
          if (v273 != v275)
            free(v273);
          sub_1C4AB8DD8((char *)v279, (char *)v279 + 24 * v280);
          if (v279 != v281)
            free(v279);
          sub_1C4AB8BC0((uint64_t)v283, (uint64_t)v283 + 40 * v284);
          if (v283 != &v285)
            free(v283);
          if (v318 != v320)
            free(v318);
          if (v321 != v323)
            free(v321);
          v223 = (char *)v287;
          if (v288)
          {
            v224 = 24 * v288;
            do
            {
              v225 = *(char **)&v223[v224 - 24];
              if (&v223[v224 - 8] != v225)
                free(v225);
              v224 -= 24;
            }
            while (v224);
            v223 = (char *)v287;
          }
          if (v223 != (char *)&v289)
            free(v223);
          v226 = (char *)v291;
          if (v292)
          {
            v227 = 24 * v292;
            do
            {
              v228 = *(char **)&v226[v227 - 24];
              if (&v226[v227 - 8] != v228)
                free(v228);
              v227 -= 24;
            }
            while (v227);
            v226 = (char *)v291;
          }
          if (v226 != (char *)&v293)
            free(v226);
          v229 = (char *)v295;
          if (v296)
          {
            v230 = 24 * v296;
            do
            {
              v231 = *(char **)&v229[v230 - 24];
              if (&v229[v230 - 8] != v231)
                free(v231);
              v230 -= 24;
            }
            while (v230);
            v229 = (char *)v295;
          }
          if (v229 != (char *)&v297)
            free(v229);
          return v235 != 0;
        }
        v100 = 0;
        v101 = 0;
        v102 = 0;
        v103 = &qword_1ED7ED000;
        while (1)
        {
          v104 = v99 + 48;
          v236 = v99;
          v105 = *(_QWORD *)(v99 + 56);
          v246 = v99 + 48;
          if (v105 != v99 + 48)
            break;
LABEL_389:
          v99 = *(_QWORD *)(v236 + 8);
          if (v99 == v238)
            goto LABEL_390;
        }
        while (1)
        {
          v106 = v100;
          if (v298)
            sub_1C4AB7088((uint64_t)v283, v284);
          ++v100;
          if ((*(_BYTE *)(*(_QWORD *)(v105 + 16) + 20) & 4) == 0)
          {
            v107 = v101;
            v108 = v102;
            goto LABEL_161;
          }
          v252 = v101;
          v264 = v100;
          if (*((_BYTE *)v103 + 3497) && sub_1C4AD53A0(&v285, v105, v256, 0))
          {
            if ((_DWORD)v284)
            {
              v109 = (char *)v283;
              v110 = (char *)v283 + 40 * v284;
              do
              {
                v111 = *((unsigned int *)v109 + 6);
                if ((_DWORD)v111)
                {
                  v112 = *((_QWORD *)v109 + 2);
                  v113 = 56 * v111;
                  do
                  {
                    v114 = *(void **)(v112 + v113 - 56);
                    if ((void *)(v112 + v113 - 40) != v114)
                      free(v114);
                    v113 -= 56;
                  }
                  while (v113);
                }
                *((_DWORD *)v109 + 6) = 0;
                *((_DWORD *)v109 + 8) = 0;
                v109 += 40;
              }
              while (v109 != v110);
            }
            if (v280)
            {
              v115 = (char *)v279;
              v116 = (char *)v279 + 24 * v280;
              do
              {
                v117 = *((unsigned int *)v115 + 4);
                if ((_DWORD)v117)
                {
                  v118 = *((_QWORD *)v115 + 1);
                  v119 = 48 * v117;
                  do
                  {
                    v120 = *(void **)(v118 + v119 - 48);
                    if ((void *)(v118 + v119 - 32) != v120)
                      free(v120);
                    v119 -= 48;
                  }
                  while (v119);
                }
                *((_DWORD *)v115 + 4) = 0;
                v115 += 24;
              }
              while (v115 != v116);
            }
            if (v274)
            {
              v121 = (char *)v273;
              v122 = (char *)v273 + 24 * v274;
              do
              {
                v123 = *((unsigned int *)v121 + 4);
                if ((_DWORD)v123)
                {
                  v124 = *((_QWORD *)v121 + 1);
                  v125 = 48 * v123;
                  do
                  {
                    v126 = *(void **)(v124 + v125 - 48);
                    if ((void *)(v124 + v125 - 32) != v126)
                      free(v126);
                    v125 -= 48;
                  }
                  while (v125);
                }
                *((_DWORD *)v121 + 4) = 0;
                v121 += 24;
              }
              while (v121 != v122);
            }
            if (v269)
            {
              v127 = (char *)v268;
              v128 = (char *)v268 + 24 * v269;
              do
              {
                v129 = *((unsigned int *)v127 + 4);
                if ((_DWORD)v129)
                {
                  v130 = *((_QWORD *)v127 + 1);
                  v131 = 48 * v129;
                  do
                  {
                    v132 = *(void **)(v130 + v131 - 48);
                    if ((void *)(v130 + v131 - 32) != v132)
                      free(v132);
                    v131 -= 48;
                  }
                  while (v131);
                }
                *((_DWORD *)v127 + 4) = 0;
                v127 += 24;
              }
              while (v127 != v128);
            }
          }
          v249 = v102;
          v133 = *(unsigned __int16 **)(v105 + 16);
          v134 = *v133;
          v135 = sub_1C4C915C4(v134);
          if ((v135 & 0xFF00000000) != 0
            && (v135 - 51) <= 0x18
            && ((1 << (v135 - 51)) & 0x1F80007) != 0)
          {
            v107 = v105;
            v100 = v264;
            v108 = v264;
            v104 = v246;
            if (v252)
            {
              v107 = v105;
              v108 = v264;
              if (v106 == v249)
              {
                v137 = sub_1C4AD7524(v252, v105);
                v107 = v105;
                v108 = v264;
                if (v137)
                {
                  if (llvm::MachineInstr::getNumExplicitOperands(v252))
                  {
                    v138 = *(unsigned __int16 **)(v252 + 16);
                    if ((word_1C6AA47DC[dword_1C6A9B6CC[*v138]] & 0xFFFB) == 0x3A)
                    {
                      v141 = 2;
                    }
                    else
                    {
                      v139 = *(_DWORD **)(v252 + 32);
                      if ((*v139 & 0x10000FF) == 0x1000000)
                      {
                        v218 = *((unsigned __int8 *)v138 + 4);
                        if ((v138[4] & 2) == 0 || (v220 = *(_DWORD *)(v252 + 40), v220 == v218))
                        {
                          v141 = v218;
                        }
                        else
                        {
                          v221 = v220 - 1;
                          v141 = v218;
                          do
                          {
                            v222 = v139[8 * v218];
                            if ((v222 & 0x10000FF) != 0x1000000)
                              break;
                            v141 += (v222 & 0x2000000) == 0;
                            if (v221 == v218)
                              break;
                            ++v218;
                          }
                          while ((v222 & 0x2000000) == 0);
                        }
                      }
                      else if (*v139 == 7 || *v139 == 0)
                      {
                        v141 = 1;
                      }
                      else
                      {
                        v141 = -1;
                      }
                    }
                  }
                  else
                  {
                    v141 = -1;
                  }
                  v219 = *(_QWORD *)(v252 + 32) + 32 * v141;
                  *(_QWORD *)(v219 + 16) |= 0x20uLL;
                  v107 = v105;
                  v108 = v264;
                }
              }
            }
            goto LABEL_161;
          }
          v143 = (v134 - 9) <= 0x3C && ((1 << (v134 - 9)) & 0x1000000000000605) != 0
              || v134 == 0;
          v100 = v264;
          if (!v143 && (v133[4] & 0x10) == 0 && (v133[8] & 1) == 0)
          {
            v107 = v252;
            v108 = v249;
            v104 = v246;
            goto LABEL_161;
          }
          v305 = v307;
          v306 = 0x400000000;
          LOBYTE(__dst) = 0;
          v304 = 0;
          __base = v330;
          __nel = 0x800000000;
          v144 = *(unsigned int *)(v105 + 40);
          if (!(_DWORD)v144)
            goto LABEL_311;
          v145 = 0;
          for (i = 0; i != v144; ++i)
          {
            v147 = sub_1C4AD4FB8(v105, i, (_QWORD *)(v256 + 8));
            if (v147 == 1)
            {
              sub_1C49E178C(v299, (_QWORD *)v105, i, v256, 0, 0);
              v150 = sub_1C4AB8AC8(**(_WORD **)(v105 + 16), i);
              __src.n128_u32[0] = *(_DWORD *)&v299[4];
              __src.n128_u64[1] = *(_QWORD *)(v105 + 32) + v145;
              LOBYTE(v325[0]) = v150;
              sub_1C4AB8FDC((uint64_t)&__base, &__src);
              __src = (__n128)*(unsigned int *)&v299[8];
              v325[0] = v150;
              sub_1C4AB8FDC((uint64_t)&__base, &__src);
              goto LABEL_238;
            }
            if (v147 != 2)
              goto LABEL_238;
            sub_1C49E178C(v299, (_QWORD *)v105, i, v256, 0, 0);
            __src.n128_u64[0] = (unint64_t)v325;
            v148 = v145 + *(_QWORD *)(v105 + 32);
            v325[0] = v148;
            __src.n128_u64[1] = 0x300000001;
            v326 = *(_QWORD *)&v299[4];
            if (!v304)
            {
              __dst = v302;
              v301 = 0x300000001;
              v302[0] = v148;
              v303 = v326;
              v304 = 1;
              goto LABEL_238;
            }
            if ((_DWORD)v301)
            {
              *(_QWORD *)__dst = v148;
            }
            else
            {
              if (HIDWORD(v301))
              {
                v149 = 1;
LABEL_232:
                memcpy(__dst, (const void *)__src.n128_u64[0], 8 * v149);
                goto LABEL_236;
              }
              LODWORD(v301) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v302, 1uLL, 8);
              v149 = __src.n128_u32[2];
              if (__src.n128_u32[2])
                goto LABEL_232;
            }
LABEL_236:
            LODWORD(v301) = 1;
            v303 = v326;
            if ((_QWORD *)__src.n128_u64[0] != v325)
              free((void *)__src.n128_u64[0]);
LABEL_238:
            v145 += 32;
          }
          v151 = __nel;
          v152 = (char *)__base;
          if (__nel >= 2)
          {
            qsort(__base, __nel, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB9084);
            v152 = (char *)__base;
            v151 = __nel;
          }
          __src.n128_u64[0] = (unint64_t)v325;
          __src.n128_u64[1] = 0x300000000;
          if (v151)
          {
            v153 = 0;
            v154 = 0;
            v155 = &v152[24 * v151];
            while (1)
            {
              v156 = *((_QWORD *)v152 + 1);
              if (v156)
              {
                if (!v153)
                  LODWORD(v326) = *(_DWORD *)v152;
                if (v153 >= __src.n128_u32[3])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v325, v153 + 1, 8);
                  v153 = __src.n128_u32[2];
                }
                *(_QWORD *)(__src.n128_u64[0] + 8 * v153) = v156;
                v153 = ++__src.n128_u32[2];
                v327 = v152[16];
                ++v154;
                goto LABEL_264;
              }
              if (--v154)
                goto LABEL_264;
              HIDWORD(v326) = *(_DWORD *)v152;
              v157 = v306;
              v158 = v305;
              if (v306 < HIDWORD(v306))
              {
                p_src = &__src;
                v160 = &__src.n128_u64[1];
                goto LABEL_255;
              }
              v167 = v305 <= &__src && (char *)v305 + 56 * v306 > (char *)&__src;
              if (v167)
                v168 = 0x6DB6DB6DB6DB6DB7 * (((char *)&__src - (_BYTE *)v305) >> 3);
              else
                v168 = -1;
              *(_QWORD *)v299 = 0;
              v169 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v305, v306 + 1, 56, (unint64_t *)v299);
              v170 = v169;
              v171 = (char *)v305;
              if (!(_DWORD)v306)
              {
                v184 = v169;
                goto LABEL_300;
              }
              v233 = v167;
              v234 = v168;
              v172 = 0;
              v173 = 56 * v306;
              v259 = (char *)v305;
              do
              {
                v174 = (uint64_t)&v170[v172];
                v175 = &v171[v172];
                v176 = &v170[v172 + 16];
                *(_QWORD *)v174 = v176;
                *(_QWORD *)(v174 + 8) = 0x300000000;
                if (v171 != v170)
                {
                  v177 = *((unsigned int *)v175 + 2);
                  if (*((_DWORD *)v175 + 2))
                  {
                    v178 = &v171[v172];
                    v180 = (uint64_t)&v171[v172 + 16];
                    v179 = *(const void **)&v171[v172];
                    if ((const void *)v180 == v179)
                    {
                      if (v177 < 4)
                      {
                        v181 = (uint64_t)&v170[v172];
                        v182 = *((_DWORD *)v175 + 2);
                        v183 = v182;
                        goto LABEL_284;
                      }
                      v181 = (uint64_t)&v170[v172];
                      v182 = *((_DWORD *)v175 + 2);
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v174, (uint64_t)&v170[v172 + 16], v177, 8);
                      v183 = *((unsigned int *)v175 + 2);
                      if ((_DWORD)v183)
                      {
                        v179 = *(const void **)v175;
                        v176 = *(char **)v181;
LABEL_284:
                        memcpy(v176, v179, 8 * v183);
                      }
                      v174 = v181;
                      *(_DWORD *)(v181 + 8) = v182;
                      v171 = v259;
                    }
                    else
                    {
                      *(_QWORD *)v174 = v179;
                      *(_DWORD *)(v174 + 8) = v177;
                      *(_DWORD *)(v174 + 12) = *((_DWORD *)v178 + 3);
                      *(_QWORD *)v178 = v180;
                      *((_DWORD *)v178 + 3) = 0;
                    }
                    *((_DWORD *)v175 + 2) = 0;
                  }
                }
                *(_QWORD *)(v174 + 40) = *((_QWORD *)v175 + 5);
                *(_BYTE *)(v174 + 48) = v175[48];
                v172 += 56;
              }
              while (v173 != v172);
              v184 = v170;
              v171 = (char *)v305;
              if ((_DWORD)v306)
              {
                v185 = 56 * v306;
                v168 = v234;
                v167 = v233;
                do
                {
                  v186 = *(char **)&v171[v185 - 56];
                  if (&v171[v185 - 40] != v186)
                  {
                    v187 = v171;
                    free(v186);
                    v171 = v187;
                  }
                  v185 -= 56;
                }
                while (v185);
                v171 = (char *)v305;
              }
              else
              {
                v168 = v234;
                v167 = v233;
              }
LABEL_300:
              v188 = *(_DWORD *)v299;
              if (v171 != v307)
                free(v171);
              v305 = v184;
              HIDWORD(v306) = v188;
              v158 = v184;
              v189 = &v184[56 * v168];
              if (v167)
                p_src = (__n128 *)&v184[56 * v168];
              else
                p_src = &__src;
              v190 = (unint64_t *)(v189 + 8);
              if (v167)
                v160 = v190;
              else
                v160 = &__src.n128_u64[1];
              v157 = v306;
LABEL_255:
              v161 = (__n128 *)&v158[56 * v157];
              v162 = v161 + 1;
              v161->n128_u64[0] = (unint64_t)v161[1].n128_u64;
              v161->n128_u64[1] = 0x300000000;
              v163 = *(unsigned int *)v160;
              if (v161 != p_src && v163 != 0)
              {
                if (v163 < 4)
                {
                  v165 = *(unsigned int *)v160;
                  goto LABEL_261;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158[56 * v157], (uint64_t)&v161[1], *(unsigned int *)v160, 8);
                v165 = *(unsigned int *)v160;
                if ((_DWORD)v165)
                {
                  v162 = (__n128 *)v161->n128_u64[0];
LABEL_261:
                  memcpy(v162, (const void *)p_src->n128_u64[0], 8 * v165);
                }
                v161->n128_u32[2] = v163;
              }
              v153 = 0;
              v154 = 0;
              v161[2].n128_u64[1] = p_src[2].n128_u64[1];
              v158[56 * v157 + 48] = p_src[3].n128_u8[0];
              LODWORD(v306) = v306 + 1;
              __src.n128_u32[2] = 0;
LABEL_264:
              v152 += 24;
              if (v152 == v155)
              {
                v100 = v264;
                if ((_QWORD *)__src.n128_u64[0] != v325)
                  free((void *)__src.n128_u64[0]);
                break;
              }
            }
          }
LABEL_311:
          if (__base != v330)
            free(__base);
          if ((_DWORD)v306)
          {
            v191 = (unsigned int *)v305;
            v260 = (unsigned int *)((char *)v305 + 56 * v306);
            while (v247)
            {
              v192 = *((unsigned __int8 *)v191 + 48);
              v193 = *((_BYTE *)v191 + 48) != 0;
              v194 = 1;
              if ((sub_1C4AB70F4((uint64_t)v275, v191, 1, v100, (uint64_t)v294) & 1) != 0)
                goto LABEL_321;
              if (!v192)
              {
                v196 = v290;
LABEL_323:
                v195 = sub_1C4AB7E08((uint64_t)v272, (uint64_t)v191, 1, v100, (uint64_t)v196);
                v194 = 0;
                v193 = 0;
                goto LABEL_324;
              }
              v193 = 1;
              v195 = sub_1C4AB7E08((uint64_t)v267, (uint64_t)v191, 1, v100, (uint64_t)v286);
              v194 = 0;
LABEL_324:
              v197 = atomic_load((unsigned __int8 *)&qword_1ED7EDDF0);
              if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDDF0))
              {
                byte_1ED7EDDAA = 0;
                __cxa_guard_release(&qword_1ED7EDDF0);
              }
              if (byte_1ED7EDDAA)
              {
                v198 = v191[2];
                if ((_DWORD)v198)
                {
                  v199 = *(_QWORD *)v191;
                  v200 = *(_QWORD *)v191 + 8 * v198;
                  v201 = 0x4000;
                  if (v193)
                    v201 = 49152;
                  if (v194)
                    v201 = 0x8000;
                  if (v195)
                    v202 = v201;
                  else
                    v202 = 0;
                  while (1)
                  {
                    v203 = *(_QWORD *)(*(_QWORD *)v199 + 8);
                    v204 = *(_QWORD *)(v203 + 32);
                    v205 = *(_QWORD *)v199 - v204;
                    v206 = v205 >> 5;
                    if (llvm::MachineInstr::getNumExplicitOperands(v203) <= (v205 >> 5))
                      break;
                    v207 = *(unsigned __int16 **)(v203 + 16);
                    if ((word_1C6AA47DC[dword_1C6A9B6CC[*v207] + (unsigned __int16)v206] & 0xFFFB) == 0x3A)
                    {
                      v209 = v206 + 2;
                    }
                    else
                    {
                      if ((*(_DWORD *)(v204 + (v205 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
                      {
                        v210 = *((unsigned __int8 *)v207 + 4);
                        if ((v207[4] & 2) == 0 || (v212 = *(_DWORD *)(v203 + 40), v212 == v210))
                        {
                          v211 = v210;
                        }
                        else
                        {
                          v213 = v212 - 1;
                          v211 = v210;
                          do
                          {
                            v214 = *(_DWORD *)(v204 + 32 * v210);
                            if ((v214 & 0x10000FF) != 0x1000000)
                              break;
                            v211 += (v214 & 0x2000000) == 0;
                            if (v213 == v210)
                              break;
                            ++v210;
                          }
                          while ((v214 & 0x2000000) == 0);
                        }
                        v209 = v211 + v206;
                        goto LABEL_346;
                      }
                      if (*(_DWORD *)(v204 + (v205 & 0x1FFFFFFFE0)))
                        v208 = *(_DWORD *)(v204 + (v205 & 0x1FFFFFFFE0)) == 7;
                      else
                        v208 = 1;
                      if (!v208)
                        break;
                      v209 = v206 + 1;
                    }
LABEL_346:
                    *(_QWORD *)(v204 + 32 * v209 + 16) |= v202;
                    v199 += 8;
                    if (v199 == v200)
                      goto LABEL_356;
                  }
                  v209 = -1;
                  goto LABEL_346;
                }
              }
LABEL_356:
              v191 += 14;
              v100 = v264;
              if (v191 == v260)
                goto LABEL_360;
            }
            v194 = 1;
            v196 = v294;
            if ((sub_1C4AB70F4((uint64_t)v275, v191, 1, v100, (uint64_t)v294) & 1) == 0)
              goto LABEL_323;
            v193 = 0;
LABEL_321:
            v195 = 1;
            goto LABEL_324;
          }
LABEL_360:
          v103 = &qword_1ED7ED000;
          if (v304)
          {
            sub_1C4AB70F4((uint64_t)v275, (unsigned int *)&__dst, 0, v100, (uint64_t)v294);
            if (v304)
            {
              if (__dst != v302)
                free(__dst);
            }
          }
          v215 = (char *)v305;
          if ((_DWORD)v306)
          {
            v216 = 56 * v306;
            do
            {
              v217 = *(char **)&v215[v216 - 56];
              if (&v215[v216 - 40] != v217)
                free(v217);
              v216 -= 56;
            }
            while (v216);
            v215 = (char *)v305;
          }
          if (v215 != v307)
            free(v215);
          v107 = v252;
          v108 = v249;
          v104 = v246;
          if (!v105)
          {
LABEL_375:
            while ((*(_WORD *)(v105 + 44) & 8) != 0)
              v105 = *(_QWORD *)(v105 + 8);
            goto LABEL_376;
          }
LABEL_161:
          if ((*(_BYTE *)v105 & 4) == 0)
            goto LABEL_375;
LABEL_376:
          v105 = *(_QWORD *)(v105 + 8);
          v102 = v108;
          v101 = v107;
          if (v105 == v104)
            goto LABEL_389;
        }
      }
    }
    v305 = 0;
    v242 = v67;
    v69 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v67, 0, 40, (unint64_t *)&v305);
    v70 = &v69[40 * v284];
    *(_DWORD *)v70 = v63;
    *((_DWORD *)v70 + 8) = 0;
    *((_QWORD *)v70 + 1) = v308;
    *((_QWORD *)v70 + 2) = v70 + 32;
    *((_QWORD *)v70 + 3) = 0;
    v71 = v283;
    if (!(_DWORD)v284)
    {
      v96 = 0;
LABEL_150:
      sub_1C4AB8BC0((uint64_t)v71, (uint64_t)v71 + 40 * v96);
      v97 = (int)v305;
      if (v283 != &v285)
        free(v283);
      v283 = v69;
      v65 = v284 + 1;
      HIDWORD(v284) = v97;
      LODWORD(v284) = v284 + 1;
      v67 = v242;
      goto LABEL_118;
    }
    v72 = (char *)v283 + 40 * v284;
    v73 = v69;
    v74 = (char *)v283;
    v244 = v69;
    v254 = v72;
    while (1)
    {
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *((_QWORD *)v73 + 2) = v73 + 32;
      *((_QWORD *)v73 + 3) = 0;
      if (v73 == v74)
        goto LABEL_147;
      v75 = *((unsigned int *)v74 + 6);
      if (!(_DWORD)v75)
        goto LABEL_147;
      v76 = (char *)*((_QWORD *)v74 + 2);
      if (v76 == v74 + 32)
        break;
      v77 = *((_DWORD *)v74 + 7);
      *((_QWORD *)v73 + 2) = v76;
      *((_DWORD *)v73 + 6) = v75;
      *((_DWORD *)v73 + 7) = v77;
      v78 = v73;
      *((_QWORD *)v74 + 2) = v74 + 32;
      *((_DWORD *)v74 + 7) = 0;
LABEL_146:
      *((_DWORD *)v74 + 6) = 0;
      v72 = v254;
      v73 = v78;
LABEL_147:
      *((_DWORD *)v73 + 8) = *((_DWORD *)v74 + 8);
      v74 += 40;
      v73 += 40;
      if (v74 == v72)
      {
        v71 = v283;
        v96 = v284;
        goto LABEL_150;
      }
    }
    v251 = *((_DWORD *)v74 + 6);
    sub_1C4AB8C48((uint64_t)(v73 + 16), v75);
    v79 = *((_QWORD *)v74 + 2);
    v80 = *((unsigned int *)v74 + 6);
    if (!(_DWORD)v80)
    {
LABEL_141:
      v78 = v73;
      *((_DWORD *)v73 + 6) = v251;
      v93 = *((unsigned int *)v74 + 6);
      if ((_DWORD)v93)
      {
        v94 = 56 * v93;
        do
        {
          v95 = *(void **)(v79 + v94 - 56);
          if ((void *)(v79 + v94 - 40) != v95)
            free(v95);
          v94 -= 56;
        }
        while (v94);
      }
      goto LABEL_146;
    }
    v245 = v73;
    v248 = v74;
    v81 = 0;
    v82 = *((_QWORD *)v73 + 2);
    v83 = 56 * v80;
    v258 = 56 * v80;
    v263 = v82;
    while (1)
    {
      v84 = v82 + v81;
      v85 = v79 + v81;
      v86 = (void *)(v82 + v81 + 16);
      *(_QWORD *)v84 = v86;
      *(_QWORD *)(v84 + 8) = 0x300000000;
      if (v79 == v82)
        goto LABEL_136;
      v87 = *(unsigned int *)(v85 + 8);
      if (!*(_DWORD *)(v85 + 8))
        goto LABEL_136;
      v88 = v79 + v81;
      v90 = v79 + v81 + 16;
      v89 = *(const void **)(v79 + v81);
      if ((const void *)v90 != v89)
      {
        *(_QWORD *)v84 = v89;
        *(_DWORD *)(v84 + 8) = v87;
        *(_DWORD *)(v84 + 12) = *(_DWORD *)(v88 + 12);
        *(_QWORD *)v88 = v90;
        *(_DWORD *)(v88 + 12) = 0;
        goto LABEL_135;
      }
      if (v87 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v82 + v81, v82 + v81 + 16, *(unsigned int *)(v85 + 8), 8);
        v91 = *(unsigned int *)(v85 + 8);
        if (!(_DWORD)v91)
          goto LABEL_134;
        v89 = *(const void **)v85;
        v86 = *(void **)v84;
      }
      else
      {
        v91 = *(unsigned int *)(v85 + 8);
      }
      memcpy(v86, v89, 8 * v91);
LABEL_134:
      *(_DWORD *)(v84 + 8) = v87;
      v83 = v258;
      v82 = v263;
LABEL_135:
      *(_DWORD *)(v85 + 8) = 0;
LABEL_136:
      *(_QWORD *)(v84 + 40) = *(_QWORD *)(v85 + 40);
      v92 = *(_DWORD *)(v85 + 48);
      *(_BYTE *)(v84 + 52) = *(_BYTE *)(v85 + 52);
      *(_DWORD *)(v84 + 48) = v92;
      v81 += 56;
      if (v83 == v81)
      {
        v74 = v248;
        v79 = *((_QWORD *)v248 + 2);
        v69 = v244;
        v73 = v245;
        goto LABEL_141;
      }
    }
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 328);
  v261 = a2 + 320;
  if (v6 != a2 + 320)
  {
    v7 = (_QWORD *)(v5 + 8);
    do
    {
      for (j = *(_QWORD *)(v6 + 56); j != v6 + 48; j = *(_QWORD *)(j + 8))
      {
        v9 = *(unsigned __int16 **)(j + 16);
        if ((*((_QWORD *)v9 + 2) & 0x400000000) != 0)
        {
          v10 = *v9;
          v11 = (v10 - 9) > 0x3C || ((1 << (v10 - 9)) & 0x1000000000000605) == 0;
          v12 = !v11 || v10 == 0;
          if (v12 || *((_QWORD *)v9 + 1) & 0x10 | *((_QWORD *)v9 + 2) & 1)
          {
            v13 = *(unsigned int *)(j + 40);
            if ((_DWORD)v13)
            {
              v14 = 0;
              while (2)
              {
                if (sub_1C4AD4FB8(j, v14, v7) - 3 < 0xFFFFFFFE
                  || (sub_1C4AB895C((llvm::MachineInstr *)j, v14) & 1) != 0)
                {
                  goto LABEL_30;
                }
                if (v14 >= llvm::MachineInstr::getNumExplicitOperands(j))
                {
LABEL_40:
                  v17 = -1;
                }
                else
                {
                  v15 = *(unsigned __int16 **)(j + 16);
                  if ((word_1C6AA47DC[dword_1C6A9B6CC[*v15] + (unsigned __int16)v14] & 0xFFFB) == 0x3A)
                  {
                    v17 = v14 + 2;
                  }
                  else
                  {
                    v16 = *(_QWORD *)(j + 32);
                    if ((*(_DWORD *)(v16 + 32 * v14) & 0x10000FF) == 0x1000000)
                    {
                      v18 = *((unsigned __int8 *)v15 + 4);
                      if ((v15[4] & 2) == 0 || (v21 = *(_DWORD *)(j + 40), v21 == v18))
                      {
                        v19 = v18;
                      }
                      else
                      {
                        v22 = v21 - 1;
                        v19 = v18;
                        do
                        {
                          v23 = *(_DWORD *)(v16 + 32 * v18);
                          if ((v23 & 0x10000FF) != 0x1000000)
                            break;
                          v19 += (v23 & 0x2000000) == 0;
                          if (v22 == v18)
                            break;
                          ++v18;
                        }
                        while ((v23 & 0x2000000) == 0);
                      }
                      v17 = v19 + v14;
                    }
                    else
                    {
                      if (*(_DWORD *)(v16 + 32 * v14)
                        && *(_DWORD *)(v16 + 32 * v14) != 7)
                      {
                        goto LABEL_40;
                      }
                      v17 = v14 + 1;
                    }
                  }
                }
                v20 = *(_QWORD *)(j + 32) + 32 * v17;
                *(_QWORD *)(v20 + 16) |= 0x20uLL;
LABEL_30:
                if (++v14 == v13)
                  break;
                continue;
              }
            }
          }
        }
        if ((*(_BYTE *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v261);
  }
  return v235 != 0;
}

uint64_t sub_1C4AB6B14(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  void **v6;
  void (**v7)(void **);
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  unint64_t v20;
  void *__src;
  uint64_t v22;
  uint64_t v23;
  void **p_src;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  __src = &off_1E81316D0;
  v22 = a2;
  p_src = &__src;
  v5 = sub_1C4C0B384(&__src);
  v6 = p_src;
  if (p_src == &__src)
  {
    v7 = (void (**)(void **))((char *)__src + 32);
    v6 = &__src;
  }
  else
  {
    if (!p_src)
      goto LABEL_4;
    v7 = (void (**)(void **))((char *)*p_src + 40);
  }
  (*v7)(v6);
LABEL_4:
  v8 = dword_1C677EA14[v5];
  v23 = 0;
  v20 = 0;
  __src = &v23;
  v22 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 8, v8, 24, &v20);
  v10 = (uint64_t)v9;
  v11 = v8;
  do
  {
    *(_QWORD *)v10 = v10 + 16;
    *(_QWORD *)(v10 + 8) = 0;
    if ((void **)v10 != &__src)
    {
      v12 = v22;
      if ((_DWORD)v22)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v22, 8);
        if ((_DWORD)v22)
          memcpy(*(void **)v10, __src, 8 * v22);
        *(_DWORD *)(v10 + 8) = v12;
      }
    }
    *(_QWORD *)(v10 + 16) = v23;
    v10 += 24;
    --v11;
  }
  while (v11);
  v13 = *(char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
  {
    v15 = 24 * v14;
    do
    {
      v16 = *(char **)&v13[v15 - 24];
      if (&v13[v15 - 8] != v16)
        free(v16);
      v15 -= 24;
    }
    while (v15);
    v13 = *(char **)(a1 + 8);
  }
  v17 = v20;
  if (v13 != (char *)(a1 + 24))
    free(v13);
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v17;
  if (__src != &v23)
    free(__src);
  *(_DWORD *)(a1 + 24) = a3;
  return a1;
}

unsigned int *sub_1C4AB6D0C(unsigned int *result, void *__src, uint64_t a3)
{
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = 8 * a3;
  v7 = result[2];
  v8 = v7 + ((8 * a3) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    LODWORD(v7) = v5[2];
  }
  if (a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_1C4AB6D88(uint64_t a1, __int128 *a2, char a3, int a4, int a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  void *v9;
  void **v10;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  int v46;
  void **v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a6;
  v9 = (void *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  v10 = (void **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  if (a5)
  {
    v13 = 0;
    v14 = 0;
    while (v13 < *(_DWORD *)(a1 + 68))
    {
      v15 = *(_QWORD *)(a1 + 56) + 24 * v13;
      *(_DWORD *)v15 = a4;
      *(_QWORD *)(v15 + 8) = v15 + 24;
      *(_QWORD *)(v15 + 16) = 0;
      v13 = *(_DWORD *)(a1 + 64) + 1;
LABEL_5:
      *(_DWORD *)(a1 + 64) = v13;
      if (++v14 == a5)
        return a1;
    }
    v58 = 0;
    v16 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v10, 0, 24, &v58);
    v17 = v16;
    v18 = &v16[24 * *(unsigned int *)(a1 + 64)];
    *(_DWORD *)v18 = a4;
    *((_QWORD *)v18 + 1) = v18 + 24;
    *((_QWORD *)v18 + 2) = 0;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_DWORD *)(a1 + 64);
    if (!v20)
    {
      v45 = 0;
LABEL_37:
      sub_1C4AB8DD8((char *)v19, (char *)(v19 + 24 * v45));
      v46 = v58;
      if (*v10 != v9)
        free(*v10);
      *(_QWORD *)(a1 + 56) = v17;
      v13 = *(_DWORD *)(a1 + 64) + 1;
      *(_DWORD *)(a1 + 68) = v46;
      goto LABEL_5;
    }
    v48 = v10;
    v49 = v9;
    v21 = v19 + 24 * v20;
    v22 = v16;
    v50 = v16;
    v54 = v21;
    while (1)
    {
      *(_DWORD *)v22 = *(_DWORD *)v19;
      v23 = v22 + 24;
      *((_QWORD *)v22 + 1) = v22 + 24;
      v24 = (uint64_t *)(v22 + 8);
      *((_QWORD *)v22 + 2) = 0;
      if (v22 == (char *)v19)
        goto LABEL_34;
      v25 = *(unsigned int *)(v19 + 16);
      if (!(_DWORD)v25)
        goto LABEL_34;
      v55 = v22 + 24;
      v26 = *(_QWORD *)(v19 + 8);
      if (v26 == v19 + 24)
        break;
      v27 = *(_DWORD *)(v19 + 20);
      *((_QWORD *)v22 + 1) = v26;
      *((_DWORD *)v22 + 4) = v25;
      *((_DWORD *)v22 + 5) = v27;
      *(_QWORD *)(v19 + 8) = v19 + 24;
      *(_DWORD *)(v19 + 20) = 0;
LABEL_33:
      *(_DWORD *)(v19 + 16) = 0;
      v21 = v54;
      v23 = v55;
LABEL_34:
      v19 += 24;
      v22 = v23;
      if (v19 == v21)
      {
        v19 = *(_QWORD *)(a1 + 56);
        v45 = *(_DWORD *)(a1 + 64);
        v10 = v48;
        v9 = v49;
        goto LABEL_37;
      }
    }
    v53 = *(_DWORD *)(v19 + 16);
    sub_1C4AB8E5C((uint64_t)(v22 + 8), v25);
    v28 = *(_QWORD *)(v19 + 8);
    v29 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v29)
    {
LABEL_28:
      *((_DWORD *)v22 + 4) = v53;
      v42 = *(unsigned int *)(v19 + 16);
      if ((_DWORD)v42)
      {
        v43 = 48 * v42;
        do
        {
          v44 = *(void **)(v28 + v43 - 48);
          if ((void *)(v28 + v43 - 32) != v44)
            free(v44);
          v43 -= 48;
        }
        while (v43);
      }
      goto LABEL_33;
    }
    v51 = v22;
    v52 = v19;
    v30 = 0;
    v31 = *v24;
    v32 = 48 * v29;
    v56 = 48 * v29;
    v57 = *v24;
    while (1)
    {
      v33 = v31 + v30;
      v34 = v28 + v30;
      v35 = (void *)(v31 + v30 + 16);
      *(_QWORD *)v33 = v35;
      *(_QWORD *)(v33 + 8) = 0x300000000;
      if (v28 == v31)
        goto LABEL_23;
      v36 = *(unsigned int *)(v34 + 8);
      if (!*(_DWORD *)(v34 + 8))
        goto LABEL_23;
      v37 = v28 + v30;
      v39 = v28 + v30 + 16;
      v38 = *(const void **)(v28 + v30);
      if ((const void *)v39 != v38)
      {
        *(_QWORD *)v33 = v38;
        v41 = *(_DWORD *)(v37 + 12);
        *(_DWORD *)(v33 + 8) = v36;
        *(_DWORD *)(v33 + 12) = v41;
        *(_QWORD *)v37 = v39;
        *(_DWORD *)(v37 + 12) = 0;
        goto LABEL_22;
      }
      if (v36 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + v30, v31 + v30 + 16, *(unsigned int *)(v34 + 8), 8);
        v40 = *(unsigned int *)(v34 + 8);
        if (!(_DWORD)v40)
          goto LABEL_21;
        v38 = *(const void **)v34;
        v35 = *(void **)v33;
      }
      else
      {
        v40 = *(unsigned int *)(v34 + 8);
      }
      memcpy(v35, v38, 8 * v40);
LABEL_21:
      *(_DWORD *)(v33 + 8) = v36;
      v32 = v56;
      v31 = v57;
LABEL_22:
      *(_DWORD *)(v34 + 8) = 0;
LABEL_23:
      *(_QWORD *)(v33 + 40) = *(_QWORD *)(v34 + 40);
      v30 += 48;
      if (v32 == v30)
      {
        v22 = v51;
        v19 = v52;
        v28 = *(_QWORD *)(v52 + 8);
        v17 = v50;
        goto LABEL_28;
      }
    }
  }
  return a1;
}

uint64_t sub_1C4AB7088(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;

  if (a2)
  {
    v2 = result + 40 * a2;
    do
    {
      v3 = *(unsigned int *)(result + 24);
      if ((_DWORD)v3)
      {
        v4 = *(_DWORD *)(result + 32);
        v5 = 56 * v3;
        v6 = (int *)(*(_QWORD *)(result + 16) + 48);
        do
        {
          v7 = *v6;
          if (*v6 <= 1)
            v8 = 1;
          else
            v8 = *v6;
          v9 = v7 == 0;
          v10 = v7 > 0;
          if (v9)
            v11 = -1;
          else
            v11 = 0;
          v12 = v8 != 0;
          v13 = v8 - 1;
          if (v13 != 0 && v12)
            v10 = v11;
          v4 += v10;
          *v6 = v13;
          v6 += 14;
          v5 -= 56;
        }
        while (v5);
        *(_DWORD *)(result + 32) = v4;
      }
      result += 40;
    }
    while (result != v2);
  }
  return result;
}

uint64_t sub_1C4AB70F4(uint64_t a1, unsigned int *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unsigned __int16 *v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  _DWORD *v52;
  int v53;
  BOOL v54;
  _BYTE *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  unsigned int v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned __int16 *v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  uint64_t *v110;
  int v111;
  int v112;
  BOOL v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned __int16 *v127;
  BOOL v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  uint64_t *v135;
  int v136;
  int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int *v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  uint64_t v157;
  int v160;
  uint64_t v161;
  int v162;
  char v163;
  unint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t **v171;
  uint64_t *v172;
  int v173;
  int v174;
  void *v175;
  uint64_t v176;
  _BYTE v177[16];
  void *v178;
  uint64_t v179;
  _BYTE v180[16];
  unsigned int *v181;
  uint64_t v182;
  _BYTE v183[16];
  void *v184[2];
  _QWORD v185[3];

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v185[1] = *MEMORY[0x1E0C80C00];
  if (!**(_BYTE **)a1)
    return sub_1C4AB7E08(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(v9 + 48);
  v11 = a2[10];
  v161 = v9;
  v166 = v10;
  v12 = 0;
  if (v11 < a2[11])
  {
    do
    {
      v169 = *(_QWORD *)(v9 + 40);
      v170 = v11 % v10;
      v13 = v169 + 40 * (v11 % v10);
      v172 = (uint64_t *)(v13 + 16);
      v167 = v13;
      v16 = *(_DWORD *)(v13 + 24);
      v15 = (unsigned int *)(v13 + 24);
      v14 = v16;
      if (v16)
      {
        v17 = *v172;
        v18 = *v172 + 56 * v14;
        do
        {
          v19 = v17;
          while (v11 != *(_DWORD *)(v19 + 40))
          {
            v19 += 56;
            if (v19 == v18)
              goto LABEL_15;
          }
          while (v17 != v18)
          {
            if (v11 == *(_DWORD *)(v17 + 40))
            {
              v18 = v17;
              break;
            }
            v17 += 56;
          }
          if (*(int *)(v18 + 48) < 5)
            break;
          sub_1C4AB7088(*(_QWORD *)(v9 + 40), *(_DWORD *)(v9 + 48));
          v17 = *v172;
          v18 = *v172 + 56 * *v15;
        }
        while (*v15);
      }
LABEL_15:
      v20 = sub_1C4AB90D0(*(_QWORD *)(v5 + 8), v11, v6);
      v21 = *v172;
      v168 = v15;
      v22 = *v15;
      v23 = *v172;
      if ((_DWORD)v22)
      {
        v24 = 0;
        while (1)
        {
          v23 = v21 + v24;
          if (v11 == *(_DWORD *)(v21 + v24 + 40))
            break;
          v24 += 56;
          if (56 * v22 == v24)
            goto LABEL_47;
        }
      }
      if (v23 == v21 + 56 * v22)
      {
LABEL_47:
        v42 = 0;
        if (v7)
          goto LABEL_60;
      }
      else
      {
        v162 = v12;
        v25 = *(unsigned int *)(v23 + 8);
        v160 = v20;
        v26 = 0;
        if ((_DWORD)v25)
        {
          v27 = *(_QWORD *)v23;
          v28 = *(_QWORD *)v23 + 8 * v25;
          while (1)
          {
            v29 = *(_QWORD *)(*(_QWORD *)v27 + 8);
            v30 = *(_QWORD *)(v29 + 32);
            v31 = *(_QWORD *)v27 - v30;
            v32 = v31 >> 5;
            v33 = sub_1C4AB895C((llvm::MachineInstr *)v29, v31 >> 5);
            if ((v33 & 1) == 0)
              break;
LABEL_37:
            v26 |= v33 ^ 1;
            v27 += 8;
            if (v27 == v28)
              goto LABEL_49;
          }
          if (llvm::MachineInstr::getNumExplicitOperands(v29) <= v32)
          {
LABEL_46:
            v36 = -1;
          }
          else
          {
            v34 = *(unsigned __int16 **)(v29 + 16);
            if ((word_1C6AA47DC[dword_1C6A9B6CC[*v34] + (unsigned __int16)v32] & 0xFFFB) == 0x3A)
            {
              v36 = v32 + 2;
            }
            else if ((*(_DWORD *)(v30 + (v31 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
            {
              v37 = *((unsigned __int8 *)v34 + 4);
              if ((v34[4] & 2) == 0 || (v39 = *(_DWORD *)(v29 + 40), v39 == v37))
              {
                v38 = v37;
              }
              else
              {
                v40 = v39 - 1;
                v38 = v37;
                do
                {
                  v41 = *(_DWORD *)(v30 + 32 * v37);
                  if ((v41 & 0x10000FF) != 0x1000000)
                    break;
                  v38 += (v41 & 0x2000000) == 0;
                  if (v40 == v37)
                    break;
                  ++v37;
                }
                while ((v41 & 0x2000000) == 0);
              }
              v36 = v38 + v32;
            }
            else
            {
              if (*(_DWORD *)(v30 + (v31 & 0x1FFFFFFFE0)))
                v35 = *(_DWORD *)(v30 + (v31 & 0x1FFFFFFFE0)) == 7;
              else
                v35 = 1;
              if (!v35)
                goto LABEL_46;
              v36 = v32 + 1;
            }
          }
          *(_QWORD *)(v30 + 32 * v36 + 16) |= 0x20uLL;
          goto LABEL_37;
        }
LABEL_49:
        v43 = *(_DWORD *)(v23 + 48);
        v8 = a2;
        sub_1C4AB9130(v167, a2, v11, v160);
        v21 = *v172;
        v22 = *v168;
        v44 = *v172;
        v5 = a5;
        v6 = a4;
        v9 = v161;
        v10 = v166;
        v7 = a3;
        if ((_DWORD)v22)
        {
          v45 = 56 * v22;
          v44 = *v172;
          while (v11 != *(_DWORD *)(v44 + 40))
          {
            v44 += 56;
            v45 -= 56;
            if (!v45)
            {
              v44 = v21 + 56 * v22;
              break;
            }
          }
        }
        v46 = *(_DWORD *)(v44 + 48);
        v35 = v46 == 0;
        v47 = v46 > 0;
        if (v35)
          v48 = -1;
        else
          v48 = 0;
        if (v43 > 0)
          v47 = v48;
        *(_DWORD *)(v169 + 40 * v170 + 32) += v47;
        *(_DWORD *)(v44 + 48) = v43;
        *(_BYTE *)(v44 + 52) = v26 & 1;
        v42 = 1;
        v12 = v162;
        if (a3)
        {
LABEL_60:
          v49 = *(_QWORD *)(v5 + 8) + 24 * v11;
          v52 = *(_DWORD **)(v49 + 16);
          v51 = (_QWORD *)(v49 + 16);
          v50 = v52;
          if (*v52 != v6)
          {
            do
            {
              v53 = v50[2];
              v50 += 2;
            }
            while (v53 != v6);
            *v51 = v50;
          }
          if (*((_BYTE *)v50 + 5))
            v54 = v22 == 0;
          else
            v54 = 1;
          if (!v54)
          {
            v55 = (_BYTE *)(v21 + 52);
            v56 = 56 * v22;
            while (v11 != *((_DWORD *)v55 - 3))
            {
              v55 += 56;
              v56 -= 56;
              if (!v56)
                goto LABEL_72;
            }
            *(_DWORD *)(v169 + 40 * v170 + 32) = (__PAIR64__(*(_DWORD *)(v169 + 40 * v170 + 32), *((_DWORD *)v55 - 1))- 1) >> 32;
            *((_DWORD *)v55 - 1) = 2;
            *v55 = 0;
          }
        }
      }
LABEL_72:
      v12 |= v42;
      ++v11;
    }
    while (v11 < v8[11]);
  }
  if ((v7 & 1) == 0)
  {
    v163 = v12;
    v184[0] = v185;
    v184[1] = (void *)0x200000000;
    sub_1C4893E04((char *)v184, v10, 0);
    v181 = (unsigned int *)v183;
    v182 = 0x400000000;
    v178 = v180;
    v179 = 0x400000000;
    v175 = v177;
    v176 = 0x400000000;
    v57 = v8[10];
    v58 = v9;
    if (v57 < v8[11])
    {
      do
      {
        v59 = v57 % v10;
        v60 = *(_QWORD *)(v58 + 40) + 40 * v59;
        v61 = *(unsigned int *)(v60 + 24);
        if ((_DWORD)v61)
        {
          v62 = (int *)(*(_QWORD *)(v60 + 16) + 40);
          v63 = 56 * v61;
          while (1)
          {
            v64 = *v62;
            v62 += 14;
            if (v64 == v57)
              break;
            v63 -= 56;
            if (!v63)
              goto LABEL_79;
          }
          v66 = v179;
          if (v179 >= (unint64_t)HIDWORD(v179))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v178, (uint64_t)v180, v179 + 1, 4);
            v66 = v179;
          }
          *((_DWORD *)v178 + v66) = v57;
          LODWORD(v179) = v179 + 1;
        }
        else
        {
LABEL_79:
          v65 = v176;
          if (v176 >= (unint64_t)HIDWORD(v176))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, (uint64_t)v177, v176 + 1, 4);
            v65 = v176;
          }
          *((_DWORD *)v175 + v65) = v57;
          LODWORD(v176) = v176 + 1;
          ++*((_DWORD *)v184[0] + v59);
        }
        ++v57;
      }
      while (v57 < v8[11]);
      if ((_DWORD)v179)
      {
        v68 = (unsigned int *)v178;
        v69 = 4 * v179;
        do
        {
          v70 = *v68++;
          v71 = *(_QWORD *)(v58 + 40) + 40 * (v70 % v10);
          v72 = sub_1C4AB90D0(*(_QWORD *)(v5 + 8), v70, v6);
          sub_1C4AB9130(v71, v8, v70, v72);
          v69 -= 4;
        }
        while (v69);
      }
    }
    v73 = v58;
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v75 = *(_QWORD *)(v73 + 40);
        v76 = (unsigned int *)(v75 + 40 * i);
        v77 = *((unsigned int *)v184[0] + i);
        v78 = v76[8];
        v79 = *v76;
        v82 = v76[6];
        v81 = v76 + 6;
        v80 = v82;
        if ((unint64_t)v82 + v77 - v78 > v79)
        {
          do
          {
            sub_1C4AB7088(v75, *(_DWORD *)(v73 + 48));
            v75 = *(_QWORD *)(v73 + 40);
            v83 = (unsigned int *)(v75 + 40 * i);
            v77 = *((unsigned int *)v184[0] + i);
            v84 = v83[8];
            v79 = *v83;
            v85 = v83[6];
            v81 = v83 + 6;
            v80 = v85;
          }
          while ((unint64_t)v85 + v77 - v84 > v79);
        }
        if ((_DWORD)v77)
        {
          v86 = v79 - v80;
          v87 = v77 >= v86 ? v77 - v86 : 0;
          if (v86 < v77)
          {
            v88 = *(uint64_t **)(v75 + 40 * i + 16);
            v89 = v88;
            if (v80)
            {
              v90 = 0;
              while (1)
              {
                v89 = &v88[v90];
                if (!LODWORD(v88[v90 + 6]) && BYTE4(v88[v90 + 6]) == 0)
                  break;
                v90 += 7;
                if (7 * v80 == v90)
                  goto LABEL_144;
              }
            }
            v171 = (uint64_t **)(v75 + 40 * i + 16);
            v92 = &v88[7 * v80];
            if (v89 == v92)
            {
LABEL_144:
              v73 = v161;
            }
            else
            {
LABEL_109:
              v93 = *((_DWORD *)v89 + 10);
              v94 = v182;
              v173 = v87;
              if (v182 >= (unint64_t)HIDWORD(v182))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v181, (uint64_t)v183, v182 + 1, 4);
                v94 = v182;
              }
              v181[v94] = v93;
              LODWORD(v182) = v182 + 1;
              v95 = *((unsigned int *)v89 + 2);
              if ((_DWORD)v95)
              {
                v96 = *v89;
                v97 = *v89 + 8 * v95;
                while (1)
                {
                  v98 = *(_QWORD *)(*(_QWORD *)v96 + 8);
                  v99 = *(_QWORD *)(v98 + 32);
                  v100 = *(_QWORD *)v96 - v99;
                  v101 = v100 >> 5;
                  if (llvm::MachineInstr::getNumExplicitOperands(v98) <= (v100 >> 5))
                    break;
                  v102 = *(unsigned __int16 **)(v98 + 16);
                  if ((word_1C6AA47DC[dword_1C6A9B6CC[*v102] + (unsigned __int16)v101] & 0xFFFB) == 0x3A)
                  {
                    v104 = v101 + 2;
                  }
                  else
                  {
                    if ((*(_DWORD *)(v99 + (v100 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
                    {
                      v105 = *((unsigned __int8 *)v102 + 4);
                      if ((v102[4] & 2) == 0 || (v107 = *(_DWORD *)(v98 + 40), v107 == v105))
                      {
                        v106 = v105;
                      }
                      else
                      {
                        v108 = v107 - 1;
                        v106 = v105;
                        do
                        {
                          v109 = *(_DWORD *)(v99 + 32 * v105);
                          if ((v109 & 0x10000FF) != 0x1000000)
                            break;
                          v106 += (v109 & 0x2000000) == 0;
                          if (v108 == v105)
                            break;
                          ++v105;
                        }
                        while ((v109 & 0x2000000) == 0);
                      }
                      v104 = v106 + v101;
                      goto LABEL_125;
                    }
                    if (*(_DWORD *)(v99 + (v100 & 0x1FFFFFFFE0)))
                      v103 = *(_DWORD *)(v99 + (v100 & 0x1FFFFFFFE0)) == 7;
                    else
                      v103 = 1;
                    if (!v103)
                      break;
                    v104 = v101 + 1;
                  }
LABEL_125:
                  *(_QWORD *)(v99 + 32 * v104 + 16) &= ~0x20uLL;
                  v96 += 8;
                  if (v96 == v97)
                    goto LABEL_135;
                }
                v104 = -1;
                goto LABEL_125;
              }
LABEL_135:
              v87 = v173 - 1;
              v110 = v89 + 7;
              v5 = a5;
              v73 = v161;
              v10 = v166;
              while (v110 != v92)
              {
                v111 = *((_DWORD *)v110 + 12);
                v112 = *((unsigned __int8 *)v110 + 52);
                v110 += 7;
                if (v111)
                  v113 = 0;
                else
                  v113 = v112 == 0;
                if (v113)
                {
                  v89 = v110 - 7;
                  if (v173 != 1)
                    goto LABEL_109;
                  v73 = v161;
                  break;
                }
              }
              v88 = *v171;
              LODWORD(v80) = *v81;
            }
            v114 = v88;
            if ((_DWORD)v80)
            {
              v115 = 56 * v80;
              v114 = v88;
              while (*((_DWORD *)v114 + 12) || *((_BYTE *)v114 + 52) == 0)
              {
                v114 += 7;
                v115 -= 56;
                if (!v115)
                  goto LABEL_190;
              }
            }
            if (v87)
            {
              v117 = &v88[7 * v80];
              if (v114 != v117)
              {
LABEL_157:
                v118 = *((_DWORD *)v114 + 10);
                v119 = v182;
                v174 = v87;
                if (v182 >= (unint64_t)HIDWORD(v182))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v181, (uint64_t)v183, v182 + 1, 4);
                  v119 = v182;
                }
                v181[v119] = v118;
                LODWORD(v182) = v182 + 1;
                v120 = *((unsigned int *)v114 + 2);
                if ((_DWORD)v120)
                {
                  v121 = *v114;
                  v122 = *v114 + 8 * v120;
                  while (1)
                  {
                    v123 = *(_QWORD *)(*(_QWORD *)v121 + 8);
                    v124 = *(_QWORD *)(v123 + 32);
                    v125 = *(_QWORD *)v121 - v124;
                    v126 = v125 >> 5;
                    if (llvm::MachineInstr::getNumExplicitOperands(v123) <= (v125 >> 5))
                      break;
                    v127 = *(unsigned __int16 **)(v123 + 16);
                    if ((word_1C6AA47DC[dword_1C6A9B6CC[*v127] + (unsigned __int16)v126] & 0xFFFB) == 0x3A)
                    {
                      v129 = v126 + 2;
                    }
                    else
                    {
                      if ((*(_DWORD *)(v124 + (v125 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
                      {
                        v130 = *((unsigned __int8 *)v127 + 4);
                        if ((v127[4] & 2) == 0 || (v132 = *(_DWORD *)(v123 + 40), v132 == v130))
                        {
                          v131 = v130;
                        }
                        else
                        {
                          v133 = v132 - 1;
                          v131 = v130;
                          do
                          {
                            v134 = *(_DWORD *)(v124 + 32 * v130);
                            if ((v134 & 0x10000FF) != 0x1000000)
                              break;
                            v131 += (v134 & 0x2000000) == 0;
                            if (v133 == v130)
                              break;
                            ++v130;
                          }
                          while ((v134 & 0x2000000) == 0);
                        }
                        v129 = v131 + v126;
                        goto LABEL_173;
                      }
                      if (*(_DWORD *)(v124 + (v125 & 0x1FFFFFFFE0)))
                        v128 = *(_DWORD *)(v124 + (v125 & 0x1FFFFFFFE0)) == 7;
                      else
                        v128 = 1;
                      if (!v128)
                        break;
                      v129 = v126 + 1;
                    }
LABEL_173:
                    *(_QWORD *)(v124 + 32 * v129 + 16) &= ~0x20uLL;
                    v121 += 8;
                    if (v121 == v122)
                      goto LABEL_183;
                  }
                  v129 = -1;
                  goto LABEL_173;
                }
LABEL_183:
                v87 = v174 - 1;
                v135 = v114 + 7;
                v73 = v161;
                v10 = v166;
                while (v135 != v117)
                {
                  v136 = *((_DWORD *)v135 + 12);
                  v137 = *((unsigned __int8 *)v135 + 52);
                  v135 += 7;
                  if (v136)
                    v138 = 1;
                  else
                    v138 = v137 == 0;
                  if (!v138)
                  {
                    v114 = v135 - 7;
                    if (v174 != 1)
                      goto LABEL_157;
                    break;
                  }
                }
              }
            }
          }
        }
LABEL_190:
        v6 = a4;
        v8 = a2;
      }
    }
    v139 = v182;
    v140 = v181;
    if (v182 >= 2)
    {
      qsort(v181, v182, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB967C);
      v139 = v182;
      v140 = v181;
    }
    v141 = &v140[v139];
    v142 = v140;
    if (v139)
    {
      v142 = v140 - 1;
      v143 = 4 * v139 - 4;
      while (v143)
      {
        v144 = v142[1];
        v145 = v142[2];
        ++v142;
        v143 -= 4;
        if (v144 == v145)
          goto LABEL_197;
      }
    }
    else
    {
LABEL_197:
      if (v142 != v141)
      {
        v146 = v142 + 2;
        if (v142 + 2 != v141)
        {
          v147 = *v142;
          do
          {
            v148 = v147;
            v147 = *v146;
            if (v148 != *v146)
            {
              v142[1] = v147;
              ++v142;
            }
            ++v146;
          }
          while (v146 != v141);
        }
        v141 = v142 + 1;
      }
    }
    v149 = (unint64_t)((char *)v141 - (char *)v140) >> 2;
    LODWORD(v182) = v149;
    if ((_DWORD)v149)
    {
      v150 = *(_DWORD *)(v73 + 48);
      v151 = 4 * v149;
      do
      {
        v152 = *v140++;
        sub_1C4AB94A0(*(_QWORD *)(v73 + 40) + 40 * (v152 % v150), v152);
        v151 -= 4;
      }
      while (v151);
    }
    v153 = (unsigned int *)v175;
    if ((_DWORD)v176)
    {
      v154 = 4 * v176;
      do
      {
        v155 = *v153++;
        v10 = *(_QWORD *)(v73 + 40) + 40 * (v155 % v10);
        v156 = sub_1C4AB90D0(*(_QWORD *)(v5 + 8), v155, v6);
        v157 = v10;
        LODWORD(v10) = v166;
        sub_1C4AB91CC(v157, v8, v155, v156);
        v154 -= 4;
      }
      while (v154);
      v153 = (unsigned int *)v175;
    }
    LOBYTE(v12) = v163;
    if (v153 != (unsigned int *)v177)
      free(v153);
    if (v178 != v180)
      free(v178);
    if (v181 != (unsigned int *)v183)
      free(v181);
    if (v184[0] != v185)
      free(v184[0]);
  }
  return v12 & 1;
}

uint64_t sub_1C4AB7E08(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  _QWORD *v36;
  _DWORD *v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t i;
  _DWORD *v43;
  int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  int *v71;
  int *v72;
  unint64_t v73;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned __int16 *v90;
  BOOL v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  const void *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  unsigned int v131;
  int *v132;
  unint64_t v133;
  int v134;
  int v135;
  int *v136;
  int v137;
  int v138;
  uint64_t v139;
  char v140;
  int *v141;
  unsigned int v142;
  int v143;
  char v144;
  unint64_t v148;
  uint64_t *v150;
  unint64_t v151;
  int v152;
  void *__base;
  size_t __nel;
  _BYTE v155[32];
  void *v156;
  uint64_t v157;
  _BYTE v158[16];
  void *v159[2];
  _BYTE v160[24];
  void *v161[2];
  _QWORD v162[5];

  v5 = a4;
  v6 = a2;
  v162[3] = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a1 + 64);
  v8 = *(unsigned int *)(a2 + 40);
  v148 = v7;
  v9 = 0;
  if (v8 >= *(_DWORD *)(a2 + 44))
    goto LABEL_49;
  v140 = 0;
  v10 = 1;
  LODWORD(v150) = a3;
  do
  {
    v139 = v8;
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 56) + 24 * (v8 % v7);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = v11 + 8;
      v12 = v14;
      v15 = *(unsigned int *)(v13 + 8);
      if ((_DWORD)v15)
      {
        v16 = 48 * v15;
        v17 = v12;
        do
        {
          if (v8 == *(_DWORD *)(v17 + 40))
            goto LABEL_10;
          v17 += 48;
          v16 -= 48;
        }
        while (v16);
        v18 = 0;
      }
      else
      {
        v17 = v12;
LABEL_10:
        if (v17 != v12 + 48 * v15)
        {
          v143 = v9;
          v19 = *(unsigned int *)(v17 + 8);
          if (!(_DWORD)v19)
          {
LABEL_35:
            sub_1C4AB9698((uint64_t *)v13, v17);
            v18 = 1;
            v9 = v143;
            v5 = a4;
            v6 = a2;
            v7 = v148;
            a3 = (int)v150;
            goto LABEL_37;
          }
          v20 = *(_QWORD *)v17;
          v21 = *(_QWORD *)v17 + 8 * v19;
          while (2)
          {
            v22 = *(_QWORD *)(*(_QWORD *)v20 + 8);
            v23 = *(_QWORD *)(v22 + 32);
            v24 = *(_QWORD *)v20 - v23;
            v25 = v24 >> 5;
            if (llvm::MachineInstr::getNumExplicitOperands(v22) <= (v24 >> 5))
            {
LABEL_34:
              v28 = -1;
            }
            else
            {
              v26 = *(unsigned __int16 **)(v22 + 16);
              if ((word_1C6AA47DC[dword_1C6A9B6CC[*v26] + (unsigned __int16)v25] & 0xFFFB) == 0x3A)
              {
                v28 = v25 + 2;
              }
              else if ((*(_DWORD *)(v23 + (v24 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
              {
                v29 = *((unsigned __int8 *)v26 + 4);
                if ((v26[4] & 2) == 0 || (v31 = *(_DWORD *)(v22 + 40), v31 == v29))
                {
                  v30 = v29;
                }
                else
                {
                  v32 = v31 - 1;
                  v30 = v29;
                  do
                  {
                    v33 = *(_DWORD *)(v23 + 32 * v29);
                    if ((v33 & 0x10000FF) != 0x1000000)
                      break;
                    v30 += (v33 & 0x2000000) == 0;
                    if (v32 == v29)
                      break;
                    ++v29;
                  }
                  while ((v33 & 0x2000000) == 0);
                }
                v28 = v30 + v25;
              }
              else
              {
                if (*(_DWORD *)(v23 + (v24 & 0x1FFFFFFFE0)))
                  v27 = *(_DWORD *)(v23 + (v24 & 0x1FFFFFFFE0)) == 7;
                else
                  v27 = 1;
                if (!v27)
                  goto LABEL_34;
                v28 = v25 + 1;
              }
            }
            *(_QWORD *)(v23 + 32 * v28 + 16) |= 0x20uLL;
            v20 += 8;
            if (v20 == v21)
              goto LABEL_35;
            continue;
          }
        }
        v18 = 0;
        v5 = a4;
      }
LABEL_37:
      v9 |= v18;
      v10 &= v18;
      if (a3)
        break;
      if (++v8 >= (unint64_t)*(unsigned int *)(v6 + 44))
        goto LABEL_49;
    }
    v34 = *(_QWORD *)(a5 + 8) + 24 * v139;
    v37 = *(_DWORD **)(v34 + 16);
    v36 = (_QWORD *)(v34 + 16);
    v35 = v37;
    if (*v37 != v5)
    {
      do
      {
        v38 = v35[2];
        v35 += 2;
      }
      while (v38 != v5);
      *v36 = v35;
    }
    v140 |= *((_BYTE *)v35 + 5) != 0;
    v8 = v139 + 1;
  }
  while (v139 + 1 < (unint64_t)*(unsigned int *)(v6 + 44));
  if ((v140 & 1) != 0)
    return v9 & 1;
  v39 = *(_BYTE *)(a1 + 40) ? v10 : 1;
  if (v39 != 1)
    return v9 & 1;
LABEL_49:
  v144 = v9;
  v161[0] = v162;
  v161[1] = (void *)0x600000000;
  sub_1C4893E04((char *)v161, v7, 0);
  v159[0] = v160;
  v159[1] = (void *)0x600000000;
  sub_1C4893E04((char *)v159, v7, 0x7FFFFFFF);
  v40 = v7;
  v41 = *(_DWORD *)(v6 + 40);
  for (i = a5; v41 < *(_DWORD *)(v6 + 44); ++v41)
  {
    ++*((_DWORD *)v161[0] + v41 % v40);
    v43 = v159[0];
    v44 = sub_1C4AB90D0(*(_QWORD *)(a5 + 8), v41, v5);
    v45 = v43[v41 % v40];
    if (v45 >= v44)
      v45 = v44;
    v43[v41 % v40] = v45;
  }
  v156 = v158;
  v157 = 0x200000000;
  v46 = v40;
  if ((_DWORD)v40)
  {
    v47 = 0;
    v48 = 0;
    do
    {
      v49 = *((_DWORD *)v161[0] + v48);
      if (v49)
      {
        v50 = *((_DWORD *)v159[0] + v48);
        if (v50 == 0x7FFFFFFF)
          goto LABEL_144;
        v51 = *(_QWORD *)(a1 + 56);
        v52 = *(_DWORD *)(v51 + 24 * v48);
        v53 = v52 - v49;
        if (v52 < v49)
          goto LABEL_144;
        v54 = v51 + 24 * v48;
        v57 = *(_DWORD *)(v54 + 16);
        v56 = (unsigned int *)(v54 + 16);
        v55 = v57;
        v58 = v56 - 2;
        if (v53 < v57)
        {
          v59 = v55 + v49 - v52;
          v60 = 48 * v53;
          while (1)
          {
            v61 = *(_QWORD *)v58 + v60;
            v62 = *(const void **)v61;
            v63 = *(unsigned int *)(v61 + 8);
            v64 = v63 + v47;
            if (v64 > HIDWORD(v157))
              break;
            if ((_DWORD)v63)
              goto LABEL_62;
LABEL_63:
            v47 += v63;
            LODWORD(v157) = v47;
            v60 += 48;
            if (!--v59)
            {
              v55 = *v56;
              i = a5;
              v46 = v148;
              goto LABEL_67;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v158, v64, 8);
          v47 = v157;
          if (!(_DWORD)v63)
            goto LABEL_63;
LABEL_62:
          memcpy((char *)v156 + 8 * v47, v62, 8 * v63);
          v47 = v157;
          goto LABEL_63;
        }
LABEL_67:
        if (v55 > v53 && *(_DWORD *)(*(_QWORD *)v58 + 48 * v53 + 44) <= v50)
          goto LABEL_144;
      }
      ++v48;
    }
    while (v48 != v46);
    v65 = (char *)v156;
    __base = v155;
    __nel = 0x800000000;
    if (v47)
    {
      v66 = (char *)v156 + 8 * v47;
      do
      {
        sub_1C49E178C(&v151, *(_QWORD **)(*(_QWORD *)v65 + 8), (*(_QWORD *)v65 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v65 + 8) + 32)) >> 5, *(_QWORD *)(a1 + 48), 0, 0);
        v67 = v151;
        v68 = v152;
        v69 = HIDWORD(v151);
        if (v152 != HIDWORD(v151))
        {
          v70 = __nel;
          do
          {
            if (v70 >= HIDWORD(__nel))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v155, v70 + 1, 4);
              v70 = __nel;
            }
            *((_DWORD *)__base + v70) = v69;
            v70 = __nel + 1;
            LODWORD(__nel) = __nel + 1;
            v67 = (v67 & 0xFFFFFFFF00000000) + 0x100000000;
            v69 = HIDWORD(v67);
          }
          while (v68 != HIDWORD(v67));
        }
        v65 += 8;
      }
      while (v65 != v66);
      v131 = __nel;
      v71 = (int *)__base;
      if (__nel >= 2)
      {
        qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB967C);
        v131 = __nel;
        v71 = (int *)__base;
      }
      v5 = a4;
      LODWORD(v46) = v148;
      v72 = &v71[v131];
      v132 = v71;
      v6 = a2;
      if (v131)
      {
        v133 = 0;
        while (4 * v131 - 4 != v133)
        {
          v135 = v71[v133 / 4];
          v134 = v71[v133 / 4 + 1];
          v133 += 4;
          if (v135 == v134)
          {
            v132 = &v71[v133 / 4 - 1];
            goto LABEL_159;
          }
        }
      }
      else
      {
LABEL_159:
        if (v132 != v72)
        {
          v136 = v132 + 2;
          if (v132 + 2 != v72)
          {
            v137 = *v132;
            do
            {
              v138 = v137;
              v137 = *v136;
              if (v138 != *v136)
              {
                v132[1] = v137;
                ++v132;
              }
              ++v136;
            }
            while (v136 != v72);
          }
          v72 = v132 + 1;
        }
      }
    }
    else
    {
      v71 = (int *)v155;
      v72 = (int *)v155;
      v5 = a4;
      v6 = a2;
      LODWORD(v46) = v148;
    }
  }
  else
  {
    __base = v155;
    HIDWORD(__nel) = 8;
    v71 = (int *)v155;
    v72 = (int *)v155;
  }
  v73 = (char *)v72 - (char *)v71;
  v74 = (unint64_t)((char *)v72 - (char *)v71) >> 2;
  LODWORD(__nel) = v74;
  if ((v73 >> 2))
  {
    v75 = &v71[v74];
    v141 = v75;
    while (1)
    {
      v76 = *(_QWORD *)(a1 + 56) + 24 * (*v71 % v46);
      v79 = *(_QWORD *)(v76 + 8);
      v78 = v76 + 8;
      v77 = v79;
      v80 = v79 + 48 * *(unsigned int *)(v78 + 8);
      v81 = 48 * *(unsigned int *)(v78 + 8);
      do
      {
        if (!v81)
          goto LABEL_111;
        v82 = *(_DWORD *)(v80 - 8);
        v80 -= 48;
        v81 -= 48;
      }
      while (v82 != *v71);
      v150 = (uint64_t *)(v77 + v81);
      v83 = *(unsigned int *)(v77 + v81 + 8);
      if ((_DWORD)v83)
        break;
LABEL_110:
      sub_1C4AB9698((uint64_t *)v78, (uint64_t)v150);
      v6 = a2;
      i = a5;
      v5 = a4;
      LODWORD(v46) = v148;
      v75 = v141;
LABEL_111:
      if (++v71 == v75)
        goto LABEL_112;
    }
    v84 = *v150;
    v85 = *v150 + 8 * v83;
    while (2)
    {
      v86 = *(_QWORD *)(*(_QWORD *)v84 + 8);
      v87 = *(_QWORD *)(v86 + 32);
      v88 = *(_QWORD *)v84 - v87;
      v89 = v88 >> 5;
      if (llvm::MachineInstr::getNumExplicitOperands(v86) <= (v88 >> 5))
      {
LABEL_109:
        v92 = -1;
      }
      else
      {
        v90 = *(unsigned __int16 **)(v86 + 16);
        if ((word_1C6AA47DC[dword_1C6A9B6CC[*v90] + (unsigned __int16)v89] & 0xFFFB) == 0x3A)
        {
          v92 = v89 + 2;
        }
        else if ((*(_DWORD *)(v87 + (v88 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
        {
          v93 = *((unsigned __int8 *)v90 + 4);
          if ((v90[4] & 2) == 0 || (v95 = *(_DWORD *)(v86 + 40), v95 == v93))
          {
            v94 = v93;
          }
          else
          {
            v96 = v95 - 1;
            v94 = v93;
            do
            {
              v97 = *(_DWORD *)(v87 + 32 * v93);
              if ((v97 & 0x10000FF) != 0x1000000)
                break;
              v94 += (v97 & 0x2000000) == 0;
              if (v96 == v93)
                break;
              ++v93;
            }
            while ((v97 & 0x2000000) == 0);
          }
          v92 = v94 + v89;
        }
        else
        {
          if (*(_DWORD *)(v87 + (v88 & 0x1FFFFFFFE0)))
            v91 = *(_DWORD *)(v87 + (v88 & 0x1FFFFFFFE0)) == 7;
          else
            v91 = 1;
          if (!v91)
            goto LABEL_109;
          v92 = v89 + 1;
        }
      }
      *(_QWORD *)(v87 + 32 * v92 + 16) &= ~0x20uLL;
      v84 += 8;
      if (v84 == v85)
        goto LABEL_110;
      continue;
    }
  }
LABEL_112:
  v98 = *(_DWORD *)(v6 + 40);
  if (v98 >= *(_DWORD *)(v6 + 44))
    goto LABEL_142;
  while (2)
  {
    v99 = v98 % v46;
    v100 = *(_QWORD *)(a1 + 56);
    LODWORD(v150) = sub_1C4AB90D0(*(_QWORD *)(i + 8), v98, v5);
    v101 = v100 + 24 * v99;
    v104 = *(_DWORD *)(v101 + 16);
    v103 = (unsigned int *)(v101 + 16);
    v102 = v104;
    v105 = v103 - 2;
    v106 = v104 + 1;
    v107 = v104;
    v108 = 0uLL;
    if (v104 < v103[1] || (sub_1C4AB8E5C((uint64_t)(v103 - 2), v106), v108 = 0uLL, v107 = *v103, v106 != v107))
    {
      v109 = 3 * v107;
      v110 = 48 * v102 - 48 * v107 + 48;
      v111 = (_OWORD *)(*(_QWORD *)v105 + 16 * v109 + 16);
      do
      {
        *v111 = v108;
        v111[1] = v108;
        *((_QWORD *)v111 - 2) = v111;
        *((_QWORD *)v111 - 1) = 0x300000000;
        v111 += 3;
        v110 -= 48;
      }
      while (v110);
    }
    *v103 = v106;
    if ((_DWORD)v106 == 1)
    {
      v102 = 0;
      goto LABEL_134;
    }
    v142 = v98;
    v112 = 48 * v102 + 40;
    while (2)
    {
      v113 = v102 - 1;
      v114 = *(_QWORD *)v105;
      if (*(_DWORD *)(*(_QWORD *)v105 + 48 * (v102 - 1) + 44) > (int)v150)
      {
        v115 = v114 + 48 * v113;
        v116 = v114 + v112;
        v117 = (void **)(v114 + v112 - 40);
        v118 = *(unsigned int *)(v115 + 8);
        v119 = *(unsigned int *)(v114 + v112 - 32);
        if (v119 >= v118)
        {
          if ((_DWORD)v118)
            memmove(*v117, *(const void **)v115, 8 * v118);
        }
        else
        {
          if (*(_DWORD *)(v116 - 28) < v118)
          {
            *(_DWORD *)(v116 - 32) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v114 + v112 - 40, v114 + v112 - 24, v118, 8);
LABEL_124:
            v119 = 0;
          }
          else
          {
            if (!(_DWORD)v119)
              goto LABEL_124;
            memmove(*v117, *(const void **)v115, 8 * v119);
          }
          v120 = *(unsigned int *)(v115 + 8);
          if (v119 != v120)
            memcpy((char *)*v117 + 8 * v119, (const void *)(*(_QWORD *)v115 + 8 * v119), *(_QWORD *)v115 + 8 * v120 - (*(_QWORD *)v115 + 8 * v119));
        }
        *(_DWORD *)(v116 - 32) = v118;
        *(_QWORD *)(v114 + v112) = *(_QWORD *)(v114 + 48 * v113 + 40);
        v112 -= 48;
        if (!--v102)
        {
          v102 = 0;
          break;
        }
        continue;
      }
      break;
    }
    v5 = a4;
    v6 = a2;
    v98 = v142;
LABEL_134:
    v121 = v102;
    v122 = *(_QWORD *)v105;
    v123 = *(_QWORD *)v105 + 48 * v102;
    v124 = *(const void **)v6;
    v125 = *(unsigned int *)(v6 + 8);
    *(_DWORD *)(v123 + 8) = 0;
    if (v125 > *(_DWORD *)(v123 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v123, v123 + 16, v125, 8);
      v126 = *(unsigned int *)(v123 + 8);
LABEL_137:
      memcpy((void *)(*(_QWORD *)v123 + 8 * v126), v124, 8 * v125);
      v127 = *(_DWORD *)(v123 + 8);
      v122 = *(_QWORD *)v105;
    }
    else
    {
      if ((_DWORD)v125)
      {
        v126 = 0;
        goto LABEL_137;
      }
      v127 = 0;
    }
    *(_DWORD *)(v123 + 8) = v127 + v125;
    v128 = v122 + 48 * v121;
    v129 = (int)v150;
    *(_DWORD *)(v128 + 40) = v98;
    *(_DWORD *)(v128 + 44) = v129;
    ++v98;
    i = a5;
    LODWORD(v46) = v148;
    if (v98 < *(_DWORD *)(v6 + 44))
      continue;
    break;
  }
LABEL_142:
  if (__base != v155)
    free(__base);
LABEL_144:
  if (v156 != v158)
    free(v156);
  if (v159[0] != v160)
    free(v159[0]);
  if (v161[0] != v162)
    free(v161[0]);
  LOBYTE(v9) = v144;
  return v9 & 1;
}

uint64_t sub_1C4AB895C(llvm::MachineInstr *this, unsigned int a2)
{
  _DWORD *v4;
  uint64_t v5;
  _BOOL4 v6;
  unsigned __int16 *v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = 8 * a2;
  v6 = (*v4 & 0x10000FF) == 0x1000000 && (v4[8 * a2] & 0x10000FF) == 0 && v4[1] == v4[8 * a2 + 1];
  if (llvm::MachineInstr::getNumExplicitOperands((uint64_t)this) <= a2)
    goto LABEL_25;
  v7 = (unsigned __int16 *)*((_QWORD *)this + 2);
  if ((word_1C6AA47DC[dword_1C6A9B6CC[*v7] + (unsigned __int16)a2] & 0xFFFB) == 0x3A)
  {
    v9 = a2 + 2;
  }
  else if ((v4[v5] & 0x10000FF) == 0x1000000)
  {
    v10 = *((unsigned __int8 *)v7 + 4);
    if ((v7[4] & 2) == 0 || (v13 = *((_DWORD *)this + 10), v13 == v10))
    {
      v11 = v10;
    }
    else
    {
      v14 = v13 - 1;
      v11 = v10;
      do
      {
        v15 = v4[8 * v10];
        if ((v15 & 0x10000FF) != 0x1000000)
          break;
        v11 += (v15 & 0x2000000) == 0;
        if (v14 == v10)
          break;
        ++v10;
      }
      while ((v15 & 0x2000000) == 0);
    }
    v9 = v11 + a2;
  }
  else
  {
    if (v4[v5])
      v8 = v4[v5] == 7;
    else
      v8 = 1;
    if (!v8)
    {
LABEL_25:
      v9 = -1;
      return v6 | ((v4[8 * v9 + 4] & 0x10) >> 4);
    }
    v9 = a2 + 1;
  }
  return v6 | ((v4[8 * v9 + 4] & 0x10) >> 4);
}

uint64_t sub_1C4AB8AC8(unsigned __int16 a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = sub_1C4C915C4(a1);
  if ((v4 & 0xFF00000000) == 0)
    return 0;
  v5 = v4;
  if ((v4 - 125) <= 0x3C && ((1 << (v4 - 125)) & 0x1FFF801FF80FFFFFLL) != 0)
    goto LABEL_4;
  result = 0;
  if (v5 <= 0x29)
  {
    if (((1 << v5) & 0x300C000000) != 0)
    {
LABEL_4:
      if (sub_1C4C2FD5C(a1) == a2)
        return 1;
      return sub_1C4C2FD5C(a1) == a2;
    }
    if (((1 << v5) & 0x30030000000) != 0 || ((1 << v5) & 0x4300000000) != 0)
      return sub_1C4C2FD5C(a1) == a2;
  }
  return result;
}

void sub_1C4AB8BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(char **)(v2 - 24);
      v5 = *(unsigned int *)(v2 - 16);
      if ((_DWORD)v5)
      {
        v6 = 56 * v5;
        do
        {
          v7 = *(char **)&v4[v6 - 56];
          if (&v4[v6 - 40] != v7)
            free(v7);
          v6 -= 56;
        }
        while (v6);
        v4 = *(char **)(v2 - 24);
      }
      if (v4 != (char *)(v2 - 8))
        free(v4);
      v2 -= 40;
    }
    while (v2 != a1);
  }
}

void sub_1C4AB8C48(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;

  v22 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v22);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v5)
    goto LABEL_22;
  v6 = 0;
  v7 = 56 * v5;
  do
  {
    v8 = &v3[v6];
    v9 = &v4[v6];
    v10 = &v3[v6 + 16];
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = 0x300000000;
    if (v4 != v3)
    {
      v11 = *((unsigned int *)v9 + 2);
      if (*((_DWORD *)v9 + 2))
      {
        v12 = &v4[v6];
        v14 = (uint64_t)&v4[v6 + 16];
        v13 = *(const void **)&v4[v6];
        if ((const void *)v14 != v13)
        {
          *(_QWORD *)v8 = v13;
          v17 = *((_DWORD *)v12 + 3);
          *((_DWORD *)v8 + 2) = v11;
          *((_DWORD *)v8 + 3) = v17;
          *(_QWORD *)v12 = v14;
          *((_DWORD *)v12 + 3) = 0;
          goto LABEL_10;
        }
        if (v11 >= 4)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3[v6], (uint64_t)&v3[v6 + 16], *((unsigned int *)v9 + 2), 8);
          v15 = *((unsigned int *)v9 + 2);
          if (!(_DWORD)v15)
            goto LABEL_9;
          v13 = *(const void **)v9;
          v10 = *(char **)v8;
        }
        else
        {
          v15 = *((unsigned int *)v9 + 2);
        }
        memcpy(v10, v13, 8 * v15);
LABEL_9:
        *((_DWORD *)v8 + 2) = v11;
LABEL_10:
        *((_DWORD *)v9 + 2) = 0;
      }
    }
    *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
    v16 = *((_DWORD *)v9 + 12);
    v8[52] = v9[52];
    *((_DWORD *)v8 + 12) = v16;
    v6 += 56;
  }
  while (v7 != v6);
  v4 = *(char **)a1;
  v18 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v18)
  {
    v19 = 56 * v18;
    do
    {
      v20 = *(char **)&v4[v19 - 56];
      if (&v4[v19 - 40] != v20)
        free(v20);
      v19 -= 56;
    }
    while (v19);
    v4 = *(char **)a1;
  }
LABEL_22:
  v21 = v22;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v21;
}

void sub_1C4AB8DD8(char *a1, char *a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = (char *)*((_QWORD *)v2 - 2);
      v5 = *((unsigned int *)v2 - 2);
      if ((_DWORD)v5)
      {
        v6 = 48 * v5;
        do
        {
          v7 = *(char **)&v4[v6 - 48];
          if (&v4[v6 - 32] != v7)
            free(v7);
          v6 -= 48;
        }
        while (v6);
        v4 = (char *)*((_QWORD *)v2 - 2);
      }
      if (v4 != v2)
        free(v4);
      v2 -= 24;
    }
    while (v2 != a1);
  }
}

void sub_1C4AB8E5C(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;

  v21 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v21);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v5)
    goto LABEL_22;
  v6 = 0;
  v7 = 48 * v5;
  do
  {
    v8 = &v3[v6];
    v9 = &v4[v6];
    v10 = &v3[v6 + 16];
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = 0x300000000;
    if (v4 != v3)
    {
      v11 = *((unsigned int *)v9 + 2);
      if (*((_DWORD *)v9 + 2))
      {
        v12 = &v4[v6];
        v14 = (uint64_t)&v4[v6 + 16];
        v13 = *(const void **)&v4[v6];
        if ((const void *)v14 != v13)
        {
          *(_QWORD *)v8 = v13;
          v16 = *((_DWORD *)v12 + 3);
          *((_DWORD *)v8 + 2) = v11;
          *((_DWORD *)v8 + 3) = v16;
          *(_QWORD *)v12 = v14;
          *((_DWORD *)v12 + 3) = 0;
          goto LABEL_10;
        }
        if (v11 >= 4)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3[v6], (uint64_t)&v3[v6 + 16], *((unsigned int *)v9 + 2), 8);
          v15 = *((unsigned int *)v9 + 2);
          if (!(_DWORD)v15)
            goto LABEL_9;
          v13 = *(const void **)v9;
          v10 = *(char **)v8;
        }
        else
        {
          v15 = *((unsigned int *)v9 + 2);
        }
        memcpy(v10, v13, 8 * v15);
LABEL_9:
        *((_DWORD *)v8 + 2) = v11;
LABEL_10:
        *((_DWORD *)v9 + 2) = 0;
      }
    }
    *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
    v6 += 48;
  }
  while (v7 != v6);
  v4 = *(char **)a1;
  v17 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v17)
  {
    v18 = 48 * v17;
    do
    {
      v19 = *(char **)&v4[v18 - 48];
      if (&v4[v18 - 32] != v19)
        free(v19);
      v18 -= 48;
    }
    while (v18);
    v4 = *(char **)a1;
  }
LABEL_22:
  v20 = v21;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v20;
}

__n128 sub_1C4AB8FDC(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 24 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = (char *)a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
      v5 = *(_QWORD *)a1;
      v2 = (__n128 *)&v11[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (__n128 *)(v5 + 24 * *(unsigned int *)(a1 + 8));
  result = *v2;
  v6[1].n128_u64[0] = v2[1].n128_u64[0];
  *v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4AB9084(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  v2 = *a1;
  v3 = *a2;
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a1 + 1);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  v8 = !v7;
  v9 = v3 >= v2;
  if (v3 >= v2)
    v10 = v8;
  else
    v10 = 1;
  if (v9 && v5 != 0 && v6 == 0)
    return 0xFFFFFFFFLL;
  else
    return v10;
}

uint64_t sub_1C4AB90D0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *i;
  _QWORD *v6;
  _BYTE *v7;

  v3 = a1 + 24 * a2;
  v4 = *(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 8);
  v7 = *(_BYTE **)(v3 + 16);
  v6 = (_QWORD *)(v3 + 16);
  for (i = v7; i != (_BYTE *)v4; *v6 = i)
  {
    if (*(_DWORD *)i >= a3)
    {
      if (*(_DWORD *)i != a3 || (i += 8, i != (_BYTE *)v4))
      {
        if (i[4])
          return *(unsigned int *)i;
      }
      return 0x7FFFFFFFLL;
    }
    i += 8;
  }
  return 0x7FFFFFFFLL;
}

uint64_t sub_1C4AB9130(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9)
  {
    v10 = v8 + 56 * v9;
    v11 = 56 * v9;
    while (*(_DWORD *)(v8 + 40) != a3)
    {
      v8 += 56;
      v11 -= 56;
      if (!v11)
      {
        v8 = v10;
        break;
      }
    }
  }
  v12 = *(_DWORD *)(a1 + 32);
  if (*(int *)(v8 + 48) > 0)
    ++v12;
  *(_DWORD *)(a1 + 32) = v12;
  *(_DWORD *)(v8 + 48) = 0;
  sub_1C4AB94A0(a1, a3);
  return sub_1C4AB91CC(a1, a2, a3, a4);
}

uint64_t sub_1C4AB91CC(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void *v24;
  const llvm::MachineInstr *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t *v39;

  v6 = a1;
  v39 = (uint64_t *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 24);
  v8 = v7 + 1;
  v9 = v7;
  if (v7 < *(_DWORD *)(a1 + 28)
    || (sub_1C4AB8C48((uint64_t)v39, v7 + 1), v9 = *(unsigned int *)(v6 + 24), v8 != v9))
  {
    v10 = 56 * v9;
    v11 = 56 * v7 - 56 * v9 + 56;
    v12 = v10 + *v39 + 16;
    do
    {
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(_QWORD *)(v12 - 16) = v12;
      *(_QWORD *)(v12 - 8) = 0x300000000;
      v12 += 56;
      v11 -= 56;
    }
    while (v11);
  }
  *(_DWORD *)(v6 + 24) = v8;
  if (!(_DWORD)v7)
  {
    LODWORD(v7) = 0;
    goto LABEL_22;
  }
  v36 = a2;
  v37 = v6;
  v13 = 56 * v7 + 48;
  while (1)
  {
    v14 = *v39;
    v15 = *v39 + 56 * (v7 - 1);
    if (*(_DWORD *)(v15 + 44) <= a4)
      break;
    v16 = v14 + v13;
    v17 = (void **)(v14 + v13 - 48);
    v18 = *(unsigned int *)(v15 + 8);
    v19 = *(unsigned int *)(v14 + v13 - 40);
    if (v19 >= v18)
    {
      if ((_DWORD)v18)
        memmove(*v17, *(const void **)v15, 8 * v18);
      goto LABEL_17;
    }
    if (*(_DWORD *)(v16 - 36) < v18)
    {
      *(_DWORD *)(v16 - 40) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + v13 - 48, v14 + v13 - 32, v18, 8);
LABEL_12:
      v19 = 0;
      goto LABEL_13;
    }
    if (!(_DWORD)v19)
      goto LABEL_12;
    memmove(*v17, *(const void **)v15, 8 * v19);
LABEL_13:
    v20 = *(unsigned int *)(v15 + 8);
    if (v19 != v20)
      memcpy((char *)*v17 + 8 * v19, (const void *)(*(_QWORD *)v15 + 8 * v19), *(_QWORD *)v15 + 8 * v20 - (*(_QWORD *)v15 + 8 * v19));
LABEL_17:
    *(_DWORD *)(v16 - 40) = v18;
    v21 = v14 + v13;
    *(_QWORD *)(v21 - 8) = *(_QWORD *)(v15 + 40);
    v22 = v14 + 56 * (v7 - 1);
    v23 = *(_DWORD *)(v22 + 48);
    *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 52);
    *(_DWORD *)v21 = v23;
    v13 -= 56;
    LODWORD(v7) = v7 - 1;
    if (!(_DWORD)v7)
    {
      LODWORD(v7) = 0;
      break;
    }
  }
  v6 = v37;
  a2 = v36;
LABEL_22:
  v24 = *(const void **)a2;
  v25 = *(const llvm::MachineInstr **)(**(_QWORD **)a2 + 8);
  v26 = *v39;
  v27 = *v39 + 56 * v7;
  v28 = a2[2];
  *(_DWORD *)(v27 + 8) = 0;
  if (v28 > *(_DWORD *)(v27 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v27, v27 + 16, v28, 8);
    v29 = *(unsigned int *)(v27 + 8);
LABEL_25:
    memcpy((void *)(*(_QWORD *)v27 + 8 * v29), v24, 8 * v28);
    v30 = *(_DWORD *)(v27 + 8);
    v26 = *v39;
  }
  else
  {
    if ((_DWORD)v28)
    {
      v29 = 0;
      goto LABEL_25;
    }
    v30 = 0;
  }
  *(_DWORD *)(v27 + 8) = v30 + v28;
  v31 = 56 * v7;
  v32 = v26 + v31;
  *(_DWORD *)(v32 + 40) = a3;
  *(_DWORD *)(v32 + 44) = a4;
  result = llvm::TargetSchedModel::computeInstrLatency(*(llvm::TargetSchedModel **)(v6 + 8), v25, 1);
  v34 = result - 1;
  if ((result - 1) <= 2)
    v34 = 2;
  v35 = *(_QWORD *)(v6 + 16) + v31;
  *(_DWORD *)(v35 + 48) = v34 + 4;
  *(_BYTE *)(v35 + 52) = 0;
  return result;
}

void sub_1C4AB94A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void **v18;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v6 = v5 + v4;
    if (*(_DWORD *)(v5 + v4 + 40) == a2)
      break;
    v4 += 56;
    if (56 * v2 == v4)
      return;
  }
  if (56 * v2 - 56 == v4)
    goto LABEL_25;
  v7 = 56 * v2 - 56;
  do
  {
    v8 = v5 + v4;
    v9 = *(const void **)(v5 + v4 + 56);
    v10 = v5 + v4 + 72;
    if ((const void *)v10 == v9)
    {
      v12 = (_DWORD *)(v8 + 64);
      v11 = *(unsigned int *)(v8 + 64);
      v13 = *(unsigned int *)(v8 + 8);
      if (v13 >= v11)
      {
        if ((_DWORD)v11)
          memmove(*(void **)v8, v9, 8 * v11);
        goto LABEL_17;
      }
      if (*(_DWORD *)(v5 + v4 + 12) < v11)
      {
        *(_DWORD *)(v8 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + v4, v5 + v4 + 16, v11, 8);
      }
      else if ((_DWORD)v13)
      {
        memmove(*(void **)v8, v9, 8 * v13);
LABEL_13:
        v14 = *v12;
        if (v13 != v14)
          memcpy((void *)(*(_QWORD *)v8 + 8 * v13), (const void *)(*(_QWORD *)(v8 + 56) + 8 * v13), 8 * v14 - 8 * v13);
LABEL_17:
        *(_DWORD *)(v8 + 8) = v11;
        goto LABEL_18;
      }
      v13 = 0;
      goto LABEL_13;
    }
    if (v8 + 16 != *(_QWORD *)v8)
    {
      free(*(void **)v8);
      v9 = *(const void **)(v8 + 56);
    }
    v16 = v5 + v4;
    *(_QWORD *)v16 = v9;
    v12 = (_DWORD *)(v6 + 64);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v5 + v4 + 64);
    *(_QWORD *)(v8 + 56) = v10;
    *(_DWORD *)(v16 + 68) = 0;
LABEL_18:
    *v12 = 0;
    v15 = v5 + v4;
    *(_QWORD *)(v15 + 40) = *(_QWORD *)(v5 + v4 + 96);
    *(_DWORD *)(v15 + 48) = *(_DWORD *)(v5 + v4 + 104);
    *(_BYTE *)(v15 + 52) = *(_BYTE *)(v5 + v4 + 108);
    v6 += 56;
    v4 += 56;
  }
  while (v7 != v4);
  LODWORD(v2) = *(_DWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
LABEL_25:
  v17 = v2 - 1;
  *(_DWORD *)(a1 + 24) = v17;
  v18 = (void **)(v5 + 56 * v17);
  if (*v18 != v18 + 2)
    free(*v18);
  --*(_DWORD *)(a1 + 32);
}

uint64_t sub_1C4AB967C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_1C4AB9698(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void **v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void **v17;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *a1 + 48 * v5;
  v7 = a2 + 48;
  if (a2 + 48 != v6)
  {
    v8 = a2;
    while (1)
    {
      v9 = *(const void **)v7;
      if (v7 + 16 != *(_QWORD *)v7)
      {
        v15 = *(void **)(v7 - 48);
        if ((void *)(v7 - 32) != v15)
        {
          free(v15);
          v9 = *(const void **)v7;
        }
        *(_QWORD *)(v7 - 48) = v9;
        v12 = (_DWORD *)(v8 + 56);
        *(_QWORD *)(v7 - 40) = *(_QWORD *)(v7 + 8);
        *(_QWORD *)v7 = v7 + 16;
        *(_DWORD *)(v7 + 12) = 0;
        goto LABEL_13;
      }
      v10 = (void **)(v7 - 48);
      v12 = (_DWORD *)(v7 + 8);
      v11 = *(unsigned int *)(v7 + 8);
      v13 = *(unsigned int *)(v7 - 40);
      if (v13 >= v11)
      {
        if ((_DWORD)v11)
          memmove(*v10, v9, 8 * v11);
        goto LABEL_12;
      }
      if (*(_DWORD *)(v7 - 36) < v11)
        break;
      if (!(_DWORD)v13)
        goto LABEL_7;
      memmove(*v10, v9, 8 * v13);
LABEL_8:
      v14 = *v12;
      if (v13 != v14)
        memcpy((void *)(*(_QWORD *)(v7 - 48) + 8 * v13), (const void *)(*(_QWORD *)v7 + 8 * v13), *(_QWORD *)v7 + 8 * v14 - (*(_QWORD *)v7 + 8 * v13));
LABEL_12:
      *(_DWORD *)(v7 - 40) = v11;
LABEL_13:
      *v12 = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v7 + 40);
      v8 += 48;
      v7 += 48;
      if (v7 == v6)
      {
        v5 = *((_DWORD *)a1 + 2);
        v4 = *a1;
        goto LABEL_20;
      }
    }
    *(_DWORD *)(v7 - 40) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v10, v7 - 32, v11, 8);
LABEL_7:
    v13 = 0;
    goto LABEL_8;
  }
LABEL_20:
  v16 = v5 - 1;
  *((_DWORD *)a1 + 2) = v16;
  v17 = (void **)(v4 + 48 * v16);
  if (*v17 != v17 + 2)
    free(*v17);
  return a2;
}

uint64_t sub_1C4AB981C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Clique Scheduling Hints Placement";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "agx3-sched-hints";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFA88;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AB98AC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4AB98AC()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EFA88);
  *result = &off_1E7FB1E68;
  return result;
}

void sub_1C4AB98EC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AB9980(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AB9A0C()
{
  return "AGX3 Clique Scheduling Hints Placement Pass";
}

void *sub_1C4AB9A1C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C4AB9A4C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  void **v23;
  void (**v24)(void **);
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  _BOOL4 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t i;
  int v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int v56[4];
  void *v57;
  uint64_t v58;
  int v59[4];
  void *v60;
  uint64_t v61;
  int v62[4];
  void *v63[2];
  uint64_t v64;
  void **v65;
  int v66;
  void *v67[2];
  _QWORD v68[4];
  __int16 v69;
  uint64_t v70;
  _BYTE v71[56];
  void *v72;
  _QWORD *v73[7];
  void *v74[2];
  _QWORD v75[4];
  __int16 v76;
  uint64_t v77;
  _BYTE v78[56];
  void *v79;
  _QWORD *v80[7];
  void *v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  int v85;
  void *v86[2];
  _QWORD v87[4];
  __int16 v88;
  uint64_t v89;
  _BYTE v90[56];
  void *v91;
  _QWORD *v92[7];
  _BYTE v93[56];
  void *v94;
  _QWORD *v95[7];
  _OWORD v96[2];
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  uint64_t v109;
  _QWORD v110[9];
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EDE38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE38))
  {
    dword_1ED7EDE00 = 30;
    __cxa_guard_release(&qword_1ED7EDE38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EDE40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE40))
  {
    dword_1ED7EDE04 = 20;
    __cxa_guard_release(&qword_1ED7EDE40);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EDE48);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE48))
  {
    dword_1ED7EDE08 = -1;
    __cxa_guard_release(&qword_1ED7EDE48);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EDE50);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE50))
  {
    dword_1ED7EDE0C = -1;
    __cxa_guard_release(&qword_1ED7EDE50);
  }
  if (dword_1ED7EDE08 >= 0)
    v7 = dword_1ED7EDE08;
  else
    v7 = dword_1ED7EDE00;
  if (dword_1ED7EDE0C >= 0)
    v8 = dword_1ED7EDE0C;
  else
    v8 = dword_1ED7EDE04;
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EDE58);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE58))
  {
    dword_1ED7EDE10 = 10;
    __cxa_guard_release(&qword_1ED7EDE58);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_1ED7EDE60);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE60))
  {
    dword_1ED7EDE14 = 32;
    __cxa_guard_release(&qword_1ED7EDE60);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_1ED7EDE68);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE68))
  {
    dword_1ED7EDE18 = 5;
    __cxa_guard_release(&qword_1ED7EDE68);
  }
  v12 = atomic_load((unsigned __int8 *)&qword_1ED7EDE70);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE70))
  {
    byte_1ED7EDDF8 = 1;
    __cxa_guard_release(&qword_1ED7EDE70);
  }
  v13 = atomic_load((unsigned __int8 *)&qword_1ED7EDE78);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE78))
  {
    byte_1ED7EDDF9 = 0;
    __cxa_guard_release(&qword_1ED7EDE78);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_1ED7EDE80);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE80))
  {
    byte_1ED7EDDFA = 0;
    __cxa_guard_release(&qword_1ED7EDE80);
  }
  v15 = atomic_load((unsigned __int8 *)&qword_1ED7EDE88);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE88))
  {
    dword_1ED7EDE1C = 10;
    __cxa_guard_release(&qword_1ED7EDE88);
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1ED7EDE90);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE90))
  {
    dword_1ED7EDE20 = 32;
    __cxa_guard_release(&qword_1ED7EDE90);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ED7EDE98);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDE98))
  {
    dword_1ED7EDE24 = 30;
    __cxa_guard_release(&qword_1ED7EDE98);
  }
  v18 = *(unsigned __int8 **)(a2 + 16);
  v19 = v18[285];
  if (v18[285])
  {
    v52 = v18[285];
    v97 = xmmword_1C8663800;
    v98 = unk_1C8663810;
    v96[0] = llvm::MCSchedModel::Default;
    v96[1] = unk_1C86637F0;
    v101 = unk_1C86637F0;
    v102 = xmmword_1C8663800;
    v103 = unk_1C8663810;
    v99 = 0;
    v104 = 0;
    v100 = llvm::MCSchedModel::Default;
    v106 = 0u;
    v107 = 0u;
    v105 = 0u;
    v108 = v110;
    v109 = 0x1000000000;
    v110[8] = 0;
    llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v96, (const llvm::TargetSubtargetInfo *)v18);
    v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v18 + 104))(v18);
    v111 = *(unsigned __int16 *)(*(_QWORD *)(v107 + 136)
                               + 4
                               * *(unsigned __int16 *)(*((_QWORD *)&v97 + 1)
                                                     + 24 * *(unsigned __int16 *)(*(_QWORD *)(v20 + 8) + 270054)
                                                     + 10));
    *(_OWORD *)v63 = xmmword_1C677EA60;
    sub_1C4ABA6DC((uint64_t)v93, (int *)v63, 4, v7, dword_1ED7EDE14, dword_1ED7EDE10, byte_1ED7EDDF8, (uint64_t)v96, 1, 1);
    v63[0] = (void *)0x500000004FLL;
    sub_1C4ABA6DC((uint64_t)v90, (int *)v63, 2, dword_1ED7EDE24, dword_1ED7EDE20, dword_1ED7EDE1C, byte_1ED7EDDF8, (uint64_t)v96, byte_1ED7EDDF9, byte_1ED7EDDFA);
    v86[0] = v87;
    v88 = 0;
    v89 = 32;
    v21 = *(void **)(a2 + 16);
    v87[0] = v93;
    v87[1] = v90;
    v86[1] = (void *)0x400000002;
    v63[0] = &off_1E81316D0;
    v63[1] = v21;
    v65 = v63;
    v22 = sub_1C4C0B384(v63);
    v23 = v65;
    if (v65 == v63)
    {
      v24 = (void (**)(void **))((char *)v63[0] + 32);
      v23 = v63;
    }
    else
    {
      if (!v65)
      {
LABEL_24:
        v25 = atomic_load((unsigned __int8 *)&qword_1ED7EDEA0);
        if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEA0))
        {
          byte_1ED7EDDFB = 1;
          __cxa_guard_release(&qword_1ED7EDEA0);
        }
        v81 = &v83;
        v83 = 103;
        v82 = 0x800000001;
        LODWORD(v26) = 1;
        if (byte_1ED7EDDFB && v22 >= 4)
        {
          v84 = xmmword_1C677EA70;
          v85 = 101;
          LODWORD(v82) = 6;
          v27 = atomic_load((unsigned __int8 *)&qword_1ED7EDEA8);
          if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEA8))
          {
            byte_1ED7EDDFC = 0;
            __cxa_guard_release(&qword_1ED7EDEA8);
          }
          v26 = v82;
          if (byte_1ED7EDDFC)
          {
            if ((unint64_t)v82 + 2 > HIDWORD(v82))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)&v83, v82 + 2, 4);
              v26 = v82;
            }
            *(_QWORD *)((char *)v81 + 4 * v26) = 0x6400000093;
            LODWORD(v26) = v82 + 2;
            LODWORD(v82) = v82 + 2;
          }
        }
        sub_1C4ABA6DC((uint64_t)v78, (int *)v81, v26, v8, dword_1ED7EDE18, dword_1ED7EDE18, byte_1ED7EDDF8, (uint64_t)v96, 1, 1);
        v74[0] = v75;
        v76 = 0;
        v77 = 36;
        v75[0] = v78;
        v74[1] = (void *)0x400000001;
        v28 = atomic_load((unsigned __int8 *)&qword_1ED7EDEB0);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEB0))
        {
          byte_1ED7EDDFD = 1;
          __cxa_guard_release(&qword_1ED7EDEB0);
        }
        v29 = atomic_load((unsigned __int8 *)&qword_1ED7EDEB8);
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEB8))
        {
          byte_1ED7EDDFE = 1;
          __cxa_guard_release(&qword_1ED7EDEB8);
        }
        v30 = atomic_load((unsigned __int8 *)&qword_1ED7EDEC0);
        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEC0))
        {
          dword_1ED7EDE28 = 10;
          __cxa_guard_release(&qword_1ED7EDEC0);
        }
        v31 = atomic_load((unsigned __int8 *)&qword_1ED7EDEC8);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEC8))
        {
          dword_1ED7EDE2C = 32;
          __cxa_guard_release(&qword_1ED7EDEC8);
        }
        v32 = atomic_load((unsigned __int8 *)&qword_1ED7EDED0);
        if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDED0))
        {
          dword_1ED7EDE30 = 30;
          __cxa_guard_release(&qword_1ED7EDED0);
        }
        v33 = v22 >= 4 && (byte_1ED7EDDFD | byte_1ED7EDDFE) != 0;
        v63[0] = (void *)0x5D0000005CLL;
        sub_1C4ABA6DC((uint64_t)v71, (int *)v63, 2, dword_1ED7EDE30, dword_1ED7EDE2C, dword_1ED7EDE28, byte_1ED7EDDF8, (uint64_t)v96, byte_1ED7EDDFD != 0, byte_1ED7EDDFE != 0);
        v67[0] = v68;
        v69 = 0;
        v70 = 40;
        v68[0] = v71;
        v67[1] = (void *)0x400000001;
        v34 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v18 + 176))(v18);
        v63[0] = &v64;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v63[1] = (void *)0xC00000001;
        v53 = 0;
        v35 = (_QWORD *)(a2 + 320);
        v36 = *(_QWORD **)(a2 + 328);
        if (v36 == (_QWORD *)(a2 + 320))
        {
          v38 = 0;
          goto LABEL_62;
        }
        v37 = v34;
        v38 = 0;
        while (1)
        {
          for (i = v36[7]; (_QWORD *)i != v36 + 6; i = *(_QWORD *)(i + 8))
          {
            v40 = sub_1C4ABA864((uint64_t)v96, i);
            if ((*(_BYTE *)(*(_QWORD *)(i + 16) + 20) & 4) != 0)
            {
              if (sub_1C4AD53A0(&v53, i, v37, 1))
                sub_1C4ABA970((unsigned int *)v63, v38);
              v41 = v63[1];
              if (LODWORD(v63[1]) == 1)
              {
                sub_1C4ABA970((unsigned int *)v63, v38);
                v42 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 344) + 592))(*(_QWORD *)(a2 + 344), 100);
                if (v42)
                  v43 = *(_QWORD *)a2 == v42;
                else
                  v43 = 1;
                if (v43)
                  goto LABEL_55;
                v41 = v63[1];
              }
              sub_1C4ABAA54((uint64_t)v93, i, (_DWORD *)v63[0] + 5 * v41 - 4);
              sub_1C4ABAA54((uint64_t)v90, i, (_DWORD *)v63[0] + 5 * LODWORD(v63[1]) - 3);
              sub_1C4ABAA54((uint64_t)v78, i, (_DWORD *)v63[0] + 5 * LODWORD(v63[1]) - 2);
              if (v33)
                sub_1C4ABAA54((uint64_t)v71, i, (_DWORD *)v63[0] + 5 * LODWORD(v63[1]) - 1);
            }
LABEL_55:
            if ((*(_BYTE *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                i = *(_QWORD *)(i + 8);
            }
            v38 += v40;
          }
          v36 = (_QWORD *)v36[1];
          if (v36 == v35)
          {
LABEL_62:
            v44 = (_QWORD *)*v35;
            if ((_QWORD *)*v35 != v35)
            {
              v45 = (char *)v63[0] + 20 * LODWORD(v63[1]);
              do
              {
                v46 = v44[6] & 0xFFFFFFFFFFFFFFF8;
                if (!v46 || (*(_BYTE *)v46 & 4) == 0)
                {
                  while ((*(_WORD *)(v46 + 44) & 4) != 0)
                    v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
                }
                while ((_QWORD *)v46 != v44 + 6)
                {
                  v38 -= sub_1C4ABA864((uint64_t)v96, v46);
                  if ((*(_BYTE *)(*(_QWORD *)(v46 + 16) + 20) & 4) != 0)
                  {
                    if (*((_DWORD *)v45 - 5) > v38)
                      v45 -= 20;
                    if (*((_DWORD *)v45 - 5) == v38)
                      v47 = v38 - *((_DWORD *)v45 - 10);
                    else
                      v47 = -1;
                    v48 = *((_QWORD *)v45 - 2);
                    v60 = v62;
                    *(_QWORD *)v62 = v48;
                    v61 = 0x400000002;
                    sub_1C4ABAACC((uint64_t **)v86, v46, v47, v62);
                    if (v60 != v62)
                      free(v60);
                    v49 = *((_DWORD *)v45 - 2);
                    v57 = v59;
                    v59[0] = v49;
                    v58 = 0x400000001;
                    sub_1C4ABAACC((uint64_t **)v74, v46, v47, v59);
                    if (v57 != v59)
                      free(v57);
                    if (v33)
                    {
                      v50 = *((_DWORD *)v45 - 1);
                      v54 = v56;
                      v56[0] = v50;
                      v55 = 0x400000001;
                      sub_1C4ABAACC((uint64_t **)v67, v46, v47, v56);
                      if (v54 != v56)
                        free(v54);
                    }
                  }
                  v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
                  if (!v46 || (*(_BYTE *)v46 & 4) == 0)
                  {
                    while ((*(_WORD *)(v46 + 44) & 4) != 0)
                      v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                v44 = (_QWORD *)*v44;
              }
              while (v44 != (_QWORD *)(a2 + 320));
            }
            sub_1C4ABAD64((uint64_t)v86, a2);
            sub_1C4ABAD64((uint64_t)v74, a2);
            if (v33)
              sub_1C4ABAD64((uint64_t)v67, a2);
            if (v63[0] != &v64)
              free(v63[0]);
            if (v67[0] != v68)
              free(v67[0]);
            sub_1C4ABB360(v73[5]);
            if (v72 != v73)
              free(v72);
            if (v74[0] != v75)
              free(v74[0]);
            sub_1C4ABB360(v80[5]);
            if (v79 != v80)
              free(v79);
            if (v81 != &v83)
              free(v81);
            if (v86[0] != v87)
              free(v86[0]);
            sub_1C4ABB360(v92[5]);
            if (v91 != v92)
              free(v91);
            sub_1C4ABB360(v95[5]);
            if (v94 != v95)
              free(v94);
            if (v108 != v110)
              free(v108);
            v19 = v52;
            return v19 != 0;
          }
        }
      }
      v24 = (void (**)(void **))((char *)*v65 + 40);
    }
    (*v24)(v23);
    goto LABEL_24;
  }
  return v19 != 0;
}

uint64_t sub_1C4ABA6DC(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, int a6, char a7, uint64_t a8, char a9, char a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;

  *(_DWORD *)a1 = 100 * a4;
  *(_DWORD *)(a1 + 4) = 100 * a5;
  *(_DWORD *)(a1 + 8) = 100 * a6;
  *(_BYTE *)(a1 + 12) = a7;
  *(_QWORD *)(a1 + 16) = a8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = 0x7FFFFFFF00000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = a9;
  *(_BYTE *)(a1 + 49) = a10;
  v11 = a1 + 72;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  v12 = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0x800000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  v13 = (uint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 120) = 0;
  if (a3)
  {
    v14 = a2;
    v15 = &a2[a3];
    do
    {
      v16 = *v14;
      if (!*(_QWORD *)(a1 + 120))
      {
        v17 = *(_QWORD *)(a1 + 56);
        v18 = *(unsigned int *)(a1 + 64);
        if (!(_DWORD)v18)
          goto LABEL_12;
        v19 = 4 * v18;
        v20 = *(_DWORD **)(a1 + 56);
        while (*v20 != v16)
        {
          ++v20;
          v19 -= 4;
          if (!v19)
            goto LABEL_11;
        }
        if (v19)
          goto LABEL_15;
LABEL_11:
        if (v18 < 8)
        {
LABEL_12:
          if (v18 >= *(_DWORD *)(a1 + 68))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v12, v11, v18 + 1, 4);
            v17 = *(_QWORD *)(a1 + 56);
            v18 = *(unsigned int *)(a1 + 64);
          }
          *(_DWORD *)(v17 + 4 * v18) = v16;
          ++*(_DWORD *)(a1 + 64);
          goto LABEL_15;
        }
        do
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v18 - 4);
          sub_1C4ABB220(v13, v21, v21);
          LODWORD(v18) = *(_DWORD *)(a1 + 64) - 1;
          *(_DWORD *)(a1 + 64) = v18;
        }
        while ((_DWORD)v18);
      }
      sub_1C4ABB220(v13, v16, v16);
LABEL_15:
      ++v14;
    }
    while (v14 != v15);
  }
  return a1;
}

uint64_t sub_1C4ABA864(uint64_t a1, uint64_t a2)
{
  _WORD *v2;
  _WORD *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(_WORD **)(a2 + 16);
  if (*v2 == 6222)
    return 1;
  v5 = (_WORD *)(*(_QWORD *)(a1 + 40) + 24 * (unsigned __int16)v2[3]);
  if ((v5[4] & 0x1FFF) == 0x1FFE)
  {
    do
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 200))(*(_QWORD *)(a1 + 176));
      v9 = *(_QWORD *)(a1 + 40);
    }
    while ((*(_WORD *)(v9 + 24 * v8 + 8) & 0x1FFF) == 0x1FFE);
    v5 = (_WORD *)(v9 + 24 * v8);
  }
  if ((~(unsigned __int16)v5[4] & 0x1FFF) == 0 || !v5[6])
    return 100;
  v6 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 136) + 4 * (unsigned __int16)v5[5] + 2);
  v7 = 4 * (unsigned __int16)v5[6];
  while (*(_DWORD *)(a1 + 280) != *(v6 - 1))
  {
    v6 += 2;
    v7 -= 4;
    if (!v7)
      return 100;
  }
  return 100 * *v6;
}

unsigned int *sub_1C4ABA970(unsigned int *result, int a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = result[2];
  if (v3 >= result[3])
  {
    v13 = a2;
    v14 = 0;
    v15 = 0;
    v6 = v3 + 1;
    v7 = *(_QWORD *)result + 20 * (unint64_t)v3 > (unint64_t)&v13;
    if (*(_QWORD *)result <= (unint64_t)&v13 && v7)
    {
      v12 = (char *)&v13 - *(_QWORD *)result;
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 20);
      v8 = *(_QWORD *)v2;
      v9 = &v12[*(_QWORD *)v2];
    }
    else
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 20);
      v8 = *(_QWORD *)v2;
      v9 = (char *)&v13;
    }
    v10 = v8 + 20 * v2[2];
    v11 = *(_OWORD *)v9;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)v9 + 4);
    *(_OWORD *)v10 = v11;
    v5 = v2[2] + 1;
  }
  else
  {
    v4 = *(_QWORD *)result + 20 * v3;
    *(_DWORD *)v4 = a2;
    v5 = v3 + 1;
    *(_QWORD *)(v4 + 12) = 0;
    *(_QWORD *)(v4 + 4) = 0;
  }
  v2[2] = v5;
  return result;
}

BOOL sub_1C4ABAA54(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;

  v6 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((v6 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  result = sub_1C4ABB2D4(a1 + 56, v6);
  if (result)
  {
    ++*a3;
    if (!*(_QWORD *)(a1 + 40))
      *(_QWORD *)(a1 + 40) = a2;
  }
  return result;
}

uint64_t sub_1C4ABAACC(uint64_t **a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  uint64_t result;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;

  *((_BYTE *)a1 + 48) = 0;
  v6 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v6)
  {
    v9 = *a1;
    v10 = 8 * v6;
    while (1)
    {
      v11 = *v9;
      v13 = *a4++;
      v12 = v13;
      v14 = *((unsigned __int8 *)a1 + 49);
      v15 = sub_1C4ABA864(*(_QWORD *)(*v9 + 16), a2);
      v16 = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
      if ((v16 & 0xFF00000000) == 0)
        break;
      if (sub_1C4ABB2D4(v11 + 56, v16))
      {
        v17 = 0;
        *(_DWORD *)(v11 + 32) = 0;
        if (*(_QWORD *)(v11 + 40) == a2)
        {
          v17 = 0;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 4);
        }
      }
      else
      {
        v18 = *(_DWORD *)(v11 + 32);
        v17 = 0x7FFFFFFF;
        if (v18 != 0x7FFFFFFF)
        {
          v17 = v18 + v15;
          *(_DWORD *)(v11 + 32) = v18 + v15;
        }
      }
      v19 = *(_DWORD *)(v11 + 28) + v15;
      *(_DWORD *)(v11 + 28) = v19;
      if (*(_BYTE *)(v11 + 48) && *(_BYTE *)(v11 + 24))
      {
        if (v17 < v19 || (v20 = 0, v14) && v12 >= 1 && *(_BYTE *)(v11 + 12))
          v20 = 1;
      }
      else
      {
        v20 = 0;
      }
      if (*(_BYTE *)(v11 + 49) && v17 < *(_DWORD *)(v11 + 8))
        v20 = 1;
      if ((a3 & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v11 + 12))
          *(_DWORD *)(v11 + 32) = 0x7FFFFFFF;
        *(_DWORD *)(v11 + 28) = 0;
        *(_BYTE *)(v11 + 24) = *(_DWORD *)v11 > a3;
      }
      LOBYTE(v6) = *((_BYTE *)a1 + 48) | v20;
      *((_BYTE *)a1 + 48) = v6;
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_25;
    }
LABEL_48:
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  }
LABEL_25:
  v21 = *((unsigned __int8 *)a1 + 49);
  v22 = **(unsigned __int16 **)(a2 + 16);
  if (v21 != v6)
    goto LABEL_34;
  result = sub_1C4C915C4(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) == 0)
    goto LABEL_48;
  v24 = *(_QWORD **)(a2 + 24);
  if ((result - 13) > 1)
  {
    if (v24[7] != a2)
      return result;
    v25 = (_QWORD *)v24[4];
    if (v24 == (_QWORD *)v25[41])
    {
      v31 = (*(unsigned __int16 *)(*v25 + 18) >> 4) & 0x3FF;
      if (v31)
      {
        if (v31 != 255 && v31 != 8)
          return result;
      }
    }
    else if (((v24[9] - v24[8]) & 0x7FFFFFFF0) == 0)
    {
      return result;
    }
  }
  else
  {
    v25 = (_QWORD *)v24[4];
  }
  if ((*(_WORD *)(*v25 + 18) & 0x3FF0) != 0x640
    || ((v26 = v25[40], v33 = v26 + 48, result = sub_1C4ABB174((unint64_t *)&v33, v26), (_DWORD)result)
      ? (v27 = v33 == a2)
      : (v27 = 0),
        !v27))
  {
LABEL_34:
    v28 = a1[7];
    result = sub_1C4C2FD5C(v22);
    v30 = 1;
    if (!v21)
      v30 = 2;
    v29 = *(_QWORD *)(a2 + 32) + 32 * result;
    *(_QWORD *)(v29 + 16) = *(_QWORD *)(v29 + 16) & ~(3 << (char)v28) | (v30 << (char)v28);
    *((_BYTE *)a1 + 49) = *((_BYTE *)a1 + 48);
  }
  return result;
}

uint64_t sub_1C4ABAD64(uint64_t result, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  const Function *v8;
  const Function *v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39[4];
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (!*(_BYTE *)(result + 49))
    return result;
  v3 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  v4 = !v3 || v3 == 8;
  if (v4 || v3 == 255)
    return result;
  v5 = result;
  v6 = *(_QWORD *)(a2 + 344);
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EDED8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDED8))
  {
    byte_1ED7EDDFF = 1;
    __cxa_guard_release(&qword_1ED7EDED8);
  }
  if (!byte_1ED7EDDFF)
  {
    v9 = 0;
    goto LABEL_15;
  }
  v8 = (const Function *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 592))(v6, 100);
  v9 = v8;
  if (v8)
    v10 = v8 == *(const Function **)a2;
  else
    v10 = 1;
  if (v10)
  {
LABEL_15:
    v11 = *(_QWORD *)(a2 + 328);
    v12 = *(_QWORD *)(v11 + 56);
    v45 = (_QWORD *)v12;
    if (v12 != v11 + 48)
    {
      v13 = *(unsigned __int16 **)(v12 + 16);
      if ((v13[10] & 4) != 0)
      {
        v14 = *(_QWORD *)(v5 + 56);
        result = sub_1C4C2FD5C(*v13);
        if (((*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32 * result + 16) >> v14) & 3) == 2)
          return result;
      }
    }
    if (v9 == *(const Function **)a2)
    {
      v31 = *(_QWORD *)(a2 + 320);
      v39[0] = v31 + 48;
      result = sub_1C4ABB174(v39, v31);
      if ((_DWORD)result)
      {
        if (v39[0] == v12)
          return result;
      }
    }
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(llvm::MachineModuleInfo::getMachineFunction(*(llvm::MachineModuleInfo **)(a2 + 32), v8) + 320);
  v45 = (_QWORD *)(v11 + 48);
LABEL_19:
  if (sub_1C4ABB174((unint64_t *)&v45, v11))
  {
    v15 = (unint64_t)v45;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 32);
    v44 = 0;
    v39[0] = (unint64_t)&off_1E816EC08;
    v39[1] = v16;
    v39[3] = *(_QWORD *)(v16 + 40);
    v39[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 16) + 104))(*(_QWORD *)(v16 + 16));
    v40 = 0;
    v41 = v11;
    v17 = v45;
    v42 = (unint64_t)v45;
    v43 = 0;
    v19 = sub_1C55437B8(v39, 0x22Cu);
    v20 = (unint64_t *)v18;
    v21 = (_QWORD *)v42;
    v22 = *(_QWORD *)(v41 + 40);
    *(_QWORD *)(v18 + 24) = v22;
    v23 = *(_QWORD *)(v22 + 32);
    v24 = *(unsigned int *)(v18 + 40);
    if ((_DWORD)v24)
    {
      v32 = *(_QWORD *)(v18 + 32);
      v33 = *(_QWORD *)(v23 + 40);
      v34 = 32 * v24;
      do
      {
        if (!*(_BYTE *)v32)
        {
          v35 = *(unsigned int *)(v32 + 4);
          if ((int)v35 >= 0)
            v36 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
          else
            v36 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
          v37 = *v36;
          if (*v36)
          {
            v38 = *(_QWORD *)(v37 + 16);
            *(_QWORD *)(v37 + 16) = v32;
            *(_QWORD *)(v32 + 16) = v38;
            if ((*(_BYTE *)(v32 + 3) & 1) != 0)
            {
              *(_QWORD *)(v32 + 24) = v37;
            }
            else
            {
              *(_QWORD *)(v32 + 24) = 0;
              v36 = (uint64_t *)(v38 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v32 + 16) = v32;
            *(_QWORD *)(v32 + 24) = 0;
          }
          *v36 = v32;
        }
        v32 += 32;
        v34 -= 32;
      }
      while (v34);
    }
    v25 = *(_QWORD *)(v23 + 728);
    if (v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v18);
    v26 = *v21 & 0xFFFFFFFFFFFFFFF8;
    *v20 = v26 | *v20 & 7;
    v20[1] = (unint64_t)v21;
    *(_QWORD *)(v26 + 8) = v20;
    *v21 = *v21 & 7 | (unint64_t)v20;
    if (v43)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v43 + 24))(v43, v20);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v46 = 0x18701000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    v47 = 0;
    v48 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v46);
    v47 = 0;
    v48 = 0;
    v46 = 0x18700000000;
    v49 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    v47 = 0;
    v48 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v46);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v46 = 0x6712000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v46);
    v15 = *v17 & 0xFFFFFFFFFFFFFFF8;
    if (!v15 || (*(_BYTE *)v15 & 4) == 0)
    {
      while ((*(_WORD *)(v15 + 44) & 4) != 0)
        v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
    }
    v39[0] = (unint64_t)&off_1E816EC08;
    if (v40)
      llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  }
  v27 = *(_QWORD *)(v5 + 56);
  v28 = *(unsigned __int8 *)(v5 + 49);
  result = sub_1C4C2FD5C(**(unsigned __int16 **)(v15 + 16));
  v30 = 1;
  if (!v28)
    v30 = 2;
  v29 = *(_QWORD *)(v15 + 32) + 32 * result;
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v29 + 16) & ~(3 << v27) | (v30 << v27);
  return result;
}

BOOL sub_1C4ABB174(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t i;
  unsigned __int16 *v4;
  int v5;

  v2 = a2 + 48;
  for (i = *a1; v2 == i; *a1 = i)
  {
    if (v2 == *(_QWORD *)(a2 + 56))
      return 0;
LABEL_11:
    i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
    if (!i || (*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 4) != 0)
        i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v4 = *(unsigned __int16 **)(i + 16);
  if ((v4[10] & 4) == 0)
  {
    if (i == *(_QWORD *)(a2 + 56))
      return 0;
    goto LABEL_11;
  }
  v5 = *v4;
  if ((v5 == 6222 || v5 == 623) && i != *(_QWORD *)(a2 + 56))
    goto LABEL_11;
  return v5 != 623 && v5 != 6222;
}

uint64_t *sub_1C4ABB220(uint64_t *result, int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_1C4768E74((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

BOOL sub_1C4ABB2D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  BOOL v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v2 = a1 + 56;
    v3 = v4;
    if (!v4)
      goto LABEL_12;
    v5 = v2;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2)
LABEL_12:
      v5 = v2;
    v9 = v5 == v2;
  }
  else
  {
    v10 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(_QWORD *)a1 + 4 * v11;
    if ((_DWORD)v11)
    {
      v13 = 4 * v11;
      while (*v10 != a2)
      {
        ++v10;
        v13 -= 4;
        if (!v13)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v10 = (_DWORD *)v12;
    }
    v9 = v10 == (_DWORD *)v12;
  }
  return !v9;
}

void sub_1C4ABB360(_QWORD *a1)
{
  if (a1)
  {
    sub_1C4ABB360(*a1);
    sub_1C4ABB360(a1[1]);
    operator delete(a1);
  }
}

BOOL sub_1C4ABB39C(_DWORD *a1, const llvm::MachineInstr *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[48];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22 = 0x600000000;
  v20 = a3;
  v21 = v23;
  v5 = *(_DWORD *)(a3 + 44);
  v24 = v5;
  v6 = v5 + 63;
  if ((v5 + 63) < 0x40)
  {
    v11 = 0;
    v10 = v23;
  }
  else
  {
    v7 = v6 >> 6;
    if (v6 >= 0x1C0)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v6 >> 6, 8);
      v10 = v21;
      v8 = v22;
      LOBYTE(v5) = v24;
      v9 = v22;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = v23;
    }
    bzero(&v10[8 * v8], 8 * v7);
    v11 = (v9 + v7);
    LODWORD(v22) = v9 + v7;
  }
  if ((v5 & 0x3F) != 0)
    *(_QWORD *)&v10[8 * v11 - 8] &= ~(-1 << (v5 & 0x3F));
  llvm::LiveRegUnits::accumulate((llvm::LiveRegUnits *)&v20, a2);
  if (v20)
    v12 = (_QWORD *)(v20 + 8);
  else
    v12 = 0;
  v13 = (unsigned __int16 *)(v12[6]
                           + (((unint64_t)*(unsigned int *)(*v12 + 24 * (unsigned __int16)*a1 + 16) >> 3) & 0x1FFFFFFE));
  v15 = *v13;
  v14 = v13 + 1;
  v16 = v15 + (*(_DWORD *)(*v12 + 24 * (unsigned __int16)*a1 + 16) & 0xF) * *a1;
  do
  {
    v17 = (1 << v16) & v21[(unsigned __int16)v16 >> 6];
    if (v17)
      break;
    v18 = *v14++;
    LOWORD(v16) = v18 + v16;
  }
  while (v18);
  if (v21 != (_QWORD *)v23)
    free(v21);
  return v17 != 0;
}

uint64_t sub_1C4ABB53C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 RLD Promotion Pass";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "agx3-rld-promotion";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EDEE0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6153DDC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

const char *sub_1C4ABB5CC()
{
  return "AGX3 RLD Promotion Pass";
}

uint64_t sub_1C4ABB5DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  int v27;
  void **p_p;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void **i;
  int v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  const char *v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  unsigned __int8 v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _DWORD *v110;
  BOOL v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  int v117;
  _QWORD *v118;
  void *__p;
  uint64_t v120;
  _OWORD v121[4];
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD v133[12];

  v133[9] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v115 = a1;
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  memset(&v121[2], 0, 32);
  v122 = 0;
  v121[0] = llvm::MCSchedModel::Default;
  v121[1] = unk_1C86637F0;
  v124 = unk_1C86637F0;
  v125 = xmmword_1C8663800;
  v126 = unk_1C8663810;
  v127 = 0;
  v123 = llvm::MCSchedModel::Default;
  v129 = 0u;
  v130 = 0u;
  v128 = 0u;
  v131 = v133;
  v132 = 0x1000000000;
  v133[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v121, *(const llvm::TargetSubtargetInfo **)(a2 + 16));
  v4 = *(_QWORD **)(a2 + 328);
  v112 = (_QWORD *)(a2 + 320);
  if (v4 == (_QWORD *)(a2 + 320))
  {
    LOBYTE(v5) = 0;
    goto LABEL_163;
  }
  v5 = 0;
  do
  {
    v118 = &v118;
    __p = &v118;
    v120 = 0;
    v116 = v4 + 6;
    v6 = v4[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(_BYTE *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((_QWORD *)v6 == v116)
    {
      v7 = 0;
      goto LABEL_158;
    }
    v114 = v5;
    v7 = 0;
    do
    {
      v8 = v6;
      v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v6 || (*(_BYTE *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 4) != 0)
          v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
      }
      v9 = *(unsigned __int16 **)(v8 + 16);
      if ((*((_QWORD *)v9 + 2) & 0x400001C00) != 0x400000C00)
        goto LABEL_16;
      v67 = *(_QWORD *)(v8 + 48);
      if (v67 < 8)
        goto LABEL_16;
      if ((v67 & 7) != 0)
      {
        v110 = (_DWORD *)(v67 & 0xFFFFFFFFFFFFFFF8);
        v111 = (*(_QWORD *)(v8 + 48) & 7) != 3 || v110 == 0;
        if (v111 || *v110 != 1)
          goto LABEL_16;
      }
      else
      {
        *(_QWORD *)(v8 + 48) = v67 & 0xFFFFFFFFFFFFFFF8;
      }
      v68 = *v9;
      if ((v68 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v8 + 32) + 48) & 0x10) != 0)
        goto LABEL_16;
      v69 = *(_WORD *)(v8 + 44);
      if ((v69 & 0xC) != 0 && (v69 & 4) == 0)
      {
        if (llvm::MachineInstr::hasPropertyInBundle(v8, 0x100000, 1))
          goto LABEL_16;
        v9 = *(unsigned __int16 **)(v8 + 16);
        v68 = *v9;
      }
      else if ((v9[5] & 0x10) != 0)
      {
        goto LABEL_16;
      }
      if ((v70 = sub_1C4C915C4(v68), (v70 & 0xFF00000000) != 0) && v70 == 100
        || ((v71 = *(_QWORD *)(v8 + 48), (v71 & 7) != 0)
          ? (v72 = *(uint64_t **)((v71 & 0xFFFFFFFFFFFFFFF8) + 8))
          : (uint64_t *)(v72 = (uint64_t *)(v71 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v8 + 48) = v72),
            (v73 = *v72, (v73 & 4) == 0) || (v74 = v73 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v74 + 8) != 4))
      {
LABEL_16:
        v10 = __p;
        if (__p == &v118)
          continue;
        while (1)
        {
          v11 = v10[2];
          v12 = *((_DWORD *)v10 + 6);
          v13 = sub_1C4C2FD5C(**(unsigned __int16 **)(v11 + 16));
          v14 = *(_QWORD *)(v11 + 32);
          v15 = atomic_load((unsigned __int8 *)&qword_1ED7EDEF0);
          if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEF0))
          {
            dword_1ED7EDEE4 = 31;
            __cxa_guard_release(&qword_1ED7EDEF0);
          }
          if (v12 >= dword_1ED7EDEE4)
            goto LABEL_24;
          v16 = *(unsigned __int16 **)(v8 + 16);
          if ((*((_QWORD *)v16 + 2) & 0x400000040) != 0x400000000)
            goto LABEL_24;
          v17 = sub_1C4C915C4(*v16);
          if ((v17 & 0xFF00000000) == 0)
            llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
          if ((_DWORD)v17 == 6
            || (_DWORD)v17 == 83
            || (v117 = *(_DWORD *)(v14 + 32 * v13 + 4),
                sub_1C4ABB39C(&v117, (const llvm::MachineInstr *)v8, *(_QWORD *)(v115 + 248))))
          {
LABEL_24:
            v18 = v8;
            if ((*(_BYTE *)v8 & 4) == 0)
            {
              v18 = v8;
              if ((*(_WORD *)(v8 + 44) & 8) != 0)
              {
                v18 = v8;
                do
                  v18 = *(_QWORD *)(v18 + 8);
                while ((*(_WORD *)(v18 + 44) & 8) != 0);
              }
            }
            v19 = *(uint64_t **)(v18 + 8);
            v20 = v4[5];
            *(_QWORD *)(v11 + 24) = v20;
            v21 = *(_QWORD *)(v20 + 32);
            v22 = *(unsigned int *)(v11 + 40);
            if ((_DWORD)v22)
            {
              v29 = *(_QWORD *)(v11 + 32);
              v30 = *(_QWORD *)(v21 + 40);
              v31 = 32 * v22;
              do
              {
                if (!*(_BYTE *)v29)
                {
                  v32 = *(unsigned int *)(v29 + 4);
                  if ((int)v32 >= 0)
                    v33 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v32);
                  else
                    v33 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
                  v34 = *v33;
                  if (*v33)
                  {
                    v35 = *(_QWORD *)(v34 + 16);
                    *(_QWORD *)(v34 + 16) = v29;
                    *(_QWORD *)(v29 + 16) = v35;
                    if ((*(_BYTE *)(v29 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v29 + 24) = v34;
                    }
                    else
                    {
                      *(_QWORD *)(v29 + 24) = 0;
                      v33 = (uint64_t *)(v35 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v29 + 16) = v29;
                    *(_QWORD *)(v29 + 24) = 0;
                  }
                  *v33 = v29;
                }
                v29 += 32;
                v31 -= 32;
              }
              while (v31);
            }
            v23 = *(_QWORD *)(v21 + 728);
            if (v23)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v11);
            v24 = *v19 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v11 = v24 | *(_QWORD *)v11 & 7;
            *(_QWORD *)(v11 + 8) = v19;
            *(_QWORD *)(v24 + 8) = v11;
            *v19 = *v19 & 7 | v11;
            v25 = *v10;
            *(_QWORD *)(v25 + 8) = v10[1];
            *(_QWORD *)v10[1] = v25;
            --v120;
            operator delete(v10);
            v26 = (void **)__p;
            if (__p == &v118)
            {
              v7 = 1;
              goto LABEL_67;
            }
            do
            {
              if ((*(_BYTE *)(*(_QWORD *)(v11 + 16) + 20) & 4) != 0)
                v27 = sub_1C49F97A0(v11, (uint64_t)v121, 0);
              else
                v27 = 1;
              *((_DWORD *)v26 + 6) += v27;
              v26 = (void **)v26[1];
            }
            while (v26 != (void **)&v118);
            v7 = 1;
            p_p = &__p;
            goto LABEL_37;
          }
          v36 = *(_QWORD *)(v11 + 48);
          if ((v36 & 7) != 0)
          {
            v37 = *(_QWORD **)((v36 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v37 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v11 + 48) = v36 & 0xFFFFFFFFFFFFFFF8;
          }
          v38 = (int *)(v8 + 48);
          v39 = *(_QWORD *)(v8 + 48);
          if (v39 >= 8)
          {
            v40 = *v37;
            v41 = (int *)(v39 & 0xFFFFFFFFFFFFFFF8);
            v42 = *(_QWORD *)(v8 + 48) & 7;
            if (v42)
            {
              if (v42 != 3)
                goto LABEL_60;
              if (!v41)
                goto LABEL_60;
              v49 = *v41;
              v48 = v41 + 2;
              v47 = v49;
              if (!(_DWORD)v49)
                goto LABEL_60;
              v50 = &v48[2 * v47];
              v38 = v48;
            }
            else
            {
              v50 = (int *)(v8 + 56);
              *(_QWORD *)(v8 + 48) = v41;
            }
            v43 = v40 & (v40 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8;
            while (1)
            {
              v44 = *(_QWORD **)v38;
              if ((**(_QWORD **)v38 & ((uint64_t)(**(_QWORD **)v38 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) == v43)
                break;
              v38 += 2;
              if (v38 == v50)
                goto LABEL_60;
            }
            if (*v37 >= 8uLL && (*v37 & 4) == 0)
              goto LABEL_24;
            v53 = v37[3];
            v52 = v37 + 3;
            v54 = *(v52 - 2);
            v113 = v44[1];
            if ((v53 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v56 = (unint64_t)(sub_1C4825F50(v52) + 7) >> 3;
              if ((_DWORD)v55 == 1)
            }
            else
            {
              v56 = -1;
            }
            v58 = v44[3];
            v57 = v44 + 3;
            if ((v58 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v60 = (unint64_t)(sub_1C4825F50(v57) + 7) >> 3;
              if ((_DWORD)v59 == 1)
            }
            else
            {
              v60 = -1;
            }
            v61 = (uint64_t)(v56 + v54) > v113;
            if (v54 >= v113)
              v61 = (uint64_t)(v60 + v113) > v54;
            if (v61)
              goto LABEL_24;
          }
LABEL_60:
          p_p = (void **)(v10 + 1);
LABEL_37:
          v10 = *p_p;
          if (*p_p == &v118)
          {
            for (i = (void **)__p; i != (void **)&v118; i = (void **)i[1])
            {
              if ((*(_BYTE *)(*(_QWORD *)(v8 + 16) + 20) & 4) != 0)
                v46 = sub_1C49F97A0(v8, (uint64_t)v121, 0);
              else
                v46 = 1;
              *((_DWORD *)i + 6) += v46;
            }
            goto LABEL_67;
          }
        }
      }
      v117 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 32 * sub_1C4C2FD5C(*v9) + 4);
      v62 = v8;
      if ((*(_BYTE *)v8 & 4) == 0)
      {
        v62 = v8;
        if ((*(_WORD *)(v8 + 44) & 8) != 0)
        {
          v62 = v8;
          do
            v62 = *(_QWORD *)(v62 + 8);
          while ((*(_WORD *)(v62 + 44) & 8) != 0);
        }
      }
      v65 = *(_QWORD *)(v62 + 8);
      if ((_QWORD *)v65 == v116)
      {
        v66 = 1;
      }
      else
      {
        v88 = *(_QWORD *)(v115 + 248);
        v66 = 1;
        do
        {
          v63 = atomic_load((unsigned __int8 *)&qword_1ED7EDEF0);
          if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDEF0))
          {
            dword_1ED7EDEE4 = 31;
            __cxa_guard_release(&qword_1ED7EDEF0);
          }
          if (v66 >= dword_1ED7EDEE4 || sub_1C4ABB39C(&v117, (const llvm::MachineInstr *)v65, v88))
            break;
          if ((*(_BYTE *)(*(_QWORD *)(v65 + 16) + 20) & 4) != 0)
            v64 = sub_1C49F97A0(v65, (uint64_t)v121, 0);
          else
            v64 = 1;
          if ((*(_BYTE *)v65 & 4) == 0)
          {
            while ((*(_WORD *)(v65 + 44) & 8) != 0)
              v65 = *(_QWORD *)(v65 + 8);
          }
          v66 += v64;
          v65 = *(_QWORD *)(v65 + 8);
        }
        while ((_QWORD *)v65 != v116);
      }
      v89 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 32);
      if (v89)
      {
        v90 = *(_QWORD *)(v89 + 728);
        if (v90)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 32))(v90, v8);
        v91 = *(unsigned int *)(v8 + 40);
        if ((_DWORD)v91)
        {
          v81 = *(_QWORD *)(v8 + 32);
          v92 = *(_QWORD *)(v89 + 40);
          v82 = 32 * v91;
          do
          {
            if (!*(_BYTE *)v81)
            {
              v75 = *(unsigned int *)(v81 + 4);
              if ((v75 & 0x80000000) != 0)
                v76 = (uint64_t *)(*(_QWORD *)(v92 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
              else
                v76 = (uint64_t *)(*(_QWORD *)(v92 + 272) + 8 * v75);
              v77 = *v76;
              v79 = *(_QWORD *)(v81 + 16);
              v78 = *(_QWORD *)(v81 + 24);
              if (v81 != *v76)
                v76 = (uint64_t *)(v79 + 24);
              *v76 = v78;
              if (v78)
                v80 = v78;
              else
                v80 = v77;
              *(_QWORD *)(v80 + 16) = v79;
              *(_QWORD *)(v81 + 16) = 0;
              *(_QWORD *)(v81 + 24) = 0;
            }
            v81 += 32;
            v82 -= 32;
          }
          while (v82);
        }
      }
      *(_QWORD *)(v8 + 24) = 0;
      v83 = *(unint64_t **)(v8 + 8);
      v84 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      *v83 = v84 | *v83 & 7;
      *(_QWORD *)(v84 + 8) = v83;
      *(_QWORD *)v8 &= 7uLL;
      *(_QWORD *)(v8 + 8) = 0;
      v85 = operator new(0x20uLL);
      v85[1] = &v118;
      v85[2] = v8;
      *((_DWORD *)v85 + 6) = v66;
      v86 = v118;
      *v85 = v118;
      v86[1] = v85;
      v118 = v85;
      ++v120;
LABEL_67:
      ;
    }
    while ((_QWORD *)v6 != v116);
    v87 = v120;
    v5 = v114;
    if (v120)
    {
      do
      {
        v100 = (_QWORD **)__p;
        v101 = *((_QWORD *)__p + 2);
        v102 = *(_QWORD *)__p;
        *(_QWORD *)(v102 + 8) = *((_QWORD *)__p + 1);
        *v100[1] = v102;
        v120 = v87 - 1;
        operator delete(v100);
        v103 = (uint64_t *)v4[7];
        v104 = v4[5];
        *(_QWORD *)(v101 + 24) = v104;
        v105 = *(_QWORD *)(v104 + 32);
        v106 = *(unsigned int *)(v101 + 40);
        if ((_DWORD)v106)
        {
          v93 = *(_QWORD *)(v101 + 32);
          v94 = *(_QWORD *)(v105 + 40);
          v95 = 32 * v106;
          do
          {
            if (!*(_BYTE *)v93)
            {
              v96 = *(unsigned int *)(v93 + 4);
              if ((int)v96 >= 0)
                v97 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v96);
              else
                v97 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
              v98 = *v97;
              if (*v97)
              {
                v99 = *(_QWORD *)(v98 + 16);
                *(_QWORD *)(v98 + 16) = v93;
                *(_QWORD *)(v93 + 16) = v99;
                if ((*(_BYTE *)(v93 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v93 + 24) = v98;
                }
                else
                {
                  *(_QWORD *)(v93 + 24) = 0;
                  v97 = (uint64_t *)(v99 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v93 + 16) = v93;
                *(_QWORD *)(v93 + 24) = 0;
              }
              *v97 = v93;
            }
            v93 += 32;
            v95 -= 32;
          }
          while (v95);
        }
        v107 = *(_QWORD *)(v105 + 728);
        if (v107)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 24))(v107, v101);
        v108 = *v103 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v101 = v108 | *(_QWORD *)v101 & 7;
        *(_QWORD *)(v101 + 8) = v103;
        *(_QWORD *)(v108 + 8) = v101;
        *v103 = *v103 & 7 | v101;
        v87 = v120;
      }
      while (v120);
      v7 = 1;
    }
LABEL_158:
    v5 |= v7;
    v4 = (_QWORD *)v4[1];
  }
  while (v4 != v112);
LABEL_163:
  if (v131 != v133)
    free(v131);
  return v5 & 1;
}

void sub_1C4ABC048(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int NextResourceCycle;
  uint64_t v34;
  BOOL v35;
  int v36;
  _DWORD *v37;
  int v38;
  int v39;

  if (*(_BYTE *)(a1 + 1674))
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
    {
      if (byte_1ED8303C8 && (v34 = *(_QWORD *)(a1 + 128), *(_QWORD *)(v34 + 672)))
      {
        v6 = llvm::TargetSchedModel::resolveSchedClass((llvm::TargetSchedModel *)(v34 + 632), *(const llvm::MachineInstr **)(a2 + 8));
        *(_QWORD *)(a2 + 24) = v6;
      }
      else
      {
        v6 = 0;
      }
    }
    if (*(_WORD *)(v6 + 12))
    {
      v7 = *(unsigned __int16 *)(a1 + 1676);
      v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 136)
                              + 4 * *(unsigned __int16 *)(v6 + 10)
                              + 2);
      v9 = 4 * *(unsigned __int16 *)(v6 + 12);
      while (*(v8 - 1) != v7)
      {
        v8 += 2;
        v9 -= 4;
        if (!v9)
          goto LABEL_9;
      }
      v10 = *v8;
      if (v10 >= 2)
      {
        NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1 + 848, v6, v7, v10);
        if (*(_DWORD *)(a1 + 996) < NextResourceCycle)
          llvm::SchedBoundary::bumpCycle(a1 + 848, NextResourceCycle);
      }
    }
LABEL_9:
    if (*(_QWORD *)(a1 + 1736))
    {
      v32 = *(_DWORD *)(a1 + 1728) + 1;
      *(_DWORD *)(a1 + 1728) = v32;
      if (v32 >= 9)
      {
        *(_DWORD *)(a1 + 1728) = 0;
        *(_QWORD *)(a1 + 1736) = 0;
      }
    }
    v11 = *(_DWORD *)(a1 + 996);
    v12 = *(_DWORD *)(a2 + 192);
    if (v12 != -1)
    {
      v13 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 8) + 16);
      v14 = *((_QWORD *)v13 + 2);
      if ((v14 & 0x400000000) != 0)
      {
        if ((v14 & 2) != 0
          || ((v15 = sub_1C4C915C4(*v13), (v15 & 0xFF00000000) != 0)
            ? (v16 = (v15 - 79) > 1)
            : (v16 = 1),
              !v16))
        {
          *(_QWORD *)(a1 + 1736) = a2;
          *(_DWORD *)(a1 + 1728) = 0;
          v12 = *(_DWORD *)(a2 + 192);
        }
      }
    }
    v38 = v12;
    v39 = 0;
    v17 = *(_DWORD *)(a1 + 1696);
    if (v17)
    {
      v18 = *(_QWORD *)(a1 + 1680);
      v19 = v17 - 1;
      v20 = (v17 - 1) & (37 * v12);
      v21 = (_DWORD *)(v18 + 8 * v20);
      v22 = *v21;
      if (v12 == *v21)
      {
LABEL_45:
        v31 = *(_DWORD *)(v18 + 8 * v20 + 4);
        v30 = *(_QWORD *)(a1 + 1704);
LABEL_28:
        *(_DWORD *)(v30 + 8 * v31 + 4) = v11;
        goto LABEL_29;
      }
      v23 = 0;
      v24 = 1;
      while (v22 != -1)
      {
        if (v23)
          v35 = 0;
        else
          v35 = v22 == -2;
        if (v35)
          v23 = v21;
        v36 = v20 + v24++;
        v20 = v36 & v19;
        v21 = (_DWORD *)(v18 + 8 * v20);
        v22 = *v21;
        if (v12 == *v21)
          goto LABEL_45;
      }
      if (v23)
        v25 = v23;
      else
        v25 = v21;
    }
    else
    {
      v25 = 0;
    }
    v26 = sub_1C476C0AC(a1 + 1680, (uint64_t)&v38, &v38, v25);
    *v26 = v38;
    v26[1] = v39;
    v27 = *(unsigned int *)(a2 + 192);
    v28 = *(uint64_t **)(a1 + 1712);
    if ((unint64_t)v28 >= *(_QWORD *)(a1 + 1720))
    {
      v37 = v26;
      v29 = sub_1C4ABDC28((void **)(a1 + 1704), v27);
      v26 = v37;
    }
    else
    {
      *v28 = v27;
      v29 = v28 + 1;
    }
    *(_QWORD *)(a1 + 1712) = v29;
    v30 = *(_QWORD *)(a1 + 1704);
    v31 = (((unint64_t)v29 - v30) >> 3) - 1;
    v26[1] = v31;
    goto LABEL_28;
  }
LABEL_29:
  llvm::GenericScheduler::schedNode(a1, a2, a3);
}

uint64_t sub_1C4ABC2CC(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  unsigned int v8;
  int v12;
  int v13;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  _BYTE *v24;
  unsigned int v25;

  v7 = a1[1];
  v8 = a2[1];
  if (v7 >> 15 > v8 >> 15)
    goto LABEL_23;
  if (v7 >> 15 < v8 >> 15)
    goto LABEL_21;
  v12 = *a1;
  v13 = *a2;
  if (v12 != v13)
  {
    if (*a1)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a5 + 272))(a5, a6, (unsigned __int16)(v12 - 1));
      v18 = *a2;
    }
    else
    {
      v17 = 0x7FFFFFFF;
      v18 = *a2;
    }
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a5 + 272))(a5, a6, (unsigned __int16)(v13 - 1));
    else
      v19 = 0x7FFFFFFF;
    v20 = (__int16)a1[1];
    v21 = v20 < 0;
    if (v20 >= 0)
      v22 = v17;
    else
      v22 = v19;
    if (v21)
      v23 = v17;
    else
      v23 = v19;
    if (v22 <= v23)
    {
      if (v22 >= v23)
        return 0;
      v25 = *(unsigned __int8 *)(a4 + 16);
      v24 = (_BYTE *)(a4 + 16);
      if (v25 >= 0xA)
        goto LABEL_24;
      return 1;
    }
LABEL_23:
    v24 = (_BYTE *)(a3 + 16);
LABEL_24:
    *v24 = 9;
    return 1;
  }
  if ((__int16)v7 < (__int16)v8)
    goto LABEL_23;
  if ((__int16)v7 <= (__int16)v8)
    return 0;
LABEL_21:
  v24 = (_BYTE *)(a4 + 16);
  if (*(unsigned __int8 *)(a4 + 16) > 9u)
    goto LABEL_24;
  return 1;
}

uint64_t sub_1C4ABC404(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;

  v6 = *(_QWORD *)(a2 + 8);
  if (a3[6] == 1)
  {
    if ((*(_BYTE *)(v6 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
    v7 = a3[40];
    if (v7 <= a3[37])
      v7 = a3[37];
    if (*(_DWORD *)(v6 + 240) > v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(v8 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a1 + 8));
      v9 = *(_DWORD *)(v8 + 240);
      v10 = *(_QWORD *)(a2 + 8);
      if ((*(_BYTE *)(v10 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
      v11 = *(_DWORD *)(v10 + 240);
      if (v9 < v11)
      {
        v12 = 15;
LABEL_45:
        *(_BYTE *)(a1 + 16) = v12;
        return 1;
      }
      if (v9 > v11)
      {
        if (*(unsigned __int8 *)(a2 + 16) >= 0x10u)
        {
          v18 = 15;
          goto LABEL_50;
        }
        return 1;
      }
    }
    v19 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v19 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a1 + 8));
    v20 = *(_DWORD *)(v19 + 244);
    v21 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(v21 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a2 + 8));
    v22 = *(_DWORD *)(v21 + 244);
    if (v20 > v22)
    {
      v12 = 16;
      goto LABEL_45;
    }
    if (v20 < v22)
    {
      if (*(unsigned __int8 *)(a2 + 16) >= 0x11u)
      {
        v18 = 16;
        goto LABEL_50;
      }
      return 1;
    }
  }
  else
  {
    if ((*(_BYTE *)(v6 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a2 + 8));
    v13 = a3[40];
    if (v13 <= a3[37])
      v13 = a3[37];
    if (*(_DWORD *)(v6 + 244) > v13)
    {
      v14 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(v14 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a1 + 8));
      v15 = *(_DWORD *)(v14 + 244);
      v16 = *(_QWORD *)(a2 + 8);
      if ((*(_BYTE *)(v16 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a2 + 8));
      v17 = *(_DWORD *)(v16 + 244);
      if (v15 < v17)
      {
        v12 = 13;
        goto LABEL_45;
      }
      if (v15 > v17)
      {
        if (*(unsigned __int8 *)(a2 + 16) >= 0xEu)
        {
          v18 = 13;
          goto LABEL_50;
        }
        return 1;
      }
    }
    v23 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v23 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a1 + 8));
    v24 = *(_DWORD *)(v23 + 240);
    v25 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(v25 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
    v26 = *(_DWORD *)(v25 + 240);
    if (v24 > v26)
    {
      v12 = 14;
      goto LABEL_45;
    }
    if (v24 < v26)
    {
      if (*(unsigned __int8 *)(a2 + 16) < 0xFu)
        return 1;
      v18 = 14;
LABEL_50:
      *(_BYTE *)(a2 + 16) = v18;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1C4ABC604(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  char *v37;
  unsigned int v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  char v48;
  char v49;
  int WeakLeft;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;

  if (!*((_QWORD *)a2 + 1))
  {
LABEL_100:
    v49 = 17;
    goto LABEL_101;
  }
  v6 = a3[32];
  v7 = a2[32];
  if (v6 > v7)
  {
    v49 = 2;
    goto LABEL_101;
  }
  if (v6 < v7)
  {
    if (a2[16] < 3u)
      return result;
    v48 = 2;
    goto LABEL_79;
  }
  v9 = result;
  v10 = llvm::biasPhysReg(*((_QWORD *)a3 + 1), a3[30]);
  result = llvm::biasPhysReg(*((_QWORD *)a2 + 1), a2[30]);
  if (v10 > (int)result)
  {
    v49 = 3;
LABEL_101:
    a3[16] = v49;
    return result;
  }
  if (v10 < (int)result)
  {
    if (a2[16] < 4u)
      return result;
    v48 = 3;
    goto LABEL_79;
  }
  v11 = *(_QWORD *)(v9 + 128);
  if (!*(_BYTE *)(v11 + 3120))
    goto LABEL_17;
  v12 = *((unsigned __int16 *)a3 + 10);
  v13 = *((unsigned __int16 *)a2 + 10);
  if (v12 >> 15 > v13 >> 15)
    goto LABEL_68;
  if (v12 >> 15 < v13 >> 15)
    goto LABEL_64;
  v14 = *(_QWORD *)(v9 + 24);
  v15 = *(_QWORD *)(v11 + 32);
  v16 = *((unsigned __int16 *)a3 + 9);
  v17 = *((unsigned __int16 *)a2 + 9);
  if (v16 != v17)
  {
    if (*((_WORD *)a3 + 9))
      v32 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v14 + 272))(*(_QWORD *)(v9 + 24), v15, (unsigned __int16)(v16 - 1));
    else
      v32 = 0x7FFFFFFF;
    if (*((_WORD *)a2 + 9))
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 272))(v14, v15, (unsigned __int16)(v17 - 1));
    else
      result = 0x7FFFFFFFLL;
    v33 = *((__int16 *)a3 + 10);
    v34 = v33 < 0;
    if (v33 >= 0)
      v35 = v32;
    else
      v35 = result;
    if (v34)
      v36 = v32;
    else
      v36 = result;
    if (v35 <= v36)
    {
      if (v35 >= v36)
      {
        v66 = *(_QWORD *)(v9 + 128);
        if (!*(_BYTE *)(v66 + 3120))
          goto LABEL_17;
        v14 = *(_QWORD *)(v9 + 24);
        v15 = *(_QWORD *)(v66 + 32);
        goto LABEL_12;
      }
      v38 = a2[16];
      v37 = (char *)(a2 + 16);
      if (v38 < 5)
        return result;
LABEL_69:
      v47 = 4;
LABEL_70:
      *v37 = v47;
      return result;
    }
LABEL_68:
    v37 = (char *)(a3 + 16);
    goto LABEL_69;
  }
  if ((__int16)v12 < (__int16)v13)
    goto LABEL_68;
  if ((__int16)v12 > (__int16)v13)
  {
LABEL_64:
    v45 = a2[16];
    v37 = (char *)(a2 + 16);
    if (v45 <= 4)
      return result;
    goto LABEL_69;
  }
LABEL_12:
  v18 = *((unsigned __int16 *)a3 + 12);
  v19 = *((unsigned __int16 *)a2 + 12);
  if (v18 >> 15 > v19 >> 15)
    goto LABEL_71;
  if (v18 >> 15 < v19 >> 15)
  {
LABEL_66:
    v46 = a2[16];
    v37 = (char *)(a2 + 16);
    if (v46 <= 5)
      return result;
    goto LABEL_72;
  }
  v20 = *((unsigned __int16 *)a3 + 11);
  v21 = *((unsigned __int16 *)a2 + 11);
  if (v20 == v21)
  {
    if ((__int16)v18 >= (__int16)v19)
    {
      if ((__int16)v18 <= (__int16)v19)
        goto LABEL_17;
      goto LABEL_66;
    }
    goto LABEL_71;
  }
  v39 = *((_WORD *)a3 + 11)
      ? (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 272))(v14, v15, (unsigned __int16)(v20 - 1)): 0x7FFFFFFF;
  result = *((_WORD *)a2 + 11)
         ? (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 272))(v14, v15, (unsigned __int16)(v21 - 1)): 0x7FFFFFFFLL;
  v40 = *((__int16 *)a3 + 12);
  v41 = v40 < 0;
  v42 = v40 >= 0 ? v39 : result;
  v43 = v41 ? v39 : result;
  if (v42 > v43)
  {
LABEL_71:
    v37 = (char *)(a3 + 16);
LABEL_72:
    v47 = 5;
    goto LABEL_70;
  }
  if (v42 < v43)
  {
    v44 = a2[16];
    v37 = (char *)(a2 + 16);
    if (v44 < 6)
      return result;
    goto LABEL_72;
  }
LABEL_17:
  if (!a4)
    goto LABEL_25;
  if (!*(_BYTE *)(v9 + 44) || a4[38] || (result = sub_1C4ABC404((uint64_t)a3, (uint64_t)a2, a4), (result & 1) == 0))
  {
    v22 = *((_QWORD *)a3 + 1);
    if ((*(_WORD *)(v22 + 228) & 0x4000) != 0)
    {
      v59 = 252;
      if (a4[6] == 1)
        v59 = 248;
      v60 = *(_DWORD *)(v22 + v59);
      v61 = a4[37];
      v62 = v60 >= v61;
      v23 = v60 - v61;
      if (!v62)
        v23 = 0;
    }
    else
    {
      v23 = 0;
    }
    v24 = *((_QWORD *)a2 + 1);
    if ((*(_WORD *)(v24 + 228) & 0x4000) != 0)
    {
      v63 = 252;
      if (a4[6] == 1)
        v63 = 248;
      v64 = *(_DWORD *)(v24 + v63);
      v65 = a4[37];
      v62 = v64 >= v65;
      v25 = v64 - v65;
      if (!v62)
        v25 = 0;
    }
    else
    {
      v25 = 0;
    }
    if (v23 < v25)
    {
      v49 = 6;
      goto LABEL_101;
    }
    if (v23 > v25)
    {
      if (a2[16] < 7u)
        return result;
      v48 = 6;
      goto LABEL_79;
    }
LABEL_25:
    v26 = *(_QWORD *)(v9 + 128);
    v27 = (uint64_t *)(v26 + 2696);
    if (a2[30])
      v28 = (uint64_t *)(v26 + 2704);
    else
      v28 = (uint64_t *)(v26 + 2696);
    v29 = *v28;
    if (a3[30])
      v27 = (uint64_t *)(v26 + 2704);
    v30 = *v27;
    result = *((_QWORD *)a3 + 1);
    v31 = *((_QWORD *)a2 + 1);
    if (result == v30 && v31 != v29)
    {
      v49 = 7;
      goto LABEL_101;
    }
    if (result != v30 && v31 == v29)
    {
      if (a2[16] < 8u)
        return result;
      v48 = 7;
      goto LABEL_79;
    }
    if (a4)
    {
      WeakLeft = llvm::getWeakLeft(result, a3[30] != 0);
      result = llvm::getWeakLeft(*((_QWORD *)a2 + 1), a2[30]);
      if (WeakLeft < (int)result)
      {
        v49 = 8;
        goto LABEL_101;
      }
      if (WeakLeft > (int)result)
      {
        if (a2[16] < 9u)
          return result;
        v48 = 8;
        goto LABEL_79;
      }
      v26 = *(_QWORD *)(v9 + 128);
    }
    if (*(_BYTE *)(v26 + 3120))
    {
      result = sub_1C4ABC2CC((unsigned __int16 *)a3 + 13, (unsigned __int16 *)a2 + 13, (uint64_t)a3, (uint64_t)a2, *(_QWORD *)(v9 + 24), *(_QWORD *)(v26 + 32));
      if ((result & 1) != 0)
        return result;
    }
    if (!*(_BYTE *)(v9 + 1744))
      goto LABEL_93;
    v51 = a3[31];
    v52 = a2[31];
    if (v51 > v52)
    {
      v49 = 10;
      goto LABEL_101;
    }
    if (v51 < v52)
    {
      if (a2[16] < 0xBu)
        return result;
      v48 = 10;
    }
    else
    {
LABEL_93:
      v53 = *a3;
      v54 = *a2;
      if (v53 > v54)
      {
        v49 = 11;
        goto LABEL_101;
      }
      if (v53 < v54)
      {
        if (a2[16] < 0xCu)
          return result;
        v48 = 11;
      }
      else
      {
        v55 = a3[1];
        v56 = a2[1];
        if (v55 > v56)
        {
          v49 = 12;
          goto LABEL_101;
        }
        if (v55 >= v56)
        {
          if (!a4)
            return result;
          v57 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 192);
          v58 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 192);
          if (a4[6] == 1)
          {
            if (v57 >= v58)
              return result;
          }
          else if (v57 <= v58)
          {
            return result;
          }
          goto LABEL_100;
        }
        if (a2[16] < 0xDu)
          return result;
        v48 = 12;
      }
    }
LABEL_79:
    a2[16] = v48;
  }
  return result;
}

void sub_1C4ABCB44(uint64_t a1, llvm::ScheduleDAGMI *a2)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned __int8 v6;
  double v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 v22;

  llvm::GenericScheduler::initialize((llvm::GenericScheduler *)a1, a2);
  v4 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)(a1 + 1664) = v4[144];
  *(_DWORD *)(a1 + 1668) = v4[143];
  *(_DWORD *)(a1 + 1660) = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v4 + 312))(v4, *((_QWORD *)a2 + 4));
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EDF08);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDF08))
  {
    qword_1ED7EDF00 = 0x3FE99999A0000000;
    __cxa_guard_release(&qword_1ED7EDF08);
  }
  v7 = *(double *)&qword_1ED7EDF00;
  LODWORD(v5) = *(_DWORD *)(a1 + 1660);
  *(_DWORD *)(a1 + 1656) = (*(double *)&qword_1ED7EDF00 * (double)v5);
  *(_DWORD *)(a1 + 1652) = 228;
  *(_DWORD *)(a1 + 1648) = (v7 * 228.0);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 3128) + 4 * *(unsigned int *)(a1 + 1664)) >= 0xE5u)
    *(_BYTE *)(a1 + 1673) = 1;
  *(_BYTE *)(a1 + 1674) = *(_BYTE *)(a1 + 138) ^ 1;
  *(_WORD *)(a1 + 1676) = 9;
  v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  v9 = *(_DWORD *)(a1 + 1688);
  if (v9 || *(_DWORD *)(a1 + 1692))
  {
    v10 = *(unsigned int *)(a1 + 1696);
    if (v10 <= 4 * v9 || v10 < 0x41)
    {
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD **)(a1 + 1680);
        v12 = 8 * v10;
        do
        {
          *v11 = -1;
          v11 += 2;
          v12 -= 8;
        }
        while (v12);
      }
      *(_QWORD *)(a1 + 1688) = 0;
    }
    else
    {
      sub_1C476BF54((_DWORD *)(a1 + 1680));
    }
  }
  v13 = *(_BYTE **)(a1 + 1704);
  *(_QWORD *)(a1 + 1712) = v13;
  if ((_DWORD)v8)
  {
    v14 = (4 * (int)v8 / 3u + 1) | ((unint64_t)(4 * (int)v8 / 3u + 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if (*(_DWORD *)(a1 + 1696) <= v16)
    {
      sub_1C476C234(a1 + 1680, v16 + 1);
      v13 = *(_BYTE **)(a1 + 1704);
    }
  }
  if (v8 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1720) - (_QWORD)v13) >> 3))
  {
    v17 = *(_BYTE **)(a1 + 1712);
    v18 = (char *)operator new(8 * v8);
    v19 = &v18[(v17 - v13) & 0xFFFFFFFFFFFFFFF8];
    v20 = v19;
    if (v17 != v13)
    {
      v20 = &v18[(v17 - v13) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v21 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v20 - 1) = v21;
        v20 -= 8;
      }
      while (v17 != v13);
    }
    *(_QWORD *)(a1 + 1704) = v20;
    *(_QWORD *)(a1 + 1712) = v19;
    *(_QWORD *)(a1 + 1720) = &v18[8 * v8];
    if (v13)
      operator delete(v13);
  }
  *(_QWORD *)(a1 + 1736) = 0;
  *(_DWORD *)(a1 + 1728) = 0;
  v22 = atomic_load((unsigned __int8 *)&qword_1ED7EDF10);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDF10))
  {
    byte_1ED7EDEF8 = 1;
    __cxa_guard_release(&qword_1ED7EDF10);
  }
  *(_BYTE *)(a1 + 1744) = byte_1ED7EDEF8;
}

void sub_1C4ABCDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const llvm::MachineInstr *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  int v54;
  unint64_t v55;
  uint64_t v57;
  int v58;
  unint64_t v59;
  int isIdenticalTo;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;

  *(_QWORD *)(a2 + 8) = a3;
  *(_BYTE *)(a2 + 30) = *(_BYTE *)(a1 + 1674) ^ 1;
  v9 = *(const llvm::MachineInstr **)(a3 + 8);
  v10 = *(_QWORD **)(a1 + 128);
  if (*(_BYTE *)(a1 + 138))
    llvm::RegPressureTracker::getMaxDownwardPressureDelta(a4, v9, a2 + 18, v10[476], (uint64_t)(v10[477] - v10[476]) >> 2, v10[391], (uint64_t)(v10[392] - v10[391]) >> 2);
  else
    llvm::RegPressureTracker::getUpwardPressureDelta(a4, (uint64_t)v9, (unsigned __int16 *)(v10[388] + ((unint64_t)*(unsigned int *)(a3 + 192) << 6)), a2 + 18, v10[476], (uint64_t)(v10[477] - v10[476]) >> 2, v10[391]);
  if (!*(_BYTE *)(a1 + 1674))
    return;
  if (*(_DWORD *)(a3 + 192) == -1)
    goto LABEL_54;
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(unsigned __int16 **)(v11 + 16);
  v13 = *v12;
  v14 = (v13 - 9) > 0x3C || ((1 << (v13 - 9)) & 0x1000000000000605) == 0;
  v15 = !v14 || v13 == 0;
  if (!v15 && (v12[4] & 0x10) == 0 && (v12[8] & 1) == 0)
    goto LABEL_54;
  if ((v12[4] & 8) != 0)
    goto LABEL_54;
  if (!*(_DWORD *)(v11 + 40))
    goto LABEL_54;
  if ((**(_DWORD **)(v11 + 32) & 0x10000FF) != 0x1000000)
    goto LABEL_54;
  if (sub_1C4AD4FB8(v11, 0, (_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) != 2)
    goto LABEL_54;
  v16 = *(unsigned int *)(a3 + 120);
  if (!(_DWORD)v16)
    goto LABEL_54;
  v17 = *(_QWORD **)(a3 + 112);
  v18 = 16 * v16;
  do
  {
    if ((*v17 & 6) != 0)
      goto LABEL_54;
    v19 = *v17 & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)(v19 + 192) == -1)
      goto LABEL_54;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(unsigned __int16 **)(v20 + 16);
    v22 = *v21;
    v23 = (v22 - 9) > 0x3C || ((1 << (v22 - 9)) & 0x1000000000000605) == 0;
    v24 = !v23 || v22 == 0;
    if (!v24 && (v21[4] & 0x10) == 0 && (v21[8] & 1) == 0
      || (v21[4] & 8) != 0
      || !*(_DWORD *)(v20 + 40)
      || (**(_DWORD **)(v20 + 32) & 0x10000FF) != 0x1000000
      || sub_1C4AD4FB8(v20, 0, (_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) != 2)
    {
      goto LABEL_54;
    }
    v17 += 2;
    v18 -= 16;
  }
  while (v18);
  v25 = *(unsigned int *)(a3 + 120);
  if (!(_DWORD)v25)
    goto LABEL_54;
  v26 = 0;
  v27 = *(_QWORD *)(a3 + 112);
  v28 = v27 + 16 * v25;
  v29 = *(_QWORD *)(a1 + 1680);
  v30 = *(unsigned int *)(a1 + 1696);
  v31 = v30 - 1;
  do
  {
    if ((_DWORD)v30)
    {
      v32 = *(_DWORD *)((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8) + 192);
      LODWORD(v33) = (37 * v32) & v31;
      v34 = (int *)(v29 + 8 * v33);
      v35 = *v34;
      if (v32 == *v34)
      {
LABEL_41:
        if ((int *)(v29 + 8 * v30) != v34)
        {
          v36 = *(_QWORD *)(a1 + 1704) + 8 * v34[1];
          goto LABEL_48;
        }
      }
      else
      {
        v37 = 1;
        while (v35 != -1)
        {
          v38 = v33 + v37++;
          v33 = v38 & v31;
          v35 = *(_DWORD *)(v29 + 8 * v33);
          if (v32 == v35)
          {
            v34 = (int *)(v29 + 8 * v33);
            goto LABEL_41;
          }
        }
      }
    }
    v36 = *(_QWORD *)(a1 + 1712);
LABEL_48:
    v39 = *(_DWORD *)(a5 + 148) - *(_DWORD *)(v36 + 4);
    v40 = *(_DWORD *)(v27 + 12);
    if (v39 < v40)
      return;
    v26 |= v39 == v40;
    v27 += 16;
  }
  while (v27 != v28);
  if ((v26 & 1) != 0)
  {
    if ((_DWORD)v25 == 1)
      *(_BYTE *)a2 = 1;
    else
      *(_BYTE *)(a2 + 1) = 1;
  }
LABEL_54:
  if (*(_BYTE *)(a1 + 1744))
  {
    v41 = *(_QWORD *)(a2 + 8);
    v42 = *(_QWORD *)(a1 + 1736);
    if (v41)
      v43 = v42 == 0;
    else
      v43 = 1;
    if (v43)
      goto LABEL_85;
    if (*(_DWORD *)(v41 + 192) == -1)
      goto LABEL_85;
    v44 = *(_QWORD *)(v41 + 8);
    v45 = *(unsigned __int16 **)(v44 + 16);
    v46 = *((_QWORD *)v45 + 2);
    if ((v46 & 0x400000000) == 0)
      goto LABEL_85;
    if ((v46 & 2) == 0)
    {
      v47 = sub_1C4C915C4(*v45);
      if ((v47 & 0xFF00000000) == 0 || (v47 - 79) > 1)
        goto LABEL_85;
    }
    if (*(_DWORD *)(v42 + 192) == -1)
      goto LABEL_85;
    v49 = *(_QWORD *)(v42 + 8);
    v50 = *(unsigned __int16 **)(v49 + 16);
    v51 = *((_QWORD *)v50 + 2);
    if ((v51 & 0x400000000) == 0)
      goto LABEL_85;
    if ((v51 & 2) == 0)
    {
      v52 = sub_1C4C915C4(*v50);
      if ((v52 & 0xFF00000000) == 0 || (v52 - 79) > 1)
        goto LABEL_85;
    }
    v54 = *v45;
    if ((unsigned __int16)(v54 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v44 + 32) + 48) & 0x10) != 0)
    {
LABEL_92:
      LODWORD(v57) = 1;
    }
    else
    {
      v55 = *((_QWORD *)v45 + 1);
      if ((*(_WORD *)(v44 + 44) & 0xC) != 0 && (*(_WORD *)(v44 + 44) & 4) == 0)
      {
        if ((v55 & 0x100000) != 0)
          goto LABEL_92;
        v64 = v44;
        do
        {
          v65 = *(unsigned __int16 *)(v64 + 44);
          LODWORD(v57) = (v65 >> 3) & 1;
          if ((v65 & 8) == 0)
            break;
          v64 = *(_QWORD *)(v64 + 8);
        }
        while ((*(_BYTE *)(*(_QWORD *)(v64 + 16) + 10) & 0x10) == 0);
      }
      else
      {
        v57 = (v55 >> 20) & 1;
      }
    }
    v58 = *v50;
    if ((unsigned __int16)(v58 - 1) <= 1u && (v66 = *(_QWORD *)(v49 + 32), (*(_BYTE *)(v66 + 48) & 0x10) != 0))
    {
      if ((v57 & 1) != 0)
        goto LABEL_109;
LABEL_85:
      LOBYTE(isIdenticalTo) = 0;
    }
    else
    {
      v59 = *((_QWORD *)v50 + 1);
      if ((*(_WORD *)(v49 + 44) & 0xC) != 0 && (*(_WORD *)(v49 + 44) & 4) == 0)
      {
        if ((v59 & 0x100000) != 0)
        {
LABEL_105:
          if ((v57 & 1) == 0)
            goto LABEL_85;
        }
        else
        {
          v67 = v49;
          while ((*(_WORD *)(v67 + 44) & 8) != 0)
          {
            v67 = *(_QWORD *)(v67 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v67 + 16) + 10) & 0x10) != 0)
              goto LABEL_105;
          }
          if ((v57 & 1) != 0)
            goto LABEL_85;
        }
      }
      else if ((_DWORD)v57 != ((v59 >> 20) & 1))
      {
        goto LABEL_85;
      }
      v66 = *(_QWORD *)(v49 + 32);
LABEL_109:
      v68 = sub_1C4C2FD5C(v54);
      v69 = sub_1C4C2FD5C(v58);
      isIdenticalTo = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(_QWORD *)(v44 + 32) + 32 * v68), (const llvm::MachineOperand *)(v66 + 32 * v69));
      if (isIdenticalTo)
      {
        v70 = sub_1C4C2FD5C(**(unsigned __int16 **)(v44 + 16));
        v71 = sub_1C4C2FD5C(**(unsigned __int16 **)(v49 + 16));
        LOBYTE(isIdenticalTo) = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(_QWORD *)(v44 + 32) + 32 * v70), (const llvm::MachineOperand *)(*(_QWORD *)(v49 + 32) + 32 * v71));
      }
    }
    *(_BYTE *)(a2 + 31) = isIdenticalTo;
  }
  v62 = *(_QWORD *)(a1 + 1712);
  if (*(_QWORD *)(a1 + 1704) != v62)
  {
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48);
    if (v63)
      *(_BYTE *)(a2 + 32) = sub_1C4AD7524(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(v63 + 272 * *(unsigned int *)(v62 - 8) + 8));
  }
}

_DWORD *sub_1C4ABD328(uint64_t a1, _BYTE *a2)
{
  _QWORD *v2;
  _DWORD *v5;
  _DWORD *v6;
  llvm::SchedBoundary *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  _BYTE v39[17];
  __int128 v40;
  _BYTE v41[17];

  v2 = *(_QWORD **)(a1 + 128);
  if (v2[335] == v2[336])
    return 0;
  *(_BYTE *)(a1 + 1672) = *(_DWORD *)(v2[614] + 4 * *(unsigned int *)(a1 + 1664)) >= *(_DWORD *)(a1 + 1648);
  v5 = (_DWORD *)(a1 + 144);
  v6 = (_DWORD *)(a1 + 848);
  if (*(_BYTE *)(a1 + 1674))
    v7 = (llvm::SchedBoundary *)(a1 + 848);
  else
    v7 = (llvm::SchedBoundary *)(a1 + 144);
  v8 = llvm::SchedBoundary::pickOnlyChoice(v7);
  if (!v8 || (v18 = (_DWORD *)v8, *(_BYTE *)(a1 + 1672)))
  {
    LOWORD(v38) = 0;
    *((_QWORD *)&v38 + 1) = 0;
    v39[0] = 0;
    *(_QWORD *)&v39[2] = 0;
    *(_QWORD *)&v39[9] = 0;
    v9 = a1 + 872;
    if (!*(_BYTE *)(a1 + 1674))
      v9 = a1 + 168;
    v10 = *(_QWORD *)(a1 + 128);
    v11 = v10 + 4160;
    v12 = v10 + 4840;
    v13 = *(_BYTE *)(a1 + 1674) ? v6 : v5;
    v14 = *(_BYTE *)(a1 + 1674) ? v12 : v11;
    v15 = *(uint64_t **)(v9 + 32);
    v16 = *(uint64_t **)(v9 + 40);
    if (v15 == v16)
    {
      v18 = 0;
    }
    else
    {
      do
      {
        v17 = *v15;
        LOWORD(v40) = 0;
        *((_QWORD *)&v40 + 1) = 0;
        v41[0] = 0;
        *(_QWORD *)&v41[2] = 0;
        *(_QWORD *)&v41[9] = 0;
        sub_1C4ABCDC8(a1, (uint64_t)&v40, v17, v14, (uint64_t)v13);
        sub_1C4ABC604(a1, (unsigned __int8 *)&v38, (unsigned __int8 *)&v40, v13);
        if (v41[0])
        {
          v38 = v40;
          *(_OWORD *)v39 = *(_OWORD *)v41;
          v39[16] = v41[16];
        }
        ++v15;
      }
      while (v15 != v16);
      v18 = (_DWORD *)*((_QWORD *)&v38 + 1);
    }
    if (*(_BYTE *)(a1 + 1672))
    {
      if (*(_BYTE *)(a1 + 1674))
      {
        v23 = *(uint64_t **)(a1 + 960);
        v24 = *(uint64_t **)(a1 + 968);
        if (v23 == v24)
          goto LABEL_20;
        do
        {
          v25 = *v23;
          LOWORD(v40) = 0;
          *((_QWORD *)&v40 + 1) = 0;
          v41[0] = 0;
          *(_QWORD *)&v41[2] = 0;
          *(_QWORD *)&v41[9] = 0;
          sub_1C4ABCDC8(a1, (uint64_t)&v40, v25, v14, (uint64_t)v6);
          sub_1C4ABC604(a1, (unsigned __int8 *)&v38, (unsigned __int8 *)&v40, v6);
          if (v41[0])
          {
            v38 = v40;
            *(_OWORD *)v39 = *(_OWORD *)v41;
            v39[16] = v41[16];
          }
          ++v23;
        }
        while (v23 != v24);
      }
      else
      {
        v32 = *(uint64_t **)(a1 + 256);
        v33 = *(uint64_t **)(a1 + 264);
        if (v32 == v33)
          goto LABEL_20;
        do
        {
          v34 = *v32;
          LOWORD(v40) = 0;
          *((_QWORD *)&v40 + 1) = 0;
          v41[0] = 0;
          *(_QWORD *)&v41[2] = 0;
          *(_QWORD *)&v41[9] = 0;
          sub_1C4ABCDC8(a1, (uint64_t)&v40, v34, v14, (uint64_t)v5);
          sub_1C4ABC604(a1, (unsigned __int8 *)&v38, (unsigned __int8 *)&v40, v5);
          if (v41[0])
          {
            v38 = v40;
            *(_OWORD *)v39 = *(_OWORD *)v41;
            v39[16] = v41[16];
          }
          ++v32;
        }
        while (v32 != v33);
      }
      v35 = (_DWORD *)*((_QWORD *)&v38 + 1);
      if (*((_DWORD **)&v38 + 1) == v18)
        goto LABEL_20;
      if (*(_BYTE *)(a1 + 1674) && (v36 = *(_DWORD *)(*((_QWORD *)&v38 + 1) + 252), v36 > *(_DWORD *)(a1 + 996)))
      {
        v37 = (uint64_t)v6;
      }
      else
      {
        v36 = *(_DWORD *)(*((_QWORD *)&v38 + 1) + 248);
        if (v36 <= *(_DWORD *)(a1 + 292))
          goto LABEL_64;
        v37 = (uint64_t)v5;
      }
      llvm::SchedBoundary::bumpCycle(v37, v36);
LABEL_64:
      v18 = v35;
    }
  }
LABEL_20:
  *a2 = *(_BYTE *)(a1 + 1674) ^ 1;
  if (!v18[53])
  {
    v19 = *(_DWORD *)(a1 + 872);
    if ((v19 & v18[49]) != 0)
    {
      v20 = *(_QWORD *)(a1 + 904);
      v21 = (_QWORD *)(a1 + 912);
      v22 = *(_QWORD *)(a1 + 912);
      if (v20 != v22)
      {
        while (*(_DWORD **)v20 != v18)
        {
          v20 += 8;
          if (v20 == v22)
          {
            v20 = *(_QWORD *)(a1 + 912);
            break;
          }
        }
      }
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 960);
      v21 = (_QWORD *)(a1 + 968);
      v22 = *(_QWORD *)(a1 + 968);
      if (v20 != v22)
      {
        while (*(_DWORD **)v20 != v18)
        {
          v20 += 8;
          if (v20 == v22)
          {
            v20 = *(_QWORD *)(a1 + 968);
            break;
          }
        }
      }
      v19 = *(_DWORD *)(a1 + 928);
    }
    *(_DWORD *)(*(_QWORD *)v20 + 196) &= ~v19;
    *(_QWORD *)v20 = *(_QWORD *)(v22 - 8);
    *v21 -= 8;
  }
  if (!v18[52])
  {
    v27 = *(_DWORD *)(a1 + 168);
    if ((v27 & v18[49]) != 0)
    {
      v30 = *(_QWORD *)(a1 + 208);
      v29 = (_QWORD *)(a1 + 208);
      v28 = v30;
      v31 = *(v29 - 1);
      if (v31 != v30)
      {
        while (*(_DWORD **)v31 != v18)
        {
          v31 += 8;
          if (v31 == v28)
          {
            v31 = v28;
            break;
          }
        }
      }
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 256);
      v28 = *(_QWORD *)(a1 + 264);
      if (v31 != v28)
      {
        while (*(_DWORD **)v31 != v18)
        {
          v31 += 8;
          if (v31 == v28)
          {
            v31 = *(_QWORD *)(a1 + 264);
            break;
          }
        }
      }
      v27 = *(_DWORD *)(a1 + 224);
      v29 = (_QWORD *)(a1 + 264);
    }
    *(_DWORD *)(*(_QWORD *)v31 + 196) &= ~v27;
    *(_QWORD *)v31 = *(_QWORD *)(v28 - 8);
    *v29 -= 8;
  }
  return v18;
}

uint64_t sub_1C4ABD76C(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED7EDF18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDF18))
  {
    byte_1ED7EDEF9 = 1;
    __cxa_guard_release(&qword_1ED7EDF18);
  }
  v3 = byte_1ED7EDEF9;
  v4 = operator new();
  if (v3)
  {
    v5 = operator new();
    v6 = sub_1C49BD128(v5, a1);
    *(_QWORD *)v6 = &off_1E7FB1FE8;
    *(_BYTE *)(v6 + 1744) = 0;
    *(_OWORD *)(v6 + 1680) = 0u;
    *(_DWORD *)(v6 + 1696) = 0;
    *(_QWORD *)(v6 + 1704) = 0;
    *(_QWORD *)(v6 + 1720) = 0;
    *(_QWORD *)(v6 + 1712) = 0;
    *(_DWORD *)(v6 + 1728) = 0;
    v43 = v6;
    v7.n128_f64[0] = sub_1C4838D9C((llvm::ScheduleDAGInstrs *)v4, a1, &v43);
    v8 = v43;
    v43 = 0;
    if (!v8)
      goto LABEL_4;
  }
  else
  {
    v30 = operator new();
    v31 = (_QWORD *)sub_1C49BD128(v30, a1);
    *v31 = &off_1E7FB2088;
    v42 = v31;
    v7.n128_f64[0] = sub_1C4838D9C((llvm::ScheduleDAGInstrs *)v4, a1, (uint64_t *)&v42);
    v8 = (uint64_t)v42;
    v42 = 0;
    if (!v8)
      goto LABEL_4;
  }
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 16))(v8, v7);
LABEL_4:
  v9 = operator new();
  *(_QWORD *)v9 = &off_1E7FB2128;
  *(_BYTE *)(v9 + 8) = 0;
  v41 = v9;
  v10 = *(uint64_t **)(v4 + 2664);
  if ((unint64_t)v10 < *(_QWORD *)(v4 + 2672))
  {
    *v10 = v9;
    *(_QWORD *)(v4 + 2664) = v10 + 1;
    v41 = 0;
  }
  else
  {
    v11 = sub_1C483904C((char **)(v4 + 2656), &v41);
    v12 = v41;
    *(_QWORD *)(v4 + 2664) = v11;
    v41 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  v13 = (_QWORD *)operator new();
  *v13 = &off_1E7FB21A0;
  v40 = v13;
  v14 = *(_QWORD **)(v4 + 2664);
  if ((unint64_t)v14 < *(_QWORD *)(v4 + 2672))
  {
    *v14 = v13;
    *(_QWORD *)(v4 + 2664) = v14 + 1;
    v40 = 0;
  }
  else
  {
    v15 = sub_1C483904C((char **)(v4 + 2656), (uint64_t *)&v40);
    v16 = (uint64_t)v40;
    *(_QWORD *)(v4 + 2664) = v15;
    v40 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E7FB21D0;
  v39 = v17;
  v18 = *(_QWORD **)(v4 + 2664);
  if ((unint64_t)v18 < *(_QWORD *)(v4 + 2672))
  {
    *v18 = v17;
    *(_QWORD *)(v4 + 2664) = v18 + 1;
    v39 = 0;
  }
  else
  {
    v19 = sub_1C483904C((char **)(v4 + 2656), (uint64_t *)&v39);
    v20 = (uint64_t)v39;
    *(_QWORD *)(v4 + 2664) = v19;
    v39 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  }
  v21 = (_QWORD *)operator new();
  *v21 = &off_1E7FB2248;
  v38 = v21;
  v22 = *(_QWORD **)(v4 + 2664);
  if ((unint64_t)v22 >= *(_QWORD *)(v4 + 2672))
  {
    v32 = sub_1C483904C((char **)(v4 + 2656), (uint64_t *)&v38);
    v33 = (uint64_t)v38;
    *(_QWORD *)(v4 + 2664) = v32;
    v38 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  }
  else
  {
    *v22 = v21;
    *(_QWORD *)(v4 + 2664) = v22 + 1;
    v38 = 0;
  }
  v23 = (_QWORD *)operator new();
  *v23 = &off_1E7FB2278;
  v37 = v23;
  v24 = *(_QWORD **)(v4 + 2664);
  if ((unint64_t)v24 < *(_QWORD *)(v4 + 2672))
  {
    *v24 = v23;
    *(_QWORD *)(v4 + 2664) = v24 + 1;
    v37 = 0;
  }
  else
  {
    v25 = sub_1C483904C((char **)(v4 + 2656), (uint64_t *)&v37);
    v26 = (uint64_t)v37;
    *(_QWORD *)(v4 + 2664) = v25;
    v37 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  }
  v27 = (_QWORD *)operator new();
  *v27 = &off_1E7FB22A8;
  v36 = v27;
  v28 = *(_QWORD **)(v4 + 2664);
  if ((unint64_t)v28 >= *(_QWORD *)(v4 + 2672))
  {
    v34 = sub_1C483904C((char **)(v4 + 2656), (uint64_t *)&v36);
    v35 = (uint64_t)v36;
    *(_QWORD *)(v4 + 2664) = v34;
    v36 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  }
  else
  {
    *v28 = v27;
    *(_QWORD *)(v4 + 2664) = v28 + 1;
  }
  return v4;
}

void sub_1C4ABDB8C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &off_1E7FB1FE8;
  v2 = (void *)a1[213];
  if (v2)
  {
    a1[214] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[210], 4);
  *a1 = &unk_1E8146698;
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 106));
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 18));
  *a1 = &off_1E7FA8528;
  v3 = (_QWORD *)a1[6];
  if (v3 != a1 + 8)
    free(v3);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ABDC28(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_1C4764EE4();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  *(_QWORD *)v11 = a2;
  v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 1);
      v2 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_1C4ABDD00()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ABDD14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::SDep *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t *v33;
  uint64_t v34;
  int64_t v35;
  int64_t *v36;
  int64_t *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[32];
  unint64_t *v54;
  uint64_t v55;
  _QWORD v56[6];

  v56[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  if (v2 != v3)
  {
    do
    {
      v6 = sub_1C49C84A4(*(_QWORD *)(v2 + 8), 1024);
      if (v6)
        break;
      v2 += 272;
    }
    while (v2 != v3);
    v8 = *(_QWORD *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56);
    if (v8 != v7)
    {
      v9 = &v50;
      v10 = &v47;
      v42 = *(_QWORD *)(a2 + 56);
LABEL_6:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 16) + 16) & 2) == 0)
        goto LABEL_58;
      v54 = v56;
      v55 = 0x400000000;
      v51 = v53;
      v52 = 0x400000000;
      v11 = v9;
      v48 = v9;
      v49 = 0x400000000;
      v12 = v10;
      v45 = v10;
      v46 = 0x400000000;
      v13 = *(unsigned int *)(v8 + 120);
      if (!(_DWORD)v13)
        goto LABEL_24;
      v14 = *(uint64_t **)(v8 + 112);
      v15 = 16 * v13;
      while (1)
      {
        v16 = *v14;
        if ((~*(_DWORD *)v14 & 6) == 0)
        {
          if (!v6 || *((_DWORD *)v14 + 2))
            goto LABEL_14;
          if (sub_1C4ABE0E4((uint64_t)&v51, v16 & 0xFFFFFFFFFFFFFFF8, 0))
            break;
        }
LABEL_20:
        v14 += 2;
        v15 -= 16;
        if (!v15)
        {
          if ((_DWORD)v55)
          {
            v19 = v54;
            v20 = 8 * v55;
            do
            {
              v21 = *v19++;
              sub_1C4841A0C(v21, v8);
              v20 -= 8;
            }
            while (v20);
          }
LABEL_24:
          v22 = *(_DWORD *)(v8 + 40);
          if (v22)
          {
            v23 = v22 - 1;
            while (1)
            {
              v24 = v23;
              v25 = *(_QWORD *)(v8 + 32);
              v26 = (const llvm::SDep *)(v25 + 16 * v23);
              v27 = *(_QWORD *)v26;
              if ((~*(_DWORD *)v26 & 6) == 0)
              {
                if (!v6 || *(_DWORD *)(v25 + 16 * v23 + 8))
                  goto LABEL_31;
                if (sub_1C4ABE0E4((uint64_t)&v45, v27 & 0xFFFFFFFFFFFFFFF8, 1))
                  break;
              }
LABEL_36:
              --v23;
              if (!v24)
                goto LABEL_37;
            }
            v27 = *(_QWORD *)v26;
LABEL_31:
            v28 = v27 & 0xFFFFFFFFFFFFFFF8;
            if (!*(_BYTE *)(a1 + 8) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 16) + 16) & 2) != 0)
            {
              llvm::SUnit::removePred(v8, v26);
              v29 = v49;
              if (v49 >= (unint64_t)HIDWORD(v49))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v11, v49 + 1, 8);
                v29 = v49;
              }
              *((_QWORD *)v48 + v29) = v28;
              LODWORD(v49) = v49 + 1;
            }
            goto LABEL_36;
          }
LABEL_37:
          if ((_DWORD)v46)
          {
            v30 = (uint64_t *)v45;
            v31 = 8 * v46;
            do
            {
              v32 = *v30++;
              v43 = v32 | 6;
              v44 = 0;
              llvm::SUnit::addPred(v8, (const llvm::SDep *)&v43, 1);
              v31 -= 8;
            }
            while (v31);
          }
          if ((_DWORD)v52)
          {
            v33 = (int64_t *)v51;
            v34 = 8 * v52;
            do
            {
              v35 = *v33++;
              v43 = v8 | 6;
              v44 = 0;
              llvm::SUnit::addPred(v35, (const llvm::SDep *)&v43, 1);
              v34 -= 8;
            }
            while (v34);
          }
          if ((_DWORD)v55)
          {
            v36 = (int64_t *)v54;
            v37 = (int64_t *)&v54[v55];
            do
            {
              if ((_DWORD)v49)
              {
                v38 = *v36;
                v39 = (uint64_t *)v48;
                v40 = 8 * v49;
                do
                {
                  v41 = *v39++;
                  v43 = v41 | 6;
                  v44 = 0;
                  llvm::SUnit::addPred(v38, (const llvm::SDep *)&v43, 1);
                  v40 -= 8;
                }
                while (v40);
              }
              ++v36;
            }
            while (v36 != v37);
          }
          v10 = v12;
          if (v45 != v12)
            free(v45);
          v9 = v11;
          if (v48 != v11)
            free(v48);
          if (v51 != v53)
            free(v51);
          if (v54 != v56)
            free(v54);
          v7 = v42;
LABEL_58:
          v8 += 272;
          if (v8 == v7)
            return;
          goto LABEL_6;
        }
      }
      v16 = *v14;
LABEL_14:
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 192) != -1
        && (!*(_BYTE *)(a1 + 8) || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 16) + 16) & 2) != 0))
      {
        v18 = v55;
        if (v55 >= (unint64_t)HIDWORD(v55))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
          v18 = v55;
        }
        v54[v18] = v17;
        LODWORD(v55) = v55 + 1;
      }
      goto LABEL_20;
    }
  }
}

uint64_t sub_1C4ABE0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &unk_1E7FB2158;
  v7 = v6;
  v3 = sub_1C4ABE18C(a1, a2, 0, a3, v6);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_5:
    (*v4)();
  }
  return v3;
}

uint64_t sub_1C4ABE18C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *i;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  void (**v25)(_QWORD *);
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a3 > 0x20)
    return 0;
  v26 = a2;
  v9 = a5[3];
  if (!v9)
  {
    sub_1C485C2F0();
    JUMPOUT(0x1C4ABE378);
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v26))
  {
    v13 = a2 + 32;
    v14 = 112;
    if ((_DWORD)a4)
      v14 = 32;
    else
      v13 = a2 + 112;
    v15 = *(unsigned int *)(v13 + 8);
    if (!(_DWORD)v15)
      return 1;
    v16 = *(_QWORD *)(a2 + v14);
    v17 = a3 + 1;
    v18 = 16 * v15;
    for (i = (_DWORD *)(v16 + 8); ; i += 4)
    {
      v20 = *((_QWORD *)i - 1);
      if ((~*(i - 2) & 6) == 0 && !*i)
      {
        v21 = v20 & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8))
          break;
      }
LABEL_27:
      v18 -= 16;
      if (!v18)
        return 1;
    }
    v22 = (_QWORD *)a5[3];
    if (v22)
    {
      if (v22 == a5)
      {
        v28 = v27;
        (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v27);
      }
      else
      {
        v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v22 + 16))(v22);
      }
    }
    else
    {
      v28 = 0;
    }
    v23 = sub_1C4ABE18C(a1, v21, v17, a4, v27);
    v24 = v28;
    if (v28 == v27)
    {
      v25 = (void (**)(_QWORD *))(v27[0] + 32);
      v24 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_26;
      v25 = (void (**)(_QWORD *))(*v28 + 40);
    }
    (*v25)(v24);
LABEL_26:
    if (!v23)
      return 0;
    goto LABEL_27;
  }
  v12 = *(unsigned int *)(a1 + 8);
  if (v12 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a2;
  ++*(_DWORD *)(a1 + 8);
  return 1;
}

void sub_1C4ABE37C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ABE390()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E7FB2158;
  return result;
}

void sub_1C4ABE3B4(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E7FB2158;
}

uint64_t sub_1C4ABE3CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (result)
    return sub_1C49C84A4(result, 1024);
  return result;
}

void sub_1C4ABE3E8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ABE3FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v3 = a2[2];
  do
  {
    v4 = a2[6];
    v5 = a2[7];
    if (v4 == v5)
      break;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v4 + 8);
      v22 = v24;
      v23 = 0x400000000;
      v8 = *(unsigned int *)(v4 + 40);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD **)(v4 + 32);
        v10 = 16 * v8;
        do
        {
          if ((~*(_DWORD *)v9 & 6) == 0)
          {
            v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v11 + 192) != -1)
            {
              v12 = *(_QWORD *)(v11 + 8);
              if (**(_WORD **)(v7 + 16) == 9211 || **(_WORD **)(v12 + 16) == 9211)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 1064))(v3, v7, v12))
                {
                  v13 = *(_OWORD *)v9;
                  v14 = v23;
                  if (v23 >= (unint64_t)HIDWORD(v23))
                  {
                    v20 = *(_OWORD *)v9;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 16);
                    v13 = v20;
                    v14 = v23;
                  }
                  *((_OWORD *)v22 + v14) = v13;
                  LODWORD(v23) = v23 + 1;
                }
              }
            }
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
        v15 = (char *)v22;
        v16 = (char *)v22 + 16 * v23;
        if ((_DWORD)v23)
        {
          do
          {
            v21 = *(_OWORD *)v15;
            llvm::SUnit::removePred(v4, (const llvm::SDep *)&v21);
            v17 = *(unsigned int *)(v4 + 120);
            if ((_DWORD)v17)
            {
              v18 = *(_QWORD **)(v4 + 112);
              v19 = 16 * v17;
              do
              {
                if ((~*(_DWORD *)v18 & 6) == 0)
                  llvm::SUnit::addPred(*v18 & 0xFFFFFFFFFFFFFFF8, (const llvm::SDep *)&v21, 1);
                v18 += 2;
                v19 -= 16;
              }
              while (v19);
            }
            v15 += 16;
          }
          while (v15 != v16);
          v6 = 1;
          v15 = (char *)v22;
        }
        if (v15 != (char *)v24)
          free(v15);
      }
      v4 += 272;
    }
    while (v4 != v5);
  }
  while ((v6 & 1) != 0);
}

void sub_1C4ABE604()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ABE618(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 **v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 **v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t UniqueVRegDef;
  int v61;
  uint64_t v62;
  char *v63;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t *v69;
  uint64_t v70;
  int64_t v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  _BYTE v86[32];
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[32];
  void *v93;
  uint64_t v94;
  _BYTE v95[32];
  void *v96;
  uint64_t v97;
  _QWORD v98[26];

  v98[24] = *MEMORY[0x1E0C80C00];
  v96 = v98;
  v97 = 0x800000000;
  v2 = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  if (v2 != v3)
  {
    v4 = *(_QWORD *)(a2 + 48);
    do
    {
      v5 = **(unsigned __int16 **)(*(_QWORD *)(v4 + 8) + 16);
      v79 = 1;
      if (v5 > 0x1ABD)
      {
        if (v5 == 6846 || v5 == 9187)
          goto LABEL_13;
      }
      else if (v5 == 336 || v5 == 414)
      {
        goto LABEL_13;
      }
      v4 += 272;
    }
    while (v4 != v3);
    v79 = 0;
LABEL_13:
    v78 = *(_QWORD *)(a2 + 56);
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + 16);
      v8 = v7 & 0x800200;
      if ((v7 & 0x800200) == 0x800200 || (v7 & 0x800100) == 8388864)
        break;
LABEL_118:
      v2 += 272;
      if (v2 == v3)
      {
        if (v96 != v98)
          free(v96);
        return;
      }
    }
    v93 = v95;
    v94 = 0x400000000;
    v90 = v92;
    v91 = 0x400000000;
    v87 = v89;
    v88 = 0x400000000;
    v10 = *(_DWORD *)(v2 + 40);
    if (v10)
    {
      v11 = v10 - 1;
      while (1)
      {
        v12 = v11;
        v13 = *(_QWORD *)(v2 + 32);
        v14 = (uint64_t *)(v13 + 16 * v11);
        v15 = *v14;
        v16 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v16 + 192) != -1)
        {
          v17 = *(unsigned __int16 ***)(v16 + 8);
          v18 = *v17[2];
          v19 = v18 - 6165;
          v20 = v18 - 6495;
          v21 = v19 >= 2 && v20 >= 8;
          v22 = !v21 && v8 == 8389120;
          v23 = v22;
          if ((~(_BYTE)v15 & 6) == 0 && !v23 && !llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v17))
          {
            if (!v79 || *(_DWORD *)(v13 + 16 * v11 + 8))
              goto LABEL_38;
            if (sub_1C4ABECE8((uint64_t)&v90, v16, 1))
              break;
          }
        }
LABEL_41:
        --v11;
        if (!v12)
          goto LABEL_42;
      }
      v15 = *v14;
LABEL_38:
      v24 = v14[1];
      v25 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v88 + 1, 16);
        v25 = v88;
      }
      v26 = (char *)v87 + 16 * v25;
      *v26 = v15;
      v26[1] = v24;
      LODWORD(v88) = v88 + 1;
      goto LABEL_41;
    }
LABEL_42:
    v84 = v86;
    v85 = 0x400000000;
    v27 = *(unsigned int *)(v2 + 120);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v2 + 112);
      v29 = 16 * v27;
      while (1)
      {
        v30 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v30 + 192) != -1)
        {
          v31 = *(unsigned __int16 ***)(v30 + 8);
          v32 = *v31[2];
          v33 = v32 - 6165;
          v34 = v32 - 6495;
          v35 = v33 >= 2 && v34 >= 8;
          v36 = !v35 && v8 == 8389120;
          v37 = v36;
          if ((~*(_QWORD *)v28 & 6) == 0
            && !v37
            && !llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v31))
          {
            if (!v79 || *(_DWORD *)(v28 + 8))
              goto LABEL_61;
            if (sub_1C4ABECE8((uint64_t)&v93, v30, 0))
              break;
          }
        }
LABEL_64:
        v28 += 16;
        v29 -= 16;
        if (!v29)
          goto LABEL_65;
      }
      v30 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_61:
      v38 = v85;
      if (v85 >= (unint64_t)HIDWORD(v85))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, (uint64_t)v86, v85 + 1, 8);
        v38 = v85;
      }
      *((_QWORD *)v84 + v38) = v30;
      LODWORD(v85) = v85 + 1;
      goto LABEL_64;
    }
LABEL_65:
    if ((_DWORD)v88)
    {
      v39 = (__int128 *)v87;
      v40 = 16 * v88;
      do
      {
        v41 = *v39++;
        v82 = v41;
        llvm::SUnit::removePred(v2, (const llvm::SDep *)&v82);
        v40 -= 16;
      }
      while (v40);
    }
    if ((_DWORD)v85)
    {
      v42 = (unint64_t *)v84;
      v43 = 8 * v85;
      do
      {
        v44 = *v42++;
        sub_1C4841A0C(v44, v2);
        v43 -= 8;
      }
      while (v43);
    }
    *((_QWORD *)&v82 + 1) = 0;
    v45 = *(_QWORD **)(v2 + 8);
    v46 = (uint64_t *)(v45[6] & 0xFFFFFFFFFFFFFFF8);
    if ((v45[6] & 7) != 0)
      v46 = (uint64_t *)v46[1];
    else
      v45[6] = v46;
    v47 = *v46;
    v49 = (unint64_t *)((v47 & (v47 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8) + 16);
    v48 = *(_QWORD *)((v47 & (v47 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
    if ((v48 & 1) != 0)
    {
      v51 = __clz(__rbit64((v48 >> 1) & ~(-1 << (v48 >> 58))));
      if (((v48 >> 1) & ~(-1 << (v48 >> 58))) != 0)
        v50 = v51;
      else
        v50 = -1;
    }
    else
    {
      v50 = sub_1C476B7EC(v48);
    }
    LODWORD(v82) = v50;
    DWORD1(v82) = sub_1C4902538(v49);
    v52 = (unsigned __int16 *)v45[2];
    if ((v52[10] & 4) != 0)
    {
      v55 = sub_1C4C2FD5C(*v52);
      v56 = v45[4];
      v3 = v78;
      if (*(_BYTE *)(v56 + 32 * v55) == 1)
      {
        v53 = 0;
        v54 = *(_QWORD *)(v56 + 32 * v55 + 16);
      }
      else
      {
        v57 = v56 + 32 * v55;
        v59 = *(_DWORD *)(v57 + 4);
        v58 = (unsigned int *)(v57 + 4);
        UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(*(_QWORD *)(v45[3] + 32) + 40), v59);
        if (!UniqueVRegDef)
          goto LABEL_87;
        v61 = **(unsigned __int16 **)(UniqueVRegDef + 16);
        if (v61 == 518)
        {
          LODWORD(v54) = 0;
          v53 = 0;
          goto LABEL_89;
        }
        if (v61 == 5626)
        {
          v53 = 0;
          v54 = *(_QWORD *)(*(_QWORD *)(UniqueVRegDef + 32) + 80);
        }
        else
        {
LABEL_87:
          LODWORD(v54) = 0;
          v53 = *v58;
        }
      }
    }
    else
    {
      v53 = 0;
      *(_QWORD *)&v82 = 0xFF00000000;
      LODWORD(v54) = 255;
      v3 = v78;
    }
LABEL_89:
    *((_QWORD *)&v82 + 1) = __PAIR64__(v53, v54);
    v83 = v2;
    if (!(_DWORD)v97)
    {
LABEL_102:
      if ((_DWORD)v91)
      {
        v66 = (uint64_t *)v90;
        v67 = 8 * v91;
        do
        {
          v68 = *v66++;
          v80 = v68 | 6;
          v81 = 0;
          llvm::SUnit::addPred(v2, (const llvm::SDep *)&v80, 1);
          v67 -= 8;
        }
        while (v67);
      }
      if ((_DWORD)v94)
      {
        v69 = (int64_t *)v93;
        v70 = 8 * v94;
        do
        {
          v71 = *v69++;
          v80 = v2 | 6;
          v81 = 0;
          llvm::SUnit::addPred(v71, (const llvm::SDep *)&v80, 1);
          v70 -= 8;
        }
        while (v70);
      }
      v72 = (char *)v96;
      if (v97 >= HIDWORD(v97))
      {
        v76 = v97 + 1;
        if (v96 <= &v82 && (char *)v96 + 24 * v97 > (char *)&v82)
        {
          v77 = (char *)&v82 - (_BYTE *)v96;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, (uint64_t)v98, v76, 24);
          v72 = (char *)v96;
          v73 = (char *)v96 + v77;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, (uint64_t)v98, v76, 24);
          v73 = (char *)&v82;
          v72 = (char *)v96;
        }
      }
      else
      {
        v73 = (char *)&v82;
      }
      v74 = &v72[24 * v97];
      v75 = *(_OWORD *)v73;
      *((_QWORD *)v74 + 2) = *((_QWORD *)v73 + 2);
      *(_OWORD *)v74 = v75;
      LODWORD(v97) = v97 + 1;
      if (v84 != v86)
        free(v84);
      if (v87 != v89)
        free(v87);
      if (v90 != v92)
        free(v90);
      if (v93 != v95)
        free(v93);
      goto LABEL_118;
    }
    v62 = 24 * v97;
    v63 = (char *)v96 + 8;
    while (1)
    {
      if (DWORD2(v82) != *(_DWORD *)v63 || HIDWORD(v82) != *((_DWORD *)v63 + 1))
        goto LABEL_100;
      v65 = *((_DWORD *)v63 - 2);
      if ((int)v82 > v65)
        break;
      if (SDWORD1(v82) >= v65)
        goto LABEL_100;
LABEL_101:
      v63 += 24;
      v62 -= 24;
      if (!v62)
        goto LABEL_102;
    }
    if (*((_DWORD *)v63 - 1) < (int)v82)
      goto LABEL_101;
LABEL_100:
    v80 = *((_QWORD *)v63 + 1) | 6;
    v81 = 0;
    llvm::SUnit::addPred(v2, (const llvm::SDep *)&v80, 1);
    goto LABEL_101;
  }
}

uint64_t sub_1C4ABECE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E7FB2200;
  v7 = v6;
  v3 = sub_1C4ABE18C(a1, a2, 0, a3, v6);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_5:
    (*v4)();
  }
  return v3;
}

void sub_1C4ABED94()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ABEDA8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB2200;
  return result;
}

void sub_1C4ABEDCC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB2200;
}

uint64_t sub_1C4ABEDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (!v2)
    return 0;
  v3 = **(unsigned __int16 **)(v2 + 16);
  result = 1;
  if (v3 <= 6845)
  {
    if (v3 == 336 || v3 == 414)
      return result;
    return 0;
  }
  if (v3 != 6846 && v3 != 9187)
    return 0;
  return result;
}

void sub_1C4ABEE3C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ABEE50(uint64_t a1, llvm::ScheduleDAGInstrs *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::SUnit **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  llvm::SUnit **v26;
  char *v27;
  _QWORD *v28;
  llvm::SUnit **v29;
  uint64_t v30;
  llvm::SUnit *v31;
  llvm::SUnit *v32;
  unsigned int v33;
  llvm::SUnit *v34;
  uint64_t v35;
  llvm::SUnit **v36;
  llvm::SUnit *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD v42[2];
  void *v43;
  uint64_t v44;
  _BYTE v45[64];
  void *v46;
  uint64_t v47;
  _BYTE v48[32];
  void *v49;
  uint64_t v50;
  _QWORD v51[6];

  v51[4] = *MEMORY[0x1E0C80C00];
  v2 = v51;
  v49 = v51;
  v50 = 0x400000000;
  v3 = *((_QWORD *)a2 + 6);
  v4 = *((_QWORD *)a2 + 7);
  if (v3 == v4)
    goto LABEL_64;
  v6 = (int64_t)a2 + 344;
  v7 = *((_QWORD *)a2 + 6);
  do
  {
    if (**(unsigned __int16 **)(*(_QWORD *)(v7 + 8) + 16) - 6165 <= 1)
    {
      v8 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v50 + 1, 8);
        v8 = v50;
      }
      *((_QWORD *)v49 + v8) = v3;
      LODWORD(v50) = v50 + 1;
      if (!*(_DWORD *)(v7 + 204))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 32) + 16);
        v43 = (void *)(v3 | 6);
        LODWORD(v44) = 3;
        HIDWORD(v44) = *(unsigned __int16 *)(v7 + 226) - 1;
        (*(void (**)(uint64_t, uint64_t, _QWORD, int64_t, _QWORD, void **))(*(_QWORD *)v9 + 304))(v9, v7, 0, v6, 0, &v43);
        llvm::SUnit::addPred(v6, (const llvm::SDep *)&v43, 1);
      }
    }
    v7 += 272;
    v3 += 272;
  }
  while (v7 != v4);
  if (!(_DWORD)v50)
    goto LABEL_64;
  v10 = (uint64_t *)v49;
  v11 = (char *)v49 + 8 * v50;
  while (1)
  {
    v12 = *v10;
    v46 = v48;
    v47 = 0x400000000;
    v13 = *(unsigned int *)(v12 + 120);
    if (!(_DWORD)v13)
      break;
    v14 = 0;
    v15 = *(uint64_t **)(v12 + 112);
    v16 = 16 * v13;
    do
    {
      v17 = *v15;
      if ((~*(_DWORD *)v15 & 6) == 0)
      {
        if (v14 >= HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v14 + 1, 8);
          v14 = v47;
        }
        *((_QWORD *)v46 + v14) = v17 & 0xFFFFFFFFFFFFFFF8;
        v14 = v47 + 1;
        LODWORD(v47) = v47 + 1;
      }
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (!v14)
      break;
    v18 = (llvm::SUnit **)v46;
LABEL_46:
    v36 = &v18[v14];
    do
    {
      v37 = *v18;
      if ((*((_BYTE *)*v18 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*v18);
      v38 = *((unsigned int *)v37 + 10);
      if ((_DWORD)v38)
      {
        v39 = *((_QWORD *)v37 + 4);
        v40 = *((_DWORD *)v37 + 60) + 1;
        v41 = 16 * v38;
        do
        {
          if (v12 == (*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8))
            *(_DWORD *)(v39 + 12) = v40;
          v39 += 16;
          v41 -= 16;
        }
        while (v41);
      }
      ++v18;
    }
    while (v18 != v36);
    v18 = (llvm::SUnit **)v46;
LABEL_56:
    if (v18 != (llvm::SUnit **)v48)
      free(v18);
    if (++v10 == (uint64_t *)v11)
      goto LABEL_64;
  }
  v43 = v45;
  v44 = 0x800000000;
  v20 = *((_QWORD *)a2 + 6);
  v19 = *((_QWORD *)a2 + 7);
  if (v19 == v20)
    goto LABEL_62;
  v21 = 0;
  v22 = v19 - 272;
  do
  {
    v23 = v19 - 272;
    v24 = *(_DWORD *)(v19 - 60);
    if (v23 != v12 && v24 == 0)
    {
      if (v21 >= HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v21 + 1, 8);
        v21 = v44;
      }
      *((_QWORD *)v43 + v21) = v22;
      v21 = v44 + 1;
      LODWORD(v44) = v44 + 1;
    }
    v22 -= 272;
    v19 = v23;
  }
  while (v23 != v20);
  v26 = (llvm::SUnit **)v43;
  if (v21)
  {
    v27 = v11;
    v28 = v2;
    if (v21 != 1)
    {
      v29 = (llvm::SUnit **)((char *)v43 + 8);
      v30 = 8 * v21 - 8;
      do
      {
        v31 = *v26;
        v32 = *v29;
        if ((*((_BYTE *)*v26 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth(*v26);
        v33 = *((_DWORD *)v31 + 60);
        if ((*((_BYTE *)v32 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth(v32);
        if (v33 < *((_DWORD *)v32 + 60))
          v26 = v29;
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
    v34 = *v26;
    v42[0] = v12 | 6;
    v42[1] = 0;
    llvm::ScheduleDAGInstrs::addEdge(a2, v34, (const llvm::SDep *)v42);
    v35 = v47;
    if (v47 >= (unint64_t)HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
      v35 = v47;
    }
    v2 = v28;
    *((_QWORD *)v46 + v35) = v34;
    v14 = v47 + 1;
    LODWORD(v47) = v47 + 1;
    v11 = v27;
    if (v43 != v45)
    {
      free(v43);
      v14 = v47;
    }
    v18 = (llvm::SUnit **)v46;
    if (!v14)
      goto LABEL_56;
    goto LABEL_46;
  }
  if (v43 != v45)
    free(v43);
LABEL_62:
  if (v46 != v48)
    free(v46);
LABEL_64:
  if (v49 != v2)
    free(v49);
}

void sub_1C4ABF2B4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ABF2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[10];

  v34[8] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(**(_QWORD **)(a2 + 32) + 18) & 0x3FF0) == 0x640)
  {
    v2 = *(_QWORD *)(a2 + 16);
    do
    {
      v3 = *(_QWORD *)(a2 + 48);
      v4 = *(_QWORD *)(a2 + 56);
      if (v3 == v4)
        return;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(v3 + 8);
        v32 = v34;
        v33 = 0x400000000;
        v7 = *(unsigned int *)(v3 + 40);
        if (!(_DWORD)v7)
          goto LABEL_47;
        v8 = *(_DWORD **)(v3 + 32);
        v9 = 16 * v7;
        do
        {
          if ((~*v8 & 6) != 0)
            goto LABEL_36;
          v10 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)(v10 + 192) == -1)
            goto LABEL_36;
          v11 = *(unsigned __int16 **)(v6 + 16);
          v12 = *v11;
          v14 = (v12 - 9) <= 0x3C && ((1 << (v12 - 9)) & 0x1000000000000605) != 0
             || v12 == 0;
          if ((v14 || (v11[4] & 0x10) != 0 || (v11[8] & 1) != 0)
            && (v15 = *(_QWORD *)(v6 + 32), *(_BYTE *)v15 == 7)
            && *(_DWORD *)(v15 + 16) == 64)
          {
            v16 = *(_QWORD *)(v10 + 8);
          }
          else
          {
            v16 = *(_QWORD *)(v10 + 8);
            v17 = *(unsigned __int16 **)(v16 + 16);
            v18 = *v17;
            v20 = (v18 - 9) <= 0x3C && ((1 << (v18 - 9)) & 0x1000000000000605) != 0
               || v18 == 0;
            if (!v20 && (v17[4] & 0x10) == 0 && (v17[8] & 1) == 0)
              goto LABEL_36;
            v21 = *(_QWORD *)(v16 + 32);
            if (*(_BYTE *)v21 != 7 || *(_DWORD *)(v21 + 16) != 64)
              goto LABEL_36;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 1064))(v2, v6, v16))
          {
            v22 = *(_OWORD *)v8;
            v23 = v33;
            if (v33 >= (unint64_t)HIDWORD(v33))
            {
              v29 = *(_OWORD *)v8;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 16);
              v22 = v29;
              v23 = v33;
            }
            *((_OWORD *)v32 + v23) = v22;
            LODWORD(v33) = v33 + 1;
          }
LABEL_36:
          v8 += 4;
          v9 -= 16;
        }
        while (v9);
        v24 = (__int128 *)v32;
        v25 = (char *)v32 + 16 * v33;
        if ((_DWORD)v33)
        {
          do
          {
            v31 = *v24;
            llvm::SUnit::removePred(v3, (const llvm::SDep *)&v31);
            v26 = *(unsigned int *)(v3 + 120);
            if ((_DWORD)v26)
            {
              v27 = *(_QWORD **)(v3 + 112);
              v28 = 16 * v26;
              do
              {
                if ((~*(_DWORD *)v27 & 6) == 0)
                  llvm::SUnit::addPred(*v27 & 0xFFFFFFFFFFFFFFF8, (const llvm::SDep *)&v31, 1);
                v27 += 2;
                v28 -= 16;
              }
              while (v28);
            }
            ++v24;
          }
          while (v24 != (__int128 *)v25);
          v5 = 1;
          v24 = (__int128 *)v32;
        }
        if (v24 != (__int128 *)v34)
          free(v24);
LABEL_47:
        v3 += 272;
      }
      while (v3 != v4);
    }
    while ((v5 & 1) != 0);
  }
}

void sub_1C4ABF580()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4ABF594(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  _QWORD v34[3];

  v34[1] = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = *(_QWORD *)(a2 + 48);
    v28 = *(_QWORD *)(a2 + 56);
    if (v2 == v28)
      break;
    v27 = 0;
    do
    {
      v29 = *(_QWORD *)(v2 + 8);
      v31 = v33;
      v32 = 0x400000000;
      v3 = *(unsigned int *)(v2 + 40);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = *(uint64_t **)(v2 + 32);
        v6 = &v5[2 * v3];
        do
        {
          v7 = *v5;
          if ((~*(_DWORD *)v5 & 6) == 0 && *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            v8 = 0;
            v9 = 0;
            v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
            LODWORD(v30) = **(unsigned __int16 **)(v29 + 16);
            DWORD1(v30) = **(unsigned __int16 **)(v10 + 16);
            v34[0] = 0x100000000;
            while (1)
            {
              v11 = v8;
              v12 = *((unsigned int *)v34 + v9);
              v13 = sub_1C4C915C4(*((_DWORD *)&v30 + v12));
              if ((v13 & 0xFF00000000) != 0 && (v13 - 79) <= 1)
              {
                v15 = *((_DWORD *)&v30 + (1 - v12));
                v16 = v15 - 317;
                v17 = v15 - 341;
                if (v16 < 0x10 || v17 < 0x10)
                  break;
              }
              v8 = 1;
              v9 = 1;
              if ((v11 & 1) != 0)
                goto LABEL_23;
            }
            v19 = v5[1];
            if (v4 >= HIDWORD(v32))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v4 + 1, 16);
              v4 = v32;
            }
            v20 = (char *)v31 + 16 * v4;
            *v20 = v7;
            v20[1] = v19;
            v4 = v32 + 1;
            LODWORD(v32) = v32 + 1;
          }
LABEL_23:
          v5 += 2;
        }
        while (v5 != v6);
        v21 = (char *)v31;
        if (v4)
        {
          v22 = (char *)v31 + 16 * v4;
          do
          {
            v30 = *(_OWORD *)v21;
            llvm::SUnit::removePred(v2, (const llvm::SDep *)&v30);
            v23 = *(unsigned int *)(v2 + 120);
            if ((_DWORD)v23)
            {
              v24 = *(_QWORD **)(v2 + 112);
              v25 = 16 * v23;
              do
              {
                if ((~*(_DWORD *)v24 & 6) == 0)
                  llvm::SUnit::addPred(*v24 & 0xFFFFFFFFFFFFFFF8, (const llvm::SDep *)&v30, 1);
                v24 += 2;
                v25 -= 16;
              }
              while (v25);
            }
            v21 += 16;
          }
          while (v21 != v22);
          v27 = 1;
          v21 = (char *)v31;
        }
        if (v21 != v33)
          free(v21);
      }
      v2 += 272;
    }
    while (v2 != v28);
  }
  while ((v27 & 1) != 0);
}

uint64_t sub_1C4ABF804()
{
  sub_1C4769074(qword_1ED7EDF20, "agx3-new-scheduler", "New AGX3 scheduler", (uint64_t)sub_1C4ABD76C);
  __cxa_atexit((void (*)(void *))sub_1C476900C, qword_1ED7EDF20, &dword_1C475E000);
  sub_1C4769074(&qword_1ED7EDF20[6], "agx3-post-scheduler", "New Post RA AGX3 scheduler", (uint64_t)sub_1C6153E50);
  return __cxa_atexit((void (*)(void *))sub_1C476900C, &qword_1ED7EDF20[6], &dword_1C475E000);
}

uint64_t sub_1C4ABF89C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Static Performance Model and Simulator";
  *(_QWORD *)(v2 + 8) = 43;
  *(_QWORD *)(v2 + 16) = "agx3-static-sim";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F65A8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4ABF92C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4ABF92C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F65A8);
  *result = &off_1E7FB22D8;
  return result;
}

void sub_1C4ABF96C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4ABFA00(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4ABFA8C()
{
  return "AGX3 Static Performance Model and Simulator";
}

void *sub_1C4ABFA9C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4ABFACC()
{
  uint64_t v0;
  _QWORD *v1;
  unsigned __int8 *v2;
  unsigned __int8 v3;
  BOOL v4;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  _BYTE v13[48];
  _BYTE v14[208];
  void *v15;
  _BYTE v16[72];
  void *v17;
  unsigned int v18;
  _BYTE v19[40560];
  uint64_t v20;
  uint64_t v21;

  MEMORY[0x1E0C80A78]();
  v1 = (_QWORD *)v0;
  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 **)(v0 + 16);
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EDF88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDF88))
  {
    byte_1ED7EDF80 = 0;
    __cxa_guard_release(&qword_1ED7EDF88);
  }
  if (v2[393])
    v4 = byte_1ED7EDF80 == 0;
  else
    v4 = 0;
  v5 = v4;
  sub_1C4ABFCAC((uint64_t)v14, v2, v5);
  sub_1C4ABFE38((uint64_t)v13, (uint64_t)v14, v1);
  MEMORY[0x1CAA32FB4](v20, 8);
  v6 = v17;
  if (v18)
  {
    v7 = 2704 * v18;
    v8 = (char *)v17 - 2704;
    do
    {
      sub_1C4AC3FAC((uint64_t)&v8[v7]);
      v7 -= 2704;
    }
    while (v7);
    v6 = v17;
  }
  if (v6 != v19)
    free(v6);
  if (v15 != v16)
    free(v15);
  if (byte_1ED7EDF80)
  {
    sub_1C4ABFCAC((uint64_t)v14, v2, 1);
    sub_1C4ABFE38((uint64_t)v13, (uint64_t)v14, v1);
    MEMORY[0x1CAA32FB4](v20, 8);
    v9 = v17;
    if (v18)
    {
      v10 = 2704 * v18;
      v11 = (char *)v17 - 2704;
      do
      {
        sub_1C4AC3FAC((uint64_t)&v11[v10]);
        v10 -= 2704;
      }
      while (v10);
      v9 = v17;
    }
    if (v9 != v19)
      free(v9);
    if (v15 != v16)
      free(v15);
  }
  return 0;
}

uint64_t sub_1C4ABFCAC(uint64_t a1, unsigned __int8 *a2, char a3)
{
  int v6;
  unsigned int v7;
  void *v9;
  int v10;
  void *v11;
  unint64_t v12;

  *(_QWORD *)a1 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 176))(a2);
  if (a2[303] | a2[305])
    v6 = 8;
  else
    v6 = 6;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_1C8663800;
  *(_OWORD *)(a1 + 64) = unk_1C8663810;
  *(_OWORD *)(a1 + 16) = llvm::MCSchedModel::Default;
  *(_OWORD *)(a1 + 32) = unk_1C86637F0;
  *(_OWORD *)(a1 + 88) = llvm::MCSchedModel::Default;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = unk_1C8663810;
  *(_OWORD *)(a1 + 120) = xmmword_1C8663800;
  *(_OWORD *)(a1 + 104) = unk_1C86637F0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  *(_QWORD *)(a1 + 216) = 0x1000000000;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0xF00000000;
  *(_DWORD *)(a1 + 40888) = 0;
  *(_OWORD *)(a1 + 40872) = 0u;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 16), (const llvm::TargetSubtargetInfo *)a2);
  v7 = *(_DWORD *)(a1 + 304);
  if (v7 >= *(_DWORD *)(a1 + 308))
  {
    v12 = 0;
    v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 296, 0, 2704, &v12);
    sub_1C4AC3578((uint64_t)v9 + 2704 * *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 8));
    sub_1C4AC382C(a1 + 296, (uint64_t)v9);
    v10 = v12;
    v11 = *(void **)(a1 + 296);
    if (v11 != (void *)(a1 + 312))
      free(v11);
    *(_QWORD *)(a1 + 296) = v9;
    *(_DWORD *)(a1 + 308) = v10;
  }
  else
  {
    sub_1C4AC3578(*(_QWORD *)(a1 + 296) + 2704 * v7, *(_DWORD *)(a1 + 8));
  }
  ++*(_DWORD *)(a1 + 304);
  return a1;
}

uint64_t sub_1C4ABFE38(uint64_t result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t i;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t j;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  void **v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  unsigned int v59;
  BOOL v61;
  int v62;
  uint64_t v63;
  const llvm::MachineInstr *v64;
  const llvm::MachineInstr *v65;
  int v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  _BOOL4 v95;
  unsigned __int8 v96;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int UseIdx;
  int *v101;
  uint64_t k;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  _DWORD *v114;
  unint64_t v115;
  int v116;
  unint64_t v117;
  int v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  _QWORD *v125;
  double v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  double v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  int v141;
  llvm::MachineInstr *v142;
  unsigned __int16 *v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  double v173;
  double v174;
  int v175;
  double v176;
  double v177;
  uint64_t v178;
  double v179;
  double v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint8x8_t v191;
  int *v192;
  unint64_t v193;
  int *v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  _BYTE *v210;
  unint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  _OWORD *v221;
  __int128 *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  _BYTE *v226;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  const void **v238;
  void **v239;
  unint64_t v240;
  _DWORD *v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _OWORD *v254;
  unsigned int *v255;
  unsigned int *v256;
  unsigned int *v257;
  uint64_t v258;
  char *v259;
  unsigned int *v260;
  _BYTE *v261;
  unint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  unsigned int *v271;
  const void **v272;
  void **v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  _BYTE *v287;
  unint64_t v288;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  unsigned int *v298;
  const void **v299;
  void **v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  int v308;
  unsigned int *v309;
  uint64_t m;
  uint64_t v311;
  int v312;
  uint64_t v313;
  signed int v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  signed int v318;
  uint64_t v319;
  BOOL v320;
  unint64_t *v321;
  uint64_t v322;
  const char *v323;
  unint64_t v324;
  unsigned int v325;
  uint64_t v326;
  char *v327;
  void **v328;
  uint64_t v329;
  char *v330;
  const void **v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  char *v338;
  int v339;
  uint64_t v340;
  llvm::raw_ostream *v341;
  _BYTE *v342;
  unint64_t v343;
  _DWORD *v344;
  void *v345;
  uint64_t *v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  void *v355;
  double v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  double v360;
  void *v361;
  double v362;
  void *v363;
  double v364;
  void *v365;
  _DWORD *v366;
  void *v367;
  _DWORD *v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  signed int v372;
  unint64_t v373;
  llvm::raw_ostream *v374;
  int v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  unint64_t v386;
  llvm::raw_ostream *v387;
  int v388;
  _OWORD *v389;
  uint64_t v390;
  _DWORD *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  double v395;
  int64x2_t v396;
  float64x2_t v401;
  double v402;
  double v403;
  float64x2_t v404;
  double v405;
  double v406;
  double v407;
  double v408;
  void *v409;
  uint64_t v410;
  uint64_t v411;
  _DWORD *v412;
  const char *v413;
  size_t v414;
  uint64_t v415;
  void *v416;
  uint64_t v417;
  _OWORD *v418;
  uint64_t v420;
  _QWORD *v421;
  void **v422;
  llvm::TargetSchedModel *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _BOOL4 v428;
  _WORD *v429;
  const llvm::MachineInstr *v430;
  uint64_t v431;
  _QWORD *v432;
  int v433;
  int v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  int v439;
  int v440;
  int v441;
  int v442;
  unint64_t v443;
  const llvm::MachineInstr *v444;
  unsigned int *v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  int v449;
  __int128 *v450;
  unint64_t v451;
  unsigned int v452;
  llvm::MachineInstr *v453;
  int v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  _QWORD v470[3];
  _QWORD v471[3];
  _QWORD v472[3];
  uint64_t v473;
  int64x2_t v474;
  int64x2_t v475;
  void *__base;
  size_t __nel;
  uint64_t v478;
  _BYTE v479[2480];
  __int128 *****v480;
  uint64_t v481;
  __int128 ****v482;
  uint64_t v483;
  uint64_t v484;
  __int128 ***v485;
  uint64_t v486;
  __int128 **v487;
  uint64_t v488;
  uint64_t v489;
  __int128 *v490;
  uint64_t v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  _OWORD v499[3];
  uint64_t v500;

  v418 = (_OWORD *)result;
  v500 = *MEMORY[0x1E0C80C00];
  v473 = 1;
  v474 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v475 = v474;
  v4 = (_QWORD *)a3[41];
  v421 = a3 + 40;
  if (v4 != a3 + 40)
  {
    do
    {
      for (i = v4[7]; (_QWORD *)i != v4 + 6; i = *(_QWORD *)(i + 8))
      {
        v6 = *(unsigned __int16 **)(i + 16);
        if ((v6[10] & 4) != 0)
        {
          v7 = *v6;
          result = sub_1C4C915C4(v7);
          if ((result & 0xFF00000000) == 0)
LABEL_671:
            llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
          if ((_DWORD)result == 5)
          {
            *(_QWORD *)&v497 = *(_QWORD *)(*(_QWORD *)(i + 32) + 32 * sub_1C4C2FD5C(v7) + 16);
            result = (uint64_t)sub_1C61540B4((uint64_t)&__base, (uint64_t)&v473, (uint64_t *)&v497);
          }
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v421);
    v8 = a3[41];
    if ((_QWORD *)v8 != v421)
    {
      v422 = (void **)(a2 + 296);
      v416 = (void *)(a2 + 312);
      v417 = a2 + 40872;
      v423 = (llvm::TargetSchedModel *)(a2 + 16);
      v437 = a2;
      do
      {
        v420 = *(_QWORD *)(v8 + 8);
        __base = 0;
        result = sub_1C6154170((uint64_t)&v473, v8, &__base);
        if (!(_DWORD)result)
          goto LABEL_66;
        v9 = *(_DWORD *)(a2 + 304) - 1;
        v10 = *(_QWORD *)(a2 + 296) + 2704 * v9;
        LODWORD(__base) = *(_DWORD *)v10;
        __nel = (size_t)v479;
        v478 = 0x800000000;
        if (*(_DWORD *)(v10 + 16))
          sub_1C4AC45D4((uint64_t)&__nel, v10 + 8);
        for (j = 0; j != 240; j += 80)
        {
          v12 = (char *)&__base + j;
          v13 = v10 + j;
          v14 = &v479[j + 2256];
          *((_QWORD *)v12 + 283) = v12 + 2280;
          *((_QWORD *)v12 + 284) = 0x600000000;
          if (&__base != (void **)v10)
          {
            v15 = *(unsigned int *)(v13 + 2272);
            if (*(_DWORD *)(v13 + 2272))
            {
              if (v15 < 7)
              {
                v16 = *(unsigned int *)(v13 + 2272);
                goto LABEL_25;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v12 + 2264), (uint64_t)&v479[j + 2256], *(unsigned int *)(v13 + 2272), 8);
              v16 = *(unsigned int *)(v13 + 2272);
              if ((_DWORD)v16)
              {
                v14 = (_BYTE *)*((_QWORD *)v12 + 283);
LABEL_25:
                memcpy(v14, *(const void **)(v13 + 2264), 8 * v16);
              }
              *((_DWORD *)v12 + 568) = v15;
            }
          }
          *((_DWORD *)v12 + 582) = *(_DWORD *)(v13 + 2328);
          *((_DWORD *)v12 + 584) = *(_DWORD *)(v13 + 2336);
        }
        v480 = &v482;
        v481 = 0;
        if (*(_DWORD *)(v10 + 2512))
          sub_1C614CA14((uint64_t)&v480, v10 + 2504);
        v482 = &v485;
        v483 = 0;
        v484 = 0;
        if (*(_QWORD *)(v10 + 2528))
          sub_1C6154398((uint64_t)&v482, v10 + 2520);
        v485 = &v487;
        v486 = 0;
        if (*(_DWORD *)(v10 + 2552))
          sub_1C614CA14((uint64_t)&v485, v10 + 2544);
        v487 = &v490;
        v488 = 0;
        v489 = 0;
        if (*(_QWORD *)(v10 + 2568))
          sub_1C6154398((uint64_t)&v487, v10 + 2560);
        v490 = &v492;
        v491 = 0;
        if (*(_DWORD *)(v10 + 2592))
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v490, v10 + 2584);
        v492 = *(_OWORD *)(v10 + 2600);
        v17 = *(_OWORD *)(v10 + 2616);
        v18 = *(_OWORD *)(v10 + 2632);
        v19 = *(_OWORD *)(v10 + 2664);
        v495 = *(_OWORD *)(v10 + 2648);
        v496 = v19;
        v493 = v17;
        v494 = v18;
        v20 = (char *)*v422;
        v21 = *((int *)*v422 + 676 * v9 + 670);
        if (v21 > 3)
          v22 = 0;
        else
          v22 = dword_1C677EAC0[v21];
        v23 = *(_DWORD *)(v437 + 304);
        if (v23 < *(_DWORD *)(v437 + 308))
        {
          v452 = v9;
          v24 = v22;
          v25 = (void **)&v20[2704 * v23];
          *(_DWORD *)v25 = (_DWORD)__base;
          v25[1] = v25 + 3;
          v25[2] = (void *)0x800000000;
          if ((_DWORD)v478)
            sub_1C4AC45D4((uint64_t)(v25 + 1), (uint64_t)&__nel);
          v26 = 0;
          while (2)
          {
            v27 = (char *)&v25[v26];
            v28 = (char *)&__base + v26 * 8;
            v29 = (char *)&v25[v26 + 285];
            *((_QWORD *)v27 + 283) = v29;
            *((_QWORD *)v27 + 284) = 0x600000000;
            if (v25 == &__base)
              goto LABEL_53;
            v30 = *((unsigned int *)v28 + 568);
            if (!*((_DWORD *)v28 + 568))
              goto LABEL_53;
            if (v30 < 7)
            {
              v31 = *((unsigned int *)v28 + 568);
              goto LABEL_51;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27 + 2264), (uint64_t)&v25[v26 + 285], *((unsigned int *)v28 + 568), 8);
            v31 = *((unsigned int *)v28 + 568);
            if ((_DWORD)v31)
            {
              v29 = (char *)*((_QWORD *)v27 + 283);
LABEL_51:
              memcpy(v29, *((const void **)v28 + 283), 8 * v31);
            }
            *((_DWORD *)v27 + 568) = v30;
LABEL_53:
            *((_DWORD *)v27 + 582) = *((_DWORD *)v28 + 582);
            *((_DWORD *)v27 + 584) = *((_DWORD *)v28 + 584);
            v26 += 10;
            if (v26 == 30)
            {
              v25[313] = v25 + 315;
              v25[314] = 0;
              if ((_DWORD)v481)
                sub_1C614CA14((uint64_t)(v25 + 313), (uint64_t)&v480);
              v25[315] = v25 + 318;
              v25[317] = 0;
              v25[316] = 0;
              a2 = v437;
              if (v483)
                sub_1C6154398((uint64_t)(v25 + 315), (uint64_t)&v482);
              v25[318] = v25 + 320;
              v25[319] = 0;
              if ((_DWORD)v486)
                sub_1C614CA14((uint64_t)(v25 + 318), (uint64_t)&v485);
              v25[320] = v25 + 323;
              v25[322] = 0;
              v25[321] = 0;
              if (v488)
                sub_1C6154398((uint64_t)(v25 + 320), (uint64_t)&v487);
              v25[323] = v25 + 325;
              v25[324] = 0;
              if ((_DWORD)v491)
                llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v25 + 323), (uint64_t)&v490);
              *(_OWORD *)(v25 + 325) = v492;
              v32 = v493;
              v33 = v494;
              v34 = v496;
              *(_OWORD *)(v25 + 331) = v495;
              *(_OWORD *)(v25 + 333) = v34;
              *(_OWORD *)(v25 + 327) = v32;
              *(_OWORD *)(v25 + 329) = v33;
              v35 = &v20[2704 * v23];
              *((_DWORD *)v35 + 670) = v24;
              *(_QWORD *)(v35 + 2684) = v452;
              *((_QWORD *)v35 + 337) = 0;
              goto LABEL_65;
            }
            continue;
          }
        }
        *(_QWORD *)&v497 = 0;
        v327 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v422, 0, 2704, (unint64_t *)&v497);
        v454 = *(_DWORD *)(v437 + 304);
        v328 = (void **)&v327[2704 * v454];
        *(_DWORD *)v328 = (_DWORD)__base;
        v328[1] = v328 + 3;
        v328[2] = (void *)0x800000000;
        if ((_DWORD)v478)
          sub_1C4AC45D4((uint64_t)(v328 + 1), (uint64_t)&__nel);
        v329 = 0;
        while (2)
        {
          v330 = (char *)&v328[v329];
          v331 = (const void **)((char *)&__base + v329 * 8);
          v332 = (char *)&v328[v329 + 285];
          *((_QWORD *)v330 + 283) = v332;
          *((_QWORD *)v330 + 284) = 0x600000000;
          if (v328 != &__base)
          {
            v333 = *((unsigned int *)v331 + 568);
            if (*((_DWORD *)v331 + 568))
            {
              if (v333 < 7)
              {
                v334 = *((unsigned int *)v331 + 568);
                goto LABEL_532;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v330 + 2264), (uint64_t)&v328[v329 + 285], *((unsigned int *)v331 + 568), 8);
              v334 = *((unsigned int *)v331 + 568);
              if ((_DWORD)v334)
              {
                v332 = (char *)*((_QWORD *)v330 + 283);
LABEL_532:
                memcpy(v332, v331[283], 8 * v334);
              }
              *((_DWORD *)v330 + 568) = v333;
            }
          }
          *((_DWORD *)v330 + 582) = *((_DWORD *)v331 + 582);
          *((_DWORD *)v330 + 584) = *((_DWORD *)v331 + 584);
          v329 += 10;
          if (v329 != 30)
            continue;
          break;
        }
        v328[313] = v328 + 315;
        v328[314] = 0;
        if ((_DWORD)v481)
          sub_1C614CA14((uint64_t)(v328 + 313), (uint64_t)&v480);
        v328[315] = v328 + 318;
        v328[317] = 0;
        v328[316] = 0;
        a2 = v437;
        if (v483)
          sub_1C6154398((uint64_t)(v328 + 315), (uint64_t)&v482);
        v328[318] = v328 + 320;
        v328[319] = 0;
        if ((_DWORD)v486)
          sub_1C614CA14((uint64_t)(v328 + 318), (uint64_t)&v485);
        v328[320] = v328 + 323;
        v328[322] = 0;
        v328[321] = 0;
        if (v488)
          sub_1C6154398((uint64_t)(v328 + 320), (uint64_t)&v487);
        v328[323] = v328 + 325;
        v328[324] = 0;
        if ((_DWORD)v491)
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v328 + 323), (uint64_t)&v490);
        *(_OWORD *)(v328 + 325) = v492;
        v335 = v493;
        v336 = v494;
        v337 = v496;
        *(_OWORD *)(v328 + 331) = v495;
        *(_OWORD *)(v328 + 333) = v337;
        *(_OWORD *)(v328 + 327) = v335;
        *(_OWORD *)(v328 + 329) = v336;
        v338 = &v327[2704 * v454];
        *((_DWORD *)v338 + 670) = v22;
        *((_DWORD *)v338 + 671) = v9;
        *((_DWORD *)v338 + 672) = 0;
        *((_QWORD *)v338 + 337) = 0;
        sub_1C4AC382C((uint64_t)v422, (uint64_t)v327);
        v339 = v497;
        if (*v422 != v416)
          free(*v422);
        *(_QWORD *)(v437 + 296) = v327;
        *(_DWORD *)(v437 + 308) = v339;
LABEL_65:
        ++*(_DWORD *)(a2 + 304);
        result = sub_1C4AC3FAC((uint64_t)&__base);
LABEL_66:
        v36 = *(_QWORD *)(v8 + 56);
        v426 = v8 + 48;
        if (v36 == v8 + 48)
          goto LABEL_521;
        while (2)
        {
          v37 = *(unsigned __int16 **)(v36 + 16);
          if ((v37[10] & 4) == 0)
            goto LABEL_508;
          v38 = *v37;
          if (v38 == 623)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 24) + 32) + 16);
            if (*(unsigned __int8 *)(v39 + 303) | *(unsigned __int8 *)(v39 + 305))
              v40 = 255;
            else
              v40 = 63;
          }
          else
          {
            v40 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 32) + 32 * sub_1C4C2FD5C(v38) + 19);
          }
          v41 = *(_QWORD *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
          v42 = sub_1C4AC4A50((unsigned int *)(v41 - 2704), v40);
          v43 = v42;
          *(double *)&v455 = v42;
          v44 = *(unsigned int *)(v41 - 112);
          if ((_DWORD)v44)
          {
            v45 = *(double **)(v41 - 120);
            v46 = 8 * v44;
            do
            {
              *v45 = (1.0 - v42) * *v45;
              ++v45;
              v46 -= 8;
            }
            while (v46);
          }
          *(double *)(v41 - 48) = v42 + *(double *)(v41 - 48);
          v47 = sub_1C4AC4B0C((unsigned int *)(v41 - 2704), v40);
          sub_1C4AC4BE4(v41 - 2704, v47, SHIDWORD(v47));
          v48 = *(unsigned int *)(v41 - 2704);
          if ((_DWORD)v48)
          {
            v49 = 0;
            v50 = 272;
            do
            {
              if (((v40 >> v49) & 1) != 0)
              {
                v51 = (_QWORD *)(*(_QWORD *)(v41 - 2696) + v50);
                *((_DWORD *)v51 - 66) = 0;
                *v51 = 0;
              }
              ++v49;
              v50 += 280;
            }
            while (v48 != v49);
          }
          if (v43 != 0.0)
          {
            *(_QWORD *)&v497 = v36;
            sub_1C6154528((uint64_t)&__base, v417, (uint64_t *)&v497, &v455);
          }
          v52 = *(_QWORD *)(a2 + 296);
          v53 = *(_DWORD *)(a2 + 304);
          v54 = (_WORD *)(*(_QWORD *)(a2 + 56) + 24 * *(unsigned __int16 *)(*(_QWORD *)(v36 + 16) + 6));
          if ((v54[4] & 0x1FFF) == 0x1FFE)
          {
            do
            {
              v325 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 192) + 200))(*(_QWORD *)(a2 + 192));
              v326 = *(_QWORD *)(a2 + 56);
            }
            while ((*(_WORD *)(v326 + 24 * v325 + 8) & 0x1FFF) == 0x1FFE);
            v54 = (_WORD *)(v326 + 24 * v325);
          }
          v424 = *(_QWORD **)(a2 + 192);
          v55 = (*(uint64_t (**)(void))(*v424 + 176))();
          v56 = v55;
          v57 = *(unsigned __int16 **)(v36 + 16);
          v58 = *v57;
          v59 = v58 - 9;
          v61 = (v58 - 9) <= 0x3C && ((1 << (v58 - 9)) & 0x1000000000000605) != 0
             || v58 == 0;
          if (v61 || (v57[4] & 0x10) != 0 || (*((_QWORD *)v57 + 2) & 1) != 0)
            v62 = 1;
          else
            v62 = -5;
          v434 = v62;
          v428 = (v59 <= 0x3C && ((1 << v59) & 0x1000000000000605) != 0
               || !*v57
               || (v57[4] & 0x10) != 0
               || (v57[8] & 1) != 0)
              && (v57[4] & 8) == 0;
          v63 = v52 + 2704 * v53;
          v64 = (const llvm::MachineInstr *)*(unsigned int *)(v36 + 40);
          v447 = v63;
          v453 = (llvm::MachineInstr *)v36;
          if ((_DWORD)v64)
          {
            v65 = 0;
            v66 = 0;
            v438 = (_QWORD *)(v55 + 8);
            v425 = v63 - 160;
            v67 = (_QWORD *)(v63 - 200);
            v427 = v55;
            v429 = v54;
            v430 = (const llvm::MachineInstr *)*(unsigned int *)(v36 + 40);
            v432 = (_QWORD *)(v63 - 184);
            while (1)
            {
              v68 = sub_1C4AD4FB8(v36, v65, v438);
              v69 = 32 * (_QWORD)v65;
              if (v68 == 1)
                break;
              v75 = *(_QWORD *)(v36 + 32);
              if ((*(_DWORD *)(v75 + 32 * (_QWORD)v65) & 0x10000FF) == 0)
              {
                v76 = *(unsigned int *)(v75 + 32 * (_QWORD)v65 + 4);
                if ((v76 - 1) <= 0x56
                  && ((byte_1C69FEF1A[v76 >> 3] >> (v76 & 7)) & 1) != 0)
                {
                  break;
                }
              }
              v63 = v447;
LABEL_173:
              v65 = (const llvm::MachineInstr *)((char *)v65 + 1);
              if (v65 == v64)
                goto LABEL_189;
            }
            v442 = v66;
            v70 = (unsigned __int16)v54[10];
            v71 = v434;
            if (v54[10])
            {
              UseIdx = llvm::TargetSchedModel::findUseIdx((uint64_t)v453, v65);
              v69 = 32 * (_QWORD)v65;
              v101 = (int *)(v424[19] + 12 * (unsigned __int16)v54[9] + 8);
              for (k = 12 * v70; k; k -= 12)
              {
                v103 = *(v101 - 2);
                if (v103 >= UseIdx)
                {
                  if (v103 > UseIdx)
                  {
                    v71 = 0;
                    break;
                  }
                  if (!*(v101 - 1))
                  {
                    v71 = *v101;
                    break;
                  }
                }
                v71 = 0;
                v101 += 3;
              }
            }
            v72 = *((_QWORD *)v453 + 4);
            v444 = v65;
            if ((*(_DWORD *)(v72 + v69) & 0x10000FF) == 0)
            {
              v73 = *(unsigned int *)(v72 + 32 * (_QWORD)v65 + 4);
              if ((v73 - 1) <= 0x56
                && ((byte_1C69FEF1A[v73 >> 3] >> (v73 & 7)) & 1) != 0)
              {
                v74 = sub_1C4AC5050(v425, *(unsigned __int16 *)(*(_QWORD *)(v56 + 112) + 2 * v73), v71);
LABEL_170:
                v66 = v442;
                if (v442 <= v74)
                  v66 = v74;
                v63 = v447;
                v36 = (uint64_t)v453;
                v65 = v444;
                goto LABEL_173;
              }
            }
            v431 = v69;
            sub_1C49E178C(&__base, v453, v65, v56, 0, 0);
            v74 = 0;
            v77 = (unint64_t)__base;
            v78 = __nel;
            v79 = (unint64_t)__base >> 32;
            if ((_DWORD)__nel == HIDWORD(__base))
            {
LABEL_169:
              v64 = v430;
              goto LABEL_170;
            }
            v74 = 0;
            do
            {
              v80 = sub_1C4AC5050((uint64_t)v67, v79, v71);
              if (v74 <= v80)
                v74 = v80;
              v77 = (v77 & 0xFFFFFFFF00000000) + 0x100000000;
              v79 = HIDWORD(v77);
            }
            while (v78 != HIDWORD(v77));
            v81 = (unint64_t)__base;
            v82 = __nel;
            v83 = (unint64_t)__base >> 32;
            if ((_DWORD)__nel == HIDWORD(__base))
            {
              a2 = v437;
              v54 = v429;
              goto LABEL_169;
            }
            v84 = 0;
            v85 = 1;
            v86 = v447;
            v87 = v432;
            do
            {
              v88 = *(_QWORD *)(v86 - 176);
              v89 = (v83 + 1);
              if (v88 <= v83 && v89 != v88)
              {
                if (v89 >= v88)
                {
                  sub_1C6154724(v432, v89 - v88);
                  v87 = v432;
                  v86 = v447;
                }
                else
                {
                  *(_QWORD *)(v86 - 176) = v89;
                }
              }
              if (*(_BYTE *)(*v87 + v83))
              {
                v91 = *(unsigned int *)(v86 - 192);
                v92 = (v83 + 1);
                if (v91 <= v83 && (_DWORD)v91 != (_DWORD)v92)
                {
                  if (v91 <= v92)
                  {
                    v94 = *(unsigned int *)(v86 - 192);
                    if (v92 > *(_DWORD *)(v86 - 188))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v67, (uint64_t)v432, (v83 + 1), 4);
                      v86 = v447;
                      v94 = *(unsigned int *)(v447 - 192);
                    }
                    memset_pattern16((void *)(*(_QWORD *)(v86 - 200) + 4 * v94), &unk_1C677EAB0, 4 * (v92 - v91));
                    v86 = v447;
                    LODWORD(v92) = v92 - v91 + *(_DWORD *)(v447 - 192);
                    v87 = v432;
                  }
                  *(_DWORD *)(v86 - 192) = v92;
                }
                if (*(_DWORD *)(*v67 + 4 * v83) >= v71)
                  ++v84;
                else
                  v85 = 0;
              }
              else
              {
                v85 = 0;
              }
              v81 = (v81 & 0xFFFFFFFF00000000) + 0x100000000;
              v83 = HIDWORD(v81);
            }
            while (v82 != HIDWORD(v81));
            v95 = v428;
            if (!v84)
              v95 = 0;
            a2 = v437;
            v54 = v429;
            if (v95)
            {
              *(_QWORD *)(v86 - 32) += v84;
              v96 = atomic_load((unsigned __int8 *)&qword_1ED7EDF90);
              if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EDF90))
              {
                byte_1ED7EDF81 = 0;
                __cxa_guard_release(&qword_1ED7EDF90);
              }
              if (byte_1ED7EDF81)
              {
                if (llvm::MachineInstr::getNumExplicitOperands((uint64_t)v453) <= v444)
                  goto LABEL_185;
                v97 = (unsigned __int16 *)*((_QWORD *)v453 + 2);
                if ((word_1C6AA47DC[dword_1C6A9B6CC[*v97] + (unsigned __int16)v444] & 0xFFFB) == 0x3A)
                {
                  v99 = (_DWORD)v444 + 2;
                }
                else
                {
                  v98 = *((_QWORD *)v453 + 4);
                  if ((*(_DWORD *)(v98 + v431) & 0x10000FF) == 0x1000000)
                  {
                    v104 = *((unsigned __int8 *)v97 + 4);
                    if ((v97[4] & 2) == 0 || (v108 = *((_DWORD *)v453 + 10), v108 == v104))
                    {
                      v105 = v104;
                    }
                    else
                    {
                      v109 = v108 - 1;
                      v105 = v104;
                      do
                      {
                        v110 = *(_DWORD *)(v98 + 32 * v104);
                        if ((v110 & 0x10000FF) != 0x1000000)
                          break;
                        v105 += (v110 & 0x2000000) == 0;
                        if (v109 == v104)
                          break;
                        ++v104;
                      }
                      while ((v110 & 0x2000000) == 0);
                    }
                    v99 = v105 + (_DWORD)v444;
                  }
                  else if (!*(_DWORD *)(v98 + v431) || *(_DWORD *)(v98 + v431) == 7)
                  {
                    v99 = (_DWORD)v444 + 1;
                  }
                  else
                  {
LABEL_185:
                    v99 = -1;
                  }
                }
                v106 = *((_QWORD *)v453 + 4) + 32 * v99;
                v107 = 0x10000;
                if (!v85)
                  v107 = 81920;
                *(_QWORD *)(v106 + 16) = *(_QWORD *)(v106 + 16) & 0xFFFFFFFFFFFE3FFFLL | v107;
              }
            }
            v56 = v427;
            goto LABEL_169;
          }
          v66 = 0;
LABEL_189:
          sub_1C4AC4BE4(v63 - 2704, v66, v66);
          v111 = sub_1C4AD4FB8(v36, 0, (_QWORD *)(v56 + 8));
          v112 = v111;
          v113 = 0;
          v114 = *(_DWORD **)(v36 + 32);
          if ((*v114 & 0x10000FF) == 0x1000000)
          {
            v115 = v114[1];
            if ((v115 - 1) > 0x56)
              v113 = 0;
            else
              v113 = (byte_1C69FEF1A[v115 >> 3] >> (v115 & 7)) & 1;
          }
          if (v111 == 2 || (v113 & 1) != 0)
          {
            v116 = llvm::TargetSchedModel::computeInstrLatency(v423, (const llvm::MachineInstr *)v36, 1);
            if (v113)
            {
              sub_1C4AC51BC(v447 - 160, *(unsigned __int16 *)(*(_QWORD *)(v56 + 112) + 2 * *(unsigned int *)(*(_QWORD *)(v36 + 32) + 4)), v116, 0);
            }
            else
            {
              sub_1C49E178C(&__base, (_QWORD *)v36, 0, v56, 0, 0);
              v117 = (unint64_t)__base;
              v118 = __nel;
              v119 = v112 == 2 && v428;
              v120 = (unint64_t)__base >> 32;
              if ((_DWORD)__nel != HIDWORD(__base))
              {
                do
                {
                  sub_1C4AC51BC(v447 - 200, v120, v116, v119);
                  v117 = (v117 & 0xFFFFFFFF00000000) + 0x100000000;
                  v120 = HIDWORD(v117);
                }
                while (v118 != HIDWORD(v117));
              }
            }
          }
          v121 = *(_QWORD *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
          v122 = *(_QWORD *)a2;
          v123 = *(_DWORD *)(v36 + 40);
          if (v123)
          {
            v124 = 0;
            v125 = (_QWORD *)(v121 - 120);
            v126 = 0.0;
            do
            {
              if (sub_1C4AD4FB8(v36, v124, (_QWORD *)(v122 + 8)) - 3 >= 0xFFFFFFFE)
              {
                sub_1C49E178C(&__base, (_QWORD *)v36, v124, v122, 0, 0);
                v127 = (unint64_t)__base;
                v128 = __nel;
                v129 = (unint64_t)__base >> 32;
                v130 = 0.0;
                if ((_DWORD)__nel != HIDWORD(__base))
                {
                  do
                  {
                    v131 = v129 >> 1;
                    if (*(_DWORD *)(v121 - 112) <= v129 >> 1)
                      sub_1C6154790(v121 - 120, v131 + 1);
                    v130 = v130 + 1.0 - *(double *)(*v125 + 8 * v131);
                    *(_QWORD *)(*v125 + 8 * v131) = 0x3FF0000000000000;
                    v127 = (v127 & 0xFFFFFFFF00000000) + 0x100000000;
                    v129 = HIDWORD(v127);
                  }
                  while (v128 != HIDWORD(v127));
                }
                v126 = v126 + v130;
                a2 = v437;
                v36 = (uint64_t)v453;
              }
              ++v124;
            }
            while (v124 != v123);
            v122 = *(_QWORD *)a2;
            v132 = *(unsigned int *)(v36 + 40);
          }
          else
          {
            v132 = 0;
            v126 = 0.0;
          }
          *(double *)(v121 - 40) = v126 + *(double *)(v121 - 40);
          *(_QWORD *)&v497 = &v498;
          *((_QWORD *)&v497 + 1) = 0x200000000;
          v448 = *(unsigned __int8 *)(a2 + 12);
          __base = &v478;
          __nel = 0x600000000;
          if (v132)
          {
            v133 = 0;
            while (2)
            {
              if (!sub_1C4AD4FB8((uint64_t)v453, v133, (_QWORD *)(v122 + 8)))
                goto LABEL_254;
              if (v133 >= llvm::MachineInstr::getNumExplicitOperands((uint64_t)v453))
              {
LABEL_272:
                v137 = -1;
              }
              else
              {
                v134 = (unsigned __int16 *)*((_QWORD *)v453 + 2);
                if ((word_1C6AA47DC[dword_1C6A9B6CC[*v134] + (unsigned __int16)v133] & 0xFFFB) == 0x3A)
                {
                  v137 = v133 + 2;
                }
                else
                {
                  v135 = *((_QWORD *)v453 + 4);
                  if ((*(_DWORD *)(v135 + 32 * v133) & 0x10000FF) == 0x1000000)
                  {
                    v138 = *((unsigned __int8 *)v134 + 4);
                    if ((v134[4] & 2) == 0 || (v152 = *((_DWORD *)v453 + 10), v152 == v138))
                    {
                      v139 = v138;
                    }
                    else
                    {
                      v153 = v152 - 1;
                      v139 = v138;
                      do
                      {
                        v154 = *(_DWORD *)(v135 + 32 * v138);
                        if ((v154 & 0x10000FF) != 0x1000000)
                          break;
                        v139 += (v154 & 0x2000000) == 0;
                        if (v153 == v138)
                          break;
                        ++v138;
                      }
                      while ((v154 & 0x2000000) == 0);
                    }
                    v137 = v139 + v133;
                  }
                  else
                  {
                    if (*(_DWORD *)(v135 + 32 * v133))
                      v136 = *(_DWORD *)(v135 + 32 * v133) == 7;
                    else
                      v136 = 1;
                    if (!v136)
                      goto LABEL_272;
                    v137 = v133 + 1;
                  }
                }
              }
              v140 = (*(_DWORD *)(*((_QWORD *)v453 + 4) + 32 * v137 + 16) >> 20) & 0xF;
              v141 = 1 << sub_1C4AD4FB8((uint64_t)v453, v133, (_QWORD *)(v122 + 8));
              if ((v141 & 0xAC) != 0)
              {
                LODWORD(v465) = 3;
                v142 = v453;
                goto LABEL_244;
              }
              if ((v141 & 0x52) != 0)
              {
                if (v133 >= llvm::MachineInstr::getNumExplicitOperands((uint64_t)v453))
                  goto LABEL_271;
                v143 = (unsigned __int16 *)*((_QWORD *)v453 + 2);
                if ((word_1C6AA47DC[dword_1C6A9B6CC[*v143] + (unsigned __int16)v133] & 0xFFFB) == 0x3A)
                {
                  v145 = v133 + 2;
                }
                else
                {
                  v144 = *((_QWORD *)v453 + 4);
                  if ((*(_DWORD *)(v144 + 32 * v133) & 0x10000FF) == 0x1000000)
                  {
                    v146 = *((unsigned __int8 *)v143 + 4);
                    if ((v143[4] & 2) == 0 || (v155 = *((_DWORD *)v453 + 10), v155 == v146))
                    {
                      v147 = v146;
                    }
                    else
                    {
                      v156 = v155 - 1;
                      v147 = v146;
                      do
                      {
                        v157 = *(_DWORD *)(v144 + 32 * v146);
                        if ((v157 & 0x10000FF) != 0x1000000)
                          break;
                        v147 += (v157 & 0x2000000) == 0;
                        if (v156 == v146)
                          break;
                        ++v146;
                      }
                      while ((v157 & 0x2000000) == 0);
                    }
                    v145 = v147 + v133;
                  }
                  else if (!*(_DWORD *)(v144 + 32 * v133)
                         || *(_DWORD *)(v144 + 32 * v133) == 7)
                  {
                    v145 = v133 + 1;
                  }
                  else
                  {
LABEL_271:
                    v145 = -1;
                  }
                }
                v142 = v453;
                if ((*(_BYTE *)(*((_QWORD *)v453 + 4) + 32 * v145 + 16) & 0x10) != 0)
                  LODWORD(v465) = 2;
                else
                  LODWORD(v465) = 1;
LABEL_244:
                sub_1C49E178C((_DWORD *)&v465 + 1, v142, v133, v122, 0, 0);
              }
              else
              {
                LODWORD(v465) = 0;
                HIDWORD(v465) = 0;
              }
              v148 = v465;
              if (!v140 || v448 && sub_1C4AD4FB8((uint64_t)v453, v133, (_QWORD *)(v122 + 8)) == 3)
              {
                v149 = __nel;
                if (__nel >= (unint64_t)HIDWORD(__nel))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v478, __nel + 1, 16);
                  v149 = __nel;
                }
                *((_OWORD *)__base + v149) = v148;
                LODWORD(__nel) = __nel + 1;
                if (!v140)
                  goto LABEL_254;
                *(_QWORD *)&v460 = sub_1C49F9518((uint64_t)v453, v133, v122);
                DWORD2(v460) = v150;
                v465 = 0uLL;
              }
              else
              {
                *(_QWORD *)&v460 = sub_1C49F9518((uint64_t)v453, v133, v122);
                DWORD2(v460) = v151;
                v465 = v148;
              }
              sub_1C4AC5348((uint64_t)&v497, v140, (uint64_t)&v460, &v465);
LABEL_254:
              if (++v133 == v132)
                break;
              continue;
            }
          }
          v36 = (uint64_t)v453;
          v158 = **((unsigned __int16 **)v453 + 2);
          v159 = sub_1C4C915C4(v158);
          if ((v159 & 0xFF00000000) == 0)
            goto LABEL_671;
          if ((_DWORD)v159 == 100 || (_DWORD)v159 == 193)
          {
            v160 = *(_DWORD *)(*((_QWORD *)v453 + 4) + 32 * sub_1C4C2FD5C(v158) + 16);
            v161 = (unsigned __int16)v160 >> 12;
            if ((unsigned __int16)v160 >> 12)
            {
              *(_QWORD *)&v460 = sub_1C49F972C((uint64_t)v453);
              DWORD2(v460) = v162;
              v465 = 0uLL;
              sub_1C4AC5348((uint64_t)&v497, v161, (uint64_t)&v460, &v465);
            }
          }
          v163 = __nel;
          v164 = (uint64_t *)__base;
          if (__nel >= 2)
          {
            qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AC5414);
            v163 = __nel;
            v164 = (uint64_t *)__base;
          }
          if (v163)
          {
            v165 = 16 * v163;
            do
            {
              sub_1C4AC47B0(*(_QWORD *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304) - 2704, v164);
              v164 += 2;
              v165 -= 16;
            }
            while (v165);
            v164 = (uint64_t *)__base;
          }
          if (v164 != &v478)
            free(v164);
          if (DWORD2(v497))
          {
            v166 = (unsigned int *)v497;
            v167 = (unsigned int *)(v497 + 32 * DWORD2(v497));
            v168 = (_QWORD *)(*(_QWORD *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304) - 2696);
            do
            {
              v169 = *v168 + 280 * *v166;
              v170 = *(unsigned int *)(v169 + 8);
              if ((_DWORD)v170)
              {
                v171 = 32 * v170;
                v172 = (int *)(*(_QWORD *)v169 + 12);
                v173 = 1.0;
                do
                {
                  v174 = (double)*(v172 - 2);
                  v175 = *v172;
                  v172 += 8;
                  v176 = (double)v175;
                  v177 = (double)v175 - (v174 + -1.0);
                  if ((double)v175 < 0.0)
                    v176 = 0.0;
                  if (v177 < v176)
                    v176 = v177;
                  v173 = v173 * (1.0 - v176 / v177);
                  v171 -= 32;
                }
                while (v171);
              }
              else
              {
                v173 = 1.0;
              }
              v178 = *v168 + 280 * *v166;
              v179 = *(double *)(v178 + 272);
              sub_1C47E9C18(v169, (unint64_t)v166);
              v180 = (1.0 - v173) * v179;
              if ((int)v166[2] > 60)
                v180 = 1.0;
              *(double *)(v178 + 272) = v180;
              v166 += 8;
            }
            while (v166 != v167);
          }
          v181 = sub_1C49F97A0((uint64_t)v453, (uint64_t)v423, 1);
          v182 = *((unsigned int *)v453 + 10);
          if ((_DWORD)v182)
          {
            v183 = 0;
            LODWORD(v184) = 0;
            v185 = (_QWORD *)(*(_QWORD *)a2 + 8);
            v186 = 16;
            do
            {
              v187 = sub_1C4AD4FB8((uint64_t)v453, v183, v185);
              if (v187 == 4)
              {
                v188 = *((_QWORD *)v453 + 4);
                v189 = *(int *)(v188 + v186);
                v190 = sub_1C49C802C(v188 + v186 - 16);
                if ((v190 & 0xFF00000000) == 0)
                {
                  LODWORD(v184) = dword_1C677EAD0[v189 - 81];
                  goto LABEL_324;
                }
                v191 = (uint8x8_t)vcnt_s8((int8x8_t)v190);
                v191.i16[0] = vaddlv_u8(v191);
                LODWORD(v184) = v191.i32[0] + v184;
              }
              else if (v187 == 5)
              {
                LODWORD(v184) = v184 + 1;
              }
              ++v183;
              v186 += 32;
            }
            while (v182 != v183);
            if (!(_DWORD)v184)
              goto LABEL_310;
          }
          else
          {
LABEL_310:
            v192 = (int *)((char *)v453 + 48);
            v193 = *((_QWORD *)v453 + 6);
            if (v193 < 8)
              goto LABEL_323;
            if ((v193 & 7) == 0)
            {
              *((_QWORD *)v453 + 6) = v193 & 0xFFFFFFFFFFFFFFF8;
              v197 = (int *)((char *)v453 + 56);
              goto LABEL_318;
            }
            LODWORD(v184) = 0;
            if ((*((_QWORD *)v453 + 6) & 7) != 3)
              goto LABEL_324;
            v194 = (int *)(v193 & 0xFFFFFFFFFFFFFFF8);
            if ((v193 & 0xFFFFFFFFFFFFFFF8) == 0)
              goto LABEL_324;
            v196 = *v194;
            v192 = v194 + 2;
            v195 = v196;
            if (!(_DWORD)v196)
            {
LABEL_323:
              LODWORD(v184) = 0;
              goto LABEL_324;
            }
            v197 = &v192[2 * v195];
LABEL_318:
            while (1)
            {
              v198 = *(_QWORD **)v192;
              if (!*(_DWORD *)(*(_QWORD *)v192 + 16))
              {
                if ((*v198 & 4) == 0)
                  break;
                v199 = *v198 & 0xFFFFFFFFFFFFFFF8;
                if (!v199 || *(_DWORD *)(v199 + 8) != 7)
                  break;
              }
              v192 += 2;
              if (v192 == v197)
                goto LABEL_323;
            }
            v322 = v198[3];
            v321 = v198 + 3;
            if ((v322 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v324 = (unint64_t)(sub_1C4825F50(v321) + 7) >> 3;
              if ((_DWORD)v323 == 1)
            }
            else
            {
              v324 = -1;
            }
            v184 = (v324 + 3) >> 2;
          }
LABEL_324:
          v200 = *(_QWORD *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
          sub_1C4AC4BE4(v200 - 2704, v181, v181);
          *(_QWORD *)(v200 - 80) += v181;
          *(_DWORD *)(v200 - 72) += v184;
          if ((__int128 *)v497 != &v498)
            free((void *)v497);
          v201 = **((unsigned __int16 **)v453 + 2);
          result = sub_1C4C915C4(v201);
          if ((result & 0xFF00000000) == 0)
            goto LABEL_671;
          if ((int)result > 13)
          {
            if ((_DWORD)result != 14)
            {
              if ((_DWORD)result != 17)
                goto LABEL_508;
              v202 = *(_DWORD *)(*((_QWORD *)v453 + 4) + 32 * sub_1C4C2FD5C(v201) + 16);
              v203 = sub_1C4AC43EC((uint64_t)v453);
LABEL_357:
              result = sub_1C4AC417C(a2, v202, v203);
              goto LABEL_508;
            }
            result = sub_1C4C2FD5C(v201);
            v247 = *(_DWORD *)(*((_QWORD *)v453 + 4) + 32 * result + 16);
            if (v247 < 1)
              goto LABEL_508;
            while (2)
            {
              v248 = *(_QWORD *)(a2 + 296);
              v249 = *(unsigned int *)(a2 + 304);
              v445 = (unsigned int *)(v248 + 2704 * v249);
              v250 = *(v445 - 6);
              if (v250 != 1)
              {
                if (v250 != 2)
                {
                  v36 = (uint64_t)v453;
                  if (!v250)
                    goto LABEL_508;
                  goto LABEL_400;
                }
                v439 = v247;
                v251 = (int)*(v445 - 5);
                v252 = v248 + 2704 * (int)v251;
                v433 = *(_DWORD *)(v252 + 5392);
                LODWORD(v499[0]) = 0;
                v497 = 0u;
                v498 = 0u;
                memset((char *)v499 + 8, 0, 40);
                v436 = v251 + 1;
                if ((int)v251 + 1 < (int)v249)
                {
                  v253 = ~(_DWORD)v251 + v249;
                  v254 = (_OWORD *)(v248 + 2704 * (int)v251 + 5304);
                  do
                  {
                    sub_1C4AC58DC((uint64_t)&__base, v254, v252 + 2600);
                    sub_1C4AC5CA8((uint64_t)&v497, (uint64_t)&__base);
                    v254 += 169;
                    --v253;
                  }
                  while (v253);
                }
                v255 = (unsigned int *)(v248 + 2704 * v436);
                v435 = v249;
                if (v436 == v249 || (v256 = v255 + 676, v255 + 676 == v445))
                {
                  v257 = (unsigned int *)(v248 + 2704 * v436);
                }
                else
                {
                  v451 = ~(-1 << *(_DWORD *)(a2 + 8));
                  v307 = v248 + 2704 * (int)v251 + 7744;
                  v257 = (unsigned int *)(v248 + 2704 * v436);
                  do
                  {
                    v308 = 0;
                    v309 = v255;
                    v255 = v256;
                    for (m = 584; m != 644; m += 20)
                      v308 += v257[m];
                    v443 = sub_1C4AC4B0C(v257, v451);
                    v311 = 0;
                    v312 = 0;
                    v313 = *((_QWORD *)v257 + 328);
                    v314 = v257[658];
                    v315 = *((_QWORD *)v257 + 330);
                    do
                    {
                      v312 += *(_DWORD *)(v307 + v311);
                      v311 += 80;
                    }
                    while (v311 != 240);
                    v316 = sub_1C4AC4B0C(v255, v451);
                    v317 = *((_QWORD *)v309 + 666);
                    if (v313 < v317
                      || v317 >= v313
                      && ((v318 = v309[1334], v314 < v318)
                       || v318 >= v314
                       && ((v319 = *((_QWORD *)v309 + 668), v315 < v319)
                        || v319 >= v315
                        && (v308 < v312
                         || v312 >= v308
                         && (SHIDWORD(v443) < SHIDWORD(v316)
                          || ((int)v443 < (int)v316 ? (v320 = SHIDWORD(v316) < SHIDWORD(v443)) : (v320 = 1), !v320))))))
                    {
                      v257 = v255;
                    }
                    v256 = v255 + 676;
                    v307 += 2704;
                  }
                  while (v255 + 676 != v445);
                }
                LODWORD(__base) = *v257;
                __nel = (size_t)v479;
                v478 = 0x800000000;
                v36 = (uint64_t)v453;
                if (v257[4])
                  sub_1C4AC45D4((uint64_t)&__nel, (uint64_t)(v257 + 2));
                v258 = 0;
                v440 = v439 - v433;
                a2 = v437;
                while (2)
                {
                  v259 = (char *)&__base + v258 * 4;
                  v260 = &v257[v258];
                  v261 = &v479[v258 * 4 + 2256];
                  *((_QWORD *)v259 + 283) = v259 + 2280;
                  *((_QWORD *)v259 + 284) = 0x600000000;
                  if (&__base != (void **)v257)
                  {
                    v262 = v260[568];
                    if (v260[568])
                    {
                      if (v262 < 7)
                      {
                        v263 = v260[568];
                        goto LABEL_417;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v259 + 2264), (uint64_t)&v479[v258 * 4 + 2256], v260[568], 8);
                      v263 = v260[568];
                      if ((_DWORD)v263)
                      {
                        v261 = (_BYTE *)*((_QWORD *)v259 + 283);
LABEL_417:
                        memcpy(v261, *((const void **)v260 + 283), 8 * v263);
                      }
                      *((_DWORD *)v259 + 568) = v262;
                    }
                  }
                  *((_DWORD *)v259 + 582) = v260[582];
                  *((_DWORD *)v259 + 584) = v260[584];
                  v258 += 20;
                  if (v258 != 60)
                    continue;
                  break;
                }
                v480 = &v482;
                v481 = 0;
                if (v257[628])
                  sub_1C614CA14((uint64_t)&v480, (uint64_t)(v257 + 626));
                v482 = &v485;
                v483 = 0;
                v484 = 0;
                if (*((_QWORD *)v257 + 316))
                  sub_1C6154398((uint64_t)&v482, (uint64_t)(v257 + 630));
                v485 = &v487;
                v486 = 0;
                if (v257[638])
                  sub_1C614CA14((uint64_t)&v485, (uint64_t)(v257 + 636));
                v487 = &v490;
                v488 = 0;
                v489 = 0;
                if (*((_QWORD *)v257 + 321))
                  sub_1C6154398((uint64_t)&v487, (uint64_t)(v257 + 640));
                v490 = &v492;
                v491 = 0;
                if (v257[648])
                  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v490, (uint64_t)(v257 + 646));
                v492 = *(_OWORD *)(v257 + 650);
                v264 = *(_OWORD *)(v257 + 654);
                v265 = *(_OWORD *)(v257 + 658);
                v266 = *(_OWORD *)(v257 + 666);
                v495 = *(_OWORD *)(v257 + 662);
                v496 = v266;
                v493 = v264;
                v494 = v265;
                sub_1C4AC5968((uint64_t)&v460, (uint64_t)&v497, 1.0 / ((double)v435 - (double)(int)v436));
                v465 = *(_OWORD *)(v252 + 2600);
                v267 = *(_OWORD *)(v252 + 2616);
                v268 = *(_OWORD *)(v252 + 2632);
                v269 = *(_OWORD *)(v252 + 2664);
                v468 = *(_OWORD *)(v252 + 2648);
                v469 = v269;
                v466 = v267;
                v467 = v268;
                sub_1C4AC5CA8((uint64_t)&v465, (uint64_t)&v460);
                v494 = v467;
                v495 = v468;
                v496 = v469;
                v492 = v465;
                v493 = v466;
                *(_DWORD *)v252 = (_DWORD)__base;
                sub_1C4AC45D4(v252 + 8, (uint64_t)&__nel);
                v270 = 0;
                while (2)
                {
                  v271 = (unsigned int *)(v252 + v270);
                  v272 = (const void **)((char *)&__base + v270);
                  if ((void **)v252 == &__base)
                    goto LABEL_443;
                  v273 = (void **)(v271 + 566);
                  v274 = *((unsigned int *)v272 + 568);
                  v275 = v271[568];
                  if (v275 >= v274)
                  {
                    if ((_DWORD)v274)
                      memmove(*v273, v272[283], 8 * v274);
                    goto LABEL_442;
                  }
                  if (*(_DWORD *)(v252 + v270 + 2276) < v274)
                  {
                    v271[568] = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v271 + 566), v252 + v270 + 2280, v274, 8);
                  }
                  else if ((_DWORD)v275)
                  {
                    memmove(*v273, v272[283], 8 * v275);
LABEL_440:
                    v276 = *((unsigned int *)v272 + 568);
                    if (v275 != v276)
                      memcpy((char *)*v273 + 8 * v275, (char *)v272[283] + 8 * v275, 8 * v276 - 8 * v275);
LABEL_442:
                    v271[568] = v274;
LABEL_443:
                    v271[582] = *((_DWORD *)v272 + 582);
                    v271[584] = *((_DWORD *)v272 + 584);
                    v270 += 80;
                    if (v270 == 240)
                    {
                      sub_1C614CA14(v252 + 2504, (uint64_t)&v480);
                      sub_1C6154398(v252 + 2520, (uint64_t)&v482);
                      sub_1C614CA14(v252 + 2544, (uint64_t)&v485);
                      sub_1C6154398(v252 + 2560, (uint64_t)&v487);
                      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v252 + 2584, (uint64_t)&v490);
                      *(_OWORD *)(v252 + 2600) = v492;
                      v277 = v493;
                      v278 = v494;
                      v279 = v496;
                      *(_OWORD *)(v252 + 2648) = v495;
                      *(_OWORD *)(v252 + 2664) = v279;
                      *(_OWORD *)(v252 + 2616) = v277;
                      *(_OWORD *)(v252 + 2632) = v278;
                      sub_1C4AC59F8((uint64_t *)v422, *(_QWORD *)(v437 + 296) + 2704 * v436, *(_QWORD *)(v437 + 296) + 2704 * *(unsigned int *)(v437 + 304));
                      result = sub_1C4AC3FAC((uint64_t)&__base);
                      goto LABEL_484;
                    }
                    continue;
                  }
                  break;
                }
                v275 = 0;
                goto LABEL_440;
              }
              v441 = v247;
              v280 = (int)*(v445 - 5);
              v281 = v248 + 2704 * (int)v280;
              v282 = *(_DWORD *)(v281 + 5392);
              v450 = (__int128 *)(v281 + 2600);
              sub_1C4AC58DC((uint64_t)&v497, (_OWORD *)(v281 + 5304), v281 + 2600);
              LODWORD(__base) = *(_DWORD *)(v281 + 2704);
              __nel = (size_t)v479;
              v478 = 0x800000000;
              if (*(_DWORD *)(v281 + 2720))
                sub_1C4AC45D4((uint64_t)&__nel, v281 + 2712);
              v283 = 0;
              v446 = v280 + 1;
              v440 = v441 - v282;
              v284 = v248 + 2704 * (int)v280;
LABEL_448:
              v285 = (char *)&__base + v283;
              v286 = v284 + v283;
              v287 = &v479[v283 + 2256];
              *((_QWORD *)v285 + 283) = v285 + 2280;
              *((_QWORD *)v285 + 284) = 0x600000000;
              v288 = *(unsigned int *)(v284 + v283 + 4976);
              if (&v479[v283 + 2240] != (_BYTE *)(v284 + 4968 + v283) && v288 != 0)
              {
                if (v288 < 7)
                {
                  v290 = *(unsigned int *)(v284 + v283 + 4976);
                  goto LABEL_456;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v479[v283 + 2240], (uint64_t)&v479[v283 + 2256], *(unsigned int *)(v284 + v283 + 4976), 8);
                v290 = *(unsigned int *)(v286 + 4976);
                if ((_DWORD)v290)
                {
                  v287 = *(_BYTE **)&v479[v283 + 2240];
LABEL_456:
                  memcpy(v287, *(const void **)(v286 + 4968), 8 * v290);
                }
                *((_DWORD *)v285 + 568) = v288;
              }
              *((_DWORD *)v285 + 582) = *(_DWORD *)(v286 + 5032);
              *((_DWORD *)v285 + 584) = *(_DWORD *)(v286 + 5040);
              v283 += 80;
              if (v283 == 240)
              {
                v480 = &v482;
                v481 = 0;
                if (*(_DWORD *)(v281 + 5216))
                  sub_1C614CA14((uint64_t)&v480, v281 + 5208);
                v482 = &v485;
                v483 = 0;
                v484 = 0;
                v36 = (uint64_t)v453;
                if (*(_QWORD *)(v281 + 5232))
                  sub_1C6154398((uint64_t)&v482, v281 + 5224);
                v485 = &v487;
                v486 = 0;
                a2 = v437;
                if (*(_DWORD *)(v281 + 5256))
                  sub_1C614CA14((uint64_t)&v485, v281 + 5248);
                v487 = &v490;
                v488 = 0;
                v489 = 0;
                if (*(_QWORD *)(v281 + 5272))
                  sub_1C6154398((uint64_t)&v487, v281 + 5264);
                v490 = &v492;
                v491 = 0;
                if (*(_DWORD *)(v281 + 5296))
                  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v490, v281 + 5288);
                v492 = *(_OWORD *)(v281 + 5304);
                v291 = *(_OWORD *)(v281 + 5320);
                v292 = *(_OWORD *)(v281 + 5336);
                v293 = *(_OWORD *)(v281 + 5368);
                v495 = *(_OWORD *)(v281 + 5352);
                v496 = v293;
                v493 = v291;
                v494 = v292;
                sub_1C4AC5968((uint64_t)&v460, (uint64_t)&v497, 0.9);
                v465 = *v450;
                v294 = *(_OWORD *)(v281 + 2616);
                v295 = *(_OWORD *)(v281 + 2632);
                v296 = *(_OWORD *)(v281 + 2664);
                v468 = *(_OWORD *)(v281 + 2648);
                v469 = v296;
                v466 = v294;
                v467 = v295;
                sub_1C4AC5CA8((uint64_t)&v465, (uint64_t)&v460);
                v494 = v467;
                v495 = v468;
                v496 = v469;
                v492 = v465;
                v493 = v466;
                *(_DWORD *)v281 = (_DWORD)__base;
                sub_1C4AC45D4(v281 + 8, (uint64_t)&__nel);
                v297 = 0;
                while (2)
                {
                  v298 = (unsigned int *)(v281 + v297);
                  v299 = (const void **)((char *)&__base + v297);
                  if ((void **)v281 == &__base)
                    goto LABEL_482;
                  v300 = (void **)(v298 + 566);
                  v301 = *((unsigned int *)v299 + 568);
                  v302 = v298[568];
                  if (v302 >= v301)
                  {
                    if ((_DWORD)v301)
                      memmove(*v300, v299[283], 8 * v301);
                    goto LABEL_481;
                  }
                  if (*(_DWORD *)(v281 + v297 + 2276) < v301)
                  {
                    v298[568] = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v298 + 566), v281 + v297 + 2280, v301, 8);
LABEL_478:
                    v302 = 0;
                    goto LABEL_479;
                  }
                  if (!(_DWORD)v302)
                    goto LABEL_478;
                  memmove(*v300, v299[283], 8 * v302);
LABEL_479:
                  v303 = *((unsigned int *)v299 + 568);
                  if (v302 != v303)
                    memcpy((char *)*v300 + 8 * v302, (char *)v299[283] + 8 * v302, 8 * v303 - 8 * v302);
LABEL_481:
                  v298[568] = v301;
LABEL_482:
                  v298[582] = *((_DWORD *)v299 + 582);
                  v298[584] = *((_DWORD *)v299 + 584);
                  v297 += 80;
                  if (v297 != 240)
                    continue;
                  break;
                }
                sub_1C614CA14(v281 + 2504, (uint64_t)&v480);
                sub_1C6154398(v281 + 2520, (uint64_t)&v482);
                sub_1C614CA14(v281 + 2544, (uint64_t)&v485);
                sub_1C6154398(v281 + 2560, (uint64_t)&v487);
                llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v281 + 2584, (uint64_t)&v490);
                *v450 = v492;
                v304 = v493;
                v305 = v494;
                v306 = v496;
                *(_OWORD *)(v281 + 2648) = v495;
                *(_OWORD *)(v281 + 2664) = v306;
                *(_OWORD *)(v281 + 2616) = v304;
                *(_OWORD *)(v281 + 2632) = v305;
                sub_1C4AC59F8((uint64_t *)v422, *(_QWORD *)(v437 + 296) + 2704 * v446, *(_QWORD *)(v437 + 296) + 2704 * *(unsigned int *)(v437 + 304));
                result = sub_1C4AC3FAC((uint64_t)&__base);
LABEL_484:
                v247 = v440;
LABEL_400:
                if (v247 <= 0)
                  goto LABEL_508;
                continue;
              }
              goto LABEL_448;
            }
          }
          if ((_DWORD)result == 5)
          {
            result = sub_1C4C2FD5C(v201);
            v216 = *(_QWORD *)(a2 + 296);
            v217 = v216 + 2704 * *(unsigned int *)(a2 + 304);
            if (*(_DWORD *)(v217 - 24) == 3)
            {
              v420 = *(_QWORD *)(*((_QWORD *)v453 + 4) + 32 * result + 16);
              break;
            }
            v218 = *(_DWORD *)(v217 - 20);
            v219 = v216 + 2704 * (v218 + 1);
            v220 = v216 + 2704 * (v218 - 1);
            v449 = v218;
            v221 = (_OWORD *)(v216 + 2704 * v218 + 2600);
            v222 = (__int128 *)(v220 + 2600);
            sub_1C4AC58DC((uint64_t)&v497, v221, v220 + 2600);
            sub_1C4AC58DC((uint64_t)&v465, (_OWORD *)(v219 + 2600), (uint64_t)v221);
            sub_1C4AC5968((uint64_t)&__base, (uint64_t)&v465, 9.0);
            v462 = v499[0];
            v463 = v499[1];
            v464 = v499[2];
            v460 = v497;
            v461 = v498;
            sub_1C4AC5CA8((uint64_t)&v460, (uint64_t)&__base);
            LODWORD(__base) = *(_DWORD *)v219;
            __nel = (size_t)v479;
            v478 = 0x800000000;
            if (*(_DWORD *)(v219 + 16))
              sub_1C4AC45D4((uint64_t)&__nel, v219 + 8);
            v223 = 0;
            while (2)
            {
              v224 = (char *)&__base + v223;
              v225 = v219 + v223;
              v226 = &v479[v223 + 2256];
              *((_QWORD *)v224 + 283) = v224 + 2280;
              *((_QWORD *)v224 + 284) = 0x600000000;
              if (&__base != (void **)v219)
              {
                v227 = *(unsigned int *)(v225 + 2272);
                if (*(_DWORD *)(v225 + 2272))
                {
                  if (v227 < 7)
                  {
                    v228 = *(unsigned int *)(v225 + 2272);
                    goto LABEL_368;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v224 + 2264), (uint64_t)&v479[v223 + 2256], *(unsigned int *)(v225 + 2272), 8);
                  v228 = *(unsigned int *)(v225 + 2272);
                  if ((_DWORD)v228)
                  {
                    v226 = (_BYTE *)*((_QWORD *)v224 + 283);
LABEL_368:
                    memcpy(v226, *(const void **)(v225 + 2264), 8 * v228);
                  }
                  *((_DWORD *)v224 + 568) = v227;
                }
              }
              *((_DWORD *)v224 + 582) = *(_DWORD *)(v225 + 2328);
              *((_DWORD *)v224 + 584) = *(_DWORD *)(v225 + 2336);
              v223 += 80;
              if (v223 != 240)
                continue;
              break;
            }
            v480 = &v482;
            v481 = 0;
            if (*(_DWORD *)(v219 + 2512))
              sub_1C614CA14((uint64_t)&v480, v219 + 2504);
            v482 = &v485;
            v483 = 0;
            v484 = 0;
            if (*(_QWORD *)(v219 + 2528))
              sub_1C6154398((uint64_t)&v482, v219 + 2520);
            v485 = &v487;
            v486 = 0;
            if (*(_DWORD *)(v219 + 2552))
              sub_1C614CA14((uint64_t)&v485, v219 + 2544);
            v487 = &v490;
            v488 = 0;
            v489 = 0;
            if (*(_QWORD *)(v219 + 2568))
              sub_1C6154398((uint64_t)&v487, v219 + 2560);
            v490 = &v492;
            v491 = 0;
            if (*(_DWORD *)(v219 + 2592))
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v490, v219 + 2584);
            v492 = *(_OWORD *)(v219 + 2600);
            v229 = *(_OWORD *)(v219 + 2616);
            v230 = *(_OWORD *)(v219 + 2632);
            v231 = *(_OWORD *)(v219 + 2664);
            v495 = *(_OWORD *)(v219 + 2648);
            v496 = v231;
            v493 = v229;
            v494 = v230;
            v455 = *v222;
            v232 = *(_OWORD *)(v220 + 2616);
            v233 = *(_OWORD *)(v220 + 2632);
            v234 = *(_OWORD *)(v220 + 2664);
            v458 = *(_OWORD *)(v220 + 2648);
            v459 = v234;
            v456 = v232;
            v457 = v233;
            sub_1C4AC5CA8((uint64_t)&v455, (uint64_t)&v460);
            v494 = v457;
            v495 = v458;
            v496 = v459;
            v492 = v455;
            v493 = v456;
            *(_DWORD *)v220 = (_DWORD)__base;
            sub_1C4AC45D4(v220 + 8, (uint64_t)&__nel);
            v235 = 0;
            v236 = v216 + 2704 * v449;
            while (2)
            {
              v237 = v236 + v235;
              v238 = (const void **)((char *)&__base + v235);
              if ((void **)v220 == &__base)
                goto LABEL_394;
              v239 = (void **)(v237 - 440);
              v240 = *((unsigned int *)v238 + 568);
              v241 = (_DWORD *)(v237 - 432);
              v242 = *(unsigned int *)(v237 - 432);
              if (v242 >= v240)
              {
                if ((_DWORD)v240)
                  memmove(*v239, v238[283], 8 * v240);
                goto LABEL_393;
              }
              if (*(_DWORD *)(v236 + v235 - 428) < v240)
              {
                *v241 = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v237 - 440, v236 + v235 - 424, v240, 8);
              }
              else if ((_DWORD)v242)
              {
                memmove(*v239, v238[283], 8 * v242);
LABEL_391:
                v243 = *((unsigned int *)v238 + 568);
                if (v242 != v243)
                  memcpy((char *)*v239 + 8 * v242, (char *)v238[283] + 8 * v242, 8 * v243 - 8 * v242);
LABEL_393:
                *v241 = v240;
LABEL_394:
                *(_DWORD *)(v237 - 376) = *((_DWORD *)v238 + 582);
                *(_DWORD *)(v237 - 368) = *((_DWORD *)v238 + 584);
                v235 += 80;
                if (v235 == 240)
                {
                  sub_1C614CA14(v220 + 2504, (uint64_t)&v480);
                  sub_1C6154398(v220 + 2520, (uint64_t)&v482);
                  sub_1C614CA14(v220 + 2544, (uint64_t)&v485);
                  sub_1C6154398(v220 + 2560, (uint64_t)&v487);
                  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v220 + 2584, (uint64_t)&v490);
                  *v222 = v492;
                  v244 = v493;
                  v245 = v494;
                  v246 = v496;
                  *(_OWORD *)(v220 + 2648) = v495;
                  *(_OWORD *)(v220 + 2664) = v246;
                  *(_OWORD *)(v220 + 2616) = v244;
                  *(_OWORD *)(v220 + 2632) = v245;
                  a2 = v437;
                  sub_1C4AC59F8((uint64_t *)v422, *(_QWORD *)(v437 + 296) + 2704 * v449, *(_QWORD *)(v437 + 296) + 2704 * *(unsigned int *)(v437 + 304));
                  result = sub_1C4AC3FAC((uint64_t)&__base);
                  v36 = (uint64_t)v453;
                  goto LABEL_508;
                }
                continue;
              }
              break;
            }
            v242 = 0;
            goto LABEL_391;
          }
          if ((_DWORD)result != 13)
            goto LABEL_508;
          v202 = *(_DWORD *)(*((_QWORD *)v453 + 4) + 32 * sub_1C4C2FD5C(v201) + 16);
          v203 = sub_1C4AC43EC((uint64_t)v453);
          LODWORD(v465) = v202;
          *(_QWORD *)&v497 = v203;
          v204 = *(_QWORD *)(a2 + 296);
          v205 = v204 + 2704 * *(unsigned int *)(a2 + 304);
          if ((*(_DWORD *)(v205 - 24) - 1) >= 2)
            goto LABEL_357;
          LODWORD(v460) = *(_DWORD *)(v205 - 20);
          v206 = v204 + 2704 * (int)v460;
          LODWORD(__base) = *(_DWORD *)v206;
          __nel = (size_t)v479;
          v478 = 0x800000000;
          if (*(_DWORD *)(v206 + 16))
            sub_1C4AC45D4((uint64_t)&__nel, v206 + 8);
          v207 = 0;
          while (2)
          {
            v208 = (char *)&__base + v207;
            v209 = v206 + v207;
            v210 = &v479[v207 + 2256];
            *((_QWORD *)v208 + 283) = v208 + 2280;
            *((_QWORD *)v208 + 284) = 0x600000000;
            if (&__base != (void **)v206)
            {
              v211 = *(unsigned int *)(v209 + 2272);
              if (*(_DWORD *)(v209 + 2272))
              {
                if (v211 < 7)
                {
                  v212 = *(unsigned int *)(v209 + 2272);
                  goto LABEL_340;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v208 + 2264), (uint64_t)&v479[v207 + 2256], *(unsigned int *)(v209 + 2272), 8);
                v212 = *(unsigned int *)(v209 + 2272);
                if ((_DWORD)v212)
                {
                  v210 = (_BYTE *)*((_QWORD *)v208 + 283);
LABEL_340:
                  memcpy(v210, *(const void **)(v209 + 2264), 8 * v212);
                }
                *((_DWORD *)v208 + 568) = v211;
              }
            }
            *((_DWORD *)v208 + 582) = *(_DWORD *)(v209 + 2328);
            *((_DWORD *)v208 + 584) = *(_DWORD *)(v209 + 2336);
            v207 += 80;
            if (v207 != 240)
              continue;
            break;
          }
          v480 = &v482;
          v481 = 0;
          if (*(_DWORD *)(v206 + 2512))
            sub_1C614CA14((uint64_t)&v480, v206 + 2504);
          v482 = &v485;
          v483 = 0;
          v484 = 0;
          if (*(_QWORD *)(v206 + 2528))
            sub_1C6154398((uint64_t)&v482, v206 + 2520);
          v485 = &v487;
          v486 = 0;
          if (*(_DWORD *)(v206 + 2552))
            sub_1C614CA14((uint64_t)&v485, v206 + 2544);
          v487 = &v490;
          v488 = 0;
          v489 = 0;
          if (*(_QWORD *)(v206 + 2568))
            sub_1C6154398((uint64_t)&v487, v206 + 2560);
          v490 = &v492;
          v491 = 0;
          if (*(_DWORD *)(v206 + 2592))
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v490, v206 + 2584);
          v492 = *(_OWORD *)(v206 + 2600);
          v213 = *(_OWORD *)(v206 + 2616);
          v214 = *(_OWORD *)(v206 + 2632);
          v215 = *(_OWORD *)(v206 + 2664);
          v495 = *(_OWORD *)(v206 + 2648);
          v496 = v215;
          v493 = v213;
          v494 = v214;
          LODWORD(v455) = 2;
          sub_1C4AC5430((uint64_t)v422, (uint64_t)&__base, (int *)&v455, (int *)&v460, (int *)&v465, (uint64_t *)&v497);
          result = sub_1C4AC3FAC((uint64_t)&__base);
LABEL_508:
          if ((*(_BYTE *)v36 & 4) == 0)
          {
            while ((*(_WORD *)(v36 + 44) & 8) != 0)
              v36 = *(_QWORD *)(v36 + 8);
          }
          v36 = *(_QWORD *)(v36 + 8);
          if (v36 != v426)
            continue;
          break;
        }
LABEL_521:
        v8 = v420;
      }
      while ((_QWORD *)v420 != v421);
    }
  }
  if (byte_1ED7EE018 && (*(_WORD *)(*a3 + 18) & 0x3FF0) != 0x640)
  {
    v340 = *(_QWORD *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
    result = (uint64_t)llvm::dbgs((llvm *)result);
    v341 = (llvm::raw_ostream *)result;
    v342 = *(_BYTE **)(result + 32);
    v343 = *(_QWORD *)(result + 24) - (_QWORD)v342;
    if (*(_QWORD *)(v340 - 80))
    {
      if (v343 > 0x10)
      {
        v342[16] = 32;
        *(_OWORD *)v342 = *(_OWORD *)"\nTotalIssueTime: ";
        *(_QWORD *)(result + 32) += 17;
      }
      else
      {
        v341 = llvm::raw_ostream::write((llvm::raw_ostream *)result, "\nTotalIssueTime: ", 0x11uLL);
      }
      llvm::raw_ostream::operator<<(v341, *(_QWORD *)(v340 - 80));
      v344 = (_DWORD *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v344 > 6uLL)
      {
        *(_DWORD *)((char *)v344 + 3) = 1936026723;
        *v344 = 1668891424;
        v345 = (void *)(*((_QWORD *)v341 + 4) + 7);
        *((_QWORD *)v341 + 4) = v345;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " Cycles", 7uLL);
        v345 = (void *)*((_QWORD *)v341 + 4);
      }
      if (*((_QWORD *)v341 + 3) - (_QWORD)v345 > 0x15uLL)
      {
        qmemcpy(v345, "\nIntegralGPRPressure: ", 22);
        *((_QWORD *)v341 + 4) += 22;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nIntegralGPRPressure: ", 0x16uLL);
      }
      v346 = (uint64_t *)(v340 - 104);
      *(double *)&v347 = (double)*(uint64_t *)(v340 - 104) * 0.0009765625;
      __base = &off_1E7FA8D00;
      __nel = (size_t)"%0.3f KGPR * Cycles per Thread";
      v478 = v347;
      llvm::raw_ostream::operator<<(v341, (uint64_t)&__base);
      v348 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v348 > 0x15uLL)
      {
        qmemcpy(v348, "\nIntegralRegPressure: ", 22);
        *((_QWORD *)v341 + 4) += 22;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nIntegralRegPressure: ", 0x16uLL);
      }
      v349 = 0;
      v350 = 0;
      do
        v350 += v346[v349++];
      while (v349 != 3);
      *(_QWORD *)&v497 = &off_1E7FA8D00;
      *((_QWORD *)&v497 + 1) = "%0.3f KReg * Cycles per Thread";
      *(double *)&v498 = (double)v350 * 0.0009765625;
      llvm::raw_ostream::operator<<(v341, (uint64_t)&v497);
      v351 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v351 > 0x17uLL)
      {
        qmemcpy(v351, "\nIntegralIRSTKPressure: ", 24);
        *((_QWORD *)v341 + 4) += 24;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nIntegralIRSTKPressure: ", 0x18uLL);
      }
      v352 = 0;
      v353 = 0;
      do
        v353 += v346[v352++];
      while (v352 != 3);
      v354 = (double)v353 * 0.0009765625 - (double)*v346 * 0.0009765625;
      *(_QWORD *)&v465 = &off_1E7FA8D00;
      *((_QWORD *)&v465 + 1) = "%0.3f KReg * Cycles per Thread";
      *(double *)&v466 = v354;
      llvm::raw_ostream::operator<<(v341, (uint64_t)&v465);
      v355 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v355 > 0x14uLL)
      {
        qmemcpy(v355, "\nAvgGPRDynFootprint: ", 21);
        *((_QWORD *)v341 + 4) += 21;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nAvgGPRDynFootprint: ", 0x15uLL);
      }
      v356 = round((double)*(uint64_t *)(v340 - 104) / (double)*(uint64_t *)(v340 - 80)) * 0.125;
      *(_QWORD *)&v460 = &off_1E7FA8D00;
      *((_QWORD *)&v460 + 1) = "%0.3f KB per TEC";
      *(double *)&v461 = v356;
      llvm::raw_ostream::operator<<(v341, (uint64_t)&v460);
      v357 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v357 > 0x14uLL)
      {
        qmemcpy(v357, "\nAvgRegDynFootprint: ", 21);
        *((_QWORD *)v341 + 4) += 21;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nAvgRegDynFootprint: ", 0x15uLL);
      }
      v358 = 0;
      v359 = 0;
      do
        v359 += v346[v358++];
      while (v358 != 3);
      v360 = round((double)v359 / (double)*(uint64_t *)(v340 - 80)) * 0.125;
      *(_QWORD *)&v455 = &off_1E7FA8D00;
      *((_QWORD *)&v455 + 1) = "%0.3f KB per TEC";
      *(double *)&v456 = v360;
      llvm::raw_ostream::operator<<(v341, (uint64_t)&v455);
      v361 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v361 > 0x1AuLL)
      {
        qmemcpy(v361, "\nMeanOccupancyRequirement: ", 27);
        *((_QWORD *)v341 + 4) += 27;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nMeanOccupancyRequirement: ", 0x1BuLL);
      }
      v362 = (double)*(uint64_t *)(v340 - 64) / (double)*(uint64_t *)(v340 - 80);
      v472[0] = &off_1E7FA8D00;
      v472[1] = "%0.3f per TEC";
      *(double *)&v472[2] = v362;
      llvm::raw_ostream::operator<<(v341, (uint64_t)v472);
      v363 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v363 > 0x18uLL)
      {
        qmemcpy(v363, "\nMeanChannelRequirement: ", 25);
        *((_QWORD *)v341 + 4) += 25;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nMeanChannelRequirement: ", 0x19uLL);
      }
      v364 = (double)*(uint64_t *)(v340 - 56) / (double)*(uint64_t *)(v340 - 80);
      v471[0] = &off_1E7FA8D00;
      v471[1] = "%0.3f per TEC";
      *(double *)&v471[2] = v364;
      llvm::raw_ostream::operator<<(v341, (uint64_t)v471);
      v365 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v365 > 0x14uLL)
      {
        qmemcpy(v365, "\nTotalShaderLatency: ", 21);
        *((_QWORD *)v341 + 4) += 21;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nTotalShaderLatency: ", 0x15uLL);
      }
      llvm::raw_ostream::operator<<(v341, *(_QWORD *)(v340 - 64));
      v366 = (_DWORD *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v366 > 6uLL)
      {
        *(_DWORD *)((char *)v366 + 3) = 1936026723;
        *v366 = 1668891424;
        v367 = (void *)(*((_QWORD *)v341 + 4) + 7);
        *((_QWORD *)v341 + 4) = v367;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " Cycles", 7uLL);
        v367 = (void *)*((_QWORD *)v341 + 4);
      }
      if (*((_QWORD *)v341 + 3) - (_QWORD)v367 > 0x14uLL)
      {
        qmemcpy(v367, "\nTotalTimeInChannel: ", 21);
        *((_QWORD *)v341 + 4) += 21;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nTotalTimeInChannel: ", 0x15uLL);
      }
      llvm::raw_ostream::operator<<(v341, *(_QWORD *)(v340 - 56));
      v368 = (_DWORD *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v368 > 6uLL)
      {
        *(_DWORD *)((char *)v368 + 3) = 1936026723;
        *v368 = 1668891424;
        v369 = *((_QWORD *)v341 + 4) + 7;
        *((_QWORD *)v341 + 4) = v369;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " Cycles", 7uLL);
        v369 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v369) > 0x12)
      {
        *(_DWORD *)(v369 + 15) = 540701550;
        *(_OWORD *)v369 = *(_OWORD *)"\nNumDeactivations: ";
        *((_QWORD *)v341 + 4) += 19;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nNumDeactivations: ", 0x13uLL);
      }
      v370 = *(_QWORD *)(v340 - 48);
      v470[0] = &off_1E7FA8D00;
      v470[1] = "%0.1f per Clique";
      v470[2] = v370;
      llvm::raw_ostream::operator<<(v341, (uint64_t)v470);
      v371 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v371 > 0xEuLL)
      {
        qmemcpy(v371, "\nNumTagChecks: ", 15);
        *((_QWORD *)v341 + 4) += 15;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nNumTagChecks: ", 0xFuLL);
      }
      v372 = llround(*(double *)(v340 - 40));
      v373 = v372;
      if (v372 < 0)
      {
        v373 = -(uint64_t)v372;
        v374 = v341;
        v375 = 1;
      }
      else
      {
        v374 = v341;
        v375 = 0;
      }
      sub_1C5E21910(v374, v373, 0, 0, v375);
      v377 = *((_QWORD *)v341 + 4);
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v377) > 0xA)
      {
        *(_DWORD *)(v377 + 7) = 1702195561;
        *(_QWORD *)v377 = *(_QWORD *)" per Clique";
        v378 = *((_QWORD *)v341 + 4) + 11;
        *((_QWORD *)v341 + 4) = v378;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " per Clique", 0xBuLL);
        v378 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v378) > 0x13)
      {
        *(_DWORD *)(v378 + 16) = 540697970;
        *(_OWORD *)v378 = *(_OWORD *)"\nAvgGPRDynPressure: ";
        *((_QWORD *)v341 + 4) += 20;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nAvgGPRDynPressure: ", 0x14uLL);
      }
      LODWORD(v376) = vcvtad_u64_f64((double)*(uint64_t *)(v340 - 104) / (double)*(uint64_t *)(v340 - 64));
      sub_1C5E21910(v341, v376, 0, 0, 0);
      v380 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v380 > 0x16uLL)
      {
        qmemcpy(v380, " 32-bit GPRs per Thread", 23);
        v381 = *((_QWORD *)v341 + 4) + 23;
        *((_QWORD *)v341 + 4) = v381;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " 32-bit GPRs per Thread", 0x17uLL);
        v381 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v381) > 0x13)
      {
        *(_DWORD *)(v381 + 16) = 540697970;
        *(_OWORD *)v381 = *(_OWORD *)"\nAvgRegDynPressure: ";
        *((_QWORD *)v341 + 4) += 20;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nAvgRegDynPressure: ", 0x14uLL);
      }
      v382 = 0;
      v383 = 0;
      do
        v383 += v346[v382++];
      while (v382 != 3);
      LODWORD(v379) = vcvtad_u64_f64((double)v383 / (double)*(uint64_t *)(v340 - 64));
      sub_1C5E21910(v341, v379, 0, 0, 0);
      v384 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v384 > 0x16uLL)
      {
        qmemcpy(v384, " 32-bit Regs per Thread", 23);
        v385 = *((_QWORD *)v341 + 4) + 23;
        *((_QWORD *)v341 + 4) = v385;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " 32-bit Regs per Thread", 0x17uLL);
        v385 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v385) > 0x10)
      {
        *(_BYTE *)(v385 + 16) = 32;
        *(_OWORD *)v385 = *(_OWORD *)"\nUL1ReadsWrites: ";
        *((_QWORD *)v341 + 4) += 17;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nUL1ReadsWrites: ", 0x11uLL);
      }
      v386 = *(int *)(v340 - 72);
      if ((v386 & 0x80000000) != 0)
      {
        v386 = -(uint64_t)v386;
        v387 = v341;
        v388 = 1;
      }
      else
      {
        v387 = v341;
        v388 = 0;
      }
      sub_1C5E21910(v387, v386, 0, 0, v388);
      v389 = (_OWORD *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v389 > 0xFuLL)
      {
        *v389 = *(_OWORD *)" 4B Transactions";
        v390 = *((_QWORD *)v341 + 4) + 16;
        *((_QWORD *)v341 + 4) = v390;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " 4B Transactions", 0x10uLL);
        v390 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v390) > 0x12)
      {
        *(_DWORD *)(v390 + 15) = 540697965;
        *(_OWORD *)v390 = *(_OWORD *)"\nWaitAndStallTime: ";
        *((_QWORD *)v341 + 4) += 19;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nWaitAndStallTime: ", 0x13uLL);
      }
      llvm::raw_ostream::operator<<(v341, *(_QWORD *)(v340 - 64) - *(_QWORD *)(v340 - 80));
      v391 = (_DWORD *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v391 > 6uLL)
      {
        *(_DWORD *)((char *)v391 + 3) = 1936026723;
        *v391 = 1668891424;
        v392 = *((_QWORD *)v341 + 4) + 7;
        *((_QWORD *)v341 + 4) = v392;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " Cycles", 7uLL);
        v392 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v392) > 0x11)
      {
        *(_WORD *)(v392 + 16) = 8250;
        *(_OWORD *)v392 = *(_OWORD *)"\nTotalCycleCount: ";
        *((_QWORD *)v341 + 4) += 18;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nTotalCycleCount: ", 0x12uLL);
      }
      v393 = 0;
      v394 = 0;
      do
        v394 += v346[v393++];
      while (v393 != 3);
      v395 = (double)*(uint64_t *)(v340 - 80);
      v396.i64[0] = v394;
      v396.i64[1] = *(_QWORD *)(v340 - 104);
      __asm { FMOV            V2.2D, #4.0 }
      v401 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(vshlq_n_s64(vcvtq_s64_f64(vcvtq_f64_s64(v396)), 7uLL)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v395, 0)), _Q2);
      v402 = 0.0;
      v403 = 0.0;
      do
      {
        v404 = vmulq_n_f64(v401, v402);
        v405 = v404.f64[1] + -196608.0;
        if (v404.f64[1] + -196608.0 < 0.0)
          v405 = 0.0;
        v406 = v404.f64[0] - v404.f64[1] + v405;
        if (v406 <= 145408.0)
          v407 = 1.0;
        else
          v407 = 145408.0 / v406;
        v408 = v402 * v407;
        if (v403 < v408)
          v403 = v408;
        v402 = v402 + 0.0009765625;
      }
      while (v402 <= 2.0);
      llvm::raw_ostream::operator<<(v341, llround(v395 / v403));
      v409 = (void *)*((_QWORD *)v341 + 4);
      if (*((_QWORD *)v341 + 3) - (_QWORD)v409 > 0x19uLL)
      {
        qmemcpy(v409, " Cycles per Clique per TEC", 26);
        v410 = *((_QWORD *)v341 + 4) + 26;
        *((_QWORD *)v341 + 4) = v410;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, " Cycles per Clique per TEC", 0x1AuLL);
        v410 = *((_QWORD *)v341 + 4);
      }
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v410) > 0x10)
      {
        *(_BYTE *)(v410 + 16) = 32;
        *(_OWORD *)v410 = *(_OWORD *)"\nResBusForwards: ";
        *((_QWORD *)v341 + 4) += 17;
      }
      else
      {
        v341 = llvm::raw_ostream::write(v341, "\nResBusForwards: ", 0x11uLL);
      }
      result = (uint64_t)llvm::raw_ostream::operator<<(v341, *(_QWORD *)(v340 - 32));
      v411 = *((_QWORD *)v341 + 4);
      if ((unint64_t)(*((_QWORD *)v341 + 3) - v411) > 0xB)
      {
        *(_DWORD *)(v411 + 8) = 1935962721;
        *(_QWORD *)v411 = *(_QWORD *)" 2B Forwards";
        v412 = (_DWORD *)(*((_QWORD *)v341 + 4) + 12);
        *((_QWORD *)v341 + 4) = v412;
      }
      else
      {
        result = (uint64_t)llvm::raw_ostream::write(v341, " 2B Forwards", 0xCuLL);
        v341 = (llvm::raw_ostream *)result;
        v412 = *(_DWORD **)(result + 32);
      }
      if (*((_QWORD *)v341 + 3) - (_QWORD)v412 <= 3uLL)
      {
        v413 = "\n\n\n\n";
        result = (uint64_t)v341;
        v414 = 4;
LABEL_637:
        result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, v413, v414);
        goto LABEL_550;
      }
      *v412 = 168430090;
      v415 = *((_QWORD *)v341 + 4) + 4;
    }
    else
    {
      if (v343 <= 0x19)
      {
        v413 = "\nTotalIssueTime: 0 Cycles\n";
        v414 = 26;
        goto LABEL_637;
      }
      qmemcpy(v342, "\nTotalIssueTime: 0 Cycles\n", 26);
      v415 = *(_QWORD *)(result + 32) + 26;
    }
    *((_QWORD *)v341 + 4) = v415;
  }
LABEL_550:
  v418[1] = 0u;
  v418[2] = 0u;
  *v418 = 0u;
  if ((v473 & 1) == 0)
    return MEMORY[0x1CAA32FB4](v474.i64[0], 8);
  return result;
}

uint64_t sub_1C4AC3578(uint64_t a1, unsigned int a2)
{
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  _OWORD v24[16];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = a2;
  v4 = (char *)(a1 + 24);
  memset(v24, 0, sizeof(v24));
  v22 = v24;
  v23 = 0x800000000;
  v25 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v5 = (void **)(a1 + 8);
  v6 = a2;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  if (a2 < 9)
  {
    if (a2)
    {
      v16 = 0;
      v17 = (_QWORD *)a1;
      do
      {
        v17[3] = v17 + 5;
        v17[4] = 0x800000000;
        if ((_DWORD)v23)
        {
          sub_1C4AC40B0((uint64_t)(v17 + 3), (uint64_t)&v22);
          v16 = v25;
        }
        v17[37] = v16;
        v17 += 35;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v21 = 0;
    v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 8, a2, 280, &v21);
    v8 = 0;
    v9 = 280 * v6;
    do
    {
      v10 = &v7[v8];
      *(_QWORD *)v10 = &v7[v8 + 16];
      *((_QWORD *)v10 + 1) = 0x800000000;
      if ((_DWORD)v23)
        v10 = (char *)sub_1C4AC40B0((uint64_t)v10, (uint64_t)&v22);
      *((_QWORD *)v10 + 34) = v25;
      v8 += 280;
    }
    while (v9 != v8);
    v11 = *(char **)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 16);
    if (v12)
    {
      v13 = 280 * v12;
      do
      {
        v14 = *(char **)&v11[v13 - 280];
        if (&v11[v13 - 264] != v14)
          free(v14);
        v13 -= 280;
      }
      while (v13);
      v11 = (char *)*v5;
    }
    v15 = v21;
    if (v11 != v4)
      free(v11);
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 20) = v15;
  }
  *(_DWORD *)(a1 + 16) = a2;
  if (v22 != v24)
    free(v22);
  v18 = 0;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  do
  {
    v19 = a1 + v18;
    *(_QWORD *)(v19 + 2264) = a1 + v18 + 2280;
    *(_QWORD *)(v19 + 2272) = 0x600000000;
    *(_DWORD *)(v19 + 2328) = 0;
    *(_DWORD *)(v19 + 2336) = 0;
    v18 += 80;
  }
  while (v18 != 240);
  *(_QWORD *)(a1 + 2504) = a1 + 2520;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_QWORD *)(a1 + 2520) = a1 + 2544;
  *(_QWORD *)(a1 + 2536) = 0;
  *(_QWORD *)(a1 + 2528) = 0;
  *(_QWORD *)(a1 + 2544) = a1 + 2560;
  *(_QWORD *)(a1 + 2552) = 0;
  *(_QWORD *)(a1 + 2560) = a1 + 2584;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_QWORD *)(a1 + 2568) = 0;
  *(_QWORD *)(a1 + 2584) = a1 + 2600;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2620) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2668) = 0u;
  *(_QWORD *)(a1 + 2684) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 2696) = 0;
  return a1;
}

uint64_t sub_1C4AC382C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_DWORD *)(result + 8);
  if (!v2)
    return result;
  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)result + 2704 * v2;
  do
  {
    *(_DWORD *)a2 = *(_DWORD *)v5;
    *(_QWORD *)(a2 + 8) = a2 + 24;
    result = a2 + 8;
    *(_QWORD *)(a2 + 16) = 0x800000000;
    if (*(_DWORD *)(v5 + 16))
      result = sub_1C4AC3ABC(result, v5 + 8);
    for (i = 0; i != 240; i += 80)
    {
      v8 = a2 + i;
      v9 = v5 + i;
      v10 = (void *)(a2 + i + 2280);
      *(_QWORD *)(v8 + 2264) = v10;
      *(_QWORD *)(v8 + 2272) = 0x600000000;
      if (a2 != v5)
      {
        v11 = *(unsigned int *)(v9 + 2272);
        if (*(_DWORD *)(v9 + 2272))
        {
          result = v8 + 2264;
          v12 = *(const void **)(v9 + 2264);
          v13 = v5 + i;
          v14 = v5 + i + 2280;
          if ((const void *)v14 != v12)
          {
            *(_QWORD *)result = v12;
            *(_DWORD *)(v8 + 2272) = v11;
            *(_DWORD *)(v8 + 2276) = *(_DWORD *)(v13 + 2276);
            *(_QWORD *)(v9 + 2264) = v14;
            *(_DWORD *)(v13 + 2276) = 0;
            goto LABEL_13;
          }
          if (v11 >= 7)
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, a2 + i + 2280, v11, 8);
            v15 = *(unsigned int *)(v9 + 2272);
            if (!(_DWORD)v15)
              goto LABEL_12;
            v12 = *(const void **)(v9 + 2264);
            v10 = *(void **)(v8 + 2264);
          }
          else
          {
            v15 = *(unsigned int *)(v9 + 2272);
          }
          result = (uint64_t)memcpy(v10, v12, 8 * v15);
LABEL_12:
          *(_DWORD *)(v8 + 2272) = v11;
LABEL_13:
          *(_DWORD *)(v9 + 2272) = 0;
        }
      }
      *(_DWORD *)(v8 + 2328) = *(_DWORD *)(v9 + 2328);
      *(_DWORD *)(v8 + 2336) = *(_DWORD *)(v9 + 2336);
    }
    *(_QWORD *)(a2 + 2504) = a2 + 2520;
    *(_QWORD *)(a2 + 2512) = 0;
    if (*(_DWORD *)(v5 + 2512))
      result = sub_1C614C900(a2 + 2504, v5 + 2504);
    *(_QWORD *)(a2 + 2520) = a2 + 2544;
    *(_QWORD *)(a2 + 2536) = 0;
    *(_QWORD *)(a2 + 2528) = 0;
    if (*(_QWORD *)(v5 + 2528))
      result = sub_1C6153FB0(a2 + 2520, v5 + 2520);
    *(_QWORD *)(a2 + 2544) = a2 + 2560;
    *(_QWORD *)(a2 + 2552) = 0;
    if (*(_DWORD *)(v5 + 2552))
      result = sub_1C614C900(a2 + 2544, v5 + 2544);
    *(_QWORD *)(a2 + 2560) = a2 + 2584;
    *(_QWORD *)(a2 + 2576) = 0;
    *(_QWORD *)(a2 + 2568) = 0;
    if (*(_QWORD *)(v5 + 2568))
      result = sub_1C6153FB0(a2 + 2560, v5 + 2560);
    *(_QWORD *)(a2 + 2584) = a2 + 2600;
    *(_QWORD *)(a2 + 2592) = 0;
    if (*(_DWORD *)(v5 + 2592))
      result = sub_1C614D378(a2 + 2584, v5 + 2584);
    *(_OWORD *)(a2 + 2600) = *(_OWORD *)(v5 + 2600);
    v16 = *(_OWORD *)(v5 + 2616);
    v17 = *(_OWORD *)(v5 + 2632);
    v18 = *(_OWORD *)(v5 + 2664);
    *(_OWORD *)(a2 + 2648) = *(_OWORD *)(v5 + 2648);
    *(_OWORD *)(a2 + 2664) = v18;
    *(_OWORD *)(a2 + 2616) = v16;
    *(_OWORD *)(a2 + 2632) = v17;
    v19 = *(_OWORD *)(v5 + 2680);
    *(_QWORD *)(a2 + 2696) = *(_QWORD *)(v5 + 2696);
    *(_OWORD *)(a2 + 2680) = v19;
    v5 += 2704;
    a2 += 2704;
  }
  while (v5 != v6);
  v20 = *(_DWORD *)(v4 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)v4;
    v22 = 2704 * v20;
    v23 = v21 - 2704;
    do
    {
      result = sub_1C4AC3FAC(v23 + v22);
      v22 -= 2704;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_1C4AC3ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        v8 = 280 * v7;
        do
        {
          v9 = *(char **)&v6[v8 - 280];
          if (&v6[v8 - 264] != v9)
            free(v9);
          v8 -= 280;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = (_DWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a2 + 8);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(_QWORD *)a1;
      if ((_DWORD)v12)
      {
        v18 = 280 * v12;
        do
        {
          sub_1C4AC3E94(v17, v4);
          *(_QWORD *)(v17 + 272) = *(_QWORD *)(v4 + 272);
          v4 += 280;
          v17 += 280;
          v18 -= 280;
        }
        while (v18);
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        v19 = *(_QWORD *)a1;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      v31 = v19 + 280 * v13;
      if (v31 != v17)
      {
        do
        {
          v32 = v31 - 280;
          v33 = *(void **)(v31 - 280);
          if ((void *)(v31 - 264) != v33)
            free(v33);
          v31 = v32;
        }
        while (v32 != v17);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v34 = *(_DWORD *)(a2 + 8);
      if (v34)
      {
        v35 = *(_QWORD *)a2;
        v36 = 280 * v34;
        do
        {
          v37 = *(void **)(v35 + v36 - 280);
          if ((void *)(v35 + v36 - 264) != v37)
            free(v37);
          v36 -= 280;
        }
        while (v36);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if ((_DWORD)v13)
      {
        v20 = *(_QWORD *)a1;
        v21 = 280 * v13;
        do
        {
          v22 = sub_1C4AC3E94(v20, v4);
          *(_QWORD *)(v22 + 272) = *(_QWORD *)(v4 + 272);
          v4 += 280;
          v20 = v22 + 280;
          v21 -= 280;
        }
        while (v21);
        goto LABEL_31;
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)a1;
        v15 = 280 * v13;
        do
        {
          v16 = *(void **)(v14 + v15 - 280);
          if ((void *)(v14 + v15 - 264) != v16)
            free(v16);
          v15 -= 280;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C4AC3D90(a1, v12);
    }
    v13 = 0;
LABEL_31:
    v23 = *(_QWORD *)a2;
    v24 = *(unsigned int *)(a2 + 8);
    if (v13 != v24)
    {
      v25 = *(_QWORD *)a1;
      v26 = 280 * v13;
      v27 = 280 * v24;
      do
      {
        v28 = (_QWORD *)(v25 + v26);
        *v28 = v25 + v26 + 16;
        v28[1] = 0x800000000;
        if (*(_DWORD *)(v23 + v26 + 8))
          v28 = (_QWORD *)sub_1C4AC3E94((uint64_t)v28, v23 + v26);
        v28[34] = *(_QWORD *)(v23 + v26 + 272);
        v25 += 280;
        v27 -= 280;
        v23 += 280;
      }
      while (v26 != v27);
      v23 = *(_QWORD *)a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    if (*v10)
    {
      v29 = 280 * *v10;
      do
      {
        v30 = *(void **)(v23 + v29 - 280);
        if ((void *)(v23 + v29 - 264) != v30)
          free(v30);
        v29 -= 280;
      }
      while (v29);
    }
    goto LABEL_12;
  }
  return a1;
}

void sub_1C4AC3D90(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 280, &v13);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 280 * v5;
    do
    {
      v8 = &v3[v6];
      *(_QWORD *)v8 = &v3[v6 + 16];
      *((_QWORD *)v8 + 1) = 0x800000000;
      if (*(_DWORD *)&v4[v6 + 8])
        v8 = (char *)sub_1C4AC3E94((uint64_t)v8, (uint64_t)&v4[v6]);
      *((_QWORD *)v8 + 34) = *(_QWORD *)&v4[v6 + 272];
      v6 += 280;
    }
    while (v7 != v6);
    v4 = *(char **)a1;
    v9 = *(_DWORD *)(a1 + 8);
    if (v9)
    {
      v10 = 280 * v9;
      do
      {
        v11 = *(char **)&v4[v10 - 280];
        if (&v4[v10 - 264] != v11)
          free(v11);
        v10 -= 280;
      }
      while (v10);
      v4 = *(char **)a1;
    }
  }
  v12 = v13;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t sub_1C4AC3E94(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 32 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 32 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 32);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 32 * v9), (const void *)(*(_QWORD *)a2 + 32 * v9), *(_QWORD *)a2 + 32 * v10 - (*(_QWORD *)a2 + 32 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C4AC3FAC(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  uint64_t i;
  void *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;

  v2 = (void *)(a1 + 2584);
  v3 = *(void **)(a1 + 2584);
  if (v3 != (void *)(a1 + 2600))
    free(v3);
  v4 = (void **)(a1 + 2544);
  v5 = *(void **)(a1 + 2560);
  if (v5 != v2)
    free(v5);
  if (*v4 != (void *)(a1 + 2560))
    free(*v4);
  v6 = *(void ***)(a1 + 2520);
  if (v6 != v4)
    free(v6);
  v7 = *(void **)(a1 + 2504);
  if (v7 != (void *)(a1 + 2520))
    free(v7);
  for (i = 0; i != -240; i -= 80)
  {
    v9 = *(void **)(a1 + i + 2424);
    if ((void *)(a1 + i + 2440) != v9)
      free(v9);
  }
  v10 = *(char **)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 280 * v11;
    do
    {
      v13 = *(char **)&v10[v12 - 280];
      if (&v10[v12 - 264] != v13)
        free(v13);
      v12 -= 280;
    }
    while (v12);
    v10 = *(char **)(a1 + 8);
  }
  if (v10 != (char *)(a1 + 24))
    free(v10);
  return a1;
}

uint64_t sub_1C4AC40B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 32 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 32 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 32);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 32 * v5), (const void *)(*(_QWORD *)a2 + 32 * v5), *(_QWORD *)a2 + 32 * v6 - (*(_QWORD *)a2 + 32 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1C4AC417C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t i;
  _DWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD v20[2];
  _QWORD v21[2];
  _BYTE v22[2480];
  _QWORD v23[2];
  _QWORD v24[3];
  _QWORD v25[2];
  _QWORD v26[3];
  _QWORD v27[2];
  _OWORD v28[5];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v18 = a3;
  v3 = a1 + 296;
  v17 = *(_DWORD *)(a1 + 304) - 1;
  v4 = *(_QWORD *)(a1 + 296) + 2704 * v17;
  v5 = *(_DWORD *)v4;
  v19 = a2;
  v20[0] = v5;
  v21[0] = v22;
  v21[1] = 0x800000000;
  if (*(_DWORD *)(v4 + 16))
    sub_1C4AC45D4((uint64_t)v21, v4 + 8);
  for (i = 0; i != 240; i += 80)
  {
    v7 = &v20[i / 4];
    v8 = v4 + i;
    v9 = &v22[i + 2256];
    *((_QWORD *)v7 + 283) = &v22[i + 2256];
    *((_QWORD *)v7 + 284) = 0x600000000;
    if (v20 != (_DWORD *)v4)
    {
      v10 = *(unsigned int *)(v8 + 2272);
      if (*(_DWORD *)(v8 + 2272))
      {
        if (v10 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 566), (uint64_t)&v22[i + 2256], *(unsigned int *)(v8 + 2272), 8);
          v11 = *(unsigned int *)(v8 + 2272);
          if (!(_DWORD)v11)
          {
LABEL_11:
            v7[568] = v10;
            goto LABEL_12;
          }
          v9 = (_BYTE *)*((_QWORD *)v7 + 283);
        }
        else
        {
          v11 = *(unsigned int *)(v8 + 2272);
        }
        memcpy(v9, *(const void **)(v8 + 2264), 8 * v11);
        goto LABEL_11;
      }
    }
LABEL_12:
    v7[582] = *(_DWORD *)(v8 + 2328);
    v7[584] = *(_DWORD *)(v8 + 2336);
  }
  v23[0] = v24;
  v23[1] = 0;
  if (*(_DWORD *)(v4 + 2512))
    sub_1C614CA14((uint64_t)v23, v4 + 2504);
  v24[0] = v25;
  v24[2] = 0;
  v24[1] = 0;
  if (*(_QWORD *)(v4 + 2528))
    sub_1C6154398((uint64_t)v24, v4 + 2520);
  v25[0] = v26;
  v25[1] = 0;
  if (*(_DWORD *)(v4 + 2552))
    sub_1C614CA14((uint64_t)v25, v4 + 2544);
  v26[0] = v27;
  v26[2] = 0;
  v26[1] = 0;
  if (*(_QWORD *)(v4 + 2568))
    sub_1C6154398((uint64_t)v26, v4 + 2560);
  v27[0] = v28;
  v27[1] = 0;
  if (*(_DWORD *)(v4 + 2592))
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v27, v4 + 2584);
  v28[0] = *(_OWORD *)(v4 + 2600);
  v12 = *(_OWORD *)(v4 + 2616);
  v13 = *(_OWORD *)(v4 + 2632);
  v14 = *(_OWORD *)(v4 + 2664);
  v28[3] = *(_OWORD *)(v4 + 2648);
  v28[4] = v14;
  v28[1] = v12;
  v28[2] = v13;
  v16 = 1;
  sub_1C4AC5430(v3, (uint64_t)v20, &v16, &v17, &v19, &v18);
  return sub_1C4AC3FAC((uint64_t)v20);
}

uint64_t sub_1C4AC43EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
    v1 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      v1 = a1;
      do
        v1 = *(_QWORD *)(v1 + 8);
      while ((*(_WORD *)(v1 + 44) & 8) != 0);
    }
  }
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 == v3 + 48)
  {
    v4 = *(_QWORD **)(v3 + 8);
    v5 = v4[4] + 320;
    while (1)
    {
      if (v4 == (_QWORD *)v5)
        return 0;
      if (v4 + 6 != (_QWORD *)(v4[6] & 0xFFFFFFFFFFFFFFF8))
        break;
      v4 = (_QWORD *)v4[1];
    }
    return v4[7];
  }
  return v2;
}

uint64_t sub_1C4AC446C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61542D8(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61542D8(a1, v14, v8);
}

uint64_t sub_1C4AC45D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)a1;
        v11 = 280 * v4;
        do
        {
          sub_1C4AC40B0(v10, v9);
          *(_QWORD *)(v10 + 272) = *(_QWORD *)(v9 + 272);
          v9 += 280;
          v10 += 280;
          v11 -= 280;
        }
        while (v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v10 = *(_QWORD *)a1;
      }
      v23 = v12 + 280 * v5;
      if (v23 != v10)
      {
        do
        {
          v24 = v23 - 280;
          v25 = *(void **)(v23 - 280);
          if ((void *)(v23 - 264) != v25)
            free(v25);
          v23 = v24;
        }
        while (v24 != v10);
      }
      goto LABEL_30;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v13 = *(_QWORD *)a2;
        v14 = *(_QWORD *)a1;
        v15 = 280 * v5;
        do
        {
          v16 = sub_1C4AC40B0(v14, v13);
          *(_QWORD *)(v16 + 272) = *(_QWORD *)(v13 + 272);
          v13 += 280;
          v14 = v16 + 280;
          v15 -= 280;
        }
        while (v15);
LABEL_19:
        v17 = *(unsigned int *)(a2 + 8);
        if (v5 != v17)
        {
          v18 = *(_QWORD *)a2;
          v19 = *(_QWORD *)a1;
          v20 = 280 * v5;
          v21 = 280 * v17;
          do
          {
            v22 = (_QWORD *)(v19 + v20);
            *v22 = v19 + v20 + 16;
            v22[1] = 0x800000000;
            if (*(_DWORD *)(v18 + v20 + 8))
              v22 = (_QWORD *)sub_1C4AC40B0((uint64_t)v22, v18 + v20);
            v22[34] = *(_QWORD *)(v18 + v20 + 272);
            v19 += 280;
            v21 -= 280;
            v18 += 280;
          }
          while (v20 != v21);
        }
LABEL_30:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)a1;
        v7 = 280 * v5;
        do
        {
          v8 = *(void **)(v6 + v7 - 280);
          if ((void *)(v6 + v7 - 264) != v8)
            free(v8);
          v7 -= 280;
        }
        while (v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C4AC3D90(a1, v4);
    }
    v5 = 0;
    goto LABEL_19;
  }
  return a1;
}

void sub_1C4AC47B0(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v4 = a2[1];
  v5 = a1 + 80 * v4;
  v6 = v5 + 2264;
  v7 = *(_QWORD *)(a2 + 1);
  v8 = a2[3];
  v9 = *(_DWORD *)(v5 + 2328);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    v11 = v9 & 0x3F;
    v12 = *(unsigned int *)(v6 + 8);
    if (v11)
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v12 - 8) &= ~(-1 << v11);
    v13 = v12;
    *(_DWORD *)(v6 + 64) = v10;
    v14 = v8 + 64;
    if ((_DWORD)v12 != (v8 + 64) >> 6)
    {
      v15 = v14 >> 6;
      if (v12 > v15)
      {
        *(_DWORD *)(v6 + 8) = v15;
        v13 = v14 >> 6;
      }
      else
      {
        v16 = v12;
        if (v15 > *(_DWORD *)(v6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v15, 8);
          v16 = *(unsigned int *)(v6 + 8);
          v13 = *(_DWORD *)(v6 + 8);
        }
        if (v15 != v12)
          bzero((void *)(*(_QWORD *)v6 + 8 * v16), 8 * (v15 - v12));
        v13 += v15 - v12;
        *(_DWORD *)(v6 + 8) = v13;
        v10 = *(_DWORD *)(v6 + 64);
      }
    }
    v17 = v10 & 0x3F;
    if (v17)
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v13 - 8) &= ~(-1 << v17);
  }
  v18 = v7;
  if (*a2 != 3)
  {
    if (*a2 == 2)
    {
      v19 = HIDWORD(v7);
      if (v8 != HIDWORD(v7))
      {
        v20 = 0;
        v21 = *(_QWORD *)v6;
        while (1)
        {
          v22 = v7 >> 38;
          v23 = *(_QWORD *)(v21 + 8 * (v7 >> 38));
          if (v18 == 1)
          {
            v24 = 1 << v19;
            *(_QWORD *)(v21 + 8 * v22) = v23 & ~v24;
            if ((v23 & v24) != 0)
            {
              LODWORD(v25) = 0;
              goto LABEL_25;
            }
          }
          else
          {
            v26 = v19 & 0x3E;
            v27 = 1 << (v19 & 0x3E);
            if ((v23 & v27) != 0)
            {
              v28 = v23 & ~(1 << v19);
              *(_QWORD *)(v21 + 8 * v22) = v28;
LABEL_23:
              v29 = (v28 & v27) == 0;
              v25 = (v28 >> (v26 | 1u)) & 1;
              if (!v29)
                LODWORD(v25) = 1;
LABEL_25:
              v20 -= v25 ^ 1;
              goto LABEL_26;
            }
            v28 = v23 & ~(1 << v19);
            *(_QWORD *)(v21 + 8 * v22) = v28;
            if (((v23 >> (v26 | 1u)) & 1) != 0)
              goto LABEL_23;
          }
LABEL_26:
          v7 = (v7 & 0xFFFFFFFF00000000) + 0x100000000;
          v19 = HIDWORD(v7);
          if (v8 == HIDWORD(v7))
            goto LABEL_36;
        }
      }
    }
    goto LABEL_29;
  }
  v30 = HIDWORD(v7);
  if (v8 == HIDWORD(v7))
  {
LABEL_29:
    v20 = 0;
    goto LABEL_36;
  }
  v20 = 0;
  v31 = *(_QWORD *)v6;
  do
  {
    v32 = *(_QWORD *)(v31 + 8 * (v7 >> 38));
    v33 = (v32 >> (v30 & 0x3E | 1)) & 1;
    if (((v32 >> (v30 & 0x3E)) & 1) != 0)
      LODWORD(v33) = 1;
    if (v18 == 1)
      LODWORD(v33) = (v32 >> v30) & 1;
    v20 += v33 ^ 1;
    *(_QWORD *)(v31 + 8 * (v7 >> 38)) = v32 | (1 << v30);
    v7 = (v7 & 0xFFFFFFFF00000000) + 0x100000000;
    v30 = HIDWORD(v7);
  }
  while (v8 != HIDWORD(v7));
LABEL_36:
  *(_DWORD *)(a1 + 80 * v4 + 2336) += v20;
}

double sub_1C4AC4A50(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;

  v2 = *a1;
  v3 = 1.0;
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (((a2 >> i) & 1) != 0)
      {
        v5 = *((_QWORD *)a1 + 1);
        v6 = (unsigned int *)(v5 + 280 * i);
        v7 = v6[2];
        if ((_DWORD)v7)
        {
          v8 = 32 * v7;
          v9 = (int *)(*(_QWORD *)v6 + 12);
          v10 = 1.0;
          do
          {
            v11 = (double)*(v9 - 2);
            v12 = *v9;
            v9 += 8;
            v13 = (double)v12;
            v14 = (double)v12 - (v11 + -1.0);
            if ((double)v12 < 0.0)
              v13 = 0.0;
            if (v14 < v13)
              v13 = v14;
            v10 = v10 * (1.0 - v13 / v14);
            v8 -= 32;
          }
          while (v8);
        }
        else
        {
          v10 = 1.0;
        }
        v3 = v3 * (1.0 - (1.0 - v10) * *(double *)(v5 + 280 * i + 272));
      }
    }
  }
  return 1.0 - v3;
}

unint64_t sub_1C4AC4B0C(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;

  v2 = *a1;
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if (((a2 >> v3) & 1) != 0)
      {
        v5 = *((_QWORD *)a1 + 1) + 280 * v3;
        v6 = *(unsigned int *)(v5 + 8);
        if ((_DWORD)v6)
        {
          v7 = 0;
          v8 = 32 * v6;
          v9 = (int *)(*(_QWORD *)v5 + 8);
          do
          {
            v11 = *v9;
            v9 += 8;
            v10 = v11;
            if (v11 > v7)
              v7 = v10;
            v8 -= 32;
          }
          while (v8);
        }
        else
        {
          v7 = 0;
        }
        if (v4 <= v7)
          v4 = v7;
      }
      ++v3;
    }
    while (v3 != v2);
  }
  else
  {
    v4 = 0;
  }
  if (v4 <= 10)
    v12 = 10;
  else
    v12 = v4;
  v13 = sub_1C4AC4A50(a1, a2);
  v14 = round(v13 * 10.0);
  if (v13 == 0.0)
    v14 = (double)v4;
  return (int)(round(v13 * (double)(v12 - v4 + 10)) + (double)v4) | ((unint64_t)(int)v14 << 32);
}

void sub_1C4AC4BE4(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  int32x2_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int32x2_t *v31;
  __int32 v32;
  int32x2_t v33;
  __int32 v34;
  __int32 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  unint64_t v47;
  _OWORD *v48;
  __int128 v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[34];

  v3 = a2;
  v58[32] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a1 + 2512);
  if ((_DWORD)v5)
  {
    v6 = *(_DWORD **)(a1 + 2504);
    v7 = 4 * v5;
    do
    {
      *v6++ -= a2;
      v7 -= 4;
    }
    while (v7);
  }
  v8 = *(unsigned int *)(a1 + 2552);
  if ((_DWORD)v8)
  {
    v9 = *(_DWORD **)(a1 + 2544);
    v10 = 4 * v8;
    do
    {
      *v9++ -= a2;
      v10 -= 4;
    }
    while (v10);
  }
  *(_QWORD *)(a1 + 2648) += a3;
  if (a2 >= 1)
  {
    do
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_DWORD *)(a1 + 16);
      v13 = (uint64_t *)(v11 + 280 * v12);
      v14 = 0x7FFFFFFF;
      if (v12)
      {
        v15 = *(uint64_t **)(a1 + 8);
        do
        {
          v16 = *((unsigned int *)v15 + 2);
          if ((_DWORD)v16)
          {
            v17 = *v15;
            v18 = *v15 + 32 * v16;
            v19 = 0x7FFFFFFF;
            do
            {
              v20 = 0;
              v56 = *(void **)(v17 + 4);
              LODWORD(v57) = *(_DWORD *)(v17 + 12);
              v21 = 0x7FFFFFFF;
              do
              {
                v22 = *(_DWORD *)((char *)&v56 + v20);
                if (v22 >= v21)
                  v23 = v21;
                else
                  v23 = *(_DWORD *)((char *)&v56 + v20);
                if (v22 > 0)
                  v21 = v23;
                v20 += 4;
              }
              while (v20 != 12);
              if (v21 < v19)
                v19 = v21;
              v17 += 32;
            }
            while (v17 != v18);
          }
          else
          {
            v19 = 0x7FFFFFFF;
          }
          if (v19 < v14)
            v14 = v19;
          v15 += 35;
        }
        while (v15 != v13);
      }
      if (v3 < v14)
        v14 = v3;
      v24 = v14;
      v25 = 2600;
      for (i = 2336; i != 2576; i += 80)
      {
        *(_QWORD *)(a1 + v25) += *(int *)(a1 + i) * (uint64_t)(int)v24;
        v25 += 8;
      }
      v56 = v58;
      v57 = 0x1000000000;
      if (v12)
      {
        v27 = vdup_n_s32(v24);
        do
        {
          v28 = *(_OWORD **)v11;
          v29 = *(unsigned int *)(v11 + 8);
          if (!(_DWORD)v29)
            goto LABEL_51;
          v30 = 32 * v29;
          v31 = (int32x2_t *)(v28 + 1);
          do
          {
            v32 = v31[-2].i32[1];
            v33 = vsub_s32(v31[-1], v27);
            v31[-1] = v33;
            v34 = v33.i32[0];
            v35 = v32 - v24;
            v31[-2].i32[1] = v35;
            if (!v35 && v31->i32[0] == 3)
            {
              v36 = *(_OWORD *)v31->i8;
              v37 = v57;
              if (v57 >= (unint64_t)HIDWORD(v57))
              {
                v54 = *(_OWORD *)v31->i8;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 16);
                v36 = v54;
                v37 = v57;
              }
              *((_OWORD *)v56 + v37) = v36;
              LODWORD(v57) = v57 + 1;
              v34 = v31[-1].i32[0];
            }
            if (!v34 && v31->i32[0] == 2)
            {
              v38 = *(_OWORD *)v31->i8;
              v39 = v57;
              if (v57 >= (unint64_t)HIDWORD(v57))
              {
                v55 = *(_OWORD *)v31->i8;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 16);
                v38 = v55;
                v39 = v57;
              }
              *((_OWORD *)v56 + v39) = v38;
              LODWORD(v57) = v57 + 1;
            }
            v31 += 4;
            v30 -= 32;
          }
          while (v30);
          v28 = *(_OWORD **)v11;
          v40 = *(unsigned int *)(v11 + 8);
          if ((_DWORD)v40)
          {
            v41 = 0;
            v42 = &v28[2 * v40];
            v43 = 32 * v40;
            v44 = 32 * v40 - 32;
            v45 = v44;
            while (1)
            {
              v46 = &v28[v41 / 0x10];
              if (!HIDWORD(v28[v41 / 0x10]))
                break;
              v41 += 32;
              v45 -= 32;
              if (v43 == v41)
              {
                v46 = v42;
                goto LABEL_52;
              }
            }
            if (v44 != v41)
            {
              v48 = v46 + 2;
              do
              {
                if (*((_DWORD *)v48 + 3))
                {
                  v49 = v48[1];
                  *v46 = *v48;
                  v46[1] = v49;
                  v46 += 2;
                }
                v48 += 2;
                v45 -= 32;
              }
              while (v45);
              v28 = *(_OWORD **)v11;
            }
          }
          else
          {
LABEL_51:
            v46 = v28;
          }
LABEL_52:
          v47 = (unint64_t)((char *)v46 - (char *)v28) >> 5;
          *(_DWORD *)(v11 + 8) = v47;
          if (!(_DWORD)v47)
            *(_QWORD *)(v11 + 272) = 0;
          v11 += 280;
        }
        while ((uint64_t *)v11 != v13);
        v50 = v56;
        v51 = v57;
        *(_QWORD *)(a1 + 2640) += v24;
        if ((_DWORD)v51)
        {
          v52 = 16 * v51;
          do
          {
            sub_1C4AC47B0(a1, v50);
            v50 += 4;
            v52 -= 16;
          }
          while (v52);
          v50 = v56;
        }
        if (v50 != (_DWORD *)v58)
          free(v50);
      }
      else
      {
        *(_QWORD *)(a1 + 2640) += v24;
      }
      v53 = __OFSUB__(v3, (_DWORD)v24);
      v3 -= v24;
    }
    while (!((v3 < 0) ^ v53 | (v3 == 0)));
  }
}

_QWORD *sub_1C4AC4F98(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6154670(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4AC5050(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  LODWORD(v4) = a2;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = a2 + 1;
  if (v6 <= a2 && (_DWORD)v7 != (_DWORD)v6)
  {
    v9 = v7 - v6;
    if (v7 >= v6)
    {
      v10 = *(unsigned int *)(a1 + 8);
      if (v7 > *(_DWORD *)(a1 + 12))
      {
        v19 = a2 + 1;
        v17 = *(unsigned int *)(a1 + 8);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7, 4);
        v6 = v17;
        v7 = v19;
        v10 = *(unsigned int *)(a1 + 8);
      }
      memset_pattern16((void *)(*(_QWORD *)a1 + 4 * v10), &unk_1C677EAB0, 4 * (v7 - v6));
      LODWORD(v7) = v9 + *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v7;
    LODWORD(v6) = v7;
  }
  v11 = *(_QWORD *)a1;
  v12 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v4);
  if (v12 <= a3)
    return 0;
  if (v6 <= v4)
  {
    v13 = (v4 + 1);
    v14 = v13 - v6;
    if ((_DWORD)v13 != (_DWORD)v6)
    {
      v4 = v4;
      if (v13 >= v6)
      {
        v6 = v6;
        v15 = v6;
        if (v13 > *(_DWORD *)(a1 + 12))
        {
          v18 = v6;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13, 4);
          v6 = v18;
          v13 = (v4 + 1);
          v4 = v4;
          v15 = *(unsigned int *)(a1 + 8);
          v11 = *(_QWORD *)a1;
        }
        memset_pattern16((void *)(v11 + 4 * v15), &unk_1C677EAB0, 4 * (v13 - v6));
        LODWORD(v13) = v14 + *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v13;
      v12 = *(_DWORD *)(v11 + 4 * v4);
    }
  }
  return (v12 - a3);
}

void sub_1C4AC51BC(uint64_t a1, unsigned int a2, int a3, char a4)
{
  uint64_t v8;
  unint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = a2 + 1;
  if (v8 > a2 || (_DWORD)v9 == (_DWORD)v8)
  {
    v9 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v11 = v9 - v8;
    if (v9 >= v8)
    {
      v12 = *(unsigned int *)(a1 + 8);
      if (v9 > *(_DWORD *)(a1 + 12))
      {
        v19 = *(unsigned int *)(a1 + 8);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 4);
        v8 = v19;
        v12 = *(unsigned int *)(a1 + 8);
      }
      memset_pattern16((void *)(*(_QWORD *)a1 + 4 * v12), &unk_1C677EAB0, 4 * (v9 - v8));
      v9 = (*(_DWORD *)(a1 + 8) + v11);
    }
    *(_DWORD *)(a1 + 8) = v9;
    LODWORD(v8) = v9;
  }
  v13 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 4 * a2) <= a3)
    v14 = a3;
  else
    v14 = *(_DWORD *)(*(_QWORD *)a1 + 4 * a2);
  if (v8 <= a2)
  {
    v15 = a2 + 1;
    if ((_DWORD)v8 != (_DWORD)v15)
    {
      if (v8 <= v15)
      {
        v16 = v9;
        if (v15 > *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2 + 1, 4);
          v16 = *(unsigned int *)(a1 + 8);
          v13 = *(_QWORD *)a1;
          LODWORD(v8) = *(_DWORD *)(a1 + 8);
        }
        if (v15 != v9)
        {
          memset_pattern16((void *)(v13 + 4 * v16), &unk_1C677EAB0, 4 * (v15 - v9));
          LODWORD(v8) = *(_DWORD *)(a1 + 8);
        }
        LODWORD(v15) = v15 - v9 + v8;
      }
      *(_DWORD *)(a1 + 8) = v15;
    }
  }
  *(_DWORD *)(v13 + 4 * a2) = v14;
  v17 = *(_QWORD *)(a1 + 24);
  if (v17 <= a2)
  {
    v18 = a2 + 1;
    if (v18 != v17)
    {
      if (v18 >= v17)
        sub_1C6154724((_QWORD *)(a1 + 16), v18 - v17);
      else
        *(_QWORD *)(a1 + 24) = v18;
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + a2) = a4;
}

double sub_1C4AC5348(uint64_t a1, int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double result;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  __int128 v14;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v14 = *a4;
    v9 = *(unsigned int *)(a3 + 4);
    v11 = a2 - 1;
    v10 = (unint64_t)&unk_1C677E000;
    LODWORD(v10) = vcvtpd_s64_f64((double)(int)v9 / 1.2);
    v12 = v10 | (v9 << 32);
    v13 = vcvtpd_s64_f64((double)(int)v9 * 1.2);
    *(_QWORD *)&result = sub_1C47E9C18(a1, (unint64_t)&v11).n128_u64[0];
  }
  else
  {
    v5 = *(_QWORD *)a1 + 32 * v4;
    *(_QWORD *)(v5 + 4) = 0x8000000080000000;
    *(_DWORD *)(v5 + 12) = 0x80000000;
    *(_OWORD *)(v5 + 16) = *a4;
    *(_DWORD *)v5 = a2 - 1;
    v6 = *(unsigned int *)(a3 + 4);
    v7 = (unint64_t)&unk_1C677E000;
    LODWORD(v7) = vcvtpd_s64_f64((double)(int)v6 / 1.2);
    result = (double)(int)v6 * 1.2;
    *(_QWORD *)(v5 + 4) = v7 | (v6 << 32);
    *(_DWORD *)(v5 + 12) = vcvtpd_s64_f64(result);
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t sub_1C4AC5414(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void sub_1C4AC5430(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t i;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;

  v12 = *(_DWORD *)(a1 + 8);
  if (v12 < *(_DWORD *)(a1 + 12))
  {
    v13 = *(char **)a1;
    v14 = *(_QWORD *)a1 + 2704 * v12;
    v44 = *a4;
    v46 = *a3;
    v42 = *a5;
    v40 = *a6;
    *(_DWORD *)v14 = *(_DWORD *)a2;
    *(_QWORD *)(v14 + 8) = v14 + 24;
    *(_QWORD *)(v14 + 16) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C4AC45D4(v14 + 8, a2 + 8);
    v15 = 0;
    while (1)
    {
      v16 = v14 + v15;
      v17 = a2 + v15;
      v18 = (void *)(v14 + v15 + 2280);
      *(_QWORD *)(v16 + 2264) = v18;
      *(_QWORD *)(v16 + 2272) = 0x600000000;
      if (v14 == a2)
        goto LABEL_13;
      v19 = *(unsigned int *)(v17 + 2272);
      if (!*(_DWORD *)(v17 + 2272))
        goto LABEL_13;
      if (v19 < 7)
        break;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 2264, v14 + v15 + 2280, *(unsigned int *)(v17 + 2272), 8);
      v20 = *(unsigned int *)(v17 + 2272);
      if ((_DWORD)v20)
      {
        v18 = *(void **)(v16 + 2264);
        goto LABEL_11;
      }
LABEL_12:
      *(_DWORD *)(v16 + 2272) = v19;
LABEL_13:
      *(_DWORD *)(v16 + 2328) = *(_DWORD *)(v17 + 2328);
      *(_DWORD *)(v16 + 2336) = *(_DWORD *)(v17 + 2336);
      v15 += 80;
      if (v15 == 240)
      {
        *(_QWORD *)(v14 + 2504) = v14 + 2520;
        *(_QWORD *)(v14 + 2512) = 0;
        if (*(_DWORD *)(a2 + 2512))
          sub_1C614CA14(v14 + 2504, a2 + 2504);
        *(_QWORD *)(v14 + 2520) = v14 + 2544;
        *(_QWORD *)(v14 + 2536) = 0;
        *(_QWORD *)(v14 + 2528) = 0;
        if (*(_QWORD *)(a2 + 2528))
          sub_1C6154398(v14 + 2520, a2 + 2520);
        *(_QWORD *)(v14 + 2544) = v14 + 2560;
        *(_QWORD *)(v14 + 2552) = 0;
        if (*(_DWORD *)(a2 + 2552))
          sub_1C614CA14(v14 + 2544, a2 + 2544);
        *(_QWORD *)(v14 + 2560) = v14 + 2584;
        *(_QWORD *)(v14 + 2576) = 0;
        *(_QWORD *)(v14 + 2568) = 0;
        if (*(_QWORD *)(a2 + 2568))
          sub_1C6154398(v14 + 2560, a2 + 2560);
        *(_QWORD *)(v14 + 2584) = v14 + 2600;
        *(_QWORD *)(v14 + 2592) = 0;
        if (*(_DWORD *)(a2 + 2592))
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v14 + 2584, a2 + 2584);
        *(_OWORD *)(v14 + 2600) = *(_OWORD *)(a2 + 2600);
        v21 = *(_OWORD *)(a2 + 2616);
        v22 = *(_OWORD *)(a2 + 2632);
        v23 = *(_OWORD *)(a2 + 2664);
        *(_OWORD *)(v14 + 2648) = *(_OWORD *)(a2 + 2648);
        *(_OWORD *)(v14 + 2664) = v23;
        *(_OWORD *)(v14 + 2616) = v21;
        *(_OWORD *)(v14 + 2632) = v22;
        v24 = &v13[2704 * v12];
        *((_DWORD *)v24 + 670) = v46;
        *((_DWORD *)v24 + 671) = v44;
        *((_DWORD *)v24 + 672) = v42;
        *((_QWORD *)v24 + 337) = v40;
        v25 = *(_DWORD *)(a1 + 8) + 1;
        goto LABEL_25;
      }
    }
    v20 = *(unsigned int *)(v17 + 2272);
LABEL_11:
    memcpy(v18, *(const void **)(v17 + 2264), 8 * v20);
    goto LABEL_12;
  }
  v48 = 0;
  v26 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 2704, &v48);
  v27 = *(_DWORD *)(a1 + 8);
  v28 = &v26[2704 * v27];
  v45 = *a4;
  v47 = *a3;
  v43 = *a5;
  v41 = *a6;
  *(_DWORD *)v28 = *(_DWORD *)a2;
  *((_QWORD *)v28 + 1) = v28 + 24;
  *((_QWORD *)v28 + 2) = 0x800000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C4AC45D4((uint64_t)(v28 + 8), a2 + 8);
  for (i = 0; i != 240; i += 80)
  {
    v30 = &v28[i];
    v31 = a2 + i;
    v32 = &v28[i + 2280];
    *((_QWORD *)v30 + 283) = v32;
    *((_QWORD *)v30 + 284) = 0x600000000;
    if (v28 != (char *)a2)
    {
      v33 = *(unsigned int *)(v31 + 2272);
      if (*(_DWORD *)(v31 + 2272))
      {
        if (v33 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v30 + 2264), (uint64_t)&v28[i + 2280], *(unsigned int *)(v31 + 2272), 8);
          v34 = *(unsigned int *)(v31 + 2272);
          if (!(_DWORD)v34)
          {
LABEL_36:
            *((_DWORD *)v30 + 568) = v33;
            goto LABEL_37;
          }
          v32 = (char *)*((_QWORD *)v30 + 283);
        }
        else
        {
          v34 = *(unsigned int *)(v31 + 2272);
        }
        memcpy(v32, *(const void **)(v31 + 2264), 8 * v34);
        goto LABEL_36;
      }
    }
LABEL_37:
    *((_DWORD *)v30 + 582) = *(_DWORD *)(v31 + 2328);
    *((_DWORD *)v30 + 584) = *(_DWORD *)(v31 + 2336);
  }
  *((_QWORD *)v28 + 313) = v28 + 2520;
  *((_QWORD *)v28 + 314) = 0;
  if (*(_DWORD *)(a2 + 2512))
    sub_1C614CA14((uint64_t)(v28 + 2504), a2 + 2504);
  *((_QWORD *)v28 + 315) = v28 + 2544;
  *((_QWORD *)v28 + 317) = 0;
  *((_QWORD *)v28 + 316) = 0;
  if (*(_QWORD *)(a2 + 2528))
    sub_1C6154398((uint64_t)(v28 + 2520), a2 + 2520);
  *((_QWORD *)v28 + 318) = v28 + 2560;
  *((_QWORD *)v28 + 319) = 0;
  if (*(_DWORD *)(a2 + 2552))
    sub_1C614CA14((uint64_t)(v28 + 2544), a2 + 2544);
  *((_QWORD *)v28 + 320) = v28 + 2584;
  *((_QWORD *)v28 + 322) = 0;
  *((_QWORD *)v28 + 321) = 0;
  if (*(_QWORD *)(a2 + 2568))
    sub_1C6154398((uint64_t)(v28 + 2560), a2 + 2560);
  *((_QWORD *)v28 + 323) = v28 + 2600;
  *((_QWORD *)v28 + 324) = 0;
  if (*(_DWORD *)(a2 + 2592))
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v28 + 2584), a2 + 2584);
  *(_OWORD *)(v28 + 2600) = *(_OWORD *)(a2 + 2600);
  v35 = *(_OWORD *)(a2 + 2616);
  v36 = *(_OWORD *)(a2 + 2632);
  v37 = *(_OWORD *)(a2 + 2664);
  *(_OWORD *)(v28 + 2648) = *(_OWORD *)(a2 + 2648);
  *(_OWORD *)(v28 + 2664) = v37;
  *(_OWORD *)(v28 + 2616) = v35;
  *(_OWORD *)(v28 + 2632) = v36;
  v38 = &v26[2704 * v27];
  *((_DWORD *)v38 + 670) = v47;
  *((_DWORD *)v38 + 671) = v45;
  *((_DWORD *)v38 + 672) = v43;
  *((_QWORD *)v38 + 337) = v41;
  sub_1C4AC382C(a1, (uint64_t)v26);
  v39 = v48;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v26;
  v25 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 12) = v39;
LABEL_25:
  *(_DWORD *)(a1 + 8) = v25;
}

float64x2_t sub_1C4AC58DC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  float64x2_t result;

  v3 = 0;
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = a2[4];
  v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v5;
  do
  {
    *(_QWORD *)(a1 + v3) -= *(_QWORD *)(a3 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  *(_QWORD *)(a1 + 24) -= *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 32) -= *(_DWORD *)(a3 + 32);
  *(int64x2_t *)(a1 + 40) = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a3 + 40));
  result = vsubq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)(a3 + 56));
  *(float64x2_t *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 72) -= *(_QWORD *)(a3 + 72);
  return result;
}

double sub_1C4AC5968(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  double result;

  v3 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  do
  {
    *(_QWORD *)(a1 + v3) = llround((double)*(uint64_t *)(a2 + v3) * a3);
    v3 += 8;
  }
  while (v3 != 24);
  *(_QWORD *)(a1 + 24) = llround((double)*(uint64_t *)(a2 + 24) * a3);
  *(_DWORD *)(a1 + 32) = llround((double)*(int *)(a2 + 32) * a3);
  *(int64x2_t *)(a1 + 40) = vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(a2 + 40)), a3)));
  *(float64x2_t *)(a1 + 56) = vmulq_n_f64(*(float64x2_t *)(a2 + 56), a3);
  result = (double)*(uint64_t *)(a2 + 72) * a3;
  *(_QWORD *)(a1 + 72) = llround(result);
  return result;
}

uint64_t sub_1C4AC59F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v29;
  uint64_t v30;

  v3 = a2;
  v4 = a1;
  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v29 = *a1 + 2704 * v6;
  if (v29 != a3)
  {
    v7 = a3;
    v8 = a2;
    while (1)
    {
      *(_DWORD *)v8 = *(_DWORD *)v7;
      sub_1C4AC3ABC(v8 + 8, v7 + 8);
      v9 = 0;
      v10 = 0;
      v30 = v7;
      do
      {
        v11 = v8 + v9;
        v12 = v7 + v9;
        if (v8 == v7)
          goto LABEL_11;
        v13 = (void **)(v11 + 2264);
        v14 = *(void **)(v12 + 2264);
        if ((void *)(v12 + 2280) != v14)
        {
          if ((void *)(v8 + v9 + 2280) != *v13)
          {
            free(*v13);
            v14 = *(void **)(v12 + 2264);
          }
          *v13 = v14;
          v15 = (_DWORD *)(v7 + 80 * v10 + 2272);
          *(_QWORD *)(v8 + v9 + 2272) = *(_QWORD *)(v7 + v9 + 2272);
          *(_QWORD *)(v12 + 2264) = v12 + 2280;
          *(_DWORD *)(v7 + v9 + 2276) = 0;
          goto LABEL_10;
        }
        v15 = (_DWORD *)(v7 + v9 + 2272);
        v16 = *v15;
        v17 = v8;
        v18 = v8 + v9;
        v19 = *(unsigned int *)(v18 + 2272);
        if (v19 < v16)
        {
          if (*(_DWORD *)(v18 + 2276) < v16)
          {
            *(_DWORD *)(v18 + 2272) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 2264, v17 + v9 + 2280, v16, 8);
LABEL_15:
            v19 = 0;
          }
          else
          {
            if (!(_DWORD)v19)
              goto LABEL_15;
            memmove(*v13, v14, 8 * v19);
          }
          v20 = *v15;
          if (v19 != v20)
            memcpy((char *)*v13 + 8 * v19, (const void *)(*(_QWORD *)(v12 + 2264) + 8 * v19), 8 * v20 - 8 * v19);
          goto LABEL_9;
        }
        if ((_DWORD)v16)
          memmove(*v13, v14, 8 * v16);
LABEL_9:
        *(_DWORD *)(v18 + 2272) = v16;
        v8 = v17;
        v7 = v30;
LABEL_10:
        *v15 = 0;
LABEL_11:
        *(_DWORD *)(v11 + 2328) = *(_DWORD *)(v12 + 2328);
        *(_DWORD *)(v11 + 2336) = *(_DWORD *)(v12 + 2336);
        ++v10;
        v9 += 80;
      }
      while (v9 != 240);
      sub_1C6154804(v8 + 2504, v7 + 2504);
      sub_1C6154884((_QWORD *)(v8 + 2520), (_QWORD *)(v7 + 2520));
      sub_1C6154804(v8 + 2544, v7 + 2544);
      sub_1C6154884((_QWORD *)(v8 + 2560), (_QWORD *)(v7 + 2560));
      sub_1C6154804(v8 + 2584, v7 + 2584);
      *(_OWORD *)(v8 + 2600) = *(_OWORD *)(v7 + 2600);
      v21 = *(_OWORD *)(v7 + 2616);
      v22 = *(_OWORD *)(v7 + 2632);
      v23 = *(_OWORD *)(v7 + 2664);
      *(_OWORD *)(v8 + 2648) = *(_OWORD *)(v7 + 2648);
      *(_OWORD *)(v8 + 2664) = v23;
      *(_OWORD *)(v8 + 2616) = v21;
      *(_OWORD *)(v8 + 2632) = v22;
      v24 = *(_OWORD *)(v7 + 2680);
      *(_QWORD *)(v8 + 2696) = *(_QWORD *)(v7 + 2696);
      *(_OWORD *)(v8 + 2680) = v24;
      v7 += 2704;
      v8 += 2704;
      if (v7 == v29)
      {
        v4 = a1;
        v3 = a2;
        v5 = *a1;
        v6 = *((_DWORD *)a1 + 2);
        goto LABEL_26;
      }
    }
  }
  v8 = a2;
LABEL_26:
  v25 = v5 + 2704 * v6;
  if (v25 != v8)
  {
    do
      v25 = sub_1C4AC3FAC(v25 - 2704);
    while (v25 != v8);
    v5 = *v4;
  }
  *((_DWORD *)v4 + 2) = -76242023 * ((unint64_t)(v8 - v5) >> 4);
  return v3;
}

float64x2_t sub_1C4AC5CA8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  float64x2_t result;

  for (i = 0; i != 24; i += 8)
    *(_QWORD *)(a1 + i) += *(_QWORD *)(a2 + i);
  *(_QWORD *)(a1 + 24) += *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 32);
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40));
  result = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 72) += *(_QWORD *)(a2 + 72);
  return result;
}

uint64_t sub_1C4AC5D1C()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Run AGX3 Static Sim and Print Stats";
  *((_QWORD *)&v3 + 1) = 35;
  v1 = 0;
  v2 = &v1;
  sub_1C614D990((uint64_t)&unk_1ED7EDF98, "print-agx3-static-sim-stats", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EDF98, &dword_1C475E000);
}

uint64_t sub_1C4AC5D90(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  char *v66;

  if (a2 > 329)
  {
    if (a2 == 330)
    {
      v13 = *(_DWORD *)(a4 + 28);
      if (v13 == 1 || v13 == 2 || v13 == 3)
      {
        v14 = *(_QWORD *)(a3 + 32);
        if (*(_BYTE *)v14
          || *(_BYTE *)(v14 + 32)
          || (*(_DWORD *)(v14 + 4) - 1) < 0x3FFFFFFF
          || (*(_DWORD *)(v14 + 36) - 1) <= 0x3FFFFFFE)
        {
          return 364;
        }
        else
        {
          return 363;
        }
      }
    }
    goto LABEL_157;
  }
  if (a2 > 306)
  {
    switch(a2)
    {
      case 307:
      case 309:
        v5 = *(_DWORD *)(a4 + 28);
        if (v5 != 3 && v5 != 2)
          goto LABEL_6;
        goto LABEL_7;
      case 308:
        v5 = *(_DWORD *)(a4 + 28);
        if (v5 == 2 || v5 == 3)
          goto LABEL_7;
LABEL_6:
        if (v5 != 1)
          goto LABEL_157;
LABEL_7:
        v6 = **(unsigned __int16 **)(a3 + 16);
        v7 = sub_1C4C2FD5C(v6);
        v8 = *(_QWORD *)(a3 + 32);
        if (!*(_BYTE *)(v8 + 32 * v7)
          && *(_BYTE *)(v8 + 32 * (v7 + 1)) == 1
          && (*(_BYTE *)(v8 + 32 * (v7 + 1) + 16) & 1) != 0)
        {
          return 359;
        }
        v9 = sub_1C4C2FD5C(v6);
        if (!*(_BYTE *)(v8 + 32 * v9) && *(_BYTE *)(v8 + 32 * (v9 + 1)) == 1)
        {
          v10 = (*(_QWORD *)(v8 + 32 * (v9 + 1) + 16) & 1) == 0;
          v11 = 359;
          goto LABEL_13;
        }
        return 360;
      case 310:
      case 311:
      case 312:
        v21 = *(_DWORD *)(a4 + 28);
        if (v21 != 2 && v21 != 3)
          goto LABEL_44;
        goto LABEL_45;
      case 313:
        v21 = *(_DWORD *)(a4 + 28);
        if (v21 == 3 || v21 == 2)
          goto LABEL_45;
LABEL_44:
        if (v21 != 1)
          goto LABEL_157;
LABEL_45:
        v22 = **(unsigned __int16 **)(a3 + 16);
        v23 = sub_1C4C2FD5C(v22);
        v24 = *(_QWORD *)(a3 + 32);
        if (!*(_BYTE *)(v24 + 32 * v23)
          && *(_BYTE *)(v24 + 32 * (v23 + 1)) == 1
          && (*(_BYTE *)(v24 + 32 * (v23 + 1) + 16) & 1) != 0
          || (v25 = sub_1C4C2FD5C(v22), !*(_BYTE *)(v24 + 32 * v25))
          && *(_BYTE *)(v24 + 32 * (v25 + 1)) == 1
          && (*(_BYTE *)(v24 + 32 * (v25 + 1) + 16) & 1) != 0)
        {
          result = 361;
        }
        else
        {
          v26 = sub_1C4C2FD5C(v22);
          if (!*(_BYTE *)(v24 + 32 * v26) && *(_BYTE *)(v24 + 32 * (v26 + 1)) == 1)
          {
            v10 = (*(_QWORD *)(v24 + 32 * (v26 + 1) + 16) & 1) == 0;
            v11 = 361;
            goto LABEL_13;
          }
          result = 362;
        }
        break;
      default:
        goto LABEL_157;
    }
    return result;
  }
  switch(a2)
  {
    case 150:
      v60 = *(_DWORD *)(a4 + 28);
      if (v60 != 2 && v60 != 3 && v60 != 1)
        goto LABEL_157;
      v61 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v61) & 0xFF00000000) == 0)
        goto LABEL_162;
      v48 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v61) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v49 = 333;
      goto LABEL_111;
    case 151:
      v15 = *(_DWORD *)(a4 + 28);
      if (v15 != 1 && v15 != 2 && v15 != 3)
        goto LABEL_157;
      v16 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v16) & 0xFF00000000) == 0)
        goto LABEL_162;
      v17 = sub_1C4C2FD5C(v16);
      v18 = *(_QWORD *)(a3 + 32);
      if ((*(_QWORD *)(v18 + 32 * v17 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v19 = sub_1C4C32DEC(v16);
        if (v19 != 9 && v19 != 2)
          return 335;
      }
      if ((*(_QWORD *)(v18 + 32 * sub_1C4C2FD5C(v16) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v42 = sub_1C4C32DEC(v16);
        if (v42 != 9 && v42 != 2)
          return 336;
      }
      if ((*(_QWORD *)(v18 + 32 * sub_1C4C2FD5C(v16) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v43 = sub_1C4C32DEC(v16);
        result = 337;
        if (v43 == 2 || v43 == 9)
          return result;
      }
      if ((*(_QWORD *)(v18 + 32 * sub_1C4C2FD5C(v16) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
        return 338;
      v20 = sub_1C4C32DEC(v16);
      v10 = v20 == 2 || v20 == 9;
      v11 = 339;
      goto LABEL_13;
    case 152:
      v44 = *(_DWORD *)(a4 + 28);
      if (v44 != 1 && v44 != 2 && v44 != 3)
        goto LABEL_157;
      v45 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v45) & 0xFF00000000) == 0)
        goto LABEL_162;
      v39 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v45) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v40 = 334;
      v41 = 341;
      goto LABEL_90;
    case 153:
      v58 = *(_DWORD *)(a4 + 28);
      if (v58 != 3 && v58 != 2 && v58 != 1)
        goto LABEL_157;
      v59 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v59) & 0xFF00000000) == 0)
        goto LABEL_162;
      v48 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v59) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v49 = 342;
      goto LABEL_111;
    case 154:
      v29 = *(_DWORD *)(a4 + 28);
      if (v29 != 2 && v29 != 3 && v29 != 1)
        goto LABEL_157;
      v30 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v30) & 0xFF00000000) == 0)
        goto LABEL_162;
      v31 = sub_1C4C2FD5C(v30);
      v32 = *(_QWORD *)(a3 + 32);
      if ((*(_QWORD *)(v32 + 32 * v31 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v33 = sub_1C4C32DEC(v30);
        if (v33 != 9 && v33 != 2)
          return 344;
      }
      if ((*(_QWORD *)(v32 + 32 * sub_1C4C2FD5C(v30) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v34 = sub_1C4C32DEC(v30);
        if (v34 != 9 && v34 != 2)
          return 345;
      }
      if ((*(_QWORD *)(v32 + 32 * sub_1C4C2FD5C(v30) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v35 = sub_1C4C32DEC(v30);
        result = 346;
        if (v35 == 2 || v35 == 9)
          return result;
      }
      if ((*(_QWORD *)(v32 + 32 * sub_1C4C2FD5C(v30) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
        return 347;
      v36 = sub_1C4C32DEC(v30);
      v10 = v36 == 2 || v36 == 9;
      v11 = 348;
      goto LABEL_13;
    case 155:
      v62 = *(_DWORD *)(a4 + 28);
      if (v62 != 2 && v62 != 3 && v62 != 1)
        goto LABEL_157;
      v63 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v63) & 0xFF00000000) == 0)
        goto LABEL_162;
      v39 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v63) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v40 = 343;
      v41 = 350;
      goto LABEL_90;
    case 156:
      v64 = *(_DWORD *)(a4 + 28);
      if (v64 != 2 && v64 != 3 && v64 != 1)
        goto LABEL_157;
      v65 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v65) & 0xFF00000000) == 0)
        goto LABEL_162;
      v48 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v65) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v49 = 351;
      goto LABEL_111;
    case 157:
      v50 = *(_DWORD *)(a4 + 28);
      if (v50 != 1 && v50 != 2 && v50 != 3)
        goto LABEL_157;
      v51 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v51) & 0xFF00000000) == 0)
        goto LABEL_162;
      v52 = sub_1C4C2FD5C(v51);
      v53 = *(_QWORD *)(a3 + 32);
      if ((*(_QWORD *)(v53 + 32 * v52 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v54 = sub_1C4C32DEC(v51);
        if (v54 != 9 && v54 != 2)
          return 353;
      }
      if ((*(_QWORD *)(v53 + 32 * sub_1C4C2FD5C(v51) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v55 = sub_1C4C32DEC(v51);
        if (v55 != 9 && v55 != 2)
          return 354;
      }
      if ((*(_QWORD *)(v53 + 32 * sub_1C4C2FD5C(v51) + 16) & 0xFFFFFFFFFFFFFFFELL) != 4
        || (v56 = sub_1C4C32DEC(v51), result = 341, v56 != 2) && v56 != 9)
      {
        if ((*(_QWORD *)(v53 + 32 * sub_1C4C2FD5C(v51) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
        {
          return 350;
        }
        else
        {
          v57 = sub_1C4C32DEC(v51);
          v39 = v57 == 2 || v57 == 9;
          v40 = 334;
          v41 = 343;
LABEL_90:
          if (v39)
            return v41;
          else
            return v40;
        }
      }
      return result;
    case 158:
      v37 = *(_DWORD *)(a4 + 28);
      if (v37 != 1 && v37 != 3 && v37 != 2)
        goto LABEL_157;
      v38 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v38) & 0xFF00000000) == 0)
        goto LABEL_162;
      v39 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v38) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v40 = 352;
      v41 = 355;
      goto LABEL_90;
    default:
      if (a2 != 212)
      {
        if (a2 == 211)
        {
          v46 = *(_DWORD *)(a4 + 28);
          if (v46 == 3 || v46 == 2 || v46 == 1)
          {
            v47 = **(unsigned __int16 **)(a3 + 16);
            if ((sub_1C4C915C4(v47) & 0xFF00000000) != 0)
            {
              v48 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v47) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
              v49 = 356;
LABEL_111:
              if (v48)
                return v49;
              else
                return v49 + 1;
            }
            goto LABEL_162;
          }
        }
LABEL_157:
        v66 = "Expected a variant SchedClass";
        goto LABEL_158;
      }
      v27 = *(_DWORD *)(a4 + 28);
      if (v27 != 2 && v27 != 3 && v27 != 1)
        goto LABEL_157;
      v28 = **(unsigned __int16 **)(a3 + 16);
      if ((sub_1C4C915C4(v28) & 0xFF00000000) == 0)
      {
LABEL_162:
        v66 = "Unknown Opcode";
LABEL_158:
        llvm::report_fatal_error((llvm *)v66, (const char *)1);
      }
      v10 = (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * sub_1C4C2FD5C(v28) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
      v11 = 357;
LABEL_13:
      if (v10)
        return v11 + 1;
      else
        return v11;
  }
}

uint64_t sub_1C4AC67C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 400);
}

uint64_t sub_1C4AC67C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 408);
}

uint64_t sub_1C4AC67D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 416);
}

uint64_t sub_1C4AC67D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 424);
}

uint64_t sub_1C4AC67E0(int a1, uint64_t a2, char *__s, int *a4)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  void ***p_dst;
  uint64_t result;
  uint64_t v23;
  void ***v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  _QWORD *v34;
  char *v35;
  void *v36;
  char *v37;
  BOOL v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  unint64_t v47;
  void ***v48;
  size_t v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  _QWORD *v57;
  char *v58;
  void *v59;
  char *v60;
  _BOOL4 v63;
  size_t v64;
  unint64_t v65;
  void **v66;
  size_t v67;
  void ***v69;
  unint64_t v70;
  size_t v71;
  unint64_t v73;
  unint64_t v74;
  void ***v75;
  size_t v76;
  unint64_t v77;
  void ***v78;
  size_t v79;
  unint64_t v80;
  void ***v81;
  size_t v82;
  int v83;
  unint64_t v84;
  void ***v85;
  size_t v86;
  int v87;
  size_t v88;
  unsigned int v89;
  size_t v90;
  unint64_t v91;
  void **j;
  int v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  _QWORD *v97;
  size_t v98;
  int64_t v99;
  void **__dst;
  size_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(a2 + 112);
  if (__s)
  {
    v7 = strlen(__s);
    if (!v6)
      goto LABEL_24;
  }
  else
  {
    v7 = 0;
    if (!v6)
    {
LABEL_24:
      result = 0;
      *a4 = 0;
      return result;
    }
  }
  if (!*(_DWORD *)(v6 + 8))
    goto LABEL_24;
  v8 = *(_QWORD *)(v6 + 40);
  if (!v8)
    goto LABEL_24;
  v9 = *(_DWORD *)(v8 + 40);
  if (!v9)
    goto LABEL_24;
  v10 = *(_QWORD *)(v8 + 24);
  v11 = sub_1C5E3DF4C(__s, (uint64_t)&__s[v7]);
  v12 = v9 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = v10 + 24 * (v11 & v12);
    v16 = *(const void **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if (__s == (char *)-1)
        goto LABEL_19;
      goto LABEL_11;
    }
    if (v16 != (const void *)-2)
      break;
    if (__s == (char *)-2)
      goto LABEL_19;
LABEL_11:
    if (v16 == (const void *)-1)
      goto LABEL_24;
    v11 = i + v14;
  }
  if (v7 != *(_QWORD *)(v15 + 8) || v7 && memcmp(__s, *(const void **)v15, v7))
    goto LABEL_11;
LABEL_19:
  v17 = *(_QWORD *)(v15 + 16);
  *a4 = -1;
  if (!v17 || *(_BYTE *)(v17 + 8) != 2)
    goto LABEL_24;
  v18 = v17 + 24;
  v20 = *(unsigned int *)(v17 + 12);
  v19 = *(unsigned int *)(v17 + 16);
  if (v19 >= 0x17)
  {
    if ((v19 | 7) == 0x17)
      v23 = (v19 & 0xFFFFFFF8) + 8;
    else
      v23 = v19 | 7;
    p_dst = (void ***)operator new(v23 + 1);
    v101 = v19;
    v102 = v23 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = (void **)p_dst;
    goto LABEL_30;
  }
  HIBYTE(v102) = *(_DWORD *)(v17 + 16);
  p_dst = &__dst;
  if ((_DWORD)v19)
LABEL_30:
    memmove(p_dst, (const void *)(v18 + v20 + 1), v19);
  *((_BYTE *)p_dst + v19) = 0;
  if (v102 >= 0)
    v24 = &__dst;
  else
    v24 = (void ***)__dst;
  if (v102 >= 0)
    v25 = HIBYTE(v102) & 0x7F;
  else
    v25 = v101;
  for (; v25; --v25)
  {
    *(_BYTE *)v24 = __tolower(*(char *)v24);
    v24 = (void ***)((char *)v24 + 1);
  }
  v26 = strlen(__s);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_229;
  v27 = v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    v98 = v27;
    v99 = v30 | 0x8000000000000000;
    v97 = v28;
    goto LABEL_46;
  }
  HIBYTE(v99) = v26;
  v28 = &v97;
  if (v26)
LABEL_46:
    memcpy(v28, __s, v27);
  *((_BYTE *)v28 + v27) = 0;
  v31 = HIBYTE(v99);
  v32 = SHIBYTE(v99);
  v33 = v97;
  if (v99 >= 0)
  {
    v34 = &v97;
  }
  else
  {
    v31 = v98;
    v34 = v97;
  }
  v35 = (char *)v34 + v31;
  if (v31 >= 8)
  {
    v36 = v34;
    do
    {
      v37 = (char *)memchr(v36, 67, v31 - 7);
      if (!v37)
        break;
      if (*(_QWORD *)v37 == 0x6C74436568636143)
        goto LABEL_56;
      v36 = v37 + 1;
      v31 = v35 - (_BYTE *)v36;
    }
    while (v35 - (_BYTE *)v36 > 7);
  }
  v37 = v35;
LABEL_56:
  v39 = v37 == v35 || v37 - (char *)v34 == -1;
  if (v32 < 0)
    operator delete(v33);
  if (!v39)
  {
    v43 = SHIBYTE(v102);
    v44 = v101;
    v45 = HIBYTE(v102) & 0x7F;
    if (v102 >= 0)
      v46 = HIBYTE(v102) & 0x7F;
    else
      v46 = v101;
    if (v46 != 11)
      goto LABEL_156;
    if (v102 >= 0)
      v47 = HIBYTE(v102);
    else
      v47 = v101;
    if (v102 >= 0)
      v48 = &__dst;
    else
      v48 = (void ***)__dst;
    if (v47 >= 0xB)
      v49 = 11;
    else
      v49 = v47;
    if (!memcmp(v48, "cacl1_cacl2", v49) && v47 == 11)
      *a4 = 0;
    if (!memcmp(v48, "bypl1_cacl2", v49) && v47 == 11)
      *a4 = 1;
    if (memcmp(v48, "bypl1_bypl2", v49) || v47 != 11)
      goto LABEL_156;
    v51 = 3;
    goto LABEL_155;
  }
  v40 = strlen(__s);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
LABEL_229:
    abort();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v52 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v52 = v40 | 7;
    v53 = v52 + 1;
    v42 = operator new(v52 + 1);
    v98 = v41;
    v99 = v53 | 0x8000000000000000;
    v97 = v42;
    goto LABEL_97;
  }
  HIBYTE(v99) = v40;
  v42 = &v97;
  if (v40)
LABEL_97:
    memcpy(v42, __s, v41);
  *((_BYTE *)v42 + v41) = 0;
  v54 = HIBYTE(v99);
  v55 = SHIBYTE(v99);
  v56 = v97;
  if (v99 >= 0)
  {
    v57 = &v97;
  }
  else
  {
    v54 = v98;
    v57 = v97;
  }
  v58 = (char *)v57 + v54;
  if (v54 >= 6)
  {
    v59 = v57;
    do
    {
      v60 = (char *)memchr(v59, 76, v54 - 5);
      if (!v60)
        break;
      if (*(_DWORD *)v60 == 1699754572 && *((_WORD *)v60 + 2) == 29554)
        goto LABEL_110;
      v59 = v60 + 1;
      v54 = v58 - (_BYTE *)v59;
    }
    while (v58 - (_BYTE *)v59 > 5);
  }
  v60 = v58;
LABEL_110:
  v63 = v60 == v58 || v60 - (char *)v57 == -1;
  if (v55 < 0)
    operator delete(v56);
  v43 = SHIBYTE(v102);
  v44 = v101;
  if (v63)
  {
    v45 = HIBYTE(v102) & 0x7F;
    goto LABEL_156;
  }
  v45 = HIBYTE(v102) & 0x7F;
  if (v102 >= 0)
    v64 = HIBYTE(v102) & 0x7F;
  else
    v64 = v101;
  if (v64 != 4)
  {
    if (v64 == 3)
    {
      v65 = v102 >= 0 ? HIBYTE(v102) : v101;
      v66 = v102 >= 0 ? (void **)&__dst : __dst;
      v67 = v65 >= 3 ? 3 : v65;
      if (!memcmp(v66, "low", v67) && v65 == 3)
        *a4 = 0;
    }
    goto LABEL_156;
  }
  if (v102 >= 0)
    v69 = &__dst;
  else
    v69 = (void ***)__dst;
  if (v102 >= 0)
    v70 = HIBYTE(v102);
  else
    v70 = v101;
  if (v70 >= 4)
    v71 = 4;
  else
    v71 = v70;
  if (!memcmp(v69, "high", v71) && v70 == 4)
  {
    v51 = 1;
LABEL_155:
    *a4 = v51;
  }
LABEL_156:
  if (v43 >= 0)
    v73 = v45;
  else
    v73 = v44;
  switch(v73)
  {
    case 2uLL:
      if (v43 >= 0)
        v74 = v43;
      else
        v74 = v44;
      if (v43 >= 0)
        v75 = &__dst;
      else
        v75 = (void ***)__dst;
      if (v74 >= 2)
        v76 = 2;
      else
        v76 = v74;
      if (!memcmp(v75, "no", v76) && v74 == 2)
        goto LABEL_195;
      break;
    case 3uLL:
      if (v43 >= 0)
        v84 = v43;
      else
        v84 = v44;
      if (v43 >= 0)
        v85 = &__dst;
      else
        v85 = (void ***)__dst;
      if (v84 >= 3)
        v86 = 3;
      else
        v86 = v84;
      if (!memcmp(v85, "yes", v86) && v84 == 3)
        goto LABEL_207;
      break;
    case 4uLL:
      if (v43 >= 0)
        v77 = v43;
      else
        v77 = v44;
      if (v43 >= 0)
        v78 = &__dst;
      else
        v78 = (void ***)__dst;
      if (v77 >= 4)
        v79 = 4;
      else
        v79 = v77;
      if (!memcmp(v78, "true", v79) && v77 == 4)
      {
LABEL_207:
        v83 = 1;
        goto LABEL_208;
      }
      break;
    case 5uLL:
      if (v43 >= 0)
        v80 = v43;
      else
        v80 = v44;
      if (v43 >= 0)
        v81 = &__dst;
      else
        v81 = (void ***)__dst;
      if (v80 >= 5)
        v82 = 5;
      else
        v82 = v80;
      if (!memcmp(v81, "false", v82) && v80 == 5)
      {
LABEL_195:
        v83 = 0;
LABEL_208:
        *a4 = v83;
      }
      break;
    default:
      break;
  }
  if (v43 < 0)
    operator delete(__dst);
  if (*a4 != -1)
    return 1;
  result = 0;
  v87 = *(unsigned __int8 *)(v17 + 8);
  *a4 = 0;
  if (v87 == 2)
  {
    v88 = *(unsigned int *)(v17 + 16);
    __dst = (void **)(v18 + *(unsigned int *)(v17 + 12) + 1);
    v101 = v88;
    v89 = sub_1C5E3D4C0((uint64_t)&__dst);
    v90 = v101;
    if (v101)
    {
      v91 = 0;
      for (j = __dst; ; j = (void **)((char *)j + 1))
      {
        v93 = *(unsigned __int8 *)j;
        if ((v93 - 48) >= 0xA)
        {
          if ((v93 - 97) >= 0x1A)
          {
            if ((v93 - 65) > 0x19)
              return 0;
            v94 = -55;
          }
          else
          {
            v94 = -87;
          }
        }
        else
        {
          v94 = -48;
        }
        v95 = v94 + v93;
        if (v95 >= v89)
          break;
        v96 = v91 * v89 + v95;
        if (v96 / v89 < v91)
          break;
        v91 = v96;
        if (!--v90)
        {
          if (HIDWORD(v96))
            return 0;
          *a4 = v96;
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

void sub_1C4AC6F40(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 3) = 1;
  *(_WORD *)a2 = 257;
}

void sub_1C4AC6F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  int v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;

  v8 = *(_QWORD *)a6 & 6;
  v9 = v8 == 6 && *(_DWORD *)(a4 + 192) == -1;
  if (v8)
    v10 = !v9;
  else
    v10 = 0;
  if (!v10)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(unsigned __int16 **)(v11 + 16);
    v13 = *((_QWORD *)v12 + 2);
    if ((v13 & 0x400000000) != 0)
    {
      v14 = *v12;
      if ((v14 - 6165) <= 1)
        *(_DWORD *)(a6 + 12) += 998;
      v15 = v13 & 0x1D00;
      v16 = (v13 & 0x1900 | 0x400) == 0xD00 || (v13 >> 26) & 1;
      v17 = v15 == 1280 || v16;
      v18 = v14 - 6495;
      v19 = (~(_DWORD)v13 & 0x800100) != 0 && v18 >= 8;
      v20 = !v19;
      v21 = v19 ? v17 : 1;
      v22 = v15 == 4352 ? 1 : v21;
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 32) + 16);
      v24 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 424))(v23) + 7) & 0xFFFFFFF8;
      if (v24 <= 0x5F)
      {
        v28 = (v24 - 64) >> 3;
        v29 = v28 - 1;
        if ((v28 - 1) > 2)
        {
          v25 = 170;
          v27 = 35;
          v26 = 35;
        }
        else
        {
          v27 = dword_1C677EB08[v29];
          v26 = dword_1C677EB14[(int)v29];
          v25 = dword_1C677EB20[(int)v29];
        }
      }
      else
      {
        v25 = 480;
        v26 = 450;
        v27 = 60;
      }
      if (((v13 >> 1) & 1 | v22) == 1)
      {
        v30 = atomic_load((unsigned __int8 *)&qword_1ED7EE080);
        if ((v30 & 1) == 0)
        {
          v45 = v27;
          v46 = __cxa_guard_acquire(&qword_1ED7EE080);
          v27 = v45;
          if (v46)
          {
            byte_1ED7EE058 = 1;
            __cxa_guard_release(&qword_1ED7EE080);
            v27 = v45;
          }
        }
        v31 = atomic_load((unsigned __int8 *)&qword_1ED7EE088);
        if ((v31 & 1) == 0)
        {
          v47 = v27;
          v48 = __cxa_guard_acquire(&qword_1ED7EE088);
          v27 = v47;
          if (v48)
          {
            dword_1ED7EE078 = byte_1ED7EE058 << 31 >> 31;
            __cxa_guard_release(&qword_1ED7EE088);
            v27 = v47;
          }
        }
        v32 = atomic_load((unsigned __int8 *)&qword_1ED7EE090);
        if ((v32 & 1) == 0)
        {
          v49 = v27;
          v50 = __cxa_guard_acquire(&qword_1ED7EE090);
          v27 = v49;
          if (v50)
          {
            byte_1ED7EE05C = 1;
            __cxa_guard_release(&qword_1ED7EE090);
            v27 = v49;
          }
        }
        if (v16)
        {
          v33 = byte_1ED7EE058;
          goto LABEL_45;
        }
        if (v20)
        {
          if (dword_1ED7EE078 != -1)
            v27 = dword_1ED7EE078;
          goto LABEL_47;
        }
        if (v15 == 4352)
        {
          v33 = byte_1ED7EE05C;
LABEL_45:
          if (!v33)
            v27 = 0;
LABEL_47:
          *(_DWORD *)(a6 + 12) = *(_DWORD *)(a6 + 12) + v27 - *(unsigned __int16 *)(a2 + 226);
          return;
        }
        v34 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 32);
        v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 344) + 560))(*(_QWORD *)(v34 + 344));
        if (!v35)
          v35 = *(_QWORD *)v34;
        v36 = (*(unsigned __int16 *)(v35 + 18) >> 4) & 0x3FF;
        if ((v36 - 103) < 2 || v36 == 101)
        {
          v40 = atomic_load((unsigned __int8 *)&qword_1ED7EE0A8);
          if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0A8))
          {
            byte_1ED7EE068 = 1;
            __cxa_guard_release(&qword_1ED7EE0A8);
          }
          v41 = atomic_load((unsigned __int8 *)&qword_1ED7EE0B0);
          if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0B0))
          {
            byte_1ED7EE06C = 1;
            __cxa_guard_release(&qword_1ED7EE0B0);
          }
          if ((v13 & 2) == 0)
          {
            v42 = byte_1ED7EE06C;
            goto LABEL_72;
          }
          v39 = byte_1ED7EE068;
        }
        else
        {
          if (v36 == 102)
          {
            v37 = atomic_load((unsigned __int8 *)&qword_1ED7EE0B8);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0B8))
            {
              byte_1ED7EE070 = 1;
              __cxa_guard_release(&qword_1ED7EE0B8);
            }
            v38 = atomic_load((unsigned __int8 *)&qword_1ED7EE0C0);
            if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0C0))
            {
              byte_1ED7EE074 = 1;
              __cxa_guard_release(&qword_1ED7EE0C0);
            }
            if ((v13 & 2) != 0)
            {
              v39 = byte_1ED7EE070;
              goto LABEL_67;
            }
            v42 = byte_1ED7EE074;
LABEL_72:
            if (v42)
              v27 = v26;
            else
              v27 = 0;
            goto LABEL_47;
          }
          v43 = atomic_load((unsigned __int8 *)&qword_1ED7EE098);
          if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE098))
          {
            byte_1ED7EE060 = 1;
            __cxa_guard_release(&qword_1ED7EE098);
          }
          v44 = atomic_load((unsigned __int8 *)&qword_1ED7EE0A0);
          if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0A0))
          {
            byte_1ED7EE064 = 1;
            __cxa_guard_release(&qword_1ED7EE0A0);
          }
          if ((v13 & 2) == 0)
          {
            v42 = byte_1ED7EE064;
            goto LABEL_72;
          }
          v39 = byte_1ED7EE060;
        }
LABEL_67:
        if (v39)
          v27 = v25;
        else
          v27 = 0;
        goto LABEL_47;
      }
    }
  }
}

uint64_t sub_1C4AC73FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8EFA90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8EFA90))
    __cxa_guard_release(&qword_1EF8EFA90);
  return 0;
}

uint64_t sub_1C4AC7440(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  unsigned int v4;
  unsigned __int8 v5;
  _DWORD *v6;
  unsigned int v7;
  int v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (word_1EF8F65B8)
    return dword_1EF8F6630;
  v10[0] = &off_1E81316D0;
  v10[1] = a1;
  v11 = v10;
  v1 = sub_1C4C0B384(v10);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = (void (**)(_QWORD *))(v10[0] + 32);
    v2 = v10;
LABEL_4:
    (*v3)(v2);
    goto LABEL_5;
  }
  if (v11)
  {
    v3 = (void (**)(_QWORD *))(*v11 + 40);
    goto LABEL_4;
  }
LABEL_5:
  v4 = dword_1C677EB2C[v1];
  v5 = atomic_load((unsigned __int8 *)&qword_1EF8F6678);
  v6 = &unk_1EF8F6000;
  if ((v5 & 1) == 0)
  {
    v9 = __cxa_guard_acquire(&qword_1EF8F6678);
    v6 = &unk_1EF8F6000;
    if (v9)
    {
      dword_1EF8F6670 = 0;
      __cxa_guard_release(&qword_1EF8F6678);
      v6 = (_DWORD *)&unk_1EF8F6000;
    }
  }
  v7 = v6[412];
  if (v7)
    return v7;
  else
    return v4;
}

uint64_t sub_1C4AC754C(uint64_t a1)
{
  return a1 + 440;
}

uint64_t sub_1C4AC7554(uint64_t a1)
{
  return *(_QWORD *)(a1 + 432);
}

uint64_t sub_1C4AC755C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1224);
}

uint64_t sub_1C4AC7564(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) + 88;
}

uint64_t sub_1C4AC7584()
{
  return 1;
}

uint64_t sub_1C4AC758C()
{
  return 0;
}

uint64_t sub_1C4AC7594(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 281);
}

uint64_t sub_1C4AC759C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 1042) & 8) != 0)
    return llvm::TargetFrameLowering::isSafeForNoCSROpt(*(llvm::TargetFrameLowering **)a2, (const llvm::Function *)a2);
  else
    return 0;
}

void sub_1C4AC75B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E7FB2398;
  v2 = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1C6150A40((_QWORD *)(a1 + 440));
  v3 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo((void **)a1);
}

uint64_t sub_1C4AC768C()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Maximum number of GPRs that can be allocated, idential to AGX3_TEMP_REG_LIMIT EV and overrides it";
  *((_QWORD *)&v1 + 1) = 97;
  sub_1C6155358(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1EF8F65B0, &dword_1C475E000);
}

double sub_1C4AC76D4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  double result;

  v2 = sub_1C484358C(a2, 792, 3);
  *(_DWORD *)(v2 + 8) = -1;
  *(_BYTE *)(v2 + 12) = 0;
  *(_QWORD *)v2 = &off_1E7FAD378;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 0x1000000000;
  result = 0.0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_DWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_DWORD *)(v2 + 200) = 0;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_DWORD *)(v2 + 224) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_DWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = v2 + 272;
  *(_QWORD *)(v2 + 264) = 0xA00000000;
  *(_BYTE *)(v2 + 480) = 0;
  *(_DWORD *)(v2 + 448) = 0;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_DWORD *)(v2 + 472) = 0;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_QWORD *)(v2 + 488) = 0;
  *(_DWORD *)(v2 + 495) = 0;
  *(_QWORD *)(v2 + 504) = v2 + 520;
  *(_QWORD *)(v2 + 512) = 0x300000000;
  *(_BYTE *)(v2 + 536) = 0;
  *(_BYTE *)(v2 + 540) = 0;
  *(_BYTE *)(v2 + 544) = 0;
  *(_BYTE *)(v2 + 548) = 0;
  *(_BYTE *)(v2 + 552) = 0;
  *(_BYTE *)(v2 + 556) = 0;
  *(_WORD *)(v2 + 560) = 0;
  *(_DWORD *)(v2 + 564) = 0;
  *(_DWORD *)(v2 + 567) = 0;
  *(_DWORD *)(v2 + 592) = 0;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 600) = 0u;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 628) = 0u;
  *(_OWORD *)(v2 + 676) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 696) = 0u;
  *(_DWORD *)(v2 + 712) = 0;
  *(_DWORD *)(v2 + 736) = 0;
  *(_OWORD *)(v2 + 720) = 0u;
  *(_DWORD *)(v2 + 760) = 0;
  *(_OWORD *)(v2 + 744) = 0u;
  *(_DWORD *)(v2 + 784) = 0;
  *(_OWORD *)(v2 + 768) = 0u;
  return result;
}

uint64_t sub_1C4AC7808()
{
  return 1;
}

uint64_t sub_1C4AC782C(uint64_t a1, uint64_t a2)
{
  return sub_1C4ABD76C(a2);
}

uint64_t sub_1C4AC7834(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  unsigned int v8;
  int j;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  unsigned int v27;
  size_t v28;
  __int128 *p_dst;
  uint64_t v30;
  unsigned int v31;
  std::string::size_type v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  void *p_p;
  uint64_t v40;
  int v41;
  size_t v42;
  const std::string::value_type *v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  size_t size;
  unsigned int v55;
  int v56;
  size_t v57;
  std::string *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v74;
  _QWORD *v75;
  __int128 *v76;
  size_t v77;
  void **v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  size_t *v83;
  char *v84;
  _QWORD **k;
  llvm::StringMapImpl *v87;
  std::string v90;
  __int128 v91;
  uint64_t v92;
  void *__p;
  size_t v94;
  uint64_t v95;
  std::string v96;
  void *v97[2];
  uint64_t v98;
  __int128 __dst;
  uint64_t v100;

  v2 = *((_QWORD *)a2 + 14);
  if (!v2 || !*(_DWORD *)(v2 + 8))
  {
    v26 = 0;
    goto LABEL_50;
  }
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3 || (v4 = *(_DWORD *)(v3 + 40)) == 0)
  {
    v14 = 0;
LABEL_23:
    v15 = *(_QWORD *)(v2 + 40);
    if (v15)
    {
      v16 = *(_DWORD *)(v15 + 40);
      if (v16)
      {
        v17 = *(_QWORD *)(v15 + 24);
        v18 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v71 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v71 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v71;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v19 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                                   * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
        v20 = (-348639895 * ((v19 >> 47) ^ v19)) ^ 0x74616566;
        for (i = 1; ; ++i)
        {
          v22 = v20 & (v16 - 1);
          v23 = v17 + 24 * v22;
          v24 = *(_QWORD **)v23;
          if (*(_QWORD *)v23 == -1)
          {
            if ("target-features" == (char *)-1)
              goto LABEL_40;
          }
          else if (v24 == (_QWORD *)-2)
          {
            if ("target-features" == (char *)-2)
              goto LABEL_40;
          }
          else if (*(_QWORD *)(v23 + 8) == 15
                 && *v24 == 0x662D746567726174
                 && *(_QWORD *)((char *)v24 + 7) == 0x7365727574616566)
          {
LABEL_40:
            v26 = *(_QWORD *)(v23 + 16);
            goto LABEL_42;
          }
          if (v24 == (_QWORD *)-1)
            goto LABEL_41;
          v20 = i + v22;
        }
      }
    }
    goto LABEL_41;
  }
  v5 = *(_QWORD *)(v3 + 24);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v70 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v70 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v70;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x74656772;
  for (j = 1; ; ++j)
  {
    v10 = v8 & (v4 - 1);
    v11 = (uint64_t *)(v5 + 24 * v10);
    v12 = *v11;
    if (*v11 == -1)
    {
      if ("target-cpu" == (char *)-1)
        goto LABEL_20;
    }
    else if (v12 == -2)
    {
      if ("target-cpu" == (char *)-2)
        goto LABEL_20;
    }
    else if (v11[1] == 10 && *(_QWORD *)v12 == 0x632D746567726174 && *(_WORD *)(v12 + 8) == 30064)
    {
LABEL_20:
      v14 = v11[2];
      goto LABEL_22;
    }
    if (v12 == -1)
      break;
    v8 = j + v10;
  }
  v14 = 0;
LABEL_22:
  if (*(_DWORD *)(v2 + 8))
    goto LABEL_23;
LABEL_41:
  v26 = 0;
LABEL_42:
  if (v14)
  {
    if (*(_BYTE *)(v14 + 8) == 2)
    {
      v27 = *(_DWORD *)(v14 + 12);
      goto LABEL_46;
    }
    v27 = *(_DWORD *)(v14 + 12);
    if (v27)
    {
LABEL_46:
      v28 = *(unsigned int *)(v14 + 16);
      if (v28 >= 0x17)
      {
        if ((v28 | 7) == 0x17)
          v30 = (v28 & 0xFFFFFFF8) + 8;
        else
          v30 = v28 | 7;
        p_dst = (__int128 *)operator new(v30 + 1);
        *((_QWORD *)&__dst + 1) = v28;
        v100 = v30 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v100) = *(_DWORD *)(v14 + 16);
        p_dst = &__dst;
        if (!(_DWORD)v28)
        {
LABEL_60:
          *((_BYTE *)p_dst + v28) = 0;
          if (!v26)
            goto LABEL_67;
          goto LABEL_61;
        }
      }
      memmove(p_dst, (const void *)(v14 + v27 + 25), v28);
      goto LABEL_60;
    }
  }
LABEL_50:
  if (*(char *)(a1 + 519) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a1 + 496), *(_QWORD *)(a1 + 504));
    if (!v26)
      goto LABEL_67;
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 496);
    v100 = *(_QWORD *)(a1 + 512);
    if (!v26)
      goto LABEL_67;
  }
LABEL_61:
  if (*(_BYTE *)(v26 + 8) == 2)
  {
    v31 = *(_DWORD *)(v26 + 12);
    goto LABEL_64;
  }
  v31 = *(_DWORD *)(v26 + 12);
  if (v31)
  {
LABEL_64:
    v32 = *(unsigned int *)(v26 + 16);
    v33 = v26 + 24;
    if (v32 >= 0x17)
    {
      if ((v32 | 7) == 0x17)
        v36 = (v32 & 0xFFFFFFF8) + 8;
      else
        v36 = v32 | 7;
      v34 = operator new(v36 + 1);
      v96.__r_.__value_.__l.__size_ = v32;
      v96.__r_.__value_.__r.__words[2] = v36 - 0x7FFFFFFFFFFFFFFFLL;
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    }
    else
    {
      *((_BYTE *)&v96.__r_.__value_.__s + 23) = *(_DWORD *)(v26 + 16);
      v34 = &v96;
      if (!(_DWORD)v32)
      {
LABEL_74:
        v34[v32] = 0;
        v37 = *(unsigned int *)(v26 + 12);
        v38 = *(unsigned int *)(v26 + 16);
        if (v38 >= 0x17)
        {
          if ((v38 | 7) == 0x17)
            v40 = (v38 & 0xFFFFFFF8) + 8;
          else
            v40 = v38 | 7;
          p_p = operator new(v40 + 1);
          v94 = v38;
          v95 = v40 - 0x7FFFFFFFFFFFFFFFLL;
          __p = p_p;
        }
        else
        {
          HIBYTE(v95) = *(_DWORD *)(v26 + 16);
          p_p = &__p;
          if (!(_DWORD)v38)
          {
LABEL_82:
            *((_BYTE *)p_p + v38) = 0;
            v41 = SHIBYTE(v95);
            v42 = HIBYTE(v95) & 0x7F;
            if (v95 < 0)
              v42 = v94;
            if (v42)
              v43 = ",";
            else
              v43 = (const std::string::value_type *)&unk_1C868633A;
            v44 = std::string::append(&v96, v43);
            v45 = v44->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
            v90.__r_.__value_.__r.__words[2] = v45;
            v44->__r_.__value_.__l.__size_ = 0;
            v44->__r_.__value_.__r.__words[2] = 0;
            v44->__r_.__value_.__r.__words[0] = 0;
            v46 = *(_BYTE *)(a1 + 543);
            v47 = v46;
            if (v46 >= 0)
              v48 = (const std::string::value_type *)(a1 + 520);
            else
              v48 = *(const std::string::value_type **)(a1 + 520);
            v49 = v46 & 0x7F;
            if (v47 >= 0)
              v50 = v49;
            else
              v50 = *(_QWORD *)(a1 + 528);
            v51 = std::string::append(&v90, v48, v50);
            v52 = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)v97 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v98 = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v90.__r_.__value_.__l.__data_);
              if ((v41 & 0x80000000) == 0)
                goto LABEL_95;
            }
            else if ((v41 & 0x80000000) == 0)
            {
LABEL_95:
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v96.__r_.__value_.__l.__data_);
              v35 = a1;
              goto LABEL_101;
            }
            operator delete(__p);
            goto LABEL_95;
          }
        }
        memmove(p_p, (const void *)(v33 + v37 + 1), v38);
        goto LABEL_82;
      }
    }
    memmove(v34, (const void *)(v33 + v31 + 1), v32);
    goto LABEL_74;
  }
LABEL_67:
  v35 = a1;
  if (*(char *)(a1 + 543) < 0)
  {
    sub_1C47EBC30(v97, *(void **)(a1 + 520), *(_QWORD *)(a1 + 528));
  }
  else
  {
    *(_OWORD *)v97 = *(_OWORD *)(a1 + 520);
    v98 = *(_QWORD *)(a1 + 536);
  }
LABEL_101:
  sub_1C4842EB8((const void **)&__dst, (const void **)v97, (uint64_t)&v90);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v90;
  else
    v53 = (std::string *)v90.__r_.__value_.__r.__words[0];
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v90.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v90.__r_.__value_.__l.__size_;
  v55 = *(_DWORD *)(v35 + 2568);
  if (!v55)
  {
    *(_QWORD *)(v35 + 2572) = 0;
    v69 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v69)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v69[16] = 2;
    *(_QWORD *)(v35 + 2560) = v69;
    v55 = 16;
    *(_DWORD *)(v35 + 2568) = 16;
  }
  v87 = (llvm::StringMapImpl *)(v35 + 2560);
  v56 = 0;
  if (size)
  {
    v57 = size;
    v58 = v53;
    do
    {
      v59 = v58->__r_.__value_.__s.__data_[0];
      v58 = (std::string *)((char *)v58 + 1);
      v56 = 33 * v56 + v59;
      --v57;
    }
    while (v57);
  }
  v60 = *(_QWORD *)(a1 + 2560);
  v61 = v55 - 1;
  v62 = v60 + 8 * v55 + 8;
  v63 = -1;
  v64 = 1;
  v65 = v56;
  while (1)
  {
    v66 = v65 & v61;
    v67 = *(_QWORD **)(v60 + 8 * v66);
    if (!v67)
      break;
    if (v67 == (_QWORD *)-8)
    {
      if (v63 == -1)
        v63 = v65 & v61;
    }
    else if (*(_DWORD *)(v62 + 4 * v66) == v56
           && size == *v67
           && (!size || !memcmp(v53, (char *)v67 + *(unsigned int *)(a1 + 2580), size)))
    {
      goto LABEL_126;
    }
    v65 = v64 + v66;
    ++v64;
  }
  v68 = v63;
  if (v63 == -1)
  {
    v68 = v66;
    v66 = v66;
  }
  else
  {
    v66 = v63;
  }
  *(_DWORD *)(v62 + 4 * v68) = v56;
  v67 = *(_QWORD **)(v60 + 8 * v66);
LABEL_126:
  if (v67)
  {
    if (v67 != (_QWORD *)-8)
      goto LABEL_140;
    --*(_DWORD *)(a1 + 2576);
  }
  v81 = v60;
  v82 = operator new(size + 17, (std::align_val_t)8uLL);
  v83 = v82;
  v84 = (char *)(v82 + 2);
  if (size)
    memcpy(v82 + 2, v53, size);
  v84[size] = 0;
  *v83 = size;
  v83[1] = 0;
  *(_QWORD *)(v81 + 8 * v66) = v83;
  ++*(_DWORD *)(a1 + 2572);
  for (k = (_QWORD **)(*(_QWORD *)(a1 + 2560) + 8 * llvm::StringMapImpl::RehashTable(v87, v66)); ; ++k)
  {
    v67 = *k;
    if (*k && v67 + 1 != 0)
      break;
  }
LABEL_140:
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v72 = v67[1];
  if (!v72)
  {
    llvm::TargetMachine::resetTargetOptions((llvm::TargetMachine *)a1, a2);
    if (*(char *)(a1 + 471) < 0)
      sub_1C47EBC30(&v90, *(void **)(a1 + 448), *(_QWORD *)(a1 + 456));
    else
      v90 = *(std::string *)(a1 + 448);
    v92 = *(_QWORD *)(a1 + 488);
    v91 = *(_OWORD *)(a1 + 472);
    v74 = (_QWORD *)operator new();
    v75 = v74;
    if (v100 >= 0)
      v76 = &__dst;
    else
      v76 = (__int128 *)__dst;
    if (v100 >= 0)
      v77 = HIBYTE(v100) & 0x7F;
    else
      v77 = *((_QWORD *)&__dst + 1);
    if (v98 >= 0)
      v78 = v97;
    else
      v78 = (void **)v97[0];
    if (v98 >= 0)
      v79 = HIBYTE(v98) & 0x7F;
    else
      v79 = (size_t)v97[1];
    sub_1C6154FE8(v74, (__int128 *)&v90, v76, v77, v78, v79, a1);
    v80 = v67[1];
    v67[1] = v75;
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v72 = v67[1];
  }
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  if (SHIBYTE(v100) < 0)
    operator delete((void *)__dst);
  return v72;
}

_QWORD *sub_1C4AC8130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;

  v5 = *(_QWORD *)(a2 + 40) + 272;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  result = (_QWORD *)operator new();
  *result = &off_1E7FB2930;
  result[1] = &off_1E7FB2838;
  result[2] = v5;
  result[3] = a1;
  result[4] = v6;
  result[5] = v7;
  *a3 = result;
  return result;
}

_QWORD *sub_1C4AC81C0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E7FB2E18;
  *a1 = result;
  return result;
}

void sub_1C4AC8204(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;
  uint64_t v4;
  unsigned __int8 v5;
  BOOL v6;
  llvm::Pass *v7;
  llvm::Pass *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;
  llvm::Pass *v11;
  void *__p[4];

  v2 = (llvm::Pass *)sub_1C615A488();
  llvm::TargetPassConfig::addPass(a1, v2);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6ED0);
  strcpy((char *)__p, "After codegen DCE pass");
  HIBYTE(__p[2]) = 22;
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v3 = (llvm::Pass *)sub_1C614E2BC();
  llvm::TargetPassConfig::addPass(a1, v3);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6F2A);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FA0);
  v4 = *((_QWORD *)a1 + 14);
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EE0D0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0D0))
  {
    byte_1ED7EE0C8 = 1;
    __cxa_guard_release(&qword_1ED7EE0D0);
  }
  if (*(_BYTE *)(v4 + 1626))
    v6 = 1;
  else
    v6 = byte_1ED7EE0C8 == 0;
  if (!v6)
  {
    v7 = (llvm::Pass *)sub_1C614FA38();
    llvm::TargetPassConfig::addPass(a1, v7);
  }
  v8 = (llvm::Pass *)sub_1C6150708();
  llvm::TargetPassConfig::addPass(a1, v8);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64632B0;
  strcpy((char *)__p[0], "After Machine LICM, CSE and Sinking passes");
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FB6);
  sub_1C614E390();
  llvm::TargetPassConfig::addPass(a1, v9);
  v10 = (llvm::Pass *)sub_1C6158C90();
  llvm::TargetPassConfig::addPass(a1, v10);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64632C0;
  strcpy((char *)__p[0], "After codegen peephole optimization pass");
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v11 = (llvm::Pass *)operator new();
  sub_1C4A9FAAC((uint64_t)v11);
  llvm::TargetPassConfig::addPass(a1, v11);
}

BOOL sub_1C4AC8424(uint64_t a1, __int16 ***a2)
{
  return a2 == &off_1E7FB1BF8;
}

uint64_t sub_1C4AC8438(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1320);
}

uint64_t sub_1C4AC8440()
{
  return 1;
}

uint64_t sub_1C4AC8448(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

uint64_t sub_1C4AC8470()
{
  return 0;
}

__n128 sub_1C4AC8478(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7EE1A8, "agx3-pre-ra-analysis-val-live-over-calls", 0x28uLL);
  result = *a1;
  xmmword_1ED7EE1C8 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7EE228 = **a2;
  byte_1ED7EE239 = 1;
  byte_1ED7EE238 = *v7;
  word_1ED7EE1B2 = (32 * (*a3 & 3)) | word_1ED7EE1B2 & 0xFF9F;
  return result;
}

void sub_1C4AC84FC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4AC8510()
{
  return 1;
}

uint64_t sub_1C4AC8518()
{
  return 0;
}

uint64_t sub_1C4AC8520()
{
  return 150;
}

uint64_t sub_1C4AC8528(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4AC8C3C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1C4AC8530(uint64_t a1, llvm::ShuffleVectorInst *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4AC9338((uint64_t *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1C4AC8538()
{
  return 2126008812;
}

BOOL sub_1C4AC8544(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1C4AC8550(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C4AC8564(uint64_t a1, uint64_t ***a2)
{
  return sub_1C4845148(a1 + 16, a2);
}

void sub_1C4AC856C(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  sub_1C495CB1C(a1 + 8, a2, a3, a4);
}

void sub_1C4AC8574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 1;
  *(_BYTE *)(a4 + 6) = 1;
}

uint64_t sub_1C4AC8588()
{
  return 0;
}

uint64_t sub_1C4AC8594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;

  v4 = a1 + 8;
  v5 = *(unsigned int *)(a4 + 8);
  v15 = v5;
  if (v5 > 0x40)
  {
    v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v12 = a2;
    v13 = v4;
    v11 = a3;
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)a4, v8);
    a2 = v12;
    v4 = v13;
    a3 = v11;
  }
  else
  {
    v6 = *(void **)a4;
  }
  v14 = v6;
  result = sub_1C497FB8C(v4, a2, a3, (uint64_t)&v14);
  if (v15 >= 0x41)
  {
    if (v14)
    {
      v10 = result;
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      return v10;
    }
  }
  return result;
}

uint64_t sub_1C4AC8674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  void (**v19)(_QWORD *);
  size_t v21;
  _QWORD *v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v13 = a1 + 8;
  v14 = *(unsigned int *)(a4 + 8);
  v25 = v14;
  if (v14 > 0x40)
  {
    v21 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
    v23 = a8;
    v15 = (void *)operator new[]();
    memcpy(v15, *(const void **)a4, v21);
    a8 = v23;
  }
  else
  {
    v15 = *(void **)a4;
  }
  v24 = v15;
  v16 = (_QWORD *)a8[3];
  if (v16)
  {
    if (v16 == a8)
    {
      v27 = v26;
      (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v26);
    }
    else
    {
      v27 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    }
  }
  else
  {
    v27 = 0;
  }
  v17 = sub_1C497FC14(v13, a2, a3, (uint64_t)&v24, a5, a6, a7, v26);
  v18 = v27;
  if (v27 == v26)
  {
    v19 = (void (**)(_QWORD *))(v26[0] + 32);
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_9;
    v19 = (void (**)(_QWORD *))(*v27 + 40);
  }
  (*v19)(v18);
LABEL_9:
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return v17;
}

uint64_t sub_1C4AC8830()
{
  return 0;
}

uint64_t sub_1C4AC8838()
{
  return 1;
}

uint64_t sub_1C4AC8840()
{
  return 0;
}

uint64_t sub_1C4AC8848(uint64_t a1, llvm::EVT *a2, llvm::LLVMContext *a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ExtendedIntegerVT;
  uint64_t v15;

  if ((int)a3 <= 31)
  {
    switch((_DWORD)a3)
    {
      case 1:
        v10 = 0;
        v11 = 0;
        v12 = 2;
        return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
      case 0x10:
        v10 = 0;
        v11 = 0;
        v12 = 4;
        return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
      case 8:
        v10 = 0;
        v11 = 0;
        v12 = 3;
        return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
    }
LABEL_15:
    ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(a2, a3);
    v11 = v15;
    v10 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
    v12 = ExtendedIntegerVT;
    return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
  }
  if ((_DWORD)a3 != 32)
  {
    if ((_DWORD)a3 == 64)
    {
      v10 = 0;
      v11 = 0;
      v12 = 6;
      return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
    }
    if ((_DWORD)a3 == 128)
    {
      v10 = 0;
      v11 = 0;
      v12 = 7;
      return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
    }
    goto LABEL_15;
  }
  v10 = 0;
  v11 = 0;
  v12 = 5;
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v12 | v10, v11, a4, a5, 0, a6);
}

uint64_t sub_1C4AC8948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_1C47A7FD0(v2, *(_QWORD *)(a1 + 16), a2, 0);
  if (v3 && (v3 == 1 || *(_QWORD *)(v2 + 8 * v3 + 96)) && (v4 = *(char *)(v2 + 390 * v3 + 3958), v4 <= 4))
    return qword_1C677EDD8[v4];
  else
    return 4;
}

uint64_t sub_1C4AC89C4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  return 0;
}

__n128 sub_1C4AC89D0(uint64_t a1, int a2)
{
  __n128 result;

  sub_1C4ACA7DC(a1 + 8, a2);
  return result;
}

BOOL sub_1C4AC89E8(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

uint64_t sub_1C4AC89FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1C4ACB518(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C4AC8A04()
{
  return 0;
}

BOOL sub_1C4AC8A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C495CA74(a1 + 8, a2, a3);
}

BOOL sub_1C4AC8A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4849AD0(a1 + 16, a2, a3);
}

BOOL sub_1C4AC8A1C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a3, 0);
  if (!v5)
    return 0;
  return *(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1C4AC8A90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1C4AC8AF8()
{
  return 128;
}

uint64_t sub_1C4AC8B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  BOOL v7;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3
    && *(_QWORD *)(v3 + 56)
    && *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)) + 339))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a2 - 32);
  v5 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8);
  if ((v5 & 0xFFFFFF00) != 0x4000)
    return 1;
  v7 = sub_1C5E9DE14(v4, 0);
  result = 0;
  if (!v7)
    return 1;
  return result;
}

BOOL sub_1C4AC8B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = **(_QWORD **)(a2 - 32);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(v2 + 16) + 8);
  return (v3 & 0xFFFFFF00) != 0x4000;
}

BOOL sub_1C4AC8BD4(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1C5EAA084(a2, 1 << a3, a4);
}

BOOL sub_1C4AC8BE8(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1C5EAA084(a2, 1 << a3, a4);
}

uint64_t sub_1C4AC8BFC(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***this)
{
  return sub_1C5EAA0EC(a2, a3, this);
}

uint64_t sub_1C4AC8C10(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***this)
{
  return sub_1C5EAA0EC(a2, a3, this);
}

uint64_t sub_1C4AC8C24()
{
  return 0;
}

uint64_t sub_1C4AC8C2C()
{
  return 1;
}

BOOL sub_1C4AC8C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C495CB9C(a1 + 8, a2, a3);
}

uint64_t sub_1C4AC8C3C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t v32;
  unsigned int v33;
  void **p_dst;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BOOL4 v61;
  unint64_t v62;
  char *v63;
  _DWORD *v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t **v68;
  uint64_t v69;
  int v70;
  _BYTE v71[32];
  void *__dst;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;

  v9 = ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 8);
  *a3 = 0;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 528))(v10, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56));
  if (!(_DWORD)v9)
    return v9;
  v13 = v12;
  if ((v12 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(v11 + 232) + 12) < v9)
    return v9;
  v14 = *(_DWORD *)(a2 + 20);
  v65 = a3;
  if ((v14 & 0x40000000) != 0)
    v15 = *(_QWORD *)(a2 - 8);
  else
    v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = *(unsigned int *)(v16 + 32);
  v75 = v17;
  v66 = a4;
  if (v17 > 0x40)
  {
    v18 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
    v74 = operator new[]();
    memcpy((void *)v74, *(const void **)(v16 + 24), v18);
    v73 = v17;
    __dst = (void *)operator new[]();
    memcpy(__dst, (const void *)v74, v18);
  }
  else
  {
    v74 = *(_QWORD *)(v16 + 24);
    v73 = v17;
    __dst = (void *)v74;
  }
  v19 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
  v20 = (v19 - 1);
  if (v19 != 1)
  {
    for (i = 0; i != v20; ++i)
    {
      v22 = *(_DWORD *)(a2 + 20);
      if ((v22 & 0x40000000) != 0)
        v23 = *(_QWORD *)(a2 - 8);
      else
        v23 = a2 - 32 * (v22 & 0x7FFFFFF);
      v24 = *(_QWORD *)(v23 + 32 * (2 * i + 2));
      v25 = (void **)(v24 + 24);
      v26 = *(unsigned int *)(v24 + 32);
      if (v26 > 0x40)
      {
        v28 = *((_QWORD *)*v25 + ((v26 - 1) >> 6)) & (1 << (v26 - 1));
        v29 = v75 - 1;
        if (v75 >= 0x41)
          v30 = (uint64_t *)(v74 + 8 * (v29 >> 6));
        else
          v30 = &v74;
        if ((v28 != 0) == (((unint64_t)*v30 >> v29) & 1))
        {
          v35 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
          while (v35)
          {
            v36 = *(_QWORD *)((char *)*v25 + v35 - 8);
            v37 = *(_QWORD *)(v74 - 8 + v35);
            v35 -= 8;
            if (v36 != v37)
            {
              v31 = &v74 == (uint64_t *)v25;
              if (v36 > v37)
                goto LABEL_34;
              break;
            }
          }
        }
        else
        {
          v31 = &v74 == (uint64_t *)v25;
          if (v28)
            goto LABEL_17;
LABEL_34:
          if (!v31)
          {
LABEL_27:
            llvm::APInt::reallocate((uint64_t)&v74, v26);
            if (v75 <= 0x40)
              v74 = (uint64_t)*v25;
            else
              memcpy((void *)v74, *v25, (((unint64_t)v75 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else
      {
        if ((uint64_t)((_QWORD)*v25 << -(char)v26) >> -(char)v26 <= v74 << -(char)v26 >> -(char)v26)
          goto LABEL_17;
        if (v75 <= 0x40)
        {
          v74 = (uint64_t)*v25;
          v75 = v26;
          goto LABEL_17;
        }
        if (&v74 != (uint64_t *)v25)
          goto LABEL_27;
      }
LABEL_17:
      v27 = *(unsigned int *)(v24 + 32);
      if (v27 > 0x40)
      {
        v32 = *((_QWORD *)*v25 + ((v27 - 1) >> 6)) & (1 << (v27 - 1));
        v33 = v73 - 1;
        if (v73 >= 0x41)
          p_dst = (void **)((char *)__dst + 8 * (v33 >> 6));
        else
          p_dst = &__dst;
        if ((v32 != 0) == (((unint64_t)*p_dst >> v33) & 1))
        {
          v38 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
          while (v38)
          {
            v39 = *(_QWORD *)((char *)*v25 + v38 - 8);
            v40 = *(_QWORD *)((char *)__dst + v38 - 8);
            v38 -= 8;
            if (v39 != v40)
            {
              if (v39 > v40 || &__dst == v25)
                goto LABEL_22;
              goto LABEL_42;
            }
          }
          continue;
        }
        if (v32 && &__dst != v25)
        {
LABEL_42:
          llvm::APInt::reallocate((uint64_t)&__dst, v27);
          if (v73 <= 0x40)
            __dst = *v25;
          else
            memcpy(__dst, *v25, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else if ((uint64_t)((_QWORD)*v25 << -(char)v27) >> -(char)v27 < (uint64_t)((_QWORD)__dst << -(char)v27) >> -(char)v27)
      {
        if (v73 > 0x40)
        {
          if (&__dst != v25)
            goto LABEL_42;
        }
        else
        {
          __dst = *v25;
          v73 = v27;
        }
      }
LABEL_22:
      ;
    }
  }
  if (v9 > *(_DWORD *)(*(_QWORD *)(v11 + 232) + 12))
  {
    if (v9 > 1)
      v41 = v13;
    else
      v41 = 0;
    v42 = v66;
    if ((v41 & 1) == 0)
      goto LABEL_110;
LABEL_94:
    if (v9 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 696))(v10))
    {
      v51 = v75;
      if (v75 >= 0x41)
      {
        v54 = v75 + 63;
        v53 = (void *)operator new[]();
        memcpy(v53, (const void *)v74, (v54 >> 3) & 0x3FFFFFF8);
        v55 = 0;
        v56 = (unint64_t *)__dst;
        v57 = (unint64_t *)v53;
        v58 = v54 >> 6;
        do
        {
          v59 = *v56++;
          v60 = *v57 - v59;
          v61 = *v57 < v59;
          v62 = *v57 + ~v59;
          if (v55)
          {
            v55 = v62 >= *v57;
          }
          else
          {
            v62 = v60;
            v55 = v61;
          }
          *v57++ = v62;
          --v58;
        }
        while (v58);
        *((_QWORD *)v53 + (v54 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
      }
      else
      {
        v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v75;
        if (!v75)
          v52 = 0;
        v53 = (void *)(v52 & (v74 - (_QWORD)__dst));
      }
      LODWORD(v68) = v51;
      v67 = (uint64_t **)v53;
      v63 = (char *)sub_1C47EE5B8(&v67, 0xFFFFFFFFFFFFFFFELL) + 1;
      if (v68 >= 0x41 && v67)
        MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v10 + 536))(v10, a2, v9, v63, v42, a5))
      {
        *v65 = (_DWORD)v63;
        v9 = 1;
      }
    }
    goto LABEL_110;
  }
  v67 = (uint64_t **)v71;
  v68 = (uint64_t **)v71;
  v69 = 4;
  v70 = 0;
  v42 = v66;
  if (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF) == 1)
  {
    v48 = 0;
  }
  else
  {
    v43 = 0;
    v44 = 2 * (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
    do
    {
      v45 = *(_DWORD *)(a2 + 20);
      if ((v45 & 0x40000000) != 0)
        v46 = *(_QWORD *)(a2 - 8);
      else
        v46 = a2 - 32 * (v45 & 0x7FFFFFF);
      v47 = (v43 + 3);
      if (v43 == 0x1FFFFFFFCLL)
        v47 = 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v67, *(_QWORD *)(v46 + 32 * v47));
      v43 += 2;
    }
    while (v44 != v43);
    v48 = HIDWORD(v69) - v70;
  }
  if (sub_1C4844534(v10, (unint64_t **)&__dst, (uint64_t)&v74, v11))
  {
    if (v9 < 3 || v48 != 1)
      v48 = v9 >= 5 && v48 == 2 || v9 > 5 && v48 == 3;
  }
  else
  {
    v48 = 0;
  }
  if (v68 != v67)
    free(v68);
  if (v48)
    v50 = 1;
  else
    v50 = v9;
  if (((v48 | v13 ^ 1) & 1) != 0)
  {
    v9 = v50;
  }
  else if (v9 >= 2)
  {
    goto LABEL_94;
  }
LABEL_110:
  if (v73 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_1C4AC9338(uint64_t *a1, llvm::ShuffleVectorInst *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::ShuffleVectorInst *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  llvm::Type *****v19;
  llvm::Type ***v20;
  uint64_t v21;
  llvm::ShuffleVectorInst *v22;
  uint64_t v23;
  int8x8_t **v24;
  unsigned int CastContextHint;
  uint64_t v26;
  int v27;
  int8x8_t **v28;
  int v29;
  unint64_t v30;
  int8x8_t **v31;
  int v32;
  uint64_t v33;
  int8x8_t **v34;
  uint64_t v35;
  int8x8_t **v36;
  int8x8_t *v37;
  unint64_t v38;
  void *v39;
  BOOL v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value **v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const llvm::DataLayout *v63;
  llvm::TargetLoweringBase *v64;
  uint64_t v65;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  int *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  llvm::FixedVectorType *v86;
  char v87;
  char v88;
  uint64_t v89;
  int *v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int isInsertSubvectorMask;
  llvm::FixedVectorType *v100;
  char *v101;
  uint64_t v102;
  char v103[2];
  _DWORD v104[5];
  int v105[2];
  int8x8_t *v106;
  void *v107;
  uint64_t v108;
  int8x8_t *v109;
  int8x8_t *v110;
  uint64_t v111;
  void *v112;
  _QWORD v113[9];

  v113[7] = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)this + 16);
  v8 = v7 - 28;
  if (v7 < 0x1C)
    goto LABEL_16;
  if (v7 == 33 || v7 == 39)
    goto LABEL_9;
  if (v7 == 84)
  {
    v9 = *((_QWORD *)this - 4);
    if (!v9
      || *(_BYTE *)(v9 + 16)
      || *(_QWORD *)(v9 + 24) != *((_QWORD *)this + 9)
      || (v10 = this, (*(_BYTE *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      v11 = *((_QWORD *)this - 4);
      if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *((_QWORD *)this + 9))
      {
        if (v7 == 84)
        {
          v12 = 0;
        }
        else if (v7 == 39)
        {
          v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          v12 = 2;
        }
        v13 = 0;
        v14 = *((_DWORD *)this + 5);
        v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          v101 = (char *)this - 32 * (v14 & 0x7FFFFFF);
          v102 = *((_QWORD *)v101 - 1);
          if ((v102 & 0xFFFFFFFF0) != 0)
            v13 = *((_DWORD *)v101 - 3) - *(_DWORD *)&v101[-v102];
          else
            v13 = 0;
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1C4845148((uint64_t)a1, *((uint64_t ****)this - 4)))
        return *(unsigned int *)(*(_QWORD *)(v11 + 24) + 12);
      return 1;
    }
  }
  else
  {
LABEL_16:
    v10 = 0;
  }
  v17 = *((_DWORD *)this + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0)
      v19 = (llvm::Type *****)*((_QWORD *)this - 1);
    else
      v19 = (llvm::Type *****)((char *)this - 32);
    v20 = **v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5)
      return 1;
    v8 = *((unsigned __int16 *)this + 9);
  }
  if (v7 <= 0x1B)
    v22 = 0;
  else
    v22 = this;
  v16 = 0;
  v23 = (uint64_t)(a1 - 1);
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if ((_DWORD)a5)
        v40 = (_DWORD)v8 == 55;
      else
        v40 = 0;
      return !v40;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      v104[1] = 0;
      LODWORD(v106) = 0;
      if ((v17 & 0x40000000) != 0)
        v24 = (int8x8_t **)*((_QWORD *)this - 1);
      else
        v24 = (int8x8_t **)((char *)this - 32 * v18);
      llvm::TargetTransformInfo::getOperandInfo(*v24, (const llvm::Value *)&v104[1]);
      if ((_DWORD)v8 != 12)
      {
        v27 = *((_DWORD *)this + 5);
        if ((v27 & 0x40000000) != 0)
          v28 = (int8x8_t **)*((_QWORD *)this - 1);
        else
          v28 = (int8x8_t **)((char *)this - 32 * (v27 & 0x7FFFFFF));
        llvm::TargetTransformInfo::getOperandInfo(v28[4], (const llvm::Value *)&v106);
      }
      v29 = *((_DWORD *)this + 5);
      if ((v29 & 0x40000000) != 0)
      {
        v31 = (int8x8_t **)*((_QWORD *)this - 1);
        v30 = v29 & 0x7FFFFFF;
      }
      else
      {
        v30 = v29 & 0x7FFFFFF;
        v31 = (int8x8_t **)((char *)this - 32 * v30);
      }
      v107 = &v109;
      v108 = 0x200000000;
      if (v30 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)&v109, v30, 8);
        v32 = v108;
        v34 = (int8x8_t **)v107;
        v33 = v108;
      }
      else
      {
        v32 = 0;
        if (!v30)
          goto LABEL_48;
        v33 = 0;
        v34 = &v109;
      }
      v35 = 32 * v30;
      v36 = &v34[v33];
      do
      {
        v37 = *v31;
        v31 += 4;
        *v36++ = v37;
        v35 -= 32;
      }
      while (v35);
LABEL_48:
      LODWORD(v108) = v32 + v30;
      sub_1C4ACA7DC(v23, v8);
      v16 = v38;
      v39 = v107;
      if (v107 != &v109)
LABEL_49:
        free(v39);
      return v16;
    case 31:
      if (*(_BYTE *)(*((_QWORD *)this - 4) + 16) != 16)
        return 1;
      v42 = *((_QWORD *)this + 5);
      v43 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 80);
      v44 = v43 ? v43 - 24 : 0;
      return v42 != v44 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if ((_DWORD)a5 == 2)
      {
        v54 = *((_QWORD *)this + 1);
        if (v54)
        {
          if (!*(_QWORD *)(v54 + 8) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            v55 = *(_QWORD *)(v54 + 24);
            if (v55)
            {
              if (*(_BYTE *)(v55 + 16) == 66)
                v21 = *(_QWORD *)v55;
            }
          }
        }
      }
      v56 = **((_QWORD **)this - 4);
      v57 = *(_DWORD *)(v56 + 8);
      if ((v57 & 0xFE) == 0x12)
        v57 = *(_DWORD *)(**(_QWORD **)(v56 + 16) + 8);
      if ((_DWORD)a5)
        return 1;
      v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      v59 = v57 >> 8;
      v60 = (uint64_t)(a1 - 1);
      v61 = 32;
      v62 = v21;
      return sub_1C4A96648(v60, v61, v62, v58, v59, 0);
    case 33:
      if ((v17 & 0x40000000) != 0)
        v53 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v53 = (uint64_t **)((char *)this - 32 * v18);
      v67 = **((_QWORD **)this - 4);
      v68 = *(_DWORD *)(v67 + 8);
      if ((v68 & 0xFE) == 0x12)
        v68 = *(_DWORD *)(**(_QWORD **)(v67 + 16) + 8);
      if ((_DWORD)a5)
        return 1;
      v62 = **v53;
      v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      v59 = v68 >> 8;
      v60 = (uint64_t)(a1 - 1);
      v61 = 33;
      return sub_1C4A96648(v60, v61, v62, v58, v59, 0);
    case 34:
      v40 = v7 == 62;
      v45 = 24;
      if (v40)
        v45 = 64;
      v46 = *(_QWORD *)((char *)this + v45);
      if ((v17 & 0x40000000) != 0)
        v47 = (llvm::Value **)*((_QWORD *)this - 1);
      else
        v47 = (llvm::Value **)((char *)this - 32 * v18);
      return sub_1C484388C(a1, v46, *v47, (llvm **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v22);
      return sub_1C4ACAD88(v23, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v22);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0)
        v41 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v41 = (uint64_t **)((char *)this - 32 * v18);
      if (v22)
        v48 = *((_WORD *)v22 + 9) & 0x3F;
      else
        v48 = 42;
      return sub_1C4ACB518((uint64_t)(a1 - 1), v8, **v41, *(_QWORD *)this, v48, a5);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v107, *(_DWORD *)(*((_QWORD *)this - 4) + 36), (uint64_t)v10, 0, 1);
      v16 = sub_1C4AC9E98(v23, (uint64_t)&v107, a5);
      if (v112 != v113)
        free(v112);
      v39 = v110;
      if (v110 == (int8x8_t *)&v111)
        return v16;
      goto LABEL_49;
    case 57:
      *(_QWORD *)v105 = 0;
      v106 = 0;
      v107 = &v106;
      v108 = (uint64_t)v105;
      if ((sub_1C4848F80((_QWORD **)&v107, (uint64_t)this) & 1) != 0
        || (*(_QWORD *)&v104[1] = &v106,
            *(_QWORD *)&v104[3] = v105,
            (sub_1C4849098((_QWORD **)&v104[1], (uint64_t)this) & 1) != 0))
      {
        *(_QWORD *)v104 = 0;
        llvm::TargetTransformInfo::getOperandInfo(v106, (const llvm::Value *)&v104[1]);
        llvm::TargetTransformInfo::getOperandInfo(*(int8x8_t **)v105, (const llvm::Value *)v104);
        v107 = &v109;
        v109 = v106;
        v110 = *(int8x8_t **)v105;
        v108 = 0x200000002;
        if (sub_1C48491B0((uint64_t)v103, (unsigned __int8 *)this))
          v49 = 29;
        else
          v49 = 28;
        sub_1C4ACA7DC(v23, v49);
        v16 = v50;
        if (v107 != &v109)
          free(v107);
      }
      else
      {
        v69 = *((_DWORD *)this + 5);
        if ((v69 & 0x40000000) != 0)
          v70 = (uint64_t **)*((_QWORD *)this - 1);
        else
          v70 = (uint64_t **)((char *)this - 32 * (v69 & 0x7FFFFFF));
        return sub_1C4ACB518(v23, 57, *(_QWORD *)this, **v70, 42, a5);
      }
      return v16;
    case 61:
      if (v7 != 89)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v52 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v52 = (uint64_t **)((char *)this - 32 * v18);
      v65 = **v52;
      v63 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v65 + 8) & 0xFE) == 0x12)
        v65 = **(_QWORD **)(v65 + 16);
      v64 = (llvm::TargetLoweringBase *)a1[3];
      goto LABEL_137;
    case 62:
      if (v7 != 90)
        return 1;
      v63 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v21 = **(_QWORD **)(v21 + 16);
      v64 = (llvm::TargetLoweringBase *)a1[3];
      v65 = v21;
LABEL_137:
      llvm::TargetLoweringBase::getTypeLegalizationCost(v64, v63, (llvm::EVT **)v65, (uint64_t)&v107);
      return (uint64_t)v107;
    case 63:
      if (v7 != 91)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v51 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v51 = (uint64_t **)((char *)this - 32 * v18);
      v71 = **v51;
      v104[1] = 0;
      LODWORD(v106) = 0;
      v72 = (uint64_t *)*((_QWORD *)this - 8);
      v73 = *v72;
      v74 = *(unsigned int *)(*v72 + 32);
      v75 = *((unsigned int *)this + 18);
      if ((_DWORD)v74 != (_DWORD)v75)
      {
        if (v74 < v75 && (llvm::ShuffleVectorInst::isIdentityWithPadding(this) & 1) != 0)
          return 0;
        if (*(_BYTE *)(v21 + 8) != 19)
        {
          v80 = (int *)*((_QWORD *)this + 8);
          if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v80, v75, v74, (int *)&v106))
          {
            v77 = v23;
            v78 = 5;
            v81 = v71;
            v82 = v80;
            v83 = v75;
            goto LABEL_185;
          }
          if (*(_BYTE *)(v21 + 8) != 19
            && llvm::ShuffleVectorInst::isInsertSubvectorMask(v80, v75, *(_DWORD *)(v73 + 32), &v104[1], &v106))
          {
            v84 = (int *)*((_QWORD *)this + 8);
            v85 = *((unsigned int *)this + 18);
            v86 = (llvm::FixedVectorType *)v21;
            if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
              v86 = **(llvm::FixedVectorType ***)(v21 + 16);
            llvm::FixedVectorType::get(v86, (llvm::Type *)v104[1]);
            v77 = v23;
            v78 = 4;
            v81 = v21;
            v82 = v84;
            v83 = v85;
            goto LABEL_185;
          }
        }
        v105[0] = 0;
        v104[0] = 0;
        if (!llvm::ShuffleVectorInst::isReplicationMask(this, v105, v104))
        {
          if ((_DWORD)a5)
            return 1;
          else
            return -1;
        }
        v92 = *((_DWORD *)this + 18);
        LODWORD(v108) = v92;
        if (v92 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 0);
          v92 = *((_DWORD *)this + 18);
          if (v92)
          {
LABEL_165:
            v93 = 0;
            v94 = *((_QWORD *)this + 8);
            v95 = v92;
            v96 = v108;
            v97 = 4 * v95;
            do
            {
              if (*(_DWORD *)(v94 + 4 * v93) != -1)
              {
                v98 = 1 << v93;
                if (v96 > 0x40)
                  *((_QWORD *)v107 + (v93 >> 6)) |= v98;
                else
                  v107 = (void *)((unint64_t)v107 | v98);
              }
              ++v93;
              v97 -= 4;
            }
            while (v97);
          }
        }
        else
        {
          v107 = 0;
          if (v92)
            goto LABEL_165;
        }
        v16 = sub_1C61576F0(v23, *(llvm::FixedVectorType **)(v71 + 24), v105[0], (llvm::Type *)v104[0], (llvm::APIntOps *)&v107);
        if (v108 >= 0x41 && v107)
          MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
        return v16;
      }
      v76 = (int *)*((_QWORD *)this + 8);
      if ((sub_1C53EC390(v76, *(unsigned int *)(*v72 + 32), *(_DWORD *)(*v72 + 32)) & 1) != 0)
        return 0;
      if (llvm::ShuffleVectorInst::isReverseMask(v76, v74))
      {
        v77 = v23;
        v78 = 1;
LABEL_184:
        v81 = v21;
        v82 = v76;
        v83 = v74;
        goto LABEL_185;
      }
      if (llvm::ShuffleVectorInst::isSelectMask(v76, v74))
      {
        v77 = v23;
        v78 = 2;
        goto LABEL_184;
      }
      if (llvm::ShuffleVectorInst::isTransposeMask(v76, v74))
      {
        v77 = v23;
        v78 = 3;
        goto LABEL_184;
      }
      if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v76, v74))
      {
        v77 = v23;
        v78 = 0;
        goto LABEL_184;
      }
      if ((_DWORD)v74)
      {
        v87 = 0;
        v88 = 0;
        v89 = 4 * v74;
        v90 = v76;
        while (1)
        {
          v91 = *v90;
          if (*v90 != -1)
          {
            v87 |= v91 < (int)v74;
            v88 |= v91 >= (int)v74;
            if ((v87 & 1) != 0 && (v88 & 1) != 0)
              break;
          }
          ++v90;
          v89 -= 4;
          if (!v89)
            goto LABEL_175;
        }
      }
      else
      {
        v88 = 0;
        v87 = 0;
LABEL_175:
        if ((v87 & 1) != 0 || (v88 & 1) != 0)
        {
          v77 = v23;
          v78 = 7;
          goto LABEL_184;
        }
      }
      if (*(_BYTE *)(v21 + 8) == 19
        || (isInsertSubvectorMask = llvm::ShuffleVectorInst::isInsertSubvectorMask(v76, v74, v74, &v104[1], &v106),
            v74 = *((unsigned int *)this + 18),
            v76 = (int *)*((_QWORD *)this + 8),
            !isInsertSubvectorMask))
      {
        v77 = v23;
        v78 = 6;
        goto LABEL_184;
      }
      v100 = (llvm::FixedVectorType *)v21;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v100 = **(llvm::FixedVectorType ***)(v21 + 16);
      llvm::FixedVectorType::get(v100, (llvm::Type *)v104[1]);
      v77 = v23;
      v78 = 4;
      v81 = v21;
      v82 = v76;
      v83 = v74;
LABEL_185:
      sub_1C4ACB830(v77, v78, v81, v82, v83);
      return v26;
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1C4AC9E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *p_src;
  void *v22;
  int8x8_t **v24;
  int8x8_t *v25;
  int8x8_t *v26;
  int8x8_t *v27;
  int OperandInfo;
  llvm::Type *v29;
  uint64_t (*v30)(void);
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t **v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  _BOOL4 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::Type *v71;
  uint64_t **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  int8x8_t *v88;
  int v89;
  uint64_t __src;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[32];
  void *v98;
  uint64_t v99;
  _BYTE v100[32];
  int v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 8;
  v7 = sub_1C4846F4C(a1 + 8, a2);
  v9 = v7 < 0;
  if (v8)
    v9 = v8 < 0;
  if (!v9)
  {
    v10 = v8 < 1;
    if (!v8)
      v10 = v7 < 1;
    if (v10)
      return 0;
  }
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181)
    return 1;
  v13 = *(_DWORD *)(a2 + 80);
  if (!v13)
    return sub_1C4ACBBF0(a1, a2, a3);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_DWORD *)(v14 + 8);
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    v16 = *(unsigned int *)(v14 + 32) | ((unint64_t)(v15 == 19) << 32);
  else
    v16 = 1;
  v18 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          return 1;
        case 131:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          v45 = ***(_QWORD ***)(a2 + 72);
          v46 = a1;
          v47 = 5;
          goto LABEL_64;
        case 132:
          v48 = *(uint64_t ***)(a2 + 72);
          if (*(_BYTE *)(*v48[1] + 8) == 19)
            return sub_1C4846F4C(v6, a2);
          v45 = **v48;
          v46 = a1;
          v47 = 4;
          goto LABEL_64;
        case 133:
          v45 = ***(_QWORD ***)(a2 + 72);
          v46 = a1;
          v47 = 1;
          goto LABEL_64;
        case 134:
          v45 = ***(_QWORD ***)(a2 + 72);
          v46 = a1;
          v47 = 8;
LABEL_64:
          sub_1C4ACB830(v46, v47, v45, 0, 0);
          return v17;
        default:
          if (v12 == 52)
          {
            if (v16 != 1)
              goto LABEL_98;
            v30 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 224);
          }
          else
          {
            if (v12 != 54 || v16 != 1)
              goto LABEL_98;
            v30 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 216);
          }
          v49 = v30();
          v50 = 0;
          v11 = 1;
          if ((v49 & 1) != 0)
            return v11;
          break;
      }
      goto LABEL_107;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        v34 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), (llvm::Type *)1);
        v36 = v35;
        v37 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), **(_QWORD **)(a2 + 24), (llvm::Type *)1);
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32), v34, v36, v37, v38) & 1) == 0)
        {
          llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v14, (uint64_t)&v92);
          return v92;
        }
        v39 = **(uint64_t ****)(a2 + 24);
        v40 = (llvm::Type *)*(unsigned int *)(v14 + 32);
        if (*(_BYTE *)(v14 + 8) == 19)
          llvm::ScalableVectorType::get(v39, v40);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v39, v40);
        v42 = v41;
        v92 = 0;
        v93 = v41;
        v94 = 300;
        v95 = v97;
        v98 = v100;
        v99 = 0x400000000;
        v101 = v19;
        v102 = xmmword_1C64632D0;
        v96 = 0x400000000;
        v43 = sub_1C4ACBBF0(a1, (uint64_t)&v92, a3);
        v44 = sub_1C4ACB518(a1, 53, v42, v14, 36, a3);
        if (__OFADD__(v43, v44))
          v11 = ((uint64_t)(v43 + v44) >> 63) ^ 0x8000000000000000;
        else
          v11 = v43 + v44;
        if (v98 != v100)
          free(v98);
        v22 = v95;
        if (v95 != v97)
          goto LABEL_24;
        return v11;
      }
      if (v12 == 184)
      {
        v81 = *(_QWORD *)(a2 + 72);
        v82 = *(_QWORD *)(v81 + 8);
        v83 = *(unsigned __int8 *)(*(_QWORD *)(v81 + 16) + 16);
        v84 = (unint64_t *)(v82 + 24);
        if (*(_DWORD *)(v82 + 32) >= 0x41u)
          v84 = (unint64_t *)*v84;
        v55 = v83 > 0x14;
        v85 = *v84;
        v86 = __clz(v85) ^ 0x3F;
        if (v85)
          v59 = v86;
        else
          v59 = 0;
        v60 = a1;
        v61 = 32;
        v58 = *(_QWORD *)(a2 + 8);
        return sub_1C6157BA8(v60, v61, v58, v59, v55, 1, a3);
      }
      goto LABEL_98;
    }
    if (v15 != 19)
    {
      v24 = *(int8x8_t ***)(a2 + 72);
      v25 = *v24;
      v26 = v24[1];
      v27 = v24[2];
      LODWORD(v92) = 0;
      v89 = 0;
      LODWORD(__src) = 0;
      v88 = v25;
      llvm::TargetTransformInfo::getOperandInfo(v25, (const llvm::Value *)&v92);
      llvm::TargetTransformInfo::getOperandInfo(v26, (const llvm::Value *)&__src);
      OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v27, (const llvm::Value *)&v89);
      v29 = (llvm::Type *)v14;
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        v29 = **(llvm::Type ***)(v14 + 16);
      llvm::Type::getPrimitiveSizeInBits(v29);
      sub_1C4ACA7DC(a1, 29);
      v63 = v62;
      sub_1C4ACA7DC(a1, 15);
      if (__OFADD__(v63, v64))
        v65 = ((v63 + v64) >> 63) ^ 0x8000000000000000;
      else
        v65 = v63 + v64;
      sub_1C4ACA7DC(a1, 25);
      if (__OFADD__(v65, v66))
        v67 = ((uint64_t)(v65 + v66) >> 63) ^ 0x8000000000000000;
      else
        v67 = v65 + v66;
      sub_1C4ACA7DC(a1, 26);
      if (__OFADD__(v67, v68))
        v11 = ((uint64_t)(v67 + v68) >> 63) ^ 0x8000000000000000;
      else
        v11 = v67 + v68;
      if ((OperandInfo - 4) <= 0xFFFFFFFD)
      {
        sub_1C4ACA7DC(a1, 22);
        if (__OFADD__(v11, v69))
          v11 = ((uint64_t)(v11 + v69) >> 63) ^ 0x8000000000000000;
        else
          v11 += v69;
      }
      if (v88 != v26)
      {
        v70 = **(_QWORD **)v14 + 1888;
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        {
          v71 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          v72 = (uint64_t **)(**(_QWORD **)v14 + 1888);
          if (*(_DWORD *)(v14 + 8) == 19)
            llvm::ScalableVectorType::get(v72, v71);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v72, v71);
          v70 = v73;
        }
        v74 = sub_1C4ACB518(a1, 53, v14, v70, 32, a3);
        if (__OFADD__(v11, v74))
          v75 = ((uint64_t)(v11 + v74) >> 63) ^ 0x8000000000000000;
        else
          v75 = v11 + v74;
        v76 = sub_1C4ACB518(a1, 57, v14, v70, 32, a3);
        if (__OFADD__(v75, v76))
          return ((uint64_t)(v75 + v76) >> 63) ^ 0x8000000000000000;
        else
          return v75 + v76;
      }
      return v11;
    }
    return sub_1C4846F4C(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      __src = ***(_QWORD ***)(a2 + 72);
      v92 = v18;
      v93 = v14;
      v94 = v12;
      v95 = v97;
      v96 = 0x400000000;
      v98 = v100;
      v99 = 0x400000000;
      v101 = v19;
      v102 = xmmword_1C64169E0;
      v20 = (char *)&v91;
    }
    else
    {
      v31 = *(uint64_t ***)(a2 + 72);
      v33 = *v31;
      v32 = v31[1];
      __src = *v33;
      v91 = *v32;
      v92 = v18;
      v93 = v14;
      v94 = v12;
      v95 = v97;
      v96 = 0x400000000;
      v98 = v100;
      v99 = 0x400000000;
      v101 = v19;
      v102 = xmmword_1C64169E0;
      v20 = (char *)&v92;
    }
    p_src = (char *)&__src;
    goto LABEL_21;
  }
  if (v12 == 194)
    return 4;
  if (v12 == 186)
  {
    v51 = *(_QWORD *)(a2 + 72);
    v52 = *(_QWORD *)(v51 + 16);
    v53 = *(unsigned __int8 *)(*(_QWORD *)(v51 + 24) + 16);
    v54 = (unint64_t *)(v52 + 24);
    if (*(_DWORD *)(v52 + 32) >= 0x41u)
      v54 = (unint64_t *)*v54;
    v55 = v53 > 0x14;
    v56 = *v54;
    v57 = __clz(v56) ^ 0x3F;
    v58 = **(_QWORD **)(a2 + 24);
    if (v56)
      v59 = v57;
    else
      v59 = 0;
    v60 = a1;
    v61 = 33;
    return sub_1C6157BA8(v60, v61, v58, v59, v55, 1, a3);
  }
LABEL_98:
  v50 = 0;
  v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      v11 = 0;
      v77 = 0;
    }
    else
    {
      v77 = sub_1C6152EC8(a1, *(_QWORD *)(a2 + 8), 1, 0);
      v11 = v87 == 1;
      v13 = *(_DWORD *)(a2 + 80);
    }
    v78 = sub_1C4ACD754(a1, *(uint64_t **)(a2 + 72), v13, *(uint64_t **)(a2 + 24));
    if (v79 == 1)
      v11 = 1;
    if (__OFADD__(v77, v78))
      v50 = ((uint64_t)(v77 + v78) >> 63) ^ 0x8000000000000000;
    else
      v50 = v77 + v78;
  }
LABEL_107:
  p_src = *(char **)(a2 + 24);
  v80 = *(unsigned int *)(a2 + 32);
  v92 = v18;
  v93 = v14;
  v94 = v12;
  v95 = v97;
  v96 = 0x400000000;
  v98 = v100;
  v99 = 0x400000000;
  v101 = v19;
  v20 = &p_src[8 * v80];
  *(_QWORD *)&v102 = v50;
  *((_QWORD *)&v102 + 1) = v11;
LABEL_21:
  sub_1C4F7C758((unsigned int *)&v95, (uint64_t)v97, p_src, v20);
  v11 = sub_1C4ACBBF0(a1, (uint64_t)&v92, a3);
  if (v98 != v100)
    free(v98);
  v22 = v95;
  if (v95 != v97)
LABEL_24:
    free(v22);
  return v11;
}

void sub_1C4ACA7DC(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1C4ACA848(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 a20,char a21,uint64_t a22,int a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  llvm::TargetLoweringBase *v51;
  unint64_t v52;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD v67[2];
  unint64_t v68;
  int v69;
  __int128 v70;
  unsigned __int8 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[160];

  if (a4)
  {
    if ((v50 - 19) >= 6)
      return 1;
    else
      return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v51, *(const llvm::DataLayout **)(v46 + 8), (llvm::EVT **)v45, (uint64_t)&v70);
  v54 = *(_DWORD *)(v45 + 8);
  v55 = *(_DWORD *)(v45 + 8) & 0xFE;
  v56 = v54;
  if (v55 == 18)
    v56 = *(unsigned __int8 *)(**(_QWORD **)(v45 + 16) + 8);
  if (v56 >= 7)
    v52 = 1;
  else
    v52 = 2;
  v68 = v52;
  v69 = 0;
  if (v71 && (v71 == 1 || *((_QWORD *)v51 + v71 + 12)))
  {
    v57 = *((unsigned __int8 *)v51 + 390 * v71 + 3960);
    if (v57 <= 1)
    {
      v58 = v70;
LABEL_25:
      v74 = v58;
      sub_1C4848B64((uint64_t)&v74, (uint64_t)&v68);
      return v74;
    }
    if (*((_QWORD *)v51 + v71 + 12))
      v59 = v57 == 2;
    else
      v59 = 1;
    if (!v59)
    {
      v72 = 2;
      v73 = 0;
      v74 = v70;
      sub_1C4848B64((uint64_t)&v74, (uint64_t)&v72);
      v58 = v74;
      goto LABEL_25;
    }
  }
  if (v54 == 19)
    return 0;
  if (v54 == 18)
  {
    v60 = v45;
    if (v55 == 18)
      v60 = **(_QWORD **)(v45 + 16);
    v67[0] = sub_1C4ACA7DC(v46, v50, v60, 0, a5, a6, a7, a8, (uint64_t)v48, v49, v47);
    v67[1] = v61;
    *(_QWORD *)&v74 = v75;
    *((_QWORD *)&v74 + 1) = 0x600000000;
    sub_1C4848C0C((unsigned int *)&v74, v49, v45);
    v62 = sub_1C615820C(v46, v45, v48, v49, (uint64_t *)v74);
    v72 = *(unsigned int *)(v45 + 32);
    v73 = 0;
    sub_1C4848B64((uint64_t)&v72, (uint64_t)v67);
    if (__OFADD__(v62, v72))
      v52 = ((uint64_t)(v62 + v72) >> 63) ^ 0x8000000000000000;
    else
      v52 = v62 + v72;
    if ((_BYTE *)v74 != v75)
      free((void *)v74);
  }
  return v52;
}

void sub_1C4ACAD28()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD34()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD40()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD4C()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD58()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD64()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD70()
{
  JUMPOUT(0x1C4ACA9B8);
}

void sub_1C4ACAD7C()
{
  JUMPOUT(0x1C4ACA9B8);
}

uint64_t sub_1C4ACAD88(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t result;
  llvm::TargetLoweringBase *v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  unsigned __int8 EVT;
  BOOL v31;
  unsigned __int8 v32;
  BOOL v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  _BOOL4 v40;
  llvm::EVT *v41;
  unint64_t v42;
  uint64_t v43;
  llvm::EVT *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  _BOOL4 v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t **v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  llvm::Type *v68;
  uint64_t v69;
  __n128 v70;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89[8];
  __int128 v90;
  unsigned __int8 v91[8];
  _OWORD v92[2];

  v10 = (uint64_t)a4;
  v11 = (uint64_t)a3;
  v14 = (uint64_t *)(a1 + 8);
  v15 = sub_1C4848CBC((uint64_t *)(a1 + 8), a2, a3, a4);
  v17 = v15 < 0;
  if (v16)
    v17 = v16 < 0;
  if (!v17)
  {
    v18 = v16 < 1;
    if (!v16)
      v18 = v15 < 1;
    if (v18)
      return 0;
  }
  v83 = a5;
  v78 = a6;
  v20 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v84 = qword_1C677EE00[(int)a2 - 1];
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v10, (uint64_t)&v90);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v11, (uint64_t)&v87);
  v82 = sub_1C47A8C74(v91);
  v80 = v21;
  v81 = sub_1C47A8C74(v89);
  v79 = v23;
  v24 = *(_DWORD *)(v10 + 8);
  v25 = *(_DWORD *)(v11 + 8);
  switch((int)a2)
  {
    case '&':
      v26 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1160))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v26 & 1) == 0)
        goto LABEL_10;
      return result;
    case '\'':
      v29 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1192))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v29 & 1) == 0)
        goto LABEL_28;
      return result;
    case '(':
LABEL_28:
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 32), a7, v22) & 1) != 0)
        return 0;
      if (v83 == 1)
      {
        EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v22);
        v32 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v31);
        v33 = v87 < (uint64_t)v90;
        if (v88 != DWORD2(v90))
          v33 = v88 < SDWORD2(v90);
        if (!v33)
        {
          v34 = v88 == DWORD2(v90) ? (uint64_t)v90 >= v87 : SDWORD2(v90) >= v88;
          if (v34 && EVT && v32)
          {
            v35 = (_DWORD)a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v35 & *((_WORD *)v20 + 179 * EVT + v32 + 36836)) == 0)
              return 0;
          }
        }
      }
      goto LABEL_47;
    case '.':
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 32), a7, v22) & 1) != 0)
        return 0;
      goto LABEL_47;
    case '1':
LABEL_10:
      v27 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v27 = SDWORD2(v90) < v88;
      if (!v27)
      {
        v28 = DWORD2(v90) == v88 ? v87 < (uint64_t)v90 : v88 < SDWORD2(v90);
        if (!v28 && ((v24 & 0xFD) == 13) == ((v25 & 0xFD) == 13) && v82 == v81 && v80 == v79)
          return 0;
      }
      goto LABEL_47;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v24 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v25 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
      if (((*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD))(*(_QWORD *)v20 + 840))(v20, v24 >> 8, v25 >> 8) & 1) != 0)return 0;
      goto LABEL_47;
    default:
LABEL_47:
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v36 = v10;
      else
        v36 = 0;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v37 = v11;
      else
        v37 = 0;
      result = v90;
      v38 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v38 = SDWORD2(v90) < v88;
      if (!v38)
      {
        v39 = v88 >= SDWORD2(v90);
        if (DWORD2(v90) == v88)
          v39 = v87 >= (uint64_t)v90;
        if (v39
          && v89[0]
          && (v89[0] == 1 || *((_QWORD *)v20 + v89[0] + 12))
          && *((unsigned __int8 *)v20 + 390 * v89[0] + v84 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v36 | v37)
      {
        if (v36 && v37)
        {
          if (!v38)
          {
            v40 = DWORD2(v90) == v88 ? v87 >= (uint64_t)v90 : v88 >= SDWORD2(v90);
            if (v40 && v82 == v81 && v80 == v79)
            {
              if ((_DWORD)a2 == 40)
              {
                v77 = 2;
              }
              else
              {
                if ((_DWORD)a2 == 39)
                  return result;
                if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12) || *((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
                  goto LABEL_79;
                v77 = 1;
              }
              v85 = v77;
              LODWORD(v86) = 0;
              v92[0] = v90;
              sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
              return *(_QWORD *)&v92[0];
            }
          }
LABEL_79:
          v41 = *(llvm::EVT **)v10;
          v42 = sub_1C47A7FD0((uint64_t)v20, *v14, v10, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v41, v42, v43, (uint64_t)v92);
          v44 = *(llvm::EVT **)v11;
          v45 = *v14;
          v46 = LOBYTE(v92[0]);
          v47 = sub_1C47A7FD0((uint64_t)v20, v45, v11, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v44, v47, v48, (uint64_t)v92);
          v50 = LOBYTE(v92[0]);
          if (v46 == 6 || LOBYTE(v92[0]) == 6)
          {
            v51 = *(_DWORD *)(v36 + 32);
            v52 = v51 && *(_BYTE *)(v36 + 8) == 19;
            v53 = v52;
            if (v51 > 1 || v53)
            {
              v54 = *(_DWORD *)(v37 + 32);
              v55 = *(unsigned __int8 *)(v37 + 8);
              v56 = v54 && v55 == 19;
              v57 = v56;
              if (v54 > 1 || v57)
              {
                v63 = *(uint64_t ***)(v37 + 24);
                v64 = (llvm::Type *)(v54 >> 1);
                if (v55 == 19)
                  llvm::ScalableVectorType::get(v63, v64);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v63, v64);
                v66 = v65;
                v67 = *(uint64_t ***)(v36 + 24);
                v68 = (llvm::Type *)(*(_DWORD *)(v36 + 32) >> 1);
                if (*(_BYTE *)(v36 + 8) == 19)
                  v70.n128_f64[0] = llvm::ScalableVectorType::get(v67, v68);
                else
                  v70.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v67, v68);
                v72 = v46 != 6 || v50 != 6;
                v85 = sub_1C4ACAD88(a1, a2, v66, v69, v83, v78, a7, v70);
                v86 = v73;
                *(_QWORD *)&v92[0] = 2;
                DWORD2(v92[0]) = 0;
                sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
                v60 = __OFADD__(v72, *(_QWORD *)&v92[0]);
                v61 = v72 + *(_QWORD *)&v92[0];
                v62 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_110;
              }
            }
          }
          if (*(_BYTE *)(v37 + 8) == 19)
            return 0;
          v74 = *(unsigned int *)(v37 + 32);
          if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
            v11 = **(_QWORD **)(v11 + 16);
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
            v10 = **(_QWORD **)(v10 + 16);
          v85 = sub_1C4ACAD88(a1, a2, v11, v10, v83, v78, a7, v49);
          v86 = v75;
          v76 = sub_1C6152EC8(a1, v37, 1, 1);
          *(_QWORD *)&v92[0] = v74;
          DWORD2(v92[0]) = 0;
          sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
          v60 = __OFADD__(v76, *(_QWORD *)&v92[0]);
          v61 = v76 + *(_QWORD *)&v92[0];
LABEL_109:
          v62 = (v61 >> 63) ^ 0x8000000000000000;
LABEL_110:
          if (v60)
            return v62;
          else
            return v61;
        }
        if (v36)
        {
          v58 = sub_1C6152EC8(a1, v36, 0, 1);
          if (!v37)
            goto LABEL_107;
        }
        else
        {
          v58 = 0;
          if (!v37)
          {
LABEL_107:
            v59 = 0;
LABEL_108:
            v60 = __OFADD__(v58, v59);
            v61 = v58 + v59;
            goto LABEL_109;
          }
        }
        v59 = sub_1C6152EC8(a1, v37, 1, 0);
        goto LABEL_108;
      }
      if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12))
        return 4;
      if (*((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
        return 4;
      return 1;
  }
}

uint64_t sub_1C4ACB518(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a6)
    __asm { BR              X10 }
  return 1;
}

void sub_1C4ACB7F0()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB7F8()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB800()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB808()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB810()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB818()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB820()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB828()
{
  JUMPOUT(0x1C4ACB688);
}

void sub_1C4ACB830(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  if (a5)
  {
    v5 = 4 * a5;
    while (*a4 < 2 * (int)a5)
    {
      ++a4;
      v5 -= 4;
      if (!v5)
        __asm { BR              X10 }
    }
  }
  __asm { BR              X10 }
}

unint64_t sub_1C4ACBA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  llvm::EVT **v15;
  unint64_t v16;
  llvm::EVT **v17;

  v13 = *(_DWORD *)(v12 + 32);
  if (!v13)
    return 0;
  v14 = 0;
  do
  {
    v15 = (llvm::EVT **)v12;
    if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      v15 = **(llvm::EVT ****)(v12 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v11 + 32), *(const llvm::DataLayout **)(v11 + 8), v15, (uint64_t)&a10);
    if (__OFADD__(v14, a10))
      v16 = ((uint64_t)(v14 + a10) >> 63) ^ 0x8000000000000000;
    else
      v16 = v14 + a10;
    v17 = (llvm::EVT **)v10;
    if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
      v17 = **(llvm::EVT ****)(v10 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v11 + 32), *(const llvm::DataLayout **)(v11 + 8), v17, (uint64_t)&a10);
    if (__OFADD__(v16, a10))
      v14 = ((uint64_t)(v16 + a10) >> 63) ^ 0x8000000000000000;
    else
      v14 = v16 + a10;
    --v13;
  }
  while (v13);
  return v14;
}

unint64_t sub_1C4ACBB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  llvm::EVT **v15;
  unint64_t v16;
  llvm::EVT **v17;

  v13 = *(_DWORD *)(v12 + 32);
  if (!v13)
    return 0;
  v14 = 0;
  do
  {
    v15 = (llvm::EVT **)v10;
    if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
      v15 = **(llvm::EVT ****)(v10 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v11 + 32), *(const llvm::DataLayout **)(v11 + 8), v15, (uint64_t)&a10);
    if (__OFADD__(v14, a10))
      v16 = ((uint64_t)(v14 + a10) >> 63) ^ 0x8000000000000000;
    else
      v16 = v14 + a10;
    v17 = (llvm::EVT **)v12;
    if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      v17 = **(llvm::EVT ****)(v12 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v11 + 32), *(const llvm::DataLayout **)(v11 + 8), v17, (uint64_t)&a10);
    if (__OFADD__(v16, a10))
      v14 = ((uint64_t)(v16 + a10) >> 63) ^ 0x8000000000000000;
    else
      v14 = v16 + a10;
    --v13;
  }
  while (v13);
  return v14;
}

unint64_t sub_1C4ACBBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  llvm::FixedVectorType **v12;
  llvm::FixedVectorType **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t **v39;
  int v40;
  int v41;
  char *v42;
  llvm::Type *v43;
  uint64_t v44;
  uint64_t **v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  llvm::Type *v49;
  uint64_t v50;
  int v51;
  llvm::Type **v52;
  int v53;
  unint64_t v54;
  llvm::Type *v55;
  int v56;
  uint64_t v57;
  llvm::EVT *v58;
  int v59;
  unint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  llvm::Type *v74;
  uint64_t **v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  llvm::Type *v83;
  uint64_t **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  llvm::TargetLoweringBase *v97;
  int v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t *v101;
  _BOOL4 v102;
  BOOL v104;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  _BOOL4 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  llvm::Type *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  llvm::Type *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  unsigned __int8 v232;
  _DWORD *v233;
  _DWORD *v234;
  int v235;
  _DWORD *v236;
  _DWORD *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unsigned int v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  int v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD v258[2];
  __int128 v259;
  unsigned __int8 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t __src;
  uint64_t v264;
  int v265;
  void *v266[2];
  _BYTE v267[32];
  void *v268;
  uint64_t v269;
  _DWORD v270[10];
  __int128 v271;
  void *v272;
  uint64_t v273;
  _BYTE v274[32];
  void *v275;
  uint64_t v276;
  _BYTE v277[32];
  __int128 v278;
  int v279;
  void *v280;
  uint64_t v281;
  _BYTE v282[32];
  void *v283;
  uint64_t v284;
  _BYTE v285[32];
  int v286;
  __int128 v287;
  int *v288;
  uint64_t v289;
  int v290;
  uint64_t v291;

  v3 = a3;
  v4 = a1;
  v291 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v256 = *(_QWORD *)(a2 + 136);
  v9 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v9)
  {
    v10 = v5 == 319 || v5 == 322;
    v11 = v10;
    v12 = *(llvm::FixedVectorType ***)(*(_QWORD *)(a2 + 24) + 8 * v11);
    if (((_DWORD)v12[1] & 0xFE) == 0x12)
      v13 = v12;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  if ((_DWORD)a3 == 2)
    v15 = 1;
  else
    v15 = 10;
  v288 = &v290;
  v289 = 0x200000000;
  v255 = v256;
  if (v5 <= 186)
  {
    if (v5 > 75)
    {
      if (v5 > 166)
      {
        switch(v5)
        {
          case 167:
          case 168:
            goto LABEL_316;
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
            goto LABEL_320;
          case 175:
            v16 = 230;
            goto LABEL_131;
          case 176:
            v16 = 232;
            goto LABEL_131;
          case 177:
            v16 = 231;
            goto LABEL_131;
          default:
            if (v5 != 185)
              goto LABEL_320;
            llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v6);
            v168 = v232;
            v169 = v4;
            v170 = 32;
            v171 = v6;
            v172 = v3;
            goto LABEL_388;
        }
      }
      switch(v5)
      {
        case 139:
          v16 = 223;
          break;
        case 140:
          v16 = 241;
          break;
        case 141:
          goto LABEL_320;
        case 142:
        case 143:
          v16 = 141;
          break;
        default:
          if (v5 == 76)
          {
            v16 = 234;
          }
          else
          {
            if (v5 != 90)
              goto LABEL_320;
            v16 = 106;
          }
          break;
      }
    }
    else
    {
      if (v5 <= 50)
      {
        switch(v5)
        {
          case 5:
            goto LABEL_316;
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
            goto LABEL_320;
          case 8:
            v16 = 186;
            goto LABEL_131;
          case 9:
            v16 = 182;
            goto LABEL_131;
          case 13:
            v16 = 145;
            goto LABEL_131;
          case 14:
            v16 = 235;
            goto LABEL_131;
          case 19:
            v16 = 143;
            goto LABEL_131;
          default:
            if (v5 != 1)
              goto LABEL_320;
            v82 = **(_QWORD **)v6 + 1888;
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              v83 = (llvm::Type *)*(unsigned int *)(v6 + 32);
              v84 = (uint64_t **)(**(_QWORD **)v6 + 1888);
              if (*(_DWORD *)(v6 + 8) == 19)
                llvm::ScalableVectorType::get(v84, v83);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v84, v83);
              v82 = v85;
            }
            v86 = sub_1C4ACB518(v4, 53, v6, v82, 38, v3);
            v87 = sub_1C4ACB518(v4, 57, v6, v82, 38, v3);
            if (__OFADD__(v86, v87))
              v88 = ((v86 + v87) >> 63) ^ 0x8000000000000000;
            else
              v88 = v86 + v87;
            sub_1C4ACA7DC(v4, 15);
            v37 = __OFADD__(v88, v89);
            v38 = v88 + v89;
            goto LABEL_313;
        }
      }
      switch(v5)
      {
        case '3':
          v16 = 227;
          break;
        case '4':
          v16 = 184;
          break;
        case '5':
          v15 = 4;
          v16 = 185;
          break;
        case '6':
          v16 = 183;
          break;
        default:
          if (v5 != 75)
            goto LABEL_320;
          v16 = 233;
          break;
      }
    }
LABEL_131:
    v247 = v15;
    v254 = a2;
    v246 = v7;
    v290 = v16;
    LODWORD(v289) = 1;
    v97 = *(llvm::TargetLoweringBase **)(a1 + 32);
    llvm::TargetLoweringBase::getTypeLegalizationCost(v97, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v6, (uint64_t)&v259);
    v275 = v277;
    v276 = 0x200000000;
    v272 = v274;
    v273 = 0x200000000;
    if (!(_DWORD)v289)
      goto LABEL_191;
    v252 = v8;
    v250 = v3;
    v98 = v5;
    v99 = (unsigned int *)v288;
    v100 = v260;
    v101 = (uint64_t *)((char *)v97 + 8 * v260 + 96);
    if (DWORD2(v259))
      v102 = SDWORD2(v259) > 0;
    else
      v102 = (uint64_t)v259 > 1;
    v104 = (v260 - 8) >= 7u
        && (v260 - 75) >= 0x2Du
        && (v260 + 104) >= 0x13u;
    v248 = v98;
    v106 = !v104 && v98 == 139;
    v107 = 4 * v289;
    while (!(_DWORD)v100)
    {
LABEL_172:
      ++v99;
      v107 -= 4;
      if (!v107)
      {
        v115 = (unint64_t *)v275;
        if (v276 >= 2)
        {
          v116 = (char *)v275 + 16;
          v117 = *(_QWORD *)v275;
          v118 = 16 * v276 - 16;
          v3 = v250;
          v5 = v248;
          v8 = v252;
          do
          {
            v119 = *((_DWORD *)v116 + 2);
            v120 = *((_DWORD *)v115 + 2);
            v10 = v119 == v120;
            v121 = v119 < v120;
            if (v10)
              v121 = *(_QWORD *)v116 < v117;
            if (v121)
            {
              v117 = *(_QWORD *)v116;
              v115 = (unint64_t *)v116;
            }
            v116 += 16;
            v118 -= 16;
          }
          while (v118);
        }
        else
        {
          v3 = v250;
          v5 = v248;
          v8 = v252;
        }
        if (v115 != (unint64_t *)((char *)v275 + 16 * v276))
          goto LABEL_190;
        v115 = (unint64_t *)v272;
        if (v273 >= 2)
        {
          v122 = (char *)v272 + 16;
          v123 = *(_QWORD *)v272;
          v124 = 16 * v273 - 16;
          do
          {
            v125 = *((_DWORD *)v122 + 2);
            v126 = *((_DWORD *)v115 + 2);
            v10 = v125 == v126;
            v127 = v125 < v126;
            if (v10)
              v127 = *(_QWORD *)v122 < v123;
            if (v127)
            {
              v123 = *(_QWORD *)v122;
              v115 = (unint64_t *)v122;
            }
            v122 += 16;
            v124 -= 16;
          }
          while (v124);
        }
        if (v115 != (unint64_t *)((char *)v272 + 16 * v273))
        {
LABEL_190:
          v14 = *v115;
          goto LABEL_260;
        }
LABEL_191:
        if (v5 == 90)
        {
          v132 = *(char **)(v254 + 24);
          v133 = *(unsigned int *)(v254 + 32);
          *(_QWORD *)&v278 = 0;
          *((_QWORD *)&v278 + 1) = v6;
          v279 = 89;
          v280 = v282;
          v281 = 0x400000000;
          v283 = v285;
          v284 = 0x400000000;
          v286 = 0;
          v287 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, v132, &v132[8 * v133]);
          v134 = *(char **)(v254 + 24);
          v135 = *(unsigned int *)(v254 + 32);
          __src = 0;
          v264 = v6;
          v265 = 83;
          v266[0] = v267;
          v266[1] = (void *)0x400000000;
          v268 = v270;
          v269 = 0x400000000;
          v270[8] = 0;
          v271 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)v266, (uint64_t)v267, v134, &v134[8 * v135]);
          v136 = sub_1C4AC9E98(v4, &v278, v3);
          v137 = sub_1C4AC9E98(v4, &__src, v3);
          if (__OFADD__(v136, v137))
            v14 = ((v136 + v137) >> 63) ^ 0x8000000000000000;
          else
            v14 = v136 + v137;
          if (v268 != v270)
            free(v268);
          if (v266[0] != v267)
            free(v266[0]);
          if (v283 != v285)
            free(v283);
          v138 = (char *)v280;
          if (v280 == v282)
            goto LABEL_260;
        }
        else
        {
          v128 = v254;
          if (v5 == 143)
          {
            sub_1C4ACA7DC(v4, 18);
            v130 = v129;
            sub_1C4ACA7DC(v4, 14);
            if (__OFADD__(v130, v131))
              v14 = ((v130 + v131) >> 63) ^ 0x8000000000000000;
            else
              v14 = v130 + v131;
            goto LABEL_260;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12 || !v6)
          {
            v14 = v247;
            goto LABEL_260;
          }
          if (*(_DWORD *)(v6 + 8) == 19)
          {
            v14 = 0;
            goto LABEL_260;
          }
          v139 = *(unsigned int *)(v254 + 32);
          if ((_DWORD)v139)
          {
            v140 = *(_QWORD *)(v254 + 24);
            v141 = 8 * v139;
            while (*(_BYTE *)(*(_QWORD *)v140 + 8) != 19)
            {
              v140 += 8;
              v141 -= 8;
              if (!v141)
                goto LABEL_217;
            }
            v14 = 0;
LABEL_260:
            if (v272 != v274)
              free(v272);
            v81 = v275;
            if (v275 != v277)
LABEL_263:
              free(v81);
            goto LABEL_316;
          }
LABEL_217:
          if ((_DWORD)v256)
          {
            v8 = sub_1C6152EC8(v4, v6, 1, 0);
            v256 = v231;
            v128 = v254;
            LODWORD(v139) = *(_DWORD *)(v254 + 32);
          }
          v253 = v8;
          v142 = v5;
          v143 = *(_DWORD *)(v6 + 32);
          __src = (uint64_t)&v265;
          v264 = 0x400000000;
          if ((_DWORD)v139)
          {
            v144 = v6;
            v145 = v3;
            v146 = v4;
            v147 = 0;
            LODWORD(v148) = 0;
            v149 = 8 * v139;
            do
            {
              v150 = *(_QWORD *)(*(_QWORD *)(v128 + 24) + v147);
              if ((*(_DWORD *)(v150 + 8) & 0xFE) == 0x12)
                v150 = **(_QWORD **)(v150 + 16);
              if (v148 >= HIDWORD(v264))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v265, v148 + 1, 8);
                v128 = v254;
                LODWORD(v148) = v264;
              }
              *(_QWORD *)(__src + 8 * v148) = v150;
              v148 = (v264 + 1);
              LODWORD(v264) = v264 + 1;
              v147 += 8;
            }
            while (v149 != v147);
            v4 = v146;
            v3 = v145;
            v6 = v144;
          }
          else
          {
            v148 = 0;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            v6 = **(_QWORD **)(v6 + 16);
          *(_QWORD *)&v278 = 0;
          *((_QWORD *)&v278 + 1) = v6;
          v279 = v142;
          v280 = v282;
          v281 = 0x400000000;
          v283 = v285;
          v284 = 0x400000000;
          v286 = v246;
          v287 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, (char *)__src, (char *)(__src + 8 * v148));
          v258[0] = sub_1C4AC9E98(v4, &v278, v3);
          v258[1] = v151;
          v152 = v254;
          v153 = *(unsigned int *)(v254 + 32);
          if ((_DWORD)v153)
          {
            v154 = v4;
            v155 = 0;
            v156 = 8 * v153;
            do
            {
              v157 = *(_QWORD *)(*(_QWORD *)(v152 + 24) + v155);
              if (v157)
                v158 = (*(_DWORD *)(v157 + 8) & 0xFE) == 18;
              else
                v158 = 0;
              if (v158)
              {
                if (*(_DWORD *)(v152 + 136))
                {
                  v159 = sub_1C6152EC8(v154, *(_QWORD *)(*(_QWORD *)(v152 + 24) + v155), 0, 1);
                  v160 = v256;
                  if (v161 == 1)
                    v160 = 1;
                  v256 = v160;
                  v152 = v254;
                  v162 = v253 + v159;
                  if (__OFADD__(v253, v159))
                    v162 = ((uint64_t)(v253 + v159) >> 63) ^ 0x8000000000000000;
                  v253 = v162;
                }
                if (v143 <= *(_DWORD *)(v157 + 32))
                  v143 = *(_DWORD *)(v157 + 32);
              }
              v155 += 8;
            }
            while (v156 != v155);
          }
          v261 = v143;
          LODWORD(v262) = 0;
          sub_1C4848B64((uint64_t)&v261, (uint64_t)v258);
          if (__OFADD__(v261, v253))
            v14 = ((uint64_t)(v261 + v253) >> 63) ^ 0x8000000000000000;
          else
            v14 = v261 + v253;
          if (v283 != v285)
            free(v283);
          if (v280 != v282)
            free(v280);
          v138 = (char *)__src;
          if ((int *)__src == &v265)
            goto LABEL_260;
        }
        free(v138);
        goto LABEL_260;
      }
    }
    v108 = *v99;
    if ((_DWORD)v100 == 1)
    {
      if (v108 > 0x185)
      {
LABEL_161:
        v109 = *v101;
        goto LABEL_162;
      }
    }
    else
    {
      v109 = *v101;
      if (v108 > 0x185 || v109 == 0)
      {
LABEL_162:
        if (v109 && (v108 > 0x185 || *((_BYTE *)v97 + 390 * v100 + v108 + 3862) != 2))
        {
          __src = 2;
          LODWORD(v264) = 0;
          v278 = v259;
          sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
          v111 = v278;
          v112 = v273;
          if (v273 >= (unint64_t)HIDWORD(v273))
          {
            v244 = v278;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 16);
            v111 = v244;
            v112 = v273;
          }
          *((_OWORD *)v272 + v112) = v111;
          LODWORD(v273) = v273 + 1;
        }
        goto LABEL_172;
      }
    }
    if (*((unsigned __int8 *)v97 + 390 * v100 + v108 + 3862) <= 1u)
    {
      if (v106
        && ((*(uint64_t (**)(llvm::TargetLoweringBase *, uint64_t, _QWORD))(*(_QWORD *)v97 + 1328))(v97, v100, 0) & 1) != 0)
      {
        v14 = 0;
        goto LABEL_260;
      }
      if (v102)
        __src = 2;
      else
        __src = 1;
      LODWORD(v264) = 0;
      v278 = v259;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v113 = v278;
      v114 = v276;
      if (v276 >= (unint64_t)HIDWORD(v276))
      {
        v245 = v278;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
        v113 = v245;
        v114 = v276;
      }
      *((_OWORD *)v275 + v114) = v113;
      LODWORD(v276) = v276 + 1;
      goto LABEL_172;
    }
    goto LABEL_161;
  }
  v16 = 224;
  switch(v5)
  {
    case 238:
      v16 = 229;
      goto LABEL_131;
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 261:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 277:
    case 279:
    case 281:
    case 282:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 302:
    case 303:
    case 304:
    case 308:
    case 310:
    case 313:
    case 314:
    case 315:
    case 316:
LABEL_320:
      v201 = *(unsigned __int8 *)(v6 + 8);
      if (v201 == 19)
      {
        v14 = 0;
        goto LABEL_316;
      }
      v202 = v256;
      if (!(_DWORD)v9)
        goto LABEL_326;
      v203 = *(_QWORD *)(a2 + 24);
      v204 = 8 * v9;
      break;
    case 244:
    case 272:
      goto LABEL_316;
    case 258:
      v16 = 237;
      goto LABEL_131;
    case 259:
      v16 = 239;
      goto LABEL_131;
    case 260:
      v16 = 240;
      goto LABEL_131;
    case 262:
    case 283:
      v39 = (uint64_t **)(**(_QWORD **)v6 + 1888);
      v40 = *(_DWORD *)(v6 + 8);
      v41 = v7;
      if ((v40 & 0xFE) == 0x12)
      {
        v42 = (char *)v6;
        v43 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v44 = a1;
        if (v40 == 19)
          llvm::ScalableVectorType::get(v39, v43);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v39, v43);
        v39 = v45;
      }
      else
      {
        v42 = (char *)v6;
        v44 = a1;
      }
      *(_QWORD *)&v278 = v42;
      *((_QWORD *)&v278 + 1) = v39;
      v90 = llvm::StructType::create((_QWORD **)&v278, 2);
      if (v5 == 262)
        v91 = 263;
      else
        v91 = 284;
      __src = (uint64_t)v42;
      v264 = (uint64_t)v42;
      *(_QWORD *)&v278 = 0;
      *((_QWORD *)&v278 + 1) = v90;
      v279 = v91;
      v280 = v282;
      v281 = 0x400000000;
      v283 = v285;
      v284 = 0x400000000;
      v286 = v41;
      *(_QWORD *)&v287 = v8;
      *((_QWORD *)&v287 + 1) = v256;
      sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, (char *)&__src, (char *)&v265);
      v92 = sub_1C4AC9E98(v44, &v278, v3);
      v93 = sub_1C4ACB518(v44, 53, (uint64_t)v42, (uint64_t)v39, 38, v3);
      v94 = v3;
      if (__OFADD__(v92, v93))
        v95 = ((v92 + v93) >> 63) ^ 0x8000000000000000;
      else
        v95 = v92 + v93;
      v275 = (void *)sub_1C4ACB518(v44, 57, (uint64_t)v42, (uint64_t)v39, 38, v94);
      v276 = v96;
      __src = 2;
      LODWORD(v264) = 0;
      sub_1C4848B64((uint64_t)&__src, (uint64_t)&v275);
      if (__OFADD__(v95, __src))
        v14 = ((uint64_t)(v95 + __src) >> 63) ^ 0x8000000000000000;
      else
        v14 = v95 + __src;
      if (v283 != v285)
        free(v283);
      v81 = v280;
      if (v280 != v282)
        goto LABEL_263;
      goto LABEL_316;
    case 263:
    case 284:
      v61 = *(uint64_t **)(v6 + 16);
      v62 = a3;
      v64 = *v61;
      v63 = v61[1];
      if (v5 == 263)
        v65 = 13;
      else
        v65 = 15;
      sub_1C4ACA7DC(a1, v65);
      v67 = v66;
      __src = sub_1C4ACB518(v4, 53, v64, v63, 38, v62);
      v264 = v68;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v69 = v4;
      if (__OFADD__(v67, (_QWORD)v278))
        v70 = ((v67 + (uint64_t)v278) >> 63) ^ 0x8000000000000000;
      else
        v70 = v67 + v278;
      sub_1C4ACA7DC(v69, 30);
      goto LABEL_290;
    case 273:
      v16 = 226;
      goto LABEL_131;
    case 274:
    case 275:
    case 305:
    case 306:
      v17 = **(_QWORD **)v6 + 1888;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v18 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v19 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v19, v18);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v18);
        v17 = v20;
      }
      if ((v5 - 305) >= 2)
        v21 = 38;
      else
        v21 = 34;
      v22 = sub_1C4ACB518(v4, 53, v6, v17, v21, v3);
      v23 = v4;
      v24 = 57;
      v25 = v6;
      v26 = v17;
      v27 = v21;
      v28 = v3;
      goto LABEL_48;
    case 276:
    case 307:
      v55 = (llvm::Type *)v6;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        v55 = **(llvm::Type ***)(v6 + 16);
      v56 = 2 * llvm::Type::getPrimitiveSizeInBits(v55);
      v57 = v6;
      v58 = *(llvm::EVT **)v6;
      LODWORD(v278) = v56;
      v59 = v5;
      if (v56 <= 63)
      {
        switch(v56)
        {
          case 32:
            v60 = *(_QWORD *)v58 + 1960;
            goto LABEL_293;
          case 16:
            v60 = *(_QWORD *)v58 + 1936;
            goto LABEL_293;
          case 8:
            v60 = *(_QWORD *)v58 + 1912;
            goto LABEL_293;
        }
      }
      else
      {
        if (v56 == 64)
        {
          v60 = *(_QWORD *)v58 + 1984;
          goto LABEL_293;
        }
        if (v56 == 128)
        {
          v60 = *(_QWORD *)v58 + 2008;
          goto LABEL_293;
        }
      }
      v236 = sub_1C5270984(*(_QWORD *)v58 + 2168, &v278);
      v60 = *((_QWORD *)v236 + 1);
      if (!v60)
      {
        v237 = v236;
        v60 = sub_1C484358C(*(_QWORD *)v58 + 2040, 24, 3);
        v238 = v278;
        *(_QWORD *)v60 = v58;
        *(_QWORD *)(v60 + 16) = 0;
        *(_QWORD *)(v60 + 8) = (v238 << 8) | 0xDu;
        *((_QWORD *)v237 + 1) = v60;
      }
LABEL_293:
      if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
      {
        v185 = (llvm::Type *)*(unsigned int *)(v57 + 32);
        if (*(_DWORD *)(v57 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v60, v185);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v60, v185);
        v60 = v186;
      }
      if (v59 == 276)
        v187 = 40;
      else
        v187 = 39;
      __src = sub_1C4ACAD88(v4, v187, (llvm::Type ***)v60, (llvm::Type ***)v57, 0, v3, 0);
      v264 = v188;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v189 = v3;
      v190 = v278;
      sub_1C4ACA7DC(v4, 17);
      if (__OFADD__(v190, v191))
        v192 = ((v190 + v191) >> 63) ^ 0x8000000000000000;
      else
        v192 = v190 + v191;
      __src = sub_1C4ACAD88(v4, 38, (llvm::Type ***)v57, (llvm::Type ***)v60, 0, v189, 0);
      v264 = v193;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      if (__OFADD__(v192, (_QWORD)v278))
        v194 = ((uint64_t)(v192 + v278) >> 63) ^ 0x8000000000000000;
      else
        v194 = v192 + v278;
      sub_1C4ACA7DC(v4, 26);
      if (__OFADD__(v194, v195))
        v196 = ((uint64_t)(v194 + v195) >> 63) ^ 0x8000000000000000;
      else
        v196 = v194 + v195;
      sub_1C4ACA7DC(v4, 25);
      if (__OFADD__(v196, v197))
        v198 = ((uint64_t)(v196 + v197) >> 63) ^ 0x8000000000000000;
      else
        v198 = v196 + v197;
      sub_1C4ACA7DC(v4, 29);
      v37 = __OFADD__(v198, v199);
      v38 = v198 + v199;
      goto LABEL_313;
    case 278:
    case 309:
      v46 = a3;
      v47 = *(uint64_t **)(v6 + 16);
      v48 = *v47;
      v49 = (llvm::Type *)*v47;
      if ((*(_DWORD *)(*v47 + 8) & 0xFE) == 0x12)
        v49 = **(llvm::Type ***)(v48 + 16);
      v50 = v47[1];
      v51 = 2 * llvm::Type::getPrimitiveSizeInBits(v49);
      v52 = *(llvm::Type ***)v48;
      LODWORD(v278) = v51;
      v257 = v50;
      v53 = v5;
      if (v51 <= 63)
      {
        switch(v51)
        {
          case 32:
            v54 = (unint64_t)*v52 + 1960;
            goto LABEL_269;
          case 16:
            v54 = (unint64_t)*v52 + 1936;
            goto LABEL_269;
          case 8:
            v54 = (unint64_t)*v52 + 1912;
            goto LABEL_269;
        }
      }
      else
      {
        if (v51 == 64)
        {
          v54 = (unint64_t)*v52 + 1984;
          goto LABEL_269;
        }
        if (v51 == 128)
        {
          v54 = (unint64_t)*v52 + 2008;
          goto LABEL_269;
        }
      }
      v233 = sub_1C5270984((uint64_t)*v52 + 2168, &v278);
      v54 = *((_QWORD *)v233 + 1);
      if (!v54)
      {
        v234 = v233;
        v54 = sub_1C484358C((uint64_t)*v52 + 2040, 24, 3);
        v235 = v278;
        *(_QWORD *)v54 = v52;
        *(_QWORD *)(v54 + 16) = 0;
        *(_QWORD *)(v54 + 8) = (v235 << 8) | 0xDu;
        *((_QWORD *)v234 + 1) = v54;
      }
LABEL_269:
      if ((*(_DWORD *)(v48 + 8) & 0xFE) == 0x12)
      {
        v173 = (llvm::Type *)*(unsigned int *)(v48 + 32);
        if (*(_DWORD *)(v48 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v54, v173);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v54, v173);
        v54 = v174;
      }
      if (v53 == 278)
        v175 = 40;
      else
        v175 = 39;
      __src = sub_1C4ACAD88(v4, v175, (llvm::Type ***)v54, (llvm::Type ***)v48, 0, v46, 0);
      v264 = v176;
      v177 = v4;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      v178 = v278;
      sub_1C4ACA7DC(v4, 17);
      if (__OFADD__(v178, v179))
        v180 = ((v178 + v179) >> 63) ^ 0x8000000000000000;
      else
        v180 = v178 + v179;
      __src = sub_1C4ACAD88(v4, 38, (llvm::Type ***)v48, (llvm::Type ***)v54, 0, v46, 0);
      v264 = v181;
      *(_QWORD *)&v278 = 2;
      DWORD2(v278) = 0;
      sub_1C4848B64((uint64_t)&v278, (uint64_t)&__src);
      if (__OFADD__(v180, (_QWORD)v278))
        v182 = ((uint64_t)(v180 + v278) >> 63) ^ 0x8000000000000000;
      else
        v182 = v180 + v278;
      sub_1C4ACA7DC(v4, 26);
      if (__OFADD__(v182, v183))
        v70 = ((uint64_t)(v182 + v183) >> 63) ^ 0x8000000000000000;
      else
        v70 = v182 + v183;
      if (v53 == 278)
      {
        sub_1C4ACA7DC(v177, 27);
        if (__OFADD__(v70, v184))
          v70 = ((uint64_t)(v70 + v184) >> 63) ^ 0x8000000000000000;
        else
          v70 += v184;
      }
      v71 = sub_1C4ACB518(v177, 53, v48, v257, 33, v46);
LABEL_290:
      v37 = __OFADD__(v70, v71);
      v38 = v70 + v71;
LABEL_313:
      if (v37)
        v14 = (v38 >> 63) ^ 0x8000000000000000;
      else
        v14 = v38;
      goto LABEL_316;
    case 280:
      goto LABEL_131;
    case 296:
      v16 = 236;
      goto LABEL_131;
    case 300:
    case 311:
      v72 = **(_QWORD **)v6 + 1888;
      v73 = v7;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v74 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v75 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v75, v74);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v75, v74);
        v72 = v76;
      }
      *(_QWORD *)&v278 = v6;
      *((_QWORD *)&v278 + 1) = v72;
      v77 = llvm::StructType::create((_QWORD **)&v278, 2);
      if (v5 == 300)
        v78 = 301;
      else
        v78 = 312;
      __src = v6;
      v264 = v6;
      *(_QWORD *)&v278 = 0;
      *((_QWORD *)&v278 + 1) = v77;
      v279 = v78;
      v280 = v282;
      v281 = 0x400000000;
      v283 = v285;
      v284 = 0x400000000;
      v286 = v73;
      *(_QWORD *)&v287 = v8;
      *((_QWORD *)&v287 + 1) = v256;
      sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, (char *)&__src, (char *)&v265);
      v79 = sub_1C4AC9E98(v4, &v278, v3);
      v80 = sub_1C4ACB518(v4, 57, v6, v72, 42, v3);
      if (__OFADD__(v79, v80))
        v14 = ((v79 + v80) >> 63) ^ 0x8000000000000000;
      else
        v14 = v79 + v80;
      if (v283 != v285)
        free(v283);
      v81 = v280;
      if (v280 != v282)
        goto LABEL_263;
      goto LABEL_316;
    case 301:
    case 312:
      v29 = *(uint64_t **)(v6 + 16);
      v30 = a3;
      v31 = *v29;
      v32 = v29[1];
      if (v5 == 301)
        v33 = 13;
      else
        v33 = 15;
      if (v5 == 301)
        v34 = 36;
      else
        v34 = 34;
      sub_1C4ACA7DC(a1, v33);
      v22 = v35;
      v23 = v4;
      v24 = 53;
      v25 = v31;
      v26 = v32;
      v27 = v34;
      v28 = v30;
LABEL_48:
      v36 = sub_1C4ACB518(v23, v24, v25, v26, v27, v28);
      v37 = __OFADD__(v22, v36);
      v38 = v22 + v36;
      goto LABEL_313;
    case 317:
      v230 = 13;
      goto LABEL_386;
    case 318:
      v230 = 28;
      goto LABEL_386;
    case 319:
      v228 = v7 | 0x100000000;
      v229 = 14;
      goto LABEL_380;
    case 320:
    case 321:
    case 325:
    case 326:
    case 327:
    case 328:
      sub_1C4774CC4(v13);
      v164 = sub_1C6157804(v4, v13, v163, v3);
      goto LABEL_389;
    case 322:
      v228 = v7 | 0x100000000;
      v229 = 18;
LABEL_380:
      v164 = sub_1C61577E8(a1, v229, (uint64_t)v13, v228, a3);
      goto LABEL_389;
    case 323:
      v230 = 17;
      goto LABEL_386;
    case 324:
      v230 = 29;
      goto LABEL_386;
    case 329:
      v230 = 30;
LABEL_386:
      v164 = sub_1C6157E8C(a1, v230, v13, a3);
      goto LABEL_389;
    default:
      switch(v5)
      {
        case 192:
          v16 = 251;
          goto LABEL_131;
        case 193:
          v16 = 247;
          goto LABEL_131;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_320;
        case 201:
          v16 = 250;
          goto LABEL_131;
        case 202:
          v16 = 246;
          goto LABEL_131;
        case 203:
          v16 = 238;
          goto LABEL_131;
        default:
          if (v5 != 187)
            goto LABEL_320;
          v165 = a3;
          v166 = **(_QWORD **)(a2 + 24);
          llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v166);
          v168 = v167;
          v169 = v4;
          v170 = 33;
          v171 = v166;
          v172 = v165;
LABEL_388:
          v164 = sub_1C6157BA8(v169, v170, v171, v168, 1, 0, v172);
          break;
      }
LABEL_389:
      v14 = v164;
      goto LABEL_316;
  }
  do
  {
    if (*(_BYTE *)(*(_QWORD *)v203 + 8) == 19)
    {
      v14 = 0;
      goto LABEL_316;
    }
    v203 += 8;
    v204 -= 8;
  }
  while (v204);
LABEL_326:
  v205 = v8;
  if ((_DWORD)v256)
    v206 = 0;
  else
    v206 = v8;
  v207 = v256;
  if ((_DWORD)v256)
    v207 = 0;
  v208 = 1;
  if ((v201 & 0xFE) == 0x12 && v6)
  {
    if ((_DWORD)v256)
    {
      v239 = v7;
      v240 = a2;
      v241 = sub_1C6152EC8(a1, v6, 1, 0);
      v202 = v256;
      v205 = v241;
      v7 = v239;
      v243 = v242;
      a2 = v240;
      v256 = v243;
      v201 = *(_DWORD *)(v6 + 8);
    }
    if (*(_DWORD *)(v6 + 32) <= 1u)
      v208 = 1;
    else
      v208 = *(_DWORD *)(v6 + 32);
    v209 = v5;
    if ((v201 & 0xFE) == 0x12)
      v6 = **(_QWORD **)(v6 + 16);
  }
  else
  {
    v209 = v5;
    v205 = v206;
    v256 = v207;
  }
  __src = (uint64_t)&v265;
  v264 = 0x400000000;
  v210 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v210)
  {
    v249 = v6;
    v251 = v3;
    v211 = v4;
    v212 = 0;
    v213 = 8 * v210;
    do
    {
      v214 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + v212);
      v215 = *(_DWORD *)(v214 + 8);
      if (v214)
        v216 = (*(_DWORD *)(v214 + 8) & 0xFE) == 18;
      else
        v216 = 0;
      if (v216)
      {
        if (v202)
        {
          v219 = v7;
          v220 = a2;
          v221 = sub_1C6152EC8(v211, *(_QWORD *)(*(_QWORD *)(a2 + 24) + v212), 0, 1);
          v202 = v255;
          v222 = v256;
          v10 = v223 == 1;
          a2 = v220;
          if (v10)
            v222 = 1;
          v256 = v222;
          v7 = v219;
          if (__OFADD__(v205, v221))
            v205 = ((uint64_t)(v205 + v221) >> 63) ^ 0x8000000000000000;
          else
            v205 += v221;
          v215 = *(_DWORD *)(v214 + 8);
        }
        if (v208 <= *(_DWORD *)(v214 + 32))
          v208 = *(_DWORD *)(v214 + 32);
        if ((v215 & 0xFE) == 0x12)
          v214 = **(_QWORD **)(v214 + 16);
      }
      v217 = v264;
      if (v264 >= (unint64_t)HIDWORD(v264))
      {
        v224 = v7;
        v225 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v265, v264 + 1, 8);
        v202 = v255;
        a2 = v225;
        v7 = v224;
        v217 = v264;
      }
      *(_QWORD *)(__src + 8 * v217) = v214;
      v218 = (v264 + 1);
      LODWORD(v264) = v264 + 1;
      v212 += 8;
    }
    while (v213 != v212);
    v226 = (char *)__src;
    v4 = v211;
    v3 = v251;
    v6 = v249;
  }
  else
  {
    v218 = 0;
    v226 = (char *)&v265;
  }
  if (v208 == 1)
  {
    v14 = 1;
  }
  else
  {
    *(_QWORD *)&v278 = 0;
    *((_QWORD *)&v278 + 1) = v6;
    v279 = v209;
    v280 = v282;
    v281 = 0x400000000;
    v283 = v285;
    v284 = 0x400000000;
    v286 = v7;
    v287 = xmmword_1C64632D0;
    sub_1C4F7C758((unsigned int *)&v280, (uint64_t)v282, v226, &v226[8 * v218]);
    v272 = (void *)sub_1C4AC9E98(v4, &v278, v3);
    v273 = v227;
    v275 = (void *)v208;
    LODWORD(v276) = 0;
    sub_1C4848B64((uint64_t)&v275, (uint64_t)&v272);
    if (__OFADD__(v275, v205))
      v14 = ((uint64_t)((uint64_t)v275 + v205) >> 63) ^ 0x8000000000000000;
    else
      v14 = (unint64_t)v275 + v205;
    if (v283 != v285)
      free(v283);
    if (v280 != v282)
      free(v280);
    v226 = (char *)__src;
  }
  if (v226 != (char *)&v265)
  {
    v81 = v226;
    goto LABEL_263;
  }
LABEL_316:
  if (v288 != &v290)
    free(v288);
  return v14;
}

unint64_t sub_1C4ACD754(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];

  v16 = v20;
  v17 = v20;
  v18 = 4;
  v19 = 0;
  v4 = a3;
  if (!a3)
    return 0;
  v8 = 0;
  do
  {
    v9 = *a2;
    v10 = *a4;
    if ((*(_DWORD *)(*a4 + 8) & 0xFE) == 0x12)
      v11 = *(unsigned __int8 *)(**(_QWORD **)(v10 + 16) + 8);
    else
      v11 = *(_DWORD *)(*a4 + 8);
    v12 = v11 < 7 || v11 == 13;
    if ((v12 || v11 == 15) && *(unsigned __int8 *)(v9 + 16) >= 0x15u)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v9);
      if (v13)
      {
        if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        {
          v14 = sub_1C6152EC8(a1, v10, 0, 1);
          if (__OFADD__(v8, v14))
            v8 = ((uint64_t)(v8 + v14) >> 63) ^ 0x8000000000000000;
          else
            v8 += v14;
        }
      }
    }
    ++a4;
    ++a2;
    --v4;
  }
  while (v4);
  if (v17 != v16)
    free(v17);
  return v8;
}

unint64_t sub_1C4ACD89C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, unsigned int a8, int a9, char a10, char a11)
{
  llvm::Type *v15;
  llvm::Type *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x8_t *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int8x8_t *v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  llvm::FixedVectorType *v57;
  llvm::APIntOps *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned __int8 v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[48];
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v15 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v17 = (llvm::Type *)(v15 / a4);
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), v17);
  v63 = v18;
  if ((a10 & 1) != 0 || a11)
  {
    v61 = sub_1C6157BA8(a1, a2, a3, a7, 1, 0, a9);
  }
  else
  {
    if (a9)
    {
      v19 = 0;
      v67 = 1;
      goto LABEL_5;
    }
    v61 = sub_1C4A96648(a1, a2, a3, a7 | 0x100, a8, 0);
  }
  v67 = v61;
  v19 = v62;
LABEL_5:
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v77);
  v76 = v79[0];
  sub_1C4768AD0(*(_QWORD *)(a1 + 8), a3);
  v22 = v21;
  if ((_DWORD)v20 == 1)
  v24 = sub_1C47A8C74(&v76);
  if ((_DWORD)v23 == 1)
  {
    if (v19)
      goto LABEL_26;
  }
  else if (v19)
  {
    goto LABEL_26;
  }
  v25 = (unint64_t)(v24 + 7) >> 3;
  if (((unint64_t)(v22 + 7) >> 3) > v25)
  {
    v26 = (((unint64_t)(v22 + 7) >> 3) + (unint64_t)v25 - 1)
        / ((unint64_t)(v24 + 7) >> 3);
    v27 = v26 - 1;
    v77 = v79;
    v78 = 0x600000000;
    sub_1C4765AA4((char *)&v77, (v26 + 63) >> 6, 0);
    v80 = v26;
    v28 = (int8x8_t *)v77;
    if (a6)
    {
      if (v17 <= 1)
        v29 = 1;
      else
        v29 = (int)v17;
      v30 = a5;
      do
      {
        if (v15 >= a4)
        {
          v31 = *v30;
          v32 = v29;
          do
          {
            *(_QWORD *)&v28[(v31 / (((unint64_t)v15 + v27) / v26)) >> 6] |= 1 << (v31 / (((unint64_t)v15 + v27) / v26));
            v31 += a4;
            --v32;
          }
          while (v32);
        }
        ++v30;
      }
      while (v30 != &a5[a6]);
    }
    if ((_DWORD)v78)
    {
      v33 = 0;
      v34 = 8 * v78;
      v35 = v28;
      do
      {
        v36 = *v35++;
        v37 = (uint8x8_t)vcnt_s8(v36);
        v37.i16[0] = vaddlv_u8(v37);
        v33 += v37.i32[0];
        v34 -= 8;
      }
      while (v34);
    }
    else
    {
      v33 = 0;
    }
    v67 = (v27 + v67 * v33) / v26;
    if (v28 != (int8x8_t *)v79)
      free(v28);
  }
LABEL_26:
  v75 = v17;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, -1, 1);
    v38 = a6;
  }
  else
  {
    v38 = a6;
    if (v15 < a4)
      v39 = 0;
    else
      v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    v74 = v39;
  }
  v73 = v15;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v72, -1, 1);
    v71 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
    if (!v38)
      goto LABEL_44;
  }
  else
  {
    if ((_DWORD)v15)
      v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    else
      v40 = 0;
    v72 = v40;
    v71 = v15;
    v70 = 0;
    if (!v38)
      goto LABEL_44;
  }
  v41 = &a5[v38];
  if (v17 <= 1)
    v42 = 1;
  else
    v42 = (int)v17;
  do
  {
    if (v15 >= a4)
    {
      v43 = *a5;
      v44 = v71;
      v45 = v42;
      do
      {
        v46 = 1 << v43;
        if (v44 > 0x40)
          *(_QWORD *)(v70 + 8 * (v43 >> 6)) |= v46;
        else
          v70 |= v46;
        v43 += a4;
        --v45;
      }
      while (v45);
    }
    ++a5;
  }
  while (a5 != v41);
LABEL_44:
  if (a2 == 32)
  {
    v68 = sub_1C4A967D8(a1, v63, (uint64_t)&v74, 1, 0);
    v69 = v47;
    v77 = (void *)v38;
    LODWORD(v78) = 0;
    sub_1C4848B64((uint64_t)&v77, (uint64_t)&v68);
    if (__OFADD__(v67, v77))
      v48 = (char *)(((uint64_t)((uint64_t)v77 + v67) >> 63) ^ 0x8000000000000000);
    else
      v48 = (char *)v77 + v67;
    v49 = a1;
    v50 = a3;
    v51 = 0;
    v52 = 1;
  }
  else
  {
    v68 = v38;
    LODWORD(v69) = 0;
    v77 = (void *)sub_1C4A967D8(a1, v63, (uint64_t)&v74, 0, 1);
    v78 = v53;
    sub_1C4848B64((uint64_t)&v77, (uint64_t)&v68);
    if (__OFADD__(v67, v77))
      v48 = (char *)(((uint64_t)((uint64_t)v77 + v67) >> 63) ^ 0x8000000000000000);
    else
      v48 = (char *)v77 + v67;
    v49 = a1;
    v50 = a3;
    v51 = 1;
    v52 = 0;
  }
  v54 = sub_1C4A967D8(v49, v50, (uint64_t)&v70, v51, v52);
  if (__OFADD__(v48, v54))
    v55 = ((uint64_t)&v48[v54] >> 63) ^ 0x8000000000000000;
  else
    v55 = (unint64_t)&v48[v54];
  if (a10)
  {
    v57 = (llvm::FixedVectorType *)(**(_QWORD **)a3 + 1912);
    v58 = a11 ? (llvm::APIntOps *)&v70 : (llvm::APIntOps *)&v72;
    v59 = sub_1C61576F0(a1, (llvm::FixedVectorType *)(**(_QWORD **)a3 + 1912), a4, v17, v58);
    if (__OFADD__(v55, v59))
      v55 = ((uint64_t)(v55 + v59) >> 63) ^ 0x8000000000000000;
    else
      v55 += v59;
    if (a11)
    {
      llvm::FixedVectorType::get(v57, v15);
      sub_1C4ACA7DC(a1, 28);
      if (__OFADD__(v55, v60))
        v55 = ((uint64_t)(v55 + v60) >> 63) ^ 0x8000000000000000;
      else
        v55 += v60;
    }
  }
  if (v71 >= 0x41 && v70)
    MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
  if (v73 >= 0x41 && v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  return v55;
}

uint64_t sub_1C4ACDE94(uint64_t *a1, llvm::ShuffleVectorInst *this)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)((char *)this - 32 * v5);
  }
  v25 = v27;
  v26 = 0x400000000;
  if (v5 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v5, 8);
    v7 = v26;
    v9 = v25;
    v8 = v26;
  }
  else
  {
    v7 = 0;
    if (!v5)
    {
      v13 = v27;
      goto LABEL_11;
    }
    v8 = 0;
    v9 = v27;
  }
  v10 = 32 * v5;
  v11 = &v9[v8];
  do
  {
    v12 = *v6;
    v6 += 4;
    *v11++ = v12;
    v10 -= 32;
  }
  while (v10);
  v13 = v25;
LABEL_11:
  LODWORD(v26) = v7 + v5;
  v14 = sub_1C4AC9338(a1, this, (uint64_t)v13, (v7 + v5), 1);
  v16 = v14 < 0;
  if (v15)
    v16 = v15 < 0;
  if (!v16)
  {
    v17 = v15 < 1;
    if (!v15)
      v17 = v14 < 1;
    if (v17)
    {
      v18 = 0;
      goto LABEL_35;
    }
  }
  v19 = *((unsigned __int8 *)this + 16);
  if (v19 == 60)
  {
    v18 = 4;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)this;
  if (v19 == 84)
  {
    v21 = *((_QWORD *)this - 4);
    if (!v21
      || *(_BYTE *)(v21 + 16)
      || *(_QWORD *)(v21 + 24) != *((_QWORD *)this + 9)
      || (sub_1C4845148((uint64_t)a1, (uint64_t ***)v21) & 1) != 0)
    {
      v18 = 40;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v20 + 8) == 16 && v20)
      v20 = **(_QWORD **)(v20 + 16);
  }
  v22 = *(_DWORD *)(v20 + 8);
  v23 = v22;
  if (v20 && (v22 & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 24) + 8);
  if (v23 >= 7)
    v18 = 1;
  else
    v18 = 3;
LABEL_35:
  if (v25 != v27)
    free(v25);
  return v18;
}

void sub_1C4ACE094()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4ACE0A8(uint64_t a1, int a2)
{
  uint64_t result;

  result = 1;
  if (a2 > 117)
  {
    if (a2 != 205 && ((a2 - 118) > 0xB || ((1 << (a2 - 118)) & 0xF4F) == 0) && a2 != 193)
      return 0;
  }
  else if ((a2 - 45) > 0x25 || ((1 << (a2 - 45)) & 0x2930F3C007) == 0)
  {
    return 0;
  }
  return result;
}

void sub_1C4ACE120()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE134(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB2E40;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE168(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB2E40;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE184(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 313);
}

void sub_1C4ACE1B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE1C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB2E88;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE1F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB2E88;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE214(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 286);
}

void sub_1C4ACE240()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE254(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB2ED0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE288(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB2ED0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE2A4(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 287);
}

void sub_1C4ACE2D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE2E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB2F18;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE318(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB2F18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE334(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 335);
}

void sub_1C4ACE360()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE374()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB2F60;
  return result;
}

void sub_1C4ACE398(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB2F60;
}

uint64_t sub_1C4ACE3B0()
{
  return 1;
}

void sub_1C4ACE3BC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE3D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB2FA8;
  return result;
}

void sub_1C4ACE3F4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB2FA8;
}

uint64_t sub_1C4ACE40C()
{
  return 0;
}

void sub_1C4ACE418()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE42C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB2FF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE460(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB2FF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE47C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 341);
}

void sub_1C4ACE4A8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE4BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3038;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE4F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3038;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4ACE50C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  return *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 112) + 16))(*(_QWORD *)(v3 + 112)) + 296)
      || *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 112) + 16))(*(_QWORD *)(v3 + 112), a2)+ 306) != 0;
}

void sub_1C4ACE570()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE584(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3080;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE5B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3080;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE5D4(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 332);
}

void sub_1C4ACE600()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE614()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB30C8;
  return result;
}

void sub_1C4ACE638(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB30C8;
}

uint64_t sub_1C4ACE650()
{
  return 1;
}

void sub_1C4ACE65C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE670(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3110;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE6A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3110;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE6C0(uint64_t a1)
{
  _BYTE *v1;
  int v2;

  v1 = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112));
  if (v1[291])
  {
    v2 = 1;
  }
  else if (v1[292])
  {
    v2 = 2;
  }
  else if (v1[294])
  {
    v2 = 4;
  }
  else
  {
    v2 = 8 * v1[293];
  }
  return v2 | (16 * v1[342]);
}

void sub_1C4ACE728()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE73C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB3158;
  return result;
}

void sub_1C4ACE760(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB3158;
}

uint64_t sub_1C4ACE778()
{
  return 1;
}

void sub_1C4ACE784()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE798(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB31A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE7CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB31A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE7E8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 314);
}

void sub_1C4ACE814()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE828(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB31E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE85C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB31E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE878(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 315);
}

void sub_1C4ACE8A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE8B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3230;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE8EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3230;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE908(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 316);
}

void sub_1C4ACE934()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE948(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3278;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACE97C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3278;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACE998(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 317);
}

void sub_1C4ACE9C4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACE9D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB32C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACEA0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB32C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACEA28(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 336);
}

void sub_1C4ACEA54()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACEA68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3308;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACEA9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3308;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACEAB8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 337);
}

void sub_1C4ACEAE4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACEAF8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB3350;
  return result;
}

void sub_1C4ACEB1C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB3350;
}

uint64_t sub_1C4ACEB34()
{
  return 0;
}

void sub_1C4ACEB40()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACEB54()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB3398;
  return result;
}

void sub_1C4ACEB78(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB3398;
}

uint64_t sub_1C4ACEB90()
{
  return 0;
}

void sub_1C4ACEB9C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4ACEBB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB33E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4ACEBE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB33E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4ACEC00(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
                            + 328);
}

uint64_t sub_1C4ACEC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_1C4ACEC38()
{
  int v1;
  char v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"FMA contraction at IR level";
  v4.n128_u64[1] = 27;
  LOBYTE(v1) = 0;
  v3 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED7EE0E8, "disable-agx3-fma-contraction", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE0E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Show the number of values live over each call";
  v4.n128_u64[1] = 45;
  v2 = 0;
  v3 = (int *)&v2;
  v1 = 1;
  sub_1C6156E64(&v4, (char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EE1A8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable verification of presence of Mem Operands";
  v4.n128_u64[1] = 47;
  LOBYTE(v1) = 0;
  v3 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED7EE268, "enable-agx3-memop-verifier", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE268, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable expansion of AGX specific builtins";
  v4.n128_u64[1] = 41;
  LOBYTE(v1) = 0;
  v3 = &v1;
  sub_1C614D990((uint64_t)&unk_1ED7EE328, "run-agx-expand-builtins", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE328, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Add relaxed-math flags to fp operations that have fast.";
  v4.n128_u64[1] = 55;
  LOBYTE(v1) = 0;
  v3 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED7EE3E8, "agx3-replace-fast-math-with-relaxed", &v4, (_BYTE **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE3E8, &dword_1C475E000);
}

uint64_t sub_1C4ACEDD8(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Add Frag Sync operations where needed";
  *(_QWORD *)(v3 + 8) = 37;
  *(_QWORD *)(v3 + 16) = "agx3-frag-sync";
  *(_QWORD *)(v3 + 24) = 14;
  *(_QWORD *)(v3 + 32) = &unk_1ED7EE568;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4ACEF3C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4ACEE7C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EE568) = &off_1E7FB3470;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EE570);
  if (v3 != -1)
  {
    v7[0] = sub_1C4ACEDD8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EE570, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4ACEF3C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4ACEE7C(v0);
}

void sub_1C4ACEF64(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4ACEFF8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4ACF084(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4ACF104()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t NamedMetadata;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  uint64_t i;
  _QWORD *v41;
  _QWORD *v42;
  unsigned int v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  __int16 v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  void *v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  unsigned __int8 **v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  unsigned __int8 **v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned __int8 **v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  int v127;
  unsigned int v128;
  char *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  unsigned int v135;
  int v136;
  uint64_t j;
  uint64_t v138;
  char v139;
  _OWORD *v140;
  _OWORD *v141;
  __int128 v142;
  uint64_t v143;
  unsigned __int8 **v144;
  int v145;
  BOOL v146;
  unsigned int v147;
  unsigned __int8 **v148;
  int v149;
  BOOL v150;
  unsigned int v151;
  unsigned __int8 **v152;
  int v153;
  BOOL v154;
  unsigned int v155;
  unsigned __int8 **v156;
  unsigned __int8 *v157;
  unsigned __int8 **v158;
  unsigned __int8 *v159;
  unsigned __int8 **v160;
  unsigned __int8 *v161;
  __n128 v162;
  uint64_t v163;
  size_t v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  const void **v171;
  unint64_t v172;
  const void *v174;
  _BOOL4 k;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  int v185;
  unint64_t v186;
  _DWORD *v187;
  BOOL v188;
  char v189;
  int v190;
  _BOOL4 v191;
  unint64_t v192;
  int *v193;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  unsigned int v199;
  char *v200;
  uint64_t v201;
  int v202;
  unint64_t *v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t *v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  void *v215;
  unint64_t v216;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  unsigned __int8 v224;
  int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  int *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  uint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  _BOOL4 v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  unsigned __int8 *v243;
  uint64_t v244;
  unsigned int v245;
  int v246;
  int v247;
  uint64_t v248;
  BOOL v249;
  int v250;
  BOOL v251;
  unsigned int v252;
  char v253;
  int v254;
  BOOL v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t *v259;
  int v260;
  unint64_t v261;
  uint64_t *v262;
  BOOL v263;
  _BOOL4 v264;
  _BOOL4 v265;
  BOOL v266;
  _BOOL4 v267;
  uint64_t NearestCommonDominator;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  _BOOL4 v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t m;
  unsigned int *v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t *v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t n;
  uint64_t ii;
  int v303;
  uint64_t v304;
  _BYTE *v305;
  __n128 v306;
  _QWORD *v307;
  llvm::MachineBasicBlock *v308;
  _QWORD *FirstInstrTerminator;
  uint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  unsigned __int8 *v313;
  _BOOL4 v314;
  BOOL v315;
  int v316;
  unsigned int v317;
  int v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t *v321;
  int v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm::MachineBasicBlock *LoopPreheader;
  uint64_t v329;
  uint64_t v330;
  char v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  llvm::MachineBasicBlock *v340;
  int v341;
  int v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t jj;
  _QWORD *v346;
  unsigned int *v347;
  BOOL v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t *v352;
  _QWORD *v353;
  unsigned __int8 *v354;
  _QWORD *v355;
  uint64_t v356;
  llvm::MachineFunction *v357;
  llvm::MachineInstr *v358;
  uint64_t v359;
  _QWORD *v360;
  char v361;
  uint64_t kk;
  uint64_t v363;
  char v364;
  unint64_t v365;
  uint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  unint64_t v373;
  __int16 v374;
  uint64_t v375;
  llvm::MachineFunction *v376;
  unsigned __int8 *v377;
  unint64_t v378;
  unsigned __int8 *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  int v385;
  uint64_t mm;
  uint64_t nn;
  const llvm::TargetSubtargetInfo *v388;
  _QWORD *v389;
  _QWORD *v390;
  uint64_t v391;
  unint64_t v392;
  char v393;
  unsigned int v394;
  int v395;
  int64x2_t *v396;
  int v397;
  unsigned int v398;
  uint64_t v399;
  int v400;
  unsigned int v401;
  int v402;
  int v403;
  int v404;
  unint64_t v405;
  unsigned int v406;
  unsigned int v407;
  uint64_t v408;
  unint64_t v409;
  unsigned int v410;
  int v411;
  int64x2_t *v412;
  int v413;
  unsigned int v414;
  uint64_t v415;
  int v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  BOOL v422;
  int v423;
  int v424;
  int64x2_t *v425;
  unsigned int v426;
  int v427;
  unsigned int v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t *v431;
  int v432;
  BOOL v433;
  unsigned int v434;
  uint64_t *v435;
  _QWORD *v436;
  unsigned __int8 *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  int v447;
  uint64_t *v448;
  void **v449;
  unsigned int v450;
  int v451;
  int64x2_t *v452;
  unint64_t v453;
  int64x2_t *v454;
  int v455;
  char v456;
  unint64_t v457;
  unsigned int v458;
  uint64_t v459;
  int v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  BOOL v466;
  int v467;
  uint64_t v468;
  BOOL v469;
  unsigned int v470;
  unint64_t v471;
  int64x2_t *v472;
  int v473;
  unint64_t v474;
  unint64_t v475;
  unsigned int v476;
  uint64_t v477;
  int v478;
  unsigned int v479;
  _WORD *v480;
  unsigned int v481;
  int v482;
  unsigned int v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t *v486;
  int v487;
  BOOL v488;
  unsigned int v489;
  unsigned int v490;
  uint64_t v491;
  unsigned int v492;
  uint64_t v493;
  int v494;
  int64x2_t *v495;
  int v496;
  unsigned int v497;
  uint64_t v498;
  int v499;
  BOOL v500;
  unsigned int v501;
  uint64_t *v502;
  _QWORD *v503;
  unsigned __int8 *v504;
  uint64_t v505;
  unsigned __int8 *v506;
  char *v507;
  char *v508;
  _BYTE *v509;
  _BYTE *v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t **v513;
  unint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  llvm::MachineFunction *v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t **v526;
  unint64_t *v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  llvm::MachineFunction *v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  llvm::MachineFunction *v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  _QWORD *v548;
  unint64_t *v549;
  unsigned __int8 *v550;
  uint64_t v551;
  llvm::MachineFunction *v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  unsigned int v559;
  uint64_t v560;
  _QWORD *v561;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  int v607;
  unsigned __int8 *v608;
  llvm::MachineDominatorTree *v609;
  _QWORD *v610;
  _QWORD *v611;
  uint64_t v612;
  _QWORD *v613;
  uint64_t v614;
  uint64_t v615;
  _QWORD *v616;
  int v617;
  char *v618;
  uint64_t v619;
  int v620;
  unsigned __int8 v621;
  _BYTE *v622;
  uint64_t v623;
  _BOOL4 v624;
  uint64_t v625;
  uint64_t v626;
  unsigned __int8 v627;
  unsigned int v628;
  _QWORD *v629;
  uint64_t v630;
  BOOL v631;
  unsigned int v632;
  unint64_t *v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  uint64_t *v638;
  unsigned int *v639;
  uint64_t *v640;
  char v641;
  int v642;
  unint64_t v643;
  char v644;
  unsigned int v645;
  unsigned __int8 *v646[3];
  __int16 v647;
  uint64_t v648;
  uint64_t v649;
  unsigned int v650;
  unsigned __int8 *v651;
  void *__p[2];
  _BOOL4 *v653;
  unsigned int *v654;
  int v655;
  unsigned int v656;
  unsigned __int8 *v657;
  _BOOL4 v658;
  void *v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  void *v664;
  uint64_t v665;
  _BYTE v666[64];
  void *__s2;
  uint64_t v668;
  _DWORD v669[12];
  int v670;
  _QWORD v671[211];
  uint64_t v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  uint64_t v676;
  char v677;
  unsigned __int8 v678;
  void *v679;
  uint64_t v680;
  _BYTE v681[16];
  unsigned __int8 *v682;
  void *v683;
  uint64_t v684;
  uint64_t v685;
  void *v686;
  uint64_t v687;
  _BYTE v688[16];
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  unint64_t *v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  uint64_t v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  void *v702;
  uint64_t v703;
  _QWORD v704[9];
  void *__s1[2];
  uint64_t v706;
  int v707;
  int v708;
  _WORD v709[16];
  int v710;
  _QWORD v711[212];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v711[209] = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(v0 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::MachineDominatorTree::ID);
  v609 = (llvm::MachineDominatorTree *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MachineDominatorTree::ID);
  v6 = **(void ****)(v3 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachinePostDominatorTree::ID);
  v615 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachinePostDominatorTree::ID);
  v8 = **(void ****)(v3 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineLoopInfo::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineLoopInfo::ID);
  v11 = **(void ****)(v3 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  v14 = *(_QWORD *)(*v2 + 40);
  v15 = atomic_load((unsigned __int8 *)&qword_1ED7EE578);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE578))
  {
    dword_1ED7EE56C = 20;
    __cxa_guard_release(&qword_1ED7EE578);
  }
  v16 = ((*(unsigned __int16 *)(*v2 + 18) >> 4) & 0x3FF) - 101;
  v17 = v16 > 7;
  v18 = (1 << v16) & 0x8D;
  if (v17 || v18 == 0)
    return 0;
  __s1[0] = "agx.prid";
  v709[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v14, (uint64_t)__s1);
  v612 = v10;
  if (NamedMetadata && (v21 = *(uint64_t **)(NamedMetadata + 48), v22 = *((unsigned int *)v21 + 2), (_DWORD)v22))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = *v21;
    do
    {
      v27 = (uint64_t *)(*(_QWORD *)v26 - 8 * *(unsigned int *)(*(_QWORD *)v26 + 8));
      v28 = *v27;
      if (*v27)
      {
        if (!*(_BYTE *)v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (*(_QWORD *)v29 == 5)
          {
            v30 = *(_DWORD *)(v29 + 24);
            v31 = *(unsigned __int8 *)(v29 + 28);
            if (v30 == 1702390118 && v31 == 100)
            {
              v33 = *(_QWORD *)(v27[2] + 128);
              v34 = (_QWORD *)(v33 + 24);
              if (*(_DWORD *)(v33 + 32) >= 0x41u)
                v34 = (_QWORD *)*v34;
              v35 = *(_QWORD *)(v27[4] + 128);
              v36 = (_QWORD *)(v35 + 24);
              if (*(_DWORD *)(v35 + 32) >= 0x41u)
                v36 = (_QWORD *)*v36;
              v37 = *(_QWORD *)(v27[6] + 128);
              v38 = (_QWORD *)(v37 + 24);
              if (*(_DWORD *)(v37 + 32) >= 0x41u)
                v38 = (_QWORD *)*v38;
              v23 = *(_DWORD *)v34;
              v24 = *(_DWORD *)v36;
              v25 = *(_DWORD *)v38;
            }
          }
        }
      }
      v26 += 8;
      --v22;
    }
    while (v22);
  }
  else
  {
    v25 = 0;
    v24 = 0;
    v23 = 0;
  }
  v39 = (unsigned __int8 *)v2[2];
  v608 = v39;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v615 + 248) + 72) + 32) != 1)
  {
    v52 = (v39[298] | v39[299] | v39[300]) == 0;
    v53 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v39 + 104))(v39);
    v54 = (_QWORD *)v2[41];
    v55 = (unint64_t *)v54[7];
    v56 = *(_QWORD *)(v53 + 8) + 312192;
    v57 = (llvm::MachineFunction *)v54[4];
    __s2 = 0;
    v58 = *((_QWORD *)v57 + 28);
    if (v58)
    {
      *((_QWORD *)v57 + 28) = *(_QWORD *)v58;
      __s1[0] = 0;
    }
    else
    {
      v58 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
      __s1[0] = __s2;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v58, v57, v56, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if (__s2)
      llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
    v59 = v54[5];
    *(_QWORD *)(v58 + 24) = v59;
    v60 = *(_QWORD *)(v59 + 32);
    v61 = *(unsigned int *)(v58 + 40);
    if ((_DWORD)v61)
    {
      v294 = *(_QWORD *)(v58 + 32);
      v295 = *(_QWORD *)(v60 + 40);
      v296 = 32 * v61;
      do
      {
        if (!*(_BYTE *)v294)
        {
          v297 = *(unsigned int *)(v294 + 4);
          if ((int)v297 >= 0)
            v298 = (uint64_t *)(*(_QWORD *)(v295 + 272) + 8 * v297);
          else
            v298 = (uint64_t *)(*(_QWORD *)(v295 + 24) + 16 * (v297 & 0x7FFFFFFF) + 8);
          v299 = *v298;
          if (*v298)
          {
            v300 = *(_QWORD *)(v299 + 16);
            *(_QWORD *)(v299 + 16) = v294;
            *(_QWORD *)(v294 + 16) = v300;
            if ((*(_BYTE *)(v294 + 3) & 1) != 0)
            {
              *(_QWORD *)(v294 + 24) = v299;
            }
            else
            {
              *(_QWORD *)(v294 + 24) = 0;
              v298 = (uint64_t *)(v300 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v294 + 16) = v294;
            *(_QWORD *)(v294 + 24) = 0;
          }
          *v298 = v294;
        }
        v294 += 32;
        v296 -= 32;
      }
      while (v296);
    }
    v62 = *(_QWORD *)(v60 + 728);
    if (v62)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 24))(v62, v58);
    v63 = *v55 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v58 = v63 | *(_QWORD *)v58 & 7;
    *(_QWORD *)(v58 + 8) = v55;
    *(_QWORD *)(v63 + 8) = v58;
    *v55 = *v55 & 7 | v58;
    v64 = 1;
    LODWORD(__s1[0]) = 1;
    v706 = 0;
    __s1[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)__s1);
    v65 = 3;
    LODWORD(__s1[0]) = 1;
    if (!v52)
      v65 = 1;
    __s1[1] = 0;
    v706 = v65;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v706 = 1023;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)__s1);
    if (v608[369] || !dword_1ED7EE56C)
    {
      v66 = (_QWORD *)v2[40];
      v67 = v66[6] & 0xFFFFFFFFFFFFFFF8;
      if (v67 && (*(_BYTE *)v67 & 4) != 0)
      {
        v68 = *(_WORD *)(v67 + 44);
      }
      else
      {
        while (1)
        {
          v68 = *(_WORD *)(v67 + 44);
          if ((v68 & 4) == 0)
            break;
          v67 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v69 = *(_QWORD *)(v53 + 8) + 312144;
      if ((v68 & 4) != 0)
      {
        v70 = (llvm::MachineFunction *)v66[4];
        v73 = *(void **)(v67 + 56);
        __s2 = v73;
        if (v73)
          llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v73, 2);
        v72 = *((_QWORD *)v70 + 28);
        if (v72)
          *((_QWORD *)v70 + 28) = *(_QWORD *)v72;
        else
          v72 = sub_1C484358C((uint64_t)v70 + 128, 72, 3);
        __s1[0] = __s2;
        if (__s2)
        {
          llvm::MetadataTracking::retrack((uint64_t)&__s2, (unsigned __int8 *)__s2, (uint64_t)__s1);
          __s2 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v72, v70, v69, (unsigned __int8 **)__s1, 0);
        if (__s1[0])
          llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
        if (__s2)
          llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
        if (v66 + 6 != (_QWORD *)v67 && (*(_WORD *)(v67 + 44) & 4) != 0)
          *(_WORD *)(v72 + 44) |= 0xCu;
        sub_1C512CA10(v66 + 5, (uint64_t *)v67, v72);
      }
      else
      {
        v70 = (llvm::MachineFunction *)v66[4];
        v71 = *(void **)(v67 + 56);
        __s2 = v71;
        if (v71)
          llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v71, 2);
        v72 = *((_QWORD *)v70 + 28);
        if (v72)
          *((_QWORD *)v70 + 28) = *(_QWORD *)v72;
        else
          v72 = sub_1C484358C((uint64_t)v70 + 128, 72, 3);
        __s1[0] = __s2;
        if (__s2)
        {
          llvm::MetadataTracking::retrack((uint64_t)&__s2, (unsigned __int8 *)__s2, (uint64_t)__s1);
          __s2 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v72, v70, v69, (unsigned __int8 **)__s1, 0);
        if (__s1[0])
          llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
        if (__s2)
          llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
        v289 = v66[5];
        *(_QWORD *)(v72 + 24) = v289;
        v290 = *(_QWORD *)(v289 + 32);
        v291 = *(unsigned int *)(v72 + 40);
        if ((_DWORD)v291)
        {
          v591 = *(_QWORD *)(v72 + 32);
          v592 = *(_QWORD *)(v290 + 40);
          v593 = 32 * v291;
          do
          {
            if (!*(_BYTE *)v591)
            {
              v594 = *(unsigned int *)(v591 + 4);
              if ((int)v594 >= 0)
                v595 = (uint64_t *)(*(_QWORD *)(v592 + 272) + 8 * v594);
              else
                v595 = (uint64_t *)(*(_QWORD *)(v592 + 24) + 16 * (v594 & 0x7FFFFFFF) + 8);
              v596 = *v595;
              if (*v595)
              {
                v597 = *(_QWORD *)(v596 + 16);
                *(_QWORD *)(v596 + 16) = v591;
                *(_QWORD *)(v591 + 16) = v597;
                if ((*(_BYTE *)(v591 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v591 + 24) = v596;
                }
                else
                {
                  *(_QWORD *)(v591 + 24) = 0;
                  v595 = (uint64_t *)(v597 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v591 + 16) = v591;
                *(_QWORD *)(v591 + 24) = 0;
              }
              *v595 = v591;
            }
            v591 += 32;
            v593 -= 32;
          }
          while (v593);
        }
        v292 = *(_QWORD *)(v290 + 728);
        if (v292)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v292 + 24))(v292, v72);
        v293 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v72 = v293 | *(_QWORD *)v72 & 7;
        *(_QWORD *)(v72 + 8) = v67;
        *(_QWORD *)(v293 + 8) = v72;
        *(_QWORD *)v67 = *(_QWORD *)v67 & 7 | v72;
      }
      v64 = 1;
      LODWORD(__s1[0]) = 1;
      v706 = 0;
      __s1[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v70, (const llvm::MachineOperand *)__s1);
      LODWORD(__s1[0]) = 1;
      __s1[1] = 0;
      v706 = 1023;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v70, (const llvm::MachineOperand *)__s1);
    }
    return v64;
  }
  v606 = v13;
  for (i = 0; i != 110; i += 10)
  {
    v41 = &v671[i + 209];
    *v41 = &v671[i + 211];
    v41[1] = 0x400000000;
  }
  v605 = __PAIR64__(v24, v23);
  v678 = 0;
  v673 = 0u;
  v674 = 0u;
  v675 = 0u;
  v679 = v681;
  v680 = 0x200000000;
  v42 = v2 + 40;
  v43 = 62;
  v44 = v2 + 40;
  do
  {
    v45 = v43;
    v44 = (_QWORD *)v44[1];
    ++v43;
  }
  while (v44 != v42);
  v46 = v45 - 62;
  v659 = &v660.u64[1];
  v660.i64[0] = 0x600000000;
  sub_1C4765AA4((char *)&v659, v43 >> 6, 0);
  v663.i32[2] = v46;
  v47 = v2[6];
  if (!v47)
  {
    v47 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)v2[1] + 216))(v2[1], v2 + 16, v2);
    v2[6] = v47;
  }
  if (!*(_BYTE *)(v47 + 480))
  {
    sub_1C5EA6408(*(_QWORD *)(*v2 + 40), v47 + 432, v47 + 256, v47 + 456);
    *(_BYTE *)(v47 + 480) = 1;
  }
  v48 = *(_QWORD *)(*v2 + 40);
  v625 = v47;
  v635 = 0;
  v636 = 0;
  v637 = 0;
  sub_1C498C4E4((uint64_t)&v635, v47 + 432);
  v49 = v635 + ((unint64_t)v637 << 6);
  v607 = v25;
  if ((_DWORD)v636)
  {
    if (v637)
    {
      v50 = (unint64_t)v637 << 6;
      v51 = v635;
      while ((*(_QWORD *)v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v51 += 64;
        v50 -= 64;
        if (!v50)
          goto LABEL_49;
      }
    }
    else
    {
      v51 = v635;
    }
  }
  else
  {
LABEL_49:
    v51 = v635 + ((unint64_t)v637 << 6);
  }
  v74 = v635 + ((unint64_t)v637 << 6);
  v611 = v2;
  while (v51 != v74)
  {
    v75 = v42;
    v76 = *(unsigned int *)(v51 + 40);
    if ((_DWORD)v76)
    {
      v77 = *(unsigned int **)(v51 + 32);
      v78 = v680;
      v79 = 6 * v76;
      do
      {
        v80 = *((unsigned __int16 *)v77 + 2);
        v81 = *v77;
        if (v78 >= HIDWORD(v680))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v679, (uint64_t)v681, v78 + 1, 6);
          v78 = v680;
        }
        v82 = (char *)v679 + 6 * v78;
        *(_DWORD *)v82 = v81;
        *((_WORD *)v82 + 2) = (v81 | (unint64_t)(v80 << 32)) >> 32;
        v78 = v680 + 1;
        LODWORD(v680) = v680 + 1;
        v77 = (unsigned int *)((char *)v77 + 6);
        v79 -= 6;
      }
      while (v79);
    }
    v83 = v51 + 64;
    v51 = v49;
    v42 = v75;
    if (v83 != v49)
    {
      v51 = v83;
      while ((*(_QWORD *)v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v51 += 64;
        if (v51 == v49)
        {
          v51 = v49;
          break;
        }
      }
    }
  }
  v648 = 0;
  v649 = 0;
  v650 = 0;
  v658 = 0;
  v656 = 0;
  v84 = *(_QWORD *)(v625 + 432);
  v85 = *(unsigned int *)(v625 + 448);
  v86 = v84 + (v85 << 6);
  v613 = v42;
  if (*(_DWORD *)(v625 + 440))
  {
    if ((_DWORD)v85)
    {
      v87 = v85 << 6;
      v88 = *(_QWORD *)(v625 + 432);
      while ((*(_QWORD *)v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v88 += 64;
        v87 -= 64;
        if (!v87)
          goto LABEL_96;
      }
    }
    else
    {
      v88 = *(_QWORD *)(v625 + 432);
    }
  }
  else
  {
LABEL_96:
    v88 = v84 + (v85 << 6);
  }
  v89 = v84 + ((unint64_t)v85 << 6);
  if (v88 == v89)
    goto LABEL_207;
  v90 = v48 + 272;
  v623 = v84 + ((unint64_t)v85 << 6);
  do
  {
    v682 = *(unsigned __int8 **)v88;
    v683 = &v685;
    v684 = 0x100000000;
    if (*(_DWORD *)(v88 + 16))
      sub_1C498C654((uint64_t)&v683, v88 + 8);
    v686 = v688;
    v687 = 0x200000000;
    if (*(_DWORD *)(v88 + 40))
      sub_1C498C654((uint64_t)&v686, v88 + 32);
    v91 = v682;
    if (!*((_QWORD *)v682 + 1))
      goto LABEL_150;
    v647 = 0;
    v655 = 0;
    if ((v682[34] & 0x40) == 0)
      goto LABEL_113;
    v92 = ***(_QWORD ***)v682;
    __s1[0] = v682;
    v93 = *(_DWORD *)(v92 + 2520);
    if (!v93)
    {
      v156 = 0;
LABEL_195:
      v97 = (unsigned __int8 **)sub_1C53D65B8(v92 + 2504, (uint64_t)__s1, (uint64_t *)__s1, v156);
      v157 = (unsigned __int8 *)__s1[0];
      v97[1] = 0;
      v97[2] = 0;
      *v97 = v157;
      goto LABEL_108;
    }
    v94 = *(_QWORD *)(v92 + 2504);
    v95 = v93 - 1;
    v96 = v95 & ((v682 >> 4) ^ (v682 >> 9));
    v97 = (unsigned __int8 **)(v94 + 24 * v96);
    v98 = *v97;
    if (*v97 != v682)
    {
      v144 = 0;
      v145 = 1;
      while (v98 != (unsigned __int8 *)-4096)
      {
        if (v144)
          v146 = 0;
        else
          v146 = v98 == (unsigned __int8 *)-8192;
        if (v146)
          v144 = v97;
        v147 = v96 + v145++;
        v96 = v147 & v95;
        v97 = (unsigned __int8 **)(v94 + 24 * v96);
        v98 = *v97;
        if (*v97 == v682)
          goto LABEL_108;
      }
      if (v144)
        v156 = v144;
      else
        v156 = v97;
      goto LABEL_195;
    }
LABEL_108:
    if (v97[2] == (unsigned __int8 *)15)
    {
      v99 = v97[1];
      v100 = *(_QWORD *)v99;
      v101 = *(_QWORD *)(v99 + 7);
      if (v100 == 0x625F726566667562 && v101 == 0x73676E69646E6962)
      {
LABEL_161:
        if ((_DWORD)v687)
          v127 = 3;
        else
          v127 = 2;
        goto LABEL_133;
      }
    }
LABEL_113:
    if ((v91[34] & 0x40) == 0)
      goto LABEL_124;
    v103 = ***(_QWORD ***)v91;
    __s1[0] = v91;
    v104 = *(_DWORD *)(v103 + 2520);
    if (!v104)
    {
      v158 = 0;
LABEL_199:
      v108 = (unsigned __int8 **)sub_1C53D65B8(v103 + 2504, (uint64_t)__s1, (uint64_t *)__s1, v158);
      v159 = (unsigned __int8 *)__s1[0];
      v108[1] = 0;
      v108[2] = 0;
      *v108 = v159;
      goto LABEL_116;
    }
    v105 = *(_QWORD *)(v103 + 2504);
    v106 = v104 - 1;
    v107 = v106 & ((v91 >> 4) ^ (v91 >> 9));
    v108 = (unsigned __int8 **)(v105 + 24 * v107);
    v109 = *v108;
    if (*v108 != v91)
    {
      v148 = 0;
      v149 = 1;
      while (v109 != (unsigned __int8 *)-4096)
      {
        if (v148)
          v150 = 0;
        else
          v150 = v109 == (unsigned __int8 *)-8192;
        if (v150)
          v148 = v108;
        v151 = v107 + v149++;
        v107 = v151 & v106;
        v108 = (unsigned __int8 **)(v105 + 24 * v107);
        v109 = *v108;
        if (*v108 == v91)
          goto LABEL_116;
      }
      if (v148)
        v158 = v148;
      else
        v158 = v108;
      goto LABEL_199;
    }
LABEL_116:
    if (v108[2] == (unsigned __int8 *)19)
    {
      v110 = v108[1];
      v111 = *(_QWORD *)v110;
      v112 = *((_QWORD *)v110 + 1);
      v113 = *(_QWORD *)(v110 + 11);
      v114 = v111 == 0x705F726576697264 && v112 == 0x6675625F6D617261;
      if (v114 && v113 == 0x7265666675625F6DLL)
        goto LABEL_161;
    }
LABEL_124:
    if ((v91[34] & 0x40) == 0)
      goto LABEL_132;
    v116 = ***(_QWORD ***)v91;
    __s1[0] = v91;
    v117 = *(_DWORD *)(v116 + 2520);
    if (!v117)
    {
      v160 = 0;
LABEL_203:
      v121 = (unsigned __int8 **)sub_1C53D65B8(v116 + 2504, (uint64_t)__s1, (uint64_t *)__s1, v160);
      v161 = (unsigned __int8 *)__s1[0];
      v121[1] = 0;
      v121[2] = 0;
      *v121 = v161;
      goto LABEL_127;
    }
    v118 = *(_QWORD *)(v116 + 2504);
    v119 = v117 - 1;
    v120 = v119 & ((v91 >> 4) ^ (v91 >> 9));
    v121 = (unsigned __int8 **)(v118 + 24 * v120);
    v122 = *v121;
    if (*v121 != v91)
    {
      v152 = 0;
      v153 = 1;
      while (v122 != (unsigned __int8 *)-4096)
      {
        if (v152)
          v154 = 0;
        else
          v154 = v122 == (unsigned __int8 *)-8192;
        if (v154)
          v152 = v121;
        v155 = v120 + v153++;
        v120 = v155 & v119;
        v121 = (unsigned __int8 **)(v118 + 24 * v120);
        v122 = *v121;
        if (*v121 == v91)
          goto LABEL_127;
      }
      if (v152)
        v160 = v152;
      else
        v160 = v121;
      goto LABEL_203;
    }
LABEL_127:
    if (v121[2] != (unsigned __int8 *)11
      || ((v123 = v121[1], v124 = *(_QWORD *)v123, v125 = *(_QWORD *)(v123 + 3), v124 == 0x74735F6567616D69)
        ? (v126 = v125 == 0x65746174735F6567)
        : (v126 = 0),
          !v126))
    {
LABEL_132:
      v127 = 2;
LABEL_133:
      v655 = v127;
      goto LABEL_134;
    }
    v655 = 1;
LABEL_134:
    __p[0] = &v648;
    __p[1] = &v655;
    v653 = &v658;
    v654 = &v656;
    v646[0] = (unsigned __int8 *)&v658;
    v646[1] = (unsigned __int8 *)&v656;
    v646[2] = (unsigned __int8 *)&v647;
    __s1[0] = v91;
    v708 = 0;
    __s1[1] = 0;
    v706 = 0;
    LOBYTE(v707) = 0;
    __s2 = v669;
    v668 = 0x400000000;
    sub_1C498CE48((char *)&__s2, 1uLL, (__int128 *)__s1);
    __s1[0] = v709;
    __s1[1] = v709;
    v706 = 16;
    v707 = 0;
    v128 = v668;
    if (!(_DWORD)v668)
      goto LABEL_148;
    do
    {
      v657 = 0;
      v651 = 0;
      v645 = 0;
      v644 = 0;
      v643 = 0;
      v129 = (char *)__s2 + 32 * v128;
      v130 = *((_QWORD *)v129 - 4);
      v131 = (unsigned __int8 *)*((_QWORD *)v129 - 3);
      v132 = *((_DWORD *)v129 - 4);
      v133 = *((_DWORD *)v129 - 3);
      v134 = *(v129 - 8);
      LODWORD(v129) = *((_DWORD *)v129 - 1);
      LODWORD(v668) = v128 - 1;
      v657 = (unsigned __int8 *)v130;
      v651 = v131;
      v645 = v132;
      v643 = __PAIR64__(v129, v133);
      v644 = v134;
      *(_QWORD *)&v689 = v90;
      *((_QWORD *)&v689 + 1) = &v644;
      *(_QWORD *)&v690 = &v655;
      *((_QWORD *)&v690 + 1) = &v645;
      *(_QWORD *)&v691 = (char *)&v647 + 1;
      *((_QWORD *)&v691 + 1) = __p;
      *(_QWORD *)&v692 = &v651;
      *((_QWORD *)&v692 + 1) = &v682;
      v693 = &v643;
      *(_QWORD *)&v694 = (char *)&v643 + 4;
      *((_QWORD *)&v694 + 1) = &v657;
      *(_QWORD *)&v695 = v646;
      v135 = *(unsigned __int8 *)(v130 + 16);
      if (v130)
      {
        v136 = v135 - 28;
        if (v135 >= 0x1C)
          goto LABEL_140;
      }
      if (v130 && v135 == 5)
      {
        v136 = *(unsigned __int16 *)(v130 + 18);
LABEL_140:
        if ((sub_1C4AD3358((uint64_t)&v689, v130, v136) & 1) != 0)
          goto LABEL_145;
      }
      for (j = *((_QWORD *)v657 + 1); j; j = *(_QWORD *)(j + 8))
      {
        v138 = *(_QWORD *)(j + 24);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, v138);
        if (v139)
        {
          v638 = (uint64_t *)v138;
          v639 = (unsigned int *)v657;
          v640 = (uint64_t *)__PAIR64__(v643, v645);
          v641 = v644;
          v642 = HIDWORD(v643);
          v140 = (_OWORD *)sub_1C47C0F60((uint64_t)&__s2, (unint64_t)&v638, 1);
          v141 = (char *)__s2 + 32 * v668;
          v142 = v140[1];
          *v141 = *v140;
          v141[1] = v142;
          LODWORD(v668) = v668 + 1;
        }
      }
LABEL_145:
      v128 = v668;
    }
    while ((_DWORD)v668);
    v89 = v623;
    if (__s1[1] != __s1[0])
      free(__s1[1]);
LABEL_148:
    if (__s2 != v669)
      free(__s2);
LABEL_150:
    if (v686 != v688)
      free(v686);
    if (v683 != &v685)
      free(v683);
    v143 = v88 + 64;
    v88 = v86;
    if (v143 != v86)
    {
      v88 = v143;
      while ((*(_QWORD *)v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v88 += 64;
        if (v88 == v86)
        {
          v88 = v86;
          break;
        }
      }
    }
  }
  while (v88 != v89);
LABEL_207:
  MEMORY[0x1CAA32FB4](0, 8);
  v163 = v650;
  if (!v650)
  {
    v618 = 0;
    k = v658;
    v628 = v656;
    v166 = v611;
    goto LABEL_230;
  }
  v164 = 40 * v650;
  v618 = (char *)operator new(v164, (std::align_val_t)8uLL);
  v165 = 0;
  v162 = (__n128)xmmword_1C6612B90;
  v166 = v611;
  while (2)
  {
    v167 = (char *)v648;
    v168 = *(_QWORD *)(v648 + v165);
    *(_QWORD *)&v618[v165] = v168;
    if ((v168 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v169 = &v618[v165 + 32];
      *(_QWORD *)&v618[v165 + 8] = v169;
      v170 = &v618[v165 + 8];
      v171 = (const void **)&v167[v165];
      *(__n128 *)&v618[v165 + 16] = v162;
      v172 = *(_QWORD *)&v167[v165 + 16];
      if (v618 != v167 && v172 != 0)
      {
        if (v172 < 3)
        {
          v174 = *(const void **)&v167[v165 + 16];
LABEL_220:
          memcpy(v169, v171[1], 2 * (_QWORD)v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v170, v169, *(_QWORD *)&v167[v165 + 16], 2);
          v174 = v171[2];
          if (v174)
          {
            v169 = *(char **)v170;
            goto LABEL_220;
          }
        }
        *(_QWORD *)&v618[v165 + 16] = v172;
        v162 = (__n128)xmmword_1C6612B90;
      }
    }
    v165 += 40;
    if (v164 != v165)
      continue;
    break;
  }
  k = v658;
  v628 = v656;
  if (v650)
  {
    v176 = 40 * v650;
    v177 = (_QWORD *)(v648 + 32);
    do
    {
      if ((*(v177 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v178 = (_QWORD *)*(v177 - 3);
        if (v177 != v178)
          free(v178);
      }
      v177 += 5;
      v176 -= 40;
    }
    while (v176);
  }
LABEL_230:
  MEMORY[0x1CAA32FB4](v648, 8, v162);
  MEMORY[0x1CAA32FB4](0, 8);
  MEMORY[0x1CAA32FB4](0, 8);
  v677 = 0;
  v676 = 0;
  v179 = (_QWORD *)v166[41];
  v619 = v163;
  if (v179 != v613)
  {
    v614 = 0;
    v617 = v163 - 1;
    v624 = k;
    while (1)
    {
      v180 = v179 + 6;
      v610 = v179;
      v181 = v179[7];
      v616 = v179 + 6;
LABEL_233:
      if ((_QWORD *)v181 != v180)
        break;
      v179 = (_QWORD *)v610[1];
      if (v179 == v613)
        goto LABEL_426;
    }
    sub_1C4AD3A6C((uint64_t *)&__s2, v181);
    if ((__s2 & 1) != 0)
    {
      v183 = ((unint64_t)__s2 >> 1) & ~(-1 << ((unint64_t)__s2 >> 58));
      if (v183)
        v182 = __clz(__rbit64(v183));
      else
        v182 = -1;
    }
    else
    {
      v182 = sub_1C476B7EC((uint64_t)__s2);
    }
    v621 = 0;
    v627 = 0;
    v184 = 0;
    v185 = 0;
    v630 = v181;
    v633 = (unint64_t *)(v181 + 48);
    while (2)
    {
      switch(v182)
      {
        case -1:
          v258 = 0;
          v259 = &v672;
          do
          {
            if (((1 << v258) & v185) != 0)
            {
              v260 = 2;
            }
            else
            {
              if (((1 << v258) & v184) == 0)
                goto LABEL_403;
              v260 = 0;
            }
            v261 = *((unsigned int *)v259 - 2);
            if (v261 >= *((unsigned int *)v259 - 1))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v259 - 2), (uint64_t)v259, v261 + 1, 16);
              v261 = *((unsigned int *)v259 - 2);
            }
            v262 = (uint64_t *)(*(v259 - 2) + 16 * v261);
            *v262 = v181;
            v262[1] = v260 | (v184 >> v258) & 1;
            ++*((_DWORD *)v259 - 2);
LABEL_403:
            ++v258;
            v259 += 10;
          }
          while (v258 != 11);
          sub_1C4914448((void ***)&__s2);
          v263 = sub_1C49C84A4(v181, 128);
          v264 = sub_1C49C84A4(v181, 1024);
          v265 = v264;
          if (v627 | v621 || v263 || v264)
          {
            v266 = !v263;
            if (v627)
              v266 = 0;
            if (!v266)
              sub_1C498D7F0(*(_QWORD *)(v615 + 248), v181, (uint64_t *)&v673, (_QWORD *)&v674 + 1);
            if (v627)
              v267 = 0;
            else
              v267 = v265;
            if (v621 || (v614 = v181, v267))
            {
              sub_1C498D7F0(*(_QWORD *)(v615 + 248), v181, (uint64_t *)&v673 + 1, &v675);
              v614 = v181;
            }
          }
          if ((*(_BYTE *)v181 & 4) != 0)
          {
            k = v624;
          }
          else
          {
            for (k = v624; (*(_WORD *)(v181 + 44) & 8) != 0; v181 = *(_QWORD *)(v181 + 8))
              ;
          }
          v181 = *(_QWORD *)(v181 + 8);
          v180 = v616;
          goto LABEL_233;
        case 0:
          if (**(_WORD **)(v181 + 16) != 6166)
            v185 = 1;
          v184 = 1;
          goto LABEL_328;
        case 1:
          v192 = *v633;
          if (*v633 < 8)
            goto LABEL_259;
          if ((v192 & 7) != 0)
          {
            v193 = (int *)(v192 & 0xFFFFFFFFFFFFFFF8);
            if ((*v633 & 7) != 3 || v193 == 0)
            {
LABEL_259:
              __s1[0] = &v706;
              __s1[1] = (void *)0x1000000000;
LABEL_260:
              v185 |= 2u;
              v184 |= 2u;
              v195 = &v706;
              goto LABEL_261;
            }
            v202 = *v193;
            __s1[0] = &v706;
            __s1[1] = (void *)0x1000000000;
            if (v202 != 1)
              goto LABEL_260;
          }
          else
          {
            v192 &= 0xFFFFFFFFFFFFFFF8;
            *v633 = v192;
            __s1[0] = &v706;
            __s1[1] = (void *)0x1000000000;
          }
          if ((v192 & 7) != 0)
          {
            v203 = (unint64_t *)((v192 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            *v633 = v192 & 0xFFFFFFFFFFFFFFF8;
            v203 = v633;
          }
          v204 = *(unsigned int *)(v625 + 264);
          if ((_DWORD)v204)
          {
            v205 = *(_QWORD **)(v625 + 256);
            v206 = &v205[2 * v204];
            v207 = (unint64_t *)((*(_QWORD *)*v203 & ((uint64_t)(*(_QWORD *)*v203 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                      + 16);
            while (1)
            {
              *(_QWORD *)&v689 = 1;
              v208 = (_QWORD *)*v205;
              if ((*v205 & 1) != 0)
                goto LABEL_289;
              v213 = (_QWORD *)operator new();
              v208 = v213;
              v214 = (_QWORD *)*v205;
              v215 = v213 + 2;
              *v213 = v213 + 2;
              v213[1] = 0x600000000;
              v216 = *((unsigned int *)v214 + 2);
              if (v213 != v214 && v216 != 0)
                break;
LABEL_311:
              *((_DWORD *)v208 + 16) = *((_DWORD *)v214 + 16);
              v181 = v630;
LABEL_289:
              *(_QWORD *)&v689 = v208;
              sub_1C496F35C((unint64_t *)&v689, v207);
              if ((v689 & 1) != 0)
              {
                if ((((unint64_t)v689 >> 1) & ~(-1 << ((unint64_t)v689 >> 58))) != 0)
                  goto LABEL_296;
              }
              else
              {
                v209 = *(unsigned int *)(v689 + 8);
                if ((_DWORD)v209)
                {
                  v210 = *(_QWORD **)v689;
                  v211 = 8 * v209;
                  while (!*v210)
                  {
                    ++v210;
                    v211 -= 8;
                    if (!v211)
                      goto LABEL_299;
                  }
LABEL_296:
                  v212 = LODWORD(__s1[1]);
                  if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__s1, (uint64_t)&v706, LODWORD(__s1[1]) + 1, 8);
                    v212 = LODWORD(__s1[1]);
                  }
                  *((_QWORD *)__s1[0] + v212) = v205;
                  ++LODWORD(__s1[1]);
                }
              }
LABEL_299:
              sub_1C4914448((void ***)&v689);
              v205 += 2;
              if (v205 == v206)
              {
                v195 = (uint64_t *)__s1[0];
                if (LODWORD(__s1[1]))
                {
                  v219 = 0;
                  k = v624;
                  do
                  {
                    v220 = *(_QWORD *)((char *)__s1[0] + v219);
                    v185 |= 1 << *(_WORD *)(v220 + 10);
                    v184 |= 1 << *(_WORD *)(v220 + 8);
                    v219 += 8;
                  }
                  while (8 * LODWORD(__s1[1]) != v219);
                }
                else
                {
                  k = v624;
                }
                goto LABEL_261;
              }
            }
            if (v216 >= 7)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v213, (uint64_t)(v213 + 2), *((unsigned int *)v214 + 2), 8);
              v218 = *((unsigned int *)v214 + 2);
              if (!(_DWORD)v218)
              {
LABEL_310:
                *((_DWORD *)v208 + 2) = v216;
                goto LABEL_311;
              }
              v215 = (void *)*v208;
            }
            else
            {
              v218 = *((unsigned int *)v214 + 2);
            }
            memcpy(v215, (const void *)*v214, 8 * v218);
            goto LABEL_310;
          }
          v195 = &v706;
LABEL_261:
          WORD2(v676) |= (unsigned __int16)v185 | (unsigned __int16)v184;
          BYTE6(v676) |= (v185 | v184) == 0;
          if (v195 != &v706)
            free(v195);
          goto LABEL_328;
        case 2:
        case 10:
          v186 = *v633;
          if (*v633 < 8)
            goto LABEL_248;
          if ((v186 & 7) != 0)
          {
            v187 = (_DWORD *)(v186 & 0xFFFFFFFFFFFFFFF8);
            v188 = (*v633 & 7) != 3 || v187 == 0;
            if (v188 || *v187 != 1)
            {
LABEL_248:
              v189 = 0;
              goto LABEL_249;
            }
          }
          else
          {
            v186 &= 0xFFFFFFFFFFFFFFF8;
            *v633 = v186;
          }
          if ((v186 & 7) != 0)
          {
            v196 = *(uint64_t **)((v186 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v196 = (uint64_t *)(v186 & 0xFFFFFFFFFFFFFFF8);
            *v633 = (unint64_t)v196;
          }
          v197 = *v196;
          v198 = v197 & 0xFFFFFFFFFFFFFFF8;
          if (v182 == 2)
          {
            if ((v197 & 4) != 0)
            {
              v189 = 1;
              goto LABEL_249;
            }
          }
          else
          {
            v189 = 1;
            if ((v197 & 4) == 0 || !v198)
            {
LABEL_249:
              v190 = sub_1C4AD3D34(v181);
              v185 |= v628;
              v184 |= k;
              v191 = 1;
              if (v182 == 2 && (v189 & 1) == 0)
              {
                v185 |= 4u;
                v184 |= 4u;
                goto LABEL_323;
              }
LABEL_321:
              if (v182 != 10)
              {
                if (v182 != 2)
                {
LABEL_327:
                  v181 = v630;
                  goto LABEL_328;
                }
LABEL_323:
                LOWORD(v676) = v676 | v184 | v185;
                if (v184 | v185)
                  v224 = v190;
                else
                  v224 = 0;
                v627 = v224;
                HIBYTE(v676) |= v224;
                goto LABEL_327;
              }
              v225 = *(_DWORD *)(v625 + 464);
              if (v225)
              {
                v226 = **(unsigned __int16 **)(v630 + 16);
                if ((sub_1C4C915C4(v226) & 0xFF00000000) != 0)
                {
                  v227 = sub_1C4C2FD5C(v226);
                  v228 = *(_QWORD *)(v630 + 32);
                  if (*(_BYTE *)(v228 + 32 * v227) != 1)
                  {
                    v231 = *(unsigned int *)(v625 + 472);
                    k = v624;
                    if ((_DWORD)v231)
                    {
                      v232 = 8 * v231;
                      v233 = *(unsigned int **)(v625 + 456);
                      while (*v233 >= 0xFFFFFFFE)
                      {
                        v233 += 2;
                        v232 -= 8;
                        if (!v232)
                          goto LABEL_349;
                      }
                    }
                    else
                    {
                      v233 = *(unsigned int **)(v625 + 456);
                    }
                    v234 = *(_QWORD *)(v625 + 456) + 8 * v231;
                    if (v233 == (unsigned int *)v234)
                    {
LABEL_349:
                      v230 = 0;
                      v225 = 0;
                    }
                    else
                    {
                      v225 = 0;
                      v230 = 0;
LABEL_345:
                      v230 |= (1 << *((_BYTE *)v233 + 4));
                      v225 |= (1 << *((_BYTE *)v233 + 5));
                      v235 = v233 + 2;
                      while (v235 != (unsigned int *)v234)
                      {
                        v236 = *v235;
                        v235 += 2;
                        if (v236 <= 0xFFFFFFFD)
                        {
                          v233 = v235 - 2;
                          goto LABEL_345;
                        }
                      }
                    }
                    goto LABEL_350;
                  }
                  LODWORD(__s1[0]) = *(_QWORD *)(v228 + 32 * v227 + 16);
                  v229 = sub_1C498D77C((uint64_t *)(v625 + 456), __s1);
                  k = v624;
                  if ((int *)(*(_QWORD *)(v625 + 456) + 8 * *(unsigned int *)(v625 + 472)) != v229)
                  {
                    v225 = (1 << *((_BYTE *)v229 + 5));
                    v230 = (1 << *((_BYTE *)v229 + 4));
LABEL_350:
                    v184 |= v230;
                    goto LABEL_351;
                  }
                  v225 = 0;
                }
                else
                {
                  v225 = 0;
                  k = v624;
                }
              }
LABEL_351:
              v185 |= v225;
              if (*(_DWORD *)(v625 + 464))
                v237 = 0;
              else
                v237 = v191;
              if (v237)
              {
                v238 = v680;
                v181 = v630;
                if ((_DWORD)v680)
                {
                  v239 = **(unsigned __int16 **)(v630 + 16);
                  v240 = sub_1C4C915C4(v239);
                  if ((v240 & 0xFF00000000) != 0
                    && ((v240 - 164) < 4 || (v240 - 78) <= 2)
                    && *(_BYTE *)(*(_QWORD *)(v630 + 32) + 32 * sub_1C4C2FD5C(v239)) != 1)
                  {
                    v242 = 0;
                    v241 = 0;
                    v243 = (unsigned __int8 *)v679;
                    v244 = 6 * v238;
                    k = v624;
                    do
                    {
                      v245 = *v243;
                      v243 += 6;
                      v242 |= 1 << (v245 & 0xF);
                      v241 |= 1 << (v245 >> 4);
                      v244 -= 6;
                    }
                    while (v244);
                    v241 = v241;
                    v184 |= v242;
                  }
                  else
                  {
                    v241 = 0;
                    k = v624;
                  }
                }
                else
                {
                  v241 = 0;
                }
                v185 |= v241;
              }
              else
              {
                v181 = v630;
              }
              WORD1(v676) |= (unsigned __int16)v185 | (unsigned __int16)v184;
              if (v185 | v184)
                v246 = v190;
              else
                v246 = 0;
              v677 |= v246;
              v621 = v246;
              if (v246 != 1
                || ((v247 = **(unsigned __int16 **)(v181 + 16), v248 = sub_1C4C915C4(v247), (v248 & 0xFF00000000) != 0)
                  ? (v249 = (v248 - 79) >= 2)
                  : (v249 = 1),
                    v249 ? (v250 = 0) : (v250 = 1),
                    (v247 - 4741) >= 2 ? (v251 = v250 == 0) : (v251 = 0),
                    v251))
              {
                v255 = 0;
              }
              else
              {
                v252 = *(_DWORD *)(*(_QWORD *)(v181 + 32) + 32 * sub_1C4C2FD5C(v247) + 16);
                if (v250)
                  v253 = 28;
                else
                  v253 = 14;
                if (v250)
                  v254 = 3;
                else
                  v254 = 7;
                v255 = ((v252 >> v253) & v254) == 0;
              }
              v678 |= v255;
LABEL_328:
              v182 = sub_1C49143F4((unint64_t *)&__s2, v182);
              continue;
            }
            v198 = *(_QWORD *)(v198 + 16);
          }
          v190 = sub_1C4AD3D34(v181);
          v191 = v198 == 0;
          if ((_DWORD)v619 && v198)
          {
            v199 = ((v198 >> 4) ^ (v198 >> 9)) & v617;
            v200 = &v618[40 * v199];
            v201 = *(_QWORD *)v200;
            if (v198 == *(_QWORD *)v200)
            {
LABEL_278:
              if (v199 != (_DWORD)v619)
              {
                v221 = *((_QWORD *)v200 + 2);
                if (v221)
                {
                  v222 = 2 * v221;
                  v223 = (_BYTE *)(*((_QWORD *)v200 + 1) + 1);
                  do
                  {
                    v185 |= 1 << *v223;
                    v184 |= 1 << *(v223 - 1);
                    v223 += 2;
                    v222 -= 2;
                  }
                  while (v222);
                }
                v191 = 0;
                goto LABEL_321;
              }
            }
            else
            {
              v256 = 1;
              while (v201 != -4096)
              {
                v257 = v199 + v256++;
                v199 = v257 & v617;
                v200 = &v618[40 * v199];
                v201 = *(_QWORD *)v200;
                if (v198 == *(_QWORD *)v200)
                  goto LABEL_278;
              }
            }
            v191 = 0;
          }
          v185 |= v628;
          v184 |= k;
          goto LABEL_321;
        default:
          goto LABEL_328;
      }
    }
  }
  v614 = 0;
LABEL_426:
  NearestCommonDominator = *((_QWORD *)&v673 + 1);
  if ((_QWORD)v673)
  {
    v269 = v611;
    v270 = v614;
    if (*((_QWORD *)&v673 + 1))
    {
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v615 + 248), v673, *((uint64_t *)&v673 + 1));
      goto LABEL_430;
    }
    *(_QWORD *)&v674 = v673;
LABEL_437:
    v270 = *((_QWORD *)&v674 + 1);
    goto LABEL_438;
  }
  v269 = v611;
  v270 = v614;
LABEL_430:
  *(_QWORD *)&v674 = NearestCommonDominator;
  if (NearestCommonDominator)
  {
    if ((_QWORD)v673 != *((_QWORD *)&v673 + 1))
    {
      if (NearestCommonDominator == (_QWORD)v673)
        goto LABEL_437;
      if (NearestCommonDominator == *((_QWORD *)&v673 + 1))
        v270 = v675;
      else
        v270 = 0;
    }
LABEL_438:
    *((_QWORD *)&v675 + 1) = v270;
  }
  if ((_DWORD)v619)
  {
    v271 = 40 * v619;
    v272 = v618 + 32;
    do
    {
      if ((*((_QWORD *)v272 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v273 = (char *)*((_QWORD *)v272 - 3);
        if (v272 != v273)
          free(v273);
      }
      v272 += 40;
      v271 -= 40;
    }
    while (v271);
  }
  MEMORY[0x1CAA32FB4](v618, 8);
  sub_1C495C918((uint64_t)&v635);
  MEMORY[0x1CAA32FB4](v635, 8);
  if (v659 != &v660.u64[1])
    free(v659);
  v626 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v606 + 24))(v606, *v269);
  if ((**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v626)(v626, 29, 0, 1, 2)
    || (v275 = *(_QWORD *)(*v269 + 40), ((*(unsigned __int16 *)(*v269 + 18) >> 4) & 0x3FFu) - 103 >= 2)
    && (__s1[0] = "agx.sample_rate", v709[0] = 259, !llvm::Module::getNamedMetadata(v275, (uint64_t)__s1)))
  {
    v274 = 0;
  }
  else
  {
    sub_1C5EA6284(v275, 0x100u, (uint64_t)__s1);
    v276 = v710;
    if (v710 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v615 + 248) + 72) + 32) == 1)
    {
      __s2 = v669;
      v668 = 0x600000000;
      sub_1C4765AA4((char *)&__s2, (v710 + 63) >> 6, 0);
      v670 = v276;
      v277 = v269[41];
      if ((_QWORD *)v277 != v613)
      {
        v278 = v269[41];
        do
        {
          if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(v615 + 248), v278, v277))
          {
            for (m = *(_QWORD *)(v278 + 56); m != v278 + 48; m = *(_QWORD *)(m + 8))
            {
              if ((~*(_DWORD *)(*(_QWORD *)(m + 16) + 16) & 0x800200) == 0)
              {
                sub_1C4A16D7C(m, (uint64_t)&v689);
                if (!BYTE14(v689))
                {
                  sub_1C4A16EB0((unsigned int *)&v689, (llvm::APInt *)&v659);
                  v280 = (unsigned int *)(v660.i32[0] >= 0x41u ? v659 : &v659);
                  sub_1C4914230((uint64_t)&__s2, v280, (((unint64_t)v660.u32[0] + 63) >> 5) & 0xFFFFFFE);
                  if (v660.i32[0] >= 0x41u)
                  {
                    if (v659)
                      MEMORY[0x1CAA32F9C](v659, 0x1000C8000313F17);
                  }
                }
              }
              if ((*(_BYTE *)m & 4) == 0)
              {
                while ((*(_WORD *)(m + 44) & 8) != 0)
                  m = *(_QWORD *)(m + 8);
              }
            }
          }
          v278 = *(_QWORD *)(v278 + 8);
        }
        while ((_QWORD *)v278 != v613);
      }
      v281 = v668;
      v282 = LODWORD(__s1[1]);
      if (LODWORD(__s1[1]) >= v668)
        v283 = v668;
      else
        v283 = LODWORD(__s1[1]);
      v284 = __s2;
      if ((_DWORD)v283)
      {
        v285 = (uint64_t *)__s1[0];
        v286 = __s2;
        v287 = v283;
        do
        {
          v288 = *v285++;
          *v286++ &= v288;
          --v287;
        }
        while (v287);
      }
      if (v281 > v282)
      {
        do
        {
          v284[v283] = 0;
          LODWORD(v283) = v283 + 1;
        }
        while (v281 != (_DWORD)v283);
      }
      v274 = v710 == v670 && memcmp(__s1[0], v284, 8 * v282) == 0;
      if (v284 != (_QWORD *)v669)
        free(v284);
    }
    else
    {
      v274 = 0;
    }
    if (__s1[0] != &v706)
      free(__s1[0]);
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL4, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v626 + 8))(v626, 30, v274, 1, 0, 1, 2);
  __s2 = (void *)1;
  for (n = 8; n != 1672; n += 104)
    *(void **)((char *)&__s2 + n) = (void *)-4096;
  v671[0] = 1;
  for (ii = 1680; ii != 3344; ii += 104)
    *(void **)((char *)&__s2 + ii) = (void *)-4096;
  sub_1C498D8A0((uint64_t)&__s2, (uint64_t)v269, v615);
  v303 = dword_1ED7EE56C;
  v648 = 0;
  LODWORD(v649) = 0;
  v304 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v269[1] + 16))(v269[1], *v269);
  if (!*(_BYTE *)(v304 + 289))
    goto LABEL_736;
  v305 = (_BYTE *)v304;
  v635 = 0;
  v635 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v269[2] + 104))(v269[2]);
  v307 = v613;
  do
  {
    v307 = (_QWORD *)*v307;
    if (v307 == v613)
      goto LABEL_696;
  }
  while (((v307[12] - v307[11]) & 0x7FFFFFFF8) != 0);
  v620 = v303;
  v622 = v305;
  v308 = (llvm::MachineBasicBlock *)v269[41];
  v658 = (*(_WORD *)(*v269 + 18) & 0x3FF0) == 1728;
  FirstInstrTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstInstrTerminator(v308);
  if (v605)
    FirstInstrTerminator = sub_1C4AD3DC0(v308, 0);
  v310 = (uint64_t)FirstInstrTerminator;
  if ((_QWORD *)((char *)v308 + 48) == FirstInstrTerminator)
  {
    v657 = 0;
LABEL_537:
    v312 = HIDWORD(v605);
  }
  else
  {
    v311 = (unsigned __int8 *)FirstInstrTerminator[7];
    v657 = v311;
    v312 = HIDWORD(v605);
    if (v311)
    {
      llvm::MetadataTracking::track((uint64_t)&v657, v311, 2);
      goto LABEL_537;
    }
  }
  v313 = (unsigned __int8 *)v269[2];
  v656 = 6222;
  v314 = (v313[298] | v313[299] | v313[300]) == 0;
  v655 = 2 * v314;
  if (v313[363])
    v315 = BYTE6(v676) == 0;
  else
    v315 = 0;
  v316 = !v315;
  if (v315)
    v317 = 0;
  else
    v317 = 2 * v314;
  v638 = &v635;
  v639 = &v656;
  v640 = &v648;
  if (v312)
    sub_1C4AD3F04((uint64_t)&v638, (uint64_t)v308, v310, v312, v317 | 1);
  if ((_DWORD)v605)
    sub_1C4AD3F04((uint64_t)&v638, (uint64_t)v308, v310, v605, v317);
  v306.n128_f64[0] = sub_1C5EAC020(*(_QWORD *)(*v269 + 40), (uint64_t)__p);
  if (!v605 && BYTE6(v676))
  {
    v318 = ((*(unsigned __int16 *)(*v269 + 18) >> 4) & 0x3FFu) - 103 < 2 ? v316 : 0;
    if ((v318 & v314) == 1)
    {
      v319 = sub_1C4AD3DC0(v308, 0x100000001);
      sub_1C4AD3F04((uint64_t)&v638, (uint64_t)v308, (uint64_t)v319, 0, v317);
    }
  }
  v320 = 0;
  v659 = &v657;
  v660.i64[0] = (uint64_t)&v635;
  v660.i64[1] = (uint64_t)v313;
  v661.i64[0] = (uint64_t)&v655;
  v661.i64[1] = (uint64_t)&v658;
  v662.i64[0] = (uint64_t)&v648;
  v631 = v274;
  while (2)
  {
    v321 = &v671[10 * v320 + 209];
    v322 = 1 << v320;
    v323 = *((unsigned int *)v321 + 2);
    if ((_DWORD)v323)
    {
      v634 = (unsigned __int16)(v322 & WORD2(v676));
      __s1[0] = v709;
      __s1[1] = v709;
      v706 = 16;
      v707 = 0;
      *(_QWORD *)&v689 = &v691;
      *((_QWORD *)&v689 + 1) = &v691;
      *(_QWORD *)&v690 = 16;
      DWORD2(v690) = 0;
      if (((unsigned __int16)v322 & WORD1(v676)) != 0 && ((unsigned __int16)v322 & (unsigned __int16)v676) != 0)
      {
        v324 = (_QWORD *)v674;
        v325 = *((_QWORD *)&v675 + 1);
        if (!*((_QWORD *)&v675 + 1))
          goto LABEL_571;
LABEL_570:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, v325);
        v323 = *((unsigned int *)v321 + 2);
        if ((_DWORD)v323)
          goto LABEL_571;
LABEL_614:
        if (v324)
          goto LABEL_615;
LABEL_637:
        LODWORD(v648) = v648 | v322;
      }
      else
      {
        if (((unsigned __int16)v322 & WORD1(v676)) == 0)
        {
          if (((unsigned __int16)v322 & (unsigned __int16)v676) == 0)
          {
            v324 = 0;
            goto LABEL_571;
          }
          v324 = (_QWORD *)v673;
          v325 = *((_QWORD *)&v674 + 1);
          if (!*((_QWORD *)&v674 + 1))
            goto LABEL_571;
          goto LABEL_570;
        }
        v324 = (_QWORD *)*((_QWORD *)&v673 + 1);
        v325 = v675;
        if ((_QWORD)v675)
          goto LABEL_570;
LABEL_571:
        v326 = *v321;
        v327 = *v321 + 16 * v323;
        LoopPreheader = 0;
        if (!v634)
          LOBYTE(v274) = 0;
        do
        {
          if (sub_1C4AD3D34(*(_QWORD *)v326))
          {
            if (!v274)
            {
              v329 = *(_QWORD *)v326;
              v330 = *(_QWORD *)(*(_QWORD *)v326 + 24);
              if (LoopPreheader)
              {
                if (v330)
                {
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v609);
                  v330 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*((_QWORD *)v609 + 165), (uint64_t)LoopPreheader, v330);
                  v329 = *(_QWORD *)v326;
                }
                else
                {
                  v330 = (uint64_t)LoopPreheader;
                }
              }
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v689, v329);
              LoopPreheader = (llvm::MachineBasicBlock *)v330;
            }
            v333 = *(_QWORD **)(*(_QWORD *)v326 + 24);
            if (v324)
            {
              if (v333)
                v333 = (_QWORD *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v615 + 248), (uint64_t)v324, (uint64_t)v333);
              else
                v333 = v324;
            }
            v324 = sub_1C4AD42F8(v333);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, *(_QWORD *)v326);
          }
          else
          {
            v331 = *(_BYTE *)(v326 + 8);
            if ((v331 & 1) != 0)
            {
              v332 = *(_QWORD **)(*(_QWORD *)v326 + 24);
              if (v324)
              {
                if (v332)
                  v332 = (_QWORD *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(v615 + 248), (uint64_t)v324, (uint64_t)v332);
                else
                  v332 = v324;
              }
              v324 = sub_1C4AD42F8(v332);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)__s1, *(_QWORD *)v326);
            }
            if ((v331 & 2) != 0)
            {
              v334 = *(_QWORD *)v326;
              v335 = *(_QWORD *)(*(_QWORD *)v326 + 24);
              if (LoopPreheader)
              {
                if (v335)
                {
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v609);
                  v335 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*((_QWORD *)v609 + 165), (uint64_t)LoopPreheader, v335);
                  v334 = *(_QWORD *)v326;
                }
                else
                {
                  v335 = (uint64_t)LoopPreheader;
                }
              }
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v689, v334);
              LoopPreheader = (llvm::MachineBasicBlock *)v335;
            }
          }
          v326 += 16;
        }
        while (v326 != v327);
        if (!LoopPreheader)
        {
          LOBYTE(v274) = v631;
          goto LABEL_614;
        }
        v336 = *(_DWORD *)(v612 + 264);
        LOBYTE(v274) = v631;
        if (v336)
        {
          v337 = *(_QWORD *)(v612 + 248);
          v338 = v336 - 1;
          v339 = (v336 - 1) & ((LoopPreheader >> 4) ^ (LoopPreheader >> 9));
          v340 = *(llvm::MachineBasicBlock **)(v337 + 16 * v339);
          if (LoopPreheader == v340)
          {
LABEL_604:
            v343 = *(_QWORD *)(v337 + 16 * v339 + 8);
            if (v343)
              LoopPreheader = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(v343);
          }
          else
          {
            v341 = 1;
            while (v340 != (llvm::MachineBasicBlock *)-4096)
            {
              v342 = v339 + v341++;
              v339 = v342 & v338;
              v340 = *(llvm::MachineBasicBlock **)(v337 + 16 * v339);
              if (LoopPreheader == v340)
                goto LABEL_604;
            }
          }
        }
        v344 = (_QWORD *)((char *)LoopPreheader + 48);
        for (jj = *((_QWORD *)LoopPreheader + 7); (_QWORD *)jj != v344; jj = *(_QWORD *)(jj + 8))
        {
          v346 = sub_1C477672C((uint64_t)&v689, jj);
          if (*((_QWORD *)&v689 + 1) == (_QWORD)v689)
            v347 = (unsigned int *)&v690 + 1;
          else
            v347 = (unsigned int *)&v690;
          if (v346 != (_QWORD *)(*((_QWORD *)&v689 + 1) + 8 * *v347))
          {
            v344 = (_QWORD *)jj;
            break;
          }
        }
        sub_1C4AD435C((uint64_t)&v659, (uint64_t)LoopPreheader, v344, 1 << v320, v656, v634 != 0);
        if (!v324)
          goto LABEL_637;
LABEL_615:
        if (v634)
          v348 = v274;
        else
          v348 = 0;
        if (!v348)
        {
          v349 = v324 + 6;
          v350 = v324 + 6;
          while (1)
          {
            v350 = (_QWORD *)(*v350 & 0xFFFFFFFFFFFFFFF8);
            if (v349 == v350)
              break;
            v351 = sub_1C477672C((uint64_t)__s1, (uint64_t)v350);
            if (__s1[1] == __s1[0])
              v352 = (uint64_t *)((char *)&v706 + 4);
            else
              v352 = &v706;
            v353 = v350;
            if (v351 != (_QWORD *)((char *)__s1[1] + 8 * *(unsigned int *)v352))
              goto LABEL_627;
          }
          v353 = (_QWORD *)v324[7];
LABEL_627:
          if (v353 == v349)
          {
            v651 = 0;
LABEL_642:
            v355 = v324 + 6;
          }
          else
          {
            v354 = (unsigned __int8 *)v353[7];
            v651 = v354;
            if (v354)
              llvm::MetadataTracking::track((uint64_t)&v651, v354, 2);
            v355 = v353;
            if (v320 != 1)
            {
              v355 = v353;
              while (*(_WORD *)v355[2] == 544)
              {
                v355 = (_QWORD *)v355[1];
                if (v355 == v349)
                  goto LABEL_642;
              }
            }
            if (v349 != v350 && v355 == v353 && v355 != v349)
              v355 = (_QWORD *)v353[1];
          }
          v356 = *(_QWORD *)(v635 + 8);
          v357 = (llvm::MachineFunction *)v324[4];
          v646[0] = v651;
          if (v651)
            llvm::MetadataTracking::track((uint64_t)v646, v651, 2);
          v358 = (llvm::MachineInstr *)*((_QWORD *)v357 + 28);
          if (v358)
            *((_QWORD *)v357 + 28) = *(_QWORD *)v358;
          else
            v358 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v357 + 128, 72, 3);
          v682 = v646[0];
          if (v646[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v646, v646[0], (uint64_t)&v682);
            v646[0] = 0;
          }
          llvm::MachineInstr::MachineInstr(v358, v357, v356 + 312144, &v682, 0);
          if (v682)
            llvm::MetadataTracking::untrack((uint64_t)&v682, v682);
          if (v646[0])
            llvm::MetadataTracking::untrack((uint64_t)v646, v646[0]);
          if (v349 != v355 && (*((_WORD *)v355 + 22) & 4) != 0)
            *((_WORD *)v358 + 22) |= 0xCu;
          sub_1C512CA10(v324 + 5, v355, (uint64_t)v358);
          LODWORD(v682) = 1;
          v683 = 0;
          v684 = 0;
          llvm::MachineInstr::addOperand(v358, v357, (const llvm::MachineOperand *)&v682);
          LODWORD(v682) = 1;
          v683 = 0;
          v684 = 1 << v320;
          llvm::MachineInstr::addOperand(v358, v357, (const llvm::MachineOperand *)&v682);
          HIDWORD(v648) |= v322;
          if (v651)
            llvm::MetadataTracking::untrack((uint64_t)&v651, v651);
          LOBYTE(v274) = v631;
        }
      }
      if (*((_QWORD *)&v689 + 1) != (_QWORD)v689)
        free(*((void **)&v689 + 1));
      if (__s1[1] != __s1[0])
        free(__s1[1]);
    }
    else
    {
      LODWORD(v648) = v648 | v322;
    }
    if (++v320 != 10)
      continue;
    break;
  }
  v269 = v611;
  if (v274)
  {
    v359 = v611[41];
    if ((_QWORD *)v359 == v613)
    {
      v360 = 0;
      v359 = 0;
    }
    else
    {
      v360 = 0;
      v361 = BYTE4(v676);
      do
      {
        for (kk = *(_QWORD *)(v359 + 56); kk != v359 + 48; kk = *(_QWORD *)(kk + 8))
        {
          v363 = *(_QWORD *)(*(_QWORD *)(kk + 16) + 16) & 0x800200;
          v364 = v363 == 8389120;
          if ((v361 & 1) != 0)
          {
            sub_1C4AD3A6C((uint64_t *)__s1, kk);
            if (((uint64_t)__s1[0] & 1) != 0)
              v365 = ((unint64_t)__s1[0] >> 1) & ~(-1 << ((unint64_t)__s1[0] >> 58));
            else
              v365 = **(_QWORD **)__s1[0];
            v364 = (v363 == 8389120) | v365;
            sub_1C4914448((void ***)__s1);
          }
          if ((v364 & 1) != 0)
          {
            v360 = (_QWORD *)kk;
            goto LABEL_683;
          }
        }
        v359 = *(_QWORD *)(v359 + 8);
      }
      while ((_QWORD *)v359 != v613);
      v359 = 0;
    }
LABEL_683:
    v366 = sub_1C498EC7C((uint64_t)&__s2, v359);
    v367 = &v668;
    if ((__s2 & 1) != 0)
    {
      v368 = 16;
    }
    else
    {
      v367 = (uint64_t *)v668;
      v368 = v669[0];
    }
    if (&v367[13 * v368] != v366 && *((_DWORD *)v366 + 7) != *((_DWORD *)v366 + 8))
    {
      v359 = v611[41];
      v360 = (_QWORD *)(v359 + 48);
    }
    if (v359)
      sub_1C4AD435C((uint64_t)&v659, v359, v360, WORD2(v676), v656, 1);
  }
  if ((_BYTE)v654 && SHIBYTE(v653) < 0)
    operator delete(__p[0]);
  v305 = v622;
  v303 = v620;
  if (v657)
    llvm::MetadataTracking::untrack((uint64_t)&v657, v657);
LABEL_696:
  if (!v303 || v305[369])
  {
    v369 = (unsigned __int16)v649 & (unsigned __int16)~WORD2(v648) & 0x3FF;
    if (((unsigned __int16)v649 & (unsigned __int16)~WORD2(v648) & 0x3FF) != 0)
    {
      v370 = (*(uint64_t (**)(_BYTE *, __n128))(*(_QWORD *)v305 + 104))(v305, v306);
      v371 = *v613;
      v372 = (_QWORD *)(*v613 + 48);
      v373 = *v372 & 0xFFFFFFFFFFFFFFF8;
      if (v373 && (*(_BYTE *)v373 & 4) != 0)
      {
        v374 = *(_WORD *)(v373 + 44);
      }
      else
      {
        while (1)
        {
          v374 = *(_WORD *)(v373 + 44);
          if ((v374 & 4) == 0)
            break;
          v373 = *(_QWORD *)v373 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v375 = *(_QWORD *)(v370 + 8) + 312144;
      if ((v374 & 4) != 0)
      {
        v376 = *(llvm::MachineFunction **)(v371 + 32);
        v379 = *(unsigned __int8 **)(v373 + 56);
        *(_QWORD *)&v689 = v379;
        if (v379)
          llvm::MetadataTracking::track((uint64_t)&v689, v379, 2);
        v378 = *((_QWORD *)v376 + 28);
        if (v378)
          *((_QWORD *)v376 + 28) = *(_QWORD *)v378;
        else
          v378 = sub_1C484358C((uint64_t)v376 + 128, 72, 3);
        __s1[0] = (void *)v689;
        if ((_QWORD)v689)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v689, (unsigned __int8 *)v689, (uint64_t)__s1);
          *(_QWORD *)&v689 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v378, v376, v375, (unsigned __int8 **)__s1, 0);
        if (__s1[0])
          llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
        if ((_QWORD)v689)
          llvm::MetadataTracking::untrack((uint64_t)&v689, (unsigned __int8 *)v689);
        if (v372 != (_QWORD *)v373 && (*(_WORD *)(v373 + 44) & 4) != 0)
          *(_WORD *)(v378 + 44) |= 0xCu;
        sub_1C512CA10((uint64_t *)(v371 + 40), (uint64_t *)v373, v378);
      }
      else
      {
        v376 = *(llvm::MachineFunction **)(v371 + 32);
        v377 = *(unsigned __int8 **)(v373 + 56);
        *(_QWORD *)&v689 = v377;
        if (v377)
          llvm::MetadataTracking::track((uint64_t)&v689, v377, 2);
        v378 = *((_QWORD *)v376 + 28);
        if (v378)
          *((_QWORD *)v376 + 28) = *(_QWORD *)v378;
        else
          v378 = sub_1C484358C((uint64_t)v376 + 128, 72, 3);
        __s1[0] = (void *)v689;
        if ((_QWORD)v689)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v689, (unsigned __int8 *)v689, (uint64_t)__s1);
          *(_QWORD *)&v689 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v378, v376, v375, (unsigned __int8 **)__s1, 0);
        if (__s1[0])
          llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
        if ((_QWORD)v689)
          llvm::MetadataTracking::untrack((uint64_t)&v689, (unsigned __int8 *)v689);
        v380 = *(_QWORD *)(v371 + 40);
        *(_QWORD *)(v378 + 24) = v380;
        v381 = *(_QWORD *)(v380 + 32);
        v382 = *(unsigned int *)(v378 + 40);
        if ((_DWORD)v382)
        {
          v598 = *(_QWORD *)(v378 + 32);
          v599 = *(_QWORD *)(v381 + 40);
          v600 = 32 * v382;
          do
          {
            if (!*(_BYTE *)v598)
            {
              v601 = *(unsigned int *)(v598 + 4);
              if ((int)v601 >= 0)
                v602 = (uint64_t *)(*(_QWORD *)(v599 + 272) + 8 * v601);
              else
                v602 = (uint64_t *)(*(_QWORD *)(v599 + 24) + 16 * (v601 & 0x7FFFFFFF) + 8);
              v603 = *v602;
              if (*v602)
              {
                v604 = *(_QWORD *)(v603 + 16);
                *(_QWORD *)(v603 + 16) = v598;
                *(_QWORD *)(v598 + 16) = v604;
                if ((*(_BYTE *)(v598 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v598 + 24) = v603;
                }
                else
                {
                  *(_QWORD *)(v598 + 24) = 0;
                  v602 = (uint64_t *)(v604 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v598 + 16) = v598;
                *(_QWORD *)(v598 + 24) = 0;
              }
              *v602 = v598;
            }
            v598 += 32;
            v600 -= 32;
          }
          while (v600);
        }
        v383 = *(_QWORD *)(v381 + 728);
        if (v383)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v383 + 24))(v383, v378);
        v384 = *(_QWORD *)v373 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v378 = v384 | *(_QWORD *)v378 & 7;
        *(_QWORD *)(v378 + 8) = v373;
        *(_QWORD *)(v384 + 8) = v378;
        *(_QWORD *)v373 = *(_QWORD *)v373 & 7 | v378;
      }
      LODWORD(__s1[0]) = 1;
      v706 = 0;
      __s1[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v378, v376, (const llvm::MachineOperand *)__s1);
      LODWORD(__s1[0]) = 1;
      __s1[1] = 0;
      v706 = v369;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v378, v376, (const llvm::MachineOperand *)__s1);
    }
  }
LABEL_736:
  v385 = dword_1ED7EE56C;
  v659 = (void *)1;
  v660 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v661 = v660;
  v662 = v660;
  v663 = v660;
  v664 = v666;
  v665 = 0x800000000;
  __s1[0] = (void *)1;
  for (mm = 1; mm != 209; mm += 13)
    __s1[mm] = (void *)-4096;
  v711[0] = 1;
  for (nn = 210; nn != 418; nn += 13)
    __s1[nn] = (void *)-4096;
  sub_1C498D8A0((uint64_t)__s1, (uint64_t)v269, v615);
  v388 = (const llvm::TargetSubtargetInfo *)v269[2];
  (*(void (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v388 + 104))(v388);
  v690 = unk_1C86637F0;
  v691 = xmmword_1C8663800;
  v692 = unk_1C8663810;
  v689 = llvm::MCSchedModel::Default;
  v695 = unk_1C86637F0;
  v696 = xmmword_1C8663800;
  v697 = unk_1C8663810;
  v693 = 0;
  v698 = 0;
  v694 = llvm::MCSchedModel::Default;
  v700 = 0u;
  v701 = 0u;
  v699 = 0u;
  v702 = v704;
  v703 = 0x1000000000;
  v704[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)&v689, v388);
  v389 = (_QWORD *)v269[41];
  if (v389 != v613)
  {
    v632 = v385;
    do
    {
      v629 = v389;
      v391 = v389[6];
      v390 = v389 + 6;
      v392 = v391 & 0xFFFFFFFFFFFFFFF8;
      if ((v391 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v392 & 4) == 0)
      {
        while ((*(_WORD *)(v392 + 44) & 4) != 0)
          v392 = *(_QWORD *)v392 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((_QWORD *)v392 != v390)
      {
        v393 = (char)v659;
        v394 = v392 >> 4;
        if ((v659 & 1) != 0)
        {
          v395 = 8;
          v396 = &v660;
        }
        else
        {
          v395 = v660.i32[2];
          if (!v660.i32[2])
            goto LABEL_757;
          v396 = (int64x2_t *)v660.i64[0];
        }
        v397 = v395 - 1;
        v398 = v397 & (v394 ^ (v392 >> 9));
        v399 = v396->i64[v398];
        if (v392 == v399)
          goto LABEL_928;
        v400 = 1;
        while (v399 != -4096)
        {
          v401 = v398 + v400++;
          v398 = v401 & v397;
          v399 = v396->i64[v398];
          if (v392 == v399)
            goto LABEL_928;
        }
LABEL_757:
        v402 = **(unsigned __int16 **)(v392 + 16);
        if (v402 == 6503)
        {
          v405 = *(_QWORD *)v392 & 0xFFFFFFFFFFFFFFF8;
          v406 = sub_1C4C2FD5C(6503);
          if (!v405 || (*(_BYTE *)v405 & 4) == 0)
          {
            while ((*(_WORD *)(v405 + 44) & 4) != 0)
              v405 = *(_QWORD *)v405 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((_QWORD *)v405 != v390)
          {
            v407 = 0;
            v408 = v406;
            while (1)
            {
              v409 = *(_QWORD *)v405 & 0xFFFFFFFFFFFFFFF8;
              if (!v409 || (*(_BYTE *)v409 & 4) == 0)
              {
                while ((*(_WORD *)(v409 + 44) & 4) != 0)
                  v409 = *(_QWORD *)v409 & 0xFFFFFFFFFFFFFFF8;
              }
              v410 = v405 >> 4;
              if ((v659 & 1) != 0)
              {
                v411 = 8;
                v412 = &v660;
              }
              else
              {
                v411 = v660.i32[2];
                if (!v660.i32[2])
                  goto LABEL_782;
                v412 = (int64x2_t *)v660.i64[0];
              }
              v413 = v411 - 1;
              v414 = v413 & (v410 ^ (v405 >> 9));
              v415 = v412->i64[v414];
              if (v405 != v415)
                break;
LABEL_812:
              v405 = v409;
              if ((_QWORD *)v409 == v390)
              {
LABEL_815:
                if (v407)
                {
                  v439 = *(_QWORD *)(v392 + 32) + 32 * sub_1C4C2FD5C(6503);
                  *(_QWORD *)(v439 + 16) = v407 | *(_DWORD *)(v439 + 16);
                }
                goto LABEL_817;
              }
            }
            v416 = 1;
            while (v415 != -4096)
            {
              v417 = v414 + v416++;
              v414 = v417 & v413;
              v415 = v412->i64[v414];
              if (v405 == v415)
                goto LABEL_812;
            }
LABEL_782:
            v418 = *(_QWORD *)(v405 + 16);
            if (*(_WORD *)v418 != 6503)
              goto LABEL_815;
            v419 = *(_QWORD *)(v418 + 16);
            v420 = ~(_DWORD)v419 & 0x800200;
            v421 = v419 & 0x800100;
            if (v420)
              v422 = v421 == 8388864;
            else
              v422 = 1;
            if (v422)
              goto LABEL_812;
            v423 = *(_DWORD *)(*(_QWORD *)(v405 + 32) + 32 * v408 + 16);
            v682 = (unsigned __int8 *)v405;
            if ((v659 & 1) != 0)
            {
              v424 = 8;
              v425 = &v660;
LABEL_791:
              v426 = v410 ^ (v405 >> 9);
              v427 = v424 - 1;
              v428 = (v424 - 1) & v426;
              v429 = &v425->i64[v428];
              v430 = *v429;
              if (v405 != *v429)
              {
                v431 = 0;
                v432 = 1;
                while (v430 != -4096)
                {
                  if (v431)
                    v433 = 0;
                  else
                    v433 = v430 == -8192;
                  if (v433)
                    v431 = v429;
                  v434 = v428 + v432++;
                  v428 = v434 & v427;
                  v429 = &v425->i64[v428];
                  v430 = *v429;
                  if (v405 == *v429)
                    goto LABEL_807;
                }
                if (v431)
                  v435 = v431;
                else
                  v435 = v429;
                goto LABEL_804;
              }
            }
            else
            {
              v424 = v660.i32[2];
              if (v660.i32[2])
              {
                v425 = (int64x2_t *)v660.i64[0];
                goto LABEL_791;
              }
              v435 = 0;
LABEL_804:
              v436 = sub_1C486D2E8((uint64_t)&v659, (uint64_t)&v682, &v682, v435);
              *v436 = v682;
              v437 = v682;
              v438 = v665;
              if (v665 >= (unint64_t)HIDWORD(v665))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v664, (uint64_t)v666, v665 + 1, 8);
                v438 = v665;
              }
              *((_QWORD *)v664 + v438) = v437;
              LODWORD(v665) = v665 + 1;
            }
LABEL_807:
            v407 |= v423;
            v409 = *(_QWORD *)v405 & 0xFFFFFFFFFFFFFFF8;
            if (!v409 || (*(_BYTE *)v409 & 4) == 0)
            {
              while ((*(_WORD *)(v409 + 44) & 4) != 0)
                v409 = *(_QWORD *)v409 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_812;
          }
LABEL_817:
          v440 = *(_QWORD *)(v392 + 24);
          if (v440 != *v613)
          {
            v441 = *(_DWORD *)(v612 + 264);
            if (!v441)
              goto LABEL_824;
            v442 = *(_QWORD *)(v612 + 248);
            v443 = v441 - 1;
            v444 = (v441 - 1) & ((v440 >> 4) ^ (v440 >> 9));
            v445 = *(_QWORD *)(v442 + 16 * v444);
            if (v440 == v445)
            {
LABEL_823:
              if (!*(_QWORD *)(v442 + 16 * v444 + 8))
                goto LABEL_824;
            }
            else
            {
              v446 = 1;
              while (v445 != -4096)
              {
                v447 = v444 + v446++;
                v444 = v447 & v443;
                v445 = *(_QWORD *)(v442 + 16 * v444);
                if (v440 == v445)
                  goto LABEL_823;
              }
LABEL_824:
              v448 = sub_1C498EC7C((uint64_t)__s1, v440);
              v449 = &__s1[1];
              if (((uint64_t)__s1[0] & 1) != 0)
              {
                v450 = 16;
              }
              else
              {
                v449 = (void **)__s1[1];
                v450 = v706;
              }
              if (&v449[13 * v450] == (void **)v448 || *((_DWORD *)v448 + 7) == *((_DWORD *)v448 + 8))
                goto LABEL_928;
            }
LABEL_829:
            v682 = (unsigned __int8 *)v392;
            if ((v659 & 1) != 0)
            {
              v451 = 8;
              v452 = &v660;
            }
            else
            {
              v451 = v660.i32[2];
              if (!v660.i32[2])
                goto LABEL_935;
              v452 = (int64x2_t *)v660.i64[0];
            }
            v482 = v451 - 1;
            v483 = v482 & (v394 ^ (v392 >> 9));
            v484 = &v452->i64[v483];
            v485 = *v484;
            if (v392 == *v484)
              goto LABEL_928;
            v486 = 0;
            v487 = 1;
            while (v485 != -4096)
            {
              if (v486)
                v488 = 0;
              else
                v488 = v485 == -8192;
              if (v488)
                v486 = v484;
              v489 = v483 + v487++;
              v483 = v489 & v482;
              v484 = &v452->i64[v483];
              v485 = *v484;
              if (v392 == *v484)
                goto LABEL_928;
            }
LABEL_922:
            if (v486)
              v502 = v486;
            else
              v502 = v484;
            goto LABEL_925;
          }
          v468 = v611[2];
          if (*(_BYTE *)(v468 + 369))
            v469 = 1;
          else
            v469 = v632 == 0;
          if (v469)
            goto LABEL_928;
          v470 = 0;
          v471 = *(_QWORD *)(v440 + 48) & 0xFFFFFFFFFFFFFFF8;
          if ((v659 & 1) != 0)
            v472 = &v660;
          else
            v472 = (int64x2_t *)v660.i64[0];
          if ((v659 & 1) != 0)
            v473 = 7;
          else
            v473 = v660.i32[2] - 1;
          v474 = v392;
          while (1)
          {
LABEL_874:
            if (!v471 || (v475 = *(_QWORD *)(v440 + 48) & 0xFFFFFFFFFFFFFFF8, (*(_BYTE *)v471 & 4) == 0))
            {
              v475 = *(_QWORD *)(v440 + 48) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_WORD *)(v471 + 44) & 4) != 0)
              {
                v475 = *(_QWORD *)(v440 + 48) & 0xFFFFFFFFFFFFFFF8;
                do
                  v475 = *(_QWORD *)v475 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v475 + 44) & 4) != 0);
              }
            }
            if (v474 == v475)
              goto LABEL_829;
            if (!v474 || (*(_BYTE *)v474 & 4) == 0)
            {
              while ((*(_WORD *)(v474 + 44) & 8) != 0)
                v474 = *(_QWORD *)(v474 + 8);
            }
            v474 = *(_QWORD *)(v474 + 8);
            if (v659 & 1 | (v660.i32[2] != 0))
            {
              v476 = ((v474 >> 4) ^ (v474 >> 9)) & v473;
              v477 = v472->i64[v476];
              if (v474 == v477)
                continue;
              v478 = 1;
              while (v477 != -4096)
              {
                v479 = v476 + v478++;
                v476 = v479 & v473;
                v477 = v472->i64[v476];
                if (v474 == v477)
                  goto LABEL_874;
              }
            }
            v480 = *(_WORD **)(v474 + 16);
            if (*v480 == 6504)
            {
              v470 += 100;
            }
            else
            {
              v481 = (unsigned __int16)v480[3];
              if (*(_WORD *)(*((_QWORD *)&v691 + 1) + 24 * v481 + 16))
                v470 += *(__int16 *)(*(_QWORD *)(v468 + 144)
                                   + 4 * *(unsigned __int16 *)(*((_QWORD *)&v691 + 1) + 24 * v481 + 14));
            }
            if (v470 >= v632)
              goto LABEL_928;
          }
        }
        if (v402 != 6504)
          goto LABEL_928;
        v403 = sub_1C4C2FD5C(6504);
        if (v403 < 0)
          v404 = -1;
        else
          v404 = *(_DWORD *)(*(_QWORD *)(v392 + 32) + 32 * (unsigned __int16)v403 + 16) & 1;
        v453 = *(_QWORD *)v392 & 0xFFFFFFFFFFFFFFF8;
        if (!v453 || (*(_BYTE *)v453 & 4) == 0)
        {
          while ((*(_WORD *)(v453 + 44) & 4) != 0)
            v453 = *(_QWORD *)v453 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((_QWORD *)v453 == v390)
          goto LABEL_928;
        v454 = (int64x2_t *)v660.i64[0];
        v455 = v660.i32[2] - 1;
        v456 = v393 | (v660.i32[2] != 0);
        if ((v393 & 1) != 0)
        {
          v454 = &v660;
          v455 = 7;
        }
        while (1)
        {
          v457 = v453;
          v453 = *(_QWORD *)v453 & 0xFFFFFFFFFFFFFFF8;
          if (!v453 || (*(_BYTE *)v453 & 4) == 0)
          {
            while ((*(_WORD *)(v453 + 44) & 4) != 0)
              v453 = *(_QWORD *)v453 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((v456 & 1) == 0)
            goto LABEL_852;
          v458 = ((v457 >> 4) ^ (v457 >> 9)) & v455;
          v459 = v454->i64[v458];
          if (v457 != v459)
            break;
LABEL_861:
          if ((_QWORD *)v453 == v390)
            goto LABEL_928;
        }
        v460 = 1;
        while (v459 != -4096)
        {
          v461 = v458 + v460++;
          v458 = v461 & v455;
          v459 = v454->i64[v458];
          if (v457 == v459)
            goto LABEL_861;
        }
LABEL_852:
        v462 = *(_QWORD *)(v457 + 16);
        if (*(_WORD *)v462 != 6504)
          goto LABEL_928;
        v463 = *(_QWORD *)(v462 + 16);
        v464 = ~(_DWORD)v463 & 0x800200;
        v465 = v463 & 0x800100;
        if (v464)
          v466 = v465 == 8388864;
        else
          v466 = 1;
        if (v466)
          goto LABEL_861;
        v467 = v403 < 0 ? -1 : *(_DWORD *)(*(_QWORD *)(v457 + 32) + 32 * (unsigned __int16)v403 + 16) & 1;
        if (v467 != v404)
          goto LABEL_861;
        v490 = sub_1C4C2FD5C(6504);
        v491 = *(_QWORD *)(v457 + 32) + 32 * v490;
        *(_QWORD *)(v491 + 16) |= *(unsigned int *)(*(_QWORD *)(v392 + 32) + 32 * v490 + 16);
        v492 = sub_1C4C2FD5C(6504);
        v493 = *(_QWORD *)(v457 + 32) + 32 * v492;
        *(_QWORD *)(v493 + 16) |= *(unsigned int *)(*(_QWORD *)(v392 + 32) + 32 * v492 + 16);
        v682 = (unsigned __int8 *)v392;
        if ((v659 & 1) != 0)
        {
          v494 = 8;
          v495 = &v660;
LABEL_912:
          v496 = v494 - 1;
          v497 = v496 & (v394 ^ (v392 >> 9));
          v484 = &v495->i64[v497];
          v498 = *v484;
          if (v392 == *v484)
            goto LABEL_928;
          v486 = 0;
          v499 = 1;
          while (v498 != -4096)
          {
            if (v486)
              v500 = 0;
            else
              v500 = v498 == -8192;
            if (v500)
              v486 = v484;
            v501 = v497 + v499++;
            v497 = v501 & v496;
            v484 = &v495->i64[v497];
            v498 = *v484;
            if (v392 == *v484)
              goto LABEL_928;
          }
          goto LABEL_922;
        }
        v494 = v660.i32[2];
        if (v660.i32[2])
        {
          v495 = (int64x2_t *)v660.i64[0];
          goto LABEL_912;
        }
LABEL_935:
        v502 = 0;
LABEL_925:
        v503 = sub_1C486D2E8((uint64_t)&v659, (uint64_t)&v682, &v682, v502);
        *v503 = v682;
        v504 = v682;
        v505 = v665;
        if (v665 >= (unint64_t)HIDWORD(v665))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v664, (uint64_t)v666, v665 + 1, 8);
          v505 = v665;
        }
        *((_QWORD *)v664 + v505) = v504;
        LODWORD(v665) = v665 + 1;
LABEL_928:
        v392 = *(_QWORD *)v392 & 0xFFFFFFFFFFFFFFF8;
        if (!v392 || (*(_BYTE *)v392 & 4) == 0)
        {
          while ((*(_WORD *)(v392 + 44) & 4) != 0)
            v392 = *(_QWORD *)v392 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v389 = (_QWORD *)v629[1];
    }
    while (v389 != v613);
  }
  if (v702 != v704)
    free(v702);
  sub_1C498ED40((uint64_t)v711);
  sub_1C498ED40((uint64_t)__s1);
  v506 = v608;
  if ((_DWORD)v665)
  {
    v507 = (char *)v664;
    v508 = (char *)v664 + 8 * v665;
    do
    {
      v509 = *(_BYTE **)v507;
      v510 = *(_BYTE **)v507;
      if ((**(_BYTE **)v507 & 4) == 0)
      {
        v510 = *(_BYTE **)v507;
        if ((*((_WORD *)v509 + 22) & 8) != 0)
        {
          v510 = *(_BYTE **)v507;
          do
            v510 = (_BYTE *)*((_QWORD *)v510 + 1);
          while ((*((_WORD *)v510 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v509 + 3) + 40, (uint64_t)v509, *((_QWORD *)v510 + 1));
      v507 += 8;
    }
    while (v507 != v508);
  }
  if (HIBYTE(v676))
  {
    v511 = v673;
    v512 = *((_QWORD *)&v674 + 1);
    if (*((_QWORD *)&v674 + 1))
    {
      if ((**((_BYTE **)&v674 + 1) & 4) == 0)
      {
        while ((*(_WORD *)(v512 + 44) & 8) != 0)
          v512 = *(_QWORD *)(v512 + 8);
      }
      v513 = (unint64_t **)(v512 + 8);
    }
    else
    {
      v513 = (unint64_t **)(v673 + 56);
    }
    v514 = *v513;
    v515 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v608 + 104))(v608);
    v682 = 0;
    v516 = *(_QWORD *)(v515 + 8) + 440976;
    v517 = *(llvm::MachineFunction **)(v511 + 32);
    *(_QWORD *)&v689 = 0;
    v518 = *((_QWORD *)v517 + 28);
    if (v518)
    {
      *((_QWORD *)v517 + 28) = *(_QWORD *)v518;
      __s1[0] = 0;
    }
    else
    {
      v518 = sub_1C484358C((uint64_t)v517 + 128, 72, 3);
      __s1[0] = (void *)v689;
      if ((_QWORD)v689)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v689, (unsigned __int8 *)v689, (uint64_t)__s1);
        *(_QWORD *)&v689 = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v518, v517, v516, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    v506 = v608;
    if ((_QWORD)v689)
      llvm::MetadataTracking::untrack((uint64_t)&v689, (unsigned __int8 *)v689);
    v519 = *(_QWORD *)(v511 + 40);
    *(_QWORD *)(v518 + 24) = v519;
    v520 = *(_QWORD *)(v519 + 32);
    v521 = *(unsigned int *)(v518 + 40);
    if ((_DWORD)v521)
    {
      v563 = *(_QWORD *)(v518 + 32);
      v564 = *(_QWORD *)(v520 + 40);
      v565 = 32 * v521;
      do
      {
        if (!*(_BYTE *)v563)
        {
          v566 = *(unsigned int *)(v563 + 4);
          if ((int)v566 >= 0)
            v567 = (uint64_t *)(*(_QWORD *)(v564 + 272) + 8 * v566);
          else
            v567 = (uint64_t *)(*(_QWORD *)(v564 + 24) + 16 * (v566 & 0x7FFFFFFF) + 8);
          v568 = *v567;
          if (*v567)
          {
            v569 = *(_QWORD *)(v568 + 16);
            *(_QWORD *)(v568 + 16) = v563;
            *(_QWORD *)(v563 + 16) = v569;
            if ((*(_BYTE *)(v563 + 3) & 1) != 0)
            {
              *(_QWORD *)(v563 + 24) = v568;
            }
            else
            {
              *(_QWORD *)(v563 + 24) = 0;
              v567 = (uint64_t *)(v569 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v563 + 16) = v563;
            *(_QWORD *)(v563 + 24) = 0;
          }
          *v567 = v563;
        }
        v563 += 32;
        v565 -= 32;
      }
      while (v565);
    }
    v522 = *(_QWORD *)(v520 + 728);
    if (v522)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v522 + 24))(v522, v518);
    v523 = *v514 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v518 = v523 | *(_QWORD *)v518 & 7;
    *(_QWORD *)(v518 + 8) = v514;
    *(_QWORD *)(v523 + 8) = v518;
    *v514 = *v514 & 7 | v518;
    LODWORD(__s1[0]) = 1;
    v706 = 0;
    __s1[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v518, v517, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v706 = 150;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v518, v517, (const llvm::MachineOperand *)__s1);
    if (v682)
      llvm::MetadataTracking::untrack((uint64_t)&v682, v682);
  }
  if (v677)
  {
    v524 = *((_QWORD *)&v673 + 1);
    v525 = v675;
    if ((_QWORD)v675)
    {
      if ((*(_BYTE *)v675 & 4) == 0)
      {
        while ((*(_WORD *)(v525 + 44) & 8) != 0)
          v525 = *(_QWORD *)(v525 + 8);
      }
      v526 = (unint64_t **)(v525 + 8);
    }
    else
    {
      v526 = (unint64_t **)(*((_QWORD *)&v673 + 1) + 56);
    }
    v527 = *v526;
    v528 = v678;
    v529 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v506 + 104))(v506);
    if (v528)
      v530 = 1120;
    else
      v530 = 1056;
    v531 = *(_QWORD *)(v529 + 8) + 440976;
    v532 = *(llvm::MachineFunction **)(v524 + 32);
    *(_QWORD *)&v689 = 0;
    v533 = *((_QWORD *)v532 + 28);
    if (v533)
    {
      *((_QWORD *)v532 + 28) = *(_QWORD *)v533;
      __s1[0] = 0;
    }
    else
    {
      v533 = sub_1C484358C((uint64_t)v532 + 128, 72, 3);
      __s1[0] = (void *)v689;
      if ((_QWORD)v689)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v689, (unsigned __int8 *)v689, (uint64_t)__s1);
        *(_QWORD *)&v689 = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v533, v532, v531, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if ((_QWORD)v689)
      llvm::MetadataTracking::untrack((uint64_t)&v689, (unsigned __int8 *)v689);
    v534 = *(_QWORD *)(v524 + 40);
    *(_QWORD *)(v533 + 24) = v534;
    v535 = *(_QWORD *)(v534 + 32);
    v536 = *(unsigned int *)(v533 + 40);
    if ((_DWORD)v536)
    {
      v570 = *(_QWORD *)(v533 + 32);
      v571 = *(_QWORD *)(v535 + 40);
      v572 = 32 * v536;
      do
      {
        if (!*(_BYTE *)v570)
        {
          v573 = *(unsigned int *)(v570 + 4);
          if ((int)v573 >= 0)
            v574 = (uint64_t *)(*(_QWORD *)(v571 + 272) + 8 * v573);
          else
            v574 = (uint64_t *)(*(_QWORD *)(v571 + 24) + 16 * (v573 & 0x7FFFFFFF) + 8);
          v575 = *v574;
          if (*v574)
          {
            v576 = *(_QWORD *)(v575 + 16);
            *(_QWORD *)(v575 + 16) = v570;
            *(_QWORD *)(v570 + 16) = v576;
            if ((*(_BYTE *)(v570 + 3) & 1) != 0)
            {
              *(_QWORD *)(v570 + 24) = v575;
            }
            else
            {
              *(_QWORD *)(v570 + 24) = 0;
              v574 = (uint64_t *)(v576 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v570 + 16) = v570;
            *(_QWORD *)(v570 + 24) = 0;
          }
          *v574 = v570;
        }
        v570 += 32;
        v572 -= 32;
      }
      while (v572);
    }
    v537 = *(_QWORD *)(v535 + 728);
    if (v537)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v537 + 24))(v537, v533);
    v538 = *v527 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v533 = v538 | *(_QWORD *)v533 & 7;
    *(_QWORD *)(v533 + 8) = v527;
    *(_QWORD *)(v538 + 8) = v533;
    *v527 = *v527 & 7 | v533;
    LODWORD(__s1[0]) = 1;
    v706 = 0;
    __s1[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v533, v532, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v706 = v530 | 8;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v533, v532, (const llvm::MachineOperand *)__s1);
    v539 = *(llvm::MachineFunction **)(v524 + 32);
    *(_QWORD *)&v689 = 0;
    v540 = *((_QWORD *)v539 + 28);
    if (v540)
    {
      *((_QWORD *)v539 + 28) = *(_QWORD *)v540;
      __s1[0] = 0;
    }
    else
    {
      v540 = sub_1C484358C((uint64_t)v539 + 128, 72, 3);
      __s1[0] = (void *)v689;
      if ((_QWORD)v689)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v689, (unsigned __int8 *)v689, (uint64_t)__s1);
        *(_QWORD *)&v689 = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v540, v539, v531, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if ((_QWORD)v689)
      llvm::MetadataTracking::untrack((uint64_t)&v689, (unsigned __int8 *)v689);
    v541 = *(_QWORD *)(v524 + 40);
    *(_QWORD *)(v540 + 24) = v541;
    v542 = *(_QWORD *)(v541 + 32);
    v543 = *(unsigned int *)(v540 + 40);
    if ((_DWORD)v543)
    {
      v577 = *(_QWORD *)(v540 + 32);
      v578 = *(_QWORD *)(v542 + 40);
      v579 = 32 * v543;
      do
      {
        if (!*(_BYTE *)v577)
        {
          v580 = *(unsigned int *)(v577 + 4);
          if ((int)v580 >= 0)
            v581 = (uint64_t *)(*(_QWORD *)(v578 + 272) + 8 * v580);
          else
            v581 = (uint64_t *)(*(_QWORD *)(v578 + 24) + 16 * (v580 & 0x7FFFFFFF) + 8);
          v582 = *v581;
          if (*v581)
          {
            v583 = *(_QWORD *)(v582 + 16);
            *(_QWORD *)(v582 + 16) = v577;
            *(_QWORD *)(v577 + 16) = v583;
            if ((*(_BYTE *)(v577 + 3) & 1) != 0)
            {
              *(_QWORD *)(v577 + 24) = v582;
            }
            else
            {
              *(_QWORD *)(v577 + 24) = 0;
              v581 = (uint64_t *)(v583 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v577 + 16) = v577;
            *(_QWORD *)(v577 + 24) = 0;
          }
          *v581 = v577;
        }
        v577 += 32;
        v579 -= 32;
      }
      while (v579);
    }
    v544 = *(_QWORD *)(v542 + 728);
    if (v544)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v544 + 24))(v544, v540);
    v545 = *v527 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v540 = v545 | *(_QWORD *)v540 & 7;
    *(_QWORD *)(v540 + 8) = v527;
    *(_QWORD *)(v545 + 8) = v540;
    *v527 = *v527 & 7 | v540;
    LODWORD(__s1[0]) = 1;
    v706 = 0;
    __s1[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v540, v539, (const llvm::MachineOperand *)__s1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v706 = v530 | 6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v540, v539, (const llvm::MachineOperand *)__s1);
    v506 = v608;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v626 + 8))(v626, 1, v648 & ~v607, 1, 0, 1, 1);
  if (v506[288]
    && (**(unsigned int (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v626)(v626, 1, 0, 1, 1))
  {
    v546 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v506 + 104))(v506);
    v547 = v546;
    v548 = (_QWORD *)v611[41];
    v549 = (unint64_t *)v548[7];
    v550 = (unsigned __int8 *)v549[7];
    v682 = v550;
    if (v550)
    {
      llvm::MetadataTracking::track((uint64_t)&v682, v550, 2);
      v551 = *(_QWORD *)(v547 + 8) + 312144;
      v552 = (llvm::MachineFunction *)v548[4];
      *(_QWORD *)&v689 = v682;
      if (v682)
        llvm::MetadataTracking::track((uint64_t)&v689, v682, 2);
    }
    else
    {
      v551 = *(_QWORD *)(v546 + 8) + 312144;
      v552 = (llvm::MachineFunction *)v548[4];
      *(_QWORD *)&v689 = 0;
    }
    v553 = *((_QWORD *)v552 + 28);
    if (v553)
      *((_QWORD *)v552 + 28) = *(_QWORD *)v553;
    else
      v553 = sub_1C484358C((uint64_t)v552 + 128, 72, 3);
    __s1[0] = (void *)v689;
    if ((_QWORD)v689)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v689, (unsigned __int8 *)v689, (uint64_t)__s1);
      *(_QWORD *)&v689 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v553, v552, v551, (unsigned __int8 **)__s1, 0);
    if (__s1[0])
      llvm::MetadataTracking::untrack((uint64_t)__s1, (unsigned __int8 *)__s1[0]);
    if ((_QWORD)v689)
      llvm::MetadataTracking::untrack((uint64_t)&v689, (unsigned __int8 *)v689);
    v554 = v548[5];
    *(_QWORD *)(v553 + 24) = v554;
    v555 = *(_QWORD *)(v554 + 32);
    v556 = *(unsigned int *)(v553 + 40);
    if ((_DWORD)v556)
    {
      v584 = *(_QWORD *)(v553 + 32);
      v585 = *(_QWORD *)(v555 + 40);
      v586 = 32 * v556;
      do
      {
        if (!*(_BYTE *)v584)
        {
          v587 = *(unsigned int *)(v584 + 4);
          if ((int)v587 >= 0)
            v588 = (uint64_t *)(*(_QWORD *)(v585 + 272) + 8 * v587);
          else
            v588 = (uint64_t *)(*(_QWORD *)(v585 + 24) + 16 * (v587 & 0x7FFFFFFF) + 8);
          v589 = *v588;
          if (*v588)
          {
            v590 = *(_QWORD *)(v589 + 16);
            *(_QWORD *)(v589 + 16) = v584;
            *(_QWORD *)(v584 + 16) = v590;
            if ((*(_BYTE *)(v584 + 3) & 1) != 0)
            {
              *(_QWORD *)(v584 + 24) = v589;
            }
            else
            {
              *(_QWORD *)(v584 + 24) = 0;
              v588 = (uint64_t *)(v590 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v584 + 16) = v584;
            *(_QWORD *)(v584 + 24) = 0;
          }
          *v588 = v584;
        }
        v584 += 32;
        v586 -= 32;
      }
      while (v586);
    }
    v557 = *(_QWORD *)(v555 + 728);
    if (v557)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v557 + 24))(v557, v553);
    v558 = *v549 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v553 = v558 | *(_QWORD *)v553 & 7;
    *(_QWORD *)(v553 + 8) = v549;
    *(_QWORD *)(v558 + 8) = v553;
    *v549 = *v549 & 7 | v553;
    LODWORD(__s1[0]) = 1;
    v706 = 0;
    __s1[1] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v553, v552, (const llvm::MachineOperand *)__s1);
    v559 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v626)(v626, 1, 0, 1, 1);
    LODWORD(__s1[0]) = 1;
    __s1[1] = 0;
    v706 = v559;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v553, v552, (const llvm::MachineOperand *)__s1);
    if (v682)
      llvm::MetadataTracking::untrack((uint64_t)&v682, v682);
  }
  if (v664 != v666)
    free(v664);
  if ((v659 & 1) == 0)
    MEMORY[0x1CAA32FB4](v660.i64[0], 8);
  sub_1C498ED40((uint64_t)v671);
  sub_1C498ED40((uint64_t)&__s2);
  if (v679 != v681)
    free(v679);
  v560 = 110;
  do
  {
    v561 = (_QWORD *)v671[v560 + 199];
    if (&v671[v560 + 201] != v561)
      free(v561);
    v560 -= 10;
  }
  while (v560 * 8);
  return 0;
}

uint64_t sub_1C4AD3358(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  llvm::DataLayout *v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  _BYTE *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  _BYTE *v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  unsigned int v82;
  int v83;

  result = 0;
  switch(a3)
  {
    case ' ':
    case '!':
    case '%':
      **(_BYTE **)(a1 + 32) |= sub_1C498CF48(*(uint64_t **)(a1 + 40), ++**(_BYTE **)(a1 + 8), **(_QWORD **)(a1 + 48), (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8))
        return 1;
      v6 = ***(_QWORD ***)(a1 + 80);
      v7 = *(unsigned __int8 *)(v6 + 8);
      if (v7 > 0x11)
        goto LABEL_64;
      if (((1 << v7) & 0xAC7F) != 0)
        goto LABEL_6;
      if (((1 << v7) & 0x30000) != 0)
        goto LABEL_62;
LABEL_64:
      if ((v7 & 0xFE) != 0x12 && v7 != 21)
        return 0;
LABEL_62:
      result = llvm::Type::isSizedDerivedType(***(_QWORD ***)(a1 + 80), 0);
      if ((_DWORD)result)
      {
        v6 = ***(_QWORD ***)(a1 + 80);
LABEL_6:
        v8 = *(llvm::DataLayout **)a1;
        goto LABEL_7;
      }
      return result;
    case '"':
      v30 = sub_1C5EA708C(a2, *(llvm::DataLayout **)a1);
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8))
        return 0;
      LODWORD(v31) = v30;
      goto LABEL_22;
    case '#':
    case '$':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '9':
    case ':':
    case ';':
    case '<':
      goto LABEL_13;
    case '&':
    case '\'':
    case '(':
    case '/':
    case '0':
    case '1':
    case '2':
      return result;
    case '8':
      if (*(_BYTE *)(a2 + 16) != 84
        || (v38 = *(_QWORD *)(a2 - 32)) == 0
        || *(_BYTE *)(v38 + 16)
        || *(_QWORD *)(v38 + 24) != *(_QWORD *)(a2 + 72)
        || (*(_BYTE *)(v38 + 33) & 0x20) == 0)
      {
        v16 = *(_QWORD *)(a1 + 88);
        v39 = *(_QWORD *)(a1 + 56);
        v40 = *(unsigned int *)(v39 + 16);
        if ((_DWORD)v40)
        {
          v41 = *(_BYTE **)(v39 + 8);
          v42 = *(_DWORD **)v16;
          v43 = *(_DWORD **)(v16 + 8);
          v44 = 6 * v40;
          do
          {
            *v42 |= 1 << (*v41 & 0xF);
            v45 = *v41;
            v41 += 6;
            *v43 |= 1 << (v45 >> 4);
            v44 -= 6;
          }
          while (v44);
        }
        v46 = *(unsigned int *)(v39 + 40);
        if ((_DWORD)v46)
        {
          v47 = *(_BYTE **)(v39 + 32);
          v48 = *(_DWORD **)v16;
          v49 = *(_DWORD **)(v16 + 8);
          v50 = 6 * v46;
          do
          {
            *v48 |= 1 << (*v47 & 0xF);
            v51 = *v47;
            v47 += 6;
            *v49 |= 1 << (v51 >> 4);
            v50 -= 6;
          }
          while (v50);
        }
LABEL_47:
        result = 1;
        **(_BYTE **)(v16 + 16) = 1;
        return result;
      }
      v69 = *(_DWORD *)(v38 + 36);
      if ((v69 - 1282) < 0x190 || (v69 - 2824) < 0xC || (v69 - 1682) <= 0x8B)
      {
        **(_BYTE **)(a1 + 32) |= sub_1C498CF48(*(uint64_t **)(a1 + 40), ++**(_BYTE **)(a1 + 8), **(_QWORD **)(a1 + 48), (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
        return 1;
      }
      if ((v69 - 2630) >= 0x20
        && v69 != 2144
        && (v69 - 2838) >= 3
        && (v69 - 2376) >= 0x20
        && v69 != 2142
        && (v69 - 2784) > 2)
      {
        v16 = *(_QWORD *)(a1 + 88);
        v70 = *(_QWORD *)(a1 + 56);
        v71 = *(unsigned int *)(v70 + 16);
        if ((_DWORD)v71)
        {
          v72 = *(_BYTE **)(v70 + 8);
          v73 = *(_DWORD **)v16;
          v74 = *(_DWORD **)(v16 + 8);
          v75 = 6 * v71;
          do
          {
            *v73 |= 1 << (*v72 & 0xF);
            v76 = *v72;
            v72 += 6;
            *v74 |= 1 << (v76 >> 4);
            v75 -= 6;
          }
          while (v75);
        }
        v77 = *(unsigned int *)(v70 + 40);
        if ((_DWORD)v77)
        {
          v78 = *(_BYTE **)(v70 + 32);
          v79 = *(_DWORD **)v16;
          v80 = *(_DWORD **)(v16 + 8);
          v81 = 6 * v77;
          do
          {
            *v79 |= 1 << (*v78 & 0xF);
            v82 = *v78;
            v78 += 6;
            *v80 |= 1 << (v82 >> 4);
            v81 -= 6;
          }
          while (v81);
        }
        goto LABEL_47;
      }
      **(_BYTE **)(a1 + 32) |= sub_1C498CF48(*(uint64_t **)(a1 + 40), ++**(_BYTE **)(a1 + 8), **(_QWORD **)(a1 + 48), (unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8))
        return 1;
      v8 = *(llvm::DataLayout **)a1;
      v6 = ***(_QWORD ***)(a1 + 80);
LABEL_7:
      sub_1C4768AD0((uint64_t)v8, v6);
      v11 = v10 + 7;
      if ((_DWORD)v9 == 1)
      result = 0;
      v12 = *(_DWORD **)(a1 + 64);
      **(_DWORD **)(a1 + 72) = v11 >> 3;
      v13 = *(_DWORD **)(a1 + 24);
      *v12 = *v13;
      *v13 = 0;
      return result;
    case '=':
      if (*(_BYTE *)(*(_QWORD *)(a2 - 32) + 16) == 16)
      {
        sub_1C4768AD0(*(_QWORD *)a1, *(_QWORD *)(**(_QWORD **)(a2 - 64) + 24));
        v34 = (unint64_t)(v32 + 7) >> 3;
        if ((_DWORD)v33 == 1)
        {
          v83 = (unint64_t)(v32 + 7) >> 3;
          LODWORD(v34) = v83;
        }
        v35 = *(_QWORD *)(a2 - 32);
        v36 = (_QWORD *)(v35 + 24);
        if (*(_DWORD *)(v35 + 32) >= 0x41u)
          v36 = (_QWORD *)*v36;
        result = 0;
        v37 = *(_DWORD **)(a1 + 72);
        **(_DWORD **)(a1 + 64) += *(_DWORD *)v36 * v34;
        *v37 = v34;
        return result;
      }
      v16 = *(_QWORD *)(a1 + 88);
      v52 = *(_QWORD *)(a1 + 56);
      v53 = *(unsigned int *)(v52 + 16);
      if ((_DWORD)v53)
      {
        v54 = *(_BYTE **)(v52 + 8);
        v55 = *(_DWORD **)v16;
        v56 = *(_DWORD **)(v16 + 8);
        v57 = 6 * v53;
        do
        {
          *v55 |= 1 << (*v54 & 0xF);
          v58 = *v54;
          v54 += 6;
          *v56 |= 1 << (v58 >> 4);
          v57 -= 6;
        }
        while (v57);
      }
      v59 = *(unsigned int *)(v52 + 40);
      if ((_DWORD)v59)
      {
        v60 = *(_BYTE **)(v52 + 32);
        v61 = *(_DWORD **)v16;
        v62 = *(_DWORD **)(v16 + 8);
        v63 = 6 * v59;
        do
        {
          *v61 |= 1 << (*v60 & 0xF);
          v64 = *v60;
          v60 += 6;
          *v62 |= 1 << (v64 >> 4);
          v63 -= 6;
        }
        while (v63);
      }
      goto LABEL_47;
    default:
      if (a3 != 13)
      {
LABEL_13:
        v16 = *(_QWORD *)(a1 + 88);
        v17 = *(_QWORD *)(a1 + 56);
        v18 = *(unsigned int *)(v17 + 16);
        if ((_DWORD)v18)
        {
          v19 = *(_BYTE **)(v17 + 8);
          v20 = *(_DWORD **)v16;
          v21 = *(_DWORD **)(v16 + 8);
          v22 = 6 * v18;
          do
          {
            *v20 |= 1 << (*v19 & 0xF);
            v23 = *v19;
            v19 += 6;
            *v21 |= 1 << (v23 >> 4);
            v22 -= 6;
          }
          while (v22);
        }
        v24 = *(unsigned int *)(v17 + 40);
        if ((_DWORD)v24)
        {
          v25 = *(_BYTE **)(v17 + 32);
          v26 = *(_DWORD **)v16;
          v27 = *(_DWORD **)(v16 + 8);
          v28 = 6 * v24;
          do
          {
            *v26 |= 1 << (*v25 & 0xF);
            v29 = *v25;
            v25 += 6;
            *v27 |= 1 << (v29 >> 4);
            v28 -= 6;
          }
          while (v28);
        }
        goto LABEL_47;
      }
      v14 = *(_DWORD *)(a2 + 20);
      if ((v14 & 0x40000000) != 0)
        v15 = *(uint64_t **)(a2 - 8);
      else
        v15 = (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8))
        return 0;
      v65 = *v15;
      v66 = v15[4];
      if (v66 == **(_QWORD **)(a1 + 48))
        v66 = v65;
      if (*(_BYTE *)(v66 + 16) != 16 || v66 == 0)
      {
        if (MEMORY[0x20] > 0x40u)
          v31 = *MEMORY[0x18];
        else
          v31 = (uint64_t)(MEMORY[0x18] << -(uint64_t)MEMORY[0x20]) >> -(uint64_t)MEMORY[0x20];
LABEL_22:
        result = 0;
        **(_DWORD **)(a1 + 24) += v31;
      }
      else
      {
        result = 0;
        **(_DWORD **)(a1 + 24) = 0;
        **(_DWORD **)(a1 + 72) = -1;
      }
      return result;
  }
}

void ***sub_1C4AD3A6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v2 = a2;
  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = *((_QWORD *)v4 + 2);
  v6 = v5 & 0x800100;
  v7 = v5 & 0x800200;
  v8 = *(_QWORD *)(a2 + 48);
  if (v8 < 8)
    goto LABEL_18;
  if ((v8 & 7) != 0)
  {
    v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    v10 = (*(_QWORD *)(a2 + 48) & 7) != 3 || v9 == 0;
    if (v10 || !*v9)
      goto LABEL_18;
  }
  else
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v8;
  }
  if ((v8 & 7) != 0)
  {
    v11 = *(uint64_t **)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (!v11)
      goto LABEL_18;
  }
  else
  {
    v11 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a2 + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0)
      goto LABEL_18;
  }
  v12 = 0;
  v13 = *v11;
  if ((v13 & 4) == 0)
    goto LABEL_19;
  v14 = (_DWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_19;
  if (v14[2] == 7)
  {
    v12 = (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 48))(v14) == 0;
    v4 = *(unsigned __int16 **)(v2 + 16);
    goto LABEL_19;
  }
LABEL_18:
  v12 = 0;
LABEL_19:
  v15 = v6 == 8388864 || v7 == 8389120;
  if (v15 || v12 || (v16 = *v4, (v16 - 6495) <= 7))
  {
    v18 = 0x2C00000000000005;
    goto LABEL_31;
  }
  if ((v16 - 566) >= 3 && (v16 - 6165) > 1)
  {
    if ((v4[8] & 2) != 0
      || ((v20 = sub_1C4C915C4(*v4), (v20 - 79) < 2) ? (v21 = (v20 & 0xFF00000000) == 0) : (v21 = 1),
          v21 ? (v22 = (v16 - 4741) > 1) : (v22 = 0),
          !v22))
    {
      v18 = 0x2C00000000000801;
      goto LABEL_31;
    }
    v23 = *(_QWORD *)(v2 + 48);
    if (v23 < 8)
      goto LABEL_47;
    if ((v23 & 7) != 0)
    {
      if ((*(_QWORD *)(v2 + 48) & 7) != 3
        || (v23 & 0xFFFFFFFFFFFFFFF8) == 0
        || !*(_DWORD *)(v23 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_47:
        v24 = *(_WORD *)(v2 + 44);
        v25 = *((_QWORD *)v4 + 1);
        if ((v24 & 0xC) == 0 || (v24 & 4) != 0)
        {
          v27 = (v25 >> 7) & 1;
        }
        else if ((v25 & 0x80) != 0)
        {
          LOBYTE(v27) = 1;
        }
        else
        {
          do
          {
            v26 = *(unsigned __int16 *)(v2 + 44);
            LODWORD(v27) = (v26 >> 3) & 1;
            if ((v26 & 8) == 0)
              break;
            v2 = *(_QWORD *)(v2 + 8);
          }
          while ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 8) & 0x80) == 0);
        }
        if ((v27 & (byte_1ED7EE528 != 0)) != 0)
          v28 = 0x2C0000000000080FLL;
        else
          v28 = 0x2C00000000000001;
        goto LABEL_57;
      }
    }
    else
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v2 + 48) = v23;
      if (!v23)
        goto LABEL_70;
    }
    if ((v23 & 7) != 0)
    {
      if ((v23 & 7) != 3 || (v23 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) != 1)
        goto LABEL_70;
    }
    else
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v2 + 48) = v23;
    }
    if ((v23 & 7) != 0)
    {
      v29 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v29 = v23 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v2 + 48) = v29;
    }
    if (v29 && !*(_DWORD *)(v29 + 16))
    {
      v28 = 0x2C00000000000001;
LABEL_57:
      *a1 = v28;
      v30 = 1;
      return sub_1C4914448((void ***)&v30);
    }
LABEL_70:
    v18 = 0x2C00000000000009;
    goto LABEL_31;
  }
  v18 = 0x2C00000000000003;
LABEL_31:
  v30 = v18;
  *a1 = v18;
  return sub_1C4914448((void ***)&v30);
}

uint64_t sub_1C4AD3D34(uint64_t a1)
{
  unint64_t v1;
  _DWORD *v2;
  BOOL v3;
  unint64_t v4;
  unsigned int v5;
  unsigned __int16 *v6;
  int v7;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 >= 8)
  {
    if ((v1 & 7) != 0)
    {
      v2 = (_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
      v3 = (*(_QWORD *)(a1 + 48) & 7) != 3 || v2 == 0;
      if (v3 || *v2 != 1)
        goto LABEL_14;
    }
    else
    {
      v1 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 48) = v1;
    }
    if ((v1 & 7) != 0)
    {
      v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v4)
      {
LABEL_12:
        v5 = (*(unsigned __int16 *)(v4 + 32) >> 1) & 1;
        goto LABEL_15;
      }
    }
    else
    {
      v4 = v1 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 48) = v4;
      if (v4)
        goto LABEL_12;
    }
  }
LABEL_14:
  v5 = 1;
LABEL_15:
  v6 = *(unsigned __int16 **)(a1 + 16);
  v3 = (v6[8] & 2) == 0;
  v7 = *v6;
  if (!v3 || v7 == 6166)
    return 0;
  else
    return v5;
}

_QWORD *sub_1C4AD3DC0(llvm::MachineBasicBlock *a1, uint64_t a2)
{
  uint64_t FirstInstrTerminator;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v13;

  FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(a1);
  v5 = *((_QWORD *)a1 + 7);
  if (v5 == FirstInstrTerminator)
  {
LABEL_19:
    v5 = FirstInstrTerminator;
    goto LABEL_21;
  }
  v6 = a2 & 0xFF00000000;
  v7 = 1 << a2;
  v8 = a2 >> 6;
  while (1)
  {
    sub_1C4AD3A6C((uint64_t *)&v13, v5);
    if (v6)
    {
      if ((v13 & 1) != 0)
      {
        if ((v7 & (v13 >> 1) & ~(-1 << (v13 >> 58))) != 0)
          goto LABEL_20;
      }
      else if ((*(_QWORD *)(*(_QWORD *)v13 + 8 * v8) & v7) != 0)
      {
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    if ((v13 & 1) == 0)
      break;
    if (((v13 >> 1) & ~(-1 << (v13 >> 58))) != 0)
      goto LABEL_20;
LABEL_16:
    if ((*(_BYTE *)(*(_QWORD *)(v5 + 16) + 16) & 0x40) != 0 && *(_QWORD *)(v5 + 8) != FirstInstrTerminator)
      goto LABEL_20;
    sub_1C4914448((void ***)&v13);
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == FirstInstrTerminator)
      goto LABEL_19;
  }
  v9 = *(unsigned int *)(v13 + 8);
  if (!(_DWORD)v9)
    goto LABEL_16;
  v10 = *(_QWORD **)v13;
  v11 = 8 * v9;
  while (!*v10)
  {
    ++v10;
    v11 -= 8;
    if (!v11)
      goto LABEL_16;
  }
LABEL_20:
  sub_1C4914448((void ***)&v13);
LABEL_21:
  if ((llvm::MachineBasicBlock *)v5 == (llvm::MachineBasicBlock *)((char *)a1 + 48))
    return sub_1C4AD48F4((uint64_t)a1);
  return (_QWORD *)v5;
}

void sub_1C4AD3F04(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  llvm::MachineFunction *v23;
  uint64_t v24;
  llvm::MachineInstr *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  uint64_t v33;
  llvm::MachineInstr *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = a2 + 48;
  if (a2 + 48 == a3)
  {
LABEL_42:
    v30 = 0;
    v35 = 0;
    goto LABEL_45;
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 56) != a3)
  {
    v12 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8);
    if ((*(_WORD *)(v12 + 44) & 0xC) != 0 && (*(_WORD *)(v12 + 44) & 4) == 0)
    {
      if ((v13 & 0x400) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
        {
          v12 = *(_QWORD *)(v12 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v12 + 16) + 9) & 4) != 0)
            goto LABEL_8;
        }
        goto LABEL_36;
      }
      goto LABEL_8;
    }
    if ((v13 & 0x400) != 0)
    {
LABEL_8:
      v15 = a3;
      while (1)
      {
        v16 = **(unsigned __int16 **)(v15 + 16);
        v17 = v16 > 0x17;
        v18 = (1 << v16) & 0x83E000;
        if (v17 || v18 == 0)
          break;
        v15 = *(_QWORD *)(v15 + 8);
        if (v15 == v11)
        {
          v20 = 0;
          v35 = 0;
          goto LABEL_21;
        }
      }
      v20 = *(unsigned __int8 **)(v15 + 56);
      v35 = v20;
      if (v20)
      {
        llvm::MetadataTracking::track((uint64_t)&v35, v20, 2);
        v20 = v35;
      }
LABEL_21:
      v21 = **(_DWORD **)(a1 + 8);
      v22 = *(_QWORD *)(**(_QWORD **)a1 + 8);
      v23 = *(llvm::MachineFunction **)(a2 + 32);
      v39 = v20;
      if (v20)
        llvm::MetadataTracking::track((uint64_t)&v39, v20, 2);
      v24 = v22 + 48 * v21;
      v25 = (llvm::MachineInstr *)*((_QWORD *)v23 + 28);
      if (v25)
        *((_QWORD *)v23 + 28) = *(_QWORD *)v25;
      else
        v25 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v23 + 128, 72, 3);
      v36 = v39;
      if (v39)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v39, v39, (uint64_t)&v36);
        v39 = 0;
      }
      llvm::MachineInstr::MachineInstr(v25, v23, v24, &v36, 0);
      if (v36)
        llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
      if (v39)
        llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
      if ((*(_WORD *)(a3 + 44) & 4) != 0)
        *((_WORD *)v25 + 22) |= 0xCu;
      sub_1C512CA10((uint64_t *)(a2 + 40), (uint64_t *)a3, (uint64_t)v25);
      LODWORD(v36) = 1;
      v37 = 0;
      v38 = 0;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v36);
      if (v35)
        llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
    }
  }
LABEL_36:
  v26 = a3;
  while (1)
  {
    v27 = **(unsigned __int16 **)(v26 + 16);
    v17 = v27 > 0x17;
    v28 = (1 << v27) & 0x83E000;
    if (v17 || v28 == 0)
      break;
    v26 = *(_QWORD *)(v26 + 8);
    if (v26 == v11)
      goto LABEL_42;
  }
  v30 = *(unsigned __int8 **)(v26 + 56);
  v35 = v30;
  if (v30)
  {
    llvm::MetadataTracking::track((uint64_t)&v35, v30, 2);
    v30 = v35;
  }
LABEL_45:
  v31 = *(_QWORD *)(**(_QWORD **)a1 + 8);
  v32 = *(llvm::MachineFunction **)(a2 + 32);
  v39 = v30;
  if (v30)
    llvm::MetadataTracking::track((uint64_t)&v39, v30, 2);
  v33 = v31 + 312192;
  v34 = (llvm::MachineInstr *)*((_QWORD *)v32 + 28);
  if (v34)
    *((_QWORD *)v32 + 28) = *(_QWORD *)v34;
  else
    v34 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v32 + 128, 72, 3);
  v36 = v39;
  if (v39)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v39, v39, (uint64_t)&v36);
    v39 = 0;
  }
  llvm::MachineInstr::MachineInstr(v34, v32, v33, &v36, 0);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  if (v39)
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  if (v11 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0)
    *((_WORD *)v34 + 22) |= 0xCu;
  sub_1C512CA10((uint64_t *)(a2 + 40), (uint64_t *)a3, (uint64_t)v34);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 0;
  llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = a5;
  llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = a4;
  llvm::MachineInstr::addOperand(v34, v32, (const llvm::MachineOperand *)&v36);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  *(_DWORD *)(v10 + 8) |= a4;
}

_QWORD *sub_1C4AD42F8(_QWORD *result)
{
  uint64_t v1;
  uint64_t i;

  v1 = result[4] + 320;
  if ((_QWORD *)v1 != result)
  {
    do
    {
      for (i = result[7]; (_QWORD *)i != result + 6; i = *(_QWORD *)(i + 8))
      {
        if (**(_WORD **)(i + 16) != 544)
          return result;
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      result = (_QWORD *)result[1];
    }
    while (result != (_QWORD *)v1);
  }
  return *(_QWORD **)v1;
}

void sub_1C4AD435C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 **v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  unsigned __int8 *v21;
  llvm::MachineInstr *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  llvm::MachineInstr *v29;
  llvm::MachineInstr *v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  llvm::MachineFunction *v34;
  uint64_t v35;
  llvm::MachineInstr *v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unsigned __int8 *v39;
  llvm::MachineInstr *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;

  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(a2 + 48);
  if ((_QWORD *)(a2 + 48) == a3)
    v13 = sub_1C4AD48F4(a2);
  else
    v13 = a3;
  if (v13 != v12)
  {
    v14 = (unsigned __int8 *)v13[7];
    v41 = v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v41, v14, 2);
LABEL_18:
    if (v13 != *(_QWORD **)(v13[3] + 56))
    {
      v23 = *v13 & 0xFFFFFFFFFFFFFFF8;
      v24 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8);
      if ((*(_WORD *)(v23 + 44) & 0xC) != 0 && (*(_WORD *)(v23 + 44) & 4) == 0)
      {
        if ((v24 & 0x400) == 0)
        {
          while ((*(_WORD *)(v23 + 44) & 8) != 0)
          {
            v23 = *(_QWORD *)(v23 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v23 + 16) + 9) & 4) != 0)
              goto LABEL_24;
          }
          goto LABEL_58;
        }
        goto LABEL_24;
      }
      if ((v24 & 0x400) != 0)
      {
LABEL_24:
        v26 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
        v20 = *(llvm::MachineFunction **)(a2 + 32);
        v27 = **(unsigned __int8 ***)a1;
        v45 = v27;
        if (v27)
          llvm::MetadataTracking::track((uint64_t)&v45, v27, 2);
        v28 = v26 + 48 * a5;
        v29 = (llvm::MachineInstr *)*((_QWORD *)v20 + 28);
        if (v29)
          *((_QWORD *)v20 + 28) = *(_QWORD *)v29;
        else
          v29 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v20 + 128, 72, 3);
        v42 = v45;
        if (v45)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)&v42);
          v45 = 0;
        }
        llvm::MachineInstr::MachineInstr(v29, v20, v28, &v42, 0);
        if (v42)
          llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
        if (v45)
          llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
        if (v13 != v12 && (*((_WORD *)v13 + 22) & 4) != 0)
          *((_WORD *)v29 + 22) |= 0xCu;
        sub_1C512CA10((uint64_t *)(a2 + 40), v13, (uint64_t)v29);
        LODWORD(v42) = 1;
        v43 = 0;
        v44 = 0;
        v30 = v29;
LABEL_57:
        llvm::MachineInstr::addOperand(v30, v20, (const llvm::MachineOperand *)&v42);
      }
    }
LABEL_58:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 363))
      v31 = a6 == 0;
    else
      v31 = 0;
    if (v31)
      v32 = 0;
    else
      v32 = **(_DWORD **)(a1 + 24);
    v33 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
    v34 = *(llvm::MachineFunction **)(a2 + 32);
    v45 = v41;
    if (v41)
      llvm::MetadataTracking::track((uint64_t)&v45, v41, 2);
    v35 = v33 + 312192;
    v36 = (llvm::MachineInstr *)*((_QWORD *)v34 + 28);
    if (v36)
      *((_QWORD *)v34 + 28) = *(_QWORD *)v36;
    else
      v36 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v34 + 128, 72, 3);
    v42 = v45;
    if (v45)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)&v42);
      v45 = 0;
    }
    llvm::MachineInstr::MachineInstr(v36, v34, v35, &v42, 0);
    if (v42)
      llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
    if (v45)
      llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
    if (v13 != v12 && (*((_WORD *)v13 + 22) & 4) != 0)
      *((_WORD *)v36 + 22) |= 0xCu;
    sub_1C512CA10((uint64_t *)(a2 + 40), v13, (uint64_t)v36);
    LODWORD(v42) = 1;
    v43 = 0;
    v44 = 0;
    llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v42);
    v37 = **(_DWORD **)(a1 + 32) | v32;
    LODWORD(v42) = 1;
    v43 = 0;
    v44 = v37;
    llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v42);
    LODWORD(v42) = 1;
    v43 = 0;
    v44 = a4;
    llvm::MachineInstr::addOperand(v36, v34, (const llvm::MachineOperand *)&v42);
    *(_DWORD *)(v11 + 8) |= a4;
    if (v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
    return;
  }
  v41 = 0;
  v15 = *v12 & 0xFFFFFFFFFFFFFFF8;
  if (v12 == (_QWORD *)v15)
    goto LABEL_18;
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8);
  if ((*(_WORD *)(v15 + 44) & 0xC) != 0 && (*(_WORD *)(v15 + 44) & 4) == 0)
  {
    if ((v16 & 0x400) == 0)
    {
      while ((*(_WORD *)(v15 + 44) & 8) != 0)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v15 + 16) + 9) & 4) != 0)
          goto LABEL_13;
      }
      goto LABEL_58;
    }
  }
  else if ((v16 & 0x400) == 0)
  {
    goto LABEL_58;
  }
LABEL_13:
  v18 = *(unsigned __int8 ***)a1;
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 48 * a5;
  if ((MEMORY[0x2C] & 4) != 0)
  {
    v20 = *(llvm::MachineFunction **)(a2 + 32);
    v21 = *v18;
    v45 = v21;
    if (v21)
      llvm::MetadataTracking::track((uint64_t)&v45, v21, 2);
    v22 = (llvm::MachineInstr *)*((_QWORD *)v20 + 28);
    if (v22)
      *((_QWORD *)v20 + 28) = *(_QWORD *)v22;
    else
      v22 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v20 + 128, 72, 3);
    v42 = v45;
    if (v45)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)&v42);
      v45 = 0;
    }
    llvm::MachineInstr::MachineInstr(v22, v20, v19, &v42, 0);
    if (v42)
      llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
    if (v45)
      llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
    if ((MEMORY[0x2C] & 4) != 0)
      *((_WORD *)v22 + 22) |= 0xCu;
    sub_1C512CA10((uint64_t *)(a2 + 40), 0, (uint64_t)v22);
    LODWORD(v42) = 1;
    v43 = 0;
    v44 = 0;
    v30 = v22;
    goto LABEL_57;
  }
  v38 = *(llvm::MachineFunction **)(a2 + 32);
  v39 = *v18;
  v45 = v39;
  if (v39)
    llvm::MetadataTracking::track((uint64_t)&v45, v39, 2);
  v40 = (llvm::MachineInstr *)*((_QWORD *)v38 + 28);
  if (v40)
    *((_QWORD *)v38 + 28) = *(_QWORD *)v40;
  else
    v40 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v38 + 128, 72, 3);
  v42 = v45;
  if (v45)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)&v42);
    v45 = 0;
  }
  llvm::MachineInstr::MachineInstr(v40, v38, v19, &v42, 0);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  if (v45)
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  llvm::ilist_traits<llvm::MachineInstr>::addNodeToList((uint64_t *)(a2 + 40), (uint64_t)v40);
  __break(1u);
}

_QWORD *sub_1C4AD48F4(uint64_t a1)
{
  _QWORD *result;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;

  result = (_QWORD *)(a1 + 48);
  v3 = -1;
  v4 = result;
  do
  {
    v4 = (_QWORD *)v4[1];
    ++v3;
  }
  while (v4 != result);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v5 == v7)
        return result;
      v8 = (_QWORD *)v7;
      v9 = *(_WORD *)(v7 + 44);
      v10 = v9 & 0xC;
      v11 = v9 & 4;
      v12 = v8[2];
      v13 = *(_QWORD *)(v12 + 8);
      if (v10)
        v14 = v11 == 0;
      else
        v14 = 0;
      if (v14)
      {
        v15 = v8;
        if ((v13 & 0x200) != 0)
          goto LABEL_12;
        while ((*((_WORD *)v15 + 22) & 8) != 0)
        {
          v15 = (_QWORD *)v15[1];
          if ((*(_BYTE *)(v15[2] + 9) & 2) != 0)
            goto LABEL_12;
        }
      }
      else if ((v13 & 0x200) != 0)
      {
        goto LABEL_12;
      }
      if ((*(_BYTE *)(v12 + 16) & 0x40) == 0)
        return result;
LABEL_12:
      v7 = *v8 & 0xFFFFFFFFFFFFFFF8;
      result = v8;
    }
  }
  return result;
}

uint64_t sub_1C4AD4990()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Assume whether or not unknown functions have side effects";
  v1.n128_u64[1] = 57;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7EE4A8, "agx3-frag-sync-func-calls-side-effects", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE4A8, &dword_1C475E000);
}

void sub_1C4AD4A10(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7FB3530;
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2 != (char *)this + 264)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C4AD4AA8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7FB3530;
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2 != (char *)this + 264)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AD4B54()
{
  return "AGX3 verifier of memory operands for instructions";
}

uint64_t sub_1C4AD4B64(llvm *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  _DWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  llvm::MachineInstr **v13;
  uint64_t v14;
  llvm::MachineInstr *v15;
  llvm::raw_ostream *v16;
  void *v17;

  *((_DWORD *)a1 + 64) = 0;
  v2 = a2 + 320;
  v3 = *(_QWORD *)(a2 + 328);
  if (v3 == a2 + 320)
    return 0;
  v4 = a1;
  v5 = (uint64_t)a1 + 248;
  v6 = (uint64_t)a1 + 264;
  do
  {
    for (i = *(_QWORD *)(v3 + 56); i != v3 + 48; i = *(_QWORD *)(i + 8))
    {
      if ((*(_BYTE *)(*(_QWORD *)(i + 16) + 18) & 0x40) == 0)
        goto LABEL_17;
      v8 = *(_QWORD *)(i + 48);
      if (v8 >= 8)
      {
        if ((v8 & 7) == 0)
        {
          *(_QWORD *)(i + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_17;
        }
        v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
        v10 = (*(_QWORD *)(i + 48) & 7) != 3 || v9 == 0;
        if (!v10 && *v9)
          goto LABEL_17;
      }
      v11 = *((unsigned int *)v4 + 64);
      if (v11 >= *((unsigned int *)v4 + 65))
      {
        a1 = (llvm *)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v6, v11 + 1, 8);
        v11 = *((unsigned int *)v4 + 64);
      }
      *(_QWORD *)(*((_QWORD *)v4 + 31) + 8 * v11) = i;
      ++*((_DWORD *)v4 + 64);
LABEL_17:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  v12 = *((unsigned int *)v4 + 64);
  if ((_DWORD)v12)
  {
    v13 = (llvm::MachineInstr **)*((_QWORD *)v4 + 31);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      v16 = (llvm::raw_ostream *)llvm::errs(a1);
      v17 = (void *)*((_QWORD *)v16 + 4);
      if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 0x1EuLL)
      {
        qmemcpy(v17, "Instruction should have MemOp: ", 31);
        *((_QWORD *)v16 + 4) += 31;
      }
      else
      {
        llvm::raw_ostream::write(v16, "Instruction should have MemOp: ", 0x1FuLL);
      }
      llvm::MachineInstr::dump(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
    if (*((_DWORD *)v4 + 64))
      llvm::report_fatal_error((llvm *)"Some instructions should have memory operands", (const char *)1);
  }
  return 0;
}

uint64_t sub_1C4AD4D04(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = *(unsigned __int16 **)(a1 + 16);
  if ((v1[10] & 4) != 0)
  {
    v2 = sub_1C4C915C4(*v1);
    if ((v2 & 0xFF00000000) != 0)
      __asm { BR              X12 }
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  }
  return 0x100000005;
}

uint64_t sub_1C4AD4FB8(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  _WORD *v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  __int16 ***v25;
  uint64_t v27;
  int v28;
  unsigned int v29;

  if (llvm::MachineInstr::getNumExplicitOperands(a1) <= a2)
    return 0;
  v6 = **(unsigned __int16 **)(a1 + 16);
  if (word_1C6AA47DC[dword_1C6A9B6CC[v6] + (unsigned __int16)a2] == 62
    || (v7 = *(_QWORD *)(a1 + 32),
        v8 = (unsigned int *)(v7 + 32 * a2),
        v9 = *v8,
        v10 = *v8,
        v11 = v8[4],
        v10 == 7)
    && (v11 & 0xFFFFFFFE) == 0x56)
  {
    v12 = *(_QWORD *)(a1 + 48);
    if ((v12 & 7) != 0)
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 48) = v13;
    }
    if ((*(_WORD *)(v13 + 32) & 2) != 0)
      return 7;
    else
      return 6;
  }
  if (v10)
  {
    if (v10 == 7 && v11 - 81 <= 4)
    {
      if ((v9 & 0x20000) != 0)
        v16 = 3327;
      else
        v16 = 3839;
      if ((v16 & (v9 >> 8)) != 0)
        return 5;
      if ((v9 & 0x10000) == 0
        || sub_1C4C2FD5C(**(unsigned __int16 **)(a1 + 16)) != a2 && sub_1C4C2FD5C(v6) != a2)
      {
        return 4;
      }
    }
    return 0;
  }
  v17 = *(_DWORD *)(v7 + 32 * a2 + 4);
  if (!v17)
    return 0;
  if ((v17 & 0x80000000) != 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 40) + 24)
                    + 16 * (v17 & 0x7FFFFFFF));
    if ((v24 & 4) != 0)
      v25 = 0;
    else
      v25 = (__int16 ***)(v24 & 0xFFFFFFFFFFFFFFF8);
    if (v25 != &off_1E7FB1BF8 && v25 != &off_1E7FB1B50)
      goto LABEL_42;
    return 0;
  }
  v18 = a3[6];
  v19 = *(unsigned int *)(*a3 + 24 * v17 + 4);
  if (*(_WORD *)(v18 + 2 * v19))
  {
    v20 = *(_WORD *)(v18 + 2 * v19) + v17;
    v21 = (_WORD *)(a3[10] + 2 * *(unsigned int *)(*a3 + 24 * v17 + 12));
    v22 = (unsigned __int16 *)(v18 + 2 * v19 + 2);
    while (*v21 != 1)
    {
      v23 = *v22++;
      v20 += v23;
      ++v21;
      if (!v23)
        goto LABEL_30;
    }
    if (v20)
      v17 = v20;
  }
LABEL_30:
  if (v17 - 1 > 0x206 || ((byte_1C69FED14[(unint64_t)v17 >> 3] >> (v17 & 7)) & 1) == 0)
    return 0;
LABEL_42:
  if ((v9 & 0x1000000) == 0)
    return 1;
  v27 = sub_1C4C915C4(**(unsigned __int16 **)(a1 + 16));
  if ((v27 & 0xFF00000000) == 0)
    return 2;
  v28 = v27;
  result = 3;
  if ((v28 - 64) > 0x3A || ((1 << (v28 - 64)) & 0x60001F460000001) == 0)
  {
    v29 = v28 - 147;
    if (v29 > 0x14 || ((1 << v29) & 0x1E0001) == 0)
      return 2;
  }
  return result;
}

uint64_t sub_1C4AD5250(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;

  v1 = a1 + 48;
  v2 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v2 || (*(_BYTE *)v2 & 4) == 0)
  {
    while ((*(_WORD *)(v2 + 44) & 4) != 0)
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v2 == v1)
    return 0;
  while (1)
  {
    v3 = *(unsigned __int16 **)(v2 + 16);
    v4 = *((_QWORD *)v3 + 1);
    if ((*(_WORD *)(v2 + 44) & 0xC) != 0 && (*(_WORD *)(v2 + 44) & 4) == 0)
    {
      v9 = v2;
      if ((v4 & 0x20) != 0)
        goto LABEL_11;
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 16) + 8) & 0x20) != 0)
          goto LABEL_11;
      }
      if ((v4 & 0x400) != 0)
        goto LABEL_11;
      v10 = v2;
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 16) + 9) & 4) != 0)
          goto LABEL_11;
      }
    }
    else if ((v4 & 0x420) != 0)
    {
      goto LABEL_11;
    }
    if ((v3[8] & 0x40) == 0)
      return 0;
LABEL_11:
    v6 = *v3;
    v7 = sub_1C4C915C4(v6);
    if ((v7 & 0xFF00000000) == 0)
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    if ((_DWORD)v7 == 5)
      return *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32 * sub_1C4C2FD5C(v6) + 16);
    v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    if (!v2 || (*(_BYTE *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 4) != 0)
        v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v2 == v1)
      return 0;
  }
}

BOOL sub_1C4AD53A0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;

  v8 = **(unsigned __int16 **)(a2 + 16);
  v9 = sub_1C4C2FD5C(v8);
  v10 = *a1;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 32 * v9 + 19) & *a1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v12 = sub_1C4C915C4(v8);
    if ((v12 & 0xFF00000000) == 0)
LABEL_48:
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    v11 = 1;
    v13 = v12 > 0x16 || ((1 << v12) & 0x500008) == 0;
    if (v13)
      v11 = (_DWORD)v12 == 107;
  }
  v14 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = (_QWORD *)(a3 + 8);
    while (1)
    {
      if (sub_1C4AD4FB8(a2, v15, v17) - 4 >= 0xFFFFFFFD)
      {
        v18 = *(unsigned __int16 **)(a2 + 16);
        v19 = *v18;
        v20 = sub_1C4C915C4(*v18);
        v21 = v20 & 0xFF00000000;
        if (a4)
        {
          if (!v21)
            goto LABEL_48;
          if ((v20 - 164) >= 4 && (v20 - 103) >= 2)
            goto LABEL_31;
        }
        else if (!v21)
        {
          goto LABEL_48;
        }
        if ((_DWORD)v20 != 147)
          break;
        v31 = sub_1C4C2FD5C(v19);
        v32 = *(_QWORD *)(a2 + 32);
        if (*(_BYTE *)(v32 + 32 * v31))
          break;
        v33 = *(_DWORD *)(v32 + 32 * v31 + 4) - 7;
        v34 = v33 > 0x3D;
        v35 = (1 << v33) & 0x200003C102000203;
        if (!v34 && v35 != 0)
          break;
      }
LABEL_31:
      if (++v15 == v14)
      {
        v10 = *a1;
        goto LABEL_50;
      }
    }
    if (v15 >= llvm::MachineInstr::getNumExplicitOperands(a2))
      goto LABEL_47;
    if ((word_1C6AA47DC[dword_1C6A9B6CC[v19] + (unsigned __int16)v15] & 0xFFFB) == 0x3A)
    {
      v23 = v15 + 2;
    }
    else
    {
      v22 = *(_QWORD *)(a2 + 32);
      if ((*(_DWORD *)(v22 + 32 * v15) & 0x10000FF) == 0x1000000)
      {
        v24 = *((unsigned __int8 *)v18 + 4);
        if ((v18[4] & 2) == 0 || (v28 = *(_DWORD *)(a2 + 40), v28 == v24))
        {
          v25 = *((unsigned __int8 *)v18 + 4);
        }
        else
        {
          v29 = v28 - 1;
          v25 = *((unsigned __int8 *)v18 + 4);
          do
          {
            v30 = *(_DWORD *)(v22 + 32 * v24);
            if ((v30 & 0x10000FF) != 0x1000000)
              break;
            v25 += (v30 & 0x2000000) == 0;
            if (v29 == v24)
              break;
            ++v24;
          }
          while ((v30 & 0x2000000) == 0);
        }
        v23 = v25 + v15;
      }
      else
      {
        if (*(_DWORD *)(v22 + 32 * v15) && *(_DWORD *)(v22 + 32 * v15) != 7)
        {
LABEL_47:
          v23 = -1;
          goto LABEL_28;
        }
        v23 = v15 + 1;
      }
    }
LABEL_28:
    v26 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v23 + 16);
    v13 = ((v26 >> 20) & 0xF) == 0;
    v27 = 1 << (((v26 >> 20) & 0xFu) - 1);
    if (v13)
      v27 = 0;
    v16 |= v27;
    goto LABEL_31;
  }
  v16 = 0;
LABEL_50:
  if (v11)
    v37 = 0;
  else
    v37 = v10;
  *a1 = v37 | v16;
  return v11;
}

double sub_1C4AD5684(uint64_t a1, unsigned int a2, unsigned int a3, __int16 a4, uint64_t a5)
{
  int v5;
  int v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double result;
  unsigned int v21;

  v5 = 4;
  v6 = 1;
  if (((1 << a3) & 0xF531) == 0)
  {
    if (((1 << a3) & 0xCA) == 0)
      goto LABEL_5;
    v6 = 2;
  }
  if (a3 > 0xF || ((1 << a3) & 0xF100) == 0)
  {
    v5 = v6;
LABEL_5:
    v6 = v5;
    goto LABEL_6;
  }
  a2 = 15;
LABEL_6:
  v9 = __clz(__rbit32(a2)) & 0x1F;
  v10 = a1 + v9 * v6;
  v11 = (32 - __clz(a2) - v9) * v6;
  if ((a1 & 0xFF00000000) != 0)
    v12 = v10;
  else
    v12 = 0;
  if ((a1 & 0xFF00000000) != 0)
    v13 = v11;
  else
    v13 = 256;
  v14 = *(_QWORD *)(a5 + 48);
  if (!v14)
  {
    v21 = v12;
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a5 + 8) + 216))(*(_QWORD *)(a5 + 8), a5 + 128, a5);
    v12 = v21;
    *(_QWORD *)(a5 + 48) = v14;
  }
  v15 = sub_1C4A90D34(v14, v12, v13, a5);
  if (v15)
    v16 = *(_DWORD *)(v15 + 12);
  else
    v16 = 0;
  v17 = v15 | 4;
  if (v13)
    v18 = ((((unint64_t)(8 * v13) >> 3) & 0x1FFFFFFF) << 6) | 1;
  else
    v18 = 0;
  v19 = sub_1C484358C(a5 + 128, 80, 3);
  *(_QWORD *)v19 = v17;
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 16) = v16;
  *(_BYTE *)(v19 + 20) = 0;
  *(_QWORD *)(v19 + 24) = v18;
  *(_WORD *)(v19 + 32) = a4;
  *(_BYTE *)(v19 + 34) = 2;
  result = 0.0;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_QWORD *)(v19 + 72) = 0;
  *(_WORD *)(v19 + 36) = 1;
  return result;
}

void sub_1C4AD57F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  void (**v16)(_QWORD *);
  uint64_t (***v17)();
  void (**v18)(uint64_t (***)());
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  _BOOL4 v30;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (***v39)();
  char v40;
  unsigned int v41;
  uint64_t (***v42)();
  char v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t (**v52)();
  BOOL (*v53)(_BOOL8);
  uint64_t (***v54)();
  uint64_t (***v55)();
  uint64_t v56;

  v6 = a3;
  v56 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned int *)(a1 + 4);
  v11 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  if ((int)v10 >= 0)
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v10);
  v12 = *v11;
  if ((*(_BYTE *)(v12 + 3) & 1) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  v13 = *(_QWORD *)(v12 + 8);
  if (**(_WORD **)(v13 + 16) != 121)
  {
    v14 = (a3 & 0xFF00000000) != 0;
    goto LABEL_7;
  }
  v14 = (a3 & 0xFF00000000) != 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 48);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 32);
      if ((_UNKNOWN *)v26 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v53, (const llvm::detail::DoubleAPFloat *)(v25 + 32));
      }
      else
      {
        v53 = *(BOOL (**)(_BOOL8))(v25 + 32);
        if ((*(_DWORD *)(v26 + 8) + 64) >= 0x80)
        {
          v46 = v25;
          v10 = operator new[]();
          v25 = v46;
          v54 = (uint64_t (***)())v10;
        }
        v27 = *(_BYTE *)(v25 + 52);
        v28 = v27 & 7;
        BYTE4(v55) = v27 & 0xF;
        LODWORD(v55) = *(_DWORD *)(v25 + 48);
        v30 = (v27 & 6) != 0 && v28 != 3;
        if (v28 == 1 || v30)
        {
          v32 = *(unsigned int *)(v26 + 8);
          if ((v32 - 64) <= 0xFFFFFF7F)
            v33 = (uint64_t *)v10;
          else
            v33 = (uint64_t *)&v54;
          v36 = *(uint64_t **)(v25 + 40);
          v34 = (uint64_t *)(v25 + 40);
          v35 = v36;
          if ((*(_DWORD *)(*(v34 - 1) + 8) - 64) < 0xFFFFFF80)
            v34 = v35;
          if (v32 <= 0xFFFFFFBF)
          {
            v37 = (unint64_t)(v32 + 64) >> 6;
            do
            {
              v38 = *v34++;
              *v33++ = v38;
              --v37;
            }
            while (v37);
          }
        }
      }
      llvm::APFloat::convert((uint64_t)&v52, &unk_1C866F184, 1, v50);
      if (v6 == 1)
      {
        if ((char *)v53 == (char *)&unk_1C866F1C0)
          v42 = v54;
        else
          v42 = &v52;
        v43 = *((_BYTE *)v42 + 28);
        if ((v43 & 7) != 1)
        {
          if ((v43 & 7) == 0)
          {
            if ((v43 & 8) != 0)
              v41 = 0;
            else
              v41 = 1023;
LABEL_83:
            *(_DWORD *)a5 = 1;
            *(_QWORD *)(a5 + 8) = 0;
            *(_QWORD *)(a5 + 16) = v41;
            *(_BYTE *)(a5 + 32) = 1;
            if ((char *)v53 == (char *)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v54);
              return;
            }
            if ((*((_DWORD *)v53 + 2) - 64) <= 0xFFFFFF7F)
            {
              v20 = (uint64_t)v54;
              if (v54)
                goto LABEL_34;
            }
            return;
          }
          v45 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v52);
          if (v45 >= 15.984)
          {
            v41 = 1023;
            goto LABEL_83;
          }
          if (v45 > 0.0)
          {
            v41 = (float)(v45 * 64.0) & 0x3FF;
            goto LABEL_83;
          }
        }
      }
      else if (!v6)
      {
        v39 = &v52;
        if ((char *)v53 == (char *)&unk_1C866F1C0)
          v39 = v54;
        v40 = *((_BYTE *)v39 + 28);
        if ((v40 & 7) != 1)
        {
          if ((v40 & 7) != 0)
          {
            v44 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v52);
            if (v44 >= 31.984)
            {
              v41 = 2047;
            }
            else if (v44 <= -32.0)
            {
              v41 = 2048;
            }
            else
            {
              v41 = (int)(float)(v44 * 64.0) & 0xFFF;
            }
          }
          else if ((v40 & 8) != 0)
          {
            v41 = 2048;
          }
          else
          {
            v41 = 2047;
          }
          goto LABEL_83;
        }
      }
      v41 = 0;
      goto LABEL_83;
    }
  }
LABEL_7:
  v52 = &off_1E816EFF0;
  v53 = sub_1C554C894;
  v55 = &v52;
  v50[0] = &off_1E816F038;
  v50[1] = sub_1C554C8B0;
  v51 = v50;
  sub_1C554C3AC(v10, a2, (uint64_t)&v52, (uint64_t)v50, 0, 0, &v47);
  v15 = v51;
  if (v51 == v50)
  {
    v16 = (void (**)(_QWORD *))(v50[0] + 32);
    v15 = v50;
LABEL_9:
    (*v16)(v15);
    goto LABEL_10;
  }
  if (v51)
  {
    v16 = (void (**)(_QWORD *))(*v51 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v17 = v55;
  if (v55 == &v52)
  {
    v18 = (void (**)(uint64_t (***)()))(v52 + 4);
    v17 = &v52;
LABEL_12:
    (*v18)(v17);
    goto LABEL_13;
  }
  if (v55)
  {
    v18 = (void (**)(uint64_t (***)()))(*v55 + 5);
    goto LABEL_12;
  }
LABEL_13:
  if (v49)
  {
    v19 = v48;
    v20 = v47;
    if (v48 > 0x40)
      v21 = *(_QWORD *)v47;
    else
      v21 = v47 << -(char)v48 >> -(char)v48;
    v23 = !v14;
    if (v6)
      v23 = 1;
    if ((v23 & 1) == 0)
    {
      v24 = 1984;
      if ((int)v21 <= 31)
        v24 = (unint64_t)(v21 & 0x3F) << 6;
      if ((int)v21 >= -32)
        v21 = v24;
      else
        v21 = 2048;
    }
    *(_DWORD *)a5 = 1;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = v21;
    *(_BYTE *)(a5 + 32) = 1;
    if (v19 >= 0x41 && v20)
LABEL_34:
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
  else
  {
    sub_1C4AD5CB0(*(unsigned int *)(a1 + 4), a2, a5);
    if (!*(_BYTE *)(a5 + 32) || (!v6 ? (v22 = a4) : (v22 = 0), v14 && (v22 & 1) == 0))
    {
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 32) = 0;
    }
  }
}

uint64_t sub_1C4AD5CB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = result;
  if ((result & 0x80000000) == 0)
    goto LABEL_57;
  v6 = result & 0x7FFFFFFF;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * v6 + 8);
  if (v7 && ((*(_BYTE *)(v7 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v7 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0))
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 32);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 184))(*(_QWORD *)(v9 + 16));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 176))(*(_QWORD *)(v9 + 16));
  v12 = v11;
  v13 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
  if (v13 - 1 <= 0x3FFFFFFE)
    result = *(unsigned int *)(*(_QWORD *)(v11 + 264)
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v10, v13, v11) + 24)
                              + *(_DWORD *)(v12 + 272)
                              * ((*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240)) >> 3)));
  else
    result = llvm::TargetRegisterInfo::getRegSizeInBits(v11, v13, a2);
  v14 = **(unsigned __int16 **)(v8 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  if (v14 == 19)
  {
    while (1)
    {
      v16 = *(_QWORD *)(v8 + 32);
      if ((*(_DWORD *)(v16 + 32) & 0xFFF00) != 0)
        goto LABEL_57;
      v17 = *(unsigned int *)(v16 + 36);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_57;
      v6 = v17 & 0x7FFFFFFF;
      v18 = *(_QWORD *)(v15 + 16 * v6 + 8);
      if (v18
        && ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0))
      {
        v8 = *(_QWORD *)(v18 + 8);
      }
      else
      {
        v8 = 0;
      }
      v14 = **(unsigned __int16 **)(v8 + 16);
      if (v14 != 19)
        goto LABEL_18;
    }
  }
  v17 = v3;
LABEL_18:
  v19 = *(_QWORD *)(a2 + 272);
  if (v17 >> 31)
    v20 = (uint64_t *)(v15 + 16 * v6 + 8);
  else
    v20 = (uint64_t *)(v19 + 8 * v17);
  v21 = *v20;
  if (!v21
    || (*(_BYTE *)(v21 + 3) & 1) == 0 && ((v21 = *(_QWORD *)(v21 + 24)) == 0 || (*(_BYTE *)(v21 + 3) & 1) == 0)
    || (v42 = *(_QWORD *)(v21 + 8)) == 0
    || **(_WORD **)(v42 + 16) != 313
    || (v43 = *(_QWORD *)(v42 + 32), *(_BYTE *)(v43 + 32) != 1))
  {
    if (v14 != 119 || (_DWORD)result != 16)
    {
      if (v14 != 76 || (_DWORD)result != 64)
        goto LABEL_57;
      v23 = *(_QWORD *)(v8 + 32);
      v24 = *(unsigned int *)(v23 + 36);
      v25 = (uint64_t *)((int)v24 >= 0 ? v19 + 8 * v24 : v15 + 16 * (v24 & 0x7FFFFFFF) + 8);
      v26 = *v25;
      if (!v26)
        goto LABEL_57;
      v27 = v26;
      if ((*(_DWORD *)v26 & 0x1000000) == 0)
      {
        v27 = *(_QWORD *)(v26 + 24);
        if (!v27 || (*(_BYTE *)(v27 + 3) & 1) == 0)
          goto LABEL_57;
      }
      v28 = *(_QWORD *)(v27 + 8);
      if (!v28 || **(_WORD **)(v28 + 16) != 313 || *(_BYTE *)(*(_QWORD *)(v28 + 32) + 32) != 1)
        goto LABEL_57;
      v29 = *(unsigned int *)(v23 + 68);
      v30 = (uint64_t *)(v15 + 16 * (v29 & 0x7FFFFFFF) + 8);
      v31 = (uint64_t *)(v19 + 8 * v29);
      if ((int)v29 >= 0)
        v30 = v31;
      v32 = *v30;
      if (!v32)
        goto LABEL_57;
      v33 = v32;
      if ((*(_DWORD *)v32 & 0x1000000) == 0)
      {
        v33 = *(_QWORD *)(v32 + 24);
        if (!v33 || (*(_BYTE *)(v33 + 3) & 1) == 0)
          goto LABEL_57;
      }
      v34 = *(_QWORD *)(v33 + 8);
      if (!v34 || **(_WORD **)(v34 + 16) != 313 || *(_BYTE *)(*(_QWORD *)(v34 + 32) + 32) != 1)
        goto LABEL_57;
      if ((*(_DWORD *)v26 & 0x1000000) == 0)
      {
        v26 = *(_QWORD *)(v26 + 24);
        if (!v26)
          goto LABEL_92;
        if ((*(_BYTE *)(v26 + 3) & 1) == 0)
        {
LABEL_91:
          v26 = 0;
          goto LABEL_92;
        }
      }
      v26 = *(_QWORD *)(v26 + 8);
      if (v26)
      {
        if (**(_WORD **)(v26 + 16) == 313)
        {
          v35 = *(_QWORD *)(v26 + 32);
          if (*(_BYTE *)(v35 + 32) == 1)
          {
            v26 = *(_QWORD *)(v35 + 48);
            v36 = v26 & 0xFFFFFFFFFFFFFF00;
            v26 = v26;
            goto LABEL_93;
          }
        }
        goto LABEL_91;
      }
LABEL_92:
      v36 = 0;
LABEL_93:
      if ((*(_DWORD *)v32 & 0x1000000) == 0)
      {
        v32 = *(_QWORD *)(v32 + 24);
        if (!v32)
          goto LABEL_101;
        if ((*(_BYTE *)(v32 + 3) & 1) == 0)
        {
LABEL_100:
          v32 = 0;
          goto LABEL_101;
        }
      }
      v32 = *(_QWORD *)(v32 + 8);
      if (v32)
      {
        if (**(_WORD **)(v32 + 16) == 313)
        {
          v55 = *(_QWORD *)(v32 + 32);
          if (*(_BYTE *)(v55 + 32) == 1)
          {
            v32 = *(_QWORD *)(v55 + 48);
            v56 = v32 & 0xFFFFFFFFFFFFFF00;
            v32 = v32;
LABEL_102:
            if ((v26 & 7) == 0)
            {
              v57 = v36 | v26;
              if (v57 + 4 == (v56 | v32))
              {
                if (v57 >= 0)
                  v58 = v57;
                else
                  v58 = v57 + 1;
                v52 = v58 >> 1;
                v53 = HIDWORD(v52);
                v54 = 775;
                goto LABEL_90;
              }
            }
LABEL_57:
            v41 = 0;
            *(_BYTE *)a3 = 0;
            goto LABEL_58;
          }
        }
        goto LABEL_100;
      }
LABEL_101:
      v56 = 0;
      goto LABEL_102;
    }
    v37 = *(unsigned int *)(*(_QWORD *)(v8 + 32) + 36);
    v38 = (uint64_t *)(v15 + 16 * (v37 & 0x7FFFFFFF) + 8);
    v39 = (uint64_t *)(v19 + 8 * v37);
    if ((int)v37 >= 0)
      v38 = v39;
    v40 = *v38;
    if (!v40)
      goto LABEL_57;
    v47 = v40;
    if ((*(_DWORD *)v40 & 0x1000000) == 0)
    {
      v47 = *(_QWORD *)(v40 + 24);
      if (!v47 || (*(_BYTE *)(v47 + 3) & 1) == 0)
        goto LABEL_57;
    }
    v48 = *(_QWORD *)(v47 + 8);
    if (!v48 || **(_WORD **)(v48 + 16) != 313 || *(_BYTE *)(*(_QWORD *)(v48 + 32) + 32) != 1)
      goto LABEL_57;
    if ((*(_DWORD *)v40 & 0x1000000) == 0)
    {
      v40 = *(_QWORD *)(v40 + 24);
      if (!v40)
        goto LABEL_88;
      if ((*(_BYTE *)(v40 + 3) & 1) == 0)
      {
LABEL_87:
        v40 = 0;
        goto LABEL_88;
      }
    }
    v40 = *(_QWORD *)(v40 + 8);
    if (v40)
    {
      if (**(_WORD **)(v40 + 16) == 313)
      {
        v49 = *(_QWORD *)(v40 + 32);
        if (*(_BYTE *)(v49 + 32) == 1)
        {
          v40 = *(_QWORD *)(v49 + 48);
          v50 = v40 & 0xFFFFFFFFFFFFFF00;
          v40 = v40;
LABEL_89:
          v52 = (uint64_t)(v50 | v40) / 2;
          v53 = HIDWORD(v52);
          v54 = 263;
LABEL_90:
          *(_DWORD *)a3 = v54;
          *(_DWORD *)(a3 + 4) = v52;
          *(_QWORD *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 64;
          *(_DWORD *)(a3 + 24) = v53;
          v41 = 1;
          goto LABEL_58;
        }
      }
      goto LABEL_87;
    }
LABEL_88:
    v50 = 0;
    goto LABEL_89;
  }
  v44 = *(_QWORD *)(v43 + 48) / 2;
  v45 = ((result + 7) >> 3) - 2;
  if (v45 > 6)
    v46 = 7;
  else
    v46 = dword_1C677F220[v45];
  v51 = HIDWORD(v44);
  *(_DWORD *)a3 = v46;
  *(_DWORD *)(a3 + 4) = v44;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 64;
  v41 = 1;
  *(_DWORD *)(a3 + 24) = v51;
LABEL_58:
  *(_BYTE *)(a3 + 32) = v41;
  return result;
}

void sub_1C4AD61BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  int v10;

  v6 = atomic_load((unsigned __int8 *)&qword_1EF8F6698);
  v7 = &unk_1EF8F6000;
  if ((v6 & 1) == 0)
  {
    v10 = __cxa_guard_acquire(&qword_1EF8F6698);
    v7 = &unk_1EF8F6000;
    if (v10)
    {
      byte_1EF8F6690 = 1;
      __cxa_guard_release(&qword_1EF8F6698);
      v7 = (_BYTE *)&unk_1EF8F6000;
    }
  }
  if ((v7[1680] & 1) == 0)
    goto LABEL_6;
  v8 = sub_1C554C050(*(_DWORD *)(a1 + 4), a2);
  if (v9)
  {
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 32) = 1;
    return;
  }
  sub_1C4AD5CB0(*(unsigned int *)(a1 + 4), a2, a3);
  if (!*(_BYTE *)(a3 + 32))
  {
LABEL_6:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
}

double sub_1C4AD627C@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned __int8 v6;
  int SpillStackObject;
  uint64_t *FixedStack;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double result;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = 63 - __clz(a3);
  SpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject(*(unsigned __int8 **)(v5 + 56), a2, v6);
  *(_DWORD *)a4 = SpillStackObject;
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v5 + 432), SpillStackObject);
  if (FixedStack)
    v10 = *((_DWORD *)FixedStack + 3);
  else
    v10 = 0;
  v11 = (unint64_t)FixedStack | 4;
  v12 = v5 + 128;
  v13 = sub_1C484358C(v12, 80, 3);
  *(_QWORD *)v13 = v11;
  *(_QWORD *)(v13 + 8) = 0;
  v14 = ((unint64_t)(a2 & 0x1FFFFFFF) << 6) | 1;
  *(_DWORD *)(v13 + 16) = v10;
  *(_BYTE *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 24) = v14;
  *(_WORD *)(v13 + 32) = 2;
  *(_BYTE *)(v13 + 34) = v6;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_QWORD *)(v13 + 72) = 0;
  *(_WORD *)(v13 + 36) = 1;
  *(_QWORD *)(a4 + 8) = v13;
  v15 = sub_1C484358C(v12, 80, 3);
  *(_QWORD *)v15 = v11;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = v10;
  *(_BYTE *)(v15 + 20) = 0;
  *(_QWORD *)(v15 + 24) = v14;
  *(_WORD *)(v15 + 32) = 1;
  *(_BYTE *)(v15 + 34) = v6;
  result = 0.0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_QWORD *)(v15 + 72) = 0;
  *(_WORD *)(v15 + 36) = 1;
  *(_QWORD *)(a4 + 16) = v15;
  return result;
}

llvm::MachineFunction *sub_1C4AD6390(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  llvm::MachineFunction *v3;
  llvm::MachineInstr *v4;
  llvm::MachineInstr *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (2 * a2) | 0x810;
  v3 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 6846, 0, 0, 0, 0, 0);
  v5 = v4;
  v7 = 1;
  v8 = 0;
  v9 = 0;
  llvm::MachineInstr::addOperand(v4, v3, (const llvm::MachineOperand *)&v7);
  v7 = 1;
  v8 = 0;
  v9 = v2;
  llvm::MachineInstr::addOperand(v5, v3, (const llvm::MachineOperand *)&v7);
  return v3;
}

void sub_1C4AD642C(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;

  v4 = sub_1C4C915C4(a1[4]);
  if ((v4 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  v5 = v4 - 61;
  if ((v4 - 61) > 0x3D)
  {
LABEL_16:
    if ((_DWORD)v4 == 191)
      __break(1u);
    goto LABEL_4;
  }
  if (((1 << v5) & 0x26B18000000FLL) == 0)
  {
    if (((1 << v5) & 0x110000000000) != 0)
    {
      v6 = 3;
      goto LABEL_5;
    }
    if (((1 << v5) & 0x3000000000000000) != 0)
    {
      v6 = 2;
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_4:
  v6 = 2;
LABEL_5:
  v7 = 0;
  v8 = 0;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = 4 * v6;
  do
  {
    v10 = sub_1C4C2FD5C(*((unsigned __int16 *)a1 + 8));
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * v10))
    {
      if (v8 >= *(_DWORD *)(a2 + 12))
      {
        v11 = v8 + 1;
        v12 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11, 4);
        v10 = v12;
        v8 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v10;
      v8 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v8;
    }
    v7 += 4;
  }
  while (v9 != v7);
}

uint64_t sub_1C4AD662C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  char v32;
  int v33;
  _OWORD *v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  _OWORD *v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  int v45;
  _DWORD *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  int v53;
  uint64_t *v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  int v58;
  _DWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  unsigned int *v67;
  unsigned int v68;
  BOOL v69;
  uint64_t *v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  int v77;
  _OWORD *v78;
  int v79;
  unsigned int v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  _OWORD *v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  _DWORD *v113;
  unsigned int v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD v122[4];
  uint64_t v123;

  v8 = (uint64_t *)result;
  v123 = *MEMORY[0x1E0C80C00];
  v121 = 1;
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v122[0] = v9;
  v122[1] = v9;
  v122[2] = v9;
  v122[3] = v9;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v10 = a3;
  v113 = a6;
  if (a3)
  {
    v11 = *(_QWORD *)(result + 8);
    v12 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 112) + 2 * a3);
    result = sub_1C49E1960(v11, a3);
    v13 = v12 + (result >> 4);
    v116 = v12 | (v13 << 32);
    if (a4)
    {
      LODWORD(v12) = v12 >> 1;
      LODWORD(v13) = (v13 + 1) >> 1;
      v116 = __PAIR64__(v13, v12);
    }
    for (; v12 < v13; LODWORD(v116) = v12)
    {
      if ((v121 & 1) != 0)
      {
        v14 = 16;
        v15 = v122;
      }
      else
      {
        v14 = DWORD2(v122[0]);
        if (!DWORD2(v122[0]))
        {
          v24 = 0;
LABEL_20:
          result = (uint64_t)sub_1C4838948((uint64_t)&v121, (uint64_t)&v116, &v116, v24);
          *(_DWORD *)result = v116;
          LODWORD(v12) = v116;
          LODWORD(v13) = HIDWORD(v116);
          goto LABEL_21;
        }
        v15 = *(_OWORD **)&v122[0];
      }
      v16 = v14 - 1;
      v17 = v16 & (37 * v12);
      v18 = (_DWORD *)v15 + v17;
      v19 = *v18;
      if ((_DWORD)v12 != *v18)
      {
        v20 = 0;
        v21 = 1;
        while (v19 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v19 == -2;
          if (v22)
            v20 = v18;
          v23 = v17 + v21++;
          v17 = v23 & v16;
          v18 = (_DWORD *)v15 + v17;
          v19 = *v18;
          if ((_DWORD)v12 == *v18)
            goto LABEL_21;
        }
        if (v20)
          v24 = v20;
        else
          v24 = v18;
        goto LABEL_20;
      }
LABEL_21:
      LODWORD(v12) = v12 + 1;
    }
    a6 = v113;
  }
  *a6 = a6 + 2;
  a6[1] = 0x400000000;
  v25 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v25)
    goto LABEL_164;
  v112 = a2;
  v26 = &v121;
  v27 = *(unsigned int **)a2;
  v28 = &v27[v25];
  do
  {
    v115 = *v27;
    v29 = *(_DWORD *)(*(_QWORD *)(*v8 + 32) + 32 * v115 + 4);
    if (!v29)
      goto LABEL_83;
    result = (uint64_t)sub_1C49E178C(&v116, (_QWORD *)*v8, v115, v8[1], 0, a4 != 0);
    v30 = v117;
    v31 = HIDWORD(v116);
    if (v117 == HIDWORD(v116))
      goto LABEL_83;
    v32 = 0;
    do
    {
      if ((v121 & 1) != 0)
      {
        v33 = 16;
        v34 = v122;
      }
      else
      {
        v33 = DWORD2(v122[0]);
        if (!DWORD2(v122[0]))
        {
          if (!v10)
            goto LABEL_63;
          goto LABEL_56;
        }
        v34 = *(_OWORD **)&v122[0];
      }
      v35 = v33 - 1;
      v36 = v35 & (37 * v31);
      v37 = *((_DWORD *)v34 + v36);
      if ((_DWORD)v31 == v37)
      {
LABEL_38:
        v32 = 1;
        goto LABEL_56;
      }
      v38 = 1;
      while (v37 != -1)
      {
        v39 = v36 + v38++;
        v36 = v39 & v35;
        v37 = *((_DWORD *)v34 + v36);
        if ((_DWORD)v31 == v37)
          goto LABEL_38;
      }
      if (!v10)
      {
        if ((v121 & 1) != 0)
        {
          v40 = 16;
          v41 = v122;
          goto LABEL_42;
        }
        v40 = DWORD2(v122[0]);
        if (DWORD2(v122[0]))
        {
          v41 = *(_OWORD **)&v122[0];
LABEL_42:
          v42 = v40 - 1;
          v43 = v42 & (37 * v31);
          v44 = (_DWORD *)v41 + v43;
          v45 = *v44;
          if ((_DWORD)v31 == *v44)
            goto LABEL_56;
          v46 = 0;
          v47 = 1;
          while (v45 != -1)
          {
            if (v46)
              v48 = 0;
            else
              v48 = v45 == -2;
            if (v48)
              v46 = v44;
            v49 = v43 + v47++;
            v43 = v49 & v42;
            v44 = (_DWORD *)v41 + v43;
            v45 = *v44;
            if ((_DWORD)v31 == *v44)
              goto LABEL_56;
          }
          if (v46)
            v50 = v46;
          else
            v50 = v44;
        }
        else
        {
LABEL_63:
          v50 = 0;
        }
        result = (uint64_t)sub_1C4838948((uint64_t)&v121, (uint64_t)&v116 + 4, (_DWORD *)&v116 + 1, v50);
        *(_DWORD *)result = HIDWORD(v116);
        LODWORD(v31) = HIDWORD(v116);
        v30 = v117;
      }
LABEL_56:
      LODWORD(v31) = v31 + 1;
      HIDWORD(v116) = v31;
    }
    while ((_DWORD)v31 != v30);
    if ((v32 & 1) != 0)
    {
      result = (uint64_t)v113;
      v51 = v113[2];
      if (v51 >= v113[3])
      {
        result = (uint64_t)sub_1C6158B5C(v113, v29, v115);
      }
      else
      {
        v52 = (unsigned int *)(*(_QWORD *)v113 + 8 * v51);
        *v52 = v29;
        v52[1] = v115;
        ++v113[2];
      }
      if ((v118 & 1) != 0)
      {
        v53 = 4;
        v54 = &v119;
        goto LABEL_69;
      }
      v53 = v120;
      if (!(_DWORD)v120)
      {
        v63 = 0;
        goto LABEL_82;
      }
      v54 = (uint64_t *)v119;
LABEL_69:
      v55 = v53 - 1;
      v56 = (37 * v115) & v55;
      v57 = (_DWORD *)v54 + v56;
      v58 = *v57;
      if (v115 != *v57)
      {
        v59 = 0;
        v60 = 1;
        while (v58 != -1)
        {
          if (v59)
            v61 = 0;
          else
            v61 = v58 == -2;
          if (v61)
            v59 = v57;
          v62 = v56 + v60++;
          v56 = v62 & v55;
          v57 = (_DWORD *)v54 + v56;
          v58 = *v57;
          if (v115 == *v57)
            goto LABEL_83;
        }
        if (v59)
          v63 = v59;
        else
          v63 = v57;
LABEL_82:
        result = (uint64_t)sub_1C47686DC((uint64_t)&v118, (uint64_t)&v115, &v115, v63);
        *(_DWORD *)result = v115;
      }
    }
LABEL_83:
    ++v27;
  }
  while (v27 != v28);
  v64 = v112;
  if (!a5 || !v113[2])
    goto LABEL_164;
  result = (uint64_t)sub_1C4AD764C(&v121);
  v65 = v118;
  if (v118 <= 1)
  {
    v66 = (uint64_t *)v119;
    v68 = v120;
    if ((_DWORD)v118)
      v110 = &v119;
    else
      v110 = (uint64_t *)v119;
    if ((_DWORD)v118)
      v111 = 4;
    else
      v111 = v120;
    v67 = (unsigned int *)v110 + v111;
    v26 = (uint64_t *)v67;
  }
  else
  {
    v66 = &v119;
    if ((v118 & 1) != 0)
    {
LABEL_93:
      v65 = v118 & 1;
      while (*(_DWORD *)v66 >= 0xFFFFFFFE)
      {
        v66 = (uint64_t *)((char *)v66 + 4);
        if (v66 == v26)
        {
          v66 = v26;
          break;
        }
      }
      v67 = (unsigned int *)v66;
      v66 = (uint64_t *)v119;
      v68 = v120;
    }
    else
    {
      v66 = (uint64_t *)v119;
      v68 = v120;
      if ((_DWORD)v120)
      {
        v26 = (uint64_t *)(v119 + 4 * v120);
        v64 = v112;
        goto LABEL_93;
      }
      v65 = 0;
      v67 = (unsigned int *)v119;
      v26 = (uint64_t *)v119;
      v64 = v112;
    }
  }
  v69 = v65 == 0;
  if (v65)
    v70 = &v119;
  else
    v70 = v66;
  if (v69)
    v71 = v68;
  else
    v71 = 4;
  v72 = (unsigned int *)v70 + v71;
  if (v67 != v72)
  {
    while (1)
    {
      result = (uint64_t)sub_1C49E178C(&v116, (_QWORD *)*v8, *v67, v8[1], 0, a4 != 0);
      v73 = v117;
      v74 = HIDWORD(v116);
      if (v117 != HIDWORD(v116))
        break;
LABEL_106:
      v75 = v67 + 1;
      while (v75 != (unsigned int *)v26)
      {
        v76 = *v75++;
        if (v76 <= 0xFFFFFFFD)
        {
          v67 = v75 - 1;
          goto LABEL_132;
        }
      }
      v67 = (unsigned int *)v26;
LABEL_132:
      if (v67 == v72)
        goto LABEL_133;
    }
    while (2)
    {
      if ((v121 & 1) != 0)
      {
        v77 = 16;
        v78 = v122;
        goto LABEL_112;
      }
      v77 = DWORD2(v122[0]);
      if (DWORD2(v122[0]))
      {
        v78 = *(_OWORD **)&v122[0];
LABEL_112:
        v79 = v77 - 1;
        v80 = v79 & (37 * v74);
        v81 = (_DWORD *)v78 + v80;
        v82 = *v81;
        if ((_DWORD)v74 != *v81)
        {
          v83 = 0;
          v84 = 1;
          while (v82 != -1)
          {
            if (v83)
              v85 = 0;
            else
              v85 = v82 == -2;
            if (v85)
              v83 = v81;
            v86 = v80 + v84++;
            v80 = v86 & v79;
            v81 = (_DWORD *)v78 + v80;
            v82 = *v81;
            if ((_DWORD)v74 == *v81)
              goto LABEL_126;
          }
          if (v83)
            v87 = v83;
          else
            v87 = v81;
LABEL_125:
          result = (uint64_t)sub_1C4838948((uint64_t)&v121, (uint64_t)&v116 + 4, (_DWORD *)&v116 + 1, v87);
          *(_DWORD *)result = HIDWORD(v116);
          LODWORD(v74) = HIDWORD(v116);
          v73 = v117;
        }
LABEL_126:
        LODWORD(v74) = v74 + 1;
        HIDWORD(v116) = v74;
        if ((_DWORD)v74 == v73)
          goto LABEL_106;
        continue;
      }
      break;
    }
    v87 = 0;
    goto LABEL_125;
  }
LABEL_133:
  v88 = *(unsigned int *)(v64 + 8);
  if (!(_DWORD)v88)
    goto LABEL_164;
  v89 = *(unsigned int **)v64;
  v90 = *(_QWORD *)v64 + 4 * v88;
  while (2)
  {
    v91 = *v89;
    if ((v118 & 1) != 0)
    {
      v92 = 4;
      v93 = &v119;
LABEL_137:
      v94 = v92 - 1;
      v95 = v94 & (37 * v91);
      v96 = *((_DWORD *)v93 + v95);
      if ((_DWORD)v91 == v96)
        goto LABEL_161;
      v97 = 1;
      while (v96 != -1)
      {
        v98 = v95 + v97++;
        v95 = v98 & v94;
        v96 = *((_DWORD *)v93 + v95);
        if ((_DWORD)v91 == v96)
          goto LABEL_161;
      }
    }
    else
    {
      v92 = v120;
      if ((_DWORD)v120)
      {
        v93 = (uint64_t *)v119;
        goto LABEL_137;
      }
    }
    result = (uint64_t)sub_1C49E178C(&v116, (_QWORD *)*v8, *v89, v8[1], 0, a4 != 0);
    v99 = v116;
    v100 = HIDWORD(v116);
    if (v117 == HIDWORD(v116))
      goto LABEL_161;
    if ((v121 & 1) != 0)
      v101 = v122;
    else
      v101 = *(_OWORD **)&v122[0];
    if ((v121 & 1) != 0)
      v102 = 15;
    else
      v102 = DWORD2(v122[0]) - 1;
    while (2)
    {
      if (!(v121 & 1 | (DWORD2(v122[0]) != 0)))
      {
LABEL_157:
        v99 = (v99 & 0xFFFFFFFF00000000) + 0x100000000;
        v100 = HIDWORD(v99);
        if (v117 == HIDWORD(v99))
          goto LABEL_161;
        continue;
      }
      break;
    }
    v103 = (37 * v100) & v102;
    v104 = *((_DWORD *)v101 + v103);
    if (v104 != (_DWORD)v100)
    {
      v105 = 1;
      while (v104 != -1)
      {
        v106 = v103 + v105++;
        v103 = v106 & v102;
        v104 = *((_DWORD *)v101 + v103);
        if (v104 == (_DWORD)v100)
          goto LABEL_159;
      }
      goto LABEL_157;
    }
LABEL_159:
    v107 = *(_DWORD *)(*(_QWORD *)(*v8 + 32) + 32 * v91 + 4);
    v108 = v113[2];
    if (v108 >= v113[3])
    {
      result = (uint64_t)sub_1C6158B5C(v113, v107, v91);
    }
    else
    {
      v109 = (unsigned int *)(*(_QWORD *)v113 + 8 * v108);
      *v109 = v107;
      v109[1] = v91;
      ++v113[2];
    }
LABEL_161:
    if (++v89 != (unsigned int *)v90)
      continue;
    break;
  }
LABEL_164:
  if ((v118 & 1) == 0)
    result = MEMORY[0x1CAA32FB4](v119, 4);
  if ((v121 & 1) == 0)
    return MEMORY[0x1CAA32FB4](*(_QWORD *)&v122[0], 4);
  return result;
}

BOOL sub_1C4AD6E84(uint64_t a1)
{
  _BYTE *v1;
  _BOOL8 result;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v1 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16);
  if (v1[374])
  {
    v3 = **(unsigned __int16 **)(a1 + 16);
    v4 = sub_1C4C915C4(v3);
    if ((v4 & 0xFF00000000) != 0)
    {
      v5 = v4;
      result = 0;
      switch(v5)
      {
        case 0x76u:
          if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * sub_1C4C2FD5C(v3) + 16) != 8)
            return 0;
          goto LABEL_6;
        case 0x77u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
        case 0x8Cu:
        case 0x8Du:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0x96u:
        case 0x97u:
        case 0x9Au:
        case 0x9Bu:
        case 0xA2u:
        case 0xA3u:
        case 0xA4u:
        case 0xA5u:
        case 0xA6u:
        case 0xA7u:
        case 0xA8u:
        case 0xA9u:
        case 0xAAu:
        case 0xABu:
          return result;
        case 0x7Du:
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x84u:
        case 0x85u:
        case 0x86u:
        case 0x87u:
        case 0x88u:
        case 0x89u:
        case 0x8Au:
        case 0xACu:
        case 0xADu:
        case 0xAEu:
        case 0xAFu:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB3u:
        case 0xB4u:
        case 0xB5u:
        case 0xB6u:
        case 0xB7u:
        case 0xB8u:
        case 0xB9u:
          goto LABEL_6;
        case 0x8Bu:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x98u:
        case 0x99u:
        case 0x9Cu:
        case 0x9Du:
        case 0x9Eu:
        case 0x9Fu:
        case 0xA0u:
        case 0xA1u:
          v7 = sub_1C4C2FD5C(v3);
          v8 = *(_QWORD *)(a1 + 32);
          v9 = 32 * v7;
          goto LABEL_8;
        default:
          if (v5 > 0x38)
            return result;
          if (((1 << v5) & 0x30030200000) != 0)
            goto LABEL_6;
          if (v5 == 38)
          {
            v10 = sub_1C4C2FD5C(v3);
            v11 = sub_1C4C2FD5C(v3);
            v8 = *(_QWORD *)(a1 + 32);
            if (!*(_BYTE *)(v8 + 32 * v11))
              goto LABEL_6;
            if ((v10 & 0x80000000) == 0)
            {
              v9 = 32 * (unsigned __int16)v10;
LABEL_8:
              if (!*(_BYTE *)(v8 + v9))
                goto LABEL_6;
            }
          }
          else
          {
            if (v5 != 56)
              return result;
            if ((sub_1C4C2FD5C(v3) & 0x80000000) == 0
              && (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * sub_1C4C2FD5C(v3) + 16) & 0xFFFFFFFELL) == 4)
            {
LABEL_6:
              v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 176))(v1);
              return (~sub_1C4AD4FB8(a1, 0, (_QWORD *)(v6 + 8)) & 5) == 0;
            }
          }
          break;
      }
    }
  }
  return 0;
}

uint64_t sub_1C4AD7040(uint64_t a1)
{
  unsigned __int8 v1;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 560))(*(_QWORD *)(a1 + 344));
  v1 = atomic_load((unsigned __int8 *)&qword_1EF8F66A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8F66A0))
    __cxa_guard_release(&qword_1EF8F66A0);
  return 0;
}

BOOL sub_1C4AD7094(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _BOOL8 result;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16) + 385))
    return 0;
  v1 = **(unsigned __int16 **)(a1 + 16);
  v2 = sub_1C4C915C4(v1);
  result = 0;
  if ((v2 & 0xFF00000000) != 0 && v2 == 42)
    return sub_1C4C32DEC(v1) == 22;
  return result;
}

BOOL sub_1C4AD7110(uint64_t a1)
{
  int v1;
  uint64_t v2;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16) + 396)
    && (v1 = **(unsigned __int16 **)(a1 + 16), v2 = sub_1C4C915C4(v1), (v2 & 0xFF00000000) != 0)
    && ((_DWORD)v2 == 44 || (_DWORD)v2 == 38))
  {
    return sub_1C4C32DEC(v1) == 22;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C4AD7184(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *((_QWORD *)v1 + 2);
  if ((v2 & 0x400000000) == 0)
    return 0;
  v4 = a1;
  v5 = *((_QWORD *)v1 + 1);
  if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
  {
    if ((v5 & 0x400) != 0)
      return 1;
    result = 1;
    while ((*(_WORD *)(v4 + 44) & 8) != 0)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v4 + 16) + 9) & 4) != 0)
        return result;
    }
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = (v5 >> 10) & 1;
  }
  result = 1;
  if ((v2 & 0x40) == 0 && (v7 & 1) == 0)
  {
    v8 = sub_1C4C915C4(*v1);
    if ((v8 & 0xFF00000000) == 0)
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    v9 = v8;
    result = 0;
    if (v9 > 187)
    {
      if ((v9 - 188) > 1)
        return result;
    }
    else if (v9 != 20 && v9 != 22 && v9 != 107)
    {
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t sub_1C4AD7260(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 8);
  if (!v1 || (v2 = *(_QWORD *)(result + 8), (*(_BYTE *)v1 & 4) == 0))
  {
    v2 = *(_QWORD *)(result + 8);
    if ((*(_WORD *)(v1 + 44) & 8) != 0)
    {
      v2 = *(_QWORD *)(result + 8);
      do
        v2 = *(_QWORD *)(v2 + 8);
      while ((*(_WORD *)(v2 + 44) & 8) != 0);
    }
  }
  v3 = *(_QWORD **)(v2 + 8);
  v4 = *(_QWORD **)(v1 + 24);
  if (v3 == v4 + 6)
  {
    v6 = v4[4] + 320;
    while (1)
    {
      v4 = (_QWORD *)v4[1];
      if (v4 == (_QWORD *)v6)
        break;
      if (v4 + 6 != (_QWORD *)(v4[6] & 0xFFFFFFFFFFFFFFF8))
      {
        v5 = v4[7];
        goto LABEL_15;
      }
    }
    *(_BYTE *)result = 1;
  }
  else
  {
    if ((*(_BYTE *)v1 & 4) == 0)
    {
      while ((*(_WORD *)(v1 + 44) & 8) != 0)
        v1 = *(_QWORD *)(v1 + 8);
    }
    v5 = *(_QWORD *)(v1 + 8);
LABEL_15:
    *(_QWORD *)(result + 8) = v5;
  }
  return result;
}

BOOL sub_1C4AD7304(uint64_t a1)
{
  _BOOL8 result;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16) + 397))
    return 0;
  v3 = **(unsigned __int16 **)(a1 + 16);
  v4 = sub_1C4C915C4(v3);
  if ((v4 & 0xFF00000000) == 0)
    return 0;
  if ((_DWORD)v4 == 88 || (_DWORD)v4 == 59)
  {
    v20 = sub_1C4C32DEC(v3);
    v21 = sub_1C4C32DEC(v3);
    v22 = sub_1C4C32DEC(v3);
    v23 = sub_1C4C32DEC(v3);
    result = 0;
    if (v20)
      v24 = 0;
    else
      v24 = v21 == 0;
    if (!v24 || v22 != 0 || v23 != 0)
      return result;
    v27 = sub_1C4C2FD5C(v3);
    v28 = *(_QWORD *)(a1 + 32);
    v14 = (unsigned __int8 *)(v28 + 32 * v27);
    v29 = *v14;
    v16 = (unsigned __int8 *)(v28 + 32 * sub_1C4C2FD5C(v3));
    v30 = *v16;
    v31 = *(unsigned __int8 *)(v28 + 32 * sub_1C4C2FD5C(v3));
    v17 = *(unsigned __int8 *)(v28 + 32 * sub_1C4C2FD5C(v3));
    if (v29)
      v32 = 0;
    else
      v32 = v30 == 0;
    v19 = v32 && v31 == 0;
  }
  else
  {
    if ((v4 - 36) >= 2)
      return 0;
    v5 = sub_1C4C32DEC(v3);
    v6 = sub_1C4C32DEC(v3);
    v7 = sub_1C4C32DEC(v3);
    v8 = !v5 && v6 == 0;
    if (!v8 || v7 != 0)
      return 0;
    v10 = sub_1C4C2FD5C(v3);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(unsigned __int8 *)(v11 + 32 * v10);
    v13 = *(unsigned __int8 *)(v11 + 32 * sub_1C4C2FD5C(v3));
    v14 = (unsigned __int8 *)(v11 + 32 * sub_1C4C2FD5C(v3));
    v15 = *v14;
    v16 = (unsigned __int8 *)(v11 + 32 * sub_1C4C2FD5C(v3));
    v17 = *v16;
    if (v12)
      v18 = 0;
    else
      v18 = v13 == 0;
    v19 = v18 && v15 == 0;
  }
  if (!v19 || v17 != 0)
    return 0;
  return *((_DWORD *)v14 + 1) == *((_DWORD *)v16 + 1);
}

BOOL sub_1C4AD7524(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  result = 0;
  if (a1 && a2)
  {
    v5 = **(unsigned __int16 **)(a1 + 16);
    v6 = sub_1C4C915C4(v5);
    if ((v6 & 0xFF00000000) == 0)
      return 0;
    if ((v6 - 51) > 0x18 || ((1 << (v6 - 51)) & 0x1F80007) == 0)
      return 0;
    v8 = **(unsigned __int16 **)(a2 + 16);
    v9 = sub_1C4C915C4(v8);
    if ((v9 & 0xFF00000000) == 0)
      return 0;
    if ((v9 - 51) > 0x18 || ((1 << (v9 - 51)) & 0x1F80007) == 0)
      return 0;
    v11 = sub_1C4C32DEC(v8);
    result = 0;
    if (v11 == 33)
      return result;
    v12 = sub_1C4C2FD5C(v5);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = v12;
    v15 = sub_1C4C2FD5C(v8);
    v16 = *(_QWORD *)(a2 + 32);
    return *(_DWORD *)(v13 + 32 * v14 + 4) == *(_DWORD *)(v16 + 32 * v15 + 4)
        && ((*(_DWORD *)(v16 + 32 * v15) ^ *(_DWORD *)(v13 + 32 * v14)) & 0xFFF00) == 0;
  }
  return result;
}

_DWORD *sub_1C4AD764C(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  void *v3;
  size_t v4;
  uint64_t v5;
  unsigned int v6;

  v1 = result;
  v2 = *result;
  if (*result > 1u || result[1])
  {
    if ((v2 & 1) != 0)
    {
      v3 = result + 2;
      v4 = 64;
    }
    else
    {
      v6 = (2 * v2) & 0xFFFFFFFC;
      v5 = result[4];
      if (v6 < v5 && v5 >= 0x41)
        return sub_1C6158BCC(result);
      if (!(_DWORD)v5)
      {
LABEL_5:
        *v1 = v5;
        v1[1] = 0;
        return result;
      }
      v3 = (void *)*((_QWORD *)result + 1);
      v4 = 4 * v5;
    }
    result = memset(v3, 255, v4);
    LODWORD(v5) = *v1 & 1;
    goto LABEL_5;
  }
  return result;
}

void sub_1C4AD76DC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4AD7770(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4AD77FC()
{
  return "AGX3 nopifier pass";
}

void sub_1C4AD780C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4AD7830(uint64_t a1, llvm::MachineFunction *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  BOOL v28;
  unsigned int v29;
  unsigned int j;
  uint64_t v31;
  BOOL v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int k;
  uint64_t v39;
  int64x2_t v40;
  char *v41;
  char *v42;
  uint64_t i;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t UniqueVRegDef;
  int v54;
  _QWORD *v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  char v74;
  int v75;
  unsigned int v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  int v97;
  _QWORD *v98;
  int v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  BOOL v105;
  unsigned int v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  char v115;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  int v127;
  _BYTE v128[256];
  uint64_t v129;
  _QWORD *v130;
  int v131;
  void *v132;
  uint64_t v133;
  _QWORD v134[34];

  v134[32] = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  v4 = v3[323];
  v5 = v3[324];
  v6 = v3[325];
  v7 = v3[326];
  v8 = v3[327];
  v124 = v128;
  v125 = v128;
  v126 = 32;
  v127 = 0;
  v121 = v4;
  v119 = v6;
  v120 = v5;
  if (!((v4 | v8 | v5 | v6) | v7)
    || (*(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0) == 0x640)
  {
    goto LABEL_220;
  }
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 104))(v3);
  v10 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 256) = v10;
  if ((**(_BYTE **)(*(_QWORD *)v10 + 360) & 1) != 0)
  {
    v129 = 1;
    v39 = 8;
    v40 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v129 + v39) = v40;
      v39 += 16;
    }
    while (v39 != 264);
    v132 = v134;
    v133 = 0x2000000000;
    v41 = (char *)a2 + 320;
    v42 = (char *)*((_QWORD *)a2 + 41);
    if (v42 == (char *)a2 + 320)
      goto LABEL_200;
    while (1)
    {
      for (i = *((_QWORD *)v42 + 7); (char *)i != v42 + 48; i = *(_QWORD *)(i + 8))
      {
        v123 = i;
        v44 = *(unsigned __int16 **)(i + 16);
        v45 = *((_QWORD *)v44 + 1);
        if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
        {
          v68 = i;
          if ((v45 & 0x200) == 0)
          {
            while ((*(_WORD *)(v68 + 44) & 8) != 0)
            {
              v68 = *(_QWORD *)(v68 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v68 + 16) + 9) & 2) != 0)
                goto LABEL_126;
            }
LABEL_92:
            v47 = *((_QWORD *)v44 + 2);
            v48 = v47 & 0x1D00;
            if (v48 == 1280
              || v48 == 2304
              || v48 == 3328
              || (v71 = v47 & 0x1E00, v71 == 1536)
              || v71 == 2560
              || v71 == 3584
              || (v47 & 2) != 0
              || ((v72 = sub_1C4C915C4(*v44), (v72 & 0xFF00000000) != 0)
                ? (v73 = (v72 - 79) >= 2)
                : (v73 = 1),
                  v73 ? (v74 = 0) : (v74 = 1),
                  (v47 & 0x2000000) != 0 || (v74 & 1) != 0))
            {
              if (*(_DWORD *)(i + 40) >= 4u)
              {
                v49 = i;
                v50 = 3;
                while (1)
                {
                  v51 = *(_QWORD *)(v49 + 32);
                  if (!*(_BYTE *)(v51 + 32 * v50))
                    break;
LABEL_120:
                  if (++v50 >= (unint64_t)*(unsigned int *)(v49 + 40))
                    goto LABEL_159;
                }
                v52 = *(_DWORD *)(v51 + 32 * v50 + 4);
                v122 = 0;
                UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 256), v52);
                v122 = UniqueVRegDef;
                if (UniqueVRegDef)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v124, UniqueVRegDef);
                  if ((v129 & 1) != 0)
                  {
                    v54 = 32;
                    v55 = &v130;
LABEL_103:
                    v56 = v54 - 1;
                    v57 = ((v122 >> 4) ^ (v122 >> 9)) & v56;
                    v58 = &v55[v57];
                    v59 = *v58;
                    if (v122 != *v58)
                    {
                      v60 = 0;
                      v61 = 1;
                      while (v59 != -4096)
                      {
                        if (v60)
                          v62 = 0;
                        else
                          v62 = v59 == -8192;
                        if (v62)
                          v60 = v58;
                        v63 = v57 + v61++;
                        v57 = v63 & v56;
                        v58 = &v55[v57];
                        v59 = *v58;
                        if (v122 == *v58)
                          goto LABEL_119;
                      }
                      if (v60)
                        v64 = v60;
                      else
                        v64 = v58;
                      goto LABEL_116;
                    }
                  }
                  else
                  {
                    v54 = v131;
                    if (v131)
                    {
                      v55 = v130;
                      goto LABEL_103;
                    }
                    v64 = 0;
LABEL_116:
                    v65 = sub_1C4993C28((uint64_t)&v129, (uint64_t)&v122, &v122, v64);
                    *v65 = v122;
                    v66 = v122;
                    v67 = v133;
                    if (v133 >= (unint64_t)HIDWORD(v133))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, (uint64_t)v134, v133 + 1, 8);
                      v67 = v133;
                    }
                    *((_QWORD *)v132 + v67) = v66;
                    LODWORD(v133) = v133 + 1;
                  }
                }
LABEL_119:
                v49 = v123;
                goto LABEL_120;
              }
            }
LABEL_160:
            if ((*(_BYTE *)i & 4) != 0)
              continue;
            goto LABEL_163;
          }
        }
        else if ((v45 & 0x200) == 0)
        {
          goto LABEL_92;
        }
LABEL_126:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v124, i);
        if ((v129 & 1) != 0)
        {
          v69 = 32;
          v70 = &v130;
        }
        else
        {
          v69 = v131;
          if (!v131)
          {
            v83 = 0;
            goto LABEL_156;
          }
          v70 = v130;
        }
        v75 = v69 - 1;
        v76 = ((v123 >> 4) ^ (v123 >> 9)) & v75;
        v77 = &v70[v76];
        v78 = *v77;
        if (v123 == *v77)
          goto LABEL_160;
        v79 = 0;
        v80 = 1;
        while (v78 != -4096)
        {
          if (v79)
            v81 = 0;
          else
            v81 = v78 == -8192;
          if (v81)
            v79 = v77;
          v82 = v76 + v80++;
          v76 = v82 & v75;
          v77 = &v70[v76];
          v78 = *v77;
          if (v123 == *v77)
            goto LABEL_159;
        }
        if (v79)
          v83 = v79;
        else
          v83 = v77;
LABEL_156:
        v84 = sub_1C4993C28((uint64_t)&v129, (uint64_t)&v123, &v123, v83);
        *v84 = v123;
        v85 = v123;
        v86 = v133;
        if (v133 >= (unint64_t)HIDWORD(v133))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, (uint64_t)v134, v133 + 1, 8);
          v86 = v133;
        }
        *((_QWORD *)v132 + v86) = v85;
        LODWORD(v133) = v133 + 1;
LABEL_159:
        if (i)
          goto LABEL_160;
LABEL_163:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
      v42 = (char *)*((_QWORD *)v42 + 1);
      if (v42 == v41)
      {
        v87 = v133;
        if (!(_DWORD)v133)
          goto LABEL_200;
        while (2)
        {
          v88 = (char *)v132 + 8 * v87;
          v89 = *((_QWORD *)v88 - 1);
          sub_1C4994010(&v129, (_QWORD *)v88 - 1);
          v87 = v133 - 1;
          LODWORD(v133) = v133 - 1;
          v90 = *(unsigned __int8 *)(*(_QWORD *)(v89 + 16) + 4);
          v91 = *(unsigned int *)(v89 + 40);
          if (v91 <= v90)
            goto LABEL_199;
          while (2)
          {
            v92 = *(_QWORD *)(v89 + 32);
            if (!*(_BYTE *)(v92 + 32 * v90))
            {
              v93 = *(_DWORD *)(v92 + 32 * v90 + 4);
              v123 = 0;
              v94 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 256), v93);
              v123 = v94;
              if (v94)
              {
                v95 = (char *)sub_1C477672C((uint64_t)&v124, v94);
                v96 = v125 == v124 ? (uint64_t *)((char *)&v126 + 4) : &v126;
                if (v95 == &v125[8 * *(unsigned int *)v96])
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v124, v123);
                  if ((v129 & 1) != 0)
                  {
                    v97 = 32;
                    v98 = &v130;
LABEL_179:
                    v99 = v97 - 1;
                    v100 = ((v123 >> 4) ^ (v123 >> 9)) & v99;
                    v101 = &v98[v100];
                    v102 = *v101;
                    if (v123 != *v101)
                    {
                      v103 = 0;
                      v104 = 1;
                      while (v102 != -4096)
                      {
                        if (v103)
                          v105 = 0;
                        else
                          v105 = v102 == -8192;
                        if (v105)
                          v103 = v101;
                        v106 = v100 + v104++;
                        v100 = v106 & v99;
                        v101 = &v98[v100];
                        v102 = *v101;
                        if (v123 == *v101)
                          goto LABEL_195;
                      }
                      if (v103)
                        v107 = v103;
                      else
                        v107 = v101;
                      goto LABEL_192;
                    }
                  }
                  else
                  {
                    v97 = v131;
                    if (v131)
                    {
                      v98 = v130;
                      goto LABEL_179;
                    }
                    v107 = 0;
LABEL_192:
                    v108 = sub_1C4993C28((uint64_t)&v129, (uint64_t)&v123, &v123, v107);
                    *v108 = v123;
                    v109 = v123;
                    v110 = v133;
                    if (v133 >= (unint64_t)HIDWORD(v133))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, (uint64_t)v134, v133 + 1, 8);
                      v110 = v133;
                    }
                    *((_QWORD *)v132 + v110) = v109;
                    LODWORD(v133) = v133 + 1;
                  }
                }
              }
LABEL_195:
              v91 = *(unsigned int *)(v89 + 40);
            }
            if (++v90 < v91)
              continue;
            break;
          }
          v87 = v133;
LABEL_199:
          if (v87)
            continue;
          break;
        }
LABEL_200:
        v111 = *((_QWORD *)a2 + 41);
        if ((char *)v111 == v41)
          goto LABEL_216;
        while (2)
        {
          v112 = *(_QWORD *)(v111 + 56);
LABEL_202:
          if (v112 == v111 + 48)
          {
            v111 = *(_QWORD *)(v111 + 8);
            if ((char *)v111 == v41)
            {
LABEL_216:
              if (v132 != v134)
                free(v132);
              if ((v129 & 1) == 0)
                MEMORY[0x1CAA32FB4](v130, 8);
              goto LABEL_220;
            }
            continue;
          }
          break;
        }
        v113 = (char *)sub_1C477672C((uint64_t)&v124, v112);
        if (v125 == v124)
          v114 = (uint64_t *)((char *)&v126 + 4);
        else
          v114 = &v126;
        if (v113 == &v125[8 * *(unsigned int *)v114])
        {
          *(_WORD *)(v112 + 44) = *(_WORD *)(v112 + 44) & 0xC | 0x80;
        }
        else if (!v112)
        {
          goto LABEL_213;
        }
        if ((*(_BYTE *)v112 & 4) == 0)
        {
LABEL_213:
          while ((*(_WORD *)(v112 + 44) & 8) != 0)
            v112 = *(_QWORD *)(v112 + 8);
        }
        v112 = *(_QWORD *)(v112 + 8);
        goto LABEL_202;
      }
    }
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 41);
  if (v11 != (_QWORD *)((char *)a2 + 320))
  {
    v117 = v7;
    v12 = 0;
    while (1)
    {
      v13 = v11[7];
      if ((_QWORD *)v13 != v11 + 6)
        break;
LABEL_80:
      v11 = (_QWORD *)v11[1];
      if (v11 == (_QWORD *)((char *)a2 + 320))
        goto LABEL_221;
    }
    while (1)
    {
      if (v13 && (*(_BYTE *)v13 & 4) != 0)
      {
        v14 = *(_WORD *)(v13 + 44);
      }
      else
      {
        v14 = *(_WORD *)(v13 + 44);
        if ((v14 & 8) != 0)
        {
          v15 = v13;
          do
            v15 = *(_QWORD *)(v15 + 8);
          while ((*(_WORD *)(v15 + 44) & 8) != 0);
          goto LABEL_15;
        }
      }
      v15 = v13;
LABEL_15:
      v16 = *(_QWORD *)(v15 + 8);
      if ((v14 & 0x80) == 0)
        goto LABEL_47;
      v17 = *(unsigned __int16 **)(v13 + 16);
      v18 = *v17;
      v19 = v18 - 9;
      v20 = (v18 - 9) > 0x3C || ((1 << (v18 - 9)) & 0x1000000000000605) == 0;
      if (!v20 || v18 == 0)
        goto LABEL_47;
      v22 = *((_QWORD *)v17 + 1);
      if ((v22 & 0x10) != 0)
        goto LABEL_47;
      v23 = *((_QWORD *)v17 + 2);
      if ((v23 & 0x40) != 0)
        goto LABEL_47;
      if ((v22 & 0x2000) != 0)
      {
        v24 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
        if (v24 == 103 || v24 == 391)
          goto LABEL_47;
      }
      v25 = *((_QWORD *)v17 + 2) & 0x1D00;
      if (v120)
        v26 = v25 == 1280;
      else
        v26 = 0;
      v27 = v26;
      v28 = v25 != 2304 || v121 == 0;
      if (!v28 || (v27 & 1) != 0 || v119 && (v23 & 2) != 0)
      {
        v29 = *(_DWORD *)(v13 + 40);
        for (j = *((unsigned __int8 *)v17 + 4); v29 > j; j = *(unsigned __int8 *)(*(_QWORD *)(v13 + 16) + 4))
        {
          llvm::MachineInstr::removeOperand(v13, v29 - 1);
          v29 = *(_DWORD *)(v13 + 40);
        }
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 480;
        llvm::MachineInstr::dropMemRefs(v13, a2);
      }
      else
      {
        v31 = *((_QWORD *)v17 + 2) & 0x1E00;
        if (v120)
          v32 = v31 == 1536;
        else
          v32 = 0;
        v33 = v32;
        v34 = v31 != 2560 || v121 == 0;
        if (!v34
          || (v33 & 1) != 0
          || v119
          && (v118 = v12, v35 = sub_1C4C915C4(*v17), v12 = v118, (v35 & 0xFF00000000) != 0)
          && (v35 - 79) <= 1)
        {
          v36 = v13;
          if ((v14 & 8) != 0)
          {
            v36 = v13;
            if ((*(_QWORD *)v13 & 4) == 0)
            {
              v36 = v13;
              do
                v36 = *(_QWORD *)(v36 + 8);
              while ((*(_WORD *)(v36 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v13 + 24) + 40, v13, *(_QWORD *)(v36 + 8));
        }
        else
        {
          if (!v117 || (v19 > 0x3C || ((1 << v19) & 0x1000000000000405) == 0) && v18 && (v23 & 1) == 0)
          {
            *(_WORD *)(v13 + 44) = v14 & 0xFF7F;
            goto LABEL_47;
          }
          v37 = *(_DWORD *)(v13 + 40);
          for (k = *((unsigned __int8 *)v17 + 4); v37 > k; k = *(unsigned __int8 *)(*(_QWORD *)(v13 + 16) + 4))
          {
            llvm::MachineInstr::removeOperand(v13, v37 - 1);
            v37 = *(_DWORD *)(v13 + 40);
          }
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 480;
        }
      }
      v12 = 1;
LABEL_47:
      v13 = v16;
      if ((_QWORD *)v16 == v11 + 6)
        goto LABEL_80;
    }
  }
LABEL_220:
  LOBYTE(v12) = 0;
LABEL_221:
  if (v125 != v124)
  {
    v115 = v12;
    free(v125);
    LOBYTE(v12) = v115;
  }
  return v12 & 1;
}

uint64_t sub_1C4AD81F4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  sub_1C54EB3A8(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Combine agx3 machine instrs after legalization";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "agx3-postlegalizer-combiner";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EE580;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6158E90;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4AD8298(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = 0;
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0 || !byte_1ED7EE610)
    return v2;
  v5 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetPassConfig::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetPassConfig::ID);
  v8 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &unk_1EF8F7108);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &unk_1EF8F7108);
  if (word_1ED7EE658)
  {
    if (byte_1ED7EE6D0)
    {
LABEL_9:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 288))(&v16, v7);
      sub_1C54EB0C0(v10 + 248, &v16, 0);
      v11 = v16;
      v16 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 280))(v7))
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 552))
    llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2);
  v12 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &unk_1EF8F7110);
  v14 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &unk_1EF8F7110);
  sub_1C491CBCC(v14, a2);
  return sub_1C54F59B4();
}

uint64_t sub_1C4AD84C8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  char v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  int v40;
  int v41;
  _DWORD *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  int v101;
  llvm::MachineFunction *v102;
  uint64_t v103;
  llvm::MachineInstr *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  int v112;
  llvm::MachineFunction *v113;
  llvm::MachineInstr *v114;
  llvm::MachineInstr *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  llvm::MachineFunction *v157;
  llvm::MachineInstr *v158;
  llvm::MachineInstr *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  _DWORD *v176;
  uint64_t i;
  uint64_t v178;
  __int128 *v179;
  int v180;
  unint64_t v181;
  unsigned int v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t j;
  uint64_t v190;
  __int128 *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  __int128 *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  llvm::MachineInstr *v203;
  llvm::MachineFunction *v204;
  llvm::MachineInstr *v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  const char *v209;
  unint64_t v210;
  int v211;
  unint64_t *v212;
  void (**v213)(unint64_t *);
  void **v214;
  void (**v215)(void **);
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v219;
  unint64_t *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t k;
  uint64_t v228;
  int v229;
  uint64_t *v230;
  uint64_t m;
  uint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  unint64_t v237;
  llvm::MachineFunction *v238;
  llvm::MachineInstr *v239;
  llvm::MachineInstr *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  char v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  int v272;
  void *v273;
  uint64_t v274;
  void *v275;
  int v276;
  unsigned int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  uint64_t *v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  char v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  BOOL v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unsigned int v351;
  char v352;
  unint64_t v353;
  unsigned int v354;
  unint64_t v355;
  unsigned __int8 **v356[8];
  unint64_t v357;
  unsigned int v358;
  uint64_t v359;
  unsigned int v360;
  unint64_t v361;
  llvm::MachineInstr *v362;
  unint64_t *v363;
  unint64_t *v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  void *v374[2];
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __int16 v379;
  __int128 v380;
  uint64_t v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  uint64_t v387;

  v387 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 ***)(a1 + 32);
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(unsigned __int8 ***)(v8 + 40);
  v356[0] = (unsigned __int8 **)a4;
  v356[1] = v9;
  v356[2] = a2;
  v356[3] = v7;
  v356[4] = 0;
  v356[5] = 0;
  v356[6] = (unsigned __int8 **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 184))(*(_QWORD *)(v8 + 16));
  v356[7] = (unsigned __int8 **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16));
  v10 = *(_QWORD **)(a4 + 8);
  v11 = v10[5];
  v12 = **(unsigned __int16 **)(a3 + 16);
  if (v12 <= 0xA2)
  {
    if (**(unsigned __int16 **)(a3 + 16) > 0x4Bu)
    {
      switch(**(_WORD **)(a3 + 16))
      {
        case 0x77:
          *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
          *(_QWORD *)(a4 + 48) = a3;
          v13 = *(_QWORD *)(a3 + 32);
          v14 = *(_DWORD *)(v13 + 4);
          if ((v14 & 0x80000000) != 0 && (v14 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432))
            v15 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v14 & 0x7FFFFFFF));
          else
            v15 = 0;
          v357 = v15;
          v83 = *(unsigned int *)(v13 + 36);
          if ((v83 & 0x80000000) != 0)
            v84 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
          else
            v84 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v83);
          v97 = *v84;
          if (v97
            && ((*(_BYTE *)(v97 + 3) & 1) != 0 || (v97 = *(_QWORD *)(v97 + 24)) != 0 && (*(_BYTE *)(v97 + 3) & 1) != 0))
          {
            v98 = *(_QWORD *)(v97 + 8);
          }
          else
          {
            v98 = 0;
          }
          v100 = sub_1C4825F50(&v357);
          if ((_DWORD)v99 == 1)
          v101 = **(unsigned __int16 **)(v98 + 16);
          if (v100 == 16 && v101 == 313)
          {
            LODWORD(v361) = v14;
            LODWORD(v362) = 1;
            v102 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 313, &v361, 1, 0, 0, 0);
            v103 = *(_QWORD *)(*(_QWORD *)(v98 + 32) + 48);
            LODWORD(v374[0]) = 1;
            v374[1] = 0;
            *(_QWORD *)&v375 = v103;
            llvm::MachineInstr::addOperand(v104, v102, (const llvm::MachineOperand *)v374);
LABEL_129:
            v60 = *(_QWORD *)(a3 + 24);
            v61 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v61 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v61 = a3;
                do
                  v61 = *(_QWORD *)(v61 + 8);
                while ((*(_WORD *)(v61 + 44) & 8) != 0);
              }
            }
            goto LABEL_486;
          }
          if (v101 == 116)
          {
            if (!sub_1C49A07B0((uint64_t)v356, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 36)))
              goto LABEL_14;
            v141 = *(unsigned int *)(v98 + 40);
            if ((_DWORD)v141)
            {
              v142 = 0;
              v143 = *(unsigned __int8 **)(v98 + 32);
              while (1)
              {
                v144 = *v143;
                v143 += 32;
                if (v144 == 17)
                  break;
                if (v141 == ++v142)
                  goto LABEL_210;
              }
            }
            else
            {
LABEL_210:
              LODWORD(v142) = -1;
            }
            v145 = *(_DWORD *)(*(_QWORD *)(v98 + 32) + 32 * v142 + 16);
            if (v145 != 2579 && v145 != 2488)
              goto LABEL_14;
            (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 4))(a2, v98);
            llvm::MachineOperand::setReg(*(_QWORD *)(v98 + 32), v14);
            (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 5))(a2, v98);
            v146 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v146 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v146 = a3;
                do
                  v146 = *(_QWORD *)(v146 + 8);
                while ((*(_WORD *)(v146 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v146 + 8));
            return 1;
          }
          if (v101 == 308)
          {
            v105 = *(unsigned int *)(*(_QWORD *)(v98 + 32) + 4);
            v106 = (uint64_t *)((v105 & 0x80000000) != 0
                             ? *(_QWORD *)(v11 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v11 + 272) + 8 * v105);
            v167 = *v106;
            if (v167)
            {
              while ((*(_BYTE *)(v167 + 3) & 1) != 0)
              {
                v167 = *(_QWORD *)(v167 + 24);
                if (!v167)
                  goto LABEL_14;
              }
              while (1)
              {
                v167 = *(_QWORD *)(v167 + 24);
                if (!v167)
                  break;
                if ((*(_BYTE *)(v167 + 3) & 1) == 0)
                  goto LABEL_14;
              }
              v168 = sub_1C49975C8(&v357, v98, 1u, *(_QWORD *)(v11 + 424), *(_DWORD *)(v11 + 432), (uint64_t *)a4);
              v169 = sub_1C49975C8(&v357, v98, 3u, *(_QWORD *)(v11 + 424), *(_DWORD *)(v11 + 432), (uint64_t *)a4);
              v170 = *(unsigned __int16 *)(v98 + 44) | 0x100000000;
              LODWORD(v361) = v14;
              LODWORD(v362) = 1;
              LODWORD(v374[0]) = v168;
              LODWORD(v375) = 0;
              DWORD2(v375) = v169;
              LODWORD(v377) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 47, &v361, 1, v374, 2, v170);
              goto LABEL_129;
            }
          }
          goto LABEL_14;
        case 0x78:
        case 0x79:
        case 0x7A:
        case 0x7B:
        case 0x7C:
        case 0x7D:
          goto LABEL_62;
        case 0x7E:
          goto LABEL_13;
        case 0x7F:
          v70 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
          if (v70 < 0 && (v71 = v70 & 0x7FFFFFFF, v71 < *(_DWORD *)(v11 + 432)))
            v72 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * v71);
          else
            v72 = 0;
          v350 = v72;
          if (sub_1C4AE322C((uint64_t *)v356, a3, &v350))
            return 1;
          v85 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
          *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
          *(_QWORD *)(a4 + 48) = a3;
          v86 = *(_QWORD *)(v11 + 24);
          v87 = (uint64_t *)(v86 + 16 * (v85 & 0x7FFFFFFF) + 8);
          v88 = *(_QWORD *)(v11 + 272);
          if ((int)v85 >= 0)
            v87 = (uint64_t *)(v88 + 8 * v85);
          v89 = *v87;
          if (!*v87)
            goto LABEL_104;
          while ((*(_BYTE *)(v89 + 3) & 1) != 0)
          {
            v89 = *(_QWORD *)(v89 + 24);
            if (!v89)
              goto LABEL_104;
          }
          v125 = *(_QWORD *)(v89 + 8);
LABEL_170:
          if (**(_WORD **)(v125 + 16) == 45)
          {
            v126 = *(_QWORD *)(v125 + 32);
            v127 = *(unsigned int *)(v126 + 36);
            if ((int)v127 >= 0)
              v128 = (uint64_t *)(v88 + 8 * v127);
            else
              v128 = (uint64_t *)(v86 + 16 * (v127 & 0x7FFFFFFF) + 8);
            v129 = *v128;
            if ((*(_BYTE *)(v129 + 3) & 1) == 0)
              v129 = *(_QWORD *)(v129 + 24);
            if (**(_WORD **)(*(_QWORD *)(v129 + 8) + 16) == 282)
              goto LABEL_105;
            v130 = *(unsigned int *)(v126 + 68);
            if ((int)v130 >= 0)
              v131 = (uint64_t *)(v88 + 8 * v130);
            else
              v131 = (uint64_t *)(v86 + 16 * (v130 & 0x7FFFFFFF) + 8);
            v132 = *v131;
            if ((*(_BYTE *)(v132 + 3) & 1) == 0)
              v132 = *(_QWORD *)(v132 + 24);
            if (**(_WORD **)(*(_QWORD *)(v132 + 8) + 16) == 282)
              goto LABEL_105;
          }
          while (1)
          {
            v89 = *(_QWORD *)(v89 + 24);
            if (!v89)
              break;
            if ((*(_BYTE *)(v89 + 3) & 1) == 0 && *(_QWORD *)(v89 + 8) != v125)
            {
              v125 = *(_QWORD *)(v89 + 8);
              goto LABEL_170;
            }
          }
LABEL_104:
          v90 = *v87;
          if (!*v87)
            goto LABEL_105;
          if ((*(_BYTE *)(v90 + 3) & 1) == 0)
          {
            v90 = *(_QWORD *)(v90 + 24);
            if (!v90 || (*(_BYTE *)(v90 + 3) & 1) == 0)
              goto LABEL_105;
          }
          v300 = *(_QWORD *)(v90 + 8);
          if (!v300)
            goto LABEL_105;
          if (**(_WORD **)(v300 + 16) != 127)
            goto LABEL_105;
          if (*(_DWORD *)(v300 + 40) != 3)
            goto LABEL_105;
          v301 = *(_QWORD *)(v300 + 32);
          v302 = *(unsigned int *)(v301 + 36);
          v303 = sub_1C554C050(*(_DWORD *)(v301 + 68), v11);
          if (!v304)
            goto LABEL_105;
          v305 = v303;
          v306 = (uint64_t *)((v302 & 0x80000000) != 0
                           ? *(_QWORD *)(v11 + 24) + 16 * (v302 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v11 + 272) + 8 * v302);
          v308 = *v306;
          if (!v308)
            goto LABEL_105;
          while ((*(_BYTE *)(v308 + 3) & 1) != 0)
          {
            v308 = *(_QWORD *)(v308 + 24);
            if (!v308)
              goto LABEL_105;
          }
          while (1)
          {
            v308 = *(_QWORD *)(v308 + 24);
            if (!v308)
              break;
            if ((*(_BYTE *)(v308 + 3) & 1) == 0)
              goto LABEL_105;
          }
          if ((v302 & 0x80000000) != 0)
            v309 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v302 & 0x7FFFFFFF) + 8);
          else
            v309 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v302);
          v310 = *v309;
          if (!v310)
            goto LABEL_593;
          if ((*(_BYTE *)(v310 + 3) & 1) == 0)
          {
            v310 = *(_QWORD *)(v310 + 24);
            if (!v310 || (*(_BYTE *)(v310 + 3) & 1) == 0)
              goto LABEL_593;
          }
          v325 = *(_QWORD *)(v310 + 8);
          if (!v325 || **(_WORD **)(v325 + 16) != 45 || *(_DWORD *)(v325 + 40) != 3)
            goto LABEL_593;
          v326 = *(_QWORD *)(v325 + 32);
          v315 = *(_DWORD *)(v326 + 36);
          v327 = sub_1C554C050(*(_DWORD *)(v326 + 68), v11);
          if (v328)
          {
            v318 = v327;
LABEL_634:
            if (v305 > 4)
              goto LABEL_105;
            goto LABEL_635;
          }
          v329 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v325 + 32) + 36), v11);
          if (v330)
          {
            v318 = v329;
            v315 = *(_DWORD *)(*(_QWORD *)(v325 + 32) + 68);
            goto LABEL_634;
          }
LABEL_593:
          if ((v302 & 0x80000000) != 0)
            v311 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v302 & 0x7FFFFFFF) + 8);
          else
            v311 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v302);
          v312 = *v311;
          if (v312)
          {
            if ((*(_BYTE *)(v312 + 3) & 1) != 0
              || (v312 = *(_QWORD *)(v312 + 24)) != 0 && (*(_BYTE *)(v312 + 3) & 1) != 0)
            {
              v313 = *(_QWORD *)(v312 + 8);
              if (v313)
              {
                if (**(_WORD **)(v313 + 16) == 66 && *(_DWORD *)(v313 + 40) == 3)
                {
                  v314 = *(_QWORD *)(v313 + 32);
                  v315 = *(_DWORD *)(v314 + 36);
                  v316 = sub_1C554C050(*(_DWORD *)(v314 + 68), v11);
                  if (v317)
                  {
                    v318 = v316;
                  }
                  else
                  {
                    v331 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v313 + 32) + 36), v11);
                    if (!v332)
                      goto LABEL_105;
                    v318 = v331;
                    v315 = *(_DWORD *)(*(_QWORD *)(v313 + 32) + 68);
                  }
                  if (v305 < 5)
                  {
LABEL_635:
                    if ((v315 & 0x80000000) != 0)
                      v333 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v315 & 0x7FFFFFFF) + 8);
                    else
                      v333 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v315);
                    v334 = *v333;
                    if (!v334
                      || (*(_BYTE *)(v334 + 3) & 1) == 0
                      && ((v334 = *(_QWORD *)(v334 + 24)) == 0 || (*(_BYTE *)(v334 + 3) & 1) == 0)
                      || (v335 = *(_QWORD *)(v334 + 8)) == 0
                      || **(_WORD **)(v335 + 16) != 127
                      || *(_DWORD *)(v335 + 40) != 3
                      || ((v336 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v335 + 32) + 68), v11) + v305, v337)
                        ? (v338 = v336 <= 4)
                        : (v338 = 1),
                          v338))
                    {
                      *(_WORD *)(a3 + 44) &= 0xE7FFu;
                      v361 = v350;
                      LODWORD(v362) = 0;
                      LODWORD(v374[0]) = v315;
                      LODWORD(v375) = 0;
                      v357 = v350;
                      v358 = 0;
                      *((_QWORD *)&v375 + 1) = sub_1C5544694(a4, &v357, v305);
                      v376 = v339;
                      LODWORD(v377) = 1;
                      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 127, &v361, 1, v374, 2, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
                      if ((v302 & 0x80000000) != 0)
                        v341 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v302 & 0x7FFFFFFF) + 8);
                      else
                        v341 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v302);
                      v342 = *v341;
                      if ((*(_BYTE *)(v342 + 3) & 1) == 0)
                        v342 = *(_QWORD *)(v342 + 24);
                      v343 = **(unsigned __int16 **)(*(_QWORD *)(v342 + 8) + 16);
                      LODWORD(v361) = v85;
                      LODWORD(v362) = 1;
                      LODWORD(v374[0]) = *(_DWORD *)(*(_QWORD *)(v340 + 32) + 4);
                      LODWORD(v375) = 0;
                      v357 = v350;
                      v358 = 0;
                      *((_QWORD *)&v375 + 1) = sub_1C5544694(a4, &v357, v318 << v305);
                      v376 = v344;
                      LODWORD(v377) = 1;
                      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v343, &v361, 1, v374, 2, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
                      v60 = *(_QWORD *)(a3 + 24);
                      v61 = a3;
                      if ((*(_BYTE *)a3 & 4) == 0)
                      {
                        v61 = a3;
                        if ((*(_WORD *)(a3 + 44) & 8) != 0)
                        {
                          v61 = a3;
                          do
                            v61 = *(_QWORD *)(v61 + 8);
                          while ((*(_WORD *)(v61 + 44) & 8) != 0);
                        }
                      }
                      goto LABEL_486;
                    }
                  }
                }
              }
            }
          }
LABEL_105:
          if (sub_1C60395F8((uint64_t *)v356, a3))
            return 1;
          return sub_1C4AEB310(v356, a3);
        case 0x80:
          if ((sub_1C60395F8((uint64_t *)v356, a3) & 1) == 0)
            return sub_1C4AEB310(v356, a3);
          return 1;
        default:
          if ((_DWORD)v12 != 76)
          {
            if ((_DWORD)v12 != 116)
              goto LABEL_62;
            v22 = *(unsigned int *)(a3 + 40);
            v23 = *(_QWORD *)(a3 + 32);
            if ((_DWORD)v22)
            {
              v24 = 0;
              v25 = *(unsigned __int8 **)(a3 + 32);
              while (1)
              {
                v26 = *v25;
                v25 += 32;
                if (v26 == 17)
                  break;
                if (v22 == ++v24)
                  goto LABEL_28;
              }
            }
            else
            {
LABEL_28:
              LODWORD(v24) = -1;
            }
            v27 = v24;
            v28 = *(_DWORD *)(v23 + 32 * v24 + 16);
            v29 = v28 - 2756;
            if ((v28 - 2756) <= 0xA && ((1 << (v28 + 60)) & 0x555) != 0)
            {
              if (!*(_BYTE *)(v10[2] + 305))
                return sub_1C4AEB310(v356, a3);
              v31 = *(unsigned int *)(v23 + 4);
              v32 = (uint64_t *)((v31 & 0x80000000) != 0
                              ? *(_QWORD *)(v11 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v11 + 272) + 8 * v31);
              v147 = *v32;
              if (!v147)
                return sub_1C4AEB310(v356, a3);
              while ((*(_BYTE *)(v147 + 3) & 1) != 0)
              {
                v147 = *(_QWORD *)(v147 + 24);
                if (!v147)
                  return sub_1C4AEB310(v356, a3);
              }
              while (1)
              {
                v147 = *(_QWORD *)(v147 + 24);
                if (!v147)
                  break;
                if ((*(_BYTE *)(v147 + 3) & 1) == 0)
                  return sub_1C4AEB310(v356, a3);
              }
              v148 = (uint64_t *)((v31 & 0x80000000) != 0
                               ? *(_QWORD *)(v11 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8
                               : *(_QWORD *)(v11 + 272) + 8 * v31);
              for (i = *v148; (*(_BYTE *)(i + 3) & 1) != 0; i = *(_QWORD *)(i + 24))
                ;
              v178 = *(_QWORD *)(i + 8);
              if (**(_WORD **)(v178 + 16) != 74)
                return sub_1C4AEB310(v356, a3);
              v179 = &v375;
              v374[0] = &v375;
              v374[1] = (void *)0x800000000;
              v180 = *(_DWORD *)(v178 + 40);
              v181 = (v180 - 1);
              if (v180 == 1)
              {
LABEL_302:
                v195 = v179;
                (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 4))(a2, a3);
                *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * v27 + 16) = dword_1C677F284[v29];
                (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 5))(a2, a3);
                if (LODWORD(v374[1]))
                {
                  v196 = (uint64_t *)v374[0];
                  v197 = 8 * LODWORD(v374[1]);
                  do
                  {
                    v198 = *v196++;
                    (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 4))(a2, v198);
                    *(_QWORD *)(v198 + 16) = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 912;
                    (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 5))(a2, v198);
                    v197 -= 8;
                  }
                  while (v197);
                }
                v184 = 0;
                v179 = v195;
              }
              else
              {
                v182 = 0;
                v183 = 0;
                v184 = 1;
                while (1)
                {
                  v185 = *(unsigned int *)(*(_QWORD *)(v178 + 32) + 32 * v183 + 4);
                  v186 = (uint64_t *)((v185 & 0x80000000) != 0
                                   ? *(_QWORD *)(v11 + 24) + 16 * (v185 & 0x7FFFFFFF) + 8
                                   : *(_QWORD *)(v11 + 272) + 8 * v185);
                  v187 = *v186;
                  if (!v187)
                    break;
                  while ((*(_BYTE *)(v187 + 3) & 1) != 0)
                  {
                    v187 = *(_QWORD *)(v187 + 24);
                    if (!v187)
                      goto LABEL_306;
                  }
                  while (1)
                  {
                    v187 = *(_QWORD *)(v187 + 24);
                    if (!v187)
                      break;
                    if ((*(_BYTE *)(v187 + 3) & 1) == 0)
                      goto LABEL_306;
                  }
                  v188 = (uint64_t *)((v185 & 0x80000000) != 0
                                   ? *(_QWORD *)(v11 + 24) + 16 * (v185 & 0x7FFFFFFF) + 8
                                   : *(_QWORD *)(v11 + 272) + 8 * v185);
                  for (j = *v188; (*(_BYTE *)(j + 3) & 1) != 0; j = *(_QWORD *)(j + 24))
                    ;
                  v190 = *(_QWORD *)(j + 8);
                  if (**(_WORD **)(v190 + 16) != 182)
                    break;
                  if (v182 >= HIDWORD(v374[1]))
                  {
                    v191 = v179;
                    v349 = v181;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v374, (uint64_t)v179, v182 + 1, 8);
                    v181 = v349;
                    v179 = v191;
                    v182 = v374[1];
                  }
                  *((_QWORD *)v374[0] + v182) = v190;
                  v182 = ++LODWORD(v374[1]);
                  v184 = ++v183 < v181;
                  if (v183 == v181)
                    goto LABEL_302;
                }
              }
LABEL_306:
              if (v374[0] != v179)
                free(v374[0]);
              if (!v184)
                return 1;
              return sub_1C4AEB310(v356, a3);
            }
            if (v28 != 2131)
              return sub_1C4AEB310(v356, a3);
            v133 = *(unsigned int *)(v23 + 68);
            if ((v133 & 0x80000000) != 0)
              v134 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
            else
              v134 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v133);
            v171 = *v134;
            if ((*(_BYTE *)(v171 + 3) & 1) == 0)
              v171 = *(_QWORD *)(v171 + 24);
            v172 = *(_DWORD *)(v23 + 4);
            v173 = *(_QWORD *)(v171 + 8);
            v174 = **(unsigned __int16 **)(v173 + 16);
            if ((v174 & 0xFFFE) == 0x74)
            {
              v175 = *(unsigned int *)(v173 + 40);
              if ((_DWORD)v175)
              {
                v176 = (_DWORD *)(*(_QWORD *)(v173 + 32) + 16);
                while (*((_BYTE *)v176 - 16) != 17)
                {
                  v176 += 8;
                  if (!--v175)
                    goto LABEL_316;
                }
                if (*v176 == 2131)
                {
                  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
                  *(_QWORD *)(a4 + 48) = a3;
                  LODWORD(v361) = v172;
                  LODWORD(v362) = 1;
                  LODWORD(v374[0]) = v133;
                  LODWORD(v375) = 0;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, &v361, 1, v374, 1, 0);
                  v60 = *(_QWORD *)(a3 + 24);
                  v61 = a3;
                  if ((*(_BYTE *)a3 & 4) == 0)
                  {
                    v61 = a3;
                    if ((*(_WORD *)(a3 + 44) & 8) != 0)
                    {
                      v61 = a3;
                      do
                        v61 = *(_QWORD *)(v61 + 8);
                      while ((*(_WORD *)(v61 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_486;
                }
              }
            }
LABEL_316:
            if (v174 != 301 && v174 != 299)
              return sub_1C4AEB310(v356, a3);
            v199 = (uint64_t *)((v133 & 0x80000000) != 0
                             ? *(_QWORD *)(v11 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v11 + 272) + 8 * v133);
            v200 = *v199;
            if (!v200)
              return sub_1C4AEB310(v356, a3);
            while ((*(_BYTE *)(v200 + 3) & 1) != 0)
            {
              v200 = *(_QWORD *)(v200 + 24);
              if (!v200)
                return sub_1C4AEB310(v356, a3);
            }
            while (1)
            {
              v200 = *(_QWORD *)(v200 + 24);
              if (!v200)
                break;
              if ((*(_BYTE *)(v200 + 3) & 1) == 0)
                return sub_1C4AEB310(v356, a3);
            }
            if (v174 == 301)
              v201 = 302;
            else
              v201 = 300;
            *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
            *(_QWORD *)(a4 + 48) = a3;
            LODWORD(v374[0]) = v172;
            LODWORD(v374[1]) = 1;
            v202 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, v201, v374, 1, 0, 0, 0);
            if (*(_DWORD *)(v173 + 40) >= 2u)
            {
              v204 = (llvm::MachineFunction *)v202;
              v205 = v203;
              v206 = 1;
              v207 = 32;
              do
              {
                llvm::MachineInstr::addOperand(v205, v204, (const llvm::MachineOperand *)(*(_QWORD *)(v173 + 32) + v207));
                ++v206;
                v207 += 32;
              }
              while (v206 < *(unsigned int *)(v173 + 40));
            }
            v60 = *(_QWORD *)(a3 + 24);
            v61 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v61 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v61 = a3;
                do
                  v61 = *(_QWORD *)(v61 + 8);
                while ((*(_WORD *)(v61 + 44) & 8) != 0);
              }
            }
            goto LABEL_486;
          }
          v73 = *(_DWORD **)(a3 + 32);
          v74 = v73[1];
          if (v74 < 0 && (v74 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
          {
            v75 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v74 & 0x7FFFFFFF));
            if ((v75 & 1) != 0)
            {
              v76 = (v75 >> 3);
              goto LABEL_112;
            }
            if ((v75 & 4) != 0)
            {
              if ((v75 & 2) != 0)
                v76 = (unsigned __int16)(v75 >> 19);
              else
                v76 = (v75 >> 19);
LABEL_112:
              if (v76 != 32 || *(_DWORD *)(a3 + 40) != 3)
                return sub_1C4AEB310(v356, a3);
              v93 = v73[9];
              if ((v93 & 0x80000000) != 0)
                v94 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v93 & 0x7FFFFFFF) + 8);
              else
                v94 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v93);
              v135 = *v94;
              if (!v135)
                goto LABEL_192;
              if ((*(_BYTE *)(v135 + 3) & 1) == 0)
              {
                v135 = *(_QWORD *)(v135 + 24);
                if (!v135)
                {
LABEL_192:
                  v136 = v73[17];
                  if ((v136 & 0x80000000) != 0)
                    v137 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
                  else
                    v137 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v136);
                  v138 = *v137;
                  if (!v138)
                    goto LABEL_196;
                  if ((*(_BYTE *)(v138 + 3) & 1) != 0)
                    goto LABEL_569;
                  v138 = *(_QWORD *)(v138 + 24);
                  if (!v138)
                    goto LABEL_196;
                  if ((*(_BYTE *)(v138 + 3) & 1) != 0)
LABEL_569:
                    v138 = *(_QWORD *)(v138 + 8);
                  else
                    v138 = 0;
LABEL_196:
                  if (**(_WORD **)(v135 + 16) != 313)
                    return sub_1C4AEB310(v356, a3);
                  if (**(_WORD **)(v138 + 16) != 313)
                    return sub_1C4AEB310(v356, a3);
                  v139 = *(_QWORD *)(v135 + 32);
                  v140 = *(_QWORD *)(v139 + 48);
                  if ((v140 & 3) != 0 || v140 + 2 != *(_QWORD *)(*(_QWORD *)(v138 + 32) + 48))
                    return sub_1C4AEB310(v356, a3);
                  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
                  *(_QWORD *)(a4 + 48) = a3;
                  LODWORD(v361) = v74;
                  LODWORD(v362) = 1;
                  v374[0] = *(void **)(v139 + 48);
                  LODWORD(v375) = 3;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 313, &v361, 1, v374, 1, 0);
                  v60 = *(_QWORD *)(a3 + 24);
                  v61 = a3;
                  if ((*(_BYTE *)a3 & 4) == 0)
                  {
                    v61 = a3;
                    if ((*(_WORD *)(a3 + 44) & 8) != 0)
                    {
                      v61 = a3;
                      do
                        v61 = *(_QWORD *)(v61 + 8);
                      while ((*(_WORD *)(v61 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_486;
                }
                if ((*(_BYTE *)(v135 + 3) & 1) == 0)
                {
                  v135 = 0;
                  goto LABEL_192;
                }
              }
              v135 = *(_QWORD *)(v135 + 8);
              goto LABEL_192;
            }
          }
          else
          {
            v75 = 0;
          }
          v76 = (unsigned __int16)(v75 >> 3);
          goto LABEL_112;
      }
    }
    if (**(unsigned __int16 **)(a3 + 16) > 0x33u)
    {
      if ((v12 - 52) < 2)
      {
LABEL_13:
        *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a4 + 48) = a3;
LABEL_14:
        if ((sub_1C49A9DF8((uint64_t *)v356, a3) & 1) == 0)
          return sub_1C4AEB310(v356, a3);
        return 1;
      }
      if ((_DWORD)v12 == 65)
      {
        *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a4 + 48) = a3;
        v43 = *(_DWORD **)(a3 + 32);
        v44 = v43[1];
        if (v44 < 0 && (v44 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
          v45 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v44 & 0x7FFFFFFF));
        else
          v45 = 0;
        v350 = v45;
        v91 = v43[9];
        if ((v91 & 0x80000000) != 0)
          v92 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8);
        else
          v92 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v91);
        v107 = *v92;
        if (v107
          && ((*(_BYTE *)(v107 + 3) & 1) != 0 || (v107 = *(_QWORD *)(v107 + 24)) != 0 && (*(_BYTE *)(v107 + 3) & 1) != 0))
        {
          v108 = *(_QWORD *)(v107 + 8);
        }
        else
        {
          v108 = 0;
        }
        v109 = sub_1C554C050(v43[17], v11);
        if (v110 && v45 == 257)
        {
          v111 = v109;
          v112 = **(unsigned __int16 **)(v108 + 16);
          if (v112 == 313)
          {
            if (v109 == 0xFFFF)
            {
              v374[0] = (void *)129;
              LODWORD(v374[1]) = 0;
              v113 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 313, v374, 1, 0, 0, 0);
              v115 = v114;
              llvm::MachineInstr::addOperand(v114, v113, (const llvm::MachineOperand *)(*(_QWORD *)(v108 + 32) + 32));
              LODWORD(v361) = v44;
              LODWORD(v362) = 1;
              v374[0] = v113;
              v374[1] = v115;
LABEL_230:
              LODWORD(v375) = 1;
LABEL_234:
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 126, &v361, 1, v374, 1, 0);
              v60 = *(_QWORD *)(a3 + 24);
              v61 = a3;
              if ((*(_BYTE *)a3 & 4) == 0)
              {
                v61 = a3;
                if ((*(_WORD *)(a3 + 44) & 8) != 0)
                {
                  v61 = a3;
                  do
                    v61 = *(_QWORD *)(v61 + 8);
                  while ((*(_WORD *)(v61 + 44) & 8) != 0);
                }
              }
LABEL_486:
              v245 = *(_QWORD *)(v61 + 8);
              v246 = v60 + 40;
              v247 = a3;
LABEL_487:
              sub_1C487FE80(v246, v247, v245);
              return 1;
            }
            if (v109 <= 0xFFFE)
            {
              v374[0] = (void *)129;
              LODWORD(v374[1]) = 0;
              v157 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 313, v374, 1, 0, 0, 0);
              v159 = v158;
              llvm::MachineInstr::addOperand(v158, v157, (const llvm::MachineOperand *)(*(_QWORD *)(v108 + 32) + 32));
              v357 = 129;
              v358 = 0;
              v160 = sub_1C5544694(a4, &v357, v111);
              v361 = 129;
              LODWORD(v362) = 0;
              v374[0] = v157;
              v374[1] = v159;
              LODWORD(v375) = 1;
              *((_QWORD *)&v375 + 1) = v160;
              v376 = v161;
              LODWORD(v377) = 1;
              v162 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v361, 1, v374, 2, 0);
              LODWORD(v361) = v44;
              LODWORD(v362) = 1;
              v374[0] = v162;
              v374[1] = v163;
              LODWORD(v375) = 1;
              goto LABEL_234;
            }
          }
          else if (v109 == 0xFFFF
                 && ((v112 - 45) < 3 || v112 == 127)
                 && sub_1C49A07B0((uint64_t)v356, *(_DWORD *)(*(_QWORD *)(v108 + 32) + 4)))
          {
            v361 = 129;
            LODWORD(v362) = 0;
            LODWORD(v374[0]) = *(_DWORD *)(*(_QWORD *)(v108 + 32) + 36);
            LODWORD(v375) = 0;
            v149 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v361, 1, v374, 1, 0);
            v151 = v150;
            v361 = 129;
            LODWORD(v362) = 0;
            LODWORD(v374[0]) = *(_DWORD *)(*(_QWORD *)(v108 + 32) + 68);
            LODWORD(v375) = 0;
            v152 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v361, 1, v374, 1, 0);
            v153 = **(unsigned __int16 **)(v108 + 16);
            v361 = 129;
            LODWORD(v362) = 0;
            v374[0] = v149;
            v374[1] = v151;
            LODWORD(v375) = 1;
            *((_QWORD *)&v375 + 1) = v152;
            v376 = v154;
            LODWORD(v377) = 1;
            v155 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v153, &v361, 1, v374, 2, *(unsigned __int16 *)(v108 + 44) | 0x100000000);
            LODWORD(v361) = v44;
            LODWORD(v362) = 1;
            v374[0] = v155;
            v374[1] = v156;
            goto LABEL_230;
          }
        }
        if ((sub_1C4AE322C((uint64_t *)v356, a3, &v350) & 1) != 0 || (sub_1C49AA7A0((uint64_t *)v356, a3) & 1) != 0)
          return 1;
        return sub_1C4AEB310(v356, a3);
      }
LABEL_62:
      v62 = sub_1C4C915C4(v12);
      if ((v62 & 0xFF00000000) == 0)
        return sub_1C4AEB310(v356, a3);
      if ((v62 - 101) > 0x15)
        return sub_1C4AEB310(v356, a3);
      if (((1 << (v62 - 101)) & 0x300011) == 0)
        return sub_1C4AEB310(v356, a3);
      v63 = sub_1C4C2FD5C(v12);
      v64 = (unsigned int *)(*(_QWORD *)(a3 + 32) + 32 * v63);
      if (*(_BYTE *)v64)
        return sub_1C4AEB310(v356, a3);
      v65 = v64[1];
      if ((v65 & 0x80000000) == 0)
        return sub_1C4AEB310(v356, a3);
      v66 = v65 & 0x7FFFFFFF;
      if (v66 >= *(unsigned int *)(v11 + 432))
        return sub_1C4AEB310(v356, a3);
      v355 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * v66);
      if ((v355 & 0xFFFFFFFFFFFFFFF9) == 0)
        return sub_1C4AEB310(v356, a3);
      v67 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * v66 + 8);
      if (v67
        && ((*(_BYTE *)(v67 + 3) & 1) != 0 || (v67 = *(_QWORD *)(v67 + 24)) != 0 && (*(_BYTE *)(v67 + 3) & 1) != 0))
      {
        v68 = *(_QWORD *)(v67 + 8);
      }
      else
      {
        v68 = 0;
      }
      if ((*(_WORD *)(*v10 + 18) & 0x3FF0) == 0x650)
      {
        v69 = 1;
      }
      else if (*(_BYTE *)(v10[2] + 389))
      {
        v69 = 255;
      }
      else
      {
        v69 = 15;
      }
      v208 = sub_1C4825F50(&v355);
      if ((_DWORD)v209 == 1)
      {
        v307 = v208;
        v208 = v307;
      }
      v354 = v208;
      if (v208 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v353, v69, 0);
      }
      else
      {
        v210 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v208;
        if (!v208)
          v210 = 0;
        v353 = v210 & v69;
      }
      v358 = 1;
      v357 = 0;
      v360 = 1;
      v359 = 0;
      v211 = sub_1C4AE7668((uint64_t *)v356, v68, &v355, (uint64_t)&v353, &v357, 0, 0);
      v374[0] = &off_1E816EFF0;
      v374[1] = sub_1C554C7E0;
      *((_QWORD *)&v375 + 1) = v374;
      v361 = (unint64_t)&off_1E816F038;
      v362 = (llvm::MachineInstr *)sub_1C554C7F8;
      v364 = &v361;
      sub_1C554C3AC(v65, v11, (uint64_t)v374, (uint64_t)&v361, 1, 0, &v350);
      v212 = v364;
      if (v364 == &v361)
      {
        v213 = (void (**)(unint64_t *))(v361 + 32);
        v212 = &v361;
      }
      else
      {
        if (!v364)
        {
LABEL_348:
          v214 = (void **)*((_QWORD *)&v375 + 1);
          if (*((void ***)&v375 + 1) == v374)
          {
            v215 = (void (**)(void **))((char *)v374[0] + 32);
            v214 = v374;
          }
          else
          {
            if (!*((_QWORD *)&v375 + 1))
            {
LABEL_351:
              if (v352)
              {
                (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 4))(a2, a3);
                v216 = sub_1C4C915F0(**(unsigned __int16 **)(a3 + 16), 36, 49);
                v217 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 16);
                *(_QWORD *)(a3 + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 104))(v217)
                                                 + 8)
                                     + 48 * v216;
                llvm::MachineInstr::removeOperand(a3, v63 + 1);
                v218 = v351;
                v219 = v350;
                v220 = &v350;
                if (v351 >= 0x41)
                  v220 = (unint64_t *)v350;
                llvm::MachineOperand::ChangeToImmediate(v64, *v220 & v69, 0);
                (*((void (**)(unsigned __int8 **, uint64_t))*a2 + 5))(a2, a3);
                v221 = 1;
                if (v218 >= 0x41 && v219)
                  MEMORY[0x1CAA32F9C](v219, 0x1000C8000313F17);
              }
              else if (v211)
              {
                v221 = 1;
              }
              else
              {
                v221 = 13;
              }
              if (v360 >= 0x41 && v359)
                MEMORY[0x1CAA32F9C](v359, 0x1000C8000313F17);
              if (v358 >= 0x41 && v357)
                MEMORY[0x1CAA32F9C](v357, 0x1000C8000313F17);
              if (v354 >= 0x41 && v353)
                MEMORY[0x1CAA32F9C](v353, 0x1000C8000313F17);
              if (v221 != 13)
                return 1;
              return sub_1C4AEB310(v356, a3);
            }
            v215 = (void (**)(void **))(**((_QWORD **)&v375 + 1) + 40);
          }
          (*v215)(v214);
          goto LABEL_351;
        }
        v213 = (void (**)(unint64_t *))(*v364 + 40);
      }
      (*v213)(v212);
      goto LABEL_348;
    }
    if ((_DWORD)v12 == 47)
    {
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a4 + 48) = a3;
      if ((sub_1C603A0B0((uint64_t)v356, a3, v11, (_QWORD *)a4) & 1) != 0)
        return 1;
      return sub_1C4AEB310(v356, a3);
    }
    if ((_DWORD)v12 != 51)
      goto LABEL_62;
LABEL_41:
    *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a4 + 48) = a3;
    v33 = *(_DWORD **)(a3 + 32);
    v34 = v33[33];
    v35 = v33[41];
    if ((v34 & 0x80000000) != 0)
      v36 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
    else
      v36 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v34);
    v77 = *v36;
    v348 = v33[41];
    if (v77)
    {
      if ((*(_BYTE *)(v77 + 3) & 1) != 0 || (v77 = *(_QWORD *)(v77 + 24)) != 0 && (*(_BYTE *)(v77 + 3) & 1) != 0)
        v78 = *(_QWORD *)(v77 + 8);
      else
        v78 = 0;
      v35 = v33[41];
      if ((v348 & 0x80000000) == 0)
        goto LABEL_91;
    }
    else
    {
      v78 = 0;
      if ((v35 & 0x80000000) == 0)
      {
LABEL_91:
        v79 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v35);
        goto LABEL_451;
      }
    }
    v79 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
LABEL_451:
    v248 = v33[1];
    v249 = *v79;
    if ((*(_BYTE *)(v249 + 3) & 1) == 0)
      v249 = *(_QWORD *)(v249 + 24);
    v345 = v33[17];
    v347 = v33[25];
    v250 = *(_QWORD *)(v249 + 8);
    v251 = v33[12];
    v252 = **(unsigned __int16 **)(v78 + 16);
    if (v252 == **(unsigned __int16 **)(v250 + 16) && (v252 == 184 || v252 == 177))
    {
      v253 = v248;
      v254 = sub_1C4ADBFFC(v248, v11);
      v248 = v253;
      if ((v254 & 1) != 0)
        goto LABEL_472;
      v255 = (uint64_t *)((v34 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v34);
      v256 = *v255;
      if (!v256)
        goto LABEL_472;
      while ((*(_BYTE *)(v256 + 3) & 1) != 0)
      {
        v256 = *(_QWORD *)(v256 + 24);
        if (!v256)
          goto LABEL_472;
      }
      while (1)
      {
        v256 = *(_QWORD *)(v256 + 24);
        if (!v256)
          break;
        if ((*(_BYTE *)(v256 + 3) & 1) == 0)
          goto LABEL_472;
      }
      v257 = (uint64_t *)((v348 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v348 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v348);
      v258 = *v257;
      if (!v258)
      {
LABEL_472:
        v259 = *(_QWORD *)(a3 + 32);
        v260 = *(_DWORD *)(v259 + 68);
        v261 = *(_DWORD *)(v259 + 100);
        v262 = *(_DWORD *)(*(_QWORD *)(v78 + 32) + 36);
        v263 = *(_DWORD *)(*(_QWORD *)(v250 + 32) + 36);
        if (v253 < 0 && (v253 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v11 + 432))
          v264 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v253 & 0x7FFFFFFF));
        else
          v264 = 0;
        v361 = v264;
        LODWORD(v362) = 0;
        LODWORD(v374[0]) = v251;
        LODWORD(v375) = 2;
        DWORD2(v375) = v260;
        LODWORD(v377) = 0;
        LODWORD(v378) = v261;
        LODWORD(v380) = 0;
        DWORD2(v380) = v262;
        LODWORD(v382) = 0;
        DWORD2(v382) = v263;
        DWORD2(v383) = 0;
        v273 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v12, &v361, 1, v374, 5, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
        v274 = **(unsigned __int16 **)(v78 + 16);
        LODWORD(v361) = v253;
        LODWORD(v362) = 1;
        v374[0] = v273;
        v374[1] = v275;
        LODWORD(v375) = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, v274, &v361, 1, v374, 1, *(unsigned __int16 *)(v78 + 44) | 0x100000000);
        v60 = *(_QWORD *)(a3 + 24);
        v61 = a3;
        if ((*(_BYTE *)a3 & 4) == 0)
        {
          v61 = a3;
          if ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            v61 = a3;
            do
              v61 = *(_QWORD *)(v61 + 8);
            while ((*(_WORD *)(v61 + 44) & 8) != 0);
          }
        }
        goto LABEL_486;
      }
      while ((*(_BYTE *)(v258 + 3) & 1) != 0)
      {
        v258 = *(_QWORD *)(v258 + 24);
        if (!v258)
          goto LABEL_472;
      }
      while (1)
      {
        v258 = *(_QWORD *)(v258 + 24);
        if (!v258)
          break;
        if ((*(_BYTE *)(v258 + 3) & 1) == 0)
          goto LABEL_472;
      }
    }
    if ((v251 - 32) < 0xA)
      return sub_1C4AEB310(v356, a3);
    v265 = *(unsigned __int16 *)(a3 + 44);
    v266 = v10[1];
    v267 = *(_OWORD *)(v266 + 1024);
    *(_OWORD *)v374 = *(_OWORD *)(v266 + 1008);
    v375 = v267;
    v268 = *(_QWORD *)(v266 + 1048);
    v376 = *(_QWORD *)(v266 + 1040);
    v377 = v268;
    v269 = *(_QWORD *)(v266 + 1056);
    v378 = v269;
    if (v269)
    {
      v270 = (unint64_t *)(v269 + 8);
      do
        v271 = __ldxr(v270);
      while (__stxr(v271 + 1, v270));
    }
    v272 = v248;
    v379 = *(_WORD *)(v266 + 1064);
    if (*(char *)(v266 + 1095) < 0)
    {
      sub_1C47EBC30(&v380, *(void **)(v266 + 1072), *(_QWORD *)(v266 + 1080));
    }
    else
    {
      v380 = *(_OWORD *)(v266 + 1072);
      v381 = *(_QWORD *)(v266 + 1088);
    }
    v382 = *(_OWORD *)(v266 + 1096);
    v383 = *(_OWORD *)(v266 + 1112);
    sub_1C4843224((uint64_t)&v384, (uint64_t *)(v266 + 1128));
    if (*(char *)(v266 + 1311) < 0)
    {
      sub_1C47EBC30(&v385, *(void **)(v266 + 1288), *(_QWORD *)(v266 + 1296));
    }
    else
    {
      v385 = *(_OWORD *)(v266 + 1288);
      v386 = *(_QWORD *)(v266 + 1304);
    }
    v276 = BYTE4(v374[1]) & 1;
    if ((_DWORD)v12 == 51)
    {
      v277 = (v265 >> 10) & 1;
      if ((~(_DWORD)v265 & 0x3C0) != 0)
        v277 = 0;
      if (!(v277 | v276))
        goto LABEL_511;
    }
    else if (!(v276 | v265 & 0x10))
    {
      goto LABEL_511;
    }
    if ((v251 - 7) <= 1)
    {
      if (v251 == 7)
        v278 = v34;
      else
        v278 = v348;
      LODWORD(v357) = v272;
      v358 = 1;
      LODWORD(v361) = v278;
      LODWORD(v363) = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, &v357, 1, &v361, 1, 0);
      v279 = *(_QWORD *)(a3 + 24);
      v280 = a3;
      if ((*(_BYTE *)a3 & 4) == 0)
      {
        v280 = a3;
        if ((*(_WORD *)(a3 + 44) & 8) != 0)
        {
          v280 = a3;
          do
            v280 = *(_QWORD *)(v280 + 8);
          while ((*(_WORD *)(v280 + 44) & 8) != 0);
        }
      }
LABEL_505:
      sub_1C487FE80(v279 + 40, a3, *(_QWORD *)(v280 + 8));
      sub_1C48433E8((uint64_t)v374);
      return 1;
    }
    v281 = *(_QWORD *)(v11 + 24);
    v282 = (uint64_t *)(v281 + 16 * (v347 & 0x7FFFFFFF) + 8);
    v283 = *(_QWORD *)(v11 + 272);
    if ((int)v347 >= 0)
      v282 = (uint64_t *)(v283 + 8 * v347);
    v284 = *v282;
    if ((*(_BYTE *)(v284 + 3) & 1) == 0)
      v284 = *(_QWORD *)(v284 + 24);
    v285 = *(_QWORD *)(v284 + 8);
    if (**(_WORD **)(v285 + 16) == 121)
    {
      v286 = *(_QWORD *)(*(_QWORD *)(v285 + 32) + 48);
      if (v286)
      {
        v287 = *(_UNKNOWN **)(v286 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v286 + 40) : v286 + 24;
        if ((*(_BYTE *)(v287 + 28) & 7) == 3)
        {
          v288 = (uint64_t *)(v281 + 16 * (v345 & 0x7FFFFFFF) + 8);
          v289 = (uint64_t *)(v283 + 8 * v345);
          if ((int)v345 >= 0)
            v288 = v289;
          v290 = *v288;
          if (*v288)
          {
            while ((*(_BYTE *)(v290 + 3) & 1) != 0)
            {
              v290 = *(_QWORD *)(v290 + 24);
              if (!v290)
                goto LABEL_511;
            }
            while (1)
            {
              v290 = *(_QWORD *)(v290 + 24);
              if (!v290)
                break;
              if ((*(_BYTE *)(v290 + 3) & 1) == 0)
                goto LABEL_511;
            }
            LODWORD(v350) = 0;
            LODWORD(v353) = 0;
            v291 = *v288;
            if (v291)
            {
              if ((*(_BYTE *)(v291 + 3) & 1) != 0
                || (v291 = *(_QWORD *)(v291 + 24)) != 0 && (*(_BYTE *)(v291 + 3) & 1) != 0)
              {
                v319 = *(_QWORD *)(v291 + 8);
                if (v319)
                {
                  if (**(_WORD **)(v319 + 16) == 163 && *(_DWORD *)(v319 + 40) == 3)
                  {
                    v320 = *(_QWORD *)(v319 + 32);
                    LODWORD(v350) = *(_DWORD *)(v320 + 36);
                    v321 = *(_DWORD *)(v320 + 68);
                    LODWORD(v353) = v321;
                    if (v321 < 0 && (v321 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
                      v322 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v321 & 0x7FFFFFFF));
                    else
                      v322 = 0;
                    v357 = v322;
                    v358 = 0;
                    LODWORD(v361) = v321;
                    LODWORD(v363) = 0;
                    v323 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 177, &v357, 1, &v361, 1, v265 | 0x100000000);
                    LODWORD(v357) = v272;
                    v358 = 1;
                    LODWORD(v361) = v251;
                    LODWORD(v363) = 2;
                    LODWORD(v364) = v350;
                    v366 = 0;
                    v367 = v323;
                    v368 = v324;
                    v369 = 1;
                    v370 = v34;
                    v371 = 0;
                    v372 = v348;
                    v373 = 0;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 51, &v357, 1, &v361, 5, v265 | 0x100000000);
                    v279 = *(_QWORD *)(a3 + 24);
                    v280 = a3;
                    if ((*(_BYTE *)a3 & 4) == 0)
                    {
                      v280 = a3;
                      if ((*(_WORD *)(a3 + 44) & 8) != 0)
                      {
                        v280 = a3;
                        do
                          v280 = *(_QWORD *)(v280 + 8);
                        while ((*(_WORD *)(v280 + 44) & 8) != 0);
                      }
                    }
                    goto LABEL_505;
                  }
                }
              }
            }
            LODWORD(v355) = 0;
            v361 = (unint64_t)&v350;
            v362 = (llvm::MachineInstr *)&v353;
            v363 = &v355;
            LODWORD(v357) = v345;
            if ((sub_1C4998B9C((uint64_t)&v361, v11, (unsigned int *)&v357) & 1) != 0)
            {
              if ((v350 & 0x80000000) != 0 && (v350 & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432))
                v292 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v350 & 0x7FFFFFFF));
              else
                v292 = 0;
              v357 = v292;
              v358 = 0;
              LODWORD(v361) = v350;
              LODWORD(v363) = 0;
              LODWORD(v364) = v353;
              v366 = 0;
              v293 = v265 | 0x100000000;
              v294 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 165, &v357, 1, &v361, 2, v265 | 0x100000000);
              v296 = v295;
              v357 = v292;
              v358 = 0;
              LODWORD(v361) = v355;
              LODWORD(v363) = 0;
              v297 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 177, &v357, 1, &v361, 1, v293);
              LODWORD(v357) = v272;
              v358 = 1;
              LODWORD(v361) = v251;
              LODWORD(v363) = 2;
              v364 = (unint64_t *)v294;
              v365 = v296;
              v366 = 1;
              v367 = v297;
              v368 = v298;
              v369 = 1;
              v370 = v34;
              v371 = 0;
              v372 = v348;
              v373 = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 51, &v357, 1, &v361, 5, v293);
              v279 = *(_QWORD *)(a3 + 24);
              v280 = a3;
              if ((*(_BYTE *)a3 & 4) == 0)
              {
                v280 = a3;
                if ((*(_WORD *)(a3 + 44) & 8) != 0)
                {
                  v280 = a3;
                  do
                    v280 = *(_QWORD *)(v280 + 8);
                  while ((*(_WORD *)(v280 + 44) & 8) != 0);
                }
              }
              goto LABEL_505;
            }
          }
        }
      }
    }
LABEL_511:
    sub_1C48433E8((uint64_t)v374);
    return sub_1C4AEB310(v356, a3);
  }
  if (**(unsigned __int16 **)(a3 + 16) <= 0x10Eu)
  {
    if ((_DWORD)v12 == 163)
    {
      if ((sub_1C4AE06BC(v356, a3) & 1) != 0)
        return 1;
      return sub_1C4AEB310(v356, a3);
    }
    if ((_DWORD)v12 != 179)
    {
      if ((_DWORD)v12 == 193)
      {
        *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a4 + 48) = a3;
        v19 = *(_DWORD **)(a3 + 32);
        v20 = v19[1];
        if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
          v21 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * (v20 & 0x7FFFFFFF));
        else
          v21 = 0;
        v46 = 0x7FFFFF800000000;
        if ((v21 & 4) == 0)
          v46 = 0x7FFFFF80000;
        if ((v46 & v21) == 0)
        {
          v47 = v19[17];
          v48 = v19[9];
          v361 = 513;
          LODWORD(v362) = 0;
          LODWORD(v374[0]) = v48;
          LODWORD(v375) = 0;
          v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 80, &v361, 1, v374, 1, 0);
          v361 = 257;
          LODWORD(v362) = 0;
          v374[0] = v49;
          v374[1] = v50;
          LODWORD(v375) = 1;
          v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v361, 1, v374, 1, 0);
          v53 = v52;
          v361 = 257;
          LODWORD(v362) = 0;
          LODWORD(v374[0]) = v47;
          LODWORD(v375) = 0;
          v54 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 119, &v361, 1, v374, 1, 0);
          v361 = 257;
          LODWORD(v362) = 0;
          v374[0] = v51;
          v374[1] = v53;
          LODWORD(v375) = 1;
          *((_QWORD *)&v375 + 1) = v54;
          v376 = v55;
          LODWORD(v377) = 1;
          v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 45, &v361, 1, v374, 2, 0);
          v361 = 513;
          LODWORD(v362) = 0;
          v374[0] = v56;
          v374[1] = v57;
          LODWORD(v375) = 1;
          v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 126, &v361, 1, v374, 1, 0);
          LODWORD(v361) = v20;
          LODWORD(v362) = 1;
          v374[0] = v58;
          v374[1] = v59;
          LODWORD(v375) = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 81, &v361, 1, v374, 1, 0);
          v60 = *(_QWORD *)(a3 + 24);
          v61 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v61 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v61 = a3;
              do
                v61 = *(_QWORD *)(v61 + 8);
              while ((*(_WORD *)(v61 + 44) & 8) != 0);
            }
          }
          goto LABEL_486;
        }
        return sub_1C4AEB310(v356, a3);
      }
      goto LABEL_62;
    }
    v37 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 36);
    if ((v37 & 0x80000000) != 0)
      v38 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
    else
      v38 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v37);
    v95 = *v38;
    if (!v95)
    {
LABEL_118:
      if (**(_WORD **)(v95 + 16) != 74)
        return sub_1C4AEB310(v356, a3);
      v96 = (uint64_t *)((v37 & 0x80000000) != 0
                      ? *(_QWORD *)(v11 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v11 + 272) + 8 * v37);
      v121 = *v96;
      if (!v121)
        return sub_1C4AEB310(v356, a3);
      while ((*(_BYTE *)(v121 + 3) & 1) != 0)
      {
        v121 = *(_QWORD *)(v121 + 24);
        if (!v121)
          return sub_1C4AEB310(v356, a3);
      }
      while (1)
      {
        v121 = *(_QWORD *)(v121 + 24);
        if (!v121)
          break;
        if ((*(_BYTE *)(v121 + 3) & 1) == 0)
          return sub_1C4AEB310(v356, a3);
      }
      v122 = *(unsigned int **)(v95 + 32);
      v123 = v122[17];
      v124 = (uint64_t *)((v123 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v123);
      v164 = *v124;
      if (v164
        && ((*(_BYTE *)(v164 + 3) & 1) != 0 || (v164 = *(_QWORD *)(v164 + 24)) != 0 && (*(_BYTE *)(v164 + 3) & 1) != 0))
      {
        v165 = *(_QWORD *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if ((**(_WORD **)(v165 + 16) & 0xFFFE) != 0x114)
        return sub_1C4AEB310(v356, a3);
      v166 = (uint64_t *)((v123 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v123);
      v192 = *v166;
      if (!v192)
        return sub_1C4AEB310(v356, a3);
      while ((*(_BYTE *)(v192 + 3) & 1) != 0)
      {
        v192 = *(_QWORD *)(v192 + 24);
        if (!v192)
          return sub_1C4AEB310(v356, a3);
      }
      while (1)
      {
        v192 = *(_QWORD *)(v192 + 24);
        if (!v192)
          break;
        if ((*(_BYTE *)(v192 + 3) & 1) == 0)
          return sub_1C4AEB310(v356, a3);
      }
      v193 = v122[1];
      v194 = (uint64_t *)((v193 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v193);
      v222 = *v194;
      if (!v222)
        return sub_1C4AEB310(v356, a3);
      v223 = v122[9];
      while ((*(_BYTE *)(v222 + 3) & 1) != 0)
      {
        v222 = *(_QWORD *)(v222 + 24);
        if (!v222)
          return sub_1C4AEB310(v356, a3);
      }
      while (1)
      {
        v222 = *(_QWORD *)(v222 + 24);
        if (!v222)
          break;
        if ((*(_BYTE *)(v222 + 3) & 1) == 0)
          return sub_1C4AEB310(v356, a3);
      }
      v224 = (uint64_t *)((v223 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v223 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v223);
      v225 = *v224;
      if (!v225)
        return sub_1C4AEB310(v356, a3);
      while ((*(_BYTE *)(v225 + 3) & 1) != 0)
      {
        v225 = *(_QWORD *)(v225 + 24);
        if (!v225)
          return sub_1C4AEB310(v356, a3);
      }
      while (1)
      {
        v225 = *(_QWORD *)(v225 + 24);
        if (!v225)
          break;
        if ((*(_BYTE *)(v225 + 3) & 1) == 0)
          return sub_1C4AEB310(v356, a3);
      }
      v346 = v95;
      v226 = (uint64_t *)((v193 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v193);
      for (k = *v226; (*(_BYTE *)(k + 3) & 1) != 0; k = *(_QWORD *)(k + 24))
        ;
      v228 = *(_QWORD *)(k + 8);
      v229 = *(_DWORD *)(*(_QWORD *)(v228 + 32) + 4);
      v230 = (uint64_t *)((v223 & 0x80000000) != 0
                       ? *(_QWORD *)(v11 + 24) + 16 * (v223 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v11 + 272) + 8 * v223);
      for (m = *v230; (*(_BYTE *)(m + 3) & 1) != 0; m = *(_QWORD *)(m + 24))
        ;
      v232 = *(_QWORD *)(m + 8);
      v233 = *(_DWORD *)(*(_QWORD *)(v232 + 32) + 4);
      if (v229 < 0 && (v234 = v229 & 0x7FFFFFFF, v234 < *(_DWORD *)(v11 + 432)))
        v235 = *(_QWORD *)(*(_QWORD *)(v11 + 424) + 8 * v234);
      else
        v235 = 0;
      v236 = v233 < 0 && (v233 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)
           ? *(void **)(*(_QWORD *)(v11 + 424) + 8 * (v233 & 0x7FFFFFFF))
           : 0;
      if ((void *)v235 != v236)
        return sub_1C4AEB310(v356, a3);
      if ((v235 & 1) != 0)
      {
        v237 = (v235 >> 3);
      }
      else if ((v235 & 4) != 0)
      {
        v237 = (v235 & 2) != 0 ? (unsigned __int16)(v235 >> 19) : (v235 >> 19);
      }
      else
      {
        v237 = (unsigned __int16)(v235 >> 3);
      }
      if (v237 != 16)
        return sub_1C4AEB310(v356, a3);
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(v165 + 24);
      *(_QWORD *)(a4 + 48) = v165;
      v374[0] = (void *)(v235 & 0x8000000000000000 | 0x800014);
      LODWORD(v374[1]) = 0;
      v238 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
      v240 = v239;
      llvm::MachineInstr::addOperand(v239, v238, (const llvm::MachineOperand *)(*(_QWORD *)(v165 + 32) + 32));
      llvm::MachineInstr::addOperand(v240, v238, (const llvm::MachineOperand *)(*(_QWORD *)(v165 + 32) + 64));
      llvm::MachineInstr::addOperand(v240, v238, (const llvm::MachineOperand *)(*(_QWORD *)(v165 + 32) + 96));
      llvm::MachineInstr::addOperand(v240, v238, (const llvm::MachineOperand *)(*(_QWORD *)(v165 + 32) + 128));
      llvm::MachineInstr::addOperand(v240, v238, (const llvm::MachineOperand *)(*(_QWORD *)(v165 + 32) + 160));
      llvm::MachineInstr::addOperand(v240, v238, (const llvm::MachineOperand *)(*(_QWORD *)(v165 + 32) + 192));
      v374[0] = (void *)v235;
      LODWORD(v374[1]) = 0;
      *(_QWORD *)&v375 = v235;
      DWORD2(v375) = 0;
      v361 = (unint64_t)v238;
      v362 = v240;
      LODWORD(v363) = 1;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 74, v374, 2, &v361, 1, 0);
      v242 = v241;
      sub_1C4923194((_QWORD *)v11, v228, *(_DWORD *)(*(_QWORD *)(v241 + 32) + 4), a2);
      sub_1C4923194((_QWORD *)v11, v232, *(_DWORD *)(*(_QWORD *)(v242 + 32) + 36), a2);
      v243 = v346;
      if ((*(_BYTE *)v346 & 4) == 0)
      {
        v243 = v346;
        if ((*(_WORD *)(v346 + 44) & 8) != 0)
        {
          v243 = v346;
          do
            v243 = *(_QWORD *)(v243 + 8);
          while ((*(_WORD *)(v243 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v346 + 24) + 40, v346, *(_QWORD *)(v243 + 8));
      v244 = v165;
      if ((*(_BYTE *)v165 & 4) == 0)
      {
        v244 = v165;
        if ((*(_WORD *)(v165 + 44) & 8) != 0)
        {
          v244 = v165;
          do
            v244 = *(_QWORD *)(v244 + 8);
          while ((*(_WORD *)(v244 + 44) & 8) != 0);
        }
      }
      v245 = *(_QWORD *)(v244 + 8);
      v246 = *(_QWORD *)(v165 + 24) + 40;
      v247 = v165;
      goto LABEL_487;
    }
    if ((*(_BYTE *)(v95 + 3) & 1) == 0)
    {
      v95 = *(_QWORD *)(v95 + 24);
      if (!v95)
        goto LABEL_118;
      if ((*(_BYTE *)(v95 + 3) & 1) == 0)
      {
        v95 = 0;
        goto LABEL_118;
      }
    }
    v95 = *(_QWORD *)(v95 + 8);
    goto LABEL_118;
  }
  if ((v12 - 274) >= 4)
  {
    if ((_DWORD)v12 == 271)
    {
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a4 + 48) = a3;
      v80 = *(_QWORD *)(a3 + 32);
      v81 = *(unsigned int *)(v80 + 36);
      if ((v81 & 0x80000000) != 0)
        v82 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
      else
        v82 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v81);
      v116 = *v82;
      if (v116)
      {
        if ((*(_BYTE *)(v116 + 3) & 1) != 0 || (v116 = *(_QWORD *)(v116 + 24)) != 0 && (*(_BYTE *)(v116 + 3) & 1) != 0)
        {
          v299 = *(_QWORD *)(v116 + 8);
          if (v299)
          {
            if (**(_WORD **)(v299 + 16) == 82 && *(_DWORD *)(v299 + 40) == 2)
              v81 = *(unsigned int *)(*(_QWORD *)(v299 + 32) + 36);
          }
        }
      }
      if (v81 >> 31)
        v117 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
      else
        v117 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v81);
      v118 = *v117;
      if ((*(_BYTE *)(v118 + 3) & 1) == 0)
        v118 = *(_QWORD *)(v118 + 24);
      v119 = *(_QWORD *)(v118 + 8);
      if (**(_WORD **)(v119 + 16) == 78)
      {
        v120 = *(_QWORD *)(v80 + 80) + 1;
        if (v120 < *(_DWORD *)(v119 + 40))
        {
          LODWORD(v361) = *(_DWORD *)(v80 + 4);
          LODWORD(v362) = 1;
          LODWORD(v374[0]) = *(_DWORD *)(*(_QWORD *)(v119 + 32) + 32 * v120 + 4);
          LODWORD(v375) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 19, &v361, 1, v374, 1, 0);
          v60 = *(_QWORD *)(a3 + 24);
          v61 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v61 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v61 = a3;
              do
                v61 = *(_QWORD *)(v61 + 8);
              while ((*(_WORD *)(v61 + 44) & 8) != 0);
            }
          }
          goto LABEL_486;
        }
      }
      return sub_1C4AEB310(v356, a3);
    }
    if ((_DWORD)v12 != 335)
      goto LABEL_62;
    goto LABEL_41;
  }
  v16 = (_BYTE *)v10[2];
  v17 = v16[352];
  if (v16[303])
    v18 = 1;
  else
    v18 = v16[305] != 0;
  v39 = v17 != 0;
  v40 = sub_1C4ADAE2C(v10[5], (_QWORD *)a4, *(_QWORD *)(a3 + 32) + 32, *(_QWORD *)(a3 + 32) + 64, v17 != 0, (uint64_t)a2, v18);
  v41 = v40 | sub_1C4ADAE2C(v11, (_QWORD *)a4, *(_QWORD *)(a3 + 32) + 96, *(_QWORD *)(a3 + 32) + 128, v39, (uint64_t)a2, v18);
  return v41 | sub_1C4ADAE2C(v11, (_QWORD *)a4, *(_QWORD *)(a3 + 32) + 160, *(_QWORD *)(a3 + 32) + 192, v39, (uint64_t)a2, 0);
}

uint64_t sub_1C4ADAE2C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  llvm::detail::DoubleAPFloat *v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  BOOL v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  const char *v89;
  unsigned int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  char v154;
  unsigned int RegisterDefOperandIdx;
  uint64_t *v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  void *v189;
  uint64_t v190;
  _DWORD v191[48];
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
    return 0;
  v14 = *(unsigned int *)(a3 + 4);
  if ((v14 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v14);
  v16 = *v15;
  if (v16 && ((*(_BYTE *)(v16 + 3) & 1) != 0 || (v16 = *(_QWORD *)(v16 + 24)) != 0 && (*(_BYTE *)(v16 + 3) & 1) != 0))
  {
    v17 = *(_QWORD *)(v16 + 8);
    if ((a7 & 1) != 0)
      goto LABEL_78;
  }
  else
  {
    v17 = 0;
    if ((a7 & 1) != 0)
      goto LABEL_78;
  }
  if ((v14 & 0x80000000) != 0)
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v14);
  v19 = *v18;
  if ((*(_BYTE *)(v19 + 3) & 1) == 0)
    v19 = *(_QWORD *)(v19 + 24);
  v20 = *(_QWORD *)(v19 + 8);
  if (**(_WORD **)(v20 + 16) != 77 || *(_DWORD *)(v20 + 40) != 3)
    goto LABEL_78;
  v21 = *(_QWORD *)(v20 + 32);
  v22 = *(unsigned int *)(v21 + 36);
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 272);
  if ((int)v22 >= 0)
    v25 = (uint64_t *)(v24 + 8 * v22);
  else
    v25 = (uint64_t *)(v23 + 16 * (v22 & 0x7FFFFFFF) + 8);
  v26 = *v25;
  if ((*(_BYTE *)(v26 + 3) & 1) == 0)
    v26 = *(_QWORD *)(v26 + 24);
  v27 = *(_QWORD *)(v26 + 8);
  if (**(_WORD **)(v27 + 16) == 121)
    v28 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 48);
  else
    v28 = 0;
  v29 = *(unsigned int *)(v21 + 68);
  v30 = v23 + 16 * (v29 & 0x7FFFFFFF) + 8;
  v31 = (uint64_t *)(v24 + 8 * v29);
  if ((int)v29 >= 0)
    v32 = v31;
  else
    v32 = (uint64_t *)v30;
  v33 = *v32;
  if ((*(_BYTE *)(v33 + 3) & 1) == 0)
    v33 = *(_QWORD *)(v33 + 24);
  v34 = *(_QWORD *)(v33 + 8);
  if (**(_WORD **)(v34 + 16) == 121)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 48);
    if (!v28)
      goto LABEL_78;
  }
  else
  {
    v35 = 0;
    if (!v28)
      goto LABEL_78;
  }
  if (v28 != v35)
    goto LABEL_78;
  if (!*(_BYTE *)(*(_QWORD *)v28 + 8))
  {
    if (*(_UNKNOWN **)(v28 + 32) == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v28 + 32), (unsigned int *)&v189);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt(v28 + 32, (unsigned int *)&v189);
    v36 = (uint64_t *)&v189;
    if (v190 >= 0x41)
      v36 = (uint64_t *)v189;
    v37 = *v36;
    if (v37)
    {
      v38 = 0;
      if ((v37 & 0x3F) != 0 || (v39 = (v37 >> 10) & 0x1F, v39 - 9 > 0xA))
      {
LABEL_41:
        if (v190 >= 0x41 && v189)
        {
          v180 = v38;
          MEMORY[0x1CAA32F9C]();
          v38 = v180;
        }
        if (v38)
        {
          if (*(_UNKNOWN **)(v28 + 32) == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v28 + 32), (unsigned int *)&v189);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt(v28 + 32, (unsigned int *)&v189);
          v40 = v190;
          v41 = v189;
          v42 = (unsigned int *)&v189;
          if (v190 >= 0x41)
            v42 = (unsigned int *)v189;
          v43 = *v42;
          v44 = (v43 >> 10) & 0x1F;
          v45 = (v43 >> 6) & 0xF;
          if (v44 | v45)
          {
            if (v44 <= 0xC)
            {
              v45 = (v45 | 0x10) >> (13 - v44);
              v44 = 0;
            }
            else
            {
              v44 -= 12;
            }
          }
          v55 = (v43 >> 8) & 0x80 | (16 * v44);
LABEL_160:
          v107 = v55 | v45;
          if (v40 >= 0x41)
          {
            if (v41)
              MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
          }
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a6 + 32))(a6, *(_QWORD *)(a3 + 8));
          llvm::MachineOperand::ChangeToImmediate((unsigned int *)a3, v107, 0);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a6 + 40))(a6, *(_QWORD *)(a3 + 8));
          return 1;
        }
        goto LABEL_52;
      }
      if (v39 <= 0xC && (((v37 | 0x400uLL) >> (13 - v39)) & 0x3F) != 0)
      {
        v38 = 0;
        goto LABEL_41;
      }
    }
    v38 = 1;
    goto LABEL_41;
  }
LABEL_52:
  v47 = *(void **)(v28 + 32);
  v46 = (llvm::detail::DoubleAPFloat *)(v28 + 32);
  if (v47 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v46, (unsigned int *)&v189);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v46, (unsigned int *)&v189);
  v48 = (uint64_t *)&v189;
  if (v190 >= 0x41)
    v48 = (uint64_t *)v189;
  v49 = *v48;
  if (!v49)
    goto LABEL_62;
  v50 = 0;
  if ((v49 & 0x7FFFF) == 0)
  {
    v51 = (v49 >> 23);
    if (v51 - 121 <= 0xA)
    {
      if (v51 <= 0x7C && (((v49 | 0x800000uLL) >> (125 - v51)) & 0x7FFFF) != 0)
      {
        v50 = 0;
        goto LABEL_63;
      }
LABEL_62:
      v50 = 1;
    }
  }
LABEL_63:
  if (v190 >= 0x41 && v189)
    MEMORY[0x1CAA32F9C]();
  if (v50)
  {
    if (*(_UNKNOWN **)v46 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v46, (unsigned int *)&v189);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v46, (unsigned int *)&v189);
    v40 = v190;
    v41 = v189;
    v52 = (unsigned int *)&v189;
    if (v190 >= 0x41)
      v52 = (unsigned int *)v189;
    v53 = *v52;
    v54 = (v53 >> 23);
    v45 = (v53 >> 19) & 0xF;
    if (v54 | v45)
    {
      if (v54 <= 0x7C)
      {
        v45 = (v45 | 0x10) >> (125 - v54);
        v54 = 0;
      }
      else
      {
        v54 -= 124;
      }
    }
    v55 = (16 * v54) | (v53 >> 31 << 7);
    goto LABEL_160;
  }
LABEL_78:
  if (**(_WORD **)(v17 + 16) != 77)
    return 0;
  v56 = *(_QWORD *)(v17 + 32);
  v57 = v56 + 32;
  v58 = v56 + 64;
  v59 = *(unsigned int *)(v56 + 36);
  v60 = (uint64_t *)((v59 & 0x80000000) != 0
                  ? *(_QWORD *)(a1 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(a1 + 272) + 8 * v59);
  if ((v61 = *v60) != 0
    && ((*(_BYTE *)(v61 + 3) & 1) != 0 || (v61 = *(_QWORD *)(v61 + 24)) != 0 && (*(_BYTE *)(v61 + 3) & 1) != 0)
    && (v108 = *(_QWORD *)(v61 + 8)) != 0
    && **(_WORD **)(v108 + 16) == 178
    && *(_DWORD *)(v108 + 40) == 2)
  {
    v182 = *(unsigned int *)(*(_QWORD *)(v108 + 32) + 36);
    v109 = *(unsigned int *)(v56 + 68);
    v110 = (uint64_t *)((v109 & 0x80000000) != 0
                     ? *(_QWORD *)(a1 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(a1 + 272) + 8 * v109);
    if ((v125 = *v110) != 0
      && ((*(_BYTE *)(v125 + 3) & 1) != 0 || (v125 = *(_QWORD *)(v125 + 24)) != 0 && (*(_BYTE *)(v125 + 3) & 1) != 0)
      && (v132 = *(_QWORD *)(v125 + 8)) != 0
      && **(_WORD **)(v132 + 16) == 178
      && *(_DWORD *)(v132 + 40) == 2)
    {
      v63 = *(unsigned int *)(*(_QWORD *)(v132 + 32) + 36);
      v133 = (uint64_t *)((v182 & 0x80000000) != 0
                       ? *(_QWORD *)(a1 + 24) + 16 * (v182 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(a1 + 272) + 8 * v182);
      v146 = *v133;
      if (v146
        && ((*(_BYTE *)(v146 + 3) & 1) != 0 || (v146 = *(_QWORD *)(v146 + 24)) != 0 && (*(_BYTE *)(v146 + 3) & 1) != 0))
      {
        v147 = *(_QWORD *)(v146 + 8);
      }
      else
      {
        v147 = 0;
      }
      RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v147, v182, 0, 0, 0);
      v57 = RegisterDefOperandIdx == -1 ? 0 : *(_QWORD *)(v147 + 32) + 32 * RegisterDefOperandIdx;
      v159 = (uint64_t *)((v63 & 0x80000000) != 0
                       ? *(_QWORD *)(a1 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(a1 + 272) + 8 * v63);
      v164 = *v159;
      if (v164
        && ((*(_BYTE *)(v164 + 3) & 1) != 0 || (v164 = *(_QWORD *)(v164 + 24)) != 0 && (*(_BYTE *)(v164 + 3) & 1) != 0))
      {
        v177 = *(_QWORD *)(v164 + 8);
        v165 = llvm::MachineInstr::findRegisterDefOperandIdx(v177, v63, 0, 0, 0);
      }
      else
      {
        v177 = 0;
        v165 = llvm::MachineInstr::findRegisterDefOperandIdx(0, v63, 0, 0, 0);
      }
      v58 = v165 == -1 ? 0 : *(_QWORD *)(v177 + 32) + 32 * v165;
    }
    else
    {
      LODWORD(v63) = 0;
    }
    v62 = v182;
  }
  else
  {
    v62 = 0;
    LODWORD(v63) = 0;
  }
  v64 = !v62 || (_DWORD)v63 == 0;
  v65 = !v64;
  v66 = *(unsigned int *)(v57 + 4);
  if ((v66 & 0x80000000) != 0 && (v66 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432))
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v66 & 0x7FFFFFFF));
  else
    v67 = 0;
  v68 = *(unsigned int *)(v58 + 4);
  if ((v68 & 0x80000000) != 0 && (v68 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432))
    v69 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (v68 & 0x7FFFFFFF));
  else
    v69 = 0;
  if (v67 != v69)
    return 0;
  if ((v66 & 0x80000000) != 0)
    v70 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
  else
    v70 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v66);
  v71 = *v70;
  if (v71
    && ((*(_BYTE *)(v71 + 3) & 1) != 0 || (v71 = *(_QWORD *)(v71 + 24)) != 0 && (*(_BYTE *)(v71 + 3) & 1) != 0)
    && (v111 = *(_QWORD *)(v71 + 8)) != 0
    && **(_WORD **)(v111 + 16) == 262
    && *(_DWORD *)(v111 + 40) == 2
    && ((v112 = *(unsigned int *)(*(_QWORD *)(v111 + 32) + 36), (v68 & 0x80000000) != 0)
      ? (v113 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8))
      : (v113 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v68)),
        (v126 = *v113) != 0
     && ((*(_BYTE *)(v126 + 3) & 1) != 0 || (v126 = *(_QWORD *)(v126 + 24)) != 0 && (*(_BYTE *)(v126 + 3) & 1) != 0)
     && (v127 = *(_QWORD *)(v126 + 8)) != 0
     && **(_WORD **)(v127 + 16) == 262
     && *(_DWORD *)(v127 + 40) == 2))
  {
    v176 = *(unsigned int *)(*(_QWORD *)(v127 + 32) + 36);
    if ((v112 & 0x80000000) != 0)
      v128 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
    else
      v128 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v112);
    v134 = *v128;
    if (v134
      && ((*(_BYTE *)(v134 + 3) & 1) != 0 || (v134 = *(_QWORD *)(v134 + 24)) != 0 && (*(_BYTE *)(v134 + 3) & 1) != 0))
    {
      v135 = *(_QWORD *)(v134 + 8);
    }
    else
    {
      v135 = 0;
    }
    v148 = llvm::MachineInstr::findRegisterDefOperandIdx(v135, v112, 0, 0, 0);
    if (v148 == -1)
      v57 = 0;
    else
      v57 = *(_QWORD *)(v135 + 32) + 32 * v148;
    if ((v176 & 0x80000000) != 0)
      v156 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v176 & 0x7FFFFFFF) + 8);
    else
      v156 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v176);
    v160 = *v156;
    if (v160
      && ((*(_BYTE *)(v160 + 3) & 1) != 0 || (v160 = *(_QWORD *)(v160 + 24)) != 0 && (*(_BYTE *)(v160 + 3) & 1) != 0))
    {
      v186 = *(_QWORD *)(v160 + 8);
      v161 = llvm::MachineInstr::findRegisterDefOperandIdx(v186, v176, 0, 0, 0);
    }
    else
    {
      v186 = 0;
      v161 = llvm::MachineInstr::findRegisterDefOperandIdx(0, v176, 0, 0, 0);
    }
    if (v161 == -1)
      v58 = 0;
    else
      v58 = *(_QWORD *)(v186 + 32) + 32 * v161;
    v72 = 1;
  }
  else
  {
    v72 = 0;
  }
  v73 = *(unsigned int *)(v57 + 4);
  if ((v73 & 0x80000000) != 0)
    v74 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
  else
    v74 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v73);
  v75 = *v74;
  if (v75)
  {
    v183 = v72;
    if ((*(_BYTE *)(v75 + 3) & 1) != 0 || (v75 = *(_QWORD *)(v75 + 24)) != 0 && (*(_BYTE *)(v75 + 3) & 1) != 0)
    {
      v114 = *(_QWORD *)(v75 + 8);
      if (v114 && **(_WORD **)(v114 + 16) == 177 && *(_DWORD *)(v114 + 40) == 2)
      {
        v115 = *(unsigned int *)(*(_QWORD *)(v114 + 32) + 36);
        v116 = *(unsigned int *)(v58 + 4);
        v117 = (uint64_t *)((v116 & 0x80000000) != 0
                         ? *(_QWORD *)(a1 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(a1 + 272) + 8 * v116);
        v129 = *v117;
        if (v129)
        {
          if ((*(_BYTE *)(v129 + 3) & 1) != 0
            || (v129 = *(_QWORD *)(v129 + 24)) != 0 && (*(_BYTE *)(v129 + 3) & 1) != 0)
          {
            v136 = *(_QWORD *)(v129 + 8);
            if (v136)
            {
              if (**(_WORD **)(v136 + 16) == 177 && *(_DWORD *)(v136 + 40) == 2)
              {
                v173 = *(unsigned int *)(*(_QWORD *)(v136 + 32) + 36);
                if ((v115 & 0x80000000) != 0)
                  v137 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8);
                else
                  v137 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v115);
                v149 = *v137;
                if (v149
                  && ((*(_BYTE *)(v149 + 3) & 1) != 0
                   || (v149 = *(_QWORD *)(v149 + 24)) != 0 && (*(_BYTE *)(v149 + 3) & 1) != 0))
                {
                  v150 = *(_QWORD *)(v149 + 8);
                }
                else
                {
                  v150 = 0;
                }
                v157 = llvm::MachineInstr::findRegisterDefOperandIdx(v150, v115, 0, 0, 0);
                if (v157 == -1)
                  v57 = 0;
                else
                  v57 = *(_QWORD *)(v150 + 32) + 32 * v157;
                if ((v173 & 0x80000000) != 0)
                  v162 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v173 & 0x7FFFFFFF) + 8);
                else
                  v162 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v173);
                v166 = *v162;
                if (v166
                  && ((*(_BYTE *)(v166 + 3) & 1) != 0
                   || (v166 = *(_QWORD *)(v166 + 24)) != 0 && (*(_BYTE *)(v166 + 3) & 1) != 0))
                {
                  v178 = *(_QWORD *)(v166 + 8);
                  v167 = llvm::MachineInstr::findRegisterDefOperandIdx(v178, v173, 0, 0, 0);
                }
                else
                {
                  v178 = 0;
                  v167 = llvm::MachineInstr::findRegisterDefOperandIdx(0, v173, 0, 0, 0);
                }
                if (v167 == -1)
                  v58 = 0;
                else
                  v58 = *(_QWORD *)(v178 + 32) + 32 * v167;
                v72 = v183 | 2;
                v73 = *(unsigned int *)(v57 + 4);
              }
            }
          }
        }
      }
    }
  }
  if ((v73 & 0x80000000) != 0)
    v76 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
  else
    v76 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v73);
  v77 = *v76;
  if (v77)
  {
    v184 = v72;
    if ((*(_BYTE *)(v77 + 3) & 1) != 0 || (v77 = *(_QWORD *)(v77 + 24)) != 0 && (*(_BYTE *)(v77 + 3) & 1) != 0)
    {
      v118 = *(_QWORD *)(v77 + 8);
      if (v118 && **(_WORD **)(v118 + 16) == 184 && *(_DWORD *)(v118 + 40) == 2)
      {
        v119 = *(unsigned int *)(v58 + 4);
        v120 = (uint64_t *)((v119 & 0x80000000) != 0
                         ? *(_QWORD *)(a1 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(a1 + 272) + 8 * v119);
        v130 = *v120;
        if (v130)
        {
          v138 = *(unsigned int *)(*(_QWORD *)(v118 + 32) + 36);
          if ((*(_BYTE *)(v130 + 3) & 1) != 0
            || (v130 = *(_QWORD *)(v130 + 24)) != 0 && (*(_BYTE *)(v130 + 3) & 1) != 0)
          {
            v139 = *(_QWORD *)(v130 + 8);
            if (v139)
            {
              if (**(_WORD **)(v139 + 16) == 184 && *(_DWORD *)(v139 + 40) == 2)
              {
                v140 = *(_QWORD *)(v139 + 32);
                if ((v138 & 0x80000000) != 0)
                  v141 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
                else
                  v141 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v138);
                v174 = *(unsigned int *)(v140 + 36);
                v151 = *v141;
                if (*v141
                  && ((*(_BYTE *)(v151 + 3) & 1) != 0
                   || (v151 = *(_QWORD *)(v151 + 24)) != 0 && (*(_BYTE *)(v151 + 3) & 1) != 0))
                {
                  v152 = *(_QWORD *)(v151 + 8);
                }
                else
                {
                  v152 = 0;
                }
                v158 = llvm::MachineInstr::findRegisterDefOperandIdx(v152, v138, 0, 0, 0);
                if (v158 == -1)
                  v57 = 0;
                else
                  v57 = *(_QWORD *)(v152 + 32) + 32 * v158;
                if ((v174 & 0x80000000) != 0)
                  v163 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v174 & 0x7FFFFFFF) + 8);
                else
                  v163 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v174);
                v168 = *v163;
                if (v168
                  && ((*(_BYTE *)(v168 + 3) & 1) != 0
                   || (v168 = *(_QWORD *)(v168 + 24)) != 0 && (*(_BYTE *)(v168 + 3) & 1) != 0))
                {
                  v179 = *(_QWORD *)(v168 + 8);
                  v169 = llvm::MachineInstr::findRegisterDefOperandIdx(v179, v174, 0, 0, 0);
                }
                else
                {
                  v179 = 0;
                  v169 = llvm::MachineInstr::findRegisterDefOperandIdx(0, v174, 0, 0, 0);
                }
                if (v169 == -1)
                  v58 = 0;
                else
                  v58 = *(_QWORD *)(v179 + 32) + 32 * v169;
                v72 = v184 | 4;
                v73 = *(unsigned int *)(v57 + 4);
              }
            }
          }
        }
      }
    }
  }
  v78 = (uint64_t *)((v73 & 0x80000000) != 0
                  ? *(_QWORD *)(a1 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(a1 + 272) + 8 * v73);
  v79 = *v78;
  if (!v79)
    goto LABEL_116;
  v175 = v58;
  v185 = v72;
  if ((*(_BYTE *)(v79 + 3) & 1) == 0)
  {
    v79 = *(_QWORD *)(v79 + 24);
    if (!v79 || (*(_BYTE *)(v79 + 3) & 1) == 0)
      goto LABEL_116;
  }
  v121 = *(_QWORD *)(v79 + 8);
  if (!v121)
    goto LABEL_116;
  if (**(_WORD **)(v121 + 16) != 313)
    goto LABEL_116;
  if (*(_DWORD *)(v121 + 40) != 2)
    goto LABEL_116;
  v122 = *(_QWORD *)(v121 + 32);
  if (*(_BYTE *)(v122 + 32) != 1)
    goto LABEL_116;
  v123 = *(unsigned int *)(v58 + 4);
  v124 = (uint64_t *)((v123 & 0x80000000) != 0
                   ? *(_QWORD *)(a1 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8
                   : *(_QWORD *)(a1 + 272) + 8 * v123);
  v131 = *v124;
  if (!v131)
    goto LABEL_116;
  v172 = *(_QWORD *)(v122 + 48);
  if ((*(_BYTE *)(v131 + 3) & 1) == 0)
  {
    v131 = *(_QWORD *)(v131 + 24);
    if (!v131 || (*(_BYTE *)(v131 + 3) & 1) == 0)
      goto LABEL_116;
  }
  v142 = *(_QWORD *)(v131 + 8);
  if (!v142)
    goto LABEL_116;
  if (**(_WORD **)(v142 + 16) != 313)
    goto LABEL_116;
  if (*(_DWORD *)(v142 + 40) != 2)
    goto LABEL_116;
  v143 = *(_QWORD *)(v142 + 32);
  if (*(_BYTE *)(v143 + 32) != 1)
    goto LABEL_116;
  if ((v73 & 0x80000000) != 0 && (v144 = v73 & 0x7FFFFFFF, v144 < *(_DWORD *)(a1 + 432)))
    v145 = *(void **)(*(_QWORD *)(a1 + 424) + 8 * v144);
  else
    v145 = 0;
  v171 = *(_QWORD *)(v143 + 48);
  v189 = v145;
  v170 = sub_1C4825F50((unint64_t *)&v189);
  if ((_DWORD)v153 == 1)
  v154 = (v171 & 0xF) != 0 ? 0 : a5;
  v72 = v185;
  v58 = v175;
  if ((v154 & 1) == 0 && (v170 >> 3) + v172 == v171 && !(v172 % (uint64_t)((v170 >> 2) & 0x3FFFFFFE)))
    v80 = v172;
  else
LABEL_116:
    v80 = -1;
  v81 = !v72 && v80 == 0xFFFFFFFFLL;
  if (v81 && !v65)
    return 0;
  v83 = *(_DWORD *)(v57 + 4);
  if ((v83 & 0x80000000) == 0 || (v84 = v83 & 0x7FFFFFFF, v84 >= *(_DWORD *)(a1 + 432)))
  {
    if (v80 == 0xFFFFFFFFLL)
    {
      v86 = v58;
      v181 = v72;
      v85 = 0;
      v87 = 20;
      goto LABEL_133;
    }
    v85 = 0;
    goto LABEL_130;
  }
  v85 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v84);
  if (v80 != 0xFFFFFFFFLL)
  {
LABEL_130:
    if ((a7 & 1) == 0)
    {
      v181 = v72;
      v95 = (_QWORD *)(a3 + 8);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a6 + 32))(a6, *(_QWORD *)(a3 + 8));
      if (v85 == 257)
      {
        v96 = 775;
      }
      else if (v85 == 129)
      {
        v96 = 519;
      }
      else
      {
        v96 = 3847;
      }
      v97 = *(_DWORD *)a3;
      if (!*(_DWORD *)a3)
      {
        v98 = *(_QWORD *)(a3 + 16);
        if (v98)
        {
          if (*v95)
          {
            v99 = *(_QWORD *)(*v95 + 24);
            if (v99)
            {
              v100 = *(_QWORD *)(v99 + 32);
              if (v100)
              {
                v101 = *(_QWORD *)(v100 + 40);
                v102 = *(unsigned int *)(a3 + 4);
                if ((v102 & 0x80000000) != 0)
                  v103 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
                else
                  v103 = (uint64_t *)(*(_QWORD *)(v101 + 272) + 8 * v102);
                v104 = *v103;
                v105 = *(_QWORD *)(a3 + 24);
                if (*v103 != a3)
                  v103 = (uint64_t *)(v98 + 24);
                *v103 = v105;
                if (v105)
                  v106 = v105;
                else
                  v106 = v104;
                *(_QWORD *)(v106 + 16) = v98;
                *(_QWORD *)(a3 + 16) = 0;
                *(_QWORD *)(a3 + 24) = 0;
                v97 = *(_DWORD *)a3;
              }
            }
          }
        }
      }
      *(_DWORD *)(a3 + 16) = 64;
      *(_DWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = v96 | v97 & 0xFFF00000;
      *(_DWORD *)(a3 + 4) = v80 >> 1;
      goto LABEL_157;
    }
    return 0;
  }
  v86 = v58;
  v181 = v72;
  v87 = v85 & 0x8000000000000000 | 0x14;
LABEL_133:
  v189 = (void *)v85;
  v90 = sub_1C4825F50((unint64_t *)&v189);
  if ((_DWORD)v89 == 1)
  a2[5] = *(_QWORD *)(v17 + 24);
  a2[6] = v17;
  v187 = v87 | ((unint64_t)v90 << 19);
  v188 = 0;
  v91 = *(_DWORD *)(v57 + 4);
  v92 = *(_DWORD *)(v86 + 4);
  v189 = v191;
  v191[0] = v91;
  v191[4] = 0;
  v191[6] = v92;
  v191[10] = 0;
  v190 = 0x800000002;
  (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a2 + 32))(a2, 77, &v187, 1, v191, 2, 0);
  v94 = v93;
  if (v189 != v191)
    free(v189);
  v95 = (_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a6 + 32))(a6, *(_QWORD *)(a3 + 8));
  llvm::MachineOperand::setReg(a3, *(_DWORD *)(*(_QWORD *)(v94 + 32) + 4));
LABEL_157:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a6 + 40))(a6, *v95);
  *(_QWORD *)(a4 + 16) |= v181;
  return 1;
}

uint64_t sub_1C4ADBFFC(int a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v4 = *v3;
  if (!*v3)
    return 1;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 1;
  }
  v7 = *(_QWORD *)(v4 + 8);
LABEL_9:
  v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 & 0xFFFE) == 0xB2)
  {
    result = sub_1C4ADBFFC(*(unsigned int *)(*(_QWORD *)(v7 + 32) + 4), a2);
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(v4 + 8);
      goto LABEL_12;
    }
    return result;
  }
  result = 0;
  if (**(unsigned __int16 **)(v7 + 16) > 0xA2u)
  {
    if ((v8 - 163) > 0x38 || ((1 << (v8 + 93)) & 0x18800000038540DLL) == 0)
    {
      v10 = (v8 - 272);
      if (v10 > 0x3F)
        goto LABEL_32;
      if (((1 << (v8 - 16)) & 0x20000040000000C1) != 0)
        goto LABEL_12;
      if (v10 != 63)
      {
LABEL_32:
        if (v8 == 357)
          goto LABEL_12;
        return result;
      }
      goto LABEL_29;
    }
LABEL_12:
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 1;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0 && *(_QWORD *)(v4 + 8) != v7)
      {
        v7 = *(_QWORD *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
  if (v8 != 51)
  {
    if (v8 == 54 || v8 == 85)
      goto LABEL_12;
    return result;
  }
LABEL_29:
  v11 = *(_QWORD *)(v7 + 32);
  if (*(_DWORD *)(v11 + 132) != a1 && *(_DWORD *)(v11 + 164) != a1)
    goto LABEL_12;
  return 0;
}

const char *sub_1C4ADC16C()
{
  return "AGX3PostLegalizerCombiner";
}

uint64_t sub_1C4ADC17C()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx3 post legalization machine instruction combiner";
  v4.n128_u64[1] = 62;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EE590, "enable-agx3-postlegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE590, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX3 Postlegalizer Combiner";
  v4.n128_u64[1] = 48;
  v3 = 0;
  v1 = 1;
  v2 = &v1;
  sub_1C6144A08((uint64_t)&unk_1ED7EE650, "enable-cse-in-agx3-postlegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE650, &dword_1C475E000);
}

uint64_t sub_1C4ADC260(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  sub_1C54EB3A8(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Combine agx3 machine instrs before legalization";
  *(_QWORD *)(v2 + 8) = 47;
  *(_QWORD *)(v2 + 16) = "agx3-prelegalizer-combiner";
  *(_QWORD *)(v2 + 24) = 26;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EE710;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6159078;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4ADC304(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void **v28;
  void *v29;
  uint64_t v30;
  void **v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void **v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;

  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
    return 0;
  v5 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v4;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 328);
  if (v6 == a2 + 320)
    goto LABEL_58;
  while (2)
  {
    for (i = *(_QWORD *)(v6 + 56); i != v6 + 48; i = *(_QWORD *)(i + 8))
    {
      v8 = **(unsigned __int16 **)(i + 16);
      if (v8 <= 0x50)
      {
        if (v8 == 71)
        {
          v12 = *(_DWORD *)(*(_QWORD *)(i + 32) + 4);
          if (v12 < 0)
            goto LABEL_25;
        }
        else
        {
          if (v8 != 80)
            goto LABEL_50;
          v12 = *(_DWORD *)(*(_QWORD *)(i + 32) + 36);
          if (v12 < 0)
          {
LABEL_25:
            v17 = v12 & 0x7FFFFFFF;
            if (v17 < *(_DWORD *)(v5 + 432))
            {
              v15 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v17);
              goto LABEL_28;
            }
          }
        }
        v15 = 0;
LABEL_28:
        if ((v15 & 4) != 0)
          v18 = 0x7FFFFF800000000;
        else
          v18 = 0x7FFFFF80000;
        if ((v18 & v15) == 0)
          goto LABEL_57;
        goto LABEL_50;
      }
      if (v8 == 96 || v8 == 90)
      {
        v13 = *(_DWORD *)(*(_QWORD *)(i + 32) + 4);
        if ((v13 & 0x80000000) == 0)
          goto LABEL_50;
        v14 = v13 & 0x7FFFFFFF;
        if (v14 >= *(_DWORD *)(v5 + 432))
          goto LABEL_50;
        v15 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v14);
        if ((v15 & 0xFFFFFFFFFFFFFFF9) == 0 || (v15 & 6) != 2)
          goto LABEL_50;
        goto LABEL_28;
      }
      if (v8 == 81)
      {
        v9 = *(_QWORD *)(i + 32);
        v10 = *(unsigned int *)(v9 + 36);
        if ((v10 & 0x80000000) != 0)
          v11 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
        else
          v11 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v10);
        v19 = *v11;
        if ((*(_BYTE *)(v19 + 3) & 1) == 0)
          v19 = *(_QWORD *)(v19 + 24);
        v20 = *(_QWORD *)(v19 + 8);
        v22 = **(_WORD **)(v20 + 16) == 19
           && (v21 = *(_QWORD *)(v20 + 32), !*(_BYTE *)(v21 + 32))
           && *(_DWORD *)(v21 + 36) == 105;
        v23 = *(_DWORD *)(v9 + 4);
        if (v23 < 0 && (v24 = v23 & 0x7FFFFFFF, v24 < *(_DWORD *)(v5 + 432)))
          v25 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v24);
        else
          v25 = 0;
        v26 = (v25 & 4) != 0 ? 0x7FFFFF800000000 : 0x7FFFFF80000;
        v27 = (v26 & v25) != 0 || v22;
        if ((v27 & 1) == 0)
        {
LABEL_57:
          *(_BYTE *)(v4 + 560) = 1;
          goto LABEL_58;
        }
      }
LABEL_50:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 != a2 + 320)
      continue;
    break;
  }
LABEL_58:
  if (!byte_1ED7EE7A0)
    return 0;
  v28 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v29 = *v28;
    v28 += 2;
  }
  while (v29 != &llvm::TargetPassConfig::ID);
  v30 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v28 - 1) + 96))(*(v28 - 1), &llvm::TargetPassConfig::ID);
  v31 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v32 = *v31;
    v31 += 2;
  }
  while (v32 != &unk_1EF8F7108);
  v33 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v31 - 1) + 96))(*(v31 - 1), &unk_1EF8F7108);
  if (word_1ED7EE7E8)
  {
    if (byte_1ED7EE860)
    {
LABEL_65:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v30 + 288))(&v40, v30);
      sub_1C54EB0C0(v33 + 248, &v40, 0);
      v34 = v40;
      v40 = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 280))(v30))
  {
    goto LABEL_65;
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 552))
    llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2);
  v36 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v37 = *v36;
    v36 += 2;
  }
  while (v37 != &unk_1EF8F7110);
  v38 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v36 - 1) + 96))(*(v36 - 1), &unk_1EF8F7110);
  sub_1C491CBCC(v38, a2);
  return sub_1C54F59B4();
}

uint64_t sub_1C4ADC73C(uint64_t a1, llvm::ConstantInt *****a2, uint64_t a3, uint64_t a4)
{
  llvm::ConstantInt *****v6;
  uint64_t v7;
  llvm::ConstantInt *****v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int32 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  char v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  llvm::MachineFunction *v45;
  llvm::MachineInstr *v46;
  llvm::MachineInstr *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  void (**v52)(uint64_t *);
  void **v53;
  void (**v54)(void **);
  unsigned int v55;
  uint64_t (**v56)();
  uint64_t (**v57)();
  int v58;
  int64_t v59;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  int v89;
  uint64_t *v90;
  void (**v91)(uint64_t *);
  void **v92;
  void (**v93)(void **);
  uint64_t v94;
  int FixedObject;
  _DWORD *v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  char v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  const char *v114;
  char v115;
  const char *v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t (***v121)();
  void (**v122)(uint64_t (***)());
  uint64_t *v123;
  void (**v124)(uint64_t *);
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint8x8_t v129;
  int v130;
  size_t v131;
  uint64_t (**v132)();
  unint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint8x8_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  int v148;
  _DWORD *k;
  __int32 v150;
  llvm::MachineFunction *v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int GenericVirtualRegister;
  uint64_t v173;
  llvm::MachineFunction *v174;
  unint64_t *v175;
  unint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  const char *v191;
  uint64_t v192;
  void *v193;
  unint64_t *v194;
  uint64_t v195;
  void *v196;
  unint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  unint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  llvm::MachineMemOperand *MachineMemOperand;
  llvm::MachineFunction *v217;
  unint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  size_t v226;
  uint64_t *v227;
  uint64_t (**v228)();
  uint64_t v229;
  int v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  const char *v238;
  unsigned int v239;
  uint64_t (**v240)();
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  unint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _DWORD *i;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _DWORD *j;
  void *v257;
  unint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  uint64_t v264;
  void **v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  int v272;
  llvm::ConstantInt *****v273[8];
  void *v274;
  uint64_t v275;
  unint64_t *v276;
  void **v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  void **v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t (**v289)();
  uint64_t (*v290)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  int8x8_t *v291;
  uint64_t v292;
  unint64_t *v293;
  int v294;
  char v295;
  unint64_t *v296;
  uint64_t v297;

  v297 = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::ConstantInt ******)(a1 + 32);
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(llvm::ConstantInt ******)(v7 + 40);
  v273[0] = (llvm::ConstantInt *****)a4;
  v273[1] = v8;
  v273[2] = a2;
  v273[3] = v6;
  v273[4] = 0;
  v273[5] = 0;
  v273[6] = (llvm::ConstantInt *****)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 184))(*(_QWORD *)(v7 + 16));
  v273[7] = (llvm::ConstantInt *****)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 16)
                                                                       + 176))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16));
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a4 + 48) = a3;
  v10 = **(unsigned __int16 **)(a3 + 16);
  if (v10 <= 0x73)
  {
    if (**(unsigned __int16 **)(a3 + 16) <= 0x4Cu)
    {
      if (v10 - 61 >= 2)
      {
        if (v10 != 65)
        {
          if (v10 != 66)
            return sub_1C4AEB310(v273, a3);
          v17 = *(_QWORD *)(a3 + 32);
          v18 = *(_DWORD *)(v17 + 36);
          LODWORD(v289) = v18;
          LODWORD(v267) = *(_DWORD *)(v17 + 68);
          v292 = 257;
          v274 = &v292;
          v275 = v9;
          v276 = (unint64_t *)&v289;
          v277 = (void **)&v267;
          v278 = a3;
          v279 = a4;
          if (v18 < 0)
          {
            v19 = v18 & 0x7FFFFFFF;
            if (v19 < *(_DWORD *)(v9 + 432))
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v19);
              if (v20 == 129)
              {
                v21 = 129;
                v22 = 0x7FFF;
                v23 = 0x8000;
              }
              else
              {
                if (v20 != 257)
                  goto LABEL_280;
                v21 = 257;
                v22 = 0x7FFFFFFF;
                v23 = 0x80000000;
              }
              if ((sub_1C4ADEC50((uint64_t)&v274, v21, v22, v23) & 1) != 0)
                return 1;
            }
          }
        }
LABEL_280:
        v185 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
        if ((v185 & 0x80000000) != 0
          && (v185 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v9 + 432))
        {
          v186 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v185 & 0x7FFFFFFF));
        }
        else
        {
          v186 = 0;
        }
        v267 = v186;
        v272 = 0;
        v270 = 0;
        v271 = 0;
        v274 = &v272;
        v275 = (uint64_t)&v271;
        v276 = &v270;
        LODWORD(v292) = v185;
        if (sub_1C499ABFC((uint64_t)&v274, v9, (unsigned int *)&v292))
        {
          v187 = __clz(__rbit64(v270));
          if ((v187 - 1) <= 3)
          {
            v188 = v270 >> v187;
            if (v270 >> v187)
            {
              if (((v188 + 1) & v188) == 0)
              {
                v189 = v271 + v187;
                v190 = sub_1C4825F50((unint64_t *)&v267);
                if ((_DWORD)v191 == 1)
                {
                  v266 = v190;
                  v190 = v266;
                }
                if (v189 < v190)
                {
                  v292 = v267;
                  LODWORD(v293) = 0;
                  LODWORD(v274) = v272;
                  LODWORD(v276) = 0;
                  v289 = (uint64_t (**)())v267;
                  LODWORD(v290) = 0;
                  v277 = (void **)sub_1C5544694(a4, (unint64_t *)&v289, v189);
                  v278 = v192;
                  LODWORD(v279) = 1;
                  v193 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 128, &v292, 1, &v274, 2, 0);
                  v292 = v267;
                  LODWORD(v293) = 0;
                  v274 = v193;
                  v275 = (uint64_t)v194;
                  LODWORD(v276) = 1;
                  v289 = (uint64_t (**)())v267;
                  LODWORD(v290) = 0;
                  v277 = (void **)sub_1C5544694(a4, (unint64_t *)&v289, v188);
                  v278 = v195;
                  LODWORD(v279) = 1;
                  v196 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v292, 1, &v274, 2, 0);
                  LODWORD(v292) = v185;
                  LODWORD(v293) = 1;
                  v274 = v196;
                  v275 = (uint64_t)v197;
                  LODWORD(v276) = 1;
                  v289 = (uint64_t (**)())v267;
                  LODWORD(v290) = 0;
                  v198 = a4;
                  v199 = v187;
LABEL_323:
                  v277 = (void **)sub_1C5544694(v198, (unint64_t *)&v289, v199);
                  v278 = v214;
                  LODWORD(v279) = 1;
                  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 127, &v292, 1, &v274, 2, 0);
                  v48 = *(_QWORD *)(a3 + 24);
                  v49 = a3;
                  if ((*(_BYTE *)a3 & 4) == 0)
                  {
                    v49 = a3;
                    if ((*(_WORD *)(a3 + 44) & 8) != 0)
                    {
                      v49 = a3;
                      do
                        v49 = *(_QWORD *)(v49 + 8);
                      while ((*(_WORD *)(v49 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_325;
                }
              }
            }
          }
        }
        v274 = &v272;
        v275 = (uint64_t)&v271;
        v276 = &v270;
        LODWORD(v292) = v185;
        if (sub_1C499ADF0((uint64_t)&v274, v9, (unsigned int *)&v292) && (uint64_t)v271 >= 1 && v271 <= 4)
        {
          if ((v185 & 0x80000000) != 0)
            v200 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v185 & 0x7FFFFFFF) + 8);
          else
            v200 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v185);
          v201 = *v200;
          if (!v201)
          {
LABEL_322:
            v292 = v267;
            LODWORD(v293) = 0;
            LODWORD(v274) = v272;
            LODWORD(v276) = 0;
            v289 = (uint64_t (**)())v267;
            LODWORD(v290) = 0;
            v277 = (void **)sub_1C5544694(a4, (unint64_t *)&v289, v270 >> v271);
            v278 = v211;
            LODWORD(v279) = 1;
            v212 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v292, 1, &v274, 2, 0);
            LODWORD(v292) = v185;
            LODWORD(v293) = 1;
            v274 = v212;
            v275 = (uint64_t)v213;
            LODWORD(v276) = 1;
            v289 = (uint64_t (**)())v267;
            LODWORD(v290) = 0;
            v199 = v271;
            v198 = a4;
            goto LABEL_323;
          }
          if ((*(_BYTE *)(v201 + 3) & 0x81) != 0)
          {
            do
            {
              v201 = *(_QWORD *)(v201 + 24);
              if (!v201)
                goto LABEL_322;
            }
            while ((*(_DWORD *)v201 & 0x81000000) != 0);
          }
          v202 = *(_QWORD *)(v201 + 8);
          if (**(_WORD **)(v202 + 16) == 45)
          {
LABEL_303:
            v203 = *(_QWORD *)(v202 + 32);
            v204 = *(unsigned int *)(v203 + 36);
            if ((v204 & 0x80000000) != 0)
              v205 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8);
            else
              v205 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v204);
            v206 = *v205;
            if ((*(_BYTE *)(v206 + 3) & 1) == 0)
              v206 = *(_QWORD *)(v206 + 24);
            if (**(_WORD **)(*(_QWORD *)(v206 + 8) + 16) != 127)
            {
              v207 = *(unsigned int *)(v203 + 68);
              if ((v207 & 0x80000000) != 0)
                v208 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v207 & 0x7FFFFFFF) + 8);
              else
                v208 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v207);
              v209 = *v208;
              if ((*(_BYTE *)(v209 + 3) & 1) == 0)
                v209 = *(_QWORD *)(v209 + 24);
              if (**(_WORD **)(*(_QWORD *)(v209 + 8) + 16) != 127)
              {
                while (1)
                {
                  v201 = *(_QWORD *)(v201 + 24);
                  if (!v201)
                    goto LABEL_322;
                  if ((*(_DWORD *)v201 & 0x81000000) == 0)
                  {
                    v210 = *(_QWORD *)(v201 + 8);
                    if (v210 != v202)
                    {
                      v202 = *(_QWORD *)(v201 + 8);
                      if (**(_WORD **)(v210 + 16) == 45)
                        goto LABEL_303;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        if ((sub_1C499FBDC(v273, a3) & 1) == 0 && (sub_1C4AE7104((uint64_t *)v273, a3) & 1) == 0)
          return sub_1C4AEB310(v273, a3);
        return 1;
      }
      v50 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 68);
      v274 = &off_1E816EFF0;
      v275 = (uint64_t)sub_1C554C7E0;
      v277 = &v274;
      v292 = (uint64_t)&off_1E816F038;
      v293 = (unint64_t *)sub_1C554C7F8;
      v296 = (unint64_t *)&v292;
      sub_1C554C3AC(v50, v9, (uint64_t)&v274, (uint64_t)&v292, 1, 0, &v289);
      v51 = (uint64_t *)v296;
      if (v296 == (unint64_t *)&v292)
      {
        v52 = (void (**)(uint64_t *))(v292 + 32);
        v51 = &v292;
      }
      else
      {
        if (!v296)
        {
LABEL_67:
          v53 = v277;
          if (v277 == &v274)
          {
            v54 = (void (**)(void **))((char *)v274 + 32);
            v53 = &v274;
          }
          else
          {
            if (!v277)
            {
LABEL_70:
              if (!(_BYTE)v291)
                return sub_1C4AEB310(v273, a3);
              v55 = v290;
              v56 = v289;
              v57 = v289;
              if (v290 >= 0x41)
              {
                v58 = 0;
                v59 = ((unint64_t)v290 + 63) >> 6;
                do
                {
                  if (v59-- < 1)
                    break;
                  v61 = (unint64_t)v289[v59];
                  v58 += __clz(v61);
                }
                while (!v61);
                v62 = v290 | 0xFFFFFFC0;
                if ((v290 & 0x3F) == 0)
                  v62 = 0;
                if ((_DWORD)v290 - v58 - v62 > 0x40)
                  goto LABEL_80;
                v57 = (uint64_t (**)())*v289;
              }
              if (!v57)
              {
                v130 = 2;
                goto LABEL_273;
              }
LABEL_80:
              v63 = *(_QWORD *)(a3 + 32);
              v64 = *(_DWORD *)(v63 + 4);
              if (v64 < 0 && (v64 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432))
                v65 = *(void **)(*(_QWORD *)(v9 + 424) + 8 * (v64 & 0x7FFFFFFF));
              else
                v65 = 0;
              if (v290 > 0x40)
              {
                v131 = (((unint64_t)v290 + 63) >> 3) & 0x3FFFFFF8;
                v132 = (uint64_t (**)())operator new[]();
                memcpy(v132, v56, v131);
                v133 = 0;
                v134 = 0;
                v135 = *(_QWORD *)(a3 + 32);
                v136 = *(_DWORD *)(v135 + 36);
                v64 = *(_DWORD *)(v135 + 4);
                do
                {
                  v137 = (uint8x8_t)vcnt_s8((int8x8_t)v132[v133 / 8]);
                  v137.i16[0] = vaddlv_u8(v137);
                  v134 += v137.i32[0];
                  v133 += 8;
                }
                while (v131 != v133);
                if (v134 != 1)
                {
                  v130 = 2;
LABEL_270:
                  MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
                  goto LABEL_271;
                }
                if ((((unint64_t)v132[(v55 - 1) >> 6] >> (v55 - 1)) & 1) != 0)
                {
                  v130 = 2;
                  goto LABEL_268;
                }
                v274 = v65;
                LODWORD(v275) = 0;
                v56 = (uint64_t (**)())*v132;
              }
              else
              {
                v129 = (uint8x8_t)vcnt_s8((int8x8_t)v289);
                v129.i16[0] = vaddlv_u8(v129);
                if (v129.u32[0] != 1 || (((unint64_t)v289 >> (v290 - 1)) & 1) != 0)
                {
                  v130 = 2;
LABEL_271:
                  if (!(_BYTE)v291)
                    goto LABEL_276;
                  v55 = v290;
LABEL_273:
                  if (v55 >= 0x41 && v289)
                    MEMORY[0x1CAA32F9C](v289, 0x1000C8000313F17);
LABEL_276:
                  if (v130 == 2)
                    return sub_1C4AEB310(v273, a3);
                  return 1;
                }
                v136 = *(_DWORD *)(v63 + 36);
                v274 = v65;
                v132 = v289;
                LODWORD(v275) = 0;
              }
              v160 = sub_1C5544694(a4, (unint64_t *)&v274, (uint64_t)v56 - 1);
              v162 = v161;
              if (**(_WORD **)(a3 + 16) == 61)
              {
                v292 = (uint64_t)v65;
                LODWORD(v293) = 0;
                LODWORD(v274) = v136;
                LODWORD(v276) = 0;
                v277 = (void **)v160;
                v278 = v161;
                LODWORD(v279) = 1;
                v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v292, 1, &v274, 2, 0);
                v264 = v164;
                v265 = (void **)v163;
                v274 = v65;
                LODWORD(v275) = 0;
                v165 = (uint64_t)v132;
                if (v55 >= 0x41)
                  v165 = (uint64_t)*v132;
                v166 = sub_1C5544694(a4, (unint64_t *)&v274, -v165);
                v292 = (uint64_t)v65;
                LODWORD(v293) = 0;
                LODWORD(v274) = v136;
                LODWORD(v276) = 0;
                v277 = (void **)v166;
                v278 = v167;
                LODWORD(v279) = 1;
                v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 66, &v292, 1, &v274, 2, 0);
                v260 = v169;
                v261 = v168;
                v274 = v65;
                LODWORD(v275) = 0;
                v262 = v136;
                v259 = sub_1C5544694(a4, (unint64_t *)&v274, 0);
                v171 = v170;
                GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9, (uint64_t)v65, "", 0);
                LODWORD(v292) = GenericVirtualRegister;
                LODWORD(v293) = 1;
                LODWORD(v274) = 32;
                LODWORD(v276) = 2;
                v277 = v265;
                v278 = v264;
                LODWORD(v279) = 1;
                v280 = v259;
                v281 = v171;
                v282 = 1;
                v283 = v265;
                v284 = v264;
                v285 = 1;
                v286 = v261;
                v287 = v260;
                v288 = 1;
                (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 51, &v292, 1, &v274, 5, 0);
                LODWORD(v292) = v64;
                LODWORD(v293) = 1;
                LODWORD(v274) = 40;
                LODWORD(v276) = 2;
                LODWORD(v277) = v262;
                LODWORD(v279) = 0;
                v280 = v259;
                v281 = v171;
                v282 = 1;
                LODWORD(v283) = GenericVirtualRegister;
                v285 = 0;
                v286 = (uint64_t)v265;
                v287 = v264;
                v288 = 1;
                (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 51, &v292, 1, &v274, 5, 0);
              }
              else
              {
                v174 = sub_1C55437B8((_QWORD *)a4, 0x41u);
                v175 = (unint64_t *)v173;
                v176 = *(unint64_t **)(a4 + 48);
                v177 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 40);
                *(_QWORD *)(v173 + 24) = v177;
                v178 = *(_QWORD *)(v177 + 32);
                v179 = *(unsigned int *)(v173 + 40);
                if ((_DWORD)v179)
                {
                  v219 = *(_QWORD *)(v173 + 32);
                  v220 = *(_QWORD *)(v178 + 40);
                  v221 = 32 * v179;
                  do
                  {
                    if (!*(_BYTE *)v219)
                    {
                      v222 = *(unsigned int *)(v219 + 4);
                      if ((int)v222 >= 0)
                        v223 = (uint64_t *)(*(_QWORD *)(v220 + 272) + 8 * v222);
                      else
                        v223 = (uint64_t *)(*(_QWORD *)(v220 + 24) + 16 * (v222 & 0x7FFFFFFF) + 8);
                      v224 = *v223;
                      if (*v223)
                      {
                        v225 = *(_QWORD *)(v224 + 16);
                        *(_QWORD *)(v224 + 16) = v219;
                        *(_QWORD *)(v219 + 16) = v225;
                        if ((*(_BYTE *)(v219 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v219 + 24) = v224;
                        }
                        else
                        {
                          *(_QWORD *)(v219 + 24) = 0;
                          v223 = (uint64_t *)(v225 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v219 + 16) = v219;
                        *(_QWORD *)(v219 + 24) = 0;
                      }
                      *v223 = v219;
                    }
                    v219 += 32;
                    v221 -= 32;
                  }
                  while (v221);
                }
                v180 = *(_QWORD *)(v178 + 728);
                if (v180)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v180 + 24))(v180, v173);
                v181 = *v176 & 0xFFFFFFFFFFFFFFF8;
                *v175 = v181 | *v175 & 7;
                v175[1] = (unint64_t)v176;
                *(_QWORD *)(v181 + 8) = v175;
                *v176 = *v176 & 7 | (unint64_t)v175;
                v182 = *(_QWORD *)(a4 + 56);
                if (v182)
                  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v182 + 24))(v182, v175);
                v275 = 0;
                v276 = 0;
                v277 = 0;
                LODWORD(v274) = 0x1000000;
                HIDWORD(v274) = v64;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v175, v174, (const llvm::MachineOperand *)&v274);
                v275 = 0;
                v276 = 0;
                LODWORD(v274) = 0;
                HIDWORD(v274) = v136;
                v277 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v175, v174, (const llvm::MachineOperand *)&v274);
                v183 = *(_DWORD *)(*(_QWORD *)(v162 + 32) + 4);
                v275 = 0;
                v276 = 0;
                LODWORD(v274) = 0;
                HIDWORD(v274) = v183;
                v277 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v175, v174, (const llvm::MachineOperand *)&v274);
              }
              v184 = a3;
              if ((*(_BYTE *)a3 & 4) == 0)
              {
                v184 = a3;
                if ((*(_WORD *)(a3 + 44) & 8) != 0)
                {
                  v184 = a3;
                  do
                    v184 = *(_QWORD *)(v184 + 8);
                  while ((*(_WORD *)(v184 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v184 + 8));
              v130 = 1;
LABEL_268:
              if (v55 < 0x41 || !v132)
                goto LABEL_271;
              goto LABEL_270;
            }
            v54 = (void (**)(void **))((char *)*v277 + 40);
          }
          (*v54)(v53);
          goto LABEL_70;
        }
        v52 = (void (**)(uint64_t *))(*v296 + 40);
      }
      (*v52)(v51);
      goto LABEL_67;
    }
    if (v10 != 77)
    {
      if (v10 == 79)
        return sub_1C54F6ACC((uint64_t *)v273, (llvm::MachineInstr *)a3);
      if (v10 != 90)
        return sub_1C4AEB310(v273, a3);
      v29 = *(_QWORD *)(a3 + 32);
      v30 = *(_DWORD *)(v29 + 4);
      if ((v30 & 0x80000000) == 0 || (v30 & 0x7FFFFFFFu) >= *(_DWORD *)(v9 + 432))
        return sub_1C4AEB310(v273, a3);
      v31 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v30 & 0x7FFFFFFF));
      if ((v31 & 0xFFFFFFFFFFFFFFF9) == 0
        || (*(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v30 & 0x7FFFFFFF)) & 6) != 2)
      {
        return sub_1C4AEB310(v273, a3);
      }
      v33 = 35;
      if ((v31 & 4) == 0)
        v33 = 19;
      if (((v31 >> v33) & 0xFFFFFF) != 3)
        return sub_1C4AEB310(v273, a3);
      v34 = *(_DWORD *)(v29 + 36);
      v35 = *(_QWORD *)(a3 + 48);
      if ((v35 & 7) != 0)
      {
        v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v36 = v35 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a3 + 48) = v35 & 0xFFFFFFFFFFFFFFF8;
      }
      MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32), v36, 0, 257);
      v292 = 257;
      LODWORD(v293) = 0;
      LODWORD(v274) = v34;
      LODWORD(v276) = 0;
      v217 = sub_1C55464EC((_QWORD *)a4, 0x5Au, (int *)&v292, (int *)&v274, MachineMemOperand);
      LODWORD(v292) = v30;
      LODWORD(v293) = 1;
      v274 = v217;
      v275 = (uint64_t)v218;
      LODWORD(v276) = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 81, &v292, 1, &v274, 1, 0);
      v48 = *(_QWORD *)(a3 + 24);
      v49 = a3;
      if ((*(_BYTE *)a3 & 4) == 0)
      {
        v49 = a3;
        if ((*(_WORD *)(a3 + 44) & 8) != 0)
        {
          v49 = a3;
          do
            v49 = *(_QWORD *)(v49 + 8);
          while ((*(_WORD *)(v49 + 44) & 8) != 0);
        }
      }
      goto LABEL_325;
    }
    v104 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
    if (v104 < 0 && (v105 = v104 & 0x7FFFFFFF, v105 < *(_DWORD *)(v9 + 432)))
    {
      v106 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v105);
      v271 = v106;
      if ((v106 & 2) != 0)
      {
        v107 = 0;
LABEL_164:
        v117 = sub_1C4825F50(&v271);
        if ((_DWORD)v116 == 1)
        {
          if (!v107)
            return sub_1C4AEB310(v273, a3);
        }
        else if (!v107)
        {
          return sub_1C4AEB310(v273, a3);
        }
        if (v117 - 16 > 0x30 || ((1 << (v117 - 16)) & 0x1000000010001) == 0)
          return sub_1C4AEB310(v273, a3);
        v263 = v117;
        v274 = &v276;
        v275 = 0x800000000;
        if (*(_DWORD *)(a3 + 40) < 2u)
        {
LABEL_201:
          v138 = v275;
          v139 = v271;
          v140 = 0x800000000000000;
          if ((v271 & 2) == 0)
            v140 = 0x8000000000000;
          if ((v140 & v271) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v116);
            v139 = v271;
          }
          v141 = (unsigned __int16)(v139 >> 3);
          if (v141 == v138)
          {
            v142 = 0;
            v143 = 0;
            v144 = 0;
            while (1)
            {
              if ((v139 & 2) != 0)
                v145 = 0x800000000000000;
              else
                v145 = 0x8000000000000;
              if ((v145 & v139) != 0)
              {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v116);
                v139 = v271;
              }
              if (v143 >= (unsigned __int16)(v139 >> 3))
                break;
              v144 |= (unint64_t)*((unsigned __int8 *)v274 + v142) << v142;
              v142 += 8;
              ++v143;
            }
            v292 = (8 * v263) | 1;
            LODWORD(v293) = 0;
            v153 = sub_1C5544694(a4, (unint64_t *)&v292, v144);
            LODWORD(v289) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
            LODWORD(v290) = 1;
            v292 = v153;
            v293 = v154;
            v294 = 1;
            sub_1C5546EF4((uint64_t *)a4, (uint64_t *)&v289, (int *)&v292);
            v155 = a3;
            if ((*(_BYTE *)a3 & 4) == 0)
            {
              v155 = a3;
              if ((*(_WORD *)(a3 + 44) & 8) != 0)
              {
                v155 = a3;
                do
                  v155 = *(_QWORD *)(v155 + 8);
                while ((*(_WORD *)(v155 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v155 + 8));
          }
          if (v274 != &v276)
            free(v274);
          if (v141 == v138)
            return 1;
          return sub_1C4AEB310(v273, a3);
        }
        v118 = 1;
        v119 = 36;
        while (1)
        {
          v120 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + v119);
          v292 = (uint64_t)&off_1E816EFF0;
          v293 = (unint64_t *)sub_1C554C894;
          v296 = (unint64_t *)&v292;
          v289 = &off_1E816F038;
          v290 = sub_1C554C8B0;
          v291 = (int8x8_t *)&v289;
          sub_1C554C3AC(v120, v9, (uint64_t)&v292, (uint64_t)&v289, 0, 0, &v267);
          v121 = (uint64_t (***)())v291;
          if (v291 == (int8x8_t *)&v289)
            break;
          if (v291)
          {
            v122 = (void (**)(uint64_t (***)()))(*(_QWORD *)v291 + 40);
            goto LABEL_172;
          }
LABEL_173:
          v123 = (uint64_t *)v296;
          if (v296 == (unint64_t *)&v292)
          {
            v124 = (void (**)(uint64_t *))(v292 + 32);
            v123 = &v292;
LABEL_175:
            (*v124)(v123);
            goto LABEL_176;
          }
          if (v296)
          {
            v124 = (void (**)(uint64_t *))(*v296 + 40);
            goto LABEL_175;
          }
LABEL_176:
          if (v269)
          {
            v125 = v268;
            v126 = v267;
            if (v268 > 0x40)
              v127 = *(_QWORD *)v267;
            else
              v127 = v267 << -(char)v268 >> -(char)v268;
            v128 = v275;
            if (v275 >= (unint64_t)HIDWORD(v275))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v274, (uint64_t)&v276, v275 + 1, 8);
              v128 = v275;
            }
            *((_QWORD *)v274 + v128) = v127;
            LODWORD(v275) = v275 + 1;
            if (v125 >= 0x41 && v126)
              MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
            ++v118;
            v119 += 32;
            if (v118 < *(unsigned int *)(a3 + 40))
              continue;
          }
          goto LABEL_201;
        }
        v122 = (void (**)(uint64_t (***)()))(v289 + 4);
        v121 = &v289;
LABEL_172:
        (*v122)(v121);
        goto LABEL_173;
      }
    }
    else
    {
      v106 = 0;
      v271 = 0;
    }
    v115 = 3;
    if ((v106 & 1) == 0)
      v115 = 19;
    v107 = (v106 & 0x8000000000000000 | (8 * (v106 >> v115))) == 64;
    goto LABEL_164;
  }
  if (**(unsigned __int16 **)(a3 + 16) <= 0xB3u)
  {
    if (**(unsigned __int16 **)(a3 + 16) > 0x87u)
    {
      if (v10 == 136)
      {
        v96 = *(_DWORD **)(a3 + 32);
        v97 = v96[1];
        if ((v97 & 0x80000000) == 0)
          return sub_1C4AEB310(v273, a3);
        v98 = v97 & 0x7FFFFFFF;
        if (v98 >= *(_DWORD *)(v9 + 432))
          return sub_1C4AEB310(v273, a3);
        if (*(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v98) != 9)
          return sub_1C4AEB310(v273, a3);
        v99 = v96[9];
        v100 = v96[17];
        v101 = v96[25];
        v102 = sub_1C554C050(v100, v9);
        if (v99 != v100 && (!v103 || !v102))
          return sub_1C4AEB310(v273, a3);
        LODWORD(v292) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
        LODWORD(v293) = 1;
        LODWORD(v274) = v99;
        LODWORD(v276) = 0;
        LODWORD(v277) = v101;
        LODWORD(v279) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 66, &v292, 1, &v274, 2, 0);
        v48 = *(_QWORD *)(a3 + 24);
        v49 = a3;
        if ((*(_BYTE *)a3 & 4) == 0)
        {
          v49 = a3;
          if ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            v49 = a3;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
        }
      }
      else
      {
        if (v10 != 168)
          return sub_1C4AEB310(v273, a3);
        v37 = *(_DWORD **)(a3 + 32);
        LODWORD(v289) = v37[1];
        v38 = v37[9];
        if ((int)v38 >= 0)
          v39 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v38);
        else
          v39 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
        v40 = *v39;
        if ((*(_BYTE *)(v40 + 3) & 1) == 0)
          v40 = *(_QWORD *)(v40 + 24);
        v41 = *(_QWORD *)(v40 + 8);
        if (**(_WORD **)(v41 + 16) != 121)
          return sub_1C4AEB310(v273, a3);
        v42 = *(_QWORD *)(*(_QWORD *)(v41 + 32) + 48);
        if (!v42)
          return sub_1C4AEB310(v273, a3);
        v43 = v37[17];
        LODWORD(v275) = 64;
        v274 = (void *)0x3FF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v292, (const llvm::APInt **)&v274);
        v275 = v292;
        v276 = v293;
        LODWORD(v277) = v294;
        BYTE4(v277) = v295 & 0xF;
        llvm::APFloat::convert((uint64_t)&v274, *(void **)(v42 + 32), 1, &v292);
        v44 = sub_1C47ECB98(v42 + 24, (uint64_t)&v274);
        if ((_UNKNOWN *)v275 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v276);
        }
        else if ((*(_DWORD *)(v275 + 8) - 64) <= 0xFFFFFF7F && v276)
        {
          MEMORY[0x1CAA32F9C](v276, 0x1000C8000313F17);
        }
        if (!v44)
          return sub_1C4AEB310(v273, a3);
        v45 = sub_1C5547D24((_QWORD *)a4, 253, (int *)&v289, 1, 0);
        v47 = v46;
        v275 = 0;
        v276 = 0;
        LODWORD(v274) = 0;
        HIDWORD(v274) = v43;
        v277 = 0;
        llvm::MachineInstr::addOperand(v46, v45, (const llvm::MachineOperand *)&v274);
        *((_WORD *)v47 + 22) = *((_WORD *)v47 + 22) & 0xC | *(_WORD *)(a3 + 44) & 0xFFF3;
        v48 = *(_QWORD *)(a3 + 24);
        v49 = a3;
        if ((*(_BYTE *)a3 & 4) == 0)
        {
          v49 = a3;
          if ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            v49 = a3;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
        }
      }
      goto LABEL_325;
    }
    if (v10 != 116)
    {
      if (v10 == 126)
      {
        v11 = *(_QWORD *)(a3 + 32);
        v12 = *(_DWORD *)(v11 + 4);
        if (v12 < 0)
        {
          v13 = *(unsigned int *)(v9 + 432);
          if ((v12 & 0x7FFFFFFFu) < v13)
          {
            v14 = *(_QWORD *)(v9 + 424);
            if (*(_QWORD *)(v14 + 8 * (v12 & 0x7FFFFFFF)) == 513)
            {
              v15 = *(unsigned int *)(v11 + 36);
              v16 = (uint64_t *)((v15 & 0x80000000) != 0
                              ? *(_QWORD *)(v9 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v9 + 272) + 8 * v15);
              v215 = *v16;
              if (v215)
              {
                if ((*(_BYTE *)(v215 + 3) & 1) != 0
                  || (v215 = *(_QWORD *)(v215 + 24)) != 0 && (*(_BYTE *)(v215 + 3) & 1) != 0)
                {
                  v229 = *(_QWORD *)(v215 + 8);
                  if (v229)
                  {
                    if (**(_WORD **)(v229 + 16) == 119 && *(_DWORD *)(v229 + 40) == 2)
                    {
                      v230 = *(_DWORD *)(*(_QWORD *)(v229 + 32) + 36);
                      if ((v15 & 0x80000000) != 0 && (v231 = v15 & 0x7FFFFFFF, v231 < v13))
                        v232 = *(_QWORD *)(v14 + 8 * v231);
                      else
                        v232 = 0;
                      v271 = v232;
                      if (v230 < 0 && (v230 & 0x7FFFFFFFu) < v13)
                        v237 = *(_QWORD *)(v14 + 8 * (v230 & 0x7FFFFFFF));
                      else
                        v237 = 0;
                      v239 = sub_1C4825F50(&v271);
                      if ((_DWORD)v238 == 1)
                      LODWORD(v290) = v239;
                      if (v239 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v289, -1, 1);
                        v239 = v290;
                        v240 = v289;
                      }
                      else
                      {
                        if (v239)
                          v240 = (uint64_t (**)())(0xFFFFFFFFFFFFFFFFLL >> -(char)v239);
                        else
                          v240 = 0;
                        v289 = v240;
                      }
                      v267 = v237;
                      v268 = 0;
                      v241 = (uint64_t *)&v289;
                      if (v239 >= 0x41)
                        v241 = (uint64_t *)v240;
                      v242 = sub_1C5544694(a4, (unint64_t *)&v267, *v241);
                      v292 = v237;
                      LODWORD(v293) = 0;
                      LODWORD(v274) = v230;
                      LODWORD(v276) = 0;
                      v277 = (void **)v242;
                      v278 = v243;
                      LODWORD(v279) = 1;
                      v244 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 65, &v292, 1, &v274, 2, 0);
                      LODWORD(v292) = v12;
                      LODWORD(v293) = 1;
                      v274 = v244;
                      v275 = (uint64_t)v245;
                      LODWORD(v276) = 1;
                      sub_1C5546B4C((uint64_t *)a4, 126, (unint64_t *)&v292, (int *)&v274);
                      v246 = a3;
                      if ((*(_BYTE *)a3 & 4) == 0)
                      {
                        v246 = a3;
                        if ((*(_WORD *)(a3 + 44) & 8) != 0)
                        {
                          v246 = a3;
                          do
                            v246 = *(_QWORD *)(v246 + 8);
                          while ((*(_WORD *)(v246 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v246 + 8));
                      if (v239 >= 0x41)
                      {
                        if (v240)
                          MEMORY[0x1CAA32F9C](v240, 0x1000C8000313F17);
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return sub_1C4AEB310(v273, a3);
    }
    v83 = *(unsigned int *)(a3 + 40);
    v84 = *(_QWORD *)(a3 + 32);
    if ((_DWORD)v83)
    {
      v85 = 0;
      v86 = *(unsigned __int8 **)(a3 + 32);
      while (1)
      {
        v87 = *v86;
        v86 += 32;
        if (v87 == 17)
          break;
        if (v83 == ++v85)
          goto LABEL_115;
      }
    }
    else
    {
LABEL_115:
      LODWORD(v85) = -1;
    }
    v88 = *(_DWORD *)(v84 + 32 * v85 + 16);
    if (v88 == 2744)
    {
      v146 = *(unsigned int *)(v84 + 32 * (v85 + 1) + 4);
      if ((v146 & 0x80000000) != 0)
        v147 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
      else
        v147 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v146);
      v156 = *v147;
      if (!v156)
        return sub_1C4AEB310(v273, a3);
      v157 = *(unsigned int *)(v84 + 32 * (v85 + 2) + 4);
      if ((*(_BYTE *)(v156 + 3) & 1) == 0)
      {
        v156 = *(_QWORD *)(v156 + 24);
        if (!v156 || (*(_BYTE *)(v156 + 3) & 1) == 0)
          return sub_1C4AEB310(v273, a3);
      }
      v158 = *(_QWORD *)(v156 + 8);
      if (!v158 || **(_WORD **)(v158 + 16) != 119 || *(_DWORD *)(v158 + 40) != 2)
        return sub_1C4AEB310(v273, a3);
      v159 = (uint64_t *)((v157 & 0x80000000) != 0
                       ? *(_QWORD *)(v9 + 24) + 16 * (v157 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v9 + 272) + 8 * v157);
      v233 = *v159;
      if (!v233)
        return sub_1C4AEB310(v273, a3);
      v234 = *(unsigned int *)(*(_QWORD *)(v158 + 32) + 36);
      if ((*(_BYTE *)(v233 + 3) & 1) == 0)
      {
        v233 = *(_QWORD *)(v233 + 24);
        if (!v233 || (*(_BYTE *)(v233 + 3) & 1) == 0)
          return sub_1C4AEB310(v273, a3);
      }
      v235 = *(_QWORD *)(v233 + 8);
      if (!v235 || **(_WORD **)(v235 + 16) != 119 || *(_DWORD *)(v235 + 40) != 2)
        return sub_1C4AEB310(v273, a3);
      if ((v234 & 0x80000000) != 0)
        v236 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v234 & 0x7FFFFFFF) + 8);
      else
        v236 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v234);
      v247 = *v236;
      if ((*(_BYTE *)(v247 + 3) & 1) == 0)
        v247 = *(_QWORD *)(v247 + 24);
      v248 = *(_QWORD *)(v247 + 8);
      if ((**(_WORD **)(v248 + 16) & 0xFFFE) != 0x74)
        return sub_1C4AEB310(v273, a3);
      v249 = *(unsigned int *)(v248 + 40);
      if (!(_DWORD)v249)
        return sub_1C4AEB310(v273, a3);
      v250 = *(unsigned int *)(*(_QWORD *)(v235 + 32) + 36);
      for (i = (_DWORD *)(*(_QWORD *)(v248 + 32) + 16); *((_BYTE *)i - 16) != 17; i += 8)
      {
        if (!--v249)
          return sub_1C4AEB310(v273, a3);
      }
      if (*i != 2140)
        return sub_1C4AEB310(v273, a3);
      if ((v250 & 0x80000000) != 0)
        v252 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v250 & 0x7FFFFFFF) + 8);
      else
        v252 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v250);
      v253 = *v252;
      if ((*(_BYTE *)(v253 + 3) & 1) == 0)
        v253 = *(_QWORD *)(v253 + 24);
      v254 = *(_QWORD *)(v253 + 8);
      if ((**(_WORD **)(v254 + 16) & 0xFFFE) != 0x74)
        return sub_1C4AEB310(v273, a3);
      v255 = *(unsigned int *)(v254 + 40);
      if (!(_DWORD)v255)
        return sub_1C4AEB310(v273, a3);
      for (j = (_DWORD *)(*(_QWORD *)(v254 + 32) + 16); *((_BYTE *)j - 16) != 17; j += 8)
      {
        if (!--v255)
          return sub_1C4AEB310(v273, a3);
      }
      if (*j != 2544)
        return sub_1C4AEB310(v273, a3);
      v292 = 129;
      LODWORD(v293) = 0;
      v274 = (void *)7;
      LODWORD(v276) = 3;
      v257 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 314, &v292, 1, &v274, 1, 0);
      LODWORD(v292) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
      LODWORD(v293) = 1;
      v274 = v257;
      v275 = (uint64_t)v258;
      LODWORD(v276) = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, 267, &v292, 1, &v274, 1, 0);
      v48 = *(_QWORD *)(a3 + 24);
      v49 = a3;
      if ((*(_BYTE *)a3 & 4) == 0)
      {
        v49 = a3;
        if ((*(_WORD *)(a3 + 44) & 8) != 0)
        {
          v49 = a3;
          do
            v49 = *(_QWORD *)(v49 + 8);
          while ((*(_WORD *)(v49 + 44) & 8) != 0);
        }
      }
      goto LABEL_325;
    }
    if (v88 != 2755)
      return sub_1C4AEB310(v273, a3);
    v89 = *(_DWORD *)(v84 + 68);
    v274 = &off_1E816EFF0;
    v275 = (uint64_t)sub_1C554C7E0;
    v277 = &v274;
    v292 = (uint64_t)&off_1E816F038;
    v293 = (unint64_t *)sub_1C554C7F8;
    v296 = (unint64_t *)&v292;
    sub_1C554C3AC(v89, v9, (uint64_t)&v274, (uint64_t)&v292, 0, 0, &v289);
    v90 = (uint64_t *)v296;
    if (v296 == (unint64_t *)&v292)
    {
      v91 = (void (**)(uint64_t *))(v292 + 32);
      v90 = &v292;
    }
    else
    {
      if (!v296)
      {
LABEL_121:
        v92 = v277;
        if (v277 == &v274)
        {
          v93 = (void (**)(void **))((char *)v274 + 32);
          v92 = &v274;
        }
        else
        {
          if (!v277)
            goto LABEL_124;
          v93 = (void (**)(void **))((char *)*v277 + 40);
        }
        (*v93)(v92);
LABEL_124:
        if (v290 >= 0x41)
        {
          v226 = (((unint64_t)v290 + 63) >> 3) & 0x3FFFFFF8;
          v227 = (uint64_t *)operator new[]();
          v228 = v289;
          memcpy(v227, v289, v226);
          if (v228)
            MEMORY[0x1CAA32F9C](v228, 0x1000C8000313F17);
          v94 = *v227;
          MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
        }
        else
        {
          v94 = (uint64_t)v289;
        }
        FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 56), v94, 16, 1, 1);
        LODWORD(v274) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
        LODWORD(v275) = 1;
        sub_1C5543FA8((_QWORD *)a4, (int *)&v274, FixedObject);
        v48 = *(_QWORD *)(a3 + 24);
        v49 = a3;
        if ((*(_BYTE *)a3 & 4) == 0)
        {
          v49 = a3;
          if ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            v49 = a3;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
        }
LABEL_325:
        sub_1C487FE80(v48 + 40, a3, *(_QWORD *)(v49 + 8));
        return 1;
      }
      v91 = (void (**)(uint64_t *))(*v296 + 40);
    }
    (*v91)(v90);
    goto LABEL_121;
  }
  if (v10 - 180 >= 2)
  {
    if (v10 != 205)
    {
      if (v10 != 206)
        return sub_1C4AEB310(v273, a3);
      v24 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
      if (v24 < 0 && (v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(v9 + 432)))
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v25);
        v274 = (void *)v26;
        if ((v26 & 0xFFFFFFFFFFFFFFF9) != 0 && (v26 & 4) != 0)
        {
          if ((v26 & 1) != 0)
          {
            v28 = v26 >> 3;
          }
          else if ((v26 & 2) != 0)
          {
            v28 = (unsigned __int16)(v26 >> 19);
          }
          else
          {
            v28 = v26 >> 19;
          }
          goto LABEL_158;
        }
      }
      else
      {
        v274 = 0;
      }
      v28 = sub_1C4825F50((unint64_t *)&v274);
      if ((_DWORD)v114 == 1)
LABEL_158:
      if (!sub_1C4ADE560((_QWORD *)a4, a3, v28))
        return sub_1C54F6F7C((uint64_t *)v273, a3);
      return 1;
    }
    if (*(_DWORD *)(a3 + 40) != 3)
      return sub_1C4AEB310(v273, a3);
    v69 = *(_QWORD *)(v9 + 272);
    v70 = *(_QWORD *)(v9 + 24);
    v71 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 36);
    v72 = (uint64_t *)((int)v71 >= 0 ? v69 + 8 * v71 : v70 + 16 * (v71 & 0x7FFFFFFF) + 8);
    v73 = *v72;
    if (!v73)
      return sub_1C4AEB310(v273, a3);
    if ((*(_BYTE *)(v73 + 3) & 1) == 0)
    {
      v73 = *(_QWORD *)(v73 + 24);
      if (!v73 || (*(_BYTE *)(v73 + 3) & 1) == 0)
        return sub_1C4AEB310(v273, a3);
    }
    v74 = *(_QWORD *)(v73 + 8);
    if (!v74 || **(_WORD **)(v74 + 16) != 82 || *(_DWORD *)(v74 + 40) != 2)
      return sub_1C4AEB310(v273, a3);
    v75 = *(unsigned int *)(*(_QWORD *)(v74 + 32) + 36);
    v76 = v70 + 16 * (v75 & 0x7FFFFFFF) + 8;
    v77 = (uint64_t *)(v69 + 8 * v75);
    if ((int)v75 < 0)
      v77 = (uint64_t *)v76;
    v78 = *v77;
    if (!v78)
      return sub_1C4AEB310(v273, a3);
    if ((*(_BYTE *)(v78 + 3) & 1) == 0)
    {
      v78 = *(_QWORD *)(v78 + 24);
      if (!v78 || (*(_BYTE *)(v78 + 3) & 1) == 0)
        return sub_1C4AEB310(v273, a3);
    }
    v79 = *(_QWORD *)(v78 + 8);
    if (!v79 || **(_WORD **)(v79 + 16) != 206)
      return sub_1C4AEB310(v273, a3);
    if ((v75 & 0x80000000) != 0 && (v75 & 0x7FFFFFFF) < *(_DWORD *)(v9 + 432))
    {
      v80 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v75 & 0x7FFFFFFF));
      if ((v80 & 1) != 0)
      {
        v81 = v80 >> 3;
        goto LABEL_422;
      }
      if ((v80 & 4) != 0)
      {
        if ((v80 & 2) != 0)
          v81 = (unsigned __int16)(v80 >> 19);
        else
          v81 = v80 >> 19;
LABEL_422:
        if (!sub_1C4ADE560((_QWORD *)a4, a3, v81))
          return sub_1C4AEB310(v273, a3);
        return 1;
      }
    }
    else
    {
      v80 = 0;
    }
    v81 = (unsigned __int16)(v80 >> 3);
    goto LABEL_422;
  }
  v66 = *(_QWORD *)(a3 + 32);
  v67 = *(unsigned int *)(v66 + 36);
  if ((v67 & 0x80000000) != 0)
    v68 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
  else
    v68 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v67);
  v108 = *v68;
  if ((*(_BYTE *)(v108 + 3) & 1) == 0)
    v108 = *(_QWORD *)(v108 + 24);
  v109 = *(_QWORD *)(v108 + 8);
  if ((**(_WORD **)(v109 + 16) & 0xFFFE) == 0x74)
  {
    v110 = *(unsigned int *)(v109 + 40);
    if ((_DWORD)v110)
    {
      v111 = *(_QWORD *)(v109 + 32);
      v112 = (_DWORD *)(v111 + 16);
      v113 = v110;
      while (*((_BYTE *)v112 - 16) != 17)
      {
        v112 += 8;
        if (!--v113)
          goto LABEL_219;
      }
      if (*v112 == 2445)
      {
        v148 = 2665;
      }
      else
      {
LABEL_219:
        for (k = (_DWORD *)(v111 + 16); *((_BYTE *)k - 16) != 17; k += 8)
        {
          if (!--v110)
            return sub_1C4AEB310(v273, a3);
        }
        if (*k != 2446)
          return sub_1C4AEB310(v273, a3);
        v148 = 2666;
      }
      v150 = *(_DWORD *)(v66 + 4);
      LODWORD(v289) = v150;
      if (v150 < 0
        && (v150 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)
        && *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v150 & 0x7FFFFFFF)) == 257)
      {
        sub_1C5547D24((_QWORD *)a4, v148, (int *)&v289, 1, 0);
      }
      else
      {
        LODWORD(v267) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v9, 257, "", 0);
        v151 = sub_1C5547D24((_QWORD *)a4, v148, (int *)&v267, 1, 0);
        LODWORD(v292) = v150;
        LODWORD(v293) = 1;
        v274 = v151;
        v275 = (uint64_t)v152;
        LODWORD(v276) = 1;
        sub_1C5546B4C((uint64_t *)a4, 126, (unint64_t *)&v292, (int *)&v274);
      }
      v48 = *(_QWORD *)(a3 + 24);
      v49 = a3;
      if ((*(_BYTE *)a3 & 4) == 0)
      {
        v49 = a3;
        if ((*(_WORD *)(a3 + 44) & 8) != 0)
        {
          v49 = a3;
          do
            v49 = *(_QWORD *)(v49 + 8);
          while ((*(_WORD *)(v49 + 44) & 8) != 0);
        }
      }
      goto LABEL_325;
    }
  }
  return sub_1C4AEB310(v273, a3);
}

BOOL sub_1C4ADE560(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  const char *v12;
  unsigned int v13;
  BOOL v14;
  int v16;
  char *v17;
  int v18;
  int v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  char *v70;
  _DWORD v71[2];
  char v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  _DWORD v76[8];
  unint64_t v77;
  int v78;
  void *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (a3 != 8)
    return 0;
  v5 = a1[3];
  v6 = *(_QWORD *)(a2 + 32);
  if (**(_WORD **)(a2 + 16) == 206)
  {
    v7 = *(_QWORD *)(v6 + 120);
    if (v7)
    {
      v8 = *(_DWORD **)(v6 + 112);
      v9 = 4 * v7;
      while (*v8 != -1)
      {
        ++v8;
        v9 -= 4;
        if (!v9)
          goto LABEL_7;
      }
      return 0;
    }
  }
LABEL_7:
  v10 = *(_DWORD *)(v6 + 4);
  if ((v10 & 0x80000000) != 0 && (v10 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v5 + 432))
    v11 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * (v10 & 0x7FFFFFFF));
  else
    v11 = 0;
  v73 = v11;
  v13 = sub_1C4825F50(&v73);
  if ((_DWORD)v12 == 1)
  if ((v13 & 7) != 0)
    return 0;
  sub_1C4ADF278(v71, v5, v10, 0);
  if (!v72)
    return 0;
  v16 = v71[0];
  if ((v71[0] & 0x80000000) != 0 && (v71[0] & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432))
    v17 = *(char **)(*(_QWORD *)(v5 + 424) + 8 * (v71[0] & 0x7FFFFFFF));
  else
    v17 = 0;
  v18 = v71[1];
  v19 = v13 >> 3;
  v70 = v17;
  v21 = sub_1C4825F50((unint64_t *)&v70);
  if ((_DWORD)v20 == 1)
  v22 = v21 >> 3;
  if (v19 % (int)v22)
  {
    if ((int)v22 % v19)
      return 0;
  }
  if (v19 >= (int)v22 && v18 || v19 < (int)v22 && v18 % v19)
    return 0;
  v64 = v18;
  v67 = v5;
  v65 = v16;
  v74 = v76;
  v76[0] = v16;
  v75 = 0x800000001;
  if (v13 >= 0x10)
  {
    v14 = 0;
    if (v19 <= 2)
      v26 = 2;
    else
      v26 = v13 >> 3;
    v66 = v26;
    v27 = 1;
    while (1)
    {
      sub_1C4ADF278(&v79, v67, v10, v27);
      if (!(_BYTE)v80)
        goto LABEL_103;
      v28 = (int)v79;
      if ((v79 & 0x80000000) != 0 && (v79 & 0x7FFFFFFF) < *(_DWORD *)(v67 + 432))
        v29 = *(char **)(*(_QWORD *)(v67 + 424) + 8 * (v79 & 0x7FFFFFFF));
      else
        v29 = 0;
      if (v29 != v70
        || v19 >= (int)v22 && HIDWORD(v79) != (int)v27 % (int)v22
        || v19 < (int)v22 && (_DWORD)v27 != SHIDWORD(v79) % v19)
      {
        goto LABEL_103;
      }
      if ((int)v27 % (int)v22)
      {
        v23 = v75;
        if ((_DWORD)v79 != *((_DWORD *)v74 + v75 - 1))
          goto LABEL_103;
      }
      else
      {
        v30 = v75;
        if (v75 >= (unint64_t)HIDWORD(v75))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v75 + 1, 4);
          v30 = v75;
        }
        *((_DWORD *)v74 + v30) = v28;
        v23 = v75 + 1;
        LODWORD(v75) = v75 + 1;
      }
      v27 = (v27 + 1);
      v14 = v27 >= v19;
      if (v66 == (_DWORD)v27)
        goto LABEL_31;
    }
  }
  v23 = 1;
LABEL_31:
  if (v19 == (_DWORD)v22)
  {
    v24 = v67;
    v25 = v65;
    goto LABEL_93;
  }
  v31 = v65;
  if (v19 <= (int)v22)
  {
    v43 = sub_1C4953AD0(v22 / v19, (8 * v13) | 1);
    if (v65 < 0)
    {
      v24 = v67;
      v45 = v64;
      if ((v65 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v67 + 432))
        v44 = 0;
      else
        v44 = *(_QWORD *)(*(_QWORD *)(v67 + 424) + 8 * (v65 & 0x7FFFFFFF));
    }
    else
    {
      v44 = 0;
      v24 = v67;
      v45 = v64;
    }
    if (v44 != v43)
    {
      v77 = v43;
      v78 = 0;
      LODWORD(v79) = v65;
      v81 = 0;
      (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a1 + 32))(a1, 82, &v77, 1, &v79, 1, 0);
      v31 = *(_DWORD *)(*(_QWORD *)(v55 + 32) + 4);
    }
    v77 = (8 * v13) | 1;
    v78 = 0;
    v68 = 257;
    v69 = 0;
    v56 = sub_1C5544694((uint64_t)a1, &v68, v45 / v19);
    LODWORD(v79) = v31;
    v81 = 0;
    v82 = v56;
    v83 = v57;
    v84 = 1;
    (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a1 + 32))(a1, 205, &v77, 1, &v79, 2, 0);
    v59 = *(_QWORD *)(v58 + 32);
    goto LABEL_92;
  }
  v32 = v70;
  if (((unint64_t)v70 & 0xFFFFFFFFFFFFFFF9) != 0 && (v70 & 4) != 0)
  {
    v33 = 0x800000000000000;
    if ((v70 & 2) == 0)
      v33 = 0x8000000000000;
    if ((v33 & (unint64_t)v70) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v70);
      v32 = v70;
    }
    v34 = (unsigned __int16)(v32 >> 3) * v23;
    v35 = 3;
    if ((v32 & 1) == 0)
      v35 = 19;
    v36 = (unint64_t)v32 & 0x8000000000000000 | (8 * ((unint64_t)v32 >> v35)) | 1;
    v37 = 35;
    v38 = 19;
    if ((v32 & 4) == 0)
      v37 = 19;
    v39 = (unint64_t)v32 >> v37;
    if ((v32 & 4) == 0)
      v38 = 3;
    if ((v32 & 1) != 0)
      v38 = 3;
    v40 = (8 * (unsigned __int16)((unint64_t)v32 >> v38)) & 0xFFFFF8000007FFFFLL | ((v39 & 0xFFFFFF) << 19);
    if ((v32 & 2) != 0)
      v41 = v40 | 2;
    else
      v41 = v36;
    v79 = (void *)sub_1C4953AD0(v34, v41);
    LODWORD(v80) = 0;
    sub_1C5547BE0((uint64_t)a1, (uint64_t)&v79, (int *)v74, v75);
    v25 = *(_DWORD *)(*(_QWORD *)(v42 + 32) + 4);
    v24 = v67;
    goto LABEL_93;
  }
  v77 = sub_1C4953AD0(v23, (unint64_t)v70);
  v78 = 0;
  v46 = (int *)v74;
  v47 = v75;
  v79 = &v81;
  v80 = 0x800000000;
  if (v75 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, (uint64_t)&v81, v75, 24);
    v48 = v80;
    v49 = (int *)v79;
    v24 = v67;
LABEL_79:
    v50 = 6 * v48;
    v51 = 4 * v47;
    do
    {
      v52 = *v46++;
      v53 = &v49[v50];
      *v53 = v52;
      v53[4] = 0;
      v50 += 6;
      v51 -= 4;
    }
    while (v51);
    v54 = v80;
    goto LABEL_89;
  }
  v24 = v67;
  if ((_DWORD)v75)
  {
    v48 = 0;
    v49 = &v81;
    goto LABEL_79;
  }
  v54 = 0;
  v49 = &v81;
LABEL_89:
  LODWORD(v80) = v54 + v47;
  (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, int *))(*a1 + 32))(a1, 77, &v77, 1, v49);
  v61 = v60;
  if (v79 != &v81)
    free(v79);
  v59 = *(_QWORD *)(v61 + 32);
LABEL_92:
  v25 = *(_DWORD *)(v59 + 4);
LABEL_93:
  if (v25 < 0 && (v25 & 0x7FFFFFFFu) < *(_DWORD *)(v24 + 432))
    v62 = *(_QWORD *)(*(_QWORD *)(v24 + 424) + 8 * (v25 & 0x7FFFFFFF));
  else
    v62 = 0;
  LODWORD(v77) = v10;
  v78 = 1;
  LODWORD(v79) = v25;
  v81 = 0;
  if (v62 == v73)
    (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a1 + 32))(a1, 19, &v77, 1, &v79, 1, 0);
  else
    (*(void (**)(_QWORD *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a1 + 32))(a1, 82, &v77, 1, &v79, 1, 0);
  v63 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v63 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v63 = a2;
      do
        v63 = *(_QWORD *)(v63 + 8);
      while ((*(_WORD *)(v63 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v63 + 8));
  v14 = 1;
LABEL_103:
  if (v74 != v76)
    free(v74);
  return v14;
}

uint64_t sub_1C4ADEC50(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unint64_t v88;
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = **(unsigned int **)(a1 + 16);
  if ((v6 & 0x80000000) != 0)
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  else
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v6);
  v8 = *v7;
  if (!v8)
    goto LABEL_5;
  v13 = a3;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = a4;
  v16 = a2;
  v17 = a1;
  v18 = *(uint64_t **)a1;
  v19 = *v5;
  if ((*(_BYTE *)(v8 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v8 = *(_QWORD *)(v8 + 24);
    v4 = *(_QWORD *)(a1 + 8);
    if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
      goto LABEL_5;
  }
  v34 = *(_QWORD *)(v8 + 8);
  if (v34 && **(_WORD **)(v34 + 16) == 65 && *(_DWORD *)(v34 + 40) == 3)
  {
    v35 = *(_QWORD *)(v34 + 32);
    v28 = *(_DWORD *)(v35 + 36);
    v36 = sub_1C554C050(*(_DWORD *)(v35 + 68), v4);
    if (v37)
    {
      v38 = v36;
    }
    else
    {
      v38 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v34 + 32) + 36), v14);
      v4 = v14;
      v53 = v52 == 0;
      a1 = v17;
      a2 = v16;
      a4 = v15;
      a3 = v13;
      v5 = v18;
      if (v53)
        goto LABEL_5;
      v28 = *(_DWORD *)(*(_QWORD *)(v34 + 32) + 68);
    }
    a2 = v16;
    if (v19 != v16)
      v38 = (unsigned __int16)v38;
    a3 = v13;
    a1 = v17;
    a4 = v15;
    v4 = v14;
    v5 = v18;
    if (v38 == v13)
    {
      v39 = **(unsigned int **)(v17 + 24);
      v40 = (uint64_t *)((v39 & 0x80000000) != 0
                      ? *(_QWORD *)(v14 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v14 + 272) + 8 * v39);
      v50 = *v40;
      a1 = v17;
      a2 = v16;
      a4 = v15;
      v4 = v14;
      a3 = v13;
      v5 = v18;
      if (v50)
      {
        v51 = *v18;
        if ((*(_BYTE *)(v50 + 3) & 1) != 0)
        {
          a1 = v17;
          a2 = v16;
          a4 = v15;
          v4 = v14;
          a3 = v13;
          v5 = v18;
        }
        else
        {
          v50 = *(_QWORD *)(v50 + 24);
          a1 = v17;
          a2 = v16;
          a4 = v15;
          v4 = v14;
          a3 = v13;
          v5 = v18;
          if (!v50 || (*(_BYTE *)(v50 + 3) & 1) == 0)
            goto LABEL_5;
        }
        v55 = *(_QWORD *)(v50 + 8);
        if (v55)
        {
          if (**(_WORD **)(v55 + 16) == 65 && *(_DWORD *)(v55 + 40) == 3)
          {
            v56 = *(_QWORD *)(v55 + 32);
            v45 = *(_DWORD *)(v56 + 36);
            v57 = sub_1C554C050(*(_DWORD *)(v56 + 68), v4);
            if (v58)
            {
              v59 = v57;
            }
            else
            {
              v59 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v55 + 32) + 36), v14);
              v4 = v14;
              v53 = v60 == 0;
              a1 = v17;
              a2 = v16;
              a4 = v15;
              a3 = v13;
              v5 = v18;
              if (v53)
                goto LABEL_5;
              v45 = *(_DWORD *)(*(_QWORD *)(v55 + 32) + 68);
            }
            a2 = v16;
            if (v51 != v16)
              v59 = (unsigned __int16)v59;
            a4 = v15;
            a1 = v17;
            v4 = v14;
            a3 = v13;
            v5 = v18;
            if (v59 == v15)
              goto LABEL_73;
          }
        }
      }
    }
  }
LABEL_5:
  v9 = **(unsigned int **)(a1 + 24);
  if ((v9 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v9);
  v11 = *v10;
  if (!v11)
    return 0;
  v20 = a3;
  v76 = v4;
  v21 = a4;
  v22 = a2;
  v23 = a1;
  v24 = v5;
  v25 = *v5;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11 || (*(_BYTE *)(v11 + 3) & 1) == 0)
      return 0;
  }
  v26 = *(_QWORD *)(v11 + 8);
  if (!v26 || **(_WORD **)(v26 + 16) != 65 || *(_DWORD *)(v26 + 40) != 3)
    return 0;
  v27 = *(_QWORD *)(v26 + 32);
  v28 = *(_DWORD *)(v27 + 36);
  v29 = sub_1C554C050(*(_DWORD *)(v27 + 68), v4);
  if (!v30)
  {
    v29 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v26 + 32) + 36), v76);
    if (!v54)
      return 0;
    v28 = *(_DWORD *)(*(_QWORD *)(v26 + 32) + 68);
  }
  v31 = (unsigned __int16)v29;
  if (v25 == v22)
    v31 = v29;
  if (v31 != v20)
    return 0;
  v32 = **(unsigned int **)(v23 + 16);
  v33 = (uint64_t *)((v32 & 0x80000000) != 0
                  ? *(_QWORD *)(v76 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v76 + 272) + 8 * v32);
  v41 = *v33;
  if (!v41)
    return 0;
  v42 = *v24;
  if ((*(_BYTE *)(v41 + 3) & 1) == 0)
  {
    v41 = *(_QWORD *)(v41 + 24);
    if (!v41 || (*(_BYTE *)(v41 + 3) & 1) == 0)
      return 0;
  }
  v43 = *(_QWORD *)(v41 + 8);
  if (!v43 || **(_WORD **)(v43 + 16) != 65 || *(_DWORD *)(v43 + 40) != 3)
    return 0;
  v44 = *(_QWORD *)(v43 + 32);
  v45 = *(_DWORD *)(v44 + 36);
  v46 = sub_1C554C050(*(_DWORD *)(v44 + 68), v76);
  if (!v47)
  {
    v46 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v43 + 32) + 36), v76);
    if (v48)
    {
      v45 = *(_DWORD *)(*(_QWORD *)(v43 + 32) + 68);
      goto LABEL_48;
    }
    return 0;
  }
LABEL_48:
  v49 = (unsigned __int16)v46;
  a2 = v22;
  if (v42 == v22)
    v49 = v46;
  a1 = v23;
  if (v49 != v21)
    return 0;
LABEL_73:
  v61 = *(_QWORD *)(a1 + 40);
  v62 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 4);
  v88 = a2;
  v89 = 0;
  LODWORD(v77) = v28;
  v79 = 0;
  v63 = a1;
  v64 = a2;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 184, &v88, 1, &v77, 1, 0);
  v66 = *(_DWORD *)(*(_QWORD *)(v65 + 32) + 4);
  v67 = *(_QWORD *)(v63 + 40);
  v88 = v64;
  v89 = 0;
  LODWORD(v77) = v66;
  v79 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 177, &v88, 1, &v77, 1, 0);
  v69 = *(_DWORD *)(*(_QWORD *)(v68 + 32) + 4);
  v70 = *(_QWORD *)(v63 + 40);
  v77 = v64;
  v78 = 0;
  sub_1C5544694(v70, &v77, 0);
  v72 = *(_DWORD *)(*(_QWORD *)(v71 + 32) + 4);
  v73 = *(_QWORD *)(v63 + 40);
  LODWORD(v88) = v62;
  v89 = 1;
  LODWORD(v77) = 40;
  v79 = 2;
  v80 = v45;
  v81 = 0;
  v82 = v72;
  v83 = 0;
  v84 = v69;
  v85 = 0;
  v86 = v66;
  v87 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 51, &v88, 1, &v77, 5, 0);
  v74 = *(_QWORD *)(v63 + 32);
  v75 = v74;
  if ((*(_BYTE *)v74 & 4) == 0)
  {
    v75 = *(_QWORD *)(v63 + 32);
    if ((*(_WORD *)(v74 + 44) & 8) != 0)
    {
      v75 = *(_QWORD *)(v63 + 32);
      do
        v75 = *(_QWORD *)(v75 + 8);
      while ((*(_WORD *)(v75 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v74 + 24) + 40, v74, *(_QWORD *)(v75 + 8));
  return 1;
}

const char *sub_1C4ADF268()
{
  return "AGX3PreLegalizerCombiner";
}

uint64_t sub_1C4ADF278(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  BOOL v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  _BYTE *v62;
  unint64_t v64;
  unint64_t v65;

  v6 = 0;
  v7 = a3;
  while (1)
  {
    v8 = v7 & 0x7FFFFFFF;
    v9 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v8 + 8);
    if ((int)v7 >= 0)
      v9 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v7);
    v10 = *v9;
    if (v10 && ((*(_BYTE *)(v10 + 3) & 1) != 0 || (v10 = *(_QWORD *)(v10 + 24)) != 0 && (*(_BYTE *)(v10 + 3) & 1) != 0))
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    v12 = 0;
    if ((v7 & 0x80000000) != 0 && v8 < *(unsigned int *)(a2 + 432))
      v12 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v8);
    v65 = v12;
    result = sub_1C4825F50(&v65);
    v15 = result;
    if ((_DWORD)v14 == 1)
    v16 = (unsigned __int16)(v65 >> 3);
    v17 = (unsigned __int16)(v65 >> 19);
    if ((v65 & 2) == 0)
      v17 = v65 >> 19;
    if ((v65 & 4) != 0)
      v16 = v17;
    if ((v65 & 1) != 0)
      v18 = v65 >> 3;
    else
      v18 = v16;
    if (((v18 | v15) & 7) != 0)
    {
LABEL_92:
      v61 = 0;
      v62 = a1;
      *a1 = 0;
      goto LABEL_93;
    }
    v19 = *(unsigned __int16 **)(v11 + 16);
    v20 = *v19;
    if (v20 <= 0xCB)
    {
      switch(*v19)
      {
        case 'J':
          v32 = *(_QWORD *)(v11 + 32);
          v33 = *((unsigned __int8 *)v19 + 4);
          v34 = *((_QWORD *)v19 + 1);
          v35 = v33;
          if ((v34 & 2) != 0)
          {
            v54 = *(_DWORD *)(v11 + 40);
            v35 = v33;
            if (v54 != v33)
            {
              v55 = v54 - 1;
              v56 = v33;
              v35 = v33;
              do
              {
                v57 = *(_DWORD *)(v32 + 32 * v56);
                if ((v57 & 0x10000FF) != 0x1000000)
                  break;
                v35 += (v57 & 0x2000000) == 0;
                if (v55 == v56)
                  break;
                ++v56;
              }
              while ((v57 & 0x2000000) == 0);
            }
          }
          v36 = 0;
          if (v35)
          {
            v37 = 32 * v35 - 32;
            v38 = (int *)(v32 + 4);
            do
            {
              v39 = *v38;
              v38 += 8;
              if (v7 == v39)
              {
                v40 = 1;
              }
              else
              {
                ++v36;
                v40 = v37 == 0;
              }
              v37 -= 32;
            }
            while (!v40);
          }
          v41 = v15 + 7;
          if (v15 >= 0)
            v41 = v15;
          if ((v34 & 2) == 0 || (v58 = *(_DWORD *)(v11 + 40), v58 == v33))
          {
            v42 = v33;
          }
          else
          {
            v59 = v58 - 1;
            v42 = v33;
            do
            {
              v60 = *(_DWORD *)(v32 + 32 * v33);
              if ((v60 & 0x10000FF) != 0x1000000)
                break;
              v42 += (v60 & 0x2000000) == 0;
              if (v59 == v33)
                break;
              ++v33;
            }
            while ((v60 & 0x2000000) == 0);
          }
          v7 = *(unsigned int *)(v32 + 32 * v42 + 4);
          a4 = (a4 + v36 * (v41 >> 3));
          goto LABEL_74;
        case 'L':
        case 'O':
          v26 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 36);
          if (v26 < 0 && (v27 = v26 & 0x7FFFFFFF, v27 < *(_DWORD *)(a2 + 432)))
            v28 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v27);
          else
            v28 = 0;
          v64 = v28;
          result = sub_1C4825F50(&v64);
          v30 = result;
          if ((_DWORD)v29 == 1)
          if ((v30 & 7) != 0)
            goto LABEL_92;
          v21 = v30 + 7;
          if (v30 >= 0)
            v21 = v30;
          break;
        case 'M':
        case 'N':
          v21 = v18 + 7;
          if (v18 >= 0)
            v21 = v18;
          break;
        case 'R':
          v7 = *(unsigned int *)(*(_QWORD *)(v11 + 32) + 36);
          goto LABEL_74;
        default:
          goto LABEL_94;
      }
      v31 = v21 >> 3;
      v7 = *(unsigned int *)(*(_QWORD *)(v11 + 32) + 32 * ((int)a4 / v31 + 1) + 4);
      a4 = ((int)a4 % v31);
      goto LABEL_74;
    }
    if (v20 == 204)
    {
      if (*(_DWORD *)(v11 + 40) != 4)
        goto LABEL_92;
      v45 = *(_QWORD *)(v11 + 32);
      v7 = *(unsigned int *)(v45 + 36);
      v46 = *(unsigned int *)(v45 + 68);
      result = sub_1C554C050(*(_DWORD *)(v45 + 100), a2);
      if (!v47)
        goto LABEL_92;
      if (result == (int)a4 / (v18 / 8))
      {
        a4 = ((int)a4 % (v18 / 8));
        v7 = v46;
      }
      goto LABEL_74;
    }
    if (v20 == 205)
    {
      if (*(_DWORD *)(v11 + 40) != 3)
        goto LABEL_92;
      v43 = *(_QWORD *)(v11 + 32);
      v7 = *(unsigned int *)(v43 + 36);
      result = sub_1C554C050(*(_DWORD *)(v43 + 68), a2);
      if (!v44)
        goto LABEL_92;
      a4 = (a4 + v15 / 8 * result);
      goto LABEL_74;
    }
    if (v20 != 206)
      break;
    v22 = *(_QWORD *)(v11 + 32);
    v23 = *(_DWORD *)(*(_QWORD *)(v22 + 112) + 4 * ((int)a4 / (v18 / 8)));
    if (v23 == -1)
      goto LABEL_92;
    v24 = *(unsigned int *)(v22 + 36);
    if ((v24 & 0x80000000) != 0 && (v24 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v24 & 0x7FFFFFFF));
    else
      v25 = 0;
    v48 = *(unsigned int *)(v22 + 68);
    v64 = v25;
    result = sub_1C4825F50(&v64);
    v50 = result;
    if ((_DWORD)v49 == 1)
    if ((v50 & 7) != 0)
      goto LABEL_92;
    v51 = (int)a4 % (v18 / 8) + v23 * (v18 / 8);
    v52 = v50 + 7;
    if (v50 >= 0)
      v52 = v50;
    if (v51 >= v52 >> 3)
      v7 = v48;
    else
      v7 = v24;
    if (v51 >= v52 >> 3)
      v53 = v52 >> 3;
    else
      v53 = 0;
    a4 = (v51 - v53);
LABEL_74:
    if (++v6 == 1000)
    {
      *a1 = 0;
      a1[8] = 0;
      return result;
    }
  }
LABEL_94:
  v62 = a1;
  *(_QWORD *)a1 = v7 | (a4 << 32);
  v61 = 1;
LABEL_93:
  v62[8] = v61;
  return result;
}

uint64_t sub_1C4ADF728()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx3 pre legalization machine instruction combiner";
  v4.n128_u64[1] = 61;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EE720, "enable-agx3-prelegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE720, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX3 Prelegalizer Combiner";
  v4.n128_u64[1] = 47;
  v3 = 0;
  v1 = 1;
  v2 = &v1;
  sub_1C6144A08((uint64_t)&unk_1ED7EE7E0, "enable-cse-in-agx3-prelegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EE7E0, &dword_1C475E000);
}

uint64_t sub_1C4ADF80C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Experimental copy LICM pass";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "agx3-copy-licm";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EE8A0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4ADF970;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4ADF8B0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EE8A0) = &off_1E7FB3880;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EE8A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C4ADF80C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EE8A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4ADF970()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4ADF8B0(v0);
}

void sub_1C4ADF998(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4ADFA2C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4ADFAB8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  *((_BYTE *)this + 160) = 1;
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4ADFB2C(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  void (**v13)(void);
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  __int16 v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int *v38;
  unint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  unint64_t FirstTerminator;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  llvm::LiveInterval *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int v80;
  int32x2_t *v81;
  int32x2_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t **v85;
  unint64_t *v86;
  int v87;
  int v88;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  llvm::LiveInterval *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v105;
  uint64_t v106;
  int v107;
  llvm::LiveInterval *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v123;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *LoopPreheader;
  void *v129[2];
  _BYTE v130[64];
  void *v131;
  uint64_t v132;
  _BYTE v133[64];
  _QWORD v134[3];
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD v138[10];

  v138[8] = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::MachineLoopInfo::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MachineLoopInfo::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v9 = *(char **)(v6 + 272);
  v10 = *(char **)(v6 + 280);
  v136 = v138;
  v137 = 0x800000000;
  sub_1C499C3FC((unsigned int *)&v136, v9, v10);
  v11 = *(uint64_t **)(v6 + 272);
  v12 = *(uint64_t **)(v6 + 280);
  v134[0] = &off_1E7FB3940;
  v134[1] = &v136;
  v135 = v134;
  sub_1C614D1D4(v11, v12, (uint64_t)v134);
  if (v135 == v134)
  {
    v13 = (void (**)(void))(v134[0] + 32);
  }
  else
  {
    if (!v135)
      goto LABEL_10;
    v13 = (void (**)(void))(*v135 + 40);
  }
  (*v13)();
LABEL_10:
  v14 = v137;
  if ((_DWORD)v137)
  {
    while (1)
    {
      v15 = v136[v14 - 1];
      LODWORD(v137) = v14 - 1;
      v16 = **(_QWORD **)(v15 + 32);
      v127 = v15;
      LoopPreheader = (unsigned int *)llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(v15);
      if (LoopPreheader)
        break;
LABEL_162:
      v14 = v137;
      if (!(_DWORD)v137)
        goto LABEL_163;
    }
    v131 = v133;
    v132 = 0x800000000;
    v17 = *(_QWORD *)(v16 + 56);
    if (v17 == v16 + 48)
    {
      v20 = v133;
LABEL_160:
      if (v20 != v133)
        free(v20);
      goto LABEL_162;
    }
    v18 = 0;
    do
    {
      if (**(_WORD **)(v17 + 16) == 19)
      {
        v19 = *(_QWORD *)(v17 + 32);
        if ((*(_DWORD *)(v19 + 4) & 0x80000000) != 0 && (*(_DWORD *)(v19 + 36) & 0x80000000) != 0)
        {
          if (v18 >= HIDWORD(v132))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v133, v18 + 1, 8);
            v18 = v132;
          }
          *((_QWORD *)v131 + v18) = v17;
          v18 = v132 + 1;
          LODWORD(v132) = v132 + 1;
        }
      }
      if ((*(_BYTE *)v17 & 4) == 0)
      {
        while ((*(_WORD *)(v17 + 44) & 8) != 0)
          v17 = *(_QWORD *)(v17 + 8);
      }
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17 != v16 + 48);
    v20 = (char *)v131;
    if (!v18)
      goto LABEL_160;
    v126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 288) + 392)
                     + 16 * *(unsigned int *)(v16 + 24));
    v125 = (char *)v131 + 8 * v18;
    while (1)
    {
      v21 = *(unint64_t **)v20;
      v22 = *(_WORD *)(*(_QWORD *)v20 + 44);
      v23 = *(_QWORD *)v20;
      if ((v22 & 4) != 0)
      {
        do
          v23 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v23 + 44) & 4) != 0);
      }
      v24 = *(unint64_t **)v20;
      if ((v22 & 8) != 0)
      {
        do
          v24 = (unint64_t *)v24[1];
        while ((*((_WORD *)v24 + 22) & 8) != 0);
      }
      v25 = v24[1];
      if (v23 != v25)
      {
        while (1)
        {
          v26 = **(unsigned __int16 **)(v23 + 16);
          v27 = v26 > 0x17;
          v28 = (1 << v26) & 0x83E000;
          v29 = v27 || v28 == 0;
          if (v29)
            break;
          v23 = *(_QWORD *)(v23 + 8);
          if (v23 == v25)
          {
            v23 = v25;
            break;
          }
        }
      }
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 288);
      v31 = *(_QWORD *)(v30 + 368);
      v32 = *(unsigned int *)(v30 + 384);
      if ((_DWORD)v32)
      {
        LODWORD(v33) = ((v23 >> 4) ^ (v23 >> 9)) & (v32 - 1);
        v34 = (uint64_t *)(v31 + 16 * v33);
        v35 = *v34;
        if (v23 == *v34)
          goto LABEL_44;
        v36 = 1;
        while (v35 != -4096)
        {
          v37 = v33 + v36++;
          v33 = v37 & (v32 - 1);
          v35 = *(_QWORD *)(v31 + 16 * v33);
          if (v23 == v35)
          {
            v34 = (uint64_t *)(v31 + 16 * v33);
            goto LABEL_44;
          }
        }
      }
      v34 = (uint64_t *)(v31 + 16 * v32);
LABEL_44:
      v38 = (unsigned int *)v21[4];
      v39 = v34[1] & 0xFFFFFFFFFFFFFFF8 | 4;
      v40 = sub_1C499BEB4(a1, v126, v127, v39, v38);
      v41 = sub_1C499BEB4(a1, v126, v127, v39, v38 + 8);
      if (v40)
        v42 = v41 == 0;
      else
        v42 = 1;
      if (!v42)
      {
        FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)LoopPreheader);
        v44 = (unint64_t *)FirstTerminator;
        v45 = *(_QWORD *)(a1 + 248);
        v46 = *(_QWORD *)(v45 + 288);
        if (LoopPreheader + 12 == (unsigned int *)FirstTerminator)
        {
          v61 = (uint64_t *)(*(_QWORD *)(v46 + 392) + 16 * LoopPreheader[6] + 8);
        }
        else
        {
          v47 = *(_WORD *)(FirstTerminator + 44);
          v48 = FirstTerminator;
          if ((v47 & 4) != 0)
          {
            v48 = FirstTerminator;
            do
              v48 = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v48 + 44) & 4) != 0);
          }
          v49 = FirstTerminator;
          if ((v47 & 8) != 0)
          {
            v49 = FirstTerminator;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
          v50 = *(_QWORD *)(v49 + 8);
          if (v48 != v50)
          {
            while (1)
            {
              v51 = **(unsigned __int16 **)(v48 + 16);
              v27 = v51 > 0x17;
              v52 = (1 << v51) & 0x83E000;
              if (v27 || v52 == 0)
                break;
              v48 = *(_QWORD *)(v48 + 8);
              if (v48 == v50)
              {
                v48 = v50;
                break;
              }
            }
          }
          v54 = *(_QWORD *)(v46 + 368);
          v55 = *(unsigned int *)(v46 + 384);
          if ((_DWORD)v55)
          {
            LODWORD(v56) = ((v48 >> 4) ^ (v48 >> 9)) & (v55 - 1);
            v57 = (uint64_t *)(v54 + 16 * v56);
            v58 = *v57;
            if (v48 != *v57)
            {
              v59 = 1;
              while (v58 != -4096)
              {
                v60 = v56 + v59++;
                v56 = v60 & (v55 - 1);
                v58 = *(_QWORD *)(v54 + 16 * v56);
                if (v48 == v58)
                {
                  v57 = (uint64_t *)(v54 + 16 * v56);
                  goto LABEL_66;
                }
              }
              goto LABEL_65;
            }
          }
          else
          {
LABEL_65:
            v57 = (uint64_t *)(v54 + 16 * v55);
          }
LABEL_66:
          v61 = v57 + 1;
        }
        if ((*v38 & 0xFFF00) != 0)
        {
          v62 = *v61;
          v63 = v38[1];
          if ((v63 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v45 + 416)
            || (v64 = *(llvm::LiveInterval **)(*(_QWORD *)(v45 + 408) + 8 * (v63 & 0x7FFFFFFF))) == 0)
          {
            v64 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 248), v63);
            v118 = *(_QWORD *)(v45 + 304);
            v119 = *(_QWORD *)(v45 + 248);
            *(_QWORD *)v118 = v119;
            *(_QWORD *)(v118 + 8) = *(_QWORD *)(v119 + 40);
            *(_OWORD *)(v118 + 16) = *(_OWORD *)(v45 + 288);
            *(_QWORD *)(v118 + 32) = v45 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v118);
            *(_DWORD *)(v118 + 184) = 0;
            v120 = *(_QWORD *)(v45 + 256);
            v29 = *(_BYTE *)(v120 + 16) == 0;
            v121 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v120 + 24) + 16
                                                                            * (*((_DWORD *)v64 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v123 = !v29 && v121 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v45 + 304), v64, v123);
            llvm::LiveIntervals::computeDeadValues(v45, (uint64_t)v64, 0);
          }
          v65 = *((_DWORD *)v64 + 2);
          v66 = *(_QWORD **)v64;
          if (v65)
          {
            v67 = v66[3 * v65 - 2];
            v68 = *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24) | (v62 >> 1) & 3;
            v69 = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
            v70 = *(_QWORD **)v64;
            v71 = *((unsigned int *)v64 + 2);
            if (v68 < v69)
            {
              do
              {
                v72 = v71 >> 1;
                v73 = v70[3 * (v71 >> 1) + 1];
                LODWORD(v73) = (v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
                v71 -= (v71 >> 1) + 1;
                v74 = v68 >= v73;
                if (v68 >= v73)
                  v75 = v72 + 1;
                else
                  v75 = 0;
                v70 += 3 * v75;
                if (!v74)
                  v71 = v72;
              }
              while (v71);
              goto LABEL_81;
            }
          }
          else
          {
            v65 = 0;
          }
          v70 = &v66[3 * v65];
LABEL_81:
          if (v70 == &v66[3 * v65]
            || ((*v70 >> 1) & 3 | *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24) | (v62 >> 1) & 3))
          {
            v76 = *(_QWORD *)(a1 + 256);
            v77 = v38[1];
            if ((v77 & 0x80000000) != 0)
              v78 = (unsigned int **)(*(_QWORD *)(v76 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8);
            else
              v78 = (unsigned int **)(*(_QWORD *)(v76 + 272) + 8 * v77);
            v79 = *v78;
            if (v79)
            {
              while (1)
              {
                v80 = *v79;
                if ((*v79 & 0x80000000) == 0)
                  break;
                v79 = (unsigned int *)*((_QWORD *)v79 + 3);
                if (!v79)
                  goto LABEL_89;
              }
LABEL_96:
              if ((v80 & 0x10000FF) == 0x1000000 && (v80 & 0xFFF00) != 0)
                *v79 = v80 & 0xEFFFFFFF;
              while (1)
              {
                v79 = (unsigned int *)*((_QWORD *)v79 + 3);
                if (!v79)
                  break;
                v80 = *v79;
                if ((*v79 & 0x80000000) == 0)
                  goto LABEL_96;
              }
            }
LABEL_89:
            *v38 |= 0x10000000u;
          }
        }
        sub_1C48532D0((unint64_t *)LoopPreheader, v44, (unint64_t *)v16, v21);
        v81 = *(int32x2_t **)(*(_QWORD *)(a1 + 248) + 288);
        v82 = v81[46];
        v83 = v81[48].u32[0];
        if ((_DWORD)v83)
        {
          LODWORD(v84) = (v83 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          v85 = (unint64_t **)(*(_QWORD *)&v82 + 16 * v84);
          v86 = *v85;
          if (*v85 != v21)
          {
            v87 = 1;
            while (v86 != (unint64_t *)-4096)
            {
              v88 = v84 + v87++;
              v84 = v88 & (v83 - 1);
              v86 = *(unint64_t **)(*(_QWORD *)&v82 + 16 * v84);
              if (v86 == v21)
              {
                v85 = (unint64_t **)(*(_QWORD *)&v82 + 16 * v84);
                goto LABEL_105;
              }
            }
            goto LABEL_104;
          }
        }
        else
        {
LABEL_104:
          v85 = (unint64_t **)(*(_QWORD *)&v82 + 16 * v83);
        }
LABEL_105:
        if (v85 != (unint64_t **)(*(_QWORD *)&v82 + 16 * v83))
        {
          v90 = (unint64_t)v85[1] & 0xFFFFFFFFFFFFFFF8;
          *v85 = (unint64_t *)-8192;
          v81[47] = vadd_s32(v81[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v90 + 16) = 0;
          v81 = *(int32x2_t **)(*(_QWORD *)(a1 + 248) + 288);
        }
        sub_1C4850BC8((uint64_t)v81, (uint64_t)v21, 0);
        v91 = *(_QWORD *)(a1 + 248);
        v92 = v38[1] & 0x7FFFFFFF;
        v93 = *(_QWORD *)(v91 + 408);
        v94 = *(_QWORD *)(v93 + 8 * v92);
        if (v94)
        {
          v95 = *(_QWORD *)(v94 + 104);
          if (v95)
          {
            do
            {
              v110 = *(_QWORD *)(v95 + 96);
              v109 = *(_QWORD *)(v95 + 104);
              *(_QWORD *)(v95 + 96) = 0;
              if (v110)
              {
                sub_1C47655E8(v110, *(_QWORD **)(v110 + 8));
                MEMORY[0x1CAA32FC0](v110, 0x1020C4062D53EE8);
              }
              v111 = *(void **)(v95 + 64);
              if (v111 != (void *)(v95 + 80))
                free(v111);
              if (*(_QWORD *)v95 != v95 + 16)
                free(*(void **)v95);
              v95 = v109;
            }
            while (v109);
          }
          v96 = *(_QWORD *)(v94 + 96);
          *(_QWORD *)(v94 + 96) = 0;
          *(_QWORD *)(v94 + 104) = 0;
          if (v96)
          {
            sub_1C47655E8(v96, *(_QWORD **)(v96 + 8));
            MEMORY[0x1CAA32FC0](v96, 0x1020C4062D53EE8);
          }
          v97 = *(void **)(v94 + 64);
          if (v97 != (void *)(v94 + 80))
            free(v97);
          if (*(_QWORD *)v94 != v94 + 16)
            free(*(void **)v94);
          MEMORY[0x1CAA32FC0](v94, 0x10A0C408DA535C6);
          v93 = *(_QWORD *)(v91 + 408);
        }
        *(_QWORD *)(v93 + 8 * v92) = 0;
        v98 = *(_QWORD *)(a1 + 248);
        v99 = (llvm::LiveInterval *)sub_1C4851220(v98, v38[1]);
        v100 = *(_QWORD *)(v98 + 304);
        v101 = *(_QWORD *)(v98 + 248);
        *(_QWORD *)v100 = v101;
        *(_QWORD *)(v100 + 8) = *(_QWORD *)(v101 + 40);
        *(_OWORD *)(v100 + 16) = *(_OWORD *)(v98 + 288);
        *(_QWORD *)(v100 + 32) = v98 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v100);
        *(_DWORD *)(v100 + 184) = 0;
        v102 = *(_QWORD *)(v98 + 256);
        v29 = *(_BYTE *)(v102 + 16) == 0;
        v103 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v102 + 24) + 16 * (*((_DWORD *)v99 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v105 = !v29 && v103 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v98 + 304), v99, v105);
        llvm::LiveIntervals::computeDeadValues(v98, (uint64_t)v99, 0);
        v106 = *(_QWORD *)(a1 + 248);
        v107 = v38[9];
        if ((v107 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v106 + 416)
          || (v108 = *(llvm::LiveInterval **)(*(_QWORD *)(v106 + 408) + 8 * (v107 & 0x7FFFFFFF))) == 0)
        {
          v108 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 248), v107);
          v112 = *(_QWORD *)(v106 + 304);
          v113 = *(_QWORD *)(v106 + 248);
          *(_QWORD *)v112 = v113;
          *(_QWORD *)(v112 + 8) = *(_QWORD *)(v113 + 40);
          *(_OWORD *)(v112 + 16) = *(_OWORD *)(v106 + 288);
          *(_QWORD *)(v112 + 32) = v106 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v112);
          *(_DWORD *)(v112 + 184) = 0;
          v114 = *(_QWORD *)(v106 + 256);
          v29 = *(_BYTE *)(v114 + 16) == 0;
          v115 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v114 + 24) + 16 * (*((_DWORD *)v108 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v117 = !v29 && v115 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v106 + 304), v108, v117);
          llvm::LiveIntervals::computeDeadValues(v106, (uint64_t)v108, 0);
        }
        llvm::LiveIntervals::shrinkToUses((_QWORD *)v106, (uint64_t)v108, 0);
        v129[0] = v130;
        v129[1] = (void *)0x800000000;
        llvm::LiveIntervals::splitSeparateComponents(*(_QWORD *)(a1 + 248), v99, (uint64_t)v129);
        if (v129[0] != v130)
          free(v129[0]);
      }
      v20 += 8;
      if (v20 == v125)
      {
        v20 = (char *)v131;
        goto LABEL_160;
      }
    }
  }
LABEL_163:
  if (v136 != v138)
    free(v136);
  return 0;
}

void sub_1C4AE05FC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4AE0610(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3940;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4AE0644(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3940;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C4AE0660(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_1C4AE06BC(unsigned __int8 ***a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned __int8 v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned __int8 **v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 ***v30;
  char v31;
  int v32;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  _BOOL4 v47;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 **v65;
  const llvm::APFloat *v66;
  llvm::APFloatBase *v67;
  uint64_t v68;
  unsigned __int8 **v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 ***v75;
  char v76;
  int v77;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t **v82;
  uint64_t **v83;
  uint64_t **v84;
  unint64_t v85;
  uint64_t *v86;
  int v87;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  const llvm::APFloat *v95;
  unsigned __int8 **v96;
  llvm::APFloatBase *v97;
  uint64_t v98;
  unsigned __int8 **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  _BOOL4 v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t **v114;
  unint64_t v115;
  uint64_t *v116;
  int v117;
  _BOOL4 v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  const llvm::APFloat *v125;
  unsigned __int8 **v126;
  llvm::APFloatBase *v127;
  uint64_t v128;
  unsigned __int8 **v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  void *v135;
  uint64_t *v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  const llvm::DILocation *v140;
  const llvm::DILocation *v141;
  char v142;
  const llvm::DILocation *v143;
  char v144;
  int *v145;
  char v146;
  const llvm::DILocation *v147;
  char v148;
  int *v149;
  unsigned __int8 **v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 **v153;
  unsigned __int8 **v155;
  const llvm::APFloat *v156;
  llvm::APFloatBase *v157;
  uint64_t v158;
  unsigned __int8 **v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  int v234;
  _BOOL4 v236;
  uint64_t v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  int v248;
  _BOOL4 v250;
  uint64_t v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  int v260;
  _BOOL4 v262;
  uint64_t v263;
  uint64_t **v264;
  uint64_t **v265;
  unint64_t v266;
  uint64_t *v267;
  unsigned __int8 **v268;
  const llvm::APFloat *v269;
  llvm::APFloatBase *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  char *v284;
  uint64_t v285;
  BOOL v286;
  void *v287;
  unsigned __int8 **v288;
  const llvm::APFloat *v289;
  llvm::APFloatBase *v290;
  uint64_t v291;
  unsigned __int8 **v292;
  uint64_t v293;
  unsigned int v294;
  unsigned __int8 ***v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _OWORD v300[2];
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int16 v304;
  __int128 v305;
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  _DWORD *v312;
  char *v313;
  uint64_t **v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  _DWORD v318[4];
  int v319;
  _DWORD *v320;
  uint64_t *v321;
  int v322;
  char v323;
  char v324[8];
  uint64_t v325;
  uint64_t *v326;
  int v327;
  char v328;
  char v329[8];
  uint64_t v330;
  uint64_t *v331;
  int v332;
  char v333;
  unint64_t v334;
  _DWORD *v335;
  uint64_t *v336;
  int v337;
  char v338;
  char v339[8];
  uint64_t v340;
  uint64_t *v341;
  int v342;
  char v343;
  unsigned int v344;
  _DWORD *v345;
  uint64_t *v346;
  int v347;
  char v348;
  char v349[8];
  uint64_t v350;
  uint64_t *v351;
  int v352;
  char v353;
  uint64_t v354;

  v354 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) == 163)
  {
    v4 = (*a1)[1];
    v5 = *((_QWORD *)v4 + 5);
    v6 = *((_QWORD *)v4 + 1);
    v7 = *(_OWORD *)(v6 + 1024);
    v300[0] = *(_OWORD *)(v6 + 1008);
    v300[1] = v7;
    v8 = *(_QWORD *)(v6 + 1048);
    v301 = *(_QWORD *)(v6 + 1040);
    v302 = v8;
    v9 = *(_QWORD *)(v6 + 1056);
    v303 = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v304 = *(_WORD *)(v6 + 1064);
    if (*(char *)(v6 + 1095) < 0)
    {
      sub_1C47EBC30(&v305, *(void **)(v6 + 1072), *(_QWORD *)(v6 + 1080));
    }
    else
    {
      v305 = *(_OWORD *)(v6 + 1072);
      v306 = *(_QWORD *)(v6 + 1088);
    }
    v307 = *(_OWORD *)(v6 + 1096);
    v308 = *(_OWORD *)(v6 + 1112);
    sub_1C4843224((uint64_t)&v309, (uint64_t *)(v6 + 1128));
    if (*(char *)(v6 + 1311) < 0)
    {
      sub_1C47EBC30(&v310, *(void **)(v6 + 1288), *(_QWORD *)(v6 + 1296));
    }
    else
    {
      v310 = *(_OWORD *)(v6 + 1288);
      v311 = *(_QWORD *)(v6 + 1304);
    }
    v13 = DWORD2(v307) == 0;
    v14 = BYTE12(v300[0]);
    v298 = 0;
    v299 = 0;
    v297 = 0;
    v15 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
    if ((v15 & 0x80000000) != 0)
    {
      v19 = v15 & 0x7FFFFFFF;
      if ((v15 & 0x7FFFFFFF) >= *(_DWORD *)(v5 + 432))
        v16 = 0;
      else
        v16 = *(_DWORD **)(*(_QWORD *)(v5 + 424) + 8 * v19);
      v20 = *a1;
      v20[5] = *(unsigned __int8 **)(a2 + 24);
      v20[6] = (unsigned __int8 *)a2;
      v18 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * v19 + 8);
    }
    else
    {
      v16 = 0;
      v17 = *a1;
      v17[5] = *(unsigned __int8 **)(a2 + 24);
      v17[6] = (unsigned __int8 *)a2;
      v18 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
    }
    v21 = *v18;
    v295 = a1;
    if (v21)
    {
      if ((*(_BYTE *)(v21 + 3) & 1) != 0 || (v21 = *(_QWORD *)(v21 + 24)) != 0 && (*(_BYTE *)(v21 + 3) & 1) != 0)
      {
        v164 = *(_QWORD *)(v21 + 8);
        if (v164)
        {
          if (**(_WORD **)(v164 + 16) == 163 && *(_DWORD *)(v164 + 40) == 3)
          {
            v165 = *(_QWORD *)(v164 + 32);
            v166 = *(unsigned int *)(v165 + 36);
            HIDWORD(v297) = *(_DWORD *)(v165 + 36);
            v167 = *(unsigned int *)(v165 + 68);
            if ((v167 & 0x80000000) != 0)
              v168 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v167 & 0x7FFFFFFF) + 8);
            else
              v168 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v167);
            v197 = *v168;
            if (v197
              && ((*(_BYTE *)(v197 + 3) & 1) != 0
               || (v197 = *(_QWORD *)(v197 + 24)) != 0 && (*(_BYTE *)(v197 + 3) & 1) != 0)
              && (v272 = *(_QWORD *)(v197 + 8)) != 0
              && **(_WORD **)(v272 + 16) == 177
              && *(_DWORD *)(v272 + 40) == 2)
            {
              LODWORD(v167) = *(_DWORD *)(*(_QWORD *)(v272 + 32) + 36);
              v273 = &v297;
            }
            else
            {
              if ((v166 & 0x80000000) != 0)
                v198 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v166 & 0x7FFFFFFF) + 8);
              else
                v198 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v166);
              v202 = *v198;
              if (!v202)
                goto LABEL_19;
              if ((*(_BYTE *)(v202 + 3) & 1) == 0)
              {
                v202 = *(_QWORD *)(v202 + 24);
                if (!v202 || (*(_BYTE *)(v202 + 3) & 1) == 0)
                  goto LABEL_19;
              }
              v277 = *(_QWORD *)(v202 + 8);
              if (!v277 || **(_WORD **)(v277 + 16) != 177 || *(_DWORD *)(v277 + 40) != 2)
                goto LABEL_19;
              LODWORD(v297) = *(_DWORD *)(*(_QWORD *)(v277 + 32) + 36);
              v273 = (uint64_t *)((char *)&v297 + 4);
            }
            *(_DWORD *)v273 = v167;
            if (HIDWORD(v297) == (_DWORD)v297 && ((v14 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
            {
              v278 = (uint64_t)*a1;
              LODWORD(v312) = v15;
              LODWORD(v313) = 1;
              sub_1C5545FFC(v278, (unint64_t *)&v312, 0.0);
              v151 = *(_QWORD *)(a2 + 24);
              v152 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v152 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v152 = a2;
                  do
                    v152 = *(_QWORD *)(v152 + 8);
                  while ((*(_WORD *)(v152 + 44) & 8) != 0);
                }
              }
LABEL_230:
              sub_1C487FE80(v151 + 40, a2, *(_QWORD *)(v152 + 8));
              goto LABEL_231;
            }
          }
        }
      }
    }
LABEL_19:
    if ((v15 & 0x80000000) != 0)
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    else
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
    v23 = *v22;
    if (v23)
    {
      if ((*(_BYTE *)(v23 + 3) & 1) != 0 || (v23 = *(_QWORD *)(v23 + 24)) != 0 && (*(_BYTE *)(v23 + 3) & 1) != 0)
      {
        v169 = *(_QWORD *)(v23 + 8);
        if (v169)
        {
          if (**(_WORD **)(v169 + 16) == 163 && *(_DWORD *)(v169 + 40) == 3)
          {
            v170 = *(_QWORD *)(v169 + 32);
            v171 = *(unsigned int *)(v170 + 36);
            if ((v171 & 0x80000000) != 0)
              v172 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v171 & 0x7FFFFFFF) + 8);
            else
              v172 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v171);
            v199 = *v172;
            if (v199
              && ((*(_BYTE *)(v199 + 3) & 1) != 0
               || (v199 = *(_QWORD *)(v199 + 24)) != 0 && (*(_BYTE *)(v199 + 3) & 1) != 0)
              && (v274 = *(_QWORD *)(v199 + 8)) != 0
              && **(_WORD **)(v274 + 16) == 177
              && *(_DWORD *)(v274 + 40) == 2)
            {
              HIDWORD(v297) = *(_DWORD *)(*(_QWORD *)(v274 + 32) + 36);
              v275 = &v297;
              v276 = 2;
            }
            else
            {
              LODWORD(v297) = *(_DWORD *)(v170 + 36);
              v200 = *(unsigned int *)(v170 + 68);
              if ((v200 & 0x80000000) != 0)
                v201 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v200 & 0x7FFFFFFF) + 8);
              else
                v201 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v200);
              v203 = *v201;
              if (!v203)
                goto LABEL_23;
              if ((*(_BYTE *)(v203 + 3) & 1) == 0)
              {
                v203 = *(_QWORD *)(v203 + 24);
                if (!v203 || (*(_BYTE *)(v203 + 3) & 1) == 0)
                  goto LABEL_23;
              }
              v279 = *(_QWORD *)(v203 + 8);
              if (!v279 || **(_WORD **)(v279 + 16) != 177 || *(_DWORD *)(v279 + 40) != 2)
                goto LABEL_23;
              v170 = *(_QWORD *)(v279 + 32);
              v275 = (uint64_t *)((char *)&v297 + 4);
              v276 = 1;
            }
            *(_DWORD *)v275 = *(_DWORD *)(v170 + 32 * v276 + 4);
            if (HIDWORD(v297) == (_DWORD)v297 && ((v14 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
            {
              v280 = (uint64_t)*a1;
              LODWORD(v312) = v15;
              LODWORD(v313) = 1;
              sub_1C5545FFC(v280, (unint64_t *)&v312, 0.0);
              v151 = *(_QWORD *)(a2 + 24);
              v152 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v152 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v152 = a2;
                  do
                    v152 = *(_QWORD *)(v152 + 8);
                  while ((*(_WORD *)(v152 + 44) & 8) != 0);
                }
              }
              goto LABEL_230;
            }
          }
        }
      }
    }
LABEL_23:
    if ((v15 & 0x80000000) != 0)
      v24 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    else
      v24 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
    v25 = *v24;
    if (!v25)
      goto LABEL_27;
    if ((*(_BYTE *)(v25 + 3) & 1) == 0)
    {
      v25 = *(_QWORD *)(v25 + 24);
      if (!v25 || (*(_BYTE *)(v25 + 3) & 1) == 0)
        goto LABEL_27;
    }
    v173 = *(_QWORD *)(v25 + 8);
    if (!v173 || **(_WORD **)(v173 + 16) != 163 || *(_DWORD *)(v173 + 40) != 3)
      goto LABEL_27;
    v174 = *(_QWORD *)(v173 + 32);
    v175 = *(unsigned int *)(v174 + 36);
    HIDWORD(v297) = *(_DWORD *)(v174 + 36);
    v176 = *(unsigned int *)(v174 + 68);
    v177 = *(_QWORD *)(v5 + 24);
    v178 = (uint64_t *)(v177 + 16 * (v176 & 0x7FFFFFFF) + 8);
    v179 = *(_QWORD *)(v5 + 272);
    if ((int)v176 >= 0)
      v178 = (uint64_t *)(v179 + 8 * v176);
    v180 = *v178;
    if ((*(_BYTE *)(v180 + 3) & 1) == 0)
      v180 = *(_QWORD *)(v180 + 24);
    v181 = *(_QWORD *)(v180 + 8);
    if (**(_WORD **)(v181 + 16) == 121)
    {
      v218 = *(_QWORD *)(*(_QWORD *)(v181 + 32) + 48);
      v299 = v218;
      if (v218)
      {
        LODWORD(v176) = v175;
        goto LABEL_417;
      }
    }
    else
    {
      v299 = 0;
    }
    v182 = v177 + 16 * (v175 & 0x7FFFFFFF) + 8;
    v183 = (uint64_t *)(v179 + 8 * v175);
    if ((int)v175 >= 0)
      v184 = v183;
    else
      v184 = (uint64_t *)v182;
    v185 = *v184;
    if ((*(_BYTE *)(v185 + 3) & 1) == 0)
      v185 = *(_QWORD *)(v185 + 24);
    v186 = *(_QWORD *)(v185 + 8);
    if (**(_WORD **)(v186 + 16) != 121)
    {
      v299 = 0;
      goto LABEL_27;
    }
    v218 = *(_QWORD *)(*(_QWORD *)(v186 + 32) + 48);
    v299 = v218;
    if (!v218)
    {
LABEL_27:
      if ((v15 & 0x80000000) != 0)
        v26 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      else
        v26 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
      v27 = *v26;
      if (!v27)
        goto LABEL_31;
      if ((*(_BYTE *)(v27 + 3) & 1) == 0)
      {
        v27 = *(_QWORD *)(v27 + 24);
        if (!v27 || (*(_BYTE *)(v27 + 3) & 1) == 0)
          goto LABEL_31;
      }
      v187 = *(_QWORD *)(v27 + 8);
      if (!v187 || **(_WORD **)(v187 + 16) != 163 || *(_DWORD *)(v187 + 40) != 3)
        goto LABEL_31;
      v188 = *(_QWORD *)(v187 + 32);
      v189 = *(unsigned int *)(v188 + 36);
      v190 = *(_QWORD *)(v5 + 24);
      v191 = *(_QWORD *)(v5 + 272);
      if ((int)v189 >= 0)
        v192 = v191 + 8 * v189;
      else
        v192 = v190 + 16 * (v189 & 0x7FFFFFFF) + 8;
      v193 = *(_QWORD *)v192;
      if ((*(_BYTE *)(*(_QWORD *)v192 + 3) & 1) == 0)
        v193 = *(_QWORD *)(v193 + 24);
      v194 = *(_QWORD *)(v193 + 8);
      if (**(_WORD **)(v194 + 16) == 121)
      {
        v219 = *(_QWORD *)(*(_QWORD *)(v194 + 32) + 48);
        v299 = v219;
        if (v219)
        {
          v220 = *(unsigned int *)(v188 + 68);
          if ((int)v220 >= 0)
            v221 = (uint64_t *)(v191 + 8 * v220);
          else
            v221 = (uint64_t *)(v190 + 16 * (v220 & 0x7FFFFFFF) + 8);
          v222 = *v221;
          if ((*(_BYTE *)(v222 + 3) & 1) == 0)
            v222 = *(_QWORD *)(v222 + 24);
          v223 = *(_QWORD *)(v222 + 8);
          if (**(_WORD **)(v223 + 16) == 121)
          {
            v298 = *(_QWORD *)(*(_QWORD *)(v223 + 32) + 48);
            if (v298)
              goto LABEL_433;
          }
          else
          {
            v298 = 0;
          }
        }
      }
      else
      {
        v299 = 0;
      }
      v195 = *(_QWORD *)v192;
      if ((*(_BYTE *)(v195 + 3) & 1) == 0)
        v195 = *(_QWORD *)(v195 + 24);
      v196 = *(_QWORD *)(v195 + 8);
      if (**(_WORD **)(v196 + 16) != 121)
      {
        v298 = 0;
        goto LABEL_31;
      }
      v298 = *(_QWORD *)(*(_QWORD *)(v196 + 32) + 48);
      if (!v298)
        goto LABEL_31;
      v224 = *(unsigned int *)(v188 + 68);
      v225 = v190 + 16 * (v224 & 0x7FFFFFFF) + 8;
      v226 = (uint64_t *)(v191 + 8 * v224);
      if ((int)v224 >= 0)
        v227 = v226;
      else
        v227 = (uint64_t *)v225;
      v228 = *v227;
      if ((*(_BYTE *)(v228 + 3) & 1) == 0)
        v228 = *(_QWORD *)(v228 + 24);
      v229 = *(_QWORD *)(v228 + 8);
      if (**(_WORD **)(v229 + 16) != 121)
      {
        v299 = 0;
        goto LABEL_31;
      }
      v219 = *(_QWORD *)(*(_QWORD *)(v229 + 32) + 48);
      v299 = v219;
      if (!v219)
      {
LABEL_31:
        v296 = 0uLL;
        if ((v14 & 1) == 0 && (~*(unsigned __int16 *)(a2 + 44) & 0x440) != 0)
          goto LABEL_213;
        v312 = (_DWORD *)&v296 + 3;
        v313 = (char *)&v299;
        v314 = (uint64_t **)&v298;
        v344 = v15;
        if (sub_1C49BB03C((uint64_t)&v312, v5, &v344))
        {
          v28 = v299;
          v29 = *(_QWORD *)(v299 + 32);
          if ((_UNKNOWN *)v29 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v330, (const llvm::detail::DoubleAPFloat *)(v299 + 32));
            v30 = v295;
          }
          else
          {
            v330 = *(_QWORD *)(v299 + 32);
            v30 = v295;
            if ((*(_DWORD *)(v29 + 8) + 64) >= 0x80)
              v331 = (uint64_t *)operator new[]();
            v31 = *(_BYTE *)(v28 + 52);
            v32 = v31 & 7;
            v333 = v333 & 0xF0 | v31 & 0xF;
            v332 = *(_DWORD *)(v28 + 48);
            v34 = (v31 & 6) != 0 && v32 != 3;
            if (v32 == 1 || v34)
            {
              v35 = *(unsigned int *)(v330 + 8);
              if ((v35 - 64) <= 0xFFFFFF7F)
                v36 = v331;
              else
                v36 = (uint64_t *)&v331;
              v39 = *(uint64_t **)(v28 + 40);
              v38 = (uint64_t *)(v28 + 40);
              v37 = v39;
              if ((*(_DWORD *)(*(v38 - 1) + 8) - 64) >= 0xFFFFFF80)
                v37 = v38;
              if (v35 <= 0xFFFFFFBF)
              {
                v40 = (unint64_t)(v35 + 64) >> 6;
                do
                {
                  v41 = *v37++;
                  *v36++ = v41;
                  --v40;
                }
                while (v40);
              }
            }
          }
          sub_1C4AE2930((uint64_t)&v344, (uint64_t)v16, (uint64_t)v329);
          if ((_UNKNOWN *)v330 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v331);
          }
          else if ((*(_DWORD *)(v330 + 8) - 64) <= 0xFFFFFF7F && v331)
          {
            MEMORY[0x1CAA32F9C](v331, 0x1000C8000313F17);
          }
          v42 = v298;
          v43 = *(_QWORD *)(v298 + 32);
          if ((_UNKNOWN *)v43 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v325, (const llvm::detail::DoubleAPFloat *)(v298 + 32));
          }
          else
          {
            v325 = *(_QWORD *)(v298 + 32);
            if ((*(_DWORD *)(v43 + 8) + 64) >= 0x80)
              v326 = (uint64_t *)operator new[]();
            v44 = *(_BYTE *)(v42 + 52);
            v45 = v44 & 7;
            v328 = v328 & 0xF0 | v44 & 0xF;
            v327 = *(_DWORD *)(v42 + 48);
            v47 = (v44 & 6) != 0 && v45 != 3;
            if (v45 == 1 || v47)
            {
              v49 = *(unsigned int *)(v325 + 8);
              if ((v49 - 64) <= 0xFFFFFF7F)
                v50 = v326;
              else
                v50 = (uint64_t *)&v326;
              v53 = *(uint64_t **)(v42 + 40);
              v52 = (uint64_t *)(v42 + 40);
              v51 = v53;
              if ((*(_DWORD *)(*(v52 - 1) + 8) - 64) >= 0xFFFFFF80)
                v51 = v52;
              if (v49 <= 0xFFFFFFBF)
              {
                v54 = (unint64_t)(v49 + 64) >> 6;
                do
                {
                  v55 = *v51++;
                  *v50++ = v55;
                  --v54;
                }
                while (v54);
              }
            }
          }
          sub_1C4AE2930((uint64_t)&v334, (uint64_t)v16, (uint64_t)v324);
          if ((_UNKNOWN *)v325 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v326);
          }
          else if ((*(_DWORD *)(v325 + 8) - 64) <= 0xFFFFFF7F && v326)
          {
            MEMORY[0x1CAA32F9C](v326, 0x1000C8000313F17);
          }
          v56 = v345;
          if (v345 == (_DWORD *)&unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v320, (const llvm::detail::DoubleAPFloat *)&v345);
            goto LABEL_94;
          }
          v320 = v345;
          if ((v345[2] + 64) >= 0x80)
            v321 = (uint64_t *)operator new[]();
          v57 = v348 & 7;
          v323 = v323 & 0xF0 | v348 & 0xF;
          v322 = v347;
          v59 = (v348 & 6) != 0 && v57 != 3;
          if (v57 == 1 || v59)
          {
            v60 = v320[2];
            if ((v60 - 64) <= 0xFFFFFF7F)
            {
              v62 = v321;
              if ((v56[2] - 64) >= 0xFFFFFF80)
                v61 = &v346;
              else
                v61 = (uint64_t **)v346;
              goto LABEL_92;
            }
            v61 = &v346;
            if ((v56[2] - 64) < 0xFFFFFF80)
              v61 = (uint64_t **)v346;
            if (v60 <= 0xFFFFFFBF)
            {
              v62 = (uint64_t *)&v321;
LABEL_92:
              v63 = (unint64_t)(v60 + 64) >> 6;
              do
              {
                v64 = (uint64_t)*v61++;
                *v62++ = v64;
                --v63;
              }
              while (v63);
            }
          }
LABEL_94:
          sub_1C47B4138((uint64_t)&v319, (uint64_t)&v334, 1);
          v65 = *v30;
          v312 = v16;
          LODWORD(v313) = 0;
          v67 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v319, v66);
          v68 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v65 + 3))(v65, &v312, v67);
          v69 = *v30;
          v318[0] = v15;
          v318[2] = 1;
          LODWORD(v312) = HIDWORD(v296);
          LODWORD(v314) = 0;
          v315 = v68;
          v316 = v70;
          v317 = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, _DWORD *, uint64_t, _DWORD **, uint64_t, uint64_t))*v69 + 4))(v69, 163, v318, 1, &v312, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          v71 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v71 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v71 = a2;
              do
                v71 = *(_QWORD *)(v71 + 8);
              while ((*(_WORD *)(v71 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v71 + 8));
          if (v320 == (_DWORD *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v321);
          }
          else if ((v320[2] - 64) <= 0xFFFFFF7F && v321)
          {
            MEMORY[0x1CAA32F9C](v321, 0x1000C8000313F17);
          }
          if (v335 == (_DWORD *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v336);
          }
          else if ((v335[2] - 64) <= 0xFFFFFF7F && v336)
          {
            MEMORY[0x1CAA32F9C](v336, 0x1000C8000313F17);
          }
          if (v56 != (_DWORD *)&unk_1C866F1C0)
          {
            v72 = v56[2];
LABEL_195:
            if ((v72 - 64) > 0xFFFFFF7F)
              goto LABEL_231;
            v132 = v346;
            if (!v346)
              goto LABEL_231;
            goto LABEL_197;
          }
          goto LABEL_240;
        }
        v312 = (_DWORD *)&v296 + 3;
        v313 = (char *)&v299;
        v314 = (uint64_t **)&v296 + 1;
        v344 = v15;
        if (sub_1C49BB41C((uint64_t)&v312, v5, &v344) && HIDWORD(v296) == DWORD2(v296))
        {
          v73 = v299;
          v74 = *(_QWORD *)(v299 + 32);
          if ((_UNKNOWN *)v74 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v345, (const llvm::detail::DoubleAPFloat *)(v299 + 32));
            v75 = v295;
          }
          else
          {
            v345 = *(_DWORD **)(v299 + 32);
            v75 = v295;
            if ((*(_DWORD *)(v74 + 8) + 64) >= 0x80)
              v346 = (uint64_t *)operator new[]();
            v76 = *(_BYTE *)(v73 + 52);
            v77 = v76 & 7;
            v348 = v348 & 0xF0 | v76 & 0xF;
            v347 = *(_DWORD *)(v73 + 48);
            v79 = (v76 & 6) != 0 && v77 != 3;
            if (v77 == 1 || v79)
            {
              v80 = v345[2];
              if ((v80 - 64) <= 0xFFFFFF7F)
                v81 = (uint64_t **)v346;
              else
                v81 = &v346;
              v84 = *(uint64_t ***)(v73 + 40);
              v83 = (uint64_t **)(v73 + 40);
              v82 = v84;
              if ((*((_DWORD *)*(v83 - 1) + 2) - 64) >= 0xFFFFFF80)
                v82 = v83;
              if (v80 <= 0xFFFFFFBF)
              {
                v85 = (unint64_t)(v80 + 64) >> 6;
                do
                {
                  v86 = *v82++;
                  *v81++ = v86;
                  --v85;
                }
                while (v85);
              }
            }
          }
          llvm::APFloat::APFloat((uint64_t)&v312, v345, "1.0", 3uLL);
          if (v345 == (_DWORD *)&unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v335, (const llvm::detail::DoubleAPFloat *)&v345);
          }
          else
          {
            v335 = v345;
            if ((v345[2] + 64) >= 0x80)
              v336 = (uint64_t *)operator new[]();
            v87 = v348 & 7;
            v338 = v338 & 0xF0 | v348 & 0xF;
            v337 = v347;
            v89 = (v348 & 6) != 0 && v87 != 3;
            if (v87 == 1 || v89)
            {
              v90 = v335[2];
              v91 = (v90 - 64) <= 0xFFFFFF7F ? v336 : (uint64_t *)&v336;
              v92 = (v345[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v346 : v346;
              if (v90 <= 0xFFFFFFBF)
              {
                v93 = (unint64_t)(v90 + 64) >> 6;
                do
                {
                  v94 = *v92++;
                  *v91++ = v94;
                  --v93;
                }
                while (v93);
              }
            }
          }
          sub_1C47B4138((uint64_t)&v334, (uint64_t)&v312, 1);
          if (v313 == (char *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v314);
          }
          else if ((*((_DWORD *)v313 + 2) - 64) <= 0xFFFFFF7F && v314)
          {
            MEMORY[0x1CAA32F9C](v314, 0x1000C8000313F17);
          }
          v96 = *v75;
          v312 = v16;
          LODWORD(v313) = 0;
          v97 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v334, v95);
          v98 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v96 + 3))(v96, &v312, v97);
          v99 = *v75;
          v319 = v15;
          LODWORD(v320) = 1;
          LODWORD(v312) = HIDWORD(v296);
          LODWORD(v314) = 0;
          v315 = v98;
          v316 = v100;
          v317 = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, int *, uint64_t, _DWORD **, uint64_t, uint64_t))*v99 + 4))(v99, 165, &v319, 1, &v312, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          v101 = *(_QWORD *)(a2 + 24);
          v102 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v102 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v102 = a2;
              do
                v102 = *(_QWORD *)(v102 + 8);
              while ((*(_WORD *)(v102 + 44) & 8) != 0);
            }
          }
          goto LABEL_191;
        }
        v312 = (_DWORD *)&v296 + 3;
        v313 = (char *)&v296 + 8;
        v314 = (uint64_t **)((char *)&v296 + 4);
        v315 = (uint64_t)&v299;
        v344 = v15;
        v103 = v16;
        if (sub_1C49BB74C((uint64_t)&v312, v5, &v344)
          && __PAIR64__(HIDWORD(v296), HIDWORD(v296)) == *(_QWORD *)((char *)&v296 + 4))
        {
          v104 = v299;
          v105 = *(_QWORD *)(v299 + 32);
          if ((_UNKNOWN *)v105 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v345, (const llvm::detail::DoubleAPFloat *)(v299 + 32));
          }
          else
          {
            v345 = *(_DWORD **)(v299 + 32);
            if ((*(_DWORD *)(v105 + 8) + 64) >= 0x80)
              v346 = (uint64_t *)operator new[]();
            v106 = *(_BYTE *)(v104 + 52);
            v107 = v106 & 7;
            v348 = v348 & 0xF0 | v106 & 0xF;
            v347 = *(_DWORD *)(v104 + 48);
            v109 = (v106 & 6) != 0 && v107 != 3;
            if (v107 == 1 || v109)
            {
              v110 = v345[2];
              if ((v110 - 64) <= 0xFFFFFF7F)
                v111 = (uint64_t **)v346;
              else
                v111 = &v346;
              v114 = *(uint64_t ***)(v104 + 40);
              v113 = (uint64_t **)(v104 + 40);
              v112 = v114;
              if ((*((_DWORD *)*(v113 - 1) + 2) - 64) >= 0xFFFFFF80)
                v112 = v113;
              if (v110 <= 0xFFFFFFBF)
              {
                v115 = (unint64_t)(v110 + 64) >> 6;
                do
                {
                  v116 = *v112++;
                  *v111++ = v116;
                  --v115;
                }
                while (v115);
              }
            }
          }
          llvm::APFloat::APFloat((uint64_t)&v312, v345, "2.0", 3uLL);
          if (v345 == (_DWORD *)&unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v335, (const llvm::detail::DoubleAPFloat *)&v345);
          }
          else
          {
            v335 = v345;
            if ((v345[2] + 64) >= 0x80)
              v336 = (uint64_t *)operator new[]();
            v117 = v348 & 7;
            v338 = v338 & 0xF0 | v348 & 0xF;
            v337 = v347;
            v119 = (v348 & 6) != 0 && v117 != 3;
            if (v117 == 1 || v119)
            {
              v120 = v335[2];
              v121 = (v120 - 64) <= 0xFFFFFF7F ? v336 : (uint64_t *)&v336;
              v122 = (v345[2] - 64) >= 0xFFFFFF80 ? (uint64_t *)&v346 : v346;
              if (v120 <= 0xFFFFFFBF)
              {
                v123 = (unint64_t)(v120 + 64) >> 6;
                do
                {
                  v124 = *v122++;
                  *v121++ = v124;
                  --v123;
                }
                while (v123);
              }
            }
          }
          sub_1C47B4138((uint64_t)&v334, (uint64_t)&v312, 1);
          if (v313 == (char *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v314);
          }
          else if ((*((_DWORD *)v313 + 2) - 64) <= 0xFFFFFF7F && v314)
          {
            MEMORY[0x1CAA32F9C](v314, 0x1000C8000313F17);
          }
          v126 = *v295;
          v312 = v16;
          LODWORD(v313) = 0;
          v127 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v334, v125);
          v128 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v126 + 3))(v126, &v312, v127);
          v129 = *v295;
          v319 = v15;
          LODWORD(v320) = 1;
          LODWORD(v312) = HIDWORD(v296);
          LODWORD(v314) = 0;
          v315 = v128;
          v316 = v130;
          v317 = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, int *, uint64_t, _DWORD **, uint64_t, uint64_t))*v129 + 4))(v129, 165, &v319, 1, &v312, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          v101 = *(_QWORD *)(a2 + 24);
          v102 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v102 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v102 = a2;
              do
                v102 = *(_QWORD *)(v102 + 8);
              while ((*(_WORD *)(v102 + 44) & 8) != 0);
            }
          }
LABEL_191:
          sub_1C487FE80(v101 + 40, a2, *(_QWORD *)(v102 + 8));
          if (v335 == (_DWORD *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v336);
          }
          else if ((v335[2] - 64) <= 0xFFFFFF7F && v336)
          {
            MEMORY[0x1CAA32F9C](v336, 0x1000C8000313F17);
          }
          v131 = v345;
          if (v345 != (_DWORD *)&unk_1C866F1C0)
            goto LABEL_194;
          goto LABEL_240;
        }
        if ((v15 & 0x80000000) != 0)
          v133 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
        else
          v133 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
        v134 = *v133;
        if (v134)
        {
          if ((*(_BYTE *)(v134 + 3) & 1) != 0)
          {
            v103 = v16;
          }
          else
          {
            v134 = *(_QWORD *)(v134 + 24);
            v103 = v16;
            if (!v134 || (*(_BYTE *)(v134 + 3) & 1) == 0)
              goto LABEL_202;
          }
          v210 = *(_QWORD *)(v134 + 8);
          if (v210)
          {
            if (**(_WORD **)(v210 + 16) == 163 && *(_DWORD *)(v210 + 40) == 3)
            {
              v211 = *(_QWORD *)(v210 + 32);
              v212 = *(unsigned int *)(v211 + 36);
              if ((v212 & 0x80000000) != 0)
                v213 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v212 & 0x7FFFFFFF) + 8);
              else
                v213 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v212);
              v214 = *v213;
              if (v214)
              {
                if ((*(_BYTE *)(v214 + 3) & 1) != 0
                  || (v214 = *(_QWORD *)(v214 + 24)) != 0 && (*(_BYTE *)(v214 + 3) & 1) != 0)
                {
                  v281 = *(_QWORD *)(v214 + 8);
                  if (v281)
                  {
                    if (**(_WORD **)(v281 + 16) == 163 && *(_DWORD *)(v281 + 40) == 3)
                    {
                      v282 = *(_QWORD *)(v281 + 32);
                      v283 = *(_DWORD *)(v282 + 36);
                      DWORD2(v296) = *(_DWORD *)(v282 + 68);
                      HIDWORD(v296) = v283;
                      v284 = (char *)&v296 + 4;
                      goto LABEL_558;
                    }
                  }
                }
              }
              DWORD1(v296) = *(_DWORD *)(v211 + 36);
              v215 = *(unsigned int *)(v211 + 68);
              if ((v215 & 0x80000000) != 0)
                v216 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v215 & 0x7FFFFFFF) + 8);
              else
                v216 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v215);
              v217 = *v216;
              v103 = v16;
              if (!v217)
                goto LABEL_202;
              if ((*(_BYTE *)(v217 + 3) & 1) != 0)
              {
                v103 = v16;
              }
              else
              {
                v217 = *(_QWORD *)(v217 + 24);
                v103 = v16;
                if (!v217 || (*(_BYTE *)(v217 + 3) & 1) == 0)
                  goto LABEL_202;
              }
              v285 = *(_QWORD *)(v217 + 8);
              if (v285 && **(_WORD **)(v285 + 16) == 163 && *(_DWORD *)(v285 + 40) == 3)
              {
                v211 = *(_QWORD *)(v285 + 32);
                v283 = *(_DWORD *)(v211 + 36);
                HIDWORD(v296) = v283;
                v284 = (char *)&v296 + 8;
LABEL_558:
                *(_DWORD *)v284 = *(_DWORD *)(v211 + 68);
                v286 = v283 == DWORD2(v296) && v283 == DWORD1(v296);
                v103 = v16;
                if (v286)
                {
                  if (v16 == (_DWORD *)129)
                  {
                    v287 = &unk_1C866F15C;
                  }
                  else if (v16 == (_DWORD *)513)
                  {
                    v287 = &unk_1C866F198;
                  }
                  else if (v16 == (_DWORD *)257)
                  {
                    v287 = &unk_1C866F184;
                  }
                  else
                  {
                    v287 = &unk_1C866F170;
                  }
                  llvm::APFloat::APFloat((uint64_t)&v344, v287, "3.0", 3uLL);
                  v288 = *v295;
                  v312 = v16;
                  LODWORD(v313) = 0;
                  v290 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v344, v289);
                  v291 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v288 + 3))(v288, &v312, v290);
                  v292 = *v295;
                  LODWORD(v334) = v15;
                  LODWORD(v335) = 1;
                  LODWORD(v312) = HIDWORD(v296);
                  LODWORD(v314) = 0;
                  v315 = v291;
                  v316 = v293;
                  v317 = 1;
                  (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, _DWORD **, uint64_t, uint64_t))*v292
                   + 4))(v292, 165, &v334, 1, &v312, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  v161 = *(_QWORD *)(a2 + 24);
                  v162 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v162 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v162 = a2;
                      do
                        v162 = *(_QWORD *)(v162 + 8);
                      while ((*(_WORD *)(v162 + 44) & 8) != 0);
                    }
                  }
LABEL_239:
                  sub_1C487FE80(v161 + 40, a2, *(_QWORD *)(v162 + 8));
                  v131 = v345;
                  if (v345 != (_DWORD *)&unk_1C866F1C0)
                  {
LABEL_194:
                    v72 = v131[2];
                    goto LABEL_195;
                  }
LABEL_240:
                  v163 = &v344;
                  goto LABEL_241;
                }
              }
            }
          }
        }
LABEL_202:
        v312 = (_DWORD *)&v296 + 3;
        v313 = (char *)&v296 + 8;
        v314 = (uint64_t **)((char *)&v296 + 4);
        v315 = (uint64_t)&v296;
        v344 = v15;
        if (sub_1C49BBB6C(&v312, v5, &v344)
          && __PAIR64__(HIDWORD(v296), HIDWORD(v296)) == *(_QWORD *)((char *)&v296 + 4)
          && HIDWORD(v296) == (_DWORD)v296)
        {
          if (v103 == (_DWORD *)129)
          {
            v135 = &unk_1C866F15C;
          }
          else if (v103 == (_DWORD *)513)
          {
            v135 = &unk_1C866F198;
          }
          else if (v103 == (_DWORD *)257)
          {
            v135 = &unk_1C866F184;
          }
          else
          {
            v135 = &unk_1C866F170;
          }
          llvm::APFloat::APFloat((uint64_t)&v344, v135, "4.0", 3uLL);
          v155 = *v295;
          v312 = v103;
          LODWORD(v313) = 0;
          v157 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v344, v156);
          v158 = (*((uint64_t (**)(unsigned __int8 **, _DWORD **, llvm::APFloatBase *))*v155 + 3))(v155, &v312, v157);
          v159 = *v295;
          LODWORD(v334) = v15;
          LODWORD(v335) = 1;
          LODWORD(v312) = HIDWORD(v296);
          LODWORD(v314) = 0;
          v315 = v158;
          v316 = v160;
          v317 = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, _DWORD **, uint64_t, uint64_t))*v159
           + 4))(v159, 165, &v334, 1, &v312, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          v161 = *(_QWORD *)(a2 + 24);
          v162 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v162 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v162 = a2;
              do
                v162 = *(_QWORD *)(v162 + 8);
              while ((*(_WORD *)(v162 + 44) & 8) != 0);
            }
          }
          goto LABEL_239;
        }
        if ((v15 & 0x80000000) != 0)
          v136 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
        else
          v136 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v15);
        v137 = *v136;
        if (v137)
        {
          if ((*(_BYTE *)(v137 + 3) & 1) != 0
            || (v137 = *(_QWORD *)(v137 + 24)) != 0 && (*(_BYTE *)(v137 + 3) & 1) != 0)
          {
            v204 = *(_QWORD *)(v137 + 8);
            if (v204)
            {
              if (**(_WORD **)(v204 + 16) == 163 && *(_DWORD *)(v204 + 40) == 3)
              {
                v205 = *(_QWORD *)(v204 + 32);
                v206 = *(_DWORD *)(v205 + 36);
                if (v206 == *(_DWORD *)(v205 + 68))
                {
                  v207 = (uint64_t)*v295;
                  v344 = v15;
                  LODWORD(v345) = 1;
                  LODWORD(v312) = v206;
                  LODWORD(v314) = 0;
                  if (v206 < 0 && (v208 = v206 & 0x7FFFFFFF, v208 < *(_DWORD *)(v5 + 432)))
                    v209 = *(_QWORD *)(*(_QWORD *)(v5 + 424) + 8 * v208);
                  else
                    v209 = 0;
                  v334 = v209;
                  LODWORD(v335) = 0;
                  v315 = sub_1C5545FFC(v207, &v334, 2.0);
                  v316 = v231;
                  v317 = 1;
                  (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(_QWORD *)v207 + 32))(v207, 165, &v344, 1, &v312, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  v151 = *(_QWORD *)(a2 + 24);
                  v152 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v152 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v152 = a2;
                      do
                        v152 = *(_QWORD *)(v152 + 8);
                      while ((*(_WORD *)(v152 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_230;
                }
              }
            }
          }
        }
LABEL_213:
        v138 = v13 | v14;
        if (((v13 | v14) & 1) == 0 && (*(_WORD *)(a2 + 44) & 0x100) == 0)
        {
          v12 = 0;
LABEL_232:
          sub_1C48433E8((uint64_t)v300);
          return v12;
        }
        v139 = *(_QWORD *)(a2 + 32);
        v140 = (const llvm::DILocation *)*(unsigned int *)(v139 + 36);
        v141 = (const llvm::DILocation *)*(unsigned int *)(v139 + 68);
        v142 = 1;
        do
        {
          v143 = v141;
          v141 = v140;
          v144 = v142;
          v145 = sub_1C4AE29FC((uint64_t)v16, (int)v140, v143, v5, *v295, (unsigned __int8 **)(a2 + 56), v138 & 1, *(unsigned __int16 *)(a2 + 44), 1);
          if (v145)
          {
            v150 = *v295;
            v344 = v15;
            LODWORD(v345) = 1;
            LODWORD(v312) = *(_DWORD *)(*((_QWORD *)v145 + 4) + 4);
            LODWORD(v314) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, _QWORD))*v150
             + 4))(v150, 19, &v344, 1, &v312, 1, 0);
            v151 = *(_QWORD *)(a2 + 24);
            v152 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v152 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v152 = a2;
                do
                  v152 = *(_QWORD *)(v152 + 8);
                while ((*(_WORD *)(v152 + 44) & 8) != 0);
              }
            }
            goto LABEL_230;
          }
          v142 = 0;
          v140 = v143;
        }
        while ((v144 & 1) != 0);
        v294 = v15;
        v146 = 1;
        while (1)
        {
          v147 = v143;
          v148 = v146;
          v149 = sub_1C4AE29FC((uint64_t)v16, (int)v143, v141, v5, *v295, (unsigned __int8 **)(a2 + 56), v138 & 1, *(unsigned __int16 *)(a2 + 44), 0);
          if (v149)
            break;
          v146 = 0;
          v12 = 0;
          v143 = v141;
          v141 = v147;
          if ((v148 & 1) == 0)
            goto LABEL_232;
        }
        v153 = *v295;
        v344 = v294;
        LODWORD(v345) = 1;
        LODWORD(v312) = *(_DWORD *)(*((_QWORD *)v149 + 4) + 4);
        LODWORD(v314) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, _QWORD))*v153
         + 4))(v153, 19, &v344, 1, &v312, 1, 0);
        v151 = *(_QWORD *)(a2 + 24);
        v152 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v152 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v152 = a2;
            do
              v152 = *(_QWORD *)(v152 + 8);
            while ((*(_WORD *)(v152 + 44) & 8) != 0);
          }
        }
        goto LABEL_230;
      }
LABEL_433:
      v232 = *(_QWORD *)(v219 + 32);
      if ((_UNKNOWN *)v232 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v350, (const llvm::detail::DoubleAPFloat *)(v219 + 32));
      }
      else
      {
        v350 = *(_QWORD *)(v219 + 32);
        if ((*(_DWORD *)(v232 + 8) + 64) >= 0x80)
          v351 = (uint64_t *)operator new[]();
        v233 = *(_BYTE *)(v219 + 52);
        v234 = v233 & 7;
        v353 = v353 & 0xF0 | v233 & 0xF;
        v352 = *(_DWORD *)(v219 + 48);
        v236 = (v233 & 6) != 0 && v234 != 3;
        if (v234 == 1 || v236)
        {
          v238 = *(unsigned int *)(v350 + 8);
          if ((v238 - 64) <= 0xFFFFFF7F)
            v239 = v351;
          else
            v239 = (uint64_t *)&v351;
          v242 = *(uint64_t **)(v219 + 40);
          v241 = (uint64_t *)(v219 + 40);
          v240 = v242;
          if ((*(_DWORD *)(*(v241 - 1) + 8) - 64) >= 0xFFFFFF80)
            v240 = v241;
          if (v238 <= 0xFFFFFFBF)
          {
            v243 = (unint64_t)(v238 + 64) >> 6;
            do
            {
              v244 = *v240++;
              *v239++ = v244;
              --v243;
            }
            while (v243);
          }
        }
      }
      sub_1C4AE2930((uint64_t)&v312, (uint64_t)v16, (uint64_t)v349);
      if ((_UNKNOWN *)v350 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v351);
      }
      else if ((*(_DWORD *)(v350 + 8) - 64) <= 0xFFFFFF7F && v351)
      {
        MEMORY[0x1CAA32F9C](v351, 0x1000C8000313F17);
      }
      v245 = v298;
      v246 = *(_QWORD *)(v298 + 32);
      if ((_UNKNOWN *)v246 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v340, (const llvm::detail::DoubleAPFloat *)(v298 + 32));
      }
      else
      {
        v340 = *(_QWORD *)(v298 + 32);
        if ((*(_DWORD *)(v246 + 8) + 64) >= 0x80)
          v341 = (uint64_t *)operator new[]();
        v247 = *(_BYTE *)(v245 + 52);
        v248 = v247 & 7;
        v343 = v343 & 0xF0 | v247 & 0xF;
        v342 = *(_DWORD *)(v245 + 48);
        v250 = (v247 & 6) != 0 && v248 != 3;
        if (v248 == 1 || v250)
        {
          v252 = *(unsigned int *)(v340 + 8);
          if ((v252 - 64) <= 0xFFFFFF7F)
            v253 = v341;
          else
            v253 = (uint64_t *)&v341;
          v256 = *(uint64_t **)(v245 + 40);
          v255 = (uint64_t *)(v245 + 40);
          v254 = v256;
          if ((*(_DWORD *)(*(v255 - 1) + 8) - 64) >= 0xFFFFFF80)
            v254 = v255;
          if (v252 <= 0xFFFFFFBF)
          {
            v257 = (unint64_t)(v252 + 64) >> 6;
            do
            {
              v258 = *v254++;
              *v253++ = v258;
              --v257;
            }
            while (v257);
          }
        }
      }
      sub_1C4AE2930((uint64_t)&v344, (uint64_t)v16, (uint64_t)v339);
      if ((_UNKNOWN *)v340 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v341);
      }
      else if ((*(_DWORD *)(v340 + 8) - 64) <= 0xFFFFFF7F && v341)
      {
        MEMORY[0x1CAA32F9C](v341, 0x1000C8000313F17);
      }
      v259 = v313;
      if (v313 == (char *)&unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v335, (const llvm::detail::DoubleAPFloat *)&v313);
      }
      else
      {
        v335 = v313;
        if ((*((_DWORD *)v313 + 2) + 64) >= 0x80)
          v336 = (uint64_t *)operator new[]();
        v260 = BYTE4(v315) & 7;
        v338 = v338 & 0xF0 | BYTE4(v315) & 0xF;
        v337 = v315;
        v262 = (v315 & 0x600000000) != 0 && v260 != 3;
        if (v260 != 1 && !v262)
          goto LABEL_495;
        v263 = v335[2];
        if ((v263 - 64) <= 0xFFFFFF7F)
        {
          v265 = (uint64_t **)v336;
          if ((*((_DWORD *)v259 + 2) - 64) >= 0xFFFFFF80)
            v264 = (uint64_t **)&v314;
          else
            v264 = v314;
        }
        else
        {
          v264 = (uint64_t **)&v314;
          if ((*((_DWORD *)v259 + 2) - 64) < 0xFFFFFF80)
            v264 = v314;
          if (v263 > 0xFFFFFFBF)
            goto LABEL_495;
          v265 = &v336;
        }
        v266 = (unint64_t)(v263 + 64) >> 6;
        do
        {
          v267 = *v264++;
          *v265++ = v267;
          --v266;
        }
        while (v266);
      }
LABEL_495:
      sub_1C47B4138((uint64_t)&v334, (uint64_t)&v344, 1);
      v268 = *v295;
      v319 = v15;
      LODWORD(v320) = 1;
      v270 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v334, v269);
      (*((void (**)(unsigned __int8 **, int *, llvm::APFloatBase *))*v268 + 3))(v268, &v319, v270);
      v271 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v271 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v271 = a2;
          do
            v271 = *(_QWORD *)(v271 + 8);
          while ((*(_WORD *)(v271 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v271 + 8));
      if (v335 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v336);
      }
      else if ((v335[2] - 64) <= 0xFFFFFF7F && v336)
      {
        MEMORY[0x1CAA32F9C](v336, 0x1000C8000313F17);
      }
      if (v345 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v346);
      }
      else if ((v345[2] - 64) <= 0xFFFFFF7F && v346)
      {
        MEMORY[0x1CAA32F9C](v346, 0x1000C8000313F17);
      }
      if (v259 != (char *)&unk_1C866F1C0)
      {
        if ((*((_DWORD *)v259 + 2) - 64) > 0xFFFFFF7F)
          goto LABEL_231;
        v132 = (uint64_t *)v314;
        if (!v314)
          goto LABEL_231;
LABEL_197:
        MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
LABEL_231:
        v12 = 1;
        goto LABEL_232;
      }
      v163 = (unsigned int *)&v312;
LABEL_241:
      sub_1C4773C74((uint64_t *)v163 + 2);
      goto LABEL_231;
    }
    HIDWORD(v297) = v176;
LABEL_417:
    if (*(_UNKNOWN **)(v218 + 32) == &unk_1C866F1C0)
      v230 = *(_BYTE *)(*(_QWORD *)(v218 + 40) + 28);
    else
      v230 = *(_BYTE *)(v218 + 52);
    if ((v230 & 7) == 3 && (v230 & 8 | v14 & 1 || (*(_WORD *)(a2 + 44) & 0x40) != 0))
    {
      sub_1C4923194((_QWORD *)v5, a2, v176, a1[2]);
      goto LABEL_231;
    }
    goto LABEL_27;
  }
  return 0;
}

uint64_t sub_1C4AE2930(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  v5 = &unk_1C866F198;
  v6 = &unk_1C866F170;
  if (a2 == 257)
    v6 = &unk_1C866F184;
  if (a2 != 513)
    v5 = v6;
  if (a2 == 129)
    v7 = &unk_1C866F15C;
  else
    v7 = v5;
  if (v7 != *(void **)(a3 + 8)
    && (result = llvm::APFloat::convert(a3, v7, 1, &v10), v7 = *(void **)(a3 + 8), v7 == &unk_1C866F1C0))
  {
    v9 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(v4 + 8) = &unk_1C866F1C0;
    *(_QWORD *)(v4 + 16) = v9;
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v8;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 24);
    *(_BYTE *)(v4 + 28) = *(_BYTE *)(v4 + 28) & 0xF0 | *(_BYTE *)(a3 + 28) & 0xF;
  }
  *(_QWORD *)(a3 + 8) = &unk_1C866F210;
  return result;
}

int *sub_1C4AE29FC(uint64_t a1, int a2, const llvm::DILocation *a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, int a7, unsigned int a8, char a9)
{
  int v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const llvm::DILocation *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  llvm::DILocation *v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  int **v41;
  int *v42;
  int v43;
  int *v44;
  uint64_t v45;
  const llvm::DILocation *v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  llvm::DILocation *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned __int8 *v68;
  int *v69;
  unsigned __int8 *v70;
  int *result;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  llvm::DILocation *MergedLocation;
  unsigned __int8 *v85;
  BOOL v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  int *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;

  v14 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  if (a9)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    if (a2 >= 0)
      v16 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a2);
    v17 = *v16;
    if (!v17)
      return 0;
    while ((*(_BYTE *)(v17 + 3) & 1) != 0)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        return 0;
    }
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17)
        break;
      if ((*(_BYTE *)(v17 + 3) & 1) == 0)
        return 0;
    }
  }
  v18 = a5 + 4;
  v89 = (int)a3;
  if (a5 + 4 != a6)
  {
    if (*v18)
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
    v19 = *a6;
    *v18 = *a6;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)(a5 + 4), v19, 2);
  }
  v90 = 0;
  v20 = *(_QWORD *)(a4 + 24);
  v21 = (uint64_t *)(v20 + 16 * (v14 & 0x7FFFFFFF) + 8);
  v22 = *(_QWORD *)(a4 + 272);
  if (v14 >= 0)
    v21 = (uint64_t *)(v22 + 8 * v14);
  v23 = *v21;
  if (!v23
    || (*(_BYTE *)(v23 + 3) & 1) == 0 && ((v23 = *(_QWORD *)(v23 + 24)) == 0 || (*(_BYTE *)(v23 + 3) & 1) == 0)
    || (v77 = *(_QWORD *)(v23 + 8)) == 0
    || **(_WORD **)(v77 + 16) != 177
    || *(_DWORD *)(v77 + 40) != 2)
  {
    v24 = 0;
    goto LABEL_19;
  }
  v90 = *(_DWORD *)(*(_QWORD *)(v77 + 32) + 36);
  v14 = v90;
  v78 = v90 & 0x7FFFFFFF;
  if (a9)
  {
    v79 = (uint64_t *)(v20 + 16 * v78 + 8);
    if (v90 >= 0)
      v79 = (uint64_t *)(v22 + 8 * v90);
    v80 = *v79;
    if (!v80)
      return 0;
    while ((*(_BYTE *)(v80 + 3) & 1) != 0)
    {
      v80 = *(_QWORD *)(v80 + 24);
      if (!v80)
        return 0;
    }
    result = 0;
    while (1)
    {
      v80 = *(_QWORD *)(v80 + 24);
      if (!v80)
        break;
      if ((*(_BYTE *)(v80 + 3) & 1) == 0)
        return result;
    }
  }
  v81 = (uint64_t *)(v20 + 16 * v78 + 8);
  v82 = (uint64_t *)(v22 + 8 * v90);
  if (v90 >= 0)
    v81 = v82;
  v83 = *v81;
  if ((*(_BYTE *)(v83 + 3) & 1) == 0)
    v83 = *(_QWORD *)(v83 + 24);
  MergedLocation = llvm::DILocation::getMergedLocation((llvm::DILocation *)*v18, *(const llvm::DILocation **)(*(_QWORD *)(v83 + 8) + 56), a3);
  v91 = (unsigned __int8 *)MergedLocation;
  if (MergedLocation)
    llvm::MetadataTracking::track((uint64_t)&v91, (unsigned __int8 *)MergedLocation, 2);
  if (&v91 != v18)
  {
    if (*v18)
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
    v85 = v91;
    *v18 = v91;
    if (!v85)
      goto LABEL_141;
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v85, 2);
  }
  if (v91)
    llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
LABEL_141:
  v24 = 1;
LABEL_19:
  v88 = v24;
  if ((~a8 & 0x7C0) == 0 || a7)
  {
    v91 = (unsigned __int8 *)&v90;
    v92 = &v90;
    LODWORD(v98) = v14;
    if (sub_1C49B9E58((_DWORD **)&v91, a4, (unsigned int *)&v98))
    {
      do
      {
        v14 = v90;
        v26 = *(_QWORD *)(a4 + 24);
        v27 = *(_QWORD *)(a4 + 272);
        v28 = v90 & 0x7FFFFFFF;
        if (a9)
        {
          v29 = (uint64_t *)(v26 + 16 * v28 + 8);
          if (v90 >= 0)
            v29 = (uint64_t *)(v27 + 8 * v90);
          v30 = *v29;
          if (!v30)
            return 0;
          while ((*(_BYTE *)(v30 + 3) & 1) != 0)
          {
            v30 = *(_QWORD *)(v30 + 24);
            if (!v30)
              return 0;
          }
          while (1)
          {
            v30 = *(_QWORD *)(v30 + 24);
            if (!v30)
              break;
            if ((*(_BYTE *)(v30 + 3) & 1) == 0)
              return 0;
          }
        }
        v31 = v26 + 16 * v28 + 8;
        v32 = (uint64_t *)(v27 + 8 * v90);
        if (v90 < 0)
          v32 = (uint64_t *)v31;
        v33 = *v32;
        if ((*(_BYTE *)(v33 + 3) & 1) == 0)
          v33 = *(_QWORD *)(v33 + 24);
        v34 = llvm::DILocation::getMergedLocation((llvm::DILocation *)*v18, *(const llvm::DILocation **)(*(_QWORD *)(v33 + 8) + 56), v25);
        v91 = (unsigned __int8 *)v34;
        if (v34)
          llvm::MetadataTracking::track((uint64_t)&v91, (unsigned __int8 *)v34, 2);
        if (&v91 != v18)
        {
          if (*v18)
            llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
          v35 = v91;
          *v18 = v91;
          if (!v35)
            goto LABEL_41;
          llvm::MetadataTracking::track((uint64_t)(a5 + 4), v35, 2);
        }
        if (v91)
          llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
LABEL_41:
        v91 = (unsigned __int8 *)&v90;
        v92 = &v90;
        LODWORD(v98) = v14;
      }
      while ((sub_1C49B9E58((_DWORD **)&v91, a4, (unsigned int *)&v98) & 1) != 0);
    }
  }
  v36 = v14;
  if (v14 < 0
    && (v14 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432)
    && *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v14 & 0x7FFFFFFF)) == 257
    || v89 < 0
    && (v89 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432)
    && *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v89 & 0x7FFFFFFF)) == 257)
  {
    v37 = 257;
    v38 = a1 == 257;
    if (a1 != 257 && !a9)
      return 0;
  }
  else
  {
    v38 = 1;
    v37 = a1;
  }
  v39 = a8;
  v40 = a1;
  v41 = (int **)(*(_QWORD *)(a4 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  if (v14 >= 0)
    v41 = (int **)(*(_QWORD *)(a4 + 272) + 8 * v14);
  v42 = *v41;
  v43 = **v41;
  v44 = *v41;
  if ((v43 & 0x1000000) == 0)
    v44 = (int *)*((_QWORD *)v42 + 3);
  v45 = *((_QWORD *)v44 + 1);
  if (**(_WORD **)(v45 + 16) != 165 || (a7 & 1) == 0 && (*(_WORD *)(v45 + 44) & 0x100) == 0)
    return 0;
  v87 = v37;
  v86 = v38;
  if (!sub_1C4AFB760(v36, a4))
    return 0;
  if ((v43 & 0x1000000) != 0)
  {
    v47 = v40;
    v48 = v39;
    while (1)
    {
      v42 = (int *)*((_QWORD *)v42 + 3);
      if (!v42)
        break;
      if ((*((_BYTE *)v42 + 3) & 1) == 0)
        goto LABEL_69;
    }
    v49 = 0;
  }
  else
  {
    v47 = v40;
    v48 = v39;
    do
    {
LABEL_69:
      v42 = (int *)*((_QWORD *)v42 + 3);
      v49 = v42 == 0;
    }
    while (v42 && (*((_BYTE *)v42 + 3) & 1) != 0);
  }
  v50 = *(_QWORD *)(v45 + 32);
  v51 = *(_DWORD *)(v50 + 36);
  v52 = *(_DWORD *)(v50 + 68);
  v53 = llvm::DILocation::getMergedLocation((llvm::DILocation *)*v18, *(const llvm::DILocation **)(v45 + 56), v46);
  v91 = (unsigned __int8 *)v53;
  if (v53)
    llvm::MetadataTracking::track((uint64_t)&v91, (unsigned __int8 *)v53, 2);
  if (&v91 != v18)
  {
    if (*v18)
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
    v54 = v91;
    *v18 = v91;
    if (!v54)
      goto LABEL_79;
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v54, 2);
  }
  if (v91)
    llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
LABEL_79:
  if (v51 < 0)
  {
    v55 = v51;
    v57 = v88;
    if ((v51 & 0x7FFFFFFFu) >= *(_DWORD *)(a4 + 432))
      v56 = 0;
    else
      v56 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v51 & 0x7FFFFFFF));
  }
  else
  {
    v55 = v51;
    v56 = 0;
    v57 = v88;
  }
  if (v52 < 0 && (v52 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432))
    v58 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v52 & 0x7FFFFFFF));
  else
    v58 = 0;
  if (v57)
  {
    v98 = v56;
    v99 = 0;
    LODWORD(v91) = v55;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, uint64_t))*a5
     + 4))(a5, 177, &v98, 1, &v91, 1, v48 | 0x100000000);
    v55 = *(_DWORD *)(*(_QWORD *)(v59 + 32) + 4);
  }
  v60 = v87;
  if (v56 == v87)
  {
    v61 = v55;
  }
  else
  {
    v98 = v87;
    v99 = 0;
    LODWORD(v91) = v55;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 178, &v98, 1, &v91, 1, 0);
    v60 = v87;
    v61 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
  }
  if (v58 != v60)
  {
    v98 = v60;
    v99 = 0;
    LODWORD(v91) = v52;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 178, &v98, 1, &v91, 1, 0);
    v60 = v87;
    v52 = *(_DWORD *)(*(_QWORD *)(v63 + 32) + 4);
  }
  v64 = v89;
  if (v89 < 0 && (v89 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432))
    v65 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v89 & 0x7FFFFFFF));
  else
    v65 = 0;
  if (v65 != v60)
  {
    v98 = v60;
    v99 = 0;
    LODWORD(v91) = v89;
    v93 = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 178, &v98, 1, &v91, 1, 0);
    v60 = v87;
    v64 = *(_DWORD *)(*(_QWORD *)(v66 + 32) + 4);
  }
  v67 = !v49;
  if (v18 == a6)
    v67 = 1;
  if ((v67 & 1) == 0)
  {
    if (*v18)
    {
      v75 = v52;
      v76 = v64;
      llvm::MetadataTracking::untrack((uint64_t)(a5 + 4), *v18);
      v60 = v87;
      v64 = v76;
      v52 = v75;
    }
    v68 = *a6;
    *v18 = *a6;
    if (v68)
    {
      v73 = v52;
      v74 = v64;
      llvm::MetadataTracking::track((uint64_t)(a5 + 4), v68, 2);
      v60 = v87;
      v64 = v74;
      v52 = v73;
    }
  }
  v98 = v60;
  v99 = 0;
  LODWORD(v91) = v61;
  v93 = 0;
  v94 = v52;
  v95 = 0;
  v96 = v64;
  v97 = 0;
  v70 = (unsigned __int8 *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, uint64_t))*a5
                            + 4))(a5, 166, &v98, 1, &v91, 3, v48 | 0x100000000);
  result = v69;
  if (!v86)
  {
    v98 = v47;
    v99 = 0;
    v91 = v70;
    v92 = v69;
    v93 = 1;
    (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))*a5
     + 4))(a5, 179, &v98, 1, &v91, 1, 0);
    return (int *)v72;
  }
  return result;
}

uint64_t sub_1C4AE322C(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;

  v6 = sub_1C4825F50(a3);
  if ((_DWORD)v7 == 1)
  {
    v11 = v6;
    v6 = v11;
  }
  v17 = v6;
  if (v6 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, -1, 1);
  }
  else
  {
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6)
      v8 = 0;
    v16 = v8;
  }
  v13 = 1;
  v12 = 0;
  v15 = 1;
  v14 = 0;
  v9 = sub_1C4AE7668(a1, a2, a3, (uint64_t)&v16, &v12, 0, 0);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v17 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_1C4AE3384(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v36;
  char v37;
  unint64_t v38;
  void *v39;
  int v40;
  int v41;
  void *v42;
  int v43;
  void *v44;
  uint64_t v45;
  _DWORD v46[4];
  uint64_t v47;

  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = a1 & 0x7FFFFFFF;
  if ((a1 & 0x80000000) != 0
    && v8 < *(unsigned int *)(a2 + 432)
    && (v7 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v8), (v7 & 2) != 0))
  {
    v36 = 35;
    v37 = 19;
    if ((v7 & 4) == 0)
      v36 = 19;
    v38 = v7 >> v36;
    if ((v7 & 4) == 0)
      v37 = 3;
    if ((v7 & 1) != 0)
      v37 = 3;
    v10 = (void *)((8 * (unsigned __int16)(v7 >> v37)) & 0xFFFFF8000007FFFFLL | ((v38 & 0xFFFFFF) << 19) | 2);
    v11 = 0x800000000000000;
  }
  else
  {
    v9 = 3;
    if ((v7 & 1) == 0)
      v9 = 19;
    v10 = (void *)(v7 & 0x8000000000000000 | (8 * (v7 >> v9)) | 1);
    v11 = 0x8000000000000;
  }
  v12 = *(_QWORD *)(a2 + 24) + 16 * v8 + 8;
  v13 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  if ((a1 & 0x80000000) != 0)
    v13 = (uint64_t *)v12;
  v14 = *v13;
  if (v14 && ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0))
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = 0;
  if ((v7 & v11) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  v16 = **(unsigned __int16 **)(v15 + 16);
  if (v16 == 119)
  {
    v44 = v46;
    v45 = 0x400000000;
    if (sub_1C4AE3384(*(unsigned int *)(*(_QWORD *)(v15 + 32) + 36), a2, a3, &v44))
    {
      if ((_DWORD)v45)
      {
        v17 = 0;
        do
        {
          v42 = v10;
          v43 = 0;
          LODWORD(v39) = *((_DWORD *)v44 + v17);
          v41 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v42, 1, &v39, 1, 0);
          v19 = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 4);
          v20 = *(unsigned int *)(a4 + 8);
          if (v20 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v20 + 1, 4);
            v20 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v20) = v19;
          ++*(_DWORD *)(a4 + 8);
          ++v17;
        }
        while (v17 < v45);
      }
      if (v44 != v46)
        free(v44);
      return 1;
    }
    if (v44 != v46)
      free(v44);
    v16 = **(unsigned __int16 **)(v15 + 16);
  }
  v21 = (unsigned __int16)(v7 >> 3);
  if (v16 == 78)
  {
    if (*(_DWORD *)(v15 + 40) == v21 + 1)
    {
      if (v21)
      {
        v30 = 0;
        v31 = 32 * v21;
        do
        {
          v39 = v10;
          v40 = 0;
          LODWORD(v44) = *(_DWORD *)(*(_QWORD *)(v15 + 32) + v30 + 36);
          v46[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v39, 1, &v44, 1, 0);
          v33 = *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4);
          v34 = *(unsigned int *)(a4 + 8);
          if (v34 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v34 + 1, 4);
            v34 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v34) = v33;
          ++*(_DWORD *)(a4 + 8);
          v30 += 32;
        }
        while (v31 != v30);
      }
      return 1;
    }
    return 0;
  }
  if (v16 == 77)
  {
    if (*(_DWORD *)(v15 + 40) == v21 + 1)
    {
      if (v21)
      {
        v26 = 0;
        v27 = *(_DWORD *)(a4 + 8);
        v28 = 32 * v21;
        do
        {
          v29 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + v26 + 36);
          if (v27 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v27 + 1, 4);
            v27 = *(_DWORD *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v27) = v29;
          v27 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v27;
          v26 += 32;
        }
        while (v28 != v26);
      }
      return 1;
    }
    return 0;
  }
  if (v16 != 68)
    return 0;
  v44 = v10;
  LODWORD(v45) = 0;
  v22 = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 68, &v44, 1, 0, 0, 0);
  if (v21)
  {
    v24 = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 4);
    v25 = *(_DWORD *)(a4 + 8);
    do
    {
      if (v25 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v25 + 1, 4);
        v25 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v25) = v24;
      v25 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v25;
      --v21;
    }
    while (v21);
    return 1;
  }
  return v22;
}

uint64_t sub_1C4AE37E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const llvm::APInt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  const llvm::APInt *v34;
  char v35;
  int v36;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  const llvm::APFloat *v56;
  uint64_t v57;
  llvm::APFloatBase *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  const llvm::APInt *v82;
  uint64_t v83;
  const llvm::APInt *v84;
  uint64_t *v85;
  const llvm::detail::DoubleAPFloat *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  _DWORD *v91;
  uint64_t *v92;
  _DWORD *v93;
  const llvm::APInt *v94;
  int v95;
  char v96;
  int v97;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t **v102;
  unint64_t v103;
  uint64_t *v104;
  int v105;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  const llvm::APFloat *v113;
  uint64_t v114;
  llvm::APFloatBase *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const llvm::APInt *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  BOOL v140;
  char v141;
  int v142;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  _BOOL4 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  int v163;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const llvm::APFloat *v172;
  llvm::APFloatBase *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  _BOOL4 v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  int v191;
  _BOOL4 v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  _BOOL4 v203;
  uint64_t v204;
  uint64_t **v205;
  uint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const llvm::APFloat *v210;
  llvm::APFloatBase *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  BOOL v230;
  BOOL v231;
  char v232;
  int v233;
  _BOOL4 v235;
  int v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  int v244;
  _BOOL4 v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  _BOOL4 v256;
  uint64_t v257;
  uint64_t **v258;
  uint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  const llvm::APFloat *v263;
  llvm::APFloatBase *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  int v270;
  _BOOL4 v272;
  uint64_t v273;
  uint64_t **v274;
  uint64_t **v275;
  unint64_t v276;
  uint64_t *v277;
  int v278;
  _BOOL4 v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  const llvm::APFloat *v286;
  uint64_t v287;
  llvm::APFloatBase *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  int v293;
  _BOOL4 v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t **v298;
  unint64_t v299;
  uint64_t *v300;
  int v301;
  _BOOL4 v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  const llvm::APFloat *v309;
  uint64_t v310;
  llvm::APFloatBase *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  int v317;
  _BOOL4 v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  int v327;
  _BOOL4 v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  int v337;
  _BOOL4 v339;
  uint64_t v340;
  uint64_t **v341;
  uint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  const llvm::APFloat *v346;
  llvm::APFloatBase *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  llvm::ConstantFP ****v353;
  const llvm::APInt *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int v366;
  _OWORD v367[2];
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  __int16 v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  __int128 v377;
  uint64_t v378;
  char v379[8];
  uint64_t v380;
  uint64_t *v381;
  int v382;
  char v383;
  char v384[8];
  _DWORD *v385;
  uint64_t *v386;
  int v387;
  char v388;
  char v389[8];
  uint64_t v390;
  uint64_t *v391;
  int v392;
  char v393;
  char v394[8];
  _DWORD *v395;
  uint64_t *v396;
  int v397;
  char v398;
  char v399[8];
  uint64_t v400;
  uint64_t *v401;
  int v402;
  char v403;
  char v404[8];
  _DWORD *v405;
  uint64_t *v406;
  int v407;
  char v408;
  int v409;
  int v410;
  int v411;
  unsigned int *v412;
  uint64_t *v413;
  int v414;
  char v415;
  char v416[8];
  uint64_t v417;
  uint64_t *v418;
  int v419;
  char v420;
  char v421[8];
  _DWORD *v422;
  uint64_t *v423;
  int v424;
  char v425;
  unint64_t v426;
  const llvm::APInt *v427;
  unsigned int *v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  int v432;
  int v433;
  char v434[8];
  uint64_t v435;
  uint64_t *v436;
  int v437;
  char v438;
  char v439[8];
  unsigned int *v440;
  uint64_t *v441;
  int v442;
  char v443;
  char v444[8];
  uint64_t v445;
  uint64_t *v446;
  int v447;
  char v448;
  const llvm::APInt *v449;
  unsigned int *v450;
  uint64_t *v451;
  int v452;
  char v453;
  uint64_t v454;

  v454 = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 166)
    return 0;
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD **)(v4 + 40);
  v6 = *(unsigned int **)(a2 + 32);
  v7 = (const char *)v6[9];
  v8 = (const char *)v6[17];
  v357 = v6[25];
  v9 = v6[1];
  if ((v9 & 0x80000000) != 0 && (v9 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v5 + 108))
    v10 = *(const llvm::APInt **)(v5[53] + 8 * (v9 & 0x7FFFFFFF));
  else
    v10 = 0;
  v12 = v5[3];
  v13 = (uint64_t *)(v12 + 16 * (v7 & 0x7FFFFFFF) + 8);
  v14 = v5[34];
  if ((int)v7 >= 0)
    v13 = (uint64_t *)(v14 + 8 * (_QWORD)v7);
  v15 = *v13;
  if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v356 = v9;
  v16 = *(_QWORD *)(v15 + 8);
  if (**(_WORD **)(v16 + 16) == 121)
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 48);
  else
    v17 = 0;
  v18 = (uint64_t *)(v12 + 16 * (v8 & 0x7FFFFFFF) + 8);
  v19 = (uint64_t *)(v14 + 8 * (_QWORD)v8);
  if ((int)v8 >= 0)
    v18 = v19;
  v20 = *v18;
  if ((*(_BYTE *)(v20 + 3) & 1) == 0)
    v20 = *(_QWORD *)(v20 + 24);
  v21 = *(_QWORD *)(v20 + 8);
  if (**(_WORD **)(v21 + 16) == 121)
    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 48);
  else
    v22 = 0;
  v353 = *(llvm::ConstantFP *****)(*a1 + 8);
  v354 = v10;
  v23 = *(_QWORD *)(v4 + 8);
  v24 = *(_OWORD *)(v23 + 1024);
  v367[0] = *(_OWORD *)(v23 + 1008);
  v367[1] = v24;
  v25 = *(_QWORD *)(v23 + 1048);
  v368 = *(_QWORD *)(v23 + 1040);
  v369 = v25;
  v26 = *(_QWORD *)(v23 + 1056);
  v370 = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v371 = *(_WORD *)(v23 + 1064);
  if (*(char *)(v23 + 1095) < 0)
  {
    sub_1C47EBC30(&v372, *(void **)(v23 + 1072), *(_QWORD *)(v23 + 1080));
  }
  else
  {
    v372 = *(_OWORD *)(v23 + 1072);
    v373 = *(_QWORD *)(v23 + 1088);
  }
  v374 = *(_OWORD *)(v23 + 1096);
  v375 = *(_OWORD *)(v23 + 1112);
  sub_1C4843224((uint64_t)&v376, (uint64_t *)(v23 + 1128));
  v355 = v22;
  if (*(char *)(v23 + 1311) < 0)
  {
    sub_1C47EBC30(&v377, *(void **)(v23 + 1288), *(_QWORD *)(v23 + 1296));
  }
  else
  {
    v377 = *(_OWORD *)(v23 + 1288);
    v378 = *(_QWORD *)(v23 + 1304);
  }
  v29 = BYTE12(v367[0]);
  v358 = *(unsigned __int16 *)(a2 + 44);
  v30 = *a1;
  *(_QWORD *)(v30 + 40) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v30 + 48) = a2;
  sub_1C54EB4A0(a1[3], v7, (uint64_t)&v363);
  sub_1C54EB4A0(a1[3], v8, (uint64_t)&v359);
  v31 = v364;
  if (v364)
  {
    if (v364 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v363) == v31)
        goto LABEL_38;
    }
    else if (v363 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v364)
    {
      goto LABEL_38;
    }
    v32 = v360;
    if (v360)
    {
      if (v360 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v359) != v32)
          goto LABEL_40;
      }
      else if (v359 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v360)
      {
        goto LABEL_40;
      }
    }
  }
LABEL_38:
  if ((BYTE12(v367[0]) & 1) != 0)
    goto LABEL_99;
  if ((v358 & 0x10) != 0)
  {
    if ((v358 & 0x40) != 0)
      goto LABEL_99;
    v65 = &v365;
    v66 = v366 - 1;
    if (v366 >= 0x41)
      v65 = (uint64_t *)(v365 + 8 * (v66 >> 6));
    if ((((unint64_t)*v65 >> v66) & 1) != 0)
    {
      v67 = &v361;
      v68 = v362 - 1;
      if (v362 >= 0x41)
        v67 = (uint64_t *)(v361 + 8 * (v68 >> 6));
      if ((((unint64_t)*v67 >> v68) & 1) != 0)
      {
LABEL_99:
        sub_1C54F8CF8((_QWORD *)a1[2], (uint64_t)v5, v356);
        v69 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v5 + 16) + 176))(*(_QWORD *)(*v5 + 16));
        if ((v356 & 0x80000000) != 0)
          v70 = (uint64_t *)(v5[3] + 16 * (v356 & 0x7FFFFFFF) + 8);
        else
          v70 = (uint64_t *)(v5[34] + 8 * v356);
        v71 = *v70;
        if (*v70)
        {
          do
          {
            v72 = *(_QWORD *)(v71 + 24);
            if ((v357 - 1) <= 0x3FFFFFFE)
              llvm::MachineOperand::substPhysReg((unsigned int *)v71, v357, v69);
            else
              llvm::MachineOperand::setReg(v71, v357);
            v71 = v72;
          }
          while (v72);
        }
        sub_1C54F8DA0(a1[2]);
        v73 = *(_QWORD *)(a2 + 24);
        v74 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v74 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v74 = a2;
            do
              v74 = *(_QWORD *)(v74 + 8);
            while ((*(_WORD *)(v74 + 44) & 8) != 0);
          }
        }
        goto LABEL_109;
      }
    }
  }
LABEL_40:
  if (!v17 || !v355)
  {
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 32))(a1[2], a2);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, v8);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 64, v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], a2);
      goto LABEL_110;
    }
    if (!v355)
      goto LABEL_648;
    LODWORD(v427) = 64;
    v426 = 0x3FF0000000000000;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v449, (const llvm::APInt **)&v426);
    v427 = v449;
    v428 = v450;
    LODWORD(v429) = (_DWORD)v451;
    BYTE4(v429) = BYTE4(v451) & 0xF;
    v76 = (void **)(v355 + 32);
    v77 = v355 + 24;
    llvm::APFloat::convert((uint64_t)&v426, *(void **)(v355 + 32), 1, &v449);
    v78 = sub_1C47ECB98(v355 + 24, (uint64_t)&v426);
    if (v427 == (const llvm::APInt *)&unk_1C866F1C0)
    {
      v351 = v78;
      sub_1C4773C74((uint64_t *)&v428);
    }
    else
    {
      if ((*((_DWORD *)v427 + 2) - 64) > 0xFFFFFF7F || !v428)
      {
LABEL_128:
        if (v78)
        {
          v79 = *a1;
          LODWORD(v449) = v356;
          LODWORD(v450) = 1;
          LODWORD(v426) = (_DWORD)v7;
          LODWORD(v428) = 0;
          LODWORD(v429) = v357;
          v431 = 0;
          (*(void (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v79 + 32))(v79, 163, &v449, 1, &v426, 2, v358 | 0x100000000);
          v73 = *(_QWORD *)(a2 + 24);
          v74 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v74 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v74 = a2;
              do
                v74 = *(_QWORD *)(v74 + 8);
              while ((*(_WORD *)(v74 + 44) & 8) != 0);
            }
          }
LABEL_109:
          sub_1C487FE80(v73 + 40, a2, *(_QWORD *)(v74 + 8));
LABEL_110:
          v11 = 1;
          goto LABEL_111;
        }
        LODWORD(v427) = 64;
        v426 = 0xBFF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v449, (const llvm::APInt **)&v426);
        v427 = v449;
        v428 = v450;
        LODWORD(v429) = (_DWORD)v451;
        BYTE4(v429) = BYTE4(v451) & 0xF;
        llvm::APFloat::convert((uint64_t)&v426, *v76, 1, &v449);
        v80 = sub_1C47ECB98(v77, (uint64_t)&v426);
        if (v427 == (const llvm::APInt *)&unk_1C866F1C0)
        {
          v352 = v80;
          sub_1C4773C74((uint64_t *)&v428);
        }
        else
        {
          if ((*((_DWORD *)v427 + 2) - 64) > 0xFFFFFF7F || !v428)
          {
LABEL_138:
            if (v80)
            {
              v81 = *a1;
              v449 = v354;
              LODWORD(v450) = 0;
              LODWORD(v426) = (_DWORD)v7;
              LODWORD(v428) = 0;
              v82 = (const llvm::APInt *)(*(uint64_t (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v81 + 32))(v81, 177, &v449, 1, &v426, 1, v358 | 0x100000000);
              v83 = *a1;
              LODWORD(v449) = v356;
              LODWORD(v450) = 1;
              v426 = (unint64_t)v82;
              v427 = v84;
              LODWORD(v428) = 1;
              LODWORD(v429) = v357;
              v431 = 0;
              (*(void (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v83 + 32))(v83, 163, &v449, 1, &v426, 2, v358 | 0x100000000);
              v73 = *(_QWORD *)(a2 + 24);
              v74 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v74 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v74 = a2;
                  do
                    v74 = *(_QWORD *)(v74 + 8);
                  while ((*(_WORD *)(v74 + 44) & 8) != 0);
                }
              }
              goto LABEL_109;
            }
            if ((v7 & 0x80000000) != 0)
              v85 = (uint64_t *)(v5[3] + 16 * (v7 & 0x7FFFFFFF) + 8);
            else
              v85 = (uint64_t *)(v5[34] + 8 * (_QWORD)v7);
            v86 = (const llvm::detail::DoubleAPFloat *)(v355 + 32);
            v87 = *v85;
            if ((*(_BYTE *)(v87 + 3) & 1) == 0)
              v87 = *(_QWORD *)(v87 + 24);
            v88 = *(_QWORD *)(v87 + 8);
            v89 = **(unsigned __int16 **)(v88 + 16);
            if (v89 == 177)
            {
              v90 = *(_DWORD *)(*(_QWORD *)(v88 + 32) + 36);
              if (v90 != (_DWORD)v357)
              {
                v93 = *v76;
                if (*v76 == &unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v450, (const llvm::detail::DoubleAPFloat *)v76);
                  v94 = v354;
                  v95 = v357;
                }
                else
                {
                  v450 = (unsigned int *)*v76;
                  v94 = v354;
                  v95 = v357;
                  if ((v93[2] + 64) >= 0x80)
                    v451 = (uint64_t *)operator new[]();
                  v96 = *(_BYTE *)(v355 + 52);
                  v97 = v96 & 7;
                  v453 = v453 & 0xF0 | v96 & 0xF;
                  v452 = *(_DWORD *)(v355 + 48);
                  v99 = (v96 & 6) != 0 && v97 != 3;
                  if (v97 == 1 || v99)
                  {
                    v100 = v450[2];
                    if ((v100 - 64) <= 0xFFFFFF7F)
                      v101 = (uint64_t **)v451;
                    else
                      v101 = &v451;
                    v102 = *(uint64_t ***)(v355 + 40);
                    if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                      v102 = (uint64_t **)(v355 + 40);
                    if (v100 <= 0xFFFFFFBF)
                    {
                      v103 = (unint64_t)(v100 + 64) >> 6;
                      do
                      {
                        v104 = *v102++;
                        *v101++ = v104;
                        --v103;
                      }
                      while (v103);
                    }
                  }
                }
                llvm::APFloat::APFloat((uint64_t)&v426, v450, "-1.0", 4uLL);
                if (v450 == (unsigned int *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v440, (const llvm::detail::DoubleAPFloat *)&v450);
                }
                else
                {
                  v440 = v450;
                  if (v450[2] + 64 >= 0x80)
                    v441 = (uint64_t *)operator new[]();
                  v105 = v453 & 7;
                  v443 = v443 & 0xF0 | v453 & 0xF;
                  v442 = v452;
                  v107 = (v453 & 6) != 0 && v105 != 3;
                  if (v105 == 1 || v107)
                  {
                    v108 = v440[2];
                    v109 = (v108 - 64) <= 0xFFFFFF7F ? v441 : (uint64_t *)&v441;
                    v110 = v450[2] - 64 >= 0xFFFFFF80 ? (uint64_t *)&v451 : v451;
                    if (v108 <= 0xFFFFFFBF)
                    {
                      v111 = (unint64_t)(v108 + 64) >> 6;
                      do
                      {
                        v112 = *v110++;
                        *v109++ = v112;
                        --v111;
                      }
                      while (v111);
                    }
                  }
                }
                sub_1C48DB628((uint64_t)v439, (uint64_t)&v426, 1);
                if (v427 == (const llvm::APInt *)&unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v428);
                }
                else if ((*((_DWORD *)v427 + 2) - 64) <= 0xFFFFFF7F && v428)
                {
                  MEMORY[0x1CAA32F9C](v428, 0x1000C8000313F17);
                }
                v114 = *a1;
                v426 = (unint64_t)v94;
                LODWORD(v427) = 0;
                v115 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)v439, v113);
                v116 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v114 + 24))(v114, &v426, v115);
                v117 = *a1;
                v411 = v356;
                LODWORD(v412) = 1;
                LODWORD(v426) = v90;
                LODWORD(v428) = 0;
                v429 = v116;
                v430 = v118;
                v431 = 1;
                v432 = v95;
                v433 = 0;
                (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v117 + 32))(v117, 166, &v411, 1, &v426, 3, v358 | 0x100000000);
                v119 = *(_QWORD *)(a2 + 24);
                v120 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v120 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v120 = a2;
                    do
                      v120 = *(_QWORD *)(v120 + 8);
                    while ((*(_WORD *)(v120 + 44) & 8) != 0);
                  }
                }
                goto LABEL_485;
              }
            }
            v91 = *v76;
            if (*v76 == &unk_1C866F1C0)
              v77 = *(_QWORD *)(v355 + 40);
            if ((*(_BYTE *)(v77 + 28) & 7) == 3 && ((BYTE12(v367[0]) & 1) != 0 || (v358 & 0x50) == 0x50))
            {
              v121 = *a1;
              LODWORD(v449) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
              LODWORD(v450) = 1;
              LODWORD(v426) = v357;
              LODWORD(v428) = 0;
              (*(void (**)(uint64_t, uint64_t, const llvm::APInt **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 19, &v449, 1, &v426, 1, 0);
              v73 = *(_QWORD *)(a2 + 24);
              v74 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v74 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v74 = a2;
                  do
                    v74 = *(_QWORD *)(v74 + 8);
                  while ((*(_WORD *)(v74 + 44) & 8) != 0);
                }
              }
              goto LABEL_109;
            }
            if (!(v29 & 1 | ((~(_DWORD)v358 & 0x500) == 0)))
              goto LABEL_648;
            if ((v357 & 0x80000000) != 0)
              v92 = (uint64_t *)(v5[3] + 16 * (v357 & 0x7FFFFFFF) + 8);
            else
              v92 = (uint64_t *)(v5[34] + 8 * v357);
            v122 = v354;
            v123 = *v92;
            if ((*(_BYTE *)(v123 + 3) & 1) == 0)
              v123 = *(_QWORD *)(v123 + 24);
            v124 = *(_QWORD *)(v123 + 8);
            v125 = **(unsigned __int16 **)(v124 + 16);
            if (v125 != 165)
              goto LABEL_357;
            v126 = *(_QWORD *)(v124 + 32);
            v127 = *(unsigned int *)(v126 + 36);
            v128 = *(unsigned int *)(v126 + 68);
            v129 = v5[3];
            v130 = (uint64_t *)(v129 + 16 * (v127 & 0x7FFFFFFF) + 8);
            v131 = v5[34];
            if ((int)v127 >= 0)
              v130 = (uint64_t *)(v131 + 8 * v127);
            v132 = *v130;
            if ((*(_BYTE *)(v132 + 3) & 1) == 0)
              v132 = *(_QWORD *)(v132 + 24);
            v133 = *(_QWORD *)(v132 + 8);
            if (**(_WORD **)(v133 + 16) == 121)
              v134 = *(_QWORD *)(*(_QWORD *)(v133 + 32) + 48);
            else
              v134 = 0;
            v135 = (uint64_t *)(v129 + 16 * (v128 & 0x7FFFFFFF) + 8);
            v136 = (uint64_t *)(v131 + 8 * v128);
            if ((int)v128 >= 0)
              v135 = v136;
            v137 = *v135;
            if ((*(_BYTE *)(v137 + 3) & 1) == 0)
              v137 = *(_QWORD *)(v137 + 24);
            v138 = *(_QWORD *)(v137 + 8);
            if (**(_WORD **)(v138 + 16) != 121)
            {
              v139 = 0;
              v140 = v134 == 0;
              goto LABEL_224;
            }
            v179 = *(_QWORD *)(*(_QWORD *)(v138 + 32) + 48);
            v140 = v134 == 0;
            v139 = v179 != 0;
            if (v134)
            {
              v122 = v354;
              v86 = (const llvm::detail::DoubleAPFloat *)(v355 + 32);
              goto LABEL_224;
            }
            v122 = v354;
            v86 = (const llvm::detail::DoubleAPFloat *)(v355 + 32);
            if (!v179)
            {
LABEL_224:
              if (!v140 && !v139 && (_DWORD)v7 == (_DWORD)v128)
              {
                if (v91 == (_DWORD *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v405, v86);
                }
                else
                {
                  v405 = *v76;
                  if ((v91[2] + 64) >= 0x80)
                    v406 = (uint64_t *)operator new[]();
                  v141 = *(_BYTE *)(v355 + 52);
                  v142 = v141 & 7;
                  v408 = v408 & 0xF0 | v141 & 0xF;
                  v407 = *(_DWORD *)(v355 + 48);
                  v144 = (v141 & 6) != 0 && v142 != 3;
                  if (v142 == 1 || v144)
                  {
                    v145 = v405[2];
                    if ((v145 - 64) <= 0xFFFFFF7F)
                      v146 = v406;
                    else
                      v146 = (uint64_t *)&v406;
                    v147 = *(uint64_t **)(v355 + 40);
                    if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                      v147 = (uint64_t *)(v355 + 40);
                    if (v145 <= 0xFFFFFFBF)
                    {
                      v148 = (unint64_t)(v145 + 64) >> 6;
                      do
                      {
                        v149 = *v147++;
                        *v146++ = v149;
                        --v148;
                      }
                      while (v148);
                    }
                  }
                }
                sub_1C4AE2930((uint64_t)&v449, (uint64_t)v122, (uint64_t)v404);
                if (v405 == (_DWORD *)&unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v406);
                }
                else if ((v405[2] - 64) <= 0xFFFFFF7F && v406)
                {
                  MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                }
                v150 = *(_QWORD *)(v134 + 32);
                if ((_UNKNOWN *)v150 == &unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v400, (const llvm::detail::DoubleAPFloat *)(v134 + 32));
                }
                else
                {
                  v400 = *(_QWORD *)(v134 + 32);
                  if ((*(_DWORD *)(v150 + 8) + 64) >= 0x80)
                    v401 = (uint64_t *)operator new[]();
                  v151 = *(_BYTE *)(v134 + 52);
                  v152 = v151 & 7;
                  v403 = v403 & 0xF0 | v151 & 0xF;
                  v402 = *(_DWORD *)(v134 + 48);
                  v154 = (v151 & 6) != 0 && v152 != 3;
                  if (v152 == 1 || v154)
                  {
                    v155 = *(unsigned int *)(v400 + 8);
                    if ((v155 - 64) <= 0xFFFFFF7F)
                      v156 = v401;
                    else
                      v156 = (uint64_t *)&v401;
                    v159 = *(uint64_t **)(v134 + 40);
                    v158 = (uint64_t *)(v134 + 40);
                    v157 = v159;
                    if ((*(_DWORD *)(*(v158 - 1) + 8) - 64) >= 0xFFFFFF80)
                      v157 = v158;
                    if (v155 <= 0xFFFFFFBF)
                    {
                      v160 = (unint64_t)(v155 + 64) >> 6;
                      do
                      {
                        v161 = *v157++;
                        *v156++ = v161;
                        --v160;
                      }
                      while (v160);
                    }
                  }
                }
                sub_1C4AE2930((uint64_t)v439, (uint64_t)v122, (uint64_t)v399);
                if ((_UNKNOWN *)v400 == &unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v401);
                }
                else if ((*(_DWORD *)(v400 + 8) - 64) <= 0xFFFFFF7F && v401)
                {
                  MEMORY[0x1CAA32F9C](v401, 0x1000C8000313F17);
                }
                v162 = v450;
                if (v450 == (unsigned int *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v412, (const llvm::detail::DoubleAPFloat *)&v450);
                }
                else
                {
                  v412 = v450;
                  if (v450[2] + 64 >= 0x80)
                    v413 = (uint64_t *)operator new[]();
                  v163 = v453 & 7;
                  v415 = v415 & 0xF0 | v453 & 0xF;
                  v414 = v452;
                  v165 = (v453 & 6) != 0 && v163 != 3;
                  if (v163 != 1 && !v165)
                    goto LABEL_285;
                  v166 = v412[2];
                  if ((v166 - 64) <= 0xFFFFFF7F)
                  {
                    v168 = v413;
                    if (v162[2] - 64 >= 0xFFFFFF80)
                      v167 = &v451;
                    else
                      v167 = (uint64_t **)v451;
                  }
                  else
                  {
                    v167 = &v451;
                    if (v162[2] - 64 < 0xFFFFFF80)
                      v167 = (uint64_t **)v451;
                    if (v166 > 0xFFFFFFBF)
                      goto LABEL_285;
                    v168 = (uint64_t *)&v413;
                  }
                  v169 = (unint64_t)(v166 + 64) >> 6;
                  do
                  {
                    v170 = (uint64_t)*v167++;
                    *v168++ = v170;
                    --v169;
                  }
                  while (v169);
                }
LABEL_285:
                sub_1C47B4138((uint64_t)&v411, (uint64_t)v439, 1);
                v171 = *a1;
                v426 = (unint64_t)v354;
                LODWORD(v427) = 0;
                v173 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v411, v172);
                v174 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v171 + 24))(v171, &v426, v173);
                v175 = *a1;
                v409 = v356;
                v410 = 1;
                LODWORD(v426) = (_DWORD)v7;
                LODWORD(v428) = 0;
                v429 = v174;
                v430 = v176;
                v431 = 1;
                (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v175 + 32))(v175, 165, &v409, 1, &v426, 2, v358 | 0x100000000);
                v177 = *(_QWORD *)(a2 + 24);
                v178 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v178 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v178 = a2;
                    do
                      v178 = *(_QWORD *)(v178 + 8);
                    while ((*(_WORD *)(v178 + 44) & 8) != 0);
                  }
                }
                goto LABEL_433;
              }
              goto LABEL_357;
            }
            if ((_DWORD)v7 != (_DWORD)v127)
            {
LABEL_357:
              if (v89 != 165)
                goto LABEL_443;
              v217 = *(_QWORD *)(v88 + 32);
              v218 = *(unsigned int *)(v217 + 36);
              v219 = *(unsigned int *)(v217 + 68);
              v220 = v5[3];
              v221 = (uint64_t *)(v220 + 16 * (v218 & 0x7FFFFFFF) + 8);
              v222 = v5[34];
              if ((int)v218 >= 0)
                v221 = (uint64_t *)(v222 + 8 * v218);
              v223 = *v221;
              if ((*(_BYTE *)(v223 + 3) & 1) == 0)
                v223 = *(_QWORD *)(v223 + 24);
              v224 = *(_QWORD *)(v223 + 8);
              if (**(_WORD **)(v224 + 16) == 121)
                v225 = *(_QWORD *)(*(_QWORD *)(v224 + 32) + 48);
              else
                v225 = 0;
              v226 = (uint64_t *)(v220 + 16 * (v219 & 0x7FFFFFFF) + 8);
              v227 = (uint64_t *)(v222 + 8 * v219);
              if ((int)v219 >= 0)
                v226 = v227;
              v228 = *v226;
              if ((*(_BYTE *)(v228 + 3) & 1) == 0)
                v228 = *(_QWORD *)(v228 + 24);
              v229 = *(_QWORD *)(v228 + 8);
              if (**(_WORD **)(v229 + 16) != 121)
              {
                v230 = 0;
                v231 = v225 == 0;
                goto LABEL_370;
              }
              v268 = *(_QWORD *)(*(_QWORD *)(v229 + 32) + 48);
              v231 = v225 == 0;
              v230 = v268 != 0;
              if (v225)
              {
                v122 = v354;
                v86 = (const llvm::detail::DoubleAPFloat *)(v355 + 32);
                goto LABEL_370;
              }
              v122 = v354;
              v86 = (const llvm::detail::DoubleAPFloat *)(v355 + 32);
              if (!v268)
              {
LABEL_370:
                if (!v231 && !v230 && (_DWORD)v219 != (_DWORD)v357)
                {
                  if (v91 == (_DWORD *)&unk_1C866F1C0)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v385, v86);
                    v236 = v357;
                  }
                  else
                  {
                    v385 = *v76;
                    if ((v91[2] + 64) >= 0x80)
                      v386 = (uint64_t *)operator new[]();
                    v232 = *(_BYTE *)(v355 + 52);
                    v233 = v232 & 7;
                    v388 = v388 & 0xF0 | v232 & 0xF;
                    v387 = *(_DWORD *)(v355 + 48);
                    v235 = (v232 & 6) != 0 && v233 != 3;
                    v236 = v357;
                    if (v233 == 1 || v235)
                    {
                      v237 = v385[2];
                      if ((v237 - 64) <= 0xFFFFFF7F)
                        v238 = v386;
                      else
                        v238 = (uint64_t *)&v386;
                      v239 = *(uint64_t **)(v355 + 40);
                      if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                        v239 = (uint64_t *)(v355 + 40);
                      if (v237 <= 0xFFFFFFBF)
                      {
                        v240 = (unint64_t)(v237 + 64) >> 6;
                        do
                        {
                          v241 = *v239++;
                          *v238++ = v241;
                          --v240;
                        }
                        while (v240);
                      }
                    }
                  }
                  sub_1C4AE2930((uint64_t)&v449, (uint64_t)v122, (uint64_t)v384);
                  if (v385 == (_DWORD *)&unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v386);
                  }
                  else if ((v385[2] - 64) <= 0xFFFFFF7F && v386)
                  {
                    MEMORY[0x1CAA32F9C](v386, 0x1000C8000313F17);
                  }
                  v242 = *(_QWORD *)(v225 + 32);
                  if ((_UNKNOWN *)v242 == &unk_1C866F1C0)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v380, (const llvm::detail::DoubleAPFloat *)(v225 + 32));
                  }
                  else
                  {
                    v380 = *(_QWORD *)(v225 + 32);
                    if ((*(_DWORD *)(v242 + 8) + 64) >= 0x80)
                      v381 = (uint64_t *)operator new[]();
                    v243 = *(_BYTE *)(v225 + 52);
                    v244 = v243 & 7;
                    v383 = v383 & 0xF0 | v243 & 0xF;
                    v382 = *(_DWORD *)(v225 + 48);
                    v246 = (v243 & 6) != 0 && v244 != 3;
                    if (v244 == 1 || v246)
                    {
                      v247 = *(unsigned int *)(v380 + 8);
                      if ((v247 - 64) <= 0xFFFFFF7F)
                        v248 = v381;
                      else
                        v248 = (uint64_t *)&v381;
                      v251 = *(uint64_t **)(v225 + 40);
                      v250 = (uint64_t *)(v225 + 40);
                      v249 = v251;
                      if ((*(_DWORD *)(*(v250 - 1) + 8) - 64) >= 0xFFFFFF80)
                        v249 = v250;
                      if (v247 <= 0xFFFFFFBF)
                      {
                        v252 = (unint64_t)(v247 + 64) >> 6;
                        do
                        {
                          v253 = *v249++;
                          *v248++ = v253;
                          --v252;
                        }
                        while (v252);
                      }
                    }
                  }
                  sub_1C4AE2930((uint64_t)v439, (uint64_t)v122, (uint64_t)v379);
                  if ((_UNKNOWN *)v380 == &unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v381);
                  }
                  else if ((*(_DWORD *)(v380 + 8) - 64) <= 0xFFFFFF7F && v381)
                  {
                    MEMORY[0x1CAA32F9C](v381, 0x1000C8000313F17);
                  }
                  v162 = v450;
                  if (v450 == (unsigned int *)&unk_1C866F1C0)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v412, (const llvm::detail::DoubleAPFloat *)&v450);
                  }
                  else
                  {
                    v412 = v450;
                    if (v450[2] + 64 >= 0x80)
                      v413 = (uint64_t *)operator new[]();
                    v254 = v453 & 7;
                    v415 = v415 & 0xF0 | v453 & 0xF;
                    v414 = v452;
                    v256 = (v453 & 6) != 0 && v254 != 3;
                    if (v254 != 1 && !v256)
                      goto LABEL_431;
                    v257 = v412[2];
                    if ((v257 - 64) <= 0xFFFFFF7F)
                    {
                      v259 = v413;
                      if (v162[2] - 64 >= 0xFFFFFF80)
                        v258 = &v451;
                      else
                        v258 = (uint64_t **)v451;
                    }
                    else
                    {
                      v258 = &v451;
                      if (v162[2] - 64 < 0xFFFFFF80)
                        v258 = (uint64_t **)v451;
                      if (v257 > 0xFFFFFFBF)
                        goto LABEL_431;
                      v259 = (uint64_t *)&v413;
                    }
                    v260 = (unint64_t)(v257 + 64) >> 6;
                    do
                    {
                      v261 = (uint64_t)*v258++;
                      *v259++ = v261;
                      --v260;
                    }
                    while (v260);
                  }
LABEL_431:
                  sub_1C48DB628((uint64_t)&v411, (uint64_t)v439, 1);
                  v262 = *a1;
                  v426 = (unint64_t)v122;
                  LODWORD(v427) = 0;
                  v264 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v411, v263);
                  v265 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v262 + 24))(v262, &v426, v264);
                  v266 = *a1;
                  v409 = v356;
                  v410 = 1;
                  LODWORD(v426) = v219;
                  LODWORD(v428) = 0;
                  v429 = v265;
                  v430 = v267;
                  v431 = 1;
                  v432 = v236;
                  v433 = 0;
                  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v266 + 32))(v266, 166, &v409, 1, &v426, 3, v358 | 0x100000000);
                  v177 = *(_QWORD *)(a2 + 24);
                  v178 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v178 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v178 = a2;
                      do
                        v178 = *(_QWORD *)(v178 + 8);
                      while ((*(_WORD *)(v178 + 44) & 8) != 0);
                    }
                  }
LABEL_433:
                  sub_1C487FE80(v177 + 40, a2, *(_QWORD *)(v178 + 8));
                  if (v412 == (unsigned int *)&unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v413);
                  }
                  else if (v412[2] - 64 <= 0xFFFFFF7F && v413)
                  {
                    MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
                  }
                  if (v440 == (unsigned int *)&unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v441);
                  }
                  else if (v440[2] - 64 <= 0xFFFFFF7F && v441)
                  {
                    MEMORY[0x1CAA32F9C](v441, 0x1000C8000313F17);
                  }
                  if (v162 == (unsigned int *)&unk_1C866F1C0)
                    goto LABEL_611;
LABEL_438:
                  v64 = v162[2];
                  goto LABEL_89;
                }
                goto LABEL_443;
              }
              if ((_DWORD)v218 == (_DWORD)v357)
              {
LABEL_443:
                if ((_DWORD)v7 != (_DWORD)v357)
                {
                  if (v125 != 177 || (_DWORD)v7 != *(_DWORD *)(*(_QWORD *)(v124 + 32) + 36))
                    goto LABEL_648;
                  if (v91 == (_DWORD *)&unk_1C866F1C0)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v450, (const llvm::detail::DoubleAPFloat *)v76);
                  }
                  else
                  {
                    v450 = (unsigned int *)*v76;
                    if ((v91[2] + 64) >= 0x80)
                      v451 = (uint64_t *)operator new[]();
                    v292 = *(_BYTE *)(v355 + 52);
                    v293 = v292 & 7;
                    v453 = v453 & 0xF0 | v292 & 0xF;
                    v452 = *(_DWORD *)(v355 + 48);
                    v295 = (v292 & 6) != 0 && v293 != 3;
                    if (v293 == 1 || v295)
                    {
                      v296 = v450[2];
                      if ((v296 - 64) <= 0xFFFFFF7F)
                        v297 = (uint64_t **)v451;
                      else
                        v297 = &v451;
                      v298 = *(uint64_t ***)(v355 + 40);
                      if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                        v298 = (uint64_t **)(v355 + 40);
                      if (v296 <= 0xFFFFFFBF)
                      {
                        v299 = (unint64_t)(v296 + 64) >> 6;
                        do
                        {
                          v300 = *v298++;
                          *v297++ = v300;
                          --v299;
                        }
                        while (v299);
                      }
                    }
                  }
                  llvm::APFloat::APFloat((uint64_t)&v426, v450, "1.0", 3uLL);
                  if (v450 == (unsigned int *)&unk_1C866F1C0)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v440, (const llvm::detail::DoubleAPFloat *)&v450);
                  }
                  else
                  {
                    v440 = v450;
                    if (v450[2] + 64 >= 0x80)
                      v441 = (uint64_t *)operator new[]();
                    v301 = v453 & 7;
                    v443 = v443 & 0xF0 | v453 & 0xF;
                    v442 = v452;
                    v303 = (v453 & 6) != 0 && v301 != 3;
                    if (v301 == 1 || v303)
                    {
                      v304 = v440[2];
                      v305 = (v304 - 64) <= 0xFFFFFF7F ? v441 : (uint64_t *)&v441;
                      v306 = v450[2] - 64 >= 0xFFFFFF80 ? (uint64_t *)&v451 : v451;
                      if (v304 <= 0xFFFFFFBF)
                      {
                        v307 = (unint64_t)(v304 + 64) >> 6;
                        do
                        {
                          v308 = *v306++;
                          *v305++ = v308;
                          --v307;
                        }
                        while (v307);
                      }
                    }
                  }
                  sub_1C48DB604((uint64_t)v439, (uint64_t)&v426, 1);
                  if (v427 == (const llvm::APInt *)&unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v428);
                  }
                  else if ((*((_DWORD *)v427 + 2) - 64) <= 0xFFFFFF7F && v428)
                  {
                    MEMORY[0x1CAA32F9C](v428, 0x1000C8000313F17);
                  }
                  v310 = *a1;
                  v426 = (unint64_t)v354;
                  LODWORD(v427) = 0;
                  v311 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)v439, v309);
                  v312 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v310 + 24))(v310, &v426, v311);
                  v313 = *a1;
                  v411 = v356;
                  LODWORD(v412) = 1;
                  LODWORD(v426) = (_DWORD)v7;
                  LODWORD(v428) = 0;
                  v429 = v312;
                  v430 = v314;
                  v431 = 1;
                  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v313 + 32))(v313, 165, &v411, 1, &v426, 2, v358 | 0x100000000);
                  v315 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v315 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v315 = a2;
                      do
                        v315 = *(_QWORD *)(v315 + 8);
                      while ((*(_WORD *)(v315 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v315 + 8));
                  if (v440 == (unsigned int *)&unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v441);
                  }
                  else if (v440[2] - 64 <= 0xFFFFFF7F && v441)
                  {
                    MEMORY[0x1CAA32F9C](v441, 0x1000C8000313F17);
                  }
                  v63 = v450;
LABEL_488:
                  if (v63 != (unsigned int *)&unk_1C866F1C0)
                  {
LABEL_88:
                    v64 = v63[2];
LABEL_89:
                    if (v64 - 64 <= 0xFFFFFF7F && v451)
                      MEMORY[0x1CAA32F9C](v451, 0x1000C8000313F17);
                    goto LABEL_110;
                  }
LABEL_611:
                  sub_1C4773C74((uint64_t *)&v451);
                  goto LABEL_110;
                }
                if (v91 == (_DWORD *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v450, v86);
                }
                else
                {
                  v450 = (unsigned int *)*v76;
                  if ((v91[2] + 64) >= 0x80)
                    v451 = (uint64_t *)operator new[]();
                  v269 = *(_BYTE *)(v355 + 52);
                  v270 = v269 & 7;
                  v453 = v453 & 0xF0 | v269 & 0xF;
                  v452 = *(_DWORD *)(v355 + 48);
                  v272 = (v269 & 6) != 0 && v270 != 3;
                  if (v270 == 1 || v272)
                  {
                    v273 = v450[2];
                    if ((v273 - 64) <= 0xFFFFFF7F)
                      v274 = (uint64_t **)v451;
                    else
                      v274 = &v451;
                    v275 = *(uint64_t ***)(v355 + 40);
                    if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                      v275 = (uint64_t **)(v355 + 40);
                    if (v273 <= 0xFFFFFFBF)
                    {
                      v276 = (unint64_t)(v273 + 64) >> 6;
                      do
                      {
                        v277 = *v275++;
                        *v274++ = v277;
                        --v276;
                      }
                      while (v276);
                    }
                  }
                }
                llvm::APFloat::APFloat((uint64_t)&v426, v450, "1.0", 3uLL);
                if (v450 == (unsigned int *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v440, (const llvm::detail::DoubleAPFloat *)&v450);
                }
                else
                {
                  v440 = v450;
                  if (v450[2] + 64 >= 0x80)
                    v441 = (uint64_t *)operator new[]();
                  v278 = v453 & 7;
                  v443 = v443 & 0xF0 | v453 & 0xF;
                  v442 = v452;
                  v280 = (v453 & 6) != 0 && v278 != 3;
                  if (v278 == 1 || v280)
                  {
                    v281 = v440[2];
                    v282 = (v281 - 64) <= 0xFFFFFF7F ? v441 : (uint64_t *)&v441;
                    v283 = v450[2] - 64 >= 0xFFFFFF80 ? (uint64_t *)&v451 : v451;
                    if (v281 <= 0xFFFFFFBF)
                    {
                      v284 = (unint64_t)(v281 + 64) >> 6;
                      do
                      {
                        v285 = *v283++;
                        *v282++ = v285;
                        --v284;
                      }
                      while (v284);
                    }
                  }
                }
                sub_1C47B4138((uint64_t)v439, (uint64_t)&v426, 1);
                if (v427 == (const llvm::APInt *)&unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v428);
                }
                else if ((*((_DWORD *)v427 + 2) - 64) <= 0xFFFFFF7F && v428)
                {
                  MEMORY[0x1CAA32F9C](v428, 0x1000C8000313F17);
                }
                v287 = *a1;
                v426 = (unint64_t)v354;
                LODWORD(v427) = 0;
                v288 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)v439, v286);
                v289 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v287 + 24))(v287, &v426, v288);
                v290 = *a1;
                v411 = v356;
                LODWORD(v412) = 1;
                LODWORD(v426) = (_DWORD)v7;
                LODWORD(v428) = 0;
                v429 = v289;
                v430 = v291;
                v431 = 1;
                (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v290 + 32))(v290, 165, &v411, 1, &v426, 2, v358 | 0x100000000);
                v119 = *(_QWORD *)(a2 + 24);
                v120 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v120 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v120 = a2;
                    do
                      v120 = *(_QWORD *)(v120 + 8);
                    while ((*(_WORD *)(v120 + 44) & 8) != 0);
                  }
                }
LABEL_485:
                sub_1C487FE80(v119 + 40, a2, *(_QWORD *)(v120 + 8));
                if (v440 == (unsigned int *)&unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v441);
                }
                else if (v440[2] - 64 <= 0xFFFFFF7F && v441)
                {
                  MEMORY[0x1CAA32F9C](v441, 0x1000C8000313F17);
                }
                v63 = v450;
                goto LABEL_488;
              }
              if (v91 == (_DWORD *)&unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v395, (const llvm::detail::DoubleAPFloat *)v76);
              }
              else
              {
                v395 = *v76;
                if ((v91[2] + 64) >= 0x80)
                  v396 = (uint64_t *)operator new[]();
                v316 = *(_BYTE *)(v355 + 52);
                v317 = v316 & 7;
                v398 = v398 & 0xF0 | v316 & 0xF;
                v397 = *(_DWORD *)(v355 + 48);
                v319 = (v316 & 6) != 0 && v317 != 3;
                if (v317 == 1 || v319)
                {
                  v320 = v395[2];
                  if ((v320 - 64) <= 0xFFFFFF7F)
                    v321 = v396;
                  else
                    v321 = (uint64_t *)&v396;
                  v322 = *(uint64_t **)(v355 + 40);
                  if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                    v322 = (uint64_t *)(v355 + 40);
                  if (v320 <= 0xFFFFFFBF)
                  {
                    v323 = (unint64_t)(v320 + 64) >> 6;
                    do
                    {
                      v324 = *v322++;
                      *v321++ = v324;
                      --v323;
                    }
                    while (v323);
                  }
                }
              }
              sub_1C4AE2930((uint64_t)&v449, (uint64_t)v354, (uint64_t)v394);
              if (v395 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v396);
              }
              else if ((v395[2] - 64) <= 0xFFFFFF7F && v396)
              {
                MEMORY[0x1CAA32F9C](v396, 0x1000C8000313F17);
              }
              v325 = *(_QWORD *)(v268 + 32);
              if ((_UNKNOWN *)v325 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v390, (const llvm::detail::DoubleAPFloat *)(v268 + 32));
              }
              else
              {
                v390 = *(_QWORD *)(v268 + 32);
                if ((*(_DWORD *)(v325 + 8) + 64) >= 0x80)
                  v391 = (uint64_t *)operator new[]();
                v326 = *(_BYTE *)(v268 + 52);
                v327 = v326 & 7;
                v393 = v393 & 0xF0 | v326 & 0xF;
                v392 = *(_DWORD *)(v268 + 48);
                v329 = (v326 & 6) != 0 && v327 != 3;
                if (v327 == 1 || v329)
                {
                  v330 = *(unsigned int *)(v390 + 8);
                  if ((v330 - 64) <= 0xFFFFFF7F)
                    v331 = v391;
                  else
                    v331 = (uint64_t *)&v391;
                  v334 = *(uint64_t **)(v268 + 40);
                  v333 = (uint64_t *)(v268 + 40);
                  v332 = v334;
                  if ((*(_DWORD *)(*(v333 - 1) + 8) - 64) >= 0xFFFFFF80)
                    v332 = v333;
                  if (v330 <= 0xFFFFFFBF)
                  {
                    v335 = (unint64_t)(v330 + 64) >> 6;
                    do
                    {
                      v336 = *v332++;
                      *v331++ = v336;
                      --v335;
                    }
                    while (v335);
                  }
                }
              }
              sub_1C4AE2930((uint64_t)v439, (uint64_t)v354, (uint64_t)v389);
              if ((_UNKNOWN *)v390 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v391);
              }
              else if ((*(_DWORD *)(v390 + 8) - 64) <= 0xFFFFFF7F && v391)
              {
                MEMORY[0x1CAA32F9C](v391, 0x1000C8000313F17);
              }
              v162 = v450;
              if (v450 == (unsigned int *)&unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v412, (const llvm::detail::DoubleAPFloat *)&v450);
              }
              else
              {
                v412 = v450;
                if (v450[2] + 64 >= 0x80)
                  v413 = (uint64_t *)operator new[]();
                v337 = v453 & 7;
                v415 = v415 & 0xF0 | v453 & 0xF;
                v414 = v452;
                v339 = (v453 & 6) != 0 && v337 != 3;
                if (v337 != 1 && !v339)
                  goto LABEL_604;
                v340 = v412[2];
                if ((v340 - 64) <= 0xFFFFFF7F)
                {
                  v342 = v413;
                  if (v162[2] - 64 >= 0xFFFFFF80)
                    v341 = &v451;
                  else
                    v341 = (uint64_t **)v451;
                }
                else
                {
                  v341 = &v451;
                  if (v162[2] - 64 < 0xFFFFFF80)
                    v341 = (uint64_t **)v451;
                  if (v340 > 0xFFFFFFBF)
                    goto LABEL_604;
                  v342 = (uint64_t *)&v413;
                }
                v343 = (unint64_t)(v340 + 64) >> 6;
                do
                {
                  v344 = (uint64_t)*v341++;
                  *v342++ = v344;
                  --v343;
                }
                while (v343);
              }
LABEL_604:
              sub_1C48DB628((uint64_t)&v411, (uint64_t)v439, 1);
              v345 = *a1;
              v426 = (unint64_t)v354;
              LODWORD(v427) = 0;
              v347 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v411, v346);
              v348 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v345 + 24))(v345, &v426, v347);
              v349 = *a1;
              v409 = v356;
              v410 = 1;
              LODWORD(v426) = v218;
              LODWORD(v428) = 0;
              v429 = v348;
              v430 = v350;
              v431 = 1;
              v432 = v357;
              v433 = 0;
              (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v349 + 32))(v349, 166, &v409, 1, &v426, 3, v358 | 0x100000000);
              v215 = *(_QWORD *)(a2 + 24);
              v216 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v216 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v216 = a2;
                  do
                    v216 = *(_QWORD *)(v216 + 8);
                  while ((*(_WORD *)(v216 + 44) & 8) != 0);
                }
              }
              goto LABEL_606;
            }
            if (v91 == (_DWORD *)&unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v422, (const llvm::detail::DoubleAPFloat *)v76);
            }
            else
            {
              v422 = *v76;
              if ((v91[2] + 64) >= 0x80)
                v423 = (uint64_t *)operator new[]();
              v180 = *(_BYTE *)(v355 + 52);
              v181 = v180 & 7;
              v425 = v425 & 0xF0 | v180 & 0xF;
              v424 = *(_DWORD *)(v355 + 48);
              v183 = (v180 & 6) != 0 && v181 != 3;
              if (v181 == 1 || v183)
              {
                v184 = v422[2];
                if ((v184 - 64) <= 0xFFFFFF7F)
                  v185 = v423;
                else
                  v185 = (uint64_t *)&v423;
                v186 = *(uint64_t **)(v355 + 40);
                if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
                  v186 = (uint64_t *)(v355 + 40);
                if (v184 <= 0xFFFFFFBF)
                {
                  v187 = (unint64_t)(v184 + 64) >> 6;
                  do
                  {
                    v188 = *v186++;
                    *v185++ = v188;
                    --v187;
                  }
                  while (v187);
                }
              }
            }
            sub_1C4AE2930((uint64_t)&v449, (uint64_t)v354, (uint64_t)v421);
            if (v422 == (_DWORD *)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v423);
            }
            else if ((v422[2] - 64) <= 0xFFFFFF7F && v423)
            {
              MEMORY[0x1CAA32F9C](v423, 0x1000C8000313F17);
            }
            v189 = *(_QWORD *)(v179 + 32);
            if ((_UNKNOWN *)v189 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v417, (const llvm::detail::DoubleAPFloat *)(v179 + 32));
            }
            else
            {
              v417 = *(_QWORD *)(v179 + 32);
              if ((*(_DWORD *)(v189 + 8) + 64) >= 0x80)
                v418 = (uint64_t *)operator new[]();
              v190 = *(_BYTE *)(v179 + 52);
              v191 = v190 & 7;
              v420 = v420 & 0xF0 | v190 & 0xF;
              v419 = *(_DWORD *)(v179 + 48);
              v193 = (v190 & 6) != 0 && v191 != 3;
              if (v191 == 1 || v193)
              {
                v194 = *(unsigned int *)(v417 + 8);
                if ((v194 - 64) <= 0xFFFFFF7F)
                  v195 = v418;
                else
                  v195 = (uint64_t *)&v418;
                v198 = *(uint64_t **)(v179 + 40);
                v197 = (uint64_t *)(v179 + 40);
                v196 = v198;
                if ((*(_DWORD *)(*(v197 - 1) + 8) - 64) >= 0xFFFFFF80)
                  v196 = v197;
                if (v194 <= 0xFFFFFFBF)
                {
                  v199 = (unint64_t)(v194 + 64) >> 6;
                  do
                  {
                    v200 = *v196++;
                    *v195++ = v200;
                    --v199;
                  }
                  while (v199);
                }
              }
            }
            sub_1C4AE2930((uint64_t)v439, (uint64_t)v354, (uint64_t)v416);
            if ((_UNKNOWN *)v417 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v418);
            }
            else if ((*(_DWORD *)(v417 + 8) - 64) <= 0xFFFFFF7F && v418)
            {
              MEMORY[0x1CAA32F9C](v418, 0x1000C8000313F17);
            }
            v162 = v450;
            if (v450 == (unsigned int *)&unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v412, (const llvm::detail::DoubleAPFloat *)&v450);
            }
            else
            {
              v412 = v450;
              if (v450[2] + 64 >= 0x80)
                v413 = (uint64_t *)operator new[]();
              v201 = v453 & 7;
              v415 = v415 & 0xF0 | v453 & 0xF;
              v414 = v452;
              v203 = (v453 & 6) != 0 && v201 != 3;
              if (v201 != 1 && !v203)
                goto LABEL_352;
              v204 = v412[2];
              if ((v204 - 64) <= 0xFFFFFF7F)
              {
                v206 = v413;
                if (v162[2] - 64 >= 0xFFFFFF80)
                  v205 = &v451;
                else
                  v205 = (uint64_t **)v451;
              }
              else
              {
                v205 = &v451;
                if (v162[2] - 64 < 0xFFFFFF80)
                  v205 = (uint64_t **)v451;
                if (v204 > 0xFFFFFFBF)
                  goto LABEL_352;
                v206 = (uint64_t *)&v413;
              }
              v207 = (unint64_t)(v204 + 64) >> 6;
              do
              {
                v208 = (uint64_t)*v205++;
                *v206++ = v208;
                --v207;
              }
              while (v207);
            }
LABEL_352:
            sub_1C47B4138((uint64_t)&v411, (uint64_t)v439, 1);
            v209 = *a1;
            v426 = (unint64_t)v354;
            LODWORD(v427) = 0;
            v211 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v411, v210);
            v212 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v209 + 24))(v209, &v426, v211);
            v213 = *a1;
            v409 = v356;
            v410 = 1;
            LODWORD(v426) = (_DWORD)v7;
            LODWORD(v428) = 0;
            v429 = v212;
            v430 = v214;
            v431 = 1;
            (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v213 + 32))(v213, 165, &v409, 1, &v426, 2, v358 | 0x100000000);
            v215 = *(_QWORD *)(a2 + 24);
            v216 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v216 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v216 = a2;
                do
                  v216 = *(_QWORD *)(v216 + 8);
                while ((*(_WORD *)(v216 + 44) & 8) != 0);
              }
            }
LABEL_606:
            sub_1C487FE80(v215 + 40, a2, *(_QWORD *)(v216 + 8));
            if (v412 == (unsigned int *)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v413);
            }
            else if (v412[2] - 64 <= 0xFFFFFF7F && v413)
            {
              MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
            }
            if (v440 == (unsigned int *)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v441);
            }
            else if (v440[2] - 64 <= 0xFFFFFF7F && v441)
            {
              MEMORY[0x1CAA32F9C](v441, 0x1000C8000313F17);
            }
            if (v162 == (unsigned int *)&unk_1C866F1C0)
              goto LABEL_611;
            goto LABEL_438;
          }
          v352 = v80;
          MEMORY[0x1CAA32F9C](v428, 0x1000C8000313F17);
        }
        v80 = v352;
        goto LABEL_138;
      }
      v351 = v78;
      MEMORY[0x1CAA32F9C](v428, 0x1000C8000313F17);
    }
    v78 = v351;
    goto LABEL_128;
  }
  v33 = *(_QWORD *)(v17 + 32);
  if ((_UNKNOWN *)v33 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v445, (const llvm::detail::DoubleAPFloat *)(v17 + 32));
    v34 = v354;
  }
  else
  {
    v445 = *(_QWORD *)(v17 + 32);
    v34 = v354;
    if ((*(_DWORD *)(v33 + 8) + 64) >= 0x80)
      v446 = (uint64_t *)operator new[]();
    v35 = *(_BYTE *)(v17 + 52);
    v36 = v35 & 7;
    v448 = v448 & 0xF0 | v35 & 0xF;
    v447 = *(_DWORD *)(v17 + 48);
    v38 = (v35 & 6) != 0 && v36 != 3;
    if (v36 == 1 || v38)
    {
      v39 = *(unsigned int *)(v445 + 8);
      if ((v39 - 64) <= 0xFFFFFF7F)
        v40 = v446;
      else
        v40 = (uint64_t *)&v446;
      v43 = *(uint64_t **)(v17 + 40);
      v42 = (uint64_t *)(v17 + 40);
      v41 = v43;
      if ((*(_DWORD *)(*(v42 - 1) + 8) - 64) >= 0xFFFFFF80)
        v41 = v42;
      if (v39 <= 0xFFFFFFBF)
      {
        v44 = (unint64_t)(v39 + 64) >> 6;
        do
        {
          v45 = *v41++;
          *v40++ = v45;
          --v44;
        }
        while (v44);
      }
    }
  }
  sub_1C4AE2930((uint64_t)&v449, (uint64_t)v34, (uint64_t)v444);
  if ((_UNKNOWN *)v445 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v446);
  }
  else if ((*(_DWORD *)(v445 + 8) - 64) <= 0xFFFFFF7F && v446)
  {
    MEMORY[0x1CAA32F9C](v446, 0x1000C8000313F17);
  }
  v46 = *(_QWORD *)(v355 + 32);
  if ((_UNKNOWN *)v46 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v435, (const llvm::detail::DoubleAPFloat *)(v355 + 32));
  }
  else
  {
    v435 = *(_QWORD *)(v355 + 32);
    if ((*(_DWORD *)(v46 + 8) + 64) >= 0x80)
      v436 = (uint64_t *)operator new[]();
    v47 = *(_BYTE *)(v355 + 52);
    v48 = v47 & 7;
    v438 = v438 & 0xF0 | v47 & 0xF;
    v437 = *(_DWORD *)(v355 + 48);
    v50 = (v47 & 6) != 0 && v48 != 3;
    if (v48 == 1 || v50)
    {
      v51 = *(unsigned int *)(v435 + 8);
      if ((v51 - 64) <= 0xFFFFFF7F)
        v52 = v436;
      else
        v52 = (uint64_t *)&v436;
      v53 = *(uint64_t **)(v355 + 40);
      if ((*(_DWORD *)(*(_QWORD *)(v355 + 32) + 8) - 64) >= 0xFFFFFF80)
        v53 = (uint64_t *)(v355 + 40);
      if (v51 <= 0xFFFFFFBF)
      {
        v54 = (unint64_t)(v51 + 64) >> 6;
        do
        {
          v55 = *v53++;
          *v52++ = v55;
          --v54;
        }
        while (v54);
      }
    }
  }
  sub_1C4AE2930((uint64_t)v439, (uint64_t)v34, (uint64_t)v434);
  if ((_UNKNOWN *)v435 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v436);
  }
  else if ((*(_DWORD *)(v435 + 8) - 64) <= 0xFFFFFF7F && v436)
  {
    MEMORY[0x1CAA32F9C](v436, 0x1000C8000313F17);
  }
  if ((sub_1C48DB628((uint64_t)&v449, (uint64_t)v439, 1) & 0x10) == 0)
  {
    v57 = *a1;
    v426 = (unint64_t)v34;
    LODWORD(v427) = 0;
    v58 = llvm::ConstantFP::get(***v353, (llvm::LLVMContext *)&v449, v56);
    v59 = (*(uint64_t (**)(uint64_t, unint64_t *, llvm::APFloatBase *))(*(_QWORD *)v57 + 24))(v57, &v426, v58);
    v60 = *a1;
    v411 = v356;
    LODWORD(v412) = 1;
    LODWORD(v426) = v357;
    LODWORD(v428) = 0;
    v429 = v59;
    v430 = v61;
    v431 = 1;
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(v60, 163, &v411, 1, &v426, 2, v358 | 0x100000000);
    v62 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v62 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v62 = a2;
        do
          v62 = *(_QWORD *)(v62 + 8);
        while ((*(_WORD *)(v62 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v62 + 8));
    if (v440 == (unsigned int *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v441);
    }
    else if (v440[2] - 64 <= 0xFFFFFF7F && v441)
    {
      MEMORY[0x1CAA32F9C](v441, 0x1000C8000313F17);
    }
    v63 = v450;
    if (v450 != (unsigned int *)&unk_1C866F1C0)
      goto LABEL_88;
    goto LABEL_611;
  }
  if (v440 == (unsigned int *)&unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v441);
  }
  else if (v440[2] - 64 <= 0xFFFFFF7F && v441)
  {
    MEMORY[0x1CAA32F9C](v441, 0x1000C8000313F17);
  }
  if (v450 == (unsigned int *)&unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v451);
  }
  else if (v450[2] - 64 <= 0xFFFFFF7F && v451)
  {
    MEMORY[0x1CAA32F9C](v451, 0x1000C8000313F17);
  }
LABEL_648:
  v11 = 0;
LABEL_111:
  if (v362 >= 0x41 && v361)
    MEMORY[0x1CAA32F9C](v361, 0x1000C8000313F17);
  if (v360 >= 0x41 && v359)
    MEMORY[0x1CAA32F9C](v359, 0x1000C8000313F17);
  if (v366 >= 0x41 && v365)
    MEMORY[0x1CAA32F9C](v365, 0x1000C8000313F17);
  if (v364 >= 0x41 && v363)
    MEMORY[0x1CAA32F9C](v363, 0x1000C8000313F17);
  sub_1C48433E8((uint64_t)v367);
  return v11;
}

