uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::base(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::end(_QWORD *a1)
{
  return *a1 + a1[1];
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getBufSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFFile(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getHeader(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getVersionDefinitions(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  char v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  unint64_t v30;
  void *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v58;
  uint64_t v59;
  unint64_t v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  std::string *v68;
  std::string::size_type v69;
  std::string v70;
  std::string __p;
  __int16 v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  std::string v76;
  std::string v77;
  std::string v78;
  _QWORD v79[4];
  _QWORD *v80;
  _BYTE v81[24];
  uint64_t v82;
  __int16 v83;
  _QWORD v84[2];
  char v85;
  _QWORD v86[2];
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getLinkAsStrtab(a1, a2, (uint64_t)v86);
  if ((v87 & 1) != 0)
  {
    v22 = v86[0];
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v22;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(a1, a2, (uint64_t)v84);
  if ((v85 & 1) != 0)
  {
    sub_1C59BD440(&v77, a1, a2);
    v32 = std::string::insert(&v77, 0, "cannot read content of ");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v78, ": ");
    v35 = 0;
    v36 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((v85 & 1) != 0)
    {
      v35 = (char *)v84[0];
      v84[0] = 0;
    }
    v75 = v35;
    sub_1C61D2548(&v75, &v76);
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v76;
    else
      v37 = (std::string *)v76.__r_.__value_.__r.__words[0];
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v76.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v76.__r_.__value_.__l.__size_;
    v39 = std::string::append(&__p, (const std::string::value_type *)v37, size);
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)v81 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    *(_QWORD *)&v81[16] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v80) = 260;
    v79[0] = v81;
    v41 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v43 = qword_1EF8F7238[0];
    *(_QWORD *)v41 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v79, (_QWORD *)(v41 + 8));
    *(_QWORD *)(v41 + 32) = 3;
    *(_QWORD *)(v41 + 40) = v43;
    *(_BYTE *)(v41 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v41;
    if ((v81[23] & 0x80000000) != 0)
      operator delete(*(void **)v81);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v75)
      (*(void (**)(char *))(*(_QWORD *)v75 + 8))(v75);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    v44 = (void *)v77.__r_.__value_.__r.__words[0];
  }
  else
  {
    v6 = (unsigned __int16 *)v84[0];
    v73 = v84[0] + v84[1];
    v74 = v84[0];
    v79[0] = &v73;
    v79[1] = a1;
    v79[2] = a2;
    v79[3] = &v74;
    v80 = v86;
    memset(&v78, 0, sizeof(v78));
    if (!*(_DWORD *)(a2 + 44))
    {
      v21 = 0;
      v7 = *(_BYTE *)(a3 + 24);
      v20 = 0uLL;
LABEL_33:
      *(_BYTE *)(a3 + 24) = v7 & 0xFE;
      *(_OWORD *)a3 = v20;
      *(_QWORD *)(a3 + 16) = v21;
      goto LABEL_86;
    }
    v7 = *(_BYTE *)(a3 + 24);
    v8 = 1;
    while (1)
    {
      if ((unint64_t)(v6 + 10) > v73)
      {
        sub_1C59BD440(&v70, a1, a2);
        v45 = std::string::insert(&v70, 0, "invalid ");
        v46 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v76, ": version definition ");
        v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
        __p.__r_.__value_.__r.__words[2] = v8;
        v72 = 2052;
        v49 = " goes past the end of the section";
        goto LABEL_68;
      }
      if ((v6 & 3) != 0)
      {
        sub_1C59BD440(&v76, a1, a2);
        v50 = std::string::insert(&v76, 0, "invalid ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v77, ": found a misaligned version definition entry at offset 0x");
        v53 = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 - v74;
        v27 = &v70;
        goto LABEL_35;
      }
      v9 = *v6;
      if (v9 != 256)
        break;
      v10 = sub_1C59A35D4((uint64_t)&v78, v78.__r_.__value_.__l.__size_);
      *(_DWORD *)v10 = (_DWORD)v6 - v74;
      *((_DWORD *)v10 + 1) = bswap32(*v6) >> 16;
      *((_DWORD *)v10 + 2) = bswap32(v6[1]) >> 16;
      *((_DWORD *)v10 + 3) = bswap32(v6[2]) >> 16;
      *((_DWORD *)v10 + 4) = bswap32(v6[3]) >> 16;
      *((_DWORD *)v10 + 5) = bswap32(*((_DWORD *)v6 + 2));
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + bswap32(*((_DWORD *)v6 + 3));
      if (v6[3])
      {
        v11 = v10;
        v12 = 0;
        v67 = (unint64_t *)(v10 + 3);
        v68 = (std::string *)((char *)v10 + 24);
        while ((v70.__r_.__value_.__s.__data_[0] & 3) == 0)
        {
          sub_1C59BD50C((uint64_t)v79, (unsigned int **)&v70, v8, (uint64_t)v81);
          v13 = v83;
          if ((v83 & 1) != 0)
          {
            v17 = *(_QWORD *)v81;
            *(_QWORD *)v81 = 0;
            v7 |= 1u;
            *(_BYTE *)(a3 + 24) = v7;
            *(_QWORD *)a3 = v17;
          }
          else if (v12)
          {
            v14 = *((_QWORD *)v11 + 7);
            if (v14 >= *((_QWORD *)v11 + 8))
            {
              v18 = sub_1C59C53F0(v67, (uint64_t)v81);
            }
            else
            {
              *(_DWORD *)v14 = *(_DWORD *)v81;
              v15 = (_BYTE *)(v14 + 8);
              if (SHIBYTE(v82) < 0)
              {
                sub_1C47EBC30(v15, *(void **)&v81[8], *(unint64_t *)&v81[16]);
              }
              else
              {
                v16 = *(_OWORD *)&v81[8];
                *(_QWORD *)(v14 + 24) = v82;
                *(_OWORD *)v15 = v16;
              }
              v18 = (char *)(v14 + 32);
            }
            *((_QWORD *)v11 + 7) = v18;
          }
          else
          {
            std::string::operator=(v68, (const std::string *)&v81[8]);
          }
          if ((v83 & 1) != 0)
          {
            v19 = *(_QWORD *)v81;
            *(_QWORD *)v81 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          else if (SHIBYTE(v82) < 0)
          {
            operator delete(*(void **)&v81[8]);
          }
          if ((v13 & 1) != 0)
            goto LABEL_77;
          if (++v12 >= bswap32(v6[3]) >> 16)
            goto LABEL_29;
        }
        sub_1C59BD440(&v76, a1, a2);
        v23 = std::string::insert(&v76, 0, "invalid ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v77, ": found a misaligned auxiliary entry at offset 0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v69 = v70.__r_.__value_.__r.__words[0] - v74;
        v27 = (std::string *)&v69;
LABEL_35:
        *(_QWORD *)v81 = &__p;
        *(_QWORD *)&v81[16] = v27;
        v83 = 3588;
        v28 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v30 = qword_1EF8F7238[0];
        *(_QWORD *)v28 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v81, (_QWORD *)(v28 + 8));
        *(_QWORD *)(v28 + 32) = 3;
        *(_QWORD *)(v28 + 40) = v30;
        *(_BYTE *)(v28 + 48) = 1;
        *(_BYTE *)(a3 + 24) = v7 | 1;
        *(_QWORD *)a3 = v28;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_76:
          operator delete(v31);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
LABEL_29:
      v6 = (unsigned __int16 *)((char *)v6 + bswap32(*((_DWORD *)v6 + 4)));
      if (++v8 > bswap32(*(_DWORD *)(a2 + 44)))
      {
        v20 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        v21 = v78.__r_.__value_.__r.__words[2];
        goto LABEL_33;
      }
    }
    v54 = __rev16(v9);
    sub_1C59BD440(&v70, a1, a2);
    v55 = std::string::insert(&v70, 0, "unable to dump ");
    v56 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v76, ": version ");
    v58 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    __p.__r_.__value_.__r.__words[2] = v54;
    v72 = 2052;
    v49 = " is not yet supported";
LABEL_68:
    *(_QWORD *)v81 = &__p;
    *(_QWORD *)&v81[16] = v49;
    v83 = 770;
    v59 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v61 = qword_1EF8F7238[0];
    *(_QWORD *)v59 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v81, (_QWORD *)(v59 + 8));
    *(_QWORD *)(v59 + 32) = 3;
    *(_QWORD *)(v59 + 40) = v61;
    *(_BYTE *)(v59 + 48) = 1;
    *(_BYTE *)(a3 + 24) = v7 | 1;
    *(_QWORD *)a3 = v59;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = (void *)v70.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_77:
    v62 = v78.__r_.__value_.__r.__words[0];
    if (!v78.__r_.__value_.__r.__words[0])
      goto LABEL_86;
    v44 = (void *)v78.__r_.__value_.__r.__words[0];
    if (v78.__r_.__value_.__l.__size_ != v78.__r_.__value_.__r.__words[0])
    {
      v63 = v78.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)v81 = v63;
        sub_1C4FF890C((void ***)v81);
        if (*(char *)(v63 - 1) < 0)
          operator delete(*(void **)(v63 - 24));
        v64 = v63 - 48;
        v63 -= 72;
      }
      while (v64 != v62);
      v44 = (void *)v78.__r_.__value_.__r.__words[0];
    }
    v78.__r_.__value_.__l.__size_ = v62;
  }
  operator delete(v44);
LABEL_86:
  if ((v85 & 1) != 0)
  {
    v65 = v84[0];
    v84[0] = 0;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  if ((v87 & 1) != 0)
  {
    v66 = v86[0];
    v86[0] = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getLinkAsStrtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  char *v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::string v33;
  char *v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  std::string::size_type v42;
  char *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, bswap32(*(_DWORD *)(a2 + 40)), (uint64_t)&v43);
  if ((v44 & 1) != 0)
  {
    sub_1C59BD440(&v36, a1, a2);
    v7 = std::string::insert(&v36, 0, "invalid section linked to ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v37, ": ");
    v10 = 0;
    v11 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v44 & 1) != 0)
    {
      v10 = v43;
      v43 = 0;
    }
    v34 = v10;
    sub_1C61D2548(&v34, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    v15 = v14->__r_.__value_.__r.__words[2];
    v41 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v40 = 260;
    v39[0] = &v41;
    v16 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v18 = qword_1EF8F7238[0];
    *(_QWORD *)v16 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v16 + 8));
    *(_QWORD *)(v16 + 32) = 3;
    *(_QWORD *)(v16 + 40) = v18;
    *(_BYTE *)(v16 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v39[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(a1, (uint64_t)v43, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)v39, (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
      sub_1C59BD440(&__p, a1, a2);
      v19 = std::string::insert(&__p, 0, "invalid string table linked to ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v36, ": ");
      v22 = 0;
      v23 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if ((v42 & 1) != 0)
      {
        v22 = (char *)v41;
        *(_QWORD *)&v41 = 0;
      }
      v32 = v22;
      sub_1C61D2548(&v32, &v33);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v33;
      else
        v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
      else
        v25 = v33.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v37, (const std::string::value_type *)v24, v25);
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v40 = 260;
      v39[0] = &v38;
      v28 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v30 = qword_1EF8F7238[0];
      *(_QWORD *)v28 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v28 + 8));
      *(_QWORD *)(v28 + 32) = 3;
      *(_QWORD *)(v28 + 40) = v30;
      *(_BYTE *)(v28 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v28;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (v32)
        (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v42 & 1) != 0)
      {
        v31 = v41;
        *(_QWORD *)&v41 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = v41;
    }
  }
  if ((v44 & 1) != 0)
  {
    v6 = (uint64_t)v43;
    v43 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void sub_1C59BD440(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  const char *ELFSectionTypeName;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a2, (uint64_t)v13);
  v6 = a3 - v13[0];
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a2 + 18)) >> 16), bswap32(*(_DWORD *)(a3 + 4)));
  v10 = 773;
  v9[0] = ELFSectionTypeName;
  v9[1] = v8;
  v9[2] = " section with index ";
  v11[0] = v9;
  v11[2] = (v6 >> 6);
  v12 = 2050;
  llvm::Twine::str((llvm::Twine *)v11, a1);
}

void sub_1C59BD50C(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  _QWORD **p_dst;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string v27;
  _BYTE __p[24];
  _QWORD v29[2];
  unint64_t v30;
  __int16 v31;
  _QWORD *__dst;
  __int128 v33;
  __int16 v34;
  std::string v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((unint64_t)(*a2 + 2) <= **(_QWORD **)a1)
  {
    v14 = (unsigned int *)((char *)v5 + bswap32(v5[1]));
    *a2 = v14;
    v15 = *(uint64_t **)(a1 + 32);
    v16 = **(_DWORD **)(a1 + 24);
    v17 = bswap32(*v5);
    v18 = v15[1];
    v19 = v18 - v17;
    if (v18 < v17)
    {
      v29[0] = "<invalid vda_name: ";
      v30 = v17;
      v31 = 2051;
      __dst = v29;
      *((_QWORD *)&v33 + 1) = ">";
      v34 = 770;
      llvm::Twine::str((llvm::Twine *)&__dst, __p);
      v20 = *(_QWORD **)__p;
      v35.__r_.__value_.__r.__words[0] = *(_QWORD *)&__p[8];
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__p[15];
      v21 = __p[23];
LABEL_21:
      *(_BYTE *)(a4 + 32) &= ~1u;
      *(_DWORD *)a4 = (_DWORD)v14 - v16;
      v26 = v35.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 16) = v26;
      *(_QWORD *)(a4 + 23) = *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(a4 + 31) = v21;
      return;
    }
    if (v19 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v22 = *v15;
    if (v19 >= 0x17)
    {
      v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v24 = v19 | 7;
      v25 = v24 + 1;
      p_dst = (_QWORD **)operator new(v24 + 1);
      *(_QWORD *)&v33 = v19;
      *((_QWORD *)&v33 + 1) = v25 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v18 - v17;
      p_dst = &__dst;
      if (v18 == v17)
        goto LABEL_20;
    }
    memmove(p_dst, (const void *)(v22 + v17), v19);
LABEL_20:
    *((_BYTE *)p_dst + v19) = 0;
    v20 = __dst;
    v35.__r_.__value_.__r.__words[0] = v33;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v33 + 7);
    v21 = HIBYTE(v33);
    goto LABEL_21;
  }
  sub_1C59BD440(&v27, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v7 = std::string::insert(&v27, 0, "invalid ");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v35, ": version definition ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v29[0] = __p;
  v30 = a3;
  v31 = 2052;
  __dst = v29;
  *((_QWORD *)&v33 + 1) = " refers to an auxiliary entry that goes past the end of the section";
  v34 = 770;
  v11 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v13 = qword_1EF8F7238[0];
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = 3;
  *(_QWORD *)(v11 + 40) = v13;
  *(_BYTE *)(v11 + 48) = 1;
  *(_BYTE *)(a4 + 32) |= 1u;
  *(_QWORD *)a4 = v11;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getVersionDependencies(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  size_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const char *v52;
  uint64_t v53;
  unint64_t v55;
  std::string::size_type v56;
  void *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  char *v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  std::string::size_type v73;
  uint64_t v74;
  unint64_t v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  std::string::size_type v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char **v98;
  std::string __p;
  __int16 v100;
  char *v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  char *v106;
  __int128 __dst;
  const char *v108;
  __int16 v109;
  _QWORD v110[2];
  char v111;
  _QWORD v112[2];
  char v113;
  uint64_t v114;

  v7 = a2;
  v8 = a1;
  v114 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getLinkAsStrtab(a1, a2, (uint64_t)v112);
  v94 = v8;
  if ((v113 & 1) != 0)
  {
    v62 = (char *)v112[0];
    v112[0] = 0;
    v106 = v62;
    sub_1C61D2548(&v106, &__p);
    v109 = 260;
    *(_QWORD *)&__dst = &__p;
    a3(v110, a4, &__dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v106)
      (*(void (**)(char *))(*(_QWORD *)v106 + 8))(v106);
    v63 = v110[0];
    if (v110[0])
    {
      *(_BYTE *)(a5 + 24) |= 1u;
      *(_QWORD *)a5 = v63;
      goto LABEL_73;
    }
    v97 = 0;
    v10 = 0;
  }
  else
  {
    v10 = v112[1];
    v97 = v112[0];
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(v8, v7, (uint64_t)v110);
  if ((v111 & 1) != 0)
  {
    v64 = a5;
    sub_1C59BD440(&v103, v8, v7);
    v65 = std::string::insert(&v103, 0, "cannot read content of ");
    v66 = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v104, ": ");
    v68 = 0;
    v69 = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v69;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if ((v111 & 1) != 0)
    {
      v68 = (char *)v110[0];
      v110[0] = 0;
    }
    v101 = v68;
    sub_1C61D2548(&v101, &v102);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v102;
    else
      v70 = (std::string *)v102.__r_.__value_.__r.__words[0];
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v102.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v105, (const std::string::value_type *)v70, size);
    v73 = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v109 = 260;
    *(_QWORD *)&__dst = &__p;
    v74 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v76 = qword_1EF8F7238[0];
    *(_QWORD *)v74 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v74 + 8));
    *(_QWORD *)(v74 + 32) = 3;
    *(_QWORD *)(v74 + 40) = v76;
    *(_BYTE *)(v74 + 48) = 1;
    *(_BYTE *)(v64 + 24) |= 1u;
    *(_QWORD *)v64 = v74;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (v101)
      (*(void (**)(char *))(*(_QWORD *)v101 + 8))(v101);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    v57 = (void *)v103.__r_.__value_.__r.__words[0];
  }
  else
  {
    v11 = v110[0];
    v12 = 0uLL;
    memset(&v105, 0, sizeof(v105));
    if (!*(_DWORD *)(v7 + 44))
    {
      v38 = 0;
LABEL_41:
      *(_BYTE *)(a5 + 24) &= ~1u;
      *(_OWORD *)a5 = v12;
      *(_QWORD *)(a5 + 16) = v38;
      goto LABEL_70;
    }
    v91 = a5;
    v92 = v7;
    v13 = v110[0] + v110[1];
    v14 = 1;
    v15 = (unsigned __int16 *)v110[0];
    v96 = v10;
    while (1)
    {
      if ((unint64_t)(v15 + 10) > v13)
      {
        sub_1C59BD440(&v102, v8, v7);
        v77 = std::string::insert(&v102, 0, "invalid ");
        v78 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v103, ": version dependency ");
        v80 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        __p.__r_.__value_.__r.__words[2] = v14;
        v100 = 2052;
        v52 = " goes past the end of the section";
        goto LABEL_52;
      }
      if ((v15 & 3) != 0)
        break;
      v16 = *v15;
      if (v16 != 256)
      {
        v85 = __rev16(v16);
        sub_1C59BD440(&v102, v8, v7);
        v86 = std::string::insert(&v102, 0, "unable to dump ");
        v87 = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = std::string::append(&v103, ": version ");
        v89 = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        __p.__r_.__value_.__r.__words[2] = v85;
        v100 = 2052;
        v52 = " is not yet supported";
        goto LABEL_52;
      }
      v17 = sub_1C59A4610((uint64_t)&v105, (_OWORD *)v105.__r_.__value_.__l.__size_);
      *(_DWORD *)v17 = bswap32(*v15) >> 16;
      *(_DWORD *)(v17 + 4) = bswap32(v15[1]) >> 16;
      *(_DWORD *)(v17 + 8) = (_DWORD)v15 - v11;
      v18 = bswap32(*((_DWORD *)v15 + 1));
      v19 = v10 - v18;
      v93 = v14;
      if (v10 <= v18)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"<corrupt vn_file: ";
        v90 = v90 & 0xFFFFFFFF00000000 | v18;
        __p.__r_.__value_.__r.__words[2] = v90;
        v100 = 2051;
        *(_QWORD *)&__dst = &__p;
        v108 = ">";
        v109 = 770;
        llvm::Twine::str((llvm::Twine *)&__dst, &v104);
        v21 = v17 + 16;
        v22 = v17;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        v23 = (const char *)v104.__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
      }
      else
      {
        if (v19 > 0x7FFFFFFFFFFFFFF7)
LABEL_109:
          abort();
        if (v19 >= 0x17)
        {
          v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v24 = v19 | 7;
          v25 = v24 + 1;
          p_dst = (__int128 *)operator new(v24 + 1);
          *((_QWORD *)&__dst + 1) = v10 - v18;
          v108 = (const char *)(v25 | 0x8000000000000000);
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v108) = v10 - v18;
          p_dst = &__dst;
        }
        memmove(p_dst, (const void *)(v97 + v18), v10 - v18);
        *((_BYTE *)p_dst + v19) = 0;
        v22 = v17;
        v21 = v17 + 16;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        *(_OWORD *)v21 = __dst;
        v23 = v108;
      }
      *(_QWORD *)(v21 + 16) = v23;
      if (v15[1])
      {
        v26 = 0;
        v27 = (char *)v15 + bswap32(*((_DWORD *)v15 + 2));
        v98 = (char **)(v22 + 40);
        v95 = v22;
        while (1)
        {
          if ((v27 & 3) != 0)
          {
            sub_1C59BD440(&v103, v94, v92);
            v39 = std::string::insert(&v103, 0, "invalid ");
            v40 = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v104.__r_.__value_.__r.__words[2] = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            v41 = std::string::append(&v104, ": found a misaligned auxiliary entry at offset 0x");
            v42 = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            v43 = (std::string::size_type)&v27[-v11];
            goto LABEL_43;
          }
          if ((unint64_t)(v27 + 16) > v13)
            break;
          v28 = (_DWORD *)sub_1C59A47F0(v98, *(_QWORD *)(v22 + 48));
          v29 = v28;
          *v28 = bswap32(*(_DWORD *)v27);
          v28[1] = bswap32(*((unsigned __int16 *)v27 + 2)) >> 16;
          v28[2] = bswap32(*((unsigned __int16 *)v27 + 3)) >> 16;
          v28[3] = (_DWORD)v27 - v11;
          v30 = bswap32(*((_DWORD *)v27 + 2));
          v31 = v10 - v30;
          if (v10 <= v30)
          {
            MEMORY[0x1CAA32ABC](v28 + 4, "<corrupt>");
          }
          else
          {
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_109;
            if (v31 >= 0x17)
            {
              v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v33 = v31 | 7;
              v34 = v11;
              v35 = v33 + 1;
              v32 = (__int128 *)operator new(v33 + 1);
              v36 = v35 | 0x8000000000000000;
              v11 = v34;
              v22 = v95;
              *((_QWORD *)&__dst + 1) = v31;
              v108 = (const char *)v36;
              *(_QWORD *)&__dst = v32;
            }
            else
            {
              HIBYTE(v108) = v10 - v30;
              v32 = &__dst;
            }
            memmove(v32, (const void *)(v97 + v30), v31);
            *((_BYTE *)v32 + v31) = 0;
            v37 = (void **)(v29 + 4);
            if (*((char *)v29 + 39) < 0)
              operator delete(*v37);
            *(_OWORD *)v37 = __dst;
            *((_QWORD *)v29 + 4) = v108;
            v10 = v96;
          }
          v27 += bswap32(*((_DWORD *)v27 + 3));
          if (++v26 >= bswap32(v15[1]) >> 16)
            goto LABEL_38;
        }
        sub_1C59BD440(&v102, v94, v92);
        v48 = std::string::insert(&v102, 0, "invalid ");
        v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v103, ": version dependency ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        __p.__r_.__value_.__r.__words[2] = v93;
        v100 = 2052;
        v52 = " refers to an auxiliary entry that goes past the end of the section";
LABEL_52:
        *(_QWORD *)&__dst = &__p;
        v108 = v52;
        v109 = 770;
        v53 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v55 = qword_1EF8F7238[0];
        *(_QWORD *)v53 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v53 + 8));
        *(_QWORD *)(v53 + 32) = 3;
        *(_QWORD *)(v53 + 40) = v55;
        *(_BYTE *)(v53 + 48) = 1;
        *(_BYTE *)(v91 + 24) |= 1u;
        *(_QWORD *)v91 = v53;
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        {
          v47 = (void *)v102.__r_.__value_.__r.__words[0];
          goto LABEL_60;
        }
        goto LABEL_61;
      }
LABEL_38:
      v15 = (unsigned __int16 *)((char *)v15 + bswap32(*((_DWORD *)v15 + 3)));
      v14 = v93 + 1;
      v7 = v92;
      v8 = v94;
      if (v93 + 1 > bswap32(*(_DWORD *)(v92 + 44)))
      {
        v12 = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
        v38 = v105.__r_.__value_.__r.__words[2];
        a5 = v91;
        goto LABEL_41;
      }
    }
    sub_1C59BD440(&v103, v8, v7);
    v81 = std::string::insert(&v103, 0, "invalid ");
    v82 = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    v83 = std::string::append(&v104, ": found a misaligned version dependency entry at offset 0x");
    v84 = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v43 = (std::string::size_type)v15 - v11;
LABEL_43:
    v102.__r_.__value_.__r.__words[0] = v43;
    *(_QWORD *)&__dst = &__p;
    v108 = (const char *)&v102;
    v109 = 3588;
    v44 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v46 = qword_1EF8F7238[0];
    *(_QWORD *)v44 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v44 + 8));
    *(_QWORD *)(v44 + 32) = 3;
    *(_QWORD *)(v44 + 40) = v46;
    *(_BYTE *)(v44 + 48) = 1;
    *(_BYTE *)(v91 + 24) |= 1u;
    *(_QWORD *)v91 = v44;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      v47 = (void *)v103.__r_.__value_.__r.__words[0];
LABEL_60:
      operator delete(v47);
    }
LABEL_61:
    v56 = v105.__r_.__value_.__r.__words[0];
    if (!v105.__r_.__value_.__r.__words[0])
      goto LABEL_70;
    v57 = (void *)v105.__r_.__value_.__r.__words[0];
    if (v105.__r_.__value_.__l.__size_ != v105.__r_.__value_.__r.__words[0])
    {
      v58 = v105.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)&__dst = v58;
        sub_1C59C5618((void ***)&__dst);
        if (*(char *)(v58 - 1) < 0)
          operator delete(*(void **)(v58 - 24));
        v59 = v58 - 40;
        v58 -= 64;
      }
      while (v59 != v56);
      v57 = (void *)v105.__r_.__value_.__r.__words[0];
    }
    v105.__r_.__value_.__l.__size_ = v56;
  }
  operator delete(v57);
LABEL_70:
  if ((v111 & 1) != 0)
  {
    v60 = v110[0];
    v110[0] = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
LABEL_73:
  if ((v113 & 1) != 0)
  {
    v61 = v112[0];
    v112[0] = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  const char *ELFSectionTypeName;
  uint64_t v28;
  std::string::size_type v29;
  std::string v30;
  std::string v31;
  std::string __p;
  _QWORD v33[4];
  __int16 v34;
  __int128 v35;
  std::string::size_type v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) != 50331648)
  {
    sub_1C59BE6BC(a1, a2, (char *)&v31);
    v23 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&__p, ": expected SHT_STRTAB, but got ");
    v26 = v25->__r_.__value_.__r.__words[2];
    v35 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v36 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
    v33[0] = &v35;
    v33[2] = ELFSectionTypeName;
    v33[3] = v28;
    v34 = 1284;
    a3(&v30, a4, v33);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v29 = v30.__r_.__value_.__r.__words[0];
    if (v30.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v29;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(a1, a2, (uint64_t)&v35);
  v8 = v35;
  if ((v36 & 1) != 0)
  {
    *(_QWORD *)&v35 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else
  {
    v9 = *((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
    {
      sub_1C59BE6BC(a1, a2, (char *)&v30);
      v13 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v12 = " is empty";
      goto LABEL_8;
    }
    if (*(_BYTE *)(*((_QWORD *)&v35 + 1) + v35 - 1))
    {
      sub_1C59BE6BC(a1, a2, (char *)&v30);
      v10 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = " is non-null terminated";
LABEL_8:
      v15 = std::string::append(&v31, v12);
      v16 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = &__p;
      v17 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v19 = qword_1EF8F7238[0];
      *(_QWORD *)v17 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v17 + 8));
      *(_QWORD *)(v17 + 32) = 3;
      *(_QWORD *)(v17 + 40) = v19;
      *(_BYTE *)(v17 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v17;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
  }
LABEL_17:
  if ((v36 & 1) != 0)
  {
    v20 = v35;
    *(_QWORD *)&v35 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void sub_1C59BE6BC(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) != 0)
  {
    v8 = v12[0];
    v12[0] = 0;
    v10.__r_.__value_.__r.__words[0] = v8;
    sub_1C4D62BD4(&v10.__r_.__value_.__l.__data_, &v11.__r_.__value_.__l.__data_);
    if (v10.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
    a3[23] = 15;
    strcpy(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v10, (int64_t)(a2 - v12[0]) >> 6);
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;
  std::string v31;
  _QWORD v32[2];
  unint64_t *v33;
  __int16 v34;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  _QWORD v38[2];
  unint64_t *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;

  v5 = bswap64(*(_QWORD *)(a2 + 24));
  v6 = bswap64(*(_QWORD *)(a2 + 32));
  v44 = v6;
  v45 = v5;
  if (__CFADD__(v5, v6))
  {
    sub_1C59BE6BC(a1, a2, (char *)&v31);
    v7 = std::string::insert(&v31, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v26, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v32[0] = __p;
    v33 = &v45;
    v34 = 3588;
    v35[0] = v32;
    v36 = ") + sh_size (0x";
    v37 = 770;
    v38[0] = v35;
    v39 = &v44;
    v40 = 3586;
    v41[0] = v38;
    v42 = ") that cannot be represented";
    v43 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if (v6 + v5 <= a1[1])
  {
    v22 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    sub_1C59BE6BC(a1, a2, (char *)&v24);
    v15 = std::string::insert(&v24, 0, "section ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v25, " has a sh_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45;
    v27 = 3588;
    __p[0] = &v26;
    v29 = ") + sh_size (0x";
    v30 = 770;
    v32[0] = __p;
    v33 = &v44;
    v34 = 3586;
    v35[0] = v32;
    v36 = ") that is greater than the file size (0x";
    v37 = 770;
    v23 = a1[1];
    v38[0] = v35;
    v39 = (unint64_t *)&v23;
    v40 = 3586;
    v41[0] = v38;
    v42 = ")";
    v43 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v24.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTableForSymtab(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v8;
  unint64_t v10;
  const char *v12;
  const char *v13;
  void (*v14)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  const char *v15;
  char v16;
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 0x2000000 || v6 == 184549376)
  {
    sub_1C62CB604(a3, a4, bswap32(*(_DWORD *)(a2 + 40)), (uint64_t)&v15);
    v12 = v15;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      v14 = sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(a1, (uint64_t)v15, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v14, a5);
      if ((v16 & 1) != 0)
      {
        v13 = v15;
        v15 = 0;
        if (v13)
          (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  else
  {
    v15 = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v17 = 259;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb1EEEE23getStringTableForSymtabERKNS0_13Elf_Shdr_ImplIS5_EENS_8ArrayRefIS8_EE(a1, a2, a3, a4, a5);
}

void sub_1C59BEE28(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  unint64_t *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 0x400000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v47 = v7;
    v48 = v6;
    if ((v7 & 3) != 0)
    {
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 >> 2;
          return;
        }
        sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = &v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 4;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getDynSymtabSize(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  void **v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42[4];
  __int16 v43;
  uint64_t v44;
  void *__p[2];
  char v46;
  void **v47;
  uint64_t v48[2];
  unsigned int *v49;
  char v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  __int16 v56;
  uint64_t *v57;
  uint64_t v58;
  const char *v59;
  __int16 v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)&v61);
  v4 = v61;
  if ((v63 & 1) != 0)
  {
    v61 = 0;
    v7 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_8;
  }
  if (v62)
  {
    v5 = (unint64_t *)(v61 + 32);
    v6 = v62 << 6;
    while (*((_DWORD *)v5 - 7) != 184549376)
    {
      v5 += 8;
      v6 -= 64;
      if (!v6)
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_QWORD *)a2 = 0;
        goto LABEL_9;
      }
    }
    v32 = bswap64(*v5);
    v33 = bswap64(v5[3]);
    v4 = v32 / v33;
    if (v32 % v33)
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v35 = qword_1EF8F7238[0];
      v41 = bswap64(*v5);
      v42[0] = "SHT_DYNSYM section has sh_size (";
      v42[2] = &v41;
      v43 = 3075;
      v49 = (unsigned int *)v42;
      v51 = ") % sh_entsize (";
      v52 = 770;
      v40 = bswap64(v5[3]);
      v53 = (uint64_t)&v49;
      v55 = &v40;
      v56 = 3074;
      v57 = &v53;
      v59 = ") that is not 0";
      v60 = 770;
      llvm::Twine::str((llvm::Twine *)&v57, __p);
      if (v46 >= 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      v48[0] = 3;
      v48[1] = v35;
      v47 = v36;
      sub_1C5DF1730((_BYTE **)&v47, v48, &v44);
      if (v46 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v44;
      v44 = 0;
      goto LABEL_9;
    }
    v7 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_8:
    *(_BYTE *)(a2 + 8) = v7;
    *(_QWORD *)a2 = v4;
    goto LABEL_9;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamicEntries(a1, (uint64_t)&v57);
  v9 = v57;
  if ((v59 & 1) != 0)
  {
    v57 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    goto LABEL_61;
  }
  if (!v58)
    goto LABEL_60;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &v57[2 * v58];
  do
  {
    v15 = (unint64_t *)(v9 + 1);
    while (1)
    {
      v16 = v15 - 1;
      v17 = bswap64(*(v15 - 1));
      if (v17 != 1879047925)
        break;
      v18 = *v15;
      v15 += 2;
      v13 = bswap64(v18);
      v12 = 1;
      if (v16 + 2 == (unint64_t *)v14)
        goto LABEL_24;
    }
    if (v17 == 4)
    {
      v11 = bswap64(*v15);
      v10 = 1;
    }
    v9 = (uint64_t *)(v15 + 1);
  }
  while (v9 != v14);
  if (!v12)
  {
    if (v10)
    {
      v49 = (unsigned int *)sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v11, (uint64_t)&v49, (uint64_t)&v53);
      v38 = v53;
      if ((v54 & 1) != 0)
      {
        *(_BYTE *)(a2 + 8) |= 1u;
      }
      else
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        v38 = bswap32(*(_DWORD *)(v38 + 4));
      }
      *(_QWORD *)a2 = v38;
      goto LABEL_61;
    }
LABEL_60:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
    goto LABEL_61;
  }
LABEL_24:
  v53 = (uint64_t)sub_1C59A5848;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v13, (uint64_t)&v53, (uint64_t)&v49);
  v19 = v49;
  if ((v50 & 1) != 0)
  {
    v49 = 0;
    v37 = *(_BYTE *)(a2 + 8) | 1;
LABEL_56:
    *(_BYTE *)(a2 + 8) = v37;
    *(_QWORD *)a2 = v19;
    goto LABEL_61;
  }
  if (!*v49)
  {
    v19 = (unsigned int *)(bswap32(v49[1]) + 1);
LABEL_55:
    v37 = *(_BYTE *)(a2 + 8) & 0xFE;
    goto LABEL_56;
  }
  v20 = 0;
  v21 = *a1 + a1[1];
  v22 = bswap32(*v49);
  v23 = 8 * bswap32(v49[2]) + 16;
  v24 = (uint64_t)&v49[v22] + v23;
  v25 = 4 * v22;
  do
  {
    v26 = v20;
    v27 = bswap32(*(unsigned int *)((char *)v49 + v23));
    if (v20 <= v27)
      v20 = v27;
    v23 += 4;
    v25 -= 4;
  }
  while (v25);
  v28 = v24 + 4 * (v20 - bswap32(v49[1]));
  if (v28 < v21)
  {
    if (v26 <= v27)
      v29 = v27;
    else
      v29 = v26;
    v19 = (unsigned int *)(v29 + 1);
    while ((*(_BYTE *)(v28 + 3) & 1) == 0)
    {
      v28 += 4;
      v19 = (unsigned int *)((char *)v19 + 1);
      if (v28 >= v21)
        goto LABEL_37;
    }
    goto LABEL_55;
  }
LABEL_37:
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v53 = 3;
  v54 = qword_1EF8F7238[0];
  v42[0] = "no terminator found for GNU hash section before buffer end";
  sub_1C5DF1730(v42, &v53, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) |= 1u;
  if ((v50 & 1) != 0)
  {
    v31 = v49;
    v49 = 0;
    if (v31)
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
  }
LABEL_61:
  if ((v59 & 1) != 0)
  {
    v39 = v57;
    v57 = 0;
    if (v39)
      (*(void (**)(uint64_t *))(*v39 + 8))(v39);
  }
LABEL_9:
  if ((v63 & 1) != 0)
  {
    v8 = v61;
    v61 = 0;
    if (v8)
      (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamicEntries(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  const char *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v32;
  void *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  unint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  unint64_t v45;
  uint64_t v46;
  std::string v47;
  std::string v48;
  std::string v49;
  __int16 v50;
  std::string v51;
  __int16 v52;
  std::string v53;
  void *__p[2];
  unint64_t *v55;
  __int16 v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD v59[2];
  std::string *v60;
  __int16 v61;
  _QWORD v62[2];
  std::string *v63;
  __int16 v64;
  _QWORD v65[2];
  std::string *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::program_headers(a1, (uint64_t)&v71);
  v4 = v71;
  if ((v73 & 1) != 0)
  {
    v71 = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_16;
  }
  if (v72)
  {
    v5 = 56 * v72;
    while (*(_DWORD *)v4 != 0x2000000)
    {
      v4 += 56;
      v5 -= 56;
      if (!v5)
        goto LABEL_6;
    }
    v6 = *a1 + bswap64(*(_QWORD *)(v4 + 8));
    v7 = bswap64(*(_QWORD *)(v4 + 32));
    if (v7 > 0xF)
    {
      v8 = v7 >> 4;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_6:
    v6 = 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)&v68);
  v14 = v68;
  if ((v70 & 1) == 0)
  {
    if (v69)
    {
      v15 = 0;
      while (1)
      {
        v16 = v68 + v15;
        if (*(_DWORD *)(v68 + v15 + 4) == 100663296)
          break;
        v15 += 64;
        if (v69 << 6 == v15)
          goto LABEL_25;
      }
      if (*(_QWORD *)(v16 + 56) != 0x1000000000000000)
      {
        sub_1C59BE6BC(a1, v16, (char *)&v49);
        v26 = std::string::insert(&v49, 0, "section ");
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v51, " has invalid sh_entsize: expected ");
        v29 = (unint64_t *)v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v55 = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v53.__r_.__value_.__r.__words[0] = 16;
        v59[0] = __p;
        v60 = &v53;
        v61 = 2564;
        v62[0] = v59;
        v63 = (std::string *)", but got ";
        v64 = 770;
        v48.__r_.__value_.__r.__words[0] = bswap64(*(_QWORD *)(v16 + 56));
        v65[0] = v62;
        v66 = &v48;
        v67 = 3074;
        v30 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v32 = qword_1EF8F7238[0];
        *(_QWORD *)v30 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = v32;
        *(_BYTE *)(v30 + 48) = 1;
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_53:
          operator delete(v33);
        }
LABEL_54:
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v30;
        if ((v70 & 1) == 0)
          goto LABEL_16;
        goto LABEL_29;
      }
      v18 = v68 + v15;
      v19 = bswap64(*(_QWORD *)(v18 + 24));
      v58 = v19;
      v20 = bswap64(*(_QWORD *)(v18 + 32));
      v57 = v20;
      if ((v20 & 0xF) != 0)
      {
        sub_1C59BE6BC(a1, v16, (char *)&v53);
        v21 = std::string::insert(&v53, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v49, " has an invalid sh_size (");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        __p[0] = &v51;
        v55 = &v57;
        v56 = 3076;
        v59[0] = __p;
        v60 = (std::string *)") which is not a multiple of its sh_entsize (";
        v61 = 770;
        v48.__r_.__value_.__r.__words[0] = bswap64(*(_QWORD *)(v16 + 56));
        v62[0] = v59;
        v63 = &v48;
        v64 = 3074;
        v25 = ")";
        goto LABEL_45;
      }
      if (__CFADD__(v19, v20))
      {
        sub_1C59BE6BC(a1, v16, (char *)&v53);
        v34 = std::string::insert(&v53, 0, "section ");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v49, " has a sh_offset (0x");
        v37 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        __p[0] = &v51;
        v55 = &v58;
        v56 = 3588;
        v59[0] = __p;
        v60 = (std::string *)") + sh_size (0x";
        v61 = 770;
        v62[0] = v59;
        v63 = (std::string *)&v57;
        v64 = 3586;
        v25 = ") that cannot be represented";
LABEL_45:
        v65[0] = v62;
        v66 = (std::string *)v25;
        v67 = 770;
        v30 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v39 = qword_1EF8F7238[0];
        *(_QWORD *)v30 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = v39;
        *(_BYTE *)(v30 + 48) = 1;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v53.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (v20 + v19 > a1[1])
      {
        sub_1C59BE6BC(a1, v16, (char *)&v47);
        v40 = std::string::insert(&v47, 0, "section ");
        v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v48, " has a sh_offset (0x");
        v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
        v49.__r_.__value_.__r.__words[2] = (std::string::size_type)&v58;
        v50 = 3588;
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
        v51.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v52 = 770;
        __p[0] = &v51;
        v55 = &v57;
        v56 = 3586;
        v59[0] = __p;
        v60 = (std::string *)") that is greater than the file size (0x";
        v61 = 770;
        v46 = a1[1];
        v62[0] = v59;
        v63 = (std::string *)&v46;
        v64 = 3586;
        v65[0] = v62;
        v66 = (std::string *)")";
        v67 = 770;
        v30 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v45 = qword_1EF8F7238[0];
        *(_QWORD *)v30 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = v45;
        *(_BYTE *)(v30 + 48) = 1;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v47.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      v6 = *a1 + v19;
      v8 = v20 >> 4;
      if (!v6)
      {
LABEL_66:
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_16;
      }
    }
    else
    {
LABEL_25:
      v8 = 0;
      if (!v6)
        goto LABEL_66;
    }
    if (!v8)
    {
      v9 = "invalid empty dynamic section";
LABEL_12:
      v65[0] = v9;
      v67 = 259;
      v10 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v12 = qword_1EF8F7238[0];
      *(_QWORD *)v10 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 + 32) = 3;
      *(_QWORD *)(v10 + 40) = v12;
      *(_BYTE *)(v10 + 48) = 1;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v10;
      goto LABEL_16;
    }
LABEL_10:
    if (!*(_QWORD *)(v6 + 16 * v8 - 16))
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v8;
      goto LABEL_16;
    }
    v9 = "dynamic sections must be DT_NULL terminated";
    goto LABEL_12;
  }
  v68 = 0;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v14;
LABEL_29:
  v17 = v68;
  v68 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_16:
  if ((v73 & 1) != 0)
  {
    v13 = v71;
    v71 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb1EEEE14dynamicEntriesEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toMappedAddr(_QWORD *a1@<X0>, unint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char *v20;
  unint64_t v21;
  const std::nothrow_t *v22;
  unint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  _QWORD v50[4];
  __int16 v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[2];
  unint64_t *v61;
  __int16 v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[32];
  _DWORD *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v63 = a2;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::program_headers(a1, (uint64_t)&v67);
  if ((v69 & 1) != 0)
  {
    v13 = v67;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v13;
  }
  else
  {
    v64 = v66;
    v65 = 0x400000000;
    if (!v68)
      goto LABEL_35;
    v9 = 0;
    v10 = v67;
    v11 = 56 * v68;
    v12 = v67;
    do
    {
      if (*v12 == 0x1000000)
      {
        if (v9 >= HIDWORD(v65))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v9 + 1, 8);
          v9 = v65;
        }
        *(_QWORD *)&v64[8 * v9] = v10;
        v9 = v65 + 1;
        LODWORD(v65) = v65 + 1;
      }
      v12 += 14;
      v10 += 14;
      v11 -= 56;
    }
    while (v11);
    if (!v9)
      goto LABEL_35;
    v14 = 0;
    v15 = v64;
    do
    {
      if (8 * v9 - 8 == v14)
        goto LABEL_25;
      v16 = bswap64(*(_QWORD *)(*(_QWORD *)&v64[v14 + 8] + 16));
      v17 = bswap64(*(_QWORD *)(*(_QWORD *)&v64[v14] + 16));
      v14 += 8;
    }
    while (v16 >= v17);
    v60[0] = "loadable segments are unsorted by virtual address";
    v62 = 259;
    a3(v58, a4, v60);
    v18 = v58[0];
    if (v58[0])
    {
      v19 = *(_BYTE *)(a5 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a5 + 8) = v19;
      *(_QWORD *)a5 = v18;
      goto LABEL_39;
    }
    v20 = v64;
    v21 = v65;
    if (v65 < 0x81)
    {
LABEL_22:
      sub_1C59C8310(v20, &v20[8 * v21], v21, 0, 0);
    }
    else
    {
      v22 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v23 = v65;
      while (1)
      {
        v24 = (uint64_t *)operator new(8 * v23, v22);
        if (v24)
          break;
        v25 = v23 > 1;
        v23 >>= 1;
        if (!v25)
          goto LABEL_22;
      }
      v26 = v24;
      sub_1C59C8310(v20, &v20[8 * v21], v21, v24, v23);
      operator delete(v26);
    }
    v15 = v64;
    v9 = v65;
    if (!v9)
      goto LABEL_35;
LABEL_25:
    v27 = v9;
    v28 = v15;
    do
    {
      v29 = v27 >> 1;
      v30 = &v28[v27 >> 1];
      v32 = *v30;
      v31 = v30 + 1;
      v27 += ~(v27 >> 1);
      if (bswap64(*(_QWORD *)(v32 + 16)) > v63)
        v27 = v29;
      else
        v28 = v31;
    }
    while (v27);
    if (v28 != v15
      && (v33 = (unint64_t *)*(v28 - 1), v34 = v63 - bswap64(v33[2]), v35 = bswap64(v33[4]), v34 < v35))
    {
      v36 = bswap64(v33[1]);
      v37 = v36 + v34;
      v38 = a1[1];
      if (v37 < v38)
      {
        v18 = *a1 + v37;
        v19 = *(_BYTE *)(a5 + 8) & 0xFE;
        goto LABEL_17;
      }
      v46[2] = &v63;
      v47 = 3587;
      v48[0] = v46;
      v48[2] = " to the segment with index ";
      v49 = 770;
      v45 = 0x6DB6DB6DB6DB6DB7 * (((char *)v33 - (char *)v67) >> 3) + 1;
      v46[0] = "can't map virtual address 0x";
      v50[0] = v48;
      v50[2] = &v45;
      v51 = 2818;
      v52[0] = v50;
      v52[2] = ": the segment ends at 0x";
      v53 = 770;
      v43 = v38;
      v44 = v35 + v36;
      v54[0] = v52;
      v54[2] = &v44;
      v55 = 3586;
      v56[0] = v54;
      v56[2] = ", which is greater than the file size (0x";
      v57 = 770;
      v58[0] = v56;
      v58[2] = &v43;
      v59 = 3586;
      v60[0] = v58;
      v61 = (unint64_t *)")";
      v62 = 770;
    }
    else
    {
LABEL_35:
      v60[0] = "virtual address is not in any segment: 0x";
      v61 = &v63;
      v62 = 3587;
    }
    v39 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v41 = qword_1EF8F7238[0];
    *(_QWORD *)v39 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v60, (_QWORD *)(v39 + 8));
    *(_QWORD *)(v39 + 32) = 3;
    *(_QWORD *)(v39 + 40) = v41;
    *(_BYTE *)(v39 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v39;
LABEL_39:
    if (v64 != v66)
      free(v64);
    if ((v69 & 1) != 0)
    {
      v42 = v67;
      v67 = 0;
      if (v42)
        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
}

const char *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(uint64_t a1, unsigned int a2)
{
  return llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), a2);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isMipsELF64(uint64_t a1)
{
  return *(_WORD *)(*(_QWORD *)a1 + 18) == 2048 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 2;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelativeRelocationType(uint64_t a1)
{
  return llvm::object::getELFRelativeRelocationType((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16));
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getDynamicTagAsString(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  __int16 v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  const char *v28;
  const char *v29;
  const char *v30;
  char *v31;
  std::string v32;
  _BYTE v33[17];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1 > 163)
  {
    switch(a1)
    {
      case 164:
        switch(a2)
        {
          case 1879048194:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1414287455;
            v4 = "HEXAGON_PLT";
            goto LABEL_46;
          case 1879048193:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1380275807;
            v4 = "HEXAGON_VER";
            goto LABEL_46;
          case 1879048192:
            v8 = "HEXAGON_SYMSZ";
LABEL_23:
            *(_BYTE *)(a3 + 23) = 13;
            *(_QWORD *)a3 = *(_QWORD *)v8;
            *(_QWORD *)(a3 + 5) = *(_QWORD *)(v8 + 5);
            *(_BYTE *)(a3 + 13) = 0;
            return;
        }
        break;
      case 243:
        if (a2 == 1879048193)
        {
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "RISCV_VARIANT_CC";
LABEL_26:
          *(_OWORD *)a3 = *(_OWORD *)v6;
          *(_BYTE *)(a3 + 16) = 0;
          return;
        }
        break;
      case 183:
        switch(a2)
        {
          case 1879048197:
            *(_BYTE *)(a3 + 23) = 19;
            *(_DWORD *)(a3 + 15) = 1396920415;
            v11 = "AARCH64_VARIANT_PCS";
LABEL_41:
            *(_OWORD *)a3 = *(_OWORD *)v11;
            *(_BYTE *)(a3 + 19) = 0;
            return;
          case 1879048195:
            v5 = "AARCH64_PAC_PLT";
            goto LABEL_43;
          case 1879048193:
            v5 = "AARCH64_BTI_PLT";
            goto LABEL_43;
        }
        break;
    }
  }
  else
  {
    if (a1 == 8)
    {
      switch(a2)
      {
        case 1879048193:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_VERSION";
          goto LABEL_26;
        case 1879048194:
          v5 = "MIPS_TIME_STAMP";
          goto LABEL_43;
        case 1879048195:
          v16 = "MIPS_ICHECKSUM";
          goto LABEL_163;
        case 1879048196:
          v8 = "MIPS_IVERSION";
          goto LABEL_23;
        case 1879048197:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21319;
          v14 = "MIPS_FLAGS";
          goto LABEL_176;
        case 1879048198:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 83;
          v28 = "MIPS_BASE_ADDRESS";
          goto LABEL_169;
        case 1879048199:
          *(_BYTE *)(a3 + 23) = 9;
          *(_WORD *)(a3 + 8) = 77;
          v12 = "MIPS_MSYM";
          goto LABEL_130;
        case 1879048200:
          v8 = "MIPS_CONFLICT";
          goto LABEL_23;
        case 1879048201:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1414744396;
          v15 = "MIPS_LIBLIST";
          goto LABEL_161;
        case 1879048202:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_LOCAL_GOTNO";
          goto LABEL_26;
        case 1879048203:
          v5 = "MIPS_CONFLICTNO";
          goto LABEL_43;
        case 1879048208:
          v16 = "MIPS_LIBLISTNO";
          goto LABEL_163;
        case 1879048209:
          v8 = "MIPS_SYMTABNO";
          goto LABEL_23;
        case 1879048210:
          v5 = "MIPS_UNREFEXTNO";
          goto LABEL_43;
        case 1879048211:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1297699668;
          v4 = "MIPS_GOTSYM";
          goto LABEL_46;
        case 1879048212:
          v8 = "MIPS_HIPAGENO";
          goto LABEL_23;
        case 1879048214:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1346456927;
          v15 = "MIPS_RLD_MAP";
          goto LABEL_161;
        case 1879048215:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_CLASS";
          goto LABEL_26;
        case 1879048216:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536275;
          v11 = "MIPS_DELTA_CLASS_NO";
          goto LABEL_41;
        case 1879048217:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1162038849;
          v11 = "MIPS_DELTA_INSTANCE";
          goto LABEL_41;
        case 1879048218:
          v29 = "MIPS_DELTA_INSTANCE_NO";
          goto LABEL_151;
        case 1879048219:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_RELOC";
          goto LABEL_26;
        case 1879048220:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536259;
          v11 = "MIPS_DELTA_RELOC_NO";
          goto LABEL_41;
        case 1879048221:
          v16 = "MIPS_DELTA_SYM";
          goto LABEL_163;
        case 1879048222:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 79;
          v28 = "MIPS_DELTA_SYM_NO";
          goto LABEL_169;
        case 1879048224:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1297699667;
          v11 = "MIPS_DELTA_CLASSSYM";
          goto LABEL_41;
        case 1879048225:
          v29 = "MIPS_DELTA_CLASSSYM_NO";
LABEL_151:
          *(_OWORD *)a3 = *(_OWORD *)v29;
          *(_QWORD *)(a3 + 14) = *(_QWORD *)(v29 + 14);
          *(_WORD *)(a3 + 22) = 5632;
          return;
        case 1879048226:
          v16 = "MIPS_CXX_FLAGS";
          goto LABEL_163;
        case 1879048227:
          v5 = "MIPS_PIXIE_INIT";
          goto LABEL_43;
        case 1879048228:
          v5 = "MIPS_SYMBOL_LIB";
          goto LABEL_43;
        case 1879048229:
          v30 = "MIPS_LOCALPAGE_GOTIDX";
          goto LABEL_159;
        case 1879048230:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 88;
          v28 = "MIPS_LOCAL_GOTIDX";
          goto LABEL_169;
        case 1879048231:
          *(_BYTE *)(a3 + 23) = 18;
          strcpy((char *)a3, "MIPS_HIDDEN_GOTIDX");
          return;
        case 1879048232:
          v30 = "MIPS_PROTECTED_GOTIDX";
LABEL_159:
          *(_BYTE *)(a3 + 23) = 21;
          *(_OWORD *)a3 = *(_OWORD *)v30;
          *(_QWORD *)(a3 + 13) = *(_QWORD *)(v30 + 13);
          *(_BYTE *)(a3 + 21) = 0;
          return;
        case 1879048233:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1397641033;
          v15 = "MIPS_OPTIONS";
          goto LABEL_161;
        case 1879048234:
          v16 = "MIPS_INTERFACE";
          goto LABEL_163;
        case 1879048235:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 78;
          v28 = "MIPS_DYNSTR_ALIGN";
          goto LABEL_169;
        case 1879048236:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1163544915;
          v11 = "MIPS_INTERFACE_SIZE";
          goto LABEL_41;
        case 1879048237:
          v31 = (char *)operator new(0x20uLL);
          *(_QWORD *)a3 = v31;
          *(_OWORD *)(a3 + 8) = xmmword_1C64638E0;
          strcpy(v31, "MIPS_RLD_TEXT_RESOLVE_ADDR");
          return;
        case 1879048238:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_PERF_SUFFIX";
          goto LABEL_26;
        case 1879048239:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 69;
          v28 = "MIPS_COMPACT_SIZE";
LABEL_169:
          *(_OWORD *)a3 = *(_OWORD *)v28;
          return;
        case 1879048240:
          v8 = "MIPS_GP_VALUE";
          goto LABEL_23;
        case 1879048241:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_AUX_DYNAMIC";
          goto LABEL_26;
        case 1879048242:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481748;
          v4 = "MIPS_PLTGOT";
          goto LABEL_46;
        case 1879048244:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21580;
          v14 = "MIPS_RWPLT";
          goto LABEL_176;
        case 1879048245:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_MAP_REL";
          goto LABEL_26;
        case 1879048246:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 18515;
          v14 = "MIPS_XHASH";
LABEL_176:
          *(_QWORD *)a3 = *(_QWORD *)v14;
          *(_BYTE *)(a3 + 10) = 0;
          break;
        default:
          goto LABEL_27;
      }
      return;
    }
    if (a1 == 20)
    {
      if (a2 == 1879048193)
      {
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414549343;
      }
      else
      {
        if (a2 != 1879048192)
          goto LABEL_27;
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414481759;
      }
LABEL_120:
      *(_DWORD *)(a3 + 3) = v7;
      *(_BYTE *)(a3 + 7) = 0;
      return;
    }
    if (a1 == 21 && a2 == 1879048192)
    {
      *(_BYTE *)(a3 + 23) = 11;
      *(_DWORD *)(a3 + 7) = 1263421772;
      v4 = "PPC64_GLINK";
LABEL_46:
      *(_QWORD *)a3 = *(_QWORD *)v4;
      *(_BYTE *)(a3 + 11) = 0;
      return;
    }
  }
LABEL_27:
  if (a2 <= 1879039999)
  {
    switch(a2)
    {
      case 0:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1280070990;
        goto LABEL_117;
      case 1:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1145390414;
        v10 = 17477;
        goto LABEL_115;
      case 2:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x5A534C4552544C50;
        goto LABEL_102;
      case 3:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1196706896;
        v10 = 21583;
        goto LABEL_115;
      case 4:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1213415752;
        goto LABEL_117;
      case 5:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414681683;
        goto LABEL_80;
      case 6:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414355283;
LABEL_80:
        *(_DWORD *)a3 = v21;
        v10 = 16961;
        goto LABEL_115;
      case 7:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1095517522;
        goto LABEL_117;
      case 8:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1095517522;
        goto LABEL_114;
      case 9:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1095517522;
        v23 = 17729;
        goto LABEL_119;
      case 10:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397904467;
        goto LABEL_93;
      case 11:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162697043;
        goto LABEL_95;
      case 12:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1414090313;
        goto LABEL_117;
      case 13:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1229867334;
        goto LABEL_117;
      case 14:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1095651155;
        v10 = 17741;
        goto LABEL_115;
      case 15:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1413566546;
        v26 = 72;
        goto LABEL_109;
      case 16:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x43494C4F424D5953;
        goto LABEL_102;
      case 17:
        *(_BYTE *)(a3 + 23) = 3;
        *(_DWORD *)a3 = 4998482;
        return;
      case 18:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397507410;
LABEL_93:
        *(_DWORD *)a3 = v24;
        v26 = 90;
        goto LABEL_109;
      case 19:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162626386;
LABEL_95:
        *(_DWORD *)a3 = v25;
        v10 = 21582;
        goto LABEL_115;
      case 20:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1381256272;
        goto LABEL_100;
      case 21:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1430406468;
        v26 = 71;
        goto LABEL_109;
      case 22:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1415071060;
        v7 = 1279611476;
        goto LABEL_120;
      case 23:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1380994378;
LABEL_100:
        *(_DWORD *)a3 = v27;
        v10 = 19525;
        goto LABEL_115;
      case 24:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x574F4E5F444E4942;
        goto LABEL_102;
      case 25:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "INIT_ARRAY";
        goto LABEL_176;
      case 26:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "FINI_ARRAY";
        goto LABEL_176;
      case 27:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "INIT_ARRAYSZ";
        goto LABEL_161;
      case 28:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "FINI_ARRAYSZ";
        goto LABEL_161;
      case 29:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1347310930;
        v7 = 1213481296;
        goto LABEL_120;
      case 30:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1195461702;
        v26 = 83;
LABEL_109:
        *(_WORD *)(a3 + 4) = v26;
        return;
      case 31:
        goto LABEL_70;
      case 32:
        v8 = "PREINIT_ARRAY";
        goto LABEL_23;
      case 33:
        v5 = "PREINIT_ARRAYSZ";
        goto LABEL_43;
      case 34:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1480871496;
        v15 = "SYMTAB_SHNDX";
        goto LABEL_161;
      case 35:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1380730194;
LABEL_114:
        *(_DWORD *)a3 = v22;
        v10 = 23123;
        goto LABEL_115;
      case 36:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1380730194;
        goto LABEL_117;
      case 37:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1380730194;
        v23 = 17746;
LABEL_119:
        v7 = v23 | 0x544E0000;
        goto LABEL_120;
      default:
        switch(a2)
        {
          case 1610612751:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1279611487;
            v4 = "ANDROID_REL";
            goto LABEL_46;
          case 1610612752:
            v8 = "ANDROID_RELSZ";
            goto LABEL_23;
          case 1610612753:
            *(_BYTE *)(a3 + 23) = 12;
            *(_DWORD *)(a3 + 8) = 1095517522;
            v15 = "ANDROID_RELA";
            goto LABEL_161;
          case 1610612754:
            v16 = "ANDROID_RELASZ";
            goto LABEL_163;
          default:
            goto LABEL_70;
        }
    }
  }
  if (a2 <= 1879048175)
  {
    if (a2 > 1879047924)
    {
      if (a2 != 1879047925)
      {
        if (a2 == 1879047926)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414287455;
          v4 = "TLSDESC_PLT";
          goto LABEL_46;
        }
        if (a2 == 1879047927)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481759;
          v4 = "TLSDESC_GOT";
          goto LABEL_46;
        }
        goto LABEL_70;
      }
      *(_BYTE *)(a3 + 23) = 8;
      v13 = 0x485341485F554E47;
LABEL_102:
      *(_QWORD *)a3 = v13;
      *(_BYTE *)(a3 + 8) = 0;
      return;
    }
    if (a2 == 1879040000)
    {
      *(_BYTE *)(a3 + 23) = 12;
      *(_DWORD *)(a3 + 8) = 1380730194;
      v15 = "ANDROID_RELR";
LABEL_161:
      *(_QWORD *)a3 = *(_QWORD *)v15;
      *(_BYTE *)(a3 + 12) = 0;
      return;
    }
    if (a2 == 1879040001)
    {
      v16 = "ANDROID_RELRSZ";
LABEL_163:
      *(_BYTE *)(a3 + 23) = 14;
      *(_QWORD *)a3 = *(_QWORD *)v16;
      *(_QWORD *)(a3 + 6) = *(_QWORD *)(v16 + 6);
      *(_BYTE *)(a3 + 14) = 0;
      return;
    }
    if (a2 != 1879040003)
      goto LABEL_70;
    v5 = "ANDROID_RELRENT";
LABEL_43:
    *(_BYTE *)(a3 + 23) = 15;
    *(_QWORD *)a3 = *(_QWORD *)v5;
    *(_QWORD *)(a3 + 7) = *(_QWORD *)(v5 + 7);
    *(_BYTE *)(a3 + 15) = 0;
    return;
  }
  if (a2 <= 2147483644)
  {
    switch(a2)
    {
      case 1879048176:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1397900630;
        v10 = 19801;
        goto LABEL_115;
      case 1879048185:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 84;
        v12 = "RELACOUNT";
        goto LABEL_130;
      case 1879048186:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x544E554F434C4552;
        goto LABEL_102;
      case 1879048187:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1195461702;
        v7 = 828330823;
        goto LABEL_120;
      case 1879048188:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1146242390;
        v10 = 17989;
        goto LABEL_115;
      case 1879048189:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 77;
        v12 = "VERDEFNUM";
        goto LABEL_130;
      case 1879048190:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1314014550;
        v7 = 1145390414;
        goto LABEL_120;
      case 1879048191:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 19797;
        v14 = "VERNEEDNUM";
        goto LABEL_176;
      default:
        goto LABEL_70;
    }
  }
  if (a2 != 2147483645)
  {
    if (a2 == 2147483646)
    {
      *(_BYTE *)(a3 + 23) = 4;
      v9 = 1145394005;
LABEL_117:
      *(_DWORD *)a3 = v9;
      *(_BYTE *)(a3 + 4) = 0;
      return;
    }
    if (a2 == 0x7FFFFFFF)
    {
      *(_BYTE *)(a3 + 23) = 6;
      *(_DWORD *)a3 = 1414285638;
      v10 = 21061;
LABEL_115:
      *(_WORD *)(a3 + 4) = v10;
      *(_BYTE *)(a3 + 6) = 0;
      return;
    }
LABEL_70:
    v17 = 0;
    do
    {
      v33[v17-- + 16] = a0123456789abcd_6[a2 & 0xF] | 0x20;
      v18 = (unint64_t)a2 > 0xF;
      a2 = (unint64_t)a2 >> 4;
    }
    while (v18);
    sub_1C4E61270(&v32, &v33[v17 + 17], (char *)&v34, -v17);
    v19 = std::string::insert(&v32, 0, "<unknown:>0x");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    return;
  }
  *(_BYTE *)(a3 + 23) = 9;
  *(_WORD *)(a3 + 8) = 89;
  v12 = "AUXILIARY";
LABEL_130:
  *(_QWORD *)a3 = *(_QWORD *)v12;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb1EEEE21getDynamicTagAsStringEjy(a1, a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getDynamicTagAsString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getDynamicTagAsString(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16, a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationSymbol(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a1;
  if (*(_WORD *)(*a1 + 18) == 2048 && *(_BYTE *)(v4 + 4) == 2)
  {
    v5 = bswap64(*(_QWORD *)(a2 + 8));
    if (*(_BYTE *)(v4 + 5) == 1)
      v6 = v5 << 32;
    else
      v6 = v5;
  }
  else
  {
    v6 = bswap64(*(_QWORD *)(a2 + 8));
  }
  v7 = HIDWORD(v6);
  if ((_DWORD)v7)
  {
    sub_1C62CCAE0(a1, a3, v7, a4);
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = 0;
  }
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isMips64EL(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  return *(_WORD *)(*a1 + 18) == 2048 && *(_BYTE *)(v1 + 4) == 2 && *(_BYTE *)(v1 + 5) == 1;
}

char **llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::loadVersionMap@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v8;
  const void **v9;
  const void **v10;
  unsigned int v11;
  char v12;
  BOOL v13;
  const void *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  const void **v22;
  const void **v23;
  char *v24;
  char *v25;
  unsigned int v26;
  char v27;
  const void *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v35;
  uint64_t v36;
  const void **v37;
  void *__p[2];
  unint64_t v39;
  char v40;
  char v41;
  const void ***v42;
  uint64_t v43;
  const void **v44;
  const void **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = &v44;
  v43 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if (a3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getVersionDefinitions(a1, a3, (uint64_t)&v44);
    v8 = v44;
    if ((v46 & 1) != 0)
    {
      v44 = 0;
      *(_BYTE *)(a4 + 16) |= 1u;
      *(_QWORD *)a4 = v8;
      sub_1C59C5EB8((uint64_t)&v44);
      return sub_1C59C5DD4((char **)&v42);
    }
    v35 = a1;
    v9 = v45;
    if (v44 != v45)
    {
      v10 = v44 + 3;
      do
      {
        v11 = *((_DWORD *)v10 - 3) & 0x7FFF;
        v12 = *((_BYTE *)v10 + 23);
        v13 = v12 < 0;
        if (v12 >= 0)
          v14 = v10;
        else
          v14 = *v10;
        v15 = v12 & 0x7F;
        if (v13)
          v16 = (size_t)v10[1];
        else
          v16 = v15;
        if (v43 <= v11)
          sub_1C59C4C20((uint64_t)&v42, v11 + 1);
        if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_68:
          abort();
        if (v16 >= 0x17)
        {
          v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v18 = v16 | 7;
          v19 = v18 + 1;
          v17 = operator new(v18 + 1);
          __p[1] = (void *)v16;
          v39 = v19 | 0x8000000000000000;
          __p[0] = v17;
        }
        else
        {
          HIBYTE(v39) = v16;
          v17 = __p;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v17, v14, v16);
LABEL_27:
        *((_BYTE *)v17 + v16) = 0;
        v20 = (char *)&v42[5 * v11];
        v21 = v20 + 32;
        if (v20[32])
        {
          if (v20[23] < 0)
            operator delete(*(void **)v20);
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v21 = v20 + 24;
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v20[24] = 1;
        }
        *v21 = 1;
        v22 = v10 + 6;
        v10 += 9;
      }
      while (v22 != v9);
    }
    sub_1C59C5EB8((uint64_t)&v44);
    a1 = v35;
  }
  if (a2)
  {
    __p[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getVersionDependencies(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))sub_1C62CD258, (uint64_t)__p, (uint64_t)&v44);
    v23 = v44;
    if ((v46 & 1) == 0)
    {
      v36 = a4;
      v37 = v45;
      if (v44 == v45)
        goto LABEL_62;
      while (1)
      {
        v24 = (char *)v23[5];
        v25 = (char *)v23[6];
        while (v24 != v25)
        {
          v26 = *((_DWORD *)v24 + 2) & 0x7FFF;
          v27 = v24[39];
          if (v27 >= 0)
            v28 = v24 + 16;
          else
            v28 = (const void *)*((_QWORD *)v24 + 2);
          if (v27 >= 0)
            v29 = v27 & 0x7F;
          else
            v29 = *((_QWORD *)v24 + 3);
          if (v43 <= v26)
            sub_1C59C4C20((uint64_t)&v42, v26 + 1);
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_68;
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            v30 = operator new(v31 + 1);
            __p[1] = (void *)v29;
            v39 = v32 | 0x8000000000000000;
            __p[0] = v30;
LABEL_54:
            memmove(v30, v28, v29);
            goto LABEL_55;
          }
          HIBYTE(v39) = v29;
          v30 = __p;
          if (v29)
            goto LABEL_54;
LABEL_55:
          *((_BYTE *)v30 + v29) = 0;
          v33 = (char *)&v42[5 * v26];
          if (v33[32])
          {
            if (v33[23] < 0)
              operator delete(*(void **)v33);
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
          }
          else
          {
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
            v33[32] = 1;
          }
          v24 += 40;
        }
        v23 += 8;
        if (v23 == v37)
        {
LABEL_62:
          sub_1C59C5F14((uint64_t)&v44);
          a4 = v36;
          goto LABEL_63;
        }
      }
    }
    v44 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v23;
    sub_1C59C5F14((uint64_t)&v44);
  }
  else
  {
LABEL_63:
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0;
    if ((_DWORD)v43)
      sub_1C59C5F70(a4, (uint64_t)&v42);
  }
  return sub_1C59C5DD4((char **)&v42);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isLE(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) == 1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::program_headers(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;

  v3 = *a1;
  if (*(_WORD *)(*a1 + 56))
  {
    v4 = *(unsigned __int16 *)(v3 + 54);
    v5 = 14336;
    if (v4 != 14336)
    {
      v30 = "invalid e_phentsize: ";
      v31 = __rev16(v4);
      v32 = 2307;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = *(unsigned __int16 *)(v3 + 54);
  }
  v6 = __rev16(*(unsigned __int16 *)(*a1 + 56));
  v7 = __rev16(v5);
  v8 = v7 * (unint64_t)v6;
  v9 = bswap64(*(_QWORD *)(v3 + 32));
  v10 = a1[1];
  v11 = __CFADD__(v9, v8);
  v12 = v9 + v8;
  if (!v11 && v12 <= v10)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v3 + v9;
    *(_QWORD *)(a2 + 8) = v6;
    return;
  }
  v16 = v9;
  v17 = v10;
  v18[0] = "program headers are longer than binary of size ";
  v18[2] = &v17;
  v19 = 2563;
  v20[0] = v18;
  v20[2] = ": e_phoff = 0x";
  v21 = 770;
  v22[0] = v20;
  v22[2] = &v16;
  v23 = 3586;
  v24[0] = v22;
  v24[2] = ", e_phnum = ";
  v25 = 770;
  v26[0] = v24;
  v26[2] = v6;
  v27 = 2306;
  v28[0] = v26;
  v28[2] = ", e_phentsize = ";
  v29 = 770;
  v30 = (const char *)v28;
  v31 = v7;
  v32 = 2306;
LABEL_9:
  v13 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v15 = qword_1EF8F7238[0];
  *(_QWORD *)v13 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v30, (_QWORD *)(v13 + 8));
  *(_QWORD *)(v13 + 32) = 3;
  *(_QWORD *)(v13 + 40) = v15;
  *(_BYTE *)(v13 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v13;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb1EEEE15program_headersEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::symbols(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(a1, a2, a3);
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  unint64_t *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 0x1800000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v47 = v7;
    v48 = v6;
    if (v7 % 0x18)
    {
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 / 0x18;
          return;
        }
        sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = &v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 24;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void sub_1C59C2300(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  unint64_t *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 0x1000000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v47 = v7;
    v48 = v6;
    if ((v7 & 0xF) != 0)
    {
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 >> 4;
          return;
        }
        sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = &v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 16;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relrs(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  unint64_t *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 0x800000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v47 = v7;
    v48 = v6;
    if ((v7 & 7) != 0)
    {
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 >> 3;
          return;
        }
        sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = &v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (unint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 8;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::decode_relrs(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unsigned int ELFRelativeRelocationType;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t *v25;
  BOOL v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;

  ELFRelativeRelocationType = llvm::object::getELFRelativeRelocationType((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16));
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (a3)
  {
    v8 = 0;
    v9 = bswap64(ELFRelativeRelocationType);
    v35 = &a2[a3];
    v36 = 0;
    do
    {
      v10 = *a2;
      v11 = bswap64(*a2);
      if ((v11 & 1) != 0)
      {
        v14 = v36;
        if (v11 >= 2)
        {
          do
          {
            if ((v11 & 2) != 0)
            {
              v15 = bswap64(v14);
              v16 = (unint64_t)a4[2];
              if ((unint64_t)v8 >= v16)
              {
                v18 = *a4;
                v19 = ((char *)v8 - (char *)*a4) >> 4;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60)
                  goto LABEL_46;
                v21 = v16 - (_QWORD)v18;
                if (v21 >> 3 > v20)
                  v20 = v21 >> 3;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
                  v22 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                {
                  if (v22 >> 60)
                    goto LABEL_47;
                  v23 = (char *)operator new(16 * v22);
                }
                else
                {
                  v23 = 0;
                }
                v24 = (unint64_t *)&v23[16 * v19];
                *v24 = v15;
                v24[1] = v9;
                v25 = v24;
                if (v8 != v18)
                {
                  do
                  {
                    *((_OWORD *)v25 - 1) = *((_OWORD *)v8 - 1);
                    v25 -= 2;
                    v8 -= 2;
                  }
                  while (v8 != v18);
                  v8 = *a4;
                }
                v17 = v24 + 2;
                *a4 = v25;
                a4[1] = v24 + 2;
                a4[2] = (unint64_t *)&v23[16 * v22];
                if (v8)
                  operator delete(v8);
              }
              else
              {
                *v8 = v15;
                v8[1] = v9;
                v17 = v8 + 2;
              }
              a4[1] = v17;
              v8 = v17;
            }
            v14 += 8;
            v26 = v11 >= 4;
            v11 >>= 1;
          }
          while (v26);
        }
        v36 += 504;
      }
      else
      {
        v12 = (unint64_t)a4[2];
        if ((unint64_t)v8 >= v12)
        {
          v27 = *a4;
          v28 = ((char *)v8 - (char *)*a4) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
LABEL_46:
            abort();
          v30 = v12 - (_QWORD)v27;
          if (v30 >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 60)
LABEL_47:
              sub_1C4764EE4();
            v32 = (char *)operator new(16 * v31);
          }
          else
          {
            v32 = 0;
          }
          v33 = (unint64_t *)&v32[16 * v28];
          *v33 = v10;
          v33[1] = v9;
          v34 = v33;
          if (v8 != v27)
          {
            do
            {
              *((_OWORD *)v34 - 1) = *((_OWORD *)v8 - 1);
              v34 -= 2;
              v8 -= 2;
            }
            while (v8 != v27);
            v8 = *a4;
          }
          v13 = v33 + 2;
          *a4 = v34;
          a4[1] = v33 + 2;
          a4[2] = (unint64_t *)&v32[16 * v31];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = v10;
          v8[1] = v9;
          v13 = v8 + 2;
        }
        a4[1] = v13;
        v36 = v11 + 8;
        v8 = v13;
      }
      ++a2;
    }
    while (a2 != v35);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::android_relas(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t SLEB128;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  char *v37;
  __int128 v38;
  char *v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _QWORD v54[2];
  BOOL v55;
  char v56;
  _QWORD v57[4];
  __int16 v58;
  _BYTE *v59;
  unint64_t v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(a1, a2, (uint64_t)&v59);
  v5 = v59;
  if ((v61 & 1) != 0)
  {
    v59 = 0;
    goto LABEL_12;
  }
  if (v60 < 4 || *v59 != 65 || v59[1] != 80 || v59[2] != 83 || v59[3] != 50)
  {
    v57[0] = "invalid packed relocation header";
    v58 = 259;
    v13 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15 = qword_1EF8F7238[0];
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = 3;
    *(_QWORD *)(v13 + 40) = v15;
    *(_BYTE *)(v13 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_16;
  }
  v6 = *(_BYTE *)(*a1 + 5) == 1;
  v54[0] = v59;
  v54[1] = v60;
  v55 = v6;
  v56 = 8;
  v7 = &v53;
  v52 = 4;
  v53 = 0;
  SLEB128 = llvm::DataExtractor::getSLEB128(v54, &v52, &v53);
  v9 = llvm::DataExtractor::getSLEB128(v54, &v52, &v53);
  v5 = v53;
  if (v53)
  {
LABEL_12:
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v5;
    goto LABEL_16;
  }
  v10 = v9;
  v44 = a3;
  if (SLEB128)
  {
    if (SLEB128 > 0xAAAAAAAAAAAAAAALL)
LABEL_79:
      abort();
    v11 = (unint64_t *)operator new(24 * SLEB128);
    v12 = &v11[3 * SLEB128];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = 0;
  v18 = v11;
  while (1)
  {
    if (!SLEB128)
    {
      *(_BYTE *)(v44 + 24) &= ~1u;
      *(_QWORD *)v44 = v11;
      *(_QWORD *)(v44 + 8) = v18;
      *(_QWORD *)(v44 + 16) = v12;
      goto LABEL_77;
    }
    v19 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    v20 = v53;
    if (v53)
    {
LABEL_70:
      v53 = 0;
      *(_BYTE *)(v44 + 24) |= 1u;
      *(_QWORD *)v44 = v20;
      goto LABEL_75;
    }
    v21 = v19;
    v22 = SLEB128 >= v19;
    SLEB128 -= v19;
    if (!v22)
      break;
    v51 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    if ((v51 & 2) != 0)
      v50 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    else
      v50 = 0;
    if ((v51 & 1) != 0)
      v49 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    else
      v49 = 0;
    v48 = v51 & 0xC;
    if (v48 == 12)
      v17 += llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    v17 &= v51 << 60 >> 63;
    v20 = v53;
    v23 = v53 == 0;
    if (!v53 && v21)
    {
      v45 = SLEB128;
      v24 = 0;
      v47 = v21;
      do
      {
        v25 = v50;
        if ((v51 & 2) == 0)
          v25 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
        v26 = v49;
        if ((v51 & 1) == 0)
          v26 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
        if (v48 == 8)
          v17 += llvm::DataExtractor::getSLEB128(v54, &v52, v7);
        v10 += v25;
        v27 = bswap64(v10);
        v28 = bswap64(v26);
        v29 = bswap64(v17);
        if (v18 >= v12)
        {
          v46 = v17;
          v31 = v10;
          v32 = v7;
          v33 = 0xAAAAAAAAAAAAAAABLL * (v18 - v11) + 1;
          if (v33 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_79;
          if (0x5555555555555556 * (v12 - v11) > v33)
            v33 = 0x5555555555555556 * (v12 - v11);
          if (0xAAAAAAAAAAAAAAABLL * (v12 - v11) >= 0x555555555555555)
            v34 = 0xAAAAAAAAAAAAAAALL;
          else
            v34 = v33;
          if (v34)
          {
            if (v34 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v35 = (char *)operator new(24 * v34);
          }
          else
          {
            v35 = 0;
          }
          v36 = (unint64_t *)&v35[8 * (v18 - v11)];
          *v36 = v27;
          v36[1] = v28;
          v36[2] = v29;
          if (v18 == v11)
          {
            v39 = &v35[8 * (v18 - v11)];
            v30 = v47;
          }
          else
          {
            v37 = &v35[8 * (v18 - v11)];
            v30 = v47;
            do
            {
              v38 = *(_OWORD *)(v18 - 3);
              v39 = v37 - 24;
              *((_QWORD *)v37 - 1) = *(v18 - 1);
              *(_OWORD *)(v37 - 24) = v38;
              v18 -= 3;
              v37 -= 24;
            }
            while (v18 != v11);
          }
          v12 = (unint64_t *)&v35[24 * v34];
          v18 = v36 + 3;
          if (v11)
            operator delete(v11);
          v11 = (unint64_t *)v39;
          v7 = v32;
          v10 = v31;
          v17 = v46;
        }
        else
        {
          *v18 = v27;
          v18[1] = v28;
          v18[2] = v29;
          v18 += 3;
          v30 = v47;
        }
        ++v24;
        v20 = v53;
        v23 = v53 == 0;
        if (v53)
          v40 = 1;
        else
          v40 = v24 == v30;
      }
      while (!v40);
      SLEB128 = v45;
    }
    if (!v23)
      goto LABEL_70;
  }
  v57[0] = "relocation group unexpectedly large";
  v58 = 259;
  v41 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v43 = qword_1EF8F7238[0];
  *(_QWORD *)v41 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v41 + 8));
  *(_QWORD *)(v41 + 32) = 3;
  *(_QWORD *)(v41 + 40) = v43;
  *(_BYTE *)(v41 + 48) = 1;
  *(_BYTE *)(v44 + 24) |= 1u;
  *(_QWORD *)v44 = v41;
LABEL_75:
  if (v11)
    operator delete(v11);
LABEL_77:
  if (v53)
    (*(void (**)(_BYTE *))(*(_QWORD *)v53 + 8))(v53);
LABEL_16:
  if ((v61 & 1) != 0)
  {
    v16 = v59;
    v59 = 0;
    if (v16)
      (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 8))(v16);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::notes_begin(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = bswap64(*(_QWORD *)(a2 + 8));
  v7 = bswap64(*(_QWORD *)(a2 + 32));
  if (v7 + v6 <= a1[1])
  {
    sub_1C59C789C(a4, *a1 + v6, v7, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = v7;
    v12 = v6;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = bswap64(*(_QWORD *)(a2 + 24));
  v7 = bswap64(*(_QWORD *)(a2 + 32));
  if (v7 + v6 <= a1[1])
  {
    sub_1C59C789C(a4, *a1 + v6, v7, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = v7;
    v12 = v6;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::notes_end(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::notes(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbol(_QWORD *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::relas(a1, a2, (uint64_t)&v28);
    v8 = v30;
    if ((v30 & 1) != 0)
    {
      v10 = v28;
      v28 = 0;
      v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a4 + 8) = v11;
      *(_QWORD *)a4 = v10;
      if ((v8 & 1) == 0)
        return;
      goto LABEL_18;
    }
    v9 = a3;
    if (v29 > a3)
    {
      v10 = v28 + 24 * a3;
      v11 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_17;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v9 = a3;
    v30 = 0;
  }
  sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v20);
  v12 = std::string::insert(&v20, 0, "unable to get symbol from section ");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v21, ": invalid symbol index (");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v24[0] = __p;
  v24[2] = v9;
  v25 = 2052;
  v26[0] = v24;
  v26[2] = ")";
  v27 = 770;
  v16 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v18 = qword_1EF8F7238[0];
  *(_QWORD *)v16 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v26, (_QWORD *)(v16 + 8));
  *(_QWORD *)(v16 + 32) = 3;
  *(_QWORD *)(v16 + 40) = v18;
  *(_BYTE *)(v16 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v16;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((v30 & 1) != 0)
  {
LABEL_18:
    v19 = v28;
    v28 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  if (*a2)
  {
    v6 = bswap32(*a2);
    if (a4 <= v6)
    {
      sub_1C59BE6BC(a1, (uint64_t)a2, (char *)&v17);
      v9 = std::string::insert(&v17, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v18, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v20 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v16 = v6;
      v21[0] = __p;
      v21[2] = &v16;
      v22 = 3588;
      v23[0] = v21;
      v23[2] = ") offset which goes past the end of the section name string table";
      v24 = 770;
      v13 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v15 = qword_1EF8F7238[0];
      *(_QWORD *)v13 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 3;
      *(_QWORD *)(v13 + 40) = v15;
      *(_BYTE *)(v13 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSegmentContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;
  std::string v31;
  _QWORD v32[2];
  unint64_t *v33;
  __int16 v34;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  _QWORD v38[2];
  unint64_t *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;

  v5 = bswap64(*(_QWORD *)(a2 + 8));
  v6 = bswap64(*(_QWORD *)(a2 + 32));
  v44 = v6;
  v45 = v5;
  if (__CFADD__(v5, v6))
  {
    sub_1C59C428C((char *)&v31, a1, a2);
    v7 = std::string::insert(&v31, 0, "program header ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v26, " has a p_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v32[0] = __p;
    v33 = &v45;
    v34 = 3588;
    v35[0] = v32;
    v36 = ") + p_filesz (0x";
    v37 = 770;
    v38[0] = v35;
    v39 = &v44;
    v40 = 3586;
    v41[0] = v38;
    v42 = ") that cannot be represented";
    v43 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if (v6 + v5 <= a1[1])
  {
    v22 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    sub_1C59C428C((char *)&v24, a1, a2);
    v15 = std::string::insert(&v24, 0, "program header  ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v25, " has a p_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45;
    v27 = 3588;
    __p[0] = &v26;
    v29 = ") + p_filesz (0x";
    v30 = 770;
    v32[0] = __p;
    v33 = &v44;
    v34 = 3586;
    v35[0] = v32;
    v36 = ") that is greater than the file size (0x";
    v37 = 770;
    v23 = a1[1];
    v38[0] = v35;
    v39 = (unint64_t *)&v23;
    v40 = 3586;
    v41[0] = v38;
    v42 = ")";
    v43 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v24.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void sub_1C59C428C(char *a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8[4];
  __int16 v9;
  char *v10[4];
  __int16 v11;
  char *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::program_headers(a2, (uint64_t)&v12);
  if ((v13 & 1) != 0)
  {
    v5 = v12;
    v12 = 0;
    v8[0] = v5;
    sub_1C4D62BD4(v8, v10);
    if (v8[0])
      (*(void (**)(char *))(*(_QWORD *)v8[0] + 8))(v8[0]);
    a1[23] = 15;
    strcpy(a1, "[unknown index]");
  }
  else
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * ((a3 - (uint64_t)v12) >> 3);
    v8[0] = "[index ";
    v8[2] = (char *)&v7;
    v9 = 2819;
    v10[0] = (char *)v8;
    v10[2] = "]";
    v11 = 770;
    llvm::Twine::str((llvm::Twine *)v10, a1);
  }
  if ((v13 & 1) != 0)
  {
    v6 = v12;
    v12 = 0;
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::decodeBBAddrMap(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  unint64_t Unsigned;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v23;
  int v24;
  unint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56[2];
  BOOL v57;
  unsigned __int8 v58;
  _QWORD v59[2];
  uint64_t *v60;
  __int16 v61;
  _QWORD v62[2];
  const char *v63;
  __int16 v64;
  _QWORD v65[2];
  unint64_t *p_ULEB128;
  __int16 v67;
  void **v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  __int16 v72;
  unint64_t ULEB128;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents(a1, a2, (uint64_t)&v75);
  if ((v77 & 1) != 0)
  {
    v42 = v75;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v42;
  }
  else
  {
    v44 = a3;
    v5 = *(_BYTE *)(*a1 + 5) == 1;
    v56[0] = v75;
    v56[1] = v76;
    v57 = v5;
    v58 = 8;
    v54 = 0uLL;
    v55 = 0;
    v53 = 0uLL;
    v45 = v76;
    if (v76)
    {
      while (1)
      {
        Unsigned = llvm::DataExtractor::getUnsigned(v56, (unint64_t *)&v53, v58, (uint64_t *)&v53 + 1);
        v74 = v53;
        ULEB128 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        v48 = ULEB128;
        v46 = (void **)Unsigned;
        if (!HIDWORD(ULEB128))
          break;
        v59[0] = "ULEB128 value at offset 0x";
        v60 = &v74;
        v61 = 3587;
        v62[0] = v59;
        v63 = " exceeds UINT32_MAX (0x";
        v64 = 770;
        v65[0] = v62;
        p_ULEB128 = &ULEB128;
        v67 = 3586;
        v68 = (void **)v65;
        v70 = ")";
        v72 = 770;
        v7 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v9 = qword_1EF8F7238[0];
        *(_QWORD *)v7 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
        v10 = 0;
        v11 = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v9;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_49:
        v68 = v46;
        v70 = 0;
        v71 = 0;
        v69 = 0;
        sub_1C59C6EE4(&v69, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 2));
        sub_1C59AB80C((void **)&v54, (uint64_t)&v68);
        if (v69)
          operator delete(v69);
        if (v10)
          operator delete(v10);
        v41 = (char *)*((_QWORD *)&v53 + 1);
        if (v7 || v53 >= (unint64_t)v45)
          goto LABEL_58;
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v10 = 0;
      while (1)
      {
        if (*((_QWORD *)&v53 + 1))
          v15 = 1;
        else
          v15 = v12 >= v48;
        if (v15)
        {
          v7 = 0;
          v11 = (uint64_t)v14;
          goto LABEL_49;
        }
        v74 = v53;
        v16 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        ULEB128 = v16;
        v49 = v12;
        if (HIDWORD(v16))
        {
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (void **)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v20 = v16;
          v74 = v53;
          v21 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
          ULEB128 = v21;
          if (!HIDWORD(v21))
          {
            v24 = v21;
            v74 = v53;
            v23 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
            ULEB128 = v23;
            if (HIDWORD(v23))
            {
              v59[0] = "ULEB128 value at offset 0x";
              v60 = &v74;
              v61 = 3587;
              v62[0] = v59;
              v63 = " exceeds UINT32_MAX (0x";
              v64 = 770;
              v65[0] = v62;
              p_ULEB128 = &ULEB128;
              v67 = 3586;
              v68 = (void **)v65;
              v70 = ")";
              v72 = 770;
              v7 = operator new();
              if (!atomic_load(qword_1EF8F7238))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
              v26 = qword_1EF8F7238[0];
              *(_QWORD *)v7 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
              LODWORD(v23) = 0;
              *(_QWORD *)(v7 + 32) = 3;
              *(_QWORD *)(v7 + 40) = v26;
              *(_BYTE *)(v7 + 48) = 1;
            }
            else
            {
              v7 = 0;
            }
            v19 = v24;
            goto LABEL_27;
          }
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (void **)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
        }
        LODWORD(v23) = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v18;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_27:
        v27 = (v23 >> 1) & 1;
        v28 = v23 & 1;
        v29 = (v23 >> 2) & 1;
        v30 = (v23 >> 3) & 1;
        if (v14 >= v13)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 2) + 1;
          if (v32 > 0x1555555555555555)
            abort();
          if (0x5555555555555556 * ((v13 - v10) >> 2) > v32)
            v32 = 0x5555555555555556 * ((v13 - v10) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v33 = 0x1555555555555555;
          else
            v33 = v32;
          if (v33)
          {
            if (v33 > 0x1555555555555555)
              sub_1C4764EE4();
            v34 = (v23 >> 3) & 1;
            v35 = v19;
            v47 = v33;
            v36 = (char *)operator new(12 * v33);
            v33 = v47;
            v19 = v35;
            LOBYTE(v30) = v34;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * ((v14 - v10) >> 2)];
          *(_DWORD *)v37 = v20;
          *((_DWORD *)v37 + 1) = v19;
          v37[8] = v28;
          v37[9] = v27;
          v37[10] = v29;
          v37[11] = v30;
          if (v14 == v10)
          {
            v10 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
          }
          else
          {
            v38 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
            do
            {
              v39 = *(_QWORD *)(v14 - 12);
              v14 -= 12;
              v40 = *((_DWORD *)v14 + 2);
              *(_QWORD *)(v38 - 12) = v39;
              v38 -= 12;
              *((_DWORD *)v38 + 2) = v40;
            }
            while (v14 != v10);
            v14 = v10;
            v10 = v38;
          }
          v13 = &v36[12 * v33];
          v11 = (uint64_t)(v37 + 12);
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v14 = v20;
          *((_DWORD *)v14 + 1) = v19;
          v14[8] = v28;
          v14[9] = (v23 & 2) != 0;
          v14[10] = (v23 & 4) != 0;
          v11 = (uint64_t)(v14 + 12);
          v14[11] = (v23 & 8) != 0;
          v31 = v49;
        }
        v12 = v31 + 1;
        v14 = (char *)v11;
        if (v7)
          goto LABEL_49;
      }
    }
    v7 = 0;
    v41 = 0;
LABEL_58:
    if (v7 | (unint64_t)v41)
    {
      v50 = (char *)v7;
      v51 = v41;
      *((_QWORD *)&v53 + 1) = 0;
      sub_1C624E8DC(&v51, &v50, &v52);
      *(_BYTE *)(v44 + 24) |= 1u;
      *(_QWORD *)v44 = v52;
      v52 = 0;
      if (v50)
        (*(void (**)(char *))(*(_QWORD *)v50 + 8))(v50);
      if (v51)
        (*(void (**)(char *))(*(_QWORD *)v51 + 8))(v51);
    }
    else
    {
      *(_BYTE *)(v44 + 24) &= ~1u;
      *(_OWORD *)v44 = v54;
      *(_QWORD *)(v44 + 16) = v55;
      v54 = 0uLL;
      v55 = 0;
    }
    if (*((_QWORD *)&v53 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 8))(*((_QWORD *)&v53 + 1));
    v68 = (void **)&v54;
    sub_1C52E1318(&v68);
    if ((v77 & 1) != 0)
    {
      v43 = v75;
      v75 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
  }
}

void sub_1C59C4C20(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C59C4D00(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 40 * v2), 40 * ((-40 * v2 + 40 * a2 - 40) / 0x28) + 40);
    }
    else
    {
      v5 = 5 * v2;
      v6 = (char *)(*(_QWORD *)a1 + 8 * v5 - 17);
      v7 = 40 * a2 - 8 * v5;
      do
      {
        if (v6[9])
        {
          if (*v6 < 0)
            operator delete(*(void **)(v6 - 23));
          v6[9] = 0;
        }
        v6 -= 40;
        v7 += 40;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C59C4D00(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C59C4D6C((__int128 **)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C59C4D6C(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  _BYTE *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = (_BYTE *)(a2 + 32);
    v5 = 40 * v2;
    do
    {
      *(v4 - 32) = 0;
      *v4 = 0;
      if (*((_BYTE *)v3 + 32))
      {
        v6 = *v3;
        *((_QWORD *)v4 - 2) = *((_QWORD *)v3 + 2);
        *((_OWORD *)v4 - 2) = v6;
        *((_QWORD *)v3 + 1) = 0;
        *((_QWORD *)v3 + 2) = 0;
        *(_QWORD *)v3 = 0;
        *(v4 - 8) = *((_BYTE *)v3 + 24);
        *v4 = 1;
      }
      v3 = (__int128 *)((char *)v3 + 40);
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 40 * v7;
      do
      {
        v10 = (uint64_t)v8 + v9;
        if (*((_BYTE *)v8 + v9 - 8))
        {
          if (*(char *)(v10 - 17) < 0)
            operator delete(*(void **)(v10 - 40));
          *(_BYTE *)(v10 - 8) = 0;
        }
        v9 -= 40;
      }
      while (v9);
    }
  }
}

void sub_1C59C4E2C(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 3;
    do
    {
      v7 = v5;
      sub_1C4FF890C(&v7);
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v6 = v5 - 6;
      v5 -= 9;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

__n128 sub_1C59C4E9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void **v16;
  __int128 v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = (__int128 *)(a2 + v4 - a4);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *v6;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v7 = v8;
      v9 = *(__int128 *)((char *)v6 + 24);
      *(_QWORD *)(v7 + 40) = *((_QWORD *)v6 + 5);
      *(_OWORD *)(v7 + 24) = v9;
      *((_QWORD *)v6 + 4) = 0;
      *((_QWORD *)v6 + 5) = 0;
      *((_QWORD *)v6 + 3) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      result = (__n128)v6[3];
      *(__n128 *)(v7 + 48) = result;
      *(_QWORD *)(v7 + 64) = *((_QWORD *)v6 + 8);
      v7 += 72;
      *((_QWORD *)v6 + 6) = 0;
      *((_QWORD *)v6 + 7) = 0;
      *((_QWORD *)v6 + 8) = 0;
      v6 = (__int128 *)((char *)v6 + 72);
    }
    while ((unint64_t)v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v11 = 0;
    v12 = -8 * ((v4 - a4) >> 3);
    do
    {
      v13 = v5 + v11;
      v14 = v4 + v11;
      v15 = *(_OWORD *)(v5 + v11 - 72);
      *(_QWORD *)(v14 - 56) = *(_QWORD *)(v5 + v11 - 56);
      *(_OWORD *)(v14 - 72) = v15;
      v16 = (void **)(v4 + v11 - 48);
      if (*(char *)(v4 + v11 - 25) < 0)
        operator delete(*v16);
      v17 = *(_OWORD *)(v13 - 48);
      *(_QWORD *)(v4 + v11 - 32) = *(_QWORD *)(v13 - 32);
      *(_OWORD *)v16 = v17;
      *(_BYTE *)(v13 - 25) = 0;
      *(_BYTE *)(v13 - 48) = 0;
      sub_1C59C5384((void **)(v14 - 24));
      result = *(__n128 *)(v13 - 24);
      *(__n128 *)(v14 - 24) = result;
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v13 - 8);
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      v11 -= 72;
    }
    while (v12 != v11);
  }
  return result;
}

double sub_1C59C4FE8(__int128 **a1)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  __int128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  __int128 *v29;
  double result;
  void **v31;

  v2 = a1[2];
  if (v2 != a1[3])
    goto LABEL_29;
  v3 = *a1;
  v4 = a1[1];
  if (v4 > *a1)
  {
    v5 = 0x8E38E38E38E38E39 * (((char *)v4 - (char *)*a1) >> 3);
    if (v5 >= -1)
      v6 = v5 + 1;
    else
      v6 = v5 + 2;
    v7 = -(v6 >> 1);
    if (v4 == v2)
    {
      v13 = (__int128 *)((char *)v4 - 72 * (v6 >> 1));
    }
    else
    {
      v8 = -72 * (v6 >> 1);
      do
      {
        v9 = (uint64_t)v4 + v8;
        v10 = *v4;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)v4 + 2);
        *(_OWORD *)v9 = v10;
        v11 = (void **)((char *)v4 + v8 + 24);
        if (*((char *)v4 + v8 + 47) < 0)
          operator delete(*v11);
        v12 = *(__int128 *)((char *)v4 + 24);
        *(_QWORD *)((char *)v4 + v8 + 40) = *((_QWORD *)v4 + 5);
        *(_OWORD *)v11 = v12;
        *((_BYTE *)v4 + 47) = 0;
        *((_BYTE *)v4 + 24) = 0;
        sub_1C59C5384((void **)(v9 + 48));
        *(_OWORD *)(v9 + 48) = v4[3];
        *(_QWORD *)(v9 + 64) = *((_QWORD *)v4 + 8);
        *((_QWORD *)v4 + 6) = 0;
        *((_QWORD *)v4 + 7) = 0;
        *((_QWORD *)v4 + 8) = 0;
        v4 = (__int128 *)((char *)v4 + 72);
      }
      while (v4 != v2);
      v2 = a1[1];
      v13 = (__int128 *)((char *)v4 + 72 * v7);
    }
    a1[1] = (__int128 *)((char *)v2 + 72 * v7);
    a1[2] = v13;
    goto LABEL_29;
  }
  v14 = 0x1C71C71C71C71C72 * (((char *)v2 - (char *)v3) >> 3);
  if (v2 == v3)
    v14 = 1;
  if (v14 >= 0x38E38E38E38E38FLL)
    sub_1C4764EE4();
  v15 = v14 >> 2;
  v16 = 9 * v14;
  v17 = (char *)operator new(72 * v14);
  v18 = &v17[72 * v15];
  v19 = &v17[8 * v16];
  if (v2 == v4)
  {
    *a1 = (__int128 *)v17;
    a1[1] = (__int128 *)v18;
    a1[2] = (__int128 *)v18;
    a1[3] = (__int128 *)v19;
    if (!v3)
      goto LABEL_29;
LABEL_28:
    operator delete(v3);
    goto LABEL_29;
  }
  v20 = &v18[(char *)v2 - (char *)v4];
  v21 = 72 * v15;
  do
  {
    v22 = &v17[v21];
    v23 = *v4;
    *((_QWORD *)v22 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v22 = v23;
    v24 = *(__int128 *)((char *)v4 + 24);
    *((_QWORD *)v22 + 5) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(v22 + 24) = v24;
    *((_QWORD *)v4 + 4) = 0;
    *((_QWORD *)v4 + 5) = 0;
    *((_QWORD *)v4 + 3) = 0;
    *((_OWORD *)v22 + 3) = v4[3];
    *((_QWORD *)v22 + 8) = *((_QWORD *)v4 + 8);
    *((_QWORD *)v4 + 6) = 0;
    *((_QWORD *)v4 + 7) = 0;
    *((_QWORD *)v4 + 8) = 0;
    v21 += 72;
    v4 = (__int128 *)((char *)v4 + 72);
  }
  while (v22 + 72 != v20);
  v3 = *a1;
  v25 = (void **)a1[1];
  v26 = (void **)a1[2];
  *a1 = (__int128 *)v17;
  a1[1] = (__int128 *)v18;
  a1[2] = (__int128 *)v20;
  a1[3] = (__int128 *)v19;
  if (v26 != v25)
  {
    v27 = v26 - 3;
    do
    {
      v31 = v27;
      sub_1C4FF890C(&v31);
      if (*((char *)v27 - 1) < 0)
        operator delete(*(v27 - 3));
      v28 = v27 - 6;
      v27 -= 9;
    }
    while (v28 != v25);
  }
  if (v3)
    goto LABEL_28;
LABEL_29:
  v29 = a1[2];
  *((_QWORD *)v29 + 8) = 0;
  result = 0.0;
  v29[2] = 0u;
  v29[3] = 0u;
  *v29 = 0u;
  v29[1] = 0u;
  a1[2] = (__int128 *)((char *)a1[2] + 72);
  return result;
}

__int128 *sub_1C59C5258(__int128 **a1, _QWORD *a2, __int128 *a3)
{
  __int128 *result;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;

  result = (__int128 *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v8 = a2[1];
    do
    {
      v6 = (__int128 *)(v8 - 72);
      v9 = *(__int128 *)((char *)v7 - 72);
      *(_QWORD *)(v8 - 56) = *((_QWORD *)v7 - 7);
      *(_OWORD *)(v8 - 72) = v9;
      v10 = *(v7 - 3);
      *(_QWORD *)(v8 - 32) = *((_QWORD *)v7 - 4);
      *(_OWORD *)(v8 - 48) = v10;
      *((_QWORD *)v7 - 5) = 0;
      *((_QWORD *)v7 - 4) = 0;
      *((_QWORD *)v7 - 6) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      *(_OWORD *)(v8 - 24) = *(__int128 *)((char *)v7 - 24);
      *(_QWORD *)(v8 - 8) = *((_QWORD *)v7 - 1);
      *((_QWORD *)v7 - 3) = 0;
      *((_QWORD *)v7 - 2) = 0;
      *((_QWORD *)v7 - 1) = 0;
      v7 = (__int128 *)((char *)v7 - 72);
      v8 -= 72;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v11 = a1[1];
  v12 = a2[2];
  if (v11 != a3)
  {
    do
    {
      v13 = *a3;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v12 = v13;
      v14 = *(__int128 *)((char *)a3 + 24);
      *(_QWORD *)(v12 + 40) = *((_QWORD *)a3 + 5);
      *(_OWORD *)(v12 + 24) = v14;
      *((_QWORD *)a3 + 4) = 0;
      *((_QWORD *)a3 + 5) = 0;
      *((_QWORD *)a3 + 3) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 64) = 0;
      *(_OWORD *)(v12 + 48) = a3[3];
      *(_QWORD *)(v12 + 64) = *((_QWORD *)a3 + 8);
      v12 += 72;
      *((_QWORD *)a3 + 6) = 0;
      *((_QWORD *)a3 + 7) = 0;
      *((_QWORD *)a3 + 8) = 0;
      a3 = (__int128 *)((char *)a3 + 72);
    }
    while (a3 != v11);
    v6 = (__int128 *)a2[1];
  }
  a2[2] = v12;
  v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  v16 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v16;
  v17 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

void sub_1C59C5384(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 4;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1C59C53F0(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  int64x2_t v16;
  unint64_t v17;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  unint64_t *v22;

  v3 = *a1;
  v2 = a1[1];
  v4 = (uint64_t)(v2 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
  {
    if (v9 >> 59)
      sub_1C4764EE4();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1C47EBC30(v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v3 = *a1;
    v2 = a1[1];
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  }
  if (v2 == v3)
  {
    v16 = vdupq_n_s64(v3);
    v13 = (unint64_t)v11;
  }
  else
  {
    v13 = (unint64_t)v11;
    do
    {
      v14 = *(_DWORD *)(v2 - 32);
      v2 -= 32;
      *(_DWORD *)(v13 - 32) = v14;
      v13 -= 32;
      v15 = *(_OWORD *)(v2 + 8);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v2 + 24);
      *(_OWORD *)(v13 + 8) = v15;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    while (v2 != v3);
    v16 = *(int64x2_t *)a1;
  }
  *a1 = v13;
  a1[1] = (unint64_t)(v11 + 32);
  v20 = v16;
  v17 = a1[2];
  a1[2] = (unint64_t)&v10[32 * v9];
  v21 = v17;
  v19 = v16.i64[0];
  sub_1C59C5548((uint64_t)&v19);
  return v11 + 32;
}

uint64_t sub_1C59C5548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C59C55A8(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 3;
    do
    {
      v7 = v5;
      sub_1C59C5618(&v7);
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v6 = v5 - 5;
      v5 -= 8;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_1C59C5618(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_1C59C5690(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  __int128 v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = (uint64_t *)(a2 + v4 - a4);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *v6;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)v6 + 2);
      *(_QWORD *)v7 = v8;
      v9 = *((_OWORD *)v6 + 1);
      *(_QWORD *)(v7 + 32) = v6[4];
      *(_OWORD *)(v7 + 16) = v9;
      v6[3] = 0;
      v6[4] = 0;
      v6[2] = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      result = *(__n128 *)(v6 + 5);
      *(__n128 *)(v7 + 40) = result;
      *(_QWORD *)(v7 + 56) = v6[7];
      v7 += 64;
      v6[5] = 0;
      v6[6] = 0;
      v6[7] = 0;
      v6 += 8;
    }
    while ((unint64_t)v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v11 = 0;
    v12 = -64 * ((v4 - a4) >> 6);
    do
    {
      v13 = v5 + v11;
      v14 = v4 + v11;
      v15 = *(_QWORD *)(v5 + v11 - 64);
      *(_DWORD *)(v14 - 56) = *(_DWORD *)(v5 + v11 - 56);
      *(_QWORD *)(v14 - 64) = v15;
      v16 = (void **)(v4 + v11 - 48);
      if (*(char *)(v4 + v11 - 25) < 0)
        operator delete(*v16);
      v17 = *(_OWORD *)(v13 - 48);
      *(_QWORD *)(v4 + v11 - 32) = *(_QWORD *)(v13 - 32);
      *(_OWORD *)v16 = v17;
      *(_BYTE *)(v13 - 25) = 0;
      *(_BYTE *)(v13 - 48) = 0;
      sub_1C59C5AF4((void **)(v14 - 24));
      result = *(__n128 *)(v13 - 24);
      *(__n128 *)(v14 - 24) = result;
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v13 - 8);
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      v11 -= 64;
    }
    while (v12 != v11);
  }
  return result;
}

double sub_1C59C57C4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void **v11;
  __int128 v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  uint64_t *v27;
  double result;
  void **v29;

  v2 = a1[2];
  if (v2 != a1[3])
    goto LABEL_30;
  v3 = *a1;
  v4 = a1[1];
  if (v4 > *a1)
  {
    v5 = ((char *)v4 - (char *)*a1) >> 6;
    if (v5 >= -1)
      v6 = v5 + 1;
    else
      v6 = v5 + 2;
    v7 = -(v6 >> 1);
    if (v4 == v2)
    {
      v13 = &v4[-8 * (v6 >> 1)];
    }
    else
    {
      v8 = -8 * (v6 >> 1);
      do
      {
        v9 = &v4[v8];
        v10 = *v4;
        *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
        *v9 = v10;
        v11 = (void **)&v4[v8 + 2];
        if (SHIBYTE(v4[v8 + 4]) < 0)
          operator delete(*v11);
        v12 = *((_OWORD *)v4 + 1);
        v4[v8 + 4] = v4[4];
        *(_OWORD *)v11 = v12;
        *((_BYTE *)v4 + 39) = 0;
        *((_BYTE *)v4 + 16) = 0;
        sub_1C59C5AF4((void **)v9 + 5);
        *(_OWORD *)(v9 + 5) = *(_OWORD *)(v4 + 5);
        v9[7] = v4[7];
        v4[5] = 0;
        v4[6] = 0;
        v4[7] = 0;
        v4 += 8;
      }
      while (v4 != v2);
      v2 = a1[1];
      v13 = &v4[8 * v7];
    }
    a1[1] = &v2[8 * v7];
    a1[2] = v13;
    goto LABEL_30;
  }
  if (v2 == v3)
    v14 = 1;
  else
    v14 = ((char *)v2 - (char *)v3) >> 5;
  if (v14 >> 58)
    sub_1C4764EE4();
  v15 = (char *)operator new(v14 << 6);
  v16 = &v15[64 * (v14 >> 2)];
  v17 = &v15[64 * v14];
  if (v2 == v4)
  {
    *a1 = (uint64_t *)v15;
    a1[1] = (uint64_t *)v16;
    a1[2] = (uint64_t *)v16;
    a1[3] = (uint64_t *)v17;
    if (!v3)
      goto LABEL_30;
LABEL_29:
    operator delete(v3);
    goto LABEL_30;
  }
  v18 = &v16[(char *)v2 - (char *)v4];
  v19 = v14 >> 2 << 6;
  do
  {
    v20 = &v15[v19];
    v21 = *v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)v4 + 2);
    *(_QWORD *)v20 = v21;
    v22 = *((_OWORD *)v4 + 1);
    *((_QWORD *)v20 + 4) = v4[4];
    *((_OWORD *)v20 + 1) = v22;
    v4[3] = 0;
    v4[4] = 0;
    v4[2] = 0;
    *(_OWORD *)(v20 + 40) = *(_OWORD *)(v4 + 5);
    *((_QWORD *)v20 + 7) = v4[7];
    v4[5] = 0;
    v4[6] = 0;
    v4[7] = 0;
    v19 += 64;
    v4 += 8;
  }
  while (v20 + 64 != v18);
  v3 = *a1;
  v23 = (void **)a1[1];
  v24 = (void **)a1[2];
  *a1 = (uint64_t *)v15;
  a1[1] = (uint64_t *)v16;
  a1[2] = (uint64_t *)v18;
  a1[3] = (uint64_t *)v17;
  if (v24 != v23)
  {
    v25 = v24 - 3;
    do
    {
      v29 = v25;
      sub_1C59C5618(&v29);
      if (*((char *)v25 - 1) < 0)
        operator delete(*(v25 - 3));
      v26 = v25 - 5;
      v25 -= 8;
    }
    while (v26 != v23);
  }
  if (v3)
    goto LABEL_29;
LABEL_30:
  v27 = a1[2];
  result = 0.0;
  *((_OWORD *)v27 + 2) = 0u;
  *((_OWORD *)v27 + 3) = 0u;
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  a1[2] += 8;
  return result;
}

uint64_t sub_1C59C59D8(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(v7 - 8);
      v7 -= 8;
      v9 = *((_DWORD *)v7 + 2);
      *(_QWORD *)(v6 - 64) = v8;
      v6 -= 64;
      *(_DWORD *)(v6 + 8) = v9;
      v10 = *((_OWORD *)v7 + 1);
      *(_QWORD *)(v6 + 32) = v7[4];
      *(_OWORD *)(v6 + 16) = v10;
      v7[3] = 0;
      v7[4] = 0;
      v7[2] = 0;
      *(_QWORD *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v7 + 5);
      *(_QWORD *)(v6 + 56) = v7[7];
      v7[5] = 0;
      v7[6] = 0;
      v7[7] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v11 = a1[1];
  v12 = a2[2];
  if (v11 != a3)
  {
    do
    {
      v13 = *a3;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v12 = v13;
      v14 = *((_OWORD *)a3 + 1);
      *(_QWORD *)(v12 + 32) = a3[4];
      *(_OWORD *)(v12 + 16) = v14;
      a3[3] = 0;
      a3[4] = 0;
      a3[2] = 0;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 5);
      *(_QWORD *)(v12 + 56) = a3[7];
      v12 += 64;
      a3[5] = 0;
      a3[6] = 0;
      a3[7] = 0;
      a3 += 8;
    }
    while (a3 != v11);
    v6 = a2[1];
  }
  a2[2] = v12;
  v15 = *a1;
  *a1 = (uint64_t *)v6;
  a2[1] = v15;
  v16 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v16;
  v17 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

void sub_1C59C5AF4(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 5;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double sub_1C59C5B60(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  int64x2_t v17;
  double result;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;

  v2 = a1[2];
  if (v2 == a1[3])
  {
    v4 = *a1;
    v3 = a1[1];
    if (v3 <= *a1)
    {
      v9 = 0x999999999999999ALL * ((uint64_t)(v2 - v4) >> 3);
      if (v2 == v4)
        v9 = 1;
      v22 = a1[4];
      if (v9 >= 0x666666666666667)
        sub_1C4764EE4();
      v10 = v9 >> 2;
      v11 = 5 * v9;
      v12 = (char *)operator new(40 * v9);
      v13 = &v12[40 * v10];
      if (v2 == v3)
      {
        v17 = vdupq_n_s64(v2);
        v14 = &v12[40 * v10];
      }
      else
      {
        v14 = &v13[v2 - v3];
        v15 = &v12[40 * v10];
        do
        {
          *(_OWORD *)v15 = *(_OWORD *)v3;
          v16 = *(_OWORD *)(v3 + 16);
          *((_QWORD *)v15 + 4) = *(_QWORD *)(v3 + 32);
          *((_OWORD *)v15 + 1) = v16;
          *(_QWORD *)(v3 + 24) = 0;
          *(_QWORD *)(v3 + 32) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          v15 += 40;
          v3 += 40;
        }
        while (v15 != v14);
        v4 = *a1;
        v17 = *(int64x2_t *)(a1 + 1);
        v2 = a1[3];
      }
      v19 = v4;
      *a1 = v12;
      a1[1] = v13;
      v20 = v17;
      a1[2] = v14;
      a1[3] = &v12[8 * v11];
      v21 = v2;
      sub_1C59C5D74((uint64_t)&v19);
      v2 = a1[2];
    }
    else
    {
      v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - *a1) >> 3);
      if (v5 >= -1)
        v6 = v5 + 1;
      else
        v6 = v5 + 2;
      v7 = -5 * (v6 >> 1);
      sub_1C4FACF88(a1[1], v2, v3 - 40 * (v6 >> 1));
      v2 = v8;
      a1[1] += 8 * v7;
      a1[2] = v8;
    }
  }
  *(_QWORD *)(v2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  a1[2] += 40;
  return result;
}

uint64_t sub_1C59C5CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (a2 != a1)
  {
    v6 = 0;
    do
    {
      v7 = a2 + v6;
      *(_OWORD *)(a3 + v6 - 40) = *(_OWORD *)(a2 + v6 - 40);
      v8 = a3 + v6 - 24;
      if (*(char *)(a3 + v6 - 1) < 0)
        operator delete(*(void **)v8);
      v6 -= 40;
      v9 = *(_OWORD *)(v7 - 24);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 - 8);
      *(_OWORD *)v8 = v9;
      *(_BYTE *)(v7 - 1) = 0;
      *(_BYTE *)(v7 - 24) = 0;
    }
    while (a2 + v6 != a1);
  }
  return a2;
}

uint64_t sub_1C59C5D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char **sub_1C59C5DD4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 8])
      {
        if (*((char *)v5 - 17) < 0)
          operator delete(*(v5 - 5));
        *((_BYTE *)v5 - 8) = 0;
      }
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_1C59C5E50(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C59C4D00(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C59C4D00(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C59C5EB8(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    if (v2)
      (*((void (**)(void **))*v2 + 1))(v2);
  }
  else if (v2)
  {
    sub_1C59C4E2C(a1, v2);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1C59C5F14(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    if (v2)
      (*((void (**)(void **))*v2 + 1))(v2);
  }
  else if (v2)
  {
    sub_1C59C55A8(a1, v2);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1C59C5F70(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *i;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C59C61E4((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v10 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v11 = 40 * v5;
        do
        {
          sub_1C59C6280((uint64_t)v10, (__int128 *)v4);
          v4 += 40;
          v10 += 40;
          v11 -= 40;
        }
        while (v11);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v12 = *(char **)a1;
      }
      else
      {
        v12 = *(char **)a1;
      }
      for (i = &v12[40 * v6]; i != v10; i -= 40)
      {
        if (*(i - 8))
        {
          if (*(i - 17) < 0)
            operator delete(*((void **)i - 5));
          *(i - 8) = 0;
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v25 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v25)
      {
        v26 = *(char **)a2;
        v27 = 40 * v25;
        do
        {
          v28 = &v26[v27];
          if (v26[v27 - 8])
          {
            if (*(v28 - 17) < 0)
              operator delete(*((void **)v28 - 5));
            *(v28 - 8) = 0;
          }
          v27 -= 40;
        }
        while (v27);
      }
      goto LABEL_52;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v13 = *(char **)a1;
        v14 = 40 * v6;
        do
        {
          sub_1C59C6280((uint64_t)v13, (__int128 *)v4);
          v4 += 40;
          v13 += 40;
          v14 -= 40;
        }
        while (v14);
        goto LABEL_23;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = 40 * v6;
        do
        {
          v9 = &v7[v8];
          if (v7[v8 - 8])
          {
            if (*(v9 - 17) < 0)
              operator delete(*((void **)v9 - 5));
            *(v9 - 8) = 0;
          }
          v8 -= 40;
        }
        while (v8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C59C4D00(a1, v5);
    }
    v6 = 0;
LABEL_23:
    v15 = *(char **)a2;
    v16 = *(unsigned int *)(a2 + 8);
    if (v6 != v16)
    {
      v17 = &v15[40 * v6];
      v18 = (_BYTE *)(*(_QWORD *)a1 + 40 * v6 + 32);
      v19 = 40 * v16 - 40 * v6;
      do
      {
        *(v18 - 32) = 0;
        *v18 = 0;
        if (v17[32])
        {
          v20 = *(_OWORD *)v17;
          *((_QWORD *)v18 - 2) = *((_QWORD *)v17 + 2);
          *((_OWORD *)v18 - 2) = v20;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = 0;
          *(_QWORD *)v17 = 0;
          *(v18 - 8) = v17[24];
          *v18 = 1;
        }
        v17 += 40;
        v18 += 40;
        v19 -= 40;
      }
      while (v19);
      v15 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v21 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v21)
    {
      v22 = 40 * v21;
      do
      {
        v23 = &v15[v22];
        if (v15[v22 - 8])
        {
          if (*(v23 - 17) < 0)
            operator delete(*((void **)v23 - 5));
          *(v23 - 8) = 0;
        }
        v22 -= 40;
      }
      while (v22);
    }
LABEL_52:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double sub_1C59C61E4(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 40 * v5;
    do
    {
      v7 = (void **)&v4[v6];
      if (v4[v6 - 8])
      {
        if (*((char *)v7 - 17) < 0)
          operator delete(*(v7 - 5));
        *((_BYTE *)v7 - 8) = 0;
      }
      v6 -= 40;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1C59C6280(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((_BYTE *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    }
    else
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 32) = 0;
  }
  return a1;
}

char *sub_1C59C632C(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_DWORD *)(v7 + 8) < *(_DWORD *)(*(_QWORD *)result + 8))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C59C6564((uint64_t)result, v21, v22, a4);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (char *)sub_1C59C6564((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[8 * a3];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *(_QWORD *)v19;
          v29 = *(_DWORD *)(v27 + 8);
          v30 = *(_DWORD *)(*(_QWORD *)v19 + 8);
          if (v29 < v30)
            v28 = v27;
          v19 += 8 * (v29 >= v30);
          v25 = &v26[v29 < v30];
          *(_QWORD *)v6 = v28;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v31 = 0;
              if (v29 < v30)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                *(_QWORD *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34] = *(_QWORD *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        sub_1C59C632C(result, v21, v22, a4, a5);
        sub_1C59C632C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return sub_1C59C675C(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 8;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          if (*(_DWORD *)(v13 + 8) < *(_DWORD *)(v14 + 8))
          {
            v15 = v11;
            while (1)
            {
              *(_QWORD *)&result[v15] = v14;
              v16 = v15 - 8;
              if (v15 == 8)
                break;
              v14 = *(_QWORD *)&result[v15 - 16];
              v15 -= 8;
              if (*(_DWORD *)(v13 + 8) >= *(_DWORD *)(v14 + 8))
              {
                v17 = &result[v16];
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *(_QWORD *)v17 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C59C6564(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(v8 + 8);
      v10 = *(_DWORD *)(*(_QWORD *)result + 8);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C59C632C(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C59C632C(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(_DWORD *)(v23 + 8);
        v26 = *(_DWORD *)(*(_QWORD *)v6 + 8);
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_DWORD *)(*(_QWORD *)v11 + 8) >= *(_DWORD *)(v16 + 8))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(_QWORD *)v11 + 8) >= *(_DWORD *)(v19 + 8))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C59C675C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      while (1)
      {
        v12 = *(_QWORD *)v11;
        if (*(_DWORD *)(*(_QWORD *)a2 + 8) < *(_DWORD *)(*(_QWORD *)v11 + 8))
          break;
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v12;
          return result;
        }
        if (a4 >= 0)
          v23 = a4;
        else
          v23 = a4 + 1;
        v22 = v23 >> 1;
        v16 = &v11[8 * (v23 >> 1)];
        v15 = a3;
        if (a3 != a2)
        {
          v24 = (a3 - a2) >> 3;
          v15 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v15[8 * (v24 >> 1)];
            v28 = *(_QWORD *)v26;
            v27 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (*(_DWORD *)(v28 + 8) < *(_DWORD *)(*(_QWORD *)v16 + 8))
              v15 = v27;
            else
              v24 = v25;
          }
          while (v24);
        }
        v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v13 = v8;
        else
          v13 = v8 + 1;
        v14 = v13 >> 1;
        v15 = &a2[8 * (v13 >> 1)];
        v16 = a2;
        if (v11 != a2)
        {
          v17 = (a2 - v11) >> 3;
          v16 = v11;
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[8 * (v17 >> 1)];
            v21 = *(_QWORD *)v19;
            v20 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*(_DWORD *)(*(_QWORD *)v15 + 8) < *(_DWORD *)(v21 + 8))
              v17 = v18;
            else
              v16 = v20;
          }
          while (v17);
        }
        v22 = (v16 - v11) >> 3;
      }
      v29 = v15;
      if (v16 != a2)
      {
        v29 = v16;
        if (a2 != v15)
        {
          if (v16 + 8 == a2)
          {
            v69 = *(_QWORD *)v16;
            v71 = a3;
            v36 = v15 - a2;
            v73 = a6;
            memmove(v16, a2, v15 - a2);
            a3 = v71;
            a6 = v73;
            v29 = &v16[v36];
            *(_QWORD *)v29 = v69;
          }
          else if (a2 + 8 == v15)
          {
            v37 = *((_QWORD *)v15 - 1);
            v29 = v16 + 8;
            if (v15 - 8 != v16)
            {
              v72 = a3;
              v74 = a6;
              v70 = *((_QWORD *)v15 - 1);
              memmove(v16 + 8, v16, v15 - 8 - v16);
              v37 = v70;
              a3 = v72;
              a6 = v74;
            }
            *(_QWORD *)v16 = v37;
          }
          else
          {
            v30 = (a2 - v16) >> 3;
            if (v30 == (v15 - a2) >> 3)
            {
              v31 = 0;
              do
              {
                v32 = *(_QWORD *)&v16[v31];
                *(_QWORD *)&v16[v31] = *(_QWORD *)&a2[v31];
                v33 = (uint64_t)&v16[v31 + 8];
                *(_QWORD *)&a2[v31] = v32;
                v34 = (uint64_t)&a2[v31 + 8];
                v31 += 8;
              }
              while ((char *)v33 != a2 && v34 != (_QWORD)v15);
              v29 = a2;
            }
            else
            {
              v38 = (v15 - a2) >> 3;
              v39 = (a2 - v16) >> 3;
              do
              {
                v40 = v39;
                v39 = v38;
                v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                v41 = &v16[8 * v39];
                do
                {
                  v43 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  v42 = v43;
                  v44 = &v41[8 * v30];
                  v45 = v41;
                  do
                  {
                    v46 = v45;
                    v45 = v44;
                    *(_QWORD *)v46 = *(_QWORD *)v44;
                    v47 = __OFSUB__(v30, (v15 - v44) >> 3);
                    v49 = v30 - ((v15 - v44) >> 3);
                    v48 = (v49 < 0) ^ v47;
                    v44 = &v16[8 * v49];
                    if (v48)
                      v44 = &v45[8 * v30];
                  }
                  while (v44 != v41);
                  *(_QWORD *)v45 = v42;
                }
                while (v41 != v16);
              }
              v29 = &v16[8 * ((v15 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        v54 = v8;
        v55 = a6;
        result = (char *)sub_1C59C675C(v29, v15, a3, a4, v54, a6, a7);
        a6 = v55;
        v15 = v16;
        v8 = v14;
        a4 = v22;
        a3 = v29;
      }
      else
      {
        v50 = v11;
        v51 = v16;
        v52 = a6;
        v53 = a3;
        result = (char *)sub_1C59C675C(v50, v51, v29, v22, v14, a6, a7);
        a3 = v53;
        a6 = v52;
        v11 = v29;
      }
      a2 = v15;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v60 = 0;
        do
        {
          *(_QWORD *)&a6[v60] = *(_QWORD *)&v11[v60];
          v60 += 8;
        }
        while (&v11[v60] != a2);
        if (v60)
        {
          v61 = a6;
          while (a2 != a3)
          {
            v62 = *(_QWORD *)a2;
            v63 = *(_DWORD *)(*(_QWORD *)a2 + 8);
            v64 = *(_DWORD *)(*(_QWORD *)v61 + 8);
            v65 = v63 >= v64;
            v66 = v63 < v64;
            v67 = v65;
            if (v65)
              v62 = *(_QWORD *)v61;
            v61 += 8 * v67;
            a2 += 8 * v66;
            *(_QWORD *)v11 = v62;
            v11 += 8;
            if (&a6[v60] == v61)
              return result;
          }
          return (char *)memmove(v11, v61, a6 - v61 + v60);
        }
      }
    }
    else if (a2 != a3)
    {
      v56 = 0;
      do
      {
        *(_QWORD *)&a6[v56] = *(_QWORD *)&a2[v56];
        v56 += 8;
      }
      while (&a2[v56] != a3);
      if (v56)
      {
        v57 = &a6[v56];
        v58 = a3 - 8;
        while (a2 != v11)
        {
          v59 = *((_QWORD *)v57 - 1);
          if (*(_DWORD *)(v59 + 8) >= *(_DWORD *)(*((_QWORD *)a2 - 1) + 8))
          {
            v57 -= 8;
          }
          else
          {
            v59 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v58 = v59;
          v58 -= 8;
          if (v57 == a6)
            return result;
        }
        if (v57 != a6)
        {
          v68 = 0;
          do
          {
            *(_QWORD *)&v58[v68] = *(_QWORD *)&v57[v68 - 8];
            v68 -= 8;
          }
          while (&v57[v68] != a6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C59C6BF0(_QWORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  char *v6;
  char *v8;
  char *v9;

  *a1 = 0;
  a1[1] = a3;
  a1[2] = a4;
  v6 = *a4;
  *a4 = 0;
  v8 = v6;
  sub_1C4D62BD4(&v8, &v9);
  if (v8)
    (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  sub_1C59C6C64((uint64_t)a1, a2, 0);
  return a1;
}

void sub_1C59C6C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = *(_QWORD *)(a1 + 8) - a3;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    if (v4 > 0xB
      && (*(_QWORD *)a1 = a2 + a3,
          ((*(unsigned int *)(a2 + a3) + 3) & 0x1FFFFFFFCLL)
        + ((*(unsigned int *)(a2 + a3 + 4) + 3) & 0x1FFFFFFFCuLL)
        + 12 <= v4))
    {
      **(_QWORD **)(a1 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a1 = 0;
      v5 = operator new();
      v8 = "ELF note overflows container";
      v9 = 259;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v7 = qword_1EF8F7238[0];
      *(_QWORD *)v5 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v5 + 8));
      *(_QWORD *)(v5 + 32) = 3;
      *(_QWORD *)(v5 + 40) = v7;
      *(_BYTE *)(v5 + 48) = 1;
      **(_QWORD **)(a1 + 16) = v5;
    }
  }
  else
  {
    **(_QWORD **)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
  }
}

void sub_1C59C6D90(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  unint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  if (*((_BYTE *)a1 + 16))
  {
    if (a1[1] > a2)
    {
      v4 = *a1;
LABEL_6:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = *(_DWORD *)(v4 + 4 * a2);
      return;
    }
    v9[0] = "the index is greater than or equal to the number of entries (";
    v9[2] = a1 + 1;
    v10 = 3075;
    v11[0] = v9;
    v11[2] = ")";
    v5 = 770;
  }
  else
  {
    v4 = *a1;
    if (*a1 + 4 * a2 + 4 <= a1[3])
      goto LABEL_6;
    v11[0] = "can't read past the end of the file";
    v5 = 259;
  }
  v12 = v5;
  v6 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v8 = qword_1EF8F7238[0];
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v11, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 3;
  *(_QWORD *)(v6 + 40) = v8;
  *(_BYTE *)(v6 + 48) = 1;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v6;
}

_QWORD *sub_1C59C6EE4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >= 0x1555555555555556)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(12 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = (char *)result + 4 * v7;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v6[1] = (char *)v8 + v9;
  }
  return result;
}

char *sub_1C59C6F70(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (bswap32(*(_DWORD *)(v7 + 8)) < bswap32(*(_DWORD *)(*(_QWORD *)result + 8)))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v18 = (char *)a4;
      v19 = a3 >> 1;
      v20 = &result[8 * (a3 >> 1)];
      v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C59C71C8((uint64_t)result, v20, v21, a4);
        v22 = (uint64_t *)&v18[8 * v19];
        result = (char *)sub_1C59C71C8((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22);
        v23 = &v18[8 * a3];
        v24 = v22;
        while (v24 != (uint64_t *)v23)
        {
          v25 = v24;
          v26 = *v24;
          v27 = *(_QWORD *)v18;
          v28 = bswap32(*(_DWORD *)(v26 + 8));
          v29 = bswap32(*(_DWORD *)(*(_QWORD *)v18 + 8));
          if (v28 < v29)
            v27 = v26;
          v18 += 8 * (v28 >= v29);
          v24 = &v25[v28 < v29];
          *(_QWORD *)v6 = v27;
          v6 += 8;
          if (v18 == (char *)v22)
          {
            if (v24 != (uint64_t *)v23)
            {
              v30 = 0;
              if (v28 < v29)
                v31 = 1;
              else
                v31 = 2;
              v32 = &v25[v31 & 1];
              do
              {
                *(_QWORD *)&v6[v30 * 8] = v32[v30];
                ++v30;
              }
              while (&v32[v30] != (uint64_t *)v23);
            }
            return result;
          }
        }
        if (v18 != (char *)v22)
        {
          v33 = 0;
          do
          {
            *(_QWORD *)&v6[v33] = *(_QWORD *)&v18[v33];
            v33 += 8;
          }
          while (&v18[v33] != (char *)v22);
        }
      }
      else
      {
        sub_1C59C6F70(result, v20, v21, a4, a5);
        sub_1C59C6F70(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        return sub_1C59C73E0(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          if (bswap32(*(_DWORD *)(v13 + 8)) < bswap32(*(_DWORD *)(v14 + 8)))
          {
            v15 = v11;
            while (1)
            {
              *(_QWORD *)&result[v15 + 8] = v14;
              if (!v15)
                break;
              v14 = *(_QWORD *)&result[v15 - 8];
              v15 -= 8;
              if (bswap32(*(_DWORD *)(v13 + 8)) >= bswap32(*(_DWORD *)(v14 + 8)))
              {
                v16 = &result[v15 + 8];
                goto LABEL_15;
              }
            }
            v16 = result;
LABEL_15:
            *(_QWORD *)v16 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C59C71C8(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = bswap32(*(_DWORD *)(v8 + 8));
      v10 = bswap32(*(_DWORD *)(*(_QWORD *)result + 8));
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C59C6F70(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C59C6F70(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = bswap32(*(_DWORD *)(v23 + 8));
        v26 = bswap32(*(_DWORD *)(*(_QWORD *)v6 + 8));
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (bswap32(*(_DWORD *)(*(_QWORD *)v11 + 8)) >= bswap32(*(_DWORD *)(v16 + 8)))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (bswap32(*(_DWORD *)(*(_QWORD *)v11 + 8)) >= bswap32(*(_DWORD *)(v19 + 8)))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C59C73E0(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  _BOOL4 v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v12 = bswap32(*(_DWORD *)(*(_QWORD *)a2 + 8));
      while (1)
      {
        v13 = *(_QWORD *)v11;
        if (v12 < bswap32(*(_DWORD *)(*(_QWORD *)v11 + 8)))
          break;
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v13;
          return result;
        }
        if (a4 >= 0)
          v25 = a4;
        else
          v25 = a4 + 1;
        v24 = v25 >> 1;
        v17 = &v11[8 * (v25 >> 1)];
        v16 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 3;
          v27 = bswap32(*(_DWORD *)(*(_QWORD *)v17 + 8));
          v16 = a2;
          do
          {
            v28 = v26 >> 1;
            v29 = &v16[8 * (v26 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v26 += ~(v26 >> 1);
            if (bswap32(*(_DWORD *)(v31 + 8)) < v27)
              v16 = v30;
            else
              v26 = v28;
          }
          while (v26);
        }
        v15 = (v16 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v14 = v8;
        else
          v14 = v8 + 1;
        v15 = v14 >> 1;
        v16 = &a2[8 * (v14 >> 1)];
        v17 = a2;
        if (v11 != a2)
        {
          v18 = (a2 - v11) >> 3;
          v19 = bswap32(*(_DWORD *)(*(_QWORD *)v16 + 8));
          v17 = v11;
          do
          {
            v20 = v18 >> 1;
            v21 = &v17[8 * (v18 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 8;
            v18 += ~(v18 >> 1);
            if (v19 < bswap32(*(_DWORD *)(v23 + 8)))
              v18 = v20;
            else
              v17 = v22;
          }
          while (v18);
        }
        v24 = (v17 - v11) >> 3;
      }
      v32 = v16;
      if (v17 != a2)
      {
        v32 = v17;
        if (a2 != v16)
        {
          if (v17 + 8 == a2)
          {
            v72 = *(_QWORD *)v17;
            v74 = a3;
            v39 = v16 - a2;
            v76 = a6;
            memmove(v17, a2, v16 - a2);
            a3 = v74;
            a6 = v76;
            v32 = &v17[v39];
            *(_QWORD *)v32 = v72;
          }
          else if (a2 + 8 == v16)
          {
            v40 = *((_QWORD *)v16 - 1);
            v32 = v17 + 8;
            if (v16 - 8 != v17)
            {
              v75 = a3;
              v77 = a6;
              v73 = *((_QWORD *)v16 - 1);
              memmove(v17 + 8, v17, v16 - 8 - v17);
              v40 = v73;
              a3 = v75;
              a6 = v77;
            }
            *(_QWORD *)v17 = v40;
          }
          else
          {
            v33 = (a2 - v17) >> 3;
            if (v33 == (v16 - a2) >> 3)
            {
              v34 = 0;
              do
              {
                v35 = *(_QWORD *)&v17[v34];
                *(_QWORD *)&v17[v34] = *(_QWORD *)&a2[v34];
                v36 = (uint64_t)&v17[v34 + 8];
                *(_QWORD *)&a2[v34] = v35;
                v37 = (uint64_t)&a2[v34 + 8];
                v34 += 8;
              }
              while ((char *)v36 != a2 && v37 != (_QWORD)v16);
              v32 = a2;
            }
            else
            {
              v41 = (v16 - a2) >> 3;
              v42 = (a2 - v17) >> 3;
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v17[8 * v42];
                do
                {
                  v46 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  v45 = v46;
                  v47 = &v44[8 * v33];
                  v48 = v44;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    *(_QWORD *)v49 = *(_QWORD *)v47;
                    v50 = __OFSUB__(v33, (v16 - v47) >> 3);
                    v52 = v33 - ((v16 - v47) >> 3);
                    v51 = (v52 < 0) ^ v50;
                    v47 = &v17[8 * v52];
                    if (v51)
                      v47 = &v48[8 * v33];
                  }
                  while (v47 != v44);
                  *(_QWORD *)v48 = v45;
                }
                while (v44 != v17);
              }
              v32 = &v17[8 * ((v16 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v24;
      v8 -= v15;
      if (v24 + v15 >= a4 + v8)
      {
        v57 = v8;
        v58 = a6;
        result = (char *)sub_1C59C73E0(v32, v16, a3, a4, v57, a6, a7);
        a6 = v58;
        v16 = v17;
        v8 = v15;
        a4 = v24;
        a3 = v32;
      }
      else
      {
        v53 = v11;
        v54 = v17;
        v55 = a6;
        v56 = a3;
        result = (char *)sub_1C59C73E0(v53, v54, v32, v24, v15, a6, a7);
        a3 = v56;
        a6 = v55;
        v11 = v32;
      }
      a2 = v16;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v63 = 0;
        do
        {
          *(_QWORD *)&a6[v63] = *(_QWORD *)&v11[v63];
          v63 += 8;
        }
        while (&v11[v63] != a2);
        if (v63)
        {
          v64 = a6;
          while (a2 != a3)
          {
            v65 = *(_QWORD *)a2;
            v66 = bswap32(*(_DWORD *)(*(_QWORD *)a2 + 8));
            v67 = bswap32(*(_DWORD *)(*(_QWORD *)v64 + 8));
            v68 = v66 >= v67;
            v69 = v66 < v67;
            v70 = v68;
            if (v68)
              v65 = *(_QWORD *)v64;
            v64 += 8 * v70;
            a2 += 8 * v69;
            *(_QWORD *)v11 = v65;
            v11 += 8;
            if (&a6[v63] == v64)
              return result;
          }
          return (char *)memmove(v11, v64, a6 - v64 + v63);
        }
      }
    }
    else if (a2 != a3)
    {
      v59 = 0;
      do
      {
        *(_QWORD *)&a6[v59] = *(_QWORD *)&a2[v59];
        v59 += 8;
      }
      while (&a2[v59] != a3);
      if (v59)
      {
        v60 = &a6[v59];
        v61 = a3 - 8;
        while (a2 != v11)
        {
          v62 = *((_QWORD *)v60 - 1);
          if (bswap32(*(_DWORD *)(v62 + 8)) >= bswap32(*(_DWORD *)(*((_QWORD *)a2 - 1) + 8)))
          {
            v60 -= 8;
          }
          else
          {
            v62 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v61 = v62;
          v61 -= 8;
          if (v60 == a6)
            return result;
        }
        if (v60 != a6)
        {
          v71 = 0;
          do
          {
            *(_QWORD *)&v61[v71] = *(_QWORD *)&v60[v71 - 8];
            v71 -= 8;
          }
          while (&v60[v71] != a6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C59C789C(_QWORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  char *v6;
  char *v8;
  char *v9;

  *a1 = 0;
  a1[1] = a3;
  a1[2] = a4;
  v6 = *a4;
  *a4 = 0;
  v8 = v6;
  sub_1C4D62BD4(&v8, &v9);
  if (v8)
    (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  sub_1C59C7910((uint64_t)a1, a2, 0);
  return a1;
}

void sub_1C59C7910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = *(_QWORD *)(a1 + 8) - a3;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    if (v4 > 0xB
      && (*(_QWORD *)a1 = a2 + a3,
          vaddvq_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32((uint64x2_t)vdupq_n_s64(3uLL), (uint32x2_t)vrev32_s8(*(int8x8_t *)(a2 + a3))), (int8x16_t)vdupq_n_s64(0x1FFFFFFFCuLL)))+ 12 <= v4))
    {
      **(_QWORD **)(a1 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a1 = 0;
      v5 = operator new();
      v8 = "ELF note overflows container";
      v9 = 259;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v7 = qword_1EF8F7238[0];
      *(_QWORD *)v5 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v5 + 8));
      *(_QWORD *)(v5 + 32) = 3;
      *(_QWORD *)(v5 + 40) = v7;
      *(_BYTE *)(v5 + 48) = 1;
      **(_QWORD **)(a1 + 16) = v5;
    }
  }
  else
  {
    **(_QWORD **)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
  }
}

char *sub_1C59C7A4C(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_QWORD *)(v7 + 16) < *(_QWORD *)(*(_QWORD *)result + 16))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C59C7C84((uint64_t)result, v21, v22, a4);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (char *)sub_1C59C7C84((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[8 * a3];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *(_QWORD *)v19;
          v29 = *(_QWORD *)(v27 + 16);
          v30 = *(_QWORD *)(*(_QWORD *)v19 + 16);
          if (v29 < v30)
            v28 = v27;
          v19 += 8 * (v29 >= v30);
          v25 = &v26[v29 < v30];
          *(_QWORD *)v6 = v28;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v31 = 0;
              if (v29 < v30)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                *(_QWORD *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34] = *(_QWORD *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        sub_1C59C7A4C(result, v21, v22, a4, a5);
        sub_1C59C7A4C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return sub_1C59C7E7C(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 8;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          if (*(_QWORD *)(v13 + 16) < *(_QWORD *)(v14 + 16))
          {
            v15 = v11;
            while (1)
            {
              *(_QWORD *)&result[v15] = v14;
              v16 = v15 - 8;
              if (v15 == 8)
                break;
              v14 = *(_QWORD *)&result[v15 - 16];
              v15 -= 8;
              if (*(_QWORD *)(v13 + 16) >= *(_QWORD *)(v14 + 16))
              {
                v17 = &result[v16];
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *(_QWORD *)v17 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C59C7C84(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)result + 16);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C59C7A4C(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C59C7A4C(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(_QWORD *)(v23 + 16);
        v26 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_QWORD *)(*(_QWORD *)v11 + 16) >= *(_QWORD *)(v16 + 16))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_QWORD *)(*(_QWORD *)v11 + 16) >= *(_QWORD *)(v19 + 16))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C59C7E7C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      while (1)
      {
        v12 = *(_QWORD *)v11;
        if (*(_QWORD *)(*(_QWORD *)a2 + 16) < *(_QWORD *)(*(_QWORD *)v11 + 16))
          break;
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v12;
          return result;
        }
        if (a4 >= 0)
          v23 = a4;
        else
          v23 = a4 + 1;
        v22 = v23 >> 1;
        v16 = &v11[8 * (v23 >> 1)];
        v15 = a3;
        if (a3 != a2)
        {
          v24 = (a3 - a2) >> 3;
          v15 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v15[8 * (v24 >> 1)];
            v28 = *(_QWORD *)v26;
            v27 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (*(_QWORD *)(v28 + 16) < *(_QWORD *)(*(_QWORD *)v16 + 16))
              v15 = v27;
            else
              v24 = v25;
          }
          while (v24);
        }
        v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v13 = v8;
        else
          v13 = v8 + 1;
        v14 = v13 >> 1;
        v15 = &a2[8 * (v13 >> 1)];
        v16 = a2;
        if (v11 != a2)
        {
          v17 = (a2 - v11) >> 3;
          v16 = v11;
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[8 * (v17 >> 1)];
            v21 = *(_QWORD *)v19;
            v20 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*(_QWORD *)(*(_QWORD *)v15 + 16) < *(_QWORD *)(v21 + 16))
              v17 = v18;
            else
              v16 = v20;
          }
          while (v17);
        }
        v22 = (v16 - v11) >> 3;
      }
      v29 = v15;
      if (v16 != a2)
      {
        v29 = v16;
        if (a2 != v15)
        {
          if (v16 + 8 == a2)
          {
            v69 = *(_QWORD *)v16;
            v71 = a3;
            v36 = v15 - a2;
            v73 = a6;
            memmove(v16, a2, v15 - a2);
            a3 = v71;
            a6 = v73;
            v29 = &v16[v36];
            *(_QWORD *)v29 = v69;
          }
          else if (a2 + 8 == v15)
          {
            v37 = *((_QWORD *)v15 - 1);
            v29 = v16 + 8;
            if (v15 - 8 != v16)
            {
              v72 = a3;
              v74 = a6;
              v70 = *((_QWORD *)v15 - 1);
              memmove(v16 + 8, v16, v15 - 8 - v16);
              v37 = v70;
              a3 = v72;
              a6 = v74;
            }
            *(_QWORD *)v16 = v37;
          }
          else
          {
            v30 = (a2 - v16) >> 3;
            if (v30 == (v15 - a2) >> 3)
            {
              v31 = 0;
              do
              {
                v32 = *(_QWORD *)&v16[v31];
                *(_QWORD *)&v16[v31] = *(_QWORD *)&a2[v31];
                v33 = (uint64_t)&v16[v31 + 8];
                *(_QWORD *)&a2[v31] = v32;
                v34 = (uint64_t)&a2[v31 + 8];
                v31 += 8;
              }
              while ((char *)v33 != a2 && v34 != (_QWORD)v15);
              v29 = a2;
            }
            else
            {
              v38 = (v15 - a2) >> 3;
              v39 = (a2 - v16) >> 3;
              do
              {
                v40 = v39;
                v39 = v38;
                v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                v41 = &v16[8 * v39];
                do
                {
                  v43 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  v42 = v43;
                  v44 = &v41[8 * v30];
                  v45 = v41;
                  do
                  {
                    v46 = v45;
                    v45 = v44;
                    *(_QWORD *)v46 = *(_QWORD *)v44;
                    v47 = __OFSUB__(v30, (v15 - v44) >> 3);
                    v49 = v30 - ((v15 - v44) >> 3);
                    v48 = (v49 < 0) ^ v47;
                    v44 = &v16[8 * v49];
                    if (v48)
                      v44 = &v45[8 * v30];
                  }
                  while (v44 != v41);
                  *(_QWORD *)v45 = v42;
                }
                while (v41 != v16);
              }
              v29 = &v16[8 * ((v15 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        v54 = v8;
        v55 = a6;
        result = (char *)sub_1C59C7E7C(v29, v15, a3, a4, v54, a6, a7);
        a6 = v55;
        v15 = v16;
        v8 = v14;
        a4 = v22;
        a3 = v29;
      }
      else
      {
        v50 = v11;
        v51 = v16;
        v52 = a6;
        v53 = a3;
        result = (char *)sub_1C59C7E7C(v50, v51, v29, v22, v14, a6, a7);
        a3 = v53;
        a6 = v52;
        v11 = v29;
      }
      a2 = v15;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v60 = 0;
        do
        {
          *(_QWORD *)&a6[v60] = *(_QWORD *)&v11[v60];
          v60 += 8;
        }
        while (&v11[v60] != a2);
        if (v60)
        {
          v61 = a6;
          while (a2 != a3)
          {
            v62 = *(_QWORD *)a2;
            v63 = *(_QWORD *)(*(_QWORD *)a2 + 16);
            v64 = *(_QWORD *)(*(_QWORD *)v61 + 16);
            v65 = v63 >= v64;
            v66 = v63 < v64;
            v67 = v65;
            if (v65)
              v62 = *(_QWORD *)v61;
            v61 += 8 * v67;
            a2 += 8 * v66;
            *(_QWORD *)v11 = v62;
            v11 += 8;
            if (&a6[v60] == v61)
              return result;
          }
          return (char *)memmove(v11, v61, a6 - v61 + v60);
        }
      }
    }
    else if (a2 != a3)
    {
      v56 = 0;
      do
      {
        *(_QWORD *)&a6[v56] = *(_QWORD *)&a2[v56];
        v56 += 8;
      }
      while (&a2[v56] != a3);
      if (v56)
      {
        v57 = &a6[v56];
        v58 = a3 - 8;
        while (a2 != v11)
        {
          v59 = *((_QWORD *)v57 - 1);
          if (*(_QWORD *)(v59 + 16) >= *(_QWORD *)(*((_QWORD *)a2 - 1) + 16))
          {
            v57 -= 8;
          }
          else
          {
            v59 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v58 = v59;
          v58 -= 8;
          if (v57 == a6)
            return result;
        }
        if (v57 != a6)
        {
          v68 = 0;
          do
          {
            *(_QWORD *)&v58[v68] = *(_QWORD *)&v57[v68 - 8];
            v68 -= 8;
          }
          while (&v57[v68] != a6);
        }
      }
    }
  }
  return result;
}

char *sub_1C59C8310(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (bswap64(*(_QWORD *)(v7 + 16)) < bswap64(*(_QWORD *)(*(_QWORD *)result + 16)))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v18 = (char *)a4;
      v19 = a3 >> 1;
      v20 = &result[8 * (a3 >> 1)];
      v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C59C8568((uint64_t)result, v20, v21, a4);
        v22 = (uint64_t *)&v18[8 * v19];
        result = (char *)sub_1C59C8568((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22);
        v23 = &v18[8 * a3];
        v24 = v22;
        while (v24 != (uint64_t *)v23)
        {
          v25 = v24;
          v26 = *v24;
          v27 = *(_QWORD *)v18;
          v28 = bswap64(*(_QWORD *)(v26 + 16));
          v29 = bswap64(*(_QWORD *)(*(_QWORD *)v18 + 16));
          if (v28 < v29)
            v27 = v26;
          v18 += 8 * (v28 >= v29);
          v24 = &v25[v28 < v29];
          *(_QWORD *)v6 = v27;
          v6 += 8;
          if (v18 == (char *)v22)
          {
            if (v24 != (uint64_t *)v23)
            {
              v30 = 0;
              if (v28 < v29)
                v31 = 1;
              else
                v31 = 2;
              v32 = &v25[v31 & 1];
              do
              {
                *(_QWORD *)&v6[v30 * 8] = v32[v30];
                ++v30;
              }
              while (&v32[v30] != (uint64_t *)v23);
            }
            return result;
          }
        }
        if (v18 != (char *)v22)
        {
          v33 = 0;
          do
          {
            *(_QWORD *)&v6[v33] = *(_QWORD *)&v18[v33];
            v33 += 8;
          }
          while (&v18[v33] != (char *)v22);
        }
      }
      else
      {
        sub_1C59C8310(result, v20, v21, a4, a5);
        sub_1C59C8310(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        return sub_1C59C8780(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          if (bswap64(*(_QWORD *)(v13 + 16)) < bswap64(*(_QWORD *)(v14 + 16)))
          {
            v15 = v11;
            while (1)
            {
              *(_QWORD *)&result[v15 + 8] = v14;
              if (!v15)
                break;
              v14 = *(_QWORD *)&result[v15 - 8];
              v15 -= 8;
              if (bswap64(*(_QWORD *)(v13 + 16)) >= bswap64(*(_QWORD *)(v14 + 16)))
              {
                v16 = &result[v15 + 8];
                goto LABEL_15;
              }
            }
            v16 = result;
LABEL_15:
            *(_QWORD *)v16 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C59C8568(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = bswap64(*(_QWORD *)(v8 + 16));
      v10 = bswap64(*(_QWORD *)(*(_QWORD *)result + 16));
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C59C8310(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C59C8310(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = bswap64(*(_QWORD *)(v23 + 16));
        v26 = bswap64(*(_QWORD *)(*(_QWORD *)v6 + 16));
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (bswap64(*(_QWORD *)(*(_QWORD *)v11 + 16)) >= bswap64(*(_QWORD *)(v16 + 16)))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (bswap64(*(_QWORD *)(*(_QWORD *)v11 + 16)) >= bswap64(*(_QWORD *)(v19 + 16)))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C59C8780(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  _BOOL4 v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v12 = bswap64(*(_QWORD *)(*(_QWORD *)a2 + 16));
      while (1)
      {
        v13 = *(_QWORD *)v11;
        if (v12 < bswap64(*(_QWORD *)(*(_QWORD *)v11 + 16)))
          break;
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v13;
          return result;
        }
        if (a4 >= 0)
          v25 = a4;
        else
          v25 = a4 + 1;
        v24 = v25 >> 1;
        v17 = &v11[8 * (v25 >> 1)];
        v16 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 3;
          v27 = bswap64(*(_QWORD *)(*(_QWORD *)v17 + 16));
          v16 = a2;
          do
          {
            v28 = v26 >> 1;
            v29 = &v16[8 * (v26 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v26 += ~(v26 >> 1);
            if (bswap64(*(_QWORD *)(v31 + 16)) < v27)
              v16 = v30;
            else
              v26 = v28;
          }
          while (v26);
        }
        v15 = (v16 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v14 = v8;
        else
          v14 = v8 + 1;
        v15 = v14 >> 1;
        v16 = &a2[8 * (v14 >> 1)];
        v17 = a2;
        if (v11 != a2)
        {
          v18 = (a2 - v11) >> 3;
          v19 = bswap64(*(_QWORD *)(*(_QWORD *)v16 + 16));
          v17 = v11;
          do
          {
            v20 = v18 >> 1;
            v21 = &v17[8 * (v18 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 8;
            v18 += ~(v18 >> 1);
            if (v19 < bswap64(*(_QWORD *)(v23 + 16)))
              v18 = v20;
            else
              v17 = v22;
          }
          while (v18);
        }
        v24 = (v17 - v11) >> 3;
      }
      v32 = v16;
      if (v17 != a2)
      {
        v32 = v17;
        if (a2 != v16)
        {
          if (v17 + 8 == a2)
          {
            v72 = *(_QWORD *)v17;
            v74 = a3;
            v39 = v16 - a2;
            v76 = a6;
            memmove(v17, a2, v16 - a2);
            a3 = v74;
            a6 = v76;
            v32 = &v17[v39];
            *(_QWORD *)v32 = v72;
          }
          else if (a2 + 8 == v16)
          {
            v40 = *((_QWORD *)v16 - 1);
            v32 = v17 + 8;
            if (v16 - 8 != v17)
            {
              v75 = a3;
              v77 = a6;
              v73 = *((_QWORD *)v16 - 1);
              memmove(v17 + 8, v17, v16 - 8 - v17);
              v40 = v73;
              a3 = v75;
              a6 = v77;
            }
            *(_QWORD *)v17 = v40;
          }
          else
          {
            v33 = (a2 - v17) >> 3;
            if (v33 == (v16 - a2) >> 3)
            {
              v34 = 0;
              do
              {
                v35 = *(_QWORD *)&v17[v34];
                *(_QWORD *)&v17[v34] = *(_QWORD *)&a2[v34];
                v36 = (uint64_t)&v17[v34 + 8];
                *(_QWORD *)&a2[v34] = v35;
                v37 = (uint64_t)&a2[v34 + 8];
                v34 += 8;
              }
              while ((char *)v36 != a2 && v37 != (_QWORD)v16);
              v32 = a2;
            }
            else
            {
              v41 = (v16 - a2) >> 3;
              v42 = (a2 - v17) >> 3;
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v17[8 * v42];
                do
                {
                  v46 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  v45 = v46;
                  v47 = &v44[8 * v33];
                  v48 = v44;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    *(_QWORD *)v49 = *(_QWORD *)v47;
                    v50 = __OFSUB__(v33, (v16 - v47) >> 3);
                    v52 = v33 - ((v16 - v47) >> 3);
                    v51 = (v52 < 0) ^ v50;
                    v47 = &v17[8 * v52];
                    if (v51)
                      v47 = &v48[8 * v33];
                  }
                  while (v47 != v44);
                  *(_QWORD *)v48 = v45;
                }
                while (v44 != v17);
              }
              v32 = &v17[8 * ((v16 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v24;
      v8 -= v15;
      if (v24 + v15 >= a4 + v8)
      {
        v57 = v8;
        v58 = a6;
        result = (char *)sub_1C59C8780(v32, v16, a3, a4, v57, a6, a7);
        a6 = v58;
        v16 = v17;
        v8 = v15;
        a4 = v24;
        a3 = v32;
      }
      else
      {
        v53 = v11;
        v54 = v17;
        v55 = a6;
        v56 = a3;
        result = (char *)sub_1C59C8780(v53, v54, v32, v24, v15, a6, a7);
        a3 = v56;
        a6 = v55;
        v11 = v32;
      }
      a2 = v16;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v63 = 0;
        do
        {
          *(_QWORD *)&a6[v63] = *(_QWORD *)&v11[v63];
          v63 += 8;
        }
        while (&v11[v63] != a2);
        if (v63)
        {
          v64 = a6;
          while (a2 != a3)
          {
            v65 = *(_QWORD *)a2;
            v66 = bswap64(*(_QWORD *)(*(_QWORD *)a2 + 16));
            v67 = bswap64(*(_QWORD *)(*(_QWORD *)v64 + 16));
            v68 = v66 >= v67;
            v69 = v66 < v67;
            v70 = v68;
            if (v68)
              v65 = *(_QWORD *)v64;
            v64 += 8 * v70;
            a2 += 8 * v69;
            *(_QWORD *)v11 = v65;
            v11 += 8;
            if (&a6[v63] == v64)
              return result;
          }
          return (char *)memmove(v11, v64, a6 - v64 + v63);
        }
      }
    }
    else if (a2 != a3)
    {
      v59 = 0;
      do
      {
        *(_QWORD *)&a6[v59] = *(_QWORD *)&a2[v59];
        v59 += 8;
      }
      while (&a2[v59] != a3);
      if (v59)
      {
        v60 = &a6[v59];
        v61 = a3 - 8;
        while (a2 != v11)
        {
          v62 = *((_QWORD *)v60 - 1);
          if (bswap64(*(_QWORD *)(v62 + 16)) >= bswap64(*(_QWORD *)(*((_QWORD *)a2 - 1) + 16)))
          {
            v60 -= 8;
          }
          else
          {
            v62 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v61 = v62;
          v61 -= 8;
          if (v60 == a6)
            return result;
        }
        if (v60 != a6)
        {
          v71 = 0;
          do
          {
            *(_QWORD *)&v61[v71] = *(_QWORD *)&v60[v71 - 8];
            v71 -= 8;
          }
          while (&v60[v71] != a6);
        }
      }
    }
  }
  return result;
}

__n128 llvm::object::ELFObjectFileBase::ELFObjectFileBase(uint64_t a1, int a2, __int128 *a3)
{
  __n128 result;
  __int128 v4;

  v4 = *a3;
  result = (__n128)a3[1];
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)a1 = off_1E8188728;
  return result;
}

void llvm::object::ObjectFile::createELFObjectFile(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t (**v13)();
  int v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  uint64_t (**v20)();
  int v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t (**v24)();
  __int128 v25;
  int v26;
  int v27;
  uint64_t (**v28)();
  __int128 v29;
  int v30;
  uint64_t (**v31)();
  __int128 v32;
  int v33;
  uint64_t (**v34)();
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t (**v41)();
  uint64_t (**v42)();
  int v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t (**v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (**v52)();
  int v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t (**v57)();
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t (**v63)();
  uint64_t v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 > 0xF)
  {
    v10 = *(_QWORD *)a1;
    v9 = *(_WORD *)(*(_QWORD *)a1 + 4);
    if ((*(_QWORD *)a1 & 1) != 0)
      goto LABEL_3;
LABEL_5:
    if (v9 != 2)
    {
      if (v9 != 1)
      {
        v11 = "Invalid ELF class";
        goto LABEL_15;
      }
      v12 = HIBYTE(v9);
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          v37 = *(_OWORD *)(a1 + 16);
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(v10, v8, (uint64_t)&v63);
          if ((v65 & 1) != 0)
          {
            v18 = v63;
            v63 = 0;
            if (v18)
              goto LABEL_65;
            v13 = 0;
          }
          else
          {
            v13 = v63;
          }
          *(_QWORD *)&v44 = v10;
          *((_QWORD *)&v44 + 1) = v8;
          v45 = v37;
          v19 = v64;
          v43 = 12;
          v20 = &off_1E8188950;
          v42 = &off_1E8188950;
          v46 = 0;
          v47 = v13;
          v48 = v64;
          v50 = 0;
          v51 = 0;
          v49 = 0;
          if (a2)
          {
            sub_1C62CD914((uint64_t)&v42, &v41);
            v18 = v41;
            if (v41)
            {
              v21 = 0;
              v62 = -1;
              v52 = v41;
              goto LABEL_29;
            }
            v13 = v47;
            v19 = v48;
            v5 = v49;
            v4 = v50;
            v3 = v51;
          }
          else
          {
            v3 = 0;
            v4 = 0;
            v5 = 0;
          }
          v62 = 0;
          v53 = 12;
          v54 = v44;
          v55 = v45;
          v52 = &off_1E8188950;
          v56 = 0;
          v57 = v13;
          v58 = v19;
          v59 = v5;
          v60 = v4;
          v61 = v3;
          v21 = 1;
          v18 = &off_1E8188950;
LABEL_29:
          if ((v65 & 1) != 0)
          {
            v22 = v63;
            v63 = 0;
            if (v22)
              (*((void (**)(uint64_t (**)()))*v22 + 1))(v22);
          }
          if (v21)
          {
            v23 = operator new();
            v24 = (uint64_t (**)())v23;
            v25 = v55;
            *(_OWORD *)(v23 + 16) = v54;
            *(_OWORD *)(v23 + 32) = v25;
            v26 = 12;
LABEL_64:
            *(_DWORD *)(v23 + 8) = v26;
            *(_QWORD *)v23 = v20;
            *(_BYTE *)(v23 + 48) = 0;
            *(_QWORD *)(v23 + 56) = v13;
            *(_QWORD *)(v23 + 64) = v19;
            *(_QWORD *)(v23 + 72) = v5;
            *(_QWORD *)(v23 + 80) = v4;
            *(_QWORD *)(v23 + 88) = v3;
            ((void (*)(uint64_t (***)()))*v18)(&v52);
            v36 = 0;
            v18 = v24;
LABEL_66:
            *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v36;
            *(_QWORD *)a3 = v18;
            return;
          }
          goto LABEL_65;
        }
LABEL_13:
        v11 = "Invalid ELF data";
        goto LABEL_15;
      }
      v38 = *(_OWORD *)(a1 + 16);
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(v10, v8, (uint64_t)&v63);
      if ((v65 & 1) != 0)
      {
        v18 = v63;
        v63 = 0;
        if (v18)
          goto LABEL_65;
        v13 = 0;
      }
      else
      {
        v13 = v63;
      }
      *(_QWORD *)&v44 = v10;
      *((_QWORD *)&v44 + 1) = v8;
      v45 = v38;
      v19 = v64;
      v43 = 13;
      v20 = &off_1E8188B78;
      v42 = &off_1E8188B78;
      v46 = 0;
      v47 = v13;
      v48 = v64;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      if (a2)
      {
        sub_1C62D019C((uint64_t)&v42, &v41);
        v18 = v41;
        if (v41)
        {
          v27 = 0;
          v62 = -1;
          v52 = v41;
          goto LABEL_39;
        }
        v13 = v47;
        v19 = v48;
        v5 = v49;
        v4 = v50;
        v3 = v51;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v5 = 0;
      }
      v62 = 0;
      v53 = 13;
      v54 = v44;
      v55 = v45;
      v52 = &off_1E8188B78;
      v56 = 0;
      v57 = v13;
      v58 = v19;
      v59 = v5;
      v60 = v4;
      v61 = v3;
      v27 = 1;
      v18 = &off_1E8188B78;
LABEL_39:
      if ((v65 & 1) != 0)
      {
        v28 = v63;
        v63 = 0;
        if (v28)
          (*((void (**)(uint64_t (**)()))*v28 + 1))(v28);
      }
      if (v27)
      {
        v23 = operator new();
        v24 = (uint64_t (**)())v23;
        v29 = v55;
        *(_OWORD *)(v23 + 16) = v54;
        *(_OWORD *)(v23 + 32) = v29;
        v26 = 13;
        goto LABEL_64;
      }
LABEL_65:
      v36 = 1;
      goto LABEL_66;
    }
    v14 = HIBYTE(v9);
    if (v14 != 2)
    {
      if (v14 != 1)
        goto LABEL_13;
      v40 = *(_OWORD *)(a1 + 16);
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(v10, v8, (uint64_t)&v63);
      if ((v65 & 1) != 0)
      {
        v18 = v63;
        v63 = 0;
        if (v18)
          goto LABEL_65;
        v13 = 0;
      }
      else
      {
        v13 = v63;
      }
      *(_QWORD *)&v44 = v10;
      *((_QWORD *)&v44 + 1) = v8;
      v45 = v40;
      v19 = v64;
      v43 = 14;
      v20 = &off_1E8188DA0;
      v42 = &off_1E8188DA0;
      v46 = 0;
      v47 = v13;
      v48 = v64;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      if (a2)
      {
        sub_1C62D29E4((uint64_t)&v42, &v41);
        v18 = v41;
        if (v41)
        {
          v33 = 0;
          v62 = -1;
          v52 = v41;
          goto LABEL_59;
        }
        v13 = v47;
        v19 = v48;
        v5 = v49;
        v4 = v50;
        v3 = v51;
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v5 = 0;
      }
      v62 = 0;
      v53 = 14;
      v54 = v44;
      v55 = v45;
      v52 = &off_1E8188DA0;
      v56 = 0;
      v57 = v13;
      v58 = v19;
      v59 = v5;
      v60 = v4;
      v61 = v3;
      v33 = 1;
      v18 = &off_1E8188DA0;
LABEL_59:
      if ((v65 & 1) != 0)
      {
        v34 = v63;
        v63 = 0;
        if (v34)
          (*((void (**)(uint64_t (**)()))*v34 + 1))(v34);
      }
      if (v33)
      {
        v23 = operator new();
        v24 = (uint64_t (**)())v23;
        v35 = v55;
        *(_OWORD *)(v23 + 16) = v54;
        *(_OWORD *)(v23 + 32) = v35;
        v26 = 14;
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    v39 = *(_OWORD *)(a1 + 16);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(v10, v8, (uint64_t)&v63);
    if ((v65 & 1) != 0)
    {
      v18 = v63;
      v63 = 0;
      if (v18)
        goto LABEL_65;
      v13 = 0;
    }
    else
    {
      v13 = v63;
    }
    *(_QWORD *)&v44 = v10;
    *((_QWORD *)&v44 + 1) = v8;
    v45 = v39;
    v19 = v64;
    v43 = 15;
    v20 = &off_1E8188FC8;
    v42 = &off_1E8188FC8;
    v46 = 0;
    v47 = v13;
    v48 = v64;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    if (a2)
    {
      sub_1C62D5058((uint64_t)&v42, &v41);
      v18 = v41;
      if (v41)
      {
        v30 = 0;
        v62 = -1;
        v52 = v41;
        goto LABEL_49;
      }
      v13 = v47;
      v19 = v48;
      v5 = v49;
      v4 = v50;
      v3 = v51;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
    }
    v62 = 0;
    v53 = 15;
    v54 = v44;
    v55 = v45;
    v52 = &off_1E8188FC8;
    v56 = 0;
    v57 = v13;
    v58 = v19;
    v59 = v5;
    v60 = v4;
    v61 = v3;
    v30 = 1;
    v18 = &off_1E8188FC8;
LABEL_49:
    if ((v65 & 1) != 0)
    {
      v31 = v63;
      v63 = 0;
      if (v31)
        (*((void (**)(uint64_t (**)()))*v31 + 1))(v31);
    }
    if (v30)
    {
      v23 = operator new();
      v24 = (uint64_t (**)())v23;
      v32 = v55;
      *(_OWORD *)(v23 + 16) = v54;
      *(_OWORD *)(v23 + 32) = v32;
      v26 = 15;
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  v9 = 0;
  v10 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v11 = "Insufficient alignment";
LABEL_15:
  v52 = (uint64_t (**)())v11;
  LOWORD(v55) = 259;
  v15 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v17 = qword_1EF8F7238[0];
  *(_QWORD *)v15 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v52, (_QWORD *)(v15 + 8));
  *(_QWORD *)(v15 + 32) = 3;
  *(_QWORD *)(v15 + 40) = v17;
  *(_BYTE *)(v15 + 48) = 1;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v15;
}

void llvm::object::ELFObjectFileBase::getARMFeatures(llvm::object::ELFObjectFileBase *this@<X0>, unint64_t *a2@<X8>)
{
  char *v4;
  __int128 v5;
  uint64_t *v6;
  _BOOL4 v7;
  uint64_t *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t *v15;
  char *v16;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  char *v21;
  int v22;
  uint64_t *v23;
  int v24;
  char *v25;
  unint64_t v26;
  int v27;
  uint64_t *v28;
  int v29;
  int v30;
  char *v31;
  void **v32[3];
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  unint64_t v48;
  char *v49;
  char *v50;

  v47 = 0uLL;
  v48 = 0;
  llvm::SubtargetFeatures::Split((unint64_t *)&v47, (uint64_t)"", 0);
  v32[2] = (void **)5;
  v33 = 0u;
  v34 = 0u;
  v35 = 1065353216;
  v38 = 1065353216;
  v36 = 0u;
  v37 = 0u;
  v39 = 0;
  v40 = &unk_1E819D268;
  v42 = 0;
  v43 = 0;
  v41 = 52;
  v44 = 1;
  v45 = 0;
  v46 = 0;
  v32[0] = (void **)&unk_1E819DBA0;
  v32[1] = (void **)"aeabi";
  (*(void (**)(char **__return_ptr, llvm::object::ELFObjectFileBase *, void ***))(*(_QWORD *)this + 496))(&v31, this, v32);
  v4 = v31;
  if (!v31)
  {
    v5 = v33;
    v6 = sub_1C62CD7FC(v33, *((unint64_t *)&v33 + 1), 6u);
    if (v6)
      v7 = *((_DWORD *)v6 + 5) == 10;
    else
      v7 = 0;
    v8 = sub_1C62CD7FC(v5, *((unint64_t *)&v5 + 1), 7u);
    if (v8)
    {
      v9 = *((_DWORD *)v8 + 5);
      if (v9 == 65)
      {
        v10 = "aclass";
        v11 = 6;
      }
      else
      {
        if (v9 == 77)
        {
          llvm::SubtargetFeatures::AddFeature(&v47, "mclass", 6uLL, 1);
          if (!v7)
            goto LABEL_19;
        }
        else
        {
          if (v9 != 82)
            goto LABEL_19;
          llvm::SubtargetFeatures::AddFeature(&v47, "rclass", 6uLL, 1);
          if (!v7)
            goto LABEL_19;
        }
        v10 = "hwdiv";
        v11 = 5;
      }
      llvm::SubtargetFeatures::AddFeature(&v47, v10, v11, 1);
    }
LABEL_19:
    v12 = sub_1C62CD7FC(v33, *((unint64_t *)&v33 + 1), 9u);
    if (!v12)
      goto LABEL_25;
    v13 = *((_DWORD *)v12 + 5);
    if (v13 == 2)
    {
      v14 = 1;
    }
    else
    {
      if (v13)
        goto LABEL_25;
      llvm::SubtargetFeatures::AddFeature(&v47, "thumb", 5uLL, 0);
      v14 = 0;
    }
    llvm::SubtargetFeatures::AddFeature(&v47, "thumb2", 6uLL, v14);
LABEL_25:
    v15 = sub_1C62CD7FC(v33, *((unint64_t *)&v33 + 1), 0xAu);
    if (v15)
    {
      switch(*((_DWORD *)v15 + 5))
      {
        case 0:
          llvm::SubtargetFeatures::AddFeature(&v47, "vfp2sp", 6uLL, 0);
          llvm::SubtargetFeatures::AddFeature(&v47, "vfp3d16sp", 9uLL, 0);
          v16 = "vfp4d16sp";
          v17 = 9;
          v18 = 0;
          goto LABEL_32;
        case 2:
          v16 = "vfp2";
          goto LABEL_31;
        case 3:
        case 4:
          v16 = "vfp3";
          goto LABEL_31;
        case 5:
        case 6:
          v16 = "vfp4";
LABEL_31:
          v17 = 4;
          v18 = 1;
LABEL_32:
          llvm::SubtargetFeatures::AddFeature(&v47, v16, v17, v18);
          break;
        default:
          break;
      }
    }
    v19 = sub_1C62CD7FC(v33, *((unint64_t *)&v33 + 1), 0xCu);
    if (!v19)
    {
LABEL_42:
      v23 = sub_1C62CD7FC(v33, *((unint64_t *)&v33 + 1), 0x30u);
      if (!v23)
        goto LABEL_51;
      v24 = *((_DWORD *)v23 + 5);
      if (v24 == 2)
      {
        v25 = "mve.fp";
        v26 = 6;
      }
      else
      {
        if (v24 != 1)
        {
          if (v24)
            goto LABEL_51;
          llvm::SubtargetFeatures::AddFeature(&v47, "mve", 3uLL, 0);
          v25 = "mve.fp";
          v26 = 6;
          v27 = 0;
LABEL_50:
          llvm::SubtargetFeatures::AddFeature(&v47, v25, v26, v27);
LABEL_51:
          v28 = sub_1C62CD7FC(v33, *((unint64_t *)&v33 + 1), 0x2Cu);
          if (v28)
          {
            v29 = *((_DWORD *)v28 + 5);
            if (v29 == 1)
            {
              v30 = 0;
              goto LABEL_56;
            }
            if (v29 == 2)
            {
              v30 = 1;
LABEL_56:
              llvm::SubtargetFeatures::AddFeature(&v47, "hwdiv", 5uLL, v30);
              llvm::SubtargetFeatures::AddFeature(&v47, "hwdiv-arm", 9uLL, v30);
            }
          }
          *(int64x2_t *)a2 = v47;
          a2[2] = v48;
          v48 = 0;
          v47 = 0uLL;
          goto LABEL_58;
        }
        llvm::SubtargetFeatures::AddFeature(&v47, "mve.fp", 6uLL, 0);
        v25 = "mve";
        v26 = 3;
      }
      v27 = 1;
      goto LABEL_50;
    }
    v20 = *((_DWORD *)v19 + 5);
    if (v20 == 2)
    {
      llvm::SubtargetFeatures::AddFeature(&v47, "neon", 4uLL, 1);
      v21 = "fp16";
    }
    else
    {
      if (v20 != 1)
      {
        if (v20)
          goto LABEL_42;
        llvm::SubtargetFeatures::AddFeature(&v47, "neon", 4uLL, 0);
        v21 = "fp16";
        v22 = 0;
        goto LABEL_41;
      }
      v21 = "neon";
    }
    v22 = 1;
LABEL_41:
    llvm::SubtargetFeatures::AddFeature(&v47, v21, 4uLL, v22);
    goto LABEL_42;
  }
  v31 = 0;
  v49 = v4;
  sub_1C4D62BD4(&v49, &v50);
  if (v49)
    (*(void (**)(char *))(*(_QWORD *)v49 + 8))(v49);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  llvm::SubtargetFeatures::Split(a2, (uint64_t)"", 0);
  if (v31)
    (*(void (**)(char *))(*(_QWORD *)v31 + 8))(v31);
LABEL_58:
  sub_1C62CD8A8(v32);
  v32[0] = (void **)&v47;
  sub_1C4765410(v32);
}

_QWORD *llvm::object::ELFObjectFileBase::getRISCVFeatures@<X0>(llvm::object::ELFObjectFileBase *this@<X0>, int64x2_t *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  char *v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int64x2_t *v10;
  char *v11;
  int v12;
  unint64_t v13;
  int v14;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v20;
  _QWORD v21[3];
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;

  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  llvm::SubtargetFeatures::Split((unint64_t *)a2, (uint64_t)"", 0);
  if (((*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 512))(this) & 1) != 0)
    llvm::SubtargetFeatures::AddFeature(a2, "c", 1uLL, 1);
  v21[2] = 5;
  v22 = 0u;
  v23 = 0u;
  v24 = 1065353216;
  v27 = 1065353216;
  v25 = 0u;
  v26 = 0u;
  v28 = 0;
  v29 = &unk_1E81A1C58;
  v31 = 0;
  v32 = 0;
  v30 = 6;
  v33 = 1;
  v34 = 0;
  v35 = 0;
  v21[0] = &unk_1E81A1D88;
  v21[1] = "riscv";
  (*(void (**)(char **__return_ptr, llvm::object::ELFObjectFileBase *, _QWORD *))(*(_QWORD *)this + 496))(&v20, this, v21);
  v4 = v20;
  if (v20)
  {
    v20 = 0;
    v36 = v4;
    sub_1C4D62BD4(&v36, &v37);
    if (v36)
      (*(void (**)(char *))(*(_QWORD *)v36 + 8))(v36);
    if (v20)
      (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
    return sub_1C62CD8A8(v21);
  }
  v5 = sub_1C62CD7FC(v25, *((unint64_t *)&v25 + 1), 5u);
  if (!v5)
    return sub_1C62CD8A8(v21);
  v6 = (char *)v5[3];
  v7 = v5[4];
  if (v7 >= 4)
  {
    v8 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 842233458 || *(_DWORD *)v6 == 875984498)
    {
      v6 += 4;
      llvm::SubtargetFeatures::AddFeature(a2, "64bit", 5uLL, v8 != 842233458);
      v7 -= 4;
      goto LABEL_9;
    }
    while (1)
    {
LABEL_10:
      v9 = *v6 - 97;
      if (v9 > 0xC)
        goto LABEL_14;
      if (((1 << v9) & 0x1035) != 0)
        goto LABEL_12;
      if (*v6 == 100)
        break;
      if (*v6 == 105)
      {
        v10 = a2;
        v11 = "e";
        v12 = 0;
        goto LABEL_13;
      }
LABEL_14:
      v13 = 0;
      while (1)
      {
        v14 = v6[v13];
        if (v14 == 95 || v14 == 0)
          break;
        if (v7 == ++v13)
        {
          v13 = -1;
          break;
        }
      }
      if (v7 < v13)
        v13 = v7;
      v16 = &v6[v13];
      v17 = v7 - v13;
      if (v17)
      {
        v18 = 0;
        while (v16[v18] == 95)
        {
          if (v17 == ++v18)
            goto LABEL_27;
        }
      }
      else
      {
LABEL_27:
        v18 = -1;
      }
      if (v17 < v18)
        v18 = v17;
      v6 = &v16[v18];
      v7 = v17 - v18;
      if (v17 == v18)
        return sub_1C62CD8A8(v21);
    }
    llvm::SubtargetFeatures::AddFeature(a2, "f", 1uLL, 1);
LABEL_12:
    v10 = a2;
    v11 = v6;
    v12 = 1;
LABEL_13:
    llvm::SubtargetFeatures::AddFeature(v10, v11, 1uLL, v12);
    goto LABEL_14;
  }
LABEL_9:
  if (v7)
    goto LABEL_10;
  return sub_1C62CD8A8(v21);
}

_QWORD *llvm::object::ELFObjectFileBase::setARMSubArch(_QWORD *this, llvm::Triple *a2)
{
  _QWORD *v3;
  char *v4;
  const char *v5;
  __int128 v6;
  uint64_t *v7;
  const std::string::value_type *v8;
  uint64_t *v9;
  unsigned int v10;
  std::string *v11;
  uint64_t size;
  std::string v13;
  char *v14;
  _QWORD v15[3];
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  if (!*((_DWORD *)a2 + 7))
  {
    v3 = this;
    v15[2] = 5;
    v16 = 0u;
    v17 = 0u;
    v18 = 1065353216;
    v21 = 1065353216;
    v19 = 0u;
    v20 = 0u;
    v22 = 0;
    v23 = &unk_1E819D268;
    v25 = 0;
    v26 = 0;
    v24 = 52;
    v27 = 1;
    v28 = 0;
    v29 = 0;
    v15[0] = &unk_1E819DBA0;
    v15[1] = "aeabi";
    (*(void (**)(char **__return_ptr, _QWORD *, _QWORD *))(*this + 496))(&v14, this, v15);
    v4 = v14;
    if (v14)
    {
      v14 = 0;
      v30 = v4;
      sub_1C4D62BD4(&v30, &v13.__r_.__value_.__l.__data_);
      if (v30)
        (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
      if (v14)
        (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
    }
    else
    {
      memset(&v13, 0, sizeof(v13));
      if ((*((_DWORD *)a2 + 6) - 39) >= 2)
        v5 = "arm";
      else
        v5 = "thumb";
      MEMORY[0x1CAA32ABC](&v13, v5);
      v6 = v16;
      v7 = sub_1C62CD7FC(v16, *((unint64_t *)&v16 + 1), 6u);
      if (v7)
      {
        v8 = "v4";
        switch(*((_DWORD *)v7 + 5))
        {
          case 1:
            goto LABEL_32;
          case 2:
            v8 = "v4t";
            goto LABEL_32;
          case 3:
            v8 = "v5t";
            goto LABEL_32;
          case 4:
            v8 = "v5te";
            goto LABEL_32;
          case 5:
            v8 = "v5tej";
            goto LABEL_32;
          case 6:
            v8 = "v6";
            goto LABEL_32;
          case 7:
            v8 = "v6kz";
            goto LABEL_32;
          case 8:
            v8 = "v6t2";
            goto LABEL_32;
          case 9:
            v8 = "v6k";
            goto LABEL_32;
          case 0xA:
            v9 = sub_1C62CD7FC(v6, *((unint64_t *)&v6 + 1), 7u);
            if (v9 && *((_DWORD *)v9 + 5) == 77)
              v8 = "v7m";
            else
              v8 = "v7";
            goto LABEL_32;
          case 0xB:
            v8 = "v6m";
            goto LABEL_32;
          case 0xC:
            v8 = "v6sm";
            goto LABEL_32;
          case 0xD:
            v8 = "v7em";
            goto LABEL_32;
          case 0xE:
            v8 = "v8a";
            goto LABEL_32;
          case 0xF:
            v8 = "v8r";
            goto LABEL_32;
          case 0x10:
            v8 = "v8m.base";
            goto LABEL_32;
          case 0x11:
            v8 = "v8m.main";
            goto LABEL_32;
          case 0x15:
            v8 = "v8.1m.main";
LABEL_32:
            std::string::append(&v13, v8);
            break;
          default:
            break;
        }
      }
      v10 = *((_DWORD *)v3 + 2);
      if (v10 <= 0x13 && ((1 << v10) & 0xAAC00) != 0)
        std::string::append(&v13, "eb");
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v13;
      else
        v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v13.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v13.__r_.__value_.__l.__size_;
      llvm::Triple::setArchName(a2, v11, size);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    return sub_1C62CD8A8(v15);
  }
  return this;
}

void llvm::object::ELFObjectFileBase::getPltAddresses(llvm::object::ELFObjectFileBase *this@<X0>, void **a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  char *v22;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  BOOL v37;
  int v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  void *__p[2];
  char v81;
  int v82;
  void *v83[2];
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v83[0] = 0;
  v83[1] = 0;
  v84 = 0;
  llvm::object::ObjectFile::makeTriple(this, (llvm::Triple *)__p);
  v4 = llvm::TargetRegistry::lookupTarget((std::string::size_type)__p, (uint64_t)v83);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  if ((v82 - 41) < 2)
  {
    v6 = 7;
    goto LABEL_7;
  }
  if ((v82 - 3) > 1)
  {
LABEL_5:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_64;
  }
  v6 = 1026;
LABEL_7:
  v7 = (uint64_t (*)(void))v4[8];
  if (v7)
    v8 = v7();
  else
    v8 = 0;
  v9 = (uint64_t (*)(uint64_t))v5[9];
  if (!v9 || (v10 = v9(v8)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v8)
      goto LABEL_64;
    goto LABEL_63;
  }
  v11 = v10;
  v74 = v6;
  v12 = (char *)(*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 344))(this);
  v14 = v13;
  v15 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 352))(this);
  v77 = (unint64_t)v12;
  v78 = v14;
  if (v14 == v16 && v12 == (char *)v15)
  {
LABEL_69:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_70;
  }
  v18 = (char *)v15;
  v19 = v16;
  v20 = 0;
  v21 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  do
  {
    (*(void (**)(char **__return_ptr, uint64_t, char *))(*(_QWORD *)v14 + 136))(&v86, v14, v12);
    if ((v88 & 1) != 0)
    {
      v85 = v86;
      v86 = 0;
      sub_1C4D62BD4(&v85, &v75);
      if (v85)
        (*(void (**)(char *))(*(_QWORD *)v85 + 8))(v85);
      if ((v88 & 1) != 0)
      {
        v22 = v86;
        v86 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
    }
    else if (v87 == (char *)9)
    {
      if (*(_QWORD *)v86 == 0x6C702E616C65722ELL && v86[8] == 116)
      {
LABEL_36:
        v20 = v77;
        v72 = v77 >> 8;
        v73 = v78;
        v21 = 1;
      }
    }
    else if (v87 == (char *)8)
    {
      if (*(_QWORD *)v86 == 0x746C702E6C65722ELL)
        goto LABEL_36;
      if (*(_QWORD *)v86 == 0x746C702E746F672ELL)
      {
        v67 = v77;
        v63 = v77 >> 8;
        v64 = v78;
        v68 = 1;
      }
    }
    else if (v87 == (char *)4 && *(_DWORD *)v86 == 1953263662)
    {
      v69 = v77;
      v65 = v77 >> 8;
      v66 = v78;
      v70 = 1;
    }
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v78 + 128))(v78, &v77);
    v12 = (char *)v77;
    v14 = v78;
  }
  while (v78 != v19 || (char *)v77 != v18);
  if (!v70 || !v21 || !v68)
    goto LABEL_69;
  (*(void (**)(char **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v66 + 168))(&v86, v66, v69 | (v65 << 8));
  v24 = v86;
  v71 = v11;
  if ((v88 & 1) != 0)
  {
    v77 = (unint64_t)v86;
    sub_1C4D62BD4((char **)&v77, &v86);
    if (v77)
      (*(void (**)(unint64_t))(*(_QWORD *)v77 + 8))(v77);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v25 = v87;
    v26 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v66 + 144))(v66, v69 | (v65 << 8));
    v27 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 144))(v64, v67 | (v63 << 8));
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t, char *, char *, uint64_t, void **))(*(_QWORD *)v11 + 128))(&v86, v11, v26, v24, v25, v27, __p);
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v28 = v86;
    v29 = v87;
    if (v86 != v87)
    {
      while (1)
      {
        v31 = *(_QWORD *)v28;
        v30 = (char *)*((_QWORD *)v28 + 1);
        v75 = v30;
        v76 = v31;
        if (!v79)
          break;
        v32 = (v79 - 1) & (37 * (_DWORD)v30);
        v33 = (char *)(v77 + 16 * v32);
        v34 = *(_QWORD *)v33;
        if (v30 != *(char **)v33)
        {
          v35 = 0;
          v36 = 1;
          while (v34 != -1)
          {
            if (v35)
              v37 = 0;
            else
              v37 = v34 == -2;
            if (v37)
              v35 = v33;
            v38 = v32 + v36++;
            v32 = v38 & (v79 - 1);
            v33 = (char *)(v77 + 16 * v32);
            v34 = *(_QWORD *)v33;
            if (v30 == *(char **)v33)
              goto LABEL_57;
          }
          if (v35)
            v39 = v35;
          else
            v39 = v33;
          goto LABEL_56;
        }
LABEL_57:
        v28 += 16;
        if (v28 == v29)
          goto LABEL_72;
      }
      v39 = 0;
LABEL_56:
      v40 = sub_1C54BFB8C((uint64_t)&v77, (uint64_t)&v75, (uint64_t *)&v75, v39);
      *v40 = v75;
      v40[1] = v76;
      goto LABEL_57;
    }
LABEL_72:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v41 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 264))(v73, v20 | (v72 << 8));
    v43 = v42;
    v44 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 272))(v73, v20 | (v72 << 8));
    v75 = v41;
    v76 = v43;
    v45 = v74;
    if (v41 != (char *)v44)
    {
      v46 = (char *)v44;
      v48 = (char *)a2[1];
      v47 = (char *)a2[2];
      v49 = *a2;
      while (2)
      {
        if ((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v76 + 312))(v76, v41) != v45)
          goto LABEL_109;
        v85 = (char *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v76 + 296))(v76, v75);
        v50 = sub_1C5309DE0((uint64_t *)&v77, &v85);
        if ((uint64_t *)(v77 + 16 * v79) == v50)
          goto LABEL_109;
        v51 = v50;
        v52 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v76 + 304))(v76, v75);
        if (v52 == (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 56))(this))
        {
          if (v48 < v47)
          {
            *v48 = 0;
            v48[8] = 0;
            goto LABEL_81;
          }
          v53 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 3) + 1;
          if (v53 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_112;
          if (0x5555555555555556 * ((v47 - v49) >> 3) > v53)
            v53 = 0x5555555555555556 * ((v47 - v49) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v47 - v49) >> 3) >= 0x555555555555555)
            v53 = 0xAAAAAAAAAAAAAAALL;
          if (v53 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_113;
          v54 = 3 * v53;
          v55 = (char *)operator new(24 * v53);
          v56 = &v55[8 * ((v48 - v49) >> 3)];
          *v56 = 0;
          v56[8] = 0;
          *((_QWORD *)v56 + 2) = v51[1];
          if (v48 != v49)
          {
            v57 = &v55[8 * ((v48 - v49) >> 3)];
            v45 = v74;
            do
            {
              v58 = v57 - 24;
              v59 = *(_OWORD *)(v48 - 24);
              *((_QWORD *)v57 - 1) = *((_QWORD *)v48 - 1);
              *(_OWORD *)(v57 - 24) = v59;
              v48 -= 24;
              v57 -= 24;
            }
            while (v48 != v49);
            goto LABEL_105;
          }
          v58 = &v55[8 * ((v48 - v49) >> 3)];
LABEL_104:
          v45 = v74;
          goto LABEL_105;
        }
        if (v48 >= v47)
        {
          v60 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 3) + 1;
          if (v60 > 0xAAAAAAAAAAAAAAALL)
LABEL_112:
            abort();
          if (0x5555555555555556 * ((v47 - v49) >> 3) > v60)
            v60 = 0x5555555555555556 * ((v47 - v49) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v47 - v49) >> 3) >= 0x555555555555555)
            v60 = 0xAAAAAAAAAAAAAAALL;
          if (v60 > 0xAAAAAAAAAAAAAAALL)
LABEL_113:
            sub_1C4764EE4();
          v54 = 3 * v60;
          v55 = (char *)operator new(24 * v60);
          v56 = &v55[8 * ((v48 - v49) >> 3)];
          *(_QWORD *)v56 = v52;
          v56[8] = 1;
          *((_QWORD *)v56 + 2) = v51[1];
          if (v48 == v49)
          {
            v58 = &v55[8 * ((v48 - v49) >> 3)];
            v11 = v71;
            goto LABEL_104;
          }
          v61 = &v55[8 * ((v48 - v49) >> 3)];
          v11 = v71;
          v45 = v74;
          do
          {
            v58 = v61 - 24;
            v62 = *(_OWORD *)(v48 - 24);
            *((_QWORD *)v61 - 1) = *((_QWORD *)v48 - 1);
            *(_OWORD *)(v61 - 24) = v62;
            v48 -= 24;
            v61 -= 24;
          }
          while (v48 != v49);
LABEL_105:
          v47 = &v55[8 * v54];
          v48 = v56 + 24;
          *a2 = v58;
          a2[1] = v56 + 24;
          a2[2] = v47;
          if (v49)
            operator delete(v49);
          v49 = v58;
        }
        else
        {
          *(_QWORD *)v48 = v52;
          v48[8] = 1;
LABEL_81:
          *((_QWORD *)v48 + 2) = v51[1];
          v48 += 24;
          v45 = v74;
        }
        a2[1] = v48;
LABEL_109:
        (*(void (**)(uint64_t, char **))(*(_QWORD *)v76 + 288))(v76, &v75);
        v41 = v75;
        if (v75 == v46)
          break;
        continue;
      }
    }
    MEMORY[0x1CAA32FB4](v77, 8);
    if (v86)
    {
      v87 = v86;
      operator delete(v86);
    }
  }
LABEL_70:
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v8)
LABEL_63:
    MEMORY[0x1CAA32FC0](v8, 0x10F0C40CB53E019);
LABEL_64:
  if (v81 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v84) < 0)
    operator delete(v83[0]);
}

void llvm::object::ELFObjectFileBase::readDynsymVersions(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  llvm::object::ELFObjectFileBase *v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  char v18;
  char *v19;
  int64x2_t v20;
  unsigned int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  llvm::object::ELFObjectFileBase *v26;
  _QWORD *v27;
  uint64_t v28;
  const void *v29;
  std::string::size_type v30;
  __int128 *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  char v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  int64x2_t v46;
  int v47;
  std::string::size_type v48;
  std::string::size_type v49;
  char *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  void **v56;
  uint64_t v57;
  unint64_t v59;
  std::string *v60;
  uint64_t v61;
  std::string *v62;
  char *v63;
  char v64;
  char v65;
  void **v66;
  uint64_t v67;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  int *v79;
  int *v80;
  unsigned int v81;
  std::string::size_type v82;
  std::string::size_type v83;
  uint64_t v84;
  uint64_t v85;
  llvm::object::ELFObjectFileBase *v86;
  _QWORD *v87;
  uint64_t v88;
  const void *v89;
  std::string::size_type size;
  __int128 *v91;
  std::string::size_type v92;
  std::string::size_type v93;
  char v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  __int128 v105;
  int64x2_t v106;
  int v107;
  std::string::size_type v108;
  std::string::size_type v109;
  char *v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  void **v116;
  uint64_t v117;
  unint64_t v119;
  std::string *p_p_p;
  uint64_t v121;
  std::string *v122;
  char *v123;
  char v124;
  char v125;
  void **v126;
  uint64_t v127;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  int v138;
  int *v139;
  int *v140;
  unsigned int v141;
  std::string::size_type v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const void *v147;
  std::string::size_type v148;
  __int128 *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  char v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  __int128 v163;
  int64x2_t v164;
  int v165;
  std::string::size_type v166;
  std::string::size_type v167;
  char *v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  void **v174;
  uint64_t v175;
  unint64_t v177;
  std::string *v178;
  uint64_t v179;
  std::string *v180;
  char *v181;
  char v182;
  char v183;
  void **v184;
  uint64_t v185;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int *v195;
  int v196;
  int *v197;
  int *v198;
  unsigned int v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  const void *v206;
  std::string::size_type v207;
  __int128 *v208;
  std::string::size_type v209;
  std::string::size_type v210;
  char v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  __int128 v222;
  int64x2_t v223;
  int v224;
  std::string::size_type v225;
  std::string::size_type v226;
  char *v227;
  char v228;
  char v229;
  char v230;
  char v231;
  char v232;
  void **v233;
  uint64_t v234;
  unint64_t v236;
  std::string *v237;
  uint64_t v238;
  std::string *v239;
  char *v240;
  char v241;
  char v242;
  void **v243;
  uint64_t v244;
  unint64_t v246;
  char *v247;
  char *v248;
  std::string *v249;
  std::string::size_type v250;
  std::string *v251;
  std::string::size_type v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v256;
  uint64_t v257;
  void *v258;
  std::string *v259;
  std::string::size_type v260;
  std::string *v261;
  std::string::size_type v262;
  uint64_t v263;
  unint64_t v265;
  void *v266;
  std::string *v267;
  std::string::size_type v268;
  std::string *v269;
  std::string::size_type v270;
  const char *v271;
  const char *v272;
  std::string *v273;
  std::string::size_type v274;
  std::string *v275;
  std::string::size_type v276;
  const char *v277;
  const char *v278;
  std::string *v279;
  std::string::size_type v280;
  std::string *v281;
  std::string::size_type v282;
  unint64_t v284;
  std::string *v285;
  std::string::size_type v286;
  std::string *v287;
  std::string::size_type v288;
  unint64_t v290;
  std::string *v291;
  std::string::size_type v292;
  std::string *v293;
  std::string::size_type v294;
  unint64_t v296;
  std::string *v297;
  std::string::size_type v298;
  std::string *v299;
  std::string::size_type v300;
  unint64_t v302;
  unint64_t v304;
  std::string *v305;
  unint64_t v307;
  char v308;
  char v309;
  char v310;
  char v311;
  uint64_t v312;
  std::string *v313;
  uint64_t v314;
  unint64_t v316;
  char *v317;
  std::string *v318;
  std::string::size_type v319;
  std::string *v320;
  std::string::size_type v321;
  unint64_t v323;
  void *v324;
  std::string *v325;
  std::string::size_type v326;
  std::string *v327;
  std::string::size_type v328;
  uint64_t v329;
  unint64_t v331;
  void *v332;
  std::string *v333;
  std::string::size_type v334;
  std::string *v335;
  std::string::size_type v336;
  const char *v337;
  std::string *v338;
  std::string::size_type v339;
  std::string *v340;
  std::string::size_type v341;
  const char *v342;
  std::string *v343;
  std::string::size_type v344;
  std::string *v345;
  std::string::size_type v346;
  unint64_t v348;
  std::string *v349;
  std::string::size_type v350;
  std::string *v351;
  std::string::size_type v352;
  unint64_t v354;
  std::string *v355;
  std::string::size_type v356;
  std::string *v357;
  std::string::size_type v358;
  unint64_t v360;
  std::string *v361;
  std::string::size_type v362;
  std::string *v363;
  std::string::size_type v364;
  unint64_t v366;
  uint64_t v367;
  std::string *v368;
  char v369;
  char v370;
  char v371;
  char v372;
  uint64_t v373;
  std::string *v374;
  uint64_t v375;
  unint64_t v377;
  unint64_t v379;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  _QWORD *v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  char *v391;
  __int128 v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int64x2_t v397;
  char *v398;
  uint64_t v399;
  std::string v400;
  std::string v401;
  __int16 v402;
  std::string v403;
  std::string __p;
  __int16 v405;
  std::string::size_type v406;
  std::string *p_p;
  std::string::size_type v408;
  __int128 v409;
  __int16 v410;
  int data;
  __int16 v412;
  __int128 __dst;
  const char *v414;
  __int16 v415;
  std::string *p_dst;
  int64x2_t v417;
  char *v418;
  char **v419;
  char *v420[2];
  char v421;
  uint64_t v422;
  uint64_t v423;
  std::string v424;
  std::string v425;
  __int16 v426;
  uint64_t v427;

  v3 = this;
  v427 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 504))(&v387);
  v5 = *((_DWORD *)v3 + 2);
  v6 = (_QWORD *)((char *)v3 + 56);
  if (v5 == 12)
  {
    v70 = v387;
    v71 = v388;
    v72 = v389;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)v3 + 7, (uint64_t)&v422);
    if (!v423)
      goto LABEL_428;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 40 * v423;
    v77 = (int *)(v422 + 4);
    do
    {
      v78 = *v77;
      if (*v77 == 1879048190)
        v79 = v77 - 1;
      else
        v79 = (int *)v74;
      if (v78 == 1879048189)
        v80 = v77 - 1;
      else
        v80 = (int *)v75;
      if (v78 == 1879048189)
        v79 = (int *)v74;
      if (v78 == 1879048191)
      {
        v73 = (unsigned int *)(v77 - 1);
      }
      else
      {
        v75 = (uint64_t)v80;
        v74 = (uint64_t)v79;
      }
      v77 += 10;
      v76 -= 40;
    }
    while (v76);
    if (!v73)
      goto LABEL_428;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::loadVersionMap((_QWORD *)v3 + 7, v74, v75, (uint64_t)v420);
    v18 = v421;
    if ((v421 & 1) != 0)
      goto LABEL_429;
    v19 = 0;
    v398 = 0;
    v20 = 0uLL;
    v397 = 0u;
    v395 = v71;
    v396 = 0;
    v394 = v70;
    if (v70 == v72)
      goto LABEL_432;
    v382 = a2;
    while (1)
    {
      v81 = ++v396;
      if (v73[9] != 2)
      {
        sub_1C59A4F58(v6, (uint64_t)v73, (char *)&v425);
        v259 = std::string::insert(&v425, 0, "section ");
        v260 = v259->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v260;
        v259->__r_.__value_.__l.__size_ = 0;
        v259->__r_.__value_.__r.__words[2] = 0;
        v259->__r_.__value_.__r.__words[0] = 0;
        v261 = std::string::append(&v401, " has invalid sh_entsize: expected ");
        v262 = v261->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v262;
        v261->__r_.__value_.__l.__size_ = 0;
        v261->__r_.__value_.__r.__words[2] = 0;
        v261->__r_.__value_.__r.__words[0] = 0;
        v403.__r_.__value_.__r.__words[0] = 2;
        p_p = &__p;
        *(_QWORD *)&v409 = &v403;
        v410 = 2564;
        *(_QWORD *)&__dst = &p_p;
        v414 = ", but got ";
        v415 = 770;
        v263 = v73[9];
        p_dst = (std::string *)&__dst;
        v417.i64[1] = v263;
        LOWORD(v419) = 2050;
        v254 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v265 = qword_1EF8F7238[0];
        *(_QWORD *)v254 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
        *(_QWORD *)(v254 + 32) = 3;
        *(_QWORD *)(v254 + 40) = v265;
        *(_BYTE *)(v254 + 48) = 1;
        v257 = v382;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v401.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v425.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_498;
        v266 = (void *)v425.__r_.__value_.__r.__words[0];
        goto LABEL_490;
      }
      v82 = v73[5];
      if ((v82 & 1) != 0)
      {
        sub_1C59A4F58(v6, (uint64_t)v73, (char *)&v403);
        v273 = std::string::insert(&v403, 0, "section ");
        v274 = v273->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
        v425.__r_.__value_.__r.__words[2] = v274;
        v273->__r_.__value_.__l.__size_ = 0;
        v273->__r_.__value_.__r.__words[2] = 0;
        v273->__r_.__value_.__r.__words[0] = 0;
        v275 = std::string::append(&v425, " has an invalid sh_size (");
        v276 = v275->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v276;
        v275->__r_.__value_.__l.__size_ = 0;
        v275->__r_.__value_.__r.__words[2] = 0;
        v275->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = v82;
        v405 = 2052;
        p_p = &__p;
        *(_QWORD *)&v409 = ") which is not a multiple of its sh_entsize (";
        v410 = 770;
        v277 = (const char *)v73[9];
        *(_QWORD *)&__dst = &p_p;
        v414 = v277;
        v415 = 2050;
        v278 = ")";
        goto LABEL_456;
      }
      v83 = v73[4];
      if (__CFADD__((_DWORD)v83, (_DWORD)v82))
      {
        sub_1C59A4F58(v6, (uint64_t)v73, (char *)&v403);
        v279 = std::string::insert(&v403, 0, "section ");
        v280 = v279->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
        v425.__r_.__value_.__r.__words[2] = v280;
        v279->__r_.__value_.__l.__size_ = 0;
        v279->__r_.__value_.__r.__words[2] = 0;
        v279->__r_.__value_.__r.__words[0] = 0;
        v281 = std::string::append(&v425, " has a sh_offset (0x");
        v282 = v281->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v282;
        v281->__r_.__value_.__l.__size_ = 0;
        v281->__r_.__value_.__r.__words[2] = 0;
        v281->__r_.__value_.__r.__words[0] = 0;
        v400.__r_.__value_.__r.__words[0] = v83;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v400;
        v405 = 3588;
        p_p = &__p;
        *(_QWORD *)&v409 = ") + sh_size (0x";
        v410 = 770;
        v424.__r_.__value_.__r.__words[0] = v82;
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v424;
        v415 = 3586;
        v278 = ") that cannot be represented";
LABEL_456:
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)v278;
        LOWORD(v419) = 770;
        v254 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v284 = qword_1EF8F7238[0];
        *(_QWORD *)v254 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
        *(_QWORD *)(v254 + 32) = 3;
        *(_QWORD *)(v254 + 40) = v284;
        *(_BYTE *)(v254 + 48) = 1;
        v257 = v382;
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v401.__r_.__value_.__l.__data_);
        if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v425.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v403.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_498;
        v266 = (void *)v403.__r_.__value_.__r.__words[0];
LABEL_490:
        operator delete(v266);
LABEL_498:
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to read an entry with index ";
        v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
        v402 = 2563;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" from ";
        v405 = 770;
        v305 = &v425;
        sub_1C59A3508(&v425, v6, (uint64_t)v73);
        goto LABEL_499;
      }
      if (*((_QWORD *)v3 + 8) < (unint64_t)(v82 + v83))
      {
        sub_1C59A4F58(v6, (uint64_t)v73, (char *)&v424);
        v297 = std::string::insert(&v424, 0, "section ");
        v298 = v297->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v400.__r_.__value_.__l.__data_ = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
        v400.__r_.__value_.__r.__words[2] = v298;
        v297->__r_.__value_.__l.__size_ = 0;
        v297->__r_.__value_.__r.__words[2] = 0;
        v297->__r_.__value_.__r.__words[0] = 0;
        v299 = std::string::append(&v400, " has a sh_offset (0x");
        v300 = v299->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v300;
        v299->__r_.__value_.__l.__size_ = 0;
        v299->__r_.__value_.__r.__words[2] = 0;
        v299->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)&v392 = v83;
        v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403;
        v425.__r_.__value_.__r.__words[2] = (std::string::size_type)&v392;
        v426 = 3588;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
        v401.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v402 = 770;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v406;
        v405 = 3586;
        v406 = v82;
        p_p = &__p;
        *(_QWORD *)&v409 = ") that is greater than the file size (0x";
        v410 = 770;
        v399 = *((_QWORD *)v3 + 8);
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v399;
        v415 = 3586;
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)")";
        LOWORD(v419) = 770;
        v254 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v302 = qword_1EF8F7238[0];
        *(_QWORD *)v254 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
        *(_QWORD *)(v254 + 32) = 3;
        *(_QWORD *)(v254 + 40) = v302;
        *(_BYTE *)(v254 + 48) = 1;
        v257 = v382;
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v400.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v424.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_498;
        v266 = (void *)v424.__r_.__value_.__r.__words[0];
        goto LABEL_490;
      }
      v84 = v81;
      if (v81 >= v82 >> 1)
      {
        v401.__r_.__value_.__r.__words[0] = 2 * v81;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"can't read an entry at 0x";
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v401;
        v405 = 3587;
        p_p = &__p;
        *(_QWORD *)&v409 = ": it goes past the end of the section (0x";
        v410 = 770;
        v425.__r_.__value_.__r.__words[0] = v82;
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v425;
        v415 = 3586;
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)")";
        LOWORD(v419) = 770;
        v254 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v307 = qword_1EF8F7238[0];
        *(_QWORD *)v254 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
        *(_QWORD *)(v254 + 32) = 3;
        *(_QWORD *)(v254 + 40) = v307;
        *(_BYTE *)(v254 + 48) = 1;
        v257 = v382;
        goto LABEL_498;
      }
      v85 = *v6;
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v395 + 40))(&v424, v395, v394);
      if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        p_p = (std::string *)"unable to read flags for symbol with index ";
        *(_QWORD *)&v409 = &v396;
        v410 = 2563;
        *(_QWORD *)&__dst = &p_p;
        v414 = ": ";
        v415 = 770;
        v110 = (char *)v424.__r_.__value_.__r.__words[0];
        v424.__r_.__value_.__r.__words[0] = 0;
        v391 = v110;
        sub_1C61D2548(&v391, &__p);
        v111 = v415;
        if ((_BYTE)v415)
        {
          if (v415 == 1)
          {
            p_dst = &__p;
            v112 = 1;
            v111 = 4;
          }
          else
          {
            if (HIBYTE(v415) != 1)
              v111 = 2;
            v116 = (void **)&__dst;
            if (HIBYTE(v415) == 1)
              v116 = (void **)__dst;
            p_dst = (std::string *)v116;
            v417.i64[0] = *((_QWORD *)&__dst + 1);
            v417.i64[1] = (uint64_t)&__p;
            v112 = 4;
          }
        }
        else
        {
          v112 = 1;
        }
        LOBYTE(v419) = v111;
        BYTE1(v419) = v112;
        v117 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v119 = qword_1EF8F7238[0];
        *(_QWORD *)v117 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v117 + 8));
        *(_QWORD *)(v117 + 32) = 3;
        *(_QWORD *)(v117 + 40) = v119;
        *(_BYTE *)(v117 + 48) = 1;
        *(_BYTE *)(v382 + 24) |= 1u;
        *(_QWORD *)v382 = v117;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v391)
          (*(void (**)(char *))(*(_QWORD *)v391 + 8))(v391);
        v107 = 1;
        goto LABEL_164;
      }
      LOBYTE(v399) = 0;
      v2 = v2 & 0xFFFFFFFFFFFF0000 | v424.__r_.__value_.__s.__data_[0] & 1 | 0x100;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolVersionByIndex(*(_WORD *)(v85 + v83 + 2 * v84), &v399, (uint64_t)v420, v2, (uint64_t)&v425);
      if ((v425.__r_.__value_.__s.__data_[16] & 1) == 0)
      {
        v384 = v2;
        v86 = v3;
        v87 = v6;
        v88 = v72;
        v89 = (const void *)v425.__r_.__value_.__r.__words[0];
        if (v425.__r_.__value_.__r.__words[0])
        {
          size = v425.__r_.__value_.__l.__size_;
          if (v425.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_592;
          if (v425.__r_.__value_.__l.__size_ >= 0x17)
          {
            v92 = (v425.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v425.__r_.__value_.__l.__size_ | 7) != 0x17)
              v92 = v425.__r_.__value_.__l.__size_ | 7;
            v93 = v92 + 1;
            v91 = (__int128 *)operator new(v92 + 1);
            *((_QWORD *)&__dst + 1) = size;
            v414 = (const char *)(v93 | 0x8000000000000000);
            *(_QWORD *)&__dst = v91;
          }
          else
          {
            HIBYTE(v414) = v425.__r_.__value_.__s.__data_[8];
            v91 = &__dst;
            if (!v425.__r_.__value_.__l.__size_)
            {
LABEL_144:
              *((_BYTE *)v91 + size) = 0;
              goto LABEL_145;
            }
          }
          memmove(v91, v89, size);
          goto LABEL_144;
        }
        __dst = 0uLL;
        v414 = 0;
LABEL_145:
        v94 = v399;
        v95 = v397.u64[1];
        v96 = v398;
        if (v397.i64[1] >= (unint64_t)v398)
        {
          v98 = v397.i64[0];
          v99 = (v397.i64[1] - v397.i64[0]) >> 5;
          v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 59)
LABEL_592:
            abort();
          if ((uint64_t)&v398[-v397.i64[0]] >> 4 > v100)
            v100 = (uint64_t)&v398[-v397.i64[0]] >> 4;
          if ((unint64_t)&v398[-v397.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
            v101 = 0x7FFFFFFFFFFFFFFLL;
          else
            v101 = v100;
          v418 = 0;
          v419 = &v398;
          if (v101 >> 59)
LABEL_593:
            sub_1C4764EE4();
          v102 = (char *)operator new(32 * v101);
          v103 = &v102[32 * v99];
          *(_OWORD *)v103 = __dst;
          *((_QWORD *)v103 + 2) = v414;
          v103[24] = v94;
          if (v95 == v98)
          {
            v106 = vdupq_n_s64(v95);
            v104 = &v102[32 * v99];
          }
          else
          {
            v104 = &v102[32 * v99];
            do
            {
              v105 = *(_OWORD *)(v95 - 32);
              *((_QWORD *)v104 - 2) = *(_QWORD *)(v95 - 16);
              *((_OWORD *)v104 - 2) = v105;
              *(_QWORD *)(v95 - 24) = 0;
              *(_QWORD *)(v95 - 16) = 0;
              *(_QWORD *)(v95 - 32) = 0;
              *(v104 - 8) = *(_BYTE *)(v95 - 8);
              v104 -= 32;
              v95 -= 32;
            }
            while (v95 != v98);
            v106 = v397;
            v96 = v398;
          }
          v97 = (unint64_t)(v103 + 32);
          v397.i64[0] = (uint64_t)v104;
          v397.i64[1] = (uint64_t)(v103 + 32);
          v417 = v106;
          v398 = &v102[32 * v101];
          v418 = v96;
          p_dst = (std::string *)v106.i64[0];
          sub_1C5465AA0((uint64_t)&p_dst);
        }
        else
        {
          *(_OWORD *)v397.i64[1] = __dst;
          *(_QWORD *)(v95 + 16) = v414;
          *(_BYTE *)(v95 + 24) = v94;
          v97 = v95 + 32;
        }
        v72 = v88;
        v107 = 0;
        v397.i64[1] = v97;
        v6 = v87;
        v3 = v86;
        v2 = v384;
        goto LABEL_161;
      }
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to get a version for entry ";
      v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
      v402 = 2563;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" of ";
      v405 = 770;
      sub_1C59A3508(&v403, v6, (uint64_t)v73);
      v113 = v405;
      if (v405 == 1)
        break;
      if ((_BYTE)v405)
      {
        p_p_p = (std::string *)&p_p;
        v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v114 = 2;
        if (HIBYTE(v405) != 1)
        {
          v113 = 2;
          v122 = &__p;
        }
        p_p = v122;
        v408 = __p.__r_.__value_.__l.__size_;
        *(_QWORD *)&v409 = &v403;
        LOBYTE(v410) = v113;
        v121 = 4;
        HIBYTE(v410) = 4;
        goto LABEL_193;
      }
      v114 = 0;
      v410 = 256;
      v115 = 1;
LABEL_194:
      LOBYTE(v415) = v114;
      HIBYTE(v415) = v115;
      if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
      {
        v123 = (char *)v425.__r_.__value_.__r.__words[0];
        v425.__r_.__value_.__r.__words[0] = 0;
      }
      else
      {
        v123 = 0;
      }
      v390 = v123;
      sub_1C61D2548(&v390, &v400);
      v124 = v415;
      if ((_BYTE)v415)
      {
        if (v415 == 1)
        {
          p_dst = &v400;
          v125 = 1;
          v124 = 4;
        }
        else
        {
          if (HIBYTE(v415) != 1)
            v124 = 2;
          v126 = (void **)&__dst;
          if (HIBYTE(v415) == 1)
            v126 = (void **)__dst;
          p_dst = (std::string *)v126;
          v417.i64[0] = *((_QWORD *)&__dst + 1);
          v417.i64[1] = (uint64_t)&v400;
          v125 = 4;
        }
      }
      else
      {
        v125 = 1;
      }
      LOBYTE(v419) = v124;
      BYTE1(v419) = v125;
      v127 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v129 = qword_1EF8F7238[0];
      *(_QWORD *)v127 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v127 + 8));
      *(_QWORD *)(v127 + 32) = 3;
      *(_QWORD *)(v127 + 40) = v129;
      *(_BYTE *)(v127 + 48) = 1;
      *(_BYTE *)(v382 + 24) |= 1u;
      *(_QWORD *)v382 = v127;
      if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v400.__r_.__value_.__l.__data_);
      if (v390)
        (*(void (**)(char *))(*(_QWORD *)v390 + 8))(v390);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      v107 = 1;
LABEL_161:
      if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
      {
        v108 = v425.__r_.__value_.__r.__words[0];
        v425.__r_.__value_.__r.__words[0] = 0;
        if (v108)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v108 + 8))(v108);
      }
LABEL_164:
      if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v109 = v424.__r_.__value_.__r.__words[0];
        v424.__r_.__value_.__r.__words[0] = 0;
        if (v109)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v109 + 8))(v109);
      }
      if (v107)
        goto LABEL_433;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v395 + 24))(v395, &v394);
      if (v394 == v72)
      {
LABEL_431:
        v20 = v397;
        v19 = v398;
        a2 = v382;
        goto LABEL_432;
      }
    }
    p_p_p = &v403;
    p_p = &v403;
    v409 = v392;
    v410 = 260;
    data = v406;
    v412 = WORD2(v406);
    v114 = 4;
    v121 = v408;
LABEL_193:
    *(_QWORD *)&__dst = p_p_p;
    *((_QWORD *)&__dst + 1) = v121;
    v115 = 3;
    v414 = ": ";
    goto LABEL_194;
  }
  if (v5 != 13)
  {
    if (v5 == 14)
    {
      v130 = v387;
      v131 = v388;
      v132 = v389;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)v3 + 7, (uint64_t)&v422);
      if (!v423)
        goto LABEL_428;
      v133 = 0;
      v134 = 0;
      v135 = 0;
      v136 = v423 << 6;
      v137 = (int *)(v422 + 4);
      do
      {
        v138 = *v137;
        if (*v137 == 1879048190)
          v139 = v137 - 1;
        else
          v139 = (int *)v134;
        if (v138 == 1879048189)
          v140 = v137 - 1;
        else
          v140 = (int *)v135;
        if (v138 == 1879048189)
          v139 = (int *)v134;
        if (v138 == 1879048191)
        {
          v133 = v137 - 1;
        }
        else
        {
          v135 = (uint64_t)v140;
          v134 = (uint64_t)v139;
        }
        v137 += 16;
        v136 -= 64;
      }
      while (v136);
      if (!v133)
        goto LABEL_428;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::loadVersionMap((_QWORD *)v3 + 7, v134, v135, (uint64_t)v420);
      v18 = v421;
      if ((v421 & 1) == 0)
      {
        v19 = 0;
        v398 = 0;
        v20 = 0uLL;
        v397 = 0u;
        v395 = v131;
        v396 = 0;
        v394 = v130;
        if (v130 == v132)
          goto LABEL_432;
        v382 = a2;
        v385 = (_QWORD *)((char *)v3 + 56);
        while (1)
        {
          v141 = ++v396;
          if (*((_QWORD *)v133 + 7) != 2)
          {
            sub_1C59B6288(v6, (uint64_t)v133, (char *)&v425);
            v318 = std::string::insert(&v425, 0, "section ");
            v319 = v318->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v318->__r_.__value_.__l.__data_;
            v401.__r_.__value_.__r.__words[2] = v319;
            v318->__r_.__value_.__l.__size_ = 0;
            v318->__r_.__value_.__r.__words[2] = 0;
            v318->__r_.__value_.__r.__words[0] = 0;
            v320 = std::string::append(&v401, " has invalid sh_entsize: expected ");
            v321 = v320->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v320->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v321;
            v320->__r_.__value_.__l.__size_ = 0;
            v320->__r_.__value_.__r.__words[2] = 0;
            v320->__r_.__value_.__r.__words[0] = 0;
            v403.__r_.__value_.__r.__words[0] = 2;
            p_p = &__p;
            *(_QWORD *)&v409 = &v403;
            v410 = 2564;
            *(_QWORD *)&__dst = &p_p;
            v414 = ", but got ";
            v415 = 770;
            v400.__r_.__value_.__r.__words[0] = *((_QWORD *)v133 + 7);
            p_dst = (std::string *)&__dst;
            v417.i64[1] = (uint64_t)&v400;
            LOWORD(v419) = 3074;
            v254 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v323 = qword_1EF8F7238[0];
            *(_QWORD *)v254 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
            *(_QWORD *)(v254 + 32) = 3;
            *(_QWORD *)(v254 + 40) = v323;
            *(_BYTE *)(v254 + 48) = 1;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v401.__r_.__value_.__l.__data_);
            if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
            {
              v324 = (void *)v425.__r_.__value_.__r.__words[0];
              goto LABEL_559;
            }
            goto LABEL_560;
          }
          v143 = *((_QWORD *)v133 + 3);
          v142 = *((_QWORD *)v133 + 4);
          *(_QWORD *)&v392 = v143;
          v406 = v142;
          if ((v142 & 1) != 0)
          {
            sub_1C59B6288(v6, (uint64_t)v133, (char *)&v403);
            v333 = std::string::insert(&v403, 0, "section ");
            v334 = v333->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v333->__r_.__value_.__l.__data_;
            v425.__r_.__value_.__r.__words[2] = v334;
            v333->__r_.__value_.__l.__size_ = 0;
            v333->__r_.__value_.__r.__words[2] = 0;
            v333->__r_.__value_.__r.__words[0] = 0;
            v335 = std::string::append(&v425, " has an invalid sh_size (");
            v336 = v335->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v335->__r_.__value_.__l.__data_;
            v401.__r_.__value_.__r.__words[2] = v336;
            v335->__r_.__value_.__l.__size_ = 0;
            v335->__r_.__value_.__r.__words[2] = 0;
            v335->__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v406;
            v405 = 3076;
            p_p = &__p;
            *(_QWORD *)&v409 = ") which is not a multiple of its sh_entsize (";
            v410 = 770;
            v400.__r_.__value_.__r.__words[0] = *((_QWORD *)v133 + 7);
            *(_QWORD *)&__dst = &p_p;
            v414 = (const char *)&v400;
            v415 = 3074;
            v337 = ")";
            goto LABEL_534;
          }
          if (__CFADD__(v143, v142))
          {
            sub_1C59B6288(v6, (uint64_t)v133, (char *)&v403);
            v343 = std::string::insert(&v403, 0, "section ");
            v344 = v343->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
            v425.__r_.__value_.__r.__words[2] = v344;
            v343->__r_.__value_.__l.__size_ = 0;
            v343->__r_.__value_.__r.__words[2] = 0;
            v343->__r_.__value_.__r.__words[0] = 0;
            v345 = std::string::append(&v425, " has a sh_offset (0x");
            v346 = v345->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
            v401.__r_.__value_.__r.__words[2] = v346;
            v345->__r_.__value_.__l.__size_ = 0;
            v345->__r_.__value_.__r.__words[2] = 0;
            v345->__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v392;
            v405 = 3588;
            p_p = &__p;
            *(_QWORD *)&v409 = ") + sh_size (0x";
            v410 = 770;
            *(_QWORD *)&__dst = &p_p;
            v414 = (const char *)&v406;
            v415 = 3586;
            v337 = ") that cannot be represented";
LABEL_534:
            p_dst = (std::string *)&__dst;
            v417.i64[1] = (uint64_t)v337;
            LOWORD(v419) = 770;
            v254 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v348 = qword_1EF8F7238[0];
            *(_QWORD *)v254 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
            *(_QWORD *)(v254 + 32) = 3;
            *(_QWORD *)(v254 + 40) = v348;
            *(_BYTE *)(v254 + 48) = 1;
            if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v401.__r_.__value_.__l.__data_);
            if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v425.__r_.__value_.__l.__data_);
            if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
            {
              v324 = (void *)v403.__r_.__value_.__r.__words[0];
              goto LABEL_559;
            }
LABEL_560:
            v257 = v382;
            v6 = v385;
LABEL_561:
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to read an entry with index ";
            v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
            v402 = 2563;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" from ";
            v405 = 770;
            v305 = &v425;
            sub_1C59B5074(&v425, v6, (uint64_t)v133);
            goto LABEL_499;
          }
          if (v142 + v143 > *((_QWORD *)v3 + 8))
          {
            sub_1C59B6288(v6, (uint64_t)v133, (char *)&v424);
            v355 = std::string::insert(&v424, 0, "section ");
            v356 = v355->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v400.__r_.__value_.__l.__data_ = *(_OWORD *)&v355->__r_.__value_.__l.__data_;
            v400.__r_.__value_.__r.__words[2] = v356;
            v355->__r_.__value_.__l.__size_ = 0;
            v355->__r_.__value_.__r.__words[2] = 0;
            v355->__r_.__value_.__r.__words[0] = 0;
            v357 = std::string::append(&v400, " has a sh_offset (0x");
            v358 = v357->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v357->__r_.__value_.__l.__data_;
            v403.__r_.__value_.__r.__words[2] = v358;
            v357->__r_.__value_.__l.__size_ = 0;
            v357->__r_.__value_.__r.__words[2] = 0;
            v357->__r_.__value_.__r.__words[0] = 0;
            v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403;
            v425.__r_.__value_.__r.__words[2] = (std::string::size_type)&v392;
            v426 = 3588;
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
            v401.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
            v402 = 770;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v406;
            v405 = 3586;
            p_p = &__p;
            *(_QWORD *)&v409 = ") that is greater than the file size (0x";
            v410 = 770;
            v399 = *((_QWORD *)v3 + 8);
            *(_QWORD *)&__dst = &p_p;
            v414 = (const char *)&v399;
            v415 = 3586;
            p_dst = (std::string *)&__dst;
            v417.i64[1] = (uint64_t)")";
            LOWORD(v419) = 770;
            v254 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v360 = qword_1EF8F7238[0];
            *(_QWORD *)v254 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
            *(_QWORD *)(v254 + 32) = 3;
            *(_QWORD *)(v254 + 40) = v360;
            *(_BYTE *)(v254 + 48) = 1;
            if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v403.__r_.__value_.__l.__data_);
            if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v400.__r_.__value_.__l.__data_);
            if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
            {
              v324 = (void *)v424.__r_.__value_.__r.__words[0];
LABEL_559:
              operator delete(v324);
            }
            goto LABEL_560;
          }
          v144 = v141;
          if (v141 >= v142 >> 1)
          {
            v401.__r_.__value_.__r.__words[0] = 2 * v141;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"can't read an entry at 0x";
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v401;
            v405 = 3587;
            p_p = &__p;
            *(_QWORD *)&v409 = ": it goes past the end of the section (0x";
            v410 = 770;
            v425.__r_.__value_.__r.__words[0] = v142;
            *(_QWORD *)&__dst = &p_p;
            v414 = (const char *)&v425;
            v415 = 3586;
            p_dst = (std::string *)&__dst;
            v417.i64[1] = (uint64_t)")";
            LOWORD(v419) = 770;
            v254 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v379 = qword_1EF8F7238[0];
            *(_QWORD *)v254 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
            *(_QWORD *)(v254 + 32) = 3;
            *(_QWORD *)(v254 + 40) = v379;
            *(_BYTE *)(v254 + 48) = 1;
            v257 = v382;
            goto LABEL_561;
          }
          v145 = *v6;
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v395 + 40))(&v424, v395, v394);
          if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            p_p = (std::string *)"unable to read flags for symbol with index ";
            *(_QWORD *)&v409 = &v396;
            v410 = 2563;
            *(_QWORD *)&__dst = &p_p;
            v414 = ": ";
            v415 = 770;
            v168 = (char *)v424.__r_.__value_.__r.__words[0];
            v424.__r_.__value_.__r.__words[0] = 0;
            v391 = v168;
            sub_1C61D2548(&v391, &__p);
            v169 = v415;
            if ((_BYTE)v415)
            {
              if (v415 == 1)
              {
                p_dst = &__p;
                v170 = 1;
                v169 = 4;
              }
              else
              {
                if (HIBYTE(v415) != 1)
                  v169 = 2;
                v174 = (void **)&__dst;
                if (HIBYTE(v415) == 1)
                  v174 = (void **)__dst;
                p_dst = (std::string *)v174;
                v417.i64[0] = *((_QWORD *)&__dst + 1);
                v417.i64[1] = (uint64_t)&__p;
                v170 = 4;
              }
            }
            else
            {
              v170 = 1;
            }
            LOBYTE(v419) = v169;
            BYTE1(v419) = v170;
            v175 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v177 = qword_1EF8F7238[0];
            *(_QWORD *)v175 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v175 + 8));
            *(_QWORD *)(v175 + 32) = 3;
            *(_QWORD *)(v175 + 40) = v177;
            *(_BYTE *)(v175 + 48) = 1;
            *(_BYTE *)(v382 + 24) |= 1u;
            *(_QWORD *)v382 = v175;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v391)
              (*(void (**)(char *))(*(_QWORD *)v391 + 8))(v391);
            v165 = 1;
            goto LABEL_271;
          }
          LOBYTE(v399) = 0;
          v2 = v2 & 0xFFFFFFFFFFFF0000 | v424.__r_.__value_.__s.__data_[0] & 1 | 0x100;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolVersionByIndex(*(_WORD *)(v145 + v143 + 2 * v144), &v399, (uint64_t)v420, v2, (uint64_t)&v425);
          if ((v425.__r_.__value_.__s.__data_[16] & 1) == 0)
          {
            v146 = v132;
            v147 = (const void *)v425.__r_.__value_.__r.__words[0];
            if (v425.__r_.__value_.__r.__words[0])
            {
              v148 = v425.__r_.__value_.__l.__size_;
              if (v425.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_592;
              if (v425.__r_.__value_.__l.__size_ >= 0x17)
              {
                v150 = (v425.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v425.__r_.__value_.__l.__size_ | 7) != 0x17)
                  v150 = v425.__r_.__value_.__l.__size_ | 7;
                v151 = v150 + 1;
                v149 = (__int128 *)operator new(v150 + 1);
                *((_QWORD *)&__dst + 1) = v148;
                v414 = (const char *)(v151 | 0x8000000000000000);
                *(_QWORD *)&__dst = v149;
              }
              else
              {
                HIBYTE(v414) = v425.__r_.__value_.__s.__data_[8];
                v149 = &__dst;
                if (!v425.__r_.__value_.__l.__size_)
                {
LABEL_251:
                  *((_BYTE *)v149 + v148) = 0;
                  goto LABEL_252;
                }
              }
              memmove(v149, v147, v148);
              goto LABEL_251;
            }
            __dst = 0uLL;
            v414 = 0;
LABEL_252:
            v152 = v399;
            v153 = v397.u64[1];
            v154 = v398;
            if (v397.i64[1] >= (unint64_t)v398)
            {
              v156 = v397.i64[0];
              v157 = (v397.i64[1] - v397.i64[0]) >> 5;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 59)
                goto LABEL_592;
              if ((uint64_t)&v398[-v397.i64[0]] >> 4 > v158)
                v158 = (uint64_t)&v398[-v397.i64[0]] >> 4;
              if ((unint64_t)&v398[-v397.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
                v159 = 0x7FFFFFFFFFFFFFFLL;
              else
                v159 = v158;
              v418 = 0;
              v419 = &v398;
              if (v159 >> 59)
                goto LABEL_593;
              v160 = (char *)operator new(32 * v159);
              v161 = &v160[32 * v157];
              *(_OWORD *)v161 = __dst;
              *((_QWORD *)v161 + 2) = v414;
              v161[24] = v152;
              if (v153 == v156)
              {
                v164 = vdupq_n_s64(v153);
                v162 = &v160[32 * v157];
              }
              else
              {
                v162 = &v160[32 * v157];
                do
                {
                  v163 = *(_OWORD *)(v153 - 32);
                  *((_QWORD *)v162 - 2) = *(_QWORD *)(v153 - 16);
                  *((_OWORD *)v162 - 2) = v163;
                  *(_QWORD *)(v153 - 24) = 0;
                  *(_QWORD *)(v153 - 16) = 0;
                  *(_QWORD *)(v153 - 32) = 0;
                  *(v162 - 8) = *(_BYTE *)(v153 - 8);
                  v162 -= 32;
                  v153 -= 32;
                }
                while (v153 != v156);
                v164 = v397;
                v154 = v398;
              }
              v155 = (unint64_t)(v161 + 32);
              v397.i64[0] = (uint64_t)v162;
              v397.i64[1] = (uint64_t)(v161 + 32);
              v417 = v164;
              v398 = &v160[32 * v159];
              v418 = v154;
              p_dst = (std::string *)v164.i64[0];
              sub_1C5465AA0((uint64_t)&p_dst);
            }
            else
            {
              *(_OWORD *)v397.i64[1] = __dst;
              *(_QWORD *)(v153 + 16) = v414;
              *(_BYTE *)(v153 + 24) = v152;
              v155 = v153 + 32;
            }
            v132 = v146;
            v165 = 0;
            v397.i64[1] = v155;
            v6 = (_QWORD *)((char *)v3 + 56);
            goto LABEL_268;
          }
          v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to get a version for entry ";
          v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
          v402 = 2563;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" of ";
          v405 = 770;
          sub_1C59B5074(&v403, v6, (uint64_t)v133);
          v171 = v405;
          if (v405 == 1)
            break;
          if ((_BYTE)v405)
          {
            v178 = (std::string *)&p_p;
            v180 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v172 = 2;
            if (HIBYTE(v405) != 1)
            {
              v171 = 2;
              v180 = &__p;
            }
            p_p = v180;
            v408 = __p.__r_.__value_.__l.__size_;
            *(_QWORD *)&v409 = &v403;
            LOBYTE(v410) = v171;
            v179 = 4;
            HIBYTE(v410) = 4;
            goto LABEL_300;
          }
          v172 = 0;
          v410 = 256;
          v173 = 1;
LABEL_301:
          LOBYTE(v415) = v172;
          HIBYTE(v415) = v173;
          if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
          {
            v181 = (char *)v425.__r_.__value_.__r.__words[0];
            v425.__r_.__value_.__r.__words[0] = 0;
          }
          else
          {
            v181 = 0;
          }
          v390 = v181;
          sub_1C61D2548(&v390, &v400);
          v182 = v415;
          if ((_BYTE)v415)
          {
            if (v415 == 1)
            {
              p_dst = &v400;
              v183 = 1;
              v182 = 4;
            }
            else
            {
              if (HIBYTE(v415) != 1)
                v182 = 2;
              v184 = (void **)&__dst;
              if (HIBYTE(v415) == 1)
                v184 = (void **)__dst;
              p_dst = (std::string *)v184;
              v417.i64[0] = *((_QWORD *)&__dst + 1);
              v417.i64[1] = (uint64_t)&v400;
              v183 = 4;
            }
          }
          else
          {
            v183 = 1;
          }
          LOBYTE(v419) = v182;
          BYTE1(v419) = v183;
          v185 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v187 = qword_1EF8F7238[0];
          *(_QWORD *)v185 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v185 + 8));
          *(_QWORD *)(v185 + 32) = 3;
          *(_QWORD *)(v185 + 40) = v187;
          *(_BYTE *)(v185 + 48) = 1;
          *(_BYTE *)(v382 + 24) |= 1u;
          *(_QWORD *)v382 = v185;
          if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v400.__r_.__value_.__l.__data_);
          if (v390)
            (*(void (**)(char *))(*(_QWORD *)v390 + 8))(v390);
          if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v403.__r_.__value_.__l.__data_);
          v165 = 1;
LABEL_268:
          if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
          {
            v166 = v425.__r_.__value_.__r.__words[0];
            v425.__r_.__value_.__r.__words[0] = 0;
            if (v166)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v166 + 8))(v166);
          }
LABEL_271:
          if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            v167 = v424.__r_.__value_.__r.__words[0];
            v424.__r_.__value_.__r.__words[0] = 0;
            if (v167)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v167 + 8))(v167);
          }
          if (v165)
            goto LABEL_433;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v395 + 24))(v395, &v394);
          if (v394 == v132)
            goto LABEL_431;
        }
        v178 = &v403;
        p_p = &v403;
        v409 = v392;
        v410 = 260;
        data = v406;
        v412 = WORD2(v406);
        v172 = 4;
        v179 = v408;
LABEL_300:
        *(_QWORD *)&__dst = v178;
        *((_QWORD *)&__dst + 1) = v179;
        v173 = 3;
        v414 = ": ";
        goto LABEL_301;
      }
LABEL_429:
      v247 = v420[0];
      v420[0] = 0;
      *(_BYTE *)(a2 + 24) |= 1u;
      *(_QWORD *)a2 = v247;
      if ((v18 & 1) != 0)
        goto LABEL_434;
      goto LABEL_430;
    }
    v188 = v387;
    v189 = v388;
    v190 = v389;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)v3 + 7, (uint64_t)&v422);
    if (!v423)
      goto LABEL_428;
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v194 = v423 << 6;
    v195 = (int *)(v422 + 4);
    do
    {
      v196 = *v195;
      if (*v195 == -16777361)
        v197 = v195 - 1;
      else
        v197 = (int *)v192;
      if (v196 == -33554577)
        v198 = v195 - 1;
      else
        v198 = (int *)v193;
      if (v196 == -33554577)
        v197 = (int *)v192;
      if (v196 == -145)
      {
        v191 = (unint64_t *)(v195 - 1);
      }
      else
      {
        v193 = (uint64_t)v198;
        v192 = (uint64_t)v197;
      }
      v195 += 16;
      v194 -= 64;
    }
    while (v194);
    if (!v191)
      goto LABEL_428;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::loadVersionMap((_QWORD *)v3 + 7, v192, v193, (uint64_t)v420);
    v18 = v421;
    if ((v421 & 1) != 0)
      goto LABEL_429;
    v19 = 0;
    v398 = 0;
    v20 = 0uLL;
    v397 = 0u;
    v395 = v189;
    v396 = 0;
    v394 = v188;
    if (v188 == v190)
      goto LABEL_432;
    v382 = a2;
    v386 = (_QWORD *)((char *)v3 + 56);
    while (1)
    {
      v199 = ++v396;
      if (v191[7] != 0x200000000000000)
      {
        sub_1C59BE6BC(v6, (uint64_t)v191, (char *)&v425);
        v325 = std::string::insert(&v425, 0, "section ");
        v326 = v325->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v325->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v326;
        v325->__r_.__value_.__l.__size_ = 0;
        v325->__r_.__value_.__r.__words[2] = 0;
        v325->__r_.__value_.__r.__words[0] = 0;
        v327 = std::string::append(&v401, " has invalid sh_entsize: expected ");
        v328 = v327->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v327->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v328;
        v327->__r_.__value_.__l.__size_ = 0;
        v327->__r_.__value_.__r.__words[2] = 0;
        v327->__r_.__value_.__r.__words[0] = 0;
        v403.__r_.__value_.__r.__words[0] = 2;
        p_p = &__p;
        *(_QWORD *)&v409 = &v403;
        v410 = 2564;
        *(_QWORD *)&__dst = &p_p;
        v414 = ", but got ";
        v415 = 770;
        v400.__r_.__value_.__r.__words[0] = bswap64(v191[7]);
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)&v400;
        LOWORD(v419) = 3074;
        v329 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v331 = qword_1EF8F7238[0];
        *(_QWORD *)v329 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v329 + 8));
        *(_QWORD *)(v329 + 32) = 3;
        *(_QWORD *)(v329 + 40) = v331;
        *(_BYTE *)(v329 + 48) = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v401.__r_.__value_.__l.__data_);
        if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
        {
          v332 = (void *)v425.__r_.__value_.__r.__words[0];
          goto LABEL_570;
        }
        goto LABEL_571;
      }
      v200 = v191[4];
      v201 = bswap64(v191[3]);
      *(_QWORD *)&v392 = v201;
      v202 = bswap64(v200);
      v406 = v202;
      if ((v202 & 1) != 0)
      {
        sub_1C59BE6BC(v6, (uint64_t)v191, (char *)&v403);
        v338 = std::string::insert(&v403, 0, "section ");
        v339 = v338->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
        v425.__r_.__value_.__r.__words[2] = v339;
        v338->__r_.__value_.__l.__size_ = 0;
        v338->__r_.__value_.__r.__words[2] = 0;
        v338->__r_.__value_.__r.__words[0] = 0;
        v340 = std::string::append(&v425, " has an invalid sh_size (");
        v341 = v340->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v341;
        v340->__r_.__value_.__l.__size_ = 0;
        v340->__r_.__value_.__r.__words[2] = 0;
        v340->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v406;
        v405 = 3076;
        p_p = &__p;
        *(_QWORD *)&v409 = ") which is not a multiple of its sh_entsize (";
        v410 = 770;
        v400.__r_.__value_.__r.__words[0] = bswap64(v191[7]);
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v400;
        v415 = 3074;
        v342 = ")";
        goto LABEL_543;
      }
      if (__CFADD__(v201, v202))
      {
        sub_1C59BE6BC(v6, (uint64_t)v191, (char *)&v403);
        v349 = std::string::insert(&v403, 0, "section ");
        v350 = v349->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v349->__r_.__value_.__l.__data_;
        v425.__r_.__value_.__r.__words[2] = v350;
        v349->__r_.__value_.__l.__size_ = 0;
        v349->__r_.__value_.__r.__words[2] = 0;
        v349->__r_.__value_.__r.__words[0] = 0;
        v351 = std::string::append(&v425, " has a sh_offset (0x");
        v352 = v351->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v352;
        v351->__r_.__value_.__l.__size_ = 0;
        v351->__r_.__value_.__r.__words[2] = 0;
        v351->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v392;
        v405 = 3588;
        p_p = &__p;
        *(_QWORD *)&v409 = ") + sh_size (0x";
        v410 = 770;
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v406;
        v415 = 3586;
        v342 = ") that cannot be represented";
LABEL_543:
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)v342;
        LOWORD(v419) = 770;
        v329 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v354 = qword_1EF8F7238[0];
        *(_QWORD *)v329 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v329 + 8));
        *(_QWORD *)(v329 + 32) = 3;
        *(_QWORD *)(v329 + 40) = v354;
        *(_BYTE *)(v329 + 48) = 1;
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v401.__r_.__value_.__l.__data_);
        if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v425.__r_.__value_.__l.__data_);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        {
          v332 = (void *)v403.__r_.__value_.__r.__words[0];
          goto LABEL_570;
        }
LABEL_571:
        v367 = v382;
        v6 = v386;
        goto LABEL_572;
      }
      if (v202 + v201 > *((_QWORD *)v3 + 8))
      {
        sub_1C59BE6BC(v6, (uint64_t)v191, (char *)&v424);
        v361 = std::string::insert(&v424, 0, "section ");
        v362 = v361->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v400.__r_.__value_.__l.__data_ = *(_OWORD *)&v361->__r_.__value_.__l.__data_;
        v400.__r_.__value_.__r.__words[2] = v362;
        v361->__r_.__value_.__l.__size_ = 0;
        v361->__r_.__value_.__r.__words[2] = 0;
        v361->__r_.__value_.__r.__words[0] = 0;
        v363 = std::string::append(&v400, " has a sh_offset (0x");
        v364 = v363->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v363->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v364;
        v363->__r_.__value_.__l.__size_ = 0;
        v363->__r_.__value_.__r.__words[2] = 0;
        v363->__r_.__value_.__r.__words[0] = 0;
        v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403;
        v425.__r_.__value_.__r.__words[2] = (std::string::size_type)&v392;
        v426 = 3588;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
        v401.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v402 = 770;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v406;
        v405 = 3586;
        p_p = &__p;
        *(_QWORD *)&v409 = ") that is greater than the file size (0x";
        v410 = 770;
        v399 = *((_QWORD *)v3 + 8);
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v399;
        v415 = 3586;
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)")";
        LOWORD(v419) = 770;
        v329 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v366 = qword_1EF8F7238[0];
        *(_QWORD *)v329 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v329 + 8));
        *(_QWORD *)(v329 + 32) = 3;
        *(_QWORD *)(v329 + 40) = v366;
        *(_BYTE *)(v329 + 48) = 1;
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v400.__r_.__value_.__l.__data_);
        if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
        {
          v332 = (void *)v424.__r_.__value_.__r.__words[0];
LABEL_570:
          operator delete(v332);
        }
        goto LABEL_571;
      }
      v203 = v199;
      if (v199 >= v202 >> 1)
      {
        v401.__r_.__value_.__r.__words[0] = 2 * v199;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"can't read an entry at 0x";
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v401;
        v405 = 3587;
        p_p = &__p;
        *(_QWORD *)&v409 = ": it goes past the end of the section (0x";
        v410 = 770;
        v425.__r_.__value_.__r.__words[0] = v202;
        *(_QWORD *)&__dst = &p_p;
        v414 = (const char *)&v425;
        v415 = 3586;
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)")";
        LOWORD(v419) = 770;
        v329 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v381 = qword_1EF8F7238[0];
        *(_QWORD *)v329 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v329 + 8));
        *(_QWORD *)(v329 + 32) = 3;
        *(_QWORD *)(v329 + 40) = v381;
        *(_BYTE *)(v329 + 48) = 1;
        v367 = v382;
LABEL_572:
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to read an entry with index ";
        v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
        v402 = 2563;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" from ";
        v405 = 770;
        v368 = &v425;
        sub_1C59BD440(&v425, v6, (uint64_t)v191);
        v369 = v405;
        if (v405 == 1)
        {
          p_p = &v425;
          v409 = *(_OWORD *)&v400.__r_.__value_.__l.__data_;
          v410 = 260;
          data = v392;
          v412 = WORD2(v392);
          v372 = 4;
          v373 = v408;
        }
        else
        {
          if (!(_BYTE)v405)
          {
            v410 = 256;
            v415 = 256;
            v424.__r_.__value_.__r.__words[0] = v329;
            sub_1C61D2548(&v424.__r_.__value_.__l.__data_, &v403);
            v370 = 0;
            v371 = 1;
            goto LABEL_580;
          }
          v374 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v372 = 2;
          if (HIBYTE(v405) != 1)
          {
            v369 = 2;
            v374 = &__p;
          }
          p_p = v374;
          v408 = __p.__r_.__value_.__l.__size_;
          *(_QWORD *)&v409 = &v425;
          LOBYTE(v410) = v369;
          v373 = 4;
          HIBYTE(v410) = 4;
          v368 = (std::string *)&p_p;
        }
        *(_QWORD *)&__dst = v368;
        *((_QWORD *)&__dst + 1) = v373;
        v414 = ": ";
        LOBYTE(v415) = v372;
        HIBYTE(v415) = 3;
        v424.__r_.__value_.__r.__words[0] = v329;
        sub_1C61D2548(&v424.__r_.__value_.__l.__data_, &v403);
        p_dst = (std::string *)&__dst;
        v417.i64[1] = (uint64_t)&v403;
        v371 = 4;
        v370 = 2;
LABEL_580:
        LOBYTE(v419) = v370;
        BYTE1(v419) = v371;
        v375 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v377 = qword_1EF8F7238[0];
        *(_QWORD *)v375 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v375 + 8));
        *(_QWORD *)(v375 + 32) = 3;
        *(_QWORD *)(v375 + 40) = v377;
        *(_BYTE *)(v375 + 48) = 1;
        *(_BYTE *)(v367 + 24) |= 1u;
        *(_QWORD *)v367 = v375;
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v403.__r_.__value_.__l.__data_);
        v317 = (char *)v424.__r_.__value_.__r.__words[0];
        if (v424.__r_.__value_.__r.__words[0])
          goto LABEL_512;
        goto LABEL_513;
      }
      v204 = *v6;
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v395 + 40))(&v424, v395, v394);
      if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        p_p = (std::string *)"unable to read flags for symbol with index ";
        *(_QWORD *)&v409 = &v396;
        v410 = 2563;
        *(_QWORD *)&__dst = &p_p;
        v414 = ": ";
        v415 = 770;
        v227 = (char *)v424.__r_.__value_.__r.__words[0];
        v424.__r_.__value_.__r.__words[0] = 0;
        v393 = v227;
        sub_1C61D2548(&v393, &__p);
        v228 = v415;
        if ((_BYTE)v415)
        {
          if (v415 == 1)
          {
            p_dst = &__p;
            v229 = 1;
            v228 = 4;
          }
          else
          {
            if (HIBYTE(v415) != 1)
              v228 = 2;
            v233 = (void **)&__dst;
            if (HIBYTE(v415) == 1)
              v233 = (void **)__dst;
            p_dst = (std::string *)v233;
            v417.i64[0] = *((_QWORD *)&__dst + 1);
            v417.i64[1] = (uint64_t)&__p;
            v229 = 4;
          }
        }
        else
        {
          v229 = 1;
        }
        LOBYTE(v419) = v228;
        BYTE1(v419) = v229;
        v234 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v236 = qword_1EF8F7238[0];
        *(_QWORD *)v234 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v234 + 8));
        *(_QWORD *)(v234 + 32) = 3;
        *(_QWORD *)(v234 + 40) = v236;
        *(_BYTE *)(v234 + 48) = 1;
        *(_BYTE *)(v382 + 24) |= 1u;
        *(_QWORD *)v382 = v234;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v393)
          (*(void (**)(char *))(*(_QWORD *)v393 + 8))(v393);
        v224 = 1;
        goto LABEL_377;
      }
      LOBYTE(v399) = 0;
      v2 = v2 & 0xFFFFFFFFFFFF0000 | v424.__r_.__value_.__s.__data_[0] & 1 | 0x100;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolVersionByIndex(bswap32(*(unsigned __int16 *)(v204 + v201 + 2 * v203)) >> 16, &v399, (uint64_t)v420, v2, (uint64_t)&v425);
      if ((v425.__r_.__value_.__s.__data_[16] & 1) == 0)
      {
        v205 = v190;
        v206 = (const void *)v425.__r_.__value_.__r.__words[0];
        if (v425.__r_.__value_.__r.__words[0])
        {
          v207 = v425.__r_.__value_.__l.__size_;
          if (v425.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_592;
          if (v425.__r_.__value_.__l.__size_ >= 0x17)
          {
            v209 = (v425.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v425.__r_.__value_.__l.__size_ | 7) != 0x17)
              v209 = v425.__r_.__value_.__l.__size_ | 7;
            v210 = v209 + 1;
            v208 = (__int128 *)operator new(v209 + 1);
            *((_QWORD *)&__dst + 1) = v207;
            v414 = (const char *)(v210 | 0x8000000000000000);
            *(_QWORD *)&__dst = v208;
          }
          else
          {
            HIBYTE(v414) = v425.__r_.__value_.__s.__data_[8];
            v208 = &__dst;
            if (!v425.__r_.__value_.__l.__size_)
            {
LABEL_357:
              *((_BYTE *)v208 + v207) = 0;
              goto LABEL_358;
            }
          }
          memmove(v208, v206, v207);
          goto LABEL_357;
        }
        __dst = 0uLL;
        v414 = 0;
LABEL_358:
        v211 = v399;
        v212 = v397.u64[1];
        v213 = v398;
        if (v397.i64[1] >= (unint64_t)v398)
        {
          v215 = v397.i64[0];
          v216 = (v397.i64[1] - v397.i64[0]) >> 5;
          v217 = v216 + 1;
          if ((unint64_t)(v216 + 1) >> 59)
            goto LABEL_592;
          if ((uint64_t)&v398[-v397.i64[0]] >> 4 > v217)
            v217 = (uint64_t)&v398[-v397.i64[0]] >> 4;
          if ((unint64_t)&v398[-v397.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
            v218 = 0x7FFFFFFFFFFFFFFLL;
          else
            v218 = v217;
          v418 = 0;
          v419 = &v398;
          if (v218 >> 59)
            goto LABEL_593;
          v219 = (char *)operator new(32 * v218);
          v220 = &v219[32 * v216];
          *(_OWORD *)v220 = __dst;
          *((_QWORD *)v220 + 2) = v414;
          v220[24] = v211;
          if (v212 == v215)
          {
            v223 = vdupq_n_s64(v212);
            v221 = &v219[32 * v216];
          }
          else
          {
            v221 = &v219[32 * v216];
            do
            {
              v222 = *(_OWORD *)(v212 - 32);
              *((_QWORD *)v221 - 2) = *(_QWORD *)(v212 - 16);
              *((_OWORD *)v221 - 2) = v222;
              *(_QWORD *)(v212 - 24) = 0;
              *(_QWORD *)(v212 - 16) = 0;
              *(_QWORD *)(v212 - 32) = 0;
              *(v221 - 8) = *(_BYTE *)(v212 - 8);
              v221 -= 32;
              v212 -= 32;
            }
            while (v212 != v215);
            v223 = v397;
            v213 = v398;
          }
          v214 = (unint64_t)(v220 + 32);
          v397.i64[0] = (uint64_t)v221;
          v397.i64[1] = (uint64_t)(v220 + 32);
          v417 = v223;
          v398 = &v219[32 * v218];
          v418 = v213;
          p_dst = (std::string *)v223.i64[0];
          sub_1C5465AA0((uint64_t)&p_dst);
        }
        else
        {
          *(_OWORD *)v397.i64[1] = __dst;
          *(_QWORD *)(v212 + 16) = v414;
          *(_BYTE *)(v212 + 24) = v211;
          v214 = v212 + 32;
        }
        v190 = v205;
        v224 = 0;
        v397.i64[1] = v214;
        v6 = (_QWORD *)((char *)v3 + 56);
        goto LABEL_374;
      }
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to get a version for entry ";
      v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
      v402 = 2563;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" of ";
      v405 = 770;
      sub_1C59BD440(&v403, v6, (uint64_t)v191);
      v230 = v405;
      if (v405 == 1)
        break;
      if ((_BYTE)v405)
      {
        v237 = (std::string *)&p_p;
        v239 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v231 = 2;
        if (HIBYTE(v405) != 1)
        {
          v230 = 2;
          v239 = &__p;
        }
        p_p = v239;
        v408 = __p.__r_.__value_.__l.__size_;
        *(_QWORD *)&v409 = &v403;
        LOBYTE(v410) = v230;
        v238 = 4;
        HIBYTE(v410) = 4;
        goto LABEL_406;
      }
      v231 = 0;
      v410 = 256;
      v232 = 1;
LABEL_407:
      LOBYTE(v415) = v231;
      HIBYTE(v415) = v232;
      if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
      {
        v240 = (char *)v425.__r_.__value_.__r.__words[0];
        v425.__r_.__value_.__r.__words[0] = 0;
      }
      else
      {
        v240 = 0;
      }
      v391 = v240;
      sub_1C61D2548(&v391, &v400);
      v241 = v415;
      if ((_BYTE)v415)
      {
        if (v415 == 1)
        {
          p_dst = &v400;
          v242 = 1;
          v241 = 4;
        }
        else
        {
          if (HIBYTE(v415) != 1)
            v241 = 2;
          v243 = (void **)&__dst;
          if (HIBYTE(v415) == 1)
            v243 = (void **)__dst;
          p_dst = (std::string *)v243;
          v417.i64[0] = *((_QWORD *)&__dst + 1);
          v417.i64[1] = (uint64_t)&v400;
          v242 = 4;
        }
      }
      else
      {
        v242 = 1;
      }
      LOBYTE(v419) = v241;
      BYTE1(v419) = v242;
      v244 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v246 = qword_1EF8F7238[0];
      *(_QWORD *)v244 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v244 + 8));
      *(_QWORD *)(v244 + 32) = 3;
      *(_QWORD *)(v244 + 40) = v246;
      *(_BYTE *)(v244 + 48) = 1;
      *(_BYTE *)(v382 + 24) |= 1u;
      *(_QWORD *)v382 = v244;
      if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v400.__r_.__value_.__l.__data_);
      if (v391)
        (*(void (**)(char *))(*(_QWORD *)v391 + 8))(v391);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      v224 = 1;
LABEL_374:
      if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
      {
        v225 = v425.__r_.__value_.__r.__words[0];
        v425.__r_.__value_.__r.__words[0] = 0;
        if (v225)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v225 + 8))(v225);
      }
LABEL_377:
      if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v226 = v424.__r_.__value_.__r.__words[0];
        v424.__r_.__value_.__r.__words[0] = 0;
        if (v226)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v226 + 8))(v226);
      }
      if (v224)
        goto LABEL_433;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v395 + 24))(v395, &v394);
      if (v394 == v190)
        goto LABEL_431;
    }
    v237 = &v403;
    p_p = &v403;
    v409 = v392;
    v410 = 260;
    data = v406;
    v412 = WORD2(v406);
    v231 = 4;
    v238 = v408;
LABEL_406:
    *(_QWORD *)&__dst = v237;
    *((_QWORD *)&__dst + 1) = v238;
    v232 = 3;
    v414 = ": ";
    goto LABEL_407;
  }
  v7 = v387;
  v8 = v388;
  v9 = v389;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)v3 + 7, (uint64_t)&v422);
  if (!v423)
    goto LABEL_428;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 40 * v423;
  v14 = (int *)(v422 + 4);
  do
  {
    v15 = *v14;
    if (*v14 == -16777361)
      v16 = v14 - 1;
    else
      v16 = (int *)v11;
    if (v15 == -33554577)
      v17 = v14 - 1;
    else
      v17 = (int *)v12;
    if (v15 == -33554577)
      v16 = (int *)v11;
    if (v15 == -145)
    {
      v10 = (unsigned int *)(v14 - 1);
    }
    else
    {
      v12 = (uint64_t)v17;
      v11 = (uint64_t)v16;
    }
    v14 += 10;
    v13 -= 40;
  }
  while (v13);
  if (!v10)
  {
LABEL_428:
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v417 = 0uLL;
    p_dst = 0;
    *(_QWORD *)&__dst = &p_dst;
    sub_1C5464DAC((void ***)&__dst);
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::loadVersionMap((_QWORD *)v3 + 7, v11, v12, (uint64_t)v420);
  v18 = v421;
  if ((v421 & 1) != 0)
    goto LABEL_429;
  v19 = 0;
  v398 = 0;
  v20 = 0uLL;
  v397 = 0u;
  v395 = v8;
  v396 = 0;
  v394 = v7;
  if (v7 == v9)
  {
LABEL_432:
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(int64x2_t *)a2 = v20;
    *(_QWORD *)(a2 + 16) = v19;
    v398 = 0;
    v397 = 0uLL;
    goto LABEL_433;
  }
  v382 = a2;
  while (1)
  {
    v21 = ++v396;
    if (v10[9] != 0x2000000)
    {
      sub_1C59AD9D0(v6, (uint64_t)v10, (char *)&v425);
      v249 = std::string::insert(&v425, 0, "section ");
      v250 = v249->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
      v401.__r_.__value_.__r.__words[2] = v250;
      v249->__r_.__value_.__l.__size_ = 0;
      v249->__r_.__value_.__r.__words[2] = 0;
      v249->__r_.__value_.__r.__words[0] = 0;
      v251 = std::string::append(&v401, " has invalid sh_entsize: expected ");
      v252 = v251->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v252;
      v251->__r_.__value_.__l.__size_ = 0;
      v251->__r_.__value_.__r.__words[2] = 0;
      v251->__r_.__value_.__r.__words[0] = 0;
      v403.__r_.__value_.__r.__words[0] = 2;
      p_p = &__p;
      *(_QWORD *)&v409 = &v403;
      v410 = 2564;
      *(_QWORD *)&__dst = &p_p;
      v414 = ", but got ";
      v415 = 770;
      v253 = bswap32(v10[9]);
      p_dst = (std::string *)&__dst;
      v417.i64[1] = v253;
      LOWORD(v419) = 2050;
      v254 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v256 = qword_1EF8F7238[0];
      *(_QWORD *)v254 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
      *(_QWORD *)(v254 + 32) = 3;
      *(_QWORD *)(v254 + 40) = v256;
      *(_BYTE *)(v254 + 48) = 1;
      v257 = v382;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v401.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v425.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_494;
      v258 = (void *)v425.__r_.__value_.__r.__words[0];
LABEL_481:
      operator delete(v258);
      goto LABEL_494;
    }
    v22 = bswap32(v10[5]);
    if ((v22 & 1) != 0)
    {
      sub_1C59AD9D0(v6, (uint64_t)v10, (char *)&v403);
      v267 = std::string::insert(&v403, 0, "section ");
      v268 = v267->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
      v425.__r_.__value_.__r.__words[2] = v268;
      v267->__r_.__value_.__l.__size_ = 0;
      v267->__r_.__value_.__r.__words[2] = 0;
      v267->__r_.__value_.__r.__words[0] = 0;
      v269 = std::string::append(&v425, " has an invalid sh_size (");
      v270 = v269->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
      v401.__r_.__value_.__r.__words[2] = v270;
      v269->__r_.__value_.__l.__size_ = 0;
      v269->__r_.__value_.__r.__words[2] = 0;
      v269->__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
      __p.__r_.__value_.__r.__words[2] = v22;
      v405 = 2052;
      p_p = &__p;
      *(_QWORD *)&v409 = ") which is not a multiple of its sh_entsize (";
      v410 = 770;
      v271 = (const char *)bswap32(v10[9]);
      *(_QWORD *)&__dst = &p_p;
      v414 = v271;
      v415 = 2050;
      v272 = ")";
LABEL_465:
      p_dst = (std::string *)&__dst;
      v417.i64[1] = (uint64_t)v272;
      LOWORD(v419) = 770;
      v254 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v290 = qword_1EF8F7238[0];
      *(_QWORD *)v254 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
      *(_QWORD *)(v254 + 32) = 3;
      *(_QWORD *)(v254 + 40) = v290;
      *(_BYTE *)(v254 + 48) = 1;
      v257 = v382;
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v401.__r_.__value_.__l.__data_);
      if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v425.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v403.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_494;
      v258 = (void *)v403.__r_.__value_.__r.__words[0];
      goto LABEL_481;
    }
    v23 = bswap32(v10[4]);
    if (__CFADD__((_DWORD)v23, (_DWORD)v22))
    {
      sub_1C59AD9D0(v6, (uint64_t)v10, (char *)&v403);
      v285 = std::string::insert(&v403, 0, "section ");
      v286 = v285->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v425.__r_.__value_.__l.__data_ = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
      v425.__r_.__value_.__r.__words[2] = v286;
      v285->__r_.__value_.__l.__size_ = 0;
      v285->__r_.__value_.__r.__words[2] = 0;
      v285->__r_.__value_.__r.__words[0] = 0;
      v287 = std::string::append(&v425, " has a sh_offset (0x");
      v288 = v287->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v401.__r_.__value_.__l.__data_ = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
      v401.__r_.__value_.__r.__words[2] = v288;
      v287->__r_.__value_.__l.__size_ = 0;
      v287->__r_.__value_.__r.__words[2] = 0;
      v287->__r_.__value_.__r.__words[0] = 0;
      v400.__r_.__value_.__r.__words[0] = v23;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v400;
      v405 = 3588;
      p_p = &__p;
      *(_QWORD *)&v409 = ") + sh_size (0x";
      v410 = 770;
      v424.__r_.__value_.__r.__words[0] = v22;
      *(_QWORD *)&__dst = &p_p;
      v414 = (const char *)&v424;
      v415 = 3586;
      v272 = ") that cannot be represented";
      goto LABEL_465;
    }
    if (*((_QWORD *)v3 + 8) < (unint64_t)(v22 + v23))
      break;
    v24 = v21;
    if (v21 >= v22 >> 1)
    {
      v401.__r_.__value_.__r.__words[0] = 2 * v21;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"can't read an entry at 0x";
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v401;
      v405 = 3587;
      p_p = &__p;
      *(_QWORD *)&v409 = ": it goes past the end of the section (0x";
      v410 = 770;
      v425.__r_.__value_.__r.__words[0] = v22;
      *(_QWORD *)&__dst = &p_p;
      v414 = (const char *)&v425;
      v415 = 3586;
      p_dst = (std::string *)&__dst;
      v417.i64[1] = (uint64_t)")";
      LOWORD(v419) = 770;
      v254 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v304 = qword_1EF8F7238[0];
      *(_QWORD *)v254 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
      *(_QWORD *)(v254 + 32) = 3;
      *(_QWORD *)(v254 + 40) = v304;
      *(_BYTE *)(v254 + 48) = 1;
      v257 = v382;
      goto LABEL_494;
    }
    v25 = *v6;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v395 + 40))(&v424, v395, v394);
    if ((v424.__r_.__value_.__s.__data_[8] & 1) == 0)
    {
      LOBYTE(v399) = 0;
      v2 = v2 & 0xFFFFFFFFFFFF0000 | v424.__r_.__value_.__s.__data_[0] & 1 | 0x100;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolVersionByIndex(bswap32(*(unsigned __int16 *)(v25 + v23 + 2 * v24)) >> 16, &v399, (uint64_t)v420, v2, (uint64_t)&v425);
      if ((v425.__r_.__value_.__s.__data_[16] & 1) == 0)
      {
        v383 = v2;
        v26 = v3;
        v27 = v6;
        v28 = v9;
        v29 = (const void *)v425.__r_.__value_.__r.__words[0];
        if (!v425.__r_.__value_.__r.__words[0])
        {
          __dst = 0uLL;
          v414 = 0;
          goto LABEL_39;
        }
        v30 = v425.__r_.__value_.__l.__size_;
        if (v425.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_592;
        if (v425.__r_.__value_.__l.__size_ >= 0x17)
        {
          v32 = (v425.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v425.__r_.__value_.__l.__size_ | 7) != 0x17)
            v32 = v425.__r_.__value_.__l.__size_ | 7;
          v33 = v32 + 1;
          v31 = (__int128 *)operator new(v32 + 1);
          *((_QWORD *)&__dst + 1) = v30;
          v414 = (const char *)(v33 | 0x8000000000000000);
          *(_QWORD *)&__dst = v31;
        }
        else
        {
          HIBYTE(v414) = v425.__r_.__value_.__s.__data_[8];
          v31 = &__dst;
          if (!v425.__r_.__value_.__l.__size_)
          {
LABEL_38:
            *((_BYTE *)v31 + v30) = 0;
LABEL_39:
            v34 = v399;
            v35 = v397.u64[1];
            v36 = v398;
            if (v397.i64[1] >= (unint64_t)v398)
            {
              v38 = v397.i64[0];
              v39 = (v397.i64[1] - v397.i64[0]) >> 5;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 59)
                goto LABEL_592;
              if ((uint64_t)&v398[-v397.i64[0]] >> 4 > v40)
                v40 = (uint64_t)&v398[-v397.i64[0]] >> 4;
              if ((unint64_t)&v398[-v397.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
                v41 = 0x7FFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              v418 = 0;
              v419 = &v398;
              if (v41 >> 59)
                goto LABEL_593;
              v42 = (char *)operator new(32 * v41);
              v43 = &v42[32 * v39];
              *(_OWORD *)v43 = __dst;
              *((_QWORD *)v43 + 2) = v414;
              v43[24] = v34;
              if (v35 == v38)
              {
                v46 = vdupq_n_s64(v35);
                v44 = &v42[32 * v39];
              }
              else
              {
                v44 = &v42[32 * v39];
                do
                {
                  v45 = *(_OWORD *)(v35 - 32);
                  *((_QWORD *)v44 - 2) = *(_QWORD *)(v35 - 16);
                  *((_OWORD *)v44 - 2) = v45;
                  *(_QWORD *)(v35 - 24) = 0;
                  *(_QWORD *)(v35 - 16) = 0;
                  *(_QWORD *)(v35 - 32) = 0;
                  *(v44 - 8) = *(_BYTE *)(v35 - 8);
                  v44 -= 32;
                  v35 -= 32;
                }
                while (v35 != v38);
                v46 = v397;
                v36 = v398;
              }
              v37 = (unint64_t)(v43 + 32);
              v397.i64[0] = (uint64_t)v44;
              v397.i64[1] = (uint64_t)(v43 + 32);
              v417 = v46;
              v398 = &v42[32 * v41];
              v418 = v36;
              p_dst = (std::string *)v46.i64[0];
              sub_1C5465AA0((uint64_t)&p_dst);
            }
            else
            {
              *(_OWORD *)v397.i64[1] = __dst;
              *(_QWORD *)(v35 + 16) = v414;
              *(_BYTE *)(v35 + 24) = v34;
              v37 = v35 + 32;
            }
            v9 = v28;
            v47 = 0;
            v397.i64[1] = v37;
            v6 = v27;
            v3 = v26;
            v2 = v383;
LABEL_55:
            if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
            {
              v48 = v425.__r_.__value_.__r.__words[0];
              v425.__r_.__value_.__r.__words[0] = 0;
              if (v48)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v48 + 8))(v48);
            }
            goto LABEL_58;
          }
        }
        memmove(v31, v29, v30);
        goto LABEL_38;
      }
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to get a version for entry ";
      v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
      v402 = 2563;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" of ";
      v405 = 770;
      sub_1C59AC748(&v403, v6, (uint64_t)v10);
      v53 = v405;
      if (v405 == 1)
      {
        v60 = &v403;
        p_p = &v403;
        v409 = v392;
        v410 = 260;
        data = v406;
        v412 = WORD2(v406);
        v54 = 4;
        v61 = v408;
      }
      else
      {
        if (!(_BYTE)v405)
        {
          v54 = 0;
          v410 = 256;
          v55 = 1;
LABEL_88:
          LOBYTE(v415) = v54;
          HIBYTE(v415) = v55;
          if ((v425.__r_.__value_.__s.__data_[16] & 1) != 0)
          {
            v63 = (char *)v425.__r_.__value_.__r.__words[0];
            v425.__r_.__value_.__r.__words[0] = 0;
          }
          else
          {
            v63 = 0;
          }
          v390 = v63;
          sub_1C61D2548(&v390, &v400);
          v64 = v415;
          if ((_BYTE)v415)
          {
            if (v415 == 1)
            {
              p_dst = &v400;
              v65 = 1;
              v64 = 4;
            }
            else
            {
              if (HIBYTE(v415) != 1)
                v64 = 2;
              v66 = (void **)&__dst;
              if (HIBYTE(v415) == 1)
                v66 = (void **)__dst;
              p_dst = (std::string *)v66;
              v417.i64[0] = *((_QWORD *)&__dst + 1);
              v417.i64[1] = (uint64_t)&v400;
              v65 = 4;
            }
          }
          else
          {
            v65 = 1;
          }
          LOBYTE(v419) = v64;
          BYTE1(v419) = v65;
          v67 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v69 = qword_1EF8F7238[0];
          *(_QWORD *)v67 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v67 + 8));
          *(_QWORD *)(v67 + 32) = 3;
          *(_QWORD *)(v67 + 40) = v69;
          *(_BYTE *)(v67 + 48) = 1;
          *(_BYTE *)(v382 + 24) |= 1u;
          *(_QWORD *)v382 = v67;
          if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v400.__r_.__value_.__l.__data_);
          if (v390)
            (*(void (**)(char *))(*(_QWORD *)v390 + 8))(v390);
          if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v403.__r_.__value_.__l.__data_);
          v47 = 1;
          goto LABEL_55;
        }
        v60 = (std::string *)&p_p;
        v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v54 = 2;
        if (HIBYTE(v405) != 1)
        {
          v53 = 2;
          v62 = &__p;
        }
        p_p = v62;
        v408 = __p.__r_.__value_.__l.__size_;
        *(_QWORD *)&v409 = &v403;
        LOBYTE(v410) = v53;
        v61 = 4;
        HIBYTE(v410) = 4;
      }
      *(_QWORD *)&__dst = v60;
      *((_QWORD *)&__dst + 1) = v61;
      v55 = 3;
      v414 = ": ";
      goto LABEL_88;
    }
    p_p = (std::string *)"unable to read flags for symbol with index ";
    *(_QWORD *)&v409 = &v396;
    v410 = 2563;
    *(_QWORD *)&__dst = &p_p;
    v414 = ": ";
    v415 = 770;
    v50 = (char *)v424.__r_.__value_.__r.__words[0];
    v424.__r_.__value_.__r.__words[0] = 0;
    v391 = v50;
    sub_1C61D2548(&v391, &__p);
    v51 = v415;
    if ((_BYTE)v415)
    {
      if (v415 == 1)
      {
        p_dst = &__p;
        v52 = 1;
        v51 = 4;
      }
      else
      {
        if (HIBYTE(v415) != 1)
          v51 = 2;
        v56 = (void **)&__dst;
        if (HIBYTE(v415) == 1)
          v56 = (void **)__dst;
        p_dst = (std::string *)v56;
        v417.i64[0] = *((_QWORD *)&__dst + 1);
        v417.i64[1] = (uint64_t)&__p;
        v52 = 4;
      }
    }
    else
    {
      v52 = 1;
    }
    LOBYTE(v419) = v51;
    BYTE1(v419) = v52;
    v57 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v59 = qword_1EF8F7238[0];
    *(_QWORD *)v57 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v57 + 8));
    *(_QWORD *)(v57 + 32) = 3;
    *(_QWORD *)(v57 + 40) = v59;
    *(_BYTE *)(v57 + 48) = 1;
    *(_BYTE *)(v382 + 24) |= 1u;
    *(_QWORD *)v382 = v57;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v391)
      (*(void (**)(char *))(*(_QWORD *)v391 + 8))(v391);
    v47 = 1;
LABEL_58:
    if ((v424.__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      v49 = v424.__r_.__value_.__r.__words[0];
      v424.__r_.__value_.__r.__words[0] = 0;
      if (v49)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v49 + 8))(v49);
    }
    if (v47)
      goto LABEL_433;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v395 + 24))(v395, &v394);
    if (v394 == v9)
      goto LABEL_431;
  }
  sub_1C59AD9D0(v6, (uint64_t)v10, (char *)&v424);
  v291 = std::string::insert(&v424, 0, "section ");
  v292 = v291->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v400.__r_.__value_.__l.__data_ = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
  v400.__r_.__value_.__r.__words[2] = v292;
  v291->__r_.__value_.__l.__size_ = 0;
  v291->__r_.__value_.__r.__words[2] = 0;
  v291->__r_.__value_.__r.__words[0] = 0;
  v293 = std::string::append(&v400, " has a sh_offset (0x");
  v294 = v293->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v293->__r_.__value_.__l.__data_;
  v403.__r_.__value_.__r.__words[2] = v294;
  v293->__r_.__value_.__l.__size_ = 0;
  v293->__r_.__value_.__r.__words[2] = 0;
  v293->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&v392 = v23;
  v425.__r_.__value_.__r.__words[0] = (std::string::size_type)&v403;
  v425.__r_.__value_.__r.__words[2] = (std::string::size_type)&v392;
  v426 = 3588;
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
  v401.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
  v402 = 770;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v406;
  v405 = 3586;
  v406 = v22;
  p_p = &__p;
  *(_QWORD *)&v409 = ") that is greater than the file size (0x";
  v410 = 770;
  v399 = *((_QWORD *)v3 + 8);
  *(_QWORD *)&__dst = &p_p;
  v414 = (const char *)&v399;
  v415 = 3586;
  p_dst = (std::string *)&__dst;
  v417.i64[1] = (uint64_t)")";
  LOWORD(v419) = 770;
  v254 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v296 = qword_1EF8F7238[0];
  *(_QWORD *)v254 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v254 + 8));
  *(_QWORD *)(v254 + 32) = 3;
  *(_QWORD *)(v254 + 40) = v296;
  *(_BYTE *)(v254 + 48) = 1;
  v257 = v382;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v403.__r_.__value_.__l.__data_);
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
  {
    v258 = (void *)v424.__r_.__value_.__r.__words[0];
    goto LABEL_481;
  }
LABEL_494:
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to read an entry with index ";
  v401.__r_.__value_.__r.__words[2] = (std::string::size_type)&v396;
  v402 = 2563;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" from ";
  v405 = 770;
  v305 = &v425;
  sub_1C59AC748(&v425, v6, (uint64_t)v10);
LABEL_499:
  v308 = v405;
  if (v405 == 1)
  {
    p_p = &v425;
    v409 = *(_OWORD *)&v400.__r_.__value_.__l.__data_;
    v410 = 260;
    data = (int)v424.__r_.__value_.__l.__data_;
    v412 = WORD2(v424.__r_.__value_.__r.__words[0]);
    v311 = 4;
    v312 = v408;
  }
  else
  {
    if (!(_BYTE)v405)
    {
      v410 = 256;
      v415 = 256;
      v393 = (char *)v254;
      sub_1C61D2548(&v393, &v403);
      v309 = 0;
      v310 = 1;
      goto LABEL_507;
    }
    v313 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v311 = 2;
    if (HIBYTE(v405) != 1)
    {
      v308 = 2;
      v313 = &__p;
    }
    p_p = v313;
    v408 = __p.__r_.__value_.__l.__size_;
    *(_QWORD *)&v409 = &v425;
    LOBYTE(v410) = v308;
    v312 = 4;
    HIBYTE(v410) = 4;
    v305 = (std::string *)&p_p;
  }
  *(_QWORD *)&__dst = v305;
  *((_QWORD *)&__dst + 1) = v312;
  v414 = ": ";
  LOBYTE(v415) = v311;
  HIBYTE(v415) = 3;
  v393 = (char *)v254;
  sub_1C61D2548(&v393, &v403);
  p_dst = (std::string *)&__dst;
  v417.i64[1] = (uint64_t)&v403;
  v310 = 4;
  v309 = 2;
LABEL_507:
  LOBYTE(v419) = v309;
  BYTE1(v419) = v310;
  v314 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v316 = qword_1EF8F7238[0];
  *(_QWORD *)v314 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&p_dst, (_QWORD *)(v314 + 8));
  *(_QWORD *)(v314 + 32) = 3;
  *(_QWORD *)(v314 + 40) = v316;
  *(_BYTE *)(v314 + 48) = 1;
  *(_BYTE *)(v257 + 24) |= 1u;
  *(_QWORD *)v257 = v314;
  if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v403.__r_.__value_.__l.__data_);
  v317 = v393;
  if (v393)
LABEL_512:
    (*(void (**)(char *))(*(_QWORD *)v317 + 8))(v317);
LABEL_513:
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v425.__r_.__value_.__l.__data_);
LABEL_433:
  p_dst = (std::string *)&v397;
  sub_1C5464DAC((void ***)&p_dst);
  if ((v421 & 1) == 0)
  {
LABEL_430:
    sub_1C59C5DD4(v420);
    return;
  }
LABEL_434:
  v248 = v420[0];
  v420[0] = 0;
  if (v248)
    (*(void (**)(char *))(*(_QWORD *)v248 + 8))(v248);
}

void sub_1C59CE290(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62CF6C8((uint64_t)&v32, a1 + 7, a2, HIDWORD(a2));
  if ((v33 & 1) != 0)
  {
    v7 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, a2, (uint64_t)&v30);
  v8 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, *(_DWORD *)(v30 + 24), (uint64_t)&v28);
    v10 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v10;
LABEL_16:
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      goto LABEL_6;
    }
    *(_QWORD *)&v24 = sub_1C59CE874;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_12:
      if ((v29 & 1) != 0)
      {
        v12 = v28;
        v28 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      goto LABEL_16;
    }
    sub_1C62CF83C((uint64_t)&v24, v32, v26[0], v26[1]);
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      v14 = v25 & 1;
      if ((v32[3] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 120))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v14)
          {
            v15 = (char *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v15 = 0;
          }
          v19 = v15;
          sub_1C4D62BD4(&v19, &v20);
          if (v19)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v17 = v21;
            v21 = 0;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
          if (v14 && (_QWORD)v24)
            (*(void (**)(_QWORD))(*(_QWORD *)v24 + 8))(v24);
          goto LABEL_40;
        }
        v16 = v21;
        v21 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v14;
      if (v14)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_40;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_40:
    if ((v27 & 1) != 0)
    {
      v18 = v26[0];
      v26[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    goto LABEL_12;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v8;
LABEL_6:
  if ((v33 & 1) != 0)
  {
    v9 = v32;
    v32 = 0;
    if (v9)
      (*(void (**)(int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

_QWORD *sub_1C59CE58C@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a2[1] == 8)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = sub_1C599ECDC((unint64_t *)v11, a2[4] + *(_QWORD *)&v11[0], a2[5], &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = a2[5];
      v10 = *v6 + a2[4];
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  return result;
}

unint64_t sub_1C59CE63C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v8;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1);
  v5 = a2[1];
  if (v5 == 4 || v5 == 9)
  {
    v8 = sub_1C59CEA6C((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, *((_DWORD *)v8 + 6), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((uint64_t)&v14, 1);
    }
    return v4 | ((unint64_t)(a2[5] / a2[9] + HIDWORD(v4)) << 32);
  }
  return v4;
}

uint64_t sub_1C59CE744(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C59CE7D4(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + 40 * v2[1];
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void sub_1C59CE874(llvm::Twine *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v6;

  v4 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v6 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str(a1, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = 3;
  *(_QWORD *)(v4 + 40) = v6;
  *(_BYTE *)(v4 + 48) = 1;
  *a2 = v4;
}

void sub_1C59CE920(uint64_t *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5)
{
  int v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  __int16 v26;

  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = __p;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v8 = *a4;
  v9 = *a5;
  v23[0] = &unk_1E813F178;
  v23[1] = "st_name (0x%x) is past the end of the string table of size 0x%zx";
  v24 = v8;
  v25 = v9;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
  v10 = v20;
  v11 = operator new();
  v26 = 260;
  v23[0] = v10;
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(v11 + 40) = a3;
  *(_BYTE *)(v11 + 48) = 1;
  *a1 = v11;
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

_QWORD *sub_1C59CEA6C(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((uint64_t)&v8, 1);
  }
  return v10;
}

_QWORD *sub_1C59CEB10(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62CFB60((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

_QWORD *sub_1C59CEBB8(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62CFE30((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

char *sub_1C59CEC60(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    sub_1C4764EE4();
  v12 = (char *)operator new(16 * v9);
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v14 = v13 + 16;
  if (v4 == v3)
  {
    v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

void sub_1C59CED48(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D2020((uint64_t)&v32, a1 + 7, a2, HIDWORD(a2));
  if ((v33 & 1) != 0)
  {
    v7 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, a2, (uint64_t)&v30);
  v8 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 24)), (uint64_t)&v28);
    v10 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v10;
LABEL_16:
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      goto LABEL_6;
    }
    *(_QWORD *)&v24 = sub_1C59CE874;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_12:
      if ((v29 & 1) != 0)
      {
        v12 = v28;
        v28 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      goto LABEL_16;
    }
    sub_1C62D2194((uint64_t)&v24, v32, v26[0], v26[1]);
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      v14 = v25 & 1;
      if ((v32[3] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 120))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v14)
          {
            v15 = (char *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v15 = 0;
          }
          v19 = v15;
          sub_1C4D62BD4(&v19, &v20);
          if (v19)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v17 = v21;
            v21 = 0;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
          if (v14 && (_QWORD)v24)
            (*(void (**)(_QWORD))(*(_QWORD *)v24 + 8))(v24);
          goto LABEL_40;
        }
        v16 = v21;
        v21 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v14;
      if (v14)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_40;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_40:
    if ((v27 & 1) != 0)
    {
      v18 = v26[0];
      v26[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    goto LABEL_12;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v8;
LABEL_6:
  if ((v33 & 1) != 0)
  {
    v9 = v32;
    v32 = 0;
    if (v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

_QWORD *sub_1C59CF048@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a2[1] == 0x8000000)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = sub_1C599ECDC((unint64_t *)v11, bswap32(a2[4]) + *(_QWORD *)&v11[0], bswap32(a2[5]), &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = *v6 + bswap32(a2[4]);
      v10 = bswap32(a2[5]);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  return result;
}

unint64_t sub_1C59CF10C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v8;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1);
  v5 = a2[1];
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    v8 = sub_1C59CF358((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, bswap32(*((_DWORD *)v8 + 6)), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((uint64_t)&v14, 1);
    }
    return v4 | ((unint64_t)(bswap32(a2[5]) / bswap32(a2[9]) + HIDWORD(v4)) << 32);
  }
  return v4;
}

uint64_t sub_1C59CF228(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C59CF2B8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + 40 * v2[1];
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

_QWORD *sub_1C59CF358(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((uint64_t)&v8, 1);
  }
  return v10;
}

_QWORD *sub_1C59CF3FC(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62D2398((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

_QWORD *sub_1C59CF4A4(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62D266C((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

void sub_1C59CF54C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D4824((uint64_t)&v32, a1 + 7, a2, HIDWORD(a2));
  if ((v33 & 1) != 0)
  {
    v7 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, a2, (uint64_t)&v30);
  v8 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, *(_DWORD *)(v30 + 40), (uint64_t)&v28);
    v10 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v10;
LABEL_16:
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      goto LABEL_6;
    }
    *(_QWORD *)&v24 = sub_1C59CE874;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_12:
      if ((v29 & 1) != 0)
      {
        v12 = v28;
        v28 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      goto LABEL_16;
    }
    sub_1C62CF83C((uint64_t)&v24, v32, v26[0], v26[1]);
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      v14 = v25 & 1;
      if ((v32[1] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 120))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v14)
          {
            v15 = (char *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v15 = 0;
          }
          v19 = v15;
          sub_1C4D62BD4(&v19, &v20);
          if (v19)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v17 = v21;
            v21 = 0;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
          if (v14 && (_QWORD)v24)
            (*(void (**)(_QWORD))(*(_QWORD *)v24 + 8))(v24);
          goto LABEL_40;
        }
        v16 = v21;
        v21 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v14;
      if (v14)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_40;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_40:
    if ((v27 & 1) != 0)
    {
      v18 = v26[0];
      v26[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    goto LABEL_12;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v8;
LABEL_6:
  if ((v33 & 1) != 0)
  {
    v9 = v32;
    v32 = 0;
    if (v9)
      (*(void (**)(int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

_QWORD *sub_1C59CF848@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (*(_DWORD *)(a2 + 4) == 8)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = sub_1C599ECDC((unint64_t *)v11, *(_QWORD *)(a2 + 24) + *(_QWORD *)&v11[0], *(_QWORD *)(a2 + 32), &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *v6 + *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  return result;
}

uint64_t sub_1C59CF8F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v8;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    v8 = sub_1C59CFBD0((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, *((_DWORD *)v8 + 10), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((uint64_t)&v14, 1);
    }
    v4 += (*(_QWORD *)(a2 + 32) / *(_QWORD *)(a2 + 56)) << 32;
  }
  return v4;
}

uint64_t sub_1C59CF9F8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C59CFA88(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + (v2[1] << 6);
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t sub_1C59CFB24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v6 = v10;
  v7 = v9;
  v8 = ((unint64_t)(a2 - v9) >> 6);
  if ((v10 & 1) != 0)
  {
    v9 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return v8 | ((unint64_t)a3 << 32);
}

_QWORD *sub_1C59CFBD0(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((uint64_t)&v8, 1);
  }
  return v10;
}

_QWORD *sub_1C59CFC74(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62D4A18((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

_QWORD *sub_1C59CFD1C(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62D4CE4((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

void sub_1C59CFDC4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 7;
  sub_1C62D6F70((uint64_t)&v32, a1 + 7, a2, HIDWORD(a2));
  if ((v33 & 1) != 0)
  {
    v7 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, a2, (uint64_t)&v30);
  v8 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 40)), (uint64_t)&v28);
    v10 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v10;
LABEL_16:
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      goto LABEL_6;
    }
    *(_QWORD *)&v24 = sub_1C59CE874;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_12:
      if ((v29 & 1) != 0)
      {
        v12 = v28;
        v28 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      goto LABEL_16;
    }
    sub_1C62D2194((uint64_t)&v24, v32, v26[0], v26[1]);
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      v14 = v25 & 1;
      if ((v32[1] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 120))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v14)
          {
            v15 = (char *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v15 = 0;
          }
          v19 = v15;
          sub_1C4D62BD4(&v19, &v20);
          if (v19)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v17 = v21;
            v21 = 0;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
          if (v14 && (_QWORD)v24)
            (*(void (**)(_QWORD))(*(_QWORD *)v24 + 8))(v24);
          goto LABEL_40;
        }
        v16 = v21;
        v21 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v14;
      if (v14)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_40;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_40:
    if ((v27 & 1) != 0)
    {
      v18 = v26[0];
      v26[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    goto LABEL_12;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v8;
LABEL_6:
  if ((v33 & 1) != 0)
  {
    v9 = v32;
    v32 = 0;
    if (v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
}

_QWORD *sub_1C59D00C4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (*(_DWORD *)(a2 + 4) == 0x8000000)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = sub_1C599ECDC((unint64_t *)v11, bswap64(*(_QWORD *)(a2 + 24)) + *(_QWORD *)&v11[0], bswap64(*(_QWORD *)(a2 + 32)), &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = *v6 + bswap64(*(_QWORD *)(a2 + 24));
      v10 = bswap64(*(_QWORD *)(a2 + 32));
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  return result;
}

uint64_t sub_1C59D0188(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v8;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    v8 = sub_1C59D0474((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, bswap32(*((_DWORD *)v8 + 10)), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((uint64_t)&v14, 1);
    }
    v4 += (bswap64(*(_QWORD *)(a2 + 32)) / bswap64(*(_QWORD *)(a2 + 56))) << 32;
  }
  return v4;
}

uint64_t sub_1C59D029C(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C59D032C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + (v2[1] << 6);
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t sub_1C59D03C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v6 = v10;
  v7 = v9;
  v8 = ((unint64_t)(a2 - v9) >> 6);
  if ((v10 & 1) != 0)
  {
    v9 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return v8 | ((unint64_t)a3 << 32);
}

_QWORD *sub_1C59D0474(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((uint64_t)&v8, 1);
  }
  return v10;
}

_QWORD *sub_1C59D0518(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62D7164((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

_QWORD *sub_1C59D05C0(uint64_t a1, uint64_t a2)
{
  const std::error_category *v3;
  _QWORD *v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C62D7434((uint64_t)&v9, (_QWORD *)(a1 + 56), a2, HIDWORD(a2));
  if ((v10 & 1) != 0)
  {
    v4 = v9;
    *(_QWORD *)&v5.__val_ = llvm::errorToErrorCode(&v4);
    v5.__cat_ = v3;
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  return v9;
}

uint64_t llvm::object::GenericBinaryError::GenericBinaryError(uint64_t a1, llvm::Twine *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1C62D7954(a1);
  *v4 = off_1E8189218;
  llvm::Twine::str(a2, v4 + 3);
  return a1;
}

unint64_t llvm::object::object_category(llvm::object *this)
{
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  return qword_1EF8F7238[0];
}

char *llvm::object::isNotObjectErrorInvalidFileType@<X0>(char *result@<X0>, char **a2@<X8>)
{
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v3 = *(char **)result;
  *(_QWORD *)result = 0;
  if (v3)
  {
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      v4 = (uint64_t *)*((_QWORD *)v3 + 1);
      v5 = (uint64_t *)*((_QWORD *)v3 + 2);
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v11 = v6;
          v7 = *v4;
          *v4 = 0;
          v9 = v7;
          sub_1C59D0B9C(&v10, &v9);
          sub_1C6174794(&v11, &v10, &v12);
          v6 = v12;
          *a2 = v12;
          v12 = 0;
          if (v10)
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
          v8 = v9;
          v9 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (v11)
            (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
          ++v4;
        }
        while (v4 != v5);
      }
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
    }
    else
    {
      v12 = v3;
      sub_1C59D0B9C(a2, &v12);
      result = v12;
      if (v12)
        return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void sub_1C59D0838(uint64_t a1, llvm::raw_ostream *a2)
{
  std::string *v3;
  size_t size;
  std::string v5;

  std::error_code::message(&v5, (const std::error_code *)(a1 + 8));
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v5;
  else
    v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v5.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v5.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v3, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t sub_1C59D08A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C59D08AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8189218;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1C59D08E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8189218;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C59D0934()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E81892B8;
  return result;
}

uint64_t sub_1C59D0968(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C59D0980(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C59D09A4()
{
  return "llvm.object";
}

void sub_1C59D09B0(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

char *sub_1C59D09DC()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_1C86516D0;
  strcpy(result, "No object file for requested architecture");
  return result;
}

void sub_1C59D0B9C(_QWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;

  v4 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ECError::ID);
  v5 = *a2;
  *a2 = 0;
  if (v4)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v8 = v7;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = v8 == qword_1EF8F7238[0] && v6 == 2;
    if (v10)
      v11 = 0;
    else
      v11 = v5;
    *a1 = v11;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    *a1 = v5;
  }
}

llvm::raw_ostream *printFaultType(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if ((_DWORD)result == 1)
  {
    v3 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v3) <= 0xB)
      return llvm::raw_ostream::write(this, "FaultingLoad", 0xCuLL);
    *(_DWORD *)(v3 + 8) = 1684107084;
    *(_QWORD *)v3 = *(_QWORD *)"FaultingLoad";
    v5 = *((_QWORD *)this + 4) + 12;
    goto LABEL_13;
  }
  if ((_DWORD)result != 2)
  {
    v4 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v4 <= 0xCuLL)
      return llvm::raw_ostream::write(this, "FaultingStore", 0xDuLL);
    qmemcpy(v4, "FaultingStore", 13);
    v5 = *((_QWORD *)this + 4) + 13;
    goto LABEL_13;
  }
  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v2) > 0x10)
  {
    *(_BYTE *)(v2 + 16) = 101;
    *(_OWORD *)v2 = *(_OWORD *)"FaultingLoadStore";
    v5 = *((_QWORD *)this + 4) + 17;
LABEL_13:
    *((_QWORD *)this + 4) = v5;
    return result;
  }
  return llvm::raw_ostream::write(this, "FaultingLoadStore", 0x11uLL);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, unsigned int **a2)
{
  uint64_t v4;
  void *v5;
  llvm::raw_ostream *v6;
  void *v7;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0xB)
  {
    *(_DWORD *)(v4 + 8) = 540697710;
    *(_QWORD *)v4 = *(_QWORD *)"Fault kind: ";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "Fault kind: ", 0xCuLL);
  }
  printFaultType((llvm::raw_ostream *)**a2, this);
  v5 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x15uLL)
  {
    qmemcpy(v5, ", faulting PC offset: ", 22);
    *((_QWORD *)this + 4) += 22;
    v6 = this;
  }
  else
  {
    v6 = llvm::raw_ostream::write(this, ", faulting PC offset: ", 0x16uLL);
  }
  sub_1C5E21910(v6, (*a2)[1], 0, 0, 0);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x15uLL)
  {
    qmemcpy(v7, ", handling PC offset: ", 22);
    *((_QWORD *)v6 + 4) += 22;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, ", handling PC offset: ", 0x16uLL);
  }
  sub_1C5E21910(v6, (*a2)[2], 0, 0, 0);
  return this;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, unsigned __int8 **a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  __int16 v18;
  char v19;

  v3 = this;
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 8)
  {
    *(_BYTE *)(v4 + 8) = 32;
    *(_QWORD *)v4 = *(_QWORD *)"Version: ";
    *((_QWORD *)this + 4) += 9;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "Version: ", 9uLL);
  }
  v15 = **a2;
  v16 = 0;
  v17 = 2;
  v18 = 1;
  v19 = 1;
  v5 = llvm::raw_ostream::operator<<(this, (uint64_t)&v15);
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v6)
  {
    llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *v6 = 10;
    ++*((_QWORD *)v5 + 4);
  }
  v7 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v7 > 0xDuLL)
  {
    qmemcpy(v7, "NumFunctions: ", 14);
    *((_QWORD *)v3 + 4) += 14;
    v8 = v3;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v3, "NumFunctions: ", 0xEuLL);
  }
  sub_1C5E21910(v8, *((unsigned int *)*a2 + 1), 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = *((_DWORD *)*a2 + 1);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      if (v13)
      {
        v12 += 12 * *(unsigned int *)(v12 + 8) + 16;
      }
      else
      {
        v11 = a2[1];
        v12 = (uint64_t)(*a2 + 8);
      }
      v15 = v12;
      v16 = v11;
      llvm::operator<<(v3, (uint64_t)&v15);
      ++v13;
    }
    while (v10 != v13);
  }
  return v3;
}

void llvm::object::IRObjectFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 8;
}

void llvm::object::IRObjectFile::printSymbolName(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::ModuleSymbolTable::printSymbolName(a1 + 72, a2, *a3);
  *a4 = 0;
}

uint64_t llvm::object::IRObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = llvm::ModuleSymbolTable::getSymbolFlags(a1 + 72, *a2);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = result;
  return result;
}

__n128 llvm::object::IRObjectFile::findBitcodeInObject@<Q0>(__n128 *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(__n128 *, const llvm::object::ObjectFile *))(this->n128_u64[0] + 344))(this, a2);
  v7 = v6;
  v8 = (*(uint64_t (**)(__n128 *))(this->n128_u64[0] + 352))(this);
  v20 = v5;
  v21 = v7;
  if (v7 == v9 && v5 == v8)
    goto LABEL_15;
  v11 = v8;
  v12 = v9;
  while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 224))(v7, v5))
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 128))(v21, &v20);
    v5 = v20;
    v7 = v21;
    if (v21 == v12 && v20 == v11)
      goto LABEL_15;
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 168))(&v22, v21, v20);
  v15 = v22;
  if ((v24 & 1) != 0)
  {
    a3[2].n128_u8[0] |= 1u;
    a3->n128_u64[0] = v15;
    return result;
  }
  v16 = v23;
  if (v23 <= 1)
  {
LABEL_15:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v18 = qword_1EF8F7238[0];
    v19 = (_QWORD *)operator new();
    *v19 = &off_1E81A0D28;
    v19[1] = 7;
    v19[2] = v18;
    a3[2].n128_u8[0] |= 1u;
    a3->n128_u64[0] = (unint64_t)v19;
  }
  else
  {
    a3[2].n128_u8[0] &= ~1u;
    a3->n128_u64[0] = v15;
    a3->n128_u64[1] = v16;
    result = this[2];
    a3[1] = result;
  }
  return result;
}

void llvm::object::IRObjectFile::create(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  llvm::Module *v18;
  llvm::Module *v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  llvm::Module *v25;
  llvm::Module *v26;
  void *v27[2];
  void *v28;
  _OWORD v29[2];
  __int128 v30[4];
  void *__p[2];
  void *v32;
  _OWORD v33[2];
  _OWORD v34[2];
  char v35;
  uint64_t v36;
  char v37;
  __int128 *v38;
  __int128 *v39;
  char v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v34[0] = *a1;
  v34[1] = v5;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v34, (uint64_t)&v41);
  if ((v43 & 1) != 0)
  {
    v20 = (__int128 *)v41;
LABEL_17:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v20;
    return;
  }
  v33[0] = v41;
  v33[1] = v42;
  llvm::getBitcodeModuleList(v33, (uint64_t)&v38);
  if ((v40 & 1) != 0)
  {
    v20 = v38;
    goto LABEL_17;
  }
  __p[0] = 0;
  __p[1] = 0;
  v32 = 0;
  v6 = v38;
  v7 = v39;
  if (v38 == v39)
  {
LABEL_10:
    v14 = operator new();
    v29[0] = v41;
    v29[1] = v42;
    *(_OWORD *)v27 = *(_OWORD *)__p;
    v28 = v32;
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    v15 = llvm::object::IRObjectFile::IRObjectFile(v14, v29, (uint64_t)v27);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v15;
    v16 = v27[0];
    if (v27[0])
    {
      v17 = v27[1];
      while (v17 != v16)
      {
        v19 = (llvm::Module *)*--v17;
        v18 = v19;
        *v17 = 0;
        if (v19)
        {
          llvm::Module::~Module(v18);
          MEMORY[0x1CAA32FC0]();
        }
      }
      operator delete(v16);
    }
  }
  else
  {
    v8 = v38;
    while (1)
    {
      v9 = v8[1];
      v30[0] = *v8;
      v30[1] = v9;
      v10 = v8[3];
      v30[2] = v8[2];
      v30[3] = v10;
      llvm::BitcodeModule::getModuleImpl(v30, a2, 0, 1, 0, (uint64_t)sub_1C5017E80, (uint64_t)&v35, (uint64_t)&v36);
      if ((v37 & 1) != 0)
        break;
      v11 = (char *)__p[1];
      if (__p[1] >= v32)
      {
        v13 = sub_1C59D1B3C((char **)__p, &v36);
      }
      else
      {
        v12 = v36;
        v36 = 0;
        *(_QWORD *)__p[1] = v12;
        v13 = v11 + 8;
      }
      __p[1] = v13;
      sub_1C4FF9CA4((uint64_t)&v36);
      v8 += 4;
      if (v8 == v7)
        goto LABEL_10;
    }
    v21 = v36;
    v36 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v21;
    sub_1C4FF9CA4((uint64_t)&v36);
  }
  v22 = __p[0];
  if (__p[0])
  {
    v23 = __p[1];
    v24 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v26 = (llvm::Module *)*--v23;
        v25 = v26;
        *v23 = 0;
        if (v26)
        {
          llvm::Module::~Module(v25);
          MEMORY[0x1CAA32FC0]();
        }
      }
      while (v23 != v22);
      v24 = __p[0];
    }
    __p[1] = v22;
    operator delete(v24);
  }
  if (v6)
    operator delete(v6);
}

void llvm::object::readIRSymtab(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  _OWORD v15[2];
  void *__p[2];
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[7];
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  _OWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  v18 = &v21;
  v19 = 0;
  v20 = 0;
  v21 = &v23;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v3 = a1[1];
  v15[0] = *a1;
  v15[1] = v3;
  llvm::object::IRObjectFile::findBitcodeInMemBuffer((uint64_t)v15, (uint64_t)v41);
  if ((v42 & 1) != 0)
  {
    v5 = *(_QWORD *)&v41[0];
LABEL_12:
    *(_BYTE *)(a2 + 184) |= 1u;
    *(_QWORD *)a2 = v5;
    goto LABEL_13;
  }
  v14[0] = v41[0];
  v14[1] = v41[1];
  llvm::getBitcodeFileContents((uint64_t)v14, (uint64_t)&v38);
  if ((v40 & 1) != 0)
  {
    v5 = v38;
    goto LABEL_12;
  }
  llvm::irsymtab::readBitcode((uint64_t)&v38, (uint64_t)&v30);
  if ((v37 & 1) != 0)
  {
    v6 = v30;
    v30 = 0;
    *(_BYTE *)(a2 + 184) |= 1u;
    *(_QWORD *)a2 = v6;
LABEL_21:
    v7 = v30;
    v30 = 0;
    if (v7)
      (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_38;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v38;
  v17 = v39;
  v39 = 0;
  v38 = 0uLL;
  v4 = v31;
  if (v31)
  {
    if (v18 != &v21)
    {
      free(v18);
      v4 = v31;
    }
    v18 = v30;
    v19 = v4;
    v20 = v32;
    v30 = &v33;
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v19 = 0;
  }
  v8 = v34;
  if (v34)
  {
    if (v21 != &v23)
    {
      free(v21);
      v8 = v34;
      v4 = v19;
    }
    v21 = v33;
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v35;
    v33 = v36;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    *(_QWORD *)&v22 = 0;
  }
  v27 = v36[4];
  v28 = v36[5];
  v29 = v36[6];
  v23 = v36[0];
  v24 = v36[1];
  v25 = v36[2];
  v26 = v36[3];
  *(_BYTE *)(a2 + 184) &= ~1u;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  v9 = v17;
  *(_QWORD *)(a2 + 24) = a2 + 48;
  *(_QWORD *)(a2 + 16) = v9;
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  if (v4)
  {
    sub_1C4FE6ED8(a2 + 24, (uint64_t)&v18);
    v8 = v22;
  }
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 72;
  if (v8)
    sub_1C4FE6ED8(a2 + 48, (uint64_t)&v21);
  v10 = v28;
  *(_OWORD *)(a2 + 136) = v27;
  *(_OWORD *)(a2 + 152) = v10;
  *(_OWORD *)(a2 + 168) = v29;
  v11 = v24;
  *(_OWORD *)(a2 + 72) = v23;
  *(_OWORD *)(a2 + 88) = v11;
  v12 = v26;
  *(_OWORD *)(a2 + 104) = v25;
  *(_OWORD *)(a2 + 120) = v12;
  if ((v37 & 1) != 0)
    goto LABEL_21;
  if (v33 != v36)
    free(v33);
  if (v30 != &v33)
    free(v30);
LABEL_38:
  v13 = v38;
  if ((v40 & 1) != 0)
  {
    *(_QWORD *)&v38 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else if ((_QWORD)v38)
  {
    *((_QWORD *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
LABEL_13:
  if (v21 != &v23)
    free(v21);
  if (v18 != &v21)
    free(v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

_QWORD *sub_1C59D1A88(_QWORD *a1)
{
  void *v2;

  MEMORY[0x1CAA32FB4](a1[16], 8);
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  sub_1C58EDC0C((uint64_t)(a1 + 1));
  sub_1C4926AE8((uint64_t)(a1 + 1));
  return a1;
}

llvm::Module *sub_1C59D1AD8(llvm::Module *result, _QWORD *a2)
{
  llvm::Module *v3;
  _QWORD *v4;
  llvm::Module *v5;

  v3 = result;
  v4 = (_QWORD *)*((_QWORD *)result + 1);
  while (v4 != a2)
  {
    v5 = (llvm::Module *)*--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      llvm::Module::~Module(result);
      result = (llvm::Module *)MEMORY[0x1CAA32FC0]();
    }
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

char *sub_1C59D1B3C(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  llvm::Module *v17;
  llvm::Module *v18;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = (llvm::Module *)*((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        llvm::Module::~Module(v17);
        MEMORY[0x1CAA32FC0]();
      }
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t llvm::irsymtab::build@<X0>(llvm::Module **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  llvm::Module **v22;
  char *v23;
  uint64_t *v24;
  llvm::Module *v25;
  uint64_t *v26;
  int v27;
  int v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t NamedMetadata;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  size_t *v51;
  const void *v52;
  size_t v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  char *v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  __int128 v90;
  size_t v91;
  char *v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned int v95;
  int SymbolFlags;
  int v97;
  uint64_t ***v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t ****v104;
  uint64_t ***v105;
  int v106;
  int v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t ***v110;
  char *v111;
  uint64_t **v112;
  uint64_t **v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t ****v119;
  uint64_t ***v120;
  int v121;
  int v122;
  uint64_t ***v123;
  char *v124;
  size_t v125;
  size_t v126;
  uint64_t v127;
  const char **v128;
  size_t v129;
  _QWORD *v130;
  uint64_t *v131;
  BOOL v132;
  unsigned int v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  BOOL v141;
  const char *v142;
  char v143;
  char v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v148;
  _QWORD *v149;
  const char *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  __int128 v158;
  char *v159;
  unsigned __int8 v160;
  unsigned __int8 v161;
  char v162;
  BOOL v163;
  char v164;
  uint64_t v165;
  uint64_t ***ResolverFunction;
  llvm::Mangler *v167;
  size_t **v168;
  llvm::Value *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  uint64_t ****v179;
  uint64_t ***v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t ****v185;
  int v186;
  BOOL v187;
  unsigned int v188;
  uint64_t **v189;
  const llvm::GlobalValue *v190;
  const llvm::GlobalValue *v191;
  _QWORD *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t ****v197;
  uint64_t ***v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  __int128 v206;
  unsigned __int8 v207;
  unsigned __int8 v208;
  _QWORD *v209;
  uint64_t ***v210;
  size_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t ****v217;
  uint64_t ***v218;
  _QWORD *v219;
  _QWORD *v220;
  unsigned int v221;
  uint64_t ****v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  size_t v226;
  const void *v227;
  __int128 *v228;
  uint64_t ****v229;
  uint64_t ***v230;
  uint64_t v231;
  uint64_t v232;
  __int128 *v233;
  char *v234;
  char *v235;
  __int128 v236;
  unsigned __int8 v237;
  unsigned __int8 v238;
  int v239;
  void **v240;
  size_t v241;
  _QWORD *v242;
  _QWORD *v243;
  void **v244;
  unsigned int v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  size_t v249;
  _QWORD *v250;
  _QWORD *v251;
  __int128 *v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  _DWORD *v257;
  _DWORD *v258;
  _DWORD *v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  __int128 *v280;
  size_t v281;
  _QWORD *v282;
  _QWORD *v283;
  __int128 *v284;
  unsigned int v285;
  int v286;
  uint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _DWORD *v298;
  unint64_t v300;
  int v302;
  unint64_t v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  llvm::Module **v310;
  llvm::Module **v311;
  __int128 *v312;
  int v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t *v316;
  int v317;
  uint64_t *v318;
  int v319;
  int v321;
  _QWORD v325[2];
  int v326;
  _QWORD v327[2];
  int v328;
  _OWORD __p[3];
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  void (**v338)(llvm::raw_ostream *__hidden);
  int v339;
  char *v340;
  char *v341;
  char *v342;
  char v343;
  uint64_t v344;
  int v345;
  __int128 *v346;
  void *__src;
  char *v348;
  unint64_t v349;
  _BYTE *v350;
  void *v351;
  uint64_t v352;
  int v353;
  _BYTE v354[32];
  __int128 v355;
  char *v356;
  uint64_t v357;
  char *v358;
  char v359;
  uint64_t v360;
  int v361;
  void **v362;
  __int128 v363;
  char *v364;
  void *v365;
  size_t v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  _QWORD v371[5];
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  int v376;
  uint64_t *v377;
  uint64_t v378;
  _BYTE v379[32];
  char *v380;
  __int128 v381;
  uint64_t v382;
  __int16 v383;
  uint64_t v384;

  v384 = *MEMORY[0x1E0C80C00];
  v339 = 0;
  v343 = 0;
  v344 = 0;
  v325[0] = 0;
  v325[1] = 0;
  v326 = 0;
  v327[0] = 0;
  v327[1] = 0;
  v328 = 0;
  memset(__p, 0, sizeof(__p));
  v330 = 0u;
  v331 = 0u;
  v332 = 0u;
  v333 = 0u;
  v334 = 0u;
  v335 = 0u;
  v336 = 0u;
  v337 = 0;
  v338 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v345 = 0;
  v346 = &v336;
  __src = 0;
  v348 = 0;
  v349 = 0;
  v342 = 0;
  v340 = 0;
  v341 = 0;
  v8 = qword_1ED81A518;
  if (qword_1ED81A518)
    v10 = strlen((const char *)qword_1ED81A518);
  else
    v10 = 0;
  v11 = v10;
  v12 = sub_1C5E3DF4C((_QWORD *)qword_1ED81A518, qword_1ED81A518 + v10);
  v309 = v11;
  v307 = llvm::StringTableBuilder::add(a4, v8, v11 | ((unint64_t)v12 << 32));
  v13 = *((_BYTE *)*a1 + 239);
  if (v13 >= 0)
    v14 = (_QWORD *)((char *)*a1 + 216);
  else
    v14 = (_QWORD *)*((_QWORD *)*a1 + 27);
  if (v13 >= 0)
    v15 = v13 & 0x7F;
  else
    v15 = *((_QWORD *)*a1 + 28);
  v16 = sub_1C5E3DF4C(v14, (uint64_t)v14 + v15);
  v308 = v15;
  v306 = llvm::StringTableBuilder::add(a4, (uint64_t)v14, v15 | ((unint64_t)v16 << 32));
  v17 = *((_BYTE *)*a1 + 215);
  if (v17 >= 0)
    v18 = (_QWORD *)((char *)*a1 + 192);
  else
    v18 = (_QWORD *)*((_QWORD *)*a1 + 24);
  if (v17 >= 0)
    v19 = v17 & 0x7F;
  else
    v19 = *((_QWORD *)*a1 + 25);
  v20 = sub_1C5E3DF4C(v18, (uint64_t)v18 + v19);
  v305 = v19;
  v21 = v19;
  v22 = a1;
  v304 = llvm::StringTableBuilder::add(a4, (uint64_t)v18, v21 | ((unint64_t)v20 << 32));
  v23 = (char *)*a1 + 216;
  v383 = 260;
  v380 = v23;
  llvm::Triple::Triple((uint64_t)&v368, (llvm::Twine *)&v380);
  if (SBYTE7(__p[1]) < 0)
    operator delete(*(void **)&__p[0]);
  __p[0] = v368;
  *(_QWORD *)&__p[1] = v369;
  *(_OWORD *)((char *)&__p[1] + 8) = v370;
  *((_QWORD *)&__p[2] + 1) = v371[0];
  if (!a2)
  {
LABEL_438:
    v278 = v342 - v340;
    if (v342 != v340)
    {
      v342 = v340;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v338, v340, v278);
    }
    v279 = SHIBYTE(v337);
    v280 = (__int128 *)v336;
    if (v337 >= 0)
      v281 = HIBYTE(v337) & 0x7F;
    else
      v281 = *((_QWORD *)&v336 + 1);
    v282 = (_QWORD *)sub_1C484358C(a5, v281 + 1, 0);
    v283 = v282;
    if (v281)
    {
      if (v279 >= 0)
        v284 = &v336;
      else
        v284 = v280;
      memcpy(v282, v284, v281);
    }
    *((_BYTE *)v283 + v281) = 0;
    v285 = sub_1C5E3DF4C(v283, (uint64_t)v283 + v281);
    v286 = llvm::StringTableBuilder::add(a4, (uint64_t)v283, v281 | ((unint64_t)v285 << 32));
    v287 = a3;
    v288 = a3[1];
    v321 = v286;
    if (v288 == 76)
    {
      v289 = 76;
    }
    else
    {
      if (v288 <= 0x4C)
      {
        if ((unint64_t)a3[2] > 0x4B
          || (llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, 0x4CuLL, 1),
              v288 = a3[1],
              v288 != 76))
        {
          bzero((void *)(*a3 + v288), 76 - v288);
        }
      }
      a3[1] = 76;
      v287 = a3;
      v289 = a3[1];
    }
    v319 = -1431655765 * (((_QWORD)v332 - *((_QWORD *)&v331 + 1)) >> 2);
    sub_1C59696CC(v287, *v287 + v289, *((char **)&v331 + 1), (char *)v332);
    v317 = -1431655765 * ((*((_QWORD *)&v330 + 1) - (_QWORD)v330) >> 2);
    v290 = a3[1];
    sub_1C59696CC(a3, *a3 + v290, (char *)v330, *((char **)&v330 + 1));
    v291 = -1431655765 * ((*((_QWORD *)&v333 + 1) - (_QWORD)v333) >> 3);
    v292 = a3[1];
    sub_1C59696CC(a3, *a3 + v292, (char *)v333, *((char **)&v333 + 1));
    v293 = -1431655765 * (((_QWORD)v335 - *((_QWORD *)&v334 + 1)) >> 3);
    v294 = a3[1];
    sub_1C59696CC(a3, *a3 + v294, *((char **)&v334 + 1), (char *)v335);
    v295 = (unint64_t)(v348 - (_BYTE *)__src) >> 3;
    v296 = a3[1];
    sub_1C59696CC(a3, *a3 + v296, (char *)__src, v348);
    v297 = 0;
    v298 = (_DWORD *)*a3;
    *v298 = 3;
    v298[1] = v307;
    v298[2] = v309;
    v298[3] = v289;
    v298[4] = v319;
    v298[5] = v290;
    v298[6] = v317;
    v298[7] = v292;
    v298[8] = v291;
    v298[9] = v294;
    v298[10] = v293;
    v298[11] = v306;
    v298[12] = v308;
    v298[13] = v304;
    v24 = a6;
    v298[14] = v305;
    v298[15] = v321;
    v298[16] = v281;
    v298[17] = v296;
    v298[18] = v295;
    goto LABEL_454;
  }
  v24 = a6;
  v310 = &a1[a2];
  while (1)
  {
    v25 = *v22;
    if (*((char *)*v22 + 503) < 0)
      break;
    if (!*((_BYTE *)*v22 + 503))
      goto LABEL_451;
LABEL_24:
    v377 = (uint64_t *)v379;
    v378 = 0x400000000;
    llvm::collectUsedGlobalVariables((uint64_t)v25, (uint64_t)&v377, 0);
    llvm::collectUsedGlobalVariables((uint64_t)v25, (uint64_t)&v377, 1);
    v26 = v377;
    v350 = v354;
    v351 = v354;
    v352 = 4;
    v353 = 0;
    if ((_DWORD)v378)
    {
      v276 = 8 * v378;
      do
      {
        v277 = *v26++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v350, v277);
        v276 -= 8;
      }
      while (v276);
    }
    v368 = 0uLL;
    v369 = 0;
    *(_QWORD *)&v370 = v371;
    *((_QWORD *)&v370 + 1) = 0x400000000;
    v371[4] = (char *)&v372 + 8;
    v372 = 0u;
    v373 = 0u;
    v374 = 0u;
    v375 = 0u;
    v376 = 0;
    llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)&v368, v25);
    v27 = -1431655765 * ((*((_QWORD *)&v333 + 1) - (_QWORD)v333) >> 3);
    v28 = (((_QWORD)v374 - *((_QWORD *)&v373 + 1)) >> 3) - 1431655765 * ((*((_QWORD *)&v333 + 1) - (_QWORD)v333) >> 3);
    v29 = -1431655765 * (((_QWORD)v335 - *((_QWORD *)&v334 + 1)) >> 3);
    v30 = (_DWORD *)v332;
    v311 = v22;
    if ((unint64_t)v332 >= *((_QWORD *)&v332 + 1))
    {
      v32 = (_DWORD *)*((_QWORD *)&v331 + 1);
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v332 - *((_QWORD *)&v331 + 1)) >> 2);
      v34 = v33 + 1;
      if (v33 + 1 > 0x1555555555555555)
LABEL_476:
        abort();
      if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v332 + 1) - *((_QWORD *)&v331 + 1)) >> 2) > v34)
        v34 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v332 + 1) - *((_QWORD *)&v331 + 1)) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v332 + 1) - *((_QWORD *)&v331 + 1)) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v35 = 0x1555555555555555;
      else
        v35 = v34;
      if (v35)
      {
        if (v35 > 0x1555555555555555)
LABEL_477:
          sub_1C4764EE4();
        v36 = (char *)operator new(12 * v35);
      }
      else
      {
        v36 = 0;
      }
      v37 = &v36[12 * v33];
      *(_DWORD *)v37 = v27;
      *((_DWORD *)v37 + 1) = v28;
      *((_DWORD *)v37 + 2) = v29;
      v38 = v37;
      if (v30 == v32)
      {
        v24 = a6;
      }
      else
      {
        v24 = a6;
        do
        {
          v39 = *(_QWORD *)(v30 - 3);
          v30 -= 3;
          v40 = v30[2];
          *(_QWORD *)(v38 - 12) = v39;
          v38 -= 12;
          *((_DWORD *)v38 + 2) = v40;
        }
        while (v30 != v32);
        v30 = (_DWORD *)*((_QWORD *)&v331 + 1);
      }
      v31 = v37 + 12;
      *((_QWORD *)&v331 + 1) = v38;
      *(_QWORD *)&v332 = v37 + 12;
      *((_QWORD *)&v332 + 1) = &v36[12 * v35];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_DWORD *)v332 = v27;
      v30[1] = v28;
      v31 = v30 + 3;
      v30[2] = v29;
    }
    *(_QWORD *)&v332 = v31;
    v41 = HIDWORD(__p[2]);
    if (HIDWORD(__p[2]) == 1)
    {
      v42 = *((_QWORD *)v25 + 20);
      if (v42)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
        if (*v24)
          goto LABEL_422;
      }
      else
      {
        *v24 = 0;
      }
      v380 = "llvm.linker.options";
      v383 = 259;
      NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v25, (uint64_t)&v380);
      if (NamedMetadata)
      {
        v44 = NamedMetadata;
        v45 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
        if ((_DWORD)v45)
        {
          for (i = 0; i != v45; ++i)
          {
            v47 = *(_QWORD *)(**(_QWORD **)(v44 + 48) + 8 * i);
            v48 = *(unsigned int *)(v47 + 8);
            if ((_DWORD)v48)
            {
              v49 = -8 * v48;
              do
              {
                if (v341 == v342)
                {
                  v50 = llvm::raw_ostream::write((llvm::raw_ostream *)&v338, " ", 1uLL);
                }
                else
                {
                  *v342++ = 32;
                  v50 = (llvm::raw_ostream *)&v338;
                }
                v51 = *(size_t **)(*(_QWORD *)(v47 + v49) + 8);
                v54 = *v51;
                v52 = v51 + 3;
                v53 = v54;
                v55 = (void *)*((_QWORD *)v50 + 4);
                if (v54 <= *((_QWORD *)v50 + 3) - (_QWORD)v55)
                {
                  if (v53)
                  {
                    memcpy(v55, v52, v53);
                    *((_QWORD *)v50 + 4) += v53;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v50, (const char *)v52, v53);
                }
                v49 += 8;
              }
              while (v49);
            }
          }
        }
      }
      v41 = HIDWORD(__p[2]);
      v24 = a6;
    }
    if (v41 == 3)
    {
      v56 = *((_QWORD *)v25 + 20);
      if (v56)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
        if (*v24)
          goto LABEL_422;
      }
      else
      {
        *v24 = 0;
      }
      v380 = "llvm.dependent-libraries";
      v383 = 259;
      v57 = llvm::Module::getNamedMetadata((uint64_t)v25, (uint64_t)&v380);
      if (v57)
      {
        v58 = v57;
        v59 = *(unsigned int *)(*(_QWORD *)(v57 + 48) + 8);
        if ((_DWORD)v59)
        {
          for (j = 0; j != v59; ++j)
          {
            v61 = *(_QWORD *)(**(_QWORD **)(v58 + 48) + 8 * j);
            v62 = *(uint64_t **)(*(_QWORD *)(v61 - 8 * *(unsigned int *)(v61 + 8)) + 8);
            v64 = *v62;
            v62 += 3;
            v63 = v64;
            v65 = sub_1C5E3DF4C(v62, (uint64_t)v62 + v64);
            v66 = llvm::StringTableBuilder::add(a4, (uint64_t)v62, v64 | ((unint64_t)v65 << 32));
            v67 = v66;
            v68 = v348;
            if ((unint64_t)v348 >= v349)
            {
              v70 = (char *)__src;
              v71 = (v348 - (_BYTE *)__src) >> 3;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 61)
                goto LABEL_476;
              v73 = v349 - (_QWORD)__src;
              if ((uint64_t)(v349 - (_QWORD)__src) >> 2 > v72)
                v72 = v73 >> 2;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
                v74 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74)
              {
                if (v74 >> 61)
                  goto LABEL_477;
                v75 = (char *)operator new(8 * v74);
              }
              else
              {
                v75 = 0;
              }
              v76 = &v75[8 * v71];
              *(_QWORD *)v76 = v67 | ((unint64_t)v63 << 32);
              v69 = v76 + 8;
              if (v68 == v70)
              {
                v77 = a6;
              }
              else
              {
                v77 = a6;
                do
                {
                  v78 = *((_QWORD *)v68 - 1);
                  v68 -= 8;
                  *((_QWORD *)v76 - 1) = v78;
                  v76 -= 8;
                }
                while (v68 != v70);
                v68 = (char *)__src;
              }
              __src = v76;
              v348 = v69;
              v349 = (unint64_t)&v75[8 * v74];
              if (v68)
                operator delete(v68);
              v24 = v77;
            }
            else
            {
              *(_QWORD *)v348 = v66 | ((unint64_t)v63 << 32);
              v69 = v68 + 8;
            }
            v348 = v69;
          }
        }
      }
    }
    v79 = (uint64_t *)*((_QWORD *)&v373 + 1);
    v316 = (uint64_t *)v374;
    while (v79 != v316)
    {
      v80 = *v79;
      v81 = (_QWORD *)*((_QWORD *)&v333 + 1);
      if (*((_QWORD *)&v333 + 1) >= (unint64_t)v334)
      {
        v83 = (_QWORD *)v333;
        v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v333 + 1) - v333) >> 3);
        v85 = v84 + 1;
        if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_476;
        if (0x5555555555555556 * ((uint64_t)(v334 - v333) >> 3) > v85)
          v85 = 0x5555555555555556 * ((uint64_t)(v334 - v333) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v334 - v333) >> 3) >= 0x555555555555555)
          v86 = 0xAAAAAAAAAAAAAAALL;
        else
          v86 = v85;
        if (v86)
        {
          if (v86 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_477;
          v87 = (char *)operator new(24 * v86);
        }
        else
        {
          v87 = 0;
        }
        v88 = &v87[24 * v84];
        *(_QWORD *)v88 = 0;
        *((_QWORD *)v88 + 1) = 0;
        *((_QWORD *)v88 + 2) = 0;
        v89 = v88;
        if (v81 != v83)
        {
          do
          {
            v90 = *(_OWORD *)(v81 - 3);
            *((_QWORD *)v89 - 1) = *(v81 - 1);
            *(_OWORD *)(v89 - 24) = v90;
            v89 -= 24;
            v81 -= 3;
          }
          while (v81 != v83);
          v81 = (_QWORD *)v333;
        }
        v82 = v88 + 24;
        *(_QWORD *)&v333 = v89;
        *((_QWORD *)&v333 + 1) = v88 + 24;
        *(_QWORD *)&v334 = &v87[24 * v86];
        if (v81)
          operator delete(v81);
      }
      else
      {
        **((_QWORD **)&v333 + 1) = 0;
        v81[1] = 0;
        v82 = v81 + 3;
        v81[2] = 0;
      }
      *((_QWORD *)&v333 + 1) = v82;
      *(v82 - 3) = 0;
      *(v82 - 2) = 0;
      *(v82 - 1) = 0;
      v380 = (char *)&v382;
      v381 = xmmword_1C64638C0;
      DWORD2(v355) = 0;
      v359 = 0;
      v360 = 0;
      *(_QWORD *)&v355 = &off_1E81A7280;
      v362 = (void **)&v380;
      v361 = 0;
      v357 = 0;
      v358 = 0;
      v356 = 0;
      llvm::ModuleSymbolTable::printSymbolName((uint64_t)&v368, (llvm::raw_ostream *)&v355, v80);
      *(_QWORD *)&v355 = off_1E81A6E70;
      if (v361 == 1 && v356)
        MEMORY[0x1CAA32F9C](v356, 0x1000C8077774924);
      v92 = v380;
      v91 = v381;
      v93 = (_QWORD *)sub_1C484358C(a5, v381 + 1, 0);
      v94 = v93;
      if (v91)
        memcpy(v93, v92, v91);
      *((_BYTE *)v94 + v91) = 0;
      v95 = sub_1C5E3DF4C(v94, (uint64_t)v94 + v91);
      *((_DWORD *)v82 - 6) = llvm::StringTableBuilder::add(a4, (uint64_t)v94, v91 | ((unint64_t)v95 << 32));
      *((_DWORD *)v82 - 5) = v91;
      SymbolFlags = llvm::ModuleSymbolTable::getSymbolFlags((uint64_t)&v368, v80);
      v97 = SymbolFlags;
      if ((SymbolFlags & 1) != 0)
      {
        *((_DWORD *)v82 - 1) |= 8u;
        if ((SymbolFlags & 4) == 0)
        {
LABEL_113:
          if ((SymbolFlags & 0x10) == 0)
            goto LABEL_114;
          goto LABEL_134;
        }
      }
      else if ((SymbolFlags & 4) == 0)
      {
        goto LABEL_113;
      }
      *((_DWORD *)v82 - 1) |= 0x10u;
      if ((SymbolFlags & 0x10) == 0)
      {
LABEL_114:
        if ((SymbolFlags & 0x20) == 0)
          goto LABEL_115;
        goto LABEL_135;
      }
LABEL_134:
      *((_DWORD *)v82 - 1) |= 0x20u;
      if ((SymbolFlags & 0x20) == 0)
      {
LABEL_115:
        if ((SymbolFlags & 2) == 0)
          goto LABEL_116;
        goto LABEL_136;
      }
LABEL_135:
      *((_DWORD *)v82 - 1) |= 0x40u;
      if ((SymbolFlags & 2) == 0)
      {
LABEL_116:
        if ((SymbolFlags & 0x80) != 0)
          goto LABEL_137;
        goto LABEL_117;
      }
LABEL_136:
      *((_DWORD *)v82 - 1) |= 0x400u;
      if ((SymbolFlags & 0x80) != 0)
      {
LABEL_137:
        *((_DWORD *)v82 - 1) |= 0x800u;
        if ((SymbolFlags & 0x800) == 0)
          goto LABEL_119;
LABEL_118:
        *((_DWORD *)v82 - 1) |= 0x2000u;
        goto LABEL_119;
      }
LABEL_117:
      if ((SymbolFlags & 0x800) != 0)
        goto LABEL_118;
LABEL_119:
      *((_DWORD *)v82 - 2) = -1;
      if ((v80 & 4) != 0 || (v98 = (uint64_t ***)(v80 & 0xFFFFFFFFFFFFFFF8)) == 0)
      {
        if ((SymbolFlags & 1) != 0)
          *((_DWORD *)v82 - 1) |= 0x80u;
        v108 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v269 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v269 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v269;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v109 = 0;
        *((_DWORD *)v82 - 4) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
        *((_DWORD *)v82 - 3) = 0;
        goto LABEL_237;
      }
      v318 = v79;
      v99 = v98 >> 4;
      if ((*((_BYTE *)v98 + 23) & 0x10) != 0)
      {
        v100 = ***v98;
        v101 = *(_QWORD *)(v100 + 152);
        v102 = *(unsigned int *)(v100 + 168);
        if (!(_DWORD)v102)
          goto LABEL_139;
        LODWORD(v103) = (v102 - 1) & (v99 ^ (v98 >> 9));
        v104 = (uint64_t ****)(v101 + 16 * v103);
        v105 = *v104;
        if (*v104 != v98)
        {
          v106 = 1;
          while (v105 != (uint64_t ***)-4096)
          {
            v107 = v103 + v106++;
            v103 = v107 & (v102 - 1);
            v105 = *(uint64_t ****)(v101 + 16 * v103);
            if (v105 == v98)
            {
              v104 = (uint64_t ****)(v101 + 16 * v103);
              goto LABEL_140;
            }
          }
LABEL_139:
          v104 = (uint64_t ****)(v101 + 16 * v102);
        }
LABEL_140:
        v110 = v104[1];
        v113 = *v110;
        v111 = (char *)(v110 + 2);
        v112 = v113;
        goto LABEL_141;
      }
      v112 = 0;
      v111 = &byte_1C871356D;
LABEL_141:
      v114 = sub_1C5E3DF4C(v111, (uint64_t)v112 + (_QWORD)v111);
      *((_DWORD *)v82 - 4) = llvm::StringTableBuilder::add(a4, (uint64_t)v111, v112 | ((unint64_t)v114 << 32));
      *((_DWORD *)v82 - 3) = (_DWORD)v112;
      if ((*((_BYTE *)v98 + 23) & 0x10) != 0)
      {
        v115 = ***v98;
        v116 = *(_QWORD *)(v115 + 152);
        v117 = *(unsigned int *)(v115 + 168);
        if (!(_DWORD)v117)
          goto LABEL_148;
        LODWORD(v118) = (v117 - 1) & (v99 ^ (v98 >> 9));
        v119 = (uint64_t ****)(v116 + 16 * v118);
        v120 = *v119;
        if (*v119 != v98)
        {
          v121 = 1;
          while (v120 != (uint64_t ***)-4096)
          {
            v122 = v118 + v121++;
            v118 = v122 & (v117 - 1);
            v120 = *(uint64_t ****)(v116 + 16 * v118);
            if (v120 == v98)
            {
              v119 = (uint64_t ****)(v116 + 16 * v118);
              goto LABEL_149;
            }
          }
LABEL_148:
          v119 = (uint64_t ****)(v116 + 16 * v117);
        }
LABEL_149:
        v123 = v119[1];
        v126 = (size_t)*v123;
        v124 = (char *)(v123 + 2);
        v125 = v126;
        goto LABEL_150;
      }
      v125 = 0;
      v124 = &byte_1C871356D;
LABEL_150:
      v127 = 5120;
      v128 = (const char **)off_1EF8EC7A8;
      while (1)
      {
        v129 = *v128 ? strlen(*v128) : 0;
        if (v129 == v125 && (!v125 || !memcmp(*v128, v124, v125)))
          break;
        ++v128;
        v127 -= 8;
        if (!v127)
        {
          v128 = (const char **)&llvm::object::WasmSectionOrderChecker::DisallowedPredecessors;
          break;
        }
      }
      v130 = sub_1C477672C((uint64_t)&v350, (uint64_t)v98);
      if (v351 == v350)
        v131 = (uint64_t *)((char *)&v352 + 4);
      else
        v131 = &v352;
      v132 = v130 == (_QWORD *)((char *)v351 + 8 * *(unsigned int *)v131)
          && (char *)v128 - (char *)off_1EF8EC7A8 == 5120;
      v79 = v318;
      if (!v132)
        *((_DWORD *)v82 - 1) |= 0x80u;
      v133 = *((_DWORD *)v98 + 8);
      if ((v133 & 0x1C00) != 0)
      {
        *((_DWORD *)v82 - 1) |= 0x100u;
        v133 = *((_DWORD *)v98 + 8);
      }
      if ((v133 & 0xC0) == 0x80)
      {
        *((_DWORD *)v82 - 1) |= 0x1000u;
        v133 = *((_DWORD *)v98 + 8);
      }
      if ((v133 & 0xF) != 3)
        goto LABEL_176;
      if ((v133 & 0xC0) == 0x80)
      {
        v134 = *((_DWORD *)v82 - 1);
LABEL_178:
        v134 |= 0x200u;
        *((_DWORD *)v82 - 1) = v134;
        v133 = *((_DWORD *)v98 + 8);
        goto LABEL_179;
      }
      if (*((_BYTE *)v98 + 16) != 3 || ((_BYTE)v98[10] & 1) != 0)
      {
        v134 = *((_DWORD *)v82 - 1);
        if ((v133 & 0xC0) != 0)
          goto LABEL_178;
      }
      else
      {
LABEL_176:
        v134 = *((_DWORD *)v82 - 1);
      }
LABEL_179:
      *((_DWORD *)v82 - 1) = (v133 >> 4) & 3 | v134;
      if ((v97 & 0x10) != 0)
      {
        if (*((_BYTE *)v98 + 16) != 3)
        {
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v148 = qword_1ED836B58[0];
          v149 = (_QWORD *)operator new();
          v109 = (uint64_t)v149;
          v150 = "Only variables can have common linkage!";
          goto LABEL_189;
        }
        v136 = (uint64_t)(v98[5] + 34);
        v137 = (uint64_t)v98[3];
        sub_1C4768AD0(v136, v137);
        v139 = v138;
        v141 = v140 == 1;
        llvm::DataLayout::getAlignment(v136, v137);
        v144 = v143;
        if (v141)
        *((_DWORD *)v82 - 1) |= 4u;
        v145 = (_QWORD *)v335;
        if ((unint64_t)v335 >= *((_QWORD *)&v335 + 1))
        {
          v151 = (_QWORD *)*((_QWORD *)&v334 + 1);
          v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335 - *((_QWORD *)&v334 + 1)) >> 3);
          v153 = v152 + 1;
          if (v152 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_476;
          if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3) > v153)
            v153 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3) >= 0x555555555555555)
            v154 = 0xAAAAAAAAAAAAAAALL;
          else
            v154 = v153;
          if (v154)
          {
            if (v154 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_477;
            v155 = (char *)operator new(24 * v154);
          }
          else
          {
            v155 = 0;
          }
          v156 = &v155[24 * v152];
          *(_QWORD *)v156 = 0;
          *((_QWORD *)v156 + 1) = 0;
          *((_QWORD *)v156 + 2) = 0;
          v157 = v156;
          if (v145 != v151)
          {
            do
            {
              v158 = *(_OWORD *)(v145 - 3);
              *((_QWORD *)v157 - 1) = *(v145 - 1);
              *(_OWORD *)(v157 - 24) = v158;
              v157 -= 24;
              v145 -= 3;
            }
            while (v145 != v151);
            v145 = (_QWORD *)*((_QWORD *)&v334 + 1);
          }
          v159 = &v155[24 * v154];
          v146 = v156 + 24;
          *((_QWORD *)&v334 + 1) = v157;
          *(_QWORD *)&v335 = v156 + 24;
          *((_QWORD *)&v335 + 1) = v159;
          if (v145)
            operator delete(v145);
        }
        else
        {
          *(_QWORD *)v335 = 0;
          v145[1] = 0;
          v146 = v145 + 3;
          v145[2] = 0;
        }
        *(_QWORD *)&v335 = v146;
        *(v146 - 3) = 0;
        *(v146 - 2) = 0;
        *(v146 - 1) = 0;
        v160 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v270 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v270 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v270;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        *((_DWORD *)v146 - 4) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
        *((_DWORD *)v146 - 3) = 0;
        v161 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v271 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v271 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v271;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        *((_DWORD *)v146 - 2) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
        *((_DWORD *)v146 - 1) = 0;
        *((_DWORD *)v146 - 6) = ((1 << v144) - 1 + ((unint64_t)(v139 + 7) >> 3)) & -(1 << v144);
        v162 = *((_WORD *)v98 + 17);
        v163 = (v162 & 0x3F) == 0;
        v164 = (v162 & 0x3F) - 1;
        if (v163)
          v164 = 0;
        v165 = 1 << v164;
        if (v163)
          LODWORD(v165) = 0;
        *((_DWORD *)v146 - 5) = v165;
        v79 = v318;
        v135 = v146 - 3;
      }
      else
      {
        v135 = 0;
      }
      v355 = 0uLL;
      LODWORD(v356) = 0;
      ResolverFunction = (uint64_t ***)sub_1C53D5A28((uint64_t)v98, (uint64_t)&v355);
      MEMORY[0x1CAA32FB4](v355, 8);
      if (!ResolverFunction
        && (*((_BYTE *)v98 + 16) != 2
         || (ResolverFunction = (uint64_t ***)llvm::GlobalIFunc::getResolverFunction((llvm::GlobalIFunc *)v98)) == 0))
      {
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v148 = qword_1ED836B58[0];
        v149 = (_QWORD *)operator new();
        v109 = (uint64_t)v149;
        *(_QWORD *)&v355 = "Unable to determine comdat of alias!";
        LOWORD(v358) = 259;
        goto LABEL_236;
      }
      v168 = (size_t **)ResolverFunction[6];
      if (!v168)
        goto LABEL_214;
      v189 = v98[5];
      *(_QWORD *)&v355 = ResolverFunction[6];
      DWORD2(v355) = -1431655765 * ((*((_QWORD *)&v330 + 1) - (_QWORD)v330) >> 2);
      sub_1C6144658((uint64_t)&v365, (uint64_t)v325, (uint64_t *)&v355, (_DWORD *)&v355 + 2);
      v315 = v135;
      if (!(_BYTE)v367)
        goto LABEL_383;
      v363 = 0uLL;
      v364 = 0;
      if (HIDWORD(__p[2]) != 1)
      {
        v227 = *v168 + 9;
        v226 = **v168;
        if (v226 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_476;
        if (v226 >= 0x17)
        {
          v231 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v226 | 7) != 0x17)
            v231 = v226 | 7;
          v232 = v231 + 1;
          v228 = (__int128 *)operator new(v231 + 1);
          v356 = (char *)(v232 | 0x8000000000000000);
          *(_QWORD *)&v355 = v228;
          *((_QWORD *)&v355 + 1) = v226;
        }
        else
        {
          HIBYTE(v356) = **v168;
          v228 = &v355;
          if (!v226)
          {
LABEL_323:
            *((_BYTE *)v228 + v226) = 0;
            if (SHIBYTE(v364) < 0)
              operator delete((void *)v363);
            v363 = v355;
            v364 = v356;
            goto LABEL_354;
          }
        }
        v233 = v228;
        memmove(v228, v227, v226);
        v228 = v233;
        goto LABEL_323;
      }
      v190 = (const llvm::GlobalValue *)sub_1C4FB7E80(v189[14], (unsigned __int8 *)*v168 + 72, **v168);
      v191 = v190;
      if (v190)
      {
        if ((*((_DWORD *)v190 + 8) & 0xFu) - 7 > 1)
        {
          DWORD2(v355) = 0;
          v359 = 0;
          v360 = 0;
          *(_QWORD *)&v355 = &unk_1E81A7208;
          v362 = (void **)&v363;
          v361 = 0;
          v357 = 0;
          v358 = 0;
          v356 = 0;
          llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v327, (llvm::raw_ostream *)&v355, v190, 0);
          *(_QWORD *)&v355 = off_1E81A6E70;
          if (v361 == 1 && v356)
            MEMORY[0x1CAA32F9C](v356, 0x1000C8077774924);
LABEL_354:
          v248 = SHIBYTE(v364);
          v312 = (__int128 *)v363;
          if (SHIBYTE(v364) >= 0)
            v249 = HIBYTE(v364) & 0x7F;
          else
            v249 = *((_QWORD *)&v363 + 1);
          v250 = (_QWORD *)sub_1C484358C(a5, v249 + 1, 0);
          v251 = v250;
          if (v249)
          {
            if (v248 >= 0)
              v252 = &v363;
            else
              v252 = v312;
            memcpy(v250, v252, v249);
          }
          *((_BYTE *)v251 + v249) = 0;
          v253 = sub_1C5E3DF4C(v251, (uint64_t)v251 + v249);
          v254 = llvm::StringTableBuilder::add(a4, (uint64_t)v251, v249 | ((unint64_t)v253 << 32));
          v255 = v254;
          v256 = *((_DWORD *)v168 + 2);
          v257 = (_DWORD *)*((_QWORD *)&v330 + 1);
          if (*((_QWORD *)&v330 + 1) >= (unint64_t)v331)
          {
            v313 = v249;
            v259 = (_DWORD *)v330;
            v260 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v330 + 1) - v330) >> 2);
            v261 = v260 + 1;
            if (v260 + 1 > 0x1555555555555555)
              goto LABEL_476;
            if (0x5555555555555556 * ((uint64_t)(v331 - v330) >> 2) > v261)
              v261 = 0x5555555555555556 * ((uint64_t)(v331 - v330) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v331 - v330) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v262 = 0x1555555555555555;
            else
              v262 = v261;
            v303 = v262;
            if (v262)
            {
              v302 = v254;
              if (v262 > 0x1555555555555555)
                goto LABEL_477;
              v263 = (char *)operator new(12 * v262);
              v255 = v302;
            }
            else
            {
              v263 = 0;
            }
            v264 = &v263[12 * v260];
            *(_DWORD *)v264 = v255;
            *((_DWORD *)v264 + 1) = v313;
            *((_DWORD *)v264 + 2) = v256;
            v265 = v264;
            if (v257 == v259)
            {
              v266 = v303;
            }
            else
            {
              v266 = v303;
              do
              {
                v267 = *(_QWORD *)(v257 - 3);
                v257 -= 3;
                v268 = v257[2];
                *(_QWORD *)(v265 - 12) = v267;
                v265 -= 12;
                *((_DWORD *)v265 + 2) = v268;
              }
              while (v257 != v259);
              v257 = (_DWORD *)v330;
            }
            v258 = v264 + 12;
            *(_QWORD *)&v330 = v265;
            *((_QWORD *)&v330 + 1) = v264 + 12;
            *(_QWORD *)&v331 = &v263[12 * v266];
            if (v257)
              operator delete(v257);
          }
          else
          {
            **((_DWORD **)&v330 + 1) = v254;
            v257[1] = v249;
            v258 = v257 + 3;
            v257[2] = v256;
          }
          *((_QWORD *)&v330 + 1) = v258;
          if (SHIBYTE(v364) < 0)
            operator delete((void *)v363);
LABEL_383:
          LODWORD(v109) = *((_DWORD *)v365 + 2);
LABEL_384:
          *((_DWORD *)v82 - 2) = v109;
          v135 = v315;
LABEL_214:
          if (HIDWORD(__p[2]) != 1
            || (llvm::emitLinkerFlagsForGlobalCOFF((llvm *)&v338, (llvm::raw_ostream *)v98, (const llvm::GlobalValue *)__p, (const llvm::Triple *)v327, v167), (~v97 & 0x24) != 0))
          {
            v79 = v318;
          }
          else
          {
            v169 = llvm::Value::stripPointerCasts((llvm::Value *)*(v98 - 4));
            v79 = v318;
            if (!v169 || *((unsigned __int8 *)v169 + 16) >= 4u)
            {
              if (!atomic_load(qword_1ED836B58))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
              v148 = qword_1ED836B58[0];
              v149 = (_QWORD *)operator new();
              v109 = (uint64_t)v149;
              v150 = "Invalid weak external";
LABEL_189:
              *(_QWORD *)&v355 = v150;
              LOWORD(v358) = 259;
LABEL_236:
              *v149 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v355, v149 + 1);
              *(_QWORD *)(v109 + 32) = 3;
              *(_QWORD *)(v109 + 40) = v148;
              *(_BYTE *)(v109 + 48) = 1;
              goto LABEL_237;
            }
            v366 = 0;
            v365 = 0;
            v367 = 0;
            DWORD2(v355) = 0;
            v359 = 0;
            v360 = 0;
            *(_QWORD *)&v355 = &unk_1E81A7208;
            v362 = &v365;
            v361 = 0;
            v357 = 0;
            v358 = 0;
            v356 = 0;
            llvm::ModuleSymbolTable::printSymbolName((uint64_t)&v368, (llvm::raw_ostream *)&v355, (unint64_t)v169 & 0xFFFFFFFFFFFFFFFBLL);
            v170 = v358 - v356;
            if (v358 != v356)
            {
              v358 = v356;
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v355, v356, v170);
            }
            v314 = v135;
            if (!v135)
            {
              *((_DWORD *)v82 - 1) |= 4u;
              v171 = (_QWORD *)v335;
              if ((unint64_t)v335 >= *((_QWORD *)&v335 + 1))
              {
                v199 = (_QWORD *)*((_QWORD *)&v334 + 1);
                v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335 - *((_QWORD *)&v334 + 1)) >> 3);
                v201 = v200 + 1;
                if (v200 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_476;
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3) > v201)
                  v201 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3) >= 0x555555555555555)
                  v202 = 0xAAAAAAAAAAAAAAALL;
                else
                  v202 = v201;
                if (v202)
                {
                  if (v202 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_477;
                  v203 = (char *)operator new(24 * v202);
                }
                else
                {
                  v203 = 0;
                }
                v234 = &v203[24 * v200];
                *(_QWORD *)v234 = 0;
                *((_QWORD *)v234 + 1) = 0;
                *((_QWORD *)v234 + 2) = 0;
                v235 = v234;
                if (v171 != v199)
                {
                  do
                  {
                    v236 = *(_OWORD *)(v171 - 3);
                    *((_QWORD *)v235 - 1) = *(v171 - 1);
                    *(_OWORD *)(v235 - 24) = v236;
                    v235 -= 24;
                    v171 -= 3;
                  }
                  while (v171 != v199);
                  v171 = (_QWORD *)*((_QWORD *)&v334 + 1);
                }
                v172 = v234 + 24;
                *((_QWORD *)&v334 + 1) = v235;
                *(_QWORD *)&v335 = v234 + 24;
                *((_QWORD *)&v335 + 1) = &v203[24 * v202];
                if (v171)
                  operator delete(v171);
              }
              else
              {
                *(_QWORD *)v335 = 0;
                v171[1] = 0;
                v172 = v171 + 3;
                v171[2] = 0;
              }
              *(_QWORD *)&v335 = v172;
              *(v172 - 3) = 0;
              *(v172 - 2) = 0;
              v314 = v172 - 3;
              *(v172 - 1) = 0;
              v237 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v237 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v274 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v274 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v274;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              *((_DWORD *)v172 - 4) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
              *((_DWORD *)v172 - 3) = 0;
              v238 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v238 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v275 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v275 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v275;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              *((_DWORD *)v172 - 2) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
              *((_DWORD *)v172 - 1) = 0;
            }
            v239 = SHIBYTE(v367);
            v240 = (void **)v365;
            if (v367 >= 0)
              v241 = HIBYTE(v367) & 0x7F;
            else
              v241 = v366;
            v242 = (_QWORD *)sub_1C484358C(a5, v241 + 1, 0);
            v243 = v242;
            if (v241)
            {
              if (v239 >= 0)
                v244 = &v365;
              else
                v244 = v240;
              memcpy(v242, v244, v241);
            }
            *((_BYTE *)v243 + v241) = 0;
            v245 = sub_1C5E3DF4C(v243, (uint64_t)v243 + v241);
            v135 = v314;
            *((_DWORD *)v314 + 2) = llvm::StringTableBuilder::add(a4, (uint64_t)v243, v241 | ((unint64_t)v245 << 32));
            *((_DWORD *)v314 + 3) = v241;
            *(_QWORD *)&v355 = off_1E81A6E70;
            if (v361 == 1 && v356)
              MEMORY[0x1CAA32F9C](v356, 0x1000C8077774924);
            if (SHIBYTE(v367) < 0)
              operator delete(v365);
          }
          if ((*((_BYTE *)ResolverFunction + 34) & 0x40) == 0)
            goto LABEL_231;
          v173 = ***ResolverFunction;
          *(_QWORD *)&v355 = ResolverFunction;
          v174 = *(_DWORD *)(v173 + 2520);
          v175 = ResolverFunction >> 4;
          if (v174)
          {
            v176 = *(_QWORD *)(v173 + 2504);
            v177 = v174 - 1;
            v178 = v177 & (v175 ^ (ResolverFunction >> 9));
            v179 = (uint64_t ****)(v176 + 24 * v178);
            v180 = *v179;
            if (*v179 == ResolverFunction)
              goto LABEL_227;
            v185 = 0;
            v186 = 1;
            while (v180 != (uint64_t ***)-4096)
            {
              if (v185)
                v187 = 0;
              else
                v187 = v180 == (uint64_t ***)-8192;
              if (v187)
                v185 = v179;
              v188 = v178 + v186++;
              v178 = v188 & v177;
              v179 = (uint64_t ****)(v176 + 24 * v178);
              v180 = *v179;
              if (*v179 == ResolverFunction)
                goto LABEL_227;
            }
            if (v185)
              v197 = v185;
            else
              v197 = v179;
          }
          else
          {
            v197 = 0;
          }
          v179 = (uint64_t ****)sub_1C53D65B8(v173 + 2504, (uint64_t)&v355, (uint64_t *)&v355, v197);
          v198 = (uint64_t ***)v355;
          v179[1] = 0;
          v179[2] = 0;
          *v179 = v198;
LABEL_227:
          if (!v179[2])
          {
LABEL_231:
            v109 = 0;
            goto LABEL_237;
          }
          if (!v135)
          {
            *((_DWORD *)v82 - 1) |= 4u;
            v181 = (_QWORD *)v335;
            if ((unint64_t)v335 >= *((_QWORD *)&v335 + 1))
            {
              v192 = (_QWORD *)*((_QWORD *)&v334 + 1);
              v193 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335 - *((_QWORD *)&v334 + 1)) >> 3);
              v194 = v193 + 1;
              if (v193 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_476;
              if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3) > v194)
                v194 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v335 + 1) - *((_QWORD *)&v334 + 1)) >> 3) >= 0x555555555555555)
                v195 = 0xAAAAAAAAAAAAAAALL;
              else
                v195 = v194;
              if (v195)
              {
                if (v195 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_477;
                v196 = (char *)operator new(24 * v195);
              }
              else
              {
                v196 = 0;
              }
              v204 = &v196[24 * v193];
              *(_QWORD *)v204 = 0;
              *((_QWORD *)v204 + 1) = 0;
              *((_QWORD *)v204 + 2) = 0;
              v205 = v204;
              if (v181 != v192)
              {
                do
                {
                  v206 = *(_OWORD *)(v181 - 3);
                  *((_QWORD *)v205 - 1) = *(v181 - 1);
                  *(_OWORD *)(v205 - 24) = v206;
                  v205 -= 24;
                  v181 -= 3;
                }
                while (v181 != v192);
                v181 = (_QWORD *)*((_QWORD *)&v334 + 1);
              }
              v182 = v204 + 24;
              *((_QWORD *)&v334 + 1) = v205;
              *(_QWORD *)&v335 = v204 + 24;
              *((_QWORD *)&v335 + 1) = &v196[24 * v195];
              if (v181)
                operator delete(v181);
            }
            else
            {
              *(_QWORD *)v335 = 0;
              v181[1] = 0;
              v182 = v181 + 3;
              v181[2] = 0;
            }
            *(_QWORD *)&v335 = v182;
            *(v182 - 3) = 0;
            *(v182 - 2) = 0;
            *(v182 - 1) = 0;
            v207 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v207 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v272 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v272 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v272;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            *((_DWORD *)v182 - 4) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
            *((_DWORD *)v182 - 3) = 0;
            v208 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v273 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v273 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v273;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            *((_DWORD *)v182 - 2) = llvm::StringTableBuilder::add(a4, (uint64_t)"", (qword_1ED7EAC80 << 32) ^ 0x2F90404F00000000);
            *((_DWORD *)v182 - 1) = 0;
            v79 = v318;
            v135 = v182 - 3;
          }
          if ((*((_BYTE *)ResolverFunction + 34) & 0x40) == 0)
          {
            v209 = v135;
            v210 = 0;
            v211 = 0;
LABEL_299:
            v219 = (_QWORD *)sub_1C484358C(a5, v211 + 1, 0);
            v220 = v219;
            if (v211)
              memcpy(v219, v210, v211);
            *((_BYTE *)v220 + v211) = 0;
            v221 = sub_1C5E3DF4C(v220, (uint64_t)v220 + v211);
            v109 = 0;
            *((_DWORD *)v209 + 4) = llvm::StringTableBuilder::add(a4, (uint64_t)v220, v211 | ((unint64_t)v221 << 32));
            *((_DWORD *)v209 + 5) = v211;
            goto LABEL_237;
          }
          v212 = ***ResolverFunction;
          *(_QWORD *)&v355 = ResolverFunction;
          v213 = *(_DWORD *)(v212 + 2520);
          if (v213)
          {
            v214 = *(_QWORD *)(v212 + 2504);
            v215 = v213 - 1;
            v216 = v215 & (v175 ^ (ResolverFunction >> 9));
            v217 = (uint64_t ****)(v214 + 24 * v216);
            v218 = *v217;
            if (*v217 == ResolverFunction)
            {
LABEL_298:
              v209 = v135;
              v210 = v217[1];
              v211 = (size_t)v217[2];
              goto LABEL_299;
            }
            v222 = 0;
            v223 = 1;
            while (v218 != (uint64_t ***)-4096)
            {
              if (v222)
                v224 = 0;
              else
                v224 = v218 == (uint64_t ***)-8192;
              if (v224)
                v222 = v217;
              v225 = v216 + v223++;
              v216 = v225 & v215;
              v217 = (uint64_t ****)(v214 + 24 * v216);
              v218 = *v217;
              if (*v217 == ResolverFunction)
                goto LABEL_298;
            }
            if (v222)
              v229 = v222;
            else
              v229 = v217;
          }
          else
          {
            v229 = 0;
          }
          v217 = (uint64_t ****)sub_1C53D65B8(v212 + 2504, (uint64_t)&v355, (uint64_t *)&v355, v229);
          v230 = (uint64_t ***)v355;
          v217[1] = 0;
          v217[2] = 0;
          *v217 = v230;
          goto LABEL_298;
        }
        *((_DWORD *)v365 + 2) = -1;
        v109 = 0xFFFFFFFFLL;
        v79 = v318;
      }
      else
      {
        v246 = atomic_load(qword_1ED836B58);
        v79 = v318;
        if (!v246)
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v247 = qword_1ED836B58[0];
        v109 = operator new();
        *(_QWORD *)&v355 = "Could not find leader";
        LOWORD(v358) = 259;
        *(_QWORD *)v109 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v355, (_QWORD *)(v109 + 8));
        *(_QWORD *)(v109 + 32) = 3;
        *(_QWORD *)(v109 + 40) = v247;
        *(_BYTE *)(v109 + 48) = 1;
      }
      if (SHIBYTE(v364) < 0)
        operator delete((void *)v363);
      if (v191)
        goto LABEL_384;
LABEL_237:
      v24 = a6;
      *a6 = v109;
      if (v380 != (char *)&v382)
      {
        free(v380);
        v109 = *a6;
      }
      if (v109)
        goto LABEL_422;
      ++v79;
    }
    *v24 = 0;
LABEL_422:
    MEMORY[0x1CAA32FB4](v375, 8);
    if (*((_QWORD *)&v373 + 1))
    {
      *(_QWORD *)&v374 = *((_QWORD *)&v373 + 1);
      operator delete(*((void **)&v373 + 1));
    }
    sub_1C58EDC0C((uint64_t)&v368 + 8);
    sub_1C4926AE8((uint64_t)&v368 + 8);
    if (v351 != v350)
      free(v351);
    if (v377 != (uint64_t *)v379)
      free(v377);
    if (*v24)
      goto LABEL_455;
    v22 = v311 + 1;
    if (v311 + 1 == v310)
      goto LABEL_438;
  }
  if (*((_QWORD *)v25 + 61))
    goto LABEL_24;
LABEL_451:
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v300 = qword_1ED836B58[0];
  v297 = operator new();
  *(_QWORD *)&v368 = "input module has no datalayout";
  WORD4(v370) = 259;
  *(_QWORD *)v297 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v368, (_QWORD *)(v297 + 8));
  *(_QWORD *)(v297 + 32) = 3;
  *(_QWORD *)(v297 + 40) = v300;
  *(_BYTE *)(v297 + 48) = 1;
LABEL_454:
  *v24 = v297;
LABEL_455:
  if (__src)
  {
    v348 = (char *)__src;
    operator delete(__src);
  }
  v338 = off_1E81A6E70;
  if (v345 == 1 && v340)
    MEMORY[0x1CAA32F9C](v340, 0x1000C8077774924);
  if (SHIBYTE(v337) < 0)
    operator delete((void *)v336);
  if (*((_QWORD *)&v334 + 1))
  {
    *(_QWORD *)&v335 = *((_QWORD *)&v334 + 1);
    operator delete(*((void **)&v334 + 1));
  }
  if ((_QWORD)v333)
  {
    *((_QWORD *)&v333 + 1) = v333;
    operator delete((void *)v333);
  }
  if (*((_QWORD *)&v331 + 1))
  {
    *(_QWORD *)&v332 = *((_QWORD *)&v331 + 1);
    operator delete(*((void **)&v331 + 1));
  }
  if ((_QWORD)v330)
  {
    *((_QWORD *)&v330 + 1) = v330;
    operator delete((void *)v330);
  }
  if (SBYTE7(__p[1]) < 0)
    operator delete(*(void **)&__p[0]);
  MEMORY[0x1CAA32FB4](v327[0], 8);
  return MEMORY[0x1CAA32FB4](v325[0], 8);
}

void llvm::irsymtab::readBitcode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21[3];
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = *(__int128 **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v4)
  {
    if (byte_1ED834A88)
    {
      v6 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
LABEL_4:
      v21[0] = &v22;
      v21[1] = 0;
      v21[2] = 0;
      v22 = &v25;
      v23 = 0;
      v24 = 0;
      v9 = *(_QWORD *)(v6 + 12);
      v10 = *(_QWORD *)(v6 + 20);
      v11 = *(_QWORD *)(v6 + 28);
      v12 = *(_QWORD *)(v6 + 36);
      v13 = *(_QWORD *)(v6 + 68);
      *(_QWORD *)&v25 = v6;
      *((_QWORD *)&v25 + 1) = v5;
      *(_QWORD *)&v26 = v8;
      *((_QWORD *)&v26 + 1) = v7;
      *(_QWORD *)&v27 = v6 + v9;
      *((_QWORD *)&v27 + 1) = HIDWORD(v9);
      *(_QWORD *)&v28 = v6 + v10;
      *((_QWORD *)&v28 + 1) = HIDWORD(v10);
      *(_QWORD *)&v29 = v6 + v11;
      *((_QWORD *)&v29 + 1) = HIDWORD(v11);
      *(_QWORD *)&v30 = v6 + v12;
      *((_QWORD *)&v30 + 1) = HIDWORD(v12);
      *(_QWORD *)&v31 = v6 + v13;
      *((_QWORD *)&v31 + 1) = HIDWORD(v13);
      if (HIDWORD(v9) == (v4 - (uint64_t)v3) >> 6)
      {
        *(_BYTE *)(a2 + 160) &= ~1u;
        *(_QWORD *)(a2 + 24) = a2 + 48;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = a2 + 24;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        v14 = v30;
        *(_OWORD *)(a2 + 112) = v29;
        *(_OWORD *)(a2 + 128) = v14;
        *(_OWORD *)(a2 + 144) = v31;
        v15 = v26;
        *(_OWORD *)(a2 + 48) = v25;
        *(_OWORD *)(a2 + 64) = v15;
        v16 = v28;
        *(_OWORD *)(a2 + 80) = v27;
        *(_OWORD *)(a2 + 96) = v16;
      }
      else
      {
        sub_1C59D4198(a2, v3, (v4 - (uint64_t)v3) >> 6);
        if (v22 != &v25)
          free(v22);
      }
      if (v21[0] != &v22)
        free(v21[0]);
      return;
    }
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 > 0x4B)
      {
        v6 = *(_QWORD *)(a1 + 24);
        if (*(_DWORD *)v6 == 3)
        {
          v8 = *(_QWORD *)(a1 + 40);
          v20 = *(unsigned int *)(v6 + 8);
          if (qword_1ED81A518)
          {
            if (strlen((const char *)qword_1ED81A518) == v20
              && (!(_DWORD)v20
               || !memcmp((const void *)(v8 + *(unsigned int *)(v6 + 4)), (const void *)qword_1ED81A518, v20)))
            {
              goto LABEL_4;
            }
          }
          else if (!(_DWORD)v20)
          {
            goto LABEL_4;
          }
        }
      }
    }
    sub_1C59D4198(a2, v3, (v4 - (uint64_t)v3) >> 6);
    return;
  }
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v18 = qword_1ED836B58[0];
  v19 = operator new();
  v21[0] = "Bitcode file does not contain any modules";
  LOWORD(v23) = 259;
  *(_QWORD *)v19 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v21, (_QWORD *)(v19 + 8));
  *(_QWORD *)(v19 + 32) = 3;
  *(_QWORD *)(v19 + 40) = v18;
  *(_BYTE *)(v19 + 48) = 1;
  *(_BYTE *)(a2 + 160) |= 1u;
  *(_QWORD *)a2 = v19;
}

void sub_1C59D4198(uint64_t a1, __int128 *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  char *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  llvm::Value *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unsigned __int128 v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  llvm::Module *v37;
  llvm::Module *v38;
  uint64_t v40;
  void *__p;
  _QWORD *v42;
  unint64_t v43;
  llvm::LLVMContextImpl *v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  __int128 v48;
  __int128 v49;
  unsigned __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v45 = &v47;
  *((_QWORD *)&v45 + 1) = 0;
  v46 = 0;
  v47 = (unsigned __int8 *)&v49;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v44);
  __p = 0;
  v42 = 0;
  v43 = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = &a2[4 * a3];
    while (1)
    {
      v56 = *a2;
      v57 = a2[1];
      v58[0] = a2[2];
      v58[1] = a2[3];
      llvm::BitcodeModule::getModuleImpl(&v56, (uint64_t)&v44, 0, 1, 0, (uint64_t)sub_1C5017E80, (uint64_t)&v40, (uint64_t)&v62);
      v9 = v62;
      if ((v63 & 1) != 0)
        break;
      if (v7 >= v5)
      {
        v10 = (v7 - v6) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          abort();
        if ((v5 - v6) >> 2 > v11)
          v11 = (v5 - v6) >> 2;
        if ((unint64_t)(v5 - v6) >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
        {
          if (v12 >> 61)
            sub_1C4764EE4();
          v13 = (char *)operator new(8 * v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = (uint64_t *)&v13[8 * v10];
        *v14 = v9;
        v15 = (char *)(v14 + 1);
        while (v7 != v6)
        {
          v16 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v14 = v16;
        }
        v5 = &v13[8 * v12];
        if (v6)
          operator delete(v6);
        v6 = (char *)v14;
        v7 = v15;
      }
      else
      {
        *(_QWORD *)v7 = v62;
        v7 += 8;
      }
      v17 = v42;
      if ((unint64_t)v42 >= v43)
      {
        v19 = sub_1C59D1B3C((char **)&__p, &v62);
      }
      else
      {
        v18 = v62;
        v62 = 0;
        *v42 = v18;
        v19 = (char *)(v17 + 1);
      }
      v42 = v19;
      sub_1C4FF9CA4((uint64_t)&v62);
      a2 += 4;
      if (a2 == v8)
        goto LABEL_28;
    }
    v62 = 0;
    *(_BYTE *)(a1 + 160) |= 1u;
    *(_QWORD *)a1 = v9;
    sub_1C4FF9CA4((uint64_t)&v62);
  }
  else
  {
    v7 = 0;
    v6 = 0;
LABEL_28:
    v65 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v66 = 0x100000006;
    v67 = 0;
    v56 = 0uLL;
    *(_QWORD *)&v57 = v58;
    *((_QWORD *)&v57 + 1) = 0x400000000;
    v59 = v61;
    v60 = 0;
    v61[0] = 0;
    v61[1] = 1;
    llvm::irsymtab::build((llvm::Module **)v6, (v7 - v6) >> 3, (uint64_t *)&v45, (uint64_t)&v62, (uint64_t)&v56, &v40);
    v20 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 160) |= 1u;
      *(_QWORD *)a1 = v20;
    }
    else
    {
      llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)&v62, 0);
      v22 = v65;
      v23 = v48;
      if ((_QWORD)v48 != v65)
      {
        if ((unint64_t)v48 <= v65)
        {
          if (*((_QWORD *)&v48 + 1) < v65)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, &v49, v65, 1);
            v23 = v48;
          }
          if (v22 != v23)
            bzero(&v47[v23], v22 - v23);
        }
        *(_QWORD *)&v48 = v22;
      }
      llvm::StringTableBuilder::write((unsigned int *)&v62, v47);
      v24 = *((_QWORD *)&v45 + 1);
      v25 = v48;
      v26 = *(_QWORD *)(v45 + 12);
      v27 = *(_QWORD *)(v45 + 20);
      v28 = *(_QWORD *)(v45 + 28);
      v29 = *(_QWORD *)(v45 + 36);
      v30 = *(_QWORD *)(v45 + 68);
      v49 = v45;
      v50 = __PAIR128__(v48, (unint64_t)v47);
      *(_QWORD *)&v51 = v45 + v26;
      *((_QWORD *)&v51 + 1) = HIDWORD(v26);
      *(_QWORD *)&v52 = v45 + v27;
      *((_QWORD *)&v52 + 1) = HIDWORD(v27);
      *(_QWORD *)&v53 = v45 + v28;
      *((_QWORD *)&v53 + 1) = HIDWORD(v28);
      *(_QWORD *)&v54 = v45 + v29;
      *((_QWORD *)&v54 + 1) = HIDWORD(v29);
      *(_QWORD *)&v55 = v45 + v30;
      *((_QWORD *)&v55 + 1) = HIDWORD(v30);
      *(_BYTE *)(a1 + 160) &= ~1u;
      *(_QWORD *)a1 = a1 + 24;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      if (v24)
      {
        sub_1C4FE6ED8(a1, (uint64_t)&v45);
        v25 = v48;
      }
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 24) = a1 + 48;
      if (v25)
        sub_1C4FE6ED8(a1 + 24, (uint64_t)&v47);
      v31 = v54;
      *(_OWORD *)(a1 + 112) = v53;
      *(_OWORD *)(a1 + 128) = v31;
      *(_OWORD *)(a1 + 144) = v55;
      v32 = v50;
      *(_OWORD *)(a1 + 48) = v49;
      *(_OWORD *)(a1 + 64) = v32;
      v33 = v52;
      *(_OWORD *)(a1 + 80) = v51;
      *(_OWORD *)(a1 + 96) = v33;
    }
    sub_1C4926AE8((uint64_t)&v56);
    MEMORY[0x1CAA32FB4](v62, 8);
  }
  v34 = __p;
  if (__p)
  {
    v35 = v42;
    v36 = __p;
    if (v42 != __p)
    {
      do
      {
        v38 = (llvm::Module *)*--v35;
        v37 = v38;
        *v35 = 0;
        if (v38)
        {
          llvm::Module::~Module(v37);
          MEMORY[0x1CAA32FC0]();
        }
      }
      while (v35 != v34);
      v36 = __p;
    }
    v42 = v34;
    operator delete(v36);
  }
  if (v6)
    operator delete(v6);
  llvm::LLVMContext::~LLVMContext(&v44, v21);
  if (v47 != (unsigned __int8 *)&v49)
    free(v47);
  if ((unsigned __int8 **)v45 != &v47)
    free((void *)v45);
}

char *sub_1C59D4630()
{
  char *result;
  char *v1;
  __n128 v2;
  int v3;
  char v4;
  char *v5;

  v4 = 0;
  v5 = &v4;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Disable automatic bitcode upgrade for version mismatch";
  v2.n128_u64[1] = 54;
  sub_1C498EDF8((llvm::cl::Option *)&DisableBitcodeVersionUpgrade, "disable-bitcode-version-upgrade", &v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &DisableBitcodeVersionUpgrade, &dword_1C475E000);
  result = getenv("LLVM_OVERRIDE_PRODUCER");
  v1 = a32023334_0;
  if (result)
    v1 = result;
  qword_1ED81A518 = (uint64_t)v1;
  return result;
}

uint64_t llvm::object::MachOObjectFile::create@<X0>(__int128 *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18[2];
  uint64_t v19;

  v19 = 0;
  v12 = operator new();
  v13 = a1[1];
  v18[0] = *a1;
  v18[1] = v13;
  result = llvm::object::MachOObjectFile::MachOObjectFile(v12, v18, a2, a3, &v19, a4, a5);
  v15 = v19;
  v16 = *(_BYTE *)(a6 + 8);
  if (v19)
  {
    v17 = v16 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v15;
  }
  else
  {
    v17 = v16 & 0xFE;
  }
  *(_BYTE *)(a6 + 8) = v17;
  *(_QWORD *)a6 = result;
  return result;
}

uint64_t llvm::object::MachOObjectFile::MachOObjectFile(uint64_t a1, __int128 *a2, int a3, int a4, uint64_t *a5, int a6, unsigned int a7)
{
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int8x16_t v28;
  int8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  int8x16_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  __int128 *v46;
  BOOL v47;
  __int128 v49;
  unint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  const char *v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  char *v69;
  __int16 v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  char *v86;
  char *v87;
  char *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  __int16 v97;
  _DWORD *v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  const char *v116;
  const char *v117;
  _BYTE *v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  BOOL v127;
  void *v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  const char *v139;
  __int16 v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  BOOL v174;
  unsigned int v175;
  unsigned __int8 *v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  BOOL v191;
  int v192;
  int v193;
  int v194;
  BOOL v195;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  BOOL v209;
  int v210;
  int v211;
  int v212;
  BOOL v213;
  const char *v215;
  const char *v216;
  const char *v217;
  const char *v218;
  unint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  const char *v225;
  char v226;
  char v227;
  unint64_t v228;
  __int16 v229;
  uint64_t v230;
  const char *v231;
  const char *v232;
  const char *v233;
  unint64_t v234;
  __int16 v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  BOOL v240;
  BOOL v242;
  const char *v243;
  const char *v244;
  unsigned int v245;
  const char *v246;
  BOOL v247;
  unsigned int v248;
  const char *v249;
  char v250;
  char v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  int v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  const char *v260;
  const char *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int v314;
  uint64_t v315;
  unsigned int v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unint64_t v321;
  unint64_t v322;
  unsigned int v323;
  unint64_t v324;
  unsigned int v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unsigned int v329;
  unint64_t v330;
  unint64_t v331;
  unsigned int v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  int v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t v339;
  int v340;
  unsigned int v341;
  int v342;
  uint64_t v343;
  unsigned int v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  __int128 v351;
  unsigned int v352;
  unint64_t v353;
  unsigned int v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  __int128 *v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _DWORD *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  __int128 v388;
  _QWORD *v389;
  void *__p;
  uint64_t v391;
  _QWORD v392[2];
  unint64_t v393;
  __int16 v394;
  _QWORD v395[2];
  const char *v396;
  __int16 v397;
  _QWORD v398[2];
  const char *v399;
  __int16 v400;
  _QWORD v401[2];
  const char *v402;
  __int16 v403;
  _QWORD v404[2];
  unint64_t v405;
  __int16 v406;
  uint64_t v407[2];
  const char *v408;
  __int16 v409;
  char v410[16];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  int8x16_t v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  char v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  char v426[16];
  __int128 v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;
  char v431;
  uint64_t v432;

  v432 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v11 = a2[1];
  if (a4)
    v13 = 18;
  else
    v13 = 16;
  if (a4)
    v14 = 19;
  else
    v14 = 17;
  if (!a3)
    v13 = v14;
  *(_DWORD *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_1E8189350;
  v15 = a1 + 96;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  v16 = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0x100000000;
  v17 = a1 + 120;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  v18 = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0x100000000;
  v381 = a1 + 144;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  v19 = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  v20 = (_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 216) = 0x100000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x100000000;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  v22 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  if ((v13 & 2) != 0)
  {
    if ((unint64_t)v21 <= 0x1F)
    {
      v415.i64[0] = (uint64_t)"the mach header extends past the end of the file";
      LOWORD(v417) = 259;
      sub_1C59D7FE0((uint64_t *)v426, v415.i64);
      v23 = *(_QWORD *)v426;
      *a5 = *(_QWORD *)v426;
      v24 = 32;
      if (v23)
        return a1;
      goto LABEL_30;
    }
    if (v21 >= 32)
    {
      v27 = *(_DWORD *)v22;
      v26 = *(unsigned int *)(v22 + 4);
      v28 = *(int8x16_t *)(v22 + 8);
      v29 = *(int8x8_t *)(v22 + 24);
      if (!a3 && a4)
      {
        v27 = bswap32(v27);
        v26 = bswap32(v26);
        v28 = vrev32q_s8(v28);
        v29 = vrev32_s8(v29);
      }
      *(_QWORD *)(a1 + 48) = v27 | (unint64_t)(v26 << 32);
      *(int8x16_t *)(a1 + 56) = v28;
      *(int8x8_t *)(a1 + 72) = v29;
    }
    else
    {
      v415.i64[0] = (uint64_t)"Structure read out-of-range";
      LOWORD(v417) = 259;
      sub_1C59D7FE0((uint64_t *)v426, v415.i64);
      *a5 = *(_QWORD *)v426;
    }
    v24 = 32;
  }
  else
  {
    if ((unint64_t)v21 <= 0x1B)
    {
      v415.i64[0] = (uint64_t)"the mach header extends past the end of the file";
      LOWORD(v417) = 259;
      sub_1C59D7FE0((uint64_t *)v426, v415.i64);
      v25 = *(_QWORD *)v426;
      *a5 = *(_QWORD *)v426;
      v24 = 28;
      if (v25)
        return a1;
      goto LABEL_30;
    }
    if (v21 >= 28)
    {
      v31 = *(_DWORD *)v22;
      v30 = *(unsigned int *)(v22 + 4);
      v32 = *(int8x16_t *)(v22 + 8);
      v33 = *(_DWORD *)(v22 + 24);
      if ((v13 | 2) == 0x13)
      {
        v31 = bswap32(v31);
        v30 = bswap32(v30);
        v32 = vrev32q_s8(v32);
        v33 = bswap32(v33);
      }
      *(_QWORD *)(a1 + 48) = v31 | (unint64_t)(v30 << 32);
      *(int8x16_t *)(a1 + 56) = v32;
      *(_DWORD *)(a1 + 72) = v33;
    }
    else
    {
      v415.i64[0] = (uint64_t)"Structure read out-of-range";
      LOWORD(v417) = 259;
      sub_1C59D7FE0((uint64_t *)v426, v415.i64);
      *a5 = *(_QWORD *)v426;
    }
    v24 = 28;
  }
  if (*a5)
    return a1;
LABEL_30:
  v380 = v17;
  v34 = *(unsigned int *)(a1 + 68);
  if (v24 + v34 > *(_QWORD *)(a1 + 24))
  {
    v415.i64[0] = (uint64_t)"load commands extend past the end of the file";
    LOWORD(v417) = 259;
    sub_1C59D7FE0((uint64_t *)v426, v415.i64);
    v35 = *(_QWORD *)v426;
    goto LABEL_35;
  }
  v377 = v15;
  v36 = *(_QWORD *)(a1 + 16);
  if (a6 && *(_DWORD *)(a1 + 52) != a6)
  {
    *(_QWORD *)v426 = "universal header architecture: ";
    *(_QWORD *)&v427 = a7;
    LOWORD(v428) = 2051;
    v415.i64[0] = (uint64_t)v426;
    *(_QWORD *)&v416 = "'s cputype does not match object file's mach header";
    LOWORD(v417) = 770;
    sub_1C59D7FE0((uint64_t *)v410, v415.i64);
    v35 = *(_QWORD *)v410;
LABEL_35:
    *a5 = v35;
    if (!v35)
      goto LABEL_36;
    return a1;
  }
  v375 = *(_DWORD *)(a1 + 72);
  v378 = v24 + v34;
  v38 = operator new(0x28uLL);
  v38[2] = 0;
  v38[3] = v378;
  v38[4] = "Mach-O headers";
  *v38 = &v389;
  v38[1] = &v389;
  __p = v38;
  v389 = v38;
  v391 = 1;
  v39 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v39)
  {
    v40 = 0;
    v387 = 0;
    v386 = 0;
    goto LABEL_42;
  }
  if (v34 <= 7)
  {
    v415.i64[0] = (uint64_t)"load command 0 extends past the end all load commands in the file";
    LOWORD(v417) = 259;
    sub_1C59D7FE0((uint64_t *)v426, v415.i64);
LABEL_631:
    v254 = *(_QWORD *)v426;
    goto LABEL_632;
  }
  v44 = 28;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    v44 = 32;
  sub_1C59EDD90((uint64_t)v426, a1, (_DWORD *)(v36 + v44), 0);
  if ((v427 & 1) != 0)
    goto LABEL_631;
  v45 = 0;
  v371 = 0;
  v372 = 0;
  v373 = 0;
  v370 = 0;
  v40 = 0;
  v46 = 0;
  v367 = 0;
  v368 = 0;
  v369 = (_QWORD *)(a1 + 16);
  v388 = *(_OWORD *)v426;
  v387 = 0;
  v386 = 0;
  v385 = 0;
  v384 = 0;
  v383 = 0;
  v379 = (v39 - 1);
  v374 = v39;
  while (2)
  {
    if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    {
      if ((BYTE12(v388) & 7) != 0)
      {
        v47 = (BYTE12(v388) & 3) == 0 && *(_DWORD *)(a1 + 60) == 4;
        if (!v47 || DWORD2(v388) != 4)
        {
          *(_QWORD *)v426 = "load command ";
          *(_QWORD *)&v427 = v45;
          LOWORD(v428) = 2051;
          v253 = " cmdsize not a multiple of 8";
          goto LABEL_651;
        }
      }
    }
    else if ((BYTE12(v388) & 3) != 0)
    {
      *(_QWORD *)v426 = "load command ";
      *(_QWORD *)&v427 = v45;
      LOWORD(v428) = 2051;
      v253 = " cmdsize not a multiple of 4";
      goto LABEL_651;
    }
    v49 = v388;
    v50 = *(unsigned int *)(a1 + 136);
    if (v50 >= *(unsigned int *)(a1 + 140))
    {
      v351 = v388;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v381, v50 + 1, 16);
      v49 = v351;
      v50 = *(unsigned int *)(a1 + 136);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 128) + 16 * v50) = v49;
    ++*(_DWORD *)(a1 + 136);
    if (SDWORD2(v388) > -2147483597)
    {
      switch(DWORD2(v388))
      {
        case 1:
          if (HIDWORD(v388) <= 0x37)
          {
            *(_QWORD *)&v421 = "load command ";
            v358 = v358 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v422 = v358;
            LOWORD(v423) = 2051;
            *(_QWORD *)v410 = &v421;
            *(_QWORD *)&v411 = " ";
            LOWORD(v412) = 770;
            v51 = "LC_SEGMENT";
            goto LABEL_128;
          }
          sub_1C59F516C((uint64_t)v410, a1, v388);
          if ((BYTE8(v413) & 1) != 0)
            goto LABEL_445;
          v421 = *(_OWORD *)v410;
          v422 = v411;
          v423 = v412;
          *(_QWORD *)&v424 = v413;
          v115 = v355;
          if (v413 > 0x3C3C3C3 || 68 * (int)v413 > (HIDWORD(v388) - 56))
          {
            v404[0] = "load command ";
            v355 = v355 & 0xFFFFFFFF00000000 | v45;
            v405 = v115 & 0xFFFFFFFF00000000 | v45;
            v406 = 2051;
            v407[0] = (uint64_t)v404;
            v408 = " inconsistent cmdsize in ";
            v409 = 770;
            *(_QWORD *)v426 = v407;
            *(_QWORD *)&v427 = "LC_SEGMENT";
            LOWORD(v428) = 770;
            v92 = v426;
            goto LABEL_211;
          }
          v349 = *(_QWORD *)(a1 + 24);
          if ((_DWORD)v413)
          {
            v178 = 0;
            v336 = v423;
            v327 = DWORD1(v423);
            v323 = DWORD2(v422);
            v342 = HIDWORD(v422);
            v330 = DWORD2(v422) + (unint64_t)HIDWORD(v422);
            v339 = v413;
            v364 = v40;
            v366 = v46;
            do
            {
              v179 = v388;
              if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
                v180 = 72;
              else
                v180 = 56;
              if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
                v181 = 80;
              else
                v181 = 68;
              v182 = *(unsigned int *)(a1 + 88);
              if (v182 >= *(unsigned int *)(a1 + 92))
              {
                v315 = v178;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v16, v377, v182 + 1, 8);
                v178 = v315;
                v182 = *(unsigned int *)(a1 + 88);
              }
              v183 = v180 + v179;
              v184 = v178;
              v185 = v183 + (v181 * v178);
              *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v182) = v185;
              ++*(_DWORD *)(a1 + 88);
              v186 = v185;
              sub_1C59EB5B4((uint64_t)&v415, a1, v185);
              if ((BYTE8(v419) & 1) != 0)
                goto LABEL_490;
              v428 = v417;
              v429 = v418;
              LODWORD(v430) = v419;
              *(int8x16_t *)v426 = v415;
              v427 = v416;
              v187 = *(_DWORD *)(a1 + 60);
              v39 = v374;
              v188 = v349;
              if (v187 == 9)
              {
                v189 = DWORD1(v428);
              }
              else
              {
                v191 = v187 == 10 || DWORD2(v429) == 1 || DWORD2(v429) == 18;
                v192 = !v191;
                if (!v191 && v349 < DWORD2(v428))
                {
                  v392[0] = "offset field of section ";
                  v296 = v296 & 0xFFFFFFFF00000000 | v184;
                  v393 = v296;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v237 = v297 & 0xFFFFFFFF00000000 | v45;
                  v404[0] = v401;
                  v297 = v237;
LABEL_544:
                  v405 = v237;
                  v406 = 2050;
                  v243 = " extends past the end of the file";
                  goto LABEL_545;
                }
                if (v336)
                  v193 = 0;
                else
                  v193 = v192;
                v189 = DWORD1(v428);
                if (v193 == 1 && v378 > DWORD2(v428) && DWORD1(v428))
                {
                  v392[0] = "offset field of section ";
                  v275 = v275 & 0xFFFFFFFF00000000 | v184;
                  v393 = v275;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v404[0] = v401;
                  v276 = v276 & 0xFFFFFFFF00000000 | v45;
                  v405 = v276;
                  v406 = 2050;
                  v243 = " not past the headers of the file";
LABEL_545:
                  v407[0] = (uint64_t)v404;
                  v408 = v243;
                  v409 = 770;
                  sub_1C59D7FE0(&v382, v407);
LABEL_546:
                  v40 = v364;
                  goto LABEL_547;
                }
                v188 = v349;
                if (DWORD1(v428) + (unint64_t)DWORD2(v428) > v349)
                  v194 = v192;
                else
                  v194 = 0;
                if (v194 == 1)
                {
                  v392[0] = "offset field plus size field of section ";
                  v292 = v292 & 0xFFFFFFFF00000000 | v184;
                  v393 = v292;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v237 = v293 & 0xFFFFFFFF00000000 | v45;
                  v404[0] = v401;
                  v293 = v237;
                  goto LABEL_544;
                }
                if (DWORD1(v428) <= v327)
                  v192 = 0;
                if (v192 == 1)
                {
                  v392[0] = "size field of section ";
                  v284 = v284 & 0xFFFFFFFF00000000 | v184;
                  v393 = v284;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v404[0] = v401;
                  v285 = v285 & 0xFFFFFFFF00000000 | v45;
                  v405 = v285;
                  v406 = 2050;
                  v243 = " greater than the segment";
                  goto LABEL_545;
                }
                if (v187 != 10 && DWORD1(v428) && v428 < v323)
                {
                  v392[0] = "addr field of section ";
                  v280 = v280 & 0xFFFFFFFF00000000 | v184;
                  v393 = v280;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v404[0] = v401;
                  v281 = v281 & 0xFFFFFFFF00000000 | v45;
                  v405 = v281;
                  v406 = 2050;
                  v243 = " less than the segment's vmaddr";
                  goto LABEL_545;
                }
              }
              if (v342 && v189 && (unint64_t)v428 + v189 > v330)
              {
                v392[0] = "addr field plus size of section ";
                v289 = v289 & 0xFFFFFFFF00000000 | v184;
                v393 = v289;
                v394 = 2051;
                v395[0] = v392;
                v396 = " in ";
                v397 = 770;
                v398[0] = v395;
                v399 = "LC_SEGMENT";
                v400 = 770;
                v401[0] = v398;
                v402 = " command ";
                v403 = 770;
                v404[0] = v401;
                v286 = v286 & 0xFFFFFFFF00000000 | v45;
                v405 = v286;
                v406 = 2050;
                v243 = " greater than than the segment's vmaddr plus vmsize";
                goto LABEL_545;
              }
              if (v187 != 9 && v187 != 10 && DWORD2(v429) != 1 && DWORD2(v429) != 18)
              {
                sub_1C59EDF18(&v382, (uint64_t *)&v389, DWORD2(v428), v189, "section contents");
                v188 = v349;
                if (v382)
                  goto LABEL_546;
              }
              if (v188 < v429)
              {
                v392[0] = "reloff field of section ";
                v307 = v307 & 0xFFFFFFFF00000000 | v184;
                v393 = v307;
                v394 = 2051;
                v395[0] = v392;
                v396 = " in ";
                v397 = 770;
                v398[0] = v395;
                v399 = "LC_SEGMENT";
                v400 = 770;
                v401[0] = v398;
                v402 = " command ";
                v403 = 770;
                v237 = v308 & 0xFFFFFFFF00000000 | v45;
                v404[0] = v401;
                v308 = v237;
                goto LABEL_544;
              }
              if (v429 + 8 * (unint64_t)DWORD1(v429) > v188)
              {
                v392[0] = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
                v303 = v303 & 0xFFFFFFFF00000000 | v184;
                v393 = v303;
                v394 = 2051;
                v395[0] = v392;
                v396 = " in ";
                v397 = 770;
                v398[0] = v395;
                v399 = "LC_SEGMENT";
                v400 = 770;
                v401[0] = v398;
                v402 = " command ";
                v403 = 770;
                v237 = v304 & 0xFFFFFFFF00000000 | v45;
                v404[0] = v401;
                v304 = v237;
                goto LABEL_544;
              }
              sub_1C59EDF18(&v382, (uint64_t *)&v389, v429, 8 * DWORD1(v429), "section relocation entries");
              if (v382)
                goto LABEL_546;
              if (strlen((const char *)&v427) == 6)
              {
                v195 = (_DWORD)v427 == 1163157343 && WORD2(v427) == 21592;
                if (v195
                  && strlen(v426) == 14
                  && *(_QWORD *)v426 == 0x5F6E696168635F5FLL
                  && *(_QWORD *)&v426[6] == 0x7374726174735F6ELL)
                {
                  *(_QWORD *)(a1 + 352) = v186;
                }
              }
              v178 = v184 + 1;
              v174 = v184 + 1 >= v339;
              v46 = v366;
              v40 = v364;
            }
            while (!v174);
          }
          if (v349 < v423)
          {
            v404[0] = "load command ";
            v318 = v318 & 0xFFFFFFFF00000000 | v45;
            v405 = v318;
            v406 = 2051;
            v407[0] = (uint64_t)v404;
            v408 = " fileoff field in ";
            v409 = 770;
            *(_QWORD *)v426 = v407;
            *(_QWORD *)&v427 = "LC_SEGMENT";
            LOWORD(v428) = 770;
            v92 = v426;
            v93 = " extends past the end of the file";
            goto LABEL_212;
          }
          if (DWORD1(v423) + (unint64_t)v423 > v349)
          {
            v404[0] = "load command ";
            v311 = v311 & 0xFFFFFFFF00000000 | v45;
            v405 = v311;
            v406 = 2051;
            v407[0] = (uint64_t)v404;
            v408 = " fileoff field plus filesize field in ";
            v409 = 770;
            *(_QWORD *)v426 = v407;
            *(_QWORD *)&v427 = "LC_SEGMENT";
            LOWORD(v428) = 770;
            v232 = " extends past the end of the file";
LABEL_495:
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = v232;
            LOWORD(v417) = 770;
            sub_1C59D7FE0(&v382, v415.i64);
            v39 = v374;
            goto LABEL_213;
          }
          if (HIDWORD(v422) && DWORD1(v423) > HIDWORD(v422))
          {
            v404[0] = "load command ";
            v300 = v300 & 0xFFFFFFFF00000000 | v45;
            v405 = v300;
            v406 = 2051;
            v407[0] = (uint64_t)v404;
            v408 = " filesize field in ";
            v409 = 770;
            *(_QWORD *)v426 = v407;
            *(_QWORD *)&v427 = "LC_SEGMENT";
            LOWORD(v428) = 770;
            v232 = " greater than vmsize field";
            goto LABEL_495;
          }
          v240 = strlen((const char *)&v421 + 8) == 10
              && *((_QWORD *)&v421 + 1) == 0x455A454741505F5FLL
              && (unsigned __int16)v422 == 20306;
          *(_BYTE *)(a1 + 344) |= v240;
          *a5 = 0;
LABEL_141:
          v39 = v374;
          goto LABEL_164;
        case 2:
          if (HIDWORD(v388) <= 0x17)
          {
            *(_QWORD *)v426 = "load command ";
            v360 = v360 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v360;
            LOWORD(v428) = 2051;
            v79 = " LC_SYMTAB cmdsize too small";
LABEL_145:
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = v79;
            v97 = 770;
            goto LABEL_299;
          }
          if (*(_QWORD *)(a1 + 272))
          {
            v117 = "more than one LC_SYMTAB command";
LABEL_298:
            v415.i64[0] = (uint64_t)v117;
            v97 = 259;
LABEL_299:
            LOWORD(v417) = v97;
            sub_1C59D7FE0(v407, v415.i64);
            goto LABEL_300;
          }
          v150 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v388 < v150 || (v151 = *(_QWORD *)(a1 + 24), (uint64_t)v388 + 24 > v150 + v151))
          {
LABEL_277:
            v415.i64[0] = (uint64_t)"Structure read out-of-range";
            LOWORD(v417) = 259;
            sub_1C59D7FE0((uint64_t *)v426, v415.i64);
            v66 = *(_QWORD *)v426;
            v39 = v374;
            goto LABEL_163;
          }
          v366 = v46;
          v153 = *(_DWORD *)(v388 + 4);
          v152 = *(_DWORD *)(v388 + 8);
          v154 = *(_DWORD *)(v388 + 12);
          v155 = *(_DWORD *)(v388 + 16);
          v156 = *(_DWORD *)(v388 + 20);
          v157 = *(_DWORD *)(a1 + 8);
          if (v157 <= 0x13 && ((1 << v157) & 0xAAC00) != 0)
          {
            v153 = bswap32(v153);
            v152 = bswap32(v152);
            v154 = bswap32(v154);
            v155 = bswap32(v155);
            v156 = bswap32(v156);
          }
          if (v153 != 24)
          {
            *(_QWORD *)v426 = "LC_SYMTAB command ";
            v334 = v334 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v334;
            LOWORD(v428) = 2051;
            v215 = " has incorrect cmdsize";
            goto LABEL_523;
          }
          if (v151 < v152)
          {
            *(_QWORD *)v426 = "symoff field of LC_SYMTAB command ";
            v321 = v321 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v321;
            goto LABEL_502;
          }
          v352 = v156;
          v219 = v152;
          v220 = v157 & 0xFFFFFFFE;
          v221 = 16 * v154;
          v222 = 12 * v154;
          if (v220 == 18)
            v223 = v221;
          else
            v223 = v222;
          if (v220 == 18)
            v224 = "struct nlist_64";
          else
            v224 = "struct nlist";
          if (v223 + v219 > v151)
          {
            if (*v224)
            {
              v225 = (const char *)&v421;
              *(_QWORD *)&v422 = v224;
              v226 = 3;
              v227 = 2;
            }
            else
            {
              v226 = 1;
              v225 = "symoff field plus nsyms field times sizeof(";
              v227 = 3;
            }
            *(_QWORD *)&v421 = "symoff field plus nsyms field times sizeof(";
            LOBYTE(v423) = 3;
            BYTE1(v423) = v226;
            *(_QWORD *)v410 = v225;
            *(_QWORD *)&v411 = ") of LC_SYMTAB command ";
            LOBYTE(v412) = v227;
            BYTE1(v412) = 3;
            *(_QWORD *)v426 = v410;
            v312 = v312 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v312;
            v235 = 2050;
            goto LABEL_522;
          }
          sub_1C59EDF18(v407, (uint64_t *)&v389, v219, v223, "symbol table");
          v254 = v407[0];
          if (v407[0])
            goto LABEL_632;
          if (v151 < v155)
          {
            v234 = v309 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "stroff field of LC_SYMTAB command ";
            v309 = v234;
            goto LABEL_501;
          }
          if (v155 + (unint64_t)v352 > v151)
          {
            v234 = v298 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "stroff field plus strsize field of LC_SYMTAB command ";
            v298 = v234;
LABEL_501:
            *(_QWORD *)&v427 = v234;
LABEL_502:
            v235 = 2051;
LABEL_522:
            LOWORD(v428) = v235;
            v215 = " extends past the end of the file";
LABEL_523:
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = v215;
            LOWORD(v417) = 770;
            sub_1C59D7FE0(v407, v415.i64);
LABEL_524:
            v39 = v374;
            v46 = v366;
            goto LABEL_300;
          }
          sub_1C59EDF18(v407, (uint64_t *)&v389, v155, v352, "string table");
          v254 = v407[0];
          if (v407[0])
            goto LABEL_632;
          *(_QWORD *)(a1 + 272) = v388;
          goto LABEL_573;
        case 3:
        case 6:
        case 7:
        case 9:
        case 0xA:
        case 0x10:
        case 0x17:
        case 0x18:
        case 0x1C:
        case 0x1F:
        case 0x23:
        case 0x28:
          goto LABEL_80;
        case 4:
          sub_1C59D9958((uint64_t)&v415, a1, v388, HIDWORD(v388), v45, "LC_THREAD");
          goto LABEL_162;
        case 5:
          sub_1C59D9958((uint64_t)&v415, a1, v388, HIDWORD(v388), v45, "LC_UNIXTHREAD");
          v80 = v415.i64[0];
          *a5 = v415.i64[0];
          if (v80)
            goto LABEL_633;
          if (!v370)
          {
            v370 = v388;
            goto LABEL_164;
          }
          v261 = "more than one LC_UNIXTHREAD command";
          goto LABEL_630;
        case 8:
          goto LABEL_172;
        case 0xB:
          if (HIDWORD(v388) <= 0x4F)
          {
            *(_QWORD *)v426 = "load command ";
            v361 = v361 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v361;
            LOWORD(v428) = 2051;
            v79 = " LC_DYSYMTAB cmdsize too small";
            goto LABEL_145;
          }
          if (*(_QWORD *)(a1 + 280))
          {
            v117 = "more than one LC_DYSYMTAB command";
            goto LABEL_298;
          }
          v158 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v388 < v158 || (v159 = *(_QWORD *)(a1 + 24), (uint64_t)v388 + 80 > v158 + v159))
          {
            v117 = "Structure read out-of-range";
            goto LABEL_298;
          }
          v160 = *(_DWORD *)(v388 + 4);
          v162 = *(_DWORD *)(v388 + 32);
          v161 = *(_DWORD *)(v388 + 36);
          v164 = *(_DWORD *)(v388 + 40);
          v163 = *(_DWORD *)(v388 + 44);
          v166 = *(_DWORD *)(v388 + 48);
          v165 = *(_DWORD *)(v388 + 52);
          v168 = *(_DWORD *)(v388 + 56);
          v167 = *(_DWORD *)(v388 + 60);
          v170 = *(_DWORD *)(v388 + 64);
          v169 = *(_DWORD *)(v388 + 68);
          v172 = *(_DWORD *)(v388 + 72);
          v171 = *(_DWORD *)(v388 + 76);
          v173 = *(_DWORD *)(a1 + 8);
          if (v173 <= 0x13 && ((1 << v173) & 0xAAC00) != 0)
          {
            v160 = bswap32(v160);
            v162 = bswap32(v162);
            v161 = bswap32(v161);
            v164 = bswap32(v164);
            v163 = bswap32(v163);
            v166 = bswap32(v166);
            v165 = bswap32(v165);
            v168 = bswap32(v168);
            v167 = bswap32(v167);
            v170 = bswap32(v170);
            v169 = bswap32(v169);
            v172 = bswap32(v172);
            v171 = bswap32(v171);
          }
          if (v160 != 80)
          {
            *(_QWORD *)v426 = "LC_DYSYMTAB command ";
            v335 = v335 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v335;
            LOWORD(v428) = 2051;
            v216 = " has incorrect cmdsize";
LABEL_467:
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = v216;
            LOWORD(v417) = 770;
            sub_1C59D7FE0(v407, v415.i64);
            goto LABEL_468;
          }
          if (v159 < v162)
          {
            *(_QWORD *)v426 = "tocoff field of LC_DYSYMTAB command ";
            v322 = v322 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v322;
            goto LABEL_465;
          }
          v344 = v163;
          v341 = v166;
          v338 = v165;
          v332 = v168;
          v329 = v167;
          v325 = v170;
          v320 = v169;
          v316 = v172;
          v314 = v171;
          v353 = *(_QWORD *)(a1 + 24);
          if (v162 + 8 * (unint64_t)v161 > v159)
          {
            v228 = v313 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "tocoff field plus ntoc field times sizeof(struct dylib_table_of_contents) of LC_DYSYMTAB command ";
            v313 = v228;
LABEL_464:
            *(_QWORD *)&v427 = v228;
LABEL_465:
            v229 = 2051;
LABEL_466:
            LOWORD(v428) = v229;
            v216 = " extends past the end of the file";
            goto LABEL_467;
          }
          sub_1C59EDF18(v407, (uint64_t *)&v389, v162, 8 * v161, "table of contents");
          if (!v407[0])
          {
            if (v353 < v164)
            {
              v228 = v277 & 0xFFFFFFFF00000000 | v45;
              *(_QWORD *)v426 = "modtaboff field of LC_DYSYMTAB command ";
              v277 = v228;
              goto LABEL_464;
            }
            v245 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE;
            v246 = "struct dylib_module_64";
            v247 = v245 == 18;
            if (v245 != 18)
              v246 = "struct dylib_module";
            v248 = 52;
            if (v247)
              v248 = 56;
            if (v164 + v248 * (unint64_t)v344 > v353)
            {
              if (*v246)
              {
                v249 = (const char *)&v421;
                *(_QWORD *)&v422 = v246;
                v250 = 3;
                v251 = 2;
              }
              else
              {
                v250 = 1;
                v249 = "modtaboff field plus nmodtab field times sizeof(";
                v251 = 3;
              }
              *(_QWORD *)&v421 = "modtaboff field plus nmodtab field times sizeof(";
              LOBYTE(v423) = 3;
              BYTE1(v423) = v250;
              *(_QWORD *)v410 = v249;
              *(_QWORD *)&v411 = ") of LC_DYSYMTAB command ";
              LOBYTE(v412) = v251;
              BYTE1(v412) = 3;
              *(_QWORD *)v426 = v410;
              v272 = v272 & 0xFFFFFFFF00000000 | v45;
              *(_QWORD *)&v427 = v272;
              v229 = 2050;
              goto LABEL_466;
            }
            sub_1C59EDF18(v407, (uint64_t *)&v389, v164, v248 * (unint64_t)v344, "module table");
            if (!v407[0])
            {
              if (v353 < v341)
              {
                v228 = v269 & 0xFFFFFFFF00000000 | v45;
                *(_QWORD *)v426 = "extrefsymoff field of LC_DYSYMTAB command ";
                v269 = v228;
                goto LABEL_464;
              }
              if (v341 + 4 * (unint64_t)v338 > v353)
              {
                v228 = v268 & 0xFFFFFFFF00000000 | v45;
                *(_QWORD *)v426 = "extrefsymoff field plus nextrefsyms field times sizeof(struct dylib_reference) of LC_D"
                                  "YSYMTAB command ";
                v268 = v228;
                goto LABEL_464;
              }
              sub_1C59EDF18(v407, (uint64_t *)&v389, v341, 4 * v338, "reference table");
              if (!v407[0])
              {
                if (v353 < v332)
                {
                  v228 = v267 & 0xFFFFFFFF00000000 | v45;
                  *(_QWORD *)v426 = "indirectsymoff field of LC_DYSYMTAB command ";
                  v267 = v228;
                  goto LABEL_464;
                }
                if (v332 + 4 * (unint64_t)v329 > v353)
                {
                  v228 = v266 & 0xFFFFFFFF00000000 | v45;
                  *(_QWORD *)v426 = "indirectsymoff field plus nindirectsyms field times sizeof(uint32_t) of LC_DYSYMTAB command ";
                  v266 = v228;
                  goto LABEL_464;
                }
                sub_1C59EDF18(v407, (uint64_t *)&v389, v332, 4 * v329, "indirect table");
                if (!v407[0])
                {
                  if (v353 < v325)
                  {
                    v228 = v265 & 0xFFFFFFFF00000000 | v45;
                    *(_QWORD *)v426 = "extreloff field of LC_DYSYMTAB command ";
                    v265 = v228;
                    goto LABEL_464;
                  }
                  if (v325 + 8 * (unint64_t)v320 > v353)
                  {
                    v228 = v264 & 0xFFFFFFFF00000000 | v45;
                    *(_QWORD *)v426 = "extreloff field plus nextrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
                    v264 = v228;
                    goto LABEL_464;
                  }
                  sub_1C59EDF18(v407, (uint64_t *)&v389, v325, 8 * v320, "external relocation table");
                  if (!v407[0])
                  {
                    if (v353 < v316)
                    {
                      v228 = v263 & 0xFFFFFFFF00000000 | v45;
                      *(_QWORD *)v426 = "locreloff field of LC_DYSYMTAB command ";
                      v263 = v228;
                      goto LABEL_464;
                    }
                    if (v316 + 8 * (unint64_t)v314 > v353)
                    {
                      v228 = v262 & 0xFFFFFFFF00000000 | v45;
                      *(_QWORD *)v426 = "locreloff field plus nlocrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
                      v262 = v228;
                      goto LABEL_464;
                    }
                    sub_1C59EDF18(v407, (uint64_t *)&v389, v316, 8 * v314, "local relocation table");
                    if (!v407[0])
                    {
                      *(_QWORD *)(a1 + 280) = v388;
                      v407[0] = 0;
                    }
                  }
                }
              }
            }
          }
LABEL_468:
          v39 = v374;
LABEL_300:
          v66 = v407[0];
          goto LABEL_163;
        case 0xC:
          v54 = "LC_LOAD_DYLIB";
          goto LABEL_136;
        case 0xD:
          sub_1C59D88FC((uint64_t *)v426, a1, (uint64_t)&v388, v45, "LC_ID_DYLIB");
          v254 = *(_QWORD *)v426;
          if (*(_QWORD *)v426)
            goto LABEL_632;
          if (v40)
          {
            v81 = "more than one LC_ID_DYLIB command";
LABEL_196:
            v415.i64[0] = (uint64_t)v81;
            LOWORD(v417) = 259;
            sub_1C59D7FE0((uint64_t *)v426, v415.i64);
            goto LABEL_197;
          }
          v131 = *(_DWORD *)(a1 + 60);
          if (v131 > 0xE || ((1 << v131) & 0x4240) == 0)
          {
            v81 = "LC_ID_DYLIB load command in non-dynamic library file type";
            goto LABEL_196;
          }
          v40 = v388;
          goto LABEL_244;
        case 0xE:
          v67 = v388;
          v68 = HIDWORD(v388);
          v69 = "LC_LOAD_DYLINKER";
          goto LABEL_156;
        case 0xF:
          v67 = v388;
          v68 = HIDWORD(v388);
          v69 = "LC_ID_DYLINKER";
          goto LABEL_156;
        case 0x11:
          if (HIDWORD(v388) == 40)
          {
            if (v373)
            {
              v261 = "more than one LC_ROUTINES and or LC_ROUTINES_64 command";
              goto LABEL_630;
            }
            goto LABEL_131;
          }
          v260 = "LC_ROUTINES command ";
          goto LABEL_650;
        case 0x12:
          if (HIDWORD(v388) > 0xB)
          {
            sub_1C59D9404(a1, (_DWORD *)v388);
            v83 = v82;
            v84 = v388;
            v85 = HIDWORD(v388);
            v86 = "LC_SUB_FRAMEWORK";
            v87 = "sub_framework_command";
            v88 = "umbrella";
LABEL_125:
            sub_1C59D9480(v415.i64, v84, v85, v45, v86, v87, v83, v88);
LABEL_162:
            v66 = v415.i64[0];
LABEL_163:
            *a5 = v66;
            if (v66)
              goto LABEL_633;
            goto LABEL_164;
          }
          *(_QWORD *)v426 = "load command ";
          *(_QWORD *)&v427 = v45;
          LOWORD(v428) = 2051;
          v253 = " LC_SUB_FRAMEWORK cmdsize too small";
          goto LABEL_651;
        case 0x13:
          if (HIDWORD(v388) > 0xB)
          {
            sub_1C59D9404(a1, (_DWORD *)v388);
            v83 = v89;
            v84 = v388;
            v85 = HIDWORD(v388);
            v86 = "LC_SUB_UMBRELLA";
            v87 = "sub_umbrella_command";
            v88 = "sub_umbrella";
            goto LABEL_125;
          }
          *(_QWORD *)v426 = "load command ";
          *(_QWORD *)&v427 = v45;
          LOWORD(v428) = 2051;
          v253 = " LC_SUB_UMBRELLA cmdsize too small";
          goto LABEL_651;
        case 0x14:
          if (HIDWORD(v388) > 0xB)
          {
            sub_1C59D9404(a1, (_DWORD *)v388);
            v83 = v90;
            v84 = v388;
            v85 = HIDWORD(v388);
            v86 = "LC_SUB_CLIENT";
            v87 = "sub_client_command";
            v88 = "client";
            goto LABEL_125;
          }
          *(_QWORD *)v426 = "load command ";
          *(_QWORD *)&v427 = v45;
          LOWORD(v428) = 2051;
          v253 = " LC_SUB_CLIENT cmdsize too small";
          goto LABEL_651;
        case 0x15:
          if (HIDWORD(v388) > 0xB)
          {
            sub_1C59D9404(a1, (_DWORD *)v388);
            v83 = v91;
            v84 = v388;
            v85 = HIDWORD(v388);
            v86 = "LC_SUB_LIBRARY";
            v87 = "sub_library_command";
            v88 = "sub_library";
            goto LABEL_125;
          }
          *(_QWORD *)v426 = "load command ";
          *(_QWORD *)&v427 = v45;
          LOWORD(v428) = 2051;
          v253 = " LC_SUB_LIBRARY cmdsize too small";
          goto LABEL_651;
        case 0x16:
          if (HIDWORD(v388) != 16)
          {
            *(_QWORD *)v426 = "load command ";
            *(_QWORD *)&v427 = v45;
            LOWORD(v428) = 2051;
            v116 = " LC_TWOLEVEL_HINTS has incorrect cmdsize";
            goto LABEL_442;
          }
          if (v368)
          {
            v415.i64[0] = (uint64_t)"more than one LC_TWOLEVEL_HINTS command";
            v70 = 259;
LABEL_444:
            LOWORD(v417) = v70;
            sub_1C59D7FE0((uint64_t *)v410, v415.i64);
            goto LABEL_445;
          }
          v141 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v388 < v141 || (v142 = *(_QWORD *)(a1 + 24), (uint64_t)v388 + 16 > v141 + v142))
          {
            v415.i64[0] = (uint64_t)"Structure read out-of-range";
            LOWORD(v417) = 259;
            sub_1C59D7FE0((uint64_t *)v426, v415.i64);
            v368 = 0;
            goto LABEL_197;
          }
          v144 = *(_DWORD *)(v388 + 8);
          v143 = *(_DWORD *)(v388 + 12);
          v145 = *(_DWORD *)(a1 + 8);
          v146 = bswap32(v144);
          v147 = bswap32(v143);
          if (((1 << v145) & 0xAAC00) == 0)
          {
            v147 = *(_DWORD *)(v388 + 12);
            v146 = *(_DWORD *)(v388 + 8);
          }
          if (v145 > 0x13)
          {
            v148 = v144;
          }
          else
          {
            v143 = v147;
            v148 = v146;
          }
          if (v142 < v148)
          {
            v149 = "offset field of LC_TWOLEVEL_HINTS command ";
LABEL_440:
            *(_QWORD *)v426 = v149;
            *(_QWORD *)&v427 = v45;
LABEL_441:
            LOWORD(v428) = 2051;
            v116 = " extends past the end of the file";
LABEL_442:
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = v116;
LABEL_443:
            v70 = 770;
            goto LABEL_444;
          }
          if (v148 + 4 * v143 > v142)
          {
            v149 = "offset field plus nhints times sizeof(struct twolevel_hint) field of LC_TWOLEVEL_HINTS command ";
            goto LABEL_440;
          }
          sub_1C59EDF18((uint64_t *)v410, (uint64_t *)&v389, v148, 4 * v143, "two level hints");
          v254 = *(_QWORD *)v410;
          if (*(_QWORD *)v410)
            goto LABEL_632;
          v368 = v388;
LABEL_244:
          *a5 = 0;
          goto LABEL_164;
        case 0x19:
          if (HIDWORD(v388) <= 0x47)
          {
            *(_QWORD *)&v421 = "load command ";
            v359 = v359 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v422 = v359;
            LOWORD(v423) = 2051;
            *(_QWORD *)v410 = &v421;
            *(_QWORD *)&v411 = " ";
            LOWORD(v412) = 770;
            v51 = "LC_SEGMENT_64";
LABEL_128:
            *(_QWORD *)v426 = v410;
            *(_QWORD *)&v427 = v51;
            LOWORD(v428) = 770;
            v92 = v426;
            v93 = " cmdsize too small";
            goto LABEL_212;
          }
          sub_1C59F508C((uint64_t)v426, a1, v388);
          if ((v431 & 1) != 0)
          {
            v382 = *(_QWORD *)v426;
            goto LABEL_213;
          }
          v423 = v428;
          v424 = v429;
          v425 = v430;
          v421 = *(_OWORD *)v426;
          v422 = v427;
          if (v430 > 0x3333333 || 80 * (int)v430 > (HIDWORD(v388) - 72))
          {
            v404[0] = "load command ";
            v347 = v347 & 0xFFFFFFFF00000000 | v45;
            v405 = v347;
            v406 = 2051;
            v407[0] = (uint64_t)v404;
            v408 = " inconsistent cmdsize in ";
            v409 = 770;
            *(_QWORD *)v410 = v407;
            *(_QWORD *)&v411 = "LC_SEGMENT_64";
            LOWORD(v412) = 770;
            v92 = v410;
LABEL_211:
            v93 = " for the number of sections";
LABEL_212:
            v415.i64[0] = (uint64_t)v92;
            *(_QWORD *)&v416 = v93;
            LOWORD(v417) = 770;
            sub_1C59D7FE0(&v382, v415.i64);
LABEL_213:
            v66 = v382;
            goto LABEL_163;
          }
          v366 = v46;
          v197 = *(_QWORD *)(a1 + 24);
          v337 = *((_QWORD *)&v423 + 1);
          if ((_DWORD)v430)
          {
            v198 = 0;
            v328 = v424;
            v324 = *((_QWORD *)&v422 + 1);
            v343 = v423;
            v331 = v423 + *((_QWORD *)&v422 + 1);
            v340 = v430;
            v364 = v40;
            v350 = *(_QWORD *)(a1 + 24);
            while (1)
            {
              v199 = v388;
              if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
                v200 = 80;
              else
                v200 = 68;
              if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
                v201 = 72;
              else
                v201 = 56;
              v202 = *(unsigned int *)(a1 + 88);
              if (v202 >= *(unsigned int *)(a1 + 92))
              {
                v319 = v198;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v16, v377, v202 + 1, 8);
                v198 = v319;
                v202 = *(unsigned int *)(a1 + 88);
              }
              v203 = v201 + v199;
              v204 = v198;
              v205 = v203 + (v200 * v198);
              *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v202) = v205;
              ++*(_DWORD *)(a1 + 88);
              sub_1C59EB4E0((uint64_t)&v415, a1, v205);
              if ((v420 & 1) != 0)
              {
LABEL_490:
                v382 = v415.i64[0];
                v40 = v364;
                goto LABEL_491;
              }
              v412 = v417;
              v413 = v418;
              v414 = v419;
              v411 = v416;
              *(int8x16_t *)v410 = v415;
              v206 = *(_DWORD *)(a1 + 60);
              v197 = v350;
              if (v206 == 9)
              {
                v207 = *((_QWORD *)&v412 + 1);
              }
              else
              {
                v209 = v206 == 10 || (_DWORD)v414 == 1 || (_DWORD)v414 == 18;
                v210 = !v209;
                if (!v209 && v350 < v413)
                {
                  v392[0] = "offset field of section ";
                  v294 = (v294 & 0xFFFFFFFF00000000) + v204;
                  v393 = v294;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT_64";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v238 = v295 & 0xFFFFFFFF00000000 | v45;
                  v404[0] = v401;
                  v295 = v238;
                  goto LABEL_549;
                }
                if (v337)
                  v211 = 0;
                else
                  v211 = v210;
                v207 = *((_QWORD *)&v412 + 1);
                if (v211 == 1 && v378 > v413 && *((_QWORD *)&v412 + 1))
                {
                  v392[0] = "offset field of section ";
                  v273 = (v273 & 0xFFFFFFFF00000000) + v204;
                  v393 = v273;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT_64";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v404[0] = v401;
                  v274 = v274 & 0xFFFFFFFF00000000 | v45;
                  v405 = v274;
                  v406 = 2050;
                  v244 = " not past the headers of the file";
                  goto LABEL_550;
                }
                if (*((_QWORD *)&v412 + 1) + (unint64_t)v413 > v350)
                  v212 = v210;
                else
                  v212 = 0;
                if (v212 == 1)
                {
                  v392[0] = "offset field plus size field of section ";
                  v290 = (v290 & 0xFFFFFFFF00000000) + v204;
                  v393 = v290;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT_64";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v238 = v291 & 0xFFFFFFFF00000000 | v45;
                  v404[0] = v401;
                  v291 = v238;
                  goto LABEL_549;
                }
                if (*((_QWORD *)&v412 + 1) <= v328)
                  v210 = 0;
                if (v210 == 1)
                {
                  v392[0] = "size field of section ";
                  v282 = (v282 & 0xFFFFFFFF00000000) + v204;
                  v393 = v282;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT_64";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v404[0] = v401;
                  v283 = v283 & 0xFFFFFFFF00000000 | v45;
                  v405 = v283;
                  v406 = 2050;
                  v244 = " greater than the segment";
                  goto LABEL_550;
                }
                if (v206 != 10 && *((_QWORD *)&v412 + 1) && (unint64_t)v412 < v324)
                {
                  v392[0] = "addr field of section ";
                  v278 = (v278 & 0xFFFFFFFF00000000) + v204;
                  v393 = v278;
                  v394 = 2051;
                  v395[0] = v392;
                  v396 = " in ";
                  v397 = 770;
                  v398[0] = v395;
                  v399 = "LC_SEGMENT_64";
                  v400 = 770;
                  v401[0] = v398;
                  v402 = " command ";
                  v403 = 770;
                  v404[0] = v401;
                  v279 = v279 & 0xFFFFFFFF00000000 | v45;
                  v405 = v279;
                  v406 = 2050;
                  v244 = " less than the segment's vmaddr";
                  goto LABEL_550;
                }
              }
              if (v343 && v207 && (uint64_t)v412 + v207 > v331)
                break;
              if (v206 != 9 && v206 != 10 && (_DWORD)v414 != 1 && (_DWORD)v414 != 18)
              {
                sub_1C59EDF18(&v382, (uint64_t *)&v389, v413, v207, "section contents");
                if (v382)
                  goto LABEL_551;
              }
              if (v350 < DWORD2(v413))
              {
                v392[0] = "reloff field of section ";
                v305 = (v305 & 0xFFFFFFFF00000000) + v204;
                v393 = v305;
                v394 = 2051;
                v395[0] = v392;
                v396 = " in ";
                v397 = 770;
                v398[0] = v395;
                v399 = "LC_SEGMENT_64";
                v400 = 770;
                v401[0] = v398;
                v402 = " command ";
                v403 = 770;
                v238 = v306 & 0xFFFFFFFF00000000 | v45;
                v404[0] = v401;
                v306 = v238;
LABEL_549:
                v405 = v238;
                v406 = 2050;
                v244 = " extends past the end of the file";
                goto LABEL_550;
              }
              if (DWORD2(v413) + 8 * (unint64_t)HIDWORD(v413) > v350)
              {
                v392[0] = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
                v301 = (v301 & 0xFFFFFFFF00000000) + v204;
                v393 = v301;
                v394 = 2051;
                v395[0] = v392;
                v396 = " in ";
                v397 = 770;
                v398[0] = v395;
                v399 = "LC_SEGMENT_64";
                v400 = 770;
                v401[0] = v398;
                v402 = " command ";
                v403 = 770;
                v238 = v302 & 0xFFFFFFFF00000000 | v45;
                v404[0] = v401;
                v302 = v238;
                goto LABEL_549;
              }
              sub_1C59EDF18(&v382, (uint64_t *)&v389, DWORD2(v413), 8 * HIDWORD(v413), "section relocation entries");
              if (v382)
                goto LABEL_551;
              if (strlen((const char *)&v411) == 6)
              {
                v213 = (_DWORD)v411 == 1163157343 && WORD2(v411) == 21592;
                if (v213
                  && strlen(v410) == 14
                  && *(_QWORD *)v410 == 0x5F6E696168635F5FLL
                  && *(_QWORD *)&v410[6] == 0x7374726174735F6ELL)
                {
                  *(_QWORD *)(a1 + 352) = v205;
                }
              }
              v198 = v204 + 1;
              v47 = v340 == (_DWORD)v204 + 1;
              v40 = v364;
              if (v47)
                goto LABEL_451;
            }
            v392[0] = "addr field plus size of section ";
            v287 = (v287 & 0xFFFFFFFF00000000) + v204;
            v393 = v287;
            v394 = 2051;
            v395[0] = v392;
            v396 = " in ";
            v397 = 770;
            v398[0] = v395;
            v399 = "LC_SEGMENT_64";
            v400 = 770;
            v401[0] = v398;
            v402 = " command ";
            v403 = 770;
            v404[0] = v401;
            v288 = v288 & 0xFFFFFFFF00000000 | v45;
            v405 = v288;
            v406 = 2050;
            v244 = " greater than than the segment's vmaddr plus vmsize";
LABEL_550:
            v407[0] = (uint64_t)v404;
            v408 = v244;
            v409 = 770;
            sub_1C59D7FE0(&v382, v407);
LABEL_551:
            v39 = v374;
            v46 = v366;
            v40 = v364;
            goto LABEL_213;
          }
LABEL_451:
          if (v337 > v197)
          {
            v404[0] = "load command ";
            v317 = v317 & 0xFFFFFFFF00000000 | v45;
            v405 = v317;
            v406 = 2051;
            v218 = " fileoff field in ";
            goto LABEL_482;
          }
          if ((unint64_t)v424 + v337 > v197)
          {
            v404[0] = "load command ";
            v310 = v310 & 0xFFFFFFFF00000000 | v45;
            v405 = v310;
            v406 = 2051;
            v218 = " fileoff field plus filesize field in ";
LABEL_482:
            v407[0] = (uint64_t)v404;
            v408 = v218;
            v409 = 770;
            *(_QWORD *)v410 = v407;
            *(_QWORD *)&v411 = "LC_SEGMENT_64";
            LOWORD(v412) = 770;
            v233 = " extends past the end of the file";
LABEL_483:
            v415.i64[0] = (uint64_t)v410;
            *(_QWORD *)&v416 = v233;
            LOWORD(v417) = 770;
            sub_1C59D7FE0(&v382, v415.i64);
LABEL_491:
            v39 = v374;
LABEL_547:
            v46 = v366;
            goto LABEL_213;
          }
          if ((_QWORD)v423 && (unint64_t)v424 > (unint64_t)v423)
          {
            v404[0] = "load command ";
            v299 = v299 & 0xFFFFFFFF00000000 | v45;
            v405 = v299;
            v406 = 2051;
            v407[0] = (uint64_t)v404;
            v408 = " filesize field in ";
            v409 = 770;
            *(_QWORD *)v410 = v407;
            *(_QWORD *)&v411 = "LC_SEGMENT_64";
            LOWORD(v412) = 770;
            v233 = " greater than vmsize field";
            goto LABEL_483;
          }
          v242 = strlen((const char *)&v421 + 8) == 10
              && *((_QWORD *)&v421 + 1) == 0x455A454741505F5FLL
              && (unsigned __int16)v422 == 20306;
          *(_BYTE *)(a1 + 344) |= v242;
LABEL_573:
          *a5 = 0;
LABEL_239:
          v39 = v374;
          v46 = v366;
          goto LABEL_164;
        case 0x1A:
          if (HIDWORD(v388) == 72)
          {
            if (!v373)
            {
LABEL_131:
              v373 = v388;
              goto LABEL_164;
            }
            v261 = "more than one LC_ROUTINES_64 and or LC_ROUTINES command";
            goto LABEL_630;
          }
          v260 = "LC_ROUTINES_64 command ";
          goto LABEL_650;
        case 0x1B:
          if (HIDWORD(v388) == 24)
          {
            if (!*(_QWORD *)(a1 + 336))
            {
              *(_QWORD *)(a1 + 336) = v388;
              goto LABEL_164;
            }
            v261 = "more than one LC_UUID command";
            goto LABEL_630;
          }
          v260 = "LC_UUID command ";
          goto LABEL_650;
        case 0x1D:
          v58 = "LC_CODE_SIGNATURE";
          v59 = "code signature data";
          v57 = &v385;
          goto LABEL_134;
        case 0x1E:
          v58 = "LC_SEGMENT_SPLIT_INFO";
          v59 = "split info data";
          v57 = &v387;
          goto LABEL_134;
        case 0x20:
          v54 = "LC_LAZY_LOAD_DYLIB";
LABEL_136:
          v52 = a1;
          v53 = v45;
          goto LABEL_137;
        case 0x21:
          if (HIDWORD(v388) == 20)
          {
            v415 = 0uLL;
            LODWORD(v416) = 0;
            sub_1C59D91FC(&v415, a1, (int8x16_t *)v388);
            v71 = v415.u32[2];
            v72 = v415.u32[3];
            v73 = *(_QWORD *)(a1 + 24);
            v74 = v388;
            v75 = "LC_ENCRYPTION_INFO";
LABEL_149:
            sub_1C59D9280((uint64_t *)v426, v73, v74, v45, v71, v72, &v383, v75);
LABEL_197:
            v66 = *(_QWORD *)v426;
            goto LABEL_163;
          }
          v260 = "LC_ENCRYPTION_INFO command ";
          goto LABEL_650;
        case 0x22:
          v64 = "LC_DYLD_INFO";
          v61 = a1;
          v62 = v45;
          v63 = (_QWORD *)(a1 + 304);
          goto LABEL_151;
        case 0x24:
          v76 = v388;
          v77 = HIDWORD(v388);
          v78 = "LC_VERSION_MIN_MACOSX";
          goto LABEL_161;
        case 0x25:
          v76 = v388;
          v77 = HIDWORD(v388);
          v78 = "LC_VERSION_MIN_IPHONEOS";
          goto LABEL_161;
        case 0x26:
          v58 = "LC_FUNCTION_STARTS";
          v59 = "function starts data";
          v55 = a1;
          v56 = v45;
          v57 = (uint64_t *)(a1 + 320);
          goto LABEL_154;
        case 0x27:
          v67 = v388;
          v68 = HIDWORD(v388);
          v69 = "LC_DYLD_ENVIRONMENT";
LABEL_156:
          sub_1C59D8CEC(v415.i64, a1, v67, v68, v45, v69);
          goto LABEL_162;
        case 0x29:
          v58 = "LC_DATA_IN_CODE";
          v59 = "data in code info";
          v55 = a1;
          v56 = v45;
          v57 = (uint64_t *)(a1 + 288);
          goto LABEL_154;
        case 0x2A:
          if (HIDWORD(v388) == 16)
          {
            if (!v371)
            {
              v371 = v388;
              goto LABEL_164;
            }
            v261 = "more than one LC_SOURCE_VERSION command";
LABEL_630:
            v415.i64[0] = (uint64_t)v261;
            LOWORD(v417) = 259;
            sub_1C59D7FE0((uint64_t *)v426, v415.i64);
            goto LABEL_631;
          }
          v260 = "LC_SOURCE_VERSION command ";
          goto LABEL_650;
        case 0x2B:
          v58 = "LC_DYLIB_CODE_SIGN_DRS";
          v59 = "code signing RDs data";
          v57 = &v386;
LABEL_134:
          v55 = a1;
          v56 = v45;
          goto LABEL_154;
        case 0x2C:
          if (HIDWORD(v388) == 24)
          {
            v415 = 0uLL;
            *(_QWORD *)&v416 = 0;
            sub_1C59D9380((uint64_t)&v415, a1, (__int128 *)v388);
            v71 = v415.u32[2];
            v72 = v415.u32[3];
            v73 = *(_QWORD *)(a1 + 24);
            v74 = v388;
            v75 = "LC_ENCRYPTION_INFO_64";
            goto LABEL_149;
          }
          v260 = "LC_ENCRYPTION_INFO_64 command ";
          goto LABEL_650;
        case 0x2D:
          if (HIDWORD(v388) <= 0xB)
          {
            *(_QWORD *)v426 = "load command ";
            *(_QWORD *)&v427 = v45;
            LOWORD(v428) = 2051;
            v79 = " LC_LINKER_OPTION cmdsize too small";
            goto LABEL_145;
          }
          if ((unint64_t)v388 < *v369)
            goto LABEL_277;
          v118 = (_BYTE *)(v388 + 12);
          if ((unint64_t)(v388 + 12) > *v369 + *(_QWORD *)(a1 + 24))
            goto LABEL_277;
          v363 = v40;
          LODWORD(v119) = *(_DWORD *)(v388 + 8);
          v120 = *(_DWORD *)(a1 + 8);
          v121 = bswap32(*(_DWORD *)(v388 + 4));
          v122 = bswap32(v119);
          if (((1 << v120) & 0xAAC00) == 0)
          {
            v122 = *(_DWORD *)(v388 + 8);
            v121 = *(_DWORD *)(v388 + 4);
          }
          if (v120 <= 0x13)
            v119 = v122;
          else
            v119 = v119;
          v348 = v119;
          if (v120 <= 0x13)
            v123 = v121;
          else
            v123 = *(_DWORD *)(v388 + 4);
          v366 = v46;
          LODWORD(v46) = 0;
          v124 = v123 - 12;
          if (v123 == 12)
          {
LABEL_237:
            if ((_DWORD)v348 == (_DWORD)v46)
              goto LABEL_238;
            *(_QWORD *)&v421 = "load command ";
            *(_QWORD *)&v422 = v45;
            LOWORD(v423) = 2051;
            *(_QWORD *)v410 = &v421;
            *(_QWORD *)&v411 = " LC_LINKER_OPTION string count ";
            LOWORD(v412) = 770;
            *(_QWORD *)v426 = v410;
            *(_QWORD *)&v427 = v348;
            LOWORD(v428) = 2050;
            v217 = " does not match number of strings";
          }
          else
          {
            while (1)
            {
              if (!*v118)
              {
                do
                {
                  v125 = v124;
                  v126 = *++v118;
                  --v124;
                  if (v126)
                    v127 = 1;
                  else
                    v127 = v125 == 1;
                }
                while (!v127);
                if (v125 == 1)
                  goto LABEL_237;
              }
              v46 = (__int128 *)((_DWORD)v46 + 1);
              v128 = memchr(v118, 0, v124);
              if (!v128)
                break;
              v129 = (_DWORD)v128 - (_DWORD)v118;
              if ((_DWORD)v128 - (_DWORD)v118 == -1)
                break;
              if (v124 < v129)
                v129 = v124;
              v130 = v129 + 1;
              v118 += v130;
              v124 -= v130;
              if (!v124)
                goto LABEL_237;
            }
            *(_QWORD *)&v421 = "load command ";
            *(_QWORD *)&v422 = v45;
            LOWORD(v423) = 2051;
            *(_QWORD *)v410 = &v421;
            *(_QWORD *)&v411 = " LC_LINKER_OPTION string #";
            LOWORD(v412) = 770;
            *(_QWORD *)v426 = v410;
            *(_QWORD *)&v427 = v46;
            LOWORD(v428) = 2050;
            v217 = " is not NULL terminated";
          }
          v415.i64[0] = (uint64_t)v426;
          *(_QWORD *)&v416 = v217;
          LOWORD(v417) = 770;
          sub_1C59D7FE0(v407, v415.i64);
          v40 = v363;
          goto LABEL_524;
        case 0x2E:
          v58 = "LC_LINKER_OPTIMIZATION_HINT";
          v59 = "linker optimization hints";
          v55 = a1;
          v56 = v45;
          v57 = (uint64_t *)(a1 + 296);
          goto LABEL_154;
        case 0x2F:
          v76 = v388;
          v77 = HIDWORD(v388);
          v78 = "LC_VERSION_MIN_TVOS";
          goto LABEL_161;
        case 0x30:
          v76 = v388;
          v77 = HIDWORD(v388);
          v78 = "LC_VERSION_MIN_WATCHOS";
LABEL_161:
          sub_1C59D90D8(v415.i64, v76, v77, v45, &v384, v78);
          goto LABEL_162;
        case 0x31:
          if (HIDWORD(v388) != 40)
          {
            *(_QWORD *)v426 = "load command ";
            v362 = v362 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v362;
            LOWORD(v428) = 2051;
            v116 = " LC_NOTE has incorrect cmdsize";
            goto LABEL_442;
          }
          v101 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v388 < v101)
            goto LABEL_195;
          v102 = *(_QWORD *)(a1 + 24);
          if ((uint64_t)v388 + 40 > v101 + v102)
            goto LABEL_195;
          v103 = *(_DWORD *)(a1 + 8);
          v104 = bswap64(*(_QWORD *)(v388 + 24));
          v105 = bswap64(*(_QWORD *)(v388 + 32));
          if (((1 << v103) & 0xAAC00) == 0)
          {
            v105 = *(_QWORD *)(v388 + 32);
            v104 = *(_QWORD *)(v388 + 24);
          }
          if (v103 <= 0x13)
            v106 = v105;
          else
            v106 = *(_QWORD *)(v388 + 32);
          if (v103 <= 0x13)
            v107 = v104;
          else
            v107 = *(_QWORD *)(v388 + 24);
          if (v107 <= v102)
          {
            if (v107 + v106 <= v102)
            {
              sub_1C59EDF18((uint64_t *)v410, (uint64_t *)&v389, v107, v106, "LC_NOTE data");
LABEL_445:
              v66 = *(_QWORD *)v410;
              goto LABEL_163;
            }
            v108 = v333 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "size field plus offset field of LC_NOTE command ";
            v333 = v108;
          }
          else
          {
            v108 = v346 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "offset field of LC_NOTE command ";
            v346 = v108;
          }
          *(_QWORD *)&v427 = v108;
          goto LABEL_441;
        case 0x32:
          v366 = v46;
          if ((unint64_t)v388 < *v369
            || (v65 = v388 + 24, (unint64_t)(v388 + 24) > *v369 + *(_QWORD *)(a1 + 24)))
          {
            v415.i64[0] = (uint64_t)"Structure read out-of-range";
            LOWORD(v417) = 259;
            sub_1C59D7FE0((uint64_t *)v426, v415.i64);
            v66 = *(_QWORD *)v426;
            goto LABEL_257;
          }
          v363 = v40;
          v132 = *(_DWORD *)(v388 + 20);
          v133 = *(_DWORD *)(a1 + 8);
          v134 = bswap32(*(_DWORD *)(v388 + 8));
          v135 = bswap32(v132);
          if (((1 << v133) & 0xAAC00) == 0)
          {
            v135 = *(_DWORD *)(v388 + 20);
            v134 = *(_DWORD *)(v388 + 8);
          }
          if (v133 <= 0x13)
            v136 = v135;
          else
            v136 = v132;
          if (v133 <= 0x13)
            v137 = v134;
          else
            v137 = *(_DWORD *)(v388 + 8);
          v138 = 8 * v136;
          if (v138 + 24 != HIDWORD(v388))
          {
            *(_QWORD *)v426 = "load command ";
            v357 = v357 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v357;
            LOWORD(v428) = 2051;
            v139 = " LC_BUILD_VERSION_COMMAND has incorrect cmdsize";
LABEL_255:
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = v139;
            v140 = 770;
            goto LABEL_256;
          }
          v354 = v137;
          sub_1C6154790((uint64_t)v20, v136);
          if ((_DWORD)v136)
          {
            v230 = 0;
            do
            {
              *(_QWORD *)(*v20 + v230) = v65 + v230;
              v230 += 8;
            }
            while (v138 != v230);
          }
          if (v366)
          {
            if ((v375 & 0x8000000) == 0 && v367)
            {
              v231 = "more than two LC_BUILD_VERSION load commands";
              goto LABEL_519;
            }
            v367 = v388;
            memset(v410, 0, sizeof(v410));
            *(_QWORD *)&v411 = 0;
            sub_1C59D9380((uint64_t)v410, a1, v366);
            if ((*(_DWORD *)&v410[8] == 6 || *(_DWORD *)&v410[8] == 1)
              && (*(_DWORD *)&v410[8] != 1 || v354 == 6)
              && (*(_DWORD *)&v410[8] != 6 || v354 == 1))
            {
LABEL_238:
              *a5 = 0;
              v40 = v363;
              goto LABEL_239;
            }
            if ((v375 & 0x8000000) == 0)
            {
              v231 = "the two LC_BUILD_VERSION load commands are not for the platforms MACOS and MACCATALYST";
LABEL_519:
              v415.i64[0] = (uint64_t)v231;
              v140 = 259;
LABEL_256:
              LOWORD(v417) = v140;
              sub_1C59D7FE0((uint64_t *)&v421, v415.i64);
              v66 = v421;
              v40 = v363;
              v39 = v374;
LABEL_257:
              v46 = v366;
              goto LABEL_163;
            }
            if (v354 - 6 < 4 || v354 == 1)
              goto LABEL_238;
            v236 = v270 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "the LC_BUILD_VERSION, command ";
            v270 = v236;
          }
          else
          {
            v366 = (__int128 *)v388;
            if ((v375 & 0x8000000) == 0 || v354 - 6 < 4 || v354 == 1)
              goto LABEL_238;
            v236 = v271 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)v426 = "the LC_BUILD_VERSION, command ";
            v271 = v236;
          }
          *(_QWORD *)&v427 = v236;
          LOWORD(v428) = 2051;
          v139 = ", platform value is not allowed when the mach header flag MH_SIM_SUPPORT is set";
          goto LABEL_255;
        default:
          if (DWORD2(v388) != -2147483596)
            goto LABEL_80;
          v55 = a1;
          v56 = v45;
          v57 = (uint64_t *)(a1 + 328);
          v58 = "LC_DYLD_CHAINED_FIXUPS";
          v59 = "chained fixups";
          goto LABEL_154;
      }
    }
    switch(DWORD2(v388))
    {
      case 0x80000018:
        v52 = a1;
        v53 = v45;
        v54 = "LC_LOAD_WEAK_DYLIB";
        goto LABEL_137;
      case 0x80000019:
      case 0x8000001A:
      case 0x8000001B:
      case 0x8000001D:
      case 0x8000001E:
      case 0x80000020:
      case 0x80000021:
        goto LABEL_80;
      case 0x8000001C:
        if (HIDWORD(v388) > 0xB)
        {
          v109 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v388 < v109 || (uint64_t)v388 + 12 > v109 + *(_QWORD *)(a1 + 24))
          {
LABEL_195:
            v81 = "Structure read out-of-range";
            goto LABEL_196;
          }
          v110 = *(_DWORD *)(v388 + 4);
          v111 = *(_DWORD *)(v388 + 8);
          v112 = *(_DWORD *)(a1 + 8);
          v113 = bswap32(v110);
          v114 = bswap32(v111);
          if (((1 << v112) & 0xAAC00) == 0)
          {
            v114 = *(_DWORD *)(v388 + 8);
            v113 = *(_DWORD *)(v388 + 4);
          }
          if (v112 <= 0x13)
          {
            v111 = v114;
            v110 = v113;
          }
          if (v111 > 0xB)
          {
            v174 = v110 >= v111;
            v175 = v110 - v111;
            if (v175 != 0 && v174)
            {
              v176 = (unsigned __int8 *)(v388 + v111);
              do
              {
                if (!*v176++)
                  goto LABEL_244;
                --v175;
              }
              while (v175);
              *(_QWORD *)v426 = "load command ";
              v326 = v326 & 0xFFFFFFFF00000000 | v45;
              *(_QWORD *)&v427 = v326;
              LOWORD(v428) = 2051;
              v415.i64[0] = (uint64_t)v426;
              v60 = " LC_RPATH library name extends past the end of the load command";
            }
            else
            {
              *(_QWORD *)v426 = "load command ";
              v345 = v345 & 0xFFFFFFFF00000000 | v45;
              *(_QWORD *)&v427 = v345;
              LOWORD(v428) = 2051;
              v415.i64[0] = (uint64_t)v426;
              v60 = " LC_RPATH path.offset field extends past the end of the load command";
            }
          }
          else
          {
            *(_QWORD *)v426 = "load command ";
            v356 = v356 & 0xFFFFFFFF00000000 | v45;
            *(_QWORD *)&v427 = v356;
            LOWORD(v428) = 2051;
            v415.i64[0] = (uint64_t)v426;
            v60 = " LC_RPATH path.offset field too small, not past the end of the rpath_command struct";
          }
        }
        else
        {
          *(_QWORD *)v426 = "load command ";
          v365 = v365 & 0xFFFFFFFF00000000 | v45;
          *(_QWORD *)&v427 = v365;
          LOWORD(v428) = 2051;
          v415.i64[0] = (uint64_t)v426;
          v60 = " LC_RPATH cmdsize too small";
        }
        *(_QWORD *)&v416 = v60;
        goto LABEL_443;
      case 0x8000001F:
        v52 = a1;
        v53 = v45;
        v54 = "LC_REEXPORT_DYLIB";
        goto LABEL_137;
      case 0x80000022:
        v61 = a1;
        v62 = v45;
        v63 = (_QWORD *)(a1 + 304);
        v64 = "LC_DYLD_INFO_ONLY";
LABEL_151:
        sub_1C59D8428(v415.i64, v61, (uint64_t)&v388, v62, v63, v64, (uint64_t *)&v389);
        goto LABEL_162;
      case 0x80000023:
        v52 = a1;
        v53 = v45;
        v54 = "LC_LOAD_UPWARD_DYLIB";
LABEL_137:
        sub_1C59D88FC(v415.i64, v52, (uint64_t)&v388, v53, v54);
        v94 = v415.i64[0];
        *a5 = v415.i64[0];
        if (v94)
          goto LABEL_633;
        v95 = v388;
        v96 = *(unsigned int *)(a1 + 112);
        if (v96 >= *(unsigned int *)(a1 + 116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v380, v96 + 1, 8);
          v96 = *(unsigned int *)(a1 + 112);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v96) = v95;
        ++*(_DWORD *)(a1 + 112);
        goto LABEL_141;
      default:
        if (DWORD2(v388) == -2147483608)
        {
          if (HIDWORD(v388) == 24)
          {
            if (!v372)
            {
              v372 = v388;
              goto LABEL_164;
            }
            v261 = "more than one LC_MAIN command";
            goto LABEL_630;
          }
          v260 = "LC_MAIN command ";
LABEL_650:
          *(_QWORD *)v426 = v260;
          *(_QWORD *)&v427 = v45;
          LOWORD(v428) = 2051;
          v253 = " has incorrect cmdsize";
LABEL_651:
          v415.i64[0] = (uint64_t)v426;
          *(_QWORD *)&v416 = v253;
          LOWORD(v417) = 770;
          sub_1C59D7FE0((uint64_t *)v410, v415.i64);
LABEL_652:
          v254 = *(_QWORD *)v410;
          goto LABEL_632;
        }
        if (DWORD2(v388) == -2147483597)
        {
          v55 = a1;
          v56 = v45;
          v57 = (uint64_t *)(a1 + 312);
          v58 = "LC_DYLD_EXPORTS_TRIE";
          v59 = "export trie";
LABEL_154:
          sub_1C59D80C0(v415.i64, v55, (uint64_t)&v388, v56, v57, v58, (uint64_t *)&v389, v59);
          goto LABEL_162;
        }
LABEL_80:
        if (DWORD2(v388) <= 0x17 && ((1 << SBYTE8(v388)) & 0xC107C8) != 0)
        {
          *(_QWORD *)&v421 = "load command ";
          *(_QWORD *)&v422 = v45;
          LOWORD(v423) = 2051;
          *(_QWORD *)v410 = &v421;
          *(_QWORD *)&v411 = " for cmd value of: ";
          LOWORD(v412) = 770;
          *(_QWORD *)v426 = v410;
          *(_QWORD *)&v427 = DWORD2(v388);
          LOWORD(v428) = 2050;
          v415.i64[0] = (uint64_t)v426;
          *(_QWORD *)&v416 = " is obsolete and not supported";
          LOWORD(v417) = 770;
          sub_1C59D7FE0(v407, v415.i64);
          v254 = v407[0];
          goto LABEL_632;
        }
LABEL_164:
        if (v45 < v379)
        {
          v98 = (_DWORD *)(v388 + HIDWORD(v388));
          v99 = 28;
          if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
            v99 = 32;
          if ((unint64_t)(v98 + 2) <= *(_QWORD *)(a1 + 16) + (unint64_t)*(unsigned int *)(a1 + 68) + v99)
          {
            sub_1C59EDD90((uint64_t)v410, a1, v98, v45 + 1);
            v100 = v411;
          }
          else
          {
            *(_QWORD *)v426 = "load command ";
            v376 = (v45 + 1) | v376 & 0xFFFFFFFF00000000;
            *(_QWORD *)&v427 = v376;
            LOWORD(v428) = 2051;
            v415.i64[0] = (uint64_t)v426;
            *(_QWORD *)&v416 = " extends past the end all load commands in the file";
            LOWORD(v417) = 770;
            sub_1C59D7FE0((uint64_t *)v410, v415.i64);
            v100 = v411 | 1;
          }
          if ((v100 & 1) != 0)
            goto LABEL_652;
          v388 = *(_OWORD *)v410;
        }
LABEL_172:
        if (++v45 != v39)
          continue;
        if (v384 && v46)
        {
          v252 = sub_1C59DA608(a1, v384);
          if ((v375 & 0x8000000) != 0 && v252 != 36)
          {
            v261 = "MH_SIM_SUPPORT files only support LC_BUILD_VERSION and LC_VERSION_MIN_MACOSX load commands";
            goto LABEL_630;
          }
          if ((v375 & 0x8000000) == 0 && v252 != 36)
          {
            v261 = "LC_BUILD_VERSION and some LC_VERSION_MIN load command also found";
            goto LABEL_630;
          }
        }
LABEL_42:
        v41 = *(__int128 **)(a1 + 272);
        v42 = *(_QWORD *)(a1 + 280);
        if (!v41)
        {
          if (v42)
          {
            v261 = "contains LC_DYSYMTAB load command without a LC_SYMTAB load command";
            goto LABEL_630;
          }
LABEL_624:
          v255 = *(_DWORD *)(a1 + 60);
          if (v255 != 6 && v255 != 9 && v255 != 14 || v40)
          {
            *a5 = 0;
            goto LABEL_633;
          }
          v261 = "no LC_ID_DYLIB load command in dynamic library filetype";
          goto LABEL_630;
        }
        if (!v42)
          goto LABEL_624;
        memset(v410, 0, sizeof(v410));
        *(_QWORD *)&v411 = 0;
        sub_1C59D9380((uint64_t)v410, a1, v41);
        v419 = 0u;
        v418 = 0u;
        v417 = 0u;
        v416 = 0u;
        v415 = 0u;
        sub_1C59DA684(a1, *(_OWORD **)(a1 + 280), (uint64_t)&v415);
        if (v415.i32[3])
        {
          if (v415.i32[2] > *(_DWORD *)&v410[12])
          {
            v43 = "ilocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_623;
          }
          if (v415.u32[2] + (unint64_t)v415.u32[3] > *(unsigned int *)&v410[12])
          {
            v43 = "ilocalsym plus nlocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_623;
          }
        }
        if (DWORD1(v416))
        {
          if (v416 > *(_DWORD *)&v410[12])
          {
            v43 = "iextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_623;
          }
          if (v416 + (unint64_t)DWORD1(v416) > *(unsigned int *)&v410[12])
          {
            v43 = "iextdefsym plus nextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_623;
          }
        }
        if (!HIDWORD(v416))
          goto LABEL_624;
        if (DWORD2(v416) > *(_DWORD *)&v410[12])
        {
          v43 = "iundefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_623;
        }
        if (DWORD2(v416) + (unint64_t)HIDWORD(v416) <= *(unsigned int *)&v410[12])
          goto LABEL_624;
        v43 = "iundefsym plus nundefsym in LC_DYSYMTAB load  command extends past the end of the symbol table";
LABEL_623:
        *(_QWORD *)v426 = v43;
        LOWORD(v428) = 259;
        sub_1C59D7FE0((uint64_t *)&v421, (uint64_t *)v426);
        v254 = v421;
LABEL_632:
        *a5 = v254;
LABEL_633:
        if (v391)
        {
          v256 = __p;
          v257 = (uint64_t)v389;
          v258 = *(_QWORD *)__p;
          *(_QWORD *)(v258 + 8) = v389[1];
          **(_QWORD **)(v257 + 8) = v258;
          v391 = 0;
          if (v256 != &v389)
          {
            do
            {
              v259 = (uint64_t *)v256[1];
              operator delete(v256);
              v256 = v259;
            }
            while (v259 != (uint64_t *)&v389);
          }
        }
        if (!*a5)
LABEL_36:
          *a5 = 0;
        return a1;
    }
  }
}

BOOL llvm::object::MachOObjectFile::is64Bit(llvm::object::MachOObjectFile *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFE) == 18;
}

uint64_t llvm::object::MachOObjectFile::getHeader(llvm::object::MachOObjectFile *this)
{
  return (uint64_t)this + 48;
}

uint64_t sub_1C59D7FE0(uint64_t *a1, uint64_t *a2)
{
  int v3;
  const char *v4;
  char v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];
  char v14;
  char v15;

  v3 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    if (v3 == 1)
    {
      v4 = "truncated or malformed object (";
      v11[0] = "truncated or malformed object (";
      v12 = 259;
      v5 = 3;
    }
    else
    {
      v7 = (uint64_t *)*a2;
      v8 = a2[1];
      v5 = 2;
      if (*((_BYTE *)a2 + 33) != 1)
      {
        LOBYTE(v3) = 2;
        v7 = a2;
      }
      v11[0] = "truncated or malformed object (";
      v11[2] = v7;
      v11[3] = v8;
      LOBYTE(v12) = 3;
      HIBYTE(v12) = v3;
      v4 = (const char *)v11;
    }
    v13[0] = v4;
    v13[2] = ")";
    v6 = 3;
  }
  else
  {
    v5 = 0;
    v12 = 256;
    v6 = 1;
  }
  v14 = v5;
  v15 = v6;
  v9 = operator new();
  result = llvm::object::GenericBinaryError::GenericBinaryError(v9, (llvm::Twine *)v13, 3u);
  *a1 = result;
  return result;
}

uint64_t sub_1C59D80C0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, _BYTE *a6, uint64_t *a7, _BYTE *a8)
{
  __int128 *v11;
  char v12;
  __int128 *v13;
  int v15;
  const char *v16;
  char v17;
  uint64_t result;
  unint64_t v23;
  int v24;
  const char *v25;
  char v26;
  __int16 v27;
  const char *v28;
  char v29;
  const char *v30;
  _QWORD v31[2];
  unint64_t v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40[2];
  const char *v41;
  __int16 v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 12) <= 0xFu)
  {
    v31[0] = "load command ";
    v32 = a4;
    v33 = 2051;
    *(_QWORD *)&v34 = v31;
    *(_QWORD *)&v35 = " ";
    LOWORD(v36) = 770;
    if (*a6)
    {
      v11 = &v34;
      *(_QWORD *)&v37 = &v34;
      *(_QWORD *)&v38 = a6;
      LOWORD(v39) = 770;
      v12 = 2;
      v13 = &v37;
LABEL_4:
      v40[0] = (uint64_t)v13;
      v40[1] = (uint64_t)v11;
      v41 = " cmdsize too small";
      LOBYTE(v42) = v12;
LABEL_19:
      HIBYTE(v42) = 3;
      return sub_1C59D7FE0(a1, v40);
    }
    v37 = v34;
    v38 = v35;
    v39 = v36;
    v12 = v36;
    if (v36 != 1)
    {
      v11 = (__int128 *)*((_QWORD *)&v37 + 1);
      v13 = &v37;
      if (BYTE1(v39) == 1)
        v13 = (__int128 *)v37;
      else
        v12 = 2;
      goto LABEL_4;
    }
    v40[0] = (uint64_t)" cmdsize too small";
    v27 = 259;
LABEL_36:
    v42 = v27;
    return sub_1C59D7FE0(a1, v40);
  }
  if (*a5)
  {
    v15 = *a6;
    v16 = "more than one ";
    if (*a6)
    {
      *(_QWORD *)&v37 = "more than one ";
      *(_QWORD *)&v38 = a6;
      LOWORD(v39) = 771;
      v17 = 2;
    }
    else
    {
      *(_QWORD *)&v37 = "more than one ";
      LOWORD(v39) = 259;
      v17 = 3;
    }
    if (v15)
      v16 = (const char *)&v37;
    v40[0] = (uint64_t)v16;
    v41 = " command";
    LOBYTE(v42) = v17;
    goto LABEL_19;
  }
  result = sub_1C59EAFFC((uint64_t)&v43, a2, *(int8x16_t **)a3);
  if ((v46 & 1) != 0)
  {
    *a1 = v43;
    return result;
  }
  if (HIDWORD(v43) != 16)
  {
    if (*a6)
    {
      *(_QWORD *)&v34 = a6;
      *(_QWORD *)&v35 = " command ";
      LOWORD(v36) = 771;
      v28 = (const char *)&v34;
      v29 = 2;
    }
    else
    {
      v28 = " command ";
      *(_QWORD *)&v34 = " command ";
      LOWORD(v36) = 259;
      v29 = 3;
    }
    *(_QWORD *)&v37 = v28;
    *(_QWORD *)&v38 = a4;
    LOBYTE(v39) = v29;
    BYTE1(v39) = 8;
    v30 = " has incorrect cmdsize";
LABEL_35:
    v40[0] = (uint64_t)&v37;
    v41 = v30;
    v27 = 770;
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(a2 + 24);
  if (v23 < v44)
  {
    v24 = *a6;
    v25 = "dataoff field of ";
    if (*a6)
    {
LABEL_14:
      v31[0] = v25;
      v32 = (unint64_t)a6;
      v33 = 771;
      v26 = 2;
LABEL_30:
      if (v24)
        v25 = (const char *)v31;
      *(_QWORD *)&v34 = v25;
      *(_QWORD *)&v35 = " command ";
      LOBYTE(v36) = v26;
      BYTE1(v36) = 3;
      *(_QWORD *)&v37 = &v34;
      *(_QWORD *)&v38 = a4;
      LOWORD(v39) = 2050;
      v30 = " extends past the end of the file";
      goto LABEL_35;
    }
LABEL_29:
    v31[0] = v25;
    v33 = 259;
    v26 = 3;
    goto LABEL_30;
  }
  if (v44 + (unint64_t)v45 > v23)
  {
    v24 = *a6;
    v25 = "dataoff field plus datasize field of ";
    if (*a6)
      goto LABEL_14;
    goto LABEL_29;
  }
  result = (uint64_t)sub_1C59EDF18(a1, a7, v44, v45, a8);
  if (!*a1)
  {
    *a5 = *(_QWORD *)a3;
    *a1 = 0;
  }
  return result;
}

uint64_t sub_1C59D8428(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, _BYTE *a6, uint64_t *a7)
{
  __int128 *v10;
  char v11;
  const char *v12;
  const char *v14;
  uint64_t *v15;
  uint64_t result;
  unint64_t v20;
  int v21;
  const char *v22;
  char v23;
  const char *v24;
  char v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[2];
  unint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  const char *v46;
  __int128 *v47;
  const char *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 12) <= 0x2Fu)
  {
    v37[0] = "load command ";
    v38 = a4;
    v39 = 2051;
    *(_QWORD *)&v40 = v37;
    *(_QWORD *)&v41 = " ";
    LOWORD(v42) = 770;
    if (*a6)
    {
      v10 = &v40;
      *(_QWORD *)&v43 = &v40;
      *(_QWORD *)&v44 = a6;
      LOWORD(v45) = 770;
      v11 = 2;
      v12 = (const char *)&v43;
LABEL_4:
      v46 = v12;
      v47 = v10;
      v48 = " cmdsize too small";
      LOBYTE(v51) = v11;
      BYTE1(v51) = 3;
LABEL_8:
      v15 = (uint64_t *)&v46;
      return sub_1C59D7FE0(a1, v15);
    }
    v43 = v40;
    v44 = v41;
    v45 = v42;
    v11 = v42;
    if (v42 != 1)
    {
      v10 = (__int128 *)*((_QWORD *)&v43 + 1);
      v12 = (const char *)&v43;
      if (BYTE1(v45) == 1)
        v12 = (const char *)v43;
      else
        v11 = 2;
      goto LABEL_4;
    }
    v14 = " cmdsize too small";
LABEL_7:
    v46 = v14;
    LOWORD(v51) = 259;
    goto LABEL_8;
  }
  if (*a5)
  {
    v14 = "more than one LC_DYLD_INFO and or LC_DYLD_INFO_ONLY command";
    goto LABEL_7;
  }
  result = sub_1C59EAD2C((uint64_t)&v46, a2, *(int8x16_t **)a3);
  if ((v55 & 1) != 0)
  {
    *a1 = (uint64_t)v46;
    return result;
  }
  if (HIDWORD(v46) != 48)
  {
    if (*a6)
    {
      v37[0] = a6;
      v38 = (unint64_t)" command ";
      v39 = 771;
      v24 = (const char *)v37;
      v25 = 2;
    }
    else
    {
      v24 = " command ";
      v37[0] = " command ";
      v39 = 259;
      v25 = 3;
    }
    *(_QWORD *)&v40 = v24;
    *(_QWORD *)&v41 = a4;
    LOBYTE(v42) = v25;
    BYTE1(v42) = 8;
    v26 = " has incorrect cmdsize";
LABEL_33:
    *(_QWORD *)&v43 = &v40;
    *(_QWORD *)&v44 = v26;
    LOWORD(v45) = 770;
    v15 = (uint64_t *)&v43;
    return sub_1C59D7FE0(a1, v15);
  }
  v20 = *(_QWORD *)(a2 + 24);
  if (v20 < v47)
  {
    v21 = *a6;
    v22 = "rebase_off field of ";
    if (*a6)
    {
LABEL_17:
      v35[0] = v22;
      v35[2] = a6;
      v36 = 771;
      v23 = 2;
LABEL_28:
      if (v21)
        v22 = (const char *)v35;
      v37[0] = v22;
      v38 = (unint64_t)" command ";
      LOBYTE(v39) = v23;
      HIBYTE(v39) = 3;
      *(_QWORD *)&v40 = v37;
      *(_QWORD *)&v41 = a4;
      LOWORD(v42) = 2050;
      v26 = " extends past the end of the file";
      goto LABEL_33;
    }
LABEL_27:
    v35[0] = v22;
    v36 = 259;
    v23 = 3;
    goto LABEL_28;
  }
  if (v47 + (unint64_t)HIDWORD(v47) > v20)
  {
    v21 = *a6;
    v22 = "rebase_off field plus rebase_size field of ";
    if (*a6)
      goto LABEL_17;
    goto LABEL_27;
  }
  v28 = v48;
  v27 = HIDWORD(v48);
  v29 = v49;
  v33 = v51;
  v34 = v50;
  v32 = v52;
  v31 = v53;
  v30 = v54;
  result = (uint64_t)sub_1C59EDF18(a1, a7, v47, HIDWORD(v47), "dyld rebase info");
  if (!*a1)
  {
    if (v20 < v28)
    {
      v21 = *a6;
      v22 = "bind_off field of ";
      if (*a6)
        goto LABEL_17;
      goto LABEL_27;
    }
    if (v27 + v28 > v20)
    {
      v21 = *a6;
      v22 = "bind_off field plus bind_size field of ";
      if (*a6)
        goto LABEL_17;
      goto LABEL_27;
    }
    result = (uint64_t)sub_1C59EDF18(a1, a7, v28, v27, "dyld bind info");
    if (!*a1)
    {
      if (v20 < v29)
      {
        v21 = *a6;
        v22 = "weak_bind_off field of ";
        if (*a6)
          goto LABEL_17;
        goto LABEL_27;
      }
      if (v34 + v29 > v20)
      {
        v21 = *a6;
        v22 = "weak_bind_off field plus weak_bind_size field of ";
        if (*a6)
          goto LABEL_17;
        goto LABEL_27;
      }
      result = (uint64_t)sub_1C59EDF18(a1, a7, v29, v34, "dyld weak bind info");
      if (!*a1)
      {
        if (v20 < v33)
        {
          v21 = *a6;
          v22 = "lazy_bind_off field of ";
          if (*a6)
            goto LABEL_17;
          goto LABEL_27;
        }
        if (v32 + v33 > v20)
        {
          v21 = *a6;
          v22 = "lazy_bind_off field plus lazy_bind_size field of ";
          if (*a6)
            goto LABEL_17;
          goto LABEL_27;
        }
        result = (uint64_t)sub_1C59EDF18(a1, a7, v33, v32, "dyld lazy bind info");
        if (!*a1)
        {
          if (v20 < v31)
          {
            v21 = *a6;
            v22 = "export_off field of ";
            if (*a6)
              goto LABEL_17;
            goto LABEL_27;
          }
          if (v30 + v31 > v20)
          {
            v21 = *a6;
            v22 = "export_off field plus export_size field of ";
            if (*a6)
              goto LABEL_17;
            goto LABEL_27;
          }
          result = (uint64_t)sub_1C59EDF18(a1, a7, v31, v30, "dyld export info");
          if (!*a1)
          {
            *a5 = *(_QWORD *)a3;
            *a1 = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C59D88FC(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  __int128 *v8;
  char v9;
  const char *v10;
  const char *v11;
  uint64_t result;
  __int128 *v14;
  const char *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  __int128 *v19;
  const char *v20;
  const char *v21;
  __int128 *v22;
  const char *v23;
  _QWORD v24[2];
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  __int128 *v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 12) > 0x17u)
  {
    result = sub_1C59DC3AC((uint64_t)&v37, a2, *(_QWORD *)a3);
    if ((v39 & 1) != 0)
    {
      *a1 = v37;
      return result;
    }
    if (v38 > 0x17)
    {
      if (HIDWORD(v37) > v38)
      {
        v16 = (unsigned __int8 *)(*(_QWORD *)a3 + v38);
        v17 = HIDWORD(v37) - v38;
        do
        {
          if (!*v16++)
          {
            *a1 = 0;
            return result;
          }
          --v17;
        }
        while (v17);
        v24[0] = "load command ";
        v25 = a4;
        v26 = 2051;
        *(_QWORD *)&v27 = v24;
        *(_QWORD *)&v28 = " ";
        LOWORD(v29) = 770;
        if (*a5)
        {
          v19 = &v27;
          *(_QWORD *)&v30 = &v27;
          *(_QWORD *)&v31 = a5;
          LOWORD(v32) = 770;
          v9 = 2;
          v20 = (const char *)&v30;
LABEL_20:
          v33 = v20;
          v34 = v19;
          v11 = " library name extends past the end of the load command";
          goto LABEL_5;
        }
        v30 = v27;
        v31 = v28;
        v32 = v29;
        v9 = v29;
        if (v29 != 1)
        {
          v19 = (__int128 *)*((_QWORD *)&v30 + 1);
          v20 = (const char *)&v30;
          if (BYTE1(v32) == 1)
            v20 = (const char *)v30;
          else
            v9 = 2;
          goto LABEL_20;
        }
        v21 = " library name extends past the end of the load command";
        goto LABEL_44;
      }
      v24[0] = "load command ";
      v25 = a4;
      v26 = 2051;
      *(_QWORD *)&v27 = v24;
      *(_QWORD *)&v28 = " ";
      LOWORD(v29) = 770;
      if (*a5)
      {
        v22 = &v27;
        *(_QWORD *)&v30 = &v27;
        *(_QWORD *)&v31 = a5;
        LOWORD(v32) = 770;
        v9 = 2;
        v23 = (const char *)&v30;
      }
      else
      {
        v30 = v27;
        v31 = v28;
        v32 = v29;
        v9 = v29;
        if (v29 == 1)
        {
          v21 = " name.offset field extends past the end of the load command";
          goto LABEL_44;
        }
        v22 = (__int128 *)*((_QWORD *)&v30 + 1);
        v23 = (const char *)&v30;
        if (BYTE1(v32) == 1)
          v23 = (const char *)v30;
        else
          v9 = 2;
      }
      v33 = v23;
      v34 = v22;
      v11 = " name.offset field extends past the end of the load command";
      goto LABEL_5;
    }
    v24[0] = "load command ";
    v25 = a4;
    v26 = 2051;
    *(_QWORD *)&v27 = v24;
    *(_QWORD *)&v28 = " ";
    LOWORD(v29) = 770;
    if (*a5)
    {
      v14 = &v27;
      *(_QWORD *)&v30 = &v27;
      *(_QWORD *)&v31 = a5;
      LOWORD(v32) = 770;
      v9 = 2;
      v15 = (const char *)&v30;
    }
    else
    {
      v30 = v27;
      v31 = v28;
      v32 = v29;
      v9 = v29;
      if (v29 == 1)
      {
        v21 = " name.offset field too small, not past the end of the dylib_command struct";
        goto LABEL_44;
      }
      v14 = (__int128 *)*((_QWORD *)&v30 + 1);
      v15 = (const char *)&v30;
      if (BYTE1(v32) == 1)
        v15 = (const char *)v30;
      else
        v9 = 2;
    }
    v33 = v15;
    v34 = v14;
    v11 = " name.offset field too small, not past the end of the dylib_command struct";
    goto LABEL_5;
  }
  v24[0] = "load command ";
  v25 = a4;
  v26 = 2051;
  *(_QWORD *)&v27 = v24;
  *(_QWORD *)&v28 = " ";
  LOWORD(v29) = 770;
  if (!*a5)
  {
    v30 = v27;
    v31 = v28;
    v32 = v29;
    v9 = v29;
    if (v29 != 1)
    {
      v8 = (__int128 *)*((_QWORD *)&v30 + 1);
      v10 = (const char *)&v30;
      if (BYTE1(v32) == 1)
        v10 = (const char *)v30;
      else
        v9 = 2;
      goto LABEL_4;
    }
    v21 = " cmdsize too small";
LABEL_44:
    v33 = v21;
    v36 = 259;
    return sub_1C59D7FE0(a1, (uint64_t *)&v33);
  }
  v8 = &v27;
  *(_QWORD *)&v30 = &v27;
  *(_QWORD *)&v31 = a5;
  LOWORD(v32) = 770;
  v9 = 2;
  v10 = (const char *)&v30;
LABEL_4:
  v33 = v10;
  v34 = v8;
  v11 = " cmdsize too small";
LABEL_5:
  v35 = v11;
  LOBYTE(v36) = v9;
  HIBYTE(v36) = 3;
  return sub_1C59D7FE0(a1, (uint64_t *)&v33);
}

uint64_t *sub_1C59D8CEC(uint64_t *result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6)
{
  uint64_t *v6;
  __int128 *v7;
  char v8;
  const char *v9;
  const char *v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  __int128 *v20;
  const char *v21;
  BOOL v22;
  unsigned int v23;
  unsigned __int8 *v24;
  __int128 *v26;
  const char *v27;
  const char *v28;
  __int128 *v29;
  const char *v30;
  _QWORD v31[2];
  uint64_t v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  const char *v40;
  __int128 *v41;
  const char *v42;
  __int16 v43;

  v6 = result;
  if (a4 > 0xB)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = v11 > a3 || a3 + 12 > v11 + *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v40 = "Structure read out-of-range";
      v43 = 259;
      result = (uint64_t *)sub_1C59D7FE0((uint64_t *)&v37, (uint64_t *)&v40);
      *v6 = v37;
      return result;
    }
    v13 = *(_DWORD *)(a3 + 4);
    v14 = *(_DWORD *)(a3 + 8);
    v15 = *(_DWORD *)(a2 + 8);
    v12 = v15 > 0x13;
    v16 = (1 << v15) & 0xAAC00;
    v17 = v12 || v16 == 0;
    v18 = bswap32(v13);
    v19 = bswap32(v14);
    if (!v17)
    {
      v14 = v19;
      v13 = v18;
    }
    if (v14 > 0xB)
    {
      v22 = v13 >= v14;
      v23 = v13 - v14;
      if (v23 != 0 && v22)
      {
        v24 = (unsigned __int8 *)(a3 + v14);
        do
        {
          if (!*v24++)
          {
            *result = 0;
            return result;
          }
          --v23;
        }
        while (v23);
        v31[0] = "load command ";
        v32 = a5;
        v33 = 2051;
        *(_QWORD *)&v34 = v31;
        *(_QWORD *)&v35 = " ";
        LOWORD(v36) = 770;
        if (*a6)
        {
          v26 = &v34;
          *(_QWORD *)&v37 = &v34;
          *(_QWORD *)&v38 = a6;
          LOWORD(v39) = 770;
          v8 = 2;
          v27 = (const char *)&v37;
LABEL_30:
          v40 = v27;
          v41 = v26;
          v10 = " dyld name extends past the end of the load command";
          goto LABEL_5;
        }
        v37 = v34;
        v38 = v35;
        v39 = v36;
        v8 = v36;
        if (v36 != 1)
        {
          v26 = (__int128 *)*((_QWORD *)&v37 + 1);
          v27 = (const char *)&v37;
          if (BYTE1(v39) == 1)
            v27 = (const char *)v37;
          else
            v8 = 2;
          goto LABEL_30;
        }
        v28 = " dyld name extends past the end of the load command";
        goto LABEL_32;
      }
      v31[0] = "load command ";
      v32 = a5;
      v33 = 2051;
      *(_QWORD *)&v34 = v31;
      *(_QWORD *)&v35 = " ";
      LOWORD(v36) = 770;
      if (*a6)
      {
        v29 = &v34;
        *(_QWORD *)&v37 = &v34;
        *(_QWORD *)&v38 = a6;
        LOWORD(v39) = 770;
        v8 = 2;
        v30 = (const char *)&v37;
      }
      else
      {
        v37 = v34;
        v38 = v35;
        v39 = v36;
        v8 = v36;
        if (v36 == 1)
        {
          v28 = " name.offset field extends past the end of the load command";
          goto LABEL_32;
        }
        v29 = (__int128 *)*((_QWORD *)&v37 + 1);
        v30 = (const char *)&v37;
        if (BYTE1(v39) == 1)
          v30 = (const char *)v37;
        else
          v8 = 2;
      }
      v40 = v30;
      v41 = v29;
      v10 = " name.offset field extends past the end of the load command";
      goto LABEL_5;
    }
    v31[0] = "load command ";
    v32 = a5;
    v33 = 2051;
    *(_QWORD *)&v34 = v31;
    *(_QWORD *)&v35 = " ";
    LOWORD(v36) = 770;
    if (*a6)
    {
      v20 = &v34;
      *(_QWORD *)&v37 = &v34;
      *(_QWORD *)&v38 = a6;
      LOWORD(v39) = 770;
      v8 = 2;
      v21 = (const char *)&v37;
    }
    else
    {
      v37 = v34;
      v38 = v35;
      v39 = v36;
      v8 = v36;
      if (v36 == 1)
      {
        v28 = " name.offset field too small, not past the end of the dylinker_command struct";
        goto LABEL_32;
      }
      v20 = (__int128 *)*((_QWORD *)&v37 + 1);
      v21 = (const char *)&v37;
      if (BYTE1(v39) == 1)
        v21 = (const char *)v37;
      else
        v8 = 2;
    }
    v40 = v21;
    v41 = v20;
    v10 = " name.offset field too small, not past the end of the dylinker_command struct";
    goto LABEL_5;
  }
  v31[0] = "load command ";
  v32 = a5;
  v33 = 2051;
  *(_QWORD *)&v34 = v31;
  *(_QWORD *)&v35 = " ";
  LOWORD(v36) = 770;
  if (!*a6)
  {
    v37 = v34;
    v38 = v35;
    v39 = v36;
    v8 = v36;
    if (v36 != 1)
    {
      v7 = (__int128 *)*((_QWORD *)&v37 + 1);
      v9 = (const char *)&v37;
      if (BYTE1(v39) == 1)
        v9 = (const char *)v37;
      else
        v8 = 2;
      goto LABEL_4;
    }
    v28 = " cmdsize too small";
LABEL_32:
    v40 = v28;
    v43 = 259;
    return (uint64_t *)sub_1C59D7FE0(result, (uint64_t *)&v40);
  }
  v7 = &v34;
  *(_QWORD *)&v37 = &v34;
  *(_QWORD *)&v38 = a6;
  LOWORD(v39) = 770;
  v8 = 2;
  v9 = (const char *)&v37;
LABEL_4:
  v40 = v9;
  v41 = v7;
  v10 = " cmdsize too small";
LABEL_5:
  v42 = v10;
  LOBYTE(v43) = v8;
  HIBYTE(v43) = 3;
  return (uint64_t *)sub_1C59D7FE0(result, (uint64_t *)&v40);
}

uint64_t *sub_1C59D90D8(uint64_t *result, uint64_t a2, int a3, unsigned int a4, _QWORD *a5, _BYTE *a6)
{
  const char *v6;
  __int128 *v7;
  char v8;
  __int128 *v9;
  _QWORD v10[4];
  __int16 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18[4];
  __int16 v19;

  if (a3 != 16)
  {
    v10[0] = "load command ";
    v10[2] = a4;
    v11 = 2051;
    *(_QWORD *)&v12 = v10;
    *(_QWORD *)&v13 = " ";
    LOWORD(v14) = 770;
    if (*a6)
    {
      v7 = &v12;
      *(_QWORD *)&v15 = &v12;
      *(_QWORD *)&v16 = a6;
      LOWORD(v17) = 770;
      v8 = 2;
      v9 = &v15;
    }
    else
    {
      v15 = v12;
      v16 = v13;
      v17 = v14;
      v8 = v14;
      if (v14 == 1)
      {
        v6 = " has incorrect cmdsize";
        goto LABEL_4;
      }
      v7 = (__int128 *)*((_QWORD *)&v15 + 1);
      v9 = &v15;
      if (BYTE1(v17) == 1)
        v9 = (__int128 *)v15;
      else
        v8 = 2;
    }
    v18[0] = (uint64_t)v9;
    v18[1] = (uint64_t)v7;
    v18[2] = (uint64_t)" has incorrect cmdsize";
    LOBYTE(v19) = v8;
    HIBYTE(v19) = 3;
    return (uint64_t *)sub_1C59D7FE0(result, v18);
  }
  if (*a5)
  {
    v6 = "more than one LC_VERSION_MIN_MACOSX, LC_VERSION_MIN_IPHONEOS, LC_VERSION_MIN_TVOS or LC_VERSION_MIN_WATCHOS command";
LABEL_4:
    v18[0] = (uint64_t)v6;
    v19 = 259;
    return (uint64_t *)sub_1C59D7FE0(result, v18);
  }
  *a5 = a2;
  *result = 0;
  return result;
}

int8x16_t sub_1C59D91FC(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  unint64_t v3;
  BOOL v4;
  int8x16_t result;
  unsigned int v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 > (unint64_t)a3 || (unint64_t)a3[1].u64 + 4 > v3 + *(_QWORD *)(a2 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  result = *a3;
  *a1 = *a3;
  a1[1].i32[0] = a3[1].i32[0];
  v6 = *(_DWORD *)(a2 + 8);
  v4 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  if (!v4 && v7 != 0)
  {
    result = vrev32q_s8(*a1);
    *a1 = result;
    a1[1].i32[0] = bswap32(a1[1].u32[0]);
  }
  return result;
}

uint64_t *sub_1C59D9280(uint64_t *result, unint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, _QWORD *a7, _BYTE *a8)
{
  __int16 v8;
  int v9;
  const char *v10;
  char v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  char v15;
  char v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;

  if (!*a7)
  {
    if (a2 >= a5)
    {
      if (a6 + a5 <= a2)
      {
        *a7 = a3;
        *result = 0;
        return result;
      }
      v9 = *a8;
      v10 = "cryptoff field plus cryptsize field of ";
      if (*a8)
        goto LABEL_5;
    }
    else
    {
      v9 = *a8;
      v10 = "cryptoff field of ";
      if (*a8)
      {
LABEL_5:
        v12[0] = v10;
        v12[2] = a8;
        v13 = 771;
        v11 = 2;
LABEL_9:
        if (v9)
          v10 = (const char *)v12;
        v14[0] = v10;
        v14[2] = " command ";
        v15 = v11;
        v16 = 3;
        v17[0] = v14;
        v17[2] = a4;
        v18 = 2050;
        v19[0] = (uint64_t)v17;
        v19[2] = (uint64_t)" extends past the end of the file";
        v8 = 770;
        goto LABEL_12;
      }
    }
    v12[0] = v10;
    v13 = 259;
    v11 = 3;
    goto LABEL_9;
  }
  v19[0] = (uint64_t)"more than one LC_ENCRYPTION_INFO and or LC_ENCRYPTION_INFO_64 command";
  v8 = 259;
LABEL_12:
  v20 = v8;
  return (uint64_t *)sub_1C59D7FE0(result, v19);
}

double sub_1C59D9380(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  __int128 v5;
  unsigned int v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 > (unint64_t)a3 || (unint64_t)a3 + 24 > v3 + *(_QWORD *)(a2 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *a3;
  *(_OWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
  v6 = *(_DWORD *)(a2 + 8);
  v4 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  if (!v4 && v7 != 0)
  {
    *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
    *(int8x8_t *)&v5 = vrev32_s8(*(int8x8_t *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v5;
  }
  return *(double *)&v5;
}

uint64_t sub_1C59D9404(uint64_t a1, _DWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 3) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  LODWORD(v4) = *a2;
  LODWORD(v5) = a2[1];
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = bswap32(v5);
  if (v8)
    v4 = v4;
  else
    v4 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 | (v5 << 32);
}

uint64_t *sub_1C59D9480(uint64_t *result, uint64_t a2, unsigned int a3, unsigned int a4, _BYTE *a5, _BYTE *a6, unsigned int a7, _BYTE *a8)
{
  const char *v8;
  __int128 *v9;
  char v10;
  __int128 *v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  const char *v16;
  __int128 *v17;
  char v18;
  __int128 *v19;
  char v20;
  const char *v21;
  __int128 *v22;
  char v23;
  __int128 *v24;
  char v25;
  __int128 *v26;
  char v27;
  __int128 *v28;
  const char *v29;
  __int128 *v30;
  _QWORD v31[4];
  __int16 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if (a7 > 0xB)
  {
    v13 = a3 - a7;
    if (a3 > a7)
    {
      v14 = (unsigned __int8 *)(a2 + a7);
      do
      {
        if (!*v14++)
        {
          *result = 0;
          return result;
        }
        --v13;
      }
      while (v13);
      *(_QWORD *)&v33 = "load command ";
      *(_QWORD *)&v34 = a4;
      LOWORD(v35) = 2051;
      v16 = " ";
      *(_QWORD *)&v36 = &v33;
      *(_QWORD *)&v37 = " ";
      LOWORD(v38) = 770;
      if (*a5)
      {
        v17 = &v36;
        *(_QWORD *)&v39 = &v36;
        *(_QWORD *)&v40 = a5;
        LOWORD(v41) = 770;
        v18 = 2;
        v19 = &v39;
      }
      else
      {
        v39 = v36;
        v40 = v37;
        v41 = v38;
        v18 = v38;
        if (v38 == 1)
        {
          *(_QWORD *)&v42 = " ";
          LOWORD(v44) = 259;
          if (*a8)
          {
            v20 = 3;
            goto LABEL_15;
          }
LABEL_52:
          v45 = v42;
          v46 = v43;
          v47 = v44;
          v20 = v44;
          goto LABEL_53;
        }
        v17 = (__int128 *)*((_QWORD *)&v39 + 1);
        v19 = &v39;
        if (BYTE1(v41) == 1)
          v19 = (__int128 *)v39;
        else
          v18 = 2;
      }
      *(_QWORD *)&v42 = v19;
      *((_QWORD *)&v42 + 1) = v17;
      *(_QWORD *)&v43 = " ";
      LOBYTE(v44) = v18;
      BYTE1(v44) = 3;
      if (*a8)
      {
        v20 = 2;
        v16 = (const char *)&v42;
LABEL_15:
        *(_QWORD *)&v45 = v16;
        *(_QWORD *)&v46 = a8;
        LOBYTE(v47) = v20;
        BYTE1(v47) = 3;
LABEL_53:
        if (BYTE1(v47) == 1)
          v27 = v20;
        else
          v27 = 2;
        v30 = &v45;
        if (BYTE1(v47) == 1)
          v30 = (__int128 *)v45;
        *(_QWORD *)&v48 = v30;
        *((_QWORD *)&v48 + 1) = *((_QWORD *)&v45 + 1);
        v29 = " name extends past the end of the load command";
LABEL_59:
        *(_QWORD *)&v49 = v29;
        goto LABEL_60;
      }
      goto LABEL_52;
    }
    *(_QWORD *)&v33 = "load command ";
    *(_QWORD *)&v34 = a4;
    LOWORD(v35) = 2051;
    v21 = " ";
    *(_QWORD *)&v36 = &v33;
    *(_QWORD *)&v37 = " ";
    LOWORD(v38) = 770;
    if (*a5)
    {
      v22 = &v36;
      *(_QWORD *)&v39 = &v36;
      *(_QWORD *)&v40 = a5;
      LOWORD(v41) = 770;
      v23 = 2;
      v24 = &v39;
    }
    else
    {
      v39 = v36;
      v40 = v37;
      v41 = v38;
      v23 = v38;
      if (v38 == 1)
      {
        *(_QWORD *)&v42 = " ";
        LOWORD(v44) = 259;
        if (*a8)
        {
          v25 = 3;
          goto LABEL_20;
        }
LABEL_43:
        v45 = v42;
        v46 = v43;
        v47 = v44;
        v25 = v44;
        goto LABEL_44;
      }
      v22 = (__int128 *)*((_QWORD *)&v39 + 1);
      v24 = &v39;
      if (BYTE1(v41) == 1)
        v24 = (__int128 *)v39;
      else
        v23 = 2;
    }
    *(_QWORD *)&v42 = v24;
    *((_QWORD *)&v42 + 1) = v22;
    *(_QWORD *)&v43 = " ";
    LOBYTE(v44) = v23;
    BYTE1(v44) = 3;
    if (*a8)
    {
      v25 = 2;
      v21 = (const char *)&v42;
LABEL_20:
      *(_QWORD *)&v45 = v21;
      *(_QWORD *)&v46 = a8;
      LOBYTE(v47) = v25;
      BYTE1(v47) = 3;
LABEL_44:
      if (BYTE1(v47) == 1)
        v27 = v25;
      else
        v27 = 2;
      v28 = &v45;
      if (BYTE1(v47) == 1)
        v28 = (__int128 *)v45;
      *(_QWORD *)&v48 = v28;
      *((_QWORD *)&v48 + 1) = *((_QWORD *)&v45 + 1);
      v29 = ".offset field extends past the end of the load command";
      goto LABEL_59;
    }
    goto LABEL_43;
  }
  v31[0] = "load command ";
  v31[2] = a4;
  v32 = 2051;
  v8 = " ";
  *(_QWORD *)&v33 = v31;
  *(_QWORD *)&v34 = " ";
  LOWORD(v35) = 770;
  if (*a5)
  {
    v9 = &v33;
    *(_QWORD *)&v36 = &v33;
    *(_QWORD *)&v37 = a5;
    LOWORD(v38) = 770;
    v10 = 2;
    v11 = &v36;
    goto LABEL_4;
  }
  v36 = v33;
  v37 = v34;
  v38 = v35;
  v10 = v35;
  if (v35 != 1)
  {
    v9 = (__int128 *)*((_QWORD *)&v36 + 1);
    v11 = &v36;
    if (BYTE1(v38) == 1)
      v11 = (__int128 *)v36;
    else
      v10 = 2;
LABEL_4:
    *(_QWORD *)&v39 = v11;
    *((_QWORD *)&v39 + 1) = v9;
    *(_QWORD *)&v40 = " ";
    LOBYTE(v41) = v10;
    BYTE1(v41) = 3;
    if (*a8)
    {
      v12 = 2;
      v8 = (const char *)&v39;
LABEL_6:
      *(_QWORD *)&v42 = v8;
      *(_QWORD *)&v43 = a8;
      LOBYTE(v44) = v12;
      BYTE1(v44) = 3;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(_QWORD *)&v39 = " ";
  LOWORD(v41) = 259;
  if (*a8)
  {
    v12 = 3;
    goto LABEL_6;
  }
LABEL_30:
  v42 = v39;
  v43 = v40;
  v44 = v41;
  v12 = v41;
LABEL_31:
  v26 = (__int128 *)v42;
  v27 = 2;
  if (BYTE1(v44) != 1)
  {
    v12 = 2;
    v26 = &v42;
  }
  *(_QWORD *)&v45 = v26;
  *((_QWORD *)&v45 + 1) = *((_QWORD *)&v42 + 1);
  *(_QWORD *)&v46 = ".offset field too small, not past the end of the ";
  LOBYTE(v47) = v12;
  BYTE1(v47) = 3;
  if (*a6)
  {
    *(_QWORD *)&v48 = &v45;
    *(_QWORD *)&v49 = a6;
LABEL_60:
    LOBYTE(v50) = v27;
    BYTE1(v50) = 3;
    return (uint64_t *)sub_1C59D7FE0(result, (uint64_t *)&v48);
  }
  v48 = v45;
  v49 = v46;
  v50 = v47;
  return (uint64_t *)sub_1C59D7FE0(result, (uint64_t *)&v48);
}

uint64_t sub_1C59D9958(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6)
{
  uint64_t *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  int v34;
  const char *v35;
  const char *v36;
  _QWORD v37[2];
  uint64_t v38;
  __int16 v39;
  _QWORD v40[2];
  const char *v41;
  __int16 v42;
  _QWORD v43[2];
  uint64_t v44;
  __int16 v45;
  _QWORD v46[2];
  const char *v47;
  __int16 v48;
  _QWORD v49[2];
  uint64_t v50;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  __int16 v61;

  v6 = (uint64_t *)result;
  if (a4 <= 7)
  {
    *(_QWORD *)&v52 = "load command ";
    *(_QWORD *)&v53 = a5;
    LOWORD(v54) = 2051;
    v7 = *a6;
    if (*a6)
    {
      *(_QWORD *)&v55 = &v52;
      *(_QWORD *)&v56 = a6;
      LOWORD(v57) = 770;
      v8 = 2;
      v9 = (const char *)&v55;
LABEL_4:
      v58 = v9;
      v59 = v7;
      v10 = " cmdsize too small";
      goto LABEL_5;
    }
    v55 = v52;
    v56 = v53;
    v57 = v54;
    v8 = v54;
    if (v54 != 1)
    {
      v7 = *((_QWORD *)&v55 + 1);
      v9 = (const char *)&v55;
      if (BYTE1(v57) == 1)
        v9 = (const char *)v55;
      else
        v8 = 2;
      goto LABEL_4;
    }
    v23 = " cmdsize too small";
LABEL_76:
    v58 = v23;
    v61 = 259;
    return sub_1C59D7FE0(v6, (uint64_t *)&v58);
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (v11 > a3 || (v12 = (unsigned int *)(a3 + 8), a3 + 8 > v11 + *(_QWORD *)(a2 + 24)))
  {
    v58 = "Structure read out-of-range";
    v61 = 259;
    result = sub_1C59D7FE0((uint64_t *)&v55, (uint64_t *)&v58);
    *v6 = v55;
    return result;
  }
  v13 = *(_DWORD *)(a2 + 8);
  v14 = v13 > 0x13 || ((1 << v13) & 0xAAC00) == 0;
  v15 = bswap32(*(_DWORD *)(a3 + 4));
  if (v14)
    v15 = *(_DWORD *)(a3 + 4);
  if (v15 < 9)
  {
LABEL_74:
    *v6 = 0;
    return result;
  }
  v16 = 0;
  v17 = a3 + v15;
  v18 = *(unsigned int *)(a2 + 52);
  result = 16777228;
  while (1)
  {
    if ((unint64_t)(v12 + 1) > v17)
    {
      v49[0] = "load command ";
      v50 = a5;
      v51 = 2051;
      v24 = "flavor in ";
      goto LABEL_83;
    }
    LODWORD(v19) = *v12;
    v20 = bswap32(*v12);
    if (((1 << v13) & 0xAAC00) == 0)
      v20 = *v12;
    if (v13 <= 0x13)
      v19 = v20;
    else
      v19 = v19;
    if ((unint64_t)(v12 + 2) > v17)
    {
      v49[0] = "load command ";
      v50 = a5;
      v51 = 2051;
      v24 = " count in ";
LABEL_83:
      *(_QWORD *)&v52 = v49;
      *(_QWORD *)&v53 = v24;
      v25 = 770;
      LOWORD(v54) = 770;
      if (*a6)
      {
        *(_QWORD *)&v55 = &v52;
        *(_QWORD *)&v56 = a6;
        LOWORD(v57) = 770;
        v8 = 2;
        v26 = (const char *)&v55;
      }
      else
      {
        v55 = v52;
        v56 = v53;
        v57 = v54;
        v8 = v54;
        if (v54 == 1)
        {
          v23 = " extends past end of command";
          goto LABEL_76;
        }
        v25 = *((_QWORD *)&v55 + 1);
        v26 = (const char *)&v55;
        if (BYTE1(v57) == 1)
          v26 = (const char *)v55;
        else
          v8 = 2;
      }
      v58 = v26;
      v59 = v25;
      v10 = " extends past end of command";
      goto LABEL_5;
    }
    v21 = v12[1];
    v22 = bswap32(v21);
    if (((1 << v13) & 0xAAC00) == 0)
      v22 = v12[1];
    if (v13 <= 0x13)
      v21 = v22;
    if ((int)v18 <= 16777222)
    {
      if ((_DWORD)v18 != 7)
      {
        if ((_DWORD)v18 != 12)
        {
          if ((_DWORD)v18 != 18)
            goto LABEL_92;
          if ((_DWORD)v19 != 1)
          {
LABEL_90:
            v37[0] = "load command ";
            v38 = a5;
            v39 = 2051;
            v40[0] = v37;
            v41 = " unknown flavor (";
            v42 = 770;
            v43[0] = v40;
            v44 = v19;
            v45 = 2050;
            v46[0] = v43;
            v47 = ") for flavor number ";
            v48 = 770;
            v49[0] = v46;
            v50 = v16;
            v51 = 2050;
            v27 = " in ";
            goto LABEL_103;
          }
          if (v21 == 40)
          {
            v12 += 42;
            if ((unint64_t)v12 > v17)
            {
              v49[0] = "load command ";
              v50 = a5;
              v51 = 2051;
              v32 = " PPC_THREAD_STATE extends past end of command in ";
              goto LABEL_109;
            }
            goto LABEL_60;
          }
          v43[0] = "load command ";
          v44 = a5;
          v45 = 2051;
          v46[0] = v43;
          v47 = " count not PPC_THREAD_STATE_COUNT for flavor number ";
          v48 = 770;
          v49[0] = v46;
          v50 = v16;
          v51 = 2050;
          v27 = " which is a PPC_THREAD_STATE flavor in ";
LABEL_103:
          *(_QWORD *)&v52 = v49;
          *(_QWORD *)&v53 = v27;
          LOWORD(v54) = 770;
          v31 = *a6;
          if (*a6)
            goto LABEL_104;
LABEL_113:
          v55 = v52;
          v56 = v53;
          v57 = v54;
          v8 = v54;
          if (v54 != 1)
          {
            v31 = *((_QWORD *)&v55 + 1);
            v35 = (const char *)v55;
            v34 = BYTE1(v57);
LABEL_115:
            v14 = v34 == 1;
            v36 = (const char *)&v55;
            if (v14)
              v36 = v35;
            else
              v8 = 2;
            goto LABEL_112;
          }
          goto LABEL_118;
        }
        if ((_DWORD)v19 != 1)
          goto LABEL_90;
        if (v21 != 17)
        {
          v43[0] = "load command ";
          v44 = a5;
          v45 = 2051;
          v46[0] = v43;
          v47 = " count not ARM_THREAD_STATE_COUNT for flavor number ";
          v48 = 770;
          v49[0] = v46;
          v50 = v16;
          v51 = 2050;
          v27 = " which is a ARM_THREAD_STATE flavor in ";
          goto LABEL_103;
        }
        v12 += 19;
        if ((unint64_t)v12 > v17)
        {
          v49[0] = "load command ";
          v50 = a5;
          v51 = 2051;
          v32 = " ARM_THREAD_STATE extends past end of command in ";
          goto LABEL_109;
        }
        goto LABEL_60;
      }
      if ((_DWORD)v19 == 1)
      {
        if (v21 == 16)
        {
          v12 += 18;
          if ((unint64_t)v12 <= v17)
            goto LABEL_60;
          v49[0] = "load command ";
          v50 = a5;
          v51 = 2051;
          v33 = " x86_THREAD_STATE32 extends past end of command in ";
          goto LABEL_106;
        }
        v43[0] = "load command ";
        v44 = a5;
        v45 = 2051;
        v46[0] = v43;
        v47 = " count not x86_THREAD_STATE32_COUNT for flavor number ";
        v48 = 770;
        v49[0] = v46;
        v50 = v16;
        v51 = 2050;
        v30 = " which is a x86_THREAD_STATE32 flavor in ";
      }
      else
      {
        v37[0] = "load command ";
        v38 = a5;
        v39 = 2051;
        v40[0] = v37;
        v41 = " unknown flavor (";
        v42 = 770;
        v43[0] = v40;
        v44 = v19;
        v45 = 2050;
        v46[0] = v43;
        v47 = ") for flavor number ";
        v48 = 770;
        v49[0] = v46;
        v50 = v16;
        v51 = 2050;
        v30 = " in ";
      }
      goto LABEL_100;
    }
    if ((_DWORD)v18 == 16777223)
    {
      switch((int)v19)
      {
        case 4:
          if (v21 != 42)
          {
            v43[0] = "load command ";
            v44 = a5;
            v45 = 2051;
            v46[0] = v43;
            v47 = " count not x86_THREAD_STATE64_COUNT for flavor number ";
            v48 = 770;
            v49[0] = v46;
            v50 = v16;
            v51 = 2050;
            v27 = " which is a x86_THREAD_STATE64 flavor in ";
            goto LABEL_103;
          }
          v12 += 44;
          if ((unint64_t)v12 > v17)
          {
            v49[0] = "load command ";
            v50 = a5;
            v51 = 2051;
            v32 = " x86_THREAD_STATE64 extends past end of command in ";
            goto LABEL_109;
          }
          goto LABEL_60;
        case 6:
          if (v21 != 4)
          {
            v43[0] = "load command ";
            v44 = a5;
            v45 = 2051;
            v46[0] = v43;
            v47 = " count not x86_EXCEPTION_STATE64_COUNT for flavor number ";
            v48 = 770;
            v49[0] = v46;
            v50 = v16;
            v51 = 2050;
            v27 = " which is a x86_EXCEPTION_STATE64 flavor in ";
            goto LABEL_103;
          }
          v12 += 6;
          if ((unint64_t)v12 > v17)
          {
            v49[0] = "load command ";
            v50 = a5;
            v51 = 2051;
            v32 = " x86_EXCEPTION_STATE64 extends past end of command in ";
            goto LABEL_109;
          }
          goto LABEL_60;
        case 7:
          if (v21 != 44)
          {
            v43[0] = "load command ";
            v44 = a5;
            v45 = 2051;
            v46[0] = v43;
            v47 = " count not x86_THREAD_STATE_COUNT for flavor number ";
            v48 = 770;
            v49[0] = v46;
            v50 = v16;
            v51 = 2050;
            v30 = " which is a x86_THREAD_STATE flavor in ";
            break;
          }
          v12 += 46;
          if ((unint64_t)v12 <= v17)
            goto LABEL_60;
          v49[0] = "load command ";
          v50 = a5;
          v51 = 2051;
          v33 = " x86_THREAD_STATE extends past end of command in ";
          goto LABEL_106;
        case 8:
          if (v21 != 133)
          {
            v43[0] = "load command ";
            v44 = a5;
            v45 = 2051;
            v46[0] = v43;
            v47 = " count not x86_FLOAT_STATE_COUNT for flavor number ";
            v48 = 770;
            v49[0] = v46;
            v50 = v16;
            v51 = 2050;
            v30 = " which is a x86_FLOAT_STATE flavor in ";
            break;
          }
          v12 += 135;
          if ((unint64_t)v12 <= v17)
            goto LABEL_60;
          v49[0] = "load command ";
          v50 = a5;
          v51 = 2051;
          v33 = " x86_FLOAT_STATE extends past end of command in ";
          goto LABEL_106;
        case 9:
          if (v21 == 6)
          {
            v12 += 8;
            if ((unint64_t)v12 <= v17)
              goto LABEL_60;
            v49[0] = "load command ";
            v50 = a5;
            v51 = 2051;
            v33 = " x86_EXCEPTION_STATE extends past end of command in ";
LABEL_106:
            *(_QWORD *)&v52 = v49;
            *(_QWORD *)&v53 = v33;
            v31 = 770;
            LOWORD(v54) = 770;
            if (*a6)
              goto LABEL_110;
            goto LABEL_107;
          }
          v43[0] = "load command ";
          v44 = a5;
          v45 = 2051;
          v46[0] = v43;
          v47 = " count not x86_EXCEPTION_STATE_COUNT for flavor number ";
          v48 = 770;
          v49[0] = v46;
          v50 = v16;
          v51 = 2050;
          v30 = " which is a x86_EXCEPTION_STATE flavor in ";
          break;
        default:
          goto LABEL_90;
      }
LABEL_100:
      *(_QWORD *)&v52 = v49;
      *(_QWORD *)&v53 = v30;
      LOWORD(v54) = 770;
      v31 = *a6;
      if (*a6)
      {
LABEL_104:
        *(_QWORD *)&v55 = &v52;
        *(_QWORD *)&v56 = a6;
        LOWORD(v57) = 770;
        goto LABEL_111;
      }
LABEL_107:
      v55 = v52;
      v56 = v53;
      v57 = v54;
      v8 = v54;
      if (v54 != 1)
      {
        v34 = BYTE1(v57);
        v31 = *((_QWORD *)&v55 + 1);
        v35 = (const char *)v55;
        goto LABEL_115;
      }
LABEL_118:
      v23 = " command";
      goto LABEL_76;
    }
    if ((_DWORD)v18 != 16777228 && (_DWORD)v18 != 33554444)
    {
LABEL_92:
      v43[0] = "unknown cputype (";
      v44 = v18;
      v45 = 2051;
      v46[0] = v43;
      v47 = ") load command ";
      v28 = 770;
      v48 = 770;
      v49[0] = v46;
      v50 = a5;
      v51 = 2050;
      *(_QWORD *)&v52 = v49;
      *(_QWORD *)&v53 = " for ";
      LOWORD(v54) = 770;
      if (*a6)
      {
        *(_QWORD *)&v55 = &v52;
        *(_QWORD *)&v56 = a6;
        LOWORD(v57) = 770;
        v8 = 2;
        v29 = (const char *)&v55;
      }
      else
      {
        v55 = v52;
        v56 = v53;
        v57 = v54;
        v8 = v54;
        if (v54 == 1)
        {
          v23 = " command can't be checked";
          goto LABEL_76;
        }
        v28 = *((_QWORD *)&v55 + 1);
        v29 = (const char *)&v55;
        if (BYTE1(v57) == 1)
          v29 = (const char *)v55;
        else
          v8 = 2;
      }
      v58 = v29;
      v59 = v28;
      v10 = " command can't be checked";
      goto LABEL_5;
    }
    if ((_DWORD)v19 != 7)
    {
      if ((_DWORD)v19 != 6)
        goto LABEL_90;
      if (v21 != 68)
      {
        v43[0] = "load command ";
        v44 = a5;
        v45 = 2051;
        v46[0] = v43;
        v47 = " count not ARM_THREAD_STATE64_COUNT for flavor number ";
        v48 = 770;
        v49[0] = v46;
        v50 = v16;
        v51 = 2050;
        v27 = " which is a ARM_THREAD_STATE64 flavor in ";
        goto LABEL_103;
      }
      v12 += 70;
      if ((unint64_t)v12 > v17)
      {
        v49[0] = "load command ";
        v50 = a5;
        v51 = 2051;
        v32 = " ARM_THREAD_STATE64 extends past end of command in ";
        goto LABEL_109;
      }
      goto LABEL_60;
    }
    if (v21 != 4)
    {
      v43[0] = "load command ";
      v44 = a5;
      v45 = 2051;
      v46[0] = v43;
      v47 = " count not ARM_EXCEPTION_STATE64_COUNT for flavor number ";
      v48 = 770;
      v49[0] = v46;
      v50 = v16;
      v51 = 2050;
      v27 = " which is a ARM_EXCEPTION_STATE64 flavor in ";
      goto LABEL_103;
    }
    v12 += 6;
    if ((unint64_t)v12 > v17)
      break;
LABEL_60:
    ++v16;
    if ((unint64_t)v12 >= v17)
      goto LABEL_74;
  }
  v49[0] = "load command ";
  v50 = a5;
  v51 = 2051;
  v32 = " ARM_EXCEPTION_STATE64 extends past end of command in ";
LABEL_109:
  *(_QWORD *)&v52 = v49;
  *(_QWORD *)&v53 = v32;
  v31 = 770;
  LOWORD(v54) = 770;
  if (!*a6)
    goto LABEL_113;
LABEL_110:
  *(_QWORD *)&v55 = &v52;
  *(_QWORD *)&v56 = a6;
  LOWORD(v57) = 770;
LABEL_111:
  v8 = 2;
  v36 = (const char *)&v55;
LABEL_112:
  v58 = v36;
  v59 = v31;
  v10 = " command";
LABEL_5:
  v60 = v10;
  LOBYTE(v61) = v8;
  HIBYTE(v61) = 3;
  return sub_1C59D7FE0(v6, (uint64_t *)&v58);
}

uint64_t sub_1C59DA608(uint64_t a1, _DWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 4) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  LODWORD(v4) = *a2;
  LODWORD(v5) = a2[1];
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = bswap32(v5);
  if (v8)
    v4 = v4;
  else
    v4 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 | (v5 << 32);
}

double sub_1C59DA684@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  BOOL v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = a2 + 5;
  v5 = (_OWORD *)(v3 + *(_QWORD *)(a1 + 24));
  if (v3 <= (unint64_t)a2)
  {
    v6 = v4 >= v5;
    v7 = v4 == v5;
  }
  else
  {
    v6 = 1;
    v7 = 0;
  }
  if (!v7 && v6)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v8 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 64) = a2[4];
  v9 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v9;
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 <= 0x13 && ((1 << v10) & 0xAAC00) != 0)
    *(_QWORD *)&v9 = sub_1C62D8F34((int8x16_t *)a3).u64[0];
  return *(double *)&v9;
}

uint64_t *llvm::object::MachOObjectFile::checkSymbolTable@<X0>(llvm::object::MachOObjectFile *this@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  int v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t Symbol64TableEntry;
  unint64_t v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  unint64_t v23;
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *((_DWORD *)this + 18);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v6 = (__int128 *)*((_QWORD *)this + 34);
  if (v6)
  {
    a3.n128_f64[0] = sub_1C59D9380((uint64_t)&v31, (uint64_t)this, v6);
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v7 = (uint64_t *)(*(uint64_t (**)(llvm::object::MachOObjectFile *, __n128))(*(_QWORD *)this + 48))(this, a3);
  v9 = v8;
  result = (uint64_t *)(*(uint64_t (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 56))(this);
  v29 = v7;
  v30 = v9;
  if (v7 == result)
  {
LABEL_30:
    *a2 = 0;
    return result;
  }
  v11 = (uint64_t)result;
  v12 = 0;
  v13 = HIDWORD(v33);
  while (1)
  {
    if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
    {
      Symbol64TableEntry = llvm::object::MachOObjectFile::getSymbol64TableEntry((uint64_t)this, v7);
    }
    else
    {
      Symbol64TableEntry = llvm::object::MachOObjectFile::getSymbolTableEntry((uint64_t)this, v7);
      v15 = v15;
    }
    if ((Symbol64TableEntry & 0xE000000000) != 0)
      goto LABEL_28;
    v16 = BYTE4(Symbol64TableEntry) & 0xE;
    if (v16 != 10)
    {
      if (v16 == 14
        && ((Symbol64TableEntry & 0xFF0000000000) == 0
         || BYTE5(Symbol64TableEntry) > (unint64_t)*((unsigned int *)this + 22)))
      {
        v22 = "bad section index: ";
        v23 = BYTE5(Symbol64TableEntry);
        v21 = 2307;
LABEL_34:
        v24 = v21;
        v20 = " for symbol at index ";
        goto LABEL_36;
      }
      goto LABEL_16;
    }
    if (v15 >= v13)
      break;
LABEL_16:
    if ((v5 & 0x80) != 0)
    {
      v17 = (Symbol64TableEntry & 0xE00000000) == 0 && v15 == 0;
      v18 = v17;
      if (v16 == 12 || v18)
      {
        v19 = HIBYTE(Symbol64TableEntry);
        if (HIBYTE(Symbol64TableEntry) - 254 >= 2u
          && (_DWORD)v19
          && (v19 - 1) >= (unint64_t)*((unsigned int *)this + 28))
        {
          v22 = "bad library ordinal: ";
          v23 = HIBYTE(Symbol64TableEntry);
          v21 = 2051;
          goto LABEL_34;
        }
      }
    }
LABEL_28:
    if (v13 <= Symbol64TableEntry)
    {
      v22 = "bad string table index: ";
      v23 = Symbol64TableEntry;
      v24 = 2307;
      v20 = " past the end of string table, for symbol at index ";
      goto LABEL_36;
    }
    ++v12;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v30 + 24))(v30, &v29);
    v7 = v29;
    if (v29 == (uint64_t *)v11)
      goto LABEL_30;
  }
  v22 = "bad n_value: ";
  v23 = v15;
  v24 = 2307;
  v20 = " past the end of string table, for N_INDR symbol at index ";
LABEL_36:
  v25[0] = &v22;
  v25[2] = v20;
  v26 = 770;
  v27[0] = (uint64_t)v25;
  v27[2] = v12;
  v28 = 2050;
  return (uint64_t *)sub_1C59D7FE0(a2, v27);
}

uint64_t llvm::object::MachOObjectFile::getHeader64(llvm::object::MachOObjectFile *this)
{
  return (uint64_t)this + 48;
}

double llvm::object::MachOObjectFile::getSymtabLoadCommand@<D0>(llvm::object::MachOObjectFile *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  double result;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (v2)
    return sub_1C59D9380((uint64_t)a2, (uint64_t)this, v2);
  *(_QWORD *)&result = 0x1800000002;
  *a2 = 0x1800000002;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

unint64_t llvm::object::MachOObjectFile::getStringTableData(llvm::object::MachOObjectFile *this)
{
  __int128 *v2;
  unint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (v2)
  {
    v5[0] = 0;
    v5[1] = 0;
    v6 = 0;
    sub_1C59D9380((uint64_t)v5, (uint64_t)this, v2);
    v3 = v6;
  }
  else
  {
    v3 = 0;
  }
  if (*((_QWORD *)this + 3) < v3)
    v3 = *((_QWORD *)this + 3);
  return *((_QWORD *)this + 2) + v3;
}

uint64_t sub_1C59DA9F0(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 1) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v4 = *a2;
  v5 = HIWORD(*a2);
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v3 || v7 == 0;
  LODWORD(v9) = bswap32(v4);
  v10 = __rev16(v5);
  if (v8)
    v9 = v4;
  else
    v9 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 & 0xFFFF00000000 | (v5 << 48) | v9;
}

uint64_t llvm::object::MachOObjectFile::getSectionType(uint64_t a1, unsigned int a2)
{
  return sub_1C59DAA84(a1, a2);
}

uint64_t sub_1C59DAA84(uint64_t a1, unsigned int a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    v6 = 0u;
    v7 = 0u;
    v4 = 0u;
    v5 = 0u;
    v3 = 0u;
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v3);
    return v7;
  }
  else
  {
    LODWORD(v7) = 0;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v3);
    return DWORD2(v6);
  }
}

uint64_t llvm::object::MachOObjectFile::getNValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;

  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v2;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v4;
  }
}

uint64_t llvm::object::MachOObjectFile::getIndirectName(llvm::object::MachOObjectFile *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t StringTableData;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;
  unint64_t v12;
  size_t v13;

  StringTableData = llvm::object::MachOObjectFile::getStringTableData(a1);
  v8 = v7;
  if ((sub_1C59DA9F0((uint64_t)a1, a2) & 0xE00000000) != 0xA00000000)
    goto LABEL_2;
  if ((*((_DWORD *)a1 + 2) & 0xFFFFFFFE) == 0x12)
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry((uint64_t)a1, a2);
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry((uint64_t)a1, a2);
    v11 = v11;
  }
  if (v11 < v8)
  {
    v12 = StringTableData + v11;
    if (StringTableData)
      v13 = strlen((const char *)(StringTableData + v11));
    else
      v13 = 0;
    *a3 = v12;
    a3[1] = v13;
    std::system_category();
    return 0;
  }
  else
  {
LABEL_2:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    return 3;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolSectionID(uint64_t a1, uint64_t *a2)
{
  return ((unsigned __int16)((unint64_t)sub_1C59DA9F0(a1, a2) >> 32) >> 8) - 1;
}

void llvm::object::MachOObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

size_t llvm::object::MachOObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  size_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  if (*(_BYTE *)(v4 + 15))
    result = 16;
  else
    result = strlen(*(const char **)(*(_QWORD *)(a1 + 80) + 8 * a2));
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionRawName(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
}

double llvm::object::MachOObjectFile::getSection64@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), a3);
}

double llvm::object::MachOObjectFile::getSection@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), a3).u64[0];
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  unint64_t result;
  unsigned int v4;
  char v5;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v9);
    result = *((_QWORD *)&v11 + 1);
    v4 = v12;
    v5 = v13;
  }
  else
  {
    LODWORD(v13) = 0;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v9);
    result = DWORD1(v11);
    v4 = DWORD2(v11);
    v5 = BYTE8(v12);
  }
  if (v5 != 1 && v5 != 12)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = v7 - v4;
    if (v8 >= result)
      v8 = result;
    if (v7 >= v4)
      return v8;
    else
      return 0;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionContents(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = a2;
  if (*((_QWORD *)this + 3) < (unint64_t)a2)
    v2 = *((_QWORD *)this + 3);
  return *((_QWORD *)this + 2) + v2;
}

void llvm::object::MachOObjectFile::getSectionContents(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    sub_1C59EA458(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v10);
    LODWORD(v5) = v13;
    v6 = *((_QWORD *)&v12 + 1);
  }
  else
  {
    LODWORD(v14) = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    sub_1C59EA3C8(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v10);
    v6 = DWORD1(v12);
    LODWORD(v5) = DWORD2(v12);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 >= v5)
    v5 = v5;
  else
    v5 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 16) + v5;
  v9 = v7 - v5;
  if (v9 < v6)
    v6 = v9;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v6;
}

uint64_t llvm::object::MachOObjectFile::getSection@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4[4];
  __int16 v5;

  if (a2 && *(_DWORD *)(this + 88) >= a2)
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = a2 - 1;
    *(_QWORD *)(a3 + 8) = this;
  }
  else
  {
    v4[0] = (uint64_t)"bad section index: ";
    v4[2] = a2;
    v5 = 2307;
    this = sub_1C59D7FE0((uint64_t *)a3, v4);
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  return this;
}

double llvm::object::MachOObjectFile::getSection@<D0>(uint64_t a1@<X0>, const void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  double result;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  __int128 v22;
  void *__s1[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  v10 = v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  *(_QWORD *)&v22 = v8;
  *((_QWORD *)&v22 + 1) = v10;
  if (v10 == v12 && v8 == v11)
  {
LABEL_15:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    v20 = (_QWORD *)operator new();
    *v20 = &off_1E81A0D28;
    v20[1] = 3;
    v20[2] = v19;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v20;
  }
  else
  {
    v14 = v11;
    v15 = v12;
    while (1)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 136))(__s1, v10, v8);
      if ((v24 & 1) != 0)
      {
        v21 = __s1[0];
        *(_BYTE *)(a4 + 16) |= 1u;
        *(_QWORD *)a4 = v21;
        return result;
      }
      if (__s1[1] == a3 && (!a3 || !memcmp(__s1[0], a2, (size_t)a3)))
        break;
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v22 + 1) + 128))(*((_QWORD *)&v22 + 1), &v22);
      v10 = *((_QWORD *)&v22 + 1);
      v8 = v22;
      if (*((_QWORD *)&v22 + 1) == v15 && (_QWORD)v22 == v14)
        goto LABEL_15;
    }
    *(_BYTE *)(a4 + 16) &= ~1u;
    result = *(double *)&v22;
    *(_OWORD *)a4 = v22;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::isSectionText(uint64_t a1, unsigned int a2)
{
  return sub_1C59DAA84(a1, a2) >> 31;
}

BOOL llvm::object::MachOObjectFile::isSectionData(uint64_t a1, unsigned int a2)
{
  int v2;
  _BOOL4 v4;

  v2 = sub_1C59DAA84(a1, a2);
  v4 = v2 != 1 && v2 != 12;
  return v2 >= 0 && v4;
}

uint64_t llvm::object::MachOObjectFile::isDebugSection(uint64_t a1)
{
  char *v1;
  uint64_t result;
  char *v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1 + 136))(&v10);
  v1 = (char *)v10;
  if ((v12 & 1) == 0)
  {
    if (v11 < 7)
      return 0;
    if (*v10 != 1701076831 || *(_DWORD *)((char *)v10 + 3) != 1735746149)
    {
      if (v11 < 8)
      {
        if (*v10 != 1885429599 || *(_DWORD *)((char *)v10 + 3) != 1701605488)
          return 0;
      }
      else if (*(_QWORD *)v10 != 0x67756265647A5F5FLL
             && (*v10 != 1885429599 || *(_DWORD *)((char *)v10 + 3) != 1701605488))
      {
        if (v11 != 11)
          return 0;
        if (*(_QWORD *)v10 != 0x6E695F6264675F5FLL || *(_QWORD *)((char *)v10 + 3) != 0x7865646E695F6264)
          return *(_QWORD *)v10 == 0x5F74666977735F5FLL && *(_QWORD *)((char *)v10 + 3) == 0x7473615F74666977;
      }
    }
    return 1;
  }
  v10 = 0;
  v8 = v1;
  sub_1C4D62BD4(&v8, &v9);
  if (v8)
    (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  if ((v12 & 1) == 0)
    return 0;
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSegmentContents(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  char *v16;
  char *v17;
  char *v18;
  _BYTE v19[24];
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v7 = *(_QWORD *)(a1 + 128);
    v8 = v7 + 16 * v3;
    do
    {
      v9 = *(_QWORD *)v7;
      v10 = *(_DWORD *)(v7 + 8);
      if (v10 == 25)
      {
        sub_1C59F508C((uint64_t)&v18, a1, v9);
        if ((v25 & 1) != 0)
        {
LABEL_23:
          v16 = v18;
          sub_1C4D62BD4(&v16, &v17);
          if (v16)
            (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
          goto LABEL_25;
        }
        if (a3 <= 0x10 && (!a3 || !memcmp(v19, a2, a3)))
        {
          v11 = *(_QWORD *)(a1 + 16);
          v12 = *(_QWORD *)(a1 + 24);
          v13 = v22;
          v14 = v23 + v22;
LABEL_15:
          if (v12 < v13)
            v13 = v12;
          if (v13 > v14)
            v14 = v13;
          if (v12 >= v14)
            v12 = v14;
          result = v11 + v13;
          if (v12 != v13)
            return result;
        }
      }
      else if (v10 == 1)
      {
        sub_1C59F516C((uint64_t)&v18, a1, v9);
        if ((v24 & 1) != 0)
          goto LABEL_23;
        if (a3 <= 0x10 && (!a3 || !memcmp(v19, a2, a3)))
        {
          v11 = *(_QWORD *)(a1 + 16);
          v12 = *(_QWORD *)(a1 + 24);
          v13 = v20;
          v14 = v21 + v20;
          goto LABEL_15;
        }
      }
LABEL_25:
      v7 += 16;
    }
    while (v7 != v8);
  }
  return 0;
}

uint64_t llvm::object::MachOObjectFile::load_commands(llvm::object::MachOObjectFile *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t llvm::object::MachOObjectFile::getSectionID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::isSectionBitcode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t result;
  BOOL v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1[10] + 8 * a2);
  v5 = v4 + 16;
  if (*(_BYTE *)(v4 + 31))
    v6 = 16;
  else
    v6 = strlen((const char *)v5);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*a1 + 136))(v10, a1, a2);
  if ((v11 & 1) != 0)
  {
    result = v10[0];
    v10[0] = 0;
    if (!result)
      return result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  if (v6 != 6)
    return 0;
  v8 = *(_DWORD *)v5 == 1280073567 && *(_WORD *)(v5 + 4) == 19798;
  if (!v8 || v10[1] != 9)
    return 0;
  return *(_QWORD *)v10[0] == 0x646F637469625F5FLL && *(_BYTE *)(v10[0] + 8) == 101;
}

const char *llvm::object::MachOObjectFile::getSectionFinalSegmentName(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  const char *v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  v3 = (const char *)(v2 + 16);
  if (!*(_BYTE *)(v2 + 31))
    strlen(v3);
  return v3;
}

uint64_t llvm::object::MachOObjectFile::extrel_begin(llvm::object::MachOObjectFile *this)
{
  return 0;
}

unint64_t llvm::object::MachOObjectFile::extrel_end(llvm::object::MachOObjectFile *this)
{
  _OWORD *v1;
  _OWORD v3[4];
  __int128 v4;

  v1 = (_OWORD *)*((_QWORD *)this + 35);
  if (!v1)
    return 0;
  v4 = 0u;
  memset(v3, 0, sizeof(v3));
  sub_1C59DA684((uint64_t)this, v1, (uint64_t)v3);
  return (unint64_t)DWORD1(v4) << 32;
}

uint64_t llvm::object::MachOObjectFile::locrel_begin(llvm::object::MachOObjectFile *this)
{
  return 1;
}

unint64_t llvm::object::MachOObjectFile::locrel_end(llvm::object::MachOObjectFile *this)
{
  _OWORD *v1;
  _OWORD v3[4];
  __int128 v4;

  v1 = (_OWORD *)*((_QWORD *)this + 35);
  if (!v1)
    return 1;
  v4 = 0u;
  memset(v3, 0, sizeof(v3));
  sub_1C59DA684((uint64_t)this, v1, (uint64_t)v3);
  return ((unint64_t)HIDWORD(v4) << 32) | 1;
}

uint64_t llvm::object::MachOObjectFile::getAnyRelocationAddress(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = *a2;
  if ((*a2 & 0x80000000) == 0 || *(_DWORD *)(a1 + 52) == 16777223)
    return v2;
  else
    return v2 & 0xFFFFFF;
}

BOOL llvm::object::MachOObjectFile::isRelocationScattered(uint64_t a1, int *a2)
{
  return *(_DWORD *)(a1 + 52) != 16777223 && *a2 < 0;
}

uint64_t llvm::object::MachOObjectFile::getPlainRelocationSymbolNum(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 > 0x13;
  v4 = (1 << v2) & 0xAAC00;
  if (v3 || v4 == 0)
    return *(_DWORD *)(a2 + 4) & 0xFFFFFF;
  else
    return *(_DWORD *)(a2 + 4) >> 8;
}

BOOL llvm::object::MachOObjectFile::getPlainRelocationExternal(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  int v6;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 >= 0x13;
  v5 = v2 == 19;
  v4 = (1 << v2) & 0xAAC00;
  v5 = !v5 && v3 || v4 == 0;
  if (v5)
    v6 = (*(_DWORD *)(a2 + 4) >> 27) & 1;
  else
    v6 = *(_DWORD *)(a2 + 4) & 0x10;
  return v6 != 0;
}

uint64_t llvm::object::MachOObjectFile::getRelocationSection(_DWORD *a1, unint64_t a2)
{
  uint64_t Relocation;

  Relocation = llvm::object::MachOObjectFile::getRelocation((uint64_t)a1, a2);
  return llvm::object::MachOObjectFile::getAnyRelocationSection(a1, &Relocation);
}

uint64_t llvm::object::MachOObjectFile::getAnyRelocationSection(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v4;
  unsigned int v6;

  if (a1[13] != 16777223 && (*a2 & 0x80000000) != 0)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
  v2 = a1[2];
  if (v2 > 0x13 || ((1 << v2) & 0xAAC00) == 0)
  {
    v4 = a2[1];
    if (((v4 >> 27) & 1) != 0)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
  }
  else
  {
    v4 = a2[1];
    if ((v4 & 0x10) != 0)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
  }
  if (v2 <= 0x13 && ((1 << v2) & 0xAAC00) != 0)
  {
    v6 = v4 >> 8;
    if (!(v4 >> 8))
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
  }
  else
  {
    v6 = v4 & 0xFFFFFF;
    if ((v4 & 0xFFFFFF) == 0)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
  }
  if (a1[22] < v6)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1);
  return v6 - 1;
}

uint64_t llvm::object::MachOObjectFile::getAnyRelocationType(uint64_t a1, _DWORD *a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (*(_DWORD *)(a1 + 52) != 16777223 && (*a2 & 0x80000000) != 0)
    return HIBYTE(*a2) & 0xF;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 > 0x13;
  v5 = (1 << v3) & 0xAAC00;
  if (v4 || v5 == 0)
    return a2[1] >> 28;
  else
    return a2[1] & 0xF;
}

uint64_t llvm::object::MachOObjectFile::getRelocationLength(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation;
  int v4;
  unsigned int v5;
  int v6;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) == 16777223 || (Relocation & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(a1 + 8) - 10;
    if (v5 > 9)
      LOBYTE(v6) = 25;
    else
      v6 = dword_1C8667934[v5];
    v4 = HIDWORD(Relocation) >> v6;
  }
  else
  {
    v4 = Relocation >> 28;
  }
  return v4 & 3;
}

uint64_t llvm::object::MachOObjectFile::getAnyRelocationLength(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;

  if (*(_DWORD *)(a1 + 52) == 16777223 || (*a2 & 0x80000000) == 0)
  {
    v3 = *(_DWORD *)(a1 + 8) - 10;
    if (v3 > 9)
      LOBYTE(v4) = 25;
    else
      v4 = dword_1C8667934[v3];
    v2 = a2[1] >> v4;
  }
  else
  {
    v2 = *a2 >> 28;
  }
  return v2 & 3;
}

char *llvm::object::MachOObjectFile::guessLibraryShortName(uint64_t a1, unint64_t a2, _BYTE *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  int v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int *v53;
  int v54;
  int v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int *v69;
  unint64_t v70;
  int v71;
  int v72;
  BOOL v73;
  unint64_t v74;

  v8 = a1 - 1;
  *a3 = 0;
  v9 = a2;
  *a4 = 0;
  a4[1] = 0;
  v10 = a2;
  do
  {
    if (!v10)
      goto LABEL_101;
    v11 = v10--;
  }
  while (*(_BYTE *)(v8 + v11) != 47);
  if (v11 <= 1)
    goto LABEL_101;
  if (a2 < v11)
    v11 = a2;
  v12 = (char *)(a1 + v11);
  v13 = a2 - v11;
  v14 = (unsigned __int8 *)(a2 + a1 - 1);
  v15 = v13;
  do
  {
    if (!v15)
      goto LABEL_24;
    --v15;
    v16 = *v14--;
  }
  while (v16 != 95);
  if (v13 < 2)
  {
LABEL_24:
    v17 = v13;
    goto LABEL_25;
  }
  if (v13 >= v15)
    v17 = v15;
  else
    v17 = v13;
  v18 = &v12[v17];
  *a4 = &v12[v17];
  a4[1] = v13 - v17;
  if (v13 - v17 == 8)
  {
    if (*(_QWORD *)v18 == 0x656C69666F72705FLL)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (v13 - v17 != 6
    || ((v19 = *(_DWORD *)v18, v20 = *((unsigned __int16 *)v18 + 2), v19 == 1650811999)
      ? (v21 = v20 == 26485)
      : (v21 = 0),
        !v21))
  {
LABEL_23:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_24;
  }
LABEL_25:
  if (a2 < v10)
    v10 = a2;
  while (v10)
  {
    v22 = v10 - 1;
    v23 = *(unsigned __int8 *)(v8 + v10--);
    if (v23 == 47)
      goto LABEL_31;
  }
  v22 = -1;
LABEL_31:
  v24 = v22 + 1 + v17;
  if (a2 >= v22 + 1)
    v25 = v22 + 1;
  else
    v25 = a2;
  if (v25 <= v24)
    v26 = v22 + 1 + v17;
  else
    v26 = v25;
  if (a2 < v26)
    v26 = a2;
  v27 = v26 - v25;
  if (a2 >= v24)
    v28 = v22 + 1 + v17;
  else
    v28 = a2;
  if (v28 <= v24 + 11)
    v29 = v24 + 11;
  else
    v29 = v28;
  if (a2 < v29)
    v29 = a2;
  if (v27 == v17)
  {
    v30 = v29 - v28;
    if (v17)
    {
      v74 = v30;
      v31 = v12;
      v32 = memcmp((const void *)(a1 + v25), v12, v17);
      v12 = v31;
      if (v32 || v74 != 11)
        goto LABEL_57;
    }
    else if (v30 != 11)
    {
      goto LABEL_57;
    }
    if (*(_QWORD *)(a1 + v28) == 0x6F77656D6172662ELL && *(_QWORD *)(a1 + v28 + 3) == 0x2F6B726F77656D61)
      goto LABEL_145;
  }
LABEL_57:
  if (v22 != -1)
  {
    v34 = a2 >= v22 ? v22 : a2;
    do
    {
      if (!v34)
        goto LABEL_101;
      v35 = v34--;
    }
    while (*(_BYTE *)(v8 + v35) != 47);
    if (v35 >= 2)
    {
      if (a2 < v35)
        v35 = a2;
      if (a2 - v35 >= 9)
      {
        v36 = (uint64_t *)(a1 + v35);
        v37 = *v36;
        v38 = *((unsigned __int8 *)v36 + 8);
        if (v37 == 0x736E6F6973726556 && v38 == 47)
        {
          if (a2 >= v34)
            v40 = v34;
          else
            v40 = a2;
          do
          {
            v41 = v40;
            if (!v40)
              break;
            --v40;
          }
          while (*(_BYTE *)(v8 + v41) != 47);
          v42 = v17 + v41;
          if (a2 < v41)
            v41 = a2;
          if (v41 <= v42)
            v43 = v42;
          else
            v43 = v41;
          if (a2 < v43)
            v43 = a2;
          v44 = v43 - v41;
          if (a2 >= v42)
            v45 = v42;
          else
            v45 = a2;
          if (v45 <= v42 + 11)
            v46 = v42 + 11;
          else
            v46 = v45;
          if (a2 < v46)
            v46 = a2;
          if (v44 == v17)
          {
            v47 = v46 - v45;
            if (!v17)
            {
LABEL_96:
              if (v47 != 11)
                goto LABEL_101;
              if (*(_QWORD *)(a1 + v45) != 0x6F77656D6172662ELL || *(_QWORD *)(a1 + v45 + 3) != 0x2F6B726F77656D61)
                goto LABEL_101;
LABEL_145:
              *a3 = 1;
              return v12;
            }
            v48 = v12;
            if (!memcmp((const void *)(a1 + v41), v12, v17))
            {
              v12 = v48;
              goto LABEL_96;
            }
          }
        }
      }
    }
  }
LABEL_101:
  v50 = v9;
  do
  {
    if (!v50)
      return 0;
    v51 = v50--;
  }
  while (*(_BYTE *)(v8 + v51) != 46);
  if (v51 < 2)
    return 0;
  if (a2 >= v50)
    v52 = v50;
  else
    v52 = a2;
  v53 = (int *)(a1 + v52);
  if (a2 - v52 == 4)
  {
    if (*v53 != 2020897070)
      return 0;
    if (a2 >= v50)
      v63 = v50;
    else
      v63 = a2;
    v64 = v63 - 1;
    do
    {
      if (v64 == -1)
        return (char *)a1;
      v65 = *(unsigned __int8 *)(a1 + v64--);
    }
    while (v65 != 47);
    v59 = v64 + 2;
LABEL_148:
    if (a2 < v59)
      v59 = a2;
    return (char *)(a1 + v59);
  }
  else
  {
    if (a2 - v52 != 6)
      return 0;
    v54 = *v53;
    v55 = *((unsigned __int16 *)v53 + 2);
    if (v54 != 1819894830 || v55 != 25193)
      return 0;
    if (v50 >= 3)
    {
      v57 = v50 - 1;
      if (a2 >= v50 - 2)
        v58 = v50 - 2;
      else
        v58 = a2;
      if (v58 > v57)
        v57 = v58;
      if (a2 < v57)
        v57 = a2;
      if (v57 - v58 == 1)
      {
        if (*(_BYTE *)(a1 + v58) == 46)
          v50 -= 2;
        if (a2 >= v50)
          v52 = v50;
        else
          v52 = a2;
      }
    }
    do
    {
      v59 = v52;
      if (!v52)
        break;
      --v52;
    }
    while (*(_BYTE *)(v8 + v59) != 47);
    do
    {
      if (!v9)
        goto LABEL_148;
      v60 = v9 - 1;
      v61 = *(unsigned __int8 *)(v8 + v9--);
    }
    while (v61 != 95);
    if (v59 == v60)
      goto LABEL_148;
    if (a2 < v59)
      v59 = a2;
    v12 = (char *)(a1 + v59);
    if (a2 >= v60)
      v66 = v60;
    else
      v66 = a2;
    if (v66 <= v50)
      v67 = v50;
    else
      v67 = v66;
    if (a2 >= v67)
      v68 = v67;
    else
      v68 = a2;
    v69 = (int *)(a1 + v66);
    v70 = v68 - v66;
    *a4 = v69;
    a4[1] = v70;
    if (v70 == 8)
    {
      if (*(_QWORD *)v69 == 0x656C69666F72705FLL)
        return v12;
      goto LABEL_172;
    }
    if (v70 != 6
      || ((v71 = *v69, v72 = *((unsigned __int16 *)v69 + 2), v71 == 1650811999) ? (v73 = v72 == 26485) : (v73 = 0), !v73))
    {
LABEL_172:
      *a4 = 0;
      a4[1] = 0;
    }
  }
  return v12;
}

unint64_t llvm::object::MachOObjectFile::getLibraryShortName(llvm::object::MachOObjectFile *this, llvm::StringRef *a2)
{
  uint64_t LibraryName;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[2];
  uint64_t v10;
  char v11;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  LibraryName = llvm::object::MachOObjectFile::getLibraryName(this, a2);
  v4 = LibraryName;
  if ((_DWORD)LibraryName)
  {
    v5 = LibraryName;
  }
  else
  {
    v9[0] = llvm::object::MachOObjectFile::guessLibraryShortName(0, 0, &v11, &v10);
    v9[1] = v6;
    v7 = v9;
    if (!v6)
      v7 = v12;
    *(_OWORD *)a2 = *(_OWORD *)v7;
    std::system_category();
    v5 = 0;
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t llvm::object::MachOObjectFile::getLibraryName(llvm::object::MachOObjectFile *this, llvm::StringRef *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  const char *v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned int *)this + 34);
  if (!(_DWORD)v2)
    goto LABEL_10;
  v4 = *((_QWORD *)this + 16);
  v5 = 16 * v2;
  while (*(_DWORD *)(v4 + 8) != 13)
  {
    v4 += 16;
    v5 -= 16;
    if (!v5)
      goto LABEL_10;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_1C59D9380((uint64_t)&v11, (uint64_t)this, *(__int128 **)v4);
  v6 = *(__int128 **)v4;
  v7 = (const char *)(*(_QWORD *)v4 + v12);
  v8 = v6 ? strlen(v7) : 0;
  if (v8 + v12 <= HIDWORD(v11))
  {
    *(_QWORD *)a2 = v7;
    *((_QWORD *)a2 + 1) = v8;
    std::system_category();
    return 0;
  }
  else
  {
LABEL_10:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    return 3;
  }
}

uint64_t llvm::object::MachOObjectFile::end_load_commands(llvm::object::MachOObjectFile *this)
{
  return *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
}

double llvm::object::MachOObjectFile::getDylibIDLoadCommand@<D0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C59D9380(a3, a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getLibraryShortNameByIndex(llvm::object::MachOObjectFile *this, unsigned int a2, llvm::StringRef *a3)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t *v18;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 28) <= a2)
  {
LABEL_20:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  }
  else
  {
    v6 = (_QWORD *)((char *)this + 232);
    if (*((_DWORD *)this + 60))
    {
LABEL_3:
      *(_OWORD *)a3 = *(_OWORD *)(*v6 + 16 * a2);
      std::system_category();
      return 0;
    }
    v8 = 0;
    while (1)
    {
      sub_1C59DC3AC((uint64_t)&v23, (uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v8));
      if ((v25 & 1) != 0)
        break;
      if (v24 >= HIDWORD(v23))
        goto LABEL_20;
      v9 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v8);
      v10 = v9 + v24;
      v11 = v9 ? strlen((const char *)(v9 + v24)) : 0;
      if (v11 + v24 >= HIDWORD(v23))
        goto LABEL_20;
      v12 = llvm::object::MachOObjectFile::guessLibraryShortName(v10, v11, &v21, &v22);
      v14 = *((unsigned int *)this + 60);
      v15 = *((unsigned int *)this + 61);
      if (v13)
      {
        v16 = v12;
        v17 = v13;
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)this + 248, v14 + 1, 16);
          v14 = *((unsigned int *)this + 60);
        }
        v18 = (uint64_t *)(*v6 + 16 * v14);
        *v18 = (uint64_t)v16;
        v11 = v17;
      }
      else
      {
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)this + 248, v14 + 1, 16);
          v14 = *((unsigned int *)this + 60);
        }
        v18 = (uint64_t *)(*v6 + 16 * v14);
        *v18 = v10;
      }
      v18[1] = v11;
      ++*((_DWORD *)this + 60);
      if (++v8 >= (unint64_t)*((unsigned int *)this + 28))
        goto LABEL_3;
    }
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return 3;
}

uint64_t sub_1C59DC3AC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x8_t v10;
  unsigned int v11;
  int v12;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 24;
  v6 = v4 + *(_QWORD *)(a2 + 24);
  if (v4 <= a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v14 = "Structure read out-of-range";
    v15 = 259;
    result = sub_1C59D7FE0(&v16, (uint64_t *)&v14);
    *(_BYTE *)(v3 + 24) |= 1u;
    *(_QWORD *)v3 = v16;
  }
  else
  {
    v9 = *(int8x16_t *)a3;
    v10 = *(int8x8_t *)(a3 + 16);
    v11 = *(_DWORD *)(a2 + 8);
    v7 = v11 >= 0x13;
    v8 = v11 == 19;
    v12 = (1 << v11) & 0xAAC00;
    if ((v8 || !v7) && v12 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32_s8(v10);
    }
    *(_BYTE *)(result + 24) &= ~1u;
    *(int8x16_t *)result = v9;
    *(int8x8_t *)(result + 16) = v10;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getLibraryNameByIndex(llvm::object::MachOObjectFile *this, unsigned int a2, llvm::StringRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_DWORD *)this + 28) <= a2)
    goto LABEL_8;
  v5 = a2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_1C59D9380((uint64_t)&v11, (uint64_t)this, *(__int128 **)(*((_QWORD *)this + 13) + 8 * a2));
  if (v12 >= HIDWORD(v11))
    goto LABEL_8;
  v6 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v5);
  v7 = v6 + v12;
  v8 = v6 ? strlen((const char *)(v6 + v12)) : 0;
  if (v8 + v12 >= HIDWORD(v11))
  {
LABEL_8:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    return 3;
  }
  else
  {
    *(_QWORD *)a3 = v7;
    *((_QWORD *)a3 + 1) = v8;
    std::system_category();
    return 0;
  }
}

uint64_t llvm::object::MachOObjectFile::getLibraryCount(llvm::object::MachOObjectFile *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t llvm::object::MachOObjectFile::getRelocationRelocatedSection(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::symbol_begin(llvm::object::MachOObjectFile *this)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_1C59D9380((uint64_t)&v5, (uint64_t)this, v2);
  if (!*((_QWORD *)this + 34) || HIDWORD(v6) == 0)
    return 0;
  else
    return llvm::object::MachOObjectFile::getSymbolByIndex(this, 0);
}

uint64_t llvm::object::MachOObjectFile::getSymbolByIndex(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  __int128 *v2;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (!v2
    || ((v8 = 0, v9 = 0, v10 = 0, sub_1C59D9380((uint64_t)&v8, (uint64_t)this, v2), *((_QWORD *)this + 34))
      ? (v5 = HIDWORD(v9) > a2)
      : (v5 = 0),
        !v5))
  {
    llvm::report_fatal_error((llvm *)"Requested symbol index is out of range.", (const char *)1);
  }
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
    v6 = 16;
  else
    v6 = 12;
  return *((_QWORD *)this + 2) + v9 + v6 * a2;
}

uint64_t llvm::object::MachOObjectFile::symbol_end(llvm::object::MachOObjectFile *this)
{
  __int128 *v2;
  uint64_t result;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (!v2)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_1C59D9380((uint64_t)&v6, (uint64_t)this, v2);
  result = 0;
  if (*((_QWORD *)this + 34))
    v4 = HIDWORD(v7) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
      v5 = 16;
    else
      v5 = 12;
    return *((_QWORD *)this + 2) + (v7 + v5 * HIDWORD(v7));
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::section_begin(llvm::object::MachOObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::section_end(llvm::object::MachOObjectFile *this)
{
  return *((unsigned int *)this + 22);
}

void llvm::object::MachOObjectFile::tryGetCPUName(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  char v4;
  __int128 __p;
  char v6;
  const char *v7;

  v7 = 0;
  llvm::object::MachOObjectFile::getArchTriple(*((unsigned int *)this + 13), 0, *((_DWORD *)this + 14) & 0xFFFFFF, &v7, &__p);
  if (v6 < 0)
    operator delete((void *)__p);
  if (v7)
  {
    v3 = strlen(v7);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v3;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
}

uint64_t llvm::object::MachOObjectFile::getArchTriple@<X0>(uint64_t this@<X0>, const char **a2@<X3>, unsigned int a3@<W1>, _QWORD *a4@<X2>, _OWORD *a5@<X8>)
{
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  __int16 v24;

  if (a4)
    *a4 = 0;
  if (a2)
    *a2 = 0;
  if ((int)this <= 22)
  {
    if ((_DWORD)this == 7)
    {
      v9 = a3 & 0xFFFFFF;
      if ((a3 & 0xFFFFFF) == 5)
      {
        if (a2)
          *a2 = "i586";
        v6 = "i586-apple-darwin";
        goto LABEL_542;
      }
      if (v9 == 4)
      {
        if (a2)
          *a2 = "i486";
        v6 = "i486-apple-darwin";
        goto LABEL_542;
      }
      if (v9 == 3)
      {
        if (a2)
          *a2 = "i386";
        v6 = "i386-apple-darwin";
        goto LABEL_542;
      }
    }
    else
    {
      if ((_DWORD)this == 12)
      {
        switch(a3 & 0xFFFFFF)
        {
          case 5u:
            if (a2)
              *a2 = "armv4t";
            v6 = "armv4t-apple-darwin";
            goto LABEL_542;
          case 6u:
            if (a2)
              *a2 = "armv6";
            v6 = "armv6-apple-darwin";
            goto LABEL_542;
          case 7u:
            if (a2)
              *a2 = "armv5e";
            v6 = "armv5e-apple-darwin";
            goto LABEL_542;
          case 8u:
            if (a2)
              *a2 = "xscale";
            v6 = "xscale-apple-darwin";
            goto LABEL_542;
          case 9u:
            if (a2)
              *a2 = "armv7";
            v6 = "armv7-apple-darwin";
            goto LABEL_542;
          case 0xBu:
            if (a4)
              *a4 = "cortex-a7";
            if (a2)
              *a2 = "armv7s";
            v6 = "armv7s-apple-darwin";
            goto LABEL_542;
          case 0xCu:
            if (a4)
              *a4 = "cortex-a7";
            if (a2)
              *a2 = "armv7k";
            v6 = "armv7k-apple-darwin";
            goto LABEL_542;
          case 0xEu:
            if (a4)
              *a4 = "cortex-m0";
            if (a2)
              *a2 = "armv6m";
            v6 = "armv6m-apple-darwin";
            goto LABEL_542;
          case 0xFu:
            if (a4)
              *a4 = "cortex-m3";
            if (a2)
              *a2 = "armv7m";
            v6 = "thumbv7m-apple-darwin";
            goto LABEL_542;
          case 0x10u:
            if (a4)
              *a4 = "cortex-m4";
            if (a2)
              *a2 = "armv7em";
            v6 = "thumbv7em-apple-darwin";
            goto LABEL_542;
          default:
            goto LABEL_248;
        }
      }
      if ((_DWORD)this == 18 && (a3 & 0xFFFFFF) == 0)
      {
        if (a2)
          *a2 = "ppc";
        v6 = "ppc-apple-darwin";
        goto LABEL_542;
      }
    }
LABEL_248:
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
    return this;
  }
  switch((int)this)
  {
    case 16777223:
      if ((a3 & 0xFFFFFF) == 8)
      {
        if (a2)
          *a2 = "x86_64h";
        v6 = "x86_64h-apple-darwin";
      }
      else
      {
        if ((a3 & 0xFFFFFF) != 3)
          goto LABEL_248;
        if (a2)
          *a2 = "x86_64";
        v6 = "x86_64-apple-darwin";
      }
      break;
    case 16777224:
    case 16777225:
    case 16777226:
    case 16777227:
    case 16777229:
    case 16777230:
    case 16777231:
    case 16777232:
    case 16777233:
      goto LABEL_248;
    case 16777228:
      if ((a3 & 0xFFFFFF) == 2)
      {
        if (a4)
          *a4 = "apple-a12";
        if (a2)
          *a2 = "arm64e";
        v6 = "arm64e-apple-darwin";
      }
      else
      {
        if ((a3 & 0xFFFFFF) != 0)
          goto LABEL_248;
        if (a4)
          *a4 = "cyclone";
        if (a2)
          *a2 = "arm64";
        v6 = "arm64-apple-darwin";
      }
      break;
    case 16777234:
      if ((a3 & 0xFFFFFF) != 0)
        goto LABEL_248;
      if (a2)
        *a2 = "ppc64";
      v6 = "ppc64-apple-darwin";
      break;
    case 16777235:
      switch(a3 & 0xF)
      {
        case 0u:
          v10 = (a3 >> 4);
          if (v10 == 2)
          {
            if (a4)
              *a4 = "gx2-b0";
            if (a2)
              *a2 = "applegpu_gx2";
            v6 = "applegpu_gx2-apple-ios";
          }
          else if (v10 == 1)
          {
            if (a4)
              *a4 = "gx2-a0";
            if (a2)
              *a2 = "gx2_a0";
            v6 = "gx2_a0-apple-ios";
          }
          else
          {
            v6 = "agx0-apple-ios";
          }
          goto LABEL_542;
        case 1u:
          switch((a3 >> 4))
          {
            case 1u:
              if (a4)
                *a4 = "g4p-b1";
              if (a2)
                *a2 = "applegpu_g4p";
              v6 = "applegpu_g4p-apple-ios";
              break;
            case 2u:
              if (a4)
                *a4 = "g4g-a0";
              if (a2)
                *a2 = "g4g_a0";
              v6 = "g4g_a0-apple-ios";
              break;
            case 3u:
              if (a4)
                *a4 = "g4g-a1";
              if (a2)
                *a2 = "applegpu_g4g";
              v6 = "applegpu_g4g-apple-ios";
              break;
            case 4u:
              if (a4)
                *a4 = "g5p-c0";
              if (a2)
                *a2 = "applegpu_g5p";
              v6 = "applegpu_g5p-apple-ios";
              break;
            case 5u:
              if (a4)
                *a4 = "g9p-a0";
              if (a2)
                *a2 = "applegpu_g9p";
              v6 = "applegpu_g9p-apple-ios";
              break;
            case 6u:
              if (a4)
                *a4 = "g9g-a0";
              if (a2)
                *a2 = "applegpu_g9g";
              v6 = "applegpu_g9g-apple-ios";
              break;
            default:
              v6 = "agx1-apple-ios";
              break;
          }
          goto LABEL_542;
        case 2u:
          switch((a3 >> 4))
          {
            case 2u:
              if (a4)
                *a4 = "g10p-b0";
              if (a2)
                *a2 = "applegpu_g10p";
              v6 = "applegpu_g10p-apple-ios";
              break;
            case 3u:
            case 0xAu:
            case 0xBu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x15u:
            case 0x1Cu:
            case 0x1Du:
              goto LABEL_406;
            case 4u:
              if (a4)
                *a4 = "g11m-a0";
              if (a2)
                *a2 = "g11m_a0";
              v6 = "g11m_a0-apple-ios";
              break;
            case 5u:
              if (a4)
                *a4 = "g11m-b0";
              if (a2)
                *a2 = "applegpu_g11m";
              v6 = "applegpu_g11m-apple-ios";
              break;
            case 6u:
              if (a4)
                *a4 = "g11p-a0";
              if (a2)
                *a2 = "g11p_a0";
              v6 = "g11p_a0-apple-ios";
              break;
            case 7u:
              if (a4)
                *a4 = "g11p-b0";
              if (a2)
                *a2 = "applegpu_g11p";
              v6 = "applegpu_g11p-apple-ios";
              break;
            case 8u:
              if (a4)
                *a4 = "g11g-a0";
              if (a2)
                *a2 = "g11g_a0";
              v6 = "g11g_a0-apple-ios";
              break;
            case 9u:
              if (a4)
                *a4 = "g11g-b0";
              if (a2)
                *a2 = "applegpu_g11g";
              v6 = "applegpu_g11g-apple-ios";
              break;
            case 0xCu:
              if (a4)
                *a4 = "g12p-a0";
              if (a2)
                *a2 = "g12p_a0";
              v6 = "g12p_a0-apple-ios";
              break;
            case 0xDu:
              if (a4)
                *a4 = "g12p-b0";
              if (a2)
                *a2 = "applegpu_g12p";
              v6 = "applegpu_g12p-apple-ios";
              break;
            case 0x11u:
              if (a4)
                *a4 = "g13p-a0";
              if (a2)
                *a2 = "g13p_a0";
              v6 = "g13p_a0-apple-ios";
              break;
            case 0x12u:
              if (a4)
                *a4 = "g13p-b0";
              if (a2)
                *a2 = "applegpu_g13p";
              v6 = "applegpu_g13p-apple-ios";
              break;
            case 0x13u:
              if (a4)
                *a4 = "g13g-a0";
              if (a2)
                *a2 = "g13g_a0";
              v6 = "g13g_a0-apple-ios";
              break;
            case 0x14u:
              if (a4)
                *a4 = "g13g-b0";
              if (a2)
                *a2 = "applegpu_g13g";
              v6 = "applegpu_g13g-apple-ios";
              break;
            case 0x16u:
              if (a4)
                *a4 = "g14p-a0";
              if (a2)
                *a2 = "g14p_a0";
              v6 = "g14p_a0-apple-ios";
              break;
            case 0x17u:
              if (a4)
                *a4 = "g14p-b0";
              if (a2)
                *a2 = "applegpu_g14p";
              v6 = "applegpu_g14p-apple-ios";
              break;
            case 0x18u:
              if (a4)
                *a4 = "g14g-a0";
              if (a2)
                *a2 = "g14g_a0";
              v6 = "g14g_a0-apple-ios";
              break;
            case 0x19u:
              if (a4)
                *a4 = "g14g-b0";
              if (a2)
                *a2 = "applegpu_g14g";
              v6 = "applegpu_g14g-apple-ios";
              break;
            case 0x1Au:
              if (a4)
                *a4 = "g14s-a0";
              if (a2)
                *a2 = "g14s_a0";
              v6 = "g14s_a0-apple-ios";
              break;
            case 0x1Bu:
              if (a4)
                *a4 = "g14s-b0";
              if (a2)
                *a2 = "applegpu_g14s";
              v6 = "applegpu_g14s-apple-ios";
              break;
            case 0x1Eu:
              if (a4)
                *a4 = "g14d-a0";
              if (a2)
                *a2 = "g14d_a0";
              v6 = "g14d_a0-apple-ios";
              break;
            case 0x1Fu:
              if (a4)
                *a4 = "g14d-b0";
              if (a2)
                *a2 = "applegpu_g14d";
              v6 = "applegpu_g14d-apple-ios";
              break;
            case 0x20u:
              if (a4)
                *a4 = "g13s-a0";
              if (a2)
                *a2 = "g13s_a0";
              v6 = "g13s_a0-apple-ios";
              break;
            case 0x21u:
              if (a4)
                *a4 = "g13s-b0";
              if (a2)
                *a2 = "applegpu_g13s";
              v6 = "applegpu_g13s-apple-ios";
              break;
            case 0x22u:
              if (a4)
                *a4 = "g13c-a0";
              if (a2)
                *a2 = "g13c_a0";
              v6 = "g13c_a0-apple-ios";
              break;
            case 0x23u:
              if (a4)
                *a4 = "g13c-b0";
              if (a2)
                *a2 = "applegpu_g13c";
              v6 = "applegpu_g13c-apple-ios";
              break;
            case 0x24u:
              if (a4)
                *a4 = "g13d-a0";
              if (a2)
                *a2 = "g13d_a0";
              v6 = "g13d_a0-apple-ios";
              break;
            case 0x25u:
              if (a4)
                *a4 = "g13d-b0";
              if (a2)
                *a2 = "applegpu_g13d";
              v6 = "applegpu_g13d-apple-ios";
              break;
            case 0x26u:
              if (a4)
                *a4 = "g15p-b0";
              if (a2)
                *a2 = "applegpu_g15p";
              v6 = "applegpu_g15p-apple-ios";
              break;
            default:
              if ((a3 >> 4) == 100)
              {
                if (a4)
                  *a4 = "g11g-a0";
                if (a2)
                  *a2 = "applegpu_g11g_8fstp";
                v6 = "applegpu_g11g_8fstp-apple-ios";
              }
              else
              {
LABEL_406:
                v6 = "agx2-apple-ios";
              }
              break;
          }
          goto LABEL_542;
        case 3u:
          switch((a3 >> 4))
          {
            case 4u:
              if (a4)
                *a4 = "g15g-a0";
              if (a2)
                *a2 = "g15g_a0";
              v6 = "g15g_a0-apple-ios";
              break;
            case 5u:
              if (a4)
                *a4 = "g15g-b0";
              if (a2)
                *a2 = "g15g_b0";
              v6 = "g15g_b0-apple-ios";
              break;
            case 6u:
              if (a4)
                *a4 = "g15s-a0";
              if (a2)
                *a2 = "g15s_a0";
              v6 = "g15s_a0-apple-ios";
              break;
            case 7u:
              if (a4)
                *a4 = "g15s-b0";
              if (a2)
                *a2 = "g15s_b0";
              v6 = "g15s_b0-apple-ios";
              break;
            case 0xEu:
              if (a4)
                *a4 = "g16p-a0";
              if (a2)
                *a2 = "g16p_a0";
              v6 = "g16p_a0-apple-ios";
              break;
            case 0xFu:
              if (a4)
                *a4 = "g16p-b0";
              if (a2)
                *a2 = "g16p_b0";
              v6 = "g16p_b0-apple-ios";
              break;
            case 0x10u:
              if (a4)
                *a4 = "g16g-a0";
              if (a2)
                *a2 = "g16g_a0";
              v6 = "g16g_a0-apple-ios";
              break;
            case 0x11u:
              if (a4)
                *a4 = "g15g-c0";
              if (a2)
                *a2 = "applegpu_g15g";
              v6 = "applegpu_g15g-apple-ios";
              break;
            case 0x14u:
              if (a4)
                *a4 = "g17p-a0";
              if (a2)
                *a2 = "applegpu_g17p";
              v6 = "applegpu_g17p-apple-ios";
              break;
            case 0x19u:
              if (a4)
                *a4 = "g16g-b0";
              if (a2)
                *a2 = "applegpu_g16g";
              v6 = "applegpu_g16g-apple-ios";
              break;
            case 0x1Au:
              if (a4)
                *a4 = "g15s-b1";
              if (a2)
                *a2 = "applegpu_g15s";
              v6 = "applegpu_g15s-apple-ios";
              break;
            case 0x1Bu:
              if (a4)
                *a4 = "g16p-b1";
              if (a2)
                *a2 = "applegpu_g16p";
              v6 = "applegpu_g16p-apple-ios";
              break;
            default:
              v6 = "agx3-apple-ios";
              break;
          }
          goto LABEL_542;
        default:
          goto LABEL_248;
      }
    case 16777236:
      v11 = a3 & 0xFFFFFF;
      if ((a3 & 0xFFFFFF) <= 0x1388)
      {
        switch(v11)
        {
          case 4000:
            if (a2)
              *a2 = "amdgpu_gfx600";
            v6 = "amdgpu_gfx600-apple-darwin";
            goto LABEL_542;
          case 4001:
            if (a2)
              *a2 = "amdgpu_gfx600_nwh";
            v6 = "amdgpu_gfx600_nwh-apple-darwin";
            goto LABEL_542;
          case 4002:
            if (a2)
              *a2 = "amdgpu_gfx701";
            v6 = "amdgpu_gfx701-apple-darwin";
            goto LABEL_542;
          case 4003:
            if (a2)
              *a2 = "amdgpu_gfx704";
            v6 = "amdgpu_gfx704-apple-darwin";
            goto LABEL_542;
          case 4004:
            if (a2)
              *a2 = "amdgpu_gfx803";
            v6 = "amdgpu_gfx803-apple-darwin";
            goto LABEL_542;
          case 4005:
            if (a2)
              *a2 = "amdgpu_gfx802";
            v6 = "amdgpu_gfx802-apple-darwin";
            goto LABEL_542;
          default:
            if (v11 != 5000)
              goto LABEL_248;
            if (a2)
              *a2 = "amdgpu_gfx900";
            v6 = "amdgpu_gfx900-apple-darwin";
            break;
        }
      }
      else
      {
        switch(v11)
        {
          case 6000:
            if (a2)
              *a2 = "amdgpu_gfx1010_nsgc";
            v6 = "amdgpu_gfx1010_nsgc-apple-darwin";
            goto LABEL_542;
          case 6001:
            if (a2)
              *a2 = "amdgpu_gfx1010";
            v6 = "amdgpu_gfx1010-apple-darwin";
            goto LABEL_542;
          case 6002:
            if (a2)
              *a2 = "amdgpu_gfx1011";
            v6 = "amdgpu_gfx1011-apple-darwin";
            goto LABEL_542;
          case 6003:
            if (a2)
              *a2 = "amdgpu_gfx1012";
            v6 = "amdgpu_gfx1012-apple-darwin";
            goto LABEL_542;
          case 6004:
            if (a2)
              *a2 = "amdgpu_gfx1030";
            v6 = "amdgpu_gfx1030-apple-darwin";
            goto LABEL_542;
          case 6005:
            if (a2)
              *a2 = "amdgpu_gfx1032";
            v6 = "amdgpu_gfx1032-apple-darwin";
            goto LABEL_542;
          default:
            if (v11 == 5001)
            {
              if (a2)
                *a2 = "amdgpu_gfx904";
              v6 = "amdgpu_gfx904-apple-darwin";
            }
            else
            {
              if (v11 != 5002)
                goto LABEL_248;
              if (a2)
                *a2 = "amdgpu_gfx906";
              v6 = "amdgpu_gfx906-apple-darwin";
            }
            break;
        }
      }
      break;
    case 16777237:
      v12 = a3 & 0xFFFFFF;
      if ((a3 & 0xFFFFFF) > 0x9501FF)
      {
        if ((a3 & 0xFFFFFF) <= 0x950203)
        {
          if (v12 == 9765376)
          {
            if (a2)
              *a2 = "intelgpu_kbl_gt2r0";
            v6 = "intelgpu_kbl_gt2r0-apple-darwin";
          }
          else
          {
            if (v12 != 9765378)
              goto LABEL_248;
            if (a2)
              *a2 = "intelgpu_kbl_gt2r2";
            v6 = "intelgpu_kbl_gt2r2-apple-darwin";
          }
        }
        else
        {
          switch(v12)
          {
            case 9765380:
              if (a2)
                *a2 = "intelgpu_kbl_gt2r4";
              v6 = "intelgpu_kbl_gt2r4-apple-darwin";
              break;
            case 9765633:
              if (a2)
                *a2 = "intelgpu_kbl_gt3r1";
              v6 = "intelgpu_kbl_gt3r1-apple-darwin";
              break;
            case 9765638:
              if (a2)
                *a2 = "intelgpu_kbl_gt3r6";
              v6 = "intelgpu_kbl_gt3r6-apple-darwin";
              break;
            default:
              goto LABEL_248;
          }
        }
      }
      else if ((a3 & 0xFFFFFF) <= 0x90309)
      {
        if (v12 == 590342)
        {
          if (a2)
            *a2 = "intelgpu_skl_gt2r6";
          v6 = "intelgpu_skl_gt2r6-apple-darwin";
        }
        else
        {
          if (v12 != 590343)
            goto LABEL_248;
          if (a2)
            *a2 = "intelgpu_skl_gt2r7";
          v6 = "intelgpu_skl_gt2r7-apple-darwin";
        }
      }
      else
      {
        switch(v12)
        {
          case 590602:
            if (a2)
              *a2 = "intelgpu_skl_gt3r10";
            v6 = "intelgpu_skl_gt3r10-apple-darwin";
            break;
          case 1115655:
            if (a2)
              *a2 = "intelgpu_icl_1x6x8r7";
            v6 = "intelgpu_icl_1x6x8r7-apple-darwin";
            break;
          case 1116167:
            if (a2)
              *a2 = "intelgpu_icl_1x8x8r7";
            v6 = "intelgpu_icl_1x8x8r7-apple-darwin";
            break;
          default:
            goto LABEL_248;
        }
      }
      break;
    case 16777238:
      switch(a3 & 0xFFFFFF)
      {
        case 1u:
          if (a2)
            *a2 = "nvidiagpu_gk";
          v6 = "nvidiagpu_gk-apple-darwin";
          goto LABEL_542;
        case 2u:
          if (a2)
            *a2 = "nvidiagpu_gm";
          v6 = "nvidiagpu_gm-apple-darwin";
          goto LABEL_542;
        case 3u:
          if (a2)
            *a2 = "nvidiagpu_gp";
          v6 = "nvidiagpu_gp-apple-darwin";
          goto LABEL_542;
        case 4u:
          if (a2)
            *a2 = "nvidiagpu_gv";
          v6 = "nvidiagpu_gv-apple-darwin";
          goto LABEL_542;
        default:
          goto LABEL_248;
      }
    case 16777239:
      goto LABEL_27;
    default:
      if ((_DWORD)this == 23)
      {
LABEL_27:
        switch(a3 & 0xFFFFFF)
        {
          case 1u:
            if (a2)
            {
              v7 = "air64_v16";
              if ((_DWORD)this == 23)
                v7 = "air32_v16";
              *a2 = v7;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v16-apple-darwin";
            else
              v8 = "air64_v16-apple-darwin";
            break;
          case 2u:
            if (a2)
            {
              v13 = "air64_v18";
              if ((_DWORD)this == 23)
                v13 = "air32_v18";
              *a2 = v13;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v18-apple-darwin";
            else
              v8 = "air64_v18-apple-darwin";
            break;
          case 3u:
            if (a2)
            {
              v14 = "air64_v111";
              if ((_DWORD)this == 23)
                v14 = "air32_v111";
              *a2 = v14;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v111-apple-darwin";
            else
              v8 = "air64_v111-apple-darwin";
            break;
          case 4u:
            if (a2)
            {
              v15 = "air64_v20";
              if ((_DWORD)this == 23)
                v15 = "air32_v20";
              *a2 = v15;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v20-apple-darwin";
            else
              v8 = "air64_v20-apple-darwin";
            break;
          case 5u:
            if (a2)
            {
              v16 = "air64_v21";
              if ((_DWORD)this == 23)
                v16 = "air32_v21";
              *a2 = v16;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v21-apple-darwin";
            else
              v8 = "air64_v21-apple-darwin";
            break;
          case 6u:
            if (a2)
            {
              v17 = "air64_v22";
              if ((_DWORD)this == 23)
                v17 = "air32_v22";
              *a2 = v17;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v22-apple-darwin";
            else
              v8 = "air64_v22-apple-darwin";
            break;
          case 7u:
            if (a2)
            {
              v18 = "air64_v23";
              if ((_DWORD)this == 23)
                v18 = "air32_v23";
              *a2 = v18;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v23-apple-darwin";
            else
              v8 = "air64_v23-apple-darwin";
            break;
          case 8u:
            if (a2)
            {
              v19 = "air64_v24";
              if ((_DWORD)this == 23)
                v19 = "air32_v24";
              *a2 = v19;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v24-apple-darwin";
            else
              v8 = "air64_v24-apple-darwin";
            break;
          case 9u:
            if (a2)
            {
              v20 = "air64_v25";
              if ((_DWORD)this == 23)
                v20 = "air32_v25";
              *a2 = v20;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v25-apple-darwin";
            else
              v8 = "air64_v25-apple-darwin";
            break;
          case 0xAu:
            if (a2)
            {
              v21 = "air64_v26";
              if ((_DWORD)this == 23)
                v21 = "air32_v26";
              *a2 = v21;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v26-apple-darwin";
            else
              v8 = "air64_v26-apple-darwin";
            break;
          case 0xBu:
            if (a2)
            {
              v22 = "air64_v27";
              if ((_DWORD)this == 23)
                v22 = "air32_v27";
              *a2 = v22;
            }
            HIBYTE(v24) = 1;
            if ((_DWORD)this == 23)
              v8 = "air32_v27-apple-darwin";
            else
              v8 = "air64_v27-apple-darwin";
            break;
          default:
            goto LABEL_248;
        }
        v23 = v8;
        LOBYTE(v24) = 3;
        return llvm::Triple::Triple((uint64_t)a5, (llvm::Twine *)&v23);
      }
      if ((_DWORD)this != 33554444 || (a3 & 0xFFFFFF) != 1)
        goto LABEL_248;
      if (a4)
        *a4 = "apple-s4";
      if (a2)
        *a2 = "arm64_32";
      v6 = "arm64_32-apple-darwin";
      break;
  }
LABEL_542:
  v23 = v6;
  v24 = 259;
  return llvm::Triple::Triple((uint64_t)a5, (llvm::Twine *)&v23);
}

void llvm::object::MachOObjectFile::getHostArch(uint64_t a1@<X8>)
{
  void *__p[2];
  char v4;
  void **v5;
  __int16 v6;

  llvm::sys::getDefaultTargetTriple((uint64_t)__p);
  v6 = 260;
  v5 = __p;
  llvm::Triple::Triple(a1, (llvm::Twine *)&v5);
  if (v4 < 0)
    operator delete(__p[0]);
}

BOOL llvm::object::MachOObjectFile::isValidArch(void *__s2, char *__n)
{
  uint64_t v4;
  char **v5;

  v4 = 0;
  v5 = &off_1E8189790;
  while ((&off_1E8189790)[v4 + 1] != __n)
  {
LABEL_5:
    v5 += 2;
    v4 += 2;
    if (v4 == 244)
    {
      v5 = off_1E8189F30;
      return (char *)v5 - (char *)&off_1E8189790 != 1952;
    }
  }
  if (__n)
  {
    if (!memcmp((&off_1E8189790)[v4], __s2, (size_t)__n))
      return (char *)v5 - (char *)&off_1E8189790 != 1952;
    goto LABEL_5;
  }
  v5 = &(&off_1E8189790)[v4];
  return (char *)v5 - (char *)&off_1E8189790 != 1952;
}

char **llvm::object::MachOObjectFile::getValidArchs(llvm::object::MachOObjectFile *this)
{
  return &off_1E8189790;
}

uint64_t llvm::object::MachOObjectFile::getArchTriple@<X0>(llvm::object::MachOObjectFile *this@<X0>, const char **a2@<X1>, _OWORD *a3@<X8>)
{
  return llvm::object::MachOObjectFile::getArchTriple(*((unsigned int *)this + 13), 0, *((_DWORD *)this + 14), a2, a3);
}

void llvm::object::MachOObjectFile::getTargetTriple(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  __int128 **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  __int16 v16;
  unsigned __int16 v17;
  __int16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  BOOL v23;
  std::string *v24;
  std::string::size_type v25;
  char *v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  int v30;
  void *v31;
  std::string *v32;
  size_t size;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string *v37;
  int v38;
  void *v39;
  std::string *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p[2];
  char v47;
  std::string v48;
  std::string v49;
  uint64_t v50;
  std::string __dst;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD v55[8];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getArchTriple(*((unsigned int *)this + 13), 0, *((_DWORD *)this + 14), 0, (_OWORD *)a2);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(a2 + 24), *(int32x4_t *)(a2 + 24)))) & 1) != 0
    || (!*(_DWORD *)(a2 + 40) ? (v4 = *(_DWORD *)(a2 + 44) == 0) : (v4 = 0), !v4))
  {
    v5 = *((unsigned int *)this + 34);
    if ((_DWORD)v5)
    {
      v6 = *((_QWORD *)this + 16);
      v7 = (_DWORD **)(v6 + 16 * v5);
      v8 = (__int128 **)(v6 + 8);
      v9 = 16 * v5;
      v10 = v9;
      do
      {
        if (*(_DWORD *)v8 == 50)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          sub_1C59D9380((uint64_t)&v43, (uint64_t)this, *(v8 - 1));
          v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
          v49.__r_.__value_.__r.__words[2] = 16;
          __asm { BR              X10 }
        }
        v8 += 2;
        v10 -= 16;
      }
      while (v10);
      v11 = (unsigned int *)(v6 + 8);
      while (1)
      {
        v12 = *v11;
        v11 += 4;
        v13 = (1 << v12) & 0x1803000000000;
        if (v12 <= 0x30 && v13 != 0)
          break;
        v9 -= 16;
        if (!v9)
          return;
      }
      v15 = sub_1C59DA608((uint64_t)this, *v7);
      v18 = v16;
      v52 = (char *)v55;
      v54 = 16;
      if (v15 > 46)
      {
        if (v15 == 47)
        {
          v55[0] = 1936684660;
          v19 = 4;
        }
        else
        {
          qmemcpy(v55, "watchos", 7);
          v19 = 7;
        }
      }
      else if (v15 == 36)
      {
        qmemcpy(v55, "macos", 5);
        v19 = 5;
      }
      else
      {
        qmemcpy(v55, "ios", 3);
        v19 = 3;
      }
      v53 = v19;
      v20 = HIBYTE(v16);
      v21 = v17;
      if (v17)
      {
        v22 = &v49.__r_.__value_.__s.__data_[21];
        do
        {
          *--v22 = (v21 % 0xA) | 0x30;
          v23 = v21 > 9;
          v21 /= 0xAuLL;
        }
        while (v23);
      }
      else
      {
        v22 = &v49.__r_.__value_.__s.__data_[20];
        v49.__r_.__value_.__s.__data_[20] = 48;
      }
      sub_1C4E61270(&v48, v22, &v49.__r_.__value_.__s.__data_[21], (char *)&v49.__r_.__value_.__r.__words[2] + 5 - v22);
      v24 = std::string::append(&v48, ".");
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (HIBYTE(v18))
      {
        v26 = &v49.__r_.__value_.__s.__data_[21];
        do
        {
          *--v26 = (v20 % 0xA) | 0x30;
          v23 = v20 > 9;
          v20 /= 0xAuLL;
        }
        while (v23);
      }
      else
      {
        v26 = &v49.__r_.__value_.__s.__data_[20];
        v49.__r_.__value_.__s.__data_[20] = 48;
      }
      sub_1C4E61270(__p, v26, &v49.__r_.__value_.__s.__data_[21], (char *)&v49.__r_.__value_.__r.__words[2] + 5 - v26);
      if (v47 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      if (v47 >= 0)
        v28 = v47 & 0x7F;
      else
        v28 = (std::string::size_type)__p[1];
      v29 = std::string::append(&__dst, (const std::string::value_type *)v27, v28);
      v49 = *v29;
      v29->__r_.__value_.__r.__words[0] = 0;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v30 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
      v31 = (void *)v49.__r_.__value_.__r.__words[0];
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v49;
      else
        v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v49.__r_.__value_.__l.__size_;
      v34 = v53;
      if (v54 < v53 + size)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v52, v55, v53 + size, 1);
        v34 = v53;
        if (!size)
        {
LABEL_50:
          v53 = v34 + size;
          if (v30 < 0)
            operator delete(v31);
          if (v47 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          v35 = v18;
          if (!(_BYTE)v18)
            goto LABEL_74;
          v36 = 0;
          do
          {
            *((_BYTE *)&v49.__r_.__value_.__r.__words[2] + v36-- + 4) = (v35 % 0xA) | 0x30;
            v23 = v35 > 9;
            v35 /= 0xAuLL;
          }
          while (v23);
          sub_1C4E61270(&__dst, (char *)&v49.__r_.__value_.__r.__words[2] + v36 + 5, &v49.__r_.__value_.__s.__data_[21], -v36);
          v37 = std::string::insert(&__dst, 0, ".");
          v49 = *v37;
          v37->__r_.__value_.__r.__words[0] = 0;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
          v39 = (void *)v49.__r_.__value_.__r.__words[0];
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v49;
          else
            v40 = (std::string *)v49.__r_.__value_.__r.__words[0];
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = *((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x7F;
          else
            v41 = v49.__r_.__value_.__l.__size_;
          v42 = v53;
          if (v54 < v53 + v41)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v52, v55, v53 + v41, 1);
            v42 = v53;
            if (!v41)
              goto LABEL_70;
          }
          else if (!v41)
          {
LABEL_70:
            v53 = v42 + v41;
            if (v38 < 0)
              operator delete(v39);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_74:
            if (v52 != (char *)v55)
              free(v52);
            return;
          }
          memcpy(&v52[v42], v40, v41);
          v42 = v53;
          goto LABEL_70;
        }
      }
      else if (!size)
      {
        goto LABEL_50;
      }
      memcpy(&v52[v34], v32, size);
      v34 = v53;
      goto LABEL_50;
    }
  }
}

double llvm::object::MachOObjectFile::getBuildVersionLoadCommand@<D0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C59D9380(a3, a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getVersionMinLoadCommand(uint64_t a1, _DWORD **a2)
{
  return sub_1C59DA608(a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::section_rel_begin(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  return (*(uint64_t (**)(llvm::object::MachOObjectFile *, _QWORD))(*(_QWORD *)this + 264))(this, a2);
}

uint64_t llvm::object::MachOObjectFile::section_rel_end(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  return (*(uint64_t (**)(llvm::object::MachOObjectFile *, _QWORD))(*(_QWORD *)this + 272))(this, a2);
}

uint64_t llvm::object::MachOObjectFile::begin_dices(llvm::object::MachOObjectFile *this)
{
  _DWORD *v2;
  unsigned int v3;

  v2 = (_DWORD *)*((_QWORD *)this + 36);
  if (!v2)
    return 0;
  sub_1C59DA608((uint64_t)this, v2);
  return *((_QWORD *)this + 2) + v3;
}

uint64_t llvm::object::MachOObjectFile::getDataInCodeLoadCommand(llvm::object::MachOObjectFile *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 36);
  if (v1)
    return sub_1C59DA608((uint64_t)this, v1);
  else
    return 0x1000000029;
}

uint64_t llvm::object::MachOObjectFile::end_dices(llvm::object::MachOObjectFile *this)
{
  _DWORD *v2;
  int v3;
  int v4;

  v2 = (_DWORD *)*((_QWORD *)this + 36);
  if (!v2)
    return 0;
  sub_1C59DA608((uint64_t)this, v2);
  return *((_QWORD *)this + 2) + (v4 + v3);
}

double llvm::object::ExportEntry::ExportEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a1 + 56;
  *(_OWORD *)(a1 + 40) = xmmword_1C64638F0;
  *(_QWORD *)(a1 + 312) = a1 + 328;
  *(_QWORD *)&result = 0x1000000000;
  *(_QWORD *)(a1 + 320) = 0x1000000000;
  *(_BYTE *)(a1 + 1352) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a1 + 56;
  *(_OWORD *)(a1 + 40) = xmmword_1C64638F0;
  *(_QWORD *)(a1 + 312) = a1 + 328;
  *(_QWORD *)&result = 0x1000000000;
  *(_QWORD *)(a1 + 320) = 0x1000000000;
  *(_BYTE *)(a1 + 1352) = 0;
  return result;
}

void *llvm::object::ExportEntry::moveToFirst(llvm::object::ExportEntry *this)
{
  _QWORD *v2;
  void *result;
  unint64_t v4;

  v2 = *(_QWORD **)this;
  result = (void *)llvm::object::ExportEntry::pushNode(this, 0);
  if (**(_QWORD **)this)
  {
LABEL_5:
    if (!v2)
      return result;
    goto LABEL_6;
  }
  v4 = *((_QWORD *)this + 39) + ((unint64_t)*((unsigned int *)this + 80) << 6);
  if (*(_BYTE *)(v4 - 4) || *(_DWORD *)(v4 - 16))
  {
    result = llvm::object::ExportEntry::pushDownUntilBottom((_QWORD **)this);
    goto LABEL_5;
  }
  *((_DWORD *)this + 80) = 0;
  *((_BYTE *)this + 1352) = 1;
  if (!v2)
    return result;
LABEL_6:
  if (!*v2)
    *v2 = 0;
  return result;
}

const char *llvm::object::ExportEntry::pushNode(llvm::object::ExportEntry *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  const char *result;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  const char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  const char *v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  int v63;
  char v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  const char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 *v76;
  int v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  char *v92;
  unint64_t v93;
  BOOL v94;
  char *v95;
  unsigned __int8 *v96;
  uint64_t v97[2];
  unint64_t v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101[2];
  const char *v102;
  __int16 v103;
  uint64_t v104[2];
  const char *v105;
  __int16 v106;
  _QWORD v107[2];
  const char *v108;
  __int16 v109;
  uint64_t v110[2];
  const char *v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _OWORD v116[3];
  uint64_t v117;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v117 = a2;
  v6 = *(_QWORD **)this;
  v8 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v9 = v8 + a2;
  v114 = v8 + a2;
  memset(v116, 0, 45);
  v10 = v8 + v7;
  v11 = v8 + v7;
  v12 = v7 - a2;
  v13 = "malformed uleb128, extends past end";
  result = "uleb128 too big for uint64";
  v15 = v8 + a2;
  do
  {
    if (v12 == v3)
      goto LABEL_13;
    v16 = *(_BYTE *)(v9 + v3);
    v17 = v16 & 0x7F;
    if (v5 >= 0x40 && (v16 & 0x7F) != 0)
    {
      v11 = v9 + v3;
      v13 = "uleb128 too big for uint64";
LABEL_13:
      v22 = v9 + (v11 - v9);
      if (v22 <= v10)
        v10 = v22;
      v115 = (_BYTE *)v10;
      v113 = 0;
      v23 = *(unsigned __int8 *)v13;
      v24 = "export info size ";
      if (!*v13)
        goto LABEL_141;
      v104[0] = (uint64_t)"export info size ";
      v105 = v13;
      goto LABEL_17;
    }
    if ((unint64_t)(v17 << v5) >> v5 != v17)
    {
      v11 = v15;
      v13 = "uleb128 too big for uint64";
      goto LABEL_13;
    }
    v4 += v17 << v5;
    v5 += 7;
    ++v15;
    ++v3;
  }
  while (v16 < 0);
  v18 = v9 + v3;
  if (v18 > v10)
    v18 = v10;
  v115 = (_BYTE *)v18;
  v113 = v4;
  BYTE12(v116[2]) = v4 != 0;
  v19 = (unsigned __int8 *)(v18 + v4);
  if (v18 + v4 > v10)
  {
    v101[0] = (uint64_t)"export info size: 0x";
    v102 = (const char *)&v113;
    v103 = 3587;
    v104[0] = (uint64_t)v101;
    v105 = " in export trie data at node: 0x";
    v106 = 770;
    v107[0] = v104;
    v108 = (const char *)&v117;
    v109 = 3586;
    v110[0] = (uint64_t)v107;
    v111 = " too big and extends past end of trie data";
    v112 = 770;
    result = (const char *)sub_1C59D7FE0(v97, v110);
    v20 = *(uint64_t **)this;
    v21 = v97[0];
    goto LABEL_145;
  }
  if (!v4)
    goto LABEL_122;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (v8 + a2 + (unint64_t)v3 >= v10)
    v29 = v10;
  else
    v29 = v8 + a2 + v3;
  v30 = "malformed uleb128, extends past end";
  v31 = v18;
  while (2)
  {
    if (v29 + v26 == v10)
      goto LABEL_39;
    v32 = *(_BYTE *)(v29 + v26);
    v33 = v32 & 0x7F;
    if (v28 >= 0x40 && (v32 & 0x7F) != 0)
    {
      v35 = v8 + a2 + v3;
      if (v35 >= v10)
        LODWORD(v35) = v10;
      v11 = v35 + v26;
      v30 = "uleb128 too big for uint64";
      goto LABEL_39;
    }
    if ((unint64_t)(v33 << v28) >> v28 != v33)
    {
      v11 = v31;
      v30 = "uleb128 too big for uint64";
LABEL_39:
      v36 = v18 + (v11 - v18);
      if (v36 <= v10)
        v10 = v36;
      v115 = (_BYTE *)v10;
      *(_QWORD *)&v116[0] = 0;
      v23 = *(unsigned __int8 *)v30;
      v24 = "flags ";
      if (!*v30)
        goto LABEL_141;
      v104[0] = (uint64_t)"flags ";
      v105 = v30;
      goto LABEL_17;
    }
    v27 += v33 << v28;
    v28 += 7;
    ++v31;
    ++v26;
    if (v32 < 0)
      continue;
    break;
  }
  v34 = v18 + v26;
  if (v34 > v10)
    v34 = v10;
  v115 = (_BYTE *)v34;
  *(_QWORD *)&v116[0] = v27;
  if ((v27 & 1) != 0 && (v27 & 3) != 1)
  {
    v97[0] = (uint64_t)"unsupported exported symbol kind: ";
    v98 = v27 & 3;
    v99 = 2307;
    v101[0] = (uint64_t)v97;
    v102 = " in flags: 0x";
    v103 = 770;
    v104[0] = (uint64_t)v101;
    v105 = (const char *)v116;
    goto LABEL_33;
  }
  if ((v27 & 8) != 0)
  {
    result = 0;
    v57 = 0;
    v58 = 0;
    *((_QWORD *)&v116[0] + 1) = 0;
    v59 = v8 + a2 + v3;
    if (v59 >= v10)
      v59 = v10;
    v60 = v59 + v26;
    if (v10 >= v60)
      v61 = v60;
    else
      v61 = v10;
    v62 = "malformed uleb128, extends past end";
    v63 = v34;
    while (1)
    {
      if (&result[v61] == (const char *)v10)
        goto LABEL_108;
      v64 = result[v61];
      v65 = v64 & 0x7F;
      if (v58 >= 0x40 && (v64 & 0x7F) != 0)
        break;
      if ((unint64_t)(v65 << v58) >> v58 != v65)
      {
        v11 = v63;
        v62 = "uleb128 too big for uint64";
        goto LABEL_108;
      }
      v57 += v65 << v58;
      v58 += 7;
      ++v63;
      ++result;
      if ((v64 & 0x80) == 0)
      {
        v66 = (unsigned __int8 *)(v34 + result);
        if ((unint64_t)v66 > v10)
          v66 = (unsigned __int8 *)v10;
        v115 = v66;
        *(_QWORD *)&v116[1] = v57;
        v67 = *((_QWORD *)this + 1);
        if (v67)
        {
          if (v57 > 0)
          {
            v68 = (const char *)*(unsigned int *)(v67 + 112);
            if (v57 > (unint64_t)v68)
            {
              v97[0] = (uint64_t)"bad library ordinal: ";
              v98 = v57;
              v99 = 2307;
              v101[0] = (uint64_t)v97;
              v102 = " (max ";
              v103 = 770;
              v104[0] = (uint64_t)v101;
              v105 = v68;
              v106 = 2306;
              v107[0] = v104;
              v108 = ") in export trie data at node: 0x";
              v109 = 770;
              v110[0] = (uint64_t)v107;
              v111 = (const char *)&v117;
              v112 = 3586;
              goto LABEL_34;
            }
          }
        }
        *((_QWORD *)&v116[1] + 1) = v66;
        v46 = v66 + 1;
        if (!*v66)
          goto LABEL_119;
        if ((unint64_t)v46 >= v10)
        {
          v107[0] = "import name of re-export in export trie data at node: 0x";
          v108 = (const char *)&v117;
          v109 = 3587;
          v79 = " starts past end of trie data";
        }
        else
        {
          if (!*v46)
            goto LABEL_118;
          do
          {
            if ((unint64_t)v46 >= v10)
            {
              v78 = "import name of re-export in export trie data at node: 0x";
              goto LABEL_125;
            }
          }
          while (*++v46);
          v66 = v46 - 1;
LABEL_118:
          v46 = v66 + 2;
LABEL_119:
          v115 = v46;
LABEL_120:
          if (v19 != v46)
          {
            v98 = (unint64_t)&v113;
            v99 = 3587;
            v101[0] = (uint64_t)v97;
            v102 = " where actual size was: 0x";
            v103 = 770;
            v96 = &v46[-v18];
            v97[0] = (uint64_t)"inconsistant export info size: 0x";
            v104[0] = (uint64_t)v101;
            v105 = (const char *)&v96;
LABEL_33:
            v106 = 3586;
            v107[0] = v104;
            v108 = " in export trie data at node: 0x";
            v109 = 770;
            v110[0] = (uint64_t)v107;
            v111 = (const char *)&v117;
            v112 = 3586;
LABEL_34:
            result = (const char *)sub_1C59D7FE0(&v100, v110);
            v20 = *(uint64_t **)this;
            v21 = v100;
            goto LABEL_145;
          }
LABEL_122:
          v77 = *v19;
          v76 = v19 + 1;
          LODWORD(v116[2]) = v77;
          if (!v77 || (unint64_t)v76 < v10)
          {
            v115 = v76;
            v80 = *((_QWORD *)this + 5);
            DWORD1(v116[2]) = 0;
            DWORD2(v116[2]) = v80;
            v81 = *((unsigned int *)this + 80);
            v82 = *((_QWORD *)this + 39);
            v83 = (char *)&v114;
            if (v81 >= *((_DWORD *)this + 81))
            {
              v92 = (char *)this + 312;
              v93 = v81 + 1;
              v94 = v82 + (v81 << 6) > (unint64_t)&v114;
              if (v82 <= (unint64_t)&v114 && v94)
              {
                v95 = (char *)&v114 - v82;
                result = (const char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v92, (uint64_t)this + 328, v93, 64);
                v82 = *((_QWORD *)this + 39);
                v83 = &v95[v82];
              }
              else
              {
                result = (const char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v92, (uint64_t)this + 328, v93, 64);
                v82 = *((_QWORD *)this + 39);
                v83 = (char *)&v114;
              }
            }
            v84 = (_OWORD *)(v82 + ((unint64_t)*((unsigned int *)this + 80) << 6));
            v85 = *(_OWORD *)v83;
            v86 = *((_OWORD *)v83 + 1);
            v87 = *((_OWORD *)v83 + 3);
            v84[2] = *((_OWORD *)v83 + 2);
            v84[3] = v87;
            *v84 = v85;
            v84[1] = v86;
            ++*((_DWORD *)this + 80);
            goto LABEL_146;
          }
          v78 = "byte for count of childern in export trie data at node: 0x";
LABEL_125:
          v107[0] = v78;
          v108 = (const char *)&v117;
          v109 = 3587;
          v79 = " extends past end of trie data";
        }
        v110[0] = (uint64_t)v107;
        v111 = v79;
        v112 = 770;
        result = (const char *)sub_1C59D7FE0(v104, v110);
        v20 = *(uint64_t **)this;
        v21 = v104[0];
        goto LABEL_145;
      }
    }
    v71 = v8 + a2 + v3;
    if (v71 >= v10)
      v71 = v10;
    v72 = v71 + v26;
    if (v10 < v72)
      LODWORD(v72) = v10;
    v11 = v72 + (_DWORD)result;
    v62 = "uleb128 too big for uint64";
LABEL_108:
    v74 = v34 + (v11 - v34);
    if (v74 <= v10)
      v10 = v74;
    v115 = (_BYTE *)v10;
    *(_QWORD *)&v116[1] = 0;
    v23 = *(unsigned __int8 *)v62;
    v24 = "dylib ordinal of re-export ";
    if (!*v62)
      goto LABEL_141;
    v104[0] = (uint64_t)"dylib ordinal of re-export ";
    v105 = v62;
LABEL_17:
    v106 = 771;
    v25 = 2;
    goto LABEL_142;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = v8 + a2 + v3;
  if (v40 >= v10)
    v40 = v10;
  v41 = v40 + v26;
  if (v10 >= v41)
    v42 = v41;
  else
    v42 = v10;
  result = "malformed uleb128, extends past end";
  v43 = v34;
  while (2)
  {
    if (v42 + v37 == v10)
      goto LABEL_103;
    v44 = *(_BYTE *)(v42 + v37);
    v45 = v44 & 0x7F;
    if (v39 >= 0x40 && (v44 & 0x7F) != 0)
    {
      v69 = v8 + a2 + v3;
      if (v69 >= v10)
        v69 = v10;
      v70 = v69 + v26;
      if (v10 < v70)
        LODWORD(v70) = v10;
      v11 = v70 + v37;
      result = "uleb128 too big for uint64";
LABEL_103:
      v73 = v34 + (v11 - v34);
      if (v73 <= v10)
        v10 = v73;
      v115 = (_BYTE *)v10;
      *((_QWORD *)&v116[0] + 1) = 0;
      v23 = *(unsigned __int8 *)result;
      v24 = "address ";
      if (!*result)
        goto LABEL_141;
      goto LABEL_106;
    }
    if ((unint64_t)(v45 << v39) >> v39 != v45)
    {
      v11 = v43;
      result = "uleb128 too big for uint64";
      goto LABEL_103;
    }
    v38 += v45 << v39;
    v39 += 7;
    ++v43;
    ++v37;
    if (v44 < 0)
      continue;
    break;
  }
  v46 = (unsigned __int8 *)(v34 + v37);
  if ((unint64_t)v46 > v10)
    v46 = (unsigned __int8 *)v10;
  v115 = v46;
  *((_QWORD *)&v116[0] + 1) = v38;
  if ((v27 & 0x10) == 0)
    goto LABEL_120;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = v8 + a2 + v3;
  if (v50 >= v10)
    v50 = v10;
  v51 = v50 + v26;
  if (v10 < v51)
    v51 = v10;
  v52 = v51 + v37;
  if (v10 >= v52)
    v53 = v52;
  else
    v53 = v10;
  result = "malformed uleb128, extends past end";
  v54 = (int)v46;
  while (v53 + v47 != v10)
  {
    v55 = *(_BYTE *)(v53 + v47);
    v56 = v55 & 0x7F;
    if (v49 >= 0x40 && (v55 & 0x7F) != 0)
    {
      v88 = v8 + a2 + v3;
      if (v88 >= v10)
        v88 = v10;
      v89 = v88 + v26;
      if (v10 < v89)
        v89 = v10;
      v90 = v89 + v37;
      if (v10 < v90)
        LODWORD(v90) = v10;
      v11 = v90 + v47;
      result = "uleb128 too big for uint64";
      break;
    }
    if ((unint64_t)(v56 << v49) >> v49 != v56)
    {
      v11 = v54;
      result = "uleb128 too big for uint64";
      break;
    }
    v48 += v56 << v49;
    v49 += 7;
    ++v54;
    ++v47;
    if ((v55 & 0x80) == 0)
    {
      if ((unint64_t)&v46[v47] <= v10)
        v46 += v47;
      else
        v46 = (unsigned __int8 *)v10;
      v115 = v46;
      *(_QWORD *)&v116[1] = v48;
      goto LABEL_120;
    }
  }
  v91 = &v46[v11 - (_DWORD)v46];
  if ((unint64_t)v91 <= v10)
    v10 = (unint64_t)v91;
  v115 = (_BYTE *)v10;
  *(_QWORD *)&v116[1] = 0;
  v23 = *(unsigned __int8 *)result;
  v24 = "resolver of stub and resolver ";
  if (*result)
  {
LABEL_106:
    v104[0] = (uint64_t)v24;
    v105 = result;
    goto LABEL_17;
  }
LABEL_141:
  v104[0] = (uint64_t)v24;
  v106 = 259;
  v25 = 3;
LABEL_142:
  if (v23)
    v24 = (const char *)v104;
  v107[0] = v24;
  v108 = " in export trie data at node: 0x";
  LOBYTE(v109) = v25;
  HIBYTE(v109) = 3;
  v110[0] = (uint64_t)v107;
  v111 = (const char *)&v117;
  v112 = 3586;
  result = (const char *)sub_1C59D7FE0(v101, v110);
  v20 = *(uint64_t **)this;
  v21 = v101[0];
LABEL_145:
  *v20 = v21;
  *((_DWORD *)this + 80) = 0;
  *((_BYTE *)this + 1352) = 1;
LABEL_146:
  if (v6)
  {
    if (!*v6)
      *v6 = 0;
  }
  return result;
}

uint64_t llvm::object::ExportEntry::moveToEnd(uint64_t this)
{
  *(_DWORD *)(this + 320) = 0;
  *(_BYTE *)(this + 1352) = 1;
  return this;
}

_QWORD **llvm::object::ExportEntry::pushDownUntilBottom(_QWORD **this)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char i;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  char *v17;
  char v18;
  uint64_t v19;
  const char *v20;
  char v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  __int16 v29;
  uint64_t *v30;
  uint64_t v31;
  const char *v32;
  int v33;
  const char *v34;
  char v35;
  uint64_t v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[2];
  const char *v40;
  __int16 v41;
  uint64_t v42[2];
  const char *v43;
  __int16 v44;
  uint64_t v45[2];
  const char *v46;
  __int16 v47;
  uint64_t v48;

  v1 = (uint64_t)this;
  v2 = this + 7;
  v3 = *this;
  v4 = this + 4;
  while (1)
  {
    v5 = *(_QWORD *)(v1 + 312) + ((unint64_t)*(unsigned int *)(v1 + 320) << 6);
    if (*(_DWORD *)(v5 - 12) >= *(_DWORD *)(v5 - 16))
      break;
    v6 = *(unsigned int *)(v5 - 8);
    v7 = *(_QWORD *)(v1 + 40);
    if (v7 != v6)
    {
      if (v7 <= v6)
      {
        if (*(_QWORD *)(v1 + 48) < v6)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v4, v2, *(unsigned int *)(v5 - 8), 1);
          v7 = *(_QWORD *)(v1 + 40);
        }
        if (v6 != v7)
          bzero((void *)(*v4 + v7), v6 - v7);
      }
      *(_QWORD *)(v1 + 40) = v6;
    }
    v8 = *(char **)(v5 - 56);
    for (i = *v8; *v8; i = *v8)
    {
      if ((unint64_t)v8 >= *(_QWORD *)(v1 + 16) + *(_QWORD *)(v1 + 24))
        break;
      if (v6 + 1 > *(_QWORD *)(v1 + 48))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v4, v2, v6 + 1, 1);
        v6 = *(_QWORD *)(v1 + 40);
      }
      *(_BYTE *)(*(_QWORD *)(v1 + 32) + v6) = i;
      v6 = *(_QWORD *)(v1 + 40) + 1;
      *(_QWORD *)(v1 + 40) = v6;
      v8 = (char *)(*(_QWORD *)(v5 - 56) + 1);
      *(_QWORD *)(v5 - 56) = v8;
    }
    v11 = *(_QWORD *)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 24);
    v12 = (char *)(v11 + v10);
    if ((unint64_t)v8 >= v11 + v10)
    {
      v36 = *(_QWORD *)(v5 - 64) - v11;
      v37[0] = "edge sub-string in export trie data at node: 0x";
      v37[2] = &v36;
      v38 = 3587;
      v39[0] = v37;
      v40 = " for child #";
      v29 = 770;
      v41 = 770;
      v32 = (const char *)*(unsigned int *)(v5 - 12);
      v42[0] = (uint64_t)v39;
      v43 = v32;
      v44 = 2306;
      v45[0] = (uint64_t)v42;
      v46 = " extends past end of trie data";
      goto LABEL_37;
    }
    v13 = 0;
    v14 = 0;
    v15 = v8 + 1;
    *(_QWORD *)(v5 - 56) = v15;
    v37[0] = 0;
    v16 = v10 + v11;
    v17 = v15;
    while (v17 != v12)
    {
      v18 = *v17;
      v19 = *v17 & 0x7F;
      if (v14 >= 0x40 && (*v17 & 0x7F) != 0 || (unint64_t)(v19 << v14) >> v14 != v19)
      {
        v21 = 0;
        v13 = 0;
        v20 = "uleb128 too big for uint64";
        goto LABEL_18;
      }
      v13 += v19 << v14;
      v14 += 7;
      ++v17;
      if ((v18 & 0x80) == 0)
      {
        v20 = 0;
        v21 = 1;
LABEL_18:
        v16 = (int)v17;
        goto LABEL_20;
      }
    }
    v21 = 0;
    v13 = 0;
    v20 = "malformed uleb128, extends past end";
LABEL_20:
    v22 = &v15[v16 - (_DWORD)v15];
    *(_QWORD *)(v5 - 56) = v22;
    v23 = (char *)(*(_QWORD *)(v1 + 16) + v10);
    if (v22 <= v23)
      v23 = v22;
    *(_QWORD *)(v5 - 56) = v23;
    v37[0] = v13;
    if ((v21 & 1) == 0)
    {
      v33 = *(unsigned __int8 *)v20;
      v34 = "child node offset ";
      if (*v20)
      {
        v39[0] = "child node offset ";
        v40 = v20;
        v41 = 771;
        v35 = 2;
      }
      else
      {
        v39[0] = "child node offset ";
        v41 = 259;
        v35 = 3;
      }
      if (v33)
        v34 = (const char *)v39;
      v42[0] = (uint64_t)v34;
      v43 = " in export trie data at node: 0x";
      LOBYTE(v44) = v35;
      HIBYTE(v44) = 3;
      v36 = *(_QWORD *)(v5 - 64) - *(_QWORD *)(v1 + 16);
      v28 = (const char *)&v36;
      goto LABEL_36;
    }
    v24 = *(unsigned int *)(v1 + 320);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD **)(v1 + 312);
      v26 = *(_QWORD *)(v1 + 16);
      v27 = v24 << 6;
      while (*v25 != v26 + v13)
      {
        v25 += 8;
        v27 -= 64;
        if (!v27)
          goto LABEL_27;
      }
      v36 = *(_QWORD *)(v5 - 64) - v26;
      v39[0] = "loop in childern in export trie data at node: 0x";
      v40 = (const char *)&v36;
      v41 = 3587;
      v42[0] = (uint64_t)v39;
      v43 = " back to node: 0x";
      v44 = 770;
      v28 = (const char *)v37;
LABEL_36:
      v45[0] = (uint64_t)v42;
      v46 = v28;
      v29 = 3586;
LABEL_37:
      v47 = v29;
      this = (_QWORD **)sub_1C59D7FE0(&v48, v45);
      v30 = *(uint64_t **)v1;
      v31 = v48;
LABEL_38:
      *v30 = v31;
      *(_DWORD *)(v1 + 320) = 0;
      *(_BYTE *)(v1 + 1352) = 1;
      goto LABEL_39;
    }
LABEL_27:
    ++*(_DWORD *)(v5 - 12);
    this = (_QWORD **)llvm::object::ExportEntry::pushNode((llvm::object::ExportEntry *)v1, v13);
    if (**(_QWORD **)v1)
      goto LABEL_39;
  }
  if (!*(_BYTE *)(v5 - 4))
  {
    v39[0] = *(_QWORD *)(v5 - 64) - *(_QWORD *)(v1 + 16);
    v45[0] = (uint64_t)"node is not an export node in export trie data at node: 0x";
    v46 = (const char *)v39;
    v47 = 3587;
    this = (_QWORD **)sub_1C59D7FE0(v42, v45);
    v30 = *(uint64_t **)v1;
    v31 = v42[0];
    goto LABEL_38;
  }
LABEL_39:
  if (v3)
  {
    if (!*v3)
      *v3 = 0;
  }
  return this;
}

uint64_t llvm::object::ExportEntry::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v6;
  size_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;

  v2 = *(unsigned __int8 *)(a1 + 1352);
  v3 = *(unsigned __int8 *)(a2 + 1352);
  if (v2 | v3)
    return v2 == v3;
  v6 = *(unsigned int *)(a1 + 320);
  if ((_DWORD)v6 != *(_DWORD *)(a2 + 320))
    return 0;
  v7 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) != v7 || v7 && memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), v7))
    return 0;
  if (!(_DWORD)v6)
    return 1;
  v9 = *(uint64_t **)(a1 + 312);
  v10 = *(uint64_t **)(a2 + 312);
  v11 = v6 - 1;
  do
  {
    v13 = *v9;
    v9 += 8;
    v12 = v13;
    v15 = *v10;
    v10 += 8;
    v14 = v15;
    v17 = v11-- != 0;
    result = v12 == v14;
  }
  while (v12 == v14 && v17);
  return result;
}

uint64_t llvm::object::ExportEntry::readULEB128(llvm::object::ExportEntry *this, char **a2, const char **a3)
{
  uint64_t result;
  const unsigned __int8 *v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  result = sub_1C4D62708(*a2, &v8, (char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)), a3);
  v6 = (const unsigned __int8 *)&(*a2)[v8];
  *a2 = (char *)v6;
  v7 = *((_QWORD *)this + 3);
  if ((unint64_t)v6 > *((_QWORD *)this + 2) + v7)
    v6 = (const unsigned __int8 *)(*((_QWORD *)this + 2) + v7);
  *a2 = (char *)v6;
  return result;
}

uint64_t llvm::object::ExportEntry::name(llvm::object::ExportEntry *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::object::ExportEntry::flags(llvm::object::ExportEntry *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 39) + ((unint64_t)*((unsigned int *)this + 80) << 6) - 48);
}

uint64_t llvm::object::ExportEntry::address(llvm::object::ExportEntry *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 39) + ((unint64_t)*((unsigned int *)this + 80) << 6) - 40);
}

uint64_t llvm::object::ExportEntry::other(llvm::object::ExportEntry *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 39) + ((unint64_t)*((unsigned int *)this + 80) << 6) - 32);
}

uint64_t llvm::object::ExportEntry::otherName(llvm::object::ExportEntry *this)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 39) + ((unint64_t)*((unsigned int *)this + 80) << 6);
  v2 = *(_QWORD *)(v1 - 24);
  if (v2)
    strlen(*(const char **)(v1 - 24));
  return v2;
}

uint64_t llvm::object::ExportEntry::nodeOffset(llvm::object::ExportEntry *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 39) + ((unint64_t)*((unsigned int *)this + 80) << 6) - 64)
                      - *((_DWORD *)this + 4));
}

double llvm::object::ExportEntry::NodeState::NodeState(llvm::object::ExportEntry::NodeState *this, const unsigned __int8 *a2)
{
  double result;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 45) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 45) = 0u;
  return result;
}

void llvm::object::ExportEntry::moveNext(llvm::object::ExportEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11[4];
  __int16 v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 39);
  v3 = *((unsigned int *)this + 80);
  v4 = v2 + (v3 << 6);
  if (*(_BYTE *)(v4 - 4))
  {
    v5 = v3 - 1;
    while (v5)
    {
      v6 = v2 + ((unint64_t)v5 << 6);
      if (*(_DWORD *)(v6 - 12) < *(_DWORD *)(v6 - 16))
      {
        *((_DWORD *)this + 80) = v5;
        llvm::object::ExportEntry::pushDownUntilBottom((_QWORD **)this);
        return;
      }
      --v5;
      if (*(_BYTE *)(v6 - 4))
      {
        *((_DWORD *)this + 80) = v5 + 1;
        v7 = *(unsigned int *)(v6 - 8);
        v8 = *((_QWORD *)this + 5);
        if (v8 != v7)
        {
          if (v8 <= v7)
          {
            v9 = (_QWORD *)((char *)this + 32);
            if (*((_QWORD *)this + 6) < v7)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)this + 32, (char *)this + 56, *(unsigned int *)(v6 - 8), 1);
              v8 = *((_QWORD *)this + 5);
            }
            if (v7 != v8)
              bzero((void *)(*v9 + v8), v7 - v8);
          }
          *((_QWORD *)this + 5) = v7;
        }
        return;
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(v4 - 64) - *((_QWORD *)this + 2);
    v11[0] = (uint64_t)"node is not an export node in export trie data at node: 0x";
    v11[2] = (uint64_t)&v10;
    v12 = 3587;
    sub_1C59D7FE0(&v13, v11);
    **(_QWORD **)this = v13;
  }
  *((_DWORD *)this + 80) = 0;
  *((_BYTE *)this + 1352) = 1;
}

void llvm::object::MachOObjectFile::exports(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  _BYTE v21[256];
  void *v22;
  uint64_t v23;
  _BYTE v24[817];
  char v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  __int128 v29;
  _BYTE v30[256];
  void *v31;
  uint64_t v32;
  _BYTE v33[1024];
  char v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  _BYTE v39[256];
  void *v40;
  uint64_t v41;
  _BYTE v42[1024];
  char v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  _BYTE v48[256];
  void *v49;
  uint64_t v50;
  _BYTE v51[1024];
  char v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  _BYTE v57[256];
  void *v58;
  uint64_t v59;
  _BYTE v60[1024];
  char v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  __int128 v65;
  _BYTE v66[256];
  void *v67;
  uint64_t v68;
  _BYTE v69[1024];
  char v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  __int128 v74;
  _BYTE v75[256];
  void *v76;
  uint64_t v77;
  _BYTE v78[1024];
  char v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  __int128 v83;
  _BYTE v84[256];
  void *v85;
  uint64_t v86;
  _BYTE v87[1024];
  char v88;
  uint64_t v89;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v4;
  v13 = v12;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v62 = v4;
  *((_QWORD *)&v62 + 1) = v5;
  *(_QWORD *)&v63 = v9;
  *((_QWORD *)&v63 + 1) = v7;
  v65 = xmmword_1C64638F0;
  v64 = v66;
  v67 = v69;
  v68 = 0x1000000000;
  v70 = 0;
  if (v7)
  {
    llvm::object::ExportEntry::moveToFirst((llvm::object::ExportEntry *)&v62);
    v14 = v65;
  }
  else
  {
    v14 = 0;
    v70 = 1;
  }
  *(_QWORD *)&v53 = v11;
  *((_QWORD *)&v53 + 1) = v6;
  *(_QWORD *)&v54 = v10;
  *((_QWORD *)&v54 + 1) = v8;
  v56 = xmmword_1C64638F0;
  v55 = v57;
  v58 = v60;
  v59 = 0x1000000000;
  v61 = 1;
  v35 = v62;
  v36 = v63;
  v37 = v39;
  v38 = xmmword_1C64638F0;
  if (v14)
    sub_1C50502AC((uint64_t)&v37, (uint64_t)&v64);
  v40 = v42;
  v41 = 0x1000000000;
  if ((_DWORD)v68)
    sub_1C59EE1EC((uint64_t)&v40, (uint64_t)&v67);
  v43 = v70;
  v44 = v35;
  v45 = v36;
  v46 = v48;
  v47 = xmmword_1C64638F0;
  if ((_QWORD)v38)
    sub_1C4FE6ED8((uint64_t)&v46, (uint64_t)&v37);
  v49 = v51;
  v50 = 0x1000000000;
  if ((_DWORD)v41)
    sub_1C59F5240((uint64_t)&v49, (uint64_t)&v40);
  v52 = v43;
  v17 = v53;
  v18 = v54;
  v19 = v21;
  v20 = xmmword_1C64638F0;
  if ((_QWORD)v56)
    sub_1C50502AC((uint64_t)&v19, (uint64_t)&v55);
  v22 = v24;
  v23 = 0x1000000000;
  if ((_DWORD)v59)
    sub_1C59EE1EC((uint64_t)&v22, (uint64_t)&v58);
  v25 = v61;
  v26 = v17;
  v27 = v18;
  v28 = v30;
  v29 = xmmword_1C64638F0;
  if ((_QWORD)v20)
    sub_1C4FE6ED8((uint64_t)&v28, (uint64_t)&v19);
  v31 = v33;
  v32 = 0x1000000000;
  if ((_DWORD)v23)
    sub_1C59F5240((uint64_t)&v31, (uint64_t)&v22);
  v34 = v25;
  v80 = v44;
  v81 = v45;
  v82 = v84;
  v83 = xmmword_1C64638F0;
  if ((_QWORD)v47)
    sub_1C4FE6ED8((uint64_t)&v82, (uint64_t)&v46);
  v85 = v87;
  v86 = 0x1000000000;
  if ((_DWORD)v50)
    sub_1C59F5240((uint64_t)&v85, (uint64_t)&v49);
  v88 = v52;
  v71 = v26;
  v72 = v27;
  v73 = v75;
  v74 = xmmword_1C64638F0;
  if ((_QWORD)v29)
    sub_1C4FE6ED8((uint64_t)&v73, (uint64_t)&v28);
  v76 = v78;
  v77 = 0x1000000000;
  if ((_DWORD)v32)
    sub_1C59F5240((uint64_t)&v76, (uint64_t)&v31);
  v79 = v34;
  v15 = v81;
  *(_OWORD *)v13 = v80;
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 32) = v13 + 56;
  *(_OWORD *)(v13 + 40) = xmmword_1C64638F0;
  if ((_QWORD)v83)
    sub_1C4FE6ED8(v13 + 32, (uint64_t)&v82);
  *(_QWORD *)(v13 + 312) = v13 + 328;
  *(_QWORD *)(v13 + 320) = 0x1000000000;
  if ((_DWORD)v86)
    sub_1C59F5240(v13 + 312, (uint64_t)&v85);
  *(_BYTE *)(v13 + 1352) = v88;
  v16 = v72;
  *(_OWORD *)(v13 + 1360) = v71;
  *(_OWORD *)(v13 + 1376) = v16;
  *(_QWORD *)(v13 + 1392) = v13 + 1416;
  *(_QWORD *)(v13 + 1400) = 0;
  *(_QWORD *)(v13 + 1408) = 256;
  if ((_QWORD)v74)
    sub_1C4FE6ED8(v13 + 1392, (uint64_t)&v73);
  *(_QWORD *)(v13 + 1672) = v13 + 1688;
  *(_QWORD *)(v13 + 1680) = 0x1000000000;
  if ((_DWORD)v77)
    sub_1C59F5240(v13 + 1672, (uint64_t)&v76);
  *(_BYTE *)(v13 + 2712) = v79;
  if (v76 != v78)
    free(v76);
  if (v73 != v75)
    free(v73);
  if (v85 != v87)
    free(v85);
  if (v82 != v84)
    free(v82);
  if (v31 != v33)
    free(v31);
  if (v28 != v30)
    free(v28);
  if (v22 != v24)
    free(v22);
  if (v19 != v21)
    free(v19);
  if (v49 != v51)
    free(v49);
  if (v46 != v48)
    free(v46);
  if (v40 != v42)
    free(v40);
  if (v37 != v39)
    free(v37);
  if (v58 != v60)
    free(v58);
  if (v55 != v57)
    free(v55);
  if (v67 != v69)
    free(v67);
  if (v64 != v66)
    free(v64);
}

void llvm::object::MachOObjectFile::exports(llvm::object::MachOObjectFile *a1, uint64_t a2)
{
  uint64_t DyldInfoExportsTrie;
  uint64_t v5;

  DyldInfoExportsTrie = llvm::object::MachOObjectFile::getDyldInfoExportsTrie(a1);
  llvm::object::MachOObjectFile::exports(a2, DyldInfoExportsTrie, v5, (uint64_t)a1);
}

uint64_t llvm::object::MachOObjectFile::getDyldInfoExportsTrie(llvm::object::MachOObjectFile *this)
{
  int8x16_t *v2;
  uint64_t result;
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6[5];
  unsigned int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (int8x16_t *)*((_QWORD *)this + 38);
  if (v2)
  {
    sub_1C59EAD2C((uint64_t)v6, (uint64_t)this, v2);
    if ((v8 & 1) != 0)
    {
      result = v6[0];
      if (v6[0])
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6[0] + 8))(v6[0]);
        return 0;
      }
    }
    else
    {
      return *((_QWORD *)this + 2) + v7;
    }
  }
  else
  {
    v4 = (_DWORD *)*((_QWORD *)this + 39);
    if (v4)
    {
      sub_1C59DA608((uint64_t)this, v4);
      return *((_QWORD *)this + 2) + v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  v4 = *(unsigned int *)(a3 + 136);
  if (!(_DWORD)v4)
    return a1;
  v6 = *(_QWORD *)(a3 + 128);
  v7 = 16 * v4;
  while (1)
  {
    v8 = *(_DWORD *)(v6 + 8);
    if (v8 == 25)
      break;
    if (v8 == 1)
    {
      *(_QWORD *)&v16 = 0;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      llvm::object::MachOObjectFile::getSegmentLoadCommand(a3, (unint64_t *)v6, (uint64_t)&v13);
      if (strlen((const char *)&v13 + 8) == 6 && DWORD2(v13) == 1163157343 && WORD6(v13) == 21592)
      {
        v11 = DWORD2(v14);
        goto LABEL_20;
      }
    }
LABEL_17:
    v6 += 16;
    v7 -= 16;
    if (!v7)
      return a1;
  }
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  llvm::object::MachOObjectFile::getSegment64LoadCommand(a3, (unint64_t *)v6, (uint64_t)&v13);
  if (strlen((const char *)&v13 + 8) != 6)
    goto LABEL_17;
  if (DWORD2(v13) != 1163157343 || WORD6(v13) != 21592)
    goto LABEL_17;
  v11 = *((_QWORD *)&v14 + 1);
LABEL_20:
  *(_QWORD *)(a1 + 88) = v11;
  return a1;
}

int8x16_t llvm::object::MachOObjectFile::getSegmentLoadCommand@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v6;
  int8x16_t result;
  unsigned int v8;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (*a2 < v4 || *a2 + 56 > v4 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v6;
  result = *(int8x16_t *)(v3 + 32);
  *(int8x16_t *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(v3 + 48);
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 <= 0x13 && ((1 << v8) & 0xAAC00) != 0)
  {
    *(int8x8_t *)a3 = vrev32_s8(*(int8x8_t *)a3);
    *(int8x16_t *)(a3 + 24) = vrev32q_s8(*(int8x16_t *)(a3 + 24));
    result = vrev32q_s8(*(int8x16_t *)(a3 + 40));
    *(int8x16_t *)(a3 + 40) = result;
  }
  return result;
}

int8x16_t llvm::object::MachOObjectFile::getSegment64LoadCommand@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v6;
  int8x16_t result;
  unsigned int v8;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (*a2 < v4 || *a2 + 72 > v4 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(v3 + 64);
  result = *(int8x16_t *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(int8x16_t *)(a3 + 16) = result;
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 <= 0x13 && ((1 << v8) & 0xAAC00) != 0)
  {
    *(int8x8_t *)a3 = vrev32_s8(*(int8x8_t *)a3);
    *(int8x16_t *)(a3 + 24) = vrev64q_s8(*(int8x16_t *)(a3 + 24));
    *(int8x16_t *)(a3 + 40) = vrev64q_s8(*(int8x16_t *)(a3 + 40));
    result = vrev32q_s8(*(int8x16_t *)(a3 + 56));
    *(int8x16_t *)(a3 + 56) = result;
  }
  return result;
}

uint64_t llvm::object::MachOAbstractFixupEntry::segmentOffset(llvm::object::MachOAbstractFixupEntry *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::object::MachOAbstractFixupEntry::segmentAddress(llvm::object::MachOAbstractFixupEntry *this)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(uint64_t **)(*((_QWORD *)this + 1) + 264);
  v2 = *v1;
  v3 = *((_DWORD *)v1 + 2);
  if (v3)
  {
    v4 = v2 + 88 * v3;
    v5 = 88 * v3;
    while (*(_DWORD *)(v2 + 80) != *((_DWORD *)this + 6) || *(_QWORD *)(v2 + 64) || !*(_QWORD *)(v2 + 8))
    {
      v2 += 88;
      v5 -= 88;
      if (!v5)
      {
        v2 = v4;
        return *(_QWORD *)(v2 + 72);
      }
    }
  }
  return *(_QWORD *)(v2 + 72);
}

uint64_t llvm::object::MachOAbstractFixupEntry::segmentName(uint64_t this)
{
  _DWORD *v1;
  unsigned int v2;
  _DWORD *v3;
  uint64_t v4;

  v1 = *(_DWORD **)(*(_QWORD *)(this + 8) + 264);
  v2 = v1[2];
  if (v2)
  {
    v3 = (_DWORD *)(*(_QWORD *)v1 + 80);
    v4 = 88 * v2;
    while (*v3 != *(_DWORD *)(this + 24))
    {
      v3 += 22;
      v4 -= 88;
      if (!v4)
        return this;
    }
    return *((_QWORD *)v3 - 4);
  }
  return this;
}

uint64_t llvm::object::MachOAbstractFixupEntry::sectionName(llvm::object::MachOAbstractFixupEntry *this)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(uint64_t **)(*((_QWORD *)this + 1) + 264);
  v2 = *v1;
  v3 = *((_DWORD *)v1 + 2);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = v2 + 88 * v3;
    v6 = 88 * v3;
    while (1)
    {
      if (*(_DWORD *)(v2 + 80) == *((_DWORD *)this + 6))
      {
        v7 = *(_QWORD *)(v2 + 64);
        if (v7 <= v4 && *(_QWORD *)(v2 + 8) + v7 > v4)
          break;
      }
      v2 += 88;
      v6 -= 88;
      if (!v6)
      {
        v2 = v5;
        return *(_QWORD *)(v2 + 32);
      }
    }
  }
  return *(_QWORD *)(v2 + 32);
}

unint64_t llvm::object::MachOAbstractFixupEntry::address(llvm::object::MachOAbstractFixupEntry *this)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 2);
  v2 = *(uint64_t **)(*((_QWORD *)this + 1) + 264);
  v3 = *v2;
  v4 = *((_DWORD *)v2 + 2);
  if (v4)
  {
    v5 = v3 + 88 * v4;
    v6 = 88 * v4;
    while (1)
    {
      if (*(_DWORD *)(v3 + 80) == *((_DWORD *)this + 6))
      {
        v7 = *(_QWORD *)(v3 + 64);
        if (v7 <= v1 && *(_QWORD *)(v3 + 8) + v7 > v1)
          break;
      }
      v3 += 88;
      v6 -= 88;
      if (!v6)
      {
        v3 = v5;
        return *(_QWORD *)(v3 + 72) + v1;
      }
    }
  }
  return *(_QWORD *)(v3 + 72) + v1;
}

uint64_t llvm::object::MachOAbstractFixupEntry::symbolName(llvm::object::MachOAbstractFixupEntry *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::object::MachOAbstractFixupEntry::addend(llvm::object::MachOAbstractFixupEntry *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::object::MachOAbstractFixupEntry::flags(llvm::object::MachOAbstractFixupEntry *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t llvm::object::MachOAbstractFixupEntry::ordinal(llvm::object::MachOAbstractFixupEntry *this)
{
  return *((unsigned int *)this + 12);
}

const char *llvm::object::MachOAbstractFixupEntry::typeName(llvm::object::MachOAbstractFixupEntry *this)
{
  return "unknown";
}

uint64_t llvm::object::MachOAbstractFixupEntry::moveToFirst(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = -1;
  *(_BYTE *)(this + 80) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  return this;
}

uint64_t llvm::object::MachOAbstractFixupEntry::moveToEnd(uint64_t this)
{
  *(_BYTE *)(this + 80) = 1;
  return this;
}

uint64_t llvm::object::MachOChainedFixupEntry::MachOChainedFixupEntry(uint64_t a1, void **a2, llvm::object::MachOObjectFile *a3, int a4, int a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  char v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char **v24;
  int64_t v25;
  void *v26;
  void *v27;
  _BYTE *v28;
  __int128 *v29;
  size_t v30;
  void *v31;
  void *v32;
  void *v34;
  int64_t v35;
  void **p_src;
  void *__src;
  __int128 *v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, (uint64_t)a2, (uint64_t)a3);
  *(_OWORD *)(v10 + 96) = 0u;
  v11 = (_QWORD *)(v10 + 96);
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_DWORD *)(v10 + 144) = 0;
  *(_DWORD *)(v10 + 148) = a4;
  if (!a5)
    goto LABEL_38;
  v12 = (uint64_t *)(v10 + 120);
  if (*((_QWORD *)a3 + 44))
  {
    llvm::object::MachOObjectFile::getDyldSectionChainStarts(a3, (uint64_t)&__src);
    v13 = v39;
    if ((v39 & 1) == 0)
    {
LABEL_4:
      if (v12 != (uint64_t *)&__src)
      {
        sub_1C59F53D8(v12, (__int128 *)__src, v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (_BYTE *)__src) >> 3));
        v13 = v39;
      }
      if ((v13 & 1) == 0)
      {
        p_src = &__src;
        sub_1C59F5360(&p_src);
        goto LABEL_38;
      }
      goto LABEL_22;
    }
    v26 = __src;
    __src = 0;
    *a2 = v26;
LABEL_22:
    v27 = __src;
    __src = 0;
    if (v27)
      (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
    goto LABEL_38;
  }
  llvm::object::MachOObjectFile::getDyldChainedFixupTargets((int8x16_t **)a3, (uint64_t)&__src);
  v14 = (__int128 *)__src;
  if ((v39 & 1) == 0)
  {
    v15 = v38;
    v35 = (char *)v38 - (_BYTE *)__src;
    v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v38 - (_BYTE *)__src) >> 3);
    v17 = *(_QWORD *)(a1 + 112);
    v18 = *(char **)(a1 + 96);
    if (0xCCCCCCCCCCCCCCCDLL * ((v17 - (uint64_t)v18) >> 3) < v16)
    {
      if (v18)
      {
        *(_QWORD *)(a1 + 104) = v18;
        operator delete(v18);
        v17 = 0;
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
      }
      if (v16 > 0x666666666666666)
        goto LABEL_44;
      v19 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
      v20 = 2 * v19;
      if (2 * v19 <= v16)
        v20 = v16;
      v21 = v19 >= 0x333333333333333 ? 0x666666666666666 : v20;
      if (v21 > 0x666666666666666)
LABEL_44:
        abort();
      v22 = 5 * v21;
      v23 = (char *)operator new(40 * v21);
      v18 = v23;
      *(_QWORD *)(a1 + 104) = v23;
      v24 = (char **)(a1 + 104);
      *(_QWORD *)(a1 + 96) = v23;
      *(_QWORD *)(a1 + 112) = &v23[8 * v22];
      if (v15 != v14)
      {
        v25 = v35;
        memcpy(v23, v14, v35 - 7);
LABEL_35:
        *v24 = &v18[v25];
        if (v14)
          operator delete(v14);
        if (*(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 120))
        {
LABEL_38:
          if (a2 && !*a2)
            goto LABEL_40;
          return a1;
        }
        llvm::object::MachOObjectFile::getDyldChainedFixupsInSegment(a3, (uint64_t)&__src);
        v13 = v39;
        if ((v39 & 1) == 0)
          goto LABEL_4;
        v34 = __src;
        __src = 0;
        *a2 = v34;
        goto LABEL_22;
      }
LABEL_34:
      v25 = v35;
      goto LABEL_35;
    }
    v24 = (char **)(a1 + 104);
    v28 = *(_BYTE **)(a1 + 104);
    if (0xCCCCCCCCCCCCCCCDLL * ((v28 - v18) >> 3) >= v16)
    {
      if (v38 == __src)
        goto LABEL_34;
      v25 = (char *)v38 - (_BYTE *)__src;
      v30 = v35 - 7;
      v31 = *(void **)(a1 + 96);
      v32 = __src;
    }
    else
    {
      v29 = (__int128 *)((char *)__src + 8 * ((v28 - v18) >> 3));
      if (v28 != v18)
      {
        memmove(*(void **)(a1 + 96), __src, v28 - v18 - 7);
        v18 = *v24;
      }
      v25 = (char *)v15 - (char *)v29;
      if (v15 == v29)
        goto LABEL_35;
      v30 = v25 - 7;
      v31 = v18;
      v32 = v29;
    }
    memmove(v31, v32, v30);
    goto LABEL_35;
  }
  *a2 = __src;
  if (!v14)
LABEL_40:
    *a2 = 0;
  return a1;
}

void llvm::object::MachOObjectFile::getDyldSectionChainStarts(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  const char *v27;
  uint64_t *v28;
  uint64_t v29;
  const char *v30;
  __int16 v31;
  uint64_t v32[4];
  __int16 v33;
  uint64_t v34[4];
  __int16 v35;
  uint64_t v36[4];
  __int16 v37;
  uint64_t v38[4];
  __int16 v39;
  uint64_t v40[5];
  unint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  _OWORD v44[2];
  void *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v42 = 0uLL;
  v43 = 0;
  v3 = *((_QWORD *)this + 44);
  if (!v3)
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    goto LABEL_41;
  }
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0x12)
  {
    sub_1C59EB4E0((uint64_t)v44, (uint64_t)this, v3);
    if ((v49 & 1) == 0)
    {
      v5 = v46;
      v6 = v47;
      goto LABEL_8;
    }
LABEL_36:
    v25 = *(_QWORD *)&v44[0];
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v25;
    goto LABEL_41;
  }
  sub_1C59EB5B4((uint64_t)v44, (uint64_t)this, v3);
  if ((v48 & 1) != 0)
    goto LABEL_36;
  v5 = HIDWORD(v45);
  v6 = v46;
LABEL_8:
  v41 = v6;
  if (!(v6 | v5))
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(int64x2_t *)a2 = v42;
    *(_QWORD *)(a2 + 16) = v43;
    v42 = 0uLL;
    v43 = 0;
    goto LABEL_41;
  }
  v7 = *((_QWORD *)this + 3);
  if (v6 >= v7)
  {
    v38[0] = (uint64_t)"bad chained fixups: chain starts section ";
    v39 = 259;
    v37 = 268;
    v36[0] = (uint64_t)&v41;
    sub_1C6131AAC(v38, v36, (uint64_t)v40);
    v27 = " starts past end of file";
LABEL_47:
    v34[0] = (uint64_t)v27;
    v35 = 259;
    v28 = v34;
LABEL_49:
    sub_1C6131AAC(v40, v28, (uint64_t)v44);
    v26 = (uint64_t *)v44;
    goto LABEL_43;
  }
  if (v5 + v6 > v7)
  {
    v38[0] = (uint64_t)"bad chained fixups: chain starts section ";
    v39 = 259;
    v37 = 268;
    v36[0] = (uint64_t)&v41;
    sub_1C6131AAC(v38, v36, (uint64_t)v40);
    v27 = " extends past end of file";
    goto LABEL_47;
  }
  v8 = (unsigned int *)(*((_QWORD *)this + 2) + v6);
  v9 = *((_DWORD *)this + 2);
  v10 = bswap32(*v8);
  v11 = bswap32(v8[1]);
  if (((1 << v9) & 0xAAC00) != 0)
  {
    v12 = 0;
  }
  else
  {
    v10 = *v8;
    v12 = 1;
  }
  if (((1 << v9) & 0xAAC00) == 0)
    v11 = v8[1];
  if (v9 <= 0x13)
    v13 = v10;
  else
    v13 = *v8;
  if (v9 <= 0x13)
    v14 = v12;
  else
    v14 = 1;
  if (v9 <= 0x13)
    v15 = v11;
  else
    v15 = v8[1];
  if (v13 - 13 <= 0xFFFFFFF3)
  {
    v36[0] = (uint64_t)"bad chained fixups: chain starts section ";
    v37 = 259;
    v34[0] = (uint64_t)"pointer format ";
    v35 = 259;
    sub_1C6131AAC(v36, v34, (uint64_t)v38);
    v33 = 264;
    LODWORD(v32[0]) = v13;
    sub_1C6131AAC(v38, v32, (uint64_t)v40);
    v30 = " is invalid";
    v31 = 259;
    v28 = (uint64_t *)&v30;
    goto LABEL_49;
  }
  LOWORD(v44[0]) = v13;
  memset((char *)v44 + 8, 0, 20);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  if (v15)
  {
    v16 = 0;
    v17 = -(uint64_t)v15;
    v18 = 8;
    while (v18 <= v5)
    {
      v19 = bswap32(v8[v18 / 4]);
      if (v14)
        v20 = v8[v18 / 4];
      else
        v20 = v19;
      llvm::object::ChainedFixupsInSegment::walkFixupChain((llvm::object::ChainedFixupsInSegment *)v44, this, 0, 0, v20, (unint64_t *)v40);
      if (v40[0])
      {
        v29 = v40[0];
        llvm::report_fatal_error(&v29);
      }
      --v16;
      v18 += 4;
      if (v17 == v16)
        goto LABEL_34;
    }
    v36[0] = (uint64_t)"bad chained fixups: chain start ";
    v37 = 259;
    v35 = 264;
    LODWORD(v34[0]) = -(int)v16;
    sub_1C6131AAC(v36, v34, (uint64_t)v38);
    v32[0] = (uint64_t)" extends past section data";
    v33 = 259;
    sub_1C6131AAC(v38, v32, (uint64_t)v40);
    v26 = v40;
LABEL_43:
    llvm::report_fatal_error((uint64_t)v26, 1);
  }
LABEL_34:
  v22 = v42.i64[1];
  v21 = v43;
  if (v42.i64[1] >= v43)
  {
    v24 = sub_1C59F5810(&v42, (uint64_t)v44);
    v21 = v43;
    v23 = v45;
  }
  else
  {
    *(_OWORD *)v42.i64[1] = v44[0];
    *(_OWORD *)(v22 + 12) = *(_OWORD *)((char *)v44 + 12);
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 32) = 0;
    v23 = v45;
    sub_1C4DFE394((_QWORD *)(v22 + 32), v45, v46, (uint64_t)(v46 - (_QWORD)v45) >> 3);
    v24 = (char *)(v22 + 56);
  }
  *(_BYTE *)(a2 + 24) &= ~1u;
  *(_QWORD *)a2 = v42.i64[0];
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v21;
  v43 = 0;
  v42 = 0uLL;
  if (v23)
    operator delete(v23);
LABEL_41:
  *(_QWORD *)&v44[0] = &v42;
  sub_1C59F5360((void ***)v44);
}

void llvm::object::MachOObjectFile::getDyldChainedFixupTargets(int8x16_t **this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  unsigned int v12;
  int8x16_t **v13;
  int8x16_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int8x16_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int8x16_t *v33;
  unsigned int *v34;
  signed int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  const char *v41;
  char v42;
  size_t v43;
  size_t v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  char *v50;
  char *v51;
  int *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int8x16_t **v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  __int8 *v65;
  int8x16_t *v66;
  const char *v67;
  __int16 v68;
  uint64_t v69[4];
  __int16 v70;
  const char *v71;
  __int16 v72;
  uint64_t v73[4];
  __int16 v74;
  const char *v75;
  __int16 v76;
  uint64_t v77[4];
  __int16 v78;
  uint64_t v79[4];
  __int16 v80;
  uint64_t v81[4];
  __int16 v82;
  uint64_t v83[4];
  __int16 v84;
  uint64_t v85[4];
  __int16 v86;
  uint64_t v87[5];
  uint64_t v88[5];
  uint64_t v89[4];
  __int16 v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  char v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  char v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getChainedFixupsHeader((uint64_t)this, (uint64_t)&v95);
  if ((v101 & 1) != 0)
  {
    v55 = v95;
    v95 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v55;
  }
  else if (v100)
  {
    v4 = v96;
    v5 = v97;
    v7 = v98;
    v6 = v99;
    v60 = this;
    sub_1C59EAFFC((uint64_t)&v91, (uint64_t)this, this[41]);
    if ((v94 & 1) != 0)
    {
      v11 = 0;
      v56 = v91;
      v91 = 0;
      *(_BYTE *)(a2 + 24) |= 1u;
      *(_QWORD *)a2 = v56;
      goto LABEL_85;
    }
    v59 = a2;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v65 = &v60[2]->i8[v92 + v5];
      v66 = v60[2];
      v12 = v93 - v5;
      v13 = v60;
      v61 = v12;
      v62 = v92 + v4;
      v64 = v6;
      v63 = v7;
      while (1)
      {
        switch(v6)
        {
          case 3:
            v24 = v13[2];
            v25 = (unint64_t *)((char *)v24->u64 + (v62 + 16 * v8));
            if ((__int8 *)(v25 + 2) > &v13[3]->i8[(_QWORD)v24])
              goto LABEL_94;
            v27 = *v25;
            v26 = v25[1];
            v28 = *((_DWORD *)v13 + 2);
            v29 = bswap64(v27);
            v30 = bswap64(v26);
            if (((1 << v28) & 0xAAC00) == 0)
            {
              v30 = v26;
              v29 = v27;
            }
            if (v28 <= 0x13)
              v22 = v30;
            else
              v22 = v26;
            if (v28 <= 0x13)
              v31 = v29;
            else
              v31 = v27;
            v19 = HIDWORD(v31);
            v20 = (v31 >> 16) & 1;
            LODWORD(v31) = (unsigned __int16)v31;
            v32 = v31;
            if ((unsigned __int16)v31 == 65534)
              LODWORD(v31) = -2;
            if (v32 == 0xFFFF)
              LODWORD(v31) = -1;
            if (v32 == 65533)
              v23 = -3;
            else
              v23 = v31;
            break;
          case 2:
            v33 = v13[2];
            v34 = (unsigned __int32 *)((char *)v33->u32 + (v62 + 8 * v8));
            if ((__int8 *)(v34 + 2) > &v13[3]->i8[(_QWORD)v33])
            {
LABEL_94:
              v89[0] = (uint64_t)"Structure read out-of-range";
              v90 = 259;
              sub_1C59D7FE0(v88, v89);
              v57 = v88[0];
              *(_BYTE *)(v59 + 24) &= ~1u;
              *(_QWORD *)(v59 + 8) = 0;
              *(_QWORD *)(v59 + 16) = 0;
              *(_QWORD *)v59 = 0;
              if (v57)
                (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
              goto LABEL_85;
            }
            v36 = *v34;
            v35 = v34[1];
            v37 = *((_DWORD *)v13 + 2);
            v38 = bswap32(v36);
            v39 = bswap32(v35);
            if (((1 << v37) & 0xAAC00) == 0)
            {
              v39 = v35;
              v38 = v36;
            }
            if (v37 <= 0x13)
            {
              v35 = v39;
              v36 = v38;
            }
            LODWORD(v19) = v36 >> 9;
            v22 = v35;
            LODWORD(v20) = (v36 >> 8) & 1;
            v40 = v36;
            if (v36 == 254)
              v36 = -2;
            else
              v36 = v36;
            if (v40 == 255)
              v36 = -1;
            if (v40 == 253)
              v23 = -3;
            else
              v23 = v36;
            break;
          case 1:
            v14 = v13[2];
            v15 = (unsigned __int32 *)((char *)v14->u32 + (v62 + 4 * v8));
            if ((__int8 *)(v15 + 1) > &v13[3]->i8[(_QWORD)v14])
              goto LABEL_94;
            v16 = *v15;
            v17 = *((_DWORD *)v13 + 2);
            v18 = bswap32(v16);
            if (((1 << v17) & 0xAAC00) == 0)
              v18 = v16;
            if (v17 <= 0x13)
              v16 = v18;
            LODWORD(v19) = v16 >> 9;
            LODWORD(v20) = (v16 >> 8) & 1;
            if (v16 == 254)
              v21 = -2;
            else
              v21 = v16;
            if (v16 == 255)
              v21 = -1;
            v22 = 0;
            if (v16 == 253)
              v23 = -3;
            else
              v23 = v21;
            break;
          default:
            v23 = 0;
            LODWORD(v19) = 0;
            v22 = 0;
            LOBYTE(v20) = 0;
            goto LABEL_54;
        }
        if (v19 > v61)
        {
          v79[0] = (uint64_t)"bad chained fixups: import #";
          v80 = 259;
          v78 = 264;
          LODWORD(v77[0]) = v8;
          sub_1C6131AAC(v79, v77, (uint64_t)v81);
          v75 = " symbol offset extends past end: ";
          v76 = 259;
          sub_1C6131AAC(v81, (uint64_t *)&v75, (uint64_t)v83);
          v74 = 264;
          LODWORD(v73[0]) = v19;
          sub_1C6131AAC(v83, v73, (uint64_t)v85);
          v71 = " (max ";
          v72 = 259;
          sub_1C6131AAC(v85, (uint64_t *)&v71, (uint64_t)v87);
          v70 = 264;
          LODWORD(v69[0]) = v61;
          sub_1C6131AAC(v87, v69, (uint64_t)v88);
          v67 = ")";
          v68 = 259;
          v58 = (uint64_t *)&v67;
          goto LABEL_97;
        }
LABEL_54:
        v41 = &v65[v19];
        if (v66)
        {
          v42 = v20;
          v43 = strlen(v41);
          LOBYTE(v20) = v42;
          v44 = v43;
        }
        else
        {
          v44 = 0;
        }
        if (v23 >= 1 && *((_DWORD *)v13 + 28) <= (v23 - 1))
        {
          v85[0] = (uint64_t)"bad chained fixups: import #";
          v86 = 259;
          v84 = 264;
          LODWORD(v83[0]) = v8;
          sub_1C6131AAC(v85, v83, (uint64_t)v87);
          v81[0] = (uint64_t)" bad library ordinal: ";
          v82 = 259;
          sub_1C6131AAC(v87, v81, (uint64_t)v88);
          v80 = 265;
          LODWORD(v79[0]) = v23;
          v58 = v79;
LABEL_97:
          sub_1C6131AAC(v88, v58, (uint64_t)v89);
          llvm::report_fatal_error((uint64_t)v89, 1);
        }
        if (v10 >= v9)
        {
          v47 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v10 - (char *)v11) >> 3) + 1;
          if (v47 > 0x666666666666666)
            abort();
          if (0x999999999999999ALL * (((char *)v9 - (char *)v11) >> 3) > v47)
            v47 = 0x999999999999999ALL * (((char *)v9 - (char *)v11) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)v11) >> 3) >= 0x333333333333333)
            v48 = 0x666666666666666;
          else
            v48 = v47;
          if (v48)
          {
            if (v48 > 0x666666666666666)
              sub_1C4764EE4();
            v49 = v20;
            v50 = (char *)operator new(40 * v48);
            LOBYTE(v20) = v49;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[8 * (((char *)v10 - (char *)v11) >> 3)];
          *(_DWORD *)v51 = v23;
          *((_QWORD *)v51 + 1) = v41;
          *((_QWORD *)v51 + 2) = v44;
          *((_QWORD *)v51 + 3) = v22;
          v51[32] = v20;
          if (v10 == v11)
          {
            v11 = (int *)&v50[8 * (((char *)v10 - (char *)v11) >> 3)];
            v13 = v60;
            v46 = v63;
          }
          else
          {
            v52 = (int *)&v50[8 * (((char *)v10 - (char *)v11) >> 3)];
            v13 = v60;
            v46 = v63;
            do
            {
              v53 = *(_OWORD *)(v10 - 10);
              v54 = *(_OWORD *)(v10 - 6);
              *((_BYTE *)v52 - 8) = *((_BYTE *)v10 - 8);
              *(_OWORD *)(v52 - 6) = v54;
              *(_OWORD *)(v52 - 10) = v53;
              v52 -= 10;
              v10 -= 10;
            }
            while (v10 != v11);
            v10 = v11;
            v11 = v52;
          }
          v6 = v64;
          v9 = (int *)&v50[40 * v48];
          v45 = (int *)(v51 + 40);
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v10 = v23;
          *((_QWORD *)v10 + 1) = v41;
          *((_QWORD *)v10 + 2) = v44;
          *((_QWORD *)v10 + 3) = v22;
          *((_BYTE *)v10 + 32) = v20;
          *(int *)((char *)v10 + 33) = v89[0];
          v10[9] = *(_DWORD *)((char *)v89 + 3);
          v45 = v10 + 10;
          v46 = v63;
          v6 = v64;
        }
        ++v8;
        v10 = v45;
        if (v8 == v46)
          goto LABEL_84;
      }
    }
    v11 = 0;
    v45 = 0;
    v9 = 0;
LABEL_84:
    *(_BYTE *)(v59 + 24) &= ~1u;
    *(_QWORD *)v59 = v11;
    *(_QWORD *)(v59 + 8) = v45;
    *(_QWORD *)(v59 + 16) = v9;
    v11 = 0;
LABEL_85:
    if ((v94 & 1) != 0 && v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
  if ((v101 & 1) != 0)
  {
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  }
}

void llvm::object::MachOObjectFile::getDyldChainedFixupsInSegment(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  int8x16_t *v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 v61;
  int v62;
  unsigned int v63;
  __int16 v64;
  uint64_t v65;
  void *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  int64x2_t v80;
  void **v81;
  uint64_t *v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  const char *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104[4];
  __int16 v105;
  uint64_t v106[4];
  __int16 v107;
  uint64_t v108[4];
  __int16 v109;
  uint64_t v110[4];
  __int16 v111;
  uint64_t v112[4];
  __int16 v113;
  unint64_t v114;
  uint64_t v115[4];
  __int16 v116;
  uint64_t v117[4];
  __int16 v118;
  uint64_t v119[4];
  __int16 v120;
  uint64_t v121[4];
  __int16 v122;
  uint64_t v123[4];
  __int16 v124;
  uint64_t v125[4];
  __int16 v126;
  int64x2_t v127;
  unint64_t v128;
  void **v129[4];
  char v130;
  _OWORD v131[2];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v3 = (int8x16_t *)*((_QWORD *)this + 41);
  if (!v3)
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    memset(v131, 0, 24);
    v129[0] = (void **)v131;
    sub_1C59F5360(v129);
    return;
  }
  sub_1C59EAFFC((uint64_t)&v135, (uint64_t)this, v3);
  if ((v138 & 1) != 0)
  {
    v34 = v135;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v34;
    return;
  }
  v127 = 0uLL;
  v128 = 0;
  if (!v136)
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    goto LABEL_119;
  }
  v91 = v137;
  v93 = v136;
  v88 = a2;
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = *((_QWORD *)this + 16);
    v9 = v8 + 16 * v5;
    v95 = v9;
    v98 = 0;
    while (1)
    {
      v10 = *(_DWORD *)(v8 + 8);
      if (v10 == 25)
        break;
      if (v10 == 1)
      {
        *(_QWORD *)&v133 = 0;
        v132 = 0u;
        memset(v131, 0, sizeof(v131));
        llvm::object::MachOObjectFile::getSegmentLoadCommand((uint64_t)this, (unint64_t *)v8, (uint64_t)v131);
        v11 = strlen((const char *)v131 + 8);
        v12 = v11;
        v13 = DWORD2(v131[1]);
        v14 = HIDWORD(v131[1]);
        v16 = v132;
        v15 = DWORD1(v132);
        if (v6 < v98)
        {
          *(_QWORD *)v6 = (char *)v131 + 8;
          *((_QWORD *)v6 + 1) = v11;
          *((_QWORD *)v6 + 2) = v13;
          *((_QWORD *)v6 + 3) = v14;
          v17 = v6 + 48;
          *((_QWORD *)v6 + 4) = v16;
          *((_QWORD *)v6 + 5) = v15;
LABEL_41:
          v6 = v17;
          goto LABEL_42;
        }
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) + 1;
        v24 = 0x555555555555555;
        if (v23 > 0x555555555555555)
          goto LABEL_131;
        if (0x5555555555555556 * ((v98 - v7) >> 4) > v23)
          v23 = 0x5555555555555556 * ((v98 - v7) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v98 - v7) >> 4) < 0x2AAAAAAAAAAAAAALL)
          v24 = v23;
        if (v24)
        {
          if (v24 > 0x555555555555555)
            goto LABEL_139;
          v25 = DWORD1(v132);
          v99 = v24;
          v26 = (char *)operator new(48 * v24);
          v24 = v99;
          v15 = v25;
        }
        else
        {
          v26 = 0;
        }
        v28 = &v26[16 * ((v6 - v7) >> 4)];
        *(_QWORD *)v28 = (char *)v131 + 8;
        *((_QWORD *)v28 + 1) = v12;
        *((_QWORD *)v28 + 2) = v13;
        *((_QWORD *)v28 + 3) = v14;
        *((_QWORD *)v28 + 4) = v16;
        *((_QWORD *)v28 + 5) = v15;
        if (v6 != v7)
        {
          v29 = &v26[16 * ((v6 - v7) >> 4)];
          v9 = v95;
          do
          {
            v30 = *((_OWORD *)v6 - 3);
            v31 = *((_OWORD *)v6 - 1);
            *((_OWORD *)v29 - 2) = *((_OWORD *)v6 - 2);
            *((_OWORD *)v29 - 1) = v31;
            *((_OWORD *)v29 - 3) = v30;
            v29 -= 48;
            v6 -= 48;
          }
          while (v6 != v7);
          goto LABEL_37;
        }
LABEL_38:
        v7 = v28;
        v9 = v95;
        goto LABEL_39;
      }
LABEL_42:
      v8 += 16;
      if (v8 == v9)
        goto LABEL_48;
    }
    v134 = 0;
    v132 = 0u;
    v133 = 0u;
    memset(v131, 0, sizeof(v131));
    llvm::object::MachOObjectFile::getSegment64LoadCommand((uint64_t)this, (unint64_t *)v8, (uint64_t)v131);
    v18 = strlen((const char *)v131 + 8);
    v19 = v18;
    v20 = *((_QWORD *)&v131[1] + 1);
    v22 = v132;
    v21 = v133;
    if (v6 < v98)
    {
      *(_QWORD *)v6 = (char *)v131 + 8;
      *((_QWORD *)v6 + 1) = v18;
      *((_QWORD *)v6 + 2) = v20;
      *(_OWORD *)(v6 + 24) = v22;
      v17 = v6 + 48;
      *((_QWORD *)v6 + 5) = v21;
      v9 = v95;
      goto LABEL_41;
    }
    v27 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) + 1;
    v24 = 0x555555555555555;
    if (v27 > 0x555555555555555)
LABEL_131:
      abort();
    if (0x5555555555555556 * ((v98 - v7) >> 4) > v27)
      v27 = 0x5555555555555556 * ((v98 - v7) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v98 - v7) >> 4) < 0x2AAAAAAAAAAAAAALL)
      v24 = v27;
    if (v24)
    {
      if (v24 > 0x555555555555555)
LABEL_139:
        sub_1C4764EE4();
      v100 = v24;
      v26 = (char *)operator new(48 * v24);
      v24 = v100;
    }
    else
    {
      v26 = 0;
    }
    v28 = &v26[16 * ((v6 - v7) >> 4)];
    *(_QWORD *)v28 = (char *)v131 + 8;
    *((_QWORD *)v28 + 1) = v19;
    *((_QWORD *)v28 + 2) = v20;
    *(_OWORD *)(v28 + 24) = v22;
    *((_QWORD *)v28 + 5) = v21;
    if (v6 == v7)
      goto LABEL_38;
    v29 = &v26[16 * ((v6 - v7) >> 4)];
    v9 = v95;
    do
    {
      v32 = *((_OWORD *)v6 - 3);
      v33 = *((_OWORD *)v6 - 1);
      *((_OWORD *)v29 - 2) = *((_OWORD *)v6 - 2);
      *((_OWORD *)v29 - 1) = v33;
      *((_OWORD *)v29 - 3) = v32;
      v29 -= 48;
      v6 -= 48;
    }
    while (v6 != v7);
LABEL_37:
    v6 = v7;
    v7 = v29;
LABEL_39:
    v98 = &v26[48 * v24];
    v17 = v28 + 48;
    if (v6)
      operator delete(v6);
    goto LABEL_41;
  }
  v7 = 0;
LABEL_48:
  sub_1C59EB0AC((uint64_t)v129, (uint64_t)this, *((_QWORD *)this + 2) + v93);
  if ((v130 & 1) != 0)
  {
    v81 = v129[0];
    *(_BYTE *)(v88 + 24) |= 1u;
    *(_QWORD *)v88 = v81;
    if (!v7)
      goto LABEL_119;
    goto LABEL_118;
  }
  if (LODWORD(v129[0]))
  {
    v125[0] = (uint64_t)"bad chained fixups: unknown version: ";
    v126 = 259;
    v124 = 264;
    LODWORD(v123[0]) = v129[0];
    v87 = v123;
LABEL_137:
    sub_1C6131AAC(v125, v87, (uint64_t)v131);
    v82 = (uint64_t *)v131;
    goto LABEL_125;
  }
  if (HIDWORD(v129[0]) <= 0x1B)
  {
    v123[0] = (uint64_t)"bad chained fixups: image starts offset ";
    v124 = 259;
    v122 = 264;
    LODWORD(v121[0]) = HIDWORD(v129[0]);
    sub_1C6131AAC(v123, v121, (uint64_t)v125);
    v119[0] = (uint64_t)" overlaps with chained fixups header";
    v120 = 259;
    v87 = v119;
    goto LABEL_137;
  }
  v89 = HIDWORD(v129[0]);
  v35 = HIDWORD(v129[0]) + v93;
  v36 = (v91 + v93);
  if (v35 + 8 > v36)
  {
    v121[0] = (uint64_t)"bad chained fixups: image starts end ";
    v122 = 259;
    v112[0] = HIDWORD(v129[0]) + v93 + 8;
    v120 = 268;
    v119[0] = (uint64_t)v112;
    sub_1C6131AAC(v121, v119, (uint64_t)v123);
    v117[0] = (uint64_t)" extends past end ";
    v118 = 259;
    sub_1C6131AAC(v123, v117, (uint64_t)v125);
    v116 = 264;
    LODWORD(v115[0]) = v91 + v93;
    v87 = v115;
    goto LABEL_137;
  }
  v97 = (unsigned int *)(*((_QWORD *)this + 2) + v35);
  LODWORD(v37) = *v97;
  v38 = *((_DWORD *)this + 2);
  v39 = bswap32(*v97);
  if (((1 << v38) & 0xAAC00) == 0)
    v39 = *v97;
  v40 = v38 > 0x13 || ((1 << v38) & 0xAAC00) == 0;
  if (v38 <= 0x13)
    v37 = v39;
  else
    v37 = v37;
  v96 = v37;
  if ((_DWORD)v37)
  {
    v41 = 0;
    v90 = HIDWORD(v129[0]) + v93;
    v92 = (v91 + v93);
    do
    {
      v42 = v35 + 4 * v41;
      v114 = v42;
      if (v42 > v36)
      {
        v117[0] = (uint64_t)"bad chained fixups: seg_info_offset ";
        v118 = 259;
        v116 = 264;
        LODWORD(v115[0]) = v41;
        sub_1C6131AAC(v117, v115, (uint64_t)v119);
        v112[0] = (uint64_t)" at ";
        v113 = 259;
        sub_1C6131AAC(v119, v112, (uint64_t)v121);
        v111 = 268;
        v85 = (uint64_t *)&v114;
        goto LABEL_134;
      }
      v43 = v42 + 4;
      if (v42 + 4 > v36)
      {
        v117[0] = (uint64_t)"bad chained fixups: seg_info_offset ";
        v118 = 259;
        v116 = 264;
        LODWORD(v115[0]) = v41;
        sub_1C6131AAC(v117, v115, (uint64_t)v119);
        v112[0] = (uint64_t)" at ";
        v113 = 259;
        sub_1C6131AAC(v119, v112, (uint64_t)v121);
        v104[0] = v43;
        v111 = 268;
        v110[0] = (uint64_t)v104;
        sub_1C6131AAC(v121, v110, (uint64_t)v123);
        v86 = " extends past end ";
        goto LABEL_136;
      }
      v44 = v97[v41 + 1];
      v45 = bswap32(v44);
      if (!v40)
        v44 = v45;
      if (v44)
      {
        v46 = v44 + v35;
        if (v46 > v36)
        {
          v117[0] = (uint64_t)"bad chained fixups: segment start ";
          v118 = 259;
          v116 = 264;
          LODWORD(v115[0]) = v41;
          sub_1C6131AAC(v117, v115, (uint64_t)v119);
          v112[0] = (uint64_t)" offset ";
          v113 = 259;
          sub_1C6131AAC(v119, v112, (uint64_t)v121);
          v111 = 264;
          LODWORD(v110[0]) = v46;
          sub_1C6131AAC(v121, v110, (uint64_t)v123);
          v86 = " starts past end ";
          goto LABEL_136;
        }
        if (v46 + 24 > v36)
        {
          v117[0] = (uint64_t)"bad chained fixups: segment start ";
          v118 = 259;
          v116 = 264;
          LODWORD(v115[0]) = v41;
          sub_1C6131AAC(v117, v115, (uint64_t)v119);
          v112[0] = (uint64_t)" end ";
          v113 = 259;
          sub_1C6131AAC(v119, v112, (uint64_t)v121);
          v104[0] = v46 + 24;
          v111 = 266;
          v85 = v104;
LABEL_134:
          v110[0] = (uint64_t)v85;
          sub_1C6131AAC(v121, v110, (uint64_t)v123);
          v86 = " starts past end ";
LABEL_136:
          v108[0] = (uint64_t)v86;
          v109 = 259;
          sub_1C6131AAC(v123, v108, (uint64_t)v125);
          v107 = 264;
          LODWORD(v106[0]) = v36;
          v87 = v106;
          goto LABEL_137;
        }
        v47 = *((_QWORD *)this + 2) + v46;
        v48 = *(_DWORD *)v47;
        v49 = *(unsigned __int16 *)(v47 + 4);
        v50 = *(unsigned __int16 *)(v47 + 6);
        v51 = *(_DWORD *)(v47 + 16);
        v52 = *(unsigned __int16 *)(v47 + 20);
        if (!v40)
        {
          v48 = bswap32(v48);
          v49 = __rev16(v49);
          v50 = __rev16(v50);
          v51 = bswap32(v51);
          v52 = bswap32(v52);
        }
        v53 = v48 + v89;
        if (v48 + v89 > v36)
        {
          v117[0] = (uint64_t)"bad chained fixups: segment start ";
          v118 = 259;
          v116 = 264;
          LODWORD(v115[0]) = v41;
          sub_1C6131AAC(v117, v115, (uint64_t)v119);
          v112[0] = (uint64_t)" end ";
          v113 = 259;
          sub_1C6131AAC(v119, v112, (uint64_t)v121);
          v111 = 264;
          LODWORD(v110[0]) = v53;
          sub_1C6131AAC(v121, v110, (uint64_t)v123);
          v86 = " extends past end ";
          goto LABEL_136;
        }
        v54 = &v7[48 * v41];
        v55 = *((_QWORD *)v54 + 2);
        v56 = *((_QWORD *)v54 + 4);
        if (v49 != 4096 && v49 != 0x4000)
        {
          v119[0] = (uint64_t)"bad chained fixups: segment start ";
          v120 = 259;
          v118 = 264;
          LODWORD(v117[0]) = v41;
          sub_1C6131AAC(v119, v117, (uint64_t)v121);
          v115[0] = (uint64_t)" page size ";
          v116 = 259;
          sub_1C6131AAC(v121, v115, (uint64_t)v123);
          v113 = 265;
          LODWORD(v112[0]) = v49;
          sub_1C6131AAC(v123, v112, (uint64_t)v125);
          v110[0] = (uint64_t)" is invalid";
          v111 = 259;
LABEL_142:
          v87 = v110;
          goto LABEL_137;
        }
        v94 = v48;
        v101 = v41;
        if ((unsigned __int16)(v50 - 13) <= 0xFFF3u)
        {
          v119[0] = (uint64_t)"bad chained fixups: segment start ";
          v120 = 259;
          v118 = 264;
          LODWORD(v117[0]) = v41;
          sub_1C6131AAC(v119, v117, (uint64_t)v121);
          v115[0] = (uint64_t)" pointer format ";
          v116 = 259;
          sub_1C6131AAC(v121, v115, (uint64_t)v123);
          v113 = 265;
          LODWORD(v112[0]) = v50;
          sub_1C6131AAC(v123, v112, (uint64_t)v125);
          v110[0] = (uint64_t)" is invalid";
          v111 = 259;
          goto LABEL_142;
        }
        LOWORD(v131[0]) = v50;
        *((_QWORD *)&v131[0] + 1) = v55;
        *(_QWORD *)&v131[1] = v56;
        DWORD2(v131[1]) = v51;
        *(_QWORD *)&v133 = 0;
        v132 = 0uLL;
        if (v52)
        {
          if (v48 >= 0x18)
          {
            v57 = 0;
            v58 = 0;
            while (1)
            {
              v59 = *(unsigned __int16 *)(v47 + 2 * v57 + 22);
              v60 = bswap32(v59) >> 16;
              if (!v40)
                LOWORD(v59) = v60;
              if ((_WORD)v59 != 0xFFFF)
              {
                if ((__int16)v59 < 0)
                {
                  v61 = v59 & 0x7FFF;
                  while (1)
                  {
                    v62 = v61;
                    if (2 * (unint64_t)v61 + 24 > v94)
                      break;
                    v63 = bswap32(*(unsigned __int16 *)(v47 + 2 * v61 + 22)) >> 16;
                    if (v40)
                      v64 = *(_WORD *)(v47 + 2 * v61 + 22);
                    else
                      v64 = v63;
                    llvm::object::ChainedFixupsInSegment::walkFixupChain((llvm::object::ChainedFixupsInSegment *)v131, this, v49, v58, v64 & 0x7FFF, (unint64_t *)v125);
                    if (v125[0])
                    {
                      v103 = v125[0];
                      v84 = &v103;
LABEL_127:
                      llvm::report_fatal_error(v84);
                    }
                    v61 = v62 + 1;
                    if (v64 < 0)
                      goto LABEL_91;
                  }
                  v115[0] = (uint64_t)"bad chained fixups: segment start ";
                  v116 = 259;
                  v113 = 264;
                  LODWORD(v112[0]) = v101;
                  sub_1C6131AAC(v115, v112, (uint64_t)v117);
                  v110[0] = (uint64_t)" chain_start index ";
                  v111 = 259;
                  sub_1C6131AAC(v117, v110, (uint64_t)v119);
                  v109 = 265;
                  LODWORD(v108[0]) = v62;
                  sub_1C6131AAC(v119, v108, (uint64_t)v121);
                  v106[0] = (uint64_t)" extends past seg_info size ";
                  v107 = 259;
                  sub_1C6131AAC(v121, v106, (uint64_t)v123);
                  v105 = 264;
                  goto LABEL_124;
                }
                llvm::object::ChainedFixupsInSegment::walkFixupChain((llvm::object::ChainedFixupsInSegment *)v131, this, v49, v58, (unsigned __int16)v59, (unint64_t *)v125);
                if (v125[0])
                {
                  v102 = v125[0];
                  v84 = &v102;
                  goto LABEL_127;
                }
              }
LABEL_91:
              if (v52 <= ++v58)
                goto LABEL_94;
              v57 = v58;
              if (2 * (unint64_t)v58 + 24 > v94)
              {
                v83 = v58;
                goto LABEL_128;
              }
            }
          }
          v83 = 0;
LABEL_128:
          v115[0] = (uint64_t)"bad chained fixups: segment start ";
          v116 = 259;
          v113 = 264;
          LODWORD(v112[0]) = v101;
          sub_1C6131AAC(v115, v112, (uint64_t)v117);
          v110[0] = (uint64_t)" page_start index ";
          v111 = 259;
          sub_1C6131AAC(v117, v110, (uint64_t)v119);
          v109 = 265;
          LODWORD(v108[0]) = v83;
          sub_1C6131AAC(v119, v108, (uint64_t)v121);
          v106[0] = (uint64_t)" extends past seg_info size ";
          v107 = 259;
          sub_1C6131AAC(v121, v106, (uint64_t)v123);
          v105 = 264;
LABEL_124:
          LODWORD(v104[0]) = v94;
          sub_1C6131AAC(v123, v104, (uint64_t)v125);
          v82 = v125;
LABEL_125:
          llvm::report_fatal_error((uint64_t)v82, 1);
        }
LABEL_94:
        v65 = v127.i64[1];
        if (v127.i64[1] >= v128)
        {
          v67 = sub_1C59F5810(&v127, (uint64_t)v131);
          v66 = (void *)v132;
        }
        else
        {
          *(_OWORD *)v127.i64[1] = v131[0];
          *(_OWORD *)(v65 + 12) = *(_OWORD *)((char *)v131 + 12);
          *(_QWORD *)(v65 + 40) = 0;
          *(_QWORD *)(v65 + 48) = 0;
          *(_QWORD *)(v65 + 32) = 0;
          v66 = (void *)v132;
          sub_1C4DFE394((_QWORD *)(v65 + 32), (const void *)v132, *((uint64_t *)&v132 + 1), (uint64_t)(*((_QWORD *)&v132 + 1) - v132) >> 3);
          v67 = (char *)(v65 + 56);
        }
        v35 = v90;
        v36 = v92;
        v41 = v101;
        v127.i64[1] = (uint64_t)v67;
        if (v66)
          operator delete(v66);
      }
      else
      {
        v68 = v127.u64[1];
        v69 = v128;
        if (v127.i64[1] >= v128)
        {
          v71 = v41;
          v72 = v127.i64[0];
          v73 = 0x6DB6DB6DB6DB6DB7 * ((v127.i64[1] - v127.i64[0]) >> 3);
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) > 0x492492492492492)
            goto LABEL_131;
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v128 - v127.i64[0]) >> 3) > v74)
            v74 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v128 - v127.i64[0]) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v128 - v127.i64[0]) >> 3)) >= 0x249249249249249)
            v74 = 0x492492492492492;
          *(_QWORD *)&v132 = &v128;
          if (v74 > 0x492492492492492)
            goto LABEL_139;
          v75 = 56 * v74;
          v76 = (char *)operator new(56 * v74);
          v77 = (uint64_t)&v76[56 * v73];
          *(_QWORD *)&v131[0] = v76;
          *((_QWORD *)&v131[0] + 1) = v77;
          v78 = &v76[v75];
          *(_WORD *)v77 = 0;
          v70 = v77 + 56;
          *(_QWORD *)(v77 + 8) = 0;
          *(_QWORD *)(v77 + 16) = 0;
          *(_DWORD *)(v77 + 24) = 0;
          *(_QWORD *)(v77 + 40) = 0;
          *(_QWORD *)(v77 + 48) = 0;
          *(_QWORD *)(v77 + 32) = 0;
          *(_QWORD *)&v131[1] = v77 + 56;
          *((_QWORD *)&v131[1] + 1) = v78;
          if (v68 == v72)
          {
            v80 = vdupq_n_s64(v68);
            v36 = v92;
            v41 = v71;
          }
          else
          {
            v36 = v92;
            v41 = v71;
            do
            {
              v79 = *(_OWORD *)(v68 - 56);
              *(_OWORD *)(v77 - 44) = *(_OWORD *)(v68 - 44);
              *(_OWORD *)(v77 - 56) = v79;
              *(_QWORD *)(v77 - 16) = 0;
              *(_QWORD *)(v77 - 8) = 0;
              *(_QWORD *)(v77 - 24) = 0;
              *(_OWORD *)(v77 - 24) = *(_OWORD *)(v68 - 24);
              *(_QWORD *)(v77 - 8) = *(_QWORD *)(v68 - 8);
              v77 -= 56;
              *(_QWORD *)(v68 - 24) = 0;
              *(_QWORD *)(v68 - 16) = 0;
              *(_QWORD *)(v68 - 8) = 0;
              v68 -= 56;
            }
            while (v68 != v72);
            v80 = v127;
            v69 = v128;
            v78 = (char *)*((_QWORD *)&v131[1] + 1);
            v70 = *(_QWORD *)&v131[1];
          }
          v35 = v90;
          v127.i64[0] = v77;
          v127.i64[1] = v70;
          *(int64x2_t *)((char *)v131 + 8) = v80;
          v128 = (unint64_t)v78;
          *((_QWORD *)&v131[1] + 1) = v69;
          *(_QWORD *)&v131[0] = v80.i64[0];
          sub_1C59F57B0((uint64_t)v131);
        }
        else
        {
          *(_WORD *)v127.i64[1] = 0;
          v70 = v68 + 56;
          *(_QWORD *)(v68 + 8) = 0;
          *(_QWORD *)(v68 + 16) = 0;
          *(_DWORD *)(v68 + 24) = 0;
          *(_QWORD *)(v68 + 40) = 0;
          *(_QWORD *)(v68 + 48) = 0;
          *(_QWORD *)(v68 + 32) = 0;
        }
        v127.i64[1] = v70;
      }
      ++v41;
    }
    while (v41 != v96);
  }
  *(_BYTE *)(v88 + 24) &= ~1u;
  *(int64x2_t *)v88 = v127;
  *(_QWORD *)(v88 + 16) = v128;
  v127 = 0uLL;
  v128 = 0;
  if (!v7)
    goto LABEL_119;
LABEL_118:
  operator delete(v7);
LABEL_119:
  *(_QWORD *)&v131[0] = &v127;
  sub_1C59F5360((void ***)v131);
  if ((v138 & 1) != 0)
  {
    if (v135)
      (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  }
}

uint64_t llvm::object::MachOChainedFixupEntry::moveToFirst(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = -1;
  *(_BYTE *)(this + 80) = 0;
  *(_DWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  return llvm::object::MachOChainedFixupEntry::moveNext(this);
}

uint64_t llvm::object::MachOChainedFixupEntry::moveNext(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD v60[2];
  unint64_t *v61;
  __int16 v62;
  _QWORD v63[2];
  const char *v64;
  __int16 v65;
  uint64_t v66[2];
  unint64_t *v67;
  __int16 v68;
  uint64_t v69[2];
  const char *v70;
  __int16 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v1 = *(_QWORD **)this;
  if (*(_BYTE *)(this + 80))
    goto LABEL_2;
  v2 = this;
  v3 = (int *)(this + 24);
  v4 = (_OWORD *)(this + 32);
  v5 = *(_QWORD *)(this + 8);
  while (2)
  {
    v6 = *(_QWORD *)(v5 + 352);
    if (v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = *v3;
      if (*v3 == -1)
      {
        LODWORD(v6) = 0;
        *(_DWORD *)(v2 + 24) = 0;
LABEL_27:
        *(_DWORD *)(v2 + 144) = 0;
        goto LABEL_92;
      }
    }
    v8 = *(_QWORD *)(v2 + 120);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v2 + 128) - v8) >> 3) <= (unint64_t)v7)
      goto LABEL_107;
    v9 = *(unsigned int *)(v2 + 144);
    v10 = v8 + 56 * v7;
    v12 = *(_QWORD *)(v10 + 32);
    v13 = *(_QWORD *)(v10 + 40);
    v11 = (_QWORD *)(v10 + 32);
    if (v9 >= (v13 - v12) >> 3)
    {
      if (v6)
      {
        LODWORD(v6) = 1;
        *(_BYTE *)(v2 + 80) = 1;
      }
      else
      {
        ++*v3;
      }
      goto LABEL_27;
    }
    v14 = (unsigned __int16 *)(v8 + 56 * v7);
    *(_QWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 152) = 0;
    *v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v15 = *v14;
    v74 = *((_QWORD *)v14 + 2);
    *(_DWORD *)(v2 + 144) = v9 + 1;
    v16 = *(_QWORD *)(*v11 + 8 * v9);
    if (v6)
      llvm::object::MachOChainedFixupEntry::findSegmentIndexAndOffset((llvm::object::MachOChainedFixupEntry *)v2, *(_QWORD *)(*v11 + 8 * v9), v3, &v74);
    switch(v15)
    {
      case 1u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xCu:
        v17 = sub_1C59E2C54(*(_QWORD *)(v2 + 8), (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + v16));
        *(_QWORD *)(v2 + 72) = v17;
        LODWORD(v18) = v16 - v74;
        *(_QWORD *)(v2 + 16) = v16 - v74;
        *(_BYTE *)(v2 + 152) = v17 < 0;
        if ((v17 & 0x4000000000000000) != 0)
        {
          v22 = HIDWORD(v17) & 0x7FFFF;
          if (v15 == 12)
            v23 = v17 & 0xFFFFFF;
          else
            v23 = (unsigned __int16)v17;
          v73 = v23;
          if (v17 < 0)
            v22 = 0;
          v29 = *(_QWORD *)(v2 + 96);
          if (v23 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v2 + 104) - v29) >> 3))
          {
            v59 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v2 + 104) - v29) >> 3);
            v60[0] = "out of range bind ordinal ";
            v61 = &v73;
            v62 = 3075;
            v63[0] = v60;
            v64 = " (num entries: ";
            v65 = 770;
            v66[0] = (uint64_t)v63;
            v67 = &v59;
            v68 = 2562;
            v69[0] = (uint64_t)v66;
            v70 = ")";
            v71 = 770;
            this = sub_1C59D7FE0((uint64_t *)&v72, v69);
            v56 = *(uint64_t **)v2;
            v57 = v72;
            goto LABEL_106;
          }
          v30 = (int *)(v29 + 40 * v23);
          v31 = *(_DWORD *)(v2 + 148);
          if (v31 == 2)
          {
            v32 = *v30;
            if (v32 != -3)
              goto LABEL_86;
          }
          else if (v31 == 1)
          {
            v32 = *v30;
            if (v32 == -3)
              goto LABEL_86;
          }
          else
          {
            if (v31)
              goto LABEL_86;
            v32 = *v30;
          }
          v49 = v29 + 40 * v23;
          *(_OWORD *)(v2 + 32) = *(_OWORD *)(v49 + 8);
          *(_DWORD *)(v2 + 48) = v32;
          if (*(_BYTE *)(v49 + 32))
            *(_DWORD *)(v2 + 52) = 1;
          if (v22 >= 0x40000)
            v22 |= 0xFFFFFFFFFFFC0000;
          v50 = *(_QWORD *)(v29 + 40 * v23 + 24);
          goto LABEL_76;
        }
        v19 = *(_DWORD *)(v2 + 148);
        if (v19 != 3 && v19)
          goto LABEL_86;
        if (v17 < 0)
        {
          v20 = v17;
          goto LABEL_66;
        }
        v20 = v17 & 0x7FFFFFFFFFFLL | ((unint64_t)((unint64_t)v17 >> 43) << 56);
        *(_QWORD *)(v2 + 64) = v20;
        v21 = 1;
        if (v15 <= 0xC && ((1 << v15) & 0x1280) != 0)
          goto LABEL_66;
        goto LABEL_87;
      case 2u:
      case 6u:
        v24 = sub_1C59E2C54(*(_QWORD *)(v2 + 8), (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + v16));
        *(_QWORD *)(v2 + 72) = v24;
        LODWORD(v18) = v16 - v74;
        *(_QWORD *)(v2 + 16) = v16 - v74;
        if ((v24 & 0x8000000000000000) != 0)
        {
          v43 = v24 & 0xFFFFFF;
          v44 = *(_QWORD *)(v2 + 96);
          v45 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v2 + 104) - v44) >> 3);
          if ((v24 & 0xFFFFFF) >= v45)
          {
            v72 = v24 & 0xFFFFFF;
            v59 = v45;
            v60[0] = "out of range bind ordinal ";
            v61 = &v72;
            v62 = 3075;
            v63[0] = v60;
            v64 = " (num entries: ";
            v65 = 770;
            v58 = (uint64_t *)&v59;
            goto LABEL_105;
          }
          v46 = (int *)(v44 + 40 * v43);
          v47 = *(_DWORD *)(v2 + 148);
          if (v47 == 2)
          {
            v48 = *v46;
            if (v48 != -3)
              goto LABEL_86;
          }
          else if (v47 == 1)
          {
            v48 = *v46;
            if (v48 == -3)
              goto LABEL_86;
          }
          else
          {
            if (v47)
              goto LABEL_86;
            v48 = *v46;
          }
          v52 = v44 + 40 * v43;
          *(_OWORD *)(v2 + 32) = *(_OWORD *)(v52 + 8);
          *(_DWORD *)(v2 + 48) = v48;
          if (*(_BYTE *)(v52 + 32))
            *(_DWORD *)(v2 + 52) = 1;
          v51 = *(_QWORD *)(v44 + 40 * v43 + 24) + BYTE3(v24);
          goto LABEL_83;
        }
        v25 = *(_DWORD *)(v2 + 148);
        if (v25 != 3 && v25)
          goto LABEL_86;
        v20 = v24 & 0xFFFFFFFFFLL | ((unint64_t)(v24 >> 36) << 56);
        *(_QWORD *)(v2 + 64) = v20;
        if (v15 == 6)
        {
LABEL_66:
          v28 = *(_QWORD *)(v2 + 88) + v20;
LABEL_67:
          *(_QWORD *)(v2 + 64) = v28;
        }
        goto LABEL_84;
      case 3u:
        v33 = sub_1C59E2CBC(*(_QWORD *)(v2 + 8), (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + v16));
        *(_QWORD *)(v2 + 72) = v33;
        LODWORD(v18) = v16 - v74;
        *(_QWORD *)(v2 + 16) = v16 - v74;
        if ((v33 & 0x80000000) == 0)
          goto LABEL_57;
        v34 = v33 & 0xFFFFF;
        v35 = *(_QWORD *)(v2 + 96);
        v36 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v2 + 104) - v35) >> 3);
        if (v36 > v34)
        {
          v37 = (int *)(v35 + 40 * v34);
          v38 = *(_DWORD *)(v2 + 148);
          switch(v38)
          {
            case 2:
              v39 = *v37;
              if (v39 == -3)
                goto LABEL_95;
              break;
            case 1:
              v39 = *v37;
              if (v39 != -3)
                goto LABEL_95;
              break;
            case 0:
              v39 = *v37;
LABEL_95:
              v54 = v35 + 40 * v34;
              *(_OWORD *)(v2 + 32) = *(_OWORD *)(v54 + 8);
              *(_DWORD *)(v2 + 48) = v39;
              if (*(_BYTE *)(v54 + 32))
                *(_DWORD *)(v2 + 52) = 1;
              v50 = *(_QWORD *)(v35 + 40 * v34 + 24);
              v22 = (v33 >> 20) & 0x3F;
LABEL_76:
              v51 = v50 + v22;
LABEL_83:
              *(_QWORD *)(v2 + 56) = v51;
LABEL_84:
              v21 = 1;
              goto LABEL_87;
          }
LABEL_86:
          v21 = 0;
LABEL_87:
          v5 = *(_QWORD *)(v2 + 8);
          if ((*(_DWORD *)(v5 + 8) & 0xFFFFFFFE) == 0x12)
            v53 = 8;
          else
            v53 = 4;
          this = (uint64_t)llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(v5 + 264), *(_DWORD *)(v2 + 24), v18, v53, 1u, 0);
          if (this)
          {
            HIBYTE(v71) = 1;
            if (*(_BYTE *)this)
            {
              v69[0] = this;
              v55 = 3;
            }
            else
            {
              v55 = 1;
            }
            LOBYTE(v71) = v55;
            this = sub_1C59D7FE0(v66, v69);
            **(_QWORD **)v2 = v66[0];
            *(_BYTE *)(v2 + 80) = 1;
            goto LABEL_2;
          }
          LODWORD(v6) = *(unsigned __int8 *)(v2 + 80);
          if ((v21 & 1) != 0)
            goto LABEL_2;
LABEL_92:
          if ((_DWORD)v6)
            goto LABEL_2;
          continue;
        }
        v60[0] = "out of range bind ordinal ";
        v61 = (unint64_t *)(v33 & 0xFFFFF);
        v62 = 2051;
        v63[0] = v60;
        v64 = " (num entries: ";
        v65 = 770;
        v72 = v36;
        v58 = (uint64_t *)&v72;
LABEL_105:
        v66[0] = (uint64_t)v63;
        v67 = (unint64_t *)v58;
        v68 = 2562;
        v69[0] = (uint64_t)v66;
        v70 = ")";
        v71 = 770;
        this = sub_1C59D7FE0((uint64_t *)&v73, v69);
        v56 = *(uint64_t **)v2;
        v57 = v73;
LABEL_106:
        *v56 = v57;
LABEL_107:
        *(_BYTE *)(v2 + 80) = 1;
LABEL_2:
        if (v1)
        {
          if (!*v1)
            *v1 = 0;
        }
        return this;
      case 4u:
        v40 = sub_1C59E2CBC(*(_QWORD *)(v2 + 8), (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + v16));
        *(_QWORD *)(v2 + 72) = v40;
        LODWORD(v18) = v16 - v74;
        *(_QWORD *)(v2 + 16) = v16 - v74;
        v41 = *(_DWORD *)(v2 + 148);
        if (v41 != 3 && v41)
          goto LABEL_86;
        v28 = v40 & 0x3FFFFFFF;
        goto LABEL_67;
      case 5u:
        v33 = sub_1C59E2CBC(*(_QWORD *)(v2 + 8), (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + v16));
        *(_QWORD *)(v2 + 72) = v33;
        LODWORD(v18) = v16 - v74;
        *(_QWORD *)(v2 + 16) = v16 - v74;
LABEL_57:
        v42 = *(_DWORD *)(v2 + 148);
        if (v42 != 3 && v42)
          goto LABEL_86;
        v28 = v33 & 0x3FFFFFF;
        goto LABEL_67;
      case 8u:
      case 0xBu:
        v26 = sub_1C59E2CBC(*(_QWORD *)(v2 + 8), (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + v16));
        *(_QWORD *)(v2 + 72) = v26;
        LODWORD(v18) = v16 - v74;
        *(_QWORD *)(v2 + 16) = v16 - v74;
        v27 = *(_DWORD *)(v2 + 148);
        if (v27 != 3 && v27)
          goto LABEL_86;
        v28 = v26 & 0x3FFFFFFF;
        goto LABEL_67;
      default:
        v21 = 0;
        v18 = *(_QWORD *)(v2 + 16);
        goto LABEL_87;
    }
  }
}

uint64_t llvm::object::MachOChainedFixupEntry::moveToEnd(uint64_t this)
{
  *(_BYTE *)(this + 80) = 1;
  return this;
}

void llvm::object::MachOChainedFixupEntry::findSegmentIndexAndOffset(llvm::object::MachOChainedFixupEntry *this, unint64_t a2, int *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned int *)(v4 + 136);
  if ((_DWORD)v5)
  {
    v10 = 0;
    v11 = *(_QWORD *)(v4 + 128);
    for (i = 16 * v5; i; i -= 16)
    {
      v13 = *(_DWORD *)(v11 + 8);
      if (v13 == 25)
      {
        v20 = 0;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        llvm::object::MachOObjectFile::getSegment64LoadCommand(*((_QWORD *)this + 1), (unint64_t *)v11, (uint64_t)&v16);
        v14 = *((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1) > a2)
          goto LABEL_10;
        v15 = v19 + *((_QWORD *)&v18 + 1);
      }
      else
      {
        if (v13 != 1)
          goto LABEL_10;
        *(_QWORD *)&v19 = 0;
        v17 = 0u;
        v18 = 0u;
        v16 = 0u;
        llvm::object::MachOObjectFile::getSegmentLoadCommand(*((_QWORD *)this + 1), (unint64_t *)v11, (uint64_t)&v16);
        v14 = v18;
        if (v18 > a2)
          goto LABEL_10;
        v15 = (DWORD1(v18) + v18);
      }
      if (v15 > a2)
      {
        *a4 = v14;
        *a3 = v10;
        return;
      }
LABEL_10:
      ++v10;
      v11 += 16;
    }
  }
}

unint64_t sub_1C59E2C54(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t result;
  int v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 1) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v4 = a1;
  result = *a2;
  LODWORD(v4) = *(_DWORD *)(v4 + 8);
  v3 = v4 > 0x13;
  v6 = (1 << v4) & 0xAAC00;
  if (!v3 && v6 != 0)
    return bswap64(result);
  return result;
}

uint64_t sub_1C59E2CBC(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 1) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v4 = a1;
  result = *a2;
  LODWORD(v4) = *(_DWORD *)(v4 + 8);
  v3 = v4 > 0x13;
  v6 = (1 << v4) & 0xAAC00;
  if (!v3 && v6 != 0)
    return bswap32(result);
  return result;
}

BOOL llvm::object::MachOChainedFixupEntry::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80)
      || *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144) && *(_QWORD *)(a1 + 120) == *(_QWORD *)(a2 + 120);
}

double llvm::object::MachORebaseEntry::MachORebaseEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  uint64_t v11;
  char v12;
  double result;

  v11 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, a2, a3);
  *(_QWORD *)(v11 + 96) = a4;
  *(_QWORD *)(v11 + 104) = a5;
  if (a6)
    v12 = 8;
  else
    v12 = 4;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = a4;
  *(_BYTE *)(v11 + 144) = v12;
  *(_WORD *)(v11 + 145) = 0;
  *(_DWORD *)(v11 + 148) = 3;
  *(_BYTE *)(v11 + 152) = 0;
  *(_BYTE *)(v11 + 153) = a7;
  result = 0.0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 188) = 0u;
  return result;
}

{
  uint64_t v11;
  char v12;
  double result;

  v11 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, a2, a3);
  *(_QWORD *)(v11 + 96) = a4;
  *(_QWORD *)(v11 + 104) = a5;
  if (a6)
    v12 = 8;
  else
    v12 = 4;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = a4;
  *(_BYTE *)(v11 + 144) = v12;
  *(_WORD *)(v11 + 145) = 0;
  *(_DWORD *)(v11 + 148) = 3;
  *(_BYTE *)(v11 + 152) = 0;
  *(_BYTE *)(v11 + 153) = a7;
  result = 0.0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 188) = 0u;
  return result;
}

double llvm::object::MachORebaseBindEntry::MachORebaseBindEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, char a8)
{
  uint64_t v13;
  char v14;
  double result;

  v13 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, a2, a3);
  *(_QWORD *)(v13 + 96) = a4;
  *(_QWORD *)(v13 + 104) = a5;
  if (a6)
    v14 = 8;
  else
    v14 = 4;
  *(_QWORD *)(v13 + 128) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  *(_QWORD *)(v13 + 120) = a4;
  *(_BYTE *)(v13 + 144) = v14;
  *(_WORD *)(v13 + 145) = 0;
  *(_DWORD *)(v13 + 148) = a7;
  *(_BYTE *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 153) = a8;
  result = 0.0;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 188) = 0u;
  return result;
}

{
  uint64_t v13;
  char v14;
  double result;

  v13 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, a2, a3);
  *(_QWORD *)(v13 + 96) = a4;
  *(_QWORD *)(v13 + 104) = a5;
  if (a6)
    v14 = 8;
  else
    v14 = 4;
  *(_QWORD *)(v13 + 128) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  *(_QWORD *)(v13 + 120) = a4;
  *(_BYTE *)(v13 + 144) = v14;
  *(_WORD *)(v13 + 145) = 0;
  *(_DWORD *)(v13 + 148) = a7;
  *(_BYTE *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 153) = a8;
  result = 0.0;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 188) = 0u;
  return result;
}

void llvm::object::MachORebaseBindEntry::moveToFirst(llvm::object::MachORebaseBindEntry *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = -1;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 15) = *((_QWORD *)this + 12);
  llvm::object::MachORebaseBindEntry::moveNext(this);
}

void llvm::object::MachORebaseBindEntry::moveNext(llvm::object::MachORebaseBindEntry *this)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  unint64_t v27;
  const char *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  _BYTE *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  _BYTE *v74;
  char v75;
  uint64_t v76;
  _BYTE *v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  char v86;
  uint64_t v87;
  _BYTE *v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _BYTE *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  _BYTE *v103;
  char v104;
  uint64_t v105;
  const char *v106;
  char v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  _BYTE *v115;
  uint64_t v116;
  const char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  const char *v122;
  const char *v123;
  _BYTE *v124;
  int v125;
  char v126;
  const char *v127;
  uint64_t v128;
  _BYTE *v129;
  int v130;
  const char *v131;
  char v132;
  const char *v133;
  _BYTE *v134;
  int v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  const char *v144;
  int v145;
  unsigned __int8 v146;
  uint64_t v147;
  unsigned __int8 *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  const char *v154;
  int v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned __int8 *v161;
  uint64_t v162;
  unsigned __int8 *v163;
  const char *v164;
  int v165;
  unsigned __int8 v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  const char *v175;
  int v176;
  unsigned __int8 v177;
  uint64_t v178;
  unsigned __int8 *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  const char *v183;
  int v184;
  uint64_t v185;
  const char *v186;
  int v187;
  int v188;
  uint64_t *v189;
  int v190;
  const char *v191;
  char v192;
  char v193;
  const char *v194;
  uint64_t *v195;
  uint64_t v196;
  unsigned __int8 *v197;
  int v198;
  char v199;
  const char *v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  unsigned __int8 *v203;
  int v204;
  char v205;
  unsigned __int8 *v206;
  const char **v207;
  const char *v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  char *v212;
  const char *v213;
  char *v214;
  char v215;
  uint64_t v216;
  char v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  const char *v223;
  const char *v224;
  char v225;
  int v226;
  const char *v227;
  unint64_t v228;
  unint64_t v229;
  const char *v230;
  int v231;
  unint64_t v232;
  const char *v233;
  int v234;
  const char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  char *v240;
  char v241;
  uint64_t v242;
  char v243;
  int v244;
  const char *v245;
  char *v246;
  int v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  unsigned int v251;
  char *v252;
  const char *v253;
  char *v254;
  char v255;
  uint64_t v256;
  char v257;
  const char *v258;
  char *v259;
  const char *v260;
  int v261;
  const char *v262;
  unint64_t v263;
  _QWORD *v264;
  unsigned __int8 *v265;
  uint64_t v266[2];
  uint64_t v267;
  __int16 v268;
  uint64_t v269[2];
  uint64_t *v270;
  __int16 v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  const char *v275;
  __int16 v276;
  const char *v277;
  uint64_t v278;
  const char *v279;
  __int16 v280;
  uint64_t v281[2];
  const char **v282;
  __int16 v283;

  v2 = *(_QWORD **)this;
  v3 = *((_DWORD *)this + 37);
  if (v3 != 3)
  {
    if (!*((_BYTE *)this + 153))
    {
LABEL_38:
      v4 = *((_QWORD *)this + 16);
      *((_QWORD *)this + 2) += *((_QWORD *)this + 17);
      if (v4)
        goto LABEL_39;
      v27 = *((_QWORD *)this + 15);
      if (v27 == *((_QWORD *)this + 12) + *((_QWORD *)this + 13))
        goto LABEL_174;
      v28 = "malformed sleb128, extends past end";
      while (2)
      {
        v29 = (_BYTE *)(v27 + 1);
        *((_QWORD *)this + 14) = v27;
        *((_QWORD *)this + 15) = v27 + 1;
        v30 = *(unsigned __int8 *)v27;
        v31 = *(_BYTE *)v27;
        v32 = v30 & 0xF;
        switch(v30 >> 4)
        {
          case 0u:
            v33 = *((_QWORD *)this + 12);
            v34 = *((_QWORD *)this + 13);
            v35 = v33 + v34;
            if (*((_DWORD *)this + 37) == 1 && (unint64_t)v29 < v35)
            {
              v37 = 0;
              v38 = ~v27 + v34 + v33;
              do
              {
                v39 = *v29++;
                v37 |= v39 != 0;
                --v38;
              }
              while (v38);
              if ((v37 & 1) != 0)
                goto LABEL_173;
            }
            *((_BYTE *)this + 80) = 1;
            goto LABEL_473;
          case 1u:
            if (*((_DWORD *)this + 37) != 2)
            {
              *((_DWORD *)this + 12) = v32;
              *((_BYTE *)this + 152) = 1;
              v90 = (const char *)*(unsigned int *)(*((_QWORD *)this + 1) + 112);
              if (v90 < v32)
              {
                v266[0] = (uint64_t)"for BIND_OPCODE_SET_DYLIB_ORDINAL_IMM bad library ordinal: ";
                v267 = v30 & 0xF;
                v268 = 2307;
                v269[0] = (uint64_t)v266;
                v270 = (uint64_t *)" (max ";
                v271 = 770;
                v273 = (const char *)v269;
                v275 = v90;
                v276 = 2306;
                v277 = (const char *)&v273;
                v279 = ") for opcode at: 0x";
                v280 = 770;
                v48 = *((_QWORD *)this + 12);
                goto LABEL_283;
              }
              goto LABEL_173;
            }
            v185 = v27 - *((_QWORD *)this + 12);
            v186 = "BIND_OPCODE_SET_DYLIB_ORDINAL_IMM not allowed in weak bind table for opcode at: 0x";
            goto LABEL_422;
          case 2u:
            if (*((_DWORD *)this + 37) == 2)
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB not allowed in weak bind table for opcode at: 0x";
              goto LABEL_422;
            }
            v70 = 0;
            v71 = 0;
            v72 = 0;
            v48 = *((_QWORD *)this + 12);
            v73 = *((_QWORD *)this + 13);
            v74 = (_BYTE *)(v48 + v73);
            do
            {
              if (&v29[v70] == v74)
              {
                LODWORD(v70) = v48 + v73 + ~(_DWORD)v27;
                v123 = "malformed uleb128, extends past end";
LABEL_189:
                v129 = &v29[v70];
                if (v129 <= v74)
                  v74 = v129;
                *((_QWORD *)this + 15) = v74;
                *((_DWORD *)this + 12) = 0;
                *((_BYTE *)this + 152) = 1;
                v130 = *(unsigned __int8 *)v123;
                v131 = "for BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB ";
                if (*v123)
                {
                  v273 = "for BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB ";
                  v275 = v123;
LABEL_193:
                  v276 = 771;
                  v132 = 2;
                }
                else
                {
LABEL_464:
                  v273 = v131;
                  v276 = 259;
                  v132 = 3;
                }
                if (v130)
                  v131 = (const char *)&v273;
                v277 = v131;
                v279 = " for opcode at: 0x";
                goto LABEL_468;
              }
              v75 = v29[v70];
              v76 = v75 & 0x7F;
              if (v72 >= 0x40 && (v75 & 0x7F) != 0 || (unint64_t)(v76 << v72) >> v72 != v76)
              {
                v123 = "uleb128 too big for uint64";
                goto LABEL_189;
              }
              v71 += v76 << v72;
              v72 += 7;
              ++v70;
            }
            while (v75 < 0);
            v77 = &v29[v70];
            if (v77 <= v74)
              v74 = v77;
            *((_QWORD *)this + 15) = v74;
            *((_DWORD *)this + 12) = v71;
            *((_BYTE *)this + 152) = 1;
            v78 = (const char *)*(unsigned int *)(*((_QWORD *)this + 1) + 112);
            if ((int)v78 < (int)v71)
            {
              v266[0] = (uint64_t)"for BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB bad library ordinal: ";
              v267 = v71;
              v268 = 2307;
              v269[0] = (uint64_t)v266;
              v270 = (uint64_t *)" (max ";
              v271 = 770;
              v273 = (const char *)v269;
              v275 = v78;
              v276 = 2306;
              v277 = (const char *)&v273;
              v279 = ") for opcode at: 0x";
              v280 = 770;
LABEL_283:
              v265 = (unsigned __int8 *)(v27 - v48);
              v281[0] = (uint64_t)&v277;
              v282 = (const char **)&v265;
              v283 = 3586;
              sub_1C59D7FE0(&v272, v281);
              v195 = *(uint64_t **)this;
              v196 = v272;
              goto LABEL_472;
            }
LABEL_173:
            v27 = *((_QWORD *)this + 15);
            continue;
          case 3u:
            if (*((_DWORD *)this + 37) != 2)
            {
              if ((v30 & 0xF) != 0)
              {
                v79 = (const char *)(*(_DWORD *)&v31 | 0xFFFFFFF0);
                *((_DWORD *)this + 12) = (_DWORD)v79;
                if (v79 <= 0xFFFFFFFC)
                {
                  v208 = "for BIND_OPCODE_SET_DYLIB_SPECIAL_IMM unknown special ordinal: ";
LABEL_325:
                  v273 = v208;
                  v275 = v79;
                  v276 = 2307;
                  v277 = (const char *)&v273;
                  v279 = " for opcode at: 0x";
                  v280 = 770;
LABEL_352:
                  v48 = *((_QWORD *)this + 12);
                  goto LABEL_469;
                }
              }
              else
              {
                *((_DWORD *)this + 12) = 0;
              }
              *((_BYTE *)this + 152) = 1;
              goto LABEL_173;
            }
            v185 = v27 - *((_QWORD *)this + 12);
            v186 = "BIND_OPCODE_SET_DYLIB_SPECIAL_IMM not allowed in weak bind table for opcode at: 0x";
            goto LABEL_422;
          case 4u:
            *((_DWORD *)this + 13) = v32;
            v40 = *((_QWORD *)this + 12);
            v41 = *((_QWORD *)this + 13);
            v42 = (unsigned __int8 *)(v27 + 1);
            if (!*v29)
              goto LABEL_56;
            v43 = (unsigned __int8 *)(v27 + 2);
            do
            {
              v42 = v43 - 1;
              if ((unint64_t)(v43 - 1) >= v40 + v41)
                goto LABEL_56;
              *((_QWORD *)this + 15) = v43;
            }
            while (*v43++);
            v42 = v43 - 1;
LABEL_56:
            if (v42 != (unsigned __int8 *)(v40 + v41))
            {
              *((_QWORD *)this + 4) = v29;
              *((_QWORD *)this + 5) = v42 - v29;
              *((_QWORD *)this + 15) = v42 + 1;
              if (v32 >= 8 && *((_DWORD *)this + 37) == 2)
                goto LABEL_475;
              goto LABEL_173;
            }
            v185 = v27 - v40;
            v186 = "for BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM symbol name extends past opcodes for opcode at: 0x";
            goto LABEL_422;
          case 5u:
            *((_BYTE *)this + 146) = v32;
            if (v32 < 4)
              goto LABEL_173;
            v79 = (const char *)(v30 & 0xF);
            v208 = "for BIND_OPCODE_SET_TYPE_IMM bad bind type: ";
            goto LABEL_325;
          case 6u:
            v91 = 0;
            v92 = 0;
            v93 = 0;
            v48 = *((_QWORD *)this + 12);
            v94 = (_BYTE *)(v48 + *((_QWORD *)this + 13));
            LODWORD(v95) = v27 + 1;
            while (&v29[v91] != v94)
            {
              v96 = v29[v91];
              v97 = v96 & 0x7F;
              if (v93 >= 0x40)
              {
                if (((v92 >> 63) & 0x7F) != v97)
                {
                  LODWORD(v95) = v27 + v91 + 1;
                  v28 = "sleb128 too big for int64";
                  goto LABEL_460;
                }
              }
              else if (v93 == 63)
              {
                v98 = (_DWORD)v97 == 127 || (_DWORD)v97 == 0;
                if (!v98)
                {
                  v28 = "sleb128 too big for int64";
                  goto LABEL_460;
                }
              }
              v92 |= v97 << v93;
              v93 += 7;
              LODWORD(v95) = v95 + 1;
              ++v91;
              if ((v96 & 0x80) == 0)
              {
                v108 = (v96 & 0x40) == 0 || v93 > 0x3F;
                v109 = -1 << v93;
                if (v108)
                  v109 = 0;
                v110 = v92 | v109;
                v111 = &v29[v91];
                if (v111 <= v94)
                  v94 = v111;
                *((_QWORD *)this + 15) = v94;
                *((_QWORD *)this + 7) = v110;
                goto LABEL_173;
              }
            }
            v95 = v48 + *((_QWORD *)this + 13);
LABEL_460:
            if (&v29[(v95 - (_DWORD)v29)] <= v94)
              v94 = &v29[(v95 - (_DWORD)v29)];
            *((_QWORD *)this + 15) = v94;
            *((_QWORD *)this + 7) = 0;
            v130 = *(unsigned __int8 *)v28;
            v131 = "for BIND_OPCODE_SET_ADDEND_SLEB ";
            if (!*v28)
              goto LABEL_464;
            v273 = "for BIND_OPCODE_SET_ADDEND_SLEB ";
            v275 = v28;
            goto LABEL_193;
          case 7u:
            v80 = 0;
            v81 = 0;
            v82 = 0;
            *((_DWORD *)this + 6) = v32;
            v84 = *((_QWORD *)this + 12);
            v83 = *((_QWORD *)this + 13);
            v85 = (_BYTE *)(v84 + v83);
            while (1)
            {
              if (&v29[v80] == v85)
              {
                LODWORD(v80) = v84 + v83 + ~(_DWORD)v27;
                v122 = "malformed uleb128, extends past end";
                goto LABEL_178;
              }
              v86 = v29[v80];
              v87 = v86 & 0x7F;
              if (v82 >= 0x40 && (v86 & 0x7F) != 0)
                break;
              if ((unint64_t)(v87 << v82) >> v82 != v87)
                break;
              v81 += v87 << v82;
              v82 += 7;
              ++v80;
              if ((v86 & 0x80) == 0)
              {
                v88 = &v29[v80];
                if (v88 <= v85)
                  v85 = v88;
                *((_QWORD *)this + 15) = v85;
                *((_QWORD *)this + 2) = v81;
                v89 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), v32, v81, *((unsigned __int8 *)this + 144), 1u, 0);
                if (!v89)
                  goto LABEL_173;
                v226 = *(unsigned __int8 *)v89;
                v227 = "for BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
                if (*v89)
                {
                  v273 = "for BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
                  v275 = v89;
                  v276 = 771;
                  v192 = 2;
                }
                else
                {
                  v273 = "for BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
                  v276 = 259;
                  v192 = 3;
                }
                if (v226)
                  v227 = (const char *)&v273;
                v277 = v227;
                v279 = " for opcode at: 0x";
LABEL_450:
                LOBYTE(v280) = v192;
LABEL_187:
                HIBYTE(v280) = 3;
                v128 = v27 - v84;
                goto LABEL_470;
              }
            }
            v122 = "uleb128 too big for uint64";
LABEL_178:
            v124 = &v29[v80];
            if (v124 <= v85)
              v85 = v124;
            *((_QWORD *)this + 15) = v85;
            *((_QWORD *)this + 2) = 0;
            v125 = *(unsigned __int8 *)v122;
            if (*v122)
            {
              v273 = "for BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
              v275 = v122;
              v276 = 771;
              v126 = 2;
            }
            else
            {
              v273 = "for BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
              v276 = 259;
              v126 = 3;
            }
            v98 = v125 == 0;
            v127 = (const char *)&v273;
            if (v98)
              v127 = "for BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
            v277 = v127;
            v279 = " for opcode at: 0x";
LABEL_186:
            LOBYTE(v280) = v126;
            goto LABEL_187;
          case 8u:
            v99 = 0;
            v100 = 0;
            v101 = 0;
            v84 = *((_QWORD *)this + 12);
            v102 = *((_QWORD *)this + 13);
            v103 = (_BYTE *)(v84 + v102);
            while (&v29[v99] != v103)
            {
              v104 = v29[v99];
              v105 = v104 & 0x7F;
              if (v101 >= 0x40 && (v104 & 0x7F) != 0 || (unint64_t)(v105 << v101) >> v101 != v105)
              {
                v107 = 0;
                v100 = 0;
                v106 = "uleb128 too big for uint64";
                goto LABEL_159;
              }
              v100 += v105 << v101;
              v101 += 7;
              ++v99;
              if ((v104 & 0x80) == 0)
              {
                v106 = 0;
                v107 = 1;
                goto LABEL_159;
              }
            }
            v107 = 0;
            v100 = 0;
            LODWORD(v99) = v84 + v102 + ~(_DWORD)v27;
            v106 = "malformed uleb128, extends past end";
LABEL_159:
            v115 = &v29[v99];
            if (v115 <= v103)
              v103 = v115;
            *((_QWORD *)this + 15) = v103;
            v116 = *((_QWORD *)this + 2) + v100;
            *((_QWORD *)this + 2) = v116;
            if ((v107 & 1) != 0)
            {
              v117 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v116, *((unsigned __int8 *)this + 144), 1u, 0);
              if (!v117)
                goto LABEL_173;
              if (*v117)
              {
                v273 = "for BIND_OPCODE_ADD_ADDR_ULEB ";
                v275 = v117;
                v276 = 771;
                v193 = 2;
                v194 = (const char *)&v273;
              }
              else
              {
                v194 = "for BIND_OPCODE_ADD_ADDR_ULEB ";
                v273 = "for BIND_OPCODE_ADD_ADDR_ULEB ";
                v276 = 259;
                v193 = 3;
              }
              v277 = v194;
              v278 = v274;
              v279 = " for opcode at: 0x";
              LOBYTE(v280) = v193;
              goto LABEL_187;
            }
            v190 = *(unsigned __int8 *)v106;
            v191 = "for BIND_OPCODE_ADD_ADDR_ULEB ";
            if (!*v106)
              goto LABEL_446;
            v273 = "for BIND_OPCODE_ADD_ADDR_ULEB ";
            v275 = v106;
LABEL_279:
            v276 = 771;
            v192 = 2;
            goto LABEL_447;
          case 9u:
            v56 = *((unsigned __int8 *)this + 144);
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 17) = v56;
            v57 = *((unsigned __int8 *)this + 153);
            if (*((_BYTE *)this + 153)
              || (v58 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), *((_QWORD *)this + 2), v56, 1u, 0)) == 0)
            {
              v59 = *((_QWORD *)this + 5);
              if (v59)
              {
                if (*((_BYTE *)this + 152) || *((_DWORD *)this + 37) == 2)
                {
                  if (!v57)
                    goto LABEL_475;
                  v61 = (char *)*((_QWORD *)this + 21);
                  v60 = (char *)*((_QWORD *)this + 22);
                  v62 = (v60 - v61) >> 5;
                  if (v62 < *((_QWORD *)this + 20))
                  {
                    v264 = v2;
                    v63 = *((_QWORD *)this + 4);
                    v64 = *((_QWORD *)this + 7);
                    v65 = *((_DWORD *)this + 12);
                    v66 = *((_DWORD *)this + 13);
                    v67 = *((_BYTE *)this + 146);
                    v68 = *((_QWORD *)this + 23);
                    if ((unint64_t)v60 >= v68)
                    {
                      v112 = v62 + 1;
                      if ((v62 + 1) >> 59)
                        goto LABEL_457;
                      v113 = v68 - (_QWORD)v61;
                      if (v113 >> 4 > v112)
                        v112 = v113 >> 4;
                      if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFE0)
                        v112 = 0x7FFFFFFFFFFFFFFLL;
                      v263 = v112;
                      if (v112)
                      {
                        if (v112 >> 59)
                          sub_1C4764EE4();
                        v114 = (char *)operator new(32 * v112);
                      }
                      else
                      {
                        v114 = 0;
                      }
                      v118 = &v114[32 * v62];
                      *(_QWORD *)v118 = v63;
                      *((_QWORD *)v118 + 1) = v59;
                      *((_QWORD *)v118 + 2) = v64;
                      *((_DWORD *)v118 + 6) = v65;
                      v118[28] = v66;
                      v118[29] = v67;
                      v119 = v118;
                      if (v60 == v61)
                      {
                        v120 = v263;
                        v2 = v264;
                        v28 = "malformed sleb128, extends past end";
                      }
                      else
                      {
                        v120 = v263;
                        v2 = v264;
                        v28 = "malformed sleb128, extends past end";
                        do
                        {
                          v121 = *((_OWORD *)v60 - 2);
                          *(_OWORD *)(v119 - 18) = *(_OWORD *)(v60 - 18);
                          *((_OWORD *)v119 - 2) = v121;
                          v119 -= 32;
                          v60 -= 32;
                        }
                        while (v60 != v61);
                        v60 = (char *)*((_QWORD *)this + 21);
                      }
                      v69 = v118 + 32;
                      *((_QWORD *)this + 21) = v119;
                      *((_QWORD *)this + 22) = v118 + 32;
                      *((_QWORD *)this + 23) = &v114[32 * v120];
                      if (v60)
                        operator delete(v60);
                    }
                    else
                    {
                      *(_QWORD *)v60 = v63;
                      *((_QWORD *)v60 + 1) = v59;
                      *((_QWORD *)v60 + 2) = v64;
                      *((_DWORD *)v60 + 6) = v65;
                      v60[28] = v66;
                      v69 = v60 + 32;
                      v60[29] = v67;
                      v2 = v264;
                      v28 = "malformed sleb128, extends past end";
                    }
                    *((_QWORD *)this + 22) = v69;
                    goto LABEL_173;
                  }
                  v185 = v27 - *((_QWORD *)this + 12);
                  v186 = "at BIND_OPCODE_DO_BIND (incorrect ordinal table size, number of BIND_OPCODE_DO_BIND opcodes exc"
                         "eed the count in previous BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB) at BIND_OPC"
                         "ODE_DO_BIND at: 0x";
                }
                else
                {
                  v185 = v27 - *((_QWORD *)this + 12);
                  v186 = "for BIND_OPCODE_DO_BIND missing preceding BIND_OPCODE_SET_DYLIB_ORDINAL_* for opcode at: 0x";
                }
              }
              else
              {
                v185 = v27 - *((_QWORD *)this + 12);
                v186 = "for BIND_OPCODE_DO_BIND missing preceding BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM for opcode at: 0x";
              }
LABEL_422:
              v273 = (const char *)v185;
              v281[0] = (uint64_t)v186;
              v282 = &v273;
              v283 = 3587;
              sub_1C59D7FE0((uint64_t *)&v277, v281);
              v195 = *(uint64_t **)this;
              v196 = (uint64_t)v277;
              goto LABEL_472;
            }
            v222 = *(unsigned __int8 *)v58;
            v223 = "for BIND_OPCODE_DO_BIND ";
            if (!*v58)
              goto LABEL_347;
            goto LABEL_343;
          case 0xAu:
            v187 = *((_DWORD *)this + 37);
            if (v187 == 1)
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB not allowed in lazy bind table for opcode at: 0x";
              goto LABEL_422;
            }
            v218 = *((_DWORD *)this + 6);
            v220 = *((_QWORD *)this + 1);
            v219 = *((_QWORD *)this + 2);
            v221 = *((unsigned __int8 *)this + 144);
            v58 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(v220 + 264), v218, v219, *((unsigned __int8 *)this + 144), 1u, 0);
            if (v58)
            {
              v222 = *(unsigned __int8 *)v58;
              v223 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB ";
              if (*v58)
                goto LABEL_343;
              goto LABEL_347;
            }
            if (!*((_QWORD *)this + 5))
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB missing preceding BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM f"
                     "or opcode at: 0x";
              goto LABEL_422;
            }
            if (v187 != 2 && !*((_BYTE *)this + 152))
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB missing preceding BIND_OPCODE_SET_DYLIB_ORDINAL_* for opcode at: 0x";
              goto LABEL_422;
            }
            v250 = 0;
            v251 = 0;
            v84 = *((_QWORD *)this + 12);
            v252 = (char *)(v84 + *((_QWORD *)this + 13));
            v253 = "malformed uleb128, extends past end";
            v254 = (char *)(v27 + 1);
            while (v254 != v252)
            {
              v255 = *v254;
              v256 = *v254 & 0x7F;
              if (v251 >= 0x40 && (*v254 & 0x7F) != 0 || (unint64_t)(v256 << v251) >> v251 != v256)
              {
                v257 = 0;
                v250 = 0;
                v253 = "uleb128 too big for uint64";
                goto LABEL_440;
              }
              v250 += v256 << v251;
              v251 += 7;
              ++v254;
              if ((v255 & 0x80) == 0)
              {
                v253 = 0;
                v257 = 1;
                goto LABEL_440;
              }
            }
            v257 = 0;
            v250 = 0;
            v254 = (char *)(v84 + *((_QWORD *)this + 13));
LABEL_440:
            v259 = &v29[(_DWORD)v254 - (_DWORD)v29];
            if (v259 <= v252)
              v252 = v259;
            *((_QWORD *)this + 15) = v252;
            *((_QWORD *)this + 17) = v250 + v221;
            if ((v257 & 1) == 0)
            {
              v261 = *(unsigned __int8 *)v253;
              if (*v253)
              {
                v273 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB ";
                v275 = v253;
                v276 = 771;
                v126 = 2;
              }
              else
              {
                v273 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB ";
                v276 = 259;
                v126 = 3;
              }
              v98 = v261 == 0;
              v262 = (const char *)&v273;
              if (v98)
                v262 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB ";
              v277 = v262;
              v278 = v274;
              v279 = " for opcode at: 0x";
              goto LABEL_186;
            }
            v260 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(v220 + 264), v218, (int)v250 + (int)v221 + (int)v219, v221, 1u, 0);
            if (!v260)
              goto LABEL_474;
            v190 = *(unsigned __int8 *)v260;
            v191 = "for BIND_OPCODE_ADD_ADDR_ULEB (after adding ULEB) ";
            if (*v260)
            {
              v273 = "for BIND_OPCODE_ADD_ADDR_ULEB (after adding ULEB) ";
              v275 = v260;
              goto LABEL_279;
            }
LABEL_446:
            v273 = v191;
            v276 = 259;
            v192 = 3;
LABEL_447:
            if (v190)
              v191 = (const char *)&v273;
            v277 = v191;
            v278 = v274;
            v279 = " for opcode at: 0x";
            goto LABEL_450;
          case 0xBu:
            v188 = *((_DWORD *)this + 37);
            if (v188 == 1)
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED not allowed in lazy bind table for opcode at: 0x";
              goto LABEL_422;
            }
            if (!*((_QWORD *)this + 5))
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED missing preceding BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS"
                     "_IMM for opcode at: 0x";
              goto LABEL_422;
            }
            if (v188 != 2 && !*((_BYTE *)this + 152))
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED missing preceding BIND_OPCODE_SET_DYLIB_ORDINAL_* for opcode at: 0x";
              goto LABEL_422;
            }
            v231 = *((unsigned __int8 *)this + 144);
            v232 = *((unsigned __int8 *)this + 144) * (unint64_t)(v32 + 1);
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 17) = v232;
            v233 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), *((_QWORD *)this + 2) + v231 * (v32 + 1), v231, 1u, 0);
            if (!v233)
              goto LABEL_475;
            v234 = *(unsigned __int8 *)v233;
            v235 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED ";
            if (*v233)
            {
              v273 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED ";
              v275 = v233;
              v276 = 771;
              v225 = 2;
            }
            else
            {
              v273 = "for BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED ";
              v276 = 259;
              v225 = 3;
            }
            if (v234)
              v235 = (const char *)&v273;
            v277 = v235;
            v279 = " for opcode at: 0x";
            goto LABEL_351;
          case 0xCu:
            v184 = *((_DWORD *)this + 37);
            if (v184 == 1)
            {
              v185 = v27 - *((_QWORD *)this + 12);
              v186 = "BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB not allowed in lazy bind table for opcode at: 0x";
              goto LABEL_422;
            }
            v209 = 0;
            v210 = 0;
            v211 = *((_QWORD *)this + 12);
            v212 = (char *)(v211 + *((_QWORD *)this + 13));
            v213 = "malformed uleb128, extends past end";
            v214 = (char *)(v27 + 1);
            while (v214 != v212)
            {
              v215 = *v214;
              v216 = *v214 & 0x7F;
              if (v210 >= 0x40 && (*v214 & 0x7F) != 0 || (unint64_t)(v216 << v210) >> v210 != v216)
              {
                v217 = 0;
                LODWORD(v209) = 0;
                v213 = "uleb128 too big for uint64";
                goto LABEL_383;
              }
              v209 += v216 << v210;
              v210 += 7;
              ++v214;
              if ((v215 & 0x80) == 0)
              {
                v213 = 0;
                v217 = 1;
                goto LABEL_383;
              }
            }
            v217 = 0;
            LODWORD(v209) = 0;
            v214 = (char *)(v211 + *((_QWORD *)this + 13));
LABEL_383:
            v236 = &v29[(_DWORD)v214 - (_DWORD)v29];
            if (v236 > v212)
              v236 = (char *)(v211 + *((_QWORD *)this + 13));
            v237 = (v209 - 1);
            if (!(_DWORD)v209)
              v237 = 0;
            *((_QWORD *)this + 15) = v236;
            *((_QWORD *)this + 16) = v237;
            if ((v217 & 1) != 0)
            {
              v238 = 0;
              v239 = 0;
              v213 = "malformed uleb128, extends past end";
              v240 = v236;
              while (v240 != v212)
              {
                v241 = *v240;
                v242 = *v240 & 0x7F;
                if (v239 >= 0x40 && (*v240 & 0x7F) != 0 || (unint64_t)(v242 << v239) >> v239 != v242)
                {
                  v243 = 0;
                  LODWORD(v238) = 0;
                  v213 = "uleb128 too big for uint64";
                  goto LABEL_404;
                }
                v238 += v242 << v239;
                v239 += 7;
                ++v240;
                if ((v241 & 0x80) == 0)
                {
                  v213 = 0;
                  v243 = 1;
                  goto LABEL_404;
                }
              }
              v243 = 0;
              LODWORD(v238) = 0;
              LODWORD(v240) = (_DWORD)v212;
LABEL_404:
              v246 = &v236[(_DWORD)v240 - (_DWORD)v236];
              if (v246 <= v212)
                v212 = v246;
              *((_QWORD *)this + 15) = v212;
              v247 = *((unsigned __int8 *)this + 144);
              v248 = (v238 + v247);
              *((_QWORD *)this + 17) = v248;
              if ((v243 & 1) != 0)
              {
                if (!*((_QWORD *)this + 5))
                {
                  v185 = v27 - v211;
                  v186 = "for BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB missing preceding BIND_OPCODE_SET_SYMBOL_TRAIL"
                         "ING_FLAGS_IMM for opcode at: 0x";
                  goto LABEL_422;
                }
                if (v184 != 2 && !*((_BYTE *)this + 152))
                {
                  v185 = v27 - v211;
                  v186 = "for BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB missing preceding BIND_OPCODE_SET_DYLIB_ORDINA"
                         "L_* for opcode at: 0x";
                  goto LABEL_422;
                }
                v258 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), *((_QWORD *)this + 2) + v248, v247, v209, v238);
                if (!v258)
                  goto LABEL_475;
                v244 = *(unsigned __int8 *)v258;
                v245 = "for BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB ";
                if (*v258)
                {
                  v273 = "for BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB ";
                  v275 = v258;
                  goto LABEL_413;
                }
LABEL_426:
                v273 = v245;
                v276 = 259;
                v249 = 3;
                goto LABEL_427;
              }
              v244 = *(unsigned __int8 *)v213;
              v245 = "for BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB (skip value) ";
              if (!*v213)
                goto LABEL_426;
            }
            else
            {
              v244 = *(unsigned __int8 *)v213;
              v245 = "for BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB  (count value) ";
              if (!*v213)
                goto LABEL_426;
            }
            v273 = v245;
            v275 = v213;
LABEL_413:
            v276 = 771;
            v249 = 2;
LABEL_427:
            if (v244)
              v245 = (const char *)&v273;
            v277 = v245;
            v278 = v274;
            v279 = " for opcode at: 0x";
            LOBYTE(v280) = v249;
            HIBYTE(v280) = 3;
            v128 = v27 - v211;
            goto LABEL_470;
          case 0xDu:
            if (v32 != 1)
            {
              if ((v30 & 0xF) != 0)
              {
                v269[0] = (uint64_t)"bad bind sub-obcode of BIND_OPCODE_THREADED (bad sub-opcode value 0x";
                v270 = &v272;
                v271 = 3587;
                v272 = v30 & 0xF;
                v273 = (const char *)v269;
                v275 = " for opcode at: 0x";
                v276 = 770;
                v265 = (unsigned __int8 *)(v27 - *((_QWORD *)this + 12));
                v277 = (const char *)&v273;
                v279 = (const char *)&v265;
                v280 = 3586;
                v281[0] = (uint64_t)&v277;
                v282 = (const char **)")";
                v283 = 770;
                sub_1C59D7FE0(v266, v281);
                v195 = *(uint64_t **)this;
                v196 = v266[0];
                goto LABEL_472;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              v48 = *((_QWORD *)this + 12);
              v49 = *((_QWORD *)this + 13);
              v50 = (_BYTE *)(v48 + v49);
              while (&v29[v45] != v50)
              {
                v51 = v29[v45];
                v52 = v51 & 0x7F;
                if (v47 >= 0x40 && (v51 & 0x7F) != 0 || (unint64_t)(v52 << v47) >> v47 != v52)
                {
                  v133 = "uleb128 too big for uint64";
                  goto LABEL_196;
                }
                v46 += v52 << v47;
                v47 += 7;
                ++v45;
                if ((v51 & 0x80) == 0)
                {
                  v53 = &v29[v45];
                  if (v53 > v50)
                    v53 = v50;
                  *((_QWORD *)this + 15) = v53;
                  *((_QWORD *)this + 20) = v46;
                  v54 = (void *)*((_QWORD *)this + 21);
                  *((_QWORD *)this + 22) = v54;
                  if (v46 <= (uint64_t)(*((_QWORD *)this + 23) - (_QWORD)v54) >> 5)
                    goto LABEL_74;
                  if (!(v46 >> 59))
                  {
                    v55 = (char *)operator new(32 * v46);
                    *((_QWORD *)this + 21) = v55;
                    *((_QWORD *)this + 22) = v55;
                    *((_QWORD *)this + 23) = &v55[32 * v46];
                    if (v54)
                      operator delete(v54);
LABEL_74:
                    *((_BYTE *)this + 153) = 1;
                    goto LABEL_173;
                  }
LABEL_457:
                  abort();
                }
              }
              LODWORD(v45) = v48 + v49 + ~(_DWORD)v27;
              v133 = "malformed uleb128, extends past end";
LABEL_196:
              v134 = &v29[v45];
              if (v134 <= v50)
                v50 = v134;
              *((_QWORD *)this + 15) = v50;
              *((_QWORD *)this + 20) = 0;
              v135 = *(unsigned __int8 *)v133;
              v136 = "for BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB ";
              if (*v133)
              {
                v273 = "for BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB ";
                v275 = v133;
                v276 = 771;
                v132 = 2;
              }
              else
              {
                v273 = "for BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB ";
                v276 = 259;
                v132 = 3;
              }
              if (v135)
                v136 = (const char *)&v273;
              v277 = v136;
              v278 = v274;
              v279 = " for opcode at: 0x";
LABEL_468:
              LOBYTE(v280) = v132;
              HIBYTE(v280) = 3;
LABEL_469:
              v128 = v27 - v48;
              goto LABEL_470;
            }
            if (*((_QWORD *)this + 20) == (uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 5)
            {
              v58 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), *((_QWORD *)this + 2), *((unsigned __int8 *)this + 144), 1u, 0);
              if (v58)
              {
                v222 = *(unsigned __int8 *)v58;
                v223 = "for BIND_SUBOPCODE_THREADED_APPLY ";
                if (*v58)
                {
LABEL_343:
                  v273 = v223;
                  v275 = v58;
                  v276 = 771;
                  v225 = 2;
                }
                else
                {
LABEL_347:
                  v273 = v223;
                  v276 = 259;
                  v225 = 3;
                }
                if (v222)
                  v223 = (const char *)&v273;
                v277 = v223;
                v278 = v274;
                v279 = " for opcode at: 0x";
LABEL_351:
                LOBYTE(v280) = v225;
                HIBYTE(v280) = 3;
                goto LABEL_352;
              }
              if ((llvm::object::MachOAbstractFixupEntry::address(this) & 3) == 0)
              {
                if ((llvm::object::MachORebaseBindEntry::getNextThreadedEntry(this, 1, *((_DWORD *)this + 37) != 3) & 1) != 0)
                  goto LABEL_475;
                goto LABEL_173;
              }
              v269[0] = v27 - *((_QWORD *)this + 12);
              v277 = "for BIND_SUBOPCODE_THREADED_APPLY for opcode at: 0x";
              v279 = (const char *)v269;
              v280 = 3587;
              v224 = " bad segOffset, not 8-byte aligned";
            }
            else
            {
              v269[0] = v27 - *((_QWORD *)this + 12);
              v277 = "at BIND_SUBOPCODE_THREADED_APPLY (incorrect ordinal table size, count of previous BIND_OPCODE_DO_BI"
                     "ND opcodes don't match count in previous BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB a"
                     "t BIND_SUBOPCODE_THREADED_APPLY at: 0x";
              v279 = (const char *)v269;
              v280 = 3587;
              v224 = ")";
            }
            v281[0] = (uint64_t)&v277;
            v282 = (const char **)v224;
            v283 = 770;
            sub_1C59D7FE0((uint64_t *)&v273, v281);
            v195 = *(uint64_t **)this;
            v196 = (uint64_t)v273;
            goto LABEL_472;
          default:
            v266[0] = v31 & 0xF0;
            v273 = "bad bind info (bad opcode value 0x";
            v275 = (const char *)v266;
            v276 = 3587;
            v277 = (const char *)&v273;
            v279 = " for opcode at: 0x";
            v280 = 770;
            v181 = v27 - *((_QWORD *)this + 12);
LABEL_272:
            v272 = v181;
            v189 = &v272;
            goto LABEL_471;
        }
      }
    }
LABEL_36:
    if (*((_DWORD *)this + 50) && (llvm::object::MachORebaseBindEntry::getNextThreadedEntry(this, 0, v3 != 3) & 1) != 0)
      goto LABEL_475;
    goto LABEL_38;
  }
  if (*((_BYTE *)this + 153))
    goto LABEL_36;
  v4 = *((_QWORD *)this + 16);
  v5 = *((_QWORD *)this + 2) + *((_QWORD *)this + 17);
  *((_QWORD *)this + 2) = v5;
  if (v4)
  {
LABEL_39:
    *((_QWORD *)this + 16) = v4 - 1;
    goto LABEL_475;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 15);
  v7 = *((_QWORD *)this + 12);
  v8 = *((_QWORD *)this + 13);
  v9 = (unsigned __int8 *)(v7 + v8);
  if (v6 == (unsigned __int8 *)(v7 + v8))
  {
LABEL_174:
    *((_BYTE *)this + 80) = 1;
    goto LABEL_475;
  }
LABEL_5:
  while (2)
  {
    v10 = v6 + 1;
    while (1)
    {
      v11 = v6++;
      *((_QWORD *)this + 15) = v6;
      v12 = *v11;
      v13 = v12 & 0xF;
      if (v12 >> 4 != 1)
        break;
      *((_BYTE *)this + 145) = v13;
      ++v10;
      if (v13 >= 4)
      {
        v273 = "for REBASE_OPCODE_SET_TYPE_IMM bad bind type: ";
        v275 = (const char *)(v12 & 0xF);
        v276 = 2307;
        v277 = (const char *)&v273;
        v279 = " for opcode at: 0x";
        v280 = 770;
        goto LABEL_378;
      }
    }
    switch(v12 >> 4)
    {
      case 0u:
        *((_BYTE *)this + 80) = 1;
        *((_QWORD *)this + 15) = v9;
        goto LABEL_474;
      case 2u:
        v14 = 0;
        v5 = 0;
        v15 = 0;
        *((_DWORD *)this + 6) = v13;
        do
        {
          if (&v10[v14] == v9)
          {
            LODWORD(v14) = v8 + v7 + ~(_DWORD)v11;
            v183 = "malformed uleb128, extends past end";
LABEL_286:
            v197 = &v6[v14];
            if (v197 > v9)
              v197 = (unsigned __int8 *)(v7 + v8);
            *((_QWORD *)this + 15) = v197;
            *((_QWORD *)this + 2) = 0;
            v198 = *(unsigned __int8 *)v183;
            if (*v183)
            {
              v273 = "for REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
              v275 = v183;
              v276 = 771;
              v199 = 2;
            }
            else
            {
              v273 = "for REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
              v276 = 259;
              v199 = 3;
            }
            v200 = "for REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
LABEL_322:
            v98 = v198 == 0;
            v207 = &v273;
            if (v98)
              v207 = (const char **)v200;
            v277 = (const char *)v207;
            v279 = " for opcode at: 0x";
            LOBYTE(v280) = v199;
            goto LABEL_377;
          }
          v16 = v10[v14];
          v17 = v16 & 0x7F;
          if (v15 >= 0x40 && (v16 & 0x7F) != 0 || (unint64_t)(v17 << v15) >> v15 != v17)
          {
            v183 = "uleb128 too big for uint64";
            goto LABEL_286;
          }
          v5 += v17 << v15;
          v15 += 7;
          ++v14;
        }
        while ((v16 & 0x80) != 0);
        if (&v6[v14] <= v9)
          v6 += v14;
        else
          v6 = (unsigned __int8 *)(v7 + v8);
        *((_QWORD *)this + 15) = v6;
        *((_QWORD *)this + 2) = v5;
        v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), v13, v5, *((unsigned __int8 *)this + 144), 1u, 0);
        if (!v18)
          continue;
        v25 = *(unsigned __int8 *)v18;
        v26 = "for REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
        if (!*v18)
          goto LABEL_257;
LABEL_208:
        v273 = v26;
        v275 = v18;
        v276 = 771;
        v139 = 2;
LABEL_258:
        if (v25)
          v26 = (const char *)&v273;
        v277 = v26;
        v279 = " for opcode at: 0x";
        LOBYTE(v280) = v139;
LABEL_377:
        HIBYTE(v280) = 3;
LABEL_378:
        v128 = (uint64_t)&v11[-v7];
LABEL_470:
        v266[0] = v128;
        v189 = v266;
LABEL_471:
        v281[0] = (uint64_t)&v277;
        v282 = (const char **)v189;
        v283 = 3586;
        sub_1C59D7FE0(v269, v281);
        v195 = *(uint64_t **)this;
        v196 = v269[0];
LABEL_472:
        *v195 = v196;
        *((_BYTE *)this + 80) = 1;
        v35 = *((_QWORD *)this + 12) + *((_QWORD *)this + 13);
LABEL_473:
        *((_QWORD *)this + 15) = v35;
LABEL_474:
        *((_QWORD *)this + 16) = 0;
LABEL_475:
        if (v2)
        {
          if (!*v2)
            *v2 = 0;
        }
        return;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (&v10[v19] != v9)
        {
          v22 = v10[v19];
          v23 = v22 & 0x7F;
          if (v21 >= 0x40 && (v22 & 0x7F) != 0 || (unint64_t)(v23 << v21) >> v21 != v23)
          {
            v182 = "uleb128 too big for uint64";
            goto LABEL_293;
          }
          v20 += v23 << v21;
          v21 += 7;
          ++v19;
          if ((v22 & 0x80) == 0)
          {
            if (&v6[v19] <= v9)
              v6 += v19;
            else
              v6 = (unsigned __int8 *)(v7 + v8);
            *((_QWORD *)this + 15) = v6;
            v5 += v20;
            *((_QWORD *)this + 2) = v5;
            v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v5, *((unsigned __int8 *)this + 144), 1u, 0);
            if (v18)
            {
              v25 = *(unsigned __int8 *)v18;
              v26 = "for REBASE_OPCODE_ADD_ADDR_ULEB ";
              if (*v18)
                goto LABEL_208;
LABEL_257:
              v273 = v26;
              v276 = 259;
              v139 = 3;
              goto LABEL_258;
            }
            goto LABEL_5;
          }
        }
        LODWORD(v19) = v8 + v7 + ~(_DWORD)v11;
        v182 = "malformed uleb128, extends past end";
LABEL_293:
        v201 = &v6[v19];
        if (v201 > v9)
          v201 = (unsigned __int8 *)(v7 + v8);
        *((_QWORD *)this + 15) = v201;
        *((_QWORD *)this + 2) = v5;
        v198 = *(unsigned __int8 *)v182;
        if (*v182)
        {
          v273 = "for REBASE_OPCODE_ADD_ADDR_ULEB ";
          v275 = v182;
          v276 = 771;
          v199 = 2;
        }
        else
        {
          v273 = "for REBASE_OPCODE_ADD_ADDR_ULEB ";
          v276 = 259;
          v199 = 3;
        }
        v200 = "for REBASE_OPCODE_ADD_ADDR_ULEB ";
        goto LABEL_322;
      case 4u:
        v24 = *((unsigned __int8 *)this + 144);
        v5 += *((unsigned __int8 *)this + 144) * (unint64_t)(v12 & 0xF);
        *((_QWORD *)this + 2) = v5;
        v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v5, v24, 1u, 0);
        if (!v18)
          continue;
        v25 = *(unsigned __int8 *)v18;
        v26 = "for REBASE_OPCODE_ADD_ADDR_IMM_SCALED ";
        if (!*v18)
          goto LABEL_257;
        goto LABEL_208;
      case 5u:
        v137 = *((unsigned __int8 *)this + 144);
        v138 = v13 - 1;
        if ((v12 & 0xF) == 0)
          v138 = 0;
        *((_QWORD *)this + 16) = v138;
        *((_QWORD *)this + 17) = v137;
        v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v5, v137, v13, 0);
        if (!v18)
          goto LABEL_475;
        v25 = *(unsigned __int8 *)v18;
        v26 = "for REBASE_OPCODE_DO_REBASE_IMM_TIMES ";
        if (*v18)
          goto LABEL_208;
        goto LABEL_257;
      case 6u:
        v170 = 0;
        v171 = 0;
        v172 = *((unsigned __int8 *)this + 144);
        *((_QWORD *)this + 17) = v172;
        v173 = v8 + v7;
        v174 = 1;
        v175 = "malformed uleb128, extends past end";
        v176 = (int)v6;
        while (1)
        {
          if (&v11[v174] == v9)
            goto LABEL_316;
          v177 = v11[v174];
          v178 = v177 & 0x7F;
          if (v171 >= 0x40 && (v177 & 0x7F) != 0)
          {
            v173 = (_DWORD)v11 + v174;
            v175 = "uleb128 too big for uint64";
            goto LABEL_316;
          }
          if ((unint64_t)(v178 << v171) >> v171 != v178)
            break;
          v170 += v178 << v171;
          v171 += 7;
          ++v176;
          ++v174;
          if ((v177 & 0x80) == 0)
          {
            v179 = &v6[(v174 - 1)];
            if (v179 > v9)
              v179 = (unsigned __int8 *)(v7 + v8);
            v180 = (v170 - 1);
            if (!(_DWORD)v170)
              v180 = 0;
            *((_QWORD *)this + 15) = v179;
            *((_QWORD *)this + 16) = v180;
            v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v5, v172, v170, 0);
            if (v18)
            {
              v25 = *(unsigned __int8 *)v18;
              v26 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES ";
              if (!*v18)
                goto LABEL_257;
              goto LABEL_208;
            }
            goto LABEL_475;
          }
        }
        v173 = v176;
        v175 = "uleb128 too big for uint64";
LABEL_316:
        v206 = &v6[v173 - (_DWORD)v6];
        if (v206 > v9)
          v206 = (unsigned __int8 *)(v7 + v8);
        *((_QWORD *)this + 15) = v206;
        v198 = *(unsigned __int8 *)v175;
        if (*v175)
        {
          v273 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES ";
          v275 = v175;
          v276 = 771;
          v199 = 2;
        }
        else
        {
          v273 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES ";
          v276 = 259;
          v199 = 3;
        }
        v200 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES ";
        goto LABEL_322;
      case 7u:
        v140 = 0;
        v141 = 0;
        v142 = v8 + v7;
        v143 = 1;
        v144 = "malformed uleb128, extends past end";
        v145 = (int)v6;
        while (1)
        {
          if (&v11[v143] == v9)
            goto LABEL_303;
          v146 = v11[v143];
          v147 = v146 & 0x7F;
          if (v141 >= 0x40 && (v146 & 0x7F) != 0)
          {
            v142 = (_DWORD)v11 + v143;
            v144 = "uleb128 too big for uint64";
            goto LABEL_303;
          }
          if ((unint64_t)(v147 << v141) >> v141 != v147)
            break;
          v140 += v147 << v141;
          v141 += 7;
          ++v145;
          ++v143;
          if ((v146 & 0x80) == 0)
          {
            v148 = &v6[(v143 - 1)];
            if (v148 > v9)
              v148 = (unsigned __int8 *)(v7 + v8);
            v149 = *((unsigned __int8 *)this + 144);
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 17) = (v140 + v149);
            *((_QWORD *)this + 15) = v148;
            v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v5, v149, 1u, v140);
            if (v18)
            {
              v25 = *(unsigned __int8 *)v18;
              v26 = "for REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB ";
              if (!*v18)
                goto LABEL_257;
              goto LABEL_208;
            }
            goto LABEL_475;
          }
        }
        v142 = v145;
        v144 = "uleb128 too big for uint64";
LABEL_303:
        v202 = &v6[v142 - (_DWORD)v6];
        if (v202 > v9)
          v202 = (unsigned __int8 *)(v7 + v8);
        *((_QWORD *)this + 15) = v202;
        v198 = *(unsigned __int8 *)v144;
        if (*v144)
        {
          v273 = "for REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB ";
          v275 = v144;
          v276 = 771;
          v199 = 2;
        }
        else
        {
          v273 = "for REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB ";
          v276 = 259;
          v199 = 3;
        }
        v200 = "for REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB ";
        goto LABEL_322;
      case 8u:
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v153 = v8 + v7;
        v154 = "malformed uleb128, extends past end";
        v155 = (int)v6;
        break;
      default:
        v266[0] = v12 & 0xF0;
        v273 = "bad rebase info (bad opcode value 0x";
        v275 = (const char *)v266;
        v276 = 3587;
        v277 = (const char *)&v273;
        v279 = " for opcode at: 0x";
        v280 = 770;
        v181 = (uint64_t)&v11[-v7];
        goto LABEL_272;
    }
    break;
  }
  while (1)
  {
    if (&v10[v150] == v9)
      goto LABEL_310;
    v156 = v10[v150];
    v157 = v156 & 0x7F;
    if (v152 >= 0x40 && (v156 & 0x7F) != 0)
      break;
    if ((unint64_t)(v157 << v152) >> v152 != v157)
    {
      v153 = v155;
      v154 = "uleb128 too big for uint64";
LABEL_310:
      v203 = &v6[v153 - (_DWORD)v6];
      if (v203 > v9)
        v203 = (unsigned __int8 *)(v7 + v8);
      *((_QWORD *)this + 15) = v203;
      v204 = *(unsigned __int8 *)v154;
      if (*v154)
      {
        v273 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB ";
        v275 = v154;
        goto LABEL_314;
      }
      goto LABEL_373;
    }
    v151 += v157 << v152;
    v152 += 7;
    ++v155;
    ++v150;
    if ((v156 & 0x80) == 0)
    {
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v161 = &v6[v150];
      if (v161 > v9)
        v161 = (unsigned __int8 *)(v7 + v8);
      v162 = (v151 - 1);
      if (!(_DWORD)v151)
        v162 = 0;
      *((_QWORD *)this + 15) = v161;
      *((_QWORD *)this + 16) = v162;
      if (v9 >= &v10[v150])
        v163 = &v10[v150];
      else
        v163 = (unsigned __int8 *)(v7 + v8);
      v164 = "malformed uleb128, extends past end";
      v165 = (int)v161;
      while (1)
      {
        if (&v163[v158] == v9)
        {
          v165 = v7 + v8;
          goto LABEL_369;
        }
        v166 = v163[v158];
        v167 = v166 & 0x7F;
        if (v160 >= 0x40 && (v166 & 0x7F) != 0)
          break;
        if ((unint64_t)(v167 << v160) >> v160 != v167)
        {
          v164 = "uleb128 too big for uint64";
          goto LABEL_369;
        }
        v159 += v167 << v160;
        v160 += 7;
        ++v165;
        ++v158;
        if ((v166 & 0x80) == 0)
        {
          v168 = (unint64_t)&v161[v158];
          if (v168 > (unint64_t)v9)
            v168 = v7 + v8;
          *((_QWORD *)this + 15) = v168;
          v169 = *((unsigned __int8 *)this + 144);
          *((_QWORD *)this + 17) = (v159 + v169);
          v18 = llvm::object::BindRebaseSegInfo::checkSegAndOffsets(*(llvm::object::BindRebaseSegInfo **)(*((_QWORD *)this + 1) + 264), *((_DWORD *)this + 6), v5, v169, v151, v159);
          if (v18)
          {
            v25 = *(unsigned __int8 *)v18;
            v26 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB ";
            if (!*v18)
              goto LABEL_257;
            goto LABEL_208;
          }
          goto LABEL_475;
        }
      }
      v228 = (unint64_t)&v10[v150];
      if ((unint64_t)v9 < v228)
        LODWORD(v228) = v7 + v8;
      v165 = v228 + v158;
      v164 = "uleb128 too big for uint64";
LABEL_369:
      v229 = (unint64_t)&v161[v165 - (_DWORD)v161];
      if (v229 > (unint64_t)v9)
        v229 = v7 + v8;
      *((_QWORD *)this + 15) = v229;
      v204 = *(unsigned __int8 *)v164;
      if (*v164)
      {
        v273 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB ";
        v275 = v164;
LABEL_314:
        v276 = 771;
        v205 = 2;
LABEL_374:
        v98 = v204 == 0;
        v230 = (const char *)&v273;
        if (v98)
          v230 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB ";
        v277 = v230;
        v279 = " for opcode at: 0x";
        LOBYTE(v280) = v205;
        goto LABEL_377;
      }
LABEL_373:
      v273 = "for REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB ";
      v276 = 259;
      v205 = 3;
      goto LABEL_374;
    }
  }
  v153 = (_DWORD)v10 + v150;
  v154 = "uleb128 too big for uint64";
  goto LABEL_310;
}

uint64_t llvm::object::MachORebaseBindEntry::moveToEnd(uint64_t this)
{
  *(_BYTE *)(this + 80) = 1;
  *(_QWORD *)(this + 120) = *(_QWORD *)(this + 96) + *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 128) = 0;
  return this;
}

uint64_t llvm::object::MachORebaseBindEntry::readULEB128(char **this, const char **a2)
{
  uint64_t result;
  char *v4;
  char *v5;
  int v6;

  v6 = 0;
  result = sub_1C4D62708(this[15], &v6, &this[13][(_QWORD)this[12]], a2);
  v4 = &this[15][v6];
  v5 = this[13];
  if (v4 > &v5[(_QWORD)this[12]])
    v4 = &v5[(_QWORD)this[12]];
  this[15] = v4;
  return result;
}

uint64_t llvm::object::MachORebaseBindEntry::getNextThreadedEntry(llvm::object::MachORebaseBindEntry *this, int a2, int a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  llvm::object::BindRebaseSegInfo *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t v36[4];
  __int16 v37;
  _QWORD v38[2];
  unint64_t *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;
  _QWORD v44[2];
  _QWORD *v45;
  __int16 v46;
  uint64_t v47[2];
  const char *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[2];

  v5 = *((_DWORD *)this + 6);
  v7 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v8 = *(llvm::object::BindRebaseSegInfo **)(v7 + 264);
  v9 = *(_QWORD *)v8;
  v10 = *((_DWORD *)v8 + 2);
  if (v10)
  {
    v11 = v9 + 88 * v10;
    v12 = 88 * v10;
    while (1)
    {
      if (*(_DWORD *)(v9 + 80) == v5)
      {
        v13 = *(_QWORD *)(v9 + 64);
        if (v13 <= v6 && *(_QWORD *)(v9 + 8) + v13 > v6)
          break;
      }
      v9 += 88;
      v12 -= 88;
      if (!v12)
      {
        v9 = v11;
        break;
      }
    }
  }
  v14 = *(_QWORD *)(v9 + 72) + v6;
  v53[0] = v14;
  if (a2)
  {
    *((_QWORD *)this + 24) = v14 & 0xFFFFFFFFFFFFC000;
  }
  else
  {
    v6 += (8 * *((_DWORD *)this + 50));
    *((_QWORD *)this + 2) = v6;
  }
  v28 = (_OWORD *)((char *)this + 32);
  while (1)
  {
    v15 = *(_QWORD *)llvm::object::BindRebaseSegInfo::contents(v8, v5, v6);
    v52 = v15;
    v16 = *(_DWORD *)(v7 + 8);
    v17 = v16 > 0x13;
    v18 = (1 << v16) & 0xAAC00;
    if (!v17 && v18 != 0)
    {
      v15 = bswap64(v15);
      v52 = v15;
    }
    *((_QWORD *)this + 9) = v15;
    if ((v15 & 0x4000000000000000) != 0)
    {
      if (a3)
        break;
    }
    v21 = 0;
    if ((v15 & 0x4000000000000000) == 0 && (a3 & 1) == 0)
    {
      if ((v15 & 0x8000000000000000) != 0)
        *((_QWORD *)this + 8) = *((_QWORD *)this + 11) + v15;
      else
        *((_QWORD *)this + 8) = v15 & 0x7FFFFFFFFFFLL | ((unint64_t)(v15 >> 43) << 56);
      goto LABEL_26;
    }
LABEL_27:
    v22 = (v15 >> 51) & 0x7FF;
    if (!(_DWORD)v22)
      goto LABEL_32;
    v23 = (8 * v22);
    v6 += v23;
    v8 = *(llvm::object::BindRebaseSegInfo **)(v7 + 264);
    if (llvm::object::BindRebaseSegInfo::checkSegAndOffsets(v8, v5, v6, 8, 1u, 0))
    {
      v34[0] = *((_QWORD *)this + 14) - *((_QWORD *)this + 12);
      v38[0] = "bad bind info (for BIND_SUBOPCODE_THREADED_APPLY for opcode at: 0x";
      v39 = v34;
      v40 = 3587;
      v41[0] = v38;
      v42 = " offset to next pointer in the chain after one at address: 0x";
      v43 = 770;
      v44[0] = v41;
      v45 = v53;
      v46 = 3586;
      v24 = " is past end of segment)";
LABEL_35:
      v47[0] = (uint64_t)v44;
      v48 = v24;
      v49 = 770;
      sub_1C59D7FE0(v36, v47);
      v25 = *(uint64_t **)this;
      v26 = v36[0];
      goto LABEL_36;
    }
    if (*((_QWORD *)this + 24) != ((v14 + v23) & 0xFFFFFFFFFFFFC000))
    {
      v34[0] = *((_QWORD *)this + 14) - *((_QWORD *)this + 12);
      v38[0] = "bad bind info (for BIND_SUBOPCODE_THREADED_APPLY for opcode at: 0x";
      v39 = v34;
      v40 = 3587;
      v41[0] = v38;
      v42 = " offset to next pointer in the chain after one at address: 0x";
      v43 = 770;
      v44[0] = v41;
      v45 = v53;
      v46 = 3586;
      v24 = " is past end of the same page)";
      goto LABEL_35;
    }
    if ((v21 & 1) != 0)
    {
LABEL_32:
      *((_DWORD *)this + 50) = v22;
      return v21;
    }
    *((_QWORD *)this + 2) = v6;
  }
  v51 = (unsigned __int16)v15;
  if ((unint64_t)(unsigned __int16)v15 <= *((_QWORD *)this + 20))
  {
    v20 = *((_QWORD *)this + 21) + 32 * (unsigned __int16)v15;
    *v28 = *(_OWORD *)v20;
    *((_DWORD *)this + 12) = *(_DWORD *)(v20 + 24);
    *((_DWORD *)this + 13) = *(unsigned __int8 *)(v20 + 28);
    *((_QWORD *)this + 7) = *(_QWORD *)(v20 + 16);
    *((_BYTE *)this + 146) = *(_BYTE *)(v20 + 29);
    *((_QWORD *)this + 8) = 0;
LABEL_26:
    v21 = 1;
    goto LABEL_27;
  }
  v29 = *((_QWORD *)this + 14) - *((_QWORD *)this + 12);
  v30[0] = "bad bind info (for BIND_SUBOPCODE_THREADED_APPLY for opcode at: 0x";
  v30[2] = &v29;
  v31 = 3587;
  v32[0] = v30;
  v32[2] = " bad ordinal: 0x";
  v33 = 770;
  v34[0] = v32;
  v34[2] = &v51;
  v35 = 3586;
  v36[0] = (uint64_t)v34;
  v36[2] = (uint64_t)" in pointer: 0x";
  v37 = 770;
  v38[0] = v36;
  v39 = &v52;
  v40 = 3586;
  v41[0] = v38;
  v42 = " at address: 0x";
  v43 = 770;
  v44[0] = v41;
  v45 = v53;
  v46 = 3586;
  v47[0] = (uint64_t)v44;
  v48 = ")";
  v49 = 770;
  sub_1C59D7FE0(&v50, v47);
  v25 = *(uint64_t **)this;
  v26 = v50;
LABEL_36:
  *v25 = v26;
  *((_BYTE *)this + 80) = 1;
  *((_QWORD *)this + 15) = *((_QWORD *)this + 12) + *((_QWORD *)this + 13);
  *((_QWORD *)this + 16) = 0;
  return 1;
}

uint64_t llvm::object::MachORebaseBindEntry::readSLEB128(llvm::object::MachORebaseBindEntry *this, const char **a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = (char *)*((_QWORD *)this + 15);
  v3 = *((_QWORD *)this + 13);
  v4 = (char *)(*((_QWORD *)this + 12) + v3);
  if (a2)
    *a2 = 0;
  v5 = 0;
  v6 = 0;
  v7 = v2;
  while (v7 != v4)
  {
    v8 = *v7;
    v9 = *v7 & 0x7F;
    if (v6 >= 0x40)
    {
      if (((v5 >> 63) & 0x7F) != v9)
        goto LABEL_13;
    }
    else if (v6 == 63 && (*v7 & 0x7F) != 0 && (_DWORD)v9 != 127)
    {
LABEL_13:
      v10 = 0;
      if (a2)
        *a2 = "sleb128 too big for int64";
LABEL_21:
      LODWORD(v4) = (_DWORD)v7;
      goto LABEL_22;
    }
    v5 |= v9 << v6;
    v6 += 7;
    ++v7;
    if ((v8 & 0x80) == 0)
    {
      v11 = (v8 & 0x40) == 0 || v6 > 0x3F;
      v12 = -1 << v6;
      if (v11)
        v12 = 0;
      v10 = v5 | v12;
      goto LABEL_21;
    }
  }
  v10 = 0;
  if (a2)
    *a2 = "malformed sleb128, extends past end";
LABEL_22:
  v13 = *((_QWORD *)this + 15) + ((_DWORD)v4 - (_DWORD)v2);
  v14 = *((_QWORD *)this + 12) + v3;
  if (v13 <= v14)
    v14 = v13;
  *((_QWORD *)this + 15) = v14;
  return v10;
}

const char *llvm::object::MachOChainedFixupEntry::typeName(llvm::object::MachOChainedFixupEntry *this)
{
  const char *v1;
  const char *v2;

  v1 = "rebase aptr";
  if (!*((_BYTE *)this + 152))
    v1 = "rebase ptr";
  v2 = "bind aptr";
  if (!*((_BYTE *)this + 152))
    v2 = "bind ptr";
  if (*((_DWORD *)this + 37) == 3)
    return v1;
  else
    return v2;
}

uint64_t llvm::object::MachOChainedFixupEntry::sectionName(llvm::object::MachOChainedFixupEntry *this)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(uint64_t **)(*((_QWORD *)this + 1) + 264);
  v2 = *v1;
  v3 = *((_DWORD *)v1 + 2);
  if (v3)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = v2 + 88 * v3;
    v6 = 88 * v3;
    while (1)
    {
      if (*(_DWORD *)(v2 + 80) == *((_DWORD *)this + 6))
      {
        v7 = *(_QWORD *)(v2 + 64);
        if (v7 <= v4 && *(_QWORD *)(v2 + 8) + v7 > v4)
          break;
      }
      v2 += 88;
      v6 -= 88;
      if (!v6)
      {
        v2 = v5;
        return *(_QWORD *)(v2 + 32);
      }
    }
  }
  return *(_QWORD *)(v2 + 32);
}

const char *llvm::object::MachOChainedFixupEntry::authKeyName(llvm::object::MachOChainedFixupEntry *this)
{
  if (*((_BYTE *)this + 152))
    return off_1E8189F30[(*((_QWORD *)this + 9) >> 49) & 3];
  else
    return "(unknown)";
}

char *llvm::object::MachORebaseBindEntry::typeName(llvm::object::MachORebaseBindEntry *this)
{
  unsigned int v1;

  if (*((_DWORD *)this + 37) == 3)
  {
    v1 = *((unsigned __int8 *)this + 145) - 1;
    if (v1 >= 3)
      return "unknown";
  }
  else
  {
    v1 = *((unsigned __int8 *)this + 146) - 1;
    if (v1 > 2)
      return "unknown";
  }
  return off_1E8189F50[(char)v1];
}

BOOL llvm::object::MachORebaseBindEntry::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 120) == *(_QWORD *)(a2 + 120)
      && *(_QWORD *)(a1 + 128) == *(_QWORD *)(a2 + 128)
      && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80);
}

void llvm::object::MachOObjectFile::rebaseTable(uint64_t a1@<X0>, const llvm::object::MachOObjectFile *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  llvm::object::BindRebaseSegInfo *v14;
  llvm::object::BindRebaseSegInfo *v15;
  void **v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[5];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *__p[2];
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71[2];
  _OWORD v72[3];

  if (!*((_QWORD *)a2 + 33))
  {
    v14 = (llvm::object::BindRebaseSegInfo *)operator new();
    v15 = llvm::object::BindRebaseSegInfo::BindRebaseSegInfo(v14, a2);
    v16 = (void **)*((_QWORD *)a2 + 33);
    *((_QWORD *)a2 + 33) = v15;
    if (v16)
    {
      if (*v16 != v16 + 2)
        free(*v16);
      MEMORY[0x1CAA32FC0](v16, 0x1080C40E09A0471);
    }
  }
  llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry((uint64_t)&v61, a1, (uint64_t)a2);
  *(_QWORD *)&v67 = a3;
  *((_QWORD *)&v67 + 1) = a4;
  if (a5)
    v17 = 8;
  else
    v17 = 4;
  v69 = 0u;
  LOBYTE(v70) = v17;
  *(_WORD *)((char *)&v70 + 1) = 0;
  DWORD1(v70) = 3;
  BYTE8(v70) = 0;
  BYTE9(v70) = a6;
  *(_QWORD *)&v62 = 0;
  *(_OWORD *)v71 = 0u;
  memset(v72, 0, 28);
  DWORD2(v62) = -1;
  LOBYTE(v66) = 0;
  v64 = 0u;
  *((_QWORD *)&v68 + 1) = a3;
  llvm::object::MachORebaseBindEntry::moveNext((llvm::object::MachORebaseBindEntry *)&v61);
  llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry((uint64_t)v53, a1, (uint64_t)a2);
  *(_QWORD *)&v55 = a3;
  *((_QWORD *)&v55 + 1) = a4;
  LOBYTE(v58) = v17;
  *(_WORD *)((char *)&v58 + 1) = 0;
  DWORD1(v58) = 3;
  BYTE8(v58) = 0;
  BYTE9(v58) = a6;
  *(_OWORD *)__p = 0u;
  memset(v60, 0, 28);
  LOBYTE(v54) = 1;
  *((_QWORD *)&v56 + 1) = a3 + a4;
  v57 = 0u;
  v42 = v63;
  v43 = v64;
  v44 = v65;
  v45 = v66;
  v40 = v61;
  v41 = v62;
  v48 = v69;
  v49 = v70;
  v46 = v67;
  v47 = v68;
  v50 = v71[0];
  v52 = 0;
  v51 = 0u;
  sub_1C59EE2C0(&v51, v71[1], *(uint64_t *)&v72[0], (uint64_t)(*(_QWORD *)&v72[0] - (unint64_t)v71[1]) >> 5);
  v18 = v43;
  *(_OWORD *)(a7 + 32) = v42;
  *(_OWORD *)(a7 + 48) = v18;
  v19 = v45;
  *(_OWORD *)(a7 + 64) = v44;
  *(_OWORD *)(a7 + 80) = v19;
  v20 = v41;
  *(_OWORD *)a7 = v40;
  *(_OWORD *)(a7 + 16) = v20;
  v21 = v49;
  *(_OWORD *)(a7 + 128) = v48;
  *(_OWORD *)(a7 + 144) = v21;
  v22 = v52;
  *(_QWORD *)(a7 + 160) = v50;
  v23 = v47;
  *(_OWORD *)(a7 + 96) = v46;
  *(_OWORD *)(a7 + 112) = v23;
  *(_QWORD *)(a7 + 192) = *(_QWORD *)&v72[1];
  *(_DWORD *)(a7 + 200) = DWORD2(v72[1]);
  v29 = v53[2];
  v30 = v53[3];
  v31 = v53[4];
  v32 = v54;
  v27 = v53[0];
  v28 = v53[1];
  v35 = v57;
  v36 = v58;
  v33 = v55;
  v34 = v56;
  v37 = __p[0];
  v39 = 0;
  v38 = 0u;
  sub_1C59EE2C0(&v38, __p[1], *(uint64_t *)&v60[0], (uint64_t)(*(_QWORD *)&v60[0] - (unint64_t)__p[1]) >> 5);
  *(_OWORD *)(a7 + 240) = v29;
  *(_OWORD *)(a7 + 256) = v30;
  *(_OWORD *)(a7 + 272) = v31;
  *(_OWORD *)(a7 + 288) = v32;
  *(_OWORD *)(a7 + 208) = v27;
  *(_OWORD *)(a7 + 224) = v28;
  *(_OWORD *)(a7 + 336) = v35;
  *(_OWORD *)(a7 + 352) = v36;
  v24 = v39;
  *(_QWORD *)(a7 + 368) = v37;
  *(_OWORD *)(a7 + 304) = v33;
  *(_OWORD *)(a7 + 320) = v34;
  *(_DWORD *)(a7 + 408) = DWORD2(v60[1]);
  *(_OWORD *)(a7 + 168) = v51;
  *(_QWORD *)(a7 + 184) = v22;
  *(_OWORD *)(a7 + 376) = v38;
  v25 = *(_QWORD *)&v60[1];
  v26 = __p[1];
  *(_QWORD *)(a7 + 392) = v24;
  *(_QWORD *)(a7 + 400) = v25;
  if (v26)
  {
    *(_QWORD *)&v60[0] = v26;
    operator delete(v26);
  }
  if (v71[1])
  {
    *(void **)&v72[0] = v71[1];
    operator delete(v71[1]);
  }
}

void llvm::object::MachOObjectFile::rebaseTable(llvm::object::MachOObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t DyldInfoBindOpcodes;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::object::MachOObjectFile *v13;
  char v14;
  uint64_t v15;

  llvm::object::MachOObjectFile::getDyldInfoRebaseOpcodes(a1);
  if (!v6 && *((_DWORD *)a1 + 13) == 16777228 && (*((_DWORD *)a1 + 14) & 0xFFFFFF) == 2)
  {
    DyldInfoBindOpcodes = llvm::object::MachOObjectFile::getDyldInfoBindOpcodes(a1);
    v9 = v8;
    v10 = (*((_DWORD *)a1 + 2) & 0xFFFFFFFE) == 18;
    v11 = a3;
    v12 = a2;
    v13 = a1;
    v14 = 1;
  }
  else
  {
    DyldInfoBindOpcodes = llvm::object::MachOObjectFile::getDyldInfoRebaseOpcodes(a1);
    v9 = v15;
    v10 = (*((_DWORD *)a1 + 2) & 0xFFFFFFFE) == 18;
    v11 = a3;
    v12 = a2;
    v13 = a1;
    v14 = 0;
  }
  llvm::object::MachOObjectFile::rebaseTable(v12, v13, DyldInfoBindOpcodes, v9, v10, v14, v11);
}

uint64_t llvm::object::MachOObjectFile::getDyldInfoRebaseOpcodes(llvm::object::MachOObjectFile *this)
{
  int8x16_t *v1;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (int8x16_t *)*((_QWORD *)this + 38);
  if (!v1)
    return 0;
  sub_1C59EAD2C((uint64_t)&v4, (uint64_t)this, v1);
  if ((v6 & 1) == 0)
    return *((_QWORD *)this + 2) + v5;
  result = v4;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getDyldInfoBindOpcodes(llvm::object::MachOObjectFile *this)
{
  int8x16_t *v1;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (int8x16_t *)*((_QWORD *)this + 38);
  if (!v1)
    return 0;
  sub_1C59EAD2C((uint64_t)&v4, (uint64_t)this, v1);
  if ((v6 & 1) == 0)
    return *((_QWORD *)this + 2) + v5;
  result = v4;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  return result;
}

double llvm::object::MachOBindEntry::MachOBindEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  char v12;
  double result;

  v11 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, a2, a3);
  *(_QWORD *)(v11 + 96) = a4;
  *(_QWORD *)(v11 + 104) = a5;
  if (a6)
    v12 = 8;
  else
    v12 = 4;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = a4;
  *(_BYTE *)(v11 + 144) = v12;
  *(_WORD *)(v11 + 145) = 0;
  *(_DWORD *)(v11 + 148) = a7;
  *(_WORD *)(v11 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 188) = 0u;
  return result;
}

{
  uint64_t v11;
  char v12;
  double result;

  v11 = llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry(a1, a2, a3);
  *(_QWORD *)(v11 + 96) = a4;
  *(_QWORD *)(v11 + 104) = a5;
  if (a6)
    v12 = 8;
  else
    v12 = 4;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = a4;
  *(_BYTE *)(v11 + 144) = v12;
  *(_WORD *)(v11 + 145) = 0;
  *(_DWORD *)(v11 + 148) = a7;
  *(_WORD *)(v11 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 188) = 0u;
  return result;
}

llvm::object::BindRebaseSegInfo *llvm::object::BindRebaseSegInfo::BindRebaseSegInfo(llvm::object::BindRebaseSegInfo *this, const llvm::object::MachOObjectFile *a2)
{
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  char v47;
  __int128 v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 16;
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x2000000000;
  v5 = *((unsigned __int8 *)a2 + 344);
  v6 = (*(uint64_t (**)(const llvm::object::MachOObjectFile *))(*(_QWORD *)a2 + 344))(a2);
  v8 = v7;
  v9 = (*(uint64_t (**)(const llvm::object::MachOObjectFile *))(*(_QWORD *)a2 + 352))(a2);
  v43 = v6;
  v44 = v8;
  v34 = v9;
  if (v8 != v10 || v6 != v9)
  {
    v12 = v10;
    v33 = (uint64_t)v4;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(&v46, v8, v6);
      if ((v47 & 1) != 0)
      {
        v16 = (char *)v46;
        *(_QWORD *)&v46 = 0;
        v45 = v16;
        sub_1C4D62BD4(&v45, (char **)&v48);
        if (v45)
          (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
      }
      else
      {
        v38 = v46;
      }
      v36[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 144))(v44, v43);
      v36[1] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 160))(v44, v43);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v44 + 168))(&v48, v44, v43);
      if ((v49 & 1) != 0)
      {
        v35 = v48;
        llvm::report_fatal_error(&v35);
      }
      v37 = v48;
      v17 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v43);
      v18 = (const char *)(v17 + 16);
      if (*(_BYTE *)(v17 + 31))
        v19 = 16;
      else
        v19 = strlen(v18);
      *(_QWORD *)&v39 = v18;
      *((_QWORD *)&v39 + 1) = v19;
      if (v19 != v14 || v14 && memcmp(v18, v15, v14))
      {
        ++v5;
        v13 = v36[0];
        v15 = v18;
        v14 = v19;
      }
      v42 = v5 - 1;
      v40 = v36[0] - v13;
      v41 = v13;
      v20 = *((unsigned int *)this + 2);
      v21 = *(_QWORD *)this;
      if (v20 < *((_DWORD *)this + 3))
        goto LABEL_19;
      v29 = v20 + 1;
      v30 = v21 + 88 * v20 > (unint64_t)v36;
      if (v21 > (unint64_t)v36 || !v30)
        break;
      v31 = (char *)v36 - v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, v33, v29, 88);
      v21 = *(_QWORD *)this;
      v22 = &v31[*(_QWORD *)this];
LABEL_20:
      v23 = v21 + 88 * *((unsigned int *)this + 2);
      v24 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v22;
      *(_OWORD *)(v23 + 16) = v24;
      v25 = *((_OWORD *)v22 + 2);
      v26 = *((_OWORD *)v22 + 3);
      v27 = *((_OWORD *)v22 + 4);
      *(_QWORD *)(v23 + 80) = *((_QWORD *)v22 + 10);
      *(_OWORD *)(v23 + 48) = v26;
      *(_OWORD *)(v23 + 64) = v27;
      *(_OWORD *)(v23 + 32) = v25;
      ++*((_DWORD *)this + 2);
      if ((v47 & 1) != 0)
      {
        v28 = v46;
        *(_QWORD *)&v46 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 128))(v44, &v43);
      v6 = v43;
      v8 = v44;
      if (v44 == v12 && v43 == v34)
        goto LABEL_30;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, v33, v29, 88);
    v21 = *(_QWORD *)this;
LABEL_19:
    v22 = (char *)v36;
    goto LABEL_20;
  }
LABEL_30:
  *((_DWORD *)this + 708) = v5;
  return this;
}

const char *llvm::object::BindRebaseSegInfo::checkSegAndOffsets(llvm::object::BindRebaseSegInfo *this, int a2, int a3, int a4, unsigned int a5, int a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *result;

  if (a2 == -1)
    return "missing preceding *_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB";
  if (*((_DWORD *)this + 708) <= a2)
    return "bad segIndex (too large)";
  if (!a5)
    return 0;
  v6 = *((_DWORD *)this + 2);
  if (!v6)
    return "bad offset, not in section";
  v7 = 0;
  v8 = a5;
  v9 = 88 * v6;
  v10 = *(_QWORD *)this + 80;
  while (1)
  {
    v11 = (a3 + (a4 + a6) * v7);
    v12 = (_DWORD *)v10;
    v13 = v9;
    while (1)
    {
      if (*v12 == a2)
      {
        v14 = *((_QWORD *)v12 - 2);
        if (v14 <= v11)
        {
          v15 = *((_QWORD *)v12 - 9) + v14;
          if (v15 > v11)
            break;
        }
      }
      v12 += 22;
      v13 -= 88;
      if (!v13)
        return "bad offset, not in section";
    }
    if (v15 < (v11 + a4))
      break;
    result = 0;
    if (++v7 == v8)
      return result;
  }
  return "bad offset, extends beyond section boundary";
}

_DWORD *llvm::object::BindRebaseSegInfo::segmentName(_DWORD *this, int a2)
{
  unsigned int v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = this[2];
  if (v2)
  {
    v3 = (_DWORD *)(*(_QWORD *)this + 80);
    v4 = 88 * v2;
    while (*v3 != a2)
    {
      v3 += 22;
      v4 -= 88;
      if (!v4)
        return this;
    }
    return (_DWORD *)*((_QWORD *)v3 - 4);
  }
  return this;
}

uint64_t llvm::object::BindRebaseSegInfo::findSection(llvm::object::BindRebaseSegInfo *this, int a2, unint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = *(_QWORD *)this;
  v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    v6 = result + 88 * v5;
    v7 = 88 * v5;
    while (1)
    {
      if (*(_DWORD *)(result + 80) == a2)
      {
        v8 = *(_QWORD *)(result + 64);
        if (v8 <= a3 && *(_QWORD *)(result + 8) + v8 > a3)
          break;
      }
      result += 88;
      v7 -= 88;
      if (!v7)
        return v6;
    }
  }
  return result;
}

uint64_t llvm::object::BindRebaseSegInfo::sectionName(llvm::object::BindRebaseSegInfo *this, int a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)this;
  v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    v5 = v3 + 88 * v4;
    v6 = 88 * v4;
    while (1)
    {
      if (*(_DWORD *)(v3 + 80) == a2)
      {
        v7 = *(_QWORD *)(v3 + 64);
        if (v7 <= a3 && *(_QWORD *)(v3 + 8) + v7 > a3)
          break;
      }
      v3 += 88;
      v6 -= 88;
      if (!v6)
      {
        v3 = v5;
        return *(_QWORD *)(v3 + 32);
      }
    }
  }
  return *(_QWORD *)(v3 + 32);
}

unint64_t llvm::object::BindRebaseSegInfo::address(llvm::object::BindRebaseSegInfo *this, int a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)this;
  v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    v5 = v3 + 88 * v4;
    v6 = 88 * v4;
    while (1)
    {
      if (*(_DWORD *)(v3 + 80) == a2)
      {
        v7 = *(_QWORD *)(v3 + 64);
        if (v7 <= a3 && *(_QWORD *)(v3 + 8) + v7 > a3)
          break;
      }
      v3 += 88;
      v6 -= 88;
      if (!v6)
      {
        v3 = v5;
        return *(_QWORD *)(v3 + 72) + a3;
      }
    }
  }
  return *(_QWORD *)(v3 + 72) + a3;
}

uint64_t llvm::object::BindRebaseSegInfo::contents(llvm::object::BindRebaseSegInfo *this, int a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)this;
  v4 = *((_DWORD *)this + 2);
  if (v4)
  {
    v5 = v3 + 88 * v4;
    v6 = 88 * v4;
    while (1)
    {
      if (*(_DWORD *)(v3 + 80) == a2)
      {
        v7 = *(_QWORD *)(v3 + 64);
        if (v7 <= a3 && *(_QWORD *)(v3 + 8) + v7 > a3)
          break;
      }
      v3 += 88;
      v6 -= 88;
      if (!v6)
      {
        v3 = v5;
        break;
      }
    }
  }
  v8 = a3 - *(_QWORD *)(v3 + 64);
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v3 + 24);
  if (v10 < v8)
    v8 = v10;
  return v9 + v8;
}

void llvm::object::MachOObjectFile::bindTable(uint64_t a1@<X0>, const llvm::object::MachOObjectFile *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  llvm::object::BindRebaseSegInfo *v14;
  llvm::object::BindRebaseSegInfo *v15;
  void **v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[5];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *__p[2];
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71[2];
  _OWORD v72[3];

  if (!*((_QWORD *)a2 + 33))
  {
    v14 = (llvm::object::BindRebaseSegInfo *)operator new();
    v15 = llvm::object::BindRebaseSegInfo::BindRebaseSegInfo(v14, a2);
    v16 = (void **)*((_QWORD *)a2 + 33);
    *((_QWORD *)a2 + 33) = v15;
    if (v16)
    {
      if (*v16 != v16 + 2)
        free(*v16);
      MEMORY[0x1CAA32FC0](v16, 0x1080C40E09A0471);
    }
  }
  llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry((uint64_t)&v61, a1, (uint64_t)a2);
  *(_QWORD *)&v67 = a3;
  *((_QWORD *)&v67 + 1) = a4;
  if (a5)
    v17 = 8;
  else
    v17 = 4;
  v69 = 0u;
  LOBYTE(v70) = v17;
  *(_WORD *)((char *)&v70 + 1) = 0;
  DWORD1(v70) = a6;
  WORD4(v70) = 0;
  *(_QWORD *)&v62 = 0;
  *(_OWORD *)v71 = 0u;
  memset(v72, 0, 28);
  DWORD2(v62) = -1;
  LOBYTE(v66) = 0;
  v64 = 0u;
  *((_QWORD *)&v68 + 1) = a3;
  llvm::object::MachORebaseBindEntry::moveNext((llvm::object::MachORebaseBindEntry *)&v61);
  llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry((uint64_t)v53, a1, (uint64_t)a2);
  *(_QWORD *)&v55 = a3;
  *((_QWORD *)&v55 + 1) = a4;
  LOBYTE(v58) = v17;
  *(_WORD *)((char *)&v58 + 1) = 0;
  DWORD1(v58) = a6;
  WORD4(v58) = 0;
  *(_OWORD *)__p = 0u;
  memset(v60, 0, 28);
  LOBYTE(v54) = 1;
  *((_QWORD *)&v56 + 1) = a3 + a4;
  v57 = 0u;
  v42 = v63;
  v43 = v64;
  v44 = v65;
  v45 = v66;
  v40 = v61;
  v41 = v62;
  v48 = v69;
  v49 = v70;
  v46 = v67;
  v47 = v68;
  v50 = v71[0];
  v52 = 0;
  v51 = 0u;
  sub_1C59EE2C0(&v51, v71[1], *(uint64_t *)&v72[0], (uint64_t)(*(_QWORD *)&v72[0] - (unint64_t)v71[1]) >> 5);
  v18 = v43;
  *(_OWORD *)(a7 + 32) = v42;
  *(_OWORD *)(a7 + 48) = v18;
  v19 = v45;
  *(_OWORD *)(a7 + 64) = v44;
  *(_OWORD *)(a7 + 80) = v19;
  v20 = v41;
  *(_OWORD *)a7 = v40;
  *(_OWORD *)(a7 + 16) = v20;
  v21 = v49;
  *(_OWORD *)(a7 + 128) = v48;
  *(_OWORD *)(a7 + 144) = v21;
  v22 = v52;
  *(_QWORD *)(a7 + 160) = v50;
  v23 = v47;
  *(_OWORD *)(a7 + 96) = v46;
  *(_OWORD *)(a7 + 112) = v23;
  *(_QWORD *)(a7 + 192) = *(_QWORD *)&v72[1];
  *(_DWORD *)(a7 + 200) = DWORD2(v72[1]);
  v29 = v53[2];
  v30 = v53[3];
  v31 = v53[4];
  v32 = v54;
  v27 = v53[0];
  v28 = v53[1];
  v35 = v57;
  v36 = v58;
  v33 = v55;
  v34 = v56;
  v37 = __p[0];
  v39 = 0;
  v38 = 0u;
  sub_1C59EE2C0(&v38, __p[1], *(uint64_t *)&v60[0], (uint64_t)(*(_QWORD *)&v60[0] - (unint64_t)__p[1]) >> 5);
  *(_OWORD *)(a7 + 240) = v29;
  *(_OWORD *)(a7 + 256) = v30;
  *(_OWORD *)(a7 + 272) = v31;
  *(_OWORD *)(a7 + 288) = v32;
  *(_OWORD *)(a7 + 208) = v27;
  *(_OWORD *)(a7 + 224) = v28;
  *(_OWORD *)(a7 + 336) = v35;
  *(_OWORD *)(a7 + 352) = v36;
  v24 = v39;
  *(_QWORD *)(a7 + 368) = v37;
  *(_OWORD *)(a7 + 304) = v33;
  *(_OWORD *)(a7 + 320) = v34;
  *(_DWORD *)(a7 + 408) = DWORD2(v60[1]);
  *(_OWORD *)(a7 + 168) = v51;
  *(_QWORD *)(a7 + 184) = v22;
  *(_OWORD *)(a7 + 376) = v38;
  v25 = *(_QWORD *)&v60[1];
  v26 = __p[1];
  *(_QWORD *)(a7 + 392) = v24;
  *(_QWORD *)(a7 + 400) = v25;
  if (v26)
  {
    *(_QWORD *)&v60[0] = v26;
    operator delete(v26);
  }
  if (v71[1])
  {
    *(void **)&v72[0] = v71[1];
    operator delete(v71[1]);
  }
}

void llvm::object::MachOObjectFile::bindTable(llvm::object::MachOObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t DyldInfoBindOpcodes;
  uint64_t v7;

  DyldInfoBindOpcodes = llvm::object::MachOObjectFile::getDyldInfoBindOpcodes(a1);
  llvm::object::MachOObjectFile::bindTable(a2, a1, DyldInfoBindOpcodes, v7, (*((_DWORD *)a1 + 2) & 0xFFFFFFFE) == 18, 0, a3);
}

void llvm::object::MachOObjectFile::lazyBindTable(llvm::object::MachOObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t DyldInfoLazyBindOpcodes;
  uint64_t v7;

  DyldInfoLazyBindOpcodes = llvm::object::MachOObjectFile::getDyldInfoLazyBindOpcodes(a1);
  llvm::object::MachOObjectFile::bindTable(a2, a1, DyldInfoLazyBindOpcodes, v7, (*((_DWORD *)a1 + 2) & 0xFFFFFFFE) == 18, 1, a3);
}

uint64_t llvm::object::MachOObjectFile::getDyldInfoLazyBindOpcodes(llvm::object::MachOObjectFile *this)
{
  int8x16_t *v1;
  uint64_t result;
  uint64_t v4[4];
  unsigned int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (int8x16_t *)*((_QWORD *)this + 38);
  if (!v1)
    return 0;
  sub_1C59EAD2C((uint64_t)v4, (uint64_t)this, v1);
  if ((v6 & 1) == 0)
    return *((_QWORD *)this + 2) + v5;
  result = v4[0];
  if (v4[0])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4[0] + 8))(v4[0]);
    return 0;
  }
  return result;
}

void llvm::object::MachOObjectFile::weakBindTable(llvm::object::MachOObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t DyldInfoWeakBindOpcodes;
  uint64_t v7;

  DyldInfoWeakBindOpcodes = llvm::object::MachOObjectFile::getDyldInfoWeakBindOpcodes(a1);
  llvm::object::MachOObjectFile::bindTable(a2, a1, DyldInfoWeakBindOpcodes, v7, (*((_DWORD *)a1 + 2) & 0xFFFFFFFE) == 18, 2, a3);
}

uint64_t llvm::object::MachOObjectFile::getDyldInfoWeakBindOpcodes(llvm::object::MachOObjectFile *this)
{
  int8x16_t *v1;
  uint64_t result;
  uint64_t v4[3];
  unsigned int v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (int8x16_t *)*((_QWORD *)this + 38);
  if (!v1)
    return 0;
  sub_1C59EAD2C((uint64_t)v4, (uint64_t)this, v1);
  if ((v6 & 1) == 0)
    return *((_QWORD *)this + 2) + v5;
  result = v4[0];
  if (v4[0])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4[0] + 8))(v4[0]);
    return 0;
  }
  return result;
}

void llvm::object::MachOObjectFile::fixupTable(const llvm::object::MachOObjectFile *a1@<X0>, void **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  llvm::object::BindRebaseSegInfo *v8;
  llvm::object::BindRebaseSegInfo *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33[2];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45[2];
  _OWORD v46[2];
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[2];
  _OWORD v68[2];
  uint64_t v69;
  char v70;
  _OWORD v71[5];
  __int128 v72;
  void *v73[2];
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  _BYTE *v85;
  __int128 *v86;
  __int128 *v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *__p;
  void *v97;
  uint64_t v98;
  _QWORD v99[4];
  char v100;
  _OWORD v101[6];
  void *v102;
  void *v103;
  uint64_t v104;
  _QWORD v105[4];
  char v106;
  void **v107[3];

  if (!*((_QWORD *)a1 + 33))
  {
    v8 = (llvm::object::BindRebaseSegInfo *)operator new();
    v9 = llvm::object::BindRebaseSegInfo::BindRebaseSegInfo(v8, a1);
    v10 = (void **)*((_QWORD *)a1 + 33);
    *((_QWORD *)a1 + 33) = v9;
    if (v10)
    {
      if (*v10 != v10 + 2)
        free(*v10);
      MEMORY[0x1CAA32FC0](v10, 0x1080C40E09A0471);
    }
  }
  llvm::object::MachOChainedFixupEntry::MachOChainedFixupEntry((uint64_t)&v78, a2, a1, a3, 1);
  *(_QWORD *)&v79 = 0;
  DWORD2(v79) = -1;
  LOBYTE(v83) = 0;
  LODWORD(v88) = 0;
  v81 = 0uLL;
  llvm::object::MachOChainedFixupEntry::moveNext((uint64_t)&v78);
  llvm::object::MachOAbstractFixupEntry::MachOAbstractFixupEntry((uint64_t)v71, (uint64_t)a2, (uint64_t)a1);
  v74 = 0u;
  v75 = 0u;
  *(_OWORD *)v73 = 0u;
  LODWORD(v76) = 0;
  HIDWORD(v76) = a3;
  if (!*a2)
    *a2 = 0;
  LOBYTE(v72) = 1;
  v51 = v80;
  v52 = v81;
  v53 = v82;
  v54 = v83;
  v49 = v78;
  v50 = v79;
  v56 = 0uLL;
  v55 = 0;
  sub_1C59EE340(&v55, v84, (uint64_t)v85, 0xCCCCCCCCCCCCCCCDLL * ((v85 - (_BYTE *)v84) >> 3));
  v57 = 0uLL;
  v58 = 0;
  sub_1C59EE3CC(&v57, v86, v87, 0x6DB6DB6DB6DB6DB7 * (((char *)v87 - (char *)v86) >> 3));
  v59 = v88;
  v60 = v89;
  v63 = v51;
  v64 = v52;
  v65 = v53;
  v66 = v54;
  v61 = v49;
  v62 = v50;
  v11 = v55;
  v12 = v58;
  v67[0] = v55;
  v25 = v56;
  v67[1] = (void *)v56;
  v55 = 0;
  v56 = 0uLL;
  v26 = v57;
  v58 = 0;
  v57 = 0uLL;
  v70 = v89;
  v69 = v88;
  v27 = v71[0];
  v28 = v71[1];
  v31 = v71[4];
  v32 = v72;
  v29 = v71[2];
  v30 = v71[3];
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  sub_1C59EE340(v33, v73[0], (uint64_t)v73[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v73[1] - (char *)v73[0]) >> 3));
  v35 = 0uLL;
  v36 = 0;
  sub_1C59EE3CC(&v35, *((__int128 **)&v74 + 1), (__int128 *)v75, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v75 - *((_QWORD *)&v74 + 1)) >> 3));
  v41 = v29;
  v42 = v30;
  v43 = v31;
  v44 = v32;
  v39 = v27;
  v40 = v28;
  v13 = v63;
  v14 = v64;
  v101[2] = v63;
  v101[3] = v64;
  v15 = v65;
  v16 = v66;
  v101[4] = v65;
  v101[5] = v66;
  v17 = v62;
  v101[0] = v61;
  v101[1] = v62;
  v90 = v27;
  v91 = v28;
  v95 = v32;
  v94 = v31;
  v93 = v30;
  v92 = v29;
  memset(v68, 0, sizeof(v68));
  *(_OWORD *)v67 = 0u;
  memset(v46, 0, sizeof(v46));
  *(_OWORD *)v45 = 0u;
  *(_OWORD *)a4 = v61;
  *(_OWORD *)(a4 + 16) = v17;
  *(_OWORD *)(a4 + 64) = v15;
  *(_OWORD *)(a4 + 80) = v16;
  v18 = v76;
  v37 = v76;
  v38 = v77;
  v19 = v34;
  *(_OWORD *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 48) = v14;
  v20 = *(_OWORD *)v33;
  v33[0] = 0;
  v33[1] = 0;
  v48 = v77;
  v47 = v18;
  v106 = v70;
  v21 = v69;
  v105[3] = v69;
  v100 = v77;
  v22 = v76;
  v99[3] = v76;
  v23 = v36;
  *(_OWORD *)(a4 + 104) = v25;
  v24 = v35;
  v34 = 0;
  v35 = 0uLL;
  v36 = 0;
  *(_QWORD *)(a4 + 96) = v11;
  v103 = 0;
  v102 = 0;
  *(_OWORD *)(a4 + 120) = v26;
  v104 = 0;
  memset(v105, 0, 24);
  *(_BYTE *)(a4 + 152) = v70;
  *(_QWORD *)(a4 + 136) = v12;
  *(_QWORD *)(a4 + 144) = v21;
  *(_OWORD *)(a4 + 160) = v27;
  *(_OWORD *)(a4 + 176) = v28;
  *(_OWORD *)(a4 + 224) = v31;
  *(_OWORD *)(a4 + 240) = v32;
  *(_OWORD *)(a4 + 192) = v29;
  *(_OWORD *)(a4 + 208) = v30;
  *(_OWORD *)(a4 + 256) = v20;
  *(_QWORD *)(a4 + 272) = v19;
  v97 = 0;
  __p = 0;
  *(_OWORD *)(a4 + 280) = v24;
  v98 = 0;
  memset(v99, 0, 24);
  *(_BYTE *)(a4 + 312) = v77;
  *(_QWORD *)(a4 + 296) = v23;
  *(_QWORD *)(a4 + 304) = v22;
  v107[0] = (void **)v99;
  sub_1C59F5360(v107);
  if (__p)
  {
    v97 = __p;
    operator delete(__p);
  }
  v107[0] = (void **)v105;
  sub_1C59F5360(v107);
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  *(_QWORD *)&v101[0] = (char *)v46 + 8;
  sub_1C59F5360((void ***)v101);
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  *(_QWORD *)&v101[0] = &v35;
  sub_1C59F5360((void ***)v101);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  *(_QWORD *)&v101[0] = (char *)v68 + 8;
  sub_1C59F5360((void ***)v101);
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  *(_QWORD *)&v101[0] = &v57;
  sub_1C59F5360((void ***)v101);
  if (v55)
  {
    *(_QWORD *)&v56 = v55;
    operator delete(v55);
  }
  *(_QWORD *)&v101[0] = (char *)&v74 + 8;
  sub_1C59F5360((void ***)v101);
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  *(_QWORD *)&v101[0] = &v86;
  sub_1C59F5360((void ***)v101);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
}

BOOL llvm::object::MachOObjectFile::containsAIRBuildTables(llvm::object::MachOObjectFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v17;
  _BYTE v18[8];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 16);
  v3 = *((unsigned int *)this + 34);
  if ((_DWORD)v3)
  {
    v17 = v2 + 16 * v3;
    v4 = 16 * v3;
    while (1)
    {
      if (*(_DWORD *)(v2 + 8) == 49)
      {
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v2, (uint64_t)v18);
        switch(strlen((const char *)&v19))
        {
          case 0xAuLL:
            if ((_QWORD)v19 == 0x55444F4D5F524941 && WORD4(v19) == 17740)
              return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
            if ((_QWORD)v19 == 0x454A424F5F524941 && WORD4(v19) == 21571)
              return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
            v7 = WORD4(v19);
            v8 = (_QWORD)v19 == 0x485341485F524941;
            v9 = 21317;
            break;
          case 0xCuLL:
            if ((_QWORD)v19 == 0x4154454D5F524941 && DWORD2(v19) == 1112099916)
              return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
            if ((_QWORD)v19 == 0x455049505F524941 && DWORD2(v19) == 1162758476)
              return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
            v7 = DWORD2(v19);
            v8 = (_QWORD)v19 == 0x545254535F524941;
            v9 = 1162625601;
            break;
          case 0xEuLL:
            if (((_QWORD)v19 != 0x444145485F524941 || *(_QWORD *)((char *)&v19 + 6) != 0x5458455F52454441)
              && ((_QWORD)v19 != 0x435345445F524941 || *(_QWORD *)((char *)&v19 + 6) != 0x524F545049524353))
            {
              goto LABEL_43;
            }
            return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
          case 0x10uLL:
            if ((_QWORD)v19 != 0x454A424F5F524941 || *((_QWORD *)&v19 + 1) != 0x5845444E495F5443)
              goto LABEL_43;
            return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
          default:
            goto LABEL_43;
        }
        if (v8 && v7 == v9)
          break;
      }
LABEL_43:
      v2 += 16;
      v4 -= 16;
      if (!v4)
      {
        v2 = v17;
        return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
      }
    }
  }
  return v2 != *((_QWORD *)this + 16) + 16 * *((unsigned int *)this + 34);
}

void llvm::object::MachOObjectFile::getAIRMetalLibNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v24);
        if (!BYTE7(v25)
          && strlen((const char *)&v24 + 8) == 12
          && *((_QWORD *)&v24 + 1) == 0x4154454D5F524941
          && (_DWORD)v25 == 1112099916)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24 = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRModuleNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v24);
        if (!BYTE7(v25)
          && strlen((const char *)&v24 + 8) == 10
          && *((_QWORD *)&v24 + 1) == 0x55444F4D5F524941
          && (unsigned __int16)v25 == 17740)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24 = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRDescriptorNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v25 = 0;
        memset(v24, 0, sizeof(v24));
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)v24);
        if (!BYTE7(v24[1])
          && strlen((const char *)v24 + 8) == 14
          && *((_QWORD *)&v24[0] + 1) == 0x435345445F524941
          && *(_QWORD *)((char *)v24 + 14) == 0x524F545049524353)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24[0] = "Structure read out-of-range";
      LOWORD(v25) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRObjectNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v24);
        if (!BYTE7(v25)
          && strlen((const char *)&v24 + 8) == 10
          && *((_QWORD *)&v24 + 1) == 0x454A424F5F524941
          && (unsigned __int16)v25 == 21571)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24 = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRObjectIndexNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v24);
        if ((BYTE7(v25) || strlen((const char *)&v24 + 8) == 16)
          && *((_QWORD *)&v24 + 1) == 0x454A424F5F524941
          && (_QWORD)v25 == 0x5845444E495F5443)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24 = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRPipelineNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v24);
        if (!BYTE7(v25)
          && strlen((const char *)&v24 + 8) == 12
          && *((_QWORD *)&v24 + 1) == 0x455049505F524941
          && (_DWORD)v25 == 1162758476)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24 = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRHashesNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v20;
  _QWORD *v21;
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        v24 = 0u;
        v25 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v24);
        if (!BYTE7(v25)
          && strlen((const char *)&v24 + 8) == 10
          && *((_QWORD *)&v24 + 1) == 0x485341485F524941
          && (unsigned __int16)v25 == 21317)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E81A0D28;
    v21[1] = 3;
    v21[2] = v20;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v21;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v22);
    if (v23 < 0
      || (v11 = *((_QWORD *)this + 2), v12 = v11 + v23, v11 + v23 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v24 = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v24);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v13 = *(_QWORD *)v12;
      v15 = *(_DWORD *)(v12 + 8);
      v14 = *(_DWORD *)(v12 + 12);
      v16 = *((_DWORD *)this + 2);
      v17 = bswap64(v13);
      v18 = bswap32(v15);
      if (((1 << v16) & 0xAAC00) == 0)
      {
        v18 = v15;
        v17 = v13;
      }
      if (v16 <= 0x13)
        v15 = v18;
      *(_BYTE *)(a2 + 16) &= ~1u;
      if (v16 <= 0x13)
        v13 = v17;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 12) = v14;
    }
  }
}

void llvm::object::MachOObjectFile::getAIRStringTableNote(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  unsigned int v13;
  unint64_t v15;
  _QWORD *v16;
  _BYTE v17[24];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v21 = 0;
        v19 = 0u;
        v20 = 0u;
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)&v19);
        if (!BYTE7(v20)
          && strlen((const char *)&v19 + 8) == 12
          && *((_QWORD *)&v19 + 1) == 0x545254535F524941
          && (_DWORD)v20 == 1162625601)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15 = qword_1EF8F7238[0];
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A0D28;
    v16[1] = 3;
    v16[2] = v15;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v16;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v17);
    if (v18 < 0 || (v11 = *((_QWORD *)this + 2), v11 + v18 + 16 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v19 = "Structure read out-of-range";
      LOWORD(v21) = 259;
      sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v19);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
    else
    {
      v12 = *(int8x16_t *)(v11 + v18);
      v13 = *((_DWORD *)this + 2);
      if (v13 <= 0x13 && ((1 << v13) & 0xAAC00) != 0)
        v12 = vrev64q_s8(v12);
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(int8x16_t *)a2 = v12;
    }
  }
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::AIRBuildTableEntry(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 72) = a6;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 72) = a6;
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveNext(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  unint64_t v20;

  v2 = *(_QWORD *)(result + 8) + 40 * a2;
  *(_QWORD *)(result + 8) = v2;
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_DWORD *)(result + 16) + a2;
  *(_DWORD *)(result + 16) = v4;
  if (v4 < v3)
  {
    if (v2 < 0
      || (v5 = *(_QWORD *)(*(_QWORD *)result + 16),
          v6 = v5 + v2,
          v6 + 40 > (unint64_t)(v5 + *(_QWORD *)(*(_QWORD *)result + 24))))
    {
      llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
    }
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    v9 = *(double *)(v6 + 32);
    v10 = *(_DWORD *)(*(_QWORD *)result + 8);
    v11 = COERCE_DOUBLE(vrev32_s8(*(int8x8_t *)&v9));
    v12 = bswap32(v7);
    v13 = bswap64(v7);
    v14 = bswap64(v8);
    if ((LOBYTE(v11) & 1) != 0)
      v15 = HIDWORD(v13);
    else
      v15 = HIDWORD(v7);
    if ((LOBYTE(v11) & 1) != 0)
    {
      v12 = v13;
      v16 = v14;
    }
    else
    {
      v16 = *(_QWORD *)(v6 + 24);
    }
    v17 = v10 > 0x13;
    v18 = (1 << v10) & 0xAAC00;
    v19 = v17 || v18 == 0;
    if (v19)
      v20 = HIDWORD(v7);
    else
      v20 = v15;
    if (v19)
      v7 = v7;
    else
      v7 = v12;
    if (!v19)
    {
      v8 = v16;
      v9 = v11;
    }
    *(_OWORD *)(result + 24) = *(_OWORD *)v6;
    *(_QWORD *)(result + 40) = v7 | (v20 << 32);
    *(_QWORD *)(result + 48) = v8;
    *(double *)(result + 56) = v9;
  }
  return result;
}

{
  return __ZN4llvm6object18AIRBuildTableEntryINS_5MachO14air_n_metallibEE8moveNextEj(result, a2);
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveToFirst(uint64_t result)
{
  if (*(_DWORD *)(result + 20))
  {
    *(_QWORD *)(result + 8) -= 40;
    --*(_DWORD *)(result + 16);
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveToEnd(uint64_t result)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(result + 20);
  if (v1)
  {
    v2 = v1 - 1;
    *(_QWORD *)(result + 8) += 40 * v2;
    *(_DWORD *)(result + 16) += v2;
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::AIRBuildTableEntry(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 72) = a6;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 72) = a6;
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveNext(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  double *v6;
  double v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  double v12;
  __int128 v13;

  v2 = *(_QWORD *)(result + 8) + 40 * a2;
  *(_QWORD *)(result + 8) = v2;
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_DWORD *)(result + 16) + a2;
  *(_DWORD *)(result + 16) = v4;
  if (v4 < v3)
  {
    if (v2 < 0
      || (v5 = *(_QWORD *)(*(_QWORD *)result + 16),
          v6 = (double *)(v5 + v2),
          (unint64_t)(v6 + 5) > v5 + *(_QWORD *)(*(_QWORD *)result + 24)))
    {
      llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
    }
    v7 = v6[4];
    v8 = *(_DWORD *)(*(_QWORD *)result + 8);
    v9 = v8 > 0x13;
    v10 = (1 << v8) & 0xAAC00;
    v11 = v9 || v10 == 0;
    v12 = COERCE_DOUBLE(vrev32_s8(*(int8x8_t *)&v7));
    if (!v11)
      v7 = v12;
    v13 = *(_OWORD *)v6;
    *(_OWORD *)(result + 40) = *((_OWORD *)v6 + 1);
    *(_OWORD *)(result + 24) = v13;
    *(double *)(result + 56) = v7;
  }
  return result;
}

{
  return __ZN4llvm6object18AIRBuildTableEntryINS_5MachO12air_n_moduleEE8moveNextEj(result, a2);
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveToFirst(uint64_t result)
{
  if (*(_DWORD *)(result + 20))
  {
    *(_QWORD *)(result + 8) -= 40;
    --*(_DWORD *)(result + 16);
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveToEnd(uint64_t result)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(result + 20);
  if (v1)
  {
    v2 = v1 - 1;
    *(_QWORD *)(result + 8) += 40 * v2;
    *(_DWORD *)(result + 16) += v2;
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::AIRBuildTableEntry(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 88) = a6;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 88) = a6;
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveNext(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  unsigned int v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  unint64_t v20;
  __int128 v21;

  v2 = *(_QWORD *)(result + 8) + 56 * a2;
  *(_QWORD *)(result + 8) = v2;
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_DWORD *)(result + 16) + a2;
  *(_DWORD *)(result + 16) = v4;
  if (v4 < v3)
  {
    if (v2 < 0
      || (v5 = *(_QWORD *)(*(_QWORD *)result + 16),
          v6 = (__int128 *)(v5 + v2),
          (unint64_t)v6 + 56 > v5 + *(_QWORD *)(*(_QWORD *)result + 24)))
    {
      llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
    }
    v7 = *((_QWORD *)v6 + 4);
    v8 = *((_QWORD *)v6 + 5);
    v9 = *((double *)v6 + 6);
    v10 = *(_DWORD *)(*(_QWORD *)result + 8);
    v11 = COERCE_DOUBLE(vrev32_s8(*(int8x8_t *)&v9));
    v12 = bswap64(v7);
    v13 = bswap64(v8);
    v14 = bswap32(v7);
    if ((LOBYTE(v11) & 1) != 0)
      v15 = HIDWORD(v7);
    else
      v15 = HIDWORD(v12);
    if ((LOBYTE(v11) & 1) != 0)
    {
      LODWORD(v12) = v14;
      v16 = *((_QWORD *)v6 + 5);
    }
    else
    {
      v16 = v13;
    }
    v17 = v10 > 0x13;
    v18 = (1 << v10) & 0xAAC00;
    v19 = v17 || v18 == 0;
    if (v19)
      v20 = HIDWORD(v7);
    else
      v20 = v15;
    if (v19)
      v7 = v7;
    else
      v7 = v12;
    if (!v19)
    {
      v8 = v16;
      v9 = v11;
    }
    v21 = *v6;
    *(_OWORD *)(result + 40) = v6[1];
    *(_OWORD *)(result + 24) = v21;
    *(_QWORD *)(result + 56) = v7 | (v20 << 32);
    *(_QWORD *)(result + 64) = v8;
    *(double *)(result + 72) = v9;
  }
  return result;
}

{
  return __ZN4llvm6object18AIRBuildTableEntryINS_5MachO16air_n_descriptorEE8moveNextEj(result, a2);
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveToFirst(uint64_t result)
{
  if (*(_DWORD *)(result + 20))
  {
    *(_QWORD *)(result + 8) -= 56;
    --*(_DWORD *)(result + 16);
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveToEnd(uint64_t result)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(result + 20);
  if (v1)
  {
    v2 = v1 - 1;
    *(_QWORD *)(result + 8) += 56 * v2;
    *(_DWORD *)(result + 16) += v2;
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object>::AIRBuildTableEntry(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 72) = a6;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 72) = a6;
  return result;
}

double llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object>::moveNext(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  double result;
  int8x16_t v7;
  int8x16_t v8[2];
  int v9;

  v2 = *(_QWORD *)(a1 + 8) + 36 * a2;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16) + a2;
  *(_DWORD *)(a1 + 16) = v4;
  if (v4 < v3)
  {
    sub_1C59E836C(v8, *(_QWORD *)a1, (int8x16_t *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + v2));
    result = *(double *)v8[0].i64;
    v7 = v8[1];
    *(int8x16_t *)(a1 + 24) = v8[0];
    *(int8x16_t *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 56) = v9;
  }
  return result;
}

{
  return __ZN4llvm6object18AIRBuildTableEntryINS_5MachO12air_n_objectEE8moveNextEj(a1, a2);
}

int8x16_t *sub_1C59E836C(int8x16_t *result, uint64_t a2, int8x16_t *a3)
{
  unint64_t v3;
  BOOL v4;
  int8x16_t v5;
  unsigned int v6;
  int v7;
  unsigned int v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 > (unint64_t)a3 || (unint64_t)a3[2].u64 + 4 > v3 + *(_QWORD *)(a2 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = a3[1];
  *result = *a3;
  result[1] = v5;
  result[2].i32[0] = a3[2].i32[0];
  v6 = *(_DWORD *)(a2 + 8);
  v4 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  if (!v4 && v7 != 0)
  {
    v9 = bswap32(result[2].u32[0]);
    result[2].i32[0] = v9;
    *result = vrev32q_s8(*result);
    result[1].i32[0] = bswap32(result[1].u32[0]);
    if ((v9 & 2) == 0)
      result[1].i32[1] = bswap32(result[1].u32[1]);
    result[1].i32[2] = bswap32(result[1].u32[2]);
    if ((v9 & 1) == 0)
      result[1].i32[3] = bswap32(result[1].u32[3]);
  }
  return result;
}

double llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object>::moveToFirst(uint64_t a1)
{
  double result;

  if (*(_DWORD *)(a1 + 20))
  {
    *(_QWORD *)(a1 + 8) -= 36;
    --*(_DWORD *)(a1 + 16);
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object>::moveNext(a1, 1u);
  }
  return result;
}

double llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object>::moveToEnd(uint64_t a1)
{
  int v1;
  unsigned int v2;
  double result;

  v1 = *(_DWORD *)(a1 + 20);
  if (v1)
  {
    v2 = v1 - 1;
    *(_QWORD *)(a1 + 8) += 36 * v2;
    *(_DWORD *)(a1 + 16) += v2;
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object>::moveNext(a1, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::AIRBuildTableEntry(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 56) = a6;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 16) + a5;
  *(_QWORD *)(result + 56) = a6;
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveNext(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x8_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;

  v2 = *(_QWORD *)(result + 8) + 24 * a2;
  *(_QWORD *)(result + 8) = v2;
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_DWORD *)(result + 16) + a2;
  *(_DWORD *)(result + 16) = v4;
  if (v4 < v3)
  {
    if (v2 < 0
      || (v5 = *(_QWORD *)(*(_QWORD *)result + 16),
          v6 = v5 + v2,
          v6 + 24 > (unint64_t)(v5 + *(_QWORD *)(*(_QWORD *)result + 24))))
    {
      llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
    }
    v7 = *(int8x16_t *)v6;
    v8 = *(int8x8_t *)(v6 + 16);
    v9 = *(_DWORD *)(*(_QWORD *)result + 8);
    v10 = v9 > 0x13;
    v11 = (1 << v9) & 0xAAC00;
    if (!v10 && v11 != 0)
    {
      v7 = vrev32q_s8(v7);
      v8 = vrev32_s8(v8);
    }
    *(int8x16_t *)(result + 24) = v7;
    *(int8x8_t *)(result + 40) = v8;
  }
  return result;
}

{
  return __ZN4llvm6object18AIRBuildTableEntryINS_5MachO18air_n_object_indexEE8moveNextEj(result, a2);
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveToFirst(uint64_t result)
{
  if (*(_DWORD *)(result + 20))
  {
    *(_QWORD *)(result + 8) -= 24;
    --*(_DWORD *)(result + 16);
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveToEnd(uint64_t result)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(result + 20);
  if (v1)
  {
    v2 = v1 - 1;
    *(_QWORD *)(result + 8) += 24 * v2;
    *(_DWORD *)(result + 16) += v2;
    return llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveNext(result, 1u);
  }
  return result;
}

uint64_t llvm::object::AIRMetalLib::find@<X0>(_QWORD *__s2@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 *v5;
  char *v6;
  __int128 *v7;
  unint64_t v8;
  size_t v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  BOOL v15;
  __int128 v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v5 = (__int128 *)result;
  v32 = *MEMORY[0x1E0C80C00];
  v6 = (char *)(*(_QWORD *)(*(_QWORD *)result + 16) + *(_QWORD *)(result + 8));
  v7 = (__int128 *)(result + 80);
  v25 = (char *)(*(_QWORD *)(*(_QWORD *)(result + 80) + 16) + *(_QWORD *)(result + 88));
  v23 = v6;
  if (v25 != v6)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - v6) >> 3);
    if (a3 >= 0x10)
      v9 = 16;
    else
      v9 = a3;
    if (a3 > 0x10)
      v10 = -1;
    else
      v10 = 1;
    if (a3 == 16)
      v11 = 0;
    else
      v11 = v10;
    do
    {
      v12 = &v6[40 * (v8 >> 1)];
      if (v9 && (result = memcmp(&v6[40 * (v8 >> 1)], __s2, v9), (_DWORD)result))
        v13 = ((int)result >> 31) | 1;
      else
        v13 = v11;
      if (v13 == -1)
        v8 += ~(v8 >> 1);
      else
        v8 >>= 1;
      if (v13 == -1)
        v6 = v12 + 40;
    }
    while (v8);
  }
  v14 = v6 != v25 && a3 == 16;
  if (v14 && (*(_QWORD *)v6 == *__s2 ? (v15 = *((_QWORD *)v6 + 1) == __s2[1]) : (v15 = 0), v15))
  {
    v20 = v5[3];
    v29 = v5[2];
    v30 = v20;
    v31 = v5[4];
    v21 = v5[1];
    v27 = *v5;
    v28 = v21;
    result = llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveNext((uint64_t)&v27, -858993459 * ((unint64_t)(v6 - v23) >> 3));
    v22 = v30;
    v17 = a4;
    a4[2] = v29;
    a4[3] = v22;
    a4[4] = v31;
    v19 = v27;
    v18 = v28;
  }
  else
  {
    v16 = v7[3];
    v17 = a4;
    a4[2] = v7[2];
    a4[3] = v16;
    a4[4] = v7[4];
    v19 = *v7;
    v18 = v7[1];
  }
  *v17 = v19;
  v17[1] = v18;
  return result;
}

void llvm::object::MachOObjectFile::AIRMetalLibTable(llvm::object::MachOObjectFile *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25[2];
  char v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRHeaderExt(a1, &v27);
  if ((v34 & 1) == 0)
  {
    v6 = v27.i64[0];
    v7 = v30;
    v9 = v32;
    v8 = v33;
    goto LABEL_13;
  }
  llvm::object::MachOObjectFile::getAIRMetalLibNote(a1, (uint64_t)&v20);
  if ((v21 & 1) != 0)
  {
    v19 = (char *)v20;
    sub_1C4D62BD4(&v19, v25);
    if (v19)
      (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
    v8 = 0;
    v9 = 0;
    v7 = 0;
    v6 = 0;
    v10 = (char *)v27.i64[0];
  }
  else
  {
    v19 = (char *)v27.i64[0];
    sub_1C4D62BD4(&v19, v25);
    if (v19)
      (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
    v6 = v20;
    v7 = DWORD2(v20);
    llvm::object::MachOObjectFile::getAIRStringTableNote(a1, (uint64_t)v25);
    if ((v26 & 1) == 0)
    {
      v9 = v25[0];
      v8 = v25[1];
      goto LABEL_13;
    }
    v8 = 0;
    v9 = 0;
    v10 = v25[0];
  }
  *a2 = v10;
LABEL_13:
  v27.i64[0] = (uint64_t)a1;
  v27.i64[1] = v6;
  LODWORD(v28) = 0;
  DWORD1(v28) = v7;
  v11 = &v9[*((_QWORD *)a1 + 2)];
  *(_QWORD *)&v31 = v11;
  *((_QWORD *)&v31 + 1) = v8;
  if (v7)
  {
    v27.i64[1] = v6 - 40;
    LODWORD(v28) = -1;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveNext((uint64_t)&v27, 1u);
    *(_QWORD *)&v24 = &v9[*((_QWORD *)a1 + 2)];
    *((_QWORD *)&v24 + 1) = v8;
    *(_QWORD *)&v20 = a1;
    *((_QWORD *)&v20 + 1) = v6 + 40 * (v7 - 1);
    LODWORD(v21) = v7 - 1;
    DWORD1(v21) = v7;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_metallib>::moveNext((uint64_t)&v20, 1u);
  }
  else
  {
    *(_QWORD *)&v20 = a1;
    *((_QWORD *)&v20 + 1) = v6;
    *(_QWORD *)&v21 = 0;
    *(_QWORD *)&v24 = v11;
    *((_QWORD *)&v24 + 1) = v8;
  }
  v12 = v28;
  v13 = v30;
  v14 = v31;
  *(_OWORD *)(a3 + 32) = v29;
  *(_OWORD *)(a3 + 48) = v13;
  *(int8x16_t *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v12;
  v15 = v22;
  v16 = v23;
  v17 = v20;
  *(_OWORD *)(a3 + 96) = v21;
  *(_OWORD *)(a3 + 112) = v15;
  v18 = v24;
  *(_OWORD *)(a3 + 128) = v16;
  *(_OWORD *)(a3 + 144) = v18;
  *(_OWORD *)(a3 + 64) = v14;
  *(_OWORD *)(a3 + 80) = v17;
  if (!*a2)
    *a2 = 0;
}

void llvm::object::MachOObjectFile::getAIRHeaderExt(llvm::object::MachOObjectFile *this@<X0>, int8x16_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unsigned int v19;
  unint64_t v21;
  _QWORD *v22;
  _BYTE v23[24];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  v5 = *((unsigned int *)this + 34);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    v7 = 16 * v5;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == 49)
      {
        v26 = 0;
        memset(v25, 0, sizeof(v25));
        llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, (unint64_t *)v4, (uint64_t)v25);
        if (!BYTE7(v25[1])
          && strlen((const char *)v25 + 8) == 14
          && *((_QWORD *)&v25[0] + 1) == 0x444145485F524941
          && *(_QWORD *)((char *)v25 + 14) == 0x5458455F52454441)
        {
          break;
        }
      }
      v4 += 16;
      v7 -= 16;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
    v9 = (unint64_t *)v4;
    v4 = *((_QWORD *)this + 16);
    v10 = *((unsigned int *)this + 34);
  }
  else
  {
    v10 = 0;
    v9 = (unint64_t *)*((_QWORD *)this + 16);
  }
  if (v9 == (unint64_t *)(v4 + 16 * v10))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    v22 = (_QWORD *)operator new();
    *v22 = &off_1E81A0D28;
    v22[1] = 3;
    v22[2] = v21;
    a2[6].i8[0] |= 1u;
    a2->i64[0] = (uint64_t)v22;
  }
  else
  {
    llvm::object::MachOObjectFile::getNoteLoadCommand((uint64_t)this, v9, (uint64_t)v23);
    if (v24 < 0
      || (v11 = *((_QWORD *)this + 2),
          v12 = (int8x16_t *)(v11 + v24),
          v11 + v24 + 96 > (unint64_t)(v11 + *((_QWORD *)this + 3))))
    {
      *(_QWORD *)&v25[0] = "Structure read out-of-range";
      LOWORD(v26) = 259;
      sub_1C59D7FE0(a2->i64, (uint64_t *)v25);
      a2[6].i8[0] |= 1u;
    }
    else
    {
      v13 = *v12;
      v14 = v12[1];
      v16 = v12[2];
      v15 = v12[3];
      v17 = v12[4];
      v18 = v12[5];
      v19 = *((_DWORD *)this + 2);
      if (v19 <= 0x13 && ((1 << v19) & 0xAAC00) != 0)
      {
        v13 = vrev64q_s8(v13);
        v14 = vrev64q_s8(v14);
        v16 = vrev64q_s8(v16);
        v15 = vrev32q_s8(v15);
        v17 = vrev32q_s8(v17);
        v18 = vrev64q_s8(v18);
      }
      a2[6].i8[0] &= ~1u;
      *a2 = v13;
      a2[1] = v14;
      a2[2] = v16;
      a2[3] = v15;
      a2[4] = v17;
      a2[5] = v18;
    }
  }
}

uint64_t llvm::object::AIRModule::find@<X0>(_QWORD *__s2@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 *v5;
  char *v6;
  __int128 *v7;
  unint64_t v8;
  size_t v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v5 = (__int128 *)result;
  v33 = *MEMORY[0x1E0C80C00];
  v6 = (char *)(*(_QWORD *)(*(_QWORD *)result + 16) + *(_QWORD *)(result + 8));
  v7 = (__int128 *)(result + 80);
  v27 = (char *)(*(_QWORD *)(*(_QWORD *)(result + 80) + 16) + *(_QWORD *)(result + 88));
  v24 = v6;
  if (v27 != v6)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v6) >> 3);
    if (a3 >= 0x20)
      v9 = 32;
    else
      v9 = a3;
    if (a3 > 0x20)
      v10 = -1;
    else
      v10 = 1;
    if (a3 == 32)
      v11 = 0;
    else
      v11 = v10;
    do
    {
      v12 = &v6[40 * (v8 >> 1)];
      if (v9 && (result = memcmp(&v6[40 * (v8 >> 1)], __s2, v9), (_DWORD)result))
        v13 = ((int)result >> 31) | 1;
      else
        v13 = v11;
      if (v13 == -1)
        v8 += ~(v8 >> 1);
      else
        v8 >>= 1;
      if (v13 == -1)
        v6 = v12 + 40;
    }
    while (v8);
  }
  if (v6 != v27
    && a3 == 32
    && (*(_QWORD *)v6 == *__s2 ? (v14 = *((_QWORD *)v6 + 1) == __s2[1]) : (v14 = 0),
        v14 ? (v15 = *((_QWORD *)v6 + 2) == __s2[2]) : (v15 = 0),
        v15 ? (v16 = *((_QWORD *)v6 + 3) == __s2[3]) : (v16 = 0),
        v16))
  {
    v21 = v5[3];
    v30 = v5[2];
    v31 = v21;
    v32 = v5[4];
    v22 = v5[1];
    v28 = *v5;
    v29 = v22;
    result = llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveNext((uint64_t)&v28, -858993459 * ((unint64_t)(v6 - v24) >> 3));
    v23 = v31;
    v18 = a4;
    a4[2] = v30;
    a4[3] = v23;
    a4[4] = v32;
    v20 = v28;
    v19 = v29;
  }
  else
  {
    v17 = v7[3];
    v18 = a4;
    a4[2] = v7[2];
    a4[3] = v17;
    a4[4] = v7[4];
    v20 = *v7;
    v19 = v7[1];
  }
  *v18 = v20;
  v18[1] = v19;
  return result;
}

void llvm::object::MachOObjectFile::AIRModuleTable(llvm::object::MachOObjectFile *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRHeaderExt(a1, &v22);
  if ((v27 & 1) != 0)
  {
    llvm::object::MachOObjectFile::getAIRModuleNote(a1, (uint64_t)&v17);
    if ((v18 & 1) != 0)
    {
      v15 = (char *)v17;
      sub_1C4D62BD4(&v15, &v16);
      if (v15)
        (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
      v7 = 0;
      v6 = 0;
      *a2 = v22.i64[0];
    }
    else
    {
      v15 = (char *)v22.i64[0];
      sub_1C4D62BD4(&v15, &v16);
      if (v15)
        (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
      v7 = DWORD2(v17);
      v6 = v17;
    }
  }
  else
  {
    v6 = v22.i64[1];
    v7 = DWORD1(v25);
  }
  v22.i64[0] = (uint64_t)a1;
  v22.i64[1] = v6;
  LODWORD(v23) = 0;
  DWORD1(v23) = v7;
  v8 = *((_QWORD *)a1 + 2);
  v26 = v8;
  if (v7)
  {
    v22.i64[1] = v6 - 40;
    LODWORD(v23) = -1;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveNext((uint64_t)&v22, 1u);
    v21 = *((unint64_t *)a1 + 2);
    *(_QWORD *)&v17 = a1;
    *((_QWORD *)&v17 + 1) = v6 + 40 * (v7 - 1);
    LODWORD(v18) = v7 - 1;
    DWORD1(v18) = v7;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_module>::moveNext((uint64_t)&v17, 1u);
  }
  else
  {
    *(_QWORD *)&v17 = a1;
    *((_QWORD *)&v17 + 1) = v6;
    *(_QWORD *)&v18 = 0;
    v21 = v8;
  }
  v9 = v25;
  *(_OWORD *)(a3 + 32) = v24;
  *(_OWORD *)(a3 + 48) = v9;
  v10 = v23;
  *(int8x16_t *)a3 = v22;
  *(_OWORD *)(a3 + 16) = v10;
  v11 = v19;
  v12 = v20;
  v13 = v17;
  *(_OWORD *)(a3 + 96) = v18;
  *(_OWORD *)(a3 + 112) = v11;
  v14 = v21;
  *(_OWORD *)(a3 + 128) = v12;
  *(_OWORD *)(a3 + 144) = v14;
  *(_OWORD *)(a3 + 64) = v26;
  *(_OWORD *)(a3 + 80) = v13;
  if (!*a2)
    *a2 = 0;
}

uint64_t llvm::object::AIRDescriptor::find@<X0>(_QWORD *__s2@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 *v5;
  char *v6;
  __int128 *v7;
  unint64_t v8;
  size_t v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v5 = (__int128 *)result;
  v37 = *MEMORY[0x1E0C80C00];
  v6 = (char *)(*(_QWORD *)(*(_QWORD *)result + 16) + *(_QWORD *)(result + 8));
  v7 = (__int128 *)(result + 96);
  v30 = (char *)(*(_QWORD *)(*(_QWORD *)(result + 96) + 16) + *(_QWORD *)(result + 104));
  v27 = v6;
  if (v30 != v6)
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v30 - v6) >> 3);
    if (a3 >= 0x20)
      v9 = 32;
    else
      v9 = a3;
    if (a3 > 0x20)
      v10 = -1;
    else
      v10 = 1;
    if (a3 == 32)
      v11 = 0;
    else
      v11 = v10;
    do
    {
      v12 = &v6[56 * (v8 >> 1)];
      if (v9 && (result = memcmp(&v6[56 * (v8 >> 1)], __s2, v9), (_DWORD)result))
        v13 = ((int)result >> 31) | 1;
      else
        v13 = v11;
      if (v13 == -1)
        v8 += ~(v8 >> 1);
      else
        v8 >>= 1;
      if (v13 == -1)
        v6 = v12 + 56;
    }
    while (v8);
  }
  if (v6 != v30
    && a3 == 32
    && (*(_QWORD *)v6 == *__s2 ? (v14 = *((_QWORD *)v6 + 1) == __s2[1]) : (v14 = 0),
        v14 ? (v15 = *((_QWORD *)v6 + 2) == __s2[2]) : (v15 = 0),
        v15 ? (v16 = *((_QWORD *)v6 + 3) == __s2[3]) : (v16 = 0),
        v16))
  {
    v22 = v5[3];
    v33 = v5[2];
    v34 = v22;
    v23 = v5[5];
    v35 = v5[4];
    v36 = v23;
    v24 = v5[1];
    v31 = *v5;
    v32 = v24;
    result = llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveNext((uint64_t)&v31, -1227133513 * ((unint64_t)(v6 - v27) >> 3));
    v25 = v34;
    v18 = a4;
    a4[2] = v33;
    a4[3] = v25;
    v26 = v36;
    a4[4] = v35;
    a4[5] = v26;
    v20 = v31;
    v21 = v32;
  }
  else
  {
    v17 = v7[3];
    v18 = a4;
    a4[2] = v7[2];
    a4[3] = v17;
    v19 = v7[5];
    a4[4] = v7[4];
    a4[5] = v19;
    v20 = *v7;
    v21 = v7[1];
  }
  *v18 = v20;
  v18[1] = v21;
  return result;
}

void llvm::object::MachOObjectFile::AIRDescriptorTable(llvm::object::MachOObjectFile *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25[2];
  char v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRHeaderExt(a1, &v27);
  if ((v33 & 1) == 0)
  {
    v6 = v28;
    v7 = DWORD2(v30);
    v8 = (char *)*((_QWORD *)&v32 + 1);
    v9 = (char *)v32;
    goto LABEL_13;
  }
  llvm::object::MachOObjectFile::getAIRDescriptorNote(a1, (uint64_t)&v19);
  if ((v20 & 1) != 0)
  {
    v18 = (char *)v19;
    sub_1C4D62BD4(&v18, v25);
    if (v18)
      (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
    v8 = 0;
    v9 = 0;
    v7 = 0;
    v6 = 0;
    v10 = (char *)v27.i64[0];
  }
  else
  {
    v18 = (char *)v27.i64[0];
    sub_1C4D62BD4(&v18, v25);
    if (v18)
      (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
    v6 = v19;
    v7 = DWORD2(v19);
    llvm::object::MachOObjectFile::getAIRStringTableNote(a1, (uint64_t)v25);
    if ((v26 & 1) == 0)
    {
      v9 = v25[0];
      v8 = v25[1];
      goto LABEL_13;
    }
    v8 = 0;
    v9 = 0;
    v10 = v25[0];
  }
  *a2 = v10;
LABEL_13:
  v27.i64[0] = (uint64_t)a1;
  v27.i64[1] = v6;
  LODWORD(v28) = 0;
  DWORD1(v28) = v7;
  v11 = &v9[*((_QWORD *)a1 + 2)];
  *(_QWORD *)&v32 = v11;
  *((_QWORD *)&v32 + 1) = v8;
  if (v7)
  {
    v27.i64[1] = v6 - 56;
    LODWORD(v28) = -1;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveNext((uint64_t)&v27, 1u);
    *(_QWORD *)&v24 = &v9[*((_QWORD *)a1 + 2)];
    *((_QWORD *)&v24 + 1) = v8;
    *(_QWORD *)&v19 = a1;
    *((_QWORD *)&v19 + 1) = v6 + 56 * (v7 - 1);
    LODWORD(v20) = v7 - 1;
    DWORD1(v20) = v7;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_descriptor>::moveNext((uint64_t)&v19, 1u);
  }
  else
  {
    *(_QWORD *)&v19 = a1;
    *((_QWORD *)&v19 + 1) = v6;
    *(_QWORD *)&v20 = 0;
    *(_QWORD *)&v24 = v11;
    *((_QWORD *)&v24 + 1) = v8;
  }
  v12 = v30;
  *(_OWORD *)(a3 + 32) = v29;
  *(_OWORD *)(a3 + 48) = v12;
  v13 = v32;
  *(_OWORD *)(a3 + 64) = v31;
  *(_OWORD *)(a3 + 80) = v13;
  v14 = v28;
  *(int8x16_t *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v14;
  v15 = v22;
  *(_OWORD *)(a3 + 128) = v21;
  *(_OWORD *)(a3 + 144) = v15;
  v16 = v24;
  *(_OWORD *)(a3 + 160) = v23;
  *(_OWORD *)(a3 + 176) = v16;
  v17 = v20;
  *(_OWORD *)(a3 + 96) = v19;
  *(_OWORD *)(a3 + 112) = v17;
  if (!*a2)
    *a2 = 0;
}

__n128 llvm::object::AIRObject::find@<Q0>(llvm::object::AIRObject *this@<X0>, unsigned __int32 a2@<W1>, unsigned __int32 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int8x16_t *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  int8x16_t *v23;
  int8x16_t *v24;
  unsigned int v25;
  int8x16_t v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v25 = a4 & 4;
  v9 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)this + 16) + *((_QWORD *)this + 1));
  v10 = (char *)this + 80;
  v23 = v9;
  v24 = (int8x16_t *)(*(_QWORD *)(*((_QWORD *)this + 10) + 16) + *((_QWORD *)this + 11));
  if (v24 != v9)
  {
    v11 = 0x8E38E38E38E38E39 * (((char *)v24 - (char *)v9) >> 2);
    do
    {
      v12 = v11 >> 1;
      v28 = 0;
      v26 = 0u;
      v27 = 0u;
      sub_1C59E836C(&v26, *(_QWORD *)this, (int8x16_t *)((char *)v9 + 36 * (v11 >> 1)));
      if (v26.i32[0] < a2 || v26.i32[0] <= a2 && (v26.i32[1] < a3 || v26.i32[1] <= a3 && (v28 & 4u) < v25))
      {
        v9 = (int8x16_t *)((char *)v9 + 36 * (v11 >> 1) + 36);
        v12 = v11 + ~v12;
      }
      v11 = v12;
    }
    while (v12);
  }
  if (v9 != v24
    && (v28 = 0, v26 = 0u, v27 = 0u, sub_1C59E836C(&v26, *(_QWORD *)this, v9), v26.i64[0] == __PAIR64__(a3, a2))
    && (v28 & 4) == v25)
  {
    v15 = *(_QWORD *)this;
    v14 = *((_QWORD *)this + 1);
    v16 = *((_DWORD *)this + 4);
    v17 = *((_DWORD *)this + 5);
    v18 = *(_OWORD *)((char *)this + 40);
    v26 = *(int8x16_t *)((char *)this + 24);
    v27 = v18;
    v28 = *((_DWORD *)this + 14);
    v29 = *(_OWORD *)((char *)this + 60);
    v30 = *((_DWORD *)this + 19);
    v19 = v14 + 34359738372 * (((char *)v9 - (char *)v23) >> 2);
    v20 = v16 + 954437177 * (((char *)v9 - (char *)v23) >> 2);
    if (v20 < v17)
      sub_1C59E836C(&v26, v15, (int8x16_t *)(*(_QWORD *)(v15 + 16) + v19));
    v21 = v27;
    *(int8x16_t *)(a5 + 24) = v26;
    *(_QWORD *)a5 = v15;
    *(_QWORD *)(a5 + 8) = v19;
    *(_DWORD *)(a5 + 16) = v20;
    *(_DWORD *)(a5 + 20) = v17;
    *(_OWORD *)(a5 + 40) = v21;
    *(_DWORD *)(a5 + 56) = v28;
    result.n128_u64[0] = v29;
    *(_OWORD *)(a5 + 60) = v29;
    *(_DWORD *)(a5 + 76) = v30;
  }
  else
  {
    v22 = *((_OWORD *)v10 + 3);
    *(_OWORD *)(a5 + 32) = *((_OWORD *)v10 + 2);
    *(_OWORD *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 64) = *((_OWORD *)v10 + 4);
    result = *((__n128 *)v10 + 1);
    *(_OWORD *)a5 = *(_OWORD *)v10;
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

void llvm::object::MachOObjectFile::AIRObjectTable(llvm::object::MachOObjectFile *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  char *v16[2];
  char v17;
  char *v18;
  int v19;
  char v20;
  int8x16_t v21;
  __int128 v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRHeaderExt(a1, &v21);
  if ((v27 & 1) != 0)
  {
    llvm::object::MachOObjectFile::getAIRObjectNote(a1, (uint64_t)&v18);
    if ((v20 & 1) != 0)
    {
      v15 = v18;
      sub_1C4D62BD4(&v15, v16);
      if (v15)
        (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
      v6 = 0;
      v9 = 0;
      v8 = 0;
      *a2 = v21.i64[0];
      v10 = (char *)*((_QWORD *)a1 + 2);
      v11 = v10;
      goto LABEL_14;
    }
    v15 = (char *)v21.i64[0];
    sub_1C4D62BD4(&v15, v16);
    if (v15)
      (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
    v6 = v18;
    v7 = v19;
    llvm::object::MachOObjectFile::getAIRStringTableNote(a1, (uint64_t)v16);
    if ((v17 & 1) != 0)
    {
      v8 = 0;
      v9 = 0;
      *a2 = v16[0];
    }
    else
    {
      v9 = v16[0];
      v8 = v16[1];
    }
  }
  else
  {
    v6 = (char *)*((_QWORD *)&v22 + 1);
    v7 = v24;
    v9 = v25;
    v8 = v26;
  }
  v10 = (char *)*((_QWORD *)a1 + 2);
  v11 = &v9[(_QWORD)v10];
  if (v7)
  {
    sub_1C59E836C(&v21, (uint64_t)a1, (int8x16_t *)&v6[(_QWORD)v10]);
    v12 = &v9[*((_QWORD *)a1 + 2)];
    v13 = (uint64_t)&v6[36 * (v7 - 1) + 36];
    goto LABEL_15;
  }
LABEL_14:
  v7 = 0;
  v12 = &v9[(_QWORD)v10];
  v13 = (uint64_t)v6;
LABEL_15:
  v14 = v22;
  *(int8x16_t *)(a3 + 24) = v21;
  *(_OWORD *)(a3 + 40) = v14;
  *(_DWORD *)(a3 + 56) = v23;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v7;
  *(_QWORD *)(a3 + 64) = v11;
  *(_QWORD *)(a3 + 72) = v8;
  *(_QWORD *)(a3 + 80) = a1;
  *(_QWORD *)(a3 + 88) = v13;
  *(_DWORD *)(a3 + 96) = v7;
  *(_DWORD *)(a3 + 100) = v7;
  *(_QWORD *)(a3 + 144) = v12;
  *(_QWORD *)(a3 + 152) = v8;
  if (!*a2)
    *a2 = 0;
}

void llvm::object::MachOObjectFile::AIRObjectIndexTable(llvm::object::MachOObjectFile *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRObjectIndexNote(a1, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v7 = 0;
    v6 = 0;
    *a2 = v17;
  }
  else
  {
    v6 = v17;
    v7 = DWORD2(v17);
  }
  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = v6;
  LODWORD(v18) = 0;
  DWORD1(v18) = v7;
  v8 = *((_QWORD *)a1 + 2);
  v20 = v8;
  if (v7)
  {
    *((_QWORD *)&v17 + 1) = v6 - 24;
    LODWORD(v18) = -1;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveNext((uint64_t)&v17, 1u);
    v16 = *((unint64_t *)a1 + 2);
    *(_QWORD *)&v13 = a1;
    *((_QWORD *)&v13 + 1) = v6 + 24 * (v7 - 1);
    LODWORD(v14) = v7 - 1;
    DWORD1(v14) = v7;
    llvm::object::AIRBuildTableEntry<llvm::MachO::air_n_object_index>::moveNext((uint64_t)&v13, 1u);
  }
  else
  {
    *(_QWORD *)&v13 = a1;
    *((_QWORD *)&v13 + 1) = v6;
    *(_QWORD *)&v14 = 0;
    v16 = v8;
  }
  v9 = v18;
  *a3 = v17;
  a3[1] = v9;
  v10 = v20;
  a3[2] = v19;
  a3[3] = v10;
  v11 = v14;
  a3[4] = v13;
  a3[5] = v11;
  v12 = v16;
  a3[6] = v15;
  a3[7] = v12;
  if (!*a2)
    *a2 = 0;
}

uint64_t llvm::object::MachOObjectFile::AIRPipelineTable@<X0>(llvm::object::MachOObjectFile *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  __int128 v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char v14;
  int8x16_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRHeaderExt(a1, &v15);
  if ((v19 & 1) != 0)
  {
    llvm::object::MachOObjectFile::getAIRPipelineNote(a1, (uint64_t)&v12);
    if ((v14 & 1) != 0)
    {
      v10 = v12;
      sub_1C4D62BD4(&v10, &v11);
      if (v10)
        (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
      v7 = 0;
      v6 = 0;
      *a2 = v15.i64[0];
    }
    else
    {
      v10 = (char *)v15.i64[0];
      sub_1C4D62BD4(&v10, &v11);
      if (v10)
        (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
      v7 = v13;
      v6 = (uint64_t)v12;
    }
  }
  else
  {
    v6 = v17;
    v7 = v18;
  }
  v15.i64[0] = (uint64_t)a1;
  v15.i64[1] = v6;
  LODWORD(v16) = 0;
  DWORD1(v16) = v7;
  result = llvm::object::AIRPipelineEntry::moveToFirst((uint64_t)&v15);
  v9 = v16;
  *(int8x16_t *)a3 = v15;
  *(_OWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = v6;
  *(_DWORD *)(a3 + 56) = v7;
  *(_DWORD *)(a3 + 60) = v7;
  if (!*a2)
    *a2 = 0;
  return result;
}

uint64_t llvm::object::AIRPipelineEntry::moveToFirst(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;

  *(_DWORD *)(this + 16) = 0;
  if (*(_DWORD *)(this + 20))
  {
    v1 = this;
    v2 = *(_QWORD *)this;
    v3 = (unsigned int *)(*(_QWORD *)(v2 + 16) + *(_QWORD *)(v1 + 8));
    this = sub_1C59E2CBC(v2, v3);
    switch((int)this)
    {
      case 0:
        this = sub_1C59D9404(*(_QWORD *)v1, v3);
        *(_QWORD *)(v1 + 24) = this;
        *(_DWORD *)(v1 + 32) = v4;
        break;
      case 1:
      case 2:
        this = sub_1C59E9B7C(*(_QWORD *)v1, v3);
        *(_QWORD *)(v1 + 24) = this;
        break;
      case 3:
        this = sub_1C59DA608(*(_QWORD *)v1, v3);
        *(_QWORD *)(v1 + 24) = this;
        *(_QWORD *)(v1 + 32) = v5;
        break;
      default:
        return this;
    }
  }
  return this;
}

uint64_t llvm::object::AIRPipelineEntry::moveToEnd(uint64_t this)
{
  *(_DWORD *)(this + 16) = *(_DWORD *)(this + 20);
  return this;
}

uint64_t *llvm::object::AIRPipelineEntry::moveNext(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;

  v1 = this;
  v2 = *((int *)this + 6);
  if (v2 <= 3)
    this[1] += qword_1C8667978[v2];
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v4;
  if (v4 != v3)
  {
    v5 = (unsigned int *)(*(_QWORD *)(*this + 16) + this[1]);
    this = (uint64_t *)sub_1C59E2CBC(*this, v5);
    switch((int)this)
    {
      case 0:
        this = (uint64_t *)sub_1C59D9404(*v1, v5);
        v1[3] = (uint64_t)this;
        *((_DWORD *)v1 + 8) = v6;
        break;
      case 1:
      case 2:
        this = (uint64_t *)sub_1C59E9B7C(*v1, v5);
        v1[3] = (uint64_t)this;
        break;
      case 3:
        this = (uint64_t *)sub_1C59DA608(*v1, v5);
        v1[3] = (uint64_t)this;
        v1[4] = v7;
        break;
      default:
        return this;
    }
  }
  return this;
}

uint64_t sub_1C59E9B7C(uint64_t a1, _DWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 2) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  LODWORD(v4) = *a2;
  LODWORD(v5) = a2[1];
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = bswap32(v5);
  if (v8)
    v4 = v4;
  else
    v4 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 | (v5 << 32);
}

void llvm::object::AIRHashEntry::moveNext(llvm::object::AIRHashEntry *this)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int i;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v3 = (char *)this + 24;
  v2 = *((_QWORD *)this + 3);
  v4 = *((_DWORD *)this + 8);
  do
  {
    v5 = v2 + 144 * v4;
    v6 = *(_QWORD *)(v5 - 16) + 128;
    *(_QWORD *)(v5 - 16) = v6;
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 8) + 1;
    *(_DWORD *)(v5 - 8) = v8;
    if (v8 == v7)
    {
      *((_DWORD *)this + 8) = --v4;
    }
    else
    {
      sub_1C59E9E20((uint64_t)&v25, *(_QWORD *)this, (_OWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + v6));
      v9 = *((_QWORD *)this + 3) + 144 * *((unsigned int *)this + 8);
      *(_OWORD *)(v9 - 80) = v29;
      *(_OWORD *)(v9 - 64) = v30;
      *(_OWORD *)(v9 - 48) = v31;
      *(_OWORD *)(v9 - 32) = v32;
      *(_OWORD *)(v9 - 144) = v25;
      *(_OWORD *)(v9 - 128) = v26;
      *(_OWORD *)(v9 - 112) = v27;
      *(_OWORD *)(v9 - 96) = v28;
      v2 = *((_QWORD *)this + 3);
      v4 = *((_DWORD *)this + 8);
      v10 = v2 + 144 * v4;
      for (i = *(_DWORD *)(v10 - 36); (i & 0x3FFFFFFF) == 0; i = *(_DWORD *)(v10 - 36))
      {
        v12 = *(_QWORD *)(v10 - 16) - ((unint64_t)*(unsigned int *)(v10 - 8) << 7);
        v13 = sub_1C59E9B7C(*(_QWORD *)this, (_DWORD *)(v12 + *(_QWORD *)(*(_QWORD *)this + 16) - 8));
        v24 = *(_QWORD *)(*((_QWORD *)this + 3) + 144 * *((unsigned int *)this + 8) - 32);
        v14 = v12 + ((unint64_t)v13 << 7) + ((unint64_t)v24 << 7) + 8;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v15 = (_OWORD *)sub_1C59F5610((uint64_t)v3, (unint64_t)&v25);
        v16 = (_OWORD *)(*((_QWORD *)this + 3) + 144 * *((unsigned int *)this + 8));
        *v16 = *v15;
        v17 = v15[8];
        v19 = v15[5];
        v18 = v15[6];
        v16[7] = v15[7];
        v16[8] = v17;
        v16[5] = v19;
        v16[6] = v18;
        v20 = v15[4];
        v22 = v15[1];
        v21 = v15[2];
        v16[3] = v15[3];
        v16[4] = v20;
        v16[1] = v22;
        v16[2] = v21;
        LODWORD(v16) = *((_DWORD *)this + 8) + 1;
        *((_DWORD *)this + 8) = (_DWORD)v16;
        v23 = *((_QWORD *)this + 3) + 144 * v16;
        sub_1C59E9E20((uint64_t)&v25, *(_QWORD *)this, (_OWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + v14));
        *(_OWORD *)(v23 - 80) = v29;
        *(_OWORD *)(v23 - 64) = v30;
        *(_OWORD *)(v23 - 48) = v31;
        *(_OWORD *)(v23 - 32) = v32;
        *(_OWORD *)(v23 - 144) = v25;
        *(_OWORD *)(v23 - 128) = v26;
        *(_OWORD *)(v23 - 112) = v27;
        *(_OWORD *)(v23 - 96) = v28;
        *(_QWORD *)(v23 - 16) = v14;
        *(_QWORD *)(v23 - 8) = v24;
        v2 = *((_QWORD *)this + 3);
        v4 = *((_DWORD *)this + 8);
        v10 = v2 + 144 * v4;
      }
    }
  }
  while (v4 && (*(_DWORD *)(v2 + 144 * v4 - 36) & 0x3FFFFFFF) == 0);
  ++*((_DWORD *)this + 4);
}

double sub_1C59E9E20(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  uint64_t i;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 > (unint64_t)a3 || (unint64_t)(a3 + 8) > v3 + *(_QWORD *)(a2 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = a3[5];
  *(_OWORD *)(a1 + 64) = a3[4];
  *(_OWORD *)(a1 + 80) = v5;
  v6 = a3[7];
  *(_OWORD *)(a1 + 96) = a3[6];
  *(_OWORD *)(a1 + 112) = v6;
  v7 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a3[2];
  v9 = a3[3];
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_DWORD *)(a2 + 8);
  if (v10 <= 0x13 && ((1 << v10) & 0xAAC00) != 0)
  {
    for (i = 0; i != 12; i += 4)
      *(_DWORD *)(a1 + 96 + i) = bswap32(*(_DWORD *)(a1 + 96 + i));
    *(int8x8_t *)&v8 = vrev32_s8(*(int8x8_t *)(a1 + 108));
    *(_QWORD *)(a1 + 108) = v8;
    *(_DWORD *)(a1 + 116) = bswap32(*(_DWORD *)(a1 + 116));
    if ((v8 & 0x3FFFFFFF) != 0)
    {
      *(int8x8_t *)&v8 = vrev32_s8(*(int8x8_t *)(a1 + 120));
      *(_QWORD *)(a1 + 120) = v8;
    }
  }
  return *(double *)&v8;
}

void llvm::object::AIRHashEntry::moveToFirst(llvm::object::AIRHashEntry *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];
  uint64_t v14;
  int v15;
  int v16;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v3 = v1 - 120;
    v4 = sub_1C59E9B7C(*(_QWORD *)this, (_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + v1));
    memset(v13, 0, sizeof(v13));
    v14 = v3;
    v15 = -1;
    v16 = v4;
    v5 = (_OWORD *)sub_1C59F5610((uint64_t)this + 24, (unint64_t)v13);
    v6 = (_OWORD *)(*((_QWORD *)this + 3) + 144 * *((unsigned int *)this + 8));
    *v6 = *v5;
    v7 = v5[8];
    v9 = v5[5];
    v8 = v5[6];
    v6[7] = v5[7];
    v6[8] = v7;
    v6[5] = v9;
    v6[6] = v8;
    v10 = v5[4];
    v12 = v5[1];
    v11 = v5[2];
    v6[3] = v5[3];
    v6[4] = v10;
    v6[1] = v12;
    v6[2] = v11;
    ++*((_DWORD *)this + 8);
    llvm::object::AIRHashEntry::moveNext(this);
  }
}

uint64_t llvm::object::AIRHashEntry::moveToEnd(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void llvm::object::MachOObjectFile::AIRHashTable(llvm::object::MachOObjectFile *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[296];
  __int128 v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[296];
  int8x16_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v23[296];
  int8x16_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[288];
  __int128 v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[288];
  int8x16_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[7];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::getAIRHeaderExt(a1, &v34);
  if ((v39 & 1) != 0)
  {
    llvm::object::MachOObjectFile::getAIRHashesNote(a1, (uint64_t)&v29);
    if ((v30 & 1) != 0)
    {
      v7 = (char *)v29;
      sub_1C4D62BD4(&v7, &v8);
      if (v7)
        (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
      v6 = 0;
      *a2 = v34.i64[0];
    }
    else
    {
      v7 = (char *)v34.i64[0];
      sub_1C4D62BD4(&v7, &v8);
      if (v7)
        (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
      v6 = v29;
    }
  }
  else
  {
    v6 = v38[0];
  }
  v34.i64[0] = (uint64_t)a1;
  v34.i64[1] = v6;
  v35 = -1;
  v36 = v38;
  v37 = 0x200000000;
  llvm::object::AIRHashEntry::moveToFirst((llvm::object::AIRHashEntry *)&v34);
  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = v6;
  v30 = -1;
  v31 = v33;
  v32 = 0x200000000;
  v19 = v34;
  v20 = v35;
  v21 = v23;
  v22 = 0x200000000;
  if ((_DWORD)v37)
  {
    sub_1C59EE4C8((uint64_t)&v21, (uint64_t)&v36);
    v24 = v19;
    v25 = v20;
    v26 = v28;
    v27 = 0x200000000;
    if ((_DWORD)v22)
      sub_1C59F5688((uint64_t)&v26, (uint64_t)&v21);
  }
  else
  {
    v24 = v34;
    v25 = v35;
    v26 = v28;
    v27 = 0x200000000;
  }
  v9 = v29;
  v10 = v30;
  v11 = v13;
  v12 = 0x200000000;
  if ((_DWORD)v32)
  {
    sub_1C59EE4C8((uint64_t)&v11, (uint64_t)&v31);
    v14 = v9;
    v15 = v10;
    v16 = v18;
    v17 = 0x200000000;
    if ((_DWORD)v12)
      sub_1C59F5688((uint64_t)&v16, (uint64_t)&v11);
  }
  else
  {
    v14 = v29;
    v15 = v30;
    v16 = v18;
    v17 = 0x200000000;
  }
  *(int8x16_t *)a3 = v24;
  *(_DWORD *)(a3 + 16) = v25;
  *(_QWORD *)(a3 + 24) = a3 + 40;
  *(_QWORD *)(a3 + 32) = 0x200000000;
  if ((_DWORD)v27)
    sub_1C59EE4C8(a3 + 24, (uint64_t)&v26);
  *(_DWORD *)(a3 + 344) = v15;
  *(_OWORD *)(a3 + 328) = v14;
  *(_QWORD *)(a3 + 352) = a3 + 368;
  *(_QWORD *)(a3 + 360) = 0x200000000;
  if ((_DWORD)v17)
    sub_1C59EE4C8(a3 + 352, (uint64_t)&v16);
  if (v16 != v18)
    free(v16);
  if (v11 != v13)
    free(v11);
  if (v26 != v28)
    free(v26);
  if (v21 != v23)
    free(v21);
  if (v31 != v33)
    free(v31);
  if (v36 != v38)
    free(v36);
  if (!*a2)
    *a2 = 0;
}

uint64_t llvm::object::MachOObjectFile::begin_load_commands(llvm::object::MachOObjectFile *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t llvm::object::MachOObjectFile::getSectionRawFinalSegmentName(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2) + 16;
}

uint64_t llvm::object::MachOObjectFile::getScatteredRelocationScattered(uint64_t a1, _DWORD *a2)
{
  return *a2 >> 31;
}

uint64_t llvm::object::MachOObjectFile::getScatteredRelocationValue(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::MachOObjectFile::getScatteredRelocationType(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 3) & 0xF;
}

BOOL llvm::object::MachOObjectFile::getAnyRelocationPCRel(uint64_t a1, _DWORD *a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  int v5;

  if (*(_DWORD *)(a1 + 52) == 16777223 || (*a2 & 0x80000000) == 0)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = v3 > 0x13;
    v5 = (1 << v3) & 0xAAC00;
    if (v4 || v5 == 0)
      v2 = HIBYTE(a2[1]) & 1;
    else
      v2 = a2[1] & 0x80;
  }
  else
  {
    v2 = *a2 & 0x40000000;
  }
  return v2 != 0;
}

int8x16_t sub_1C59EA3C8@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  __int128 v5;
  int8x16_t result;
  unsigned int v7;
  int8x16_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 > a2 || a2 + 68 > v3 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v5;
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a2 + 64);
  result = *(int8x16_t *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(int8x16_t *)(a3 + 16) = result;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x13 && ((1 << v7) & 0xAAC00) != 0)
  {
    result = vrev32q_s8(*(int8x16_t *)(a3 + 32));
    v8 = vrev32q_s8(*(int8x16_t *)(a3 + 48));
    *(int8x16_t *)(a3 + 32) = result;
    *(int8x16_t *)(a3 + 48) = v8;
    *(_DWORD *)(a3 + 64) = bswap32(*(_DWORD *)(a3 + 64));
  }
  return result;
}

double sub_1C59EA458@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  int8x16_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 > (unint64_t)a2 || (unint64_t)(a2 + 5) > v3 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v5;
  *(_OWORD *)(a3 + 64) = a2[4];
  v6 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v6;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x13 && ((1 << v7) & 0xAAC00) != 0)
  {
    v8 = vrev32q_s8(*(int8x16_t *)(a3 + 48));
    *(int8x16_t *)(a3 + 32) = vrev64q_s8(*(int8x16_t *)(a3 + 32));
    *(int8x16_t *)(a3 + 48) = v8;
    *(int8x8_t *)&v6 = vrev32_s8(*(int8x8_t *)(a3 + 64));
    *(_QWORD *)(a3 + 64) = v6;
    *(_DWORD *)(a3 + 72) = bswap32(*(_DWORD *)(a3 + 72));
  }
  return *(double *)&v6;
}

double llvm::object::MachOObjectFile::getSection@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  double result;

  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    v4 = 80;
  else
    v4 = 68;
  v5 = 56;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    v5 = 72;
  *(_QWORD *)&result = sub_1C59EA3C8(a1, v5 + *a2 + (unint64_t)(v4 * a3), a4).u64[0];
  return result;
}

double llvm::object::MachOObjectFile::getSection64@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    v4 = 80;
  else
    v4 = 68;
  v5 = 56;
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 0x12)
    v5 = 72;
  return sub_1C59EA458(a1, (_OWORD *)(v5 + *a2 + (v4 * a3)), a4);
}

uint64_t llvm::object::MachOObjectFile::getLinkeditDataLoadCommand(uint64_t a1, _DWORD **a2)
{
  return sub_1C59DA608(a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getLinkerOptionLoadCommand(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (unint64_t)*a2 < v3 || (unint64_t)(*a2 + 3) > v3 + *(_QWORD *)(a1 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *v2;
  v6 = v2[1];
  v7 = *(_DWORD *)(a1 + 8);
  v4 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  v9 = v4 || v8 == 0;
  v10 = bswap32(v5);
  v11 = bswap32(v6);
  if (v9)
    v12 = v5;
  else
    v12 = v10;
  if (v9)
    v13 = v6;
  else
    v13 = v11;
  return v12 | (v13 << 32);
}

int8x16_t llvm::object::MachOObjectFile::getNoteLoadCommand@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int8x16_t result;
  __int128 v7;
  unsigned int v8;
  int v9;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2 < v4 || *a2 + 40 > v4 + *(_QWORD *)(a1 + 24);
  if (v5)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  result = *(int8x16_t *)v3;
  v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v3 + 32);
  v8 = *(_DWORD *)(a1 + 8);
  v5 = v8 > 0x13;
  v9 = (1 << v8) & 0xAAC00;
  if (!v5 && v9 != 0)
  {
    *(int8x8_t *)a3 = vrev32_s8(*(int8x8_t *)a3);
    result = vrev64q_s8(*(int8x16_t *)(a3 + 24));
    *(int8x16_t *)(a3 + 24) = result;
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getBuildToolVersion(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 26) + 8 * a2);
  v3 = *((_QWORD *)this + 2);
  v4 = v2 < v3 || v2 + 8 > v3 + *((_QWORD *)this + 3);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  LODWORD(v5) = *(_DWORD *)v2;
  LODWORD(v2) = *(_DWORD *)(v2 + 4);
  v6 = *((_DWORD *)this + 2);
  v4 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v4 || v7 == 0;
  v9 = bswap32(v5);
  v10 = bswap32(v2);
  if (v8)
    v5 = v5;
  else
    v5 = v9;
  if (v8)
    v2 = v2;
  else
    v2 = v10;
  return v5 | (v2 << 32);
}

int8x16_t llvm::object::MachOObjectFile::getDyldInfoLoadCommand@<Q0>(uint64_t a1@<X0>, int8x16_t **a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t *v3;
  unint64_t v4;
  BOOL v5;
  int8x16_t v6;
  int8x16_t result;
  unsigned int v8;
  int v9;
  int8x16_t v11;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (unint64_t)*a2 < v4 || (unint64_t)&(*a2)[3] > v4 + *(_QWORD *)(a1 + 24);
  if (v5)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = v3[1];
  *a3 = *v3;
  a3[1] = v6;
  result = v3[2];
  a3[2] = result;
  v8 = *(_DWORD *)(a1 + 8);
  v5 = v8 > 0x13;
  v9 = (1 << v8) & 0xAAC00;
  if (!v5 && v9 != 0)
  {
    v11 = vrev32q_s8(a3[1]);
    *a3 = vrev32q_s8(*a3);
    a3[1] = v11;
    result = vrev32q_s8(a3[2]);
    a3[2] = result;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getDylinkerCommand(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (unint64_t)*a2 < v3 || (unint64_t)(*a2 + 3) > v3 + *(_QWORD *)(a1 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *v2;
  v6 = v2[1];
  v7 = *(_DWORD *)(a1 + 8);
  v4 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  v9 = v4 || v8 == 0;
  v10 = bswap32(v5);
  v11 = bswap32(v6);
  if (v9)
    v12 = v5;
  else
    v12 = v10;
  if (v9)
    v13 = v6;
  else
    v13 = v11;
  return v12 | (v13 << 32);
}

double llvm::object::MachOObjectFile::getUuidCommand@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  __int128 *v3;
  unint64_t v4;
  BOOL v5;
  __int128 v6;
  unsigned int v7;
  int v8;

  v3 = (__int128 *)*a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2 < v4 || *a2 + 24 > v4 + *(_QWORD *)(a1 + 24);
  if (v5)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = *v3;
  *(_OWORD *)a3->i8 = *v3;
  a3[2] = (int8x8_t)v3[1];
  v7 = *(_DWORD *)(a1 + 8);
  v5 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  if (!v5 && v8 != 0)
  {
    *(int8x8_t *)&v6 = vrev32_s8(*a3);
    *a3 = (int8x8_t)v6;
  }
  return *(double *)&v6;
}

uint64_t llvm::object::MachOObjectFile::getRpathCommand(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (unint64_t)*a2 < v3 || (unint64_t)(*a2 + 3) > v3 + *(_QWORD *)(a1 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *v2;
  v6 = v2[1];
  v7 = *(_DWORD *)(a1 + 8);
  v4 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  v9 = v4 || v8 == 0;
  v10 = bswap32(v5);
  v11 = bswap32(v6);
  if (v9)
    v12 = v5;
  else
    v12 = v10;
  if (v9)
    v13 = v6;
  else
    v13 = v11;
  return v12 | (v13 << 32);
}

uint64_t llvm::object::MachOObjectFile::getSourceVersionCommand(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (unint64_t)*a2 < v3 || (unint64_t)(*a2 + 4) > v3 + *(_QWORD *)(a1 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v5 = *v2;
  v6 = v2[1];
  v7 = *(_DWORD *)(a1 + 8);
  v4 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  v9 = v4 || v8 == 0;
  v10 = bswap32(v5);
  v11 = bswap32(v6);
  if (v9)
    v12 = v5;
  else
    v12 = v10;
  if (v9)
    v13 = v6;
  else
    v13 = v11;
  return v12 | (v13 << 32);
}

int8x16_t llvm::object::MachOObjectFile::getEntryPointCommand@<Q0>(uint64_t a1@<X0>, int8x16_t **a2@<X1>, uint64_t a3@<X8>)
{
  int8x16_t *v3;
  unint64_t v4;
  BOOL v5;
  int8x16_t result;
  unsigned int v7;
  int v8;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (unint64_t)*a2 < v4 || (unint64_t)&(*a2)[1].u64[1] > v4 + *(_QWORD *)(a1 + 24);
  if (v5)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  result = *v3;
  *(int8x16_t *)a3 = *v3;
  *(_QWORD *)(a3 + 16) = v3[1].i64[0];
  v7 = *(_DWORD *)(a1 + 8);
  v5 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  if (!v5 && v8 != 0)
  {
    *(int8x8_t *)a3 = vrev32_s8(*(int8x8_t *)a3);
    result = vrev64q_s8(*(int8x16_t *)(a3 + 8));
    *(int8x16_t *)(a3 + 8) = result;
  }
  return result;
}

double llvm::object::MachOObjectFile::getEncryptionInfoCommand@<D0>(uint64_t a1@<X0>, int8x16_t **a2@<X1>, int8x16_t *a3@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1C59D91FC(a3, a1, *a2).u64[0];
  return result;
}

double llvm::object::MachOObjectFile::getEncryptionInfoCommand64@<D0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C59D9380(a3, a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getSubFrameworkCommand(uint64_t a1, _DWORD **a2)
{
  return sub_1C59D9404(a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getSubUmbrellaCommand(uint64_t a1, _DWORD **a2)
{
  return sub_1C59D9404(a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getSubLibraryCommand(uint64_t a1, _DWORD **a2)
{
  return sub_1C59D9404(a1, *a2);
}

uint64_t llvm::object::MachOObjectFile::getSubClientCommand(uint64_t a1, _DWORD **a2)
{
  return sub_1C59D9404(a1, *a2);
}

double llvm::object::MachOObjectFile::getRoutinesCommand@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  unint64_t v4;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  int v9;
  int8x16_t v11;

  v3 = (__int128 *)*a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2 < v4 || *a2 + 40 > v4 + *(_QWORD *)(a1 + 24);
  if (v5)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = *v3;
  v7 = v3[1];
  *(_OWORD *)a3 = *v3;
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v3 + 4);
  v8 = *(_DWORD *)(a1 + 8);
  v5 = v8 > 0x13;
  v9 = (1 << v8) & 0xAAC00;
  if (!v5 && v9 != 0)
  {
    v11 = vrev32q_s8(*(int8x16_t *)(a3 + 16));
    *(int8x16_t *)a3 = vrev32q_s8(*(int8x16_t *)a3);
    *(int8x16_t *)(a3 + 16) = v11;
    *(int8x8_t *)&v6 = vrev32_s8(*(int8x8_t *)(a3 + 32));
    *(_QWORD *)(a3 + 32) = v6;
  }
  return *(double *)&v6;
}

int8x16_t llvm::object::MachOObjectFile::getRoutinesCommand64@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v6;
  int8x16_t result;
  unsigned int v8;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (*a2 < v4 || *a2 + 72 > v4 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v6 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(v3 + 64);
  result = *(int8x16_t *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(int8x16_t *)(a3 + 16) = result;
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 <= 0x13 && ((1 << v8) & 0xAAC00) != 0)
  {
    *(int8x8_t *)a3 = vrev32_s8(*(int8x8_t *)a3);
    *(int8x16_t *)(a3 + 8) = vrev64q_s8(*(int8x16_t *)(a3 + 8));
    *(int8x16_t *)(a3 + 24) = vrev64q_s8(*(int8x16_t *)(a3 + 24));
    *(int8x16_t *)(a3 + 40) = vrev64q_s8(*(int8x16_t *)(a3 + 40));
    result = vrev64q_s8(*(int8x16_t *)(a3 + 56));
    *(int8x16_t *)(a3 + 56) = result;
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getThreadCommand(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a2 < v3 || *a2 + 8 > v3 + *(_QWORD *)(a1 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  LODWORD(v5) = *(_DWORD *)v2;
  LODWORD(v2) = *(_DWORD *)(v2 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  v4 = v6 > 0x13;
  v7 = (1 << v6) & 0xAAC00;
  v8 = v4 || v7 == 0;
  v9 = bswap32(v5);
  v10 = bswap32(v2);
  if (v8)
    v5 = v5;
  else
    v5 = v9;
  if (v8)
    v2 = v2;
  else
    v2 = v10;
  return v5 | (v2 << 32);
}

unint64_t sub_1C59EAC4C(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 1) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const char *)1);
  v4 = *a2;
  v5 = HIDWORD(*a2);
  v6 = HIWORD(*a2);
  v7 = *(_DWORD *)(a1 + 8);
  v3 = v7 > 0x13;
  v8 = (1 << v7) & 0xAAC00;
  v9 = v3 || v8 == 0;
  v10 = bswap32(v4);
  v11 = bswap32(v5) >> 16;
  v12 = __rev16(v6);
  if (v9)
    v4 = v4;
  else
    v4 = v10;
  if (v9)
  {
    v6 = v6;
  }
  else
  {
    LOWORD(v5) = v11;
    v6 = v12;
  }
  return ((unint64_t)(unsigned __int16)v5 << 32) | (v6 << 48) | v4;
}

uint64_t llvm::object::MachOObjectFile::getIndirectSymbolTableEntry(llvm::object::MachOObjectFile *this, const dysymtab_command *a2, unsigned int a3)
{
  return sub_1C59E2CBC((uint64_t)this, (unsigned int *)(*((_QWORD *)this + 2) + a2->indirectsymoff + 4 * a3));
}

unint64_t llvm::object::MachOObjectFile::getDataInCodeTableEntry(llvm::object::MachOObjectFile *this, unsigned int a2, unsigned int a3)
{
  return sub_1C59EAC4C((uint64_t)this, (uint64_t *)(*((_QWORD *)this + 2) + 8 * a3 + a2));
}

uint64_t llvm::object::MachOObjectFile::getLinkOptHintsLoadCommand(llvm::object::MachOObjectFile *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 37);
  if (v1)
    return sub_1C59DA608((uint64_t)this, v1);
  else
    return 0x100000002ELL;
}

uint64_t sub_1C59EAD2C(uint64_t result, uint64_t a2, int8x16_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x16_t *v5;
  int8x16_t *v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unsigned int v12;
  int v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 3;
  v6 = (int8x16_t *)(v4 + *(_QWORD *)(a2 + 24));
  if (v4 <= (unint64_t)a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v15 = "Structure read out-of-range";
    v16 = 259;
    result = sub_1C59D7FE0(&v17, (uint64_t *)&v15);
    *(_BYTE *)(v3 + 48) |= 1u;
    *(_QWORD *)v3 = v17;
  }
  else
  {
    v9 = *a3;
    v10 = a3[1];
    v11 = a3[2];
    v12 = *(_DWORD *)(a2 + 8);
    v7 = v12 >= 0x13;
    v8 = v12 == 19;
    v13 = (1 << v12) & 0xAAC00;
    if ((v8 || !v7) && v13 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32q_s8(v10);
      v11 = vrev32q_s8(v11);
    }
    *(_BYTE *)(result + 48) &= ~1u;
    *(int8x16_t *)result = v9;
    *(int8x16_t *)(result + 16) = v10;
    *(int8x16_t *)(result + 32) = v11;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getChainedFixupsHeader@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int8x16_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[2];
  const char *v17;
  __int16 v18;
  const char *v19;
  unint64_t v20;
  __int16 v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(int8x16_t **)(this + 328);
  if (!v3)
    goto LABEL_7;
  v4 = this;
  this = sub_1C59EAFFC((uint64_t)&v26, this, v3);
  if ((v29 & 1) != 0)
  {
    v9 = v26;
LABEL_10:
    *(_BYTE *)(a2 + 32) |= 1u;
    *(_QWORD *)a2 = v9;
    return this;
  }
  v5 = v27;
  if (!v27)
  {
LABEL_7:
    *(_BYTE *)(a2 + 32) &= ~1u;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 28) = 0;
    return this;
  }
  v6 = v28;
  this = sub_1C59EB0AC((uint64_t)v22, v4, *(_QWORD *)(v4 + 16) + v27);
  if ((v25 & 1) != 0)
  {
    v9 = v22[0];
    goto LABEL_10;
  }
  v7 = LODWORD(v22[0]);
  if (LODWORD(v22[0]))
  {
    v8 = "bad chained fixups: unknown version: ";
LABEL_14:
    v19 = v8;
    v20 = v7;
    v11 = 2051;
LABEL_15:
    v21 = v11;
    this = sub_1C59D7FE0((uint64_t *)a2, (uint64_t *)&v19);
    *(_BYTE *)(a2 + 32) |= 1u;
    return this;
  }
  v10 = v24;
  v7 = v24;
  if ((v24 - 4) <= 0xFFFFFFFC)
  {
    v8 = "bad chained fixups: unknown imports format: ";
    goto LABEL_14;
  }
  v12 = HIDWORD(v22[0]);
  if (HIDWORD(v22[0]) <= 0x1B)
  {
    v16[0] = "bad chained fixups: image starts offset ";
    v17 = (const char *)HIDWORD(v22[0]);
    v18 = 2051;
    v19 = (const char *)v16;
    v20 = (unint64_t)" overlaps with chained fixups header";
    v11 = 770;
    goto LABEL_15;
  }
  if (v5 + (unint64_t)HIDWORD(v22[0]) + 8 > (v6 + v5))
  {
    v13 = v5 + HIDWORD(v22[0]) + 8;
    v14[0] = "bad chained fixups: image starts end ";
    v14[2] = &v13;
    v15 = 3075;
    v16[0] = v14;
    v17 = " extends past end ";
    v18 = 770;
    v19 = (const char *)v16;
    v20 = (v6 + v5);
    v11 = 2050;
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 32) &= ~1u;
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v12;
  *(_QWORD *)(a2 + 8) = v22[1];
  *(_DWORD *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 20) = v10;
  *(_BYTE *)(a2 + 28) = 1;
  return this;
}

uint64_t sub_1C59EAFFC(uint64_t result, uint64_t a2, int8x16_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x16_t *v5;
  int8x16_t *v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  unsigned int v10;
  int v11;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 1;
  v6 = (int8x16_t *)(v4 + *(_QWORD *)(a2 + 24));
  if (v4 <= (unint64_t)a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v13 = "Structure read out-of-range";
    v14 = 259;
    result = sub_1C59D7FE0(&v15, (uint64_t *)&v13);
    *(_BYTE *)(v3 + 16) |= 1u;
    *(_QWORD *)v3 = v15;
  }
  else
  {
    v9 = *a3;
    v10 = *(_DWORD *)(a2 + 8);
    v7 = v10 >= 0x13;
    v8 = v10 == 19;
    v11 = (1 << v10) & 0xAAC00;
    if ((v8 || !v7) && v11 != 0)
      v9 = vrev32q_s8(v9);
    *(_BYTE *)(result + 16) &= ~1u;
    *(int8x16_t *)result = v9;
  }
  return result;
}

uint64_t sub_1C59EB0AC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x8_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 28;
  v6 = v4 + *(_QWORD *)(a2 + 24);
  if (v4 <= a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v15 = "Structure read out-of-range";
    v16 = 259;
    result = sub_1C59D7FE0(&v17, (uint64_t *)&v15);
    *(_BYTE *)(v3 + 32) |= 1u;
    *(_QWORD *)v3 = v17;
  }
  else
  {
    v9 = *(int8x16_t *)a3;
    v10 = *(int8x8_t *)(a3 + 16);
    v11 = *(_DWORD *)(a3 + 24);
    v12 = *(_DWORD *)(a2 + 8);
    v7 = v12 >= 0x13;
    v8 = v12 == 19;
    v13 = (1 << v12) & 0xAAC00;
    if ((v8 || !v7) && v13 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32_s8(v10);
      v11 = bswap32(v11);
    }
    *(_BYTE *)(result + 32) &= ~1u;
    *(int8x16_t *)result = v9;
    *(int8x8_t *)(result + 16) = v10;
    *(_DWORD *)(result + 24) = v11;
  }
  return result;
}

void llvm::object::ChainedFixupsInSegment::walkFixupChain(llvm::object::ChainedFixupsInSegment *this@<X0>, const llvm::object::MachOObjectFile *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  unint64_t i;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  for (i = a5 + a4 * (unint64_t)a3 + *((_QWORD *)this + 2); ; i += v15 * (unint64_t)v12)
  {
    v10 = 1 << *(_WORD *)this;
    if ((v10 & 0x5FC) != 0)
    {
      v11 = 4;
LABEL_5:
      v12 = v11;
      switch(*(_WORD *)this)
      {
        case 1:
        case 7:
        case 9:
        case 0xA:
        case 0xC:
          sub_1C59EB67C((uint64_t)&v39, (uint64_t)a2, (unint64_t *)(*((_QWORD *)a2 + 2) + i));
          if ((v40 & 1) != 0)
            goto LABEL_44;
          v13 = v39 & 0xC000000000000000;
          v14 = v39 >> 51;
          if (v39 >> 62)
            v14 = 0;
          if (v13 == 0x4000000000000000)
            v14 = (v39 >> 51) & 0x7FF;
          if (v13 == 0x8000000000000000)
            v14 = (v39 >> 51) & 0x7FF;
          if (v39 >> 62 == 3)
            v15 = (v39 >> 51) & 0x7FF;
          else
            v15 = v14;
          break;
        case 2:
        case 6:
        case 8:
        case 0xB:
          goto LABEL_16;
        case 3:
          sub_1C59EB728((uint64_t)&v39, (uint64_t)a2, (unsigned int *)(*((_QWORD *)a2 + 2) + i));
          if ((v40 & 1) != 0)
            goto LABEL_44;
          v15 = ((unint64_t)v39 >> 26) & 0x1F;
          break;
        case 4:
          sub_1C59EB728((uint64_t)&v39, (uint64_t)a2, (unsigned int *)(*((_QWORD *)a2 + 2) + i));
          if ((v40 & 1) != 0)
            goto LABEL_44;
          v15 = (unint64_t)v39 >> 30;
          break;
        case 5:
          sub_1C59EB728((uint64_t)&v39, (uint64_t)a2, (unsigned int *)(*((_QWORD *)a2 + 2) + i));
          if ((v40 & 1) != 0)
            goto LABEL_44;
          v15 = (unint64_t)v39 >> 26;
          break;
        default:
          v16 = (unint64_t *)*((_QWORD *)this + 5);
          goto LABEL_46;
      }
      goto LABEL_18;
    }
    v11 = 8;
    v12 = 1;
    if ((v10 & 0x1202) != 0)
      goto LABEL_5;
LABEL_16:
    sub_1C59EB67C((uint64_t)&v39, (uint64_t)a2, (unint64_t *)(*((_QWORD *)a2 + 2) + i));
    if ((v40 & 1) != 0)
    {
LABEL_44:
      *a6 = v39;
      return;
    }
    v15 = (v39 >> 51) & 0xFFF;
LABEL_18:
    v16 = (unint64_t *)*((_QWORD *)this + 5);
    if (!v15)
      break;
    v17 = *((_QWORD *)this + 6);
    if ((unint64_t)v16 >= v17)
    {
      v19 = (unint64_t *)*((_QWORD *)this + 4);
      v20 = v16 - v19;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_65;
      v22 = v6;
      v23 = v17 - (_QWORD)v19;
      if (v23 >> 2 > v21)
        v21 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v21;
      if (v24)
      {
        if (v24 >> 61)
          goto LABEL_66;
        v25 = (char *)operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = (unint64_t *)&v25[8 * v20];
      *v26 = i;
      v18 = v26 + 1;
      while (v16 != v19)
      {
        v27 = *--v16;
        *--v26 = v27;
      }
      *((_QWORD *)this + 4) = v26;
      *((_QWORD *)this + 5) = v18;
      *((_QWORD *)this + 6) = &v25[8 * v24];
      if (v19)
        operator delete(v19);
      v6 = v22;
    }
    else
    {
      *v16 = i;
      v18 = v16 + 1;
    }
    *((_QWORD *)this + 5) = v18;
  }
LABEL_46:
  v28 = *((_QWORD *)this + 6);
  if ((unint64_t)v16 >= v28)
  {
    v30 = (unint64_t *)*((_QWORD *)this + 4);
    v31 = v16 - v30;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61)
LABEL_65:
      abort();
    v33 = v28 - (_QWORD)v30;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
LABEL_66:
        sub_1C4764EE4();
      v35 = (char *)operator new(8 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = (unint64_t *)&v35[8 * v31];
    *v36 = i;
    v29 = v36 + 1;
    while (v16 != v30)
    {
      v37 = *--v16;
      *--v36 = v37;
    }
    *((_QWORD *)this + 4) = v36;
    *((_QWORD *)this + 5) = v29;
    *((_QWORD *)this + 6) = &v35[8 * v34];
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v16 = i;
    v29 = v16 + 1;
  }
  *((_QWORD *)this + 5) = v29;
  *a6 = 0;
}

uint64_t sub_1C59EB4E0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x8_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  __int128 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 80;
  v6 = v4 + *(_QWORD *)(a2 + 24);
  if (v4 <= a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v18 = "Structure read out-of-range";
    v19 = 259;
    result = sub_1C59D7FE0(&v20, (uint64_t *)&v18);
    *(_BYTE *)(v3 + 80) |= 1u;
    *(_QWORD *)v3 = v20;
  }
  else
  {
    v10 = *(int8x16_t *)(a3 + 32);
    v9 = *(int8x16_t *)(a3 + 48);
    v11 = *(int8x8_t *)(a3 + 64);
    v13 = *(_DWORD *)(a3 + 72);
    v12 = *(_DWORD *)(a3 + 76);
    v14 = *(_DWORD *)(a2 + 8);
    v7 = v14 >= 0x13;
    v8 = v14 == 19;
    v15 = (1 << v14) & 0xAAC00;
    if ((v8 || !v7) && v15 != 0)
    {
      v10 = vrev64q_s8(v10);
      v9 = vrev32q_s8(v9);
      v11 = vrev32_s8(v11);
      v13 = bswap32(v13);
    }
    *(_BYTE *)(result + 80) &= ~1u;
    v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v17;
    *(int8x16_t *)(result + 32) = v10;
    *(int8x16_t *)(result + 48) = v9;
    *(int8x8_t *)(result + 64) = v11;
    *(_DWORD *)(result + 72) = v13;
    *(_DWORD *)(result + 76) = v12;
  }
  return result;
}

uint64_t sub_1C59EB5B4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x16_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  __int128 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 68;
  v6 = v4 + *(_QWORD *)(a2 + 24);
  if (v4 <= a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v16 = "Structure read out-of-range";
    v17 = 259;
    result = sub_1C59D7FE0(&v18, (uint64_t *)&v16);
    *(_BYTE *)(v3 + 72) |= 1u;
    *(_QWORD *)v3 = v18;
  }
  else
  {
    v9 = *(int8x16_t *)(a3 + 32);
    v10 = *(int8x16_t *)(a3 + 48);
    v11 = *(_DWORD *)(a3 + 64);
    v12 = *(_DWORD *)(a2 + 8);
    v7 = v12 >= 0x13;
    v8 = v12 == 19;
    v13 = (1 << v12) & 0xAAC00;
    if ((v8 || !v7) && v13 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32q_s8(v10);
      v11 = bswap32(v11);
    }
    *(_BYTE *)(result + 72) &= ~1u;
    v15 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v15;
    *(int8x16_t *)(result + 32) = v9;
    *(int8x16_t *)(result + 48) = v10;
    *(_DWORD *)(result + 64) = v11;
  }
  return result;
}

uint64_t sub_1C59EB67C(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  const char *v14;
  __int16 v15;
  unint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 1;
  v6 = (unint64_t *)(v4 + *(_QWORD *)(a2 + 24));
  if (v4 <= (unint64_t)a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v14 = "Structure read out-of-range";
    v15 = 259;
    result = sub_1C59D7FE0((uint64_t *)&v16, (uint64_t *)&v14);
    *(_BYTE *)(v3 + 8) |= 1u;
    v9 = v16;
  }
  else
  {
    v9 = *a3;
    v10 = *(_DWORD *)(a2 + 8);
    v7 = v10 >= 0x13;
    v8 = v10 == 19;
    v11 = (1 << v10) & 0xAAC00;
    v12 = !v8 && v7 || v11 == 0;
    v13 = bswap64(v9);
    if (!v12)
      v9 = v13;
    *(_BYTE *)(result + 8) &= ~1u;
  }
  *(_QWORD *)v3 = v9;
  return result;
}

uint64_t sub_1C59EB728(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 1;
  v6 = (unsigned int *)(v4 + *(_QWORD *)(a2 + 24));
  if (v4 <= (unint64_t)a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v14 = "Structure read out-of-range";
    v15 = 259;
    result = sub_1C59D7FE0(&v16, (uint64_t *)&v14);
    *(_BYTE *)(v3 + 8) |= 1u;
    *(_QWORD *)v3 = v16;
  }
  else
  {
    v9 = *a3;
    v10 = *(_DWORD *)(a2 + 8);
    v7 = v10 >= 0x13;
    v8 = v10 == 19;
    v11 = (1 << v10) & 0xAAC00;
    v12 = !v8 && v7 || v11 == 0;
    v13 = bswap32(v9);
    if (!v12)
      v9 = v13;
    *(_BYTE *)(result + 8) &= ~1u;
    *(_DWORD *)result = v9;
  }
  return result;
}

void llvm::object::MachOObjectFile::getFunctionStarts(llvm::object::MachOObjectFile *this@<X0>, _QWORD *a2@<X8>)
{
  int8x16_t *v3;
  void *v5;
  uint64_t v6;
  _BYTE v7[64];
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (int8x16_t *)*((_QWORD *)this + 40);
  if (v3)
  {
    sub_1C59EAFFC((uint64_t)&v8, (uint64_t)this, v3);
    if ((v10 & 1) != 0)
    {
      *a2 = a2 + 2;
      a2[1] = 0x600000000;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      v5 = v7;
      v6 = 0x800000000;
      llvm::object::MachOObjectFile::ReadULEB128s((uint64_t)this, v9, (uint64_t)&v5);
      *a2 = a2 + 2;
      a2[1] = 0x600000000;
      if ((_DWORD)v6)
        sub_1C614D378((uint64_t)a2, (uint64_t)&v5);
      if (v5 != v7)
        free(v5);
    }
  }
  else
  {
    *a2 = a2 + 2;
    a2[1] = 0x600000000;
  }
}

uint64_t llvm::object::MachOObjectFile::ReadULEB128s(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int16 v10;

  v9 = *(_OWORD *)(a1 + 16);
  v10 = 1;
  v8 = a2;
  result = llvm::DataExtractor::getULEB128((uint64_t *)&v9, &v8, 0);
  if (result)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(unsigned int *)(a3 + 8);
      if (v7 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v7 + 1, 8);
        v7 = *(unsigned int *)(a3 + 8);
      }
      v6 += v5;
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v6;
      ++*(_DWORD *)(a3 + 8);
      result = llvm::DataExtractor::getULEB128((uint64_t *)&v9, &v8, 0);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getUuid(llvm::object::MachOObjectFile *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 42);
  v2 = v1 == 0;
  v3 = v1 + 8;
  if (v2)
    return 0;
  else
    return v3;
}

uint64_t llvm::object::ObjectFile::createMachOObjectFile@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v6;
  __int128 v7;
  __int128 *v8;
  int v9;
  int v10;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD v19[2];
  _OWORD v20[2];

  if (*(_QWORD *)(a1 + 8) < 4uLL)
    goto LABEL_10;
  v6 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 == -822415874)
  {
    v13 = *(_OWORD *)(a1 + 16);
    v20[0] = *(_OWORD *)a1;
    v20[1] = v13;
    v8 = v20;
    v9 = 0;
LABEL_13:
    v10 = 0;
    return llvm::object::MachOObjectFile::create(v8, v9, v10, a2, a3, a4);
  }
  if (*v6 == -17958194)
  {
    v14 = *(_OWORD *)(a1 + 16);
    v19[0] = *(_OWORD *)a1;
    v19[1] = v14;
    v8 = v19;
    v9 = 1;
    goto LABEL_13;
  }
  if (*v6 == -805638658)
  {
    v15 = *(_OWORD *)(a1 + 16);
    v18[0] = *(_OWORD *)a1;
    v18[1] = v15;
    v8 = v18;
    v9 = 0;
    goto LABEL_7;
  }
  if (*v6 != -17958193)
  {
LABEL_10:
    v16 = 2;
    result = sub_1C59F59A8("Unrecognized MachO magic number", &v16, (uint64_t *)a4);
    *(_BYTE *)(a4 + 8) |= 1u;
    return result;
  }
  v7 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v7;
  v8 = v17;
  v9 = 1;
LABEL_7:
  v10 = 1;
  return llvm::object::MachOObjectFile::create(v8, v9, v10, a2, a3, a4);
}

void llvm::object::MachOObjectFile::getObjcSymbols(llvm::object::MachOObjectFile *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t i;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  size_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  char v92;
  int64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  unsigned int v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  size_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  const char *v112;
  unsigned int v113;
  uint64_t v114;
  const char *v115;
  unsigned int v116;
  uint64_t v117;
  const char *v118;
  size_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  size_t v123;
  const char *v124;
  int v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  unint64_t v129;
  const char *v130;
  _QWORD v131[2];
  const char *v132;
  __int16 v133;
  _QWORD v134[2];
  const char *v135;
  size_t v136;
  __int16 v137;
  _QWORD v138[2];
  const char *v139;
  __int16 v140;
  uint64_t v141[2];
  const char *v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145[2];
  const char *v146;
  __int16 v147;
  void **v148;
  void *__p;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t __dst;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  const char *v164;
  __int128 v165;
  size_t v166;
  __int16 v167;
  const char *v168;
  __int128 v169;
  int64x2_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) != 0x12)
  {
    if (*((_DWORD *)this + 13) == 12 || (v13 = sub_1C59EE5A4(this, "__OBJC", "__module_info"), !(v14 | v13)))
    {
      sub_1C59EC9CC(a4, this, a2, a3);
      return;
    }
    v163 = 0;
    v162 = 0;
    v158 = 0;
    v159 = 0;
    v170 = 0uLL;
    v171 = 0;
    sub_1C59EEAA0((uint64_t)&v148, (uint64_t)this, a2, a3);
    v15 = sub_1C59EE5A4(this, "__OBJC", "__module_info");
    __dst = v15;
    v161 = v16;
    if (!(v16 | v15)
      || (v17 = v15, v18 = v16, !(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 160))(v16, v15)))
    {
LABEL_93:
      *(_BYTE *)(a4 + 24) &= ~1u;
      *(int64x2_t *)a4 = v170;
      *(_QWORD *)(a4 + 16) = v171;
      v170 = 0uLL;
      v171 = 0;
      goto LABEL_94;
    }
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 144))(v18, v17);
      v22 = sub_1C59F0C34((v21 + v20), (_DWORD *)&v163 + 1, &v162, &__dst, &v148, 1);
      if (!v22)
        goto LABEL_93;
      if (v162 <= 0xF)
      {
        v141[0] = (uint64_t)"objc_module_t struct extends past end of ";
        v142 = "(__OBJC,__module_info) section at address: 0x";
        v144 = 771;
        v138[0] = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v161 + 144))(v161, __dst) + v19;
        v145[0] = (uint64_t)v141;
        v146 = (const char *)v138;
        v147 = 3586;
        sub_1C59D7FE0((uint64_t *)a4, v145);
        *(_BYTE *)(a4 + 24) |= 1u;
        goto LABEL_94;
      }
      v23 = *(_DWORD *)(v22 + 12);
      v24 = *((_DWORD *)this + 2);
      v25 = bswap32(v23);
      if (((1 << v24) & 0xAAC00) == 0)
        v25 = *(_DWORD *)(v22 + 12);
      if (v24 <= 0x13)
        v26 = v25;
      else
        v26 = v23;
      v27 = sub_1C59F0C34(v26, &v163, &v162, &v158, &v148, 1);
      if ((_DWORD)v26)
        v28 = v27 == 0;
      else
        v28 = 1;
      if (!v28)
      {
        if (v162 <= 0xB)
        {
          v116 = v158;
          (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v159 + 136))(&v168, v159, v158);
          if ((BYTE8(v169) & 1) != 0)
          {
            v122 = (uint64_t)v168;
            v168 = 0;
            goto LABEL_191;
          }
          v117 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v116);
          v118 = (const char *)(v117 + 16);
          if (*(_BYTE *)(v117 + 31))
            v119 = 16;
          else
            v119 = strlen(v118);
          v167 = 1283;
          v164 = "objc_symtab_t struct extends past end of (";
          *((_QWORD *)&v165 + 1) = v118;
          v166 = v119;
          v131[0] = &v164;
          v132 = ",";
          v133 = 770;
          v134[0] = v131;
          v135 = v168;
          v136 = v169;
          v137 = 1282;
          v138[0] = v134;
          v139 = ") section at address: ";
          v140 = 770;
          v141[0] = (uint64_t)v138;
          v142 = "0x";
          v144 = 770;
          v121 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v161 + 144))(v161, __dst);
          v130 = (const char *)(v121 + HIDWORD(v163));
          v145[0] = (uint64_t)v141;
          v146 = (const char *)&v130;
          v147 = 3586;
          sub_1C59D7FE0((uint64_t *)a4, v145);
          *(_BYTE *)(a4 + 24) |= 1u;
          if ((BYTE8(v169) & 1) != 0)
          {
            v120 = v168;
            v168 = 0;
            if (v120)
LABEL_184:
              (*(void (**)(const char *))(*(_QWORD *)v120 + 8))(v120);
          }
LABEL_94:
          v71 = v157;
          v157 = 0;
          if (v71)
          {
            MEMORY[0x1CAA32FB4](*v71, 8);
            MEMORY[0x1CAA32FC0](v71, 0x1020C405AF6BDC9);
          }
          v72 = v156;
          v156 = 0;
          if (v72)
          {
            MEMORY[0x1CAA32FB4](*v72, 8);
            MEMORY[0x1CAA32FC0](v72, 0x1020C405AF6BDC9);
          }
          v73 = v155;
          v155 = 0;
          if (v73)
          {
            MEMORY[0x1CAA32FB4](*v73, 8);
            MEMORY[0x1CAA32FC0](v73, 0x1020C405AF6BDC9);
          }
          if (__p)
          {
            v150 = __p;
            operator delete(__p);
          }
          v74 = (void **)&v170;
LABEL_147:
          v148 = v74;
          sub_1C5464DAC(&v148);
          return;
        }
        v129 = v162 - 12;
        v29 = v27 + 12;
        if (v162 == 12)
          v29 = 0;
        v125 = v19;
        v127 = (unsigned int *)v29;
        v30 = *((_DWORD *)this + 2);
        v31 = __rev16(*(unsigned __int16 *)(v27 + 8));
        v32 = __rev16(*(unsigned __int16 *)(v27 + 10));
        if (((1 << v30) & 0xAAC00) == 0)
        {
          v31 = *(unsigned __int16 *)(v27 + 8);
          v32 = *(unsigned __int16 *)(v27 + 10);
        }
        if (v30 <= 0x13)
          v33 = v31;
        else
          v33 = *(unsigned __int16 *)(v27 + 8);
        if (v30 <= 0x13)
          v34 = v32;
        else
          v34 = *(unsigned __int16 *)(v27 + 10);
        if ((_DWORD)v33)
        {
          v35 = v127;
          v36 = v129 >> 2;
          for (i = v33; i; --i)
          {
            if (!v36)
            {
              v100 = v158;
              (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v159 + 136))(&v164, v159, v158);
              if ((BYTE8(v165) & 1) != 0)
                goto LABEL_190;
              v101 = v164;
              v102 = v165;
              v103 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v100);
              v104 = (const char *)(v103 + 16);
              if (*(_BYTE *)(v103 + 31))
                v105 = 16;
              else
                v105 = strlen(v104);
              v112 = "remaining class defs entries extends ";
              goto LABEL_171;
            }
            v38 = *v35;
            v39 = *((_DWORD *)this + 2);
            v40 = v39 > 0x13;
            v41 = (1 << v39) & 0xAAC00;
            v42 = v40 || v41 == 0;
            v43 = bswap32(v38);
            if (v42)
              v44 = v38;
            else
              v44 = v43;
            v154 = 0;
            v45 = sub_1C59F0C34(v44, &v163, &v162, &v158, &v148, 1);
            if (v45)
            {
              if (v162 <= 0x27)
              {
                v108 = v158;
                (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v159 + 136))(&v164, v159, v158);
                if ((BYTE8(v165) & 1) != 0)
                  goto LABEL_190;
                v101 = v164;
                v102 = v165;
                v109 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v108);
                v104 = (const char *)(v109 + 16);
                if (*(_BYTE *)(v109 + 31))
                  v105 = 16;
                else
                  v105 = strlen(v104);
                v112 = "objc_class_t struct extends past end ";
                v115 = "of (";
                goto LABEL_182;
              }
              v172 = *(_OWORD *)v45;
              v173 = *(_OWORD *)(v45 + 16);
              v174 = *(_QWORD *)(v45 + 32);
              sub_1C59F4248(v145, v44, (uint64_t)&v172, &v148, &v170);
              v46 = v145[0];
              if (v145[0])
                goto LABEL_150;
            }
            if ((v173 & 1) != 0)
            {
              v154 = 1;
              v47 = sub_1C59F0C34(v172, &v163, &v162, &v158, &v148, 1);
              if (v47)
              {
                if (v162 <= 0x27)
                {
                  v113 = v158;
                  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v159 + 136))(&v164, v159, v158);
                  if ((BYTE8(v165) & 1) != 0)
                    goto LABEL_190;
                  v101 = v164;
                  v102 = v165;
                  v114 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v113);
                  v104 = (const char *)(v114 + 16);
                  if (*(_BYTE *)(v114 + 31))
                    v105 = 16;
                  else
                    v105 = strlen(v104);
                  v112 = "objc_class_t struct extends past ";
LABEL_181:
                  v115 = "end of (";
                  goto LABEL_182;
                }
                v172 = *(_OWORD *)v47;
                v173 = *(_OWORD *)(v47 + 16);
                v174 = *(_QWORD *)(v47 + 32);
                sub_1C59F4248(v145, v172, (uint64_t)&v172, &v148, &v170);
                v46 = v145[0];
                if (v145[0])
                {
LABEL_150:
                  *(_BYTE *)(a4 + 24) |= 1u;
                  *(_QWORD *)a4 = v46;
                  goto LABEL_94;
                }
              }
            }
            ++v35;
            --v36;
          }
        }
        LODWORD(v19) = v125;
        if ((_DWORD)v34)
        {
          v48 = v33;
          while (v48 * 4 + 4 <= v129)
          {
            v49 = v127[v48];
            v50 = *((_DWORD *)this + 2);
            v40 = v50 > 0x13;
            v51 = (1 << v50) & 0xAAC00;
            v52 = v40 || v51 == 0;
            v53 = bswap32(v49);
            if (v52)
              v54 = v49;
            else
              v54 = v53;
            v55 = (unsigned int *)sub_1C59F0C34(v54, &v163, &v162, &v158, &v148, 1);
            if (v55)
            {
              if (v162 <= 0x14)
              {
                v110 = v158;
                (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v159 + 136))(&v164, v159, v158);
                if ((BYTE8(v165) & 1) == 0)
                {
                  v101 = v164;
                  v102 = v165;
                  v111 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v110);
                  v104 = (const char *)(v111 + 16);
                  if (*(_BYTE *)(v111 + 31))
                    v105 = 16;
                  else
                    v105 = strlen(v104);
                  v112 = "objc_category_t struct extends past ";
                  goto LABEL_181;
                }
LABEL_190:
                v122 = (uint64_t)v164;
                v164 = 0;
LABEL_191:
                v145[0] = v122;
                llvm::report_fatal_error(v145);
              }
              v56 = v55[1];
              v57 = *((_DWORD *)this + 2);
              v58 = bswap32(*v55);
              v59 = v55[2];
              v60 = v55[3];
              v61 = bswap32(v56);
              v62 = bswap32(v59);
              v63 = bswap32(v60);
              if (((1 << v57) & 0xAAC00) == 0)
              {
                v58 = *v55;
                v61 = v55[1];
                v62 = v55[2];
                v63 = v55[3];
              }
              if (v57 <= 0x13)
                v64 = v58;
              else
                v64 = *v55;
              if (v57 <= 0x13)
                v65 = v61;
              else
                v65 = v56;
              if (v57 <= 0x13)
                v66 = v62;
              else
                v66 = v59;
              if (v57 <= 0x13)
                v67 = v63;
              else
                v67 = v60;
              LODWORD(v138[0]) = 0;
              v68 = sub_1C59F0C34(v64, v138, v134, v145, &v148, 1);
              if (v68)
              {
                v153 = v68;
                v69 = sub_1C59F0C34(v65, v138, v134, v145, &v148, 1);
                if (v69)
                {
                  v151 = 0;
                  v152 = v69;
                  v154 = 0;
                  sub_1C59F42DC(v141, v66, (uint64_t)&v148, &v170);
                  v46 = v141[0];
                  if (v141[0])
                    goto LABEL_150;
                  v154 = 1;
                  sub_1C59F42DC(v141, v67, (uint64_t)&v148, &v170);
                  v46 = v141[0];
                  if (v141[0])
                    goto LABEL_150;
                }
              }
            }
            ++v48;
            if (!--v34)
              goto LABEL_29;
          }
          v106 = v158;
          (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v159 + 136))(&v164, v159, v158);
          if ((BYTE8(v165) & 1) != 0)
            goto LABEL_190;
          v101 = v164;
          v102 = v165;
          v107 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v106);
          v104 = (const char *)(v107 + 16);
          if (*(_BYTE *)(v107 + 31))
            v105 = 16;
          else
            v105 = strlen(v104);
          v112 = "remaining category defs entries extends ";
LABEL_171:
          v115 = "past end of (";
LABEL_182:
          v131[0] = v112;
          v132 = v115;
          v133 = 771;
          v134[0] = v131;
          v135 = v104;
          v136 = v105;
          v137 = 1282;
          v138[0] = v134;
          v139 = ",";
          v140 = 770;
          v141[0] = (uint64_t)v138;
          v142 = v101;
          v143 = v102;
          v144 = 1282;
          v145[0] = (uint64_t)v141;
          v146 = ") section";
          v147 = 770;
          sub_1C59D7FE0((uint64_t *)a4, v145);
          *(_BYTE *)(a4 + 24) |= 1u;
          if ((BYTE8(v165) & 1) != 0)
          {
            v120 = v164;
            v164 = 0;
            if (v120)
              goto LABEL_184;
          }
          goto LABEL_94;
        }
      }
LABEL_29:
      v20 = v19 + 16;
      v19 = (v19 + 16);
      v17 = __dst;
      v18 = v161;
      if (v19 >= (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v161 + 160))(v161, __dst))
        goto LABEL_93;
    }
  }
  v168 = 0;
  v169 = 0uLL;
  sub_1C59EEAA0((uint64_t)&v148, (uint64_t)this, a2, a3);
  v6 = sub_1C59EE5A4(this, "__OBJC2", "__class_list");
  if (!(v7 | v6))
    v6 = sub_1C59EE5A4(this, "__DATA", "__objc_classlist");
  v8 = v6;
  v9 = v7;
  if (!(v7 | v6))
  {
    v8 = sub_1C59EE5A4(this, "__DATA_CONST", "__objc_classlist");
    v9 = v10;
  }
  if (!(v9 | v8))
  {
    v8 = sub_1C59EE5A4(this, "__DATA_DIRTY", "__objc_classlist");
    v9 = v11;
  }
  if (!(v9 | v8))
    goto LABEL_128;
  (*(void (**)(int64x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(&v170, v9, v8);
  if ((v171 & 1) != 0)
  {
    v70 = v170.i64[0];
    v170.i64[0] = 0;
  }
  else
  {
    v126 = v170.i64[1];
    v128 = v170.i64[0];
    v12 = *((_QWORD *)v148[10] + v8);
    v124 = (const char *)(v12 + 16);
    if (*(_BYTE *)(v12 + 31))
      v123 = 16;
    else
      v123 = strlen((const char *)(v12 + 16));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(&v172, v9, v8);
    v75 = v172;
    if ((v173 & 1) != 0)
    {
      v130 = (const char *)v172;
      goto LABEL_123;
    }
    if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8))
    {
LABEL_121:
      v130 = 0;
      goto LABEL_123;
    }
    v76 = 0;
    v77 = 0;
    while (1)
    {
      v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8) - v77;
      if (v78 >= 8)
        v79 = 8;
      else
        v79 = v78;
      __dst = 0;
      memcpy(&__dst, (const void *)(v75 + v76), v79);
      v80 = v76 + 8;
      if (v76 + 8 > (unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8))
      {
        v131[0] = "class";
        v132 = " list pointer extends past end of (";
        v133 = 771;
        v134[0] = v131;
        v135 = v124;
        v136 = v123;
        v137 = 1282;
        v138[0] = v134;
        v139 = ",";
        v140 = 770;
        v141[0] = (uint64_t)v138;
        v142 = (const char *)v128;
        v143 = v126;
        v144 = 1282;
        v145[0] = (uint64_t)v141;
        v146 = ") section at address: 0x";
        v147 = 770;
        v158 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(v9, v8) + v76;
        *(_QWORD *)&v172 = v145;
        *(_QWORD *)&v173 = &v158;
        LOWORD(v174) = 3586;
        sub_1C59D7FE0((uint64_t *)&v130, (uint64_t *)&v172);
        goto LABEL_123;
      }
      v81 = *((_DWORD *)v148 + 2);
      v40 = v81 > 0x13;
      v82 = (1 << v81) & 0xAAC00;
      v83 = v40 || v82 == 0;
      v84 = v83 ? __dst : bswap64(__dst);
      v85 = sub_1C59EFE2C((uint64_t)v157, v84);
      v145[0] = 0;
      v141[0] = 0;
      sub_1C59EFEB4((uint64_t)&v172, v77, v8, v9, (uint64_t)&v148, v145, v141, v85);
      if ((BYTE8(v172) & 1) != 0)
        break;
      sub_1C59EE778((uint64_t *)&v130, v141[0] + v145[0], (uint64_t)&v148, (int64x2_t *)&v168);
      if (v130)
        goto LABEL_123;
      v76 = (v76 + 8);
      v77 = v80;
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8) <= (unint64_t)v80)
        goto LABEL_121;
    }
    v70 = v172;
  }
  v130 = (const char *)v70;
LABEL_123:
  if ((v171 & 1) != 0)
  {
    v86 = v170.i64[0];
    v170.i64[0] = 0;
    if (v86)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  }
  v87 = (uint64_t)v130;
  if (!v130)
  {
LABEL_128:
    LOBYTE(v166) = 0;
    v87 = (uint64_t)v168;
    v164 = v168;
    v165 = v169;
    v168 = 0;
    v169 = 0uLL;
    v9 = v165;
    v88 = 1;
    goto LABEL_129;
  }
  v88 = 0;
  LOBYTE(v166) = -1;
  v164 = v130;
LABEL_129:
  v89 = v157;
  v157 = 0;
  if (v89)
  {
    MEMORY[0x1CAA32FB4](*v89, 8);
    MEMORY[0x1CAA32FC0](v89, 0x1020C405AF6BDC9);
  }
  v90 = v156;
  v156 = 0;
  if (v90)
  {
    MEMORY[0x1CAA32FB4](*v90, 8);
    MEMORY[0x1CAA32FC0](v90, 0x1020C405AF6BDC9);
  }
  v91 = v155;
  v155 = 0;
  if (v91)
  {
    MEMORY[0x1CAA32FB4](*v91, 8);
    MEMORY[0x1CAA32FC0](v91, 0x1020C405AF6BDC9);
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  v148 = (void **)&v168;
  sub_1C5464DAC(&v148);
  v92 = *(_BYTE *)(a4 + 24);
  if (v88)
  {
    *(_BYTE *)(a4 + 24) = v92 & 0xFE;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    v93 = v9 - v87;
    if (v9 != v87)
    {
      if (v93 < 0)
        abort();
      v94 = v93 >> 5;
      v95 = (char *)operator new(v93);
      v96 = 0;
      *(_QWORD *)a4 = v95;
      *(_QWORD *)(a4 + 16) = &v95[32 * v94];
      do
      {
        v97 = &v95[v96];
        v98 = (__int128 *)(v87 + v96);
        if (*(char *)(v87 + v96 + 23) < 0)
        {
          sub_1C47EBC30(v97, *(void **)v98, *((_QWORD *)v98 + 1));
        }
        else
        {
          v99 = *v98;
          *((_QWORD *)v97 + 2) = *((_QWORD *)v98 + 2);
          *(_OWORD *)v97 = v99;
        }
        *(_QWORD *)&v95[v96 + 24] = *(_QWORD *)(v87 + v96 + 24);
        v96 += 32;
      }
      while (v87 + v96 != v9);
      *(_QWORD *)(a4 + 8) = &v95[v96];
    }
    v74 = (void **)&v164;
    goto LABEL_147;
  }
  *(_BYTE *)(a4 + 24) = v92 | 1;
  *(_QWORD *)a4 = v87;
}

void sub_1C59EC9CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *__p;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  __int16 v46;
  _QWORD v47[4];
  __int16 v48;
  _QWORD v49[4];
  __int16 v50;
  _QWORD v51[4];
  __int16 v52;
  uint64_t v53[4];
  __int16 v54;
  unsigned int __dst;
  uint64_t *v56;
  char v57;
  uint64_t *v58;
  __int16 v59;
  _QWORD v60[2];
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v42 = 0uLL;
  v43 = 0;
  sub_1C59EEAA0((uint64_t)&v36, (uint64_t)a2, a3, a4);
  v6 = sub_1C59EE5A4(a2, "__OBJC2", "__class_list");
  if (!(v7 | v6))
    v6 = sub_1C59EE5A4(a2, "__DATA", "__objc_classlist");
  v8 = v6;
  v9 = v7;
  if (!(v7 | v6))
  {
    v8 = sub_1C59EE5A4(a2, "__DATA_CONST", "__objc_classlist");
    v9 = v10;
  }
  if (!(v9 | v8))
  {
    v8 = sub_1C59EE5A4(a2, "__DATA_DIRTY", "__objc_classlist");
    v9 = v11;
  }
  if (!(v9 | v8))
    goto LABEL_38;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(v60, v9, v8);
  if ((v61 & 1) != 0)
  {
    v13 = v60[0];
    v60[0] = 0;
  }
  else
  {
    v33 = v60[1];
    v34 = v60[0];
    v12 = *((_QWORD *)v36[10] + v8);
    v32 = v12 + 16;
    if (*(_BYTE *)(v12 + 31))
      v31 = 16;
    else
      v31 = strlen((const char *)(v12 + 16));
    (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 168))(&v56, v9, v8);
    v14 = (uint64_t)v56;
    if ((v58 & 1) != 0)
    {
      v35 = (uint64_t)v56;
      goto LABEL_33;
    }
    if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8))
    {
LABEL_31:
      v35 = 0;
      goto LABEL_33;
    }
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8) - v16;
      if (v17 >= 4)
        v18 = 4;
      else
        v18 = v17;
      __dst = 0;
      memcpy(&__dst, (const void *)(v14 + v15), v18);
      v19 = v15 + 4;
      if (v15 + 4 > (unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8))
      {
        v45[0] = "class";
        v45[2] = " list pointer extends past end of (";
        v46 = 771;
        v47[0] = v45;
        v47[2] = v32;
        v47[3] = v31;
        v48 = 1282;
        v49[0] = v47;
        v49[2] = ",";
        v50 = 770;
        v51[0] = v49;
        v51[2] = v34;
        v51[3] = v33;
        v52 = 1282;
        v53[0] = (uint64_t)v51;
        v53[2] = (uint64_t)") section at address: 0x";
        v54 = 770;
        v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(v9, v8) + v15;
        v56 = v53;
        v58 = &v44;
        v59 = 3586;
        sub_1C59D7FE0(&v35, (uint64_t *)&v56);
        goto LABEL_33;
      }
      v20 = *((_DWORD *)v36 + 2);
      v21 = v20 > 0x13;
      v22 = (1 << v20) & 0xAAC00;
      v23 = v21 || v22 == 0;
      v24 = v23 ? __dst : bswap32(__dst);
      v25 = sub_1C59EFE2C((uint64_t)v41, v24);
      sub_1C59EFEB4((uint64_t)&v56, v16, v8, v9, (uint64_t)&v36, v53, v51, v25);
      if ((v57 & 1) != 0)
        break;
      sub_1C59F28E4(&v35, v25, &v36, (char **)&v42);
      if (v35)
        goto LABEL_33;
      v15 = v19;
      v16 = v19;
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, v8) <= (unint64_t)v19)
        goto LABEL_31;
    }
    v13 = (uint64_t)v56;
  }
  v35 = v13;
LABEL_33:
  if ((v61 & 1) != 0)
  {
    v26 = v60[0];
    v60[0] = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v27 = v35;
  if (v35)
  {
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = v27;
    goto LABEL_39;
  }
LABEL_38:
  *(_BYTE *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v42;
  *(_QWORD *)(a1 + 16) = v43;
  v42 = 0uLL;
  v43 = 0;
LABEL_39:
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    MEMORY[0x1CAA32FB4](*v28, 8);
    MEMORY[0x1CAA32FC0](v28, 0x1020C405AF6BDC9);
  }
  v29 = v40;
  v40 = 0;
  if (v29)
  {
    MEMORY[0x1CAA32FB4](*v29, 8);
    MEMORY[0x1CAA32FC0](v29, 0x1020C405AF6BDC9);
  }
  v30 = v39;
  v39 = 0;
  if (v30)
  {
    MEMORY[0x1CAA32FB4](*v30, 8);
    MEMORY[0x1CAA32FC0](v30, 0x1020C405AF6BDC9);
  }
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  v36 = (void **)&v42;
  sub_1C5464DAC(&v36);
}

void llvm::object::MachOObjectFile::findDsymObjectMembers(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  BOOL *v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  void ***v11;
  BOOL *v12;
  const std::error_category *v13;
  const std::error_category *v14;
  const std::error_category *v15;
  unint64_t v16;
  void **v17;
  void ***p_dst;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  void **v26;
  __darwin_ino64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  char st_gid_high;
  char *v47;
  const std::error_category *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int64x2_t v66;
  const std::error_category *v67;
  void **v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  unint64_t v74;
  const std::error_category *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void *__p[2];
  _BYTE v80[28];
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  char v86;
  DIR **v87;
  std::__shared_weak_count *v88;
  int64x2_t v89;
  char *v90;
  uint64_t v91;
  unint64_t is_directory;
  const std::error_category *v93;
  char v94;
  void **__dst;
  unint64_t v96;
  int64_t v97;
  __int16 v98;
  stat v99;
  void *v100;
  __int128 v101;
  _BYTE v102[256];
  void *v103;
  __int128 v104;
  char *v105;
  char **v106;
  char v107;
  uint64_t v108;
  int v109;
  void **v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v100 = v102;
  v101 = xmmword_1C64638F0;
  if (a2 < 0x101)
  {
    v6 = 0;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v100, v102, a2, 1);
  v6 = v101;
  if (a2)
  {
LABEL_3:
    memcpy((char *)v100 + v6, a1, a2);
    v6 = v101;
  }
LABEL_4:
  *(_QWORD *)&v101 = v6 + a2;
  llvm::sys::path::remove_dots((unsigned __int8 **)&v100, 0, 0);
  LOWORD(v106) = 261;
  v103 = v100;
  *(_QWORD *)&v104 = v101;
  LOBYTE(v99.st_dev) = 0;
  if (llvm::sys::fs::is_directory((llvm::sys::fs *)&v103, (const llvm::Twine *)&v99, v7)
    || !LOBYTE(v99.st_dev)
    || (v8 = llvm::sys::path::extension((uint64_t)v100, v101, 0), v9 != 5)
    || (*(_DWORD *)v8 == 1498637358 ? (v10 = v8[4] == 77) : (v10 = 0), !v10))
  {
    *(_BYTE *)(a3 + 24) &= ~1u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v103 = 0;
    v104 = 0uLL;
    *(_QWORD *)&v99.st_dev = &v103;
    v11 = (void ***)&v99;
    goto LABEL_12;
  }
  v103 = "Contents";
  LOWORD(v106) = 259;
  *(_QWORD *)&v99.st_dev = "Resources";
  LOWORD(v99.st_atimespec.tv_sec) = 259;
  __p[0] = "DWARF";
  *(_WORD *)&v80[16] = 259;
  v98 = 257;
  llvm::sys::path::append(&v100, 0, (_QWORD **)&v103, &v99, (_QWORD **)__p, &__dst);
  v94 = 0;
  LOWORD(v106) = 261;
  v103 = v100;
  *(_QWORD *)&v104 = v101;
  is_directory = llvm::sys::fs::is_directory((llvm::sys::fs *)&v103, (const llvm::Twine *)&v94, v12);
  v93 = v13;
  v14 = std::generic_category();
  v15 = v93;
  if (v93 == v14 && (_DWORD)is_directory == 2 || !(_DWORD)is_directory && !v94)
  {
    v16 = is_directory;
    if (!a1)
    {
      __dst = 0;
      v96 = 0;
      p_dst = &__dst;
      v97 = 0;
LABEL_32:
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)v80 = 0;
      LODWORD(v104) = 0;
      v107 = 0;
      v108 = 0;
      v103 = &unk_1E81A7208;
      v110 = __p;
      v109 = 0;
      v106 = 0;
      *((_QWORD *)&v104 + 1) = 0;
      v105 = 0;
      *(_QWORD *)&v99.st_dev = &off_1E8132A78;
      v99.st_ino = (__darwin_ino64_t)"%s: expected directory 'Contents/Resources/DWARF' in dSYM bundle";
      *(_QWORD *)&v99.st_uid = p_dst;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v103, (uint64_t)&v99);
      v21 = v110;
      v22 = operator new();
      LOWORD(v99.st_atimespec.tv_sec) = 260;
      *(_QWORD *)&v99.st_dev = v21;
      *(_QWORD *)v22 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v99, (_QWORD *)(v22 + 8));
      *(_QWORD *)(v22 + 32) = v16;
      *(_QWORD *)(v22 + 40) = v15;
      *(_BYTE *)(v22 + 48) = 1;
      v103 = off_1E81A6E70;
      if (v109 == 1 && *((_QWORD *)&v104 + 1))
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v104 + 1), 0x1000C8077774924);
      if ((v80[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_QWORD *)a3 = v22;
      if (SHIBYTE(v97) < 0)
        operator delete(__dst);
      goto LABEL_13;
    }
    if (a2 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a2 >= 0x17)
      {
        v19 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a2 | 7) != 0x17)
          v19 = a2 | 7;
        v20 = v19 + 1;
        v17 = (void **)operator new(v19 + 1);
        v96 = a2;
        v97 = v20 | 0x8000000000000000;
        __dst = v17;
      }
      else
      {
        HIBYTE(v97) = a2;
        v17 = (void **)&__dst;
        if (!a2)
        {
LABEL_30:
          *((_BYTE *)v17 + a2) = 0;
          p_dst = &__dst;
          if (v97 < 0)
            p_dst = (void ***)__dst;
          goto LABEL_32;
        }
      }
      memmove(v17, a1, a2);
      goto LABEL_30;
    }
LABEL_135:
    abort();
  }
  if ((_DWORD)is_directory)
  {
    LOWORD(v106) = 261;
    v103 = v100;
    *(_QWORD *)&v104 = v101;
    v23 = is_directory;
    v24 = (_QWORD *)operator new();
    *v24 = &off_1E81A0D28;
    v24[1] = v23;
    v24[2] = v15;
    *(_QWORD *)&v99.st_dev = v24;
    sub_1C61D4644((llvm::Twine *)&v103, 0, 0, (uint64_t *)&v99.st_dev, &v91);
    if (*(_QWORD *)&v99.st_dev)
      (*(void (**)(_QWORD))(**(_QWORD **)&v99.st_dev + 8))(*(_QWORD *)&v99.st_dev);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v91;
    v91 = 0;
    goto LABEL_13;
  }
  v89 = 0uLL;
  v90 = 0;
  LOWORD(v106) = 261;
  v103 = v100;
  *(_QWORD *)&v104 = v101;
  sub_1C61D4808((uint64_t)&v87, (const char **)&v103, &is_directory, 1);
  v84 = 0;
  v85 = 0;
  v86 = 1;
  if (sub_1C5057AF4((uint64_t *)&v87, &v84) || (_DWORD)is_directory)
  {
LABEL_101:
    v60 = v85;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v62 = __ldaxr(p_shared_owners);
      while (__stlxr(v62 - 1, p_shared_owners));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v88;
    if (v88)
    {
      v64 = (unint64_t *)&v88->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if ((_DWORD)is_directory)
    {
      LOWORD(v106) = 261;
      v103 = v100;
      *(_QWORD *)&v104 = v101;
      v74 = is_directory;
      v75 = v93;
      v76 = (_QWORD *)operator new();
      *v76 = &off_1E81A0D28;
      v76[1] = v74;
      v76[2] = v75;
      *(_QWORD *)&v99.st_dev = v76;
      sub_1C61D4644((llvm::Twine *)&v103, 0, 0, (uint64_t *)&v99.st_dev, &v77);
      if (*(_QWORD *)&v99.st_dev)
        (*(void (**)(_QWORD))(**(_QWORD **)&v99.st_dev + 8))(*(_QWORD *)&v99.st_dev);
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_QWORD *)a3 = v77;
      v77 = 0;
      goto LABEL_134;
    }
    v66 = v89;
    if (v89.i64[0] != v89.i64[1])
    {
      *(_BYTE *)(a3 + 24) &= ~1u;
      *(int64x2_t *)a3 = v66;
      *(_QWORD *)(a3 + 16) = v90;
      v90 = 0;
      v89 = 0uLL;
      goto LABEL_134;
    }
    v67 = std::system_category();
    if (!a1)
    {
      __dst = 0;
      v96 = 0;
      v69 = &__dst;
      v97 = 0;
LABEL_126:
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)v80 = 0;
      LODWORD(v104) = 0;
      v107 = 0;
      v108 = 0;
      v103 = &unk_1E81A7208;
      v110 = __p;
      v109 = 0;
      v106 = 0;
      *((_QWORD *)&v104 + 1) = 0;
      v105 = 0;
      *(_QWORD *)&v99.st_dev = &off_1E8132A78;
      v99.st_ino = (__darwin_ino64_t)"%s: no objects found in dSYM bundle";
      *(_QWORD *)&v99.st_uid = v69;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v103, (uint64_t)&v99);
      v72 = v110;
      v73 = operator new();
      LOWORD(v99.st_atimespec.tv_sec) = 260;
      *(_QWORD *)&v99.st_dev = v72;
      *(_QWORD *)v73 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v99, (_QWORD *)(v73 + 8));
      *(_QWORD *)(v73 + 32) = 0;
      *(_QWORD *)(v73 + 40) = v67;
      *(_BYTE *)(v73 + 48) = 1;
      v103 = off_1E81A6E70;
      if (v109 == 1 && *((_QWORD *)&v104 + 1))
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v104 + 1), 0x1000C8077774924);
      if ((v80[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_QWORD *)a3 = v73;
      if (SHIBYTE(v97) < 0)
        operator delete(__dst);
      goto LABEL_134;
    }
    if (a2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_135;
    if (a2 >= 0x17)
    {
      v70 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v70 = a2 | 7;
      v71 = v70 + 1;
      v68 = (void **)operator new(v70 + 1);
      v96 = a2;
      v97 = v71 | 0x8000000000000000;
      __dst = v68;
    }
    else
    {
      HIBYTE(v97) = a2;
      v68 = (void **)&__dst;
      if (!a2)
      {
LABEL_124:
        *((_BYTE *)v68 + a2) = 0;
        v69 = &__dst;
        if (v97 < 0)
          v69 = (void ***)__dst;
        goto LABEL_126;
      }
    }
    memmove(v68, a1, a2);
    goto LABEL_124;
  }
  while (1)
  {
    v25 = *((_BYTE *)v87 + 31);
    v26 = v25 >= 0 ? (void **)(v87 + 1) : (void **)v87[1];
    v27 = v25 >= 0 ? v25 & 0x7F : (__darwin_ino64_t)v87[2];
    *(_OWORD *)__p = 0u;
    memset(v80, 0, sizeof(v80));
    v81 = 0xFFFFLL;
    v82 = 0;
    v83 = 0;
    v98 = 261;
    __dst = v26;
    v96 = v27;
    v103 = &v105;
    v104 = xmmword_1C85F20B0;
    v28 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&__dst, (uint64_t)&v103);
    v29 = stat(v28, &v99);
    v30 = sub_1C5E7F828(v29, &v99.st_dev, (uint64_t)__p);
    if (v103 != &v105)
      break;
    if ((_DWORD)v30)
      goto LABEL_89;
LABEL_53:
    if (*(_DWORD *)&v80[24] <= 9u && ((1 << v80[24]) & 0x214) != 0)
    {
      if (v26)
      {
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_135;
        if (v27 >= 0x17)
        {
          v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v33 = v27 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          v99.st_ino = v27;
          *(_QWORD *)&v99.st_uid = v34 | 0x8000000000000000;
          *(_QWORD *)&v99.st_dev = v32;
        }
        else
        {
          HIBYTE(v99.st_gid) = v27;
          v32 = &v99;
          if (!v27)
          {
LABEL_65:
            v32[v27] = 0;
LABEL_66:
            v35 = v89.u64[1];
            v36 = v90;
            if (v89.i64[1] >= (unint64_t)v90)
            {
              v37 = v89.i64[0];
              v38 = 0xAAAAAAAAAAAAAAABLL * ((v89.i64[1] - v89.i64[0]) >> 3);
              v39 = v38 + 1;
              if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_135;
              if (0x5555555555555556 * ((uint64_t)&v90[-v89.i64[0]] >> 3) > v39)
                v39 = 0x5555555555555556 * ((uint64_t)&v90[-v89.i64[0]] >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v90[-v89.i64[0]] >> 3) >= 0x555555555555555)
                v40 = 0xAAAAAAAAAAAAAAALL;
              else
                v40 = v39;
              v106 = &v90;
              if (v40)
              {
                if (v40 > 0xAAAAAAAAAAAAAAALL)
                  sub_1C4764EE4();
                v41 = (char *)operator new(24 * v40);
              }
              else
              {
                v41 = 0;
              }
              v42 = &v41[24 * v38];
              *(_OWORD *)v42 = *(_OWORD *)&v99.st_dev;
              *((_QWORD *)v42 + 2) = *(_QWORD *)&v99.st_uid;
              memset(&v99, 0, 24);
              if (v35 == v37)
              {
                st_gid_high = 0;
                v45 = vdupq_n_s64(v35);
                v43 = &v41[24 * v38];
              }
              else
              {
                v43 = &v41[24 * v38];
                do
                {
                  v44 = *(_OWORD *)(v35 - 24);
                  *((_QWORD *)v43 - 1) = *(_QWORD *)(v35 - 8);
                  *(_OWORD *)(v43 - 24) = v44;
                  v43 -= 24;
                  *(_QWORD *)(v35 - 16) = 0;
                  *(_QWORD *)(v35 - 8) = 0;
                  *(_QWORD *)(v35 - 24) = 0;
                  v35 -= 24;
                }
                while (v35 != v37);
                v45 = v89;
                v36 = v90;
                st_gid_high = HIBYTE(v99.st_gid);
              }
              v47 = v42 + 24;
              v89.i64[0] = (uint64_t)v43;
              v89.i64[1] = (uint64_t)(v42 + 24);
              v104 = (__int128)v45;
              v90 = &v41[24 * v40];
              v105 = v36;
              v103 = (void *)v45.i64[0];
              sub_1C4D868F0((uint64_t)&v103);
              v89.i64[1] = (uint64_t)v47;
              if (st_gid_high < 0)
                operator delete(*(void **)&v99.st_dev);
            }
            else
            {
              *(_OWORD *)v89.i64[1] = *(_OWORD *)&v99.st_dev;
              *(_QWORD *)(v35 + 16) = *(_QWORD *)&v99.st_uid;
              v89.i64[1] = v35 + 24;
            }
            goto LABEL_85;
          }
        }
        memmove(v32, v26, v27);
        goto LABEL_65;
      }
      memset(&v99, 0, 24);
      goto LABEL_66;
    }
LABEL_85:
    is_directory = llvm::sys::fs::detail::directory_iterator_increment(v87);
    v93 = v48;
    if (sub_1C5057AF4((uint64_t *)&v87, &v84) || (_DWORD)is_directory)
      goto LABEL_101;
  }
  v49 = v30;
  v50 = v31;
  free(v103);
  v30 = v49;
  v31 = v50;
  if (!(_DWORD)v49)
    goto LABEL_53;
LABEL_89:
  LOWORD(v106) = 261;
  v103 = v26;
  *(_QWORD *)&v104 = v27;
  v51 = v30;
  v52 = v31;
  v53 = (_QWORD *)operator new();
  *v53 = &off_1E81A0D28;
  v53[1] = v51;
  v53[2] = v52;
  *(_QWORD *)&v99.st_dev = v53;
  sub_1C61D4644((llvm::Twine *)&v103, 0, 0, (uint64_t *)&v99.st_dev, &v78);
  if (*(_QWORD *)&v99.st_dev)
    (*(void (**)(_QWORD))(**(_QWORD **)&v99.st_dev + 8))(*(_QWORD *)&v99.st_dev);
  *(_BYTE *)(a3 + 24) |= 1u;
  *(_QWORD *)a3 = v78;
  v78 = 0;
  v54 = v85;
  if (v85)
  {
    v55 = (unint64_t *)&v85->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v88;
  if (v88)
  {
    v58 = (unint64_t *)&v88->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_134:
  v103 = &v89;
  v11 = (void ***)&v103;
LABEL_12:
  sub_1C4765410(v11);
LABEL_13:
  if (v100 != v102)
    free(v100);
}

uint64_t llvm::object::MachOObjectFile::mapReflectionSectionNameToEnumValue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (a3 == 14)
  {
    if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 6) == 0x6F746F72705F3574)
      return 6;
    return 10;
  }
  if (a3 == 15)
  {
    if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 7) == 0x736F746F72705F35)
      return 7;
    if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 7) == 0x6D756E65706D5F35)
      return 9;
    return 10;
  }
  if (a3 != 16)
    return 10;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x646D646C6569665FLL)
    return 0;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x7974636F7373615FLL)
    return 1;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x6E69746C6975625FLL)
    return 2;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x657275747061635FLL)
    return 3;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x666572657079745FLL)
    return 4;
  if (*a2 != 0x3574666977735F5FLL || a2[1] != 0x7274736C6665725FLL)
  {
    if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x73636E756663615FLL)
      return 8;
    return 10;
  }
  return 5;
}

BOOL llvm::object::MachOObjectFile::isMachOPairedReloc(llvm::object::MachOObjectFile *this, uint64_t a2)
{
  _BOOL4 v3;

  if (a2 <= 38)
  {
    if (a2 != 1)
      return a2 == 3 && this == (llvm::object::MachOObjectFile *)1;
LABEL_18:
    if ((unint64_t)this >= 0xA)
      return 0;
    else
      return (0x30Cu >> (char)this) & 1;
  }
  if (a2 == 39)
    goto LABEL_18;
  v3 = this == (llvm::object::MachOObjectFile *)2 || this == (llvm::object::MachOObjectFile *)4;
  if (a2 != 41)
    v3 = 0;
  if (a2 == 42)
    return this == (llvm::object::MachOObjectFile *)5;
  else
    return v3;
}

void sub_1C59EDCE8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_1E8189350;
  sub_1C59F5034((void ***)(a1 + 264));
  v2 = *(void **)(a1 + 232);
  if (v2 != (void *)(a1 + 248))
    free(v2);
  v3 = *(void **)(a1 + 208);
  if (v3 != (void *)(a1 + 224))
    free(v3);
  v4 = *(void **)(a1 + 128);
  if (v4 != (void *)(a1 + 144))
    free(v4);
  v5 = *(void **)(a1 + 104);
  if (v5 != (void *)(a1 + 120))
    free(v5);
  v6 = *(void **)(a1 + 80);
  if (v6 != (void *)(a1 + 96))
    free(v6);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C59EDD90(uint64_t result, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22[2];
  const char *v23;
  __int16 v24;

  v4 = result;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 <= (unint64_t)a3 && (v6 = v5 + *(_QWORD *)(a2 + 24), (unint64_t)(a3 + 2) <= v6))
  {
    LODWORD(v9) = *a3;
    LODWORD(v8) = a3[1];
    v10 = *(_DWORD *)(a2 + 8);
    v11 = v10 > 0x13;
    v12 = (1 << v10) & 0xAAC00;
    v13 = v11 || v12 == 0;
    v14 = bswap32(v9);
    v15 = bswap32(v8);
    if (v13)
      v8 = v8;
    else
      v8 = v15;
    if (v13)
      v9 = v9;
    else
      v9 = v14;
    if ((unint64_t)a3 + v8 <= v6)
    {
      v16 = v9 | (v8 << 32);
      if (v16 >> 35)
      {
        *(_BYTE *)(result + 16) &= ~1u;
        *(_QWORD *)result = a3;
        *(_QWORD *)(result + 8) = v16;
        return result;
      }
      v18[0] = (uint64_t)"load command ";
      v19 = a4;
      v20 = 2051;
      v22[0] = (uint64_t)v18;
      v23 = " with size less than 8 bytes";
      v24 = 770;
      result = sub_1C59D7FE0(&v17, v22);
      *(_BYTE *)(v4 + 16) |= 1u;
      v7 = v17;
    }
    else
    {
      v18[0] = (uint64_t)"load command ";
      v19 = a4;
      v20 = 2051;
      v22[0] = (uint64_t)v18;
      v23 = " extends past end of file";
      v24 = 770;
      result = sub_1C59D7FE0(&v21, v22);
      *(_BYTE *)(v4 + 16) |= 1u;
      v7 = v21;
    }
  }
  else
  {
    v22[0] = (uint64_t)"Structure read out-of-range";
    v24 = 259;
    result = sub_1C59D7FE0(v18, v22);
    v7 = v18[0];
    *(_BYTE *)(v4 + 16) |= 1u;
  }
  *(_QWORD *)v4 = v7;
  return result;
}

uint64_t *sub_1C59EDF18(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t *v5;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  __int128 *v21;
  char v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  char v26;
  char v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[4];
  __int16 v39;
  _QWORD v40[4];
  char v41;
  char v42;
  _QWORD v43[4];
  __int16 v44;
  uint64_t v45[4];
  char v46;
  char v47;
  uint64_t v48;
  unint64_t v49;

  v5 = result;
  v48 = a4;
  v49 = a3;
  if (!a4)
  {
LABEL_15:
    *v5 = 0;
    return result;
  }
  v10 = (uint64_t *)a2[1];
  if (v10 == a2)
  {
LABEL_13:
    result = (uint64_t *)operator new(0x28uLL);
    result[2] = a3;
    result[3] = a4;
    result[4] = (uint64_t)a5;
    v14 = *a2;
    *result = *a2;
    result[1] = (uint64_t)a2;
    *(_QWORD *)(v14 + 8) = result;
    *a2 = (uint64_t)result;
LABEL_14:
    ++a2[2];
    goto LABEL_15;
  }
  v11 = a4 + a3;
  v12 = v10[2];
  while ((v12 > a3 || v10[3] + v12 <= a3) && (v11 <= v12 || v11 >= v10[3] + v12) && (v12 < a3 || v11 < v10[3] + v12))
  {
    v10 = (uint64_t *)v10[1];
    if (v10 == a2)
      goto LABEL_13;
    v12 = v10[2];
    if (v11 <= v12)
    {
      result = (uint64_t *)operator new(0x28uLL);
      result[2] = a3;
      result[3] = a4;
      result[4] = (uint64_t)a5;
      v13 = *v10;
      *(_QWORD *)(v13 + 8) = result;
      *result = v13;
      *v10 = (uint64_t)result;
      result[1] = (uint64_t)v10;
      goto LABEL_14;
    }
  }
  v15 = " at offset ";
  if (*a5)
  {
    v23[0] = a5;
    v23[2] = " at offset ";
    v24 = 771;
    v16 = (const char *)v23;
    v17 = 2;
  }
  else
  {
    v23[0] = " at offset ";
    v24 = 259;
    v17 = 3;
    v16 = " at offset ";
  }
  v25[0] = v16;
  v25[2] = &v49;
  v26 = v17;
  v27 = 12;
  v28[0] = v25;
  v28[2] = " with a size of ";
  v18 = 770;
  v29 = 770;
  v30[0] = v28;
  v30[2] = &v48;
  v31 = 3074;
  *(_QWORD *)&v32 = v30;
  *(_QWORD *)&v33 = ", overlaps ";
  LOWORD(v34) = 770;
  v19 = (_BYTE *)v10[4];
  if (*v19)
  {
    *(_QWORD *)&v35 = &v32;
    *(_QWORD *)&v36 = v19;
    LOWORD(v37) = 770;
    v20 = 2;
    v21 = &v35;
  }
  else
  {
    v35 = v32;
    v36 = v33;
    v37 = v34;
    v20 = v34;
    if (v34 == 1)
    {
      v38[0] = " at offset ";
      v39 = 259;
      v22 = 3;
      goto LABEL_22;
    }
    v18 = *((_QWORD *)&v35 + 1);
    v21 = &v35;
    if (BYTE1(v37) == 1)
      v21 = (__int128 *)v35;
    else
      v20 = 2;
  }
  v38[0] = v21;
  v38[1] = v18;
  v38[2] = " at offset ";
  LOBYTE(v39) = v20;
  v22 = 2;
  v15 = (const char *)v38;
  HIBYTE(v39) = 3;
LABEL_22:
  v40[0] = v15;
  v40[2] = v10 + 2;
  v41 = v22;
  v42 = 12;
  v43[0] = v40;
  v43[2] = " with a size of ";
  v44 = 770;
  v45[0] = (uint64_t)v43;
  v45[2] = (uint64_t)(v10 + 3);
  v46 = 2;
  v47 = 12;
  return (uint64_t *)sub_1C59D7FE0(result, v45);
}

uint64_t sub_1C59EE1EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, (v4 << 6) - 3);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, (v5 << 6) - 3);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 64);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + (v5 << 6)), (const void *)(*(_QWORD *)a2 + (v5 << 6)), *(_QWORD *)a2 + (v6 << 6) - (*(_QWORD *)a2 + (v5 << 6)));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

_QWORD *sub_1C59EE2C0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9 - 2);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

_QWORD *sub_1C59EE340(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      abort();
    v6 = result;
    v7 = 5 * a4;
    result = operator new(40 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9 - 7);
    v6[1] = (char *)v8 + v9;
  }
  return result;
}

_QWORD *sub_1C59EE3CC(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      abort();
    v6 = result;
    v7 = 56 * a4;
    v8 = (char *)operator new(56 * a4);
    *v6 = v8;
    v6[1] = v8;
    v6[2] = &v8[v7];
    return sub_1C59EE450(v6, a2, a3);
  }
  return result;
}

_QWORD *sub_1C59EE450(_QWORD *result, __int128 *a2, __int128 *a3)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 *v6;
  __int128 v7;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_OWORD *)(v4 + 12) = *(__int128 *)((char *)v6 + 12);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      result = sub_1C4DFE394((_QWORD *)(v4 + 32), *((const void **)v6 + 4), *((_QWORD *)v6 + 5), (uint64_t)(*((_QWORD *)v6 + 5) - *((_QWORD *)v6 + 4)) >> 3);
      v4 += 56;
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

uint64_t sub_1C59EE4C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 144 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 144 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 144);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 144 * v5), (const void *)(*(_QWORD *)a2 + 144 * v5), *(_QWORD *)a2 + 144 * v6 - (*(_QWORD *)a2 + 144 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1C59EE5A4(_QWORD *a1, const char *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 344))(a1);
  v8 = v7;
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
  v24 = v6;
  v25 = v8;
  if (v8 != v10 || v6 != v9)
  {
    v12 = v9;
    v13 = v10;
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v26, v8, v6);
      if ((v27 & 1) != 0)
      {
        v22 = v26[0];
        v26[0] = 0;
        v23 = v22;
        llvm::report_fatal_error(&v23);
      }
      v15 = (const void *)v26[0];
      v14 = v26[1];
      v16 = v24;
      v17 = *(_QWORD *)(a1[10] + 8 * v24);
      v18 = (const char *)(v17 + 16);
      if (*(_BYTE *)(v17 + 31))
        break;
      v20 = strlen(v18);
      v19 = v20;
      if (!a2)
      {
        if (v20)
          goto LABEL_23;
        goto LABEL_17;
      }
      if (v20 != strlen(a2))
        goto LABEL_23;
      if (v19)
        goto LABEL_14;
LABEL_17:
      if (a3)
      {
        if (v14 == strlen(a3) && (!v14 || !memcmp(v15, a3, v14)))
          return v16;
      }
      else if (!v14)
      {
        return v16;
      }
LABEL_23:
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 128))(v25, &v24);
      v6 = v24;
      v8 = v25;
      if (v25 == v13 && v24 == v12)
        return 0;
    }
    if (!a2 || strlen(a2) != 16)
      goto LABEL_23;
    v19 = 16;
LABEL_14:
    if (memcmp(v18, a2, v19))
      goto LABEL_23;
    goto LABEL_17;
  }
  return 0;
}

void sub_1C59EE778(uint64_t *a1, unint64_t a2, uint64_t a3, int64x2_t *a4)
{
  unint64_t *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  uint64_t v35[4];
  __int16 v36;
  uint64_t v37[4];
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  const char *v45;
  __int16 v46;
  uint64_t **v47;
  char v48;
  uint64_t *v49;
  __int16 v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v8 = (unint64_t *)sub_1C59F0C34(a2, (_DWORD *)&v42 + 1, &v42, &v40, (_QWORD *)a3, 0);
  if (v8 && v42 > 0x27)
  {
    v9 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v10 = v9 > 0x13;
    v11 = (1 << v9) & 0xAAC00;
    v12 = v10 || v11 == 0;
    v13 = bswap64(*v8);
    v14 = bswap64(v8[4]);
    if (v12)
      v15 = *v8;
    else
      v15 = v13;
    if (v12)
      v16 = v8[4];
    else
      v16 = v14;
    v37[0] = 0;
    v33[0] = 0;
    v17 = HIDWORD(v42);
    v18 = v40;
    v19 = v41;
    sub_1C59EFEB4((uint64_t)&v47, HIDWORD(v42), v40, v41, a3, v37, v33, v15);
    if ((v48 & 1) != 0)
    {
      v26 = (uint64_t)v47;
    }
    else
    {
      v35[0] = 0;
      v51[0] = 0;
      sub_1C59EFEB4((uint64_t)&v43, v17 + 32, v18, v19, a3, v35, v51, v16);
      if ((v44 & 1) == 0)
      {
        v20 = *(_BYTE *)(a3 + 60);
        *(_BYTE *)(a3 + 60) = 0;
        *(_QWORD *)(a3 + 32) = a2;
        sub_1C59F0E5C(a1, (v51[0] + v35[0]) & 0xFFFFFFFFFFFFFFF8, a3, a4);
        if (!*a1)
        {
          if (*(_BYTE *)(a3 + 60)
            || (v29 = v37[0], v37[0] + v15 == a2)
            || !(v37[0] + v15)
            || (v30 = *(_DWORD *)(a3 + 56), v30 > 0x63))
          {
            *(_BYTE *)(a3 + 60) = v20;
            *a1 = 0;
          }
          else
          {
            *(_DWORD *)(a3 + 56) = v30 + 1;
            sub_1C59EE778(a1, v33[0] + v29, a3, a4);
          }
        }
        return;
      }
      v26 = (uint64_t)v43;
    }
    *a1 = v26;
    return;
  }
  v22 = v40;
  v21 = v41;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v41 + 136))(v51, v41, v40);
  if ((v52 & 1) != 0)
  {
    v31 = v51[0];
    v51[0] = 0;
    v39 = v31;
    llvm::report_fatal_error(&v39);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v22);
  v24 = (const char *)(v23 + 16);
  if (*(_BYTE *)(v23 + 31))
    v25 = 16;
  else
    v25 = strlen(v24);
  v34 = 1283;
  v33[0] = "class_t struct extends past end of (";
  v33[2] = v24;
  v33[3] = v25;
  v35[0] = (uint64_t)v33;
  v35[2] = (uint64_t)",";
  v36 = 770;
  v37[0] = (uint64_t)v35;
  v37[2] = v51[0];
  v37[3] = v51[1];
  v38 = 1282;
  v43 = v37;
  v45 = ") section at address: 0x";
  v46 = 770;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 144))(v21, v22);
  v32 = v27 + HIDWORD(v42);
  v47 = &v43;
  v49 = &v32;
  v50 = 3586;
  sub_1C59D7FE0(a1, (uint64_t *)&v47);
  if ((v52 & 1) != 0)
  {
    v28 = v51[0];
    v51[0] = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
}

_QWORD *sub_1C59EEAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  llvm::object::MachOObjectFile *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  const void *v43;
  __int128 *p_dst;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t DyldInfoExportsTrie;
  uint64_t v51;
  size_t v52;
  const void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  const void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  size_t v73;
  unsigned __int8 *v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v93;
  _OWORD v94[2];
  int v95;
  void *v96;
  void **v97;
  void *v98;
  size_t v99;
  int64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[32];
  __int128 v104;
  __int128 v105;
  void *__p[2];
  _BYTE v107[32];
  __int128 v108;
  uint64_t v109;
  void *v110[18];
  void *v111[2];
  _BYTE v112[1032];
  __int128 __dst;
  __int128 v114;
  _BYTE v115[32];
  __int128 v116;
  __int128 v117;
  void *v118[2];
  _BYTE v119[32];
  __int128 v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[1040];
  __int128 __src;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD v150[3];
  uint64_t v151;
  void *v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  __int128 v156;
  void *v157[3];
  uint64_t v158;
  void *v159;
  int v160;
  _BYTE v161[1032];
  uint64_t v162;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = (_QWORD *)v4;
  v162 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v4 = v5;
  *(_OWORD *)(v4 + 8) = 0u;
  v8 = (_QWORD *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 54) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 344))(v5);
  v11 = v10;
  v93 = v6;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6);
  *(_QWORD *)&__src = v9;
  *((_QWORD *)&__src + 1) = v11;
  if (v11 != v13 || v9 != v12)
  {
    v15 = v12;
    v16 = v13;
    do
    {
      v18 = (_OWORD *)v7[2];
      v17 = v7[3];
      if ((unint64_t)v18 >= v17)
      {
        v20 = (_OWORD *)*v8;
        v21 = ((uint64_t)v18 - *v8) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
LABEL_204:
          abort();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 60)
            sub_1C4764EE4();
          v25 = (char *)operator new(16 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[16 * v21];
        *(_OWORD *)v26 = __src;
        v27 = v26;
        if (v18 != v20)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *(v18 - 1);
            v27 -= 16;
            --v18;
          }
          while (v18 != v20);
          v18 = (_OWORD *)*v8;
        }
        v28 = &v25[16 * v24];
        v19 = v26 + 16;
        v7[1] = v27;
        v7[2] = v26 + 16;
        v7[3] = v28;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v18 = __src;
        v19 = v18 + 1;
      }
      v7[2] = v19;
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&__src + 1) + 128))(*((_QWORD *)&__src + 1), &__src);
    }
    while (*((_QWORD *)&__src + 1) != v16 || (_QWORD)__src != v15);
  }
  v30 = (llvm::object::MachOObjectFile *)v93;
  if (!*(_QWORD *)(v93 + 328)
    && !*(_QWORD *)(v93 + 352)
    && (*(_DWORD *)(v93 + 52) != 16777228 || (*(_DWORD *)(v93 + 56) & 0xFFFFFF) != 2))
  {
    return v7;
  }
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_DWORD *)(v31 + 16) = 0;
  v32 = (_QWORD *)v7[10];
  v7[10] = v31;
  if (v32)
  {
    MEMORY[0x1CAA32FB4](*v32, 8);
    MEMORY[0x1CAA32FC0](v32, 0x1020C405AF6BDC9);
  }
  v96 = 0;
  if (!*(_QWORD *)(v93 + 328) && !*(_QWORD *)(v93 + 352))
  {
    llvm::object::MachOObjectFile::rebaseTable((llvm::object::MachOObjectFile *)v93, (uint64_t)&v96, (uint64_t)&__src);
    *(_OWORD *)v115 = v132;
    *(_OWORD *)&v115[16] = v133;
    v116 = v134;
    v117 = v135;
    __dst = __src;
    v114 = v131;
    *(_OWORD *)&v119[16] = v138;
    v120 = v139;
    *(_OWORD *)v119 = v137;
    *(_OWORD *)v118 = v136;
    v84 = (void *)*((_QWORD *)&v140 + 1);
    v121 = v140;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    sub_1C59EE2C0(&v122, *((const void **)&v140 + 1), v141, (uint64_t)(v141 - *((_QWORD *)&v140 + 1)) >> 5);
    v125 = v142;
    v126 = DWORD2(v142);
    *(_OWORD *)v103 = v145;
    *(_OWORD *)&v103[16] = v146;
    v104 = v147;
    v105 = v148;
    v101 = v143;
    v102 = v144;
    *(_OWORD *)&v107[16] = v150[1];
    v108 = v150[2];
    *(_OWORD *)__p = v149;
    *(_OWORD *)v107 = v150[0];
    v85 = v152;
    v109 = v151;
    memset(v110, 0, 24);
    sub_1C59EE2C0(v110, v152, v153, (v153 - (uint64_t)v152) >> 5);
    v86 = *(_QWORD *)&v107[8];
    v87 = *(_QWORD *)&v107[16];
    v88 = v105;
    if (*(_OWORD *)&v119[8] != *(_OWORD *)&v107[8] || v117 != v105)
    {
      do
      {
        v89 = v7[10];
        *(_QWORD *)&v94[0] = *((_QWORD *)&v116 + 1);
        v90 = v116;
        sub_1C54BFAD4(v89, (uint64_t *)v94)[1] = v90;
        llvm::object::MachORebaseBindEntry::moveNext((llvm::object::MachORebaseBindEntry *)&__dst);
      }
      while (*(_QWORD *)&v119[8] != v86 || *(_QWORD *)&v119[16] != v87 || v117 != v88);
    }
    if (v110[0])
      operator delete(v110[0]);
    if (v122)
    {
      v123 = v122;
      operator delete(v122);
    }
    if (v85)
      operator delete(v85);
    if (v84)
      operator delete(v84);
    goto LABEL_202;
  }
  llvm::object::MachOObjectFile::fixupTable((const llvm::object::MachOObjectFile *)v93, &v96, 3, (uint64_t)&__src);
  *(_OWORD *)v115 = v132;
  *(_OWORD *)&v115[16] = v133;
  v116 = v134;
  v117 = v135;
  __dst = __src;
  v114 = v131;
  *(_QWORD *)v119 = 0;
  v118[0] = 0;
  v118[1] = 0;
  sub_1C59EE340(v118, (const void *)v136, *((uint64_t *)&v136 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v136 + 1) - v136) >> 3));
  memset(&v119[8], 0, 24);
  sub_1C59EE3CC(&v119[8], *((__int128 **)&v137 + 1), (__int128 *)v138, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v138 - *((_QWORD *)&v137 + 1)) >> 3));
  *(_QWORD *)&v120 = v139;
  BYTE8(v120) = BYTE8(v139);
  *(_OWORD *)v103 = v142;
  *(_OWORD *)&v103[16] = v143;
  v104 = v144;
  v105 = v145;
  v101 = v140;
  v102 = v141;
  __p[1] = 0;
  *(_QWORD *)v107 = 0;
  __p[0] = 0;
  sub_1C59EE340(__p, (const void *)v146, *((uint64_t *)&v146 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 3));
  memset(&v107[8], 0, 24);
  sub_1C59EE3CC(&v107[8], *((__int128 **)&v147 + 1), (__int128 *)v148, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v148 - *((_QWORD *)&v147 + 1)) >> 3));
  *(_QWORD *)&v108 = v149;
  BYTE8(v108) = BYTE8(v149);
  while (v117 != v105
       && ((_DWORD)v120 != (_DWORD)v108 || *(_QWORD *)&v119[8] != *(_QWORD *)&v107[8]))
  {
    v33 = v7[10];
    *(_QWORD *)&v94[0] = *((_QWORD *)&v116 + 1);
    v34 = v116;
    sub_1C54BFAD4(v33, (uint64_t *)v94)[1] = v34;
    llvm::object::MachOChainedFixupEntry::moveNext((uint64_t)&__dst);
  }
  *(_QWORD *)&v94[0] = &v107[8];
  sub_1C59F5360((void ***)v94);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)&v101 = &v119[8];
  sub_1C59F5360((void ***)&v101);
  if (v118[0])
  {
    v118[1] = v118[0];
    operator delete(v118[0]);
  }
  *(_QWORD *)&__dst = (char *)&v147 + 8;
  sub_1C59F5360((void ***)&__dst);
  if ((_QWORD)v146)
  {
    *((_QWORD *)&v146 + 1) = v146;
    operator delete((void *)v146);
  }
  *(_QWORD *)&__dst = (char *)&v137 + 8;
  sub_1C59F5360((void ***)&__dst);
  if ((_QWORD)v136)
  {
    *((_QWORD *)&v136 + 1) = v136;
    operator delete((void *)v136);
  }
  if (v96)
    goto LABEL_48;
  memset(v94, 0, sizeof(v94));
  v95 = 1065353216;
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 48))(v93);
  v38 = v37;
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 56))(v93);
  *(_QWORD *)&v101 = v36;
  *((_QWORD *)&v101 + 1) = v38;
  if (v36 != v39)
  {
    v40 = v39;
    while (1)
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)&v101 + 1) + 80))(&v98, *((_QWORD *)&v101 + 1), v36);
      if ((v99 & 1) != 0)
      {
LABEL_68:
        v49 = v98;
        v98 = 0;
        if (v49)
          (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
        goto LABEL_70;
      }
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)&v101 + 1) + 72))(&__src, *((_QWORD *)&v101 + 1), v101);
      if ((v131 & 1) != 0)
      {
LABEL_65:
        v48 = __src;
        *(_QWORD *)&__src = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        goto LABEL_67;
      }
      v41 = *((_QWORD *)&__src + 1);
      if (*((_QWORD *)&__src + 1) > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_204;
      v42 = v98;
      v43 = (const void *)__src;
      if (*((_QWORD *)&__src + 1) >= 0x17uLL)
        break;
      BYTE7(v114) = BYTE8(__src);
      p_dst = &__dst;
      if (*((_QWORD *)&__src + 1))
        goto LABEL_61;
LABEL_62:
      *((_BYTE *)p_dst + v41) = 0;
      v97 = (void **)&__dst;
      *((_QWORD *)sub_1C59EF990((float *)v94, (uint64_t)&__dst, (__int128 **)&v97) + 5) = v42;
      if (SBYTE7(v114) < 0)
        operator delete((void *)__dst);
      if ((v131 & 1) != 0)
        goto LABEL_65;
LABEL_67:
      if ((v99 & 1) != 0)
        goto LABEL_68;
LABEL_70:
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v101 + 1) + 24))(*((_QWORD *)&v101 + 1), &v101);
      v36 = v101;
      if ((_QWORD)v101 == v40)
        goto LABEL_71;
    }
    v45 = (*((_QWORD *)&__src + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*((_QWORD *)&__src + 1) | 7) != 0x17)
      v45 = *((_QWORD *)&__src + 1) | 7;
    v46 = v45 + 1;
    p_dst = (__int128 *)operator new(v45 + 1);
    v47 = v46 | 0x8000000000000000;
    v30 = (llvm::object::MachOObjectFile *)v93;
    *(_QWORD *)&v114 = v47;
    *(_QWORD *)&__dst = p_dst;
    *((_QWORD *)&__dst + 1) = v41;
LABEL_61:
    memmove(p_dst, v43, v41);
    goto LABEL_62;
  }
LABEL_71:
  DyldInfoExportsTrie = llvm::object::MachOObjectFile::getDyldInfoExportsTrie(v30);
  llvm::object::MachOObjectFile::exports((uint64_t)&v96, DyldInfoExportsTrie, v51, (uint64_t)v30);
  __dst = __src;
  v114 = v131;
  *(_QWORD *)v115 = &v115[24];
  *(_OWORD *)&v115[8] = xmmword_1C64638F0;
  if (*((_QWORD *)&v132 + 1))
    sub_1C50502AC((uint64_t)v115, (uint64_t)&v132);
  v127 = v129;
  v128 = 0x1000000000;
  if (LODWORD(v150[0]))
    sub_1C59EE1EC((uint64_t)&v127, (uint64_t)&v149 + 8);
  v129[1024] = v154;
  v101 = v155;
  v102 = v156;
  *(_QWORD *)v103 = &v103[24];
  *(_OWORD *)&v103[8] = xmmword_1C64638F0;
  if (v157[1])
    sub_1C50502AC((uint64_t)v103, (uint64_t)v157);
  v111[0] = v112;
  v111[1] = (void *)0x1000000000;
  if (v160)
    sub_1C59EE1EC((uint64_t)v111, (uint64_t)&v159);
  v112[1024] = v161[1024];
  while ((llvm::object::ExportEntry::operator==((uint64_t)&__dst, (uint64_t)&v101) & 1) == 0)
  {
    v52 = *(_QWORD *)&v115[8];
    if (*(_QWORD *)&v115[8])
    {
      if (*(_QWORD *)&v115[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_204;
      v53 = *(const void **)v115;
      v54 = *((_QWORD *)v127 + 8 * (unint64_t)v128 - 5);
      if (*(_QWORD *)&v115[8] >= 0x17uLL)
      {
        v56 = (*(_QWORD *)&v115[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(_QWORD *)&v115[8] | 7) != 0x17)
          v56 = *(_QWORD *)&v115[8] | 7;
        v57 = v56 + 1;
        v55 = operator new(v56 + 1);
        v99 = v52;
        v100 = v57 | 0x8000000000000000;
        v98 = v55;
      }
      else
      {
        HIBYTE(v100) = v115[8];
        v55 = &v98;
      }
      memmove(v55, v53, v52);
      *((_BYTE *)v55 + v52) = 0;
      v97 = &v98;
      *((_QWORD *)sub_1C59EF990((float *)v94, (uint64_t)&v98, (__int128 **)&v97) + 5) = v54;
      if (SHIBYTE(v100) < 0)
        operator delete(v98);
    }
    llvm::object::ExportEntry::moveNext((llvm::object::ExportEntry *)&__dst);
  }
  if (v111[0] != v112)
    free(v111[0]);
  if (*(_BYTE **)v103 != &v103[24])
    free(*(void **)v103);
  if (v127 != v129)
    free(v127);
  if (*(_BYTE **)v115 != &v115[24])
    free(*(void **)v115);
  if (v159 != v161)
    free(v159);
  if (v157[0] != &v158)
    free(v157[0]);
  if (*((_OWORD **)&v149 + 1) != (_OWORD *)((char *)v150 + 8))
    free(*((void **)&v149 + 1));
  if ((__int128 *)v132 != (__int128 *)((char *)&v133 + 8))
    free((void *)v132);
  if (v96)
  {
LABEL_174:
    v82 = (_QWORD *)v7[10];
    v7[10] = 0;
    if (v82)
    {
      MEMORY[0x1CAA32FB4](*v82, 8);
      MEMORY[0x1CAA32FC0](v82, 0x1020C405AF6BDC9);
    }
    sub_1C542C508((uint64_t)v94);
    goto LABEL_177;
  }
  llvm::object::MachOObjectFile::fixupTable((const llvm::object::MachOObjectFile *)v93, &v96, 1, (uint64_t)&__src);
  *(_OWORD *)v115 = v132;
  *(_OWORD *)&v115[16] = v133;
  v116 = v134;
  v117 = v135;
  __dst = __src;
  v114 = v131;
  *(_QWORD *)v119 = 0;
  v118[0] = 0;
  v118[1] = 0;
  sub_1C59EE340(v118, (const void *)v136, *((uint64_t *)&v136 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v136 + 1) - v136) >> 3));
  memset(&v119[8], 0, 24);
  sub_1C59EE3CC(&v119[8], *((__int128 **)&v137 + 1), (__int128 *)v138, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v138 - *((_QWORD *)&v137 + 1)) >> 3));
  *(_QWORD *)&v120 = v139;
  BYTE8(v120) = BYTE8(v139);
  *(_OWORD *)v103 = v142;
  *(_OWORD *)&v103[16] = v143;
  v104 = v144;
  v105 = v145;
  v101 = v140;
  v102 = v141;
  __p[1] = 0;
  *(_QWORD *)v107 = 0;
  __p[0] = 0;
  sub_1C59EE340(__p, (const void *)v146, *((uint64_t *)&v146 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 3));
  memset(&v107[8], 0, 24);
  sub_1C59EE3CC(&v107[8], *((__int128 **)&v147 + 1), (__int128 *)v148, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v148 - *((_QWORD *)&v147 + 1)) >> 3));
  *(_QWORD *)&v108 = v149;
  BYTE8(v108) = BYTE8(v149);
  if (v117 == v105)
    goto LABEL_165;
  do
  {
    if ((_DWORD)v120 == (_DWORD)v108 && *(_QWORD *)&v119[8] == *(_QWORD *)&v107[8])
      break;
    if (*(_DWORD *)&v115[16])
      goto LABEL_164;
    v58 = *(_QWORD *)&v115[8];
    if (*(_QWORD *)&v115[8] > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_204;
    v59 = *(const void **)v115;
    if (*(_QWORD *)&v115[8] >= 0x17uLL)
    {
      v61 = (*(_QWORD *)&v115[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&v115[8] | 7) != 0x17)
        v61 = *(_QWORD *)&v115[8] | 7;
      v62 = v61 + 1;
      v60 = operator new(v61 + 1);
      v99 = v58;
      v100 = v62 | 0x8000000000000000;
      v98 = v60;
LABEL_118:
      memmove(v60, v59, v58);
      goto LABEL_119;
    }
    HIBYTE(v100) = v115[8];
    v60 = &v98;
    if (*(_QWORD *)&v115[8])
      goto LABEL_118;
LABEL_119:
    *((_BYTE *)v60 + v58) = 0;
    if (v100 >= 0)
      v63 = (uint64_t *)&v98;
    else
      v63 = (uint64_t *)v98;
    if (v100 >= 0)
      v64 = HIBYTE(v100) & 0x7F;
    else
      v64 = v99;
    v65 = sub_1C4D8463C((uint64_t)&v97, v63, v64);
    v66 = *((_QWORD *)&v94[0] + 1);
    if (!*((_QWORD *)&v94[0] + 1))
      goto LABEL_158;
    v67 = v65;
    v68 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v94 + 8));
    v68.i16[0] = vaddlv_u8(v68);
    v69 = v68.u32[0];
    if (v68.u32[0] > 1uLL)
    {
      v70 = v65;
      if (v65 >= *((_QWORD *)&v94[0] + 1))
        v70 = v65 % *((_QWORD *)&v94[0] + 1);
    }
    else
    {
      v70 = (*((_QWORD *)&v94[0] + 1) - 1) & v65;
    }
    v71 = *(uint64_t ***)(*(_QWORD *)&v94[0] + 8 * v70);
    if (!v71)
    {
LABEL_158:
      v72 = 0;
      goto LABEL_160;
    }
    v72 = *v71;
    if (!*v71)
      goto LABEL_160;
    if (v100 >= 0)
      v73 = HIBYTE(v100) & 0x7F;
    else
      v73 = v99;
    if (v100 >= 0)
      v74 = (unsigned __int8 *)&v98;
    else
      v74 = (unsigned __int8 *)v98;
    while (1)
    {
      v75 = v72[1];
      if (v75 != v67)
        break;
      v76 = *((_BYTE *)v72 + 39);
      v77 = v76 & 0x7F;
      if (v76 >= 0)
        v78 = v76 & 0x7F;
      else
        v78 = v72[3];
      if (v78 == v73)
      {
        if ((*((_BYTE *)v72 + 39) & 0x80) != 0)
        {
          if (!memcmp((const void *)v72[2], v74, v72[3]))
            goto LABEL_160;
        }
        else
        {
          if ((v76 & 0x7F) == 0)
            goto LABEL_160;
          v79 = 0;
          while (*((unsigned __int8 *)v72 + v79 + 16) == v74[v79])
          {
            if (v77 == ++v79)
              goto LABEL_160;
          }
        }
      }
LABEL_154:
      v72 = (uint64_t *)*v72;
      if (!v72)
        goto LABEL_160;
    }
    if (v69 > 1)
    {
      if (v75 >= v66)
        v75 %= v66;
    }
    else
    {
      v75 &= v66 - 1;
    }
    if (v75 == v70)
      goto LABEL_154;
    v72 = 0;
LABEL_160:
    if (SHIBYTE(v100) < 0)
      operator delete(v98);
    if (v72)
    {
      v80 = v72[5];
      v81 = v7[10];
      v98 = (void *)*((_QWORD *)&v116 + 1);
      sub_1C54BFAD4(v81, (uint64_t *)&v98)[1] = v80;
    }
LABEL_164:
    llvm::object::MachOChainedFixupEntry::moveNext((uint64_t)&__dst);
  }
  while (v117 != v105);
LABEL_165:
  v98 = &v107[8];
  sub_1C59F5360((void ***)&v98);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)&v101 = &v119[8];
  sub_1C59F5360((void ***)&v101);
  if (v118[0])
  {
    v118[1] = v118[0];
    operator delete(v118[0]);
  }
  *(_QWORD *)&__dst = (char *)&v147 + 8;
  sub_1C59F5360((void ***)&__dst);
  if ((_QWORD)v146)
  {
    *((_QWORD *)&v146 + 1) = v146;
    operator delete((void *)v146);
  }
  *(_QWORD *)&__dst = (char *)&v137 + 8;
  sub_1C59F5360((void ***)&__dst);
  if ((_QWORD)v136)
  {
    *((_QWORD *)&v136 + 1) = v136;
    operator delete((void *)v136);
  }
  if (v96)
    goto LABEL_174;
  sub_1C542C508((uint64_t)v94);
LABEL_202:
  if (v96)
  {
LABEL_48:
    v35 = (_QWORD *)v7[10];
    v7[10] = 0;
    if (v35)
    {
      MEMORY[0x1CAA32FB4](*v35, 8);
      MEMORY[0x1CAA32FC0](v35, 0x1020C405AF6BDC9);
    }
LABEL_177:
    if (v96)
      (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  }
  return v7;
}

unsigned __int8 *sub_1C59EF990(float *a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  char v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  signed __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v51;
  char v52;

  v5 = (_BYTE *)a2;
  v7 = *(_BYTE *)(a2 + 23);
  v8 = v7 < 0;
  v9 = *(_QWORD *)(a2 + 8);
  if (v7 < 0)
    a2 = *(_QWORD *)a2;
  v10 = v7 & 0x7F;
  if (v8)
    v11 = v9;
  else
    v11 = v10;
  v12 = sub_1C4D8463C((uint64_t)&v52, (uint64_t *)a2, v11);
  v13 = v12;
  v14 = *((_QWORD *)a1 + 1);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v3 = v12;
      if (v12 >= v14)
        v3 = v12 % v14;
    }
    else
    {
      v3 = (v14 - 1) & v12;
    }
    v17 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
      v18 = (unsigned __int8 *)*v17;
      if (*v17)
      {
        v19 = v5[23];
        v20 = v19;
        v21 = v19 & 0x7F;
        if (v20 >= 0)
          v22 = v21;
        else
          v22 = *((_QWORD *)v5 + 1);
        if (v20 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v23 = *((_QWORD *)v18 + 1);
          if (v23 == v13)
          {
            v24 = v18[39];
            v25 = v24 & 0x7F;
            if (v24 >= 0)
              v26 = v24 & 0x7F;
            else
              v26 = *((_QWORD *)v18 + 3);
            if (v26 == v22)
            {
              if ((v18[39] & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v18 + 2), v5, *((_QWORD *)v18 + 3)))
                  return v18;
              }
              else
              {
                if ((v24 & 0x7F) == 0)
                  return v18;
                v27 = 0;
                while (v18[v27 + 16] == v5[v27])
                {
                  if (v25 == ++v27)
                    return v18;
                }
              }
            }
          }
          else
          {
            if (v16 > 1)
            {
              if (v23 >= v14)
                v23 %= v14;
            }
            else
            {
              v23 &= v14 - 1;
            }
            if (v23 != v3)
              break;
          }
          v18 = *(unsigned __int8 **)v18;
        }
        while (v18);
      }
    }
  }
  v18 = (unsigned __int8 *)operator new(0x30uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v13;
  v28 = *a3;
  v29 = **a3;
  *((_QWORD *)v18 + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)v18 + 1) = v29;
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v18 + 5) = 0;
  v30 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v31 = a1[8];
  if (!v14 || (float)(v31 * (float)v14) < v30)
  {
    v32 = 1;
    if (v14 >= 3)
      v32 = (v14 & (v14 - 1)) != 0;
    v33 = v32 | (2 * v14);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = (int8x8_t)v34;
    else
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_51;
    if (*(_QWORD *)&prime < v14)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v14 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (*(_QWORD *)&prime <= v42)
        prime = (int8x8_t)v42;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v36 = operator new(8 * *(_QWORD *)&prime);
          v37 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v38++) = 0;
          while (*(_QWORD *)&prime != v38);
          v39 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v39)
          {
            v40 = v39[1];
            v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(_QWORD *)&prime)
                v40 %= *(_QWORD *)&prime;
            }
            else
            {
              v40 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = a1 + 4;
            v45 = (_QWORD *)*v39;
            if (*v39)
            {
              do
              {
                v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(_QWORD *)&prime)
                    v46 %= *(_QWORD *)&prime;
                }
                else
                {
                  v46 &= *(_QWORD *)&prime - 1;
                }
                if (v46 != v40)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v39;
                    goto LABEL_76;
                  }
                  *v39 = *v45;
                  *v45 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v46);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v46) = v45;
                  v45 = v39;
                }
                v46 = v40;
LABEL_76:
                v39 = v45;
                v45 = (_QWORD *)*v45;
                v40 = v46;
              }
              while (v45);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_80;
        }
        v51 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v51)
          operator delete(v51);
        v14 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_80:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v3 = v13 % v14;
      else
        v3 = v13;
    }
    else
    {
      v3 = (v14 - 1) & v13;
    }
  }
  v47 = *(_QWORD **)a1;
  v48 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v48)
  {
    *(_QWORD *)v18 = *v48;
LABEL_93:
    *v48 = v18;
    goto LABEL_94;
  }
  *(_QWORD *)v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v18;
  v47[v3] = a1 + 4;
  if (*(_QWORD *)v18)
  {
    v49 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v49 >= v14)
        v49 %= v14;
    }
    else
    {
      v49 &= v14 - 1;
    }
    v48 = (_QWORD *)(*(_QWORD *)a1 + 8 * v49);
    goto LABEL_93;
  }
LABEL_94:
  ++*((_QWORD *)a1 + 3);
  return v18;
}

uint64_t sub_1C59EFE2C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = a2;
  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 16);
    if (v2)
    {
      v3 = v2 - 1;
      v4 = v3 & (37 * a2);
      v5 = *(_QWORD *)(*(_QWORD *)a1 + 16 * v4);
      if (v5 == a2)
      {
        return sub_1C54BFAD4(a1, &v9)[1];
      }
      else
      {
        v7 = 1;
        while (v5 != -1)
        {
          v8 = v4 + v7++;
          v4 = v8 & v3;
          v5 = *(_QWORD *)(*(_QWORD *)a1 + 16 * (v8 & v3));
          if (v5 == a2)
            return sub_1C54BFAD4(a1, &v9)[1];
        }
      }
    }
  }
  return a2;
}

void sub_1C59EFEB4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  void **v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t Relocation;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  const llvm::object::MachOObjectFile *v46;
  uint64_t DyldInfoBindOpcodes;
  uint64_t v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  const llvm::object::MachOObjectFile *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  _QWORD *v109;
  int v110;
  BOOL v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  void *v119;
  unsigned int v120;
  uint64_t v121;
  char v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  void *__p;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BYTE v160[32];
  __int128 v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v15 = sub_1C59EFE2C(*(_QWORD *)(a5 + 80), a8);
  v132 = a6;
  v133 = a7;
  *a6 = 0;
  v131 = v15;
  *a7 = v15;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 264))(a4, a3);
  v18 = v17;
  v134 = a3;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 272))(a4, a3);
  *(_QWORD *)&v168 = v16;
  *((_QWORD *)&v168 + 1) = v18;
  v20 = a2;
  if (v16 == v19)
    goto LABEL_2;
  v30 = v19;
  while (1)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)&v168 + 1) + 296))(*((_QWORD *)&v168 + 1), v16) == v20)
    {
      Relocation = llvm::object::MachOObjectFile::getRelocation(*(_QWORD *)a5, v168);
      v32 = Relocation;
      if (*(_DWORD *)(*(_QWORD *)a5 + 52) == 16777223 || (Relocation & 0x80000000) == 0)
        break;
    }
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v168 + 1) + 288))(*((_QWORD *)&v168 + 1), &v168);
    v16 = v168;
    if ((_QWORD)v168 == v30)
      goto LABEL_2;
  }
  v33 = HIDWORD(Relocation);
  v34 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  v35 = v34 > 0x13;
  v36 = (1 << v34) & 0xAAC00;
  v37 = v35 || v36 == 0;
  v38 = BYTE4(Relocation) & 0x10;
  if (v37)
    v38 = (HIDWORD(Relocation) >> 27) & 1;
  if (!v38)
    goto LABEL_2;
  v40 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v168 + 1) + 304))(*((_QWORD *)&v168 + 1), v168);
  v41 = v39;
  v42 = *(_QWORD *)a5;
  if (*(_DWORD *)(*(_QWORD *)a5 + 52) == 16777228 && (*(_DWORD *)(v42 + 56) & 0xFFFFFF) == 2)
  {
    if ((v32 & 0x80000000) != 0)
    {
      v43 = HIBYTE(v32) & 0xF;
    }
    else
    {
      v120 = *(_DWORD *)(v42 + 8);
      if (v120 <= 0x13 && ((1 << v120) & 0xAAC00) != 0)
        v43 = v33 & 0xF;
      else
        v43 = v33 >> 28;
    }
    if (v43 == 11)
    {
      *a7 = v131;
      if ((v131 & 0x80000000) != 0)
        *a7 = v131 | 0xFFFFFFFF00000000;
    }
  }
  llvm::object::ObjectFile::getSymbolValue(v39, v40, (uint64_t)&v153);
  if ((BYTE8(v153) & 1) != 0)
  {
    v121 = v153;
LABEL_145:
    v122 = *(_BYTE *)(a1 + 8) | 1;
    goto LABEL_146;
  }
  *v132 = v153;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v41 + 72))(&v168, v41, v40);
  if ((v169 & 1) != 0)
  {
    v121 = v168;
    goto LABEL_145;
  }
  if (*((_QWORD *)&v168 + 1))
  {
    v121 = v168;
    v122 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_146:
    *(_BYTE *)(a1 + 8) = v122;
    *(_QWORD *)a1 = v121;
    return;
  }
LABEL_2:
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 144))(a4, v134);
  v22 = *(uint64_t **)(a5 + 64);
  if (!v22)
  {
    v127 = (void *)v21;
    v44 = operator new();
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v44 + 8) = 0;
    *(_DWORD *)(v44 + 16) = 0;
    v45 = *(_QWORD **)(a5 + 64);
    *(_QWORD *)(a5 + 64) = v44;
    if (v45)
    {
      MEMORY[0x1CAA32FB4](*v45, 8);
      MEMORY[0x1CAA32FC0](v45, 0x1020C405AF6BDC9);
    }
    v152 = 0;
    v46 = *(const llvm::object::MachOObjectFile **)a5;
    DyldInfoBindOpcodes = llvm::object::MachOObjectFile::getDyldInfoBindOpcodes(*(llvm::object::MachOObjectFile **)a5);
    llvm::object::MachOObjectFile::bindTable((uint64_t)&v152, v46, DyldInfoBindOpcodes, v48, (*((_DWORD *)v46 + 2) & 0xFFFFFFFE) == 18, 0, (uint64_t)&v168);
    v155 = v170;
    v156 = v171;
    v157 = v172;
    v158 = v173;
    v153 = v168;
    v154 = v169;
    *(_OWORD *)&v160[16] = v176;
    v161 = v177;
    v159 = v174;
    *(_OWORD *)v160 = v175;
    v49 = v179;
    v162 = v178;
    v163 = 0;
    v164 = 0;
    v165 = 0;
    sub_1C59EE2C0(&v163, v179, v180, (v180 - (uint64_t)v179) >> 5);
    v166 = v181;
    v167 = v182;
    v138 = v185;
    v139 = v186;
    v140 = v187;
    v141 = v188;
    v136 = v183;
    v137 = v184;
    v144 = v191;
    v145 = v192;
    v142 = v189;
    v143 = v190;
    v50 = v194;
    v146 = v193;
    __p = 0;
    v148 = 0;
    v149 = 0;
    sub_1C59EE2C0(&__p, v194, v195, (v195 - (uint64_t)v194) >> 5);
    v150 = v196;
    v151 = v197;
    v51 = *((_QWORD *)&v143 + 1);
    v52 = v144;
    v53 = v141;
    while (*(_OWORD *)&v160[8] != __PAIR128__(v52, v51) || v158 != v53)
    {
      *(_BYTE *)(a5 + 61) = BYTE9(v161);
      v135 = 0;
      v54 = *(uint64_t **)(*((_QWORD *)&v153 + 1) + 264);
      v55 = *v54;
      v56 = *((_DWORD *)v54 + 2);
      if (v56)
      {
        v57 = v55 + 88 * v56;
        v58 = 88 * v56;
        while (1)
        {
          if (*(_DWORD *)(v55 + 80) == DWORD2(v154))
          {
            v59 = *(_QWORD *)(v55 + 64);
            if (v59 <= (unint64_t)v154 && *(_QWORD *)(v55 + 8) + v59 > (unint64_t)v154)
              break;
          }
          v55 += 88;
          v58 -= 88;
          if (!v58)
          {
            v55 = v57;
            break;
          }
        }
      }
      v135 = *(_QWORD *)(v55 + 72) + v154;
      v60 = *((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v129 = (void *)v20;
        v61 = a4;
        v62 = v50;
        v63 = v49;
        v64 = a1;
        v65 = v155;
        v66 = sub_1C61D0EF8(*(uint64_t **)(a5 + 64), &v135);
        v66[1] = v65;
        v66[2] = v60;
        a1 = v64;
        v49 = v63;
        v50 = v62;
        a4 = v61;
        v20 = (unint64_t)v129;
      }
      llvm::object::MachORebaseBindEntry::moveNext((llvm::object::MachORebaseBindEntry *)&v153);
    }
    if (__p)
      operator delete(__p);
    if (v163)
    {
      v164 = v163;
      operator delete(v163);
    }
    if (v50)
      operator delete(v50);
    if (v49)
      operator delete(v49);
    v29 = v152;
    if (v152)
    {
      v67 = *(_BYTE *)(a1 + 8) | 1;
      goto LABEL_163;
    }
    v22 = *(uint64_t **)(a5 + 64);
    v21 = (uint64_t)v127;
  }
  v23 = *((_DWORD *)v22 + 4);
  if (v23)
  {
    v24 = *v22;
    v25 = v23 - 1;
    v26 = v25 & (37 * (v21 + v20));
    v27 = (void **)(v24 + 24 * v26);
    v28 = *v27;
    if (*v27 == (void *)(v21 + v20))
    {
LABEL_5:
      if (v27[2])
        v29 = v27[1];
      else
        v29 = 0;
      goto LABEL_56;
    }
    v68 = 1;
    while (v28 != (void *)-1)
    {
      v69 = v26 + v68++;
      v26 = v69 & v25;
      v27 = (void **)(v24 + 24 * v26);
      v28 = *v27;
      if (*v27 == (void *)(v21 + v20))
        goto LABEL_5;
    }
  }
  v29 = 0;
LABEL_56:
  if (!*(_BYTE *)(a5 + 61))
    goto LABEL_153;
  v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 144))(a4, v134);
  v71 = *(uint64_t **)(a5 + 72);
  if (v71)
    goto LABEL_58;
  v126 = v70;
  v78 = operator new();
  *(_QWORD *)v78 = 0;
  *(_QWORD *)(v78 + 8) = 0;
  *(_DWORD *)(v78 + 16) = 0;
  v79 = *(_QWORD **)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v78;
  if (v79)
  {
    MEMORY[0x1CAA32FB4](*v79, 8);
    MEMORY[0x1CAA32FC0](v79, 0x1020C405AF6BDC9);
  }
  v152 = 0;
  v80 = *(const llvm::object::MachOObjectFile **)a5;
  v81 = llvm::object::MachOObjectFile::getDyldInfoBindOpcodes(*(llvm::object::MachOObjectFile **)a5);
  llvm::object::MachOObjectFile::bindTable((uint64_t)&v152, v80, v81, v82, (*((_DWORD *)v80 + 2) & 0xFFFFFFFE) == 18, 0, (uint64_t)&v168);
  v155 = v170;
  v156 = v171;
  v157 = v172;
  v158 = v173;
  v153 = v168;
  v154 = v169;
  *(_OWORD *)&v160[16] = v176;
  v161 = v177;
  v159 = v174;
  *(_OWORD *)v160 = v175;
  v162 = v178;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v130 = v179;
  sub_1C59EE2C0(&v163, v179, v180, (v180 - (uint64_t)v179) >> 5);
  v166 = v181;
  v167 = v182;
  v138 = v185;
  v139 = v186;
  v140 = v187;
  v141 = v188;
  v136 = v183;
  v137 = v184;
  v144 = v191;
  v145 = v192;
  v142 = v189;
  v143 = v190;
  v146 = v193;
  __p = 0;
  v148 = 0;
  v149 = 0;
  v128 = v194;
  sub_1C59EE2C0(&__p, v194, v195, (v195 - (uint64_t)v194) >> 5);
  v150 = v196;
  v151 = v197;
  v83 = *((_QWORD *)&v143 + 1);
  v84 = v141;
  while (*(_QWORD *)&v160[8] != v83 || *(_QWORD *)&v160[16] != (_QWORD)v144 || v158 != v84)
  {
    v86 = *(uint64_t **)(*((_QWORD *)&v153 + 1) + 264);
    v87 = *v86;
    v88 = *((_DWORD *)v86 + 2);
    if (v88)
    {
      v89 = v87 + 88 * v88;
      v90 = 88 * v88;
      while (1)
      {
        if (*(_DWORD *)(v87 + 80) == DWORD2(v154))
        {
          v91 = *(_QWORD *)(v87 + 64);
          if (v91 <= (unint64_t)v154 && *(_QWORD *)(v87 + 8) + v91 > (unint64_t)v154)
            break;
        }
        v87 += 88;
        v90 -= 88;
        if (!v90)
        {
          v87 = v89;
          break;
        }
      }
    }
    v92 = *(_QWORD *)(v87 + 72) + v154;
    v93 = *((_QWORD *)&v156 + 1);
    v94 = *(_QWORD *)(a5 + 72);
    v95 = *(_DWORD *)(v94 + 16);
    if (v95)
    {
      v96 = v95 - 1;
      v97 = (v95 - 1) & (37 * v92);
      v98 = (_QWORD *)(*(_QWORD *)v94 + 16 * v97);
      v99 = *v98;
      if (v92 == *v98)
        goto LABEL_94;
      v100 = 0;
      v101 = 1;
      while (v99 != -1)
      {
        if (v100)
          v102 = 0;
        else
          v102 = v99 == -2;
        if (v102)
          v100 = v98;
        v103 = v97 + v101++;
        v97 = v103 & v96;
        v98 = (_QWORD *)(*(_QWORD *)v94 + 16 * (v103 & v96));
        v99 = *v98;
        if (v92 == *v98)
          goto LABEL_94;
      }
      if (v100)
        v98 = v100;
    }
    else
    {
      v98 = 0;
    }
    v104 = *(_DWORD *)(v94 + 8);
    if (4 * v104 + 4 >= 3 * v95)
    {
      sub_1C59F0ABC(*(_QWORD *)(a5 + 72), 2 * v95);
      v106 = *(_DWORD *)(v94 + 16) - 1;
      v107 = v106 & (37 * v92);
      v98 = (_QWORD *)(*(_QWORD *)v94 + 16 * v107);
      v108 = *v98;
      if (v92 == *v98)
        goto LABEL_109;
      v109 = 0;
      v110 = 1;
      while (v108 != -1)
      {
        if (v109)
          v111 = 0;
        else
          v111 = v108 == -2;
        if (v111)
          v109 = v98;
        v112 = v107 + v110++;
        v107 = v112 & v106;
        v98 = (_QWORD *)(*(_QWORD *)v94 + 16 * (v112 & v106));
        v108 = *v98;
        if (v92 == *v98)
          goto LABEL_109;
      }
LABEL_119:
      if (v109)
        v98 = v109;
      goto LABEL_90;
    }
    if (v95 + ~v104 - *(_DWORD *)(v94 + 12) <= v95 >> 3)
    {
      sub_1C59F0ABC(*(_QWORD *)(a5 + 72), v95);
      v113 = *(_DWORD *)(v94 + 16) - 1;
      v114 = v113 & (37 * v92);
      v98 = (_QWORD *)(*(_QWORD *)v94 + 16 * v114);
      v115 = *v98;
      if (v92 == *v98)
      {
LABEL_109:
        v105 = v92;
        goto LABEL_91;
      }
      v109 = 0;
      v116 = 1;
      while (v115 != -1)
      {
        if (v109)
          v117 = 0;
        else
          v117 = v115 == -2;
        if (v117)
          v109 = v98;
        v118 = v114 + v116++;
        v114 = v118 & v113;
        v98 = (_QWORD *)(*(_QWORD *)v94 + 16 * (v118 & v113));
        v115 = *v98;
        if (v92 == *v98)
          goto LABEL_109;
      }
      goto LABEL_119;
    }
LABEL_90:
    v105 = *v98;
LABEL_91:
    ++*(_DWORD *)(v94 + 8);
    if (v105 != -1)
      --*(_DWORD *)(v94 + 12);
    *v98 = v92;
    v98[1] = 0;
LABEL_94:
    v98[1] = v93;
    llvm::object::MachORebaseBindEntry::moveNext((llvm::object::MachORebaseBindEntry *)&v153);
  }
  if (__p)
    operator delete(__p);
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v128)
    operator delete(v128);
  if (v130)
    operator delete(v130);
  v119 = v152;
  if (v152)
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    v29 = v119;
    goto LABEL_164;
  }
  v71 = *(uint64_t **)(a5 + 72);
  v70 = v126;
LABEL_58:
  v72 = *((_DWORD *)v71 + 4);
  if (v72)
  {
    v73 = *v71;
    v74 = v72 - 1;
    v75 = (v72 - 1) & (37 * (v70 + v20));
    v76 = *(void **)(v73 + 16 * v75);
    if (v76 == (void *)(v70 + v20))
    {
LABEL_60:
      v77 = *(_QWORD *)(v73 + 16 * v75 + 8);
      goto LABEL_152;
    }
    v123 = 1;
    while (v76 != (void *)-1)
    {
      v124 = v75 + v123++;
      v75 = v124 & v74;
      v76 = *(void **)(v73 + 16 * v75);
      if (v76 == (void *)(v70 + v20))
        goto LABEL_60;
    }
  }
  v77 = 0;
LABEL_152:
  *v133 = v77;
LABEL_153:
  if (!v29)
  {
    if (*(_BYTE *)(a5 + 61))
    {
      if (*(_DWORD *)(*(_QWORD *)a5 + 52) == 16777228
        && (*(_DWORD *)(*(_QWORD *)a5 + 56) & 0xFFFFFF) == 2
        && v131 < 0)
      {
        v125 = 0xFFFFFFFFLL;
      }
      else
      {
        v125 = 0x7FFFFFFFFFFFFLL;
      }
      *v132 = v125 & v131;
      *v133 = 0;
    }
    v29 = 0;
  }
  v67 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_163:
  *(_BYTE *)(a1 + 8) = v67;
LABEL_164:
  *(_QWORD *)a1 = v29;
}

_QWORD *sub_1C59F0ABC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = (37 * v16) & v14;
          v18 = &result[2 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[2 * (v23 & v14)];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_12;
            }
            if (v20)
              v18 = v20;
          }
LABEL_12:
          *v18 = v16;
          v18[1] = v15[1];
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -1;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C59F0C34(unint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, int a6)
{
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t *v20;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  a4[1] = 0;
  v6 = a5[1];
  if (a5[2] != v6)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 16 * v9 + 8) + 144))(*(_QWORD *)(v6 + 16 * v9 + 8), *(_QWORD *)(v6 + 16 * v9));
      v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a5[1] + 16 * v9 + 8) + 160))(*(_QWORD *)(a5[1] + 16 * v9 + 8), *(_QWORD *)(a5[1] + 16 * v9));
      v6 = a5[1];
      if (v12)
      {
        v13 = v12;
        if (!a6)
          goto LABEL_18;
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v6 + 16 * v9 + 8) + 136))(v27, *(_QWORD *)(v6 + 16 * v9 + 8), *(_QWORD *)(v6 + 16 * v9));
        if ((v28 & 1) != 0)
        {
          v26 = v27[0];
          v27[0] = 0;
          v20 = &v26;
          goto LABEL_28;
        }
        if ((v6 = a5[1],
              v14 = *(_QWORD *)(*(_QWORD *)(*a5 + 80) + 8 * *(unsigned int *)(v6 + 16 * v9)),
              !*(_BYTE *)(v14 + 31))
          && (v15 = v14 + 16, strlen((const char *)(v14 + 16)) == 6)
          && (*(_DWORD *)v15 == 1112498015 ? (v16 = *(unsigned __int16 *)(v15 + 4) == 17226) : (v16 = 0), v16)
          || v27[1] == 9
          && (*(_QWORD *)v27[0] == 0x6E69727473635F5FLL ? (v17 = *(_BYTE *)(v27[0] + 8) == 103) : (v17 = 0), v17))
        {
LABEL_18:
          if (a1 >= v11 && v13 + v11 > a1)
          {
            *(_OWORD *)a4 = *(_OWORD *)(v6 + 16 * v9);
            *a2 = a1 - v11;
            *a3 = v13 - (a1 - v11);
            (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a5[1] + 16 * v9 + 8) + 168))(v27, *(_QWORD *)(a5[1] + 16 * v9 + 8), *(_QWORD *)(a5[1] + 16 * v9));
            if ((v28 & 1) == 0)
              return v27[0] + *a2;
            v25 = v27[0];
            v20 = &v25;
LABEL_28:
            llvm::report_fatal_error(v20);
          }
        }
      }
      v9 = v10++;
    }
    while (v9 != (a5[2] - v6) >> 4);
  }
  return 0;
}

void sub_1C59F0E5C(uint64_t *a1, unint64_t a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  size_t v24;
  std::string *v25;
  std::string::value_type *v26;
  std::string::size_type v27;
  char v28;
  uint64_t v29;
  int64x2_t *v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  uint64_t v50;
  std::string::size_type v51;
  size_t v52;
  std::string *v53;
  std::string::value_type *v54;
  int64x2_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  int64x2_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  std::string::size_type size;
  uint64_t v70;
  const char *v71;
  size_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  const std::string::value_type *v90;
  signed int v91;
  unsigned int v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  unsigned int v96;
  signed int v97;
  uint64_t *v98;
  uint64_t v99;
  const char *v100;
  size_t v101;
  std::string *v102;
  std::string::value_type *v103;
  std::string *v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  std::string::size_type v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  int64x2_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  __int128 v126;
  const char *v127;
  size_t v128;
  std::string *v129;
  std::string::value_type *v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  std::string::size_type v138;
  std::string *v139;
  unint64_t v140;
  const char *v141;
  size_t v142;
  std::string *v143;
  std::string::value_type *v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  std::string::size_type v148;
  std::string *v149;
  std::string::size_type v150;
  char v151;
  unint64_t v152;
  unint64_t v153;
  int64x2_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  std::string::size_type v161;
  char *v162;
  __int128 v163;
  const char *v164;
  size_t v165;
  std::string *v166;
  std::string::value_type *v167;
  std::string *v168;
  std::string::size_type v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  __int128 v178;
  int64x2_t v179;
  int v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  std::string::size_type v185;
  __int128 v186;
  int64x2_t v187;
  const char *v188;
  uint64_t v189;
  char v190;
  std::string *v191;
  std::string::size_type v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::string::size_type v199;
  std::string::size_type v200;
  uint64_t v201;
  const char *v202;
  size_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unint64_t v208;
  int v209;
  unint64_t *v210;
  unsigned int v211;
  int v212;
  BOOL v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  const std::string::value_type *v218;
  const char *v219;
  size_t v220;
  _BYTE *v221;
  _BYTE *v222;
  std::string *v223;
  std::string::size_type v224;
  std::string *v225;
  std::string::size_type v226;
  char v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int64x2_t *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  std::string::size_type v238;
  char *v239;
  __int128 v240;
  int64x2_t v241;
  const char *v242;
  uint64_t v243;
  std::string::size_type v244;
  uint64_t v245;
  std::string::size_type v246;
  uint64_t *p_p_p;
  std::string::size_type v248;
  int64x2_t *v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int64x2_t *v256;
  uint64_t v257;
  int v258;
  int v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unint64_t v263;
  uint64_t *v264;
  std::string::size_type v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD v268[2];
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  uint64_t v274;
  std::string __p;
  __int16 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  _QWORD v284[2];
  uint64_t v285;
  char v286;
  std::string::size_type v287;
  char v288;
  uint64_t v289[2];
  std::string v290;
  size_t v291;
  __int16 v292;
  std::string v293;
  __int16 v294;
  _BYTE v295[32];
  __int16 v296;
  std::string v297;
  std::string *p_p;
  int64x2_t v299;
  unint64_t v300;
  uint64_t *v301;
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  v273 = 0;
  v271 = 0;
  v269 = 0;
  v270 = 0;
  v268[0] = 0;
  v268[1] = 0;
  v7 = sub_1C59F0C34(a2, &v273, &v271, &v269, (_QWORD *)a3, 0);
  if (!v7 || v271 <= 0x47)
  {
    v46 = v269;
    v45 = v270;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v270 + 136))(&v297, v270, v269);
    if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
    {
      v246 = v297.__r_.__value_.__r.__words[0];
      v297.__r_.__value_.__r.__words[0] = 0;
      v265 = v246;
      p_p_p = (uint64_t *)&v265;
      goto LABEL_312;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v46);
    v48 = (const char *)(v47 + 16);
    if (*(_BYTE *)(v47 + 31))
      v49 = 16;
    else
      v49 = strlen(v48);
    v292 = 1283;
    v290.__r_.__value_.__r.__words[0] = (std::string::size_type)"class_ro64_t struct extends past end of (";
    v290.__r_.__value_.__r.__words[2] = (std::string::size_type)v48;
    v291 = v49;
    v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
    v293.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
    v294 = 770;
    *(_QWORD *)v295 = &v293;
    *(_OWORD *)&v295[16] = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
    v296 = 1282;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v295;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
    v276 = 770;
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 144))(v45, v46);
    v280 = v50 + v273;
    p_p = &__p;
    v299.i64[1] = (uint64_t)&v280;
    LOWORD(v301) = 3586;
    sub_1C59D7FE0(a1, (uint64_t *)&p_p);
    if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
    {
      v51 = v297.__r_.__value_.__r.__words[0];
      v297.__r_.__value_.__r.__words[0] = 0;
      if (v51)
        goto LABEL_303;
    }
    return;
  }
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  v77 = v9 > 0x13;
  v10 = (1 << v9) & 0xAAC00;
  v11 = v77 || v10 == 0;
  v12 = bswap32(v8);
  v13 = bswap64(*(_QWORD *)(v7 + 24));
  v14 = bswap64(*(_QWORD *)(v7 + 32));
  v15 = bswap64(*(_QWORD *)(v7 + 48));
  if (v11)
    v16 = *(_QWORD *)(v7 + 24);
  else
    v16 = v13;
  if (v11)
  {
    v17 = *(_QWORD *)(v7 + 32);
  }
  else
  {
    LOBYTE(v8) = v12;
    v17 = v14;
  }
  if (v11)
    v18 = *(_QWORD *)(v7 + 48);
  else
    v18 = v15;
  v266 = 0;
  v267 = 0;
  *(_BYTE *)(a3 + 60) = v8 & 1;
  v19 = v273;
  v21 = v269;
  v20 = v270;
  sub_1C59EFEB4((uint64_t)&v287, v273 + 24, v269, v270, a3, &v267, &v266, v16);
  if ((v288 & 1) != 0)
  {
    *a1 = v287;
    return;
  }
  v257 = v17;
  v260 = v20;
  v262 = v19;
  v254 = v18;
  v272 = 0;
  v22 = (const char *)sub_1C59F0C34(v266 + v267, &v272, &v271, v268, (_QWORD *)a3, 0);
  v23 = v22;
  *(_QWORD *)(a3 + 40) = v22;
  v264 = a1;
  v255 = v21;
  if (*(_BYTE *)(a3 + 60))
  {
    v24 = strlen(v22);
    sub_1C484371C((uint64_t)&__p, v24 + 18);
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)"_OBJC_METACLASS_$_";
    LOWORD(v25->__r_.__value_.__r.__words[2]) = 24356;
    v26 = &v25->__r_.__value_.__s.__data_[18];
    if (v24)
      memmove((char *)&v25->__r_.__value_.__r.__words[2] + 2, v23, v24);
    v26[v24] = 0;
    *(_QWORD *)v295 = __p.__r_.__value_.__l.__size_;
    v27 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v295[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v29 = *(_QWORD *)(a3 + 32);
    v30 = a4 + 1;
    v31 = a4[1].u64[0];
    v32 = a4->u64[1];
    if (v32 >= v31)
    {
      v33 = a4;
      v34 = a4->i64[0];
      v35 = (uint64_t)(v32 - a4->i64[0]) >> 5;
      v36 = v35 + 1;
      if (!((unint64_t)(v35 + 1) >> 59))
      {
        if ((uint64_t)(v31 - v34) >> 4 > v36)
          v36 = (uint64_t)(v31 - v34) >> 4;
        if (v31 - v34 >= 0x7FFFFFFFFFFFFFE0)
          v37 = 0x7FFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        v300 = 0;
        v301 = (uint64_t *)v30;
        if (!(v37 >> 59))
        {
          v38 = (char *)operator new(32 * v37);
          v39 = &v38[32 * v35];
          v40 = *(_QWORD *)v295;
          *(_QWORD *)v39 = v27;
          *((_QWORD *)v39 + 1) = v40;
          *(_QWORD *)(v39 + 15) = *(_QWORD *)&v295[7];
          v39[23] = v28;
          *(_QWORD *)v295 = 0;
          *(_QWORD *)&v295[7] = 0;
          *((_QWORD *)v39 + 3) = v29;
          if (v32 != v34)
          {
            v41 = &v38[32 * v35];
            v42 = v264;
            a4 = v33;
            v43 = v260;
            do
            {
              v44 = *(_OWORD *)(v32 - 32);
              *((_QWORD *)v41 - 2) = *(_QWORD *)(v32 - 16);
              *((_OWORD *)v41 - 2) = v44;
              *(_QWORD *)(v32 - 24) = 0;
              *(_QWORD *)(v32 - 16) = 0;
              *(_QWORD *)(v32 - 32) = 0;
              *((_QWORD *)v41 - 1) = *(_QWORD *)(v32 - 8);
              v41 -= 32;
              v32 -= 32;
            }
            while (v32 != v34);
LABEL_57:
            v62 = *a4;
            v31 = a4[1].u64[0];
            v21 = v255;
LABEL_59:
            v56 = (unint64_t)(v39 + 32);
            a4->i64[0] = (uint64_t)v41;
            a4->i64[1] = (uint64_t)(v39 + 32);
            v299 = v62;
            a4[1].i64[0] = (uint64_t)&v38[32 * v37];
            v300 = v31;
            p_p = (std::string *)v62.i64[0];
            sub_1C5465AA0((uint64_t)&p_p);
            goto LABEL_60;
          }
          goto LABEL_58;
        }
        goto LABEL_314;
      }
      goto LABEL_313;
    }
  }
  else
  {
    v52 = strlen(v22);
    sub_1C484371C((uint64_t)&__p, v52 + 14);
    v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__p;
    qmemcpy(v53, "_OBJC_CLASS_$_", 14);
    v54 = &v53->__r_.__value_.__s.__data_[14];
    if (v52)
      memmove((char *)&v53->__r_.__value_.__r.__words[1] + 6, v23, v52);
    v54[v52] = 0;
    *(_QWORD *)v295 = __p.__r_.__value_.__l.__size_;
    v27 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v295[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v29 = *(_QWORD *)(a3 + 32);
    v55 = a4 + 1;
    v31 = a4[1].u64[0];
    v32 = a4->u64[1];
    if (v32 >= v31)
    {
      v33 = a4;
      v57 = a4->i64[0];
      v58 = (uint64_t)(v32 - a4->i64[0]) >> 5;
      v59 = v58 + 1;
      if (!((unint64_t)(v58 + 1) >> 59))
      {
        if ((uint64_t)(v31 - v57) >> 4 > v59)
          v59 = (uint64_t)(v31 - v57) >> 4;
        if (v31 - v57 >= 0x7FFFFFFFFFFFFFE0)
          v37 = 0x7FFFFFFFFFFFFFFLL;
        else
          v37 = v59;
        v300 = 0;
        v301 = (uint64_t *)v55;
        if (!(v37 >> 59))
        {
          v38 = (char *)operator new(32 * v37);
          v39 = &v38[32 * v58];
          v60 = *(_QWORD *)v295;
          *(_QWORD *)v39 = v27;
          *((_QWORD *)v39 + 1) = v60;
          *(_QWORD *)(v39 + 15) = *(_QWORD *)&v295[7];
          v39[23] = v28;
          *(_QWORD *)v295 = 0;
          *(_QWORD *)&v295[7] = 0;
          *((_QWORD *)v39 + 3) = v29;
          if (v32 != v57)
          {
            v41 = &v38[32 * v58];
            v42 = v264;
            a4 = v33;
            v43 = v260;
            do
            {
              v61 = *(_OWORD *)(v32 - 32);
              *((_QWORD *)v41 - 2) = *(_QWORD *)(v32 - 16);
              *((_OWORD *)v41 - 2) = v61;
              *(_QWORD *)(v32 - 24) = 0;
              *(_QWORD *)(v32 - 16) = 0;
              *(_QWORD *)(v32 - 32) = 0;
              *((_QWORD *)v41 - 1) = *(_QWORD *)(v32 - 8);
              v41 -= 32;
              v32 -= 32;
            }
            while (v32 != v57);
            goto LABEL_57;
          }
LABEL_58:
          v62 = vdupq_n_s64(v32);
          v41 = v39;
          v42 = v264;
          a4 = v33;
          v21 = v255;
          v43 = v260;
          goto LABEL_59;
        }
LABEL_314:
        sub_1C4764EE4();
      }
LABEL_313:
      abort();
    }
  }
  *(_QWORD *)v32 = v27;
  *(_QWORD *)(v32 + 8) = *(_QWORD *)v295;
  *(_QWORD *)(v32 + 15) = *(_QWORD *)&v295[7];
  *(_BYTE *)(v32 + 23) = v28;
  *(_QWORD *)(v32 + 24) = v29;
  v56 = v32 + 32;
  v42 = v264;
  v43 = v260;
LABEL_60:
  v63 = v262;
  a4->i64[1] = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1C59EFEB4((uint64_t)&v285, v262 + 32, v21, v43, a3, &v267, &v266, v257);
  if ((v286 & 1) != 0)
  {
    *v42 = v285;
    goto LABEL_301;
  }
  v64 = v266 + v267;
  if (!(v266 + v267))
    goto LABEL_228;
  v283 = 0;
  v282 = 0;
  v280 = 0;
  v281 = 0;
  v278 = 0;
  v279 = 0;
  v277 = 0;
  v274 = 0;
  v65 = (unsigned int *)sub_1C59F0C34(v266 + v267, (_DWORD *)&v283 + 1, &v282, &v280, (_QWORD *)a3, 0);
  if (!v65)
    goto LABEL_204;
  if (v282 <= 7)
  {
    v67 = v280;
    v66 = v281;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v281 + 136))(&v297, v281, v280);
    if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
      goto LABEL_315;
    size = v297.__r_.__value_.__l.__size_;
    v68 = v297.__r_.__value_.__r.__words[0];
    v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v67);
    v71 = (const char *)(v70 + 16);
    if (*(_BYTE *)(v70 + 31))
      v72 = 16;
    else
      v72 = strlen(v71);
    v292 = 1283;
    v188 = "method_list64_t struct extends past end of (";
    goto LABEL_207;
  }
  v73 = v65[1];
  v74 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  v75 = bswap32(*v65);
  v76 = bswap32(v73);
  if (((1 << v74) & 0xAAC00) == 0)
  {
    v75 = *v65;
    v76 = v65[1];
  }
  v77 = v74 > 0x13;
  if (v74 <= 0x13)
    v78 = v75;
  else
    v78 = *v65;
  if (!v77)
    v73 = v76;
  HIDWORD(v283) += 8;
  v250 = v73;
  v251 = v78;
  if (!v73)
  {
LABEL_204:
    *v42 = 0;
    goto LABEL_227;
  }
  v79 = 0;
  v258 = (unsigned __int16)v78;
  v80 = v64 + 8;
  v249 = a4 + 1;
  while (1)
  {
    v81 = sub_1C59F0C34(v80, (_DWORD *)&v283 + 1, &v282, &v280, (_QWORD *)a3, 0);
    if (!v81)
      goto LABEL_204;
    v253 = v79;
    if ((v251 & 0x80000000) == 0)
      break;
    if (v282 <= 0xB)
    {
      v67 = v280;
      v66 = v281;
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v281 + 136))(&v297, v281, v280);
      if ((v297.__r_.__value_.__s.__data_[16] & 1) == 0)
      {
        size = v297.__r_.__value_.__l.__size_;
        v68 = v297.__r_.__value_.__r.__words[0];
        v194 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v67);
        v71 = (const char *)(v194 + 16);
        if (*(_BYTE *)(v194 + 31))
          v72 = 16;
        else
          v72 = strlen(v71);
        v292 = 1283;
        v188 = "method_rel_t struct extends past end of (";
        goto LABEL_207;
      }
LABEL_315:
      v248 = v297.__r_.__value_.__r.__words[0];
      v297.__r_.__value_.__r.__words[0] = 0;
      p_p = (std::string *)v248;
      p_p_p = (uint64_t *)&p_p;
LABEL_312:
      llvm::report_fatal_error(p_p_p);
    }
    v91 = *(_DWORD *)v81;
    v92 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v77 = v92 > 0x13;
    v93 = (1 << v92) & 0xAAC00;
    v94 = v77 || v93 == 0;
    v95 = bswap32(v91);
    v96 = bswap32(*(_DWORD *)(v81 + 8));
    if (v94)
      v97 = *(_DWORD *)(v81 + 8);
    else
      v97 = v96;
    if (!v94)
      v91 = v95;
    v98 = (uint64_t *)sub_1C59F0C34(v80 + v91, &v283, &v282, &v278, (_QWORD *)a3, 0);
    sub_1C59EFEB4((uint64_t)&p_p, 0, v280, v281, a3, &v277, &v274, *v98);
    if ((v299.i8[0] & 1) != 0)
    {
      *v42 = (uint64_t)p_p;
      goto LABEL_227;
    }
    v90 = (const std::string::value_type *)sub_1C59F0C34(v274 + v277, &v283, &v282, &v278, (_QWORD *)a3, 0);
    v88 = v80 + v97 + 8;
    v89 = HIDWORD(v283);
LABEL_109:
    HIDWORD(v283) = v89 + v258;
    v99 = *(_QWORD *)(a3 + 48);
    v252 = v88;
    if (*(_BYTE *)(a3 + 60))
    {
      if (!v99)
      {
        v141 = *(const char **)(a3 + 40);
        v142 = strlen(v141);
        sub_1C484371C((uint64_t)&v293, v142 + 2);
        if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v143 = &v293;
        else
          v143 = (std::string *)v293.__r_.__value_.__r.__words[0];
        LOWORD(v143->__r_.__value_.__l.__data_) = 23339;
        v144 = &v143->__r_.__value_.__s.__data_[2];
        if (v142)
          memmove(v144, v141, v142);
        v144[v142] = 0;
        v145 = std::string::append(&v293, " ");
        v146 = v145->__r_.__value_.__r.__words[2];
        *(_OWORD *)v295 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
        *(_QWORD *)&v295[16] = v146;
        v145->__r_.__value_.__l.__size_ = 0;
        v145->__r_.__value_.__r.__words[2] = 0;
        v145->__r_.__value_.__r.__words[0] = 0;
        v147 = std::string::append((std::string *)v295, v90);
        v148 = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        v149 = std::string::append(&__p, "]");
        v150 = v149->__r_.__value_.__r.__words[0];
        v297.__r_.__value_.__r.__words[0] = v149->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v149->__r_.__value_.__r.__words[1] + 7);
        v151 = HIBYTE(v149->__r_.__value_.__r.__words[2]);
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        v290.__r_.__value_.__r.__words[0] = v297.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 7);
        v152 = a4->u64[1];
        v153 = a4[1].u64[0];
        if (v152 < v153)
          goto LABEL_159;
        v154 = a4;
        v155 = a4->i64[0];
        v156 = (uint64_t)(v152 - a4->i64[0]) >> 5;
        v157 = v156 + 1;
        if ((unint64_t)(v156 + 1) >> 59)
          goto LABEL_313;
        if ((uint64_t)(v153 - v155) >> 4 > v157)
          v157 = (uint64_t)(v153 - v155) >> 4;
        if (v153 - v155 >= 0x7FFFFFFFFFFFFFE0)
          v158 = 0x7FFFFFFFFFFFFFFLL;
        else
          v158 = v157;
        v300 = 0;
        v301 = (uint64_t *)v249;
        if (v158 >> 59)
          goto LABEL_314;
        v159 = (char *)operator new(32 * v158);
        v160 = &v159[32 * v156];
        v161 = v290.__r_.__value_.__r.__words[0];
        *(_QWORD *)v160 = v150;
        *((_QWORD *)v160 + 1) = v161;
        *(_QWORD *)(v160 + 15) = *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7);
        v160[23] = v151;
        v290.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7) = 0;
        *((_QWORD *)v160 + 3) = v252;
        if (v152 != v155)
        {
          v162 = &v159[32 * v156];
          a4 = v154;
          do
          {
            v163 = *(_OWORD *)(v152 - 32);
            *((_QWORD *)v162 - 2) = *(_QWORD *)(v152 - 16);
            *((_OWORD *)v162 - 2) = v163;
            *(_QWORD *)(v152 - 24) = 0;
            *(_QWORD *)(v152 - 16) = 0;
            *(_QWORD *)(v152 - 32) = 0;
            *((_QWORD *)v162 - 1) = *(_QWORD *)(v152 - 8);
            v162 -= 32;
            v152 -= 32;
          }
          while (v152 != v155);
          goto LABEL_193;
        }
        goto LABEL_194;
      }
      v100 = *(const char **)(a3 + 40);
      v101 = strlen(v100);
      sub_1C484371C((uint64_t)&v297, v101 + 2);
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &v297;
      else
        v102 = (std::string *)v297.__r_.__value_.__r.__words[0];
      LOWORD(v102->__r_.__value_.__l.__data_) = 23339;
      v103 = &v102->__r_.__value_.__s.__data_[2];
      if (v101)
        memmove(v103, v100, v101);
      v103[v101] = 0;
      v104 = std::string::append(&v297, "(");
      v105 = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v290.__r_.__value_.__l.__data_ = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v290.__r_.__value_.__r.__words[2] = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      v106 = std::string::append(&v290, *(const std::string::value_type **)(a3 + 48));
      v107 = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v293.__r_.__value_.__l.__data_ = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v293.__r_.__value_.__r.__words[2] = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      v108 = std::string::append(&v293, ") ");
      v109 = v108->__r_.__value_.__r.__words[2];
      *(_OWORD *)v295 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      *(_QWORD *)&v295[16] = v109;
      v108->__r_.__value_.__l.__size_ = 0;
      v108->__r_.__value_.__r.__words[2] = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      v110 = std::string::append((std::string *)v295, v90);
      v111 = v110->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v111;
      v110->__r_.__value_.__l.__size_ = 0;
      v110->__r_.__value_.__r.__words[2] = 0;
      v110->__r_.__value_.__r.__words[0] = 0;
      v112 = std::string::append(&__p, "]");
      v113 = v112->__r_.__value_.__r.__words[0];
      v289[0] = v112->__r_.__value_.__l.__size_;
      *(uint64_t *)((char *)v289 + 7) = *(std::string::size_type *)((char *)&v112->__r_.__value_.__r.__words[1] + 7);
      v114 = HIBYTE(v112->__r_.__value_.__r.__words[2]);
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      v284[0] = v289[0];
      *(_QWORD *)((char *)v284 + 7) = *(uint64_t *)((char *)v289 + 7);
      v289[0] = 0;
      *(uint64_t *)((char *)v289 + 7) = 0;
      v115 = a4->u64[1];
      v116 = a4[1].u64[0];
      if (v115 >= v116)
      {
        v117 = a4;
        v118 = a4->i64[0];
        v119 = (uint64_t)(v115 - a4->i64[0]) >> 5;
        v120 = v119 + 1;
        if ((unint64_t)(v119 + 1) >> 59)
          goto LABEL_313;
        if ((uint64_t)(v116 - v118) >> 4 > v120)
          v120 = (uint64_t)(v116 - v118) >> 4;
        if (v116 - v118 >= 0x7FFFFFFFFFFFFFE0)
          v121 = 0x7FFFFFFFFFFFFFFLL;
        else
          v121 = v120;
        v300 = 0;
        v301 = (uint64_t *)v249;
        if (v121 >> 59)
          goto LABEL_314;
        v122 = (char *)operator new(32 * v121);
        v123 = &v122[32 * v119];
        v124 = v284[0];
        *(_QWORD *)v123 = v113;
        *((_QWORD *)v123 + 1) = v124;
        *(_QWORD *)(v123 + 15) = *(_QWORD *)((char *)v284 + 7);
        v123[23] = v114;
        memset(v284, 0, 15);
        *((_QWORD *)v123 + 3) = v252;
        if (v115 != v118)
        {
          v125 = &v122[32 * v119];
          a4 = v117;
          do
          {
            v126 = *(_OWORD *)(v115 - 32);
            *((_QWORD *)v125 - 2) = *(_QWORD *)(v115 - 16);
            *((_OWORD *)v125 - 2) = v126;
            *(_QWORD *)(v115 - 24) = 0;
            *(_QWORD *)(v115 - 16) = 0;
            *(_QWORD *)(v115 - 32) = 0;
            *((_QWORD *)v125 - 1) = *(_QWORD *)(v115 - 8);
            v125 -= 32;
            v115 -= 32;
          }
          while (v115 != v118);
          goto LABEL_170;
        }
        goto LABEL_171;
      }
    }
    else
    {
      if (!v99)
      {
        v164 = *(const char **)(a3 + 40);
        v165 = strlen(v164);
        sub_1C484371C((uint64_t)&v293, v165 + 2);
        if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v166 = &v293;
        else
          v166 = (std::string *)v293.__r_.__value_.__r.__words[0];
        LOWORD(v166->__r_.__value_.__l.__data_) = 23341;
        v167 = &v166->__r_.__value_.__s.__data_[2];
        if (v165)
          memmove(v167, v164, v165);
        v167[v165] = 0;
        v168 = std::string::append(&v293, " ");
        v169 = v168->__r_.__value_.__r.__words[2];
        *(_OWORD *)v295 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
        *(_QWORD *)&v295[16] = v169;
        v168->__r_.__value_.__l.__size_ = 0;
        v168->__r_.__value_.__r.__words[2] = 0;
        v168->__r_.__value_.__r.__words[0] = 0;
        v170 = std::string::append((std::string *)v295, v90);
        v171 = v170->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v171;
        v170->__r_.__value_.__l.__size_ = 0;
        v170->__r_.__value_.__r.__words[2] = 0;
        v170->__r_.__value_.__r.__words[0] = 0;
        v172 = std::string::append(&__p, "]");
        v150 = v172->__r_.__value_.__r.__words[0];
        v297.__r_.__value_.__r.__words[0] = v172->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v172->__r_.__value_.__r.__words[1] + 7);
        v151 = HIBYTE(v172->__r_.__value_.__r.__words[2]);
        v172->__r_.__value_.__l.__size_ = 0;
        v172->__r_.__value_.__r.__words[2] = 0;
        v172->__r_.__value_.__r.__words[0] = 0;
        v290.__r_.__value_.__r.__words[0] = v297.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 7);
        v152 = a4->u64[1];
        v153 = a4[1].u64[0];
        if (v152 < v153)
        {
LABEL_159:
          *(_QWORD *)v152 = v150;
          *(_QWORD *)(v152 + 8) = v290.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v152 + 15) = *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7);
          *(_BYTE *)(v152 + 23) = v151;
          *(_QWORD *)(v152 + 24) = v252;
          v173 = v152 + 32;
          v42 = v264;
LABEL_196:
          v63 = v262;
          v180 = v253;
          a4->i64[1] = v173;
          v43 = v260;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v295[23] & 0x80000000) != 0)
            operator delete(*(void **)v295);
          if ((SHIBYTE(v293.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_203;
          v181 = (void *)v293.__r_.__value_.__r.__words[0];
          goto LABEL_202;
        }
        v154 = a4;
        v182 = a4->i64[0];
        v183 = (uint64_t)(v152 - a4->i64[0]) >> 5;
        v184 = v183 + 1;
        if ((unint64_t)(v183 + 1) >> 59)
          goto LABEL_313;
        if ((uint64_t)(v153 - v182) >> 4 > v184)
          v184 = (uint64_t)(v153 - v182) >> 4;
        if (v153 - v182 >= 0x7FFFFFFFFFFFFFE0)
          v158 = 0x7FFFFFFFFFFFFFFLL;
        else
          v158 = v184;
        v300 = 0;
        v301 = (uint64_t *)v249;
        if (v158 >> 59)
          goto LABEL_314;
        v159 = (char *)operator new(32 * v158);
        v160 = &v159[32 * v183];
        v185 = v290.__r_.__value_.__r.__words[0];
        *(_QWORD *)v160 = v150;
        *((_QWORD *)v160 + 1) = v185;
        *(_QWORD *)(v160 + 15) = *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7);
        v160[23] = v151;
        v290.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7) = 0;
        *((_QWORD *)v160 + 3) = v252;
        if (v152 != v182)
        {
          v162 = &v159[32 * v183];
          a4 = v154;
          do
          {
            v186 = *(_OWORD *)(v152 - 32);
            *((_QWORD *)v162 - 2) = *(_QWORD *)(v152 - 16);
            *((_OWORD *)v162 - 2) = v186;
            *(_QWORD *)(v152 - 24) = 0;
            *(_QWORD *)(v152 - 16) = 0;
            *(_QWORD *)(v152 - 32) = 0;
            *((_QWORD *)v162 - 1) = *(_QWORD *)(v152 - 8);
            v162 -= 32;
            v152 -= 32;
          }
          while (v152 != v182);
LABEL_193:
          v187 = *a4;
          v153 = a4[1].u64[0];
LABEL_195:
          v173 = (unint64_t)(v160 + 32);
          a4->i64[0] = (uint64_t)v162;
          a4->i64[1] = (uint64_t)(v160 + 32);
          v299 = v187;
          a4[1].i64[0] = (uint64_t)&v159[32 * v158];
          v300 = v153;
          p_p = (std::string *)v187.i64[0];
          sub_1C5465AA0((uint64_t)&p_p);
          v42 = v264;
          goto LABEL_196;
        }
LABEL_194:
        v187 = vdupq_n_s64(v152);
        v162 = v160;
        a4 = v154;
        goto LABEL_195;
      }
      v127 = *(const char **)(a3 + 40);
      v128 = strlen(v127);
      sub_1C484371C((uint64_t)&v297, v128 + 2);
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = &v297;
      else
        v129 = (std::string *)v297.__r_.__value_.__r.__words[0];
      LOWORD(v129->__r_.__value_.__l.__data_) = 23341;
      v130 = &v129->__r_.__value_.__s.__data_[2];
      if (v128)
        memmove(v130, v127, v128);
      v130[v128] = 0;
      v131 = std::string::append(&v297, "(");
      v132 = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v290.__r_.__value_.__l.__data_ = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v290.__r_.__value_.__r.__words[2] = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      v133 = std::string::append(&v290, *(const std::string::value_type **)(a3 + 48));
      v134 = v133->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v293.__r_.__value_.__l.__data_ = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      v293.__r_.__value_.__r.__words[2] = v134;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      v135 = std::string::append(&v293, ") ");
      v136 = v135->__r_.__value_.__r.__words[2];
      *(_OWORD *)v295 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
      *(_QWORD *)&v295[16] = v136;
      v135->__r_.__value_.__l.__size_ = 0;
      v135->__r_.__value_.__r.__words[2] = 0;
      v135->__r_.__value_.__r.__words[0] = 0;
      v137 = std::string::append((std::string *)v295, v90);
      v138 = v137->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v138;
      v137->__r_.__value_.__l.__size_ = 0;
      v137->__r_.__value_.__r.__words[2] = 0;
      v137->__r_.__value_.__r.__words[0] = 0;
      v139 = std::string::append(&__p, "]");
      v113 = v139->__r_.__value_.__r.__words[0];
      v289[0] = v139->__r_.__value_.__l.__size_;
      *(uint64_t *)((char *)v289 + 7) = *(std::string::size_type *)((char *)&v139->__r_.__value_.__r.__words[1] + 7);
      v114 = HIBYTE(v139->__r_.__value_.__r.__words[2]);
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      v284[0] = v289[0];
      *(_QWORD *)((char *)v284 + 7) = *(uint64_t *)((char *)v289 + 7);
      v289[0] = 0;
      *(uint64_t *)((char *)v289 + 7) = 0;
      v115 = a4->u64[1];
      v116 = a4[1].u64[0];
      if (v115 >= v116)
      {
        v117 = a4;
        v174 = a4->i64[0];
        v175 = (uint64_t)(v115 - a4->i64[0]) >> 5;
        v176 = v175 + 1;
        if ((unint64_t)(v175 + 1) >> 59)
          goto LABEL_313;
        if ((uint64_t)(v116 - v174) >> 4 > v176)
          v176 = (uint64_t)(v116 - v174) >> 4;
        if (v116 - v174 >= 0x7FFFFFFFFFFFFFE0)
          v121 = 0x7FFFFFFFFFFFFFFLL;
        else
          v121 = v176;
        v300 = 0;
        v301 = (uint64_t *)v249;
        if (v121 >> 59)
          goto LABEL_314;
        v122 = (char *)operator new(32 * v121);
        v123 = &v122[32 * v175];
        v177 = v284[0];
        *(_QWORD *)v123 = v113;
        *((_QWORD *)v123 + 1) = v177;
        *(_QWORD *)(v123 + 15) = *(_QWORD *)((char *)v284 + 7);
        v123[23] = v114;
        memset(v284, 0, 15);
        *((_QWORD *)v123 + 3) = v252;
        if (v115 != v174)
        {
          v125 = &v122[32 * v175];
          a4 = v117;
          do
          {
            v178 = *(_OWORD *)(v115 - 32);
            *((_QWORD *)v125 - 2) = *(_QWORD *)(v115 - 16);
            *((_OWORD *)v125 - 2) = v178;
            *(_QWORD *)(v115 - 24) = 0;
            *(_QWORD *)(v115 - 16) = 0;
            *(_QWORD *)(v115 - 32) = 0;
            *((_QWORD *)v125 - 1) = *(_QWORD *)(v115 - 8);
            v125 -= 32;
            v115 -= 32;
          }
          while (v115 != v174);
LABEL_170:
          v179 = *a4;
          v116 = a4[1].u64[0];
LABEL_172:
          v140 = (unint64_t)(v123 + 32);
          a4->i64[0] = (uint64_t)v125;
          a4->i64[1] = (uint64_t)(v123 + 32);
          v299 = v179;
          a4[1].i64[0] = (uint64_t)&v122[32 * v121];
          v300 = v116;
          p_p = (std::string *)v179.i64[0];
          sub_1C5465AA0((uint64_t)&p_p);
          v42 = v264;
          goto LABEL_173;
        }
LABEL_171:
        v179 = vdupq_n_s64(v115);
        v125 = v123;
        a4 = v117;
        goto LABEL_172;
      }
    }
    *(_QWORD *)v115 = v113;
    *(_QWORD *)(v115 + 8) = v284[0];
    *(_QWORD *)(v115 + 15) = *(_QWORD *)((char *)v284 + 7);
    *(_BYTE *)(v115 + 23) = v114;
    memset(v284, 0, 15);
    *(_QWORD *)(v115 + 24) = v252;
    v140 = v115 + 32;
    v42 = v264;
LABEL_173:
    v63 = v262;
    v180 = v253;
    a4->i64[1] = v140;
    v43 = v260;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v295[23] & 0x80000000) != 0)
      operator delete(*(void **)v295);
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v290.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v297.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_203;
    v181 = (void *)v297.__r_.__value_.__r.__words[0];
LABEL_202:
    operator delete(v181);
LABEL_203:
    v80 += (unsigned __int16)v251;
    v79 = v180 + 1;
    if (v79 == v250)
      goto LABEL_204;
  }
  if (v282 > 0x17)
  {
    v82 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v77 = v82 > 0x13;
    v83 = (1 << v82) & 0xAAC00;
    v84 = v77 || v83 == 0;
    v85 = bswap64(*(_QWORD *)v81);
    v86 = bswap64(*(_QWORD *)(v81 + 16));
    if (v84)
      v87 = *(_QWORD *)v81;
    else
      v87 = v85;
    if (v84)
      v88 = *(_QWORD *)(v81 + 16);
    else
      v88 = v86;
    v89 = HIDWORD(v283);
    sub_1C59EFEB4((uint64_t)&p_p, HIDWORD(v283), v280, v281, a3, &v277, &v274, v87);
    if ((v299.i8[0] & 1) != 0)
    {
      *v42 = (uint64_t)p_p;
      v63 = v262;
      goto LABEL_227;
    }
    v90 = (const std::string::value_type *)sub_1C59F0C34(v274 + v277, &v283, &v282, &v278, (_QWORD *)a3, 0);
    if (*(_BYTE *)(a3 + 61))
    {
      if (*(_DWORD *)(*(_QWORD *)a3 + 52) == 16777228
        && (*(_DWORD *)(*(_QWORD *)a3 + 56) & 0xFFFFFF) == 2
        && v88 < 0)
      {
        v88 = v88;
      }
      else
      {
        v88 &= 0x7FFFFFFFFFFFFuLL;
      }
    }
    goto LABEL_109;
  }
  v67 = v280;
  v66 = v281;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v281 + 136))(&v297, v281, v280);
  if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
    goto LABEL_315;
  size = v297.__r_.__value_.__l.__size_;
  v68 = v297.__r_.__value_.__r.__words[0];
  v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v67);
  v71 = (const char *)(v193 + 16);
  if (*(_BYTE *)(v193 + 31))
    v72 = 16;
  else
    v72 = strlen(v71);
  v292 = 1283;
  v188 = "method64_t struct extends past end of (";
LABEL_207:
  v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
  v290.__r_.__value_.__r.__words[2] = (std::string::size_type)v71;
  v291 = v72;
  v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
  v293.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
  v294 = 770;
  *(_QWORD *)v295 = &v293;
  *(_QWORD *)&v295[16] = v68;
  *(_QWORD *)&v295[24] = size;
  v296 = 1282;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v295;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
  v276 = 770;
  v189 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 144))(v66, v67);
  v284[0] = v189 + HIDWORD(v283);
  v190 = v276;
  if (v276 == 1)
  {
    p_p = (std::string *)v284;
    v299.i64[1] = 0;
    LOWORD(v301) = 270;
    v43 = v260;
    v63 = v262;
  }
  else
  {
    v43 = v260;
    v63 = v262;
    if ((_BYTE)v276)
    {
      if (HIBYTE(v276) != 1)
        v190 = 2;
      v191 = &__p;
      if (HIBYTE(v276) == 1)
        v191 = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_p = v191;
      v299.i64[0] = __p.__r_.__value_.__l.__size_;
      v299.i64[1] = (uint64_t)v284;
      LOBYTE(v301) = v190;
      BYTE1(v301) = 14;
    }
    else
    {
      LOWORD(v301) = 256;
    }
  }
  sub_1C59D7FE0(v42, (uint64_t *)&p_p);
  if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
  {
    v192 = v297.__r_.__value_.__r.__words[0];
    v297.__r_.__value_.__r.__words[0] = 0;
    if (v192)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v192 + 8))(v192);
  }
LABEL_227:
  if (!*v42)
  {
LABEL_228:
    sub_1C59EFEB4((uint64_t)v284, v63 + 48, v255, v43, a3, &v267, &v266, v254);
    if ((v284[1] & 1) != 0)
    {
      v204 = v284[0];
      goto LABEL_297;
    }
    v195 = v266 + v267;
    if (!(v266 + v267))
    {
      v204 = 0;
      goto LABEL_297;
    }
    v283 = 0;
    v282 = 0;
    v280 = 0;
    v281 = 0;
    v278 = 0;
    v279 = 0;
    v289[0] = 0;
    v277 = 0;
    v196 = sub_1C59F0C34(v266 + v267, (_DWORD *)&v283 + 1, &v282, &v280, (_QWORD *)a3, 0);
    if (!v196)
      goto LABEL_286;
    if (v282 <= 7)
    {
      v198 = v280;
      v197 = v281;
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v281 + 136))(&v297, v281, v280);
      if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
        goto LABEL_315;
      v200 = v297.__r_.__value_.__l.__size_;
      v199 = v297.__r_.__value_.__r.__words[0];
      v201 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v198);
      v202 = (const char *)(v201 + 16);
      if (*(_BYTE *)(v201 + 31))
        v203 = 16;
      else
        v203 = strlen(v202);
      v292 = 1283;
      v242 = "ivar_list64_t struct extends past end of (";
      goto LABEL_289;
    }
    v205 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v206 = bswap32(*(_DWORD *)(v196 + 4));
    if (((1 << v205) & 0xAAC00) == 0)
      v206 = *(_DWORD *)(v196 + 4);
    v207 = v205 <= 0x13 ? v206 : *(_DWORD *)(v196 + 4);
    HIDWORD(v283) += 8;
    v261 = v207;
    if (!v207)
    {
LABEL_286:
      *v42 = 0;
      goto LABEL_296;
    }
    v208 = v195 + 8;
    v209 = 0;
    v256 = a4 + 1;
    while (1)
    {
      v210 = (unint64_t *)sub_1C59F0C34(v208, (_DWORD *)&v283 + 1, &v282, &v280, (_QWORD *)a3, 0);
      if (!v210)
        goto LABEL_286;
      if (v282 <= 0x1F)
        break;
      v211 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      v77 = v211 > 0x13;
      v212 = (1 << v211) & 0xAAC00;
      v213 = v77 || v212 == 0;
      v214 = bswap64(*v210);
      v215 = bswap64(v210[1]);
      if (v213)
        v216 = v210[1];
      else
        v216 = v215;
      if (v213)
        v217 = *v210;
      else
        v217 = v214;
      sub_1C59EFEB4((uint64_t)&v293, HIDWORD(v283) + 8, v280, v281, a3, v289, &v277, v216);
      if ((v293.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v42 = v264;
        *v264 = v293.__r_.__value_.__r.__words[0];
        goto LABEL_296;
      }
      v218 = (const std::string::value_type *)sub_1C59F0C34(v277 + v289[0], &v283, &v282, &v278, (_QWORD *)a3, 0);
      if (*(_BYTE *)(a3 + 61))
      {
        if (*(_DWORD *)(*(_QWORD *)a3 + 52) == 16777228
          && (*(_DWORD *)(*(_QWORD *)a3 + 56) & 0xFFFFFF) == 2
          && (v217 & 0x8000000000000000) != 0)
        {
          v217 = v217;
        }
        else
        {
          v217 &= 0x7FFFFFFFFFFFFuLL;
        }
      }
      v263 = v208;
      v219 = *(const char **)(a3 + 40);
      v220 = strlen(v219);
      sub_1C484371C((uint64_t)v295, v220 + 13);
      v221 = v295;
      if (v295[23] < 0)
        v221 = *(_BYTE **)v295;
      qmemcpy(v221, "_OBJC_IVAR_$_", 13);
      v222 = v221 + 13;
      if (v220)
        memmove(v221 + 13, v219, v220);
      v222[v220] = 0;
      v223 = std::string::append((std::string *)v295, ".");
      v224 = v223->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v224;
      v223->__r_.__value_.__l.__size_ = 0;
      v223->__r_.__value_.__r.__words[2] = 0;
      v223->__r_.__value_.__r.__words[0] = 0;
      v225 = std::string::append(&__p, v218);
      v226 = v225->__r_.__value_.__r.__words[0];
      v297.__r_.__value_.__r.__words[0] = v225->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v225->__r_.__value_.__r.__words[1] + 7);
      v227 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
      v225->__r_.__value_.__l.__size_ = 0;
      v225->__r_.__value_.__r.__words[2] = 0;
      v225->__r_.__value_.__r.__words[0] = 0;
      v290.__r_.__value_.__r.__words[0] = v297.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v297.__r_.__value_.__r.__words + 7);
      v228 = a4->u64[1];
      v229 = a4[1].u64[0];
      if (v228 >= v229)
      {
        v259 = v209;
        v231 = a4;
        v232 = a4->i64[0];
        v233 = (uint64_t)(v228 - a4->i64[0]) >> 5;
        v234 = v233 + 1;
        if ((unint64_t)(v233 + 1) >> 59)
          goto LABEL_313;
        if ((uint64_t)(v229 - v232) >> 4 > v234)
          v234 = (uint64_t)(v229 - v232) >> 4;
        if (v229 - v232 >= 0x7FFFFFFFFFFFFFE0)
          v235 = 0x7FFFFFFFFFFFFFFLL;
        else
          v235 = v234;
        v300 = 0;
        v301 = (uint64_t *)v256;
        if (v235 >> 59)
          goto LABEL_314;
        v236 = (char *)operator new(32 * v235);
        v237 = &v236[32 * v233];
        v238 = v290.__r_.__value_.__r.__words[0];
        *(_QWORD *)v237 = v226;
        *((_QWORD *)v237 + 1) = v238;
        *(_QWORD *)(v237 + 15) = *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7);
        v237[23] = v227;
        v290.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7) = 0;
        *((_QWORD *)v237 + 3) = v217;
        if (v228 == v232)
        {
          v241 = vdupq_n_s64(v228);
          v239 = &v236[32 * v233];
          v42 = v264;
          a4 = v231;
        }
        else
        {
          v239 = &v236[32 * v233];
          v42 = v264;
          a4 = v231;
          do
          {
            v240 = *(_OWORD *)(v228 - 32);
            *((_QWORD *)v239 - 2) = *(_QWORD *)(v228 - 16);
            *((_OWORD *)v239 - 2) = v240;
            *(_QWORD *)(v228 - 24) = 0;
            *(_QWORD *)(v228 - 16) = 0;
            *(_QWORD *)(v228 - 32) = 0;
            *((_QWORD *)v239 - 1) = *(_QWORD *)(v228 - 8);
            v239 -= 32;
            v228 -= 32;
          }
          while (v228 != v232);
          v241 = *v231;
          v229 = v231[1].u64[0];
        }
        v209 = v259;
        v230 = (unint64_t)(v237 + 32);
        a4->i64[0] = (uint64_t)v239;
        a4->i64[1] = (uint64_t)(v237 + 32);
        v299 = v241;
        a4[1].i64[0] = (uint64_t)&v236[32 * v235];
        v300 = v229;
        p_p = (std::string *)v241.i64[0];
        sub_1C5465AA0((uint64_t)&p_p);
      }
      else
      {
        *(_QWORD *)v228 = v226;
        *(_QWORD *)(v228 + 8) = v290.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v228 + 15) = *(std::string::size_type *)((char *)v290.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v228 + 23) = v227;
        *(_QWORD *)(v228 + 24) = v217;
        v230 = v228 + 32;
        v42 = v264;
      }
      a4->i64[1] = v230;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v295[23] & 0x80000000) != 0)
        operator delete(*(void **)v295);
      v208 = v263 + 32;
      if (++v209 == v261)
        goto LABEL_286;
    }
    v198 = v280;
    v197 = v281;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v281 + 136))(&v297, v281, v280);
    if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
      goto LABEL_315;
    v200 = v297.__r_.__value_.__l.__size_;
    v199 = v297.__r_.__value_.__r.__words[0];
    v245 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v198);
    v202 = (const char *)(v245 + 16);
    if (*(_BYTE *)(v245 + 31))
      v203 = 16;
    else
      v203 = strlen(v202);
    v292 = 1283;
    v242 = "ivar_t struct extends past end of (";
LABEL_289:
    v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v242;
    v290.__r_.__value_.__r.__words[2] = (std::string::size_type)v202;
    v291 = v203;
    v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
    v293.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
    v294 = 770;
    *(_QWORD *)v295 = &v293;
    *(_QWORD *)&v295[16] = v199;
    *(_QWORD *)&v295[24] = v200;
    v296 = 1282;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v295;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
    v276 = 770;
    v243 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 144))(v197, v198);
    v274 = v243 + HIDWORD(v283);
    p_p = &__p;
    v299.i64[1] = (uint64_t)&v274;
    LOWORD(v301) = 3586;
    sub_1C59D7FE0(v42, (uint64_t *)&p_p);
    if ((v297.__r_.__value_.__s.__data_[16] & 1) != 0)
    {
      v244 = v297.__r_.__value_.__r.__words[0];
      v297.__r_.__value_.__r.__words[0] = 0;
      if (v244)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v244 + 8))(v244);
    }
LABEL_296:
    v204 = *v42;
    if (!*v42)
LABEL_297:
      *v42 = v204;
    if ((v286 & 1) != 0 && v285)
      (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  }
LABEL_301:
  if ((v288 & 1) != 0)
  {
    v51 = v287;
    if (v287)
LABEL_303:
      (*(void (**)(std::string::size_type))(*(_QWORD *)v51 + 8))(v51);
  }
}

void sub_1C59F28E4(uint64_t *a1, unsigned int a2, _QWORD *a3, char **a4)
{
  char **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  uint64_t v38[4];
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;

  while (1)
  {
    v4 = a4;
    v5 = (uint64_t)a3;
    v6 = a1;
    v46 = *MEMORY[0x1E0C80C00];
    v42 = 0;
    v43 = 0;
    v7 = a2;
    v41 = 0;
    v8 = (unsigned int *)sub_1C59F0C34(a2, (_DWORD *)&v43 + 1, &v43, &v41, a3, 0);
    v9 = v8 && v43 > 0x13;
    if (!v9)
      break;
    v15 = *v8;
    v16 = v8[4];
    v17 = *(_DWORD *)(*(_QWORD *)v5 + 8);
    v9 = v17 > 0x13;
    v18 = (1 << v17) & 0xAAC00;
    v19 = v9 || v18 == 0;
    v20 = bswap32(v15);
    v21 = bswap32(v16);
    if (v19)
      v22 = v15;
    else
      v22 = v20;
    if (v19)
      v23 = v16;
    else
      v23 = v21;
    v24 = *(_BYTE *)(v5 + 60);
    *(_BYTE *)(v5 + 60) = 0;
    *(_QWORD *)(v5 + 32) = v7;
    v25 = sub_1C59EFE2C(*(_QWORD *)(v5 + 80), v23);
    sub_1C59F2B88(v6, v25 & 0xFFFFFFFC, v5, v4);
    if (*v6)
      return;
    if (*(_BYTE *)(v5 + 60))
    {
      *(_BYTE *)(v5 + 60) = v24;
      *v6 = 0;
      return;
    }
    a2 = sub_1C59EFE2C(*(_QWORD *)(v5 + 80), v22);
    a1 = v6;
    a3 = (_QWORD *)v5;
    a4 = v4;
  }
  v11 = v41;
  v10 = v42;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v42 + 136))(v44, v42, v41);
  if ((v45 & 1) != 0)
  {
    v28 = v44[0];
    v44[0] = 0;
    v40 = v28;
    llvm::report_fatal_error(&v40);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 80) + 8 * v11);
  v13 = (const char *)(v12 + 16);
  if (*(_BYTE *)(v12 + 31))
    v14 = 16;
  else
    v14 = strlen(v13);
  v31 = 1283;
  v30[0] = "class_t struct extends past end of (";
  v30[2] = v13;
  v30[3] = v14;
  v32[0] = v30;
  v32[2] = ",";
  v33 = 770;
  v34[0] = v32;
  v34[2] = v44[0];
  v34[3] = v44[1];
  v35 = 1282;
  v36[0] = v34;
  v36[2] = ") section at address: 0x";
  v37 = 770;
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 144))(v10, v11);
  v29 = v26 + HIDWORD(v43);
  v38[0] = (uint64_t)v36;
  v38[2] = (uint64_t)&v29;
  v39 = 3586;
  sub_1C59D7FE0(v6, v38);
  if ((v45 & 1) != 0)
  {
    v27 = v44[0];
    v44[0] = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

void sub_1C59F2B88(uint64_t *a1, unsigned int a2, uint64_t a3, char **a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  size_t v26;
  std::string *p_p;
  std::string::value_type *v28;
  std::string::size_type v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  size_t v48;
  size_t v49;
  std::string *v50;
  std::string::value_type *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  std::string::size_type v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  std::string::size_type size;
  uint64_t v68;
  const char *v69;
  size_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  const std::string::value_type *v85;
  uint64_t v86;
  const char *v87;
  size_t v88;
  std::string *v89;
  std::string::value_type *v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  const char *v113;
  size_t v114;
  std::string *v115;
  std::string::value_type *v116;
  std::string *v117;
  std::string::size_type v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  std::string::size_type v122;
  std::string *v123;
  std::string::size_type v124;
  std::string *v125;
  unint64_t v126;
  const char *v127;
  size_t v128;
  std::string *v129;
  std::string::value_type *v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  std::string::size_type v146;
  char *v147;
  __int128 v148;
  const char *v149;
  size_t v150;
  std::string *v151;
  std::string::value_type *v152;
  std::string *v153;
  std::string::size_type v154;
  std::string *v155;
  std::string::size_type v156;
  std::string *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  __int128 v163;
  int64x2_t v164;
  unsigned int v165;
  void *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  std::string::size_type v170;
  __int128 v171;
  int64x2_t v172;
  const char *v173;
  uint64_t v174;
  char v175;
  std::string *v176;
  std::string::size_type v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  std::string::size_type v182;
  uint64_t v183;
  const char *v184;
  size_t v185;
  unsigned int v186;
  int v187;
  BOOL v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  _DWORD *v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  BOOL v197;
  unsigned int v198;
  unsigned int v199;
  unint64_t v200;
  const std::string::value_type *v201;
  const char *v202;
  size_t v203;
  _BYTE *v204;
  _BYTE *v205;
  std::string *v206;
  std::string::size_type v207;
  std::string *v208;
  std::string::size_type v209;
  char v210;
  char **v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  std::string::size_type v221;
  char *v222;
  __int128 v223;
  int64x2_t v224;
  const char *v225;
  uint64_t v226;
  std::string::size_type v227;
  uint64_t v228;
  uint64_t v229;
  std::string::size_type v230;
  uint64_t *v231;
  std::string::size_type v232;
  _QWORD *v233;
  unsigned int v234;
  unsigned int v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  char **v241;
  std::string::size_type v242;
  _QWORD v243[2];
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  std::string __p;
  __int16 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  std::string *v257;
  int64x2_t v258;
  unint64_t v259;
  _QWORD *v260;
  unsigned int v261[4];
  _QWORD v262[2];
  std::string v263;
  size_t v264;
  __int16 v265;
  std::string v266;
  __int16 v267;
  _BYTE v268[32];
  __int16 v269;
  std::string v270;
  uint64_t v271;

  v271 = *MEMORY[0x1E0C80C00];
  v248 = 0;
  v246 = 0;
  v244 = 0;
  v245 = 0;
  v243[0] = 0;
  v243[1] = 0;
  v7 = (unsigned int *)sub_1C59F0C34(a2, &v248, &v246, &v244, (_QWORD *)a3, 0);
  if (v7 && v246 > 0x27)
  {
    v240 = a1;
    v8 = *v7;
    v9 = v7[4];
    v10 = v7[5];
    v11 = v7[7];
    v12 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v13 = v12 > 0x13;
    v14 = (1 << v12) & 0xAAC00;
    v15 = v13 || v14 == 0;
    v16 = bswap32(v8);
    v17 = bswap32(v9);
    v18 = bswap32(v10);
    v19 = bswap32(v11);
    if (v15)
      v20 = v9;
    else
      v20 = v17;
    if (v15)
    {
      v21 = v10;
    }
    else
    {
      LOBYTE(v8) = v16;
      v21 = v18;
    }
    if (v15)
      v22 = v11;
    else
      v22 = v19;
    v236 = v22;
    v247 = 0;
    *(_BYTE *)(a3 + 60) = v8 & 1;
    v23 = sub_1C59EFE2C(*(_QWORD *)(a3 + 80), v20);
    v24 = (const char *)sub_1C59F0C34(v23, &v247, &v246, v243, (_QWORD *)a3, 0);
    v25 = v24;
    *(_QWORD *)(a3 + 40) = v24;
    v241 = a4;
    if (*(_BYTE *)(a3 + 60))
    {
      v26 = strlen(v24);
      sub_1C484371C((uint64_t)&__p, v26 + 18);
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      *(_OWORD *)&p_p->__r_.__value_.__l.__data_ = *(_OWORD *)"_OBJC_METACLASS_$_";
      LOWORD(p_p->__r_.__value_.__r.__words[2]) = 24356;
      v28 = &p_p->__r_.__value_.__s.__data_[18];
      if (v26)
        memmove((char *)&p_p->__r_.__value_.__r.__words[2] + 2, v25, v26);
      v28[v26] = 0;
      *(_QWORD *)v268 = __p.__r_.__value_.__l.__size_;
      v29 = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v268[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      v31 = *(_QWORD *)(a3 + 32);
      v32 = a4 + 2;
      v33 = (unint64_t)a4[2];
      v34 = (unint64_t)a4[1];
      if (v34 >= v33)
      {
        v35 = *a4;
        v36 = (uint64_t)(v34 - (_QWORD)*a4) >> 5;
        v37 = v36 + 1;
        if (!((unint64_t)(v36 + 1) >> 59))
        {
          if ((uint64_t)(v33 - (_QWORD)v35) >> 4 > v37)
            v37 = (uint64_t)(v33 - (_QWORD)v35) >> 4;
          if (v33 - (unint64_t)v35 >= 0x7FFFFFFFFFFFFFE0)
            v38 = 0x7FFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          v259 = 0;
          v260 = v32;
          if (!(v38 >> 59))
          {
            v39 = (char *)operator new(32 * v38);
            v40 = &v39[32 * v36];
            v41 = *(_QWORD *)v268;
            *(_QWORD *)v40 = v29;
            *((_QWORD *)v40 + 1) = v41;
            *(_QWORD *)(v40 + 15) = *(_QWORD *)&v268[7];
            v40[23] = v30;
            *(_QWORD *)v268 = 0;
            *(_QWORD *)&v268[7] = 0;
            *((_QWORD *)v40 + 3) = v31;
            if ((char *)v34 != v35)
            {
              v42 = &v39[32 * v36];
              a4 = v241;
              do
              {
                v43 = *(_OWORD *)(v34 - 32);
                *((_QWORD *)v42 - 2) = *(_QWORD *)(v34 - 16);
                *((_OWORD *)v42 - 2) = v43;
                *(_QWORD *)(v34 - 24) = 0;
                *(_QWORD *)(v34 - 16) = 0;
                *(_QWORD *)(v34 - 32) = 0;
                *((_QWORD *)v42 - 1) = *(_QWORD *)(v34 - 8);
                v42 -= 32;
                v34 -= 32;
              }
              while ((char *)v34 != v35);
LABEL_55:
              v62 = *(int64x2_t *)a4;
              v33 = (unint64_t)a4[2];
LABEL_57:
              v53 = (unint64_t)(v40 + 32);
              *a4 = v42;
              a4[1] = v40 + 32;
              v258 = v62;
              a4[2] = &v39[32 * v38];
              v259 = v33;
              v257 = (std::string *)v62.i64[0];
              sub_1C5465AA0((uint64_t)&v257);
              v54 = v240;
LABEL_58:
              a4[1] = (char *)v53;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if (!(_DWORD)v21)
                  goto LABEL_195;
              }
              else if (!(_DWORD)v21)
              {
                goto LABEL_195;
              }
              v255 = 0;
              v256 = 0;
              v249 = 0;
              v253 = 0;
              v254 = 0;
              v252 = 0;
              v63 = sub_1C59F0C34(v21, (_DWORD *)&v256 + 1, &v249, &v254, (_QWORD *)a3, 0);
              if (v63)
              {
                if (v249 <= 7)
                {
                  v65 = v254;
                  v64 = v255;
                  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v255 + 136))(&v270, v255, v254);
                  if ((v270.__r_.__value_.__s.__data_[16] & 1) == 0)
                  {
                    size = v270.__r_.__value_.__l.__size_;
                    v66 = v270.__r_.__value_.__r.__words[0];
                    v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v65);
                    v69 = (const char *)(v68 + 16);
                    if (*(_BYTE *)(v68 + 31))
                      v70 = 16;
                    else
                      v70 = strlen(v69);
                    v265 = 1283;
                    v173 = "method_list32_t struct extends past end of (";
                    goto LABEL_182;
                  }
                  goto LABEL_266;
                }
                v71 = *(_DWORD *)(v63 + 4);
                v72 = *(_DWORD *)(*(_QWORD *)a3 + 8);
                if (v72 <= 0x13 && ((1 << v72) & 0xAAC00) != 0)
                  v71 = bswap32(v71);
                HIDWORD(v256) += 8;
                if (v71)
                {
                  v73 = 0;
                  v74 = v21 + 8;
                  v233 = a4 + 2;
                  v234 = v71;
                  do
                  {
                    v75 = (unsigned int *)sub_1C59F0C34(v74, (_DWORD *)&v256 + 1, &v249, &v254, (_QWORD *)a3, 0);
                    if (!v75)
                      break;
                    if (v249 <= 0xB)
                    {
                      v65 = v254;
                      v64 = v255;
                      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v255 + 136))(&v270, v255, v254);
                      if ((v270.__r_.__value_.__s.__data_[16] & 1) != 0)
                        goto LABEL_266;
                      size = v270.__r_.__value_.__l.__size_;
                      v66 = v270.__r_.__value_.__r.__words[0];
                      v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v65);
                      v69 = (const char *)(v228 + 16);
                      v54 = v240;
                      if (*(_BYTE *)(v228 + 31))
                        v70 = 16;
                      else
                        v70 = strlen(v69);
                      v265 = 1283;
                      v173 = "method32_t struct extends past end of (";
LABEL_182:
                      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
                      v263.__r_.__value_.__r.__words[2] = (std::string::size_type)v69;
                      v264 = v70;
                      v266.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
                      v266.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
                      v267 = 770;
                      *(_QWORD *)v268 = &v266;
                      *(_QWORD *)&v268[16] = v66;
                      *(_QWORD *)&v268[24] = size;
                      v269 = 1282;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
                      v251 = 770;
                      v174 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 144))(v64, v65);
                      v262[0] = v174 + HIDWORD(v256);
                      v175 = v251;
                      if (v251 == 1)
                      {
                        v257 = (std::string *)v262;
                        v258.i64[1] = 0;
                        LOWORD(v260) = 270;
                        a4 = v241;
                      }
                      else
                      {
                        a4 = v241;
                        if ((_BYTE)v251)
                        {
                          if (HIBYTE(v251) != 1)
                            v175 = 2;
                          v176 = &__p;
                          if (HIBYTE(v251) == 1)
                            v176 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          v257 = v176;
                          v258.i64[0] = __p.__r_.__value_.__l.__size_;
                          v258.i64[1] = (uint64_t)v262;
                          LOBYTE(v260) = v175;
                          BYTE1(v260) = 14;
                        }
                        else
                        {
                          LOWORD(v260) = 256;
                        }
                      }
                      sub_1C59D7FE0(v54, (uint64_t *)&v257);
                      if ((v270.__r_.__value_.__s.__data_[16] & 1) != 0)
                      {
                        v177 = v270.__r_.__value_.__r.__words[0];
                        v270.__r_.__value_.__r.__words[0] = 0;
                        if (v177)
                          (*(void (**)(std::string::size_type))(*(_QWORD *)v177 + 8))(v177);
                      }
LABEL_194:
                      if (!*v54)
                      {
LABEL_195:
                        if (!(_DWORD)v236)
                          goto LABEL_251;
                        v261[0] = 0;
                        v255 = 0;
                        v256 = 0;
                        v253 = 0;
                        v254 = 0;
                        v252 = 0;
                        v178 = sub_1C59F0C34(v236, v261, &v256, &v254, (_QWORD *)a3, 0);
                        if (!v178)
                          goto LABEL_244;
                        if (v256 <= 7)
                        {
                          v180 = v254;
                          v179 = v255;
                          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v255 + 136))(&v270, v255, v254);
                          if ((v270.__r_.__value_.__s.__data_[16] & 1) == 0)
                          {
                            v182 = v270.__r_.__value_.__l.__size_;
                            v181 = v270.__r_.__value_.__r.__words[0];
                            v183 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v180);
                            v184 = (const char *)(v183 + 16);
                            if (*(_BYTE *)(v183 + 31))
                              v185 = 16;
                            else
                              v185 = strlen(v184);
                            v265 = 1283;
                            v225 = "ivar_list32_t struct extends past end of (";
                            goto LABEL_247;
                          }
LABEL_266:
                          v232 = v270.__r_.__value_.__r.__words[0];
                          v270.__r_.__value_.__r.__words[0] = 0;
                          v257 = (std::string *)v232;
                          v231 = (uint64_t *)&v257;
LABEL_267:
                          llvm::report_fatal_error(v231);
                        }
                        v186 = *(_DWORD *)(*(_QWORD *)a3 + 8);
                        v13 = v186 > 0x13;
                        v187 = (1 << v186) & 0xAAC00;
                        v188 = v13 || v187 == 0;
                        v189 = bswap32(*(_DWORD *)(v178 + 4));
                        if (v188)
                          v189 = *(_DWORD *)(v178 + 4);
                        v261[0] += 8;
                        v235 = v189;
                        if (v189)
                        {
                          v190 = 0;
                          v191 = v236 + 8;
                          v237 = a4 + 2;
                          while (1)
                          {
                            v192 = (_DWORD *)sub_1C59F0C34(v191, v261, &v256, &v254, (_QWORD *)a3, 0);
                            if (!v192)
                              goto LABEL_244;
                            if (v256 <= 0x13)
                              break;
                            LODWORD(v193) = *v192;
                            v194 = v192[1];
                            v195 = *(_DWORD *)(*(_QWORD *)a3 + 8);
                            v13 = v195 > 0x13;
                            v196 = (1 << v195) & 0xAAC00;
                            v197 = v13 || v196 == 0;
                            v198 = bswap32(v193);
                            v199 = bswap32(v194);
                            if (v197)
                              v200 = v194;
                            else
                              v200 = v199;
                            if (v197)
                              v193 = v193;
                            else
                              v193 = v198;
                            v239 = v193;
                            v201 = (const std::string::value_type *)sub_1C59F0C34(v200, (_DWORD *)&v256 + 1, &v256, &v252, (_QWORD *)a3, 0);
                            v202 = *(const char **)(a3 + 40);
                            v203 = strlen(v202);
                            sub_1C484371C((uint64_t)v268, v203 + 13);
                            v204 = v268;
                            if (v268[23] < 0)
                              v204 = *(_BYTE **)v268;
                            qmemcpy(v204, "_OBJC_IVAR_$_", 13);
                            v205 = v204 + 13;
                            if (v203)
                              memmove(v204 + 13, v202, v203);
                            v205[v203] = 0;
                            v206 = std::string::append((std::string *)v268, ".");
                            v207 = v206->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
                            __p.__r_.__value_.__r.__words[2] = v207;
                            v206->__r_.__value_.__l.__size_ = 0;
                            v206->__r_.__value_.__r.__words[2] = 0;
                            v206->__r_.__value_.__r.__words[0] = 0;
                            v208 = std::string::append(&__p, v201);
                            v209 = v208->__r_.__value_.__r.__words[0];
                            v263.__r_.__value_.__r.__words[0] = v208->__r_.__value_.__l.__size_;
                            *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v208->__r_.__value_.__r.__words[1] + 7);
                            v210 = HIBYTE(v208->__r_.__value_.__r.__words[2]);
                            v208->__r_.__value_.__l.__size_ = 0;
                            v208->__r_.__value_.__r.__words[2] = 0;
                            v208->__r_.__value_.__r.__words[0] = 0;
                            v266.__r_.__value_.__r.__words[0] = v263.__r_.__value_.__r.__words[0];
                            *(std::string::size_type *)((char *)v266.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7);
                            v211 = v241;
                            v212 = (unint64_t)v241[1];
                            v213 = (unint64_t)v241[2];
                            if (v212 >= v213)
                            {
                              v215 = *v241;
                              v216 = (uint64_t)(v212 - (_QWORD)*v241) >> 5;
                              v217 = v216 + 1;
                              if ((unint64_t)(v216 + 1) >> 59)
                                goto LABEL_263;
                              if ((uint64_t)(v213 - (_QWORD)v215) >> 4 > v217)
                                v217 = (uint64_t)(v213 - (_QWORD)v215) >> 4;
                              if (v213 - (unint64_t)v215 >= 0x7FFFFFFFFFFFFFE0)
                                v218 = 0x7FFFFFFFFFFFFFFLL;
                              else
                                v218 = v217;
                              v259 = 0;
                              v260 = v237;
                              if (v218 >> 59)
                                goto LABEL_264;
                              v219 = (char *)operator new(32 * v218);
                              v220 = &v219[32 * v216];
                              v221 = v266.__r_.__value_.__r.__words[0];
                              *(_QWORD *)v220 = v209;
                              *((_QWORD *)v220 + 1) = v221;
                              *(_QWORD *)(v220 + 15) = *(std::string::size_type *)((char *)v266.__r_.__value_.__r.__words
                                                                                 + 7);
                              v220[23] = v210;
                              v266.__r_.__value_.__r.__words[0] = 0;
                              *(std::string::size_type *)((char *)v266.__r_.__value_.__r.__words + 7) = 0;
                              *((_QWORD *)v220 + 3) = v239;
                              if ((char *)v212 == v215)
                              {
                                v224 = vdupq_n_s64(v212);
                                v222 = &v219[32 * v216];
                                v211 = v241;
                              }
                              else
                              {
                                v222 = &v219[32 * v216];
                                do
                                {
                                  v223 = *(_OWORD *)(v212 - 32);
                                  *((_QWORD *)v222 - 2) = *(_QWORD *)(v212 - 16);
                                  *((_OWORD *)v222 - 2) = v223;
                                  *(_QWORD *)(v212 - 24) = 0;
                                  *(_QWORD *)(v212 - 16) = 0;
                                  *(_QWORD *)(v212 - 32) = 0;
                                  *((_QWORD *)v222 - 1) = *(_QWORD *)(v212 - 8);
                                  v222 -= 32;
                                  v212 -= 32;
                                }
                                while ((char *)v212 != v215);
                                v211 = v241;
                                v224 = *(int64x2_t *)v241;
                                v213 = (unint64_t)v241[2];
                              }
                              v214 = (unint64_t)(v220 + 32);
                              *v211 = v222;
                              v211[1] = v220 + 32;
                              v258 = v224;
                              v211[2] = &v219[32 * v218];
                              v259 = v213;
                              v257 = (std::string *)v224.i64[0];
                              sub_1C5465AA0((uint64_t)&v257);
                              v54 = v240;
                            }
                            else
                            {
                              *(_QWORD *)v212 = v209;
                              *(_QWORD *)(v212 + 8) = v266.__r_.__value_.__r.__words[0];
                              *(_QWORD *)(v212 + 15) = *(std::string::size_type *)((char *)v266.__r_.__value_.__r.__words
                                                                                 + 7);
                              *(_BYTE *)(v212 + 23) = v210;
                              v54 = v240;
                              *(_QWORD *)(v212 + 24) = v239;
                              v214 = v212 + 32;
                            }
                            v211[1] = (char *)v214;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p.__r_.__value_.__l.__data_);
                            if ((v268[23] & 0x80000000) != 0)
                              operator delete(*(void **)v268);
                            v191 += 20;
                            v261[0] += 20;
                            if (++v190 == v235)
                              goto LABEL_244;
                          }
                          v180 = v254;
                          v179 = v255;
                          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v255 + 136))(&v270, v255, v254);
                          if ((v270.__r_.__value_.__s.__data_[16] & 1) != 0)
                            goto LABEL_266;
                          v182 = v270.__r_.__value_.__l.__size_;
                          v181 = v270.__r_.__value_.__r.__words[0];
                          v229 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v180);
                          v184 = (const char *)(v229 + 16);
                          v185 = *(_BYTE *)(v229 + 31) ? 16 : strlen(v184);
                          v265 = 1283;
                          v225 = "ivar_t struct extends past end of (";
LABEL_247:
                          v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v225;
                          v263.__r_.__value_.__r.__words[2] = (std::string::size_type)v184;
                          v264 = v185;
                          v266.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
                          v266.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
                          v267 = 770;
                          *(_QWORD *)v268 = &v266;
                          *(_QWORD *)&v268[16] = v181;
                          *(_QWORD *)&v268[24] = v182;
                          v269 = 1282;
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
                          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
                          v251 = 770;
                          v226 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v179 + 144))(v179, v180);
                          v262[0] = v226 + v261[0];
                          v257 = &__p;
                          v258.i64[1] = (uint64_t)v262;
                          LOWORD(v260) = 3586;
                          sub_1C59D7FE0(v54, (uint64_t *)&v257);
                          if ((v270.__r_.__value_.__s.__data_[16] & 1) != 0)
                          {
                            v227 = v270.__r_.__value_.__r.__words[0];
                            v270.__r_.__value_.__r.__words[0] = 0;
                            if (v227)
                              (*(void (**)(std::string::size_type))(*(_QWORD *)v227 + 8))(v227);
                          }
                        }
                        else
                        {
LABEL_244:
                          *v54 = 0;
                        }
                        if (!*v54)
LABEL_251:
                          *v54 = 0;
                      }
                      return;
                    }
                    v76 = *v75;
                    v77 = v75[2];
                    v78 = *(_DWORD *)(*(_QWORD *)a3 + 8);
                    v13 = v78 > 0x13;
                    v79 = (1 << v78) & 0xAAC00;
                    v80 = v13 || v79 == 0;
                    v81 = bswap32(v76);
                    v82 = bswap32(v77);
                    if (v80)
                      v83 = v77;
                    else
                      v83 = v82;
                    if (v80)
                      v84 = v76;
                    else
                      v84 = v81;
                    v85 = (const std::string::value_type *)sub_1C59F0C34(v84, &v256, &v249, &v252, (_QWORD *)a3, 0);
                    v86 = *(_QWORD *)(a3 + 48);
                    v238 = v83;
                    if (*(_BYTE *)(a3 + 60))
                    {
                      if (!v86)
                      {
                        v127 = *(const char **)(a3 + 40);
                        v128 = strlen(v127);
                        sub_1C484371C((uint64_t)&v266, v128 + 2);
                        if ((v266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v129 = &v266;
                        else
                          v129 = (std::string *)v266.__r_.__value_.__r.__words[0];
                        LOWORD(v129->__r_.__value_.__l.__data_) = 23339;
                        v130 = &v129->__r_.__value_.__s.__data_[2];
                        if (v128)
                          memmove(v130, v127, v128);
                        v130[v128] = 0;
                        v131 = std::string::append(&v266, " ");
                        v132 = v131->__r_.__value_.__r.__words[2];
                        *(_OWORD *)v268 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v268[16] = v132;
                        v131->__r_.__value_.__l.__size_ = 0;
                        v131->__r_.__value_.__r.__words[2] = 0;
                        v131->__r_.__value_.__r.__words[0] = 0;
                        v133 = std::string::append((std::string *)v268, v85);
                        v134 = v133->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
                        __p.__r_.__value_.__r.__words[2] = v134;
                        v133->__r_.__value_.__l.__size_ = 0;
                        v133->__r_.__value_.__r.__words[2] = 0;
                        v133->__r_.__value_.__r.__words[0] = 0;
                        v135 = std::string::append(&__p, "]");
                        v136 = v135->__r_.__value_.__r.__words[0];
                        v270.__r_.__value_.__r.__words[0] = v135->__r_.__value_.__l.__size_;
                        *(std::string::size_type *)((char *)v270.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v135->__r_.__value_.__r.__words[1] + 7);
                        v137 = HIBYTE(v135->__r_.__value_.__r.__words[2]);
                        v135->__r_.__value_.__l.__size_ = 0;
                        v135->__r_.__value_.__r.__words[2] = 0;
                        v135->__r_.__value_.__r.__words[0] = 0;
                        v263.__r_.__value_.__r.__words[0] = v270.__r_.__value_.__r.__words[0];
                        *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v270.__r_.__value_.__r.__words + 7);
                        v138 = (unint64_t)a4[1];
                        v139 = (unint64_t)a4[2];
                        if (v138 < v139)
                          goto LABEL_133;
                        v140 = *a4;
                        v141 = (uint64_t)(v138 - (_QWORD)*a4) >> 5;
                        v142 = v141 + 1;
                        if ((unint64_t)(v141 + 1) >> 59)
                          goto LABEL_263;
                        if ((uint64_t)(v139 - (_QWORD)v140) >> 4 > v142)
                          v142 = (uint64_t)(v139 - (_QWORD)v140) >> 4;
                        if (v139 - (unint64_t)v140 >= 0x7FFFFFFFFFFFFFE0)
                          v143 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v143 = v142;
                        v259 = 0;
                        v260 = v233;
                        if (v143 >> 59)
                          goto LABEL_264;
                        v144 = (char *)operator new(32 * v143);
                        v145 = &v144[32 * v141];
                        v146 = v263.__r_.__value_.__r.__words[0];
                        *(_QWORD *)v145 = v136;
                        *((_QWORD *)v145 + 1) = v146;
                        *(_QWORD *)(v145 + 15) = *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7);
                        v145[23] = v137;
                        v263.__r_.__value_.__r.__words[0] = 0;
                        *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7) = 0;
                        *((_QWORD *)v145 + 3) = v238;
                        if ((char *)v138 != v140)
                        {
                          v147 = &v144[32 * v141];
                          a4 = v241;
                          do
                          {
                            v148 = *(_OWORD *)(v138 - 32);
                            *((_QWORD *)v147 - 2) = *(_QWORD *)(v138 - 16);
                            *((_OWORD *)v147 - 2) = v148;
                            *(_QWORD *)(v138 - 24) = 0;
                            *(_QWORD *)(v138 - 16) = 0;
                            *(_QWORD *)(v138 - 32) = 0;
                            *((_QWORD *)v147 - 1) = *(_QWORD *)(v138 - 8);
                            v147 -= 32;
                            v138 -= 32;
                          }
                          while ((char *)v138 != v140);
                          goto LABEL_167;
                        }
                        goto LABEL_168;
                      }
                      v87 = *(const char **)(a3 + 40);
                      v88 = strlen(v87);
                      sub_1C484371C((uint64_t)&v270, v88 + 2);
                      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v89 = &v270;
                      else
                        v89 = (std::string *)v270.__r_.__value_.__r.__words[0];
                      LOWORD(v89->__r_.__value_.__l.__data_) = 23339;
                      v90 = &v89->__r_.__value_.__s.__data_[2];
                      if (v88)
                        memmove(v90, v87, v88);
                      v90[v88] = 0;
                      v91 = std::string::append(&v270, "(");
                      v92 = v91->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v263.__r_.__value_.__l.__data_ = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                      v263.__r_.__value_.__r.__words[2] = v92;
                      v91->__r_.__value_.__l.__size_ = 0;
                      v91->__r_.__value_.__r.__words[2] = 0;
                      v91->__r_.__value_.__r.__words[0] = 0;
                      v93 = std::string::append(&v263, *(const std::string::value_type **)(a3 + 48));
                      v94 = v93->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v266.__r_.__value_.__l.__data_ = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
                      v266.__r_.__value_.__r.__words[2] = v94;
                      v93->__r_.__value_.__l.__size_ = 0;
                      v93->__r_.__value_.__r.__words[2] = 0;
                      v93->__r_.__value_.__r.__words[0] = 0;
                      v95 = std::string::append(&v266, ") ");
                      v96 = v95->__r_.__value_.__r.__words[2];
                      *(_OWORD *)v268 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v268[16] = v96;
                      v95->__r_.__value_.__l.__size_ = 0;
                      v95->__r_.__value_.__r.__words[2] = 0;
                      v95->__r_.__value_.__r.__words[0] = 0;
                      v97 = std::string::append((std::string *)v268, v85);
                      v98 = v97->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                      __p.__r_.__value_.__r.__words[2] = v98;
                      v97->__r_.__value_.__l.__size_ = 0;
                      v97->__r_.__value_.__r.__words[2] = 0;
                      v97->__r_.__value_.__r.__words[0] = 0;
                      v99 = std::string::append(&__p, "]");
                      v100 = v99->__r_.__value_.__r.__words[0];
                      *(_QWORD *)v261 = v99->__r_.__value_.__l.__size_;
                      *(_QWORD *)((char *)&v261[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                    + 7);
                      v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                      v99->__r_.__value_.__l.__size_ = 0;
                      v99->__r_.__value_.__r.__words[2] = 0;
                      v99->__r_.__value_.__r.__words[0] = 0;
                      v262[0] = *(_QWORD *)v261;
                      *(_QWORD *)((char *)v262 + 7) = *(_QWORD *)((char *)&v261[1] + 3);
                      memset(v261, 0, 15);
                      v102 = (unint64_t)a4[1];
                      v103 = (unint64_t)a4[2];
                      if (v102 >= v103)
                      {
                        v104 = *a4;
                        v105 = (uint64_t)(v102 - (_QWORD)*a4) >> 5;
                        v106 = v105 + 1;
                        if ((unint64_t)(v105 + 1) >> 59)
                          goto LABEL_263;
                        if ((uint64_t)(v103 - (_QWORD)v104) >> 4 > v106)
                          v106 = (uint64_t)(v103 - (_QWORD)v104) >> 4;
                        if (v103 - (unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0)
                          v107 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v107 = v106;
                        v259 = 0;
                        v260 = v233;
                        if (v107 >> 59)
                          goto LABEL_264;
                        v108 = (char *)operator new(32 * v107);
                        v109 = &v108[32 * v105];
                        v110 = v262[0];
                        *(_QWORD *)v109 = v100;
                        *((_QWORD *)v109 + 1) = v110;
                        *(_QWORD *)(v109 + 15) = *(_QWORD *)((char *)v262 + 7);
                        v109[23] = v101;
                        memset(v262, 0, 15);
                        *((_QWORD *)v109 + 3) = v238;
                        if ((char *)v102 != v104)
                        {
                          v111 = &v108[32 * v105];
                          a4 = v241;
                          do
                          {
                            v112 = *(_OWORD *)(v102 - 32);
                            *((_QWORD *)v111 - 2) = *(_QWORD *)(v102 - 16);
                            *((_OWORD *)v111 - 2) = v112;
                            *(_QWORD *)(v102 - 24) = 0;
                            *(_QWORD *)(v102 - 16) = 0;
                            *(_QWORD *)(v102 - 32) = 0;
                            *((_QWORD *)v111 - 1) = *(_QWORD *)(v102 - 8);
                            v111 -= 32;
                            v102 -= 32;
                          }
                          while ((char *)v102 != v104);
                          goto LABEL_144;
                        }
                        goto LABEL_145;
                      }
                    }
                    else
                    {
                      if (!v86)
                      {
                        v149 = *(const char **)(a3 + 40);
                        v150 = strlen(v149);
                        sub_1C484371C((uint64_t)&v266, v150 + 2);
                        if ((v266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v151 = &v266;
                        else
                          v151 = (std::string *)v266.__r_.__value_.__r.__words[0];
                        LOWORD(v151->__r_.__value_.__l.__data_) = 23341;
                        v152 = &v151->__r_.__value_.__s.__data_[2];
                        if (v150)
                          memmove(v152, v149, v150);
                        v152[v150] = 0;
                        v153 = std::string::append(&v266, " ");
                        v154 = v153->__r_.__value_.__r.__words[2];
                        *(_OWORD *)v268 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v268[16] = v154;
                        v153->__r_.__value_.__l.__size_ = 0;
                        v153->__r_.__value_.__r.__words[2] = 0;
                        v153->__r_.__value_.__r.__words[0] = 0;
                        v155 = std::string::append((std::string *)v268, v85);
                        v156 = v155->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
                        __p.__r_.__value_.__r.__words[2] = v156;
                        v155->__r_.__value_.__l.__size_ = 0;
                        v155->__r_.__value_.__r.__words[2] = 0;
                        v155->__r_.__value_.__r.__words[0] = 0;
                        v157 = std::string::append(&__p, "]");
                        v136 = v157->__r_.__value_.__r.__words[0];
                        v270.__r_.__value_.__r.__words[0] = v157->__r_.__value_.__l.__size_;
                        *(std::string::size_type *)((char *)v270.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v157->__r_.__value_.__r.__words[1] + 7);
                        v137 = HIBYTE(v157->__r_.__value_.__r.__words[2]);
                        v157->__r_.__value_.__l.__size_ = 0;
                        v157->__r_.__value_.__r.__words[2] = 0;
                        v157->__r_.__value_.__r.__words[0] = 0;
                        v263.__r_.__value_.__r.__words[0] = v270.__r_.__value_.__r.__words[0];
                        *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v270.__r_.__value_.__r.__words + 7);
                        v138 = (unint64_t)a4[1];
                        v139 = (unint64_t)a4[2];
                        if (v138 < v139)
                        {
LABEL_133:
                          *(_QWORD *)v138 = v136;
                          *(_QWORD *)(v138 + 8) = v263.__r_.__value_.__r.__words[0];
                          *(_QWORD *)(v138 + 15) = *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7);
                          *(_BYTE *)(v138 + 23) = v137;
                          *(_QWORD *)(v138 + 24) = v238;
                          v158 = v138 + 32;
LABEL_170:
                          a4[1] = (char *)v158;
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p.__r_.__value_.__l.__data_);
                          v165 = v234;
                          if ((v268[23] & 0x80000000) != 0)
                            operator delete(*(void **)v268);
                          if ((SHIBYTE(v266.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_177;
                          v166 = (void *)v266.__r_.__value_.__r.__words[0];
                          goto LABEL_176;
                        }
                        v167 = *a4;
                        v168 = (uint64_t)(v138 - (_QWORD)*a4) >> 5;
                        v169 = v168 + 1;
                        if ((unint64_t)(v168 + 1) >> 59)
                          goto LABEL_263;
                        if ((uint64_t)(v139 - (_QWORD)v167) >> 4 > v169)
                          v169 = (uint64_t)(v139 - (_QWORD)v167) >> 4;
                        if (v139 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFE0)
                          v143 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v143 = v169;
                        v259 = 0;
                        v260 = v233;
                        if (v143 >> 59)
                          goto LABEL_264;
                        v144 = (char *)operator new(32 * v143);
                        v145 = &v144[32 * v168];
                        v170 = v263.__r_.__value_.__r.__words[0];
                        *(_QWORD *)v145 = v136;
                        *((_QWORD *)v145 + 1) = v170;
                        *(_QWORD *)(v145 + 15) = *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7);
                        v145[23] = v137;
                        v263.__r_.__value_.__r.__words[0] = 0;
                        *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 7) = 0;
                        *((_QWORD *)v145 + 3) = v238;
                        if ((char *)v138 != v167)
                        {
                          v147 = &v144[32 * v168];
                          a4 = v241;
                          do
                          {
                            v171 = *(_OWORD *)(v138 - 32);
                            *((_QWORD *)v147 - 2) = *(_QWORD *)(v138 - 16);
                            *((_OWORD *)v147 - 2) = v171;
                            *(_QWORD *)(v138 - 24) = 0;
                            *(_QWORD *)(v138 - 16) = 0;
                            *(_QWORD *)(v138 - 32) = 0;
                            *((_QWORD *)v147 - 1) = *(_QWORD *)(v138 - 8);
                            v147 -= 32;
                            v138 -= 32;
                          }
                          while ((char *)v138 != v167);
LABEL_167:
                          v172 = *(int64x2_t *)a4;
                          v139 = (unint64_t)a4[2];
LABEL_169:
                          v158 = (unint64_t)(v145 + 32);
                          *a4 = v147;
                          a4[1] = v145 + 32;
                          v258 = v172;
                          a4[2] = &v144[32 * v143];
                          v259 = v139;
                          v257 = (std::string *)v172.i64[0];
                          sub_1C5465AA0((uint64_t)&v257);
                          goto LABEL_170;
                        }
LABEL_168:
                        v172 = vdupq_n_s64(v138);
                        v147 = v145;
                        a4 = v241;
                        goto LABEL_169;
                      }
                      v113 = *(const char **)(a3 + 40);
                      v114 = strlen(v113);
                      sub_1C484371C((uint64_t)&v270, v114 + 2);
                      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v115 = &v270;
                      else
                        v115 = (std::string *)v270.__r_.__value_.__r.__words[0];
                      LOWORD(v115->__r_.__value_.__l.__data_) = 23341;
                      v116 = &v115->__r_.__value_.__s.__data_[2];
                      if (v114)
                        memmove(v116, v113, v114);
                      v116[v114] = 0;
                      v117 = std::string::append(&v270, "(");
                      v118 = v117->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v263.__r_.__value_.__l.__data_ = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                      v263.__r_.__value_.__r.__words[2] = v118;
                      v117->__r_.__value_.__l.__size_ = 0;
                      v117->__r_.__value_.__r.__words[2] = 0;
                      v117->__r_.__value_.__r.__words[0] = 0;
                      v119 = std::string::append(&v263, *(const std::string::value_type **)(a3 + 48));
                      v120 = v119->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v266.__r_.__value_.__l.__data_ = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                      v266.__r_.__value_.__r.__words[2] = v120;
                      v119->__r_.__value_.__l.__size_ = 0;
                      v119->__r_.__value_.__r.__words[2] = 0;
                      v119->__r_.__value_.__r.__words[0] = 0;
                      v121 = std::string::append(&v266, ") ");
                      v122 = v121->__r_.__value_.__r.__words[2];
                      *(_OWORD *)v268 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v268[16] = v122;
                      v121->__r_.__value_.__l.__size_ = 0;
                      v121->__r_.__value_.__r.__words[2] = 0;
                      v121->__r_.__value_.__r.__words[0] = 0;
                      v123 = std::string::append((std::string *)v268, v85);
                      v124 = v123->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                      __p.__r_.__value_.__r.__words[2] = v124;
                      v123->__r_.__value_.__l.__size_ = 0;
                      v123->__r_.__value_.__r.__words[2] = 0;
                      v123->__r_.__value_.__r.__words[0] = 0;
                      v125 = std::string::append(&__p, "]");
                      v100 = v125->__r_.__value_.__r.__words[0];
                      *(_QWORD *)v261 = v125->__r_.__value_.__l.__size_;
                      *(_QWORD *)((char *)&v261[1] + 3) = *(std::string::size_type *)((char *)&v125->__r_.__value_.__r.__words[1]
                                                                                    + 7);
                      v101 = HIBYTE(v125->__r_.__value_.__r.__words[2]);
                      v125->__r_.__value_.__l.__size_ = 0;
                      v125->__r_.__value_.__r.__words[2] = 0;
                      v125->__r_.__value_.__r.__words[0] = 0;
                      v262[0] = *(_QWORD *)v261;
                      *(_QWORD *)((char *)v262 + 7) = *(_QWORD *)((char *)&v261[1] + 3);
                      memset(v261, 0, 15);
                      v102 = (unint64_t)a4[1];
                      v103 = (unint64_t)a4[2];
                      if (v102 >= v103)
                      {
                        v159 = *a4;
                        v160 = (uint64_t)(v102 - (_QWORD)*a4) >> 5;
                        v161 = v160 + 1;
                        if ((unint64_t)(v160 + 1) >> 59)
                          goto LABEL_263;
                        if ((uint64_t)(v103 - (_QWORD)v159) >> 4 > v161)
                          v161 = (uint64_t)(v103 - (_QWORD)v159) >> 4;
                        if (v103 - (unint64_t)v159 >= 0x7FFFFFFFFFFFFFE0)
                          v107 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v107 = v161;
                        v259 = 0;
                        v260 = v233;
                        if (v107 >> 59)
                          goto LABEL_264;
                        v108 = (char *)operator new(32 * v107);
                        v109 = &v108[32 * v160];
                        v162 = v262[0];
                        *(_QWORD *)v109 = v100;
                        *((_QWORD *)v109 + 1) = v162;
                        *(_QWORD *)(v109 + 15) = *(_QWORD *)((char *)v262 + 7);
                        v109[23] = v101;
                        memset(v262, 0, 15);
                        *((_QWORD *)v109 + 3) = v238;
                        if ((char *)v102 != v159)
                        {
                          v111 = &v108[32 * v160];
                          a4 = v241;
                          do
                          {
                            v163 = *(_OWORD *)(v102 - 32);
                            *((_QWORD *)v111 - 2) = *(_QWORD *)(v102 - 16);
                            *((_OWORD *)v111 - 2) = v163;
                            *(_QWORD *)(v102 - 24) = 0;
                            *(_QWORD *)(v102 - 16) = 0;
                            *(_QWORD *)(v102 - 32) = 0;
                            *((_QWORD *)v111 - 1) = *(_QWORD *)(v102 - 8);
                            v111 -= 32;
                            v102 -= 32;
                          }
                          while ((char *)v102 != v159);
LABEL_144:
                          v164 = *(int64x2_t *)a4;
                          v103 = (unint64_t)a4[2];
LABEL_146:
                          v126 = (unint64_t)(v109 + 32);
                          *a4 = v111;
                          a4[1] = v109 + 32;
                          v258 = v164;
                          a4[2] = &v108[32 * v107];
                          v259 = v103;
                          v257 = (std::string *)v164.i64[0];
                          sub_1C5465AA0((uint64_t)&v257);
                          goto LABEL_147;
                        }
LABEL_145:
                        v164 = vdupq_n_s64(v102);
                        v111 = v109;
                        a4 = v241;
                        goto LABEL_146;
                      }
                    }
                    *(_QWORD *)v102 = v100;
                    *(_QWORD *)(v102 + 8) = v262[0];
                    *(_QWORD *)(v102 + 15) = *(_QWORD *)((char *)v262 + 7);
                    *(_BYTE *)(v102 + 23) = v101;
                    memset(v262, 0, 15);
                    *(_QWORD *)(v102 + 24) = v238;
                    v126 = v102 + 32;
LABEL_147:
                    a4[1] = (char *)v126;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    v165 = v234;
                    if ((v268[23] & 0x80000000) != 0)
                      operator delete(*(void **)v268);
                    if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v266.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v263.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v270.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_177;
                    v166 = (void *)v270.__r_.__value_.__r.__words[0];
LABEL_176:
                    operator delete(v166);
LABEL_177:
                    v74 += 12;
                    HIDWORD(v256) += 12;
                    ++v73;
                  }
                  while (v73 != v165);
                }
                v54 = v240;
              }
              *v54 = 0;
              goto LABEL_194;
            }
            goto LABEL_56;
          }
          goto LABEL_264;
        }
        goto LABEL_263;
      }
    }
    else
    {
      v49 = strlen(v24);
      sub_1C484371C((uint64_t)&__p, v49 + 14);
      v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &__p;
      qmemcpy(v50, "_OBJC_CLASS_$_", 14);
      v51 = &v50->__r_.__value_.__s.__data_[14];
      if (v49)
        memmove((char *)&v50->__r_.__value_.__r.__words[1] + 6, v25, v49);
      v51[v49] = 0;
      *(_QWORD *)v268 = __p.__r_.__value_.__l.__size_;
      v29 = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v268[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      v31 = *(_QWORD *)(a3 + 32);
      v52 = a4 + 2;
      v33 = (unint64_t)a4[2];
      v34 = (unint64_t)a4[1];
      if (v34 >= v33)
      {
        v57 = *a4;
        v58 = (uint64_t)(v34 - (_QWORD)*a4) >> 5;
        v59 = v58 + 1;
        if (!((unint64_t)(v58 + 1) >> 59))
        {
          if ((uint64_t)(v33 - (_QWORD)v57) >> 4 > v59)
            v59 = (uint64_t)(v33 - (_QWORD)v57) >> 4;
          if (v33 - (unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0)
            v38 = 0x7FFFFFFFFFFFFFFLL;
          else
            v38 = v59;
          v259 = 0;
          v260 = v52;
          if (!(v38 >> 59))
          {
            v39 = (char *)operator new(32 * v38);
            v40 = &v39[32 * v58];
            v60 = *(_QWORD *)v268;
            *(_QWORD *)v40 = v29;
            *((_QWORD *)v40 + 1) = v60;
            *(_QWORD *)(v40 + 15) = *(_QWORD *)&v268[7];
            v40[23] = v30;
            *(_QWORD *)v268 = 0;
            *(_QWORD *)&v268[7] = 0;
            *((_QWORD *)v40 + 3) = v31;
            if ((char *)v34 != v57)
            {
              v42 = &v39[32 * v58];
              a4 = v241;
              do
              {
                v61 = *(_OWORD *)(v34 - 32);
                *((_QWORD *)v42 - 2) = *(_QWORD *)(v34 - 16);
                *((_OWORD *)v42 - 2) = v61;
                *(_QWORD *)(v34 - 24) = 0;
                *(_QWORD *)(v34 - 16) = 0;
                *(_QWORD *)(v34 - 32) = 0;
                *((_QWORD *)v42 - 1) = *(_QWORD *)(v34 - 8);
                v42 -= 32;
                v34 -= 32;
              }
              while ((char *)v34 != v57);
              goto LABEL_55;
            }
LABEL_56:
            v62 = vdupq_n_s64(v34);
            v42 = v40;
            a4 = v241;
            goto LABEL_57;
          }
LABEL_264:
          sub_1C4764EE4();
        }
LABEL_263:
        abort();
      }
    }
    *(_QWORD *)v34 = v29;
    *(_QWORD *)(v34 + 8) = *(_QWORD *)v268;
    *(_QWORD *)(v34 + 15) = *(_QWORD *)&v268[7];
    *(_BYTE *)(v34 + 23) = v30;
    *(_QWORD *)(v34 + 24) = v31;
    v53 = v34 + 32;
    v54 = v240;
    goto LABEL_58;
  }
  v45 = v244;
  v44 = v245;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v245 + 136))(&v270, v245, v244);
  if ((v270.__r_.__value_.__s.__data_[16] & 1) != 0)
  {
    v230 = v270.__r_.__value_.__r.__words[0];
    v270.__r_.__value_.__r.__words[0] = 0;
    v242 = v230;
    v231 = (uint64_t *)&v242;
    goto LABEL_267;
  }
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v45);
  v47 = (const char *)(v46 + 16);
  if (*(_BYTE *)(v46 + 31))
    v48 = 16;
  else
    v48 = strlen(v47);
  v265 = 1283;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)"class_ro32_t struct extends past end of (";
  v263.__r_.__value_.__r.__words[2] = (std::string::size_type)v47;
  v264 = v48;
  v266.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
  v266.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
  v267 = 770;
  *(_QWORD *)v268 = &v266;
  *(_OWORD *)&v268[16] = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v269 = 1282;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
  v251 = 770;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 144))(v44, v45);
  v254 = v55 + v248;
  v257 = &__p;
  v258.i64[1] = (uint64_t)&v254;
  LOWORD(v260) = 3586;
  sub_1C59D7FE0(a1, (uint64_t *)&v257);
  if ((v270.__r_.__value_.__s.__data_[16] & 1) != 0)
  {
    v56 = v270.__r_.__value_.__r.__words[0];
    v270.__r_.__value_.__r.__words[0] = 0;
    if (v56)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v56 + 8))(v56);
  }
}

void sub_1C59F4248(uint64_t *a1, unsigned int a2, uint64_t a3, _QWORD *a4, int64x2_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v13 = 0;
  v10 = sub_1C59F0C34(*(unsigned int *)(a3 + 8), &v13, &v12, &v11, a4, 1);
  if (!v10 || (a4[4] = a2, a4[5] = v10, a4[6] = 0, sub_1C59F42DC(a1, *(_DWORD *)(a3 + 28), (uint64_t)a4, a5), !*a1))
    *a1 = 0;
}

void sub_1C59F42DC(uint64_t *a1, unsigned int a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const std::string::value_type *v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  std::string *v35;
  std::string::value_type *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  const char *v59;
  size_t v60;
  std::string *v61;
  std::string::value_type *v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  unint64_t v72;
  const char *v73;
  size_t v74;
  std::string *v75;
  std::string::value_type *v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  std::string::size_type v92;
  char *v93;
  __int128 v94;
  const char *v95;
  size_t v96;
  std::string *v97;
  std::string::value_type *v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  int64x2_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  std::string::size_type v115;
  __int128 v116;
  int64x2_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  size_t v124;
  uint64_t v125;
  std::string::size_type v126;
  std::string::size_type v127;
  uint64_t *v128;
  std::string::size_type v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::string::size_type v135;
  std::string v136;
  __int16 v137;
  _BYTE v138[32];
  __int16 v139;
  std::string v140;
  __int16 v141;
  std::string::size_type v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  std::string *v147;
  int64x2_t v148;
  unint64_t v149;
  int64x2_t *v150;
  _QWORD v151[2];
  _QWORD v152[2];
  std::string v153;
  size_t v154;
  __int16 v155;
  std::string v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v146 = 0;
  v145 = 0;
  v143 = 0;
  v144 = 0;
  v7 = sub_1C59F0C34(a2, (_DWORD *)&v146 + 1, &v146, &v143, (_QWORD *)a3, 1);
  if (!v7)
  {
    *a1 = 0;
    return;
  }
  if (v146 <= 7)
  {
    v9 = v143;
    v8 = v144;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v144 + 136))(&v156, v144, v143);
    if ((v156.__r_.__value_.__s.__data_[16] & 1) == 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v9);
      v11 = (const char *)(v10 + 16);
      if (*(_BYTE *)(v10 + 31))
        v12 = 16;
      else
        v12 = strlen(v11);
      v155 = 1283;
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"objc_method_list struct extends past end of (";
      v153.__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
      v154 = v12;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
      v137 = 770;
      *(_QWORD *)v138 = &v136;
      *(_OWORD *)&v138[16] = *(_OWORD *)&v156.__r_.__value_.__l.__data_;
      v139 = 1282;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
      v140.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
      v141 = 770;
      v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 144))(v8, v9);
      v152[0] = v118 + HIDWORD(v146);
      v147 = &v140;
      v148.i64[1] = (uint64_t)v152;
      LOWORD(v150) = 3586;
      v119 = a1;
      goto LABEL_129;
    }
    v127 = v156.__r_.__value_.__r.__words[0];
    v156.__r_.__value_.__r.__words[0] = 0;
    v142 = v127;
    v128 = (uint64_t *)&v142;
LABEL_137:
    llvm::report_fatal_error(v128);
  }
  v130 = a1;
  LODWORD(v13) = *(_DWORD *)(v7 + 4);
  v14 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  v15 = v14 > 0x13;
  v16 = (1 << v14) & 0xAAC00;
  v17 = v15 || v16 == 0;
  v18 = bswap32(v13);
  if (v17)
    v13 = v13;
  else
    v13 = v18;
  v133 = v13;
  if ((int)v13 < 1)
  {
LABEL_121:
    *v130 = 0;
    return;
  }
  v19 = 0;
  v131 = v7 + 8;
  v132 = v146 / 0xCuLL;
  while (v19 != v132)
  {
    v20 = (unsigned int *)(v131 + 12 * v19);
    v21 = *v20;
    v22 = v20[2];
    v23 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    v15 = v23 > 0x13;
    v24 = (1 << v23) & 0xAAC00;
    v25 = v15 || v24 == 0;
    v26 = bswap32(v21);
    v27 = bswap32(v22);
    if (v25)
      v28 = v21;
    else
      v28 = v26;
    if (v25)
      v29 = v22;
    else
      v29 = v27;
    v30 = sub_1C59F0C34(v28, (_DWORD *)&v146 + 1, &v145, &v143, (_QWORD *)a3, 1);
    if (!v30)
      goto LABEL_120;
    v31 = (const std::string::value_type *)v30;
    v32 = *(_QWORD *)(a3 + 48);
    v134 = v29;
    if (*(_BYTE *)(a3 + 60))
    {
      if (v32)
      {
        v33 = *(const char **)(a3 + 40);
        v34 = strlen(v33);
        sub_1C484371C((uint64_t)&v156, v34 + 2);
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v156;
        else
          v35 = (std::string *)v156.__r_.__value_.__r.__words[0];
        LOWORD(v35->__r_.__value_.__l.__data_) = 23339;
        v36 = &v35->__r_.__value_.__s.__data_[2];
        if (v34)
          memmove(v36, v33, v34);
        v36[v34] = 0;
        v37 = std::string::append(&v156, "(");
        v38 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v153.__r_.__value_.__r.__words[2] = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v39 = std::string::append(&v153, *(const std::string::value_type **)(a3 + 48));
        v40 = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = std::string::append(&v136, ") ");
        v42 = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)v138 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        *(_QWORD *)&v138[16] = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append((std::string *)v138, v31);
        v44 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        v45 = std::string::append(&v140, "]");
        v46 = v45->__r_.__value_.__r.__words[0];
        v151[0] = v45->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v151 + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
        v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v152[0] = v151[0];
        *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)v151 + 7);
        v151[0] = 0;
        *(_QWORD *)((char *)v151 + 7) = 0;
        v48 = a4->u64[1];
        v49 = a4[1].u64[0];
        if (v48 < v49)
          goto LABEL_52;
        v50 = a4->i64[0];
        v51 = (uint64_t)(v48 - a4->i64[0]) >> 5;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 59)
          goto LABEL_133;
        if ((uint64_t)(v49 - v50) >> 4 > v52)
          v52 = (uint64_t)(v49 - v50) >> 4;
        if (v49 - v50 >= 0x7FFFFFFFFFFFFFE0)
          v53 = 0x7FFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        v149 = 0;
        v150 = a4 + 1;
        if (v53 >> 59)
          goto LABEL_134;
        v54 = (char *)operator new(32 * v53);
        v55 = &v54[32 * v51];
        v56 = v152[0];
        *(_QWORD *)v55 = v46;
        *((_QWORD *)v55 + 1) = v56;
        *(_QWORD *)(v55 + 15) = *(_QWORD *)((char *)v152 + 7);
        v55[23] = v47;
        memset(v152, 0, 15);
        *((_QWORD *)v55 + 3) = v134;
        if (v48 != v50)
        {
          v57 = &v54[32 * v51];
          do
          {
            v58 = *(_OWORD *)(v48 - 32);
            *((_QWORD *)v57 - 2) = *(_QWORD *)(v48 - 16);
            *((_OWORD *)v57 - 2) = v58;
            *(_QWORD *)(v48 - 24) = 0;
            *(_QWORD *)(v48 - 16) = 0;
            *(_QWORD *)(v48 - 32) = 0;
            *((_QWORD *)v57 - 1) = *(_QWORD *)(v48 - 8);
            v57 -= 32;
            v48 -= 32;
          }
          while (v48 != v50);
          goto LABEL_87;
        }
        goto LABEL_88;
      }
      v73 = *(const char **)(a3 + 40);
      v74 = strlen(v73);
      sub_1C484371C((uint64_t)&v136, v74 + 2);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v136;
      else
        v75 = (std::string *)v136.__r_.__value_.__r.__words[0];
      LOWORD(v75->__r_.__value_.__l.__data_) = 23339;
      v76 = &v75->__r_.__value_.__s.__data_[2];
      if (v74)
        memmove(v76, v73, v74);
      v76[v74] = 0;
      v77 = std::string::append(&v136, " ");
      v78 = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)v138 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      *(_QWORD *)&v138[16] = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      v79 = std::string::append((std::string *)v138, v31);
      v80 = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v140, "]");
      v82 = v81->__r_.__value_.__r.__words[0];
      v156.__r_.__value_.__r.__words[0] = v81->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v81->__r_.__value_.__r.__words[1] + 7);
      v83 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      v153.__r_.__value_.__r.__words[0] = v156.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 7);
      v84 = a4->u64[1];
      v85 = a4[1].u64[0];
      if (v84 >= v85)
      {
        v86 = a4->i64[0];
        v87 = (uint64_t)(v84 - a4->i64[0]) >> 5;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 59)
          goto LABEL_133;
        if ((uint64_t)(v85 - v86) >> 4 > v88)
          v88 = (uint64_t)(v85 - v86) >> 4;
        if (v85 - v86 >= 0x7FFFFFFFFFFFFFE0)
          v89 = 0x7FFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        v149 = 0;
        v150 = a4 + 1;
        if (v89 >> 59)
          goto LABEL_134;
        v90 = (char *)operator new(32 * v89);
        v91 = &v90[32 * v87];
        v92 = v153.__r_.__value_.__r.__words[0];
        *(_QWORD *)v91 = v82;
        *((_QWORD *)v91 + 1) = v92;
        *(_QWORD *)(v91 + 15) = *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7);
        v91[23] = v83;
        v153.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7) = 0;
        *((_QWORD *)v91 + 3) = v134;
        if (v84 != v86)
        {
          v93 = &v90[32 * v87];
          do
          {
            v94 = *(_OWORD *)(v84 - 32);
            *((_QWORD *)v93 - 2) = *(_QWORD *)(v84 - 16);
            *((_OWORD *)v93 - 2) = v94;
            *(_QWORD *)(v84 - 24) = 0;
            *(_QWORD *)(v84 - 16) = 0;
            *(_QWORD *)(v84 - 32) = 0;
            *((_QWORD *)v93 - 1) = *(_QWORD *)(v84 - 8);
            v93 -= 32;
            v84 -= 32;
          }
          while (v84 != v86);
          goto LABEL_110;
        }
        goto LABEL_111;
      }
    }
    else
    {
      if (v32)
      {
        v59 = *(const char **)(a3 + 40);
        v60 = strlen(v59);
        sub_1C484371C((uint64_t)&v156, v60 + 2);
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v156;
        else
          v61 = (std::string *)v156.__r_.__value_.__r.__words[0];
        LOWORD(v61->__r_.__value_.__l.__data_) = 23341;
        v62 = &v61->__r_.__value_.__s.__data_[2];
        if (v60)
          memmove(v62, v59, v60);
        v62[v60] = 0;
        v63 = std::string::append(&v156, "(");
        v64 = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v153.__r_.__value_.__r.__words[2] = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        v65 = std::string::append(&v153, *(const std::string::value_type **)(a3 + 48));
        v66 = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        v67 = std::string::append(&v136, ") ");
        v68 = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)v138 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        *(_QWORD *)&v138[16] = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        v69 = std::string::append((std::string *)v138, v31);
        v70 = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        v71 = std::string::append(&v140, "]");
        v46 = v71->__r_.__value_.__r.__words[0];
        v151[0] = v71->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v151 + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
        v47 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        v152[0] = v151[0];
        *(_QWORD *)((char *)v152 + 7) = *(_QWORD *)((char *)v151 + 7);
        v151[0] = 0;
        *(_QWORD *)((char *)v151 + 7) = 0;
        v48 = a4->u64[1];
        v49 = a4[1].u64[0];
        if (v48 < v49)
        {
LABEL_52:
          *(_QWORD *)v48 = v46;
          *(_QWORD *)(v48 + 8) = v152[0];
          *(_QWORD *)(v48 + 15) = *(_QWORD *)((char *)v152 + 7);
          *(_BYTE *)(v48 + 23) = v47;
          memset(v152, 0, 15);
          *(_QWORD *)(v48 + 24) = v134;
          v72 = v48 + 32;
LABEL_90:
          a4->i64[1] = v72;
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if ((v138[23] & 0x80000000) != 0)
            operator delete(*(void **)v138);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_120;
          v111 = (void *)v156.__r_.__value_.__r.__words[0];
          goto LABEL_119;
        }
        v105 = a4->i64[0];
        v106 = (uint64_t)(v48 - a4->i64[0]) >> 5;
        v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) >> 59)
          goto LABEL_133;
        if ((uint64_t)(v49 - v105) >> 4 > v107)
          v107 = (uint64_t)(v49 - v105) >> 4;
        if (v49 - v105 >= 0x7FFFFFFFFFFFFFE0)
          v53 = 0x7FFFFFFFFFFFFFFLL;
        else
          v53 = v107;
        v149 = 0;
        v150 = a4 + 1;
        if (v53 >> 59)
          goto LABEL_134;
        v54 = (char *)operator new(32 * v53);
        v55 = &v54[32 * v106];
        v108 = v152[0];
        *(_QWORD *)v55 = v46;
        *((_QWORD *)v55 + 1) = v108;
        *(_QWORD *)(v55 + 15) = *(_QWORD *)((char *)v152 + 7);
        v55[23] = v47;
        memset(v152, 0, 15);
        *((_QWORD *)v55 + 3) = v134;
        if (v48 != v105)
        {
          v57 = &v54[32 * v106];
          do
          {
            v109 = *(_OWORD *)(v48 - 32);
            *((_QWORD *)v57 - 2) = *(_QWORD *)(v48 - 16);
            *((_OWORD *)v57 - 2) = v109;
            *(_QWORD *)(v48 - 24) = 0;
            *(_QWORD *)(v48 - 16) = 0;
            *(_QWORD *)(v48 - 32) = 0;
            *((_QWORD *)v57 - 1) = *(_QWORD *)(v48 - 8);
            v57 -= 32;
            v48 -= 32;
          }
          while (v48 != v105);
LABEL_87:
          v110 = *a4;
          v49 = a4[1].u64[0];
LABEL_89:
          v72 = (unint64_t)(v55 + 32);
          a4->i64[0] = (uint64_t)v57;
          a4->i64[1] = (uint64_t)(v55 + 32);
          v148 = v110;
          a4[1].i64[0] = (uint64_t)&v54[32 * v53];
          v149 = v49;
          v147 = (std::string *)v110.i64[0];
          sub_1C5465AA0((uint64_t)&v147);
          goto LABEL_90;
        }
LABEL_88:
        v110 = vdupq_n_s64(v48);
        v57 = v55;
        goto LABEL_89;
      }
      v95 = *(const char **)(a3 + 40);
      v96 = strlen(v95);
      sub_1C484371C((uint64_t)&v136, v96 + 2);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = &v136;
      else
        v97 = (std::string *)v136.__r_.__value_.__r.__words[0];
      LOWORD(v97->__r_.__value_.__l.__data_) = 23341;
      v98 = &v97->__r_.__value_.__s.__data_[2];
      if (v96)
        memmove(v98, v95, v96);
      v98[v96] = 0;
      v99 = std::string::append(&v136, " ");
      v100 = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)v138 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      *(_QWORD *)&v138[16] = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      v101 = std::string::append((std::string *)v138, v31);
      v102 = v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      v103 = std::string::append(&v140, "]");
      v82 = v103->__r_.__value_.__r.__words[0];
      v156.__r_.__value_.__r.__words[0] = v103->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v103->__r_.__value_.__r.__words[1] + 7);
      v83 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
      v103->__r_.__value_.__l.__size_ = 0;
      v103->__r_.__value_.__r.__words[2] = 0;
      v103->__r_.__value_.__r.__words[0] = 0;
      v153.__r_.__value_.__r.__words[0] = v156.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 7);
      v84 = a4->u64[1];
      v85 = a4[1].u64[0];
      if (v84 >= v85)
      {
        v112 = a4->i64[0];
        v113 = (uint64_t)(v84 - a4->i64[0]) >> 5;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 59)
LABEL_133:
          abort();
        if ((uint64_t)(v85 - v112) >> 4 > v114)
          v114 = (uint64_t)(v85 - v112) >> 4;
        if (v85 - v112 >= 0x7FFFFFFFFFFFFFE0)
          v89 = 0x7FFFFFFFFFFFFFFLL;
        else
          v89 = v114;
        v149 = 0;
        v150 = a4 + 1;
        if (v89 >> 59)
LABEL_134:
          sub_1C4764EE4();
        v90 = (char *)operator new(32 * v89);
        v91 = &v90[32 * v113];
        v115 = v153.__r_.__value_.__r.__words[0];
        *(_QWORD *)v91 = v82;
        *((_QWORD *)v91 + 1) = v115;
        *(_QWORD *)(v91 + 15) = *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7);
        v91[23] = v83;
        v153.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7) = 0;
        *((_QWORD *)v91 + 3) = v134;
        if (v84 != v112)
        {
          v93 = &v90[32 * v113];
          do
          {
            v116 = *(_OWORD *)(v84 - 32);
            *((_QWORD *)v93 - 2) = *(_QWORD *)(v84 - 16);
            *((_OWORD *)v93 - 2) = v116;
            *(_QWORD *)(v84 - 24) = 0;
            *(_QWORD *)(v84 - 16) = 0;
            *(_QWORD *)(v84 - 32) = 0;
            *((_QWORD *)v93 - 1) = *(_QWORD *)(v84 - 8);
            v93 -= 32;
            v84 -= 32;
          }
          while (v84 != v112);
LABEL_110:
          v117 = *a4;
          v85 = a4[1].u64[0];
LABEL_112:
          v104 = (unint64_t)(v91 + 32);
          a4->i64[0] = (uint64_t)v93;
          a4->i64[1] = (uint64_t)(v91 + 32);
          v148 = v117;
          a4[1].i64[0] = (uint64_t)&v90[32 * v89];
          v149 = v85;
          v147 = (std::string *)v117.i64[0];
          sub_1C5465AA0((uint64_t)&v147);
          goto LABEL_113;
        }
LABEL_111:
        v117 = vdupq_n_s64(v84);
        v93 = v91;
        goto LABEL_112;
      }
    }
    *(_QWORD *)v84 = v82;
    *(_QWORD *)(v84 + 8) = v153.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v84 + 15) = *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(v84 + 23) = v83;
    *(_QWORD *)(v84 + 24) = v134;
    v104 = v84 + 32;
LABEL_113:
    a4->i64[1] = v104;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if ((v138[23] & 0x80000000) != 0)
      operator delete(*(void **)v138);
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_120;
    v111 = (void *)v136.__r_.__value_.__r.__words[0];
LABEL_119:
    operator delete(v111);
LABEL_120:
    if (++v19 == v133)
      goto LABEL_121;
  }
  v121 = v143;
  v120 = v144;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v144 + 136))(&v156, v144, v143);
  if ((v156.__r_.__value_.__s.__data_[16] & 1) != 0)
  {
    v129 = v156.__r_.__value_.__r.__words[0];
    v156.__r_.__value_.__r.__words[0] = 0;
    v135 = v129;
    v128 = (uint64_t *)&v135;
    goto LABEL_137;
  }
  v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80) + 8 * v121);
  v123 = (const char *)(v122 + 16);
  if (*(_BYTE *)(v122 + 31))
    v124 = 16;
  else
    v124 = strlen(v123);
  v155 = 1283;
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"objc_method_t struct extends past end of (";
  v153.__r_.__value_.__r.__words[2] = (std::string::size_type)v123;
  v154 = v124;
  v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
  v136.__r_.__value_.__r.__words[2] = (std::string::size_type)",";
  v137 = 770;
  *(_QWORD *)v138 = &v136;
  *(_OWORD *)&v138[16] = *(_OWORD *)&v156.__r_.__value_.__l.__data_;
  v139 = 1282;
  v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
  v140.__r_.__value_.__r.__words[2] = (std::string::size_type)") section at address: 0x";
  v141 = 770;
  v125 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v120 + 144))(v120, v121);
  v152[0] = v125 + HIDWORD(v146);
  v147 = &v140;
  v148.i64[1] = (uint64_t)v152;
  LOWORD(v150) = 3586;
  v119 = v130;
LABEL_129:
  sub_1C59D7FE0(v119, (uint64_t *)&v147);
  if ((v156.__r_.__value_.__s.__data_[16] & 1) != 0)
  {
    v126 = v156.__r_.__value_.__r.__words[0];
    v156.__r_.__value_.__r.__words[0] = 0;
    if (v126)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v126 + 8))(v126);
  }
}

uint64_t sub_1C59F4F9C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_1E8189350;
  sub_1C59F5034((void ***)(a1 + 264));
  v2 = *(void **)(a1 + 232);
  if (v2 != (void *)(a1 + 248))
    free(v2);
  v3 = *(void **)(a1 + 208);
  if (v3 != (void *)(a1 + 224))
    free(v3);
  v4 = *(void **)(a1 + 128);
  if (v4 != (void *)(a1 + 144))
    free(v4);
  v5 = *(void **)(a1 + 104);
  if (v5 != (void *)(a1 + 120))
    free(v5);
  v6 = *(void **)(a1 + 80);
  if (v6 != (void *)(a1 + 96))
    free(v6);
  return a1;
}

void ***sub_1C59F5034(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x1CAA32FC0](v2, 0x1080C40E09A0471);
  }
  return a1;
}

uint64_t sub_1C59F508C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unsigned int v10;
  int v11;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 > a3 || a3 + 72 > v4 + *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v13 = "Structure read out-of-range";
    v14 = 259;
    result = sub_1C59D7FE0(&v15, (uint64_t *)&v13);
    *(_BYTE *)(v3 + 72) |= 1u;
    *(_QWORD *)v3 = v15;
  }
  else
  {
    v6 = *(int8x8_t *)a3;
    v7 = *(int8x16_t *)(a3 + 24);
    v8 = *(int8x16_t *)(a3 + 40);
    v9 = *(int8x16_t *)(a3 + 56);
    v10 = *(_DWORD *)(a2 + 8);
    v5 = v10 > 0x13;
    v11 = (1 << v10) & 0xAAC00;
    if (!v5 && v11 != 0)
    {
      v6 = vrev32_s8(v6);
      v7 = vrev64q_s8(v7);
      v8 = vrev64q_s8(v8);
      v9 = vrev32q_s8(v9);
    }
    *(_BYTE *)(result + 72) &= ~1u;
    *(int8x8_t *)result = v6;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
    *(int8x16_t *)(result + 24) = v7;
    *(int8x16_t *)(result + 40) = v8;
    *(int8x16_t *)(result + 56) = v9;
  }
  return result;
}

uint64_t sub_1C59F516C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unsigned int v9;
  int v10;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 > a3 || a3 + 56 > v4 + *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v12 = "Structure read out-of-range";
    v13 = 259;
    result = sub_1C59D7FE0(&v14, (uint64_t *)&v12);
    *(_BYTE *)(v3 + 56) |= 1u;
    *(_QWORD *)v3 = v14;
  }
  else
  {
    v6 = *(int8x8_t *)a3;
    v7 = *(int8x16_t *)(a3 + 24);
    v8 = *(int8x16_t *)(a3 + 40);
    v9 = *(_DWORD *)(a2 + 8);
    v5 = v9 > 0x13;
    v10 = (1 << v9) & 0xAAC00;
    if (!v5 && v10 != 0)
    {
      v6 = vrev32_s8(v6);
      v7 = vrev32q_s8(v7);
      v8 = vrev32q_s8(v8);
    }
    *(_BYTE *)(result + 56) &= ~1u;
    *(int8x8_t *)result = v6;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
    *(int8x16_t *)(result + 24) = v7;
    *(int8x16_t *)(result + 40) = v8;
  }
  return result;
}

uint64_t sub_1C59F5240(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, (v8 << 6) - 3);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, (v9 << 6) - 3);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 64);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + (v9 << 6)), (const void *)(*(_QWORD *)a2 + (v9 << 6)), *(_QWORD *)a2 + (v10 << 6) - (*(_QWORD *)a2 + (v9 << 6)));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

void sub_1C59F5360(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C59F53D8(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t i;
  void *v23;

  v8 = a1[2];
  v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          v12 = *(void **)(v10 - 24);
          if (v12)
          {
            *(_QWORD *)(v10 - 16) = v12;
            operator delete(v12);
          }
          v10 -= 56;
        }
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      goto LABEL_25;
    v13 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    v15 = v13 >= 0x249249249249249 ? 0x492492492492492 : v14;
    if (v15 > 0x492492492492492)
LABEL_25:
      abort();
    v16 = 56 * v15;
    v17 = operator new(56 * v15);
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v17;
    a1[2] = (uint64_t)v17 + v16;
    v18 = a1;
    v19 = a2;
    goto LABEL_19;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 3) < a4)
  {
    v20 = (__int128 *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    sub_1C59F559C(a2, v20, v9);
    v18 = a1;
    v19 = v20;
LABEL_19:
    sub_1C59EE450(v18, v19, a3);
    return;
  }
  v21 = sub_1C59F559C(a2, a3, v9);
  for (i = a1[1]; i != v21; i -= 56)
  {
    v23 = *(void **)(i - 24);
    if (v23)
    {
      *(_QWORD *)(i - 16) = v23;
      operator delete(v23);
    }
  }
  a1[1] = v21;
}

uint64_t sub_1C59F559C(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_OWORD *)(a3 + 12) = *(__int128 *)((char *)v5 + 12);
      *(_OWORD *)a3 = v6;
      if (v5 != (__int128 *)a3)
        sub_1C4DE4490((_QWORD *)(a3 + 32), *((char **)v5 + 4), *((char **)v5 + 5), (uint64_t)(*((_QWORD *)v5 + 5) - *((_QWORD *)v5 + 4)) >> 3);
      v5 = (__int128 *)((char *)v5 + 56);
      a3 += 56;
    }
    while (v5 != a2);
  }
  return a3;
}

unint64_t sub_1C59F5610(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 144 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 144);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 144);
    }
  }
  return v2;
}

uint64_t sub_1C59F5688(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 144 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 144 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 144);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 144 * v9), (const void *)(*(_QWORD *)a2 + 144 * v9), *(_QWORD *)a2 + 144 * v10 - (*(_QWORD *)a2 + 144 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C59F57B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_1C59F5810(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t *v19;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  v19 = a1 + 1;
  if (v5 > 0x492492492492492)
    sub_1C4764EE4();
  v7 = (char *)operator new(56 * v5);
  v8 = &v7[56 * v2];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 12) = *(_OWORD *)(a2 + 12);
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  sub_1C4DFE394((_QWORD *)v8 + 4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  v10 = a1->i64[0];
  v9 = a1->u64[1];
  if (v9 == a1->i64[0])
  {
    v13 = vdupq_n_s64(v9);
    v11 = v8;
  }
  else
  {
    v11 = v8;
    do
    {
      v12 = *(_OWORD *)(v9 - 56);
      *(_OWORD *)(v11 - 44) = *(_OWORD *)(v9 - 44);
      *(_OWORD *)(v11 - 56) = v12;
      *((_QWORD *)v11 - 2) = 0;
      *((_QWORD *)v11 - 1) = 0;
      *((_QWORD *)v11 - 3) = 0;
      *(_OWORD *)(v11 - 24) = *(_OWORD *)(v9 - 24);
      *((_QWORD *)v11 - 1) = *(_QWORD *)(v9 - 8);
      v11 -= 56;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v9 -= 56;
    }
    while (v9 != v10);
    v13 = *a1;
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v8 + 56);
  v17 = v13;
  v14 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[56 * v5];
  v18 = v14;
  v16 = v13.i64[0];
  sub_1C59F57B0((uint64_t)&v16);
  return v8 + 56;
}

uint64_t sub_1C59F59A8@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  _BYTE *v9;
  char v10;
  char v11;

  v6 = operator new();
  v7 = 1;
  v11 = 1;
  if (*a1)
  {
    v9 = a1;
    v7 = 3;
  }
  v10 = v7;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v6, (llvm::Twine *)&v9, *a2);
  *a3 = result;
  return result;
}

uint64_t llvm::object::MachOUniversalBinary::ObjectForArch::getAsObjectFile@<X0>(llvm::object::MachOUniversalBinary::ObjectForArch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD v10[2];
  __int128 v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsObjectFile() called when Parent is a nullptr", (const char *)1);
  v3 = *(_QWORD *)(v2 + 24);
  if ((*(_DWORD *)(v2 + 48) | 0x1000000) == 0xCBFEBABE)
  {
    v4 = (int *)((char *)this + 12);
    v5 = *((unsigned int *)this + 5);
    v6 = *((unsigned int *)this + 6);
  }
  else
  {
    v4 = (int *)((char *)this + 32);
    v5 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 6);
  }
  if (v3 < v5)
    v5 = *(_QWORD *)(v2 + 24);
  v7 = v3 - v5;
  if (v7 >= v6)
    v7 = v6;
  v8 = *v4;
  v10[0] = *(_QWORD *)(v2 + 16) + v5;
  v10[1] = v7;
  v11 = *(_OWORD *)(v2 + 32);
  return llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v10, v8, *((_DWORD *)this + 2), a2);
}

void llvm::object::MachOUniversalBinary::ObjectForArch::getAsIRObject(llvm::object::MachOUniversalBinary::ObjectForArch *this@<X0>, llvm::LLVMContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD v8[2];

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsIRObject() called when Parent is a nullptr", (const char *)1);
  v4 = *(_QWORD *)(v3 + 24);
  if ((*(_DWORD *)(v3 + 48) | 0x1000000) == 0xCBFEBABE)
  {
    v5 = *((unsigned int *)this + 5);
    v6 = *((unsigned int *)this + 6);
  }
  else
  {
    v5 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 6);
  }
  if (v4 < v5)
    v5 = *(_QWORD *)(v3 + 24);
  v7 = v4 - v5;
  if (v7 >= v6)
    v7 = v6;
  *(_QWORD *)&v8[0] = *(_QWORD *)(v3 + 16) + v5;
  *((_QWORD *)&v8[0] + 1) = v7;
  v8[1] = *(_OWORD *)(v3 + 32);
  llvm::object::IRObjectFile::create(v8, (uint64_t)a2, a3);
}

char *llvm::object::MachOUniversalBinary::ObjectForArch::getAsArchive@<X0>(llvm::object::MachOUniversalBinary::ObjectForArch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  __int128 v9;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsArchive() called when Parent is a nullptr", (const char *)1);
  v3 = *(_QWORD *)(v2 + 24);
  if ((*(_DWORD *)(v2 + 48) | 0x1000000) == 0xCBFEBABE)
  {
    v4 = *((unsigned int *)this + 5);
    v5 = *((unsigned int *)this + 6);
  }
  else
  {
    v4 = *((_QWORD *)this + 5);
    v5 = *((_QWORD *)this + 6);
  }
  if (v3 < v4)
    v4 = *(_QWORD *)(v2 + 24);
  v6 = v3 - v4;
  if (v6 >= v5)
    v6 = v5;
  v8[0] = *(_QWORD *)(v2 + 16) + v4;
  v8[1] = v6;
  v9 = *(_OWORD *)(v2 + 32);
  return llvm::object::Archive::create((uint64_t)v8, a2);
}

uint64_t llvm::object::MachOUniversalBinary::ObjectForArch::getAsMetalLib@<X0>(llvm::object::MachOUniversalBinary::ObjectForArch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v10[2];

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    llvm::report_fatal_error((llvm *)"MachOUniversalBinary::ObjectForArch::getAsMetalLib() called when Parent is a nullptr", (const char *)1);
  v3 = *(_DWORD *)(v2 + 48);
  if ((v3 | 0x1000000) == 0xCBFEBABE)
    v4 = *((unsigned int *)this + 5);
  else
    v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v2 + 24);
  if ((v3 | 0x1000000) == 0xCBFEBABE)
    v6 = *((unsigned int *)this + 6);
  else
    v6 = *((_QWORD *)this + 6);
  if (v5 < v4)
    v4 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 16) + v4;
  v8 = v5 - v4;
  if (v8 >= v6)
    v8 = v6;
  *(_QWORD *)&v10[0] = v7;
  *((_QWORD *)&v10[0] + 1) = v8;
  v10[1] = *(_OWORD *)(v2 + 32);
  return sub_1C62D8FF8(a2, v10);
}

uint64_t llvm::object::MachOUniversalBinary::MachOUniversalBinary(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  const char **v10;
  const char *v11;
  int v12;
  const char **v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  const char *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v62;
  unsigned int *v63;
  const char *v64;
  _DWORD *v65;
  _QWORD *v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  const char *v78;
  llvm::Twine *v79;
  const char *v80;
  const char *v81;
  unsigned int *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  const char *v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t *v92;
  _DWORD *v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD v100[4];
  __int16 v101;
  _QWORD v102[4];
  __int16 v103;
  _QWORD v104[4];
  __int16 v105;
  _QWORD v106[4];
  __int16 v107;
  _QWORD v108[4];
  __int16 v109;
  _QWORD v110[4];
  __int16 v111;
  _QWORD v112[4];
  __int16 v113;
  uint64_t v114[4];
  __int16 v115;
  _QWORD v116[4];
  __int16 v117;
  const char *v118;
  _QWORD v119[4];
  __int16 v120;
  _QWORD *v121;
  _BYTE v122[4];
  uint64_t v123;
  unsigned int v124;
  _WORD v125[2];
  _BYTE v126[4];
  unint64_t v127;
  uint64_t v128;
  _QWORD v129[4];
  __int16 v130;
  _QWORD v131[4];
  __int16 v132;
  _QWORD v133[2];
  _QWORD *v134;
  __int16 v135;
  uint64_t v136[2];
  const char *v137;
  __int16 v138;
  uint64_t v139[2];
  uint64_t v140;
  __int16 v141;
  uint64_t v142[2];
  const char *v143;
  __int16 v144;
  _QWORD v145[4];
  __int16 v146;
  _QWORD v147[2];
  const char *v148;
  __int16 v149;
  _QWORD v150[2];
  const char *v151;
  __int16 v152;
  _QWORD v153[4];
  __int16 v154;
  const char *v155;
  _BYTE v156[4];
  const char *v157;
  unsigned int v158;
  _BYTE v159[4];
  _WORD v160[2];
  _BYTE v161[4];
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD v165[4];
  char v166;
  char v167;
  const char *v168;
  __int16 v169;
  const char *v170;
  __int16 v171;
  __int128 v172;
  __int128 v173;

  v6 = a2[1];
  v172 = *a2;
  v5 = v172;
  v173 = v6;
  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)a1 = &off_1E8189F78;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 <= 7)
  {
    v62 = operator new();
    v155 = "File too small to be a Mach-O universal file";
    v160[0] = 259;
    v59 = llvm::object::GenericBinaryError::GenericBinaryError(v62, (llvm::Twine *)&v155, 2u);
    goto LABEL_112;
  }
  v8 = __rev32(**(_QWORD **)(a1 + 16));
  *(_QWORD *)(a1 + 48) = v8;
  if (!HIDWORD(v8))
  {
    v170 = "contains zero architecture types";
    v171 = 259;
    v10 = &v170;
    goto LABEL_105;
  }
  if ((_DWORD)v8 == -872498498)
  {
LABEL_6:
    v9 = 20 * HIDWORD(v8) + 8;
    goto LABEL_9;
  }
  if ((_DWORD)v8 != -889275713)
  {
    if ((_DWORD)v8 == -889275714)
      goto LABEL_6;
    v168 = "bad magic number";
    v169 = 259;
    v10 = &v168;
LABEL_105:
    sub_1C59F69F4((uint64_t *)&v155, (llvm::Twine *)v10);
    v60 = v155;
    goto LABEL_110;
  }
  v9 = (32 * HIDWORD(v8)) | 8;
LABEL_9:
  if (v7 >= v9)
  {
    v15 = 0;
    v16 = v9;
    v17 = (unsigned int *)v159;
    do
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v155, a1, v15);
      v18 = *((_DWORD *)v155 + 12);
      if ((v18 | 0x1000000) == 0xCBFEBABE)
        v19 = HIDWORD(v157);
      else
        v19 = v162;
      if ((v18 | 0x1000000) == 0xCBFEBABE)
        v20 = v158;
      else
        v20 = v163;
      if (v20 + v19 > v7)
      {
        v63 = (unsigned int *)v156;
        if ((v18 | 0x1000000) != 0xCBFEBABE)
          v63 = (unsigned int *)v160;
        v64 = (const char *)*v63;
        v147[0] = "offset plus size of cputype (";
        v148 = v64;
        v149 = 2051;
        v150[0] = v147;
        v151 = ") cpusubtype (";
        v152 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v65 = &v157;
        else
          v65 = v161;
        v75 = *v65 & 0xFFFFFF;
        v121 = v150;
        v123 = v75;
        v125[0] = 2050;
        v153[0] = &v121;
        v153[2] = ") extends past the end of the file";
        v154 = 770;
        sub_1C59F69F4(v142, (llvm::Twine *)v153);
        v60 = (const char *)v142[0];
        goto LABEL_110;
      }
      v21 = (uint64_t *)v159;
      if ((v18 | 0x1000000) != 0xCBFEBABE)
        v21 = &v164;
      if (*(_DWORD *)v21 >= 0x10u)
      {
        if ((v18 | 0x1000000) != 0xCBFEBABE)
          v17 = (unsigned int *)&v164;
        v66 = (_QWORD *)*v17;
        v133[0] = "align (2^";
        v134 = v66;
        v135 = 2051;
        v136[0] = (uint64_t)v133;
        v137 = ") too large for cputype (";
        v138 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v67 = (unsigned int *)v156;
        else
          v67 = (unsigned int *)v160;
        v76 = *v67;
        v139[0] = (uint64_t)v136;
        v140 = v76;
        v141 = 2050;
        v142[0] = (uint64_t)v139;
        v143 = ") cpusubtype (";
        v144 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v77 = &v157;
        else
          v77 = v161;
        v78 = (const char *)(*v77 & 0xFFFFFF);
        v147[0] = v142;
        v148 = v78;
        v149 = 2050;
        v150[0] = v147;
        v151 = ") (maximum 2^";
        v152 = 770;
        v121 = v150;
        v123 = 15;
        v125[0] = 2050;
        v145[0] = &v121;
        v145[2] = ")";
        v146 = 770;
        v79 = (llvm::Twine *)v145;
        goto LABEL_174;
      }
      if ((v18 | 0x1000000) == 0xCBFEBABE)
        v22 = HIDWORD(v157);
      else
        v22 = v162;
      v23 = (uint64_t *)v159;
      if ((v18 | 0x1000000) != 0xCBFEBABE)
        v23 = &v164;
      if ((v22 & ~(-1 << *(_DWORD *)v23)) != 0)
      {
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v68 = HIDWORD(v157);
        else
          v68 = v162;
        v112[0] = v68;
        v133[0] = "offset: ";
        v134 = v112;
        v135 = 3075;
        v136[0] = (uint64_t)v133;
        v137 = " for cputype (";
        v138 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v82 = (unsigned int *)v156;
        else
          v82 = (unsigned int *)v160;
        v86 = *v82;
        v139[0] = (uint64_t)v136;
        v140 = v86;
        v141 = 2050;
        v142[0] = (uint64_t)v139;
        v143 = ") cpusubtype (";
        v144 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v87 = &v157;
        else
          v87 = v161;
        v90 = (const char *)(*v87 & 0xFFFFFF);
        v147[0] = v142;
        v148 = v90;
        v149 = 2050;
        v150[0] = v147;
        v151 = ") not aligned on it's alignment (2^";
        v152 = 770;
        if ((v18 | 0x1000000) != 0xCBFEBABE)
          v17 = (unsigned int *)&v164;
        v91 = *v17;
        v121 = v150;
        v123 = v91;
        v125[0] = 2050;
        v131[0] = &v121;
        v131[2] = ")";
        v132 = 770;
        v79 = (llvm::Twine *)v131;
LABEL_174:
        sub_1C59F69F4(v114, v79);
        v60 = (const char *)v114[0];
        goto LABEL_110;
      }
      if ((v18 | 0x1000000) == 0xCBFEBABE)
        v24 = HIDWORD(v157);
      else
        v24 = v162;
      if (v24 < v16)
      {
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v69 = (unsigned int *)v156;
        else
          v69 = (unsigned int *)v160;
        v83 = *v69;
        v139[0] = (uint64_t)"cputype (";
        v140 = v83;
        v141 = 2051;
        v142[0] = (uint64_t)v139;
        v143 = ") cpusubtype (";
        v144 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v84 = &v157;
        else
          v84 = v161;
        v88 = (const char *)(*v84 & 0xFFFFFF);
        v147[0] = v142;
        v148 = v88;
        v149 = 2050;
        v150[0] = v147;
        v151 = ") offset ";
        v152 = 770;
        if ((v18 | 0x1000000) == 0xCBFEBABE)
          v89 = HIDWORD(v157);
        else
          v89 = v162;
        v133[0] = v89;
        v121 = v150;
        v123 = (uint64_t)v133;
        v125[0] = 3074;
        v129[0] = &v121;
        v129[2] = " overlaps universal headers";
        v130 = 770;
        sub_1C59F69F4(v136, (llvm::Twine *)v129);
        v60 = (const char *)v136[0];
        goto LABEL_110;
      }
      ++v15;
      v25 = *(_DWORD *)(a1 + 52);
    }
    while (v15 < v25);
    if (!v25)
      goto LABEL_111;
    v26 = 0;
    v27 = (unsigned int *)v156;
    v95 = (unsigned int *)v122;
    v92 = &v123;
    v93 = &v157;
    while (1)
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v155, a1, v26++);
      v28 = *(_DWORD *)(a1 + 52);
      if (v26 < v28)
        break;
LABEL_102:
      v59 = 0;
      if (v26 >= v28)
        goto LABEL_112;
    }
    v29 = v155;
    v30 = HIDWORD(v157);
    v31 = v158;
    v32 = v26;
    v33 = v162;
    v94 = v163;
    while (1)
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v121, a1, v32);
      v34 = *((_DWORD *)v29 + 12);
      v35 = (int *)v156;
      if ((v34 | 0x1000000) != 0xCBFEBABE)
        v35 = (int *)v160;
      v36 = *v35;
      v37 = *((_DWORD *)v121 + 12);
      v38 = v122;
      if ((v37 | 0x1000000) != 0xCBFEBABE)
        v38 = v125;
      if (v36 == *v38)
      {
        v39 = &v157;
        if ((v34 | 0x1000000) != 0xCBFEBABE)
          v39 = v161;
        v40 = &v123;
        if ((v37 | 0x1000000) != 0xCBFEBABE)
          v40 = (uint64_t *)v126;
        if (((*(_DWORD *)v40 ^ *v39) & 0xFFFFFF) == 0)
          break;
      }
      v41 = v30;
      if ((v34 | 0x1000000) != 0xCBFEBABE)
        v41 = v33;
      if ((v37 | 0x1000000) == 0xCBFEBABE)
        v42 = HIDWORD(v123);
      else
        v42 = v127;
      if (v41 >= v42)
      {
        v43 = v30;
        if ((v34 | 0x1000000) != 0xCBFEBABE)
          v43 = v33;
        v44 = (v37 | 0x1000000) == 0xCBFEBABE ? HIDWORD(v123) : v127;
        v45 = (v37 | 0x1000000) == 0xCBFEBABE ? v124 : v128;
        if (v43 < v45 + v44)
          goto LABEL_127;
      }
      v46 = v30;
      if ((v34 | 0x1000000) != 0xCBFEBABE)
        v46 = v33;
      v47 = v31;
      if ((v34 | 0x1000000) != 0xCBFEBABE)
        v47 = v94;
      v48 = (v37 | 0x1000000) == 0xCBFEBABE ? HIDWORD(v123) : v127;
      if (v47 + v46 > v48)
      {
        v49 = v30;
        if ((v34 | 0x1000000) != 0xCBFEBABE)
          v49 = v33;
        v50 = v31;
        if ((v34 | 0x1000000) != 0xCBFEBABE)
          v50 = v94;
        v51 = (v37 | 0x1000000) == 0xCBFEBABE ? HIDWORD(v123) : v127;
        v52 = (v37 | 0x1000000) == 0xCBFEBABE ? v124 : v128;
        if (v50 + v49 < v52 + v51)
          goto LABEL_127;
      }
      v53 = v30;
      if ((v34 | 0x1000000) != 0xCBFEBABE)
        v53 = v33;
      v54 = (v37 | 0x1000000) == 0xCBFEBABE ? HIDWORD(v123) : v127;
      if (v53 <= v54)
      {
        v55 = v30;
        if ((v34 | 0x1000000) != 0xCBFEBABE)
          v55 = v33;
        v56 = v31;
        if ((v34 | 0x1000000) != 0xCBFEBABE)
          v56 = v94;
        v57 = (v37 | 0x1000000) == 0xCBFEBABE ? HIDWORD(v123) : v127;
        v58 = (v37 | 0x1000000) == 0xCBFEBABE ? v124 : v128;
        if (v56 + v55 >= v58 + v57)
        {
LABEL_127:
          if ((v34 | 0x1000000) != 0xCBFEBABE)
            v27 = (unsigned int *)v160;
          v70 = *v27;
          v100[0] = "cputype (";
          v100[2] = v70;
          v101 = 2051;
          v102[0] = v100;
          v102[2] = ") cpusubtype (";
          v103 = 770;
          if ((v34 | 0x1000000) != 0xCBFEBABE)
            v93 = v161;
          v71 = *v93 & 0xFFFFFF;
          v104[0] = v102;
          v104[2] = v71;
          v105 = 2050;
          v106[0] = v104;
          v106[2] = ") at offset ";
          v107 = 770;
          if ((v34 | 0x1000000) != 0xCBFEBABE)
            v30 = v33;
          v99 = v30;
          v108[0] = v106;
          v108[2] = &v99;
          v109 = 3074;
          v110[0] = v108;
          v110[2] = " with a size of ";
          v111 = 770;
          if ((v34 | 0x1000000) != 0xCBFEBABE)
            v31 = v94;
          v98 = v31;
          v112[0] = v110;
          v112[2] = &v98;
          v113 = 3074;
          v114[0] = (uint64_t)v112;
          v114[2] = (uint64_t)", overlaps cputype (";
          v115 = 770;
          if ((v37 | 0x1000000) != 0xCBFEBABE)
            v95 = (unsigned int *)v125;
          v72 = (_QWORD *)*v95;
          v133[0] = v114;
          v134 = v72;
          v135 = 2050;
          v136[0] = (uint64_t)v133;
          v137 = ") cpusubtype (";
          v138 = 770;
          if ((v37 | 0x1000000) != 0xCBFEBABE)
            v92 = (uint64_t *)v126;
          v73 = *(_DWORD *)v92 & 0xFFFFFF;
          v139[0] = (uint64_t)v136;
          v140 = v73;
          v141 = 2050;
          v142[0] = (uint64_t)v139;
          v143 = ") at offset ";
          v144 = 770;
          if ((v37 | 0x1000000) == 0xCBFEBABE)
            v74 = HIDWORD(v123);
          else
            v74 = v127;
          v97 = v74;
          v147[0] = v142;
          v148 = (const char *)&v97;
          v149 = 3074;
          v150[0] = v147;
          v151 = " with a size of ";
          v152 = 770;
          if ((v37 | 0x1000000) == 0xCBFEBABE)
            v85 = v124;
          else
            v85 = v128;
          v96 = v85;
          v116[0] = v150;
          v116[2] = &v96;
          v117 = 3074;
          sub_1C59F69F4((uint64_t *)&v118, (llvm::Twine *)v116);
          v60 = v118;
          goto LABEL_110;
        }
      }
      ++v32;
      v28 = *(_DWORD *)(a1 + 52);
      if (v32 >= v28)
        goto LABEL_102;
    }
    if ((v34 | 0x1000000) != 0xCBFEBABE)
      v27 = (unsigned int *)v160;
    v80 = (const char *)*v27;
    v142[0] = (uint64_t)"contains two of the same architecture (cputype (";
    v143 = v80;
    v144 = 2051;
    v147[0] = v142;
    v148 = ") cpusubtype (";
    v149 = 770;
    if ((v34 | 0x1000000) != 0xCBFEBABE)
      v93 = v161;
    v81 = (const char *)(*v93 & 0xFFFFFF);
    v150[0] = v147;
    v151 = v81;
    v152 = 2050;
    v119[0] = v150;
    v119[2] = "))";
    v120 = 770;
    sub_1C59F69F4(v139, (llvm::Twine *)v119);
    v60 = (const char *)v139[0];
  }
  else
  {
    v11 = "";
    if ((v8 & 0xFEFFFFFF) != 0xCAFEBABE)
      v11 = "_64";
    v12 = *(unsigned __int8 *)v11;
    v13 = (const char **)"fat_arch";
    if (*v11)
    {
      v155 = "fat_arch";
      v157 = v11;
      v160[0] = 771;
      v14 = 2;
    }
    else
    {
      v155 = "fat_arch";
      v160[0] = 259;
      v14 = 3;
    }
    if (v12)
      v13 = &v155;
    v165[0] = v13;
    v165[2] = " structs would extend past the end of the file";
    v166 = v14;
    v167 = 3;
    sub_1C59F69F4((uint64_t *)&v121, (llvm::Twine *)v165);
    v60 = (const char *)v121;
  }
LABEL_110:
  *a3 = v60;
  if (!v60)
  {
LABEL_111:
    v59 = 0;
LABEL_112:
    *a3 = v59;
  }
  return a1;
}

void sub_1C59F69F4(uint64_t *a1, llvm::Twine *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;
  std::string v11;
  __int16 v12;

  llvm::Twine::str(a2, &v8);
  v3 = std::string::insert(&v8, 0, "truncated or malformed fat file (");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v11, ")");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v7 = operator new();
  v12 = 260;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v7, (llvm::Twine *)&v11, 3u);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

double llvm::object::MachOUniversalBinary::getObjectForArch@<D0>(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  int v13;
  void *v14;
  void *v15;
  BOOL v16;
  void **v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;

  LOWORD(v25) = 261;
  *(_QWORD *)&v24[0] = a2;
  *((_QWORD *)&v24[0] + 1) = a3;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v24);
  v8 = DWORD2(v28);
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  if (!v8)
  {
    LOWORD(v29) = 1283;
    v9 = "Unknown architecture named: ";
LABEL_5:
    __p[0] = (void *)v9;
    *(_QWORD *)&v28 = a2;
    *((_QWORD *)&v28 + 1) = a3;
    v10 = operator new();
    v11 = llvm::object::GenericBinaryError::GenericBinaryError(v10, (llvm::Twine *)__p, 1u);
    *(_BYTE *)(a4 + 64) |= 1u;
    *(_QWORD *)a4 = v11;
    return result;
  }
  llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)v24, a1, 0);
  v20 = v24[0];
  v21 = v24[1];
  v22 = v25;
  v23 = v26;
  if (!*(_QWORD *)&v24[0] && !DWORD2(v20))
  {
LABEL_21:
    LOWORD(v29) = 1283;
    v9 = "fat file does not contain ";
    goto LABEL_5;
  }
  while (1)
  {
    sub_1C546AF68((unsigned int *)&v20, __p);
    v13 = SBYTE7(v28);
    v14 = __p[0];
    v15 = (void *)(BYTE7(v28) & 0x7F);
    if (SBYTE7(v28) < 0)
      v15 = __p[1];
    v16 = v15 == (void *)a3;
    if (a3 && v15 == (void *)a3)
    {
      if ((SBYTE7(v28) & 0x80u) == 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      v16 = memcmp(v17, a2, a3) == 0;
    }
    if (v13 < 0)
      operator delete(v14);
    if (v16)
      break;
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)__p, v20, DWORD2(v20) + 1);
    v20 = *(_OWORD *)__p;
    v21 = v28;
    v22 = v29;
    v23 = v30;
    if (!__p[0] && !DWORD2(v20))
      goto LABEL_21;
  }
  *(_BYTE *)(a4 + 64) &= ~1u;
  v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  result = *(double *)&v22;
  v19 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v19;
  return result;
}

void llvm::object::MachOUniversalBinary::getMachOObjectForArch(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD v6[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOUniversalBinary::getObjectForArch(a1, a2, a3, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    v5 = v6[0];
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v5;
  }
  else
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::getAsObjectFile((llvm::object::MachOUniversalBinary::ObjectForArch *)v6, a4);
  }
}

uint64_t llvm::object::MetalLibObjectFile::MetalLibObjectFile(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  __int16 v15;

  v6 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 8) = 21;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E8189FA8;
  *(_BYTE *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 729) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  v7 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24);
  v13 = *(uint64_t **)(a1 + 16);
  if (llvm::object::MetalLibObjectFile::parseFileMagic(a1, (unint64_t *)&v13, v7, a3)
    && llvm::object::MetalLibObjectFile::parseFileVersion((_WORD *)a1, (unint64_t *)&v13, v7, a3)
    && llvm::object::MetalLibObjectFile::parseFileType(a1, (unint64_t *)&v13, v7, a3)
    && llvm::object::MetalLibObjectFile::parseTriple(a1, (unint64_t *)&v13, v7, a3))
  {
    if ((unint64_t)(v13 + 1) > v7)
    {
      v9 = operator new();
      v14 = "missing file size";
      v15 = 259;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v11 = qword_1EF8F7238[0];
      *(_QWORD *)v9 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v14, (_QWORD *)(v9 + 8));
      *(_QWORD *)(v9 + 32) = 3;
      *(_QWORD *)(v9 + 40) = v11;
      *(_BYTE *)(v9 + 48) = 1;
      *a3 = v9;
      return a1;
    }
    v12 = *v13++;
    *(_QWORD *)(a1 + 80) = v12;
    if (llvm::object::MetalLibObjectFile::parseFunctionListInfo(a1, &v13, v7, a3)
      && llvm::object::MetalLibObjectFile::parsePublicMetadataInfo(a1, &v13, v7, a3)
      && llvm::object::MetalLibObjectFile::parsePrivateMetadataInfo(a1, &v13, v7, a3)
      && llvm::object::MetalLibObjectFile::parseModuleListInfo(a1, &v13, v7, a3)
      && llvm::object::MetalLibObjectFile::parseFunctionCount(a1, a3)
      && llvm::object::MetalLibObjectFile::parseHeaderExtension(a1, a3)
      && llvm::object::MetalLibObjectFile::parseVariableCount(a1, a3)
      && llvm::object::MetalLibObjectFile::parseImportedSymbolCount((_QWORD *)a1, a3)
      && llvm::object::MetalLibObjectFile::parseReflectionCount((_QWORD *)a1, a3))
    {
      llvm::object::MetalLibObjectFile::parseScriptCount((_QWORD *)a1, a3);
    }
  }
  if (!*a3)
    *a3 = 0;
  return a1;
}

uint64_t llvm::object::MetalLibObjectFile::parseFileVersion(_WORD *a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int v14;
  __int16 *v15;
  unint64_t v17;
  uint64_t result;
  const char *v19;
  __int16 v20;

  v5 = *a2 + 2;
  if (v5 <= a3)
  {
    v8 = *(unsigned __int16 *)*a2;
    *a2 = v5;
    LOWORD(v8) = (v8 >> 15) | (2 * v8);
    a1[32] = v8;
    if ((v8 & 0xFFFE) == 2)
    {
      v9 = (unsigned __int16 *)*a2;
      v10 = (unsigned __int16 *)(*a2 + 2);
      if ((unint64_t)v10 <= a3)
      {
        v11 = *v9;
        *a2 = (unint64_t)v10;
        a1[33] = v11;
        if (v11 == 2)
        {
          v12 = v9 + 2;
          if ((unint64_t)v12 <= a3)
          {
            v13 = 0;
            v14 = *v10;
            *a2 = (unint64_t)v12;
            a1[34] = v14;
            v15 = (__int16 *)&jpt_1C5A03AEC;
            while ((unsigned __int16)word_1C8667A0E[v13] != v14)
            {
              if (++v13 == 8)
                goto LABEL_16;
            }
            v15 = &word_1C8667A0E[v13];
LABEL_16:
            if ((char *)v15 - (char *)word_1C8667A0E != 16)
              return 1;
            v6 = operator new();
            v7 = "bad bug fix version number";
          }
          else
          {
            v6 = operator new();
            v7 = "missing bug fix version number";
          }
        }
        else
        {
          v6 = operator new();
          v7 = "bad minor version number";
        }
      }
      else
      {
        v6 = operator new();
        v7 = "missing minor version number";
      }
    }
    else
    {
      v6 = operator new();
      v7 = "bad major version number";
    }
  }
  else
  {
    v6 = operator new();
    v7 = "missing major version number";
  }
  v19 = v7;
  v20 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v17 = qword_1EF8F7238[0];
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v19, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 3;
  *(_QWORD *)(v6 + 40) = v17;
  *(_BYTE *)(v6 + 48) = 1;
  result = 0;
  *a4 = v6;
  return result;
}

BOOL llvm::object::MetalLibObjectFile::parseFileSize(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v10;
  const char *v12;
  __int16 v13;

  v5 = *a2 + 8;
  if (v5 > a3)
  {
    v8 = operator new();
    v12 = "missing file size";
    v13 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a4 = v8;
  }
  else
  {
    v6 = *(_QWORD *)*a2;
    *a2 = v5;
    *(_QWORD *)(a1 + 80) = v6;
  }
  return v5 <= a3;
}

BOOL llvm::object::MetalLibObjectFile::parseFunctionCount(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v9;
  unint64_t v11;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD v34[4];
  __int16 v35;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 88);
  if (v3 < v4)
    v4 = *(_QWORD *)(a1 + 24);
  v5 = (unsigned int *)(v2 + v4);
  v6 = v2 + v3;
  v7 = v5 + 1;
  if ((unint64_t)(v5 + 1) <= v2 + v3)
  {
    v14 = *v5;
    sub_1C62DA140(a1 + 280, v14);
    v16 = *(char **)(a1 + 304);
    v15 = *(char **)(a1 + 312);
    v17 = (v15 - v16) >> 3;
    if (v14 <= v17)
    {
      if (v14 < v17)
        sub_1C5A02590((_QWORD *)(a1 + 304), &v16[8 * v14]);
    }
    else
    {
      v18 = v14 - v17;
      v19 = *(_QWORD *)(a1 + 320);
      if (v14 - v17 <= (v19 - (uint64_t)v15) >> 3)
      {
        bzero(*(void **)(a1 + 312), 8 * v18);
        *(_QWORD *)(a1 + 312) = &v15[8 * v18];
      }
      else
      {
        v20 = v19 - (_QWORD)v16;
        v21 = v20 >> 2;
        if (v20 >> 2 <= v14)
          v21 = v14;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        if (v21 >> 61)
          sub_1C4764EE4();
        v32 = v21;
        v22 = (char *)operator new(8 * v21);
        v23 = &v22[8 * v17];
        v33 = &v22[8 * v32];
        bzero(v23, 8 * v18);
        v24 = &v22[8 * v18 + v15 - v16];
        if (v15 == v16)
        {
          *(_QWORD *)(a1 + 304) = v23;
          *(_QWORD *)(a1 + 312) = v24;
          *(_QWORD *)(a1 + 320) = v33;
        }
        else
        {
          do
          {
            v25 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *(_QWORD *)v15 = 0;
            *((_QWORD *)v23 - 1) = v25;
            v23 -= 8;
          }
          while (v15 != v16);
          v15 = *(char **)(a1 + 304);
          v26 = *(char **)(a1 + 312);
          *(_QWORD *)(a1 + 304) = v23;
          *(_QWORD *)(a1 + 312) = v24;
          *(_QWORD *)(a1 + 320) = v33;
          while (v26 != v15)
          {
            v28 = (_QWORD *)*((_QWORD *)v26 - 1);
            v26 -= 8;
            v27 = v28;
            *(_QWORD *)v26 = 0;
            if (v28)
            {
              v29 = sub_1C62DA720(v27);
              MEMORY[0x1CAA32FC0](v29, 0x1070C40BAAD8800);
            }
          }
        }
        if (v15)
          operator delete(v15);
      }
    }
    sub_1C5A00F38(a1 + 328, v14 + ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 3));
    if ((*(_WORD *)(a1 + 70) & 1) == 0)
    {
      LODWORD(v34[0]) = -1;
      v30 = *(_QWORD *)(a1 + 352);
      v31 = (*(_QWORD *)(a1 + 360) - v30) >> 2;
      if (v14 <= v31)
      {
        if (v14 < v31)
          *(_QWORD *)(a1 + 360) = v30 + 4 * v14;
      }
      else
      {
        sub_1C50F0728(a1 + 352, v14 - v31, v34);
      }
    }
  }
  else
  {
    v9 = operator new();
    v34[0] = "missing function count";
    v35 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v11 = qword_1EF8F7238[0];
    *(_QWORD *)v9 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v34, (_QWORD *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 3;
    *(_QWORD *)(v9 + 40) = v11;
    *(_BYTE *)(v9 + 48) = 1;
    *a2 = v9;
  }
  return (unint64_t)v7 <= v6;
}

uint64_t llvm::object::MetalLibObjectFile::parseHeaderExtension(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v28;
  _QWORD *v29;
  char *v31;
  _QWORD v32[2];
  _QWORD v33[4];
  __int16 v34;

  *(_OWORD *)(a1 + 248) = 0u;
  v3 = (_QWORD *)(a1 + 248);
  v4 = *(unsigned __int16 *)(a1 + 68);
  v32[0] = (*(unsigned __int16 *)(a1 + 64) >> 1) | ((unint64_t)*(unsigned __int16 *)(a1 + 66) << 32) | 0x8000000000000000;
  v32[1] = v4 | 0x80000000;
  *(_OWORD *)(a1 + 152) = 0u;
  v5 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 168) = 0u;
  v6 = (_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  v7 = (_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = (_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 216) = 0u;
  v9 = (_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 232) = 0u;
  v10 = (_QWORD *)(a1 + 232);
  v33[0] = 0x8000000200000001;
  v33[1] = 2147483651;
  result = sub_1C4F7A4D8(v32, v33);
  if ((result & 1) != 0)
    return 1;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88);
  if (v13 < v14)
    v14 = *(_QWORD *)(a1 + 24);
  v15 = (_DWORD *)(v12 + v14);
  v16 = v12 + v13;
  v17 = (char *)(v15 + 1);
  if ((unint64_t)(v15 + 1) > v16)
  {
LABEL_34:
    v25 = operator new();
    v26 = "missing header extension token";
    goto LABEL_35;
  }
  v29 = v3 - 11;
  while (1)
  {
    v31 = v17;
    switch(*v15)
    {
      case 0x43525348:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v31, v16, (uint64_t)"HSRC", 4, v5, v29, a2);
        if (!(_DWORD)result)
          return result;
        *(_BYTE *)(a1 + 472) = 0;
        goto LABEL_33;
      case 0x44525348:
        result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v31, v16, (uint64_t)"HSRD", 4, v5, v29, a2);
        if (!(_DWORD)result)
          return result;
        *(_BYTE *)(a1 + 472) = 1;
        goto LABEL_33;
      case 0x50525348:
        v21 = v16;
        v22 = "HSRP";
        v23 = v6;
        v24 = v3 - 9;
        goto LABEL_32;
      case 0x4E594448:
        v21 = v16;
        v22 = "HDYN";
        v23 = v7;
        v24 = v3 - 7;
        goto LABEL_32;
      case 0x54534C56:
        v21 = v16;
        v22 = "VLST";
        v23 = v8;
        v24 = v3 - 5;
        goto LABEL_32;
      case 0x54534C49:
        v21 = v16;
        v22 = "ILST";
        v23 = v9;
        v24 = v3 - 3;
        goto LABEL_32;
      case 0x54534C52:
        v21 = v16;
        v22 = "RLST";
        v23 = v10;
        v24 = v3 - 1;
        goto LABEL_32;
    }
    if (*v15 != 1414745171)
      break;
    v21 = v16;
    v22 = "SLST";
    v23 = v3;
    v24 = v3 + 1;
LABEL_32:
    result = llvm::object::MetalLibObjectFile::parseExtensionInfo(result, (unint64_t *)&v31, v21, (uint64_t)v22, 4, v23, v24, a2);
    if ((result & 1) == 0)
      return 0;
LABEL_33:
    v15 = v31;
    v17 = v31 + 4;
    if ((unint64_t)(v31 + 4) > v16)
      goto LABEL_34;
  }
  if (*v15 != 1145656661)
  {
    if (*v15 == 1413762629)
      return 1;
    v18 = (char *)v15 + 6;
    if ((unint64_t)v18 > v16)
    {
LABEL_39:
      v25 = operator new();
      v26 = "missing token data size";
      goto LABEL_35;
    }
    v31 = &v18[*(unsigned __int16 *)v17];
    goto LABEL_33;
  }
  v19 = (char *)v15 + 6;
  if ((unint64_t)v15 + 6 > v16)
    goto LABEL_39;
  v20 = (unint64_t)v15 + 22;
  if (v20 <= v16)
  {
    v31 = (char *)v20;
    *(_QWORD *)(a1 + 264) = v19;
    *(_QWORD *)(a1 + 272) = 16;
    *a2 = 0;
    goto LABEL_33;
  }
  v25 = operator new();
  v26 = "missing UUID";
LABEL_35:
  v33[0] = v26;
  v34 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v28 = qword_1EF8F7238[0];
  *(_QWORD *)v25 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v25 + 8));
  *(_QWORD *)(v25 + 32) = 3;
  *(_QWORD *)(v25 + 40) = v28;
  *(_BYTE *)(v25 + 48) = 1;
  result = 0;
  *a2 = v25;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseVariableCount(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[4];
  __int16 v16;

  v2 = *(_QWORD *)(a1 + 200);
  if (!v2)
    return 1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 < v2)
    v2 = *(_QWORD *)(a1 + 24);
  v6 = (unsigned int *)(v4 + v2);
  if ((unint64_t)(v6 + 1) <= v4 + v5)
  {
    v12 = *v6;
    sub_1C62DA360(a1 + 600, v12);
    sub_1C5A00F38(a1 + 328, v12 + ((uint64_t)(*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 3));
    if ((*(_WORD *)(a1 + 70) & 1) == 0)
    {
      LODWORD(v15[0]) = -1;
      v13 = *(_QWORD *)(a1 + 376);
      v14 = (*(_QWORD *)(a1 + 384) - v13) >> 2;
      if (v12 <= v14)
      {
        if (v12 < v14)
          *(_QWORD *)(a1 + 384) = v13 + 4 * v12;
      }
      else
      {
        sub_1C50F0728(a1 + 376, v12 - v14, v15);
      }
    }
    return 1;
  }
  v8 = operator new();
  v15[0] = "missing variable count";
  v16 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v10 = qword_1EF8F7238[0];
  *(_QWORD *)v8 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v15, (_QWORD *)(v8 + 8));
  result = 0;
  *(_QWORD *)(v8 + 32) = 3;
  *(_QWORD *)(v8 + 40) = v10;
  *(_BYTE *)(v8 + 48) = 1;
  *a2 = v8;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseImportedSymbolCount(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v7;
  unint64_t v9;
  uint64_t result;
  const char *v11;
  __int16 v12;

  v2 = a1[27];
  if (!v2)
    return 1;
  v3 = a1[2];
  v4 = a1[3];
  if (v4 < v2)
    v2 = a1[3];
  v5 = (unsigned int *)(v3 + v2);
  if ((unint64_t)(v5 + 1) <= v3 + v4)
  {
    sub_1C62DA3EC((uint64_t)(a1 + 78), *v5);
    return 1;
  }
  v7 = operator new();
  v11 = "missing imported symbol count";
  v12 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v9 = qword_1EF8F7238[0];
  *(_QWORD *)v7 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v7 + 8));
  result = 0;
  *(_QWORD *)(v7 + 32) = 3;
  *(_QWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 48) = 1;
  *a2 = v7;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseReflectionCount(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v7;
  unint64_t v9;
  uint64_t result;
  const char *v11;
  __int16 v12;

  v2 = a1[29];
  if (!v2)
    return 1;
  v3 = a1[2];
  v4 = a1[3];
  if (v4 < v2)
    v2 = a1[3];
  v5 = (unsigned int *)(v3 + v2);
  if ((unint64_t)(v5 + 1) <= v3 + v4)
  {
    sub_1C62DA3EC((uint64_t)(a1 + 81), *v5);
    return 1;
  }
  v7 = operator new();
  v11 = "missing reflection count";
  v12 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v9 = qword_1EF8F7238[0];
  *(_QWORD *)v7 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v7 + 8));
  result = 0;
  *(_QWORD *)(v7 + 32) = 3;
  *(_QWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 48) = 1;
  *a2 = v7;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::parseScriptCount(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v7;
  unint64_t v9;
  uint64_t result;
  const char *v11;
  __int16 v12;

  v2 = a1[31];
  if (!v2)
    return 1;
  v3 = a1[2];
  v4 = a1[3];
  if (v4 < v2)
    v2 = a1[3];
  v5 = (unsigned int *)(v3 + v2);
  if ((unint64_t)(v5 + 1) <= v3 + v4)
  {
    sub_1C62DA3EC((uint64_t)(a1 + 84), *v5);
    return 1;
  }
  v7 = operator new();
  v11 = "missing script count";
  v12 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v9 = qword_1EF8F7238[0];
  *(_QWORD *)v7 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v7 + 8));
  result = 0;
  *(_QWORD *)(v7 + 32) = 3;
  *(_QWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 48) = 1;
  *a2 = v7;
  return result;
}

void llvm::object::MetalLibObjectFile::~MetalLibObjectFile(llvm::object::MetalLibObjectFile *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)this = &off_1E8189FA8;
  v2 = (_QWORD *)*((_QWORD *)this + 96);
  v3 = (_QWORD *)*((_QWORD *)this + 97);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2 & 3;
      v5 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
      if (v4)
        v6 = 1;
      else
        v6 = v5 == 0;
      if (v6)
      {
        if (v4 != 1 || v5 == 0)
        {
          if (v4 == 2)
            v9 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
          else
            v9 = 0;
          v10 = 0x1060C40A5AF3ED7;
        }
        else
        {
          v9 = *v2 & 0xFFFFFFFFFFFFFFFCLL;
          v10 = 0x1000C40D7A84E51;
        }
      }
      else
      {
        v8 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v8;
          operator delete(v8);
        }
        v9 = v5;
        v10 = 0x20C40960023A9;
      }
      MEMORY[0x1CAA32FC0](v9, v10);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 96);
  }
  if (v2)
  {
    *((_QWORD *)this + 97) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  v11 = (_QWORD *)*((_QWORD *)this + 84);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 85);
    v13 = (void *)*((_QWORD *)this + 84);
    if (v12 != v11)
    {
      do
      {
        v15 = *--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          MEMORY[0x1CAA32FC0](v14, 0x1050C40A5B97131);
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 84);
    }
    *((_QWORD *)this + 85) = v11;
    operator delete(v13);
  }
  v16 = (_QWORD *)*((_QWORD *)this + 81);
  if (v16)
  {
    v17 = (_QWORD *)*((_QWORD *)this + 82);
    v18 = (void *)*((_QWORD *)this + 81);
    if (v17 != v16)
    {
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          MEMORY[0x1CAA32FC0](v19, 0x1050C40A5B97131);
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 81);
    }
    *((_QWORD *)this + 82) = v16;
    operator delete(v18);
  }
  v21 = (_QWORD *)*((_QWORD *)this + 78);
  if (v21)
  {
    v22 = (_QWORD *)*((_QWORD *)this + 79);
    v23 = (void *)*((_QWORD *)this + 78);
    if (v22 != v21)
    {
      do
      {
        v25 = *--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          MEMORY[0x1CAA32FC0](v24, 0x1050C40A5B97131);
      }
      while (v22 != v21);
      v23 = (void *)*((_QWORD *)this + 78);
    }
    *((_QWORD *)this + 79) = v21;
    operator delete(v23);
  }
  v26 = (_QWORD *)*((_QWORD *)this + 75);
  if (v26)
  {
    v27 = (_QWORD *)*((_QWORD *)this + 76);
    v28 = (void *)*((_QWORD *)this + 75);
    if (v27 != v26)
    {
      do
      {
        v30 = *--v27;
        v29 = v30;
        *v27 = 0;
        if (v30)
          MEMORY[0x1CAA32FC0](v29, 0x1050C40B09E53CALL);
      }
      while (v27 != v26);
      v28 = (void *)*((_QWORD *)this + 75);
    }
    *((_QWORD *)this + 76) = v26;
    operator delete(v28);
  }
  v31 = (_QWORD *)*((_QWORD *)this + 72);
  if (v31)
  {
    v32 = (_QWORD *)*((_QWORD *)this + 73);
    v33 = (void *)*((_QWORD *)this + 72);
    if (v32 != v31)
    {
      do
      {
        v35 = *--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          MEMORY[0x1CAA32FC0](v34, 0x1050C40717B85FCLL);
      }
      while (v32 != v31);
      v33 = (void *)*((_QWORD *)this + 72);
    }
    *((_QWORD *)this + 73) = v31;
    operator delete(v33);
  }
  v36 = (_QWORD *)*((_QWORD *)this + 67);
  if (v36)
  {
    v37 = (_QWORD *)*((_QWORD *)this + 68);
    v38 = (void *)*((_QWORD *)this + 67);
    if (v37 != v36)
    {
      do
      {
        v40 = *--v37;
        v39 = v40;
        *v37 = 0;
        if (v40)
          sub_1C5A038C4(v39);
      }
      while (v37 != v36);
      v38 = (void *)*((_QWORD *)this + 67);
    }
    *((_QWORD *)this + 68) = v36;
    operator delete(v38);
  }
  v41 = (_QWORD *)*((_QWORD *)this + 64);
  if (v41)
  {
    v42 = (_QWORD *)*((_QWORD *)this + 65);
    v43 = (void *)*((_QWORD *)this + 64);
    if (v42 != v41)
    {
      do
      {
        v45 = *--v42;
        v44 = v45;
        *v42 = 0;
        if (v45)
          MEMORY[0x1CAA32FC0](v44, 0x1050C40A8B26598);
      }
      while (v42 != v41);
      v43 = (void *)*((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v41;
    operator delete(v43);
  }
  v46 = (void *)*((_QWORD *)this + 56);
  if (v46)
  {
    *((_QWORD *)this + 57) = v46;
    operator delete(v46);
  }
  v47 = (void *)*((_QWORD *)this + 53);
  if (v47)
  {
    *((_QWORD *)this + 54) = v47;
    operator delete(v47);
  }
  v48 = (_QWORD *)*((_QWORD *)this + 50);
  if (v48)
  {
    v49 = (_QWORD *)*((_QWORD *)this + 51);
    v50 = (void *)*((_QWORD *)this + 50);
    if (v49 != v48)
    {
      do
      {
        v52 = *--v49;
        v51 = v52;
        *v49 = 0;
        if (v52)
          MEMORY[0x1CAA32FC0](v51, 0x1050C4015692547);
      }
      while (v49 != v48);
      v50 = (void *)*((_QWORD *)this + 50);
    }
    *((_QWORD *)this + 51) = v48;
    operator delete(v50);
  }
  v53 = (void *)*((_QWORD *)this + 47);
  if (v53)
  {
    *((_QWORD *)this + 48) = v53;
    operator delete(v53);
  }
  v54 = (void *)*((_QWORD *)this + 44);
  if (v54)
  {
    *((_QWORD *)this + 45) = v54;
    operator delete(v54);
  }
  v55 = (_QWORD *)*((_QWORD *)this + 41);
  if (v55)
  {
    v56 = (_QWORD *)*((_QWORD *)this + 42);
    v57 = (void *)*((_QWORD *)this + 41);
    if (v56 != v55)
    {
      do
      {
        v59 = *--v56;
        v58 = v59;
        *v56 = 0;
        if (v59)
          sub_1C5A02548(v58);
      }
      while (v56 != v55);
      v57 = (void *)*((_QWORD *)this + 41);
    }
    *((_QWORD *)this + 42) = v55;
    operator delete(v57);
  }
  v60 = (_QWORD *)*((_QWORD *)this + 38);
  if (v60)
  {
    sub_1C5A02590((_QWORD *)this + 38, v60);
    operator delete(*((void **)this + 38));
  }
  v61 = (_QWORD *)*((_QWORD *)this + 35);
  if (v61)
  {
    v62 = (_QWORD *)*((_QWORD *)this + 36);
    v63 = (void *)*((_QWORD *)this + 35);
    if (v62 != v61)
    {
      do
      {
        v65 = *--v62;
        v64 = v65;
        *v62 = 0;
        if (v65)
          sub_1C5A032A0(v64);
      }
      while (v62 != v61);
      v63 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v61;
    operator delete(v63);
  }
}

{
  llvm::object::MetalLibObjectFile::~MetalLibObjectFile(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::object::MetalLibObjectFile::materializeFunctionNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned int *v15;
  char v16;
  __int128 v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  const char *v21;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  const char *v82;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  uint64_t *v96;
  char **v97;
  void *__p[4];
  __int16 v99;
  char v100;

  v7 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  if (v6 >= *((_QWORD *)this + 11) + 4)
    v8 = *((_QWORD *)this + 11) + 4;
  else
    v8 = *((_QWORD *)this + 3);
  v9 = operator new();
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  v97 = (char **)(v9 + 208);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_QWORD *)(v9 + 256) = 0;
  v10 = (_DWORD *)sub_1C5A011A0((uint64_t)this + 808, a2);
  if ((_DWORD *)((char *)this + 872) == v10)
  {
    v12 = 0;
    v13 = (_DWORD *)(v7 + v8);
  }
  else
  {
    v12 = v10[2];
    v13 = *(_DWORD **)v10;
  }
  v14 = v7 + v6;
  if (v12 != a2)
  {
    while (1)
    {
      v15 = *(unsigned int **)(*((_QWORD *)this + 35) + 8 * v12);
      if (!v15)
      {
        v15 = v13;
        if ((unint64_t)(v13 + 1) > v14)
          break;
      }
      v13 = (_DWORD *)((char *)v13 + *v15);
      if (a2 == ++v12)
        goto LABEL_11;
    }
LABEL_18:
    v20 = operator new();
    v21 = "missing function data size";
    goto LABEL_19;
  }
LABEL_11:
  v96 = a3;
  if (v11)
  {
    v16 = 0;
  }
  else
  {
    sub_1C5A01260((uint64_t)this + 808, (uint64_t)v13, a2);
    v16 = *(_BYTE *)(v9 + 81);
  }
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)&v17 = -1;
  *((_QWORD *)&v17 + 1) = -1;
  *(_OWORD *)(v9 + 48) = v17;
  v18 = (_QWORD *)(v9 + 48);
  *(_BYTE *)(v9 + 24) = -1;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_OWORD *)(v9 + 64) = v17;
  *(_BYTE *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 81) = v16 & 0xFC;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_BYTE *)(v9 + 200) = 0;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 129) = 0u;
  LOBYTE(__p[0]) = 0;
  v100 = 0;
  sub_1C62DA508((uint64_t)v97, (uint64_t)__p);
  if (v100 && __p[0])
    operator delete(__p[0]);
  v19 = v13 + 1;
  if ((unint64_t)(v13 + 1) > v14)
    goto LABEL_18;
  v25 = *v13;
  v24 = (unsigned __int16 *)(v13 + 2);
  *(_DWORD *)v9 = v25;
  if ((unint64_t)v24 > v14)
  {
LABEL_24:
    v20 = operator new();
    v21 = "missing function token";
    goto LABEL_19;
  }
  v26 = (char *)(v6 + v7);
  v27 = (_QWORD *)(v9 + 192);
  v28 = (_QWORD *)(v9 + 184);
  v29 = v6 + v7 - 6;
  v30 = v6 + v7 - 1;
  v31 = v6 + v7 - 33;
  v32 = 0uLL;
  while (1)
  {
    switch(*v19)
    {
      case 0x454D414E:
        v34 = (char *)v19 + 6;
        if ((unint64_t)v19 + 6 > v14)
        {
          v20 = operator new();
          v21 = "missing function name length";
          goto LABEL_19;
        }
        v35 = *v24;
        v33 = (unint64_t)&v34[v35];
        if ((unint64_t)&v34[v35] > v14)
          goto LABEL_181;
        v36 = v35 - 1;
        do
        {
          v37 = v35 - 1;
          if (v35 == 1)
            break;
        }
        while (!*((unsigned __int8 *)v19 + v35-- + 4));
        v39 = v37 >= v36 ? v36 : v37;
        *(_QWORD *)(v9 + 8) = v34;
        *(_QWORD *)(v9 + 16) = v39;
        if (v34[v36])
        {
LABEL_181:
          v20 = operator new();
          v21 = "invalid function name";
          goto LABEL_19;
        }
        goto LABEL_133;
      case 0x45505954:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        v33 = (unint64_t)v19 + 7;
        if ((unint64_t)v19 + 7 > v14)
        {
          v20 = operator new();
          v21 = "missing function type";
          goto LABEL_19;
        }
        *(_BYTE *)(v9 + 24) = *((_BYTE *)v19 + 6);
        goto LABEL_133;
      case 0x48534148:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        v33 = (unint64_t)v19 + 38;
        if ((unint64_t)v19 + 38 > v14)
        {
          v20 = operator new();
          v21 = "missing function hash";
          goto LABEL_19;
        }
        *(_QWORD *)(v9 + 32) = (char *)v19 + 6;
        *(_QWORD *)(v9 + 40) = 32;
        goto LABEL_133;
      case 0x5446464F:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        if ((unint64_t)v19 + 14 > v14)
        {
LABEL_185:
          v20 = operator new();
          v21 = "missing function public metadata offset";
          goto LABEL_19;
        }
        *v18 = *(_QWORD *)((char *)v19 + 6);
        if ((unint64_t)v19 + 22 > v14)
          goto LABEL_187;
        *(_QWORD *)(v9 + 56) = *(_QWORD *)((char *)v19 + 14);
        v33 = (unint64_t)v19 + 30;
        if ((unint64_t)v19 + 30 > v14)
        {
LABEL_188:
          v20 = operator new();
          v21 = "missing function module offset";
          goto LABEL_19;
        }
        *(_QWORD *)(v9 + 64) = *(_QWORD *)((char *)v19 + 22);
        goto LABEL_133;
      case 0x4546464F:
        v40 = (char *)v19 + 6;
        if ((unint64_t)v19 + 6 > v14)
        {
          v20 = operator new();
          v21 = "missing external offset length";
          goto LABEL_19;
        }
        v41 = *v24;
        v42 = (char *)v19 + 6;
        if ((unint64_t)v19 + 6 >= v14)
        {
LABEL_73:
          if (*v42)
          {
            v20 = operator new();
            v21 = "missing function external offset path";
            goto LABEL_19;
          }
        }
        else
        {
          v43 = v29 - (_QWORD)v19;
          v42 = (char *)v19 + 6;
          while (*v42)
          {
            ++v42;
            if (!--v43)
            {
              v42 = v26;
              goto LABEL_73;
            }
          }
        }
        *(_QWORD *)(v9 + 120) = v40;
        *(_QWORD *)(v9 + 128) = v42 - v40;
        if ((unint64_t)(v42 + 9) > v14)
          goto LABEL_185;
        *v18 = *(_QWORD *)(v42 + 1);
        if ((unint64_t)(v42 + 17) > v14)
        {
LABEL_187:
          v20 = operator new();
          v21 = "missing function private metadata offset";
          goto LABEL_19;
        }
        *(_QWORD *)(v9 + 56) = *(_QWORD *)(v42 + 9);
        if ((unint64_t)(v42 + 25) > v14)
          goto LABEL_188;
        *(_QWORD *)(v9 + 64) = *(_QWORD *)(v42 + 17);
        v33 = (unint64_t)&v40[v41];
        if (v33 > v14)
        {
          v20 = operator new();
          v21 = "missing external offset padding";
          goto LABEL_19;
        }
        goto LABEL_133;
      case 0x53524556:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        if ((unint64_t)(v19 + 2) > v14)
        {
          v20 = operator new();
          v21 = "missing function AIR major version";
          goto LABEL_19;
        }
        *(_WORD *)(v9 + 72) = *((_WORD *)v19 + 3);
        if ((unint64_t)v19 + 10 > v14)
        {
          v20 = operator new();
          v21 = "missing function AIR minor version";
          goto LABEL_19;
        }
        *(_WORD *)(v9 + 74) = *((_WORD *)v19 + 4);
        if ((unint64_t)(v19 + 3) > v14)
        {
          v20 = operator new();
          v21 = "missing function Metal major version";
          goto LABEL_19;
        }
        *(_WORD *)(v9 + 76) = *((_WORD *)v19 + 5);
        v33 = (unint64_t)v19 + 14;
        if ((unint64_t)v19 + 14 > v14)
        {
          v20 = operator new();
          v21 = "missing function Metal minor version";
          goto LABEL_19;
        }
        *(_WORD *)(v9 + 78) = *((_WORD *)v19 + 6);
        goto LABEL_133;
      case 0x5259414C:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        v33 = (unint64_t)v19 + 7;
        if ((unint64_t)v19 + 7 > v14)
        {
          v20 = operator new();
          v21 = "missing function render target array index data type";
          goto LABEL_19;
        }
        *(_BYTE *)(v9 + 80) = *((_BYTE *)v19 + 6);
        goto LABEL_133;
      case 0x53534554:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        v33 = (unint64_t)v19 + 7;
        if ((unint64_t)v19 + 7 > v14)
        {
          v20 = operator new();
          v21 = "missing function patch info";
          goto LABEL_19;
        }
        *(_BYTE *)(v9 + 81) = *((_BYTE *)v19 + 6);
        goto LABEL_133;
      case 0x5A53444D:
        if ((unint64_t)v19 + 6 > v14)
          goto LABEL_182;
        v33 = (unint64_t)v19 + 14;
        if ((unint64_t)v19 + 14 > v14)
        {
          v20 = operator new();
          v21 = "missing function module size";
          goto LABEL_19;
        }
        *(_QWORD *)(v9 + 88) = *(_QWORD *)((char *)v19 + 6);
        goto LABEL_133;
      case 0x46464F53:
        if ((unint64_t)v19 + 6 > v14)
        {
LABEL_182:
          v20 = operator new();
          v21 = "missing token data size";
          goto LABEL_19;
        }
        v33 = (unint64_t)v19 + 14;
        if ((unint64_t)v19 + 14 > v14)
        {
          v20 = operator new();
          v21 = "missing function source offset";
          goto LABEL_19;
        }
        *(_QWORD *)(v9 + 96) = *(_QWORD *)((char *)v19 + 6);
        goto LABEL_133;
      case 0x544C4652:
        if ((unint64_t)v19 + 6 > v14)
        {
LABEL_202:
          v20 = operator new();
          v82 = "missing token data size";
          goto LABEL_238;
        }
        v33 = (unint64_t)v19 + 14;
        if ((unint64_t)v19 + 14 > v14)
        {
          v20 = operator new();
          v82 = "missing function reflection offset";
          goto LABEL_238;
        }
        *(_QWORD *)(v9 + 136) = *(_QWORD *)((char *)v19 + 6);
        goto LABEL_133;
      case 0x45435053:
      case 0x49435053:
        v44 = (unint64_t)v19 + 6;
        if ((unint64_t)v19 + 6 > v14)
        {
          v20 = operator new();
          v82 = "missing specialization info length";
          goto LABEL_238;
        }
        v45 = *v24;
        *(_QWORD *)(v9 + 192) = 0;
        *(_OWORD *)(v9 + 160) = v32;
        *(_OWORD *)(v9 + 176) = v32;
        *(_OWORD *)(v9 + 144) = v32;
        v46 = (char *)v19 + 6;
        *(_BYTE *)(v9 + 200) = 1;
        if (v44 < v14)
        {
          v47 = v29 - (_QWORD)v19;
          v46 = (char *)v19 + 6;
          do
          {
            if (!*v46)
              goto LABEL_104;
            ++v46;
            --v47;
          }
          while (v47);
          v46 = v26;
        }
        if (*v46)
        {
          v20 = operator new();
          v82 = "invalid unspecialized MetalLib path";
          goto LABEL_238;
        }
LABEL_104:
        *(_QWORD *)(v9 + 144) = v44;
        *(_QWORD *)(v9 + 152) = &v46[-v44];
        v48 = v46 + 33;
        if ((unint64_t)(v46 + 33) > v14)
        {
          v20 = operator new();
          v82 = "missing unspecialized function hash";
          goto LABEL_238;
        }
        *(_QWORD *)(v9 + 160) = v46 + 1;
        *(_QWORD *)(v9 + 168) = 32;
        if (*v19 == 1162039379)
        {
          v61 = v46 + 33;
          if ((unint64_t)v48 < v14)
          {
            v62 = v31 - (_QWORD)v46;
            v61 = v48;
            do
            {
              if (!*v61)
                goto LABEL_131;
              ++v61;
              --v62;
            }
            while (v62);
            v61 = v26;
          }
          if (*v61)
          {
            v20 = operator new();
            v82 = "invalid specialization script path";
            goto LABEL_238;
          }
LABEL_131:
          *(_QWORD *)(v9 + 176) = v48;
          *(_QWORD *)(v9 + 184) = v61 - v48;
          v49 = v27;
        }
        else
        {
          if ((unint64_t)(v46 + 41) > v14)
          {
            v20 = operator new();
            v82 = "missing specialization script offset";
            goto LABEL_238;
          }
          *(_QWORD *)(v9 + 192) = *(_QWORD *)v48;
          *(_QWORD *)(v9 + 176) = "";
          v49 = v28;
        }
        *v49 = 0;
        v33 = v44 + v45;
        if (v33 > v14)
        {
          v20 = operator new();
          v82 = "missing specialization info padding";
          goto LABEL_238;
        }
        goto LABEL_133;
    }
    if (*v19 != 1162040403 && *v19 != 1229149267)
      break;
    if ((unint64_t)v19 + 6 > v14)
    {
      v20 = operator new();
      v21 = "missing stitching info length";
      goto LABEL_19;
    }
    v90 = v31;
    v91 = v30;
    v92 = v29;
    v93 = v28;
    v94 = v27;
    v95 = v26;
    v89 = *v24;
    sub_1C62DA6D8((uint64_t)v97);
    v50 = (char *)v19 + 10;
    if ((unint64_t)v19 + 10 > v14)
    {
      v20 = operator new();
      v82 = "missing modules count";
      goto LABEL_238;
    }
    v88 = (char *)v19 + 6;
    v51 = *(unsigned int *)((char *)v19 + 6);
    v53 = *(_BYTE **)(v9 + 208);
    v52 = *(char **)(v9 + 216);
    v54 = (v52 - v53) >> 5;
    if (v51 <= v54)
    {
      if (v51 < v54)
        *(_QWORD *)(v9 + 216) = &v53[32 * v51];
      goto LABEL_153;
    }
    v55 = v51 - v54;
    v56 = *(_QWORD *)(v9 + 224);
    if (v51 - v54 <= (v56 - (uint64_t)v52) >> 5)
    {
      v70 = &v52[32 * v55];
      bzero(v52, 32 * v55);
      *(_QWORD *)(v9 + 216) = v70;
      a3 = v96;
    }
    else
    {
      v87 = v51 - v54;
      v57 = v56 - (_QWORD)v53;
      v58 = v57 >> 4;
      if (v57 >> 4 <= v51)
        v58 = *(unsigned int *)((char *)v19 + 6);
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0)
        v58 = 0x7FFFFFFFFFFFFFFLL;
      if (v58 >> 59)
        sub_1C4764EE4();
      v86 = v58;
      v85 = (char *)operator new(32 * v58);
      bzero(&v85[32 * ((v52 - v53) >> 5)], 32 * v87);
      v59 = &v85[32 * ((v52 - v53) >> 5)];
      if (v52 != v53)
      {
        do
        {
          v60 = *((_OWORD *)v52 - 1);
          *((_OWORD *)v59 - 2) = *((_OWORD *)v52 - 2);
          *((_OWORD *)v59 - 1) = v60;
          v59 -= 32;
          v52 -= 32;
        }
        while (v52 != v53);
        v52 = *v97;
      }
      *(_QWORD *)(v9 + 208) = v59;
      *(_QWORD *)(v9 + 216) = &v85[32 * v51];
      *(_QWORD *)(v9 + 224) = &v85[32 * v86];
      a3 = v96;
      v50 = (char *)v19 + 10;
      if (!v52)
        goto LABEL_153;
      operator delete(v52);
    }
    v50 = (char *)v19 + 10;
LABEL_153:
    v32 = 0uLL;
    if ((_DWORD)v51)
    {
      v71 = 0;
      v26 = v95;
      while (1)
      {
        v72 = v50;
        if ((unint64_t)v50 < v14)
        {
          v73 = v95 - v50;
          v72 = v50;
          do
          {
            if (!*v72)
              goto LABEL_161;
            ++v72;
            --v73;
          }
          while (v73);
          v72 = v95;
        }
        if (*v72)
          break;
LABEL_161:
        v74 = &(*v97)[32 * v71];
        *(_QWORD *)v74 = v50;
        *((_QWORD *)v74 + 1) = v72 - v50;
        v50 = v72 + 33;
        if ((unint64_t)(v72 + 33) > v14)
        {
          v20 = operator new();
          v21 = "missing stitched function hash";
          goto LABEL_19;
        }
        v75 = (uint64_t)&(*v97)[32 * v71];
        *(_QWORD *)(v75 + 16) = v72 + 1;
        *(_QWORD *)(v75 + 24) = 32;
        if (++v71 == v51)
          goto LABEL_165;
      }
      v20 = operator new();
      v21 = "missing stitched MetalLib path";
LABEL_19:
      __p[0] = (void *)v21;
      v99 = 259;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v23 = qword_1EF8F7238[0];
      *(_QWORD *)v20 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)__p, (_QWORD *)(v20 + 8));
      *(_QWORD *)(v20 + 32) = 3;
      *(_QWORD *)(v20 + 40) = v23;
      *(_BYTE *)(v20 + 48) = 1;
LABEL_22:
      *a3 = v20;
      sub_1C5A032A0(v9);
    }
    v26 = v95;
LABEL_165:
    if (*v19 == 1162040403)
    {
      v78 = v50;
      if ((unint64_t)v50 >= v14)
        goto LABEL_173;
      v78 = v50;
      v79 = v26 - v50;
      do
      {
        if (!*v78)
        {
          v26 = v95;
          goto LABEL_178;
        }
        ++v78;
        --v79;
      }
      while (v79);
      v26 = v95;
      v78 = v95;
LABEL_173:
      if (*v78)
      {
        v20 = operator new();
        v82 = "missing stitching script path";
        goto LABEL_238;
      }
LABEL_178:
      v77 = v50;
      v76 = v78 - v50;
      a3 = v96;
      v28 = v93;
      v27 = v94;
      v30 = v91;
      v29 = v92;
      v31 = v90;
      v32 = 0uLL;
    }
    else
    {
      v28 = v93;
      v27 = v94;
      v30 = v91;
      v29 = v92;
      v31 = v90;
      if ((unint64_t)(v50 + 8) > v14)
      {
        v20 = operator new();
        v82 = "missing stitching script offset";
        goto LABEL_238;
      }
      v76 = 0;
      *(_QWORD *)(v9 + 248) = *(_QWORD *)v50;
      v77 = "";
    }
    *(_QWORD *)(v9 + 232) = v77;
    *(_QWORD *)(v9 + 240) = v76;
    v33 = (unint64_t)&v88[v89];
    if ((unint64_t)&v88[v89] > v14)
    {
      v20 = operator new();
      v82 = "missing stitching info padding";
      goto LABEL_238;
    }
LABEL_133:
    v24 = (unsigned __int16 *)(v33 + 4);
    v19 = (_DWORD *)v33;
    if (v33 + 4 > v14)
      goto LABEL_24;
  }
  if (*v19 == 1397312577)
  {
    v63 = (char *)v19 + 6;
    if ((unint64_t)v19 + 6 > v14)
    {
      v20 = operator new();
      v82 = "missing alias length";
      goto LABEL_238;
    }
    v64 = (char *)v19 + 6;
    if ((unint64_t)v19 + 6 < v14)
    {
      v65 = v29;
      v66 = v29 - (_QWORD)v19;
      v64 = (char *)v19 + 6;
      do
      {
        if (!*v64)
          goto LABEL_144;
        ++v64;
        --v66;
      }
      while (v66);
      v64 = v26;
    }
    v65 = v29;
    if (*v64)
    {
      v20 = operator new();
      v82 = "invalid function alias";
      goto LABEL_238;
    }
LABEL_144:
    *(_QWORD *)(v9 + 104) = v63;
    *(_QWORD *)(v9 + 112) = v64 - v63;
    v67 = v64 + 1;
    v68 = v64 + 1;
    if ((unint64_t)(v64 + 1) >= v14)
      goto LABEL_149;
    v69 = v30 - (_QWORD)v64;
    v68 = v67;
    do
    {
      if (!*v68)
      {
        a3 = v96;
        v29 = v65;
        v32 = 0uLL;
        goto LABEL_176;
      }
      ++v68;
      --v69;
    }
    while (v69);
    v68 = v26;
LABEL_149:
    a3 = v96;
    v29 = v65;
    v32 = 0uLL;
    if (*v68)
    {
      v20 = operator new();
      v82 = "invalid function name";
      goto LABEL_238;
    }
LABEL_176:
    *(_QWORD *)(v9 + 8) = v67;
    *(_QWORD *)(v9 + 16) = v68 - v67;
    v33 = (unint64_t)(v68 + 1);
    goto LABEL_133;
  }
  if (*v19 != 1413762629)
  {
    if ((unint64_t)v19 + 6 > v14)
      goto LABEL_202;
    v33 = (unint64_t)v19 + *v24 + 6;
    if (v33 > v14)
    {
      v20 = operator new();
      v82 = "missing token data";
      goto LABEL_238;
    }
    goto LABEL_133;
  }
  if (!*(_QWORD *)(v9 + 16))
  {
    v20 = operator new();
    v82 = "function name required";
LABEL_238:
    __p[0] = (void *)v82;
    v99 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v84 = qword_1EF8F7238[0];
    *(_QWORD *)v20 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)__p, (_QWORD *)(v20 + 8));
    *(_QWORD *)(v20 + 32) = 3;
    *(_QWORD *)(v20 + 40) = v84;
    *(_BYTE *)(v20 + 48) = 1;
    a3 = v96;
    goto LABEL_22;
  }
  if (*(unsigned __int8 *)(v9 + 24) == 255)
  {
    v20 = operator new();
    v82 = "function type required";
    goto LABEL_238;
  }
  if (!*(_QWORD *)(v9 + 40))
  {
    v20 = operator new();
    v82 = "function hash required";
    goto LABEL_238;
  }
  if (*v18 == -1)
  {
    v20 = operator new();
    v82 = "function public metadata offset required";
    goto LABEL_238;
  }
  if (*(_QWORD *)(v9 + 56) == -1)
  {
    v20 = operator new();
    v82 = "function private metadata offset required";
    goto LABEL_238;
  }
  if ((*((_WORD *)this + 35) & 1) == 0 && *(_QWORD *)(v9 + 64) == -1)
  {
    v20 = operator new();
    v82 = "function module offset required";
    goto LABEL_238;
  }
  if (*(__int16 *)(v9 + 72) == -1)
  {
    v20 = operator new();
    v82 = "function AIR major version required";
    goto LABEL_238;
  }
  if (*(__int16 *)(v9 + 74) == -1)
  {
    v20 = operator new();
    v82 = "function AIR minor version required";
    goto LABEL_238;
  }
  if (*(__int16 *)(v9 + 76) == -1)
  {
    v20 = operator new();
    v82 = "function Metal major version required";
    goto LABEL_238;
  }
  if (*(__int16 *)(v9 + 78) == -1)
  {
    v20 = operator new();
    v82 = "function Metal minor version required";
    goto LABEL_238;
  }
  v80 = *((_QWORD *)this + 35);
  result = *(_QWORD *)(v80 + 8 * a2);
  *(_QWORD *)(v80 + 8 * a2) = v9;
  if (result)
    sub_1C5A032A0(result);
  *v96 = 0;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::materializeVariableNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned int *v15;
  __int128 v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  const char *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  __int16 v58;

  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  if (v7 >= *((_QWORD *)this + 25) + 4)
    v8 = *((_QWORD *)this + 25) + 4;
  else
    v8 = *((_QWORD *)this + 3);
  v9 = operator new();
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  v10 = (_DWORD *)sub_1C5A011A0((uint64_t)this + 936, a2);
  if ((_DWORD *)((char *)this + 1000) == v10)
  {
    v12 = 0;
    v13 = (_DWORD *)(v6 + v8);
  }
  else
  {
    v12 = v10[2];
    v13 = *(_DWORD **)v10;
  }
  v14 = v6 + v7;
  if (v12 != a2)
  {
    while (1)
    {
      v15 = *(unsigned int **)(*((_QWORD *)this + 75) + 8 * v12);
      if (!v15)
      {
        v15 = v13;
        if ((unint64_t)(v13 + 1) > v14)
          break;
      }
      v13 = (_DWORD *)((char *)v13 + *v15);
      if (a2 == ++v12)
        goto LABEL_11;
    }
LABEL_14:
    v19 = operator new();
    v20 = "missing variable data size";
    goto LABEL_17;
  }
LABEL_11:
  if (!v11)
    sub_1C5A01260((uint64_t)this + 936, (uint64_t)v13, a2);
  *(_QWORD *)&v16 = -1;
  *((_QWORD *)&v16 + 1) = -1;
  *(_OWORD *)(v9 + 40) = v16;
  v17 = (uint64_t *)(v9 + 40);
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = v16;
  v18 = v13 + 1;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_QWORD *)(v9 + 120) = 0;
  if ((unint64_t)(v13 + 1) > v14)
    goto LABEL_14;
  v22 = *v13;
  v21 = (unsigned __int16 *)(v13 + 2);
  *(_DWORD *)v9 = v22;
  if ((unint64_t)v21 > v14)
  {
LABEL_16:
    v19 = operator new();
    v20 = "missing variable token";
    goto LABEL_17;
  }
  v26 = 0;
  v27 = 0;
  v28 = (char *)(v7 + v6);
  v29 = v7 + v6 - 6;
  v56 = v7 + v6 - 1;
  v30 = -1;
  v31 = 0xFFFF;
  v32 = 0xFFFF;
  v33 = 0xFFFF;
  v34 = 0xFFFF;
  v35 = -1;
  v36 = -1;
  while (1)
  {
    switch(*v18)
    {
      case 0x454D414E:
        v38 = (char *)v18 + 6;
        if ((unint64_t)v18 + 6 > v14)
        {
          v19 = operator new();
          v20 = "missing variable name length";
          goto LABEL_17;
        }
        v39 = *v21;
        v37 = (unint64_t)&v38[v39];
        if ((unint64_t)&v38[v39] > v14)
          goto LABEL_94;
        v40 = (_BYTE *)(v39 - 1);
        v41 = v18 + 1;
        do
        {
          v27 = (_BYTE *)(v39 - 1);
          if (v39 == 1)
            break;
        }
        while (!*((unsigned __int8 *)v41 + v39--));
        if (v27 >= v40)
          v27 = v40;
        *(_QWORD *)(v9 + 8) = v38;
        *(_QWORD *)(v9 + 16) = v27;
        if (v40[(_QWORD)v38])
        {
LABEL_94:
          v19 = operator new();
          v20 = "invalid variable name";
          goto LABEL_17;
        }
        goto LABEL_92;
      case 0x48534148:
        if ((unint64_t)v18 + 6 > v14)
          goto LABEL_95;
        v37 = (unint64_t)v18 + 38;
        if ((unint64_t)v18 + 38 > v14)
        {
          v19 = operator new();
          v20 = "missing variable hash";
          goto LABEL_17;
        }
        *(_QWORD *)(v9 + 24) = (char *)v18 + 6;
        *(_QWORD *)(v9 + 32) = 32;
        v26 = 32;
        goto LABEL_92;
      case 0x5446464F:
        if ((unint64_t)v18 + 6 > v14)
          goto LABEL_95;
        if ((unint64_t)v18 + 14 > v14)
        {
LABEL_97:
          v19 = operator new();
          v20 = "missing variable public metadata offset";
          goto LABEL_17;
        }
        v36 = *(_QWORD *)((char *)v18 + 6);
        *v17 = v36;
        v43 = (uint64_t *)((char *)v18 + 22);
        if ((unint64_t)v18 + 22 > v14)
          goto LABEL_99;
        v35 = *(_QWORD *)((char *)v18 + 14);
        *(_QWORD *)(v9 + 48) = v35;
        v37 = (unint64_t)v18 + 30;
        if ((unint64_t)v18 + 30 > v14)
        {
          v19 = operator new();
          v20 = "missing variable module offset";
          goto LABEL_17;
        }
        v30 = *v43;
        *(_QWORD *)(v9 + 56) = *v43;
        goto LABEL_92;
      case 0x4546464F:
        v44 = (char *)v18 + 6;
        if ((unint64_t)v18 + 6 > v14)
        {
          v19 = operator new();
          v20 = "missing external offset length";
          goto LABEL_17;
        }
        v45 = *v21;
        v46 = (char *)v18 + 6;
        if ((unint64_t)v18 + 6 >= v14)
        {
LABEL_57:
          if (*v46)
          {
            v19 = operator new();
            v20 = "missing variable external offset path";
            goto LABEL_17;
          }
        }
        else
        {
          v47 = v29 - (_QWORD)v18;
          v46 = (char *)v18 + 6;
          while (*v46)
          {
            ++v46;
            if (!--v47)
            {
              v46 = v28;
              goto LABEL_57;
            }
          }
        }
        *(_QWORD *)(v9 + 104) = v44;
        *(_QWORD *)(v9 + 112) = v46 - v44;
        if ((unint64_t)(v46 + 9) > v14)
          goto LABEL_97;
        v36 = *(_QWORD *)(v46 + 1);
        *v17 = v36;
        v48 = (uint64_t *)(v46 + 17);
        if ((unint64_t)(v46 + 17) > v14)
        {
LABEL_99:
          v19 = operator new();
          v20 = "missing variable private metadata offset";
          goto LABEL_17;
        }
        v35 = *(_QWORD *)(v46 + 9);
        *(_QWORD *)(v9 + 48) = v35;
        if ((unint64_t)(v46 + 25) > v14)
        {
          v19 = operator new();
          v20 = "missing function variable offset";
          goto LABEL_17;
        }
        v30 = *v48;
        *(_QWORD *)(v9 + 56) = *v48;
        v37 = (unint64_t)&v44[v45];
        if (v37 > v14)
        {
          v19 = operator new();
          v20 = "missing external offset padding";
          goto LABEL_17;
        }
        goto LABEL_92;
      case 0x53524556:
        if ((unint64_t)v18 + 6 > v14)
          goto LABEL_95;
        if ((unint64_t)(v18 + 2) > v14)
        {
          v19 = operator new();
          v20 = "missing variable AIR major version";
          goto LABEL_17;
        }
        v34 = *((unsigned __int16 *)v18 + 3);
        *(_WORD *)(v9 + 64) = v34;
        if ((unint64_t)v18 + 10 > v14)
        {
          v19 = operator new();
          v20 = "missing variable AIR minor version";
          goto LABEL_17;
        }
        v33 = *((unsigned __int16 *)v18 + 4);
        *(_WORD *)(v9 + 66) = v33;
        if ((unint64_t)(v18 + 3) > v14)
        {
          v19 = operator new();
          v20 = "missing variable Metal major version";
          goto LABEL_17;
        }
        v32 = *((unsigned __int16 *)v18 + 5);
        *(_WORD *)(v9 + 68) = v32;
        v37 = (unint64_t)v18 + 14;
        if ((unint64_t)v18 + 14 > v14)
        {
          v19 = operator new();
          v20 = "missing variable Metal minor version";
          goto LABEL_17;
        }
        v31 = *((unsigned __int16 *)v18 + 6);
        *(_WORD *)(v9 + 70) = v31;
        goto LABEL_92;
      case 0x5A53444D:
        if ((unint64_t)v18 + 6 > v14)
          goto LABEL_95;
        v37 = (unint64_t)v18 + 14;
        if ((unint64_t)v18 + 14 > v14)
        {
          v19 = operator new();
          v20 = "missing variable module size";
          goto LABEL_17;
        }
        *(_QWORD *)(v9 + 72) = *(_QWORD *)((char *)v18 + 6);
        goto LABEL_92;
      case 0x46464F53:
        if ((unint64_t)v18 + 6 > v14)
          goto LABEL_95;
        v37 = (unint64_t)v18 + 14;
        if ((unint64_t)v18 + 14 > v14)
        {
          v19 = operator new();
          v20 = "missing variable source offset";
          goto LABEL_17;
        }
        *(_QWORD *)(v9 + 80) = *(_QWORD *)((char *)v18 + 6);
        goto LABEL_92;
      case 0x544C4652:
        if ((unint64_t)v18 + 6 > v14)
        {
LABEL_95:
          v19 = operator new();
          v20 = "missing token data size";
          goto LABEL_17;
        }
        v37 = (unint64_t)v18 + 14;
        if ((unint64_t)v18 + 14 > v14)
        {
          v19 = operator new();
          v20 = "missing variable reflection offset";
          goto LABEL_17;
        }
        *(_QWORD *)(v9 + 120) = *(_QWORD *)((char *)v18 + 6);
        goto LABEL_92;
    }
    if (*v18 != 1397312577)
      break;
    v49 = (char *)v18 + 6;
    if ((unint64_t)v18 + 6 > v14)
    {
      v19 = operator new();
      v20 = "missing alias length";
      goto LABEL_17;
    }
    v50 = (char *)v18 + 6;
    if ((unint64_t)v18 + 6 >= v14)
    {
LABEL_84:
      if (*v50)
      {
        v19 = operator new();
        v20 = "invalid variable alias";
        goto LABEL_17;
      }
    }
    else
    {
      v51 = v29 - (_QWORD)v18;
      v50 = (char *)v18 + 6;
      while (*v50)
      {
        ++v50;
        if (!--v51)
        {
          v50 = v28;
          goto LABEL_84;
        }
      }
    }
    *(_QWORD *)(v9 + 88) = v49;
    *(_QWORD *)(v9 + 96) = v50 - v49;
    v52 = v50 + 1;
    v53 = v50 + 1;
    if ((unint64_t)(v50 + 1) >= v14)
    {
LABEL_90:
      if (*v53)
        goto LABEL_94;
    }
    else
    {
      v54 = v56 - (_QWORD)v50;
      v53 = v50 + 1;
      while (*v53)
      {
        ++v53;
        if (!--v54)
        {
          v53 = v28;
          goto LABEL_90;
        }
      }
    }
    v27 = (_BYTE *)(v53 - v52);
    *(_QWORD *)(v9 + 8) = v52;
    *(_QWORD *)(v9 + 16) = v53 - v52;
    v37 = (unint64_t)(v53 + 1);
LABEL_92:
    v21 = (unsigned __int16 *)(v37 + 4);
    v18 = (_DWORD *)v37;
    if (v37 + 4 > v14)
      goto LABEL_16;
  }
  if (*v18 != 1413762629)
  {
    if ((unint64_t)v18 + 6 > v14)
      goto LABEL_95;
    v37 = (unint64_t)v18 + *v21 + 6;
    if (v37 > v14)
    {
      v19 = operator new();
      v20 = "missing token data";
      goto LABEL_17;
    }
    goto LABEL_92;
  }
  if (!v27)
  {
    v19 = operator new();
    v20 = "variable name required";
    goto LABEL_17;
  }
  if (!v26)
  {
    v19 = operator new();
    v20 = "variable hash required";
    goto LABEL_17;
  }
  if (v36)
  {
    v19 = operator new();
    v20 = "variable public metadata offset corrupted";
    goto LABEL_17;
  }
  if (v35 == -1)
  {
    v19 = operator new();
    v20 = "variable private metadata offset required";
    goto LABEL_17;
  }
  if ((*((_WORD *)this + 35) & 1) == 0 && v30 == -1)
  {
    v19 = operator new();
    v20 = "variable module offset required";
    goto LABEL_17;
  }
  if (v34 == 0xFFFF)
  {
    v19 = operator new();
    v20 = "variable AIR major version required";
    goto LABEL_17;
  }
  if (v33 == 0xFFFF)
  {
    v19 = operator new();
    v20 = "variable AIR minor version required";
    goto LABEL_17;
  }
  if (v32)
  {
    v19 = operator new();
    v20 = "variable Metal major version corrupted";
    goto LABEL_17;
  }
  if (v31)
  {
    v19 = operator new();
    v20 = "variable Metal minor version corrupted";
LABEL_17:
    v57 = v20;
    v58 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v24 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v57, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v24;
    *(_BYTE *)(v19 + 48) = 1;
    *a3 = v19;
    return MEMORY[0x1CAA32FC0](v9, 0x1050C40B09E53CALL);
  }
  else
  {
    v55 = *((_QWORD *)this + 75);
    result = *(_QWORD *)(v55 + 8 * a2);
    *(_QWORD *)(v55 + 8 * a2) = v9;
    if (result)
      result = MEMORY[0x1CAA32FC0](result, 0x1050C40B09E53CALL, 1162233423);
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolName@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = this;
  v5 = a2;
  v6 = this[35];
  v7 = this[36] - v6;
  if (a2 >= (unint64_t)(v7 >> 3))
  {
    v12 = this[75];
    v13 = this[76] - v12;
    v14 = (v7 >> 3) + (v13 >> 3);
    v15 = a2 >= v14;
    v16 = a2 - v14;
    if (v15)
    {
      v21 = *(_QWORD *)(this[78] + 8 * v16);
      if (!v21)
      {
        this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeImportedSymbolNo((llvm::object::MetalLibObjectFile *)this, a2 - (((unint64_t)v7 >> 3) + ((unint64_t)v13 >> 3)), &v23);
        v22 = v23;
        if (v23)
          goto LABEL_19;
        v21 = *(_QWORD *)(v3[78] + 8 * (v5 - (((v3[36] - v3[35]) >> 3) + ((v3[76] - v3[75]) >> 3))));
      }
      *(_BYTE *)(a3 + 16) &= ~1u;
      v20 = *(_OWORD *)(v21 + 8);
      goto LABEL_13;
    }
    v17 = *(_QWORD *)(v12 + 8 * (a2 - (v7 >> 3)));
    if (!v17)
    {
      this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)this, a2 - ((unint64_t)v7 >> 3), &v23);
      v22 = v23;
      if (v23)
        goto LABEL_19;
      v17 = *(_QWORD *)(v3[75] + 8 * (v5 - ((v3[36] - v3[35]) >> 3)));
    }
    v11 = (__int128 *)(v17 + 88);
    v18 = *(_QWORD *)(v17 + 96);
    v19 = (__int128 *)(v17 + 8);
    if (!v18)
      v11 = v19;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v6 + 8 * a2);
  if (v8)
    goto LABEL_3;
  this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)this, a2, &v23);
  v22 = v23;
  if (!v23)
  {
    v8 = *(_QWORD *)(v3[35] + 8 * v5);
LABEL_3:
    v9 = (__int128 *)(v8 + 104);
    v10 = *(_QWORD *)(v8 + 112);
    v11 = (__int128 *)(v8 + 8);
    if (v10)
      v11 = v9;
LABEL_10:
    *(_BYTE *)(a3 + 16) &= ~1u;
    v20 = *v11;
LABEL_13:
    *(_OWORD *)a3 = v20;
    return this;
  }
LABEL_19:
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v22;
  return this;
}

uint64_t llvm::object::MetalLibObjectFile::materializeImportedSymbolNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  char v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  uint64_t v17;
  const char *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v33;
  const char *v34;
  __int16 v35;

  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  if (v7 >= *((_QWORD *)this + 27) + 4)
    v8 = *((_QWORD *)this + 27) + 4;
  else
    v8 = *((_QWORD *)this + 3);
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  *v9 = 0;
  v9[2] = 0;
  v10 = (_DWORD *)sub_1C5A011A0((uint64_t)this + 1000, a2);
  if ((_DWORD *)((char *)this + 1064) == v10)
  {
    v12 = 0;
    v13 = (_DWORD *)(v6 + v8);
  }
  else
  {
    v12 = v10[2];
    v13 = *(_DWORD **)v10;
  }
  v14 = v6 + v7;
  if (v12 != a2)
  {
    do
    {
      v15 = *(unsigned int **)(*((_QWORD *)this + 78) + 8 * v12);
      if (!v15)
      {
        v15 = v13;
        if ((unint64_t)(v13 + 1) > v14)
          goto LABEL_14;
      }
      v13 = (_DWORD *)((char *)v13 + *v15);
    }
    while (a2 != ++v12);
  }
  if (!v11)
    sub_1C5A01260((uint64_t)this + 1000, (uint64_t)v13, a2);
  v16 = v13 + 1;
  v9[1] = 0;
  v9[2] = 0;
  if ((unint64_t)(v13 + 1) > v14)
  {
LABEL_14:
    v17 = operator new();
    v18 = "missing imported symbol data size";
LABEL_17:
    v34 = v18;
    v35 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v22 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v34, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v22;
    *(_BYTE *)(v17 + 48) = 1;
    *a3 = v17;
    return MEMORY[0x1CAA32FC0](v9, 0x1050C40A5B97131);
  }
  v20 = *v13;
  v19 = (unsigned __int16 *)(v13 + 2);
  *(_DWORD *)v9 = v20;
  if ((unint64_t)v19 > v14)
  {
LABEL_16:
    v17 = operator new();
    v18 = "missing imported symbol token";
    goto LABEL_17;
  }
  v24 = 0;
  while (*v16 == 1162690894)
  {
    v27 = (char *)v16 + 6;
    if ((unint64_t)v16 + 6 > v14)
    {
      v17 = operator new();
      v18 = "missing imported symbol name length";
      goto LABEL_17;
    }
    v28 = *v19;
    v26 = (unint64_t)&v27[v28];
    if ((unint64_t)&v27[v28] > v14)
      goto LABEL_37;
    v29 = v28 - 1;
    v30 = v16 + 1;
    do
    {
      v31 = v28 - 1;
      if (v28 == 1)
        break;
    }
    while (!*((unsigned __int8 *)v30 + v28--));
    v24 = v31 >= v29 ? v29 : v31;
    v9[1] = v27;
    v9[2] = v24;
    if (v27[v29])
    {
LABEL_37:
      v17 = operator new();
      v18 = "invalid imported symbol name";
      goto LABEL_17;
    }
LABEL_35:
    v19 = (unsigned __int16 *)(v26 + 4);
    v16 = (_DWORD *)v26;
    if (v26 + 4 > v14)
      goto LABEL_16;
  }
  if (*v16 != 1413762629)
  {
    v25 = (char *)v16 + 6;
    if ((unint64_t)v25 > v14)
    {
      v17 = operator new();
      v18 = "missing token data size";
      goto LABEL_17;
    }
    v26 = (unint64_t)&v25[*v19];
    if (v26 > v14)
    {
      v17 = operator new();
      v18 = "missing token data";
      goto LABEL_17;
    }
    goto LABEL_35;
  }
  if (!v24)
  {
    v17 = operator new();
    v18 = "imported symbol name required";
    goto LABEL_17;
  }
  v33 = *((_QWORD *)this + 78);
  result = *(_QWORD *)(v33 + 8 * a2);
  *(_QWORD *)(v33 + 8 * a2) = v9;
  if (result)
    result = MEMORY[0x1CAA32FC0](result, 0x1050C40A5B97131);
  *a3 = 0;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::getSymbolValueImpl(llvm::object::MetalLibObjectFile *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = a2;
  v4 = *((_QWORD *)this + 35);
  v5 = *((_QWORD *)this + 36) - v4;
  if (a2 < (unint64_t)(v5 >> 3))
  {
    v6 = *(_QWORD *)(v4 + 8 * a2);
    if (v6)
    {
LABEL_3:
      v7 = *(_QWORD *)(v6 + 8);
      return v7 - *((_QWORD *)this + 2) - 10;
    }
    llvm::object::MetalLibObjectFile::materializeFunctionNo(this, a2, (uint64_t *)&v12);
    v11 = v12;
    if (!v12)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v3);
      goto LABEL_3;
    }
    goto LABEL_11;
  }
  v8 = *((_QWORD *)this + 75);
  if (a2 < (unint64_t)((v5 >> 3) + ((*((_QWORD *)this + 76) - v8) >> 3)))
  {
    v9 = *(_QWORD *)(v8 + 8 * (a2 - (v5 >> 3)));
    if (!v9)
    {
      llvm::object::MetalLibObjectFile::materializeVariableNo(this, a2 - ((unint64_t)v5 >> 3), (uint64_t *)&v12);
      v11 = v12;
      if (v12)
      {
LABEL_11:
        v13 = v11;
        sub_1C4D62BD4(&v13, &v14);
        if (v13)
          (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
        return 0;
      }
      v9 = *(_QWORD *)(*((_QWORD *)this + 75) + 8 * (v3 - ((*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3)));
    }
    v7 = *(_QWORD *)(v9 + 8);
    return v7 - *((_QWORD *)this + 2) - 10;
  }
  return 0;
}

__n128 llvm::object::MetalLibObjectFile::getTargetTriple@<Q0>(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  __n128 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  const char *v11;
  char *v12;
  std::string::size_type size;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __n128 *v25;
  __int128 v26;
  __int16 v27;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  _QWORD v31[2];
  void *__p;
  char v33;
  char v34;
  std::string __str;
  __n128 v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 696;
  v5 = (__n128 *)((char *)this + 720);
  if (!*((_DWORD *)this + 180))
  {
    v25 = (__n128 *)((char *)this + 720);
    v6 = *((unsigned __int16 *)this + 34);
    v31[0] = (*((unsigned __int16 *)this + 32) >> 1) | ((unint64_t)*((unsigned __int16 *)this + 33) << 32) | 0x8000000000000000;
    v31[1] = v6 | 0x80000000;
    __str.__r_.__value_.__r.__words[0] = 0x8000000200000001;
    __str.__r_.__value_.__l.__size_ = 2147483654;
    if (!sub_1C4F7A4D8(v31, &__str))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
      if ((*((_WORD *)this + 35) & 0x100) != 0)
        v11 = "air64-apple";
      else
        v11 = "air32-apple";
      if ((*((_WORD *)this + 35) & 0x100) != 0)
        v12 = "";
      else
        v12 = "";
      if ((unint64_t)(v12 - v11) >= 0x21)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__str, &v36, v12 - v11, 1);
        size = __str.__r_.__value_.__l.__size_;
      }
      else
      {
        size = 0;
      }
      if (v11 != v12)
      {
        memcpy((void *)(__str.__r_.__value_.__r.__words[0] + size), v11, v12 - v11);
        size = __str.__r_.__value_.__l.__size_;
      }
      __str.__r_.__value_.__l.__size_ = size + v12 - v11;
      __asm { BR              X11 }
    }
    v24 = a2;
    v7 = *((_QWORD *)this + 45) - *((_QWORD *)this + 44);
    if ((v7 & 0x3FFFFFFFCLL) != 0)
    {
      v8 = 0;
      v9 = (v7 >> 2);
      do
      {
        if (*(_DWORD *)(*((_QWORD *)this + 44) + 4 * v8) == -1)
        {
          sub_1C5A01C50((uint64_t *)&__p, (uint64_t **)this, v8, (uint64_t *)this + 35, (uint64_t *)this + 75, (_DWORD **)this + 44, (_DWORD **)this + 47, (_QWORD *)this + 53, (_QWORD *)this + 56);
          if (__p)
          {
            *(_QWORD *)&v26 = __p;
            sub_1C4D62BD4((char **)&v26, &__str.__r_.__value_.__l.__data_);
            if ((_QWORD)v26)
              (*(void (**)(_QWORD))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        ++v8;
      }
      while (v9 != v8);
    }
    v14 = *((_QWORD *)this + 48) - *((_QWORD *)this + 47);
    if ((v14 & 0x3FFFFFFFCLL) != 0)
    {
      v15 = 0;
      v16 = (v14 >> 2);
      do
      {
        if (*(_DWORD *)(*((_QWORD *)this + 47) + 4 * v15) == -1)
        {
          sub_1C5A020A8((uint64_t *)&__p, (uint64_t **)this, v15, (uint64_t *)this + 75, (uint64_t *)this + 35, (_DWORD **)this + 47, (_DWORD **)this + 44, (_QWORD *)this + 56, (_QWORD *)this + 53);
          if (__p)
          {
            *(_QWORD *)&v26 = __p;
            sub_1C4D62BD4((char **)&v26, &__str.__r_.__value_.__l.__data_);
            if ((_QWORD)v26)
              (*(void (**)(_QWORD))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        ++v15;
      }
      while (v16 != v15);
    }
    v17 = *((_QWORD *)this + 50);
    v18 = *((_QWORD *)this + 51);
    if (((v18 - v17) & 0x7FFFFFFF8) != 0)
    {
      v19 = 0;
      v20 = ((unint64_t)(v18 - v17) >> 3);
      a2 = v24;
      v5 = v25;
      do
      {
        v21 = *(_QWORD *)(*((_QWORD *)this + 50) + 8 * v19);
        if (v21)
        {
          v28 = *(_OWORD *)(v21 + 16);
          v29 = "";
          v30 = 0;
          llvm::getBitcodeTargetTriple((uint64_t)&v28, (uint64_t)&__p);
          if ((v34 & 1) != 0)
          {
            v22 = __p;
            __p = 0;
            *(_QWORD *)&v26 = v22;
            sub_1C4D62BD4((char **)&v26, &__str.__r_.__value_.__l.__data_);
            if ((_QWORD)v26)
              (*(void (**)(_QWORD))(*(_QWORD *)v26 + 8))(v26);
          }
          else
          {
            v27 = 260;
            *(_QWORD *)&v26 = &__p;
            llvm::Triple::Triple((uint64_t)&__str, (llvm::Twine *)&v26);
            if (v19)
            {
              if (v25->n128_u32[0] != v36.n128_u32[0]
                || *(_QWORD *)((char *)this + 724) != *(unint64_t *)((char *)v36.n128_u64 + 4)
                || *((_DWORD *)this + 183) != v36.n128_u32[3]
                || *((_QWORD *)this + 92) != v37)
              {
                if (*((char *)this + 719) < 0)
                  operator delete(*(void **)v4);
                *((_OWORD *)v4 + 1) = 0u;
                *((_OWORD *)v4 + 2) = 0u;
                *(_OWORD *)v4 = 0u;
              }
            }
            else
            {
              std::string::operator=((std::string *)v4, &__str);
              *v25 = v36;
              v25[1].n128_u64[0] = v37;
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          if ((v34 & 1) != 0)
          {
            v23 = __p;
            __p = 0;
            if (v23)
              (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
          }
          else if (v33 < 0)
          {
            operator delete(__p);
          }
        }
        ++v19;
      }
      while (v20 != v19);
      v17 = *((_QWORD *)this + 50);
      v18 = *((_QWORD *)this + 51);
    }
    else
    {
      a2 = v24;
      v5 = v25;
    }
    if (v17 == v18)
      __asm { BR              X10 }
  }
  if (*((char *)this + 719) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *((void **)this + 87), *((_QWORD *)this + 88));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v4 + 2);
  }
  result = *v5;
  *(__n128 *)(a2 + 24) = *v5;
  *(_QWORD *)(a2 + 40) = v5[1].n128_u64[0];
  return result;
}

void llvm::object::MetalLibObjectFile::materializeModuleForFunctionNo(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_1C5A01C50(a3, (uint64_t **)this, a2, (uint64_t *)this + 35, (uint64_t *)this + 75, (_DWORD **)this + 44, (_DWORD **)this + 47, (_QWORD *)this + 53, (_QWORD *)this + 56);
}

void llvm::object::MetalLibObjectFile::materializeModuleForVariableNo(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_1C5A020A8(a3, (uint64_t **)this, a2, (uint64_t *)this + 75, (uint64_t *)this + 35, (_DWORD **)this + 47, (_DWORD **)this + 44, (_QWORD *)this + 56, (_QWORD *)this + 53);
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolHash@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this;
  v5 = a2;
  v6 = this[35];
  v7 = this[36] - v6;
  if (a2 < (unint64_t)(v7 >> 3))
  {
    v8 = *(_QWORD *)(v6 + 8 * a2);
    if (v8)
    {
LABEL_3:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v9 = *(_OWORD *)(v8 + 32);
LABEL_7:
      *(_OWORD *)a3 = v9;
      return this;
    }
    this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)this, a2, &v13);
    v12 = v13;
    if (!v13)
    {
      v8 = *(_QWORD *)(v3[35] + 8 * v5);
      goto LABEL_3;
    }
    goto LABEL_12;
  }
  v10 = this[75];
  if (a2 >= (unint64_t)((v7 >> 3) + ((this[76] - v10) >> 3)))
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return this;
  }
  v11 = *(_QWORD *)(v10 + 8 * (a2 - (v7 >> 3)));
  if (v11)
  {
LABEL_6:
    *(_BYTE *)(a3 + 16) &= ~1u;
    v9 = *(_OWORD *)(v11 + 24);
    goto LABEL_7;
  }
  this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)this, a2 - ((unint64_t)v7 >> 3), &v13);
  v12 = v13;
  if (!v13)
  {
    v11 = *(_QWORD *)(v3[75] + 8 * (v5 - ((v3[36] - v3[35]) >> 3)));
    goto LABEL_6;
  }
LABEL_12:
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v12;
  return this;
}

_QWORD *llvm::object::MetalLibObjectFile::getSymbolImplName@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this;
  v5 = a2;
  v6 = this[35];
  v7 = this[36] - v6;
  if (a2 < (unint64_t)(v7 >> 3))
  {
    v8 = *(_QWORD *)(v6 + 8 * a2);
    if (v8)
    {
LABEL_3:
      *(_BYTE *)(a3 + 16) &= ~1u;
      v9 = *(_OWORD *)(v8 + 8);
LABEL_7:
      *(_OWORD *)a3 = v9;
      return this;
    }
    this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)this, a2, &v13);
    v12 = v13;
    if (!v13)
    {
      v8 = *(_QWORD *)(v3[35] + 8 * v5);
      goto LABEL_3;
    }
    goto LABEL_12;
  }
  v10 = this[75];
  if (a2 >= (unint64_t)((v7 >> 3) + ((this[76] - v10) >> 3)))
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = "";
    *(_QWORD *)(a3 + 8) = 0;
    return this;
  }
  v11 = *(_QWORD *)(v10 + 8 * (a2 - (v7 >> 3)));
  if (v11)
  {
LABEL_6:
    *(_BYTE *)(a3 + 16) &= ~1u;
    v9 = *(_OWORD *)(v11 + 8);
    goto LABEL_7;
  }
  this = (_QWORD *)llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)this, a2 - ((unint64_t)v7 >> 3), &v13);
  v12 = v13;
  if (!v13)
  {
    v11 = *(_QWORD *)(v3[75] + 8 * (v5 - ((v3[36] - v3[35]) >> 3)));
    goto LABEL_6;
  }
LABEL_12:
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v12;
  return this;
}

void llvm::object::MetalLibObjectFile::getSymbolImplAddress(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;

  if ((*(_WORD *)(a1 + 70) & 1) != 0)
    goto LABEL_9;
  v5 = a2;
  v6 = (uint64_t *)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280);
  if (a2 >= (unint64_t)(v7 >> 3))
  {
    if (a2 < (unint64_t)((v7 >> 3) + ((uint64_t)(*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 3)))
    {
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 376) + 4 * (a2 - (v7 >> 3)));
      if (v10 == -1)
      {
        sub_1C5A020A8(&v14, (uint64_t **)a1, a2 - ((unint64_t)v7 >> 3), (uint64_t *)(a1 + 600), v6, (_DWORD **)(a1 + 376), (_DWORD **)(a1 + 352), (_QWORD *)(a1 + 448), (_QWORD *)(a1 + 424));
        v11 = v14;
        if (v14)
          goto LABEL_13;
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 376)
                        + 4 * (v5 - ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3)));
      }
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v10);
      goto LABEL_8;
    }
LABEL_9:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
    return;
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 4 * a2);
  if (v8 == -1)
  {
    v13 = (_QWORD *)(a1 + 352);
    sub_1C5A01C50(&v14, (uint64_t **)a1, a2, v6, (uint64_t *)(a1 + 600), (_DWORD **)(a1 + 352), (_DWORD **)(a1 + 376), (_QWORD *)(a1 + 424), (_QWORD *)(a1 + 448));
    v11 = v14;
    if (!v14)
    {
      v8 = *(_DWORD *)(*v13 + 4 * v5);
      goto LABEL_4;
    }
LABEL_13:
    v12 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_14;
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v8);
LABEL_8:
  v11 = *(_QWORD *)(v9 + 16) - *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_14:
  *(_BYTE *)(a3 + 8) = v12;
  *(_QWORD *)a3 = v11;
}

void llvm::object::MetalLibObjectFile::getSymbolImplSize(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;

  if ((*(_WORD *)(a1 + 70) & 1) != 0)
    goto LABEL_9;
  v5 = a2;
  v6 = (uint64_t *)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280);
  if (a2 >= (unint64_t)(v7 >> 3))
  {
    if (a2 < (unint64_t)((v7 >> 3) + ((uint64_t)(*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 3)))
    {
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 376) + 4 * (a2 - (v7 >> 3)));
      if (v10 == -1)
      {
        sub_1C5A020A8(&v14, (uint64_t **)a1, a2 - ((unint64_t)v7 >> 3), (uint64_t *)(a1 + 600), v6, (_DWORD **)(a1 + 376), (_DWORD **)(a1 + 352), (_QWORD *)(a1 + 448), (_QWORD *)(a1 + 424));
        v11 = v14;
        if (v14)
          goto LABEL_13;
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 376)
                        + 4 * (v5 - ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3)));
      }
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v10);
      goto LABEL_8;
    }
LABEL_9:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
    return;
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 4 * a2);
  if (v8 == -1)
  {
    v13 = (_QWORD *)(a1 + 352);
    sub_1C5A01C50(&v14, (uint64_t **)a1, a2, v6, (uint64_t *)(a1 + 600), (_DWORD **)(a1 + 352), (_DWORD **)(a1 + 376), (_QWORD *)(a1 + 424), (_QWORD *)(a1 + 448));
    v11 = v14;
    if (!v14)
    {
      v8 = *(_DWORD *)(*v13 + 4 * v5);
      goto LABEL_4;
    }
LABEL_13:
    v12 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_14;
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v8);
LABEL_8:
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_14:
  *(_BYTE *)(a3 + 8) = v12;
  *(_QWORD *)a3 = v11;
}

uint64_t llvm::object::MetalLibObjectFile::getSymbolImplSection@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if ((*(_WORD *)(result + 70) & 1) != 0)
  {
    v3 = 11;
  }
  else
  {
    v3 = 11;
    if (((uint64_t)(*(_QWORD *)(result + 608) - *(_QWORD *)(result + 600)) >> 3)
       + ((uint64_t)(*(_QWORD *)(result + 288) - *(_QWORD *)(result + 280)) >> 3) > (unint64_t)a2)
      v3 = 3;
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::dynamic_symbol_begin(llvm::object::MetalLibObjectFile *this)
{
  uint64_t v2;

  v2 = 0x1FFFFFFFFLL;
  (*(void (**)(llvm::object::MetalLibObjectFile *, uint64_t *))(*(_QWORD *)this + 24))(this, &v2);
  return v2;
}

void llvm::object::MetalLibObjectFile::findDynamicSymbol(_QWORD *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  int v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = (void *)0x1FFFFFFFFLL;
  (*(void (**)(_QWORD *, void **))(*a1 + 24))(a1, &v17);
  v8 = (uint64_t)v17;
  *(_QWORD *)&v16 = v17;
  *((_QWORD *)&v16 + 1) = a1;
  v9 = (void *)((((a1[76] - a1[75]) >> 3) + ((a1[36] - a1[35]) >> 3)) | 0x100000000);
  if (v17 == v9)
  {
LABEL_13:
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = a1;
  }
  else
  {
    while (1)
    {
      v17 = v19;
      v18 = xmmword_1C64638C0;
      sub_1C613932C((uint64_t)v13, (uint64_t)&v17);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *, _QWORD))(**((_QWORD **)&v16 + 1) + 32))(&v12, *((_QWORD *)&v16 + 1), v13, v16);
      v10 = v12;
      if (v12)
      {
        *(_BYTE *)(a4 + 16) |= 1u;
        *(_QWORD *)a4 = v10;
        goto LABEL_17;
      }
      v11 = v17;
      if ((_QWORD)v18 == a3 && (!a3 || !memcmp(v17, a2, a3)))
        break;
      v13[0] = off_1E81A6E70;
      if (v15 == 1 && v14)
      {
        MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
        v11 = v17;
      }
      if (v11 != v19)
        free(v11);
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v16 + 1) + 24))(*((_QWORD *)&v16 + 1), &v16);
      if ((void *)v16 == v9)
      {
        v8 = (((a1[76] - a1[75]) >> 3) + ((a1[36] - a1[35]) >> 3)) | 0x100000000;
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_OWORD *)a4 = v16;
LABEL_17:
    v13[0] = off_1E81A6E70;
    if (v15 == 1 && v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
    if (v17 != v19)
      free(v17);
  }
}

uint64_t llvm::object::MetalLibObjectFile::getSectionOffset(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C59FBBB4 + 4 * byte_1C86679F8[a2]))();
}

uint64_t sub_1C59FBBB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t llvm::object::MetalLibObjectFile::getSectionContents(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C59FBC2C + 4 * byte_1C8667A03[a2]))();
}

_QWORD *sub_1C59FBC2C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = result[3];
  v3 = result[11];
  if (v2 < v3)
    v3 = result[3];
  v4 = result[2] + v3;
  v5 = v2 - v3;
  if (v5 >= result[12])
    v5 = result[12];
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void llvm::object::MetalLibObjectFile::getArchTriple(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t AIRVersion;
  int v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  size_t v18;
  char v19;
  void *__p[2];
  const char *v21;
  int v22;
  __int16 v23;
  void *v24;
  __int128 v25;
  _WORD v26[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 432))(__p);
  AIRVersion = llvm::Triple::getAIRVersion((llvm::Triple *)__p);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v24 = v26;
  qmemcpy(v26, "air", 3);
  v25 = xmmword_1C86679A0;
  (*(void (**)(void **__return_ptr, llvm::object::MetalLibObjectFile *))(*(_QWORD *)this + 432))(__p, this);
  v5 = sub_1C5E4EA90(v22);
  if (v5 == 32)
    v6 = "32_v";
  else
    v6 = "64_v";
  if (v5 == 32)
    v7 = "";
  else
    v7 = "";
  v8 = v25;
  v9 = v7 - v6 + v25;
  if (*((_QWORD *)&v25 + 1) < v9)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v24, v26, v9, 1);
    v8 = v25;
  }
  if (v6 != v7)
  {
    memcpy((char *)v24 + v8, v6, v7 - v6);
    v8 = v25;
  }
  *(_QWORD *)&v25 = v8 + v7 - v6;
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v23 = 264;
  LODWORD(__p[0]) = AIRVersion;
  llvm::Twine::str((llvm::Twine *)__p, &v17);
  if (v19 >= 0)
    v10 = &v17;
  else
    v10 = v17;
  if (v19 >= 0)
    v11 = v19 & 0x7F;
  else
    v11 = v18;
  v12 = v25;
  if (*((_QWORD *)&v25 + 1) >= (unint64_t)v25 + v11)
  {
    if (!v11)
      goto LABEL_24;
    goto LABEL_23;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v24, v26, v25 + v11, 1);
  v12 = v25;
  if (v11)
  {
LABEL_23:
    memcpy((char *)v24 + v12, v10, v11);
    v12 = v25;
  }
LABEL_24:
  *(_QWORD *)&v25 = v12 + v11;
  if (v19 < 0)
    operator delete(v17);
  v23 = 264;
  LODWORD(__p[0]) = HIDWORD(AIRVersion) & (AIRVersion >> 63) & 0x7FFFFFFF;
  llvm::Twine::str((llvm::Twine *)__p, &v17);
  if (v19 >= 0)
    v13 = &v17;
  else
    v13 = v17;
  if (v19 >= 0)
    v14 = v19 & 0x7F;
  else
    v14 = v18;
  v15 = v25;
  if (*((_QWORD *)&v25 + 1) >= (unint64_t)v25 + v14)
  {
    if (!v14)
      goto LABEL_35;
    goto LABEL_34;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v24, v26, v25 + v14, 1);
  v15 = v25;
  if (v14)
  {
LABEL_34:
    memcpy((char *)v24 + v15, v13, v14);
    v15 = v25;
  }
LABEL_35:
  v16 = (void *)(v15 + v14);
  *(_QWORD *)&v25 = v16;
  if (v19 < 0)
  {
    operator delete(v17);
    v16 = (void *)v25;
  }
  v23 = 773;
  __p[0] = v24;
  __p[1] = v16;
  v21 = "-apple-darwin";
  llvm::Triple::Triple(a2, (llvm::Twine *)__p);
  if (v24 != v26)
    free(v24);
}

char *llvm::object::MetalLibObjectFile::getUUID(llvm::object::MetalLibObjectFile *this)
{
  char *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*((_QWORD *)this + 34))
    return (char *)*((_QWORD *)this + 33);
  v2 = (char *)this + 744;
  if (!*((_BYTE *)this + 760))
  {
    v4 = llvm::MD5::hash(*((int **)this + 2), *((_QWORD *)this + 3));
    v5 = *((unsigned __int8 *)this + 760);
    *((_QWORD *)this + 93) = v4;
    *((_QWORD *)this + 94) = v6;
    if (!v5)
      *((_BYTE *)this + 760) = 1;
  }
  return v2;
}

uint64_t llvm::object::MetalLibObjectFile::functions@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if (*(_BYTE *)(this + 792))
    goto LABEL_8;
  v4 = *(_QWORD *)(this + 288) - *(_QWORD *)(this + 280);
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_7:
    *(_BYTE *)(v2 + 792) = 1;
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 280);
    return this;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 280) + 8 * v5))
    {
      this = llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)v2, v5, &v8);
      v7 = v8;
      if (v8)
        break;
    }
    if (v6 == ++v5)
      goto LABEL_7;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
  return this;
}

_QWORD *llvm::object::MetalLibObjectFile::publicMetadata@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (uint64_t)this;
  if (*((_BYTE *)this + 793))
    goto LABEL_8;
  v4 = this[39] - this[38];
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_7:
    *(_BYTE *)(v2 + 793) = 1;
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 304);
    return this;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 304) + 8 * v5))
    {
      this = llvm::object::MetalLibObjectFile::materializePublicMetadataNo((llvm::object::MetalLibObjectFile *)v2, v5, &v8);
      v7 = v8;
      if (v8)
        break;
    }
    if (v6 == ++v5)
      goto LABEL_7;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
  return this;
}

_QWORD *llvm::object::MetalLibObjectFile::materializePublicMetadataNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  llvm::object::MetalLibObjectFile *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  const unsigned __int8 *v11;
  _OWORD *v12;
  _OWORD *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int16 *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  unsigned __int16 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  char *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  int v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  int64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  _BYTE *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  int64_t v84;
  unsigned __int8 **v85;
  unsigned __int8 *v86;
  unsigned __int8 v87;
  uint64_t v88;
  char *v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  int64_t v95;
  int64_t v96;
  unsigned __int8 **v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned int v101;
  uint64_t v103;
  const char *v104;
  _QWORD *result;
  uint64_t v106;
  unint64_t v108;
  uint64_t v109;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t *v119;
  uint64_t v120;
  char *v121;
  llvm::object::MetalLibObjectFile *v122;
  unsigned __int8 *v123;
  const char *v124;
  char v125;
  __int16 v126;
  uint64_t v127;

  v3 = this;
  v127 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(*((_QWORD *)this + 35) + 8 * a2);
  if (!v6)
  {
    result = (_QWORD *)llvm::object::MetalLibObjectFile::materializeFunctionNo(this, a2, a3);
    if (*a3)
      return result;
    v6 = *(_QWORD *)(*((_QWORD *)v3 + 35) + 8 * v5);
  }
  v7 = *((_QWORD *)v3 + 2);
  v8 = *((_QWORD *)v3 + 3);
  v9 = *((_QWORD *)v3 + 13);
  if (v8 < v9)
    v9 = *((_QWORD *)v3 + 3);
  v123 = (unsigned __int8 *)(v7 + v9 + *(_QWORD *)(v6 + 48));
  v10 = v123;
  v11 = (const unsigned __int8 *)(v7 + v8);
  v12 = (_OWORD *)operator new();
  v13 = v12;
  v12[2] = 0u;
  v119 = (unint64_t *)(v12 + 2);
  v12[5] = 0u;
  v118 = v12 + 5;
  v14 = v10 + 4;
  *v12 = 0u;
  v12[1] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[6] = 0u;
  v12[7] = 0u;
  if ((unint64_t)(v10 + 4) > v7 + v8)
  {
    v106 = operator new();
    v124 = "missing public metadata data size";
    v126 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v108 = qword_1EF8F7238[0];
    *(_QWORD *)v106 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v124, (_QWORD *)(v106 + 8));
    *(_QWORD *)(v106 + 32) = 3;
    *(_QWORD *)(v106 + 40) = v108;
    *(_BYTE *)(v106 + 48) = 1;
    *a3 = v106;
    goto LABEL_162;
  }
  v114 = v5;
  v117 = a3;
  v16 = *(_DWORD *)v10;
  v15 = v10 + 8;
  v123 = v14;
  *(_DWORD *)v12 = v16;
  if (v15 > v11)
  {
LABEL_138:
    v103 = operator new();
    v104 = "missing public metadata token";
    goto LABEL_159;
  }
  v17 = (unsigned __int8 *)(v8 + v7);
  v122 = v3;
  while (1)
  {
    v123 = v15;
    if (*(_DWORD *)v14 == 1414807894)
    {
      v21 = (unsigned __int16 *)(v14 + 6);
      if (v14 + 6 > v11)
        goto LABEL_154;
      v123 = v14 + 6;
      v22 = v14 + 8;
      if (v22 > v11)
        goto LABEL_158;
      v23 = *v21;
      v123 = v22;
      v24 = (char *)*((_QWORD *)v13 + 1);
      v25 = (char *)*((_QWORD *)v13 + 2);
      v26 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
      v27 = v23 - v26;
      if (v23 <= v26)
      {
        if (v23 < v26)
        {
          v25 = &v24[24 * v23];
          *((_QWORD *)v13 + 2) = v25;
        }
      }
      else
      {
        v28 = *((_QWORD *)v13 + 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v25) >> 3) >= v27)
        {
          v57 = 3 * v27;
          v35 = &v25[24 * v27];
          bzero(*((void **)v13 + 2), 24 * ((8 * v57 - 24) / 0x18uLL) + 24);
          *((_QWORD *)v13 + 2) = v35;
        }
        else
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v24) >> 3);
          v30 = 2 * v29;
          if (2 * v29 <= v23)
            v30 = v23;
          if (v29 >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v30;
          if (v31 > 0xAAAAAAAAAAAAAAALL)
LABEL_169:
            sub_1C4764EE4();
          v120 = 3 * v31;
          v32 = (char *)operator new(24 * v31);
          v33 = &v32[8 * ((v25 - v24) >> 3)];
          bzero(v33, 24 * ((24 * v27 - 24) / 0x18) + 24);
          if (v25 != v24)
          {
            do
            {
              v34 = *(_OWORD *)(v25 - 24);
              *(_DWORD *)(v33 - 9) = *(_DWORD *)(v25 - 9);
              *(_OWORD *)(v33 - 24) = v34;
              v33 -= 24;
              v25 -= 24;
            }
            while (v25 != v24);
            v25 = (char *)*((_QWORD *)v13 + 1);
          }
          v35 = &v32[24 * v23];
          *((_QWORD *)v13 + 1) = v33;
          *((_QWORD *)v13 + 2) = v35;
          *((_QWORD *)v13 + 3) = &v32[8 * v120];
          v3 = v122;
          if (v25)
          {
            operator delete(v25);
            v35 = (char *)*((_QWORD *)v13 + 2);
          }
        }
        v24 = (char *)*((_QWORD *)v13 + 1);
        v25 = v35;
      }
      if (v24 != v25)
      {
        v58 = v123;
        while (1)
        {
          v59 = v58;
          if (v58 < v11)
          {
            v60 = v17 - v58;
            v59 = v58;
            do
            {
              if (!*v59)
                goto LABEL_67;
              ++v59;
              --v60;
            }
            while (v60);
            v59 = v17;
          }
          if (*v59)
            break;
LABEL_67:
          v123 = v59;
          *(_QWORD *)v24 = v58;
          *((_QWORD *)v24 + 1) = v59 - v58;
          v61 = v123;
          v62 = ++v123;
          v58 = v61 + 3;
          if (v58 > v11)
          {
            v103 = operator new();
            v104 = "missing vertex attribute info";
            goto LABEL_159;
          }
          v63 = *(unsigned __int16 *)v62;
          v123 = v58;
          v64 = (2 * v63) & 0xFF01FFFF | (((v24[18] >> 1) & 0x7F) << 17);
          *((_WORD *)v24 + 8) = (2 * v63) & 0xC000 | v63 & 0x1FFF;
          v24[18] = BYTE2(v64);
          v24 += 24;
          if (v24 == v25)
            goto LABEL_137;
        }
        v103 = operator new();
        v104 = "missing vertex attribute name";
        goto LABEL_159;
      }
      goto LABEL_137;
    }
    if (*(_DWORD *)v14 == 1498693974)
      break;
    switch(*(_DWORD *)v14)
    {
      case 0x54534E43:
        v41 = (unsigned __int16 *)(v14 + 6);
        if (v14 + 6 > v11)
          goto LABEL_154;
        v42 = (_BYTE *)*((_QWORD *)v13 + 7);
        v43 = (char *)*((_QWORD *)v13 + 8);
        v123 = v14 + 6;
        v44 = v14 + 8;
        if (v44 > v11)
        {
          v103 = operator new();
          v104 = "missing function constant count";
          goto LABEL_159;
        }
        v45 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
        v46 = *v41;
        v123 = v44;
        v47 = v46 + (unsigned __int16)v45;
        v48 = v47 - v45;
        if (v47 <= v45)
        {
          v3 = v122;
          if (v47 < v45)
            *((_QWORD *)v13 + 8) = &v42[24 * v47];
        }
        else
        {
          v49 = *((_QWORD *)v13 + 9);
          if (0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v43) >> 3) >= v48)
          {
            bzero(v43, 24 * ((24 * v48 - 24) / 0x18) + 24);
            *((_QWORD *)v13 + 8) = &v43[24 * v48];
            v3 = v122;
          }
          else
          {
            v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v42) >> 3);
            v51 = 2 * v50;
            if (2 * v50 <= v47)
              v51 = v46 + (unsigned __int16)v45;
            if (v50 >= 0x555555555555555)
              v52 = 0xAAAAAAAAAAAAAAALL;
            else
              v52 = v51;
            if (v52 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_169;
            v116 = 3 * v52;
            v115 = (char *)operator new(24 * v52);
            v53 = &v115[8 * ((v43 - v42) >> 3)];
            bzero(v53, 24 * ((24 * v48 - 24) / 0x18) + 24);
            if (v43 == v42)
            {
              v54 = v46 + (unsigned __int16)v45;
              v3 = v122;
            }
            else
            {
              v54 = v46 + (unsigned __int16)v45;
              v3 = v122;
              do
              {
                v55 = *(_OWORD *)(v43 - 24);
                *(_QWORD *)(v53 - 11) = *(_QWORD *)(v43 - 11);
                *(_OWORD *)(v53 - 24) = v55;
                v53 -= 24;
                v43 -= 24;
              }
              while (v43 != v42);
              v43 = (char *)*((_QWORD *)v13 + 7);
            }
            *((_QWORD *)v13 + 7) = v53;
            *((_QWORD *)v13 + 8) = &v115[24 * v54];
            *((_QWORD *)v13 + 9) = &v115[8 * v116];
            if (v43)
              operator delete(v43);
          }
        }
        if ((_DWORD)v46 != (unsigned __int16)v45)
        {
          v82 = v123;
          while (1)
          {
            v83 = v82;
            if (v82 < v11)
            {
              v84 = v17 - v82;
              v83 = v82;
              do
              {
                if (!*v83)
                  goto LABEL_113;
                ++v83;
                --v84;
              }
              while (v84);
              v83 = v17;
            }
            if (*v83)
              break;
LABEL_113:
            v123 = v83;
            v85 = (unsigned __int8 **)(*((_QWORD *)v13 + 7) + 24 * (unsigned __int16)v45);
            *v85 = v82;
            v85[1] = (unsigned __int8 *)(v83 - v82);
            v86 = v123++;
            if (v86 + 2 > v11)
            {
              v103 = operator new();
              v104 = "missing function constant type";
              goto LABEL_159;
            }
            v87 = v86[1];
            v123 = v86 + 2;
            v88 = *((_QWORD *)v13 + 7);
            *(_BYTE *)(v88 + 24 * (unsigned __int16)v45 + 16) = v87;
            v89 = (char *)(v86 + 4);
            if (v86 + 4 > v11)
            {
              v103 = operator new();
              v104 = "missing function constant index";
              goto LABEL_159;
            }
            v90 = *((_WORD *)v86 + 1);
            v123 = v86 + 4;
            *(_WORD *)(v88 + 24 * (unsigned __int16)v45 + 18) = v90;
            v82 = v86 + 5;
            if (v82 > v11)
            {
              v103 = operator new();
              v104 = "missing function constant required";
              goto LABEL_159;
            }
            v91 = *v89;
            v123 = v82;
            *(_BYTE *)(v88 + 24 * (unsigned __int16)v45 + 20) = v91;
            LOWORD(v45) = v45 + 1;
            if ((_DWORD)v46 == (unsigned __int16)v45)
              goto LABEL_137;
          }
          v103 = operator new();
          v104 = "missing function constant name";
          goto LABEL_159;
        }
        break;
      case 0x52544552:
        v65 = v14 + 6;
        if (v14 + 6 > v11)
          goto LABEL_154;
        v66 = *(unsigned __int16 *)v15;
        v123 = v14 + 6;
        *v118 = 0;
        v118[1] = 0;
        v67 = v14 + 7;
        *((_BYTE *)v13 + 96) = 1;
        if (v67 > v11)
        {
          v103 = operator new();
          v104 = "missing return type";
          goto LABEL_159;
        }
        v68 = *v65;
        v123 = v67;
        *(_BYTE *)v118 = v68;
        if (v68 > 57)
        {
          if (v68 != 58 && v68 != 60)
            break;
        }
        else
        {
          if (!v68)
          {
            if (&v67[v66 - 1] > v11)
            {
              v103 = operator new();
              v104 = "missing return type data";
              goto LABEL_159;
            }
            v20 = &v67[v66 - 1];
LABEL_15:
            v123 = v20;
            break;
          }
          if (v68 != 1)
            break;
        }
        llvm::object::MetalLibObjectFile::materializeAdditionalData(v3, (const unsigned __int8 **)&v123, v11, v68, (uint64_t)&v124);
        if ((v125 & 1) != 0)
        {
LABEL_156:
          *v117 = v124;
          goto LABEL_162;
        }
        *((_QWORD *)v13 + 11) = v124;
        break;
      case 0x52475241:
        v69 = v14 + 6;
        if (v14 + 6 > v11)
          goto LABEL_154;
        v123 = v14 + 6;
        v70 = v14 + 7;
        if (v70 > v11)
        {
          v103 = operator new();
          v104 = "missing argument count";
          goto LABEL_159;
        }
        v71 = *v69;
        v123 = v70;
        v72 = (_BYTE *)*((_QWORD *)v13 + 13);
        v73 = (char *)*((_QWORD *)v13 + 14);
        v74 = (v73 - v72) >> 5;
        if (v71 <= v74)
        {
          if (v71 < v74)
            *((_QWORD *)v13 + 14) = &v72[32 * v71];
        }
        else
        {
          v75 = v71 - v74;
          v76 = *((_QWORD *)v13 + 15);
          if (v71 - v74 <= (v76 - (uint64_t)v73) >> 5)
          {
            bzero(*((void **)v13 + 14), 32 * v75);
            *((_QWORD *)v13 + 14) = &v73[32 * v75];
            v3 = v122;
          }
          else
          {
            v77 = v76 - (_QWORD)v72;
            v78 = v77 >> 4;
            if (v77 >> 4 <= v71)
              v78 = v71;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0)
              v79 = 0x7FFFFFFFFFFFFFFLL;
            else
              v79 = v78;
            if (v79 >> 59)
              goto LABEL_169;
            v121 = (char *)operator new(32 * v79);
            v80 = &v121[32 * v74];
            bzero(v80, 32 * v75);
            if (v73 == v72)
            {
              v3 = v122;
            }
            else
            {
              v3 = v122;
              do
              {
                v81 = *((_OWORD *)v73 - 1);
                *((_OWORD *)v80 - 2) = *((_OWORD *)v73 - 2);
                *((_OWORD *)v80 - 1) = v81;
                v80 -= 32;
                v73 -= 32;
              }
              while (v73 != v72);
              v73 = (char *)*((_QWORD *)v13 + 13);
            }
            *((_QWORD *)v13 + 13) = v80;
            *((_QWORD *)v13 + 14) = &v121[32 * v71];
            *((_QWORD *)v13 + 15) = &v121[32 * v79];
            if (v73)
              operator delete(v73);
          }
        }
        if ((_DWORD)v71)
        {
          v92 = 0;
          while (1)
          {
            v93 = v123;
            v94 = v123;
            if (v123 < v11)
            {
              v95 = v17 - v123;
              v94 = v123;
              do
              {
                if (!*v94)
                  goto LABEL_129;
                ++v94;
                --v95;
              }
              while (v95);
              v94 = v17;
            }
            if (*v94)
              break;
LABEL_129:
            v96 = v94 - v123;
            v123 = v94;
            v97 = (unsigned __int8 **)(*((_QWORD *)v13 + 13) + 32 * v92);
            *v97 = v93;
            v97[1] = (unsigned __int8 *)v96;
            v98 = v123;
            v99 = ++v123;
            v100 = v98 + 2;
            if (v100 > v11)
            {
              v103 = operator new();
              v104 = "missing argument type";
              goto LABEL_159;
            }
            v101 = *v99;
            v123 = v100;
            *(_BYTE *)(*((_QWORD *)v13 + 13) + 32 * v92 + 16) = v101;
            if (v101 <= 0x3C && ((1 << v101) & 0x1400000000000002) != 0)
            {
              llvm::object::MetalLibObjectFile::materializeAdditionalData(v3, (const unsigned __int8 **)&v123, v11, v101, (uint64_t)&v124);
              if ((v125 & 1) != 0)
                goto LABEL_156;
              *(_QWORD *)(*((_QWORD *)v13 + 13) + 32 * v92 + 24) = v124;
            }
            if (++v92 == v71)
              goto LABEL_137;
          }
          v103 = operator new();
          v104 = "missing argument name";
          goto LABEL_159;
        }
        break;
      case 0x54444E45:
        v109 = *((_QWORD *)v3 + 38);
        result = *(_QWORD **)(v109 + 8 * v114);
        *(_QWORD *)(v109 + 8 * v114) = v13;
        if (result)
        {
          v113 = sub_1C62DA720(result);
          result = (_QWORD *)MEMORY[0x1CAA32FC0](v113, 0x1070C40BAAD8800);
        }
        *v117 = 0;
        return result;
      default:
        v18 = v14 + 6;
        if (v18 > v11)
          goto LABEL_154;
        v19 = *(unsigned __int16 *)v15;
        v123 = v18;
        v20 = &v18[v19];
        if (v20 > v11)
        {
          v103 = operator new();
          v104 = "missing token data";
          goto LABEL_159;
        }
        goto LABEL_15;
    }
LABEL_137:
    v14 = v123;
    v15 = v123 + 4;
    if (v123 + 4 > v11)
      goto LABEL_138;
  }
  v36 = (unsigned __int16 *)(v14 + 6);
  if (v14 + 6 > v11)
  {
LABEL_154:
    v103 = operator new();
    v104 = "missing token data size";
    goto LABEL_159;
  }
  v123 = v14 + 6;
  v37 = v14 + 8;
  if (v37 > v11)
  {
LABEL_158:
    v103 = operator new();
    v104 = "missing vertex attribute count";
    goto LABEL_159;
  }
  v38 = *v36;
  v123 = v37;
  v39 = (_BYTE *)*((_QWORD *)v13 + 4);
  v40 = (_BYTE *)*((_QWORD *)v13 + 5);
  if (v38 <= v40 - v39)
  {
    if (v38 < v40 - v39)
    {
      v40 = &v39[v38];
      *((_QWORD *)v13 + 5) = &v39[v38];
    }
  }
  else
  {
    sub_1C50429D8(v119, v38 - (v40 - v39));
    v39 = (_BYTE *)*((_QWORD *)v13 + 4);
    v40 = (_BYTE *)*((_QWORD *)v13 + 5);
  }
  while (1)
  {
    if (v39 == v40)
      goto LABEL_137;
    if (v123 + 1 > v11)
      break;
    v56 = *v123++;
    *v39++ = v56;
  }
  v103 = operator new();
  v104 = "missing vertex attribute type";
LABEL_159:
  v124 = v104;
  v126 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v111 = qword_1EF8F7238[0];
  *(_QWORD *)v103 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v124, (_QWORD *)(v103 + 8));
  *(_QWORD *)(v103 + 32) = 3;
  *(_QWORD *)(v103 + 40) = v111;
  *(_BYTE *)(v103 + 48) = 1;
  *v117 = v103;
LABEL_162:
  v112 = sub_1C62DA720(v13);
  return (_QWORD *)MEMORY[0x1CAA32FC0](v112, 0x1070C40BAAD8800);
}

uint64_t llvm::object::MetalLibObjectFile::privateMetadata@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _WORD *v17;
  int v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _WORD *v52;
  int v53;
  unint64_t *v54;
  char *v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  const char *v75;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  const char *v92;
  __int16 v93;

  v2 = this;
  if (*(_BYTE *)(this + 794))
    goto LABEL_2;
  v4 = *(_QWORD *)(this + 288) - *(_QWORD *)(this + 280);
  if ((v4 & 0x7FFFFFFF8) == 0)
    goto LABEL_64;
  v5 = 0;
  v6 = (v4 >> 3);
  v88 = a2;
  v84 = this;
  do
  {
    if (*(_QWORD *)(*(_QWORD *)(v2 + 328) + 8 * v5))
      goto LABEL_6;
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 8 * v5);
    if (!v7)
    {
      this = llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)v2, v5, &v91);
      v8 = v91;
      if (v91)
        goto LABEL_136;
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 8 * v5);
    }
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(_QWORD *)(v2 + 120);
    if (v10 < v11)
      v11 = *(_QWORD *)(v2 + 24);
    v12 = (_DWORD *)(v9 + v11 + *(_QWORD *)(v7 + 56));
    v13 = v9 + v10;
    v14 = operator new();
    v15 = v14;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_DWORD *)(v14 + 4) = -1;
    v16 = v12 + 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    if ((unint64_t)(v12 + 1) > v9 + v10)
      goto LABEL_132;
    v78 = v5;
    v80 = v6;
    v82 = v5;
    v18 = *v12;
    v17 = v12 + 2;
    *(_DWORD *)v14 = v18;
    if ((unint64_t)v17 > v13)
      goto LABEL_127;
    v19 = 0;
    v89 = (_BYTE *)(v10 + v9);
    v86 = v10 + v9 - 10;
    while (1)
    {
      if (*v16 == 1229079876)
      {
        if ((unint64_t)v16 + 6 > v13)
          goto LABEL_128;
        v22 = (char *)v16 + 10;
        if ((unint64_t)v16 + 10 > v13)
        {
LABEL_130:
          v8 = operator new();
          v75 = "missing debug line number";
          goto LABEL_133;
        }
        *(_DWORD *)(v15 + 4) = *(_DWORD *)((char *)v16 + 6);
        v23 = (char *)v16 + 10;
        if ((unint64_t)v16 + 10 >= v13)
        {
LABEL_29:
          if (*v23)
          {
LABEL_131:
            v8 = operator new();
            v75 = "missing debug full path name";
            goto LABEL_133;
          }
        }
        else
        {
          v24 = v86 - (_QWORD)v16;
          v23 = v22;
          while (*v23)
          {
            ++v23;
            if (!--v24)
            {
              v23 = v89;
              goto LABEL_29;
            }
          }
        }
        *(_QWORD *)(v15 + 8) = v22;
        *(_QWORD *)(v15 + 16) = v23 - v22;
        v21 = (unint64_t)(v23 + 1);
        goto LABEL_31;
      }
      if (*v16 == 1179665732)
      {
        v21 = (unint64_t)v16 + 6;
        if ((unint64_t)v16 + 6 > v13)
        {
LABEL_128:
          v8 = operator new();
          v75 = "missing token data size";
          goto LABEL_133;
        }
        if (*v17)
        {
          v25 = (unint64_t)v16 + (unsigned __int16)*v17 + 6;
          v26 = v19;
          do
          {
            v27 = (_BYTE *)v21;
            if (v21 >= v13)
            {
LABEL_41:
              if (*v27)
                goto LABEL_125;
            }
            else
            {
              v28 = &v89[-v21];
              v27 = (_BYTE *)v21;
              while (*v27)
              {
                ++v27;
                if (!--v28)
                {
                  v27 = v89;
                  goto LABEL_41;
                }
              }
            }
            v29 = &v27[-v21];
            v30 = *(_QWORD *)(v15 + 40);
            if ((unint64_t)v26 >= v30)
            {
              v31 = *(char **)(v15 + 24);
              v32 = ((char *)v26 - v31) >> 4;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 60)
LABEL_137:
                abort();
              v34 = v30 - (_QWORD)v31;
              if (v34 >> 3 > v33)
                v33 = v34 >> 3;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
                v35 = 0xFFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                if (v35 >> 60)
LABEL_138:
                  sub_1C4764EE4();
                v36 = (char *)operator new(16 * v35);
              }
              else
              {
                v36 = 0;
              }
              v37 = (unint64_t *)&v36[16 * v32];
              *v37 = v21;
              v37[1] = (unint64_t)v29;
              v38 = v37;
              if (v26 != (unint64_t *)v31)
              {
                do
                {
                  *((_OWORD *)v38 - 1) = *((_OWORD *)v26 - 1);
                  v38 -= 2;
                  v26 -= 2;
                }
                while (v26 != (unint64_t *)v31);
                v26 = *(unint64_t **)(v15 + 24);
              }
              v19 = v37 + 2;
              *(_QWORD *)(v15 + 24) = v38;
              *(_QWORD *)(v15 + 32) = v37 + 2;
              *(_QWORD *)(v15 + 40) = &v36[16 * v35];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *v26 = v21;
              v26[1] = (unint64_t)v29;
              v19 = v26 + 2;
            }
            v21 = (unint64_t)(v27 + 1);
            *(_QWORD *)(v15 + 32) = v19;
            v26 = v19;
          }
          while ((unint64_t)(v27 + 1) < v25);
        }
        goto LABEL_31;
      }
      if (*v16 == 1413762629)
        break;
      v20 = (char *)v16 + 6;
      if ((unint64_t)v20 > v13)
        goto LABEL_128;
      v21 = (unint64_t)&v20[(unsigned __int16)*v17];
      if (v21 > v13)
      {
LABEL_129:
        v8 = operator new();
        v75 = "missing token data";
        goto LABEL_133;
      }
LABEL_31:
      v17 = (_WORD *)(v21 + 4);
      v16 = (_DWORD *)v21;
      if (v21 + 4 > v13)
        goto LABEL_127;
    }
    v39 = *(_QWORD *)(v84 + 328);
    this = *(_QWORD *)(v39 + 8 * v78);
    *(_QWORD *)(v39 + 8 * v78) = v15;
    if (this)
      this = sub_1C5A02548(this);
    a2 = v88;
    v5 = v82;
    v2 = v84;
    v6 = v80;
LABEL_6:
    ++v5;
  }
  while (v5 != v6);
LABEL_64:
  v40 = *(_QWORD *)(v2 + 608) - *(_QWORD *)(v2 + 600);
  if ((v40 & 0x7FFFFFFF8) == 0)
  {
LABEL_126:
    *(_BYTE *)(v2 + 794) = 1;
LABEL_2:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 328);
    return this;
  }
  v41 = 0;
  v42 = (v40 >> 3);
  v88 = a2;
  v85 = v2;
  v81 = v42;
  while (1)
  {
    v43 = v41 + ((*(_QWORD *)(v2 + 288) - *(_QWORD *)(v2 + 280)) >> 3);
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 328) + 8 * v43))
      break;
LABEL_67:
    if (++v41 == v42)
      goto LABEL_126;
  }
  v44 = *(_QWORD *)(*(_QWORD *)(v2 + 600) + 8 * v41);
  if (!v44)
  {
    this = llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)v2, v41, &v91);
    v8 = v91;
    if (v91)
      goto LABEL_136;
    v44 = *(_QWORD *)(*(_QWORD *)(v2 + 600) + 8 * v41);
  }
  v83 = v43;
  v45 = *(_QWORD *)(v2 + 16);
  v46 = *(_QWORD *)(v2 + 24);
  v47 = *(_QWORD *)(v2 + 120);
  if (v46 < v47)
    v47 = *(_QWORD *)(v2 + 24);
  v48 = (_DWORD *)(v45 + v47 + *(_QWORD *)(v44 + 48));
  v49 = v45 + v46;
  v50 = operator new();
  v15 = v50;
  *(_OWORD *)v50 = 0u;
  *(_OWORD *)(v50 + 16) = 0u;
  *(_OWORD *)(v50 + 32) = 0u;
  *(_DWORD *)(v50 + 4) = -1;
  v51 = v48 + 1;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  if ((unint64_t)(v48 + 1) > v45 + v46)
  {
LABEL_132:
    v8 = operator new();
    v75 = "missing private metadata data size";
    goto LABEL_133;
  }
  v79 = v41;
  v53 = *v48;
  v52 = v48 + 2;
  *(_DWORD *)v50 = v53;
  if ((unint64_t)v52 > v49)
  {
LABEL_127:
    v8 = operator new();
    v75 = "missing private metadata token";
    goto LABEL_133;
  }
  v54 = 0;
  v90 = (_BYTE *)(v46 + v45);
  v87 = v46 + v45 - 10;
  while (2)
  {
    if (*v51 == 1229079876)
    {
      if ((unint64_t)v51 + 6 > v49)
        goto LABEL_128;
      v57 = (char *)v51 + 10;
      if ((unint64_t)v51 + 10 > v49)
        goto LABEL_130;
      *(_DWORD *)(v15 + 4) = *(_DWORD *)((char *)v51 + 6);
      v58 = (char *)v51 + 10;
      if ((unint64_t)v51 + 10 >= v49)
      {
LABEL_90:
        if (*v58)
          goto LABEL_131;
      }
      else
      {
        v59 = v87 - (_QWORD)v51;
        v58 = v57;
        while (*v58)
        {
          ++v58;
          if (!--v59)
          {
            v58 = v90;
            goto LABEL_90;
          }
        }
      }
      *(_QWORD *)(v15 + 8) = v57;
      *(_QWORD *)(v15 + 16) = v58 - v57;
      v56 = (unint64_t)(v58 + 1);
      goto LABEL_92;
    }
    if (*v51 != 1179665732)
    {
      if (*v51 == 1413762629)
      {
        v74 = *(_QWORD *)(v85 + 328);
        this = *(_QWORD *)(v74 + 8 * v83);
        *(_QWORD *)(v74 + 8 * v83) = v15;
        if (this)
          this = sub_1C5A02548(this);
        a2 = v88;
        v2 = v85;
        v41 = v79;
        v42 = v81;
        goto LABEL_67;
      }
      v55 = (char *)v51 + 6;
      if ((unint64_t)v55 > v49)
        goto LABEL_128;
      v56 = (unint64_t)&v55[(unsigned __int16)*v52];
      if (v56 > v49)
        goto LABEL_129;
      goto LABEL_92;
    }
    v56 = (unint64_t)v51 + 6;
    if ((unint64_t)v51 + 6 > v49)
      goto LABEL_128;
    if (!*v52)
    {
LABEL_92:
      v52 = (_WORD *)(v56 + 4);
      v51 = (_DWORD *)v56;
      if (v56 + 4 > v49)
        goto LABEL_127;
      continue;
    }
    break;
  }
  v60 = (unint64_t)v51 + (unsigned __int16)*v52 + 6;
  v61 = v54;
  while (1)
  {
    v62 = (_BYTE *)v56;
    if (v56 < v49)
    {
      v63 = &v90[-v56];
      v62 = (_BYTE *)v56;
      do
      {
        if (!*v62)
          goto LABEL_103;
        ++v62;
        --v63;
      }
      while (v63);
      v62 = v90;
    }
    if (*v62)
      break;
LABEL_103:
    v64 = &v62[-v56];
    v65 = *(_QWORD *)(v15 + 40);
    if ((unint64_t)v61 >= v65)
    {
      v66 = *(char **)(v15 + 24);
      v67 = ((char *)v61 - v66) >> 4;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 60)
        goto LABEL_137;
      v69 = v65 - (_QWORD)v66;
      if (v69 >> 3 > v68)
        v68 = v69 >> 3;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
        v70 = 0xFFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 60)
          goto LABEL_138;
        v71 = (char *)operator new(16 * v70);
      }
      else
      {
        v71 = 0;
      }
      v72 = (unint64_t *)&v71[16 * v67];
      *v72 = v56;
      v72[1] = (unint64_t)v64;
      v73 = v72;
      if (v61 != (unint64_t *)v66)
      {
        do
        {
          *((_OWORD *)v73 - 1) = *((_OWORD *)v61 - 1);
          v73 -= 2;
          v61 -= 2;
        }
        while (v61 != (unint64_t *)v66);
        v61 = *(unint64_t **)(v15 + 24);
      }
      v54 = v72 + 2;
      *(_QWORD *)(v15 + 24) = v73;
      *(_QWORD *)(v15 + 32) = v72 + 2;
      *(_QWORD *)(v15 + 40) = &v71[16 * v70];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *v61 = v56;
      v61[1] = (unint64_t)v64;
      v54 = v61 + 2;
    }
    v56 = (unint64_t)(v62 + 1);
    *(_QWORD *)(v15 + 32) = v54;
    v61 = v54;
    if ((unint64_t)(v62 + 1) >= v60)
      goto LABEL_92;
  }
LABEL_125:
  v8 = operator new();
  v75 = "invalid dependency name";
LABEL_133:
  v92 = v75;
  v93 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v77 = qword_1EF8F7238[0];
  *(_QWORD *)v8 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v92, (_QWORD *)(v8 + 8));
  *(_QWORD *)(v8 + 32) = 3;
  *(_QWORD *)(v8 + 40) = v77;
  *(_BYTE *)(v8 + 48) = 1;
  this = sub_1C5A02548(v15);
  a2 = v88;
LABEL_136:
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v8;
  return this;
}

void llvm::object::MetalLibObjectFile::modules(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*((_BYTE *)this + 795))
  {
    v4 = *((_QWORD *)this + 45) - *((_QWORD *)this + 44);
    if ((v4 & 0x3FFFFFFFCLL) != 0)
    {
      v5 = 0;
      v6 = (v4 >> 2);
      do
      {
        if (*(_DWORD *)(*((_QWORD *)this + 44) + 4 * v5) == -1)
        {
          sub_1C5A01C50(&v11, (uint64_t **)this, v5, (uint64_t *)this + 35, (uint64_t *)this + 75, (_DWORD **)this + 44, (_DWORD **)this + 47, (_QWORD *)this + 53, (_QWORD *)this + 56);
          v7 = v11;
          if (v11)
            goto LABEL_15;
        }
      }
      while (v6 != ++v5);
    }
    v8 = *((_QWORD *)this + 48) - *((_QWORD *)this + 47);
    if ((v8 & 0x3FFFFFFFCLL) != 0)
    {
      v9 = 0;
      v10 = (v8 >> 2);
      while (1)
      {
        if (*(_DWORD *)(*((_QWORD *)this + 47) + 4 * v9) == -1)
        {
          sub_1C5A020A8(&v11, (uint64_t **)this, v9, (uint64_t *)this + 75, (uint64_t *)this + 35, (_DWORD **)this + 47, (_DWORD **)this + 44, (_QWORD *)this + 56, (_QWORD *)this + 53);
          v7 = v11;
          if (v11)
            break;
        }
        if (v10 == ++v9)
          goto LABEL_12;
      }
LABEL_15:
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v7;
      return;
    }
LABEL_12:
    *((_BYTE *)this + 795) = 1;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_OWORD *)a2 = *((_OWORD *)this + 25);
}

void llvm::object::MetalLibObjectFile::linkerCommandLine(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  if (*((_QWORD *)this + 61) || (llvm::object::MetalLibObjectFile::materializeSourcesHeader(this, &v5), (v4 = v5) == 0))
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *((_OWORD *)this + 30);
  }
  else
  {
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
  }
}

void llvm::object::MetalLibObjectFile::materializeSourcesHeader(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[4];
  __int16 v41;

  v4 = *((unsigned __int16 *)this + 34);
  v39[0] = (*((unsigned __int16 *)this + 32) >> 1) | ((unint64_t)*((unsigned __int16 *)this + 33) << 32) | 0x8000000000000000;
  v39[1] = v4 | 0x80000000;
  v40[0] = 0x8000000200000001;
  v40[1] = 2147483651;
  if ((sub_1C4F7A4D8(v39, v40) & 1) != 0)
    goto LABEL_51;
  v5 = *((_QWORD *)this + 19);
  if (!v5)
    goto LABEL_51;
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  if (v7 >= v5)
    v8 = *((_QWORD *)this + 19);
  else
    v8 = *((_QWORD *)this + 3);
  v9 = v6 + v7;
  v10 = v6 + v8 + 4;
  if (v10 > v6 + v7)
  {
    v11 = operator new();
    v12 = "missing sources count";
LABEL_23:
    v40[0] = v12;
    v41 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v40, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v20;
    *(_BYTE *)(v11 + 48) = 1;
    goto LABEL_52;
  }
  v13 = *(unsigned int *)(v6 + v8);
  v14 = v6 + v8 + 4;
  if (v10 >= v6 + v7)
  {
LABEL_13:
    if (*(_BYTE *)v14)
    {
      v11 = operator new();
      v12 = "missing linker command line";
      goto LABEL_23;
    }
  }
  else
  {
    v15 = v7 - v8 - 4;
    v14 = v10;
    while (*(_BYTE *)v14)
    {
      ++v14;
      if (!--v15)
      {
        v14 = v6 + v7;
        goto LABEL_13;
      }
    }
  }
  *((_QWORD *)this + 60) = v10;
  *((_QWORD *)this + 61) = v14 - v10;
  if (*((_BYTE *)this + 472))
  {
    v16 = v14 + 1;
    v17 = (_BYTE *)(v14 + 1);
    if (v14 + 1 >= v9)
    {
LABEL_21:
      if (*v17)
      {
        v11 = operator new();
        v12 = "missing linker working directory";
        goto LABEL_23;
      }
    }
    else
    {
      v18 = ~v14 + v7 + v6;
      v17 = (_BYTE *)(v14 + 1);
      while (*v17)
      {
        ++v17;
        if (!--v18)
        {
          v17 = (_BYTE *)v9;
          goto LABEL_21;
        }
      }
    }
    *((_QWORD *)this + 62) = v16;
    *((_QWORD *)this + 63) = &v17[-v16];
  }
  v21 = (char *)*((_QWORD *)this + 65);
  v22 = (char *)*((_QWORD *)this + 64);
  v23 = (v21 - v22) >> 3;
  if (v13 > v23)
  {
    v24 = v13 - v23;
    v25 = *((_QWORD *)this + 66);
    if (v13 - v23 <= (v25 - (uint64_t)v21) >> 3)
    {
      bzero(*((void **)this + 65), 8 * v24);
      v11 = 0;
      *((_QWORD *)this + 65) = &v21[8 * v24];
      goto LABEL_52;
    }
    v26 = v25 - (_QWORD)v22;
    if (v26 >> 2 > v13)
      v13 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v13;
    if (v27 >> 61)
      sub_1C4764EE4();
    v28 = (char *)operator new(8 * v27);
    v29 = &v28[8 * v23];
    v30 = &v28[8 * v27];
    bzero(v29, 8 * v24);
    v31 = &v28[8 * v24 + v21 - v22];
    if (v21 == v22)
    {
      *((_QWORD *)this + 64) = v29;
      *((_QWORD *)this + 65) = v31;
      *((_QWORD *)this + 66) = v30;
    }
    else
    {
      do
      {
        v32 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v29 - 1) = v32;
        v29 -= 8;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 64);
      v33 = (char *)*((_QWORD *)this + 65);
      *((_QWORD *)this + 64) = v29;
      *((_QWORD *)this + 65) = v31;
      *((_QWORD *)this + 66) = v30;
      while (v33 != v21)
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        v34 = v35;
        *(_QWORD *)v33 = 0;
        if (v35)
          MEMORY[0x1CAA32FC0](v34, 0x1050C40A8B26598);
      }
    }
    if (v21)
      operator delete(v21);
LABEL_51:
    v11 = 0;
    goto LABEL_52;
  }
  if (v13 >= v23)
    goto LABEL_51;
  v36 = &v22[8 * v13];
  while (v21 != v36)
  {
    v38 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    v37 = v38;
    *(_QWORD *)v21 = 0;
    if (v38)
      MEMORY[0x1CAA32FC0](v37, 0x1050C40A8B26598);
  }
  v11 = 0;
  *((_QWORD *)this + 65) = v36;
LABEL_52:
  *a2 = v11;
}

void llvm::object::MetalLibObjectFile::linkerWorkingDir(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  if (*((_QWORD *)this + 63) || (llvm::object::MetalLibObjectFile::materializeSourcesHeader(this, &v5), (v4 = v5) == 0))
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *((_OWORD *)this + 31);
  }
  else
  {
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
  }
}

__n128 llvm::object::MetalLibObjectFile::sources@<Q0>(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*((_BYTE *)this + 796))
  {
    if (!*((_QWORD *)this + 61) || !*((_QWORD *)this + 63))
    {
      llvm::object::MetalLibObjectFile::materializeSourcesHeader(this, &v9);
      v5 = v9;
      if (v9)
      {
LABEL_5:
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v5;
        return result;
      }
    }
    v6 = *((_QWORD *)this + 65) - *((_QWORD *)this + 64);
    if ((v6 & 0x7FFFFFFF8) != 0)
    {
      v7 = 0;
      v8 = (v6 >> 3);
      do
      {
        if (!*(_QWORD *)(*((_QWORD *)this + 64) + 8 * v7))
        {
          llvm::object::MetalLibObjectFile::materializeSourceNo(this, v7, &v9);
          v5 = v9;
          if (v9)
            goto LABEL_5;
        }
      }
      while (v8 != ++v7);
    }
    *((_BYTE *)this + 796) = 1;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  result = *((__n128 *)this + 32);
  *(__n128 *)a2 = result;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::materializeSourceNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  const char *v20;
  unsigned int *v21;
  int v22;
  unint64_t v24;
  uint64_t result;
  _DWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v37;
  __int16 v38;

  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  if (v6 >= *((_QWORD *)this + 19))
    v7 = *((_QWORD *)this + 19);
  else
    v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 61);
  v9 = *((unsigned __int8 *)this + 472);
  v10 = *((_QWORD *)this + 63);
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 32) = 0;
  v12 = (_DWORD *)sub_1C5A011A0((uint64_t)this + 872, a2);
  if ((_DWORD *)((char *)this + 936) == v12)
  {
    v14 = 0;
    v15 = (_DWORD *)(v5 + v8 + v7 + v9 + v9 * v10 + 5);
  }
  else
  {
    v14 = v12[2];
    v15 = *(_DWORD **)v12;
  }
  v16 = v5 + v6;
  v17 = a2 - v14;
  if (v17)
  {
    while ((unint64_t)(v15 + 1) <= v16)
    {
      v15 = (_DWORD *)((char *)v15 + (*v15 + 4));
      if (!--v17)
        goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_10:
  if (!v13)
    sub_1C5A01260((uint64_t)this + 872, (uint64_t)v15, a2);
  v18 = v15 + 1;
  if ((unint64_t)(v15 + 1) > v16)
  {
LABEL_13:
    v19 = operator new();
    v20 = "missing source data size";
LABEL_16:
    v37 = v20;
    v38 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v24 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v37, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v24;
    *(_BYTE *)(v19 + 48) = 1;
    *a3 = v19;
    return MEMORY[0x1CAA32FC0](v11, 0x1050C40A8B26598);
  }
  v22 = *v15;
  v21 = v15 + 2;
  *(_DWORD *)v11 = v22;
  if ((unint64_t)v21 > v16)
  {
LABEL_15:
    v19 = operator new();
    v20 = "missing source token";
    goto LABEL_16;
  }
  while (*v18 == 1129464147)
  {
    v27 = v18 + 2;
    if ((unint64_t)(v18 + 2) > v16)
    {
LABEL_35:
      v19 = operator new();
      v20 = "missing token data size";
      goto LABEL_16;
    }
    v28 = *v21;
    v29 = v18 + 2;
    if ((unint64_t)(v18 + 2) >= v16)
    {
LABEL_30:
      if (*v29)
      {
        v19 = operator new();
        v20 = "missing source extract-to sub-directory";
        goto LABEL_16;
      }
    }
    else
    {
      v30 = v6 + v5 - 8 - (_QWORD)v18;
      v29 = v27;
      while (*v29)
      {
        ++v29;
        if (!--v30)
        {
          v29 = (_BYTE *)(v6 + v5);
          goto LABEL_30;
        }
      }
    }
    v31 = v29 - v27;
    *(_QWORD *)(v11 + 8) = v27;
    *(_QWORD *)(v11 + 16) = v29 - v27;
    v32 = v29 + 1;
    v33 = ~v31;
    if ((unint64_t)&v29[v28 + 1 + v33] > v16)
    {
      v19 = operator new();
      v20 = "missing source archive";
      goto LABEL_16;
    }
    v34 = v33 + v28;
    v18 = &v32[v34];
    *(_QWORD *)(v11 + 24) = v32;
    *(_QWORD *)(v11 + 32) = v34;
LABEL_33:
    v21 = v18 + 1;
    if ((unint64_t)(v18 + 1) > v16)
      goto LABEL_15;
  }
  if (*v18 != 1413762629)
  {
    v26 = v18 + 2;
    if ((unint64_t)v26 > v16)
      goto LABEL_35;
    v18 = (_DWORD *)((char *)v26 + *v21);
    if ((unint64_t)v18 > v16)
    {
      v19 = operator new();
      v20 = "missing token data";
      goto LABEL_16;
    }
    goto LABEL_33;
  }
  v35 = *((_QWORD *)this + 64);
  result = *(_QWORD *)(v35 + 8 * a2);
  *(_QWORD *)(v35 + 8 * a2) = v11;
  if (result)
    result = MEMORY[0x1CAA32FC0](result, 0x1050C40A8B26598);
  *a3 = 0;
  return result;
}

void llvm::object::MetalLibObjectFile::libraryInstallName(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  if (*((_QWORD *)this + 71)
    || (llvm::object::MetalLibObjectFile::materializeDynamicHeader((int64x2_t *)this, &v5), (v4 = v5) == 0))
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *((_OWORD *)this + 35);
  }
  else
  {
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
  }
}

void llvm::object::MetalLibObjectFile::materializeDynamicHeader(int64x2_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  unint64_t v46;
  unint64_t v47;
  int64x2_t *v48;
  _QWORD v49[2];
  unint64_t v50;
  int64x2_t v51;
  char *v52;
  int64x2_t *v53;

  v4 = this[4].u16[2];
  v49[0] = (this[4].u16[0] >> 1) | ((unint64_t)this[4].u16[1] << 32) | 0x8000000000000000;
  v49[1] = v4 | 0x80000000;
  v50 = 0x8000000200000001;
  v51.i64[0] = 2147483652;
  if ((sub_1C4F7A4D8(v49, &v50) & 1) != 0 || (v5 = this[11].u64[1]) == 0)
  {
LABEL_55:
    *a2 = 0;
    return;
  }
  v6 = this[1].i64[0];
  v7 = this[1].u64[1];
  if (v7 < v5)
    v5 = this[1].u64[1];
  v8 = (_DWORD *)(v6 + v5);
  v9 = v6 + v7;
  v10 = (unsigned __int16 *)(v6 + v5 + 4);
  this[35] = 0u;
  if ((unint64_t)v10 > v6 + v7)
  {
LABEL_6:
    v11 = operator new();
    v12 = "missing dynamic header token";
LABEL_7:
    v50 = (unint64_t)v12;
    LOWORD(v53) = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v14 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v50, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v14;
    *(_BYTE *)(v11 + 48) = 1;
    *a2 = v11;
    return;
  }
  v15 = this + 37;
  while (1)
  {
    if (*v8 == 1162690894)
    {
      v17 = (char *)v8 + 6;
      if ((unint64_t)v8 + 6 > v9)
      {
        v11 = operator new();
        v12 = "missing library install name length";
        goto LABEL_7;
      }
      v18 = *v10;
      v16 = (unint64_t)&v17[v18];
      if ((unint64_t)&v17[v18] > v9)
        goto LABEL_56;
      v19 = v18 - 1;
      do
      {
        v20 = v18 - 1;
        if (v18 == 1)
          break;
      }
      while (!*((unsigned __int8 *)v8 + v18-- + 4));
      v22 = v20 >= v19 ? v19 : v20;
      this[35].i64[0] = (uint64_t)v17;
      this[35].i64[1] = v22;
      if (v17[v19])
      {
LABEL_56:
        v11 = operator new();
        v12 = "invalid library install name";
        goto LABEL_7;
      }
      goto LABEL_39;
    }
    if (*v8 != 1280203076)
    {
      if (*v8 == 1413762629)
        goto LABEL_55;
      if ((unint64_t)v8 + 6 > v9)
      {
        v11 = operator new();
        v12 = "missing token data size";
        goto LABEL_7;
      }
      v16 = (unint64_t)v8 + *v10 + 6;
      if (v16 > v9)
      {
        v11 = operator new();
        v12 = "missing token data";
        goto LABEL_7;
      }
      goto LABEL_39;
    }
    v23 = (_QWORD *)operator new();
    v24 = v23;
    v25 = (char *)v8 + 6;
    *v23 = 0;
    v23[1] = 0;
    if ((unint64_t)v8 + 6 > v9)
      break;
    v26 = *v10;
    v16 = (unint64_t)&v25[v26];
    if ((unint64_t)&v25[v26] > v9)
      goto LABEL_57;
    v27 = v26 - 1;
    do
    {
      v28 = v26 - 1;
      if (v26 == 1)
        break;
    }
    while (!*((unsigned __int8 *)v8 + v26-- + 4));
    v30 = v28 >= v27 ? v27 : v28;
    *v23 = v25;
    v23[1] = v30;
    if (v25[v27])
    {
LABEL_57:
      v43 = operator new();
      v44 = "invalid dynamic library install name";
      goto LABEL_61;
    }
    v31 = (_QWORD *)this[36].i64[1];
    v32 = this[37].u64[0];
    if ((unint64_t)v31 >= v32)
    {
      v48 = v15;
      v34 = (_QWORD *)this[36].i64[0];
      v35 = v31 - v34;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        abort();
      if ((uint64_t)(v32 - (_QWORD)v34) >> 2 > v36)
        v36 = (uint64_t)(v32 - (_QWORD)v34) >> 2;
      v37 = 0x1FFFFFFFFFFFFFFFLL;
      if (v32 - (unint64_t)v34 < 0x7FFFFFFFFFFFFFF8)
        v37 = v36;
      v53 = v48;
      if (v37)
      {
        if (v37 >> 61)
          sub_1C4764EE4();
        v47 = v37;
        v38 = (char *)operator new(8 * v37);
        v37 = v47;
        v35 = v31 - v34;
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[8 * v35];
      *(_QWORD *)v39 = v24;
      v40 = &v38[8 * v37];
      v51.i64[1] = (uint64_t)(v39 + 8);
      v52 = v40;
      if (v31 == v34)
      {
        v41 = vdupq_n_s64((unint64_t)v31);
        v33 = v39 + 8;
      }
      else
      {
        do
        {
          v42 = *--v31;
          *v31 = 0;
          *((_QWORD *)v39 - 1) = v42;
          v39 -= 8;
        }
        while (v31 != v34);
        v41 = this[36];
        v33 = (_QWORD *)v51.i64[1];
        v40 = v52;
        v32 = this[37].u64[0];
      }
      this[36].i64[0] = (uint64_t)v39;
      this[36].i64[1] = (uint64_t)v33;
      v51 = v41;
      this[37].i64[0] = (uint64_t)v40;
      v52 = (char *)v32;
      v50 = v41.i64[0];
      sub_1C62DAA80((uint64_t)&v50);
      v15 = v48;
    }
    else
    {
      *v31 = v23;
      v33 = v31 + 1;
    }
    this[36].i64[1] = (uint64_t)v33;
LABEL_39:
    v10 = (unsigned __int16 *)(v16 + 4);
    v8 = (_DWORD *)v16;
    if (v16 + 4 > v9)
      goto LABEL_6;
  }
  v43 = operator new();
  v44 = "missing dynamic library install name length";
LABEL_61:
  v50 = (unint64_t)v44;
  LOWORD(v53) = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v46 = qword_1EF8F7238[0];
  *(_QWORD *)v43 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v50, (_QWORD *)(v43 + 8));
  *(_QWORD *)(v43 + 32) = 3;
  *(_QWORD *)(v43 + 40) = v46;
  *(_BYTE *)(v43 + 48) = 1;
  *a2 = v43;
  MEMORY[0x1CAA32FC0](v24, 0x1050C40717B85FCLL);
}

void llvm::object::MetalLibObjectFile::linkers(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 67);
  v4 = *((_QWORD *)this + 68);
  if (v3 != v4)
    goto LABEL_2;
  llvm::object::MetalLibObjectFile::materializePackingHeader(this, &v7);
  v6 = v7;
  if (!v7)
  {
    v3 = *((_QWORD *)this + 67);
    v4 = *((_QWORD *)this + 68);
LABEL_2:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    return;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v6;
}

void llvm::object::MetalLibObjectFile::materializePackingHeader(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[4];
  __int16 v53;

  v4 = *((unsigned __int16 *)this + 34);
  v51[0] = (*((unsigned __int16 *)this + 32) >> 1) | ((unint64_t)*((unsigned __int16 *)this + 33) << 32) | 0x8000000000000000;
  v51[1] = v4 | 0x80000000;
  v52[0] = 0x8000000200000001;
  v52[1] = 2147483656;
  if ((sub_1C4F7A4D8(v51, v52) & 1) != 0)
    goto LABEL_62;
  v5 = *((_QWORD *)this + 21);
  if (!v5)
    goto LABEL_62;
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  if (v7 < v5)
    v5 = *((_QWORD *)this + 3);
  v8 = (_DWORD *)(v6 + v5);
  v9 = v6 + v7;
  v10 = (unsigned __int16 *)(v6 + v5 + 4);
  if ((unint64_t)v10 > v6 + v7)
    goto LABEL_6;
  v15 = (_BYTE *)(v7 + v6);
  v16 = v7 + v6 - 6;
  v50 = v7 + v6 - 1;
  while (*v8 == 1263421772)
  {
    v17 = operator new();
    v18 = v17;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    v19 = (char *)v8 + 6;
    if ((unint64_t)v8 + 6 > v9)
    {
      v45 = operator new();
      v46 = "missing linker length";
      goto LABEL_65;
    }
    v20 = (char *)v8 + 6;
    if ((unint64_t)v8 + 6 < v9)
    {
      v21 = v16 - (_QWORD)v8;
      v20 = (char *)v8 + 6;
      do
      {
        if (!*v20)
          goto LABEL_23;
        ++v20;
        --v21;
      }
      while (v21);
      v20 = v15;
    }
    if (*v20)
    {
      v45 = operator new();
      v46 = "missing linker command line";
      goto LABEL_65;
    }
LABEL_23:
    *(_QWORD *)(v17 + 8) = v19;
    *(_QWORD *)(v17 + 16) = v20 - v19;
    v22 = v20 + 1;
    v23 = v20 + 1;
    if ((unint64_t)(v20 + 1) < v9)
    {
      v24 = v50 - (_QWORD)v20;
      v23 = v22;
      do
      {
        if (!*v23)
          goto LABEL_29;
        ++v23;
        --v24;
      }
      while (v24);
      v23 = v15;
    }
    if (*v23)
    {
      v45 = operator new();
      v46 = "missing linker working directory";
LABEL_65:
      v52[0] = v46;
      v53 = 259;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v48 = qword_1EF8F7238[0];
      *(_QWORD *)v45 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v52, (_QWORD *)(v45 + 8));
      *(_QWORD *)(v45 + 32) = 3;
      *(_QWORD *)(v45 + 40) = v48;
      *(_BYTE *)(v45 + 48) = 1;
      *a2 = v45;
      sub_1C5A038C4(v18);
    }
LABEL_29:
    *(_QWORD *)(v17 + 24) = v22;
    *(_QWORD *)(v17 + 32) = v23 - v22;
    v8 = v23 + 5;
    if ((unint64_t)(v23 + 5) > v9)
    {
      v45 = operator new();
      v46 = "missing source offsets count";
      goto LABEL_65;
    }
    v25 = *(unsigned int *)(v23 + 1);
    if (!(_DWORD)v25)
      goto LABEL_35;
    v26 = (_QWORD *)(v17 + 40);
    sub_1C570F434((char **)(v17 + 40), *(unsigned int *)(v23 + 1));
    v27 = 0;
    do
    {
      if ((unint64_t)&v23[v27 + 13] > v9)
      {
        v45 = operator new();
        v46 = "missing source offset";
        goto LABEL_65;
      }
      *(_QWORD *)(*v26 + v27) = *(_QWORD *)&v23[v27 + 5];
      v27 += 8;
    }
    while (8 * v25 != v27);
    v8 = &v23[v27 + 5];
LABEL_35:
    v28 = (uint64_t *)*((_QWORD *)this + 68);
    v29 = *((_QWORD *)this + 69);
    if ((unint64_t)v28 < v29)
    {
      *v28 = v18;
      v30 = v28 + 1;
      goto LABEL_59;
    }
    v49 = a2;
    v31 = (_QWORD *)*((_QWORD *)this + 67);
    v32 = v28 - v31;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      abort();
    v34 = v15;
    v35 = v16;
    v36 = v29 - (_QWORD)v31;
    if (v36 >> 2 > v33)
      v33 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v33;
    if (v37)
    {
      if (v37 >> 61)
        sub_1C4764EE4();
      v38 = (char *)operator new(8 * v37);
    }
    else
    {
      v38 = 0;
    }
    v39 = (uint64_t *)&v38[8 * v32];
    v40 = &v38[8 * v37];
    *v39 = v18;
    v30 = v39 + 1;
    if (v28 == v31)
    {
      *((_QWORD *)this + 67) = v39;
      *((_QWORD *)this + 68) = v30;
      *((_QWORD *)this + 69) = v40;
      v16 = v35;
    }
    else
    {
      do
      {
        v41 = *--v28;
        *v28 = 0;
        *--v39 = v41;
      }
      while (v28 != v31);
      v28 = (uint64_t *)*((_QWORD *)this + 67);
      v42 = (uint64_t *)*((_QWORD *)this + 68);
      *((_QWORD *)this + 67) = v39;
      *((_QWORD *)this + 68) = v30;
      *((_QWORD *)this + 69) = v40;
      v16 = v35;
      if (v42 != v28)
      {
        v15 = v34;
        a2 = v49;
        do
        {
          v44 = *--v42;
          v43 = v44;
          *v42 = 0;
          if (v44)
            sub_1C5A038C4(v43);
        }
        while (v42 != v28);
        goto LABEL_57;
      }
    }
    v15 = v34;
    a2 = v49;
LABEL_57:
    if (v28)
      operator delete(v28);
LABEL_59:
    *((_QWORD *)this + 68) = v30;
LABEL_60:
    v10 = (unsigned __int16 *)(v8 + 1);
    if ((unint64_t)(v8 + 1) > v9)
    {
LABEL_6:
      v11 = operator new();
      v12 = "missing packing token";
      goto LABEL_7;
    }
  }
  if (*v8 == 1413762629)
  {
LABEL_62:
    v11 = 0;
  }
  else
  {
    if ((unint64_t)v8 + 6 > v9)
    {
      v11 = operator new();
      v12 = "missing token data size";
    }
    else
    {
      v8 = (_DWORD *)((char *)v8 + *v10 + 6);
      if ((unint64_t)v8 <= v9)
        goto LABEL_60;
      v11 = operator new();
      v12 = "missing token data";
    }
LABEL_7:
    v52[0] = v12;
    v53 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v14 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v52, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v14;
    *(_BYTE *)(v11 + 48) = 1;
  }
  *a2 = v11;
}

void llvm::object::MetalLibObjectFile::dynamicLibraries(int64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = this[36].i64[0];
  v4 = this[36].i64[1];
  if (v3 != v4)
    goto LABEL_2;
  llvm::object::MetalLibObjectFile::materializeDynamicHeader(this, &v7);
  v6 = v7;
  if (!v7)
  {
    v3 = this[36].i64[0];
    v4 = this[36].i64[1];
LABEL_2:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    return;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v6;
}

uint64_t llvm::object::MetalLibObjectFile::variables@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if (*(_BYTE *)(this + 797))
    goto LABEL_8;
  v4 = *(_QWORD *)(this + 608) - *(_QWORD *)(this + 600);
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_7:
    *(_BYTE *)(v2 + 797) = 1;
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 600);
    return this;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 600) + 8 * v5))
    {
      this = llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)v2, v5, &v8);
      v7 = v8;
      if (v8)
        break;
    }
    if (v6 == ++v5)
      goto LABEL_7;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
  return this;
}

uint64_t llvm::object::MetalLibObjectFile::importedSymbols@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if (*(_BYTE *)(this + 798))
    goto LABEL_8;
  v4 = *(_QWORD *)(this + 632) - *(_QWORD *)(this + 624);
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_7:
    *(_BYTE *)(v2 + 798) = 1;
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 624);
    return this;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 624) + 8 * v5))
    {
      this = llvm::object::MetalLibObjectFile::materializeImportedSymbolNo((llvm::object::MetalLibObjectFile *)v2, v5, &v8);
      v7 = v8;
      if (v8)
        break;
    }
    if (v6 == ++v5)
      goto LABEL_7;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
  return this;
}

uint64_t llvm::object::MetalLibObjectFile::reflections@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if (*(_BYTE *)(this + 799))
    goto LABEL_8;
  v4 = *(_QWORD *)(this + 656) - *(_QWORD *)(this + 648);
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_7:
    *(_BYTE *)(v2 + 799) = 1;
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 648);
    return this;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 648) + 8 * v5))
    {
      this = llvm::object::MetalLibObjectFile::materializeReflectionNo((llvm::object::MetalLibObjectFile *)v2, v5, &v8);
      v7 = v8;
      if (v8)
        break;
    }
    if (v6 == ++v5)
      goto LABEL_7;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
  return this;
}

uint64_t llvm::object::MetalLibObjectFile::materializeReflectionNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int **v13;
  uint64_t v14;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  __int16 v32;

  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 29) + 4;
  if (v7 < v8)
    v8 = *((_QWORD *)this + 3);
  v9 = (_DWORD *)(v6 + v8);
  v10 = v6 + v7;
  v11 = (_QWORD *)operator new();
  v12 = v11;
  v11[1] = 0;
  *v11 = 0;
  v11[2] = 0;
  if (a2)
  {
    v13 = (unsigned int **)*((_QWORD *)this + 81);
    v14 = a2;
    do
    {
      v15 = *v13;
      if (!*v13)
      {
        v15 = v9;
        if ((unint64_t)(v9 + 1) > v10)
          goto LABEL_9;
      }
      v9 = (_DWORD *)((char *)v9 + *v15);
      ++v13;
    }
    while (--v14);
  }
  v16 = (char *)(v9 + 1);
  v11[1] = 0;
  v11[2] = 0;
  if ((unint64_t)(v9 + 1) > v10)
  {
LABEL_9:
    v17 = operator new();
    v18 = "missing reflection data size";
LABEL_12:
    v31 = v18;
    v32 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v22 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v22;
    *(_BYTE *)(v17 + 48) = 1;
    *a3 = v17;
    return MEMORY[0x1CAA32FC0](v12, 0x1050C40A5B97131);
  }
  v20 = *v9;
  v19 = v9 + 2;
  *(_DWORD *)v11 = v20;
  if ((unint64_t)v19 > v10)
  {
LABEL_11:
    v17 = operator new();
    v18 = "missing reflection token";
    goto LABEL_12;
  }
  v24 = 0;
  while (*(_DWORD *)v16 == 1179992658)
  {
    v26 = v16 + 8;
    if ((unint64_t)v26 > v10)
    {
      v17 = operator new();
      v18 = "missing reflection token data size";
      goto LABEL_12;
    }
    v27 = (((unint64_t)v26 - *((_QWORD *)this + 2) + 15) & 0xFFFFFFFFFFFFFFF0)
        - ((_QWORD)v26
         - *((_QWORD *)this + 2));
    v28 = (((unint64_t)v26 - *((_QWORD *)this + 2) + 15) & 0xFFFFFFFFFFFFFFF0) + *((_QWORD *)this + 2);
    if (v28 > v10 || (v29 = *v19, v28 + v29 - v27 > v10))
    {
      v17 = operator new();
      v18 = "missing reflection flatbuffer";
      goto LABEL_12;
    }
    v24 = v29 - v27;
    v16 = (char *)v26 + v29;
    v11[1] = v28;
    v11[2] = v24;
LABEL_25:
    v19 = (unsigned int *)(v16 + 4);
    if ((unint64_t)(v16 + 4) > v10)
      goto LABEL_11;
  }
  if (*(_DWORD *)v16 != 1413762629)
  {
    v25 = v16 + 6;
    if ((unint64_t)v25 > v10)
    {
      v17 = operator new();
      v18 = "missing token data size";
      goto LABEL_12;
    }
    v16 = &v25[*(unsigned __int16 *)v19];
    if ((unint64_t)v16 > v10)
    {
      v17 = operator new();
      v18 = "missing token data";
      goto LABEL_12;
    }
    goto LABEL_25;
  }
  if (!v24)
  {
    v17 = operator new();
    v18 = "reflection flatbuffer required";
    goto LABEL_12;
  }
  v30 = *((_QWORD *)this + 81);
  result = *(_QWORD *)(v30 + 8 * a2);
  *(_QWORD *)(v30 + 8 * a2) = v12;
  if (result)
    result = MEMORY[0x1CAA32FC0](result, 0x1050C40A5B97131);
  *a3 = 0;
  return result;
}

uint64_t llvm::object::MetalLibObjectFile::scripts@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this;
  if (*(_BYTE *)(this + 800))
    goto LABEL_8;
  v4 = *(_QWORD *)(this + 680) - *(_QWORD *)(this + 672);
  if ((v4 & 0x7FFFFFFF8) == 0)
  {
LABEL_7:
    *(_BYTE *)(v2 + 800) = 1;
LABEL_8:
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 672);
    return this;
  }
  v5 = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 672) + 8 * v5))
    {
      this = llvm::object::MetalLibObjectFile::materializeScriptNo((llvm::object::MetalLibObjectFile *)v2, v5, &v8);
      v7 = v8;
      if (v8)
        break;
    }
    if (v6 == ++v5)
      goto LABEL_7;
  }
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
  return this;
}

uint64_t llvm::object::MetalLibObjectFile::materializeScriptNo@<X0>(llvm::object::MetalLibObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int **v13;
  uint64_t v14;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  __int16 v32;

  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 31) + 4;
  if (v7 < v8)
    v8 = *((_QWORD *)this + 3);
  v9 = (_DWORD *)(v6 + v8);
  v10 = v6 + v7;
  v11 = (_QWORD *)operator new();
  v12 = v11;
  v11[1] = 0;
  *v11 = 0;
  v11[2] = 0;
  if (a2)
  {
    v13 = (unsigned int **)*((_QWORD *)this + 84);
    v14 = a2;
    do
    {
      v15 = *v13;
      if (!*v13)
      {
        v15 = v9;
        if ((unint64_t)(v9 + 1) > v10)
          goto LABEL_9;
      }
      v9 = (_DWORD *)((char *)v9 + *v15);
      ++v13;
    }
    while (--v14);
  }
  v16 = (char *)(v9 + 1);
  v11[1] = 0;
  v11[2] = 0;
  if ((unint64_t)(v9 + 1) > v10)
  {
LABEL_9:
    v17 = operator new();
    v18 = "missing script data size";
LABEL_12:
    v31 = v18;
    v32 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v22 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v22;
    *(_BYTE *)(v17 + 48) = 1;
    *a3 = v17;
    return MEMORY[0x1CAA32FC0](v12, 0x1050C40A5B97131);
  }
  v20 = *v9;
  v19 = v9 + 2;
  *(_DWORD *)v11 = v20;
  if ((unint64_t)v19 > v10)
  {
LABEL_11:
    v17 = operator new();
    v18 = "missing script token";
    goto LABEL_12;
  }
  v24 = 0;
  while (*(_DWORD *)v16 == 1179992659)
  {
    v26 = v16 + 8;
    if ((unint64_t)v26 > v10)
    {
      v17 = operator new();
      v18 = "missing script flatbuffer token data size";
      goto LABEL_12;
    }
    v27 = (((unint64_t)v26 - *((_QWORD *)this + 2) + 15) & 0xFFFFFFFFFFFFFFF0)
        - ((_QWORD)v26
         - *((_QWORD *)this + 2));
    v28 = (((unint64_t)v26 - *((_QWORD *)this + 2) + 15) & 0xFFFFFFFFFFFFFFF0) + *((_QWORD *)this + 2);
    if (v28 > v10 || (v29 = *v19, v28 + v29 - v27 > v10))
    {
      v17 = operator new();
      v18 = "missing script flatbuffer";
      goto LABEL_12;
    }
    v24 = v29 - v27;
    v16 = (char *)v26 + v29;
    v11[1] = v28;
    v11[2] = v24;
LABEL_25:
    v19 = (unsigned int *)(v16 + 4);
    if ((unint64_t)(v16 + 4) > v10)
      goto LABEL_11;
  }
  if (*(_DWORD *)v16 != 1413762629)
  {
    v25 = v16 + 6;
    if ((unint64_t)v25 > v10)
    {
      v17 = operator new();
      v18 = "missing token data size";
      goto LABEL_12;
    }
    v16 = &v25[*(unsigned __int16 *)v19];
    if ((unint64_t)v16 > v10)
    {
      v17 = operator new();
      v18 = "missing token data";
      goto LABEL_12;
    }
    goto LABEL_25;
  }
  if (!v24)
  {
    v17 = operator new();
    v18 = "script flatbuffer required";
    goto LABEL_12;
  }
  v30 = *((_QWORD *)this + 84);
  result = *(_QWORD *)(v30 + 8 * a2);
  *(_QWORD *)(v30 + 8 * a2) = v12;
  if (result)
    result = MEMORY[0x1CAA32FC0](result, 0x1050C40A5B97131);
  *a3 = 0;
  return result;
}

void llvm::object::MetalLibObjectFile::functionWithName(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  char v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::functions(a1, (uint64_t)&v18);
  v7 = v18;
  if ((v20 & 1) != 0)
  {
LABEL_15:
    v15 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_16;
  }
  v8 = v19;
  if (v18 == v19)
  {
LABEL_12:
    v7 = operator new();
    v16 = "function not found";
    v17 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v14 = qword_1EF8F7238[0];
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v16, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = v14;
    *(_BYTE *)(v7 + 48) = 1;
    goto LABEL_15;
  }
  while (1)
  {
    v9 = *(_QWORD *)v7 + 104;
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 112);
    v11 = v10 == 0;
    if (v10)
      v12 = 104;
    else
      v12 = 8;
    if (v11)
      v9 = *(_QWORD *)v7 + 8;
    if (*(_QWORD *)(v9 + 8) == a3 && (!a3 || !memcmp(*(const void **)(*(_QWORD *)v7 + v12), a2, a3)))
      break;
    v7 += 8;
    if (v7 == v8)
      goto LABEL_12;
  }
  v15 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_16:
  *(_BYTE *)(a4 + 8) = v15;
  *(_QWORD *)a4 = v7;
}

void llvm::object::MetalLibObjectFile::variableWithName(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  char v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::variables(a1, (uint64_t)&v18);
  v7 = v18;
  if ((v20 & 1) != 0)
  {
LABEL_15:
    v15 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_16;
  }
  v8 = v19;
  if (v18 == v19)
  {
LABEL_12:
    v7 = operator new();
    v16 = "variable not found";
    v17 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v14 = qword_1EF8F7238[0];
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v16, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = v14;
    *(_BYTE *)(v7 + 48) = 1;
    goto LABEL_15;
  }
  while (1)
  {
    v9 = *(_QWORD *)v7 + 88;
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 96);
    v11 = v10 == 0;
    if (v10)
      v12 = 88;
    else
      v12 = 8;
    if (v11)
      v9 = *(_QWORD *)v7 + 8;
    if (*(_QWORD *)(v9 + 8) == a3 && (!a3 || !memcmp(*(const void **)(*(_QWORD *)v7 + v12), a2, a3)))
      break;
    v7 += 8;
    if (v7 == v8)
      goto LABEL_12;
  }
  v15 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_16:
  *(_BYTE *)(a4 + 8) = v15;
  *(_QWORD *)a4 = v7;
}

void llvm::object::MetalLibObjectFile::functionWithHash(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::functions(a1, (uint64_t)v14);
  v7 = v14[0];
  if ((v15 & 1) == 0)
  {
    v8 = v14[1];
    while (v7 != v8)
    {
      if (*(_QWORD *)(*(_QWORD *)v7 + 40) == a3 && !memcmp(*(const void **)(*(_QWORD *)v7 + 32), a2, a3))
      {
        v11 = *(_BYTE *)(a4 + 8) & 0xFE;
        goto LABEL_11;
      }
      v7 += 8;
    }
    v7 = operator new();
    v12 = "function not found";
    v13 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = v10;
    *(_BYTE *)(v7 + 48) = 1;
  }
  v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_11:
  *(_BYTE *)(a4 + 8) = v11;
  *(_QWORD *)a4 = v7;
}

void llvm::object::MetalLibObjectFile::variableWithHash(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::variables(a1, (uint64_t)v14);
  v7 = v14[0];
  if ((v15 & 1) == 0)
  {
    v8 = v14[1];
    while (v7 != v8)
    {
      if (*(_QWORD *)(*(_QWORD *)v7 + 32) == a3 && !memcmp(*(const void **)(*(_QWORD *)v7 + 24), a2, a3))
      {
        v11 = *(_BYTE *)(a4 + 8) & 0xFE;
        goto LABEL_11;
      }
      v7 += 8;
    }
    v7 = operator new();
    v12 = "function not found";
    v13 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = v10;
    *(_BYTE *)(v7 + 48) = 1;
  }
  v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_11:
  *(_BYTE *)(a4 + 8) = v11;
  *(_QWORD *)a4 = v7;
}

void llvm::object::MetalLibObjectFile::moduleWithHash(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::functions(a1, (uint64_t)&v27);
  v8 = v27;
  if ((v29 & 1) != 0)
    goto LABEL_23;
  v9 = v28;
  if (v27 == v28)
    goto LABEL_14;
  v10 = -v27;
  while (*(_QWORD *)(*(_QWORD *)v8 + 40) != a3 || memcmp(*(const void **)(*(_QWORD *)v8 + 32), a2, a3))
  {
    v8 += 8;
    v10 -= 8;
    if (v8 == v9)
      goto LABEL_14;
  }
  if ((*(_WORD *)(a1 + 70) & 1) != 0)
    goto LABEL_14;
  v11 = -v10 - *(_QWORD *)(a1 + 280);
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + (v11 >> 1));
  if (v12 == -1)
  {
    sub_1C5A01C50(v22, (uint64_t **)a1, (unint64_t)v11 >> 3, (uint64_t *)(a1 + 280), (uint64_t *)(a1 + 600), (_DWORD **)(a1 + 352), (_DWORD **)(a1 + 376), (_QWORD *)(a1 + 424), (_QWORD *)(a1 + 448));
    if (v22[0])
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22[0] + 8))(v22[0]);
      goto LABEL_14;
    }
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 4 * (v11 >> 3));
  }
  v13 = *(_QWORD *)(a1 + 400) + 8 * v12;
  if (v13 != *(_QWORD *)(a1 + 408))
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v13;
    return;
  }
LABEL_14:
  llvm::object::MetalLibObjectFile::variables(a1, (uint64_t)&v24);
  v8 = v24;
  if ((v26 & 1) != 0)
  {
LABEL_23:
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v8;
    return;
  }
  v14 = v25;
  if (v24 == v25)
    goto LABEL_20;
  v15 = -v24;
  while (*(_QWORD *)(*(_QWORD *)v8 + 32) != a3 || memcmp(*(const void **)(*(_QWORD *)v8 + 24), a2, a3))
  {
    v8 += 8;
    v15 -= 8;
    if (v8 == v14)
      goto LABEL_20;
  }
  if ((*(_WORD *)(a1 + 70) & 1) == 0)
  {
    v18 = -v15 - *(_QWORD *)(a1 + 600);
    v19 = *(_DWORD *)(*(_QWORD *)(a1 + 376) + (v18 >> 1));
    if (v19 != -1)
    {
LABEL_27:
      v20 = *(_QWORD *)(a1 + 400) + 8 * v19;
      goto LABEL_29;
    }
    sub_1C5A020A8(v22, (uint64_t **)a1, (unint64_t)v18 >> 3, (uint64_t *)(a1 + 600), (uint64_t *)(a1 + 280), (_DWORD **)(a1 + 376), (_DWORD **)(a1 + 352), (_QWORD *)(a1 + 448), (_QWORD *)(a1 + 424));
    v21 = v22[0];
    if (!v22[0])
    {
      v19 = *(_DWORD *)(*(_QWORD *)(a1 + 376) + 4 * (v18 >> 3));
      goto LABEL_27;
    }
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_20:
    v8 = operator new();
    v22[0] = (uint64_t)"module not found";
    v23 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v17 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v22, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v17;
    *(_BYTE *)(v8 + 48) = 1;
    goto LABEL_23;
  }
  v20 = *(_QWORD *)(a1 + 408);
LABEL_29:
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_QWORD *)a4 = v20;
  if (v20 == *(_QWORD *)(a1 + 408))
    goto LABEL_20;
}

void llvm::object::MetalLibObjectFile::privateMetadataWithOffset(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  char v9;
  unint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::privateMetadata((uint64_t)this, (uint64_t)&v14);
  v5 = v14;
  if ((v16 & 1) != 0)
  {
LABEL_15:
    v9 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_16;
  }
  if (a2 && v14 != v15)
  {
    v6 = 0;
    do
    {
      v7 = *(unsigned int **)v5;
      v5 += 8;
      v6 += *v7;
    }
    while (v6 != a2 && v5 != v15);
  }
  if (v5 == v15)
  {
    v5 = operator new();
    v12 = "private metadata not found";
    v13 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v11 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v11;
    *(_BYTE *)(v5 + 48) = 1;
    goto LABEL_15;
  }
  v9 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_16:
  *(_BYTE *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v5;
}

void llvm::object::MetalLibObjectFile::scriptWithOffset(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  char v9;
  unint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::scripts((uint64_t)this, (uint64_t)&v14);
  v5 = v14;
  if ((v16 & 1) != 0)
  {
LABEL_15:
    v9 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_16;
  }
  if (a2 != 4 && v14 != v15)
  {
    v6 = 4;
    do
    {
      v7 = *(unsigned int **)v5;
      v5 += 8;
      v6 += *v7;
    }
    while (v6 != a2 && v5 != v15);
  }
  if (v5 == v15)
  {
    v5 = operator new();
    v12 = "script not found";
    v13 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v11 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v11;
    *(_BYTE *)(v5 + 48) = 1;
    goto LABEL_15;
  }
  v9 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_16:
  *(_BYTE *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v5;
}

void llvm::object::MetalLibObjectFile::sourceWithOffset(llvm::object::MetalLibObjectFile *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::sourceWithOffset(this, a2, (uint64_t)this + 1064, (uint64_t)&v11);
  if ((v12 & 1) == 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v6 = v11;
LABEL_7:
    *(_QWORD *)a3 = v6;
    return;
  }
  v8 = v11;
  sub_1C4D62BD4(&v8, &v9);
  if (v8)
    (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  llvm::object::MetalLibObjectFile::sourceWithOffset(this, a2, (uint64_t)this + 1128, (uint64_t)&v9);
  if ((v10 & 1) == 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v6 = v9;
    goto LABEL_7;
  }
  v7 = v9;
  sub_1C4D62BD4(&v7, &v8);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  llvm::object::MetalLibObjectFile::sourceWithOffset(this, a2, 0, a3);
}

void llvm::object::MetalLibObjectFile::sourceWithOffset(llvm::object::MetalLibObjectFile *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t i;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t j;
  uint64_t v47;
  uint64_t v48[4];
  __int16 v49;

  v8 = *((_QWORD *)this + 61);
  if (!v8 || (v9 = *((_QWORD *)this + 63)) == 0)
  {
    llvm::object::MetalLibObjectFile::materializeSourcesHeader(this, v48);
    v10 = v48[0];
    if (v48[0])
      goto LABEL_4;
    v8 = *((_QWORD *)this + 61);
    v9 = *((_QWORD *)this + 63);
  }
  v12 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3);
  v14 = *((_QWORD *)this + 19);
  if (v13 < v14)
    v14 = *((_QWORD *)this + 3);
  v15 = v12 + v14;
  v16 = (_DWORD *)(v15 + v8 + *((unsigned __int8 *)this + 472) + *((unsigned __int8 *)this + 472) * v9 + 5);
  v17 = *((_QWORD *)this + 64);
  v18 = (unint64_t)(*((_QWORD *)this + 65) - v17) >> 3;
  if (a3)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)(a3 + 64);
    v22 = 4;
    v23 = a3;
    v24 = 4;
    do
    {
      v25 = *(_DWORD *)(v23 + 12);
      if (v25)
      {
        if (*(_QWORD *)v23 == a2)
        {
          v24 = v19;
        }
        else if (*(_QWORD *)v23 < a2 && (v22 == 4 || *v21 < *(_QWORD *)v23))
        {
          v22 = v19;
        }
        if (v20 <= v25)
          v20 = *(_DWORD *)(v23 + 12);
      }
      ++v19;
      v21 = (_QWORD *)(a3 + 16 * v22);
      v23 += 16;
    }
    while (v19 != 4);
    if (v24 == 4)
    {
      v26 = 0;
      v24 = v22;
    }
    else
    {
      v27 = __CFADD__(v20, 1);
      v28 = v20 + 1;
      if (v27)
      {
        for (i = 0; i != 64; i += 16)
          *(_DWORD *)(a3 + 12 + i) = *(_DWORD *)(a3 + 12 + i) != 0;
        v28 = 2;
      }
      *(_DWORD *)(a3 + 16 * v24 + 12) = v28;
      v26 = 1;
    }
    if (v24 != 4)
    {
      v31 = a3 + 16 * v24;
      v16 = (_DWORD *)(v15 + *(_QWORD *)v31 - 4);
      v30 = *(_DWORD *)(v31 + 8);
      goto LABEL_33;
    }
  }
  else
  {
    v26 = 0;
  }
  v30 = 0;
LABEL_33:
  if (v30 == (_DWORD)v18)
  {
LABEL_34:
    v32 = operator new();
    v33 = "invalid source offset";
    goto LABEL_35;
  }
  v36 = v12 + v13;
  while (1)
  {
    v37 = (unint64_t)v16 - v15 + 4;
    if (v37 == a2)
    {
      if (a3 && !v26)
      {
        v38 = 0;
        v39 = 0;
        v40 = 4;
        v41 = a3;
        v42 = 4;
        v43 = 4;
        do
        {
          v44 = *(_DWORD *)(v41 + 12);
          if (v44)
          {
            if (*(_QWORD *)v41 == a2)
            {
              v43 = v38;
            }
            else if (v40 == 4 || *(_DWORD *)(a3 + 16 * v40 + 12) > v44)
            {
              v40 = v38;
            }
            if (v39 <= v44)
              v39 = *(_DWORD *)(v41 + 12);
          }
          else
          {
            v42 = v38;
          }
          ++v38;
          v41 += 16;
        }
        while (v38 != 4);
        v27 = __CFADD__(v39, 1);
        v45 = v39 + 1;
        if (v27)
        {
          for (j = 0; j != 64; j += 16)
            *(_DWORD *)(a3 + 12 + j) = *(_DWORD *)(a3 + 12 + j) != 0;
          v45 = 2;
        }
        if (v42 != 4)
          v40 = v42;
        if (v43 != 4)
          v40 = v43;
        v47 = a3 + 16 * v40;
        *(_QWORD *)v47 = a2;
        *(_DWORD *)(v47 + 8) = v30;
        *(_DWORD *)(v47 + 12) = v45;
      }
      if (!*(_QWORD *)(v17 + 8 * v30))
      {
        llvm::object::MetalLibObjectFile::materializeSourceNo(this, v30, v48);
        v10 = v48[0];
        if (v48[0])
        {
LABEL_4:
          v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_5:
          *(_BYTE *)(a4 + 8) = v11;
          *(_QWORD *)a4 = v10;
          return;
        }
        v17 = *((_QWORD *)this + 64);
      }
      v10 = v17 + 8 * v30;
      v11 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_5;
    }
    if (v37 > a2)
      goto LABEL_34;
    if ((unint64_t)(v16 + 1) > v36)
      break;
    v16 = (_DWORD *)((char *)v16 + (*v16 + 4));
    if ((_DWORD)v18 == ++v30)
      goto LABEL_34;
  }
  v32 = operator new();
  v33 = "missing source data size";
LABEL_35:
  v48[0] = (uint64_t)v33;
  v49 = 259;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v35 = qword_1EF8F7238[0];
  *(_QWORD *)v32 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v48, (_QWORD *)(v32 + 8));
  *(_QWORD *)(v32 + 32) = 3;
  *(_QWORD *)(v32 + 40) = v35;
  *(_BYTE *)(v32 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v32;
}

void llvm::object::MetalLibObjectFile::sourceOfFunction(llvm::object::MetalLibObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  if (v3)
  {
    llvm::object::MetalLibObjectFile::sourceWithOffset(a1, v3, (uint64_t)a1 + 1064, a3);
  }
  else
  {
    v4 = *((_QWORD *)a1 + 65);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v4;
  }
}

void llvm::object::MetalLibObjectFile::sourceOfVariable(llvm::object::MetalLibObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  if (v3)
  {
    llvm::object::MetalLibObjectFile::sourceWithOffset(a1, v3, (uint64_t)a1 + 1128, a3);
  }
  else
  {
    v4 = *((_QWORD *)a1 + 65);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v4;
  }
}

void llvm::object::MetalLibObjectFile::functionOfModule(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v8;
  const char *v9;
  __int16 v10;

  v4 = *(unsigned int *)(a1[53] + ((a2 - a1[50]) >> 1));
  if ((_DWORD)v4 == -1)
  {
    v5 = operator new();
    v9 = "function not found";
    v10 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v9, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v8;
    *(_BYTE *)(v5 + 48) = 1;
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = a1[35] + 8 * v4;
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
}

void llvm::object::MetalLibObjectFile::variableOfModule(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v8;
  const char *v9;
  __int16 v10;

  v4 = *(unsigned int *)(a1[56] + ((a2 - a1[50]) >> 1));
  if ((_DWORD)v4 == -1)
  {
    v5 = operator new();
    v9 = "variable not found";
    v10 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v9, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v8;
    *(_BYTE *)(v5 + 48) = 1;
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = a1[75] + 8 * v4;
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
}

void llvm::object::MetalLibObjectFile::hashOfModule(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::functionOfModule(a1, a2, (uint64_t)&v15);
  if ((v16 & 1) != 0)
  {
    llvm::object::MetalLibObjectFile::variableOfModule(a1, a2, (uint64_t)&v13);
    if ((v14 & 1) != 0)
    {
      v8 = operator new();
      v11 = "hash not found";
      v12 = 259;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v10 = qword_1EF8F7238[0];
      *(_QWORD *)v8 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v8 + 8));
      *(_QWORD *)(v8 + 32) = 3;
      *(_QWORD *)(v8 + 40) = v10;
      *(_BYTE *)(v8 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
      if (v13)
        (*(void (**)(uint64_t *))(*v13 + 8))(v13);
    }
    else
    {
      v7 = *v13;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = *(_OWORD *)(v7 + 24);
    }
    if (v15)
      (*(void (**)(uint64_t *))(*v15 + 8))(v15);
  }
  else
  {
    v6 = *v15;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 32);
  }
}

void llvm::object::MetalLibObjectFile::referencesExternalResources(llvm::object::MetalLibObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  char v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  llvm::object::MetalLibObjectFile::functions((uint64_t)this, (uint64_t)v18);
  v4 = (uint64_t *)v18[0];
  if ((v19 & 1) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    v5 = (uint64_t *)v18[1];
    while (v4 != v5)
    {
      v6 = *v4;
      if (*(_QWORD *)(*v4 + 128))
        goto LABEL_26;
      if (*(_BYTE *)(v6 + 200))
      {
        if (*(_QWORD *)(v6 + 152) | *(_QWORD *)(v6 + 184))
          goto LABEL_26;
      }
      else if (*(_BYTE *)(v6 + 256))
      {
        v8 = *(_BYTE **)(v6 + 208);
        v7 = *(_BYTE **)(v6 + 216);
        v9 = v7 - v8;
        if (v7 == v8)
        {
          if (*(_QWORD *)(v6 + 240))
            goto LABEL_26;
        }
        else
        {
          if (v9 < 0)
            abort();
          v10 = (char *)operator new(v7 - v8);
          v11 = v9 & 0xFFFFFFFFFFFFFFE0;
          memcpy(v10, v8, v11);
          v12 = *(_QWORD *)(v6 + 240);
          if (v11)
          {
            v13 = 0;
            while (!*(_QWORD *)&v10[v13 + 8])
            {
              v13 += 32;
              if (v11 == v13)
                goto LABEL_15;
            }
            operator delete(v10);
LABEL_26:
            *(_BYTE *)(a2 + 8) &= ~1u;
            v15 = 1;
            goto LABEL_30;
          }
LABEL_15:
          operator delete(v10);
          if (v12)
            goto LABEL_26;
        }
      }
      ++v4;
    }
    llvm::object::MetalLibObjectFile::variables((uint64_t)this, (uint64_t)v16);
    v14 = v16[0];
    if ((v17 & 1) != 0)
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v14;
      return;
    }
    while (1)
    {
      if (v14 == v16[1])
      {
        v15 = 0;
        goto LABEL_29;
      }
      if (*(_QWORD *)(*(_QWORD *)v14 + 112))
        break;
      v14 += 8;
    }
    v15 = 1;
LABEL_29:
    *(_BYTE *)(a2 + 8) &= ~1u;
LABEL_30:
    *(_BYTE *)a2 = v15;
  }
}

llvm::object::MetalLibObjectFile *llvm::object::MetalLibObjectFile::asFunction@<X0>(llvm::object::MetalLibObjectFile *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  llvm::object::MetalLibObjectFile *v9;
  uint64_t v10;

  v4 = a2;
  v5 = *((_QWORD *)result + 35);
  v6 = *((_QWORD *)result + 36);
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return result;
  }
  if (!*(_QWORD *)(v5 + 8 * a2))
  {
    v9 = result;
    result = (llvm::object::MetalLibObjectFile *)llvm::object::MetalLibObjectFile::materializeFunctionNo(result, a2, &v10);
    v7 = v10;
    if (v10)
    {
      v8 = *(_BYTE *)(a3 + 8) | 1;
      goto LABEL_7;
    }
    v5 = *((_QWORD *)v9 + 35);
  }
  v7 = v5 + 8 * v4;
  v8 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_7:
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)a3 = v7;
  return result;
}

_QWORD *llvm::object::MetalLibObjectFile::asVariable@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a2;
  v5 = result[36] - result[35];
  v6 = result[76];
  v7 = result[75];
  if (a2 >= (unint64_t)(((v6 - v7) >> 3) + (v5 >> 3)))
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return result;
  }
  v8 = a2 - (v5 >> 3);
  if (!*(_QWORD *)(v7 + 8 * v8))
  {
    v11 = result;
    result = (_QWORD *)llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)result, a2 - ((unint64_t)v5 >> 3), &v12);
    v9 = v12;
    if (v12)
    {
      v10 = *(_BYTE *)(a3 + 8) | 1;
      goto LABEL_7;
    }
    v7 = v11[75];
    v8 = v4 - ((uint64_t)(v11[36] - v11[35]) >> 3);
  }
  v9 = v7 + 8 * v8;
  v10 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_7:
  *(_BYTE *)(a3 + 8) = v10;
  *(_QWORD *)a3 = v9;
  return result;
}

void sub_1C5A00F38(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = (uint64_t)v3 - *(_QWORD *)a1;
  v6 = v5 >> 3;
  if (a2 <= v5 >> 3)
  {
    if (a2 < v6)
    {
      v20 = &v4[a2];
      while (v3 != v20)
      {
        v22 = *--v3;
        v21 = v22;
        *v3 = 0;
        if (v22)
          sub_1C5A02548(v21);
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
  }
  else
  {
    v7 = a2 - v6;
    v8 = *(_QWORD *)(a1 + 16);
    if (a2 - v6 <= (v8 - (uint64_t)v3) >> 3)
    {
      bzero(*(void **)(a1 + 8), 8 * v7);
      *(_QWORD *)(a1 + 8) = &v3[v7];
    }
    else
    {
      if (a2 >> 61)
        abort();
      v9 = v8 - (_QWORD)v4;
      v10 = v9 >> 2;
      if (v9 >> 2 <= a2)
        v10 = a2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
      v13 = &v12[8 * v6];
      v14 = &v12[8 * v11];
      bzero(v13, 8 * v7);
      v15 = &v12[8 * v7 + v5];
      if (v3 == v4)
      {
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v14;
      }
      else
      {
        do
        {
          v16 = *--v3;
          *v3 = 0;
          *((_QWORD *)v13 - 1) = v16;
          v13 -= 8;
        }
        while (v3 != v4);
        v3 = *(_QWORD **)a1;
        v17 = *(_QWORD **)(a1 + 8);
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v14;
        while (v17 != v3)
        {
          v19 = *--v17;
          v18 = v19;
          *v17 = 0;
          if (v19)
            sub_1C5A02548(v18);
        }
      }
      if (v3)
        operator delete(v3);
    }
  }
}

BOOL llvm::object::MetalLibObjectFile::skipExtensionToken(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v9;
  const char *v11;
  __int16 v12;

  v5 = *a2 + 2;
  if (v5 > a3)
  {
    v7 = operator new();
    v11 = "missing token data size";
    v12 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v9 = qword_1EF8F7238[0];
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = v9;
    *(_BYTE *)(v7 + 48) = 1;
    *a4 = v7;
  }
  else
  {
    *a2 = v5 + *(unsigned __int16 *)*a2;
  }
  return v5 <= a3;
}

uint64_t sub_1C5A011A0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t i;

  v2 = 0;
  v3 = 0;
  v4 = (unsigned int *)(a1 + 12);
  v5 = 4;
  v6 = 4;
  do
  {
    if (*v4)
    {
      v7 = *(v4 - 1);
      if (v7 == a2)
      {
        v6 = v2;
      }
      else if (v7 < a2 && (v5 == 4 || *(_DWORD *)(a1 + 16 * v5 + 8) < v7))
      {
        v5 = v2;
      }
      if (v3 <= *v4)
        v3 = *v4;
    }
    ++v2;
    v4 += 4;
  }
  while (v2 != 4);
  if (v6 == 4)
  {
    v6 = v5;
  }
  else
  {
    v8 = __CFADD__(v3, 1);
    v9 = v3 + 1;
    if (v8)
    {
      for (i = 0; i != 64; i += 16)
        *(_DWORD *)(a1 + 12 + i) = *(_DWORD *)(a1 + 12 + i) != 0;
      v9 = 2;
    }
    *(_DWORD *)(a1 + 16 * v6 + 12) = v9;
  }
  return a1 + 16 * v6;
}

uint64_t sub_1C5A01260(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t i;
  uint64_t v13;

  v3 = 0;
  v4 = 0;
  v5 = (unsigned int *)(result + 12);
  v6 = 4;
  v7 = 4;
  v8 = 4;
  do
  {
    v9 = *v5;
    if (*v5)
    {
      if (*(v5 - 1) == a3)
      {
        v8 = v3;
      }
      else if (v6 == 4 || *(_DWORD *)(result + 16 * v6 + 12) > v9)
      {
        v6 = v3;
      }
      if (v4 <= v9)
        v4 = *v5;
    }
    else
    {
      v7 = v3;
    }
    ++v3;
    v5 += 4;
  }
  while (v3 != 4);
  v10 = __CFADD__(v4, 1);
  v11 = v4 + 1;
  if (v10)
  {
    for (i = 0; i != 64; i += 16)
      *(_DWORD *)(result + 12 + i) = *(_DWORD *)(result + 12 + i) != 0;
    v11 = 2;
  }
  if (v7 != 4)
    v6 = v7;
  if (v8 != 4)
    v6 = v8;
  v13 = result + 16 * v6;
  *(_QWORD *)v13 = a2;
  *(_DWORD *)(v13 + 8) = a3;
  *(_DWORD *)(v13 + 12) = v11;
  return result;
}

void llvm::object::MetalLibObjectFile::materializeAdditionalData(llvm::object::MetalLibObjectFile *this@<X0>, const unsigned __int8 **a2@<X1>, const unsigned __int8 *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  const unsigned __int8 *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  const unsigned __int8 *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const unsigned __int8 *v25;
  const unsigned __int8 *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  const unsigned __int8 *v33;
  const unsigned __int8 *v34;
  const unsigned __int8 *v35;
  uint64_t v36;
  _QWORD *v37;
  const unsigned __int8 *v38;
  unsigned __int8 v39;
  uint64_t v40;
  int v41;
  const unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unsigned __int8 v53;
  const unsigned __int8 *v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  const unsigned __int8 *v57;
  int v58;
  const unsigned __int8 *v59;
  unint64_t v61;
  uint64_t v62;
  const unsigned __int8 *v63;
  unint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t *v91;
  unint64_t v92;
  char v93;
  const char *v94;
  char v95;
  __int16 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (a4 != 60)
  {
    if (a4 != 58)
    {
      if (a4 != 1)
      {
        *(_BYTE *)(a5 + 8) &= ~1u;
        *(_QWORD *)a5 = 0;
        return;
      }
      v9 = operator new();
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v10 = *a2 + 1;
      if (v10 > a3)
      {
        v11 = operator new();
        v12 = "missing struct members count";
LABEL_6:
        v94 = v12;
        v96 = 259;
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v14 = qword_1EF8F7238[0];
        *(_QWORD *)v11 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v11 + 8));
        *(_QWORD *)(v11 + 32) = 3;
        *(_QWORD *)(v11 + 40) = v14;
        *(_BYTE *)(v11 + 48) = 1;
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v11;
LABEL_9:
        v15 = *(void **)v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)(v9 + 8) = v15;
          operator delete(v15);
        }
        v16 = v9;
        v17 = 0x20C40960023A9;
        goto LABEL_57;
      }
      v29 = **a2;
      *a2 = v10;
      if (v29)
      {
        v30 = (char *)operator new(32 * v29);
        bzero(v30, 32 * v29);
        v31 = 0;
        v32 = &v30[32 * v29];
        *(_QWORD *)v9 = v30;
        *(_QWORD *)(v9 + 8) = v32;
        *(_QWORD *)(v9 + 16) = v32;
        while (1)
        {
          v33 = *a2;
          v34 = *a2;
          if (*a2 < a3)
          {
            v35 = (const unsigned __int8 *)(a3 - v33);
            v34 = *a2;
            do
            {
              if (!*v34)
                goto LABEL_25;
              ++v34;
              --v35;
            }
            while (v35);
            v34 = a3;
          }
          if (*v34)
            break;
LABEL_25:
          v36 = v34 - v33;
          *a2 = v34;
          v37 = (_QWORD *)(*(_QWORD *)v9 + 32 * v31);
          *v37 = v33;
          v37[1] = v36;
          v38 = (*a2)++;
          if (v38 + 2 > a3)
          {
            v11 = operator new();
            v12 = "missing struct member type";
            goto LABEL_6;
          }
          v39 = v38[1];
          *a2 = v38 + 2;
          v40 = *(_QWORD *)v9 + 32 * v31;
          *(_BYTE *)(v40 + 16) = v39;
          if (v38 + 6 > a3)
          {
            v11 = operator new();
            v12 = "missing struct member indirect index";
            goto LABEL_6;
          }
          v41 = *(_DWORD *)(v38 + 2);
          *a2 = v38 + 6;
          *(_DWORD *)(v40 + 20) = v41;
          v42 = v38 + 7;
          if (v42 > a3)
          {
            v11 = operator new();
            v12 = "missing struct member garbage";
            goto LABEL_6;
          }
          *a2 = v42;
          llvm::object::MetalLibObjectFile::materializeAdditionalData((uint64_t *)&v94, this, a2, a3, v39);
          v43 = (uint64_t)v94;
          if ((v95 & 1) != 0)
          {
            *(_BYTE *)(a5 + 8) |= 1u;
            *(_QWORD *)a5 = v43;
            goto LABEL_9;
          }
          *(_QWORD *)(*(_QWORD *)v9 + 32 * v31++ + 24) = v94;
          if (v31 == v29)
            goto LABEL_30;
        }
        v11 = operator new();
        v12 = "missing struct member name";
        goto LABEL_6;
      }
LABEL_30:
      v44 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v45 = (unint64_t *)*((_QWORD *)this + 97);
      v46 = *((_QWORD *)this + 98);
      if ((unint64_t)v45 >= v46)
      {
        v47 = (_QWORD *)*((_QWORD *)this + 96);
        v48 = v45 - v47;
        v49 = v48 + 1;
        if (!((unint64_t)(v48 + 1) >> 61))
        {
          v50 = v46 - (_QWORD)v47;
          if (v50 >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (!v51)
          {
            v52 = 0;
            goto LABEL_78;
          }
          if (!(v51 >> 61))
          {
            v52 = (char *)operator new(8 * v51);
LABEL_78:
            v81 = (unint64_t *)&v52[8 * v48];
            v82 = &v52[8 * v51];
            *v81 = v44;
            v68 = v81 + 1;
            if (v45 == v47)
              goto LABEL_87;
            do
            {
              v83 = *--v45;
              *--v81 = v83;
            }
            while (v45 != v47);
            goto LABEL_86;
          }
LABEL_109:
          sub_1C4764EE4();
        }
LABEL_108:
        abort();
      }
      goto LABEL_60;
    }
    v24 = operator new();
    v9 = v24;
    *(_QWORD *)v24 = 0;
    *(_DWORD *)(v24 + 8) = 0;
    v25 = *a2;
    v26 = *a2 + 1;
    if (v26 <= a3)
    {
      v54 = v25 + 5;
      v55 = *v25;
      *a2 = v26;
      *(_BYTE *)v24 = v55;
      if (v25 + 5 <= a3)
      {
        v58 = *(_DWORD *)(v25 + 1);
        *a2 = v54;
        *(_DWORD *)(v24 + 4) = v58;
        v59 = v25 + 6;
        if (v59 <= a3)
        {
          v66 = *v54;
          *a2 = v59;
          *(_BYTE *)(v24 + 8) = v66;
          v44 = v24 & 0xFFFFFFFFFFFFFFFCLL | 1;
          v45 = (unint64_t *)*((_QWORD *)this + 97);
          v67 = *((_QWORD *)this + 98);
          if ((unint64_t)v45 >= v67)
          {
            v75 = (_QWORD *)*((_QWORD *)this + 96);
            v76 = v45 - v75;
            v77 = v76 + 1;
            if (!((unint64_t)(v76 + 1) >> 61))
            {
              v78 = v67 - (_QWORD)v75;
              if (v78 >> 2 > v77)
                v77 = v78 >> 2;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                if (v79 >> 61)
                  goto LABEL_109;
                v80 = (char *)operator new(8 * v79);
              }
              else
              {
                v80 = 0;
              }
              v81 = (unint64_t *)&v80[8 * v76];
              v82 = &v80[8 * v79];
              *v81 = v44;
              v68 = v81 + 1;
              if (v45 == v75)
                goto LABEL_87;
              do
              {
                v84 = *--v45;
                *--v81 = v84;
              }
              while (v45 != v75);
LABEL_86:
              v45 = (unint64_t *)*((_QWORD *)this + 96);
LABEL_87:
              *((_QWORD *)this + 96) = v81;
              *((_QWORD *)this + 97) = v68;
              *((_QWORD *)this + 98) = v82;
              if (v45)
                operator delete(v45);
              goto LABEL_89;
            }
            goto LABEL_108;
          }
LABEL_60:
          *v45 = v44;
          v68 = v45 + 1;
LABEL_89:
          *((_QWORD *)this + 97) = v68;
          *(_BYTE *)(a5 + 8) &= ~1u;
          *(_QWORD *)a5 = v9;
          return;
        }
        v27 = operator new();
        v28 = "missing texture type info";
      }
      else
      {
        v27 = operator new();
        v28 = "missing texture array length";
      }
    }
    else
    {
      v27 = operator new();
      v28 = "missing texture channel type";
    }
    v94 = v28;
    v96 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v61 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v61;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v27;
    v16 = v9;
    v17 = 0x1000C40D7A84E51;
LABEL_57:
    MEMORY[0x1CAA32FC0](v16, v17);
    return;
  }
  v18 = operator new();
  v19 = v18;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  v20 = *a2;
  v21 = *a2 + 1;
  if (v21 > a3)
  {
    v22 = operator new();
    v23 = "missing pointee access";
LABEL_53:
    v94 = v23;
    v96 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v65 = qword_1EF8F7238[0];
    *(_QWORD *)v22 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v22 + 8));
    *(_QWORD *)(v22 + 32) = 3;
    *(_QWORD *)(v22 + 40) = v65;
    *(_BYTE *)(v22 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v22;
    goto LABEL_56;
  }
  v53 = *v20;
  *a2 = v21;
  *(_BYTE *)v18 = v53;
  if (v20 + 2 > a3)
  {
    v22 = operator new();
    v23 = "missing pointee alignment";
    goto LABEL_53;
  }
  v56 = v20[1];
  *a2 = v20 + 2;
  *(_BYTE *)(v18 + 1) = v56;
  v57 = v20 + 10;
  if (v20 + 10 > a3)
  {
    v22 = operator new();
    v23 = "missing pointee size";
    goto LABEL_53;
  }
  v62 = *(_QWORD *)(v20 + 2);
  *a2 = v57;
  *(_QWORD *)(v18 + 8) = v62;
  v63 = v20 + 11;
  if (v63 > a3)
  {
    v22 = operator new();
    v23 = "missing pointee type";
    goto LABEL_53;
  }
  v69 = *v57;
  *a2 = v63;
  *(_BYTE *)(v18 + 16) = v69;
  llvm::object::MetalLibObjectFile::materializeAdditionalData((uint64_t *)&v94, this, a2, a3, v69);
  v70 = (uint64_t)v94;
  if ((v95 & 1) != 0)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v70;
LABEL_56:
    v16 = v19;
    v17 = 0x1060C40A5AF3ED7;
    goto LABEL_57;
  }
  *(_QWORD *)(v19 + 24) = v94;
  v71 = v19 & 0xFFFFFFFFFFFFFFFCLL | 2;
  v72 = (unint64_t *)*((_QWORD *)this + 97);
  v73 = *((_QWORD *)this + 98);
  if ((unint64_t)v72 >= v73)
  {
    v85 = (_QWORD *)*((_QWORD *)this + 96);
    v86 = v72 - v85;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_108;
    v88 = v73 - (_QWORD)v85;
    if (v88 >> 2 > v87)
      v87 = v88 >> 2;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v87;
    if (v89)
    {
      if (v89 >> 61)
        goto LABEL_109;
      v90 = (char *)operator new(8 * v89);
    }
    else
    {
      v90 = 0;
    }
    v91 = (unint64_t *)&v90[8 * v86];
    *v91 = v71;
    v74 = v91 + 1;
    if (v72 != v85)
    {
      do
      {
        v92 = *--v72;
        *--v91 = v92;
      }
      while (v72 != v85);
      v72 = (unint64_t *)*((_QWORD *)this + 96);
    }
    *((_QWORD *)this + 96) = v91;
    *((_QWORD *)this + 97) = v74;
    *((_QWORD *)this + 98) = &v90[8 * v89];
    if (v72)
      operator delete(v72);
  }
  else
  {
    *v72 = v71;
    v74 = v72 + 1;
  }
  *((_QWORD *)this + 97) = v74;
  *(_BYTE *)(a5 + 8) &= ~1u;
  v93 = v95;
  *(_QWORD *)a5 = v19;
  if ((v93 & 1) != 0 && v94)
    (*(void (**)(const char *))(*(_QWORD *)v94 + 8))(v94);
}

void sub_1C5A01C50(uint64_t *a1, uint64_t **this, unsigned int a3, uint64_t *a4, uint64_t *a5, _DWORD **a6, _DWORD **a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD v53[4];
  __int16 v54;

  v52 = a3;
  v16 = a3;
  v17 = *a4;
  v18 = *(_QWORD *)(*a4 + 8 * a3);
  if (!v18)
  {
    llvm::object::MetalLibObjectFile::materializeFunctionNo((llvm::object::MetalLibObjectFile *)this, a3, a1);
    if (*a1)
      return;
    v17 = *a4;
    v18 = *(_QWORD *)(*a4 + 8 * v16);
  }
  v19 = a4[1] - v17;
  if ((v19 & 0x7FFFFFFF8) != 0)
  {
    v20 = (v19 >> 3);
    v21 = *a6;
    v22 = v16;
    while (!*(_QWORD *)v17 || !v22 || *v21 == -1 || *(_QWORD *)(*(_QWORD *)v17 + 64) != *(_QWORD *)(v18 + 64))
    {
      --v22;
      ++v21;
      v17 += 8;
      if (!--v20)
        goto LABEL_9;
    }
    (*a6)[v16] = *v21;
    goto LABEL_27;
  }
LABEL_9:
  v23 = *a5;
  v24 = a5[1] - *a5;
  if ((v24 & 0x7FFFFFFF8) != 0)
  {
    v25 = *a7;
    v26 = (v24 >> 3);
    while (!*(_QWORD *)v23 || *v25 == -1 || *(_QWORD *)(*(_QWORD *)v23 + 56) != *(_QWORD *)(v18 + 64))
    {
      ++v25;
      v23 += 8;
      if (!--v26)
        goto LABEL_15;
    }
    (*a6)[v16] = *v25;
    sub_1C5A032EC((uint64_t)a8, (char *)(*a8 + 4 * *v25), (char *)&v52);
LABEL_27:
    *a1 = 0;
    return;
  }
LABEL_15:
  v27 = this[2];
  v28 = this[3];
  v29 = this[17];
  if (v28 < v29)
    v29 = this[3];
  v30 = (_DWORD *)((char *)v29 + (_QWORD)v27 + *(_QWORD *)(v18 + 64));
  v31 = (unint64_t)v28 + (_QWORD)v27;
  v32 = operator new();
  v33 = v32;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  v51 = v32;
  if ((unint64_t)(v30 + 1) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode wrapper magic";
LABEL_36:
    v53[0] = v35;
    v54 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v40 = qword_1EF8F7238[0];
    *(_QWORD *)v34 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v53, (_QWORD *)(v34 + 8));
    *(_QWORD *)(v34 + 32) = 3;
    *(_QWORD *)(v34 + 40) = v40;
    *(_BYTE *)(v34 + 48) = 1;
    *a1 = v34;
LABEL_39:
    MEMORY[0x1CAA32FC0](v33, 0x1050C4015692547);
    return;
  }
  *(_DWORD *)v32 = *v30;
  if ((unint64_t)(v30 + 2) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode wrapper version";
    goto LABEL_36;
  }
  *(_DWORD *)(v32 + 4) = v30[1];
  if ((unint64_t)(v30 + 3) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode offset";
    goto LABEL_36;
  }
  v36 = v30[2];
  *(_DWORD *)(v32 + 8) = v36;
  if ((unint64_t)(v30 + 4) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode size";
    goto LABEL_36;
  }
  v37 = v30[3];
  *(_DWORD *)(v32 + 12) = v37;
  if (((v31 - (_QWORD)v30) & 0xFFFFFFF0) == 0 || v37 + v36 > v31 - (unint64_t)v30)
  {
    v34 = operator new();
    v35 = "corrupted bitcode";
    goto LABEL_36;
  }
  v41 = (v36 + v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  if ((unint64_t)v30 + v41 > v31)
  {
    v34 = operator new();
    v35 = "missing tail padding";
    goto LABEL_36;
  }
  *(_QWORD *)(v32 + 16) = v30;
  *(_QWORD *)(v32 + 24) = v41;
  v42 = (uint64_t)this[50];
  v43 = (uint64_t)this[51] - v42;
  if (v43)
  {
    v44 = v43 >> 3;
    do
    {
      v45 = v44 >> 1;
      v46 = (uint64_t *)(v42 + 8 * (v44 >> 1));
      v48 = *v46;
      v47 = v46 + 1;
      v44 += ~(v44 >> 1);
      if ((unint64_t)v30 > *(_QWORD *)(v48 + 16))
        v42 = (uint64_t)v47;
      else
        v44 = v45;
    }
    while (v44);
  }
  v49 = (char *)sub_1C5A03500(this + 50, v42, &v51) - (char *)this[50];
  (*a6)[v52] = (unint64_t)v49 >> 3;
  sub_1C5A032EC((uint64_t)a8, (char *)(*a8 + (v49 >> 1)), (char *)&v52);
  v50 = *a9 + (v49 >> 1);
  LODWORD(v53[0]) = -1;
  sub_1C5A0372C(a9, v50, v53);
  *a1 = 0;
  v33 = v51;
  if (v51)
    goto LABEL_39;
}

void sub_1C5A020A8(uint64_t *a1, uint64_t **this, unsigned int a3, uint64_t *a4, uint64_t *a5, _DWORD **a6, _DWORD **a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD v53[4];
  __int16 v54;

  v52 = a3;
  v16 = a3;
  v17 = *a4;
  v18 = *(_QWORD *)(*a4 + 8 * a3);
  if (!v18)
  {
    llvm::object::MetalLibObjectFile::materializeVariableNo((llvm::object::MetalLibObjectFile *)this, a3, a1);
    if (*a1)
      return;
    v17 = *a4;
    v18 = *(_QWORD *)(*a4 + 8 * v16);
  }
  v19 = a4[1] - v17;
  if ((v19 & 0x7FFFFFFF8) != 0)
  {
    v20 = (v19 >> 3);
    v21 = *a6;
    v22 = v16;
    while (!*(_QWORD *)v17 || !v22 || *v21 == -1 || *(_QWORD *)(*(_QWORD *)v17 + 56) != *(_QWORD *)(v18 + 56))
    {
      --v22;
      ++v21;
      v17 += 8;
      if (!--v20)
        goto LABEL_9;
    }
    (*a6)[v16] = *v21;
    goto LABEL_27;
  }
LABEL_9:
  v23 = *a5;
  v24 = a5[1] - *a5;
  if ((v24 & 0x7FFFFFFF8) != 0)
  {
    v25 = *a7;
    v26 = (v24 >> 3);
    while (!*(_QWORD *)v23 || *v25 == -1 || *(_QWORD *)(*(_QWORD *)v23 + 64) != *(_QWORD *)(v18 + 56))
    {
      ++v25;
      v23 += 8;
      if (!--v26)
        goto LABEL_15;
    }
    (*a6)[v16] = *v25;
    sub_1C5A032EC((uint64_t)a8, (char *)(*a8 + 4 * *v25), (char *)&v52);
LABEL_27:
    *a1 = 0;
    return;
  }
LABEL_15:
  v27 = this[2];
  v28 = this[3];
  v29 = this[17];
  if (v28 < v29)
    v29 = this[3];
  v30 = (_DWORD *)((char *)v29 + (_QWORD)v27 + *(_QWORD *)(v18 + 56));
  v31 = (unint64_t)v28 + (_QWORD)v27;
  v32 = operator new();
  v33 = v32;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  v51 = v32;
  if ((unint64_t)(v30 + 1) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode wrapper magic";
LABEL_36:
    v53[0] = v35;
    v54 = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v40 = qword_1EF8F7238[0];
    *(_QWORD *)v34 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v53, (_QWORD *)(v34 + 8));
    *(_QWORD *)(v34 + 32) = 3;
    *(_QWORD *)(v34 + 40) = v40;
    *(_BYTE *)(v34 + 48) = 1;
    *a1 = v34;
LABEL_39:
    MEMORY[0x1CAA32FC0](v33, 0x1050C4015692547);
    return;
  }
  *(_DWORD *)v32 = *v30;
  if ((unint64_t)(v30 + 2) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode wrapper version";
    goto LABEL_36;
  }
  *(_DWORD *)(v32 + 4) = v30[1];
  if ((unint64_t)(v30 + 3) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode offset";
    goto LABEL_36;
  }
  v36 = v30[2];
  *(_DWORD *)(v32 + 8) = v36;
  if ((unint64_t)(v30 + 4) > v31)
  {
    v34 = operator new();
    v35 = "missing bitcode size";
    goto LABEL_36;
  }
  v37 = v30[3];
  *(_DWORD *)(v32 + 12) = v37;
  if (((v31 - (_QWORD)v30) & 0xFFFFFFF0) == 0 || v37 + v36 > v31 - (unint64_t)v30)
  {
    v34 = operator new();
    v35 = "corrupted bitcode";
    goto LABEL_36;
  }
  v41 = (v36 + v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  if ((unint64_t)v30 + v41 > v31)
  {
    v34 = operator new();
    v35 = "missing tail padding";
    goto LABEL_36;
  }
  *(_QWORD *)(v32 + 16) = v30;
  *(_QWORD *)(v32 + 24) = v41;
  v42 = (uint64_t)this[50];
  v43 = (uint64_t)this[51] - v42;
  if (v43)
  {
    v44 = v43 >> 3;
    do
    {
      v45 = v44 >> 1;
      v46 = (uint64_t *)(v42 + 8 * (v44 >> 1));
      v48 = *v46;
      v47 = v46 + 1;
      v44 += ~(v44 >> 1);
      if ((unint64_t)v30 > *(_QWORD *)(v48 + 16))
        v42 = (uint64_t)v47;
      else
        v44 = v45;
    }
    while (v44);
  }
  v49 = (char *)sub_1C5A03500(this + 50, v42, &v51) - (char *)this[50];
  (*a6)[v52] = (unint64_t)v49 >> 3;
  sub_1C5A032EC((uint64_t)a8, (char *)(*a8 + (v49 >> 1)), (char *)&v52);
  v50 = *a9 + (v49 >> 1);
  LODWORD(v53[0]) = -1;
  sub_1C5A0372C(a9, v50, v53);
  *a1 = 0;
  v33 = v51;
  if (v51)
    goto LABEL_39;
}

uint64_t sub_1C5A02500(uint64_t a1)
{
  uint64_t v1;
  void *__p;
  char v4;
  unsigned int v5;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 432))(&__p);
  v1 = v5;
  if (v4 < 0)
    operator delete(__p);
  return v1;
}

uint64_t sub_1C5A02548(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 24);
    if (v2)
    {
      *(_QWORD *)(v1 + 32) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *sub_1C5A02590(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = result;
  v4 = (_QWORD *)result[1];
  while (v4 != a2)
  {
    v5 = (_QWORD *)*--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      v6 = sub_1C62DA720(result);
      result = (_QWORD *)MEMORY[0x1CAA32FC0](v6, 0x1070C40BAAD8800);
    }
  }
  v3[1] = a2;
  return result;
}

void sub_1C5A025FC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "bad reserved bytes";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A026C4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "bad magic number";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A0278C(uint64_t *a1, _BYTE *a2, unsigned int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v10;
  _BYTE *v11;
  char v12;
  char v13;

  v6 = operator new();
  v7 = 1;
  v13 = 1;
  if (*a2)
  {
    v11 = a2;
    v7 = 3;
  }
  v12 = v7;
  v8 = *a3;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v10 = qword_1EF8F7238[0];
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  *(_BYTE *)(v6 + 48) = 1;
  *a1 = v6;
}

void sub_1C5A02860(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "missing magic number";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A02928(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "missing module list size";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A029F0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "missing public metadata offset";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A02AB8(uint64_t *a1, _BYTE **a2, unsigned int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;

  v6 = operator new();
  v7 = *a2;
  v8 = 1;
  v14 = 1;
  if (*v7)
  {
    v12 = v7;
    v8 = 3;
  }
  v13 = v8;
  v9 = *a3;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = v11;
  *(_BYTE *)(v6 + 48) = 1;
  *a1 = v6;
}

void sub_1C5A02B90(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "bad file type";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A02C58(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "bad platform type";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A02D20(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "missing private metadata offset";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A02DE8(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v8 = "missing private metadata size";
  v9 = 259;
  v5 = *a2;
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v7 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

void sub_1C5A02EB0(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  char **v19;

  v4 = a1[2];
  v5 = a1[1];
  if (a2 > (v4 - v5) >> 3)
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    if ((v4 - v6) >> 2 > v8)
      v8 = (v4 - v6) >> 2;
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61)
        sub_1C4764EE4();
      v10 = (char *)operator new(8 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * (v7 >> 3)];
    v12 = &v10[8 * v9];
    v18 = v12;
    bzero(v11, 8 * a2);
    v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      v14 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        v15 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v5 != v6);
      v14 = *(int64x2_t *)a1;
      v4 = a1[2];
      v13 = (char *)v17.i64[1];
      v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    v17 = v14;
    a1[2] = v12;
    v18 = v4;
    v16 = v14.i64[0];
    sub_1C62DA5B0((uint64_t)&v16);
  }
  else
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
}

void sub_1C5A03000(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  char **v19;

  v4 = a1[2];
  v5 = a1[1];
  if (a2 > (v4 - v5) >> 3)
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    if ((v4 - v6) >> 2 > v8)
      v8 = (v4 - v6) >> 2;
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61)
        sub_1C4764EE4();
      v10 = (char *)operator new(8 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * (v7 >> 3)];
    v12 = &v10[8 * v9];
    v18 = v12;
    bzero(v11, 8 * a2);
    v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      v14 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        v15 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v5 != v6);
      v14 = *(int64x2_t *)a1;
      v4 = a1[2];
      v13 = (char *)v17.i64[1];
      v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    v17 = v14;
    a1[2] = v12;
    v18 = v4;
    v16 = v14.i64[0];
    sub_1C62DA608((uint64_t)&v16);
  }
  else
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
}

void sub_1C5A03150(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  char **v19;

  v4 = a1[2];
  v5 = a1[1];
  if (a2 > (v4 - v5) >> 3)
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    if ((v4 - v6) >> 2 > v8)
      v8 = (v4 - v6) >> 2;
    if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v19 = a1 + 2;
    if (v9)
    {
      if (v9 >> 61)
        sub_1C4764EE4();
      v10 = (char *)operator new(8 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[8 * (v7 >> 3)];
    v12 = &v10[8 * v9];
    v18 = v12;
    bzero(v11, 8 * a2);
    v13 = &v10[8 * a2 + v7];
    v17.i64[1] = (uint64_t)v13;
    if (v5 == v6)
    {
      v14 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        v15 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v5 != v6);
      v14 = *(int64x2_t *)a1;
      v4 = a1[2];
      v13 = (char *)v17.i64[1];
      v12 = v18;
    }
    *a1 = v11;
    a1[1] = v13;
    v17 = v14;
    a1[2] = v12;
    v18 = v4;
    v16 = v14.i64[0];
    sub_1C62DA670((uint64_t)&v16);
  }
  else
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
}

void sub_1C5A032A0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 256))
  {
    v2 = *(void **)(a1 + 208);
    if (v2)
    {
      *(_QWORD *)(a1 + 216) = v2;
      operator delete(v2);
    }
    *(_BYTE *)(a1 + 256) = 0;
  }
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C5A032EC(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int64_t v28;

  v3 = a3;
  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v7 = (uint64_t)&a2[-*(_QWORD *)a1];
  v8 = (char *)(*(_QWORD *)a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v9 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 < v9)
  {
    if (v8 == v5)
    {
      *(_DWORD *)v8 = *(_DWORD *)a3;
      *(_QWORD *)(a1 + 8) = v8 + 4;
    }
    else
    {
      v10 = v8 + 4;
      v11 = v5 - 4;
      v12 = *(_DWORD **)(a1 + 8);
      while (v11 < v5)
      {
        v13 = *(_DWORD *)v11;
        v11 += 4;
        *v12++ = v13;
      }
      *(_QWORD *)(a1 + 8) = v12;
      if (v5 != v10)
        memmove(&v5[-4 * ((v5 - v10) >> 2)], v8, v5 - v10);
      if (v8 <= v3)
        v3 += 4 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
      *(_DWORD *)v8 = *(_DWORD *)v3;
    }
    return v8;
  }
  v14 = ((v5 - v6) >> 2) + 1;
  if (v14 >> 62)
    abort();
  v16 = v9 - (_QWORD)v6;
  if (v16 >> 1 > v14)
    v14 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  if (v17)
  {
    if (v17 >> 62)
      goto LABEL_44;
    v18 = (char *)operator new(4 * v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = v7 >> 2;
  v20 = &v18[4 * (v7 >> 2)];
  v21 = &v18[4 * v17];
  if (v7 >> 2 == v17)
  {
    if (v7 >= 1)
    {
      if (v19 >= -1)
        v22 = v19 + 1;
      else
        v22 = v19 + 2;
      v20 -= 4 * (v22 >> 1);
      goto LABEL_34;
    }
    if (v6 == a2)
      v23 = 1;
    else
      v23 = v7 >> 1;
    if (!(v23 >> 62))
    {
      v20 = (char *)operator new(4 * v23);
      v21 = &v20[4 * v23];
      if (v18)
      {
        operator delete(v18);
        v6 = *(char **)a1;
      }
      goto LABEL_34;
    }
LABEL_44:
    sub_1C4764EE4();
  }
LABEL_34:
  *(_DWORD *)v20 = *(_DWORD *)v3;
  v24 = v20;
  if (v8 != v6)
  {
    v25 = v8;
    v24 = v20;
    do
    {
      v26 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *((_DWORD *)v24 - 1) = v26;
      v24 -= 4;
    }
    while (v25 != v6);
  }
  v27 = *(char **)(a1 + 8);
  v28 = v27 - v8;
  if (v27 != v8)
  {
    memmove(v20 + 4, v8, v27 - v8);
    v6 = *(char **)a1;
  }
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = &v20[v28 + 4];
  *(_QWORD *)(a1 + 16) = v21;
  if (v6)
    operator delete(v6);
  return v20;
}

uint64_t *sub_1C5A03500(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  _QWORD *v42;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 3;
  v9 = (uint64_t *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    v25 = ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v25 >> 61)
      abort();
    v26 = v10 - (_QWORD)v5;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v42 = a1 + 2;
    if (v27)
    {
      if (v27 >> 61)
        sub_1C4764EE4();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v38 = v28;
    v39 = (uint64_t *)&v28[8 * v8];
    v40 = v39;
    v41 = &v28[8 * v27];
    sub_1C62DA780(&v38, a3);
    v23 = v39;
    v29 = *a1;
    v30 = v39;
    if (v9 != *a1)
    {
      v31 = v9;
      v30 = v39;
      do
      {
        v32 = *--v31;
        *v31 = 0;
        *--v30 = v32;
      }
      while (v31 != v29);
    }
    v33 = a1[1];
    v34 = v40;
    if (v9 != v33)
    {
      do
      {
        v35 = *v9;
        *v9++ = 0;
        *v34++ = v35;
      }
      while (v9 != v33);
      v9 = a1[1];
    }
    v36 = *a1;
    *a1 = v30;
    a1[1] = v34;
    v37 = (char *)a1[2];
    a1[2] = (uint64_t *)v41;
    v40 = v9;
    v41 = v37;
    v38 = (char *)v36;
    v39 = v36;
    sub_1C62DA8FC((uint64_t)&v38);
  }
  else
  {
    if (v9 == (uint64_t *)v6)
    {
      v16 = *a3;
      *a3 = 0;
      *v9 = v16;
      a1[1] = v9 + 1;
    }
    else
    {
      v11 = v9 + 1;
      v12 = (uint64_t *)(v6 - 8);
      if (v6 < 8)
      {
        v14 = a1[1];
      }
      else
      {
        v13 = (uint64_t *)(v6 - 8);
        v14 = a1[1];
        do
        {
          v15 = *v13;
          *v13++ = 0;
          *v14++ = v15;
        }
        while ((unint64_t)v13 < v6);
      }
      a1[1] = v14;
      if ((_QWORD *)v6 != v11)
      {
        v17 = 8 * ((uint64_t)(v6 - (_QWORD)v11) >> 3);
        v18 = (uint64_t)&v5[v8 - 1];
        do
        {
          v19 = *(_QWORD *)(v18 + v17);
          *(_QWORD *)(v18 + v17) = 0;
          v20 = *v12;
          *v12 = v19;
          if (v20)
            MEMORY[0x1CAA32FC0](v20, 0x1050C4015692547);
          --v12;
          v17 -= 8;
        }
        while (v17);
      }
      v21 = *a3;
      *a3 = 0;
      v22 = *v9;
      *v9 = v21;
      if (v22)
        MEMORY[0x1CAA32FC0](v22, 0x1050C4015692547);
    }
    return v9;
  }
  return v23;
}

void sub_1C5A0372C(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  void *__dst;
  char *v28;
  _QWORD *v29;

  v6 = (char *)*a1;
  v5 = (char *)a1[1];
  v7 = a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v9 = a1[2];
  if ((unint64_t)v5 >= v9)
  {
    v14 = ((v5 - v6) >> 2) + 1;
    if (v14 >> 62)
      abort();
    v15 = v9 - (_QWORD)v6;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v29 = a1 + 2;
    if (v16)
    {
      if (v16 >> 62)
        sub_1C4764EE4();
      v17 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = v17;
    v26 = &v17[4 * (v7 >> 2)];
    __dst = v26;
    v28 = &v17[4 * v16];
    sub_1C62DA964((uint64_t)&v25, a3);
    v18 = v26;
    v19 = (char *)*a1;
    if (v8 != (char *)*a1)
    {
      v20 = v8;
      do
      {
        v21 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v18 - 1) = v21;
        v18 -= 4;
      }
      while (v20 != v19);
    }
    v22 = (char *)a1[1];
    v23 = (char *)__dst;
    v24 = v22 - v8;
    if (v22 != v8)
    {
      memmove(__dst, v8, v22 - v8);
      v19 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = &v23[v24];
    a1[2] = v28;
    if (v19)
      operator delete(v19);
  }
  else if (v8 == v5)
  {
    *(_DWORD *)v8 = *a3;
    a1[1] = v8 + 4;
  }
  else
  {
    v10 = v8 + 4;
    v11 = v5 - 4;
    v12 = (_DWORD *)a1[1];
    while (v11 < v5)
    {
      v13 = *(_DWORD *)v11;
      v11 += 4;
      *v12++ = v13;
    }
    a1[1] = v12;
    if (v5 != v10)
      memmove(&v5[-4 * ((v5 - v10) >> 2)], v8, v5 - v10);
    *(_DWORD *)v8 = *a3;
  }
}

void sub_1C5A038C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

void llvm::object::MetalValue::asInt(uint64_t **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const std::error_category *v5;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (**v13)(llvm::raw_ostream *__hidden);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  void **p_p;
  void *__p;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(llvm::format_object_base *__hidden);
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  if (a2 >= 0x41)
  {
    v5 = std::generic_category();
    __p = 0;
    v23 = 0;
    v24 = 0;
    v14 = 0;
    v18 = 0;
    v19 = 0;
    v13 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v20 = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v25 = &off_1E8132728;
    v26 = "expecting maximum '64' bits, given '%u'";
    v27 = a2;
    goto LABEL_5;
  }
  if (a2 > (unint64_t)(8 * (_QWORD)this[1]))
  {
    v5 = std::generic_category();
    v7 = 8 * (_QWORD)this[1];
    __p = 0;
    v23 = 0;
    v24 = 0;
    v14 = 0;
    v18 = 0;
    v19 = 0;
    v13 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v20 = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v25 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813F178;
    v26 = "expecting '%u' bits, found '%zu'";
    LODWORD(v27) = a2;
    v28 = v7;
LABEL_5:
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)&v25);
    v8 = p_p;
    v9 = operator new();
    v29 = 260;
    v25 = (uint64_t (**)(llvm::format_object_base *__hidden))v8;
    *(_QWORD *)v9 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v25, (_QWORD *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 22;
    *(_QWORD *)(v9 + 40) = v5;
    *(_BYTE *)(v9 + 48) = 1;
    v13 = off_1E81A6E70;
    if (v20 == 1 && v15)
      MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v9;
    return;
  }
  HIDWORD(v10) = a2;
  LODWORD(v10) = a2 - 8;
  switch((v10 >> 3))
  {
    case 0u:
      v11 = *(char *)*this;
      break;
    case 1u:
      v11 = *(unsigned __int16 *)*this;
      break;
    case 3u:
      v11 = *(unsigned int *)*this;
      break;
    case 7u:
      v11 = **this;
      break;
    default:
      v5 = std::generic_category();
      __p = 0;
      v23 = 0;
      v24 = 0;
      v14 = 0;
      v18 = 0;
      v19 = 0;
      v13 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_p = &__p;
      v20 = 0;
      v16 = 0;
      v17 = 0;
      v15 = 0;
      v25 = &off_1E8132728;
      v26 = "bit size '%u' is not supported";
      v27 = a2;
      goto LABEL_5;
  }
  v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  if (!a2)
    v12 = 0;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_DWORD *)(a3 + 8) = a2;
  *(_QWORD *)a3 = v12 & v11;
}

uint64_t llvm::object::MetalPipelineDescriptions::MetalPipelineDescriptions(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  const std::error_category *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  __int128 v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;

  v5 = *a2;
  v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 22;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_1E818A178;
  if (*(_QWORD *)(a1 + 24) <= 3uLL)
  {
    v6 = std::generic_category();
    v7 = *(_QWORD *)(a1 + 24);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v20 = __p;
    v19 = 0;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v23[0] = &unk_1E813F0D8;
    v23[1] = "expecting '%zu' bytes, found '%zu'";
    v23[2] = 4;
    v23[3] = v7;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
    v8 = v20;
    v9 = operator new();
    v24 = 260;
    v23[0] = v8;
    *(_QWORD *)v9 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 5;
    *(_QWORD *)(v9 + 40) = v6;
    *(_BYTE *)(v9 + 48) = 1;
    v12 = off_1E81A6E70;
    if (v19 == 1 && v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    goto LABEL_7;
  }
  if (!*a3)
  {
    v9 = 0;
LABEL_7:
    *a3 = v9;
  }
  return a1;
}

void sub_1C5A03D6C()
{
  JUMPOUT(0x1CAA32FC0);
}

int *llvm::object::MinidumpFile::getRawStream@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int *result;
  uint64_t v8;
  char v9;

  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned int *)(a1 + 88);
  result = sub_1C4D7501C(v5, v6, a2);
  if ((int *)(v5 + 16 * v6) == result)
  {
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 12 * *((_QWORD *)result + 1) + 4);
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(*(_QWORD *)(a1 + 56) + 12 * *((_QWORD *)result + 1) + 8);
    *(_QWORD *)(a3 + 8) = v8;
    v9 = 1;
  }
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

void llvm::object::MinidumpFile::getString(llvm::object::MinidumpFile *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  __int16 *v12;
  unsigned __int16 *v13;
  _WORD *v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string __p;
  _QWORD v22[4];
  __int16 v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  __int16 v27;
  unsigned int *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  sub_1C5A04050((uint64_t)&v28, *((_QWORD *)this + 2), *((_QWORD *)this + 3), a2);
  v6 = v28;
  if ((v29 & 1) != 0)
  {
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = *v28;
  if ((v7 & 1) != 0)
  {
    v16 = operator new();
    v27 = 261;
    v24 = "String size not even";
    *(_QWORD *)&v25 = 20;
    v17 = 3;
LABEL_19:
    v18 = llvm::object::GenericBinaryError::GenericBinaryError(v16, (llvm::Twine *)&v24, v17);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v18;
    return;
  }
  if (v7 <= 1)
  {
    *(_BYTE *)(a3 + 24) &= ~1u;
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    return;
  }
  v8 = a2 + 4;
  v9 = v7 & 0xFFFFFFFE;
  v10 = v9 + v8;
  if (__CFADD__(v9, v8) || (v10 >= v9 ? (v11 = v10 > *((_QWORD *)this + 3)) : (v11 = 1), v11))
  {
    v16 = operator new();
    v24 = "Unexpected EOF";
    v27 = 259;
    v17 = 4;
    goto LABEL_19;
  }
  v12 = (__int16 *)(*((_QWORD *)this + 2) + v8);
  v24 = &v26;
  v25 = xmmword_1C677F680;
  sub_1C4C080F8(&v24, v7 >> 1, 0);
  v13 = (unsigned __int16 *)v24;
  v14 = v24;
  do
  {
    v15 = *v12++;
    *v14++ = v15;
    v9 -= 2;
  }
  while (v9);
  memset(&__p, 0, sizeof(__p));
  if (llvm::convertUTF16ToUTF8String(v13, 2 * v25, &__p))
  {
    *(_BYTE *)(a3 + 24) &= ~1u;
    *(std::string *)a3 = __p;
  }
  else
  {
    v19 = operator new();
    v23 = 261;
    v22[0] = "String decoding failed";
    v22[1] = 22;
    v20 = llvm::object::GenericBinaryError::GenericBinaryError(v19, (llvm::Twine *)v22, 3u);
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v20;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v24 != &v26)
    free(v24);
}

uint64_t sub_1C5A04050(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  if (a4 > 0xFFFFFFFFFFFFFFFBLL || a4 + 4 > a3)
  {
    v6 = operator new();
    v7 = "Unexpected EOF";
    v8 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v6, (llvm::Twine *)&v7, 4u);
    *(_BYTE *)(a1 + 16) |= 1u;
  }
  else
  {
    result = a2 + a4;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)(a1 + 8) = 1;
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t llvm::object::MinidumpFile::getMemoryInfoList@<X0>(llvm::object::MinidumpFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD v17[4];
  __int16 v18;

  v4 = *((_QWORD *)this + 9);
  v5 = *((unsigned int *)this + 22);
  result = (uint64_t)sub_1C4D7501C(v4, v5, 16);
  if (v4 + 16 * v5 == result)
  {
    v15 = operator new();
    v18 = 261;
    v17[0] = "No such stream";
    v17[1] = 14;
    v16 = 3;
    goto LABEL_13;
  }
  v7 = *((_QWORD *)this + 7) + 12 * *(_QWORD *)(result + 8);
  v8 = *(unsigned int *)(v7 + 4);
  if (v8 < 0x10
    || ((v9 = (unsigned int *)(*((_QWORD *)this + 2) + *(unsigned int *)(v7 + 8)),
         v11 = *v9,
         v10 = v9[1],
         v12 = *((_QWORD *)v9 + 1) * v10,
         v13 = v12 + v11,
         !__CFADD__(v12, v11))
      ? (v14 = 0)
      : (v14 = 1),
        v13 > v8 || (v14 & 1) != 0 || v13 < v12))
  {
    v15 = operator new();
    v17[0] = "Unexpected EOF";
    v18 = 259;
    v16 = 4;
LABEL_13:
    result = llvm::object::GenericBinaryError::GenericBinaryError(v15, (llvm::Twine *)v17, v16);
    *(_BYTE *)(a2 + 48) |= 1u;
    *(_QWORD *)a2 = result;
    return result;
  }
  *(_BYTE *)(a2 + 48) &= ~1u;
  *(_QWORD *)a2 = (char *)v9 + v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v10;
  return result;
}

uint64_t llvm::object::MinidumpFile::getDataSlice@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  const char *v9;
  __int16 v10;

  v6 = a4 + a3;
  if (__CFADD__(a4, a3) || v6 < a4 || v6 > a2)
  {
    v8 = operator new();
    v9 = "Unexpected EOF";
    v10 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v8, (llvm::Twine *)&v9, 4u);
    *(_BYTE *)(a5 + 16) |= 1u;
  }
  else
  {
    result = a1 + a3;
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)(a5 + 8) = a4;
  }
  *(_QWORD *)a5 = result;
  return result;
}

uint64_t llvm::object::MinidumpFile::getListStream<llvm::minidump::Module>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[4];
  __int16 v17;
  unsigned int *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned int *)(a1 + 88);
  v7 = sub_1C4D7501C(v5, v6, a2);
  if ((int *)(v5 + 16 * v6) == v7)
  {
    v14 = operator new();
    v17 = 261;
    v16[0] = "No such stream";
    v16[1] = 14;
    v15 = 3;
LABEL_9:
    result = llvm::object::GenericBinaryError::GenericBinaryError(v14, (llvm::Twine *)v16, v15);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a1 + 56) + 12 * *((_QWORD *)v7 + 1);
  v9 = *(unsigned int *)(v8 + 4);
  v10 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(v8 + 8);
  sub_1C5A04050((uint64_t)&v18, v10, v9, 0);
  result = (uint64_t)v18;
  if ((v19 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 16) |= 1u;
    goto LABEL_11;
  }
  v12 = *v18;
  v13 = 4;
  if (108 * (unint64_t)v12 + 4 < v9)
    v13 = 8;
  if (v13 + 108 * (unint64_t)v12 > v9)
  {
    v14 = operator new();
    v16[0] = "Unexpected EOF";
    v17 = 259;
    v15 = 4;
    goto LABEL_9;
  }
  result = v10 + v13;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)(a3 + 8) = v12;
LABEL_11:
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t llvm::object::MinidumpFile::getListStream<llvm::minidump::Thread>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[4];
  __int16 v17;
  unsigned int *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned int *)(a1 + 88);
  v7 = sub_1C4D7501C(v5, v6, a2);
  if ((int *)(v5 + 16 * v6) == v7)
  {
    v14 = operator new();
    v17 = 261;
    v16[0] = "No such stream";
    v16[1] = 14;
    v15 = 3;
LABEL_9:
    result = llvm::object::GenericBinaryError::GenericBinaryError(v14, (llvm::Twine *)v16, v15);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a1 + 56) + 12 * *((_QWORD *)v7 + 1);
  v9 = *(unsigned int *)(v8 + 4);
  v10 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(v8 + 8);
  sub_1C5A04050((uint64_t)&v18, v10, v9, 0);
  result = (uint64_t)v18;
  if ((v19 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 16) |= 1u;
    goto LABEL_11;
  }
  v12 = *v18;
  v13 = 4;
  if (((48 * v12) | 4uLL) < v9)
    v13 = 8;
  if ((v13 & 0xFFFFFFC00000000FLL | (16 * ((3 * v12) & 0x3FFFFFFFFLL))) > v9)
  {
    v14 = operator new();
    v16[0] = "Unexpected EOF";
    v17 = 259;
    v15 = 4;
    goto LABEL_9;
  }
  result = v10 + v13;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)(a3 + 8) = v12;
LABEL_11:
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t llvm::object::MinidumpFile::getListStream<llvm::minidump::MemoryDescriptor>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[4];
  __int16 v17;
  unsigned int *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned int *)(a1 + 88);
  v7 = sub_1C4D7501C(v5, v6, a2);
  if ((int *)(v5 + 16 * v6) == v7)
  {
    v14 = operator new();
    v17 = 261;
    v16[0] = "No such stream";
    v16[1] = 14;
    v15 = 3;
LABEL_9:
    result = llvm::object::GenericBinaryError::GenericBinaryError(v14, (llvm::Twine *)v16, v15);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a1 + 56) + 12 * *((_QWORD *)v7 + 1);
  v9 = *(unsigned int *)(v8 + 4);
  v10 = *(_QWORD *)(a1 + 16) + *(unsigned int *)(v8 + 8);
  sub_1C5A04050((uint64_t)&v18, v10, v9, 0);
  result = (uint64_t)v18;
  if ((v19 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 16) |= 1u;
    goto LABEL_11;
  }
  v12 = *v18;
  v13 = 4;
  if (((16 * v12) | 4uLL) < v9)
    v13 = 8;
  if ((v13 & 0xFFFFFFF00000000FLL | (16 * *v18)) > v9)
  {
    v14 = operator new();
    v16[0] = "Unexpected EOF";
    v17 = 259;
    v15 = 4;
    goto LABEL_9;
  }
  result = v10 + v13;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)(a3 + 8) = v12;
LABEL_11:
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t llvm::object::MinidumpFile::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t result;
  uint64_t v45;
  unsigned int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  const char *v60;
  uint64_t v61;
  __int16 v62;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < 0x20)
    goto LABEL_66;
  v5 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 != 1347241037)
  {
    v45 = operator new();
    v62 = 261;
    v47 = "Invalid signature";
    v48 = 17;
LABEL_69:
    v60 = v47;
    v61 = v48;
    v46 = 3;
    goto LABEL_70;
  }
  if (*((unsigned __int16 *)v5 + 2) != 42899)
  {
    v45 = operator new();
    v62 = 261;
    v47 = "Invalid version";
    v48 = 15;
    goto LABEL_69;
  }
  v7 = v5[2];
  v6 = v5[3];
  if (v6 + 12 * (unint64_t)v7 > v3)
  {
LABEL_66:
    v45 = operator new();
    v60 = "Unexpected EOF";
    v62 = 259;
    v46 = 4;
LABEL_70:
    result = llvm::object::GenericBinaryError::GenericBinaryError(v45, (llvm::Twine *)&v60, v46);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = result;
    return result;
  }
  v8 = (char *)v5 + v6;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if (!(_DWORD)v7)
  {
    v10 = 0;
    v49 = 0;
    v50 = 0;
LABEL_64:
    v56 = v50;
    v42 = operator new();
    v43 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v42 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v42 + 32) = v43;
    v57 = 0;
    v58 = 0;
    *(_DWORD *)(v42 + 8) = 6;
    v59 = 0;
    *(_QWORD *)v42 = &off_1E818A1A0;
    *(_QWORD *)(v42 + 48) = v5;
    *(_QWORD *)(v42 + 56) = v8;
    *(_QWORD *)(v42 + 64) = v7;
    *(_QWORD *)(v42 + 72) = v49;
    *(_QWORD *)(v42 + 80) = v56;
    *(_DWORD *)(v42 + 88) = v10;
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = v42;
    MEMORY[0x1CAA32FB4](0, 8);
    v41 = 0;
    return MEMORY[0x1CAA32FB4](v41, 8);
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (unsigned int *)&v8[12 * v7];
  v14 = (_DWORD *)((char *)v5 + v6);
  while (1)
  {
    v15 = v14[1];
    if (v15 + (unint64_t)v14[2] > v3)
      break;
    v16 = *v14;
    if (*v14)
    {
      if (v16 >= 0xFFFFFFFE)
      {
        v51 = v11;
        v52 = operator new();
        v62 = 261;
        v53 = "Cannot handle one of the minidump streams";
        v54 = 41;
LABEL_61:
        v60 = v53;
        v61 = v54;
        v39 = 3;
        goto LABEL_62;
      }
LABEL_12:
      if (v10)
      {
        v17 = (v10 - 1) & (37 * v16);
        v18 = (unsigned int *)(v11 + 16 * v17);
        v19 = *v18;
        if (v16 == *v18)
        {
LABEL_60:
          v51 = v11;
          v52 = operator new();
          v62 = 261;
          v53 = "Duplicate stream type";
          v54 = 21;
          goto LABEL_61;
        }
        v20 = 0;
        v21 = 1;
        while (v19 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v19 == -2;
          if (v22)
            v20 = v18;
          v23 = v17 + v21++;
          v17 = v23 & (v10 - 1);
          v18 = (unsigned int *)(v11 + 16 * v17);
          v19 = *v18;
          if (v16 == *v18)
            goto LABEL_60;
        }
        if (v20)
          v24 = v20;
        else
          v24 = v18;
      }
      else
      {
        v24 = 0;
      }
      if (4 * v9 + 4 >= 3 * v10)
      {
        v55 = v13;
        sub_1C5255878(&v57, 2 * v10);
        v11 = v57;
        v10 = v59;
        v26 = v59 - 1;
        v27 = (v59 - 1) & (37 * v16);
        v24 = (unsigned int *)(v57 + 16 * v27);
        v28 = *v24;
        if (v16 == *v24)
          goto LABEL_46;
        v29 = 0;
        v30 = 1;
        while (v28 != -1)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == -2;
          if (v31)
            v29 = v24;
          v32 = v27 + v30++;
          v27 = v32 & v26;
          v24 = (unsigned int *)(v57 + 16 * (v32 & v26));
          v28 = *v24;
          if (v16 == *v24)
          {
LABEL_56:
            v25 = v16;
            v13 = v55;
            goto LABEL_27;
          }
        }
      }
      else
      {
        if (v10 + ~v9 - HIDWORD(v58) > v10 >> 3)
          goto LABEL_26;
        v55 = v13;
        sub_1C5255878(&v57, v10);
        v11 = v57;
        v10 = v59;
        v33 = v59 - 1;
        v34 = (v59 - 1) & (37 * v16);
        v24 = (unsigned int *)(v57 + 16 * v34);
        v35 = *v24;
        if (v16 == *v24)
        {
LABEL_46:
          v25 = v16;
          v13 = v55;
          goto LABEL_27;
        }
        v29 = 0;
        v36 = 1;
        while (v35 != -1)
        {
          if (v29)
            v37 = 0;
          else
            v37 = v35 == -2;
          if (v37)
            v29 = v24;
          v38 = v34 + v36++;
          v34 = v38 & v33;
          v24 = (unsigned int *)(v57 + 16 * (v38 & v33));
          v35 = *v24;
          if (v16 == *v24)
            goto LABEL_56;
        }
      }
      if (v29)
        v24 = v29;
      v13 = v55;
LABEL_26:
      v25 = *v24;
LABEL_27:
      v9 = v58 + 1;
      LODWORD(v58) = v58 + 1;
      if (v25 != -1)
        --HIDWORD(v58);
      *v24 = v16;
      *((_QWORD *)v24 + 1) = v12;
      goto LABEL_30;
    }
    if ((_DWORD)v15)
      goto LABEL_12;
LABEL_30:
    v14 += 3;
    ++v12;
    if (v14 == v13)
    {
      v49 = v57;
      v50 = v58;
      goto LABEL_64;
    }
  }
  v51 = v11;
  v52 = operator new();
  v60 = "Unexpected EOF";
  v62 = 259;
  v39 = 4;
LABEL_62:
  v40 = llvm::object::GenericBinaryError::GenericBinaryError(v52, (llvm::Twine *)&v60, v39);
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v40;
  v41 = v51;
  return MEMORY[0x1CAA32FB4](v41, 8);
}

void llvm::ModuleSymbolTable::addModule(llvm::ModuleSymbolTable *this, llvm::Module *a2)
{
  char *v3;
  char *v4;
  char *v5;
  llvm::ModuleSymbolTable **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::ModuleSymbolTable *v25;
  char *v26;
  llvm::ModuleSymbolTable **v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char **v34;

  if (!*(_QWORD *)this)
    *(_QWORD *)this = a2;
  v3 = (char *)a2 + 24;
  v4 = (char *)*((_QWORD *)a2 + 4);
  v5 = (char *)a2 + 8;
  v6 = (llvm::ModuleSymbolTable **)*((_QWORD *)a2 + 2);
  v7 = (char *)a2 + 40;
  v8 = (char *)*((_QWORD *)a2 + 6);
  v9 = (char *)a2 + 56;
  v10 = (char *)*((_QWORD *)a2 + 8);
  v26 = v4;
  v27 = v6;
  v28 = v8;
  v29 = v10;
  v30 = (char *)a2 + 24;
  v31 = (char *)a2 + 8;
  v32 = (char *)a2 + 40;
  v33 = (char *)a2 + 56;
  while (v4 != v3
       || v6 != (llvm::ModuleSymbolTable **)v5
       || v8 != v7
       || v10 != v9
       || v30 != v3
       || v31 != v5
       || v32 != v7
       || v33 != v9)
  {
    v11 = sub_1C52C3168((uint64_t)&v26);
    v12 = v11;
    v14 = (uint64_t *)*((_QWORD *)this + 14);
    v13 = *((_QWORD *)this + 15);
    if ((unint64_t)v14 >= v13)
    {
      v16 = (_QWORD *)*((_QWORD *)this + 13);
      v17 = v14 - v16;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_1C4764EE4();
        v21 = (char *)operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = (uint64_t *)&v21[8 * v17];
      *v22 = v12;
      v15 = v22 + 1;
      if (v14 != v16)
      {
        do
        {
          v23 = *--v14;
          *--v22 = v23;
        }
        while (v14 != v16);
        v14 = (uint64_t *)*((_QWORD *)this + 13);
      }
      *((_QWORD *)this + 13) = v22;
      *((_QWORD *)this + 14) = v15;
      *((_QWORD *)this + 15) = &v21[8 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v14 = v11;
      v15 = v14 + 1;
    }
    *((_QWORD *)this + 14) = v15;
    sub_1C52C300C((uint64_t)&v26);
    v4 = v26;
    v6 = v27;
    v8 = v28;
    v10 = v29;
  }
  v25 = this;
  v26 = (char *)sub_1C5A0575C;
  v27 = &v25;
  v34 = &v26;
  sub_1C5A04E30((uint64_t)a2, (void (*)(uint64_t, std::string *))sub_1C5A05920, (uint64_t)&v34);
}

void sub_1C5A04E30(uint64_t a1, void (*a2)(uint64_t, std::string *), uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t *v10;
  void **v11;
  uint64_t v12;
  uint64_t (*v13)(void **);
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MCStreamer *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  void (*v32)(std::string *);
  _QWORD *MCAsmParser;
  void (*v34)(void);
  uint64_t (*v35)(uint64_t, _QWORD *, uint64_t, _WORD *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  __int16 v41;
  char *v42;
  _OWORD v43[4];
  uint64_t v44;
  _WORD v45[2];
  uint64_t v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  void *v50[2];
  void *v51[2];
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  void *__p[2];
  char v56;
  void *v57[2];
  uint64_t v58;
  std::string __str;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  void **v69[4];
  __int16 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(a1 + 111);
  if (v3 >= 0)
    v4 = a1 + 88;
  else
    v4 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0)
    v5 = v3 & 0x7F;
  else
    v5 = *(_QWORD *)(a1 + 96);
  if (v5)
  {
    v57[0] = 0;
    v57[1] = 0;
    v58 = 0;
    v70 = 260;
    v69[0] = (void **)(a1 + 216);
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v69);
    v9 = llvm::TargetRegistry::lookupTarget((std::string::size_type)__p, (uint64_t)v57);
    v10 = v9;
    if (v56 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (v56 >= 0)
      v12 = v56 & 0x7F;
    else
      v12 = (uint64_t)__p[1];
    v13 = sub_1C511F97C((uint64_t)v9, (uint64_t)v11, v12);
    if (v13)
    {
      v14 = (uint64_t)v13;
      v45[0] = 4096;
      v46 = 2;
      *(_OWORD *)v47 = 0u;
      *(_OWORD *)v48 = 0u;
      v49 = 0u;
      *(_OWORD *)v50 = 0u;
      *(_OWORD *)v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54[0] = 0u;
      if (v56 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (v56 >= 0)
        v16 = v56 & 0x7F;
      else
        v16 = (uint64_t)__p[1];
      v54[1] = 0uLL;
      v17 = sub_1C511F9DC((uint64_t)v10, (uint64_t)v13, (uint64_t)v15, v16, (uint64_t)v45);
      if (v17)
      {
        v18 = (llvm::MCStreamer *)v17;
        if (v56 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if (v56 >= 0)
          v20 = v56 & 0x7F;
        else
          v20 = (uint64_t)__p[1];
        v21 = sub_1C4D72F0C((uint64_t)v10, (uint64_t)v19, v20, (uint64_t)"", 0, (uint64_t)"", 0);
        if (v21)
        {
          v22 = v21;
          v23 = (uint64_t (*)(void))v10[8];
          if (v23)
          {
            v24 = v23();
            if (v24)
            {
              v39 = v24;
              v70 = 261;
              v69[0] = (void **)"";
              v69[1] = 0;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
              v25 = sub_1C5E1F380(24, (const void ****)&__str);
              *(_QWORD *)v25 = &off_1E81A17B0;
              *((_QWORD *)v25 + 1) = v4;
              *((_QWORD *)v25 + 2) = v4 + v5;
              v44 = 0;
              memset(v43, 0, sizeof(v43));
              v42 = v25;
              sub_1C6175188((uint64_t)v43, (uint64_t *)&v42, 0);
              v26 = (uint64_t)v42;
              v42 = 0;
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
              llvm::MCContext::MCContext((uint64_t)v69, (__int128 *)__p, (uint64_t)v18, v14, v22, (uint64_t)v43, 0, 1, 0, 0);
              v27 = sub_1C6175CE4((uint64_t)v10, (llvm::MCContext *)v69, 0, 0);
              *(_QWORD *)(v27 + 848) = llvm::Module::getSDKVersion((llvm::Module *)a1);
              *(_QWORD *)(v27 + 856) = v28;
              v71 = v27;
              llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a1);
              if (v29)
              {
                v41 = 261;
                v40[0] = llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a1);
                v40[1] = v30;
                llvm::Triple::Triple((uint64_t)&__str, (llvm::Twine *)v40);
                v31 = (std::string *)(v27 + 864);
                if (*(_BYTE *)(v27 + 912))
                {
                  std::string::operator=(v31, &__str);
                  *(_OWORD *)(v27 + 888) = v60;
                  *(_QWORD *)(v27 + 904) = v61;
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_1C47EBC30(v31, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v27 + 880) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                  }
                  *(_QWORD *)(v27 + 904) = v61;
                  *(_OWORD *)(v27 + 888) = v60;
                  *(_BYTE *)(v27 + 912) = 1;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
              }
              llvm::MCStreamer::MCStreamer((llvm::MCStreamer *)&__str, (llvm::MCContext *)v69);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E818A3C8;
              v62 = a1;
              v64 = 0;
              v63 = 0;
              v67 = 0;
              v65 = 0x1000000000;
              v66 = 0;
              v68 = 0;
              v32 = (void (*)(std::string *))v10[25];
              if (v32)
                v32(&__str);
              MCAsmParser = (_QWORD *)llvm::createMCAsmParser((llvm *)v43, (llvm::SourceMgr *)v69, (llvm::MCContext *)&__str, v18, 0);
              v34 = (void (*)(void))v10[36];
              if (v34)
                v34();
              v35 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, _WORD *))v10[14];
              if (v35)
              {
                v36 = v35(v22, MCAsmParser, v39, v45);
                if (v36)
                {
                  v37 = v36;
                  (*(void (**)(_QWORD *, _QWORD))(*MCAsmParser + 72))(MCAsmParser, 0);
                  MCAsmParser[1] = v37;
                  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v37 + 16))(v37, MCAsmParser);
                  if (((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*MCAsmParser + 80))(MCAsmParser, 0, 0) & 1) == 0)a2(a3, &__str);
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                }
              }
              (*(void (**)(_QWORD *))(*MCAsmParser + 8))(MCAsmParser);
              sub_1C62DABB0((unsigned int *)&__str);
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              llvm::MCContext::~MCContext((llvm::MCContext *)v69);
              llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v43);
              MEMORY[0x1CAA32FC0](v39, 0x10F0C40CB53E019);
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)v18 + 8))(v18);
      }
      v69[0] = (void **)v54 + 1;
      sub_1C4765410(v69);
      if (SHIBYTE(v52) < 0)
        operator delete(v51[1]);
      if (SHIBYTE(v51[0]) < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v49) < 0)
        operator delete(v48[1]);
      if (SHIBYTE(v48[0]) < 0)
        operator delete(v47[0]);
      v38 = sub_1C61E6B14(v14);
      MEMORY[0x1CAA32FC0](v38, 0x10F0C4031312594);
    }
    if (v56 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v58) < 0)
      operator delete(v57[0]);
  }
}

void llvm::ModuleSymbolTable::printSymbolName(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  char v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  const char *v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;

  v3 = a3;
  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
  {
    v5 = *(_BYTE *)(v4 + 23);
    v6 = v5 < 0;
    v7 = *(const char **)v4;
    if (v5 >= 0)
      v7 = (const char *)v4;
    v8 = v5 & 0x7F;
    if (v6)
      v9 = *(_QWORD *)(v4 + 8);
    else
      v9 = v8;
    llvm::raw_ostream::write(a2, v7, v9);
  }
  else
  {
    if ((*(_DWORD *)(v4 + 32) & 0x300) == 0x100)
    {
      v12 = a1;
      v10 = v4;
      v11 = a2;
      sub_1C4816AD8(a2, "__imp_");
      a1 = v12;
      v4 = v10;
      a2 = v11;
    }
    llvm::Mangler::getNameWithPrefix((llvm::Mangler *)(a1 + 128), a2, (const llvm::GlobalValue *)v4, 0);
  }
}

uint64_t llvm::ModuleSymbolTable::getSymbolFlags(uint64_t a1, uint64_t a2)
{
  uint64_t ***v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t ***v21;
  int v22;
  int v23;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t ****v30;
  uint64_t ***v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t ****v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t ****v41;
  uint64_t v42;
  uint64_t v43[2];
  int v44;

  v2 = (uint64_t ***)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 4) != 0)
    return *((unsigned int *)v2 + 6);
  v3 = *((_DWORD *)v2 + 8);
  v4 = *((unsigned __int8 *)v2 + 16);
  if ((v3 & 0xF) == 1)
  {
    v5 = 1;
  }
  else
  {
    if (*((_BYTE *)v2 + 16))
    {
      if (v4 == 3 && (*((_DWORD *)v2 + 5) & 0x7FFFFFF) == 0)
      {
        v5 = 1;
        v4 = 3;
        goto LABEL_15;
      }
    }
    else if ((v3 & 0x800000) == 0 && v2[9] == (uint64_t **)(v2 + 9))
    {
      v7 = v2 == 0;
      v5 = 1;
      goto LABEL_18;
    }
    if ((v3 & 0x30) == 0x10)
      v5 = ((v3 & 0xFu) - 7 > 1) << 9;
    else
      v5 = 0;
  }
LABEL_15:
  v7 = v2 == 0;
  if (v2 && v4 == 3)
  {
    v7 = 0;
    v5 = v5 & 0xFFFFFBFF | (((_BYTE)v2[10] & 1) << 10);
  }
LABEL_18:
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v8 = sub_1C53D5A28((uint64_t)v2, (uint64_t)v43);
  MEMORY[0x1CAA32FB4](v43[0], 8);
  if (v8 && (*(unsigned __int8 *)(v8 + 16) | 2) == 2)
    v5 |= 0x800u;
  if (*((_BYTE *)v2 + 16) == 1)
    v9 = v5 | 0x20;
  else
    v9 = v5;
  v10 = *((_DWORD *)v2 + 8);
  v11 = v10 & 0xF;
  if (v11 == 8)
    v9 |= 0x80u;
  if ((v11 - 7) >= 2)
    v9 |= 2u;
  if (v11 == 10)
    v6 = v9 | 0x10;
  else
    v6 = v9;
  if ((v10 & 0xE) == 2
    || (v10 & 0xE) == 4
    || llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v2))
  {
    v6 = v6 | 4;
  }
  v12 = v2 >> 4;
  if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
    goto LABEL_48;
  v13 = ***v2;
  v14 = *(_QWORD *)(v13 + 152);
  v15 = *(unsigned int *)(v13 + 168);
  if (!(_DWORD)v15)
    goto LABEL_42;
  LODWORD(v16) = (v15 - 1) & (v12 ^ (v2 >> 9));
  v17 = (uint64_t ****)(v14 + 16 * v16);
  v18 = *v17;
  if (*v17 != v2)
  {
    v19 = 1;
    while (v18 != (uint64_t ***)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(uint64_t ****)(v14 + 16 * v16);
      if (v18 == v2)
      {
        v17 = (uint64_t ****)(v14 + 16 * v16);
        goto LABEL_43;
      }
    }
LABEL_42:
    v17 = (uint64_t ****)(v14 + 16 * v15);
  }
LABEL_43:
  v21 = v17[1];
  if ((unint64_t)*v21 >= 5)
  {
    v22 = *((_DWORD *)v21 + 4);
    v23 = *((unsigned __int8 *)v21 + 20);
    if (v22 == 1836477548 && v23 == 46)
      return v6 | 0x80;
  }
LABEL_48:
  v25 = *((_BYTE *)v2 + 16) != 3 || v7;
  if ((v25 & 1) != 0 || (*((_BYTE *)v2 + 34) & 0x40) == 0)
    return v6;
  v26 = ***v2;
  v43[0] = (uint64_t)v2;
  v27 = *(_DWORD *)(v26 + 2520);
  if (v27)
  {
    v28 = *(_QWORD *)(v26 + 2504);
    v29 = (v27 - 1) & (v12 ^ (v2 >> 9));
    v30 = (uint64_t ****)(v28 + 24 * v29);
    v31 = *v30;
    if (*v30 == v2)
      goto LABEL_55;
    v37 = 0;
    v38 = 1;
    while (v31 != (uint64_t ***)-4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v31 == (uint64_t ***)-8192;
      if (v39)
        v37 = v30;
      v40 = v29 + v38++;
      v29 = v40 & (v27 - 1);
      v30 = (uint64_t ****)(v28 + 24 * v29);
      v31 = *v30;
      if (*v30 == v2)
        goto LABEL_55;
    }
    if (v37)
      v41 = v37;
    else
      v41 = v30;
  }
  else
  {
    v41 = 0;
  }
  v30 = (uint64_t ****)sub_1C53D65B8(v26 + 2504, (uint64_t)v43, v43, v41);
  v42 = v43[0];
  v30[1] = 0;
  v30[2] = 0;
  *v30 = (uint64_t ***)v42;
LABEL_55:
  if (v30[2] == (uint64_t ***)13)
  {
    v32 = (unint64_t *)v30[1];
    v33 = 0x6C6C766D2E6D6574;
    v34 = bswap64(*v32);
    if (v34 == 0x6C6C766D2E6D6574
      && (v33 = 0x6D65746164617461, v34 = bswap64(*(unint64_t *)((char *)v32 + 5)), v34 == 0x6D65746164617461))
    {
      v35 = 0;
    }
    else if (v34 < v33)
    {
      v35 = -1;
    }
    else
    {
      v35 = 1;
    }
    if (v35)
      return v6;
    else
      return v6 | 0x80;
  }
  return v6;
}

void sub_1C5A0575C(_QWORD *a1, const void *a2, size_t a3, int a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 __dst;
  unint64_t v26;

  v7 = (_QWORD *)*a1;
  v8 = sub_1C484358C(*a1 + 8, 32, 3);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_28;
  v9 = v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v26 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v26) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  *(_QWORD *)(v9 + 16) = v26;
  *(_OWORD *)v9 = __dst;
  v26 = 0;
  __dst = 0uLL;
  *(_DWORD *)(v9 + 24) = a4;
  v13 = v9 | 4;
  v15 = (uint64_t *)v7[14];
  v14 = v7[15];
  if ((unint64_t)v15 < v14)
  {
    *v15 = v13;
    v16 = v15 + 1;
    goto LABEL_26;
  }
  v17 = (_QWORD *)v7[13];
  v18 = v15 - v17;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 61)
LABEL_28:
    abort();
  v20 = v14 - (_QWORD)v17;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 61)
      sub_1C4764EE4();
    v22 = (char *)operator new(8 * v21);
  }
  else
  {
    v22 = 0;
  }
  v23 = (uint64_t *)&v22[8 * v18];
  *v23 = v13;
  v16 = v23 + 1;
  if (v15 != v17)
  {
    do
    {
      v24 = *--v15;
      *--v23 = v24;
    }
    while (v15 != v17);
    v15 = (uint64_t *)v7[13];
  }
  v7[13] = v23;
  v7[14] = v16;
  v7[15] = &v22[8 * v21];
  if (v15)
    operator delete(v15);
LABEL_26:
  v7[14] = v16;
  if (SHIBYTE(v26) < 0)
    operator delete((void *)__dst);
}

uint64_t sub_1C5A05920(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = llvm::RecordStreamer::flushSymverDirectives((llvm::RecordStreamer *)a2);
  v5 = *(_QWORD *)(a2 + 280);
  v6 = *(unsigned int *)(a2 + 288);
  if ((_DWORD)v6)
  {
    for (i = *(uint64_t **)(a2 + 280); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a2 + 280);
  }
  v9 = (uint64_t *)(v5 + 8 * v6);
  if (i != v9)
  {
    v10 = *i;
    do
    {
      v11 = *(_DWORD *)(v10 + 8) - 1;
      if (v11 > 5)
        v12 = 2048;
      else
        v12 = dword_1C8667A28[v11];
      result = (**(uint64_t (***)(_QWORD, uint64_t, _QWORD, uint64_t))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8), v10 + 16, *(_QWORD *)v10, v12);
      do
      {
        v13 = i[1];
        ++i;
        v10 = v13;
        if (v13)
          v14 = v10 == -8;
        else
          v14 = 1;
      }
      while (v14);
    }
    while (i != v9);
  }
  return result;
}

uint64_t sub_1C5A059DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a2 + 320))
  {
    v2 = result;
    v3 = *(unsigned int *)(a2 + 328);
    if ((_DWORD)v3)
    {
      v4 = 32 * v3;
      for (i = *(_QWORD **)(a2 + 312); (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 4)
      {
        v4 -= 32;
        if (!v4)
          return result;
      }
    }
    else
    {
      i = *(_QWORD **)(a2 + 312);
    }
    v6 = *(_QWORD *)(a2 + 312) + 32 * v3;
LABEL_9:
    if (i != (_QWORD *)v6)
    {
      v7 = (uint64_t *)i[1];
      v8 = (uint64_t *)i[2];
      while (v7 != v8)
      {
        if ((*(_BYTE *)*i & 4) != 0)
        {
          v11 = *(uint64_t **)(*i - 8);
          v12 = *v11;
          v9 = v11 + 2;
          v10 = v12;
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        v13 = *v7;
        v14 = v7[1];
        v7 += 2;
        result = (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))v2)(*(_QWORD *)(*(_QWORD *)v2 + 8), v9, v10, v13, v14);
      }
      while (1)
      {
        i += 4;
        if (i == (_QWORD *)v6)
          break;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_9;
      }
    }
  }
  return result;
}

char *LLVMCreateBinary(_QWORD *a1, uint64_t a2, char **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  char *v9;
  int v10;
  void *v11;
  std::string *v12;
  char *v13;
  std::string v14;
  _QWORD v15[4];
  char *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = a1[2] - v4;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v15[0] = v4;
  v15[1] = v5;
  v15[2] = v6;
  v15[3] = v7;
  llvm::object::createBinary((uint64_t)v15);
  if ((v17 & 1) == 0)
    return v16;
  v9 = v16;
  v16 = 0;
  v13 = v9;
  sub_1C61D2548(&v13, &v14);
  v10 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  v11 = (void *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v14;
  else
    v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
  *a3 = strdup((const char *)v12);
  if (v10 < 0)
    operator delete(v11);
  if (v13)
    (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  result = v16;
  v16 = 0;
  if (result)
  {
    (*(void (**)(char *))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

char *LLVMBinaryCopyMemoryBuffer(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  _QWORD v6[4];
  __int16 v7;
  const void ***v8;

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v7 = 261;
  v6[0] = v3;
  v6[1] = v4;
  v8 = (const void ***)v6;
  result = sub_1C5E1F380(24, &v8);
  *(_QWORD *)result = &off_1E81A17B0;
  *((_QWORD *)result + 1) = v1;
  *((_QWORD *)result + 2) = v1 + v2;
  return result;
}

uint64_t LLVMDisposeBinary(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t LLVMBinaryGetType(uint64_t a1)
{
  return dword_1C8667A40[*(int *)(a1 + 8)];
}

std::string::size_type LLVMMachOUniversalBinaryCopyObjectForArch(uint64_t a1, const void *a2, size_t a3, char **a4)
{
  std::string::size_type result;
  int v6;
  void *v7;
  std::string *v8;
  char *v9;
  std::string v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOUniversalBinary::getMachOObjectForArch(a1, a2, a3, (uint64_t)&v10);
  result = v10.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__s.__data_[8] & 1) != 0)
  {
    v9 = (char *)v10.__r_.__value_.__r.__words[0];
    sub_1C61D2548(&v9, &v10);
    v6 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
    v7 = (void *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    *a4 = strdup((const char *)v8);
    if (v6 < 0)
      operator delete(v7);
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    return 0;
  }
  return result;
}

_QWORD *LLVMObjectFileCopySectionIterator(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  v4 = v3;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  if (v4 == v6 && v2 == v5)
    return 0;
  result = (_QWORD *)operator new();
  *result = v2;
  result[1] = v4;
  return result;
}

BOOL LLVMObjectFileIsSectionIteratorAtEnd(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  return a2[1] == v4 && *a2 == v3;
}

_QWORD *LLVMObjectFileCopySymbolIterator(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v4 = v3;
  if (v2 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
    return 0;
  result = (_QWORD *)operator new();
  *result = v2;
  result[1] = v4;
  return result;
}

BOOL LLVMObjectFileIsSymbolIteratorAtEnd(uint64_t a1, _QWORD *a2)
{
  return *a2 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

_QWORD *LLVMCreateObjectFile(_QWORD *a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  _QWORD *result;
  char *v7;
  char *v8[4];
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (char *)a1[1];
  v3 = (char *)(a1[2] - (_QWORD)v2);
  v4 = (char *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v8[0] = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v8, 0);
  if ((v11 & 1) != 0)
  {
    v9 = v10;
    v10 = 0;
    sub_1C4D62BD4(&v9, v8);
    if (v9)
      (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    v7 = v10;
    v10 = 0;
    if (v7)
      (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
    (*(void (**)(_QWORD *))(*a1 + 8))(a1);
    return 0;
  }
  else
  {
    result = (_QWORD *)operator new();
    *result = v10;
    result[1] = a1;
  }
  return result;
}

uint64_t *LLVMDisposeObjectFile(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = result[1];
    v1[1] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *v1;
    *v1 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *LLVMGetSections(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 344))(*a1);
  v3 = v2;
  result = (_QWORD *)operator new();
  *result = v1;
  result[1] = v3;
  return result;
}

uint64_t LLVMDisposeSectionIterator(uint64_t result)
{
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

BOOL LLVMIsSectionIteratorAtEnd(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 352))(*a1);
  return a2[1] == v4 && *a2 == v3;
}

uint64_t LLVMMoveToNextSection(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a1);
}

double LLVMMoveToContainingSection(_OWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  _QWORD *v5;
  __int16 v6;
  _BYTE v7[32];
  __int16 v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD v19[3];
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 120))(&v20, *(_QWORD *)(a2 + 8), *(_QWORD *)a2);
  if ((v21 & 1) != 0)
  {
    memset(v19, 0, sizeof(v19));
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v18 = v19;
    v17 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v4 = v20;
    *(_QWORD *)&v20 = 0;
    v9 = v4;
    v10 = &unk_1E81A7208;
    v8 = 257;
    llvm::logAllUnhandledErrors(&v9, (llvm::raw_ostream *)&v10, (uint64_t)v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v6 = 260;
    v5 = v18;
    llvm::report_fatal_error((uint64_t)&v5, 1);
  }
  result = *(double *)&v20;
  *a1 = v20;
  return result;
}

_QWORD *LLVMGetSymbols(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
  v3 = v2;
  result = (_QWORD *)operator new();
  *result = v1;
  result[1] = v3;
  return result;
}

uint64_t LLVMDisposeSymbolIterator(uint64_t result)
{
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

BOOL LLVMIsSymbolIteratorAtEnd(_QWORD *a1, _QWORD *a2)
{
  return *a2 == (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1);
}

uint64_t LLVMMoveToNextSymbol(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1);
}

uint64_t LLVMGetSectionName(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 136))(&v3, *(_QWORD *)(a1 + 8), *(_QWORD *)a1);
  if ((v4 & 1) != 0)
  {
    v2 = v3;
    v3 = 0;
    llvm::report_fatal_error(&v2);
  }
  return v3;
}

uint64_t LLVMGetSectionSize(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
}

uint64_t LLVMGetSectionContents(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(&v3, *(_QWORD *)(a1 + 8), *(_QWORD *)a1);
  result = v3;
  if ((v4 & 1) != 0)
  {
    v2 = v3;
    llvm::report_fatal_error(&v2);
  }
  return result;
}

uint64_t LLVMGetSectionAddress(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
}

uint64_t LLVMGetSectionContainsSymbol(_QWORD *a1, uint64_t *a2)
{
  return llvm::object::SectionRef::containsSymbol(a1, *a2, a2[1]);
}

_QWORD *LLVMGetRelocations(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
  v3 = v2;
  result = (_QWORD *)operator new();
  *result = v1;
  result[1] = v3;
  return result;
}

uint64_t LLVMDisposeRelocationIterator(uint64_t result)
{
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

BOOL LLVMIsRelocationIteratorAtEnd(uint64_t a1, _QWORD *a2)
{
  return *a2 == (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
}

uint64_t LLVMMoveToNextRelocation(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 288))(*(_QWORD *)(a1 + 8), a1);
}

uint64_t LLVMGetSymbolName(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 v4;
  _BYTE v5[32];
  __int16 v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 72))(&v18, *(_QWORD *)(a1 + 8), *(_QWORD *)a1);
  if ((v19 & 1) != 0)
  {
    memset(v17, 0, sizeof(v17));
    v9 = 0;
    v13 = 0;
    v14 = 0;
    v16 = v17;
    v15 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v2 = v18;
    v18 = 0;
    v7 = v2;
    v8 = &unk_1E81A7208;
    v6 = 257;
    llvm::logAllUnhandledErrors(&v7, (llvm::raw_ostream *)&v8, (uint64_t)v5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v4 = 260;
    v3 = v16;
    llvm::report_fatal_error((uint64_t)&v3, 1);
  }
  return v18;
}

uint64_t LLVMGetSymbolAddress(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 v4;
  _BYTE v5[32];
  __int16 v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(&v18, *(_QWORD *)(a1 + 8), *(_QWORD *)a1);
  if ((v19 & 1) != 0)
  {
    memset(v17, 0, sizeof(v17));
    v9 = 0;
    v13 = 0;
    v14 = 0;
    v16 = v17;
    v15 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v2 = v18;
    v18 = 0;
    v7 = v2;
    v8 = &unk_1E81A7208;
    v6 = 257;
    llvm::logAllUnhandledErrors(&v7, (llvm::raw_ostream *)&v8, (uint64_t)v5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v4 = 260;
    v3 = v16;
    llvm::report_fatal_error((uint64_t)&v3, 1);
  }
  return v18;
}

uint64_t LLVMGetSymbolSize(uint64_t *a1)
{
  return sub_1C62DABFC(a1[1], *a1);
}

uint64_t LLVMGetRelocationOffset(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 296))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
}

_QWORD *LLVMGetRelocationSymbol(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
  v3 = v2;
  result = (_QWORD *)operator new();
  *result = v1;
  result[1] = v3;
  return result;
}

uint64_t LLVMGetRelocationType(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 312))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1);
}

void *LLVMGetRelocationTypeName(uint64_t a1)
{
  size_t v1;
  void *v2;
  void *__src;
  size_t size;
  uint64_t v6;
  uint64_t v7;

  size = 0;
  v6 = 0;
  __src = &v7;
  (*(void (**)(_QWORD, _QWORD, void **))(**(_QWORD **)(a1 + 8) + 320))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, &__src);
  v1 = size;
  v2 = malloc_type_malloc(size, 0x4065EBACuLL);
  if (!v2 && (v1 || (v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  if (size)
    memmove(v2, __src, size);
  if (__src != &v7)
    free(__src);
  return v2;
}

char *LLVMGetRelocationValueString()
{
  return strdup("");
}

llvm::raw_ostream *llvm::object::operator<<(llvm::raw_ostream *this, _QWORD *a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  _WORD *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  _QWORD v9[2];
  int v10;
  __int16 v11;
  char v12;

  v3 = this;
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 123;
    *(_OWORD *)v4 = *(_OWORD *)"SectionedAddress{";
    *((_QWORD *)this + 4) += 17;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "SectionedAddress{", 0x11uLL);
  }
  v9[0] = *a2;
  v9[1] = 0;
  v10 = 10;
  v11 = 1;
  v12 = 1;
  llvm::raw_ostream::operator<<(this, (uint64_t)v9);
  if (a2[1] != -1)
  {
    v5 = (_WORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v5 > 1uLL)
    {
      *v5 = 8236;
      *((_QWORD *)v3 + 4) += 2;
      v6 = v3;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v3, ", ", 2uLL);
    }
    sub_1C5E21910(v6, a2[1], 0, 0, 0);
  }
  v7 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v7)
    return llvm::raw_ostream::write(v3, "}", 1uLL);
  *v7 = 125;
  ++*((_QWORD *)v3 + 4);
  return v3;
}

__n128 llvm::object::ObjectFile::ObjectFile(uint64_t a1, int a2, __int128 *a3)
{
  __n128 result;
  __int128 v4;

  v4 = *a3;
  result = (__n128)a3[1];
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)a1 = off_1E818A1C8;
  return result;
}

uint64_t llvm::object::SectionRef::containsSymbol(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a3 + 120))(v8, a3);
  if ((v9 & 1) != 0)
  {
    v5 = (char *)v8[0];
    v8[0] = 0;
    v6 = v5;
    sub_1C4D62BD4(&v6, &v7);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
    if ((v9 & 1) != 0)
    {
      result = v8[0];
      v8[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else if (a1[1] == v8[1])
  {
    return *a1 == v8[0];
  }
  return 0;
}

double llvm::object::ObjectFile::makeTriple@<D0>(llvm::object::ObjectFile *this@<X0>, llvm::Triple *a2@<X8>)
{
  uint64_t v4;
  int v5;
  char *ArchName;
  uint64_t v7;
  double result;
  int v9;
  char *OSTypeName;
  uint64_t v11;
  const char *v12;
  __int16 v13;

  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 376))(this);
  v5 = v4;
  ArchName = llvm::Triple::getArchName(v4, v4, 0);
  llvm::Triple::setArchName(a2, ArchName, v7);
  if ((v5 - 1) <= 1)
    (*(void (**)(llvm::object::ObjectFile *, llvm::Triple *))(*(_QWORD *)this + 400))(this, a2);
  v9 = *((_DWORD *)this + 2);
  if ((v9 & 0xFFFFFFFC) == 0x10)
  {
    llvm::Triple::setObjectFormat(a2, 5);
  }
  else if (v9 == 9)
  {
    if ((*(unsigned int (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 376))(this) == 39)
    {
      v12 = "thumbv7-windows";
      v13 = 259;
      return llvm::Triple::setTriple((uint64_t)a2, (llvm::Twine *)&v12);
    }
  }
  else if ((v9 & 0xFFFFFFFE) == 0xA)
  {
    OSTypeName = llvm::Triple::getOSTypeName((llvm::Triple *)0x15);
    llvm::Triple::setOSName(a2, (uint64_t)OSTypeName, v11);
    llvm::Triple::setObjectFormat(a2, 9);
  }
  return result;
}

void llvm::object::ObjectFile::createObjectFile(uint64_t a1, int a2)
{
  if (!a2)
    a2 = llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  __asm { BR              X10 }
}

uint64_t sub_1C5A06B54()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t result;
  _OWORD v5[11];

  v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  result = llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v5, 0, 0, v2 - 96);
  *(_BYTE *)(v0 + 8) = *(_BYTE *)(v0 + 8) & 0xFE | *(_BYTE *)(v2 - 88) & 1;
  *(_QWORD *)v0 = *(_QWORD *)(v2 - 96);
  return result;
}

void llvm::object::ObjectFile::createObjectFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = 261;
  v13 = a1;
  v14 = a2;
  sub_1C5E1F6CC((unsigned __int8 *)&v13, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v20);
  if ((v21 & 1) != 0)
  {
    v4 = (_QWORD *)v20[0];
    if (LODWORD(v20[0]))
    {
      v5 = v20[1];
      v6 = (_QWORD *)operator new();
      *v6 = &off_1E81A0D28;
      v6[1] = v4;
      v6[2] = v5;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v6;
      return;
    }
  }
  else
  {
    std::system_category();
    v4 = (_QWORD *)v20[0];
  }
  v7 = v4[1];
  v8 = v4[2] - v7;
  v9 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = v10;
  llvm::object::ObjectFile::createObjectFile((uint64_t)&v13, 0);
  v11 = v18;
  if ((v19 & 1) != 0)
  {
    v12 = *(_BYTE *)(a3 + 16);
    if (v18)
    {
      *(_BYTE *)(a3 + 16) = v12 | 1;
      *(_QWORD *)a3 = v11;
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      *(_BYTE *)(a3 + 16) = v12 & 0xFE;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v4;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v4;
  }
}

uint64_t llvm::object::ObjectFile::isReflectionSectionStrippable(uint64_t a1, unsigned int a2)
{
  return (a2 < 6) & (0x23u >> a2);
}

uint64_t *llvm::OffloadBinary::create@<X0>(const char **a1@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  unint64_t v6;
  uint64_t *result;
  uint64_t v8;
  char v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;

  if ((unint64_t)a1[1] > 0x47 && (v4 = *a1, *(_DWORD *)*a1 == -1391395056))
  {
    v10 = &v4[*((_QWORD *)v4 + 2)];
    result = (uint64_t *)operator new();
    v8 = (uint64_t)result;
    v11 = *a1;
    *result = 0;
    result[1] = 0;
    result[2] = 0x1800000000;
    result[4] = (uint64_t)v11;
    result[5] = (uint64_t)v4;
    result[6] = (uint64_t)v10;
    v12 = *((_QWORD *)v10 + 2);
    if (v12)
    {
      v13 = &v11[*((_QWORD *)v10 + 1) + 8];
      do
      {
        v14 = (char *)&v11[*((_QWORD *)v13 - 1)];
        v15 = strlen(v14);
        v16 = *(_QWORD *)v13;
        v13 += 16;
        v17 = strlen(&v11[v16]);
        result = (uint64_t *)sub_1C62DAFD0(v8, (unsigned __int8 *)v14, v15);
        v18 = *result;
        *(_QWORD *)(v18 + 8) = &v11[v16];
        *(_QWORD *)(v18 + 16) = v17;
        --v12;
      }
      while (v12);
    }
    v9 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v6 = qword_1EF8F7238[0];
    result = (uint64_t *)operator new();
    v8 = (uint64_t)result;
    *result = (uint64_t)&off_1E81A0D28;
    result[1] = 3;
    result[2] = v6;
    v9 = *(_BYTE *)(a2 + 8) | 1;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = v8;
  return result;
}

uint64_t llvm::OffloadBinary::write@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _OWORD *v19;
  char *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t **j;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  BOOL v36;
  const void *v37;
  size_t v38;
  int v39;
  int v40;
  const void *v41;
  size_t v42;
  uint64_t v43;
  _OWORD v45[2];
  __int16 v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  int v51;
  uint64_t v52;
  char v53[16];
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[2];
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  __int128 v64;
  _BYTE v65[1024];
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  v61 = 0x100000000;
  v62 = 0;
  v60 = 1;
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t ***)(a1 + 8); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(a1 + 8);
  }
  v6 = *(_QWORD *)(a1 + 8) + 8 * v4;
  if (i != (uint64_t **)v6)
  {
    v7 = *i;
    do
    {
      v8 = *v7;
      v9 = sub_1C5E3DF4C(v7 + 3, (uint64_t)v7 + *v7 + 24);
      llvm::StringTableBuilder::add((uint64_t)v58, (uint64_t)(v7 + 3), v8 | ((unint64_t)v9 << 32));
      v10 = (_QWORD *)v7[1];
      v11 = v7[2];
      v12 = sub_1C5E3DF4C(v10, (uint64_t)v10 + v11);
      llvm::StringTableBuilder::add((uint64_t)v58, (uint64_t)v10, v11 | ((unint64_t)v12 << 32));
      do
      {
        v13 = i[1];
        ++i;
        v7 = v13;
        if (v13)
          v14 = v7 + 1 == 0;
        else
          v14 = 1;
      }
      while (v14);
    }
    while (i != (uint64_t **)v6);
  }
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)v58, 1);
  v15 = *(unsigned int *)(a1 + 20);
  *(_QWORD *)&v56 = 0x1AD10FF10;
  v16 = 16 * v15 + 72;
  v17 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)&v56 + 1) = (v17 + v60 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = xmmword_1C8667AD0;
  v18 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)v53 = *(_DWORD *)a1;
  *(_DWORD *)&v53[4] = v18;
  *(_QWORD *)&v53[8] = 72;
  *(_QWORD *)&v54 = v15;
  *((_QWORD *)&v54 + 1) = v60 + v16;
  v55 = v17;
  v63 = v65;
  v64 = xmmword_1C86520E0;
  sub_1C613932C((uint64_t)v47, (uint64_t)&v63);
  v19 = v50;
  if ((unint64_t)(v49 - (_QWORD)v50) > 0x1F)
  {
    v22 = v57;
    *v50 = v56;
    v19[1] = v22;
    v20 = (char *)(v50 + 2);
    v50 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v47, (const char *)&v56, 0x20uLL);
    v20 = (char *)v50;
  }
  if ((unint64_t)(v49 - (_QWORD)v20) > 0x27)
  {
    v23 = *(_OWORD *)v53;
    v24 = v54;
    *((_QWORD *)v20 + 4) = v55;
    *(_OWORD *)v20 = v23;
    *((_OWORD *)v20 + 1) = v24;
    v50 = (_OWORD *)((char *)v50 + 40);
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v47, v53, 0x28uLL);
  }
  v25 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v25)
  {
    for (j = *(uint64_t ***)(a1 + 8); !*j || *j + 1 == 0; ++j)
      ;
  }
  else
  {
    j = *(uint64_t ***)(a1 + 8);
  }
  v28 = *(_QWORD *)(a1 + 8) + 8 * v25;
  if (j != (uint64_t **)v28)
  {
    v29 = *j;
    do
    {
      v45[0] = 0uLL;
      v30 = *v29;
      v31 = sub_1C5E3DF4C(v29 + 3, (uint64_t)v29 + *v29 + 24);
      *(_QWORD *)&v45[0] = llvm::StringTableBuilder::getOffset((uint64_t)v58, (uint64_t)(v29 + 3), v30 | ((unint64_t)v31 << 32))+ v16;
      v32 = (_QWORD *)v29[1];
      v33 = v29[2];
      v34 = sub_1C5E3DF4C(v32, (uint64_t)v32 + v33);
      *((_QWORD *)&v45[0] + 1) = llvm::StringTableBuilder::getOffset((uint64_t)v58, (uint64_t)v32, v33 | ((unint64_t)v34 << 32))+ v16;
      if ((unint64_t)(v49 - (_QWORD)v50) > 0xF)
        *v50++ = v45[0];
      else
        llvm::raw_ostream::write((llvm::raw_ostream *)v47, (const char *)v45, 0x10uLL);
      do
      {
        v35 = j[1];
        ++j;
        v29 = v35;
        if (v35)
          v36 = v29 + 1 == 0;
        else
          v36 = 1;
      }
      while (v36);
    }
    while (j != (uint64_t **)v28);
  }
  llvm::StringTableBuilder::write((llvm::StringTableBuilder *)v58, (llvm::raw_ostream *)v47);
  v37 = *(const void **)(a1 + 40);
  v38 = *(_QWORD *)(a1 + 48);
  if (v38 <= v49 - (uint64_t)v50)
  {
    if (v38)
    {
      memcpy(v50, v37, v38);
      v50 = (_OWORD *)((char *)v50 + v38);
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v47, (const char *)v37, v38);
  }
  v39 = DWORD2(v56);
  v40 = (*(uint64_t (**)(_QWORD *))(v47[0] + 80))(v47);
  llvm::raw_ostream::write_zeros((llvm::raw_ostream *)v47, v39 - (_DWORD)v50 - v40 + v48);
  v41 = *(const void **)v52;
  v42 = *(_QWORD *)(v52 + 8);
  v46 = 257;
  sub_1C5E1F4D0(v41, v42, (uint64_t)v45, (uint64_t)&v66);
  if ((v67 & 1) != 0)
    v43 = 0;
  else
    v43 = v66;
  *a2 = v43;
  v47[0] = off_1E81A6E70;
  if (v51 == 1 && v48)
    MEMORY[0x1CAA32F9C](v48, 0x1000C8077774924);
  if (v63 != v65)
    free(v63);
  return MEMORY[0x1CAA32FB4](v58[0], 8);
}

uint64_t llvm::getOffloadKind(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 3:
      if (*a1 ^ 0x6968 | *((unsigned __int8 *)a1 + 2) ^ 0x70)
        v2 = 0;
      else
        v2 = 65539;
      break;
    case 4:
      if (*(_DWORD *)a1 == 1633973603)
        v2 = 65538;
      else
        v2 = 0;
      break;
    case 6:
      if (*(_DWORD *)a1 ^ 0x6E65706F | a1[2] ^ 0x706D)
        v2 = 0;
      else
        v2 = 65537;
      break;
    default:
      v2 = 0;
      break;
  }
  if (v2 <= 0x10000)
    LOWORD(v2) = 0;
  return (unsigned __int16)v2;
}

const char *llvm::getOffloadKindName(int a1)
{
  if ((a1 - 1) > 2)
    return "none";
  else
    return off_1E818A378[(__int16)(a1 - 1)];
}

uint64_t llvm::getImageKind(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = 0;
  switch(a2)
  {
    case 1:
      v3 = *a1;
      if (v3 == 115)
        v4 = 65541;
      else
        v4 = 0;
      if (v3 == 111)
        v2 = 65537;
      else
        v2 = v4;
      break;
    case 2:
      if (*(_WORD *)a1 == 25442)
        v2 = 65538;
      else
        v2 = 0;
      break;
    case 5:
      v5 = *(_DWORD *)a1 ^ 0x69627563 | a1[4] ^ 0x6E;
      v6 = 65539;
      goto LABEL_13;
    case 6:
      v5 = *(_DWORD *)a1 ^ 0x62746166 | *((unsigned __int16 *)a1 + 2) ^ 0x6E69;
      v6 = 65540;
LABEL_13:
      if (v5)
        v2 = 0;
      else
        v2 = v6;
      break;
    default:
      break;
  }
  if (v2 <= 0x10000)
    LOWORD(v2) = 0;
  return (unsigned __int16)v2;
}

const char *llvm::getImageKindName(int a1)
{
  if ((a1 - 1) > 4)
    return "";
  else
    return off_1E818A390[(__int16)(a1 - 1)];
}

llvm::MCStreamer *llvm::RecordStreamer::RecordStreamer(llvm::RecordStreamer *this, llvm::MCContext *a2, const llvm::Module *a3)
{
  llvm::MCStreamer *result;

  result = llvm::MCStreamer::MCStreamer(this, a2);
  *(_QWORD *)result = off_1E818A3C8;
  *((_QWORD *)result + 34) = a3;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 36) = 0;
  *((_QWORD *)result + 37) = 0x1000000000;
  *((_QWORD *)result + 39) = 0;
  *((_QWORD *)result + 40) = 0;
  *((_DWORD *)result + 82) = 0;
  return result;
}

{
  llvm::MCStreamer *result;

  result = llvm::MCStreamer::MCStreamer(this, a2);
  *(_QWORD *)result = off_1E818A3C8;
  *((_QWORD *)result + 34) = a3;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 36) = 0;
  *((_QWORD *)result + 37) = 0x1000000000;
  *((_QWORD *)result + 39) = 0;
  *((_QWORD *)result + 40) = 0;
  *((_DWORD *)result + 82) = 0;
  return result;
}

uint64_t llvm::RecordStreamer::symverAliases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD **)(this + 312);
  v3 = *(unsigned int *)(this + 328);
  v4 = &v2[4 * v3];
  if (*(_DWORD *)(this + 320))
  {
    if ((_DWORD)v3)
    {
      v5 = 32 * v3;
      while ((*v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v2 += 4;
        v5 -= 32;
        if (!v5)
          goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    v2 = v4;
  }
  *a2 = v2;
  a2[1] = v4;
  a2[2] = v4;
  a2[3] = v4;
  return this;
}

uint64_t llvm::RecordStreamer::flushSymverDirectives(llvm::RecordStreamer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const llvm::GlobalValue *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v35;
  int SymbolState;
  int v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  size_t v47;
  int v48;
  size_t *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  const llvm::MCSymbol *Symbol;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  _BYTE *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  const char *v85;
  _BOOL4 v86;
  _QWORD v87[4];
  __int16 v88;
  __int128 v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD v98[2];
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[24];
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  __int128 v110;
  _QWORD v111[11];

  v111[8] = *MEMORY[0x1E0C80C00];
  v100 = 0;
  v101 = 0;
  v102 = 0x1000000000;
  v98[0] = 0;
  v98[1] = 0;
  v99 = 0;
  v109 = (unsigned __int8 *)v111;
  v110 = xmmword_1C64638C0;
  v2 = (_QWORD *)*((_QWORD *)this + 34);
  v3 = v2 + 3;
  v4 = (_QWORD *)v2[4];
  v5 = v2 + 1;
  v6 = (_QWORD *)v2[2];
  v7 = v2 + 5;
  v8 = (_QWORD *)v2[6];
  v9 = v2 + 7;
  v10 = (_QWORD *)v2[8];
  v90 = v4;
  v91 = v6;
  v92 = v8;
  v93 = (unint64_t)v10;
  v94 = v3;
  v95 = v5;
  v96 = v7;
  v97 = v9;
  while (v4 != v3 || v6 != v5 || v8 != v7 || v10 != v9 || v94 != v3 || v95 != v5 || v96 != v7 || v97 != v9)
  {
    v11 = 0;
    v108 = 0;
    v104 = 0;
    v106 = 0;
    *(_QWORD *)&v103[8] = 0;
    *(_QWORD *)v103 = sub_1C5A07F7C;
    *(_QWORD *)&v103[16] = sub_1C5A07F98;
    v105 = sub_1C5A07FB4;
    v107 = sub_1C5A07FD0;
    do
    {
      v12 = *(uint64_t (**)(_QWORD *))&v103[v11];
      v13 = *(_QWORD *)&v103[v11 + 8];
      v14 = (_QWORD **)((char *)&v90 + (v13 >> 1));
      if ((v13 & 1) != 0)
        v12 = *(uint64_t (**)(_QWORD *))(*v14 + v12);
      v15 = v12(v14);
      v16 = (const llvm::GlobalValue *)v15;
      if (v15)
        break;
      v60 = v11 == 48;
      v11 += 16;
    }
    while (!v60);
    if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
    {
      *(_QWORD *)&v110 = 0;
      v21 = ***(_QWORD ***)v15;
      v22 = *(_QWORD *)(v21 + 152);
      v23 = *(unsigned int *)(v21 + 168);
      if (!(_DWORD)v23)
        goto LABEL_30;
      LODWORD(v24) = (v23 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      v25 = (uint64_t *)(v22 + 16 * v24);
      v26 = *v25;
      if (*v25 != v15)
      {
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v23 - 1);
          v26 = *(_QWORD *)(v22 + 16 * v24);
          if (v26 == v15)
          {
            v25 = (uint64_t *)(v22 + 16 * v24);
            goto LABEL_31;
          }
        }
LABEL_30:
        v25 = (uint64_t *)(v22 + 16 * v23);
      }
LABEL_31:
      v29 = *(_QWORD *)v25[1] + 1;
      if (*((_QWORD *)&v110 + 1) < v29)
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v109, v111, v29, 1);
      sub_1C613932C((uint64_t)v103, (uint64_t)&v109);
      llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v98, (llvm::raw_ostream *)v103, v16, 0);
      *(_QWORD *)v103 = off_1E81A6E70;
      if ((_DWORD)v108 == 1 && *(_QWORD *)&v103[16])
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v103[16], 0x1000C8077774924);
      (*sub_1C6136E50((uint64_t)&v100, v109, v110))[1] = (size_t)v16;
    }
    v17 = 0;
    v108 = 0;
    v104 = 0;
    v106 = 0;
    *(_QWORD *)&v103[8] = 0;
    *(_QWORD *)v103 = sub_1C5A07EEC;
    *(_QWORD *)&v103[16] = sub_1C5A07F10;
    v105 = sub_1C5A07F34;
    v107 = sub_1C5A07F58;
    do
    {
      v18 = *(uint64_t (**)(_QWORD *))&v103[v17];
      v19 = *(_QWORD *)&v103[v17 + 8];
      v20 = (_QWORD **)((char *)&v90 + (v19 >> 1));
      if ((v19 & 1) != 0)
        v18 = *(uint64_t (**)(_QWORD *))(*v20 + v18);
      if ((v18(v20) & 1) != 0)
        break;
      v60 = v17 == 48;
      v17 += 16;
    }
    while (!v60);
    v4 = v90;
    v6 = v91;
    v8 = v92;
    v10 = (_QWORD *)v93;
  }
  v30 = *((_QWORD *)this + 39);
  v31 = *((unsigned int *)this + 82);
  if (*((_DWORD *)this + 80))
  {
    if ((_DWORD)v31)
    {
      v33 = 32 * v31;
      v32 = *((_QWORD *)this + 39);
      while ((*(_QWORD *)v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v32 += 32;
        v33 -= 32;
        if (!v33)
          goto LABEL_43;
      }
    }
    else
    {
      v32 = *((_QWORD *)this + 39);
    }
  }
  else
  {
LABEL_43:
    v32 = v30 + 32 * v31;
  }
  v81 = v30 + 32 * v31;
  if (v32 != v81)
  {
    v80 = v30 + 32 * v31;
    do
    {
      v35 = *(_BYTE **)v32;
      SymbolState = llvm::RecordStreamer::getSymbolState(this, *(const llvm::MCSymbol **)v32);
      v37 = SymbolState - 1;
      if ((SymbolState - 1) < 6 && ((0x2Du >> v37) & 1) != 0)
      {
        v38 = dword_1C8667B44[v37];
        if ((SymbolState - 2) < 3)
          goto LABEL_88;
        v86 = 0;
        v39 = 0;
      }
      else
      {
        v38 = 0;
        v86 = (SymbolState - 2) < 3;
        v39 = 1;
      }
      if ((*v35 & 4) != 0)
      {
        v42 = (_QWORD *)*((_QWORD *)v35 - 1);
        v43 = *v42;
        v40 = (unsigned __int8 *)(v42 + 2);
        v41 = v43;
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      v44 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 34) + 112), v40, v41);
      if (v44)
      {
LABEL_79:
        if (v39)
        {
          if ((*(_DWORD *)(v44 + 32) & 0xF) != 0)
          {
            if ((*(_DWORD *)(v44 + 32) & 0xFu) - 7 >= 2)
            {
              if ((*(_DWORD *)(v44 + 32) & 0xFu) - 2 > 8)
                v38 = 0;
              else
                v38 = dword_1C8667B5C[(*(_DWORD *)(v44 + 32) & 0xF) - 2];
            }
            else
            {
              v38 = 16;
            }
          }
          else
          {
            v38 = 9;
          }
        }
        if (v86)
        {
LABEL_88:
          v57 = 1;
LABEL_101:
          v86 = v57;
          goto LABEL_102;
        }
        v58 = *(_DWORD *)(v44 + 32);
        if ((v58 & 0xF) == 1)
        {
          v59 = 1;
LABEL_100:
          v57 = v59 ^ 1;
          goto LABEL_101;
        }
        if (*(_BYTE *)(v44 + 16))
        {
          if (*(_BYTE *)(v44 + 16) == 3)
          {
            v60 = (*(_DWORD *)(v44 + 20) & 0x7FFFFFF) == 0;
            goto LABEL_96;
          }
        }
        else if (*(_QWORD *)(v44 + 72) == v44 + 72)
        {
          v60 = (v58 & 0x800000) == 0;
LABEL_96:
          v59 = v60;
          goto LABEL_100;
        }
        v59 = 0;
        goto LABEL_100;
      }
      v76 = v39;
      v79 = v38;
      v78 = v35;
      if ((*v35 & 4) != 0)
      {
        v45 = v101;
        if (!(_DWORD)v101)
          goto LABEL_102;
        v49 = (size_t *)*((_QWORD *)v35 - 1);
        v47 = *v49;
        v46 = (unsigned __int8 *)(v49 + 2);
        if (*v49)
        {
          v50 = 0;
          v48 = 0;
          do
            v48 = 33 * v48 + v46[v50++];
          while (v47 != v50);
          v83 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v45 = v101;
        if (!(_DWORD)v101)
          goto LABEL_102;
        v46 = 0;
        v47 = 0;
      }
      v48 = 0;
      v83 = 1;
LABEL_67:
      v51 = v45 - 1;
      v52 = v100;
      v77 = v45;
      v84 = v100 + 8 * v45 + 8;
      v82 = HIDWORD(v102);
      v53 = 1;
      v54 = v48;
      while (1)
      {
        v55 = v54 & v51;
        v56 = *(_QWORD **)(v52 + 8 * v55);
        if (v56 != (_QWORD *)-8)
        {
          if (!v56)
          {
            v38 = v79;
            v35 = v78;
            goto LABEL_102;
          }
          if (*(_DWORD *)(v84 + 4 * v55) == v48
            && v47 == *v56
            && ((v83 & 1) != 0 || !memcmp(v46, (char *)v56 + v82, v47)))
          {
            break;
          }
        }
        v54 = v53 + v55;
        ++v53;
      }
      v35 = v78;
      if ((_DWORD)v55 == -1 || (int)v55 == v77)
      {
        v38 = v79;
        goto LABEL_102;
      }
      v44 = *(_QWORD *)(*(_QWORD *)(v52 + 8 * (int)v55) + 8);
      v38 = v79;
      v39 = v76;
      if (v44)
        goto LABEL_79;
LABEL_102:
      v62 = *(__int128 **)(v32 + 8);
      v61 = *(__int128 **)(v32 + 16);
      if (v62 != v61)
      {
        v64 = "@";
        if (v86)
          v64 = "@@";
        v85 = v64;
        v65 = v38;
        do
        {
          v89 = *v62;
          v66 = llvm::StringRef::find((uint64_t *)&v89, "@@@", 3uLL, 0);
          if (v66 == -1)
          {
            *(_QWORD *)v103 = &v104;
            *(_OWORD *)&v103[8] = xmmword_1C85F20B0;
            v67 = (_QWORD *)*((_QWORD *)&v89 + 1);
            v68 = (_QWORD *)v89;
          }
          else
          {
            v67 = (_QWORD *)*((_QWORD *)&v89 + 1);
            v68 = (_QWORD *)v89;
            if (*((_QWORD *)&v89 + 1) >= v66)
              v69 = v66;
            else
              v69 = *((_QWORD *)&v89 + 1);
            if (*((_QWORD *)&v89 + 1) >= v66 + 3)
              v70 = v66 + 3;
            else
              v70 = *((_QWORD *)&v89 + 1);
            *(_QWORD *)v103 = &v104;
            *(_OWORD *)&v103[8] = xmmword_1C85F20B0;
            if (*((_QWORD *)&v89 + 1) > v66 + 3 && *(_BYTE *)(v89 + v70) != 64)
            {
              v88 = 773;
              v87[0] = v89;
              v87[1] = v69;
              v87[2] = v85;
              v90 = v87;
              v92 = (_QWORD *)(v89 + v70);
              v93 = *((_QWORD *)&v89 + 1) - v70;
              LOWORD(v94) = 1282;
              llvm::Twine::toVector((uint64_t)&v90, (uint64_t)v103);
              v67 = *(_QWORD **)&v103[8];
              v68 = *(_QWORD **)v103;
              v89 = *(_OWORD *)v103;
            }
          }
          v71 = *((_QWORD *)this + 1);
          LOWORD(v94) = 261;
          v90 = v68;
          v91 = v67;
          Symbol = (const llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v71, (uint64_t)&v90);
          v73 = *((_QWORD *)this + 1);
          v74 = sub_1C484358C(v73 + 192, 24, 3);
          v75 = *(unsigned __int8 *)(*(_QWORD *)(v73 + 152) + 18) << 16;
          *(_BYTE *)v74 = 2;
          *(_DWORD *)(v74 + 1) = v75 | (*(unsigned __int8 *)(v74 + 4) << 24);
          *(_QWORD *)(v74 + 8) = 0;
          *(_QWORD *)(v74 + 16) = v35;
          if (v86)
            llvm::RecordStreamer::markDefined(this, Symbol);
          llvm::MCStreamer::emitAssignment(this, Symbol, (const llvm::MCExpr **)v74);
          if ((_DWORD)v65)
            (*(void (**)(llvm::RecordStreamer *, const llvm::MCSymbol *, uint64_t))(*(_QWORD *)this + 304))(this, Symbol, v65);
          if (*(uint64_t **)v103 != &v104)
            free(*(void **)v103);
          ++v62;
        }
        while (v62 != v61);
      }
      v63 = v32 + 32;
      v32 = v80;
      if (v63 != v80)
      {
        v32 = v63;
        while ((*(_QWORD *)v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v32 += 32;
          if (v32 == v80)
          {
            v32 = v80;
            break;
          }
        }
      }
    }
    while (v32 != v81);
  }
  if (v109 != (unsigned __int8 *)v111)
    free(v109);
  MEMORY[0x1CAA32FB4](v98[0], 8);
  return sub_1C61A8A20((uint64_t)&v100);
}

BOOL sub_1C5A07EEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C5A07F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C5A07F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C5A07F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  if (v1 != v2)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

uint64_t sub_1C5A07F7C(_QWORD *a1)
{
  if (*a1 == a1[4] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t sub_1C5A07F98(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 40) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t sub_1C5A07FB4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == *(_QWORD *)(a1 + 48) || v1 == 0)
    return 0;
  else
    return v1 - 48;
}

uint64_t sub_1C5A07FD0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 == *(_QWORD *)(a1 + 56) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

BOOL (*llvm::object::getRelocationResolver(_DWORD *a1))(uint64_t a1)
{
  int v2;
  int v3;
  BOOL (*result)(uint64_t);
  unsigned int v5;
  int v6;
  int v7;

  v2 = a1[2];
  if (v2 == 9)
  {
    v3 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 376))(a1);
    if (v3 <= 38)
    {
      if (v3 != 1)
      {
        if (v3 == 3)
          return sub_1C5A083D0;
        return 0;
      }
    }
    else if (v3 != 39)
    {
      if (v3 == 42)
        return sub_1C5A0837C;
      if (v3 == 41)
        return sub_1C5A083A0;
      return 0;
    }
    return sub_1C5A083B8;
  }
  v5 = v2 & 0xFFFFFFFC;
  if (v5 == 16)
  {
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 376))(a1) == 42)
      return sub_1C5A08858;
    else
      return 0;
  }
  else if (v5 == 12)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 360))(a1);
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 376))(a1);
    if (v6 == 8)
    {
      if (v7 <= 17)
      {
        if ((v7 - 3) < 2)
          return (BOOL (*)(uint64_t))sub_1C5A08464;
        if ((v7 - 8) < 2)
          return sub_1C5A084D8;
        return 0;
      }
      switch(v7)
      {
        case 18:
        case 19:
          result = (BOOL (*)(uint64_t))sub_1C5A084FC;
          break;
        case 20:
        case 21:
        case 22:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 31:
        case 33:
        case 35:
          return 0;
        case 23:
        case 24:
          result = (BOOL (*)(uint64_t))sub_1C5A08564;
          break;
        case 30:
          result = sub_1C5A08604;
          break;
        case 32:
          return (BOOL (*)(uint64_t))sub_1C5A0861C;
        case 34:
          result = (BOOL (*)(uint64_t))sub_1C5A085D8;
          break;
        case 36:
          result = sub_1C5A085B4;
          break;
        default:
          if (v7 != 42)
            return 0;
          result = (BOOL (*)(uint64_t))sub_1C5A083F4;
          break;
      }
    }
    else
    {
      if (v7 > 30)
      {
        if (v7 > 40)
        {
          if (v7 == 41)
            return (BOOL (*)(uint64_t))sub_1C5A08714;
          if (v7 == 62)
            return sub_1C5A087BC;
        }
        else
        {
          if (v7 == 31)
            return (BOOL (*)(uint64_t))sub_1C5A0861C;
          if (v7 == 33)
            return sub_1C5A08818;
        }
        return 0;
      }
      switch(v7)
      {
        case 1:
        case 2:
          result = sub_1C5A08768;
          break;
        case 7:
          result = sub_1C5A08790;
          break;
        case 12:
          result = sub_1C5A08844;
          break;
        case 16:
        case 17:
          result = sub_1C5A087D0;
          break;
        case 20:
          result = sub_1C5A087EC;
          break;
        case 21:
        case 22:
          result = sub_1C5A08744;
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 376))(a1) == 63)
  {
    return (BOOL (*)(uint64_t))sub_1C5A0886C;
  }
  else if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 376))(a1) == 64)
  {
    return (BOOL (*)(uint64_t))sub_1C5A08890;
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL sub_1C5A0837C(uint64_t a1)
{
  return a1 == 11 || a1 == 1;
}

uint64_t sub_1C5A0838C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 11)
    return (a4 + a3);
  else
    return a4 + a3;
}

BOOL sub_1C5A083A0(uint64_t a1)
{
  return a1 == 11 || a1 == 6;
}

uint64_t sub_1C5A083B0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (a4 + a3);
}

BOOL sub_1C5A083B8(uint64_t a1)
{
  return a1 == 15 || a1 == 1;
}

uint64_t sub_1C5A083C8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (a4 + a3);
}

BOOL sub_1C5A083D0(uint64_t a1)
{
  return a1 == 8 || a1 == 14;
}

uint64_t sub_1C5A083E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 8)
    return (a4 + a3);
  else
    return a4 + a3;
}

uint64_t sub_1C5A083F4(unint64_t a1)
{
  return (a1 < 0x19) & (0x1220C07u >> a1);
}

uint64_t sub_1C5A08410(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(result)
  {
    case 0:
      return a4;
    case 1:
      return a5 + a3;
    case 2:
      return a5 + a3 - a2;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return result;
    case 10:
    case 11:
      return (a5 + a3);
    default:
      if (result == 24)
        return a5 + a3 - a2;
      else
        return a5 + a3;
  }
}

uint64_t sub_1C5A08464(uint64_t a1)
{
  return ((unint64_t)(a1 - 257) < 6) & (0x3Bu >> (a1 - 1));
}

uint64_t sub_1C5A08480(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C5A0849C + 4 * byte_1C8667BB5[a1 - 257]))();
}

uint64_t sub_1C5A0849C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 + a3;
}

uint64_t sub_1C5A084A4(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  return (a5 + a3 - a2);
}

uint64_t sub_1C5A084B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return (a5 + a3);
}

uint64_t sub_1C5A084B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 + a3 - a2;
}

uint64_t sub_1C5A084C4(uint64_t a1, __int16 a2, __int16 a3, uint64_t a4, __int16 a5)
{
  return (unsigned __int16)(a5 + a3 - a2);
}

BOOL sub_1C5A084D8(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

uint64_t sub_1C5A084E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 3)
    return (a4 + a3);
  else
    return a4 + a3;
}

BOOL sub_1C5A084FC(unint64_t a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x29 || ((1 << a1) & 0x20000040004) == 0)
    return a1 == 248;
  return result;
}

uint64_t sub_1C5A08538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a5 + a3;
  v6 = a5 + a3 - 0x8000;
  if (a1 != 41)
    v6 = a5 + a3 - a2;
  if (a1 == 2)
    v5 = (a5 + a3);
  if (a1 <= 40)
    return v5;
  else
    return v6;
}

uint64_t sub_1C5A08564(unint64_t a1)
{
  return (a1 < 0x2D) & (0x104004000002uLL >> a1);
}

uint64_t sub_1C5A08584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a5 + a3;
  if (a1 != 38)
    v5 = a5 + a3 - a2;
  v6 = (a5 + a3);
  if (a1 != 1)
    v6 = (a5 + a3 - a2);
  if (a1 <= 37)
    return v6;
  else
    return v5;
}

BOOL sub_1C5A085B4(uint64_t a1)
{
  return a1 == 4 || a1 == 22;
}

uint64_t sub_1C5A085C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 4)
    return (a5 + a3);
  else
    return a5 + a3;
}

uint64_t sub_1C5A085D8(unint64_t a1)
{
  return (a1 < 0x37) & (0x40000100800008uLL >> a1);
}

uint64_t sub_1C5A085FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 + a3;
}

BOOL sub_1C5A08604(uint64_t a1)
{
  return a1 == 6 || a1 == 3;
}

uint64_t sub_1C5A08614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 + a3;
}

uint64_t sub_1C5A0861C(unint64_t a1)
{
  return (a1 < 0x3A) & (0x23001FE00000007uLL >> a1);
}

uint64_t sub_1C5A0863C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  if (a1 > 32)
    return ((uint64_t (*)(void))((char *)&loc_1C5A08660 + 4 * byte_1C8667BBB[a1 - 33]))();
  v6 = (a5 + a3);
  if (a1 != 1)
    v6 = a5 + a3;
  if (a1)
    return v6;
  else
    return a4;
}

void sub_1C5A08688()
{
  JUMPOUT(0x1C5A08690);
}

unint64_t sub_1C5A08698(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4, char a5)
{
  return a4 & 0xC0 | (unint64_t)((a5 + a3) & 0x3F);
}

uint64_t sub_1C5A086F8(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  return (a5 + a3 - a2);
}

uint64_t sub_1C5A08704(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  return (a4 - (a3 + a5));
}

BOOL sub_1C5A08714(unint64_t a1)
{
  return a1 < 3;
}

uint64_t sub_1C5A08720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a1 == 2)
      a4 += a3 - a2;
    else
      a4 += a3;
  }
  return a4;
}

BOOL sub_1C5A08744(uint64_t a1)
{
  return a1 == 1 || a1 == 26;
}

uint64_t sub_1C5A08754(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  int v5;

  if (a1 == 1)
    v5 = 0;
  else
    v5 = a2;
  return (a3 - v5 + a5);
}

BOOL sub_1C5A08768(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

uint64_t sub_1C5A08778(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int v5;

  if (a1 == 2)
    v5 = 0;
  else
    v5 = a2;
  return (a3 - v5 + a4 + a5);
}

BOOL sub_1C5A08790(uint64_t a1)
{
  return a1 == 4 || a1 == 1;
}

uint64_t sub_1C5A087A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;

  v5 = -1;
  if (a1 == 4)
    v5 = 0xFFFF;
  return (a5 + a3) & v5;
}

BOOL sub_1C5A087BC(uint64_t a1)
{
  return a1 == 4;
}

uint64_t sub_1C5A087C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return (a5 + a3);
}

BOOL sub_1C5A087D0(uint64_t a1)
{
  return a1 == 2 || a1 == 39;
}

uint64_t sub_1C5A087E4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (a4 + a3);
}

BOOL sub_1C5A087EC(uint64_t a1)
{
  return ((a1 - 1) & 0xFFFFFFFFFFFFFFFBLL) == 0;
}

uint64_t sub_1C5A087FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;

  v5 = 0xFFFF;
  if (a1 == 1)
    v5 = -1;
  return (a5 + a3) & v5;
}

BOOL sub_1C5A08818(uint64_t a1)
{
  return a1 == 3 || a1 == 23;
}

uint64_t sub_1C5A08828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 23 || a1 == 3)
    return a5 + a3;
  return a4;
}

BOOL sub_1C5A08844(uint64_t a1)
{
  return a1 == 6;
}

uint64_t sub_1C5A08850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 + a3;
}

BOOL sub_1C5A08858(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_1C5A08864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1C5A0886C(unint64_t a1)
{
  return (a1 < 0x18) & (0x9027FFu >> a1);
}

uint64_t sub_1C5A08888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_1C5A08890(unint64_t a1)
{
  return (a1 < 0x18) & (0xDDE7FFu >> a1);
}

uint64_t sub_1C5A088AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t llvm::object::resolveRelocation(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _DWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v5 = a4;
  v8 = a1;
  v34 = *MEMORY[0x1E0C80C00];
  v9 = (_DWORD *)a2[1];
  if (!v9)
    return a1(0, 0, a3, a4, *a2);
  v10 = v9[2];
  if ((v10 & 0xFFFFFFFC) != 0xC)
    goto LABEL_27;
  switch(v10)
  {
    case 14:
      v11 = sub_1C59CFBD0((uint64_t)v9, *a2);
      goto LABEL_10;
    case 13:
      v13 = sub_1C59CF358((uint64_t)v9, *a2);
      break;
    case 12:
      v11 = sub_1C59CEA6C((uint64_t)v9, *a2);
LABEL_10:
      v14 = *((_DWORD *)v11 + 1);
      goto LABEL_13;
    default:
      v13 = sub_1C59D0474((uint64_t)v9, *a2);
      break;
  }
  v14 = bswap32(*((_DWORD *)v13 + 1));
LABEL_13:
  if (v14 == 4)
  {
    (*(void (**)(_QWORD **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a2[1] + 488))(&v32, a2[1], *a2);
    if ((v33 & 1) == 0 || (v15 = v32, v32 = 0, !v15))
    {
      v26 = 0;
      goto LABEL_35;
    }
    if ((*(unsigned int (**)(_QWORD *, void *))(*v15 + 48))(v15, &llvm::ErrorList::ID))
    {
      v16 = (uint64_t *)v15[1];
      v17 = (uint64_t *)v15[2];
      if (v16 == v17)
      {
        v18 = 0;
      }
      else
      {
        v18 = 0;
        do
        {
          v30 = v18;
          v19 = *v16;
          *v16 = 0;
          v28 = v19;
          sub_1C5A08BAC(&v29, &v28);
          sub_1C6174794(&v30, &v29, &v31);
          v18 = v31;
          v31 = 0;
          if (v29)
            (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
          v20 = v28;
          v28 = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          if (v30)
            (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
          ++v16;
        }
        while (v16 != v17);
      }
      v26 = v18;
      v24 = *(void (**)(void))(*v15 + 8);
    }
    else
    {
      v27 = v15;
      sub_1C5A08BAC(&v26, &v27);
      if (!v27)
        goto LABEL_35;
      v24 = *(void (**)(void))(*v27 + 8);
    }
    v24();
LABEL_35:
    v21 = v32;
    if ((v33 & 1) != 0)
    {
      v32 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    }
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v9 + 376))(v9) != 31
      && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v9 + 376))(v9) != 32)
    {
      v5 = 0;
    }
    goto LABEL_28;
  }
LABEL_27:
  v21 = 0;
LABEL_28:
  v22 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(*(_QWORD *)a2[1] + 312))(a2[1], *a2, a3, a4, a5, v8);
  v23 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a2[1] + 296))(a2[1], *a2);
  return a1(v22, v23, a3, v5, v21);
}

uint64_t sub_1C5A08BAC(_QWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t result;
  _QWORD v6[3];
  _QWORD *v7;
  __int16 v8;

  v4 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  result = *a2;
  *a2 = 0;
  if (v4)
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 24))(v6);
    v8 = 260;
    v7 = v6;
    llvm::report_fatal_error((uint64_t)&v7, 1);
  }
  *a1 = result;
  return result;
}

__n128 llvm::object::SymbolicFile::SymbolicFile(uint64_t a1, int a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 8) = a2;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)a1 = off_1E818A8E0;
  return result;
}

void llvm::object::SymbolicFile::createSymbolicFile(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __n128 *v8;
  __int128 v9;
  const llvm::object::ObjectFile *v10;
  __int128 v11;
  __n128 *v12;
  __int128 v13;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  __n128 *v21;
  _OWORD v22[2];
  _OWORD v23[2];
  _OWORD v24[2];
  _OWORD v25[2];
  char *v26;
  __n128 *v27;
  char v28;
  __n128 v29;
  char v30;
  __n128 *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a2)
    a2 = llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  if (a2 - 3 >= 0x14)
  {
    if (a2 <= 0x25)
    {
      if (((1 << a2) & 0x23B8000000) != 0)
        goto LABEL_6;
      if (a2 == 1 && a3)
      {
        v13 = *(_OWORD *)(a1 + 16);
        v25[0] = *(_OWORD *)a1;
        v25[1] = v13;
        llvm::object::IRObjectFile::create(v25, a3, (uint64_t)&v29);
        goto LABEL_8;
      }
    }
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15 = qword_1EF8F7238[0];
    v16 = operator new();
    *(_QWORD *)v16 = &off_1E81A0D28;
    *(_QWORD *)(v16 + 8) = 2;
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_24;
  }
LABEL_6:
  if (((1 << a2) & 0x23A07FFDE8) != 0)
  {
    v7 = *(_OWORD *)(a1 + 16);
    v24[0] = *(_OWORD *)a1;
    v24[1] = v7;
    llvm::object::ObjectFile::createObjectFile((uint64_t)v24, a2);
LABEL_8:
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v29.n128_u8[8] & 1;
    v8 = (__n128 *)v29.n128_u64[0];
LABEL_9:
    *(_QWORD *)a4 = v8;
    return;
  }
  if (((1 << a2) & 0x8000210) == 0)
  {
    v16 = operator new();
    v18 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v16 + 32) = v18;
    *(_DWORD *)(v16 + 8) = 2;
    *(_QWORD *)v16 = &off_1E818A930;
    v17 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_24:
    *(_BYTE *)(a4 + 8) = v17;
    *(_QWORD *)a4 = v16;
    return;
  }
  v9 = *(_OWORD *)(a1 + 16);
  v23[0] = *(_OWORD *)a1;
  v23[1] = v9;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v23, a2);
  if (!a3 || (v32 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v32 & 1;
    v8 = v31;
    goto LABEL_9;
  }
  llvm::object::IRObjectFile::findBitcodeInObject(v31, v10, &v29);
  if ((v30 & 1) != 0)
  {
    v19 = (char *)v29.n128_u64[0];
    v29.n128_u64[0] = 0;
    v26 = v19;
    sub_1C4D62BD4(&v26, (char **)&v27);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v32 & 1;
    v12 = v31;
    v31 = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a1 + 16);
    v22[0] = v29;
    v22[1] = v11;
    llvm::object::IRObjectFile::create(v22, a3, (uint64_t)&v27);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v28 & 1;
    v12 = v27;
  }
  *(_QWORD *)a4 = v12;
  if ((v30 & 1) != 0)
  {
    v20 = v29.n128_u64[0];
    v29.n128_u64[0] = 0;
    if (v20)
      (*(void (**)(unint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v31;
  v31 = 0;
  if (v21)
    (*(void (**)(__n128 *))(v21->n128_u64[0] + 8))(v21);
}

BOOL llvm::object::SymbolicFile::isSymbolicFile(unsigned int a1, uint64_t a2)
{
  _BOOL8 result;

  result = 1;
  if (a1 - 3 >= 0x14)
  {
    if (a1 <= 0x25)
    {
      if (((1 << a1) & 0x23B8000000) != 0)
        return result;
      if (a1 == 1)
        return a2 != 0;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::object::compareAddress(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = *(_DWORD *)(a2 + 28);
  if (v2 == v3)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v4 == v5;
    if (v4 < v5)
      v7 = -1;
    else
      v7 = 1;
    if (v6)
      return 0;
    else
      return v7;
  }
  else if (v2 < v3)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

void llvm::object::computeSymbolSizes(llvm::object *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;

  v4 = a3;
  v111 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 0xC)
  {
    v5 = (*(uint64_t (**)(llvm::object *, const llvm::object::ObjectFile *))(*(_QWORD *)this + 48))(this, a2);
    v7 = v6;
    v8 = (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 56))(this);
    if (v5 == v8)
    {
      (*(void (**)(__int128 *__return_ptr, llvm::object *))(*(_QWORD *)this + 504))(&v107, this);
      v7 = *((_QWORD *)&v107 + 1);
      v5 = v107;
      v9 = v108;
    }
    else
    {
      v9 = v8;
    }
    *(_QWORD *)&v107 = v5;
    *((_QWORD *)&v107 + 1) = v7;
    if (v5 != v9)
    {
      v17 = 0;
      do
      {
        v18 = *((_QWORD *)&v107 + 1);
        v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)&v107 + 1) + 432))(*((_QWORD *)&v107 + 1), v5);
        v20 = v19;
        v21 = (unint64_t)v4[2];
        if ((unint64_t)v17 >= v21)
        {
          v23 = *v4;
          v24 = 0xAAAAAAAAAAAAAAABLL * (v17 - *v4);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_151;
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v23) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_152;
            v28 = (char *)operator new(24 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[24 * v24];
          *v29 = v5;
          v29[1] = v18;
          v29[2] = v20;
          v30 = v29;
          if (v17 == v23)
          {
            v4 = a3;
          }
          else
          {
            v4 = a3;
            do
            {
              v31 = *(_OWORD *)(v17 - 3);
              *(v30 - 1) = *(v17 - 1);
              *(_OWORD *)(v30 - 3) = v31;
              v30 -= 3;
              v17 -= 3;
            }
            while (v17 != v23);
            v17 = *a3;
          }
          v22 = v29 + 3;
          *v4 = v30;
          v4[1] = v29 + 3;
          v4[2] = (uint64_t *)&v28[24 * v27];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v17 = v5;
          v17[1] = v18;
          v22 = v17 + 3;
          v17[2] = v19;
        }
        v4[1] = v22;
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v107 + 1) + 24))(*((_QWORD *)&v107 + 1), &v107);
        v5 = v107;
        v17 = v22;
      }
      while ((_QWORD)v107 != v9);
    }
  }
  else
  {
    v10 = (*(uint64_t (**)(llvm::object *, const llvm::object::ObjectFile *))(*(_QWORD *)this + 48))(this, a2);
    *(_QWORD *)&v107 = v10;
    *((_QWORD *)&v107 + 1) = v11;
    v12 = (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 56))(this);
    if (v10 == v12)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v32 = v12;
      LODWORD(v16) = 0;
      v15 = 0;
      v14 = 0;
      v13 = 0;
      do
      {
        llvm::object::ObjectFile::getSymbolValue(*((uint64_t *)&v107 + 1), v10, (uint64_t)&v109);
        if ((v110 & 1) != 0)
        {
          v106 = v109;
          llvm::report_fatal_error(&v106);
        }
        v105 = v107;
        v33 = v109;
        v34 = *((_DWORD *)this + 2);
        if ((v34 & 0xFFFFFFFC) == 0x10)
        {
          v35 = ((unsigned __int16)((unint64_t)sub_1C59DA9F0((uint64_t)this, (uint64_t *)v10) >> 32) >> 8)
              - 1;
        }
        else
        {
          if (v34 == 20)
            __asm { BR              X10 }
          if ((v34 & 0xFFFFFFFE) == 0xA)
          {
            v36 = v34 == 11;
            if (v34 == 11)
              v37 = 0;
            else
              v37 = v10;
            if (v36)
              v38 = v10;
            else
              v38 = 0;
            if (!v37)
              v37 = v38;
            v35 = (int)bswap32(*(unsigned __int16 *)(v37 + 12)) >> 16;
          }
          else
          {
            v39 = *((_QWORD *)this + 12);
            if (v39 && v10)
            {
              v40 = *(unsigned __int16 *)(v10 + 12);
              if (v40 >> 8 <= 0xFE)
                v35 = *(unsigned __int16 *)(v10 + 12);
              else
                v35 = (__int16)v40;
            }
            else
            {
              if (v39)
                v41 = 0;
              else
                v41 = v10;
              v35 = *(_DWORD *)(v41 + 12);
            }
          }
        }
        if (v14 >= v15)
        {
          v42 = (v14 - v13) >> 5;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59)
LABEL_151:
            abort();
          if ((v15 - v13) >> 4 > v43)
            v43 = (v15 - v13) >> 4;
          if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFE0)
            v44 = 0x7FFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            if (v44 >> 59)
              goto LABEL_152;
            v45 = (char *)operator new(32 * v44);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[32 * v42];
          *(_OWORD *)v46 = v105;
          *((_QWORD *)v46 + 2) = v33;
          *((_DWORD *)v46 + 6) = v16;
          *((_DWORD *)v46 + 7) = v35;
          if (v14 == v13)
          {
            v49 = v14;
            v13 = &v45[32 * v42];
          }
          else
          {
            v47 = &v45[32 * v42];
            do
            {
              v48 = *((_OWORD *)v14 - 1);
              *((_OWORD *)v47 - 2) = *((_OWORD *)v14 - 2);
              *((_OWORD *)v47 - 1) = v48;
              v47 -= 32;
              v14 -= 32;
            }
            while (v14 != v13);
            v49 = v13;
            v13 = v47;
          }
          v15 = &v45[32 * v44];
          v14 = v46 + 32;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_OWORD *)v14 = v105;
          *((_QWORD *)v14 + 2) = v33;
          *((_DWORD *)v14 + 6) = v16;
          *((_DWORD *)v14 + 7) = v35;
          v14 += 32;
        }
        if ((v110 & 1) != 0 && v109)
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
        v16 = (v16 + 1);
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v107 + 1) + 24))(*((_QWORD *)&v107 + 1), &v107);
        v10 = v107;
      }
      while ((_QWORD)v107 != v32);
    }
    v101 = v16;
    v50 = (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 344))(this);
    v52 = v51;
    v53 = (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 352))(this);
    *(_QWORD *)&v107 = v50;
    *((_QWORD *)&v107 + 1) = v52;
    v103 = v54;
    v104 = v53;
    if (v52 == v54 && v50 == v53)
    {
      v63 = v14;
    }
    else
    {
      do
      {
        v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 144))(v52, v50);
        v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 160))(v52, v50);
        v58 = (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 56))(this);
        v60 = v59;
        v61 = *((_DWORD *)this + 2);
        if ((v61 & 0xFFFFFFFC) != 0x10)
        {
          if (v61 == 20 || (v61 & 0xFFFFFFFE) == 0xA)
            LODWORD(v50) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 152))(v52, v50);
          else
            LODWORD(v50) = (v50 - *((_QWORD *)this + 11)) / 0x28uLL + 1;
        }
        v62 = v57 + v56;
        if (v14 >= v15)
        {
          v64 = (v14 - v13) >> 5;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 59)
            goto LABEL_151;
          if ((v15 - v13) >> 4 > v65)
            v65 = (v15 - v13) >> 4;
          if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFE0)
            v66 = 0x7FFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          if (v66)
          {
            if (v66 >> 59)
              goto LABEL_152;
            v67 = (char *)operator new(32 * v66);
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[32 * v64];
          *(_QWORD *)v68 = v58;
          *((_QWORD *)v68 + 1) = v60;
          *((_QWORD *)v68 + 2) = v62;
          *((_DWORD *)v68 + 6) = 0;
          *((_DWORD *)v68 + 7) = v50;
          if (v14 == v13)
          {
            v13 = &v67[32 * v64];
          }
          else
          {
            v69 = &v67[32 * v64];
            do
            {
              v70 = *((_OWORD *)v14 - 1);
              *((_OWORD *)v69 - 2) = *((_OWORD *)v14 - 2);
              *((_OWORD *)v69 - 1) = v70;
              v69 -= 32;
              v14 -= 32;
            }
            while (v14 != v13);
            v14 = v13;
            v13 = v69;
          }
          v15 = &v67[32 * v66];
          v63 = v68 + 32;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v14 = v58;
          *((_QWORD *)v14 + 1) = v60;
          *((_QWORD *)v14 + 2) = v62;
          v63 = v14 + 32;
          *((_DWORD *)v14 + 6) = 0;
          *((_DWORD *)v14 + 7) = v50;
        }
        (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v107 + 1) + 128))(*((_QWORD *)&v107 + 1), &v107);
        v52 = *((_QWORD *)&v107 + 1);
        v50 = v107;
        v71 = *((_QWORD *)&v107 + 1) == v103 && (_QWORD)v107 == v104;
        v14 = v63;
      }
      while (!v71);
    }
    if (v13 != v63)
    {
      v72 = (unint64_t)(v63 - v13) >> 5;
      if (v63 - v13 >= 64)
        qsort(v13, (unint64_t)(v63 - v13) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))llvm::object::compareAddress);
      v73 = (v72 - 1);
      if ((_DWORD)v72 != 1)
      {
        v74 = 0;
        v75 = (uint64_t *)(v13 + 48);
        v76 = 1;
        do
        {
          if (v76 <= v73)
            v77 = v73;
          else
            v77 = v76;
          if (*(_QWORD *)&v13[32 * v74] != (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 56))(this))
          {
            v78 = &v13[32 * v74];
            v81 = *((_QWORD *)v78 + 2);
            v79 = v78 + 16;
            v80 = v81;
            v82 = v75;
            v83 = v76;
            while (v83 < v73)
            {
              v84 = *v82;
              v82 += 4;
              ++v83;
              if (v84 != v80)
              {
                v77 = v83 - 1;
                break;
              }
            }
            *v79 = *(_QWORD *)&v13[32 * v77 + 16] - v80;
          }
          ++v74;
          ++v76;
          v75 += 4;
        }
        while (v74 != v73);
      }
      v85 = (char *)*a3;
      v86 = (char *)a3[1];
      v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (char *)*a3) >> 3);
      v88 = v101 - v87;
      if (v101 <= v87)
      {
        if (v101 < v87)
          a3[1] = (uint64_t *)&v85[24 * v101];
      }
      else
      {
        v89 = (char *)a3[2];
        if (0xAAAAAAAAAAAAAAABLL * ((v89 - v86) >> 3) >= v88)
        {
          bzero(a3[1], 24 * ((24 * v88 - 24) / 0x18) + 24);
          a3[1] = (uint64_t *)&v86[24 * v88];
        }
        else
        {
          v90 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v85) >> 3);
          v91 = 0x5555555555555556 * ((v89 - v85) >> 3);
          if (v91 <= v101)
            v91 = v101;
          if (v90 >= 0x555555555555555)
            v92 = 0xAAAAAAAAAAAAAAALL;
          else
            v92 = v91;
          if (v92 > 0xAAAAAAAAAAAAAAALL)
LABEL_152:
            sub_1C4764EE4();
          v93 = 3 * v92;
          v94 = (char *)operator new(24 * v92);
          v95 = &v94[24 * v87];
          v96 = &v94[8 * v93];
          bzero(v95, 24 * ((24 * v88 - 24) / 0x18) + 24);
          if (v86 != v85)
          {
            do
            {
              v97 = *(_OWORD *)(v86 - 24);
              *((_QWORD *)v95 - 1) = *((_QWORD *)v86 - 1);
              *(_OWORD *)(v95 - 24) = v97;
              v95 -= 24;
              v86 -= 24;
            }
            while (v86 != v85);
            v86 = v85;
          }
          v85 = v95;
          *a3 = (uint64_t *)v95;
          a3[1] = (uint64_t *)&v94[24 * v101];
          a3[2] = (uint64_t *)v96;
          if (v86)
            operator delete(v86);
        }
      }
      v98 = v13;
      do
      {
        if (*(_QWORD *)v98 != (*(uint64_t (**)(llvm::object *))(*(_QWORD *)this + 56))(this))
        {
          v99 = *((_QWORD *)v98 + 2);
          v100 = &v85[24 * *((unsigned int *)v98 + 6)];
          *(_OWORD *)v100 = *(_OWORD *)v98;
          *((_QWORD *)v100 + 2) = v99;
        }
        v98 += 32;
      }
      while (v98 != v63);
    }
    if (v13)
      operator delete(v13);
  }
}

_QWORD *llvm::object::TapiFile::TapiFile(uint64_t a1, __int128 *a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  char *v113;
  char *v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v122;
  uint64_t v123;
  void **v124;
  void *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;

  v4 = (_QWORD *)a1;
  v131 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 8) = 5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E818A980;
  *(_QWORD *)(a1 + 48) = 0;
  v124 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = a4;
  v7 = *(_QWORD *)(a3 + 344);
  v8 = *(unsigned int *)(a3 + 360);
  v9 = v7 + 32 * v8;
  if (*(_DWORD *)(a3 + 352))
  {
    if ((_DWORD)v8)
    {
      v10 = 32 * v8;
      v11 = *(_QWORD *)(a3 + 344);
      while ((*(_BYTE *)v11 == 3 || !*(_BYTE *)v11) && !*(_QWORD *)(v11 + 16))
      {
        v11 += 32;
        v10 -= 32;
        if (!v10)
          goto LABEL_8;
      }
    }
    else
    {
      v11 = *(_QWORD *)(a3 + 344);
    }
  }
  else
  {
LABEL_8:
    v11 = v7 + 32 * v8;
  }
  v12 = v7 + 32 * v8;
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 1 << a4;
    v123 = v7 + 32 * v8;
    v122 = 1 << a4;
    do
    {
      v15 = *(uint64_t **)(v11 + 24);
      v16 = *((unsigned int *)v15 + 6);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = (unsigned __int8 *)v15[2];
        v19 = 8 * v16;
        do
        {
          v20 = *v18;
          v18 += 8;
          v21 = 1 << v20;
          if (v20 == 118)
            v22 = 0;
          else
            v22 = v21;
          v17 |= v22;
          v19 -= 8;
        }
        while (v19);
      }
      else
      {
        v17 = 0;
      }
      if ((v17 & v14) == 0)
        goto LABEL_88;
      switch(*((_BYTE *)v15 + 72))
      {
        case 0:
          v23 = *v15;
          v24 = v15[1];
          if ((*((_BYTE *)v15 + 73) & 8) != 0)
            v25 = 3;
          else
            v25 = 66;
          if ((*((_BYTE *)v15 + 73) & 6) != 0)
            v26 = v25 | 4;
          else
            v26 = v25;
          v27 = v4[8];
          if ((unint64_t)v13 >= v27)
          {
            v33 = (char *)*v124;
            v34 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)*v124) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0x666666666666666)
              goto LABEL_179;
            v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v33) >> 3);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x333333333333333)
              v37 = 0x666666666666666;
            else
              v37 = v35;
            if (v37 > 0x666666666666666)
              goto LABEL_180;
            v38 = 5 * v37;
            v39 = (char *)operator new(40 * v37);
            v40 = &v39[40 * v34];
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
            *((_QWORD *)v40 + 2) = v23;
            *((_QWORD *)v40 + 3) = v24;
            *((_DWORD *)v40 + 8) = v26;
            if (v13 != v33)
            {
              v41 = &v39[40 * v34];
              v12 = v123;
              do
              {
                v42 = *(_OWORD *)(v13 - 40);
                v43 = *(_OWORD *)(v13 - 24);
                v44 = v41 - 40;
                *((_DWORD *)v41 - 2) = *((_DWORD *)v13 - 2);
                *(_OWORD *)(v41 - 24) = v43;
                *(_OWORD *)(v41 - 40) = v42;
                v13 -= 40;
                v41 -= 40;
              }
              while (v13 != v33);
              goto LABEL_82;
            }
            goto LABEL_81;
          }
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          goto LABEL_47;
        case 1:
          llvm::MachO::mapToPlatformSet(*(_QWORD *)(a3 + 96), *(unsigned int *)(a3 + 104), &v125);
          if (!v130)
          {
            v62 = v125;
            if (v126)
            {
              v63 = 4 * v126;
              while (*v62 != 1)
              {
                ++v62;
                v63 -= 4;
                if (!v63)
                  goto LABEL_102;
              }
            }
            else
            {
LABEL_102:
              v62 = (char *)v125 + 4 * v126;
            }
            LODWORD(v62) = v62 != (_DWORD *)((char *)v125 + 4 * v126);
            v64 = v129;
            goto LABEL_113;
          }
          v64 = v129;
          if (!v129)
          {
            LODWORD(v62) = 0;
            goto LABEL_113;
          }
          v62 = v129;
          while (2)
          {
            v65 = v62[7];
            if (v65 > 1)
              goto LABEL_110;
            if (v65 != 1)
            {
              v62 += 2;
LABEL_110:
              v62 = *(_DWORD **)v62;
              if (!v62)
                goto LABEL_113;
              continue;
            }
            break;
          }
          LODWORD(v62) = 1;
LABEL_113:
          if (a4)
            v66 = 0;
          else
            v66 = (int)v62;
          sub_1C47655E8((uint64_t)&v128, v64);
          if (v125 != &v127)
            free(v125);
          v68 = *v15;
          v67 = v15[1];
          if ((*((_BYTE *)v15 + 73) & 8) != 0)
            v69 = 3;
          else
            v69 = 66;
          if ((*((_BYTE *)v15 + 73) & 6) != 0)
            v70 = v69 | 4;
          else
            v70 = v69;
          v72 = v4[7];
          v71 = v4[8];
          if (v66)
          {
            if (v72 < v71)
            {
              *(_QWORD *)v72 = ".objc_class_name_";
              *(_QWORD *)(v72 + 8) = 17;
              *(_QWORD *)(v72 + 16) = v68;
              *(_QWORD *)(v72 + 24) = v67;
              v13 = (char *)(v72 + 40);
              *(_DWORD *)(v72 + 32) = v70;
              goto LABEL_87;
            }
            v33 = (char *)*v124;
            v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - (_QWORD)*v124) >> 3);
            v75 = v74 + 1;
            if (v74 + 1 > 0x666666666666666)
              goto LABEL_179;
            v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (_QWORD)v33) >> 3);
            if (2 * v76 > v75)
              v75 = 2 * v76;
            if (v76 >= 0x333333333333333)
              v77 = 0x666666666666666;
            else
              v77 = v75;
            if (v77 > 0x666666666666666)
              goto LABEL_180;
            v78 = *v15;
            v79 = v15[1];
            v117 = 5 * v77;
            v80 = (char *)operator new(40 * v77);
            v81 = &v80[40 * v74];
            *(_QWORD *)v81 = ".objc_class_name_";
            *((_QWORD *)v81 + 1) = 17;
            *((_QWORD *)v81 + 2) = v78;
            *((_QWORD *)v81 + 3) = v79;
            *((_DWORD *)v81 + 8) = v70;
            if ((char *)v72 == v33)
            {
              v44 = &v80[40 * v74];
              v12 = v123;
            }
            else
            {
              v82 = &v80[40 * v74];
              v12 = v123;
              do
              {
                v83 = *(_OWORD *)(v72 - 40);
                v84 = *(_OWORD *)(v72 - 24);
                v44 = v82 - 40;
                *((_DWORD *)v82 - 2) = *(_DWORD *)(v72 - 8);
                *(_OWORD *)(v82 - 24) = v84;
                *(_OWORD *)(v82 - 40) = v83;
                v72 -= 40;
                v82 -= 40;
              }
              while ((char *)v72 != v33);
            }
            v59 = &v80[8 * v117];
            v13 = v81 + 40;
            goto LABEL_83;
          }
          if (v72 >= v71)
          {
            v85 = *v124;
            v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - (_QWORD)*v124) >> 3);
            v87 = v86 + 1;
            if (v86 + 1 > 0x666666666666666)
              goto LABEL_179;
            v118 = v15[1];
            v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (_QWORD)v85) >> 3);
            if (2 * v88 > v87)
              v87 = 2 * v88;
            if (v88 >= 0x333333333333333)
              v89 = 0x666666666666666;
            else
              v89 = v87;
            if (v89 > 0x666666666666666)
              goto LABEL_180;
            v90 = *v15;
            v116 = 5 * v89;
            v91 = (char *)operator new(40 * v89);
            v92 = &v91[40 * v86];
            *(_QWORD *)v92 = "_OBJC_CLASS_$_";
            *((_QWORD *)v92 + 1) = 14;
            *((_QWORD *)v92 + 2) = v90;
            *((_QWORD *)v92 + 3) = v118;
            *((_DWORD *)v92 + 8) = v70;
            if ((void *)v72 == v85)
            {
              v96 = &v91[40 * v86];
              v12 = v123;
            }
            else
            {
              v93 = &v91[40 * v86];
              v12 = v123;
              do
              {
                v94 = *(_OWORD *)(v72 - 40);
                v95 = *(_OWORD *)(v72 - 24);
                v96 = v93 - 40;
                *((_DWORD *)v93 - 2) = *(_DWORD *)(v72 - 8);
                *(_OWORD *)(v93 - 24) = v95;
                *(_OWORD *)(v93 - 40) = v94;
                v72 -= 40;
                v93 -= 40;
              }
              while ((void *)v72 != v85);
            }
            v73 = v92 + 40;
            v4[6] = v96;
            v4[7] = v92 + 40;
            v4[8] = &v91[8 * v116];
            if (v85)
              operator delete(v85);
          }
          else
          {
            *(_QWORD *)v72 = "_OBJC_CLASS_$_";
            *(_QWORD *)(v72 + 8) = 14;
            *(_QWORD *)(v72 + 16) = v68;
            *(_QWORD *)(v72 + 24) = v67;
            v73 = (char *)(v72 + 40);
            *(_DWORD *)(v72 + 32) = v70;
          }
          v4[7] = v73;
          v98 = *v15;
          v97 = v15[1];
          if ((*((_BYTE *)v15 + 73) & 8) != 0)
            v99 = 3;
          else
            v99 = 66;
          if ((*((_BYTE *)v15 + 73) & 6) != 0)
            v100 = v99 | 4;
          else
            v100 = v99;
          v101 = v4[8];
          if ((unint64_t)v73 < v101)
          {
            *(_QWORD *)v73 = "_OBJC_METACLASS_$_";
            *((_QWORD *)v73 + 1) = 18;
            *((_QWORD *)v73 + 2) = v98;
            *((_QWORD *)v73 + 3) = v97;
            v13 = v73 + 40;
            *((_DWORD *)v73 + 8) = v100;
            v14 = v122;
            goto LABEL_87;
          }
          v102 = (char *)*v124;
          v103 = 0xCCCCCCCCCCCCCCCDLL * ((v73 - (_BYTE *)*v124) >> 3);
          v104 = v103 + 1;
          if (v103 + 1 > 0x666666666666666)
LABEL_179:
            abort();
          v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v101 - (_QWORD)v102) >> 3);
          if (2 * v105 > v104)
            v104 = 2 * v105;
          if (v105 >= 0x333333333333333)
            v106 = 0x666666666666666;
          else
            v106 = v104;
          if (v106 > 0x666666666666666)
LABEL_180:
            sub_1C4764EE4();
          v107 = 5 * v106;
          v108 = (char *)operator new(40 * v106);
          v109 = &v108[40 * v103];
          *(_QWORD *)v109 = "_OBJC_METACLASS_$_";
          *((_QWORD *)v109 + 1) = 18;
          *((_QWORD *)v109 + 2) = v98;
          *((_QWORD *)v109 + 3) = v97;
          *((_DWORD *)v109 + 8) = v100;
          if (v73 == v102)
          {
            v113 = &v108[40 * v103];
            v12 = v123;
          }
          else
          {
            v110 = &v108[40 * v103];
            v12 = v123;
            do
            {
              v111 = *(_OWORD *)(v73 - 40);
              v112 = *(_OWORD *)(v73 - 24);
              v113 = v110 - 40;
              *((_DWORD *)v110 - 2) = *((_DWORD *)v73 - 2);
              *(_OWORD *)(v110 - 24) = v112;
              *(_OWORD *)(v110 - 40) = v111;
              v73 -= 40;
              v110 -= 40;
            }
            while (v73 != v102);
          }
          v114 = &v108[8 * v107];
          v13 = v109 + 40;
          v4 = (_QWORD *)a1;
          *(_QWORD *)(a1 + 48) = v113;
          *(_QWORD *)(a1 + 56) = v109 + 40;
          *(_QWORD *)(a1 + 64) = v114;
          if (!v102)
            goto LABEL_86;
          v60 = v102;
          goto LABEL_85;
        case 2:
          v23 = *v15;
          v24 = v15[1];
          if ((*((_BYTE *)v15 + 73) & 8) != 0)
            v28 = 3;
          else
            v28 = 66;
          if ((*((_BYTE *)v15 + 73) & 6) != 0)
            v26 = v28 | 4;
          else
            v26 = v28;
          v29 = v4[8];
          if ((unint64_t)v13 >= v29)
          {
            v33 = (char *)*v124;
            v45 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)*v124) >> 3);
            v46 = v45 + 1;
            if (v45 + 1 > 0x666666666666666)
              goto LABEL_179;
            v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - (_QWORD)v33) >> 3);
            if (2 * v47 > v46)
              v46 = 2 * v47;
            if (v47 >= 0x333333333333333)
              v48 = 0x666666666666666;
            else
              v48 = v46;
            if (v48 > 0x666666666666666)
              goto LABEL_180;
            v38 = 5 * v48;
            v39 = (char *)operator new(40 * v48);
            v40 = &v39[40 * v45];
            *(_QWORD *)v40 = "_OBJC_EHTYPE_$_";
            *((_QWORD *)v40 + 1) = 15;
            *((_QWORD *)v40 + 2) = v23;
            *((_QWORD *)v40 + 3) = v24;
            *((_DWORD *)v40 + 8) = v26;
            if (v13 != v33)
            {
              v49 = &v39[40 * v45];
              v12 = v123;
              do
              {
                v50 = *(_OWORD *)(v13 - 40);
                v51 = *(_OWORD *)(v13 - 24);
                v44 = v49 - 40;
                *((_DWORD *)v49 - 2) = *((_DWORD *)v13 - 2);
                *(_OWORD *)(v49 - 24) = v51;
                *(_OWORD *)(v49 - 40) = v50;
                v13 -= 40;
                v49 -= 40;
              }
              while (v13 != v33);
              goto LABEL_82;
            }
            goto LABEL_81;
          }
          *(_QWORD *)v13 = "_OBJC_EHTYPE_$_";
          v30 = 15;
          break;
        case 3:
          v23 = *v15;
          v24 = v15[1];
          if ((*((_BYTE *)v15 + 73) & 8) != 0)
            v31 = 3;
          else
            v31 = 66;
          if ((*((_BYTE *)v15 + 73) & 6) != 0)
            v26 = v31 | 4;
          else
            v26 = v31;
          v32 = v4[8];
          if ((unint64_t)v13 >= v32)
          {
            v33 = (char *)*v124;
            v52 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)*v124) >> 3);
            v53 = v52 + 1;
            if (v52 + 1 > 0x666666666666666)
              goto LABEL_179;
            v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (_QWORD)v33) >> 3);
            if (2 * v54 > v53)
              v53 = 2 * v54;
            if (v54 >= 0x333333333333333)
              v55 = 0x666666666666666;
            else
              v55 = v53;
            if (v55 > 0x666666666666666)
              goto LABEL_180;
            v38 = 5 * v55;
            v39 = (char *)operator new(40 * v55);
            v40 = &v39[40 * v52];
            *(_QWORD *)v40 = "_OBJC_IVAR_$_";
            *((_QWORD *)v40 + 1) = 13;
            *((_QWORD *)v40 + 2) = v23;
            *((_QWORD *)v40 + 3) = v24;
            *((_DWORD *)v40 + 8) = v26;
            if (v13 != v33)
            {
              v56 = &v39[40 * v52];
              v12 = v123;
              do
              {
                v57 = *(_OWORD *)(v13 - 40);
                v58 = *(_OWORD *)(v13 - 24);
                v44 = v56 - 40;
                *((_DWORD *)v56 - 2) = *((_DWORD *)v13 - 2);
                *(_OWORD *)(v56 - 24) = v58;
                *(_OWORD *)(v56 - 40) = v57;
                v13 -= 40;
                v56 -= 40;
              }
              while (v13 != v33);
LABEL_82:
              v59 = &v39[8 * v38];
              v13 = v40 + 40;
              v4 = (_QWORD *)a1;
LABEL_83:
              v4[6] = v44;
              v4[7] = v13;
              v4[8] = v59;
              if (v33)
              {
                v60 = v33;
LABEL_85:
                operator delete(v60);
              }
LABEL_86:
              v14 = v122;
              goto LABEL_87;
            }
LABEL_81:
            v44 = v40;
            v12 = v123;
            goto LABEL_82;
          }
          *(_QWORD *)v13 = "_OBJC_IVAR_$_";
          v30 = 13;
          break;
        default:
          goto LABEL_88;
      }
      *((_QWORD *)v13 + 1) = v30;
LABEL_47:
      *((_QWORD *)v13 + 2) = v23;
      *((_QWORD *)v13 + 3) = v24;
      *((_DWORD *)v13 + 8) = v26;
      v13 += 40;
LABEL_87:
      v4[7] = v13;
LABEL_88:
      v61 = v11 + 32;
      v11 = v9;
      if (v61 != v9)
      {
        v11 = v61;
        while ((*(_BYTE *)v11 == 3 || !*(_BYTE *)v11) && !*(_QWORD *)(v11 + 16))
        {
          v11 += 32;
          if (v11 == v9)
          {
            v11 = v9;
            break;
          }
        }
      }
    }
    while (v11 != v12);
  }
  return v4;
}

void llvm::object::TapiFile::~TapiFile(llvm::object::TapiFile *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E818A980;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E818A980;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E818A980;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

void llvm::object::TapiFile::moveSymbolNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

void *llvm::object::TapiFile::printSymbolName@<X0>(llvm::raw_ostream *this@<X1>, uint64_t a2@<X0>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  void *result;
  uint64_t v12;
  const void *v13;
  size_t v14;

  v7 = *(_QWORD *)(a2 + 48);
  v8 = v7 + 40 * a3;
  v9 = *(const void **)v8;
  v10 = *(_QWORD *)(v8 + 8);
  result = (void *)*((_QWORD *)this + 4);
  if (v10 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v10)
    {
      memcpy(result, v9, v10);
      result = (void *)(*((_QWORD *)this + 4) + v10);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    this = llvm::raw_ostream::write(this, (const char *)v9, v10);
    result = (void *)*((_QWORD *)this + 4);
  }
  v12 = v7 + 40 * a3;
  v13 = *(const void **)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (v14 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v14)
    {
      result = memcpy(result, v13, v14);
      *((_QWORD *)this + 4) += v14;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(this, (const char *)v13, v14);
  }
  *a4 = 0;
  return result;
}

uint64_t llvm::object::TapiFile::getSymbolFlags@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 48) + 40 * a2;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = *(_DWORD *)(v3 + 32);
  return result;
}

uint64_t llvm::object::TapiFile::symbol_begin(llvm::object::TapiFile *this)
{
  return 0;
}

uint64_t llvm::object::TapiFile::symbol_end(llvm::object::TapiFile *this)
{
  return -858993459 * ((*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
}

uint64_t llvm::object::TapiUniversal::TapiUniversal(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  _OWORD v73[2];
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v74 = *a2;
  v4 = v74;
  v75 = v5;
  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = &off_1E818A9D0;
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = a2[1];
  v73[0] = *a2;
  v73[1] = v7;
  llvm::MachO::TextAPIReader::get((uint64_t *)v73, (uint64_t)&v76);
  v8 = v76;
  v76 = 0;
  if ((v77 & 1) != 0)
  {
    *a3 = v8;
    if (v8)
      goto LABEL_51;
    goto LABEL_50;
  }
  v9 = *v6;
  *v6 = v8;
  if (v9)
  {
    v10 = sub_1C5A0AA74(v9);
    MEMORY[0x1CAA32FC0](v10, 0x10B2C40E0541032);
    v8 = *v6;
  }
  v11 = *(_BYTE *)(v8 + 207);
  v12 = v11;
  if (v11 >= 0)
    v13 = v8 + 184;
  else
    v13 = *(_QWORD *)(v8 + 184);
  v14 = v11 & 0x7F;
  if (v12 >= 0)
    v15 = v14;
  else
    v15 = *(_QWORD *)(v8 + 192);
  v16 = *(unsigned int *)(v8 + 104);
  v69 = a3;
  LODWORD(v17) = 0;
  if ((_DWORD)v16)
  {
    v18 = *(unsigned __int8 **)(v8 + 96);
    v19 = 8 * v16;
    v20 = (_QWORD *)a1;
    do
    {
      v21 = *v18;
      v18 += 8;
      v22 = 1 << v21;
      if (v21 == 118)
        v23 = 0;
      else
        v23 = v22;
      v17 = v23 | v17;
      v19 -= 8;
    }
    while (v19);
    if ((v17 & 1) != 0)
    {
      LODWORD(v24) = 0;
LABEL_23:
      v70 = v6;
      v27 = v24;
      v28 = (uint64_t *)v20[8];
LABEL_24:
      v29 = v20[9];
      if ((unint64_t)v28 >= v29)
      {
        v30 = (_QWORD *)v20[7];
        v31 = 0xAAAAAAAAAAAAAAABLL * (v28 - v30) + 1;
        if (v31 > 0xAAAAAAAAAAAAAAALL)
LABEL_101:
          abort();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v30) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_102:
            sub_1C4764EE4();
          v34 = (char *)operator new(24 * v33);
          v20 = (_QWORD *)a1;
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[8 * (v28 - v30)];
        *(_QWORD *)v35 = v13;
        *((_QWORD *)v35 + 1) = v15;
        v35[16] = v27;
        if (v28 == v30)
        {
          v38 = v28;
          v36 = &v34[8 * (v28 - v30)];
        }
        else
        {
          v36 = &v34[8 * (v28 - v30)];
          do
          {
            v37 = *(_OWORD *)(v28 - 3);
            *(v36 - 8) = *((_BYTE *)v28 - 8);
            *(_OWORD *)(v36 - 24) = v37;
            v36 -= 24;
            v28 -= 3;
          }
          while (v28 != v30);
          v38 = (uint64_t *)v20[7];
        }
        v28 = (uint64_t *)(v35 + 24);
        v20[7] = v36;
        v20[8] = v35 + 24;
        v20[9] = &v34[24 * v33];
        if (v38)
        {
          operator delete(v38);
          v20 = (_QWORD *)a1;
        }
      }
      else
      {
        *v28 = v13;
        v28[1] = v15;
        *((_BYTE *)v28 + 16) = v27;
        v28 += 3;
      }
      v20[8] = v28;
      while (++v27 <= 0x1F)
      {
        if (((v17 >> v27) & 1) != 0)
          goto LABEL_24;
      }
      v8 = *v70;
      goto LABEL_48;
    }
  }
  else
  {
    v20 = (_QWORD *)a1;
  }
  v25 = 0;
  v17 = v17;
  while (v25 != 31)
  {
    v24 = v25 + 1;
    v26 = (unint64_t)v17 >> v25++;
    if ((v26 & 2) != 0)
    {
      if (v24 == 0xFFFFFFFFLL)
        break;
      goto LABEL_23;
    }
  }
LABEL_48:
  v40 = *(_QWORD *)(v8 + 296);
  v39 = *(_QWORD *)(v8 + 304);
  if (v40 != v39)
  {
    v71 = *(_QWORD *)(v8 + 304);
    while (1)
    {
      v42 = *(_BYTE *)(*(_QWORD *)v40 + 207);
      v43 = v42;
      v44 = v42 >= 0 ? *(_QWORD *)v40 + 184 : *(_QWORD *)(*(_QWORD *)v40 + 184);
      v45 = v42 & 0x7F;
      v46 = v43 >= 0 ? v45 : *(_QWORD *)(*(_QWORD *)v40 + 192);
      v47 = *(unsigned int *)(*(_QWORD *)v40 + 104);
      if (!(_DWORD)v47)
        break;
      LODWORD(v48) = 0;
      v49 = *(unsigned __int8 **)(*(_QWORD *)v40 + 96);
      v50 = 8 * v47;
      do
      {
        v51 = *v49;
        v49 += 8;
        v52 = 1 << v51;
        if (v51 == 118)
          v53 = 0;
        else
          v53 = v52;
        v48 = v53 | v48;
        v50 -= 8;
      }
      while (v50);
      if ((v48 & 1) == 0)
        goto LABEL_68;
      LODWORD(v54) = 0;
LABEL_74:
      v57 = v54;
      v58 = (uint64_t *)v20[8];
LABEL_75:
      v59 = v20[9];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (_QWORD *)v20[7];
        v61 = 0xAAAAAAAAAAAAAAABLL * (v58 - v60) + 1;
        if (v61 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_101;
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - (_QWORD)v60) >> 3);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x555555555555555)
          v63 = 0xAAAAAAAAAAAAAAALL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_102;
          v64 = (char *)operator new(24 * v63);
          v20 = (_QWORD *)a1;
        }
        else
        {
          v64 = 0;
        }
        v65 = &v64[8 * (v58 - v60)];
        *(_QWORD *)v65 = v44;
        *((_QWORD *)v65 + 1) = v46;
        v65[16] = v57;
        if (v58 == v60)
        {
          v68 = v58;
          v66 = &v64[8 * (v58 - v60)];
        }
        else
        {
          v66 = &v64[8 * (v58 - v60)];
          do
          {
            v67 = *(_OWORD *)(v58 - 3);
            *(v66 - 8) = *((_BYTE *)v58 - 8);
            *(_OWORD *)(v66 - 24) = v67;
            v66 -= 24;
            v58 -= 3;
          }
          while (v58 != v60);
          v68 = (uint64_t *)v20[7];
        }
        v58 = (uint64_t *)(v65 + 24);
        v20[7] = v66;
        v20[8] = v65 + 24;
        v20[9] = &v64[24 * v63];
        if (v68)
        {
          operator delete(v68);
          v20 = (_QWORD *)a1;
        }
        v39 = v71;
      }
      else
      {
        *v58 = v44;
        v58[1] = v46;
        *((_BYTE *)v58 + 16) = v57;
        v58 += 3;
      }
      v20[8] = v58;
      while (++v57 <= 0x1F)
      {
        if (((v48 >> v57) & 1) != 0)
          goto LABEL_75;
      }
LABEL_72:
      v40 += 16;
      if (v40 == v39)
        goto LABEL_49;
    }
    LODWORD(v48) = 0;
LABEL_68:
    v55 = 0;
    v48 = v48;
    do
    {
      if (v55 == 31)
        goto LABEL_72;
      v54 = v55 + 1;
      v56 = (unint64_t)v48 >> v55++;
    }
    while ((v56 & 2) == 0);
    if (v54 == 0xFFFFFFFFLL)
      goto LABEL_72;
    goto LABEL_74;
  }
LABEL_49:
  a3 = v69;
  if (!*v69)
LABEL_50:
    *a3 = 0;
LABEL_51:
  sub_1C62DB794((uint64_t)&v76);
  return a1;
}

_QWORD *llvm::object::TapiUniversal::ObjectForArch::getAsObjectFile@<X0>(llvm::object::TapiUniversal::ObjectForArch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *result;
  __int128 v8[2];

  v4 = operator new();
  v5 = *(_QWORD *)this;
  v6 = *(_OWORD *)(*(_QWORD *)this + 32);
  v8[0] = *(_OWORD *)(*(_QWORD *)this + 16);
  v8[1] = v6;
  result = llvm::object::TapiFile::TapiFile(v4, v8, *(_QWORD *)(v5 + 48), *(unsigned __int8 *)(*(_QWORD *)(v5 + 56) + 24 * *((int *)this + 2) + 16));
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t sub_1C5A0AA74(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 344), 8);
  v6 = (void **)(a1 + 320);
  sub_1C4FF890C(&v6);
  if (*(_QWORD *)(a1 + 296))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 296));
    operator delete(*(void **)(a1 + 296));
  }
  v2 = *(char **)(a1 + 272);
  if (v2)
  {
    sub_1C5A0AB54(a1 + 272, v2);
    operator delete(*(void **)(a1 + 272));
  }
  v3 = *(char **)(a1 + 248);
  if (v3)
  {
    sub_1C5A0AB54(a1 + 248, v3);
    operator delete(*(void **)(a1 + 248));
  }
  v6 = (void **)(a1 + 224);
  sub_1C4FF890C(&v6);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  v4 = *(void **)(a1 + 96);
  if (v4 != (void *)(a1 + 112))
    free(v4);
  return sub_1C4926AE8(a1);
}

void sub_1C5A0AB54(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  v4 = *(char **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 40;
    do
    {
      v6 = (char *)*((_QWORD *)v5 - 2);
      if (v5 != v6)
        free(v6);
      if (*(v5 - 17) < 0)
        operator delete(*((void **)v5 - 5));
      v7 = v5 - 40;
      v5 -= 80;
    }
    while (v7 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

__n128 llvm::object::Slice::Slice(__n128 *a1, unint64_t a2, unsigned __int32 a3, unsigned __int32 a4, __n128 *a5, unsigned __int32 a6)
{
  __n128 result;

  a1->n128_u64[0] = a2;
  a1->n128_u32[2] = a3;
  a1->n128_u32[3] = a4;
  result = *a5;
  a1[2].n128_u64[0] = a5[1].n128_u64[0];
  a1[1] = result;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  a1[2].n128_u32[2] = a6;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = a2;
  a1->n128_u32[2] = a3;
  a1->n128_u32[3] = a4;
  result = *a5;
  a1[2].n128_u64[0] = a5[1].n128_u64[0];
  a1[1] = result;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  a1[2].n128_u32[2] = a6;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = a2;
  a1->n128_u32[2] = a3;
  a1->n128_u32[3] = a4;
  result = *a5;
  a1[2].n128_u64[0] = a5[1].n128_u64[0];
  a1[1] = result;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  a1[2].n128_u32[2] = a6;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = a2;
  a1->n128_u32[2] = a3;
  a1->n128_u32[3] = a4;
  result = *a5;
  a1[2].n128_u64[0] = a5[1].n128_u64[0];
  a1[1] = result;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  a1[2].n128_u32[2] = a6;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = a2;
  a1->n128_u32[2] = a3;
  a1->n128_u32[3] = a4;
  result = *a5;
  a1[2].n128_u64[0] = a5[1].n128_u64[0];
  a1[1] = result;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  a1[2].n128_u32[2] = a6;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = a2;
  a1->n128_u32[2] = a3;
  a1->n128_u32[3] = a4;
  result = *a5;
  a1[2].n128_u64[0] = a5[1].n128_u64[0];
  a1[1] = result;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  a1[2].n128_u32[2] = a6;
  return result;
}

llvm::object::Slice *llvm::object::Slice::Slice(llvm::object::Slice *this, const llvm::object::MachOObjectFile *a2, int a3)
{
  llvm::Triple *ArchName;
  unint64_t v6;
  llvm::Triple *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v14;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = *(_QWORD *)((char *)a2 + 52);
  llvm::object::MachOObjectFile::getArchTriple(*((unsigned int *)a2 + 13), 0, *((_DWORD *)a2 + 14), 0, __p);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)__p);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = ArchName;
  v8 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v9 = (char *)operator new(v10 + 1);
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = v11 | 0x8000000000000000;
    *((_QWORD *)this + 2) = v9;
    goto LABEL_8;
  }
  v9 = (char *)this + 16;
  *((_BYTE *)this + 39) = v6;
  if (v6)
LABEL_8:
    memmove(v9, v7, v8);
  v9[v8] = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  *((_DWORD *)this + 10) = a3;
  return this;
}

llvm::object::Slice *llvm::object::Slice::Slice(llvm::object::Slice *this, const llvm::object::MachOObjectFile *a2)
{
  int v4;

  v4 = sub_1C5A0AD84((uint64_t)a2);
  return llvm::object::Slice::Slice(this, a2, v4);
}

{
  int v4;

  v4 = sub_1C5A0AD84((uint64_t)a2);
  return llvm::object::Slice::Slice(this, a2, v4);
}

uint64_t sub_1C5A0AD84(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _OWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE v26[44];
  uint64_t v27;
  _BYTE v28[24];
  unint64_t v29;
  int v30;
  _DWORD v31[7];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 52);
  result = 12;
  if (v2 <= 16777222)
  {
    switch(v2)
    {
      case 7:
        return result;
      case 12:
        return 14;
      case 18:
        return result;
    }
  }
  else
  {
    if (v2 > 16777233)
    {
      if (v2 == 16777234)
        return result;
      v4 = 33554444;
    }
    else
    {
      if (v2 == 16777223)
        return result;
      v4 = 16777228;
    }
    if (v2 == v4)
      return 14;
  }
  v5 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 128);
    v7 = v6 + 16 * v5;
    v8 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE;
    if (v8 == 18)
      v9 = 25;
    else
      v9 = 1;
    v10 = 15;
    v24 = v6 + 16 * v5;
    v23 = v9;
    do
    {
      if (*(_DWORD *)(v6 + 8) == v9)
      {
        v25 = v10;
        if (*(_DWORD *)(a1 + 60) == 1)
        {
          if (v8 == 18)
          {
            llvm::object::MachOObjectFile::getSegment64LoadCommand(a1, (unint64_t *)v6, (uint64_t)v28);
            v11 = v31[3];
          }
          else
          {
            llvm::object::MachOObjectFile::getSegmentLoadCommand(a1, (unint64_t *)v6, (uint64_t)v28);
            v11 = v30;
          }
          v13 = v10;
          if (v11)
          {
            v14 = 0;
            v13 = 2;
            do
            {
              v15 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE;
              v16 = v15 == 18;
              if (v15 == 18)
                v17 = 80;
              else
                v17 = 68;
              if (v16)
                v18 = 72;
              else
                v18 = 56;
              v19 = (_OWORD *)(v18 + *(_QWORD *)v6 + (v17 * v14));
              if (v8 == 18)
              {
                sub_1C59EA458(a1, v19, (uint64_t)v28);
                v20 = v31;
              }
              else
              {
                sub_1C59EA3C8(a1, (unint64_t)v19, (uint64_t)v26);
                v20 = (unsigned int *)&v27;
              }
              v21 = *v20;
              if (v13 <= v21)
                v13 = v21;
              ++v14;
            }
            while (v11 != v14);
          }
        }
        else
        {
          if (v8 == 18)
          {
            llvm::object::MachOObjectFile::getSegment64LoadCommand(a1, (unint64_t *)v6, (uint64_t)v28);
            v12 = v29;
          }
          else
          {
            llvm::object::MachOObjectFile::getSegmentLoadCommand(a1, (unint64_t *)v6, (uint64_t)v28);
            v12 = v29;
          }
          v13 = __clz(__rbit64(v12));
        }
        if (v13 >= v25)
          v10 = v25;
        else
          v10 = v13;
        v7 = v24;
        v9 = v23;
      }
      v6 += 16;
    }
    while (v6 != v7);
  }
  else
  {
    v10 = 15;
  }
  if (v10 >= 0xF)
    v22 = 15;
  else
    v22 = v10;
  if (v22 <= 2)
    return 2;
  else
    return v22;
}

char *llvm::object::Slice::create@<X0>(llvm::object::Slice *this@<X0>, const llvm::object::Archive *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  void *v14;
  void *v15;
  const std::error_category *v16;
  const void *v17;
  size_t v18;
  uint64_t *v19;
  const char *v20;
  const void *v21;
  size_t v22;
  uint64_t *v23;
  const char *v24;
  void *v25;
  void *v26;
  const std::error_category *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const std::error_category *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  int v41;
  uint64_t *p_dst;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  size_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  const std::error_category *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  size_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  const std::error_category *v83;
  void **v84;
  uint64_t v85;
  void **v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void **v92;
  const std::error_category *v93;
  const std::error_category *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  int v99;
  __int128 v100;
  const std::error_category *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  const std::error_category *v108;
  uint64_t v109;
  __int128 v110;
  char *result;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  const llvm::object::Archive *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  __int16 v134;
  _QWORD v135[2];
  const char *v136;
  __int16 v137;
  _QWORD v138[2];
  unint64_t v139;
  __int16 v140;
  _QWORD v141[2];
  const char *v142;
  __int16 v143;
  _QWORD v144[2];
  unint64_t v145;
  __int16 v146;
  _QWORD v147[2];
  const char *v148;
  __int16 v149;
  void *v150;
  size_t v151;
  int64_t v152;
  __int16 v153;
  uint64_t __dst;
  size_t v155;
  const char *v156;
  __int16 v157;
  void *v158;
  uint64_t v159;
  int64_t v160;
  __int16 v161;
  void *__p[2];
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const std::error_category *v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  const char *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  int v182;
  void **v183;
  void **v184;
  const char *v185;
  const char *v186;
  void *v187;
  __int16 v188;
  void **v189;
  uint64_t v190;
  const std::error_category *v191;
  void **v192;
  char v193;
  void **v194;
  char v195;
  uint64_t v196;
  char v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  unint64_t v201;
  char v202[8];
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v175 = 0;
  sub_1C624B904((uint64_t)this, &v175, 1, (uint64_t)&v198);
  sub_1C624BC78((uint64_t)&v171, (uint64_t)&v198);
  v174 = v201;
  sub_1C624BC78((uint64_t)&v167, (uint64_t)v202);
  v7 = 0;
  v8 = 0;
  v170 = v204;
  if (v174 > 7 || v204 >= 8)
  {
    v8 = 0;
    v7 = 0;
    v10 = "archive member ";
    do
    {
      if (v173 == v169)
        break;
      llvm::object::Archive::Child::getAsBinary((llvm::object::Archive::Child *)&v171, (uint64_t)&v196);
      if ((v197 & 1) != 0)
      {
        v38 = *((_QWORD *)this + 4);
        v39 = *((_QWORD *)this + 5);
        LOWORD(v179) = 261;
        v176 = (const char *)v38;
        v177 = v39;
        v40 = (void **)v196;
        v196 = 0;
        v184 = v40;
        sub_1C61D4644((llvm::Twine *)&v176, 0, 0, (uint64_t *)&v184, &v166);
        if (v184)
          (*((void (**)(void **))*v184 + 1))(v184);
        v41 = 0;
        *(_BYTE *)(a3 + 48) |= 1u;
        *(_QWORD *)a3 = v166;
        v166 = 0;
      }
      else
      {
        v11 = v196;
        v12 = *(_DWORD *)(v196 + 8);
        if (v12 == 1)
        {
          v13 = *(const char **)(v196 + 32);
          v14 = *(void **)(v196 + 40);
          v188 = 1283;
          v184 = (void **)v10;
          v186 = v13;
          v187 = v14;
          v176 = (const char *)&v184;
          *(_QWORD *)&v178 = " is a fat file (not allowed in an archive)";
          LOWORD(v179) = 770;
          llvm::Twine::str((llvm::Twine *)&v176, &v158);
          if (v160 >= 0)
            v15 = &v158;
          else
            v15 = v158;
          v16 = std::generic_category();
          __dst = 22;
          v155 = (size_t)v16;
          v150 = v15;
          sub_1C5DF1730((_BYTE **)&v150, &__dst, &v165);
          *(_BYTE *)(a3 + 48) |= 1u;
          *(_QWORD *)a3 = v165;
          v165 = 0;
LABEL_32:
          if ((SHIBYTE(v160) & 0x80000000) == 0)
            goto LABEL_77;
          v28 = v158;
          goto LABEL_76;
        }
        if ((v12 & 0xFFFFFFFC) == 0x10)
        {
          if (v7)
          {
            v17 = *(const void **)(v196 + 32);
            v125 = a2;
            if (!v17)
            {
              v20 = v10;
              __dst = 0;
              v155 = 0;
              p_dst = &__dst;
              v156 = 0;
              goto LABEL_56;
            }
            v18 = *(_QWORD *)(v196 + 40);
            if (v18 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_197;
            if (v18 >= 0x17)
            {
              v43 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v18 | 7) != 0x17)
                v43 = v18 | 7;
              v44 = v43 + 1;
              v19 = (uint64_t *)operator new(v43 + 1);
              v155 = v18;
              v156 = (const char *)(v44 | 0x8000000000000000);
              __dst = (uint64_t)v19;
            }
            else
            {
              HIBYTE(v156) = *(_QWORD *)(v196 + 40);
              v19 = &__dst;
              if (!v18)
              {
                v20 = v10;
LABEL_53:
                *((_BYTE *)v19 + v18) = 0;
                if (SHIBYTE(v156) >= 0)
                  p_dst = &__dst;
                else
                  p_dst = (uint64_t *)__dst;
LABEL_56:
                v45 = *(const void **)(v7 + 32);
                if (v45)
                {
                  v46 = *(_QWORD *)(v7 + 40);
                  if (v46 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_197;
                  if (v46 >= 0x17)
                  {
                    v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v46 | 7) != 0x17)
                      v49 = v46 | 7;
                    v50 = v49 + 1;
                    v47 = operator new(v49 + 1);
                    v151 = v46;
                    v152 = v50 | 0x8000000000000000;
                    v150 = v47;
                  }
                  else
                  {
                    HIBYTE(v152) = *(_QWORD *)(v7 + 40);
                    v47 = &v150;
                    if (!v46)
                      goto LABEL_66;
                  }
                  memmove(v47, v45, v46);
LABEL_66:
                  *((_BYTE *)v47 + v46) = 0;
                  if (v152 >= 0)
                    v48 = &v150;
                  else
                    v48 = v150;
                }
                else
                {
                  v150 = 0;
                  v151 = 0;
                  v48 = &v150;
                  v152 = 0;
                }
                v51 = std::generic_category();
                v158 = 0;
                v159 = 0;
                v160 = 0;
                LODWORD(v177) = 0;
                v180 = 0;
                v181 = 0;
                v176 = (const char *)&unk_1E81A7208;
                v183 = &v158;
                v182 = 0;
                v179 = 0;
                v178 = 0uLL;
                v184 = (void **)&unk_1E813E940;
                v185 = "archive member %s is a MachO, while previous archive member %s was an IR LLVM object";
                v186 = (const char *)p_dst;
                v187 = v48;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v176, (uint64_t)&v184);
                v52 = v183;
                v53 = operator new();
                v188 = 260;
                v184 = v52;
                *(_QWORD *)v53 = off_1E81A0C88;
                llvm::Twine::str((llvm::Twine *)&v184, (_QWORD *)(v53 + 8));
                *(_QWORD *)(v53 + 32) = 22;
                *(_QWORD *)(v53 + 40) = v51;
                *(_BYTE *)(v53 + 48) = 1;
                v176 = (const char *)off_1E81A6E70;
                if (v182 == 1 && (_QWORD)v178)
                  MEMORY[0x1CAA32F9C](v178, 0x1000C8077774924);
                v10 = v20;
                if (SHIBYTE(v160) < 0)
                  operator delete(v158);
                *(_BYTE *)(a3 + 48) |= 1u;
                *(_QWORD *)a3 = v53;
                a2 = v125;
                if (SHIBYTE(v152) < 0)
                  goto LABEL_73;
                goto LABEL_74;
              }
            }
            v20 = v10;
            memmove(v19, v17, v18);
            goto LABEL_53;
          }
          if (!v8)
          {
            v7 = 0;
            v196 = 0;
            v41 = 1;
            v8 = v11;
            goto LABEL_78;
          }
          v30 = *(unsigned int *)(v8 + 52);
          v29 = *(unsigned int *)(v8 + 56);
          v32 = *(unsigned int *)(v196 + 52);
          v31 = *(unsigned int *)(v196 + 56);
          if ((_DWORD)v30 != (_DWORD)v32 || (_DWORD)v29 != (_DWORD)v31)
          {
            v34 = *(_QWORD *)(v196 + 32);
            v35 = *(_QWORD *)(v196 + 40);
            v134 = 1283;
            v131[0] = v10;
            v132 = v34;
            v133 = v35;
            v135[0] = v131;
            v136 = " cputype (";
            v137 = 770;
            v138[0] = v135;
            v118 = v118 & 0xFFFFFFFF00000000 | v32;
            v139 = v118;
            v140 = 2050;
            v141[0] = v138;
            v142 = ") and cpusubtype(";
            v143 = 770;
            v144[0] = v141;
            v145 = v119 & 0xFFFFFFFF00000000 | v31;
            v146 = 2050;
            v147[0] = v144;
            v148 = ") does not match previous archive members cputype (";
            v149 = 770;
            v150 = v147;
            v119 = v145;
            v120 = v120 & 0xFFFFFFFF00000000 | v30;
            v152 = v120;
            v153 = 2050;
            __dst = (uint64_t)&v150;
            v156 = ") and cpusubtype(";
            v157 = 770;
            v158 = &__dst;
            v121 = v121 & 0xFFFFFFFF00000000 | v29;
            v160 = v121;
            v161 = 2050;
            v184 = &v158;
            v186 = ") (all members must match) ";
            v188 = 770;
            v176 = (const char *)&v184;
            v178 = *(_OWORD *)(v8 + 32);
            LOWORD(v179) = 1282;
            llvm::Twine::str((llvm::Twine *)&v176, __p);
            if (v163 >= 0)
              v36 = __p;
            else
              v36 = (void **)__p[0];
            v37 = std::generic_category();
            v190 = 22;
            v191 = v37;
            v194 = v36;
            sub_1C5DF1730((_BYTE **)&v194, &v190, &v164);
            *(_BYTE *)(a3 + 48) |= 1u;
            *(_QWORD *)a3 = v164;
            v164 = 0;
            if (v163 < 0)
              operator delete(__p[0]);
            v7 = 0;
            goto LABEL_77;
          }
          v7 = 0;
          goto LABEL_104;
        }
        if (v12 != 3)
        {
          v24 = *(const char **)(v196 + 32);
          v25 = *(void **)(v196 + 40);
          v188 = 1283;
          v184 = (void **)v10;
          v186 = v24;
          v187 = v25;
          v176 = (const char *)&v184;
          *(_QWORD *)&v178 = " is neither a MachO file or an LLVM IR file (not allowed in an archive)";
          LOWORD(v179) = 770;
          llvm::Twine::str((llvm::Twine *)&v176, &v158);
          if (v160 >= 0)
            v26 = &v158;
          else
            v26 = v158;
          v27 = std::generic_category();
          __dst = 22;
          v155 = (size_t)v27;
          v150 = v26;
          sub_1C5DF1730((_BYTE **)&v150, &__dst, &v129);
          *(_BYTE *)(a3 + 48) |= 1u;
          *(_QWORD *)a3 = v129;
          v129 = 0;
          goto LABEL_32;
        }
        if (v8)
        {
          v21 = *(const void **)(v196 + 32);
          if (v21)
          {
            v22 = *(_QWORD *)(v196 + 40);
            if (v22 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_197;
            if (v22 >= 0x17)
            {
              v75 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17)
                v75 = v22 | 7;
              v76 = v75 + 1;
              v23 = (uint64_t *)operator new(v75 + 1);
              v155 = v22;
              v156 = (const char *)(v76 | 0x8000000000000000);
              __dst = (uint64_t)v23;
            }
            else
            {
              HIBYTE(v156) = *(_QWORD *)(v196 + 40);
              v23 = &__dst;
              if (!v22)
                goto LABEL_109;
            }
            memmove(v23, v21, v22);
LABEL_109:
            *((_BYTE *)v23 + v22) = 0;
            if (SHIBYTE(v156) >= 0)
              v74 = &__dst;
            else
              v74 = (uint64_t *)__dst;
          }
          else
          {
            __dst = 0;
            v155 = 0;
            v74 = &__dst;
            v156 = 0;
          }
          v77 = *(const void **)(v8 + 32);
          if (v77)
          {
            v78 = *(_QWORD *)(v8 + 40);
            if (v78 > 0x7FFFFFFFFFFFFFF7)
LABEL_197:
              abort();
            if (v78 >= 0x17)
            {
              v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v78 | 7) != 0x17)
                v81 = v78 | 7;
              v82 = v81 + 1;
              v79 = operator new(v81 + 1);
              v151 = v78;
              v152 = v82 | 0x8000000000000000;
              v150 = v79;
            }
            else
            {
              HIBYTE(v152) = *(_QWORD *)(v8 + 40);
              v79 = &v150;
              if (!v78)
                goto LABEL_122;
            }
            memmove(v79, v77, v78);
LABEL_122:
            *((_BYTE *)v79 + v78) = 0;
            if (v152 >= 0)
              v80 = &v150;
            else
              v80 = v150;
          }
          else
          {
            v150 = 0;
            v151 = 0;
            v80 = &v150;
            v152 = 0;
          }
          v83 = std::generic_category();
          v158 = 0;
          v159 = 0;
          v160 = 0;
          LODWORD(v177) = 0;
          v180 = 0;
          v181 = 0;
          v176 = (const char *)&unk_1E81A7208;
          v183 = &v158;
          v182 = 0;
          v179 = 0;
          v178 = 0uLL;
          v184 = (void **)&unk_1E813E940;
          v185 = "archive member '%s' is an LLVM IR object, while previous archive member '%s' was a MachO";
          v186 = (const char *)v74;
          v187 = v80;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v176, (uint64_t)&v184);
          v84 = v183;
          v85 = operator new();
          v188 = 260;
          v184 = v84;
          *(_QWORD *)v85 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v184, (_QWORD *)(v85 + 8));
          *(_QWORD *)(v85 + 32) = 22;
          *(_QWORD *)(v85 + 40) = v83;
          *(_BYTE *)(v85 + 48) = 1;
          v176 = (const char *)off_1E81A6E70;
          if (v182 == 1 && (_QWORD)v178)
            MEMORY[0x1CAA32F9C](v178, 0x1000C8077774924);
          v10 = "archive member ";
          if (SHIBYTE(v160) < 0)
            operator delete(v158);
          *(_BYTE *)(a3 + 48) |= 1u;
          *(_QWORD *)a3 = v85;
          if (SHIBYTE(v152) < 0)
LABEL_73:
            operator delete(v150);
LABEL_74:
          if ((SHIBYTE(v156) & 0x80000000) == 0)
            goto LABEL_77;
          v28 = (void *)__dst;
LABEL_76:
          operator delete(v28);
          goto LABEL_77;
        }
        if (v7)
        {
          v54 = **(_QWORD **)(v196 + 48);
          v57 = *(_QWORD *)(v54 + 216);
          v55 = v54 + 216;
          v56 = v57;
          v58 = *(_BYTE *)(v55 + 23);
          if (v58 >= 0)
            v59 = v55;
          else
            v59 = v56;
          v60 = *(_QWORD *)(v55 + 8);
          if (v58 >= 0)
            v61 = v58 & 0x7F;
          else
            v61 = v60;
          sub_1C5A0C09C((uint64_t)&v194, v59, v61);
          v62 = **(_QWORD **)(v7 + 48);
          v65 = *(_QWORD *)(v62 + 216);
          v63 = v62 + 216;
          v64 = v65;
          v66 = *(_BYTE *)(v63 + 23);
          if (v66 >= 0)
            v67 = v63;
          else
            v67 = v64;
          v68 = *(_QWORD *)(v63 + 8);
          if (v66 >= 0)
            v69 = v66 & 0x7F;
          else
            v69 = v68;
          sub_1C5A0C09C((uint64_t)&v192, v67, v69);
          if ((v195 & 1) != 0)
          {
            v86 = v194;
            v194 = 0;
            *(_BYTE *)(a3 + 48) |= 1u;
            *(_QWORD *)a3 = v86;
            v71 = v116;
            v70 = v117;
            v73 = v123;
            goto LABEL_139;
          }
          v71 = v116;
          v70 = v117;
          v72 = v122;
          v73 = v123;
          if ((v193 & 1) != 0)
          {
            v87 = v192;
            v192 = 0;
            *(_BYTE *)(a3 + 48) |= 1u;
            *(_QWORD *)a3 = v87;
            goto LABEL_140;
          }
          if (v194 != v192)
          {
            v88 = *(_QWORD *)(v11 + 32);
            v89 = *(_QWORD *)(v11 + 40);
            v134 = 1283;
            v131[0] = v10;
            v132 = v88;
            v133 = v89;
            v135[0] = v131;
            v136 = " cputype (";
            v137 = 770;
            v138[0] = v135;
            v122 = v122 & 0xFFFFFFFF00000000 | v194;
            v139 = v72 & 0xFFFFFFFF00000000 | v194;
            v140 = 2050;
            v141[0] = v138;
            v142 = ") and cpusubtype(";
            v143 = 770;
            v144[0] = v141;
            v124 = v123 & 0xFFFFFFFF00000000 | HIDWORD(v194);
            v145 = v73 & 0xFFFFFFFF00000000 | HIDWORD(v194);
            v146 = 2050;
            v147[0] = v144;
            v148 = ") does not match previous archive members cputype (";
            v149 = 770;
            v150 = v147;
            v90 = v117 & 0xFFFFFFFF00000000 | v192;
            v152 = v90;
            v153 = 2050;
            __dst = (uint64_t)&v150;
            v156 = ") and cpusubtype(";
            v157 = 770;
            v158 = &__dst;
            v91 = v116 & 0xFFFFFFFF00000000 | HIDWORD(v192);
            v160 = v91;
            v161 = 2050;
            v184 = &v158;
            v186 = ") (all members must match) ";
            v188 = 770;
            v176 = (const char *)&v184;
            v178 = *(_OWORD *)(v7 + 32);
            LOWORD(v179) = 1282;
            llvm::Twine::str((llvm::Twine *)&v176, __p);
            if (v163 >= 0)
              v92 = __p;
            else
              v92 = (void **)__p[0];
            v93 = std::generic_category();
            v190 = 22;
            v191 = v93;
            v189 = v92;
            sub_1C5DF1730((_BYTE **)&v189, &v190, &v130);
            *(_BYTE *)(a3 + 48) |= 1u;
            *(_QWORD *)a3 = v130;
            v130 = 0;
            if (v163 < 0)
              operator delete(__p[0]);
            v70 = v90;
            v73 = v124;
            v71 = v91;
LABEL_139:
            v72 = v122;
LABEL_140:
            v122 = v72;
            v123 = v73;
            v116 = v71;
            v117 = v70;
            if ((v193 & 1) != 0 && v192)
              (*((void (**)(void **))*v192 + 1))(v192);
            if ((v195 & 1) != 0 && v194)
              (*((void (**)(void **))*v194 + 1))(v194);
            v8 = 0;
LABEL_77:
            v41 = 0;
            goto LABEL_78;
          }
          v8 = 0;
LABEL_104:
          v41 = 1;
          goto LABEL_78;
        }
        v8 = 0;
        v196 = 0;
        v41 = 1;
        v7 = v11;
      }
LABEL_78:
      if (v196)
        (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
      if (!v41)
      {
        v101 = v168;
        v168 = 0;
        if (v101)
          ((void (*)(const std::error_category *))v101->name)(v101);
        v102 = v172;
        v172 = 0;
        if (v102)
          (*(void (**)(uint64_t))(*(_QWORD *)v102 + 16))(v102);
        v103 = v203;
        v203 = 0;
        if (v103)
          (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
        v104 = *((_QWORD *)&v198 + 1);
        *((_QWORD *)&v198 + 1) = 0;
        if (!v104)
          goto LABEL_183;
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
        if (v7)
          goto LABEL_184;
        goto LABEL_185;
      }
      sub_1C624B980((uint64_t)&v171);
    }
    while (v174 > 7 || v170 >= 8);
  }
  v94 = v168;
  v168 = 0;
  if (v94)
    ((void (*)(const std::error_category *))v94->name)(v94);
  v95 = v172;
  v172 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
  v96 = v203;
  v203 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
  v97 = *((_QWORD *)&v198 + 1);
  *((_QWORD *)&v198 + 1) = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97);
  v98 = v175;
  if (v175)
  {
    v112 = *((_QWORD *)this + 4);
    v113 = *((_QWORD *)this + 5);
    LOWORD(v200) = 261;
    *(_QWORD *)&v198 = v112;
    *((_QWORD *)&v198 + 1) = v113;
    v175 = 0;
    v176 = v98;
    sub_1C61D4644((llvm::Twine *)&v198, 0, 0, (uint64_t *)&v176, &v128);
    if (v176)
      (*(void (**)(const char *))(*(_QWORD *)v176 + 8))(v176);
    *(_BYTE *)(a3 + 48) |= 1u;
    *(_QWORD *)a3 = v128;
    v128 = 0;
    if (!v7)
      goto LABEL_185;
    goto LABEL_184;
  }
  if (v8 | v7)
  {
    if (v8)
    {
      if ((*(_DWORD *)(v8 + 8) & 0xFFFFFFFE) == 0x12)
        v99 = 3;
      else
        v99 = 2;
      llvm::object::Slice::Slice((llvm::object::Slice *)&v198, (const llvm::object::MachOObjectFile *)v8, v99);
      *(_QWORD *)&v198 = this;
      *(_BYTE *)(a3 + 48) &= ~1u;
      v100 = v199;
      *(_OWORD *)a3 = v198;
      *(_OWORD *)(a3 + 16) = v100;
      *(_QWORD *)(a3 + 32) = v200;
      *(_DWORD *)(a3 + 40) = v201;
      if (!v7)
      {
LABEL_185:
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        goto LABEL_187;
      }
    }
    else
    {
      llvm::object::Slice::create((llvm::object::Slice *)v7, 0, (uint64_t)&v198);
      if ((v202[0] & 1) != 0)
      {
        v114 = *((_QWORD *)this + 4);
        v115 = *((_QWORD *)this + 5);
        LOWORD(v179) = 261;
        v176 = (const char *)v114;
        v177 = v115;
        v171 = (void *)v198;
        sub_1C61D4644((llvm::Twine *)&v176, 0, 0, (uint64_t *)&v171, &v126);
        if (v171)
          (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
        *(_BYTE *)(a3 + 48) |= 1u;
        *(_QWORD *)a3 = v126;
        v126 = 0;
      }
      else
      {
        v109 = v200;
        *(_QWORD *)&v198 = this;
        *(_BYTE *)(a3 + 48) &= ~1u;
        v110 = v199;
        *(_OWORD *)a3 = v198;
        *(_OWORD *)(a3 + 16) = v110;
        *(_QWORD *)(a3 + 32) = v109;
        v199 = 0uLL;
        v200 = 0;
        *(_DWORD *)(a3 + 40) = v201;
      }
      v8 = 0;
LABEL_183:
      if (!v7)
        goto LABEL_185;
    }
LABEL_184:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_185;
  }
  v105 = *((_QWORD *)this + 4);
  v106 = *((_QWORD *)this + 5);
  LOWORD(v179) = 1283;
  v176 = "empty archive with no architecture specification: ";
  *(_QWORD *)&v178 = v105;
  *((_QWORD *)&v178 + 1) = v106;
  *(_QWORD *)&v198 = &v176;
  *(_QWORD *)&v199 = " (can't determine architecture for it)";
  LOWORD(v200) = 770;
  v107 = &v171;
  llvm::Twine::str((llvm::Twine *)&v198, &v171);
  if (v173 < 0)
    v107 = (void **)v171;
  v108 = std::generic_category();
  v167 = 22;
  v168 = v108;
  v184 = v107;
  sub_1C5DF1730((_BYTE **)&v184, &v167, &v127);
  *(_BYTE *)(a3 + 48) |= 1u;
  *(_QWORD *)a3 = v127;
  v127 = 0;
  if (SHIBYTE(v173) < 0)
    operator delete(v171);
LABEL_187:
  result = v175;
  if (v175)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v175 + 8))(v175);
  return result;
}

void sub_1C5A0C09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  void *__p[2];
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = 261;
  v9[0] = a2;
  v9[1] = a3;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v9);
  llvm::MachO::getCPUType((llvm::MachO *)__p, (uint64_t)&v15);
  llvm::MachO::getCPUSubType((llvm::MachO *)__p, (uint64_t)&v13);
  if ((v16 & 1) != 0)
  {
    v6 = v15;
    v7 = v14;
    if ((v14 & 1) != 0)
      v8 = v13;
    else
      v8 = v13;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v6;
    if ((v7 & 1) != 0 && v8)
      (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    if ((v14 & 1) != 0)
    {
      v4 = v13;
      v5 = *(_BYTE *)(a1 + 8) | 1;
    }
    else
    {
      v4 = v15 | ((unint64_t)v13 << 32);
      v5 = *(_BYTE *)(a1 + 8) & 0xFE;
    }
    *(_BYTE *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v4;
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void llvm::object::Slice::create(llvm::object::Slice *this@<X0>, const llvm::object::IRObjectFile *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  llvm::Triple *ArchName;
  unint64_t v17;
  llvm::Triple *v18;
  size_t v19;
  _QWORD *p_dst;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  _QWORD *__dst;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v3 = (int)a2;
  v31 = *MEMORY[0x1E0C80C00];
  v6 = **((_QWORD **)this + 6);
  v9 = *(_QWORD *)(v6 + 216);
  v7 = v6 + 216;
  v8 = v9;
  v10 = *(_BYTE *)(v7 + 23);
  if (v10 >= 0)
    v11 = v7;
  else
    v11 = v8;
  v12 = *(_QWORD *)(v7 + 8);
  if (v10 >= 0)
    v13 = v10 & 0x7F;
  else
    v13 = v12;
  sub_1C5A0C09C((uint64_t)&v29, v11, v13);
  if ((v30 & 1) != 0)
  {
    v21 = v29;
    *(_BYTE *)(a3 + 48) |= 1u;
    *(_QWORD *)a3 = v21;
    return;
  }
  v14 = v29;
  v15 = HIDWORD(v29);
  llvm::object::MachOObjectFile::getArchTriple(v29, 0, HIDWORD(v29), 0, __p);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)__p);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v18 = ArchName;
  v19 = v17;
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    p_dst = operator new(v22 + 1);
    *(_QWORD *)&v28 = v19;
    *((_QWORD *)&v28 + 1) = v23 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v28) = v17;
    p_dst = &__dst;
    if (!v17)
      goto LABEL_17;
  }
  memmove(p_dst, v18, v19);
LABEL_17:
  *((_BYTE *)p_dst + v19) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  v24 = v28;
  *(_QWORD *)(a3 + 16) = __dst;
  *(_QWORD *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)&v28 + 7);
  LOBYTE(v24) = HIBYTE(v28);
  *(_BYTE *)(a3 + 48) &= ~1u;
  *(_QWORD *)a3 = this;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v15;
  *(_BYTE *)(a3 + 39) = v24;
  *(_DWORD *)(a3 + 40) = v3;
  if ((v30 & 1) != 0)
  {
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
}

void llvm::object::writeUniversalBinaryToStream(const char **this@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  char v24;
  char v25;
  char v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  const std::error_category *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  const char *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  size_t v38;
  uint64_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  llvm::raw_ostream *v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  char v51[4];
  unsigned int v52;
  void *__dst[2];
  uint64_t v54;
  _QWORD v55[4];
  __int16 v56;
  _QWORD v57[4];
  __int16 v58;
  _QWORD *v59;
  __int128 v60;
  __int16 v61;
  _QWORD v62[4];
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  void *__p[2];
  uint64_t v67;
  __int16 v68;
  void **v69;
  void **v70;
  void **v71;
  __int16 v72;
  _QWORD v73[2];
  const char *v74;
  __int16 v75;
  void **v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD v79[2];
  __int16 v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD v84[7];

  v5 = a3;
  v6 = a2;
  v84[5] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v51 = -889275714;
  v52 = a3;
  v82 = v84;
  v83 = 0x200000000;
  v65 = 20 * a3 + 8;
  if (!a3)
  {
    v81 = 0;
    v77 = (uint64_t)v79;
    v78 = 0x200000000;
    goto LABEL_41;
  }
  LODWORD(v8) = 0;
  v9 = a2 + 3;
  v10 = 48 * a3;
  while (1)
  {
    v11 = *((_DWORD *)v9 + 4);
    v12 = (v65 + (1 << v11) - 1) & -(1 << v11);
    v65 = v12;
    if (HIDWORD(v12))
      break;
    v77 = *(v9 - 2);
    LODWORD(v78) = v12;
    HIDWORD(v78) = *(_QWORD *)(*(v9 - 3) + 24);
    LODWORD(v79[0]) = v11;
    v65 = v12 + HIDWORD(v78);
    v13 = v82;
    if (v8 >= HIDWORD(v83))
    {
      v17 = v8 + 1;
      if (v82 <= &v77 && (uint64_t *)((char *)v82 + 20 * v8) > &v77)
      {
        v18 = (char *)&v77 - (char *)v82;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v17, 20);
        v13 = v82;
        v14 = (uint64_t *)((char *)v82 + v18);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v17, 20);
        v14 = &v77;
        v13 = v82;
      }
    }
    else
    {
      v14 = &v77;
    }
    v15 = (char *)v13 + 20 * v83;
    v16 = *(_OWORD *)v14;
    *((_DWORD *)v15 + 4) = *((_DWORD *)v14 + 4);
    *(_OWORD *)v15 = v16;
    v8 = (v83 + 1);
    LODWORD(v83) = v83 + 1;
    v9 += 6;
    v10 -= 48;
    if (!v10)
    {
      v81 = 0;
      v77 = (uint64_t)v79;
      v78 = 0x200000000;
      if ((_DWORD)v8)
      {
        if (v82 == v84)
        {
          v32 = v8;
          if (v8 < 3
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v8, 20), (v32 = v83) != 0))
          {
            memcpy((void *)v77, v82, 20 * v32);
          }
          LODWORD(v78) = v8;
        }
        else
        {
          v77 = (uint64_t)v82;
          v78 = __PAIR64__(HIDWORD(v83), v8);
          v82 = v84;
          HIDWORD(v83) = 0;
        }
        LODWORD(v83) = 0;
      }
      goto LABEL_41;
    }
  }
  v55[0] = "fat file too large to be created because the offset field in struct fat_arch is only 32-bits and the offset ";
  v55[2] = &v65;
  v56 = 3075;
  v57[0] = v55;
  v57[2] = " for ";
  v58 = 770;
  v19 = *(v9 - 3);
  v59 = v57;
  v60 = *(_OWORD *)(v19 + 32);
  v61 = 1282;
  v62[0] = &v59;
  v62[2] = " for architecture ";
  v63 = 770;
  v20 = (void **)(v9 - 1);
  if (*((char *)v9 + 15) < 0)
  {
    if (*v9)
    {
      sub_1C47EBC30(__dst, *v20, *v9);
      goto LABEL_22;
    }
  }
  else if (*((_BYTE *)v9 + 15))
  {
    v21 = *(_OWORD *)v20;
    v54 = v9[1];
    *(_OWORD *)__dst = v21;
    goto LABEL_22;
  }
  v22 = *((unsigned int *)v9 - 4);
  __p[0] = "unknown(";
  v67 = v22;
  v68 = 2051;
  v69 = __p;
  v71 = (void **)",";
  v72 = 770;
  v23 = (const char *)(*((_DWORD *)v9 - 3) & 0xFFFFFF);
  v73[0] = &v69;
  v74 = v23;
  v75 = 2050;
  v77 = (uint64_t)v73;
  v79[0] = ")";
  v80 = 770;
  llvm::Twine::str((llvm::Twine *)&v77, __dst);
LABEL_22:
  v24 = v63;
  if (v63 == 1)
  {
    v27 = __dst;
    v69 = __dst;
    v72 = 260;
    v25 = 4;
    v28 = v70;
LABEL_29:
    v73[0] = v27;
    v73[1] = v28;
    v74 = "exceeds that.";
    v26 = 3;
    goto LABEL_30;
  }
  if ((_BYTE)v63)
  {
    v29 = (void **)v62[0];
    v25 = 2;
    if (HIBYTE(v63) != 1)
    {
      v24 = 2;
      v29 = (void **)v62;
    }
    v69 = v29;
    v70 = (void **)v62[1];
    v28 = __dst;
    v71 = __dst;
    LOBYTE(v72) = v24;
    HIBYTE(v72) = 4;
    v27 = (void **)&v69;
    goto LABEL_29;
  }
  v25 = 0;
  v72 = 256;
  v26 = 1;
LABEL_30:
  LOBYTE(v75) = v25;
  HIBYTE(v75) = v26;
  v30 = __p;
  llvm::Twine::str((llvm::Twine *)v73, __p);
  if (v67 < 0)
    v30 = (void **)__p[0];
  v31 = std::generic_category();
  v77 = 22;
  v78 = (unint64_t)v31;
  v76 = v30;
  sub_1C5DF1730((_BYTE **)&v76, &v77, &v64);
  v81 = -1;
  v77 = v64;
  v64 = 0;
  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54) < 0)
    operator delete(__dst[0]);
LABEL_41:
  if (v82 != v84)
    free(v82);
  if ((v81 & 1) != 0)
  {
    *a4 = v77;
  }
  else
  {
    v82 = v84;
    v83 = 0x200000000;
    v33 = v78;
    if ((_DWORD)v78)
    {
      v34 = v78;
      if (v78 < 3
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v78, 20),
            (v34 = v78) != 0))
      {
        memcpy(v82, (const void *)v77, 20 * v34);
      }
      LODWORD(v83) = v33;
    }
    *(_DWORD *)v51 = -1095041334;
    v52 = bswap32(v5);
    llvm::raw_ostream::write((llvm::raw_ostream *)this, v51, 8uLL);
    v35 = (const char *)v82;
    if ((_DWORD)v83)
    {
      v36 = (int8x16_t *)((char *)v82 + 20 * v83);
      v37 = (int8x16_t *)v82;
      do
      {
        *v37 = vrev32q_s8(*v37);
        v37[1].i32[0] = bswap32(v37[1].u32[0]);
        v37 = (int8x16_t *)((char *)v37 + 20);
      }
      while (v37 != v36);
      v38 = 20 * v83;
    }
    else
    {
      v38 = 0;
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)this, v35, v38);
    v39 = v82;
    if ((_DWORD)v83)
    {
      v40 = (int8x16_t *)((char *)v82 + 20 * v83);
      v41 = (int8x16_t *)v82;
      do
      {
        *v41 = vrev32q_s8(*v41);
        v41[1].i32[0] = bswap32(v41[1].u32[0]);
        v41 = (int8x16_t *)((char *)v41 + 20);
      }
      while (v41 != v40);
    }
    if (v5)
    {
      v42 = 20 * v83 + 8;
      v43 = 8;
      do
      {
        v44 = *v6;
        v6 += 6;
        v45 = *(const char **)(v44 + 16);
        v46 = *(_QWORD *)(v44 + 24);
        v47 = llvm::raw_ostream::write_zeros((llvm::raw_ostream *)this, *(_DWORD *)((char *)v39 + v43) - v42);
        llvm::raw_ostream::write(v47, v45, v46);
        v39 = v82;
        v42 = v46 + *(_DWORD *)((char *)v82 + v43);
        v43 += 20;
        --v5;
      }
      while (v5);
    }
    v48 = this[4];
    v49 = this[2];
    if (v48 != v49)
    {
      this[4] = v49;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v49, v48 - v49);
      v39 = v82;
    }
    *a4 = 0;
    if (v39 != v84)
      free(v39);
    v50 = v77;
    if ((v81 & 1) != 0)
    {
      v77 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    else if ((_QWORD *)v77 != v79)
    {
      free((void *)v77);
    }
  }
}

void llvm::object::writeUniversalBinary(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t *v13;
  void *v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  const llvm::Twine *v19;
  char *v20;
  char *v21;
  uint64_t v23[4];
  __int16 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 __p;
  uint64_t v30;
  int v31;
  char *v32;
  void *v33;
  char v34;
  int v35;
  char v36;
  uint64_t v37;

  v5 = a4;
  v37 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v10 = &a1[6 * a2];
    v11 = a1 + 2;
    while (1)
    {
      v28 = *((_OWORD *)v11 - 1);
      if (*((char *)v11 + 23) < 0)
      {
        sub_1C47EBC30(&__p, (void *)*v11, v11[1]);
      }
      else
      {
        v12 = *(_OWORD *)v11;
        v30 = v11[2];
        __p = v12;
      }
      v13 = v11 - 2;
      v31 = *((_DWORD *)v11 + 6);
      v15 = *(char **)(v28 + 32);
      v14 = *(void **)(v28 + 40);
      LOWORD(v35) = 261;
      v32 = v15;
      v33 = v14;
      v16 = llvm::sys::fs::access((unsigned __int8 *)&v32, 2);
      if (SHIBYTE(v30) < 0)
        operator delete((void *)__p);
      if (!v16)
        break;
      v11 += 6;
      if (v13 + 6 == v10)
      {
        v17 = 438;
        goto LABEL_13;
      }
    }
    v17 = 511;
LABEL_13:
    v5 = a4;
  }
  else
  {
    v17 = 438;
  }
  LOWORD(v30) = 773;
  *(_QWORD *)&v28 = a3;
  *((_QWORD *)&v28 + 1) = v5;
  *(_QWORD *)&__p = ".temp-universal-%%%%%%";
  llvm::sys::fs::TempFile::create((uint64_t)&v28, v17, 0, (uint64_t)&v32);
  if ((v36 & 1) != 0)
  {
    v18 = v32;
    v32 = 0;
    *a5 = v18;
LABEL_23:
    v21 = v32;
    v32 = 0;
    if (v21)
      (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
    return;
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v28, v35, 0, 0, 0);
  llvm::object::writeUniversalBinaryToStream((const char **)&v28, a1, a2, v23);
  v20 = (char *)v23[0];
  if (v23[0])
  {
    llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)&v32, &v27);
    if (v27)
    {
      v25 = v27;
      v26 = v20;
      v27 = 0;
      sub_1C624E8DC(&v26, &v25, a5);
      if (v25)
        (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
      if (v26)
        (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
      if (v27)
        (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
    }
    else
    {
      *a5 = v20;
    }
  }
  else
  {
    v24 = 261;
    v23[0] = a3;
    v23[1] = v5;
    llvm::sys::fs::TempFile::keep((llvm::sys::fs::TempFile *)&v32, (const llvm::Twine *)v23, v19, a5);
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v28);
  if ((v36 & 1) != 0)
    goto LABEL_23;
  if (v34 < 0)
    operator delete(v33);
}

void llvm::object::WasmSymbol::print(const void ***this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  char *v5;
  const void *v6;
  char *v7;
  void **v8;
  size_t v9;
  llvm::raw_ostream *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 4)
  {
    *(_BYTE *)(v4 + 4) = 61;
    *(_DWORD *)v4 = 1701667150;
    v5 = (char *)(*((_QWORD *)a2 + 4) + 5);
    *((_QWORD *)a2 + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Name=", 5uLL);
    v5 = (char *)*((_QWORD *)a2 + 4);
  }
  v6 = **this;
  v7 = (char *)(*this)[1];
  if ((unint64_t)v7 <= *((_QWORD *)a2 + 3) - (_QWORD)v5)
  {
    if (v7)
    {
      memcpy(v5, v6, (size_t)(*this)[1]);
      v5 = &v7[*((_QWORD *)a2 + 4)];
      *((_QWORD *)a2 + 4) = v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v6, (size_t)(*this)[1]);
    v5 = (char *)*((_QWORD *)a2 + 4);
  }
  if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)(v5 + 3) = 1029992041;
    *(_DWORD *)v5 = 1766531116;
    *((_QWORD *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", Kind=", 7uLL);
  }
  llvm::wasm::toString(*((unsigned __int8 *)*this + 16));
  if (v22 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if (v22 >= 0)
    v9 = v22 & 0x7F;
  else
    v9 = (size_t)__p[1];
  v10 = llvm::raw_ostream::write(a2, (const char *)v8, v9);
  v12 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 30768;
    *(_QWORD *)v12 = *(_QWORD *)", Flags=0x";
    *((_QWORD *)a2 + 4) += 10;
  }
  else
  {
    v10 = llvm::raw_ostream::write(a2, ", Flags=0x", 0xAuLL);
  }
  v20 = *((unsigned int *)*this + 5);
  llvm::Twine::printOneChild((uint64_t)v10, a2, (uint64_t)&v20, v11, 14);
  llvm::Twine::printOneChild(v13, a2, 0, v14, 1);
  if (v22 < 0)
    operator delete(__p[0]);
  if (*((_BYTE *)*this + 16) == 1)
  {
    if ((*((_BYTE *)*this + 20) & 0x10) != 0)
      return;
    v15 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) > 9)
    {
      *(_WORD *)(v15 + 8) = 15732;
      *(_QWORD *)v15 = *(_QWORD *)", Segment=";
      *((_QWORD *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", Segment=", 0xAuLL);
    }
    sub_1C5E21910(a2, *((unsigned int *)*this + 24), 0, 0, 0);
    v16 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) > 8)
    {
      *(_BYTE *)(v16 + 8) = 61;
      *(_QWORD *)v16 = *(_QWORD *)", Offset=";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", Offset=", 9uLL);
    }
    sub_1C5E21910(a2, (unint64_t)(*this)[13], 0, 0, 0);
    v17 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v17 > 6uLL)
    {
      *(_DWORD *)((char *)v17 + 3) = 1030060649;
      *v17 = 1767055404;
      *((_QWORD *)a2 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", Size=", 7uLL);
    }
    v18 = (unint64_t)(*this)[14];
  }
  else
  {
    v19 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v19) > 0xB)
    {
      *(_DWORD *)(v19 + 8) = 1031300452;
      *(_QWORD *)v19 = *(_QWORD *)", ElemIndex=";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", ElemIndex=", 0xCuLL);
    }
    v18 = *((unsigned int *)*this + 24);
  }
  sub_1C5E21910(a2, v18, 0, 0, 0);
}

uint64_t llvm::object::WasmObjectFile::WasmObjectFile(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v16;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  void **v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void **v40;
  void **v41;
  __int128 v42;
  uint64_t v43;
  const char *v44;
  unint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _DWORD *v56;
  void **v57;
  char *v58;
  std::string v59;
  void *__p[2];
  std::string::size_type v61;
  void **v62;
  void **v63;
  char *v64;
  void **v65;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 8) = 20;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = (uint64_t *)(a1 + 72);
  *(_QWORD *)a1 = &off_1E818A9F8;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = a1 + 88;
  *(_BYTE *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = 0uLL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 584) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 692) = 0u;
  v10 = *(_DWORD **)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = 4;
  if (v11 < 4)
    v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v12;
  if (v11 < 4 || *v10 != 1836278016)
  {
    v13 = operator new();
    v14 = "invalid magic number";
LABEL_6:
    *(_QWORD *)&v51 = v14;
    LOWORD(v53) = 259;
LABEL_7:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v16 = qword_1EF8F7238[0];
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v51, (_QWORD *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = 3;
    *(_QWORD *)(v13 + 40) = v16;
    *(_BYTE *)(v13 + 48) = 1;
    *a3 = v13;
    return a1;
  }
  v56 = v10;
  v58 = (char *)v10 + v11;
  if ((uint64_t)v11 <= 7)
  {
    v13 = operator new();
    v14 = "missing version number";
    goto LABEL_6;
  }
  v18 = v10[1];
  *(_DWORD *)(a1 + 64) = v18;
  if ((_DWORD)v18 != 1)
  {
    *(_QWORD *)&v51 = "invalid version number: ";
    *(_QWORD *)&v52 = v18;
    LOWORD(v53) = 2051;
    v13 = operator new();
    goto LABEL_7;
  }
  v67[0] = 0;
  v67[1] = 0;
  v68 = 0;
  if (v11 >= 9)
  {
    v19 = (void **)(v10 + 2);
    while (1)
    {
      HIDWORD(v51) = 0;
      *(_QWORD *)&v52 = 0;
      v53 = v9;
      v54 = v9;
      v55 = 0;
      DWORD2(v52) = -1;
      *(_QWORD *)((char *)&v51 + 4) = ((_DWORD)v19 - (_DWORD)v56);
      v21 = *(unsigned __int8 *)v19;
      v20 = *(unsigned __int8 *)v19;
      v57 = (void **)((char *)v19 + 1);
      LODWORD(v51) = v21;
      v22 = sub_1C5A12990((uint64_t)&v56);
      if (HIDWORD(v22))
        llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
      v23 = v22;
      if (!v22)
        break;
      v24 = v57;
      v25 = (unint64_t)v58;
      if ((char *)v57 + v22 > v58)
      {
        v43 = operator new();
        v44 = "section too large";
        goto LABEL_38;
      }
      if ((_DWORD)v20)
      {
        v28 = 0;
        v26 = 0;
      }
      else
      {
        v62 = v57;
        v63 = v57;
        v64 = (char *)v57 + v22;
        v26 = sub_1C5A0EE78((uint64_t)&v62);
        v28 = v27;
        *((_QWORD *)&v51 + 1) = v26;
        *(_QWORD *)&v52 = v27;
        v24 = (void **)((char *)v24 + ((_DWORD)v63 - (_DWORD)v62));
        v23 -= (_DWORD)v63 - (_DWORD)v62;
      }
      if ((llvm::object::WasmSectionOrderChecker::isValidSectionOrder((uint64_t)v67, v20, v26, v28) & 1) == 0)
      {
        sub_1C5A128A4((unsigned int *)&v51, (uint64_t)&v59);
        v47 = std::string::insert(&v59, 0, "out of order section type: ");
        v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v43 = operator new();
        LOWORD(v66) = 260;
        v62 = __p;
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v50 = qword_1EF8F7238[0];
        *(_QWORD *)v43 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v62, (_QWORD *)(v43 + 8));
        *(_QWORD *)(v43 + 32) = 3;
        *(_QWORD *)(v43 + 40) = v50;
        *(_BYTE *)(v43 + 48) = 1;
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        goto LABEL_47;
      }
      *(_QWORD *)&v53 = v24;
      *((_QWORD *)&v53 + 1) = v23;
      v19 = (void **)((char *)v24 + v23);
      v57 = v19;
      *a3 = 0;
      llvm::object::WasmObjectFile::parseSection((_QWORD *)a1, (uint64_t)&v51, (uint64_t *)&v62);
      v29 = v62;
      *a3 = v62;
      if (!v29)
      {
        v31 = *(_QWORD *)(a1 + 80);
        v30 = *(_QWORD *)(a1 + 88);
        if (v31 >= v30)
        {
          v35 = 0x8E38E38E38E38E39 * ((uint64_t)(v31 - *v7) >> 3);
          v36 = v35 + 1;
          if (v35 + 1 > 0x38E38E38E38E38ELL)
            abort();
          v37 = 0x8E38E38E38E38E39 * ((uint64_t)(v30 - *v7) >> 3);
          if (2 * v37 > v36)
            v36 = 2 * v37;
          if (v37 >= 0x1C71C71C71C71C7)
            v38 = 0x38E38E38E38E38ELL;
          else
            v38 = v36;
          v66 = v8;
          if (v38 > 0x38E38E38E38E38ELL)
            sub_1C4764EE4();
          v39 = 9 * v38;
          v40 = (void **)operator new(72 * v38);
          v41 = &v40[9 * v35];
          v62 = v40;
          v63 = v41;
          v65 = &v40[v39];
          v42 = v52;
          *(_OWORD *)v41 = v51;
          *((_OWORD *)v41 + 1) = v42;
          *((_OWORD *)v41 + 2) = v53;
          v41[7] = 0;
          v41[8] = 0;
          v41[6] = 0;
          sub_1C54B5B50(v41 + 6, 0, 0, 0);
          v64 = (char *)(v41 + 9);
          sub_1C62DDD7C(v7, &v62);
          v34 = *(_QWORD *)(a1 + 80);
          sub_1C62DDE20((uint64_t)&v62);
        }
        else
        {
          v32 = v51;
          v33 = v53;
          *(_OWORD *)(v31 + 16) = v52;
          *(_OWORD *)(v31 + 32) = v33;
          *(_OWORD *)v31 = v32;
          *(_QWORD *)(v31 + 56) = 0;
          *(_QWORD *)(v31 + 64) = 0;
          *(_QWORD *)(v31 + 48) = 0;
          sub_1C54B5B50((_QWORD *)(v31 + 48), 0, 0, 0);
          v34 = v31 + 72;
        }
        *(_QWORD *)(a1 + 80) = v34;
        v9 = 0uLL;
        if ((unint64_t)v19 < v25)
          continue;
      }
      goto LABEL_49;
    }
    v43 = operator new();
    v44 = "zero length section";
LABEL_38:
    v62 = (void **)v44;
    LOWORD(v66) = 259;
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v46 = qword_1EF8F7238[0];
    *(_QWORD *)v43 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v62, (_QWORD *)(v43 + 8));
    *(_QWORD *)(v43 + 32) = 3;
    *(_QWORD *)(v43 + 40) = v46;
    *(_BYTE *)(v43 + 48) = 1;
LABEL_47:
    *a3 = v43;
    if ((_QWORD)v54)
    {
      *((_QWORD *)&v54 + 1) = v54;
      operator delete((void *)v54);
    }
  }
LABEL_49:
  if (!*a3)
    *a3 = 0;
  return a1;
}

void llvm::object::WasmObjectFile::parseTypeSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  int v7;
  uint64_t *v8;
  const char *v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t *v47;
  const char *v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _DWORD v55[6];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
  {
LABEL_62:
    v44 = "LEB is outside Varuint32 range";
    goto LABEL_61;
  }
  v7 = v6;
  v46 = a1 + 35;
  sub_1C62DD1F8((uint64_t)(a1 + 35), v6);
  v8 = &v52;
  v9 = "invalid signature type";
  while (v7)
  {
    v50 = v8;
    v51 = 0x100000000;
    v53 = v55;
    v54 = 0x400000000;
    v55[4] = 0;
    v10 = *(unsigned __int8 **)(a2 + 8);
    if (v10 == *(unsigned __int8 **)(a2 + 16))
      goto LABEL_60;
    *(_QWORD *)(a2 + 8) = v10 + 1;
    v11 = *v10;
    if (v11 == 96)
    {
      v12 = sub_1C5A12990(a2);
      if (HIDWORD(v12))
        goto LABEL_62;
      v13 = v12;
      if (v12 > HIDWORD(v54))
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v12, 4);
      if (v13)
      {
        while (1)
        {
          v20 = *(unsigned __int8 **)(a2 + 8);
          if (v20 == *(unsigned __int8 **)(a2 + 16))
            break;
          *(_QWORD *)(a2 + 8) = v20 + 1;
          v21 = *v20;
          v22 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 4);
            v22 = v54;
          }
          *((_DWORD *)v53 + v22) = v21;
          LODWORD(v54) = v54 + 1;
          if (!--v13)
            goto LABEL_10;
        }
LABEL_60:
        v44 = "EOF while reading uint8";
LABEL_61:
        llvm::report_fatal_error((llvm *)v44, (const char *)1);
      }
LABEL_10:
      v14 = sub_1C5A12990(a2);
      if (HIDWORD(v14))
        goto LABEL_62;
      v15 = v14;
      if ((_DWORD)v14)
      {
        do
        {
          v23 = *(unsigned __int8 **)(a2 + 8);
          if (v23 == *(unsigned __int8 **)(a2 + 16))
            goto LABEL_60;
          *(_QWORD *)(a2 + 8) = v23 + 1;
          v24 = *v23;
          v25 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v8, v51 + 1, 4);
            v25 = v51;
          }
          *((_DWORD *)v50 + v25) = v24;
          LODWORD(v51) = v51 + 1;
        }
        while (--v15);
      }
      v47 = v8;
      v16 = a1[36];
      v17 = a1[37];
      if (v16 < v17)
      {
        v18 = v9;
        v19 = sub_1C62C40B0(v16, &v50) + 64;
LABEL_46:
        a1[36] = v19;
        v9 = v18;
        v8 = v47;
        goto LABEL_47;
      }
      v27 = (uint64_t)(v16 - *v46) >> 6;
      if ((unint64_t)(v27 + 1) >> 58)
        abort();
      v18 = v9;
      v28 = v17 - *v46;
      v29 = v28 >> 5;
      if (v28 >> 5 <= (unint64_t)(v27 + 1))
        v29 = v27 + 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0)
        v30 = 0x3FFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      v45 = a3;
      if (v30)
      {
        if (v30 >> 58)
          sub_1C4764EE4();
        v31 = (char *)operator new(v30 << 6);
      }
      else
      {
        v31 = 0;
      }
      v32 = (uint64_t)&v31[64 * v27];
      v33 = &v31[64 * v30];
      v34 = sub_1C62C40B0(v32, &v50);
      v19 = v34 + 64;
      v35 = (char *)a1[35];
      v36 = (char *)a1[36];
      if (v36 == v35)
      {
        a1[35] = v34;
        a1[36] = v19;
        a1[37] = v33;
      }
      else
      {
        do
        {
          v36 -= 64;
          v34 = sub_1C62C40B0(v34 - 64, v36);
        }
        while (v36 != v35);
        v36 = (char *)a1[35];
        v37 = (char *)a1[36];
        a1[35] = v34;
        a1[36] = v19;
        a1[37] = v33;
        if (v37 != v36)
        {
          v38 = v37 - 24;
          a3 = v45;
          do
          {
            v39 = (char *)*((_QWORD *)v38 - 2);
            if (v38 != v39)
              free(v39);
            v40 = (char *)*((_QWORD *)v38 - 5);
            if (v38 - 24 != v40)
              free(v40);
            v41 = v38 - 40;
            v38 -= 64;
          }
          while (v41 != v36);
          if (!v36)
            goto LABEL_46;
LABEL_45:
          operator delete(v36);
          goto LABEL_46;
        }
      }
      a3 = v45;
      if (!v36)
        goto LABEL_46;
      goto LABEL_45;
    }
    v26 = operator new();
    v48 = v9;
    v49 = 259;
    *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v26, (llvm::Twine *)&v48, 3u);
LABEL_47:
    if (v53 != v55)
      free(v53);
    if (v50 != v8)
      free(v50);
    --v7;
    if (v11 != 96)
      return;
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    v42 = 0;
  }
  else
  {
    v43 = operator new();
    v50 = "type section ended prematurely";
    LOWORD(v54) = 259;
    v42 = llvm::object::GenericBinaryError::GenericBinaryError(v43, (llvm::Twine *)&v50, 3u);
  }
  *a3 = v42;
}

void llvm::object::WasmObjectFile::parseImportSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  uint64_t *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[2];
  __int16 v66;
  _BYTE v67[28];
  uint64_t v68;

  v3 = a2;
  v68 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
  {
LABEL_61:
    v56 = "LEB is outside Varuint32 range";
LABEL_64:
    llvm::report_fatal_error((llvm *)v56, (const char *)1);
  }
  v7 = v6;
  v9 = a1[35];
  v8 = a1[36];
  v10 = (_BYTE *)a1[50];
  v59 = v6;
  v60 = v3;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[52] - (_QWORD)v10) >> 3) < v6)
  {
    v11 = (_BYTE *)a1[51];
    v12 = (char *)operator new(72 * v6);
    v13 = &v12[72 * ((v11 - v10) / 72)];
    v14 = v13;
    if (v11 != v10)
    {
      v15 = &v12[72 * ((v11 - v10) / 72)];
      do
      {
        *(_OWORD *)(v15 - 72) = *(_OWORD *)(v11 - 72);
        v16 = *(_OWORD *)(v11 - 56);
        v17 = *(_OWORD *)(v11 - 40);
        v18 = *(_OWORD *)(v11 - 24);
        v14 = v15 - 72;
        *((_QWORD *)v15 - 1) = *((_QWORD *)v11 - 1);
        *(_OWORD *)(v15 - 24) = v18;
        *(_OWORD *)(v15 - 40) = v17;
        *(_OWORD *)(v15 - 56) = v16;
        v11 -= 72;
        v15 -= 72;
      }
      while (v11 != v10);
    }
    a1[50] = v14;
    a1[51] = v13;
    a1[52] = &v12[72 * v7];
    LODWORD(v7) = v59;
    if (v10)
      operator delete(v10);
  }
  v57 = a3;
  v19 = v7;
  if (!(_DWORD)v7)
  {
LABEL_49:
    if (*(_QWORD *)(v3 + 8) != *(_QWORD *)(v3 + 16))
    {
      v54 = operator new();
      v55 = "import section ended prematurely";
      goto LABEL_53;
    }
    *v57 = 0;
    return;
  }
  v20 = 0;
  v61 = a1;
  v62 = 0;
  v58 = (unint64_t)(v8 - v9) >> 6;
  while (2)
  {
    v21 = sub_1C5A0EE78(v3);
    v23 = v22;
    v24 = sub_1C5A0EE78(v3);
    v26 = *(char **)(v3 + 8);
    v27 = *(char **)(v3 + 16);
    if (v26 == v27)
    {
LABEL_59:
      v56 = "EOF while reading uint8";
      goto LABEL_64;
    }
    v28 = v26 + 1;
    *(_QWORD *)(v3 + 8) = v26 + 1;
    v29 = *v26;
    v63 = v24;
    v64 = v25;
    switch(*v26)
    {
      case 0:
        ++*((_DWORD *)a1 + 170);
        v30 = sub_1C5A12990(v3);
        if (HIDWORD(v30))
          goto LABEL_61;
        if (v30 >= v58)
        {
          v54 = operator new();
          v55 = "invalid function type";
          goto LABEL_53;
        }
        v31 = v30;
        v32 = BYTE1(v30);
        v33 = WORD1(v30);
        goto LABEL_27;
      case 1:
        sub_1C5A11F00(v65, v3);
        v34 = v65[0];
        v31 = LOBYTE(v65[0]);
        *(_OWORD *)v67 = *(_OWORD *)((char *)v65 + 4);
        *(_OWORD *)&v67[12] = v65[1];
        ++*((_DWORD *)a1 + 169);
        if ((v31 - 111) >= 2)
        {
          v54 = operator new();
          v55 = "invalid table element type";
          goto LABEL_53;
        }
        v32 = BYTE1(v34);
        v33 = HIWORD(v34);
        goto LABEL_27;
      case 2:
        sub_1C5A11E94((uint64_t)v65, v3);
        v31 = LOBYTE(v65[0]);
        v32 = BYTE1(v65[0]);
        v62 = WORD1(v65[0]);
        *(_OWORD *)v67 = *(_OWORD *)((char *)v65 + 4);
        *(_DWORD *)&v67[16] = DWORD1(v65[1]);
        if ((v65[0] & 4) != 0)
          *((_BYTE *)a1 + 591) = 1;
        goto LABEL_28;
      case 3:
        ++*((_DWORD *)a1 + 168);
        if (v28 == v27)
          goto LABEL_59;
        *(_QWORD *)(v3 + 8) = v26 + 2;
        v31 = v26[1];
        v35 = sub_1C5A12A1C(v3);
        if (v35 < 2)
        {
          v32 = v35;
          goto LABEL_28;
        }
        v56 = "LEB is outside Varuint1 range";
        goto LABEL_64;
      case 4:
        ++*((_DWORD *)a1 + 171);
        if (v28 == v27)
          goto LABEL_59;
        *(_QWORD *)(v3 + 8) = v26 + 2;
        if (v26[1])
        {
          v54 = operator new();
          v55 = "invalid attribute";
          goto LABEL_53;
        }
        v36 = sub_1C5A12990(v3);
        if (HIDWORD(v36))
          goto LABEL_61;
        if (v36 < v58)
        {
          v31 = v36;
          v32 = BYTE1(v36);
          v33 = WORD1(v36);
LABEL_27:
          v62 = v33;
LABEL_28:
          v38 = (uint64_t *)a1[51];
          v37 = a1[52];
          if ((unint64_t)v38 >= v37)
          {
            v40 = (_QWORD *)a1[50];
            v41 = 0x8E38E38E38E38E39 * (v38 - v40) + 1;
            if (v41 > 0x38E38E38E38E38ELL)
              abort();
            v42 = 0x8E38E38E38E38E39 * ((uint64_t)(v37 - (_QWORD)v40) >> 3);
            if (2 * v42 > v41)
              v41 = 2 * v42;
            if (v42 >= 0x1C71C71C71C71C7)
              v43 = 0x38E38E38E38E38ELL;
            else
              v43 = v41;
            if (v43)
            {
              if (v43 > 0x38E38E38E38E38ELL)
                sub_1C4764EE4();
              v44 = v20;
              v45 = v31;
              v46 = v32;
              v47 = (char *)operator new(72 * v43);
              v32 = v46;
              v31 = v45;
              v20 = v44;
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * (v38 - v40)];
            *(_QWORD *)v48 = v21;
            *((_QWORD *)v48 + 1) = v23;
            *((_QWORD *)v48 + 2) = v63;
            *((_QWORD *)v48 + 3) = v64;
            v48[32] = v29;
            *((_DWORD *)v48 + 10) = (v32 << 8) | (v62 << 16) | v31;
            *(_OWORD *)(v48 + 44) = *(_OWORD *)v67;
            *(_OWORD *)(v48 + 56) = *(_OWORD *)&v67[12];
            v49 = v48;
            if (v38 == v40)
            {
              v3 = v60;
              v53 = v61;
            }
            else
            {
              v3 = v60;
              do
              {
                *(_OWORD *)(v49 - 72) = *(_OWORD *)(v38 - 9);
                v50 = *(_OWORD *)(v38 - 7);
                v51 = *(_OWORD *)(v38 - 5);
                v52 = *(_OWORD *)(v38 - 3);
                *((_QWORD *)v49 - 1) = *(v38 - 1);
                *(_OWORD *)(v49 - 24) = v52;
                *(_OWORD *)(v49 - 40) = v51;
                *(_OWORD *)(v49 - 56) = v50;
                v49 -= 72;
                v38 -= 9;
              }
              while (v38 != v40);
              v53 = v61;
              v38 = (uint64_t *)v61[50];
            }
            v39 = v48 + 72;
            v53[50] = v49;
            v53[51] = v48 + 72;
            v53[52] = &v47[72 * v43];
            if (v38)
              operator delete(v38);
            v19 = v59;
            a1 = v61;
          }
          else
          {
            *v38 = v21;
            v38[1] = v23;
            v38[2] = v63;
            v38[3] = v64;
            *((_BYTE *)v38 + 32) = v29;
            *((_DWORD *)v38 + 10) = (v32 << 8) | (v62 << 16) | v31;
            *(_OWORD *)((char *)v38 + 44) = *(_OWORD *)v67;
            *(_OWORD *)(v38 + 7) = *(_OWORD *)&v67[12];
            v39 = v38 + 9;
          }
          a1[51] = v39;
          if (++v20 == v19)
            goto LABEL_49;
          continue;
        }
        v54 = operator new();
        v55 = "invalid tag type";
LABEL_53:
        *(_QWORD *)&v65[0] = v55;
        v66 = 259;
        *v57 = llvm::object::GenericBinaryError::GenericBinaryError(v54, (llvm::Twine *)v65, 3u);
        return;
      default:
        v54 = operator new();
        v55 = "unexpected import kind";
        goto LABEL_53;
    }
  }
}

void llvm::object::WasmObjectFile::parseTableSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  __int128 v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  _OWORD v36[2];
  __int16 v37;
  _BYTE v38[36];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 704) = 954437177 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v7 = v6;
  v8 = *(_BYTE **)(a1 + 304);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 320) - (_QWORD)v8) >> 3) < v6)
  {
    v9 = *(_BYTE **)(a1 + 312);
    v10 = (char *)operator new(56 * v6);
    v11 = &v10[56 * ((v9 - v8) / 56)];
    v12 = v11;
    if (v9 != v8)
    {
      v13 = &v10[56 * ((v9 - v8) / 56)];
      do
      {
        v14 = *(_OWORD *)(v9 - 56);
        v15 = *(_OWORD *)(v9 - 40);
        v16 = *(_OWORD *)(v9 - 24);
        v12 = v13 - 56;
        *((_QWORD *)v13 - 1) = *((_QWORD *)v9 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        *(_OWORD *)(v13 - 40) = v15;
        *(_OWORD *)(v13 - 56) = v14;
        v9 -= 56;
        v13 -= 56;
      }
      while (v9 != v8);
    }
    *(_QWORD *)(a1 + 304) = v12;
    *(_QWORD *)(a1 + 312) = v11;
    *(_QWORD *)(a1 + 320) = &v10[56 * v7];
    if (v8)
      operator delete(v8);
  }
  if ((_DWORD)v7)
  {
    while (1)
    {
      sub_1C5A11F00(v36, a2);
      *(_OWORD *)&v38[4] = v36[0];
      *(_OWORD *)&v38[20] = v36[1];
      v18 = *(char **)(a1 + 304);
      v17 = *(char **)(a1 + 312);
      v19 = (v17 - v18) / 56;
      v20 = *(_DWORD *)(a1 + 676) + v19;
      v21 = *(_QWORD *)(a1 + 320);
      if ((unint64_t)v17 >= v21)
      {
        v24 = v19 + 1;
        if ((unint64_t)(v19 + 1) > 0x492492492492492)
          abort();
        v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - (_QWORD)v18) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        v26 = v25 >= 0x249249249249249 ? 0x492492492492492 : v24;
        if (v26)
        {
          if (v26 > 0x492492492492492)
            sub_1C4764EE4();
          v27 = (char *)operator new(56 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[56 * v19];
        *(_DWORD *)v28 = v20;
        v29 = *(_OWORD *)&v38[16];
        *(_OWORD *)(v28 + 4) = *(_OWORD *)v38;
        *(_OWORD *)(v28 + 20) = v29;
        *((_DWORD *)v28 + 9) = *(_DWORD *)&v38[32];
        *((_QWORD *)v28 + 5) = 0;
        *((_QWORD *)v28 + 6) = 0;
        v30 = v28;
        if (v17 != v18)
        {
          do
          {
            v31 = *(_OWORD *)(v17 - 56);
            v32 = *(_OWORD *)(v17 - 40);
            v33 = *(_OWORD *)(v17 - 24);
            *((_QWORD *)v30 - 1) = *((_QWORD *)v17 - 1);
            *(_OWORD *)(v30 - 24) = v33;
            *(_OWORD *)(v30 - 40) = v32;
            *(_OWORD *)(v30 - 56) = v31;
            v30 -= 56;
            v17 -= 56;
          }
          while (v17 != v18);
          v17 = *(char **)(a1 + 304);
        }
        v23 = v28 + 56;
        *(_QWORD *)(a1 + 304) = v30;
        *(_QWORD *)(a1 + 312) = v28 + 56;
        *(_QWORD *)(a1 + 320) = &v27[56 * v26];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v17 = v20;
        v22 = *(_OWORD *)&v38[16];
        *(_OWORD *)(v17 + 4) = *(_OWORD *)v38;
        *(_OWORD *)(v17 + 20) = v22;
        *((_DWORD *)v17 + 9) = *(_DWORD *)&v38[32];
        v23 = v17 + 56;
        *((_QWORD *)v17 + 5) = 0;
        *((_QWORD *)v17 + 6) = 0;
      }
      *(_QWORD *)(a1 + 312) = v23;
      if (*((unsigned __int8 *)v23 - 48) - 111 >= 2)
        break;
      LODWORD(v7) = v7 - 1;
      if (!(_DWORD)v7)
        goto LABEL_28;
    }
    v34 = operator new();
    v35 = "invalid table element type";
    goto LABEL_33;
  }
LABEL_28:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a2 + 16))
  {
    v34 = operator new();
    v35 = "table section ended prematurely";
LABEL_33:
    *(_QWORD *)&v36[0] = v35;
    v37 = 259;
    *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v34, (llvm::Twine *)v36, 3u);
    return;
  }
  *a3 = 0;
}

void llvm::object::WasmObjectFile::parseElemSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  int v18;
  char *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t *v43;
  __int128 v45;
  __int128 v46;
  _BYTE v47[24];
  __int128 __p;
  char *v49;
  _QWORD v50[4];
  uint64_t v51;

  v5 = sub_1C5A12990(a2);
  if (HIDWORD(v5))
  {
LABEL_71:
    v42 = "LEB is outside Varuint32 range";
    goto LABEL_72;
  }
  v6 = v5;
  v43 = (uint64_t *)(a1 + 448);
  sub_1C62DD36C((uint64_t *)(a1 + 448), v5);
  if (!v6)
  {
LABEL_58:
    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
    {
      *a3 = 0;
    }
    else
    {
      v39 = operator new();
      *(_QWORD *)&v45 = "elem section ended prematurely";
      *(_WORD *)v47 = 259;
      *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v39, (llvm::Twine *)&v45, 3u);
    }
    return;
  }
  while (1)
  {
    v49 = 0;
    *(_OWORD *)&v47[8] = 0u;
    __p = 0u;
    v7 = sub_1C5A12990(a2);
    if (HIDWORD(v7))
      goto LABEL_71;
    v8 = v7;
    LODWORD(v45) = v7;
    if (v7 >= 8)
    {
      v40 = operator new();
      v41 = "Unsupported flags for element segment";
      goto LABEL_68;
    }
    if ((v7 & 2) != 0)
    {
      v10 = sub_1C5A12990(a2);
      if (HIDWORD(v10))
        goto LABEL_71;
      v9 = v10;
    }
    else
    {
      v9 = 0;
    }
    DWORD1(v45) = v9;
    if ((unint64_t)*(unsigned int *)(a1 + 676)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) <= v9)
    {
      v40 = operator new();
      v41 = "invalid TableNumber";
      goto LABEL_68;
    }
    if ((v8 & 1) != 0)
    {
      LOBYTE(v46) = 0;
      BYTE8(v46) = 65;
      *(_DWORD *)v47 = 0;
    }
    else
    {
      sub_1C5A12224((uint64_t)a3, (uint64_t)&v46, a2);
      if (*a3)
        goto LABEL_69;
      v8 = v45;
    }
    if ((v8 & 3) == 0)
    {
      BYTE8(v45) = 112;
      if ((v8 & 4) != 0)
        goto LABEL_66;
      goto LABEL_20;
    }
    v11 = *(unsigned __int8 **)(a2 + 8);
    if (v11 == *(unsigned __int8 **)(a2 + 16))
    {
      v42 = "EOF while reading uint8";
LABEL_72:
      llvm::report_fatal_error((llvm *)v42, (const char *)1);
    }
    *(_QWORD *)(a2 + 8) = v11 + 1;
    v12 = *v11;
    if ((v8 & 4) != 0)
      break;
    if (v12)
    {
      v40 = operator new();
      v41 = "invalid elemtype";
      goto LABEL_68;
    }
    BYTE8(v45) = 112;
LABEL_20:
    v13 = sub_1C5A12990(a2);
    if (HIDWORD(v13))
      goto LABEL_71;
    v14 = v13;
    if ((_DWORD)v13)
    {
      v15 = v49;
      v16 = (char *)__p;
      do
      {
        v17 = sub_1C5A12990(a2);
        if (HIDWORD(v17))
          goto LABEL_71;
        v18 = v17;
        v19 = (char *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v15)
        {
          v21 = (uint64_t)(*((_QWORD *)&__p + 1) - (_QWORD)v16) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            goto LABEL_73;
          if ((v15 - v16) >> 1 > v22)
            v22 = (v15 - v16) >> 1;
          if ((unint64_t)(v15 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
          {
            if (v23 >> 62)
              goto LABEL_74;
            v24 = (char *)operator new(4 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v21];
          *(_DWORD *)v25 = v18;
          v20 = v25 + 4;
          while (v19 != v16)
          {
            v26 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          v15 = &v24[4 * v23];
          *((_QWORD *)&__p + 1) = v20;
          if (v16)
            operator delete(v16);
          v16 = v25;
        }
        else
        {
          **((_DWORD **)&__p + 1) = v17;
          v20 = v19 + 4;
        }
        *((_QWORD *)&__p + 1) = v20;
        --v14;
      }
      while (v14);
      v49 = v15;
      *(_QWORD *)&__p = v16;
    }
    v28 = *(_QWORD *)(a1 + 456);
    v27 = *(_QWORD *)(a1 + 464);
    if (v28 >= v27)
    {
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - *v43) >> 4);
      v32 = v31 + 1;
      if (v31 + 1 > 0x333333333333333)
LABEL_73:
        abort();
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - *v43) >> 4);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x199999999999999)
        v34 = 0x333333333333333;
      else
        v34 = v32;
      v51 = a1 + 464;
      if (v34 > 0x333333333333333)
LABEL_74:
        sub_1C4764EE4();
      v35 = 5 * v34;
      v36 = (char *)operator new(80 * v34);
      v37 = &v36[80 * v31];
      v50[0] = v36;
      v50[1] = v37;
      v50[3] = &v36[16 * v35];
      v38 = v46;
      *(_OWORD *)v37 = v45;
      *((_OWORD *)v37 + 1) = v38;
      *((_OWORD *)v37 + 2) = *(_OWORD *)v47;
      v29 = (void *)__p;
      *((_QWORD *)v37 + 6) = *(_QWORD *)&v47[16];
      *((_QWORD *)v37 + 8) = 0;
      *((_QWORD *)v37 + 9) = 0;
      *((_QWORD *)v37 + 7) = 0;
      sub_1C4979194((_QWORD *)v37 + 7, v29, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - (_QWORD)v29) >> 2);
      v50[2] = v37 + 80;
      sub_1C62DE030(v43, v50);
      v30 = *(_QWORD *)(a1 + 456);
      sub_1C62DE0D0((uint64_t)v50);
    }
    else
    {
      *(_OWORD *)v28 = v45;
      *(_OWORD *)(v28 + 16) = v46;
      *(_OWORD *)(v28 + 32) = *(_OWORD *)v47;
      *(_QWORD *)(v28 + 48) = *(_QWORD *)&v47[16];
      *(_QWORD *)(v28 + 64) = 0;
      *(_QWORD *)(v28 + 72) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      v29 = (void *)__p;
      sub_1C4979194((_QWORD *)(v28 + 56), (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
      v30 = v28 + 80;
    }
    *(_QWORD *)(a1 + 456) = v30;
    if (v29)
      operator delete(v29);
    if (!--v6)
      goto LABEL_58;
  }
  if ((v12 - 113) > 0xFFFFFFFD)
  {
LABEL_66:
    v40 = operator new();
    v41 = "elem segment init expressions not yet implemented";
  }
  else
  {
    v40 = operator new();
    v41 = "invalid reference type";
  }
LABEL_68:
  v50[0] = v41;
  LOWORD(v51) = 259;
  *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v40, (llvm::Twine *)v50, 3u);
LABEL_69:
  if ((_QWORD)__p)
    operator delete((void *)__p);
}

void llvm::object::WasmObjectFile::parseDataSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  llvm::Twine *v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[64];
  uint64_t v50;
  const char *v51;
  __int16 v52;

  *(_DWORD *)(a1 + 692) = 954437177 * ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
LABEL_45:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v7 = v6;
  if (*(_BYTE *)(a1 + 504) && *(_QWORD *)(a1 + 496) != v6)
  {
    v45 = operator new();
    *(_QWORD *)&v47 = "number of data segments does not match DataCount section";
    *(_WORD *)v49 = 259;
    v46 = (_QWORD *)sub_1C62D7954(v45);
    *v46 = off_1E8189218;
    llvm::Twine::str((llvm::Twine *)&v47, v46 + 3);
    *a3 = v45;
  }
  else
  {
    v8 = *(_BYTE **)(a1 + 472);
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 488) - (_QWORD)v8) >> 3) < v6)
    {
      v9 = *(_BYTE **)(a1 + 480);
      v10 = (char *)operator new(104 * v6);
      v11 = &v10[104 * ((v9 - v8) / 104)];
      v12 = v11;
      if (v9 != v8)
      {
        v13 = &v10[104 * ((v9 - v8) / 104)];
        do
        {
          v14 = *(_OWORD *)(v9 - 104);
          v15 = *(_OWORD *)(v9 - 88);
          *(_OWORD *)(v13 - 72) = *(_OWORD *)(v9 - 72);
          *(_OWORD *)(v13 - 88) = v15;
          *(_OWORD *)(v13 - 104) = v14;
          v16 = *(_OWORD *)(v9 - 56);
          v17 = *(_OWORD *)(v9 - 40);
          v18 = *(_OWORD *)(v9 - 24);
          v12 = v13 - 104;
          *((_QWORD *)v13 - 1) = *((_QWORD *)v9 - 1);
          *(_OWORD *)(v13 - 24) = v18;
          *(_OWORD *)(v13 - 40) = v17;
          *(_OWORD *)(v13 - 56) = v16;
          v9 -= 104;
          v13 -= 104;
        }
        while (v9 != v8);
      }
      *(_QWORD *)(a1 + 472) = v12;
      *(_QWORD *)(a1 + 480) = v11;
      *(_QWORD *)(a1 + 488) = &v10[104 * v7];
      if (v8)
        operator delete(v8);
    }
    if ((_DWORD)v7)
    {
      while (1)
      {
        memset(&v49[8], 0, 48);
        v19 = sub_1C5A12990(a2);
        if (HIDWORD(v19))
          goto LABEL_45;
        v20 = v19;
        DWORD2(v47) = v19;
        if ((v19 & 2) != 0)
        {
          v21 = sub_1C5A12990(a2);
          if (HIDWORD(v21))
            goto LABEL_45;
        }
        else
        {
          LODWORD(v21) = 0;
        }
        HIDWORD(v47) = v21;
        if ((v20 & 1) != 0)
        {
          LOBYTE(v48) = 0;
          BYTE8(v48) = 65;
          *(_DWORD *)v49 = 0;
        }
        else
        {
          sub_1C5A12224((uint64_t)a3, (uint64_t)&v48, a2);
          if (*a3)
            return;
        }
        v22 = sub_1C5A12990(a2);
        if (HIDWORD(v22))
          goto LABEL_45;
        v23 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)(a2 + 16) - v23 < v22)
          break;
        *(_QWORD *)&v49[24] = *(_QWORD *)(a2 + 8);
        *(_QWORD *)&v49[32] = v22;
        *(_QWORD *)&v49[56] = 0;
        LODWORD(v50) = -1;
        LODWORD(v47) = v23 - *(_DWORD *)a2;
        *(_QWORD *)(a2 + 8) = v23 + v22;
        v25 = *(char **)(a1 + 480);
        v24 = *(_QWORD *)(a1 + 488);
        if ((unint64_t)v25 >= v24)
        {
          v27 = *(char **)(a1 + 472);
          v28 = 0x4EC4EC4EC4EC4EC5 * ((v25 - v27) >> 3) + 1;
          if (v28 > 0x276276276276276)
            abort();
          v29 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v24 - (_QWORD)v27) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x13B13B13B13B13BLL)
            v30 = 0x276276276276276;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 > 0x276276276276276)
              sub_1C4764EE4();
            v31 = (char *)operator new(104 * v30);
          }
          else
          {
            v31 = 0;
          }
          v32 = *(_OWORD *)&v49[48];
          v33 = &v31[8 * ((v25 - v27) >> 3)];
          *((_OWORD *)v33 + 4) = *(_OWORD *)&v49[32];
          *((_OWORD *)v33 + 5) = v32;
          *((_QWORD *)v33 + 12) = v50;
          v34 = v48;
          *(_OWORD *)v33 = v47;
          *((_OWORD *)v33 + 1) = v34;
          v35 = *(_OWORD *)&v49[16];
          *((_OWORD *)v33 + 2) = *(_OWORD *)v49;
          *((_OWORD *)v33 + 3) = v35;
          v36 = v33;
          if (v25 != v27)
          {
            do
            {
              v37 = *(_OWORD *)(v25 - 104);
              v38 = *(_OWORD *)(v25 - 88);
              *(_OWORD *)(v36 - 72) = *(_OWORD *)(v25 - 72);
              *(_OWORD *)(v36 - 88) = v38;
              *(_OWORD *)(v36 - 104) = v37;
              v39 = *(_OWORD *)(v25 - 56);
              v40 = *(_OWORD *)(v25 - 40);
              v41 = *(_OWORD *)(v25 - 24);
              *((_QWORD *)v36 - 1) = *((_QWORD *)v25 - 1);
              *(_OWORD *)(v36 - 24) = v41;
              *(_OWORD *)(v36 - 40) = v40;
              *(_OWORD *)(v36 - 56) = v39;
              v36 -= 104;
              v25 -= 104;
            }
            while (v25 != v27);
            v25 = *(char **)(a1 + 472);
          }
          v42 = &v31[104 * v30];
          v26 = v33 + 104;
          *(_QWORD *)(a1 + 472) = v36;
          *(_QWORD *)(a1 + 480) = v33 + 104;
          *(_QWORD *)(a1 + 488) = v42;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *((_OWORD *)v25 + 3) = *(_OWORD *)&v49[16];
          *((_OWORD *)v25 + 4) = *(_OWORD *)&v49[32];
          *((_OWORD *)v25 + 5) = *(_OWORD *)&v49[48];
          *((_QWORD *)v25 + 12) = v50;
          *(_OWORD *)v25 = v47;
          *((_OWORD *)v25 + 1) = v48;
          *((_OWORD *)v25 + 2) = *(_OWORD *)v49;
          v26 = v25 + 104;
        }
        *(_QWORD *)(a1 + 480) = v26;
        LODWORD(v7) = v7 - 1;
        if (!(_DWORD)v7)
          goto LABEL_39;
      }
      v43 = operator new();
      v51 = "invalid segment size";
      v52 = 259;
      v44 = (llvm::Twine *)&v51;
    }
    else
    {
LABEL_39:
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
      {
        *a3 = 0;
        return;
      }
      v43 = operator new();
      *(_QWORD *)&v47 = "data section ended prematurely";
      *(_WORD *)v49 = 259;
      v44 = (llvm::Twine *)&v47;
    }
    *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v43, v44, 3u);
  }
}

uint64_t sub_1C5A0EE78(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v4;

  v2 = sub_1C5A12990(a1);
  result = *(_QWORD *)(a1 + 8);
  v4 = result + v2;
  if (v4 > *(_QWORD *)(a1 + 16))
    llvm::report_fatal_error((llvm *)"EOF while reading string", (const char *)1);
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

BOOL llvm::object::WasmObjectFile::isValidFunctionIndex(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  return (unint64_t)*((unsigned int *)this + 170)
       + ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 7) > a2;
}

BOOL llvm::object::WasmObjectFile::isDefinedFunctionIndex(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 170);
  return v2 <= a2
      && v2 + ((uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 7) > (unint64_t)a2;
}

unint64_t llvm::object::WasmObjectFile::getDefinedFunction(llvm::object::WasmObjectFile *this, int a2)
{
  return *((_QWORD *)this + 64) + ((unint64_t)(a2 - *((_DWORD *)this + 170)) << 7);
}

{
  return *((_QWORD *)this + 64) + ((unint64_t)(a2 - *((_DWORD *)this + 170)) << 7);
}

BOOL llvm::object::WasmObjectFile::isValidGlobalIndex(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  return (unint64_t)*((unsigned int *)this + 168)
       + ((uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 6) > a2;
}

void llvm::object::WasmObjectFile::parseLinkingSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  __int16 v45;
  uint64_t v46;
  const char *v47;
  unsigned __int8 *v49;
  _QWORD v50[4];
  __int16 v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  const char *v56;
  const char *v57;
  __int16 v58;

  *(_BYTE *)(a1 + 588) = 1;
  if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 512) && !*(_BYTE *)(a1 + 590))
  {
    v46 = operator new();
    v47 = "linking data must come after code section";
    goto LABEL_63;
  }
  v5 = sub_1C5A12990(a2);
  if (HIDWORD(v5))
LABEL_66:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  *(_DWORD *)(a1 + 592) = v5;
  if ((_DWORD)v5 != 2)
  {
    v50[0] = "unexpected metadata version: ";
    v50[2] = v5;
    v51 = 2051;
    v52[0] = v50;
    v52[2] = " (Expected: ";
    v45 = 770;
    v53 = 770;
    v54[0] = v52;
    v54[2] = 2;
    v55 = 2050;
    v56 = (const char *)v54;
    v57 = ")";
LABEL_59:
    v58 = v45;
    v46 = operator new();
    goto LABEL_64;
  }
  v6 = *(unsigned __int8 **)(a2 + 8);
  v7 = *(unsigned __int8 **)(a2 + 16);
  v49 = v7;
  while (2)
  {
    if (v6 >= v7)
    {
      if (v6 != v7)
      {
        v46 = operator new();
        v47 = "linking section ended prematurely";
        goto LABEL_63;
      }
      *a3 = 0;
      return;
    }
    *(_QWORD *)(a2 + 8) = v6 + 1;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = *v6;
    v9 = sub_1C5A12990(a2);
    if (HIDWORD(v9))
      goto LABEL_66;
    v10 = *(_QWORD *)(a2 + 8) + v9;
    *(_QWORD *)(a2 + 16) = v10;
    switch(v8)
    {
      case 5:
        v11 = sub_1C5A12990(a2);
        if (HIDWORD(v11))
          goto LABEL_66;
        v12 = v11;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3) >= v11)
        {
          if (v11)
          {
            v13 = 0;
            do
            {
              v14 = sub_1C5A0EE78(a2);
              v15 = *(_QWORD *)(a1 + 472) + v13;
              *(_QWORD *)(v15 + 72) = v14;
              *(_QWORD *)(v15 + 80) = v16;
              v17 = sub_1C5A12990(a2);
              if (HIDWORD(v17))
                goto LABEL_66;
              *(_DWORD *)(*(_QWORD *)(a1 + 472) + v13 + 88) = v17;
              v18 = sub_1C5A12990(a2);
              if (HIDWORD(v18))
                goto LABEL_66;
              *(_DWORD *)(*(_QWORD *)(a1 + 472) + v13 + 92) = v18;
              v13 += 104;
            }
            while (--v12);
          }
LABEL_52:
          v6 = *(unsigned __int8 **)(a2 + 8);
          v7 = v49;
          if (v6 != *(unsigned __int8 **)(a2 + 16))
          {
            v46 = operator new();
            v47 = "linking sub-section ended prematurely";
            goto LABEL_63;
          }
          continue;
        }
        v46 = operator new();
        v47 = "too many segment names";
LABEL_63:
        v56 = v47;
        v58 = 259;
LABEL_64:
        *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v46, (llvm::Twine *)&v56, 3u);
        return;
      case 6:
        v19 = sub_1C5A12990(a2);
        if (HIDWORD(v19))
          goto LABEL_66;
        v20 = v19;
        v21 = *(_BYTE **)(a1 + 600);
        if (v19 > (uint64_t)(*(_QWORD *)(a1 + 616) - (_QWORD)v21) >> 3)
        {
          v22 = *(_BYTE **)(a1 + 608);
          v23 = (char *)operator new(8 * v19);
          v24 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
          v25 = v24;
          if (v22 != v21)
          {
            v25 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v26 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v25 - 1) = v26;
              v25 -= 8;
            }
            while (v22 != v21);
          }
          *(_QWORD *)(a1 + 600) = v25;
          *(_QWORD *)(a1 + 608) = v24;
          *(_QWORD *)(a1 + 616) = &v23[8 * v20];
          if (v21)
            operator delete(v21);
        }
        if (!(_DWORD)v20)
          goto LABEL_52;
        v27 = 0;
        while (2)
        {
          v28 = sub_1C5A12990(a2);
          if (HIDWORD(v28))
            goto LABEL_66;
          v29 = v28;
          v30 = sub_1C5A12990(a2);
          if (HIDWORD(v30))
            goto LABEL_66;
          v31 = v30;
          v32 = *(_QWORD *)(a1 + 536);
          if (v30 < (*(_QWORD *)(a1 + 544) - v32) >> 5 && !*(_BYTE *)(*(_QWORD *)(v32 + 32 * v30) + 16))
          {
            v33 = *(unint64_t **)(a1 + 608);
            v34 = *(_QWORD *)(a1 + 616);
            if ((unint64_t)v33 >= v34)
            {
              v36 = *(_QWORD **)(a1 + 600);
              v37 = v33 - v36;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61)
                abort();
              v39 = v34 - (_QWORD)v36;
              if (v39 >> 2 > v38)
                v38 = v39 >> 2;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                if (v40 >> 61)
                  sub_1C4764EE4();
                v41 = (char *)operator new(8 * v40);
              }
              else
              {
                v41 = 0;
              }
              v42 = (unint64_t *)&v41[8 * v37];
              *v42 = v29 | (v31 << 32);
              v35 = v42 + 1;
              if (v33 != v36)
              {
                do
                {
                  v43 = *--v33;
                  *--v42 = v43;
                }
                while (v33 != v36);
                v33 = *(unint64_t **)(a1 + 600);
              }
              *(_QWORD *)(a1 + 600) = v42;
              *(_QWORD *)(a1 + 608) = v35;
              *(_QWORD *)(a1 + 616) = &v41[8 * v40];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *v33 = v29 | (v30 << 32);
              v35 = v33 + 1;
            }
            *(_QWORD *)(a1 + 608) = v35;
            if (++v27 == (_DWORD)v20)
              goto LABEL_52;
            continue;
          }
          break;
        }
        v56 = "invalid function symbol: ";
        v57 = (const char *)v30;
        v45 = 2051;
        goto LABEL_59;
      case 7:
        v44 = a3;
        llvm::object::WasmObjectFile::parseLinkingSectionComdat(a1, a2, a3);
        goto LABEL_51;
      case 8:
        v44 = a3;
        llvm::object::WasmObjectFile::parseLinkingSectionSymtab(a1, a2, a3);
LABEL_51:
        if (!*v44)
          goto LABEL_52;
        return;
      default:
        *(_QWORD *)(a2 + 8) = v10;
        goto LABEL_52;
    }
  }
}

uint64_t llvm::object::WasmObjectFile::parseLinkingSectionSymtab@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  unsigned __int8 *v80;
  unint64_t v81;
  char v82;
  char v83;
  char v84;
  uint64_t v85;
  size_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  size_t v114;
  size_t v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  char v120;
  char v121;
  char v122;
  char v123;
  unsigned __int8 **v124;
  unint64_t v125;
  int v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  unsigned __int8 *v132;
  unint64_t v133;
  char *v134;
  char *v135;
  int v136;
  char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _QWORD *v144;
  char *v145;
  unint64_t v146;
  _QWORD *v147;
  int v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  char *v158;
  __int16 v160;
  uint64_t v161;
  const char *v162;
  char *v163;
  uint64_t *v164;
  char v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unsigned __int8 *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  size_t __n;
  const char *v176;
  _QWORD v177[4];
  __int16 v178;
  _QWORD v179[4];
  __int16 v180;
  _QWORD v181[4];
  __int16 v182;
  _QWORD v183[4];
  __int16 v184;
  _QWORD v185[4];
  __int16 v186;
  unint64_t v187;
  unint64_t v188;
  _BYTE v189[7];
  _BYTE v190[7];
  _BYTE v191[7];
  __int16 v192;
  char v193;
  void *__p;
  char *v195;
  char *v196;
  void *v197;
  char *v198;
  char *v199;
  void *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  _QWORD v206[4];
  const char *v207;
  const char *v208;
  size_t v209;
  __int16 v210;
  _BYTE v211[15];
  _QWORD v212[2];
  _QWORD v213[4];

  v4 = a2;
  v213[2] = *MEMORY[0x1E0C80C00];
  v7 = sub_1C5A12990(a2);
  if (HIDWORD(v7))
  {
LABEL_230:
    v163 = "LEB is outside Varuint32 range";
    goto LABEL_234;
  }
  v8 = v7;
  v9 = *(_BYTE **)(a1 + 648);
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 664) - (_QWORD)v9) >> 3) < v7)
  {
    v10 = *(_BYTE **)(a1 + 656);
    v11 = (char *)operator new(120 * v7);
    v12 = &v11[120 * ((v10 - v9) / 120)];
    v13 = v12;
    if (v10 != v9)
    {
      v14 = &v11[120 * ((v10 - v9) / 120)];
      do
      {
        v15 = *(_OWORD *)(v10 - 120);
        v16 = *(_OWORD *)(v10 - 104);
        v17 = *(_OWORD *)(v10 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v10 - 72);
        *(_OWORD *)(v14 - 88) = v17;
        *(_OWORD *)(v14 - 104) = v16;
        *(_OWORD *)(v14 - 120) = v15;
        v18 = *(_OWORD *)(v10 - 56);
        v19 = *(_OWORD *)(v10 - 40);
        v20 = *(_OWORD *)(v10 - 24);
        v13 = v14 - 120;
        *((_QWORD *)v14 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        *(_OWORD *)(v14 - 40) = v19;
        *(_OWORD *)(v14 - 56) = v18;
        v10 -= 120;
        v14 -= 120;
      }
      while (v10 != v9);
    }
    *(_QWORD *)(a1 + 648) = v13;
    *(_QWORD *)(a1 + 656) = v12;
    *(_QWORD *)(a1 + 664) = &v11[120 * v8];
    if (v9)
      operator delete(v9);
  }
  v164 = a3;
  v21 = *(_BYTE **)(a1 + 536);
  if (v8 > (uint64_t)(*(_QWORD *)(a1 + 552) - (_QWORD)v21) >> 5)
  {
    v22 = *(_BYTE **)(a1 + 544);
    v23 = (char *)operator new(32 * v8);
    v24 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFE0];
    v25 = v24;
    if (v22 != v21)
    {
      v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v25 = v26 - 32;
        v27 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v26 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v26 - 1) = v27;
        v22 -= 32;
        v26 -= 32;
      }
      while (v22 != v21);
    }
    *(_QWORD *)(a1 + 536) = v25;
    *(_QWORD *)(a1 + 544) = v24;
    *(_QWORD *)(a1 + 552) = &v23[32 * v8];
    if (v21)
      operator delete(v21);
  }
  v206[0] = 0;
  v206[1] = 0;
  v206[2] = 0x800000000;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v28 = (uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 3;
  __p = 0;
  v195 = 0;
  v196 = 0;
  sub_1C4DB1D18((uint64_t)&v203, 0x8E38E38E38E38E39 * v28);
  sub_1C4DB1D18((uint64_t)&v200, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 3));
  sub_1C4DB1D18((uint64_t)&v197, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 3));
  sub_1C4DB1D18((uint64_t)&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 3));
  v29 = *(_QWORD *)(a1 + 400);
  v30 = *(_QWORD *)(a1 + 408);
  v167 = v4;
  if (v29 != v30)
  {
    v3 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      switch(*(_BYTE *)(v29 + 32))
      {
        case 0:
          v31 = v201;
          if (v201 >= v202)
          {
            v39 = (char *)v200;
            v40 = (v201 - (_BYTE *)v200) >> 3;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              goto LABEL_231;
            v42 = v202 - (_BYTE *)v200;
            if ((v202 - (_BYTE *)v200) >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              if (v43 >> 61)
                goto LABEL_232;
              v44 = (char *)operator new(8 * v43);
            }
            else
            {
              v44 = 0;
            }
            v63 = &v44[8 * v40];
            *(_QWORD *)v63 = v29;
            v32 = v63 + 8;
            if (v31 != v39)
            {
              do
              {
                v64 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v31 != v39);
              v31 = (char *)v200;
            }
            v200 = v63;
            v202 = &v44[8 * v43];
            if (v31)
              operator delete(v31);
            v4 = v167;
          }
          else
          {
            *(_QWORD *)v201 = v29;
            v32 = v31 + 8;
          }
          v201 = v32;
          break;
        case 1:
          v33 = v195;
          if (v195 >= v196)
          {
            v45 = (char *)__p;
            v46 = (v195 - (_BYTE *)__p) >> 3;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61)
              goto LABEL_231;
            v48 = v196 - (_BYTE *)__p;
            if ((v196 - (_BYTE *)__p) >> 2 > v47)
              v47 = v48 >> 2;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              if (v49 >> 61)
                goto LABEL_232;
              v50 = (char *)operator new(8 * v49);
            }
            else
            {
              v50 = 0;
            }
            v65 = &v50[8 * v46];
            *(_QWORD *)v65 = v29;
            v34 = v65 + 8;
            if (v33 != v45)
            {
              do
              {
                v66 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *((_QWORD *)v65 - 1) = v66;
                v65 -= 8;
              }
              while (v33 != v45);
              v33 = (char *)__p;
            }
            __p = v65;
            v196 = &v50[8 * v49];
            if (v33)
              operator delete(v33);
            v4 = v167;
          }
          else
          {
            *(_QWORD *)v195 = v29;
            v34 = v33 + 8;
          }
          v195 = v34;
          break;
        case 3:
          v35 = v204;
          if (v204 >= v205)
          {
            v51 = v203;
            v52 = (v204 - v203) >> 3;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61)
              goto LABEL_231;
            v54 = v205 - v203;
            if ((v205 - v203) >> 2 > v53)
              v53 = v54 >> 2;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              if (v55 >> 61)
                goto LABEL_232;
              v56 = (char *)operator new(8 * v55);
            }
            else
            {
              v56 = 0;
            }
            v67 = &v56[8 * v52];
            *(_QWORD *)v67 = v29;
            v36 = v67 + 8;
            if (v35 != v51)
            {
              do
              {
                v68 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v67 - 1) = v68;
                v67 -= 8;
              }
              while (v35 != v51);
              v35 = v203;
            }
            v203 = v67;
            v205 = &v56[8 * v55];
            if (v35)
              operator delete(v35);
            v4 = v167;
          }
          else
          {
            *(_QWORD *)v204 = v29;
            v36 = v35 + 8;
          }
          v204 = v36;
          break;
        case 4:
          v37 = v198;
          if (v198 >= v199)
          {
            v57 = (char *)v197;
            v58 = (v198 - (_BYTE *)v197) >> 3;
            v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 61)
LABEL_231:
              abort();
            v60 = v199 - (_BYTE *)v197;
            if ((v199 - (_BYTE *)v197) >> 2 > v59)
              v59 = v60 >> 2;
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v59;
            if (v61)
            {
              if (v61 >> 61)
LABEL_232:
                sub_1C4764EE4();
              v62 = (char *)operator new(8 * v61);
            }
            else
            {
              v62 = 0;
            }
            v69 = &v62[8 * v58];
            *(_QWORD *)v69 = v29;
            v38 = v69 + 8;
            if (v37 != v57)
            {
              do
              {
                v70 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v69 - 1) = v70;
                v69 -= 8;
              }
              while (v37 != v57);
              v37 = (char *)v197;
            }
            v197 = v69;
            v199 = &v62[8 * v61];
            if (v37)
              operator delete(v37);
            v4 = v167;
          }
          else
          {
            *(_QWORD *)v198 = v29;
            v38 = v37 + 8;
          }
          v198 = v38;
          break;
        default:
          break;
      }
      v29 += 72;
    }
    while (v29 != v30);
  }
  if (!(_DWORD)v8)
  {
LABEL_206:
    *v164 = 0;
    goto LABEL_207;
  }
  while (2)
  {
    v71 = *(unsigned __int8 **)(v4 + 8);
    if (v71 == *(unsigned __int8 **)(v4 + 16))
    {
      v163 = "EOF while reading uint8";
LABEL_234:
      llvm::report_fatal_error((llvm *)v163, (const char *)1);
    }
    *(_QWORD *)(v4 + 8) = v71 + 1;
    v176 = (const char *)*v71;
    v72 = sub_1C5A12990(v4);
    if (HIDWORD(v72))
      goto LABEL_230;
    v73 = v72;
    v74 = v72 & 0x10;
    switch((int)v176)
    {
      case 0:
        v75 = sub_1C5A12990(v4);
        if (HIDWORD(v75))
          goto LABEL_230;
        v76 = v75;
        v77 = *(unsigned int *)(a1 + 680);
        if (v77 + ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 7) <= v75
          || ((v74 >> 4) ^ 1) != v77 <= v75)
        {
          v161 = operator new();
          v162 = "invalid function symbol index";
          goto LABEL_228;
        }
        if (v74)
        {
          v111 = *((_QWORD *)v200 + v75);
          if ((v73 & 0x40) != 0)
          {
            v80 = (unsigned __int8 *)sub_1C5A0EE78(v4);
            __n = v113;
            v174 = *(_BYTE *)(v111 + 16);
            v212[0] = *(_QWORD *)(v111 + 17);
            *(_QWORD *)((char *)v212 + 7) = *(_QWORD *)(v111 + 24);
            v84 = 1;
          }
          else
          {
            v174 = 0;
            v84 = 0;
            v80 = *(unsigned __int8 **)(v111 + 16);
            __n = *(_QWORD *)(v111 + 24);
          }
          v173 = *(_QWORD *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v111 + 40) << 6);
          v171 = 0;
          v172 = 0;
          if (*(_QWORD *)(v111 + 8))
          {
            v82 = *(_BYTE *)v111;
            v213[0] = *(_QWORD *)(v111 + 1);
            *(_QWORD *)((char *)v213 + 7) = *(_QWORD *)(v111 + 8);
            v83 = 1;
          }
          else
          {
            v82 = 0;
            v83 = 0;
          }
        }
        else
        {
          v78 = sub_1C5A0EE78(v4);
          v80 = (unsigned __int8 *)v78;
          __n = v79;
          v81 = *(_QWORD *)(a1 + 512) + ((unint64_t)(v76 - *(_DWORD *)(a1 + 680)) << 7);
          v173 = *(_QWORD *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v81 + 4) << 6);
          v171 = 0;
          v172 = 0;
          v82 = 0;
          v83 = 0;
          v174 = 0;
          v84 = 0;
          if (!*(_QWORD *)(v81 + 96))
          {
            *(_QWORD *)(v81 + 88) = v78;
            *(_QWORD *)(v81 + 96) = v79;
          }
        }
        goto LABEL_169;
      case 1:
        v85 = sub_1C5A0EE78(v4);
        v80 = (unsigned __int8 *)v85;
        __n = v86;
        if (v74)
        {
          v172 = 0;
          v173 = 0;
          v171 = 0;
          v82 = 0;
          v83 = 0;
          v174 = 0;
          v84 = 0;
          v76 = v3;
          goto LABEL_169;
        }
        v170 = (unsigned __int8 *)v85;
        v87 = sub_1C5A12990(v4);
        if (HIDWORD(v87))
          goto LABEL_230;
        v88 = v87;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3) <= v87)
        {
          v161 = operator new();
          v162 = "invalid data symbol index";
          goto LABEL_228;
        }
        v188 = sub_1C5A12990(v4);
        v168 = sub_1C5A12990(v4);
        v169 = v188;
        v187 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + 104 * v88 + 64);
        if (v188 <= v187)
        {
          v172 = 0;
          v173 = 0;
          v171 = 0;
          v82 = 0;
          v83 = 0;
          v174 = 0;
          v84 = 0;
          v76 = v88;
          v80 = v170;
LABEL_169:
          if ((v73 & 3) != 2)
          {
            v119 = v80;
            v120 = v84;
            v121 = v82;
            v122 = v83;
            sub_1C4F024D8((llvm::StringMapImpl *)v206, v80, __n);
            v83 = v122;
            v82 = v121;
            v84 = v120;
            v80 = v119;
            if ((v123 & 1) == 0)
            {
              v207 = "duplicate symbol name ";
              v208 = (const char *)v119;
              v209 = __n;
              v160 = 1283;
              goto LABEL_226;
            }
          }
          v124 = *(unsigned __int8 ***)(a1 + 656);
          v125 = *(_QWORD *)(a1 + 664);
          if ((unint64_t)v124 >= v125)
          {
            v128 = *(_QWORD **)(a1 + 648);
            v129 = 0xEEEEEEEEEEEEEEEFLL * (v124 - (unsigned __int8 **)v128) + 1;
            if (v129 > 0x222222222222222)
              goto LABEL_231;
            v130 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v125 - (_QWORD)v128) >> 3);
            if (2 * v130 > v129)
              v129 = 2 * v130;
            if (v130 >= 0x111111111111111)
              v129 = 0x222222222222222;
            if (v129)
            {
              v165 = v83;
              v166 = v82;
              if (v129 > 0x222222222222222)
                goto LABEL_232;
              v131 = v84;
              v132 = v80;
              v133 = v129;
              v134 = (char *)operator new(120 * v129);
              v80 = v132;
              v84 = v131;
              v83 = v165;
              v82 = v166;
            }
            else
            {
              v133 = 0;
              v134 = 0;
            }
            v135 = &v134[8 * (v124 - (unsigned __int8 **)v128)];
            *(_QWORD *)v135 = v80;
            *((_QWORD *)v135 + 1) = __n;
            v135[16] = (char)v176;
            *(_WORD *)(v135 + 17) = v192;
            v135[19] = v193;
            *((_DWORD *)v135 + 5) = v73;
            v135[24] = v82;
            *(_QWORD *)(v135 + 25) = v213[0];
            *((_QWORD *)v135 + 4) = *(_QWORD *)((char *)v213 + 7);
            v135[40] = v83;
            *((_DWORD *)v135 + 11) = *(_DWORD *)&v191[3];
            *(_DWORD *)(v135 + 41) = *(_DWORD *)v191;
            v135[48] = v174;
            *(_QWORD *)(v135 + 49) = v212[0];
            *((_QWORD *)v135 + 7) = *(_QWORD *)((char *)v212 + 7);
            v135[64] = v84;
            *(_DWORD *)(v135 + 65) = *(_DWORD *)v190;
            *((_DWORD *)v135 + 17) = *(_DWORD *)&v190[3];
            v135[72] = 0;
            *(_QWORD *)(v135 + 73) = *(_QWORD *)v211;
            *((_QWORD *)v135 + 10) = *(_QWORD *)&v211[7];
            v135[88] = 0;
            v136 = *(_DWORD *)v189;
            *((_DWORD *)v135 + 23) = *(_DWORD *)&v189[3];
            *((_DWORD *)v135 + 24) = v76;
            *(_DWORD *)(v135 + 89) = v136;
            *((_QWORD *)v135 + 13) = v169;
            *((_QWORD *)v135 + 14) = v168;
            if (v124 == v128)
            {
              v3 = v76;
              v137 = &v134[8 * (v124 - (unsigned __int8 **)v128)];
            }
            else
            {
              v137 = &v134[8 * (v124 - (unsigned __int8 **)v128)];
              do
              {
                v138 = *(_OWORD *)(v124 - 15);
                v139 = *(_OWORD *)(v124 - 13);
                v140 = *(_OWORD *)(v124 - 11);
                *(_OWORD *)(v137 - 72) = *(_OWORD *)(v124 - 9);
                *(_OWORD *)(v137 - 88) = v140;
                *(_OWORD *)(v137 - 104) = v139;
                *(_OWORD *)(v137 - 120) = v138;
                v141 = *(_OWORD *)(v124 - 7);
                v142 = *(_OWORD *)(v124 - 5);
                v143 = *(_OWORD *)(v124 - 3);
                *((_QWORD *)v137 - 1) = *(v124 - 1);
                *(_OWORD *)(v137 - 24) = v143;
                *(_OWORD *)(v137 - 40) = v142;
                *(_OWORD *)(v137 - 56) = v141;
                v137 -= 120;
                v124 -= 15;
              }
              while (v124 != v128);
              v3 = v76;
              v124 = *(unsigned __int8 ***)(a1 + 648);
            }
            *(_QWORD *)(a1 + 648) = v137;
            v127 = v135 + 120;
            *(_QWORD *)(a1 + 656) = v135 + 120;
            *(_QWORD *)(a1 + 664) = &v134[120 * v133];
            v4 = v167;
            if (v124)
              operator delete(v124);
          }
          else
          {
            *v124 = v80;
            v124[1] = (unsigned __int8 *)__n;
            *((_BYTE *)v124 + 16) = (_BYTE)v176;
            *(_WORD *)((char *)v124 + 17) = v192;
            *((_BYTE *)v124 + 19) = v193;
            *((_DWORD *)v124 + 5) = v73;
            *((_BYTE *)v124 + 24) = v82;
            *(unsigned __int8 **)((char *)v124 + 25) = (unsigned __int8 *)v213[0];
            v124[4] = *(unsigned __int8 **)((char *)v213 + 7);
            *((_BYTE *)v124 + 40) = v83;
            *((_DWORD *)v124 + 11) = *(_DWORD *)&v191[3];
            *(_DWORD *)((char *)v124 + 41) = *(_DWORD *)v191;
            *((_BYTE *)v124 + 48) = v174;
            *(unsigned __int8 **)((char *)v124 + 49) = (unsigned __int8 *)v212[0];
            v124[7] = *(unsigned __int8 **)((char *)v212 + 7);
            *((_BYTE *)v124 + 64) = v84;
            *(_DWORD *)((char *)v124 + 65) = *(_DWORD *)v190;
            *((_DWORD *)v124 + 17) = *(_DWORD *)&v190[3];
            *((_BYTE *)v124 + 72) = 0;
            *(unsigned __int8 **)((char *)v124 + 73) = *(unsigned __int8 **)v211;
            v124[10] = *(unsigned __int8 **)&v211[7];
            *((_BYTE *)v124 + 88) = 0;
            v126 = *(_DWORD *)v189;
            *((_DWORD *)v124 + 23) = *(_DWORD *)&v189[3];
            *((_DWORD *)v124 + 24) = v76;
            *(_DWORD *)((char *)v124 + 89) = v126;
            v3 = v76;
            v127 = v124 + 15;
            v124[13] = (unsigned __int8 *)v169;
            v124[14] = (unsigned __int8 *)v168;
          }
          *(_QWORD *)(a1 + 656) = v127;
          v144 = v127 - 15;
          v145 = *(char **)(a1 + 544);
          v146 = *(_QWORD *)(a1 + 552);
          if ((unint64_t)v145 >= v146)
          {
            v148 = v8;
            v149 = *(char **)(a1 + 536);
            v8 = (v145 - v149) >> 5;
            v150 = v8 + 1;
            if ((v8 + 1) >> 59)
              goto LABEL_231;
            v151 = v146 - (_QWORD)v149;
            if (v151 >> 4 > v150)
              v150 = v151 >> 4;
            if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFE0)
              v152 = 0x7FFFFFFFFFFFFFFLL;
            else
              v152 = v150;
            if (v152 >> 59)
              goto LABEL_232;
            v153 = (char *)operator new(32 * v152);
            v154 = &v153[32 * v8];
            *(_QWORD *)v154 = v144;
            *((_QWORD *)v154 + 1) = v172;
            *((_QWORD *)v154 + 2) = v171;
            *((_QWORD *)v154 + 3) = v173;
            if (v145 == v149)
            {
              v156 = &v153[32 * v8];
              LODWORD(v8) = v148;
            }
            else
            {
              v155 = &v153[32 * v8];
              LODWORD(v8) = v148;
              do
              {
                v156 = v155 - 32;
                v157 = *((_OWORD *)v145 - 1);
                *((_OWORD *)v155 - 2) = *((_OWORD *)v145 - 2);
                *((_OWORD *)v155 - 1) = v157;
                v145 -= 32;
                v155 -= 32;
              }
              while (v145 != v149);
            }
            v158 = &v153[32 * v152];
            *(_QWORD *)(a1 + 536) = v156;
            v147 = v154 + 32;
            *(_QWORD *)(a1 + 544) = v154 + 32;
            *(_QWORD *)(a1 + 552) = v158;
            if (v149)
              operator delete(v149);
          }
          else
          {
            *(_QWORD *)v145 = v144;
            *((_QWORD *)v145 + 1) = v172;
            v147 = v145 + 32;
            *((_QWORD *)v145 + 2) = v171;
            *((_QWORD *)v145 + 3) = v173;
          }
          *(_QWORD *)(a1 + 544) = v147;
          LODWORD(v8) = v8 - 1;
          if (!(_DWORD)v8)
            goto LABEL_206;
          continue;
        }
        v178 = 1283;
        v177[2] = v170;
        v177[3] = __n;
        v179[0] = v177;
        v160 = 770;
        v180 = 770;
        v181[0] = v179;
        v181[2] = &v188;
        v182 = 3074;
        v183[0] = v181;
        v183[2] = " segment size: ";
        v184 = 770;
        v185[0] = v183;
        v185[2] = &v187;
        v186 = 2562;
        v207 = (const char *)v185;
        v208 = ")";
LABEL_226:
        v210 = v160;
        v161 = operator new();
LABEL_229:
        *v164 = llvm::object::GenericBinaryError::GenericBinaryError(v161, (llvm::Twine *)&v207, 3u);
LABEL_207:
        if (__p)
          operator delete(__p);
        if (v197)
          operator delete(v197);
        if (v200)
          operator delete(v200);
        if (v203)
          operator delete(v203);
        return sub_1C4F02264((uint64_t)v206);
      case 2:
        v89 = sub_1C5A12990(v4);
        if (HIDWORD(v89))
          goto LABEL_230;
        v90 = v89;
        v91 = *(unsigned int *)(a1 + 672);
        if (v91 + ((uint64_t)(*(_QWORD *)(a1 + 360) - *(_QWORD *)(a1 + 352)) >> 6) <= v89
          || ((v74 >> 4) ^ 1) != v91 <= v89)
        {
          v161 = operator new();
          v162 = "invalid global symbol index";
          goto LABEL_228;
        }
        if (!v74)
        {
          v92 = sub_1C5A0EE78(v4);
          v80 = (unsigned __int8 *)v92;
          __n = v93;
          v94 = *(_QWORD *)(a1 + 352) + ((unint64_t)(v90 - *(_DWORD *)(a1 + 672)) << 6);
          v172 = v94 + 4;
          if (*(_QWORD *)(v94 + 56))
          {
            v173 = 0;
            goto LABEL_124;
          }
          v173 = 0;
          v171 = 0;
          v82 = 0;
          v83 = 0;
          v174 = 0;
          v84 = 0;
          *(_QWORD *)(v94 + 48) = v92;
          *(_QWORD *)(v94 + 56) = v93;
          goto LABEL_168;
        }
        if ((v73 & 3) == 1)
          goto LABEL_223;
        v112 = *(_QWORD *)&v203[8 * v89];
        if ((v73 & 0x40) != 0)
        {
          v80 = (unsigned __int8 *)sub_1C5A0EE78(v4);
          __n = v114;
          v174 = *(_BYTE *)(v112 + 16);
          v212[0] = *(_QWORD *)(v112 + 17);
          *(_QWORD *)((char *)v212 + 7) = *(_QWORD *)(v112 + 24);
          v84 = 1;
        }
        else
        {
          v174 = 0;
          v84 = 0;
          v80 = *(unsigned __int8 **)(v112 + 16);
          __n = *(_QWORD *)(v112 + 24);
        }
        v172 = v112 + 40;
        if (*(_QWORD *)(v112 + 8))
        {
          v173 = 0;
          goto LABEL_153;
        }
        v173 = 0;
        goto LABEL_165;
      case 3:
        if ((v72 & 3) != 2)
        {
          v161 = operator new();
          v162 = "section symbols must have local binding";
          goto LABEL_228;
        }
        v95 = sub_1C5A12990(v4);
        if (HIDWORD(v95))
          goto LABEL_230;
        v172 = 0;
        v173 = 0;
        v171 = 0;
        v82 = 0;
        v83 = 0;
        v174 = 0;
        v84 = 0;
        v96 = *(_QWORD *)(a1 + 72) + 72 * v95;
        v80 = *(unsigned __int8 **)(v96 + 8);
        __n = *(_QWORD *)(v96 + 16);
        v76 = v95;
        goto LABEL_169;
      case 4:
        v97 = sub_1C5A12990(v4);
        if (HIDWORD(v97))
          goto LABEL_230;
        v90 = v97;
        v98 = *(unsigned int *)(a1 + 684);
        if (v98 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a1 + 384) - *(_QWORD *)(a1 + 376)) >> 3) <= v97
          || ((v74 >> 4) ^ 1) != v98 <= v97)
        {
          v161 = operator new();
          v162 = "invalid tag symbol index";
          goto LABEL_228;
        }
        if (!v74)
        {
          v99 = sub_1C5A0EE78(v4);
          v80 = (unsigned __int8 *)v99;
          __n = v100;
          v101 = v90 - *(_DWORD *)(a1 + 684);
          v102 = *(_QWORD *)(a1 + 376);
          v103 = v102 + 24 * v101;
          v173 = *(_QWORD *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v103 + 4) << 6);
          if (!*(_QWORD *)(v103 + 16))
          {
            v171 = 0;
            v172 = 0;
            v82 = 0;
            v83 = 0;
            v174 = 0;
            v84 = 0;
            v117 = v102 + 24 * v101;
            *(_QWORD *)(v117 + 8) = v99;
            *(_QWORD *)(v117 + 16) = v100;
            goto LABEL_168;
          }
          v172 = 0;
LABEL_124:
          v171 = 0;
          goto LABEL_131;
        }
        if ((v73 & 3) == 1)
        {
LABEL_223:
          v161 = operator new();
          v162 = "undefined weak global symbol";
          goto LABEL_228;
        }
        v112 = *((_QWORD *)v197 + v97);
        if ((v73 & 0x40) != 0)
        {
          v80 = (unsigned __int8 *)sub_1C5A0EE78(v4);
          __n = v115;
          v174 = *(_BYTE *)(v112 + 16);
          v212[0] = *(_QWORD *)(v112 + 17);
          *(_QWORD *)((char *)v212 + 7) = *(_QWORD *)(v112 + 24);
          v84 = 1;
        }
        else
        {
          v174 = 0;
          v84 = 0;
          v80 = *(unsigned __int8 **)(v112 + 16);
          __n = *(_QWORD *)(v112 + 24);
        }
        v173 = *(_QWORD *)(a1 + 280) + ((unint64_t)*(unsigned int *)(v112 + 40) << 6);
        if (*(_QWORD *)(v112 + 8))
        {
          v172 = 0;
LABEL_153:
          v171 = 0;
          goto LABEL_157;
        }
        v172 = 0;
LABEL_165:
        v171 = 0;
        goto LABEL_167;
      case 5:
        v104 = sub_1C5A12990(v4);
        if (HIDWORD(v104))
          goto LABEL_230;
        v90 = v104;
        v105 = *(unsigned int *)(a1 + 676);
        if (v105 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) <= v104
          || ((v74 >> 4) ^ 1) != v105 <= v104)
        {
          v161 = operator new();
          v162 = "invalid table symbol index";
          goto LABEL_228;
        }
        if (v74)
        {
          if ((v73 & 3) == 1)
          {
            v161 = operator new();
            v162 = "undefined weak table symbol";
LABEL_228:
            v207 = v162;
            v210 = 259;
            goto LABEL_229;
          }
          v112 = *((_QWORD *)__p + v104);
          if ((v73 & 0x40) != 0)
          {
            v80 = (unsigned __int8 *)sub_1C5A0EE78(v4);
            __n = v116;
            v174 = *(_BYTE *)(v112 + 16);
            v212[0] = *(_QWORD *)(v112 + 17);
            *(_QWORD *)((char *)v212 + 7) = *(_QWORD *)(v112 + 24);
            v84 = 1;
          }
          else
          {
            v174 = 0;
            v84 = 0;
            v80 = *(unsigned __int8 **)(v112 + 16);
            __n = *(_QWORD *)(v112 + 24);
          }
          v171 = v112 + 40;
          if (*(_QWORD *)(v112 + 8))
          {
            v172 = 0;
            v173 = 0;
LABEL_157:
            v82 = *(_BYTE *)v112;
            v213[0] = *(_QWORD *)(v112 + 1);
            *(_QWORD *)((char *)v213 + 7) = *(_QWORD *)(v112 + 8);
            v83 = 1;
          }
          else
          {
            v172 = 0;
            v173 = 0;
LABEL_167:
            v82 = 0;
            v83 = 0;
          }
        }
        else
        {
          v106 = sub_1C5A0EE78(v4);
          v80 = (unsigned __int8 *)v106;
          __n = v107;
          v108 = v90 - *(_DWORD *)(a1 + 676);
          v109 = *(_QWORD *)(a1 + 304);
          v110 = v109 + 56 * v108;
          v171 = v110 + 8;
          if (*(_QWORD *)(v110 + 48))
          {
            v172 = 0;
            v173 = 0;
LABEL_131:
            v82 = 0;
            v83 = 0;
            v174 = 0;
            v84 = 0;
          }
          else
          {
            v172 = 0;
            v173 = 0;
            v82 = 0;
            v83 = 0;
            v174 = 0;
            v84 = 0;
            v118 = v109 + 56 * v108;
            *(_QWORD *)(v118 + 40) = v106;
            *(_QWORD *)(v118 + 48) = v107;
          }
        }
LABEL_168:
        v76 = v90;
        goto LABEL_169;
      default:
        v207 = "invalid symbol type: ";
        v208 = v176;
        v160 = 2051;
        goto LABEL_226;
    }
  }
}

BOOL llvm::object::WasmObjectFile::isValidFunctionSymbol(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 67);
  return a2 < (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5)
      && *(_BYTE *)(*(_QWORD *)(v2 + 32 * a2) + 16) == 0;
}

BOOL llvm::object::WasmObjectFile::isDefinedGlobalIndex(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 168);
  return v2 <= a2
      && v2 + ((uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 6) > (unint64_t)a2;
}

BOOL llvm::object::WasmObjectFile::isValidTableNumber(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  return (unint64_t)*((unsigned int *)this + 169)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 3) > a2;
}

BOOL llvm::object::WasmObjectFile::isDefinedTableNumber(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 169);
  return v2 <= a2
      && v2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 3) > (unint64_t)a2;
}

BOOL llvm::object::WasmObjectFile::isValidTagIndex(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  return (unint64_t)*((unsigned int *)this + 171)
       - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 3) > a2;
}

BOOL llvm::object::WasmObjectFile::isDefinedTagIndex(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 171);
  return v2 <= a2
      && v2 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 3) > (unint64_t)a2;
}

void llvm::object::WasmObjectFile::parseProducersSection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  const void *v32;
  __int128 *p_dst;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  unint64_t v40;
  char *v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  void **v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v66;
  void *__p[2];
  unint64_t v68;
  __int128 __src;
  __int128 v70;
  __int128 __dst;
  unint64_t v72;
  __int16 v73;
  void *v74;
  uint64_t v75;
  _WORD v76[64];
  _QWORD **v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _BYTE v82[48];
  _QWORD **v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v80 = v82;
  v81 = 0x300000000;
  v84 = 0;
  v85 = 0;
  v83 = &v84;
  v4 = sub_1C5A12990(a2);
  if (HIDWORD(v4))
LABEL_121:
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v5 = v4;
  if (!v4)
    goto LABEL_110;
  v6 = 0;
  v60 = a1 + 184;
  v61 = a1 + 232;
  v59 = a1 + 208;
  v62 = v4;
  do
  {
    v63 = v6;
    v7 = sub_1C5A0EE78(a2);
    *(_QWORD *)&v70 = v7;
    *((_QWORD *)&v70 + 1) = v8;
    if (v85)
    {
      sub_1C62B22C4((uint64_t)&v83, (uint64_t)&v70, &v70);
      if ((v54 & 1) == 0)
        goto LABEL_117;
    }
    else
    {
      v9 = (const void *)v7;
      v10 = v8;
      v11 = v80;
      v12 = v81;
      if (!(_DWORD)v81)
        goto LABEL_14;
      v13 = 16 * v81;
      v14 = v80 + 8;
      while (*v14 != v10 || v10 && memcmp((const void *)*(v14 - 1), v9, v10))
      {
        v14 += 2;
        v13 -= 16;
        if (!v13)
          goto LABEL_13;
      }
      if (v13)
      {
LABEL_117:
        v56 = operator new();
        v57 = "producers section does not have unique fields";
        goto LABEL_118;
      }
LABEL_13:
      if (v12 >= 3)
      {
        do
        {
          sub_1C62B22C4((uint64_t)&v83, (uint64_t)&v80[16 * v12 - 16], &v80[16 * v12 - 16]);
          v17 = v81;
          LODWORD(v12) = v81 - 1;
          LODWORD(v81) = v81 - 1;
        }
        while (v17 != 1);
        sub_1C62B22C4((uint64_t)&v83, (uint64_t)&v70, &v70);
      }
      else
      {
LABEL_14:
        if (v12 >= HIDWORD(v81))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v12 + 1, 16);
          v11 = v80;
          v12 = v81;
        }
        v15 = &v11[16 * v12];
        *(_QWORD *)v15 = v9;
        *((_QWORD *)v15 + 1) = v10;
        LODWORD(v81) = v81 + 1;
      }
    }
    switch(*((_QWORD *)&v70 + 1))
    {
      case 3:
        v18 = *(_WORD *)v70 == 25715 && *(_BYTE *)(v70 + 2) == 107;
        v16 = v61;
        if (!v18)
        {
LABEL_116:
          v56 = operator new();
          v57 = "producers section field is not named one of language, processed-by, or sdk";
          goto LABEL_118;
        }
        break;
      case 0xCLL:
        v19 = *(_QWORD *)v70 == 0x65737365636F7270 && *(_DWORD *)(v70 + 8) == 2036477284;
        v16 = v59;
        if (!v19)
          goto LABEL_116;
        break;
      case 8:
        v16 = v60;
        if (*(_QWORD *)v70 != 0x65676175676E616CLL)
          goto LABEL_116;
        break;
      default:
        goto LABEL_116;
    }
    v20 = sub_1C5A12990(a2);
    if (HIDWORD(v20))
      goto LABEL_121;
    v74 = v76;
    v75 = 0x800000000;
    v78 = 0;
    v79 = 0;
    v77 = &v78;
    if (!v20)
    {
      v22 = 0;
      goto LABEL_102;
    }
    v21 = 0;
    v22 = 1;
    v64 = v20;
    while (1)
    {
      *(_QWORD *)&__src = sub_1C5A0EE78(a2);
      *((_QWORD *)&__src + 1) = v23;
      v66 = (void *)sub_1C5A0EE78(a2);
      v25 = v24;
      if (!v79)
        break;
      sub_1C62B22C4((uint64_t)&v77, (uint64_t)&__src, &__src);
      if ((v53 & 1) == 0)
        goto LABEL_109;
LABEL_50:
      v31 = *((_QWORD *)&__src + 1);
      if (*((_QWORD *)&__src + 1) > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_119;
      v32 = (const void *)__src;
      if (*((_QWORD *)&__src + 1) >= 0x17uLL)
      {
        v34 = (*((_QWORD *)&__src + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*((_QWORD *)&__src + 1) | 7) != 0x17)
          v34 = *((_QWORD *)&__src + 1) | 7;
        v35 = v34 + 1;
        p_dst = (__int128 *)operator new(v34 + 1);
        *((_QWORD *)&__dst + 1) = v31;
        v72 = v35 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
LABEL_59:
        memmove(p_dst, v32, v31);
        goto LABEL_60;
      }
      HIBYTE(v72) = BYTE8(__src);
      p_dst = &__dst;
      if (*((_QWORD *)&__src + 1))
        goto LABEL_59;
LABEL_60:
      *((_BYTE *)p_dst + v31) = 0;
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_119;
      if (v25 >= 0x17)
      {
        v37 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v37 = v25 | 7;
        v38 = v37 + 1;
        v36 = operator new(v37 + 1);
        __p[1] = (void *)v25;
        v68 = v38 | 0x8000000000000000;
        __p[0] = v36;
      }
      else
      {
        HIBYTE(v68) = v25;
        v36 = __p;
        if (!v25)
          goto LABEL_68;
      }
      memmove(v36, v66, v25);
LABEL_68:
      *((_BYTE *)v36 + v25) = 0;
      v39 = *(void ***)(v16 + 8);
      v40 = *(_QWORD *)(v16 + 16);
      if ((unint64_t)v39 >= v40)
      {
        v42 = *(void ***)v16;
        v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *(_QWORD *)v16) >> 4);
        v44 = v43 + 1;
        if (v43 + 1 > 0x555555555555555)
LABEL_119:
          abort();
        v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v42) >> 4);
        if (2 * v45 > v44)
          v44 = 2 * v45;
        if (v45 >= 0x2AAAAAAAAAAAAAALL)
          v46 = 0x555555555555555;
        else
          v46 = v44;
        if (v46)
        {
          if (v46 > 0x555555555555555)
            sub_1C4764EE4();
          v47 = (char *)operator new(48 * v46);
          v39 = *(void ***)(v16 + 8);
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[48 * v43];
        *((_QWORD *)v48 + 2) = v72;
        *(_OWORD *)v48 = __dst;
        v49 = &v47[48 * v46];
        v72 = 0;
        __dst = 0uLL;
        *(_OWORD *)(v48 + 24) = *(_OWORD *)__p;
        *((_QWORD *)v48 + 5) = v68;
        __p[0] = 0;
        __p[1] = 0;
        v41 = v48 + 48;
        v68 = 0;
        if (v39 == v42)
        {
          *(_QWORD *)v16 = v48;
          *(_QWORD *)(v16 + 8) = v41;
          *(_QWORD *)(v16 + 16) = v49;
        }
        else
        {
          do
          {
            v50 = *((_OWORD *)v39 - 3);
            *((_QWORD *)v48 - 4) = *(v39 - 4);
            *((_OWORD *)v48 - 3) = v50;
            *(v39 - 5) = 0;
            *(v39 - 4) = 0;
            *(v39 - 6) = 0;
            v51 = *(_OWORD *)(v39 - 3);
            *((_QWORD *)v48 - 1) = *(v39 - 1);
            *(_OWORD *)(v48 - 24) = v51;
            v48 -= 48;
            *(v39 - 2) = 0;
            *(v39 - 1) = 0;
            *(v39 - 3) = 0;
            v39 -= 6;
          }
          while (v39 != v42);
          v42 = *(void ***)v16;
          v52 = *(void ***)(v16 + 8);
          *(_QWORD *)v16 = v48;
          *(_QWORD *)(v16 + 8) = v41;
          *(_QWORD *)(v16 + 16) = v49;
          while (v52 != v42)
          {
            if (*((char *)v52 - 1) < 0)
              operator delete(*(v52 - 3));
            if (*((char *)v52 - 25) < 0)
              operator delete(*(v52 - 6));
            v52 -= 6;
          }
        }
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_OWORD *)v39 = __dst;
        v39[2] = (void *)v72;
        v72 = 0;
        __dst = 0uLL;
        *(_OWORD *)(v39 + 3) = *(_OWORD *)__p;
        v39[5] = (void *)v68;
        __p[0] = 0;
        __p[1] = 0;
        v68 = 0;
        v41 = (char *)(v39 + 6);
      }
      *(_QWORD *)(v16 + 8) = v41;
      if (SHIBYTE(v68) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v72) < 0)
        operator delete((void *)__dst);
      v22 = ++v21 < v64;
      if (v21 == v64)
      {
        v22 = 0;
        goto LABEL_100;
      }
    }
    v26 = v74;
    v27 = v75;
    v28 = __src;
    if (!(_DWORD)v75)
      goto LABEL_47;
    v29 = 16 * v75;
    v30 = (char *)v74 + 8;
    while (*v30 != *((_QWORD *)&v28 + 1)
         || *((_QWORD *)&v28 + 1) && memcmp((const void *)*(v30 - 1), (const void *)v28, *((size_t *)&v28 + 1)))
    {
      v30 += 2;
      v29 -= 16;
      if (!v29)
        goto LABEL_46;
    }
    if (!v29)
    {
LABEL_46:
      if (v27 >= 8)
      {
        do
        {
          sub_1C62B22C4((uint64_t)&v77, (uint64_t)v74 + 16 * v27 - 16, (_OWORD *)v74 + v27 - 1);
          LODWORD(v27) = v75 - 1;
          LODWORD(v75) = v75 - 1;
        }
        while ((_DWORD)v75);
        sub_1C62B22C4((uint64_t)&v77, (uint64_t)&__src, &__src);
        goto LABEL_50;
      }
LABEL_47:
      if (v27 >= HIDWORD(v75))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v27 + 1, 16);
        v26 = v74;
        v27 = v75;
      }
      v26[v27] = v28;
      LODWORD(v75) = v75 + 1;
      goto LABEL_50;
    }
LABEL_109:
    v55 = operator new();
    *(_QWORD *)&__dst = "producers section contains repeated producer";
    v73 = 259;
    *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v55, (llvm::Twine *)&__dst, 3u);
LABEL_100:
    v5 = v62;
LABEL_102:
    sub_1C47655E8((uint64_t)&v77, v78);
    if (v74 != v76)
      free(v74);
    if (v22)
      goto LABEL_112;
    v6 = v63 + 1;
  }
  while (v63 + 1 != v5);
LABEL_110:
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
  {
    *a3 = 0;
    goto LABEL_112;
  }
  v56 = operator new();
  v57 = "producers section ended prematurely";
LABEL_118:
  v74 = v57;
  v76[8] = 259;
  *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v56, (llvm::Twine *)&v74, 3u);
LABEL_112:
  sub_1C47655E8((uint64_t)&v83, v84);
  if (v80 != v82)
    free(v80);
}

char **llvm::object::WasmObjectFile::parseTargetFeaturesSection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  const void *v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 *p_p;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  __int128 v31;
  char *v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  char *v43;
  char v44;
  __int128 v45;
  void **v46;
  std::string *v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v55;
  std::string v56;
  void *v57[2];
  std::string::size_type v58;
  char v59;
  __int128 __p;
  int64_t v61;
  __int128 __dst;
  unint64_t v63;
  __int16 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char **v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v65 = (char *)&v67;
  v66 = 0x800000000;
  v69 = 0;
  v70 = 0;
  v68 = &v69;
  v5 = sub_1C5A12990(a2);
  if (HIDWORD(v5))
  {
    v53 = "LEB is outside Varuint32 range";
LABEL_97:
    llvm::report_fatal_error((llvm *)v53, (const char *)1);
  }
  if (!v5)
    goto LABEL_88;
  v6 = 0;
  v55 = v5;
  while (1)
  {
    __p = 0uLL;
    v61 = 0;
    v7 = *(unsigned __int8 **)(a2 + 8);
    if (v7 == *(unsigned __int8 **)(a2 + 16))
    {
      v53 = "EOF while reading uint8";
      goto LABEL_97;
    }
    *(_QWORD *)(a2 + 8) = v7 + 1;
    v8 = *v7;
    v59 = v8;
    v9 = v8 > 0x3D;
    v10 = (1 << v8) & 0x2000280000000000;
    if (v9 || v10 == 0)
    {
      v52 = operator new();
      *(_QWORD *)&__dst = "unknown feature policy prefix";
      v64 = 259;
      *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v52, (llvm::Twine *)&__dst, 3u);
      goto LABEL_93;
    }
    v12 = sub_1C5A0EE78(a2);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_95;
    v14 = (const void *)v12;
    v15 = v13;
    if (v13 >= 0x17)
    {
      v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v17 = v13 | 7;
      v18 = v17 + 1;
      p_dst = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&__dst + 1) = v15;
      v63 = v18 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_16:
      memmove(p_dst, v14, v15);
      goto LABEL_17;
    }
    HIBYTE(v63) = v13;
    p_dst = &__dst;
    if (v13)
      goto LABEL_16;
LABEL_17:
    *((_BYTE *)p_dst + v15) = 0;
    if (SHIBYTE(v61) < 0)
      operator delete((void *)__p);
    __p = __dst;
    v61 = v63;
    if (v70)
      break;
    v19 = v66;
    if (!(_DWORD)v66)
      goto LABEL_42;
    v20 = v65;
    v21 = &v65[24 * v66];
    if (v61 >= 0)
      v22 = HIBYTE(v61) & 0x7F;
    else
      v22 = *((_QWORD *)&__p + 1);
    if (v61 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    while (1)
    {
      v24 = v20[23];
      v25 = v24 & 0x7F;
      v26 = v24 >= 0 ? v24 & 0x7F : *((_QWORD *)v20 + 1);
      if (v26 == v22)
      {
        if ((v20[23] & 0x80) == 0)
        {
          if ((v24 & 0x7F) == 0)
            break;
          v27 = 0;
          while (v20[v27] == *((_BYTE *)p_p + v27))
          {
            if (v25 == ++v27)
              goto LABEL_40;
          }
          goto LABEL_38;
        }
        if (!memcmp(*(const void **)v20, p_p, *((_QWORD *)v20 + 1)))
          break;
      }
LABEL_38:
      v20 += 24;
      if (v20 == v21)
        goto LABEL_41;
    }
LABEL_40:
    if (v20 != v21)
      goto LABEL_84;
LABEL_41:
    if (v19 >= 8)
    {
      do
      {
        sub_1C62DDE80((uint64_t)&v68, (const void **)&v65[24 * v19 - 24], (uint64_t)&v65[24 * v19 - 24]);
        v19 = v66 - 1;
        LODWORD(v66) = v19;
        v32 = &v65[24 * v19];
        if (v32[23] < 0)
        {
          operator delete(*(void **)v32);
          v19 = v66;
        }
      }
      while (v19);
      sub_1C62DDE80((uint64_t)&v68, (const void **)&__p, (uint64_t)&__p);
    }
    else
    {
LABEL_42:
      sub_1C505C3A0((uint64_t)&v65, (unint64_t)&__p);
    }
LABEL_43:
    v29 = (char *)a1[33];
    v28 = a1[34];
    if ((unint64_t)v29 < v28)
    {
      *v29 = v59;
      v30 = v29 + 8;
      if (SHIBYTE(v61) < 0)
      {
        sub_1C47EBC30(v30, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        v31 = __p;
        *((_QWORD *)v29 + 3) = v61;
        *(_OWORD *)v30 = v31;
      }
      v39 = v55;
      v40 = v29 + 32;
      goto LABEL_75;
    }
    v33 = (void **)a1[32];
    v34 = (v29 - (char *)v33) >> 5;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 59)
LABEL_95:
      abort();
    v36 = v28 - (_QWORD)v33;
    if (v36 >> 4 > v35)
      v35 = v36 >> 4;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
      v37 = 0x7FFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 59)
        sub_1C4764EE4();
      v38 = (char *)operator new(32 * v37);
    }
    else
    {
      v38 = 0;
    }
    v41 = &v38[32 * v34];
    *v41 = v59;
    v42 = v41 + 8;
    if (SHIBYTE(v61) < 0)
    {
      sub_1C47EBC30(v42, (void *)__p, *((unint64_t *)&__p + 1));
      v33 = (void **)a1[32];
      v29 = (char *)a1[33];
    }
    else
    {
      *(_OWORD *)v42 = __p;
      *((_QWORD *)v41 + 3) = v61;
    }
    if (v29 == (char *)v33)
    {
      v40 = v41 + 32;
      a1[32] = v41;
      a1[33] = v41 + 32;
      a1[34] = &v38[32 * v37];
      v39 = v55;
      if (v33)
        goto LABEL_74;
    }
    else
    {
      v43 = v41;
      do
      {
        v44 = *(v29 - 32);
        v29 -= 32;
        *(v43 - 32) = v44;
        v43 -= 32;
        v45 = *(_OWORD *)(v29 + 8);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v29 + 3);
        *(_OWORD *)(v43 + 8) = v45;
        *((_QWORD *)v29 + 2) = 0;
        *((_QWORD *)v29 + 3) = 0;
        *((_QWORD *)v29 + 1) = 0;
      }
      while (v29 != (char *)v33);
      v33 = (void **)a1[32];
      v46 = (void **)a1[33];
      v40 = v41 + 32;
      a1[32] = v43;
      a1[33] = v41 + 32;
      a1[34] = &v38[32 * v37];
      if (v46 == v33)
      {
        v39 = v55;
        if (v33)
          goto LABEL_74;
      }
      else
      {
        v39 = v55;
        do
        {
          if (*((char *)v46 - 1) < 0)
            operator delete(*(v46 - 3));
          v46 -= 4;
        }
        while (v46 != v33);
        if (v33)
LABEL_74:
          operator delete(v33);
      }
    }
LABEL_75:
    a1[33] = v40;
    if (SHIBYTE(v61) < 0)
      operator delete((void *)__p);
    if (++v6 == v39)
    {
LABEL_88:
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16))
      {
        *a3 = 0;
      }
      else
      {
        v51 = operator new();
        *(_QWORD *)&__dst = "target features section ended prematurely";
        v64 = 259;
        *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v51, (llvm::Twine *)&__dst, 3u);
      }
      goto LABEL_90;
    }
  }
  if ((sub_1C62DDE80((uint64_t)&v68, (const void **)&__p, (uint64_t)&__p) & 1) != 0)
    goto LABEL_43;
LABEL_84:
  std::operator+<char>();
  v47 = std::string::append(&v56, "\"");
  v48 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)v57 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v58 = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v49 = operator new();
  v64 = 260;
  *(_QWORD *)&__dst = v57;
  *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v49, (llvm::Twine *)&__dst, 3u);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
LABEL_93:
  if (SHIBYTE(v61) < 0)
    operator delete((void *)__p);
LABEL_90:
  sub_1C47653C0((uint64_t)&v68, v69);
  return sub_1C4E01820(&v65);
}

void llvm::object::WasmObjectFile::parseRelocSection(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char **v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  uint64_t *v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD v57[4];
  __int16 v58;

  v3 = a2;
  v6 = sub_1C5A12990(a2);
  if (HIDWORD(v6))
    goto LABEL_90;
  v7 = v6;
  v8 = a1[9];
  if (0x8E38E38E38E38E39 * ((a1[10] - v8) >> 3) <= v6)
  {
    v47 = operator new();
    v57[0] = "invalid section index";
    v58 = 259;
    *a3 = llvm::object::GenericBinaryError::GenericBinaryError(v47, (llvm::Twine *)v57, 3u);
    return;
  }
  v51 = a3;
  v9 = sub_1C5A12990(v3);
  if (HIDWORD(v9))
  {
LABEL_90:
    v50 = "LEB is outside Varuint32 range";
LABEL_91:
    llvm::report_fatal_error((llvm *)v50, (const char *)1);
  }
  v10 = v9;
  if ((_DWORD)v9)
  {
    LODWORD(v11) = 0;
    v12 = v8 + 72 * v7;
    v13 = *(unsigned int *)(v12 + 40);
    v14 = (char **)(v12 + 56);
    v54 = (_QWORD *)(v12 + 48);
    v55 = (_QWORD *)(v12 + 64);
    v52 = v13;
    while (1)
    {
      v15 = v11;
      v16 = sub_1C5A12990(v3);
      if (HIDWORD(v16))
        goto LABEL_90;
      v17 = v16;
      v18 = sub_1C5A12990(v3);
      if (HIDWORD(v18))
        goto LABEL_90;
      if (v15 > v18)
      {
        v48 = operator new();
        v49 = "relocations not in offset order";
        goto LABEL_83;
      }
      v56 = v18;
      v19 = sub_1C5A12990(v3);
      if (HIDWORD(v19))
        goto LABEL_90;
      v20 = v19;
      switch((int)v17)
      {
        case 0:
        case 1:
        case 2:
        case 12:
        case 18:
        case 19:
        case 24:
          v21 = a1[67];
          if (v19 < (a1[68] - v21) >> 5 && !*(_BYTE *)(*(_QWORD *)(v21 + 32 * v19) + 16))
            goto LABEL_13;
          goto LABEL_75;
        case 3:
        case 4:
        case 5:
        case 11:
        case 21:
        case 23:
          v23 = a1[67];
          if (v19 < (a1[68] - v23) >> 5 && *(_BYTE *)(*(_QWORD *)(v23 + 32 * v19) + 16) == 1)
            goto LABEL_16;
          goto LABEL_82;
        case 6:
          if (v19 < (uint64_t)(a1[36] - a1[35]) >> 6)
            goto LABEL_13;
          v48 = operator new();
          v49 = "invalid relocation type index";
          goto LABEL_83;
        case 7:
          v40 = a1[67];
          if (v19 >= (a1[68] - v40) >> 5 || *(unsigned __int8 *)(*(_QWORD *)(v40 + 32 * v19) + 16) >= 3u)
            goto LABEL_85;
          goto LABEL_13;
        case 8:
          v41 = a1[67];
          if (v19 >= (a1[68] - v41) >> 5 || *(_BYTE *)(*(_QWORD *)(v41 + 32 * v19) + 16))
            goto LABEL_75;
          goto LABEL_16;
        case 9:
          v42 = a1[67];
          if (v19 >= (a1[68] - v42) >> 5 || *(_BYTE *)(*(_QWORD *)(v42 + 32 * v19) + 16) != 3)
          {
            v48 = operator new();
            v49 = "invalid relocation section index";
            goto LABEL_83;
          }
LABEL_16:
          v22 = sub_1C5A12A1C(v3);
          if (v22 == (int)v22)
            goto LABEL_21;
          v50 = "LEB is outside Varint32 range";
          goto LABEL_91;
        case 10:
          v43 = a1[67];
          if (v19 < (a1[68] - v43) >> 5 && *(_BYTE *)(*(_QWORD *)(v43 + 32 * v19) + 16) == 4)
            goto LABEL_13;
          v48 = operator new();
          v49 = "invalid relocation tag index";
          goto LABEL_83;
        case 13:
          v44 = a1[67];
          if (v19 < (a1[68] - v44) >> 5 && *(_BYTE *)(*(_QWORD *)(v44 + 32 * v19) + 16) == 2)
            goto LABEL_13;
LABEL_85:
          v48 = operator new();
          v49 = "invalid relocation global index";
          goto LABEL_83;
        case 14:
        case 15:
        case 16:
        case 17:
        case 25:
          v24 = a1[67];
          if (v19 < (a1[68] - v24) >> 5 && *(_BYTE *)(*(_QWORD *)(v24 + 32 * v19) + 16) == 1)
            goto LABEL_20;
LABEL_82:
          v48 = operator new();
          v49 = "invalid relocation data index";
          goto LABEL_83;
        case 20:
          v45 = a1[67];
          if (v19 >= (a1[68] - v45) >> 5 || *(_BYTE *)(*(_QWORD *)(v45 + 32 * v19) + 16) != 5)
          {
            v48 = operator new();
            v49 = "invalid relocation table index";
            goto LABEL_83;
          }
LABEL_13:
          v22 = 0;
          goto LABEL_21;
        case 22:
          v46 = a1[67];
          if (v19 >= (a1[68] - v46) >> 5 || *(_BYTE *)(*(_QWORD *)(v46 + 32 * v19) + 16))
          {
LABEL_75:
            v48 = operator new();
            v49 = "invalid relocation function index";
LABEL_83:
            v57[0] = v49;
            v58 = 259;
LABEL_84:
            *v51 = llvm::object::GenericBinaryError::GenericBinaryError(v48, (llvm::Twine *)v57, 3u);
            return;
          }
LABEL_20:
          v22 = sub_1C5A12A1C(v3);
LABEL_21:
          v11 = v56;
          if ((v17 - 14) > 3u)
            v25 = 5;
          else
            v25 = qword_1C8667C68[(char)(v17 - 14)];
          if (v17 <= 0x17u && ((1 << v17) & 0x802324) != 0)
            v25 = 4;
          if (v17 <= 0x16u && ((1 << v17) & 0x490000) != 0)
            v25 = 8;
          if (v25 + v56 > v13)
          {
            v48 = operator new();
            v49 = "invalid relocation offset";
            goto LABEL_83;
          }
          v26 = *v14;
          if ((unint64_t)*v14 >= *v55)
          {
            v53 = v10;
            v28 = v3;
            v29 = a1;
            v30 = (char *)*v54;
            v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v26[-*v54] >> 3);
            v32 = v31 + 1;
            if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((uint64_t)(*v55 - (_QWORD)v30) >> 3) > v32)
              v32 = 0x5555555555555556 * ((uint64_t)(*v55 - (_QWORD)v30) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v55 - (_QWORD)v30) >> 3) >= 0x555555555555555)
              v33 = 0xAAAAAAAAAAAAAAALL;
            else
              v33 = v32;
            if (v33)
            {
              if (v33 > 0xAAAAAAAAAAAAAAALL)
                sub_1C4764EE4();
              v34 = v22;
              v35 = (char *)operator new(24 * v33);
              v11 = v56;
              v22 = v34;
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[24 * v31];
            *v36 = v17;
            *(_WORD *)(v36 + 1) = 0;
            v36[3] = 0;
            *((_DWORD *)v36 + 1) = v20;
            *((_QWORD *)v36 + 1) = v11;
            *((_QWORD *)v36 + 2) = v22;
            v37 = v36;
            a1 = v29;
            if (v26 == v30)
            {
              v3 = v28;
              v38 = (char **)v54;
            }
            else
            {
              v38 = (char **)v54;
              do
              {
                v39 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v37 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v37 - 24) = v39;
                v37 -= 24;
                v26 -= 24;
              }
              while (v26 != v30);
              v26 = (char *)*v54;
              v3 = v28;
            }
            *v38 = v37;
            v27 = v36 + 24;
            *v14 = v36 + 24;
            *v55 = &v35[24 * v33];
            v13 = v52;
            if (v26)
            {
              operator delete(v26);
              LODWORD(v11) = v56;
            }
            v10 = v53;
          }
          else
          {
            *v26 = v17;
            *(_WORD *)(v26 + 1) = 0;
            v26[3] = 0;
            *((_DWORD *)v26 + 1) = v20;
            v27 = v26 + 24;
            *((_QWORD *)v26 + 1) = v56;
            *((_QWORD *)v26 + 2) = v22;
          }
          *v14 = v27;
          if (!--v10)
            goto LABEL_76;
          break;
        default:
          v57[0] = "invalid relocation type: ";
          v57[2] = v17;
          v58 = 2051;
          v48 = operator new();
          goto LABEL_84;
      }
    }
  }
LABEL_76:
  if (*(_QWORD *)(v3 + 8) != *(_QWORD *)(v3 + 16))
  {
    v48 = operator new();
    v49 = "reloc section ended prematurely";
    goto LABEL_83;
  }
  *v51 = 0;
}

BOOL llvm::object::WasmObjectFile::isValidTableSymbol(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 67);
  return a2 < (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5)
      && *(_BYTE *)(*(_QWORD *)(v2 + 32 * a2) + 16) == 5;
}

BOOL llvm::object::WasmObjectFile::isValidGlobalSymbol(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 67);
  return a2 < (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5)
      && *(_BYTE *)(*(_QWORD *)(v2 + 32 * a2) + 16) == 2;
}

BOOL llvm::object::WasmObjectFile::isValidDataSymbol(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 67);
  return a2 < (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5)
      && *(_BYTE *)(*(_QWORD *)(v2 + 32 * a2) + 16) == 1;
}

BOOL llvm::object::WasmObjectFile::isValidTagSymbol(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 67);
  return a2 < (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5)
      && *(_BYTE *)(*(_QWORD *)(v2 + 32 * a2) + 16) == 4;
}

BOOL llvm::object::WasmObjectFile::isValidSectionSymbol(llvm::object::WasmObjectFile *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 67);
  return a2 < (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5)
      && *(_BYTE *)(*(_QWORD *)(v2 + 32 * a2) + 16) == 3;
}

uint64_t sub_1C5A11E94(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t result;

  v4 = sub_1C5A12990(a2);
  if (HIDWORD(v4))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const char *)1);
  v5 = v4;
  *(_BYTE *)a1 = v4;
  result = sub_1C5A12990(a2);
  *(_QWORD *)(a1 + 8) = result;
  if ((v5 & 1) != 0)
  {
    result = sub_1C5A12990(a2);
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1C5A11F00(_BYTE *a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 8);
  if (v2 == *(_BYTE **)(a2 + 16))
    llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const char *)1);
  *(_QWORD *)(a2 + 8) = v2 + 1;
  *a1 = *v2;
  return sub_1C5A11E94((uint64_t)(a1 + 8), a2);
}

uint64_t sub_1C5A11F3C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[5];

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v12 = (uint64_t)(v5 - *a1) >> 7;
    if ((unint64_t)(v12 + 1) >> 57)
      abort();
    v13 = v4 - *a1;
    v14 = v13 >> 6;
    if (v13 >> 6 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFF80)
      v15 = 0x1FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v21[4] = a1 + 2;
    if (v15)
    {
      if (v15 >> 57)
        sub_1C4764EE4();
      v16 = (char *)operator new(v15 << 7);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[128 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[128 * v15];
    v18 = *(const void **)(a2 + 8);
    *(_QWORD *)v17 = *(_QWORD *)a2;
    *((_QWORD *)v17 + 2) = 0;
    *((_QWORD *)v17 + 3) = 0;
    *((_QWORD *)v17 + 1) = 0;
    sub_1C4DFE394((_QWORD *)v17 + 1, v18, *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v18) >> 3);
    v19 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v17 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v17 + 5) = v19;
    *((_OWORD *)v17 + 6) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v17 + 108) = *(_OWORD *)(a2 + 108);
    v20 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v17 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v17 + 3) = v20;
    v21[2] = v17 + 128;
    sub_1C62DDF20(a1, v21);
    v11 = a1[1];
    result = sub_1C62DDFD0((uint64_t)v21);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    result = (uint64_t)sub_1C4DFE394((_QWORD *)(v5 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v5 + 48) = v7;
    v8 = *(_OWORD *)(a2 + 64);
    v9 = *(_OWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v5 + 108) = *(_OWORD *)(a2 + 108);
    *(_OWORD *)(v5 + 80) = v9;
    *(_OWORD *)(v5 + 96) = v10;
    *(_OWORD *)(v5 + 64) = v8;
    v11 = v5 + 128;
  }
  a1[1] = v11;
  return result;
}

void sub_1C5A120A4(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;

  v2 = *(_BYTE **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 3 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[24 * ((v4 - v2) / 24)];
    v8 = v7;
    if (v4 != v2)
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v8 = v9 - 24;
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v4 -= 24;
        v9 -= 24;
      }
      while (v4 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * v5];
    if (v2)
      operator delete(v2);
  }
}

void sub_1C5A12178(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(a2 << 6);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFC0];
    v8 = v7;
    if (v5 != v2)
    {
      v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFC0];
      do
      {
        v10 = *((_OWORD *)v5 - 4);
        v11 = *((_OWORD *)v5 - 3);
        v12 = *((_OWORD *)v5 - 1);
        v8 = v9 - 64;
        *((_OWORD *)v9 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v9 - 1) = v12;
        *((_OWORD *)v9 - 4) = v10;
        *((_OWORD *)v9 - 3) = v11;
        v5 -= 64;
        v9 -= 64;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[64 * a2];
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_1C5A12224(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unint64_t v4;
  _QWORD *v7;
  int *v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD v18[4];
  __int16 v19;

  v3 = *(unsigned __int8 **)(a3 + 8);
  *(_BYTE *)a2 = 0;
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 == (unsigned __int8 *)v4)
    goto LABEL_41;
  v7 = (_QWORD *)result;
  v8 = (int *)(v3 + 1);
  *(_QWORD *)(a3 + 8) = v3 + 1;
  v9 = *v3;
  *(_BYTE *)(a2 + 8) = v9;
  switch(v9)
  {
    case 'A':
      result = sub_1C5A12A1C(a3);
      if (result == (int)result)
        goto LABEL_14;
      v10 = "LEB is outside Varint32 range";
      goto LABEL_42;
    case 'B':
      result = sub_1C5A12A1C(a3);
      *(_QWORD *)(a2 + 16) = result;
      goto LABEL_16;
    case 'C':
      if ((unint64_t)(v3 + 5) > v4)
        goto LABEL_43;
      v12 = *v8;
      *(_QWORD *)(a3 + 8) = v3 + 5;
      *(_DWORD *)(a2 + 16) = v12;
      goto LABEL_16;
    case 'D':
      if ((unint64_t)(v3 + 9) > v4)
      {
LABEL_43:
        v10 = "EOF while reading float64";
LABEL_42:
        llvm::report_fatal_error((llvm *)v10, (const char *)1);
      }
      v13 = *(_QWORD *)v8;
      *(_QWORD *)(a3 + 8) = v3 + 9;
      *(_QWORD *)(a2 + 16) = v13;
      goto LABEL_16;
    default:
      if (v9 == 35)
      {
        result = sub_1C5A12990(a3);
LABEL_14:
        *(_DWORD *)(a2 + 16) = result;
      }
      else
      {
        if (v9 != 208)
          goto LABEL_19;
        result = sub_1C5A12990(a3);
        if ((_DWORD)result != 111)
        {
          v11 = operator new();
          v18[0] = "invalid type for ref.null";
          v19 = 259;
LABEL_40:
          result = llvm::object::GenericBinaryError::GenericBinaryError(v11, (llvm::Twine *)v18, 3u);
          *v7 = result;
          return result;
        }
      }
LABEL_16:
      v4 = *(_QWORD *)(a3 + 16);
      if (*(_BYTE *)a2)
        goto LABEL_20;
      v14 = *(_BYTE **)(a3 + 8);
      if (v14 == (_BYTE *)v4)
      {
LABEL_41:
        v10 = "EOF while reading uint8";
        goto LABEL_42;
      }
      *(_QWORD *)(a3 + 8) = v14 + 1;
      if (*v14 == 11)
        goto LABEL_37;
LABEL_19:
      *(_BYTE *)a2 = 1;
LABEL_20:
      *(_QWORD *)(a3 + 8) = v3;
      if (v3 == (unsigned __int8 *)v4)
        goto LABEL_41;
      v15 = v3;
      while (1)
      {
        *(_QWORD *)(a3 + 8) = v15 + 1;
        v16 = *v15;
        if (*v15 <= 0x69u)
          break;
        v17 = (v16 - 106) > 0x14 || ((1 << (v16 - 106)) & 0x1C0007) == 0;
        ++v15;
        if (!v17)
          goto LABEL_32;
        if ((_DWORD)v16 != 208)
          goto LABEL_39;
LABEL_31:
        result = sub_1C5A12990(a3);
        v15 = *(unsigned __int8 **)(a3 + 8);
        v4 = *(_QWORD *)(a3 + 16);
LABEL_32:
        if (v15 == (unsigned __int8 *)v4)
          goto LABEL_41;
      }
      if ((v16 - 65) < 4 || (_DWORD)v16 == 35)
        goto LABEL_31;
      if ((_DWORD)v16 != 11)
      {
LABEL_39:
        v18[0] = "invalid opcode in init_expr: ";
        v18[2] = v16;
        v19 = 2051;
        v11 = operator new();
        goto LABEL_40;
      }
      *(_QWORD *)(a2 + 24) = v3;
      *(_QWORD *)(a2 + 32) = v15 + 1 - v3;
LABEL_37:
      *v7 = 0;
      return result;
  }
}

unint64_t llvm::object::WasmObjectFile::getDefinedGlobal(llvm::object::WasmObjectFile *this, int a2)
{
  return *((_QWORD *)this + 44) + ((unint64_t)(a2 - *((_DWORD *)this + 168)) << 6);
}

uint64_t llvm::object::WasmObjectFile::getDefinedTag(llvm::object::WasmObjectFile *this, int a2)
{
  return *((_QWORD *)this + 47) + 24 * (a2 - *((_DWORD *)this + 171));
}

uint64_t llvm::object::WasmObjectFile::getHeader(llvm::object::WasmObjectFile *this)
{
  return (uint64_t)this + 48;
}

uint64_t llvm::object::WasmObjectFile::getWasmSymbol(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 536) + 32 * *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getWasmSymbol(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(a1 + 536) + 32 * HIDWORD(*a2);
}

uint64_t llvm::object::WasmObjectFile::getWasmSymbolValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = *(unsigned __int8 *)(*a2 + 16);
  if (((1 << v3) & 0x35) != 0)
    return *(unsigned int *)(v2 + 96);
  result = 0;
  if (v3 == 1)
  {
    v6 = *(_DWORD *)(v2 + 96);
    v7 = *(_QWORD *)(a1 + 472);
    if (*(_BYTE *)(v7 + 104 * v6 + 24) == 65)
      v8 = *(int *)(v7 + 104 * v6 + 32);
    else
      v8 = *(_QWORD *)(v7 + 104 * v6 + 32);
    return *(_QWORD *)(v2 + 104) + v8;
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolSectionIdImpl(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C5A12598 + 4 * byte_1C8667C3B[*(unsigned __int8 *)(*(_QWORD *)a2 + 16)]))();
}

uint64_t sub_1C5A12598(uint64_t a1)
{
  return *(unsigned int *)(a1 + 688);
}

uint64_t llvm::object::WasmObjectFile::getSymbolSectionId(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C5A125F8
                            + 4
                            * byte_1C8667C41[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 536)
                                                                            + ((a2 >> 27) & 0x1FFFFFFFE0))
                                                                + 16)]))();
}

uint64_t sub_1C5A125F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 688);
}

uint64_t llvm::object::WasmObjectFile::getWasmSection(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 72) + 72 * a2;
}

uint64_t llvm::object::WasmObjectFile::getWasmRelocation(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2);
}

uint64_t llvm::object::WasmObjectFile::isSharedObject(llvm::object::WasmObjectFile *this)
{
  return *((unsigned __int8 *)this + 589);
}

uint64_t llvm::object::WasmObjectFile::getWasmSection(uint64_t a1, unsigned int *a2)
{
  return *(_QWORD *)(a1 + 72) + 72 * *a2;
}

uint64_t llvm::object::WasmObjectFile::getWasmRelocation(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * *a2 + 48) + 24 * HIDWORD(*a2);
}

uint64_t llvm::object::WasmSectionOrderChecker::getSectionOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  BOOL v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  result = a2;
  switch((int)a2)
  {
    case 0:
      if (a4 != 8)
      {
        if (a4 == 7)
        {
          if (*(_DWORD *)a3 == 1802398060 && *(_DWORD *)(a3 + 3) == 1735289195)
          {
            v6 = 0x10000000FLL;
            goto LABEL_45;
          }
        }
        else if (a4 == 6)
        {
          v5 = (*(_DWORD *)a3 ^ 0x696C7964 | *(unsigned __int16 *)(a3 + 4) ^ 0x6B6E) == 0;
          goto LABEL_16;
        }
        v6 = 0;
        goto LABEL_24;
      }
      v5 = *(_QWORD *)a3 == 0x302E6B6E696C7964;
LABEL_16:
      if (v5)
        v6 = 0x10000000ELL;
      else
        v6 = 0;
LABEL_24:
      v8 = HIDWORD(v6);
      if (a4 < 6 || v8)
      {
        if (a4 == 4 && !v8)
        {
          v10 = 0x100000011;
          v11 = *(_DWORD *)a3 == 1701667182;
          goto LABEL_42;
        }
      }
      else if (*(_DWORD *)a3 == 1869374834 && *(_WORD *)(a3 + 4) == 11875)
      {
        v6 = 0x100000010;
        goto LABEL_45;
      }
      if (a4 == 9 && !v8)
      {
        v12 = *(_QWORD *)a3 ^ 0x72656375646F7270 | *(unsigned __int8 *)(a3 + 8) ^ 0x73;
        v10 = 0x100000012;
LABEL_41:
        v11 = v12 == 0;
LABEL_42:
        if (v11)
          v6 = v10;
        goto LABEL_45;
      }
      if (a4 == 15 && !v8)
      {
        v12 = *(_QWORD *)a3 ^ 0x665F746567726174 | *(_QWORD *)(a3 + 7) ^ 0x7365727574616566;
        v10 = 0x100000013;
        goto LABEL_41;
      }
LABEL_45:
      if ((v6 & 0x300000000) != 0)
        return v6;
      else
        return 0;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    case 6:
      return 7;
    case 7:
      return 8;
    case 8:
      return 9;
    case 9:
      return 10;
    case 10:
      return 12;
    case 11:
      return 13;
    case 12:
      return 11;
    case 13:
      return 6;
    default:
      return 0;
  }
}

void sub_1C5A128A4(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_1C5E21910((llvm::raw_ostream *)&v4, *a1, 0, 0, 0);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

uint64_t sub_1C5A12990(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = "malformed uleb128, extends past end";
  do
  {
    if (v5 + v2 == v6)
      goto LABEL_9;
    v8 = *(_BYTE *)(v5 + v2);
    v9 = v8 & 0x7F;
    if (v4 >= 0x40 && (v8 & 0x7F) != 0 || (unint64_t)(v9 << v4) >> v4 != v9)
    {
      v7 = "uleb128 too big for uint64";
LABEL_9:
      llvm::report_fatal_error((llvm *)v7, (const char *)1);
    }
    v3 += v9 << v4;
    v4 += 7;
    ++v2;
  }
  while (v8 < 0);
  *(_QWORD *)(a1 + 8) = v5 + v2;
  return v3;
}

uint64_t sub_1C5A12A1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = "malformed sleb128, extends past end";
  do
  {
    if (v4 + v1 == *(_QWORD *)(a1 + 16))
      goto LABEL_14;
    v6 = *(_BYTE *)(v4 + v1);
    v7 = v6 & 0x7F;
    if (v3 >= 0x40)
    {
      if (((v2 >> 63) & 0x7F) != v7)
        goto LABEL_13;
    }
    else if (v3 == 63 && (_DWORD)v7 != 127 && (_DWORD)v7 != 0)
    {
LABEL_13:
      v5 = "sleb128 too big for int64";
LABEL_14:
      llvm::report_fatal_error((llvm *)v5, (const char *)1);
    }
    v2 |= v7 << v3;
    v3 += 7;
    ++v1;
  }
  while (v6 < 0);
  v9 = (v6 & 0x40) == 0 || v3 > 0x3F;
  v10 = -1 << v3;
  if (v9)
    v10 = 0;
  *(_QWORD *)(a1 + 8) = v4 + v1;
  return v2 | v10;
}

uint64_t sub_1C5A12AE0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void **v34;

  *(_QWORD *)a1 = &off_1E818A9F8;
  sub_1C619BA10((_QWORD *)(a1 + 592));
  v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(_QWORD *)(a1 + 568) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 536);
  if (v3)
  {
    *(_QWORD *)(a1 + 544) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 512);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 520);
    v6 = *(void **)(a1 + 512);
    if (v5 != v4)
    {
      do
      {
        v7 = *(void **)(v5 - 120);
        if (v7)
        {
          *(_QWORD *)(v5 - 112) = v7;
          operator delete(v7);
        }
        v5 -= 128;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 512);
    }
    *(_QWORD *)(a1 + 520) = v4;
    operator delete(v6);
  }
  v8 = *(void **)(a1 + 472);
  if (v8)
  {
    *(_QWORD *)(a1 + 480) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 448);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 456);
    v11 = *(void **)(a1 + 448);
    if (v10 != v9)
    {
      do
      {
        v12 = *(void **)(v10 - 24);
        if (v12)
        {
          *(_QWORD *)(v10 - 16) = v12;
          operator delete(v12);
        }
        v10 -= 80;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 448);
    }
    *(_QWORD *)(a1 + 456) = v9;
    operator delete(v11);
  }
  v13 = *(void **)(a1 + 424);
  if (v13)
  {
    *(_QWORD *)(a1 + 432) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 400);
  if (v14)
  {
    *(_QWORD *)(a1 + 408) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 376);
  if (v15)
  {
    *(_QWORD *)(a1 + 384) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 352);
  if (v16)
  {
    *(_QWORD *)(a1 + 360) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 328);
  if (v17)
  {
    *(_QWORD *)(a1 + 336) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 304);
  if (v18)
  {
    *(_QWORD *)(a1 + 312) = v18;
    operator delete(v18);
  }
  v19 = *(char **)(a1 + 280);
  if (v19)
  {
    v20 = *(char **)(a1 + 288);
    v21 = *(void **)(a1 + 280);
    if (v20 != v19)
    {
      v22 = v20 - 24;
      do
      {
        v23 = (char *)*((_QWORD *)v22 - 2);
        if (v22 != v23)
          free(v23);
        v24 = (char *)*((_QWORD *)v22 - 5);
        if (v22 - 24 != v24)
          free(v24);
        v25 = v22 - 40;
        v22 -= 64;
      }
      while (v25 != v19);
      v21 = *(void **)(a1 + 280);
    }
    *(_QWORD *)(a1 + 288) = v19;
    operator delete(v21);
  }
  v26 = *(_QWORD *)(a1 + 256);
  if (v26)
  {
    v27 = *(_QWORD *)(a1 + 264);
    v28 = *(void **)(a1 + 256);
    if (v27 != v26)
    {
      do
      {
        if (*(char *)(v27 - 1) < 0)
          operator delete(*(void **)(v27 - 24));
        v27 -= 32;
      }
      while (v27 != v26);
      v28 = *(void **)(a1 + 256);
    }
    *(_QWORD *)(a1 + 264) = v26;
    operator delete(v28);
  }
  v34 = (void **)(a1 + 232);
  sub_1C4FEC8AC(&v34);
  v34 = (void **)(a1 + 208);
  sub_1C4FEC8AC(&v34);
  v34 = (void **)(a1 + 184);
  sub_1C4FEC8AC(&v34);
  sub_1C62DDD2C((_QWORD *)(a1 + 96));
  v29 = *(_QWORD *)(a1 + 72);
  if (v29)
  {
    v30 = *(_QWORD *)(a1 + 80);
    v31 = *(void **)(a1 + 72);
    if (v30 != v29)
    {
      do
      {
        v32 = *(void **)(v30 - 24);
        if (v32)
        {
          *(_QWORD *)(v30 - 16) = v32;
          operator delete(v32);
        }
        v30 -= 72;
      }
      while (v30 != v29);
      v31 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v29;
    operator delete(v31);
  }
  return a1;
}

uint64_t sub_1C5A12D48(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "invalid COMDAT entry type";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A12DAC(uint64_t *a1, _BYTE *a2, unsigned int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  _BYTE *v9;
  char v10;
  char v11;

  v6 = operator new();
  v7 = 1;
  v11 = 1;
  if (*a2)
  {
    v9 = a2;
    v7 = 3;
  }
  v10 = v7;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v6, (llvm::Twine *)&v9, *a3);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A12E24(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "dylink.0 sub-section ended prematurely";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A12E88(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "segment named more than once";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A12EEC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "invalid named data segment";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A12F50(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "COMDAT section index out of range";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A12FB4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "unsupported COMDAT flags";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A13018(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "invalid attribute";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

uint64_t sub_1C5A1307C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v6 = "invalid tag type";
  v7 = 259;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v4, (llvm::Twine *)&v6, *a2);
  *a1 = result;
  return result;
}

_OWORD *sub_1C5A130E0(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 58)
      sub_1C4764EE4();
    v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[64 * v4];
  v12 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = a2[3];
  *((_OWORD *)v11 + 2) = a2[2];
  *((_OWORD *)v11 + 3) = v13;
  v14 = v11 + 64;
  if (v2 != v3)
  {
    do
    {
      v15 = *((_OWORD *)v2 - 4);
      v16 = *((_OWORD *)v2 - 3);
      v17 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v11 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v11 - 1) = v17;
      *((_OWORD *)v11 - 4) = v15;
      *((_OWORD *)v11 - 3) = v16;
      v11 -= 64;
      v2 -= 64;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = &v10[64 * v9];
  if (v2)
    operator delete(v2);
  return v14;
}

uint64_t llvm::getMachineType(char *a1, unint64_t a2)
{
  void **v2;
  void *v3;
  unint64_t v5;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  void *v12[2];
  char v13;

  sub_1C5E3DEA4(v12, a1, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a1[a2], (uint64_t)sub_1C5E3C6A8, a2);
  if (v13 >= 0)
    v2 = v12;
  else
    v2 = (void **)v12[0];
  v3 = (void *)(v13 & 0x7F);
  if (v13 < 0)
    v3 = v12[1];
  if (v3 == (void *)5)
  {
    if (*(_DWORD *)v2 == 912551265 && *((_BYTE *)v2 + 4) == 52)
      goto LABEL_39;
    v8 = (*(_DWORD *)v2 ^ 0x366D7261 | *((unsigned __int8 *)v2 + 4) ^ 0x34) == 0;
    v9 = 43620;
LABEL_28:
    v10 = v9 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
    if (v8)
      v5 = v10;
    else
      v5 = 0;
    if (v13 < 0)
      goto LABEL_32;
    goto LABEL_35;
  }
  if (v3 == (void *)4)
  {
    v8 = *(_DWORD *)v2 == 909652841;
    v9 = 332;
    goto LABEL_28;
  }
  if (v3 != (void *)3)
  {
    v5 = 0;
    goto LABEL_34;
  }
  if (*(_WORD *)v2 == 13944 && *((_BYTE *)v2 + 2) == 52)
  {
LABEL_39:
    v5 = 0x100008664;
    if ((v13 & 0x80000000) == 0)
      goto LABEL_35;
LABEL_32:
    operator delete(v12[0]);
    goto LABEL_35;
  }
  v5 = 0x10000014CLL;
  if (*(_WORD *)v2 == 14456 && *((_BYTE *)v2 + 2) == 54)
  {
LABEL_34:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_32;
  }
  if (*(unsigned __int16 *)v2 ^ 0x7261 | *((unsigned __int8 *)v2 + 2) ^ 0x6D)
    v5 = 0;
  else
    v5 = 0x1000001C4;
  if (v13 < 0)
    goto LABEL_32;
LABEL_35:
  if (v5 <= 0x100000000)
    return 0x100000000;
  else
    return v5;
}

const char *llvm::machineToStr(int a1)
{
  if (a1 > 34403)
  {
    if (a1 == 34404)
      return "x64";
    else
      return "arm64";
  }
  else if (a1 == 332)
  {
    return "x86";
  }
  else
  {
    return "arm";
  }
}

uint64_t llvm::object::WindowsResource::WindowsResource(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  v3 = a2[1];
  *(_DWORD *)(result + 8) = 7;
  *(_OWORD *)(result + 16) = v2;
  *(_OWORD *)(result + 32) = v3;
  *(_QWORD *)result = &off_1E818AC88;
  *(_QWORD *)(result + 48) = &unk_1E818AD00;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(result + 24);
  v6 = 32;
  if (v5 < 0x20)
    v6 = *(_QWORD *)(result + 24);
  v7 = v4 + v6;
  *(_DWORD *)(result + 56) = 1;
  *(_QWORD *)(result + 64) = v7;
  *(_QWORD *)(result + 72) = v4 + v5 - v7;
  return result;
}

{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v2 = a2[1];
  *(_DWORD *)(result + 8) = 7;
  *(_OWORD *)(result + 16) = v3;
  *(_OWORD *)(result + 32) = v2;
  *(_QWORD *)result = &off_1E818AC88;
  *(_QWORD *)(result + 48) = &unk_1E818AD00;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(result + 24);
  v6 = 32;
  if (v5 < 0x20)
    v6 = *(_QWORD *)(result + 24);
  v7 = v4 + v6;
  *(_DWORD *)(result + 56) = 1;
  *(_QWORD *)(result + 64) = v7;
  *(_QWORD *)(result + 72) = v4 + v5 - v7;
  return result;
}

uint64_t llvm::object::WindowsResource::createWindowsResource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;

  if (*(_QWORD *)(a1 + 8) <= 0x1FuLL)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    v15 = 773;
    v14[0] = v11;
    v14[1] = v12;
    v14[2] = ": too small to be a resource file";
    v13 = operator new();
    result = llvm::object::GenericBinaryError::GenericBinaryError(v13, (llvm::Twine *)v14, 2u);
    v10 = *(_BYTE *)(a2 + 8) | 1;
  }
  else
  {
    result = operator new();
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(result + 16) = *(_OWORD *)a1;
    *(_OWORD *)(result + 32) = v5;
    *(_DWORD *)(result + 8) = 7;
    *(_QWORD *)result = &off_1E818AC88;
    *(_QWORD *)(result + 48) = &unk_1E818AD00;
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(result + 24);
    v8 = 32;
    if (v7 < 0x20)
      v8 = *(_QWORD *)(result + 24);
    v9 = v6 + v8;
    *(_DWORD *)(result + 56) = 1;
    *(_QWORD *)(result + 64) = v9;
    *(_QWORD *)(result + 72) = v6 + v7 - v9;
    v10 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v10;
  *(_QWORD *)a2 = result;
  return result;
}

void llvm::object::WindowsResource::getHeadEntry(llvm::object::WindowsResource *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE v11[8];
  std::__shared_weak_count *v12;
  _QWORD v13[4];
  __int16 v14;

  if (*((_QWORD *)this + 9) > 0x17uLL)
  {
    llvm::BinaryStreamRef::BinaryStreamRef((uint64_t)v11, (uint64_t)this + 48);
    llvm::object::ResourceEntryRef::create((uint64_t)v11, (uint64_t)this, a2);
    v8 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 4);
    v4 = *((_QWORD *)this + 5);
    v6 = operator new();
    v13[0] = v5;
    v13[1] = v4;
    v13[2] = " contains no entries";
    v14 = 773;
    v7 = (_QWORD *)llvm::object::GenericBinaryError::GenericBinaryError(v6, (llvm::Twine *)v13, 4u);
    *v7 = off_1E818ACB0;
    *(_BYTE *)(a2 + 152) |= 1u;
    *(_QWORD *)a2 = v7;
  }
}

void llvm::object::ResourceEntryRef::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v22[0] = *(_QWORD *)a1;
  v22[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a1 + 16);
    v24 = v7;
    llvm::object::ResourceEntryRef::ResourceEntryRef((uint64_t)v25, v22, a2);
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v9 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a1 + 16);
    v24 = v9;
    llvm::object::ResourceEntryRef::ResourceEntryRef((uint64_t)v25, v22, a2);
  }
  llvm::object::ResourceEntryRef::loadNext((llvm::object::ResourceEntryRef *)v25, &v21);
  v10 = v21;
  if (v21)
  {
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v10;
  }
  else
  {
    *(_BYTE *)(a3 + 152) &= ~1u;
    v12 = v25[1];
    v11 = v26;
    *(_QWORD *)a3 = &unk_1E8185470;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_OWORD *)(a3 + 24) = v27;
    *(_OWORD *)(a3 + 40) = v28;
    v15 = v33;
    v16 = v34;
    v17 = v31;
    *(_OWORD *)(a3 + 96) = v32;
    *(_OWORD *)(a3 + 112) = v15;
    *(_QWORD *)(a3 + 56) = v29;
    *(_OWORD *)(a3 + 128) = v16;
    *(_QWORD *)(a3 + 144) = v35;
    *(_OWORD *)(a3 + 64) = v30;
    *(_OWORD *)(a3 + 80) = v17;
  }
  v25[0] = &unk_1E8185470;
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

uint64_t llvm::object::ResourceEntryRef::ResourceEntryRef(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v13 = *((_OWORD *)a2 + 1);
    v14 = *((_OWORD *)a2 + 2);
    *(_QWORD *)a1 = &unk_1E8185470;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 56) = 0;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v11 = *((_OWORD *)a2 + 1);
    v15 = *((_OWORD *)a2 + 2);
    *(_QWORD *)a1 = &unk_1E8185470;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 24) = v11;
    *(_OWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

uint64_t llvm::object::ResourceEntryRef::loadNext@<X0>(llvm::object::ResourceEntryRef *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;

  v11 = 0;
  v12 = 0;
  result = llvm::BinaryStreamReader::readBytes((uint64_t)this, (uint64_t)&v11, 8u, a2);
  if (!*a2)
  {
    v5 = v11;
    *a2 = 0;
    if (v5[1] <= 0x1F)
    {
      v6 = *((_QWORD *)this + 8);
      v8 = *(unsigned int **)(v6 + 32);
      v7 = *(_QWORD *)(v6 + 40);
      v14 = 773;
      v11 = v8;
      v12 = v7;
      v13 = ": header size too small";
      v9 = operator new();
      result = llvm::object::GenericBinaryError::GenericBinaryError(v9, (llvm::Twine *)&v11, 3u);
      *a2 = result;
      return result;
    }
    result = sub_1C5A13B18(a2, (uint64_t)this, (_WORD *)this + 48, (_QWORD *)this + 10, (BOOL *)this + 72);
    if (!*a2)
    {
      result = sub_1C5A13B18(a2, (uint64_t)this, (_WORD *)this + 60, (_QWORD *)this + 13, (BOOL *)this + 98);
      if (!*a2)
      {
        result = llvm::BinaryStreamReader::skip(this, ((*((_QWORD *)this + 7) + 3) & 0xFFFFFFFC) - *((_QWORD *)this + 7), a2);
        if (!*a2)
        {
          v11 = 0;
          v12 = 0;
          result = llvm::BinaryStreamReader::readBytes((uint64_t)this, (uint64_t)&v11, 0x10u, a2);
          if (!*a2)
          {
            *((_QWORD *)this + 16) = v11;
            *a2 = 0;
            v10 = *v5;
            v11 = 0;
            v12 = 0;
            if ((_DWORD)v10)
            {
              result = llvm::BinaryStreamReader::readBytes((uint64_t)this, (uint64_t)&v11, v10, a2);
              if (*a2)
                return result;
              *((_QWORD *)this + 17) = v11;
              *((_QWORD *)this + 18) = v10;
            }
            else
            {
              *((_QWORD *)this + 17) = 0;
              *((_QWORD *)this + 18) = 0;
            }
            *a2 = 0;
            result = llvm::BinaryStreamReader::skip(this, ((*((_QWORD *)this + 7) + 3) & 0xFFFFFFFC) - *((_QWORD *)this + 7), a2);
            if (!*a2)
              *a2 = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::object::ResourceEntryRef::moveNext@<X0>(uint64_t this@<X0>, BOOL *a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::object::ResourceEntryRef *v4;
  uint64_t v6;

  v4 = (llvm::object::ResourceEntryRef *)this;
  if (*(_BYTE *)(this + 48))
  {
    v6 = *(_QWORD *)(this + 40);
  }
  else
  {
    this = *(_QWORD *)(this + 24);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 40))(this);
      v6 = this - *((_QWORD *)v4 + 4);
    }
    else
    {
      v6 = 0;
    }
  }
  if (v6 == *((_QWORD *)v4 + 7))
  {
    *a2 = 1;
  }
  else
  {
    this = llvm::object::ResourceEntryRef::loadNext(v4, a3);
    if (*a3)
      return this;
  }
  *a3 = 0;
  return this;
}

uint64_t sub_1C5A13B18(uint64_t *a1, uint64_t a2, _WORD *a3, _QWORD *a4, BOOL *a5)
{
  uint64_t result;
  BOOL v11;
  unsigned __int16 v12;

  v12 = 0;
  result = sub_1C62C8034(a2, &v12, a1);
  if (!*a1)
  {
    v11 = v12 == 0xFFFF;
    *a5 = v12 != 0xFFFF;
    if (v11)
    {
      result = sub_1C62C8034(a2, a3, a1);
    }
    else
    {
      *(_QWORD *)(a2 + 56) -= 2;
      result = llvm::BinaryStreamReader::readWideString(a2, a4, a1);
    }
    if (!*a1)
      *a1 = 0;
  }
  return result;
}

double llvm::object::WindowsResourceParser::WindowsResourceParser(llvm::object::WindowsResourceParser *this, char a2)
{
  double result;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = a2;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = a2;
  return result;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::TreeNode(uint64_t this, int a2)
{
  *(_BYTE *)this = 0;
  *(_DWORD *)(this + 4) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = this + 48;
  return this;
}

{
  *(_BYTE *)this = 0;
  *(_DWORD *)(this + 4) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = this + 48;
  return this;
}

llvm::raw_ostream *llvm::object::printResourceTypeName(llvm::raw_ostream *this, llvm::raw_ostream *a2, llvm::raw_ostream *a3)
{
  llvm::raw_ostream *v3;
  unsigned int v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  size_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  const char *v25;
  int v26;
  const char *v27;
  const char *v28;

  v3 = a2;
  v4 = this;
  switch((int)this)
  {
    case 1:
      v5 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v5 <= 0xCuLL)
      {
        v6 = "CURSOR (ID 1)";
        goto LABEL_12;
      }
      v19 = "CURSOR (ID 1)";
      goto LABEL_59;
    case 2:
      v5 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v5 <= 0xCuLL)
      {
        v6 = "BITMAP (ID 2)";
        goto LABEL_12;
      }
      v19 = "BITMAP (ID 2)";
      goto LABEL_59;
    case 3:
      v7 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) <= 0xA)
      {
        v6 = "ICON (ID 3)";
        goto LABEL_43;
      }
      v20 = 691216452;
      v21 = "ICON (ID 3)";
      goto LABEL_76;
    case 4:
      v7 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) <= 0xA)
      {
        v6 = "MENU (ID 4)";
        goto LABEL_43;
      }
      v20 = 691281988;
      v21 = "MENU (ID 4)";
      goto LABEL_76;
    case 5:
      v5 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v5 <= 0xCuLL)
      {
        v6 = "DIALOG (ID 5)";
LABEL_12:
        v8 = v3;
        v9 = 13;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      v19 = "DIALOG (ID 5)";
LABEL_59:
      *v5 = *(_QWORD *)v19;
      *(_QWORD *)((char *)v5 + 5) = *(_QWORD *)(v19 + 5);
      v22 = *((_QWORD *)a2 + 4) + 13;
      goto LABEL_82;
    case 6:
      v10 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 0x11)
      {
        v6 = "STRINGTABLE (ID 6)";
        goto LABEL_38;
      }
      v23 = 10550;
      v24 = "STRINGTABLE (ID 6)";
      goto LABEL_73;
    case 7:
      v11 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 <= 0xDuLL)
      {
        v6 = "FONTDIR (ID 7)";
        goto LABEL_23;
      }
      v25 = "FONTDIR (ID 7)";
      goto LABEL_65;
    case 8:
      v7 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) <= 0xA)
      {
        v6 = "FONT (ID 8)";
        goto LABEL_43;
      }
      v20 = 691544132;
      v21 = "FONT (ID 8)";
      goto LABEL_76;
    case 9:
      v10 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 0x11)
      {
        v6 = "ACCELERATOR (ID 9)";
        goto LABEL_38;
      }
      v23 = 10553;
      v24 = "ACCELERATOR (ID 9)";
      goto LABEL_73;
    case 10:
      v11 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 <= 0xDuLL)
      {
        v6 = "RCDATA (ID 10)";
LABEL_23:
        v8 = v3;
        v9 = 14;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      v25 = "RCDATA (ID 10)";
LABEL_65:
      *v11 = *(_QWORD *)v25;
      *(_QWORD *)((char *)v11 + 6) = *(_QWORD *)(v25 + 6);
      v22 = *((_QWORD *)a2 + 4) + 14;
      goto LABEL_82;
    case 11:
      v12 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) <= 0x13)
      {
        v6 = "MESSAGETABLE (ID 11)";
        goto LABEL_28;
      }
      v26 = 691089696;
      v27 = "MESSAGETABLE (ID 11)";
      goto LABEL_68;
    case 12:
      v12 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) <= 0x13)
      {
        v6 = "GROUP_CURSOR (ID 12)";
LABEL_28:
        v8 = v3;
        v9 = 20;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      v26 = 691155232;
      v27 = "GROUP_CURSOR (ID 12)";
LABEL_68:
      *(_DWORD *)(v12 + 16) = v26;
      *(_OWORD *)v12 = *(_OWORD *)v27;
      v22 = *((_QWORD *)a2 + 4) + 20;
      goto LABEL_82;
    case 14:
      v10 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 0x11)
      {
        v6 = "GROUP_ICON (ID 14)";
        goto LABEL_38;
      }
      v23 = 10548;
      v24 = "GROUP_ICON (ID 14)";
      goto LABEL_73;
    case 16:
      v14 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) <= 0x12)
      {
        v6 = "VERSIONINFO (ID 16)";
        v8 = v3;
        v9 = 19;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      *(_DWORD *)(v14 + 15) = 691417376;
      *(_OWORD *)v14 = *(_OWORD *)"VERSIONINFO (ID 16)";
      v22 = *((_QWORD *)a2 + 4) + 19;
      goto LABEL_82;
    case 17:
      v10 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 0x11)
      {
        v6 = "DLGINCLUDE (ID 17)";
LABEL_38:
        v8 = v3;
        v9 = 18;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      v23 = 10551;
      v24 = "DLGINCLUDE (ID 17)";
LABEL_73:
      *(_WORD *)(v10 + 16) = v23;
      *(_OWORD *)v10 = *(_OWORD *)v24;
      v22 = *((_QWORD *)a2 + 4) + 18;
      goto LABEL_82;
    case 19:
      v15 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 <= 0xFuLL)
      {
        v6 = "PLUGPLAY (ID 19)";
        goto LABEL_52;
      }
      v28 = "PLUGPLAY (ID 19)";
      goto LABEL_81;
    case 20:
      v7 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) <= 0xA)
      {
        v6 = "VXD (ID 20)";
LABEL_43:
        v8 = v3;
        v9 = 11;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      v20 = 691024416;
      v21 = "VXD (ID 20)";
LABEL_76:
      *(_DWORD *)(v7 + 7) = v20;
      *(_QWORD *)v7 = *(_QWORD *)v21;
      v22 = *((_QWORD *)a2 + 4) + 11;
      goto LABEL_82;
    case 21:
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 0x10)
      {
        v6 = "ANICURSOR (ID 21)";
        v8 = v3;
        v9 = 17;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      *(_BYTE *)(v16 + 16) = 41;
      *(_OWORD *)v16 = *(_OWORD *)"ANICURSOR (ID 21)";
      v22 = *((_QWORD *)a2 + 4) + 17;
      goto LABEL_82;
    case 22:
      v17 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v17 <= 0xEuLL)
      {
        v6 = "ANIICON (ID 22)";
        v8 = v3;
        v9 = 15;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      qmemcpy(v17, "ANIICON (ID 22)", 15);
      v22 = *((_QWORD *)a2 + 4) + 15;
      goto LABEL_82;
    case 23:
      v18 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) <= 0xB)
      {
        v6 = "HTML (ID 23)";
        v8 = v3;
        v9 = 12;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      *(_DWORD *)(v18 + 8) = 691221024;
      *(_QWORD *)v18 = *(_QWORD *)"HTML (ID 23)";
      v22 = *((_QWORD *)a2 + 4) + 12;
      goto LABEL_82;
    case 24:
      v15 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 0xFuLL)
      {
        v28 = "MANIFEST (ID 24)";
LABEL_81:
        *v15 = *(_OWORD *)v28;
        v22 = *((_QWORD *)a2 + 4) + 16;
LABEL_82:
        *((_QWORD *)a2 + 4) = v22;
      }
      else
      {
        v6 = "MANIFEST (ID 24)";
LABEL_52:
        v8 = v3;
        v9 = 16;
        return llvm::raw_ostream::write(v8, v6, v9);
      }
      return this;
    default:
      v13 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 2)
      {
        *(_BYTE *)(v13 + 2) = 32;
        *(_WORD *)v13 = 17481;
        *((_QWORD *)a2 + 4) += 3;
      }
      else
      {
        v3 = llvm::raw_ostream::write(a2, "ID ", 3uLL);
      }
      return sub_1C5E21910(v3, v4, 0, 0, 0);
  }
}

void llvm::object::WindowsResourceParser::cleanUpManifests(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  char *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  _QWORD v61[4];
  __int16 v62;
  _QWORD v63[4];
  __int16 v64;
  _QWORD v65[4];
  __int16 v66;
  _QWORD v67[4];
  __int16 v68;
  _QWORD v69[4];
  __int16 v70;
  _QWORD v71[4];
  __int16 v72;
  _QWORD v73[4];
  __int16 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  int64x2_t v78;
  unint64_t v79;
  int64x2_t *v80;

  v2 = a1[3];
  if (v2)
  {
    v5 = a1 + 3;
    do
    {
      v6 = *(_DWORD *)(v2 + 32);
      v7 = v6 >= 0x18;
      if (v6 >= 0x18)
        v8 = (uint64_t *)v2;
      else
        v8 = (uint64_t *)(v2 + 8);
      if (v7)
        v5 = (_QWORD *)v2;
      v2 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 3 && *((_DWORD *)v5 + 8) <= 0x18u)
    {
      v9 = v5[5];
      v12 = *(_QWORD *)(v9 + 24);
      v10 = v9 + 24;
      v11 = v12;
      if (v12)
      {
        v13 = v10;
        do
        {
          v14 = *(_DWORD *)(v11 + 32);
          v15 = v14 == 0;
          if (v14)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (!v15)
            v13 = v11;
          v11 = *v16;
        }
        while (*v16);
        if (v13 != v10 && *(_DWORD *)(v13 + 32) <= 1u)
        {
          v17 = *(_QWORD **)(v13 + 40);
          v18 = v17[4];
          if (v18 >= 2)
          {
            v19 = v17 + 3;
            v20 = v17 + 3;
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
            if (v21 == v19)
              goto LABEL_27;
            if (*((_DWORD *)v21 + 8))
              goto LABEL_27;
            v43 = v21[5];
            if (!*(_BYTE *)v43)
              goto LABEL_27;
            v44 = *(_DWORD *)(v43 + 8);
            v45 = (_QWORD *)v21[1];
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            else
            {
              v53 = v21;
              do
              {
                v46 = (_QWORD *)v53[2];
                v15 = *v46 == (_QWORD)v53;
                v53 = v46;
              }
              while (!v15);
            }
            if ((_QWORD *)v17[2] == v21)
              v17[2] = v46;
            v17[4] = v18 - 1;
            sub_1C485B6E0((uint64_t *)v17[3], v21);
            sub_1C5A18390(v21 + 5);
            operator delete(v21);
            v54 = a1[11];
            v55 = a1[10] + 24 * v44;
            v56 = v55 + 24;
            if (v55 + 24 != v54)
            {
              do
              {
                v57 = *(void **)(v56 - 24);
                if (v57)
                {
                  *(_QWORD *)(v56 - 16) = v57;
                  operator delete(v57);
                  *(_QWORD *)(v56 - 16) = 0;
                  *(_QWORD *)(v56 - 8) = 0;
                }
                *(_OWORD *)(v56 - 24) = *(_OWORD *)v56;
                *(_QWORD *)(v56 - 8) = *(_QWORD *)(v56 + 16);
                *(_QWORD *)v56 = 0;
                *(_QWORD *)(v56 + 8) = 0;
                *(_QWORD *)(v56 + 16) = 0;
                v56 += 24;
                v55 += 24;
              }
              while (v56 != v54);
              v54 = a1[11];
            }
            if (v54 != v55)
            {
              v58 = v54;
              do
              {
                v60 = *(void **)(v58 - 24);
                v58 -= 24;
                v59 = v60;
                if (v60)
                {
                  *(_QWORD *)(v54 - 16) = v59;
                  operator delete(v59);
                }
                v54 = v58;
              }
              while (v58 != v55);
            }
            a1[11] = v55;
            llvm::object::WindowsResourceParser::TreeNode::shiftDataIndexDown((uint64_t)a1, v44);
            if (v17[4] >= 2uLL)
            {
LABEL_27:
              v22 = v17[2];
              v23 = (_QWORD *)v17[3];
              v24 = *(unsigned int *)(v22 + 32);
              v25 = *(_QWORD *)(v22 + 40);
              if (v23)
              {
                v26 = v17[3];
                do
                {
                  v27 = v26;
                  v26 = *(_QWORD *)(v26 + 8);
                }
                while (v26);
              }
              else
              {
                v28 = v17 + 3;
                do
                {
                  v27 = v28[2];
                  v15 = *(_QWORD *)v27 == (_QWORD)v28;
                  v28 = (_QWORD *)v27;
                }
                while (v15);
              }
              v29 = *(unsigned int *)(v27 + 32);
              if (v23)
              {
                do
                {
                  v30 = v23;
                  v23 = (_QWORD *)v23[1];
                }
                while (v23);
              }
              else
              {
                do
                {
                  v30 = (_QWORD *)v19[2];
                  v15 = *v30 == (_QWORD)v19;
                  v19 = v30;
                }
                while (v15);
              }
              v31 = v30[5];
              v61[0] = "duplicate non-default manifests with languages ";
              v61[2] = v24;
              v62 = 2051;
              v63[0] = v61;
              v63[2] = " in ";
              v64 = 770;
              v32 = a1[16];
              v33 = v32 + 24 * *(unsigned int *)(v25 + 72);
              v65[0] = v63;
              v65[2] = v33;
              v66 = 1026;
              v67[0] = v65;
              v67[2] = " and ";
              v68 = 770;
              v69[0] = v67;
              v69[2] = v29;
              v70 = 2050;
              v71[0] = v69;
              v71[2] = " in ";
              v72 = 770;
              v34 = v32 + 24 * *(unsigned int *)(v31 + 72);
              v73[0] = v71;
              v73[2] = v34;
              v74 = 1026;
              llvm::Twine::str((llvm::Twine *)v73, &v75);
              v35 = a2[1].u64[0];
              v36 = a2->u64[1];
              if (v36 >= v35)
              {
                v38 = a2->i64[0];
                v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - a2->i64[0]) >> 3);
                v40 = v39 + 1;
                if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((uint64_t)(v35 - v38) >> 3) > v40)
                  v40 = 0x5555555555555556 * ((uint64_t)(v35 - v38) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v38) >> 3) >= 0x555555555555555)
                  v41 = 0xAAAAAAAAAAAAAAALL;
                else
                  v41 = v40;
                v80 = a2 + 1;
                if (v41)
                {
                  if (v41 > 0xAAAAAAAAAAAAAAALL)
                    sub_1C4764EE4();
                  v42 = (char *)operator new(24 * v41);
                }
                else
                {
                  v42 = 0;
                }
                v47 = &v42[24 * v39];
                *(_OWORD *)v47 = v75;
                *((_QWORD *)v47 + 2) = v76;
                v76 = 0;
                v75 = 0uLL;
                if (v36 == v38)
                {
                  v50 = vdupq_n_s64(v36);
                  v48 = &v42[24 * v39];
                }
                else
                {
                  v48 = &v42[24 * v39];
                  do
                  {
                    v49 = *(_OWORD *)(v36 - 24);
                    *((_QWORD *)v48 - 1) = *(_QWORD *)(v36 - 8);
                    *(_OWORD *)(v48 - 24) = v49;
                    v48 -= 24;
                    *(_QWORD *)(v36 - 16) = 0;
                    *(_QWORD *)(v36 - 8) = 0;
                    *(_QWORD *)(v36 - 24) = 0;
                    v36 -= 24;
                  }
                  while (v36 != v38);
                  v50 = *a2;
                  v35 = a2[1].u64[0];
                }
                v51 = v47 + 24;
                a2->i64[0] = (uint64_t)v48;
                a2->i64[1] = (uint64_t)(v47 + 24);
                v78 = v50;
                a2[1].i64[0] = (uint64_t)&v42[24 * v41];
                v79 = v35;
                v77 = v50.i64[0];
                sub_1C4D868F0((uint64_t)&v77);
                v52 = SHIBYTE(v76);
                a2->i64[1] = (uint64_t)v51;
                if (v52 < 0)
                  operator delete((void *)v75);
              }
              else
              {
                v37 = v75;
                *(_QWORD *)(v36 + 16) = v76;
                *(_OWORD *)v36 = v37;
                a2->i64[1] = v36 + 24;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::shiftDataIndexDown(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v3 = this;
  if (*(_BYTE *)this && (v4 = *(_DWORD *)(this + 8), v4 >= a2))
  {
    *(_DWORD *)(this + 8) = v4 - 1;
  }
  else
  {
    v5 = *(_QWORD **)(this + 16);
    v6 = (_QWORD *)(this + 24);
    if (v5 != (_QWORD *)(this + 24))
    {
      do
      {
        this = llvm::object::WindowsResourceParser::TreeNode::shiftDataIndexDown((llvm::object::WindowsResourceParser::TreeNode *)v5[5], a2);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
    v10 = *(_QWORD **)(v3 + 40);
    v11 = (_QWORD *)(v3 + 48);
    if (v10 != v11)
    {
      do
      {
        this = llvm::object::WindowsResourceParser::TreeNode::shiftDataIndexDown((llvm::object::WindowsResourceParser::TreeNode *)v10[7], a2);
        v12 = (_QWORD *)v10[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v10[2];
            v9 = *v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v9);
        }
        v10 = v13;
      }
      while (v13 != v11);
    }
  }
  return this;
}

BOOL llvm::object::WindowsResourceParser::shouldIgnoreDuplicate(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 152))
    v2 = *(_BYTE *)(a2 + 72) == 0;
  else
    v2 = 0;
  return v2
      && *(_WORD *)(a2 + 96) == 24
      && *(_BYTE *)(a2 + 98) == 0
      && *(_WORD *)(a2 + 120) == 1
      && *(_WORD *)(*(_QWORD *)(a2 + 128) + 6) == 0;
}

BOOL llvm::object::WindowsResourceParser::shouldIgnoreDuplicate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 152)
    && (v2 = *a2, a2[1] - *a2 == 96)
    && !*(_BYTE *)v2
    && *(_DWORD *)(v2 + 24) == 24
    && !*(_BYTE *)(v2 + 32)
    && *(_DWORD *)(v2 + 56) == 1
    && !*(_BYTE *)(v2 + 64))
  {
    return *(_DWORD *)(v2 + 88) == 0;
  }
  else
  {
    return 0;
  }
}

void llvm::object::WindowsResourceParser::parse(size_t *this@<X1>, uint64_t a2@<X0>, int64x2_t *a3@<X2>, uint64_t *a4@<X8>)
{
  char v8;
  unint64_t *v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  __int128 *p_dst;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  int v30;
  uint64_t v31;
  llvm::object::WindowsResourceParser::TreeNode *v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  llvm::raw_ostream *v40;
  int64x2_t *v41;
  int64x2_t *v42;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  int64x2_t *v49;
  llvm::raw_ostream *v50;
  std::string *v51;
  size_t v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  uint64_t *v55;
  llvm::raw_ostream *v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  std::string *v69;
  char *v70;
  __int128 v71;
  int64x2_t v72;
  std::string *v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  int v81;
  llvm::object::WindowsResource *v82;
  llvm::object::WindowsResourceParser::TreeNode *v83;
  BOOL v84;
  char *v85[2];
  std::__shared_weak_count *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  llvm::object *v92[2];
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  std::string __p;
  void (**v97)(llvm::raw_ostream *__hidden);
  int64x2_t v98;
  unint64_t v99;
  int64x2_t *v100;
  char v101;
  uint64_t v102;
  int v103;
  __int128 *v104;
  __int128 __dst;
  unint64_t v106;
  _QWORD v107[2];
  std::__shared_weak_count *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  llvm::object::WindowsResource::getHeadEntry((llvm::object::WindowsResource *)this, (uint64_t)v107);
  v8 = v118;
  if ((v118 & 1) != 0)
  {
    v16 = (char *)v107[0];
    v107[0] = 0;
    if (v16
      && (*(unsigned int (**)(char *, void *))(*(_QWORD *)v16 + 48))(v16, &llvm::object::GenericBinaryError::ID))
    {
      v97 = (void (**)(llvm::raw_ostream *__hidden))v16;
      sub_1C4D62BD4((char **)&v97, v85);
      if (v97)
        (*((void (**)(_QWORD))*v97 + 1))(v97);
      *a4 = 0;
      if ((v8 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      *a4 = (uint64_t)v16;
      if ((v8 & 1) != 0)
        goto LABEL_16;
    }
LABEL_159:
    v107[0] = &unk_1E8185470;
    v78 = v108;
    if (v108)
    {
      p_shared_owners = (unint64_t *)&v108->__shared_owners_;
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    return;
  }
  v85[0] = (char *)&unk_1E8185470;
  v85[1] = (char *)v107[1];
  v86 = v108;
  if (v108)
  {
    v9 = (unint64_t *)&v108->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v87 = v109;
  v88 = v110;
  v89 = v111;
  *(_OWORD *)v92 = v114;
  v93 = v115;
  v94 = v116;
  v95 = v117;
  v90 = v112;
  v91 = v113;
  v11 = this[5];
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_165;
  v13 = *(_QWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 136);
  v14 = (const void *)this[4];
  v82 = (llvm::object::WindowsResource *)this;
  if (v11 >= 0x17)
  {
    v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v17 = v11 | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = v11;
    v106 = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_21;
  }
  HIBYTE(v106) = this[5];
  p_dst = &__dst;
  if (v11)
LABEL_21:
    memmove(p_dst, v14, v11);
  *((_BYTE *)p_dst + v11) = 0;
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 136);
  if (v20 >= v19)
  {
    v22 = *(_QWORD *)(a2 + 128);
    v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v22) >> 3) + 1;
    if (v23 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * ((uint64_t)(v19 - v22) >> 3) > v23)
        v23 = 0x5555555555555556 * ((uint64_t)(v19 - v22) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v22) >> 3) >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v23;
      v100 = (int64x2_t *)(a2 + 144);
      if (v24)
      {
        if (v24 > 0xAAAAAAAAAAAAAAALL)
LABEL_166:
          sub_1C4764EE4();
        v25 = (char *)operator new(24 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * ((uint64_t)(v20 - v22) >> 3)];
      *(_OWORD *)v26 = __dst;
      *((_QWORD *)v26 + 2) = v106;
      if (v20 == v22)
      {
        v29 = vdupq_n_s64(v20);
        v27 = &v25[8 * ((uint64_t)(v20 - v22) >> 3)];
      }
      else
      {
        v27 = &v25[8 * ((uint64_t)(v20 - v22) >> 3)];
        do
        {
          v28 = *(_OWORD *)(v20 - 24);
          *((_QWORD *)v27 - 1) = *(_QWORD *)(v20 - 8);
          *(_OWORD *)(v27 - 24) = v28;
          v27 -= 24;
          *(_QWORD *)(v20 - 16) = 0;
          *(_QWORD *)(v20 - 8) = 0;
          *(_QWORD *)(v20 - 24) = 0;
          v20 -= 24;
        }
        while (v20 != v22);
        v29 = *(int64x2_t *)(a2 + 128);
        v19 = *(_QWORD *)(a2 + 144);
      }
      v21 = (unint64_t)(v26 + 24);
      *(_QWORD *)(a2 + 128) = v27;
      *(_QWORD *)(a2 + 136) = v26 + 24;
      v98 = v29;
      *(_QWORD *)(a2 + 144) = &v25[24 * v24];
      v99 = v19;
      v97 = (void (**)(llvm::raw_ostream *__hidden))v29.i64[0];
      sub_1C4D868F0((uint64_t)&v97);
      goto LABEL_40;
    }
LABEL_165:
    abort();
  }
  *(_OWORD *)v20 = __dst;
  *(_QWORD *)(v20 + 16) = v106;
  v21 = v20 + 24;
LABEL_40:
  v30 = -1431655765 * ((unint64_t)(v12 - v13) >> 3);
  *(_QWORD *)(a2 + 136) = v21;
  v84 = 0;
  v31 = a2 + 80;
  v81 = v30;
  while (1)
  {
    v83 = 0;
    if (BYTE8(v90))
      v32 = (llvm::object::WindowsResourceParser::TreeNode *)llvm::object::WindowsResourceParser::TreeNode::addNameChild(a2, (unsigned __int16 *)v91, *((uint64_t *)&v91 + 1), (char **)(a2 + 104));
    else
      v32 = (llvm::object::WindowsResourceParser::TreeNode *)llvm::object::WindowsResourceParser::TreeNode::addIDChild((llvm::object::WindowsResourceParser::TreeNode *)a2, LOWORD(v92[0]));
    if (BYTE2(v92[0]))
      v33 = (uint64_t **)llvm::object::WindowsResourceParser::TreeNode::addNameChild((uint64_t)v32, (unsigned __int16 *)v92[1], v93, (char **)(a2 + 104));
    else
      v33 = (uint64_t **)llvm::object::WindowsResourceParser::TreeNode::addIDChild(v32, WORD4(v93));
    if (!llvm::object::WindowsResourceParser::TreeNode::addLanguageNode(v33, v85, v30, v31, &v83)
      && (!*(_BYTE *)(a2 + 152)
       || BYTE8(v90)
       || LOWORD(v92[0]) != 24
       || BYTE2(v92[0])
       || WORD4(v93) != 1
       || *(_WORD *)(v94 + 6)))
    {
      v34 = *(_QWORD *)(a2 + 128) + 24 * *((unsigned int *)v83 + 18);
      v35 = *(_BYTE *)(v34 + 23);
      if (v35 >= 0)
        v36 = (const void *)(*(_QWORD *)(a2 + 128) + 24 * *((unsigned int *)v83 + 18));
      else
        v36 = *(const void **)v34;
      if (v35 >= 0)
        v37 = v35 & 0x7F;
      else
        v37 = *(_QWORD *)(v34 + 8);
      v38 = (const void *)*((_QWORD *)v82 + 4);
      v39 = *((_QWORD *)v82 + 5);
      __dst = 0uLL;
      v106 = 0;
      v98.i32[0] = 0;
      v101 = 0;
      v102 = 0;
      v97 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      v104 = &__dst;
      v103 = 0;
      v99 = 0;
      v100 = 0;
      v98.i64[1] = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v97, "duplicate resource:", 0x13uLL);
      v41 = v100;
      if (v99 - (unint64_t)v100 > 5)
      {
        v100->i16[2] = 8293;
        v41->i32[0] = 1887007776;
        v100 = (int64x2_t *)((char *)v100 + 6);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v97, " type ", 6uLL);
      }
      if (BYTE8(v90))
      {
        memset(&__p, 0, sizeof(__p));
        if (!llvm::convertUTF16ToUTF8String((unsigned __int16 *)v91, 2 * *((_QWORD *)&v91 + 1), &__p))
          MEMORY[0x1CAA32ABC](&__p, "(failed conversion from UTF16)");
        v42 = v100;
        if ((unint64_t)v100 >= v99)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v97, 34);
        }
        else
        {
          v100 = (int64x2_t *)((char *)v100 + 1);
          v42->i8[0] = 34;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p.__r_.__value_.__l.__size_;
        v45 = llvm::raw_ostream::write((llvm::raw_ostream *)&v97, (const char *)p_p, size);
        v46 = (_BYTE *)*((_QWORD *)v45 + 4);
        if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
        {
          llvm::raw_ostream::write(v45, 34);
        }
        else
        {
          *((_QWORD *)v45 + 4) = v46 + 1;
          *v46 = 34;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        llvm::object::printResourceTypeName((llvm::raw_ostream *)LOWORD(v92[0]), (llvm::raw_ostream *)&v97, v40);
      }
      v47 = v100;
      if (v99 - (unint64_t)v100 > 5)
      {
        v100->i16[2] = 8293;
        v47->i32[0] = 1835101743;
        v100 = (int64x2_t *)((char *)v100 + 6);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v97, "/name ", 6uLL);
      }
      if (BYTE2(v92[0]))
      {
        memset(&__p, 0, sizeof(__p));
        if (!llvm::convertUTF16ToUTF8String((unsigned __int16 *)v92[1], 2 * v93, &__p))
          MEMORY[0x1CAA32ABC](&__p, "(failed conversion from UTF16)");
        v48 = v100;
        if ((unint64_t)v100 >= v99)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v97, 34);
        }
        else
        {
          v100 = (int64x2_t *)((char *)v100 + 1);
          v48->i8[0] = 34;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &__p;
        else
          v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v52 = __p.__r_.__value_.__l.__size_;
        v53 = llvm::raw_ostream::write((llvm::raw_ostream *)&v97, (const char *)v51, v52);
        v54 = (_BYTE *)*((_QWORD *)v53 + 4);
        if ((unint64_t)v54 >= *((_QWORD *)v53 + 3))
        {
          llvm::raw_ostream::write(v53, 34);
        }
        else
        {
          *((_QWORD *)v53 + 4) = v54 + 1;
          *v54 = 34;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v49 = v100;
        if (v99 - (unint64_t)v100 > 2)
        {
          v100->i8[2] = 32;
          v49->i16[0] = 17481;
          v100 = (int64x2_t *)((char *)v100 + 3);
          v50 = (llvm::raw_ostream *)&v97;
        }
        else
        {
          v50 = llvm::raw_ostream::write((llvm::raw_ostream *)&v97, "ID ", 3uLL);
        }
        sub_1C5E21910(v50, WORD4(v93), 0, 0, 0);
      }
      v55 = (uint64_t *)v100;
      if (v99 - (unint64_t)v100 > 9)
      {
        v100->i16[4] = 8293;
        *v55 = *(_QWORD *)"/language ";
        v100 = (int64x2_t *)((char *)v100 + 10);
        v56 = (llvm::raw_ostream *)&v97;
      }
      else
      {
        v56 = llvm::raw_ostream::write((llvm::raw_ostream *)&v97, "/language ", 0xAuLL);
      }
      sub_1C5E21910(v56, *(unsigned __int16 *)(v94 + 6), 0, 0, 0);
      v57 = *((_QWORD *)v56 + 4);
      if ((unint64_t)(*((_QWORD *)v56 + 3) - v57) > 4)
      {
        *(_BYTE *)(v57 + 4) = 32;
        *(_DWORD *)v57 = 1852383276;
        v58 = (_QWORD *)(*((_QWORD *)v56 + 4) + 5);
        *((_QWORD *)v56 + 4) = v58;
      }
      else
      {
        v56 = llvm::raw_ostream::write(v56, ", in ", 5uLL);
        v58 = (_QWORD *)*((_QWORD *)v56 + 4);
      }
      if (v37 <= *((_QWORD *)v56 + 3) - (_QWORD)v58)
      {
        if (v37)
        {
          memcpy(v58, v36, v37);
          v58 = (_QWORD *)(*((_QWORD *)v56 + 4) + v37);
          *((_QWORD *)v56 + 4) = v58;
        }
      }
      else
      {
        v56 = llvm::raw_ostream::write(v56, (const char *)v36, v37);
        v58 = (_QWORD *)*((_QWORD *)v56 + 4);
      }
      if (*((_QWORD *)v56 + 3) - (_QWORD)v58 > 7uLL)
      {
        *v58 = 0x206E6920646E6120;
        v59 = (void *)(*((_QWORD *)v56 + 4) + 8);
        *((_QWORD *)v56 + 4) = v59;
      }
      else
      {
        v56 = llvm::raw_ostream::write(v56, " and in ", 8uLL);
        v59 = (void *)*((_QWORD *)v56 + 4);
      }
      if (v39 <= *((_QWORD *)v56 + 3) - (_QWORD)v59)
      {
        if (v39)
        {
          memcpy(v59, v38, v39);
          *((_QWORD *)v56 + 4) += v39;
        }
      }
      else
      {
        llvm::raw_ostream::write(v56, (const char *)v38, v39);
      }
      if (*((char *)v104 + 23) < 0)
      {
        sub_1C47EBC30(&__p, *(void **)v104, *((_QWORD *)v104 + 1));
      }
      else
      {
        v60 = *v104;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v104 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
      }
      v97 = off_1E81A6E70;
      if (v103 == 1 && v98.i64[1])
        MEMORY[0x1CAA32F9C](v98.i64[1], 0x1000C8077774924);
      if (SHIBYTE(v106) < 0)
        operator delete((void *)__dst);
      v61 = a3->u64[1];
      v62 = a3[1].u64[0];
      if (v61 >= v62)
      {
        v64 = a3->i64[0];
        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - a3->i64[0]) >> 3);
        v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_165;
        if (0x5555555555555556 * ((uint64_t)(v62 - v64) >> 3) > v66)
          v66 = 0x5555555555555556 * ((uint64_t)(v62 - v64) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - v64) >> 3) >= 0x555555555555555)
          v67 = 0xAAAAAAAAAAAAAAALL;
        else
          v67 = v66;
        v100 = a3 + 1;
        if (v67)
        {
          if (v67 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_166;
          v68 = (char *)operator new(24 * v67);
        }
        else
        {
          v68 = 0;
        }
        v69 = (std::string *)&v68[24 * v65];
        *v69 = __p;
        memset(&__p, 0, sizeof(__p));
        if (v61 == v64)
        {
          v72 = vdupq_n_s64(v61);
          v70 = &v68[24 * v65];
        }
        else
        {
          v70 = &v68[24 * v65];
          do
          {
            v71 = *(_OWORD *)(v61 - 24);
            *((_QWORD *)v70 - 1) = *(_QWORD *)(v61 - 8);
            *(_OWORD *)(v70 - 24) = v71;
            v70 -= 24;
            *(_QWORD *)(v61 - 16) = 0;
            *(_QWORD *)(v61 - 8) = 0;
            *(_QWORD *)(v61 - 24) = 0;
            v61 -= 24;
          }
          while (v61 != v64);
          v72 = *a3;
          v62 = a3[1].u64[0];
        }
        v73 = v69 + 1;
        a3->i64[0] = (uint64_t)v70;
        a3->i64[1] = (uint64_t)&v69[1];
        v98 = v72;
        a3[1].i64[0] = (uint64_t)&v68[24 * v67];
        v99 = v62;
        v97 = (void (**)(llvm::raw_ostream *__hidden))v72.i64[0];
        sub_1C4D868F0((uint64_t)&v97);
        v74 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a3->i64[1] = (uint64_t)v73;
        if (v74 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v63 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v61 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v61 = v63;
        a3->i64[1] = v61 + 24;
      }
      v30 = v81;
      v31 = a2 + 80;
    }
    llvm::object::ResourceEntryRef::moveNext((uint64_t)v85, &v84, a4);
    if (*a4)
      break;
    if (v84)
    {
      *a4 = 0;
      break;
    }
  }
  v85[0] = (char *)&unk_1E8185470;
  v75 = v86;
  if (v86)
  {
    v76 = (unint64_t *)&v86->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if ((v118 & 1) == 0)
    goto LABEL_159;
LABEL_16:
  if (v107[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v107[0] + 8))(v107[0]);
}

BOOL llvm::object::WindowsResourceParser::TreeNode::addEntry(llvm::object::WindowsResourceParser::TreeNode *a1, _QWORD *a2, int a3, uint64_t a4, char **a5, llvm::object::WindowsResourceParser::TreeNode **a6)
{
  llvm::object::WindowsResourceParser::TreeNode *v11;
  uint64_t **v12;

  v11 = (llvm::object::WindowsResourceParser::TreeNode *)llvm::object::WindowsResourceParser::TreeNode::addTypeNode(a1, (uint64_t)a2, a5);
  v12 = (uint64_t **)llvm::object::WindowsResourceParser::TreeNode::addNameNode(v11, (uint64_t)a2, a5);
  return llvm::object::WindowsResourceParser::TreeNode::addLanguageNode(v12, a2, a3, a4, a6);
}

void llvm::object::WindowsResourceParser::parse(llvm::object::ResourceSectionRef *this@<X1>, int64x2_t *a2@<X0>, const void *a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  llvm::object::ResourceSectionRef *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *p_dst;
  uint64_t v16;
  llvm::object::ResourceSectionRef *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 __dst;
  unint64_t v38;
  void *__p;
  int64x2_t v40;
  unint64_t v41;
  int64x2_t *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v9 = this;
  v45 = *MEMORY[0x1E0C80C00];
  llvm::object::ResourceSectionRef::getTableAtOffset(this, 0, (uint64_t)&v43);
  if ((v44 & 1) != 0)
  {
    *a6 = v43;
    return;
  }
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_35;
  v12 = v43;
  v14 = a2[8].i64[0];
  v13 = a2[8].i64[1];
  v36 = v13;
  if (a4 >= 0x17)
  {
    v16 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v16 = a4 | 7;
    v17 = v9;
    v18 = v43;
    v19 = a6;
    v20 = a5;
    v21 = a2[8].i64[0];
    v22 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    v23 = v22 | 0x8000000000000000;
    v14 = v21;
    a5 = v20;
    a6 = v19;
    v12 = v18;
    v9 = v17;
    v13 = v36;
    *((_QWORD *)&__dst + 1) = a4;
    v38 = v23;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v38) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_10:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v24 = a2[9].u64[0];
  v25 = a2[8].u64[1];
  if (v25 >= v24)
  {
    v35 = v14;
    v27 = a2[8].i64[0];
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v27) >> 3) + 1;
    if (v28 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * ((uint64_t)(v24 - v27) >> 3) > v28)
        v28 = 0x5555555555555556 * ((uint64_t)(v24 - v27) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v27) >> 3) >= 0x555555555555555)
        v29 = 0xAAAAAAAAAAAAAAALL;
      else
        v29 = v28;
      v42 = a2 + 9;
      if (v29)
      {
        if (v29 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v30 = (char *)operator new(24 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * ((uint64_t)(v25 - v27) >> 3)];
      *(_OWORD *)v31 = __dst;
      *((_QWORD *)v31 + 2) = v38;
      if (v25 == v27)
      {
        v34 = vdupq_n_s64(v25);
        v32 = &v30[8 * ((uint64_t)(v25 - v27) >> 3)];
      }
      else
      {
        v32 = &v30[8 * ((uint64_t)(v25 - v27) >> 3)];
        do
        {
          v33 = *(_OWORD *)(v25 - 24);
          *((_QWORD *)v32 - 1) = *(_QWORD *)(v25 - 8);
          *(_OWORD *)(v32 - 24) = v33;
          v32 -= 24;
          *(_QWORD *)(v25 - 16) = 0;
          *(_QWORD *)(v25 - 8) = 0;
          *(_QWORD *)(v25 - 24) = 0;
          v25 -= 24;
        }
        while (v25 != v27);
        v34 = a2[8];
        v24 = a2[9].u64[0];
      }
      v13 = v36;
      v26 = (unint64_t)(v31 + 24);
      a2[8].i64[0] = (uint64_t)v32;
      a2[8].i64[1] = (uint64_t)(v31 + 24);
      v40 = v34;
      a2[9].i64[0] = (uint64_t)&v30[24 * v29];
      v41 = v24;
      __p = (void *)v34.i64[0];
      sub_1C4D868F0((uint64_t)&__p);
      v14 = v35;
      goto LABEL_29;
    }
LABEL_35:
    abort();
  }
  *(_OWORD *)v25 = __dst;
  *(_QWORD *)(v25 + 16) = v38;
  v26 = v25 + 24;
LABEL_29:
  a2[8].i64[1] = v26;
  __p = 0;
  v40 = 0uLL;
  llvm::object::WindowsResourceParser::addChildren((uint64_t)a2, (llvm::object::WindowsResourceParser::TreeNode *)a2, (uint64_t)v9, v12, -1431655765 * ((unint64_t)(v13 - v14) >> 3), (uint64_t *)&__p, a5, a6);
  if (__p)
    operator delete(__p);
  if ((v44 & 1) != 0)
  {
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
}

void llvm::object::WindowsResourceParser::addChildren(uint64_t a1@<X0>, llvm::object::WindowsResourceParser::TreeNode *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X5>, _QWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t *v8;
  char **v9;
  uint64_t *v10;
  llvm::object::ResourceSectionRef *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  const void *v61;
  size_t v62;
  char **v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  const void *v69;
  uint64_t *v70;
  size_t v71;
  const void *v72;
  uint64_t v73;
  const void *v74;
  char v75;
  int v76;
  const void *v77;
  size_t v78;
  size_t v79;
  _WORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  _QWORD *v86;
  char *v87;
  void *v88;
  uint64_t v89;
  llvm::raw_ostream *v90;
  void *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  int64x2_t v107;
  char *v108;
  int v109;
  char v110;
  _WORD *v111;
  char **v112;
  char **v113;
  char **v114;
  void *__dst[2];
  void *v122;
  llvm::object::WindowsResourceParser::TreeNode *v123;
  void *__p;
  char *v125;
  char *v126;
  unsigned int *v127;
  char v128;
  unsigned int *v129;
  char v130;
  uint64_t v131;
  int64x2_t v132;
  unint64_t v133;
  _WORD *v134;
  char v135;
  uint64_t v136;
  int v137;
  void **p_p;
  uint64_t v139;

  v8 = a8;
  v139 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int16 *)(a4 + 14) + *(unsigned __int16 *)(a4 + 12))
  {
    v9 = (char **)a7;
    v10 = a6;
    v12 = (llvm::object::ResourceSectionRef *)a3;
    v13 = (_QWORD *)a1;
    v14 = 0;
    v112 = (char **)(a1 + 80);
    v111 = a7 + 2;
    v114 = (char **)(a1 + 104);
    do
    {
      llvm::object::ResourceSectionRef::getTableEntry(v12, a4, v14, (uint64_t)&v129);
      if ((v130 & 1) != 0)
      {
        v18 = 0;
        v19 = (uint64_t)v129;
        v129 = 0;
LABEL_105:
        *v8 = v19;
        goto LABEL_106;
      }
      v15 = v129;
      v16 = v129[1];
      if ((v16 & 0x80000000) != 0)
      {
        if (v14 >= *(unsigned __int16 *)(a4 + 12))
        {
          v32 = llvm::object::WindowsResourceParser::TreeNode::addIDChild(a2, *v129);
          v33 = *v15;
          v35 = (_BYTE *)v10[1];
          v34 = v10[2];
          if ((unint64_t)v35 >= v34)
          {
            v37 = *v10;
            v38 = (uint64_t)&v35[-*v10] >> 5;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 59)
              goto LABEL_178;
            v40 = v34 - v37;
            if (v40 >> 4 > v39)
              v39 = v40 >> 4;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
              v41 = 0x7FFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              if (v41 >> 59)
                goto LABEL_179;
              v25 = v32;
              v42 = (char *)operator new(32 * v41);
            }
            else
            {
              v25 = v32;
              v42 = 0;
            }
            v55 = &v42[32 * v38];
            *v55 = 0;
            *((_QWORD *)v55 + 1) = 0;
            *((_QWORD *)v55 + 2) = 0;
            *((_DWORD *)v55 + 6) = v33;
            v56 = (uint64_t)v55;
            if (v35 == (_BYTE *)v37)
            {
              v10 = a6;
              v13 = (_QWORD *)a1;
            }
            else
            {
              v10 = a6;
              v13 = (_QWORD *)a1;
              do
              {
                v57 = *((_OWORD *)v35 - 2);
                *(_OWORD *)(v56 - 20) = *(_OWORD *)(v35 - 20);
                *(_OWORD *)(v56 - 32) = v57;
                v56 -= 32;
                v35 -= 32;
              }
              while (v35 != (_BYTE *)v37);
              v35 = (_BYTE *)*a6;
            }
            v36 = v55 + 32;
            *v10 = v56;
            v10[1] = (uint64_t)(v55 + 32);
            v10[2] = (uint64_t)&v42[32 * v41];
            if (v35)
              operator delete(v35);
            v8 = a8;
          }
          else
          {
            v25 = v32;
            *v35 = 0;
            *((_QWORD *)v35 + 1) = 0;
            *((_QWORD *)v35 + 2) = 0;
            v36 = v35 + 32;
            *((_DWORD *)v35 + 6) = v33;
            v13 = (_QWORD *)a1;
          }
          v12 = (llvm::object::ResourceSectionRef *)a3;
          v10[1] = (uint64_t)v36;
        }
        else
        {
          llvm::object::ResourceSectionRef::getDirStringAtOffset(v12, *v129 & 0x7FFFFFFF, (uint64_t)&v131);
          if ((v132.i8[8] & 1) != 0)
            goto LABEL_104;
          v113 = v9;
          v21 = v131;
          v20 = v132.i64[0];
          v22 = llvm::object::WindowsResourceParser::TreeNode::addNameChild((uint64_t)a2, (unsigned __int16 *)v131, v132.i64[0], v114);
          v24 = (char *)v10[1];
          v23 = v10[2];
          if ((unint64_t)v24 >= v23)
          {
            v49 = (char *)*v10;
            v50 = (v24 - v49) >> 5;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 59)
              goto LABEL_178;
            v52 = v23 - (_QWORD)v49;
            if (v52 >> 4 > v51)
              v51 = v52 >> 4;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
              v53 = 0x7FFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              if (v53 >> 59)
                goto LABEL_179;
              v25 = v22;
              v54 = (char *)operator new(32 * v53);
            }
            else
            {
              v25 = v22;
              v54 = 0;
            }
            v83 = &v54[32 * v50];
            *v83 = 1;
            *((_QWORD *)v83 + 1) = v21;
            *((_QWORD *)v83 + 2) = v20;
            v84 = (uint64_t)v83;
            if (v24 == v49)
            {
              v10 = a6;
              v8 = a8;
            }
            else
            {
              v8 = a8;
              do
              {
                v85 = *((_OWORD *)v24 - 2);
                *(_OWORD *)(v84 - 20) = *(_OWORD *)(v24 - 20);
                *(_OWORD *)(v84 - 32) = v85;
                v84 -= 32;
                v24 -= 32;
              }
              while (v24 != v49);
              v10 = a6;
              v24 = (char *)*a6;
            }
            v26 = v83 + 32;
            *v10 = v84;
            v10[1] = (uint64_t)(v83 + 32);
            v10[2] = (uint64_t)&v54[32 * v53];
            if (v24)
              operator delete(v24);
            v13 = (_QWORD *)a1;
          }
          else
          {
            v25 = v22;
            *v24 = 1;
            v26 = v24 + 32;
            *((_QWORD *)v24 + 1) = v21;
            *((_QWORD *)v24 + 2) = v20;
            v8 = a8;
          }
          v12 = (llvm::object::ResourceSectionRef *)a3;
          v10[1] = (uint64_t)v26;
          v9 = v113;
        }
        llvm::object::ResourceSectionRef::getTableAtOffset(v12, v15[1] & 0x7FFFFFFF, (uint64_t)&v131);
        if ((v132.i8[0] & 1) != 0)
        {
LABEL_104:
          v18 = 0;
          v19 = v131;
          goto LABEL_105;
        }
        llvm::object::WindowsResourceParser::addChildren(v13, v25, v12, v131, a5, v10, v9);
        if (*v8)
          goto LABEL_11;
      }
      else
      {
        if (*(_WORD *)(a4 + 12))
        {
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v131 = 3;
          v132.i64[0] = qword_1EF8F7238[0];
          __p = "unexpected string key for data object";
          sub_1C5DF1730((_BYTE **)&__p, &v131, v8);
LABEL_11:
          v18 = 0;
          goto LABEL_106;
        }
        llvm::object::ResourceSectionRef::getDataEntryAtOffset(v12, v16, (uint64_t)&v127);
        if ((v128 & 1) != 0)
        {
          v18 = 0;
          v19 = (uint64_t)v127;
          goto LABEL_105;
        }
        v27 = v127;
        v123 = 0;
        v28 = *v15;
        v30 = (_BYTE *)v10[1];
        v29 = v10[2];
        if ((unint64_t)v30 >= v29)
        {
          v43 = (_BYTE *)*v10;
          v44 = (uint64_t)&v30[-*v10] >> 5;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 59)
            goto LABEL_178;
          v46 = v29 - (_QWORD)v43;
          if (v46 >> 4 > v45)
            v45 = v46 >> 4;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
            v47 = 0x7FFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            if (v47 >> 59)
              goto LABEL_179;
            v48 = (char *)operator new(32 * v47);
          }
          else
          {
            v48 = 0;
          }
          v58 = &v48[32 * v44];
          *v58 = 0;
          *((_QWORD *)v58 + 1) = 0;
          *((_QWORD *)v58 + 2) = 0;
          *((_DWORD *)v58 + 6) = v28;
          v59 = (uint64_t)v58;
          if (v30 == v43)
          {
            v10 = a6;
            v13 = (_QWORD *)a1;
          }
          else
          {
            v10 = a6;
            v13 = (_QWORD *)a1;
            do
            {
              v60 = *((_OWORD *)v30 - 2);
              *(_OWORD *)(v59 - 20) = *(_OWORD *)(v30 - 20);
              *(_OWORD *)(v59 - 32) = v60;
              v59 -= 32;
              v30 -= 32;
            }
            while (v30 != v43);
            v30 = (_BYTE *)*a6;
          }
          v31 = v58 + 32;
          *v10 = v59;
          v10[1] = (uint64_t)(v58 + 32);
          v10[2] = (uint64_t)&v48[32 * v47];
          if (v30)
            operator delete(v30);
          v8 = a8;
        }
        else
        {
          *v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
          *((_QWORD *)v30 + 2) = 0;
          v31 = v30 + 32;
          *((_DWORD *)v30 + 6) = v28;
          v13 = (_QWORD *)a1;
        }
        v12 = (llvm::object::ResourceSectionRef *)a3;
        v10[1] = (uint64_t)v31;
        if (llvm::object::WindowsResourceParser::TreeNode::addDataChild((uint64_t **)a2, *v15, *(_WORD *)(a4 + 8), *(_WORD *)(a4 + 10), *(_DWORD *)a4, a5, -1431655765 * ((v13[11] - v13[10]) >> 3), &v123))
        {
          llvm::object::ResourceSectionRef::getContents(a3, v27, (uint64_t)&v131);
          if ((v132.i8[8] & 1) != 0)
            goto LABEL_104;
          v61 = (const void *)v131;
          v62 = v132.i64[0];
          __p = 0;
          v125 = 0;
          v126 = 0;
          if (v132.i64[0])
          {
            if (v132.i64[0] < 0)
              goto LABEL_178;
            v63 = v9;
            v64 = (char *)operator new(v132.u64[0]);
            v65 = &v64[v62];
            __p = v64;
            v126 = &v64[v62];
            memmove(v64, v61, v62);
            v125 = &v64[v62];
          }
          else
          {
            v63 = v9;
            v65 = 0;
            v64 = 0;
          }
          v86 = *(_QWORD **)(a1 + 88);
          v8 = a8;
          if ((unint64_t)v86 >= *(_QWORD *)(a1 + 96))
          {
            v87 = sub_1C5A18238(v112, (uint64_t)&__p);
            v88 = __p;
            *(_QWORD *)(a1 + 88) = v87;
            v9 = v63;
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v86 = v64;
            v86[1] = v65;
            v86[2] = v65;
            *(_QWORD *)(a1 + 88) = v86 + 3;
            v9 = v63;
          }
          v12 = (llvm::object::ResourceSectionRef *)a3;
          if ((v132.i8[8] & 1) != 0)
          {
            v89 = v131;
            v131 = 0;
            if (v89)
              (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
          }
          v13 = (_QWORD *)a1;
        }
        else if (!llvm::object::WindowsResourceParser::shouldIgnoreDuplicate((uint64_t)v13, v10))
        {
          v66 = v13[17];
          v67 = v13[16] + 24 * *((unsigned int *)v123 + 18);
          v68 = *(_BYTE *)(v67 + 23);
          if (v68 >= 0)
            v69 = (const void *)(v13[16] + 24 * *((unsigned int *)v123 + 18));
          else
            v69 = *(const void **)v67;
          v70 = v10;
          if (v68 >= 0)
            v71 = v68 & 0x7F;
          else
            v71 = *(_QWORD *)(v67 + 8);
          v74 = *(const void **)(v66 - 24);
          v73 = v66 - 24;
          v72 = v74;
          v75 = *(_BYTE *)(v73 + 23);
          v76 = v75;
          if (v75 >= 0)
            v77 = (const void *)v73;
          else
            v77 = v72;
          v78 = v75 & 0x7F;
          if (v76 >= 0)
            v79 = v78;
          else
            v79 = *(_QWORD *)(v73 + 8);
          __p = 0;
          v125 = 0;
          v126 = 0;
          v132.i32[0] = 0;
          v135 = 0;
          v136 = 0;
          v131 = (uint64_t)&unk_1E81A7208;
          p_p = &__p;
          v137 = 0;
          v133 = 0;
          v134 = 0;
          v132.i64[1] = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v131, "duplicate resource:", 0x13uLL);
          v80 = v134;
          v81 = v70[1];
          if (v81 == *v70)
          {
            v82 = v70[1];
          }
          else
          {
            if (v133 - (unint64_t)v134 > 5)
            {
              v134[2] = 8293;
              *(_DWORD *)v80 = 1887007776;
              v134 += 3;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v131, " type ", 6uLL);
            }
            sub_1C5A18024(*a6, (llvm::raw_ostream *)&v131, (llvm::raw_ostream *)1, 1);
            v81 = *a6;
            v82 = a6[1];
            v80 = v134;
          }
          if ((unint64_t)(v82 - v81) >= 0x21)
          {
            if (v133 - (unint64_t)v80 > 5)
            {
              v80[2] = 8293;
              *(_DWORD *)v80 = 1835101743;
              v134 += 3;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v131, "/name ", 6uLL);
            }
            sub_1C5A18024(*a6 + 32, (llvm::raw_ostream *)&v131, 0, 1);
            v80 = v134;
            if ((unint64_t)(a6[1] - *a6) >= 0x41)
            {
              if (v133 - (unint64_t)v134 > 9)
              {
                v134[4] = 8293;
                *(_QWORD *)v80 = *(_QWORD *)"/language ";
                v134 += 5;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v131, "/language ", 0xAuLL);
              }
              sub_1C5A18024(*a6 + 64, (llvm::raw_ostream *)&v131, 0, 0);
              v80 = v134;
            }
          }
          if (v133 - (unint64_t)v80 > 4)
          {
            *((_BYTE *)v80 + 4) = 32;
            *(_DWORD *)v80 = 1852383276;
            v91 = (char *)v134 + 5;
            v134 = (_WORD *)((char *)v134 + 5);
            v90 = (llvm::raw_ostream *)&v131;
            v92 = &v134;
          }
          else
          {
            v90 = llvm::raw_ostream::write((llvm::raw_ostream *)&v131, ", in ", 5uLL);
            v92 = (_QWORD *)((char *)v90 + 32);
            v91 = (void *)*((_QWORD *)v90 + 4);
          }
          if (v71 <= *((_QWORD *)v90 + 3) - (_QWORD)v91)
          {
            if (v71)
            {
              memcpy(v91, v69, v71);
              *v92 += v71;
            }
          }
          else
          {
            v90 = llvm::raw_ostream::write(v90, (const char *)v69, v71);
          }
          v93 = (_QWORD *)*((_QWORD *)v90 + 4);
          v10 = a6;
          if (*((_QWORD *)v90 + 3) - (_QWORD)v93 > 7uLL)
          {
            *v93 = 0x206E6920646E6120;
            v94 = (void *)(*((_QWORD *)v90 + 4) + 8);
            *((_QWORD *)v90 + 4) = v94;
          }
          else
          {
            v90 = llvm::raw_ostream::write(v90, " and in ", 8uLL);
            v94 = (void *)*((_QWORD *)v90 + 4);
          }
          if (v79 <= *((_QWORD *)v90 + 3) - (_QWORD)v94)
          {
            if (v79)
            {
              memcpy(v94, v77, v79);
              *((_QWORD *)v90 + 4) += v79;
            }
          }
          else
          {
            llvm::raw_ostream::write(v90, (const char *)v77, v79);
          }
          if (*((char *)p_p + 23) < 0)
          {
            sub_1C47EBC30(__dst, *p_p, (unint64_t)p_p[1]);
          }
          else
          {
            v95 = *(_OWORD *)p_p;
            v122 = p_p[2];
            *(_OWORD *)__dst = v95;
          }
          v12 = (llvm::object::ResourceSectionRef *)a3;
          v131 = (uint64_t)off_1E81A6E70;
          if (v137 == 1 && v132.i64[1])
            MEMORY[0x1CAA32F9C](v132.i64[1], 0x1000C8077774924);
          if (SHIBYTE(v126) < 0)
            operator delete(__p);
          v96 = (unint64_t)v9[1];
          v97 = (unint64_t)v9[2];
          if (v96 >= v97)
          {
            v99 = *v9;
            v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (_QWORD)*v9) >> 3);
            v101 = v100 + 1;
            if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_178:
              abort();
            if (0x5555555555555556 * ((uint64_t)(v97 - (_QWORD)v99) >> 3) > v101)
              v101 = 0x5555555555555556 * ((uint64_t)(v97 - (_QWORD)v99) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)v99) >> 3) >= 0x555555555555555)
              v102 = 0xAAAAAAAAAAAAAAALL;
            else
              v102 = v101;
            v134 = v111;
            if (v102)
            {
              if (v102 > 0xAAAAAAAAAAAAAAALL)
LABEL_179:
                sub_1C4764EE4();
              v103 = (char *)operator new(24 * v102);
            }
            else
            {
              v103 = 0;
            }
            v104 = &v103[24 * v100];
            *(_OWORD *)v104 = *(_OWORD *)__dst;
            *((_QWORD *)v104 + 2) = v122;
            __dst[1] = 0;
            v122 = 0;
            __dst[0] = 0;
            if ((char *)v96 == v99)
            {
              v107 = vdupq_n_s64(v96);
              v105 = &v103[24 * v100];
              v13 = (_QWORD *)a1;
            }
            else
            {
              v105 = &v103[24 * v100];
              v13 = (_QWORD *)a1;
              do
              {
                v106 = *(_OWORD *)(v96 - 24);
                *((_QWORD *)v105 - 1) = *(_QWORD *)(v96 - 8);
                *(_OWORD *)(v105 - 24) = v106;
                v105 -= 24;
                *(_QWORD *)(v96 - 16) = 0;
                *(_QWORD *)(v96 - 8) = 0;
                *(_QWORD *)(v96 - 24) = 0;
                v96 -= 24;
              }
              while ((char *)v96 != v99);
              v107 = *(int64x2_t *)v9;
              v97 = (unint64_t)v9[2];
            }
            v108 = v104 + 24;
            *v9 = v105;
            v9[1] = v104 + 24;
            v132 = v107;
            v9[2] = &v103[24 * v102];
            v133 = v97;
            v131 = v107.i64[0];
            sub_1C4D868F0((uint64_t)&v131);
            v109 = SHIBYTE(v122);
            v9[1] = v108;
            v12 = (llvm::object::ResourceSectionRef *)a3;
            if (v109 < 0)
              operator delete(__dst[0]);
          }
          else
          {
            v98 = *(_OWORD *)__dst;
            *(_QWORD *)(v96 + 16) = v122;
            *(_OWORD *)v96 = v98;
            v9[1] = (char *)(v96 + 24);
          }
          v110 = v128;
          a6[1] -= 32;
          v8 = a8;
          if ((v110 & 1) != 0 && v127)
            (*(void (**)(unsigned int *))(*(_QWORD *)v127 + 8))(v127);
          goto LABEL_122;
        }
      }
      v10[1] -= 32;
LABEL_122:
      v18 = 1;
LABEL_106:
      if ((v130 & 1) != 0)
      {
        if (v129)
          (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 8))(v129);
      }
      if ((v18 & 1) == 0)
        return;
      ++v14;
    }
    while (v14 < *(unsigned __int16 *)(a4 + 14) + *(unsigned __int16 *)(a4 + 12));
  }
  *v8 = 0;
}

uint64_t llvm::object::WindowsResourceParser::printTree(llvm::object::WindowsResourceParser *this, llvm::raw_ostream *a2)
{
  _QWORD v3[2];
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3[0] = &unk_1E81A26B0;
  v3[1] = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  return llvm::object::WindowsResourceParser::TreeNode::print(this, (uint64_t)v3, (uint64_t)"Resource Tree", 13);
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::print(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  char v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  unsigned int *v20;
  unsigned int *v21;
  void *__p[2];
  char v24;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 232))(a2, a3, a4);
  v6 = (_QWORD *)a1[5];
  if (v6 != a1 + 6)
  {
    do
    {
      v7 = *((_BYTE *)v6 + 55);
      v8 = v7;
      if (v7 >= 0)
        v9 = v6 + 4;
      else
        v9 = (_QWORD *)v6[4];
      v10 = v7 & 0x7F;
      if (v8 >= 0)
        v11 = v10;
      else
        v11 = v6[5];
      llvm::object::WindowsResourceParser::TreeNode::print(v6[7], a2, v9, v11);
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != a1 + 6);
  }
  v15 = (unsigned int *)a1[2];
  v16 = (unsigned int *)(a1 + 3);
  if (v15 != (unsigned int *)(a1 + 3))
  {
    do
    {
      v17 = *((_QWORD *)v15 + 5);
      sub_1C5A128A4(v15 + 8, (uint64_t)__p);
      if (v24 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if (v24 >= 0)
        v19 = (void *)(v24 & 0x7F);
      else
        v19 = __p[1];
      llvm::object::WindowsResourceParser::TreeNode::print(v17, a2, v18, v19);
      if (v24 < 0)
        operator delete(__p[0]);
      v20 = (unsigned int *)*((_QWORD *)v15 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(unsigned int **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (unsigned int *)*((_QWORD *)v15 + 2);
          v14 = *(_QWORD *)v21 == (_QWORD)v15;
          v15 = v21;
        }
        while (!v14);
      }
      v15 = v21;
    }
    while (v21 != v16);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::addTypeNode(llvm::object::WindowsResourceParser::TreeNode *a1, uint64_t a2, char **a3)
{
  if (*(_BYTE *)(a2 + 72))
    return llvm::object::WindowsResourceParser::TreeNode::addNameChild((uint64_t)a1, *(unsigned __int16 **)(a2 + 80), *(_QWORD *)(a2 + 88), a3);
  else
    return llvm::object::WindowsResourceParser::TreeNode::addIDChild(a1, *(unsigned __int16 *)(a2 + 96));
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::addNameNode(llvm::object::WindowsResourceParser::TreeNode *a1, uint64_t a2, char **a3)
{
  if (*(_BYTE *)(a2 + 98))
    return llvm::object::WindowsResourceParser::TreeNode::addNameChild((uint64_t)a1, *(unsigned __int16 **)(a2 + 104), *(_QWORD *)(a2 + 112), a3);
  else
    return llvm::object::WindowsResourceParser::TreeNode::addIDChild(a1, *(unsigned __int16 *)(a2 + 120));
}

BOOL llvm::object::WindowsResourceParser::TreeNode::addLanguageNode(uint64_t **a1, _QWORD *a2, int a3, uint64_t a4, llvm::object::WindowsResourceParser::TreeNode **a5)
{
  _BOOL8 v7;
  const void *v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  void *v15;
  void *__p;
  char *v18;
  char *v19;

  v7 = llvm::object::WindowsResourceParser::TreeNode::addDataChild(a1, *(unsigned __int16 *)(a2[16] + 6), HIWORD(*(_DWORD *)(a2[16] + 8)), *(_DWORD *)(a2[16] + 8), *(_DWORD *)(a2[16] + 12), a3, -1431655765 * ((*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), a5);
  if (v7)
  {
    v8 = (const void *)a2[17];
    v9 = a2[18];
    v18 = 0;
    v19 = 0;
    __p = 0;
    if (v9)
    {
      if ((v9 & 0x8000000000000000) != 0)
        abort();
      v10 = (char *)operator new(v9);
      v11 = &v10[v9];
      __p = v10;
      v19 = &v10[v9];
      memmove(v10, v8, v9);
      v12 = &v10[v9];
      v18 = &v10[v9];
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v10 = 0;
    }
    v13 = *(_QWORD **)(a4 + 8);
    if ((unint64_t)v13 >= *(_QWORD *)(a4 + 16))
    {
      v14 = sub_1C5A18238((char **)a4, (uint64_t)&__p);
      v15 = __p;
      *(_QWORD *)(a4 + 8) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v13 = v10;
      v13[1] = v12;
      v13[2] = v11;
      *(_QWORD *)(a4 + 8) = v13 + 3;
    }
  }
  return v7;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::addNameChild(uint64_t a1, unsigned __int16 *a2, uint64_t a3, char **a4)
{
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  std::string::size_type v10;
  int v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t **v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t *v21;
  char v22;
  uint64_t *v23;
  size_t v24;
  std::string::size_type v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  char v51;
  uint64_t **v52;
  std::string::size_type v53;
  std::string *p_p;
  _QWORD *v55;
  const void *v56;
  const void *v57;
  size_t v58;
  const void *v59;
  size_t v60;
  size_t v61;
  size_t v62;
  int v63;
  _BOOL4 v64;
  size_t v65;
  int v66;
  _BOOL4 v67;
  uint64_t *v68;
  _BYTE *v69;
  uint64_t v70;
  std::string::size_type size;
  size_t v73;
  uint64_t v75;
  uint64_t v76;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v73 = 2 * a3;
  llvm::convertUTF16ToUTF8String(a2, 2 * a3, &__p);
  v75 = a1;
  v9 = *(_QWORD *)(a1 + 48);
  v8 = (uint64_t **)(a1 + 48);
  v7 = v9;
  if (v9)
  {
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    size = __p.__r_.__value_.__l.__size_;
    v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F
        : __p.__r_.__value_.__l.__size_;
    v14 = v8;
    do
    {
      if (*(char *)(v7 + 55) < 0)
      {
        v15 = *(const void **)(v7 + 32);
        v16 = *(_QWORD *)(v7 + 40);
      }
      else
      {
        v15 = (const void *)(v7 + 32);
        v16 = *(unsigned __int8 *)(v7 + 55);
      }
      if (v13 >= v16)
        v17 = v16;
      else
        v17 = v13;
      v18 = memcmp(v15, v12, v17);
      v19 = v16 < v13;
      if (v18)
        v19 = v18 < 0;
      v20 = !v19;
      if (v19)
        v21 = (uint64_t *)(v7 + 8);
      else
        v21 = (uint64_t *)v7;
      if (v20)
        v14 = (uint64_t **)v7;
      v7 = *v21;
    }
    while (*v21);
    if (v14 != v8)
    {
      v22 = *((_BYTE *)v14 + 55);
      if (v22 >= 0)
        v23 = (uint64_t *)(v14 + 4);
      else
        v23 = v14[4];
      if (v22 >= 0)
        v24 = v22 & 0x7F;
      else
        v24 = (size_t)v14[5];
      if (v11 >= 0)
        v25 = v10;
      else
        v25 = size;
      if (v24 >= v25)
        v26 = v25;
      else
        v26 = v24;
      v27 = memcmp(v12, v23, v26);
      v28 = v25 < v24;
      if (v27)
        v28 = v27 < 0;
      if (!v28)
      {
        v30 = (uint64_t)v14[7];
        if ((v11 & 0x80) == 0)
          return v30;
        goto LABEL_101;
      }
    }
  }
  v29 = -1431655765 * ((unint64_t)(a4[1] - *a4) >> 3);
  v30 = operator new();
  *(_BYTE *)v30 = 0;
  *(_DWORD *)(v30 + 4) = v29;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 16) = v30 + 24;
  *(_QWORD *)(v30 + 56) = 0;
  *(_QWORD *)(v30 + 64) = 0;
  *(_QWORD *)(v30 + 48) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = v30 + 48;
  v76 = v30;
  if (a3)
  {
    if (a3 < 0)
      goto LABEL_107;
    v31 = (char *)operator new(v73);
    v32 = &v31[2 * a3];
    memcpy(v31, a2, 2 * a3);
    v33 = v32;
  }
  else
  {
    v31 = 0;
    v33 = 0;
    v32 = 0;
  }
  v35 = a4[1];
  v34 = (unint64_t)a4[2];
  if ((unint64_t)v35 < v34)
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v33;
    v36 = v35 + 24;
    *((_QWORD *)v35 + 2) = v32;
    goto LABEL_63;
  }
  v37 = *a4;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *a4) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_107:
    abort();
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v42 = (char *)operator new(24 * v41);
  v43 = &v42[24 * v38];
  *(_QWORD *)v43 = v31;
  *((_QWORD *)v43 + 1) = v33;
  *((_QWORD *)v43 + 2) = v32;
  if (v35 == v37)
  {
    v36 = v43 + 24;
    *a4 = v43;
    a4[1] = v43 + 24;
    a4[2] = &v42[24 * v41];
    if (v35)
LABEL_62:
      operator delete(v35);
  }
  else
  {
    v44 = &v42[24 * v38];
    do
    {
      v45 = *(_OWORD *)(v35 - 24);
      v35 -= 24;
      *(_OWORD *)(v44 - 24) = v45;
      v44 -= 24;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v35 + 2);
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = 0;
    }
    while (v35 != v37);
    v35 = *a4;
    v46 = a4[1];
    v36 = v43 + 24;
    *a4 = v44;
    a4[1] = v43 + 24;
    a4[2] = &v42[24 * v41];
    if (v46 != v35)
    {
      v47 = v46;
      do
      {
        v49 = (void *)*((_QWORD *)v47 - 3);
        v47 -= 24;
        v48 = v49;
        if (v49)
        {
          *((_QWORD *)v46 - 2) = v48;
          operator delete(v48);
        }
        v46 = v47;
      }
      while (v47 != v35);
    }
    if (v35)
      goto LABEL_62;
  }
LABEL_63:
  a4[1] = v36;
  v50 = *v8;
  v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v52 = v8;
  if (*v8)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v53 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    while (1)
    {
      while (1)
      {
        v52 = (uint64_t **)v50;
        v57 = (const void *)v50[4];
        v55 = v50 + 4;
        v56 = v57;
        v58 = *((unsigned __int8 *)v55 + 23);
        if ((v58 & 0x80u) == 0)
          v59 = v55;
        else
          v59 = v56;
        v60 = v55[1];
        if ((v58 & 0x80u) == 0)
          v61 = v58 & 0x7F;
        else
          v61 = v55[1];
        if (v61 >= v53)
          v62 = v53;
        else
          v62 = v61;
        v63 = memcmp(p_p, v59, v62);
        v64 = v53 < v61;
        if (v63)
          v64 = v63 < 0;
        if (!v64)
          break;
        v50 = *v52;
        v8 = v52;
        if (!*v52)
          goto LABEL_94;
      }
      if ((v58 & 0x80u) != 0)
        v58 = v60;
      if (v53 >= v58)
        v65 = v58;
      else
        v65 = v53;
      v66 = memcmp(v59, p_p, v65);
      v67 = v58 < v53;
      if (v66)
        v67 = v66 < 0;
      if (!v67)
        break;
      v50 = v52[1];
      if (!v50)
      {
        v8 = v52 + 1;
        goto LABEL_94;
      }
    }
  }
  else
  {
LABEL_94:
    v68 = (uint64_t *)operator new(0x40uLL);
    v69 = v68 + 4;
    if (v51 < 0)
    {
      sub_1C47EBC30(v69, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v69 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v68[6] = __p.__r_.__value_.__r.__words[2];
    }
    v76 = 0;
    v68[7] = v30;
    *v68 = 0;
    v68[1] = 0;
    v68[2] = (uint64_t)v52;
    *v8 = v68;
    v70 = **(_QWORD **)(v75 + 40);
    if (v70)
    {
      *(_QWORD *)(v75 + 40) = v70;
      v68 = *v8;
    }
    sub_1C4768E74(*(uint64_t **)(v75 + 48), v68);
    ++*(_QWORD *)(v75 + 56);
  }
  sub_1C5A18390(&v76);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_101:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v30;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::addIDChild(llvm::object::WindowsResourceParser::TreeNode *this, unsigned int a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v13;

  v5 = (char *)*((_QWORD *)this + 3);
  v3 = (char *)this + 24;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *((_DWORD *)v6 + 8) <= a2)
    return *((_QWORD *)v6 + 5);
LABEL_12:
  v10 = (uint64_t **)(v3 - 8);
  v11 = operator new();
  *(_BYTE *)v11 = 0;
  *(_DWORD *)(v11 + 4) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = v11 + 24;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 48;
  v13 = (uint64_t *)v11;
  sub_1C5A18474(v10, a2, a2, &v13);
  sub_1C5A18390((uint64_t *)&v13);
  return v11;
}

BOOL llvm::object::WindowsResourceParser::TreeNode::addDataChild(uint64_t **this, unsigned int a2, __int16 a3, __int16 a4, int a5, int a6, int a7, llvm::object::WindowsResourceParser::TreeNode **a8)
{
  uint64_t v16;
  char v17;
  _BOOL8 v18;
  uint64_t *v20;

  v16 = operator new();
  *(_BYTE *)v16 = 1;
  *(_DWORD *)(v16 + 8) = a7;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 16) = v16 + 24;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v16 + 48;
  *(_WORD *)(v16 + 64) = a3;
  *(_WORD *)(v16 + 66) = a4;
  *(_DWORD *)(v16 + 68) = a5;
  *(_DWORD *)(v16 + 72) = a6;
  v20 = (uint64_t *)v16;
  *a8 = (llvm::object::WindowsResourceParser::TreeNode *)sub_1C5A18474(this + 2, a2, a2, &v20)[5];
  v18 = v17 != 0;
  sub_1C5A18390((uint64_t *)&v20);
  return v18;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::TreeNode(uint64_t this, __int16 a2, __int16 a3, int a4, int a5, int a6)
{
  *(_BYTE *)this = 1;
  *(_DWORD *)(this + 8) = a6;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = this + 48;
  *(_WORD *)(this + 64) = a2;
  *(_WORD *)(this + 66) = a3;
  *(_DWORD *)(this + 68) = a4;
  *(_DWORD *)(this + 72) = a5;
  return this;
}

{
  *(_BYTE *)this = 1;
  *(_DWORD *)(this + 8) = a6;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = this + 48;
  *(_WORD *)(this + 64) = a2;
  *(_WORD *)(this + 66) = a3;
  *(_DWORD *)(this + 68) = a4;
  *(_DWORD *)(this + 72) = a5;
  return this;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::createStringNode@<X0>(llvm::object::WindowsResourceParser::TreeNode *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  uint64_t result;

  v2 = (int)this;
  result = operator new();
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = v2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = result + 24;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 48;
  *a2 = result;
  return result;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::createIDNode@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = result + 24;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 48;
  *a1 = result;
  return result;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::createDataNode@<X0>(llvm::object::WindowsResourceParser::TreeNode *this@<X0>, __int16 a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  __int16 v10;
  uint64_t result;

  v10 = (__int16)this;
  result = operator new();
  *(_BYTE *)result = 1;
  *(_DWORD *)(result + 8) = a5;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = result + 24;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 48;
  *(_WORD *)(result + 64) = v10;
  *(_WORD *)(result + 66) = a2;
  *(_DWORD *)(result + 68) = a3;
  *(_DWORD *)(result + 72) = a4;
  *a6 = result;
  return result;
}

uint64_t llvm::object::WindowsResourceParser::TreeNode::getTreeSize(llvm::object::WindowsResourceParser::TreeNode *this)
{
  int v1;
  uint64_t v2;
  char *v4;
  char *v5;
  int TreeSize;
  char *v7;
  char *v8;
  BOOL v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;

  v1 = 8 * (*((_DWORD *)this + 14) + *((_DWORD *)this + 8));
  if (*(_BYTE *)this)
    return (v1 + 16);
  v2 = (v1 + 16);
  v4 = (char *)*((_QWORD *)this + 5);
  v5 = (char *)this + 48;
  if (v4 != (char *)this + 48)
  {
    do
    {
      TreeSize = llvm::object::WindowsResourceParser::TreeNode::getTreeSize(*((llvm::object::WindowsResourceParser::TreeNode **)v4
                                                                            + 7));
      v7 = (char *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v2 = (TreeSize + v2);
      v4 = v8;
    }
    while (v8 != v5);
  }
  v10 = (char *)*((_QWORD *)this + 2);
  v11 = (char *)this + 24;
  if (v10 != v11)
  {
    do
    {
      v12 = llvm::object::WindowsResourceParser::TreeNode::getTreeSize(*((llvm::object::WindowsResourceParser::TreeNode **)v10
                                                                       + 5));
      v13 = (char *)*((_QWORD *)v10 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v9);
      }
      v2 = (v12 + v2);
      v10 = v14;
    }
    while (v14 != v11);
  }
  return v2;
}

uint64_t *llvm::object::WindowsResourceCOFFWriter::WindowsResourceCOFFWriter(uint64_t *a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  *a1 = 0;
  a1[2] = 0;
  *((_DWORD *)a1 + 6) = a2;
  a1[4] = (uint64_t)a3;
  v4 = a3[10];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a3[11] - v4) >> 3);
  a1[5] = v4;
  a1[6] = v5;
  v6 = a3[13];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a3[14] - v6) >> 3);
  a1[11] = v6;
  a1[12] = v7;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  a1[21] = 0;
  a1[7] = 100;
  llvm::object::WindowsResourceCOFFWriter::performSectionOneLayout((llvm::object::WindowsResourceCOFFWriter *)a1);
  llvm::object::WindowsResourceCOFFWriter::performSectionTwoLayout((llvm::object::WindowsResourceCOFFWriter *)a1);
  v9 = a1[6];
  v8 = a1[7];
  *((_DWORD *)a1 + 16) = v8;
  v10 = v8 + 18 * v9 + 94;
  a1[7] = v10;
  v14 = "internal .obj file created from .res files";
  v15 = 259;
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(v10, (uint64_t)&v14, &v16);
  v11 = v16;
  if (v16)
    bzero(*(void **)(v16 + 8), v10);
  v12 = *a1;
  *a1 = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void llvm::object::WindowsResourceCOFFWriter::performFileLayout(llvm::object::WindowsResourceCOFFWriter *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 7) = 100;
  llvm::object::WindowsResourceCOFFWriter::performSectionOneLayout(this);
  llvm::object::WindowsResourceCOFFWriter::performSectionTwoLayout(this);
  v3 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 16) = v2;
  *((_QWORD *)this + 7) = v2 + 18 * v3 + 94;
}

void llvm::object::WindowsResourceCOFFWriter::performSectionOneLayout(llvm::object::WindowsResourceCOFFWriter *this)
{
  uint64_t v2;
  int TreeSize;
  uint64_t v4;
  int v5;
  int *v6;
  int *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 18) = v2;
  TreeSize = llvm::object::WindowsResourceParser::TreeNode::getTreeSize(*((llvm::object::WindowsResourceParser::TreeNode **)this
                                                                        + 4));
  *((_DWORD *)this + 17) = TreeSize;
  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    v5 = 0;
    v6 = (int *)*((_QWORD *)this + 11);
    v7 = &v6[6 * v4];
    v8 = (char *)*((_QWORD *)this + 14);
    do
    {
      v9 = *((_QWORD *)this + 15);
      if ((unint64_t)v8 >= v9)
      {
        v11 = (char *)*((_QWORD *)this + 13);
        v12 = (v8 - v11) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 62)
            sub_1C4764EE4();
          v16 = (char *)operator new(4 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = TreeSize;
        v10 = v17 + 4;
        while (v8 != v11)
        {
          v18 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *((_QWORD *)this + 13) = v17;
        *((_QWORD *)this + 14) = v10;
        *((_QWORD *)this + 15) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v8 = TreeSize;
        v10 = v8 + 4;
      }
      *((_QWORD *)this + 14) = v10;
      v19 = v6[2];
      v20 = *v6;
      v6 += 6;
      v21 = ((v19 - v20) & 0xFFFFFFFE) + 2;
      TreeSize += v21;
      v5 += v21;
      v8 = v10;
    }
    while (v6 != v7);
    TreeSize = *((_DWORD *)this + 17);
    v2 = *((_QWORD *)this + 7);
    LODWORD(v4) = (v5 + 3) & 0xFFFFFFFC;
  }
  v22 = (v4 + TreeSize);
  *((_DWORD *)this + 17) = v22;
  *((_DWORD *)this + 19) = v22 + v2;
  *((_QWORD *)this + 7) = (v2 + v22 + 10 * *((_QWORD *)this + 6) + 7) & 0xFFFFFFFFFFFFFFF8;
}

void llvm::object::WindowsResourceCOFFWriter::performSectionTwoLayout(llvm::object::WindowsResourceCOFFWriter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  v3 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 21) = v2;
  if (v3)
  {
    LODWORD(v4) = 0;
    v5 = (int *)*((_QWORD *)this + 5);
    v6 = &v5[6 * v3];
    v7 = (char *)*((_QWORD *)this + 17);
    do
    {
      v8 = *((_QWORD *)this + 18);
      if ((unint64_t)v7 >= v8)
      {
        v10 = (char *)*((_QWORD *)this + 16);
        v11 = (v7 - v10) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 62)
            sub_1C4764EE4();
          v15 = (char *)operator new(4 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = v4;
        v9 = v16 + 4;
        while (v7 != v10)
        {
          v17 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *((_QWORD *)this + 16) = v16;
        *((_QWORD *)this + 17) = v9;
        *((_QWORD *)this + 18) = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v7 = v4;
        v9 = v7 + 4;
      }
      *((_QWORD *)this + 17) = v9;
      v18 = v5[2];
      v19 = *v5;
      v5 += 6;
      v4 = ((v18 - v19 + 7) & 0xFFFFFFF8) + *((_DWORD *)this + 20);
      *((_DWORD *)this + 20) = v4;
      v7 = v9;
    }
    while (v5 != v6);
    v2 = *((_QWORD *)this + 7);
    v20 = v4 + 7;
  }
  else
  {
    v20 = 7;
  }
  *((_QWORD *)this + 7) = (v20 + v2) & 0xFFFFFFFFFFFFFFF8;
}

void llvm::object::WindowsResourceCOFFWriter::write(llvm::object::WindowsResourceCOFFWriter *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)this + 8);
  *((_QWORD *)this + 1) = v5;
  *(_WORD *)v5 = *((_DWORD *)this + 6);
  *(_WORD *)(v5 + 2) = 2;
  *(_DWORD *)(v5 + 4) = a2;
  *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 16);
  *(_DWORD *)(v5 + 12) = *((_DWORD *)this + 12) + 5;
  *(_DWORD *)(v5 + 16) = 0x1000000;
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2) + 20;
  *((_QWORD *)this + 2) = v7;
  v8 = v6 + v7;
  *(_QWORD *)v8 = 0x313024637273722ELL;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)this + 17);
  *(_DWORD *)(v8 + 20) = *((_DWORD *)this + 18);
  *(_DWORD *)(v8 + 24) = *((_DWORD *)this + 19);
  *(_DWORD *)(v8 + 28) = 0;
  *(_WORD *)(v8 + 32) = *((_QWORD *)this + 6);
  *(_WORD *)(v8 + 34) = 0;
  *(_DWORD *)(v8 + 36) += 1073741888;
  v9 = *((_QWORD *)this + 1);
  v10 = *((_QWORD *)this + 2) + 40;
  *((_QWORD *)this + 2) = v10;
  v11 = v9 + v10;
  *(_QWORD *)v11 = 0x323024637273722ELL;
  *(_QWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = *((_DWORD *)this + 20);
  *(_DWORD *)(v11 + 20) = *((_DWORD *)this + 21);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0x4000004000000000;
  *((_QWORD *)this + 2) += 40;
  llvm::object::WindowsResourceCOFFWriter::writeDirectoryTree(this);
  llvm::object::WindowsResourceCOFFWriter::writeDirectoryStringTable(this);
  llvm::object::WindowsResourceCOFFWriter::writeFirstSectionRelocations((uint64_t)this);
  *((_QWORD *)this + 2) = (*((_QWORD *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8;
  llvm::object::WindowsResourceCOFFWriter::writeSecondSection(this);
  llvm::object::WindowsResourceCOFFWriter::writeSymbolTable(this);
  *(_DWORD *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)) = 0;
  v12 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *a3 = v12;
}

uint64_t llvm::object::WindowsResourceCOFFWriter::writeCOFFHeader(uint64_t this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  *(_WORD *)v2 = *(_DWORD *)(this + 24);
  *(_WORD *)(v2 + 2) = 2;
  *(_DWORD *)(v2 + 4) = a2;
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(this + 64);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(this + 48) + 5;
  *(_DWORD *)(v2 + 16) = 0x1000000;
  return this;
}

uint64_t llvm::object::WindowsResourceCOFFWriter::writeFirstSectionHeader(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16) + 20;
  *(_QWORD *)(this + 16) = v2;
  v3 = v1 + v2;
  *(_QWORD *)v3 = 0x313024637273722ELL;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(this + 68);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(this + 72);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(this + 76);
  *(_DWORD *)(v3 + 28) = 0;
  *(_WORD *)(v3 + 32) = *(_QWORD *)(this + 48);
  *(_WORD *)(v3 + 34) = 0;
  *(_DWORD *)(v3 + 36) += 1073741888;
  return this;
}

uint64_t llvm::object::WindowsResourceCOFFWriter::writeSecondSectionHeader(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16) + 40;
  *(_QWORD *)(this + 16) = v2;
  v3 = v1 + v2;
  *(_QWORD *)v3 = 0x323024637273722ELL;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(this + 80);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(this + 84);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0x4000004000000000;
  return this;
}

uint64_t llvm::object::WindowsResourceCOFFWriter::writeFirstSection(llvm::object::WindowsResourceCOFFWriter *this)
{
  uint64_t result;

  *((_QWORD *)this + 2) += 40;
  llvm::object::WindowsResourceCOFFWriter::writeDirectoryTree(this);
  llvm::object::WindowsResourceCOFFWriter::writeDirectoryStringTable(this);
  result = llvm::object::WindowsResourceCOFFWriter::writeFirstSectionRelocations((uint64_t)this);
  *((_QWORD *)this + 2) = (*((_QWORD *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8;
  return result;
}

_QWORD *llvm::object::WindowsResourceCOFFWriter::writeSecondSection(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  _BYTE *v7;

  v1 = (uint64_t)this;
  v2 = this[6];
  if (v2)
  {
    v3 = this[2];
    v4 = 24 * v2;
    v5 = (_QWORD *)(this[5] + 8);
    do
    {
      v6 = (const void *)*(v5 - 1);
      if ((const void *)*v5 == v6)
      {
        v7 = (_BYTE *)*(v5 - 1);
      }
      else
      {
        this = memmove((void *)(*(_QWORD *)(v1 + 8) + v3), v6, *v5 - (_QWORD)v6);
        v6 = (const void *)*(v5 - 1);
        v7 = (_BYTE *)*v5;
        v3 = *(_QWORD *)(v1 + 16);
      }
      v3 += (v7 - (_BYTE *)v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v1 + 16) = v3;
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  else
  {
    v3 = this[2];
  }
  *(_QWORD *)(v1 + 16) = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return this;
}

void llvm::object::WindowsResourceCOFFWriter::writeSymbolTable(llvm::object::WindowsResourceCOFFWriter *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v19[4];
  void *v20;
  int v21;
  void **v22;
  uint64_t (**v23)();
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD v34[3];

  v34[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1) + *((_QWORD *)this + 2);
  *(_QWORD *)v1 = 0x30302E7461656640;
  *(_QWORD *)(v1 + 8) = 0xFFFF00000011;
  *(_WORD *)(v1 + 16) = 3;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2) + 18;
  *((_QWORD *)this + 2) = v3;
  v4 = v2 + v3;
  *(_QWORD *)v4 = 0x313024637273722ELL;
  *(_QWORD *)(v4 + 8) = 0x100000000;
  *(_WORD *)(v4 + 16) = 259;
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2) + 18;
  *((_QWORD *)this + 2) = v6;
  v7 = v5 + v6;
  *(_DWORD *)v7 = *((_DWORD *)this + 17);
  *(_WORD *)(v7 + 4) = *((_QWORD *)this + 6);
  *(_QWORD *)(v7 + 6) = 0;
  *(_BYTE *)(v7 + 14) = 0;
  v8 = *((_QWORD *)this + 1);
  v9 = *((_QWORD *)this + 2) + 18;
  *((_QWORD *)this + 2) = v9;
  v10 = v8 + v9;
  *(_QWORD *)v10 = 0x323024637273722ELL;
  *(_QWORD *)(v10 + 8) = 0x200000000;
  *(_WORD *)(v10 + 16) = 259;
  v11 = *((_QWORD *)this + 1);
  v12 = *((_QWORD *)this + 2) + 18;
  *((_QWORD *)this + 2) = v12;
  v13 = v11 + v12;
  *(_DWORD *)v13 = *((_DWORD *)this + 20);
  *(_QWORD *)(v13 + 4) = 0;
  *(_DWORD *)(v13 + 11) = 0;
  *((_QWORD *)this + 2) += 18;
  if (*((_QWORD *)this + 6))
  {
    v15 = 0;
    v16 = 1;
    do
    {
      v19[0] = "$R{0:X-6}";
      v19[1] = 9;
      v19[2] = &v22;
      v19[3] = 1;
      v20 = &unk_1E816A230;
      v21 = (v16 - 1) & 0xFFFFFF;
      v22 = &v20;
      v23 = &off_1E81A7280;
      v32 = v34;
      v33 = xmmword_1C6464ED0;
      v24 = 0;
      v28 = 0;
      v29 = 0;
      v31 = (void **)&v32;
      v30 = 0;
      v26 = 0;
      v27 = 0;
      v25 = 0;
      sub_1C639D338((uint64_t)v19, (llvm::raw_ostream *)&v23);
      v23 = (uint64_t (**)())off_1E81A6E70;
      if (v30 == 1 && v25)
        MEMORY[0x1CAA32F9C](v25, 0x1000C8077774924);
      v17 = *((_QWORD *)this + 1) + *((_QWORD *)this + 2);
      memcpy((void *)v17, v32, v33);
      *(_DWORD *)(v17 + 8) = *(_DWORD *)(*((_QWORD *)this + 16) + 4 * v15);
      *(_DWORD *)(v17 + 12) = 2;
      *(_WORD *)(v17 + 16) = 3;
      *((_QWORD *)this + 2) += 18;
      if (v32 != v34)
        free(v32);
      v15 = v16;
    }
    while (*((_QWORD *)this + 6) > (unint64_t)v16++);
  }
}

uint64_t llvm::object::WindowsResourceCOFFWriter::writeStringTable(uint64_t this)
{
  *(_DWORD *)(*(_QWORD *)(this + 8) + *(_QWORD *)(this + 16)) = 0;
  return this;
}

void llvm::object::WindowsResourceCOFFWriter::writeDirectoryTree(llvm::object::WindowsResourceCOFFWriter *this)
{
  uint64_t v2;
  int v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  void **v47;
  void **v48;
  unint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;

  v55 = 0u;
  v56 = 0u;
  *(_OWORD *)__p = 0u;
  v53 = *((_QWORD *)this + 4);
  sub_1C5A18554((uint64_t)__p, &v53);
  v2 = *((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 8 * (*(_DWORD *)(*((_QWORD *)this + 4) + 56) + *(_DWORD *)(*((_QWORD *)this + 4) + 32)) + 16;
    do
    {
      v8 = (char *)__p[1];
      v9 = v56;
      v10 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v56 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v56 & 0x1FF));
      *(_QWORD *)&v56 = v56 + 1;
      *((_QWORD *)&v56 + 1) = v2 - 1;
      if ((unint64_t)v56 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = v8 + 8;
        *(_QWORD *)&v56 = v9 - 511;
      }
      v11 = *((_QWORD *)this + 1) + *((_QWORD *)this + 2);
      *(_DWORD *)v11 = *(_DWORD *)(v10 + 68);
      *(_DWORD *)(v11 + 4) = 0;
      *(_WORD *)(v11 + 8) = *(_WORD *)(v10 + 64);
      *(_WORD *)(v11 + 10) = *(_WORD *)(v10 + 66);
      *(_WORD *)(v11 + 12) = *(_QWORD *)(v10 + 56);
      *(_WORD *)(v11 + 14) = *(_QWORD *)(v10 + 32);
      v12 = *((_QWORD *)this + 2) + 16;
      *((_QWORD *)this + 2) = v12;
      v3 += 16;
      v13 = *(_QWORD **)(v10 + 40);
      v52 = v10;
      v14 = (_QWORD *)(v10 + 48);
      if (v13 != (_QWORD *)(v10 + 48))
      {
        do
        {
          v15 = (unsigned int *)(*((_QWORD *)this + 1) + v12);
          *v15 = *(_DWORD *)(*((_QWORD *)this + 13) + 4 * *(unsigned int *)(v13[7] + 4)) | 0x80000000;
          if (*(_BYTE *)v13[7])
          {
            v15[1] = v7;
            v7 += 16;
            v16 = v13[7];
            if (v5 >= v4)
            {
              v17 = (v5 - v6) >> 3;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 61)
LABEL_79:
                abort();
              if ((v4 - v6) >> 2 > v18)
                v18 = (v4 - v6) >> 2;
              if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8)
                v19 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v19 = v18;
              if (v19)
              {
                if (v19 >> 61)
LABEL_80:
                  sub_1C4764EE4();
                v20 = (char *)operator new(8 * v19);
              }
              else
              {
                v20 = 0;
              }
              v21 = &v20[8 * v17];
              *(_QWORD *)v21 = v16;
              v22 = v21 + 8;
              if (v5 != v6)
              {
                do
                {
                  v23 = *((_QWORD *)v5 - 1);
                  v5 -= 8;
                  *((_QWORD *)v21 - 1) = v23;
                  v21 -= 8;
                }
                while (v5 != v6);
                v5 = v6;
              }
              v6 = v21;
              v4 = &v20[8 * v19];
              if (v5)
                operator delete(v5);
              v5 = v22;
            }
            else
            {
              *(_QWORD *)v5 = v16;
              v5 += 8;
            }
          }
          else
          {
            v15[1] = v7 ^ 0x80000000;
            v7 += 8 * (*(_DWORD *)(v13[7] + 32) + *(_DWORD *)(v13[7] + 56)) + 16;
            v53 = v13[7];
            sub_1C5A18554((uint64_t)__p, &v53);
          }
          v12 = *((_QWORD *)this + 2) + 8;
          *((_QWORD *)this + 2) = v12;
          v24 = (_QWORD *)v13[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v13[2];
              v26 = *v25 == (_QWORD)v13;
              v13 = v25;
            }
            while (!v26);
          }
          v3 += 8;
          v13 = v25;
        }
        while (v25 != v14);
      }
      v27 = *(_QWORD **)(v52 + 16);
      if (v27 != (_QWORD *)(v52 + 24))
      {
        do
        {
          v28 = (_DWORD *)(*((_QWORD *)this + 1) + v12);
          *v28 = *((_DWORD *)v27 + 8);
          if (*(_BYTE *)v27[5])
          {
            v28[1] = v7;
            v7 += 16;
            v29 = v27[5];
            if (v5 >= v4)
            {
              v30 = (v5 - v6) >> 3;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 61)
                goto LABEL_79;
              if ((v4 - v6) >> 2 > v31)
                v31 = (v4 - v6) >> 2;
              if ((unint64_t)(v4 - v6) >= 0x7FFFFFFFFFFFFFF8)
                v32 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v32 = v31;
              if (v32)
              {
                if (v32 >> 61)
                  goto LABEL_80;
                v33 = (char *)operator new(8 * v32);
              }
              else
              {
                v33 = 0;
              }
              v34 = &v33[8 * v30];
              *(_QWORD *)v34 = v29;
              v35 = v34 + 8;
              if (v5 != v6)
              {
                do
                {
                  v36 = *((_QWORD *)v5 - 1);
                  v5 -= 8;
                  *((_QWORD *)v34 - 1) = v36;
                  v34 -= 8;
                }
                while (v5 != v6);
                v5 = v6;
              }
              v6 = v34;
              v4 = &v33[8 * v32];
              if (v5)
                operator delete(v5);
              v5 = v35;
            }
            else
            {
              *(_QWORD *)v5 = v29;
              v5 += 8;
            }
          }
          else
          {
            v28[1] = v7 ^ 0x80000000;
            v7 += 8 * (*(_DWORD *)(v27[5] + 32) + *(_DWORD *)(v27[5] + 56)) + 16;
            v53 = v27[5];
            sub_1C5A18554((uint64_t)__p, &v53);
          }
          v12 = *((_QWORD *)this + 2) + 8;
          *((_QWORD *)this + 2) = v12;
          v37 = (_QWORD *)v27[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v27[2];
              v26 = *v38 == (_QWORD)v27;
              v27 = v38;
            }
            while (!v26);
          }
          v3 += 8;
          v27 = v38;
        }
        while (v38 != (_QWORD *)(v52 + 24));
      }
      v2 = *((_QWORD *)&v56 + 1);
    }
    while (*((_QWORD *)&v56 + 1));
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v3 = 0;
  }
  v39 = *((_QWORD *)this + 19);
  v40 = *((_QWORD *)this + 6);
  v41 = (*((_QWORD *)this + 20) - v39) >> 2;
  if (v40 <= v41)
  {
    if (v40 < v41)
      *((_QWORD *)this + 20) = v39 + 4 * v40;
  }
  else
  {
    sub_1C4D63CD0((char **)this + 19, v40 - v41);
  }
  if (v6 != v5)
  {
    v42 = *((_QWORD *)this + 2);
    v43 = v6;
    do
    {
      v44 = *(_QWORD *)v43;
      v43 += 8;
      v45 = *((_QWORD *)this + 1) + v42;
      *(_DWORD *)(*((_QWORD *)this + 19) + 4 * *(unsigned int *)(v44 + 8)) = v3;
      *(_DWORD *)v45 = 0;
      v46 = (_DWORD *)(*((_QWORD *)this + 5) + 24 * *(unsigned int *)(v44 + 8));
      LODWORD(v46) = v46[2] - *v46;
      *(_QWORD *)(v45 + 8) = 0;
      *(_DWORD *)(v45 + 4) = (_DWORD)v46;
      v42 = *((_QWORD *)this + 2) + 16;
      *((_QWORD *)this + 2) = v42;
      v3 += 16;
    }
    while (v43 != v5);
  }
  if (v6)
    operator delete(v6);
  v47 = (void **)__p[1];
  v48 = (void **)v55;
  v49 = v55 - (unint64_t)__p[1];
  if ((unint64_t)v55 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      v50 = *v47++;
      operator delete(v50);
      v49 -= 8;
    }
    while (v49 > 0x10);
  }
  while (v47 != v48)
  {
    v51 = *v47++;
    operator delete(v51);
  }
  if (__p[0])
    operator delete(__p[0]);
}

_QWORD *llvm::object::WindowsResourceCOFFWriter::writeDirectoryStringTable(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9;

  v1 = (uint64_t)this;
  v2 = this[12];
  if (v2)
  {
    LODWORD(v3) = 0;
    v4 = this[2];
    v5 = 24 * v2;
    v6 = (const void **)(this[11] + 8);
    do
    {
      v7 = (_BYTE *)*v6 - (_BYTE *)*(v6 - 1);
      *(_WORD *)(*(_QWORD *)(v1 + 8) + v4) = v7 >> 1;
      v8 = *(_QWORD *)(v1 + 16) + 2;
      *(_QWORD *)(v1 + 16) = v8;
      v9 = *(v6 - 1);
      if (*v6 != v9)
      {
        this = memmove((void *)(*(_QWORD *)(v1 + 8) + v8), v9, (_BYTE *)*v6 - (_BYTE *)v9);
        v8 = *(_QWORD *)(v1 + 16);
      }
      v4 = v8 + (v7 & 0x1FFFE);
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v3 + (v7 & 0x1FFFE) + 2;
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
    v4 = this[2];
  }
  *(_QWORD *)(v1 + 16) = v4 - v3 + ((v3 + 3) & 0x1FFFFFFFCLL);
  return this;
}

uint64_t llvm::object::WindowsResourceCOFFWriter::writeFirstSectionRelocations(uint64_t this)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_QWORD *)(this + 48))
  {
    v1 = 0;
    v2 = 5;
    v3 = *(_QWORD *)(this + 16);
    do
    {
      v4 = *(_QWORD *)(this + 8) + v3;
      *(_DWORD *)v4 = *(_DWORD *)(*(_QWORD *)(this + 152) + 4 * v1);
      *(_DWORD *)(v4 + 4) = v2;
      v5 = *(_DWORD *)(this + 24);
      if (v5 > 34403)
      {
        if (v5 != 34404)
        {
LABEL_8:
          *(_WORD *)(v4 + 8) = 2;
          goto LABEL_9;
        }
        *(_WORD *)(v4 + 8) = 3;
      }
      else
      {
        if (v5 != 332)
          goto LABEL_8;
        *(_WORD *)(v4 + 8) = 7;
      }
LABEL_9:
      v3 = *(_QWORD *)(this + 16) + 10;
      *(_QWORD *)(this + 16) = v3;
      v1 = (v2 - 4);
      ++v2;
    }
    while (*(_QWORD *)(this + 48) > v1);
  }
  return this;
}

uint64_t llvm::object::writeWindowsResourceCOFF@<X0>(int a1@<W0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v7[13];
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *__p;
  void *v13;

  llvm::object::WindowsResourceCOFFWriter::WindowsResourceCOFFWriter(v7, a1, a2);
  llvm::object::WindowsResourceCOFFWriter::write((llvm::object::WindowsResourceCOFFWriter *)v7, a3, (_QWORD *)a4);
  *(_BYTE *)(a4 + 8) &= ~1u;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  result = v7[0];
  v7[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5A18024(uint64_t a1, llvm::raw_ostream *a2, llvm::raw_ostream *a3, int a4)
{
  llvm::raw_ostream *v4;
  _BYTE *v6;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  std::string __p;

  v4 = a2;
  if (*(_BYTE *)a1)
  {
    memset(&__p, 0, sizeof(__p));
    if (!llvm::convertUTF16ToUTF8String(*(unsigned __int16 **)(a1 + 8), 2 * *(_QWORD *)(a1 + 16), &__p))
      MEMORY[0x1CAA32ABC](&__p, "(failed conversion from UTF16)");
    v6 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 34);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v6 + 1;
      *v6 = 34;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = llvm::raw_ostream::write(v4, (const char *)p_p, size);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      llvm::raw_ostream::write(v9, 34);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 34;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)a3)
  {
    llvm::object::printResourceTypeName((llvm::raw_ostream *)*(unsigned __int16 *)(a1 + 24), a2, a3);
  }
  else
  {
    if (a4)
    {
      v11 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 2)
      {
        *(_BYTE *)(v11 + 2) = 32;
        *(_WORD *)v11 = 17481;
        *((_QWORD *)a2 + 4) += 3;
      }
      else
      {
        v4 = llvm::raw_ostream::write(a2, "ID ", 3uLL);
      }
      v12 = *(unsigned int *)(a1 + 24);
      v13 = v4;
    }
    else
    {
      v12 = *(unsigned int *)(a1 + 24);
      v13 = v4;
    }
    sub_1C5E21910(v13, v12, 0, 0, 0);
  }
}

uint64_t sub_1C5A181A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8189218;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1C5A181E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8189218;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C5A18238(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v7 = (char *)operator new(24 * v5);
  v8 = &v7[24 * v2];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    v14 = v8 + 24;
    *a1 = v8;
    a1[1] = v8 + 24;
    a1[2] = &v7[24 * v5];
    if (!v10)
      return v14;
    goto LABEL_17;
  }
  v11 = &v7[24 * v2];
  do
  {
    v12 = *(_OWORD *)(v10 - 24);
    v10 -= 24;
    *(_OWORD *)(v11 - 24) = v12;
    v11 -= 24;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
  }
  while (v10 != v9);
  v10 = *a1;
  v13 = a1[1];
  v14 = v8 + 24;
  *a1 = v11;
  a1[1] = v8 + 24;
  a1[2] = &v7[24 * v5];
  if (v13 != v10)
  {
    v15 = v13;
    do
    {
      v17 = (void *)*((_QWORD *)v15 - 3);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *((_QWORD *)v13 - 2) = v16;
        operator delete(v16);
      }
      v13 = v15;
    }
    while (v15 != v10);
  }
  if (v10)
LABEL_17:
    operator delete(v10);
  return v14;
}

uint64_t *sub_1C5A18390(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_1C5A183E4(*(char **)(v1 + 48));
    sub_1C5A18434(*(_QWORD **)(v1 + 24));
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C5A183E4(char *a1)
{
  if (a1)
  {
    sub_1C5A183E4(*(_QWORD *)a1);
    sub_1C5A183E4(*((_QWORD *)a1 + 1));
    sub_1C5A18390(a1 + 56);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_1C5A18434(_QWORD *a1)
{
  if (a1)
  {
    sub_1C5A18434(*a1);
    sub_1C5A18434(a1[1]);
    sub_1C5A18390(a1 + 5);
    operator delete(a1);
  }
}

uint64_t **sub_1C5A18474(uint64_t **a1, unsigned int a2, int a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    v12 = *a4;
    *a4 = 0;
    v9[5] = v12;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v9;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    sub_1C4768E74(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_1C5A18554(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  size_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      *(_QWORD *)(a1 + 32) = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      *(_QWORD *)(a1 + 8) = v11;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_33:
        *(_QWORD *)v5 = v12;
        goto LABEL_34;
      }
      v14 = *(char **)a1;
      if ((unint64_t)v11 > *(_QWORD *)a1)
      {
        v15 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
        if (v15 >= -1)
          v16 = v15 + 1;
        else
          v16 = v15 + 2;
        v17 = -(v16 >> 1);
        v18 = v16 >> 1;
        v19 = &v11[-8 * v18];
        v20 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v18], v11, v5 - v11);
          v5 = *(char **)(a1 + 8);
        }
        v21 = &v5[8 * v17];
        v5 = &v19[v20];
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = &v19[v20];
        goto LABEL_33;
      }
      if (v5 == v14)
        v33 = 1;
      else
        v33 = (v5 - v14) >> 2;
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * (v33 >> 2)];
        v37 = v5 - v11;
        v36 = v5 == v11;
        v5 = v35;
        if (!v36)
        {
          v5 = &v35[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = 8 * (v37 >> 3);
          v39 = &v34[8 * (v33 >> 2)];
          do
          {
            v40 = *(_QWORD *)v11;
            v11 += 8;
            *(_QWORD *)v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
        }
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v34[8 * v33];
        if (v14)
        {
          operator delete(v14);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_33;
      }
      goto LABEL_95;
    }
    v22 = *(char **)(a1 + 24);
    v23 = *(char **)a1;
    v24 = (uint64_t)&v22[-*(_QWORD *)a1];
    if (v6 < (unint64_t)v24)
    {
      v25 = operator new(0x1000uLL);
      v26 = v25;
      if (v22 != v5)
      {
        *(_QWORD *)v5 = v25;
LABEL_34:
        *(_QWORD *)(a1 + 16) += 8;
LABEL_35:
        v4 = *(char **)(a1 + 8);
        v8 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 32) + v8;
        goto LABEL_36;
      }
      if (v4 == v23)
      {
        if (v5 == v4)
          v59 = 1;
        else
          v59 = (v22 - v4) >> 2;
        if (v59 >> 61)
          goto LABEL_95;
        v60 = (char *)operator new(8 * v59);
        v41 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
        v61 = v41;
        if (v5 != v4)
        {
          v61 = &v41[v6 & 0xFFFFFFFFFFFFFFF8];
          v62 = 8 * (v6 >> 3);
          v63 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
          v64 = v4;
          do
          {
            v65 = *(_QWORD *)v64;
            v64 += 8;
            *(_QWORD *)v63 = v65;
            v63 += 8;
            v62 -= 8;
          }
          while (v62);
        }
        *(_QWORD *)a1 = v60;
        *(_QWORD *)(a1 + 8) = v41;
        *(_QWORD *)(a1 + 16) = v61;
        *(_QWORD *)(a1 + 24) = &v60[8 * v59];
        if (v4)
        {
          operator delete(v4);
          v41 = *(char **)(a1 + 8);
        }
      }
      else
      {
        v41 = v4;
      }
      *((_QWORD *)v41 - 1) = v26;
      v66 = *(char **)(a1 + 8);
      v67 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v66 - 8;
      v68 = *((_QWORD *)v66 - 1);
      *(_QWORD *)(a1 + 8) = v66;
      if (v67 == *(char **)(a1 + 24))
      {
        v69 = *(char **)a1;
        if ((unint64_t)v66 <= *(_QWORD *)a1)
        {
          if (v67 == v69)
            v76 = 1;
          else
            v76 = (v67 - v69) >> 2;
          if (v76 >> 61)
            goto LABEL_95;
          v77 = (char *)operator new(8 * v76);
          v78 = &v77[8 * (v76 >> 2)];
          v79 = v67 - v66;
          v36 = v67 == v66;
          v67 = v78;
          if (!v36)
          {
            v67 = &v78[v79 & 0xFFFFFFFFFFFFFFF8];
            v80 = 8 * (v79 >> 3);
            v81 = &v77[8 * (v76 >> 2)];
            do
            {
              v82 = *(_QWORD *)v66;
              v66 += 8;
              *(_QWORD *)v81 = v82;
              v81 += 8;
              v80 -= 8;
            }
            while (v80);
          }
          *(_QWORD *)a1 = v77;
          *(_QWORD *)(a1 + 8) = v78;
          *(_QWORD *)(a1 + 16) = v67;
          *(_QWORD *)(a1 + 24) = &v77[8 * v76];
          if (v69)
          {
            operator delete(v69);
            v67 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v70 = (uint64_t)&v66[-*(_QWORD *)a1] >> 3;
          if (v70 >= -1)
            v71 = v70 + 1;
          else
            v71 = v70 + 2;
          v72 = -(v71 >> 1);
          v73 = v71 >> 1;
          v74 = &v66[-8 * v73];
          v75 = v67 - v66;
          if (v75)
          {
            memmove(&v66[-8 * v73], v66, v75);
            v66 = *(char **)(a1 + 8);
          }
          v67 = &v74[v75];
          *(_QWORD *)(a1 + 8) = &v66[8 * v72];
          *(_QWORD *)(a1 + 16) = v67;
        }
      }
      *(_QWORD *)v67 = v68;
      goto LABEL_34;
    }
    v27 = v24 >> 2;
    if (v22 == v23)
      v28 = 1;
    else
      v28 = v27;
    if (v28 >> 61)
LABEL_95:
      sub_1C4764EE4();
    v29 = (char *)operator new(8 * v28);
    v30 = &v29[v6];
    v31 = &v29[8 * v28];
    v32 = operator new(0x1000uLL);
    if (v28 == v6 >> 3)
    {
      if (v6 < 1)
      {
        if (v5 == v4)
          v42 = 1;
        else
          v42 = v6 >> 2;
        if (v42 >> 61)
          goto LABEL_95;
        v43 = (char *)operator new(8 * v42);
        v30 = &v43[8 * (v42 >> 2)];
        v31 = &v43[8 * v42];
        operator delete(v29);
        v4 = *(char **)(a1 + 8);
        v5 = *(char **)(a1 + 16);
        v29 = v43;
      }
      else
      {
        v30 -= (4 * v28 + 4) & 0xFFFFFFFFFFFFFFF8;
      }
    }
    *(_QWORD *)v30 = v32;
    v44 = v30 + 8;
    if (v5 == v4)
    {
      v57 = v30;
      v45 = v30 + 8;
LABEL_66:
      v58 = *(char **)a1;
      *(_QWORD *)a1 = v29;
      *(_QWORD *)(a1 + 8) = v57;
      *(_QWORD *)(a1 + 16) = v45;
      *(_QWORD *)(a1 + 24) = v31;
      if (v58)
        operator delete(v58);
      goto LABEL_35;
    }
    while (1)
    {
      if (v30 == v29)
      {
        if (v44 < v31)
        {
          v47 = (v31 - v44) >> 3;
          if (v47 >= -1)
            v48 = v47 + 1;
          else
            v48 = v47 + 2;
          v45 = &v44[8 * (v48 >> 1)];
          v46 = &v30[8 * (v48 >> 1)];
          if (v44 == v30)
            v30 = v44;
          else
            memmove(&v30[8 * (v48 >> 1)], v30, v44 - v30);
          goto LABEL_62;
        }
        if (v31 == v30)
          v49 = 1;
        else
          v49 = (v31 - v30) >> 2;
        if (v49 >> 61)
          goto LABEL_95;
        v50 = (char *)operator new(8 * v49);
        v29 = v50;
        v46 = &v50[(2 * v49 + 6) & 0xFFFFFFFFFFFFFFF8];
        v45 = v46;
        v51 = v44 - v30;
        if (v44 != v30)
        {
          v45 = &v46[v51 & 0xFFFFFFFFFFFFFFF8];
          v52 = 8 * (v51 >> 3);
          v53 = &v50[(2 * v49 + 6) & 0xFFFFFFFFFFFFFFF8];
          v54 = v30;
          do
          {
            v55 = *(_QWORD *)v54;
            v54 += 8;
            *(_QWORD *)v53 = v55;
            v53 += 8;
            v52 -= 8;
          }
          while (v52);
        }
        v31 = &v50[8 * v49];
        operator delete(v30);
      }
      else
      {
        v45 = v44;
        v46 = v30;
      }
      v30 = v29;
LABEL_62:
      v29 = v30;
      v56 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *((_QWORD *)v46 - 1) = v56;
      v57 = v46 - 8;
      v44 = v45;
      v30 = v57;
      if (v5 == *(char **)(a1 + 8))
        goto LABEL_66;
    }
  }
LABEL_36:
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  *(_QWORD *)(a1 + 40) = v8 + 1;
}

void *llvm::object::XCOFFSectionHeader<llvm::object::XCOFFSectionHeader32>::getName(void *a1)
{
  memchr(a1, 0, 8uLL);
  return a1;
}

uint64_t llvm::object::XCOFFSectionHeader<llvm::object::XCOFFSectionHeader32>::getSectionType(uint64_t a1)
{
  return (unsigned __int16)bswap32(*(_DWORD *)(a1 + 36));
}

BOOL llvm::object::XCOFFSectionHeader<llvm::object::XCOFFSectionHeader32>::isReservedSectionType(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 39) & 7) != 0;
}

void *llvm::object::XCOFFSectionHeader<llvm::object::XCOFFSectionHeader64>::getName(void *a1)
{
  memchr(a1, 0, 8uLL);
  return a1;
}

uint64_t llvm::object::XCOFFSectionHeader<llvm::object::XCOFFSectionHeader64>::getSectionType(uint64_t a1)
{
  return (unsigned __int16)bswap32(*(_DWORD *)(a1 + 64));
}

BOOL llvm::object::XCOFFSectionHeader<llvm::object::XCOFFSectionHeader64>::isReservedSectionType(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 67) & 7) != 0;
}

uint64_t llvm::object::XCOFFRelocation<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>::isRelocationSigned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 7;
}

uint64_t llvm::object::XCOFFRelocation<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>::isFixupIndicated(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 6) & 1;
}

uint64_t llvm::object::XCOFFRelocation<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>::getRelocatedLength(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 8) & 0x3Fu) + 1;
}

uint64_t llvm::object::XCOFFRelocation<llvm::support::detail::packed_endian_specific_integral<unsigned long long,(llvm::support::endianness)0,1ul,1ul>>::isRelocationSigned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12) >> 7;
}

uint64_t llvm::object::XCOFFRelocation<llvm::support::detail::packed_endian_specific_integral<unsigned long long,(llvm::support::endianness)0,1ul,1ul>>::isFixupIndicated(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 12) >> 6) & 1;
}

uint64_t llvm::object::XCOFFRelocation<llvm::support::detail::packed_endian_specific_integral<unsigned long long,(llvm::support::endianness)0,1ul,1ul>>::getRelocatedLength(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 12) & 0x3Fu) + 1;
}

char *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  char *result;
  std::string *v14;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  char *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 40);
  sub_1C62DE2F4((uint64_t)&v35, a1, a2);
  v8 = v36;
  if ((v36 & 1) != 0)
  {
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v10;
      goto LABEL_8;
    }
    v9 = 0;
  }
  else
  {
    v9 = v35;
  }
  v11 = v6 + bswap64(v7);
  v12 = *(_OWORD *)(a1 + 32);
  v32 = *(_OWORD *)(a1 + 16);
  v33 = v12;
  result = (char *)sub_1C599ECDC((unint64_t *)&v32, v11, 14 * v9, v30);
  if (!v30[0])
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v9;
    if ((v8 & 1) == 0)
      return result;
    goto LABEL_8;
  }
  v22 = (char *)v30[0];
  sub_1C61D2548(&v22, &v23);
  v14 = std::string::append(&v23, ": relocations with offset 0x");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = bswap64(*(_QWORD *)(a2 + 40));
  v20 = 14 * v9;
  v21 = v16;
  v26[0] = __p;
  v26[2] = &v21;
  v27 = 3588;
  v28[0] = v26;
  v28[2] = " and size 0x";
  v29 = 770;
  v30[0] = v28;
  v30[2] = &v20;
  v31 = 3586;
  *(_QWORD *)&v32 = v30;
  *(_QWORD *)&v33 = " go past the end of the file";
  v34 = 770;
  v17 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v19 = qword_1EF8F7238[0];
  *(_QWORD *)v17 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v32, (_QWORD *)(v17 + 8));
  *(_QWORD *)(v17 + 32) = 3;
  *(_QWORD *)(v17 + 40) = v19;
  *(_BYTE *)(v17 + 48) = 1;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  result = v22;
  if (v22)
    result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v22 + 8))(v22);
  if ((v36 & 1) != 0)
  {
LABEL_8:
    result = v35;
    if (v35)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v35 + 8))(v35);
  }
  return result;
}

{
  return __ZNK4llvm6object15XCOFFObjectFile11relocationsINS0_20XCOFFSectionHeader64ENS0_17XCOFFRelocation64EEENS_8ExpectedINS_8ArrayRefIT0_EEEERKT_(a1, a2, a3);
}

char *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  char *result;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  char *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_DWORD *)(a2 + 24);
  sub_1C62DE448((uint64_t)&v35, a1, a2);
  v8 = v36;
  if ((v36 & 1) != 0)
  {
    v10 = v35;
    v35 = 0;
    if (v10)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v10;
      goto LABEL_8;
    }
    v9 = 0;
  }
  else
  {
    v9 = v35;
  }
  v11 = v6 + bswap32(v7);
  v12 = *(_OWORD *)(a1 + 32);
  v32 = *(_OWORD *)(a1 + 16);
  v33 = v12;
  result = (char *)sub_1C599ECDC((unint64_t *)&v32, v11, 10 * v9, v30);
  if (!v30[0])
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v9;
    if ((v8 & 1) == 0)
      return result;
    goto LABEL_8;
  }
  v22 = (char *)v30[0];
  sub_1C61D2548(&v22, &v23);
  v14 = std::string::append(&v23, ": relocations with offset 0x");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = bswap32(*(_DWORD *)(a2 + 24));
  v20 = 10 * v9;
  v21 = v16;
  v26[0] = __p;
  v26[2] = &v21;
  v27 = 3588;
  v28[0] = v26;
  v28[2] = " and size 0x";
  v29 = 770;
  v30[0] = v28;
  v30[2] = &v20;
  v31 = 3586;
  *(_QWORD *)&v32 = v30;
  *(_QWORD *)&v33 = " go past the end of the file";
  v34 = 770;
  v17 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v19 = qword_1EF8F7238[0];
  *(_QWORD *)v17 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v32, (_QWORD *)(v17 + 8));
  *(_QWORD *)(v17 + 32) = 3;
  *(_QWORD *)(v17 + 40) = v19;
  *(_BYTE *)(v17 + 48) = 1;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v17;
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  result = v22;
  if (v22)
    result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v22 + 8))(v22);
  if ((v36 & 1) != 0)
  {
LABEL_8:
    result = v35;
    if (v35)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v35 + 8))(v35);
  }
  return result;
}

{
  return __ZNK4llvm6object15XCOFFObjectFile11relocationsINS0_20XCOFFSectionHeader32ENS0_17XCOFFRelocation32EEENS_8ExpectedINS_8ArrayRefIT0_EEEERKT_(a1, a2, a3);
}

uint64_t llvm::object::XCOFFObjectFile::getAdvancedSymbolEntryAddress(llvm::object::XCOFFObjectFile *this, unsigned int a2)
{
  return (uint64_t)this + 18 * a2;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAuxType(llvm::object::XCOFFObjectFile *this, uint64_t a2)
{
  return a2 + 17;
}

uint64_t llvm::object::XCOFFObjectFile::checkSectionAddress(uint64_t this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;

  v3 = a2 - a3;
  if (a2 < a3)
    goto LABEL_7;
  v4 = 40;
  if (*(_DWORD *)(this + 8) == 11)
    v4 = 72;
  if (v3 >= v4 * (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(this + 48) + 2)) >> 16))
  {
LABEL_7:
    v5 = "Section header outside of section header table.";
    goto LABEL_9;
  }
  if (v3 % v4)
  {
    v5 = "Section header pointer does not point to a valid section header.";
LABEL_9:
    llvm::report_fatal_error((llvm *)v5, (const char *)1);
  }
  return this;
}

uint64_t llvm::object::XCOFFObjectFile::getSectionHeaderSize(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11)
    return 72;
  else
    return 40;
}

uint64_t llvm::object::XCOFFObjectFile::getNumberOfSections(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 2)) >> 16;
}

uint64_t llvm::object::XCOFFObjectFile::toSection32(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::object::XCOFFObjectFile::toSection64(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::object::XCOFFObjectFile::toSymbolRef@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  a3[1] = 0;
  a3[2] = 0;
  *a3 = result;
  v3 = 1;
  if (*(_DWORD *)(result + 8) == 11)
    v3 = 2;
  a3[v3] = a2;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::fileHeader32(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t llvm::object::XCOFFObjectFile::fileHeader64(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t llvm::object::XCOFFObjectFile::auxiliaryHeader32(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::object::XCOFFObjectFile::auxiliaryHeader64(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::object::XCOFFObjectFile::sectionHeaderTable32(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::sectionHeaderTable64(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::getStringTable(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 11);
}

void llvm::object::XCOFFObjectFile::getCFileName(unsigned int *__s@<X1>, llvm::object::XCOFFObjectFile *a2@<X0>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  uint64_t v6;

  if (*__s)
  {
    v5 = memchr(__s, 0, 8uLL);
    v6 = v5 - (_BYTE *)__s;
    *(_BYTE *)(a3 + 16) &= ~1u;
    if (!v5)
      v6 = 8;
    *(_QWORD *)a3 = __s;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    llvm::object::XCOFFObjectFile::getStringTableEntry(a2, bswap32(__s[1]), a3);
  }
}

BOOL llvm::object::XCOFFSymbolRef::isCsectSymbol(llvm::object::XCOFFSymbolRef *this)
{
  uint64_t v1;
  int v2;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 16);
  result = 1;
  if (v2 != 2 && v2 != 107)
    return v2 == 111;
  return result;
}

void llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef(llvm::object::XCOFFSymbolRef *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[2];
  const char *v21;
  uint64_t v22;
  __int16 v23;
  _QWORD v24[2];
  unint64_t v25;
  __int16 v26;
  _QWORD *v27;
  unint64_t v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  if (!v4)
    v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 17);
  llvm::object::XCOFFSymbolRef::getName(this, (uint64_t)&v30);
  v6 = v32;
  if ((v32 & 1) != 0)
  {
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v7;
      return;
    }
  }
  v9 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  v10 = v8;
  if (!v8)
    v10 = *((_QWORD *)this + 2);
  v11 = (v10 - *(_QWORD *)(v9 + 72)) / 0x12uLL;
  if (!v5)
  {
    v19 = 1283;
    v18[0] = "csect symbol \"";
    v18[2] = v30;
    v18[3] = v31;
    v20[0] = v18;
    v21 = "\" with index ";
    v14 = 770;
    v23 = 770;
    v24[0] = v20;
    v25 = v11;
    v26 = 2050;
    v27 = v24;
    v28 = (unint64_t)" contains no auxiliary entry";
LABEL_16:
    v29 = v14;
    v15 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v17 = qword_1EF8F7238[0];
    *(_QWORD *)v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v27, (_QWORD *)(v15 + 8));
    *(_QWORD *)(v15 + 32) = 3;
    *(_QWORD *)(v15 + 40) = v17;
    *(_BYTE *)(v15 + 48) = 1;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v15;
    if ((v6 & 1) == 0)
      return;
LABEL_25:
    if (v30)
      (*(void (**)(const char *))(*(_QWORD *)v30 + 8))(v30);
    return;
  }
  if (*(_DWORD *)(v9 + 8) != 11)
  {
    if (!v8)
      v8 = *((_QWORD *)this + 2);
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v8 + 18 * v5;
    *(_QWORD *)(a2 + 8) = 0;
    if ((v6 & 1) == 0)
      return;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = *((_QWORD *)this + 1);
    if (!v8)
      v12 = *((_QWORD *)this + 2);
    v13 = v12 + 18 * v5;
    if (*(unsigned __int8 *)(v13 + 17) == 251)
      break;
    LOBYTE(v5) = v5 - 1;
    if (!(_BYTE)v5)
    {
      v23 = 1283;
      v20[0] = "a csect auxiliary entry has not been found for symbol \"";
      v21 = v30;
      v22 = v31;
      v24[0] = v20;
      v25 = (unint64_t)"\" with index ";
      v26 = 770;
      v27 = v24;
      v28 = v11;
      v14 = 2050;
      goto LABEL_16;
    }
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v13;
  if ((v6 & 1) != 0)
    goto LABEL_25;
}

BOOL llvm::object::XCOFFObjectFile::is64Bit(llvm::object::XCOFFObjectFile *this)
{
  return *((_DWORD *)this + 2) == 11;
}

BOOL llvm::object::XCOFFObjectFile::isReservedSectionNumber(llvm::object::XCOFFObjectFile *this)
{
  return ((_DWORD)this + 2) < 3;
}

_BYTE *llvm::object::XCOFFObjectFile::getSectionName@<X0>(void *__s@<X1>, uint64_t a2@<X8>)
{
  _BYTE *result;
  uint64_t v5;

  result = memchr(__s, 0, 8uLL);
  v5 = result - (_BYTE *)__s;
  *(_BYTE *)(a2 + 16) &= ~1u;
  if (!result)
    v5 = 8;
  *(_QWORD *)a2 = __s;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSectionNameInternal(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *llvm::object::XCOFFObjectFile::getSectionContents@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v15;
  char *v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _OWORD v28[2];
  char *v29;
  unint64_t v30;
  unint64_t v31;

  result = (_QWORD *)(*(uint64_t (**)(_OWORD *))(*(_QWORD *)a1 + 216))(a1);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    if (*((_DWORD *)a1 + 2) == 11)
      v7 = bswap64(*(_QWORD *)(a2 + 32));
    else
      v7 = bswap32(*(_DWORD *)(a2 + 20));
    v31 = v7;
    v8 = *((_QWORD *)a1 + 2) + v7;
    v9 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2);
    v30 = v9;
    v10 = a1[2];
    v28[0] = a1[1];
    v28[1] = v10;
    result = sub_1C599ECDC((unint64_t *)v28, v8, v9, &v29);
    if (v29)
    {
      v16 = v29;
      v29 = 0;
      sub_1C61D2548(&v16, &v17);
      v11 = std::string::append(&v17, ": section data with offset 0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v19 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v20[0] = __p;
      v20[2] = &v31;
      v21 = 3588;
      v22[0] = v20;
      v22[2] = " and size 0x";
      v23 = 770;
      v24[0] = v22;
      v24[2] = &v30;
      v25 = 3586;
      v26[0] = v24;
      v26[2] = " goes past the end of the file";
      v27 = 770;
      v13 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v15 = qword_1EF8F7238[0];
      *(_QWORD *)v13 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v26, (_QWORD *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 3;
      *(_QWORD *)(v13 + 40) = v15;
      *(_BYTE *)(v13 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v13;
      if (SHIBYTE(v19) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (v16)
        (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
      result = v29;
      if (v29)
        return (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v29 + 8))(v29);
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  return result;
}

_QWORD *llvm::object::XCOFFObjectFile::getLoaderSectionAddress@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  char *v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  _OWORD v32[2];
  char *v33;
  unint64_t v34;
  unint64_t v35;

  v3 = this[8];
  v4 = this[6];
  if (*((_DWORD *)this + 2) == 11)
  {
    v5 = *(unsigned __int16 *)(v4 + 2);
    if (v5)
    {
      v6 = v3 + 32;
      v7 = 72 * __rev16(v5);
      while (*(unsigned __int16 *)(v6 + 34) << 16 != 0x100000)
      {
        v6 += 72;
        v7 -= 72;
        if (!v7)
          goto LABEL_17;
      }
      v11 = bswap64(*(_QWORD *)v6);
      v35 = v11;
      v12 = bswap64(*(_QWORD *)(v6 - 8));
      goto LABEL_14;
    }
LABEL_17:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
    return this;
  }
  v8 = *(unsigned __int16 *)(v4 + 2);
  if (!v8)
    goto LABEL_17;
  v9 = v3 + 20;
  v10 = 40 * __rev16(v8);
  while (*(unsigned __int16 *)(v9 + 18) << 16 != 0x100000)
  {
    v9 += 40;
    v10 -= 40;
    if (!v10)
      goto LABEL_17;
  }
  v11 = bswap32(*(_DWORD *)v9);
  v35 = v11;
  v12 = bswap32(*(_DWORD *)(v9 - 4));
LABEL_14:
  v34 = v12;
  if (!v12)
    goto LABEL_17;
  v13 = this[2] + v11;
  v14 = *((_OWORD *)this + 2);
  v32[0] = *((_OWORD *)this + 1);
  v32[1] = v14;
  this = sub_1C599ECDC((unint64_t *)v32, v13, v12, &v33);
  if (v33)
  {
    v20 = v33;
    v33 = 0;
    sub_1C61D2548(&v20, &v21);
    v15 = std::string::append(&v21, ": loader section with offset 0x");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v23 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v24[0] = __p;
    v24[2] = &v35;
    v25 = 3588;
    v26[0] = v24;
    v26[2] = " and size 0x";
    v27 = 770;
    v28[0] = v26;
    v28[2] = &v34;
    v29 = 3586;
    v30[0] = v28;
    v30[2] = " goes past the end of the file";
    v31 = 770;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v30, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v17;
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (v20)
      (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
    this = v33;
    if (v33)
      return (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v33 + 8))(v33);
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = v13;
  }
  return this;
}

uint64_t llvm::object::XCOFFObjectFile::sections64(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::sections32(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::getSectionFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 36;
  if (*(_DWORD *)(a1 + 8) == 11)
    v2 = 64;
  return bswap32(*(_DWORD *)(a2 + v2));
}

uint64_t llvm::object::XCOFFObjectFile::moveRelocationNext(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 8) == 11)
    v2 = *a2 + 14;
  else
    v2 = *a2 + 10;
  *a2 = v2;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationSymbol(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  if (*(_DWORD *)(a1 + 8) == 11)
  {
    v2 = bswap32(*(_DWORD *)(a2 + 8));
    v3 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 48) + 20));
  }
  else
  {
    v2 = bswap32(*(_DWORD *)(a2 + 4));
    v4 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 48) + 12));
    v3 = v4 & ~(v4 >> 31);
  }
  if (v2 >= v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  else
    return *(_QWORD *)(a1 + 72) + 18 * v2;
}

uint64_t llvm::object::XCOFFObjectFile::getNumberOfSymbolTableEntries64(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(_DWORD *)(*((_QWORD *)this + 6) + 20));
}

uint64_t llvm::object::XCOFFObjectFile::getLogicalNumberOfSymbolTableEntries32(llvm::object::XCOFFObjectFile *this)
{
  int v1;

  v1 = bswap32(*(_DWORD *)(*((_QWORD *)this + 6) + 12));
  return v1 & ~(v1 >> 31);
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolEntryAddressByIndex(llvm::object::XCOFFObjectFile *this, unsigned int a2)
{
  return *((_QWORD *)this + 9) + 18 * a2;
}

uint64_t llvm::object::XCOFFObjectFile::symbol_end(llvm::object::XCOFFObjectFile *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;

  v1 = *((_QWORD *)this + 6);
  if (*((_DWORD *)this + 2) == 11)
  {
    v2 = bswap32(*(_DWORD *)(v1 + 20));
  }
  else
  {
    v3 = bswap32(*(_DWORD *)(v1 + 12));
    v2 = v3 & ~(v3 >> 31);
  }
  return *((_QWORD *)this + 9) + 18 * v2;
}

uint64_t llvm::object::XCOFFObjectFile::getNumberOfSymbolTableEntries(llvm::object::XCOFFObjectFile *this)
{
  uint64_t v1;
  int v3;

  v1 = *((_QWORD *)this + 6);
  if (*((_DWORD *)this + 2) == 11)
    return bswap32(*(_DWORD *)(v1 + 20));
  v3 = bswap32(*(_DWORD *)(v1 + 12));
  return v3 & ~(v3 >> 31);
}

uint64_t llvm::object::XCOFFObjectFile::getSectionHeaderTableAddress(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

unint64_t llvm::object::XCOFFObjectFile::mapDebugSectionName(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result;
  const char *v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  const char *v21;

  result = a2;
  if (a3 == 5)
  {
    if (*(_DWORD *)a2 == 1953724260 && *(_BYTE *)(a2 + 4) == 114)
    {
      v16 = "debug_str";
    }
    else
    {
      if (*(_DWORD *)a2 != 1869379428 || *(_BYTE *)(a2 + 4) != 99)
      {
        if (*(_DWORD *)a2 != 1634563940 || *(_BYTE *)(a2 + 4) != 99)
          return result;
        v20 = "debug_macinfo";
LABEL_62:
        v18 = v20;
        v19 = (unint64_t)v20 & 0xFFFFFFFFFFFFFF00;
        return v18 | v19;
      }
      v16 = "debug_loc";
    }
    v18 = v16;
    v19 = (unint64_t)v16 & 0xFFFFFFFFFFFFFF00;
    return v18 | v19;
  }
  if (a3 != 7)
  {
    if (a3 != 6)
      return result;
    if (*(_DWORD *)a2 == 1852405604 && *(_WORD *)(a2 + 4) == 28518)
    {
      v15 = "debug_info";
    }
    else
    {
      if (*(_DWORD *)a2 != 1768716132 || *(_WORD *)(a2 + 4) != 25966)
        return result;
      v15 = "debug_line";
    }
    v18 = v15;
    v19 = (unint64_t)v15 & 0xFFFFFFFFFFFFFF00;
    return v18 | v19;
  }
  if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1936551522)
  {
    v17 = "debug_pubnames";
LABEL_59:
    v18 = v17;
    v19 = (unint64_t)v17 & 0xFFFFFFFFFFFFFF00;
    return v18 | v19;
  }
  if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1887007842)
  {
    v17 = "debug_pubtypes";
    goto LABEL_59;
  }
  if (*(_DWORD *)a2 == 1918990180 && *(_DWORD *)(a2 + 3) == 1701277298)
  {
    v20 = "debug_aranges";
    goto LABEL_62;
  }
  if (*(_DWORD *)a2 == 1650554724 && *(_DWORD *)(a2 + 3) == 1986359906)
  {
    v21 = "debug_abbrev";
LABEL_65:
    v18 = v21;
    v19 = (unint64_t)v21 & 0xFFFFFFFFFFFFFF00;
    return v18 | v19;
  }
  if (*(_DWORD *)a2 == 1852995428 && *(_DWORD *)(a2 + 3) == 1936025454)
  {
    v21 = "debug_ranges";
    goto LABEL_65;
  }
  if (*(_DWORD *)a2 == 1919317860 && *(_DWORD *)(a2 + 3) == 1701667186)
  {
    v18 = (unint64_t)"debug_frame" & 0xFF;
    v19 = (unint64_t)"debug_frame" & 0xFFFFFFFFFFFFFF00;
    return v18 | v19;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getFileHeaderSize(llvm::object::XCOFFObjectFile *this)
{
  if (*((_DWORD *)this + 2) == 11)
    return 24;
  else
    return 20;
}

_QWORD *llvm::object::XCOFFObjectFile::getRawData@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, const std::string::value_type *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  _QWORD *result;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  std::string v22;
  std::string v23;
  std::string v24;
  void *__p[2];
  std::string::size_type v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  _OWORD v35[2];
  char *v36;
  unint64_t v37;

  v37 = a3;
  v9 = *(_OWORD *)(a1 + 32);
  v35[0] = *(_OWORD *)(a1 + 16);
  v35[1] = v9;
  result = sub_1C599ECDC((unint64_t *)v35, a2, a3, &v36);
  if (v36)
  {
    v21 = v36;
    v36 = 0;
    sub_1C61D2548(&v21, &v22);
    v11 = std::string::append(&v22, ": ");
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v23, a4);
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v24, " data with offset 0x");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v26 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v20 = a2;
    v27[0] = __p;
    v27[2] = &v20;
    v28 = 3588;
    v29[0] = v27;
    v29[2] = " and size 0x";
    v30 = 770;
    v31[0] = v29;
    v31[2] = &v37;
    v32 = 3586;
    v33[0] = v31;
    v33[2] = " goes past the end of the file";
    v34 = 770;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (v21)
      (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
    result = v36;
    if (v36)
      return (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v36 + 8))(v36);
  }
  else
  {
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = a2;
    *(_QWORD *)(a5 + 8) = a3;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getMagic(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(**((unsigned __int16 **)this + 6)) >> 16;
}

void llvm::object::XCOFFObjectFile::getSymbolSectionName(llvm::object::XCOFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  const char *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  void *__s;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    v4 = *(_QWORD *)(a2 + 16);
  v5 = bswap32(*(unsigned __int16 *)(v4 + 12));
  v6 = v5 >> 16;
  if (!(v5 >> 16))
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    v7 = "N_UNDEF";
    goto LABEL_8;
  }
  if (v6 == -1)
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    v7 = "N_ABS";
    v8 = 5;
    goto LABEL_10;
  }
  if (v6 == -2)
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    v7 = "N_DEBUG";
LABEL_8:
    v8 = 7;
LABEL_10:
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
    return;
  }
  llvm::object::XCOFFObjectFile::getSectionByNum(a1, SHIWORD(v5), (uint64_t)&__s);
  if ((v13 & 1) != 0)
  {
    v9 = __s;
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  else
  {
    v9 = __s;
    v10 = memchr(__s, 0, 8uLL);
    v11 = v10 - v9;
    if (!v10)
      v11 = 8;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = v11;
  }
  *(_QWORD *)a3 = v9;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolSectionID(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 == 11;
  if (v2 == 11)
    v4 = 0;
  else
    v4 = a2;
  if (v3)
    v5 = a2;
  else
    v5 = 0;
  if (!v4)
    v4 = v5;
  return ((int)bswap32(*(unsigned __int16 *)(v4 + 12)) >> 16);
}

uint64_t llvm::object::XCOFFObjectFile::getTimeStamp(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(_DWORD *)(*((_QWORD *)this + 6) + 4));
}

uint64_t llvm::object::XCOFFObjectFile::getOptionalHeaderSize(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 16)) >> 16;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolTableOffset32(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(_DWORD *)(*((_QWORD *)this + 6) + 8));
}

uint64_t llvm::object::XCOFFObjectFile::getRawNumberOfSymbolTableEntries32(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(_DWORD *)(*((_QWORD *)this + 6) + 12));
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolTableOffset64(llvm::object::XCOFFObjectFile *this)
{
  return bswap64(*(_QWORD *)(*((_QWORD *)this + 6) + 8));
}

uint64_t llvm::object::XCOFFObjectFile::getEndOfSymbolTableAddress(llvm::object::XCOFFObjectFile *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;

  v1 = *((_QWORD *)this + 6);
  if (*((_DWORD *)this + 2) == 11)
  {
    v2 = bswap32(*(_DWORD *)(v1 + 20));
  }
  else
  {
    v3 = bswap32(*(_DWORD *)(v1 + 12));
    v2 = v3 & ~(v3 >> 31);
  }
  return *((_QWORD *)this + 9) + 18 * v2;
}

uint64_t llvm::object::XCOFFObjectFile::checkSymbolEntryPointer(uint64_t this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;

  v2 = *(_QWORD *)(this + 72);
  if (v2 > a2
    || ((v3 = *(_QWORD *)(this + 48), *(_DWORD *)(this + 8) != 11)
      ? (v5 = bswap32(*(_DWORD *)(v3 + 12)), v4 = v5 & ~(v5 >> 31))
      : (v4 = bswap32(*(_DWORD *)(v3 + 20))),
        v2 + 18 * v4 <= a2))
  {
    v6 = "Symbol table entry is outside of symbol table.";
    goto LABEL_10;
  }
  if (__ROR8__(0x8E38E38E38E38E39 * (a2 - v2), 1) >= 0xE38E38E38E38E39uLL)
  {
    v6 = "Symbol table entry position is not valid inside of symbol table.";
LABEL_10:
    llvm::report_fatal_error((llvm *)v6, (const char *)1);
  }
  return this;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolIndex(llvm::object::XCOFFObjectFile *this, uint64_t a2)
{
  return (a2 - *((_QWORD *)this + 9)) / 0x12uLL;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t result;
  char *v8;
  _QWORD v9[3];
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = a1;
  v2 = 1;
  if (*(_DWORD *)(a1 + 8) == 11)
  {
    v2 = 2;
    v3 = a2;
  }
  else
  {
    v3 = 0;
  }
  if (*(_DWORD *)(a1 + 8) == 11)
    v4 = 0;
  else
    v4 = a2;
  v9[v2] = a2;
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 2 || v6 == 111 || (result = 0, v6 == 107))
  {
    llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v9, (uint64_t)&v12);
    if ((v14 & 1) != 0)
    {
      v10 = v12;
      sub_1C4D62BD4(&v10, &v11);
      if (v10)
        (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
    }
    else
    {
      if (v12)
        v8 = v12;
      else
        v8 = v13;
      if ((v8[10] & 5) == 1)
      {
        if (v12)
          return bswap32(*(_DWORD *)v12);
        else
          return bswap64(*((unsigned int *)v13 + 3) | ((unint64_t)*(unsigned int *)v13 << 32));
      }
    }
    return 0;
  }
  return result;
}

void llvm::object::XCOFFObjectFile::getSymbolNameByIndex(llvm::object::XCOFFObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v4 = *((_QWORD *)this + 6);
  if (*((_DWORD *)this + 2) == 11)
  {
    v5 = bswap32(*(_DWORD *)(v4 + 20));
  }
  else
  {
    v6 = bswap32(*(_DWORD *)(v4 + 12));
    v5 = v6 & ~(v6 >> 31);
  }
  if (v5 <= a2)
  {
    v10[0] = "symbol index ";
    v10[2] = a2;
    v11 = 2051;
    v12[0] = v10;
    v12[2] = " exceeds symbol count ";
    v13 = 770;
    v14[0] = v12;
    v14[2] = v5;
    v15 = 2050;
    v7 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v9 = qword_1EF8F7238[0];
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v14, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = v9;
    *(_BYTE *)(v7 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    (*(void (**)(llvm::object::XCOFFObjectFile *, uint64_t))(*(_QWORD *)this + 72))(this, *((_QWORD *)this + 9) + 18 * a2);
  }
}

uint64_t llvm::object::XCOFFObjectFile::getFlags(llvm::object::XCOFFObjectFile *this)
{
  return bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 18)) >> 16;
}

double llvm::object::XCOFFObjectFile::XCOFFObjectFile(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  double result;

  v4 = *a3;
  v3 = a3[1];
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)a1 = &off_1E818AD48;
  *(_QWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

{
  __int128 v3;
  __int128 v4;
  double result;

  v4 = *a3;
  v3 = a3[1];
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)a1 = &off_1E818AD48;
  *(_QWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

char *llvm::object::XCOFFObjectFile::parseStringTable@<X0>(llvm::object::XCOFFObjectFile *this@<X0>, const llvm::object::XCOFFObjectFile *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  char *result;
  char *v9;
  unsigned int *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  std::string v22;
  void *__p[2];
  std::string::size_type v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  char *v29[4];
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  _OWORD v34[2];
  const llvm::object::XCOFFObjectFile *v35;

  v6 = (char *)this + 16;
  v5 = *((_QWORD *)this + 2);
  v35 = a2;
  v7 = *((_OWORD *)this + 2);
  v34[0] = *((_OWORD *)this + 1);
  v34[1] = v7;
  result = (char *)sub_1C599ECDC((unint64_t *)v34, (unint64_t)a2 + v5, 4uLL, v27);
  v9 = (char *)v27[0];
  if (v27[0])
  {
    v27[0] = 0;
    v29[0] = v9;
    sub_1C4D62BD4(v29, (char **)&v31);
    if (v29[0])
      (*(void (**)(char *))(*(_QWORD *)v29[0] + 8))(v29[0]);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    result = (char *)v27[0];
    if (v27[0])
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v10 = (unsigned int *)((char *)a2 + *(_QWORD *)v6);
    v11 = bswap32(*v10);
    if (v11 > 4)
    {
      v12 = *((_OWORD *)v6 + 1);
      v31 = *(_OWORD *)v6;
      v32 = v12;
      result = (char *)sub_1C599ECDC((unint64_t *)&v31, (unint64_t)v10, v11, v29);
      if (v29[0])
      {
        v21 = v29[0];
        sub_1C61D2548(&v21, &v22);
        v15 = std::string::append(&v22, ": string table with offset 0x");
        v16 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v24 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v25[0] = __p;
        v25[2] = &v35;
        v26 = 3588;
        v27[0] = v25;
        v27[2] = " and size 0x";
        v28 = 770;
        v20 = v11;
        v29[0] = (char *)v27;
        v29[2] = (char *)&v20;
        v30 = 3586;
        *(_QWORD *)&v31 = v29;
        *(_QWORD *)&v32 = " goes past the end of the file";
        v33 = 770;
        v17 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v19 = qword_1EF8F7238[0];
        *(_QWORD *)v17 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v17 + 8));
        *(_QWORD *)(v17 + 32) = 3;
        *(_QWORD *)(v17 + 40) = v19;
        *(_BYTE *)(v17 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v17;
        if (SHIBYTE(v24) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        result = v21;
        if (v21)
          return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
      }
      else if (*((_BYTE *)v10 + (v11 - 1)))
      {
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v14 = qword_1EF8F7238[0];
        result = (char *)operator new();
        *(_QWORD *)result = &off_1E81A0D28;
        *((_QWORD *)result + 1) = 5;
        *((_QWORD *)result + 2) = v14;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = result;
      }
      else
      {
        *(_BYTE *)(a3 + 16) &= ~1u;
        *(_DWORD *)a3 = v11;
        *(_QWORD *)(a3 + 8) = v10;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_DWORD *)a3 = 4;
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  return result;
}

void llvm::object::XCOFFObjectFile::getImportFileTable(llvm::object::XCOFFObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  unint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  char *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  _QWORD v22[2];
  void **v23;
  __int16 v24;
  _QWORD v25[2];
  const char *v26;
  __int16 v27;
  _QWORD v28[2];
  unint64_t *v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  llvm::object::XCOFFObjectFile::getLoaderSectionAddress(this, (uint64_t)&v35);
  if ((v36 & 1) != 0)
  {
    v5 = v35;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v5;
  }
  else if (v35)
  {
    if (*((_DWORD *)this + 2) == 11)
      v4 = bswap64(*(_QWORD *)(v35 + 24));
    else
      v4 = (int)bswap32(*(_DWORD *)(v35 + 20));
    v6 = bswap32(*(_DWORD *)(v35 + 12));
    v34 = v6;
    v7 = *((_OWORD *)this + 2);
    v31 = *((_OWORD *)this + 1);
    v32 = v7;
    v8 = (char *)(v4 + v35);
    sub_1C599ECDC((unint64_t *)&v31, v4 + v35, v6, v28);
    if (v28[0])
    {
      v18 = (char *)v28[0];
      sub_1C61D2548(&v18, &v19);
      v12 = std::string::append(&v19, ": import file table with offset 0x");
      v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v21 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v17 = v8;
      v22[0] = __p;
      v23 = (void **)&v17;
      v24 = 3588;
      v25[0] = v22;
      v26 = " and size 0x";
      v27 = 770;
      v28[0] = v25;
      v29 = &v34;
      v30 = 3586;
      *(_QWORD *)&v31 = v28;
      *(_QWORD *)&v32 = " goes past the end of the file";
      v33 = 770;
      v14 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v16 = qword_1EF8F7238[0];
      *(_QWORD *)v14 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v14 + 8));
      *(_QWORD *)(v14 + 32) = 3;
      *(_QWORD *)(v14 + 40) = v16;
      *(_BYTE *)(v14 + 48) = 1;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v14;
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (v18)
        (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
    }
    else if (v8[v6 - 1])
    {
      __p[0] = v8;
      v22[0] = ": import file name table with offset 0x";
      v23 = __p;
      v24 = 3587;
      v25[0] = v22;
      v26 = " and size 0x";
      v27 = 770;
      v28[0] = v25;
      v29 = &v34;
      v30 = 3586;
      *(_QWORD *)&v31 = v28;
      *(_QWORD *)&v32 = " must end with a null terminator";
      v33 = 770;
      v9 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v11 = qword_1EF8F7238[0];
      *(_QWORD *)v9 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v9 + 8));
      *(_QWORD *)(v9 + 32) = 3;
      *(_QWORD *)(v9 + 40) = v11;
      *(_BYTE *)(v9 + 48) = 1;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v9;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void *llvm::object::XCOFFObjectFile::create@<X0>(int a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  void *result;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  const llvm::object::XCOFFObjectFile *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  int v25;
  const llvm::object::XCOFFObjectFile *v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  unint64_t v33;
  char *v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  unint64_t v39;
  char *v40;
  char *v41;
  std::string v42;
  void *__p[2];
  std::string::size_type v44;
  _QWORD v45[2];
  const llvm::object::XCOFFObjectFile **v46;
  __int16 v47;
  _QWORD v48[2];
  const char *v49;
  __int16 v50;
  _QWORD v51[2];
  unint64_t *v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  const llvm::object::XCOFFObjectFile *v57;
  __int128 v58;
  __int128 v59;
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = a2[1];
  *(_OWORD *)(v6 + 16) = *a2;
  *(_OWORD *)(v6 + 32) = v7;
  *(_DWORD *)(v6 + 8) = a1;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)v6 = &off_1E818AD48;
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  v8 = *(_QWORD *)(v6 + 16);
  v10 = *a2;
  v9 = a2[1];
  v55 = *a2;
  v56 = v9;
  v11 = a2[1];
  if (a1 == 11)
    v12 = 24;
  else
    v12 = 20;
  v58 = v10;
  v59 = v11;
  result = sub_1C599ECDC((unint64_t *)&v58, v8, v12, v51);
  v14 = v51[0];
  if (v51[0])
    goto LABEL_5;
  *(_QWORD *)(v6 + 48) = v8;
  v57 = (const llvm::object::XCOFFObjectFile *)v12;
  if (a1 == 11)
  {
    v15 = *(unsigned __int16 *)(v8 + 16);
    if (!*(_WORD *)(v8 + 16))
    {
      v16 = 0;
      v17 = 24;
      v18 = v8;
LABEL_14:
      v19 = (const llvm::object::XCOFFObjectFile *)(v17 + __rev16(v16));
      v57 = v19;
      v20 = *(unsigned __int16 *)(v18 + 2);
      if (!*(_WORD *)(v18 + 2))
        goto LABEL_22;
      v21 = 72;
      goto LABEL_20;
    }
  }
  else
  {
    v15 = *(unsigned __int16 *)(v8 + 16);
    if (!*(_WORD *)(v8 + 16))
    {
      v22 = 0;
      v17 = 20;
      v18 = v8;
      goto LABEL_18;
    }
  }
  v58 = v55;
  v59 = v56;
  result = sub_1C599ECDC((unint64_t *)&v58, v8 + v12, __rev16(v15), v51);
  v14 = v51[0];
  if (v51[0])
    goto LABEL_5;
  *(_QWORD *)(v6 + 56) = v8 + v12;
  v18 = *(_QWORD *)(v6 + 48);
  v17 = (uint64_t)v57;
  if (*(_DWORD *)(v6 + 8) == 11)
  {
    v16 = *(unsigned __int16 *)(v18 + 16);
    goto LABEL_14;
  }
  v22 = *(unsigned __int16 *)(v18 + 16);
LABEL_18:
  v19 = (const llvm::object::XCOFFObjectFile *)(v17 + __rev16(v22));
  v57 = v19;
  v20 = *(unsigned __int16 *)(v18 + 2);
  if (!*(_WORD *)(v18 + 2))
    goto LABEL_24;
  v21 = 40;
LABEL_20:
  v54 = v21 * (unint64_t)__rev16(v20);
  v58 = v55;
  v59 = v56;
  v23 = (char *)v19 + v8;
  result = sub_1C599ECDC((unint64_t *)&v58, (unint64_t)v19 + v8, v54, v51);
  if (v51[0])
  {
    v41 = (char *)v51[0];
    sub_1C61D2548(&v41, &v42);
    v29 = std::string::append(&v42, ": section headers with offset 0x");
    v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v44 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v45[0] = __p;
    v46 = &v57;
    v47 = 3588;
    v48[0] = v45;
    v49 = " and size 0x";
    v50 = 770;
    v51[0] = v48;
    v52 = &v54;
    v53 = 3586;
    *(_QWORD *)&v58 = v51;
    *(_QWORD *)&v59 = " go past the end of the file";
    v60 = 770;
    v31 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v33 = qword_1EF8F7238[0];
    *(_QWORD *)v31 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v58, (_QWORD *)(v31 + 8));
    *(_QWORD *)(v31 + 32) = 3;
    *(_QWORD *)(v31 + 40) = v33;
    *(_BYTE *)(v31 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v31;
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v34 = v41;
    if (!v41)
      return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_46;
  }
  *(_QWORD *)(v6 + 64) = v23;
  v18 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v6 + 8) == 11)
  {
LABEL_22:
    v24 = *(_DWORD *)(v18 + 20);
    if (v24)
    {
      v25 = bswap32(v24);
      v26 = (const llvm::object::XCOFFObjectFile *)bswap64(*(_QWORD *)(v18 + 8));
LABEL_26:
      v57 = v26;
      v27 = 18 * v25;
      v54 = v27;
      v58 = v55;
      v59 = v56;
      v28 = (unint64_t)v26 + v8;
      sub_1C599ECDC((unint64_t *)&v58, v28, v27, v51);
      if (!v51[0])
      {
        *(_QWORD *)(v6 + 72) = v28;
        v57 = (const llvm::object::XCOFFObjectFile *)((char *)v57 + v27);
        result = llvm::object::XCOFFObjectFile::parseStringTable((llvm::object::XCOFFObjectFile *)v6, v57, (uint64_t)&v58);
        if ((v59 & 1) == 0 || (v14 = v58, *(_QWORD *)&v58 = 0, !v14))
        {
          *(_OWORD *)(v6 + 80) = v58;
          goto LABEL_30;
        }
LABEL_5:
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v14;
        return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      v40 = (char *)v51[0];
      sub_1C61D2548(&v40, &v42);
      v35 = std::string::append(&v42, ": symbol table with offset 0x");
      v36 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v44 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v45[0] = __p;
      v46 = &v57;
      v47 = 3588;
      v48[0] = v45;
      v49 = " and size 0x";
      v50 = 770;
      v51[0] = v48;
      v52 = &v54;
      v53 = 3586;
      *(_QWORD *)&v58 = v51;
      *(_QWORD *)&v59 = " goes past the end of the file";
      v60 = 770;
      v37 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v39 = qword_1EF8F7238[0];
      *(_QWORD *)v37 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v58, (_QWORD *)(v37 + 8));
      *(_QWORD *)(v37 + 32) = 3;
      *(_QWORD *)(v37 + 40) = v39;
      *(_BYTE *)(v37 + 48) = 1;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v37;
      if (SHIBYTE(v44) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v34 = v40;
      if (!v40)
        return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
LABEL_46:
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
      return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    goto LABEL_30;
  }
LABEL_24:
  v25 = bswap32(*(_DWORD *)(v18 + 12));
  if (v25 > 0)
  {
    v26 = (const llvm::object::XCOFFObjectFile *)bswap32(*(_DWORD *)(v18 + 8));
    goto LABEL_26;
  }
LABEL_30:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
  return result;
}

void *llvm::object::ObjectFile::createXCOFFObjectFile@<X0>(_OWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  void *result;
  _OWORD v6[2];
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  result = llvm::object::XCOFFObjectFile::create(a2, v6, (uint64_t)&v7);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v8 & 1;
  *(_QWORD *)a3 = v7;
  return result;
}

BOOL llvm::object::doesXCOFFTracebackTableBegin(_DWORD *a1, unint64_t a2)
{
  return a2 >= 4 && *a1 == 0;
}

void llvm::object::TBVectorExt::create(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  char v5;
  void *v6;
  __int16 v7;
  void *v8[3];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  llvm::object::TBVectorExt::TBVectorExt((uint64_t)&v7, a1, a2, &v6);
  v4 = v6;
  v5 = *(_BYTE *)(a3 + 64);
  if (v6)
  {
    *(_BYTE *)(a3 + 64) = v5 | 1;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    *(_BYTE *)(a3 + 64) = v5 & 0xFE;
    *(_WORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_OWORD *)(a3 + 16) = xmmword_1C677F680;
    if (v8[1])
      sub_1C4FE6ED8(a3 + 8, (uint64_t)v8);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t llvm::object::TBVectorExt::TBVectorExt(uint64_t a1, unsigned __int16 *a2, uint64_t a3, void **a4)
{
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v11[3];
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a1 + 32;
  v6 = a1 + 8;
  *(_OWORD *)(a1 + 16) = xmmword_1C677F680;
  v7 = bswap32(*a2);
  *(_WORD *)a1 = HIWORD(v7);
  llvm::XCOFF::parseVectorParmsType((llvm::XCOFF *)bswap32(*(_DWORD *)(a2 + 1)), (v7 >> 17) & 0x7F, (uint64_t)v11);
  if ((v13 & 1) != 0)
  {
    v9 = v11[0];
    *a4 = v11[0];
    if (!v9)
LABEL_10:
      *a4 = 0;
  }
  else
  {
    sub_1C50502AC(v6, (uint64_t)v11);
    v8 = v11[0];
    if ((v13 & 1) != 0)
    {
      v11[0] = 0;
      if (v8)
        (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
    }
    else if (v11[0] != &v12)
    {
      free(v11[0]);
    }
    if (!*a4)
      goto LABEL_10;
  }
  return a1;
}

uint64_t llvm::object::TBVectorExt::getNumberOfVRSaved(llvm::object::TBVectorExt *this)
{
  return *(unsigned __int16 *)this >> 10;
}

uint64_t llvm::object::TBVectorExt::isVRSavedOnStack(llvm::object::TBVectorExt *this)
{
  return (*(unsigned __int16 *)this >> 9) & 1;
}

uint64_t llvm::object::TBVectorExt::hasVarArgs(llvm::object::TBVectorExt *this)
{
  return HIBYTE(*(unsigned __int16 *)this) & 1;
}

uint64_t llvm::object::TBVectorExt::getNumberOfVectorParms(llvm::object::TBVectorExt *this)
{
  return *(unsigned __int8 *)this >> 1;
}

uint64_t llvm::object::TBVectorExt::hasVMXInstruction(llvm::object::TBVectorExt *this)
{
  return *(_WORD *)this & 1;
}

void llvm::object::XCOFFTracebackTable::create(llvm::object::XCOFFTracebackTable *this@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  void *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  int *v14;
  void *v15[3];
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  void *__src;
  unsigned int v21;
  int v22;
  _BYTE v23[32];
  char v24;
  _OWORD v25[2];
  __int16 v26;
  void *v27[3];
  uint64_t v28;
  char v29;
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  llvm::object::XCOFFTracebackTable::XCOFFTracebackTable(&v14, (int *)this, (uint64_t *)a2, &v13);
  v5 = v13;
  v6 = *(_BYTE *)(a3 + 264);
  if (v13)
  {
    *(_BYTE *)(a3 + 264) = v6 | 1;
    *(_QWORD *)a3 = v5;
    goto LABEL_22;
  }
  *(_BYTE *)(a3 + 264) = v6 & 0xFE;
  *(_QWORD *)a3 = v14;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  if (v17)
  {
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_OWORD *)(a3 + 16) = xmmword_1C677F680;
    if (v15[1])
      sub_1C4FE6ED8(a3 + 8, (uint64_t)v15);
    *(_BYTE *)(a3 + 64) = 1;
  }
  *(_BYTE *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 88) = v19;
  *(_BYTE *)(a3 + 144) = 0;
  if (v24)
  {
    v7 = (void *)(a3 + 112);
    *(_QWORD *)(a3 + 96) = a3 + 112;
    *(_QWORD *)(a3 + 104) = 0x800000000;
    if (&v14 == (int **)a3)
      goto LABEL_16;
    v8 = v21;
    if (!v21)
      goto LABEL_16;
    v9 = __src;
    if (__src != v23)
    {
      *(_QWORD *)(a3 + 96) = __src;
      v12 = v22;
      *(_DWORD *)(a3 + 104) = v8;
      *(_DWORD *)(a3 + 108) = v12;
      __src = v23;
      v22 = 0;
      goto LABEL_15;
    }
    if (v21 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 96, a3 + 112, v21, 4);
      v10 = v21;
      if (!v21)
        goto LABEL_14;
      v9 = __src;
      v7 = *(void **)(a3 + 96);
    }
    else
    {
      v10 = v21;
    }
    memcpy(v7, v9, 4 * v10);
LABEL_14:
    *(_DWORD *)(a3 + 104) = v8;
LABEL_15:
    v21 = 0;
LABEL_16:
    *(_BYTE *)(a3 + 144) = 1;
  }
  *(_OWORD *)(a3 + 152) = v25[0];
  *(_OWORD *)(a3 + 162) = *(_OWORD *)((char *)v25 + 10);
  *(_BYTE *)(a3 + 184) = 0;
  *(_BYTE *)(a3 + 248) = 0;
  if (v29)
  {
    v11 = v26;
    *(_QWORD *)(a3 + 192) = a3 + 216;
    *(_WORD *)(a3 + 184) = v11;
    *(_OWORD *)(a3 + 200) = xmmword_1C677F680;
    if (v27[1])
      sub_1C4FE6ED8(a3 + 192, (uint64_t)v27);
    *(_BYTE *)(a3 + 248) = 1;
  }
  *(_WORD *)(a3 + 256) = v30;
LABEL_22:
  if (v29)
  {
    if (v27[0] != &v28)
      free(v27[0]);
    v29 = 0;
  }
  if (v24)
  {
    if (__src != v23)
      free(__src);
    v24 = 0;
  }
  if (v17)
  {
    if (v15[0] != &v16)
      free(v15[0]);
  }
}

int **llvm::object::XCOFFTracebackTable::XCOFFTracebackTable(int **a1, int *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::XCOFF *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  void *v34;
  char v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v41;
  unint64_t Bytes;
  int v43;
  int *v44;
  void *v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  __int16 v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *a1 = a2;
  *((_BYTE *)a1 + 8) = 0;
  v7 = (uint64_t)(a1 + 1);
  *((_BYTE *)a1 + 64) = 0;
  *((_BYTE *)a1 + 72) = 0;
  *((_BYTE *)a1 + 76) = 0;
  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 84) = 0;
  *((_BYTE *)a1 + 88) = 0;
  *((_BYTE *)a1 + 92) = 0;
  *((_BYTE *)a1 + 96) = 0;
  v8 = (uint64_t)(a1 + 12);
  *((_BYTE *)a1 + 144) = 0;
  *((_BYTE *)a1 + 152) = 0;
  *((_BYTE *)a1 + 168) = 0;
  *((_WORD *)a1 + 88) = 0;
  *((_BYTE *)a1 + 184) = 0;
  *((_BYTE *)a1 + 248) = 0;
  *((_WORD *)a1 + 128) = 0;
  v9 = *a3;
  v55[0] = a2;
  v55[1] = v9;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  sub_1C63873F8((uint64_t)v55, (unint64_t *)&v53, &v54);
  v10 = 0;
  v11 = (*a1)[1];
  v12 = -(v11 >> 25);
  if (v54 || BYTE2(v11) == v12)
  {
    if (v54)
      goto LABEL_5;
  }
  else
  {
    v10 = (llvm::XCOFF *)sub_1C6387364((uint64_t)v55, (unint64_t *)&v53, &v54);
    if (v54)
      goto LABEL_5;
  }
  if ((*((_BYTE *)*a1 + 2) & 0x20) != 0)
  {
    v18 = sub_1C6387364((uint64_t)v55, (unint64_t *)&v53, &v54);
    v19 = *((unsigned __int8 *)a1 + 76);
    *((_DWORD *)a1 + 18) = v18;
    if (!v19)
      *((_BYTE *)a1 + 76) = 1;
  }
LABEL_5:
  v13 = v54;
  if (v54)
    goto LABEL_15;
  if (**a1 < 0)
  {
    v20 = sub_1C6387364((uint64_t)v55, (unint64_t *)&v53, &v54);
    v21 = *((unsigned __int8 *)a1 + 84);
    *((_DWORD *)a1 + 20) = v20;
    if (!v21)
      *((_BYTE *)a1 + 84) = 1;
  }
  v13 = v54;
  if (v54)
    goto LABEL_15;
  v14 = **a1;
  if ((v14 & 0x80000) != 0)
  {
    v31 = sub_1C6387364((uint64_t)v55, (unint64_t *)&v53, &v54);
    if (!*((_BYTE *)a1 + 92))
      *((_BYTE *)a1 + 92) = 1;
    *((_DWORD *)a1 + 22) = v31;
    v13 = v54;
    if (v54)
      goto LABEL_15;
    v57 = &v59;
    v58 = (void *)0x800000000;
    if (v31 < 9)
    {
      v33 = 0;
      v32 = 1;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)&v59, v31, 4);
      v32 = *((unsigned __int8 *)a1 + 92);
      v31 = *((_DWORD *)a1 + 22);
      v33 = v54;
    }
    v36 = v33 == 0;
    if (v32 && v31 && !v33)
    {
      v37 = 1;
      do
      {
        v51 = v37;
        v38 = sub_1C6387364((uint64_t)v55, (unint64_t *)&v53, &v54);
        v39 = v58;
        if (v58 >= (unint64_t)HIDWORD(v58))
        {
          v50 = v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)&v59, v58 + 1, 4);
          v38 = v50;
          v39 = v58;
        }
        *((_DWORD *)v57 + v39) = v38;
        LODWORD(v58) = (_DWORD)v58 + 1;
        v36 = v54 == 0;
        if (!*((_BYTE *)a1 + 92))
          break;
        v37 = v51 + 1;
      }
      while (v51 < *((_DWORD *)a1 + 22) && v54 == 0);
    }
    if (v36)
      sub_1C62402B8(v8, (uint64_t)&v57);
    if (v57 != &v59)
      free(v57);
    v13 = v54;
    if (v54)
      goto LABEL_15;
    if ((**a1 & 0x40000000) == 0)
      goto LABEL_10;
  }
  else if ((v14 & 0x40000000) == 0)
  {
    goto LABEL_10;
  }
  v41 = sub_1C63871E8((uint64_t)v55, (unint64_t *)&v53, &v54);
  v13 = v54;
  if (v54)
    goto LABEL_15;
  Bytes = llvm::DataExtractor::getBytes(v55, (unint64_t *)&v53, v41, &v54);
  v43 = *((unsigned __int8 *)a1 + 168);
  a1[19] = (int *)Bytes;
  a1[20] = v44;
  if (!v43)
    *((_BYTE *)a1 + 168) = 1;
LABEL_10:
  v13 = v54;
  if (v54)
    goto LABEL_15;
  if ((*((_BYTE *)*a1 + 3) & 0x20) != 0)
  {
    v15 = sub_1C5DEAEAC(v55, (unint64_t *)&v53, &v54);
    v16 = *((unsigned __int8 *)a1 + 177);
    *((_BYTE *)a1 + 176) = v15;
    if (!v16)
      *((_BYTE *)a1 + 177) = 1;
  }
  v13 = v54;
  if (v54)
    goto LABEL_15;
  if ((*((_BYTE *)*a1 + 5) & 0x40) != 0)
  {
    v25 = (unsigned __int16 *)llvm::DataExtractor::getBytes(v55, (unint64_t *)&v53, 6, &v54);
    v13 = v54;
    if (!v54)
    {
      llvm::object::TBVectorExt::create(v25, v26, (uint64_t)&v57);
      v27 = v63;
      if ((v63 & 1) != 0)
      {
        v23 = 0;
        v34 = v57;
        v57 = 0;
        *a4 = v34;
        v35 = v27;
      }
      else
      {
        v28 = *((unsigned __int8 *)a1 + 248);
        *((_WORD *)a1 + 92) = (_WORD)v57;
        v29 = (uint64_t)(a1 + 24);
        if (v28)
        {
          v30 = v27;
          sub_1C50502AC(v29, (uint64_t)&v58);
          v27 = v30;
        }
        else
        {
          a1[24] = (int *)(a1 + 27);
          *(_OWORD *)(a1 + 25) = xmmword_1C677F680;
          if (v59)
          {
            v48 = v27;
            sub_1C50502AC(v29, (uint64_t)&v58);
            v27 = v48;
          }
          *((_BYTE *)a1 + 248) = 1;
        }
        v23 = *((_WORD *)a1 + 92) >> 1;
        v35 = v63;
      }
      if ((v35 & 1) != 0)
      {
        v49 = v57;
        v57 = 0;
        if (!v49)
          goto LABEL_93;
        v52 = v27;
        (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
      }
      else
      {
        if (v58 == &v61)
          goto LABEL_93;
        v52 = v27;
        free(v58);
      }
      v27 = v52;
LABEL_93:
      v22 = v54;
      if ((v27 & 1) != 0)
        goto LABEL_94;
      goto LABEL_28;
    }
LABEL_15:
    *a4 = v13;
LABEL_16:
    *a3 = v53;
    goto LABEL_17;
  }
  v22 = 0;
  v23 = 0;
LABEL_28:
  if (v22 || BYTE2(v11) == v12)
    goto LABEL_77;
  v24 = v11 >> 25;
  if ((*((_BYTE *)*a1 + 5) & 0x40) != 0)
    llvm::XCOFF::parseParmsTypeWithVecInfo(v10, BYTE2(v11), v24, v23, (uint64_t)&v57);
  else
    llvm::XCOFF::parseParmsType(v10, BYTE2(v11), v24, (uint64_t)&v57);
  if ((v62 & 1) == 0)
  {
    if (*((_BYTE *)a1 + 64))
    {
      sub_1C50502AC(v7, (uint64_t)&v57);
    }
    else
    {
      a1[1] = (int *)(a1 + 4);
      *((_OWORD *)a1 + 1) = xmmword_1C677F680;
      if (v58)
        sub_1C50502AC(v7, (uint64_t)&v57);
      *((_BYTE *)a1 + 64) = 1;
    }
    v45 = v57;
    if ((v62 & 1) != 0)
    {
      v57 = 0;
      if (v45)
        (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
    }
    else if (v57 != &v60)
    {
      free(v57);
    }
    v22 = v54;
LABEL_77:
    if (!v22 && (*((_BYTE *)*a1 + 5) & 0x80) != 0)
    {
      v46 = sub_1C5DEAEAC(v55, (unint64_t *)&v53, &v54);
      v47 = *((unsigned __int8 *)a1 + 257);
      *((_BYTE *)a1 + 256) = v46;
      if (!v47)
        *((_BYTE *)a1 + 257) = 1;
    }
    v13 = v54;
    if (!v54)
      goto LABEL_16;
    goto LABEL_15;
  }
  *a4 = v57;
  v22 = v54;
LABEL_94:
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_17:
  if (!*a4)
    *a4 = 0;
  return a1;
}

uint64_t llvm::object::XCOFFTracebackTable::getNumberOfFixedParms(llvm::object::XCOFFTracebackTable *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 6);
}

uint64_t llvm::object::XCOFFTracebackTable::getNumberOfFPParms(llvm::object::XCOFFTracebackTable *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 4) >> 25;
}

uint64_t llvm::object::XCOFFTracebackTable::hasTraceBackTableOffset(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 2) >> 5) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isInterruptHandler(llvm::object::XCOFFTracebackTable *this)
{
  return **(_DWORD **)this >> 31;
}

uint64_t llvm::object::XCOFFTracebackTable::hasControlledStorage(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 2) >> 3) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isFuncNamePresent(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 3) >> 6) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isAllocaUsed(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 3) >> 5) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::hasVectorInfo(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 5) >> 6) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::hasExtensionTable(llvm::object::XCOFFTracebackTable *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 5) >> 7;
}

uint64_t llvm::object::XCOFFTracebackTable::getVersion(llvm::object::XCOFFTracebackTable *this)
{
  return **(unsigned __int8 **)this;
}

uint64_t llvm::object::XCOFFTracebackTable::getLanguageID(llvm::object::XCOFFTracebackTable *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 1);
}

uint64_t llvm::object::XCOFFTracebackTable::isGlobalLinkage(llvm::object::XCOFFTracebackTable *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 2) >> 7;
}

uint64_t llvm::object::XCOFFTracebackTable::isOutOfLineEpilogOrPrologue(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 2) >> 6) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isInternalProcedure(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 2) >> 4) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isTOCless(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 2) >> 2) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isFloatingPointPresent(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 2) >> 1) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isFloatingPointOperationLogOrAbortEnabled(llvm::object::XCOFFTracebackTable *this)
{
  return *(_BYTE *)(*(_QWORD *)this + 2) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::getOnConditionDirective(llvm::object::XCOFFTracebackTable *this)
{
  return (**(_DWORD **)this >> 26) & 7;
}

uint64_t llvm::object::XCOFFTracebackTable::isCRSaved(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 3) >> 1) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isLRSaved(llvm::object::XCOFFTracebackTable *this)
{
  return *(_BYTE *)(*(_QWORD *)this + 3) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::isBackChainStored(llvm::object::XCOFFTracebackTable *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 4) >> 7;
}

uint64_t llvm::object::XCOFFTracebackTable::isFixup(llvm::object::XCOFFTracebackTable *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 4) >> 6) & 1;
}

uint64_t llvm::object::XCOFFTracebackTable::getNumOfFPRsSaved(llvm::object::XCOFFTracebackTable *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 4) & 0x3F;
}

uint64_t llvm::object::XCOFFTracebackTable::getNumOfGPRsSaved(llvm::object::XCOFFTracebackTable *this)
{
  return (*(_DWORD *)(*(_QWORD *)this + 4) >> 8) & 0x3F;
}

uint64_t llvm::object::XCOFFTracebackTable::hasParmsOnStack(llvm::object::XCOFFTracebackTable *this)
{
  return *(_BYTE *)(*(_QWORD *)this + 7) & 1;
}

double llvm::opt::Arg::Arg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

double llvm::opt::Arg::Arg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a8;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(a1 + 56) = 0x200000001;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a8;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(a1 + 56) = 0x200000001;
  return result;
}

void llvm::opt::Arg::~Arg(llvm::opt::Arg *this)
{
  llvm::opt::Arg *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v4 = *((unsigned int *)this + 14);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 6) + v5);
        if (v7)
          MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
        v5 += 8;
      }
      while (v6 != v5);
    }
  }
  v2 = (llvm::opt::Arg *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    llvm::opt::Arg::~Arg(v2);
    MEMORY[0x1CAA32FC0]();
  }
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 != (char *)this + 64)
    free(v3);
}

unsigned int *llvm::opt::Arg::render(uint64_t a1, uint64_t (***a2)(_QWORD), unsigned int *a3)
{
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const void *v13;
  size_t v14;
  const char **v15;
  const char *v16;
  size_t v17;
  uint64_t JoinedArgString;
  uint64_t v19;
  void *v20[4];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  if ((v6 & 4) != 0)
  {
    v12 = *(unsigned int *)(a1 + 40);
    v13 = *(const void **)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(const char ***)(a1 + 48);
    v16 = *v15;
    if (*v15)
      v17 = strlen(*v15);
    else
      v17 = 0;
    JoinedArgString = llvm::opt::ArgList::GetOrMakeJoinedArgString(a2, v12, v13, v14, v16, v17);
    v19 = a3[2];
    if (v19 >= a3[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v19 + 1, 8);
      LODWORD(v19) = a3[2];
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v19) = JoinedArgString;
    ++a3[2];
    return sub_1C486AF08(a3, (_BYTE *)(*(_QWORD *)(a1 + 48) + 8), (_BYTE *)(*(_QWORD *)(a1 + 48) + 8 * *(unsigned int *)(a1 + 56)));
  }
  else
  {
    if ((v6 & 8) == 0)
      __asm { BR              X10 }
    v7 = *(void **)(a1 + 24);
    v8 = *(void **)(a1 + 32);
    v21 = 261;
    v20[0] = v7;
    v20[1] = v8;
    v9 = sub_1C5A1C500((uint64_t)a2, (uint64_t)v20);
    v10 = a3[2];
    if (v10 >= a3[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v10 + 1, 8);
      LODWORD(v10) = a3[2];
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    ++a3[2];
    return sub_1C486AF08(a3, *(_BYTE **)(a1 + 48), (_BYTE *)(*(_QWORD *)(a1 + 48) + 8 * *(unsigned int *)(a1 + 56)));
  }
}

uint64_t sub_1C5A1C500(uint64_t a1, uint64_t a2)
{
  size_t v3;
  void *v4;
  uint64_t v5;
  const char *v7;
  char v8;
  void *v9;
  __int128 v10;
  _QWORD v11[33];

  v11[32] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C64638F0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *(void **)a2;
        if (*(_QWORD *)a2)
          v3 = strlen(*(const char **)a2);
        else
          v3 = 0;
        break;
      case 4:
        v7 = *(const char **)a2;
        v8 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v8 >= 0)
          v4 = *(void **)a2;
        else
          v4 = *(void **)v7;
        if (v8 >= 0)
          v3 = v8 & 0x7F;
        else
          v3 = *((_QWORD *)v7 + 1);
        break;
      case 5:
        v4 = *(void **)a2;
        v3 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector(a2, (uint64_t)&v9);
    v4 = v9;
    v3 = v10;
  }
  v5 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)a1 + 16))(a1, v4, v3);
  if (v9 != v11)
    free(v9);
  return v5;
}

unint64_t llvm::opt::ArgList::append(llvm::opt::ArgList *this, llvm::opt::Arg *a2)
{
  uint64_t v4;
  unint64_t result;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];

  v4 = *((unsigned int *)this + 4);
  if (v4 >= *((_DWORD *)this + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 8, (uint64_t)this + 24, v4 + 1, 8);
    LODWORD(v4) = *((_DWORD *)this + 4);
  }
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4) = a2;
  ++*((_DWORD *)this + 4);
  result = sub_1C5A1C734((uint64_t *)a2);
  if (result)
  {
    v7 = result;
    v8 = v6;
    do
    {
      LODWORD(v14[0]) = *(_DWORD *)(v7 + 32);
      *(_QWORD *)((char *)v14 + 4) = 0xFFFFFFFFLL;
      v12 = v14[0];
      v13 = 0;
      result = sub_1C5A1DA88((uint64_t)this + 152, &v12, (uint64_t *)((char *)&v12 + 4), (uint64_t)v14);
      v9 = v14[0];
      v10 = *((_DWORD *)this + 4);
      v11 = v10 - 1;
      if ((v10 - 1) >= *(_DWORD *)(v14[0] + 4))
        v11 = *(_DWORD *)(v14[0] + 4);
      *(_DWORD *)(v14[0] + 4) = v11;
      *(_DWORD *)(v9 + 8) = v10;
      if (!*(_WORD *)(v7 + 44))
        break;
      v7 = *v8 + ((unint64_t)(*(unsigned __int16 *)(v7 + 44) - 1) << 6);
    }
    while (*v8);
  }
  return result;
}

uint64_t sub_1C5A1C734(uint64_t *a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (*(_WORD *)(result + 46))
  {
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    v5[0] = *v3 + ((unint64_t)(*(unsigned __int16 *)(result + 46) - 1) << 6);
    v5[1] = v3;
    if (v4)
      return sub_1C5A1C734(v5);
  }
  return result;
}

double sub_1C5A1C784@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v14 = a2;
  Range = llvm::opt::ArgList::getRange(a1, &v14, 1);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v12 = v7 + 8 * Range;
  *((_QWORD *)&v12 + 1) = v8;
  LODWORD(v13) = a2;
  sub_1C5A1DA30((uint64_t)&v12);
  *(_QWORD *)&v10 = v8;
  *((_QWORD *)&v10 + 1) = v8;
  LODWORD(v11) = a2;
  sub_1C5A1DA30((uint64_t)&v10);
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  result = *(double *)&v10;
  *(_OWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 40) = v11;
  return result;
}

unint64_t llvm::opt::ArgList::getRange(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = 0;
  if (!a3)
    goto LABEL_18;
  v4 = &a2[a3];
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_DWORD *)(a1 + 168);
  v7 = v6 - 1;
  v8 = -1;
  do
  {
    if (v6)
    {
      v9 = (37 * *a2) & v7;
      v10 = (int *)(v5 + 12 * v9);
      v11 = *v10;
      if (*a2 == *v10)
      {
LABEL_5:
        if (v10 != (int *)(v5 + 12 * v6))
        {
          v12 = v10[2];
          if (v10[1] < v8)
            v8 = v10[1];
          if (v3 <= v12)
            v3 = v12;
          else
            v3 = v3;
        }
      }
      else
      {
        v13 = 1;
        while (v11 != -1)
        {
          v14 = v9 + v13++;
          v9 = v14 & v7;
          v10 = (int *)(v5 + 12 * v9);
          v11 = *v10;
          if (*a2 == *v10)
            goto LABEL_5;
        }
      }
    }
    ++a2;
  }
  while (a2 != v4);
  if (v8 == -1)
LABEL_18:
    v8 = 0;
  return v8 | (unint64_t)(v3 << 32);
}

uint64_t llvm::opt::ArgList::hasFlag(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = a2;
  v6 = (_QWORD *)sub_1C5A1C914(a1, a2, a3);
  if (v6)
    return llvm::opt::Option::matches(v6, v5);
  else
    return a4;
}

uint64_t sub_1C5A1C914(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t Range;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  _QWORD v18[2];
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v21 = __PAIR64__(a3, a2);
  Range = llvm::opt::ArgList::getRange(a1, &v21, 2);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 8 * HIDWORD(Range);
  *(_QWORD *)&v21 = v7 + 8 * Range;
  *((_QWORD *)&v21 + 1) = v8;
  v22 = __PAIR64__(a3, a2);
  sub_1C5A1DB1C((uint64_t)&v21);
  v18[0] = v8;
  v18[1] = v8;
  v19 = a2;
  v20 = a3;
  sub_1C5A1DB1C((uint64_t)v18);
  v16 = v21;
  v17 = v22;
  v9 = v18[0];
  v10 = (uint64_t *)v21;
  if ((_QWORD)v21 == v18[0])
    return 0;
  do
  {
    v14 = *v10;
    v13 = v10 + 1;
    v11 = v14;
    v15 = *(_QWORD *)(v14 + 16);
    if (!v15)
      v15 = v11;
    *(_BYTE *)(v15 + 44) |= 1u;
    *(_QWORD *)&v16 = v13;
    sub_1C5A1DB1C((uint64_t)&v16);
    v10 = (uint64_t *)v16;
  }
  while ((_QWORD)v16 != v9);
  return v11;
}

const char *llvm::opt::ArgList::getLastArgValue(uint64_t a1, int a2, const char *a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C5A1C784(a1, a2, (uint64_t)&v14);
  v12 = v14;
  v4 = v16;
  v13 = v15;
  v5 = (uint64_t *)v14;
  if ((_QWORD)v14 != v16)
  {
    do
    {
      v9 = *v5;
      v7 = v5 + 1;
      v8 = v9;
      v10 = *(_QWORD *)(v9 + 16);
      if (!v10)
        v10 = v8;
      *(_BYTE *)(v10 + 44) |= 1u;
      *(_QWORD *)&v12 = v7;
      sub_1C5A1DA30((uint64_t)&v12);
      v5 = (uint64_t *)v12;
    }
    while ((_QWORD)v12 != v4);
    v11 = *(const char ***)(v8 + 48);
    a3 = *v11;
    if (*v11)
      strlen(*v11);
  }
  return a3;
}

void llvm::opt::ArgList::getAllArgValues(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  const char **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[18];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x1000000000;
  llvm::opt::ArgList::AddAllArgValues(a1, (unsigned int *)&v14, a2, 0, 0);
  v4 = (const char **)v14;
  v5 = v15;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!(_DWORD)v5)
    goto LABEL_13;
  v6 = operator new(24 * v5);
  *a3 = v6;
  a3[2] = &v6[3 * v5];
  v7 = 8 * v5;
  do
  {
    v8 = *v4;
    v9 = strlen(*v4);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      v6[1] = v10;
      v6[2] = v13 | 0x8000000000000000;
      *v6 = v11;
LABEL_10:
      memmove(v11, v8, v10);
      goto LABEL_11;
    }
    *((_BYTE *)v6 + 23) = v9;
    v11 = v6;
    if (v9)
      goto LABEL_10;
LABEL_11:
    *((_BYTE *)v11 + v10) = 0;
    ++v4;
    v6 += 3;
    v7 -= 8;
  }
  while (v7);
  a3[1] = v6;
  v4 = (const char **)v14;
LABEL_13:
  if (v4 != v16)
    free(v4);
}

void llvm::opt::ArgList::AddAllArgValues(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];
  uint64_t v11;

  sub_1C5A1CF38(v10, a1, a3, a4, a5);
  v9[0] = v10[0];
  v9[1] = v10[1];
  v6 = v11;
  while (*(_QWORD *)&v9[0] != v6)
  {
    v7 = **(_QWORD **)&v9[0];
    v8 = *(_QWORD *)(**(_QWORD **)&v9[0] + 16);
    if (!v8)
      v8 = **(_QWORD **)&v9[0];
    *(_BYTE *)(v8 + 44) |= 1u;
    sub_1C486AF08(a2, *(_BYTE **)(v7 + 48), (_BYTE *)(*(_QWORD *)(v7 + 48) + 8 * *(unsigned int *)(v7 + 56)));
    *(_QWORD *)&v9[0] += 8;
    sub_1C5A1DB90((uint64_t)v9);
  }
}

unsigned int *llvm::opt::ArgList::addOptInFlag(uint64_t (***a1)(_QWORD), unsigned int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int *result;
  int v8;
  uint64_t v9;

  v6 = a3;
  result = (unsigned int *)sub_1C5A1C914((uint64_t)a1, a3, a4);
  if (result)
  {
    v9 = (uint64_t)result;
    v8 = llvm::opt::Option::matches(result, v6);
    result = (unsigned int *)v9;
    if (v8)
      return llvm::opt::Arg::render(v9, a1, a2);
  }
  return result;
}

uint64_t llvm::opt::ArgList::AddAllArgsExcept(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t (***v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v10 = (uint64_t (***)(_QWORD))result;
  v11 = *(unsigned int *)(result + 16);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    for (i = *(_QWORD **)(result + 8); !*i; ++i)
    {
      v12 -= 8;
      if (!v12)
        return result;
    }
  }
  else
  {
    i = *(_QWORD **)(result + 8);
  }
  v14 = *(_QWORD *)(result + 8) + 8 * v11;
  if (i != (_QWORD *)v14)
  {
    v15 = (_QWORD *)*i;
    v23 = 4 * a4;
    v24 = 4 * a6;
    if (a6)
    {
LABEL_9:
      v16 = v24;
      v17 = a5;
      while (1)
      {
        result = llvm::opt::Option::matches(v15, *v17);
        if ((result & 1) != 0)
          break;
        ++v17;
        v16 -= 4;
        if (!v16)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if (a4)
      {
        v18 = v23;
        v19 = a3;
        while (1)
        {
          result = llvm::opt::Option::matches(v15, *v19);
          if ((_DWORD)result)
            break;
          ++v19;
          v18 -= 4;
          if (!v18)
            goto LABEL_20;
        }
        v20 = (_QWORD *)v15[2];
        if (!v20)
          v20 = v15;
        *((_BYTE *)v20 + 44) |= 1u;
        result = (uint64_t)llvm::opt::Arg::render((uint64_t)v15, v10, a2);
      }
    }
LABEL_20:
    v21 = i + 1;
    while (v21 != (_QWORD *)v14)
    {
      v22 = (_QWORD *)*v21++;
      v15 = v22;
      if (v22)
      {
        i = v21 - 1;
        if (a6)
          goto LABEL_9;
        goto LABEL_12;
      }
    }
  }
  return result;
}

void llvm::opt::ArgList::AddAllArgs(uint64_t (***a1)(_QWORD), unsigned int *a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  _OWORD v12[2];
  uint64_t v13;

  sub_1C5A1CF38(v12, (uint64_t)a1, a3, a4, a5);
  v11[0] = v12[0];
  v11[1] = v12[1];
  for (i = v13; *(_QWORD *)&v11[0] != i; i = v10)
  {
    v10 = i;
    v8 = **(_QWORD **)&v11[0];
    v9 = *(_QWORD *)(**(_QWORD **)&v11[0] + 16);
    if (!v9)
      v9 = **(_QWORD **)&v11[0];
    *(_BYTE *)(v9 + 44) |= 1u;
    llvm::opt::Arg::render(v8, a1, a2);
    *(_QWORD *)&v11[0] += 8;
    sub_1C5A1DB90((uint64_t)v11);
  }
}

double sub_1C5A1CF38(_OWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  unint64_t Range;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  Range = llvm::opt::ArgList::getRange(a2, v20, 3);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = v11 + 8 * HIDWORD(Range);
  *(_QWORD *)&v18 = v11 + 8 * Range;
  *((_QWORD *)&v18 + 1) = v12;
  *(_QWORD *)&v19 = __PAIR64__(a4, a3);
  DWORD2(v19) = a5;
  sub_1C5A1DB90((uint64_t)&v18);
  *(_QWORD *)&v16 = v12;
  *((_QWORD *)&v16 + 1) = v12;
  *(_QWORD *)&v17 = __PAIR64__(a4, a3);
  DWORD2(v17) = a5;
  sub_1C5A1DB90((uint64_t)&v16);
  v13 = v19;
  *a1 = v18;
  a1[1] = v13;
  result = *(double *)&v16;
  v15 = v17;
  a1[2] = v16;
  a1[3] = v15;
  return result;
}

void llvm::opt::ArgList::ClaimAllArgs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  sub_1C5A1C784(a1, a2, (uint64_t)&v7);
  v5 = v7;
  v2 = v9;
  v6 = v8;
  while ((_QWORD)v5 != v2)
  {
    v3 = v5 + 8;
    v4 = *(_QWORD *)v5;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
      v4 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *(_BYTE *)(v4 + 44) |= 1u;
    *(_QWORD *)&v5 = v3;
    sub_1C5A1DA30((uint64_t)&v5);
  }
}

uint64_t llvm::opt::ArgList::GetOrMakeJoinedArgString(uint64_t (***a1)(_QWORD), uint64_t a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  const char *v11;
  const char *v12;
  size_t v13;
  _QWORD v16[4];
  __int16 v17;

  v11 = (const char *)(**a1)(a1);
  v12 = v11;
  if (v11)
    v13 = strlen(v11);
  else
    v13 = 0;
  if (v13 != a6 + a4 || v13 < a4)
    goto LABEL_16;
  if (a4)
  {
    if (memcmp(v12, a3, a4) || v13 < a6)
      goto LABEL_16;
  }
  else if (v13 < a6)
  {
LABEL_16:
    v16[0] = a3;
    v16[1] = a4;
    v16[2] = a5;
    v16[3] = a6;
    v17 = 1285;
    return sub_1C5A1C500((uint64_t)a1, (uint64_t)v16);
  }
  if (a6 && memcmp(&v12[v13 - a6], a5, a6))
    goto LABEL_16;
  return (uint64_t)v12;
}

uint64_t llvm::opt::InputArgList::releaseMemory(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = *(unsigned int *)(this + 16);
  if ((_DWORD)v1)
  {
    v2 = 8 * v1;
    for (i = *(uint64_t **)(this + 8); !*i; ++i)
    {
      v2 -= 8;
      if (!v2)
        return this;
    }
  }
  else
  {
    i = *(uint64_t **)(this + 8);
  }
  v4 = *(_QWORD *)(this + 8) + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    this = *i;
LABEL_6:
    if (this)
    {
      llvm::opt::Arg::~Arg((llvm::opt::Arg *)this);
      this = MEMORY[0x1CAA32FC0]();
    }
    v5 = i + 1;
    while (v5 != (uint64_t *)v4)
    {
      v6 = *v5++;
      this = v6;
      if (v6)
      {
        i = v5 - 1;
        goto LABEL_6;
      }
    }
  }
  return this;
}

llvm::opt::InputArgList *llvm::opt::InputArgList::InputArgList(llvm::opt::InputArgList *this, const char **a2, const char **a3)
{
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_QWORD *)this = off_1E818AF08;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 22) = (char *)this + 192;
  *((_QWORD *)this + 23) = 0x1000000000;
  *((_QWORD *)this + 40) = (char *)this + 320;
  *((_QWORD *)this + 41) = (char *)this + 320;
  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 86) = (unint64_t)((char *)a3 - (char *)a2) >> 3;
  sub_1C486AF08((unsigned int *)this + 44, a2, a3);
  return this;
}

{
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_QWORD *)this = off_1E818AF08;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 22) = (char *)this + 192;
  *((_QWORD *)this + 23) = 0x1000000000;
  *((_QWORD *)this + 40) = (char *)this + 320;
  *((_QWORD *)this + 41) = (char *)this + 320;
  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 86) = (unint64_t)((char *)a3 - (char *)a2) >> 3;
  sub_1C486AF08((unsigned int *)this + 44, a2, a3);
  return this;
}

uint64_t llvm::opt::InputArgList::MakeIndex(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 __dst;
  unint64_t v17;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = *(unsigned int *)(a1 + 184);
  v7 = a1 + 320;
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v17 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v17) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v11 = (char *)operator new(0x28uLL);
  v12 = v11 + 16;
  *((_OWORD *)v11 + 1) = __dst;
  *((_QWORD *)v11 + 4) = v17;
  v13 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v7;
  *(_QWORD *)(v13 + 8) = v11;
  *(_QWORD *)(a1 + 320) = v11;
  ++*(_QWORD *)(a1 + 336);
  if (v11[39] < 0)
    v12 = (_QWORD *)*v12;
  v14 = *(unsigned int *)(a1 + 184);
  if (v14 >= *(_DWORD *)(a1 + 188))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 176, a1 + 192, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a1 + 184);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v14) = v12;
  ++*(_DWORD *)(a1 + 184);
  return v6;
}

uint64_t llvm::opt::InputArgList::MakeIndex(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t Index;

  Index = llvm::opt::InputArgList::MakeIndex(a1, a2, a3);
  llvm::opt::InputArgList::MakeIndex(a1, a4, a5);
  return Index;
}

uint64_t llvm::opt::InputArgList::MakeArgStringRef(uint64_t a1, const void *a2, size_t a3)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * llvm::opt::InputArgList::MakeIndex(a1, a2, a3));
}

uint64_t sub_1C5A1D420(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * a2);
}

double llvm::opt::DerivedArgList::DerivedArgList(llvm::opt::DerivedArgList *this, const llvm::opt::InputArgList *a2)
{
  double result;

  *(_QWORD *)&result = 0x1000000000;
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_QWORD *)this = off_1E818AF30;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 22) = a2;
  *((_QWORD *)this + 23) = (char *)this + 200;
  *((_QWORD *)this + 24) = 0x1000000000;
  return result;
}

{
  double result;

  *(_QWORD *)&result = 0x1000000000;
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_QWORD *)this = off_1E818AF30;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 22) = a2;
  *((_QWORD *)this + 23) = (char *)this + 200;
  *((_QWORD *)this + 24) = 0x1000000000;
  return result;
}

uint64_t llvm::opt::DerivedArgList::MakeArgStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[4];
  __int16 v6;

  v3 = *(_QWORD *)(a1 + 176);
  v6 = 261;
  v5[0] = a2;
  v5[1] = a3;
  return sub_1C5A1C500(v3, (uint64_t)v5);
}

void sub_1C5A1D490(unsigned int *a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = a1[2];
  v5 = *(_QWORD *)a1;
  if (v4 >= a1[3])
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C62E03EC(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C62E03EC(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = a1[2];
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  a1[2] = v6 + 1;
}

double sub_1C5A1D514(uint64_t *a1, __int128 *a2, const char **a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  __int128 v11;
  const char *v12;
  size_t v13;
  int v14;
  uint64_t v15;
  double result;

  v10 = operator new();
  v11 = *a2;
  v12 = *a3;
  if (v12)
  {
    v13 = strlen(v12);
    v11 = *a2;
  }
  else
  {
    v13 = 0;
  }
  v14 = *a4;
  v15 = *a5;
  *(_OWORD *)v10 = v11;
  *(_QWORD *)(v10 + 16) = v15;
  *(_QWORD *)(v10 + 24) = v12;
  *(_QWORD *)(v10 + 32) = v13;
  *(_DWORD *)(v10 + 40) = v14;
  *(_BYTE *)(v10 + 44) &= 0xFCu;
  *(_QWORD *)(v10 + 48) = v10 + 64;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(v10 + 56) = 0x200000000;
  *(_QWORD *)(v10 + 80) = 0;
  *a1 = v10;
  return result;
}

uint64_t llvm::opt::DerivedArgList::MakePositionalArg(uint64_t a1, uint64_t a2, const char ***a3, uint64_t a4, const void *a5, size_t a6)
{
  unsigned int Index;
  size_t v11;
  const char **v12;
  size_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  llvm::opt::Arg *v18;
  _QWORD v20[4];
  __int16 v21;
  llvm::opt::Arg *v22;

  Index = llvm::opt::InputArgList::MakeIndex(*(_QWORD *)(a1 + 176), a5, a6);
  if (**a3)
    v11 = strlen(**a3);
  else
    v11 = 0;
  v12 = a3[1];
  if (v12)
    v13 = strlen((const char *)a3[1]);
  else
    v13 = 0;
  v20[0] = **a3;
  v20[1] = v11;
  v20[2] = v12;
  v20[3] = v13;
  v21 = 1285;
  v14 = (const char *)sub_1C5A1C500(a1, (uint64_t)v20);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 176) + 8 * Index);
  v16 = operator new();
  if (v14)
    v17 = strlen(v14);
  else
    v17 = 0;
  *(_QWORD *)v16 = a3;
  *(_QWORD *)(v16 + 8) = a4;
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v17;
  *(_DWORD *)(v16 + 40) = Index;
  *(_BYTE *)(v16 + 44) &= 0xFCu;
  *(_QWORD *)(v16 + 64) = v15;
  *(_QWORD *)(v16 + 48) = v16 + 64;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 56) = 0x200000001;
  v22 = (llvm::opt::Arg *)v16;
  sub_1C5A1D490((unsigned int *)(a1 + 184), (char *)&v22);
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    llvm::opt::Arg::~Arg(v18);
    MEMORY[0x1CAA32FC0]();
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned int *)(a1 + 192) - 8);
}

double sub_1C5A1D750(uint64_t *a1, __int128 *a2, const char **a3, int *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  __int128 v13;
  const char *v14;
  size_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v12 = operator new();
  v13 = *a2;
  v14 = *a3;
  if (v14)
  {
    v15 = strlen(v14);
    v13 = *a2;
  }
  else
  {
    v15 = 0;
  }
  v16 = *a4;
  v17 = *a5;
  v18 = *a6;
  *(_OWORD *)v12 = v13;
  *(_QWORD *)(v12 + 16) = v18;
  *(_QWORD *)(v12 + 24) = v14;
  *(_QWORD *)(v12 + 32) = v15;
  *(_DWORD *)(v12 + 40) = v16;
  *(_BYTE *)(v12 + 44) &= 0xFCu;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 48) = v12 + 64;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(v12 + 56) = 0x200000001;
  *a1 = v12;
  return result;
}

uint64_t llvm::opt::DerivedArgList::MakeJoinedArg(uint64_t a1, uint64_t a2, const char ***a3, uint64_t a4, const char **a5, size_t a6)
{
  uint64_t v12;
  const char **v13;
  size_t v14;
  void **v15;
  size_t v16;
  unsigned int Index;
  size_t v18;
  const char **v19;
  size_t v20;
  const char *v21;
  const char *v22;
  const char *v23;
  _QWORD *v24;
  size_t v25;
  llvm::opt::Arg *v26;
  const char *v28;
  size_t v29;
  const char **v30;
  size_t v31;
  __int16 v32;
  void *__p[2];
  char v34;

  v12 = *(_QWORD *)(a1 + 176);
  v13 = a3[1];
  if (v13)
    v14 = strlen((const char *)a3[1]);
  else
    v14 = 0;
  v28 = (const char *)v13;
  v29 = v14;
  v30 = a5;
  v31 = a6;
  v32 = 1285;
  llvm::Twine::str((llvm::Twine *)&v28, __p);
  if (v34 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v34 >= 0)
    v16 = v34 & 0x7F;
  else
    v16 = (size_t)__p[1];
  Index = llvm::opt::InputArgList::MakeIndex(v12, v15, v16);
  if (v34 < 0)
    operator delete(__p[0]);
  if (**a3)
    v18 = strlen(**a3);
  else
    v18 = 0;
  v19 = a3[1];
  if (v19)
    v20 = strlen((const char *)a3[1]);
  else
    v20 = 0;
  v28 = **a3;
  v29 = v18;
  v30 = v19;
  v31 = v20;
  v32 = 1285;
  v21 = (const char *)sub_1C5A1C500(a1, (uint64_t)&v28);
  v22 = (const char *)a3[1];
  if (v22)
    v22 = (const char *)strlen(v22);
  v23 = &v22[*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 176) + 8 * Index)];
  v24 = (_QWORD *)operator new();
  if (v21)
    v25 = strlen(v21);
  else
    v25 = 0;
  *v24 = a3;
  v24[1] = a4;
  v24[2] = a2;
  v24[3] = v21;
  v24[4] = v25;
  *((_DWORD *)v24 + 10) = Index;
  *((_BYTE *)v24 + 44) &= 0xFCu;
  v24[8] = v23;
  v24[6] = v24 + 8;
  v24[10] = 0;
  v24[7] = 0x200000001;
  __p[0] = v24;
  sub_1C5A1D490((unsigned int *)(a1 + 184), (char *)__p);
  v26 = (llvm::opt::Arg *)__p[0];
  __p[0] = 0;
  if (v26)
  {
    llvm::opt::Arg::~Arg(v26);
    MEMORY[0x1CAA32FC0]();
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * *(unsigned int *)(a1 + 192) - 8);
}

uint64_t sub_1C5A1DA18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 344);
}

uint64_t sub_1C5A1DA20(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 176) + 8 * a2);
}

uint64_t sub_1C5A1DA30(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)result;
  v2 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v2)
  {
    v3 = result;
    do
    {
      result = *v1;
      if (*v1)
      {
        v4 = *(unsigned int *)(v3 + 16);
        if ((_DWORD)v4)
        {
          result = llvm::opt::Option::matches((_QWORD *)result, v4);
          if ((result & 1) != 0)
            return result;
          v1 = *(uint64_t **)v3;
          v2 = *(uint64_t **)(v3 + 8);
        }
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1C5A1DA88@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_1C51B1F1C((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C51B1FBC(a1, (uint64_t)a2, a2, v12);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a2;
    *(_QWORD *)(result + 4) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C5A1DB1C(uint64_t result)
{
  _QWORD **v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;

  v1 = *(_QWORD ***)result;
  v2 = *(_QWORD ***)(result + 8);
  if (*(_QWORD ***)result != v2)
  {
    v3 = result;
    do
    {
      v4 = *v1;
      if (*v1)
      {
        for (i = 16; i != 24; i += 4)
        {
          v6 = *(unsigned int *)(v3 + i);
          if (!(_DWORD)v6)
            break;
          result = llvm::opt::Option::matches(v4, v6);
          if ((result & 1) != 0)
            return result;
        }
        v1 = *(_QWORD ***)v3;
        v2 = *(_QWORD ***)(v3 + 8);
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1C5A1DB90(uint64_t result)
{
  _QWORD **v1;
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;

  v1 = *(_QWORD ***)result;
  v2 = *(_QWORD ***)(result + 8);
  if (*(_QWORD ***)result != v2)
  {
    v3 = result;
    do
    {
      v4 = *v1;
      if (*v1)
      {
        for (i = 16; i != 28; i += 4)
        {
          v6 = *(unsigned int *)(v3 + i);
          if (!(_DWORD)v6)
            break;
          result = llvm::opt::Option::matches(v4, v6);
          if ((result & 1) != 0)
            return result;
        }
        v1 = *(_QWORD ***)v3;
        v2 = *(_QWORD ***)(v3 + 8);
      }
      *(_QWORD *)v3 = ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *llvm::opt::Option::Option(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::opt::Option::matches(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *a1;
  v2 = (uint64_t *)a1[1];
  if (*(_WORD *)(*a1 + 46))
  {
    v4 = *v2;
    v10[0] = *v2 + ((unint64_t)(*(unsigned __int16 *)(*a1 + 46) - 1) << 6);
    v10[1] = v2;
    if (v4)
    {
      a2 = a2;
      v8 = v10;
      return llvm::opt::Option::matches(v8, a2);
    }
  }
  if (*(_DWORD *)(v3 + 32) == (_DWORD)a2)
    return 1;
  v5 = *(unsigned __int16 *)(v3 + 44);
  if (v5)
  {
    v7 = *v2;
    v9[0] = *v2 + ((unint64_t)(v5 - 1) << 6);
    v9[1] = v2;
    if (v7)
    {
      a2 = a2;
      v8 = v9;
      return llvm::opt::Option::matches(v8, a2);
    }
  }
  return 0;
}

void llvm::opt::Option::acceptInternal(uint64_t a1)
{
  __asm { BR              X10 }
}

size_t sub_1C5A1DCF4()
{
  _DWORD *v0;
  uint64_t (***v1)(_QWORD, _QWORD);
  size_t *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  const char *v6;
  size_t result;
  int v8;

  v6 = (const char *)(**v1)(v1, *v0);
  result = strlen(v6);
  if (v3 == result)
  {
    v8 = (*v0)++;
    result = operator new();
    *(_OWORD *)result = *v4;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v5;
    *(_QWORD *)(result + 32) = v3;
    *(_DWORD *)(result + 40) = v8;
    *(_BYTE *)(result + 44) &= 0xFCu;
    *(_QWORD *)(result + 48) = result + 64;
    *(_QWORD *)(result + 56) = 0x200000000;
    *(_QWORD *)(result + 80) = 0;
    *v2 = result;
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void llvm::opt::Option::accept(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  int v14;
  const char ***v15;
  uint64_t v16;
  const char ***v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  const char **v21;
  size_t v22;
  const char *v23;
  const char *v24;
  size_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void **v31;
  const char *v32;
  unsigned int v33;
  const char *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  _QWORD v39[4];
  __int16 v40;
  uint64_t v41;

  if (a5 && *(_BYTE *)(*a1 + 36) == 3)
  {
    v13 = operator new();
    v14 = *a6;
    *(_OWORD *)v13 = *(_OWORD *)a1;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = a3;
    *(_QWORD *)(v13 + 32) = a4;
    *(_DWORD *)(v13 + 40) = v14;
    *(_BYTE *)(v13 + 44) &= 0xFCu;
    *(_QWORD *)(v13 + 48) = v13 + 64;
    *(_QWORD *)(v13 + 56) = 0x200000000;
    *(_QWORD *)(v13 + 80) = 0;
  }
  else
  {
    llvm::opt::Option::acceptInternal((uint64_t)a1);
    v13 = v41;
    if (!v41)
    {
LABEL_6:
      *a7 = v13;
      return;
    }
  }
  v15 = (const char ***)sub_1C5A1C734(a1);
  if (*(_DWORD *)(*a1 + 32) == *((_DWORD *)v15 + 8))
    goto LABEL_6;
  v17 = v15;
  v18 = v16;
  v19 = **v15;
  if (v19)
    v20 = strlen(**v15);
  else
    v20 = 0;
  v21 = v17[1];
  if (v21)
    v22 = strlen((const char *)v17[1]);
  else
    v22 = 0;
  v39[0] = v19;
  v39[1] = v20;
  v39[2] = v21;
  v39[3] = v22;
  v40 = 1285;
  v23 = (const char *)sub_1C5A1C500(a2, (uint64_t)v39);
  v24 = v23;
  if (v23)
    v25 = strlen(v23);
  else
    v25 = 0;
  v26 = *(_DWORD *)(v13 + 40);
  v27 = operator new();
  v28 = v27;
  *(_QWORD *)v27 = v17;
  *(_QWORD *)(v27 + 8) = v18;
  *(_QWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v27 + 24) = v24;
  *(_QWORD *)(v27 + 32) = v25;
  *(_DWORD *)(v27 + 40) = v26;
  v29 = *(_BYTE *)(v27 + 44) & 0xFC;
  *(_BYTE *)(v27 + 44) = v29;
  v30 = v27 + 64;
  *(_QWORD *)(v27 + 48) = v27 + 64;
  v31 = (void **)(v27 + 48);
  *(_QWORD *)(v27 + 56) = 0x200000000;
  *a7 = v27;
  *(_QWORD *)(v27 + 80) = v13;
  if (*(_BYTE *)(*a1 + 36) != 3)
  {
    if (v27 == v13)
    {
LABEL_30:
      v38 = *(_BYTE *)(v13 + 44);
      *(_BYTE *)(v28 + 44) = v29 | v38 & 2;
      *(_BYTE *)(v13 + 44) = v38 & 0xFD;
      return;
    }
    v36 = *(_DWORD *)(v13 + 56);
    if (v36)
    {
      if (v36 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 48, v30, *(unsigned int *)(v13 + 56), 8);
        v37 = *(unsigned int *)(v13 + 56);
        if (!*(_DWORD *)(v13 + 56))
          goto LABEL_29;
        goto LABEL_28;
      }
      v37 = *(unsigned int *)(v13 + 56);
      if (*(_DWORD *)(v13 + 56))
LABEL_28:
        memcpy(*v31, *(const void **)(v13 + 48), 8 * v37);
    }
LABEL_29:
    *(_DWORD *)(v28 + 56) = v36;
    v29 = *(_BYTE *)(v28 + 44) & 0xFD;
    goto LABEL_30;
  }
  v32 = *(const char **)(*a1 + 48);
  if (v32 && *v32)
  {
    v33 = 0;
    do
    {
      if (v33 >= *(_DWORD *)(v28 + 60))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v31, v30, v33 + 1, 8);
        v33 = *(_DWORD *)(v28 + 56);
      }
      *(_QWORD *)(*(_QWORD *)(v28 + 48) + 8 * v33) = v32;
      v33 = *(_DWORD *)(v28 + 56) + 1;
      *(_DWORD *)(v28 + 56) = v33;
      v34 = &v32[strlen(v32)];
      v35 = *((unsigned __int8 *)v34 + 1);
      v32 = v34 + 1;
    }
    while (v35);
  }
  else
  {
    v33 = 0;
  }
  if (*((_BYTE *)v17 + 36) == 4 && !*(_QWORD *)(*a1 + 48))
  {
    if (v33 >= *(_DWORD *)(v28 + 60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v31, v30, v33 + 1, 8);
      v33 = *(_DWORD *)(v28 + 56);
    }
    *(_QWORD *)(*(_QWORD *)(v28 + 48) + 8 * v33) = "";
    ++*(_DWORD *)(v28 + 56);
  }
}

_DWORD *llvm::opt::OptSpecifier::OptSpecifier(_DWORD *result, uint64_t a2)
{
  *result = *(_DWORD *)(*(_QWORD *)a2 + 32);
  return result;
}

{
  *result = *(_DWORD *)(*(_QWORD *)a2 + 32);
  return result;
}

uint64_t llvm::opt::OptTable::OptTable(uint64_t a1, char *a2, unint64_t a3, char a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *i;
  char **v20;
  char *v21;
  char **v22;
  size_t v23;
  char *v24;
  _QWORD *v26;
  _QWORD *v27;
  std::string::value_type *v28;
  uint64_t j;
  uint64_t v30;
  std::string::value_type v31;
  char v32;
  BOOL v33;
  char *v34;
  size_t v35;
  size_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  BOOL v40;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a3)
  {
    if (a3 >> 58)
      abort();
    v8 = &a2[64 * a3];
    v9 = (char *)operator new(a3 << 6);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v9[64 * a3];
    memcpy(v9, a2, v8 - a2);
    v10 = &v9[v8 - a2];
    *(_QWORD *)(a1 + 8) = v10;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x800000000;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = v10 - v9;
  v12 = v11 >> 6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (!(v11 >> 6))
  {
LABEL_13:
    LODWORD(v13) = 0;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (v11 >> 6);
  v15 = v9 + 32;
  while (1)
  {
    v16 = v15[4];
    if (v15[4])
      break;
LABEL_12:
    ++v13;
    v15 += 64;
    if (v14 == v13)
      goto LABEL_13;
  }
  if (v16 == 2)
  {
    *(_DWORD *)(a1 + 44) = *(_DWORD *)v15;
    goto LABEL_12;
  }
  if (v16 == 1)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)v15;
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 48) = v13;
LABEL_14:
  if ((_DWORD)v13 == (_DWORD)v12)
  {
    v17 = 0;
    v18 = 0;
    i = 0;
  }
  else
  {
    do
    {
      v20 = *(char ***)(*(_QWORD *)a1 + ((unint64_t)v13 << 6));
      if (v20)
      {
        v21 = *v20;
        if (*v20)
        {
          v22 = v20 + 1;
          do
          {
            v23 = strlen(v21);
            sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 56), (unsigned __int8 *)v21, v23);
            v24 = *v22++;
            v21 = v24;
          }
          while (v24);
        }
      }
      LODWORD(v13) = v13 + 1;
    }
    while ((_DWORD)v13 != (_DWORD)v12);
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v18)
    {
      for (i = *(_QWORD **)(a1 + 56); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      v18 = 0;
      i = *(_QWORD **)(a1 + 56);
    }
  }
  v26 = (_QWORD *)(v17 + 8 * v18);
  if (i != v26)
  {
    v27 = (_QWORD *)*i;
    do
    {
      v30 = *v27;
      v28 = (std::string::value_type *)(v27 + 1);
      for (j = v30; j; --j)
      {
        v31 = *v28;
        v32 = *(_BYTE *)(a1 + 111);
        v33 = v32 < 0;
        if (v32 >= 0)
          v34 = (char *)(a1 + 88);
        else
          v34 = *(char **)(a1 + 88);
        v35 = v32 & 0x7F;
        if (v33)
          v36 = *(_QWORD *)(a1 + 96);
        else
          v36 = v35;
        v37 = (char *)memchr(v34, *v28, v36);
        if (v37)
          v38 = v37;
        else
          v38 = &v34[v36];
        if (v38 - v34 == v36)
          std::string::push_back((std::string *)(a1 + 88), v31);
        ++v28;
      }
      do
      {
        v39 = (_QWORD *)i[1];
        ++i;
        v27 = v39;
        if (v39)
          v40 = v27 + 1 == 0;
        else
          v40 = 1;
      }
      while (v40);
    }
    while (i != v26);
  }
  return a1;
}

